
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000215ac  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003660  08031750  08031750  00031750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034db0  08034db0  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  08034db0  08034db0  00034db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034db8  08034db8  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034db8  08034db8  00034db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08034dbc  08034dbc  00034dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08034dc0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7fc  200002f8  080350b8  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000daf4  080350b8  0004daf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f042  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b19  00000000  00000000  0006f3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ab0  00000000  00000000  00076ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000226a  00000000  00000000  00079978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9aa  00000000  00000000  0007bbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000330f9  00000000  00000000  0009b58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa27f  00000000  00000000  000ce685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ca7c  00000000  00000000  00178904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00185380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08031734 	.word	0x08031734

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	08031734 	.word	0x08031734

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	; 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9ba 	b.w	8011044 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9e08      	ldr	r6, [sp, #32]
 8010d82:	460d      	mov	r5, r1
 8010d84:	4604      	mov	r4, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14a      	bne.n	8010e22 <__udivmoddi4+0xa6>
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	4694      	mov	ip, r2
 8010d90:	d965      	bls.n	8010e5e <__udivmoddi4+0xe2>
 8010d92:	fab2 f382 	clz	r3, r2
 8010d96:	b143      	cbz	r3, 8010daa <__udivmoddi4+0x2e>
 8010d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8010d9c:	f1c3 0220 	rsb	r2, r3, #32
 8010da0:	409f      	lsls	r7, r3
 8010da2:	fa20 f202 	lsr.w	r2, r0, r2
 8010da6:	4317      	orrs	r7, r2
 8010da8:	409c      	lsls	r4, r3
 8010daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010dae:	fa1f f58c 	uxth.w	r5, ip
 8010db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8010db6:	0c22      	lsrs	r2, r4, #16
 8010db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8010dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010dc0:	fb01 f005 	mul.w	r0, r1, r5
 8010dc4:	4290      	cmp	r0, r2
 8010dc6:	d90a      	bls.n	8010dde <__udivmoddi4+0x62>
 8010dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8010dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8010dd0:	f080 811c 	bcs.w	801100c <__udivmoddi4+0x290>
 8010dd4:	4290      	cmp	r0, r2
 8010dd6:	f240 8119 	bls.w	801100c <__udivmoddi4+0x290>
 8010dda:	3902      	subs	r1, #2
 8010ddc:	4462      	add	r2, ip
 8010dde:	1a12      	subs	r2, r2, r0
 8010de0:	b2a4      	uxth	r4, r4
 8010de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8010de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8010dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010dee:	fb00 f505 	mul.w	r5, r0, r5
 8010df2:	42a5      	cmp	r5, r4
 8010df4:	d90a      	bls.n	8010e0c <__udivmoddi4+0x90>
 8010df6:	eb1c 0404 	adds.w	r4, ip, r4
 8010dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8010dfe:	f080 8107 	bcs.w	8011010 <__udivmoddi4+0x294>
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	f240 8104 	bls.w	8011010 <__udivmoddi4+0x294>
 8010e08:	4464      	add	r4, ip
 8010e0a:	3802      	subs	r0, #2
 8010e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	2100      	movs	r1, #0
 8010e14:	b11e      	cbz	r6, 8010e1e <__udivmoddi4+0xa2>
 8010e16:	40dc      	lsrs	r4, r3
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	428b      	cmp	r3, r1
 8010e24:	d908      	bls.n	8010e38 <__udivmoddi4+0xbc>
 8010e26:	2e00      	cmp	r6, #0
 8010e28:	f000 80ed 	beq.w	8011006 <__udivmoddi4+0x28a>
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8010e32:	4608      	mov	r0, r1
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	fab3 f183 	clz	r1, r3
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d149      	bne.n	8010ed4 <__udivmoddi4+0x158>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d302      	bcc.n	8010e4a <__udivmoddi4+0xce>
 8010e44:	4282      	cmp	r2, r0
 8010e46:	f200 80f8 	bhi.w	801103a <__udivmoddi4+0x2be>
 8010e4a:	1a84      	subs	r4, r0, r2
 8010e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8010e50:	2001      	movs	r0, #1
 8010e52:	4617      	mov	r7, r2
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0e2      	beq.n	8010e1e <__udivmoddi4+0xa2>
 8010e58:	e9c6 4700 	strd	r4, r7, [r6]
 8010e5c:	e7df      	b.n	8010e1e <__udivmoddi4+0xa2>
 8010e5e:	b902      	cbnz	r2, 8010e62 <__udivmoddi4+0xe6>
 8010e60:	deff      	udf	#255	; 0xff
 8010e62:	fab2 f382 	clz	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f040 8090 	bne.w	8010f8c <__udivmoddi4+0x210>
 8010e6c:	1a8a      	subs	r2, r1, r2
 8010e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e72:	fa1f fe8c 	uxth.w	lr, ip
 8010e76:	2101      	movs	r1, #1
 8010e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8010e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8010e80:	0c22      	lsrs	r2, r4, #16
 8010e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010e86:	fb0e f005 	mul.w	r0, lr, r5
 8010e8a:	4290      	cmp	r0, r2
 8010e8c:	d908      	bls.n	8010ea0 <__udivmoddi4+0x124>
 8010e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8010e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8010e96:	d202      	bcs.n	8010e9e <__udivmoddi4+0x122>
 8010e98:	4290      	cmp	r0, r2
 8010e9a:	f200 80cb 	bhi.w	8011034 <__udivmoddi4+0x2b8>
 8010e9e:	4645      	mov	r5, r8
 8010ea0:	1a12      	subs	r2, r2, r0
 8010ea2:	b2a4      	uxth	r4, r4
 8010ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8010ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8010eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8010eb4:	45a6      	cmp	lr, r4
 8010eb6:	d908      	bls.n	8010eca <__udivmoddi4+0x14e>
 8010eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8010ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8010ec0:	d202      	bcs.n	8010ec8 <__udivmoddi4+0x14c>
 8010ec2:	45a6      	cmp	lr, r4
 8010ec4:	f200 80bb 	bhi.w	801103e <__udivmoddi4+0x2c2>
 8010ec8:	4610      	mov	r0, r2
 8010eca:	eba4 040e 	sub.w	r4, r4, lr
 8010ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010ed2:	e79f      	b.n	8010e14 <__udivmoddi4+0x98>
 8010ed4:	f1c1 0720 	rsb	r7, r1, #32
 8010ed8:	408b      	lsls	r3, r1
 8010eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8010ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8010ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8010ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8010eea:	40fd      	lsrs	r5, r7
 8010eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010ef0:	4323      	orrs	r3, r4
 8010ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8010ef6:	fa1f fe8c 	uxth.w	lr, ip
 8010efa:	fb09 5518 	mls	r5, r9, r8, r5
 8010efe:	0c1c      	lsrs	r4, r3, #16
 8010f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010f04:	fb08 f50e 	mul.w	r5, r8, lr
 8010f08:	42a5      	cmp	r5, r4
 8010f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8010f12:	d90b      	bls.n	8010f2c <__udivmoddi4+0x1b0>
 8010f14:	eb1c 0404 	adds.w	r4, ip, r4
 8010f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8010f1c:	f080 8088 	bcs.w	8011030 <__udivmoddi4+0x2b4>
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	f240 8085 	bls.w	8011030 <__udivmoddi4+0x2b4>
 8010f26:	f1a8 0802 	sub.w	r8, r8, #2
 8010f2a:	4464      	add	r4, ip
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	b29d      	uxth	r5, r3
 8010f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8010f34:	fb09 4413 	mls	r4, r9, r3, r4
 8010f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8010f40:	45a6      	cmp	lr, r4
 8010f42:	d908      	bls.n	8010f56 <__udivmoddi4+0x1da>
 8010f44:	eb1c 0404 	adds.w	r4, ip, r4
 8010f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8010f4c:	d26c      	bcs.n	8011028 <__udivmoddi4+0x2ac>
 8010f4e:	45a6      	cmp	lr, r4
 8010f50:	d96a      	bls.n	8011028 <__udivmoddi4+0x2ac>
 8010f52:	3b02      	subs	r3, #2
 8010f54:	4464      	add	r4, ip
 8010f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8010f5e:	eba4 040e 	sub.w	r4, r4, lr
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	46c8      	mov	r8, r9
 8010f66:	46ae      	mov	lr, r5
 8010f68:	d356      	bcc.n	8011018 <__udivmoddi4+0x29c>
 8010f6a:	d053      	beq.n	8011014 <__udivmoddi4+0x298>
 8010f6c:	b156      	cbz	r6, 8010f84 <__udivmoddi4+0x208>
 8010f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8010f72:	eb64 040e 	sbc.w	r4, r4, lr
 8010f76:	fa04 f707 	lsl.w	r7, r4, r7
 8010f7a:	40ca      	lsrs	r2, r1
 8010f7c:	40cc      	lsrs	r4, r1
 8010f7e:	4317      	orrs	r7, r2
 8010f80:	e9c6 7400 	strd	r7, r4, [r6]
 8010f84:	4618      	mov	r0, r3
 8010f86:	2100      	movs	r1, #0
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	f1c3 0120 	rsb	r1, r3, #32
 8010f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8010f94:	fa20 f201 	lsr.w	r2, r0, r1
 8010f98:	fa25 f101 	lsr.w	r1, r5, r1
 8010f9c:	409d      	lsls	r5, r3
 8010f9e:	432a      	orrs	r2, r5
 8010fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010fa4:	fa1f fe8c 	uxth.w	lr, ip
 8010fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8010fac:	fb07 1510 	mls	r5, r7, r0, r1
 8010fb0:	0c11      	lsrs	r1, r2, #16
 8010fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8010fba:	428d      	cmp	r5, r1
 8010fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8010fc0:	d908      	bls.n	8010fd4 <__udivmoddi4+0x258>
 8010fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8010fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8010fca:	d22f      	bcs.n	801102c <__udivmoddi4+0x2b0>
 8010fcc:	428d      	cmp	r5, r1
 8010fce:	d92d      	bls.n	801102c <__udivmoddi4+0x2b0>
 8010fd0:	3802      	subs	r0, #2
 8010fd2:	4461      	add	r1, ip
 8010fd4:	1b49      	subs	r1, r1, r5
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8010fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8010fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8010fe8:	4291      	cmp	r1, r2
 8010fea:	d908      	bls.n	8010ffe <__udivmoddi4+0x282>
 8010fec:	eb1c 0202 	adds.w	r2, ip, r2
 8010ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8010ff4:	d216      	bcs.n	8011024 <__udivmoddi4+0x2a8>
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	d914      	bls.n	8011024 <__udivmoddi4+0x2a8>
 8010ffa:	3d02      	subs	r5, #2
 8010ffc:	4462      	add	r2, ip
 8010ffe:	1a52      	subs	r2, r2, r1
 8011000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8011004:	e738      	b.n	8010e78 <__udivmoddi4+0xfc>
 8011006:	4631      	mov	r1, r6
 8011008:	4630      	mov	r0, r6
 801100a:	e708      	b.n	8010e1e <__udivmoddi4+0xa2>
 801100c:	4639      	mov	r1, r7
 801100e:	e6e6      	b.n	8010dde <__udivmoddi4+0x62>
 8011010:	4610      	mov	r0, r2
 8011012:	e6fb      	b.n	8010e0c <__udivmoddi4+0x90>
 8011014:	4548      	cmp	r0, r9
 8011016:	d2a9      	bcs.n	8010f6c <__udivmoddi4+0x1f0>
 8011018:	ebb9 0802 	subs.w	r8, r9, r2
 801101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8011020:	3b01      	subs	r3, #1
 8011022:	e7a3      	b.n	8010f6c <__udivmoddi4+0x1f0>
 8011024:	4645      	mov	r5, r8
 8011026:	e7ea      	b.n	8010ffe <__udivmoddi4+0x282>
 8011028:	462b      	mov	r3, r5
 801102a:	e794      	b.n	8010f56 <__udivmoddi4+0x1da>
 801102c:	4640      	mov	r0, r8
 801102e:	e7d1      	b.n	8010fd4 <__udivmoddi4+0x258>
 8011030:	46d0      	mov	r8, sl
 8011032:	e77b      	b.n	8010f2c <__udivmoddi4+0x1b0>
 8011034:	3d02      	subs	r5, #2
 8011036:	4462      	add	r2, ip
 8011038:	e732      	b.n	8010ea0 <__udivmoddi4+0x124>
 801103a:	4608      	mov	r0, r1
 801103c:	e70a      	b.n	8010e54 <__udivmoddi4+0xd8>
 801103e:	4464      	add	r4, ip
 8011040:	3802      	subs	r0, #2
 8011042:	e742      	b.n	8010eca <__udivmoddi4+0x14e>

08011044 <__aeabi_idiv0>:
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop

08011048 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0

}
 801104c:	bf00      	nop
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8011056:	b480      	push	{r7}
 8011058:	af00      	add	r7, sp, #0
return 0;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
	...

08011068 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a0e      	ldr	r2, [pc, #56]	; (80110b4 <HAL_UARTEx_RxEventCallback+0x4c>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d116      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801107e:	887b      	ldrh	r3, [r7, #2]
 8011080:	2b18      	cmp	r3, #24
 8011082:	d113      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011084:	4b0c      	ldr	r3, [pc, #48]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f00f fa31 	bl	80204f0 <osMessageQueueGetCount>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	2300      	movs	r3, #0
 801109a:	2200      	movs	r2, #0
 801109c:	4907      	ldr	r1, [pc, #28]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 801109e:	f00f f969 	bl	8020374 <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110a2:	2218      	movs	r2, #24
 80110a4:	4905      	ldr	r1, [pc, #20]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 80110a6:	4806      	ldr	r0, [pc, #24]	; (80110c0 <HAL_UARTEx_RxEventCallback+0x58>)
 80110a8:	f006 fb7c 	bl	80177a4 <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	40004400 	.word	0x40004400
 80110b8:	20000448 	.word	0x20000448
 80110bc:	20000474 	.word	0x20000474
 80110c0:	200003d8 	.word	0x200003d8

080110c4 <EthMutexTake>:

void EthMutexTake(void){
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <EthMutexTake+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f04f 31ff 	mov.w	r1, #4294967295
 80110d0:	4618      	mov	r0, r3
 80110d2:	f00f f854 	bl	802017e <osMutexAcquire>
}
 80110d6:	bf00      	nop
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000464 	.word	0x20000464

080110e0 <EthMutexRelease>:

void EthMutexRelease(void){
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110e4:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <EthMutexRelease+0x14>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f00f f893 	bl	8020214 <osMutexRelease>
}
 80110ee:	bf00      	nop
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000464 	.word	0x20000464

080110f8 <LfsMutexTake>:

void LfsMutexTake(void){
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80110fc:	4b04      	ldr	r3, [pc, #16]	; (8011110 <LfsMutexTake+0x18>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f04f 31ff 	mov.w	r1, #4294967295
 8011104:	4618      	mov	r0, r3
 8011106:	f00f f83a 	bl	802017e <osMutexAcquire>
}
 801110a:	bf00      	nop
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000468 	.word	0x20000468

08011114 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011118:	4b03      	ldr	r3, [pc, #12]	; (8011128 <LfsMutexRelease+0x14>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f00f f879 	bl	8020214 <osMutexRelease>
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20000468 	.word	0x20000468

0801112c <SocketMutexTake>:

void SocketMutexTake(void){
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 8011130:	4b04      	ldr	r3, [pc, #16]	; (8011144 <SocketMutexTake+0x18>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f04f 31ff 	mov.w	r1, #4294967295
 8011138:	4618      	mov	r0, r3
 801113a:	f00f f820 	bl	802017e <osMutexAcquire>
}
 801113e:	bf00      	nop
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	2000046c 	.word	0x2000046c

08011148 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 801114c:	4b03      	ldr	r3, [pc, #12]	; (801115c <SocketMutexRelease+0x14>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4618      	mov	r0, r3
 8011152:	f00f f85f 	bl	8020214 <osMutexRelease>
}
 8011156:	bf00      	nop
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	2000046c 	.word	0x2000046c

08011160 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8011160:	b580      	push	{r7, lr}
 8011162:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011164:	4b04      	ldr	r3, [pc, #16]	; (8011178 <ServiceSockMutexTake+0x18>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f04f 31ff 	mov.w	r1, #4294967295
 801116c:	4618      	mov	r0, r3
 801116e:	f00f f806 	bl	802017e <osMutexAcquire>
}
 8011172:	bf00      	nop
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	20000470 	.word	0x20000470

0801117c <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8011180:	4b03      	ldr	r3, [pc, #12]	; (8011190 <ServiceSockMutexRelease+0x14>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f00f f845 	bl	8020214 <osMutexRelease>
}
 801118a:	bf00      	nop
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	20000470 	.word	0x20000470

08011194 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 8011198:	2200      	movs	r2, #0
 801119a:	2102      	movs	r1, #2
 801119c:	4802      	ldr	r0, [pc, #8]	; (80111a8 <PowerON_HLW8032+0x14>)
 801119e:	f004 fd31 	bl	8015c04 <HAL_GPIO_WritePin>
}
 80111a2:	bf00      	nop
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	40020000 	.word	0x40020000

080111ac <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111b0:	2201      	movs	r2, #1
 80111b2:	2102      	movs	r1, #2
 80111b4:	4802      	ldr	r0, [pc, #8]	; (80111c0 <PowerOFF_HLW8032+0x14>)
 80111b6:	f004 fd25 	bl	8015c04 <HAL_GPIO_WritePin>
}
 80111ba:	bf00      	nop
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	40020000 	.word	0x40020000

080111c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
}
 80111ca:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111cc:	4b60      	ldr	r3, [pc, #384]	; (8011350 <main+0x18c>)
 80111ce:	4a61      	ldr	r2, [pc, #388]	; (8011354 <main+0x190>)
 80111d0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111d2:	b662      	cpsie	i
}
 80111d4:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111d6:	f004 f9bf 	bl	8015558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111da:	f000 f927 	bl	801142c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111de:	485e      	ldr	r0, [pc, #376]	; (8011358 <main+0x194>)
 80111e0:	f00b fb80 	bl	801c8e4 <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111e4:	f000 fa54 	bl	8011690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111e8:	f000 fa26 	bl	8011638 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111ec:	f000 f9b8 	bl	8011560 <MX_SPI1_Init>
  MX_SPI3_Init();
 80111f0:	f000 f9ec 	bl	80115cc <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 80111f4:	f00e fdbc 	bl	801fd70 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 80111f8:	f000 f984 	bl	8011504 <MX_CRC_Init>
  MX_IWDG_Init();
 80111fc:	f000 f996 	bl	801152c <MX_IWDG_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8011200:	f00e fdb6 	bl	801fd70 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011204:	f00e fe00 	bl	801fe08 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011208:	4854      	ldr	r0, [pc, #336]	; (801135c <main+0x198>)
 801120a:	f00e ff32 	bl	8020072 <osMutexNew>
 801120e:	4603      	mov	r3, r0
 8011210:	4a53      	ldr	r2, [pc, #332]	; (8011360 <main+0x19c>)
 8011212:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011214:	4853      	ldr	r0, [pc, #332]	; (8011364 <main+0x1a0>)
 8011216:	f00e ff2c 	bl	8020072 <osMutexNew>
 801121a:	4603      	mov	r3, r0
 801121c:	4a52      	ldr	r2, [pc, #328]	; (8011368 <main+0x1a4>)
 801121e:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 8011220:	4852      	ldr	r0, [pc, #328]	; (801136c <main+0x1a8>)
 8011222:	f00e ff26 	bl	8020072 <osMutexNew>
 8011226:	4603      	mov	r3, r0
 8011228:	4a51      	ldr	r2, [pc, #324]	; (8011370 <main+0x1ac>)
 801122a:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 801122c:	4851      	ldr	r0, [pc, #324]	; (8011374 <main+0x1b0>)
 801122e:	f00e ff20 	bl	8020072 <osMutexNew>
 8011232:	4603      	mov	r3, r0
 8011234:	4a50      	ldr	r2, [pc, #320]	; (8011378 <main+0x1b4>)
 8011236:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011238:	4a50      	ldr	r2, [pc, #320]	; (801137c <main+0x1b8>)
 801123a:	211e      	movs	r1, #30
 801123c:	2001      	movs	r0, #1
 801123e:	f00f f826 	bl	802028e <osMessageQueueNew>
 8011242:	4603      	mov	r3, r0
 8011244:	4a4e      	ldr	r2, [pc, #312]	; (8011380 <main+0x1bc>)
 8011246:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011248:	4a4e      	ldr	r2, [pc, #312]	; (8011384 <main+0x1c0>)
 801124a:	2120      	movs	r1, #32
 801124c:	2001      	movs	r0, #1
 801124e:	f00f f81e 	bl	802028e <osMessageQueueNew>
 8011252:	4603      	mov	r3, r0
 8011254:	4a4c      	ldr	r2, [pc, #304]	; (8011388 <main+0x1c4>)
 8011256:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011258:	4a4c      	ldr	r2, [pc, #304]	; (801138c <main+0x1c8>)
 801125a:	2124      	movs	r1, #36	; 0x24
 801125c:	2001      	movs	r0, #1
 801125e:	f00f f816 	bl	802028e <osMessageQueueNew>
 8011262:	4603      	mov	r3, r0
 8011264:	4a4a      	ldr	r2, [pc, #296]	; (8011390 <main+0x1cc>)
 8011266:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011268:	4a4a      	ldr	r2, [pc, #296]	; (8011394 <main+0x1d0>)
 801126a:	2108      	movs	r1, #8
 801126c:	2001      	movs	r0, #1
 801126e:	f00f f80e 	bl	802028e <osMessageQueueNew>
 8011272:	4603      	mov	r3, r0
 8011274:	4a48      	ldr	r2, [pc, #288]	; (8011398 <main+0x1d4>)
 8011276:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011278:	4a48      	ldr	r2, [pc, #288]	; (801139c <main+0x1d8>)
 801127a:	21c6      	movs	r1, #198	; 0xc6
 801127c:	2001      	movs	r0, #1
 801127e:	f00f f806 	bl	802028e <osMessageQueueNew>
 8011282:	4603      	mov	r3, r0
 8011284:	4a46      	ldr	r2, [pc, #280]	; (80113a0 <main+0x1dc>)
 8011286:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011288:	4a46      	ldr	r2, [pc, #280]	; (80113a4 <main+0x1e0>)
 801128a:	2102      	movs	r1, #2
 801128c:	2001      	movs	r0, #1
 801128e:	f00e fffe 	bl	802028e <osMessageQueueNew>
 8011292:	4603      	mov	r3, r0
 8011294:	4a44      	ldr	r2, [pc, #272]	; (80113a8 <main+0x1e4>)
 8011296:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 8011298:	4a44      	ldr	r2, [pc, #272]	; (80113ac <main+0x1e8>)
 801129a:	2104      	movs	r1, #4
 801129c:	2001      	movs	r0, #1
 801129e:	f00e fff6 	bl	802028e <osMessageQueueNew>
 80112a2:	4603      	mov	r3, r0
 80112a4:	4a42      	ldr	r2, [pc, #264]	; (80113b0 <main+0x1ec>)
 80112a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112a8:	4a42      	ldr	r2, [pc, #264]	; (80113b4 <main+0x1f0>)
 80112aa:	2100      	movs	r1, #0
 80112ac:	4842      	ldr	r0, [pc, #264]	; (80113b8 <main+0x1f4>)
 80112ae:	f00e fdf5 	bl	801fe9c <osThreadNew>
 80112b2:	4603      	mov	r3, r0
 80112b4:	4a41      	ldr	r2, [pc, #260]	; (80113bc <main+0x1f8>)
 80112b6:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112b8:	4a41      	ldr	r2, [pc, #260]	; (80113c0 <main+0x1fc>)
 80112ba:	2100      	movs	r1, #0
 80112bc:	4841      	ldr	r0, [pc, #260]	; (80113c4 <main+0x200>)
 80112be:	f00e fded 	bl	801fe9c <osThreadNew>
 80112c2:	4603      	mov	r3, r0
 80112c4:	4a40      	ldr	r2, [pc, #256]	; (80113c8 <main+0x204>)
 80112c6:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112c8:	4a40      	ldr	r2, [pc, #256]	; (80113cc <main+0x208>)
 80112ca:	2100      	movs	r1, #0
 80112cc:	4840      	ldr	r0, [pc, #256]	; (80113d0 <main+0x20c>)
 80112ce:	f00e fde5 	bl	801fe9c <osThreadNew>
 80112d2:	4603      	mov	r3, r0
 80112d4:	4a3f      	ldr	r2, [pc, #252]	; (80113d4 <main+0x210>)
 80112d6:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112d8:	4a3f      	ldr	r2, [pc, #252]	; (80113d8 <main+0x214>)
 80112da:	2100      	movs	r1, #0
 80112dc:	483f      	ldr	r0, [pc, #252]	; (80113dc <main+0x218>)
 80112de:	f00e fddd 	bl	801fe9c <osThreadNew>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4a3e      	ldr	r2, [pc, #248]	; (80113e0 <main+0x21c>)
 80112e6:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112e8:	4a3e      	ldr	r2, [pc, #248]	; (80113e4 <main+0x220>)
 80112ea:	2100      	movs	r1, #0
 80112ec:	483e      	ldr	r0, [pc, #248]	; (80113e8 <main+0x224>)
 80112ee:	f00e fdd5 	bl	801fe9c <osThreadNew>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4a3d      	ldr	r2, [pc, #244]	; (80113ec <main+0x228>)
 80112f6:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 80112f8:	4a3d      	ldr	r2, [pc, #244]	; (80113f0 <main+0x22c>)
 80112fa:	2100      	movs	r1, #0
 80112fc:	483d      	ldr	r0, [pc, #244]	; (80113f4 <main+0x230>)
 80112fe:	f00e fdcd 	bl	801fe9c <osThreadNew>
 8011302:	4603      	mov	r3, r0
 8011304:	4a3c      	ldr	r2, [pc, #240]	; (80113f8 <main+0x234>)
 8011306:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011308:	4a3c      	ldr	r2, [pc, #240]	; (80113fc <main+0x238>)
 801130a:	2100      	movs	r1, #0
 801130c:	483c      	ldr	r0, [pc, #240]	; (8011400 <main+0x23c>)
 801130e:	f00e fdc5 	bl	801fe9c <osThreadNew>
 8011312:	4603      	mov	r3, r0
 8011314:	4a3b      	ldr	r2, [pc, #236]	; (8011404 <main+0x240>)
 8011316:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011318:	4a3b      	ldr	r2, [pc, #236]	; (8011408 <main+0x244>)
 801131a:	2100      	movs	r1, #0
 801131c:	483b      	ldr	r0, [pc, #236]	; (801140c <main+0x248>)
 801131e:	f00e fdbd 	bl	801fe9c <osThreadNew>
 8011322:	4603      	mov	r3, r0
 8011324:	4a3a      	ldr	r2, [pc, #232]	; (8011410 <main+0x24c>)
 8011326:	6013      	str	r3, [r2, #0]

  /* creation of resetWatchDog */
  resetWatchDogHandle = osThreadNew(vResetWatchDog, NULL, &resetWatchDog_attributes);
 8011328:	4a3a      	ldr	r2, [pc, #232]	; (8011414 <main+0x250>)
 801132a:	2100      	movs	r1, #0
 801132c:	483a      	ldr	r0, [pc, #232]	; (8011418 <main+0x254>)
 801132e:	f00e fdb5 	bl	801fe9c <osThreadNew>
 8011332:	4603      	mov	r3, r0
 8011334:	4a39      	ldr	r2, [pc, #228]	; (801141c <main+0x258>)
 8011336:	6013      	str	r3, [r2, #0]

  /* creation of SendBroadcast */
  SendBroadcastHandle = osThreadNew(vSendBroadcast, NULL, &SendBroadcast_attributes);
 8011338:	4a39      	ldr	r2, [pc, #228]	; (8011420 <main+0x25c>)
 801133a:	2100      	movs	r1, #0
 801133c:	4839      	ldr	r0, [pc, #228]	; (8011424 <main+0x260>)
 801133e:	f00e fdad 	bl	801fe9c <osThreadNew>
 8011342:	4603      	mov	r3, r0
 8011344:	4a38      	ldr	r2, [pc, #224]	; (8011428 <main+0x264>)
 8011346:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011348:	f00e fd82 	bl	801fe50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 801134c:	e7fe      	b.n	801134c <main+0x188>
 801134e:	bf00      	nop
 8011350:	e000ed00 	.word	0xe000ed00
 8011354:	08010000 	.word	0x08010000
 8011358:	0801fb75 	.word	0x0801fb75
 801135c:	08033fdc 	.word	0x08033fdc
 8011360:	20000464 	.word	0x20000464
 8011364:	08033fec 	.word	0x08033fec
 8011368:	20000468 	.word	0x20000468
 801136c:	08033ffc 	.word	0x08033ffc
 8011370:	2000046c 	.word	0x2000046c
 8011374:	0803400c 	.word	0x0803400c
 8011378:	20000470 	.word	0x20000470
 801137c:	08033f34 	.word	0x08033f34
 8011380:	20000448 	.word	0x20000448
 8011384:	08033f4c 	.word	0x08033f4c
 8011388:	2000044c 	.word	0x2000044c
 801138c:	08033f64 	.word	0x08033f64
 8011390:	20000450 	.word	0x20000450
 8011394:	08033f7c 	.word	0x08033f7c
 8011398:	20000454 	.word	0x20000454
 801139c:	08033f94 	.word	0x08033f94
 80113a0:	20000458 	.word	0x20000458
 80113a4:	08033fac 	.word	0x08033fac
 80113a8:	2000045c 	.word	0x2000045c
 80113ac:	08033fc4 	.word	0x08033fc4
 80113b0:	20000460 	.word	0x20000460
 80113b4:	08033dcc 	.word	0x08033dcc
 80113b8:	08011785 	.word	0x08011785
 80113bc:	20000420 	.word	0x20000420
 80113c0:	08033df0 	.word	0x08033df0
 80113c4:	08011795 	.word	0x08011795
 80113c8:	20000424 	.word	0x20000424
 80113cc:	08033e14 	.word	0x08033e14
 80113d0:	08011929 	.word	0x08011929
 80113d4:	20000428 	.word	0x20000428
 80113d8:	08033e38 	.word	0x08033e38
 80113dc:	08011c91 	.word	0x08011c91
 80113e0:	2000042c 	.word	0x2000042c
 80113e4:	08033e5c 	.word	0x08033e5c
 80113e8:	08011ccd 	.word	0x08011ccd
 80113ec:	20000430 	.word	0x20000430
 80113f0:	08033e80 	.word	0x08033e80
 80113f4:	08012249 	.word	0x08012249
 80113f8:	20000434 	.word	0x20000434
 80113fc:	08033ea4 	.word	0x08033ea4
 8011400:	080122e5 	.word	0x080122e5
 8011404:	20000438 	.word	0x20000438
 8011408:	08033ec8 	.word	0x08033ec8
 801140c:	08012469 	.word	0x08012469
 8011410:	2000043c 	.word	0x2000043c
 8011414:	08033eec 	.word	0x08033eec
 8011418:	08012701 	.word	0x08012701
 801141c:	20000440 	.word	0x20000440
 8011420:	08033f10 	.word	0x08033f10
 8011424:	0801271d 	.word	0x0801271d
 8011428:	20000444 	.word	0x20000444

0801142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b094      	sub	sp, #80	; 0x50
 8011430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011432:	f107 0320 	add.w	r3, r7, #32
 8011436:	2230      	movs	r2, #48	; 0x30
 8011438:	2100      	movs	r1, #0
 801143a:	4618      	mov	r0, r3
 801143c:	f01c f9ae 	bl	802d79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011440:	f107 030c 	add.w	r3, r7, #12
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
 8011448:	605a      	str	r2, [r3, #4]
 801144a:	609a      	str	r2, [r3, #8]
 801144c:	60da      	str	r2, [r3, #12]
 801144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011450:	2300      	movs	r3, #0
 8011452:	60bb      	str	r3, [r7, #8]
 8011454:	4b29      	ldr	r3, [pc, #164]	; (80114fc <SystemClock_Config+0xd0>)
 8011456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011458:	4a28      	ldr	r2, [pc, #160]	; (80114fc <SystemClock_Config+0xd0>)
 801145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801145e:	6413      	str	r3, [r2, #64]	; 0x40
 8011460:	4b26      	ldr	r3, [pc, #152]	; (80114fc <SystemClock_Config+0xd0>)
 8011462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011468:	60bb      	str	r3, [r7, #8]
 801146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801146c:	2300      	movs	r3, #0
 801146e:	607b      	str	r3, [r7, #4]
 8011470:	4b23      	ldr	r3, [pc, #140]	; (8011500 <SystemClock_Config+0xd4>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011478:	4a21      	ldr	r2, [pc, #132]	; (8011500 <SystemClock_Config+0xd4>)
 801147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	4b1f      	ldr	r3, [pc, #124]	; (8011500 <SystemClock_Config+0xd4>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011488:	607b      	str	r3, [r7, #4]
 801148a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801148c:	2309      	movs	r3, #9
 801148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8011496:	2301      	movs	r3, #1
 8011498:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801149a:	2302      	movs	r3, #2
 801149c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801149e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80114a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80114a4:	2304      	movs	r3, #4
 80114a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80114a8:	2354      	movs	r3, #84	; 0x54
 80114aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80114ac:	2302      	movs	r3, #2
 80114ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80114b0:	2304      	movs	r3, #4
 80114b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114b4:	f107 0320 	add.w	r3, r7, #32
 80114b8:	4618      	mov	r0, r3
 80114ba:	f004 fc0f 	bl	8015cdc <HAL_RCC_OscConfig>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80114c4:	f001 f9a4 	bl	8012810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114c8:	230f      	movs	r3, #15
 80114ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114cc:	2302      	movs	r3, #2
 80114ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114d0:	2300      	movs	r3, #0
 80114d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80114d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114da:	2300      	movs	r3, #0
 80114dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80114de:	f107 030c 	add.w	r3, r7, #12
 80114e2:	2102      	movs	r1, #2
 80114e4:	4618      	mov	r0, r3
 80114e6:	f004 fe71 	bl	80161cc <HAL_RCC_ClockConfig>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80114f0:	f001 f98e 	bl	8012810 <Error_Handler>
  }
}
 80114f4:	bf00      	nop
 80114f6:	3750      	adds	r7, #80	; 0x50
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	40023800 	.word	0x40023800
 8011500:	40007000 	.word	0x40007000

08011504 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8011508:	4b06      	ldr	r3, [pc, #24]	; (8011524 <MX_CRC_Init+0x20>)
 801150a:	4a07      	ldr	r2, [pc, #28]	; (8011528 <MX_CRC_Init+0x24>)
 801150c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801150e:	4805      	ldr	r0, [pc, #20]	; (8011524 <MX_CRC_Init+0x20>)
 8011510:	f004 f946 	bl	80157a0 <HAL_CRC_Init>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d001      	beq.n	801151e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 801151a:	f001 f979 	bl	8012810 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801151e:	bf00      	nop
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	20000314 	.word	0x20000314
 8011528:	40023000 	.word	0x40023000

0801152c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011530:	4b09      	ldr	r3, [pc, #36]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011532:	4a0a      	ldr	r2, [pc, #40]	; (801155c <MX_IWDG_Init+0x30>)
 8011534:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8011536:	4b08      	ldr	r3, [pc, #32]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011538:	2206      	movs	r2, #6
 801153a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 801153c:	4b06      	ldr	r3, [pc, #24]	; (8011558 <MX_IWDG_Init+0x2c>)
 801153e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8011542:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011544:	4804      	ldr	r0, [pc, #16]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011546:	f004 fb76 	bl	8015c36 <HAL_IWDG_Init>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8011550:	f001 f95e 	bl	8012810 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011554:	bf00      	nop
 8011556:	bd80      	pop	{r7, pc}
 8011558:	2000031c 	.word	0x2000031c
 801155c:	40003000 	.word	0x40003000

08011560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011564:	4b17      	ldr	r3, [pc, #92]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011566:	4a18      	ldr	r2, [pc, #96]	; (80115c8 <MX_SPI1_Init+0x68>)
 8011568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801156a:	4b16      	ldr	r3, [pc, #88]	; (80115c4 <MX_SPI1_Init+0x64>)
 801156c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011572:	4b14      	ldr	r3, [pc, #80]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011574:	2200      	movs	r2, #0
 8011576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011578:	4b12      	ldr	r3, [pc, #72]	; (80115c4 <MX_SPI1_Init+0x64>)
 801157a:	2200      	movs	r2, #0
 801157c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801157e:	4b11      	ldr	r3, [pc, #68]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011580:	2202      	movs	r2, #2
 8011582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011584:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011586:	2201      	movs	r2, #1
 8011588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801158a:	4b0e      	ldr	r3, [pc, #56]	; (80115c4 <MX_SPI1_Init+0x64>)
 801158c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011592:	4b0c      	ldr	r3, [pc, #48]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011594:	2200      	movs	r2, #0
 8011596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011598:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <MX_SPI1_Init+0x64>)
 801159a:	2200      	movs	r2, #0
 801159c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801159e:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115a4:	4b07      	ldr	r3, [pc, #28]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80115aa:	4b06      	ldr	r3, [pc, #24]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115ac:	220a      	movs	r2, #10
 80115ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80115b0:	4804      	ldr	r0, [pc, #16]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115b2:	f005 f85d 	bl	8016670 <HAL_SPI_Init>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80115bc:	f001 f928 	bl	8012810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80115c0:	bf00      	nop
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20000328 	.word	0x20000328
 80115c8:	40013000 	.word	0x40013000

080115cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80115d0:	4b17      	ldr	r3, [pc, #92]	; (8011630 <MX_SPI3_Init+0x64>)
 80115d2:	4a18      	ldr	r2, [pc, #96]	; (8011634 <MX_SPI3_Init+0x68>)
 80115d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80115d6:	4b16      	ldr	r3, [pc, #88]	; (8011630 <MX_SPI3_Init+0x64>)
 80115d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80115dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80115de:	4b14      	ldr	r3, [pc, #80]	; (8011630 <MX_SPI3_Init+0x64>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80115e4:	4b12      	ldr	r3, [pc, #72]	; (8011630 <MX_SPI3_Init+0x64>)
 80115e6:	2200      	movs	r2, #0
 80115e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80115ea:	4b11      	ldr	r3, [pc, #68]	; (8011630 <MX_SPI3_Init+0x64>)
 80115ec:	2202      	movs	r2, #2
 80115ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80115f0:	4b0f      	ldr	r3, [pc, #60]	; (8011630 <MX_SPI3_Init+0x64>)
 80115f2:	2201      	movs	r2, #1
 80115f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80115f6:	4b0e      	ldr	r3, [pc, #56]	; (8011630 <MX_SPI3_Init+0x64>)
 80115f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80115fe:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <MX_SPI3_Init+0x64>)
 8011600:	2200      	movs	r2, #0
 8011602:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011604:	4b0a      	ldr	r3, [pc, #40]	; (8011630 <MX_SPI3_Init+0x64>)
 8011606:	2200      	movs	r2, #0
 8011608:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 801160a:	4b09      	ldr	r3, [pc, #36]	; (8011630 <MX_SPI3_Init+0x64>)
 801160c:	2200      	movs	r2, #0
 801160e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011610:	4b07      	ldr	r3, [pc, #28]	; (8011630 <MX_SPI3_Init+0x64>)
 8011612:	2200      	movs	r2, #0
 8011614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011616:	4b06      	ldr	r3, [pc, #24]	; (8011630 <MX_SPI3_Init+0x64>)
 8011618:	220a      	movs	r2, #10
 801161a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801161c:	4804      	ldr	r0, [pc, #16]	; (8011630 <MX_SPI3_Init+0x64>)
 801161e:	f005 f827 	bl	8016670 <HAL_SPI_Init>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011628:	f001 f8f2 	bl	8012810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801162c:	bf00      	nop
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20000380 	.word	0x20000380
 8011634:	40003c00 	.word	0x40003c00

08011638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801163c:	4b12      	ldr	r3, [pc, #72]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801163e:	4a13      	ldr	r2, [pc, #76]	; (801168c <MX_USART2_UART_Init+0x54>)
 8011640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8011642:	4b11      	ldr	r3, [pc, #68]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011644:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8011648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 801164a:	4b0f      	ldr	r3, [pc, #60]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801164c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011650:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011652:	4b0d      	ldr	r3, [pc, #52]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011654:	2200      	movs	r2, #0
 8011656:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8011658:	4b0b      	ldr	r3, [pc, #44]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8011660:	4b09      	ldr	r3, [pc, #36]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011662:	2204      	movs	r2, #4
 8011664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011666:	4b08      	ldr	r3, [pc, #32]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011668:	2200      	movs	r2, #0
 801166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801166c:	4b06      	ldr	r3, [pc, #24]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801166e:	2200      	movs	r2, #0
 8011670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011672:	4805      	ldr	r0, [pc, #20]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011674:	f006 f846 	bl	8017704 <HAL_UART_Init>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	d001      	beq.n	8011682 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 801167e:	f001 f8c7 	bl	8012810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011682:	bf00      	nop
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	200003d8 	.word	0x200003d8
 801168c:	40004400 	.word	0x40004400

08011690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011696:	f107 030c 	add.w	r3, r7, #12
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	605a      	str	r2, [r3, #4]
 80116a0:	609a      	str	r2, [r3, #8]
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116a6:	2300      	movs	r3, #0
 80116a8:	60bb      	str	r3, [r7, #8]
 80116aa:	4b33      	ldr	r3, [pc, #204]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	4a32      	ldr	r2, [pc, #200]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b4:	6313      	str	r3, [r2, #48]	; 0x30
 80116b6:	4b30      	ldr	r3, [pc, #192]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116be:	60bb      	str	r3, [r7, #8]
 80116c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116c2:	2300      	movs	r3, #0
 80116c4:	607b      	str	r3, [r7, #4]
 80116c6:	4b2c      	ldr	r3, [pc, #176]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ca:	4a2b      	ldr	r2, [pc, #172]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116cc:	f043 0301 	orr.w	r3, r3, #1
 80116d0:	6313      	str	r3, [r2, #48]	; 0x30
 80116d2:	4b29      	ldr	r3, [pc, #164]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d6:	f003 0301 	and.w	r3, r3, #1
 80116da:	607b      	str	r3, [r7, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116de:	2300      	movs	r3, #0
 80116e0:	603b      	str	r3, [r7, #0]
 80116e2:	4b25      	ldr	r3, [pc, #148]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e6:	4a24      	ldr	r2, [pc, #144]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116e8:	f043 0302 	orr.w	r3, r3, #2
 80116ec:	6313      	str	r3, [r2, #48]	; 0x30
 80116ee:	4b22      	ldr	r3, [pc, #136]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f2:	f003 0302 	and.w	r3, r3, #2
 80116f6:	603b      	str	r3, [r7, #0]
 80116f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 80116fa:	2201      	movs	r2, #1
 80116fc:	2112      	movs	r1, #18
 80116fe:	481f      	ldr	r0, [pc, #124]	; (801177c <MX_GPIO_Init+0xec>)
 8011700:	f004 fa80 	bl	8015c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 8011704:	2200      	movs	r2, #0
 8011706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801170a:	481c      	ldr	r0, [pc, #112]	; (801177c <MX_GPIO_Init+0xec>)
 801170c:	f004 fa7a 	bl	8015c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 8011710:	2200      	movs	r2, #0
 8011712:	2140      	movs	r1, #64	; 0x40
 8011714:	481a      	ldr	r0, [pc, #104]	; (8011780 <MX_GPIO_Init+0xf0>)
 8011716:	f004 fa75 	bl	8015c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 801171a:	f248 0302 	movw	r3, #32770	; 0x8002
 801171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011720:	2301      	movs	r3, #1
 8011722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011724:	2300      	movs	r3, #0
 8011726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011728:	2300      	movs	r3, #0
 801172a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801172c:	f107 030c 	add.w	r3, r7, #12
 8011730:	4619      	mov	r1, r3
 8011732:	4812      	ldr	r0, [pc, #72]	; (801177c <MX_GPIO_Init+0xec>)
 8011734:	f004 f8e2 	bl	80158fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 8011738:	2310      	movs	r3, #16
 801173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801173c:	2301      	movs	r3, #1
 801173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011740:	2300      	movs	r3, #0
 8011742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011744:	2303      	movs	r3, #3
 8011746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 8011748:	f107 030c 	add.w	r3, r7, #12
 801174c:	4619      	mov	r1, r3
 801174e:	480b      	ldr	r0, [pc, #44]	; (801177c <MX_GPIO_Init+0xec>)
 8011750:	f004 f8d4 	bl	80158fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8011754:	2340      	movs	r3, #64	; 0x40
 8011756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011758:	2301      	movs	r3, #1
 801175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801175c:	2300      	movs	r3, #0
 801175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011760:	2300      	movs	r3, #0
 8011762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8011764:	f107 030c 	add.w	r3, r7, #12
 8011768:	4619      	mov	r1, r3
 801176a:	4805      	ldr	r0, [pc, #20]	; (8011780 <MX_GPIO_Init+0xf0>)
 801176c:	f004 f8c6 	bl	80158fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8011770:	bf00      	nop
 8011772:	3720      	adds	r7, #32
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	40023800 	.word	0x40023800
 801177c:	40020000 	.word	0x40020000
 8011780:	40020400 	.word	0x40020400

08011784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801178c:	2001      	movs	r0, #1
 801178e:	f00e fc55 	bl	802003c <osDelay>
 8011792:	e7fb      	b.n	801178c <StartDefaultTask+0x8>

08011794 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b098      	sub	sp, #96	; 0x60
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	65fb      	str	r3, [r7, #92]	; 0x5c
	float				old_resistance;


	PowerSett.resistance = 0.001;
 80117a0:	4b57      	ldr	r3, [pc, #348]	; (8011900 <vSensorsTask+0x16c>)
 80117a2:	60fb      	str	r3, [r7, #12]
	PowerSett.save = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	723b      	strb	r3, [r7, #8]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 80117a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80117ac:	f00e fc46 	bl	802003c <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80117b0:	4b54      	ldr	r3, [pc, #336]	; (8011904 <vSensorsTask+0x170>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f107 0108 	add.w	r1, r7, #8
 80117b8:	2200      	movs	r2, #0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f00f fd1a 	bl	80211f4 <xQueuePeek>
	old_resistance = PowerSett.resistance;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	65bb      	str	r3, [r7, #88]	; 0x58
	PowerOFF_HLW8032();
 80117c4:	f7ff fcf2 	bl	80111ac <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 80117c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117cc:	f00e fc36 	bl	802003c <osDelay>
	USART2->DR; //read data from register if exist
 80117d0:	4b4d      	ldr	r3, [pc, #308]	; (8011908 <vSensorsTask+0x174>)
 80117d2:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80117d4:	2218      	movs	r2, #24
 80117d6:	494d      	ldr	r1, [pc, #308]	; (801190c <vSensorsTask+0x178>)
 80117d8:	484d      	ldr	r0, [pc, #308]	; (8011910 <vSensorsTask+0x17c>)
 80117da:	f005 ffe3 	bl	80177a4 <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 80117de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117e2:	f00e fc2b 	bl	802003c <osDelay>
	PowerON_HLW8032();
 80117e6:	f7ff fcd5 	bl	8011194 <PowerON_HLW8032>

	sens_task_start:


	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80117ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80117ee:	eeb0 0a67 	vmov.f32	s0, s15
 80117f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80117f6:	4847      	ldr	r0, [pc, #284]	; (8011914 <vSensorsTask+0x180>)
 80117f8:	f003 f8a8 	bl	801494c <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 80117fc:	4b46      	ldr	r3, [pc, #280]	; (8011918 <vSensorsTask+0x184>)
 80117fe:	6818      	ldr	r0, [r3, #0]
 8011800:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011808:	2200      	movs	r2, #0
 801180a:	f00e fe13 	bl	8020434 <osMessageQueueGet>
 801180e:	4603      	mov	r3, r0
 8011810:	f113 0f02 	cmn.w	r3, #2
 8011814:	d04c      	beq.n	80118b0 <vSensorsTask+0x11c>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 8011816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801181a:	4618      	mov	r0, r3
 801181c:	f003 f908 	bl	8014a30 <RecvRawString>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d155      	bne.n	80118d2 <vSensorsTask+0x13e>
			test_kWh_from_read 				= GetKWh();
 8011826:	f003 fb33 	bl	8014e90 <GetKWh>
 801182a:	eef0 7a40 	vmov.f32	s15, s0
 801182e:	4b3b      	ldr	r3, [pc, #236]	; (801191c <vSensorsTask+0x188>)
 8011830:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 8011834:	f003 fb2c 	bl	8014e90 <GetKWh>
 8011838:	eeb0 7a40 	vmov.f32	s14, s0
 801183c:	4b38      	ldr	r3, [pc, #224]	; (8011920 <vSensorsTask+0x18c>)
 801183e:	edd3 7a00 	vldr	s15, [r3]
 8011842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011846:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.Voltage 				= GetVoltage();
 801184a:	f003 f9e9 	bl	8014c20 <GetVoltage>
 801184e:	eef0 7a40 	vmov.f32	s15, s0
 8011852:	edc7 7a04 	vstr	s15, [r7, #16]
			PowerData.ApparPower 			= GetApparentPower();
 8011856:	f003 fa93 	bl	8014d80 <GetApparentPower>
 801185a:	eef0 7a40 	vmov.f32	s15, s0
 801185e:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.ActivePower 			= GetActivePower();
 8011862:	f003 fa4f 	bl	8014d04 <GetActivePower>
 8011866:	eef0 7a40 	vmov.f32	s15, s0
 801186a:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Current 				= GetCurrent();
 801186e:	f003 fa23 	bl	8014cb8 <GetCurrent>
 8011872:	eef0 7a40 	vmov.f32	s15, s0
 8011876:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.PowerFactor			= PowerFactor();
 801187a:	f003 faa9 	bl	8014dd0 <PowerFactor>
 801187e:	eef0 7a40 	vmov.f32	s15, s0
 8011882:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.test_pulse_counter 	= GetTestPulse();
 8011886:	f003 fadf 	bl	8014e48 <GetTestPulse>
 801188a:	4603      	mov	r3, r0
 801188c:	62bb      	str	r3, [r7, #40]	; 0x28
			PowerData.readed_counter 		= GetCountedPulse();
 801188e:	f003 fae7 	bl	8014e60 <GetCountedPulse>
 8011892:	4603      	mov	r3, r0
 8011894:	62fb      	str	r3, [r7, #44]	; 0x2c
			PowerData.PF_reg				= GetPFReg();
 8011896:	f003 faef 	bl	8014e78 <GetPFReg>
 801189a:	4603      	mov	r3, r0
 801189c:	633b      	str	r3, [r7, #48]	; 0x30
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 801189e:	4b21      	ldr	r3, [pc, #132]	; (8011924 <vSensorsTask+0x190>)
 80118a0:	6818      	ldr	r0, [r3, #0]
 80118a2:	f107 0110 	add.w	r1, r7, #16
 80118a6:	2302      	movs	r3, #2
 80118a8:	2200      	movs	r2, #0
 80118aa:	f00f f91d 	bl	8020ae8 <xQueueGenericSend>
 80118ae:	e010      	b.n	80118d2 <vSensorsTask+0x13e>
		}
	}else{
		count++;
 80118b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118b2:	3301      	adds	r3, #1
 80118b4:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118b6:	e004      	b.n	80118c2 <vSensorsTask+0x12e>
			temp = USART2->DR;
 80118b8:	4b13      	ldr	r3, [pc, #76]	; (8011908 <vSensorsTask+0x174>)
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	657b      	str	r3, [r7, #84]	; 0x54
			osThreadYield();
 80118be:	f00e fb9d 	bl	801fffc <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118c2:	2218      	movs	r2, #24
 80118c4:	4911      	ldr	r1, [pc, #68]	; (801190c <vSensorsTask+0x178>)
 80118c6:	4812      	ldr	r0, [pc, #72]	; (8011910 <vSensorsTask+0x17c>)
 80118c8:	f005 ff6c 	bl	80177a4 <HAL_UARTEx_ReceiveToIdle_IT>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d0f2      	beq.n	80118b8 <vSensorsTask+0x124>
		}
	}
	osThreadYield();
 80118d2:	f00e fb93 	bl	801fffc <osThreadYield>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80118d6:	4b0b      	ldr	r3, [pc, #44]	; (8011904 <vSensorsTask+0x170>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f107 0108 	add.w	r1, r7, #8
 80118de:	2200      	movs	r2, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f00f fc87 	bl	80211f4 <xQueuePeek>
    if (PowerSett.resistance != old_resistance){
 80118e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80118ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80118ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	d081      	beq.n	80117fc <vSensorsTask+0x68>
    	old_resistance = PowerSett.resistance;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	65bb      	str	r3, [r7, #88]	; 0x58
    	goto sens_task_start;
 80118fc:	e775      	b.n	80117ea <vSensorsTask+0x56>
 80118fe:	bf00      	nop
 8011900:	3a83126f 	.word	0x3a83126f
 8011904:	20000454 	.word	0x20000454
 8011908:	40004400 	.word	0x40004400
 801190c:	20000474 	.word	0x20000474
 8011910:	200003d8 	.word	0x200003d8
 8011914:	001cafc0 	.word	0x001cafc0
 8011918:	20000448 	.word	0x20000448
 801191c:	20000498 	.word	0x20000498
 8011920:	20000494 	.word	0x20000494
 8011924:	20000450 	.word	0x20000450

08011928 <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 8011928:	b590      	push	{r4, r7, lr}
 801192a:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 801192e:	af12      	add	r7, sp, #72	; 0x48
 8011930:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011934:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011938:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 801193a:	2314      	movs	r3, #20
 801193c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8011940:	2300      	movs	r3, #0
 8011942:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	f207 4204 	addw	r2, r7, #1028	; 0x404
 801194e:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 8011950:	4cbc      	ldr	r4, [pc, #752]	; (8011c44 <vRW_Settings_Tas+0x31c>)
 8011952:	4668      	mov	r0, sp
 8011954:	f104 0310 	add.w	r3, r4, #16
 8011958:	2248      	movs	r2, #72	; 0x48
 801195a:	4619      	mov	r1, r3
 801195c:	f01c f8f3 	bl	802db46 <memcpy>
 8011960:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011964:	f003 fda4 	bl	80154b0 <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8011968:	4bb7      	ldr	r3, [pc, #732]	; (8011c48 <vRW_Settings_Tas+0x320>)
 801196a:	4ab8      	ldr	r2, [pc, #736]	; (8011c4c <vRW_Settings_Tas+0x324>)
 801196c:	49b8      	ldr	r1, [pc, #736]	; (8011c50 <vRW_Settings_Tas+0x328>)
 801196e:	48b9      	ldr	r0, [pc, #740]	; (8011c54 <vRW_Settings_Tas+0x32c>)
 8011970:	f003 fb18 	bl	8014fa4 <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011974:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011978:	f507 7101 	add.w	r1, r7, #516	; 0x204
 801197c:	f507 7041 	add.w	r0, r7, #772	; 0x304
 8011980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011984:	f019 f916 	bl	802abb4 <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8011988:	49b3      	ldr	r1, [pc, #716]	; (8011c58 <vRW_Settings_Tas+0x330>)
 801198a:	48b4      	ldr	r0, [pc, #720]	; (8011c5c <vRW_Settings_Tas+0x334>)
 801198c:	f019 f8f6 	bl	802ab7c <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 8011990:	f019 f948 	bl	802ac24 <spi_fs_mount>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	da03      	bge.n	80119a2 <vRW_Settings_Tas+0x7a>
		spi_fs_format();
 801199a:	f019 f96b 	bl	802ac74 <spi_fs_format>
		spi_fs_mount();
 801199e:	f019 f941 	bl	802ac24 <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 80119a2:	48af      	ldr	r0, [pc, #700]	; (8011c60 <vRW_Settings_Tas+0x338>)
 80119a4:	f019 f9ee 	bl	802ad84 <spi_fs_file_size>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	dd0f      	ble.n	80119ce <vRW_Settings_Tas+0xa6>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 80119ae:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119b2:	2308      	movs	r3, #8
 80119b4:	2200      	movs	r2, #0
 80119b6:	48aa      	ldr	r0, [pc, #680]	; (8011c60 <vRW_Settings_Tas+0x338>)
 80119b8:	f019 f968 	bl	802ac8c <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119bc:	4ba9      	ldr	r3, [pc, #676]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119c4:	2302      	movs	r3, #2
 80119c6:	2200      	movs	r2, #0
 80119c8:	f00f f88e 	bl	8020ae8 <xQueueGenericSend>
 80119cc:	e013      	b.n	80119f6 <vRW_Settings_Tas+0xce>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 80119ce:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119d2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119d6:	4aa4      	ldr	r2, [pc, #656]	; (8011c68 <vRW_Settings_Tas+0x340>)
 80119d8:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 80119da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119de:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119e2:	2201      	movs	r2, #1
 80119e4:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119e6:	4b9f      	ldr	r3, [pc, #636]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 80119e8:	6818      	ldr	r0, [r3, #0]
 80119ea:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119ee:	2302      	movs	r3, #2
 80119f0:	2200      	movs	r2, #0
 80119f2:	f00f f879 	bl	8020ae8 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 80119f6:	489d      	ldr	r0, [pc, #628]	; (8011c6c <vRW_Settings_Tas+0x344>)
 80119f8:	f019 f9c4 	bl	802ad84 <spi_fs_file_size>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	dd0f      	ble.n	8011a22 <vRW_Settings_Tas+0xfa>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8011a02:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a06:	23c6      	movs	r3, #198	; 0xc6
 8011a08:	2200      	movs	r2, #0
 8011a0a:	4898      	ldr	r0, [pc, #608]	; (8011c6c <vRW_Settings_Tas+0x344>)
 8011a0c:	f019 f93e 	bl	802ac8c <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a10:	4b97      	ldr	r3, [pc, #604]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011a12:	6818      	ldr	r0, [r3, #0]
 8011a14:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a18:	2302      	movs	r3, #2
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f00f f864 	bl	8020ae8 <xQueueGenericSend>
 8011a20:	e027      	b.n	8011a72 <vRW_Settings_Tas+0x14a>
	}else{
		MQTT_cred.save 			= 1;
 8011a22:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a26:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 8011a2e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a32:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a36:	2200      	movs	r2, #0
 8011a38:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 8011a3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a3e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a42:	2200      	movs	r2, #0
 8011a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		MQTT_cred.pass[0]		= '\0';
 8011a48:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a4c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a50:	2200      	movs	r2, #0
 8011a52:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		MQTT_cred.uri[0]		= '\0';
 8011a56:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a5a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a5e:	2200      	movs	r2, #0
 8011a60:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a62:	4b83      	ldr	r3, [pc, #524]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011a64:	6818      	ldr	r0, [r3, #0]
 8011a66:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f00f f83b 	bl	8020ae8 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 8011a72:	4880      	ldr	r0, [pc, #512]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a74:	f019 f986 	bl	802ad84 <spi_fs_file_size>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	dd0f      	ble.n	8011a9e <vRW_Settings_Tas+0x176>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a7e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a82:	2302      	movs	r3, #2
 8011a84:	2200      	movs	r2, #0
 8011a86:	487b      	ldr	r0, [pc, #492]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a88:	f019 f900 	bl	802ac8c <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a8c:	4b7a      	ldr	r3, [pc, #488]	; (8011c78 <vRW_Settings_Tas+0x350>)
 8011a8e:	6818      	ldr	r0, [r3, #0]
 8011a90:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a94:	2302      	movs	r3, #2
 8011a96:	2200      	movs	r2, #0
 8011a98:	f00f f826 	bl	8020ae8 <xQueueGenericSend>
 8011a9c:	e00b      	b.n	8011ab6 <vRW_Settings_Tas+0x18e>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011a9e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aa2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011aaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aae:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011ab6:	4871      	ldr	r0, [pc, #452]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011ab8:	f019 f964 	bl	802ad84 <spi_fs_file_size>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	dd0b      	ble.n	8011ada <vRW_Settings_Tas+0x1b2>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011ac2:	2304      	movs	r3, #4
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	496e      	ldr	r1, [pc, #440]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011ac8:	486c      	ldr	r0, [pc, #432]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011aca:	f019 f8df 	bl	802ac8c <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011ace:	4b6c      	ldr	r3, [pc, #432]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011ad6:	6013      	str	r3, [r2, #0]
 8011ad8:	e00d      	b.n	8011af6 <vRW_Settings_Tas+0x1ce>
	}else{
		test_kWh_from_flash = 0.0;
 8011ada:	4b69      	ldr	r3, [pc, #420]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011adc:	f04f 0200 	mov.w	r2, #0
 8011ae0:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011ae2:	f04f 0300 	mov.w	r3, #0
 8011ae6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011aea:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011aec:	2204      	movs	r2, #4
 8011aee:	4964      	ldr	r1, [pc, #400]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011af0:	4862      	ldr	r0, [pc, #392]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011af2:	f019 f90f 	bl	802ad14 <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011af6:	4863      	ldr	r0, [pc, #396]	; (8011c84 <vRW_Settings_Tas+0x35c>)
 8011af8:	f019 f9c0 	bl	802ae7c <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011afc:	4862      	ldr	r0, [pc, #392]	; (8011c88 <vRW_Settings_Tas+0x360>)
 8011afe:	f019 fa9f 	bl	802b040 <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011b02:	4861      	ldr	r0, [pc, #388]	; (8011c88 <vRW_Settings_Tas+0x360>)
 8011b04:	f019 f9ba 	bl	802ae7c <spi_fs_mkdir>
	/* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011b08:	4b56      	ldr	r3, [pc, #344]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b10:	2200      	movs	r2, #0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f00f fb6e 	bl	80211f4 <xQueuePeek>
	  if (PowerSett.save){
 8011b18:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b1c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d014      	beq.n	8011b50 <vRW_Settings_Tas+0x228>
		  PowerSett.save = 0;
 8011b26:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b2a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b2e:	2200      	movs	r2, #0
 8011b30:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011b32:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011b36:	2208      	movs	r2, #8
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4849      	ldr	r0, [pc, #292]	; (8011c60 <vRW_Settings_Tas+0x338>)
 8011b3c:	f019 f8ea 	bl	802ad14 <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011b40:	4b48      	ldr	r3, [pc, #288]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 8011b42:	6818      	ldr	r0, [r3, #0]
 8011b44:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b48:	2302      	movs	r3, #2
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f00e ffcc 	bl	8020ae8 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011b50:	4b47      	ldr	r3, [pc, #284]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b58:	2200      	movs	r2, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f00f fb4a 	bl	80211f4 <xQueuePeek>
	  if (MQTT_cred.save){
 8011b60:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b64:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d014      	beq.n	8011b98 <vRW_Settings_Tas+0x270>
		  MQTT_cred.save = 0;
 8011b6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b72:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b76:	2200      	movs	r2, #0
 8011b78:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b7e:	22c6      	movs	r2, #198	; 0xc6
 8011b80:	4619      	mov	r1, r3
 8011b82:	483a      	ldr	r0, [pc, #232]	; (8011c6c <vRW_Settings_Tas+0x344>)
 8011b84:	f019 f8c6 	bl	802ad14 <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b88:	4b39      	ldr	r3, [pc, #228]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011b8a:	6818      	ldr	r0, [r3, #0]
 8011b8c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b90:	2302      	movs	r3, #2
 8011b92:	2200      	movs	r2, #0
 8011b94:	f00e ffa8 	bl	8020ae8 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011b98:	4b37      	ldr	r3, [pc, #220]	; (8011c78 <vRW_Settings_Tas+0x350>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f00f fb26 	bl	80211f4 <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011ba8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bac:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00c      	beq.n	8011bd0 <vRW_Settings_Tas+0x2a8>
		  mb_tcp_sett.save = 0;
 8011bb6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bba:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bc6:	2202      	movs	r2, #2
 8011bc8:	4619      	mov	r1, r3
 8011bca:	482a      	ldr	r0, [pc, #168]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011bcc:	f019 f8a2 	bl	802ad14 <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011bd0:	4b2e      	ldr	r3, [pc, #184]	; (8011c8c <vRW_Settings_Tas+0x364>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f107 010c 	add.w	r1, r7, #12
 8011bd8:	2200      	movs	r2, #0
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f00f fb0a 	bl	80211f4 <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011be0:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8011be4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d312      	bcc.n	8011c12 <vRW_Settings_Tas+0x2ea>
 8011bec:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bf0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011bf4:	ed93 7a02 	vldr	s14, [r3, #8]
 8011bf8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8011bfc:	edd3 7a00 	vldr	s15, [r3]
 8011c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c10:	dd0d      	ble.n	8011c2e <vRW_Settings_Tas+0x306>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011c12:	f107 030c 	add.w	r3, r7, #12
 8011c16:	3308      	adds	r3, #8
 8011c18:	2204      	movs	r2, #4
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4817      	ldr	r0, [pc, #92]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011c1e:	f019 f879 	bl	802ad14 <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011c22:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011c26:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011c2a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  time_counter ++;
 8011c2e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011c32:	3301      	adds	r3, #1
 8011c34:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    osDelay(delay1s);
 8011c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c3c:	f00e f9fe 	bl	802003c <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011c40:	e762      	b.n	8011b08 <vRW_Settings_Tas+0x1e0>
 8011c42:	bf00      	nop
 8011c44:	20000328 	.word	0x20000328
 8011c48:	08015505 	.word	0x08015505
 8011c4c:	080154e1 	.word	0x080154e1
 8011c50:	08015541 	.word	0x08015541
 8011c54:	08015529 	.word	0x08015529
 8011c58:	08011115 	.word	0x08011115
 8011c5c:	080110f9 	.word	0x080110f9
 8011c60:	08031874 	.word	0x08031874
 8011c64:	20000454 	.word	0x20000454
 8011c68:	3a83126f 	.word	0x3a83126f
 8011c6c:	08031884 	.word	0x08031884
 8011c70:	20000458 	.word	0x20000458
 8011c74:	08031894 	.word	0x08031894
 8011c78:	2000045c 	.word	0x2000045c
 8011c7c:	080318a8 	.word	0x080318a8
 8011c80:	20000494 	.word	0x20000494
 8011c84:	080318bc 	.word	0x080318bc
 8011c88:	080318c4 	.word	0x080318c4
 8011c8c:	20000450 	.word	0x20000450

08011c90 <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011ca2:	f00a f8f9 	bl	801be98 <DHCP_time_handler>
	httpServer_time_handler();
 8011ca6:	f00d fcd5 	bl	801f654 <httpServer_time_handler>
	dns_service_increment_second();
 8011caa:	f00a fe83 	bl	801c9b4 <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011cae:	4b06      	ldr	r3, [pc, #24]	; (8011cc8 <vOneSecondTickTask+0x38>)
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	f107 010c 	add.w	r1, r7, #12
 8011cb6:	2302      	movs	r3, #2
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f00e ff15 	bl	8020ae8 <xQueueGenericSend>
    osDelay(delay1s);
 8011cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011cc2:	f00e f9bb 	bl	802003c <osDelay>
	seconds++ ;
 8011cc6:	e7e9      	b.n	8011c9c <vOneSecondTickTask+0xc>
 8011cc8:	20000460 	.word	0x20000460

08011ccc <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011ccc:	b590      	push	{r4, r7, lr}
 8011cce:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af12      	add	r7, sp, #72	; 0x48
 8011cd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cda:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011cde:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011ce2:	f103 0308 	add.w	r3, r3, #8
 8011ce6:	2220      	movs	r2, #32
 8011ce8:	2100      	movs	r1, #0
 8011cea:	4618      	mov	r0, r3
 8011cec:	f01b fd56 	bl	802d79c <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011cf0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011cf4:	f103 0308 	add.w	r3, r3, #8
 8011cf8:	2217      	movs	r2, #23
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f01b fd4d 	bl	802d79c <memset>

	  NetInfo.mac[0]	= 0x40;
 8011d02:	2340      	movs	r3, #64	; 0x40
 8011d04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d08:	f102 0208 	add.w	r2, r2, #8
 8011d0c:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011d0e:	2308      	movs	r3, #8
 8011d10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d14:	f102 0209 	add.w	r2, r2, #9
 8011d18:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011d1a:	4bdc      	ldr	r3, [pc, #880]	; (801208c <vMaintEthTask+0x3c0>)
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d22:	f102 020a 	add.w	r2, r2, #10
 8011d26:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011d28:	4bd9      	ldr	r3, [pc, #868]	; (8012090 <vMaintEthTask+0x3c4>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d30:	f102 020b 	add.w	r2, r2, #11
 8011d34:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011d36:	4bd7      	ldr	r3, [pc, #860]	; (8012094 <vMaintEthTask+0x3c8>)
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d3e:	f102 020c 	add.w	r2, r2, #12
 8011d42:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011d44:	4bd4      	ldr	r3, [pc, #848]	; (8012098 <vMaintEthTask+0x3cc>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d4c:	f102 020d 	add.w	r2, r2, #13
 8011d50:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011d52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011d56:	f103 030b 	add.w	r3, r3, #11
 8011d5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d5e:	f102 0208 	add.w	r2, r2, #8
 8011d62:	6810      	ldr	r0, [r2, #0]
 8011d64:	6018      	str	r0, [r3, #0]
 8011d66:	8892      	ldrh	r2, [r2, #4]
 8011d68:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011d6a:	2302      	movs	r3, #2
 8011d6c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d70:	f102 021e 	add.w	r2, r2, #30
 8011d74:	7013      	strb	r3, [r2, #0]
 8011d76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d7a:	f103 030e 	add.w	r3, r3, #14
 8011d7e:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d80:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d84:	f102 0211 	add.w	r2, r2, #17
 8011d88:	6013      	str	r3, [r2, #0]
 8011d8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d8e:	f103 0312 	add.w	r3, r3, #18
 8011d92:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011d94:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d98:	f102 0215 	add.w	r2, r2, #21
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011da2:	f103 0316 	add.w	r3, r3, #22
 8011da6:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011da8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dac:	f102 0219 	add.w	r2, r2, #25
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011db6:	f103 031a 	add.w	r3, r3, #26
 8011dba:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011dbc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dc0:	f102 021d 	add.w	r2, r2, #29
 8011dc4:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011dc6:	4cb5      	ldr	r4, [pc, #724]	; (801209c <vMaintEthTask+0x3d0>)
 8011dc8:	4668      	mov	r0, sp
 8011dca:	f104 0310 	add.w	r3, r4, #16
 8011dce:	2248      	movs	r2, #72	; 0x48
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	f01b feb8 	bl	802db46 <memcpy>
 8011dd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011dda:	f00d ff8d 	bl	801fcf8 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011dde:	49b0      	ldr	r1, [pc, #704]	; (80120a0 <vMaintEthTask+0x3d4>)
 8011de0:	48b0      	ldr	r0, [pc, #704]	; (80120a4 <vMaintEthTask+0x3d8>)
 8011de2:	f00d ff35 	bl	801fc50 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011de6:	48b0      	ldr	r0, [pc, #704]	; (80120a8 <vMaintEthTask+0x3dc>)
 8011de8:	f00d ff1a 	bl	801fc20 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011dec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011df0:	f103 0308 	add.w	r3, r3, #8
 8011df4:	4618      	mov	r0, r3
 8011df6:	f00d fe17 	bl	801fa28 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011dfa:	49ac      	ldr	r1, [pc, #688]	; (80120ac <vMaintEthTask+0x3e0>)
 8011dfc:	48ac      	ldr	r0, [pc, #688]	; (80120b0 <vMaintEthTask+0x3e4>)
 8011dfe:	f007 ffb5 	bl	8019d6c <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011e02:	49ac      	ldr	r1, [pc, #688]	; (80120b4 <vMaintEthTask+0x3e8>)
 8011e04:	48ac      	ldr	r0, [pc, #688]	; (80120b8 <vMaintEthTask+0x3ec>)
 8011e06:	f007 ff8b 	bl	8019d20 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011e0a:	49ac      	ldr	r1, [pc, #688]	; (80120bc <vMaintEthTask+0x3f0>)
 8011e0c:	48ac      	ldr	r0, [pc, #688]	; (80120c0 <vMaintEthTask+0x3f4>)
 8011e0e:	f007 ff61 	bl	8019cd4 <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011e12:	4aac      	ldr	r2, [pc, #688]	; (80120c4 <vMaintEthTask+0x3f8>)
 8011e14:	49ac      	ldr	r1, [pc, #688]	; (80120c8 <vMaintEthTask+0x3fc>)
 8011e16:	48ac      	ldr	r0, [pc, #688]	; (80120c8 <vMaintEthTask+0x3fc>)
 8011e18:	f008 fd0c 	bl	801a834 <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011e1c:	f107 0320 	add.w	r3, r7, #32
 8011e20:	3b18      	subs	r3, #24
 8011e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e26:	4619      	mov	r1, r3
 8011e28:	2004      	movs	r0, #4
 8011e2a:	f00a fd6d 	bl	801c908 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011e2e:	48a7      	ldr	r0, [pc, #668]	; (80120cc <vMaintEthTask+0x400>)
 8011e30:	f00a fd58 	bl	801c8e4 <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011e34:	49a6      	ldr	r1, [pc, #664]	; (80120d0 <vMaintEthTask+0x404>)
 8011e36:	48a7      	ldr	r0, [pc, #668]	; (80120d4 <vMaintEthTask+0x408>)
 8011e38:	f00a fd38 	bl	801c8ac <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011e3c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e40:	f103 031e 	add.w	r3, r3, #30
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e4a:	f102 0201 	add.w	r2, r2, #1
 8011e4e:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011e56:	f102 0208 	add.w	r2, r2, #8
 8011e5a:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011e5c:	f00d fea2 	bl	801fba4 <w5500_init>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	f040 81eb 	bne.w	801223e <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011e68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e6c:	f00f fea2 	bl	8021bb4 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e70:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e74:	f103 0308 	add.w	r3, r3, #8
 8011e78:	2206      	movs	r2, #6
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8011e80:	f006 fce4 	bl	801884c <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e88:	f103 031e 	add.w	r3, r3, #30
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	2b02      	cmp	r3, #2
 8011e90:	d106      	bne.n	8011ea0 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e92:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8011e96:	4619      	mov	r1, r3
 8011e98:	2000      	movs	r0, #0
 8011e9a:	f009 ff53 	bl	801bd44 <DHCP_init>
 8011e9e:	e003      	b.n	8011ea8 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011ea0:	f00d fdd2 	bl	801fa48 <network_init>
			set_ip_aasigned();
 8011ea4:	f00d fe72 	bl	801fb8c <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011ea8:	f7ff f940 	bl	801112c <SocketMutexTake>
			dhcp_rutine();
 8011eac:	f00d fe1c 	bl	801fae8 <dhcp_rutine>

			if (!link_status()){
 8011eb0:	f00d fe32 	bl	801fb18 <link_status>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f040 80e0 	bne.w	801207c <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ec2:	f102 020e 	add.w	r2, r2, #14
 8011ec6:	7013      	strb	r3, [r2, #0]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ece:	f102 020f 	add.w	r2, r2, #15
 8011ed2:	7013      	strb	r3, [r2, #0]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eda:	f102 0210 	add.w	r2, r2, #16
 8011ede:	7013      	strb	r3, [r2, #0]
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ee6:	f102 0211 	add.w	r2, r2, #17
 8011eea:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ef2:	f102 0212 	add.w	r2, r2, #18
 8011ef6:	7013      	strb	r3, [r2, #0]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011efe:	f102 0213 	add.w	r2, r2, #19
 8011f02:	7013      	strb	r3, [r2, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f0a:	f102 0214 	add.w	r2, r2, #20
 8011f0e:	7013      	strb	r3, [r2, #0]
 8011f10:	2300      	movs	r3, #0
 8011f12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f16:	f102 0215 	add.w	r2, r2, #21
 8011f1a:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f22:	f102 0216 	add.w	r2, r2, #22
 8011f26:	7013      	strb	r3, [r2, #0]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f2e:	f102 0217 	add.w	r2, r2, #23
 8011f32:	7013      	strb	r3, [r2, #0]
 8011f34:	2300      	movs	r3, #0
 8011f36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f3a:	f102 0218 	add.w	r2, r2, #24
 8011f3e:	7013      	strb	r3, [r2, #0]
 8011f40:	2300      	movs	r3, #0
 8011f42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f46:	f102 0219 	add.w	r2, r2, #25
 8011f4a:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f52:	f102 021a 	add.w	r2, r2, #26
 8011f56:	7013      	strb	r3, [r2, #0]
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f5e:	f102 021b 	add.w	r2, r2, #27
 8011f62:	7013      	strb	r3, [r2, #0]
 8011f64:	2300      	movs	r3, #0
 8011f66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f6a:	f102 021c 	add.w	r2, r2, #28
 8011f6e:	7013      	strb	r3, [r2, #0]
 8011f70:	2300      	movs	r3, #0
 8011f72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f76:	f102 021d 	add.w	r2, r2, #29
 8011f7a:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f7c:	f7ff f8e4 	bl	8011148 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f80:	2300      	movs	r3, #0
 8011f82:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f86:	f102 021f 	add.w	r2, r2, #31
 8011f8a:	7013      	strb	r3, [r2, #0]
 8011f8c:	e05a      	b.n	8012044 <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f92:	f103 031f 	add.w	r3, r3, #31
 8011f96:	781a      	ldrb	r2, [r3, #0]
 8011f98:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f9c:	f103 031f 	add.w	r3, r3, #31
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fa6:	443a      	add	r2, r7
 8011fa8:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011fac:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fb0:	443b      	add	r3, r7
 8011fb2:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011fb6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fba:	f103 031f 	add.w	r3, r3, #31
 8011fbe:	781a      	ldrb	r2, [r3, #0]
 8011fc0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fc4:	f103 031f 	add.w	r3, r3, #31
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fce:	443a      	add	r2, r7
 8011fd0:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011fd4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fd8:	443b      	add	r3, r7
 8011fda:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011fde:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fe2:	f103 031f 	add.w	r3, r3, #31
 8011fe6:	781a      	ldrb	r2, [r3, #0]
 8011fe8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fec:	f103 031f 	add.w	r3, r3, #31
 8011ff0:	781b      	ldrb	r3, [r3, #0]
 8011ff2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011ff6:	443a      	add	r2, r7
 8011ff8:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8011ffc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012000:	443b      	add	r3, r7
 8012002:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8012006:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801200a:	f103 031f 	add.w	r3, r3, #31
 801200e:	781a      	ldrb	r2, [r3, #0]
 8012010:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012014:	f103 031f 	add.w	r3, r3, #31
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801201e:	443a      	add	r2, r7
 8012020:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012024:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012028:	443b      	add	r3, r7
 801202a:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 801202e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012032:	f103 031f 	add.w	r3, r3, #31
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	3301      	adds	r3, #1
 801203a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801203e:	f102 021f 	add.w	r2, r2, #31
 8012042:	7013      	strb	r3, [r2, #0]
 8012044:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012048:	f103 031f 	add.w	r3, r3, #31
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b03      	cmp	r3, #3
 8012050:	d99d      	bls.n	8011f8e <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 8012052:	2300      	movs	r3, #0
 8012054:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8012058:	f102 0208 	add.w	r2, r2, #8
 801205c:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 801205e:	4b1e      	ldr	r3, [pc, #120]	; (80120d8 <vMaintEthTask+0x40c>)
 8012060:	6818      	ldr	r0, [r3, #0]
 8012062:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012066:	f101 0108 	add.w	r1, r1, #8
 801206a:	2302      	movs	r3, #2
 801206c:	2200      	movs	r2, #0
 801206e:	f00e fd3b 	bl	8020ae8 <xQueueGenericSend>
				break;
 8012072:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8012074:	2001      	movs	r0, #1
 8012076:	f00d ffe1 	bl	802003c <osDelay>
 801207a:	e6df      	b.n	8011e3c <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 801207c:	2300      	movs	r3, #0
 801207e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012082:	f102 021f 	add.w	r2, r2, #31
 8012086:	7013      	strb	r3, [r2, #0]
 8012088:	e083      	b.n	8012192 <vMaintEthTask+0x4c6>
 801208a:	bf00      	nop
 801208c:	1fff7a10 	.word	0x1fff7a10
 8012090:	1fff7a11 	.word	0x1fff7a11
 8012094:	1fff7a12 	.word	0x1fff7a12
 8012098:	1fff7a13 	.word	0x1fff7a13
 801209c:	20000380 	.word	0x20000380
 80120a0:	0801fcb1 	.word	0x0801fcb1
 80120a4:	0801fc99 	.word	0x0801fc99
 80120a8:	0802003d 	.word	0x0802003d
 80120ac:	0801fd29 	.word	0x0801fd29
 80120b0:	0801fd4d 	.word	0x0801fd4d
 80120b4:	0801fce1 	.word	0x0801fce1
 80120b8:	0801fcc9 	.word	0x0801fcc9
 80120bc:	080110e1 	.word	0x080110e1
 80120c0:	080110c5 	.word	0x080110c5
 80120c4:	0801fa7d 	.word	0x0801fa7d
 80120c8:	0801fa95 	.word	0x0801fa95
 80120cc:	0801fb75 	.word	0x0801fb75
 80120d0:	0801117d 	.word	0x0801117d
 80120d4:	08011161 	.word	0x08011161
 80120d8:	2000044c 	.word	0x2000044c
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 80120dc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120e0:	f103 031f 	add.w	r3, r3, #31
 80120e4:	781a      	ldrb	r2, [r3, #0]
 80120e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ea:	f103 031f 	add.w	r3, r3, #31
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 80120f4:	443a      	add	r2, r7
 80120f6:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 80120fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80120fe:	443b      	add	r3, r7
 8012100:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8012104:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012108:	f103 031f 	add.w	r3, r3, #31
 801210c:	781a      	ldrb	r2, [r3, #0]
 801210e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012112:	f103 031f 	add.w	r3, r3, #31
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801211c:	443a      	add	r2, r7
 801211e:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8012122:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012126:	443b      	add	r3, r7
 8012128:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 801212c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012130:	f103 031f 	add.w	r3, r3, #31
 8012134:	781a      	ldrb	r2, [r3, #0]
 8012136:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801213a:	f103 031f 	add.w	r3, r3, #31
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012144:	443a      	add	r2, r7
 8012146:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 801214a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801214e:	443b      	add	r3, r7
 8012150:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8012154:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012158:	f103 031f 	add.w	r3, r3, #31
 801215c:	781a      	ldrb	r2, [r3, #0]
 801215e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012162:	f103 031f 	add.w	r3, r3, #31
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801216c:	443a      	add	r2, r7
 801216e:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012172:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012176:	443b      	add	r3, r7
 8012178:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 801217c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012180:	f103 031f 	add.w	r3, r3, #31
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	3301      	adds	r3, #1
 8012188:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801218c:	f102 021f 	add.w	r2, r2, #31
 8012190:	7013      	strb	r3, [r2, #0]
 8012192:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012196:	f103 031f 	add.w	r3, r3, #31
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b03      	cmp	r3, #3
 801219e:	d99d      	bls.n	80120dc <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 80121a0:	2301      	movs	r3, #1
 80121a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121a6:	f102 0208 	add.w	r2, r2, #8
 80121aa:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 80121ac:	f00d fcd6 	bl	801fb5c <link_speed>
 80121b0:	4603      	mov	r3, r0
 80121b2:	b2db      	uxtb	r3, r3
 80121b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121b8:	f102 020a 	add.w	r2, r2, #10
 80121bc:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 80121be:	f00d fcc1 	bl	801fb44 <link_duplex>
 80121c2:	4603      	mov	r3, r0
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121ca:	f102 0209 	add.w	r2, r2, #9
 80121ce:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 80121d0:	f009 fef0 	bl	801bfb4 <getDHCPLeasetime>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80121da:	f102 0204 	add.w	r2, r2, #4
 80121de:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 80121e0:	f7fe ffb2 	bl	8011148 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 80121e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121e8:	f103 030e 	add.w	r3, r3, #14
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10e      	bne.n	8012210 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121f2:	4b14      	ldr	r3, [pc, #80]	; (8012244 <vMaintEthTask+0x578>)
 80121f4:	6818      	ldr	r0, [r3, #0]
 80121f6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80121fa:	f101 0108 	add.w	r1, r1, #8
 80121fe:	2302      	movs	r3, #2
 8012200:	2200      	movs	r2, #0
 8012202:	f00e fc71 	bl	8020ae8 <xQueueGenericSend>
				osDelay(delay1s);
 8012206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801220a:	f00d ff17 	bl	802003c <osDelay>
				continue;
 801220e:	e015      	b.n	801223c <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 8012210:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012214:	f103 0308 	add.w	r3, r3, #8
 8012218:	3315      	adds	r3, #21
 801221a:	4618      	mov	r0, r3
 801221c:	f00a fb8e 	bl	801c93c <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012220:	4b08      	ldr	r3, [pc, #32]	; (8012244 <vMaintEthTask+0x578>)
 8012222:	6818      	ldr	r0, [r3, #0]
 8012224:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012228:	f101 0108 	add.w	r1, r1, #8
 801222c:	2302      	movs	r3, #2
 801222e:	2200      	movs	r2, #0
 8012230:	f00e fc5a 	bl	8020ae8 <xQueueGenericSend>
			osDelay(delay1s);
 8012234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012238:	f00d ff00 	bl	802003c <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 801223c:	e634      	b.n	8011ea8 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 801223e:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 8012240:	e5fc      	b.n	8011e3c <vMaintEthTask+0x170>
 8012242:	bf00      	nop
 8012244:	2000044c 	.word	0x2000044c

08012248 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8012250:	4b1d      	ldr	r3, [pc, #116]	; (80122c8 <vDebugMemUsage+0x80>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4618      	mov	r0, r3
 8012256:	f00d feb3 	bl	801ffc0 <osThreadGetStackSpace>
 801225a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 801225c:	4b1b      	ldr	r3, [pc, #108]	; (80122cc <vDebugMemUsage+0x84>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4618      	mov	r0, r3
 8012262:	f00d fead 	bl	801ffc0 <osThreadGetStackSpace>
 8012266:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8012268:	4b19      	ldr	r3, [pc, #100]	; (80122d0 <vDebugMemUsage+0x88>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4618      	mov	r0, r3
 801226e:	f00d fea7 	bl	801ffc0 <osThreadGetStackSpace>
 8012272:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 8012274:	4b17      	ldr	r3, [pc, #92]	; (80122d4 <vDebugMemUsage+0x8c>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4618      	mov	r0, r3
 801227a:	f00d fea1 	bl	801ffc0 <osThreadGetStackSpace>
 801227e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8012280:	4b15      	ldr	r3, [pc, #84]	; (80122d8 <vDebugMemUsage+0x90>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4618      	mov	r0, r3
 8012286:	f00d fe9b 	bl	801ffc0 <osThreadGetStackSpace>
 801228a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 801228c:	4b13      	ldr	r3, [pc, #76]	; (80122dc <vDebugMemUsage+0x94>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f00d fe95 	bl	801ffc0 <osThreadGetStackSpace>
 8012296:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 8012298:	4b11      	ldr	r3, [pc, #68]	; (80122e0 <vDebugMemUsage+0x98>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4618      	mov	r0, r3
 801229e:	f00d fe8f 	bl	801ffc0 <osThreadGetStackSpace>
 80122a2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122a4:	2000      	movs	r0, #0
 80122a6:	f00d fe8b 	bl	801ffc0 <osThreadGetStackSpace>
 80122aa:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122ac:	2000      	movs	r0, #0
 80122ae:	f00d fe87 	bl	801ffc0 <osThreadGetStackSpace>
 80122b2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122b4:	2000      	movs	r0, #0
 80122b6:	f00d fe83 	bl	801ffc0 <osThreadGetStackSpace>
 80122ba:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 80122bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122c0:	f00d febc 	bl	802003c <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80122c4:	e7c4      	b.n	8012250 <vDebugMemUsage+0x8>
 80122c6:	bf00      	nop
 80122c8:	20000420 	.word	0x20000420
 80122cc:	20000424 	.word	0x20000424
 80122d0:	20000428 	.word	0x20000428
 80122d4:	2000042c 	.word	0x2000042c
 80122d8:	20000430 	.word	0x20000430
 80122dc:	20000434 	.word	0x20000434
 80122e0:	20000438 	.word	0x20000438

080122e4 <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122f2:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 80122f6:	4a4d      	ldr	r2, [pc, #308]	; (801242c <httpServ+0x148>)
 80122f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80122fc:	f103 0308 	add.w	r3, r3, #8
 8012300:	6812      	ldr	r2, [r2, #0]
 8012302:	4611      	mov	r1, r2
 8012304:	8019      	strh	r1, [r3, #0]
 8012306:	3302      	adds	r3, #2
 8012308:	0c12      	lsrs	r2, r2, #16
 801230a:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 801230c:	2303      	movs	r3, #3
 801230e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012312:	f102 020e 	add.w	r2, r2, #14
 8012316:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 8012318:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801231c:	f103 0308 	add.w	r3, r3, #8
 8012320:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012324:	f102 020e 	add.w	r2, r2, #14
 8012328:	7812      	ldrb	r2, [r2, #0]
 801232a:	f607 0108 	addw	r1, r7, #2056	; 0x808
 801232e:	f107 0010 	add.w	r0, r7, #16
 8012332:	3808      	subs	r0, #8
 8012334:	f00c fbb6 	bl	801eaa4 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 8012338:	483d      	ldr	r0, [pc, #244]	; (8012430 <httpServ+0x14c>)
 801233a:	f00d fb25 	bl	801f988 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 801233e:	483d      	ldr	r0, [pc, #244]	; (8012434 <httpServ+0x150>)
 8012340:	f00d fb3a 	bl	801f9b8 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 8012344:	4b3c      	ldr	r3, [pc, #240]	; (8012438 <httpServ+0x154>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2103      	movs	r1, #3
 801234a:	4618      	mov	r0, r3
 801234c:	f000 fd46 	bl	8012ddc <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 8012350:	4b3a      	ldr	r3, [pc, #232]	; (801243c <httpServ+0x158>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2104      	movs	r1, #4
 8012356:	4618      	mov	r0, r3
 8012358:	f000 fd40 	bl	8012ddc <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 801235c:	4b38      	ldr	r3, [pc, #224]	; (8012440 <httpServ+0x15c>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2100      	movs	r1, #0
 8012362:	4618      	mov	r0, r3
 8012364:	f000 fd3a 	bl	8012ddc <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8012368:	4b36      	ldr	r3, [pc, #216]	; (8012444 <httpServ+0x160>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2102      	movs	r1, #2
 801236e:	4618      	mov	r0, r3
 8012370:	f000 fd34 	bl	8012ddc <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 8012374:	4b34      	ldr	r3, [pc, #208]	; (8012448 <httpServ+0x164>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2105      	movs	r1, #5
 801237a:	4618      	mov	r0, r3
 801237c:	f000 fd2e 	bl	8012ddc <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 8012380:	4932      	ldr	r1, [pc, #200]	; (801244c <httpServ+0x168>)
 8012382:	4833      	ldr	r0, [pc, #204]	; (8012450 <httpServ+0x16c>)
 8012384:	f00d f982 	bl	801f68c <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 8012388:	4932      	ldr	r1, [pc, #200]	; (8012454 <httpServ+0x170>)
 801238a:	4833      	ldr	r0, [pc, #204]	; (8012458 <httpServ+0x174>)
 801238c:	f00d f97e 	bl	801f68c <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 8012390:	4932      	ldr	r1, [pc, #200]	; (801245c <httpServ+0x178>)
 8012392:	4833      	ldr	r0, [pc, #204]	; (8012460 <httpServ+0x17c>)
 8012394:	f00d f97a 	bl	801f68c <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012398:	4b32      	ldr	r3, [pc, #200]	; (8012464 <httpServ+0x180>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80123a0:	f101 010c 	add.w	r1, r1, #12
 80123a4:	2200      	movs	r2, #0
 80123a6:	4618      	mov	r0, r3
 80123a8:	f00e ff24 	bl	80211f4 <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123b0:	f103 030c 	add.w	r3, r3, #12
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d02f      	beq.n	801241a <httpServ+0x136>
 80123ba:	f00d fbdb 	bl	801fb74 <assigned_ip>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d12a      	bne.n	801241a <httpServ+0x136>
		  for(i = 0 ; i < http_nsockets; i++){
 80123c4:	2300      	movs	r3, #0
 80123c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123ca:	f102 020f 	add.w	r2, r2, #15
 80123ce:	7013      	strb	r3, [r2, #0]
 80123d0:	e016      	b.n	8012400 <httpServ+0x11c>
			  SocketMutexTake();
 80123d2:	f7fe feab 	bl	801112c <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 80123d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123da:	f103 030f 	add.w	r3, r3, #15
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f00c fb7b 	bl	801eadc <httpServer_run>
			  SocketMutexRelease();
 80123e6:	f7fe feaf 	bl	8011148 <SocketMutexRelease>
		  for(i = 0 ; i < http_nsockets; i++){
 80123ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123ee:	f103 030f 	add.w	r3, r3, #15
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	3301      	adds	r3, #1
 80123f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123fa:	f102 020f 	add.w	r2, r2, #15
 80123fe:	7013      	strb	r3, [r2, #0]
 8012400:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012404:	f103 030f 	add.w	r3, r3, #15
 8012408:	781a      	ldrb	r2, [r3, #0]
 801240a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801240e:	f103 030e 	add.w	r3, r3, #14
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	429a      	cmp	r2, r3
 8012416:	d3dc      	bcc.n	80123d2 <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012418:	e003      	b.n	8012422 <httpServ+0x13e>
			  //osDelay(delay0_1s);

		  }
	  }else{
		  osDelay(delay1s);
 801241a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801241e:	f00d fe0d 	bl	802003c <osDelay>
	  }
	  osDelay(delay0_1s);
 8012422:	2064      	movs	r0, #100	; 0x64
 8012424:	f00d fe0a 	bl	802003c <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012428:	e7b6      	b.n	8012398 <httpServ+0xb4>
 801242a:	bf00      	nop
 801242c:	080324e4 	.word	0x080324e4
 8012430:	08013aed 	.word	0x08013aed
 8012434:	08013c01 	.word	0x08013c01
 8012438:	20000450 	.word	0x20000450
 801243c:	20000454 	.word	0x20000454
 8012440:	20000458 	.word	0x20000458
 8012444:	2000045c 	.word	0x2000045c
 8012448:	20000460 	.word	0x20000460
 801244c:	080318d0 	.word	0x080318d0
 8012450:	08031bec 	.word	0x08031bec
 8012454:	08031bf8 	.word	0x08031bf8
 8012458:	08031f2c 	.word	0x08031f2c
 801245c:	08031f40 	.word	0x08031f40
 8012460:	080324d8 	.word	0x080324d8
 8012464:	2000044c 	.word	0x2000044c

08012468 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	f5ad 6d22 	sub.w	sp, sp, #2592	; 0xa20
 801246e:	af02      	add	r7, sp, #8
 8012470:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012474:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8012478:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 801247a:	4995      	ldr	r1, [pc, #596]	; (80126d0 <vMQTT_Task+0x268>)
 801247c:	4895      	ldr	r0, [pc, #596]	; (80126d4 <vMQTT_Task+0x26c>)
 801247e:	f001 fc8f 	bl	8013da0 <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 8012482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012486:	f00d fdd9 	bl	802003c <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 801248a:	4b93      	ldr	r3, [pc, #588]	; (80126d8 <vMQTT_Task+0x270>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8012492:	2200      	movs	r2, #0
 8012494:	4618      	mov	r0, r3
 8012496:	f00e fead 	bl	80211f4 <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 801249a:	f897 39f8 	ldrb.w	r3, [r7, #2552]	; 0x9f8
 801249e:	f083 0301 	eor.w	r3, r3, #1
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f040 8108 	bne.w	80126ba <vMQTT_Task+0x252>
 80124aa:	f00d fb63 	bl	801fb74 <assigned_ip>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	f040 8102 	bne.w	80126ba <vMQTT_Task+0x252>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124b6:	4b89      	ldr	r3, [pc, #548]	; (80126dc <vMQTT_Task+0x274>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124be:	2200      	movs	r2, #0
 80124c0:	4618      	mov	r0, r3
 80124c2:	f00e fe97 	bl	80211f4 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124c6:	e00b      	b.n	80124e0 <vMQTT_Task+0x78>
			osDelay(delay1s);
 80124c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124cc:	f00d fdb6 	bl	802003c <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124d0:	4b82      	ldr	r3, [pc, #520]	; (80126dc <vMQTT_Task+0x274>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124d8:	2200      	movs	r2, #0
 80124da:	4618      	mov	r0, r3
 80124dc:	f00e fe8a 	bl	80211f4 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124e0:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 80124e4:	f083 0301 	eor.w	r3, r3, #1
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d1ec      	bne.n	80124c8 <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80124ee:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 80124f2:	f083 0301 	eor.w	r3, r3, #1
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	f040 80e0 	bne.w	80126be <vMQTT_Task+0x256>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 80124fe:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8012502:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012506:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 801250a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801250e:	9301      	str	r3, [sp, #4]
 8012510:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8012514:	9300      	str	r3, [sp, #0]
 8012516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801251a:	f001 fc5d 	bl	8013dd8 <mqtt_client_init>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	f040 80ce 	bne.w	80126c2 <vMQTT_Task+0x25a>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 8012526:	f001 fd43 	bl	8013fb0 <mqtt_client_connect>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	f2c0 80ca 	blt.w	80126c6 <vMQTT_Task+0x25e>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8012532:	f001 fd8d 	bl	8014050 <mqtt_client_reg_dev_on_home_assist>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	f040 80c6 	bne.w	80126ca <vMQTT_Task+0x262>

		generate_status_topik(topik_name, 0);
 801253e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012542:	2100      	movs	r1, #0
 8012544:	4618      	mov	r0, r3
 8012546:	f002 f9af 	bl	80148a8 <generate_status_topik>
		while (1){
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801254a:	4b65      	ldr	r3, [pc, #404]	; (80126e0 <vMQTT_Task+0x278>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 8012552:	2200      	movs	r2, #0
 8012554:	4618      	mov	r0, r3
 8012556:	f00e fe4d 	bl	80211f4 <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 801255a:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 801255e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012562:	edd3 7a02 	vldr	s15, [r3, #8]
 8012566:	f107 030c 	add.w	r3, r7, #12
 801256a:	eeb0 0a67 	vmov.f32	s0, s15
 801256e:	495d      	ldr	r1, [pc, #372]	; (80126e4 <vMQTT_Task+0x27c>)
 8012570:	4618      	mov	r0, r3
 8012572:	f002 f9d1 	bl	8014918 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012576:	f107 020c 	add.w	r2, r7, #12
 801257a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801257e:	4611      	mov	r1, r2
 8012580:	4618      	mov	r0, r3
 8012582:	f001 feb7 	bl	80142f4 <send_data_to_topik>
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	f040 8086 	bne.w	801269a <vMQTT_Task+0x232>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 801258e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012592:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012596:	edd3 7a00 	vldr	s15, [r3]
 801259a:	f107 030c 	add.w	r3, r7, #12
 801259e:	eeb0 0a67 	vmov.f32	s0, s15
 80125a2:	4951      	ldr	r1, [pc, #324]	; (80126e8 <vMQTT_Task+0x280>)
 80125a4:	4618      	mov	r0, r3
 80125a6:	f002 f9b7 	bl	8014918 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125aa:	f107 020c 	add.w	r2, r7, #12
 80125ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125b2:	4611      	mov	r1, r2
 80125b4:	4618      	mov	r0, r3
 80125b6:	f001 fe9d 	bl	80142f4 <send_data_to_topik>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d16e      	bne.n	801269e <vMQTT_Task+0x236>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 80125c0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80125cc:	f107 030c 	add.w	r3, r7, #12
 80125d0:	eeb0 0a67 	vmov.f32	s0, s15
 80125d4:	4945      	ldr	r1, [pc, #276]	; (80126ec <vMQTT_Task+0x284>)
 80125d6:	4618      	mov	r0, r3
 80125d8:	f002 f99e 	bl	8014918 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125dc:	f107 020c 	add.w	r2, r7, #12
 80125e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125e4:	4611      	mov	r1, r2
 80125e6:	4618      	mov	r0, r3
 80125e8:	f001 fe84 	bl	80142f4 <send_data_to_topik>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d157      	bne.n	80126a2 <vMQTT_Task+0x23a>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 80125f2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80125fe:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80126f0 <vMQTT_Task+0x288>
 8012602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012606:	f107 030c 	add.w	r3, r7, #12
 801260a:	eeb0 0a67 	vmov.f32	s0, s15
 801260e:	4939      	ldr	r1, [pc, #228]	; (80126f4 <vMQTT_Task+0x28c>)
 8012610:	4618      	mov	r0, r3
 8012612:	f002 f981 	bl	8014918 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012616:	f107 020c 	add.w	r2, r7, #12
 801261a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801261e:	4611      	mov	r1, r2
 8012620:	4618      	mov	r0, r3
 8012622:	f001 fe67 	bl	80142f4 <send_data_to_topik>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d13c      	bne.n	80126a6 <vMQTT_Task+0x23e>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ActivePower);
 801262c:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012634:	edd3 7a03 	vldr	s15, [r3, #12]
 8012638:	f107 030c 	add.w	r3, r7, #12
 801263c:	eeb0 0a67 	vmov.f32	s0, s15
 8012640:	492d      	ldr	r1, [pc, #180]	; (80126f8 <vMQTT_Task+0x290>)
 8012642:	4618      	mov	r0, r3
 8012644:	f002 f968 	bl	8014918 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012648:	f107 020c 	add.w	r2, r7, #12
 801264c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012650:	4611      	mov	r1, r2
 8012652:	4618      	mov	r0, r3
 8012654:	f001 fe4e 	bl	80142f4 <send_data_to_topik>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d125      	bne.n	80126aa <vMQTT_Task+0x242>

			generate_key_value_JSON(topik_payload, dev_class_apparent_power, PowerData.ApparPower);
 801265e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012666:	edd3 7a04 	vldr	s15, [r3, #16]
 801266a:	f107 030c 	add.w	r3, r7, #12
 801266e:	eeb0 0a67 	vmov.f32	s0, s15
 8012672:	4922      	ldr	r1, [pc, #136]	; (80126fc <vMQTT_Task+0x294>)
 8012674:	4618      	mov	r0, r3
 8012676:	f002 f94f 	bl	8014918 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801267a:	f107 020c 	add.w	r2, r7, #12
 801267e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012682:	4611      	mov	r1, r2
 8012684:	4618      	mov	r0, r3
 8012686:	f001 fe35 	bl	80142f4 <send_data_to_topik>
 801268a:	4603      	mov	r3, r0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d10e      	bne.n	80126ae <vMQTT_Task+0x246>

			osDelay(delay30s);
 8012690:	f247 5030 	movw	r0, #30000	; 0x7530
 8012694:	f00d fcd2 	bl	802003c <osDelay>
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 8012698:	e757      	b.n	801254a <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801269a:	bf00      	nop
 801269c:	e008      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801269e:	bf00      	nop
 80126a0:	e006      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126a2:	bf00      	nop
 80126a4:	e004      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126a6:	bf00      	nop
 80126a8:	e002      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126aa:	bf00      	nop
 80126ac:	e000      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ae:	bf00      	nop
		}
		osDelay(delay1s);
 80126b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126b4:	f00d fcc2 	bl	802003c <osDelay>
 80126b8:	e6e3      	b.n	8012482 <vMQTT_Task+0x1a>
			continue;
 80126ba:	bf00      	nop
 80126bc:	e6e1      	b.n	8012482 <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80126be:	bf00      	nop
 80126c0:	e6df      	b.n	8012482 <vMQTT_Task+0x1a>
			continue;
 80126c2:	bf00      	nop
 80126c4:	e6dd      	b.n	8012482 <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 80126c6:	bf00      	nop
 80126c8:	e6db      	b.n	8012482 <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80126ca:	bf00      	nop
		osDelay(delay1s);
 80126cc:	e6d9      	b.n	8012482 <vMQTT_Task+0x1a>
 80126ce:	bf00      	nop
 80126d0:	08011149 	.word	0x08011149
 80126d4:	0801112d 	.word	0x0801112d
 80126d8:	2000044c 	.word	0x2000044c
 80126dc:	20000458 	.word	0x20000458
 80126e0:	20000450 	.word	0x20000450
 80126e4:	080324e8 	.word	0x080324e8
 80126e8:	080324f0 	.word	0x080324f0
 80126ec:	080324f8 	.word	0x080324f8
 80126f0:	42c80000 	.word	0x42c80000
 80126f4:	08032500 	.word	0x08032500
 80126f8:	08032510 	.word	0x08032510
 80126fc:	08032518 	.word	0x08032518

08012700 <vResetWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vResetWatchDog */
void vResetWatchDog(void *argument)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vResetWatchDog */
  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8012708:	4803      	ldr	r0, [pc, #12]	; (8012718 <vResetWatchDog+0x18>)
 801270a:	f003 fad6 	bl	8015cba <HAL_IWDG_Refresh>
    osDelay(delay0_5s);
 801270e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012712:	f00d fc93 	bl	802003c <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8012716:	e7f7      	b.n	8012708 <vResetWatchDog+0x8>
 8012718:	2000031c 	.word	0x2000031c

0801271c <vSendBroadcast>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSendBroadcast */
void vSendBroadcast(void *argument)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b08e      	sub	sp, #56	; 0x38
 8012720:	af02      	add	r7, sp, #8
 8012722:	6078      	str	r0, [r7, #4]
//	broadcastIP[2] = 20;
//	broadcastIP[3] = 228;
   /* Infinite loop */
  for(;;)
  {
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8012724:	4b2f      	ldr	r3, [pc, #188]	; (80127e4 <vSendBroadcast+0xc8>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f107 0110 	add.w	r1, r7, #16
 801272c:	2200      	movs	r2, #0
 801272e:	4618      	mov	r0, r3
 8012730:	f00e fd60 	bl	80211f4 <xQueuePeek>
	if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 8012734:	7c3b      	ldrb	r3, [r7, #16]
 8012736:	f083 0301 	eor.w	r3, r3, #1
 801273a:	b2db      	uxtb	r3, r3
 801273c:	2b00      	cmp	r3, #0
 801273e:	d104      	bne.n	801274a <vSendBroadcast+0x2e>
 8012740:	f00d fa18 	bl	801fb74 <assigned_ip>
 8012744:	4603      	mov	r3, r0
 8012746:	2b01      	cmp	r3, #1
 8012748:	d004      	beq.n	8012754 <vSendBroadcast+0x38>
		osDelay(delay1s);
 801274a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801274e:	f00d fc75 	bl	802003c <osDelay>
		continue;
 8012752:	e045      	b.n	80127e0 <vSendBroadcast+0xc4>
	}

	broadcastIP[0] = EthernetInfo.ip[0] | ( ~ EthernetInfo.sn[0]);
 8012754:	7e7b      	ldrb	r3, [r7, #25]
 8012756:	b25a      	sxtb	r2, r3
 8012758:	7f7b      	ldrb	r3, [r7, #29]
 801275a:	b25b      	sxtb	r3, r3
 801275c:	43db      	mvns	r3, r3
 801275e:	b25b      	sxtb	r3, r3
 8012760:	4313      	orrs	r3, r2
 8012762:	b25b      	sxtb	r3, r3
 8012764:	b2db      	uxtb	r3, r3
 8012766:	733b      	strb	r3, [r7, #12]
	broadcastIP[1] = EthernetInfo.ip[1] | ( ~ EthernetInfo.sn[1]);
 8012768:	7ebb      	ldrb	r3, [r7, #26]
 801276a:	b25a      	sxtb	r2, r3
 801276c:	7fbb      	ldrb	r3, [r7, #30]
 801276e:	b25b      	sxtb	r3, r3
 8012770:	43db      	mvns	r3, r3
 8012772:	b25b      	sxtb	r3, r3
 8012774:	4313      	orrs	r3, r2
 8012776:	b25b      	sxtb	r3, r3
 8012778:	b2db      	uxtb	r3, r3
 801277a:	737b      	strb	r3, [r7, #13]
	broadcastIP[2] = EthernetInfo.ip[2] | ( ~ EthernetInfo.sn[2]);
 801277c:	7efb      	ldrb	r3, [r7, #27]
 801277e:	b25a      	sxtb	r2, r3
 8012780:	7ffb      	ldrb	r3, [r7, #31]
 8012782:	b25b      	sxtb	r3, r3
 8012784:	43db      	mvns	r3, r3
 8012786:	b25b      	sxtb	r3, r3
 8012788:	4313      	orrs	r3, r2
 801278a:	b25b      	sxtb	r3, r3
 801278c:	b2db      	uxtb	r3, r3
 801278e:	73bb      	strb	r3, [r7, #14]
	broadcastIP[3] = EthernetInfo.ip[3] | ( ~ EthernetInfo.sn[3]);
 8012790:	7f3b      	ldrb	r3, [r7, #28]
 8012792:	b25a      	sxtb	r2, r3
 8012794:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012798:	b25b      	sxtb	r3, r3
 801279a:	43db      	mvns	r3, r3
 801279c:	b25b      	sxtb	r3, r3
 801279e:	4313      	orrs	r3, r2
 80127a0:	b25b      	sxtb	r3, r3
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	73fb      	strb	r3, [r7, #15]

	SocketMutexTake();
 80127a6:	f7fe fcc1 	bl	801112c <SocketMutexTake>
	ServiceSockMutexTake();
 80127aa:	f7fe fcd9 	bl	8011160 <ServiceSockMutexTake>
	socket(SERVICE_SOCKET, Sn_MR_UDP, 5000, 0x00);
 80127ae:	2300      	movs	r3, #0
 80127b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127b4:	2102      	movs	r1, #2
 80127b6:	2004      	movs	r0, #4
 80127b8:	f006 fa3e 	bl	8018c38 <socket>
	sendto(SERVICE_SOCKET, (uint8_t *)"TEST_BROADCAST_MESSAGE", 22, (uint8_t *)broadcastIP, 5000);
 80127bc:	f107 030c 	add.w	r3, r7, #12
 80127c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127c4:	9200      	str	r2, [sp, #0]
 80127c6:	2216      	movs	r2, #22
 80127c8:	4907      	ldr	r1, [pc, #28]	; (80127e8 <vSendBroadcast+0xcc>)
 80127ca:	2004      	movs	r0, #4
 80127cc:	f006 ff12 	bl	80195f4 <sendto>

	ServiceSockMutexRelease();
 80127d0:	f7fe fcd4 	bl	801117c <ServiceSockMutexRelease>
	SocketMutexRelease();
 80127d4:	f7fe fcb8 	bl	8011148 <SocketMutexRelease>
    osDelay(delay10s);
 80127d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80127dc:	f00d fc2e 	bl	802003c <osDelay>
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 80127e0:	e7a0      	b.n	8012724 <vSendBroadcast+0x8>
 80127e2:	bf00      	nop
 80127e4:	2000044c 	.word	0x2000044c
 80127e8:	08032528 	.word	0x08032528

080127ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	4a04      	ldr	r2, [pc, #16]	; (801280c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d101      	bne.n	8012802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80127fe:	f002 fecd 	bl	801559c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012802:	bf00      	nop
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	40010000 	.word	0x40010000

08012810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012810:	b480      	push	{r7}
 8012812:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012814:	b672      	cpsid	i
}
 8012816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012818:	e7fe      	b.n	8012818 <Error_Handler+0x8>
	...

0801281c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012822:	2300      	movs	r3, #0
 8012824:	607b      	str	r3, [r7, #4]
 8012826:	4b12      	ldr	r3, [pc, #72]	; (8012870 <HAL_MspInit+0x54>)
 8012828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801282a:	4a11      	ldr	r2, [pc, #68]	; (8012870 <HAL_MspInit+0x54>)
 801282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012830:	6453      	str	r3, [r2, #68]	; 0x44
 8012832:	4b0f      	ldr	r3, [pc, #60]	; (8012870 <HAL_MspInit+0x54>)
 8012834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801283a:	607b      	str	r3, [r7, #4]
 801283c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801283e:	2300      	movs	r3, #0
 8012840:	603b      	str	r3, [r7, #0]
 8012842:	4b0b      	ldr	r3, [pc, #44]	; (8012870 <HAL_MspInit+0x54>)
 8012844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012846:	4a0a      	ldr	r2, [pc, #40]	; (8012870 <HAL_MspInit+0x54>)
 8012848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801284c:	6413      	str	r3, [r2, #64]	; 0x40
 801284e:	4b08      	ldr	r3, [pc, #32]	; (8012870 <HAL_MspInit+0x54>)
 8012850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012856:	603b      	str	r3, [r7, #0]
 8012858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801285a:	2200      	movs	r2, #0
 801285c:	210f      	movs	r1, #15
 801285e:	f06f 0001 	mvn.w	r0, #1
 8012862:	f002 ff73 	bl	801574c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012866:	bf00      	nop
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	40023800 	.word	0x40023800

08012874 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012874:	b480      	push	{r7}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a0b      	ldr	r2, [pc, #44]	; (80128b0 <HAL_CRC_MspInit+0x3c>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d10d      	bne.n	80128a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8012886:	2300      	movs	r3, #0
 8012888:	60fb      	str	r3, [r7, #12]
 801288a:	4b0a      	ldr	r3, [pc, #40]	; (80128b4 <HAL_CRC_MspInit+0x40>)
 801288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801288e:	4a09      	ldr	r2, [pc, #36]	; (80128b4 <HAL_CRC_MspInit+0x40>)
 8012890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012894:	6313      	str	r3, [r2, #48]	; 0x30
 8012896:	4b07      	ldr	r3, [pc, #28]	; (80128b4 <HAL_CRC_MspInit+0x40>)
 8012898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801289a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801289e:	60fb      	str	r3, [r7, #12]
 80128a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80128a2:	bf00      	nop
 80128a4:	3714      	adds	r7, #20
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	40023000 	.word	0x40023000
 80128b4:	40023800 	.word	0x40023800

080128b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b08c      	sub	sp, #48	; 0x30
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128c0:	f107 031c 	add.w	r3, r7, #28
 80128c4:	2200      	movs	r2, #0
 80128c6:	601a      	str	r2, [r3, #0]
 80128c8:	605a      	str	r2, [r3, #4]
 80128ca:	609a      	str	r2, [r3, #8]
 80128cc:	60da      	str	r2, [r3, #12]
 80128ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4a32      	ldr	r2, [pc, #200]	; (80129a0 <HAL_SPI_MspInit+0xe8>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d12c      	bne.n	8012934 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80128da:	2300      	movs	r3, #0
 80128dc:	61bb      	str	r3, [r7, #24]
 80128de:	4b31      	ldr	r3, [pc, #196]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 80128e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128e2:	4a30      	ldr	r2, [pc, #192]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 80128e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80128e8:	6453      	str	r3, [r2, #68]	; 0x44
 80128ea:	4b2e      	ldr	r3, [pc, #184]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 80128ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80128f2:	61bb      	str	r3, [r7, #24]
 80128f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128f6:	2300      	movs	r3, #0
 80128f8:	617b      	str	r3, [r7, #20]
 80128fa:	4b2a      	ldr	r3, [pc, #168]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 80128fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128fe:	4a29      	ldr	r2, [pc, #164]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 8012900:	f043 0301 	orr.w	r3, r3, #1
 8012904:	6313      	str	r3, [r2, #48]	; 0x30
 8012906:	4b27      	ldr	r3, [pc, #156]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 8012908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801290a:	f003 0301 	and.w	r3, r3, #1
 801290e:	617b      	str	r3, [r7, #20]
 8012910:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8012912:	23e0      	movs	r3, #224	; 0xe0
 8012914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012916:	2302      	movs	r3, #2
 8012918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801291a:	2300      	movs	r3, #0
 801291c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801291e:	2303      	movs	r3, #3
 8012920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012922:	2305      	movs	r3, #5
 8012924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012926:	f107 031c 	add.w	r3, r7, #28
 801292a:	4619      	mov	r1, r3
 801292c:	481e      	ldr	r0, [pc, #120]	; (80129a8 <HAL_SPI_MspInit+0xf0>)
 801292e:	f002 ffe5 	bl	80158fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012932:	e030      	b.n	8012996 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a1c      	ldr	r2, [pc, #112]	; (80129ac <HAL_SPI_MspInit+0xf4>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d12b      	bne.n	8012996 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 801293e:	2300      	movs	r3, #0
 8012940:	613b      	str	r3, [r7, #16]
 8012942:	4b18      	ldr	r3, [pc, #96]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 8012944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012946:	4a17      	ldr	r2, [pc, #92]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 8012948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801294c:	6413      	str	r3, [r2, #64]	; 0x40
 801294e:	4b15      	ldr	r3, [pc, #84]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 8012950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012956:	613b      	str	r3, [r7, #16]
 8012958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801295a:	2300      	movs	r3, #0
 801295c:	60fb      	str	r3, [r7, #12]
 801295e:	4b11      	ldr	r3, [pc, #68]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 8012960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012962:	4a10      	ldr	r2, [pc, #64]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 8012964:	f043 0302 	orr.w	r3, r3, #2
 8012968:	6313      	str	r3, [r2, #48]	; 0x30
 801296a:	4b0e      	ldr	r3, [pc, #56]	; (80129a4 <HAL_SPI_MspInit+0xec>)
 801296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801296e:	f003 0302 	and.w	r3, r3, #2
 8012972:	60fb      	str	r3, [r7, #12]
 8012974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012976:	2338      	movs	r3, #56	; 0x38
 8012978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801297a:	2302      	movs	r3, #2
 801297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801297e:	2300      	movs	r3, #0
 8012980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012982:	2303      	movs	r3, #3
 8012984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012986:	2306      	movs	r3, #6
 8012988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801298a:	f107 031c 	add.w	r3, r7, #28
 801298e:	4619      	mov	r1, r3
 8012990:	4807      	ldr	r0, [pc, #28]	; (80129b0 <HAL_SPI_MspInit+0xf8>)
 8012992:	f002 ffb3 	bl	80158fc <HAL_GPIO_Init>
}
 8012996:	bf00      	nop
 8012998:	3730      	adds	r7, #48	; 0x30
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	40013000 	.word	0x40013000
 80129a4:	40023800 	.word	0x40023800
 80129a8:	40020000 	.word	0x40020000
 80129ac:	40003c00 	.word	0x40003c00
 80129b0:	40020400 	.word	0x40020400

080129b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b08a      	sub	sp, #40	; 0x28
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80129bc:	f107 0314 	add.w	r3, r7, #20
 80129c0:	2200      	movs	r2, #0
 80129c2:	601a      	str	r2, [r3, #0]
 80129c4:	605a      	str	r2, [r3, #4]
 80129c6:	609a      	str	r2, [r3, #8]
 80129c8:	60da      	str	r2, [r3, #12]
 80129ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4a1d      	ldr	r2, [pc, #116]	; (8012a48 <HAL_UART_MspInit+0x94>)
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d133      	bne.n	8012a3e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80129d6:	2300      	movs	r3, #0
 80129d8:	613b      	str	r3, [r7, #16]
 80129da:	4b1c      	ldr	r3, [pc, #112]	; (8012a4c <HAL_UART_MspInit+0x98>)
 80129dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129de:	4a1b      	ldr	r2, [pc, #108]	; (8012a4c <HAL_UART_MspInit+0x98>)
 80129e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80129e4:	6413      	str	r3, [r2, #64]	; 0x40
 80129e6:	4b19      	ldr	r3, [pc, #100]	; (8012a4c <HAL_UART_MspInit+0x98>)
 80129e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129ee:	613b      	str	r3, [r7, #16]
 80129f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80129f2:	2300      	movs	r3, #0
 80129f4:	60fb      	str	r3, [r7, #12]
 80129f6:	4b15      	ldr	r3, [pc, #84]	; (8012a4c <HAL_UART_MspInit+0x98>)
 80129f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129fa:	4a14      	ldr	r2, [pc, #80]	; (8012a4c <HAL_UART_MspInit+0x98>)
 80129fc:	f043 0301 	orr.w	r3, r3, #1
 8012a00:	6313      	str	r3, [r2, #48]	; 0x30
 8012a02:	4b12      	ldr	r3, [pc, #72]	; (8012a4c <HAL_UART_MspInit+0x98>)
 8012a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a06:	f003 0301 	and.w	r3, r3, #1
 8012a0a:	60fb      	str	r3, [r7, #12]
 8012a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012a0e:	230c      	movs	r3, #12
 8012a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a12:	2302      	movs	r3, #2
 8012a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a16:	2300      	movs	r3, #0
 8012a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a1a:	2303      	movs	r3, #3
 8012a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012a1e:	2307      	movs	r3, #7
 8012a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a22:	f107 0314 	add.w	r3, r7, #20
 8012a26:	4619      	mov	r1, r3
 8012a28:	4809      	ldr	r0, [pc, #36]	; (8012a50 <HAL_UART_MspInit+0x9c>)
 8012a2a:	f002 ff67 	bl	80158fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012a2e:	2200      	movs	r2, #0
 8012a30:	2105      	movs	r1, #5
 8012a32:	2026      	movs	r0, #38	; 0x26
 8012a34:	f002 fe8a 	bl	801574c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012a38:	2026      	movs	r0, #38	; 0x26
 8012a3a:	f002 fea3 	bl	8015784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012a3e:	bf00      	nop
 8012a40:	3728      	adds	r7, #40	; 0x28
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
 8012a46:	bf00      	nop
 8012a48:	40004400 	.word	0x40004400
 8012a4c:	40023800 	.word	0x40023800
 8012a50:	40020000 	.word	0x40020000

08012a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b08c      	sub	sp, #48	; 0x30
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8012a60:	2300      	movs	r3, #0
 8012a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012a64:	2300      	movs	r3, #0
 8012a66:	60bb      	str	r3, [r7, #8]
 8012a68:	4b2e      	ldr	r3, [pc, #184]	; (8012b24 <HAL_InitTick+0xd0>)
 8012a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a6c:	4a2d      	ldr	r2, [pc, #180]	; (8012b24 <HAL_InitTick+0xd0>)
 8012a6e:	f043 0301 	orr.w	r3, r3, #1
 8012a72:	6453      	str	r3, [r2, #68]	; 0x44
 8012a74:	4b2b      	ldr	r3, [pc, #172]	; (8012b24 <HAL_InitTick+0xd0>)
 8012a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a78:	f003 0301 	and.w	r3, r3, #1
 8012a7c:	60bb      	str	r3, [r7, #8]
 8012a7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012a80:	f107 020c 	add.w	r2, r7, #12
 8012a84:	f107 0310 	add.w	r3, r7, #16
 8012a88:	4611      	mov	r1, r2
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f003 fdbe 	bl	801660c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012a90:	f003 fda8 	bl	80165e4 <HAL_RCC_GetPCLK2Freq>
 8012a94:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a98:	4a23      	ldr	r2, [pc, #140]	; (8012b28 <HAL_InitTick+0xd4>)
 8012a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a9e:	0c9b      	lsrs	r3, r3, #18
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012aa4:	4b21      	ldr	r3, [pc, #132]	; (8012b2c <HAL_InitTick+0xd8>)
 8012aa6:	4a22      	ldr	r2, [pc, #136]	; (8012b30 <HAL_InitTick+0xdc>)
 8012aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012aaa:	4b20      	ldr	r3, [pc, #128]	; (8012b2c <HAL_InitTick+0xd8>)
 8012aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012ab0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8012ab2:	4a1e      	ldr	r2, [pc, #120]	; (8012b2c <HAL_InitTick+0xd8>)
 8012ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012ab8:	4b1c      	ldr	r3, [pc, #112]	; (8012b2c <HAL_InitTick+0xd8>)
 8012aba:	2200      	movs	r2, #0
 8012abc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012abe:	4b1b      	ldr	r3, [pc, #108]	; (8012b2c <HAL_InitTick+0xd8>)
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012ac4:	4b19      	ldr	r3, [pc, #100]	; (8012b2c <HAL_InitTick+0xd8>)
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8012aca:	4818      	ldr	r0, [pc, #96]	; (8012b2c <HAL_InitTick+0xd8>)
 8012acc:	f004 fba6 	bl	801721c <HAL_TIM_Base_Init>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8012ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d11b      	bne.n	8012b16 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8012ade:	4813      	ldr	r0, [pc, #76]	; (8012b2c <HAL_InitTick+0xd8>)
 8012ae0:	f004 fbf6 	bl	80172d0 <HAL_TIM_Base_Start_IT>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8012aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d111      	bne.n	8012b16 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012af2:	2019      	movs	r0, #25
 8012af4:	f002 fe46 	bl	8015784 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2b0f      	cmp	r3, #15
 8012afc:	d808      	bhi.n	8012b10 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8012afe:	2200      	movs	r2, #0
 8012b00:	6879      	ldr	r1, [r7, #4]
 8012b02:	2019      	movs	r0, #25
 8012b04:	f002 fe22 	bl	801574c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012b08:	4a0a      	ldr	r2, [pc, #40]	; (8012b34 <HAL_InitTick+0xe0>)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6013      	str	r3, [r2, #0]
 8012b0e:	e002      	b.n	8012b16 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8012b10:	2301      	movs	r3, #1
 8012b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3730      	adds	r7, #48	; 0x30
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	40023800 	.word	0x40023800
 8012b28:	431bde83 	.word	0x431bde83
 8012b2c:	2000049c 	.word	0x2000049c
 8012b30:	40010000 	.word	0x40010000
 8012b34:	200000bc 	.word	0x200000bc

08012b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012b3c:	e7fe      	b.n	8012b3c <NMI_Handler+0x4>

08012b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012b3e:	b480      	push	{r7}
 8012b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012b42:	e7fe      	b.n	8012b42 <HardFault_Handler+0x4>

08012b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012b44:	b480      	push	{r7}
 8012b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012b48:	e7fe      	b.n	8012b48 <MemManage_Handler+0x4>

08012b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012b4a:	b480      	push	{r7}
 8012b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012b4e:	e7fe      	b.n	8012b4e <BusFault_Handler+0x4>

08012b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012b50:	b480      	push	{r7}
 8012b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012b54:	e7fe      	b.n	8012b54 <UsageFault_Handler+0x4>

08012b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012b56:	b480      	push	{r7}
 8012b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012b5a:	bf00      	nop
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012b68:	4802      	ldr	r0, [pc, #8]	; (8012b74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012b6a:	f004 fc13 	bl	8017394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012b6e:	bf00      	nop
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	2000049c 	.word	0x2000049c

08012b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012b7c:	4802      	ldr	r0, [pc, #8]	; (8012b88 <USART2_IRQHandler+0x10>)
 8012b7e:	f004 fe6f 	bl	8017860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012b82:	bf00      	nop
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	200003d8 	.word	0x200003d8

08012b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	af00      	add	r7, sp, #0
  return 1;
 8012b90:	2301      	movs	r3, #1
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <_kill>:

int _kill(int pid, int sig)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012ba6:	f01a ff99 	bl	802dadc <__errno>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2216      	movs	r2, #22
 8012bae:	601a      	str	r2, [r3, #0]
  return -1;
 8012bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <_exit>:

void _exit (int status)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f7ff ffe7 	bl	8012b9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8012bce:	e7fe      	b.n	8012bce <_exit+0x12>

08012bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b086      	sub	sp, #24
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012bdc:	2300      	movs	r3, #0
 8012bde:	617b      	str	r3, [r7, #20]
 8012be0:	e00a      	b.n	8012bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012be2:	f3af 8000 	nop.w
 8012be6:	4601      	mov	r1, r0
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	1c5a      	adds	r2, r3, #1
 8012bec:	60ba      	str	r2, [r7, #8]
 8012bee:	b2ca      	uxtb	r2, r1
 8012bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	617b      	str	r3, [r7, #20]
 8012bf8:	697a      	ldr	r2, [r7, #20]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	dbf0      	blt.n	8012be2 <_read+0x12>
  }

  return len;
 8012c00:	687b      	ldr	r3, [r7, #4]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3718      	adds	r7, #24
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b086      	sub	sp, #24
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	60f8      	str	r0, [r7, #12]
 8012c12:	60b9      	str	r1, [r7, #8]
 8012c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c16:	2300      	movs	r3, #0
 8012c18:	617b      	str	r3, [r7, #20]
 8012c1a:	e009      	b.n	8012c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	1c5a      	adds	r2, r3, #1
 8012c20:	60ba      	str	r2, [r7, #8]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	617b      	str	r3, [r7, #20]
 8012c30:	697a      	ldr	r2, [r7, #20]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	dbf1      	blt.n	8012c1c <_write+0x12>
  }
  return len;
 8012c38:	687b      	ldr	r3, [r7, #4]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3718      	adds	r7, #24
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <_close>:

int _close(int file)
{
 8012c42:	b480      	push	{r7}
 8012c44:	b083      	sub	sp, #12
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	370c      	adds	r7, #12
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr

08012c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012c5a:	b480      	push	{r7}
 8012c5c:	b083      	sub	sp, #12
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
 8012c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8012c6c:	2300      	movs	r3, #0
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	370c      	adds	r7, #12
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr

08012c7a <_isatty>:

int _isatty(int file)
{
 8012c7a:	b480      	push	{r7}
 8012c7c:	b083      	sub	sp, #12
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012c82:	2301      	movs	r3, #1
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	370c      	adds	r7, #12
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8e:	4770      	bx	lr

08012c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012c90:	b480      	push	{r7}
 8012c92:	b085      	sub	sp, #20
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012c9c:	2300      	movs	r3, #0
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3714      	adds	r7, #20
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr
	...

08012cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b086      	sub	sp, #24
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012cb4:	4a14      	ldr	r2, [pc, #80]	; (8012d08 <_sbrk+0x5c>)
 8012cb6:	4b15      	ldr	r3, [pc, #84]	; (8012d0c <_sbrk+0x60>)
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012cc0:	4b13      	ldr	r3, [pc, #76]	; (8012d10 <_sbrk+0x64>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d102      	bne.n	8012cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012cc8:	4b11      	ldr	r3, [pc, #68]	; (8012d10 <_sbrk+0x64>)
 8012cca:	4a12      	ldr	r2, [pc, #72]	; (8012d14 <_sbrk+0x68>)
 8012ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012cce:	4b10      	ldr	r3, [pc, #64]	; (8012d10 <_sbrk+0x64>)
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	693a      	ldr	r2, [r7, #16]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d207      	bcs.n	8012cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012cdc:	f01a fefe 	bl	802dadc <__errno>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	220c      	movs	r2, #12
 8012ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8012cea:	e009      	b.n	8012d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012cec:	4b08      	ldr	r3, [pc, #32]	; (8012d10 <_sbrk+0x64>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012cf2:	4b07      	ldr	r3, [pc, #28]	; (8012d10 <_sbrk+0x64>)
 8012cf4:	681a      	ldr	r2, [r3, #0]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	4413      	add	r3, r2
 8012cfa:	4a05      	ldr	r2, [pc, #20]	; (8012d10 <_sbrk+0x64>)
 8012cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3718      	adds	r7, #24
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	20010000 	.word	0x20010000
 8012d0c:	00000400 	.word	0x00000400
 8012d10:	200004e4 	.word	0x200004e4
 8012d14:	2000daf8 	.word	0x2000daf8

08012d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012d1c:	4b06      	ldr	r3, [pc, #24]	; (8012d38 <SystemInit+0x20>)
 8012d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d22:	4a05      	ldr	r2, [pc, #20]	; (8012d38 <SystemInit+0x20>)
 8012d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012d2c:	bf00      	nop
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr
 8012d36:	bf00      	nop
 8012d38:	e000ed00 	.word	0xe000ed00

08012d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012d74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012d40:	f7ff ffea 	bl	8012d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012d44:	480c      	ldr	r0, [pc, #48]	; (8012d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012d46:	490d      	ldr	r1, [pc, #52]	; (8012d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012d48:	4a0d      	ldr	r2, [pc, #52]	; (8012d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012d4c:	e002      	b.n	8012d54 <LoopCopyDataInit>

08012d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012d52:	3304      	adds	r3, #4

08012d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012d58:	d3f9      	bcc.n	8012d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012d5a:	4a0a      	ldr	r2, [pc, #40]	; (8012d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012d5c:	4c0a      	ldr	r4, [pc, #40]	; (8012d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012d60:	e001      	b.n	8012d66 <LoopFillZerobss>

08012d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012d64:	3204      	adds	r2, #4

08012d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012d68:	d3fb      	bcc.n	8012d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012d6a:	f01a febd 	bl	802dae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012d6e:	f7fe fa29 	bl	80111c4 <main>
  bx  lr    
 8012d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012d74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012d7c:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012d80:	08034dc0 	.word	0x08034dc0
  ldr r2, =_sbss
 8012d84:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012d88:	2000daf4 	.word	0x2000daf4

08012d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012d8c:	e7fe      	b.n	8012d8c <ADC_IRQHandler>

08012d8e <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012d8e:	b480      	push	{r7}
 8012d90:	b083      	sub	sp, #12
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	4603      	mov	r3, r0
 8012d96:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012d98:	79fb      	ldrb	r3, [r7, #7]
 8012d9a:	2b2f      	cmp	r3, #47	; 0x2f
 8012d9c:	d905      	bls.n	8012daa <CharToDec+0x1c>
 8012d9e:	79fb      	ldrb	r3, [r7, #7]
 8012da0:	2b39      	cmp	r3, #57	; 0x39
 8012da2:	d802      	bhi.n	8012daa <CharToDec+0x1c>
 8012da4:	79fb      	ldrb	r3, [r7, #7]
 8012da6:	3b30      	subs	r3, #48	; 0x30
 8012da8:	e012      	b.n	8012dd0 <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012daa:	79fb      	ldrb	r3, [r7, #7]
 8012dac:	2b60      	cmp	r3, #96	; 0x60
 8012dae:	d905      	bls.n	8012dbc <CharToDec+0x2e>
 8012db0:	79fb      	ldrb	r3, [r7, #7]
 8012db2:	2b66      	cmp	r3, #102	; 0x66
 8012db4:	d802      	bhi.n	8012dbc <CharToDec+0x2e>
 8012db6:	79fb      	ldrb	r3, [r7, #7]
 8012db8:	3b57      	subs	r3, #87	; 0x57
 8012dba:	e009      	b.n	8012dd0 <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012dbc:	79fb      	ldrb	r3, [r7, #7]
 8012dbe:	2b40      	cmp	r3, #64	; 0x40
 8012dc0:	d905      	bls.n	8012dce <CharToDec+0x40>
 8012dc2:	79fb      	ldrb	r3, [r7, #7]
 8012dc4:	2b46      	cmp	r3, #70	; 0x46
 8012dc6:	d802      	bhi.n	8012dce <CharToDec+0x40>
 8012dc8:	79fb      	ldrb	r3, [r7, #7]
 8012dca:	3b37      	subs	r3, #55	; 0x37
 8012dcc:	e000      	b.n	8012dd0 <CharToDec+0x42>
    return 0;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	370c      	adds	r7, #12
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr

08012ddc <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	460b      	mov	r3, r1
 8012de6:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012de8:	78fb      	ldrb	r3, [r7, #3]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <http_parse_params_init+0x20>
		if (xQueue){
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d034      	beq.n	8012e5e <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012df4:	4a1d      	ldr	r2, [pc, #116]	; (8012e6c <http_parse_params_init+0x90>)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012dfa:	e030      	b.n	8012e5e <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012dfc:	78fb      	ldrb	r3, [r7, #3]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d106      	bne.n	8012e10 <http_parse_params_init+0x34>
		if (xQueue){
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d02a      	beq.n	8012e5e <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012e08:	4a19      	ldr	r2, [pc, #100]	; (8012e70 <http_parse_params_init+0x94>)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6013      	str	r3, [r2, #0]
}
 8012e0e:	e026      	b.n	8012e5e <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012e10:	78fb      	ldrb	r3, [r7, #3]
 8012e12:	2b02      	cmp	r3, #2
 8012e14:	d106      	bne.n	8012e24 <http_parse_params_init+0x48>
		if (xQueue){
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d020      	beq.n	8012e5e <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8012e1c:	4a15      	ldr	r2, [pc, #84]	; (8012e74 <http_parse_params_init+0x98>)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6013      	str	r3, [r2, #0]
}
 8012e22:	e01c      	b.n	8012e5e <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 8012e24:	78fb      	ldrb	r3, [r7, #3]
 8012e26:	2b03      	cmp	r3, #3
 8012e28:	d106      	bne.n	8012e38 <http_parse_params_init+0x5c>
		if (xQueue){
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d016      	beq.n	8012e5e <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 8012e30:	4a11      	ldr	r2, [pc, #68]	; (8012e78 <http_parse_params_init+0x9c>)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6013      	str	r3, [r2, #0]
}
 8012e36:	e012      	b.n	8012e5e <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8012e38:	78fb      	ldrb	r3, [r7, #3]
 8012e3a:	2b04      	cmp	r3, #4
 8012e3c:	d106      	bne.n	8012e4c <http_parse_params_init+0x70>
		if (xQueue){
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d00c      	beq.n	8012e5e <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 8012e44:	4a0d      	ldr	r2, [pc, #52]	; (8012e7c <http_parse_params_init+0xa0>)
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6013      	str	r3, [r2, #0]
}
 8012e4a:	e008      	b.n	8012e5e <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8012e4c:	78fb      	ldrb	r3, [r7, #3]
 8012e4e:	2b05      	cmp	r3, #5
 8012e50:	d105      	bne.n	8012e5e <http_parse_params_init+0x82>
		if (xQueue){
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d002      	beq.n	8012e5e <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8012e58:	4a09      	ldr	r2, [pc, #36]	; (8012e80 <http_parse_params_init+0xa4>)
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6013      	str	r3, [r2, #0]
}
 8012e5e:	bf00      	nop
 8012e60:	370c      	adds	r7, #12
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr
 8012e6a:	bf00      	nop
 8012e6c:	200004e8 	.word	0x200004e8
 8012e70:	200004ec 	.word	0x200004ec
 8012e74:	200004f0 	.word	0x200004f0
 8012e78:	200004f4 	.word	0x200004f4
 8012e7c:	200004f8 	.word	0x200004f8
 8012e80:	200004fc 	.word	0x200004fc

08012e84 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b0cc      	sub	sp, #304	; 0x130
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e92:	6018      	str	r0, [r3, #0]
 8012e94:	460a      	mov	r2, r1
 8012e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e9a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012e9e:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8012ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ea4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	2b04      	cmp	r3, #4
 8012eac:	f200 814a 	bhi.w	8013144 <param_from_http_to_Q+0x2c0>
 8012eb0:	a201      	add	r2, pc, #4	; (adr r2, 8012eb8 <param_from_http_to_Q+0x34>)
 8012eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb6:	bf00      	nop
 8012eb8:	08012ecd 	.word	0x08012ecd
 8012ebc:	08013145 	.word	0x08013145
 8012ec0:	08013059 	.word	0x08013059
 8012ec4:	08013145 	.word	0x08013145
 8012ec8:	080130df 	.word	0x080130df

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 8012ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012ed0:	22c6      	movs	r2, #198	; 0xc6
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f01a fc61 	bl	802d79c <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1")){
 8012eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ee2:	499c      	ldr	r1, [pc, #624]	; (8013154 <param_from_http_to_Q+0x2d0>)
 8012ee4:	6818      	ldr	r0, [r3, #0]
 8012ee6:	f00b fc49 	bl	801e77c <get_http_param_value>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2131      	movs	r1, #49	; 0x31
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f01a fc6b 	bl	802d7ca <strchr>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d003      	beq.n	8012f02 <param_from_http_to_Q+0x7e>
				MQTT_params.enable = 1;
 8012efa:	2301      	movs	r3, #1
 8012efc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8012f00:	e012      	b.n	8012f28 <param_from_http_to_Q+0xa4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0")) {
 8012f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f0a:	4992      	ldr	r1, [pc, #584]	; (8013154 <param_from_http_to_Q+0x2d0>)
 8012f0c:	6818      	ldr	r0, [r3, #0]
 8012f0e:	f00b fc35 	bl	801e77c <get_http_param_value>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2130      	movs	r1, #48	; 0x30
 8012f16:	4618      	mov	r0, r3
 8012f18:	f01a fc57 	bl	802d7ca <strchr>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d002      	beq.n	8012f28 <param_from_http_to_Q+0xa4>
				MQTT_params.enable = 0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8012f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f30:	4989      	ldr	r1, [pc, #548]	; (8013158 <param_from_http_to_Q+0x2d4>)
 8012f32:	6818      	ldr	r0, [r3, #0]
 8012f34:	f00b fc22 	bl	801e77c <get_http_param_value>
 8012f38:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8012f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d106      	bne.n	8012f52 <param_from_http_to_Q+0xce>
 8012f44:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012f48:	f7fd f9aa 	bl	80102a0 <strlen>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b20      	cmp	r3, #32
 8012f50:	d807      	bhi.n	8012f62 <param_from_http_to_Q+0xde>
				strcpy(MQTT_params.login, buf);
 8012f52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012f56:	3384      	adds	r3, #132	; 0x84
 8012f58:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f01a fdea 	bl	802db36 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 8012f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f6a:	497c      	ldr	r1, [pc, #496]	; (801315c <param_from_http_to_Q+0x2d8>)
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	f00b fc05 	bl	801e77c <get_http_param_value>
 8012f72:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8012f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d106      	bne.n	8012f8c <param_from_http_to_Q+0x108>
 8012f7e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012f82:	f7fd f98d 	bl	80102a0 <strlen>
 8012f86:	4603      	mov	r3, r0
 8012f88:	2b20      	cmp	r3, #32
 8012f8a:	d807      	bhi.n	8012f9c <param_from_http_to_Q+0x118>
				strcpy(MQTT_params.pass, buf);
 8012f8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012f90:	33a5      	adds	r3, #165	; 0xa5
 8012f92:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012f96:	4618      	mov	r0, r3
 8012f98:	f01a fdcd 	bl	802db36 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 8012f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fa4:	496e      	ldr	r1, [pc, #440]	; (8013160 <param_from_http_to_Q+0x2dc>)
 8012fa6:	6818      	ldr	r0, [r3, #0]
 8012fa8:	f00b fbe8 	bl	801e77c <get_http_param_value>
 8012fac:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 8012fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d106      	bne.n	8012fc6 <param_from_http_to_Q+0x142>
 8012fb8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012fbc:	f7fd f970 	bl	80102a0 <strlen>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8012fc4:	d808      	bhi.n	8012fd8 <param_from_http_to_Q+0x154>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 8012fc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012fca:	3302      	adds	r3, #2
 8012fcc:	227f      	movs	r2, #127	; 0x7f
 8012fce:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f01a fc3c 	bl	802d850 <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8012fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fe0:	4960      	ldr	r1, [pc, #384]	; (8013164 <param_from_http_to_Q+0x2e0>)
 8012fe2:	6818      	ldr	r0, [r3, #0]
 8012fe4:	f00b fbca 	bl	801e77c <get_http_param_value>
 8012fe8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8012fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d106      	bne.n	8013002 <param_from_http_to_Q+0x17e>
 8012ff4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012ff8:	f7fd f952 	bl	80102a0 <strlen>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b05      	cmp	r3, #5
 8013000:	d81e      	bhi.n	8013040 <param_from_http_to_Q+0x1bc>
				sscanf(buf, "%d", &port);
 8013002:	f107 0316 	add.w	r3, r7, #22
 8013006:	461a      	mov	r2, r3
 8013008:	4957      	ldr	r1, [pc, #348]	; (8013168 <param_from_http_to_Q+0x2e4>)
 801300a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801300e:	f01a fa95 	bl	802d53c <siscanf>
				if ((port > 0) && (port < 65535)){
 8013012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013016:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 801301a:	881b      	ldrh	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00f      	beq.n	8013040 <param_from_http_to_Q+0x1bc>
 8013020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013024:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8013028:	881b      	ldrh	r3, [r3, #0]
 801302a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801302e:	4293      	cmp	r3, r2
 8013030:	d006      	beq.n	8013040 <param_from_http_to_Q+0x1bc>
					MQTT_params.port = port;
 8013032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013036:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 801303a:	881b      	ldrh	r3, [r3, #0]
 801303c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 8013040:	2301      	movs	r3, #1
 8013042:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8013046:	4b49      	ldr	r3, [pc, #292]	; (801316c <param_from_http_to_Q+0x2e8>)
 8013048:	6818      	ldr	r0, [r3, #0]
 801304a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 801304e:	2302      	movs	r3, #2
 8013050:	2200      	movs	r2, #0
 8013052:	f00d fd49 	bl	8020ae8 <xQueueGenericSend>

			break;
 8013056:	e078      	b.n	801314a <param_from_http_to_Q+0x2c6>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8013058:	f107 031c 	add.w	r3, r7, #28
 801305c:	2202      	movs	r2, #2
 801305e:	2100      	movs	r1, #0
 8013060:	4618      	mov	r0, r3
 8013062:	f01a fb9b 	bl	802d79c <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 8013066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801306a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801306e:	4940      	ldr	r1, [pc, #256]	; (8013170 <param_from_http_to_Q+0x2ec>)
 8013070:	6818      	ldr	r0, [r3, #0]
 8013072:	f00b fb83 	bl	801e77c <get_http_param_value>
 8013076:	4603      	mov	r3, r0
 8013078:	2131      	movs	r1, #49	; 0x31
 801307a:	4618      	mov	r0, r3
 801307c:	f01a fba5 	bl	802d7ca <strchr>
 8013080:	4603      	mov	r3, r0
 8013082:	2b00      	cmp	r3, #0
 8013084:	d006      	beq.n	8013094 <param_from_http_to_Q+0x210>
				ModBusTCP_parameters.enable = 1;
 8013086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801308a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801308e:	2201      	movs	r2, #1
 8013090:	705a      	strb	r2, [r3, #1]
 8013092:	e015      	b.n	80130c0 <param_from_http_to_Q+0x23c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 8013094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801309c:	4934      	ldr	r1, [pc, #208]	; (8013170 <param_from_http_to_Q+0x2ec>)
 801309e:	6818      	ldr	r0, [r3, #0]
 80130a0:	f00b fb6c 	bl	801e77c <get_http_param_value>
 80130a4:	4603      	mov	r3, r0
 80130a6:	2130      	movs	r1, #48	; 0x30
 80130a8:	4618      	mov	r0, r3
 80130aa:	f01a fb8e 	bl	802d7ca <strchr>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d005      	beq.n	80130c0 <param_from_http_to_Q+0x23c>
				ModBusTCP_parameters.enable = 0;
 80130b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130bc:	2200      	movs	r2, #0
 80130be:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 80130c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130c8:	2201      	movs	r2, #1
 80130ca:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 80130cc:	4b29      	ldr	r3, [pc, #164]	; (8013174 <param_from_http_to_Q+0x2f0>)
 80130ce:	6818      	ldr	r0, [r3, #0]
 80130d0:	f107 011c 	add.w	r1, r7, #28
 80130d4:	2302      	movs	r3, #2
 80130d6:	2200      	movs	r2, #0
 80130d8:	f00d fd06 	bl	8020ae8 <xQueueGenericSend>
			break;
 80130dc:	e035      	b.n	801314a <param_from_http_to_Q+0x2c6>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 80130de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130e6:	4924      	ldr	r1, [pc, #144]	; (8013178 <param_from_http_to_Q+0x2f4>)
 80130e8:	6818      	ldr	r0, [r3, #0]
 80130ea:	f00b fb47 	bl	801e77c <get_http_param_value>
 80130ee:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 80130f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d026      	beq.n	8013148 <param_from_http_to_Q+0x2c4>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 80130fa:	4a20      	ldr	r2, [pc, #128]	; (801317c <param_from_http_to_Q+0x2f8>)
 80130fc:	4920      	ldr	r1, [pc, #128]	; (8013180 <param_from_http_to_Q+0x2fc>)
 80130fe:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013102:	f01a fa1b 	bl	802d53c <siscanf>
				if (float_temp > 0){									//validate value
 8013106:	4b1d      	ldr	r3, [pc, #116]	; (801317c <param_from_http_to_Q+0x2f8>)
 8013108:	edd3 7a00 	vldr	s15, [r3]
 801310c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013114:	dc00      	bgt.n	8013118 <param_from_http_to_Q+0x294>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 8013116:	e017      	b.n	8013148 <param_from_http_to_Q+0x2c4>
					PowShunSett.resistance = float_temp;
 8013118:	4b18      	ldr	r3, [pc, #96]	; (801317c <param_from_http_to_Q+0x2f8>)
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013120:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013124:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 8013126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801312a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801312e:	2201      	movs	r2, #1
 8013130:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 8013132:	4b14      	ldr	r3, [pc, #80]	; (8013184 <param_from_http_to_Q+0x300>)
 8013134:	6818      	ldr	r0, [r3, #0]
 8013136:	f107 010c 	add.w	r1, r7, #12
 801313a:	2302      	movs	r3, #2
 801313c:	2200      	movs	r2, #0
 801313e:	f00d fcd3 	bl	8020ae8 <xQueueGenericSend>
			break;
 8013142:	e001      	b.n	8013148 <param_from_http_to_Q+0x2c4>
		default:
			break;
 8013144:	bf00      	nop
 8013146:	e000      	b.n	801314a <param_from_http_to_Q+0x2c6>
			break;
 8013148:	bf00      	nop
	}
}
 801314a:	bf00      	nop
 801314c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	08032540 	.word	0x08032540
 8013158:	08032548 	.word	0x08032548
 801315c:	08032550 	.word	0x08032550
 8013160:	0803255c 	.word	0x0803255c
 8013164:	08032560 	.word	0x08032560
 8013168:	08032568 	.word	0x08032568
 801316c:	200004e8 	.word	0x200004e8
 8013170:	0803256c 	.word	0x0803256c
 8013174:	200004f0 	.word	0x200004f0
 8013178:	08032574 	.word	0x08032574
 801317c:	20000500 	.word	0x20000500
 8013180:	0803257c 	.word	0x0803257c
 8013184:	200004f8 	.word	0x200004f8

08013188 <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 8013188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8013190:	af0a      	add	r7, sp, #40	; 0x28
 8013192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013196:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801319a:	6018      	str	r0, [r3, #0]
 801319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131a0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131aa:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 80131ae:	460a      	mov	r2, r1
 80131b0:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 80131b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131b6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80131ba:	4a73      	ldr	r2, [pc, #460]	; (8013388 <param_from_Q_to_JSON+0x200>)
 80131bc:	4618      	mov	r0, r3
 80131be:	4611      	mov	r1, r2
 80131c0:	2351      	movs	r3, #81	; 0x51
 80131c2:	461a      	mov	r2, r3
 80131c4:	f01a fcbf 	bl	802db46 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 80131c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131cc:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80131d0:	4a6e      	ldr	r2, [pc, #440]	; (801338c <param_from_Q_to_JSON+0x204>)
 80131d2:	4618      	mov	r0, r3
 80131d4:	4611      	mov	r1, r2
 80131d6:	2384      	movs	r3, #132	; 0x84
 80131d8:	461a      	mov	r2, r3
 80131da:	f01a fcb4 	bl	802db46 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 80131de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80131e6:	4a6a      	ldr	r2, [pc, #424]	; (8013390 <param_from_Q_to_JSON+0x208>)
 80131e8:	461c      	mov	r4, r3
 80131ea:	4615      	mov	r5, r2
 80131ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131f0:	682b      	ldr	r3, [r5, #0]
 80131f2:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 80131f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131f8:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	2b04      	cmp	r3, #4
 8013200:	f000 8093 	beq.w	801332a <param_from_Q_to_JSON+0x1a2>
 8013204:	2b04      	cmp	r3, #4
 8013206:	f300 80b8 	bgt.w	801337a <param_from_Q_to_JSON+0x1f2>
 801320a:	2b00      	cmp	r3, #0
 801320c:	d002      	beq.n	8013214 <param_from_Q_to_JSON+0x8c>
 801320e:	2b03      	cmp	r3, #3
 8013210:	d031      	beq.n	8013276 <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 8013212:	e0b2      	b.n	801337a <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8013214:	4b5f      	ldr	r3, [pc, #380]	; (8013394 <param_from_Q_to_JSON+0x20c>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801321c:	2200      	movs	r2, #0
 801321e:	4618      	mov	r0, r3
 8013220:	f00d ffe8 	bl	80211f4 <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8013224:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 8013228:	461d      	mov	r5, r3
 801322a:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 801322e:	461e      	mov	r6, r3
 8013230:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013234:	1c9c      	adds	r4, r3, #2
 8013236:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801323a:	f103 0284 	add.w	r2, r3, #132	; 0x84
 801323e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8013242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013246:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 801324a:	9601      	str	r6, [sp, #4]
 801324c:	9500      	str	r5, [sp, #0]
 801324e:	4623      	mov	r3, r4
 8013250:	6800      	ldr	r0, [r0, #0]
 8013252:	f01a f953 	bl	802d4fc <siprintf>
			*len = strlen(buf);
 8013256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801325a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801325e:	6818      	ldr	r0, [r3, #0]
 8013260:	f7fd f81e 	bl	80102a0 <strlen>
 8013264:	4603      	mov	r3, r0
 8013266:	b29a      	uxth	r2, r3
 8013268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801326c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	801a      	strh	r2, [r3, #0]
			break;
 8013274:	e082      	b.n	801337c <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 8013276:	4b48      	ldr	r3, [pc, #288]	; (8013398 <param_from_Q_to_JSON+0x210>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f507 718a 	add.w	r1, r7, #276	; 0x114
 801327e:	2200      	movs	r2, #0
 8013280:	4618      	mov	r0, r3
 8013282:	f00d ffb7 	bl	80211f4 <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 8013286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801328a:	4618      	mov	r0, r3
 801328c:	f7fd f974 	bl	8010578 <__aeabi_f2d>
 8013290:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8013294:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013298:	4618      	mov	r0, r3
 801329a:	f7fd f96d 	bl	8010578 <__aeabi_f2d>
 801329e:	4604      	mov	r4, r0
 80132a0:	460d      	mov	r5, r1
 80132a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fd f966 	bl	8010578 <__aeabi_f2d>
 80132ac:	4680      	mov	r8, r0
 80132ae:	4689      	mov	r9, r1
 80132b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7fd f95f 	bl	8010578 <__aeabi_f2d>
 80132ba:	4682      	mov	sl, r0
 80132bc:	468b      	mov	fp, r1
 80132be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fd f958 	bl	8010578 <__aeabi_f2d>
 80132c8:	e9c7 0100 	strd	r0, r1, [r7]
 80132cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fd f951 	bl	8010578 <__aeabi_f2d>
 80132d6:	4602      	mov	r2, r0
 80132d8:	460b      	mov	r3, r1
 80132da:	f107 0634 	add.w	r6, r7, #52	; 0x34
 80132de:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80132e2:	f5a1 70f2 	sub.w	r0, r1, #484	; 0x1e4
 80132e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80132ea:	ed97 7b00 	vldr	d7, [r7]
 80132ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132f2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80132f6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80132fa:	e9cd 4500 	strd	r4, r5, [sp]
 80132fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013302:	4631      	mov	r1, r6
 8013304:	6800      	ldr	r0, [r0, #0]
 8013306:	f01a f8f9 	bl	802d4fc <siprintf>
			*len = strlen(buf);
 801330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801330e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013312:	6818      	ldr	r0, [r3, #0]
 8013314:	f7fc ffc4 	bl	80102a0 <strlen>
 8013318:	4603      	mov	r3, r0
 801331a:	b29a      	uxth	r2, r3
 801331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013320:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	801a      	strh	r2, [r3, #0]
			break;
 8013328:	e028      	b.n	801337c <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 801332a:	4b1c      	ldr	r3, [pc, #112]	; (801339c <param_from_Q_to_JSON+0x214>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8013332:	2200      	movs	r2, #0
 8013334:	4618      	mov	r0, r3
 8013336:	f00d ff5d 	bl	80211f4 <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 801333a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801333e:	4618      	mov	r0, r3
 8013340:	f7fd f91a 	bl	8010578 <__aeabi_f2d>
 8013344:	4602      	mov	r2, r0
 8013346:	460b      	mov	r3, r1
 8013348:	f107 0120 	add.w	r1, r7, #32
 801334c:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8013350:	f5a0 70f2 	sub.w	r0, r0, #484	; 0x1e4
 8013354:	6800      	ldr	r0, [r0, #0]
 8013356:	f01a f8d1 	bl	802d4fc <siprintf>
			*len = strlen(buf);
 801335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801335e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013362:	6818      	ldr	r0, [r3, #0]
 8013364:	f7fc ff9c 	bl	80102a0 <strlen>
 8013368:	4603      	mov	r3, r0
 801336a:	b29a      	uxth	r2, r3
 801336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013370:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	801a      	strh	r2, [r3, #0]
			break;
 8013378:	e000      	b.n	801337c <param_from_Q_to_JSON+0x1f4>
			break;
 801337a:	bf00      	nop
	}
}
 801337c:	bf00      	nop
 801337e:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8013382:	46bd      	mov	sp, r7
 8013384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013388:	08032580 	.word	0x08032580
 801338c:	080325d4 	.word	0x080325d4
 8013390:	08032658 	.word	0x08032658
 8013394:	200004e8 	.word	0x200004e8
 8013398:	200004f4 	.word	0x200004f4
 801339c:	200004f8 	.word	0x200004f8

080133a0 <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 80133a0:	b590      	push	{r4, r7, lr}
 80133a2:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80133a6:	af02      	add	r7, sp, #8
 80133a8:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 80133ac:	f5a4 7439 	sub.w	r4, r4, #740	; 0x2e4
 80133b0:	6020      	str	r0, [r4, #0]
 80133b2:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80133b6:	f5a0 703a 	sub.w	r0, r0, #744	; 0x2e8
 80133ba:	6001      	str	r1, [r0, #0]
 80133bc:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80133c0:	f5a1 713b 	sub.w	r1, r1, #748	; 0x2ec
 80133c4:	600a      	str	r2, [r1, #0]
 80133c6:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80133ca:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 80133ce:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 80133d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80133d4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 80133d8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80133dc:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80133e0:	49ac      	ldr	r1, [pc, #688]	; (8013694 <write_to_file+0x2f4>)
 80133e2:	6818      	ldr	r0, [r3, #0]
 80133e4:	f00b f9ca 	bl	801e77c <get_http_param_value>
 80133e8:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 80133ec:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d025      	beq.n	8013440 <write_to_file+0xa0>
		strcpy(filename, base_path);
 80133f4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80133f8:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80133fc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013400:	6819      	ldr	r1, [r3, #0]
 8013402:	4610      	mov	r0, r2
 8013404:	f01a fb97 	bl	802db36 <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 8013408:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801340c:	222d      	movs	r2, #45	; 0x2d
 801340e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8013412:	4618      	mov	r0, r3
 8013414:	f01a f9f7 	bl	802d806 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 8013418:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801341c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013420:	499d      	ldr	r1, [pc, #628]	; (8013698 <write_to_file+0x2f8>)
 8013422:	6818      	ldr	r0, [r3, #0]
 8013424:	f00b f9aa 	bl	801e77c <get_http_param_value>
 8013428:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 801342c:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013430:	f7fc ff36 	bl	80102a0 <strlen>
 8013434:	4603      	mov	r3, r0
 8013436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801343a:	f080 8113 	bcs.w	8013664 <write_to_file+0x2c4>
 801343e:	e011      	b.n	8013464 <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 8013440:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013444:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	4a94      	ldr	r2, [pc, #592]	; (801369c <write_to_file+0x2fc>)
 801344c:	6810      	ldr	r0, [r2, #0]
 801344e:	6018      	str	r0, [r3, #0]
 8013450:	8892      	ldrh	r2, [r2, #4]
 8013452:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013454:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013458:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	2205      	movs	r2, #5
 8013460:	801a      	strh	r2, [r3, #0]
		return;
 8013462:	e111      	b.n	8013688 <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 8013464:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013468:	2b00      	cmp	r3, #0
 801346a:	f000 80e9 	beq.w	8013640 <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 801346e:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013472:	f7fc ff15 	bl	80102a0 <strlen>
 8013476:	4603      	mov	r3, r0
 8013478:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 801347c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8013480:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8013484:	9300      	str	r3, [sp, #0]
 8013486:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801348a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801348e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013492:	f017 fe11 	bl	802b0b8 <mbedtls_base64_decode>
 8013496:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 801349a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801349e:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80134a2:	497f      	ldr	r1, [pc, #508]	; (80136a0 <write_to_file+0x300>)
 80134a4:	6818      	ldr	r0, [r3, #0]
 80134a6:	f00b f969 	bl	801e77c <get_http_param_value>
 80134aa:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 80134ae:	2300      	movs	r3, #0
 80134b0:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80134b4:	e030      	b.n	8013518 <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 80134b6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80134ba:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80134be:	4413      	add	r3, r2
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7ff fc63 	bl	8012d8e <CharToDec>
 80134c8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 80134cc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80134d0:	3301      	adds	r3, #1
 80134d2:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80134d6:	4413      	add	r3, r2
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	4618      	mov	r0, r3
 80134dc:	f7ff fc57 	bl	8012d8e <CharToDec>
 80134e0:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 80134e4:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80134e8:	011b      	lsls	r3, r3, #4
 80134ea:	b25a      	sxtb	r2, r3
 80134ec:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80134f0:	b25b      	sxtb	r3, r3
 80134f2:	4313      	orrs	r3, r2
 80134f4:	b259      	sxtb	r1, r3
 80134f6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80134fa:	0fda      	lsrs	r2, r3, #31
 80134fc:	4413      	add	r3, r2
 80134fe:	105b      	asrs	r3, r3, #1
 8013500:	461a      	mov	r2, r3
 8013502:	b2c9      	uxtb	r1, r1
 8013504:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013508:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801350c:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 801350e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013512:	3302      	adds	r3, #2
 8013514:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8013518:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801351c:	2b1f      	cmp	r3, #31
 801351e:	ddca      	ble.n	80134b6 <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 8013520:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013524:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013528:	2200      	movs	r2, #0
 801352a:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 801352c:	f107 0310 	add.w	r3, r7, #16
 8013530:	4618      	mov	r0, r3
 8013532:	f017 fedd 	bl	802b2f0 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 8013536:	f107 0310 	add.w	r3, r7, #16
 801353a:	4618      	mov	r0, r3
 801353c:	f017 fef6 	bl	802b32c <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 8013540:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801354a:	f107 0310 	add.w	r3, r7, #16
 801354e:	4618      	mov	r0, r3
 8013550:	f018 fdd6 	bl	802c100 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 8013554:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8013558:	f107 0310 	add.w	r3, r7, #16
 801355c:	4611      	mov	r1, r2
 801355e:	4618      	mov	r0, r3
 8013560:	f018 fe43 	bl	802c1ea <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 8013564:	f107 0310 	add.w	r3, r7, #16
 8013568:	4618      	mov	r0, r3
 801356a:	f017 fece 	bl	802b30a <mbedtls_md5_free>
		output[16] = '\0';
 801356e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013572:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8013576:	2200      	movs	r2, #0
 8013578:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 801357a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801357e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013582:	2210      	movs	r2, #16
 8013584:	4618      	mov	r0, r3
 8013586:	f01a f951 	bl	802d82c <strncmp>
 801358a:	4603      	mov	r3, r0
 801358c:	2b00      	cmp	r3, #0
 801358e:	d006      	beq.n	801359e <write_to_file+0x1fe>
			err = -1;
 8013590:	f04f 33ff 	mov.w	r3, #4294967295
 8013594:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 8013598:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801359c:	e074      	b.n	8013688 <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 801359e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80135a2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80135a6:	493f      	ldr	r1, [pc, #252]	; (80136a4 <write_to_file+0x304>)
 80135a8:	6818      	ldr	r0, [r3, #0]
 80135aa:	f00b f8e7 	bl	801e77c <get_http_param_value>
 80135ae:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 80135b2:	210a      	movs	r1, #10
 80135b4:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80135b8:	f00b f992 	bl	801e8e0 <ATOI>
 80135bc:	4603      	mov	r3, r0
 80135be:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 80135c2:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d10f      	bne.n	80135ea <write_to_file+0x24a>
			part =0;
 80135ca:	4b37      	ldr	r3, [pc, #220]	; (80136a8 <write_to_file+0x308>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 80135d0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80135da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80135de:	4618      	mov	r0, r3
 80135e0:	f017 fb98 	bl	802ad14 <spi_fs_over_write_file>
 80135e4:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 80135e8:	e01d      	b.n	8013626 <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 80135ea:	210a      	movs	r1, #10
 80135ec:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80135f0:	f00b f976 	bl	801e8e0 <ATOI>
 80135f4:	4603      	mov	r3, r0
 80135f6:	461a      	mov	r2, r3
 80135f8:	4b2b      	ldr	r3, [pc, #172]	; (80136a8 <write_to_file+0x308>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d006      	beq.n	801360e <write_to_file+0x26e>
				err = -1;
 8013600:	f04f 33ff 	mov.w	r3, #4294967295
 8013604:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 8013608:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801360c:	e03c      	b.n	8013688 <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 801360e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8013618:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801361c:	4618      	mov	r0, r3
 801361e:	f017 fbd5 	bl	802adcc <spi_fs_write_file_to_end>
 8013622:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 8013626:	4b20      	ldr	r3, [pc, #128]	; (80136a8 <write_to_file+0x308>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	3301      	adds	r3, #1
 801362c:	4a1e      	ldr	r2, [pc, #120]	; (80136a8 <write_to_file+0x308>)
 801362e:	6013      	str	r3, [r2, #0]

		if (err < 0){
 8013630:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013634:	2b00      	cmp	r3, #0
 8013636:	da15      	bge.n	8013664 <write_to_file+0x2c4>
			err = 0;
 8013638:	2300      	movs	r3, #0
 801363a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801363e:	e011      	b.n	8013664 <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 8013640:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013644:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	4a14      	ldr	r2, [pc, #80]	; (801369c <write_to_file+0x2fc>)
 801364c:	6810      	ldr	r0, [r2, #0]
 801364e:	6018      	str	r0, [r3, #0]
 8013650:	8892      	ldrh	r2, [r2, #4]
 8013652:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013654:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013658:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2205      	movs	r2, #5
 8013660:	801a      	strh	r2, [r3, #0]
		return;
 8013662:	e011      	b.n	8013688 <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 8013664:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013668:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4a0f      	ldr	r2, [pc, #60]	; (80136ac <write_to_file+0x30c>)
 8013670:	8811      	ldrh	r1, [r2, #0]
 8013672:	7892      	ldrb	r2, [r2, #2]
 8013674:	8019      	strh	r1, [r3, #0]
 8013676:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 8013678:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801367c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	2202      	movs	r2, #2
 8013684:	801a      	strh	r2, [r3, #0]
}
 8013686:	e7ff      	b.n	8013688 <write_to_file+0x2e8>
 8013688:	4618      	mov	r0, r3
 801368a:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 801368e:	46bd      	mov	sp, r7
 8013690:	bd90      	pop	{r4, r7, pc}
 8013692:	bf00      	nop
 8013694:	0803266c 	.word	0x0803266c
 8013698:	08032680 	.word	0x08032680
 801369c:	08032678 	.word	0x08032678
 80136a0:	08032688 	.word	0x08032688
 80136a4:	08032690 	.word	0x08032690
 80136a8:	20000504 	.word	0x20000504
 80136ac:	08032698 	.word	0x08032698

080136b0 <web_mkdir>:

int8_t web_mkdir(char * buf, char * base_path){
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b092      	sub	sp, #72	; 0x48
 80136b4:	af02      	add	r7, sp, #8
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]

	char * dirname;
	char tmp[MAX_CONTENT_NAME_LEN];

	dirname = get_http_param_value((char *)buf, "dirname");
 80136ba:	4912      	ldr	r1, [pc, #72]	; (8013704 <web_mkdir+0x54>)
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f00b f85d 	bl	801e77c <get_http_param_value>
 80136c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (dirname != 0 || (strlen(dirname) < MAX_CONTENT_NAME_LEN - 5)) //TODO add dirname validation
 80136c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d105      	bne.n	80136d6 <web_mkdir+0x26>
 80136ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80136cc:	f7fc fde8 	bl	80102a0 <strlen>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b2c      	cmp	r3, #44	; 0x2c
 80136d4:	d810      	bhi.n	80136f8 <web_mkdir+0x48>
		{
			snprintf(tmp, sizeof(tmp), "%s%s", base_path, dirname);
 80136d6:	f107 0008 	add.w	r0, r7, #8
 80136da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136dc:	9300      	str	r3, [sp, #0]
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	4a09      	ldr	r2, [pc, #36]	; (8013708 <web_mkdir+0x58>)
 80136e2:	2132      	movs	r1, #50	; 0x32
 80136e4:	f019 fed6 	bl	802d494 <sniprintf>
			return (spi_fs_mkdir(tmp));
 80136e8:	f107 0308 	add.w	r3, r7, #8
 80136ec:	4618      	mov	r0, r3
 80136ee:	f017 fbc5 	bl	802ae7c <spi_fs_mkdir>
 80136f2:	4603      	mov	r3, r0
 80136f4:	b25b      	sxtb	r3, r3
 80136f6:	e001      	b.n	80136fc <web_mkdir+0x4c>
		}
	return -1;
 80136f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3740      	adds	r7, #64	; 0x40
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	0803269c 	.word	0x0803269c
 8013708:	080326a4 	.word	0x080326a4

0801370c <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 801370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8013714:	af16      	add	r7, sp, #88	; 0x58
 8013716:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801371a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801371e:	6018      	str	r0, [r3, #0]
 8013720:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013724:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013728:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 801372a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801372e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8013732:	4a5d      	ldr	r2, [pc, #372]	; (80138a8 <read_all_parameters+0x19c>)
 8013734:	4618      	mov	r0, r3
 8013736:	4611      	mov	r1, r2
 8013738:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801373c:	461a      	mov	r2, r3
 801373e:	f01a fa02 	bl	802db46 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 8013742:	4b5a      	ldr	r3, [pc, #360]	; (80138ac <read_all_parameters+0x1a0>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 801374a:	2200      	movs	r2, #0
 801374c:	4618      	mov	r0, r3
 801374e:	f00d fd51 	bl	80211f4 <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 8013752:	4b57      	ldr	r3, [pc, #348]	; (80138b0 <read_all_parameters+0x1a4>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	f507 7111 	add.w	r1, r7, #580	; 0x244
 801375a:	2200      	movs	r2, #0
 801375c:	4618      	mov	r0, r3
 801375e:	f00d fd49 	bl	80211f4 <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 8013762:	4b54      	ldr	r3, [pc, #336]	; (80138b4 <read_all_parameters+0x1a8>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 801376a:	2200      	movs	r2, #0
 801376c:	4618      	mov	r0, r3
 801376e:	f00d fd41 	bl	80211f4 <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 8013772:	4b51      	ldr	r3, [pc, #324]	; (80138b8 <read_all_parameters+0x1ac>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801377a:	2200      	movs	r2, #0
 801377c:	4618      	mov	r0, r3
 801377e:	f00d fd39 	bl	80211f4 <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 8013782:	4b4e      	ldr	r3, [pc, #312]	; (80138bc <read_all_parameters+0x1b0>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 801378a:	2200      	movs	r2, #0
 801378c:	4618      	mov	r0, r3
 801378e:	f00d fd31 	bl	80211f4 <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 8013792:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013796:	4618      	mov	r0, r3
 8013798:	f7fc feee 	bl	8010578 <__aeabi_f2d>
 801379c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80137a0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7fc fee7 	bl	8010578 <__aeabi_f2d>
 80137aa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80137ae:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fc fee0 	bl	8010578 <__aeabi_f2d>
 80137b8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80137bc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7fc fed9 	bl	8010578 <__aeabi_f2d>
 80137c6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80137ca:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fc fed2 	bl	8010578 <__aeabi_f2d>
 80137d4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80137d8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fc fecb 	bl	8010578 <__aeabi_f2d>
 80137e2:	4682      	mov	sl, r0
 80137e4:	468b      	mov	fp, r1
 80137e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7fc fec4 	bl	8010578 <__aeabi_f2d>
 80137f0:	4680      	mov	r8, r0
 80137f2:	4689      	mov	r9, r1
 80137f4:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80137f8:	60fb      	str	r3, [r7, #12]
 80137fa:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80137fe:	60bb      	str	r3, [r7, #8]
 8013800:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8013804:	607b      	str	r3, [r7, #4]
 8013806:	f8d7 4264 	ldr.w	r4, [r7, #612]	; 0x264
 801380a:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 801380e:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8013812:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8013816:	f107 0644 	add.w	r6, r7, #68	; 0x44
 801381a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801381e:	f5a3 750d 	sub.w	r5, r3, #564	; 0x234
 8013822:	9214      	str	r2, [sp, #80]	; 0x50
 8013824:	9113      	str	r1, [sp, #76]	; 0x4c
 8013826:	9012      	str	r0, [sp, #72]	; 0x48
 8013828:	9411      	str	r4, [sp, #68]	; 0x44
 801382a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801382e:	3302      	adds	r3, #2
 8013830:	9310      	str	r3, [sp, #64]	; 0x40
 8013832:	6879      	ldr	r1, [r7, #4]
 8013834:	910f      	str	r1, [sp, #60]	; 0x3c
 8013836:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801383a:	3384      	adds	r3, #132	; 0x84
 801383c:	930e      	str	r3, [sp, #56]	; 0x38
 801383e:	68b9      	ldr	r1, [r7, #8]
 8013840:	910d      	str	r1, [sp, #52]	; 0x34
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	930c      	str	r3, [sp, #48]	; 0x30
 8013846:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801384a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801384e:	ed97 7b04 	vldr	d7, [r7, #16]
 8013852:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013856:	ed97 7b06 	vldr	d7, [r7, #24]
 801385a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801385e:	ed97 7b08 	vldr	d7, [r7, #32]
 8013862:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013866:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801386a:	ed8d 7b00 	vstr	d7, [sp]
 801386e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013872:	4631      	mov	r1, r6
 8013874:	6828      	ldr	r0, [r5, #0]
 8013876:	f019 fe41 	bl	802d4fc <siprintf>
	*len = strlen(buf);
 801387a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801387e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013882:	6818      	ldr	r0, [r3, #0]
 8013884:	f7fc fd0c 	bl	80102a0 <strlen>
 8013888:	4603      	mov	r3, r0
 801388a:	b29a      	uxth	r2, r3
 801388c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013890:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	801a      	strh	r2, [r3, #0]

	return 0 ;
 8013898:	2300      	movs	r3, #0
}
 801389a:	4618      	mov	r0, r3
 801389c:	f507 771d 	add.w	r7, r7, #628	; 0x274
 80138a0:	46bd      	mov	sp, r7
 80138a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a6:	bf00      	nop
 80138a8:	080326ac 	.word	0x080326ac
 80138ac:	200004f4 	.word	0x200004f4
 80138b0:	200004f8 	.word	0x200004f8
 80138b4:	200004e8 	.word	0x200004e8
 80138b8:	200004f0 	.word	0x200004f0
 80138bc:	200004fc 	.word	0x200004fc

080138c0 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 80138c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138c2:	b0db      	sub	sp, #364	; 0x16c
 80138c4:	af0e      	add	r7, sp, #56	; 0x38
 80138c6:	6378      	str	r0, [r7, #52]	; 0x34
 80138c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80138cc:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 80138d0:	6001      	str	r1, [r0, #0]
 80138d2:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80138d6:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 80138da:	600a      	str	r2, [r1, #0]
 80138dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80138e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80138e4:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 80138ec:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80138f0:	4618      	mov	r0, r3
 80138f2:	f017 fcfd 	bl	802b2f0 <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 80138f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80138fa:	4618      	mov	r0, r3
 80138fc:	f017 fd16 	bl	802b32c <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013900:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013906:	4618      	mov	r0, r3
 8013908:	f01a f915 	bl	802db36 <strcpy>
	strncat(path, filename, 20);
 801390c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013910:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013914:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013918:	2214      	movs	r2, #20
 801391a:	6819      	ldr	r1, [r3, #0]
 801391c:	f019 ff73 	bl	802d806 <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013920:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013924:	2241      	movs	r2, #65	; 0x41
 8013926:	2100      	movs	r1, #0
 8013928:	4618      	mov	r0, r3
 801392a:	f019 ff37 	bl	802d79c <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 801392e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013932:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013936:	2340      	movs	r3, #64	; 0x40
 8013938:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801393c:	f017 f9a6 	bl	802ac8c <spi_fs_read_file_offset>
 8013940:	4603      	mov	r3, r0
 8013942:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 8013946:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 801394a:	2b40      	cmp	r3, #64	; 0x40
 801394c:	d110      	bne.n	8013970 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 801394e:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013952:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013956:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801395a:	4618      	mov	r0, r3
 801395c:	f018 fbd0 	bl	802c100 <mbedtls_md5_update_ret>
				offset += readed_len;
 8013960:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013964:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013968:	4413      	add	r3, r2
 801396a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801396e:	e019      	b.n	80139a4 <calculate_md5_file+0xe4>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013970:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013974:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013978:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801397c:	4618      	mov	r0, r3
 801397e:	f018 fbbf 	bl	802c100 <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 8013982:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8013986:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801398a:	4611      	mov	r1, r2
 801398c:	4618      	mov	r0, r3
 801398e:	f018 fc2c 	bl	802c1ea <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 8013992:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013996:	4618      	mov	r0, r3
 8013998:	f017 fcb7 	bl	802b30a <mbedtls_md5_free>
				md5sum[16] = '\0';
 801399c:	2300      	movs	r3, #0
 801399e:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				break;
 80139a2:	e002      	b.n	80139aa <calculate_md5_file+0xea>
			}
		}
		osThreadYield();
 80139a4:	f00c fb2a 	bl	801fffc <osThreadYield>
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 80139a8:	e7ba      	b.n	8013920 <calculate_md5_file+0x60>
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 80139aa:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80139ae:	469c      	mov	ip, r3
 80139b0:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80139b4:	469e      	mov	lr, r3
 80139b6:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80139ba:	461d      	mov	r5, r3
 80139bc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80139c0:	461e      	mov	r6, r3
 80139c2:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80139c6:	627b      	str	r3, [r7, #36]	; 0x24
 80139c8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80139cc:	623b      	str	r3, [r7, #32]
 80139ce:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80139d2:	61fb      	str	r3, [r7, #28]
 80139d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80139d8:	61bb      	str	r3, [r7, #24]
 80139da:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80139de:	617b      	str	r3, [r7, #20]
 80139e0:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80139e4:	613b      	str	r3, [r7, #16]
 80139e6:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80139ea:	60fb      	str	r3, [r7, #12]
 80139ec:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80139f0:	60bb      	str	r3, [r7, #8]
 80139f2:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 80139f6:	607b      	str	r3, [r7, #4]
 80139f8:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 80139fc:	461c      	mov	r4, r3
 80139fe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013a02:	4619      	mov	r1, r3
 8013a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013a08:	461a      	mov	r2, r3
 8013a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013a0e:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8013a12:	920d      	str	r2, [sp, #52]	; 0x34
 8013a14:	910c      	str	r1, [sp, #48]	; 0x30
 8013a16:	940b      	str	r4, [sp, #44]	; 0x2c
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	920a      	str	r2, [sp, #40]	; 0x28
 8013a1c:	68ba      	ldr	r2, [r7, #8]
 8013a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	9208      	str	r2, [sp, #32]
 8013a24:	693a      	ldr	r2, [r7, #16]
 8013a26:	9207      	str	r2, [sp, #28]
 8013a28:	697a      	ldr	r2, [r7, #20]
 8013a2a:	9206      	str	r2, [sp, #24]
 8013a2c:	69ba      	ldr	r2, [r7, #24]
 8013a2e:	9205      	str	r2, [sp, #20]
 8013a30:	69fa      	ldr	r2, [r7, #28]
 8013a32:	9204      	str	r2, [sp, #16]
 8013a34:	6a3a      	ldr	r2, [r7, #32]
 8013a36:	9203      	str	r2, [sp, #12]
 8013a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3a:	9302      	str	r3, [sp, #8]
 8013a3c:	9601      	str	r6, [sp, #4]
 8013a3e:	9500      	str	r5, [sp, #0]
 8013a40:	4673      	mov	r3, lr
 8013a42:	4662      	mov	r2, ip
 8013a44:	4908      	ldr	r1, [pc, #32]	; (8013a68 <calculate_md5_file+0x1a8>)
 8013a46:	6800      	ldr	r0, [r0, #0]
 8013a48:	f019 fd58 	bl	802d4fc <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 8013a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2220      	movs	r2, #32
 8013a58:	801a      	strh	r2, [r3, #0]
	return 0;
 8013a5a:	2300      	movs	r3, #0
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a66:	bf00      	nop
 8013a68:	080327dc 	.word	0x080327dc

08013a6c <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b092      	sub	sp, #72	; 0x48
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 8013a76:	f107 0308 	add.w	r3, r7, #8
 8013a7a:	4a18      	ldr	r2, [pc, #96]	; (8013adc <activate_firmware+0x70>)
 8013a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8013a7e:	c303      	stmia	r3!, {r0, r1}
 8013a80:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 8013a82:	f107 0308 	add.w	r3, r7, #8
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7fc fc0a 	bl	80102a0 <strlen>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	461a      	mov	r2, r3
 8013a90:	f107 0308 	add.w	r3, r7, #8
 8013a94:	4413      	add	r3, r2
 8013a96:	4912      	ldr	r1, [pc, #72]	; (8013ae0 <activate_firmware+0x74>)
 8013a98:	461a      	mov	r2, r3
 8013a9a:	460b      	mov	r3, r1
 8013a9c:	cb03      	ldmia	r3!, {r0, r1}
 8013a9e:	6010      	str	r0, [r2, #0]
 8013aa0:	6051      	str	r1, [r2, #4]
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 8013aa6:	f107 0308 	add.w	r3, r7, #8
 8013aaa:	490e      	ldr	r1, [pc, #56]	; (8013ae4 <activate_firmware+0x78>)
 8013aac:	4618      	mov	r0, r3
 8013aae:	f017 fae7 	bl	802b080 <spi_fs_mv>
 8013ab2:	6478      	str	r0, [r7, #68]	; 0x44

	if(err >= 0){
 8013ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	db0a      	blt.n	8013ad0 <activate_firmware+0x64>
		strcpy(buf, "OK");
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	4a0a      	ldr	r2, [pc, #40]	; (8013ae8 <activate_firmware+0x7c>)
 8013abe:	8811      	ldrh	r1, [r2, #0]
 8013ac0:	7892      	ldrb	r2, [r2, #2]
 8013ac2:	8019      	strh	r1, [r3, #0]
 8013ac4:	709a      	strb	r2, [r3, #2]
		* len = 2;
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2202      	movs	r2, #2
 8013aca:	801a      	strh	r2, [r3, #0]
		return 1;
 8013acc:	2301      	movs	r3, #1
 8013ace:	e000      	b.n	8013ad2 <activate_firmware+0x66>
	}

 	return 0;
 8013ad0:	2300      	movs	r3, #0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3748      	adds	r7, #72	; 0x48
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	08032820 	.word	0x08032820
 8013ae0:	0803282c 	.word	0x0803282c
 8013ae4:	08032838 	.word	0x08032838
 8013ae8:	08032848 	.word	0x08032848

08013aec <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b086      	sub	sp, #24
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	607a      	str	r2, [r7, #4]
 8013af8:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013afa:	2300      	movs	r3, #0
 8013afc:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013afe:	2300      	movs	r3, #0
 8013b00:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 8013b02:	4937      	ldr	r1, [pc, #220]	; (8013be0 <http_post_cgi_processor+0xf4>)
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f7fc fb6b 	bl	80101e0 <strcmp>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d106      	bne.n	8013b1e <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013b10:	2100      	movs	r1, #0
 8013b12:	68b8      	ldr	r0, [r7, #8]
 8013b14:	f7ff f9b6 	bl	8012e84 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	75fb      	strb	r3, [r7, #23]
 8013b1c:	e05a      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013b1e:	4931      	ldr	r1, [pc, #196]	; (8013be4 <http_post_cgi_processor+0xf8>)
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f7fc fb5d 	bl	80101e0 <strcmp>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d106      	bne.n	8013b3a <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013b2c:	2102      	movs	r1, #2
 8013b2e:	68b8      	ldr	r0, [r7, #8]
 8013b30:	f7ff f9a8 	bl	8012e84 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013b34:	2301      	movs	r3, #1
 8013b36:	75fb      	strb	r3, [r7, #23]
 8013b38:	e04c      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013b3a:	492b      	ldr	r1, [pc, #172]	; (8013be8 <http_post_cgi_processor+0xfc>)
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f7fc fb4f 	bl	80101e0 <strcmp>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d10e      	bne.n	8013b66 <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013b48:	4b28      	ldr	r3, [pc, #160]	; (8013bec <http_post_cgi_processor+0x100>)
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	6839      	ldr	r1, [r7, #0]
 8013b4e:	68b8      	ldr	r0, [r7, #8]
 8013b50:	f7ff fc26 	bl	80133a0 <write_to_file>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	da02      	bge.n	8013b60 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	75fb      	strb	r3, [r7, #23]
 8013b5e:	e039      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013b60:	2301      	movs	r3, #1
 8013b62:	75fb      	strb	r3, [r7, #23]
 8013b64:	e036      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
		}
	}else if (strcmp((const char *)uri_name, "web_mkdir.cgi") == 0){
 8013b66:	4922      	ldr	r1, [pc, #136]	; (8013bf0 <http_post_cgi_processor+0x104>)
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f7fc fb39 	bl	80101e0 <strcmp>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d10c      	bne.n	8013b8e <http_post_cgi_processor+0xa2>
		if( web_mkdir((char *)uri, HTTP_FS_DIR) >= 0){
 8013b74:	491d      	ldr	r1, [pc, #116]	; (8013bec <http_post_cgi_processor+0x100>)
 8013b76:	68b8      	ldr	r0, [r7, #8]
 8013b78:	f7ff fd9a 	bl	80136b0 <web_mkdir>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	db02      	blt.n	8013b88 <http_post_cgi_processor+0x9c>
			ret = HTTP_OK;
 8013b82:	2301      	movs	r3, #1
 8013b84:	75fb      	strb	r3, [r7, #23]
 8013b86:	e025      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_RESET;
 8013b88:	2302      	movs	r3, #2
 8013b8a:	75fb      	strb	r3, [r7, #23]
 8013b8c:	e022      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
		}

	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 8013b8e:	4919      	ldr	r1, [pc, #100]	; (8013bf4 <http_post_cgi_processor+0x108>)
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f7fc fb25 	bl	80101e0 <strcmp>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d106      	bne.n	8013baa <http_post_cgi_processor+0xbe>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 8013b9c:	2104      	movs	r1, #4
 8013b9e:	68b8      	ldr	r0, [r7, #8]
 8013ba0:	f7ff f970 	bl	8012e84 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	75fb      	strb	r3, [r7, #23]
 8013ba8:	e014      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 8013baa:	4913      	ldr	r1, [pc, #76]	; (8013bf8 <http_post_cgi_processor+0x10c>)
 8013bac:	68f8      	ldr	r0, [r7, #12]
 8013bae:	f7fc fb17 	bl	80101e0 <strcmp>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d10d      	bne.n	8013bd4 <http_post_cgi_processor+0xe8>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013bb8:	4b10      	ldr	r3, [pc, #64]	; (8013bfc <http_post_cgi_processor+0x110>)
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	6839      	ldr	r1, [r7, #0]
 8013bbe:	68b8      	ldr	r0, [r7, #8]
 8013bc0:	f7ff fbee 	bl	80133a0 <write_to_file>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	da02      	bge.n	8013bd0 <http_post_cgi_processor+0xe4>
			ret = HTTP_FAILED;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	75fb      	strb	r3, [r7, #23]
 8013bce:	e001      	b.n	8013bd4 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8013bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3718      	adds	r7, #24
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	0803284c 	.word	0x0803284c
 8013be4:	08032860 	.word	0x08032860
 8013be8:	08032874 	.word	0x08032874
 8013bec:	08032884 	.word	0x08032884
 8013bf0:	0803288c 	.word	0x0803288c
 8013bf4:	0803289c 	.word	0x0803289c
 8013bf8:	080328b4 	.word	0x080328b4
 8013bfc:	08032820 	.word	0x08032820

08013c00 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b086      	sub	sp, #24
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8013c10:	494f      	ldr	r1, [pc, #316]	; (8013d50 <http_get_cgi_processor+0x150>)
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f7fc fae4 	bl	80101e0 <strcmp>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d107      	bne.n	8013c2e <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	2100      	movs	r1, #0
 8013c22:	68b8      	ldr	r0, [r7, #8]
 8013c24:	f7ff fab0 	bl	8013188 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013c28:	2301      	movs	r3, #1
 8013c2a:	75fb      	strb	r3, [r7, #23]
 8013c2c:	e08b      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013c2e:	4949      	ldr	r1, [pc, #292]	; (8013d54 <http_get_cgi_processor+0x154>)
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	f7fc fad5 	bl	80101e0 <strcmp>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d10b      	bne.n	8013c54 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	4946      	ldr	r1, [pc, #280]	; (8013d58 <http_get_cgi_processor+0x158>)
 8013c40:	461a      	mov	r2, r3
 8013c42:	460b      	mov	r3, r1
 8013c44:	881b      	ldrh	r3, [r3, #0]
 8013c46:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013c48:	2301      	movs	r3, #1
 8013c4a:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2202      	movs	r2, #2
 8013c50:	801a      	strh	r2, [r3, #0]
 8013c52:	e078      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013c54:	4941      	ldr	r1, [pc, #260]	; (8013d5c <http_get_cgi_processor+0x15c>)
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f7fc fac2 	bl	80101e0 <strcmp>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d107      	bne.n	8013c72 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	2103      	movs	r1, #3
 8013c66:	68b8      	ldr	r0, [r7, #8]
 8013c68:	f7ff fa8e 	bl	8013188 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	75fb      	strb	r3, [r7, #23]
 8013c70:	e069      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013c72:	493b      	ldr	r1, [pc, #236]	; (8013d60 <http_get_cgi_processor+0x160>)
 8013c74:	68f8      	ldr	r0, [r7, #12]
 8013c76:	f7fc fab3 	bl	80101e0 <strcmp>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d107      	bne.n	8013c90 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013c80:	687a      	ldr	r2, [r7, #4]
 8013c82:	2104      	movs	r1, #4
 8013c84:	68b8      	ldr	r0, [r7, #8]
 8013c86:	f7ff fa7f 	bl	8013188 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	75fb      	strb	r3, [r7, #23]
 8013c8e:	e05a      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013c90:	4934      	ldr	r1, [pc, #208]	; (8013d64 <http_get_cgi_processor+0x164>)
 8013c92:	68f8      	ldr	r0, [r7, #12]
 8013c94:	f7fc faa4 	bl	80101e0 <strcmp>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d106      	bne.n	8013cac <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013c9e:	6879      	ldr	r1, [r7, #4]
 8013ca0:	68b8      	ldr	r0, [r7, #8]
 8013ca2:	f7ff fd33 	bl	801370c <read_all_parameters>
		ret = HTTP_OK;
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	75fb      	strb	r3, [r7, #23]
 8013caa:	e04c      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013cac:	492e      	ldr	r1, [pc, #184]	; (8013d68 <http_get_cgi_processor+0x168>)
 8013cae:	68f8      	ldr	r0, [r7, #12]
 8013cb0:	f7fc fa96 	bl	80101e0 <strcmp>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d111      	bne.n	8013cde <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	492b      	ldr	r1, [pc, #172]	; (8013d6c <http_get_cgi_processor+0x16c>)
 8013cc0:	482b      	ldr	r0, [pc, #172]	; (8013d70 <http_get_cgi_processor+0x170>)
 8013cc2:	f7ff fdfd 	bl	80138c0 <calculate_md5_file>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d102      	bne.n	8013cd2 <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	75fb      	strb	r3, [r7, #23]
 8013cd0:	e039      	b.n	8013d46 <http_get_cgi_processor+0x146>
		}else{
			* len = 0;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	75fb      	strb	r3, [r7, #23]
 8013cdc:	e033      	b.n	8013d46 <http_get_cgi_processor+0x146>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013cde:	4925      	ldr	r1, [pc, #148]	; (8013d74 <http_get_cgi_processor+0x174>)
 8013ce0:	68f8      	ldr	r0, [r7, #12]
 8013ce2:	f7fc fa7d 	bl	80101e0 <strcmp>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d106      	bne.n	8013cfa <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013cec:	6879      	ldr	r1, [r7, #4]
 8013cee:	68b8      	ldr	r0, [r7, #8]
 8013cf0:	f7ff febc 	bl	8013a6c <activate_firmware>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	75fb      	strb	r3, [r7, #23]
 8013cf8:	e025      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "erace_web_interface.cgi") == 0){
 8013cfa:	491f      	ldr	r1, [pc, #124]	; (8013d78 <http_get_cgi_processor+0x178>)
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f7fc fa6f 	bl	80101e0 <strcmp>
 8013d02:	4603      	mov	r3, r0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d105      	bne.n	8013d14 <http_get_cgi_processor+0x114>
		spi_fs_remove_recurcuve_in("/web");
 8013d08:	481c      	ldr	r0, [pc, #112]	; (8013d7c <http_get_cgi_processor+0x17c>)
 8013d0a:	f017 f999 	bl	802b040 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	75fb      	strb	r3, [r7, #23]
 8013d12:	e018      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013d14:	491a      	ldr	r1, [pc, #104]	; (8013d80 <http_get_cgi_processor+0x180>)
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f7fc fa62 	bl	80101e0 <strcmp>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d105      	bne.n	8013d2e <http_get_cgi_processor+0x12e>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013d22:	4818      	ldr	r0, [pc, #96]	; (8013d84 <http_get_cgi_processor+0x184>)
 8013d24:	f017 f8c4 	bl	802aeb0 <spi_fs_remove>
		ret = HTTP_OK;
 8013d28:	2301      	movs	r3, #1
 8013d2a:	75fb      	strb	r3, [r7, #23]
 8013d2c:	e00b      	b.n	8013d46 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013d2e:	4916      	ldr	r1, [pc, #88]	; (8013d88 <http_get_cgi_processor+0x188>)
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f7fc fa55 	bl	80101e0 <strcmp>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d104      	bne.n	8013d46 <http_get_cgi_processor+0x146>
		spi_fs_remove_recurcuve_in("/");
 8013d3c:	4813      	ldr	r0, [pc, #76]	; (8013d8c <http_get_cgi_processor+0x18c>)
 8013d3e:	f017 f97f 	bl	802b040 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013d42:	2301      	movs	r3, #1
 8013d44:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3718      	adds	r7, #24
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}
 8013d50:	080328c8 	.word	0x080328c8
 8013d54:	080328dc 	.word	0x080328dc
 8013d58:	080328e8 	.word	0x080328e8
 8013d5c:	080328ec 	.word	0x080328ec
 8013d60:	080328f8 	.word	0x080328f8
 8013d64:	0803290c 	.word	0x0803290c
 8013d68:	08032918 	.word	0x08032918
 8013d6c:	0803282c 	.word	0x0803282c
 8013d70:	08032820 	.word	0x08032820
 8013d74:	08032930 	.word	0x08032930
 8013d78:	08032948 	.word	0x08032948
 8013d7c:	08032960 	.word	0x08032960
 8013d80:	08032968 	.word	0x08032968
 8013d84:	0803297c 	.word	0x0803297c
 8013d88:	08032990 	.word	0x08032990
 8013d8c:	080329a4 	.word	0x080329a4

08013d90 <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8013d90:	b480      	push	{r7}
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	bf00      	nop
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr
	...

08013da0 <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8013da0:	b480      	push	{r7}
 8013da2:	b083      	sub	sp, #12
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d002      	beq.n	8013db6 <init_mqtt_call_mutex+0x16>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	4a07      	ldr	r2, [pc, #28]	; (8013dd0 <init_mqtt_call_mutex+0x30>)
 8013db4:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d002      	beq.n	8013dc2 <init_mqtt_call_mutex+0x22>
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	4a05      	ldr	r2, [pc, #20]	; (8013dd4 <init_mqtt_call_mutex+0x34>)
 8013dc0:	6013      	str	r3, [r2, #0]
}
 8013dc2:	bf00      	nop
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr
 8013dce:	bf00      	nop
 8013dd0:	2000005c 	.word	0x2000005c
 8013dd4:	20000060 	.word	0x20000060

08013dd8 <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8013dd8:	b5b0      	push	{r4, r5, r7, lr}
 8013dda:	b088      	sub	sp, #32
 8013ddc:	af04      	add	r7, sp, #16
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	60b9      	str	r1, [r7, #8]
 8013de2:	607a      	str	r2, [r7, #4]
 8013de4:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 8013de6:	4a5e      	ldr	r2, [pc, #376]	; (8013f60 <mqtt_client_init+0x188>)
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8013dec:	4a5d      	ldr	r2, [pc, #372]	; (8013f64 <mqtt_client_init+0x18c>)
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8013df2:	4a5d      	ldr	r2, [pc, #372]	; (8013f68 <mqtt_client_init+0x190>)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 8013df8:	4a5c      	ldr	r2, [pc, #368]	; (8013f6c <mqtt_client_init+0x194>)
 8013dfa:	6a3b      	ldr	r3, [r7, #32]
 8013dfc:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 8013dfe:	4a5c      	ldr	r2, [pc, #368]	; (8013f70 <mqtt_client_init+0x198>)
 8013e00:	887b      	ldrh	r3, [r7, #2]
 8013e02:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8013e04:	4a5b      	ldr	r2, [pc, #364]	; (8013f74 <mqtt_client_init+0x19c>)
 8013e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e08:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 8013e0a:	4b55      	ldr	r3, [pc, #340]	; (8013f60 <mqtt_client_init+0x188>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	78db      	ldrb	r3, [r3, #3]
 8013e10:	461c      	mov	r4, r3
 8013e12:	4b53      	ldr	r3, [pc, #332]	; (8013f60 <mqtt_client_init+0x188>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	791b      	ldrb	r3, [r3, #4]
 8013e18:	461d      	mov	r5, r3
 8013e1a:	4b51      	ldr	r3, [pc, #324]	; (8013f60 <mqtt_client_init+0x188>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	795b      	ldrb	r3, [r3, #5]
 8013e20:	461a      	mov	r2, r3
 8013e22:	4b4f      	ldr	r3, [pc, #316]	; (8013f60 <mqtt_client_init+0x188>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	799b      	ldrb	r3, [r3, #6]
 8013e28:	4619      	mov	r1, r3
 8013e2a:	4b4d      	ldr	r3, [pc, #308]	; (8013f60 <mqtt_client_init+0x188>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	79db      	ldrb	r3, [r3, #7]
 8013e30:	4618      	mov	r0, r3
 8013e32:	4b4b      	ldr	r3, [pc, #300]	; (8013f60 <mqtt_client_init+0x188>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	7a1b      	ldrb	r3, [r3, #8]
 8013e38:	9303      	str	r3, [sp, #12]
 8013e3a:	9002      	str	r0, [sp, #8]
 8013e3c:	9101      	str	r1, [sp, #4]
 8013e3e:	9200      	str	r2, [sp, #0]
 8013e40:	462b      	mov	r3, r5
 8013e42:	4622      	mov	r2, r4
 8013e44:	494c      	ldr	r1, [pc, #304]	; (8013f78 <mqtt_client_init+0x1a0>)
 8013e46:	484d      	ldr	r0, [pc, #308]	; (8013f7c <mqtt_client_init+0x1a4>)
 8013e48:	f019 fb58 	bl	802d4fc <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 8013e4c:	484b      	ldr	r0, [pc, #300]	; (8013f7c <mqtt_client_init+0x1a4>)
 8013e4e:	f000 fa81 	bl	8014354 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 8013e52:	4b43      	ldr	r3, [pc, #268]	; (8013f60 <mqtt_client_init+0x188>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	7a5b      	ldrb	r3, [r3, #9]
 8013e58:	4619      	mov	r1, r3
 8013e5a:	4b41      	ldr	r3, [pc, #260]	; (8013f60 <mqtt_client_init+0x188>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	7a9b      	ldrb	r3, [r3, #10]
 8013e60:	4618      	mov	r0, r3
 8013e62:	4b3f      	ldr	r3, [pc, #252]	; (8013f60 <mqtt_client_init+0x188>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	7adb      	ldrb	r3, [r3, #11]
 8013e68:	461a      	mov	r2, r3
 8013e6a:	4b3d      	ldr	r3, [pc, #244]	; (8013f60 <mqtt_client_init+0x188>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	7b1b      	ldrb	r3, [r3, #12]
 8013e70:	9301      	str	r3, [sp, #4]
 8013e72:	9200      	str	r2, [sp, #0]
 8013e74:	4603      	mov	r3, r0
 8013e76:	460a      	mov	r2, r1
 8013e78:	4941      	ldr	r1, [pc, #260]	; (8013f80 <mqtt_client_init+0x1a8>)
 8013e7a:	4842      	ldr	r0, [pc, #264]	; (8013f84 <mqtt_client_init+0x1ac>)
 8013e7c:	f019 fb3e 	bl	802d4fc <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 8013e80:	4840      	ldr	r0, [pc, #256]	; (8013f84 <mqtt_client_init+0x1ac>)
 8013e82:	f000 fa89 	bl	8014398 <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 8013e86:	4b37      	ldr	r3, [pc, #220]	; (8013f64 <mqtt_client_init+0x18c>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	3302      	adds	r3, #2
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f008 fd97 	bl	801c9c0 <isValidIPv4>
 8013e92:	4603      	mov	r3, r0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d00c      	beq.n	8013eb2 <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8013e98:	4b32      	ldr	r3, [pc, #200]	; (8013f64 <mqtt_client_init+0x18c>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	1c98      	adds	r0, r3, #2
 8013e9e:	4b3a      	ldr	r3, [pc, #232]	; (8013f88 <mqtt_client_init+0x1b0>)
 8013ea0:	9301      	str	r3, [sp, #4]
 8013ea2:	4b3a      	ldr	r3, [pc, #232]	; (8013f8c <mqtt_client_init+0x1b4>)
 8013ea4:	9300      	str	r3, [sp, #0]
 8013ea6:	4b3a      	ldr	r3, [pc, #232]	; (8013f90 <mqtt_client_init+0x1b8>)
 8013ea8:	4a3a      	ldr	r2, [pc, #232]	; (8013f94 <mqtt_client_init+0x1bc>)
 8013eaa:	493b      	ldr	r1, [pc, #236]	; (8013f98 <mqtt_client_init+0x1c0>)
 8013eac:	f019 fb46 	bl	802d53c <siscanf>
 8013eb0:	e00d      	b.n	8013ece <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 8013eb2:	4b2c      	ldr	r3, [pc, #176]	; (8013f64 <mqtt_client_init+0x18c>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	3302      	adds	r3, #2
 8013eb8:	4936      	ldr	r1, [pc, #216]	; (8013f94 <mqtt_client_init+0x1bc>)
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f008 fd50 	bl	801c960 <dns_service_resolve_name>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ec6:	d102      	bne.n	8013ece <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 8013ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ecc:	e043      	b.n	8013f56 <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 8013ece:	4b33      	ldr	r3, [pc, #204]	; (8013f9c <mqtt_client_init+0x1c4>)
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 8013ed4:	4b31      	ldr	r3, [pc, #196]	; (8013f9c <mqtt_client_init+0x1c4>)
 8013ed6:	2203      	movs	r2, #3
 8013ed8:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 8013eda:	4b30      	ldr	r3, [pc, #192]	; (8013f9c <mqtt_client_init+0x1c4>)
 8013edc:	4a27      	ldr	r2, [pc, #156]	; (8013f7c <mqtt_client_init+0x1a4>)
 8013ede:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8013ee0:	4b2e      	ldr	r3, [pc, #184]	; (8013f9c <mqtt_client_init+0x1c4>)
 8013ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ee6:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 8013ee8:	4b2c      	ldr	r3, [pc, #176]	; (8013f9c <mqtt_client_init+0x1c4>)
 8013eea:	2201      	movs	r2, #1
 8013eec:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 8013eee:	4b1d      	ldr	r3, [pc, #116]	; (8013f64 <mqtt_client_init+0x18c>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	3384      	adds	r3, #132	; 0x84
 8013ef4:	4a29      	ldr	r2, [pc, #164]	; (8013f9c <mqtt_client_init+0x1c4>)
 8013ef6:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 8013ef8:	4b1a      	ldr	r3, [pc, #104]	; (8013f64 <mqtt_client_init+0x18c>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	33a5      	adds	r3, #165	; 0xa5
 8013efe:	4a27      	ldr	r2, [pc, #156]	; (8013f9c <mqtt_client_init+0x1c4>)
 8013f00:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 8013f02:	4b18      	ldr	r3, [pc, #96]	; (8013f64 <mqtt_client_init+0x18c>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8013f0a:	4b25      	ldr	r3, [pc, #148]	; (8013fa0 <mqtt_client_init+0x1c8>)
 8013f0c:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 8013f0e:	4b25      	ldr	r3, [pc, #148]	; (8013fa4 <mqtt_client_init+0x1cc>)
 8013f10:	2200      	movs	r2, #0
 8013f12:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8013f14:	4b23      	ldr	r3, [pc, #140]	; (8013fa4 <mqtt_client_init+0x1cc>)
 8013f16:	2200      	movs	r2, #0
 8013f18:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 8013f1a:	4b22      	ldr	r3, [pc, #136]	; (8013fa4 <mqtt_client_init+0x1cc>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 8013f20:	4b20      	ldr	r3, [pc, #128]	; (8013fa4 <mqtt_client_init+0x1cc>)
 8013f22:	2200      	movs	r2, #0
 8013f24:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 8013f26:	2105      	movs	r1, #5
 8013f28:	481f      	ldr	r0, [pc, #124]	; (8013fa8 <mqtt_client_init+0x1d0>)
 8013f2a:	f009 fae3 	bl	801d4f4 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 8013f2e:	4b0e      	ldr	r3, [pc, #56]	; (8013f68 <mqtt_client_init+0x190>)
 8013f30:	681a      	ldr	r2, [r3, #0]
 8013f32:	4b0f      	ldr	r3, [pc, #60]	; (8013f70 <mqtt_client_init+0x198>)
 8013f34:	881b      	ldrh	r3, [r3, #0]
 8013f36:	4618      	mov	r0, r3
 8013f38:	4b0c      	ldr	r3, [pc, #48]	; (8013f6c <mqtt_client_init+0x194>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	490d      	ldr	r1, [pc, #52]	; (8013f74 <mqtt_client_init+0x19c>)
 8013f3e:	8809      	ldrh	r1, [r1, #0]
 8013f40:	9102      	str	r1, [sp, #8]
 8013f42:	9301      	str	r3, [sp, #4]
 8013f44:	9000      	str	r0, [sp, #0]
 8013f46:	4613      	mov	r3, r2
 8013f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f4c:	4916      	ldr	r1, [pc, #88]	; (8013fa8 <mqtt_client_init+0x1d0>)
 8013f4e:	4817      	ldr	r0, [pc, #92]	; (8013fac <mqtt_client_init+0x1d4>)
 8013f50:	f008 fe20 	bl	801cb94 <MQTTClientInit>

	return 0;
 8013f54:	2300      	movs	r3, #0
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	3710      	adds	r7, #16
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f5e:	bf00      	nop
 8013f60:	2000050c 	.word	0x2000050c
 8013f64:	20000508 	.word	0x20000508
 8013f68:	20000538 	.word	0x20000538
 8013f6c:	20000534 	.word	0x20000534
 8013f70:	20000816 	.word	0x20000816
 8013f74:	20000814 	.word	0x20000814
 8013f78:	080329a8 	.word	0x080329a8
 8013f7c:	20000510 	.word	0x20000510
 8013f80:	080329c4 	.word	0x080329c4
 8013f84:	20000520 	.word	0x20000520
 8013f88:	2000081b 	.word	0x2000081b
 8013f8c:	2000081a 	.word	0x2000081a
 8013f90:	20000819 	.word	0x20000819
 8013f94:	20000818 	.word	0x20000818
 8013f98:	080329d0 	.word	0x080329d0
 8013f9c:	20000004 	.word	0x20000004
 8013fa0:	2000081c 	.word	0x2000081c
 8013fa4:	2000088c 	.word	0x2000088c
 8013fa8:	20000820 	.word	0x20000820
 8013fac:	20000830 	.word	0x20000830

08013fb0 <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b082      	sub	sp, #8
 8013fb4:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 8013fb6:	4b1f      	ldr	r3, [pc, #124]	; (8014034 <mqtt_client_connect+0x84>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 8013fbc:	4b1e      	ldr	r3, [pc, #120]	; (8014038 <mqtt_client_connect+0x88>)
 8013fbe:	881b      	ldrh	r3, [r3, #0]
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	491e      	ldr	r1, [pc, #120]	; (801403c <mqtt_client_connect+0x8c>)
 8013fc4:	481e      	ldr	r0, [pc, #120]	; (8014040 <mqtt_client_connect+0x90>)
 8013fc6:	f009 fb12 	bl	801d5ee <ConnectNetwork>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8013fce:	4b1d      	ldr	r3, [pc, #116]	; (8014044 <mqtt_client_connect+0x94>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4798      	blx	r3
	if (result != 1) {
 8013fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	d010      	beq.n	8013ffe <mqtt_client_connect+0x4e>
		set_mutex();
 8013fdc:	4b15      	ldr	r3, [pc, #84]	; (8014034 <mqtt_client_connect+0x84>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 8013fe2:	4b17      	ldr	r3, [pc, #92]	; (8014040 <mqtt_client_connect+0x90>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f004 ff39 	bl	8018e60 <close>
		release_mutex();
 8013fee:	4b15      	ldr	r3, [pc, #84]	; (8014044 <mqtt_client_connect+0x94>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8013ff4:	88fb      	ldrh	r3, [r7, #6]
 8013ff6:	3b0a      	subs	r3, #10
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	b21b      	sxth	r3, r3
 8013ffc:	e016      	b.n	801402c <mqtt_client_connect+0x7c>
	}
	set_mutex();
 8013ffe:	4b0d      	ldr	r3, [pc, #52]	; (8014034 <mqtt_client_connect+0x84>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8014004:	4910      	ldr	r1, [pc, #64]	; (8014048 <mqtt_client_connect+0x98>)
 8014006:	4811      	ldr	r0, [pc, #68]	; (801404c <mqtt_client_connect+0x9c>)
 8014008:	f009 f8ca 	bl	801d1a0 <MQTTConnect>
 801400c:	4603      	mov	r3, r0
 801400e:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8014010:	4b0c      	ldr	r3, [pc, #48]	; (8014044 <mqtt_client_connect+0x94>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 8014016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d004      	beq.n	8014028 <mqtt_client_connect+0x78>
 801401e:	88fb      	ldrh	r3, [r7, #6]
 8014020:	3b14      	subs	r3, #20
 8014022:	b29b      	uxth	r3, r3
 8014024:	b21b      	sxth	r3, r3
 8014026:	e001      	b.n	801402c <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 8014028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 801402c:	4618      	mov	r0, r3
 801402e:	3708      	adds	r7, #8
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}
 8014034:	2000005c 	.word	0x2000005c
 8014038:	2000081c 	.word	0x2000081c
 801403c:	20000818 	.word	0x20000818
 8014040:	20000820 	.word	0x20000820
 8014044:	20000060 	.word	0x20000060
 8014048:	20000004 	.word	0x20000004
 801404c:	20000830 	.word	0x20000830

08014050 <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014056:	2280      	movs	r2, #128	; 0x80
 8014058:	2100      	movs	r1, #0
 801405a:	48a0      	ldr	r0, [pc, #640]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801405c:	f019 fb9e 	bl	802d79c <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 8014060:	2200      	movs	r2, #0
 8014062:	2103      	movs	r1, #3
 8014064:	489d      	ldr	r0, [pc, #628]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014066:	f000 f9b7 	bl	80143d8 <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 801406a:	2200      	movs	r2, #0
 801406c:	2103      	movs	r1, #3
 801406e:	489c      	ldr	r0, [pc, #624]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014070:	f000 fa64 	bl	801453c <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014074:	489a      	ldr	r0, [pc, #616]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014076:	f7fc f913 	bl	80102a0 <strlen>
 801407a:	4603      	mov	r3, r0
 801407c:	4a99      	ldr	r2, [pc, #612]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801407e:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014080:	4b98      	ldr	r3, [pc, #608]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014082:	4a97      	ldr	r2, [pc, #604]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014084:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014086:	4b97      	ldr	r3, [pc, #604]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014088:	2201      	movs	r2, #1
 801408a:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801408c:	4b96      	ldr	r3, [pc, #600]	; (80142e8 <mqtt_client_reg_dev_on_home_assist+0x298>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014092:	4a94      	ldr	r2, [pc, #592]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014094:	4991      	ldr	r1, [pc, #580]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014096:	4895      	ldr	r0, [pc, #596]	; (80142ec <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014098:	f009 f908 	bl	801d2ac <MQTTPublish>
 801409c:	4603      	mov	r3, r0
 801409e:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80140a0:	4b93      	ldr	r3, [pc, #588]	; (80142f0 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80140a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d002      	beq.n	80140b4 <mqtt_client_reg_dev_on_home_assist+0x64>
 80140ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140b2:	e10f      	b.n	80142d4 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80140b4:	4b8b      	ldr	r3, [pc, #556]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80140b6:	889b      	ldrh	r3, [r3, #4]
 80140b8:	3301      	adds	r3, #1
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	4b89      	ldr	r3, [pc, #548]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80140be:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80140c0:	2280      	movs	r2, #128	; 0x80
 80140c2:	2100      	movs	r1, #0
 80140c4:	4885      	ldr	r0, [pc, #532]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80140c6:	f019 fb69 	bl	802d79c <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 80140ca:	2200      	movs	r2, #0
 80140cc:	2105      	movs	r1, #5
 80140ce:	4883      	ldr	r0, [pc, #524]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80140d0:	f000 f982 	bl	80143d8 <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 80140d4:	2200      	movs	r2, #0
 80140d6:	2105      	movs	r1, #5
 80140d8:	4881      	ldr	r0, [pc, #516]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80140da:	f000 fa2f 	bl	801453c <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80140de:	4880      	ldr	r0, [pc, #512]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80140e0:	f7fc f8de 	bl	80102a0 <strlen>
 80140e4:	4603      	mov	r3, r0
 80140e6:	4a7f      	ldr	r2, [pc, #508]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80140e8:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80140ea:	4b7e      	ldr	r3, [pc, #504]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80140ec:	4a7c      	ldr	r2, [pc, #496]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80140ee:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80140f0:	4b7c      	ldr	r3, [pc, #496]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80140f2:	2201      	movs	r2, #1
 80140f4:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80140f6:	4b7c      	ldr	r3, [pc, #496]	; (80142e8 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80140fc:	4a79      	ldr	r2, [pc, #484]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80140fe:	4977      	ldr	r1, [pc, #476]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014100:	487a      	ldr	r0, [pc, #488]	; (80142ec <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014102:	f009 f8d3 	bl	801d2ac <MQTTPublish>
 8014106:	4603      	mov	r3, r0
 8014108:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801410a:	4b79      	ldr	r3, [pc, #484]	; (80142f0 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d002      	beq.n	801411e <mqtt_client_reg_dev_on_home_assist+0xce>
 8014118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801411c:	e0da      	b.n	80142d4 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 801411e:	4b71      	ldr	r3, [pc, #452]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014120:	889b      	ldrh	r3, [r3, #4]
 8014122:	3301      	adds	r3, #1
 8014124:	b29a      	uxth	r2, r3
 8014126:	4b6f      	ldr	r3, [pc, #444]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014128:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801412a:	2280      	movs	r2, #128	; 0x80
 801412c:	2100      	movs	r1, #0
 801412e:	486b      	ldr	r0, [pc, #428]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014130:	f019 fb34 	bl	802d79c <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 8014134:	2200      	movs	r2, #0
 8014136:	2104      	movs	r1, #4
 8014138:	4868      	ldr	r0, [pc, #416]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801413a:	f000 f94d 	bl	80143d8 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 801413e:	2200      	movs	r2, #0
 8014140:	2104      	movs	r1, #4
 8014142:	4867      	ldr	r0, [pc, #412]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014144:	f000 f9fa 	bl	801453c <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014148:	4865      	ldr	r0, [pc, #404]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801414a:	f7fc f8a9 	bl	80102a0 <strlen>
 801414e:	4603      	mov	r3, r0
 8014150:	4a64      	ldr	r2, [pc, #400]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014152:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014154:	4b63      	ldr	r3, [pc, #396]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014156:	4a62      	ldr	r2, [pc, #392]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014158:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 801415a:	4b62      	ldr	r3, [pc, #392]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801415c:	2201      	movs	r2, #1
 801415e:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014160:	4b61      	ldr	r3, [pc, #388]	; (80142e8 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014166:	4a5f      	ldr	r2, [pc, #380]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014168:	495c      	ldr	r1, [pc, #368]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801416a:	4860      	ldr	r0, [pc, #384]	; (80142ec <mqtt_client_reg_dev_on_home_assist+0x29c>)
 801416c:	f009 f89e 	bl	801d2ac <MQTTPublish>
 8014170:	4603      	mov	r3, r0
 8014172:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014174:	4b5e      	ldr	r3, [pc, #376]	; (80142f0 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801417a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d002      	beq.n	8014188 <mqtt_client_reg_dev_on_home_assist+0x138>
 8014182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014186:	e0a5      	b.n	80142d4 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014188:	4b56      	ldr	r3, [pc, #344]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801418a:	889b      	ldrh	r3, [r3, #4]
 801418c:	3301      	adds	r3, #1
 801418e:	b29a      	uxth	r2, r3
 8014190:	4b54      	ldr	r3, [pc, #336]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014192:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG APPARENT POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014194:	2280      	movs	r2, #128	; 0x80
 8014196:	2100      	movs	r1, #0
 8014198:	4850      	ldr	r0, [pc, #320]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801419a:	f019 faff 	bl	802d79c <memset>
		get_config_topik_string(buf_topik, APPARENT_POWER_SENSOR_TOPIK, 0);
 801419e:	2200      	movs	r2, #0
 80141a0:	2108      	movs	r1, #8
 80141a2:	484e      	ldr	r0, [pc, #312]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80141a4:	f000 f918 	bl	80143d8 <get_config_topik_string>
		get_config_payload_string(buf_payload, APPARENT_POWER_SENSOR_PAYLOAD, 0);
 80141a8:	2200      	movs	r2, #0
 80141aa:	2108      	movs	r1, #8
 80141ac:	484c      	ldr	r0, [pc, #304]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80141ae:	f000 f9c5 	bl	801453c <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80141b2:	484b      	ldr	r0, [pc, #300]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80141b4:	f7fc f874 	bl	80102a0 <strlen>
 80141b8:	4603      	mov	r3, r0
 80141ba:	4a4a      	ldr	r2, [pc, #296]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80141bc:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80141be:	4b49      	ldr	r3, [pc, #292]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80141c0:	4a47      	ldr	r2, [pc, #284]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80141c2:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80141c4:	4b47      	ldr	r3, [pc, #284]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80141c6:	2201      	movs	r2, #1
 80141c8:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80141ca:	4b47      	ldr	r3, [pc, #284]	; (80142e8 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80141d0:	4a44      	ldr	r2, [pc, #272]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80141d2:	4942      	ldr	r1, [pc, #264]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80141d4:	4845      	ldr	r0, [pc, #276]	; (80142ec <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80141d6:	f009 f869 	bl	801d2ac <MQTTPublish>
 80141da:	4603      	mov	r3, r0
 80141dc:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80141de:	4b44      	ldr	r3, [pc, #272]	; (80142f0 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80141e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d002      	beq.n	80141f2 <mqtt_client_reg_dev_on_home_assist+0x1a2>
 80141ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141f0:	e070      	b.n	80142d4 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80141f2:	4b3c      	ldr	r3, [pc, #240]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80141f4:	889b      	ldrh	r3, [r3, #4]
 80141f6:	3301      	adds	r3, #1
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	4b3a      	ldr	r3, [pc, #232]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80141fc:	809a      	strh	r2, [r3, #4]


//------------------------------REG APPARENT POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80141fe:	2280      	movs	r2, #128	; 0x80
 8014200:	2100      	movs	r1, #0
 8014202:	4836      	ldr	r0, [pc, #216]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014204:	f019 faca 	bl	802d79c <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 8014208:	2200      	movs	r2, #0
 801420a:	2106      	movs	r1, #6
 801420c:	4833      	ldr	r0, [pc, #204]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801420e:	f000 f8e3 	bl	80143d8 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 8014212:	2200      	movs	r2, #0
 8014214:	2106      	movs	r1, #6
 8014216:	4832      	ldr	r0, [pc, #200]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014218:	f000 f990 	bl	801453c <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 801421c:	4830      	ldr	r0, [pc, #192]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801421e:	f7fc f83f 	bl	80102a0 <strlen>
 8014222:	4603      	mov	r3, r0
 8014224:	4a2f      	ldr	r2, [pc, #188]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014226:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014228:	4b2e      	ldr	r3, [pc, #184]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801422a:	4a2d      	ldr	r2, [pc, #180]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801422c:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 801422e:	4b2d      	ldr	r3, [pc, #180]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014230:	2201      	movs	r2, #1
 8014232:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014234:	4b2c      	ldr	r3, [pc, #176]	; (80142e8 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801423a:	4a2a      	ldr	r2, [pc, #168]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801423c:	4927      	ldr	r1, [pc, #156]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801423e:	482b      	ldr	r0, [pc, #172]	; (80142ec <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014240:	f009 f834 	bl	801d2ac <MQTTPublish>
 8014244:	4603      	mov	r3, r0
 8014246:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014248:	4b29      	ldr	r3, [pc, #164]	; (80142f0 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d002      	beq.n	801425c <mqtt_client_reg_dev_on_home_assist+0x20c>
 8014256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801425a:	e03b      	b.n	80142d4 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 801425c:	4b21      	ldr	r3, [pc, #132]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801425e:	889b      	ldrh	r3, [r3, #4]
 8014260:	3301      	adds	r3, #1
 8014262:	b29a      	uxth	r2, r3
 8014264:	4b1f      	ldr	r3, [pc, #124]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014266:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014268:	2280      	movs	r2, #128	; 0x80
 801426a:	2100      	movs	r1, #0
 801426c:	481b      	ldr	r0, [pc, #108]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801426e:	f019 fa95 	bl	802d79c <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 8014272:	2200      	movs	r2, #0
 8014274:	2107      	movs	r1, #7
 8014276:	4819      	ldr	r0, [pc, #100]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014278:	f000 f8ae 	bl	80143d8 <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 801427c:	2200      	movs	r2, #0
 801427e:	2107      	movs	r1, #7
 8014280:	4817      	ldr	r0, [pc, #92]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014282:	f000 f95b 	bl	801453c <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014286:	4816      	ldr	r0, [pc, #88]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014288:	f7fc f80a 	bl	80102a0 <strlen>
 801428c:	4603      	mov	r3, r0
 801428e:	4a15      	ldr	r2, [pc, #84]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014290:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014292:	4b14      	ldr	r3, [pc, #80]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014294:	4a12      	ldr	r2, [pc, #72]	; (80142e0 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014296:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014298:	4b12      	ldr	r3, [pc, #72]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801429a:	2201      	movs	r2, #1
 801429c:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801429e:	4b12      	ldr	r3, [pc, #72]	; (80142e8 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80142a4:	4a0f      	ldr	r2, [pc, #60]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142a6:	490d      	ldr	r1, [pc, #52]	; (80142dc <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142a8:	4810      	ldr	r0, [pc, #64]	; (80142ec <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80142aa:	f008 ffff 	bl	801d2ac <MQTTPublish>
 80142ae:	4603      	mov	r3, r0
 80142b0:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80142b2:	4b0f      	ldr	r3, [pc, #60]	; (80142f0 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80142b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d002      	beq.n	80142c6 <mqtt_client_reg_dev_on_home_assist+0x276>
 80142c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142c4:	e006      	b.n	80142d4 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80142c6:	4b07      	ldr	r3, [pc, #28]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142c8:	889b      	ldrh	r3, [r3, #4]
 80142ca:	3301      	adds	r3, #1
 80142cc:	b29a      	uxth	r2, r3
 80142ce:	4b05      	ldr	r3, [pc, #20]	; (80142e4 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142d0:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 80142d2:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3708      	adds	r7, #8
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	2000053c 	.word	0x2000053c
 80142e0:	200005bc 	.word	0x200005bc
 80142e4:	2000088c 	.word	0x2000088c
 80142e8:	2000005c 	.word	0x2000005c
 80142ec:	20000830 	.word	0x20000830
 80142f0:	20000060 	.word	0x20000060

080142f4 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 80142fe:	6838      	ldr	r0, [r7, #0]
 8014300:	f7fb ffce 	bl	80102a0 <strlen>
 8014304:	4603      	mov	r3, r0
 8014306:	4a0f      	ldr	r2, [pc, #60]	; (8014344 <send_data_to_topik+0x50>)
 8014308:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 801430a:	4a0e      	ldr	r2, [pc, #56]	; (8014344 <send_data_to_topik+0x50>)
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 8014310:	4b0c      	ldr	r3, [pc, #48]	; (8014344 <send_data_to_topik+0x50>)
 8014312:	889b      	ldrh	r3, [r3, #4]
 8014314:	3301      	adds	r3, #1
 8014316:	b29a      	uxth	r2, r3
 8014318:	4b0a      	ldr	r3, [pc, #40]	; (8014344 <send_data_to_topik+0x50>)
 801431a:	809a      	strh	r2, [r3, #4]
	set_mutex();
 801431c:	4b0a      	ldr	r3, [pc, #40]	; (8014348 <send_data_to_topik+0x54>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 8014322:	4a08      	ldr	r2, [pc, #32]	; (8014344 <send_data_to_topik+0x50>)
 8014324:	6879      	ldr	r1, [r7, #4]
 8014326:	4809      	ldr	r0, [pc, #36]	; (801434c <send_data_to_topik+0x58>)
 8014328:	f008 ffc0 	bl	801d2ac <MQTTPublish>
 801432c:	4603      	mov	r3, r0
 801432e:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 8014330:	4b07      	ldr	r3, [pc, #28]	; (8014350 <send_data_to_topik+0x5c>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 8014336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801433a:	4618      	mov	r0, r3
 801433c:	3710      	adds	r7, #16
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
 8014342:	bf00      	nop
 8014344:	2000088c 	.word	0x2000088c
 8014348:	2000005c 	.word	0x2000005c
 801434c:	20000830 	.word	0x20000830
 8014350:	20000060 	.word	0x20000060

08014354 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 8014354:	b580      	push	{r7, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 801435c:	2300      	movs	r3, #0
 801435e:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f7fb ff9d 	bl	80102a0 <strlen>
 8014366:	4603      	mov	r3, r0
 8014368:	2b0d      	cmp	r3, #13
 801436a:	d902      	bls.n	8014372 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 801436c:	230e      	movs	r3, #14
 801436e:	73fb      	strb	r3, [r7, #15]
 8014370:	e004      	b.n	801437c <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f7fb ff94 	bl	80102a0 <strlen>
 8014378:	4603      	mov	r3, r0
 801437a:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 801437c:	7bfb      	ldrb	r3, [r7, #15]
 801437e:	461a      	mov	r2, r3
 8014380:	6879      	ldr	r1, [r7, #4]
 8014382:	4804      	ldr	r0, [pc, #16]	; (8014394 <set_device_id+0x40>)
 8014384:	f019 fa64 	bl	802d850 <strncpy>
	return 0;
 8014388:	2300      	movs	r3, #0
}
 801438a:	4618      	mov	r0, r3
 801438c:	3710      	adds	r7, #16
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	2000089c 	.word	0x2000089c

08014398 <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 80143a0:	4b0c      	ldr	r3, [pc, #48]	; (80143d4 <set_device_conf_ip+0x3c>)
 80143a2:	2200      	movs	r2, #0
 80143a4:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f7fb ff7a 	bl	80102a0 <strlen>
 80143ac:	4603      	mov	r3, r0
 80143ae:	2b12      	cmp	r3, #18
 80143b0:	d80a      	bhi.n	80143c8 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f7fb ff74 	bl	80102a0 <strlen>
 80143b8:	4603      	mov	r3, r0
 80143ba:	461a      	mov	r2, r3
 80143bc:	6879      	ldr	r1, [r7, #4]
 80143be:	4805      	ldr	r0, [pc, #20]	; (80143d4 <set_device_conf_ip+0x3c>)
 80143c0:	f019 fa46 	bl	802d850 <strncpy>
		return 0;
 80143c4:	2300      	movs	r3, #0
 80143c6:	e001      	b.n	80143cc <set_device_conf_ip+0x34>
	}
	return -1;
 80143c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3708      	adds	r7, #8
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	200008ac 	.word	0x200008ac

080143d8 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af04      	add	r7, sp, #16
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	460b      	mov	r3, r1
 80143e2:	70fb      	strb	r3, [r7, #3]
 80143e4:	4613      	mov	r3, r2
 80143e6:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 80143e8:	2100      	movs	r1, #0
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f019 fba3 	bl	802db36 <strcpy>
	switch (topik_type) {
 80143f0:	78fb      	ldrb	r3, [r7, #3]
 80143f2:	3b01      	subs	r3, #1
 80143f4:	2b07      	cmp	r3, #7
 80143f6:	d87b      	bhi.n	80144f0 <get_config_topik_string+0x118>
 80143f8:	a201      	add	r2, pc, #4	; (adr r2, 8014400 <get_config_topik_string+0x28>)
 80143fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143fe:	bf00      	nop
 8014400:	08014421 	.word	0x08014421
 8014404:	0801443b 	.word	0x0801443b
 8014408:	08014455 	.word	0x08014455
 801440c:	08014489 	.word	0x08014489
 8014410:	0801446f 	.word	0x0801446f
 8014414:	080144bd 	.word	0x080144bd
 8014418:	080144d7 	.word	0x080144d7
 801441c:	080144a3 	.word	0x080144a3
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 8014420:	78bb      	ldrb	r3, [r7, #2]
 8014422:	9302      	str	r3, [sp, #8]
 8014424:	4b36      	ldr	r3, [pc, #216]	; (8014500 <get_config_topik_string+0x128>)
 8014426:	9301      	str	r3, [sp, #4]
 8014428:	4b36      	ldr	r3, [pc, #216]	; (8014504 <get_config_topik_string+0x12c>)
 801442a:	9300      	str	r3, [sp, #0]
 801442c:	4b36      	ldr	r3, [pc, #216]	; (8014508 <get_config_topik_string+0x130>)
 801442e:	4a37      	ldr	r2, [pc, #220]	; (801450c <get_config_topik_string+0x134>)
 8014430:	4937      	ldr	r1, [pc, #220]	; (8014510 <get_config_topik_string+0x138>)
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f019 f862 	bl	802d4fc <siprintf>
			break;
 8014438:	e05d      	b.n	80144f6 <get_config_topik_string+0x11e>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 801443a:	78bb      	ldrb	r3, [r7, #2]
 801443c:	9302      	str	r3, [sp, #8]
 801443e:	4b35      	ldr	r3, [pc, #212]	; (8014514 <get_config_topik_string+0x13c>)
 8014440:	9301      	str	r3, [sp, #4]
 8014442:	4b30      	ldr	r3, [pc, #192]	; (8014504 <get_config_topik_string+0x12c>)
 8014444:	9300      	str	r3, [sp, #0]
 8014446:	4b33      	ldr	r3, [pc, #204]	; (8014514 <get_config_topik_string+0x13c>)
 8014448:	4a30      	ldr	r2, [pc, #192]	; (801450c <get_config_topik_string+0x134>)
 801444a:	4931      	ldr	r1, [pc, #196]	; (8014510 <get_config_topik_string+0x138>)
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f019 f855 	bl	802d4fc <siprintf>
			break;
 8014452:	e050      	b.n	80144f6 <get_config_topik_string+0x11e>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 8014454:	4b30      	ldr	r3, [pc, #192]	; (8014518 <get_config_topik_string+0x140>)
 8014456:	9302      	str	r3, [sp, #8]
 8014458:	4b2a      	ldr	r3, [pc, #168]	; (8014504 <get_config_topik_string+0x12c>)
 801445a:	9301      	str	r3, [sp, #4]
 801445c:	4b2f      	ldr	r3, [pc, #188]	; (801451c <get_config_topik_string+0x144>)
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	4b2f      	ldr	r3, [pc, #188]	; (8014520 <get_config_topik_string+0x148>)
 8014462:	4a2a      	ldr	r2, [pc, #168]	; (801450c <get_config_topik_string+0x134>)
 8014464:	492f      	ldr	r1, [pc, #188]	; (8014524 <get_config_topik_string+0x14c>)
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f019 f848 	bl	802d4fc <siprintf>
			break;
 801446c:	e043      	b.n	80144f6 <get_config_topik_string+0x11e>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 801446e:	4b2e      	ldr	r3, [pc, #184]	; (8014528 <get_config_topik_string+0x150>)
 8014470:	9302      	str	r3, [sp, #8]
 8014472:	4b24      	ldr	r3, [pc, #144]	; (8014504 <get_config_topik_string+0x12c>)
 8014474:	9301      	str	r3, [sp, #4]
 8014476:	4b29      	ldr	r3, [pc, #164]	; (801451c <get_config_topik_string+0x144>)
 8014478:	9300      	str	r3, [sp, #0]
 801447a:	4b29      	ldr	r3, [pc, #164]	; (8014520 <get_config_topik_string+0x148>)
 801447c:	4a23      	ldr	r2, [pc, #140]	; (801450c <get_config_topik_string+0x134>)
 801447e:	4929      	ldr	r1, [pc, #164]	; (8014524 <get_config_topik_string+0x14c>)
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f019 f83b 	bl	802d4fc <siprintf>
			break;
 8014486:	e036      	b.n	80144f6 <get_config_topik_string+0x11e>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 8014488:	4b28      	ldr	r3, [pc, #160]	; (801452c <get_config_topik_string+0x154>)
 801448a:	9302      	str	r3, [sp, #8]
 801448c:	4b1d      	ldr	r3, [pc, #116]	; (8014504 <get_config_topik_string+0x12c>)
 801448e:	9301      	str	r3, [sp, #4]
 8014490:	4b22      	ldr	r3, [pc, #136]	; (801451c <get_config_topik_string+0x144>)
 8014492:	9300      	str	r3, [sp, #0]
 8014494:	4b22      	ldr	r3, [pc, #136]	; (8014520 <get_config_topik_string+0x148>)
 8014496:	4a1d      	ldr	r2, [pc, #116]	; (801450c <get_config_topik_string+0x134>)
 8014498:	4922      	ldr	r1, [pc, #136]	; (8014524 <get_config_topik_string+0x14c>)
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f019 f82e 	bl	802d4fc <siprintf>
			break;
 80144a0:	e029      	b.n	80144f6 <get_config_topik_string+0x11e>
		case APPARENT_POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power);
 80144a2:	4b23      	ldr	r3, [pc, #140]	; (8014530 <get_config_topik_string+0x158>)
 80144a4:	9302      	str	r3, [sp, #8]
 80144a6:	4b17      	ldr	r3, [pc, #92]	; (8014504 <get_config_topik_string+0x12c>)
 80144a8:	9301      	str	r3, [sp, #4]
 80144aa:	4b1c      	ldr	r3, [pc, #112]	; (801451c <get_config_topik_string+0x144>)
 80144ac:	9300      	str	r3, [sp, #0]
 80144ae:	4b1c      	ldr	r3, [pc, #112]	; (8014520 <get_config_topik_string+0x148>)
 80144b0:	4a16      	ldr	r2, [pc, #88]	; (801450c <get_config_topik_string+0x134>)
 80144b2:	491c      	ldr	r1, [pc, #112]	; (8014524 <get_config_topik_string+0x14c>)
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f019 f821 	bl	802d4fc <siprintf>
			break;
 80144ba:	e01c      	b.n	80144f6 <get_config_topik_string+0x11e>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 80144bc:	4b1d      	ldr	r3, [pc, #116]	; (8014534 <get_config_topik_string+0x15c>)
 80144be:	9302      	str	r3, [sp, #8]
 80144c0:	4b10      	ldr	r3, [pc, #64]	; (8014504 <get_config_topik_string+0x12c>)
 80144c2:	9301      	str	r3, [sp, #4]
 80144c4:	4b15      	ldr	r3, [pc, #84]	; (801451c <get_config_topik_string+0x144>)
 80144c6:	9300      	str	r3, [sp, #0]
 80144c8:	4b15      	ldr	r3, [pc, #84]	; (8014520 <get_config_topik_string+0x148>)
 80144ca:	4a10      	ldr	r2, [pc, #64]	; (801450c <get_config_topik_string+0x134>)
 80144cc:	4915      	ldr	r1, [pc, #84]	; (8014524 <get_config_topik_string+0x14c>)
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f019 f814 	bl	802d4fc <siprintf>
			break;
 80144d4:	e00f      	b.n	80144f6 <get_config_topik_string+0x11e>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 80144d6:	4b18      	ldr	r3, [pc, #96]	; (8014538 <get_config_topik_string+0x160>)
 80144d8:	9302      	str	r3, [sp, #8]
 80144da:	4b0a      	ldr	r3, [pc, #40]	; (8014504 <get_config_topik_string+0x12c>)
 80144dc:	9301      	str	r3, [sp, #4]
 80144de:	4b0f      	ldr	r3, [pc, #60]	; (801451c <get_config_topik_string+0x144>)
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	4b0f      	ldr	r3, [pc, #60]	; (8014520 <get_config_topik_string+0x148>)
 80144e4:	4a09      	ldr	r2, [pc, #36]	; (801450c <get_config_topik_string+0x134>)
 80144e6:	490f      	ldr	r1, [pc, #60]	; (8014524 <get_config_topik_string+0x14c>)
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f019 f807 	bl	802d4fc <siprintf>
			break;
 80144ee:	e002      	b.n	80144f6 <get_config_topik_string+0x11e>
		default:
			return -1;
 80144f0:	f04f 33ff 	mov.w	r3, #4294967295
 80144f4:	e000      	b.n	80144f8 <get_config_topik_string+0x120>
			break;
	}


	return 0;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	2000008c 	.word	0x2000008c
 8014504:	2000089c 	.word	0x2000089c
 8014508:	20000074 	.word	0x20000074
 801450c:	20000064 	.word	0x20000064
 8014510:	08034034 	.word	0x08034034
 8014514:	20000084 	.word	0x20000084
 8014518:	08032a0c 	.word	0x08032a0c
 801451c:	08032a14 	.word	0x08032a14
 8014520:	080329ec 	.word	0x080329ec
 8014524:	080329f4 	.word	0x080329f4
 8014528:	08032a1c 	.word	0x08032a1c
 801452c:	08032a24 	.word	0x08032a24
 8014530:	08032a2c 	.word	0x08032a2c
 8014534:	08032a3c 	.word	0x08032a3c
 8014538:	08032a4c 	.word	0x08032a4c

0801453c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 801453c:	b590      	push	{r4, r7, lr}
 801453e:	b097      	sub	sp, #92	; 0x5c
 8014540:	af12      	add	r7, sp, #72	; 0x48
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	460b      	mov	r3, r1
 8014546:	70fb      	strb	r3, [r7, #3]
 8014548:	4613      	mov	r3, r2
 801454a:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 801454c:	2300      	movs	r3, #0
 801454e:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2200      	movs	r2, #0
 8014554:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 8014556:	78fb      	ldrb	r3, [r7, #3]
 8014558:	3b01      	subs	r3, #1
 801455a:	2b07      	cmp	r3, #7
 801455c:	f200 8181 	bhi.w	8014862 <get_config_payload_string+0x326>
 8014560:	a201      	add	r2, pc, #4	; (adr r2, 8014568 <get_config_payload_string+0x2c>)
 8014562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014566:	bf00      	nop
 8014568:	080145bd 	.word	0x080145bd
 801456c:	08014589 	.word	0x08014589
 8014570:	080145eb 	.word	0x080145eb
 8014574:	08014697 	.word	0x08014697
 8014578:	08014641 	.word	0x08014641
 801457c:	08014743 	.word	0x08014743
 8014580:	0801480d 	.word	0x0801480d
 8014584:	080146ed 	.word	0x080146ed
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014588:	78bb      	ldrb	r3, [r7, #2]
 801458a:	78ba      	ldrb	r2, [r7, #2]
 801458c:	78b9      	ldrb	r1, [r7, #2]
 801458e:	78b8      	ldrb	r0, [r7, #2]
 8014590:	4c81      	ldr	r4, [pc, #516]	; (8014798 <get_config_payload_string+0x25c>)
 8014592:	9407      	str	r4, [sp, #28]
 8014594:	4c81      	ldr	r4, [pc, #516]	; (801479c <get_config_payload_string+0x260>)
 8014596:	9406      	str	r4, [sp, #24]
 8014598:	4c80      	ldr	r4, [pc, #512]	; (801479c <get_config_payload_string+0x260>)
 801459a:	9405      	str	r4, [sp, #20]
 801459c:	9004      	str	r0, [sp, #16]
 801459e:	487f      	ldr	r0, [pc, #508]	; (801479c <get_config_payload_string+0x260>)
 80145a0:	9003      	str	r0, [sp, #12]
 80145a2:	9102      	str	r1, [sp, #8]
 80145a4:	9201      	str	r2, [sp, #4]
 80145a6:	9300      	str	r3, [sp, #0]
 80145a8:	4b7c      	ldr	r3, [pc, #496]	; (801479c <get_config_payload_string+0x260>)
 80145aa:	4a7c      	ldr	r2, [pc, #496]	; (801479c <get_config_payload_string+0x260>)
 80145ac:	497c      	ldr	r1, [pc, #496]	; (80147a0 <get_config_payload_string+0x264>)
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f018 ffa4 	bl	802d4fc <siprintf>
 80145b4:	4603      	mov	r3, r0
 80145b6:	73fb      	strb	r3, [r7, #15]
			return len;
 80145b8:	7bfb      	ldrb	r3, [r7, #15]
 80145ba:	e155      	b.n	8014868 <get_config_payload_string+0x32c>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 80145bc:	78b9      	ldrb	r1, [r7, #2]
 80145be:	78bb      	ldrb	r3, [r7, #2]
 80145c0:	78ba      	ldrb	r2, [r7, #2]
 80145c2:	4875      	ldr	r0, [pc, #468]	; (8014798 <get_config_payload_string+0x25c>)
 80145c4:	9005      	str	r0, [sp, #20]
 80145c6:	4875      	ldr	r0, [pc, #468]	; (801479c <get_config_payload_string+0x260>)
 80145c8:	9004      	str	r0, [sp, #16]
 80145ca:	4874      	ldr	r0, [pc, #464]	; (801479c <get_config_payload_string+0x260>)
 80145cc:	9003      	str	r0, [sp, #12]
 80145ce:	9202      	str	r2, [sp, #8]
 80145d0:	4a72      	ldr	r2, [pc, #456]	; (801479c <get_config_payload_string+0x260>)
 80145d2:	9201      	str	r2, [sp, #4]
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	460b      	mov	r3, r1
 80145d8:	4a70      	ldr	r2, [pc, #448]	; (801479c <get_config_payload_string+0x260>)
 80145da:	4972      	ldr	r1, [pc, #456]	; (80147a4 <get_config_payload_string+0x268>)
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f018 ff8d 	bl	802d4fc <siprintf>
 80145e2:	4603      	mov	r3, r0
 80145e4:	73fb      	strb	r3, [r7, #15]
			return len;
 80145e6:	7bfb      	ldrb	r3, [r7, #15]
 80145e8:	e13e      	b.n	8014868 <get_config_payload_string+0x32c>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 80145ea:	4b6b      	ldr	r3, [pc, #428]	; (8014798 <get_config_payload_string+0x25c>)
 80145ec:	9310      	str	r3, [sp, #64]	; 0x40
 80145ee:	4b6e      	ldr	r3, [pc, #440]	; (80147a8 <get_config_payload_string+0x26c>)
 80145f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80145f2:	4b6e      	ldr	r3, [pc, #440]	; (80147ac <get_config_payload_string+0x270>)
 80145f4:	930e      	str	r3, [sp, #56]	; 0x38
 80145f6:	4b6e      	ldr	r3, [pc, #440]	; (80147b0 <get_config_payload_string+0x274>)
 80145f8:	930d      	str	r3, [sp, #52]	; 0x34
 80145fa:	4b6e      	ldr	r3, [pc, #440]	; (80147b4 <get_config_payload_string+0x278>)
 80145fc:	930c      	str	r3, [sp, #48]	; 0x30
 80145fe:	4b6e      	ldr	r3, [pc, #440]	; (80147b8 <get_config_payload_string+0x27c>)
 8014600:	930b      	str	r3, [sp, #44]	; 0x2c
 8014602:	4b66      	ldr	r3, [pc, #408]	; (801479c <get_config_payload_string+0x260>)
 8014604:	930a      	str	r3, [sp, #40]	; 0x28
 8014606:	4b6d      	ldr	r3, [pc, #436]	; (80147bc <get_config_payload_string+0x280>)
 8014608:	9309      	str	r3, [sp, #36]	; 0x24
 801460a:	4b6d      	ldr	r3, [pc, #436]	; (80147c0 <get_config_payload_string+0x284>)
 801460c:	9308      	str	r3, [sp, #32]
 801460e:	4b6d      	ldr	r3, [pc, #436]	; (80147c4 <get_config_payload_string+0x288>)
 8014610:	9307      	str	r3, [sp, #28]
 8014612:	4b62      	ldr	r3, [pc, #392]	; (801479c <get_config_payload_string+0x260>)
 8014614:	9306      	str	r3, [sp, #24]
 8014616:	4b69      	ldr	r3, [pc, #420]	; (80147bc <get_config_payload_string+0x280>)
 8014618:	9305      	str	r3, [sp, #20]
 801461a:	4b6b      	ldr	r3, [pc, #428]	; (80147c8 <get_config_payload_string+0x28c>)
 801461c:	9304      	str	r3, [sp, #16]
 801461e:	4b6b      	ldr	r3, [pc, #428]	; (80147cc <get_config_payload_string+0x290>)
 8014620:	9303      	str	r3, [sp, #12]
 8014622:	4b68      	ldr	r3, [pc, #416]	; (80147c4 <get_config_payload_string+0x288>)
 8014624:	9302      	str	r3, [sp, #8]
 8014626:	4b6a      	ldr	r3, [pc, #424]	; (80147d0 <get_config_payload_string+0x294>)
 8014628:	9301      	str	r3, [sp, #4]
 801462a:	4b5c      	ldr	r3, [pc, #368]	; (801479c <get_config_payload_string+0x260>)
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	4b63      	ldr	r3, [pc, #396]	; (80147bc <get_config_payload_string+0x280>)
 8014630:	4a64      	ldr	r2, [pc, #400]	; (80147c4 <get_config_payload_string+0x288>)
 8014632:	4968      	ldr	r1, [pc, #416]	; (80147d4 <get_config_payload_string+0x298>)
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f018 ff61 	bl	802d4fc <siprintf>
 801463a:	4603      	mov	r3, r0
 801463c:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801463e:	e113      	b.n	8014868 <get_config_payload_string+0x32c>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014640:	4b55      	ldr	r3, [pc, #340]	; (8014798 <get_config_payload_string+0x25c>)
 8014642:	9310      	str	r3, [sp, #64]	; 0x40
 8014644:	4b58      	ldr	r3, [pc, #352]	; (80147a8 <get_config_payload_string+0x26c>)
 8014646:	930f      	str	r3, [sp, #60]	; 0x3c
 8014648:	4b58      	ldr	r3, [pc, #352]	; (80147ac <get_config_payload_string+0x270>)
 801464a:	930e      	str	r3, [sp, #56]	; 0x38
 801464c:	4b58      	ldr	r3, [pc, #352]	; (80147b0 <get_config_payload_string+0x274>)
 801464e:	930d      	str	r3, [sp, #52]	; 0x34
 8014650:	4b58      	ldr	r3, [pc, #352]	; (80147b4 <get_config_payload_string+0x278>)
 8014652:	930c      	str	r3, [sp, #48]	; 0x30
 8014654:	4b58      	ldr	r3, [pc, #352]	; (80147b8 <get_config_payload_string+0x27c>)
 8014656:	930b      	str	r3, [sp, #44]	; 0x2c
 8014658:	4b50      	ldr	r3, [pc, #320]	; (801479c <get_config_payload_string+0x260>)
 801465a:	930a      	str	r3, [sp, #40]	; 0x28
 801465c:	4b57      	ldr	r3, [pc, #348]	; (80147bc <get_config_payload_string+0x280>)
 801465e:	9309      	str	r3, [sp, #36]	; 0x24
 8014660:	4b5d      	ldr	r3, [pc, #372]	; (80147d8 <get_config_payload_string+0x29c>)
 8014662:	9308      	str	r3, [sp, #32]
 8014664:	4b5d      	ldr	r3, [pc, #372]	; (80147dc <get_config_payload_string+0x2a0>)
 8014666:	9307      	str	r3, [sp, #28]
 8014668:	4b4c      	ldr	r3, [pc, #304]	; (801479c <get_config_payload_string+0x260>)
 801466a:	9306      	str	r3, [sp, #24]
 801466c:	4b53      	ldr	r3, [pc, #332]	; (80147bc <get_config_payload_string+0x280>)
 801466e:	9305      	str	r3, [sp, #20]
 8014670:	4b5b      	ldr	r3, [pc, #364]	; (80147e0 <get_config_payload_string+0x2a4>)
 8014672:	9304      	str	r3, [sp, #16]
 8014674:	4b5b      	ldr	r3, [pc, #364]	; (80147e4 <get_config_payload_string+0x2a8>)
 8014676:	9303      	str	r3, [sp, #12]
 8014678:	4b58      	ldr	r3, [pc, #352]	; (80147dc <get_config_payload_string+0x2a0>)
 801467a:	9302      	str	r3, [sp, #8]
 801467c:	4b54      	ldr	r3, [pc, #336]	; (80147d0 <get_config_payload_string+0x294>)
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	4b46      	ldr	r3, [pc, #280]	; (801479c <get_config_payload_string+0x260>)
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	4b4d      	ldr	r3, [pc, #308]	; (80147bc <get_config_payload_string+0x280>)
 8014686:	4a55      	ldr	r2, [pc, #340]	; (80147dc <get_config_payload_string+0x2a0>)
 8014688:	4952      	ldr	r1, [pc, #328]	; (80147d4 <get_config_payload_string+0x298>)
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f018 ff36 	bl	802d4fc <siprintf>
 8014690:	4603      	mov	r3, r0
 8014692:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014694:	e0e8      	b.n	8014868 <get_config_payload_string+0x32c>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014696:	4b40      	ldr	r3, [pc, #256]	; (8014798 <get_config_payload_string+0x25c>)
 8014698:	9310      	str	r3, [sp, #64]	; 0x40
 801469a:	4b43      	ldr	r3, [pc, #268]	; (80147a8 <get_config_payload_string+0x26c>)
 801469c:	930f      	str	r3, [sp, #60]	; 0x3c
 801469e:	4b43      	ldr	r3, [pc, #268]	; (80147ac <get_config_payload_string+0x270>)
 80146a0:	930e      	str	r3, [sp, #56]	; 0x38
 80146a2:	4b43      	ldr	r3, [pc, #268]	; (80147b0 <get_config_payload_string+0x274>)
 80146a4:	930d      	str	r3, [sp, #52]	; 0x34
 80146a6:	4b43      	ldr	r3, [pc, #268]	; (80147b4 <get_config_payload_string+0x278>)
 80146a8:	930c      	str	r3, [sp, #48]	; 0x30
 80146aa:	4b43      	ldr	r3, [pc, #268]	; (80147b8 <get_config_payload_string+0x27c>)
 80146ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80146ae:	4b3b      	ldr	r3, [pc, #236]	; (801479c <get_config_payload_string+0x260>)
 80146b0:	930a      	str	r3, [sp, #40]	; 0x28
 80146b2:	4b42      	ldr	r3, [pc, #264]	; (80147bc <get_config_payload_string+0x280>)
 80146b4:	9309      	str	r3, [sp, #36]	; 0x24
 80146b6:	4b4c      	ldr	r3, [pc, #304]	; (80147e8 <get_config_payload_string+0x2ac>)
 80146b8:	9308      	str	r3, [sp, #32]
 80146ba:	4b4c      	ldr	r3, [pc, #304]	; (80147ec <get_config_payload_string+0x2b0>)
 80146bc:	9307      	str	r3, [sp, #28]
 80146be:	4b37      	ldr	r3, [pc, #220]	; (801479c <get_config_payload_string+0x260>)
 80146c0:	9306      	str	r3, [sp, #24]
 80146c2:	4b3e      	ldr	r3, [pc, #248]	; (80147bc <get_config_payload_string+0x280>)
 80146c4:	9305      	str	r3, [sp, #20]
 80146c6:	4b4a      	ldr	r3, [pc, #296]	; (80147f0 <get_config_payload_string+0x2b4>)
 80146c8:	9304      	str	r3, [sp, #16]
 80146ca:	4b46      	ldr	r3, [pc, #280]	; (80147e4 <get_config_payload_string+0x2a8>)
 80146cc:	9303      	str	r3, [sp, #12]
 80146ce:	4b47      	ldr	r3, [pc, #284]	; (80147ec <get_config_payload_string+0x2b0>)
 80146d0:	9302      	str	r3, [sp, #8]
 80146d2:	4b3f      	ldr	r3, [pc, #252]	; (80147d0 <get_config_payload_string+0x294>)
 80146d4:	9301      	str	r3, [sp, #4]
 80146d6:	4b31      	ldr	r3, [pc, #196]	; (801479c <get_config_payload_string+0x260>)
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	4b38      	ldr	r3, [pc, #224]	; (80147bc <get_config_payload_string+0x280>)
 80146dc:	4a43      	ldr	r2, [pc, #268]	; (80147ec <get_config_payload_string+0x2b0>)
 80146de:	493d      	ldr	r1, [pc, #244]	; (80147d4 <get_config_payload_string+0x298>)
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f018 ff0b 	bl	802d4fc <siprintf>
 80146e6:	4603      	mov	r3, r0
 80146e8:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80146ea:	e0bd      	b.n	8014868 <get_config_payload_string+0x32c>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 80146ec:	4b2a      	ldr	r3, [pc, #168]	; (8014798 <get_config_payload_string+0x25c>)
 80146ee:	9310      	str	r3, [sp, #64]	; 0x40
 80146f0:	4b2d      	ldr	r3, [pc, #180]	; (80147a8 <get_config_payload_string+0x26c>)
 80146f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80146f4:	4b2d      	ldr	r3, [pc, #180]	; (80147ac <get_config_payload_string+0x270>)
 80146f6:	930e      	str	r3, [sp, #56]	; 0x38
 80146f8:	4b2d      	ldr	r3, [pc, #180]	; (80147b0 <get_config_payload_string+0x274>)
 80146fa:	930d      	str	r3, [sp, #52]	; 0x34
 80146fc:	4b2d      	ldr	r3, [pc, #180]	; (80147b4 <get_config_payload_string+0x278>)
 80146fe:	930c      	str	r3, [sp, #48]	; 0x30
 8014700:	4b2d      	ldr	r3, [pc, #180]	; (80147b8 <get_config_payload_string+0x27c>)
 8014702:	930b      	str	r3, [sp, #44]	; 0x2c
 8014704:	4b25      	ldr	r3, [pc, #148]	; (801479c <get_config_payload_string+0x260>)
 8014706:	930a      	str	r3, [sp, #40]	; 0x28
 8014708:	4b2c      	ldr	r3, [pc, #176]	; (80147bc <get_config_payload_string+0x280>)
 801470a:	9309      	str	r3, [sp, #36]	; 0x24
 801470c:	4b39      	ldr	r3, [pc, #228]	; (80147f4 <get_config_payload_string+0x2b8>)
 801470e:	9308      	str	r3, [sp, #32]
 8014710:	4b39      	ldr	r3, [pc, #228]	; (80147f8 <get_config_payload_string+0x2bc>)
 8014712:	9307      	str	r3, [sp, #28]
 8014714:	4b21      	ldr	r3, [pc, #132]	; (801479c <get_config_payload_string+0x260>)
 8014716:	9306      	str	r3, [sp, #24]
 8014718:	4b28      	ldr	r3, [pc, #160]	; (80147bc <get_config_payload_string+0x280>)
 801471a:	9305      	str	r3, [sp, #20]
 801471c:	4b37      	ldr	r3, [pc, #220]	; (80147fc <get_config_payload_string+0x2c0>)
 801471e:	9304      	str	r3, [sp, #16]
 8014720:	4b30      	ldr	r3, [pc, #192]	; (80147e4 <get_config_payload_string+0x2a8>)
 8014722:	9303      	str	r3, [sp, #12]
 8014724:	4b34      	ldr	r3, [pc, #208]	; (80147f8 <get_config_payload_string+0x2bc>)
 8014726:	9302      	str	r3, [sp, #8]
 8014728:	4b29      	ldr	r3, [pc, #164]	; (80147d0 <get_config_payload_string+0x294>)
 801472a:	9301      	str	r3, [sp, #4]
 801472c:	4b1b      	ldr	r3, [pc, #108]	; (801479c <get_config_payload_string+0x260>)
 801472e:	9300      	str	r3, [sp, #0]
 8014730:	4b22      	ldr	r3, [pc, #136]	; (80147bc <get_config_payload_string+0x280>)
 8014732:	4a31      	ldr	r2, [pc, #196]	; (80147f8 <get_config_payload_string+0x2bc>)
 8014734:	4927      	ldr	r1, [pc, #156]	; (80147d4 <get_config_payload_string+0x298>)
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f018 fee0 	bl	802d4fc <siprintf>
 801473c:	4603      	mov	r3, r0
 801473e:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014740:	e092      	b.n	8014868 <get_config_payload_string+0x32c>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8014742:	4b15      	ldr	r3, [pc, #84]	; (8014798 <get_config_payload_string+0x25c>)
 8014744:	9310      	str	r3, [sp, #64]	; 0x40
 8014746:	4b18      	ldr	r3, [pc, #96]	; (80147a8 <get_config_payload_string+0x26c>)
 8014748:	930f      	str	r3, [sp, #60]	; 0x3c
 801474a:	4b18      	ldr	r3, [pc, #96]	; (80147ac <get_config_payload_string+0x270>)
 801474c:	930e      	str	r3, [sp, #56]	; 0x38
 801474e:	4b18      	ldr	r3, [pc, #96]	; (80147b0 <get_config_payload_string+0x274>)
 8014750:	930d      	str	r3, [sp, #52]	; 0x34
 8014752:	4b18      	ldr	r3, [pc, #96]	; (80147b4 <get_config_payload_string+0x278>)
 8014754:	930c      	str	r3, [sp, #48]	; 0x30
 8014756:	4b18      	ldr	r3, [pc, #96]	; (80147b8 <get_config_payload_string+0x27c>)
 8014758:	930b      	str	r3, [sp, #44]	; 0x2c
 801475a:	4b10      	ldr	r3, [pc, #64]	; (801479c <get_config_payload_string+0x260>)
 801475c:	930a      	str	r3, [sp, #40]	; 0x28
 801475e:	4b17      	ldr	r3, [pc, #92]	; (80147bc <get_config_payload_string+0x280>)
 8014760:	9309      	str	r3, [sp, #36]	; 0x24
 8014762:	4b27      	ldr	r3, [pc, #156]	; (8014800 <get_config_payload_string+0x2c4>)
 8014764:	9308      	str	r3, [sp, #32]
 8014766:	4b27      	ldr	r3, [pc, #156]	; (8014804 <get_config_payload_string+0x2c8>)
 8014768:	9307      	str	r3, [sp, #28]
 801476a:	4b0c      	ldr	r3, [pc, #48]	; (801479c <get_config_payload_string+0x260>)
 801476c:	9306      	str	r3, [sp, #24]
 801476e:	4b13      	ldr	r3, [pc, #76]	; (80147bc <get_config_payload_string+0x280>)
 8014770:	9305      	str	r3, [sp, #20]
 8014772:	4b25      	ldr	r3, [pc, #148]	; (8014808 <get_config_payload_string+0x2cc>)
 8014774:	9304      	str	r3, [sp, #16]
 8014776:	4b1b      	ldr	r3, [pc, #108]	; (80147e4 <get_config_payload_string+0x2a8>)
 8014778:	9303      	str	r3, [sp, #12]
 801477a:	4b22      	ldr	r3, [pc, #136]	; (8014804 <get_config_payload_string+0x2c8>)
 801477c:	9302      	str	r3, [sp, #8]
 801477e:	4b14      	ldr	r3, [pc, #80]	; (80147d0 <get_config_payload_string+0x294>)
 8014780:	9301      	str	r3, [sp, #4]
 8014782:	4b06      	ldr	r3, [pc, #24]	; (801479c <get_config_payload_string+0x260>)
 8014784:	9300      	str	r3, [sp, #0]
 8014786:	4b0d      	ldr	r3, [pc, #52]	; (80147bc <get_config_payload_string+0x280>)
 8014788:	4a1e      	ldr	r2, [pc, #120]	; (8014804 <get_config_payload_string+0x2c8>)
 801478a:	4912      	ldr	r1, [pc, #72]	; (80147d4 <get_config_payload_string+0x298>)
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f018 feb5 	bl	802d4fc <siprintf>
 8014792:	4603      	mov	r3, r0
 8014794:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014796:	e067      	b.n	8014868 <get_config_payload_string+0x32c>
 8014798:	200008ac 	.word	0x200008ac
 801479c:	2000089c 	.word	0x2000089c
 80147a0:	08034050 	.word	0x08034050
 80147a4:	08034210 	.word	0x08034210
 80147a8:	08032a54 	.word	0x08032a54
 80147ac:	08032a5c 	.word	0x08032a5c
 80147b0:	08032a64 	.word	0x08032a64
 80147b4:	08032a74 	.word	0x08032a74
 80147b8:	08032a84 	.word	0x08032a84
 80147bc:	08032a14 	.word	0x08032a14
 80147c0:	08032a94 	.word	0x08032a94
 80147c4:	08032a0c 	.word	0x08032a0c
 80147c8:	08032a98 	.word	0x08032a98
 80147cc:	08032aa8 	.word	0x08032aa8
 80147d0:	08032acc 	.word	0x08032acc
 80147d4:	080343a8 	.word	0x080343a8
 80147d8:	08032ad4 	.word	0x08032ad4
 80147dc:	08032a1c 	.word	0x08032a1c
 80147e0:	08032ad8 	.word	0x08032ad8
 80147e4:	08032ae8 	.word	0x08032ae8
 80147e8:	08032aec 	.word	0x08032aec
 80147ec:	08032a24 	.word	0x08032a24
 80147f0:	08032af0 	.word	0x08032af0
 80147f4:	08032b14 	.word	0x08032b14
 80147f8:	08032a2c 	.word	0x08032a2c
 80147fc:	08032b18 	.word	0x08032b18
 8014800:	08032b38 	.word	0x08032b38
 8014804:	08032a3c 	.word	0x08032a3c
 8014808:	08032b3c 	.word	0x08032b3c
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 801480c:	4b18      	ldr	r3, [pc, #96]	; (8014870 <get_config_payload_string+0x334>)
 801480e:	9310      	str	r3, [sp, #64]	; 0x40
 8014810:	4b18      	ldr	r3, [pc, #96]	; (8014874 <get_config_payload_string+0x338>)
 8014812:	930f      	str	r3, [sp, #60]	; 0x3c
 8014814:	4b18      	ldr	r3, [pc, #96]	; (8014878 <get_config_payload_string+0x33c>)
 8014816:	930e      	str	r3, [sp, #56]	; 0x38
 8014818:	4b18      	ldr	r3, [pc, #96]	; (801487c <get_config_payload_string+0x340>)
 801481a:	930d      	str	r3, [sp, #52]	; 0x34
 801481c:	4b18      	ldr	r3, [pc, #96]	; (8014880 <get_config_payload_string+0x344>)
 801481e:	930c      	str	r3, [sp, #48]	; 0x30
 8014820:	4b18      	ldr	r3, [pc, #96]	; (8014884 <get_config_payload_string+0x348>)
 8014822:	930b      	str	r3, [sp, #44]	; 0x2c
 8014824:	4b18      	ldr	r3, [pc, #96]	; (8014888 <get_config_payload_string+0x34c>)
 8014826:	930a      	str	r3, [sp, #40]	; 0x28
 8014828:	4b18      	ldr	r3, [pc, #96]	; (801488c <get_config_payload_string+0x350>)
 801482a:	9309      	str	r3, [sp, #36]	; 0x24
 801482c:	4b18      	ldr	r3, [pc, #96]	; (8014890 <get_config_payload_string+0x354>)
 801482e:	9308      	str	r3, [sp, #32]
 8014830:	4b18      	ldr	r3, [pc, #96]	; (8014894 <get_config_payload_string+0x358>)
 8014832:	9307      	str	r3, [sp, #28]
 8014834:	4b14      	ldr	r3, [pc, #80]	; (8014888 <get_config_payload_string+0x34c>)
 8014836:	9306      	str	r3, [sp, #24]
 8014838:	4b14      	ldr	r3, [pc, #80]	; (801488c <get_config_payload_string+0x350>)
 801483a:	9305      	str	r3, [sp, #20]
 801483c:	4b16      	ldr	r3, [pc, #88]	; (8014898 <get_config_payload_string+0x35c>)
 801483e:	9304      	str	r3, [sp, #16]
 8014840:	4b16      	ldr	r3, [pc, #88]	; (801489c <get_config_payload_string+0x360>)
 8014842:	9303      	str	r3, [sp, #12]
 8014844:	4b13      	ldr	r3, [pc, #76]	; (8014894 <get_config_payload_string+0x358>)
 8014846:	9302      	str	r3, [sp, #8]
 8014848:	4b15      	ldr	r3, [pc, #84]	; (80148a0 <get_config_payload_string+0x364>)
 801484a:	9301      	str	r3, [sp, #4]
 801484c:	4b0e      	ldr	r3, [pc, #56]	; (8014888 <get_config_payload_string+0x34c>)
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	4b0e      	ldr	r3, [pc, #56]	; (801488c <get_config_payload_string+0x350>)
 8014852:	4a10      	ldr	r2, [pc, #64]	; (8014894 <get_config_payload_string+0x358>)
 8014854:	4913      	ldr	r1, [pc, #76]	; (80148a4 <get_config_payload_string+0x368>)
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f018 fe50 	bl	802d4fc <siprintf>
 801485c:	4603      	mov	r3, r0
 801485e:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014860:	e002      	b.n	8014868 <get_config_payload_string+0x32c>

		default:
			return -1;
 8014862:	f04f 33ff 	mov.w	r3, #4294967295
 8014866:	e7ff      	b.n	8014868 <get_config_payload_string+0x32c>
			break;
	}
}
 8014868:	4618      	mov	r0, r3
 801486a:	3714      	adds	r7, #20
 801486c:	46bd      	mov	sp, r7
 801486e:	bd90      	pop	{r4, r7, pc}
 8014870:	200008ac 	.word	0x200008ac
 8014874:	08032a54 	.word	0x08032a54
 8014878:	08032a5c 	.word	0x08032a5c
 801487c:	08032a64 	.word	0x08032a64
 8014880:	08032a74 	.word	0x08032a74
 8014884:	08032a84 	.word	0x08032a84
 8014888:	2000089c 	.word	0x2000089c
 801488c:	08032a14 	.word	0x08032a14
 8014890:	08032b68 	.word	0x08032b68
 8014894:	08032a4c 	.word	0x08032a4c
 8014898:	08032b6c 	.word	0x08032b6c
 801489c:	08032ae8 	.word	0x08032ae8
 80148a0:	08032acc 	.word	0x08032acc
 80148a4:	080343a8 	.word	0x080343a8

080148a8 <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af02      	add	r7, sp, #8
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	460b      	mov	r3, r1
 80148b2:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 80148ba:	4b11      	ldr	r3, [pc, #68]	; (8014900 <generate_status_topik+0x58>)
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	4b11      	ldr	r3, [pc, #68]	; (8014904 <generate_status_topik+0x5c>)
 80148c0:	4a11      	ldr	r2, [pc, #68]	; (8014908 <generate_status_topik+0x60>)
 80148c2:	4912      	ldr	r1, [pc, #72]	; (801490c <generate_status_topik+0x64>)
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f018 fe19 	bl	802d4fc <siprintf>

	switch (topik_type) {
 80148ca:	78fb      	ldrb	r3, [r7, #3]
 80148cc:	2b01      	cmp	r3, #1
 80148ce:	d002      	beq.n	80148d6 <generate_status_topik+0x2e>
 80148d0:	2b02      	cmp	r3, #2
 80148d2:	d006      	beq.n	80148e2 <generate_status_topik+0x3a>
 80148d4:	e00b      	b.n	80148ee <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 80148d6:	4a0b      	ldr	r2, [pc, #44]	; (8014904 <generate_status_topik+0x5c>)
 80148d8:	490d      	ldr	r1, [pc, #52]	; (8014910 <generate_status_topik+0x68>)
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f018 fe0e 	bl	802d4fc <siprintf>
			break;
 80148e0:	e008      	b.n	80148f4 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 80148e2:	4a08      	ldr	r2, [pc, #32]	; (8014904 <generate_status_topik+0x5c>)
 80148e4:	490b      	ldr	r1, [pc, #44]	; (8014914 <generate_status_topik+0x6c>)
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f018 fe08 	bl	802d4fc <siprintf>
			break;
 80148ec:	e002      	b.n	80148f4 <generate_status_topik+0x4c>

		default:
			return -1;
 80148ee:	f04f 33ff 	mov.w	r3, #4294967295
 80148f2:	e000      	b.n	80148f6 <generate_status_topik+0x4e>
			break;
	}

	return 0;
 80148f4:	2300      	movs	r3, #0
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3708      	adds	r7, #8
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	08032acc 	.word	0x08032acc
 8014904:	2000089c 	.word	0x2000089c
 8014908:	08032a14 	.word	0x08032a14
 801490c:	08032b94 	.word	0x08032b94
 8014910:	20000094 	.word	0x20000094
 8014914:	200000a4 	.word	0x200000a4

08014918 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014918:	b580      	push	{r7, lr}
 801491a:	b086      	sub	sp, #24
 801491c:	af02      	add	r7, sp, #8
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	60b9      	str	r1, [r7, #8]
 8014922:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f7fb fe26 	bl	8010578 <__aeabi_f2d>
 801492c:	4602      	mov	r2, r0
 801492e:	460b      	mov	r3, r1
 8014930:	e9cd 2300 	strd	r2, r3, [sp]
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	4904      	ldr	r1, [pc, #16]	; (8014948 <generate_key_value_JSON+0x30>)
 8014938:	68f8      	ldr	r0, [r7, #12]
 801493a:	f018 fddf 	bl	802d4fc <siprintf>
}
 801493e:	bf00      	nop
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
 8014946:	bf00      	nop
 8014948:	08032ba0 	.word	0x08032ba0

0801494c <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 801494c:	b5b0      	push	{r4, r5, r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	60b9      	str	r1, [r7, #8]
 8014956:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 801495a:	68f8      	ldr	r0, [r7, #12]
 801495c:	f7fb fdea 	bl	8010534 <__aeabi_ui2d>
 8014960:	4604      	mov	r4, r0
 8014962:	460d      	mov	r5, r1
 8014964:	68b8      	ldr	r0, [r7, #8]
 8014966:	f7fb fde5 	bl	8010534 <__aeabi_ui2d>
 801496a:	f04f 0200 	mov.w	r2, #0
 801496e:	4b17      	ldr	r3, [pc, #92]	; (80149cc <InitHLW8032+0x80>)
 8014970:	f7fb fe5a 	bl	8010628 <__aeabi_dmul>
 8014974:	4602      	mov	r2, r0
 8014976:	460b      	mov	r3, r1
 8014978:	4620      	mov	r0, r4
 801497a:	4629      	mov	r1, r5
 801497c:	f7fb ff7e 	bl	801087c <__aeabi_ddiv>
 8014980:	4602      	mov	r2, r0
 8014982:	460b      	mov	r3, r1
 8014984:	4610      	mov	r0, r2
 8014986:	4619      	mov	r1, r3
 8014988:	f7fc f946 	bl	8010c18 <__aeabi_d2f>
 801498c:	4603      	mov	r3, r0
 801498e:	4a10      	ldr	r2, [pc, #64]	; (80149d0 <InitHLW8032+0x84>)
 8014990:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f7fb fdf0 	bl	8010578 <__aeabi_f2d>
 8014998:	f04f 0200 	mov.w	r2, #0
 801499c:	4b0b      	ldr	r3, [pc, #44]	; (80149cc <InitHLW8032+0x80>)
 801499e:	f7fb fe43 	bl	8010628 <__aeabi_dmul>
 80149a2:	4602      	mov	r2, r0
 80149a4:	460b      	mov	r3, r1
 80149a6:	f04f 0000 	mov.w	r0, #0
 80149aa:	490a      	ldr	r1, [pc, #40]	; (80149d4 <InitHLW8032+0x88>)
 80149ac:	f7fb ff66 	bl	801087c <__aeabi_ddiv>
 80149b0:	4602      	mov	r2, r0
 80149b2:	460b      	mov	r3, r1
 80149b4:	4610      	mov	r0, r2
 80149b6:	4619      	mov	r1, r3
 80149b8:	f7fc f92e 	bl	8010c18 <__aeabi_d2f>
 80149bc:	4603      	mov	r3, r0
 80149be:	4a06      	ldr	r2, [pc, #24]	; (80149d8 <InitHLW8032+0x8c>)
 80149c0:	6013      	str	r3, [r2, #0]
}
 80149c2:	bf00      	nop
 80149c4:	3710      	adds	r7, #16
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bdb0      	pop	{r4, r5, r7, pc}
 80149ca:	bf00      	nop
 80149cc:	408f4000 	.word	0x408f4000
 80149d0:	200000b4 	.word	0x200000b4
 80149d4:	3ff00000 	.word	0x3ff00000
 80149d8:	200000b8 	.word	0x200000b8

080149dc <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 80149dc:	b480      	push	{r7}
 80149de:	b085      	sub	sp, #20
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 80149e4:	2300      	movs	r3, #0
 80149e6:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 80149e8:	2302      	movs	r3, #2
 80149ea:	73fb      	strb	r3, [r7, #15]
 80149ec:	e00e      	b.n	8014a0c <Checksum+0x30>
		tmp = string[i];
 80149ee:	7bfb      	ldrb	r3, [r7, #15]
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	4413      	add	r3, r2
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 80149f8:	7bfb      	ldrb	r3, [r7, #15]
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	4413      	add	r3, r2
 80149fe:	781a      	ldrb	r2, [r3, #0]
 8014a00:	7bbb      	ldrb	r3, [r7, #14]
 8014a02:	4413      	add	r3, r2
 8014a04:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014a06:	7bfb      	ldrb	r3, [r7, #15]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	73fb      	strb	r3, [r7, #15]
 8014a0c:	7bfb      	ldrb	r3, [r7, #15]
 8014a0e:	2b16      	cmp	r3, #22
 8014a10:	d9ed      	bls.n	80149ee <Checksum+0x12>
	}
	if (byte == string[23])
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	3317      	adds	r3, #23
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	7bba      	ldrb	r2, [r7, #14]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d101      	bne.n	8014a22 <Checksum+0x46>
	{
		return 1;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	e000      	b.n	8014a24 <Checksum+0x48>
	}
	return 0;
 8014a22:	2300      	movs	r3, #0
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3714      	adds	r7, #20
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr

08014a30 <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	215a      	movs	r1, #90	; 0x5a
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fb fbce 	bl	80101e0 <strcmp>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d102      	bne.n	8014a50 <RecvRawString+0x20>
		return -1; //error code
 8014a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a4e:	e0a9      	b.n	8014ba4 <RecvRawString+0x174>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f7ff ffc3 	bl	80149dc <Checksum>
 8014a56:	4603      	mov	r3, r0
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d102      	bne.n	8014a62 <RecvRawString+0x32>
		return -2; //Checksum Error
 8014a5c:	f06f 0301 	mvn.w	r3, #1
 8014a60:	e0a0      	b.n	8014ba4 <RecvRawString+0x174>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	3302      	adds	r3, #2
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	041a      	lsls	r2, r3, #16
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	3303      	adds	r3, #3
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	021b      	lsls	r3, r3, #8
 8014a72:	4413      	add	r3, r2
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	3204      	adds	r2, #4
 8014a78:	7812      	ldrb	r2, [r2, #0]
 8014a7a:	4413      	add	r3, r2
 8014a7c:	4a4b      	ldr	r2, [pc, #300]	; (8014bac <RecvRawString+0x17c>)
 8014a7e:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	3314      	adds	r3, #20
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	099b      	lsrs	r3, r3, #6
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	f003 0301 	and.w	r3, r3, #1
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d00e      	beq.n	8014ab0 <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	3305      	adds	r3, #5
 8014a96:	781b      	ldrb	r3, [r3, #0]
 8014a98:	041a      	lsls	r2, r3, #16
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	3306      	adds	r3, #6
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	021b      	lsls	r3, r3, #8
 8014aa2:	4413      	add	r3, r2
 8014aa4:	687a      	ldr	r2, [r7, #4]
 8014aa6:	3207      	adds	r2, #7
 8014aa8:	7812      	ldrb	r2, [r2, #0]
 8014aaa:	4413      	add	r3, r2
 8014aac:	4a40      	ldr	r2, [pc, #256]	; (8014bb0 <RecvRawString+0x180>)
 8014aae:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	3308      	adds	r3, #8
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	041a      	lsls	r2, r3, #16
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	3309      	adds	r3, #9
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	021b      	lsls	r3, r3, #8
 8014ac0:	4413      	add	r3, r2
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	320a      	adds	r2, #10
 8014ac6:	7812      	ldrb	r2, [r2, #0]
 8014ac8:	4413      	add	r3, r2
 8014aca:	4a3a      	ldr	r2, [pc, #232]	; (8014bb4 <RecvRawString+0x184>)
 8014acc:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	3314      	adds	r3, #20
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	095b      	lsrs	r3, r3, #5
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	f003 0301 	and.w	r3, r3, #1
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00e      	beq.n	8014afe <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	330b      	adds	r3, #11
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	041a      	lsls	r2, r3, #16
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	330c      	adds	r3, #12
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	021b      	lsls	r3, r3, #8
 8014af0:	4413      	add	r3, r2
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	320d      	adds	r2, #13
 8014af6:	7812      	ldrb	r2, [r2, #0]
 8014af8:	4413      	add	r3, r2
 8014afa:	4a2f      	ldr	r2, [pc, #188]	; (8014bb8 <RecvRawString+0x188>)
 8014afc:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	330e      	adds	r3, #14
 8014b02:	781b      	ldrb	r3, [r3, #0]
 8014b04:	041a      	lsls	r2, r3, #16
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	330f      	adds	r3, #15
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	021b      	lsls	r3, r3, #8
 8014b0e:	4413      	add	r3, r2
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	3210      	adds	r2, #16
 8014b14:	7812      	ldrb	r2, [r2, #0]
 8014b16:	4413      	add	r3, r2
 8014b18:	4a28      	ldr	r2, [pc, #160]	; (8014bbc <RecvRawString+0x18c>)
 8014b1a:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	3314      	adds	r3, #20
 8014b20:	781b      	ldrb	r3, [r3, #0]
 8014b22:	091b      	lsrs	r3, r3, #4
 8014b24:	b2db      	uxtb	r3, r3
 8014b26:	f003 0301 	and.w	r3, r3, #1
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d00e      	beq.n	8014b4c <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	3311      	adds	r3, #17
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	041a      	lsls	r2, r3, #16
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	3312      	adds	r3, #18
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	021b      	lsls	r3, r3, #8
 8014b3e:	4413      	add	r3, r2
 8014b40:	687a      	ldr	r2, [r7, #4]
 8014b42:	3213      	adds	r2, #19
 8014b44:	7812      	ldrb	r2, [r2, #0]
 8014b46:	4413      	add	r3, r2
 8014b48:	4a1d      	ldr	r2, [pc, #116]	; (8014bc0 <RecvRawString+0x190>)
 8014b4a:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	3315      	adds	r3, #21
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	021b      	lsls	r3, r3, #8
 8014b56:	b29a      	uxth	r2, r3
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	3316      	adds	r3, #22
 8014b5c:	781b      	ldrb	r3, [r3, #0]
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	4413      	add	r3, r2
 8014b62:	b29a      	uxth	r2, r3
 8014b64:	4b17      	ldr	r3, [pc, #92]	; (8014bc4 <RecvRawString+0x194>)
 8014b66:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	3314      	adds	r3, #20
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	09db      	lsrs	r3, r3, #7
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	f003 0301 	and.w	r3, r3, #1
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d004      	beq.n	8014b84 <RecvRawString+0x154>
	{
		PFData++;
 8014b7a:	4b13      	ldr	r3, [pc, #76]	; (8014bc8 <RecvRawString+0x198>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	4a11      	ldr	r2, [pc, #68]	; (8014bc8 <RecvRawString+0x198>)
 8014b82:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014b84:	4b11      	ldr	r3, [pc, #68]	; (8014bcc <RecvRawString+0x19c>)
 8014b86:	881a      	ldrh	r2, [r3, #0]
 8014b88:	4b0e      	ldr	r3, [pc, #56]	; (8014bc4 <RecvRawString+0x194>)
 8014b8a:	881b      	ldrh	r3, [r3, #0]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d904      	bls.n	8014b9a <RecvRawString+0x16a>
		test_flag++;
 8014b90:	4b0f      	ldr	r3, [pc, #60]	; (8014bd0 <RecvRawString+0x1a0>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	3301      	adds	r3, #1
 8014b96:	4a0e      	ldr	r2, [pc, #56]	; (8014bd0 <RecvRawString+0x1a0>)
 8014b98:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8014b9a:	4b0a      	ldr	r3, [pc, #40]	; (8014bc4 <RecvRawString+0x194>)
 8014b9c:	881a      	ldrh	r2, [r3, #0]
 8014b9e:	4b0b      	ldr	r3, [pc, #44]	; (8014bcc <RecvRawString+0x19c>)
 8014ba0:	801a      	strh	r2, [r3, #0]

	return 0;
 8014ba2:	2300      	movs	r3, #0
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3708      	adds	r7, #8
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	200008c0 	.word	0x200008c0
 8014bb0:	200008c4 	.word	0x200008c4
 8014bb4:	200008d0 	.word	0x200008d0
 8014bb8:	200008d4 	.word	0x200008d4
 8014bbc:	200008c8 	.word	0x200008c8
 8014bc0:	200008cc 	.word	0x200008cc
 8014bc4:	200008dc 	.word	0x200008dc
 8014bc8:	200008d8 	.word	0x200008d8
 8014bcc:	200008de 	.word	0x200008de
 8014bd0:	200008e0 	.word	0x200008e0

08014bd4 <GetVolRaw>:

float GetVolRaw(void){
 8014bd4:	b480      	push	{r7}
 8014bd6:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014bd8:	4b0e      	ldr	r3, [pc, #56]	; (8014c14 <GetVolRaw+0x40>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d102      	bne.n	8014be6 <GetVolRaw+0x12>
		return 0;
 8014be0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014c18 <GetVolRaw+0x44>
 8014be4:	e00d      	b.n	8014c02 <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014be6:	4b0d      	ldr	r3, [pc, #52]	; (8014c1c <GetVolRaw+0x48>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	ee07 3a90 	vmov	s15, r3
 8014bee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014bf2:	4b08      	ldr	r3, [pc, #32]	; (8014c14 <GetVolRaw+0x40>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	ee07 3a90 	vmov	s15, r3
 8014bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014bfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014c02:	eef0 7a66 	vmov.f32	s15, s13
 8014c06:	eeb0 0a67 	vmov.f32	s0, s15
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	200008c4 	.word	0x200008c4
 8014c18:	00000000 	.word	0x00000000
 8014c1c:	200008c0 	.word	0x200008c0

08014c20 <GetVoltage>:

float GetVoltage(void){
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8014c26:	f7ff ffd5 	bl	8014bd4 <GetVolRaw>
 8014c2a:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 8014c2e:	4b0d      	ldr	r3, [pc, #52]	; (8014c64 <GetVoltage+0x44>)
 8014c30:	edd3 7a00 	vldr	s15, [r3]
 8014c34:	ed97 7a00 	vldr	s14, [r7]
 8014c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c3c:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 8014c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8014c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c4c:	d501      	bpl.n	8014c52 <GetVoltage+0x32>
 8014c4e:	4b06      	ldr	r3, [pc, #24]	; (8014c68 <GetVoltage+0x48>)
 8014c50:	607b      	str	r3, [r7, #4]
	return RealVolt;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	ee07 3a90 	vmov	s15, r3
}
 8014c58:	eeb0 0a67 	vmov.f32	s0, s15
 8014c5c:	3708      	adds	r7, #8
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	200000b4 	.word	0x200000b4
 8014c68:	3089705f 	.word	0x3089705f

08014c6c <GetCurrentRaw>:

float GetCurrentRaw(void){
 8014c6c:	b480      	push	{r7}
 8014c6e:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8014c70:	4b0e      	ldr	r3, [pc, #56]	; (8014cac <GetCurrentRaw+0x40>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d102      	bne.n	8014c7e <GetCurrentRaw+0x12>
		return 0;
 8014c78:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014cb0 <GetCurrentRaw+0x44>
 8014c7c:	e00d      	b.n	8014c9a <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8014c7e:	4b0d      	ldr	r3, [pc, #52]	; (8014cb4 <GetCurrentRaw+0x48>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	ee07 3a90 	vmov	s15, r3
 8014c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014c8a:	4b08      	ldr	r3, [pc, #32]	; (8014cac <GetCurrentRaw+0x40>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	ee07 3a90 	vmov	s15, r3
 8014c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014c96:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014c9a:	eef0 7a66 	vmov.f32	s15, s13
 8014c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop
 8014cac:	200008d4 	.word	0x200008d4
 8014cb0:	00000000 	.word	0x00000000
 8014cb4:	200008d0 	.word	0x200008d0

08014cb8 <GetCurrent>:

float GetCurrent(void){
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8014cbe:	f7ff ffd5 	bl	8014c6c <GetCurrentRaw>
 8014cc2:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014cc6:	4b0d      	ldr	r3, [pc, #52]	; (8014cfc <GetCurrent+0x44>)
 8014cc8:	edd3 7a00 	vldr	s15, [r3]
 8014ccc:	ed97 7a00 	vldr	s14, [r7]
 8014cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cd4:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8014cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ce4:	d501      	bpl.n	8014cea <GetCurrent+0x32>
 8014ce6:	4b06      	ldr	r3, [pc, #24]	; (8014d00 <GetCurrent+0x48>)
 8014ce8:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	ee07 3a90 	vmov	s15, r3
}
 8014cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8014cf4:	3708      	adds	r7, #8
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	200000b8 	.word	0x200000b8
 8014d00:	3089705f 	.word	0x3089705f

08014d04 <GetActivePower>:

float GetActivePower(void){
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 8014d0a:	4b18      	ldr	r3, [pc, #96]	; (8014d6c <GetActivePower+0x68>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d102      	bne.n	8014d18 <GetActivePower+0x14>
		return 0;
 8014d12:	f04f 0300 	mov.w	r3, #0
 8014d16:	e01f      	b.n	8014d58 <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014d18:	4b15      	ldr	r3, [pc, #84]	; (8014d70 <GetActivePower+0x6c>)
 8014d1a:	681a      	ldr	r2, [r3, #0]
 8014d1c:	4b13      	ldr	r3, [pc, #76]	; (8014d6c <GetActivePower+0x68>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d24:	ee07 3a90 	vmov	s15, r3
 8014d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014d2c:	4b11      	ldr	r3, [pc, #68]	; (8014d74 <GetActivePower+0x70>)
 8014d2e:	edd3 7a00 	vldr	s15, [r3]
 8014d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014d36:	4b10      	ldr	r3, [pc, #64]	; (8014d78 <GetActivePower+0x74>)
 8014d38:	edd3 7a00 	vldr	s15, [r3]
 8014d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d40:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 8014d44:	edd7 7a01 	vldr	s15, [r7, #4]
 8014d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d50:	d501      	bpl.n	8014d56 <GetActivePower+0x52>
 8014d52:	4b0a      	ldr	r3, [pc, #40]	; (8014d7c <GetActivePower+0x78>)
 8014d54:	607b      	str	r3, [r7, #4]

	return tmp;
 8014d56:	687b      	ldr	r3, [r7, #4]
}
 8014d58:	ee07 3a90 	vmov	s15, r3
 8014d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8014d60:	370c      	adds	r7, #12
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr
 8014d6a:	bf00      	nop
 8014d6c:	200008cc 	.word	0x200008cc
 8014d70:	200008c8 	.word	0x200008c8
 8014d74:	200000b4 	.word	0x200000b4
 8014d78:	200000b8 	.word	0x200000b8
 8014d7c:	3089705f 	.word	0x3089705f

08014d80 <GetApparentPower>:

float GetApparentPower(void){
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 8014d86:	f7ff ff4b 	bl	8014c20 <GetVoltage>
 8014d8a:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 8014d8e:	f7ff ff93 	bl	8014cb8 <GetCurrent>
 8014d92:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 8014d96:	ed97 7a02 	vldr	s14, [r7, #8]
 8014d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8014d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014da2:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 8014da6:	edd7 7a03 	vldr	s15, [r7, #12]
 8014daa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8014dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db6:	d501      	bpl.n	8014dbc <GetApparentPower+0x3c>
 8014db8:	4b04      	ldr	r3, [pc, #16]	; (8014dcc <GetApparentPower+0x4c>)
 8014dba:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	ee07 3a90 	vmov	s15, r3
}
 8014dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	3089705f 	.word	0x3089705f

08014dd0 <PowerFactor>:

float PowerFactor(void){
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b084      	sub	sp, #16
 8014dd4:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 8014dd6:	f7ff ff95 	bl	8014d04 <GetActivePower>
 8014dda:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8014dde:	f7ff ffcf 	bl	8014d80 <GetApparentPower>
 8014de2:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 0;
 8014de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8014dea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df2:	d102      	bne.n	8014dfa <PowerFactor+0x2a>
 8014df4:	f04f 0300 	mov.w	r3, #0
 8014df8:	e01e      	b.n	8014e38 <PowerFactor+0x68>
	if (ActivePower 	== 0) return 0;
 8014dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8014dfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e06:	d102      	bne.n	8014e0e <PowerFactor+0x3e>
 8014e08:	f04f 0300 	mov.w	r3, #0
 8014e0c:	e014      	b.n	8014e38 <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8014e0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8014e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8014e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e1e:	dd02      	ble.n	8014e26 <PowerFactor+0x56>
 8014e20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014e24:	e008      	b.n	8014e38 <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 8014e26:	edd7 6a03 	vldr	s13, [r7, #12]
 8014e2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8014e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014e32:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 8014e36:	687b      	ldr	r3, [r7, #4]
}
 8014e38:	ee07 3a90 	vmov	s15, r3
 8014e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}
	...

08014e48 <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 8014e48:	b480      	push	{r7}
 8014e4a:	af00      	add	r7, sp, #0
	return test_flag;
 8014e4c:	4b03      	ldr	r3, [pc, #12]	; (8014e5c <GetTestPulse+0x14>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	46bd      	mov	sp, r7
 8014e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e58:	4770      	bx	lr
 8014e5a:	bf00      	nop
 8014e5c:	200008e0 	.word	0x200008e0

08014e60 <GetCountedPulse>:

uint32_t GetCountedPulse(){
 8014e60:	b480      	push	{r7}
 8014e62:	af00      	add	r7, sp, #0
	return PFData;
 8014e64:	4b03      	ldr	r3, [pc, #12]	; (8014e74 <GetCountedPulse+0x14>)
 8014e66:	681b      	ldr	r3, [r3, #0]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e70:	4770      	bx	lr
 8014e72:	bf00      	nop
 8014e74:	200008d8 	.word	0x200008d8

08014e78 <GetPFReg>:

uint32_t GetPFReg(){
 8014e78:	b480      	push	{r7}
 8014e7a:	af00      	add	r7, sp, #0
	return PF_reg;
 8014e7c:	4b03      	ldr	r3, [pc, #12]	; (8014e8c <GetPFReg+0x14>)
 8014e7e:	881b      	ldrh	r3, [r3, #0]
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	46bd      	mov	sp, r7
 8014e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e88:	4770      	bx	lr
 8014e8a:	bf00      	nop
 8014e8c:	200008dc 	.word	0x200008dc

08014e90 <GetKWh>:

float GetKWh(void){
 8014e90:	b5b0      	push	{r4, r5, r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 8014e96:	f7ff ff73 	bl	8014d80 <GetApparentPower>
 8014e9a:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 8014e9e:	4b38      	ldr	r3, [pc, #224]	; (8014f80 <GetKWh+0xf0>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7fb fb46 	bl	8010534 <__aeabi_ui2d>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	460b      	mov	r3, r1
 8014eac:	f04f 0000 	mov.w	r0, #0
 8014eb0:	4934      	ldr	r1, [pc, #208]	; (8014f84 <GetKWh+0xf4>)
 8014eb2:	f7fb fce3 	bl	801087c <__aeabi_ddiv>
 8014eb6:	4602      	mov	r2, r0
 8014eb8:	460b      	mov	r3, r1
 8014eba:	4614      	mov	r4, r2
 8014ebc:	461d      	mov	r5, r3
 8014ebe:	4b32      	ldr	r3, [pc, #200]	; (8014f88 <GetKWh+0xf8>)
 8014ec0:	ed93 7a00 	vldr	s14, [r3]
 8014ec4:	4b31      	ldr	r3, [pc, #196]	; (8014f8c <GetKWh+0xfc>)
 8014ec6:	edd3 7a00 	vldr	s15, [r3]
 8014eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ece:	ee17 0a90 	vmov	r0, s15
 8014ed2:	f7fb fb51 	bl	8010578 <__aeabi_f2d>
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	460b      	mov	r3, r1
 8014eda:	f04f 0000 	mov.w	r0, #0
 8014ede:	4929      	ldr	r1, [pc, #164]	; (8014f84 <GetKWh+0xf4>)
 8014ee0:	f7fb fccc 	bl	801087c <__aeabi_ddiv>
 8014ee4:	4602      	mov	r2, r0
 8014ee6:	460b      	mov	r3, r1
 8014ee8:	4620      	mov	r0, r4
 8014eea:	4629      	mov	r1, r5
 8014eec:	f7fb fb9c 	bl	8010628 <__aeabi_dmul>
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	460b      	mov	r3, r1
 8014ef4:	4610      	mov	r0, r2
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	a31d      	add	r3, pc, #116	; (adr r3, 8014f70 <GetKWh+0xe0>)
 8014efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efe:	f7fb fb93 	bl	8010628 <__aeabi_dmul>
 8014f02:	4602      	mov	r2, r0
 8014f04:	460b      	mov	r3, r1
 8014f06:	4610      	mov	r0, r2
 8014f08:	4619      	mov	r1, r3
 8014f0a:	a31b      	add	r3, pc, #108	; (adr r3, 8014f78 <GetKWh+0xe8>)
 8014f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f10:	f7fb fb8a 	bl	8010628 <__aeabi_dmul>
 8014f14:	4602      	mov	r2, r0
 8014f16:	460b      	mov	r3, r1
 8014f18:	4610      	mov	r0, r2
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	f7fb fe7c 	bl	8010c18 <__aeabi_d2f>
 8014f20:	4603      	mov	r3, r0
 8014f22:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 8014f24:	f7ff ff90 	bl	8014e48 <GetTestPulse>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	041c      	lsls	r4, r3, #16
 8014f2c:	f7ff ffa4 	bl	8014e78 <GetPFReg>
 8014f30:	4603      	mov	r3, r0
 8014f32:	4423      	add	r3, r4
 8014f34:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	ee07 3a90 	vmov	s15, r3
 8014f3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014f40:	ed97 7a01 	vldr	s14, [r7, #4]
 8014f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014f48:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 8014f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8014f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f58:	d501      	bpl.n	8014f5e <GetKWh+0xce>
 8014f5a:	4b0d      	ldr	r3, [pc, #52]	; (8014f90 <GetKWh+0x100>)
 8014f5c:	60fb      	str	r3, [r7, #12]

	return kWh;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	ee07 3a90 	vmov	s15, r3
}
 8014f64:	eeb0 0a67 	vmov.f32	s0, s15
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	00000000 	.word	0x00000000
 8014f74:	41cdcd65 	.word	0x41cdcd65
 8014f78:	00000000 	.word	0x00000000
 8014f7c:	40ac2000 	.word	0x40ac2000
 8014f80:	200008c8 	.word	0x200008c8
 8014f84:	3ff00000 	.word	0x3ff00000
 8014f88:	200000b4 	.word	0x200000b4
 8014f8c:	200000b8 	.word	0x200000b8
 8014f90:	3089705f 	.word	0x3089705f

08014f94 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8014f94:	b480      	push	{r7}
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	bf00      	nop
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa0:	4770      	bx	lr
	...

08014fa4 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 8014fa4:	b480      	push	{r7}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	607a      	str	r2, [r7, #4]
 8014fb0:	603b      	str	r3, [r7, #0]

	if (chip_select){
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d003      	beq.n	8014fc0 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8014fb8:	4a0e      	ldr	r2, [pc, #56]	; (8014ff4 <SPI_flash_reg_cb+0x50>)
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	60d3      	str	r3, [r2, #12]
 8014fbe:	e002      	b.n	8014fc6 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8014fc0:	4b0c      	ldr	r3, [pc, #48]	; (8014ff4 <SPI_flash_reg_cb+0x50>)
 8014fc2:	4a0d      	ldr	r2, [pc, #52]	; (8014ff8 <SPI_flash_reg_cb+0x54>)
 8014fc4:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d003      	beq.n	8014fd4 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8014fcc:	4a09      	ldr	r2, [pc, #36]	; (8014ff4 <SPI_flash_reg_cb+0x50>)
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	6113      	str	r3, [r2, #16]
 8014fd2:	e002      	b.n	8014fda <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 8014fd4:	4b07      	ldr	r3, [pc, #28]	; (8014ff4 <SPI_flash_reg_cb+0x50>)
 8014fd6:	4a08      	ldr	r2, [pc, #32]	; (8014ff8 <SPI_flash_reg_cb+0x54>)
 8014fd8:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8014fda:	4a06      	ldr	r2, [pc, #24]	; (8014ff4 <SPI_flash_reg_cb+0x50>)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8014fe0:	4a04      	ldr	r2, [pc, #16]	; (8014ff4 <SPI_flash_reg_cb+0x50>)
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	6093      	str	r3, [r2, #8]

}
 8014fe6:	bf00      	nop
 8014fe8:	3714      	adds	r7, #20
 8014fea:	46bd      	mov	sp, r7
 8014fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff0:	4770      	bx	lr
 8014ff2:	bf00      	nop
 8014ff4:	200008e4 	.word	0x200008e4
 8014ff8:	08014f95 	.word	0x08014f95

08014ffc <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8015000:	f000 f89c 	bl	801513c <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015004:	2066      	movs	r0, #102	; 0x66
 8015006:	f000 fa1f 	bl	8015448 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 801500a:	2099      	movs	r0, #153	; 0x99
 801500c:	f000 fa1c 	bl	8015448 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015010:	f000 f89e 	bl	8015150 <sFLASH_CS_HIGH>
}
 8015014:	bf00      	nop
 8015016:	bd80      	pop	{r7, pc}

08015018 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 8015018:	b590      	push	{r4, r7, lr}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 8015020:	f7ff ffec 	bl	8014ffc <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 8015024:	f000 f9d2 	bl	80153cc <sFLASH_ReadID>
 8015028:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	4a3e      	ldr	r2, [pc, #248]	; (8015128 <sFLASH_GetInfo+0x110>)
 801502e:	4293      	cmp	r3, r2
 8015030:	d03f      	beq.n	80150b2 <sFLASH_GetInfo+0x9a>
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	4a3c      	ldr	r2, [pc, #240]	; (8015128 <sFLASH_GetInfo+0x110>)
 8015036:	4293      	cmp	r3, r2
 8015038:	d867      	bhi.n	801510a <sFLASH_GetInfo+0xf2>
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	4a3b      	ldr	r2, [pc, #236]	; (801512c <sFLASH_GetInfo+0x114>)
 801503e:	4293      	cmp	r3, r2
 8015040:	d021      	beq.n	8015086 <sFLASH_GetInfo+0x6e>
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	4a39      	ldr	r2, [pc, #228]	; (801512c <sFLASH_GetInfo+0x114>)
 8015046:	4293      	cmp	r3, r2
 8015048:	d85f      	bhi.n	801510a <sFLASH_GetInfo+0xf2>
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	4a38      	ldr	r2, [pc, #224]	; (8015130 <sFLASH_GetInfo+0x118>)
 801504e:	4293      	cmp	r3, r2
 8015050:	d045      	beq.n	80150de <sFLASH_GetInfo+0xc6>
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	4a37      	ldr	r2, [pc, #220]	; (8015134 <sFLASH_GetInfo+0x11c>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d157      	bne.n	801510a <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801505a:	4b37      	ldr	r3, [pc, #220]	; (8015138 <sFLASH_GetInfo+0x120>)
 801505c:	4a35      	ldr	r2, [pc, #212]	; (8015134 <sFLASH_GetInfo+0x11c>)
 801505e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015060:	4b35      	ldr	r3, [pc, #212]	; (8015138 <sFLASH_GetInfo+0x120>)
 8015062:	2201      	movs	r2, #1
 8015064:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015066:	4b34      	ldr	r3, [pc, #208]	; (8015138 <sFLASH_GetInfo+0x120>)
 8015068:	2201      	movs	r2, #1
 801506a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801506c:	4b32      	ldr	r3, [pc, #200]	; (8015138 <sFLASH_GetInfo+0x120>)
 801506e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015072:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015074:	4b30      	ldr	r3, [pc, #192]	; (8015138 <sFLASH_GetInfo+0x120>)
 8015076:	f44f 7280 	mov.w	r2, #256	; 0x100
 801507a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 801507c:	4b2e      	ldr	r3, [pc, #184]	; (8015138 <sFLASH_GetInfo+0x120>)
 801507e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015082:	819a      	strh	r2, [r3, #12]
			break;
 8015084:	e045      	b.n	8015112 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015086:	4b2c      	ldr	r3, [pc, #176]	; (8015138 <sFLASH_GetInfo+0x120>)
 8015088:	4a28      	ldr	r2, [pc, #160]	; (801512c <sFLASH_GetInfo+0x114>)
 801508a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801508c:	4b2a      	ldr	r3, [pc, #168]	; (8015138 <sFLASH_GetInfo+0x120>)
 801508e:	2201      	movs	r2, #1
 8015090:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015092:	4b29      	ldr	r3, [pc, #164]	; (8015138 <sFLASH_GetInfo+0x120>)
 8015094:	2201      	movs	r2, #1
 8015096:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015098:	4b27      	ldr	r3, [pc, #156]	; (8015138 <sFLASH_GetInfo+0x120>)
 801509a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801509e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80150a0:	4b25      	ldr	r3, [pc, #148]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80150a6:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80150a8:	4b23      	ldr	r3, [pc, #140]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80150ae:	819a      	strh	r2, [r3, #12]
			break;
 80150b0:	e02f      	b.n	8015112 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80150b2:	4b21      	ldr	r3, [pc, #132]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150b4:	4a1c      	ldr	r2, [pc, #112]	; (8015128 <sFLASH_GetInfo+0x110>)
 80150b6:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80150b8:	4b1f      	ldr	r3, [pc, #124]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150ba:	2201      	movs	r2, #1
 80150bc:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80150be:	4b1e      	ldr	r3, [pc, #120]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150c0:	2201      	movs	r2, #1
 80150c2:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80150c4:	4b1c      	ldr	r3, [pc, #112]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80150ca:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80150cc:	4b1a      	ldr	r3, [pc, #104]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80150d2:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 80150d4:	4b18      	ldr	r3, [pc, #96]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80150da:	819a      	strh	r2, [r3, #12]
			break;
 80150dc:	e019      	b.n	8015112 <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80150de:	4b16      	ldr	r3, [pc, #88]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150e0:	4a13      	ldr	r2, [pc, #76]	; (8015130 <sFLASH_GetInfo+0x118>)
 80150e2:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80150e4:	4b14      	ldr	r3, [pc, #80]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150e6:	2201      	movs	r2, #1
 80150e8:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80150ea:	4b13      	ldr	r3, [pc, #76]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150ec:	2201      	movs	r2, #1
 80150ee:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80150f0:	4b11      	ldr	r3, [pc, #68]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80150f6:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80150f8:	4b0f      	ldr	r3, [pc, #60]	; (8015138 <sFLASH_GetInfo+0x120>)
 80150fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80150fe:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015100:	4b0d      	ldr	r3, [pc, #52]	; (8015138 <sFLASH_GetInfo+0x120>)
 8015102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015106:	819a      	strh	r2, [r3, #12]
			break;
 8015108:	e003      	b.n	8015112 <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 801510a:	4b0b      	ldr	r3, [pc, #44]	; (8015138 <sFLASH_GetInfo+0x120>)
 801510c:	2200      	movs	r2, #0
 801510e:	601a      	str	r2, [r3, #0]
			break;
 8015110:	bf00      	nop
	}

	return flash_info;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	4a08      	ldr	r2, [pc, #32]	; (8015138 <sFLASH_GetInfo+0x120>)
 8015116:	461c      	mov	r4, r3
 8015118:	4613      	mov	r3, r2
 801511a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801511c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	3714      	adds	r7, #20
 8015124:	46bd      	mov	sp, r7
 8015126:	bd90      	pop	{r4, r7, pc}
 8015128:	00ef4017 	.word	0x00ef4017
 801512c:	00ef4016 	.word	0x00ef4016
 8015130:	00c22016 	.word	0x00c22016
 8015134:	00ef4015 	.word	0x00ef4015
 8015138:	200008f8 	.word	0x200008f8

0801513c <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 801513c:	b580      	push	{r7, lr}
 801513e:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8015140:	4b02      	ldr	r3, [pc, #8]	; (801514c <sFLASH_CS_LOW+0x10>)
 8015142:	68db      	ldr	r3, [r3, #12]
 8015144:	4798      	blx	r3

}
 8015146:	bf00      	nop
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	200008e4 	.word	0x200008e4

08015150 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8015150:	b580      	push	{r7, lr}
 8015152:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8015154:	4b02      	ldr	r3, [pc, #8]	; (8015160 <sFLASH_CS_HIGH+0x10>)
 8015156:	691b      	ldr	r3, [r3, #16]
 8015158:	4798      	blx	r3
}
 801515a:	bf00      	nop
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	200008e4 	.word	0x200008e4

08015164 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 801516c:	f000 f97c 	bl	8015468 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015170:	f7ff ffe4 	bl	801513c <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015174:	2020      	movs	r0, #32
 8015176:	f000 f967 	bl	8015448 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	0c1b      	lsrs	r3, r3, #16
 801517e:	b2db      	uxtb	r3, r3
 8015180:	4618      	mov	r0, r3
 8015182:	f000 f961 	bl	8015448 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	0a1b      	lsrs	r3, r3, #8
 801518a:	b2db      	uxtb	r3, r3
 801518c:	4618      	mov	r0, r3
 801518e:	f000 f95b 	bl	8015448 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	b2db      	uxtb	r3, r3
 8015196:	4618      	mov	r0, r3
 8015198:	f000 f956 	bl	8015448 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801519c:	f7ff ffd8 	bl	8015150 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80151a0:	f000 f96d 	bl	801547e <sFLASH_WaitForWriteEnd>
}
 80151a4:	bf00      	nop
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	4613      	mov	r3, r2
 80151b8:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80151ba:	f000 f955 	bl	8015468 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80151be:	f7ff ffbd 	bl	801513c <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80151c2:	2002      	movs	r0, #2
 80151c4:	f000 f940 	bl	8015448 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	0c1b      	lsrs	r3, r3, #16
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	4618      	mov	r0, r3
 80151d0:	f000 f93a 	bl	8015448 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	0a1b      	lsrs	r3, r3, #8
 80151d8:	b2db      	uxtb	r3, r3
 80151da:	4618      	mov	r0, r3
 80151dc:	f000 f934 	bl	8015448 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	b2db      	uxtb	r3, r3
 80151e4:	4618      	mov	r0, r3
 80151e6:	f000 f92f 	bl	8015448 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 80151ea:	e007      	b.n	80151fc <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	4618      	mov	r0, r3
 80151f2:	f000 f929 	bl	8015448 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	3301      	adds	r3, #1
 80151fa:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 80151fc:	88fb      	ldrh	r3, [r7, #6]
 80151fe:	1e5a      	subs	r2, r3, #1
 8015200:	80fa      	strh	r2, [r7, #6]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d1f2      	bne.n	80151ec <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015206:	f7ff ffa3 	bl	8015150 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 801520a:	f000 f938 	bl	801547e <sFLASH_WaitForWriteEnd>
}
 801520e:	bf00      	nop
 8015210:	3710      	adds	r7, #16
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}

08015216 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8015216:	b580      	push	{r7, lr}
 8015218:	b086      	sub	sp, #24
 801521a:	af00      	add	r7, sp, #0
 801521c:	60f8      	str	r0, [r7, #12]
 801521e:	60b9      	str	r1, [r7, #8]
 8015220:	4613      	mov	r3, r2
 8015222:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8015224:	2300      	movs	r3, #0
 8015226:	75fb      	strb	r3, [r7, #23]
 8015228:	2300      	movs	r3, #0
 801522a:	75bb      	strb	r3, [r7, #22]
 801522c:	2300      	movs	r3, #0
 801522e:	757b      	strb	r3, [r7, #21]
 8015230:	2300      	movs	r3, #0
 8015232:	753b      	strb	r3, [r7, #20]
 8015234:	2300      	movs	r3, #0
 8015236:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 801523c:	7d7b      	ldrb	r3, [r7, #21]
 801523e:	425b      	negs	r3, r3
 8015240:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015242:	88fb      	ldrh	r3, [r7, #6]
 8015244:	0a1b      	lsrs	r3, r3, #8
 8015246:	b29b      	uxth	r3, r3
 8015248:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801524a:	88fb      	ldrh	r3, [r7, #6]
 801524c:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 801524e:	7d7b      	ldrb	r3, [r7, #21]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d124      	bne.n	801529e <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015254:	7dfb      	ldrb	r3, [r7, #23]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d114      	bne.n	8015284 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801525a:	88fb      	ldrh	r3, [r7, #6]
 801525c:	461a      	mov	r2, r3
 801525e:	68b9      	ldr	r1, [r7, #8]
 8015260:	68f8      	ldr	r0, [r7, #12]
 8015262:	f7ff ffa3 	bl	80151ac <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8015266:	e07b      	b.n	8015360 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015268:	f44f 7280 	mov.w	r2, #256	; 0x100
 801526c:	68b9      	ldr	r1, [r7, #8]
 801526e:	68f8      	ldr	r0, [r7, #12]
 8015270:	f7ff ff9c 	bl	80151ac <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801527a:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015282:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015284:	7dfb      	ldrb	r3, [r7, #23]
 8015286:	1e5a      	subs	r2, r3, #1
 8015288:	75fa      	strb	r2, [r7, #23]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d1ec      	bne.n	8015268 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801528e:	7dbb      	ldrb	r3, [r7, #22]
 8015290:	b29b      	uxth	r3, r3
 8015292:	461a      	mov	r2, r3
 8015294:	68b9      	ldr	r1, [r7, #8]
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	f7ff ff88 	bl	80151ac <sFLASH_WritePage>
}
 801529c:	e060      	b.n	8015360 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 801529e:	7dfb      	ldrb	r3, [r7, #23]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d125      	bne.n	80152f0 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80152a4:	7dba      	ldrb	r2, [r7, #22]
 80152a6:	7d3b      	ldrb	r3, [r7, #20]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d91a      	bls.n	80152e2 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 80152ac:	7dba      	ldrb	r2, [r7, #22]
 80152ae:	7d3b      	ldrb	r3, [r7, #20]
 80152b0:	1ad3      	subs	r3, r2, r3
 80152b2:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80152b4:	7d3b      	ldrb	r3, [r7, #20]
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	461a      	mov	r2, r3
 80152ba:	68b9      	ldr	r1, [r7, #8]
 80152bc:	68f8      	ldr	r0, [r7, #12]
 80152be:	f7ff ff75 	bl	80151ac <sFLASH_WritePage>
        WriteAddr +=  count;
 80152c2:	7d3b      	ldrb	r3, [r7, #20]
 80152c4:	68ba      	ldr	r2, [r7, #8]
 80152c6:	4413      	add	r3, r2
 80152c8:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 80152ca:	7d3b      	ldrb	r3, [r7, #20]
 80152cc:	68fa      	ldr	r2, [r7, #12]
 80152ce:	4413      	add	r3, r2
 80152d0:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80152d2:	7cfb      	ldrb	r3, [r7, #19]
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	461a      	mov	r2, r3
 80152d8:	68b9      	ldr	r1, [r7, #8]
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	f7ff ff66 	bl	80151ac <sFLASH_WritePage>
}
 80152e0:	e03e      	b.n	8015360 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80152e2:	88fb      	ldrh	r3, [r7, #6]
 80152e4:	461a      	mov	r2, r3
 80152e6:	68b9      	ldr	r1, [r7, #8]
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f7ff ff5f 	bl	80151ac <sFLASH_WritePage>
}
 80152ee:	e037      	b.n	8015360 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 80152f0:	7d3b      	ldrb	r3, [r7, #20]
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	88fa      	ldrh	r2, [r7, #6]
 80152f6:	1ad3      	subs	r3, r2, r3
 80152f8:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80152fa:	88fb      	ldrh	r3, [r7, #6]
 80152fc:	0a1b      	lsrs	r3, r3, #8
 80152fe:	b29b      	uxth	r3, r3
 8015300:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015302:	88fb      	ldrh	r3, [r7, #6]
 8015304:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015306:	7d3b      	ldrb	r3, [r7, #20]
 8015308:	b29b      	uxth	r3, r3
 801530a:	461a      	mov	r2, r3
 801530c:	68b9      	ldr	r1, [r7, #8]
 801530e:	68f8      	ldr	r0, [r7, #12]
 8015310:	f7ff ff4c 	bl	80151ac <sFLASH_WritePage>
      WriteAddr +=  count;
 8015314:	7d3b      	ldrb	r3, [r7, #20]
 8015316:	68ba      	ldr	r2, [r7, #8]
 8015318:	4413      	add	r3, r2
 801531a:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 801531c:	7d3b      	ldrb	r3, [r7, #20]
 801531e:	68fa      	ldr	r2, [r7, #12]
 8015320:	4413      	add	r3, r2
 8015322:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015324:	e00d      	b.n	8015342 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015326:	f44f 7280 	mov.w	r2, #256	; 0x100
 801532a:	68b9      	ldr	r1, [r7, #8]
 801532c:	68f8      	ldr	r0, [r7, #12]
 801532e:	f7ff ff3d 	bl	80151ac <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015338:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015340:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015342:	7dfb      	ldrb	r3, [r7, #23]
 8015344:	1e5a      	subs	r2, r3, #1
 8015346:	75fa      	strb	r2, [r7, #23]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d1ec      	bne.n	8015326 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 801534c:	7dbb      	ldrb	r3, [r7, #22]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d006      	beq.n	8015360 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015352:	7dbb      	ldrb	r3, [r7, #22]
 8015354:	b29b      	uxth	r3, r3
 8015356:	461a      	mov	r2, r3
 8015358:	68b9      	ldr	r1, [r7, #8]
 801535a:	68f8      	ldr	r0, [r7, #12]
 801535c:	f7ff ff26 	bl	80151ac <sFLASH_WritePage>
}
 8015360:	bf00      	nop
 8015362:	3718      	adds	r7, #24
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	60f8      	str	r0, [r7, #12]
 8015370:	60b9      	str	r1, [r7, #8]
 8015372:	4613      	mov	r3, r2
 8015374:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015376:	f7ff fee1 	bl	801513c <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 801537a:	2003      	movs	r0, #3
 801537c:	f000 f864 	bl	8015448 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	0c1b      	lsrs	r3, r3, #16
 8015384:	b2db      	uxtb	r3, r3
 8015386:	4618      	mov	r0, r3
 8015388:	f000 f85e 	bl	8015448 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	0a1b      	lsrs	r3, r3, #8
 8015390:	b2db      	uxtb	r3, r3
 8015392:	4618      	mov	r0, r3
 8015394:	f000 f858 	bl	8015448 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	b2db      	uxtb	r3, r3
 801539c:	4618      	mov	r0, r3
 801539e:	f000 f853 	bl	8015448 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 80153a2:	e008      	b.n	80153b6 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 80153a4:	f000 f846 	bl	8015434 <sFLASH_ReadByte>
 80153a8:	4603      	mov	r3, r0
 80153aa:	461a      	mov	r2, r3
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	3301      	adds	r3, #1
 80153b4:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 80153b6:	88fb      	ldrh	r3, [r7, #6]
 80153b8:	1e5a      	subs	r2, r3, #1
 80153ba:	80fa      	strh	r2, [r7, #6]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1f1      	bne.n	80153a4 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80153c0:	f7ff fec6 	bl	8015150 <sFLASH_CS_HIGH>
}
 80153c4:	bf00      	nop
 80153c6:	3710      	adds	r7, #16
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}

080153cc <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b084      	sub	sp, #16
 80153d0:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80153d2:	2300      	movs	r3, #0
 80153d4:	60fb      	str	r3, [r7, #12]
 80153d6:	2300      	movs	r3, #0
 80153d8:	60bb      	str	r3, [r7, #8]
 80153da:	2300      	movs	r3, #0
 80153dc:	607b      	str	r3, [r7, #4]
 80153de:	2300      	movs	r3, #0
 80153e0:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80153e2:	f7ff feab 	bl	801513c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80153e6:	f7ff feb3 	bl	8015150 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80153ea:	f7ff fea7 	bl	801513c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80153ee:	f7ff feaf 	bl	8015150 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80153f2:	f7ff fea3 	bl	801513c <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80153f6:	209f      	movs	r0, #159	; 0x9f
 80153f8:	f000 f826 	bl	8015448 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80153fc:	f000 f81a 	bl	8015434 <sFLASH_ReadByte>
 8015400:	4603      	mov	r3, r0
 8015402:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8015404:	f000 f816 	bl	8015434 <sFLASH_ReadByte>
 8015408:	4603      	mov	r3, r0
 801540a:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 801540c:	f000 f812 	bl	8015434 <sFLASH_ReadByte>
 8015410:	4603      	mov	r3, r0
 8015412:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015414:	f7ff fe9c 	bl	8015150 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	041a      	lsls	r2, r3, #16
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	021b      	lsls	r3, r3, #8
 8015420:	4313      	orrs	r3, r2
 8015422:	683a      	ldr	r2, [r7, #0]
 8015424:	4313      	orrs	r3, r2
 8015426:	60fb      	str	r3, [r7, #12]

  return Temp;
 8015428:	68fb      	ldr	r3, [r7, #12]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
	...

08015434 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8015438:	4b02      	ldr	r3, [pc, #8]	; (8015444 <sFLASH_ReadByte+0x10>)
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	4798      	blx	r3
 801543e:	4603      	mov	r3, r0
}
 8015440:	4618      	mov	r0, r3
 8015442:	bd80      	pop	{r7, pc}
 8015444:	200008e4 	.word	0x200008e4

08015448 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
 801544e:	4603      	mov	r3, r0
 8015450:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8015452:	4b04      	ldr	r3, [pc, #16]	; (8015464 <sFLASH_SendByte+0x1c>)
 8015454:	689b      	ldr	r3, [r3, #8]
 8015456:	79fa      	ldrb	r2, [r7, #7]
 8015458:	4610      	mov	r0, r2
 801545a:	4798      	blx	r3
}
 801545c:	bf00      	nop
 801545e:	3708      	adds	r7, #8
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	200008e4 	.word	0x200008e4

08015468 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801546c:	f7ff fe66 	bl	801513c <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015470:	2006      	movs	r0, #6
 8015472:	f7ff ffe9 	bl	8015448 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015476:	f7ff fe6b 	bl	8015150 <sFLASH_CS_HIGH>
}
 801547a:	bf00      	nop
 801547c:	bd80      	pop	{r7, pc}

0801547e <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 801547e:	b580      	push	{r7, lr}
 8015480:	b082      	sub	sp, #8
 8015482:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8015484:	2300      	movs	r3, #0
 8015486:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015488:	f7ff fe58 	bl	801513c <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 801548c:	2005      	movs	r0, #5
 801548e:	f7ff ffdb 	bl	8015448 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 8015492:	f7ff ffcf 	bl	8015434 <sFLASH_ReadByte>
 8015496:	4603      	mov	r3, r0
 8015498:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 801549a:	79fb      	ldrb	r3, [r7, #7]
 801549c:	f003 0301 	and.w	r3, r3, #1
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d1f6      	bne.n	8015492 <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80154a4:	f7ff fe54 	bl	8015150 <sFLASH_CS_HIGH>
}
 80154a8:	bf00      	nop
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 80154b0:	b084      	sub	sp, #16
 80154b2:	b580      	push	{r7, lr}
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	f107 0c08 	add.w	ip, r7, #8
 80154ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 80154be:	4b07      	ldr	r3, [pc, #28]	; (80154dc <SPI_flash_set+0x2c>)
 80154c0:	4618      	mov	r0, r3
 80154c2:	f107 0308 	add.w	r3, r7, #8
 80154c6:	2258      	movs	r2, #88	; 0x58
 80154c8:	4619      	mov	r1, r3
 80154ca:	f018 fb3c 	bl	802db46 <memcpy>
}
 80154ce:	bf00      	nop
 80154d0:	46bd      	mov	sp, r7
 80154d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80154d6:	b004      	add	sp, #16
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop
 80154dc:	20000908 	.word	0x20000908

080154e0 <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 80154e6:	1df9      	adds	r1, r7, #7
 80154e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80154ec:	2201      	movs	r2, #1
 80154ee:	4804      	ldr	r0, [pc, #16]	; (8015500 <SPI_flash_read_byte+0x20>)
 80154f0:	f001 fa8a 	bl	8016a08 <HAL_SPI_Receive>
	return byte;
 80154f4:	79fb      	ldrb	r3, [r7, #7]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3708      	adds	r7, #8
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	20000908 	.word	0x20000908

08015504 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	4603      	mov	r3, r0
 801550c:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 801550e:	1df9      	adds	r1, r7, #7
 8015510:	f241 3388 	movw	r3, #5000	; 0x1388
 8015514:	2201      	movs	r2, #1
 8015516:	4803      	ldr	r0, [pc, #12]	; (8015524 <SPI_flash_send_byte+0x20>)
 8015518:	f001 f933 	bl	8016782 <HAL_SPI_Transmit>

}
 801551c:	bf00      	nop
 801551e:	3708      	adds	r7, #8
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	20000908 	.word	0x20000908

08015528 <SPI_flash_select>:

void SPI_flash_select(void){
 8015528:	b580      	push	{r7, lr}
 801552a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 801552c:	2200      	movs	r2, #0
 801552e:	2110      	movs	r1, #16
 8015530:	4802      	ldr	r0, [pc, #8]	; (801553c <SPI_flash_select+0x14>)
 8015532:	f000 fb67 	bl	8015c04 <HAL_GPIO_WritePin>
}
 8015536:	bf00      	nop
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	40020000 	.word	0x40020000

08015540 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 8015540:	b580      	push	{r7, lr}
 8015542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8015544:	2201      	movs	r2, #1
 8015546:	2110      	movs	r1, #16
 8015548:	4802      	ldr	r0, [pc, #8]	; (8015554 <SPI_flash_deselect+0x14>)
 801554a:	f000 fb5b 	bl	8015c04 <HAL_GPIO_WritePin>
}
 801554e:	bf00      	nop
 8015550:	bd80      	pop	{r7, pc}
 8015552:	bf00      	nop
 8015554:	40020000 	.word	0x40020000

08015558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801555c:	4b0e      	ldr	r3, [pc, #56]	; (8015598 <HAL_Init+0x40>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	4a0d      	ldr	r2, [pc, #52]	; (8015598 <HAL_Init+0x40>)
 8015562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015568:	4b0b      	ldr	r3, [pc, #44]	; (8015598 <HAL_Init+0x40>)
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	4a0a      	ldr	r2, [pc, #40]	; (8015598 <HAL_Init+0x40>)
 801556e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015574:	4b08      	ldr	r3, [pc, #32]	; (8015598 <HAL_Init+0x40>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4a07      	ldr	r2, [pc, #28]	; (8015598 <HAL_Init+0x40>)
 801557a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801557e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015580:	2003      	movs	r0, #3
 8015582:	f000 f8d8 	bl	8015736 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015586:	200f      	movs	r0, #15
 8015588:	f7fd fa64 	bl	8012a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801558c:	f7fd f946 	bl	801281c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015590:	2300      	movs	r3, #0
}
 8015592:	4618      	mov	r0, r3
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	40023c00 	.word	0x40023c00

0801559c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801559c:	b480      	push	{r7}
 801559e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80155a0:	4b06      	ldr	r3, [pc, #24]	; (80155bc <HAL_IncTick+0x20>)
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	461a      	mov	r2, r3
 80155a6:	4b06      	ldr	r3, [pc, #24]	; (80155c0 <HAL_IncTick+0x24>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	4413      	add	r3, r2
 80155ac:	4a04      	ldr	r2, [pc, #16]	; (80155c0 <HAL_IncTick+0x24>)
 80155ae:	6013      	str	r3, [r2, #0]
}
 80155b0:	bf00      	nop
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr
 80155ba:	bf00      	nop
 80155bc:	200000c0 	.word	0x200000c0
 80155c0:	20000960 	.word	0x20000960

080155c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80155c4:	b480      	push	{r7}
 80155c6:	af00      	add	r7, sp, #0
  return uwTick;
 80155c8:	4b03      	ldr	r3, [pc, #12]	; (80155d8 <HAL_GetTick+0x14>)
 80155ca:	681b      	ldr	r3, [r3, #0]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	46bd      	mov	sp, r7
 80155d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d4:	4770      	bx	lr
 80155d6:	bf00      	nop
 80155d8:	20000960 	.word	0x20000960

080155dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80155dc:	b480      	push	{r7}
 80155de:	b085      	sub	sp, #20
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f003 0307 	and.w	r3, r3, #7
 80155ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80155ec:	4b0c      	ldr	r3, [pc, #48]	; (8015620 <__NVIC_SetPriorityGrouping+0x44>)
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80155f2:	68ba      	ldr	r2, [r7, #8]
 80155f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80155f8:	4013      	ands	r3, r2
 80155fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801560c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801560e:	4a04      	ldr	r2, [pc, #16]	; (8015620 <__NVIC_SetPriorityGrouping+0x44>)
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	60d3      	str	r3, [r2, #12]
}
 8015614:	bf00      	nop
 8015616:	3714      	adds	r7, #20
 8015618:	46bd      	mov	sp, r7
 801561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561e:	4770      	bx	lr
 8015620:	e000ed00 	.word	0xe000ed00

08015624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015624:	b480      	push	{r7}
 8015626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015628:	4b04      	ldr	r3, [pc, #16]	; (801563c <__NVIC_GetPriorityGrouping+0x18>)
 801562a:	68db      	ldr	r3, [r3, #12]
 801562c:	0a1b      	lsrs	r3, r3, #8
 801562e:	f003 0307 	and.w	r3, r3, #7
}
 8015632:	4618      	mov	r0, r3
 8015634:	46bd      	mov	sp, r7
 8015636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563a:	4770      	bx	lr
 801563c:	e000ed00 	.word	0xe000ed00

08015640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015640:	b480      	push	{r7}
 8015642:	b083      	sub	sp, #12
 8015644:	af00      	add	r7, sp, #0
 8015646:	4603      	mov	r3, r0
 8015648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801564e:	2b00      	cmp	r3, #0
 8015650:	db0b      	blt.n	801566a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015652:	79fb      	ldrb	r3, [r7, #7]
 8015654:	f003 021f 	and.w	r2, r3, #31
 8015658:	4907      	ldr	r1, [pc, #28]	; (8015678 <__NVIC_EnableIRQ+0x38>)
 801565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801565e:	095b      	lsrs	r3, r3, #5
 8015660:	2001      	movs	r0, #1
 8015662:	fa00 f202 	lsl.w	r2, r0, r2
 8015666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801566a:	bf00      	nop
 801566c:	370c      	adds	r7, #12
 801566e:	46bd      	mov	sp, r7
 8015670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015674:	4770      	bx	lr
 8015676:	bf00      	nop
 8015678:	e000e100 	.word	0xe000e100

0801567c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801567c:	b480      	push	{r7}
 801567e:	b083      	sub	sp, #12
 8015680:	af00      	add	r7, sp, #0
 8015682:	4603      	mov	r3, r0
 8015684:	6039      	str	r1, [r7, #0]
 8015686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801568c:	2b00      	cmp	r3, #0
 801568e:	db0a      	blt.n	80156a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	b2da      	uxtb	r2, r3
 8015694:	490c      	ldr	r1, [pc, #48]	; (80156c8 <__NVIC_SetPriority+0x4c>)
 8015696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801569a:	0112      	lsls	r2, r2, #4
 801569c:	b2d2      	uxtb	r2, r2
 801569e:	440b      	add	r3, r1
 80156a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80156a4:	e00a      	b.n	80156bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	4908      	ldr	r1, [pc, #32]	; (80156cc <__NVIC_SetPriority+0x50>)
 80156ac:	79fb      	ldrb	r3, [r7, #7]
 80156ae:	f003 030f 	and.w	r3, r3, #15
 80156b2:	3b04      	subs	r3, #4
 80156b4:	0112      	lsls	r2, r2, #4
 80156b6:	b2d2      	uxtb	r2, r2
 80156b8:	440b      	add	r3, r1
 80156ba:	761a      	strb	r2, [r3, #24]
}
 80156bc:	bf00      	nop
 80156be:	370c      	adds	r7, #12
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr
 80156c8:	e000e100 	.word	0xe000e100
 80156cc:	e000ed00 	.word	0xe000ed00

080156d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b089      	sub	sp, #36	; 0x24
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60f8      	str	r0, [r7, #12]
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	f003 0307 	and.w	r3, r3, #7
 80156e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	f1c3 0307 	rsb	r3, r3, #7
 80156ea:	2b04      	cmp	r3, #4
 80156ec:	bf28      	it	cs
 80156ee:	2304      	movcs	r3, #4
 80156f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80156f2:	69fb      	ldr	r3, [r7, #28]
 80156f4:	3304      	adds	r3, #4
 80156f6:	2b06      	cmp	r3, #6
 80156f8:	d902      	bls.n	8015700 <NVIC_EncodePriority+0x30>
 80156fa:	69fb      	ldr	r3, [r7, #28]
 80156fc:	3b03      	subs	r3, #3
 80156fe:	e000      	b.n	8015702 <NVIC_EncodePriority+0x32>
 8015700:	2300      	movs	r3, #0
 8015702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015704:	f04f 32ff 	mov.w	r2, #4294967295
 8015708:	69bb      	ldr	r3, [r7, #24]
 801570a:	fa02 f303 	lsl.w	r3, r2, r3
 801570e:	43da      	mvns	r2, r3
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	401a      	ands	r2, r3
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015718:	f04f 31ff 	mov.w	r1, #4294967295
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	fa01 f303 	lsl.w	r3, r1, r3
 8015722:	43d9      	mvns	r1, r3
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015728:	4313      	orrs	r3, r2
         );
}
 801572a:	4618      	mov	r0, r3
 801572c:	3724      	adds	r7, #36	; 0x24
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr

08015736 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015736:	b580      	push	{r7, lr}
 8015738:	b082      	sub	sp, #8
 801573a:	af00      	add	r7, sp, #0
 801573c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7ff ff4c 	bl	80155dc <__NVIC_SetPriorityGrouping>
}
 8015744:	bf00      	nop
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801574c:	b580      	push	{r7, lr}
 801574e:	b086      	sub	sp, #24
 8015750:	af00      	add	r7, sp, #0
 8015752:	4603      	mov	r3, r0
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	607a      	str	r2, [r7, #4]
 8015758:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801575a:	2300      	movs	r3, #0
 801575c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801575e:	f7ff ff61 	bl	8015624 <__NVIC_GetPriorityGrouping>
 8015762:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015764:	687a      	ldr	r2, [r7, #4]
 8015766:	68b9      	ldr	r1, [r7, #8]
 8015768:	6978      	ldr	r0, [r7, #20]
 801576a:	f7ff ffb1 	bl	80156d0 <NVIC_EncodePriority>
 801576e:	4602      	mov	r2, r0
 8015770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015774:	4611      	mov	r1, r2
 8015776:	4618      	mov	r0, r3
 8015778:	f7ff ff80 	bl	801567c <__NVIC_SetPriority>
}
 801577c:	bf00      	nop
 801577e:	3718      	adds	r7, #24
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}

08015784 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	4603      	mov	r3, r0
 801578c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801578e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff ff54 	bl	8015640 <__NVIC_EnableIRQ>
}
 8015798:	bf00      	nop
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d101      	bne.n	80157b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80157ae:	2301      	movs	r3, #1
 80157b0:	e00e      	b.n	80157d0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	795b      	ldrb	r3, [r3, #5]
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d105      	bne.n	80157c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2200      	movs	r2, #0
 80157c0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f7fd f856 	bl	8012874 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2201      	movs	r2, #1
 80157cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80157ce:	2300      	movs	r3, #0
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3708      	adds	r7, #8
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80157e6:	f7ff feed 	bl	80155c4 <HAL_GetTick>
 80157ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	2b02      	cmp	r3, #2
 80157f6:	d008      	beq.n	801580a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2280      	movs	r2, #128	; 0x80
 80157fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2200      	movs	r2, #0
 8015802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8015806:	2301      	movs	r3, #1
 8015808:	e052      	b.n	80158b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f022 0216 	bic.w	r2, r2, #22
 8015818:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	695a      	ldr	r2, [r3, #20]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015828:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801582e:	2b00      	cmp	r3, #0
 8015830:	d103      	bne.n	801583a <HAL_DMA_Abort+0x62>
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015836:	2b00      	cmp	r3, #0
 8015838:	d007      	beq.n	801584a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	f022 0208 	bic.w	r2, r2, #8
 8015848:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	681a      	ldr	r2, [r3, #0]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f022 0201 	bic.w	r2, r2, #1
 8015858:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801585a:	e013      	b.n	8015884 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801585c:	f7ff feb2 	bl	80155c4 <HAL_GetTick>
 8015860:	4602      	mov	r2, r0
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	2b05      	cmp	r3, #5
 8015868:	d90c      	bls.n	8015884 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2220      	movs	r2, #32
 801586e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2203      	movs	r2, #3
 8015874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2200      	movs	r2, #0
 801587c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8015880:	2303      	movs	r3, #3
 8015882:	e015      	b.n	80158b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	f003 0301 	and.w	r3, r3, #1
 801588e:	2b00      	cmp	r3, #0
 8015890:	d1e4      	bne.n	801585c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015896:	223f      	movs	r2, #63	; 0x3f
 8015898:	409a      	lsls	r2, r3
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2201      	movs	r2, #1
 80158a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2200      	movs	r2, #0
 80158aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80158ae:	2300      	movs	r3, #0
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3710      	adds	r7, #16
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b083      	sub	sp, #12
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	2b02      	cmp	r3, #2
 80158ca:	d004      	beq.n	80158d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2280      	movs	r2, #128	; 0x80
 80158d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80158d2:	2301      	movs	r3, #1
 80158d4:	e00c      	b.n	80158f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2205      	movs	r2, #5
 80158da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	681a      	ldr	r2, [r3, #0]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	f022 0201 	bic.w	r2, r2, #1
 80158ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80158ee:	2300      	movs	r3, #0
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	370c      	adds	r7, #12
 80158f4:	46bd      	mov	sp, r7
 80158f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fa:	4770      	bx	lr

080158fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80158fc:	b480      	push	{r7}
 80158fe:	b089      	sub	sp, #36	; 0x24
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015906:	2300      	movs	r3, #0
 8015908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801590a:	2300      	movs	r3, #0
 801590c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801590e:	2300      	movs	r3, #0
 8015910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015912:	2300      	movs	r3, #0
 8015914:	61fb      	str	r3, [r7, #28]
 8015916:	e159      	b.n	8015bcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015918:	2201      	movs	r2, #1
 801591a:	69fb      	ldr	r3, [r7, #28]
 801591c:	fa02 f303 	lsl.w	r3, r2, r3
 8015920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	697a      	ldr	r2, [r7, #20]
 8015928:	4013      	ands	r3, r2
 801592a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801592c:	693a      	ldr	r2, [r7, #16]
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	429a      	cmp	r2, r3
 8015932:	f040 8148 	bne.w	8015bc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	685b      	ldr	r3, [r3, #4]
 801593a:	f003 0303 	and.w	r3, r3, #3
 801593e:	2b01      	cmp	r3, #1
 8015940:	d005      	beq.n	801594e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801594a:	2b02      	cmp	r3, #2
 801594c:	d130      	bne.n	80159b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	689b      	ldr	r3, [r3, #8]
 8015952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	005b      	lsls	r3, r3, #1
 8015958:	2203      	movs	r2, #3
 801595a:	fa02 f303 	lsl.w	r3, r2, r3
 801595e:	43db      	mvns	r3, r3
 8015960:	69ba      	ldr	r2, [r7, #24]
 8015962:	4013      	ands	r3, r2
 8015964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	68da      	ldr	r2, [r3, #12]
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	005b      	lsls	r3, r3, #1
 801596e:	fa02 f303 	lsl.w	r3, r2, r3
 8015972:	69ba      	ldr	r2, [r7, #24]
 8015974:	4313      	orrs	r3, r2
 8015976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	69ba      	ldr	r2, [r7, #24]
 801597c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015984:	2201      	movs	r2, #1
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	fa02 f303 	lsl.w	r3, r2, r3
 801598c:	43db      	mvns	r3, r3
 801598e:	69ba      	ldr	r2, [r7, #24]
 8015990:	4013      	ands	r3, r2
 8015992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	091b      	lsrs	r3, r3, #4
 801599a:	f003 0201 	and.w	r2, r3, #1
 801599e:	69fb      	ldr	r3, [r7, #28]
 80159a0:	fa02 f303 	lsl.w	r3, r2, r3
 80159a4:	69ba      	ldr	r2, [r7, #24]
 80159a6:	4313      	orrs	r3, r2
 80159a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	69ba      	ldr	r2, [r7, #24]
 80159ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	685b      	ldr	r3, [r3, #4]
 80159b4:	f003 0303 	and.w	r3, r3, #3
 80159b8:	2b03      	cmp	r3, #3
 80159ba:	d017      	beq.n	80159ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	68db      	ldr	r3, [r3, #12]
 80159c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80159c2:	69fb      	ldr	r3, [r7, #28]
 80159c4:	005b      	lsls	r3, r3, #1
 80159c6:	2203      	movs	r2, #3
 80159c8:	fa02 f303 	lsl.w	r3, r2, r3
 80159cc:	43db      	mvns	r3, r3
 80159ce:	69ba      	ldr	r2, [r7, #24]
 80159d0:	4013      	ands	r3, r2
 80159d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	689a      	ldr	r2, [r3, #8]
 80159d8:	69fb      	ldr	r3, [r7, #28]
 80159da:	005b      	lsls	r3, r3, #1
 80159dc:	fa02 f303 	lsl.w	r3, r2, r3
 80159e0:	69ba      	ldr	r2, [r7, #24]
 80159e2:	4313      	orrs	r3, r2
 80159e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	69ba      	ldr	r2, [r7, #24]
 80159ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	f003 0303 	and.w	r3, r3, #3
 80159f4:	2b02      	cmp	r3, #2
 80159f6:	d123      	bne.n	8015a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	08da      	lsrs	r2, r3, #3
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	3208      	adds	r2, #8
 8015a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	f003 0307 	and.w	r3, r3, #7
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	220f      	movs	r2, #15
 8015a10:	fa02 f303 	lsl.w	r3, r2, r3
 8015a14:	43db      	mvns	r3, r3
 8015a16:	69ba      	ldr	r2, [r7, #24]
 8015a18:	4013      	ands	r3, r2
 8015a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	691a      	ldr	r2, [r3, #16]
 8015a20:	69fb      	ldr	r3, [r7, #28]
 8015a22:	f003 0307 	and.w	r3, r3, #7
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	fa02 f303 	lsl.w	r3, r2, r3
 8015a2c:	69ba      	ldr	r2, [r7, #24]
 8015a2e:	4313      	orrs	r3, r2
 8015a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	08da      	lsrs	r2, r3, #3
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	3208      	adds	r2, #8
 8015a3a:	69b9      	ldr	r1, [r7, #24]
 8015a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015a46:	69fb      	ldr	r3, [r7, #28]
 8015a48:	005b      	lsls	r3, r3, #1
 8015a4a:	2203      	movs	r2, #3
 8015a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a50:	43db      	mvns	r3, r3
 8015a52:	69ba      	ldr	r2, [r7, #24]
 8015a54:	4013      	ands	r3, r2
 8015a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	685b      	ldr	r3, [r3, #4]
 8015a5c:	f003 0203 	and.w	r2, r3, #3
 8015a60:	69fb      	ldr	r3, [r7, #28]
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	fa02 f303 	lsl.w	r3, r2, r3
 8015a68:	69ba      	ldr	r2, [r7, #24]
 8015a6a:	4313      	orrs	r3, r2
 8015a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	69ba      	ldr	r2, [r7, #24]
 8015a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	685b      	ldr	r3, [r3, #4]
 8015a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	f000 80a2 	beq.w	8015bc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015a82:	2300      	movs	r3, #0
 8015a84:	60fb      	str	r3, [r7, #12]
 8015a86:	4b57      	ldr	r3, [pc, #348]	; (8015be4 <HAL_GPIO_Init+0x2e8>)
 8015a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a8a:	4a56      	ldr	r2, [pc, #344]	; (8015be4 <HAL_GPIO_Init+0x2e8>)
 8015a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015a90:	6453      	str	r3, [r2, #68]	; 0x44
 8015a92:	4b54      	ldr	r3, [pc, #336]	; (8015be4 <HAL_GPIO_Init+0x2e8>)
 8015a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015a9a:	60fb      	str	r3, [r7, #12]
 8015a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015a9e:	4a52      	ldr	r2, [pc, #328]	; (8015be8 <HAL_GPIO_Init+0x2ec>)
 8015aa0:	69fb      	ldr	r3, [r7, #28]
 8015aa2:	089b      	lsrs	r3, r3, #2
 8015aa4:	3302      	adds	r3, #2
 8015aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015aac:	69fb      	ldr	r3, [r7, #28]
 8015aae:	f003 0303 	and.w	r3, r3, #3
 8015ab2:	009b      	lsls	r3, r3, #2
 8015ab4:	220f      	movs	r2, #15
 8015ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8015aba:	43db      	mvns	r3, r3
 8015abc:	69ba      	ldr	r2, [r7, #24]
 8015abe:	4013      	ands	r3, r2
 8015ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	4a49      	ldr	r2, [pc, #292]	; (8015bec <HAL_GPIO_Init+0x2f0>)
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	d019      	beq.n	8015afe <HAL_GPIO_Init+0x202>
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	4a48      	ldr	r2, [pc, #288]	; (8015bf0 <HAL_GPIO_Init+0x2f4>)
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	d013      	beq.n	8015afa <HAL_GPIO_Init+0x1fe>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	4a47      	ldr	r2, [pc, #284]	; (8015bf4 <HAL_GPIO_Init+0x2f8>)
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	d00d      	beq.n	8015af6 <HAL_GPIO_Init+0x1fa>
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	4a46      	ldr	r2, [pc, #280]	; (8015bf8 <HAL_GPIO_Init+0x2fc>)
 8015ade:	4293      	cmp	r3, r2
 8015ae0:	d007      	beq.n	8015af2 <HAL_GPIO_Init+0x1f6>
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	4a45      	ldr	r2, [pc, #276]	; (8015bfc <HAL_GPIO_Init+0x300>)
 8015ae6:	4293      	cmp	r3, r2
 8015ae8:	d101      	bne.n	8015aee <HAL_GPIO_Init+0x1f2>
 8015aea:	2304      	movs	r3, #4
 8015aec:	e008      	b.n	8015b00 <HAL_GPIO_Init+0x204>
 8015aee:	2307      	movs	r3, #7
 8015af0:	e006      	b.n	8015b00 <HAL_GPIO_Init+0x204>
 8015af2:	2303      	movs	r3, #3
 8015af4:	e004      	b.n	8015b00 <HAL_GPIO_Init+0x204>
 8015af6:	2302      	movs	r3, #2
 8015af8:	e002      	b.n	8015b00 <HAL_GPIO_Init+0x204>
 8015afa:	2301      	movs	r3, #1
 8015afc:	e000      	b.n	8015b00 <HAL_GPIO_Init+0x204>
 8015afe:	2300      	movs	r3, #0
 8015b00:	69fa      	ldr	r2, [r7, #28]
 8015b02:	f002 0203 	and.w	r2, r2, #3
 8015b06:	0092      	lsls	r2, r2, #2
 8015b08:	4093      	lsls	r3, r2
 8015b0a:	69ba      	ldr	r2, [r7, #24]
 8015b0c:	4313      	orrs	r3, r2
 8015b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015b10:	4935      	ldr	r1, [pc, #212]	; (8015be8 <HAL_GPIO_Init+0x2ec>)
 8015b12:	69fb      	ldr	r3, [r7, #28]
 8015b14:	089b      	lsrs	r3, r3, #2
 8015b16:	3302      	adds	r3, #2
 8015b18:	69ba      	ldr	r2, [r7, #24]
 8015b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015b1e:	4b38      	ldr	r3, [pc, #224]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015b20:	689b      	ldr	r3, [r3, #8]
 8015b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	43db      	mvns	r3, r3
 8015b28:	69ba      	ldr	r2, [r7, #24]
 8015b2a:	4013      	ands	r3, r2
 8015b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d003      	beq.n	8015b42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015b3a:	69ba      	ldr	r2, [r7, #24]
 8015b3c:	693b      	ldr	r3, [r7, #16]
 8015b3e:	4313      	orrs	r3, r2
 8015b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015b42:	4a2f      	ldr	r2, [pc, #188]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015b48:	4b2d      	ldr	r3, [pc, #180]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015b4a:	68db      	ldr	r3, [r3, #12]
 8015b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	43db      	mvns	r3, r3
 8015b52:	69ba      	ldr	r2, [r7, #24]
 8015b54:	4013      	ands	r3, r2
 8015b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d003      	beq.n	8015b6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015b64:	69ba      	ldr	r2, [r7, #24]
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	4313      	orrs	r3, r2
 8015b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015b6c:	4a24      	ldr	r2, [pc, #144]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015b6e:	69bb      	ldr	r3, [r7, #24]
 8015b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015b72:	4b23      	ldr	r3, [pc, #140]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015b74:	685b      	ldr	r3, [r3, #4]
 8015b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015b78:	693b      	ldr	r3, [r7, #16]
 8015b7a:	43db      	mvns	r3, r3
 8015b7c:	69ba      	ldr	r2, [r7, #24]
 8015b7e:	4013      	ands	r3, r2
 8015b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d003      	beq.n	8015b96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8015b8e:	69ba      	ldr	r2, [r7, #24]
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	4313      	orrs	r3, r2
 8015b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015b96:	4a1a      	ldr	r2, [pc, #104]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015b98:	69bb      	ldr	r3, [r7, #24]
 8015b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015b9c:	4b18      	ldr	r3, [pc, #96]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	43db      	mvns	r3, r3
 8015ba6:	69ba      	ldr	r2, [r7, #24]
 8015ba8:	4013      	ands	r3, r2
 8015baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015bac:	683b      	ldr	r3, [r7, #0]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d003      	beq.n	8015bc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015bb8:	69ba      	ldr	r2, [r7, #24]
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015bc0:	4a0f      	ldr	r2, [pc, #60]	; (8015c00 <HAL_GPIO_Init+0x304>)
 8015bc2:	69bb      	ldr	r3, [r7, #24]
 8015bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	3301      	adds	r3, #1
 8015bca:	61fb      	str	r3, [r7, #28]
 8015bcc:	69fb      	ldr	r3, [r7, #28]
 8015bce:	2b0f      	cmp	r3, #15
 8015bd0:	f67f aea2 	bls.w	8015918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015bd4:	bf00      	nop
 8015bd6:	bf00      	nop
 8015bd8:	3724      	adds	r7, #36	; 0x24
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be0:	4770      	bx	lr
 8015be2:	bf00      	nop
 8015be4:	40023800 	.word	0x40023800
 8015be8:	40013800 	.word	0x40013800
 8015bec:	40020000 	.word	0x40020000
 8015bf0:	40020400 	.word	0x40020400
 8015bf4:	40020800 	.word	0x40020800
 8015bf8:	40020c00 	.word	0x40020c00
 8015bfc:	40021000 	.word	0x40021000
 8015c00:	40013c00 	.word	0x40013c00

08015c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015c04:	b480      	push	{r7}
 8015c06:	b083      	sub	sp, #12
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	807b      	strh	r3, [r7, #2]
 8015c10:	4613      	mov	r3, r2
 8015c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015c14:	787b      	ldrb	r3, [r7, #1]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d003      	beq.n	8015c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015c1a:	887a      	ldrh	r2, [r7, #2]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015c20:	e003      	b.n	8015c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015c22:	887b      	ldrh	r3, [r7, #2]
 8015c24:	041a      	lsls	r2, r3, #16
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	619a      	str	r2, [r3, #24]
}
 8015c2a:	bf00      	nop
 8015c2c:	370c      	adds	r7, #12
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c34:	4770      	bx	lr

08015c36 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b084      	sub	sp, #16
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d101      	bne.n	8015c48 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015c44:	2301      	movs	r3, #1
 8015c46:	e034      	b.n	8015cb2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8015c50:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	f245 5255 	movw	r2, #21845	; 0x5555
 8015c5a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	6852      	ldr	r2, [r2, #4]
 8015c64:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	687a      	ldr	r2, [r7, #4]
 8015c6c:	6892      	ldr	r2, [r2, #8]
 8015c6e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015c70:	f7ff fca8 	bl	80155c4 <HAL_GetTick>
 8015c74:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015c76:	e00f      	b.n	8015c98 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015c78:	f7ff fca4 	bl	80155c4 <HAL_GetTick>
 8015c7c:	4602      	mov	r2, r0
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	1ad3      	subs	r3, r2, r3
 8015c82:	2b31      	cmp	r3, #49	; 0x31
 8015c84:	d908      	bls.n	8015c98 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	68db      	ldr	r3, [r3, #12]
 8015c8c:	f003 0303 	and.w	r3, r3, #3
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d001      	beq.n	8015c98 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8015c94:	2303      	movs	r3, #3
 8015c96:	e00c      	b.n	8015cb2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	f003 0303 	and.w	r3, r3, #3
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d1e8      	bne.n	8015c78 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015cae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015cb0:	2300      	movs	r3, #0
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}

08015cba <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015cba:	b480      	push	{r7}
 8015cbc:	b083      	sub	sp, #12
 8015cbe:	af00      	add	r7, sp, #0
 8015cc0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015cca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015ccc:	2300      	movs	r3, #0
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	370c      	adds	r7, #12
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd8:	4770      	bx	lr
	...

08015cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b086      	sub	sp, #24
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d101      	bne.n	8015cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015cea:	2301      	movs	r3, #1
 8015cec:	e267      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	f003 0301 	and.w	r3, r3, #1
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d075      	beq.n	8015de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015cfa:	4b88      	ldr	r3, [pc, #544]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015cfc:	689b      	ldr	r3, [r3, #8]
 8015cfe:	f003 030c 	and.w	r3, r3, #12
 8015d02:	2b04      	cmp	r3, #4
 8015d04:	d00c      	beq.n	8015d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015d06:	4b85      	ldr	r3, [pc, #532]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d08:	689b      	ldr	r3, [r3, #8]
 8015d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015d0e:	2b08      	cmp	r3, #8
 8015d10:	d112      	bne.n	8015d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015d12:	4b82      	ldr	r3, [pc, #520]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015d1e:	d10b      	bne.n	8015d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015d20:	4b7e      	ldr	r3, [pc, #504]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d05b      	beq.n	8015de4 <HAL_RCC_OscConfig+0x108>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d157      	bne.n	8015de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8015d34:	2301      	movs	r3, #1
 8015d36:	e242      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	685b      	ldr	r3, [r3, #4]
 8015d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d40:	d106      	bne.n	8015d50 <HAL_RCC_OscConfig+0x74>
 8015d42:	4b76      	ldr	r3, [pc, #472]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	4a75      	ldr	r2, [pc, #468]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015d4c:	6013      	str	r3, [r2, #0]
 8015d4e:	e01d      	b.n	8015d8c <HAL_RCC_OscConfig+0xb0>
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015d58:	d10c      	bne.n	8015d74 <HAL_RCC_OscConfig+0x98>
 8015d5a:	4b70      	ldr	r3, [pc, #448]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	4a6f      	ldr	r2, [pc, #444]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015d64:	6013      	str	r3, [r2, #0]
 8015d66:	4b6d      	ldr	r3, [pc, #436]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	4a6c      	ldr	r2, [pc, #432]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015d70:	6013      	str	r3, [r2, #0]
 8015d72:	e00b      	b.n	8015d8c <HAL_RCC_OscConfig+0xb0>
 8015d74:	4b69      	ldr	r3, [pc, #420]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	4a68      	ldr	r2, [pc, #416]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015d7e:	6013      	str	r3, [r2, #0]
 8015d80:	4b66      	ldr	r3, [pc, #408]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	4a65      	ldr	r2, [pc, #404]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	685b      	ldr	r3, [r3, #4]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d013      	beq.n	8015dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015d94:	f7ff fc16 	bl	80155c4 <HAL_GetTick>
 8015d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015d9a:	e008      	b.n	8015dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015d9c:	f7ff fc12 	bl	80155c4 <HAL_GetTick>
 8015da0:	4602      	mov	r2, r0
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	1ad3      	subs	r3, r2, r3
 8015da6:	2b64      	cmp	r3, #100	; 0x64
 8015da8:	d901      	bls.n	8015dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015daa:	2303      	movs	r3, #3
 8015dac:	e207      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015dae:	4b5b      	ldr	r3, [pc, #364]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d0f0      	beq.n	8015d9c <HAL_RCC_OscConfig+0xc0>
 8015dba:	e014      	b.n	8015de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015dbc:	f7ff fc02 	bl	80155c4 <HAL_GetTick>
 8015dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015dc2:	e008      	b.n	8015dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015dc4:	f7ff fbfe 	bl	80155c4 <HAL_GetTick>
 8015dc8:	4602      	mov	r2, r0
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	1ad3      	subs	r3, r2, r3
 8015dce:	2b64      	cmp	r3, #100	; 0x64
 8015dd0:	d901      	bls.n	8015dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015dd2:	2303      	movs	r3, #3
 8015dd4:	e1f3      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015dd6:	4b51      	ldr	r3, [pc, #324]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d1f0      	bne.n	8015dc4 <HAL_RCC_OscConfig+0xe8>
 8015de2:	e000      	b.n	8015de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	f003 0302 	and.w	r3, r3, #2
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d063      	beq.n	8015eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015df2:	4b4a      	ldr	r3, [pc, #296]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015df4:	689b      	ldr	r3, [r3, #8]
 8015df6:	f003 030c 	and.w	r3, r3, #12
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d00b      	beq.n	8015e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015dfe:	4b47      	ldr	r3, [pc, #284]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e00:	689b      	ldr	r3, [r3, #8]
 8015e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015e06:	2b08      	cmp	r3, #8
 8015e08:	d11c      	bne.n	8015e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015e0a:	4b44      	ldr	r3, [pc, #272]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d116      	bne.n	8015e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015e16:	4b41      	ldr	r3, [pc, #260]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	f003 0302 	and.w	r3, r3, #2
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d005      	beq.n	8015e2e <HAL_RCC_OscConfig+0x152>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	68db      	ldr	r3, [r3, #12]
 8015e26:	2b01      	cmp	r3, #1
 8015e28:	d001      	beq.n	8015e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	e1c7      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015e2e:	4b3b      	ldr	r3, [pc, #236]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	691b      	ldr	r3, [r3, #16]
 8015e3a:	00db      	lsls	r3, r3, #3
 8015e3c:	4937      	ldr	r1, [pc, #220]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e3e:	4313      	orrs	r3, r2
 8015e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015e42:	e03a      	b.n	8015eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d020      	beq.n	8015e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015e4c:	4b34      	ldr	r3, [pc, #208]	; (8015f20 <HAL_RCC_OscConfig+0x244>)
 8015e4e:	2201      	movs	r2, #1
 8015e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015e52:	f7ff fbb7 	bl	80155c4 <HAL_GetTick>
 8015e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015e58:	e008      	b.n	8015e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015e5a:	f7ff fbb3 	bl	80155c4 <HAL_GetTick>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	693b      	ldr	r3, [r7, #16]
 8015e62:	1ad3      	subs	r3, r2, r3
 8015e64:	2b02      	cmp	r3, #2
 8015e66:	d901      	bls.n	8015e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015e68:	2303      	movs	r3, #3
 8015e6a:	e1a8      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015e6c:	4b2b      	ldr	r3, [pc, #172]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	f003 0302 	and.w	r3, r3, #2
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d0f0      	beq.n	8015e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015e78:	4b28      	ldr	r3, [pc, #160]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	691b      	ldr	r3, [r3, #16]
 8015e84:	00db      	lsls	r3, r3, #3
 8015e86:	4925      	ldr	r1, [pc, #148]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015e88:	4313      	orrs	r3, r2
 8015e8a:	600b      	str	r3, [r1, #0]
 8015e8c:	e015      	b.n	8015eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015e8e:	4b24      	ldr	r3, [pc, #144]	; (8015f20 <HAL_RCC_OscConfig+0x244>)
 8015e90:	2200      	movs	r2, #0
 8015e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015e94:	f7ff fb96 	bl	80155c4 <HAL_GetTick>
 8015e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015e9a:	e008      	b.n	8015eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015e9c:	f7ff fb92 	bl	80155c4 <HAL_GetTick>
 8015ea0:	4602      	mov	r2, r0
 8015ea2:	693b      	ldr	r3, [r7, #16]
 8015ea4:	1ad3      	subs	r3, r2, r3
 8015ea6:	2b02      	cmp	r3, #2
 8015ea8:	d901      	bls.n	8015eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8015eaa:	2303      	movs	r3, #3
 8015eac:	e187      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015eae:	4b1b      	ldr	r3, [pc, #108]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	f003 0302 	and.w	r3, r3, #2
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d1f0      	bne.n	8015e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	f003 0308 	and.w	r3, r3, #8
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d036      	beq.n	8015f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	695b      	ldr	r3, [r3, #20]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d016      	beq.n	8015efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015ece:	4b15      	ldr	r3, [pc, #84]	; (8015f24 <HAL_RCC_OscConfig+0x248>)
 8015ed0:	2201      	movs	r2, #1
 8015ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015ed4:	f7ff fb76 	bl	80155c4 <HAL_GetTick>
 8015ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015eda:	e008      	b.n	8015eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015edc:	f7ff fb72 	bl	80155c4 <HAL_GetTick>
 8015ee0:	4602      	mov	r2, r0
 8015ee2:	693b      	ldr	r3, [r7, #16]
 8015ee4:	1ad3      	subs	r3, r2, r3
 8015ee6:	2b02      	cmp	r3, #2
 8015ee8:	d901      	bls.n	8015eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8015eea:	2303      	movs	r3, #3
 8015eec:	e167      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015eee:	4b0b      	ldr	r3, [pc, #44]	; (8015f1c <HAL_RCC_OscConfig+0x240>)
 8015ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ef2:	f003 0302 	and.w	r3, r3, #2
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d0f0      	beq.n	8015edc <HAL_RCC_OscConfig+0x200>
 8015efa:	e01b      	b.n	8015f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015efc:	4b09      	ldr	r3, [pc, #36]	; (8015f24 <HAL_RCC_OscConfig+0x248>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015f02:	f7ff fb5f 	bl	80155c4 <HAL_GetTick>
 8015f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015f08:	e00e      	b.n	8015f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015f0a:	f7ff fb5b 	bl	80155c4 <HAL_GetTick>
 8015f0e:	4602      	mov	r2, r0
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	1ad3      	subs	r3, r2, r3
 8015f14:	2b02      	cmp	r3, #2
 8015f16:	d907      	bls.n	8015f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8015f18:	2303      	movs	r3, #3
 8015f1a:	e150      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
 8015f1c:	40023800 	.word	0x40023800
 8015f20:	42470000 	.word	0x42470000
 8015f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015f28:	4b88      	ldr	r3, [pc, #544]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f2c:	f003 0302 	and.w	r3, r3, #2
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d1ea      	bne.n	8015f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f003 0304 	and.w	r3, r3, #4
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	f000 8097 	beq.w	8016070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015f42:	2300      	movs	r3, #0
 8015f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015f46:	4b81      	ldr	r3, [pc, #516]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d10f      	bne.n	8015f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015f52:	2300      	movs	r3, #0
 8015f54:	60bb      	str	r3, [r7, #8]
 8015f56:	4b7d      	ldr	r3, [pc, #500]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f5a:	4a7c      	ldr	r2, [pc, #496]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f60:	6413      	str	r3, [r2, #64]	; 0x40
 8015f62:	4b7a      	ldr	r3, [pc, #488]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015f6a:	60bb      	str	r3, [r7, #8]
 8015f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015f6e:	2301      	movs	r3, #1
 8015f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015f72:	4b77      	ldr	r3, [pc, #476]	; (8016150 <HAL_RCC_OscConfig+0x474>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d118      	bne.n	8015fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015f7e:	4b74      	ldr	r3, [pc, #464]	; (8016150 <HAL_RCC_OscConfig+0x474>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	4a73      	ldr	r2, [pc, #460]	; (8016150 <HAL_RCC_OscConfig+0x474>)
 8015f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015f8a:	f7ff fb1b 	bl	80155c4 <HAL_GetTick>
 8015f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015f90:	e008      	b.n	8015fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015f92:	f7ff fb17 	bl	80155c4 <HAL_GetTick>
 8015f96:	4602      	mov	r2, r0
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	1ad3      	subs	r3, r2, r3
 8015f9c:	2b02      	cmp	r3, #2
 8015f9e:	d901      	bls.n	8015fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8015fa0:	2303      	movs	r3, #3
 8015fa2:	e10c      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015fa4:	4b6a      	ldr	r3, [pc, #424]	; (8016150 <HAL_RCC_OscConfig+0x474>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d0f0      	beq.n	8015f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	689b      	ldr	r3, [r3, #8]
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d106      	bne.n	8015fc6 <HAL_RCC_OscConfig+0x2ea>
 8015fb8:	4b64      	ldr	r3, [pc, #400]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fbc:	4a63      	ldr	r2, [pc, #396]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fbe:	f043 0301 	orr.w	r3, r3, #1
 8015fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8015fc4:	e01c      	b.n	8016000 <HAL_RCC_OscConfig+0x324>
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	689b      	ldr	r3, [r3, #8]
 8015fca:	2b05      	cmp	r3, #5
 8015fcc:	d10c      	bne.n	8015fe8 <HAL_RCC_OscConfig+0x30c>
 8015fce:	4b5f      	ldr	r3, [pc, #380]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fd2:	4a5e      	ldr	r2, [pc, #376]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fd4:	f043 0304 	orr.w	r3, r3, #4
 8015fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8015fda:	4b5c      	ldr	r3, [pc, #368]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fde:	4a5b      	ldr	r2, [pc, #364]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fe0:	f043 0301 	orr.w	r3, r3, #1
 8015fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8015fe6:	e00b      	b.n	8016000 <HAL_RCC_OscConfig+0x324>
 8015fe8:	4b58      	ldr	r3, [pc, #352]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fec:	4a57      	ldr	r2, [pc, #348]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015fee:	f023 0301 	bic.w	r3, r3, #1
 8015ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8015ff4:	4b55      	ldr	r3, [pc, #340]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ff8:	4a54      	ldr	r2, [pc, #336]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8015ffa:	f023 0304 	bic.w	r3, r3, #4
 8015ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	689b      	ldr	r3, [r3, #8]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d015      	beq.n	8016034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016008:	f7ff fadc 	bl	80155c4 <HAL_GetTick>
 801600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801600e:	e00a      	b.n	8016026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8016010:	f7ff fad8 	bl	80155c4 <HAL_GetTick>
 8016014:	4602      	mov	r2, r0
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	1ad3      	subs	r3, r2, r3
 801601a:	f241 3288 	movw	r2, #5000	; 0x1388
 801601e:	4293      	cmp	r3, r2
 8016020:	d901      	bls.n	8016026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8016022:	2303      	movs	r3, #3
 8016024:	e0cb      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016026:	4b49      	ldr	r3, [pc, #292]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8016028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801602a:	f003 0302 	and.w	r3, r3, #2
 801602e:	2b00      	cmp	r3, #0
 8016030:	d0ee      	beq.n	8016010 <HAL_RCC_OscConfig+0x334>
 8016032:	e014      	b.n	801605e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016034:	f7ff fac6 	bl	80155c4 <HAL_GetTick>
 8016038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801603a:	e00a      	b.n	8016052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801603c:	f7ff fac2 	bl	80155c4 <HAL_GetTick>
 8016040:	4602      	mov	r2, r0
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	1ad3      	subs	r3, r2, r3
 8016046:	f241 3288 	movw	r2, #5000	; 0x1388
 801604a:	4293      	cmp	r3, r2
 801604c:	d901      	bls.n	8016052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801604e:	2303      	movs	r3, #3
 8016050:	e0b5      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016052:	4b3e      	ldr	r3, [pc, #248]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8016054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016056:	f003 0302 	and.w	r3, r3, #2
 801605a:	2b00      	cmp	r3, #0
 801605c:	d1ee      	bne.n	801603c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801605e:	7dfb      	ldrb	r3, [r7, #23]
 8016060:	2b01      	cmp	r3, #1
 8016062:	d105      	bne.n	8016070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016064:	4b39      	ldr	r3, [pc, #228]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8016066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016068:	4a38      	ldr	r2, [pc, #224]	; (801614c <HAL_RCC_OscConfig+0x470>)
 801606a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801606e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	699b      	ldr	r3, [r3, #24]
 8016074:	2b00      	cmp	r3, #0
 8016076:	f000 80a1 	beq.w	80161bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801607a:	4b34      	ldr	r3, [pc, #208]	; (801614c <HAL_RCC_OscConfig+0x470>)
 801607c:	689b      	ldr	r3, [r3, #8]
 801607e:	f003 030c 	and.w	r3, r3, #12
 8016082:	2b08      	cmp	r3, #8
 8016084:	d05c      	beq.n	8016140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	699b      	ldr	r3, [r3, #24]
 801608a:	2b02      	cmp	r3, #2
 801608c:	d141      	bne.n	8016112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801608e:	4b31      	ldr	r3, [pc, #196]	; (8016154 <HAL_RCC_OscConfig+0x478>)
 8016090:	2200      	movs	r2, #0
 8016092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016094:	f7ff fa96 	bl	80155c4 <HAL_GetTick>
 8016098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801609a:	e008      	b.n	80160ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801609c:	f7ff fa92 	bl	80155c4 <HAL_GetTick>
 80160a0:	4602      	mov	r2, r0
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	1ad3      	subs	r3, r2, r3
 80160a6:	2b02      	cmp	r3, #2
 80160a8:	d901      	bls.n	80160ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80160aa:	2303      	movs	r3, #3
 80160ac:	e087      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80160ae:	4b27      	ldr	r3, [pc, #156]	; (801614c <HAL_RCC_OscConfig+0x470>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d1f0      	bne.n	801609c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	69da      	ldr	r2, [r3, #28]
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	6a1b      	ldr	r3, [r3, #32]
 80160c2:	431a      	orrs	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160c8:	019b      	lsls	r3, r3, #6
 80160ca:	431a      	orrs	r2, r3
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160d0:	085b      	lsrs	r3, r3, #1
 80160d2:	3b01      	subs	r3, #1
 80160d4:	041b      	lsls	r3, r3, #16
 80160d6:	431a      	orrs	r2, r3
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160dc:	061b      	lsls	r3, r3, #24
 80160de:	491b      	ldr	r1, [pc, #108]	; (801614c <HAL_RCC_OscConfig+0x470>)
 80160e0:	4313      	orrs	r3, r2
 80160e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80160e4:	4b1b      	ldr	r3, [pc, #108]	; (8016154 <HAL_RCC_OscConfig+0x478>)
 80160e6:	2201      	movs	r2, #1
 80160e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160ea:	f7ff fa6b 	bl	80155c4 <HAL_GetTick>
 80160ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80160f0:	e008      	b.n	8016104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80160f2:	f7ff fa67 	bl	80155c4 <HAL_GetTick>
 80160f6:	4602      	mov	r2, r0
 80160f8:	693b      	ldr	r3, [r7, #16]
 80160fa:	1ad3      	subs	r3, r2, r3
 80160fc:	2b02      	cmp	r3, #2
 80160fe:	d901      	bls.n	8016104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8016100:	2303      	movs	r3, #3
 8016102:	e05c      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016104:	4b11      	ldr	r3, [pc, #68]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801610c:	2b00      	cmp	r3, #0
 801610e:	d0f0      	beq.n	80160f2 <HAL_RCC_OscConfig+0x416>
 8016110:	e054      	b.n	80161bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016112:	4b10      	ldr	r3, [pc, #64]	; (8016154 <HAL_RCC_OscConfig+0x478>)
 8016114:	2200      	movs	r2, #0
 8016116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016118:	f7ff fa54 	bl	80155c4 <HAL_GetTick>
 801611c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801611e:	e008      	b.n	8016132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016120:	f7ff fa50 	bl	80155c4 <HAL_GetTick>
 8016124:	4602      	mov	r2, r0
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	2b02      	cmp	r3, #2
 801612c:	d901      	bls.n	8016132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801612e:	2303      	movs	r3, #3
 8016130:	e045      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016132:	4b06      	ldr	r3, [pc, #24]	; (801614c <HAL_RCC_OscConfig+0x470>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801613a:	2b00      	cmp	r3, #0
 801613c:	d1f0      	bne.n	8016120 <HAL_RCC_OscConfig+0x444>
 801613e:	e03d      	b.n	80161bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	699b      	ldr	r3, [r3, #24]
 8016144:	2b01      	cmp	r3, #1
 8016146:	d107      	bne.n	8016158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8016148:	2301      	movs	r3, #1
 801614a:	e038      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
 801614c:	40023800 	.word	0x40023800
 8016150:	40007000 	.word	0x40007000
 8016154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8016158:	4b1b      	ldr	r3, [pc, #108]	; (80161c8 <HAL_RCC_OscConfig+0x4ec>)
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	699b      	ldr	r3, [r3, #24]
 8016162:	2b01      	cmp	r3, #1
 8016164:	d028      	beq.n	80161b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016170:	429a      	cmp	r2, r3
 8016172:	d121      	bne.n	80161b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801617e:	429a      	cmp	r2, r3
 8016180:	d11a      	bne.n	80161b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016182:	68fa      	ldr	r2, [r7, #12]
 8016184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016188:	4013      	ands	r3, r2
 801618a:	687a      	ldr	r2, [r7, #4]
 801618c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801618e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016190:	4293      	cmp	r3, r2
 8016192:	d111      	bne.n	80161b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801619e:	085b      	lsrs	r3, r3, #1
 80161a0:	3b01      	subs	r3, #1
 80161a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d107      	bne.n	80161b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d001      	beq.n	80161bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80161b8:	2301      	movs	r3, #1
 80161ba:	e000      	b.n	80161be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80161bc:	2300      	movs	r3, #0
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3718      	adds	r7, #24
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	40023800 	.word	0x40023800

080161cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b084      	sub	sp, #16
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d101      	bne.n	80161e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80161dc:	2301      	movs	r3, #1
 80161de:	e0cc      	b.n	801637a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80161e0:	4b68      	ldr	r3, [pc, #416]	; (8016384 <HAL_RCC_ClockConfig+0x1b8>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	f003 0307 	and.w	r3, r3, #7
 80161e8:	683a      	ldr	r2, [r7, #0]
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d90c      	bls.n	8016208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80161ee:	4b65      	ldr	r3, [pc, #404]	; (8016384 <HAL_RCC_ClockConfig+0x1b8>)
 80161f0:	683a      	ldr	r2, [r7, #0]
 80161f2:	b2d2      	uxtb	r2, r2
 80161f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80161f6:	4b63      	ldr	r3, [pc, #396]	; (8016384 <HAL_RCC_ClockConfig+0x1b8>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f003 0307 	and.w	r3, r3, #7
 80161fe:	683a      	ldr	r2, [r7, #0]
 8016200:	429a      	cmp	r2, r3
 8016202:	d001      	beq.n	8016208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8016204:	2301      	movs	r3, #1
 8016206:	e0b8      	b.n	801637a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	f003 0302 	and.w	r3, r3, #2
 8016210:	2b00      	cmp	r3, #0
 8016212:	d020      	beq.n	8016256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f003 0304 	and.w	r3, r3, #4
 801621c:	2b00      	cmp	r3, #0
 801621e:	d005      	beq.n	801622c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016220:	4b59      	ldr	r3, [pc, #356]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 8016222:	689b      	ldr	r3, [r3, #8]
 8016224:	4a58      	ldr	r2, [pc, #352]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 8016226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801622a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	f003 0308 	and.w	r3, r3, #8
 8016234:	2b00      	cmp	r3, #0
 8016236:	d005      	beq.n	8016244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016238:	4b53      	ldr	r3, [pc, #332]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801623a:	689b      	ldr	r3, [r3, #8]
 801623c:	4a52      	ldr	r2, [pc, #328]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801623e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8016242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016244:	4b50      	ldr	r3, [pc, #320]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 8016246:	689b      	ldr	r3, [r3, #8]
 8016248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	689b      	ldr	r3, [r3, #8]
 8016250:	494d      	ldr	r1, [pc, #308]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 8016252:	4313      	orrs	r3, r2
 8016254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	f003 0301 	and.w	r3, r3, #1
 801625e:	2b00      	cmp	r3, #0
 8016260:	d044      	beq.n	80162ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	2b01      	cmp	r3, #1
 8016268:	d107      	bne.n	801627a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801626a:	4b47      	ldr	r3, [pc, #284]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016272:	2b00      	cmp	r3, #0
 8016274:	d119      	bne.n	80162aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016276:	2301      	movs	r3, #1
 8016278:	e07f      	b.n	801637a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	685b      	ldr	r3, [r3, #4]
 801627e:	2b02      	cmp	r3, #2
 8016280:	d003      	beq.n	801628a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016286:	2b03      	cmp	r3, #3
 8016288:	d107      	bne.n	801629a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801628a:	4b3f      	ldr	r3, [pc, #252]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016292:	2b00      	cmp	r3, #0
 8016294:	d109      	bne.n	80162aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016296:	2301      	movs	r3, #1
 8016298:	e06f      	b.n	801637a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801629a:	4b3b      	ldr	r3, [pc, #236]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	f003 0302 	and.w	r3, r3, #2
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d101      	bne.n	80162aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80162a6:	2301      	movs	r3, #1
 80162a8:	e067      	b.n	801637a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80162aa:	4b37      	ldr	r3, [pc, #220]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 80162ac:	689b      	ldr	r3, [r3, #8]
 80162ae:	f023 0203 	bic.w	r2, r3, #3
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	4934      	ldr	r1, [pc, #208]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 80162b8:	4313      	orrs	r3, r2
 80162ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80162bc:	f7ff f982 	bl	80155c4 <HAL_GetTick>
 80162c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80162c2:	e00a      	b.n	80162da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80162c4:	f7ff f97e 	bl	80155c4 <HAL_GetTick>
 80162c8:	4602      	mov	r2, r0
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80162d2:	4293      	cmp	r3, r2
 80162d4:	d901      	bls.n	80162da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80162d6:	2303      	movs	r3, #3
 80162d8:	e04f      	b.n	801637a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80162da:	4b2b      	ldr	r3, [pc, #172]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 80162dc:	689b      	ldr	r3, [r3, #8]
 80162de:	f003 020c 	and.w	r2, r3, #12
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	685b      	ldr	r3, [r3, #4]
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d1eb      	bne.n	80162c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80162ec:	4b25      	ldr	r3, [pc, #148]	; (8016384 <HAL_RCC_ClockConfig+0x1b8>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	f003 0307 	and.w	r3, r3, #7
 80162f4:	683a      	ldr	r2, [r7, #0]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d20c      	bcs.n	8016314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80162fa:	4b22      	ldr	r3, [pc, #136]	; (8016384 <HAL_RCC_ClockConfig+0x1b8>)
 80162fc:	683a      	ldr	r2, [r7, #0]
 80162fe:	b2d2      	uxtb	r2, r2
 8016300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016302:	4b20      	ldr	r3, [pc, #128]	; (8016384 <HAL_RCC_ClockConfig+0x1b8>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	f003 0307 	and.w	r3, r3, #7
 801630a:	683a      	ldr	r2, [r7, #0]
 801630c:	429a      	cmp	r2, r3
 801630e:	d001      	beq.n	8016314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016310:	2301      	movs	r3, #1
 8016312:	e032      	b.n	801637a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	f003 0304 	and.w	r3, r3, #4
 801631c:	2b00      	cmp	r3, #0
 801631e:	d008      	beq.n	8016332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016320:	4b19      	ldr	r3, [pc, #100]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 8016322:	689b      	ldr	r3, [r3, #8]
 8016324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	4916      	ldr	r1, [pc, #88]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801632e:	4313      	orrs	r3, r2
 8016330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	f003 0308 	and.w	r3, r3, #8
 801633a:	2b00      	cmp	r3, #0
 801633c:	d009      	beq.n	8016352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801633e:	4b12      	ldr	r3, [pc, #72]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 8016340:	689b      	ldr	r3, [r3, #8]
 8016342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	691b      	ldr	r3, [r3, #16]
 801634a:	00db      	lsls	r3, r3, #3
 801634c:	490e      	ldr	r1, [pc, #56]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801634e:	4313      	orrs	r3, r2
 8016350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016352:	f000 f821 	bl	8016398 <HAL_RCC_GetSysClockFreq>
 8016356:	4602      	mov	r2, r0
 8016358:	4b0b      	ldr	r3, [pc, #44]	; (8016388 <HAL_RCC_ClockConfig+0x1bc>)
 801635a:	689b      	ldr	r3, [r3, #8]
 801635c:	091b      	lsrs	r3, r3, #4
 801635e:	f003 030f 	and.w	r3, r3, #15
 8016362:	490a      	ldr	r1, [pc, #40]	; (801638c <HAL_RCC_ClockConfig+0x1c0>)
 8016364:	5ccb      	ldrb	r3, [r1, r3]
 8016366:	fa22 f303 	lsr.w	r3, r2, r3
 801636a:	4a09      	ldr	r2, [pc, #36]	; (8016390 <HAL_RCC_ClockConfig+0x1c4>)
 801636c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801636e:	4b09      	ldr	r3, [pc, #36]	; (8016394 <HAL_RCC_ClockConfig+0x1c8>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	4618      	mov	r0, r3
 8016374:	f7fc fb6e 	bl	8012a54 <HAL_InitTick>

  return HAL_OK;
 8016378:	2300      	movs	r3, #0
}
 801637a:	4618      	mov	r0, r3
 801637c:	3710      	adds	r7, #16
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}
 8016382:	bf00      	nop
 8016384:	40023c00 	.word	0x40023c00
 8016388:	40023800 	.word	0x40023800
 801638c:	0803401c 	.word	0x0803401c
 8016390:	20000000 	.word	0x20000000
 8016394:	200000bc 	.word	0x200000bc

08016398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801639c:	b094      	sub	sp, #80	; 0x50
 801639e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80163a0:	2300      	movs	r3, #0
 80163a2:	647b      	str	r3, [r7, #68]	; 0x44
 80163a4:	2300      	movs	r3, #0
 80163a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80163a8:	2300      	movs	r3, #0
 80163aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80163ac:	2300      	movs	r3, #0
 80163ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80163b0:	4b79      	ldr	r3, [pc, #484]	; (8016598 <HAL_RCC_GetSysClockFreq+0x200>)
 80163b2:	689b      	ldr	r3, [r3, #8]
 80163b4:	f003 030c 	and.w	r3, r3, #12
 80163b8:	2b08      	cmp	r3, #8
 80163ba:	d00d      	beq.n	80163d8 <HAL_RCC_GetSysClockFreq+0x40>
 80163bc:	2b08      	cmp	r3, #8
 80163be:	f200 80e1 	bhi.w	8016584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d002      	beq.n	80163cc <HAL_RCC_GetSysClockFreq+0x34>
 80163c6:	2b04      	cmp	r3, #4
 80163c8:	d003      	beq.n	80163d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80163ca:	e0db      	b.n	8016584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80163cc:	4b73      	ldr	r3, [pc, #460]	; (801659c <HAL_RCC_GetSysClockFreq+0x204>)
 80163ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80163d0:	e0db      	b.n	801658a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80163d2:	4b73      	ldr	r3, [pc, #460]	; (80165a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80163d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80163d6:	e0d8      	b.n	801658a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80163d8:	4b6f      	ldr	r3, [pc, #444]	; (8016598 <HAL_RCC_GetSysClockFreq+0x200>)
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80163e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80163e2:	4b6d      	ldr	r3, [pc, #436]	; (8016598 <HAL_RCC_GetSysClockFreq+0x200>)
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d063      	beq.n	80164b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80163ee:	4b6a      	ldr	r3, [pc, #424]	; (8016598 <HAL_RCC_GetSysClockFreq+0x200>)
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	099b      	lsrs	r3, r3, #6
 80163f4:	2200      	movs	r2, #0
 80163f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80163f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80163fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016400:	633b      	str	r3, [r7, #48]	; 0x30
 8016402:	2300      	movs	r3, #0
 8016404:	637b      	str	r3, [r7, #52]	; 0x34
 8016406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801640a:	4622      	mov	r2, r4
 801640c:	462b      	mov	r3, r5
 801640e:	f04f 0000 	mov.w	r0, #0
 8016412:	f04f 0100 	mov.w	r1, #0
 8016416:	0159      	lsls	r1, r3, #5
 8016418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801641c:	0150      	lsls	r0, r2, #5
 801641e:	4602      	mov	r2, r0
 8016420:	460b      	mov	r3, r1
 8016422:	4621      	mov	r1, r4
 8016424:	1a51      	subs	r1, r2, r1
 8016426:	6139      	str	r1, [r7, #16]
 8016428:	4629      	mov	r1, r5
 801642a:	eb63 0301 	sbc.w	r3, r3, r1
 801642e:	617b      	str	r3, [r7, #20]
 8016430:	f04f 0200 	mov.w	r2, #0
 8016434:	f04f 0300 	mov.w	r3, #0
 8016438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801643c:	4659      	mov	r1, fp
 801643e:	018b      	lsls	r3, r1, #6
 8016440:	4651      	mov	r1, sl
 8016442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8016446:	4651      	mov	r1, sl
 8016448:	018a      	lsls	r2, r1, #6
 801644a:	4651      	mov	r1, sl
 801644c:	ebb2 0801 	subs.w	r8, r2, r1
 8016450:	4659      	mov	r1, fp
 8016452:	eb63 0901 	sbc.w	r9, r3, r1
 8016456:	f04f 0200 	mov.w	r2, #0
 801645a:	f04f 0300 	mov.w	r3, #0
 801645e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801646a:	4690      	mov	r8, r2
 801646c:	4699      	mov	r9, r3
 801646e:	4623      	mov	r3, r4
 8016470:	eb18 0303 	adds.w	r3, r8, r3
 8016474:	60bb      	str	r3, [r7, #8]
 8016476:	462b      	mov	r3, r5
 8016478:	eb49 0303 	adc.w	r3, r9, r3
 801647c:	60fb      	str	r3, [r7, #12]
 801647e:	f04f 0200 	mov.w	r2, #0
 8016482:	f04f 0300 	mov.w	r3, #0
 8016486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801648a:	4629      	mov	r1, r5
 801648c:	024b      	lsls	r3, r1, #9
 801648e:	4621      	mov	r1, r4
 8016490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8016494:	4621      	mov	r1, r4
 8016496:	024a      	lsls	r2, r1, #9
 8016498:	4610      	mov	r0, r2
 801649a:	4619      	mov	r1, r3
 801649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801649e:	2200      	movs	r2, #0
 80164a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80164a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80164a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80164a8:	f7fa fc06 	bl	8010cb8 <__aeabi_uldivmod>
 80164ac:	4602      	mov	r2, r0
 80164ae:	460b      	mov	r3, r1
 80164b0:	4613      	mov	r3, r2
 80164b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164b4:	e058      	b.n	8016568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80164b6:	4b38      	ldr	r3, [pc, #224]	; (8016598 <HAL_RCC_GetSysClockFreq+0x200>)
 80164b8:	685b      	ldr	r3, [r3, #4]
 80164ba:	099b      	lsrs	r3, r3, #6
 80164bc:	2200      	movs	r2, #0
 80164be:	4618      	mov	r0, r3
 80164c0:	4611      	mov	r1, r2
 80164c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80164c6:	623b      	str	r3, [r7, #32]
 80164c8:	2300      	movs	r3, #0
 80164ca:	627b      	str	r3, [r7, #36]	; 0x24
 80164cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80164d0:	4642      	mov	r2, r8
 80164d2:	464b      	mov	r3, r9
 80164d4:	f04f 0000 	mov.w	r0, #0
 80164d8:	f04f 0100 	mov.w	r1, #0
 80164dc:	0159      	lsls	r1, r3, #5
 80164de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80164e2:	0150      	lsls	r0, r2, #5
 80164e4:	4602      	mov	r2, r0
 80164e6:	460b      	mov	r3, r1
 80164e8:	4641      	mov	r1, r8
 80164ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80164ee:	4649      	mov	r1, r9
 80164f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80164f4:	f04f 0200 	mov.w	r2, #0
 80164f8:	f04f 0300 	mov.w	r3, #0
 80164fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8016500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8016504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8016508:	ebb2 040a 	subs.w	r4, r2, sl
 801650c:	eb63 050b 	sbc.w	r5, r3, fp
 8016510:	f04f 0200 	mov.w	r2, #0
 8016514:	f04f 0300 	mov.w	r3, #0
 8016518:	00eb      	lsls	r3, r5, #3
 801651a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801651e:	00e2      	lsls	r2, r4, #3
 8016520:	4614      	mov	r4, r2
 8016522:	461d      	mov	r5, r3
 8016524:	4643      	mov	r3, r8
 8016526:	18e3      	adds	r3, r4, r3
 8016528:	603b      	str	r3, [r7, #0]
 801652a:	464b      	mov	r3, r9
 801652c:	eb45 0303 	adc.w	r3, r5, r3
 8016530:	607b      	str	r3, [r7, #4]
 8016532:	f04f 0200 	mov.w	r2, #0
 8016536:	f04f 0300 	mov.w	r3, #0
 801653a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801653e:	4629      	mov	r1, r5
 8016540:	028b      	lsls	r3, r1, #10
 8016542:	4621      	mov	r1, r4
 8016544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8016548:	4621      	mov	r1, r4
 801654a:	028a      	lsls	r2, r1, #10
 801654c:	4610      	mov	r0, r2
 801654e:	4619      	mov	r1, r3
 8016550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016552:	2200      	movs	r2, #0
 8016554:	61bb      	str	r3, [r7, #24]
 8016556:	61fa      	str	r2, [r7, #28]
 8016558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801655c:	f7fa fbac 	bl	8010cb8 <__aeabi_uldivmod>
 8016560:	4602      	mov	r2, r0
 8016562:	460b      	mov	r3, r1
 8016564:	4613      	mov	r3, r2
 8016566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016568:	4b0b      	ldr	r3, [pc, #44]	; (8016598 <HAL_RCC_GetSysClockFreq+0x200>)
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	0c1b      	lsrs	r3, r3, #16
 801656e:	f003 0303 	and.w	r3, r3, #3
 8016572:	3301      	adds	r3, #1
 8016574:	005b      	lsls	r3, r3, #1
 8016576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8016578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801657a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8016582:	e002      	b.n	801658a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016584:	4b05      	ldr	r3, [pc, #20]	; (801659c <HAL_RCC_GetSysClockFreq+0x204>)
 8016586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8016588:	bf00      	nop
    }
  }
  return sysclockfreq;
 801658a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801658c:	4618      	mov	r0, r3
 801658e:	3750      	adds	r7, #80	; 0x50
 8016590:	46bd      	mov	sp, r7
 8016592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016596:	bf00      	nop
 8016598:	40023800 	.word	0x40023800
 801659c:	00f42400 	.word	0x00f42400
 80165a0:	007a1200 	.word	0x007a1200

080165a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80165a4:	b480      	push	{r7}
 80165a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80165a8:	4b03      	ldr	r3, [pc, #12]	; (80165b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80165aa:	681b      	ldr	r3, [r3, #0]
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	46bd      	mov	sp, r7
 80165b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b4:	4770      	bx	lr
 80165b6:	bf00      	nop
 80165b8:	20000000 	.word	0x20000000

080165bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80165c0:	f7ff fff0 	bl	80165a4 <HAL_RCC_GetHCLKFreq>
 80165c4:	4602      	mov	r2, r0
 80165c6:	4b05      	ldr	r3, [pc, #20]	; (80165dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80165c8:	689b      	ldr	r3, [r3, #8]
 80165ca:	0a9b      	lsrs	r3, r3, #10
 80165cc:	f003 0307 	and.w	r3, r3, #7
 80165d0:	4903      	ldr	r1, [pc, #12]	; (80165e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80165d2:	5ccb      	ldrb	r3, [r1, r3]
 80165d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80165d8:	4618      	mov	r0, r3
 80165da:	bd80      	pop	{r7, pc}
 80165dc:	40023800 	.word	0x40023800
 80165e0:	0803402c 	.word	0x0803402c

080165e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80165e8:	f7ff ffdc 	bl	80165a4 <HAL_RCC_GetHCLKFreq>
 80165ec:	4602      	mov	r2, r0
 80165ee:	4b05      	ldr	r3, [pc, #20]	; (8016604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80165f0:	689b      	ldr	r3, [r3, #8]
 80165f2:	0b5b      	lsrs	r3, r3, #13
 80165f4:	f003 0307 	and.w	r3, r3, #7
 80165f8:	4903      	ldr	r1, [pc, #12]	; (8016608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80165fa:	5ccb      	ldrb	r3, [r1, r3]
 80165fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016600:	4618      	mov	r0, r3
 8016602:	bd80      	pop	{r7, pc}
 8016604:	40023800 	.word	0x40023800
 8016608:	0803402c 	.word	0x0803402c

0801660c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801660c:	b480      	push	{r7}
 801660e:	b083      	sub	sp, #12
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	220f      	movs	r2, #15
 801661a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801661c:	4b12      	ldr	r3, [pc, #72]	; (8016668 <HAL_RCC_GetClockConfig+0x5c>)
 801661e:	689b      	ldr	r3, [r3, #8]
 8016620:	f003 0203 	and.w	r2, r3, #3
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016628:	4b0f      	ldr	r3, [pc, #60]	; (8016668 <HAL_RCC_GetClockConfig+0x5c>)
 801662a:	689b      	ldr	r3, [r3, #8]
 801662c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016634:	4b0c      	ldr	r3, [pc, #48]	; (8016668 <HAL_RCC_GetClockConfig+0x5c>)
 8016636:	689b      	ldr	r3, [r3, #8]
 8016638:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016640:	4b09      	ldr	r3, [pc, #36]	; (8016668 <HAL_RCC_GetClockConfig+0x5c>)
 8016642:	689b      	ldr	r3, [r3, #8]
 8016644:	08db      	lsrs	r3, r3, #3
 8016646:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801664e:	4b07      	ldr	r3, [pc, #28]	; (801666c <HAL_RCC_GetClockConfig+0x60>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	f003 0207 	and.w	r2, r3, #7
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	601a      	str	r2, [r3, #0]
}
 801665a:	bf00      	nop
 801665c:	370c      	adds	r7, #12
 801665e:	46bd      	mov	sp, r7
 8016660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016664:	4770      	bx	lr
 8016666:	bf00      	nop
 8016668:	40023800 	.word	0x40023800
 801666c:	40023c00 	.word	0x40023c00

08016670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d101      	bne.n	8016682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801667e:	2301      	movs	r3, #1
 8016680:	e07b      	b.n	801677a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016686:	2b00      	cmp	r3, #0
 8016688:	d108      	bne.n	801669c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016692:	d009      	beq.n	80166a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2200      	movs	r2, #0
 8016698:	61da      	str	r2, [r3, #28]
 801669a:	e005      	b.n	80166a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2200      	movs	r2, #0
 80166a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2200      	movs	r2, #0
 80166ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d106      	bne.n	80166c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2200      	movs	r2, #0
 80166be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7fc f8f8 	bl	80128b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2202      	movs	r2, #2
 80166cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80166de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	689b      	ldr	r3, [r3, #8]
 80166ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80166f0:	431a      	orrs	r2, r3
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	68db      	ldr	r3, [r3, #12]
 80166f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80166fa:	431a      	orrs	r2, r3
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	691b      	ldr	r3, [r3, #16]
 8016700:	f003 0302 	and.w	r3, r3, #2
 8016704:	431a      	orrs	r2, r3
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	695b      	ldr	r3, [r3, #20]
 801670a:	f003 0301 	and.w	r3, r3, #1
 801670e:	431a      	orrs	r2, r3
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	699b      	ldr	r3, [r3, #24]
 8016714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016718:	431a      	orrs	r2, r3
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	69db      	ldr	r3, [r3, #28]
 801671e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016722:	431a      	orrs	r2, r3
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6a1b      	ldr	r3, [r3, #32]
 8016728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801672c:	ea42 0103 	orr.w	r1, r2, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016734:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	430a      	orrs	r2, r1
 801673e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	699b      	ldr	r3, [r3, #24]
 8016744:	0c1b      	lsrs	r3, r3, #16
 8016746:	f003 0104 	and.w	r1, r3, #4
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801674e:	f003 0210 	and.w	r2, r3, #16
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	430a      	orrs	r2, r1
 8016758:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	69da      	ldr	r2, [r3, #28]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016768:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2200      	movs	r2, #0
 801676e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2201      	movs	r2, #1
 8016774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8016778:	2300      	movs	r3, #0
}
 801677a:	4618      	mov	r0, r3
 801677c:	3708      	adds	r7, #8
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}

08016782 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016782:	b580      	push	{r7, lr}
 8016784:	b088      	sub	sp, #32
 8016786:	af00      	add	r7, sp, #0
 8016788:	60f8      	str	r0, [r7, #12]
 801678a:	60b9      	str	r1, [r7, #8]
 801678c:	603b      	str	r3, [r7, #0]
 801678e:	4613      	mov	r3, r2
 8016790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016792:	2300      	movs	r3, #0
 8016794:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801679c:	2b01      	cmp	r3, #1
 801679e:	d101      	bne.n	80167a4 <HAL_SPI_Transmit+0x22>
 80167a0:	2302      	movs	r3, #2
 80167a2:	e12d      	b.n	8016a00 <HAL_SPI_Transmit+0x27e>
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2201      	movs	r2, #1
 80167a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80167ac:	f7fe ff0a 	bl	80155c4 <HAL_GetTick>
 80167b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80167b2:	88fb      	ldrh	r3, [r7, #6]
 80167b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80167bc:	b2db      	uxtb	r3, r3
 80167be:	2b01      	cmp	r3, #1
 80167c0:	d002      	beq.n	80167c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80167c2:	2302      	movs	r3, #2
 80167c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80167c6:	e116      	b.n	80169f6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d002      	beq.n	80167d4 <HAL_SPI_Transmit+0x52>
 80167ce:	88fb      	ldrh	r3, [r7, #6]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d102      	bne.n	80167da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80167d4:	2301      	movs	r3, #1
 80167d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80167d8:	e10d      	b.n	80169f6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	2203      	movs	r2, #3
 80167de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	2200      	movs	r2, #0
 80167e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	88fa      	ldrh	r2, [r7, #6]
 80167f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	88fa      	ldrh	r2, [r7, #6]
 80167f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2200      	movs	r2, #0
 80167fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2200      	movs	r2, #0
 8016804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2200      	movs	r2, #0
 801680a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	2200      	movs	r2, #0
 8016810:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	2200      	movs	r2, #0
 8016816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	689b      	ldr	r3, [r3, #8]
 801681c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016820:	d10f      	bne.n	8016842 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	681a      	ldr	r2, [r3, #0]
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	681a      	ldr	r2, [r3, #0]
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801684c:	2b40      	cmp	r3, #64	; 0x40
 801684e:	d007      	beq.n	8016860 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	681a      	ldr	r2, [r3, #0]
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801685e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	68db      	ldr	r3, [r3, #12]
 8016864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016868:	d14f      	bne.n	801690a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	685b      	ldr	r3, [r3, #4]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d002      	beq.n	8016878 <HAL_SPI_Transmit+0xf6>
 8016872:	8afb      	ldrh	r3, [r7, #22]
 8016874:	2b01      	cmp	r3, #1
 8016876:	d142      	bne.n	80168fe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801687c:	881a      	ldrh	r2, [r3, #0]
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016888:	1c9a      	adds	r2, r3, #2
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016892:	b29b      	uxth	r3, r3
 8016894:	3b01      	subs	r3, #1
 8016896:	b29a      	uxth	r2, r3
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801689c:	e02f      	b.n	80168fe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	689b      	ldr	r3, [r3, #8]
 80168a4:	f003 0302 	and.w	r3, r3, #2
 80168a8:	2b02      	cmp	r3, #2
 80168aa:	d112      	bne.n	80168d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168b0:	881a      	ldrh	r2, [r3, #0]
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168bc:	1c9a      	adds	r2, r3, #2
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	3b01      	subs	r3, #1
 80168ca:	b29a      	uxth	r2, r3
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80168d0:	e015      	b.n	80168fe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80168d2:	f7fe fe77 	bl	80155c4 <HAL_GetTick>
 80168d6:	4602      	mov	r2, r0
 80168d8:	69bb      	ldr	r3, [r7, #24]
 80168da:	1ad3      	subs	r3, r2, r3
 80168dc:	683a      	ldr	r2, [r7, #0]
 80168de:	429a      	cmp	r2, r3
 80168e0:	d803      	bhi.n	80168ea <HAL_SPI_Transmit+0x168>
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168e8:	d102      	bne.n	80168f0 <HAL_SPI_Transmit+0x16e>
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d106      	bne.n	80168fe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80168f0:	2303      	movs	r3, #3
 80168f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	2201      	movs	r2, #1
 80168f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80168fc:	e07b      	b.n	80169f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016902:	b29b      	uxth	r3, r3
 8016904:	2b00      	cmp	r3, #0
 8016906:	d1ca      	bne.n	801689e <HAL_SPI_Transmit+0x11c>
 8016908:	e050      	b.n	80169ac <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d002      	beq.n	8016918 <HAL_SPI_Transmit+0x196>
 8016912:	8afb      	ldrh	r3, [r7, #22]
 8016914:	2b01      	cmp	r3, #1
 8016916:	d144      	bne.n	80169a2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	330c      	adds	r3, #12
 8016922:	7812      	ldrb	r2, [r2, #0]
 8016924:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801692a:	1c5a      	adds	r2, r3, #1
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016934:	b29b      	uxth	r3, r3
 8016936:	3b01      	subs	r3, #1
 8016938:	b29a      	uxth	r2, r3
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801693e:	e030      	b.n	80169a2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	689b      	ldr	r3, [r3, #8]
 8016946:	f003 0302 	and.w	r3, r3, #2
 801694a:	2b02      	cmp	r3, #2
 801694c:	d113      	bne.n	8016976 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	330c      	adds	r3, #12
 8016958:	7812      	ldrb	r2, [r2, #0]
 801695a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016960:	1c5a      	adds	r2, r3, #1
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801696a:	b29b      	uxth	r3, r3
 801696c:	3b01      	subs	r3, #1
 801696e:	b29a      	uxth	r2, r3
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	86da      	strh	r2, [r3, #54]	; 0x36
 8016974:	e015      	b.n	80169a2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016976:	f7fe fe25 	bl	80155c4 <HAL_GetTick>
 801697a:	4602      	mov	r2, r0
 801697c:	69bb      	ldr	r3, [r7, #24]
 801697e:	1ad3      	subs	r3, r2, r3
 8016980:	683a      	ldr	r2, [r7, #0]
 8016982:	429a      	cmp	r2, r3
 8016984:	d803      	bhi.n	801698e <HAL_SPI_Transmit+0x20c>
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801698c:	d102      	bne.n	8016994 <HAL_SPI_Transmit+0x212>
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d106      	bne.n	80169a2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8016994:	2303      	movs	r3, #3
 8016996:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2201      	movs	r2, #1
 801699c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80169a0:	e029      	b.n	80169f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d1c9      	bne.n	8016940 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80169ac:	69ba      	ldr	r2, [r7, #24]
 80169ae:	6839      	ldr	r1, [r7, #0]
 80169b0:	68f8      	ldr	r0, [r7, #12]
 80169b2:	f000 fbdf 	bl	8017174 <SPI_EndRxTxTransaction>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d002      	beq.n	80169c2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2220      	movs	r2, #32
 80169c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	689b      	ldr	r3, [r3, #8]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d10a      	bne.n	80169e0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80169ca:	2300      	movs	r3, #0
 80169cc:	613b      	str	r3, [r7, #16]
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	68db      	ldr	r3, [r3, #12]
 80169d4:	613b      	str	r3, [r7, #16]
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	689b      	ldr	r3, [r3, #8]
 80169dc:	613b      	str	r3, [r7, #16]
 80169de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d002      	beq.n	80169ee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80169e8:	2301      	movs	r3, #1
 80169ea:	77fb      	strb	r3, [r7, #31]
 80169ec:	e003      	b.n	80169f6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2201      	movs	r2, #1
 80169f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	2200      	movs	r2, #0
 80169fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80169fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8016a00:	4618      	mov	r0, r3
 8016a02:	3720      	adds	r7, #32
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd80      	pop	{r7, pc}

08016a08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b088      	sub	sp, #32
 8016a0c:	af02      	add	r7, sp, #8
 8016a0e:	60f8      	str	r0, [r7, #12]
 8016a10:	60b9      	str	r1, [r7, #8]
 8016a12:	603b      	str	r3, [r7, #0]
 8016a14:	4613      	mov	r3, r2
 8016a16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016a22:	b2db      	uxtb	r3, r3
 8016a24:	2b01      	cmp	r3, #1
 8016a26:	d002      	beq.n	8016a2e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016a28:	2302      	movs	r3, #2
 8016a2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016a2c:	e0fb      	b.n	8016c26 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	685b      	ldr	r3, [r3, #4]
 8016a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016a36:	d112      	bne.n	8016a5e <HAL_SPI_Receive+0x56>
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	689b      	ldr	r3, [r3, #8]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d10e      	bne.n	8016a5e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	2204      	movs	r2, #4
 8016a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016a48:	88fa      	ldrh	r2, [r7, #6]
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	9300      	str	r3, [sp, #0]
 8016a4e:	4613      	mov	r3, r2
 8016a50:	68ba      	ldr	r2, [r7, #8]
 8016a52:	68b9      	ldr	r1, [r7, #8]
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	f000 f8ef 	bl	8016c38 <HAL_SPI_TransmitReceive>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	e0e8      	b.n	8016c30 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016a64:	2b01      	cmp	r3, #1
 8016a66:	d101      	bne.n	8016a6c <HAL_SPI_Receive+0x64>
 8016a68:	2302      	movs	r3, #2
 8016a6a:	e0e1      	b.n	8016c30 <HAL_SPI_Receive+0x228>
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2201      	movs	r2, #1
 8016a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016a74:	f7fe fda6 	bl	80155c4 <HAL_GetTick>
 8016a78:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8016a7a:	68bb      	ldr	r3, [r7, #8]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d002      	beq.n	8016a86 <HAL_SPI_Receive+0x7e>
 8016a80:	88fb      	ldrh	r3, [r7, #6]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d102      	bne.n	8016a8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016a86:	2301      	movs	r3, #1
 8016a88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016a8a:	e0cc      	b.n	8016c26 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2204      	movs	r2, #4
 8016a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2200      	movs	r2, #0
 8016a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	68ba      	ldr	r2, [r7, #8]
 8016a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	88fa      	ldrh	r2, [r7, #6]
 8016aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	88fa      	ldrh	r2, [r7, #6]
 8016aaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	2200      	movs	r2, #0
 8016ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	2200      	movs	r2, #0
 8016abc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	689b      	ldr	r3, [r3, #8]
 8016ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016ad2:	d10f      	bne.n	8016af4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	681a      	ldr	r2, [r3, #0]
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	681a      	ldr	r2, [r3, #0]
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016af2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016afe:	2b40      	cmp	r3, #64	; 0x40
 8016b00:	d007      	beq.n	8016b12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	681a      	ldr	r2, [r3, #0]
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016b10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	68db      	ldr	r3, [r3, #12]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d16a      	bne.n	8016bf0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016b1a:	e032      	b.n	8016b82 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	689b      	ldr	r3, [r3, #8]
 8016b22:	f003 0301 	and.w	r3, r3, #1
 8016b26:	2b01      	cmp	r3, #1
 8016b28:	d115      	bne.n	8016b56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	f103 020c 	add.w	r2, r3, #12
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b36:	7812      	ldrb	r2, [r2, #0]
 8016b38:	b2d2      	uxtb	r2, r2
 8016b3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b40:	1c5a      	adds	r2, r3, #1
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	3b01      	subs	r3, #1
 8016b4e:	b29a      	uxth	r2, r3
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016b54:	e015      	b.n	8016b82 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016b56:	f7fe fd35 	bl	80155c4 <HAL_GetTick>
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	1ad3      	subs	r3, r2, r3
 8016b60:	683a      	ldr	r2, [r7, #0]
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d803      	bhi.n	8016b6e <HAL_SPI_Receive+0x166>
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b6c:	d102      	bne.n	8016b74 <HAL_SPI_Receive+0x16c>
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d106      	bne.n	8016b82 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016b74:	2303      	movs	r3, #3
 8016b76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	2201      	movs	r2, #1
 8016b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016b80:	e051      	b.n	8016c26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d1c7      	bne.n	8016b1c <HAL_SPI_Receive+0x114>
 8016b8c:	e035      	b.n	8016bfa <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	689b      	ldr	r3, [r3, #8]
 8016b94:	f003 0301 	and.w	r3, r3, #1
 8016b98:	2b01      	cmp	r3, #1
 8016b9a:	d113      	bne.n	8016bc4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	68da      	ldr	r2, [r3, #12]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ba6:	b292      	uxth	r2, r2
 8016ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bae:	1c9a      	adds	r2, r3, #2
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	3b01      	subs	r3, #1
 8016bbc:	b29a      	uxth	r2, r3
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016bc2:	e015      	b.n	8016bf0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016bc4:	f7fe fcfe 	bl	80155c4 <HAL_GetTick>
 8016bc8:	4602      	mov	r2, r0
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	1ad3      	subs	r3, r2, r3
 8016bce:	683a      	ldr	r2, [r7, #0]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d803      	bhi.n	8016bdc <HAL_SPI_Receive+0x1d4>
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bda:	d102      	bne.n	8016be2 <HAL_SPI_Receive+0x1da>
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d106      	bne.n	8016bf0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8016be2:	2303      	movs	r3, #3
 8016be4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	2201      	movs	r2, #1
 8016bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016bee:	e01a      	b.n	8016c26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d1c9      	bne.n	8016b8e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016bfa:	693a      	ldr	r2, [r7, #16]
 8016bfc:	6839      	ldr	r1, [r7, #0]
 8016bfe:	68f8      	ldr	r0, [r7, #12]
 8016c00:	f000 fa52 	bl	80170a8 <SPI_EndRxTransaction>
 8016c04:	4603      	mov	r3, r0
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d002      	beq.n	8016c10 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	2220      	movs	r2, #32
 8016c0e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d002      	beq.n	8016c1e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	75fb      	strb	r3, [r7, #23]
 8016c1c:	e003      	b.n	8016c26 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	2201      	movs	r2, #1
 8016c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c30:	4618      	mov	r0, r3
 8016c32:	3718      	adds	r7, #24
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bd80      	pop	{r7, pc}

08016c38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b08c      	sub	sp, #48	; 0x30
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	60f8      	str	r0, [r7, #12]
 8016c40:	60b9      	str	r1, [r7, #8]
 8016c42:	607a      	str	r2, [r7, #4]
 8016c44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016c46:	2301      	movs	r3, #1
 8016c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016c56:	2b01      	cmp	r3, #1
 8016c58:	d101      	bne.n	8016c5e <HAL_SPI_TransmitReceive+0x26>
 8016c5a:	2302      	movs	r3, #2
 8016c5c:	e198      	b.n	8016f90 <HAL_SPI_TransmitReceive+0x358>
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	2201      	movs	r2, #1
 8016c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016c66:	f7fe fcad 	bl	80155c4 <HAL_GetTick>
 8016c6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016c7c:	887b      	ldrh	r3, [r7, #2]
 8016c7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c84:	2b01      	cmp	r3, #1
 8016c86:	d00f      	beq.n	8016ca8 <HAL_SPI_TransmitReceive+0x70>
 8016c88:	69fb      	ldr	r3, [r7, #28]
 8016c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016c8e:	d107      	bne.n	8016ca0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	689b      	ldr	r3, [r3, #8]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d103      	bne.n	8016ca0 <HAL_SPI_TransmitReceive+0x68>
 8016c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c9c:	2b04      	cmp	r3, #4
 8016c9e:	d003      	beq.n	8016ca8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016ca0:	2302      	movs	r3, #2
 8016ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016ca6:	e16d      	b.n	8016f84 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016ca8:	68bb      	ldr	r3, [r7, #8]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d005      	beq.n	8016cba <HAL_SPI_TransmitReceive+0x82>
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d002      	beq.n	8016cba <HAL_SPI_TransmitReceive+0x82>
 8016cb4:	887b      	ldrh	r3, [r7, #2]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d103      	bne.n	8016cc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016cba:	2301      	movs	r3, #1
 8016cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016cc0:	e160      	b.n	8016f84 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	2b04      	cmp	r3, #4
 8016ccc:	d003      	beq.n	8016cd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	2205      	movs	r2, #5
 8016cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	687a      	ldr	r2, [r7, #4]
 8016ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	887a      	ldrh	r2, [r7, #2]
 8016ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	887a      	ldrh	r2, [r7, #2]
 8016cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	68ba      	ldr	r2, [r7, #8]
 8016cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	887a      	ldrh	r2, [r7, #2]
 8016cf8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	887a      	ldrh	r2, [r7, #2]
 8016cfe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2200      	movs	r2, #0
 8016d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	2200      	movs	r2, #0
 8016d0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d16:	2b40      	cmp	r3, #64	; 0x40
 8016d18:	d007      	beq.n	8016d2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	681a      	ldr	r2, [r3, #0]
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016d28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016d32:	d17c      	bne.n	8016e2e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	685b      	ldr	r3, [r3, #4]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d002      	beq.n	8016d42 <HAL_SPI_TransmitReceive+0x10a>
 8016d3c:	8b7b      	ldrh	r3, [r7, #26]
 8016d3e:	2b01      	cmp	r3, #1
 8016d40:	d16a      	bne.n	8016e18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d46:	881a      	ldrh	r2, [r3, #0]
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d52:	1c9a      	adds	r2, r3, #2
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d5c:	b29b      	uxth	r3, r3
 8016d5e:	3b01      	subs	r3, #1
 8016d60:	b29a      	uxth	r2, r3
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016d66:	e057      	b.n	8016e18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	689b      	ldr	r3, [r3, #8]
 8016d6e:	f003 0302 	and.w	r3, r3, #2
 8016d72:	2b02      	cmp	r3, #2
 8016d74:	d11b      	bne.n	8016dae <HAL_SPI_TransmitReceive+0x176>
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d7a:	b29b      	uxth	r3, r3
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d016      	beq.n	8016dae <HAL_SPI_TransmitReceive+0x176>
 8016d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d113      	bne.n	8016dae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d8a:	881a      	ldrh	r2, [r3, #0]
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d96:	1c9a      	adds	r2, r3, #2
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016da0:	b29b      	uxth	r3, r3
 8016da2:	3b01      	subs	r3, #1
 8016da4:	b29a      	uxth	r2, r3
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016daa:	2300      	movs	r3, #0
 8016dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	689b      	ldr	r3, [r3, #8]
 8016db4:	f003 0301 	and.w	r3, r3, #1
 8016db8:	2b01      	cmp	r3, #1
 8016dba:	d119      	bne.n	8016df0 <HAL_SPI_TransmitReceive+0x1b8>
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016dc0:	b29b      	uxth	r3, r3
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d014      	beq.n	8016df0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	68da      	ldr	r2, [r3, #12]
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dd0:	b292      	uxth	r2, r2
 8016dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dd8:	1c9a      	adds	r2, r3, #2
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	3b01      	subs	r3, #1
 8016de6:	b29a      	uxth	r2, r3
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016dec:	2301      	movs	r3, #1
 8016dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016df0:	f7fe fbe8 	bl	80155c4 <HAL_GetTick>
 8016df4:	4602      	mov	r2, r0
 8016df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df8:	1ad3      	subs	r3, r2, r3
 8016dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016dfc:	429a      	cmp	r2, r3
 8016dfe:	d80b      	bhi.n	8016e18 <HAL_SPI_TransmitReceive+0x1e0>
 8016e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e06:	d007      	beq.n	8016e18 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8016e08:	2303      	movs	r3, #3
 8016e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	2201      	movs	r2, #1
 8016e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016e16:	e0b5      	b.n	8016f84 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d1a2      	bne.n	8016d68 <HAL_SPI_TransmitReceive+0x130>
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e26:	b29b      	uxth	r3, r3
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d19d      	bne.n	8016d68 <HAL_SPI_TransmitReceive+0x130>
 8016e2c:	e080      	b.n	8016f30 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	685b      	ldr	r3, [r3, #4]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d002      	beq.n	8016e3c <HAL_SPI_TransmitReceive+0x204>
 8016e36:	8b7b      	ldrh	r3, [r7, #26]
 8016e38:	2b01      	cmp	r3, #1
 8016e3a:	d16f      	bne.n	8016f1c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	330c      	adds	r3, #12
 8016e46:	7812      	ldrb	r2, [r2, #0]
 8016e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e4e:	1c5a      	adds	r2, r3, #1
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016e58:	b29b      	uxth	r3, r3
 8016e5a:	3b01      	subs	r3, #1
 8016e5c:	b29a      	uxth	r2, r3
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016e62:	e05b      	b.n	8016f1c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	689b      	ldr	r3, [r3, #8]
 8016e6a:	f003 0302 	and.w	r3, r3, #2
 8016e6e:	2b02      	cmp	r3, #2
 8016e70:	d11c      	bne.n	8016eac <HAL_SPI_TransmitReceive+0x274>
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016e76:	b29b      	uxth	r3, r3
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d017      	beq.n	8016eac <HAL_SPI_TransmitReceive+0x274>
 8016e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7e:	2b01      	cmp	r3, #1
 8016e80:	d114      	bne.n	8016eac <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	330c      	adds	r3, #12
 8016e8c:	7812      	ldrb	r2, [r2, #0]
 8016e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e94:	1c5a      	adds	r2, r3, #1
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016e9e:	b29b      	uxth	r3, r3
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	b29a      	uxth	r2, r3
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	689b      	ldr	r3, [r3, #8]
 8016eb2:	f003 0301 	and.w	r3, r3, #1
 8016eb6:	2b01      	cmp	r3, #1
 8016eb8:	d119      	bne.n	8016eee <HAL_SPI_TransmitReceive+0x2b6>
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d014      	beq.n	8016eee <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	68da      	ldr	r2, [r3, #12]
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ece:	b2d2      	uxtb	r2, r2
 8016ed0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ed6:	1c5a      	adds	r2, r3, #1
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	3b01      	subs	r3, #1
 8016ee4:	b29a      	uxth	r2, r3
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016eea:	2301      	movs	r3, #1
 8016eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8016eee:	f7fe fb69 	bl	80155c4 <HAL_GetTick>
 8016ef2:	4602      	mov	r2, r0
 8016ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef6:	1ad3      	subs	r3, r2, r3
 8016ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016efa:	429a      	cmp	r2, r3
 8016efc:	d803      	bhi.n	8016f06 <HAL_SPI_TransmitReceive+0x2ce>
 8016efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f04:	d102      	bne.n	8016f0c <HAL_SPI_TransmitReceive+0x2d4>
 8016f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d107      	bne.n	8016f1c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8016f0c:	2303      	movs	r3, #3
 8016f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	2201      	movs	r2, #1
 8016f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016f1a:	e033      	b.n	8016f84 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016f20:	b29b      	uxth	r3, r3
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d19e      	bne.n	8016e64 <HAL_SPI_TransmitReceive+0x22c>
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016f2a:	b29b      	uxth	r3, r3
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d199      	bne.n	8016e64 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016f34:	68f8      	ldr	r0, [r7, #12]
 8016f36:	f000 f91d 	bl	8017174 <SPI_EndRxTxTransaction>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d006      	beq.n	8016f4e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8016f40:	2301      	movs	r3, #1
 8016f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	2220      	movs	r2, #32
 8016f4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8016f4c:	e01a      	b.n	8016f84 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	689b      	ldr	r3, [r3, #8]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d10a      	bne.n	8016f6c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016f56:	2300      	movs	r3, #0
 8016f58:	617b      	str	r3, [r7, #20]
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	68db      	ldr	r3, [r3, #12]
 8016f60:	617b      	str	r3, [r7, #20]
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	689b      	ldr	r3, [r3, #8]
 8016f68:	617b      	str	r3, [r7, #20]
 8016f6a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d003      	beq.n	8016f7c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8016f74:	2301      	movs	r3, #1
 8016f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016f7a:	e003      	b.n	8016f84 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	2201      	movs	r2, #1
 8016f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	2200      	movs	r2, #0
 8016f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016f8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3730      	adds	r7, #48	; 0x30
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b088      	sub	sp, #32
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	603b      	str	r3, [r7, #0]
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8016fa8:	f7fe fb0c 	bl	80155c4 <HAL_GetTick>
 8016fac:	4602      	mov	r2, r0
 8016fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb0:	1a9b      	subs	r3, r3, r2
 8016fb2:	683a      	ldr	r2, [r7, #0]
 8016fb4:	4413      	add	r3, r2
 8016fb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8016fb8:	f7fe fb04 	bl	80155c4 <HAL_GetTick>
 8016fbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8016fbe:	4b39      	ldr	r3, [pc, #228]	; (80170a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	015b      	lsls	r3, r3, #5
 8016fc4:	0d1b      	lsrs	r3, r3, #20
 8016fc6:	69fa      	ldr	r2, [r7, #28]
 8016fc8:	fb02 f303 	mul.w	r3, r2, r3
 8016fcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016fce:	e054      	b.n	801707a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fd6:	d050      	beq.n	801707a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016fd8:	f7fe faf4 	bl	80155c4 <HAL_GetTick>
 8016fdc:	4602      	mov	r2, r0
 8016fde:	69bb      	ldr	r3, [r7, #24]
 8016fe0:	1ad3      	subs	r3, r2, r3
 8016fe2:	69fa      	ldr	r2, [r7, #28]
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	d902      	bls.n	8016fee <SPI_WaitFlagStateUntilTimeout+0x56>
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d13d      	bne.n	801706a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	685a      	ldr	r2, [r3, #4]
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016ffc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017006:	d111      	bne.n	801702c <SPI_WaitFlagStateUntilTimeout+0x94>
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	689b      	ldr	r3, [r3, #8]
 801700c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017010:	d004      	beq.n	801701c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	689b      	ldr	r3, [r3, #8]
 8017016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801701a:	d107      	bne.n	801702c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	681a      	ldr	r2, [r3, #0]
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801702a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017034:	d10f      	bne.n	8017056 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	681a      	ldr	r2, [r3, #0]
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017044:	601a      	str	r2, [r3, #0]
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	681a      	ldr	r2, [r3, #0]
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8017054:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	2201      	movs	r2, #1
 801705a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	2200      	movs	r2, #0
 8017062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8017066:	2303      	movs	r3, #3
 8017068:	e017      	b.n	801709a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d101      	bne.n	8017074 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8017070:	2300      	movs	r3, #0
 8017072:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	3b01      	subs	r3, #1
 8017078:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	689a      	ldr	r2, [r3, #8]
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	4013      	ands	r3, r2
 8017084:	68ba      	ldr	r2, [r7, #8]
 8017086:	429a      	cmp	r2, r3
 8017088:	bf0c      	ite	eq
 801708a:	2301      	moveq	r3, #1
 801708c:	2300      	movne	r3, #0
 801708e:	b2db      	uxtb	r3, r3
 8017090:	461a      	mov	r2, r3
 8017092:	79fb      	ldrb	r3, [r7, #7]
 8017094:	429a      	cmp	r2, r3
 8017096:	d19b      	bne.n	8016fd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8017098:	2300      	movs	r3, #0
}
 801709a:	4618      	mov	r0, r3
 801709c:	3720      	adds	r7, #32
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	20000000 	.word	0x20000000

080170a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b086      	sub	sp, #24
 80170ac:	af02      	add	r7, sp, #8
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	685b      	ldr	r3, [r3, #4]
 80170b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80170bc:	d111      	bne.n	80170e2 <SPI_EndRxTransaction+0x3a>
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	689b      	ldr	r3, [r3, #8]
 80170c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80170c6:	d004      	beq.n	80170d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	689b      	ldr	r3, [r3, #8]
 80170cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80170d0:	d107      	bne.n	80170e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	681a      	ldr	r2, [r3, #0]
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80170e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	685b      	ldr	r3, [r3, #4]
 80170e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80170ea:	d12a      	bne.n	8017142 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	689b      	ldr	r3, [r3, #8]
 80170f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80170f4:	d012      	beq.n	801711c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	2200      	movs	r2, #0
 80170fe:	2180      	movs	r1, #128	; 0x80
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f7ff ff49 	bl	8016f98 <SPI_WaitFlagStateUntilTimeout>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d02d      	beq.n	8017168 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017110:	f043 0220 	orr.w	r2, r3, #32
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8017118:	2303      	movs	r3, #3
 801711a:	e026      	b.n	801716a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	9300      	str	r3, [sp, #0]
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	2200      	movs	r2, #0
 8017124:	2101      	movs	r1, #1
 8017126:	68f8      	ldr	r0, [r7, #12]
 8017128:	f7ff ff36 	bl	8016f98 <SPI_WaitFlagStateUntilTimeout>
 801712c:	4603      	mov	r3, r0
 801712e:	2b00      	cmp	r3, #0
 8017130:	d01a      	beq.n	8017168 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017136:	f043 0220 	orr.w	r2, r3, #32
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801713e:	2303      	movs	r3, #3
 8017140:	e013      	b.n	801716a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	9300      	str	r3, [sp, #0]
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	2200      	movs	r2, #0
 801714a:	2101      	movs	r1, #1
 801714c:	68f8      	ldr	r0, [r7, #12]
 801714e:	f7ff ff23 	bl	8016f98 <SPI_WaitFlagStateUntilTimeout>
 8017152:	4603      	mov	r3, r0
 8017154:	2b00      	cmp	r3, #0
 8017156:	d007      	beq.n	8017168 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801715c:	f043 0220 	orr.w	r2, r3, #32
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017164:	2303      	movs	r3, #3
 8017166:	e000      	b.n	801716a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8017168:	2300      	movs	r3, #0
}
 801716a:	4618      	mov	r0, r3
 801716c:	3710      	adds	r7, #16
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}
	...

08017174 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b088      	sub	sp, #32
 8017178:	af02      	add	r7, sp, #8
 801717a:	60f8      	str	r0, [r7, #12]
 801717c:	60b9      	str	r1, [r7, #8]
 801717e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	9300      	str	r3, [sp, #0]
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	2201      	movs	r2, #1
 8017188:	2102      	movs	r1, #2
 801718a:	68f8      	ldr	r0, [r7, #12]
 801718c:	f7ff ff04 	bl	8016f98 <SPI_WaitFlagStateUntilTimeout>
 8017190:	4603      	mov	r3, r0
 8017192:	2b00      	cmp	r3, #0
 8017194:	d007      	beq.n	80171a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801719a:	f043 0220 	orr.w	r2, r3, #32
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80171a2:	2303      	movs	r3, #3
 80171a4:	e032      	b.n	801720c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80171a6:	4b1b      	ldr	r3, [pc, #108]	; (8017214 <SPI_EndRxTxTransaction+0xa0>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	4a1b      	ldr	r2, [pc, #108]	; (8017218 <SPI_EndRxTxTransaction+0xa4>)
 80171ac:	fba2 2303 	umull	r2, r3, r2, r3
 80171b0:	0d5b      	lsrs	r3, r3, #21
 80171b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80171b6:	fb02 f303 	mul.w	r3, r2, r3
 80171ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80171c4:	d112      	bne.n	80171ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	9300      	str	r3, [sp, #0]
 80171ca:	68bb      	ldr	r3, [r7, #8]
 80171cc:	2200      	movs	r2, #0
 80171ce:	2180      	movs	r1, #128	; 0x80
 80171d0:	68f8      	ldr	r0, [r7, #12]
 80171d2:	f7ff fee1 	bl	8016f98 <SPI_WaitFlagStateUntilTimeout>
 80171d6:	4603      	mov	r3, r0
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d016      	beq.n	801720a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171e0:	f043 0220 	orr.w	r2, r3, #32
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80171e8:	2303      	movs	r3, #3
 80171ea:	e00f      	b.n	801720c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80171ec:	697b      	ldr	r3, [r7, #20]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d00a      	beq.n	8017208 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80171f2:	697b      	ldr	r3, [r7, #20]
 80171f4:	3b01      	subs	r3, #1
 80171f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	689b      	ldr	r3, [r3, #8]
 80171fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017202:	2b80      	cmp	r3, #128	; 0x80
 8017204:	d0f2      	beq.n	80171ec <SPI_EndRxTxTransaction+0x78>
 8017206:	e000      	b.n	801720a <SPI_EndRxTxTransaction+0x96>
        break;
 8017208:	bf00      	nop
  }

  return HAL_OK;
 801720a:	2300      	movs	r3, #0
}
 801720c:	4618      	mov	r0, r3
 801720e:	3718      	adds	r7, #24
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}
 8017214:	20000000 	.word	0x20000000
 8017218:	165e9f81 	.word	0x165e9f81

0801721c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d101      	bne.n	801722e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801722a:	2301      	movs	r3, #1
 801722c:	e041      	b.n	80172b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017234:	b2db      	uxtb	r3, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	d106      	bne.n	8017248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2200      	movs	r2, #0
 801723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	f000 f839 	bl	80172ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2202      	movs	r2, #2
 801724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681a      	ldr	r2, [r3, #0]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	3304      	adds	r3, #4
 8017258:	4619      	mov	r1, r3
 801725a:	4610      	mov	r0, r2
 801725c:	f000 f9b2 	bl	80175c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2201      	movs	r2, #1
 8017264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2201      	movs	r2, #1
 801726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2201      	movs	r2, #1
 8017274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2201      	movs	r2, #1
 801727c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2201      	movs	r2, #1
 8017284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2201      	movs	r2, #1
 801728c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2201      	movs	r2, #1
 8017294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2201      	movs	r2, #1
 801729c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	2201      	movs	r2, #1
 80172a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2201      	movs	r2, #1
 80172ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80172b0:	2300      	movs	r3, #0
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	3708      	adds	r7, #8
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}

080172ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80172ba:	b480      	push	{r7}
 80172bc:	b083      	sub	sp, #12
 80172be:	af00      	add	r7, sp, #0
 80172c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80172c2:	bf00      	nop
 80172c4:	370c      	adds	r7, #12
 80172c6:	46bd      	mov	sp, r7
 80172c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172cc:	4770      	bx	lr
	...

080172d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80172d0:	b480      	push	{r7}
 80172d2:	b085      	sub	sp, #20
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80172de:	b2db      	uxtb	r3, r3
 80172e0:	2b01      	cmp	r3, #1
 80172e2:	d001      	beq.n	80172e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80172e4:	2301      	movs	r3, #1
 80172e6:	e044      	b.n	8017372 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2202      	movs	r2, #2
 80172ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	68da      	ldr	r2, [r3, #12]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	f042 0201 	orr.w	r2, r2, #1
 80172fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	4a1e      	ldr	r2, [pc, #120]	; (8017380 <HAL_TIM_Base_Start_IT+0xb0>)
 8017306:	4293      	cmp	r3, r2
 8017308:	d018      	beq.n	801733c <HAL_TIM_Base_Start_IT+0x6c>
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017312:	d013      	beq.n	801733c <HAL_TIM_Base_Start_IT+0x6c>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	4a1a      	ldr	r2, [pc, #104]	; (8017384 <HAL_TIM_Base_Start_IT+0xb4>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d00e      	beq.n	801733c <HAL_TIM_Base_Start_IT+0x6c>
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	4a19      	ldr	r2, [pc, #100]	; (8017388 <HAL_TIM_Base_Start_IT+0xb8>)
 8017324:	4293      	cmp	r3, r2
 8017326:	d009      	beq.n	801733c <HAL_TIM_Base_Start_IT+0x6c>
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	4a17      	ldr	r2, [pc, #92]	; (801738c <HAL_TIM_Base_Start_IT+0xbc>)
 801732e:	4293      	cmp	r3, r2
 8017330:	d004      	beq.n	801733c <HAL_TIM_Base_Start_IT+0x6c>
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	4a16      	ldr	r2, [pc, #88]	; (8017390 <HAL_TIM_Base_Start_IT+0xc0>)
 8017338:	4293      	cmp	r3, r2
 801733a:	d111      	bne.n	8017360 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	689b      	ldr	r3, [r3, #8]
 8017342:	f003 0307 	and.w	r3, r3, #7
 8017346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	2b06      	cmp	r3, #6
 801734c:	d010      	beq.n	8017370 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	681a      	ldr	r2, [r3, #0]
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	f042 0201 	orr.w	r2, r2, #1
 801735c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801735e:	e007      	b.n	8017370 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	681a      	ldr	r2, [r3, #0]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	f042 0201 	orr.w	r2, r2, #1
 801736e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017370:	2300      	movs	r3, #0
}
 8017372:	4618      	mov	r0, r3
 8017374:	3714      	adds	r7, #20
 8017376:	46bd      	mov	sp, r7
 8017378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737c:	4770      	bx	lr
 801737e:	bf00      	nop
 8017380:	40010000 	.word	0x40010000
 8017384:	40000400 	.word	0x40000400
 8017388:	40000800 	.word	0x40000800
 801738c:	40000c00 	.word	0x40000c00
 8017390:	40014000 	.word	0x40014000

08017394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	68db      	ldr	r3, [r3, #12]
 80173a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	691b      	ldr	r3, [r3, #16]
 80173aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	f003 0302 	and.w	r3, r3, #2
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d020      	beq.n	80173f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	f003 0302 	and.w	r3, r3, #2
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d01b      	beq.n	80173f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	f06f 0202 	mvn.w	r2, #2
 80173c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	2201      	movs	r2, #1
 80173ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	699b      	ldr	r3, [r3, #24]
 80173d6:	f003 0303 	and.w	r3, r3, #3
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d003      	beq.n	80173e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	f000 f8d2 	bl	8017588 <HAL_TIM_IC_CaptureCallback>
 80173e4:	e005      	b.n	80173f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f000 f8c4 	bl	8017574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f000 f8d5 	bl	801759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	2200      	movs	r2, #0
 80173f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	f003 0304 	and.w	r3, r3, #4
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d020      	beq.n	8017444 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	f003 0304 	and.w	r3, r3, #4
 8017408:	2b00      	cmp	r3, #0
 801740a:	d01b      	beq.n	8017444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	f06f 0204 	mvn.w	r2, #4
 8017414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2202      	movs	r2, #2
 801741a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	699b      	ldr	r3, [r3, #24]
 8017422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017426:	2b00      	cmp	r3, #0
 8017428:	d003      	beq.n	8017432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f000 f8ac 	bl	8017588 <HAL_TIM_IC_CaptureCallback>
 8017430:	e005      	b.n	801743e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017432:	6878      	ldr	r0, [r7, #4]
 8017434:	f000 f89e 	bl	8017574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f000 f8af 	bl	801759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	2200      	movs	r2, #0
 8017442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017444:	68bb      	ldr	r3, [r7, #8]
 8017446:	f003 0308 	and.w	r3, r3, #8
 801744a:	2b00      	cmp	r3, #0
 801744c:	d020      	beq.n	8017490 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	f003 0308 	and.w	r3, r3, #8
 8017454:	2b00      	cmp	r3, #0
 8017456:	d01b      	beq.n	8017490 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f06f 0208 	mvn.w	r2, #8
 8017460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2204      	movs	r2, #4
 8017466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	69db      	ldr	r3, [r3, #28]
 801746e:	f003 0303 	and.w	r3, r3, #3
 8017472:	2b00      	cmp	r3, #0
 8017474:	d003      	beq.n	801747e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f000 f886 	bl	8017588 <HAL_TIM_IC_CaptureCallback>
 801747c:	e005      	b.n	801748a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f000 f878 	bl	8017574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f000 f889 	bl	801759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	2200      	movs	r2, #0
 801748e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	f003 0310 	and.w	r3, r3, #16
 8017496:	2b00      	cmp	r3, #0
 8017498:	d020      	beq.n	80174dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	f003 0310 	and.w	r3, r3, #16
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d01b      	beq.n	80174dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	f06f 0210 	mvn.w	r2, #16
 80174ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2208      	movs	r2, #8
 80174b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	69db      	ldr	r3, [r3, #28]
 80174ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d003      	beq.n	80174ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80174c2:	6878      	ldr	r0, [r7, #4]
 80174c4:	f000 f860 	bl	8017588 <HAL_TIM_IC_CaptureCallback>
 80174c8:	e005      	b.n	80174d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f000 f852 	bl	8017574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f000 f863 	bl	801759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2200      	movs	r2, #0
 80174da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	f003 0301 	and.w	r3, r3, #1
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d00c      	beq.n	8017500 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f003 0301 	and.w	r3, r3, #1
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d007      	beq.n	8017500 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	f06f 0201 	mvn.w	r2, #1
 80174f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f7fb f976 	bl	80127ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017506:	2b00      	cmp	r3, #0
 8017508:	d00c      	beq.n	8017524 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017510:	2b00      	cmp	r3, #0
 8017512:	d007      	beq.n	8017524 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f000 f8e6 	bl	80176f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801752a:	2b00      	cmp	r3, #0
 801752c:	d00c      	beq.n	8017548 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017534:	2b00      	cmp	r3, #0
 8017536:	d007      	beq.n	8017548 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017542:	6878      	ldr	r0, [r7, #4]
 8017544:	f000 f834 	bl	80175b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	f003 0320 	and.w	r3, r3, #32
 801754e:	2b00      	cmp	r3, #0
 8017550:	d00c      	beq.n	801756c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	f003 0320 	and.w	r3, r3, #32
 8017558:	2b00      	cmp	r3, #0
 801755a:	d007      	beq.n	801756c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	f06f 0220 	mvn.w	r2, #32
 8017564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f000 f8b8 	bl	80176dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801756c:	bf00      	nop
 801756e:	3710      	adds	r7, #16
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}

08017574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017574:	b480      	push	{r7}
 8017576:	b083      	sub	sp, #12
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801757c:	bf00      	nop
 801757e:	370c      	adds	r7, #12
 8017580:	46bd      	mov	sp, r7
 8017582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017586:	4770      	bx	lr

08017588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017588:	b480      	push	{r7}
 801758a:	b083      	sub	sp, #12
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017590:	bf00      	nop
 8017592:	370c      	adds	r7, #12
 8017594:	46bd      	mov	sp, r7
 8017596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759a:	4770      	bx	lr

0801759c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801759c:	b480      	push	{r7}
 801759e:	b083      	sub	sp, #12
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80175a4:	bf00      	nop
 80175a6:	370c      	adds	r7, #12
 80175a8:	46bd      	mov	sp, r7
 80175aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ae:	4770      	bx	lr

080175b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80175b0:	b480      	push	{r7}
 80175b2:	b083      	sub	sp, #12
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80175b8:	bf00      	nop
 80175ba:	370c      	adds	r7, #12
 80175bc:	46bd      	mov	sp, r7
 80175be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c2:	4770      	bx	lr

080175c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80175c4:	b480      	push	{r7}
 80175c6:	b085      	sub	sp, #20
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
 80175cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	4a3a      	ldr	r2, [pc, #232]	; (80176c0 <TIM_Base_SetConfig+0xfc>)
 80175d8:	4293      	cmp	r3, r2
 80175da:	d00f      	beq.n	80175fc <TIM_Base_SetConfig+0x38>
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80175e2:	d00b      	beq.n	80175fc <TIM_Base_SetConfig+0x38>
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	4a37      	ldr	r2, [pc, #220]	; (80176c4 <TIM_Base_SetConfig+0x100>)
 80175e8:	4293      	cmp	r3, r2
 80175ea:	d007      	beq.n	80175fc <TIM_Base_SetConfig+0x38>
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	4a36      	ldr	r2, [pc, #216]	; (80176c8 <TIM_Base_SetConfig+0x104>)
 80175f0:	4293      	cmp	r3, r2
 80175f2:	d003      	beq.n	80175fc <TIM_Base_SetConfig+0x38>
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	4a35      	ldr	r2, [pc, #212]	; (80176cc <TIM_Base_SetConfig+0x108>)
 80175f8:	4293      	cmp	r3, r2
 80175fa:	d108      	bne.n	801760e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	68fa      	ldr	r2, [r7, #12]
 801760a:	4313      	orrs	r3, r2
 801760c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	4a2b      	ldr	r2, [pc, #172]	; (80176c0 <TIM_Base_SetConfig+0xfc>)
 8017612:	4293      	cmp	r3, r2
 8017614:	d01b      	beq.n	801764e <TIM_Base_SetConfig+0x8a>
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801761c:	d017      	beq.n	801764e <TIM_Base_SetConfig+0x8a>
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	4a28      	ldr	r2, [pc, #160]	; (80176c4 <TIM_Base_SetConfig+0x100>)
 8017622:	4293      	cmp	r3, r2
 8017624:	d013      	beq.n	801764e <TIM_Base_SetConfig+0x8a>
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	4a27      	ldr	r2, [pc, #156]	; (80176c8 <TIM_Base_SetConfig+0x104>)
 801762a:	4293      	cmp	r3, r2
 801762c:	d00f      	beq.n	801764e <TIM_Base_SetConfig+0x8a>
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	4a26      	ldr	r2, [pc, #152]	; (80176cc <TIM_Base_SetConfig+0x108>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d00b      	beq.n	801764e <TIM_Base_SetConfig+0x8a>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	4a25      	ldr	r2, [pc, #148]	; (80176d0 <TIM_Base_SetConfig+0x10c>)
 801763a:	4293      	cmp	r3, r2
 801763c:	d007      	beq.n	801764e <TIM_Base_SetConfig+0x8a>
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	4a24      	ldr	r2, [pc, #144]	; (80176d4 <TIM_Base_SetConfig+0x110>)
 8017642:	4293      	cmp	r3, r2
 8017644:	d003      	beq.n	801764e <TIM_Base_SetConfig+0x8a>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	4a23      	ldr	r2, [pc, #140]	; (80176d8 <TIM_Base_SetConfig+0x114>)
 801764a:	4293      	cmp	r3, r2
 801764c:	d108      	bne.n	8017660 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017656:	683b      	ldr	r3, [r7, #0]
 8017658:	68db      	ldr	r3, [r3, #12]
 801765a:	68fa      	ldr	r2, [r7, #12]
 801765c:	4313      	orrs	r3, r2
 801765e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	695b      	ldr	r3, [r3, #20]
 801766a:	4313      	orrs	r3, r2
 801766c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	68fa      	ldr	r2, [r7, #12]
 8017672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	689a      	ldr	r2, [r3, #8]
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	681a      	ldr	r2, [r3, #0]
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	4a0e      	ldr	r2, [pc, #56]	; (80176c0 <TIM_Base_SetConfig+0xfc>)
 8017688:	4293      	cmp	r3, r2
 801768a:	d103      	bne.n	8017694 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	691a      	ldr	r2, [r3, #16]
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2201      	movs	r2, #1
 8017698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	691b      	ldr	r3, [r3, #16]
 801769e:	f003 0301 	and.w	r3, r3, #1
 80176a2:	2b01      	cmp	r3, #1
 80176a4:	d105      	bne.n	80176b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	691b      	ldr	r3, [r3, #16]
 80176aa:	f023 0201 	bic.w	r2, r3, #1
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	611a      	str	r2, [r3, #16]
  }
}
 80176b2:	bf00      	nop
 80176b4:	3714      	adds	r7, #20
 80176b6:	46bd      	mov	sp, r7
 80176b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176bc:	4770      	bx	lr
 80176be:	bf00      	nop
 80176c0:	40010000 	.word	0x40010000
 80176c4:	40000400 	.word	0x40000400
 80176c8:	40000800 	.word	0x40000800
 80176cc:	40000c00 	.word	0x40000c00
 80176d0:	40014000 	.word	0x40014000
 80176d4:	40014400 	.word	0x40014400
 80176d8:	40014800 	.word	0x40014800

080176dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80176dc:	b480      	push	{r7}
 80176de:	b083      	sub	sp, #12
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80176e4:	bf00      	nop
 80176e6:	370c      	adds	r7, #12
 80176e8:	46bd      	mov	sp, r7
 80176ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ee:	4770      	bx	lr

080176f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80176f0:	b480      	push	{r7}
 80176f2:	b083      	sub	sp, #12
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80176f8:	bf00      	nop
 80176fa:	370c      	adds	r7, #12
 80176fc:	46bd      	mov	sp, r7
 80176fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017702:	4770      	bx	lr

08017704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017712:	2301      	movs	r3, #1
 8017714:	e042      	b.n	801779c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801771c:	b2db      	uxtb	r3, r3
 801771e:	2b00      	cmp	r3, #0
 8017720:	d106      	bne.n	8017730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	2200      	movs	r2, #0
 8017726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f7fb f942 	bl	80129b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2224      	movs	r2, #36	; 0x24
 8017734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	68da      	ldr	r2, [r3, #12]
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f000 fd11 	bl	8018170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	691a      	ldr	r2, [r3, #16]
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801775c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	695a      	ldr	r2, [r3, #20]
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801776c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	68da      	ldr	r2, [r3, #12]
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801777c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2200      	movs	r2, #0
 8017782:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	2220      	movs	r2, #32
 8017788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2220      	movs	r2, #32
 8017790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2200      	movs	r2, #0
 8017798:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801779a:	2300      	movs	r3, #0
}
 801779c:	4618      	mov	r0, r3
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}

080177a4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b08c      	sub	sp, #48	; 0x30
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	4613      	mov	r3, r2
 80177b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80177b8:	b2db      	uxtb	r3, r3
 80177ba:	2b20      	cmp	r3, #32
 80177bc:	d14a      	bne.n	8017854 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80177be:	68bb      	ldr	r3, [r7, #8]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d002      	beq.n	80177ca <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80177c4:	88fb      	ldrh	r3, [r7, #6]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d101      	bne.n	80177ce <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80177ca:	2301      	movs	r3, #1
 80177cc:	e043      	b.n	8017856 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	2201      	movs	r2, #1
 80177d2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	2200      	movs	r2, #0
 80177d8:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80177da:	88fb      	ldrh	r3, [r7, #6]
 80177dc:	461a      	mov	r2, r3
 80177de:	68b9      	ldr	r1, [r7, #8]
 80177e0:	68f8      	ldr	r0, [r7, #12]
 80177e2:	f000 faed 	bl	8017dc0 <UART_Start_Receive_IT>
 80177e6:	4603      	mov	r3, r0
 80177e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80177ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d12c      	bne.n	801784e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	d125      	bne.n	8017848 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80177fc:	2300      	movs	r3, #0
 80177fe:	613b      	str	r3, [r7, #16]
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	613b      	str	r3, [r7, #16]
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	613b      	str	r3, [r7, #16]
 8017810:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	330c      	adds	r3, #12
 8017818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801781a:	69bb      	ldr	r3, [r7, #24]
 801781c:	e853 3f00 	ldrex	r3, [r3]
 8017820:	617b      	str	r3, [r7, #20]
   return(result);
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	f043 0310 	orr.w	r3, r3, #16
 8017828:	62bb      	str	r3, [r7, #40]	; 0x28
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	330c      	adds	r3, #12
 8017830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017832:	627a      	str	r2, [r7, #36]	; 0x24
 8017834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017836:	6a39      	ldr	r1, [r7, #32]
 8017838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801783a:	e841 2300 	strex	r3, r2, [r1]
 801783e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017840:	69fb      	ldr	r3, [r7, #28]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d1e5      	bne.n	8017812 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017846:	e002      	b.n	801784e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017848:	2301      	movs	r3, #1
 801784a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801784e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017852:	e000      	b.n	8017856 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8017854:	2302      	movs	r3, #2
  }
}
 8017856:	4618      	mov	r0, r3
 8017858:	3730      	adds	r7, #48	; 0x30
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}
	...

08017860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b0ba      	sub	sp, #232	; 0xe8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	68db      	ldr	r3, [r3, #12]
 8017878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	695b      	ldr	r3, [r3, #20]
 8017882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017886:	2300      	movs	r3, #0
 8017888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801788c:	2300      	movs	r3, #0
 801788e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8017892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017896:	f003 030f 	and.w	r3, r3, #15
 801789a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801789e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d10f      	bne.n	80178c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80178a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80178aa:	f003 0320 	and.w	r3, r3, #32
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d009      	beq.n	80178c6 <HAL_UART_IRQHandler+0x66>
 80178b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80178b6:	f003 0320 	and.w	r3, r3, #32
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d003      	beq.n	80178c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f000 fb97 	bl	8017ff2 <UART_Receive_IT>
      return;
 80178c4:	e25b      	b.n	8017d7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80178c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	f000 80de 	beq.w	8017a8c <HAL_UART_IRQHandler+0x22c>
 80178d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80178d4:	f003 0301 	and.w	r3, r3, #1
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d106      	bne.n	80178ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80178dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80178e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	f000 80d1 	beq.w	8017a8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80178ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80178ee:	f003 0301 	and.w	r3, r3, #1
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d00b      	beq.n	801790e <HAL_UART_IRQHandler+0xae>
 80178f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80178fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d005      	beq.n	801790e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017906:	f043 0201 	orr.w	r2, r3, #1
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801790e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017912:	f003 0304 	and.w	r3, r3, #4
 8017916:	2b00      	cmp	r3, #0
 8017918:	d00b      	beq.n	8017932 <HAL_UART_IRQHandler+0xd2>
 801791a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801791e:	f003 0301 	and.w	r3, r3, #1
 8017922:	2b00      	cmp	r3, #0
 8017924:	d005      	beq.n	8017932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801792a:	f043 0202 	orr.w	r2, r3, #2
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017936:	f003 0302 	and.w	r3, r3, #2
 801793a:	2b00      	cmp	r3, #0
 801793c:	d00b      	beq.n	8017956 <HAL_UART_IRQHandler+0xf6>
 801793e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017942:	f003 0301 	and.w	r3, r3, #1
 8017946:	2b00      	cmp	r3, #0
 8017948:	d005      	beq.n	8017956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801794e:	f043 0204 	orr.w	r2, r3, #4
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801795a:	f003 0308 	and.w	r3, r3, #8
 801795e:	2b00      	cmp	r3, #0
 8017960:	d011      	beq.n	8017986 <HAL_UART_IRQHandler+0x126>
 8017962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017966:	f003 0320 	and.w	r3, r3, #32
 801796a:	2b00      	cmp	r3, #0
 801796c:	d105      	bne.n	801797a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801796e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017972:	f003 0301 	and.w	r3, r3, #1
 8017976:	2b00      	cmp	r3, #0
 8017978:	d005      	beq.n	8017986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801797e:	f043 0208 	orr.w	r2, r3, #8
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801798a:	2b00      	cmp	r3, #0
 801798c:	f000 81f2 	beq.w	8017d74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017994:	f003 0320 	and.w	r3, r3, #32
 8017998:	2b00      	cmp	r3, #0
 801799a:	d008      	beq.n	80179ae <HAL_UART_IRQHandler+0x14e>
 801799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80179a0:	f003 0320 	and.w	r3, r3, #32
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d002      	beq.n	80179ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f000 fb22 	bl	8017ff2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	695b      	ldr	r3, [r3, #20]
 80179b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179b8:	2b40      	cmp	r3, #64	; 0x40
 80179ba:	bf0c      	ite	eq
 80179bc:	2301      	moveq	r3, #1
 80179be:	2300      	movne	r3, #0
 80179c0:	b2db      	uxtb	r3, r3
 80179c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179ca:	f003 0308 	and.w	r3, r3, #8
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d103      	bne.n	80179da <HAL_UART_IRQHandler+0x17a>
 80179d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d04f      	beq.n	8017a7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	f000 fa2a 	bl	8017e34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	695b      	ldr	r3, [r3, #20]
 80179e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179ea:	2b40      	cmp	r3, #64	; 0x40
 80179ec:	d141      	bne.n	8017a72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	3314      	adds	r3, #20
 80179f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80179fc:	e853 3f00 	ldrex	r3, [r3]
 8017a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8017a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	3314      	adds	r3, #20
 8017a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8017a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8017a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017a2a:	e841 2300 	strex	r3, r2, [r1]
 8017a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d1d9      	bne.n	80179ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d013      	beq.n	8017a6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a46:	4a7e      	ldr	r2, [pc, #504]	; (8017c40 <HAL_UART_IRQHandler+0x3e0>)
 8017a48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a4e:	4618      	mov	r0, r3
 8017a50:	f7fd ff32 	bl	80158b8 <HAL_DMA_Abort_IT>
 8017a54:	4603      	mov	r3, r0
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d016      	beq.n	8017a88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017a64:	4610      	mov	r0, r2
 8017a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a68:	e00e      	b.n	8017a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f000 f99e 	bl	8017dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a70:	e00a      	b.n	8017a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f000 f99a 	bl	8017dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a78:	e006      	b.n	8017a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017a7a:	6878      	ldr	r0, [r7, #4]
 8017a7c:	f000 f996 	bl	8017dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8017a86:	e175      	b.n	8017d74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017a88:	bf00      	nop
    return;
 8017a8a:	e173      	b.n	8017d74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a90:	2b01      	cmp	r3, #1
 8017a92:	f040 814f 	bne.w	8017d34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017a9a:	f003 0310 	and.w	r3, r3, #16
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	f000 8148 	beq.w	8017d34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017aa8:	f003 0310 	and.w	r3, r3, #16
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f000 8141 	beq.w	8017d34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	60bb      	str	r3, [r7, #8]
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	60bb      	str	r3, [r7, #8]
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	685b      	ldr	r3, [r3, #4]
 8017ac4:	60bb      	str	r3, [r7, #8]
 8017ac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	695b      	ldr	r3, [r3, #20]
 8017ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ad2:	2b40      	cmp	r3, #64	; 0x40
 8017ad4:	f040 80b6 	bne.w	8017c44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	685b      	ldr	r3, [r3, #4]
 8017ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	f000 8145 	beq.w	8017d78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017af6:	429a      	cmp	r2, r3
 8017af8:	f080 813e 	bcs.w	8017d78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017b02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b08:	69db      	ldr	r3, [r3, #28]
 8017b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b0e:	f000 8088 	beq.w	8017c22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	330c      	adds	r3, #12
 8017b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017b20:	e853 3f00 	ldrex	r3, [r3]
 8017b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	330c      	adds	r3, #12
 8017b3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017b3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017b4e:	e841 2300 	strex	r3, r2, [r1]
 8017b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d1d9      	bne.n	8017b12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	3314      	adds	r3, #20
 8017b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017b68:	e853 3f00 	ldrex	r3, [r3]
 8017b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017b70:	f023 0301 	bic.w	r3, r3, #1
 8017b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	3314      	adds	r3, #20
 8017b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017b82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017b8e:	e841 2300 	strex	r3, r2, [r1]
 8017b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d1e1      	bne.n	8017b5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	3314      	adds	r3, #20
 8017ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017ba4:	e853 3f00 	ldrex	r3, [r3]
 8017ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	3314      	adds	r3, #20
 8017bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017bc6:	e841 2300 	strex	r3, r2, [r1]
 8017bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d1e3      	bne.n	8017b9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2220      	movs	r2, #32
 8017bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	330c      	adds	r3, #12
 8017be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bea:	e853 3f00 	ldrex	r3, [r3]
 8017bee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bf2:	f023 0310 	bic.w	r3, r3, #16
 8017bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	330c      	adds	r3, #12
 8017c00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017c04:	65ba      	str	r2, [r7, #88]	; 0x58
 8017c06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017c0c:	e841 2300 	strex	r3, r2, [r1]
 8017c10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d1e3      	bne.n	8017be0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7fd fddb 	bl	80157d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	2202      	movs	r2, #2
 8017c26:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	1ad3      	subs	r3, r2, r3
 8017c34:	b29b      	uxth	r3, r3
 8017c36:	4619      	mov	r1, r3
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f7f9 fa15 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017c3e:	e09b      	b.n	8017d78 <HAL_UART_IRQHandler+0x518>
 8017c40:	08017efb 	.word	0x08017efb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	1ad3      	subs	r3, r2, r3
 8017c50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017c58:	b29b      	uxth	r3, r3
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	f000 808e 	beq.w	8017d7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	f000 8089 	beq.w	8017d7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	330c      	adds	r3, #12
 8017c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c74:	e853 3f00 	ldrex	r3, [r3]
 8017c78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	330c      	adds	r3, #12
 8017c8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017c8e:	647a      	str	r2, [r7, #68]	; 0x44
 8017c90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017c96:	e841 2300 	strex	r3, r2, [r1]
 8017c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d1e3      	bne.n	8017c6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	3314      	adds	r3, #20
 8017ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cac:	e853 3f00 	ldrex	r3, [r3]
 8017cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8017cb2:	6a3b      	ldr	r3, [r7, #32]
 8017cb4:	f023 0301 	bic.w	r3, r3, #1
 8017cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	3314      	adds	r3, #20
 8017cc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017cc6:	633a      	str	r2, [r7, #48]	; 0x30
 8017cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cce:	e841 2300 	strex	r3, r2, [r1]
 8017cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d1e3      	bne.n	8017ca2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	2220      	movs	r2, #32
 8017cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	330c      	adds	r3, #12
 8017cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cf0:	693b      	ldr	r3, [r7, #16]
 8017cf2:	e853 3f00 	ldrex	r3, [r3]
 8017cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	f023 0310 	bic.w	r3, r3, #16
 8017cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	330c      	adds	r3, #12
 8017d08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017d0c:	61fa      	str	r2, [r7, #28]
 8017d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d10:	69b9      	ldr	r1, [r7, #24]
 8017d12:	69fa      	ldr	r2, [r7, #28]
 8017d14:	e841 2300 	strex	r3, r2, [r1]
 8017d18:	617b      	str	r3, [r7, #20]
   return(result);
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d1e3      	bne.n	8017ce8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	2202      	movs	r2, #2
 8017d24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017d26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7f9 f99b 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017d32:	e023      	b.n	8017d7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d009      	beq.n	8017d54 <HAL_UART_IRQHandler+0x4f4>
 8017d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d003      	beq.n	8017d54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017d4c:	6878      	ldr	r0, [r7, #4]
 8017d4e:	f000 f8e8 	bl	8017f22 <UART_Transmit_IT>
    return;
 8017d52:	e014      	b.n	8017d7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d00e      	beq.n	8017d7e <HAL_UART_IRQHandler+0x51e>
 8017d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d008      	beq.n	8017d7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f000 f928 	bl	8017fc2 <UART_EndTransmit_IT>
    return;
 8017d72:	e004      	b.n	8017d7e <HAL_UART_IRQHandler+0x51e>
    return;
 8017d74:	bf00      	nop
 8017d76:	e002      	b.n	8017d7e <HAL_UART_IRQHandler+0x51e>
      return;
 8017d78:	bf00      	nop
 8017d7a:	e000      	b.n	8017d7e <HAL_UART_IRQHandler+0x51e>
      return;
 8017d7c:	bf00      	nop
  }
}
 8017d7e:	37e8      	adds	r7, #232	; 0xe8
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}

08017d84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017d84:	b480      	push	{r7}
 8017d86:	b083      	sub	sp, #12
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017d8c:	bf00      	nop
 8017d8e:	370c      	adds	r7, #12
 8017d90:	46bd      	mov	sp, r7
 8017d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d96:	4770      	bx	lr

08017d98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017d98:	b480      	push	{r7}
 8017d9a:	b083      	sub	sp, #12
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8017da0:	bf00      	nop
 8017da2:	370c      	adds	r7, #12
 8017da4:	46bd      	mov	sp, r7
 8017da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017daa:	4770      	bx	lr

08017dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017dac:	b480      	push	{r7}
 8017dae:	b083      	sub	sp, #12
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017db4:	bf00      	nop
 8017db6:	370c      	adds	r7, #12
 8017db8:	46bd      	mov	sp, r7
 8017dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbe:	4770      	bx	lr

08017dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b085      	sub	sp, #20
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	60f8      	str	r0, [r7, #12]
 8017dc8:	60b9      	str	r1, [r7, #8]
 8017dca:	4613      	mov	r3, r2
 8017dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	68ba      	ldr	r2, [r7, #8]
 8017dd2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	88fa      	ldrh	r2, [r7, #6]
 8017dd8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	88fa      	ldrh	r2, [r7, #6]
 8017dde:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	2200      	movs	r2, #0
 8017de4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	2222      	movs	r2, #34	; 0x22
 8017dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	691b      	ldr	r3, [r3, #16]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d007      	beq.n	8017e06 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	68da      	ldr	r2, [r3, #12]
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017e04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	695a      	ldr	r2, [r3, #20]
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	f042 0201 	orr.w	r2, r2, #1
 8017e14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	68da      	ldr	r2, [r3, #12]
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	f042 0220 	orr.w	r2, r2, #32
 8017e24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017e26:	2300      	movs	r3, #0
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3714      	adds	r7, #20
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e32:	4770      	bx	lr

08017e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017e34:	b480      	push	{r7}
 8017e36:	b095      	sub	sp, #84	; 0x54
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	330c      	adds	r3, #12
 8017e42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e46:	e853 3f00 	ldrex	r3, [r3]
 8017e4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	330c      	adds	r3, #12
 8017e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017e5c:	643a      	str	r2, [r7, #64]	; 0x40
 8017e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017e64:	e841 2300 	strex	r3, r2, [r1]
 8017e68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d1e5      	bne.n	8017e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	3314      	adds	r3, #20
 8017e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e78:	6a3b      	ldr	r3, [r7, #32]
 8017e7a:	e853 3f00 	ldrex	r3, [r3]
 8017e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017e80:	69fb      	ldr	r3, [r7, #28]
 8017e82:	f023 0301 	bic.w	r3, r3, #1
 8017e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	3314      	adds	r3, #20
 8017e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e98:	e841 2300 	strex	r3, r2, [r1]
 8017e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d1e5      	bne.n	8017e70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ea8:	2b01      	cmp	r3, #1
 8017eaa:	d119      	bne.n	8017ee0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	330c      	adds	r3, #12
 8017eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	e853 3f00 	ldrex	r3, [r3]
 8017eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8017ebc:	68bb      	ldr	r3, [r7, #8]
 8017ebe:	f023 0310 	bic.w	r3, r3, #16
 8017ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	330c      	adds	r3, #12
 8017eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ecc:	61ba      	str	r2, [r7, #24]
 8017ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ed0:	6979      	ldr	r1, [r7, #20]
 8017ed2:	69ba      	ldr	r2, [r7, #24]
 8017ed4:	e841 2300 	strex	r3, r2, [r1]
 8017ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8017eda:	693b      	ldr	r3, [r7, #16]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d1e5      	bne.n	8017eac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2220      	movs	r2, #32
 8017ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2200      	movs	r2, #0
 8017eec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017eee:	bf00      	nop
 8017ef0:	3754      	adds	r7, #84	; 0x54
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef8:	4770      	bx	lr

08017efa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017efa:	b580      	push	{r7, lr}
 8017efc:	b084      	sub	sp, #16
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2200      	movs	r2, #0
 8017f12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017f14:	68f8      	ldr	r0, [r7, #12]
 8017f16:	f7ff ff49 	bl	8017dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f1a:	bf00      	nop
 8017f1c:	3710      	adds	r7, #16
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}

08017f22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017f22:	b480      	push	{r7}
 8017f24:	b085      	sub	sp, #20
 8017f26:	af00      	add	r7, sp, #0
 8017f28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017f30:	b2db      	uxtb	r3, r3
 8017f32:	2b21      	cmp	r3, #33	; 0x21
 8017f34:	d13e      	bne.n	8017fb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	689b      	ldr	r3, [r3, #8]
 8017f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f3e:	d114      	bne.n	8017f6a <UART_Transmit_IT+0x48>
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	691b      	ldr	r3, [r3, #16]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d110      	bne.n	8017f6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	6a1b      	ldr	r3, [r3, #32]
 8017f4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	881b      	ldrh	r3, [r3, #0]
 8017f52:	461a      	mov	r2, r3
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017f5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6a1b      	ldr	r3, [r3, #32]
 8017f62:	1c9a      	adds	r2, r3, #2
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	621a      	str	r2, [r3, #32]
 8017f68:	e008      	b.n	8017f7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	6a1b      	ldr	r3, [r3, #32]
 8017f6e:	1c59      	adds	r1, r3, #1
 8017f70:	687a      	ldr	r2, [r7, #4]
 8017f72:	6211      	str	r1, [r2, #32]
 8017f74:	781a      	ldrb	r2, [r3, #0]
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017f80:	b29b      	uxth	r3, r3
 8017f82:	3b01      	subs	r3, #1
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	687a      	ldr	r2, [r7, #4]
 8017f88:	4619      	mov	r1, r3
 8017f8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d10f      	bne.n	8017fb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	68da      	ldr	r2, [r3, #12]
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017f9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	68da      	ldr	r2, [r3, #12]
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017fae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	e000      	b.n	8017fb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017fb4:	2302      	movs	r3, #2
  }
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3714      	adds	r7, #20
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc0:	4770      	bx	lr

08017fc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017fc2:	b580      	push	{r7, lr}
 8017fc4:	b082      	sub	sp, #8
 8017fc6:	af00      	add	r7, sp, #0
 8017fc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	68da      	ldr	r2, [r3, #12]
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017fd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2220      	movs	r2, #32
 8017fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f7ff fece 	bl	8017d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017fe8:	2300      	movs	r3, #0
}
 8017fea:	4618      	mov	r0, r3
 8017fec:	3708      	adds	r7, #8
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}

08017ff2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017ff2:	b580      	push	{r7, lr}
 8017ff4:	b08c      	sub	sp, #48	; 0x30
 8017ff6:	af00      	add	r7, sp, #0
 8017ff8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018000:	b2db      	uxtb	r3, r3
 8018002:	2b22      	cmp	r3, #34	; 0x22
 8018004:	f040 80ae 	bne.w	8018164 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	689b      	ldr	r3, [r3, #8]
 801800c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018010:	d117      	bne.n	8018042 <UART_Receive_IT+0x50>
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	691b      	ldr	r3, [r3, #16]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d113      	bne.n	8018042 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801801a:	2300      	movs	r3, #0
 801801c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018022:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	b29b      	uxth	r3, r3
 801802c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018030:	b29a      	uxth	r2, r3
 8018032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018034:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801803a:	1c9a      	adds	r2, r3, #2
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	629a      	str	r2, [r3, #40]	; 0x28
 8018040:	e026      	b.n	8018090 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018046:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8018048:	2300      	movs	r3, #0
 801804a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	689b      	ldr	r3, [r3, #8]
 8018050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018054:	d007      	beq.n	8018066 <UART_Receive_IT+0x74>
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	689b      	ldr	r3, [r3, #8]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d10a      	bne.n	8018074 <UART_Receive_IT+0x82>
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	691b      	ldr	r3, [r3, #16]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d106      	bne.n	8018074 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	b2da      	uxtb	r2, r3
 801806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018070:	701a      	strb	r2, [r3, #0]
 8018072:	e008      	b.n	8018086 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	b2db      	uxtb	r3, r3
 801807c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018080:	b2da      	uxtb	r2, r3
 8018082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018084:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801808a:	1c5a      	adds	r2, r3, #1
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018094:	b29b      	uxth	r3, r3
 8018096:	3b01      	subs	r3, #1
 8018098:	b29b      	uxth	r3, r3
 801809a:	687a      	ldr	r2, [r7, #4]
 801809c:	4619      	mov	r1, r3
 801809e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d15d      	bne.n	8018160 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	68da      	ldr	r2, [r3, #12]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	f022 0220 	bic.w	r2, r2, #32
 80180b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	68da      	ldr	r2, [r3, #12]
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80180c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	695a      	ldr	r2, [r3, #20]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	f022 0201 	bic.w	r2, r2, #1
 80180d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2220      	movs	r2, #32
 80180d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2200      	movs	r2, #0
 80180e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	d135      	bne.n	8018156 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	2200      	movs	r2, #0
 80180ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	330c      	adds	r3, #12
 80180f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	e853 3f00 	ldrex	r3, [r3]
 80180fe:	613b      	str	r3, [r7, #16]
   return(result);
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	f023 0310 	bic.w	r3, r3, #16
 8018106:	627b      	str	r3, [r7, #36]	; 0x24
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	330c      	adds	r3, #12
 801810e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018110:	623a      	str	r2, [r7, #32]
 8018112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018114:	69f9      	ldr	r1, [r7, #28]
 8018116:	6a3a      	ldr	r2, [r7, #32]
 8018118:	e841 2300 	strex	r3, r2, [r1]
 801811c:	61bb      	str	r3, [r7, #24]
   return(result);
 801811e:	69bb      	ldr	r3, [r7, #24]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d1e5      	bne.n	80180f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	f003 0310 	and.w	r3, r3, #16
 801812e:	2b10      	cmp	r3, #16
 8018130:	d10a      	bne.n	8018148 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018132:	2300      	movs	r3, #0
 8018134:	60fb      	str	r3, [r7, #12]
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	60fb      	str	r3, [r7, #12]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	60fb      	str	r3, [r7, #12]
 8018146:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801814c:	4619      	mov	r1, r3
 801814e:	6878      	ldr	r0, [r7, #4]
 8018150:	f7f8 ff8a 	bl	8011068 <HAL_UARTEx_RxEventCallback>
 8018154:	e002      	b.n	801815c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018156:	6878      	ldr	r0, [r7, #4]
 8018158:	f7ff fe1e 	bl	8017d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801815c:	2300      	movs	r3, #0
 801815e:	e002      	b.n	8018166 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8018160:	2300      	movs	r3, #0
 8018162:	e000      	b.n	8018166 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8018164:	2302      	movs	r3, #2
  }
}
 8018166:	4618      	mov	r0, r3
 8018168:	3730      	adds	r7, #48	; 0x30
 801816a:	46bd      	mov	sp, r7
 801816c:	bd80      	pop	{r7, pc}
	...

08018170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018174:	b0c0      	sub	sp, #256	; 0x100
 8018176:	af00      	add	r7, sp, #0
 8018178:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	691b      	ldr	r3, [r3, #16]
 8018184:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801818c:	68d9      	ldr	r1, [r3, #12]
 801818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	ea40 0301 	orr.w	r3, r0, r1
 8018198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801819e:	689a      	ldr	r2, [r3, #8]
 80181a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181a4:	691b      	ldr	r3, [r3, #16]
 80181a6:	431a      	orrs	r2, r3
 80181a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181ac:	695b      	ldr	r3, [r3, #20]
 80181ae:	431a      	orrs	r2, r3
 80181b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181b4:	69db      	ldr	r3, [r3, #28]
 80181b6:	4313      	orrs	r3, r2
 80181b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80181bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	68db      	ldr	r3, [r3, #12]
 80181c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80181c8:	f021 010c 	bic.w	r1, r1, #12
 80181cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181d0:	681a      	ldr	r2, [r3, #0]
 80181d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80181d6:	430b      	orrs	r3, r1
 80181d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80181da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	695b      	ldr	r3, [r3, #20]
 80181e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80181e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181ea:	6999      	ldr	r1, [r3, #24]
 80181ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181f0:	681a      	ldr	r2, [r3, #0]
 80181f2:	ea40 0301 	orr.w	r3, r0, r1
 80181f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80181f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181fc:	681a      	ldr	r2, [r3, #0]
 80181fe:	4b8f      	ldr	r3, [pc, #572]	; (801843c <UART_SetConfig+0x2cc>)
 8018200:	429a      	cmp	r2, r3
 8018202:	d005      	beq.n	8018210 <UART_SetConfig+0xa0>
 8018204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018208:	681a      	ldr	r2, [r3, #0]
 801820a:	4b8d      	ldr	r3, [pc, #564]	; (8018440 <UART_SetConfig+0x2d0>)
 801820c:	429a      	cmp	r2, r3
 801820e:	d104      	bne.n	801821a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018210:	f7fe f9e8 	bl	80165e4 <HAL_RCC_GetPCLK2Freq>
 8018214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8018218:	e003      	b.n	8018222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801821a:	f7fe f9cf 	bl	80165bc <HAL_RCC_GetPCLK1Freq>
 801821e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018226:	69db      	ldr	r3, [r3, #28]
 8018228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801822c:	f040 810c 	bne.w	8018448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018234:	2200      	movs	r2, #0
 8018236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801823a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801823e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8018242:	4622      	mov	r2, r4
 8018244:	462b      	mov	r3, r5
 8018246:	1891      	adds	r1, r2, r2
 8018248:	65b9      	str	r1, [r7, #88]	; 0x58
 801824a:	415b      	adcs	r3, r3
 801824c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801824e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8018252:	4621      	mov	r1, r4
 8018254:	eb12 0801 	adds.w	r8, r2, r1
 8018258:	4629      	mov	r1, r5
 801825a:	eb43 0901 	adc.w	r9, r3, r1
 801825e:	f04f 0200 	mov.w	r2, #0
 8018262:	f04f 0300 	mov.w	r3, #0
 8018266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801826a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801826e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018272:	4690      	mov	r8, r2
 8018274:	4699      	mov	r9, r3
 8018276:	4623      	mov	r3, r4
 8018278:	eb18 0303 	adds.w	r3, r8, r3
 801827c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018280:	462b      	mov	r3, r5
 8018282:	eb49 0303 	adc.w	r3, r9, r3
 8018286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801828e:	685b      	ldr	r3, [r3, #4]
 8018290:	2200      	movs	r2, #0
 8018292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8018296:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801829a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801829e:	460b      	mov	r3, r1
 80182a0:	18db      	adds	r3, r3, r3
 80182a2:	653b      	str	r3, [r7, #80]	; 0x50
 80182a4:	4613      	mov	r3, r2
 80182a6:	eb42 0303 	adc.w	r3, r2, r3
 80182aa:	657b      	str	r3, [r7, #84]	; 0x54
 80182ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80182b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80182b4:	f7f8 fd00 	bl	8010cb8 <__aeabi_uldivmod>
 80182b8:	4602      	mov	r2, r0
 80182ba:	460b      	mov	r3, r1
 80182bc:	4b61      	ldr	r3, [pc, #388]	; (8018444 <UART_SetConfig+0x2d4>)
 80182be:	fba3 2302 	umull	r2, r3, r3, r2
 80182c2:	095b      	lsrs	r3, r3, #5
 80182c4:	011c      	lsls	r4, r3, #4
 80182c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80182ca:	2200      	movs	r2, #0
 80182cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80182d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80182d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80182d8:	4642      	mov	r2, r8
 80182da:	464b      	mov	r3, r9
 80182dc:	1891      	adds	r1, r2, r2
 80182de:	64b9      	str	r1, [r7, #72]	; 0x48
 80182e0:	415b      	adcs	r3, r3
 80182e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80182e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80182e8:	4641      	mov	r1, r8
 80182ea:	eb12 0a01 	adds.w	sl, r2, r1
 80182ee:	4649      	mov	r1, r9
 80182f0:	eb43 0b01 	adc.w	fp, r3, r1
 80182f4:	f04f 0200 	mov.w	r2, #0
 80182f8:	f04f 0300 	mov.w	r3, #0
 80182fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8018304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8018308:	4692      	mov	sl, r2
 801830a:	469b      	mov	fp, r3
 801830c:	4643      	mov	r3, r8
 801830e:	eb1a 0303 	adds.w	r3, sl, r3
 8018312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018316:	464b      	mov	r3, r9
 8018318:	eb4b 0303 	adc.w	r3, fp, r3
 801831c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018324:	685b      	ldr	r3, [r3, #4]
 8018326:	2200      	movs	r2, #0
 8018328:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801832c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8018334:	460b      	mov	r3, r1
 8018336:	18db      	adds	r3, r3, r3
 8018338:	643b      	str	r3, [r7, #64]	; 0x40
 801833a:	4613      	mov	r3, r2
 801833c:	eb42 0303 	adc.w	r3, r2, r3
 8018340:	647b      	str	r3, [r7, #68]	; 0x44
 8018342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801834a:	f7f8 fcb5 	bl	8010cb8 <__aeabi_uldivmod>
 801834e:	4602      	mov	r2, r0
 8018350:	460b      	mov	r3, r1
 8018352:	4611      	mov	r1, r2
 8018354:	4b3b      	ldr	r3, [pc, #236]	; (8018444 <UART_SetConfig+0x2d4>)
 8018356:	fba3 2301 	umull	r2, r3, r3, r1
 801835a:	095b      	lsrs	r3, r3, #5
 801835c:	2264      	movs	r2, #100	; 0x64
 801835e:	fb02 f303 	mul.w	r3, r2, r3
 8018362:	1acb      	subs	r3, r1, r3
 8018364:	00db      	lsls	r3, r3, #3
 8018366:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801836a:	4b36      	ldr	r3, [pc, #216]	; (8018444 <UART_SetConfig+0x2d4>)
 801836c:	fba3 2302 	umull	r2, r3, r3, r2
 8018370:	095b      	lsrs	r3, r3, #5
 8018372:	005b      	lsls	r3, r3, #1
 8018374:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018378:	441c      	add	r4, r3
 801837a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801837e:	2200      	movs	r2, #0
 8018380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018384:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801838c:	4642      	mov	r2, r8
 801838e:	464b      	mov	r3, r9
 8018390:	1891      	adds	r1, r2, r2
 8018392:	63b9      	str	r1, [r7, #56]	; 0x38
 8018394:	415b      	adcs	r3, r3
 8018396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801839c:	4641      	mov	r1, r8
 801839e:	1851      	adds	r1, r2, r1
 80183a0:	6339      	str	r1, [r7, #48]	; 0x30
 80183a2:	4649      	mov	r1, r9
 80183a4:	414b      	adcs	r3, r1
 80183a6:	637b      	str	r3, [r7, #52]	; 0x34
 80183a8:	f04f 0200 	mov.w	r2, #0
 80183ac:	f04f 0300 	mov.w	r3, #0
 80183b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80183b4:	4659      	mov	r1, fp
 80183b6:	00cb      	lsls	r3, r1, #3
 80183b8:	4651      	mov	r1, sl
 80183ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80183be:	4651      	mov	r1, sl
 80183c0:	00ca      	lsls	r2, r1, #3
 80183c2:	4610      	mov	r0, r2
 80183c4:	4619      	mov	r1, r3
 80183c6:	4603      	mov	r3, r0
 80183c8:	4642      	mov	r2, r8
 80183ca:	189b      	adds	r3, r3, r2
 80183cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80183d0:	464b      	mov	r3, r9
 80183d2:	460a      	mov	r2, r1
 80183d4:	eb42 0303 	adc.w	r3, r2, r3
 80183d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80183dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183e0:	685b      	ldr	r3, [r3, #4]
 80183e2:	2200      	movs	r2, #0
 80183e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80183e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80183ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80183f0:	460b      	mov	r3, r1
 80183f2:	18db      	adds	r3, r3, r3
 80183f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80183f6:	4613      	mov	r3, r2
 80183f8:	eb42 0303 	adc.w	r3, r2, r3
 80183fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80183fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8018406:	f7f8 fc57 	bl	8010cb8 <__aeabi_uldivmod>
 801840a:	4602      	mov	r2, r0
 801840c:	460b      	mov	r3, r1
 801840e:	4b0d      	ldr	r3, [pc, #52]	; (8018444 <UART_SetConfig+0x2d4>)
 8018410:	fba3 1302 	umull	r1, r3, r3, r2
 8018414:	095b      	lsrs	r3, r3, #5
 8018416:	2164      	movs	r1, #100	; 0x64
 8018418:	fb01 f303 	mul.w	r3, r1, r3
 801841c:	1ad3      	subs	r3, r2, r3
 801841e:	00db      	lsls	r3, r3, #3
 8018420:	3332      	adds	r3, #50	; 0x32
 8018422:	4a08      	ldr	r2, [pc, #32]	; (8018444 <UART_SetConfig+0x2d4>)
 8018424:	fba2 2303 	umull	r2, r3, r2, r3
 8018428:	095b      	lsrs	r3, r3, #5
 801842a:	f003 0207 	and.w	r2, r3, #7
 801842e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	4422      	add	r2, r4
 8018436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018438:	e106      	b.n	8018648 <UART_SetConfig+0x4d8>
 801843a:	bf00      	nop
 801843c:	40011000 	.word	0x40011000
 8018440:	40011400 	.word	0x40011400
 8018444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801844c:	2200      	movs	r2, #0
 801844e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018452:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801845a:	4642      	mov	r2, r8
 801845c:	464b      	mov	r3, r9
 801845e:	1891      	adds	r1, r2, r2
 8018460:	6239      	str	r1, [r7, #32]
 8018462:	415b      	adcs	r3, r3
 8018464:	627b      	str	r3, [r7, #36]	; 0x24
 8018466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801846a:	4641      	mov	r1, r8
 801846c:	1854      	adds	r4, r2, r1
 801846e:	4649      	mov	r1, r9
 8018470:	eb43 0501 	adc.w	r5, r3, r1
 8018474:	f04f 0200 	mov.w	r2, #0
 8018478:	f04f 0300 	mov.w	r3, #0
 801847c:	00eb      	lsls	r3, r5, #3
 801847e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018482:	00e2      	lsls	r2, r4, #3
 8018484:	4614      	mov	r4, r2
 8018486:	461d      	mov	r5, r3
 8018488:	4643      	mov	r3, r8
 801848a:	18e3      	adds	r3, r4, r3
 801848c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018490:	464b      	mov	r3, r9
 8018492:	eb45 0303 	adc.w	r3, r5, r3
 8018496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801849a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801849e:	685b      	ldr	r3, [r3, #4]
 80184a0:	2200      	movs	r2, #0
 80184a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80184a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80184aa:	f04f 0200 	mov.w	r2, #0
 80184ae:	f04f 0300 	mov.w	r3, #0
 80184b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80184b6:	4629      	mov	r1, r5
 80184b8:	008b      	lsls	r3, r1, #2
 80184ba:	4621      	mov	r1, r4
 80184bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80184c0:	4621      	mov	r1, r4
 80184c2:	008a      	lsls	r2, r1, #2
 80184c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80184c8:	f7f8 fbf6 	bl	8010cb8 <__aeabi_uldivmod>
 80184cc:	4602      	mov	r2, r0
 80184ce:	460b      	mov	r3, r1
 80184d0:	4b60      	ldr	r3, [pc, #384]	; (8018654 <UART_SetConfig+0x4e4>)
 80184d2:	fba3 2302 	umull	r2, r3, r3, r2
 80184d6:	095b      	lsrs	r3, r3, #5
 80184d8:	011c      	lsls	r4, r3, #4
 80184da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80184de:	2200      	movs	r2, #0
 80184e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80184e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80184e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80184ec:	4642      	mov	r2, r8
 80184ee:	464b      	mov	r3, r9
 80184f0:	1891      	adds	r1, r2, r2
 80184f2:	61b9      	str	r1, [r7, #24]
 80184f4:	415b      	adcs	r3, r3
 80184f6:	61fb      	str	r3, [r7, #28]
 80184f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80184fc:	4641      	mov	r1, r8
 80184fe:	1851      	adds	r1, r2, r1
 8018500:	6139      	str	r1, [r7, #16]
 8018502:	4649      	mov	r1, r9
 8018504:	414b      	adcs	r3, r1
 8018506:	617b      	str	r3, [r7, #20]
 8018508:	f04f 0200 	mov.w	r2, #0
 801850c:	f04f 0300 	mov.w	r3, #0
 8018510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018514:	4659      	mov	r1, fp
 8018516:	00cb      	lsls	r3, r1, #3
 8018518:	4651      	mov	r1, sl
 801851a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801851e:	4651      	mov	r1, sl
 8018520:	00ca      	lsls	r2, r1, #3
 8018522:	4610      	mov	r0, r2
 8018524:	4619      	mov	r1, r3
 8018526:	4603      	mov	r3, r0
 8018528:	4642      	mov	r2, r8
 801852a:	189b      	adds	r3, r3, r2
 801852c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018530:	464b      	mov	r3, r9
 8018532:	460a      	mov	r2, r1
 8018534:	eb42 0303 	adc.w	r3, r2, r3
 8018538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	2200      	movs	r2, #0
 8018544:	67bb      	str	r3, [r7, #120]	; 0x78
 8018546:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018548:	f04f 0200 	mov.w	r2, #0
 801854c:	f04f 0300 	mov.w	r3, #0
 8018550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018554:	4649      	mov	r1, r9
 8018556:	008b      	lsls	r3, r1, #2
 8018558:	4641      	mov	r1, r8
 801855a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801855e:	4641      	mov	r1, r8
 8018560:	008a      	lsls	r2, r1, #2
 8018562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018566:	f7f8 fba7 	bl	8010cb8 <__aeabi_uldivmod>
 801856a:	4602      	mov	r2, r0
 801856c:	460b      	mov	r3, r1
 801856e:	4611      	mov	r1, r2
 8018570:	4b38      	ldr	r3, [pc, #224]	; (8018654 <UART_SetConfig+0x4e4>)
 8018572:	fba3 2301 	umull	r2, r3, r3, r1
 8018576:	095b      	lsrs	r3, r3, #5
 8018578:	2264      	movs	r2, #100	; 0x64
 801857a:	fb02 f303 	mul.w	r3, r2, r3
 801857e:	1acb      	subs	r3, r1, r3
 8018580:	011b      	lsls	r3, r3, #4
 8018582:	3332      	adds	r3, #50	; 0x32
 8018584:	4a33      	ldr	r2, [pc, #204]	; (8018654 <UART_SetConfig+0x4e4>)
 8018586:	fba2 2303 	umull	r2, r3, r2, r3
 801858a:	095b      	lsrs	r3, r3, #5
 801858c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018590:	441c      	add	r4, r3
 8018592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018596:	2200      	movs	r2, #0
 8018598:	673b      	str	r3, [r7, #112]	; 0x70
 801859a:	677a      	str	r2, [r7, #116]	; 0x74
 801859c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80185a0:	4642      	mov	r2, r8
 80185a2:	464b      	mov	r3, r9
 80185a4:	1891      	adds	r1, r2, r2
 80185a6:	60b9      	str	r1, [r7, #8]
 80185a8:	415b      	adcs	r3, r3
 80185aa:	60fb      	str	r3, [r7, #12]
 80185ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80185b0:	4641      	mov	r1, r8
 80185b2:	1851      	adds	r1, r2, r1
 80185b4:	6039      	str	r1, [r7, #0]
 80185b6:	4649      	mov	r1, r9
 80185b8:	414b      	adcs	r3, r1
 80185ba:	607b      	str	r3, [r7, #4]
 80185bc:	f04f 0200 	mov.w	r2, #0
 80185c0:	f04f 0300 	mov.w	r3, #0
 80185c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80185c8:	4659      	mov	r1, fp
 80185ca:	00cb      	lsls	r3, r1, #3
 80185cc:	4651      	mov	r1, sl
 80185ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80185d2:	4651      	mov	r1, sl
 80185d4:	00ca      	lsls	r2, r1, #3
 80185d6:	4610      	mov	r0, r2
 80185d8:	4619      	mov	r1, r3
 80185da:	4603      	mov	r3, r0
 80185dc:	4642      	mov	r2, r8
 80185de:	189b      	adds	r3, r3, r2
 80185e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80185e2:	464b      	mov	r3, r9
 80185e4:	460a      	mov	r2, r1
 80185e6:	eb42 0303 	adc.w	r3, r2, r3
 80185ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80185ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	2200      	movs	r2, #0
 80185f4:	663b      	str	r3, [r7, #96]	; 0x60
 80185f6:	667a      	str	r2, [r7, #100]	; 0x64
 80185f8:	f04f 0200 	mov.w	r2, #0
 80185fc:	f04f 0300 	mov.w	r3, #0
 8018600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8018604:	4649      	mov	r1, r9
 8018606:	008b      	lsls	r3, r1, #2
 8018608:	4641      	mov	r1, r8
 801860a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801860e:	4641      	mov	r1, r8
 8018610:	008a      	lsls	r2, r1, #2
 8018612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8018616:	f7f8 fb4f 	bl	8010cb8 <__aeabi_uldivmod>
 801861a:	4602      	mov	r2, r0
 801861c:	460b      	mov	r3, r1
 801861e:	4b0d      	ldr	r3, [pc, #52]	; (8018654 <UART_SetConfig+0x4e4>)
 8018620:	fba3 1302 	umull	r1, r3, r3, r2
 8018624:	095b      	lsrs	r3, r3, #5
 8018626:	2164      	movs	r1, #100	; 0x64
 8018628:	fb01 f303 	mul.w	r3, r1, r3
 801862c:	1ad3      	subs	r3, r2, r3
 801862e:	011b      	lsls	r3, r3, #4
 8018630:	3332      	adds	r3, #50	; 0x32
 8018632:	4a08      	ldr	r2, [pc, #32]	; (8018654 <UART_SetConfig+0x4e4>)
 8018634:	fba2 2303 	umull	r2, r3, r2, r3
 8018638:	095b      	lsrs	r3, r3, #5
 801863a:	f003 020f 	and.w	r2, r3, #15
 801863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	4422      	add	r2, r4
 8018646:	609a      	str	r2, [r3, #8]
}
 8018648:	bf00      	nop
 801864a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801864e:	46bd      	mov	sp, r7
 8018650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018654:	51eb851f 	.word	0x51eb851f

08018658 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b084      	sub	sp, #16
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8018660:	4b22      	ldr	r3, [pc, #136]	; (80186ec <WIZCHIP_READ+0x94>)
 8018662:	68db      	ldr	r3, [r3, #12]
 8018664:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018666:	4b21      	ldr	r3, [pc, #132]	; (80186ec <WIZCHIP_READ+0x94>)
 8018668:	695b      	ldr	r3, [r3, #20]
 801866a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801866c:	4b1f      	ldr	r3, [pc, #124]	; (80186ec <WIZCHIP_READ+0x94>)
 801866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018670:	2b00      	cmp	r3, #0
 8018672:	d003      	beq.n	801867c <WIZCHIP_READ+0x24>
 8018674:	4b1d      	ldr	r3, [pc, #116]	; (80186ec <WIZCHIP_READ+0x94>)
 8018676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018678:	2b00      	cmp	r3, #0
 801867a:	d114      	bne.n	80186a6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801867c:	4b1b      	ldr	r3, [pc, #108]	; (80186ec <WIZCHIP_READ+0x94>)
 801867e:	6a1b      	ldr	r3, [r3, #32]
 8018680:	687a      	ldr	r2, [r7, #4]
 8018682:	0c12      	lsrs	r2, r2, #16
 8018684:	b2d2      	uxtb	r2, r2
 8018686:	4610      	mov	r0, r2
 8018688:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801868a:	4b18      	ldr	r3, [pc, #96]	; (80186ec <WIZCHIP_READ+0x94>)
 801868c:	6a1b      	ldr	r3, [r3, #32]
 801868e:	687a      	ldr	r2, [r7, #4]
 8018690:	0a12      	lsrs	r2, r2, #8
 8018692:	b2d2      	uxtb	r2, r2
 8018694:	4610      	mov	r0, r2
 8018696:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018698:	4b14      	ldr	r3, [pc, #80]	; (80186ec <WIZCHIP_READ+0x94>)
 801869a:	6a1b      	ldr	r3, [r3, #32]
 801869c:	687a      	ldr	r2, [r7, #4]
 801869e:	b2d2      	uxtb	r2, r2
 80186a0:	4610      	mov	r0, r2
 80186a2:	4798      	blx	r3
 80186a4:	e011      	b.n	80186ca <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	0c1b      	lsrs	r3, r3, #16
 80186aa:	b2db      	uxtb	r3, r3
 80186ac:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	0a1b      	lsrs	r3, r3, #8
 80186b2:	b2db      	uxtb	r3, r3
 80186b4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	b2db      	uxtb	r3, r3
 80186ba:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80186bc:	4b0b      	ldr	r3, [pc, #44]	; (80186ec <WIZCHIP_READ+0x94>)
 80186be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186c0:	f107 020c 	add.w	r2, r7, #12
 80186c4:	2103      	movs	r1, #3
 80186c6:	4610      	mov	r0, r2
 80186c8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80186ca:	4b08      	ldr	r3, [pc, #32]	; (80186ec <WIZCHIP_READ+0x94>)
 80186cc:	69db      	ldr	r3, [r3, #28]
 80186ce:	4798      	blx	r3
 80186d0:	4603      	mov	r3, r0
 80186d2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80186d4:	4b05      	ldr	r3, [pc, #20]	; (80186ec <WIZCHIP_READ+0x94>)
 80186d6:	699b      	ldr	r3, [r3, #24]
 80186d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80186da:	4b04      	ldr	r3, [pc, #16]	; (80186ec <WIZCHIP_READ+0x94>)
 80186dc:	691b      	ldr	r3, [r3, #16]
 80186de:	4798      	blx	r3
   return ret;
 80186e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80186e2:	4618      	mov	r0, r3
 80186e4:	3710      	adds	r7, #16
 80186e6:	46bd      	mov	sp, r7
 80186e8:	bd80      	pop	{r7, pc}
 80186ea:	bf00      	nop
 80186ec:	200000c4 	.word	0x200000c4

080186f0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b084      	sub	sp, #16
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
 80186f8:	460b      	mov	r3, r1
 80186fa:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80186fc:	4b22      	ldr	r3, [pc, #136]	; (8018788 <WIZCHIP_WRITE+0x98>)
 80186fe:	68db      	ldr	r3, [r3, #12]
 8018700:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018702:	4b21      	ldr	r3, [pc, #132]	; (8018788 <WIZCHIP_WRITE+0x98>)
 8018704:	695b      	ldr	r3, [r3, #20]
 8018706:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	f043 0304 	orr.w	r3, r3, #4
 801870e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018710:	4b1d      	ldr	r3, [pc, #116]	; (8018788 <WIZCHIP_WRITE+0x98>)
 8018712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018714:	2b00      	cmp	r3, #0
 8018716:	d119      	bne.n	801874c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018718:	4b1b      	ldr	r3, [pc, #108]	; (8018788 <WIZCHIP_WRITE+0x98>)
 801871a:	6a1b      	ldr	r3, [r3, #32]
 801871c:	687a      	ldr	r2, [r7, #4]
 801871e:	0c12      	lsrs	r2, r2, #16
 8018720:	b2d2      	uxtb	r2, r2
 8018722:	4610      	mov	r0, r2
 8018724:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018726:	4b18      	ldr	r3, [pc, #96]	; (8018788 <WIZCHIP_WRITE+0x98>)
 8018728:	6a1b      	ldr	r3, [r3, #32]
 801872a:	687a      	ldr	r2, [r7, #4]
 801872c:	0a12      	lsrs	r2, r2, #8
 801872e:	b2d2      	uxtb	r2, r2
 8018730:	4610      	mov	r0, r2
 8018732:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018734:	4b14      	ldr	r3, [pc, #80]	; (8018788 <WIZCHIP_WRITE+0x98>)
 8018736:	6a1b      	ldr	r3, [r3, #32]
 8018738:	687a      	ldr	r2, [r7, #4]
 801873a:	b2d2      	uxtb	r2, r2
 801873c:	4610      	mov	r0, r2
 801873e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8018740:	4b11      	ldr	r3, [pc, #68]	; (8018788 <WIZCHIP_WRITE+0x98>)
 8018742:	6a1b      	ldr	r3, [r3, #32]
 8018744:	78fa      	ldrb	r2, [r7, #3]
 8018746:	4610      	mov	r0, r2
 8018748:	4798      	blx	r3
 801874a:	e013      	b.n	8018774 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	0c1b      	lsrs	r3, r3, #16
 8018750:	b2db      	uxtb	r3, r3
 8018752:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	0a1b      	lsrs	r3, r3, #8
 8018758:	b2db      	uxtb	r3, r3
 801875a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	b2db      	uxtb	r3, r3
 8018760:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8018762:	78fb      	ldrb	r3, [r7, #3]
 8018764:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8018766:	4b08      	ldr	r3, [pc, #32]	; (8018788 <WIZCHIP_WRITE+0x98>)
 8018768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801876a:	f107 020c 	add.w	r2, r7, #12
 801876e:	2104      	movs	r1, #4
 8018770:	4610      	mov	r0, r2
 8018772:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018774:	4b04      	ldr	r3, [pc, #16]	; (8018788 <WIZCHIP_WRITE+0x98>)
 8018776:	699b      	ldr	r3, [r3, #24]
 8018778:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801877a:	4b03      	ldr	r3, [pc, #12]	; (8018788 <WIZCHIP_WRITE+0x98>)
 801877c:	691b      	ldr	r3, [r3, #16]
 801877e:	4798      	blx	r3
}
 8018780:	bf00      	nop
 8018782:	3710      	adds	r7, #16
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	200000c4 	.word	0x200000c4

0801878c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801878c:	b590      	push	{r4, r7, lr}
 801878e:	b087      	sub	sp, #28
 8018790:	af00      	add	r7, sp, #0
 8018792:	60f8      	str	r0, [r7, #12]
 8018794:	60b9      	str	r1, [r7, #8]
 8018796:	4613      	mov	r3, r2
 8018798:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801879a:	4b2b      	ldr	r3, [pc, #172]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 801879c:	68db      	ldr	r3, [r3, #12]
 801879e:	4798      	blx	r3
   WIZCHIP.CS._select();
 80187a0:	4b29      	ldr	r3, [pc, #164]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 80187a2:	695b      	ldr	r3, [r3, #20]
 80187a4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80187a6:	4b28      	ldr	r3, [pc, #160]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 80187a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d003      	beq.n	80187b6 <WIZCHIP_READ_BUF+0x2a>
 80187ae:	4b26      	ldr	r3, [pc, #152]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 80187b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d126      	bne.n	8018804 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80187b6:	4b24      	ldr	r3, [pc, #144]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 80187b8:	6a1b      	ldr	r3, [r3, #32]
 80187ba:	68fa      	ldr	r2, [r7, #12]
 80187bc:	0c12      	lsrs	r2, r2, #16
 80187be:	b2d2      	uxtb	r2, r2
 80187c0:	4610      	mov	r0, r2
 80187c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80187c4:	4b20      	ldr	r3, [pc, #128]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 80187c6:	6a1b      	ldr	r3, [r3, #32]
 80187c8:	68fa      	ldr	r2, [r7, #12]
 80187ca:	0a12      	lsrs	r2, r2, #8
 80187cc:	b2d2      	uxtb	r2, r2
 80187ce:	4610      	mov	r0, r2
 80187d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80187d2:	4b1d      	ldr	r3, [pc, #116]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 80187d4:	6a1b      	ldr	r3, [r3, #32]
 80187d6:	68fa      	ldr	r2, [r7, #12]
 80187d8:	b2d2      	uxtb	r2, r2
 80187da:	4610      	mov	r0, r2
 80187dc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80187de:	2300      	movs	r3, #0
 80187e0:	82fb      	strh	r3, [r7, #22]
 80187e2:	e00a      	b.n	80187fa <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80187e4:	4b18      	ldr	r3, [pc, #96]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 80187e6:	69db      	ldr	r3, [r3, #28]
 80187e8:	8afa      	ldrh	r2, [r7, #22]
 80187ea:	68b9      	ldr	r1, [r7, #8]
 80187ec:	188c      	adds	r4, r1, r2
 80187ee:	4798      	blx	r3
 80187f0:	4603      	mov	r3, r0
 80187f2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80187f4:	8afb      	ldrh	r3, [r7, #22]
 80187f6:	3301      	adds	r3, #1
 80187f8:	82fb      	strh	r3, [r7, #22]
 80187fa:	8afa      	ldrh	r2, [r7, #22]
 80187fc:	88fb      	ldrh	r3, [r7, #6]
 80187fe:	429a      	cmp	r2, r3
 8018800:	d3f0      	bcc.n	80187e4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018802:	e017      	b.n	8018834 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	0c1b      	lsrs	r3, r3, #16
 8018808:	b2db      	uxtb	r3, r3
 801880a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	0a1b      	lsrs	r3, r3, #8
 8018810:	b2db      	uxtb	r3, r3
 8018812:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	b2db      	uxtb	r3, r3
 8018818:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801881a:	4b0b      	ldr	r3, [pc, #44]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 801881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801881e:	f107 0210 	add.w	r2, r7, #16
 8018822:	2103      	movs	r1, #3
 8018824:	4610      	mov	r0, r2
 8018826:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8018828:	4b07      	ldr	r3, [pc, #28]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 801882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801882c:	88fa      	ldrh	r2, [r7, #6]
 801882e:	4611      	mov	r1, r2
 8018830:	68b8      	ldr	r0, [r7, #8]
 8018832:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018834:	4b04      	ldr	r3, [pc, #16]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 8018836:	699b      	ldr	r3, [r3, #24]
 8018838:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801883a:	4b03      	ldr	r3, [pc, #12]	; (8018848 <WIZCHIP_READ_BUF+0xbc>)
 801883c:	691b      	ldr	r3, [r3, #16]
 801883e:	4798      	blx	r3
}
 8018840:	bf00      	nop
 8018842:	371c      	adds	r7, #28
 8018844:	46bd      	mov	sp, r7
 8018846:	bd90      	pop	{r4, r7, pc}
 8018848:	200000c4 	.word	0x200000c4

0801884c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b086      	sub	sp, #24
 8018850:	af00      	add	r7, sp, #0
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	60b9      	str	r1, [r7, #8]
 8018856:	4613      	mov	r3, r2
 8018858:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801885a:	4b2b      	ldr	r3, [pc, #172]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 801885c:	68db      	ldr	r3, [r3, #12]
 801885e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018860:	4b29      	ldr	r3, [pc, #164]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 8018862:	695b      	ldr	r3, [r3, #20]
 8018864:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	f043 0304 	orr.w	r3, r3, #4
 801886c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801886e:	4b26      	ldr	r3, [pc, #152]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 8018870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018872:	2b00      	cmp	r3, #0
 8018874:	d126      	bne.n	80188c4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018876:	4b24      	ldr	r3, [pc, #144]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 8018878:	6a1b      	ldr	r3, [r3, #32]
 801887a:	68fa      	ldr	r2, [r7, #12]
 801887c:	0c12      	lsrs	r2, r2, #16
 801887e:	b2d2      	uxtb	r2, r2
 8018880:	4610      	mov	r0, r2
 8018882:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018884:	4b20      	ldr	r3, [pc, #128]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 8018886:	6a1b      	ldr	r3, [r3, #32]
 8018888:	68fa      	ldr	r2, [r7, #12]
 801888a:	0a12      	lsrs	r2, r2, #8
 801888c:	b2d2      	uxtb	r2, r2
 801888e:	4610      	mov	r0, r2
 8018890:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018892:	4b1d      	ldr	r3, [pc, #116]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 8018894:	6a1b      	ldr	r3, [r3, #32]
 8018896:	68fa      	ldr	r2, [r7, #12]
 8018898:	b2d2      	uxtb	r2, r2
 801889a:	4610      	mov	r0, r2
 801889c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801889e:	2300      	movs	r3, #0
 80188a0:	82fb      	strh	r3, [r7, #22]
 80188a2:	e00a      	b.n	80188ba <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80188a4:	4b18      	ldr	r3, [pc, #96]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 80188a6:	6a1b      	ldr	r3, [r3, #32]
 80188a8:	8afa      	ldrh	r2, [r7, #22]
 80188aa:	68b9      	ldr	r1, [r7, #8]
 80188ac:	440a      	add	r2, r1
 80188ae:	7812      	ldrb	r2, [r2, #0]
 80188b0:	4610      	mov	r0, r2
 80188b2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80188b4:	8afb      	ldrh	r3, [r7, #22]
 80188b6:	3301      	adds	r3, #1
 80188b8:	82fb      	strh	r3, [r7, #22]
 80188ba:	8afa      	ldrh	r2, [r7, #22]
 80188bc:	88fb      	ldrh	r3, [r7, #6]
 80188be:	429a      	cmp	r2, r3
 80188c0:	d3f0      	bcc.n	80188a4 <WIZCHIP_WRITE_BUF+0x58>
 80188c2:	e017      	b.n	80188f4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	0c1b      	lsrs	r3, r3, #16
 80188c8:	b2db      	uxtb	r3, r3
 80188ca:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	0a1b      	lsrs	r3, r3, #8
 80188d0:	b2db      	uxtb	r3, r3
 80188d2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80188da:	4b0b      	ldr	r3, [pc, #44]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 80188dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188de:	f107 0210 	add.w	r2, r7, #16
 80188e2:	2103      	movs	r1, #3
 80188e4:	4610      	mov	r0, r2
 80188e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80188e8:	4b07      	ldr	r3, [pc, #28]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 80188ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188ec:	88fa      	ldrh	r2, [r7, #6]
 80188ee:	4611      	mov	r1, r2
 80188f0:	68b8      	ldr	r0, [r7, #8]
 80188f2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80188f4:	4b04      	ldr	r3, [pc, #16]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 80188f6:	699b      	ldr	r3, [r3, #24]
 80188f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80188fa:	4b03      	ldr	r3, [pc, #12]	; (8018908 <WIZCHIP_WRITE_BUF+0xbc>)
 80188fc:	691b      	ldr	r3, [r3, #16]
 80188fe:	4798      	blx	r3
}
 8018900:	bf00      	nop
 8018902:	3718      	adds	r7, #24
 8018904:	46bd      	mov	sp, r7
 8018906:	bd80      	pop	{r7, pc}
 8018908:	200000c4 	.word	0x200000c4

0801890c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 801890c:	b590      	push	{r4, r7, lr}
 801890e:	b085      	sub	sp, #20
 8018910:	af00      	add	r7, sp, #0
 8018912:	4603      	mov	r3, r0
 8018914:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018916:	2300      	movs	r3, #0
 8018918:	81fb      	strh	r3, [r7, #14]
 801891a:	2300      	movs	r3, #0
 801891c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801891e:	79fb      	ldrb	r3, [r7, #7]
 8018920:	009b      	lsls	r3, r3, #2
 8018922:	3301      	adds	r3, #1
 8018924:	00db      	lsls	r3, r3, #3
 8018926:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801892a:	4618      	mov	r0, r3
 801892c:	f7ff fe94 	bl	8018658 <WIZCHIP_READ>
 8018930:	4603      	mov	r3, r0
 8018932:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018934:	89bb      	ldrh	r3, [r7, #12]
 8018936:	021b      	lsls	r3, r3, #8
 8018938:	b29c      	uxth	r4, r3
 801893a:	79fb      	ldrb	r3, [r7, #7]
 801893c:	009b      	lsls	r3, r3, #2
 801893e:	3301      	adds	r3, #1
 8018940:	00db      	lsls	r3, r3, #3
 8018942:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018946:	4618      	mov	r0, r3
 8018948:	f7ff fe86 	bl	8018658 <WIZCHIP_READ>
 801894c:	4603      	mov	r3, r0
 801894e:	b29b      	uxth	r3, r3
 8018950:	4423      	add	r3, r4
 8018952:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018954:	89bb      	ldrh	r3, [r7, #12]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d01a      	beq.n	8018990 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 801895a:	79fb      	ldrb	r3, [r7, #7]
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	3301      	adds	r3, #1
 8018960:	00db      	lsls	r3, r3, #3
 8018962:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018966:	4618      	mov	r0, r3
 8018968:	f7ff fe76 	bl	8018658 <WIZCHIP_READ>
 801896c:	4603      	mov	r3, r0
 801896e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018970:	89fb      	ldrh	r3, [r7, #14]
 8018972:	021b      	lsls	r3, r3, #8
 8018974:	b29c      	uxth	r4, r3
 8018976:	79fb      	ldrb	r3, [r7, #7]
 8018978:	009b      	lsls	r3, r3, #2
 801897a:	3301      	adds	r3, #1
 801897c:	00db      	lsls	r3, r3, #3
 801897e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018982:	4618      	mov	r0, r3
 8018984:	f7ff fe68 	bl	8018658 <WIZCHIP_READ>
 8018988:	4603      	mov	r3, r0
 801898a:	b29b      	uxth	r3, r3
 801898c:	4423      	add	r3, r4
 801898e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018990:	89fa      	ldrh	r2, [r7, #14]
 8018992:	89bb      	ldrh	r3, [r7, #12]
 8018994:	429a      	cmp	r2, r3
 8018996:	d1c2      	bne.n	801891e <getSn_TX_FSR+0x12>
   return val;
 8018998:	89fb      	ldrh	r3, [r7, #14]
}
 801899a:	4618      	mov	r0, r3
 801899c:	3714      	adds	r7, #20
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd90      	pop	{r4, r7, pc}

080189a2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80189a2:	b590      	push	{r4, r7, lr}
 80189a4:	b085      	sub	sp, #20
 80189a6:	af00      	add	r7, sp, #0
 80189a8:	4603      	mov	r3, r0
 80189aa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80189ac:	2300      	movs	r3, #0
 80189ae:	81fb      	strh	r3, [r7, #14]
 80189b0:	2300      	movs	r3, #0
 80189b2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80189b4:	79fb      	ldrb	r3, [r7, #7]
 80189b6:	009b      	lsls	r3, r3, #2
 80189b8:	3301      	adds	r3, #1
 80189ba:	00db      	lsls	r3, r3, #3
 80189bc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80189c0:	4618      	mov	r0, r3
 80189c2:	f7ff fe49 	bl	8018658 <WIZCHIP_READ>
 80189c6:	4603      	mov	r3, r0
 80189c8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80189ca:	89bb      	ldrh	r3, [r7, #12]
 80189cc:	021b      	lsls	r3, r3, #8
 80189ce:	b29c      	uxth	r4, r3
 80189d0:	79fb      	ldrb	r3, [r7, #7]
 80189d2:	009b      	lsls	r3, r3, #2
 80189d4:	3301      	adds	r3, #1
 80189d6:	00db      	lsls	r3, r3, #3
 80189d8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80189dc:	4618      	mov	r0, r3
 80189de:	f7ff fe3b 	bl	8018658 <WIZCHIP_READ>
 80189e2:	4603      	mov	r3, r0
 80189e4:	b29b      	uxth	r3, r3
 80189e6:	4423      	add	r3, r4
 80189e8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80189ea:	89bb      	ldrh	r3, [r7, #12]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d01a      	beq.n	8018a26 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80189f0:	79fb      	ldrb	r3, [r7, #7]
 80189f2:	009b      	lsls	r3, r3, #2
 80189f4:	3301      	adds	r3, #1
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7ff fe2b 	bl	8018658 <WIZCHIP_READ>
 8018a02:	4603      	mov	r3, r0
 8018a04:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018a06:	89fb      	ldrh	r3, [r7, #14]
 8018a08:	021b      	lsls	r3, r3, #8
 8018a0a:	b29c      	uxth	r4, r3
 8018a0c:	79fb      	ldrb	r3, [r7, #7]
 8018a0e:	009b      	lsls	r3, r3, #2
 8018a10:	3301      	adds	r3, #1
 8018a12:	00db      	lsls	r3, r3, #3
 8018a14:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f7ff fe1d 	bl	8018658 <WIZCHIP_READ>
 8018a1e:	4603      	mov	r3, r0
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	4423      	add	r3, r4
 8018a24:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018a26:	89fa      	ldrh	r2, [r7, #14]
 8018a28:	89bb      	ldrh	r3, [r7, #12]
 8018a2a:	429a      	cmp	r2, r3
 8018a2c:	d1c2      	bne.n	80189b4 <getSn_RX_RSR+0x12>
   return val;
 8018a2e:	89fb      	ldrh	r3, [r7, #14]
}
 8018a30:	4618      	mov	r0, r3
 8018a32:	3714      	adds	r7, #20
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd90      	pop	{r4, r7, pc}

08018a38 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018a38:	b590      	push	{r4, r7, lr}
 8018a3a:	b085      	sub	sp, #20
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	4603      	mov	r3, r0
 8018a40:	6039      	str	r1, [r7, #0]
 8018a42:	71fb      	strb	r3, [r7, #7]
 8018a44:	4613      	mov	r3, r2
 8018a46:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018a48:	2300      	movs	r3, #0
 8018a4a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8018a50:	88bb      	ldrh	r3, [r7, #4]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d048      	beq.n	8018ae8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8018a56:	79fb      	ldrb	r3, [r7, #7]
 8018a58:	009b      	lsls	r3, r3, #2
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	00db      	lsls	r3, r3, #3
 8018a5e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7ff fdf8 	bl	8018658 <WIZCHIP_READ>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	021b      	lsls	r3, r3, #8
 8018a6e:	b29c      	uxth	r4, r3
 8018a70:	79fb      	ldrb	r3, [r7, #7]
 8018a72:	009b      	lsls	r3, r3, #2
 8018a74:	3301      	adds	r3, #1
 8018a76:	00db      	lsls	r3, r3, #3
 8018a78:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f7ff fdeb 	bl	8018658 <WIZCHIP_READ>
 8018a82:	4603      	mov	r3, r0
 8018a84:	b29b      	uxth	r3, r3
 8018a86:	4423      	add	r3, r4
 8018a88:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8018a8a:	89fb      	ldrh	r3, [r7, #14]
 8018a8c:	021b      	lsls	r3, r3, #8
 8018a8e:	79fa      	ldrb	r2, [r7, #7]
 8018a90:	0092      	lsls	r2, r2, #2
 8018a92:	3202      	adds	r2, #2
 8018a94:	00d2      	lsls	r2, r2, #3
 8018a96:	4413      	add	r3, r2
 8018a98:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8018a9a:	88bb      	ldrh	r3, [r7, #4]
 8018a9c:	461a      	mov	r2, r3
 8018a9e:	6839      	ldr	r1, [r7, #0]
 8018aa0:	68b8      	ldr	r0, [r7, #8]
 8018aa2:	f7ff fed3 	bl	801884c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8018aa6:	89fa      	ldrh	r2, [r7, #14]
 8018aa8:	88bb      	ldrh	r3, [r7, #4]
 8018aaa:	4413      	add	r3, r2
 8018aac:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8018aae:	79fb      	ldrb	r3, [r7, #7]
 8018ab0:	009b      	lsls	r3, r3, #2
 8018ab2:	3301      	adds	r3, #1
 8018ab4:	00db      	lsls	r3, r3, #3
 8018ab6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018aba:	461a      	mov	r2, r3
 8018abc:	89fb      	ldrh	r3, [r7, #14]
 8018abe:	0a1b      	lsrs	r3, r3, #8
 8018ac0:	b29b      	uxth	r3, r3
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	4610      	mov	r0, r2
 8018ac8:	f7ff fe12 	bl	80186f0 <WIZCHIP_WRITE>
 8018acc:	79fb      	ldrb	r3, [r7, #7]
 8018ace:	009b      	lsls	r3, r3, #2
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	00db      	lsls	r3, r3, #3
 8018ad4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018ad8:	461a      	mov	r2, r3
 8018ada:	89fb      	ldrh	r3, [r7, #14]
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	4619      	mov	r1, r3
 8018ae0:	4610      	mov	r0, r2
 8018ae2:	f7ff fe05 	bl	80186f0 <WIZCHIP_WRITE>
 8018ae6:	e000      	b.n	8018aea <wiz_send_data+0xb2>
   if(len == 0)  return;
 8018ae8:	bf00      	nop
}
 8018aea:	3714      	adds	r7, #20
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd90      	pop	{r4, r7, pc}

08018af0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018af0:	b590      	push	{r4, r7, lr}
 8018af2:	b085      	sub	sp, #20
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	4603      	mov	r3, r0
 8018af8:	6039      	str	r1, [r7, #0]
 8018afa:	71fb      	strb	r3, [r7, #7]
 8018afc:	4613      	mov	r3, r2
 8018afe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018b00:	2300      	movs	r3, #0
 8018b02:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018b04:	2300      	movs	r3, #0
 8018b06:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8018b08:	88bb      	ldrh	r3, [r7, #4]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d048      	beq.n	8018ba0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8018b0e:	79fb      	ldrb	r3, [r7, #7]
 8018b10:	009b      	lsls	r3, r3, #2
 8018b12:	3301      	adds	r3, #1
 8018b14:	00db      	lsls	r3, r3, #3
 8018b16:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7ff fd9c 	bl	8018658 <WIZCHIP_READ>
 8018b20:	4603      	mov	r3, r0
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	021b      	lsls	r3, r3, #8
 8018b26:	b29c      	uxth	r4, r3
 8018b28:	79fb      	ldrb	r3, [r7, #7]
 8018b2a:	009b      	lsls	r3, r3, #2
 8018b2c:	3301      	adds	r3, #1
 8018b2e:	00db      	lsls	r3, r3, #3
 8018b30:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7ff fd8f 	bl	8018658 <WIZCHIP_READ>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	b29b      	uxth	r3, r3
 8018b3e:	4423      	add	r3, r4
 8018b40:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8018b42:	89fb      	ldrh	r3, [r7, #14]
 8018b44:	021b      	lsls	r3, r3, #8
 8018b46:	79fa      	ldrb	r2, [r7, #7]
 8018b48:	0092      	lsls	r2, r2, #2
 8018b4a:	3203      	adds	r2, #3
 8018b4c:	00d2      	lsls	r2, r2, #3
 8018b4e:	4413      	add	r3, r2
 8018b50:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8018b52:	88bb      	ldrh	r3, [r7, #4]
 8018b54:	461a      	mov	r2, r3
 8018b56:	6839      	ldr	r1, [r7, #0]
 8018b58:	68b8      	ldr	r0, [r7, #8]
 8018b5a:	f7ff fe17 	bl	801878c <WIZCHIP_READ_BUF>
   ptr += len;
 8018b5e:	89fa      	ldrh	r2, [r7, #14]
 8018b60:	88bb      	ldrh	r3, [r7, #4]
 8018b62:	4413      	add	r3, r2
 8018b64:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018b66:	79fb      	ldrb	r3, [r7, #7]
 8018b68:	009b      	lsls	r3, r3, #2
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	00db      	lsls	r3, r3, #3
 8018b6e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018b72:	461a      	mov	r2, r3
 8018b74:	89fb      	ldrh	r3, [r7, #14]
 8018b76:	0a1b      	lsrs	r3, r3, #8
 8018b78:	b29b      	uxth	r3, r3
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	4619      	mov	r1, r3
 8018b7e:	4610      	mov	r0, r2
 8018b80:	f7ff fdb6 	bl	80186f0 <WIZCHIP_WRITE>
 8018b84:	79fb      	ldrb	r3, [r7, #7]
 8018b86:	009b      	lsls	r3, r3, #2
 8018b88:	3301      	adds	r3, #1
 8018b8a:	00db      	lsls	r3, r3, #3
 8018b8c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018b90:	461a      	mov	r2, r3
 8018b92:	89fb      	ldrh	r3, [r7, #14]
 8018b94:	b2db      	uxtb	r3, r3
 8018b96:	4619      	mov	r1, r3
 8018b98:	4610      	mov	r0, r2
 8018b9a:	f7ff fda9 	bl	80186f0 <WIZCHIP_WRITE>
 8018b9e:	e000      	b.n	8018ba2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8018ba0:	bf00      	nop
}
 8018ba2:	3714      	adds	r7, #20
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	bd90      	pop	{r4, r7, pc}

08018ba8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018ba8:	b590      	push	{r4, r7, lr}
 8018baa:	b085      	sub	sp, #20
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	4603      	mov	r3, r0
 8018bb0:	460a      	mov	r2, r1
 8018bb2:	71fb      	strb	r3, [r7, #7]
 8018bb4:	4613      	mov	r3, r2
 8018bb6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018bbc:	79fb      	ldrb	r3, [r7, #7]
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	3301      	adds	r3, #1
 8018bc2:	00db      	lsls	r3, r3, #3
 8018bc4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7ff fd45 	bl	8018658 <WIZCHIP_READ>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	b29b      	uxth	r3, r3
 8018bd2:	021b      	lsls	r3, r3, #8
 8018bd4:	b29c      	uxth	r4, r3
 8018bd6:	79fb      	ldrb	r3, [r7, #7]
 8018bd8:	009b      	lsls	r3, r3, #2
 8018bda:	3301      	adds	r3, #1
 8018bdc:	00db      	lsls	r3, r3, #3
 8018bde:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7ff fd38 	bl	8018658 <WIZCHIP_READ>
 8018be8:	4603      	mov	r3, r0
 8018bea:	b29b      	uxth	r3, r3
 8018bec:	4423      	add	r3, r4
 8018bee:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8018bf0:	89fa      	ldrh	r2, [r7, #14]
 8018bf2:	88bb      	ldrh	r3, [r7, #4]
 8018bf4:	4413      	add	r3, r2
 8018bf6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8018bf8:	79fb      	ldrb	r3, [r7, #7]
 8018bfa:	009b      	lsls	r3, r3, #2
 8018bfc:	3301      	adds	r3, #1
 8018bfe:	00db      	lsls	r3, r3, #3
 8018c00:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018c04:	461a      	mov	r2, r3
 8018c06:	89fb      	ldrh	r3, [r7, #14]
 8018c08:	0a1b      	lsrs	r3, r3, #8
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	4619      	mov	r1, r3
 8018c10:	4610      	mov	r0, r2
 8018c12:	f7ff fd6d 	bl	80186f0 <WIZCHIP_WRITE>
 8018c16:	79fb      	ldrb	r3, [r7, #7]
 8018c18:	009b      	lsls	r3, r3, #2
 8018c1a:	3301      	adds	r3, #1
 8018c1c:	00db      	lsls	r3, r3, #3
 8018c1e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018c22:	461a      	mov	r2, r3
 8018c24:	89fb      	ldrh	r3, [r7, #14]
 8018c26:	b2db      	uxtb	r3, r3
 8018c28:	4619      	mov	r1, r3
 8018c2a:	4610      	mov	r0, r2
 8018c2c:	f7ff fd60 	bl	80186f0 <WIZCHIP_WRITE>
}
 8018c30:	bf00      	nop
 8018c32:	3714      	adds	r7, #20
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd90      	pop	{r4, r7, pc}

08018c38 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018c38:	b590      	push	{r4, r7, lr}
 8018c3a:	b085      	sub	sp, #20
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	4604      	mov	r4, r0
 8018c40:	4608      	mov	r0, r1
 8018c42:	4611      	mov	r1, r2
 8018c44:	461a      	mov	r2, r3
 8018c46:	4623      	mov	r3, r4
 8018c48:	71fb      	strb	r3, [r7, #7]
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	71bb      	strb	r3, [r7, #6]
 8018c4e:	460b      	mov	r3, r1
 8018c50:	80bb      	strh	r3, [r7, #4]
 8018c52:	4613      	mov	r3, r2
 8018c54:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018c56:	79fb      	ldrb	r3, [r7, #7]
 8018c58:	2b08      	cmp	r3, #8
 8018c5a:	d902      	bls.n	8018c62 <socket+0x2a>
 8018c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8018c60:	e0f0      	b.n	8018e44 <socket+0x20c>
	switch(protocol)
 8018c62:	79bb      	ldrb	r3, [r7, #6]
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d005      	beq.n	8018c74 <socket+0x3c>
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	dd11      	ble.n	8018c90 <socket+0x58>
 8018c6c:	3b02      	subs	r3, #2
 8018c6e:	2b02      	cmp	r3, #2
 8018c70:	d80e      	bhi.n	8018c90 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8018c72:	e011      	b.n	8018c98 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018c74:	f107 030c 	add.w	r3, r7, #12
 8018c78:	2204      	movs	r2, #4
 8018c7a:	4619      	mov	r1, r3
 8018c7c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8018c80:	f7ff fd84 	bl	801878c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d105      	bne.n	8018c96 <socket+0x5e>
 8018c8a:	f06f 0302 	mvn.w	r3, #2
 8018c8e:	e0d9      	b.n	8018e44 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8018c90:	f06f 0304 	mvn.w	r3, #4
 8018c94:	e0d6      	b.n	8018e44 <socket+0x20c>
	    break;
 8018c96:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018c98:	78fb      	ldrb	r3, [r7, #3]
 8018c9a:	f003 0304 	and.w	r3, r3, #4
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d002      	beq.n	8018ca8 <socket+0x70>
 8018ca2:	f06f 0305 	mvn.w	r3, #5
 8018ca6:	e0cd      	b.n	8018e44 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018ca8:	78fb      	ldrb	r3, [r7, #3]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d028      	beq.n	8018d00 <socket+0xc8>
	{
   	switch(protocol)
 8018cae:	79bb      	ldrb	r3, [r7, #6]
 8018cb0:	2b01      	cmp	r3, #1
 8018cb2:	d002      	beq.n	8018cba <socket+0x82>
 8018cb4:	2b02      	cmp	r3, #2
 8018cb6:	d008      	beq.n	8018cca <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018cb8:	e022      	b.n	8018d00 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018cba:	78fb      	ldrb	r3, [r7, #3]
 8018cbc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d11a      	bne.n	8018cfa <socket+0xc2>
 8018cc4:	f06f 0305 	mvn.w	r3, #5
 8018cc8:	e0bc      	b.n	8018e44 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8018cca:	78fb      	ldrb	r3, [r7, #3]
 8018ccc:	f003 0320 	and.w	r3, r3, #32
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d006      	beq.n	8018ce2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8018cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	db02      	blt.n	8018ce2 <socket+0xaa>
 8018cdc:	f06f 0305 	mvn.w	r3, #5
 8018ce0:	e0b0      	b.n	8018e44 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8018ce2:	78fb      	ldrb	r3, [r7, #3]
 8018ce4:	f003 0310 	and.w	r3, r3, #16
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d008      	beq.n	8018cfe <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8018cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	db04      	blt.n	8018cfe <socket+0xc6>
 8018cf4:	f06f 0305 	mvn.w	r3, #5
 8018cf8:	e0a4      	b.n	8018e44 <socket+0x20c>
   	      break;
 8018cfa:	bf00      	nop
 8018cfc:	e000      	b.n	8018d00 <socket+0xc8>
   	      break;
 8018cfe:	bf00      	nop
   	}
   }
	close(sn);
 8018d00:	79fb      	ldrb	r3, [r7, #7]
 8018d02:	4618      	mov	r0, r3
 8018d04:	f000 f8ac 	bl	8018e60 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8018d08:	79fb      	ldrb	r3, [r7, #7]
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	3301      	adds	r3, #1
 8018d0e:	00db      	lsls	r3, r3, #3
 8018d10:	4618      	mov	r0, r3
 8018d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018d16:	f023 030f 	bic.w	r3, r3, #15
 8018d1a:	b25a      	sxtb	r2, r3
 8018d1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018d20:	4313      	orrs	r3, r2
 8018d22:	b25b      	sxtb	r3, r3
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	4619      	mov	r1, r3
 8018d28:	f7ff fce2 	bl	80186f0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8018d2c:	88bb      	ldrh	r3, [r7, #4]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d110      	bne.n	8018d54 <socket+0x11c>
	{
	   port = sock_any_port++;
 8018d32:	4b46      	ldr	r3, [pc, #280]	; (8018e4c <socket+0x214>)
 8018d34:	881b      	ldrh	r3, [r3, #0]
 8018d36:	1c5a      	adds	r2, r3, #1
 8018d38:	b291      	uxth	r1, r2
 8018d3a:	4a44      	ldr	r2, [pc, #272]	; (8018e4c <socket+0x214>)
 8018d3c:	8011      	strh	r1, [r2, #0]
 8018d3e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8018d40:	4b42      	ldr	r3, [pc, #264]	; (8018e4c <socket+0x214>)
 8018d42:	881b      	ldrh	r3, [r3, #0]
 8018d44:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018d48:	4293      	cmp	r3, r2
 8018d4a:	d103      	bne.n	8018d54 <socket+0x11c>
 8018d4c:	4b3f      	ldr	r3, [pc, #252]	; (8018e4c <socket+0x214>)
 8018d4e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018d52:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8018d54:	79fb      	ldrb	r3, [r7, #7]
 8018d56:	009b      	lsls	r3, r3, #2
 8018d58:	3301      	adds	r3, #1
 8018d5a:	00db      	lsls	r3, r3, #3
 8018d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018d60:	461a      	mov	r2, r3
 8018d62:	88bb      	ldrh	r3, [r7, #4]
 8018d64:	0a1b      	lsrs	r3, r3, #8
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	b2db      	uxtb	r3, r3
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	4610      	mov	r0, r2
 8018d6e:	f7ff fcbf 	bl	80186f0 <WIZCHIP_WRITE>
 8018d72:	79fb      	ldrb	r3, [r7, #7]
 8018d74:	009b      	lsls	r3, r3, #2
 8018d76:	3301      	adds	r3, #1
 8018d78:	00db      	lsls	r3, r3, #3
 8018d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8018d7e:	461a      	mov	r2, r3
 8018d80:	88bb      	ldrh	r3, [r7, #4]
 8018d82:	b2db      	uxtb	r3, r3
 8018d84:	4619      	mov	r1, r3
 8018d86:	4610      	mov	r0, r2
 8018d88:	f7ff fcb2 	bl	80186f0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8018d8c:	79fb      	ldrb	r3, [r7, #7]
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	3301      	adds	r3, #1
 8018d92:	00db      	lsls	r3, r3, #3
 8018d94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018d98:	2101      	movs	r1, #1
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7ff fca8 	bl	80186f0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8018da0:	bf00      	nop
 8018da2:	79fb      	ldrb	r3, [r7, #7]
 8018da4:	009b      	lsls	r3, r3, #2
 8018da6:	3301      	adds	r3, #1
 8018da8:	00db      	lsls	r3, r3, #3
 8018daa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7ff fc52 	bl	8018658 <WIZCHIP_READ>
 8018db4:	4603      	mov	r3, r0
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d1f3      	bne.n	8018da2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8018dba:	79fb      	ldrb	r3, [r7, #7]
 8018dbc:	2201      	movs	r2, #1
 8018dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8018dc2:	b21b      	sxth	r3, r3
 8018dc4:	43db      	mvns	r3, r3
 8018dc6:	b21a      	sxth	r2, r3
 8018dc8:	4b21      	ldr	r3, [pc, #132]	; (8018e50 <socket+0x218>)
 8018dca:	881b      	ldrh	r3, [r3, #0]
 8018dcc:	b21b      	sxth	r3, r3
 8018dce:	4013      	ands	r3, r2
 8018dd0:	b21b      	sxth	r3, r3
 8018dd2:	b29a      	uxth	r2, r3
 8018dd4:	4b1e      	ldr	r3, [pc, #120]	; (8018e50 <socket+0x218>)
 8018dd6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8018dd8:	78fb      	ldrb	r3, [r7, #3]
 8018dda:	f003 0201 	and.w	r2, r3, #1
 8018dde:	79fb      	ldrb	r3, [r7, #7]
 8018de0:	fa02 f303 	lsl.w	r3, r2, r3
 8018de4:	b21a      	sxth	r2, r3
 8018de6:	4b1a      	ldr	r3, [pc, #104]	; (8018e50 <socket+0x218>)
 8018de8:	881b      	ldrh	r3, [r3, #0]
 8018dea:	b21b      	sxth	r3, r3
 8018dec:	4313      	orrs	r3, r2
 8018dee:	b21b      	sxth	r3, r3
 8018df0:	b29a      	uxth	r2, r3
 8018df2:	4b17      	ldr	r3, [pc, #92]	; (8018e50 <socket+0x218>)
 8018df4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8018df6:	79fb      	ldrb	r3, [r7, #7]
 8018df8:	2201      	movs	r2, #1
 8018dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8018dfe:	b21b      	sxth	r3, r3
 8018e00:	43db      	mvns	r3, r3
 8018e02:	b21a      	sxth	r2, r3
 8018e04:	4b13      	ldr	r3, [pc, #76]	; (8018e54 <socket+0x21c>)
 8018e06:	881b      	ldrh	r3, [r3, #0]
 8018e08:	b21b      	sxth	r3, r3
 8018e0a:	4013      	ands	r3, r2
 8018e0c:	b21b      	sxth	r3, r3
 8018e0e:	b29a      	uxth	r2, r3
 8018e10:	4b10      	ldr	r3, [pc, #64]	; (8018e54 <socket+0x21c>)
 8018e12:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8018e14:	79fb      	ldrb	r3, [r7, #7]
 8018e16:	4a10      	ldr	r2, [pc, #64]	; (8018e58 <socket+0x220>)
 8018e18:	2100      	movs	r1, #0
 8018e1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8018e1e:	79fb      	ldrb	r3, [r7, #7]
 8018e20:	4a0e      	ldr	r2, [pc, #56]	; (8018e5c <socket+0x224>)
 8018e22:	2100      	movs	r1, #0
 8018e24:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8018e26:	bf00      	nop
 8018e28:	79fb      	ldrb	r3, [r7, #7]
 8018e2a:	009b      	lsls	r3, r3, #2
 8018e2c:	3301      	adds	r3, #1
 8018e2e:	00db      	lsls	r3, r3, #3
 8018e30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7ff fc0f 	bl	8018658 <WIZCHIP_READ>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d0f3      	beq.n	8018e28 <socket+0x1f0>
   return (int8_t)sn;
 8018e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8018e44:	4618      	mov	r0, r3
 8018e46:	3714      	adds	r7, #20
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd90      	pop	{r4, r7, pc}
 8018e4c:	200000c2 	.word	0x200000c2
 8018e50:	20000964 	.word	0x20000964
 8018e54:	20000966 	.word	0x20000966
 8018e58:	20000968 	.word	0x20000968
 8018e5c:	20000978 	.word	0x20000978

08018e60 <close>:

int8_t close(uint8_t sn)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b082      	sub	sp, #8
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	4603      	mov	r3, r0
 8018e68:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018e6a:	79fb      	ldrb	r3, [r7, #7]
 8018e6c:	2b08      	cmp	r3, #8
 8018e6e:	d902      	bls.n	8018e76 <close+0x16>
 8018e70:	f04f 33ff 	mov.w	r3, #4294967295
 8018e74:	e055      	b.n	8018f22 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8018e76:	79fb      	ldrb	r3, [r7, #7]
 8018e78:	009b      	lsls	r3, r3, #2
 8018e7a:	3301      	adds	r3, #1
 8018e7c:	00db      	lsls	r3, r3, #3
 8018e7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018e82:	2110      	movs	r1, #16
 8018e84:	4618      	mov	r0, r3
 8018e86:	f7ff fc33 	bl	80186f0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8018e8a:	bf00      	nop
 8018e8c:	79fb      	ldrb	r3, [r7, #7]
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	3301      	adds	r3, #1
 8018e92:	00db      	lsls	r3, r3, #3
 8018e94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7ff fbdd 	bl	8018658 <WIZCHIP_READ>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d1f3      	bne.n	8018e8c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8018ea4:	79fb      	ldrb	r3, [r7, #7]
 8018ea6:	009b      	lsls	r3, r3, #2
 8018ea8:	3301      	adds	r3, #1
 8018eaa:	00db      	lsls	r3, r3, #3
 8018eac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018eb0:	211f      	movs	r1, #31
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f7ff fc1c 	bl	80186f0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8018eb8:	79fb      	ldrb	r3, [r7, #7]
 8018eba:	2201      	movs	r2, #1
 8018ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8018ec0:	b21b      	sxth	r3, r3
 8018ec2:	43db      	mvns	r3, r3
 8018ec4:	b21a      	sxth	r2, r3
 8018ec6:	4b19      	ldr	r3, [pc, #100]	; (8018f2c <close+0xcc>)
 8018ec8:	881b      	ldrh	r3, [r3, #0]
 8018eca:	b21b      	sxth	r3, r3
 8018ecc:	4013      	ands	r3, r2
 8018ece:	b21b      	sxth	r3, r3
 8018ed0:	b29a      	uxth	r2, r3
 8018ed2:	4b16      	ldr	r3, [pc, #88]	; (8018f2c <close+0xcc>)
 8018ed4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8018ed6:	79fb      	ldrb	r3, [r7, #7]
 8018ed8:	2201      	movs	r2, #1
 8018eda:	fa02 f303 	lsl.w	r3, r2, r3
 8018ede:	b21b      	sxth	r3, r3
 8018ee0:	43db      	mvns	r3, r3
 8018ee2:	b21a      	sxth	r2, r3
 8018ee4:	4b12      	ldr	r3, [pc, #72]	; (8018f30 <close+0xd0>)
 8018ee6:	881b      	ldrh	r3, [r3, #0]
 8018ee8:	b21b      	sxth	r3, r3
 8018eea:	4013      	ands	r3, r2
 8018eec:	b21b      	sxth	r3, r3
 8018eee:	b29a      	uxth	r2, r3
 8018ef0:	4b0f      	ldr	r3, [pc, #60]	; (8018f30 <close+0xd0>)
 8018ef2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8018ef4:	79fb      	ldrb	r3, [r7, #7]
 8018ef6:	4a0f      	ldr	r2, [pc, #60]	; (8018f34 <close+0xd4>)
 8018ef8:	2100      	movs	r1, #0
 8018efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8018efe:	79fb      	ldrb	r3, [r7, #7]
 8018f00:	4a0d      	ldr	r2, [pc, #52]	; (8018f38 <close+0xd8>)
 8018f02:	2100      	movs	r1, #0
 8018f04:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8018f06:	bf00      	nop
 8018f08:	79fb      	ldrb	r3, [r7, #7]
 8018f0a:	009b      	lsls	r3, r3, #2
 8018f0c:	3301      	adds	r3, #1
 8018f0e:	00db      	lsls	r3, r3, #3
 8018f10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018f14:	4618      	mov	r0, r3
 8018f16:	f7ff fb9f 	bl	8018658 <WIZCHIP_READ>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d1f3      	bne.n	8018f08 <close+0xa8>
	return SOCK_OK;
 8018f20:	2301      	movs	r3, #1
}
 8018f22:	4618      	mov	r0, r3
 8018f24:	3708      	adds	r7, #8
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bd80      	pop	{r7, pc}
 8018f2a:	bf00      	nop
 8018f2c:	20000964 	.word	0x20000964
 8018f30:	20000966 	.word	0x20000966
 8018f34:	20000968 	.word	0x20000968
 8018f38:	20000978 	.word	0x20000978

08018f3c <listen>:

int8_t listen(uint8_t sn)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b082      	sub	sp, #8
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	4603      	mov	r3, r0
 8018f44:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018f46:	79fb      	ldrb	r3, [r7, #7]
 8018f48:	2b08      	cmp	r3, #8
 8018f4a:	d902      	bls.n	8018f52 <listen+0x16>
 8018f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f50:	e049      	b.n	8018fe6 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018f52:	79fb      	ldrb	r3, [r7, #7]
 8018f54:	009b      	lsls	r3, r3, #2
 8018f56:	3301      	adds	r3, #1
 8018f58:	00db      	lsls	r3, r3, #3
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f7ff fb7c 	bl	8018658 <WIZCHIP_READ>
 8018f60:	4603      	mov	r3, r0
 8018f62:	f003 030f 	and.w	r3, r3, #15
 8018f66:	2b01      	cmp	r3, #1
 8018f68:	d002      	beq.n	8018f70 <listen+0x34>
 8018f6a:	f06f 0304 	mvn.w	r3, #4
 8018f6e:	e03a      	b.n	8018fe6 <listen+0xaa>
	CHECK_SOCKINIT();
 8018f70:	79fb      	ldrb	r3, [r7, #7]
 8018f72:	009b      	lsls	r3, r3, #2
 8018f74:	3301      	adds	r3, #1
 8018f76:	00db      	lsls	r3, r3, #3
 8018f78:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7ff fb6b 	bl	8018658 <WIZCHIP_READ>
 8018f82:	4603      	mov	r3, r0
 8018f84:	2b13      	cmp	r3, #19
 8018f86:	d002      	beq.n	8018f8e <listen+0x52>
 8018f88:	f06f 0302 	mvn.w	r3, #2
 8018f8c:	e02b      	b.n	8018fe6 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8018f8e:	79fb      	ldrb	r3, [r7, #7]
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	3301      	adds	r3, #1
 8018f94:	00db      	lsls	r3, r3, #3
 8018f96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018f9a:	2102      	movs	r1, #2
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f7ff fba7 	bl	80186f0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8018fa2:	bf00      	nop
 8018fa4:	79fb      	ldrb	r3, [r7, #7]
 8018fa6:	009b      	lsls	r3, r3, #2
 8018fa8:	3301      	adds	r3, #1
 8018faa:	00db      	lsls	r3, r3, #3
 8018fac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	f7ff fb51 	bl	8018658 <WIZCHIP_READ>
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d1f3      	bne.n	8018fa4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018fbc:	e006      	b.n	8018fcc <listen+0x90>
   {
         close(sn);
 8018fbe:	79fb      	ldrb	r3, [r7, #7]
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f7ff ff4d 	bl	8018e60 <close>
         return SOCKERR_SOCKCLOSED;
 8018fc6:	f06f 0303 	mvn.w	r3, #3
 8018fca:	e00c      	b.n	8018fe6 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018fcc:	79fb      	ldrb	r3, [r7, #7]
 8018fce:	009b      	lsls	r3, r3, #2
 8018fd0:	3301      	adds	r3, #1
 8018fd2:	00db      	lsls	r3, r3, #3
 8018fd4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f7ff fb3d 	bl	8018658 <WIZCHIP_READ>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	2b14      	cmp	r3, #20
 8018fe2:	d1ec      	bne.n	8018fbe <listen+0x82>
   }
   return SOCK_OK;
 8018fe4:	2301      	movs	r3, #1
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3708      	adds	r7, #8
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}
	...

08018ff0 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b084      	sub	sp, #16
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	6039      	str	r1, [r7, #0]
 8018ffa:	71fb      	strb	r3, [r7, #7]
 8018ffc:	4613      	mov	r3, r2
 8018ffe:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8019000:	79fb      	ldrb	r3, [r7, #7]
 8019002:	2b08      	cmp	r3, #8
 8019004:	d902      	bls.n	801900c <connect+0x1c>
 8019006:	f04f 33ff 	mov.w	r3, #4294967295
 801900a:	e0c6      	b.n	801919a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801900c:	79fb      	ldrb	r3, [r7, #7]
 801900e:	009b      	lsls	r3, r3, #2
 8019010:	3301      	adds	r3, #1
 8019012:	00db      	lsls	r3, r3, #3
 8019014:	4618      	mov	r0, r3
 8019016:	f7ff fb1f 	bl	8018658 <WIZCHIP_READ>
 801901a:	4603      	mov	r3, r0
 801901c:	f003 030f 	and.w	r3, r3, #15
 8019020:	2b01      	cmp	r3, #1
 8019022:	d002      	beq.n	801902a <connect+0x3a>
 8019024:	f06f 0304 	mvn.w	r3, #4
 8019028:	e0b7      	b.n	801919a <connect+0x1aa>
   CHECK_SOCKINIT();
 801902a:	79fb      	ldrb	r3, [r7, #7]
 801902c:	009b      	lsls	r3, r3, #2
 801902e:	3301      	adds	r3, #1
 8019030:	00db      	lsls	r3, r3, #3
 8019032:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019036:	4618      	mov	r0, r3
 8019038:	f7ff fb0e 	bl	8018658 <WIZCHIP_READ>
 801903c:	4603      	mov	r3, r0
 801903e:	2b13      	cmp	r3, #19
 8019040:	d002      	beq.n	8019048 <connect+0x58>
 8019042:	f06f 0302 	mvn.w	r3, #2
 8019046:	e0a8      	b.n	801919a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	021b      	lsls	r3, r3, #8
 8019052:	683a      	ldr	r2, [r7, #0]
 8019054:	3201      	adds	r2, #1
 8019056:	7812      	ldrb	r2, [r2, #0]
 8019058:	4413      	add	r3, r2
 801905a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	021b      	lsls	r3, r3, #8
 8019060:	683a      	ldr	r2, [r7, #0]
 8019062:	3202      	adds	r2, #2
 8019064:	7812      	ldrb	r2, [r2, #0]
 8019066:	4413      	add	r3, r2
 8019068:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	021b      	lsls	r3, r3, #8
 801906e:	683a      	ldr	r2, [r7, #0]
 8019070:	3203      	adds	r2, #3
 8019072:	7812      	ldrb	r2, [r2, #0]
 8019074:	4413      	add	r3, r2
 8019076:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801907e:	d002      	beq.n	8019086 <connect+0x96>
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	2b00      	cmp	r3, #0
 8019084:	d102      	bne.n	801908c <connect+0x9c>
 8019086:	f06f 030b 	mvn.w	r3, #11
 801908a:	e086      	b.n	801919a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 801908c:	88bb      	ldrh	r3, [r7, #4]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d102      	bne.n	8019098 <connect+0xa8>
 8019092:	f06f 030a 	mvn.w	r3, #10
 8019096:	e080      	b.n	801919a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8019098:	79fb      	ldrb	r3, [r7, #7]
 801909a:	009b      	lsls	r3, r3, #2
 801909c:	3301      	adds	r3, #1
 801909e:	00db      	lsls	r3, r3, #3
 80190a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80190a4:	2204      	movs	r2, #4
 80190a6:	6839      	ldr	r1, [r7, #0]
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7ff fbcf 	bl	801884c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80190ae:	79fb      	ldrb	r3, [r7, #7]
 80190b0:	009b      	lsls	r3, r3, #2
 80190b2:	3301      	adds	r3, #1
 80190b4:	00db      	lsls	r3, r3, #3
 80190b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80190ba:	461a      	mov	r2, r3
 80190bc:	88bb      	ldrh	r3, [r7, #4]
 80190be:	0a1b      	lsrs	r3, r3, #8
 80190c0:	b29b      	uxth	r3, r3
 80190c2:	b2db      	uxtb	r3, r3
 80190c4:	4619      	mov	r1, r3
 80190c6:	4610      	mov	r0, r2
 80190c8:	f7ff fb12 	bl	80186f0 <WIZCHIP_WRITE>
 80190cc:	79fb      	ldrb	r3, [r7, #7]
 80190ce:	009b      	lsls	r3, r3, #2
 80190d0:	3301      	adds	r3, #1
 80190d2:	00db      	lsls	r3, r3, #3
 80190d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80190d8:	461a      	mov	r2, r3
 80190da:	88bb      	ldrh	r3, [r7, #4]
 80190dc:	b2db      	uxtb	r3, r3
 80190de:	4619      	mov	r1, r3
 80190e0:	4610      	mov	r0, r2
 80190e2:	f7ff fb05 	bl	80186f0 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80190e6:	79fb      	ldrb	r3, [r7, #7]
 80190e8:	009b      	lsls	r3, r3, #2
 80190ea:	3301      	adds	r3, #1
 80190ec:	00db      	lsls	r3, r3, #3
 80190ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80190f2:	2104      	movs	r1, #4
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7ff fafb 	bl	80186f0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80190fa:	bf00      	nop
 80190fc:	79fb      	ldrb	r3, [r7, #7]
 80190fe:	009b      	lsls	r3, r3, #2
 8019100:	3301      	adds	r3, #1
 8019102:	00db      	lsls	r3, r3, #3
 8019104:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019108:	4618      	mov	r0, r3
 801910a:	f7ff faa5 	bl	8018658 <WIZCHIP_READ>
 801910e:	4603      	mov	r3, r0
 8019110:	2b00      	cmp	r3, #0
 8019112:	d1f3      	bne.n	80190fc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019114:	4b23      	ldr	r3, [pc, #140]	; (80191a4 <connect+0x1b4>)
 8019116:	881b      	ldrh	r3, [r3, #0]
 8019118:	461a      	mov	r2, r3
 801911a:	79fb      	ldrb	r3, [r7, #7]
 801911c:	fa42 f303 	asr.w	r3, r2, r3
 8019120:	f003 0301 	and.w	r3, r3, #1
 8019124:	2b00      	cmp	r3, #0
 8019126:	d02b      	beq.n	8019180 <connect+0x190>
 8019128:	2300      	movs	r3, #0
 801912a:	e036      	b.n	801919a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801912c:	79fb      	ldrb	r3, [r7, #7]
 801912e:	009b      	lsls	r3, r3, #2
 8019130:	3301      	adds	r3, #1
 8019132:	00db      	lsls	r3, r3, #3
 8019134:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019138:	4618      	mov	r0, r3
 801913a:	f7ff fa8d 	bl	8018658 <WIZCHIP_READ>
 801913e:	4603      	mov	r3, r0
 8019140:	f003 0308 	and.w	r3, r3, #8
 8019144:	2b00      	cmp	r3, #0
 8019146:	d00c      	beq.n	8019162 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8019148:	79fb      	ldrb	r3, [r7, #7]
 801914a:	009b      	lsls	r3, r3, #2
 801914c:	3301      	adds	r3, #1
 801914e:	00db      	lsls	r3, r3, #3
 8019150:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019154:	2108      	movs	r1, #8
 8019156:	4618      	mov	r0, r3
 8019158:	f7ff faca 	bl	80186f0 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801915c:	f06f 030c 	mvn.w	r3, #12
 8019160:	e01b      	b.n	801919a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8019162:	79fb      	ldrb	r3, [r7, #7]
 8019164:	009b      	lsls	r3, r3, #2
 8019166:	3301      	adds	r3, #1
 8019168:	00db      	lsls	r3, r3, #3
 801916a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801916e:	4618      	mov	r0, r3
 8019170:	f7ff fa72 	bl	8018658 <WIZCHIP_READ>
 8019174:	4603      	mov	r3, r0
 8019176:	2b00      	cmp	r3, #0
 8019178:	d102      	bne.n	8019180 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 801917a:	f06f 0303 	mvn.w	r3, #3
 801917e:	e00c      	b.n	801919a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8019180:	79fb      	ldrb	r3, [r7, #7]
 8019182:	009b      	lsls	r3, r3, #2
 8019184:	3301      	adds	r3, #1
 8019186:	00db      	lsls	r3, r3, #3
 8019188:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801918c:	4618      	mov	r0, r3
 801918e:	f7ff fa63 	bl	8018658 <WIZCHIP_READ>
 8019192:	4603      	mov	r3, r0
 8019194:	2b17      	cmp	r3, #23
 8019196:	d1c9      	bne.n	801912c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8019198:	2301      	movs	r3, #1
}
 801919a:	4618      	mov	r0, r3
 801919c:	3710      	adds	r7, #16
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd80      	pop	{r7, pc}
 80191a2:	bf00      	nop
 80191a4:	20000964 	.word	0x20000964

080191a8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b082      	sub	sp, #8
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	4603      	mov	r3, r0
 80191b0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80191b2:	79fb      	ldrb	r3, [r7, #7]
 80191b4:	2b08      	cmp	r3, #8
 80191b6:	d902      	bls.n	80191be <disconnect+0x16>
 80191b8:	f04f 33ff 	mov.w	r3, #4294967295
 80191bc:	e062      	b.n	8019284 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80191be:	79fb      	ldrb	r3, [r7, #7]
 80191c0:	009b      	lsls	r3, r3, #2
 80191c2:	3301      	adds	r3, #1
 80191c4:	00db      	lsls	r3, r3, #3
 80191c6:	4618      	mov	r0, r3
 80191c8:	f7ff fa46 	bl	8018658 <WIZCHIP_READ>
 80191cc:	4603      	mov	r3, r0
 80191ce:	f003 030f 	and.w	r3, r3, #15
 80191d2:	2b01      	cmp	r3, #1
 80191d4:	d002      	beq.n	80191dc <disconnect+0x34>
 80191d6:	f06f 0304 	mvn.w	r3, #4
 80191da:	e053      	b.n	8019284 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80191dc:	79fb      	ldrb	r3, [r7, #7]
 80191de:	009b      	lsls	r3, r3, #2
 80191e0:	3301      	adds	r3, #1
 80191e2:	00db      	lsls	r3, r3, #3
 80191e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191e8:	2108      	movs	r1, #8
 80191ea:	4618      	mov	r0, r3
 80191ec:	f7ff fa80 	bl	80186f0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80191f0:	bf00      	nop
 80191f2:	79fb      	ldrb	r3, [r7, #7]
 80191f4:	009b      	lsls	r3, r3, #2
 80191f6:	3301      	adds	r3, #1
 80191f8:	00db      	lsls	r3, r3, #3
 80191fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191fe:	4618      	mov	r0, r3
 8019200:	f7ff fa2a 	bl	8018658 <WIZCHIP_READ>
 8019204:	4603      	mov	r3, r0
 8019206:	2b00      	cmp	r3, #0
 8019208:	d1f3      	bne.n	80191f2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 801920a:	79fb      	ldrb	r3, [r7, #7]
 801920c:	2201      	movs	r2, #1
 801920e:	fa02 f303 	lsl.w	r3, r2, r3
 8019212:	b21b      	sxth	r3, r3
 8019214:	43db      	mvns	r3, r3
 8019216:	b21a      	sxth	r2, r3
 8019218:	4b1c      	ldr	r3, [pc, #112]	; (801928c <disconnect+0xe4>)
 801921a:	881b      	ldrh	r3, [r3, #0]
 801921c:	b21b      	sxth	r3, r3
 801921e:	4013      	ands	r3, r2
 8019220:	b21b      	sxth	r3, r3
 8019222:	b29a      	uxth	r2, r3
 8019224:	4b19      	ldr	r3, [pc, #100]	; (801928c <disconnect+0xe4>)
 8019226:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019228:	4b19      	ldr	r3, [pc, #100]	; (8019290 <disconnect+0xe8>)
 801922a:	881b      	ldrh	r3, [r3, #0]
 801922c:	461a      	mov	r2, r3
 801922e:	79fb      	ldrb	r3, [r7, #7]
 8019230:	fa42 f303 	asr.w	r3, r2, r3
 8019234:	f003 0301 	and.w	r3, r3, #1
 8019238:	2b00      	cmp	r3, #0
 801923a:	d016      	beq.n	801926a <disconnect+0xc2>
 801923c:	2300      	movs	r3, #0
 801923e:	e021      	b.n	8019284 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8019240:	79fb      	ldrb	r3, [r7, #7]
 8019242:	009b      	lsls	r3, r3, #2
 8019244:	3301      	adds	r3, #1
 8019246:	00db      	lsls	r3, r3, #3
 8019248:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801924c:	4618      	mov	r0, r3
 801924e:	f7ff fa03 	bl	8018658 <WIZCHIP_READ>
 8019252:	4603      	mov	r3, r0
 8019254:	f003 0308 	and.w	r3, r3, #8
 8019258:	2b00      	cmp	r3, #0
 801925a:	d006      	beq.n	801926a <disconnect+0xc2>
	   {
	      close(sn);
 801925c:	79fb      	ldrb	r3, [r7, #7]
 801925e:	4618      	mov	r0, r3
 8019260:	f7ff fdfe 	bl	8018e60 <close>
	      return SOCKERR_TIMEOUT;
 8019264:	f06f 030c 	mvn.w	r3, #12
 8019268:	e00c      	b.n	8019284 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 801926a:	79fb      	ldrb	r3, [r7, #7]
 801926c:	009b      	lsls	r3, r3, #2
 801926e:	3301      	adds	r3, #1
 8019270:	00db      	lsls	r3, r3, #3
 8019272:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019276:	4618      	mov	r0, r3
 8019278:	f7ff f9ee 	bl	8018658 <WIZCHIP_READ>
 801927c:	4603      	mov	r3, r0
 801927e:	2b00      	cmp	r3, #0
 8019280:	d1de      	bne.n	8019240 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8019282:	2301      	movs	r3, #1
}
 8019284:	4618      	mov	r0, r3
 8019286:	3708      	adds	r7, #8
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}
 801928c:	20000966 	.word	0x20000966
 8019290:	20000964 	.word	0x20000964

08019294 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b084      	sub	sp, #16
 8019298:	af00      	add	r7, sp, #0
 801929a:	4603      	mov	r3, r0
 801929c:	6039      	str	r1, [r7, #0]
 801929e:	71fb      	strb	r3, [r7, #7]
 80192a0:	4613      	mov	r3, r2
 80192a2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80192a4:	2300      	movs	r3, #0
 80192a6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80192a8:	2300      	movs	r3, #0
 80192aa:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80192ac:	79fb      	ldrb	r3, [r7, #7]
 80192ae:	2b08      	cmp	r3, #8
 80192b0:	d902      	bls.n	80192b8 <send+0x24>
 80192b2:	f04f 33ff 	mov.w	r3, #4294967295
 80192b6:	e0de      	b.n	8019476 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80192b8:	79fb      	ldrb	r3, [r7, #7]
 80192ba:	009b      	lsls	r3, r3, #2
 80192bc:	3301      	adds	r3, #1
 80192be:	00db      	lsls	r3, r3, #3
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7ff f9c9 	bl	8018658 <WIZCHIP_READ>
 80192c6:	4603      	mov	r3, r0
 80192c8:	f003 030f 	and.w	r3, r3, #15
 80192cc:	2b01      	cmp	r3, #1
 80192ce:	d002      	beq.n	80192d6 <send+0x42>
 80192d0:	f06f 0304 	mvn.w	r3, #4
 80192d4:	e0cf      	b.n	8019476 <send+0x1e2>
   CHECK_SOCKDATA();
 80192d6:	88bb      	ldrh	r3, [r7, #4]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d102      	bne.n	80192e2 <send+0x4e>
 80192dc:	f06f 030d 	mvn.w	r3, #13
 80192e0:	e0c9      	b.n	8019476 <send+0x1e2>
   tmp = getSn_SR(sn);
 80192e2:	79fb      	ldrb	r3, [r7, #7]
 80192e4:	009b      	lsls	r3, r3, #2
 80192e6:	3301      	adds	r3, #1
 80192e8:	00db      	lsls	r3, r3, #3
 80192ea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7ff f9b2 	bl	8018658 <WIZCHIP_READ>
 80192f4:	4603      	mov	r3, r0
 80192f6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80192f8:	7bfb      	ldrb	r3, [r7, #15]
 80192fa:	2b17      	cmp	r3, #23
 80192fc:	d005      	beq.n	801930a <send+0x76>
 80192fe:	7bfb      	ldrb	r3, [r7, #15]
 8019300:	2b1c      	cmp	r3, #28
 8019302:	d002      	beq.n	801930a <send+0x76>
 8019304:	f06f 0306 	mvn.w	r3, #6
 8019308:	e0b5      	b.n	8019476 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 801930a:	4b5d      	ldr	r3, [pc, #372]	; (8019480 <send+0x1ec>)
 801930c:	881b      	ldrh	r3, [r3, #0]
 801930e:	461a      	mov	r2, r3
 8019310:	79fb      	ldrb	r3, [r7, #7]
 8019312:	fa42 f303 	asr.w	r3, r2, r3
 8019316:	f003 0301 	and.w	r3, r3, #1
 801931a:	2b00      	cmp	r3, #0
 801931c:	d039      	beq.n	8019392 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 801931e:	79fb      	ldrb	r3, [r7, #7]
 8019320:	009b      	lsls	r3, r3, #2
 8019322:	3301      	adds	r3, #1
 8019324:	00db      	lsls	r3, r3, #3
 8019326:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801932a:	4618      	mov	r0, r3
 801932c:	f7ff f994 	bl	8018658 <WIZCHIP_READ>
 8019330:	4603      	mov	r3, r0
 8019332:	f003 031f 	and.w	r3, r3, #31
 8019336:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8019338:	7bfb      	ldrb	r3, [r7, #15]
 801933a:	f003 0310 	and.w	r3, r3, #16
 801933e:	2b00      	cmp	r3, #0
 8019340:	d019      	beq.n	8019376 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019342:	79fb      	ldrb	r3, [r7, #7]
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	3301      	adds	r3, #1
 8019348:	00db      	lsls	r3, r3, #3
 801934a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801934e:	2110      	movs	r1, #16
 8019350:	4618      	mov	r0, r3
 8019352:	f7ff f9cd 	bl	80186f0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8019356:	79fb      	ldrb	r3, [r7, #7]
 8019358:	2201      	movs	r2, #1
 801935a:	fa02 f303 	lsl.w	r3, r2, r3
 801935e:	b21b      	sxth	r3, r3
 8019360:	43db      	mvns	r3, r3
 8019362:	b21a      	sxth	r2, r3
 8019364:	4b46      	ldr	r3, [pc, #280]	; (8019480 <send+0x1ec>)
 8019366:	881b      	ldrh	r3, [r3, #0]
 8019368:	b21b      	sxth	r3, r3
 801936a:	4013      	ands	r3, r2
 801936c:	b21b      	sxth	r3, r3
 801936e:	b29a      	uxth	r2, r3
 8019370:	4b43      	ldr	r3, [pc, #268]	; (8019480 <send+0x1ec>)
 8019372:	801a      	strh	r2, [r3, #0]
 8019374:	e00d      	b.n	8019392 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8019376:	7bfb      	ldrb	r3, [r7, #15]
 8019378:	f003 0308 	and.w	r3, r3, #8
 801937c:	2b00      	cmp	r3, #0
 801937e:	d006      	beq.n	801938e <send+0xfa>
      {
         close(sn);
 8019380:	79fb      	ldrb	r3, [r7, #7]
 8019382:	4618      	mov	r0, r3
 8019384:	f7ff fd6c 	bl	8018e60 <close>
         return SOCKERR_TIMEOUT;
 8019388:	f06f 030c 	mvn.w	r3, #12
 801938c:	e073      	b.n	8019476 <send+0x1e2>
      }
      else return SOCK_BUSY;
 801938e:	2300      	movs	r3, #0
 8019390:	e071      	b.n	8019476 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8019392:	79fb      	ldrb	r3, [r7, #7]
 8019394:	009b      	lsls	r3, r3, #2
 8019396:	3301      	adds	r3, #1
 8019398:	00db      	lsls	r3, r3, #3
 801939a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801939e:	4618      	mov	r0, r3
 80193a0:	f7ff f95a 	bl	8018658 <WIZCHIP_READ>
 80193a4:	4603      	mov	r3, r0
 80193a6:	b29b      	uxth	r3, r3
 80193a8:	029b      	lsls	r3, r3, #10
 80193aa:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80193ac:	88ba      	ldrh	r2, [r7, #4]
 80193ae:	89bb      	ldrh	r3, [r7, #12]
 80193b0:	429a      	cmp	r2, r3
 80193b2:	d901      	bls.n	80193b8 <send+0x124>
 80193b4:	89bb      	ldrh	r3, [r7, #12]
 80193b6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80193b8:	79fb      	ldrb	r3, [r7, #7]
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7ff faa6 	bl	801890c <getSn_TX_FSR>
 80193c0:	4603      	mov	r3, r0
 80193c2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80193c4:	79fb      	ldrb	r3, [r7, #7]
 80193c6:	009b      	lsls	r3, r3, #2
 80193c8:	3301      	adds	r3, #1
 80193ca:	00db      	lsls	r3, r3, #3
 80193cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80193d0:	4618      	mov	r0, r3
 80193d2:	f7ff f941 	bl	8018658 <WIZCHIP_READ>
 80193d6:	4603      	mov	r3, r0
 80193d8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80193da:	7bfb      	ldrb	r3, [r7, #15]
 80193dc:	2b17      	cmp	r3, #23
 80193de:	d009      	beq.n	80193f4 <send+0x160>
 80193e0:	7bfb      	ldrb	r3, [r7, #15]
 80193e2:	2b1c      	cmp	r3, #28
 80193e4:	d006      	beq.n	80193f4 <send+0x160>
      {
         close(sn);
 80193e6:	79fb      	ldrb	r3, [r7, #7]
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7ff fd39 	bl	8018e60 <close>
         return SOCKERR_SOCKSTATUS;
 80193ee:	f06f 0306 	mvn.w	r3, #6
 80193f2:	e040      	b.n	8019476 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80193f4:	4b23      	ldr	r3, [pc, #140]	; (8019484 <send+0x1f0>)
 80193f6:	881b      	ldrh	r3, [r3, #0]
 80193f8:	461a      	mov	r2, r3
 80193fa:	79fb      	ldrb	r3, [r7, #7]
 80193fc:	fa42 f303 	asr.w	r3, r2, r3
 8019400:	f003 0301 	and.w	r3, r3, #1
 8019404:	2b00      	cmp	r3, #0
 8019406:	d005      	beq.n	8019414 <send+0x180>
 8019408:	88ba      	ldrh	r2, [r7, #4]
 801940a:	89bb      	ldrh	r3, [r7, #12]
 801940c:	429a      	cmp	r2, r3
 801940e:	d901      	bls.n	8019414 <send+0x180>
 8019410:	2300      	movs	r3, #0
 8019412:	e030      	b.n	8019476 <send+0x1e2>
      if(len <= freesize) break;
 8019414:	88ba      	ldrh	r2, [r7, #4]
 8019416:	89bb      	ldrh	r3, [r7, #12]
 8019418:	429a      	cmp	r2, r3
 801941a:	d900      	bls.n	801941e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 801941c:	e7cc      	b.n	80193b8 <send+0x124>
      if(len <= freesize) break;
 801941e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8019420:	88ba      	ldrh	r2, [r7, #4]
 8019422:	79fb      	ldrb	r3, [r7, #7]
 8019424:	6839      	ldr	r1, [r7, #0]
 8019426:	4618      	mov	r0, r3
 8019428:	f7ff fb06 	bl	8018a38 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801942c:	79fb      	ldrb	r3, [r7, #7]
 801942e:	009b      	lsls	r3, r3, #2
 8019430:	3301      	adds	r3, #1
 8019432:	00db      	lsls	r3, r3, #3
 8019434:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019438:	2120      	movs	r1, #32
 801943a:	4618      	mov	r0, r3
 801943c:	f7ff f958 	bl	80186f0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8019440:	bf00      	nop
 8019442:	79fb      	ldrb	r3, [r7, #7]
 8019444:	009b      	lsls	r3, r3, #2
 8019446:	3301      	adds	r3, #1
 8019448:	00db      	lsls	r3, r3, #3
 801944a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801944e:	4618      	mov	r0, r3
 8019450:	f7ff f902 	bl	8018658 <WIZCHIP_READ>
 8019454:	4603      	mov	r3, r0
 8019456:	2b00      	cmp	r3, #0
 8019458:	d1f3      	bne.n	8019442 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 801945a:	79fb      	ldrb	r3, [r7, #7]
 801945c:	2201      	movs	r2, #1
 801945e:	fa02 f303 	lsl.w	r3, r2, r3
 8019462:	b21a      	sxth	r2, r3
 8019464:	4b06      	ldr	r3, [pc, #24]	; (8019480 <send+0x1ec>)
 8019466:	881b      	ldrh	r3, [r3, #0]
 8019468:	b21b      	sxth	r3, r3
 801946a:	4313      	orrs	r3, r2
 801946c:	b21b      	sxth	r3, r3
 801946e:	b29a      	uxth	r2, r3
 8019470:	4b03      	ldr	r3, [pc, #12]	; (8019480 <send+0x1ec>)
 8019472:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019474:	88bb      	ldrh	r3, [r7, #4]
}
 8019476:	4618      	mov	r0, r3
 8019478:	3710      	adds	r7, #16
 801947a:	46bd      	mov	sp, r7
 801947c:	bd80      	pop	{r7, pc}
 801947e:	bf00      	nop
 8019480:	20000966 	.word	0x20000966
 8019484:	20000964 	.word	0x20000964

08019488 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019488:	b590      	push	{r4, r7, lr}
 801948a:	b085      	sub	sp, #20
 801948c:	af00      	add	r7, sp, #0
 801948e:	4603      	mov	r3, r0
 8019490:	6039      	str	r1, [r7, #0]
 8019492:	71fb      	strb	r3, [r7, #7]
 8019494:	4613      	mov	r3, r2
 8019496:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8019498:	2300      	movs	r3, #0
 801949a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 801949c:	2300      	movs	r3, #0
 801949e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80194a0:	79fb      	ldrb	r3, [r7, #7]
 80194a2:	2b08      	cmp	r3, #8
 80194a4:	d902      	bls.n	80194ac <recv+0x24>
 80194a6:	f04f 33ff 	mov.w	r3, #4294967295
 80194aa:	e09c      	b.n	80195e6 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80194ac:	79fb      	ldrb	r3, [r7, #7]
 80194ae:	009b      	lsls	r3, r3, #2
 80194b0:	3301      	adds	r3, #1
 80194b2:	00db      	lsls	r3, r3, #3
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7ff f8cf 	bl	8018658 <WIZCHIP_READ>
 80194ba:	4603      	mov	r3, r0
 80194bc:	f003 030f 	and.w	r3, r3, #15
 80194c0:	2b01      	cmp	r3, #1
 80194c2:	d002      	beq.n	80194ca <recv+0x42>
 80194c4:	f06f 0304 	mvn.w	r3, #4
 80194c8:	e08d      	b.n	80195e6 <recv+0x15e>
   CHECK_SOCKDATA();
 80194ca:	88bb      	ldrh	r3, [r7, #4]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d102      	bne.n	80194d6 <recv+0x4e>
 80194d0:	f06f 030d 	mvn.w	r3, #13
 80194d4:	e087      	b.n	80195e6 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80194d6:	79fb      	ldrb	r3, [r7, #7]
 80194d8:	009b      	lsls	r3, r3, #2
 80194da:	3301      	adds	r3, #1
 80194dc:	00db      	lsls	r3, r3, #3
 80194de:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7ff f8b8 	bl	8018658 <WIZCHIP_READ>
 80194e8:	4603      	mov	r3, r0
 80194ea:	b29b      	uxth	r3, r3
 80194ec:	029b      	lsls	r3, r3, #10
 80194ee:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80194f0:	89ba      	ldrh	r2, [r7, #12]
 80194f2:	88bb      	ldrh	r3, [r7, #4]
 80194f4:	429a      	cmp	r2, r3
 80194f6:	d201      	bcs.n	80194fc <recv+0x74>
 80194f8:	89bb      	ldrh	r3, [r7, #12]
 80194fa:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80194fc:	79fb      	ldrb	r3, [r7, #7]
 80194fe:	4618      	mov	r0, r3
 8019500:	f7ff fa4f 	bl	80189a2 <getSn_RX_RSR>
 8019504:	4603      	mov	r3, r0
 8019506:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8019508:	79fb      	ldrb	r3, [r7, #7]
 801950a:	009b      	lsls	r3, r3, #2
 801950c:	3301      	adds	r3, #1
 801950e:	00db      	lsls	r3, r3, #3
 8019510:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019514:	4618      	mov	r0, r3
 8019516:	f7ff f89f 	bl	8018658 <WIZCHIP_READ>
 801951a:	4603      	mov	r3, r0
 801951c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 801951e:	7bfb      	ldrb	r3, [r7, #15]
 8019520:	2b17      	cmp	r3, #23
 8019522:	d026      	beq.n	8019572 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8019524:	7bfb      	ldrb	r3, [r7, #15]
 8019526:	2b1c      	cmp	r3, #28
 8019528:	d11c      	bne.n	8019564 <recv+0xdc>
            {
               if(recvsize != 0) break;
 801952a:	89bb      	ldrh	r3, [r7, #12]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d133      	bne.n	8019598 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8019530:	79fb      	ldrb	r3, [r7, #7]
 8019532:	4618      	mov	r0, r3
 8019534:	f7ff f9ea 	bl	801890c <getSn_TX_FSR>
 8019538:	4603      	mov	r3, r0
 801953a:	461c      	mov	r4, r3
 801953c:	79fb      	ldrb	r3, [r7, #7]
 801953e:	009b      	lsls	r3, r3, #2
 8019540:	3301      	adds	r3, #1
 8019542:	00db      	lsls	r3, r3, #3
 8019544:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019548:	4618      	mov	r0, r3
 801954a:	f7ff f885 	bl	8018658 <WIZCHIP_READ>
 801954e:	4603      	mov	r3, r0
 8019550:	029b      	lsls	r3, r3, #10
 8019552:	429c      	cmp	r4, r3
 8019554:	d10d      	bne.n	8019572 <recv+0xea>
               {
                  close(sn);
 8019556:	79fb      	ldrb	r3, [r7, #7]
 8019558:	4618      	mov	r0, r3
 801955a:	f7ff fc81 	bl	8018e60 <close>
                  return SOCKERR_SOCKSTATUS;
 801955e:	f06f 0306 	mvn.w	r3, #6
 8019562:	e040      	b.n	80195e6 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8019564:	79fb      	ldrb	r3, [r7, #7]
 8019566:	4618      	mov	r0, r3
 8019568:	f7ff fc7a 	bl	8018e60 <close>
               return SOCKERR_SOCKSTATUS;
 801956c:	f06f 0306 	mvn.w	r3, #6
 8019570:	e039      	b.n	80195e6 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8019572:	4b1f      	ldr	r3, [pc, #124]	; (80195f0 <recv+0x168>)
 8019574:	881b      	ldrh	r3, [r3, #0]
 8019576:	461a      	mov	r2, r3
 8019578:	79fb      	ldrb	r3, [r7, #7]
 801957a:	fa42 f303 	asr.w	r3, r2, r3
 801957e:	f003 0301 	and.w	r3, r3, #1
 8019582:	2b00      	cmp	r3, #0
 8019584:	d004      	beq.n	8019590 <recv+0x108>
 8019586:	89bb      	ldrh	r3, [r7, #12]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d101      	bne.n	8019590 <recv+0x108>
 801958c:	2300      	movs	r3, #0
 801958e:	e02a      	b.n	80195e6 <recv+0x15e>
         if(recvsize != 0) break;
 8019590:	89bb      	ldrh	r3, [r7, #12]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d102      	bne.n	801959c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8019596:	e7b1      	b.n	80194fc <recv+0x74>
               if(recvsize != 0) break;
 8019598:	bf00      	nop
 801959a:	e000      	b.n	801959e <recv+0x116>
         if(recvsize != 0) break;
 801959c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 801959e:	89ba      	ldrh	r2, [r7, #12]
 80195a0:	88bb      	ldrh	r3, [r7, #4]
 80195a2:	429a      	cmp	r2, r3
 80195a4:	d201      	bcs.n	80195aa <recv+0x122>
 80195a6:	89bb      	ldrh	r3, [r7, #12]
 80195a8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80195aa:	88ba      	ldrh	r2, [r7, #4]
 80195ac:	79fb      	ldrb	r3, [r7, #7]
 80195ae:	6839      	ldr	r1, [r7, #0]
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7ff fa9d 	bl	8018af0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80195b6:	79fb      	ldrb	r3, [r7, #7]
 80195b8:	009b      	lsls	r3, r3, #2
 80195ba:	3301      	adds	r3, #1
 80195bc:	00db      	lsls	r3, r3, #3
 80195be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80195c2:	2140      	movs	r1, #64	; 0x40
 80195c4:	4618      	mov	r0, r3
 80195c6:	f7ff f893 	bl	80186f0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80195ca:	bf00      	nop
 80195cc:	79fb      	ldrb	r3, [r7, #7]
 80195ce:	009b      	lsls	r3, r3, #2
 80195d0:	3301      	adds	r3, #1
 80195d2:	00db      	lsls	r3, r3, #3
 80195d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80195d8:	4618      	mov	r0, r3
 80195da:	f7ff f83d 	bl	8018658 <WIZCHIP_READ>
 80195de:	4603      	mov	r3, r0
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d1f3      	bne.n	80195cc <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80195e4:	88bb      	ldrh	r3, [r7, #4]
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	3714      	adds	r7, #20
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd90      	pop	{r4, r7, pc}
 80195ee:	bf00      	nop
 80195f0:	20000964 	.word	0x20000964

080195f4 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b086      	sub	sp, #24
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	60b9      	str	r1, [r7, #8]
 80195fc:	607b      	str	r3, [r7, #4]
 80195fe:	4603      	mov	r3, r0
 8019600:	73fb      	strb	r3, [r7, #15]
 8019602:	4613      	mov	r3, r2
 8019604:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8019606:	2300      	movs	r3, #0
 8019608:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 801960a:	2300      	movs	r3, #0
 801960c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 801960e:	7bfb      	ldrb	r3, [r7, #15]
 8019610:	2b08      	cmp	r3, #8
 8019612:	d902      	bls.n	801961a <sendto+0x26>
 8019614:	f04f 33ff 	mov.w	r3, #4294967295
 8019618:	e11b      	b.n	8019852 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 801961a:	7bfb      	ldrb	r3, [r7, #15]
 801961c:	009b      	lsls	r3, r3, #2
 801961e:	3301      	adds	r3, #1
 8019620:	00db      	lsls	r3, r3, #3
 8019622:	4618      	mov	r0, r3
 8019624:	f7ff f818 	bl	8018658 <WIZCHIP_READ>
 8019628:	4603      	mov	r3, r0
 801962a:	f003 030f 	and.w	r3, r3, #15
 801962e:	3b02      	subs	r3, #2
 8019630:	2b02      	cmp	r3, #2
 8019632:	d902      	bls.n	801963a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019634:	f06f 0304 	mvn.w	r3, #4
 8019638:	e10b      	b.n	8019852 <sendto+0x25e>
         break;
 801963a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 801963c:	89bb      	ldrh	r3, [r7, #12]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d102      	bne.n	8019648 <sendto+0x54>
 8019642:	f06f 030d 	mvn.w	r3, #13
 8019646:	e104      	b.n	8019852 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	781b      	ldrb	r3, [r3, #0]
 801964c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801964e:	693b      	ldr	r3, [r7, #16]
 8019650:	021b      	lsls	r3, r3, #8
 8019652:	687a      	ldr	r2, [r7, #4]
 8019654:	3201      	adds	r2, #1
 8019656:	7812      	ldrb	r2, [r2, #0]
 8019658:	4413      	add	r3, r2
 801965a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801965c:	693b      	ldr	r3, [r7, #16]
 801965e:	021b      	lsls	r3, r3, #8
 8019660:	687a      	ldr	r2, [r7, #4]
 8019662:	3202      	adds	r2, #2
 8019664:	7812      	ldrb	r2, [r2, #0]
 8019666:	4413      	add	r3, r2
 8019668:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801966a:	693b      	ldr	r3, [r7, #16]
 801966c:	021b      	lsls	r3, r3, #8
 801966e:	687a      	ldr	r2, [r7, #4]
 8019670:	3203      	adds	r2, #3
 8019672:	7812      	ldrb	r2, [r2, #0]
 8019674:	4413      	add	r3, r2
 8019676:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8019678:	693b      	ldr	r3, [r7, #16]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d10e      	bne.n	801969c <sendto+0xa8>
 801967e:	7bfb      	ldrb	r3, [r7, #15]
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	3301      	adds	r3, #1
 8019684:	00db      	lsls	r3, r3, #3
 8019686:	4618      	mov	r0, r3
 8019688:	f7fe ffe6 	bl	8018658 <WIZCHIP_READ>
 801968c:	4603      	mov	r3, r0
 801968e:	f003 0304 	and.w	r3, r3, #4
 8019692:	2b04      	cmp	r3, #4
 8019694:	d002      	beq.n	801969c <sendto+0xa8>
 8019696:	f06f 030b 	mvn.w	r3, #11
 801969a:	e0da      	b.n	8019852 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 801969c:	8c3b      	ldrh	r3, [r7, #32]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d10e      	bne.n	80196c0 <sendto+0xcc>
 80196a2:	7bfb      	ldrb	r3, [r7, #15]
 80196a4:	009b      	lsls	r3, r3, #2
 80196a6:	3301      	adds	r3, #1
 80196a8:	00db      	lsls	r3, r3, #3
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7fe ffd4 	bl	8018658 <WIZCHIP_READ>
 80196b0:	4603      	mov	r3, r0
 80196b2:	f003 0304 	and.w	r3, r3, #4
 80196b6:	2b04      	cmp	r3, #4
 80196b8:	d002      	beq.n	80196c0 <sendto+0xcc>
 80196ba:	f06f 030a 	mvn.w	r3, #10
 80196be:	e0c8      	b.n	8019852 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80196c0:	7bfb      	ldrb	r3, [r7, #15]
 80196c2:	009b      	lsls	r3, r3, #2
 80196c4:	3301      	adds	r3, #1
 80196c6:	00db      	lsls	r3, r3, #3
 80196c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80196cc:	4618      	mov	r0, r3
 80196ce:	f7fe ffc3 	bl	8018658 <WIZCHIP_READ>
 80196d2:	4603      	mov	r3, r0
 80196d4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80196d6:	7dfb      	ldrb	r3, [r7, #23]
 80196d8:	2b42      	cmp	r3, #66	; 0x42
 80196da:	d008      	beq.n	80196ee <sendto+0xfa>
 80196dc:	7dfb      	ldrb	r3, [r7, #23]
 80196de:	2b22      	cmp	r3, #34	; 0x22
 80196e0:	d005      	beq.n	80196ee <sendto+0xfa>
 80196e2:	7dfb      	ldrb	r3, [r7, #23]
 80196e4:	2b32      	cmp	r3, #50	; 0x32
 80196e6:	d002      	beq.n	80196ee <sendto+0xfa>
 80196e8:	f06f 0306 	mvn.w	r3, #6
 80196ec:	e0b1      	b.n	8019852 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80196ee:	7bfb      	ldrb	r3, [r7, #15]
 80196f0:	009b      	lsls	r3, r3, #2
 80196f2:	3301      	adds	r3, #1
 80196f4:	00db      	lsls	r3, r3, #3
 80196f6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80196fa:	2204      	movs	r2, #4
 80196fc:	6879      	ldr	r1, [r7, #4]
 80196fe:	4618      	mov	r0, r3
 8019700:	f7ff f8a4 	bl	801884c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8019704:	7bfb      	ldrb	r3, [r7, #15]
 8019706:	009b      	lsls	r3, r3, #2
 8019708:	3301      	adds	r3, #1
 801970a:	00db      	lsls	r3, r3, #3
 801970c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019710:	461a      	mov	r2, r3
 8019712:	8c3b      	ldrh	r3, [r7, #32]
 8019714:	0a1b      	lsrs	r3, r3, #8
 8019716:	b29b      	uxth	r3, r3
 8019718:	b2db      	uxtb	r3, r3
 801971a:	4619      	mov	r1, r3
 801971c:	4610      	mov	r0, r2
 801971e:	f7fe ffe7 	bl	80186f0 <WIZCHIP_WRITE>
 8019722:	7bfb      	ldrb	r3, [r7, #15]
 8019724:	009b      	lsls	r3, r3, #2
 8019726:	3301      	adds	r3, #1
 8019728:	00db      	lsls	r3, r3, #3
 801972a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801972e:	461a      	mov	r2, r3
 8019730:	8c3b      	ldrh	r3, [r7, #32]
 8019732:	b2db      	uxtb	r3, r3
 8019734:	4619      	mov	r1, r3
 8019736:	4610      	mov	r0, r2
 8019738:	f7fe ffda 	bl	80186f0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 801973c:	7bfb      	ldrb	r3, [r7, #15]
 801973e:	009b      	lsls	r3, r3, #2
 8019740:	3301      	adds	r3, #1
 8019742:	00db      	lsls	r3, r3, #3
 8019744:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019748:	4618      	mov	r0, r3
 801974a:	f7fe ff85 	bl	8018658 <WIZCHIP_READ>
 801974e:	4603      	mov	r3, r0
 8019750:	b29b      	uxth	r3, r3
 8019752:	029b      	lsls	r3, r3, #10
 8019754:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8019756:	89ba      	ldrh	r2, [r7, #12]
 8019758:	8abb      	ldrh	r3, [r7, #20]
 801975a:	429a      	cmp	r2, r3
 801975c:	d901      	bls.n	8019762 <sendto+0x16e>
 801975e:	8abb      	ldrh	r3, [r7, #20]
 8019760:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8019762:	7bfb      	ldrb	r3, [r7, #15]
 8019764:	4618      	mov	r0, r3
 8019766:	f7ff f8d1 	bl	801890c <getSn_TX_FSR>
 801976a:	4603      	mov	r3, r0
 801976c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801976e:	7bfb      	ldrb	r3, [r7, #15]
 8019770:	009b      	lsls	r3, r3, #2
 8019772:	3301      	adds	r3, #1
 8019774:	00db      	lsls	r3, r3, #3
 8019776:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801977a:	4618      	mov	r0, r3
 801977c:	f7fe ff6c 	bl	8018658 <WIZCHIP_READ>
 8019780:	4603      	mov	r3, r0
 8019782:	2b00      	cmp	r3, #0
 8019784:	d102      	bne.n	801978c <sendto+0x198>
 8019786:	f06f 0303 	mvn.w	r3, #3
 801978a:	e062      	b.n	8019852 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801978c:	4b33      	ldr	r3, [pc, #204]	; (801985c <sendto+0x268>)
 801978e:	881b      	ldrh	r3, [r3, #0]
 8019790:	461a      	mov	r2, r3
 8019792:	7bfb      	ldrb	r3, [r7, #15]
 8019794:	fa42 f303 	asr.w	r3, r2, r3
 8019798:	f003 0301 	and.w	r3, r3, #1
 801979c:	2b00      	cmp	r3, #0
 801979e:	d005      	beq.n	80197ac <sendto+0x1b8>
 80197a0:	89ba      	ldrh	r2, [r7, #12]
 80197a2:	8abb      	ldrh	r3, [r7, #20]
 80197a4:	429a      	cmp	r2, r3
 80197a6:	d901      	bls.n	80197ac <sendto+0x1b8>
 80197a8:	2300      	movs	r3, #0
 80197aa:	e052      	b.n	8019852 <sendto+0x25e>
      if(len <= freesize) break;
 80197ac:	89ba      	ldrh	r2, [r7, #12]
 80197ae:	8abb      	ldrh	r3, [r7, #20]
 80197b0:	429a      	cmp	r2, r3
 80197b2:	d900      	bls.n	80197b6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80197b4:	e7d5      	b.n	8019762 <sendto+0x16e>
      if(len <= freesize) break;
 80197b6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80197b8:	89ba      	ldrh	r2, [r7, #12]
 80197ba:	7bfb      	ldrb	r3, [r7, #15]
 80197bc:	68b9      	ldr	r1, [r7, #8]
 80197be:	4618      	mov	r0, r3
 80197c0:	f7ff f93a 	bl	8018a38 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80197c4:	7bfb      	ldrb	r3, [r7, #15]
 80197c6:	009b      	lsls	r3, r3, #2
 80197c8:	3301      	adds	r3, #1
 80197ca:	00db      	lsls	r3, r3, #3
 80197cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80197d0:	2120      	movs	r1, #32
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7fe ff8c 	bl	80186f0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80197d8:	bf00      	nop
 80197da:	7bfb      	ldrb	r3, [r7, #15]
 80197dc:	009b      	lsls	r3, r3, #2
 80197de:	3301      	adds	r3, #1
 80197e0:	00db      	lsls	r3, r3, #3
 80197e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80197e6:	4618      	mov	r0, r3
 80197e8:	f7fe ff36 	bl	8018658 <WIZCHIP_READ>
 80197ec:	4603      	mov	r3, r0
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d1f3      	bne.n	80197da <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80197f2:	7bfb      	ldrb	r3, [r7, #15]
 80197f4:	009b      	lsls	r3, r3, #2
 80197f6:	3301      	adds	r3, #1
 80197f8:	00db      	lsls	r3, r3, #3
 80197fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80197fe:	4618      	mov	r0, r3
 8019800:	f7fe ff2a 	bl	8018658 <WIZCHIP_READ>
 8019804:	4603      	mov	r3, r0
 8019806:	f003 031f 	and.w	r3, r3, #31
 801980a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 801980c:	7dfb      	ldrb	r3, [r7, #23]
 801980e:	f003 0310 	and.w	r3, r3, #16
 8019812:	2b00      	cmp	r3, #0
 8019814:	d00c      	beq.n	8019830 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019816:	7bfb      	ldrb	r3, [r7, #15]
 8019818:	009b      	lsls	r3, r3, #2
 801981a:	3301      	adds	r3, #1
 801981c:	00db      	lsls	r3, r3, #3
 801981e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019822:	2110      	movs	r1, #16
 8019824:	4618      	mov	r0, r3
 8019826:	f7fe ff63 	bl	80186f0 <WIZCHIP_WRITE>
         break;
 801982a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801982c:	89bb      	ldrh	r3, [r7, #12]
 801982e:	e010      	b.n	8019852 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8019830:	7dfb      	ldrb	r3, [r7, #23]
 8019832:	f003 0308 	and.w	r3, r3, #8
 8019836:	2b00      	cmp	r3, #0
 8019838:	d0db      	beq.n	80197f2 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 801983a:	7bfb      	ldrb	r3, [r7, #15]
 801983c:	009b      	lsls	r3, r3, #2
 801983e:	3301      	adds	r3, #1
 8019840:	00db      	lsls	r3, r3, #3
 8019842:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019846:	2108      	movs	r1, #8
 8019848:	4618      	mov	r0, r3
 801984a:	f7fe ff51 	bl	80186f0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 801984e:	f06f 030c 	mvn.w	r3, #12
}
 8019852:	4618      	mov	r0, r3
 8019854:	3718      	adds	r7, #24
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
 801985a:	bf00      	nop
 801985c:	20000964 	.word	0x20000964

08019860 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b088      	sub	sp, #32
 8019864:	af00      	add	r7, sp, #0
 8019866:	60b9      	str	r1, [r7, #8]
 8019868:	607b      	str	r3, [r7, #4]
 801986a:	4603      	mov	r3, r0
 801986c:	73fb      	strb	r3, [r7, #15]
 801986e:	4613      	mov	r3, r2
 8019870:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8019872:	2300      	movs	r3, #0
 8019874:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019876:	7bfb      	ldrb	r3, [r7, #15]
 8019878:	2b08      	cmp	r3, #8
 801987a:	d902      	bls.n	8019882 <recvfrom+0x22>
 801987c:	f04f 33ff 	mov.w	r3, #4294967295
 8019880:	e1d4      	b.n	8019c2c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8019882:	7bfb      	ldrb	r3, [r7, #15]
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	3301      	adds	r3, #1
 8019888:	00db      	lsls	r3, r3, #3
 801988a:	4618      	mov	r0, r3
 801988c:	f7fe fee4 	bl	8018658 <WIZCHIP_READ>
 8019890:	4603      	mov	r3, r0
 8019892:	777b      	strb	r3, [r7, #29]
 8019894:	7f7b      	ldrb	r3, [r7, #29]
 8019896:	f003 030f 	and.w	r3, r3, #15
 801989a:	3b02      	subs	r3, #2
 801989c:	2b02      	cmp	r3, #2
 801989e:	d902      	bls.n	80198a6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80198a0:	f06f 0304 	mvn.w	r3, #4
 80198a4:	e1c2      	b.n	8019c2c <recvfrom+0x3cc>
         break;
 80198a6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80198a8:	89bb      	ldrh	r3, [r7, #12]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d102      	bne.n	80198b4 <recvfrom+0x54>
 80198ae:	f06f 030d 	mvn.w	r3, #13
 80198b2:	e1bb      	b.n	8019c2c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80198b4:	7bfb      	ldrb	r3, [r7, #15]
 80198b6:	4a88      	ldr	r2, [pc, #544]	; (8019ad8 <recvfrom+0x278>)
 80198b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d128      	bne.n	8019912 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80198c0:	7bfb      	ldrb	r3, [r7, #15]
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7ff f86d 	bl	80189a2 <getSn_RX_RSR>
 80198c8:	4603      	mov	r3, r0
 80198ca:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80198cc:	7bfb      	ldrb	r3, [r7, #15]
 80198ce:	009b      	lsls	r3, r3, #2
 80198d0:	3301      	adds	r3, #1
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80198d8:	4618      	mov	r0, r3
 80198da:	f7fe febd 	bl	8018658 <WIZCHIP_READ>
 80198de:	4603      	mov	r3, r0
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d102      	bne.n	80198ea <recvfrom+0x8a>
 80198e4:	f06f 0303 	mvn.w	r3, #3
 80198e8:	e1a0      	b.n	8019c2c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80198ea:	4b7c      	ldr	r3, [pc, #496]	; (8019adc <recvfrom+0x27c>)
 80198ec:	881b      	ldrh	r3, [r3, #0]
 80198ee:	461a      	mov	r2, r3
 80198f0:	7bfb      	ldrb	r3, [r7, #15]
 80198f2:	fa42 f303 	asr.w	r3, r2, r3
 80198f6:	f003 0301 	and.w	r3, r3, #1
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d004      	beq.n	8019908 <recvfrom+0xa8>
 80198fe:	8bfb      	ldrh	r3, [r7, #30]
 8019900:	2b00      	cmp	r3, #0
 8019902:	d101      	bne.n	8019908 <recvfrom+0xa8>
 8019904:	2300      	movs	r3, #0
 8019906:	e191      	b.n	8019c2c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8019908:	8bfb      	ldrh	r3, [r7, #30]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d100      	bne.n	8019910 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 801990e:	e7d7      	b.n	80198c0 <recvfrom+0x60>
         if(pack_len != 0) break;
 8019910:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8019912:	7f7b      	ldrb	r3, [r7, #29]
 8019914:	f003 0307 	and.w	r3, r3, #7
 8019918:	2b04      	cmp	r3, #4
 801991a:	d079      	beq.n	8019a10 <recvfrom+0x1b0>
 801991c:	2b04      	cmp	r3, #4
 801991e:	f300 8142 	bgt.w	8019ba6 <recvfrom+0x346>
 8019922:	2b02      	cmp	r3, #2
 8019924:	d003      	beq.n	801992e <recvfrom+0xce>
 8019926:	2b03      	cmp	r3, #3
 8019928:	f000 80dc 	beq.w	8019ae4 <recvfrom+0x284>
 801992c:	e13b      	b.n	8019ba6 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 801992e:	7bfb      	ldrb	r3, [r7, #15]
 8019930:	4a69      	ldr	r2, [pc, #420]	; (8019ad8 <recvfrom+0x278>)
 8019932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d152      	bne.n	80199e0 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 801993a:	f107 0114 	add.w	r1, r7, #20
 801993e:	7bfb      	ldrb	r3, [r7, #15]
 8019940:	2208      	movs	r2, #8
 8019942:	4618      	mov	r0, r3
 8019944:	f7ff f8d4 	bl	8018af0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019948:	7bfb      	ldrb	r3, [r7, #15]
 801994a:	009b      	lsls	r3, r3, #2
 801994c:	3301      	adds	r3, #1
 801994e:	00db      	lsls	r3, r3, #3
 8019950:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019954:	2140      	movs	r1, #64	; 0x40
 8019956:	4618      	mov	r0, r3
 8019958:	f7fe feca 	bl	80186f0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801995c:	bf00      	nop
 801995e:	7bfb      	ldrb	r3, [r7, #15]
 8019960:	009b      	lsls	r3, r3, #2
 8019962:	3301      	adds	r3, #1
 8019964:	00db      	lsls	r3, r3, #3
 8019966:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801996a:	4618      	mov	r0, r3
 801996c:	f7fe fe74 	bl	8018658 <WIZCHIP_READ>
 8019970:	4603      	mov	r3, r0
 8019972:	2b00      	cmp	r3, #0
 8019974:	d1f3      	bne.n	801995e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019976:	7d3a      	ldrb	r2, [r7, #20]
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	3301      	adds	r3, #1
 8019980:	7d7a      	ldrb	r2, [r7, #21]
 8019982:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	3302      	adds	r3, #2
 8019988:	7dba      	ldrb	r2, [r7, #22]
 801998a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	3303      	adds	r3, #3
 8019990:	7dfa      	ldrb	r2, [r7, #23]
 8019992:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8019994:	7e3b      	ldrb	r3, [r7, #24]
 8019996:	b29a      	uxth	r2, r3
 8019998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801999a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 801999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801999e:	881b      	ldrh	r3, [r3, #0]
 80199a0:	021b      	lsls	r3, r3, #8
 80199a2:	b29a      	uxth	r2, r3
 80199a4:	7e7b      	ldrb	r3, [r7, #25]
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	4413      	add	r3, r2
 80199aa:	b29a      	uxth	r2, r3
 80199ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ae:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80199b0:	7eba      	ldrb	r2, [r7, #26]
 80199b2:	7bfb      	ldrb	r3, [r7, #15]
 80199b4:	b291      	uxth	r1, r2
 80199b6:	4a48      	ldr	r2, [pc, #288]	; (8019ad8 <recvfrom+0x278>)
 80199b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80199bc:	7bfb      	ldrb	r3, [r7, #15]
 80199be:	4a46      	ldr	r2, [pc, #280]	; (8019ad8 <recvfrom+0x278>)
 80199c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199c4:	021b      	lsls	r3, r3, #8
 80199c6:	b299      	uxth	r1, r3
 80199c8:	7efb      	ldrb	r3, [r7, #27]
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	7bfb      	ldrb	r3, [r7, #15]
 80199ce:	440a      	add	r2, r1
 80199d0:	b291      	uxth	r1, r2
 80199d2:	4a41      	ldr	r2, [pc, #260]	; (8019ad8 <recvfrom+0x278>)
 80199d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80199d8:	7bfb      	ldrb	r3, [r7, #15]
 80199da:	4a41      	ldr	r2, [pc, #260]	; (8019ae0 <recvfrom+0x280>)
 80199dc:	2180      	movs	r1, #128	; 0x80
 80199de:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80199e0:	7bfb      	ldrb	r3, [r7, #15]
 80199e2:	4a3d      	ldr	r2, [pc, #244]	; (8019ad8 <recvfrom+0x278>)
 80199e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199e8:	89ba      	ldrh	r2, [r7, #12]
 80199ea:	429a      	cmp	r2, r3
 80199ec:	d202      	bcs.n	80199f4 <recvfrom+0x194>
 80199ee:	89bb      	ldrh	r3, [r7, #12]
 80199f0:	83fb      	strh	r3, [r7, #30]
 80199f2:	e004      	b.n	80199fe <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80199f4:	7bfb      	ldrb	r3, [r7, #15]
 80199f6:	4a38      	ldr	r2, [pc, #224]	; (8019ad8 <recvfrom+0x278>)
 80199f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199fc:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80199fe:	8bfb      	ldrh	r3, [r7, #30]
 8019a00:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019a02:	8bfa      	ldrh	r2, [r7, #30]
 8019a04:	7bfb      	ldrb	r3, [r7, #15]
 8019a06:	68b9      	ldr	r1, [r7, #8]
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f7ff f871 	bl	8018af0 <wiz_recv_data>
			break;
 8019a0e:	e0d6      	b.n	8019bbe <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8019a10:	7bfb      	ldrb	r3, [r7, #15]
 8019a12:	4a31      	ldr	r2, [pc, #196]	; (8019ad8 <recvfrom+0x278>)
 8019a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d146      	bne.n	8019aaa <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8019a1c:	f107 0114 	add.w	r1, r7, #20
 8019a20:	7bfb      	ldrb	r3, [r7, #15]
 8019a22:	2202      	movs	r2, #2
 8019a24:	4618      	mov	r0, r3
 8019a26:	f7ff f863 	bl	8018af0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019a2a:	7bfb      	ldrb	r3, [r7, #15]
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	3301      	adds	r3, #1
 8019a30:	00db      	lsls	r3, r3, #3
 8019a32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a36:	2140      	movs	r1, #64	; 0x40
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f7fe fe59 	bl	80186f0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019a3e:	bf00      	nop
 8019a40:	7bfb      	ldrb	r3, [r7, #15]
 8019a42:	009b      	lsls	r3, r3, #2
 8019a44:	3301      	adds	r3, #1
 8019a46:	00db      	lsls	r3, r3, #3
 8019a48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f7fe fe03 	bl	8018658 <WIZCHIP_READ>
 8019a52:	4603      	mov	r3, r0
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d1f3      	bne.n	8019a40 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019a58:	7d3a      	ldrb	r2, [r7, #20]
 8019a5a:	7bfb      	ldrb	r3, [r7, #15]
 8019a5c:	b291      	uxth	r1, r2
 8019a5e:	4a1e      	ldr	r2, [pc, #120]	; (8019ad8 <recvfrom+0x278>)
 8019a60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019a64:	7bfb      	ldrb	r3, [r7, #15]
 8019a66:	4a1c      	ldr	r2, [pc, #112]	; (8019ad8 <recvfrom+0x278>)
 8019a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a6c:	021b      	lsls	r3, r3, #8
 8019a6e:	b29a      	uxth	r2, r3
 8019a70:	7d7b      	ldrb	r3, [r7, #21]
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	4413      	add	r3, r2
 8019a76:	b29a      	uxth	r2, r3
 8019a78:	7bfb      	ldrb	r3, [r7, #15]
 8019a7a:	3a02      	subs	r2, #2
 8019a7c:	b291      	uxth	r1, r2
 8019a7e:	4a16      	ldr	r2, [pc, #88]	; (8019ad8 <recvfrom+0x278>)
 8019a80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8019a84:	7bfb      	ldrb	r3, [r7, #15]
 8019a86:	4a14      	ldr	r2, [pc, #80]	; (8019ad8 <recvfrom+0x278>)
 8019a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a8c:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8019a90:	4293      	cmp	r3, r2
 8019a92:	d906      	bls.n	8019aa2 <recvfrom+0x242>
   			{
   			   close(sn);
 8019a94:	7bfb      	ldrb	r3, [r7, #15]
 8019a96:	4618      	mov	r0, r3
 8019a98:	f7ff f9e2 	bl	8018e60 <close>
   			   return SOCKFATAL_PACKLEN;
 8019a9c:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8019aa0:	e0c4      	b.n	8019c2c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8019aa2:	7bfb      	ldrb	r3, [r7, #15]
 8019aa4:	4a0e      	ldr	r2, [pc, #56]	; (8019ae0 <recvfrom+0x280>)
 8019aa6:	2180      	movs	r1, #128	; 0x80
 8019aa8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019aaa:	7bfb      	ldrb	r3, [r7, #15]
 8019aac:	4a0a      	ldr	r2, [pc, #40]	; (8019ad8 <recvfrom+0x278>)
 8019aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ab2:	89ba      	ldrh	r2, [r7, #12]
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	d202      	bcs.n	8019abe <recvfrom+0x25e>
 8019ab8:	89bb      	ldrh	r3, [r7, #12]
 8019aba:	83fb      	strh	r3, [r7, #30]
 8019abc:	e004      	b.n	8019ac8 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8019abe:	7bfb      	ldrb	r3, [r7, #15]
 8019ac0:	4a05      	ldr	r2, [pc, #20]	; (8019ad8 <recvfrom+0x278>)
 8019ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ac6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8019ac8:	8bfa      	ldrh	r2, [r7, #30]
 8019aca:	7bfb      	ldrb	r3, [r7, #15]
 8019acc:	68b9      	ldr	r1, [r7, #8]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7ff f80e 	bl	8018af0 <wiz_recv_data>
		   break;
 8019ad4:	e073      	b.n	8019bbe <recvfrom+0x35e>
 8019ad6:	bf00      	nop
 8019ad8:	20000968 	.word	0x20000968
 8019adc:	20000964 	.word	0x20000964
 8019ae0:	20000978 	.word	0x20000978
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8019ae4:	7bfb      	ldrb	r3, [r7, #15]
 8019ae6:	4a53      	ldr	r2, [pc, #332]	; (8019c34 <recvfrom+0x3d4>)
 8019ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d144      	bne.n	8019b7a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8019af0:	f107 0114 	add.w	r1, r7, #20
 8019af4:	7bfb      	ldrb	r3, [r7, #15]
 8019af6:	2206      	movs	r2, #6
 8019af8:	4618      	mov	r0, r3
 8019afa:	f7fe fff9 	bl	8018af0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
 8019b00:	009b      	lsls	r3, r3, #2
 8019b02:	3301      	adds	r3, #1
 8019b04:	00db      	lsls	r3, r3, #3
 8019b06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019b0a:	2140      	movs	r1, #64	; 0x40
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	f7fe fdef 	bl	80186f0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019b12:	bf00      	nop
 8019b14:	7bfb      	ldrb	r3, [r7, #15]
 8019b16:	009b      	lsls	r3, r3, #2
 8019b18:	3301      	adds	r3, #1
 8019b1a:	00db      	lsls	r3, r3, #3
 8019b1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7fe fd99 	bl	8018658 <WIZCHIP_READ>
 8019b26:	4603      	mov	r3, r0
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d1f3      	bne.n	8019b14 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8019b2c:	7d3a      	ldrb	r2, [r7, #20]
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	3301      	adds	r3, #1
 8019b36:	7d7a      	ldrb	r2, [r7, #21]
 8019b38:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	3302      	adds	r3, #2
 8019b3e:	7dba      	ldrb	r2, [r7, #22]
 8019b40:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	3303      	adds	r3, #3
 8019b46:	7dfa      	ldrb	r2, [r7, #23]
 8019b48:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019b4a:	7e3a      	ldrb	r2, [r7, #24]
 8019b4c:	7bfb      	ldrb	r3, [r7, #15]
 8019b4e:	b291      	uxth	r1, r2
 8019b50:	4a38      	ldr	r2, [pc, #224]	; (8019c34 <recvfrom+0x3d4>)
 8019b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019b56:	7bfb      	ldrb	r3, [r7, #15]
 8019b58:	4a36      	ldr	r2, [pc, #216]	; (8019c34 <recvfrom+0x3d4>)
 8019b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b5e:	021b      	lsls	r3, r3, #8
 8019b60:	b299      	uxth	r1, r3
 8019b62:	7e7b      	ldrb	r3, [r7, #25]
 8019b64:	b29a      	uxth	r2, r3
 8019b66:	7bfb      	ldrb	r3, [r7, #15]
 8019b68:	440a      	add	r2, r1
 8019b6a:	b291      	uxth	r1, r2
 8019b6c:	4a31      	ldr	r2, [pc, #196]	; (8019c34 <recvfrom+0x3d4>)
 8019b6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8019b72:	7bfb      	ldrb	r3, [r7, #15]
 8019b74:	4a30      	ldr	r2, [pc, #192]	; (8019c38 <recvfrom+0x3d8>)
 8019b76:	2180      	movs	r1, #128	; 0x80
 8019b78:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019b7a:	7bfb      	ldrb	r3, [r7, #15]
 8019b7c:	4a2d      	ldr	r2, [pc, #180]	; (8019c34 <recvfrom+0x3d4>)
 8019b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b82:	89ba      	ldrh	r2, [r7, #12]
 8019b84:	429a      	cmp	r2, r3
 8019b86:	d202      	bcs.n	8019b8e <recvfrom+0x32e>
 8019b88:	89bb      	ldrh	r3, [r7, #12]
 8019b8a:	83fb      	strh	r3, [r7, #30]
 8019b8c:	e004      	b.n	8019b98 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8019b8e:	7bfb      	ldrb	r3, [r7, #15]
 8019b90:	4a28      	ldr	r2, [pc, #160]	; (8019c34 <recvfrom+0x3d4>)
 8019b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b96:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019b98:	8bfa      	ldrh	r2, [r7, #30]
 8019b9a:	7bfb      	ldrb	r3, [r7, #15]
 8019b9c:	68b9      	ldr	r1, [r7, #8]
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f7fe ffa6 	bl	8018af0 <wiz_recv_data>
			break;
 8019ba4:	e00b      	b.n	8019bbe <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019ba6:	8bfa      	ldrh	r2, [r7, #30]
 8019ba8:	7bfb      	ldrb	r3, [r7, #15]
 8019baa:	4611      	mov	r1, r2
 8019bac:	4618      	mov	r0, r3
 8019bae:	f7fe fffb 	bl	8018ba8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8019bb2:	7bfb      	ldrb	r3, [r7, #15]
 8019bb4:	491f      	ldr	r1, [pc, #124]	; (8019c34 <recvfrom+0x3d4>)
 8019bb6:	8bfa      	ldrh	r2, [r7, #30]
 8019bb8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019bbc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8019bbe:	7bfb      	ldrb	r3, [r7, #15]
 8019bc0:	009b      	lsls	r3, r3, #2
 8019bc2:	3301      	adds	r3, #1
 8019bc4:	00db      	lsls	r3, r3, #3
 8019bc6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019bca:	2140      	movs	r1, #64	; 0x40
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f7fe fd8f 	bl	80186f0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8019bd2:	bf00      	nop
 8019bd4:	7bfb      	ldrb	r3, [r7, #15]
 8019bd6:	009b      	lsls	r3, r3, #2
 8019bd8:	3301      	adds	r3, #1
 8019bda:	00db      	lsls	r3, r3, #3
 8019bdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019be0:	4618      	mov	r0, r3
 8019be2:	f7fe fd39 	bl	8018658 <WIZCHIP_READ>
 8019be6:	4603      	mov	r3, r0
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d1f3      	bne.n	8019bd4 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8019bec:	7bfb      	ldrb	r3, [r7, #15]
 8019bee:	4a11      	ldr	r2, [pc, #68]	; (8019c34 <recvfrom+0x3d4>)
 8019bf0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8019bf4:	7bfb      	ldrb	r3, [r7, #15]
 8019bf6:	8bfa      	ldrh	r2, [r7, #30]
 8019bf8:	1a8a      	subs	r2, r1, r2
 8019bfa:	b291      	uxth	r1, r2
 8019bfc:	4a0d      	ldr	r2, [pc, #52]	; (8019c34 <recvfrom+0x3d4>)
 8019bfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8019c02:	7bfb      	ldrb	r3, [r7, #15]
 8019c04:	4a0b      	ldr	r2, [pc, #44]	; (8019c34 <recvfrom+0x3d4>)
 8019c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d009      	beq.n	8019c22 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8019c0e:	7bfb      	ldrb	r3, [r7, #15]
 8019c10:	4a09      	ldr	r2, [pc, #36]	; (8019c38 <recvfrom+0x3d8>)
 8019c12:	5cd2      	ldrb	r2, [r2, r3]
 8019c14:	7bfb      	ldrb	r3, [r7, #15]
 8019c16:	f042 0201 	orr.w	r2, r2, #1
 8019c1a:	b2d1      	uxtb	r1, r2
 8019c1c:	4a06      	ldr	r2, [pc, #24]	; (8019c38 <recvfrom+0x3d8>)
 8019c1e:	54d1      	strb	r1, [r2, r3]
 8019c20:	e003      	b.n	8019c2a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8019c22:	7bfb      	ldrb	r3, [r7, #15]
 8019c24:	4a04      	ldr	r2, [pc, #16]	; (8019c38 <recvfrom+0x3d8>)
 8019c26:	2100      	movs	r1, #0
 8019c28:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019c2a:	8bfb      	ldrh	r3, [r7, #30]
}
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	3720      	adds	r7, #32
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}
 8019c34:	20000968 	.word	0x20000968
 8019c38:	20000978 	.word	0x20000978

08019c3c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019c3c:	b480      	push	{r7}
 8019c3e:	af00      	add	r7, sp, #0
 8019c40:	bf00      	nop
 8019c42:	46bd      	mov	sp, r7
 8019c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c48:	4770      	bx	lr

08019c4a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019c4a:	b480      	push	{r7}
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	bf00      	nop
 8019c50:	46bd      	mov	sp, r7
 8019c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c56:	4770      	bx	lr

08019c58 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019c58:	b480      	push	{r7}
 8019c5a:	af00      	add	r7, sp, #0
 8019c5c:	bf00      	nop
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c64:	4770      	bx	lr

08019c66 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019c66:	b480      	push	{r7}
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	bf00      	nop
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c72:	4770      	bx	lr

08019c74 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019c74:	b480      	push	{r7}
 8019c76:	b083      	sub	sp, #12
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	781b      	ldrb	r3, [r3, #0]
 8019c80:	b2db      	uxtb	r3, r3
 8019c82:	4618      	mov	r0, r3
 8019c84:	370c      	adds	r7, #12
 8019c86:	46bd      	mov	sp, r7
 8019c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8c:	4770      	bx	lr

08019c8e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8019c8e:	b480      	push	{r7}
 8019c90:	b083      	sub	sp, #12
 8019c92:	af00      	add	r7, sp, #0
 8019c94:	6078      	str	r0, [r7, #4]
 8019c96:	460b      	mov	r3, r1
 8019c98:	70fb      	strb	r3, [r7, #3]
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	78fa      	ldrb	r2, [r7, #3]
 8019c9e:	701a      	strb	r2, [r3, #0]
 8019ca0:	bf00      	nop
 8019ca2:	370c      	adds	r7, #12
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019caa:	4770      	bx	lr

08019cac <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019cac:	b480      	push	{r7}
 8019cae:	af00      	add	r7, sp, #0
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cba:	4770      	bx	lr

08019cbc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019cbc:	b480      	push	{r7}
 8019cbe:	b083      	sub	sp, #12
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	71fb      	strb	r3, [r7, #7]
 8019cc6:	bf00      	nop
 8019cc8:	370c      	adds	r7, #12
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd0:	4770      	bx	lr
	...

08019cd4 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8019cd4:	b480      	push	{r7}
 8019cd6:	b083      	sub	sp, #12
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d002      	beq.n	8019cea <reg_wizchip_cris_cbfunc+0x16>
 8019ce4:	683b      	ldr	r3, [r7, #0]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d106      	bne.n	8019cf8 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8019cea:	4b0a      	ldr	r3, [pc, #40]	; (8019d14 <reg_wizchip_cris_cbfunc+0x40>)
 8019cec:	4a0a      	ldr	r2, [pc, #40]	; (8019d18 <reg_wizchip_cris_cbfunc+0x44>)
 8019cee:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8019cf0:	4b08      	ldr	r3, [pc, #32]	; (8019d14 <reg_wizchip_cris_cbfunc+0x40>)
 8019cf2:	4a0a      	ldr	r2, [pc, #40]	; (8019d1c <reg_wizchip_cris_cbfunc+0x48>)
 8019cf4:	611a      	str	r2, [r3, #16]
 8019cf6:	e006      	b.n	8019d06 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8019cf8:	4a06      	ldr	r2, [pc, #24]	; (8019d14 <reg_wizchip_cris_cbfunc+0x40>)
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8019cfe:	4a05      	ldr	r2, [pc, #20]	; (8019d14 <reg_wizchip_cris_cbfunc+0x40>)
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	6113      	str	r3, [r2, #16]
   }
}
 8019d04:	bf00      	nop
 8019d06:	bf00      	nop
 8019d08:	370c      	adds	r7, #12
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d10:	4770      	bx	lr
 8019d12:	bf00      	nop
 8019d14:	200000c4 	.word	0x200000c4
 8019d18:	08019c3d 	.word	0x08019c3d
 8019d1c:	08019c4b 	.word	0x08019c4b

08019d20 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8019d20:	b480      	push	{r7}
 8019d22:	b083      	sub	sp, #12
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	6078      	str	r0, [r7, #4]
 8019d28:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d002      	beq.n	8019d36 <reg_wizchip_cs_cbfunc+0x16>
 8019d30:	683b      	ldr	r3, [r7, #0]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d106      	bne.n	8019d44 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8019d36:	4b0a      	ldr	r3, [pc, #40]	; (8019d60 <reg_wizchip_cs_cbfunc+0x40>)
 8019d38:	4a0a      	ldr	r2, [pc, #40]	; (8019d64 <reg_wizchip_cs_cbfunc+0x44>)
 8019d3a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8019d3c:	4b08      	ldr	r3, [pc, #32]	; (8019d60 <reg_wizchip_cs_cbfunc+0x40>)
 8019d3e:	4a0a      	ldr	r2, [pc, #40]	; (8019d68 <reg_wizchip_cs_cbfunc+0x48>)
 8019d40:	619a      	str	r2, [r3, #24]
 8019d42:	e006      	b.n	8019d52 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8019d44:	4a06      	ldr	r2, [pc, #24]	; (8019d60 <reg_wizchip_cs_cbfunc+0x40>)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8019d4a:	4a05      	ldr	r2, [pc, #20]	; (8019d60 <reg_wizchip_cs_cbfunc+0x40>)
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	6193      	str	r3, [r2, #24]
   }
}
 8019d50:	bf00      	nop
 8019d52:	bf00      	nop
 8019d54:	370c      	adds	r7, #12
 8019d56:	46bd      	mov	sp, r7
 8019d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5c:	4770      	bx	lr
 8019d5e:	bf00      	nop
 8019d60:	200000c4 	.word	0x200000c4
 8019d64:	08019c59 	.word	0x08019c59
 8019d68:	08019c67 	.word	0x08019c67

08019d6c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8019d6c:	b480      	push	{r7}
 8019d6e:	b083      	sub	sp, #12
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
 8019d74:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8019d76:	bf00      	nop
 8019d78:	4b0f      	ldr	r3, [pc, #60]	; (8019db8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019d7a:	881b      	ldrh	r3, [r3, #0]
 8019d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d0f9      	beq.n	8019d78 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d002      	beq.n	8019d90 <reg_wizchip_spi_cbfunc+0x24>
 8019d8a:	683b      	ldr	r3, [r7, #0]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d106      	bne.n	8019d9e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8019d90:	4b09      	ldr	r3, [pc, #36]	; (8019db8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019d92:	4a0a      	ldr	r2, [pc, #40]	; (8019dbc <reg_wizchip_spi_cbfunc+0x50>)
 8019d94:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8019d96:	4b08      	ldr	r3, [pc, #32]	; (8019db8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019d98:	4a09      	ldr	r2, [pc, #36]	; (8019dc0 <reg_wizchip_spi_cbfunc+0x54>)
 8019d9a:	621a      	str	r2, [r3, #32]
 8019d9c:	e006      	b.n	8019dac <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8019d9e:	4a06      	ldr	r2, [pc, #24]	; (8019db8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8019da4:	4a04      	ldr	r2, [pc, #16]	; (8019db8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	6213      	str	r3, [r2, #32]
   }
}
 8019daa:	bf00      	nop
 8019dac:	bf00      	nop
 8019dae:	370c      	adds	r7, #12
 8019db0:	46bd      	mov	sp, r7
 8019db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019db6:	4770      	bx	lr
 8019db8:	200000c4 	.word	0x200000c4
 8019dbc:	08019cad 	.word	0x08019cad
 8019dc0:	08019cbd 	.word	0x08019cbd

08019dc4 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8019dc4:	b590      	push	{r4, r7, lr}
 8019dc6:	b087      	sub	sp, #28
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	4603      	mov	r3, r0
 8019dcc:	6039      	str	r1, [r7, #0]
 8019dce:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	60fb      	str	r3, [r7, #12]
 8019dd8:	2300      	movs	r3, #0
 8019dda:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8019ddc:	79fb      	ldrb	r3, [r7, #7]
 8019dde:	2b0f      	cmp	r3, #15
 8019de0:	f200 80c7 	bhi.w	8019f72 <ctlwizchip+0x1ae>
 8019de4:	a201      	add	r2, pc, #4	; (adr r2, 8019dec <ctlwizchip+0x28>)
 8019de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dea:	bf00      	nop
 8019dec:	08019e2d 	.word	0x08019e2d
 8019df0:	08019e33 	.word	0x08019e33
 8019df4:	08019e5f 	.word	0x08019e5f
 8019df8:	08019e53 	.word	0x08019e53
 8019dfc:	08019e6d 	.word	0x08019e6d
 8019e00:	08019e79 	.word	0x08019e79
 8019e04:	08019e87 	.word	0x08019e87
 8019e08:	08019ead 	.word	0x08019ead
 8019e0c:	08019ed3 	.word	0x08019ed3
 8019e10:	08019f17 	.word	0x08019f17
 8019e14:	08019f1d 	.word	0x08019f1d
 8019e18:	08019f25 	.word	0x08019f25
 8019e1c:	08019f79 	.word	0x08019f79
 8019e20:	08019f2d 	.word	0x08019f2d
 8019e24:	08019f3b 	.word	0x08019f3b
 8019e28:	08019f57 	.word	0x08019f57
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8019e2c:	f000 f8ea 	bl	801a004 <wizchip_sw_reset>
         break;
 8019e30:	e0a3      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8019e32:	683b      	ldr	r3, [r7, #0]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d004      	beq.n	8019e42 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8019e38:	683b      	ldr	r3, [r7, #0]
 8019e3a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	3308      	adds	r3, #8
 8019e40:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	693a      	ldr	r2, [r7, #16]
 8019e46:	4611      	mov	r1, r2
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f000 f927 	bl	801a09c <wizchip_init>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	e094      	b.n	8019f7c <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8019e52:	683b      	ldr	r3, [r7, #0]
 8019e54:	881b      	ldrh	r3, [r3, #0]
 8019e56:	4618      	mov	r0, r3
 8019e58:	f000 f9ac 	bl	801a1b4 <wizchip_clrinterrupt>
         break;
 8019e5c:	e08d      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8019e5e:	f000 f9dd 	bl	801a21c <wizchip_getinterrupt>
 8019e62:	4603      	mov	r3, r0
 8019e64:	461a      	mov	r2, r3
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	801a      	strh	r2, [r3, #0]
         break;
 8019e6a:	e086      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	881b      	ldrh	r3, [r3, #0]
 8019e70:	4618      	mov	r0, r3
 8019e72:	f000 f9f8 	bl	801a266 <wizchip_setinterruptmask>
         break;         
 8019e76:	e080      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8019e78:	f000 fa10 	bl	801a29c <wizchip_getinterruptmask>
 8019e7c:	4603      	mov	r3, r0
 8019e7e:	461a      	mov	r2, r3
 8019e80:	683b      	ldr	r3, [r7, #0]
 8019e82:	801a      	strh	r2, [r3, #0]
         break;
 8019e84:	e079      	b.n	8019f7a <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	881b      	ldrh	r3, [r3, #0]
 8019e8a:	0a1b      	lsrs	r3, r3, #8
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	b2db      	uxtb	r3, r3
 8019e90:	4619      	mov	r1, r3
 8019e92:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019e96:	f7fe fc2b 	bl	80186f0 <WIZCHIP_WRITE>
 8019e9a:	683b      	ldr	r3, [r7, #0]
 8019e9c:	881b      	ldrh	r3, [r3, #0]
 8019e9e:	b2db      	uxtb	r3, r3
 8019ea0:	4619      	mov	r1, r3
 8019ea2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019ea6:	f7fe fc23 	bl	80186f0 <WIZCHIP_WRITE>
         break;
 8019eaa:	e066      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8019eac:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019eb0:	f7fe fbd2 	bl	8018658 <WIZCHIP_READ>
 8019eb4:	4603      	mov	r3, r0
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	021b      	lsls	r3, r3, #8
 8019eba:	b29c      	uxth	r4, r3
 8019ebc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019ec0:	f7fe fbca 	bl	8018658 <WIZCHIP_READ>
 8019ec4:	4603      	mov	r3, r0
 8019ec6:	b29b      	uxth	r3, r3
 8019ec8:	4423      	add	r3, r4
 8019eca:	b29a      	uxth	r2, r3
 8019ecc:	683b      	ldr	r3, [r7, #0]
 8019ece:	801a      	strh	r2, [r3, #0]
         break;
 8019ed0:	e053      	b.n	8019f7a <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8019ed2:	4b2c      	ldr	r3, [pc, #176]	; (8019f84 <ctlwizchip+0x1c0>)
 8019ed4:	789a      	ldrb	r2, [r3, #2]
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8019eda:	683b      	ldr	r3, [r7, #0]
 8019edc:	3301      	adds	r3, #1
 8019ede:	4a29      	ldr	r2, [pc, #164]	; (8019f84 <ctlwizchip+0x1c0>)
 8019ee0:	78d2      	ldrb	r2, [r2, #3]
 8019ee2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	3302      	adds	r3, #2
 8019ee8:	4a26      	ldr	r2, [pc, #152]	; (8019f84 <ctlwizchip+0x1c0>)
 8019eea:	7912      	ldrb	r2, [r2, #4]
 8019eec:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	3303      	adds	r3, #3
 8019ef2:	4a24      	ldr	r2, [pc, #144]	; (8019f84 <ctlwizchip+0x1c0>)
 8019ef4:	7952      	ldrb	r2, [r2, #5]
 8019ef6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8019ef8:	683b      	ldr	r3, [r7, #0]
 8019efa:	3304      	adds	r3, #4
 8019efc:	4a21      	ldr	r2, [pc, #132]	; (8019f84 <ctlwizchip+0x1c0>)
 8019efe:	7992      	ldrb	r2, [r2, #6]
 8019f00:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	3305      	adds	r3, #5
 8019f06:	4a1f      	ldr	r2, [pc, #124]	; (8019f84 <ctlwizchip+0x1c0>)
 8019f08:	79d2      	ldrb	r2, [r2, #7]
 8019f0a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8019f0c:	683b      	ldr	r3, [r7, #0]
 8019f0e:	3306      	adds	r3, #6
 8019f10:	2200      	movs	r2, #0
 8019f12:	701a      	strb	r2, [r3, #0]
         break;
 8019f14:	e031      	b.n	8019f7a <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8019f16:	f000 fa13 	bl	801a340 <wizphy_reset>
         break;
 8019f1a:	e02e      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8019f1c:	6838      	ldr	r0, [r7, #0]
 8019f1e:	f000 fa36 	bl	801a38e <wizphy_setphyconf>
         break;
 8019f22:	e02a      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8019f24:	6838      	ldr	r0, [r7, #0]
 8019f26:	f000 fa75 	bl	801a414 <wizphy_getphyconf>
         break;
 8019f2a:	e026      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	781b      	ldrb	r3, [r3, #0]
 8019f30:	4618      	mov	r0, r3
 8019f32:	f000 faf7 	bl	801a524 <wizphy_setphypmode>
 8019f36:	4603      	mov	r3, r0
 8019f38:	e020      	b.n	8019f7c <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8019f3a:	f000 f9e8 	bl	801a30e <wizphy_getphypmode>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019f42:	7dfb      	ldrb	r3, [r7, #23]
 8019f44:	2bff      	cmp	r3, #255	; 0xff
 8019f46:	d102      	bne.n	8019f4e <ctlwizchip+0x18a>
 8019f48:	f04f 33ff 	mov.w	r3, #4294967295
 8019f4c:	e016      	b.n	8019f7c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	7dfa      	ldrb	r2, [r7, #23]
 8019f52:	701a      	strb	r2, [r3, #0]
         break;
 8019f54:	e011      	b.n	8019f7a <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8019f56:	f000 f9c4 	bl	801a2e2 <wizphy_getphylink>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019f5e:	7dfb      	ldrb	r3, [r7, #23]
 8019f60:	2bff      	cmp	r3, #255	; 0xff
 8019f62:	d102      	bne.n	8019f6a <ctlwizchip+0x1a6>
 8019f64:	f04f 33ff 	mov.w	r3, #4294967295
 8019f68:	e008      	b.n	8019f7c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019f6a:	683b      	ldr	r3, [r7, #0]
 8019f6c:	7dfa      	ldrb	r2, [r7, #23]
 8019f6e:	701a      	strb	r2, [r3, #0]
         break;
 8019f70:	e003      	b.n	8019f7a <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8019f72:	f04f 33ff 	mov.w	r3, #4294967295
 8019f76:	e001      	b.n	8019f7c <ctlwizchip+0x1b8>
         break;
 8019f78:	bf00      	nop
   }
   return 0;
 8019f7a:	2300      	movs	r3, #0
}
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	371c      	adds	r7, #28
 8019f80:	46bd      	mov	sp, r7
 8019f82:	bd90      	pop	{r4, r7, pc}
 8019f84:	200000c4 	.word	0x200000c4

08019f88 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b082      	sub	sp, #8
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	4603      	mov	r3, r0
 8019f90:	6039      	str	r1, [r7, #0]
 8019f92:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8019f94:	79fb      	ldrb	r3, [r7, #7]
 8019f96:	2b05      	cmp	r3, #5
 8019f98:	d82c      	bhi.n	8019ff4 <ctlnetwork+0x6c>
 8019f9a:	a201      	add	r2, pc, #4	; (adr r2, 8019fa0 <ctlnetwork+0x18>)
 8019f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fa0:	08019fb9 	.word	0x08019fb9
 8019fa4:	08019fc1 	.word	0x08019fc1
 8019fa8:	08019fc9 	.word	0x08019fc9
 8019fac:	08019fd7 	.word	0x08019fd7
 8019fb0:	08019fe5 	.word	0x08019fe5
 8019fb4:	08019fed 	.word	0x08019fed
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8019fb8:	6838      	ldr	r0, [r7, #0]
 8019fba:	f000 fafd 	bl	801a5b8 <wizchip_setnetinfo>
         break;
 8019fbe:	e01c      	b.n	8019ffa <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8019fc0:	6838      	ldr	r0, [r7, #0]
 8019fc2:	f000 fb39 	bl	801a638 <wizchip_getnetinfo>
         break;
 8019fc6:	e018      	b.n	8019ffa <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8019fc8:	683b      	ldr	r3, [r7, #0]
 8019fca:	781b      	ldrb	r3, [r3, #0]
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f000 fb73 	bl	801a6b8 <wizchip_setnetmode>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	e012      	b.n	8019ffc <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8019fd6:	f000 fb91 	bl	801a6fc <wizchip_getnetmode>
 8019fda:	4603      	mov	r3, r0
 8019fdc:	461a      	mov	r2, r3
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	701a      	strb	r2, [r3, #0]
         break;
 8019fe2:	e00a      	b.n	8019ffa <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8019fe4:	6838      	ldr	r0, [r7, #0]
 8019fe6:	f000 fb91 	bl	801a70c <wizchip_settimeout>
         break;
 8019fea:	e006      	b.n	8019ffa <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8019fec:	6838      	ldr	r0, [r7, #0]
 8019fee:	f000 fbae 	bl	801a74e <wizchip_gettimeout>
         break;
 8019ff2:	e002      	b.n	8019ffa <ctlnetwork+0x72>
      default:
         return -1;
 8019ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8019ff8:	e000      	b.n	8019ffc <ctlnetwork+0x74>
   }
   return 0;
 8019ffa:	2300      	movs	r3, #0
}
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	3708      	adds	r7, #8
 801a000:	46bd      	mov	sp, r7
 801a002:	bd80      	pop	{r7, pc}

0801a004 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b086      	sub	sp, #24
 801a008:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801a00a:	1d3b      	adds	r3, r7, #4
 801a00c:	2206      	movs	r2, #6
 801a00e:	4619      	mov	r1, r3
 801a010:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a014:	f7fe fbba 	bl	801878c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801a018:	f107 0314 	add.w	r3, r7, #20
 801a01c:	2204      	movs	r2, #4
 801a01e:	4619      	mov	r1, r3
 801a020:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a024:	f7fe fbb2 	bl	801878c <WIZCHIP_READ_BUF>
 801a028:	f107 0310 	add.w	r3, r7, #16
 801a02c:	2204      	movs	r2, #4
 801a02e:	4619      	mov	r1, r3
 801a030:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a034:	f7fe fbaa 	bl	801878c <WIZCHIP_READ_BUF>
 801a038:	f107 030c 	add.w	r3, r7, #12
 801a03c:	2204      	movs	r2, #4
 801a03e:	4619      	mov	r1, r3
 801a040:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a044:	f7fe fba2 	bl	801878c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801a048:	2180      	movs	r1, #128	; 0x80
 801a04a:	2000      	movs	r0, #0
 801a04c:	f7fe fb50 	bl	80186f0 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a050:	2000      	movs	r0, #0
 801a052:	f7fe fb01 	bl	8018658 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801a056:	1d3b      	adds	r3, r7, #4
 801a058:	2206      	movs	r2, #6
 801a05a:	4619      	mov	r1, r3
 801a05c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a060:	f7fe fbf4 	bl	801884c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801a064:	f107 0314 	add.w	r3, r7, #20
 801a068:	2204      	movs	r2, #4
 801a06a:	4619      	mov	r1, r3
 801a06c:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a070:	f7fe fbec 	bl	801884c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801a074:	f107 0310 	add.w	r3, r7, #16
 801a078:	2204      	movs	r2, #4
 801a07a:	4619      	mov	r1, r3
 801a07c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a080:	f7fe fbe4 	bl	801884c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801a084:	f107 030c 	add.w	r3, r7, #12
 801a088:	2204      	movs	r2, #4
 801a08a:	4619      	mov	r1, r3
 801a08c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a090:	f7fe fbdc 	bl	801884c <WIZCHIP_WRITE_BUF>
}
 801a094:	bf00      	nop
 801a096:	3718      	adds	r7, #24
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}

0801a09c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b084      	sub	sp, #16
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
 801a0a4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801a0aa:	f7ff ffab 	bl	801a004 <wizchip_sw_reset>
   if(txsize)
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d03b      	beq.n	801a12c <wizchip_init+0x90>
   {
      tmp = 0;
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	73fb      	strb	r3, [r7, #15]
 801a0bc:	e015      	b.n	801a0ea <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801a0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0c2:	687a      	ldr	r2, [r7, #4]
 801a0c4:	4413      	add	r3, r2
 801a0c6:	781a      	ldrb	r2, [r3, #0]
 801a0c8:	7bbb      	ldrb	r3, [r7, #14]
 801a0ca:	4413      	add	r3, r2
 801a0cc:	b2db      	uxtb	r3, r3
 801a0ce:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a0d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a0d4:	2b10      	cmp	r3, #16
 801a0d6:	dd02      	ble.n	801a0de <wizchip_init+0x42>
 801a0d8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0dc:	e066      	b.n	801a1ac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0e2:	b2db      	uxtb	r3, r3
 801a0e4:	3301      	adds	r3, #1
 801a0e6:	b2db      	uxtb	r3, r3
 801a0e8:	73fb      	strb	r3, [r7, #15]
 801a0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0ee:	2b07      	cmp	r3, #7
 801a0f0:	dde5      	ble.n	801a0be <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	73fb      	strb	r3, [r7, #15]
 801a0f6:	e015      	b.n	801a124 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801a0f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0fc:	009b      	lsls	r3, r3, #2
 801a0fe:	3301      	adds	r3, #1
 801a100:	00db      	lsls	r3, r3, #3
 801a102:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801a106:	4618      	mov	r0, r3
 801a108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a10c:	687a      	ldr	r2, [r7, #4]
 801a10e:	4413      	add	r3, r2
 801a110:	781b      	ldrb	r3, [r3, #0]
 801a112:	4619      	mov	r1, r3
 801a114:	f7fe faec 	bl	80186f0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a11c:	b2db      	uxtb	r3, r3
 801a11e:	3301      	adds	r3, #1
 801a120:	b2db      	uxtb	r3, r3
 801a122:	73fb      	strb	r3, [r7, #15]
 801a124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a128:	2b07      	cmp	r3, #7
 801a12a:	dde5      	ble.n	801a0f8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d03b      	beq.n	801a1aa <wizchip_init+0x10e>
   {
      tmp = 0;
 801a132:	2300      	movs	r3, #0
 801a134:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a136:	2300      	movs	r3, #0
 801a138:	73fb      	strb	r3, [r7, #15]
 801a13a:	e015      	b.n	801a168 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801a13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a140:	683a      	ldr	r2, [r7, #0]
 801a142:	4413      	add	r3, r2
 801a144:	781a      	ldrb	r2, [r3, #0]
 801a146:	7bbb      	ldrb	r3, [r7, #14]
 801a148:	4413      	add	r3, r2
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a14e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a152:	2b10      	cmp	r3, #16
 801a154:	dd02      	ble.n	801a15c <wizchip_init+0xc0>
 801a156:	f04f 33ff 	mov.w	r3, #4294967295
 801a15a:	e027      	b.n	801a1ac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a160:	b2db      	uxtb	r3, r3
 801a162:	3301      	adds	r3, #1
 801a164:	b2db      	uxtb	r3, r3
 801a166:	73fb      	strb	r3, [r7, #15]
 801a168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a16c:	2b07      	cmp	r3, #7
 801a16e:	dde5      	ble.n	801a13c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a170:	2300      	movs	r3, #0
 801a172:	73fb      	strb	r3, [r7, #15]
 801a174:	e015      	b.n	801a1a2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801a176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a17a:	009b      	lsls	r3, r3, #2
 801a17c:	3301      	adds	r3, #1
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801a184:	4618      	mov	r0, r3
 801a186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a18a:	683a      	ldr	r2, [r7, #0]
 801a18c:	4413      	add	r3, r2
 801a18e:	781b      	ldrb	r3, [r3, #0]
 801a190:	4619      	mov	r1, r3
 801a192:	f7fe faad 	bl	80186f0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a19a:	b2db      	uxtb	r3, r3
 801a19c:	3301      	adds	r3, #1
 801a19e:	b2db      	uxtb	r3, r3
 801a1a0:	73fb      	strb	r3, [r7, #15]
 801a1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a1a6:	2b07      	cmp	r3, #7
 801a1a8:	dde5      	ble.n	801a176 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801a1aa:	2300      	movs	r3, #0
}
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	3710      	adds	r7, #16
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}

0801a1b4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 801a1be:	88fb      	ldrh	r3, [r7, #6]
 801a1c0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801a1c2:	88fb      	ldrh	r3, [r7, #6]
 801a1c4:	0a1b      	lsrs	r3, r3, #8
 801a1c6:	b29b      	uxth	r3, r3
 801a1c8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801a1ca:	7bfb      	ldrb	r3, [r7, #15]
 801a1cc:	f023 030f 	bic.w	r3, r3, #15
 801a1d0:	b2db      	uxtb	r3, r3
 801a1d2:	4619      	mov	r1, r3
 801a1d4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a1d8:	f7fe fa8a 	bl	80186f0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801a1dc:	2300      	movs	r3, #0
 801a1de:	73fb      	strb	r3, [r7, #15]
 801a1e0:	e014      	b.n	801a20c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801a1e2:	7bba      	ldrb	r2, [r7, #14]
 801a1e4:	7bfb      	ldrb	r3, [r7, #15]
 801a1e6:	fa42 f303 	asr.w	r3, r2, r3
 801a1ea:	f003 0301 	and.w	r3, r3, #1
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d009      	beq.n	801a206 <wizchip_clrinterrupt+0x52>
 801a1f2:	7bfb      	ldrb	r3, [r7, #15]
 801a1f4:	009b      	lsls	r3, r3, #2
 801a1f6:	3301      	adds	r3, #1
 801a1f8:	00db      	lsls	r3, r3, #3
 801a1fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a1fe:	211f      	movs	r1, #31
 801a200:	4618      	mov	r0, r3
 801a202:	f7fe fa75 	bl	80186f0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801a206:	7bfb      	ldrb	r3, [r7, #15]
 801a208:	3301      	adds	r3, #1
 801a20a:	73fb      	strb	r3, [r7, #15]
 801a20c:	7bfb      	ldrb	r3, [r7, #15]
 801a20e:	2b07      	cmp	r3, #7
 801a210:	d9e7      	bls.n	801a1e2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 801a212:	bf00      	nop
 801a214:	bf00      	nop
 801a216:	3710      	adds	r7, #16
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}

0801a21c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801a222:	2300      	movs	r3, #0
 801a224:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 801a226:	2300      	movs	r3, #0
 801a228:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a22a:	2300      	movs	r3, #0
 801a22c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801a22e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a232:	f7fe fa11 	bl	8018658 <WIZCHIP_READ>
 801a236:	4603      	mov	r3, r0
 801a238:	f023 030f 	bic.w	r3, r3, #15
 801a23c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 801a23e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 801a242:	f7fe fa09 	bl	8018658 <WIZCHIP_READ>
 801a246:	4603      	mov	r3, r0
 801a248:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801a24a:	79bb      	ldrb	r3, [r7, #6]
 801a24c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 801a24e:	88bb      	ldrh	r3, [r7, #4]
 801a250:	021b      	lsls	r3, r3, #8
 801a252:	b29a      	uxth	r2, r3
 801a254:	79fb      	ldrb	r3, [r7, #7]
 801a256:	b29b      	uxth	r3, r3
 801a258:	4413      	add	r3, r2
 801a25a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a25c:	88bb      	ldrh	r3, [r7, #4]
}
 801a25e:	4618      	mov	r0, r3
 801a260:	3708      	adds	r7, #8
 801a262:	46bd      	mov	sp, r7
 801a264:	bd80      	pop	{r7, pc}

0801a266 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801a266:	b580      	push	{r7, lr}
 801a268:	b084      	sub	sp, #16
 801a26a:	af00      	add	r7, sp, #0
 801a26c:	4603      	mov	r3, r0
 801a26e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 801a270:	88fb      	ldrh	r3, [r7, #6]
 801a272:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801a274:	88fb      	ldrh	r3, [r7, #6]
 801a276:	0a1b      	lsrs	r3, r3, #8
 801a278:	b29b      	uxth	r3, r3
 801a27a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801a27c:	7bfb      	ldrb	r3, [r7, #15]
 801a27e:	4619      	mov	r1, r3
 801a280:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a284:	f7fe fa34 	bl	80186f0 <WIZCHIP_WRITE>
   setSIMR(simr);
 801a288:	7bbb      	ldrb	r3, [r7, #14]
 801a28a:	4619      	mov	r1, r3
 801a28c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a290:	f7fe fa2e 	bl	80186f0 <WIZCHIP_WRITE>
#endif   
}
 801a294:	bf00      	nop
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}

0801a29c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b082      	sub	sp, #8
 801a2a0:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801a2ae:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a2b2:	f7fe f9d1 	bl	8018658 <WIZCHIP_READ>
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 801a2ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a2be:	f7fe f9cb 	bl	8018658 <WIZCHIP_READ>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801a2c6:	79bb      	ldrb	r3, [r7, #6]
 801a2c8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 801a2ca:	88bb      	ldrh	r3, [r7, #4]
 801a2cc:	021b      	lsls	r3, r3, #8
 801a2ce:	b29a      	uxth	r2, r3
 801a2d0:	79fb      	ldrb	r3, [r7, #7]
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	4413      	add	r3, r2
 801a2d6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a2d8:	88bb      	ldrh	r3, [r7, #4]
}
 801a2da:	4618      	mov	r0, r3
 801a2dc:	3708      	adds	r7, #8
 801a2de:	46bd      	mov	sp, r7
 801a2e0:	bd80      	pop	{r7, pc}

0801a2e2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801a2e2:	b580      	push	{r7, lr}
 801a2e4:	b082      	sub	sp, #8
 801a2e6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801a2ec:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a2f0:	f7fe f9b2 	bl	8018658 <WIZCHIP_READ>
 801a2f4:	4603      	mov	r3, r0
 801a2f6:	f003 0301 	and.w	r3, r3, #1
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d001      	beq.n	801a302 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 801a2fe:	2301      	movs	r3, #1
 801a300:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 801a302:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a306:	4618      	mov	r0, r3
 801a308:	3708      	adds	r7, #8
 801a30a:	46bd      	mov	sp, r7
 801a30c:	bd80      	pop	{r7, pc}

0801a30e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801a30e:	b580      	push	{r7, lr}
 801a310:	b082      	sub	sp, #8
 801a312:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801a314:	2300      	movs	r3, #0
 801a316:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801a318:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a31c:	f7fe f99c 	bl	8018658 <WIZCHIP_READ>
 801a320:	4603      	mov	r3, r0
 801a322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a326:	2b30      	cmp	r3, #48	; 0x30
 801a328:	d102      	bne.n	801a330 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 801a32a:	2301      	movs	r3, #1
 801a32c:	71fb      	strb	r3, [r7, #7]
 801a32e:	e001      	b.n	801a334 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 801a330:	2300      	movs	r3, #0
 801a332:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 801a334:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a338:	4618      	mov	r0, r3
 801a33a:	3708      	adds	r7, #8
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b082      	sub	sp, #8
 801a344:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801a346:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a34a:	f7fe f985 	bl	8018658 <WIZCHIP_READ>
 801a34e:	4603      	mov	r3, r0
 801a350:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 801a352:	79fb      	ldrb	r3, [r7, #7]
 801a354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a358:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a35a:	79fb      	ldrb	r3, [r7, #7]
 801a35c:	4619      	mov	r1, r3
 801a35e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a362:	f7fe f9c5 	bl	80186f0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801a366:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a36a:	f7fe f975 	bl	8018658 <WIZCHIP_READ>
 801a36e:	4603      	mov	r3, r0
 801a370:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 801a372:	79fb      	ldrb	r3, [r7, #7]
 801a374:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a378:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a37a:	79fb      	ldrb	r3, [r7, #7]
 801a37c:	4619      	mov	r1, r3
 801a37e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a382:	f7fe f9b5 	bl	80186f0 <WIZCHIP_WRITE>
}
 801a386:	bf00      	nop
 801a388:	3708      	adds	r7, #8
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}

0801a38e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801a38e:	b580      	push	{r7, lr}
 801a390:	b084      	sub	sp, #16
 801a392:	af00      	add	r7, sp, #0
 801a394:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a396:	2300      	movs	r3, #0
 801a398:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	781b      	ldrb	r3, [r3, #0]
 801a39e:	2b01      	cmp	r3, #1
 801a3a0:	d104      	bne.n	801a3ac <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 801a3a2:	7bfb      	ldrb	r3, [r7, #15]
 801a3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3a8:	73fb      	strb	r3, [r7, #15]
 801a3aa:	e003      	b.n	801a3b4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 801a3ac:	7bfb      	ldrb	r3, [r7, #15]
 801a3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a3b2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	785b      	ldrb	r3, [r3, #1]
 801a3b8:	2b01      	cmp	r3, #1
 801a3ba:	d104      	bne.n	801a3c6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a3bc:	7bfb      	ldrb	r3, [r7, #15]
 801a3be:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a3c2:	73fb      	strb	r3, [r7, #15]
 801a3c4:	e019      	b.n	801a3fa <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	78db      	ldrb	r3, [r3, #3]
 801a3ca:	2b01      	cmp	r3, #1
 801a3cc:	d10d      	bne.n	801a3ea <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	789b      	ldrb	r3, [r3, #2]
 801a3d2:	2b01      	cmp	r3, #1
 801a3d4:	d104      	bne.n	801a3e0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 801a3d6:	7bfb      	ldrb	r3, [r7, #15]
 801a3d8:	f043 0318 	orr.w	r3, r3, #24
 801a3dc:	73fb      	strb	r3, [r7, #15]
 801a3de:	e00c      	b.n	801a3fa <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801a3e0:	7bfb      	ldrb	r3, [r7, #15]
 801a3e2:	f043 0308 	orr.w	r3, r3, #8
 801a3e6:	73fb      	strb	r3, [r7, #15]
 801a3e8:	e007      	b.n	801a3fa <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	789b      	ldrb	r3, [r3, #2]
 801a3ee:	2b01      	cmp	r3, #1
 801a3f0:	d103      	bne.n	801a3fa <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 801a3f2:	7bfb      	ldrb	r3, [r7, #15]
 801a3f4:	f043 0310 	orr.w	r3, r3, #16
 801a3f8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 801a3fa:	7bfb      	ldrb	r3, [r7, #15]
 801a3fc:	4619      	mov	r1, r3
 801a3fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a402:	f7fe f975 	bl	80186f0 <WIZCHIP_WRITE>
   wizphy_reset();
 801a406:	f7ff ff9b 	bl	801a340 <wizphy_reset>
}
 801a40a:	bf00      	nop
 801a40c:	3710      	adds	r7, #16
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd80      	pop	{r7, pc}
	...

0801a414 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b084      	sub	sp, #16
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a41c:	2300      	movs	r3, #0
 801a41e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a420:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a424:	f7fe f918 	bl	8018658 <WIZCHIP_READ>
 801a428:	4603      	mov	r3, r0
 801a42a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a42c:	7bfb      	ldrb	r3, [r7, #15]
 801a42e:	119b      	asrs	r3, r3, #6
 801a430:	b2db      	uxtb	r3, r3
 801a432:	f003 0301 	and.w	r3, r3, #1
 801a436:	b2da      	uxtb	r2, r3
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a43c:	7bfb      	ldrb	r3, [r7, #15]
 801a43e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a442:	2b20      	cmp	r3, #32
 801a444:	d001      	beq.n	801a44a <wizphy_getphyconf+0x36>
 801a446:	2b38      	cmp	r3, #56	; 0x38
 801a448:	d103      	bne.n	801a452 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2201      	movs	r2, #1
 801a44e:	705a      	strb	r2, [r3, #1]
         break;
 801a450:	e003      	b.n	801a45a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2200      	movs	r2, #0
 801a456:	705a      	strb	r2, [r3, #1]
         break;
 801a458:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a45a:	7bfb      	ldrb	r3, [r7, #15]
 801a45c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a460:	3b10      	subs	r3, #16
 801a462:	2b10      	cmp	r3, #16
 801a464:	bf8c      	ite	hi
 801a466:	2201      	movhi	r2, #1
 801a468:	2200      	movls	r2, #0
 801a46a:	b2d2      	uxtb	r2, r2
 801a46c:	2a00      	cmp	r2, #0
 801a46e:	d10f      	bne.n	801a490 <wizphy_getphyconf+0x7c>
 801a470:	4a1b      	ldr	r2, [pc, #108]	; (801a4e0 <wizphy_getphyconf+0xcc>)
 801a472:	fa22 f303 	lsr.w	r3, r2, r3
 801a476:	f003 0301 	and.w	r3, r3, #1
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	bf14      	ite	ne
 801a47e:	2301      	movne	r3, #1
 801a480:	2300      	moveq	r3, #0
 801a482:	b2db      	uxtb	r3, r3
 801a484:	2b00      	cmp	r3, #0
 801a486:	d003      	beq.n	801a490 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2201      	movs	r2, #1
 801a48c:	709a      	strb	r2, [r3, #2]
         break;
 801a48e:	e003      	b.n	801a498 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	2200      	movs	r2, #0
 801a494:	709a      	strb	r2, [r3, #2]
         break;
 801a496:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a498:	7bfb      	ldrb	r3, [r7, #15]
 801a49a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a49e:	3b08      	subs	r3, #8
 801a4a0:	2b18      	cmp	r3, #24
 801a4a2:	bf8c      	ite	hi
 801a4a4:	2201      	movhi	r2, #1
 801a4a6:	2200      	movls	r2, #0
 801a4a8:	b2d2      	uxtb	r2, r2
 801a4aa:	2a00      	cmp	r2, #0
 801a4ac:	d10f      	bne.n	801a4ce <wizphy_getphyconf+0xba>
 801a4ae:	4a0d      	ldr	r2, [pc, #52]	; (801a4e4 <wizphy_getphyconf+0xd0>)
 801a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 801a4b4:	f003 0301 	and.w	r3, r3, #1
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	bf14      	ite	ne
 801a4bc:	2301      	movne	r3, #1
 801a4be:	2300      	moveq	r3, #0
 801a4c0:	b2db      	uxtb	r3, r3
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d003      	beq.n	801a4ce <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	2201      	movs	r2, #1
 801a4ca:	70da      	strb	r2, [r3, #3]
         break;
 801a4cc:	e003      	b.n	801a4d6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	70da      	strb	r2, [r3, #3]
         break;
 801a4d4:	bf00      	nop
   }
}
 801a4d6:	bf00      	nop
 801a4d8:	3710      	adds	r7, #16
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	bd80      	pop	{r7, pc}
 801a4de:	bf00      	nop
 801a4e0:	00010101 	.word	0x00010101
 801a4e4:	01010001 	.word	0x01010001

0801a4e8 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b084      	sub	sp, #16
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a4f0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a4f4:	f7fe f8b0 	bl	8018658 <WIZCHIP_READ>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a4fc:	7bfb      	ldrb	r3, [r7, #15]
 801a4fe:	109b      	asrs	r3, r3, #2
 801a500:	b2db      	uxtb	r3, r3
 801a502:	f003 0301 	and.w	r3, r3, #1
 801a506:	b2da      	uxtb	r2, r3
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a50c:	7bfb      	ldrb	r3, [r7, #15]
 801a50e:	105b      	asrs	r3, r3, #1
 801a510:	b2db      	uxtb	r3, r3
 801a512:	f003 0301 	and.w	r3, r3, #1
 801a516:	b2da      	uxtb	r2, r3
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	709a      	strb	r2, [r3, #2]
}
 801a51c:	bf00      	nop
 801a51e:	3710      	adds	r7, #16
 801a520:	46bd      	mov	sp, r7
 801a522:	bd80      	pop	{r7, pc}

0801a524 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b084      	sub	sp, #16
 801a528:	af00      	add	r7, sp, #0
 801a52a:	4603      	mov	r3, r0
 801a52c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a52e:	2300      	movs	r3, #0
 801a530:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a532:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a536:	f7fe f88f 	bl	8018658 <WIZCHIP_READ>
 801a53a:	4603      	mov	r3, r0
 801a53c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a53e:	7bfb      	ldrb	r3, [r7, #15]
 801a540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a544:	2b00      	cmp	r3, #0
 801a546:	d102      	bne.n	801a54e <wizphy_setphypmode+0x2a>
 801a548:	f04f 33ff 	mov.w	r3, #4294967295
 801a54c:	e030      	b.n	801a5b0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a54e:	7bfb      	ldrb	r3, [r7, #15]
 801a550:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 801a554:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a556:	79fb      	ldrb	r3, [r7, #7]
 801a558:	2b01      	cmp	r3, #1
 801a55a:	d104      	bne.n	801a566 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a55c:	7bfb      	ldrb	r3, [r7, #15]
 801a55e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801a562:	73fb      	strb	r3, [r7, #15]
 801a564:	e003      	b.n	801a56e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a566:	7bfb      	ldrb	r3, [r7, #15]
 801a568:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a56c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a56e:	7bfb      	ldrb	r3, [r7, #15]
 801a570:	4619      	mov	r1, r3
 801a572:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a576:	f7fe f8bb 	bl	80186f0 <WIZCHIP_WRITE>
   wizphy_reset();
 801a57a:	f7ff fee1 	bl	801a340 <wizphy_reset>
   tmp = getPHYCFGR();
 801a57e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a582:	f7fe f869 	bl	8018658 <WIZCHIP_READ>
 801a586:	4603      	mov	r3, r0
 801a588:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a58a:	79fb      	ldrb	r3, [r7, #7]
 801a58c:	2b01      	cmp	r3, #1
 801a58e:	d106      	bne.n	801a59e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a590:	7bfb      	ldrb	r3, [r7, #15]
 801a592:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a596:	2b00      	cmp	r3, #0
 801a598:	d008      	beq.n	801a5ac <wizphy_setphypmode+0x88>
 801a59a:	2300      	movs	r3, #0
 801a59c:	e008      	b.n	801a5b0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a59e:	7bfb      	ldrb	r3, [r7, #15]
 801a5a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d001      	beq.n	801a5ac <wizphy_setphypmode+0x88>
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	e001      	b.n	801a5b0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a5ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	3710      	adds	r7, #16
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	bd80      	pop	{r7, pc}

0801a5b8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b082      	sub	sp, #8
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	2206      	movs	r2, #6
 801a5c4:	4619      	mov	r1, r3
 801a5c6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a5ca:	f7fe f93f 	bl	801884c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	330e      	adds	r3, #14
 801a5d2:	2204      	movs	r2, #4
 801a5d4:	4619      	mov	r1, r3
 801a5d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a5da:	f7fe f937 	bl	801884c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	330a      	adds	r3, #10
 801a5e2:	2204      	movs	r2, #4
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a5ea:	f7fe f92f 	bl	801884c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	3306      	adds	r3, #6
 801a5f2:	2204      	movs	r2, #4
 801a5f4:	4619      	mov	r1, r3
 801a5f6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a5fa:	f7fe f927 	bl	801884c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	7c9a      	ldrb	r2, [r3, #18]
 801a602:	4b0b      	ldr	r3, [pc, #44]	; (801a630 <wizchip_setnetinfo+0x78>)
 801a604:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	7cda      	ldrb	r2, [r3, #19]
 801a60a:	4b09      	ldr	r3, [pc, #36]	; (801a630 <wizchip_setnetinfo+0x78>)
 801a60c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	7d1a      	ldrb	r2, [r3, #20]
 801a612:	4b07      	ldr	r3, [pc, #28]	; (801a630 <wizchip_setnetinfo+0x78>)
 801a614:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	7d5a      	ldrb	r2, [r3, #21]
 801a61a:	4b05      	ldr	r3, [pc, #20]	; (801a630 <wizchip_setnetinfo+0x78>)
 801a61c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	7d9a      	ldrb	r2, [r3, #22]
 801a622:	4b04      	ldr	r3, [pc, #16]	; (801a634 <wizchip_setnetinfo+0x7c>)
 801a624:	701a      	strb	r2, [r3, #0]
}
 801a626:	bf00      	nop
 801a628:	3708      	adds	r7, #8
 801a62a:	46bd      	mov	sp, r7
 801a62c:	bd80      	pop	{r7, pc}
 801a62e:	bf00      	nop
 801a630:	20000980 	.word	0x20000980
 801a634:	20000984 	.word	0x20000984

0801a638 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a638:	b580      	push	{r7, lr}
 801a63a:	b082      	sub	sp, #8
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	2206      	movs	r2, #6
 801a644:	4619      	mov	r1, r3
 801a646:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a64a:	f7fe f89f 	bl	801878c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	330e      	adds	r3, #14
 801a652:	2204      	movs	r2, #4
 801a654:	4619      	mov	r1, r3
 801a656:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a65a:	f7fe f897 	bl	801878c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	330a      	adds	r3, #10
 801a662:	2204      	movs	r2, #4
 801a664:	4619      	mov	r1, r3
 801a666:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a66a:	f7fe f88f 	bl	801878c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	3306      	adds	r3, #6
 801a672:	2204      	movs	r2, #4
 801a674:	4619      	mov	r1, r3
 801a676:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a67a:	f7fe f887 	bl	801878c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a67e:	4b0c      	ldr	r3, [pc, #48]	; (801a6b0 <wizchip_getnetinfo+0x78>)
 801a680:	781a      	ldrb	r2, [r3, #0]
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a686:	4b0a      	ldr	r3, [pc, #40]	; (801a6b0 <wizchip_getnetinfo+0x78>)
 801a688:	785a      	ldrb	r2, [r3, #1]
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a68e:	4b08      	ldr	r3, [pc, #32]	; (801a6b0 <wizchip_getnetinfo+0x78>)
 801a690:	789a      	ldrb	r2, [r3, #2]
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a696:	4b06      	ldr	r3, [pc, #24]	; (801a6b0 <wizchip_getnetinfo+0x78>)
 801a698:	78da      	ldrb	r2, [r3, #3]
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a69e:	4b05      	ldr	r3, [pc, #20]	; (801a6b4 <wizchip_getnetinfo+0x7c>)
 801a6a0:	781a      	ldrb	r2, [r3, #0]
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	759a      	strb	r2, [r3, #22]
}
 801a6a6:	bf00      	nop
 801a6a8:	3708      	adds	r7, #8
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}
 801a6ae:	bf00      	nop
 801a6b0:	20000980 	.word	0x20000980
 801a6b4:	20000984 	.word	0x20000984

0801a6b8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a6b8:	b580      	push	{r7, lr}
 801a6ba:	b084      	sub	sp, #16
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	4603      	mov	r3, r0
 801a6c0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a6c6:	79fb      	ldrb	r3, [r7, #7]
 801a6c8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d002      	beq.n	801a6d6 <wizchip_setnetmode+0x1e>
 801a6d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a6d4:	e00e      	b.n	801a6f4 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a6d6:	2000      	movs	r0, #0
 801a6d8:	f7fd ffbe 	bl	8018658 <WIZCHIP_READ>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a6e0:	7bfa      	ldrb	r2, [r7, #15]
 801a6e2:	79fb      	ldrb	r3, [r7, #7]
 801a6e4:	4313      	orrs	r3, r2
 801a6e6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a6e8:	7bfb      	ldrb	r3, [r7, #15]
 801a6ea:	4619      	mov	r1, r3
 801a6ec:	2000      	movs	r0, #0
 801a6ee:	f7fd ffff 	bl	80186f0 <WIZCHIP_WRITE>
   return 0;
 801a6f2:	2300      	movs	r3, #0
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	3710      	adds	r7, #16
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}

0801a6fc <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a700:	2000      	movs	r0, #0
 801a702:	f7fd ffa9 	bl	8018658 <WIZCHIP_READ>
 801a706:	4603      	mov	r3, r0
}
 801a708:	4618      	mov	r0, r3
 801a70a:	bd80      	pop	{r7, pc}

0801a70c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b082      	sub	sp, #8
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	781b      	ldrb	r3, [r3, #0]
 801a718:	4619      	mov	r1, r3
 801a71a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a71e:	f7fd ffe7 	bl	80186f0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	885b      	ldrh	r3, [r3, #2]
 801a726:	0a1b      	lsrs	r3, r3, #8
 801a728:	b29b      	uxth	r3, r3
 801a72a:	b2db      	uxtb	r3, r3
 801a72c:	4619      	mov	r1, r3
 801a72e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a732:	f7fd ffdd 	bl	80186f0 <WIZCHIP_WRITE>
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	885b      	ldrh	r3, [r3, #2]
 801a73a:	b2db      	uxtb	r3, r3
 801a73c:	4619      	mov	r1, r3
 801a73e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a742:	f7fd ffd5 	bl	80186f0 <WIZCHIP_WRITE>
}
 801a746:	bf00      	nop
 801a748:	3708      	adds	r7, #8
 801a74a:	46bd      	mov	sp, r7
 801a74c:	bd80      	pop	{r7, pc}

0801a74e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801a74e:	b590      	push	{r4, r7, lr}
 801a750:	b083      	sub	sp, #12
 801a752:	af00      	add	r7, sp, #0
 801a754:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801a756:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a75a:	f7fd ff7d 	bl	8018658 <WIZCHIP_READ>
 801a75e:	4603      	mov	r3, r0
 801a760:	461a      	mov	r2, r3
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801a766:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a76a:	f7fd ff75 	bl	8018658 <WIZCHIP_READ>
 801a76e:	4603      	mov	r3, r0
 801a770:	b29b      	uxth	r3, r3
 801a772:	021b      	lsls	r3, r3, #8
 801a774:	b29c      	uxth	r4, r3
 801a776:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a77a:	f7fd ff6d 	bl	8018658 <WIZCHIP_READ>
 801a77e:	4603      	mov	r3, r0
 801a780:	b29b      	uxth	r3, r3
 801a782:	4423      	add	r3, r4
 801a784:	b29a      	uxth	r2, r3
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	805a      	strh	r2, [r3, #2]
}
 801a78a:	bf00      	nop
 801a78c:	370c      	adds	r7, #12
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd90      	pop	{r4, r7, pc}
	...

0801a794 <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801a798:	2204      	movs	r2, #4
 801a79a:	4909      	ldr	r1, [pc, #36]	; (801a7c0 <default_ip_assign+0x2c>)
 801a79c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a7a0:	f7fe f854 	bl	801884c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801a7a4:	2204      	movs	r2, #4
 801a7a6:	4907      	ldr	r1, [pc, #28]	; (801a7c4 <default_ip_assign+0x30>)
 801a7a8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a7ac:	f7fe f84e 	bl	801884c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801a7b0:	2204      	movs	r2, #4
 801a7b2:	4905      	ldr	r1, [pc, #20]	; (801a7c8 <default_ip_assign+0x34>)
 801a7b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a7b8:	f7fe f848 	bl	801884c <WIZCHIP_WRITE_BUF>
}
 801a7bc:	bf00      	nop
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	20000994 	.word	0x20000994
 801a7c4:	2000099c 	.word	0x2000099c
 801a7c8:	20000998 	.word	0x20000998

0801a7cc <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801a7d0:	2180      	movs	r1, #128	; 0x80
 801a7d2:	2000      	movs	r0, #0
 801a7d4:	f7fd ff8c 	bl	80186f0 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a7d8:	2000      	movs	r0, #0
 801a7da:	f7fd ff3d 	bl	8018658 <WIZCHIP_READ>
   default_ip_assign();
 801a7de:	f7ff ffd9 	bl	801a794 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801a7e2:	2206      	movs	r2, #6
 801a7e4:	4903      	ldr	r1, [pc, #12]	; (801a7f4 <default_ip_update+0x28>)
 801a7e6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a7ea:	f7fe f82f 	bl	801884c <WIZCHIP_WRITE_BUF>
}
 801a7ee:	bf00      	nop
 801a7f0:	bd80      	pop	{r7, pc}
 801a7f2:	bf00      	nop
 801a7f4:	200009b4 	.word	0x200009b4

0801a7f8 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801a7fc:	2180      	movs	r1, #128	; 0x80
 801a7fe:	2000      	movs	r0, #0
 801a800:	f7fd ff76 	bl	80186f0 <WIZCHIP_WRITE>
	getMR(); // for delay
 801a804:	2000      	movs	r0, #0
 801a806:	f7fd ff27 	bl	8018658 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801a80a:	2206      	movs	r2, #6
 801a80c:	4903      	ldr	r1, [pc, #12]	; (801a81c <default_ip_conflict+0x24>)
 801a80e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a812:	f7fe f81b 	bl	801884c <WIZCHIP_WRITE_BUF>
}
 801a816:	bf00      	nop
 801a818:	bd80      	pop	{r7, pc}
 801a81a:	bf00      	nop
 801a81c:	200009b4 	.word	0x200009b4

0801a820 <default_delay>:

void default_delay(uint32_t time){}
 801a820:	b480      	push	{r7}
 801a822:	b083      	sub	sp, #12
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
 801a828:	bf00      	nop
 801a82a:	370c      	adds	r7, #12
 801a82c:	46bd      	mov	sp, r7
 801a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a832:	4770      	bx	lr

0801a834 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801a834:	b480      	push	{r7}
 801a836:	b085      	sub	sp, #20
 801a838:	af00      	add	r7, sp, #0
 801a83a:	60f8      	str	r0, [r7, #12]
 801a83c:	60b9      	str	r1, [r7, #8]
 801a83e:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801a840:	4b10      	ldr	r3, [pc, #64]	; (801a884 <reg_dhcp_cbfunc+0x50>)
 801a842:	4a11      	ldr	r2, [pc, #68]	; (801a888 <reg_dhcp_cbfunc+0x54>)
 801a844:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801a846:	4b11      	ldr	r3, [pc, #68]	; (801a88c <reg_dhcp_cbfunc+0x58>)
 801a848:	4a11      	ldr	r2, [pc, #68]	; (801a890 <reg_dhcp_cbfunc+0x5c>)
 801a84a:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801a84c:	4b11      	ldr	r3, [pc, #68]	; (801a894 <reg_dhcp_cbfunc+0x60>)
 801a84e:	4a12      	ldr	r2, [pc, #72]	; (801a898 <reg_dhcp_cbfunc+0x64>)
 801a850:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d002      	beq.n	801a85e <reg_dhcp_cbfunc+0x2a>
 801a858:	4a0a      	ldr	r2, [pc, #40]	; (801a884 <reg_dhcp_cbfunc+0x50>)
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801a85e:	68bb      	ldr	r3, [r7, #8]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d002      	beq.n	801a86a <reg_dhcp_cbfunc+0x36>
 801a864:	4a09      	ldr	r2, [pc, #36]	; (801a88c <reg_dhcp_cbfunc+0x58>)
 801a866:	68bb      	ldr	r3, [r7, #8]
 801a868:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d002      	beq.n	801a876 <reg_dhcp_cbfunc+0x42>
 801a870:	4a08      	ldr	r2, [pc, #32]	; (801a894 <reg_dhcp_cbfunc+0x60>)
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	6013      	str	r3, [r2, #0]
}
 801a876:	bf00      	nop
 801a878:	3714      	adds	r7, #20
 801a87a:	46bd      	mov	sp, r7
 801a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a880:	4770      	bx	lr
 801a882:	bf00      	nop
 801a884:	20000104 	.word	0x20000104
 801a888:	0801a795 	.word	0x0801a795
 801a88c:	20000108 	.word	0x20000108
 801a890:	0801a7cd 	.word	0x0801a7cd
 801a894:	2000010c 	.word	0x2000010c
 801a898:	0801a7f9 	.word	0x0801a7f9

0801a89c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b084      	sub	sp, #16
 801a8a0:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801a8a2:	463b      	mov	r3, r7
 801a8a4:	2206      	movs	r2, #6
 801a8a6:	4619      	mov	r1, r3
 801a8a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a8ac:	f7fd ff6e 	bl	801878c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801a8b0:	4b72      	ldr	r3, [pc, #456]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	2201      	movs	r2, #1
 801a8b6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801a8b8:	4b70      	ldr	r3, [pc, #448]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	2201      	movs	r2, #1
 801a8be:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801a8c0:	4b6e      	ldr	r3, [pc, #440]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	2206      	movs	r2, #6
 801a8c6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801a8c8:	4b6c      	ldr	r3, [pc, #432]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801a8d0:	4b6a      	ldr	r3, [pc, #424]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	3304      	adds	r3, #4
 801a8d6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801a8d8:	4b69      	ldr	r3, [pc, #420]	; (801aa80 <makeDHCPMSG+0x1e4>)
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	0e1b      	lsrs	r3, r3, #24
 801a8de:	b2da      	uxtb	r2, r3
 801a8e0:	68bb      	ldr	r3, [r7, #8]
 801a8e2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801a8e4:	4b66      	ldr	r3, [pc, #408]	; (801aa80 <makeDHCPMSG+0x1e4>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	0c1a      	lsrs	r2, r3, #16
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	3301      	adds	r3, #1
 801a8ee:	b2d2      	uxtb	r2, r2
 801a8f0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801a8f2:	4b63      	ldr	r3, [pc, #396]	; (801aa80 <makeDHCPMSG+0x1e4>)
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	0a1a      	lsrs	r2, r3, #8
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	3302      	adds	r3, #2
 801a8fc:	b2d2      	uxtb	r2, r2
 801a8fe:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801a900:	4b5f      	ldr	r3, [pc, #380]	; (801aa80 <makeDHCPMSG+0x1e4>)
 801a902:	681a      	ldr	r2, [r3, #0]
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	3303      	adds	r3, #3
 801a908:	b2d2      	uxtb	r2, r2
 801a90a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801a90c:	4b5b      	ldr	r3, [pc, #364]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	2200      	movs	r2, #0
 801a912:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801a914:	4b59      	ldr	r3, [pc, #356]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	330a      	adds	r3, #10
 801a91a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801a91c:	68bb      	ldr	r3, [r7, #8]
 801a91e:	2280      	movs	r2, #128	; 0x80
 801a920:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801a922:	68bb      	ldr	r3, [r7, #8]
 801a924:	3301      	adds	r3, #1
 801a926:	2200      	movs	r2, #0
 801a928:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801a92a:	4b54      	ldr	r3, [pc, #336]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	2200      	movs	r2, #0
 801a930:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801a932:	4b52      	ldr	r3, [pc, #328]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2200      	movs	r2, #0
 801a938:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801a93a:	4b50      	ldr	r3, [pc, #320]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2200      	movs	r2, #0
 801a940:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801a942:	4b4e      	ldr	r3, [pc, #312]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	2200      	movs	r2, #0
 801a948:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801a94a:	4b4c      	ldr	r3, [pc, #304]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	2200      	movs	r2, #0
 801a950:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801a952:	4b4a      	ldr	r3, [pc, #296]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	2200      	movs	r2, #0
 801a958:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801a95a:	4b48      	ldr	r3, [pc, #288]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	2200      	movs	r2, #0
 801a960:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801a962:	4b46      	ldr	r3, [pc, #280]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	2200      	movs	r2, #0
 801a968:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801a96a:	4b44      	ldr	r3, [pc, #272]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	2200      	movs	r2, #0
 801a970:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801a972:	4b42      	ldr	r3, [pc, #264]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	2200      	movs	r2, #0
 801a978:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801a97a:	4b40      	ldr	r3, [pc, #256]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	2200      	movs	r2, #0
 801a980:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801a982:	4b3e      	ldr	r3, [pc, #248]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	2200      	movs	r2, #0
 801a988:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801a98a:	4b3c      	ldr	r3, [pc, #240]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	2200      	movs	r2, #0
 801a990:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801a992:	4b3a      	ldr	r3, [pc, #232]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	2200      	movs	r2, #0
 801a998:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801a99a:	4b38      	ldr	r3, [pc, #224]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	2200      	movs	r2, #0
 801a9a0:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801a9a2:	4b36      	ldr	r3, [pc, #216]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801a9aa:	4b34      	ldr	r3, [pc, #208]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	4a35      	ldr	r2, [pc, #212]	; (801aa84 <makeDHCPMSG+0x1e8>)
 801a9b0:	7812      	ldrb	r2, [r2, #0]
 801a9b2:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801a9b4:	4b31      	ldr	r3, [pc, #196]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	4a32      	ldr	r2, [pc, #200]	; (801aa84 <makeDHCPMSG+0x1e8>)
 801a9ba:	7852      	ldrb	r2, [r2, #1]
 801a9bc:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801a9be:	4b2f      	ldr	r3, [pc, #188]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	4a30      	ldr	r2, [pc, #192]	; (801aa84 <makeDHCPMSG+0x1e8>)
 801a9c4:	7892      	ldrb	r2, [r2, #2]
 801a9c6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801a9c8:	4b2c      	ldr	r3, [pc, #176]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	4a2d      	ldr	r2, [pc, #180]	; (801aa84 <makeDHCPMSG+0x1e8>)
 801a9ce:	78d2      	ldrb	r2, [r2, #3]
 801a9d0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801a9d2:	4b2a      	ldr	r3, [pc, #168]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	4a2b      	ldr	r2, [pc, #172]	; (801aa84 <makeDHCPMSG+0x1e8>)
 801a9d8:	7912      	ldrb	r2, [r2, #4]
 801a9da:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801a9de:	4b27      	ldr	r3, [pc, #156]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	4a28      	ldr	r2, [pc, #160]	; (801aa84 <makeDHCPMSG+0x1e8>)
 801a9e4:	7952      	ldrb	r2, [r2, #5]
 801a9e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801a9ea:	2306      	movs	r3, #6
 801a9ec:	73fb      	strb	r3, [r7, #15]
 801a9ee:	e008      	b.n	801aa02 <makeDHCPMSG+0x166>
 801a9f0:	4b22      	ldr	r3, [pc, #136]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801a9f2:	681a      	ldr	r2, [r3, #0]
 801a9f4:	7bfb      	ldrb	r3, [r7, #15]
 801a9f6:	4413      	add	r3, r2
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	771a      	strb	r2, [r3, #28]
 801a9fc:	7bfb      	ldrb	r3, [r7, #15]
 801a9fe:	3301      	adds	r3, #1
 801aa00:	73fb      	strb	r3, [r7, #15]
 801aa02:	7bfb      	ldrb	r3, [r7, #15]
 801aa04:	2b0f      	cmp	r3, #15
 801aa06:	d9f3      	bls.n	801a9f0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	73fb      	strb	r3, [r7, #15]
 801aa0c:	e009      	b.n	801aa22 <makeDHCPMSG+0x186>
 801aa0e:	4b1b      	ldr	r3, [pc, #108]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801aa10:	681a      	ldr	r2, [r3, #0]
 801aa12:	7bfb      	ldrb	r3, [r7, #15]
 801aa14:	4413      	add	r3, r2
 801aa16:	2200      	movs	r2, #0
 801aa18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801aa1c:	7bfb      	ldrb	r3, [r7, #15]
 801aa1e:	3301      	adds	r3, #1
 801aa20:	73fb      	strb	r3, [r7, #15]
 801aa22:	7bfb      	ldrb	r3, [r7, #15]
 801aa24:	2b3f      	cmp	r3, #63	; 0x3f
 801aa26:	d9f2      	bls.n	801aa0e <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	73fb      	strb	r3, [r7, #15]
 801aa2c:	e009      	b.n	801aa42 <makeDHCPMSG+0x1a6>
 801aa2e:	4b13      	ldr	r3, [pc, #76]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801aa30:	681a      	ldr	r2, [r3, #0]
 801aa32:	7bfb      	ldrb	r3, [r7, #15]
 801aa34:	4413      	add	r3, r2
 801aa36:	2200      	movs	r2, #0
 801aa38:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801aa3c:	7bfb      	ldrb	r3, [r7, #15]
 801aa3e:	3301      	adds	r3, #1
 801aa40:	73fb      	strb	r3, [r7, #15]
 801aa42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	daf1      	bge.n	801aa2e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801aa4a:	4b0c      	ldr	r3, [pc, #48]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	2263      	movs	r2, #99	; 0x63
 801aa50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801aa54:	4b09      	ldr	r3, [pc, #36]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	2282      	movs	r2, #130	; 0x82
 801aa5a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801aa5e:	4b07      	ldr	r3, [pc, #28]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	2253      	movs	r2, #83	; 0x53
 801aa64:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801aa68:	4b04      	ldr	r3, [pc, #16]	; (801aa7c <makeDHCPMSG+0x1e0>)
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	2263      	movs	r2, #99	; 0x63
 801aa6e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 801aa72:	bf00      	nop
 801aa74:	3710      	adds	r7, #16
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	200009b0 	.word	0x200009b0
 801aa80:	200009ac 	.word	0x200009ac
 801aa84:	200009b4 	.word	0x200009b4

0801aa88 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801aa88:	b5b0      	push	{r4, r5, r7, lr}
 801aa8a:	b084      	sub	sp, #16
 801aa8c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801aa8e:	2300      	movs	r3, #0
 801aa90:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801aa92:	f7ff ff03 	bl	801a89c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801aa96:	4b56      	ldr	r3, [pc, #344]	; (801abf0 <send_DHCP_DISCOVER+0x168>)
 801aa98:	2200      	movs	r2, #0
 801aa9a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801aa9c:	4b54      	ldr	r3, [pc, #336]	; (801abf0 <send_DHCP_DISCOVER+0x168>)
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801aaa2:	4b53      	ldr	r3, [pc, #332]	; (801abf0 <send_DHCP_DISCOVER+0x168>)
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801aaa8:	4b51      	ldr	r3, [pc, #324]	; (801abf0 <send_DHCP_DISCOVER+0x168>)
 801aaaa:	2200      	movs	r2, #0
 801aaac:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801aaae:	4b51      	ldr	r3, [pc, #324]	; (801abf4 <send_DHCP_DISCOVER+0x16c>)
 801aab0:	2200      	movs	r2, #0
 801aab2:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801aab4:	4b4f      	ldr	r3, [pc, #316]	; (801abf4 <send_DHCP_DISCOVER+0x16c>)
 801aab6:	2200      	movs	r2, #0
 801aab8:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801aaba:	4b4e      	ldr	r3, [pc, #312]	; (801abf4 <send_DHCP_DISCOVER+0x16c>)
 801aabc:	2200      	movs	r2, #0
 801aabe:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801aac0:	4b4c      	ldr	r3, [pc, #304]	; (801abf4 <send_DHCP_DISCOVER+0x16c>)
 801aac2:	2200      	movs	r2, #0
 801aac4:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801aac6:	2304      	movs	r3, #4
 801aac8:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801aaca:	4b4b      	ldr	r3, [pc, #300]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801aacc:	681a      	ldr	r2, [r3, #0]
 801aace:	88bb      	ldrh	r3, [r7, #4]
 801aad0:	1c59      	adds	r1, r3, #1
 801aad2:	80b9      	strh	r1, [r7, #4]
 801aad4:	4413      	add	r3, r2
 801aad6:	2235      	movs	r2, #53	; 0x35
 801aad8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801aadc:	4b46      	ldr	r3, [pc, #280]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801aade:	681a      	ldr	r2, [r3, #0]
 801aae0:	88bb      	ldrh	r3, [r7, #4]
 801aae2:	1c59      	adds	r1, r3, #1
 801aae4:	80b9      	strh	r1, [r7, #4]
 801aae6:	4413      	add	r3, r2
 801aae8:	2201      	movs	r2, #1
 801aaea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801aaee:	4b42      	ldr	r3, [pc, #264]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801aaf0:	681a      	ldr	r2, [r3, #0]
 801aaf2:	88bb      	ldrh	r3, [r7, #4]
 801aaf4:	1c59      	adds	r1, r3, #1
 801aaf6:	80b9      	strh	r1, [r7, #4]
 801aaf8:	4413      	add	r3, r2
 801aafa:	2201      	movs	r2, #1
 801aafc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801ab00:	4b3d      	ldr	r3, [pc, #244]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab02:	681a      	ldr	r2, [r3, #0]
 801ab04:	88bb      	ldrh	r3, [r7, #4]
 801ab06:	1c59      	adds	r1, r3, #1
 801ab08:	80b9      	strh	r1, [r7, #4]
 801ab0a:	4413      	add	r3, r2
 801ab0c:	223d      	movs	r2, #61	; 0x3d
 801ab0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801ab12:	4b39      	ldr	r3, [pc, #228]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab14:	681a      	ldr	r2, [r3, #0]
 801ab16:	88bb      	ldrh	r3, [r7, #4]
 801ab18:	1c59      	adds	r1, r3, #1
 801ab1a:	80b9      	strh	r1, [r7, #4]
 801ab1c:	4413      	add	r3, r2
 801ab1e:	2207      	movs	r2, #7
 801ab20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ab24:	4b34      	ldr	r3, [pc, #208]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab26:	681a      	ldr	r2, [r3, #0]
 801ab28:	88bb      	ldrh	r3, [r7, #4]
 801ab2a:	1c59      	adds	r1, r3, #1
 801ab2c:	80b9      	strh	r1, [r7, #4]
 801ab2e:	4413      	add	r3, r2
 801ab30:	2201      	movs	r2, #1
 801ab32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801ab36:	4b30      	ldr	r3, [pc, #192]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab38:	681a      	ldr	r2, [r3, #0]
 801ab3a:	88bb      	ldrh	r3, [r7, #4]
 801ab3c:	1c59      	adds	r1, r3, #1
 801ab3e:	80b9      	strh	r1, [r7, #4]
 801ab40:	4618      	mov	r0, r3
 801ab42:	4b2e      	ldr	r3, [pc, #184]	; (801abfc <send_DHCP_DISCOVER+0x174>)
 801ab44:	7819      	ldrb	r1, [r3, #0]
 801ab46:	1813      	adds	r3, r2, r0
 801ab48:	460a      	mov	r2, r1
 801ab4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801ab4e:	4b2a      	ldr	r3, [pc, #168]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab50:	681a      	ldr	r2, [r3, #0]
 801ab52:	88bb      	ldrh	r3, [r7, #4]
 801ab54:	1c59      	adds	r1, r3, #1
 801ab56:	80b9      	strh	r1, [r7, #4]
 801ab58:	4618      	mov	r0, r3
 801ab5a:	4b28      	ldr	r3, [pc, #160]	; (801abfc <send_DHCP_DISCOVER+0x174>)
 801ab5c:	7859      	ldrb	r1, [r3, #1]
 801ab5e:	1813      	adds	r3, r2, r0
 801ab60:	460a      	mov	r2, r1
 801ab62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801ab66:	4b24      	ldr	r3, [pc, #144]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab68:	681a      	ldr	r2, [r3, #0]
 801ab6a:	88bb      	ldrh	r3, [r7, #4]
 801ab6c:	1c59      	adds	r1, r3, #1
 801ab6e:	80b9      	strh	r1, [r7, #4]
 801ab70:	4618      	mov	r0, r3
 801ab72:	4b22      	ldr	r3, [pc, #136]	; (801abfc <send_DHCP_DISCOVER+0x174>)
 801ab74:	7899      	ldrb	r1, [r3, #2]
 801ab76:	1813      	adds	r3, r2, r0
 801ab78:	460a      	mov	r2, r1
 801ab7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801ab7e:	4b1e      	ldr	r3, [pc, #120]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab80:	681a      	ldr	r2, [r3, #0]
 801ab82:	88bb      	ldrh	r3, [r7, #4]
 801ab84:	1c59      	adds	r1, r3, #1
 801ab86:	80b9      	strh	r1, [r7, #4]
 801ab88:	4618      	mov	r0, r3
 801ab8a:	4b1c      	ldr	r3, [pc, #112]	; (801abfc <send_DHCP_DISCOVER+0x174>)
 801ab8c:	78d9      	ldrb	r1, [r3, #3]
 801ab8e:	1813      	adds	r3, r2, r0
 801ab90:	460a      	mov	r2, r1
 801ab92:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801ab96:	4b18      	ldr	r3, [pc, #96]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801ab98:	681a      	ldr	r2, [r3, #0]
 801ab9a:	88bb      	ldrh	r3, [r7, #4]
 801ab9c:	1c59      	adds	r1, r3, #1
 801ab9e:	80b9      	strh	r1, [r7, #4]
 801aba0:	4618      	mov	r0, r3
 801aba2:	4b16      	ldr	r3, [pc, #88]	; (801abfc <send_DHCP_DISCOVER+0x174>)
 801aba4:	7919      	ldrb	r1, [r3, #4]
 801aba6:	1813      	adds	r3, r2, r0
 801aba8:	460a      	mov	r2, r1
 801abaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801abae:	4b12      	ldr	r3, [pc, #72]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801abb0:	681a      	ldr	r2, [r3, #0]
 801abb2:	88bb      	ldrh	r3, [r7, #4]
 801abb4:	1c59      	adds	r1, r3, #1
 801abb6:	80b9      	strh	r1, [r7, #4]
 801abb8:	4618      	mov	r0, r3
 801abba:	4b10      	ldr	r3, [pc, #64]	; (801abfc <send_DHCP_DISCOVER+0x174>)
 801abbc:	7959      	ldrb	r1, [r3, #5]
 801abbe:	1813      	adds	r3, r2, r0
 801abc0:	460a      	mov	r2, r1
 801abc2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801abc6:	4b0c      	ldr	r3, [pc, #48]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801abc8:	681a      	ldr	r2, [r3, #0]
 801abca:	88bb      	ldrh	r3, [r7, #4]
 801abcc:	1c59      	adds	r1, r3, #1
 801abce:	80b9      	strh	r1, [r7, #4]
 801abd0:	4413      	add	r3, r2
 801abd2:	220c      	movs	r2, #12
 801abd4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801abd8:	4b07      	ldr	r3, [pc, #28]	; (801abf8 <send_DHCP_DISCOVER+0x170>)
 801abda:	681a      	ldr	r2, [r3, #0]
 801abdc:	88bb      	ldrh	r3, [r7, #4]
 801abde:	1c59      	adds	r1, r3, #1
 801abe0:	80b9      	strh	r1, [r7, #4]
 801abe2:	4413      	add	r3, r2
 801abe4:	2200      	movs	r2, #0
 801abe6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801abea:	2300      	movs	r3, #0
 801abec:	80fb      	strh	r3, [r7, #6]
 801abee:	e017      	b.n	801ac20 <send_DHCP_DISCOVER+0x198>
 801abf0:	20000988 	.word	0x20000988
 801abf4:	2000098c 	.word	0x2000098c
 801abf8:	200009b0 	.word	0x200009b0
 801abfc:	200009b4 	.word	0x200009b4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801ac00:	88f9      	ldrh	r1, [r7, #6]
 801ac02:	4b80      	ldr	r3, [pc, #512]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ac04:	681a      	ldr	r2, [r3, #0]
 801ac06:	88bb      	ldrh	r3, [r7, #4]
 801ac08:	1c58      	adds	r0, r3, #1
 801ac0a:	80b8      	strh	r0, [r7, #4]
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	4b7e      	ldr	r3, [pc, #504]	; (801ae08 <send_DHCP_DISCOVER+0x380>)
 801ac10:	5c59      	ldrb	r1, [r3, r1]
 801ac12:	1813      	adds	r3, r2, r0
 801ac14:	460a      	mov	r2, r1
 801ac16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ac1a:	88fb      	ldrh	r3, [r7, #6]
 801ac1c:	3301      	adds	r3, #1
 801ac1e:	80fb      	strh	r3, [r7, #6]
 801ac20:	88fb      	ldrh	r3, [r7, #6]
 801ac22:	4a79      	ldr	r2, [pc, #484]	; (801ae08 <send_DHCP_DISCOVER+0x380>)
 801ac24:	5cd3      	ldrb	r3, [r2, r3]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d1ea      	bne.n	801ac00 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801ac2a:	4b78      	ldr	r3, [pc, #480]	; (801ae0c <send_DHCP_DISCOVER+0x384>)
 801ac2c:	78db      	ldrb	r3, [r3, #3]
 801ac2e:	091b      	lsrs	r3, r3, #4
 801ac30:	b2da      	uxtb	r2, r3
 801ac32:	4b74      	ldr	r3, [pc, #464]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ac34:	681c      	ldr	r4, [r3, #0]
 801ac36:	88bb      	ldrh	r3, [r7, #4]
 801ac38:	1c59      	adds	r1, r3, #1
 801ac3a:	80b9      	strh	r1, [r7, #4]
 801ac3c:	461d      	mov	r5, r3
 801ac3e:	4610      	mov	r0, r2
 801ac40:	f001 f9c4 	bl	801bfcc <NibbleToHex>
 801ac44:	4603      	mov	r3, r0
 801ac46:	461a      	mov	r2, r3
 801ac48:	1963      	adds	r3, r4, r5
 801ac4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801ac4e:	4b6f      	ldr	r3, [pc, #444]	; (801ae0c <send_DHCP_DISCOVER+0x384>)
 801ac50:	78da      	ldrb	r2, [r3, #3]
 801ac52:	4b6c      	ldr	r3, [pc, #432]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ac54:	681c      	ldr	r4, [r3, #0]
 801ac56:	88bb      	ldrh	r3, [r7, #4]
 801ac58:	1c59      	adds	r1, r3, #1
 801ac5a:	80b9      	strh	r1, [r7, #4]
 801ac5c:	461d      	mov	r5, r3
 801ac5e:	4610      	mov	r0, r2
 801ac60:	f001 f9b4 	bl	801bfcc <NibbleToHex>
 801ac64:	4603      	mov	r3, r0
 801ac66:	461a      	mov	r2, r3
 801ac68:	1963      	adds	r3, r4, r5
 801ac6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801ac6e:	4b67      	ldr	r3, [pc, #412]	; (801ae0c <send_DHCP_DISCOVER+0x384>)
 801ac70:	791b      	ldrb	r3, [r3, #4]
 801ac72:	091b      	lsrs	r3, r3, #4
 801ac74:	b2da      	uxtb	r2, r3
 801ac76:	4b63      	ldr	r3, [pc, #396]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ac78:	681c      	ldr	r4, [r3, #0]
 801ac7a:	88bb      	ldrh	r3, [r7, #4]
 801ac7c:	1c59      	adds	r1, r3, #1
 801ac7e:	80b9      	strh	r1, [r7, #4]
 801ac80:	461d      	mov	r5, r3
 801ac82:	4610      	mov	r0, r2
 801ac84:	f001 f9a2 	bl	801bfcc <NibbleToHex>
 801ac88:	4603      	mov	r3, r0
 801ac8a:	461a      	mov	r2, r3
 801ac8c:	1963      	adds	r3, r4, r5
 801ac8e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801ac92:	4b5e      	ldr	r3, [pc, #376]	; (801ae0c <send_DHCP_DISCOVER+0x384>)
 801ac94:	791a      	ldrb	r2, [r3, #4]
 801ac96:	4b5b      	ldr	r3, [pc, #364]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ac98:	681c      	ldr	r4, [r3, #0]
 801ac9a:	88bb      	ldrh	r3, [r7, #4]
 801ac9c:	1c59      	adds	r1, r3, #1
 801ac9e:	80b9      	strh	r1, [r7, #4]
 801aca0:	461d      	mov	r5, r3
 801aca2:	4610      	mov	r0, r2
 801aca4:	f001 f992 	bl	801bfcc <NibbleToHex>
 801aca8:	4603      	mov	r3, r0
 801acaa:	461a      	mov	r2, r3
 801acac:	1963      	adds	r3, r4, r5
 801acae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801acb2:	4b56      	ldr	r3, [pc, #344]	; (801ae0c <send_DHCP_DISCOVER+0x384>)
 801acb4:	795b      	ldrb	r3, [r3, #5]
 801acb6:	091b      	lsrs	r3, r3, #4
 801acb8:	b2da      	uxtb	r2, r3
 801acba:	4b52      	ldr	r3, [pc, #328]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801acbc:	681c      	ldr	r4, [r3, #0]
 801acbe:	88bb      	ldrh	r3, [r7, #4]
 801acc0:	1c59      	adds	r1, r3, #1
 801acc2:	80b9      	strh	r1, [r7, #4]
 801acc4:	461d      	mov	r5, r3
 801acc6:	4610      	mov	r0, r2
 801acc8:	f001 f980 	bl	801bfcc <NibbleToHex>
 801accc:	4603      	mov	r3, r0
 801acce:	461a      	mov	r2, r3
 801acd0:	1963      	adds	r3, r4, r5
 801acd2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801acd6:	4b4d      	ldr	r3, [pc, #308]	; (801ae0c <send_DHCP_DISCOVER+0x384>)
 801acd8:	795a      	ldrb	r2, [r3, #5]
 801acda:	4b4a      	ldr	r3, [pc, #296]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801acdc:	681c      	ldr	r4, [r3, #0]
 801acde:	88bb      	ldrh	r3, [r7, #4]
 801ace0:	1c59      	adds	r1, r3, #1
 801ace2:	80b9      	strh	r1, [r7, #4]
 801ace4:	461d      	mov	r5, r3
 801ace6:	4610      	mov	r0, r2
 801ace8:	f001 f970 	bl	801bfcc <NibbleToHex>
 801acec:	4603      	mov	r3, r0
 801acee:	461a      	mov	r2, r3
 801acf0:	1963      	adds	r3, r4, r5
 801acf2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801acf6:	88fb      	ldrh	r3, [r7, #6]
 801acf8:	b2d9      	uxtb	r1, r3
 801acfa:	4b42      	ldr	r3, [pc, #264]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801acfc:	681a      	ldr	r2, [r3, #0]
 801acfe:	88b8      	ldrh	r0, [r7, #4]
 801ad00:	88fb      	ldrh	r3, [r7, #6]
 801ad02:	3307      	adds	r3, #7
 801ad04:	1ac3      	subs	r3, r0, r3
 801ad06:	3106      	adds	r1, #6
 801ad08:	b2c9      	uxtb	r1, r1
 801ad0a:	4413      	add	r3, r2
 801ad0c:	460a      	mov	r2, r1
 801ad0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801ad12:	4b3c      	ldr	r3, [pc, #240]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad14:	681a      	ldr	r2, [r3, #0]
 801ad16:	88bb      	ldrh	r3, [r7, #4]
 801ad18:	1c59      	adds	r1, r3, #1
 801ad1a:	80b9      	strh	r1, [r7, #4]
 801ad1c:	4413      	add	r3, r2
 801ad1e:	2237      	movs	r2, #55	; 0x37
 801ad20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801ad24:	4b37      	ldr	r3, [pc, #220]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad26:	681a      	ldr	r2, [r3, #0]
 801ad28:	88bb      	ldrh	r3, [r7, #4]
 801ad2a:	1c59      	adds	r1, r3, #1
 801ad2c:	80b9      	strh	r1, [r7, #4]
 801ad2e:	4413      	add	r3, r2
 801ad30:	2206      	movs	r2, #6
 801ad32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801ad36:	4b33      	ldr	r3, [pc, #204]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad38:	681a      	ldr	r2, [r3, #0]
 801ad3a:	88bb      	ldrh	r3, [r7, #4]
 801ad3c:	1c59      	adds	r1, r3, #1
 801ad3e:	80b9      	strh	r1, [r7, #4]
 801ad40:	4413      	add	r3, r2
 801ad42:	2201      	movs	r2, #1
 801ad44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801ad48:	4b2e      	ldr	r3, [pc, #184]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad4a:	681a      	ldr	r2, [r3, #0]
 801ad4c:	88bb      	ldrh	r3, [r7, #4]
 801ad4e:	1c59      	adds	r1, r3, #1
 801ad50:	80b9      	strh	r1, [r7, #4]
 801ad52:	4413      	add	r3, r2
 801ad54:	2203      	movs	r2, #3
 801ad56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801ad5a:	4b2a      	ldr	r3, [pc, #168]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad5c:	681a      	ldr	r2, [r3, #0]
 801ad5e:	88bb      	ldrh	r3, [r7, #4]
 801ad60:	1c59      	adds	r1, r3, #1
 801ad62:	80b9      	strh	r1, [r7, #4]
 801ad64:	4413      	add	r3, r2
 801ad66:	2206      	movs	r2, #6
 801ad68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801ad6c:	4b25      	ldr	r3, [pc, #148]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad6e:	681a      	ldr	r2, [r3, #0]
 801ad70:	88bb      	ldrh	r3, [r7, #4]
 801ad72:	1c59      	adds	r1, r3, #1
 801ad74:	80b9      	strh	r1, [r7, #4]
 801ad76:	4413      	add	r3, r2
 801ad78:	220f      	movs	r2, #15
 801ad7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801ad7e:	4b21      	ldr	r3, [pc, #132]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad80:	681a      	ldr	r2, [r3, #0]
 801ad82:	88bb      	ldrh	r3, [r7, #4]
 801ad84:	1c59      	adds	r1, r3, #1
 801ad86:	80b9      	strh	r1, [r7, #4]
 801ad88:	4413      	add	r3, r2
 801ad8a:	223a      	movs	r2, #58	; 0x3a
 801ad8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801ad90:	4b1c      	ldr	r3, [pc, #112]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ad92:	681a      	ldr	r2, [r3, #0]
 801ad94:	88bb      	ldrh	r3, [r7, #4]
 801ad96:	1c59      	adds	r1, r3, #1
 801ad98:	80b9      	strh	r1, [r7, #4]
 801ad9a:	4413      	add	r3, r2
 801ad9c:	223b      	movs	r2, #59	; 0x3b
 801ad9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801ada2:	4b18      	ldr	r3, [pc, #96]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801ada4:	681a      	ldr	r2, [r3, #0]
 801ada6:	88bb      	ldrh	r3, [r7, #4]
 801ada8:	1c59      	adds	r1, r3, #1
 801adaa:	80b9      	strh	r1, [r7, #4]
 801adac:	4413      	add	r3, r2
 801adae:	22ff      	movs	r2, #255	; 0xff
 801adb0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801adb4:	88bb      	ldrh	r3, [r7, #4]
 801adb6:	80fb      	strh	r3, [r7, #6]
 801adb8:	e009      	b.n	801adce <send_DHCP_DISCOVER+0x346>
 801adba:	4b12      	ldr	r3, [pc, #72]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801adbc:	681a      	ldr	r2, [r3, #0]
 801adbe:	88fb      	ldrh	r3, [r7, #6]
 801adc0:	4413      	add	r3, r2
 801adc2:	2200      	movs	r2, #0
 801adc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801adc8:	88fb      	ldrh	r3, [r7, #6]
 801adca:	3301      	adds	r3, #1
 801adcc:	80fb      	strh	r3, [r7, #6]
 801adce:	88fb      	ldrh	r3, [r7, #6]
 801add0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801add4:	d3f1      	bcc.n	801adba <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801add6:	23ff      	movs	r3, #255	; 0xff
 801add8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801adda:	23ff      	movs	r3, #255	; 0xff
 801addc:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801adde:	23ff      	movs	r3, #255	; 0xff
 801ade0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801ade2:	23ff      	movs	r3, #255	; 0xff
 801ade4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801ade6:	4b0a      	ldr	r3, [pc, #40]	; (801ae10 <send_DHCP_DISCOVER+0x388>)
 801ade8:	7818      	ldrb	r0, [r3, #0]
 801adea:	4b06      	ldr	r3, [pc, #24]	; (801ae04 <send_DHCP_DISCOVER+0x37c>)
 801adec:	6819      	ldr	r1, [r3, #0]
 801adee:	463b      	mov	r3, r7
 801adf0:	2243      	movs	r2, #67	; 0x43
 801adf2:	9200      	str	r2, [sp, #0]
 801adf4:	f44f 7209 	mov.w	r2, #548	; 0x224
 801adf8:	f7fe fbfc 	bl	80195f4 <sendto>
}
 801adfc:	bf00      	nop
 801adfe:	3708      	adds	r7, #8
 801ae00:	46bd      	mov	sp, r7
 801ae02:	bdb0      	pop	{r4, r5, r7, pc}
 801ae04:	200009b0 	.word	0x200009b0
 801ae08:	200000f8 	.word	0x200000f8
 801ae0c:	200009b4 	.word	0x200009b4
 801ae10:	20000985 	.word	0x20000985

0801ae14 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801ae14:	b5b0      	push	{r4, r5, r7, lr}
 801ae16:	b086      	sub	sp, #24
 801ae18:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801ae1e:	f7ff fd3d 	bl	801a89c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801ae22:	4b1b      	ldr	r3, [pc, #108]	; (801ae90 <send_DHCP_REQUEST+0x7c>)
 801ae24:	f993 3000 	ldrsb.w	r3, [r3]
 801ae28:	2b03      	cmp	r3, #3
 801ae2a:	d004      	beq.n	801ae36 <send_DHCP_REQUEST+0x22>
 801ae2c:	4b18      	ldr	r3, [pc, #96]	; (801ae90 <send_DHCP_REQUEST+0x7c>)
 801ae2e:	f993 3000 	ldrsb.w	r3, [r3]
 801ae32:	2b04      	cmp	r3, #4
 801ae34:	d134      	bne.n	801aea0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801ae36:	4b17      	ldr	r3, [pc, #92]	; (801ae94 <send_DHCP_REQUEST+0x80>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	330a      	adds	r3, #10
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801ae40:	4b14      	ldr	r3, [pc, #80]	; (801ae94 <send_DHCP_REQUEST+0x80>)
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	330a      	adds	r3, #10
 801ae46:	3301      	adds	r3, #1
 801ae48:	2200      	movs	r2, #0
 801ae4a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801ae4c:	4b11      	ldr	r3, [pc, #68]	; (801ae94 <send_DHCP_REQUEST+0x80>)
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	4a11      	ldr	r2, [pc, #68]	; (801ae98 <send_DHCP_REQUEST+0x84>)
 801ae52:	7812      	ldrb	r2, [r2, #0]
 801ae54:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801ae56:	4b0f      	ldr	r3, [pc, #60]	; (801ae94 <send_DHCP_REQUEST+0x80>)
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	4a0f      	ldr	r2, [pc, #60]	; (801ae98 <send_DHCP_REQUEST+0x84>)
 801ae5c:	7852      	ldrb	r2, [r2, #1]
 801ae5e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801ae60:	4b0c      	ldr	r3, [pc, #48]	; (801ae94 <send_DHCP_REQUEST+0x80>)
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	4a0c      	ldr	r2, [pc, #48]	; (801ae98 <send_DHCP_REQUEST+0x84>)
 801ae66:	7892      	ldrb	r2, [r2, #2]
 801ae68:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801ae6a:	4b0a      	ldr	r3, [pc, #40]	; (801ae94 <send_DHCP_REQUEST+0x80>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	4a0a      	ldr	r2, [pc, #40]	; (801ae98 <send_DHCP_REQUEST+0x84>)
 801ae70:	78d2      	ldrb	r2, [r2, #3]
 801ae72:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801ae74:	4b09      	ldr	r3, [pc, #36]	; (801ae9c <send_DHCP_REQUEST+0x88>)
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801ae7a:	4b08      	ldr	r3, [pc, #32]	; (801ae9c <send_DHCP_REQUEST+0x88>)
 801ae7c:	785b      	ldrb	r3, [r3, #1]
 801ae7e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801ae80:	4b06      	ldr	r3, [pc, #24]	; (801ae9c <send_DHCP_REQUEST+0x88>)
 801ae82:	789b      	ldrb	r3, [r3, #2]
 801ae84:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801ae86:	4b05      	ldr	r3, [pc, #20]	; (801ae9c <send_DHCP_REQUEST+0x88>)
 801ae88:	78db      	ldrb	r3, [r3, #3]
 801ae8a:	71fb      	strb	r3, [r7, #7]
 801ae8c:	e010      	b.n	801aeb0 <send_DHCP_REQUEST+0x9c>
 801ae8e:	bf00      	nop
 801ae90:	200009a4 	.word	0x200009a4
 801ae94:	200009b0 	.word	0x200009b0
 801ae98:	20000994 	.word	0x20000994
 801ae9c:	20000988 	.word	0x20000988
   }
   else
   {
   	ip[0] = 255;
 801aea0:	23ff      	movs	r3, #255	; 0xff
 801aea2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801aea4:	23ff      	movs	r3, #255	; 0xff
 801aea6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801aea8:	23ff      	movs	r3, #255	; 0xff
 801aeaa:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801aeac:	23ff      	movs	r3, #255	; 0xff
 801aeae:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801aeb0:	2304      	movs	r3, #4
 801aeb2:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801aeb4:	4b8d      	ldr	r3, [pc, #564]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801aeb6:	681a      	ldr	r2, [r3, #0]
 801aeb8:	897b      	ldrh	r3, [r7, #10]
 801aeba:	1c59      	adds	r1, r3, #1
 801aebc:	8179      	strh	r1, [r7, #10]
 801aebe:	4413      	add	r3, r2
 801aec0:	2235      	movs	r2, #53	; 0x35
 801aec2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801aec6:	4b89      	ldr	r3, [pc, #548]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801aec8:	681a      	ldr	r2, [r3, #0]
 801aeca:	897b      	ldrh	r3, [r7, #10]
 801aecc:	1c59      	adds	r1, r3, #1
 801aece:	8179      	strh	r1, [r7, #10]
 801aed0:	4413      	add	r3, r2
 801aed2:	2201      	movs	r2, #1
 801aed4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801aed8:	4b84      	ldr	r3, [pc, #528]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801aeda:	681a      	ldr	r2, [r3, #0]
 801aedc:	897b      	ldrh	r3, [r7, #10]
 801aede:	1c59      	adds	r1, r3, #1
 801aee0:	8179      	strh	r1, [r7, #10]
 801aee2:	4413      	add	r3, r2
 801aee4:	2203      	movs	r2, #3
 801aee6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801aeea:	4b80      	ldr	r3, [pc, #512]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801aeec:	681a      	ldr	r2, [r3, #0]
 801aeee:	897b      	ldrh	r3, [r7, #10]
 801aef0:	1c59      	adds	r1, r3, #1
 801aef2:	8179      	strh	r1, [r7, #10]
 801aef4:	4413      	add	r3, r2
 801aef6:	223d      	movs	r2, #61	; 0x3d
 801aef8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801aefc:	4b7b      	ldr	r3, [pc, #492]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801aefe:	681a      	ldr	r2, [r3, #0]
 801af00:	897b      	ldrh	r3, [r7, #10]
 801af02:	1c59      	adds	r1, r3, #1
 801af04:	8179      	strh	r1, [r7, #10]
 801af06:	4413      	add	r3, r2
 801af08:	2207      	movs	r2, #7
 801af0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801af0e:	4b77      	ldr	r3, [pc, #476]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801af10:	681a      	ldr	r2, [r3, #0]
 801af12:	897b      	ldrh	r3, [r7, #10]
 801af14:	1c59      	adds	r1, r3, #1
 801af16:	8179      	strh	r1, [r7, #10]
 801af18:	4413      	add	r3, r2
 801af1a:	2201      	movs	r2, #1
 801af1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801af20:	4b72      	ldr	r3, [pc, #456]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801af22:	681a      	ldr	r2, [r3, #0]
 801af24:	897b      	ldrh	r3, [r7, #10]
 801af26:	1c59      	adds	r1, r3, #1
 801af28:	8179      	strh	r1, [r7, #10]
 801af2a:	4618      	mov	r0, r3
 801af2c:	4b70      	ldr	r3, [pc, #448]	; (801b0f0 <send_DHCP_REQUEST+0x2dc>)
 801af2e:	7819      	ldrb	r1, [r3, #0]
 801af30:	1813      	adds	r3, r2, r0
 801af32:	460a      	mov	r2, r1
 801af34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801af38:	4b6c      	ldr	r3, [pc, #432]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801af3a:	681a      	ldr	r2, [r3, #0]
 801af3c:	897b      	ldrh	r3, [r7, #10]
 801af3e:	1c59      	adds	r1, r3, #1
 801af40:	8179      	strh	r1, [r7, #10]
 801af42:	4618      	mov	r0, r3
 801af44:	4b6a      	ldr	r3, [pc, #424]	; (801b0f0 <send_DHCP_REQUEST+0x2dc>)
 801af46:	7859      	ldrb	r1, [r3, #1]
 801af48:	1813      	adds	r3, r2, r0
 801af4a:	460a      	mov	r2, r1
 801af4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801af50:	4b66      	ldr	r3, [pc, #408]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801af52:	681a      	ldr	r2, [r3, #0]
 801af54:	897b      	ldrh	r3, [r7, #10]
 801af56:	1c59      	adds	r1, r3, #1
 801af58:	8179      	strh	r1, [r7, #10]
 801af5a:	4618      	mov	r0, r3
 801af5c:	4b64      	ldr	r3, [pc, #400]	; (801b0f0 <send_DHCP_REQUEST+0x2dc>)
 801af5e:	7899      	ldrb	r1, [r3, #2]
 801af60:	1813      	adds	r3, r2, r0
 801af62:	460a      	mov	r2, r1
 801af64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801af68:	4b60      	ldr	r3, [pc, #384]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801af6a:	681a      	ldr	r2, [r3, #0]
 801af6c:	897b      	ldrh	r3, [r7, #10]
 801af6e:	1c59      	adds	r1, r3, #1
 801af70:	8179      	strh	r1, [r7, #10]
 801af72:	4618      	mov	r0, r3
 801af74:	4b5e      	ldr	r3, [pc, #376]	; (801b0f0 <send_DHCP_REQUEST+0x2dc>)
 801af76:	78d9      	ldrb	r1, [r3, #3]
 801af78:	1813      	adds	r3, r2, r0
 801af7a:	460a      	mov	r2, r1
 801af7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801af80:	4b5a      	ldr	r3, [pc, #360]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801af82:	681a      	ldr	r2, [r3, #0]
 801af84:	897b      	ldrh	r3, [r7, #10]
 801af86:	1c59      	adds	r1, r3, #1
 801af88:	8179      	strh	r1, [r7, #10]
 801af8a:	4618      	mov	r0, r3
 801af8c:	4b58      	ldr	r3, [pc, #352]	; (801b0f0 <send_DHCP_REQUEST+0x2dc>)
 801af8e:	7919      	ldrb	r1, [r3, #4]
 801af90:	1813      	adds	r3, r2, r0
 801af92:	460a      	mov	r2, r1
 801af94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801af98:	4b54      	ldr	r3, [pc, #336]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801af9a:	681a      	ldr	r2, [r3, #0]
 801af9c:	897b      	ldrh	r3, [r7, #10]
 801af9e:	1c59      	adds	r1, r3, #1
 801afa0:	8179      	strh	r1, [r7, #10]
 801afa2:	4618      	mov	r0, r3
 801afa4:	4b52      	ldr	r3, [pc, #328]	; (801b0f0 <send_DHCP_REQUEST+0x2dc>)
 801afa6:	7959      	ldrb	r1, [r3, #5]
 801afa8:	1813      	adds	r3, r2, r0
 801afaa:	460a      	mov	r2, r1
 801afac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801afb0:	79fb      	ldrb	r3, [r7, #7]
 801afb2:	2bff      	cmp	r3, #255	; 0xff
 801afb4:	f040 8084 	bne.w	801b0c0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801afb8:	4b4c      	ldr	r3, [pc, #304]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801afba:	681a      	ldr	r2, [r3, #0]
 801afbc:	897b      	ldrh	r3, [r7, #10]
 801afbe:	1c59      	adds	r1, r3, #1
 801afc0:	8179      	strh	r1, [r7, #10]
 801afc2:	4413      	add	r3, r2
 801afc4:	2232      	movs	r2, #50	; 0x32
 801afc6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801afca:	4b48      	ldr	r3, [pc, #288]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801afcc:	681a      	ldr	r2, [r3, #0]
 801afce:	897b      	ldrh	r3, [r7, #10]
 801afd0:	1c59      	adds	r1, r3, #1
 801afd2:	8179      	strh	r1, [r7, #10]
 801afd4:	4413      	add	r3, r2
 801afd6:	2204      	movs	r2, #4
 801afd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801afdc:	4b43      	ldr	r3, [pc, #268]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801afde:	681a      	ldr	r2, [r3, #0]
 801afe0:	897b      	ldrh	r3, [r7, #10]
 801afe2:	1c59      	adds	r1, r3, #1
 801afe4:	8179      	strh	r1, [r7, #10]
 801afe6:	4618      	mov	r0, r3
 801afe8:	4b42      	ldr	r3, [pc, #264]	; (801b0f4 <send_DHCP_REQUEST+0x2e0>)
 801afea:	7819      	ldrb	r1, [r3, #0]
 801afec:	1813      	adds	r3, r2, r0
 801afee:	460a      	mov	r2, r1
 801aff0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801aff4:	4b3d      	ldr	r3, [pc, #244]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801aff6:	681a      	ldr	r2, [r3, #0]
 801aff8:	897b      	ldrh	r3, [r7, #10]
 801affa:	1c59      	adds	r1, r3, #1
 801affc:	8179      	strh	r1, [r7, #10]
 801affe:	4618      	mov	r0, r3
 801b000:	4b3c      	ldr	r3, [pc, #240]	; (801b0f4 <send_DHCP_REQUEST+0x2e0>)
 801b002:	7859      	ldrb	r1, [r3, #1]
 801b004:	1813      	adds	r3, r2, r0
 801b006:	460a      	mov	r2, r1
 801b008:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b00c:	4b37      	ldr	r3, [pc, #220]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b00e:	681a      	ldr	r2, [r3, #0]
 801b010:	897b      	ldrh	r3, [r7, #10]
 801b012:	1c59      	adds	r1, r3, #1
 801b014:	8179      	strh	r1, [r7, #10]
 801b016:	4618      	mov	r0, r3
 801b018:	4b36      	ldr	r3, [pc, #216]	; (801b0f4 <send_DHCP_REQUEST+0x2e0>)
 801b01a:	7899      	ldrb	r1, [r3, #2]
 801b01c:	1813      	adds	r3, r2, r0
 801b01e:	460a      	mov	r2, r1
 801b020:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b024:	4b31      	ldr	r3, [pc, #196]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b026:	681a      	ldr	r2, [r3, #0]
 801b028:	897b      	ldrh	r3, [r7, #10]
 801b02a:	1c59      	adds	r1, r3, #1
 801b02c:	8179      	strh	r1, [r7, #10]
 801b02e:	4618      	mov	r0, r3
 801b030:	4b30      	ldr	r3, [pc, #192]	; (801b0f4 <send_DHCP_REQUEST+0x2e0>)
 801b032:	78d9      	ldrb	r1, [r3, #3]
 801b034:	1813      	adds	r3, r2, r0
 801b036:	460a      	mov	r2, r1
 801b038:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b03c:	4b2b      	ldr	r3, [pc, #172]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b03e:	681a      	ldr	r2, [r3, #0]
 801b040:	897b      	ldrh	r3, [r7, #10]
 801b042:	1c59      	adds	r1, r3, #1
 801b044:	8179      	strh	r1, [r7, #10]
 801b046:	4413      	add	r3, r2
 801b048:	2236      	movs	r2, #54	; 0x36
 801b04a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b04e:	4b27      	ldr	r3, [pc, #156]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b050:	681a      	ldr	r2, [r3, #0]
 801b052:	897b      	ldrh	r3, [r7, #10]
 801b054:	1c59      	adds	r1, r3, #1
 801b056:	8179      	strh	r1, [r7, #10]
 801b058:	4413      	add	r3, r2
 801b05a:	2204      	movs	r2, #4
 801b05c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b060:	4b22      	ldr	r3, [pc, #136]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b062:	681a      	ldr	r2, [r3, #0]
 801b064:	897b      	ldrh	r3, [r7, #10]
 801b066:	1c59      	adds	r1, r3, #1
 801b068:	8179      	strh	r1, [r7, #10]
 801b06a:	4618      	mov	r0, r3
 801b06c:	4b22      	ldr	r3, [pc, #136]	; (801b0f8 <send_DHCP_REQUEST+0x2e4>)
 801b06e:	7819      	ldrb	r1, [r3, #0]
 801b070:	1813      	adds	r3, r2, r0
 801b072:	460a      	mov	r2, r1
 801b074:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b078:	4b1c      	ldr	r3, [pc, #112]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b07a:	681a      	ldr	r2, [r3, #0]
 801b07c:	897b      	ldrh	r3, [r7, #10]
 801b07e:	1c59      	adds	r1, r3, #1
 801b080:	8179      	strh	r1, [r7, #10]
 801b082:	4618      	mov	r0, r3
 801b084:	4b1c      	ldr	r3, [pc, #112]	; (801b0f8 <send_DHCP_REQUEST+0x2e4>)
 801b086:	7859      	ldrb	r1, [r3, #1]
 801b088:	1813      	adds	r3, r2, r0
 801b08a:	460a      	mov	r2, r1
 801b08c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b090:	4b16      	ldr	r3, [pc, #88]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b092:	681a      	ldr	r2, [r3, #0]
 801b094:	897b      	ldrh	r3, [r7, #10]
 801b096:	1c59      	adds	r1, r3, #1
 801b098:	8179      	strh	r1, [r7, #10]
 801b09a:	4618      	mov	r0, r3
 801b09c:	4b16      	ldr	r3, [pc, #88]	; (801b0f8 <send_DHCP_REQUEST+0x2e4>)
 801b09e:	7899      	ldrb	r1, [r3, #2]
 801b0a0:	1813      	adds	r3, r2, r0
 801b0a2:	460a      	mov	r2, r1
 801b0a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b0a8:	4b10      	ldr	r3, [pc, #64]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b0aa:	681a      	ldr	r2, [r3, #0]
 801b0ac:	897b      	ldrh	r3, [r7, #10]
 801b0ae:	1c59      	adds	r1, r3, #1
 801b0b0:	8179      	strh	r1, [r7, #10]
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	4b10      	ldr	r3, [pc, #64]	; (801b0f8 <send_DHCP_REQUEST+0x2e4>)
 801b0b6:	78d9      	ldrb	r1, [r3, #3]
 801b0b8:	1813      	adds	r3, r2, r0
 801b0ba:	460a      	mov	r2, r1
 801b0bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801b0c0:	4b0a      	ldr	r3, [pc, #40]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b0c2:	681a      	ldr	r2, [r3, #0]
 801b0c4:	897b      	ldrh	r3, [r7, #10]
 801b0c6:	1c59      	adds	r1, r3, #1
 801b0c8:	8179      	strh	r1, [r7, #10]
 801b0ca:	4413      	add	r3, r2
 801b0cc:	220c      	movs	r2, #12
 801b0ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801b0d2:	4b06      	ldr	r3, [pc, #24]	; (801b0ec <send_DHCP_REQUEST+0x2d8>)
 801b0d4:	681a      	ldr	r2, [r3, #0]
 801b0d6:	897b      	ldrh	r3, [r7, #10]
 801b0d8:	1c59      	adds	r1, r3, #1
 801b0da:	8179      	strh	r1, [r7, #10]
 801b0dc:	4413      	add	r3, r2
 801b0de:	2200      	movs	r2, #0
 801b0e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	60fb      	str	r3, [r7, #12]
 801b0e8:	e019      	b.n	801b11e <send_DHCP_REQUEST+0x30a>
 801b0ea:	bf00      	nop
 801b0ec:	200009b0 	.word	0x200009b0
 801b0f0:	200009b4 	.word	0x200009b4
 801b0f4:	20000994 	.word	0x20000994
 801b0f8:	20000988 	.word	0x20000988
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801b0fc:	4b86      	ldr	r3, [pc, #536]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b0fe:	681a      	ldr	r2, [r3, #0]
 801b100:	897b      	ldrh	r3, [r7, #10]
 801b102:	1c59      	adds	r1, r3, #1
 801b104:	8179      	strh	r1, [r7, #10]
 801b106:	4618      	mov	r0, r3
 801b108:	4984      	ldr	r1, [pc, #528]	; (801b31c <send_DHCP_REQUEST+0x508>)
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	440b      	add	r3, r1
 801b10e:	7819      	ldrb	r1, [r3, #0]
 801b110:	1813      	adds	r3, r2, r0
 801b112:	460a      	mov	r2, r1
 801b114:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	3301      	adds	r3, #1
 801b11c:	60fb      	str	r3, [r7, #12]
 801b11e:	4a7f      	ldr	r2, [pc, #508]	; (801b31c <send_DHCP_REQUEST+0x508>)
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	4413      	add	r3, r2
 801b124:	781b      	ldrb	r3, [r3, #0]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d1e8      	bne.n	801b0fc <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801b12a:	4b7d      	ldr	r3, [pc, #500]	; (801b320 <send_DHCP_REQUEST+0x50c>)
 801b12c:	78db      	ldrb	r3, [r3, #3]
 801b12e:	091b      	lsrs	r3, r3, #4
 801b130:	b2da      	uxtb	r2, r3
 801b132:	4b79      	ldr	r3, [pc, #484]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b134:	681c      	ldr	r4, [r3, #0]
 801b136:	897b      	ldrh	r3, [r7, #10]
 801b138:	1c59      	adds	r1, r3, #1
 801b13a:	8179      	strh	r1, [r7, #10]
 801b13c:	461d      	mov	r5, r3
 801b13e:	4610      	mov	r0, r2
 801b140:	f000 ff44 	bl	801bfcc <NibbleToHex>
 801b144:	4603      	mov	r3, r0
 801b146:	461a      	mov	r2, r3
 801b148:	1963      	adds	r3, r4, r5
 801b14a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801b14e:	4b74      	ldr	r3, [pc, #464]	; (801b320 <send_DHCP_REQUEST+0x50c>)
 801b150:	78da      	ldrb	r2, [r3, #3]
 801b152:	4b71      	ldr	r3, [pc, #452]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b154:	681c      	ldr	r4, [r3, #0]
 801b156:	897b      	ldrh	r3, [r7, #10]
 801b158:	1c59      	adds	r1, r3, #1
 801b15a:	8179      	strh	r1, [r7, #10]
 801b15c:	461d      	mov	r5, r3
 801b15e:	4610      	mov	r0, r2
 801b160:	f000 ff34 	bl	801bfcc <NibbleToHex>
 801b164:	4603      	mov	r3, r0
 801b166:	461a      	mov	r2, r3
 801b168:	1963      	adds	r3, r4, r5
 801b16a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801b16e:	4b6c      	ldr	r3, [pc, #432]	; (801b320 <send_DHCP_REQUEST+0x50c>)
 801b170:	791b      	ldrb	r3, [r3, #4]
 801b172:	091b      	lsrs	r3, r3, #4
 801b174:	b2da      	uxtb	r2, r3
 801b176:	4b68      	ldr	r3, [pc, #416]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b178:	681c      	ldr	r4, [r3, #0]
 801b17a:	897b      	ldrh	r3, [r7, #10]
 801b17c:	1c59      	adds	r1, r3, #1
 801b17e:	8179      	strh	r1, [r7, #10]
 801b180:	461d      	mov	r5, r3
 801b182:	4610      	mov	r0, r2
 801b184:	f000 ff22 	bl	801bfcc <NibbleToHex>
 801b188:	4603      	mov	r3, r0
 801b18a:	461a      	mov	r2, r3
 801b18c:	1963      	adds	r3, r4, r5
 801b18e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801b192:	4b63      	ldr	r3, [pc, #396]	; (801b320 <send_DHCP_REQUEST+0x50c>)
 801b194:	791a      	ldrb	r2, [r3, #4]
 801b196:	4b60      	ldr	r3, [pc, #384]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b198:	681c      	ldr	r4, [r3, #0]
 801b19a:	897b      	ldrh	r3, [r7, #10]
 801b19c:	1c59      	adds	r1, r3, #1
 801b19e:	8179      	strh	r1, [r7, #10]
 801b1a0:	461d      	mov	r5, r3
 801b1a2:	4610      	mov	r0, r2
 801b1a4:	f000 ff12 	bl	801bfcc <NibbleToHex>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	461a      	mov	r2, r3
 801b1ac:	1963      	adds	r3, r4, r5
 801b1ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801b1b2:	4b5b      	ldr	r3, [pc, #364]	; (801b320 <send_DHCP_REQUEST+0x50c>)
 801b1b4:	795b      	ldrb	r3, [r3, #5]
 801b1b6:	091b      	lsrs	r3, r3, #4
 801b1b8:	b2da      	uxtb	r2, r3
 801b1ba:	4b57      	ldr	r3, [pc, #348]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b1bc:	681c      	ldr	r4, [r3, #0]
 801b1be:	897b      	ldrh	r3, [r7, #10]
 801b1c0:	1c59      	adds	r1, r3, #1
 801b1c2:	8179      	strh	r1, [r7, #10]
 801b1c4:	461d      	mov	r5, r3
 801b1c6:	4610      	mov	r0, r2
 801b1c8:	f000 ff00 	bl	801bfcc <NibbleToHex>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	461a      	mov	r2, r3
 801b1d0:	1963      	adds	r3, r4, r5
 801b1d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801b1d6:	4b52      	ldr	r3, [pc, #328]	; (801b320 <send_DHCP_REQUEST+0x50c>)
 801b1d8:	795a      	ldrb	r2, [r3, #5]
 801b1da:	4b4f      	ldr	r3, [pc, #316]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b1dc:	681c      	ldr	r4, [r3, #0]
 801b1de:	897b      	ldrh	r3, [r7, #10]
 801b1e0:	1c59      	adds	r1, r3, #1
 801b1e2:	8179      	strh	r1, [r7, #10]
 801b1e4:	461d      	mov	r5, r3
 801b1e6:	4610      	mov	r0, r2
 801b1e8:	f000 fef0 	bl	801bfcc <NibbleToHex>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	461a      	mov	r2, r3
 801b1f0:	1963      	adds	r3, r4, r5
 801b1f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801b1f6:	68fb      	ldr	r3, [r7, #12]
 801b1f8:	b2d9      	uxtb	r1, r3
 801b1fa:	4b47      	ldr	r3, [pc, #284]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b1fc:	681a      	ldr	r2, [r3, #0]
 801b1fe:	8978      	ldrh	r0, [r7, #10]
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	3307      	adds	r3, #7
 801b204:	1ac3      	subs	r3, r0, r3
 801b206:	3106      	adds	r1, #6
 801b208:	b2c9      	uxtb	r1, r1
 801b20a:	4413      	add	r3, r2
 801b20c:	460a      	mov	r2, r1
 801b20e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801b212:	4b41      	ldr	r3, [pc, #260]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b214:	681a      	ldr	r2, [r3, #0]
 801b216:	897b      	ldrh	r3, [r7, #10]
 801b218:	1c59      	adds	r1, r3, #1
 801b21a:	8179      	strh	r1, [r7, #10]
 801b21c:	4413      	add	r3, r2
 801b21e:	2237      	movs	r2, #55	; 0x37
 801b220:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801b224:	4b3c      	ldr	r3, [pc, #240]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	897b      	ldrh	r3, [r7, #10]
 801b22a:	1c59      	adds	r1, r3, #1
 801b22c:	8179      	strh	r1, [r7, #10]
 801b22e:	4413      	add	r3, r2
 801b230:	2208      	movs	r2, #8
 801b232:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b236:	4b38      	ldr	r3, [pc, #224]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b238:	681a      	ldr	r2, [r3, #0]
 801b23a:	897b      	ldrh	r3, [r7, #10]
 801b23c:	1c59      	adds	r1, r3, #1
 801b23e:	8179      	strh	r1, [r7, #10]
 801b240:	4413      	add	r3, r2
 801b242:	2201      	movs	r2, #1
 801b244:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b248:	4b33      	ldr	r3, [pc, #204]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b24a:	681a      	ldr	r2, [r3, #0]
 801b24c:	897b      	ldrh	r3, [r7, #10]
 801b24e:	1c59      	adds	r1, r3, #1
 801b250:	8179      	strh	r1, [r7, #10]
 801b252:	4413      	add	r3, r2
 801b254:	2203      	movs	r2, #3
 801b256:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b25a:	4b2f      	ldr	r3, [pc, #188]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b25c:	681a      	ldr	r2, [r3, #0]
 801b25e:	897b      	ldrh	r3, [r7, #10]
 801b260:	1c59      	adds	r1, r3, #1
 801b262:	8179      	strh	r1, [r7, #10]
 801b264:	4413      	add	r3, r2
 801b266:	2206      	movs	r2, #6
 801b268:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b26c:	4b2a      	ldr	r3, [pc, #168]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b26e:	681a      	ldr	r2, [r3, #0]
 801b270:	897b      	ldrh	r3, [r7, #10]
 801b272:	1c59      	adds	r1, r3, #1
 801b274:	8179      	strh	r1, [r7, #10]
 801b276:	4413      	add	r3, r2
 801b278:	220f      	movs	r2, #15
 801b27a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b27e:	4b26      	ldr	r3, [pc, #152]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b280:	681a      	ldr	r2, [r3, #0]
 801b282:	897b      	ldrh	r3, [r7, #10]
 801b284:	1c59      	adds	r1, r3, #1
 801b286:	8179      	strh	r1, [r7, #10]
 801b288:	4413      	add	r3, r2
 801b28a:	223a      	movs	r2, #58	; 0x3a
 801b28c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b290:	4b21      	ldr	r3, [pc, #132]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b292:	681a      	ldr	r2, [r3, #0]
 801b294:	897b      	ldrh	r3, [r7, #10]
 801b296:	1c59      	adds	r1, r3, #1
 801b298:	8179      	strh	r1, [r7, #10]
 801b29a:	4413      	add	r3, r2
 801b29c:	223b      	movs	r2, #59	; 0x3b
 801b29e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801b2a2:	4b1d      	ldr	r3, [pc, #116]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	897b      	ldrh	r3, [r7, #10]
 801b2a8:	1c59      	adds	r1, r3, #1
 801b2aa:	8179      	strh	r1, [r7, #10]
 801b2ac:	4413      	add	r3, r2
 801b2ae:	221f      	movs	r2, #31
 801b2b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801b2b4:	4b18      	ldr	r3, [pc, #96]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b2b6:	681a      	ldr	r2, [r3, #0]
 801b2b8:	897b      	ldrh	r3, [r7, #10]
 801b2ba:	1c59      	adds	r1, r3, #1
 801b2bc:	8179      	strh	r1, [r7, #10]
 801b2be:	4413      	add	r3, r2
 801b2c0:	2221      	movs	r2, #33	; 0x21
 801b2c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b2c6:	4b14      	ldr	r3, [pc, #80]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b2c8:	681a      	ldr	r2, [r3, #0]
 801b2ca:	897b      	ldrh	r3, [r7, #10]
 801b2cc:	1c59      	adds	r1, r3, #1
 801b2ce:	8179      	strh	r1, [r7, #10]
 801b2d0:	4413      	add	r3, r2
 801b2d2:	22ff      	movs	r2, #255	; 0xff
 801b2d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b2d8:	897b      	ldrh	r3, [r7, #10]
 801b2da:	60fb      	str	r3, [r7, #12]
 801b2dc:	e009      	b.n	801b2f2 <send_DHCP_REQUEST+0x4de>
 801b2de:	4b0e      	ldr	r3, [pc, #56]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b2e0:	681a      	ldr	r2, [r3, #0]
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	4413      	add	r3, r2
 801b2e6:	33ec      	adds	r3, #236	; 0xec
 801b2e8:	2200      	movs	r2, #0
 801b2ea:	701a      	strb	r2, [r3, #0]
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	3301      	adds	r3, #1
 801b2f0:	60fb      	str	r3, [r7, #12]
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b2f8:	dbf1      	blt.n	801b2de <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b2fa:	4b0a      	ldr	r3, [pc, #40]	; (801b324 <send_DHCP_REQUEST+0x510>)
 801b2fc:	7818      	ldrb	r0, [r3, #0]
 801b2fe:	4b06      	ldr	r3, [pc, #24]	; (801b318 <send_DHCP_REQUEST+0x504>)
 801b300:	6819      	ldr	r1, [r3, #0]
 801b302:	1d3b      	adds	r3, r7, #4
 801b304:	2243      	movs	r2, #67	; 0x43
 801b306:	9200      	str	r2, [sp, #0]
 801b308:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b30c:	f7fe f972 	bl	80195f4 <sendto>

}
 801b310:	bf00      	nop
 801b312:	3710      	adds	r7, #16
 801b314:	46bd      	mov	sp, r7
 801b316:	bdb0      	pop	{r4, r5, r7, pc}
 801b318:	200009b0 	.word	0x200009b0
 801b31c:	200000f8 	.word	0x200000f8
 801b320:	200009b4 	.word	0x200009b4
 801b324:	20000985 	.word	0x20000985

0801b328 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b086      	sub	sp, #24
 801b32c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b32e:	2300      	movs	r3, #0
 801b330:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801b332:	f7ff fab3 	bl	801a89c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b336:	2304      	movs	r3, #4
 801b338:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b33a:	4b9f      	ldr	r3, [pc, #636]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	330a      	adds	r3, #10
 801b340:	2200      	movs	r2, #0
 801b342:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b344:	4b9c      	ldr	r3, [pc, #624]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	330a      	adds	r3, #10
 801b34a:	3301      	adds	r3, #1
 801b34c:	2200      	movs	r2, #0
 801b34e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b350:	4b99      	ldr	r3, [pc, #612]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b352:	681a      	ldr	r2, [r3, #0]
 801b354:	897b      	ldrh	r3, [r7, #10]
 801b356:	1c59      	adds	r1, r3, #1
 801b358:	8179      	strh	r1, [r7, #10]
 801b35a:	4413      	add	r3, r2
 801b35c:	2235      	movs	r2, #53	; 0x35
 801b35e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b362:	4b95      	ldr	r3, [pc, #596]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b364:	681a      	ldr	r2, [r3, #0]
 801b366:	897b      	ldrh	r3, [r7, #10]
 801b368:	1c59      	adds	r1, r3, #1
 801b36a:	8179      	strh	r1, [r7, #10]
 801b36c:	4413      	add	r3, r2
 801b36e:	2201      	movs	r2, #1
 801b370:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801b374:	4b90      	ldr	r3, [pc, #576]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	897b      	ldrh	r3, [r7, #10]
 801b37a:	1c59      	adds	r1, r3, #1
 801b37c:	8179      	strh	r1, [r7, #10]
 801b37e:	4413      	add	r3, r2
 801b380:	2204      	movs	r2, #4
 801b382:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b386:	4b8c      	ldr	r3, [pc, #560]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b388:	681a      	ldr	r2, [r3, #0]
 801b38a:	897b      	ldrh	r3, [r7, #10]
 801b38c:	1c59      	adds	r1, r3, #1
 801b38e:	8179      	strh	r1, [r7, #10]
 801b390:	4413      	add	r3, r2
 801b392:	223d      	movs	r2, #61	; 0x3d
 801b394:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b398:	4b87      	ldr	r3, [pc, #540]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b39a:	681a      	ldr	r2, [r3, #0]
 801b39c:	897b      	ldrh	r3, [r7, #10]
 801b39e:	1c59      	adds	r1, r3, #1
 801b3a0:	8179      	strh	r1, [r7, #10]
 801b3a2:	4413      	add	r3, r2
 801b3a4:	2207      	movs	r2, #7
 801b3a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b3aa:	4b83      	ldr	r3, [pc, #524]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b3ac:	681a      	ldr	r2, [r3, #0]
 801b3ae:	897b      	ldrh	r3, [r7, #10]
 801b3b0:	1c59      	adds	r1, r3, #1
 801b3b2:	8179      	strh	r1, [r7, #10]
 801b3b4:	4413      	add	r3, r2
 801b3b6:	2201      	movs	r2, #1
 801b3b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b3bc:	4b7e      	ldr	r3, [pc, #504]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b3be:	681a      	ldr	r2, [r3, #0]
 801b3c0:	897b      	ldrh	r3, [r7, #10]
 801b3c2:	1c59      	adds	r1, r3, #1
 801b3c4:	8179      	strh	r1, [r7, #10]
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	4b7c      	ldr	r3, [pc, #496]	; (801b5bc <send_DHCP_DECLINE+0x294>)
 801b3ca:	7819      	ldrb	r1, [r3, #0]
 801b3cc:	1813      	adds	r3, r2, r0
 801b3ce:	460a      	mov	r2, r1
 801b3d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b3d4:	4b78      	ldr	r3, [pc, #480]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b3d6:	681a      	ldr	r2, [r3, #0]
 801b3d8:	897b      	ldrh	r3, [r7, #10]
 801b3da:	1c59      	adds	r1, r3, #1
 801b3dc:	8179      	strh	r1, [r7, #10]
 801b3de:	4618      	mov	r0, r3
 801b3e0:	4b76      	ldr	r3, [pc, #472]	; (801b5bc <send_DHCP_DECLINE+0x294>)
 801b3e2:	7859      	ldrb	r1, [r3, #1]
 801b3e4:	1813      	adds	r3, r2, r0
 801b3e6:	460a      	mov	r2, r1
 801b3e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b3ec:	4b72      	ldr	r3, [pc, #456]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b3ee:	681a      	ldr	r2, [r3, #0]
 801b3f0:	897b      	ldrh	r3, [r7, #10]
 801b3f2:	1c59      	adds	r1, r3, #1
 801b3f4:	8179      	strh	r1, [r7, #10]
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	4b70      	ldr	r3, [pc, #448]	; (801b5bc <send_DHCP_DECLINE+0x294>)
 801b3fa:	7899      	ldrb	r1, [r3, #2]
 801b3fc:	1813      	adds	r3, r2, r0
 801b3fe:	460a      	mov	r2, r1
 801b400:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b404:	4b6c      	ldr	r3, [pc, #432]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b406:	681a      	ldr	r2, [r3, #0]
 801b408:	897b      	ldrh	r3, [r7, #10]
 801b40a:	1c59      	adds	r1, r3, #1
 801b40c:	8179      	strh	r1, [r7, #10]
 801b40e:	4618      	mov	r0, r3
 801b410:	4b6a      	ldr	r3, [pc, #424]	; (801b5bc <send_DHCP_DECLINE+0x294>)
 801b412:	78d9      	ldrb	r1, [r3, #3]
 801b414:	1813      	adds	r3, r2, r0
 801b416:	460a      	mov	r2, r1
 801b418:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b41c:	4b66      	ldr	r3, [pc, #408]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b41e:	681a      	ldr	r2, [r3, #0]
 801b420:	897b      	ldrh	r3, [r7, #10]
 801b422:	1c59      	adds	r1, r3, #1
 801b424:	8179      	strh	r1, [r7, #10]
 801b426:	4618      	mov	r0, r3
 801b428:	4b64      	ldr	r3, [pc, #400]	; (801b5bc <send_DHCP_DECLINE+0x294>)
 801b42a:	7919      	ldrb	r1, [r3, #4]
 801b42c:	1813      	adds	r3, r2, r0
 801b42e:	460a      	mov	r2, r1
 801b430:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b434:	4b60      	ldr	r3, [pc, #384]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b436:	681a      	ldr	r2, [r3, #0]
 801b438:	897b      	ldrh	r3, [r7, #10]
 801b43a:	1c59      	adds	r1, r3, #1
 801b43c:	8179      	strh	r1, [r7, #10]
 801b43e:	4618      	mov	r0, r3
 801b440:	4b5e      	ldr	r3, [pc, #376]	; (801b5bc <send_DHCP_DECLINE+0x294>)
 801b442:	7959      	ldrb	r1, [r3, #5]
 801b444:	1813      	adds	r3, r2, r0
 801b446:	460a      	mov	r2, r1
 801b448:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b44c:	4b5a      	ldr	r3, [pc, #360]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b44e:	681a      	ldr	r2, [r3, #0]
 801b450:	897b      	ldrh	r3, [r7, #10]
 801b452:	1c59      	adds	r1, r3, #1
 801b454:	8179      	strh	r1, [r7, #10]
 801b456:	4413      	add	r3, r2
 801b458:	2232      	movs	r2, #50	; 0x32
 801b45a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b45e:	4b56      	ldr	r3, [pc, #344]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b460:	681a      	ldr	r2, [r3, #0]
 801b462:	897b      	ldrh	r3, [r7, #10]
 801b464:	1c59      	adds	r1, r3, #1
 801b466:	8179      	strh	r1, [r7, #10]
 801b468:	4413      	add	r3, r2
 801b46a:	2204      	movs	r2, #4
 801b46c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b470:	4b51      	ldr	r3, [pc, #324]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b472:	681a      	ldr	r2, [r3, #0]
 801b474:	897b      	ldrh	r3, [r7, #10]
 801b476:	1c59      	adds	r1, r3, #1
 801b478:	8179      	strh	r1, [r7, #10]
 801b47a:	4618      	mov	r0, r3
 801b47c:	4b50      	ldr	r3, [pc, #320]	; (801b5c0 <send_DHCP_DECLINE+0x298>)
 801b47e:	7819      	ldrb	r1, [r3, #0]
 801b480:	1813      	adds	r3, r2, r0
 801b482:	460a      	mov	r2, r1
 801b484:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b488:	4b4b      	ldr	r3, [pc, #300]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b48a:	681a      	ldr	r2, [r3, #0]
 801b48c:	897b      	ldrh	r3, [r7, #10]
 801b48e:	1c59      	adds	r1, r3, #1
 801b490:	8179      	strh	r1, [r7, #10]
 801b492:	4618      	mov	r0, r3
 801b494:	4b4a      	ldr	r3, [pc, #296]	; (801b5c0 <send_DHCP_DECLINE+0x298>)
 801b496:	7859      	ldrb	r1, [r3, #1]
 801b498:	1813      	adds	r3, r2, r0
 801b49a:	460a      	mov	r2, r1
 801b49c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b4a0:	4b45      	ldr	r3, [pc, #276]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b4a2:	681a      	ldr	r2, [r3, #0]
 801b4a4:	897b      	ldrh	r3, [r7, #10]
 801b4a6:	1c59      	adds	r1, r3, #1
 801b4a8:	8179      	strh	r1, [r7, #10]
 801b4aa:	4618      	mov	r0, r3
 801b4ac:	4b44      	ldr	r3, [pc, #272]	; (801b5c0 <send_DHCP_DECLINE+0x298>)
 801b4ae:	7899      	ldrb	r1, [r3, #2]
 801b4b0:	1813      	adds	r3, r2, r0
 801b4b2:	460a      	mov	r2, r1
 801b4b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b4b8:	4b3f      	ldr	r3, [pc, #252]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b4ba:	681a      	ldr	r2, [r3, #0]
 801b4bc:	897b      	ldrh	r3, [r7, #10]
 801b4be:	1c59      	adds	r1, r3, #1
 801b4c0:	8179      	strh	r1, [r7, #10]
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	4b3e      	ldr	r3, [pc, #248]	; (801b5c0 <send_DHCP_DECLINE+0x298>)
 801b4c6:	78d9      	ldrb	r1, [r3, #3]
 801b4c8:	1813      	adds	r3, r2, r0
 801b4ca:	460a      	mov	r2, r1
 801b4cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b4d0:	4b39      	ldr	r3, [pc, #228]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	897b      	ldrh	r3, [r7, #10]
 801b4d6:	1c59      	adds	r1, r3, #1
 801b4d8:	8179      	strh	r1, [r7, #10]
 801b4da:	4413      	add	r3, r2
 801b4dc:	2236      	movs	r2, #54	; 0x36
 801b4de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b4e2:	4b35      	ldr	r3, [pc, #212]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	897b      	ldrh	r3, [r7, #10]
 801b4e8:	1c59      	adds	r1, r3, #1
 801b4ea:	8179      	strh	r1, [r7, #10]
 801b4ec:	4413      	add	r3, r2
 801b4ee:	2204      	movs	r2, #4
 801b4f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b4f4:	4b30      	ldr	r3, [pc, #192]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b4f6:	681a      	ldr	r2, [r3, #0]
 801b4f8:	897b      	ldrh	r3, [r7, #10]
 801b4fa:	1c59      	adds	r1, r3, #1
 801b4fc:	8179      	strh	r1, [r7, #10]
 801b4fe:	4618      	mov	r0, r3
 801b500:	4b30      	ldr	r3, [pc, #192]	; (801b5c4 <send_DHCP_DECLINE+0x29c>)
 801b502:	7819      	ldrb	r1, [r3, #0]
 801b504:	1813      	adds	r3, r2, r0
 801b506:	460a      	mov	r2, r1
 801b508:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b50c:	4b2a      	ldr	r3, [pc, #168]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b50e:	681a      	ldr	r2, [r3, #0]
 801b510:	897b      	ldrh	r3, [r7, #10]
 801b512:	1c59      	adds	r1, r3, #1
 801b514:	8179      	strh	r1, [r7, #10]
 801b516:	4618      	mov	r0, r3
 801b518:	4b2a      	ldr	r3, [pc, #168]	; (801b5c4 <send_DHCP_DECLINE+0x29c>)
 801b51a:	7859      	ldrb	r1, [r3, #1]
 801b51c:	1813      	adds	r3, r2, r0
 801b51e:	460a      	mov	r2, r1
 801b520:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b524:	4b24      	ldr	r3, [pc, #144]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b526:	681a      	ldr	r2, [r3, #0]
 801b528:	897b      	ldrh	r3, [r7, #10]
 801b52a:	1c59      	adds	r1, r3, #1
 801b52c:	8179      	strh	r1, [r7, #10]
 801b52e:	4618      	mov	r0, r3
 801b530:	4b24      	ldr	r3, [pc, #144]	; (801b5c4 <send_DHCP_DECLINE+0x29c>)
 801b532:	7899      	ldrb	r1, [r3, #2]
 801b534:	1813      	adds	r3, r2, r0
 801b536:	460a      	mov	r2, r1
 801b538:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b53c:	4b1e      	ldr	r3, [pc, #120]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b53e:	681a      	ldr	r2, [r3, #0]
 801b540:	897b      	ldrh	r3, [r7, #10]
 801b542:	1c59      	adds	r1, r3, #1
 801b544:	8179      	strh	r1, [r7, #10]
 801b546:	4618      	mov	r0, r3
 801b548:	4b1e      	ldr	r3, [pc, #120]	; (801b5c4 <send_DHCP_DECLINE+0x29c>)
 801b54a:	78d9      	ldrb	r1, [r3, #3]
 801b54c:	1813      	adds	r3, r2, r0
 801b54e:	460a      	mov	r2, r1
 801b550:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b554:	4b18      	ldr	r3, [pc, #96]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b556:	681a      	ldr	r2, [r3, #0]
 801b558:	897b      	ldrh	r3, [r7, #10]
 801b55a:	1c59      	adds	r1, r3, #1
 801b55c:	8179      	strh	r1, [r7, #10]
 801b55e:	4413      	add	r3, r2
 801b560:	22ff      	movs	r2, #255	; 0xff
 801b562:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b566:	897b      	ldrh	r3, [r7, #10]
 801b568:	60fb      	str	r3, [r7, #12]
 801b56a:	e009      	b.n	801b580 <send_DHCP_DECLINE+0x258>
 801b56c:	4b12      	ldr	r3, [pc, #72]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b56e:	681a      	ldr	r2, [r3, #0]
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	4413      	add	r3, r2
 801b574:	33ec      	adds	r3, #236	; 0xec
 801b576:	2200      	movs	r2, #0
 801b578:	701a      	strb	r2, [r3, #0]
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	3301      	adds	r3, #1
 801b57e:	60fb      	str	r3, [r7, #12]
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b586:	dbf1      	blt.n	801b56c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b588:	23ff      	movs	r3, #255	; 0xff
 801b58a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b58c:	23ff      	movs	r3, #255	; 0xff
 801b58e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b590:	23ff      	movs	r3, #255	; 0xff
 801b592:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b594:	23ff      	movs	r3, #255	; 0xff
 801b596:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b598:	4b0b      	ldr	r3, [pc, #44]	; (801b5c8 <send_DHCP_DECLINE+0x2a0>)
 801b59a:	7818      	ldrb	r0, [r3, #0]
 801b59c:	4b06      	ldr	r3, [pc, #24]	; (801b5b8 <send_DHCP_DECLINE+0x290>)
 801b59e:	6819      	ldr	r1, [r3, #0]
 801b5a0:	1d3b      	adds	r3, r7, #4
 801b5a2:	2243      	movs	r2, #67	; 0x43
 801b5a4:	9200      	str	r2, [sp, #0]
 801b5a6:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b5aa:	f7fe f823 	bl	80195f4 <sendto>
}
 801b5ae:	bf00      	nop
 801b5b0:	3710      	adds	r7, #16
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	bd80      	pop	{r7, pc}
 801b5b6:	bf00      	nop
 801b5b8:	200009b0 	.word	0x200009b0
 801b5bc:	200009b4 	.word	0x200009b4
 801b5c0:	20000994 	.word	0x20000994
 801b5c4:	20000988 	.word	0x20000988
 801b5c8:	20000985 	.word	0x20000985

0801b5cc <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b5cc:	b590      	push	{r4, r7, lr}
 801b5ce:	b089      	sub	sp, #36	; 0x24
 801b5d0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b5d6:	4ba1      	ldr	r3, [pc, #644]	; (801b85c <parseDHCPMSG+0x290>)
 801b5d8:	781b      	ldrb	r3, [r3, #0]
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7fd f9e1 	bl	80189a2 <getSn_RX_RSR>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	823b      	strh	r3, [r7, #16]
 801b5e4:	8a3b      	ldrh	r3, [r7, #16]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d011      	beq.n	801b60e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b5ea:	4b9c      	ldr	r3, [pc, #624]	; (801b85c <parseDHCPMSG+0x290>)
 801b5ec:	7818      	ldrb	r0, [r3, #0]
 801b5ee:	4b9c      	ldr	r3, [pc, #624]	; (801b860 <parseDHCPMSG+0x294>)
 801b5f0:	6819      	ldr	r1, [r3, #0]
 801b5f2:	1d3c      	adds	r4, r7, #4
 801b5f4:	8a3a      	ldrh	r2, [r7, #16]
 801b5f6:	1cbb      	adds	r3, r7, #2
 801b5f8:	9300      	str	r3, [sp, #0]
 801b5fa:	4623      	mov	r3, r4
 801b5fc:	f7fe f930 	bl	8019860 <recvfrom>
 801b600:	4603      	mov	r3, r0
 801b602:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b604:	887b      	ldrh	r3, [r7, #2]
 801b606:	2b43      	cmp	r3, #67	; 0x43
 801b608:	f040 81ed 	bne.w	801b9e6 <parseDHCPMSG+0x41a>
 801b60c:	e001      	b.n	801b612 <parseDHCPMSG+0x46>
   else return 0;
 801b60e:	2300      	movs	r3, #0
 801b610:	e1eb      	b.n	801b9ea <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b612:	4b93      	ldr	r3, [pc, #588]	; (801b860 <parseDHCPMSG+0x294>)
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	7f1a      	ldrb	r2, [r3, #28]
 801b618:	4b92      	ldr	r3, [pc, #584]	; (801b864 <parseDHCPMSG+0x298>)
 801b61a:	781b      	ldrb	r3, [r3, #0]
 801b61c:	429a      	cmp	r2, r3
 801b61e:	d124      	bne.n	801b66a <parseDHCPMSG+0x9e>
 801b620:	4b8f      	ldr	r3, [pc, #572]	; (801b860 <parseDHCPMSG+0x294>)
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	7f5a      	ldrb	r2, [r3, #29]
 801b626:	4b8f      	ldr	r3, [pc, #572]	; (801b864 <parseDHCPMSG+0x298>)
 801b628:	785b      	ldrb	r3, [r3, #1]
 801b62a:	429a      	cmp	r2, r3
 801b62c:	d11d      	bne.n	801b66a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b62e:	4b8c      	ldr	r3, [pc, #560]	; (801b860 <parseDHCPMSG+0x294>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	7f9a      	ldrb	r2, [r3, #30]
 801b634:	4b8b      	ldr	r3, [pc, #556]	; (801b864 <parseDHCPMSG+0x298>)
 801b636:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b638:	429a      	cmp	r2, r3
 801b63a:	d116      	bne.n	801b66a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b63c:	4b88      	ldr	r3, [pc, #544]	; (801b860 <parseDHCPMSG+0x294>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	7fda      	ldrb	r2, [r3, #31]
 801b642:	4b88      	ldr	r3, [pc, #544]	; (801b864 <parseDHCPMSG+0x298>)
 801b644:	78db      	ldrb	r3, [r3, #3]
 801b646:	429a      	cmp	r2, r3
 801b648:	d10f      	bne.n	801b66a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b64a:	4b85      	ldr	r3, [pc, #532]	; (801b860 <parseDHCPMSG+0x294>)
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b652:	4b84      	ldr	r3, [pc, #528]	; (801b864 <parseDHCPMSG+0x298>)
 801b654:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b656:	429a      	cmp	r2, r3
 801b658:	d107      	bne.n	801b66a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b65a:	4b81      	ldr	r3, [pc, #516]	; (801b860 <parseDHCPMSG+0x294>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b662:	4b80      	ldr	r3, [pc, #512]	; (801b864 <parseDHCPMSG+0x298>)
 801b664:	795b      	ldrb	r3, [r3, #5]
 801b666:	429a      	cmp	r2, r3
 801b668:	d001      	beq.n	801b66e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b66a:	2300      	movs	r3, #0
 801b66c:	e1bd      	b.n	801b9ea <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b66e:	4b7e      	ldr	r3, [pc, #504]	; (801b868 <parseDHCPMSG+0x29c>)
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d10b      	bne.n	801b68e <parseDHCPMSG+0xc2>
 801b676:	4b7c      	ldr	r3, [pc, #496]	; (801b868 <parseDHCPMSG+0x29c>)
 801b678:	785b      	ldrb	r3, [r3, #1]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d107      	bne.n	801b68e <parseDHCPMSG+0xc2>
 801b67e:	4b7a      	ldr	r3, [pc, #488]	; (801b868 <parseDHCPMSG+0x29c>)
 801b680:	789b      	ldrb	r3, [r3, #2]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d103      	bne.n	801b68e <parseDHCPMSG+0xc2>
 801b686:	4b78      	ldr	r3, [pc, #480]	; (801b868 <parseDHCPMSG+0x29c>)
 801b688:	78db      	ldrb	r3, [r3, #3]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d029      	beq.n	801b6e2 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b68e:	793a      	ldrb	r2, [r7, #4]
 801b690:	4b75      	ldr	r3, [pc, #468]	; (801b868 <parseDHCPMSG+0x29c>)
 801b692:	781b      	ldrb	r3, [r3, #0]
 801b694:	429a      	cmp	r2, r3
 801b696:	d10e      	bne.n	801b6b6 <parseDHCPMSG+0xea>
 801b698:	797a      	ldrb	r2, [r7, #5]
 801b69a:	4b73      	ldr	r3, [pc, #460]	; (801b868 <parseDHCPMSG+0x29c>)
 801b69c:	785b      	ldrb	r3, [r3, #1]
 801b69e:	429a      	cmp	r2, r3
 801b6a0:	d109      	bne.n	801b6b6 <parseDHCPMSG+0xea>
 801b6a2:	79ba      	ldrb	r2, [r7, #6]
 801b6a4:	4b70      	ldr	r3, [pc, #448]	; (801b868 <parseDHCPMSG+0x29c>)
 801b6a6:	789b      	ldrb	r3, [r3, #2]
 801b6a8:	429a      	cmp	r2, r3
 801b6aa:	d104      	bne.n	801b6b6 <parseDHCPMSG+0xea>
 801b6ac:	79fa      	ldrb	r2, [r7, #7]
 801b6ae:	4b6e      	ldr	r3, [pc, #440]	; (801b868 <parseDHCPMSG+0x29c>)
 801b6b0:	78db      	ldrb	r3, [r3, #3]
 801b6b2:	429a      	cmp	r2, r3
 801b6b4:	d015      	beq.n	801b6e2 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b6b6:	793a      	ldrb	r2, [r7, #4]
 801b6b8:	4b6c      	ldr	r3, [pc, #432]	; (801b86c <parseDHCPMSG+0x2a0>)
 801b6ba:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b6bc:	429a      	cmp	r2, r3
 801b6be:	d10e      	bne.n	801b6de <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b6c0:	797a      	ldrb	r2, [r7, #5]
 801b6c2:	4b6a      	ldr	r3, [pc, #424]	; (801b86c <parseDHCPMSG+0x2a0>)
 801b6c4:	785b      	ldrb	r3, [r3, #1]
 801b6c6:	429a      	cmp	r2, r3
 801b6c8:	d109      	bne.n	801b6de <parseDHCPMSG+0x112>
 801b6ca:	79ba      	ldrb	r2, [r7, #6]
 801b6cc:	4b67      	ldr	r3, [pc, #412]	; (801b86c <parseDHCPMSG+0x2a0>)
 801b6ce:	789b      	ldrb	r3, [r3, #2]
 801b6d0:	429a      	cmp	r2, r3
 801b6d2:	d104      	bne.n	801b6de <parseDHCPMSG+0x112>
 801b6d4:	79fa      	ldrb	r2, [r7, #7]
 801b6d6:	4b65      	ldr	r3, [pc, #404]	; (801b86c <parseDHCPMSG+0x2a0>)
 801b6d8:	78db      	ldrb	r3, [r3, #3]
 801b6da:	429a      	cmp	r2, r3
 801b6dc:	d001      	beq.n	801b6e2 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b6de:	2300      	movs	r3, #0
 801b6e0:	e183      	b.n	801b9ea <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b6e2:	4b5f      	ldr	r3, [pc, #380]	; (801b860 <parseDHCPMSG+0x294>)
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b6e8:	697b      	ldr	r3, [r7, #20]
 801b6ea:	33f0      	adds	r3, #240	; 0xf0
 801b6ec:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b6ee:	8a3b      	ldrh	r3, [r7, #16]
 801b6f0:	3bf0      	subs	r3, #240	; 0xf0
 801b6f2:	697a      	ldr	r2, [r7, #20]
 801b6f4:	4413      	add	r3, r2
 801b6f6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b6f8:	e170      	b.n	801b9dc <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b6fa:	697b      	ldr	r3, [r7, #20]
 801b6fc:	781b      	ldrb	r3, [r3, #0]
 801b6fe:	2b36      	cmp	r3, #54	; 0x36
 801b700:	dc76      	bgt.n	801b7f0 <parseDHCPMSG+0x224>
 801b702:	2b00      	cmp	r3, #0
 801b704:	f2c0 815d 	blt.w	801b9c2 <parseDHCPMSG+0x3f6>
 801b708:	2b36      	cmp	r3, #54	; 0x36
 801b70a:	f200 815a 	bhi.w	801b9c2 <parseDHCPMSG+0x3f6>
 801b70e:	a201      	add	r2, pc, #4	; (adr r2, 801b714 <parseDHCPMSG+0x148>)
 801b710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b714:	0801b7fd 	.word	0x0801b7fd
 801b718:	0801b81d 	.word	0x0801b81d
 801b71c:	0801b9c3 	.word	0x0801b9c3
 801b720:	0801b875 	.word	0x0801b875
 801b724:	0801b9c3 	.word	0x0801b9c3
 801b728:	0801b9c3 	.word	0x0801b9c3
 801b72c:	0801b8c1 	.word	0x0801b8c1
 801b730:	0801b9c3 	.word	0x0801b9c3
 801b734:	0801b9c3 	.word	0x0801b9c3
 801b738:	0801b9c3 	.word	0x0801b9c3
 801b73c:	0801b9c3 	.word	0x0801b9c3
 801b740:	0801b9c3 	.word	0x0801b9c3
 801b744:	0801b9c3 	.word	0x0801b9c3
 801b748:	0801b9c3 	.word	0x0801b9c3
 801b74c:	0801b9c3 	.word	0x0801b9c3
 801b750:	0801b9c3 	.word	0x0801b9c3
 801b754:	0801b9c3 	.word	0x0801b9c3
 801b758:	0801b9c3 	.word	0x0801b9c3
 801b75c:	0801b9c3 	.word	0x0801b9c3
 801b760:	0801b9c3 	.word	0x0801b9c3
 801b764:	0801b9c3 	.word	0x0801b9c3
 801b768:	0801b9c3 	.word	0x0801b9c3
 801b76c:	0801b9c3 	.word	0x0801b9c3
 801b770:	0801b9c3 	.word	0x0801b9c3
 801b774:	0801b9c3 	.word	0x0801b9c3
 801b778:	0801b9c3 	.word	0x0801b9c3
 801b77c:	0801b9c3 	.word	0x0801b9c3
 801b780:	0801b9c3 	.word	0x0801b9c3
 801b784:	0801b9c3 	.word	0x0801b9c3
 801b788:	0801b9c3 	.word	0x0801b9c3
 801b78c:	0801b9c3 	.word	0x0801b9c3
 801b790:	0801b9c3 	.word	0x0801b9c3
 801b794:	0801b9c3 	.word	0x0801b9c3
 801b798:	0801b9c3 	.word	0x0801b9c3
 801b79c:	0801b9c3 	.word	0x0801b9c3
 801b7a0:	0801b9c3 	.word	0x0801b9c3
 801b7a4:	0801b9c3 	.word	0x0801b9c3
 801b7a8:	0801b9c3 	.word	0x0801b9c3
 801b7ac:	0801b9c3 	.word	0x0801b9c3
 801b7b0:	0801b9c3 	.word	0x0801b9c3
 801b7b4:	0801b9c3 	.word	0x0801b9c3
 801b7b8:	0801b9c3 	.word	0x0801b9c3
 801b7bc:	0801b9c3 	.word	0x0801b9c3
 801b7c0:	0801b9c3 	.word	0x0801b9c3
 801b7c4:	0801b9c3 	.word	0x0801b9c3
 801b7c8:	0801b9c3 	.word	0x0801b9c3
 801b7cc:	0801b9c3 	.word	0x0801b9c3
 801b7d0:	0801b9c3 	.word	0x0801b9c3
 801b7d4:	0801b9c3 	.word	0x0801b9c3
 801b7d8:	0801b9c3 	.word	0x0801b9c3
 801b7dc:	0801b9c3 	.word	0x0801b9c3
 801b7e0:	0801b90d 	.word	0x0801b90d
 801b7e4:	0801b9c3 	.word	0x0801b9c3
 801b7e8:	0801b805 	.word	0x0801b805
 801b7ec:	0801b969 	.word	0x0801b969
 801b7f0:	2bff      	cmp	r3, #255	; 0xff
 801b7f2:	f040 80e6 	bne.w	801b9c2 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	617b      	str	r3, [r7, #20]
   				break;
 801b7fa:	e0ef      	b.n	801b9dc <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	3301      	adds	r3, #1
 801b800:	617b      	str	r3, [r7, #20]
   				break;
 801b802:	e0eb      	b.n	801b9dc <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801b804:	697b      	ldr	r3, [r7, #20]
 801b806:	3301      	adds	r3, #1
 801b808:	617b      	str	r3, [r7, #20]
   				p++;
 801b80a:	697b      	ldr	r3, [r7, #20]
 801b80c:	3301      	adds	r3, #1
 801b80e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801b810:	697b      	ldr	r3, [r7, #20]
 801b812:	1c5a      	adds	r2, r3, #1
 801b814:	617a      	str	r2, [r7, #20]
 801b816:	781b      	ldrb	r3, [r3, #0]
 801b818:	74fb      	strb	r3, [r7, #19]
   				break;
 801b81a:	e0df      	b.n	801b9dc <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801b81c:	697b      	ldr	r3, [r7, #20]
 801b81e:	3301      	adds	r3, #1
 801b820:	617b      	str	r3, [r7, #20]
   				p++;
 801b822:	697b      	ldr	r3, [r7, #20]
 801b824:	3301      	adds	r3, #1
 801b826:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801b828:	697b      	ldr	r3, [r7, #20]
 801b82a:	1c5a      	adds	r2, r3, #1
 801b82c:	617a      	str	r2, [r7, #20]
 801b82e:	781a      	ldrb	r2, [r3, #0]
 801b830:	4b0f      	ldr	r3, [pc, #60]	; (801b870 <parseDHCPMSG+0x2a4>)
 801b832:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801b834:	697b      	ldr	r3, [r7, #20]
 801b836:	1c5a      	adds	r2, r3, #1
 801b838:	617a      	str	r2, [r7, #20]
 801b83a:	781a      	ldrb	r2, [r3, #0]
 801b83c:	4b0c      	ldr	r3, [pc, #48]	; (801b870 <parseDHCPMSG+0x2a4>)
 801b83e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801b840:	697b      	ldr	r3, [r7, #20]
 801b842:	1c5a      	adds	r2, r3, #1
 801b844:	617a      	str	r2, [r7, #20]
 801b846:	781a      	ldrb	r2, [r3, #0]
 801b848:	4b09      	ldr	r3, [pc, #36]	; (801b870 <parseDHCPMSG+0x2a4>)
 801b84a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	1c5a      	adds	r2, r3, #1
 801b850:	617a      	str	r2, [r7, #20]
 801b852:	781a      	ldrb	r2, [r3, #0]
 801b854:	4b06      	ldr	r3, [pc, #24]	; (801b870 <parseDHCPMSG+0x2a4>)
 801b856:	70da      	strb	r2, [r3, #3]
   				break;
 801b858:	e0c0      	b.n	801b9dc <parseDHCPMSG+0x410>
 801b85a:	bf00      	nop
 801b85c:	20000985 	.word	0x20000985
 801b860:	200009b0 	.word	0x200009b0
 801b864:	200009b4 	.word	0x200009b4
 801b868:	20000988 	.word	0x20000988
 801b86c:	2000098c 	.word	0x2000098c
 801b870:	2000099c 	.word	0x2000099c
   			case routersOnSubnet :
   				p++;
 801b874:	697b      	ldr	r3, [r7, #20]
 801b876:	3301      	adds	r3, #1
 801b878:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b87a:	697b      	ldr	r3, [r7, #20]
 801b87c:	1c5a      	adds	r2, r3, #1
 801b87e:	617a      	str	r2, [r7, #20]
 801b880:	781b      	ldrb	r3, [r3, #0]
 801b882:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801b884:	697b      	ldr	r3, [r7, #20]
 801b886:	1c5a      	adds	r2, r3, #1
 801b888:	617a      	str	r2, [r7, #20]
 801b88a:	781a      	ldrb	r2, [r3, #0]
 801b88c:	4b59      	ldr	r3, [pc, #356]	; (801b9f4 <parseDHCPMSG+0x428>)
 801b88e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801b890:	697b      	ldr	r3, [r7, #20]
 801b892:	1c5a      	adds	r2, r3, #1
 801b894:	617a      	str	r2, [r7, #20]
 801b896:	781a      	ldrb	r2, [r3, #0]
 801b898:	4b56      	ldr	r3, [pc, #344]	; (801b9f4 <parseDHCPMSG+0x428>)
 801b89a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801b89c:	697b      	ldr	r3, [r7, #20]
 801b89e:	1c5a      	adds	r2, r3, #1
 801b8a0:	617a      	str	r2, [r7, #20]
 801b8a2:	781a      	ldrb	r2, [r3, #0]
 801b8a4:	4b53      	ldr	r3, [pc, #332]	; (801b9f4 <parseDHCPMSG+0x428>)
 801b8a6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801b8a8:	697b      	ldr	r3, [r7, #20]
 801b8aa:	1c5a      	adds	r2, r3, #1
 801b8ac:	617a      	str	r2, [r7, #20]
 801b8ae:	781a      	ldrb	r2, [r3, #0]
 801b8b0:	4b50      	ldr	r3, [pc, #320]	; (801b9f4 <parseDHCPMSG+0x428>)
 801b8b2:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b8b4:	7afb      	ldrb	r3, [r7, #11]
 801b8b6:	3b04      	subs	r3, #4
 801b8b8:	697a      	ldr	r2, [r7, #20]
 801b8ba:	4413      	add	r3, r2
 801b8bc:	617b      	str	r3, [r7, #20]
   				break;
 801b8be:	e08d      	b.n	801b9dc <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	3301      	adds	r3, #1
 801b8c4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b8c6:	697b      	ldr	r3, [r7, #20]
 801b8c8:	1c5a      	adds	r2, r3, #1
 801b8ca:	617a      	str	r2, [r7, #20]
 801b8cc:	781b      	ldrb	r3, [r3, #0]
 801b8ce:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801b8d0:	697b      	ldr	r3, [r7, #20]
 801b8d2:	1c5a      	adds	r2, r3, #1
 801b8d4:	617a      	str	r2, [r7, #20]
 801b8d6:	781a      	ldrb	r2, [r3, #0]
 801b8d8:	4b47      	ldr	r3, [pc, #284]	; (801b9f8 <parseDHCPMSG+0x42c>)
 801b8da:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801b8dc:	697b      	ldr	r3, [r7, #20]
 801b8de:	1c5a      	adds	r2, r3, #1
 801b8e0:	617a      	str	r2, [r7, #20]
 801b8e2:	781a      	ldrb	r2, [r3, #0]
 801b8e4:	4b44      	ldr	r3, [pc, #272]	; (801b9f8 <parseDHCPMSG+0x42c>)
 801b8e6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	1c5a      	adds	r2, r3, #1
 801b8ec:	617a      	str	r2, [r7, #20]
 801b8ee:	781a      	ldrb	r2, [r3, #0]
 801b8f0:	4b41      	ldr	r3, [pc, #260]	; (801b9f8 <parseDHCPMSG+0x42c>)
 801b8f2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801b8f4:	697b      	ldr	r3, [r7, #20]
 801b8f6:	1c5a      	adds	r2, r3, #1
 801b8f8:	617a      	str	r2, [r7, #20]
 801b8fa:	781a      	ldrb	r2, [r3, #0]
 801b8fc:	4b3e      	ldr	r3, [pc, #248]	; (801b9f8 <parseDHCPMSG+0x42c>)
 801b8fe:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b900:	7afb      	ldrb	r3, [r7, #11]
 801b902:	3b04      	subs	r3, #4
 801b904:	697a      	ldr	r2, [r7, #20]
 801b906:	4413      	add	r3, r2
 801b908:	617b      	str	r3, [r7, #20]
   				break;
 801b90a:	e067      	b.n	801b9dc <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801b90c:	697b      	ldr	r3, [r7, #20]
 801b90e:	3301      	adds	r3, #1
 801b910:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b912:	697b      	ldr	r3, [r7, #20]
 801b914:	1c5a      	adds	r2, r3, #1
 801b916:	617a      	str	r2, [r7, #20]
 801b918:	781b      	ldrb	r3, [r3, #0]
 801b91a:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801b91c:	697b      	ldr	r3, [r7, #20]
 801b91e:	1c5a      	adds	r2, r3, #1
 801b920:	617a      	str	r2, [r7, #20]
 801b922:	781b      	ldrb	r3, [r3, #0]
 801b924:	461a      	mov	r2, r3
 801b926:	4b35      	ldr	r3, [pc, #212]	; (801b9fc <parseDHCPMSG+0x430>)
 801b928:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b92a:	4b34      	ldr	r3, [pc, #208]	; (801b9fc <parseDHCPMSG+0x430>)
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	021a      	lsls	r2, r3, #8
 801b930:	697b      	ldr	r3, [r7, #20]
 801b932:	1c59      	adds	r1, r3, #1
 801b934:	6179      	str	r1, [r7, #20]
 801b936:	781b      	ldrb	r3, [r3, #0]
 801b938:	4413      	add	r3, r2
 801b93a:	4a30      	ldr	r2, [pc, #192]	; (801b9fc <parseDHCPMSG+0x430>)
 801b93c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b93e:	4b2f      	ldr	r3, [pc, #188]	; (801b9fc <parseDHCPMSG+0x430>)
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	021a      	lsls	r2, r3, #8
 801b944:	697b      	ldr	r3, [r7, #20]
 801b946:	1c59      	adds	r1, r3, #1
 801b948:	6179      	str	r1, [r7, #20]
 801b94a:	781b      	ldrb	r3, [r3, #0]
 801b94c:	4413      	add	r3, r2
 801b94e:	4a2b      	ldr	r2, [pc, #172]	; (801b9fc <parseDHCPMSG+0x430>)
 801b950:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b952:	4b2a      	ldr	r3, [pc, #168]	; (801b9fc <parseDHCPMSG+0x430>)
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	021a      	lsls	r2, r3, #8
 801b958:	697b      	ldr	r3, [r7, #20]
 801b95a:	1c59      	adds	r1, r3, #1
 801b95c:	6179      	str	r1, [r7, #20]
 801b95e:	781b      	ldrb	r3, [r3, #0]
 801b960:	4413      	add	r3, r2
 801b962:	4a26      	ldr	r2, [pc, #152]	; (801b9fc <parseDHCPMSG+0x430>)
 801b964:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801b966:	e039      	b.n	801b9dc <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801b968:	697b      	ldr	r3, [r7, #20]
 801b96a:	3301      	adds	r3, #1
 801b96c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b96e:	697b      	ldr	r3, [r7, #20]
 801b970:	1c5a      	adds	r2, r3, #1
 801b972:	617a      	str	r2, [r7, #20]
 801b974:	781b      	ldrb	r3, [r3, #0]
 801b976:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801b978:	697b      	ldr	r3, [r7, #20]
 801b97a:	1c5a      	adds	r2, r3, #1
 801b97c:	617a      	str	r2, [r7, #20]
 801b97e:	781a      	ldrb	r2, [r3, #0]
 801b980:	4b1f      	ldr	r3, [pc, #124]	; (801ba00 <parseDHCPMSG+0x434>)
 801b982:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801b984:	697b      	ldr	r3, [r7, #20]
 801b986:	1c5a      	adds	r2, r3, #1
 801b988:	617a      	str	r2, [r7, #20]
 801b98a:	781a      	ldrb	r2, [r3, #0]
 801b98c:	4b1c      	ldr	r3, [pc, #112]	; (801ba00 <parseDHCPMSG+0x434>)
 801b98e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	1c5a      	adds	r2, r3, #1
 801b994:	617a      	str	r2, [r7, #20]
 801b996:	781a      	ldrb	r2, [r3, #0]
 801b998:	4b19      	ldr	r3, [pc, #100]	; (801ba00 <parseDHCPMSG+0x434>)
 801b99a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	1c5a      	adds	r2, r3, #1
 801b9a0:	617a      	str	r2, [r7, #20]
 801b9a2:	781a      	ldrb	r2, [r3, #0]
 801b9a4:	4b16      	ldr	r3, [pc, #88]	; (801ba00 <parseDHCPMSG+0x434>)
 801b9a6:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801b9a8:	793a      	ldrb	r2, [r7, #4]
 801b9aa:	4b16      	ldr	r3, [pc, #88]	; (801ba04 <parseDHCPMSG+0x438>)
 801b9ac:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801b9ae:	797a      	ldrb	r2, [r7, #5]
 801b9b0:	4b14      	ldr	r3, [pc, #80]	; (801ba04 <parseDHCPMSG+0x438>)
 801b9b2:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801b9b4:	79ba      	ldrb	r2, [r7, #6]
 801b9b6:	4b13      	ldr	r3, [pc, #76]	; (801ba04 <parseDHCPMSG+0x438>)
 801b9b8:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801b9ba:	79fa      	ldrb	r2, [r7, #7]
 801b9bc:	4b11      	ldr	r3, [pc, #68]	; (801ba04 <parseDHCPMSG+0x438>)
 801b9be:	70da      	strb	r2, [r3, #3]
   				break;
 801b9c0:	e00c      	b.n	801b9dc <parseDHCPMSG+0x410>
   			default :
   				p++;
 801b9c2:	697b      	ldr	r3, [r7, #20]
 801b9c4:	3301      	adds	r3, #1
 801b9c6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b9c8:	697b      	ldr	r3, [r7, #20]
 801b9ca:	1c5a      	adds	r2, r3, #1
 801b9cc:	617a      	str	r2, [r7, #20]
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801b9d2:	7afb      	ldrb	r3, [r7, #11]
 801b9d4:	697a      	ldr	r2, [r7, #20]
 801b9d6:	4413      	add	r3, r2
 801b9d8:	617b      	str	r3, [r7, #20]
   				break;
 801b9da:	bf00      	nop
		while ( p < e ) {
 801b9dc:	697a      	ldr	r2, [r7, #20]
 801b9de:	68fb      	ldr	r3, [r7, #12]
 801b9e0:	429a      	cmp	r2, r3
 801b9e2:	f4ff ae8a 	bcc.w	801b6fa <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801b9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	371c      	adds	r7, #28
 801b9ee:	46bd      	mov	sp, r7
 801b9f0:	bd90      	pop	{r4, r7, pc}
 801b9f2:	bf00      	nop
 801b9f4:	20000998 	.word	0x20000998
 801b9f8:	200009a0 	.word	0x200009a0
 801b9fc:	200000f0 	.word	0x200000f0
 801ba00:	20000988 	.word	0x20000988
 801ba04:	2000098c 	.word	0x2000098c

0801ba08 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b082      	sub	sp, #8
 801ba0c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801ba0e:	4b7f      	ldr	r3, [pc, #508]	; (801bc0c <DHCP_run+0x204>)
 801ba10:	f993 3000 	ldrsb.w	r3, [r3]
 801ba14:	2b06      	cmp	r3, #6
 801ba16:	d101      	bne.n	801ba1c <DHCP_run+0x14>
 801ba18:	2305      	movs	r3, #5
 801ba1a:	e0f3      	b.n	801bc04 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801ba1c:	4b7c      	ldr	r3, [pc, #496]	; (801bc10 <DHCP_run+0x208>)
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	009b      	lsls	r3, r3, #2
 801ba22:	3301      	adds	r3, #1
 801ba24:	00db      	lsls	r3, r3, #3
 801ba26:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	f7fc fe14 	bl	8018658 <WIZCHIP_READ>
 801ba30:	4603      	mov	r3, r0
 801ba32:	2b22      	cmp	r3, #34	; 0x22
 801ba34:	d006      	beq.n	801ba44 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801ba36:	4b76      	ldr	r3, [pc, #472]	; (801bc10 <DHCP_run+0x208>)
 801ba38:	7818      	ldrb	r0, [r3, #0]
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	2244      	movs	r2, #68	; 0x44
 801ba3e:	2102      	movs	r1, #2
 801ba40:	f7fd f8fa 	bl	8018c38 <socket>

	ret = DHCP_RUNNING;
 801ba44:	2301      	movs	r3, #1
 801ba46:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801ba48:	f7ff fdc0 	bl	801b5cc <parseDHCPMSG>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801ba50:	4b6e      	ldr	r3, [pc, #440]	; (801bc0c <DHCP_run+0x204>)
 801ba52:	f993 3000 	ldrsb.w	r3, [r3]
 801ba56:	2b04      	cmp	r3, #4
 801ba58:	f200 80d0 	bhi.w	801bbfc <DHCP_run+0x1f4>
 801ba5c:	a201      	add	r2, pc, #4	; (adr r2, 801ba64 <DHCP_run+0x5c>)
 801ba5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba62:	bf00      	nop
 801ba64:	0801ba79 	.word	0x0801ba79
 801ba68:	0801ba9d 	.word	0x0801ba9d
 801ba6c:	0801bae1 	.word	0x0801bae1
 801ba70:	0801bb31 	.word	0x0801bb31
 801ba74:	0801bb8b 	.word	0x0801bb8b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801ba78:	4b66      	ldr	r3, [pc, #408]	; (801bc14 <DHCP_run+0x20c>)
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801ba7e:	4b65      	ldr	r3, [pc, #404]	; (801bc14 <DHCP_run+0x20c>)
 801ba80:	2200      	movs	r2, #0
 801ba82:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801ba84:	4b63      	ldr	r3, [pc, #396]	; (801bc14 <DHCP_run+0x20c>)
 801ba86:	2200      	movs	r2, #0
 801ba88:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801ba8a:	4b62      	ldr	r3, [pc, #392]	; (801bc14 <DHCP_run+0x20c>)
 801ba8c:	2200      	movs	r2, #0
 801ba8e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801ba90:	f7fe fffa 	bl	801aa88 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801ba94:	4b5d      	ldr	r3, [pc, #372]	; (801bc0c <DHCP_run+0x204>)
 801ba96:	2201      	movs	r2, #1
 801ba98:	701a      	strb	r2, [r3, #0]
   		break;
 801ba9a:	e0b2      	b.n	801bc02 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801ba9c:	79bb      	ldrb	r3, [r7, #6]
 801ba9e:	2b02      	cmp	r3, #2
 801baa0:	d119      	bne.n	801bad6 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801baa2:	4b5d      	ldr	r3, [pc, #372]	; (801bc18 <DHCP_run+0x210>)
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	7c1a      	ldrb	r2, [r3, #16]
 801baa8:	4b5a      	ldr	r3, [pc, #360]	; (801bc14 <DHCP_run+0x20c>)
 801baaa:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801baac:	4b5a      	ldr	r3, [pc, #360]	; (801bc18 <DHCP_run+0x210>)
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	7c5a      	ldrb	r2, [r3, #17]
 801bab2:	4b58      	ldr	r3, [pc, #352]	; (801bc14 <DHCP_run+0x20c>)
 801bab4:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801bab6:	4b58      	ldr	r3, [pc, #352]	; (801bc18 <DHCP_run+0x210>)
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	7c9a      	ldrb	r2, [r3, #18]
 801babc:	4b55      	ldr	r3, [pc, #340]	; (801bc14 <DHCP_run+0x20c>)
 801babe:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801bac0:	4b55      	ldr	r3, [pc, #340]	; (801bc18 <DHCP_run+0x210>)
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	7cda      	ldrb	r2, [r3, #19]
 801bac6:	4b53      	ldr	r3, [pc, #332]	; (801bc14 <DHCP_run+0x20c>)
 801bac8:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801baca:	f7ff f9a3 	bl	801ae14 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801bace:	4b4f      	ldr	r3, [pc, #316]	; (801bc0c <DHCP_run+0x204>)
 801bad0:	2202      	movs	r2, #2
 801bad2:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801bad4:	e095      	b.n	801bc02 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bad6:	f000 f8b1 	bl	801bc3c <check_DHCP_timeout>
 801bada:	4603      	mov	r3, r0
 801badc:	71fb      	strb	r3, [r7, #7]
         break;
 801bade:	e090      	b.n	801bc02 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801bae0:	79bb      	ldrb	r3, [r7, #6]
 801bae2:	2b05      	cmp	r3, #5
 801bae4:	d116      	bne.n	801bb14 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801bae6:	f000 f8e9 	bl	801bcbc <check_DHCP_leasedIP>
 801baea:	4603      	mov	r3, r0
 801baec:	2b00      	cmp	r3, #0
 801baee:	d008      	beq.n	801bb02 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801baf0:	4b4a      	ldr	r3, [pc, #296]	; (801bc1c <DHCP_run+0x214>)
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	4798      	blx	r3
					reset_DHCP_timeout();
 801baf6:	f000 f9b9 	bl	801be6c <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801bafa:	4b44      	ldr	r3, [pc, #272]	; (801bc0c <DHCP_run+0x204>)
 801bafc:	2203      	movs	r2, #3
 801bafe:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801bb00:	e07f      	b.n	801bc02 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801bb02:	f000 f9b3 	bl	801be6c <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801bb06:	4b46      	ldr	r3, [pc, #280]	; (801bc20 <DHCP_run+0x218>)
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801bb0c:	4b3f      	ldr	r3, [pc, #252]	; (801bc0c <DHCP_run+0x204>)
 801bb0e:	2200      	movs	r2, #0
 801bb10:	701a      	strb	r2, [r3, #0]
		break;
 801bb12:	e076      	b.n	801bc02 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bb14:	79bb      	ldrb	r3, [r7, #6]
 801bb16:	2b06      	cmp	r3, #6
 801bb18:	d105      	bne.n	801bb26 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801bb1a:	f000 f9a7 	bl	801be6c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bb1e:	4b3b      	ldr	r3, [pc, #236]	; (801bc0c <DHCP_run+0x204>)
 801bb20:	2201      	movs	r2, #1
 801bb22:	701a      	strb	r2, [r3, #0]
		break;
 801bb24:	e06d      	b.n	801bc02 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bb26:	f000 f889 	bl	801bc3c <check_DHCP_timeout>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	71fb      	strb	r3, [r7, #7]
		break;
 801bb2e:	e068      	b.n	801bc02 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801bb30:	2304      	movs	r3, #4
 801bb32:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801bb34:	4b3b      	ldr	r3, [pc, #236]	; (801bc24 <DHCP_run+0x21c>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb3c:	d060      	beq.n	801bc00 <DHCP_run+0x1f8>
 801bb3e:	4b39      	ldr	r3, [pc, #228]	; (801bc24 <DHCP_run+0x21c>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	089a      	lsrs	r2, r3, #2
 801bb44:	4b38      	ldr	r3, [pc, #224]	; (801bc28 <DHCP_run+0x220>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	429a      	cmp	r2, r3
 801bb4a:	d259      	bcs.n	801bc00 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801bb50:	4b30      	ldr	r3, [pc, #192]	; (801bc14 <DHCP_run+0x20c>)
 801bb52:	781a      	ldrb	r2, [r3, #0]
 801bb54:	4b35      	ldr	r3, [pc, #212]	; (801bc2c <DHCP_run+0x224>)
 801bb56:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801bb58:	4b2e      	ldr	r3, [pc, #184]	; (801bc14 <DHCP_run+0x20c>)
 801bb5a:	785a      	ldrb	r2, [r3, #1]
 801bb5c:	4b33      	ldr	r3, [pc, #204]	; (801bc2c <DHCP_run+0x224>)
 801bb5e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801bb60:	4b2c      	ldr	r3, [pc, #176]	; (801bc14 <DHCP_run+0x20c>)
 801bb62:	789a      	ldrb	r2, [r3, #2]
 801bb64:	4b31      	ldr	r3, [pc, #196]	; (801bc2c <DHCP_run+0x224>)
 801bb66:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801bb68:	4b2a      	ldr	r3, [pc, #168]	; (801bc14 <DHCP_run+0x20c>)
 801bb6a:	78da      	ldrb	r2, [r3, #3]
 801bb6c:	4b2f      	ldr	r3, [pc, #188]	; (801bc2c <DHCP_run+0x224>)
 801bb6e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801bb70:	4b2f      	ldr	r3, [pc, #188]	; (801bc30 <DHCP_run+0x228>)
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	3301      	adds	r3, #1
 801bb76:	4a2e      	ldr	r2, [pc, #184]	; (801bc30 <DHCP_run+0x228>)
 801bb78:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801bb7a:	f7ff f94b 	bl	801ae14 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801bb7e:	f000 f975 	bl	801be6c <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801bb82:	4b22      	ldr	r3, [pc, #136]	; (801bc0c <DHCP_run+0x204>)
 801bb84:	2204      	movs	r2, #4
 801bb86:	701a      	strb	r2, [r3, #0]
			}
		break;
 801bb88:	e03a      	b.n	801bc00 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801bb8a:	2304      	movs	r3, #4
 801bb8c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801bb8e:	79bb      	ldrb	r3, [r7, #6]
 801bb90:	2b05      	cmp	r3, #5
 801bb92:	d125      	bne.n	801bbe0 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801bb94:	4b27      	ldr	r3, [pc, #156]	; (801bc34 <DHCP_run+0x22c>)
 801bb96:	2200      	movs	r2, #0
 801bb98:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801bb9a:	4b24      	ldr	r3, [pc, #144]	; (801bc2c <DHCP_run+0x224>)
 801bb9c:	781a      	ldrb	r2, [r3, #0]
 801bb9e:	4b1d      	ldr	r3, [pc, #116]	; (801bc14 <DHCP_run+0x20c>)
 801bba0:	781b      	ldrb	r3, [r3, #0]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d111      	bne.n	801bbca <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bba6:	4b21      	ldr	r3, [pc, #132]	; (801bc2c <DHCP_run+0x224>)
 801bba8:	785a      	ldrb	r2, [r3, #1]
 801bbaa:	4b1a      	ldr	r3, [pc, #104]	; (801bc14 <DHCP_run+0x20c>)
 801bbac:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	d10b      	bne.n	801bbca <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bbb2:	4b1e      	ldr	r3, [pc, #120]	; (801bc2c <DHCP_run+0x224>)
 801bbb4:	789a      	ldrb	r2, [r3, #2]
 801bbb6:	4b17      	ldr	r3, [pc, #92]	; (801bc14 <DHCP_run+0x20c>)
 801bbb8:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bbba:	429a      	cmp	r2, r3
 801bbbc:	d105      	bne.n	801bbca <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801bbbe:	4b1b      	ldr	r3, [pc, #108]	; (801bc2c <DHCP_run+0x224>)
 801bbc0:	78da      	ldrb	r2, [r3, #3]
 801bbc2:	4b14      	ldr	r3, [pc, #80]	; (801bc14 <DHCP_run+0x20c>)
 801bbc4:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bbc6:	429a      	cmp	r2, r3
 801bbc8:	d004      	beq.n	801bbd4 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801bbca:	2303      	movs	r3, #3
 801bbcc:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801bbce:	4b1a      	ldr	r3, [pc, #104]	; (801bc38 <DHCP_run+0x230>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801bbd4:	f000 f94a 	bl	801be6c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801bbd8:	4b0c      	ldr	r3, [pc, #48]	; (801bc0c <DHCP_run+0x204>)
 801bbda:	2203      	movs	r2, #3
 801bbdc:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801bbde:	e010      	b.n	801bc02 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bbe0:	79bb      	ldrb	r3, [r7, #6]
 801bbe2:	2b06      	cmp	r3, #6
 801bbe4:	d105      	bne.n	801bbf2 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801bbe6:	f000 f941 	bl	801be6c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bbea:	4b08      	ldr	r3, [pc, #32]	; (801bc0c <DHCP_run+0x204>)
 801bbec:	2201      	movs	r2, #1
 801bbee:	701a      	strb	r2, [r3, #0]
	   	break;
 801bbf0:	e007      	b.n	801bc02 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bbf2:	f000 f823 	bl	801bc3c <check_DHCP_timeout>
 801bbf6:	4603      	mov	r3, r0
 801bbf8:	71fb      	strb	r3, [r7, #7]
	   	break;
 801bbfa:	e002      	b.n	801bc02 <DHCP_run+0x1fa>
		default :
   		break;
 801bbfc:	bf00      	nop
 801bbfe:	e000      	b.n	801bc02 <DHCP_run+0x1fa>
		break;
 801bc00:	bf00      	nop
	}

	return ret;
 801bc02:	79fb      	ldrb	r3, [r7, #7]
}
 801bc04:	4618      	mov	r0, r3
 801bc06:	3708      	adds	r7, #8
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	bd80      	pop	{r7, pc}
 801bc0c:	200009a4 	.word	0x200009a4
 801bc10:	20000985 	.word	0x20000985
 801bc14:	20000994 	.word	0x20000994
 801bc18:	200009b0 	.word	0x200009b0
 801bc1c:	20000104 	.word	0x20000104
 801bc20:	2000010c 	.word	0x2000010c
 801bc24:	200000f0 	.word	0x200000f0
 801bc28:	200009a8 	.word	0x200009a8
 801bc2c:	20000990 	.word	0x20000990
 801bc30:	200009ac 	.word	0x200009ac
 801bc34:	200009a5 	.word	0x200009a5
 801bc38:	20000108 	.word	0x20000108

0801bc3c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b082      	sub	sp, #8
 801bc40:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801bc42:	2301      	movs	r3, #1
 801bc44:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
		if (dhcp_tick_next < dhcp_tick_1s) {
 801bc46:	4b19      	ldr	r3, [pc, #100]	; (801bcac <check_DHCP_timeout+0x70>)
 801bc48:	681a      	ldr	r2, [r3, #0]
 801bc4a:	4b19      	ldr	r3, [pc, #100]	; (801bcb0 <check_DHCP_timeout+0x74>)
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d226      	bcs.n	801bca0 <check_DHCP_timeout+0x64>

			switch ( dhcp_state ) {
 801bc52:	4b18      	ldr	r3, [pc, #96]	; (801bcb4 <check_DHCP_timeout+0x78>)
 801bc54:	f993 3000 	ldrsb.w	r3, [r3]
 801bc58:	2b04      	cmp	r3, #4
 801bc5a:	d00c      	beq.n	801bc76 <check_DHCP_timeout+0x3a>
 801bc5c:	2b04      	cmp	r3, #4
 801bc5e:	dc0d      	bgt.n	801bc7c <check_DHCP_timeout+0x40>
 801bc60:	2b01      	cmp	r3, #1
 801bc62:	d002      	beq.n	801bc6a <check_DHCP_timeout+0x2e>
 801bc64:	2b02      	cmp	r3, #2
 801bc66:	d003      	beq.n	801bc70 <check_DHCP_timeout+0x34>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801bc68:	e008      	b.n	801bc7c <check_DHCP_timeout+0x40>
					send_DHCP_DISCOVER();
 801bc6a:	f7fe ff0d 	bl	801aa88 <send_DHCP_DISCOVER>
				break;
 801bc6e:	e006      	b.n	801bc7e <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801bc70:	f7ff f8d0 	bl	801ae14 <send_DHCP_REQUEST>
				break;
 801bc74:	e003      	b.n	801bc7e <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801bc76:	f7ff f8cd 	bl	801ae14 <send_DHCP_REQUEST>
				break;
 801bc7a:	e000      	b.n	801bc7e <check_DHCP_timeout+0x42>
				break;
 801bc7c:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801bc7e:	4b0c      	ldr	r3, [pc, #48]	; (801bcb0 <check_DHCP_timeout+0x74>)
 801bc80:	2200      	movs	r2, #0
 801bc82:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801bc84:	4b0a      	ldr	r3, [pc, #40]	; (801bcb0 <check_DHCP_timeout+0x74>)
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	330a      	adds	r3, #10
 801bc8a:	4a08      	ldr	r2, [pc, #32]	; (801bcac <check_DHCP_timeout+0x70>)
 801bc8c:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801bc8e:	4b0a      	ldr	r3, [pc, #40]	; (801bcb8 <check_DHCP_timeout+0x7c>)
 801bc90:	f993 3000 	ldrsb.w	r3, [r3]
 801bc94:	b2db      	uxtb	r3, r3
 801bc96:	3301      	adds	r3, #1
 801bc98:	b2db      	uxtb	r3, r3
 801bc9a:	b25a      	sxtb	r2, r3
 801bc9c:	4b06      	ldr	r3, [pc, #24]	; (801bcb8 <check_DHCP_timeout+0x7c>)
 801bc9e:	701a      	strb	r2, [r3, #0]
			default :
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
 801bca0:	79fb      	ldrb	r3, [r7, #7]
}
 801bca2:	4618      	mov	r0, r3
 801bca4:	3708      	adds	r7, #8
 801bca6:	46bd      	mov	sp, r7
 801bca8:	bd80      	pop	{r7, pc}
 801bcaa:	bf00      	nop
 801bcac:	200000f4 	.word	0x200000f4
 801bcb0:	200009a8 	.word	0x200009a8
 801bcb4:	200009a4 	.word	0x200009a4
 801bcb8:	200009a5 	.word	0x200009a5

0801bcbc <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b084      	sub	sp, #16
 801bcc0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801bcc2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bcc6:	f7fc fcc7 	bl	8018658 <WIZCHIP_READ>
 801bcca:	4603      	mov	r3, r0
 801bccc:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801bcce:	2103      	movs	r1, #3
 801bcd0:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bcd4:	f7fc fd0c 	bl	80186f0 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801bcd8:	4b15      	ldr	r3, [pc, #84]	; (801bd30 <check_DHCP_leasedIP+0x74>)
 801bcda:	7818      	ldrb	r0, [r3, #0]
 801bcdc:	f241 3388 	movw	r3, #5000	; 0x1388
 801bce0:	9300      	str	r3, [sp, #0]
 801bce2:	4b14      	ldr	r3, [pc, #80]	; (801bd34 <check_DHCP_leasedIP+0x78>)
 801bce4:	2211      	movs	r2, #17
 801bce6:	4914      	ldr	r1, [pc, #80]	; (801bd38 <check_DHCP_leasedIP+0x7c>)
 801bce8:	f7fd fc84 	bl	80195f4 <sendto>
 801bcec:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801bcee:	79fb      	ldrb	r3, [r7, #7]
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bcf6:	f7fc fcfb 	bl	80186f0 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	f113 0f0d 	cmn.w	r3, #13
 801bd00:	d101      	bne.n	801bd06 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801bd02:	2301      	movs	r3, #1
 801bd04:	e010      	b.n	801bd28 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801bd06:	f7ff fb0f 	bl	801b328 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801bd0a:	4b0c      	ldr	r3, [pc, #48]	; (801bd3c <check_DHCP_leasedIP+0x80>)
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bd10:	e003      	b.n	801bd1a <check_DHCP_leasedIP+0x5e>

			delay(200);
 801bd12:	4b0b      	ldr	r3, [pc, #44]	; (801bd40 <check_DHCP_leasedIP+0x84>)
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	20c8      	movs	r0, #200	; 0xc8
 801bd18:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bd1a:	4b08      	ldr	r3, [pc, #32]	; (801bd3c <check_DHCP_leasedIP+0x80>)
 801bd1c:	681a      	ldr	r2, [r3, #0]
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	1ad3      	subs	r3, r2, r3
 801bd22:	2b01      	cmp	r3, #1
 801bd24:	d9f5      	bls.n	801bd12 <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801bd26:	2300      	movs	r3, #0
	}
}	
 801bd28:	4618      	mov	r0, r3
 801bd2a:	3708      	adds	r7, #8
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	bd80      	pop	{r7, pc}
 801bd30:	20000985 	.word	0x20000985
 801bd34:	20000994 	.word	0x20000994
 801bd38:	08032bb0 	.word	0x08032bb0
 801bd3c:	200009a8 	.word	0x200009a8
 801bd40:	20000110 	.word	0x20000110

0801bd44 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b084      	sub	sp, #16
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	6039      	str	r1, [r7, #0]
 801bd4e:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801bd50:	2300      	movs	r3, #0
 801bd52:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801bd54:	2206      	movs	r2, #6
 801bd56:	493f      	ldr	r1, [pc, #252]	; (801be54 <DHCP_init+0x110>)
 801bd58:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bd5c:	f7fc fd16 	bl	801878c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801bd60:	4b3c      	ldr	r3, [pc, #240]	; (801be54 <DHCP_init+0x110>)
 801bd62:	781a      	ldrb	r2, [r3, #0]
 801bd64:	4b3b      	ldr	r3, [pc, #236]	; (801be54 <DHCP_init+0x110>)
 801bd66:	785b      	ldrb	r3, [r3, #1]
 801bd68:	4313      	orrs	r3, r2
 801bd6a:	b2da      	uxtb	r2, r3
 801bd6c:	4b39      	ldr	r3, [pc, #228]	; (801be54 <DHCP_init+0x110>)
 801bd6e:	789b      	ldrb	r3, [r3, #2]
 801bd70:	4313      	orrs	r3, r2
 801bd72:	b2da      	uxtb	r2, r3
 801bd74:	4b37      	ldr	r3, [pc, #220]	; (801be54 <DHCP_init+0x110>)
 801bd76:	78db      	ldrb	r3, [r3, #3]
 801bd78:	4313      	orrs	r3, r2
 801bd7a:	b2da      	uxtb	r2, r3
 801bd7c:	4b35      	ldr	r3, [pc, #212]	; (801be54 <DHCP_init+0x110>)
 801bd7e:	791b      	ldrb	r3, [r3, #4]
 801bd80:	4313      	orrs	r3, r2
 801bd82:	b2da      	uxtb	r2, r3
 801bd84:	4b33      	ldr	r3, [pc, #204]	; (801be54 <DHCP_init+0x110>)
 801bd86:	795b      	ldrb	r3, [r3, #5]
 801bd88:	4313      	orrs	r3, r2
 801bd8a:	b2db      	uxtb	r3, r3
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d117      	bne.n	801bdc0 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801bd90:	4b30      	ldr	r3, [pc, #192]	; (801be54 <DHCP_init+0x110>)
 801bd92:	2200      	movs	r2, #0
 801bd94:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801bd96:	4b2f      	ldr	r3, [pc, #188]	; (801be54 <DHCP_init+0x110>)
 801bd98:	2208      	movs	r2, #8
 801bd9a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801bd9c:	4b2d      	ldr	r3, [pc, #180]	; (801be54 <DHCP_init+0x110>)
 801bd9e:	22dc      	movs	r2, #220	; 0xdc
 801bda0:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801bda2:	4b2c      	ldr	r3, [pc, #176]	; (801be54 <DHCP_init+0x110>)
 801bda4:	2200      	movs	r2, #0
 801bda6:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801bda8:	4b2a      	ldr	r3, [pc, #168]	; (801be54 <DHCP_init+0x110>)
 801bdaa:	2200      	movs	r2, #0
 801bdac:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801bdae:	4b29      	ldr	r3, [pc, #164]	; (801be54 <DHCP_init+0x110>)
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801bdb4:	2206      	movs	r2, #6
 801bdb6:	4927      	ldr	r1, [pc, #156]	; (801be54 <DHCP_init+0x110>)
 801bdb8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bdbc:	f7fc fd46 	bl	801884c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801bdc0:	4a25      	ldr	r2, [pc, #148]	; (801be58 <DHCP_init+0x114>)
 801bdc2:	79fb      	ldrb	r3, [r7, #7]
 801bdc4:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801bdc6:	4a25      	ldr	r2, [pc, #148]	; (801be5c <DHCP_init+0x118>)
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801bdcc:	4b24      	ldr	r3, [pc, #144]	; (801be60 <DHCP_init+0x11c>)
 801bdce:	4a25      	ldr	r2, [pc, #148]	; (801be64 <DHCP_init+0x120>)
 801bdd0:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801bdd2:	4b20      	ldr	r3, [pc, #128]	; (801be54 <DHCP_init+0x110>)
 801bdd4:	78db      	ldrb	r3, [r3, #3]
 801bdd6:	461a      	mov	r2, r3
 801bdd8:	4b21      	ldr	r3, [pc, #132]	; (801be60 <DHCP_init+0x11c>)
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	4413      	add	r3, r2
 801bdde:	4a20      	ldr	r2, [pc, #128]	; (801be60 <DHCP_init+0x11c>)
 801bde0:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801bde2:	4b1c      	ldr	r3, [pc, #112]	; (801be54 <DHCP_init+0x110>)
 801bde4:	791b      	ldrb	r3, [r3, #4]
 801bde6:	461a      	mov	r2, r3
 801bde8:	4b1d      	ldr	r3, [pc, #116]	; (801be60 <DHCP_init+0x11c>)
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	4413      	add	r3, r2
 801bdee:	4a1c      	ldr	r2, [pc, #112]	; (801be60 <DHCP_init+0x11c>)
 801bdf0:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801bdf2:	4b18      	ldr	r3, [pc, #96]	; (801be54 <DHCP_init+0x110>)
 801bdf4:	795b      	ldrb	r3, [r3, #5]
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	4b19      	ldr	r3, [pc, #100]	; (801be60 <DHCP_init+0x11c>)
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	4a18      	ldr	r2, [pc, #96]	; (801be60 <DHCP_init+0x11c>)
 801be00:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801be02:	4b14      	ldr	r3, [pc, #80]	; (801be54 <DHCP_init+0x110>)
 801be04:	78da      	ldrb	r2, [r3, #3]
 801be06:	4b13      	ldr	r3, [pc, #76]	; (801be54 <DHCP_init+0x110>)
 801be08:	791b      	ldrb	r3, [r3, #4]
 801be0a:	4053      	eors	r3, r2
 801be0c:	b2da      	uxtb	r2, r3
 801be0e:	4b11      	ldr	r3, [pc, #68]	; (801be54 <DHCP_init+0x110>)
 801be10:	795b      	ldrb	r3, [r3, #5]
 801be12:	4053      	eors	r3, r2
 801be14:	b2db      	uxtb	r3, r3
 801be16:	461a      	mov	r2, r3
 801be18:	4b11      	ldr	r3, [pc, #68]	; (801be60 <DHCP_init+0x11c>)
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	4413      	add	r3, r2
 801be1e:	4a10      	ldr	r2, [pc, #64]	; (801be60 <DHCP_init+0x11c>)
 801be20:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801be22:	f107 030c 	add.w	r3, r7, #12
 801be26:	2204      	movs	r2, #4
 801be28:	4619      	mov	r1, r3
 801be2a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801be2e:	f7fc fd0d 	bl	801884c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801be32:	f107 030c 	add.w	r3, r7, #12
 801be36:	2204      	movs	r2, #4
 801be38:	4619      	mov	r1, r3
 801be3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801be3e:	f7fc fd05 	bl	801884c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801be42:	f000 f813 	bl	801be6c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801be46:	4b08      	ldr	r3, [pc, #32]	; (801be68 <DHCP_init+0x124>)
 801be48:	2200      	movs	r2, #0
 801be4a:	701a      	strb	r2, [r3, #0]
}
 801be4c:	bf00      	nop
 801be4e:	3710      	adds	r7, #16
 801be50:	46bd      	mov	sp, r7
 801be52:	bd80      	pop	{r7, pc}
 801be54:	200009b4 	.word	0x200009b4
 801be58:	20000985 	.word	0x20000985
 801be5c:	200009b0 	.word	0x200009b0
 801be60:	200009ac 	.word	0x200009ac
 801be64:	12345678 	.word	0x12345678
 801be68:	200009a4 	.word	0x200009a4

0801be6c <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801be6c:	b480      	push	{r7}
 801be6e:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801be70:	4b06      	ldr	r3, [pc, #24]	; (801be8c <reset_DHCP_timeout+0x20>)
 801be72:	2200      	movs	r2, #0
 801be74:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801be76:	4b06      	ldr	r3, [pc, #24]	; (801be90 <reset_DHCP_timeout+0x24>)
 801be78:	220a      	movs	r2, #10
 801be7a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801be7c:	4b05      	ldr	r3, [pc, #20]	; (801be94 <reset_DHCP_timeout+0x28>)
 801be7e:	2200      	movs	r2, #0
 801be80:	701a      	strb	r2, [r3, #0]
}
 801be82:	bf00      	nop
 801be84:	46bd      	mov	sp, r7
 801be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be8a:	4770      	bx	lr
 801be8c:	200009a8 	.word	0x200009a8
 801be90:	200000f4 	.word	0x200000f4
 801be94:	200009a5 	.word	0x200009a5

0801be98 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801be98:	b480      	push	{r7}
 801be9a:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801be9c:	4b04      	ldr	r3, [pc, #16]	; (801beb0 <DHCP_time_handler+0x18>)
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	3301      	adds	r3, #1
 801bea2:	4a03      	ldr	r2, [pc, #12]	; (801beb0 <DHCP_time_handler+0x18>)
 801bea4:	6013      	str	r3, [r2, #0]
}
 801bea6:	bf00      	nop
 801bea8:	46bd      	mov	sp, r7
 801beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beae:	4770      	bx	lr
 801beb0:	200009a8 	.word	0x200009a8

0801beb4 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801beb4:	b480      	push	{r7}
 801beb6:	b083      	sub	sp, #12
 801beb8:	af00      	add	r7, sp, #0
 801beba:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801bebc:	4b0c      	ldr	r3, [pc, #48]	; (801bef0 <getIPfromDHCP+0x3c>)
 801bebe:	781a      	ldrb	r2, [r3, #0]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	3301      	adds	r3, #1
 801bec8:	4a09      	ldr	r2, [pc, #36]	; (801bef0 <getIPfromDHCP+0x3c>)
 801beca:	7852      	ldrb	r2, [r2, #1]
 801becc:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	3302      	adds	r3, #2
 801bed2:	4a07      	ldr	r2, [pc, #28]	; (801bef0 <getIPfromDHCP+0x3c>)
 801bed4:	7892      	ldrb	r2, [r2, #2]
 801bed6:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	3303      	adds	r3, #3
 801bedc:	4a04      	ldr	r2, [pc, #16]	; (801bef0 <getIPfromDHCP+0x3c>)
 801bede:	78d2      	ldrb	r2, [r2, #3]
 801bee0:	701a      	strb	r2, [r3, #0]
}
 801bee2:	bf00      	nop
 801bee4:	370c      	adds	r7, #12
 801bee6:	46bd      	mov	sp, r7
 801bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beec:	4770      	bx	lr
 801beee:	bf00      	nop
 801bef0:	20000994 	.word	0x20000994

0801bef4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801bef4:	b480      	push	{r7}
 801bef6:	b083      	sub	sp, #12
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801befc:	4b0c      	ldr	r3, [pc, #48]	; (801bf30 <getGWfromDHCP+0x3c>)
 801befe:	781a      	ldrb	r2, [r3, #0]
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	3301      	adds	r3, #1
 801bf08:	4a09      	ldr	r2, [pc, #36]	; (801bf30 <getGWfromDHCP+0x3c>)
 801bf0a:	7852      	ldrb	r2, [r2, #1]
 801bf0c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	3302      	adds	r3, #2
 801bf12:	4a07      	ldr	r2, [pc, #28]	; (801bf30 <getGWfromDHCP+0x3c>)
 801bf14:	7892      	ldrb	r2, [r2, #2]
 801bf16:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	3303      	adds	r3, #3
 801bf1c:	4a04      	ldr	r2, [pc, #16]	; (801bf30 <getGWfromDHCP+0x3c>)
 801bf1e:	78d2      	ldrb	r2, [r2, #3]
 801bf20:	701a      	strb	r2, [r3, #0]
}
 801bf22:	bf00      	nop
 801bf24:	370c      	adds	r7, #12
 801bf26:	46bd      	mov	sp, r7
 801bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf2c:	4770      	bx	lr
 801bf2e:	bf00      	nop
 801bf30:	20000998 	.word	0x20000998

0801bf34 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801bf34:	b480      	push	{r7}
 801bf36:	b083      	sub	sp, #12
 801bf38:	af00      	add	r7, sp, #0
 801bf3a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801bf3c:	4b0c      	ldr	r3, [pc, #48]	; (801bf70 <getSNfromDHCP+0x3c>)
 801bf3e:	781a      	ldrb	r2, [r3, #0]
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	3301      	adds	r3, #1
 801bf48:	4a09      	ldr	r2, [pc, #36]	; (801bf70 <getSNfromDHCP+0x3c>)
 801bf4a:	7852      	ldrb	r2, [r2, #1]
 801bf4c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	3302      	adds	r3, #2
 801bf52:	4a07      	ldr	r2, [pc, #28]	; (801bf70 <getSNfromDHCP+0x3c>)
 801bf54:	7892      	ldrb	r2, [r2, #2]
 801bf56:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	3303      	adds	r3, #3
 801bf5c:	4a04      	ldr	r2, [pc, #16]	; (801bf70 <getSNfromDHCP+0x3c>)
 801bf5e:	78d2      	ldrb	r2, [r2, #3]
 801bf60:	701a      	strb	r2, [r3, #0]
}
 801bf62:	bf00      	nop
 801bf64:	370c      	adds	r7, #12
 801bf66:	46bd      	mov	sp, r7
 801bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf6c:	4770      	bx	lr
 801bf6e:	bf00      	nop
 801bf70:	2000099c 	.word	0x2000099c

0801bf74 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801bf74:	b480      	push	{r7}
 801bf76:	b083      	sub	sp, #12
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801bf7c:	4b0c      	ldr	r3, [pc, #48]	; (801bfb0 <getDNSfromDHCP+0x3c>)
 801bf7e:	781a      	ldrb	r2, [r3, #0]
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	3301      	adds	r3, #1
 801bf88:	4a09      	ldr	r2, [pc, #36]	; (801bfb0 <getDNSfromDHCP+0x3c>)
 801bf8a:	7852      	ldrb	r2, [r2, #1]
 801bf8c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	3302      	adds	r3, #2
 801bf92:	4a07      	ldr	r2, [pc, #28]	; (801bfb0 <getDNSfromDHCP+0x3c>)
 801bf94:	7892      	ldrb	r2, [r2, #2]
 801bf96:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	3303      	adds	r3, #3
 801bf9c:	4a04      	ldr	r2, [pc, #16]	; (801bfb0 <getDNSfromDHCP+0x3c>)
 801bf9e:	78d2      	ldrb	r2, [r2, #3]
 801bfa0:	701a      	strb	r2, [r3, #0]
}
 801bfa2:	bf00      	nop
 801bfa4:	370c      	adds	r7, #12
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfac:	4770      	bx	lr
 801bfae:	bf00      	nop
 801bfb0:	200009a0 	.word	0x200009a0

0801bfb4 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801bfb4:	b480      	push	{r7}
 801bfb6:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801bfb8:	4b03      	ldr	r3, [pc, #12]	; (801bfc8 <getDHCPLeasetime+0x14>)
 801bfba:	681b      	ldr	r3, [r3, #0]
}
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	46bd      	mov	sp, r7
 801bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfc4:	4770      	bx	lr
 801bfc6:	bf00      	nop
 801bfc8:	200000f0 	.word	0x200000f0

0801bfcc <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801bfcc:	b480      	push	{r7}
 801bfce:	b083      	sub	sp, #12
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801bfd6:	79fb      	ldrb	r3, [r7, #7]
 801bfd8:	f003 030f 	and.w	r3, r3, #15
 801bfdc:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801bfde:	79fb      	ldrb	r3, [r7, #7]
 801bfe0:	2b09      	cmp	r3, #9
 801bfe2:	d803      	bhi.n	801bfec <NibbleToHex+0x20>
    return nibble + '0';
 801bfe4:	79fb      	ldrb	r3, [r7, #7]
 801bfe6:	3330      	adds	r3, #48	; 0x30
 801bfe8:	b2db      	uxtb	r3, r3
 801bfea:	e002      	b.n	801bff2 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801bfec:	79fb      	ldrb	r3, [r7, #7]
 801bfee:	3337      	adds	r3, #55	; 0x37
 801bff0:	b2db      	uxtb	r3, r3
}
 801bff2:	4618      	mov	r0, r3
 801bff4:	370c      	adds	r7, #12
 801bff6:	46bd      	mov	sp, r7
 801bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bffc:	4770      	bx	lr

0801bffe <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801bffe:	b480      	push	{r7}
 801c000:	b085      	sub	sp, #20
 801c002:	af00      	add	r7, sp, #0
 801c004:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	1c5a      	adds	r2, r3, #1
 801c00a:	607a      	str	r2, [r7, #4]
 801c00c:	781b      	ldrb	r3, [r3, #0]
 801c00e:	b29b      	uxth	r3, r3
 801c010:	021b      	lsls	r3, r3, #8
 801c012:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	781b      	ldrb	r3, [r3, #0]
 801c018:	b29a      	uxth	r2, r3
 801c01a:	89fb      	ldrh	r3, [r7, #14]
 801c01c:	4413      	add	r3, r2
 801c01e:	81fb      	strh	r3, [r7, #14]
	return i;
 801c020:	89fb      	ldrh	r3, [r7, #14]
}
 801c022:	4618      	mov	r0, r3
 801c024:	3714      	adds	r7, #20
 801c026:	46bd      	mov	sp, r7
 801c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c02c:	4770      	bx	lr

0801c02e <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801c02e:	b480      	push	{r7}
 801c030:	b083      	sub	sp, #12
 801c032:	af00      	add	r7, sp, #0
 801c034:	6078      	str	r0, [r7, #4]
 801c036:	460b      	mov	r3, r1
 801c038:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801c03a:	887b      	ldrh	r3, [r7, #2]
 801c03c:	0a1b      	lsrs	r3, r3, #8
 801c03e:	b299      	uxth	r1, r3
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	1c5a      	adds	r2, r3, #1
 801c044:	607a      	str	r2, [r7, #4]
 801c046:	b2ca      	uxtb	r2, r1
 801c048:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	1c5a      	adds	r2, r3, #1
 801c04e:	607a      	str	r2, [r7, #4]
 801c050:	887a      	ldrh	r2, [r7, #2]
 801c052:	b2d2      	uxtb	r2, r2
 801c054:	701a      	strb	r2, [r3, #0]
	return s;
 801c056:	687b      	ldr	r3, [r7, #4]
}
 801c058:	4618      	mov	r0, r3
 801c05a:	370c      	adds	r7, #12
 801c05c:	46bd      	mov	sp, r7
 801c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c062:	4770      	bx	lr

0801c064 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801c064:	b480      	push	{r7}
 801c066:	b08b      	sub	sp, #44	; 0x2c
 801c068:	af00      	add	r7, sp, #0
 801c06a:	60f8      	str	r0, [r7, #12]
 801c06c:	60b9      	str	r1, [r7, #8]
 801c06e:	607a      	str	r2, [r7, #4]
 801c070:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801c072:	2300      	movs	r3, #0
 801c074:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801c076:	2300      	movs	r3, #0
 801c078:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801c07a:	2300      	movs	r3, #0
 801c07c:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801c07e:	68bb      	ldr	r3, [r7, #8]
 801c080:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801c082:	6a3b      	ldr	r3, [r7, #32]
 801c084:	1c5a      	adds	r2, r3, #1
 801c086:	623a      	str	r2, [r7, #32]
 801c088:	781b      	ldrb	r3, [r3, #0]
 801c08a:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 801c08c:	69bb      	ldr	r3, [r7, #24]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d102      	bne.n	801c098 <parse_name+0x34>
 801c092:	69fb      	ldr	r3, [r7, #28]
 801c094:	3301      	adds	r3, #1
 801c096:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801c098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c09a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c09e:	2bc0      	cmp	r3, #192	; 0xc0
 801c0a0:	d117      	bne.n	801c0d2 <parse_name+0x6e>
		{
			if (!indirect)
 801c0a2:	69bb      	ldr	r3, [r7, #24]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d102      	bne.n	801c0ae <parse_name+0x4a>
				clen++;
 801c0a8:	69fb      	ldr	r3, [r7, #28]
 801c0aa:	3301      	adds	r3, #1
 801c0ac:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801c0ae:	2301      	movs	r3, #1
 801c0b0:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801c0b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c0b4:	021b      	lsls	r3, r3, #8
 801c0b6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801c0ba:	6a3a      	ldr	r2, [r7, #32]
 801c0bc:	7812      	ldrb	r2, [r2, #0]
 801c0be:	4413      	add	r3, r2
 801c0c0:	461a      	mov	r2, r3
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	4413      	add	r3, r2
 801c0c6:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801c0c8:	6a3b      	ldr	r3, [r7, #32]
 801c0ca:	1c5a      	adds	r2, r3, #1
 801c0cc:	623a      	str	r2, [r7, #32]
 801c0ce:	781b      	ldrb	r3, [r3, #0]
 801c0d0:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801c0d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d02b      	beq.n	801c130 <parse_name+0xcc>
			break;

		len -= slen + 1;
 801c0d8:	887a      	ldrh	r2, [r7, #2]
 801c0da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c0dc:	1ad3      	subs	r3, r2, r3
 801c0de:	b29b      	uxth	r3, r3
 801c0e0:	3b01      	subs	r3, #1
 801c0e2:	b29b      	uxth	r3, r3
 801c0e4:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801c0e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	da02      	bge.n	801c0f4 <parse_name+0x90>
 801c0ee:	f04f 33ff 	mov.w	r3, #4294967295
 801c0f2:	e038      	b.n	801c166 <parse_name+0x102>

		if (!indirect) clen += slen;
 801c0f4:	69bb      	ldr	r3, [r7, #24]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d10c      	bne.n	801c114 <parse_name+0xb0>
 801c0fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c0fc:	69fa      	ldr	r2, [r7, #28]
 801c0fe:	4413      	add	r3, r2
 801c100:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801c102:	e007      	b.n	801c114 <parse_name+0xb0>
 801c104:	6a3a      	ldr	r2, [r7, #32]
 801c106:	1c53      	adds	r3, r2, #1
 801c108:	623b      	str	r3, [r7, #32]
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	1c59      	adds	r1, r3, #1
 801c10e:	6079      	str	r1, [r7, #4]
 801c110:	7812      	ldrb	r2, [r2, #0]
 801c112:	701a      	strb	r2, [r3, #0]
 801c114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c116:	1e5a      	subs	r2, r3, #1
 801c118:	84fa      	strh	r2, [r7, #38]	; 0x26
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d1f2      	bne.n	801c104 <parse_name+0xa0>
		*buf++ = '.';
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	1c5a      	adds	r2, r3, #1
 801c122:	607a      	str	r2, [r7, #4]
 801c124:	222e      	movs	r2, #46	; 0x2e
 801c126:	701a      	strb	r2, [r3, #0]
		nseg++;
 801c128:	697b      	ldr	r3, [r7, #20]
 801c12a:	3301      	adds	r3, #1
 801c12c:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801c12e:	e7a8      	b.n	801c082 <parse_name+0x1e>
			break;
 801c130:	bf00      	nop
	}

	if (nseg == 0)
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d10a      	bne.n	801c14e <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	1c5a      	adds	r2, r3, #1
 801c13c:	607a      	str	r2, [r7, #4]
 801c13e:	222e      	movs	r2, #46	; 0x2e
 801c140:	701a      	strb	r2, [r3, #0]
		len--;
 801c142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c146:	b29b      	uxth	r3, r3
 801c148:	3b01      	subs	r3, #1
 801c14a:	b29b      	uxth	r3, r3
 801c14c:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	1c5a      	adds	r2, r3, #1
 801c152:	607a      	str	r2, [r7, #4]
 801c154:	2200      	movs	r2, #0
 801c156:	701a      	strb	r2, [r3, #0]
	len--;
 801c158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c15c:	b29b      	uxth	r3, r3
 801c15e:	3b01      	subs	r3, #1
 801c160:	b29b      	uxth	r3, r3
 801c162:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801c164:	69fb      	ldr	r3, [r7, #28]
}
 801c166:	4618      	mov	r0, r3
 801c168:	372c      	adds	r7, #44	; 0x2c
 801c16a:	46bd      	mov	sp, r7
 801c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c170:	4770      	bx	lr

0801c172 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801c172:	b580      	push	{r7, lr}
 801c174:	b0b4      	sub	sp, #208	; 0xd0
 801c176:	af00      	add	r7, sp, #0
 801c178:	6078      	str	r0, [r7, #4]
 801c17a:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c17c:	f107 020c 	add.w	r2, r7, #12
 801c180:	23c0      	movs	r3, #192	; 0xc0
 801c182:	6839      	ldr	r1, [r7, #0]
 801c184:	6878      	ldr	r0, [r7, #4]
 801c186:	f7ff ff6d 	bl	801c064 <parse_name>
 801c18a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 801c18e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c192:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c196:	d101      	bne.n	801c19c <dns_question+0x2a>
 801c198:	2300      	movs	r3, #0
 801c19a:	e00b      	b.n	801c1b4 <dns_question+0x42>

	cp += len;
 801c19c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c1a0:	683a      	ldr	r2, [r7, #0]
 801c1a2:	4413      	add	r3, r2
 801c1a4:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801c1a6:	683b      	ldr	r3, [r7, #0]
 801c1a8:	3302      	adds	r3, #2
 801c1aa:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801c1ac:	683b      	ldr	r3, [r7, #0]
 801c1ae:	3302      	adds	r3, #2
 801c1b0:	603b      	str	r3, [r7, #0]

	return cp;
 801c1b2:	683b      	ldr	r3, [r7, #0]
}
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	37d0      	adds	r7, #208	; 0xd0
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd80      	pop	{r7, pc}

0801c1bc <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801c1bc:	b580      	push	{r7, lr}
 801c1be:	b0b6      	sub	sp, #216	; 0xd8
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	60f8      	str	r0, [r7, #12]
 801c1c4:	60b9      	str	r1, [r7, #8]
 801c1c6:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c1c8:	f107 0210 	add.w	r2, r7, #16
 801c1cc:	23c0      	movs	r3, #192	; 0xc0
 801c1ce:	68b9      	ldr	r1, [r7, #8]
 801c1d0:	68f8      	ldr	r0, [r7, #12]
 801c1d2:	f7ff ff47 	bl	801c064 <parse_name>
 801c1d6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 801c1da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1e2:	d101      	bne.n	801c1e8 <dns_answer+0x2c>
 801c1e4:	2300      	movs	r3, #0
 801c1e6:	e0f9      	b.n	801c3dc <dns_answer+0x220>

	cp += len;
 801c1e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c1ec:	68ba      	ldr	r2, [r7, #8]
 801c1ee:	4413      	add	r3, r2
 801c1f0:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801c1f2:	68b8      	ldr	r0, [r7, #8]
 801c1f4:	f7ff ff03 	bl	801bffe <get16>
 801c1f8:	4603      	mov	r3, r0
 801c1fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 801c1fe:	68bb      	ldr	r3, [r7, #8]
 801c200:	3302      	adds	r3, #2
 801c202:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801c204:	68bb      	ldr	r3, [r7, #8]
 801c206:	3302      	adds	r3, #2
 801c208:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801c20a:	68bb      	ldr	r3, [r7, #8]
 801c20c:	3304      	adds	r3, #4
 801c20e:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801c210:	68bb      	ldr	r3, [r7, #8]
 801c212:	3302      	adds	r3, #2
 801c214:	60bb      	str	r3, [r7, #8]


	switch (type)
 801c216:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c21a:	2b10      	cmp	r3, #16
 801c21c:	f000 80da 	beq.w	801c3d4 <dns_answer+0x218>
 801c220:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c224:	2b10      	cmp	r3, #16
 801c226:	f300 80d7 	bgt.w	801c3d8 <dns_answer+0x21c>
 801c22a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c22e:	2b0f      	cmp	r3, #15
 801c230:	d07d      	beq.n	801c32e <dns_answer+0x172>
 801c232:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c236:	2b0f      	cmp	r3, #15
 801c238:	f300 80ce 	bgt.w	801c3d8 <dns_answer+0x21c>
 801c23c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c240:	2b0c      	cmp	r3, #12
 801c242:	dc26      	bgt.n	801c292 <dns_answer+0xd6>
 801c244:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c248:	2b00      	cmp	r3, #0
 801c24a:	f340 80c5 	ble.w	801c3d8 <dns_answer+0x21c>
 801c24e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c252:	2201      	movs	r2, #1
 801c254:	fa02 f303 	lsl.w	r3, r2, r3
 801c258:	f241 32a4 	movw	r2, #5028	; 0x13a4
 801c25c:	401a      	ands	r2, r3
 801c25e:	2a00      	cmp	r2, #0
 801c260:	bf14      	ite	ne
 801c262:	2201      	movne	r2, #1
 801c264:	2200      	moveq	r2, #0
 801c266:	b2d2      	uxtb	r2, r2
 801c268:	2a00      	cmp	r2, #0
 801c26a:	d133      	bne.n	801c2d4 <dns_answer+0x118>
 801c26c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 801c270:	2a00      	cmp	r2, #0
 801c272:	bf14      	ite	ne
 801c274:	2201      	movne	r2, #1
 801c276:	2200      	moveq	r2, #0
 801c278:	b2d2      	uxtb	r2, r2
 801c27a:	2a00      	cmp	r2, #0
 801c27c:	d170      	bne.n	801c360 <dns_answer+0x1a4>
 801c27e:	f003 0302 	and.w	r3, r3, #2
 801c282:	2b00      	cmp	r3, #0
 801c284:	bf14      	ite	ne
 801c286:	2301      	movne	r3, #1
 801c288:	2300      	moveq	r3, #0
 801c28a:	b2db      	uxtb	r3, r3
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d105      	bne.n	801c29c <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801c290:	e0a2      	b.n	801c3d8 <dns_answer+0x21c>
	switch (type)
 801c292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c296:	2b0d      	cmp	r3, #13
 801c298:	d032      	beq.n	801c300 <dns_answer+0x144>
		break;
 801c29a:	e09d      	b.n	801c3d8 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801c29c:	68bb      	ldr	r3, [r7, #8]
 801c29e:	1c5a      	adds	r2, r3, #1
 801c2a0:	60ba      	str	r2, [r7, #8]
 801c2a2:	781a      	ldrb	r2, [r3, #0]
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801c2a8:	68bb      	ldr	r3, [r7, #8]
 801c2aa:	1c5a      	adds	r2, r3, #1
 801c2ac:	60ba      	str	r2, [r7, #8]
 801c2ae:	687a      	ldr	r2, [r7, #4]
 801c2b0:	3201      	adds	r2, #1
 801c2b2:	781b      	ldrb	r3, [r3, #0]
 801c2b4:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801c2b6:	68bb      	ldr	r3, [r7, #8]
 801c2b8:	1c5a      	adds	r2, r3, #1
 801c2ba:	60ba      	str	r2, [r7, #8]
 801c2bc:	687a      	ldr	r2, [r7, #4]
 801c2be:	3202      	adds	r2, #2
 801c2c0:	781b      	ldrb	r3, [r3, #0]
 801c2c2:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801c2c4:	68bb      	ldr	r3, [r7, #8]
 801c2c6:	1c5a      	adds	r2, r3, #1
 801c2c8:	60ba      	str	r2, [r7, #8]
 801c2ca:	687a      	ldr	r2, [r7, #4]
 801c2cc:	3203      	adds	r2, #3
 801c2ce:	781b      	ldrb	r3, [r3, #0]
 801c2d0:	7013      	strb	r3, [r2, #0]
		break;
 801c2d2:	e082      	b.n	801c3da <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c2d4:	f107 0210 	add.w	r2, r7, #16
 801c2d8:	23c0      	movs	r3, #192	; 0xc0
 801c2da:	68b9      	ldr	r1, [r7, #8]
 801c2dc:	68f8      	ldr	r0, [r7, #12]
 801c2de:	f7ff fec1 	bl	801c064 <parse_name>
 801c2e2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c2e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2ee:	d101      	bne.n	801c2f4 <dns_answer+0x138>
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	e073      	b.n	801c3dc <dns_answer+0x220>
		cp += len;
 801c2f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2f8:	68ba      	ldr	r2, [r7, #8]
 801c2fa:	4413      	add	r3, r2
 801c2fc:	60bb      	str	r3, [r7, #8]
		break;
 801c2fe:	e06c      	b.n	801c3da <dns_answer+0x21e>
		len = *cp++;
 801c300:	68bb      	ldr	r3, [r7, #8]
 801c302:	1c5a      	adds	r2, r3, #1
 801c304:	60ba      	str	r2, [r7, #8]
 801c306:	781b      	ldrb	r3, [r3, #0]
 801c308:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c30c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c310:	68ba      	ldr	r2, [r7, #8]
 801c312:	4413      	add	r3, r2
 801c314:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801c316:	68bb      	ldr	r3, [r7, #8]
 801c318:	1c5a      	adds	r2, r3, #1
 801c31a:	60ba      	str	r2, [r7, #8]
 801c31c:	781b      	ldrb	r3, [r3, #0]
 801c31e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c326:	68ba      	ldr	r2, [r7, #8]
 801c328:	4413      	add	r3, r2
 801c32a:	60bb      	str	r3, [r7, #8]
		break;
 801c32c:	e055      	b.n	801c3da <dns_answer+0x21e>
		cp += 2;
 801c32e:	68bb      	ldr	r3, [r7, #8]
 801c330:	3302      	adds	r3, #2
 801c332:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c334:	f107 0210 	add.w	r2, r7, #16
 801c338:	23c0      	movs	r3, #192	; 0xc0
 801c33a:	68b9      	ldr	r1, [r7, #8]
 801c33c:	68f8      	ldr	r0, [r7, #12]
 801c33e:	f7ff fe91 	bl	801c064 <parse_name>
 801c342:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c34e:	d101      	bne.n	801c354 <dns_answer+0x198>
 801c350:	2300      	movs	r3, #0
 801c352:	e043      	b.n	801c3dc <dns_answer+0x220>
		cp += len;
 801c354:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c358:	68ba      	ldr	r2, [r7, #8]
 801c35a:	4413      	add	r3, r2
 801c35c:	60bb      	str	r3, [r7, #8]
		break;
 801c35e:	e03c      	b.n	801c3da <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c360:	f107 0210 	add.w	r2, r7, #16
 801c364:	23c0      	movs	r3, #192	; 0xc0
 801c366:	68b9      	ldr	r1, [r7, #8]
 801c368:	68f8      	ldr	r0, [r7, #12]
 801c36a:	f7ff fe7b 	bl	801c064 <parse_name>
 801c36e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c37a:	d101      	bne.n	801c380 <dns_answer+0x1c4>
 801c37c:	2300      	movs	r3, #0
 801c37e:	e02d      	b.n	801c3dc <dns_answer+0x220>
		cp += len;
 801c380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c384:	68ba      	ldr	r2, [r7, #8]
 801c386:	4413      	add	r3, r2
 801c388:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c38a:	f107 0210 	add.w	r2, r7, #16
 801c38e:	23c0      	movs	r3, #192	; 0xc0
 801c390:	68b9      	ldr	r1, [r7, #8]
 801c392:	68f8      	ldr	r0, [r7, #12]
 801c394:	f7ff fe66 	bl	801c064 <parse_name>
 801c398:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c39c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3a4:	d101      	bne.n	801c3aa <dns_answer+0x1ee>
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	e018      	b.n	801c3dc <dns_answer+0x220>
		cp += len;
 801c3aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c3ae:	68ba      	ldr	r2, [r7, #8]
 801c3b0:	4413      	add	r3, r2
 801c3b2:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c3b4:	68bb      	ldr	r3, [r7, #8]
 801c3b6:	3304      	adds	r3, #4
 801c3b8:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c3ba:	68bb      	ldr	r3, [r7, #8]
 801c3bc:	3304      	adds	r3, #4
 801c3be:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c3c0:	68bb      	ldr	r3, [r7, #8]
 801c3c2:	3304      	adds	r3, #4
 801c3c4:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c3c6:	68bb      	ldr	r3, [r7, #8]
 801c3c8:	3304      	adds	r3, #4
 801c3ca:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c3cc:	68bb      	ldr	r3, [r7, #8]
 801c3ce:	3304      	adds	r3, #4
 801c3d0:	60bb      	str	r3, [r7, #8]
		break;
 801c3d2:	e002      	b.n	801c3da <dns_answer+0x21e>
		break;
 801c3d4:	bf00      	nop
 801c3d6:	e000      	b.n	801c3da <dns_answer+0x21e>
		break;
 801c3d8:	bf00      	nop
	}

	return cp;
 801c3da:	68bb      	ldr	r3, [r7, #8]
}
 801c3dc:	4618      	mov	r0, r3
 801c3de:	37d8      	adds	r7, #216	; 0xd8
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	bd80      	pop	{r7, pc}

0801c3e4 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c3e4:	b580      	push	{r7, lr}
 801c3e6:	b088      	sub	sp, #32
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	60f8      	str	r0, [r7, #12]
 801c3ec:	60b9      	str	r1, [r7, #8]
 801c3ee:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c3f4:	2212      	movs	r2, #18
 801c3f6:	2100      	movs	r1, #0
 801c3f8:	68f8      	ldr	r0, [r7, #12]
 801c3fa:	f011 f9cf 	bl	802d79c <memset>

	pdhdr->id = get16(&msg[0]);
 801c3fe:	6978      	ldr	r0, [r7, #20]
 801c400:	f7ff fdfd 	bl	801bffe <get16>
 801c404:	4603      	mov	r3, r0
 801c406:	461a      	mov	r2, r3
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c40c:	697b      	ldr	r3, [r7, #20]
 801c40e:	3302      	adds	r3, #2
 801c410:	4618      	mov	r0, r3
 801c412:	f7ff fdf4 	bl	801bffe <get16>
 801c416:	4603      	mov	r3, r0
 801c418:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c41a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	da02      	bge.n	801c428 <parseDNSMSG+0x44>
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	2201      	movs	r2, #1
 801c426:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c428:	8a7b      	ldrh	r3, [r7, #18]
 801c42a:	0adb      	lsrs	r3, r3, #11
 801c42c:	b29b      	uxth	r3, r3
 801c42e:	b2db      	uxtb	r3, r3
 801c430:	f003 030f 	and.w	r3, r3, #15
 801c434:	b2da      	uxtb	r2, r3
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c43a:	8a7b      	ldrh	r3, [r7, #18]
 801c43c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c440:	2b00      	cmp	r3, #0
 801c442:	d002      	beq.n	801c44a <parseDNSMSG+0x66>
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	2201      	movs	r2, #1
 801c448:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c44a:	8a7b      	ldrh	r3, [r7, #18]
 801c44c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c450:	2b00      	cmp	r3, #0
 801c452:	d002      	beq.n	801c45a <parseDNSMSG+0x76>
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	2201      	movs	r2, #1
 801c458:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c45a:	8a7b      	ldrh	r3, [r7, #18]
 801c45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c460:	2b00      	cmp	r3, #0
 801c462:	d002      	beq.n	801c46a <parseDNSMSG+0x86>
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	2201      	movs	r2, #1
 801c468:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c46a:	8a7b      	ldrh	r3, [r7, #18]
 801c46c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c470:	2b00      	cmp	r3, #0
 801c472:	d002      	beq.n	801c47a <parseDNSMSG+0x96>
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	2201      	movs	r2, #1
 801c478:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c47a:	8a7b      	ldrh	r3, [r7, #18]
 801c47c:	b2db      	uxtb	r3, r3
 801c47e:	f003 030f 	and.w	r3, r3, #15
 801c482:	b2da      	uxtb	r2, r3
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c488:	697b      	ldr	r3, [r7, #20]
 801c48a:	3304      	adds	r3, #4
 801c48c:	4618      	mov	r0, r3
 801c48e:	f7ff fdb6 	bl	801bffe <get16>
 801c492:	4603      	mov	r3, r0
 801c494:	461a      	mov	r2, r3
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c49a:	697b      	ldr	r3, [r7, #20]
 801c49c:	3306      	adds	r3, #6
 801c49e:	4618      	mov	r0, r3
 801c4a0:	f7ff fdad 	bl	801bffe <get16>
 801c4a4:	4603      	mov	r3, r0
 801c4a6:	461a      	mov	r2, r3
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c4ac:	697b      	ldr	r3, [r7, #20]
 801c4ae:	3308      	adds	r3, #8
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f7ff fda4 	bl	801bffe <get16>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	461a      	mov	r2, r3
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c4be:	697b      	ldr	r3, [r7, #20]
 801c4c0:	330a      	adds	r3, #10
 801c4c2:	4618      	mov	r0, r3
 801c4c4:	f7ff fd9b 	bl	801bffe <get16>
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	461a      	mov	r2, r3
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c4d0:	697b      	ldr	r3, [r7, #20]
 801c4d2:	330c      	adds	r3, #12
 801c4d4:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c4d6:	2300      	movs	r3, #0
 801c4d8:	83fb      	strh	r3, [r7, #30]
 801c4da:	e00d      	b.n	801c4f8 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c4dc:	69b9      	ldr	r1, [r7, #24]
 801c4de:	6978      	ldr	r0, [r7, #20]
 801c4e0:	f7ff fe47 	bl	801c172 <dns_question>
 801c4e4:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c4e6:	69bb      	ldr	r3, [r7, #24]
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d102      	bne.n	801c4f2 <parseDNSMSG+0x10e>
 801c4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c4f0:	e03b      	b.n	801c56a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c4f2:	8bfb      	ldrh	r3, [r7, #30]
 801c4f4:	3301      	adds	r3, #1
 801c4f6:	83fb      	strh	r3, [r7, #30]
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	895b      	ldrh	r3, [r3, #10]
 801c4fc:	8bfa      	ldrh	r2, [r7, #30]
 801c4fe:	429a      	cmp	r2, r3
 801c500:	d3ec      	bcc.n	801c4dc <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c502:	2300      	movs	r3, #0
 801c504:	83fb      	strh	r3, [r7, #30]
 801c506:	e00e      	b.n	801c526 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c508:	687a      	ldr	r2, [r7, #4]
 801c50a:	69b9      	ldr	r1, [r7, #24]
 801c50c:	6978      	ldr	r0, [r7, #20]
 801c50e:	f7ff fe55 	bl	801c1bc <dns_answer>
 801c512:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c514:	69bb      	ldr	r3, [r7, #24]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d102      	bne.n	801c520 <parseDNSMSG+0x13c>
 801c51a:	f04f 33ff 	mov.w	r3, #4294967295
 801c51e:	e024      	b.n	801c56a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c520:	8bfb      	ldrh	r3, [r7, #30]
 801c522:	3301      	adds	r3, #1
 801c524:	83fb      	strh	r3, [r7, #30]
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	899b      	ldrh	r3, [r3, #12]
 801c52a:	8bfa      	ldrh	r2, [r7, #30]
 801c52c:	429a      	cmp	r2, r3
 801c52e:	d3eb      	bcc.n	801c508 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c530:	2300      	movs	r3, #0
 801c532:	83fb      	strh	r3, [r7, #30]
 801c534:	e002      	b.n	801c53c <parseDNSMSG+0x158>
 801c536:	8bfb      	ldrh	r3, [r7, #30]
 801c538:	3301      	adds	r3, #1
 801c53a:	83fb      	strh	r3, [r7, #30]
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	89db      	ldrh	r3, [r3, #14]
 801c540:	8bfa      	ldrh	r2, [r7, #30]
 801c542:	429a      	cmp	r2, r3
 801c544:	d3f7      	bcc.n	801c536 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c546:	2300      	movs	r3, #0
 801c548:	83fb      	strh	r3, [r7, #30]
 801c54a:	e002      	b.n	801c552 <parseDNSMSG+0x16e>
 801c54c:	8bfb      	ldrh	r3, [r7, #30]
 801c54e:	3301      	adds	r3, #1
 801c550:	83fb      	strh	r3, [r7, #30]
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	8a1b      	ldrh	r3, [r3, #16]
 801c556:	8bfa      	ldrh	r2, [r7, #30]
 801c558:	429a      	cmp	r2, r3
 801c55a:	d3f7      	bcc.n	801c54c <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	7a1b      	ldrb	r3, [r3, #8]
 801c560:	2b00      	cmp	r3, #0
 801c562:	d101      	bne.n	801c568 <parseDNSMSG+0x184>
 801c564:	2301      	movs	r3, #1
 801c566:	e000      	b.n	801c56a <parseDNSMSG+0x186>
	else return 0;
 801c568:	2300      	movs	r3, #0
}
 801c56a:	4618      	mov	r0, r3
 801c56c:	3720      	adds	r7, #32
 801c56e:	46bd      	mov	sp, r7
 801c570:	bd80      	pop	{r7, pc}
	...

0801c574 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c574:	b580      	push	{r7, lr}
 801c576:	b0b8      	sub	sp, #224	; 0xe0
 801c578:	af00      	add	r7, sp, #0
 801c57a:	60b9      	str	r1, [r7, #8]
 801c57c:	607a      	str	r2, [r7, #4]
 801c57e:	461a      	mov	r2, r3
 801c580:	4603      	mov	r3, r0
 801c582:	81fb      	strh	r3, [r7, #14]
 801c584:	4613      	mov	r3, r2
 801c586:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 801c58e:	4b57      	ldr	r3, [pc, #348]	; (801c6ec <dns_makequery+0x178>)
 801c590:	881b      	ldrh	r3, [r3, #0]
 801c592:	3301      	adds	r3, #1
 801c594:	b29a      	uxth	r2, r3
 801c596:	4b55      	ldr	r3, [pc, #340]	; (801c6ec <dns_makequery+0x178>)
 801c598:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c59a:	4b54      	ldr	r3, [pc, #336]	; (801c6ec <dns_makequery+0x178>)
 801c59c:	881b      	ldrh	r3, [r3, #0]
 801c59e:	4619      	mov	r1, r3
 801c5a0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5a4:	f7ff fd43 	bl	801c02e <put16>
 801c5a8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c5ac:	89fb      	ldrh	r3, [r7, #14]
 801c5ae:	02db      	lsls	r3, r3, #11
 801c5b0:	b21b      	sxth	r3, r3
 801c5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c5b6:	b21b      	sxth	r3, r3
 801c5b8:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 801c5bc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 801c5c0:	4619      	mov	r1, r3
 801c5c2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5c6:	f7ff fd32 	bl	801c02e <put16>
 801c5ca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 801c5ce:	2101      	movs	r1, #1
 801c5d0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5d4:	f7ff fd2b 	bl	801c02e <put16>
 801c5d8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c5dc:	2100      	movs	r1, #0
 801c5de:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5e2:	f7ff fd24 	bl	801c02e <put16>
 801c5e6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c5ea:	2100      	movs	r1, #0
 801c5ec:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5f0:	f7ff fd1d 	bl	801c02e <put16>
 801c5f4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c5f8:	2100      	movs	r1, #0
 801c5fa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5fe:	f7ff fd16 	bl	801c02e <put16>
 801c602:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 801c606:	f107 0310 	add.w	r3, r7, #16
 801c60a:	68b9      	ldr	r1, [r7, #8]
 801c60c:	4618      	mov	r0, r3
 801c60e:	f011 fa92 	bl	802db36 <strcpy>
	dname = sname;
 801c612:	f107 0310 	add.w	r3, r7, #16
 801c616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 801c61a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c61e:	f7f3 fe3f 	bl	80102a0 <strlen>
 801c622:	4603      	mov	r3, r0
 801c624:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c628:	212e      	movs	r1, #46	; 0x2e
 801c62a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c62e:	f011 f8cc 	bl	802d7ca <strchr>
 801c632:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c636:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d006      	beq.n	801c64c <dns_makequery+0xd8>
 801c63e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c646:	1ad3      	subs	r3, r2, r3
 801c648:	81bb      	strh	r3, [r7, #12]
 801c64a:	e002      	b.n	801c652 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c64c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801c650:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c656:	1c5a      	adds	r2, r3, #1
 801c658:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c65c:	89ba      	ldrh	r2, [r7, #12]
 801c65e:	b2d2      	uxtb	r2, r2
 801c660:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c662:	89bb      	ldrh	r3, [r7, #12]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d029      	beq.n	801c6bc <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c668:	89bb      	ldrh	r3, [r7, #12]
 801c66a:	461a      	mov	r2, r3
 801c66c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c670:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c674:	f011 f8ec 	bl	802d850 <strncpy>
		cp += len;
 801c678:	89bb      	ldrh	r3, [r7, #12]
 801c67a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c67e:	4413      	add	r3, r2
 801c680:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801c684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d107      	bne.n	801c69c <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c68c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c690:	1c5a      	adds	r2, r3, #1
 801c692:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c696:	2200      	movs	r2, #0
 801c698:	701a      	strb	r2, [r3, #0]
			break;
 801c69a:	e010      	b.n	801c6be <dns_makequery+0x14a>
		}
		dname += len+1;
 801c69c:	89bb      	ldrh	r3, [r7, #12]
 801c69e:	3301      	adds	r3, #1
 801c6a0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c6a4:	4413      	add	r3, r2
 801c6a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 801c6aa:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801c6ae:	89bb      	ldrh	r3, [r7, #12]
 801c6b0:	1ad3      	subs	r3, r2, r3
 801c6b2:	b29b      	uxth	r3, r3
 801c6b4:	3b01      	subs	r3, #1
 801c6b6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 801c6ba:	e7b5      	b.n	801c628 <dns_makequery+0xb4>
		if (len == 0) break;
 801c6bc:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c6be:	2101      	movs	r1, #1
 801c6c0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c6c4:	f7ff fcb3 	bl	801c02e <put16>
 801c6c8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c6cc:	2101      	movs	r1, #1
 801c6ce:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c6d2:	f7ff fcac 	bl	801c02e <put16>
 801c6d6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c6da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	1ad3      	subs	r3, r2, r3
 801c6e2:	b21b      	sxth	r3, r3
}
 801c6e4:	4618      	mov	r0, r3
 801c6e6:	37e0      	adds	r7, #224	; 0xe0
 801c6e8:	46bd      	mov	sp, r7
 801c6ea:	bd80      	pop	{r7, pc}
 801c6ec:	200009c2 	.word	0x200009c2

0801c6f0 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c6f0:	b480      	push	{r7}
 801c6f2:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c6f4:	4b0f      	ldr	r3, [pc, #60]	; (801c734 <check_DNS_timeout+0x44>)
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	2b02      	cmp	r3, #2
 801c6fa:	d914      	bls.n	801c726 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c6fc:	4b0d      	ldr	r3, [pc, #52]	; (801c734 <check_DNS_timeout+0x44>)
 801c6fe:	2200      	movs	r2, #0
 801c700:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c702:	4b0d      	ldr	r3, [pc, #52]	; (801c738 <check_DNS_timeout+0x48>)
 801c704:	781b      	ldrb	r3, [r3, #0]
 801c706:	2b01      	cmp	r3, #1
 801c708:	d905      	bls.n	801c716 <check_DNS_timeout+0x26>
			retry_count = 0;
 801c70a:	4b0b      	ldr	r3, [pc, #44]	; (801c738 <check_DNS_timeout+0x48>)
 801c70c:	2200      	movs	r2, #0
 801c70e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c710:	f04f 33ff 	mov.w	r3, #4294967295
 801c714:	e008      	b.n	801c728 <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c716:	4b08      	ldr	r3, [pc, #32]	; (801c738 <check_DNS_timeout+0x48>)
 801c718:	781b      	ldrb	r3, [r3, #0]
 801c71a:	3301      	adds	r3, #1
 801c71c:	b2da      	uxtb	r2, r3
 801c71e:	4b06      	ldr	r3, [pc, #24]	; (801c738 <check_DNS_timeout+0x48>)
 801c720:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801c722:	2300      	movs	r3, #0
 801c724:	e000      	b.n	801c728 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801c726:	2301      	movs	r3, #1
}
 801c728:	4618      	mov	r0, r3
 801c72a:	46bd      	mov	sp, r7
 801c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c730:	4770      	bx	lr
 801c732:	bf00      	nop
 801c734:	200009c4 	.word	0x200009c4
 801c738:	200009c8 	.word	0x200009c8

0801c73c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801c73c:	b480      	push	{r7}
 801c73e:	b083      	sub	sp, #12
 801c740:	af00      	add	r7, sp, #0
 801c742:	4603      	mov	r3, r0
 801c744:	6039      	str	r1, [r7, #0]
 801c746:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801c748:	4a07      	ldr	r2, [pc, #28]	; (801c768 <DNS_init+0x2c>)
 801c74a:	79fb      	ldrb	r3, [r7, #7]
 801c74c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801c74e:	4a07      	ldr	r2, [pc, #28]	; (801c76c <DNS_init+0x30>)
 801c750:	683b      	ldr	r3, [r7, #0]
 801c752:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801c754:	4b06      	ldr	r3, [pc, #24]	; (801c770 <DNS_init+0x34>)
 801c756:	f241 1222 	movw	r2, #4386	; 0x1122
 801c75a:	801a      	strh	r2, [r3, #0]
}
 801c75c:	bf00      	nop
 801c75e:	370c      	adds	r7, #12
 801c760:	46bd      	mov	sp, r7
 801c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c766:	4770      	bx	lr
 801c768:	200009c0 	.word	0x200009c0
 801c76c:	200009bc 	.word	0x200009bc
 801c770:	200009c2 	.word	0x200009c2

0801c774 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801c774:	b590      	push	{r4, r7, lr}
 801c776:	b08f      	sub	sp, #60	; 0x3c
 801c778:	af02      	add	r7, sp, #8
 801c77a:	60f8      	str	r0, [r7, #12]
 801c77c:	60b9      	str	r1, [r7, #8]
 801c77e:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801c780:	4b3b      	ldr	r3, [pc, #236]	; (801c870 <DNS_run+0xfc>)
 801c782:	2200      	movs	r2, #0
 801c784:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801c786:	4b3b      	ldr	r3, [pc, #236]	; (801c874 <DNS_run+0x100>)
 801c788:	2200      	movs	r2, #0
 801c78a:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801c78c:	4b3a      	ldr	r3, [pc, #232]	; (801c878 <DNS_run+0x104>)
 801c78e:	7818      	ldrb	r0, [r3, #0]
 801c790:	2300      	movs	r3, #0
 801c792:	2200      	movs	r2, #0
 801c794:	2102      	movs	r1, #2
 801c796:	f7fc fa4f 	bl	8018c38 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801c79a:	4b38      	ldr	r3, [pc, #224]	; (801c87c <DNS_run+0x108>)
 801c79c:	681a      	ldr	r2, [r3, #0]
 801c79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7a2:	68b9      	ldr	r1, [r7, #8]
 801c7a4:	2000      	movs	r0, #0
 801c7a6:	f7ff fee5 	bl	801c574 <dns_makequery>
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c7ae:	4b32      	ldr	r3, [pc, #200]	; (801c878 <DNS_run+0x104>)
 801c7b0:	7818      	ldrb	r0, [r3, #0]
 801c7b2:	4b32      	ldr	r3, [pc, #200]	; (801c87c <DNS_run+0x108>)
 801c7b4:	6819      	ldr	r1, [r3, #0]
 801c7b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c7b8:	2335      	movs	r3, #53	; 0x35
 801c7ba:	9300      	str	r3, [sp, #0]
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	f7fc ff19 	bl	80195f4 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c7c2:	4b2d      	ldr	r3, [pc, #180]	; (801c878 <DNS_run+0x104>)
 801c7c4:	781b      	ldrb	r3, [r3, #0]
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	f7fc f8eb 	bl	80189a2 <getSn_RX_RSR>
 801c7cc:	4603      	mov	r3, r0
 801c7ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c7d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d029      	beq.n	801c82a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801c7d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c7d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c7dc:	d902      	bls.n	801c7e4 <DNS_run+0x70>
 801c7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801c7e4:	4b24      	ldr	r3, [pc, #144]	; (801c878 <DNS_run+0x104>)
 801c7e6:	7818      	ldrb	r0, [r3, #0]
 801c7e8:	4b24      	ldr	r3, [pc, #144]	; (801c87c <DNS_run+0x108>)
 801c7ea:	6819      	ldr	r1, [r3, #0]
 801c7ec:	f107 0414 	add.w	r4, r7, #20
 801c7f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c7f2:	f107 0312 	add.w	r3, r7, #18
 801c7f6:	9300      	str	r3, [sp, #0]
 801c7f8:	4623      	mov	r3, r4
 801c7fa:	f7fd f831 	bl	8019860 <recvfrom>
 801c7fe:	4603      	mov	r3, r0
 801c800:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801c802:	4b1e      	ldr	r3, [pc, #120]	; (801c87c <DNS_run+0x108>)
 801c804:	6819      	ldr	r1, [r3, #0]
 801c806:	f107 0318 	add.w	r3, r7, #24
 801c80a:	687a      	ldr	r2, [r7, #4]
 801c80c:	4618      	mov	r0, r3
 801c80e:	f7ff fde9 	bl	801c3e4 <parseDNSMSG>
 801c812:	4603      	mov	r3, r0
 801c814:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 801c818:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801c81a:	4b17      	ldr	r3, [pc, #92]	; (801c878 <DNS_run+0x104>)
 801c81c:	781b      	ldrb	r3, [r3, #0]
 801c81e:	4618      	mov	r0, r3
 801c820:	f7fc fb1e 	bl	8018e60 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801c824:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801c828:	e01e      	b.n	801c868 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801c82a:	f7ff ff61 	bl	801c6f0 <check_DNS_timeout>
 801c82e:	4603      	mov	r3, r0
 801c830:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 801c834:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c838:	2b00      	cmp	r3, #0
 801c83a:	da06      	bge.n	801c84a <DNS_run+0xd6>
			close(DNS_SOCKET);
 801c83c:	4b0e      	ldr	r3, [pc, #56]	; (801c878 <DNS_run+0x104>)
 801c83e:	781b      	ldrb	r3, [r3, #0]
 801c840:	4618      	mov	r0, r3
 801c842:	f7fc fb0d 	bl	8018e60 <close>
			return 0; // timeout occurred
 801c846:	2300      	movs	r3, #0
 801c848:	e00e      	b.n	801c868 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801c84a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d1b7      	bne.n	801c7c2 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c852:	4b09      	ldr	r3, [pc, #36]	; (801c878 <DNS_run+0x104>)
 801c854:	7818      	ldrb	r0, [r3, #0]
 801c856:	4b09      	ldr	r3, [pc, #36]	; (801c87c <DNS_run+0x108>)
 801c858:	6819      	ldr	r1, [r3, #0]
 801c85a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c85c:	2335      	movs	r3, #53	; 0x35
 801c85e:	9300      	str	r3, [sp, #0]
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	f7fc fec7 	bl	80195f4 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c866:	e7ac      	b.n	801c7c2 <DNS_run+0x4e>
}
 801c868:	4618      	mov	r0, r3
 801c86a:	3734      	adds	r7, #52	; 0x34
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bd90      	pop	{r4, r7, pc}
 801c870:	200009c8 	.word	0x200009c8
 801c874:	200009c4 	.word	0x200009c4
 801c878:	200009c0 	.word	0x200009c0
 801c87c:	200009bc 	.word	0x200009bc

0801c880 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801c880:	b480      	push	{r7}
 801c882:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801c884:	4b04      	ldr	r3, [pc, #16]	; (801c898 <DNS_time_handler+0x18>)
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	3301      	adds	r3, #1
 801c88a:	4a03      	ldr	r2, [pc, #12]	; (801c898 <DNS_time_handler+0x18>)
 801c88c:	6013      	str	r3, [r2, #0]
}
 801c88e:	bf00      	nop
 801c890:	46bd      	mov	sp, r7
 801c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c896:	4770      	bx	lr
 801c898:	200009c4 	.word	0x200009c4

0801c89c <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801c89c:	b480      	push	{r7}
 801c89e:	af00      	add	r7, sp, #0
 801c8a0:	bf00      	nop
 801c8a2:	46bd      	mov	sp, r7
 801c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a8:	4770      	bx	lr
	...

0801c8ac <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801c8ac:	b480      	push	{r7}
 801c8ae:	b083      	sub	sp, #12
 801c8b0:	af00      	add	r7, sp, #0
 801c8b2:	6078      	str	r0, [r7, #4]
 801c8b4:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d002      	beq.n	801c8c2 <dns_service_reg_cb_mutex+0x16>
 801c8bc:	4a07      	ldr	r2, [pc, #28]	; (801c8dc <dns_service_reg_cb_mutex+0x30>)
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801c8c2:	683b      	ldr	r3, [r7, #0]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d002      	beq.n	801c8ce <dns_service_reg_cb_mutex+0x22>
 801c8c8:	4a05      	ldr	r2, [pc, #20]	; (801c8e0 <dns_service_reg_cb_mutex+0x34>)
 801c8ca:	683b      	ldr	r3, [r7, #0]
 801c8cc:	6013      	str	r3, [r2, #0]

}
 801c8ce:	bf00      	nop
 801c8d0:	370c      	adds	r7, #12
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d8:	4770      	bx	lr
 801c8da:	bf00      	nop
 801c8dc:	20000114 	.word	0x20000114
 801c8e0:	20000118 	.word	0x20000118

0801c8e4 <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801c8e4:	b480      	push	{r7}
 801c8e6:	b083      	sub	sp, #12
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d002      	beq.n	801c8f8 <dns_service_reg_cb_net_ready+0x14>
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	4a03      	ldr	r2, [pc, #12]	; (801c904 <dns_service_reg_cb_net_ready+0x20>)
 801c8f6:	6013      	str	r3, [r2, #0]

}
 801c8f8:	bf00      	nop
 801c8fa:	370c      	adds	r7, #12
 801c8fc:	46bd      	mov	sp, r7
 801c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c902:	4770      	bx	lr
 801c904:	2000011c 	.word	0x2000011c

0801c908 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801c908:	b580      	push	{r7, lr}
 801c90a:	b082      	sub	sp, #8
 801c90c:	af00      	add	r7, sp, #0
 801c90e:	4603      	mov	r3, r0
 801c910:	6039      	str	r1, [r7, #0]
 801c912:	71fb      	strb	r3, [r7, #7]
 801c914:	4613      	mov	r3, r2
 801c916:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801c918:	88bb      	ldrh	r3, [r7, #4]
 801c91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c91e:	d202      	bcs.n	801c926 <dns_service_init+0x1e>
 801c920:	f04f 33ff 	mov.w	r3, #4294967295
 801c924:	e005      	b.n	801c932 <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801c926:	79fb      	ldrb	r3, [r7, #7]
 801c928:	6839      	ldr	r1, [r7, #0]
 801c92a:	4618      	mov	r0, r3
 801c92c:	f7ff ff06 	bl	801c73c <DNS_init>
	return 0;
 801c930:	2300      	movs	r3, #0
}
 801c932:	4618      	mov	r0, r3
 801c934:	3708      	adds	r7, #8
 801c936:	46bd      	mov	sp, r7
 801c938:	bd80      	pop	{r7, pc}
	...

0801c93c <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801c93c:	b480      	push	{r7}
 801c93e:	b083      	sub	sp, #12
 801c940:	af00      	add	r7, sp, #0
 801c942:	6078      	str	r0, [r7, #4]
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801c94a:	4b04      	ldr	r3, [pc, #16]	; (801c95c <dns_service_set_dns_ip+0x20>)
 801c94c:	601a      	str	r2, [r3, #0]
}
 801c94e:	bf00      	nop
 801c950:	370c      	adds	r7, #12
 801c952:	46bd      	mov	sp, r7
 801c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c958:	4770      	bx	lr
 801c95a:	bf00      	nop
 801c95c:	200009cc 	.word	0x200009cc

0801c960 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801c960:	b580      	push	{r7, lr}
 801c962:	b084      	sub	sp, #16
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
 801c968:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801c96a:	4b0e      	ldr	r3, [pc, #56]	; (801c9a4 <dns_service_resolve_name+0x44>)
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady()){
 801c970:	4b0d      	ldr	r3, [pc, #52]	; (801c9a8 <dns_service_resolve_name+0x48>)
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	4798      	blx	r3
 801c976:	4603      	mov	r3, r0
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d007      	beq.n	801c98c <dns_service_resolve_name+0x2c>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801c97c:	683a      	ldr	r2, [r7, #0]
 801c97e:	6879      	ldr	r1, [r7, #4]
 801c980:	480a      	ldr	r0, [pc, #40]	; (801c9ac <dns_service_resolve_name+0x4c>)
 801c982:	f7ff fef7 	bl	801c774 <DNS_run>
 801c986:	4603      	mov	r3, r0
 801c988:	73fb      	strb	r3, [r7, #15]
 801c98a:	e001      	b.n	801c990 <dns_service_resolve_name+0x30>
	}else{
		err = -1;
 801c98c:	23ff      	movs	r3, #255	; 0xff
 801c98e:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801c990:	4b07      	ldr	r3, [pc, #28]	; (801c9b0 <dns_service_resolve_name+0x50>)
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	4798      	blx	r3
#endif
	return err;
 801c996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c99a:	4618      	mov	r0, r3
 801c99c:	3710      	adds	r7, #16
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}
 801c9a2:	bf00      	nop
 801c9a4:	20000114 	.word	0x20000114
 801c9a8:	2000011c 	.word	0x2000011c
 801c9ac:	200009cc 	.word	0x200009cc
 801c9b0:	20000118 	.word	0x20000118

0801c9b4 <dns_service_increment_second>:

void dns_service_increment_second(void){
 801c9b4:	b580      	push	{r7, lr}
 801c9b6:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801c9b8:	f7ff ff62 	bl	801c880 <DNS_time_handler>
}
 801c9bc:	bf00      	nop
 801c9be:	bd80      	pop	{r7, pc}

0801c9c0 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801c9c0:	b580      	push	{r7, lr}
 801c9c2:	b086      	sub	sp, #24
 801c9c4:	af00      	add	r7, sp, #0
 801c9c6:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d101      	bne.n	801c9d2 <isValidIPv4+0x12>
        return false;
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	e068      	b.n	801caa4 <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801c9da:	2300      	movs	r3, #0
 801c9dc:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801c9de:	2300      	movs	r3, #0
 801c9e0:	60bb      	str	r3, [r7, #8]
 801c9e2:	e043      	b.n	801ca6c <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801c9e4:	687a      	ldr	r2, [r7, #4]
 801c9e6:	68bb      	ldr	r3, [r7, #8]
 801c9e8:	4413      	add	r3, r2
 801c9ea:	781b      	ldrb	r3, [r3, #0]
 801c9ec:	3b30      	subs	r3, #48	; 0x30
 801c9ee:	2b09      	cmp	r3, #9
 801c9f0:	d818      	bhi.n	801ca24 <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801c9f2:	697a      	ldr	r2, [r7, #20]
 801c9f4:	4613      	mov	r3, r2
 801c9f6:	009b      	lsls	r3, r3, #2
 801c9f8:	4413      	add	r3, r2
 801c9fa:	005b      	lsls	r3, r3, #1
 801c9fc:	4619      	mov	r1, r3
 801c9fe:	687a      	ldr	r2, [r7, #4]
 801ca00:	68bb      	ldr	r3, [r7, #8]
 801ca02:	4413      	add	r3, r2
 801ca04:	781b      	ldrb	r3, [r3, #0]
 801ca06:	3b30      	subs	r3, #48	; 0x30
 801ca08:	440b      	add	r3, r1
 801ca0a:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801ca0c:	697b      	ldr	r3, [r7, #20]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	db02      	blt.n	801ca18 <isValidIPv4+0x58>
 801ca12:	697b      	ldr	r3, [r7, #20]
 801ca14:	2bff      	cmp	r3, #255	; 0xff
 801ca16:	dd01      	ble.n	801ca1c <isValidIPv4+0x5c>
                return false;
 801ca18:	2300      	movs	r3, #0
 801ca1a:	e043      	b.n	801caa4 <isValidIPv4+0xe4>
            }

            segmentLength++;
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	3301      	adds	r3, #1
 801ca20:	60fb      	str	r3, [r7, #12]
 801ca22:	e020      	b.n	801ca66 <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801ca24:	687a      	ldr	r2, [r7, #4]
 801ca26:	68bb      	ldr	r3, [r7, #8]
 801ca28:	4413      	add	r3, r2
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	2b2e      	cmp	r3, #46	; 0x2e
 801ca2e:	d118      	bne.n	801ca62 <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	2b01      	cmp	r3, #1
 801ca34:	dd09      	ble.n	801ca4a <isValidIPv4+0x8a>
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	68ba      	ldr	r2, [r7, #8]
 801ca3a:	1ad3      	subs	r3, r2, r3
 801ca3c:	687a      	ldr	r2, [r7, #4]
 801ca3e:	4413      	add	r3, r2
 801ca40:	781b      	ldrb	r3, [r3, #0]
 801ca42:	2b30      	cmp	r3, #48	; 0x30
 801ca44:	d101      	bne.n	801ca4a <isValidIPv4+0x8a>
                return false;
 801ca46:	2300      	movs	r3, #0
 801ca48:	e02c      	b.n	801caa4 <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801ca4a:	2300      	movs	r3, #0
 801ca4c:	617b      	str	r3, [r7, #20]
            count++;
 801ca4e:	693b      	ldr	r3, [r7, #16]
 801ca50:	3301      	adds	r3, #1
 801ca52:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801ca54:	2300      	movs	r3, #0
 801ca56:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801ca58:	693b      	ldr	r3, [r7, #16]
 801ca5a:	2b03      	cmp	r3, #3
 801ca5c:	dd03      	ble.n	801ca66 <isValidIPv4+0xa6>
                return false;
 801ca5e:	2300      	movs	r3, #0
 801ca60:	e020      	b.n	801caa4 <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801ca62:	2300      	movs	r3, #0
 801ca64:	e01e      	b.n	801caa4 <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801ca66:	68bb      	ldr	r3, [r7, #8]
 801ca68:	3301      	adds	r3, #1
 801ca6a:	60bb      	str	r3, [r7, #8]
 801ca6c:	687a      	ldr	r2, [r7, #4]
 801ca6e:	68bb      	ldr	r3, [r7, #8]
 801ca70:	4413      	add	r3, r2
 801ca72:	781b      	ldrb	r3, [r3, #0]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d1b5      	bne.n	801c9e4 <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	2b01      	cmp	r3, #1
 801ca7c:	dd0c      	ble.n	801ca98 <isValidIPv4+0xd8>
 801ca7e:	6878      	ldr	r0, [r7, #4]
 801ca80:	f7f3 fc0e 	bl	80102a0 <strlen>
 801ca84:	4602      	mov	r2, r0
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	1ad3      	subs	r3, r2, r3
 801ca8a:	687a      	ldr	r2, [r7, #4]
 801ca8c:	4413      	add	r3, r2
 801ca8e:	781b      	ldrb	r3, [r3, #0]
 801ca90:	2b30      	cmp	r3, #48	; 0x30
 801ca92:	d101      	bne.n	801ca98 <isValidIPv4+0xd8>
        return false;
 801ca94:	2300      	movs	r3, #0
 801ca96:	e005      	b.n	801caa4 <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801ca98:	693b      	ldr	r3, [r7, #16]
 801ca9a:	2b03      	cmp	r3, #3
 801ca9c:	bf0c      	ite	eq
 801ca9e:	2301      	moveq	r3, #1
 801caa0:	2300      	movne	r3, #0
 801caa2:	b2db      	uxtb	r3, r3
}
 801caa4:	4618      	mov	r0, r3
 801caa6:	3718      	adds	r7, #24
 801caa8:	46bd      	mov	sp, r7
 801caaa:	bd80      	pop	{r7, pc}

0801caac <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801caac:	b480      	push	{r7}
 801caae:	b085      	sub	sp, #20
 801cab0:	af00      	add	r7, sp, #0
 801cab2:	60f8      	str	r0, [r7, #12]
 801cab4:	60b9      	str	r1, [r7, #8]
 801cab6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	68ba      	ldr	r2, [r7, #8]
 801cabc:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	687a      	ldr	r2, [r7, #4]
 801cac2:	601a      	str	r2, [r3, #0]
}
 801cac4:	bf00      	nop
 801cac6:	3714      	adds	r7, #20
 801cac8:	46bd      	mov	sp, r7
 801caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cace:	4770      	bx	lr

0801cad0 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801cad0:	b480      	push	{r7}
 801cad2:	b083      	sub	sp, #12
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cae0:	4293      	cmp	r3, r2
 801cae2:	d003      	beq.n	801caec <getNextPacketId+0x1c>
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	3301      	adds	r3, #1
 801caea:	e000      	b.n	801caee <getNextPacketId+0x1e>
 801caec:	2301      	movs	r3, #1
 801caee:	687a      	ldr	r2, [r7, #4]
 801caf0:	6013      	str	r3, [r2, #0]
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	681b      	ldr	r3, [r3, #0]
}
 801caf6:	4618      	mov	r0, r3
 801caf8:	370c      	adds	r7, #12
 801cafa:	46bd      	mov	sp, r7
 801cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb00:	4770      	bx	lr

0801cb02 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801cb02:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb04:	b087      	sub	sp, #28
 801cb06:	af00      	add	r7, sp, #0
 801cb08:	60f8      	str	r0, [r7, #12]
 801cb0a:	60b9      	str	r1, [r7, #8]
 801cb0c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801cb0e:	f04f 33ff 	mov.w	r3, #4294967295
 801cb12:	617b      	str	r3, [r7, #20]
        sent = 0;
 801cb14:	2300      	movs	r3, #0
 801cb16:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801cb18:	e018      	b.n	801cb4c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cb1e:	689c      	ldr	r4, [r3, #8]
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	691a      	ldr	r2, [r3, #16]
 801cb28:	693b      	ldr	r3, [r7, #16]
 801cb2a:	18d6      	adds	r6, r2, r3
 801cb2c:	6878      	ldr	r0, [r7, #4]
 801cb2e:	f000 fccb 	bl	801d4c8 <TimerLeftMS>
 801cb32:	4603      	mov	r3, r0
 801cb34:	68ba      	ldr	r2, [r7, #8]
 801cb36:	4631      	mov	r1, r6
 801cb38:	4628      	mov	r0, r5
 801cb3a:	47a0      	blx	r4
 801cb3c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801cb3e:	697b      	ldr	r3, [r7, #20]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	db0e      	blt.n	801cb62 <sendPacket+0x60>
            break;
        sent += rc;
 801cb44:	693a      	ldr	r2, [r7, #16]
 801cb46:	697b      	ldr	r3, [r7, #20]
 801cb48:	4413      	add	r3, r2
 801cb4a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801cb4c:	693a      	ldr	r2, [r7, #16]
 801cb4e:	68bb      	ldr	r3, [r7, #8]
 801cb50:	429a      	cmp	r2, r3
 801cb52:	da07      	bge.n	801cb64 <sendPacket+0x62>
 801cb54:	6878      	ldr	r0, [r7, #4]
 801cb56:	f000 fc75 	bl	801d444 <TimerIsExpired>
 801cb5a:	4603      	mov	r3, r0
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d0dc      	beq.n	801cb1a <sendPacket+0x18>
 801cb60:	e000      	b.n	801cb64 <sendPacket+0x62>
            break;
 801cb62:	bf00      	nop
    }
    if (sent == length)
 801cb64:	693a      	ldr	r2, [r7, #16]
 801cb66:	68bb      	ldr	r3, [r7, #8]
 801cb68:	429a      	cmp	r2, r3
 801cb6a:	d10b      	bne.n	801cb84 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	699b      	ldr	r3, [r3, #24]
 801cb76:	4619      	mov	r1, r3
 801cb78:	4610      	mov	r0, r2
 801cb7a:	f000 fc8d 	bl	801d498 <TimerCountdown>
        rc = SUCCESSS;
 801cb7e:	2300      	movs	r3, #0
 801cb80:	617b      	str	r3, [r7, #20]
 801cb82:	e002      	b.n	801cb8a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801cb84:	f04f 33ff 	mov.w	r3, #4294967295
 801cb88:	617b      	str	r3, [r7, #20]
    return rc;
 801cb8a:	697b      	ldr	r3, [r7, #20]
}
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	371c      	adds	r7, #28
 801cb90:	46bd      	mov	sp, r7
 801cb92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb94 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801cb94:	b580      	push	{r7, lr}
 801cb96:	b086      	sub	sp, #24
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	60f8      	str	r0, [r7, #12]
 801cb9c:	60b9      	str	r1, [r7, #8]
 801cb9e:	607a      	str	r2, [r7, #4]
 801cba0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	68ba      	ldr	r2, [r7, #8]
 801cba6:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cba8:	2300      	movs	r3, #0
 801cbaa:	617b      	str	r3, [r7, #20]
 801cbac:	e009      	b.n	801cbc2 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801cbae:	68fa      	ldr	r2, [r7, #12]
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	3304      	adds	r3, #4
 801cbb4:	00db      	lsls	r3, r3, #3
 801cbb6:	4413      	add	r3, r2
 801cbb8:	2200      	movs	r2, #0
 801cbba:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cbbc:	697b      	ldr	r3, [r7, #20]
 801cbbe:	3301      	adds	r3, #1
 801cbc0:	617b      	str	r3, [r7, #20]
 801cbc2:	697b      	ldr	r3, [r7, #20]
 801cbc4:	2b04      	cmp	r3, #4
 801cbc6:	ddf2      	ble.n	801cbae <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	687a      	ldr	r2, [r7, #4]
 801cbcc:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	683a      	ldr	r2, [r7, #0]
 801cbd2:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801cbd4:	68fb      	ldr	r3, [r7, #12]
 801cbd6:	6a3a      	ldr	r2, [r7, #32]
 801cbd8:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801cbda:	68fb      	ldr	r3, [r7, #12]
 801cbdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cbde:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cbe4:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	2200      	movs	r2, #0
 801cbea:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	2200      	movs	r2, #0
 801cbf0:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	2200      	movs	r2, #0
 801cbf6:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	2201      	movs	r2, #1
 801cbfc:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801cbfe:	68fb      	ldr	r3, [r7, #12]
 801cc00:	3354      	adds	r3, #84	; 0x54
 801cc02:	4618      	mov	r0, r3
 801cc04:	f000 fc11 	bl	801d42a <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801cc08:	bf00      	nop
 801cc0a:	3718      	adds	r7, #24
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	bd80      	pop	{r7, pc}

0801cc10 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801cc10:	b590      	push	{r4, r7, lr}
 801cc12:	b08b      	sub	sp, #44	; 0x2c
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	60f8      	str	r0, [r7, #12]
 801cc18:	60b9      	str	r1, [r7, #8]
 801cc1a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801cc1c:	2301      	movs	r3, #1
 801cc1e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801cc20:	2300      	movs	r3, #0
 801cc22:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801cc24:	2304      	movs	r3, #4
 801cc26:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801cc28:	68bb      	ldr	r3, [r7, #8]
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 801cc32:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801cc34:	6a3b      	ldr	r3, [r7, #32]
 801cc36:	3301      	adds	r3, #1
 801cc38:	623b      	str	r3, [r7, #32]
 801cc3a:	6a3a      	ldr	r2, [r7, #32]
 801cc3c:	69fb      	ldr	r3, [r7, #28]
 801cc3e:	429a      	cmp	r2, r3
 801cc40:	dd03      	ble.n	801cc4a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801cc42:	f04f 33ff 	mov.w	r3, #4294967295
 801cc46:	61bb      	str	r3, [r7, #24]
            goto exit;
 801cc48:	e021      	b.n	801cc8e <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc4e:	685c      	ldr	r4, [r3, #4]
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cc54:	f107 0117 	add.w	r1, r7, #23
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2201      	movs	r2, #1
 801cc5c:	47a0      	blx	r4
 801cc5e:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801cc60:	69bb      	ldr	r3, [r7, #24]
 801cc62:	2b01      	cmp	r3, #1
 801cc64:	d112      	bne.n	801cc8c <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801cc66:	68bb      	ldr	r3, [r7, #8]
 801cc68:	681a      	ldr	r2, [r3, #0]
 801cc6a:	7dfb      	ldrb	r3, [r7, #23]
 801cc6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cc70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cc72:	fb01 f303 	mul.w	r3, r1, r3
 801cc76:	441a      	add	r2, r3
 801cc78:	68bb      	ldr	r3, [r7, #8]
 801cc7a:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc7e:	01db      	lsls	r3, r3, #7
 801cc80:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801cc82:	7dfb      	ldrb	r3, [r7, #23]
 801cc84:	b25b      	sxtb	r3, r3
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	dbd1      	blt.n	801cc2e <decodePacket+0x1e>
exit:
 801cc8a:	e000      	b.n	801cc8e <decodePacket+0x7e>
            goto exit;
 801cc8c:	bf00      	nop
    return len;
 801cc8e:	6a3b      	ldr	r3, [r7, #32]
}
 801cc90:	4618      	mov	r0, r3
 801cc92:	372c      	adds	r7, #44	; 0x2c
 801cc94:	46bd      	mov	sp, r7
 801cc96:	bd90      	pop	{r4, r7, pc}

0801cc98 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc9a:	b089      	sub	sp, #36	; 0x24
 801cc9c:	af00      	add	r7, sp, #0
 801cc9e:	60f8      	str	r0, [r7, #12]
 801cca0:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801cca2:	f04f 33ff 	mov.w	r3, #4294967295
 801cca6:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801cca8:	2300      	movs	r3, #0
 801ccaa:	617b      	str	r3, [r7, #20]
    int len = 0;
 801ccac:	2300      	movs	r3, #0
 801ccae:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801ccb4:	68fb      	ldr	r3, [r7, #12]
 801ccb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ccb8:	685c      	ldr	r4, [r3, #4]
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	695e      	ldr	r6, [r3, #20]
 801ccc2:	68b8      	ldr	r0, [r7, #8]
 801ccc4:	f000 fc00 	bl	801d4c8 <TimerLeftMS>
 801ccc8:	4603      	mov	r3, r0
 801ccca:	2201      	movs	r2, #1
 801cccc:	4631      	mov	r1, r6
 801ccce:	4628      	mov	r0, r5
 801ccd0:	47a0      	blx	r4
 801ccd2:	4603      	mov	r3, r0
 801ccd4:	2b01      	cmp	r3, #1
 801ccd6:	d13b      	bne.n	801cd50 <readPacket+0xb8>
        goto exit;

    len = 1;
 801ccd8:	2301      	movs	r3, #1
 801ccda:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801ccdc:	68b8      	ldr	r0, [r7, #8]
 801ccde:	f000 fbf3 	bl	801d4c8 <TimerLeftMS>
 801cce2:	4602      	mov	r2, r0
 801cce4:	f107 0310 	add.w	r3, r7, #16
 801cce8:	4619      	mov	r1, r3
 801ccea:	68f8      	ldr	r0, [r7, #12]
 801ccec:	f7ff ff90 	bl	801cc10 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	695b      	ldr	r3, [r3, #20]
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	693a      	ldr	r2, [r7, #16]
 801ccf8:	4611      	mov	r1, r2
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	f000 ff49 	bl	801db92 <MQTTPacket_encode>
 801cd00:	4602      	mov	r2, r0
 801cd02:	69bb      	ldr	r3, [r7, #24]
 801cd04:	4413      	add	r3, r2
 801cd06:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801cd08:	693b      	ldr	r3, [r7, #16]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	dd16      	ble.n	801cd3c <readPacket+0xa4>
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd12:	685c      	ldr	r4, [r3, #4]
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cd18:	68fb      	ldr	r3, [r7, #12]
 801cd1a:	695a      	ldr	r2, [r3, #20]
 801cd1c:	69bb      	ldr	r3, [r7, #24]
 801cd1e:	18d6      	adds	r6, r2, r3
 801cd20:	693b      	ldr	r3, [r7, #16]
 801cd22:	607b      	str	r3, [r7, #4]
 801cd24:	68b8      	ldr	r0, [r7, #8]
 801cd26:	f000 fbcf 	bl	801d4c8 <TimerLeftMS>
 801cd2a:	4603      	mov	r3, r0
 801cd2c:	687a      	ldr	r2, [r7, #4]
 801cd2e:	4631      	mov	r1, r6
 801cd30:	4628      	mov	r0, r5
 801cd32:	47a0      	blx	r4
 801cd34:	4602      	mov	r2, r0
 801cd36:	693b      	ldr	r3, [r7, #16]
 801cd38:	429a      	cmp	r2, r3
 801cd3a:	d10b      	bne.n	801cd54 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	695b      	ldr	r3, [r3, #20]
 801cd40:	781b      	ldrb	r3, [r3, #0]
 801cd42:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801cd44:	7d3b      	ldrb	r3, [r7, #20]
 801cd46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801cd4a:	b2db      	uxtb	r3, r3
 801cd4c:	61fb      	str	r3, [r7, #28]
 801cd4e:	e002      	b.n	801cd56 <readPacket+0xbe>
        goto exit;
 801cd50:	bf00      	nop
 801cd52:	e000      	b.n	801cd56 <readPacket+0xbe>
        goto exit;
 801cd54:	bf00      	nop
exit:
    return rc;
 801cd56:	69fb      	ldr	r3, [r7, #28]
}
 801cd58:	4618      	mov	r0, r3
 801cd5a:	3724      	adds	r7, #36	; 0x24
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd60 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801cd60:	b480      	push	{r7}
 801cd62:	b087      	sub	sp, #28
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801cd6e:	683b      	ldr	r3, [r7, #0]
 801cd70:	689b      	ldr	r3, [r3, #8]
 801cd72:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801cd74:	683b      	ldr	r3, [r7, #0]
 801cd76:	685b      	ldr	r3, [r3, #4]
 801cd78:	461a      	mov	r2, r3
 801cd7a:	693b      	ldr	r3, [r7, #16]
 801cd7c:	4413      	add	r3, r2
 801cd7e:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801cd80:	e039      	b.n	801cdf6 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801cd82:	693b      	ldr	r3, [r7, #16]
 801cd84:	781b      	ldrb	r3, [r3, #0]
 801cd86:	2b2f      	cmp	r3, #47	; 0x2f
 801cd88:	d103      	bne.n	801cd92 <isTopicMatched+0x32>
 801cd8a:	697b      	ldr	r3, [r7, #20]
 801cd8c:	781b      	ldrb	r3, [r3, #0]
 801cd8e:	2b2f      	cmp	r3, #47	; 0x2f
 801cd90:	d13a      	bne.n	801ce08 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801cd92:	697b      	ldr	r3, [r7, #20]
 801cd94:	781b      	ldrb	r3, [r3, #0]
 801cd96:	2b2b      	cmp	r3, #43	; 0x2b
 801cd98:	d009      	beq.n	801cdae <isTopicMatched+0x4e>
 801cd9a:	697b      	ldr	r3, [r7, #20]
 801cd9c:	781b      	ldrb	r3, [r3, #0]
 801cd9e:	2b23      	cmp	r3, #35	; 0x23
 801cda0:	d005      	beq.n	801cdae <isTopicMatched+0x4e>
 801cda2:	697b      	ldr	r3, [r7, #20]
 801cda4:	781a      	ldrb	r2, [r3, #0]
 801cda6:	693b      	ldr	r3, [r7, #16]
 801cda8:	781b      	ldrb	r3, [r3, #0]
 801cdaa:	429a      	cmp	r2, r3
 801cdac:	d12e      	bne.n	801ce0c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801cdae:	697b      	ldr	r3, [r7, #20]
 801cdb0:	781b      	ldrb	r3, [r3, #0]
 801cdb2:	2b2b      	cmp	r3, #43	; 0x2b
 801cdb4:	d112      	bne.n	801cddc <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	3301      	adds	r3, #1
 801cdba:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801cdbc:	e005      	b.n	801cdca <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801cdbe:	693b      	ldr	r3, [r7, #16]
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	613b      	str	r3, [r7, #16]
 801cdc4:	693b      	ldr	r3, [r7, #16]
 801cdc6:	3301      	adds	r3, #1
 801cdc8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801cdca:	68fa      	ldr	r2, [r7, #12]
 801cdcc:	68bb      	ldr	r3, [r7, #8]
 801cdce:	429a      	cmp	r2, r3
 801cdd0:	d20b      	bcs.n	801cdea <isTopicMatched+0x8a>
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	781b      	ldrb	r3, [r3, #0]
 801cdd6:	2b2f      	cmp	r3, #47	; 0x2f
 801cdd8:	d1f1      	bne.n	801cdbe <isTopicMatched+0x5e>
 801cdda:	e006      	b.n	801cdea <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	781b      	ldrb	r3, [r3, #0]
 801cde0:	2b23      	cmp	r3, #35	; 0x23
 801cde2:	d102      	bne.n	801cdea <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801cde4:	68bb      	ldr	r3, [r7, #8]
 801cde6:	3b01      	subs	r3, #1
 801cde8:	613b      	str	r3, [r7, #16]
        curf++;
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	3301      	adds	r3, #1
 801cdee:	617b      	str	r3, [r7, #20]
        curn++;
 801cdf0:	693b      	ldr	r3, [r7, #16]
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801cdf6:	697b      	ldr	r3, [r7, #20]
 801cdf8:	781b      	ldrb	r3, [r3, #0]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d007      	beq.n	801ce0e <isTopicMatched+0xae>
 801cdfe:	693a      	ldr	r2, [r7, #16]
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	429a      	cmp	r2, r3
 801ce04:	d3bd      	bcc.n	801cd82 <isTopicMatched+0x22>
 801ce06:	e002      	b.n	801ce0e <isTopicMatched+0xae>
            break;
 801ce08:	bf00      	nop
 801ce0a:	e000      	b.n	801ce0e <isTopicMatched+0xae>
            break;
 801ce0c:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801ce0e:	693a      	ldr	r2, [r7, #16]
 801ce10:	68bb      	ldr	r3, [r7, #8]
 801ce12:	429a      	cmp	r2, r3
 801ce14:	d105      	bne.n	801ce22 <isTopicMatched+0xc2>
 801ce16:	697b      	ldr	r3, [r7, #20]
 801ce18:	781b      	ldrb	r3, [r3, #0]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d101      	bne.n	801ce22 <isTopicMatched+0xc2>
 801ce1e:	2301      	movs	r3, #1
 801ce20:	e000      	b.n	801ce24 <isTopicMatched+0xc4>
 801ce22:	2300      	movs	r3, #0
 801ce24:	b2db      	uxtb	r3, r3
}
 801ce26:	4618      	mov	r0, r3
 801ce28:	371c      	adds	r7, #28
 801ce2a:	46bd      	mov	sp, r7
 801ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce30:	4770      	bx	lr

0801ce32 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801ce32:	b580      	push	{r7, lr}
 801ce34:	b08a      	sub	sp, #40	; 0x28
 801ce36:	af00      	add	r7, sp, #0
 801ce38:	60f8      	str	r0, [r7, #12]
 801ce3a:	60b9      	str	r1, [r7, #8]
 801ce3c:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801ce3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce42:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801ce44:	2300      	movs	r3, #0
 801ce46:	627b      	str	r3, [r7, #36]	; 0x24
 801ce48:	e03f      	b.n	801ceca <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801ce4a:	68fa      	ldr	r2, [r7, #12]
 801ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce4e:	3304      	adds	r3, #4
 801ce50:	00db      	lsls	r3, r3, #3
 801ce52:	4413      	add	r3, r2
 801ce54:	685b      	ldr	r3, [r3, #4]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d034      	beq.n	801cec4 <deliverMessage+0x92>
 801ce5a:	68fa      	ldr	r2, [r7, #12]
 801ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce5e:	3304      	adds	r3, #4
 801ce60:	00db      	lsls	r3, r3, #3
 801ce62:	4413      	add	r3, r2
 801ce64:	685b      	ldr	r3, [r3, #4]
 801ce66:	4619      	mov	r1, r3
 801ce68:	68b8      	ldr	r0, [r7, #8]
 801ce6a:	f001 f861 	bl	801df30 <MQTTPacket_equals>
 801ce6e:	4603      	mov	r3, r0
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d10c      	bne.n	801ce8e <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801ce74:	68fa      	ldr	r2, [r7, #12]
 801ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce78:	3304      	adds	r3, #4
 801ce7a:	00db      	lsls	r3, r3, #3
 801ce7c:	4413      	add	r3, r2
 801ce7e:	685b      	ldr	r3, [r3, #4]
 801ce80:	68b9      	ldr	r1, [r7, #8]
 801ce82:	4618      	mov	r0, r3
 801ce84:	f7ff ff6c 	bl	801cd60 <isTopicMatched>
 801ce88:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d01a      	beq.n	801cec4 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801ce8e:	68fa      	ldr	r2, [r7, #12]
 801ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce92:	3304      	adds	r3, #4
 801ce94:	00db      	lsls	r3, r3, #3
 801ce96:	4413      	add	r3, r2
 801ce98:	689b      	ldr	r3, [r3, #8]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d012      	beq.n	801cec4 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801ce9e:	f107 0318 	add.w	r3, r7, #24
 801cea2:	687a      	ldr	r2, [r7, #4]
 801cea4:	68b9      	ldr	r1, [r7, #8]
 801cea6:	4618      	mov	r0, r3
 801cea8:	f7ff fe00 	bl	801caac <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801ceac:	68fa      	ldr	r2, [r7, #12]
 801ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceb0:	3304      	adds	r3, #4
 801ceb2:	00db      	lsls	r3, r3, #3
 801ceb4:	4413      	add	r3, r2
 801ceb6:	689b      	ldr	r3, [r3, #8]
 801ceb8:	f107 0218 	add.w	r2, r7, #24
 801cebc:	4610      	mov	r0, r2
 801cebe:	4798      	blx	r3
                rc = SUCCESSS;
 801cec0:	2300      	movs	r3, #0
 801cec2:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cec6:	3301      	adds	r3, #1
 801cec8:	627b      	str	r3, [r7, #36]	; 0x24
 801ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cecc:	2b04      	cmp	r3, #4
 801cece:	ddbc      	ble.n	801ce4a <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801ced0:	6a3b      	ldr	r3, [r7, #32]
 801ced2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ced6:	d112      	bne.n	801cefe <deliverMessage+0xcc>
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d00e      	beq.n	801cefe <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801cee0:	f107 0310 	add.w	r3, r7, #16
 801cee4:	687a      	ldr	r2, [r7, #4]
 801cee6:	68b9      	ldr	r1, [r7, #8]
 801cee8:	4618      	mov	r0, r3
 801ceea:	f7ff fddf 	bl	801caac <NewMessageData>
        c->defaultMessageHandler(&md);
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cef2:	f107 0210 	add.w	r2, r7, #16
 801cef6:	4610      	mov	r0, r2
 801cef8:	4798      	blx	r3
        rc = SUCCESSS;
 801cefa:	2300      	movs	r3, #0
 801cefc:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801cefe:	6a3b      	ldr	r3, [r7, #32]
}
 801cf00:	4618      	mov	r0, r3
 801cf02:	3728      	adds	r7, #40	; 0x28
 801cf04:	46bd      	mov	sp, r7
 801cf06:	bd80      	pop	{r7, pc}

0801cf08 <keepalive>:


int keepalive(MQTTClient* c)
{
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	b086      	sub	sp, #24
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801cf10:	f04f 33ff 	mov.w	r3, #4294967295
 801cf14:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	699b      	ldr	r3, [r3, #24]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d102      	bne.n	801cf24 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801cf1e:	2300      	movs	r3, #0
 801cf20:	617b      	str	r3, [r7, #20]
        goto exit;
 801cf22:	e033      	b.n	801cf8c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	3354      	adds	r3, #84	; 0x54
 801cf28:	4618      	mov	r0, r3
 801cf2a:	f000 fa8b 	bl	801d444 <TimerIsExpired>
 801cf2e:	4603      	mov	r3, r0
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d02a      	beq.n	801cf8a <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	7f1b      	ldrb	r3, [r3, #28]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d126      	bne.n	801cf8a <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801cf3c:	f107 0308 	add.w	r3, r7, #8
 801cf40:	4618      	mov	r0, r3
 801cf42:	f000 fa72 	bl	801d42a <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801cf46:	f107 0308 	add.w	r3, r7, #8
 801cf4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801cf4e:	4618      	mov	r0, r3
 801cf50:	f000 fa8e 	bl	801d470 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	691a      	ldr	r2, [r3, #16]
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	689b      	ldr	r3, [r3, #8]
 801cf5c:	4619      	mov	r1, r3
 801cf5e:	4610      	mov	r0, r2
 801cf60:	f000 fd4b 	bl	801d9fa <MQTTSerialize_pingreq>
 801cf64:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801cf66:	693b      	ldr	r3, [r7, #16]
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	dd0f      	ble.n	801cf8c <keepalive+0x84>
 801cf6c:	f107 0308 	add.w	r3, r7, #8
 801cf70:	461a      	mov	r2, r3
 801cf72:	6939      	ldr	r1, [r7, #16]
 801cf74:	6878      	ldr	r0, [r7, #4]
 801cf76:	f7ff fdc4 	bl	801cb02 <sendPacket>
 801cf7a:	6178      	str	r0, [r7, #20]
 801cf7c:	697b      	ldr	r3, [r7, #20]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d104      	bne.n	801cf8c <keepalive+0x84>
                c->ping_outstanding = 1;
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	2201      	movs	r2, #1
 801cf86:	771a      	strb	r2, [r3, #28]
 801cf88:	e000      	b.n	801cf8c <keepalive+0x84>
        }
    }

exit:
 801cf8a:	bf00      	nop
    return rc;
 801cf8c:	697b      	ldr	r3, [r7, #20]
}
 801cf8e:	4618      	mov	r0, r3
 801cf90:	3718      	adds	r7, #24
 801cf92:	46bd      	mov	sp, r7
 801cf94:	bd80      	pop	{r7, pc}
	...

0801cf98 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801cf98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf9a:	b095      	sub	sp, #84	; 0x54
 801cf9c:	af06      	add	r7, sp, #24
 801cf9e:	6078      	str	r0, [r7, #4]
 801cfa0:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801cfa2:	6839      	ldr	r1, [r7, #0]
 801cfa4:	6878      	ldr	r0, [r7, #4]
 801cfa6:	f7ff fe77 	bl	801cc98 <readPacket>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 801cfae:	2300      	movs	r3, #0
 801cfb0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 801cfb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cfb8:	3b02      	subs	r3, #2
 801cfba:	2b0b      	cmp	r3, #11
 801cfbc:	f200 80c0 	bhi.w	801d140 <cycle+0x1a8>
 801cfc0:	a201      	add	r2, pc, #4	; (adr r2, 801cfc8 <cycle+0x30>)
 801cfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cfc6:	bf00      	nop
 801cfc8:	0801d141 	.word	0x0801d141
 801cfcc:	0801cff9 	.word	0x0801cff9
 801cfd0:	0801d141 	.word	0x0801d141
 801cfd4:	0801d0c1 	.word	0x0801d0c1
 801cfd8:	0801d141 	.word	0x0801d141
 801cfdc:	0801d141 	.word	0x0801d141
 801cfe0:	0801d141 	.word	0x0801d141
 801cfe4:	0801d141 	.word	0x0801d141
 801cfe8:	0801d141 	.word	0x0801d141
 801cfec:	0801d141 	.word	0x0801d141
 801cff0:	0801d141 	.word	0x0801d141
 801cff4:	0801d133 	.word	0x0801d133
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801cffc:	687a      	ldr	r2, [r7, #4]
 801cffe:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d000:	4616      	mov	r6, r2
 801d002:	f107 0210 	add.w	r2, r7, #16
 801d006:	1d15      	adds	r5, r2, #4
 801d008:	f107 0210 	add.w	r2, r7, #16
 801d00c:	1c54      	adds	r4, r2, #1
 801d00e:	f107 010c 	add.w	r1, r7, #12
 801d012:	f107 0210 	add.w	r2, r7, #16
 801d016:	1c90      	adds	r0, r2, #2
 801d018:	9604      	str	r6, [sp, #16]
 801d01a:	9303      	str	r3, [sp, #12]
 801d01c:	f107 0310 	add.w	r3, r7, #16
 801d020:	330c      	adds	r3, #12
 801d022:	9302      	str	r3, [sp, #8]
 801d024:	f107 0310 	add.w	r3, r7, #16
 801d028:	3308      	adds	r3, #8
 801d02a:	9301      	str	r3, [sp, #4]
 801d02c:	f107 0320 	add.w	r3, r7, #32
 801d030:	9300      	str	r3, [sp, #0]
 801d032:	462b      	mov	r3, r5
 801d034:	4622      	mov	r2, r4
 801d036:	f000 fcef 	bl	801da18 <MQTTDeserialize_publish>
 801d03a:	4603      	mov	r3, r0
 801d03c:	2b01      	cmp	r3, #1
 801d03e:	f040 8083 	bne.w	801d148 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	b2db      	uxtb	r3, r3
 801d046:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801d048:	f107 0210 	add.w	r2, r7, #16
 801d04c:	f107 0320 	add.w	r3, r7, #32
 801d050:	4619      	mov	r1, r3
 801d052:	6878      	ldr	r0, [r7, #4]
 801d054:	f7ff feed 	bl	801ce32 <deliverMessage>
            if (msg.qos != QOS0)
 801d058:	7c3b      	ldrb	r3, [r7, #16]
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d06d      	beq.n	801d13a <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801d05e:	7c3b      	ldrb	r3, [r7, #16]
 801d060:	2b01      	cmp	r3, #1
 801d062:	d10c      	bne.n	801d07e <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	6918      	ldr	r0, [r3, #16]
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	689b      	ldr	r3, [r3, #8]
 801d06c:	4619      	mov	r1, r3
 801d06e:	8abb      	ldrh	r3, [r7, #20]
 801d070:	9300      	str	r3, [sp, #0]
 801d072:	2300      	movs	r3, #0
 801d074:	2204      	movs	r2, #4
 801d076:	f001 f828 	bl	801e0ca <MQTTSerialize_ack>
 801d07a:	6378      	str	r0, [r7, #52]	; 0x34
 801d07c:	e00e      	b.n	801d09c <cycle+0x104>
                else if (msg.qos == QOS2)
 801d07e:	7c3b      	ldrb	r3, [r7, #16]
 801d080:	2b02      	cmp	r3, #2
 801d082:	d10b      	bne.n	801d09c <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	6918      	ldr	r0, [r3, #16]
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	689b      	ldr	r3, [r3, #8]
 801d08c:	4619      	mov	r1, r3
 801d08e:	8abb      	ldrh	r3, [r7, #20]
 801d090:	9300      	str	r3, [sp, #0]
 801d092:	2300      	movs	r3, #0
 801d094:	2205      	movs	r2, #5
 801d096:	f001 f818 	bl	801e0ca <MQTTSerialize_ack>
 801d09a:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801d09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	dc03      	bgt.n	801d0aa <cycle+0x112>
                    rc = FAILURE;
 801d0a2:	f04f 33ff 	mov.w	r3, #4294967295
 801d0a6:	633b      	str	r3, [r7, #48]	; 0x30
 801d0a8:	e005      	b.n	801d0b6 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801d0aa:	683a      	ldr	r2, [r7, #0]
 801d0ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d0ae:	6878      	ldr	r0, [r7, #4]
 801d0b0:	f7ff fd27 	bl	801cb02 <sendPacket>
 801d0b4:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0bc:	d13d      	bne.n	801d13a <cycle+0x1a2>
                    goto exit; // there was a problem
 801d0be:	e044      	b.n	801d14a <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	695c      	ldr	r4, [r3, #20]
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	68db      	ldr	r3, [r3, #12]
 801d0c8:	f107 020a 	add.w	r2, r7, #10
 801d0cc:	f107 0109 	add.w	r1, r7, #9
 801d0d0:	f107 0008 	add.w	r0, r7, #8
 801d0d4:	9300      	str	r3, [sp, #0]
 801d0d6:	4623      	mov	r3, r4
 801d0d8:	f000 fd10 	bl	801dafc <MQTTDeserialize_ack>
 801d0dc:	4603      	mov	r3, r0
 801d0de:	2b01      	cmp	r3, #1
 801d0e0:	d003      	beq.n	801d0ea <cycle+0x152>
                rc = FAILURE;
 801d0e2:	f04f 33ff 	mov.w	r3, #4294967295
 801d0e6:	633b      	str	r3, [r7, #48]	; 0x30
 801d0e8:	e01e      	b.n	801d128 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6918      	ldr	r0, [r3, #16]
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	689b      	ldr	r3, [r3, #8]
 801d0f2:	4619      	mov	r1, r3
 801d0f4:	897b      	ldrh	r3, [r7, #10]
 801d0f6:	9300      	str	r3, [sp, #0]
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	2206      	movs	r2, #6
 801d0fc:	f000 ffe5 	bl	801e0ca <MQTTSerialize_ack>
 801d100:	6378      	str	r0, [r7, #52]	; 0x34
 801d102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d104:	2b00      	cmp	r3, #0
 801d106:	dc03      	bgt.n	801d110 <cycle+0x178>
                rc = FAILURE;
 801d108:	f04f 33ff 	mov.w	r3, #4294967295
 801d10c:	633b      	str	r3, [r7, #48]	; 0x30
 801d10e:	e00b      	b.n	801d128 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801d110:	683a      	ldr	r2, [r7, #0]
 801d112:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f7ff fcf4 	bl	801cb02 <sendPacket>
 801d11a:	6338      	str	r0, [r7, #48]	; 0x30
 801d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d002      	beq.n	801d128 <cycle+0x190>
                rc = FAILURE; // there was a problem
 801d122:	f04f 33ff 	mov.w	r3, #4294967295
 801d126:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d12e:	d106      	bne.n	801d13e <cycle+0x1a6>
                goto exit; // there was a problem
 801d130:	e00b      	b.n	801d14a <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	2200      	movs	r2, #0
 801d136:	771a      	strb	r2, [r3, #28]
            break;
 801d138:	e002      	b.n	801d140 <cycle+0x1a8>
            break;
 801d13a:	bf00      	nop
 801d13c:	e000      	b.n	801d140 <cycle+0x1a8>
            break;
 801d13e:	bf00      	nop
    }
    keepalive(c);
 801d140:	6878      	ldr	r0, [r7, #4]
 801d142:	f7ff fee1 	bl	801cf08 <keepalive>
 801d146:	e000      	b.n	801d14a <cycle+0x1b2>
                goto exit;
 801d148:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d101      	bne.n	801d154 <cycle+0x1bc>
        rc = packet_type;
 801d150:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d152:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 801d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801d156:	4618      	mov	r0, r3
 801d158:	373c      	adds	r7, #60	; 0x3c
 801d15a:	46bd      	mov	sp, r7
 801d15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d15e:	bf00      	nop

0801d160 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801d160:	b580      	push	{r7, lr}
 801d162:	b086      	sub	sp, #24
 801d164:	af00      	add	r7, sp, #0
 801d166:	60f8      	str	r0, [r7, #12]
 801d168:	60b9      	str	r1, [r7, #8]
 801d16a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d16c:	f04f 33ff 	mov.w	r3, #4294967295
 801d170:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801d172:	6878      	ldr	r0, [r7, #4]
 801d174:	f000 f966 	bl	801d444 <TimerIsExpired>
 801d178:	4603      	mov	r3, r0
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d109      	bne.n	801d192 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801d17e:	6879      	ldr	r1, [r7, #4]
 801d180:	68f8      	ldr	r0, [r7, #12]
 801d182:	f7ff ff09 	bl	801cf98 <cycle>
 801d186:	6178      	str	r0, [r7, #20]
 801d188:	697a      	ldr	r2, [r7, #20]
 801d18a:	68bb      	ldr	r3, [r7, #8]
 801d18c:	429a      	cmp	r2, r3
 801d18e:	d1f0      	bne.n	801d172 <waitfor+0x12>
 801d190:	e000      	b.n	801d194 <waitfor+0x34>
            break; // we timed out
 801d192:	bf00      	nop

    return rc;
 801d194:	697b      	ldr	r3, [r7, #20]
}
 801d196:	4618      	mov	r0, r3
 801d198:	3718      	adds	r7, #24
 801d19a:	46bd      	mov	sp, r7
 801d19c:	bd80      	pop	{r7, pc}
	...

0801d1a0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d1a0:	b580      	push	{r7, lr}
 801d1a2:	b09e      	sub	sp, #120	; 0x78
 801d1a4:	af00      	add	r7, sp, #0
 801d1a6:	6078      	str	r0, [r7, #4]
 801d1a8:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801d1aa:	f04f 33ff 	mov.w	r3, #4294967295
 801d1ae:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d1b0:	4a3d      	ldr	r2, [pc, #244]	; (801d2a8 <MQTTConnect+0x108>)
 801d1b2:	f107 0310 	add.w	r3, r7, #16
 801d1b6:	4611      	mov	r1, r2
 801d1b8:	2258      	movs	r2, #88	; 0x58
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f010 fcc3 	bl	802db46 <memcpy>
    int len = 0;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	6a1b      	ldr	r3, [r3, #32]
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d15d      	bne.n	801d288 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801d1cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	f000 f92a 	bl	801d42a <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	685a      	ldr	r2, [r3, #4]
 801d1da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d1de:	4611      	mov	r1, r2
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	f000 f945 	bl	801d470 <TimerCountdownMS>

    if (options == 0)
 801d1e6:	683b      	ldr	r3, [r7, #0]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d102      	bne.n	801d1f2 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801d1ec:	f107 0310 	add.w	r3, r7, #16
 801d1f0:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801d1f2:	683b      	ldr	r3, [r7, #0]
 801d1f4:	8b1b      	ldrh	r3, [r3, #24]
 801d1f6:	461a      	mov	r2, r3
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	699b      	ldr	r3, [r3, #24]
 801d206:	4619      	mov	r1, r3
 801d208:	4610      	mov	r0, r2
 801d20a:	f000 f945 	bl	801d498 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	6918      	ldr	r0, [r3, #16]
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	689b      	ldr	r3, [r3, #8]
 801d216:	683a      	ldr	r2, [r7, #0]
 801d218:	4619      	mov	r1, r3
 801d21a:	f000 fa75 	bl	801d708 <MQTTSerialize_connect>
 801d21e:	6738      	str	r0, [r7, #112]	; 0x70
 801d220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d222:	2b00      	cmp	r3, #0
 801d224:	dd32      	ble.n	801d28c <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801d226:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d22a:	461a      	mov	r2, r3
 801d22c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d22e:	6878      	ldr	r0, [r7, #4]
 801d230:	f7ff fc67 	bl	801cb02 <sendPacket>
 801d234:	6778      	str	r0, [r7, #116]	; 0x74
 801d236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d129      	bne.n	801d290 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801d23c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d240:	461a      	mov	r2, r3
 801d242:	2102      	movs	r1, #2
 801d244:	6878      	ldr	r0, [r7, #4]
 801d246:	f7ff ff8b 	bl	801d160 <waitfor>
 801d24a:	4603      	mov	r3, r0
 801d24c:	2b02      	cmp	r3, #2
 801d24e:	d117      	bne.n	801d280 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801d250:	23ff      	movs	r3, #255	; 0xff
 801d252:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801d254:	2300      	movs	r3, #0
 801d256:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	695a      	ldr	r2, [r3, #20]
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	68db      	ldr	r3, [r3, #12]
 801d260:	f107 010f 	add.w	r1, r7, #15
 801d264:	f107 000e 	add.w	r0, r7, #14
 801d268:	f000 fb3a 	bl	801d8e0 <MQTTDeserialize_connack>
 801d26c:	4603      	mov	r3, r0
 801d26e:	2b01      	cmp	r3, #1
 801d270:	d102      	bne.n	801d278 <MQTTConnect+0xd8>
            rc = connack_rc;
 801d272:	7bfb      	ldrb	r3, [r7, #15]
 801d274:	677b      	str	r3, [r7, #116]	; 0x74
 801d276:	e00c      	b.n	801d292 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801d278:	f04f 33ff 	mov.w	r3, #4294967295
 801d27c:	677b      	str	r3, [r7, #116]	; 0x74
 801d27e:	e008      	b.n	801d292 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801d280:	f04f 33ff 	mov.w	r3, #4294967295
 801d284:	677b      	str	r3, [r7, #116]	; 0x74
 801d286:	e004      	b.n	801d292 <MQTTConnect+0xf2>
		goto exit;
 801d288:	bf00      	nop
 801d28a:	e002      	b.n	801d292 <MQTTConnect+0xf2>
        goto exit;
 801d28c:	bf00      	nop
 801d28e:	e000      	b.n	801d292 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801d290:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801d292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d294:	2b00      	cmp	r3, #0
 801d296:	d102      	bne.n	801d29e <MQTTConnect+0xfe>
        c->isconnected = 1;
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	2201      	movs	r2, #1
 801d29c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801d29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801d2a0:	4618      	mov	r0, r3
 801d2a2:	3778      	adds	r7, #120	; 0x78
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	bd80      	pop	{r7, pc}
 801d2a8:	08032bc4 	.word	0x08032bc4

0801d2ac <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2ae:	b097      	sub	sp, #92	; 0x5c
 801d2b0:	af08      	add	r7, sp, #32
 801d2b2:	60f8      	str	r0, [r7, #12]
 801d2b4:	60b9      	str	r1, [r7, #8]
 801d2b6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d2b8:	f04f 33ff 	mov.w	r3, #4294967295
 801d2bc:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801d2be:	2300      	movs	r3, #0
 801d2c0:	61fb      	str	r3, [r7, #28]
 801d2c2:	2300      	movs	r3, #0
 801d2c4:	623b      	str	r3, [r7, #32]
 801d2c6:	2300      	movs	r3, #0
 801d2c8:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801d2ca:	68bb      	ldr	r3, [r7, #8]
 801d2cc:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	6a1b      	ldr	r3, [r3, #32]
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	f000 809b 	beq.w	801d412 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801d2dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	f000 f8a2 	bl	801d42a <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d2e6:	68fb      	ldr	r3, [r7, #12]
 801d2e8:	685a      	ldr	r2, [r3, #4]
 801d2ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2ee:	4611      	mov	r1, r2
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	f000 f8bd 	bl	801d470 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	781b      	ldrb	r3, [r3, #0]
 801d2fa:	2b01      	cmp	r3, #1
 801d2fc:	d003      	beq.n	801d306 <MQTTPublish+0x5a>
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	781b      	ldrb	r3, [r3, #0]
 801d302:	2b02      	cmp	r3, #2
 801d304:	d106      	bne.n	801d314 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801d306:	68f8      	ldr	r0, [r7, #12]
 801d308:	f7ff fbe2 	bl	801cad0 <getNextPacketId>
 801d30c:	4603      	mov	r3, r0
 801d30e:	b29a      	uxth	r2, r3
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	691b      	ldr	r3, [r3, #16]
 801d318:	603b      	str	r3, [r7, #0]
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	689b      	ldr	r3, [r3, #8]
 801d31e:	469c      	mov	ip, r3
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	781b      	ldrb	r3, [r3, #0]
 801d324:	469e      	mov	lr, r3
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	785d      	ldrb	r5, [r3, #1]
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	689b      	ldr	r3, [r3, #8]
 801d332:	687a      	ldr	r2, [r7, #4]
 801d334:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d336:	9206      	str	r2, [sp, #24]
 801d338:	9305      	str	r3, [sp, #20]
 801d33a:	ac02      	add	r4, sp, #8
 801d33c:	f107 031c 	add.w	r3, r7, #28
 801d340:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d348:	9601      	str	r6, [sp, #4]
 801d34a:	9500      	str	r5, [sp, #0]
 801d34c:	4673      	mov	r3, lr
 801d34e:	2200      	movs	r2, #0
 801d350:	4661      	mov	r1, ip
 801d352:	6838      	ldr	r0, [r7, #0]
 801d354:	f000 fe43 	bl	801dfde <MQTTSerialize_publish>
 801d358:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	dd5a      	ble.n	801d416 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801d360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d364:	461a      	mov	r2, r3
 801d366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d368:	68f8      	ldr	r0, [r7, #12]
 801d36a:	f7ff fbca 	bl	801cb02 <sendPacket>
 801d36e:	6378      	str	r0, [r7, #52]	; 0x34
 801d370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d372:	2b00      	cmp	r3, #0
 801d374:	d151      	bne.n	801d41a <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	781b      	ldrb	r3, [r3, #0]
 801d37a:	2b01      	cmp	r3, #1
 801d37c:	d122      	bne.n	801d3c4 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801d37e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d382:	461a      	mov	r2, r3
 801d384:	2104      	movs	r1, #4
 801d386:	68f8      	ldr	r0, [r7, #12]
 801d388:	f7ff feea 	bl	801d160 <waitfor>
 801d38c:	4603      	mov	r3, r0
 801d38e:	2b04      	cmp	r3, #4
 801d390:	d114      	bne.n	801d3bc <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	695c      	ldr	r4, [r3, #20]
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	68db      	ldr	r3, [r3, #12]
 801d39a:	f107 021a 	add.w	r2, r7, #26
 801d39e:	f107 0119 	add.w	r1, r7, #25
 801d3a2:	f107 0018 	add.w	r0, r7, #24
 801d3a6:	9300      	str	r3, [sp, #0]
 801d3a8:	4623      	mov	r3, r4
 801d3aa:	f000 fba7 	bl	801dafc <MQTTDeserialize_ack>
 801d3ae:	4603      	mov	r3, r0
 801d3b0:	2b01      	cmp	r3, #1
 801d3b2:	d035      	beq.n	801d420 <MQTTPublish+0x174>
                rc = FAILURE;
 801d3b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d3b8:	637b      	str	r3, [r7, #52]	; 0x34
 801d3ba:	e031      	b.n	801d420 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d3c0:	637b      	str	r3, [r7, #52]	; 0x34
 801d3c2:	e02d      	b.n	801d420 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	2b02      	cmp	r3, #2
 801d3ca:	d128      	bne.n	801d41e <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801d3cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d3d0:	461a      	mov	r2, r3
 801d3d2:	2107      	movs	r1, #7
 801d3d4:	68f8      	ldr	r0, [r7, #12]
 801d3d6:	f7ff fec3 	bl	801d160 <waitfor>
 801d3da:	4603      	mov	r3, r0
 801d3dc:	2b07      	cmp	r3, #7
 801d3de:	d114      	bne.n	801d40a <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	695c      	ldr	r4, [r3, #20]
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	68db      	ldr	r3, [r3, #12]
 801d3e8:	f107 0216 	add.w	r2, r7, #22
 801d3ec:	f107 0115 	add.w	r1, r7, #21
 801d3f0:	f107 0014 	add.w	r0, r7, #20
 801d3f4:	9300      	str	r3, [sp, #0]
 801d3f6:	4623      	mov	r3, r4
 801d3f8:	f000 fb80 	bl	801dafc <MQTTDeserialize_ack>
 801d3fc:	4603      	mov	r3, r0
 801d3fe:	2b01      	cmp	r3, #1
 801d400:	d00e      	beq.n	801d420 <MQTTPublish+0x174>
                rc = FAILURE;
 801d402:	f04f 33ff 	mov.w	r3, #4294967295
 801d406:	637b      	str	r3, [r7, #52]	; 0x34
 801d408:	e00a      	b.n	801d420 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d40a:	f04f 33ff 	mov.w	r3, #4294967295
 801d40e:	637b      	str	r3, [r7, #52]	; 0x34
 801d410:	e006      	b.n	801d420 <MQTTPublish+0x174>
		goto exit;
 801d412:	bf00      	nop
 801d414:	e004      	b.n	801d420 <MQTTPublish+0x174>
        goto exit;
 801d416:	bf00      	nop
 801d418:	e002      	b.n	801d420 <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d41a:	bf00      	nop
 801d41c:	e000      	b.n	801d420 <MQTTPublish+0x174>
    }

exit:
 801d41e:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d422:	4618      	mov	r0, r3
 801d424:	373c      	adds	r7, #60	; 0x3c
 801d426:	46bd      	mov	sp, r7
 801d428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d42a <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d42a:	b480      	push	{r7}
 801d42c:	b083      	sub	sp, #12
 801d42e:	af00      	add	r7, sp, #0
 801d430:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	2200      	movs	r2, #0
 801d436:	605a      	str	r2, [r3, #4]
}
 801d438:	bf00      	nop
 801d43a:	370c      	adds	r7, #12
 801d43c:	46bd      	mov	sp, r7
 801d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d442:	4770      	bx	lr

0801d444 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d444:	b480      	push	{r7}
 801d446:	b085      	sub	sp, #20
 801d448:	af00      	add	r7, sp, #0
 801d44a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	685a      	ldr	r2, [r3, #4]
 801d450:	4b06      	ldr	r3, [pc, #24]	; (801d46c <TimerIsExpired+0x28>)
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	1ad3      	subs	r3, r2, r3
 801d456:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	0fdb      	lsrs	r3, r3, #31
 801d45c:	b2db      	uxtb	r3, r3
}
 801d45e:	4618      	mov	r0, r3
 801d460:	3714      	adds	r7, #20
 801d462:	46bd      	mov	sp, r7
 801d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d468:	4770      	bx	lr
 801d46a:	bf00      	nop
 801d46c:	200009d0 	.word	0x200009d0

0801d470 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d470:	b480      	push	{r7}
 801d472:	b083      	sub	sp, #12
 801d474:	af00      	add	r7, sp, #0
 801d476:	6078      	str	r0, [r7, #4]
 801d478:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d47a:	4b06      	ldr	r3, [pc, #24]	; (801d494 <TimerCountdownMS+0x24>)
 801d47c:	681a      	ldr	r2, [r3, #0]
 801d47e:	683b      	ldr	r3, [r7, #0]
 801d480:	441a      	add	r2, r3
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	605a      	str	r2, [r3, #4]
}
 801d486:	bf00      	nop
 801d488:	370c      	adds	r7, #12
 801d48a:	46bd      	mov	sp, r7
 801d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d490:	4770      	bx	lr
 801d492:	bf00      	nop
 801d494:	200009d0 	.word	0x200009d0

0801d498 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d498:	b480      	push	{r7}
 801d49a:	b083      	sub	sp, #12
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	6078      	str	r0, [r7, #4]
 801d4a0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d4a2:	683b      	ldr	r3, [r7, #0]
 801d4a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d4a8:	fb03 f202 	mul.w	r2, r3, r2
 801d4ac:	4b05      	ldr	r3, [pc, #20]	; (801d4c4 <TimerCountdown+0x2c>)
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	441a      	add	r2, r3
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	605a      	str	r2, [r3, #4]
}
 801d4b6:	bf00      	nop
 801d4b8:	370c      	adds	r7, #12
 801d4ba:	46bd      	mov	sp, r7
 801d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4c0:	4770      	bx	lr
 801d4c2:	bf00      	nop
 801d4c4:	200009d0 	.word	0x200009d0

0801d4c8 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d4c8:	b480      	push	{r7}
 801d4ca:	b085      	sub	sp, #20
 801d4cc:	af00      	add	r7, sp, #0
 801d4ce:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	685a      	ldr	r2, [r3, #4]
 801d4d4:	4b06      	ldr	r3, [pc, #24]	; (801d4f0 <TimerLeftMS+0x28>)
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	1ad3      	subs	r3, r2, r3
 801d4da:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	3714      	adds	r7, #20
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ec:	4770      	bx	lr
 801d4ee:	bf00      	nop
 801d4f0:	200009d0 	.word	0x200009d0

0801d4f4 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d4f4:	b480      	push	{r7}
 801d4f6:	b083      	sub	sp, #12
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	6078      	str	r0, [r7, #4]
 801d4fc:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	683a      	ldr	r2, [r7, #0]
 801d502:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	4a07      	ldr	r2, [pc, #28]	; (801d524 <NewNetwork+0x30>)
 801d508:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	4a06      	ldr	r2, [pc, #24]	; (801d528 <NewNetwork+0x34>)
 801d50e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	4a06      	ldr	r2, [pc, #24]	; (801d52c <NewNetwork+0x38>)
 801d514:	60da      	str	r2, [r3, #12]
}
 801d516:	bf00      	nop
 801d518:	370c      	adds	r7, #12
 801d51a:	46bd      	mov	sp, r7
 801d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d520:	4770      	bx	lr
 801d522:	bf00      	nop
 801d524:	0801d531 	.word	0x0801d531
 801d528:	0801d58b 	.word	0x0801d58b
 801d52c:	0801d5d3 	.word	0x0801d5d3

0801d530 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d530:	b580      	push	{r7, lr}
 801d532:	b084      	sub	sp, #16
 801d534:	af00      	add	r7, sp, #0
 801d536:	60f8      	str	r0, [r7, #12]
 801d538:	60b9      	str	r1, [r7, #8]
 801d53a:	607a      	str	r2, [r7, #4]
 801d53c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	009b      	lsls	r3, r3, #2
 801d544:	3301      	adds	r3, #1
 801d546:	00db      	lsls	r3, r3, #3
 801d548:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d54c:	4618      	mov	r0, r3
 801d54e:	f7fb f883 	bl	8018658 <WIZCHIP_READ>
 801d552:	4603      	mov	r3, r0
 801d554:	2b17      	cmp	r3, #23
 801d556:	d113      	bne.n	801d580 <w5x00_read+0x50>
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	681b      	ldr	r3, [r3, #0]
 801d55c:	b2db      	uxtb	r3, r3
 801d55e:	4618      	mov	r0, r3
 801d560:	f7fb fa1f 	bl	80189a2 <getSn_RX_RSR>
 801d564:	4603      	mov	r3, r0
 801d566:	2b00      	cmp	r3, #0
 801d568:	d00a      	beq.n	801d580 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	681b      	ldr	r3, [r3, #0]
 801d56e:	b2db      	uxtb	r3, r3
 801d570:	687a      	ldr	r2, [r7, #4]
 801d572:	b292      	uxth	r2, r2
 801d574:	68b9      	ldr	r1, [r7, #8]
 801d576:	4618      	mov	r0, r3
 801d578:	f7fb ff86 	bl	8019488 <recv>
 801d57c:	4603      	mov	r3, r0
 801d57e:	e000      	b.n	801d582 <w5x00_read+0x52>

	return SOCK_ERROR;
 801d580:	2300      	movs	r3, #0
}
 801d582:	4618      	mov	r0, r3
 801d584:	3710      	adds	r7, #16
 801d586:	46bd      	mov	sp, r7
 801d588:	bd80      	pop	{r7, pc}

0801d58a <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d58a:	b580      	push	{r7, lr}
 801d58c:	b084      	sub	sp, #16
 801d58e:	af00      	add	r7, sp, #0
 801d590:	60f8      	str	r0, [r7, #12]
 801d592:	60b9      	str	r1, [r7, #8]
 801d594:	607a      	str	r2, [r7, #4]
 801d596:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	009b      	lsls	r3, r3, #2
 801d59e:	3301      	adds	r3, #1
 801d5a0:	00db      	lsls	r3, r3, #3
 801d5a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d5a6:	4618      	mov	r0, r3
 801d5a8:	f7fb f856 	bl	8018658 <WIZCHIP_READ>
 801d5ac:	4603      	mov	r3, r0
 801d5ae:	2b17      	cmp	r3, #23
 801d5b0:	d10a      	bne.n	801d5c8 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	b2db      	uxtb	r3, r3
 801d5b8:	687a      	ldr	r2, [r7, #4]
 801d5ba:	b292      	uxth	r2, r2
 801d5bc:	68b9      	ldr	r1, [r7, #8]
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f7fb fe68 	bl	8019294 <send>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	e000      	b.n	801d5ca <w5x00_write+0x40>

	return SOCK_ERROR;
 801d5c8:	2300      	movs	r3, #0
}
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	3710      	adds	r7, #16
 801d5ce:	46bd      	mov	sp, r7
 801d5d0:	bd80      	pop	{r7, pc}

0801d5d2 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d5d2:	b580      	push	{r7, lr}
 801d5d4:	b082      	sub	sp, #8
 801d5d6:	af00      	add	r7, sp, #0
 801d5d8:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	b2db      	uxtb	r3, r3
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f7fb fde1 	bl	80191a8 <disconnect>
}
 801d5e6:	bf00      	nop
 801d5e8:	3708      	adds	r7, #8
 801d5ea:	46bd      	mov	sp, r7
 801d5ec:	bd80      	pop	{r7, pc}

0801d5ee <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d5ee:	b580      	push	{r7, lr}
 801d5f0:	b086      	sub	sp, #24
 801d5f2:	af00      	add	r7, sp, #0
 801d5f4:	60f8      	str	r0, [r7, #12]
 801d5f6:	60b9      	str	r1, [r7, #8]
 801d5f8:	4613      	mov	r3, r2
 801d5fa:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d5fc:	f243 0339 	movw	r3, #12345	; 0x3039
 801d600:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	b2d8      	uxtb	r0, r3
 801d608:	8afa      	ldrh	r2, [r7, #22]
 801d60a:	2300      	movs	r3, #0
 801d60c:	2101      	movs	r1, #1
 801d60e:	f7fb fb13 	bl	8018c38 <socket>
 801d612:	4603      	mov	r3, r0
 801d614:	461a      	mov	r2, r3
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	429a      	cmp	r2, r3
 801d61c:	d001      	beq.n	801d622 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d61e:	2300      	movs	r3, #0
 801d620:	e00d      	b.n	801d63e <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	b2db      	uxtb	r3, r3
 801d628:	88fa      	ldrh	r2, [r7, #6]
 801d62a:	68b9      	ldr	r1, [r7, #8]
 801d62c:	4618      	mov	r0, r3
 801d62e:	f7fb fcdf 	bl	8018ff0 <connect>
 801d632:	4603      	mov	r3, r0
 801d634:	2b01      	cmp	r3, #1
 801d636:	d001      	beq.n	801d63c <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d638:	2300      	movs	r3, #0
 801d63a:	e000      	b.n	801d63e <ConnectNetwork+0x50>

	return SOCK_OK;
 801d63c:	2301      	movs	r3, #1
}
 801d63e:	4618      	mov	r0, r3
 801d640:	3718      	adds	r7, #24
 801d642:	46bd      	mov	sp, r7
 801d644:	bd80      	pop	{r7, pc}

0801d646 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d646:	b590      	push	{r4, r7, lr}
 801d648:	b085      	sub	sp, #20
 801d64a:	af00      	add	r7, sp, #0
 801d64c:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d64e:	2300      	movs	r3, #0
 801d650:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	7a1b      	ldrb	r3, [r3, #8]
 801d656:	2b03      	cmp	r3, #3
 801d658:	d102      	bne.n	801d660 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d65a:	230c      	movs	r3, #12
 801d65c:	60fb      	str	r3, [r7, #12]
 801d65e:	e005      	b.n	801d66c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	7a1b      	ldrb	r3, [r3, #8]
 801d664:	2b04      	cmp	r3, #4
 801d666:	d101      	bne.n	801d66c <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d668:	230a      	movs	r3, #10
 801d66a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	330c      	adds	r3, #12
 801d670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d674:	f000 fc43 	bl	801defe <MQTTstrlen>
 801d678:	4603      	mov	r3, r0
 801d67a:	3302      	adds	r3, #2
 801d67c:	68fa      	ldr	r2, [r7, #12]
 801d67e:	4413      	add	r3, r2
 801d680:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	7edb      	ldrb	r3, [r3, #27]
 801d686:	2b00      	cmp	r3, #0
 801d688:	d013      	beq.n	801d6b2 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	3324      	adds	r3, #36	; 0x24
 801d68e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d692:	f000 fc34 	bl	801defe <MQTTstrlen>
 801d696:	4603      	mov	r3, r0
 801d698:	1c9c      	adds	r4, r3, #2
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	3330      	adds	r3, #48	; 0x30
 801d69e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d6a2:	f000 fc2c 	bl	801defe <MQTTstrlen>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	4423      	add	r3, r4
 801d6aa:	3302      	adds	r3, #2
 801d6ac:	68fa      	ldr	r2, [r7, #12]
 801d6ae:	4413      	add	r3, r2
 801d6b0:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d103      	bne.n	801d6c2 <MQTTSerialize_connectLength+0x7c>
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d00a      	beq.n	801d6d8 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	3340      	adds	r3, #64	; 0x40
 801d6c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d6ca:	f000 fc18 	bl	801defe <MQTTstrlen>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	3302      	adds	r3, #2
 801d6d2:	68fa      	ldr	r2, [r7, #12]
 801d6d4:	4413      	add	r3, r2
 801d6d6:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d103      	bne.n	801d6e8 <MQTTSerialize_connectLength+0xa2>
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d00a      	beq.n	801d6fe <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	334c      	adds	r3, #76	; 0x4c
 801d6ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d6f0:	f000 fc05 	bl	801defe <MQTTstrlen>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	3302      	adds	r3, #2
 801d6f8:	68fa      	ldr	r2, [r7, #12]
 801d6fa:	4413      	add	r3, r2
 801d6fc:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801d6fe:	68fb      	ldr	r3, [r7, #12]
}
 801d700:	4618      	mov	r0, r3
 801d702:	3714      	adds	r7, #20
 801d704:	46bd      	mov	sp, r7
 801d706:	bd90      	pop	{r4, r7, pc}

0801d708 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801d708:	b580      	push	{r7, lr}
 801d70a:	b08a      	sub	sp, #40	; 0x28
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	60f8      	str	r0, [r7, #12]
 801d710:	60b9      	str	r1, [r7, #8]
 801d712:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801d718:	2300      	movs	r3, #0
 801d71a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801d71c:	2300      	movs	r3, #0
 801d71e:	617b      	str	r3, [r7, #20]
	int len = 0;
 801d720:	2300      	movs	r3, #0
 801d722:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801d724:	f04f 33ff 	mov.w	r3, #4294967295
 801d728:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801d72a:	6878      	ldr	r0, [r7, #4]
 801d72c:	f7ff ff8b 	bl	801d646 <MQTTSerialize_connectLength>
 801d730:	6238      	str	r0, [r7, #32]
 801d732:	6a38      	ldr	r0, [r7, #32]
 801d734:	f000 fa98 	bl	801dc68 <MQTTPacket_len>
 801d738:	4602      	mov	r2, r0
 801d73a:	68bb      	ldr	r3, [r7, #8]
 801d73c:	4293      	cmp	r3, r2
 801d73e:	da03      	bge.n	801d748 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d740:	f06f 0301 	mvn.w	r3, #1
 801d744:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801d746:	e0c2      	b.n	801d8ce <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801d748:	2300      	movs	r3, #0
 801d74a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801d74c:	7e3b      	ldrb	r3, [r7, #24]
 801d74e:	2201      	movs	r2, #1
 801d750:	f362 1307 	bfi	r3, r2, #4, #4
 801d754:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d756:	7e3a      	ldrb	r2, [r7, #24]
 801d758:	f107 031c 	add.w	r3, r7, #28
 801d75c:	4611      	mov	r1, r2
 801d75e:	4618      	mov	r0, r3
 801d760:	f000 fb11 	bl	801dd86 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801d764:	69fb      	ldr	r3, [r7, #28]
 801d766:	6a39      	ldr	r1, [r7, #32]
 801d768:	4618      	mov	r0, r3
 801d76a:	f000 fa12 	bl	801db92 <MQTTPacket_encode>
 801d76e:	4602      	mov	r2, r0
 801d770:	69fb      	ldr	r3, [r7, #28]
 801d772:	4413      	add	r3, r2
 801d774:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	7a1b      	ldrb	r3, [r3, #8]
 801d77a:	2b04      	cmp	r3, #4
 801d77c:	d10c      	bne.n	801d798 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801d77e:	f107 031c 	add.w	r3, r7, #28
 801d782:	4955      	ldr	r1, [pc, #340]	; (801d8d8 <MQTTSerialize_connect+0x1d0>)
 801d784:	4618      	mov	r0, r3
 801d786:	f000 fb3c 	bl	801de02 <writeCString>
		writeChar(&ptr, (char) 4);
 801d78a:	f107 031c 	add.w	r3, r7, #28
 801d78e:	2104      	movs	r1, #4
 801d790:	4618      	mov	r0, r3
 801d792:	f000 faf8 	bl	801dd86 <writeChar>
 801d796:	e00b      	b.n	801d7b0 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801d798:	f107 031c 	add.w	r3, r7, #28
 801d79c:	494f      	ldr	r1, [pc, #316]	; (801d8dc <MQTTSerialize_connect+0x1d4>)
 801d79e:	4618      	mov	r0, r3
 801d7a0:	f000 fb2f 	bl	801de02 <writeCString>
		writeChar(&ptr, (char) 3);
 801d7a4:	f107 031c 	add.w	r3, r7, #28
 801d7a8:	2103      	movs	r1, #3
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	f000 faeb 	bl	801dd86 <writeChar>
	}

	flags.all = 0;
 801d7b0:	2300      	movs	r3, #0
 801d7b2:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	7e9b      	ldrb	r3, [r3, #26]
 801d7b8:	f003 0301 	and.w	r3, r3, #1
 801d7bc:	b2da      	uxtb	r2, r3
 801d7be:	7d3b      	ldrb	r3, [r7, #20]
 801d7c0:	f362 0341 	bfi	r3, r2, #1, #1
 801d7c4:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	7edb      	ldrb	r3, [r3, #27]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	bf14      	ite	ne
 801d7ce:	2301      	movne	r3, #1
 801d7d0:	2300      	moveq	r3, #0
 801d7d2:	b2da      	uxtb	r2, r3
 801d7d4:	7d3b      	ldrb	r3, [r7, #20]
 801d7d6:	f362 0382 	bfi	r3, r2, #2, #1
 801d7da:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801d7dc:	7d3b      	ldrb	r3, [r7, #20]
 801d7de:	f003 0304 	and.w	r3, r3, #4
 801d7e2:	b2db      	uxtb	r3, r3
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d013      	beq.n	801d810 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d7ee:	f003 0303 	and.w	r3, r3, #3
 801d7f2:	b2da      	uxtb	r2, r3
 801d7f4:	7d3b      	ldrb	r3, [r7, #20]
 801d7f6:	f362 03c4 	bfi	r3, r2, #3, #2
 801d7fa:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d802:	f003 0301 	and.w	r3, r3, #1
 801d806:	b2da      	uxtb	r2, r3
 801d808:	7d3b      	ldrb	r3, [r7, #20]
 801d80a:	f362 1345 	bfi	r3, r2, #5, #1
 801d80e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d814:	2b00      	cmp	r3, #0
 801d816:	d103      	bne.n	801d820 <MQTTSerialize_connect+0x118>
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d003      	beq.n	801d828 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801d820:	7d3b      	ldrb	r3, [r7, #20]
 801d822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d826:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d103      	bne.n	801d838 <MQTTSerialize_connect+0x130>
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d834:	2b00      	cmp	r3, #0
 801d836:	d003      	beq.n	801d840 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801d838:	7d3b      	ldrb	r3, [r7, #20]
 801d83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d83e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801d840:	7d3a      	ldrb	r2, [r7, #20]
 801d842:	f107 031c 	add.w	r3, r7, #28
 801d846:	4611      	mov	r1, r2
 801d848:	4618      	mov	r0, r3
 801d84a:	f000 fa9c 	bl	801dd86 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	8b1b      	ldrh	r3, [r3, #24]
 801d852:	461a      	mov	r2, r3
 801d854:	f107 031c 	add.w	r3, r7, #28
 801d858:	4611      	mov	r1, r2
 801d85a:	4618      	mov	r0, r3
 801d85c:	f000 faa8 	bl	801ddb0 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	f107 001c 	add.w	r0, r7, #28
 801d866:	330c      	adds	r3, #12
 801d868:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d86a:	f000 fae9 	bl	801de40 <writeMQTTString>
	if (options->willFlag)
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	7edb      	ldrb	r3, [r3, #27]
 801d872:	2b00      	cmp	r3, #0
 801d874:	d00d      	beq.n	801d892 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	f107 001c 	add.w	r0, r7, #28
 801d87c:	3324      	adds	r3, #36	; 0x24
 801d87e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d880:	f000 fade 	bl	801de40 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	f107 001c 	add.w	r0, r7, #28
 801d88a:	3330      	adds	r3, #48	; 0x30
 801d88c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d88e:	f000 fad7 	bl	801de40 <writeMQTTString>
	}
	if (flags.bits.username)
 801d892:	7d3b      	ldrb	r3, [r7, #20]
 801d894:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d898:	b2db      	uxtb	r3, r3
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	d006      	beq.n	801d8ac <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	f107 001c 	add.w	r0, r7, #28
 801d8a4:	3340      	adds	r3, #64	; 0x40
 801d8a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d8a8:	f000 faca 	bl	801de40 <writeMQTTString>
	if (flags.bits.password)
 801d8ac:	7d3b      	ldrb	r3, [r7, #20]
 801d8ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d8b2:	b2db      	uxtb	r3, r3
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d006      	beq.n	801d8c6 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	f107 001c 	add.w	r0, r7, #28
 801d8be:	334c      	adds	r3, #76	; 0x4c
 801d8c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d8c2:	f000 fabd 	bl	801de40 <writeMQTTString>

	rc = ptr - buf;
 801d8c6:	69fa      	ldr	r2, [r7, #28]
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	1ad3      	subs	r3, r2, r3
 801d8cc:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	3728      	adds	r7, #40	; 0x28
 801d8d4:	46bd      	mov	sp, r7
 801d8d6:	bd80      	pop	{r7, pc}
 801d8d8:	08032c1c 	.word	0x08032c1c
 801d8dc:	08032c24 	.word	0x08032c24

0801d8e0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b08a      	sub	sp, #40	; 0x28
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	60f8      	str	r0, [r7, #12]
 801d8e8:	60b9      	str	r1, [r7, #8]
 801d8ea:	607a      	str	r2, [r7, #4]
 801d8ec:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d8f6:	2300      	movs	r3, #0
 801d8f8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801d8fe:	2300      	movs	r3, #0
 801d900:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d902:	f107 0318 	add.w	r3, r7, #24
 801d906:	4618      	mov	r0, r3
 801d908:	f000 fa29 	bl	801dd5e <readChar>
 801d90c:	4603      	mov	r3, r0
 801d90e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801d910:	7f3b      	ldrb	r3, [r7, #28]
 801d912:	f023 030f 	bic.w	r3, r3, #15
 801d916:	b2db      	uxtb	r3, r3
 801d918:	2b20      	cmp	r3, #32
 801d91a:	d12e      	bne.n	801d97a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d91c:	69bb      	ldr	r3, [r7, #24]
 801d91e:	f107 0214 	add.w	r2, r7, #20
 801d922:	4611      	mov	r1, r2
 801d924:	4618      	mov	r0, r3
 801d926:	f000 f9e9 	bl	801dcfc <MQTTPacket_decodeBuf>
 801d92a:	6278      	str	r0, [r7, #36]	; 0x24
 801d92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d92e:	69bb      	ldr	r3, [r7, #24]
 801d930:	4413      	add	r3, r2
 801d932:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d934:	69bb      	ldr	r3, [r7, #24]
 801d936:	697a      	ldr	r2, [r7, #20]
 801d938:	4413      	add	r3, r2
 801d93a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801d93c:	69bb      	ldr	r3, [r7, #24]
 801d93e:	6a3a      	ldr	r2, [r7, #32]
 801d940:	1ad3      	subs	r3, r2, r3
 801d942:	2b01      	cmp	r3, #1
 801d944:	dd1b      	ble.n	801d97e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801d946:	f107 0318 	add.w	r3, r7, #24
 801d94a:	4618      	mov	r0, r3
 801d94c:	f000 fa07 	bl	801dd5e <readChar>
 801d950:	4603      	mov	r3, r0
 801d952:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801d954:	7c3b      	ldrb	r3, [r7, #16]
 801d956:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801d95a:	b2db      	uxtb	r3, r3
 801d95c:	461a      	mov	r2, r3
 801d95e:	68fb      	ldr	r3, [r7, #12]
 801d960:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801d962:	f107 0318 	add.w	r3, r7, #24
 801d966:	4618      	mov	r0, r3
 801d968:	f000 f9f9 	bl	801dd5e <readChar>
 801d96c:	4603      	mov	r3, r0
 801d96e:	461a      	mov	r2, r3
 801d970:	68bb      	ldr	r3, [r7, #8]
 801d972:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801d974:	2301      	movs	r3, #1
 801d976:	627b      	str	r3, [r7, #36]	; 0x24
 801d978:	e002      	b.n	801d980 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d97a:	bf00      	nop
 801d97c:	e000      	b.n	801d980 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d97e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d982:	4618      	mov	r0, r3
 801d984:	3728      	adds	r7, #40	; 0x28
 801d986:	46bd      	mov	sp, r7
 801d988:	bd80      	pop	{r7, pc}

0801d98a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801d98a:	b580      	push	{r7, lr}
 801d98c:	b088      	sub	sp, #32
 801d98e:	af00      	add	r7, sp, #0
 801d990:	60f8      	str	r0, [r7, #12]
 801d992:	60b9      	str	r1, [r7, #8]
 801d994:	4613      	mov	r3, r2
 801d996:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801d998:	2300      	movs	r3, #0
 801d99a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801d99c:	f04f 33ff 	mov.w	r3, #4294967295
 801d9a0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801d9a6:	68bb      	ldr	r3, [r7, #8]
 801d9a8:	2b01      	cmp	r3, #1
 801d9aa:	dc03      	bgt.n	801d9b4 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d9ac:	f06f 0301 	mvn.w	r3, #1
 801d9b0:	61fb      	str	r3, [r7, #28]
		goto exit;
 801d9b2:	e01d      	b.n	801d9f0 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801d9b8:	79fb      	ldrb	r3, [r7, #7]
 801d9ba:	f003 030f 	and.w	r3, r3, #15
 801d9be:	b2da      	uxtb	r2, r3
 801d9c0:	7e3b      	ldrb	r3, [r7, #24]
 801d9c2:	f362 1307 	bfi	r3, r2, #4, #4
 801d9c6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d9c8:	7e3a      	ldrb	r2, [r7, #24]
 801d9ca:	f107 0314 	add.w	r3, r7, #20
 801d9ce:	4611      	mov	r1, r2
 801d9d0:	4618      	mov	r0, r3
 801d9d2:	f000 f9d8 	bl	801dd86 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801d9d6:	697b      	ldr	r3, [r7, #20]
 801d9d8:	2100      	movs	r1, #0
 801d9da:	4618      	mov	r0, r3
 801d9dc:	f000 f8d9 	bl	801db92 <MQTTPacket_encode>
 801d9e0:	4602      	mov	r2, r0
 801d9e2:	697b      	ldr	r3, [r7, #20]
 801d9e4:	4413      	add	r3, r2
 801d9e6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801d9e8:	697a      	ldr	r2, [r7, #20]
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	1ad3      	subs	r3, r2, r3
 801d9ee:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d9f0:	69fb      	ldr	r3, [r7, #28]
}
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	3720      	adds	r7, #32
 801d9f6:	46bd      	mov	sp, r7
 801d9f8:	bd80      	pop	{r7, pc}

0801d9fa <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801d9fa:	b580      	push	{r7, lr}
 801d9fc:	b082      	sub	sp, #8
 801d9fe:	af00      	add	r7, sp, #0
 801da00:	6078      	str	r0, [r7, #4]
 801da02:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801da04:	220c      	movs	r2, #12
 801da06:	6839      	ldr	r1, [r7, #0]
 801da08:	6878      	ldr	r0, [r7, #4]
 801da0a:	f7ff ffbe 	bl	801d98a <MQTTSerialize_zero>
 801da0e:	4603      	mov	r3, r0
}
 801da10:	4618      	mov	r0, r3
 801da12:	3708      	adds	r7, #8
 801da14:	46bd      	mov	sp, r7
 801da16:	bd80      	pop	{r7, pc}

0801da18 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801da18:	b580      	push	{r7, lr}
 801da1a:	b08a      	sub	sp, #40	; 0x28
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	60f8      	str	r0, [r7, #12]
 801da20:	60b9      	str	r1, [r7, #8]
 801da22:	607a      	str	r2, [r7, #4]
 801da24:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801da26:	2300      	movs	r3, #0
 801da28:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801da2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801da2c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801da2e:	2300      	movs	r3, #0
 801da30:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801da32:	2300      	movs	r3, #0
 801da34:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801da36:	2300      	movs	r3, #0
 801da38:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801da3a:	f107 0318 	add.w	r3, r7, #24
 801da3e:	4618      	mov	r0, r3
 801da40:	f000 f98d 	bl	801dd5e <readChar>
 801da44:	4603      	mov	r3, r0
 801da46:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801da48:	7f3b      	ldrb	r3, [r7, #28]
 801da4a:	f023 030f 	bic.w	r3, r3, #15
 801da4e:	b2db      	uxtb	r3, r3
 801da50:	2b30      	cmp	r3, #48	; 0x30
 801da52:	d14b      	bne.n	801daec <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801da54:	7f3b      	ldrb	r3, [r7, #28]
 801da56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801da5a:	b2db      	uxtb	r3, r3
 801da5c:	461a      	mov	r2, r3
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801da62:	7f3b      	ldrb	r3, [r7, #28]
 801da64:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801da68:	b2db      	uxtb	r3, r3
 801da6a:	461a      	mov	r2, r3
 801da6c:	68bb      	ldr	r3, [r7, #8]
 801da6e:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801da70:	7f3b      	ldrb	r3, [r7, #28]
 801da72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801da76:	b2db      	uxtb	r3, r3
 801da78:	461a      	mov	r2, r3
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801da7e:	69bb      	ldr	r3, [r7, #24]
 801da80:	f107 0214 	add.w	r2, r7, #20
 801da84:	4611      	mov	r1, r2
 801da86:	4618      	mov	r0, r3
 801da88:	f000 f938 	bl	801dcfc <MQTTPacket_decodeBuf>
 801da8c:	6278      	str	r0, [r7, #36]	; 0x24
 801da8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801da90:	69bb      	ldr	r3, [r7, #24]
 801da92:	4413      	add	r3, r2
 801da94:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801da96:	69bb      	ldr	r3, [r7, #24]
 801da98:	697a      	ldr	r2, [r7, #20]
 801da9a:	4413      	add	r3, r2
 801da9c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801da9e:	f107 0318 	add.w	r3, r7, #24
 801daa2:	6a3a      	ldr	r2, [r7, #32]
 801daa4:	4619      	mov	r1, r3
 801daa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801daa8:	f000 f9f8 	bl	801de9c <readMQTTLenString>
 801daac:	4603      	mov	r3, r0
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d01e      	beq.n	801daf0 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801dab2:	69bb      	ldr	r3, [r7, #24]
 801dab4:	6a3a      	ldr	r2, [r7, #32]
 801dab6:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801dab8:	2b00      	cmp	r3, #0
 801daba:	db19      	blt.n	801daf0 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801dabc:	68bb      	ldr	r3, [r7, #8]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	dd08      	ble.n	801dad6 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801dac4:	f107 0318 	add.w	r3, r7, #24
 801dac8:	4618      	mov	r0, r3
 801daca:	f000 f92d 	bl	801dd28 <readInt>
 801dace:	4603      	mov	r3, r0
 801dad0:	b29a      	uxth	r2, r3
 801dad2:	683b      	ldr	r3, [r7, #0]
 801dad4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801dad6:	69bb      	ldr	r3, [r7, #24]
 801dad8:	6a3a      	ldr	r2, [r7, #32]
 801dada:	1ad2      	subs	r2, r2, r3
 801dadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dade:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801dae0:	69ba      	ldr	r2, [r7, #24]
 801dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dae4:	601a      	str	r2, [r3, #0]
	rc = 1;
 801dae6:	2301      	movs	r3, #1
 801dae8:	627b      	str	r3, [r7, #36]	; 0x24
 801daea:	e002      	b.n	801daf2 <MQTTDeserialize_publish+0xda>
		goto exit;
 801daec:	bf00      	nop
 801daee:	e000      	b.n	801daf2 <MQTTDeserialize_publish+0xda>
		goto exit;
 801daf0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801daf4:	4618      	mov	r0, r3
 801daf6:	3728      	adds	r7, #40	; 0x28
 801daf8:	46bd      	mov	sp, r7
 801dafa:	bd80      	pop	{r7, pc}

0801dafc <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801dafc:	b580      	push	{r7, lr}
 801dafe:	b08a      	sub	sp, #40	; 0x28
 801db00:	af00      	add	r7, sp, #0
 801db02:	60f8      	str	r0, [r7, #12]
 801db04:	60b9      	str	r1, [r7, #8]
 801db06:	607a      	str	r2, [r7, #4]
 801db08:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801db0a:	2300      	movs	r3, #0
 801db0c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801db0e:	683b      	ldr	r3, [r7, #0]
 801db10:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801db12:	2300      	movs	r3, #0
 801db14:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801db16:	2300      	movs	r3, #0
 801db18:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801db1a:	f107 0318 	add.w	r3, r7, #24
 801db1e:	4618      	mov	r0, r3
 801db20:	f000 f91d 	bl	801dd5e <readChar>
 801db24:	4603      	mov	r3, r0
 801db26:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801db28:	7f3b      	ldrb	r3, [r7, #28]
 801db2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801db2e:	b2db      	uxtb	r3, r3
 801db30:	461a      	mov	r2, r3
 801db32:	68bb      	ldr	r3, [r7, #8]
 801db34:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801db36:	7f3b      	ldrb	r3, [r7, #28]
 801db38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801db3c:	b2db      	uxtb	r3, r3
 801db3e:	461a      	mov	r2, r3
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801db44:	69bb      	ldr	r3, [r7, #24]
 801db46:	f107 0214 	add.w	r2, r7, #20
 801db4a:	4611      	mov	r1, r2
 801db4c:	4618      	mov	r0, r3
 801db4e:	f000 f8d5 	bl	801dcfc <MQTTPacket_decodeBuf>
 801db52:	6278      	str	r0, [r7, #36]	; 0x24
 801db54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801db56:	69bb      	ldr	r3, [r7, #24]
 801db58:	4413      	add	r3, r2
 801db5a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801db5c:	69bb      	ldr	r3, [r7, #24]
 801db5e:	697a      	ldr	r2, [r7, #20]
 801db60:	4413      	add	r3, r2
 801db62:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801db64:	69bb      	ldr	r3, [r7, #24]
 801db66:	6a3a      	ldr	r2, [r7, #32]
 801db68:	1ad3      	subs	r3, r2, r3
 801db6a:	2b01      	cmp	r3, #1
 801db6c:	dd0b      	ble.n	801db86 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801db6e:	f107 0318 	add.w	r3, r7, #24
 801db72:	4618      	mov	r0, r3
 801db74:	f000 f8d8 	bl	801dd28 <readInt>
 801db78:	4603      	mov	r3, r0
 801db7a:	b29a      	uxth	r2, r3
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801db80:	2301      	movs	r3, #1
 801db82:	627b      	str	r3, [r7, #36]	; 0x24
 801db84:	e000      	b.n	801db88 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801db86:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801db8a:	4618      	mov	r0, r3
 801db8c:	3728      	adds	r7, #40	; 0x28
 801db8e:	46bd      	mov	sp, r7
 801db90:	bd80      	pop	{r7, pc}

0801db92 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801db92:	b480      	push	{r7}
 801db94:	b085      	sub	sp, #20
 801db96:	af00      	add	r7, sp, #0
 801db98:	6078      	str	r0, [r7, #4]
 801db9a:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801db9c:	2300      	movs	r3, #0
 801db9e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801dba0:	683b      	ldr	r3, [r7, #0]
 801dba2:	425a      	negs	r2, r3
 801dba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801dbac:	bf58      	it	pl
 801dbae:	4253      	negpl	r3, r2
 801dbb0:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801dbb2:	683b      	ldr	r3, [r7, #0]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	da00      	bge.n	801dbba <MQTTPacket_encode+0x28>
 801dbb8:	337f      	adds	r3, #127	; 0x7f
 801dbba:	11db      	asrs	r3, r3, #7
 801dbbc:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801dbbe:	683b      	ldr	r3, [r7, #0]
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	dd03      	ble.n	801dbcc <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801dbc4:	7afb      	ldrb	r3, [r7, #11]
 801dbc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801dbca:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801dbcc:	68fb      	ldr	r3, [r7, #12]
 801dbce:	1c5a      	adds	r2, r3, #1
 801dbd0:	60fa      	str	r2, [r7, #12]
 801dbd2:	461a      	mov	r2, r3
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	4413      	add	r3, r2
 801dbd8:	7afa      	ldrb	r2, [r7, #11]
 801dbda:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801dbdc:	683b      	ldr	r3, [r7, #0]
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	dcde      	bgt.n	801dba0 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801dbe2:	68fb      	ldr	r3, [r7, #12]
}
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	3714      	adds	r7, #20
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbee:	4770      	bx	lr

0801dbf0 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801dbf0:	b580      	push	{r7, lr}
 801dbf2:	b086      	sub	sp, #24
 801dbf4:	af00      	add	r7, sp, #0
 801dbf6:	6078      	str	r0, [r7, #4]
 801dbf8:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801dbfa:	2301      	movs	r3, #1
 801dbfc:	617b      	str	r3, [r7, #20]
	int len = 0;
 801dbfe:	2300      	movs	r3, #0
 801dc00:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801dc02:	683b      	ldr	r3, [r7, #0]
 801dc04:	2200      	movs	r2, #0
 801dc06:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801dc08:	f04f 33ff 	mov.w	r3, #4294967295
 801dc0c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801dc0e:	693b      	ldr	r3, [r7, #16]
 801dc10:	3301      	adds	r3, #1
 801dc12:	613b      	str	r3, [r7, #16]
 801dc14:	693b      	ldr	r3, [r7, #16]
 801dc16:	2b04      	cmp	r3, #4
 801dc18:	dd03      	ble.n	801dc22 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801dc1a:	f04f 33ff 	mov.w	r3, #4294967295
 801dc1e:	60fb      	str	r3, [r7, #12]
			goto exit;
 801dc20:	e01d      	b.n	801dc5e <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801dc22:	f107 020b 	add.w	r2, r7, #11
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	2101      	movs	r1, #1
 801dc2a:	4610      	mov	r0, r2
 801dc2c:	4798      	blx	r3
 801dc2e:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801dc30:	68fb      	ldr	r3, [r7, #12]
 801dc32:	2b01      	cmp	r3, #1
 801dc34:	d112      	bne.n	801dc5c <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801dc36:	683b      	ldr	r3, [r7, #0]
 801dc38:	681a      	ldr	r2, [r3, #0]
 801dc3a:	7afb      	ldrb	r3, [r7, #11]
 801dc3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dc40:	6979      	ldr	r1, [r7, #20]
 801dc42:	fb01 f303 	mul.w	r3, r1, r3
 801dc46:	441a      	add	r2, r3
 801dc48:	683b      	ldr	r3, [r7, #0]
 801dc4a:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801dc4c:	697b      	ldr	r3, [r7, #20]
 801dc4e:	01db      	lsls	r3, r3, #7
 801dc50:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801dc52:	7afb      	ldrb	r3, [r7, #11]
 801dc54:	b25b      	sxtb	r3, r3
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	dbd6      	blt.n	801dc08 <MQTTPacket_decode+0x18>
exit:
 801dc5a:	e000      	b.n	801dc5e <MQTTPacket_decode+0x6e>
			goto exit;
 801dc5c:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801dc5e:	693b      	ldr	r3, [r7, #16]
}
 801dc60:	4618      	mov	r0, r3
 801dc62:	3718      	adds	r7, #24
 801dc64:	46bd      	mov	sp, r7
 801dc66:	bd80      	pop	{r7, pc}

0801dc68 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801dc68:	b480      	push	{r7}
 801dc6a:	b083      	sub	sp, #12
 801dc6c:	af00      	add	r7, sp, #0
 801dc6e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	3301      	adds	r3, #1
 801dc74:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	2b7f      	cmp	r3, #127	; 0x7f
 801dc7a:	dc03      	bgt.n	801dc84 <MQTTPacket_len+0x1c>
		rem_len += 1;
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	3301      	adds	r3, #1
 801dc80:	607b      	str	r3, [r7, #4]
 801dc82:	e012      	b.n	801dcaa <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dc8a:	da03      	bge.n	801dc94 <MQTTPacket_len+0x2c>
		rem_len += 2;
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	3302      	adds	r3, #2
 801dc90:	607b      	str	r3, [r7, #4]
 801dc92:	e00a      	b.n	801dcaa <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	4a08      	ldr	r2, [pc, #32]	; (801dcb8 <MQTTPacket_len+0x50>)
 801dc98:	4293      	cmp	r3, r2
 801dc9a:	dc03      	bgt.n	801dca4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	3303      	adds	r3, #3
 801dca0:	607b      	str	r3, [r7, #4]
 801dca2:	e002      	b.n	801dcaa <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	3304      	adds	r3, #4
 801dca8:	607b      	str	r3, [r7, #4]
	return rem_len;
 801dcaa:	687b      	ldr	r3, [r7, #4]
}
 801dcac:	4618      	mov	r0, r3
 801dcae:	370c      	adds	r7, #12
 801dcb0:	46bd      	mov	sp, r7
 801dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcb6:	4770      	bx	lr
 801dcb8:	001ffffe 	.word	0x001ffffe

0801dcbc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801dcbc:	b480      	push	{r7}
 801dcbe:	b085      	sub	sp, #20
 801dcc0:	af00      	add	r7, sp, #0
 801dcc2:	6078      	str	r0, [r7, #4]
 801dcc4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801dcc6:	2300      	movs	r3, #0
 801dcc8:	60fb      	str	r3, [r7, #12]
 801dcca:	e00a      	b.n	801dce2 <bufchar+0x26>
		*c = *bufptr++;
 801dccc:	4b0a      	ldr	r3, [pc, #40]	; (801dcf8 <bufchar+0x3c>)
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	1c5a      	adds	r2, r3, #1
 801dcd2:	4909      	ldr	r1, [pc, #36]	; (801dcf8 <bufchar+0x3c>)
 801dcd4:	600a      	str	r2, [r1, #0]
 801dcd6:	781a      	ldrb	r2, [r3, #0]
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	3301      	adds	r3, #1
 801dce0:	60fb      	str	r3, [r7, #12]
 801dce2:	68fa      	ldr	r2, [r7, #12]
 801dce4:	683b      	ldr	r3, [r7, #0]
 801dce6:	429a      	cmp	r2, r3
 801dce8:	dbf0      	blt.n	801dccc <bufchar+0x10>
	return count;
 801dcea:	683b      	ldr	r3, [r7, #0]
}
 801dcec:	4618      	mov	r0, r3
 801dcee:	3714      	adds	r7, #20
 801dcf0:	46bd      	mov	sp, r7
 801dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcf6:	4770      	bx	lr
 801dcf8:	200009d4 	.word	0x200009d4

0801dcfc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801dcfc:	b580      	push	{r7, lr}
 801dcfe:	b082      	sub	sp, #8
 801dd00:	af00      	add	r7, sp, #0
 801dd02:	6078      	str	r0, [r7, #4]
 801dd04:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801dd06:	4a06      	ldr	r2, [pc, #24]	; (801dd20 <MQTTPacket_decodeBuf+0x24>)
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801dd0c:	6839      	ldr	r1, [r7, #0]
 801dd0e:	4805      	ldr	r0, [pc, #20]	; (801dd24 <MQTTPacket_decodeBuf+0x28>)
 801dd10:	f7ff ff6e 	bl	801dbf0 <MQTTPacket_decode>
 801dd14:	4603      	mov	r3, r0
}
 801dd16:	4618      	mov	r0, r3
 801dd18:	3708      	adds	r7, #8
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	bd80      	pop	{r7, pc}
 801dd1e:	bf00      	nop
 801dd20:	200009d4 	.word	0x200009d4
 801dd24:	0801dcbd 	.word	0x0801dcbd

0801dd28 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801dd28:	b480      	push	{r7}
 801dd2a:	b085      	sub	sp, #20
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	781b      	ldrb	r3, [r3, #0]
 801dd3a:	021b      	lsls	r3, r3, #8
 801dd3c:	68fa      	ldr	r2, [r7, #12]
 801dd3e:	3201      	adds	r2, #1
 801dd40:	7812      	ldrb	r2, [r2, #0]
 801dd42:	4413      	add	r3, r2
 801dd44:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	1c9a      	adds	r2, r3, #2
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	601a      	str	r2, [r3, #0]
	return len;
 801dd50:	68bb      	ldr	r3, [r7, #8]
}
 801dd52:	4618      	mov	r0, r3
 801dd54:	3714      	adds	r7, #20
 801dd56:	46bd      	mov	sp, r7
 801dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd5c:	4770      	bx	lr

0801dd5e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801dd5e:	b480      	push	{r7}
 801dd60:	b085      	sub	sp, #20
 801dd62:	af00      	add	r7, sp, #0
 801dd64:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	781b      	ldrb	r3, [r3, #0]
 801dd6c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	1c5a      	adds	r2, r3, #1
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	601a      	str	r2, [r3, #0]
	return c;
 801dd78:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	3714      	adds	r7, #20
 801dd7e:	46bd      	mov	sp, r7
 801dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd84:	4770      	bx	lr

0801dd86 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801dd86:	b480      	push	{r7}
 801dd88:	b083      	sub	sp, #12
 801dd8a:	af00      	add	r7, sp, #0
 801dd8c:	6078      	str	r0, [r7, #4]
 801dd8e:	460b      	mov	r3, r1
 801dd90:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	681b      	ldr	r3, [r3, #0]
 801dd96:	78fa      	ldrb	r2, [r7, #3]
 801dd98:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	1c5a      	adds	r2, r3, #1
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	601a      	str	r2, [r3, #0]
}
 801dda4:	bf00      	nop
 801dda6:	370c      	adds	r7, #12
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddae:	4770      	bx	lr

0801ddb0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801ddb0:	b480      	push	{r7}
 801ddb2:	b083      	sub	sp, #12
 801ddb4:	af00      	add	r7, sp, #0
 801ddb6:	6078      	str	r0, [r7, #4]
 801ddb8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801ddba:	683b      	ldr	r3, [r7, #0]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	da00      	bge.n	801ddc2 <writeInt+0x12>
 801ddc0:	33ff      	adds	r3, #255	; 0xff
 801ddc2:	121b      	asrs	r3, r3, #8
 801ddc4:	461a      	mov	r2, r3
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	b2d2      	uxtb	r2, r2
 801ddcc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	1c5a      	adds	r2, r3, #1
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801ddd8:	683b      	ldr	r3, [r7, #0]
 801ddda:	425a      	negs	r2, r3
 801dddc:	b2db      	uxtb	r3, r3
 801ddde:	b2d2      	uxtb	r2, r2
 801dde0:	bf58      	it	pl
 801dde2:	4253      	negpl	r3, r2
 801dde4:	687a      	ldr	r2, [r7, #4]
 801dde6:	6812      	ldr	r2, [r2, #0]
 801dde8:	b2db      	uxtb	r3, r3
 801ddea:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	1c5a      	adds	r2, r3, #1
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	601a      	str	r2, [r3, #0]
}
 801ddf6:	bf00      	nop
 801ddf8:	370c      	adds	r7, #12
 801ddfa:	46bd      	mov	sp, r7
 801ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de00:	4770      	bx	lr

0801de02 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801de02:	b580      	push	{r7, lr}
 801de04:	b084      	sub	sp, #16
 801de06:	af00      	add	r7, sp, #0
 801de08:	6078      	str	r0, [r7, #4]
 801de0a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801de0c:	6838      	ldr	r0, [r7, #0]
 801de0e:	f7f2 fa47 	bl	80102a0 <strlen>
 801de12:	4603      	mov	r3, r0
 801de14:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801de16:	68f9      	ldr	r1, [r7, #12]
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	f7ff ffc9 	bl	801ddb0 <writeInt>
	memcpy(*pptr, string, len);
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	68fa      	ldr	r2, [r7, #12]
 801de24:	6839      	ldr	r1, [r7, #0]
 801de26:	4618      	mov	r0, r3
 801de28:	f00f fe8d 	bl	802db46 <memcpy>
	*pptr += len;
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	681a      	ldr	r2, [r3, #0]
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	441a      	add	r2, r3
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	601a      	str	r2, [r3, #0]
}
 801de38:	bf00      	nop
 801de3a:	3710      	adds	r7, #16
 801de3c:	46bd      	mov	sp, r7
 801de3e:	bd80      	pop	{r7, pc}

0801de40 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801de40:	b580      	push	{r7, lr}
 801de42:	b084      	sub	sp, #16
 801de44:	af00      	add	r7, sp, #0
 801de46:	60f8      	str	r0, [r7, #12]
 801de48:	4638      	mov	r0, r7
 801de4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	2b00      	cmp	r3, #0
 801de52:	dd12      	ble.n	801de7a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	4619      	mov	r1, r3
 801de58:	68f8      	ldr	r0, [r7, #12]
 801de5a:	f7ff ffa9 	bl	801ddb0 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	68b9      	ldr	r1, [r7, #8]
 801de64:	687a      	ldr	r2, [r7, #4]
 801de66:	4618      	mov	r0, r3
 801de68:	f00f fe6d 	bl	802db46 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801de6c:	68fb      	ldr	r3, [r7, #12]
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	687a      	ldr	r2, [r7, #4]
 801de72:	441a      	add	r2, r3
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801de78:	e00c      	b.n	801de94 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801de7a:	683b      	ldr	r3, [r7, #0]
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	d005      	beq.n	801de8c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801de80:	683b      	ldr	r3, [r7, #0]
 801de82:	4619      	mov	r1, r3
 801de84:	68f8      	ldr	r0, [r7, #12]
 801de86:	f7ff ffbc 	bl	801de02 <writeCString>
}
 801de8a:	e003      	b.n	801de94 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801de8c:	2100      	movs	r1, #0
 801de8e:	68f8      	ldr	r0, [r7, #12]
 801de90:	f7ff ff8e 	bl	801ddb0 <writeInt>
}
 801de94:	bf00      	nop
 801de96:	3710      	adds	r7, #16
 801de98:	46bd      	mov	sp, r7
 801de9a:	bd80      	pop	{r7, pc}

0801de9c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801de9c:	b580      	push	{r7, lr}
 801de9e:	b086      	sub	sp, #24
 801dea0:	af00      	add	r7, sp, #0
 801dea2:	60f8      	str	r0, [r7, #12]
 801dea4:	60b9      	str	r1, [r7, #8]
 801dea6:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801dea8:	2300      	movs	r3, #0
 801deaa:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801deac:	68bb      	ldr	r3, [r7, #8]
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	687a      	ldr	r2, [r7, #4]
 801deb2:	1ad3      	subs	r3, r2, r3
 801deb4:	2b01      	cmp	r3, #1
 801deb6:	dd1a      	ble.n	801deee <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801deb8:	68b8      	ldr	r0, [r7, #8]
 801deba:	f7ff ff35 	bl	801dd28 <readInt>
 801debe:	4602      	mov	r2, r0
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801dec4:	68bb      	ldr	r3, [r7, #8]
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	68fa      	ldr	r2, [r7, #12]
 801deca:	6852      	ldr	r2, [r2, #4]
 801decc:	4413      	add	r3, r2
 801dece:	687a      	ldr	r2, [r7, #4]
 801ded0:	429a      	cmp	r2, r3
 801ded2:	d30c      	bcc.n	801deee <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801ded4:	68bb      	ldr	r3, [r7, #8]
 801ded6:	681a      	ldr	r2, [r3, #0]
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801dedc:	68bb      	ldr	r3, [r7, #8]
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	68fa      	ldr	r2, [r7, #12]
 801dee2:	6852      	ldr	r2, [r2, #4]
 801dee4:	441a      	add	r2, r3
 801dee6:	68bb      	ldr	r3, [r7, #8]
 801dee8:	601a      	str	r2, [r3, #0]
			rc = 1;
 801deea:	2301      	movs	r3, #1
 801deec:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801deee:	68fb      	ldr	r3, [r7, #12]
 801def0:	2200      	movs	r2, #0
 801def2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801def4:	697b      	ldr	r3, [r7, #20]
}
 801def6:	4618      	mov	r0, r3
 801def8:	3718      	adds	r7, #24
 801defa:	46bd      	mov	sp, r7
 801defc:	bd80      	pop	{r7, pc}

0801defe <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801defe:	b580      	push	{r7, lr}
 801df00:	b086      	sub	sp, #24
 801df02:	af00      	add	r7, sp, #0
 801df04:	1d3b      	adds	r3, r7, #4
 801df06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801df0a:	2300      	movs	r3, #0
 801df0c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d006      	beq.n	801df22 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	4618      	mov	r0, r3
 801df18:	f7f2 f9c2 	bl	80102a0 <strlen>
 801df1c:	4603      	mov	r3, r0
 801df1e:	617b      	str	r3, [r7, #20]
 801df20:	e001      	b.n	801df26 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801df22:	68bb      	ldr	r3, [r7, #8]
 801df24:	617b      	str	r3, [r7, #20]
	return rc;
 801df26:	697b      	ldr	r3, [r7, #20]
}
 801df28:	4618      	mov	r0, r3
 801df2a:	3718      	adds	r7, #24
 801df2c:	46bd      	mov	sp, r7
 801df2e:	bd80      	pop	{r7, pc}

0801df30 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801df30:	b580      	push	{r7, lr}
 801df32:	b086      	sub	sp, #24
 801df34:	af00      	add	r7, sp, #0
 801df36:	6078      	str	r0, [r7, #4]
 801df38:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801df3a:	2300      	movs	r3, #0
 801df3c:	617b      	str	r3, [r7, #20]
		blen = 0;
 801df3e:	2300      	movs	r3, #0
 801df40:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	2b00      	cmp	r3, #0
 801df48:	d00a      	beq.n	801df60 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	4618      	mov	r0, r3
 801df56:	f7f2 f9a3 	bl	80102a0 <strlen>
 801df5a:	4603      	mov	r3, r0
 801df5c:	617b      	str	r3, [r7, #20]
 801df5e:	e005      	b.n	801df6c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	689b      	ldr	r3, [r3, #8]
 801df64:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	685b      	ldr	r3, [r3, #4]
 801df6a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801df6c:	6838      	ldr	r0, [r7, #0]
 801df6e:	f7f2 f997 	bl	80102a0 <strlen>
 801df72:	4603      	mov	r3, r0
 801df74:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801df76:	697a      	ldr	r2, [r7, #20]
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	429a      	cmp	r2, r3
 801df7c:	d10a      	bne.n	801df94 <MQTTPacket_equals+0x64>
 801df7e:	697b      	ldr	r3, [r7, #20]
 801df80:	461a      	mov	r2, r3
 801df82:	6839      	ldr	r1, [r7, #0]
 801df84:	6938      	ldr	r0, [r7, #16]
 801df86:	f00f fc51 	bl	802d82c <strncmp>
 801df8a:	4603      	mov	r3, r0
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d101      	bne.n	801df94 <MQTTPacket_equals+0x64>
 801df90:	2301      	movs	r3, #1
 801df92:	e000      	b.n	801df96 <MQTTPacket_equals+0x66>
 801df94:	2300      	movs	r3, #0
}
 801df96:	4618      	mov	r0, r3
 801df98:	3718      	adds	r7, #24
 801df9a:	46bd      	mov	sp, r7
 801df9c:	bd80      	pop	{r7, pc}

0801df9e <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801df9e:	b580      	push	{r7, lr}
 801dfa0:	b086      	sub	sp, #24
 801dfa2:	af00      	add	r7, sp, #0
 801dfa4:	60f8      	str	r0, [r7, #12]
 801dfa6:	4638      	mov	r0, r7
 801dfa8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801dfac:	2300      	movs	r3, #0
 801dfae:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801dfb0:	463b      	mov	r3, r7
 801dfb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801dfb6:	f7ff ffa2 	bl	801defe <MQTTstrlen>
 801dfba:	4603      	mov	r3, r0
 801dfbc:	1c9a      	adds	r2, r3, #2
 801dfbe:	6a3b      	ldr	r3, [r7, #32]
 801dfc0:	4413      	add	r3, r2
 801dfc2:	697a      	ldr	r2, [r7, #20]
 801dfc4:	4413      	add	r3, r2
 801dfc6:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	dd02      	ble.n	801dfd4 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801dfce:	697b      	ldr	r3, [r7, #20]
 801dfd0:	3302      	adds	r3, #2
 801dfd2:	617b      	str	r3, [r7, #20]
	return len;
 801dfd4:	697b      	ldr	r3, [r7, #20]
}
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	3718      	adds	r7, #24
 801dfda:	46bd      	mov	sp, r7
 801dfdc:	bd80      	pop	{r7, pc}

0801dfde <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801dfde:	b580      	push	{r7, lr}
 801dfe0:	b08a      	sub	sp, #40	; 0x28
 801dfe2:	af02      	add	r7, sp, #8
 801dfe4:	60f8      	str	r0, [r7, #12]
 801dfe6:	60b9      	str	r1, [r7, #8]
 801dfe8:	603b      	str	r3, [r7, #0]
 801dfea:	4613      	mov	r3, r2
 801dfec:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801dff2:	2300      	movs	r3, #0
 801dff4:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801dff6:	2300      	movs	r3, #0
 801dff8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801dffa:	2300      	movs	r3, #0
 801dffc:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801dffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e000:	9300      	str	r3, [sp, #0]
 801e002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e006:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e008:	6838      	ldr	r0, [r7, #0]
 801e00a:	f7ff ffc8 	bl	801df9e <MQTTSerialize_publishLength>
 801e00e:	61b8      	str	r0, [r7, #24]
 801e010:	69b8      	ldr	r0, [r7, #24]
 801e012:	f7ff fe29 	bl	801dc68 <MQTTPacket_len>
 801e016:	4602      	mov	r2, r0
 801e018:	68bb      	ldr	r3, [r7, #8]
 801e01a:	4293      	cmp	r3, r2
 801e01c:	da03      	bge.n	801e026 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e01e:	f06f 0301 	mvn.w	r3, #1
 801e022:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e024:	e04c      	b.n	801e0c0 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801e026:	7c3b      	ldrb	r3, [r7, #16]
 801e028:	2203      	movs	r2, #3
 801e02a:	f362 1307 	bfi	r3, r2, #4, #4
 801e02e:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801e030:	79fb      	ldrb	r3, [r7, #7]
 801e032:	f003 0301 	and.w	r3, r3, #1
 801e036:	b2da      	uxtb	r2, r3
 801e038:	7c3b      	ldrb	r3, [r7, #16]
 801e03a:	f362 03c3 	bfi	r3, r2, #3, #1
 801e03e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801e040:	683b      	ldr	r3, [r7, #0]
 801e042:	f003 0303 	and.w	r3, r3, #3
 801e046:	b2da      	uxtb	r2, r3
 801e048:	7c3b      	ldrb	r3, [r7, #16]
 801e04a:	f362 0342 	bfi	r3, r2, #1, #2
 801e04e:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801e050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e054:	f003 0301 	and.w	r3, r3, #1
 801e058:	b2da      	uxtb	r2, r3
 801e05a:	7c3b      	ldrb	r3, [r7, #16]
 801e05c:	f362 0300 	bfi	r3, r2, #0, #1
 801e060:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801e062:	7c3a      	ldrb	r2, [r7, #16]
 801e064:	f107 0314 	add.w	r3, r7, #20
 801e068:	4611      	mov	r1, r2
 801e06a:	4618      	mov	r0, r3
 801e06c:	f7ff fe8b 	bl	801dd86 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e070:	697b      	ldr	r3, [r7, #20]
 801e072:	69b9      	ldr	r1, [r7, #24]
 801e074:	4618      	mov	r0, r3
 801e076:	f7ff fd8c 	bl	801db92 <MQTTPacket_encode>
 801e07a:	4602      	mov	r2, r0
 801e07c:	697b      	ldr	r3, [r7, #20]
 801e07e:	4413      	add	r3, r2
 801e080:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801e082:	f107 0014 	add.w	r0, r7, #20
 801e086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e08a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e08c:	f7ff fed8 	bl	801de40 <writeMQTTString>

	if (qos > 0)
 801e090:	683b      	ldr	r3, [r7, #0]
 801e092:	2b00      	cmp	r3, #0
 801e094:	dd06      	ble.n	801e0a4 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801e096:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801e098:	f107 0314 	add.w	r3, r7, #20
 801e09c:	4611      	mov	r1, r2
 801e09e:	4618      	mov	r0, r3
 801e0a0:	f7ff fe86 	bl	801ddb0 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801e0a4:	697b      	ldr	r3, [r7, #20]
 801e0a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e0a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	f00f fd4b 	bl	802db46 <memcpy>
	ptr += payloadlen;
 801e0b0:	697a      	ldr	r2, [r7, #20]
 801e0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e0b4:	4413      	add	r3, r2
 801e0b6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801e0b8:	697a      	ldr	r2, [r7, #20]
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	1ad3      	subs	r3, r2, r3
 801e0be:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e0c0:	69fb      	ldr	r3, [r7, #28]
}
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	3720      	adds	r7, #32
 801e0c6:	46bd      	mov	sp, r7
 801e0c8:	bd80      	pop	{r7, pc}

0801e0ca <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801e0ca:	b580      	push	{r7, lr}
 801e0cc:	b088      	sub	sp, #32
 801e0ce:	af00      	add	r7, sp, #0
 801e0d0:	60f8      	str	r0, [r7, #12]
 801e0d2:	60b9      	str	r1, [r7, #8]
 801e0d4:	4611      	mov	r1, r2
 801e0d6:	461a      	mov	r2, r3
 801e0d8:	460b      	mov	r3, r1
 801e0da:	71fb      	strb	r3, [r7, #7]
 801e0dc:	4613      	mov	r3, r2
 801e0de:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801e0e0:	2300      	movs	r3, #0
 801e0e2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801e0ec:	68bb      	ldr	r3, [r7, #8]
 801e0ee:	2b03      	cmp	r3, #3
 801e0f0:	dc03      	bgt.n	801e0fa <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e0f2:	f06f 0301 	mvn.w	r3, #1
 801e0f6:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e0f8:	e037      	b.n	801e16a <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801e0fa:	79fb      	ldrb	r3, [r7, #7]
 801e0fc:	f003 030f 	and.w	r3, r3, #15
 801e100:	b2da      	uxtb	r2, r3
 801e102:	7e3b      	ldrb	r3, [r7, #24]
 801e104:	f362 1307 	bfi	r3, r2, #4, #4
 801e108:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801e10a:	79bb      	ldrb	r3, [r7, #6]
 801e10c:	f003 0301 	and.w	r3, r3, #1
 801e110:	b2da      	uxtb	r2, r3
 801e112:	7e3b      	ldrb	r3, [r7, #24]
 801e114:	f362 03c3 	bfi	r3, r2, #3, #1
 801e118:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e11a:	79fb      	ldrb	r3, [r7, #7]
 801e11c:	2b06      	cmp	r3, #6
 801e11e:	bf0c      	ite	eq
 801e120:	2301      	moveq	r3, #1
 801e122:	2300      	movne	r3, #0
 801e124:	b2db      	uxtb	r3, r3
 801e126:	f003 0303 	and.w	r3, r3, #3
 801e12a:	b2da      	uxtb	r2, r3
 801e12c:	7e3b      	ldrb	r3, [r7, #24]
 801e12e:	f362 0342 	bfi	r3, r2, #1, #2
 801e132:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801e134:	7e3a      	ldrb	r2, [r7, #24]
 801e136:	f107 0314 	add.w	r3, r7, #20
 801e13a:	4611      	mov	r1, r2
 801e13c:	4618      	mov	r0, r3
 801e13e:	f7ff fe22 	bl	801dd86 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e142:	697b      	ldr	r3, [r7, #20]
 801e144:	2102      	movs	r1, #2
 801e146:	4618      	mov	r0, r3
 801e148:	f7ff fd23 	bl	801db92 <MQTTPacket_encode>
 801e14c:	4602      	mov	r2, r0
 801e14e:	697b      	ldr	r3, [r7, #20]
 801e150:	4413      	add	r3, r2
 801e152:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801e154:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e156:	f107 0314 	add.w	r3, r7, #20
 801e15a:	4611      	mov	r1, r2
 801e15c:	4618      	mov	r0, r3
 801e15e:	f7ff fe27 	bl	801ddb0 <writeInt>
	rc = ptr - buf;
 801e162:	697a      	ldr	r2, [r7, #20]
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	1ad3      	subs	r3, r2, r3
 801e168:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e16a:	69fb      	ldr	r3, [r7, #28]
}
 801e16c:	4618      	mov	r0, r3
 801e16e:	3720      	adds	r7, #32
 801e170:	46bd      	mov	sp, r7
 801e172:	bd80      	pop	{r7, pc}

0801e174 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801e174:	b590      	push	{r4, r7, lr}
 801e176:	b085      	sub	sp, #20
 801e178:	af00      	add	r7, sp, #0
 801e17a:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e17c:	2300      	movs	r3, #0
 801e17e:	60fb      	str	r3, [r7, #12]
 801e180:	2300      	movs	r3, #0
 801e182:	60bb      	str	r3, [r7, #8]
 801e184:	e02e      	b.n	801e1e4 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801e186:	68bb      	ldr	r3, [r7, #8]
 801e188:	687a      	ldr	r2, [r7, #4]
 801e18a:	441a      	add	r2, r3
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	6879      	ldr	r1, [r7, #4]
 801e190:	440b      	add	r3, r1
 801e192:	7812      	ldrb	r2, [r2, #0]
 801e194:	701a      	strb	r2, [r3, #0]
 801e196:	781b      	ldrb	r3, [r3, #0]
 801e198:	2b25      	cmp	r3, #37	; 0x25
 801e19a:	d11d      	bne.n	801e1d8 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801e19c:	68bb      	ldr	r3, [r7, #8]
 801e19e:	3301      	adds	r3, #1
 801e1a0:	687a      	ldr	r2, [r7, #4]
 801e1a2:	4413      	add	r3, r2
 801e1a4:	781b      	ldrb	r3, [r3, #0]
 801e1a6:	4618      	mov	r0, r3
 801e1a8:	f000 fbf1 	bl	801e98e <C2D>
 801e1ac:	4603      	mov	r3, r0
 801e1ae:	011b      	lsls	r3, r3, #4
 801e1b0:	b2dc      	uxtb	r4, r3
 801e1b2:	68bb      	ldr	r3, [r7, #8]
 801e1b4:	3302      	adds	r3, #2
 801e1b6:	687a      	ldr	r2, [r7, #4]
 801e1b8:	4413      	add	r3, r2
 801e1ba:	781b      	ldrb	r3, [r3, #0]
 801e1bc:	4618      	mov	r0, r3
 801e1be:	f000 fbe6 	bl	801e98e <C2D>
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	4619      	mov	r1, r3
 801e1c6:	68fb      	ldr	r3, [r7, #12]
 801e1c8:	687a      	ldr	r2, [r7, #4]
 801e1ca:	4413      	add	r3, r2
 801e1cc:	1862      	adds	r2, r4, r1
 801e1ce:	b2d2      	uxtb	r2, r2
 801e1d0:	701a      	strb	r2, [r3, #0]
			y+=2;
 801e1d2:	68bb      	ldr	r3, [r7, #8]
 801e1d4:	3302      	adds	r3, #2
 801e1d6:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	3301      	adds	r3, #1
 801e1dc:	60fb      	str	r3, [r7, #12]
 801e1de:	68bb      	ldr	r3, [r7, #8]
 801e1e0:	3301      	adds	r3, #1
 801e1e2:	60bb      	str	r3, [r7, #8]
 801e1e4:	68bb      	ldr	r3, [r7, #8]
 801e1e6:	687a      	ldr	r2, [r7, #4]
 801e1e8:	4413      	add	r3, r2
 801e1ea:	781b      	ldrb	r3, [r3, #0]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d1ca      	bne.n	801e186 <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	687a      	ldr	r2, [r7, #4]
 801e1f4:	4413      	add	r3, r2
 801e1f6:	2200      	movs	r2, #0
 801e1f8:	701a      	strb	r2, [r3, #0]
}
 801e1fa:	bf00      	nop
 801e1fc:	3714      	adds	r7, #20
 801e1fe:	46bd      	mov	sp, r7
 801e200:	bd90      	pop	{r4, r7, pc}
	...

0801e204 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801e204:	b580      	push	{r7, lr}
 801e206:	b088      	sub	sp, #32
 801e208:	af00      	add	r7, sp, #0
 801e20a:	60f8      	str	r0, [r7, #12]
 801e20c:	460b      	mov	r3, r1
 801e20e:	607a      	str	r2, [r7, #4]
 801e210:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801e212:	7afb      	ldrb	r3, [r7, #11]
 801e214:	2b01      	cmp	r3, #1
 801e216:	d102      	bne.n	801e21e <make_http_response_head+0x1a>
 801e218:	4b42      	ldr	r3, [pc, #264]	; (801e324 <make_http_response_head+0x120>)
 801e21a:	61fb      	str	r3, [r7, #28]
 801e21c:	e061      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801e21e:	7afb      	ldrb	r3, [r7, #11]
 801e220:	2b02      	cmp	r3, #2
 801e222:	d102      	bne.n	801e22a <make_http_response_head+0x26>
 801e224:	4b40      	ldr	r3, [pc, #256]	; (801e328 <make_http_response_head+0x124>)
 801e226:	61fb      	str	r3, [r7, #28]
 801e228:	e05b      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801e22a:	7afb      	ldrb	r3, [r7, #11]
 801e22c:	2b03      	cmp	r3, #3
 801e22e:	d102      	bne.n	801e236 <make_http_response_head+0x32>
 801e230:	4b3e      	ldr	r3, [pc, #248]	; (801e32c <make_http_response_head+0x128>)
 801e232:	61fb      	str	r3, [r7, #28]
 801e234:	e055      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801e236:	7afb      	ldrb	r3, [r7, #11]
 801e238:	2b04      	cmp	r3, #4
 801e23a:	d102      	bne.n	801e242 <make_http_response_head+0x3e>
 801e23c:	4b3c      	ldr	r3, [pc, #240]	; (801e330 <make_http_response_head+0x12c>)
 801e23e:	61fb      	str	r3, [r7, #28]
 801e240:	e04f      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801e242:	7afb      	ldrb	r3, [r7, #11]
 801e244:	2b05      	cmp	r3, #5
 801e246:	d102      	bne.n	801e24e <make_http_response_head+0x4a>
 801e248:	4b3a      	ldr	r3, [pc, #232]	; (801e334 <make_http_response_head+0x130>)
 801e24a:	61fb      	str	r3, [r7, #28]
 801e24c:	e049      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801e24e:	7afb      	ldrb	r3, [r7, #11]
 801e250:	2b09      	cmp	r3, #9
 801e252:	d102      	bne.n	801e25a <make_http_response_head+0x56>
 801e254:	4b38      	ldr	r3, [pc, #224]	; (801e338 <make_http_response_head+0x134>)
 801e256:	61fb      	str	r3, [r7, #28]
 801e258:	e043      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801e25a:	7afb      	ldrb	r3, [r7, #11]
 801e25c:	2b0a      	cmp	r3, #10
 801e25e:	d102      	bne.n	801e266 <make_http_response_head+0x62>
 801e260:	4b36      	ldr	r3, [pc, #216]	; (801e33c <make_http_response_head+0x138>)
 801e262:	61fb      	str	r3, [r7, #28]
 801e264:	e03d      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801e266:	7afb      	ldrb	r3, [r7, #11]
 801e268:	2b0c      	cmp	r3, #12
 801e26a:	d102      	bne.n	801e272 <make_http_response_head+0x6e>
 801e26c:	4b34      	ldr	r3, [pc, #208]	; (801e340 <make_http_response_head+0x13c>)
 801e26e:	61fb      	str	r3, [r7, #28]
 801e270:	e037      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801e272:	7afb      	ldrb	r3, [r7, #11]
 801e274:	2b0b      	cmp	r3, #11
 801e276:	d102      	bne.n	801e27e <make_http_response_head+0x7a>
 801e278:	4b32      	ldr	r3, [pc, #200]	; (801e344 <make_http_response_head+0x140>)
 801e27a:	61fb      	str	r3, [r7, #28]
 801e27c:	e031      	b.n	801e2e2 <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801e27e:	7afb      	ldrb	r3, [r7, #11]
 801e280:	2b08      	cmp	r3, #8
 801e282:	d102      	bne.n	801e28a <make_http_response_head+0x86>
 801e284:	4b30      	ldr	r3, [pc, #192]	; (801e348 <make_http_response_head+0x144>)
 801e286:	61fb      	str	r3, [r7, #28]
 801e288:	e02b      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801e28a:	7afb      	ldrb	r3, [r7, #11]
 801e28c:	2b0d      	cmp	r3, #13
 801e28e:	d102      	bne.n	801e296 <make_http_response_head+0x92>
 801e290:	4b2e      	ldr	r3, [pc, #184]	; (801e34c <make_http_response_head+0x148>)
 801e292:	61fb      	str	r3, [r7, #28]
 801e294:	e025      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801e296:	7afb      	ldrb	r3, [r7, #11]
 801e298:	2b0e      	cmp	r3, #14
 801e29a:	d102      	bne.n	801e2a2 <make_http_response_head+0x9e>
 801e29c:	4b2c      	ldr	r3, [pc, #176]	; (801e350 <make_http_response_head+0x14c>)
 801e29e:	61fb      	str	r3, [r7, #28]
 801e2a0:	e01f      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801e2a2:	7afb      	ldrb	r3, [r7, #11]
 801e2a4:	2b14      	cmp	r3, #20
 801e2a6:	d102      	bne.n	801e2ae <make_http_response_head+0xaa>
 801e2a8:	4b2a      	ldr	r3, [pc, #168]	; (801e354 <make_http_response_head+0x150>)
 801e2aa:	61fb      	str	r3, [r7, #28]
 801e2ac:	e019      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801e2ae:	7afb      	ldrb	r3, [r7, #11]
 801e2b0:	2b15      	cmp	r3, #21
 801e2b2:	d102      	bne.n	801e2ba <make_http_response_head+0xb6>
 801e2b4:	4b28      	ldr	r3, [pc, #160]	; (801e358 <make_http_response_head+0x154>)
 801e2b6:	61fb      	str	r3, [r7, #28]
 801e2b8:	e013      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801e2ba:	7afb      	ldrb	r3, [r7, #11]
 801e2bc:	2b16      	cmp	r3, #22
 801e2be:	d102      	bne.n	801e2c6 <make_http_response_head+0xc2>
 801e2c0:	4b26      	ldr	r3, [pc, #152]	; (801e35c <make_http_response_head+0x158>)
 801e2c2:	61fb      	str	r3, [r7, #28]
 801e2c4:	e00d      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801e2c6:	7afb      	ldrb	r3, [r7, #11]
 801e2c8:	2b17      	cmp	r3, #23
 801e2ca:	d102      	bne.n	801e2d2 <make_http_response_head+0xce>
 801e2cc:	4b24      	ldr	r3, [pc, #144]	; (801e360 <make_http_response_head+0x15c>)
 801e2ce:	61fb      	str	r3, [r7, #28]
 801e2d0:	e007      	b.n	801e2e2 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801e2d2:	7afb      	ldrb	r3, [r7, #11]
 801e2d4:	2b18      	cmp	r3, #24
 801e2d6:	d102      	bne.n	801e2de <make_http_response_head+0xda>
 801e2d8:	4b22      	ldr	r3, [pc, #136]	; (801e364 <make_http_response_head+0x160>)
 801e2da:	61fb      	str	r3, [r7, #28]
 801e2dc:	e001      	b.n	801e2e2 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801e2de:	2300      	movs	r3, #0
 801e2e0:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801e2e2:	f107 0310 	add.w	r3, r7, #16
 801e2e6:	687a      	ldr	r2, [r7, #4]
 801e2e8:	491f      	ldr	r1, [pc, #124]	; (801e368 <make_http_response_head+0x164>)
 801e2ea:	4618      	mov	r0, r3
 801e2ec:	f00f f906 	bl	802d4fc <siprintf>
	strcpy(buf, head);
 801e2f0:	69f9      	ldr	r1, [r7, #28]
 801e2f2:	68f8      	ldr	r0, [r7, #12]
 801e2f4:	f00f fc1f 	bl	802db36 <strcpy>
	strcat(buf, tmp);
 801e2f8:	f107 0310 	add.w	r3, r7, #16
 801e2fc:	4619      	mov	r1, r3
 801e2fe:	68f8      	ldr	r0, [r7, #12]
 801e300:	f00f fa54 	bl	802d7ac <strcat>
	strcat(buf, "\r\n\r\n");
 801e304:	68f8      	ldr	r0, [r7, #12]
 801e306:	f7f1 ffcb 	bl	80102a0 <strlen>
 801e30a:	4603      	mov	r3, r0
 801e30c:	461a      	mov	r2, r3
 801e30e:	68fb      	ldr	r3, [r7, #12]
 801e310:	4413      	add	r3, r2
 801e312:	4a16      	ldr	r2, [pc, #88]	; (801e36c <make_http_response_head+0x168>)
 801e314:	6810      	ldr	r0, [r2, #0]
 801e316:	6018      	str	r0, [r3, #0]
 801e318:	7912      	ldrb	r2, [r2, #4]
 801e31a:	711a      	strb	r2, [r3, #4]
}
 801e31c:	bf00      	nop
 801e31e:	3720      	adds	r7, #32
 801e320:	46bd      	mov	sp, r7
 801e322:	bd80      	pop	{r7, pc}
 801e324:	08032c2c 	.word	0x08032c2c
 801e328:	08032c80 	.word	0x08032c80
 801e32c:	08032cbc 	.word	0x08032cbc
 801e330:	08032cf8 	.word	0x08032cf8
 801e334:	08032d34 	.word	0x08032d34
 801e338:	08032d84 	.word	0x08032d84
 801e33c:	08032dd8 	.word	0x08032dd8
 801e340:	08032e14 	.word	0x08032e14
 801e344:	08032e58 	.word	0x08032e58
 801e348:	08032ea0 	.word	0x08032ea0
 801e34c:	08032efc 	.word	0x08032efc
 801e350:	08032f38 	.word	0x08032f38
 801e354:	08032f78 	.word	0x08032f78
 801e358:	08032fc8 	.word	0x08032fc8
 801e35c:	08033018 	.word	0x08033018
 801e360:	08033060 	.word	0x08033060
 801e364:	080330b0 	.word	0x080330b0
 801e368:	080330f0 	.word	0x080330f0
 801e36c:	080330f4 	.word	0x080330f4

0801e370 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b084      	sub	sp, #16
 801e374:	af00      	add	r7, sp, #0
 801e376:	6078      	str	r0, [r7, #4]
 801e378:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801e37a:	683b      	ldr	r3, [r7, #0]
 801e37c:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801e37e:	499f      	ldr	r1, [pc, #636]	; (801e5fc <find_http_uri_type+0x28c>)
 801e380:	68f8      	ldr	r0, [r7, #12]
 801e382:	f00f fae5 	bl	802d950 <strstr>
 801e386:	4603      	mov	r3, r0
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d106      	bne.n	801e39a <find_http_uri_type+0x2a>
 801e38c:	499c      	ldr	r1, [pc, #624]	; (801e600 <find_http_uri_type+0x290>)
 801e38e:	68f8      	ldr	r0, [r7, #12]
 801e390:	f00f fade 	bl	802d950 <strstr>
 801e394:	4603      	mov	r3, r0
 801e396:	2b00      	cmp	r3, #0
 801e398:	d003      	beq.n	801e3a2 <find_http_uri_type+0x32>
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	2201      	movs	r2, #1
 801e39e:	701a      	strb	r2, [r3, #0]
 801e3a0:	e127      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801e3a2:	4998      	ldr	r1, [pc, #608]	; (801e604 <find_http_uri_type+0x294>)
 801e3a4:	68f8      	ldr	r0, [r7, #12]
 801e3a6:	f00f fad3 	bl	802d950 <strstr>
 801e3aa:	4603      	mov	r3, r0
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d003      	beq.n	801e3b8 <find_http_uri_type+0x48>
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	2202      	movs	r2, #2
 801e3b4:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801e3b6:	e11c      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801e3b8:	4993      	ldr	r1, [pc, #588]	; (801e608 <find_http_uri_type+0x298>)
 801e3ba:	68f8      	ldr	r0, [r7, #12]
 801e3bc:	f00f fac8 	bl	802d950 <strstr>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d106      	bne.n	801e3d4 <find_http_uri_type+0x64>
 801e3c6:	4991      	ldr	r1, [pc, #580]	; (801e60c <find_http_uri_type+0x29c>)
 801e3c8:	68f8      	ldr	r0, [r7, #12]
 801e3ca:	f00f fac1 	bl	802d950 <strstr>
 801e3ce:	4603      	mov	r3, r0
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d003      	beq.n	801e3dc <find_http_uri_type+0x6c>
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2203      	movs	r2, #3
 801e3d8:	701a      	strb	r2, [r3, #0]
 801e3da:	e10a      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801e3dc:	498c      	ldr	r1, [pc, #560]	; (801e610 <find_http_uri_type+0x2a0>)
 801e3de:	68f8      	ldr	r0, [r7, #12]
 801e3e0:	f00f fab6 	bl	802d950 <strstr>
 801e3e4:	4603      	mov	r3, r0
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d106      	bne.n	801e3f8 <find_http_uri_type+0x88>
 801e3ea:	498a      	ldr	r1, [pc, #552]	; (801e614 <find_http_uri_type+0x2a4>)
 801e3ec:	68f8      	ldr	r0, [r7, #12]
 801e3ee:	f00f faaf 	bl	802d950 <strstr>
 801e3f2:	4603      	mov	r3, r0
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d003      	beq.n	801e400 <find_http_uri_type+0x90>
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	2204      	movs	r2, #4
 801e3fc:	701a      	strb	r2, [r3, #0]
 801e3fe:	e0f8      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e400:	4985      	ldr	r1, [pc, #532]	; (801e618 <find_http_uri_type+0x2a8>)
 801e402:	68f8      	ldr	r0, [r7, #12]
 801e404:	f00f faa4 	bl	802d950 <strstr>
 801e408:	4603      	mov	r3, r0
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d003      	beq.n	801e416 <find_http_uri_type+0xa6>
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	2205      	movs	r2, #5
 801e412:	701a      	strb	r2, [r3, #0]
}
 801e414:	e0ed      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e416:	4981      	ldr	r1, [pc, #516]	; (801e61c <find_http_uri_type+0x2ac>)
 801e418:	68f8      	ldr	r0, [r7, #12]
 801e41a:	f00f fa99 	bl	802d950 <strstr>
 801e41e:	4603      	mov	r3, r0
 801e420:	2b00      	cmp	r3, #0
 801e422:	d106      	bne.n	801e432 <find_http_uri_type+0xc2>
 801e424:	497e      	ldr	r1, [pc, #504]	; (801e620 <find_http_uri_type+0x2b0>)
 801e426:	68f8      	ldr	r0, [r7, #12]
 801e428:	f00f fa92 	bl	802d950 <strstr>
 801e42c:	4603      	mov	r3, r0
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d003      	beq.n	801e43a <find_http_uri_type+0xca>
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	2208      	movs	r2, #8
 801e436:	701a      	strb	r2, [r3, #0]
 801e438:	e0db      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e43a:	497a      	ldr	r1, [pc, #488]	; (801e624 <find_http_uri_type+0x2b4>)
 801e43c:	68f8      	ldr	r0, [r7, #12]
 801e43e:	f00f fa87 	bl	802d950 <strstr>
 801e442:	4603      	mov	r3, r0
 801e444:	2b00      	cmp	r3, #0
 801e446:	d106      	bne.n	801e456 <find_http_uri_type+0xe6>
 801e448:	4977      	ldr	r1, [pc, #476]	; (801e628 <find_http_uri_type+0x2b8>)
 801e44a:	68f8      	ldr	r0, [r7, #12]
 801e44c:	f00f fa80 	bl	802d950 <strstr>
 801e450:	4603      	mov	r3, r0
 801e452:	2b00      	cmp	r3, #0
 801e454:	d003      	beq.n	801e45e <find_http_uri_type+0xee>
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	220c      	movs	r2, #12
 801e45a:	701a      	strb	r2, [r3, #0]
 801e45c:	e0c9      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e45e:	4973      	ldr	r1, [pc, #460]	; (801e62c <find_http_uri_type+0x2bc>)
 801e460:	68f8      	ldr	r0, [r7, #12]
 801e462:	f00f fa75 	bl	802d950 <strstr>
 801e466:	4603      	mov	r3, r0
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d106      	bne.n	801e47a <find_http_uri_type+0x10a>
 801e46c:	4970      	ldr	r1, [pc, #448]	; (801e630 <find_http_uri_type+0x2c0>)
 801e46e:	68f8      	ldr	r0, [r7, #12]
 801e470:	f00f fa6e 	bl	802d950 <strstr>
 801e474:	4603      	mov	r3, r0
 801e476:	2b00      	cmp	r3, #0
 801e478:	d003      	beq.n	801e482 <find_http_uri_type+0x112>
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	220b      	movs	r2, #11
 801e47e:	701a      	strb	r2, [r3, #0]
 801e480:	e0b7      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e482:	4967      	ldr	r1, [pc, #412]	; (801e620 <find_http_uri_type+0x2b0>)
 801e484:	68f8      	ldr	r0, [r7, #12]
 801e486:	f00f fa63 	bl	802d950 <strstr>
 801e48a:	4603      	mov	r3, r0
 801e48c:	2b00      	cmp	r3, #0
 801e48e:	d106      	bne.n	801e49e <find_http_uri_type+0x12e>
 801e490:	4962      	ldr	r1, [pc, #392]	; (801e61c <find_http_uri_type+0x2ac>)
 801e492:	68f8      	ldr	r0, [r7, #12]
 801e494:	f00f fa5c 	bl	802d950 <strstr>
 801e498:	4603      	mov	r3, r0
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	d003      	beq.n	801e4a6 <find_http_uri_type+0x136>
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	2208      	movs	r2, #8
 801e4a2:	701a      	strb	r2, [r3, #0]
 801e4a4:	e0a5      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e4a6:	4963      	ldr	r1, [pc, #396]	; (801e634 <find_http_uri_type+0x2c4>)
 801e4a8:	68f8      	ldr	r0, [r7, #12]
 801e4aa:	f00f fa51 	bl	802d950 <strstr>
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d106      	bne.n	801e4c2 <find_http_uri_type+0x152>
 801e4b4:	4960      	ldr	r1, [pc, #384]	; (801e638 <find_http_uri_type+0x2c8>)
 801e4b6:	68f8      	ldr	r0, [r7, #12]
 801e4b8:	f00f fa4a 	bl	802d950 <strstr>
 801e4bc:	4603      	mov	r3, r0
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d003      	beq.n	801e4ca <find_http_uri_type+0x15a>
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	2209      	movs	r2, #9
 801e4c6:	701a      	strb	r2, [r3, #0]
 801e4c8:	e093      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e4ca:	495c      	ldr	r1, [pc, #368]	; (801e63c <find_http_uri_type+0x2cc>)
 801e4cc:	68f8      	ldr	r0, [r7, #12]
 801e4ce:	f00f fa3f 	bl	802d950 <strstr>
 801e4d2:	4603      	mov	r3, r0
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d106      	bne.n	801e4e6 <find_http_uri_type+0x176>
 801e4d8:	4959      	ldr	r1, [pc, #356]	; (801e640 <find_http_uri_type+0x2d0>)
 801e4da:	68f8      	ldr	r0, [r7, #12]
 801e4dc:	f00f fa38 	bl	802d950 <strstr>
 801e4e0:	4603      	mov	r3, r0
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d003      	beq.n	801e4ee <find_http_uri_type+0x17e>
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	220a      	movs	r2, #10
 801e4ea:	701a      	strb	r2, [r3, #0]
 801e4ec:	e081      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e4ee:	4955      	ldr	r1, [pc, #340]	; (801e644 <find_http_uri_type+0x2d4>)
 801e4f0:	68f8      	ldr	r0, [r7, #12]
 801e4f2:	f00f fa2d 	bl	802d950 <strstr>
 801e4f6:	4603      	mov	r3, r0
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d106      	bne.n	801e50a <find_http_uri_type+0x19a>
 801e4fc:	4952      	ldr	r1, [pc, #328]	; (801e648 <find_http_uri_type+0x2d8>)
 801e4fe:	68f8      	ldr	r0, [r7, #12]
 801e500:	f00f fa26 	bl	802d950 <strstr>
 801e504:	4603      	mov	r3, r0
 801e506:	2b00      	cmp	r3, #0
 801e508:	d003      	beq.n	801e512 <find_http_uri_type+0x1a2>
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	220d      	movs	r2, #13
 801e50e:	701a      	strb	r2, [r3, #0]
 801e510:	e06f      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e512:	494e      	ldr	r1, [pc, #312]	; (801e64c <find_http_uri_type+0x2dc>)
 801e514:	68f8      	ldr	r0, [r7, #12]
 801e516:	f00f fa1b 	bl	802d950 <strstr>
 801e51a:	4603      	mov	r3, r0
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d106      	bne.n	801e52e <find_http_uri_type+0x1be>
 801e520:	494b      	ldr	r1, [pc, #300]	; (801e650 <find_http_uri_type+0x2e0>)
 801e522:	68f8      	ldr	r0, [r7, #12]
 801e524:	f00f fa14 	bl	802d950 <strstr>
 801e528:	4603      	mov	r3, r0
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	d003      	beq.n	801e536 <find_http_uri_type+0x1c6>
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	220e      	movs	r2, #14
 801e532:	701a      	strb	r2, [r3, #0]
 801e534:	e05d      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e536:	4947      	ldr	r1, [pc, #284]	; (801e654 <find_http_uri_type+0x2e4>)
 801e538:	68f8      	ldr	r0, [r7, #12]
 801e53a:	f00f fa09 	bl	802d950 <strstr>
 801e53e:	4603      	mov	r3, r0
 801e540:	2b00      	cmp	r3, #0
 801e542:	d106      	bne.n	801e552 <find_http_uri_type+0x1e2>
 801e544:	4944      	ldr	r1, [pc, #272]	; (801e658 <find_http_uri_type+0x2e8>)
 801e546:	68f8      	ldr	r0, [r7, #12]
 801e548:	f00f fa02 	bl	802d950 <strstr>
 801e54c:	4603      	mov	r3, r0
 801e54e:	2b00      	cmp	r3, #0
 801e550:	d003      	beq.n	801e55a <find_http_uri_type+0x1ea>
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	2214      	movs	r2, #20
 801e556:	701a      	strb	r2, [r3, #0]
 801e558:	e04b      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e55a:	4940      	ldr	r1, [pc, #256]	; (801e65c <find_http_uri_type+0x2ec>)
 801e55c:	68f8      	ldr	r0, [r7, #12]
 801e55e:	f00f f9f7 	bl	802d950 <strstr>
 801e562:	4603      	mov	r3, r0
 801e564:	2b00      	cmp	r3, #0
 801e566:	d106      	bne.n	801e576 <find_http_uri_type+0x206>
 801e568:	493d      	ldr	r1, [pc, #244]	; (801e660 <find_http_uri_type+0x2f0>)
 801e56a:	68f8      	ldr	r0, [r7, #12]
 801e56c:	f00f f9f0 	bl	802d950 <strstr>
 801e570:	4603      	mov	r3, r0
 801e572:	2b00      	cmp	r3, #0
 801e574:	d003      	beq.n	801e57e <find_http_uri_type+0x20e>
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	2215      	movs	r2, #21
 801e57a:	701a      	strb	r2, [r3, #0]
 801e57c:	e039      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e57e:	4939      	ldr	r1, [pc, #228]	; (801e664 <find_http_uri_type+0x2f4>)
 801e580:	68f8      	ldr	r0, [r7, #12]
 801e582:	f00f f9e5 	bl	802d950 <strstr>
 801e586:	4603      	mov	r3, r0
 801e588:	2b00      	cmp	r3, #0
 801e58a:	d106      	bne.n	801e59a <find_http_uri_type+0x22a>
 801e58c:	4936      	ldr	r1, [pc, #216]	; (801e668 <find_http_uri_type+0x2f8>)
 801e58e:	68f8      	ldr	r0, [r7, #12]
 801e590:	f00f f9de 	bl	802d950 <strstr>
 801e594:	4603      	mov	r3, r0
 801e596:	2b00      	cmp	r3, #0
 801e598:	d003      	beq.n	801e5a2 <find_http_uri_type+0x232>
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	2216      	movs	r2, #22
 801e59e:	701a      	strb	r2, [r3, #0]
 801e5a0:	e027      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e5a2:	4932      	ldr	r1, [pc, #200]	; (801e66c <find_http_uri_type+0x2fc>)
 801e5a4:	68f8      	ldr	r0, [r7, #12]
 801e5a6:	f00f f9d3 	bl	802d950 <strstr>
 801e5aa:	4603      	mov	r3, r0
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d106      	bne.n	801e5be <find_http_uri_type+0x24e>
 801e5b0:	492f      	ldr	r1, [pc, #188]	; (801e670 <find_http_uri_type+0x300>)
 801e5b2:	68f8      	ldr	r0, [r7, #12]
 801e5b4:	f00f f9cc 	bl	802d950 <strstr>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d003      	beq.n	801e5c6 <find_http_uri_type+0x256>
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	2217      	movs	r2, #23
 801e5c2:	701a      	strb	r2, [r3, #0]
 801e5c4:	e015      	b.n	801e5f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e5c6:	492b      	ldr	r1, [pc, #172]	; (801e674 <find_http_uri_type+0x304>)
 801e5c8:	68f8      	ldr	r0, [r7, #12]
 801e5ca:	f00f f9c1 	bl	802d950 <strstr>
 801e5ce:	4603      	mov	r3, r0
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d106      	bne.n	801e5e2 <find_http_uri_type+0x272>
 801e5d4:	4928      	ldr	r1, [pc, #160]	; (801e678 <find_http_uri_type+0x308>)
 801e5d6:	68f8      	ldr	r0, [r7, #12]
 801e5d8:	f00f f9ba 	bl	802d950 <strstr>
 801e5dc:	4603      	mov	r3, r0
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d003      	beq.n	801e5ea <find_http_uri_type+0x27a>
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	2218      	movs	r2, #24
 801e5e6:	701a      	strb	r2, [r3, #0]
 801e5e8:	e003      	b.n	801e5f2 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	2200      	movs	r2, #0
 801e5ee:	701a      	strb	r2, [r3, #0]
}
 801e5f0:	e7ff      	b.n	801e5f2 <find_http_uri_type+0x282>
 801e5f2:	bf00      	nop
 801e5f4:	3710      	adds	r7, #16
 801e5f6:	46bd      	mov	sp, r7
 801e5f8:	bd80      	pop	{r7, pc}
 801e5fa:	bf00      	nop
 801e5fc:	080330fc 	.word	0x080330fc
 801e600:	08033104 	.word	0x08033104
 801e604:	0803310c 	.word	0x0803310c
 801e608:	08033114 	.word	0x08033114
 801e60c:	0803311c 	.word	0x0803311c
 801e610:	08033124 	.word	0x08033124
 801e614:	0803312c 	.word	0x0803312c
 801e618:	08033134 	.word	0x08033134
 801e61c:	0803313c 	.word	0x0803313c
 801e620:	08033144 	.word	0x08033144
 801e624:	0803314c 	.word	0x0803314c
 801e628:	08033154 	.word	0x08033154
 801e62c:	0803315c 	.word	0x0803315c
 801e630:	08033160 	.word	0x08033160
 801e634:	08033164 	.word	0x08033164
 801e638:	0803316c 	.word	0x0803316c
 801e63c:	08033174 	.word	0x08033174
 801e640:	0803317c 	.word	0x0803317c
 801e644:	08033184 	.word	0x08033184
 801e648:	0803318c 	.word	0x0803318c
 801e64c:	08033194 	.word	0x08033194
 801e650:	0803319c 	.word	0x0803319c
 801e654:	080331a4 	.word	0x080331a4
 801e658:	080331ac 	.word	0x080331ac
 801e65c:	080331b4 	.word	0x080331b4
 801e660:	080331bc 	.word	0x080331bc
 801e664:	080331c4 	.word	0x080331c4
 801e668:	080331cc 	.word	0x080331cc
 801e66c:	080331d4 	.word	0x080331d4
 801e670:	080331dc 	.word	0x080331dc
 801e674:	080331e4 	.word	0x080331e4
 801e678:	080331ec 	.word	0x080331ec

0801e67c <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801e67c:	b580      	push	{r7, lr}
 801e67e:	b084      	sub	sp, #16
 801e680:	af00      	add	r7, sp, #0
 801e682:	6078      	str	r0, [r7, #4]
 801e684:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801e686:	4935      	ldr	r1, [pc, #212]	; (801e75c <parse_http_request+0xe0>)
 801e688:	6838      	ldr	r0, [r7, #0]
 801e68a:	f00f f905 	bl	802d898 <strtok>
 801e68e:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801e690:	68fb      	ldr	r3, [r7, #12]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d103      	bne.n	801e69e <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	2200      	movs	r2, #0
 801e69a:	701a      	strb	r2, [r3, #0]
    return;
 801e69c:	e05a      	b.n	801e754 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801e69e:	4930      	ldr	r1, [pc, #192]	; (801e760 <parse_http_request+0xe4>)
 801e6a0:	68f8      	ldr	r0, [r7, #12]
 801e6a2:	f7f1 fd9d 	bl	80101e0 <strcmp>
 801e6a6:	4603      	mov	r3, r0
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d006      	beq.n	801e6ba <parse_http_request+0x3e>
 801e6ac:	492d      	ldr	r1, [pc, #180]	; (801e764 <parse_http_request+0xe8>)
 801e6ae:	68f8      	ldr	r0, [r7, #12]
 801e6b0:	f7f1 fd96 	bl	80101e0 <strcmp>
 801e6b4:	4603      	mov	r3, r0
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d10a      	bne.n	801e6d0 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	2201      	movs	r2, #1
 801e6be:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801e6c0:	68fb      	ldr	r3, [r7, #12]
 801e6c2:	3304      	adds	r3, #4
 801e6c4:	4925      	ldr	r1, [pc, #148]	; (801e75c <parse_http_request+0xe0>)
 801e6c6:	4618      	mov	r0, r3
 801e6c8:	f00f f8e6 	bl	802d898 <strtok>
 801e6cc:	60f8      	str	r0, [r7, #12]
 801e6ce:	e034      	b.n	801e73a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801e6d0:	4925      	ldr	r1, [pc, #148]	; (801e768 <parse_http_request+0xec>)
 801e6d2:	68f8      	ldr	r0, [r7, #12]
 801e6d4:	f7f1 fd84 	bl	80101e0 <strcmp>
 801e6d8:	4603      	mov	r3, r0
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d006      	beq.n	801e6ec <parse_http_request+0x70>
 801e6de:	4923      	ldr	r1, [pc, #140]	; (801e76c <parse_http_request+0xf0>)
 801e6e0:	68f8      	ldr	r0, [r7, #12]
 801e6e2:	f7f1 fd7d 	bl	80101e0 <strcmp>
 801e6e6:	4603      	mov	r3, r0
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	d10a      	bne.n	801e702 <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	2202      	movs	r2, #2
 801e6f0:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801e6f2:	68fb      	ldr	r3, [r7, #12]
 801e6f4:	3305      	adds	r3, #5
 801e6f6:	4919      	ldr	r1, [pc, #100]	; (801e75c <parse_http_request+0xe0>)
 801e6f8:	4618      	mov	r0, r3
 801e6fa:	f00f f8cd 	bl	802d898 <strtok>
 801e6fe:	60f8      	str	r0, [r7, #12]
 801e700:	e01b      	b.n	801e73a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801e702:	491b      	ldr	r1, [pc, #108]	; (801e770 <parse_http_request+0xf4>)
 801e704:	68f8      	ldr	r0, [r7, #12]
 801e706:	f7f1 fd6b 	bl	80101e0 <strcmp>
 801e70a:	4603      	mov	r3, r0
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d006      	beq.n	801e71e <parse_http_request+0xa2>
 801e710:	4918      	ldr	r1, [pc, #96]	; (801e774 <parse_http_request+0xf8>)
 801e712:	68f8      	ldr	r0, [r7, #12]
 801e714:	f7f1 fd64 	bl	80101e0 <strcmp>
 801e718:	4603      	mov	r3, r0
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d10a      	bne.n	801e734 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	3305      	adds	r3, #5
 801e722:	4915      	ldr	r1, [pc, #84]	; (801e778 <parse_http_request+0xfc>)
 801e724:	4618      	mov	r0, r3
 801e726:	f00f f8b7 	bl	802d898 <strtok>
 801e72a:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	2203      	movs	r2, #3
 801e730:	701a      	strb	r2, [r3, #0]
 801e732:	e002      	b.n	801e73a <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	2200      	movs	r2, #0
 801e738:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d103      	bne.n	801e748 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	2200      	movs	r2, #0
 801e744:	701a      	strb	r2, [r3, #0]
    return;
 801e746:	e005      	b.n	801e754 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	3302      	adds	r3, #2
 801e74c:	68f9      	ldr	r1, [r7, #12]
 801e74e:	4618      	mov	r0, r3
 801e750:	f00f f9f1 	bl	802db36 <strcpy>
}
 801e754:	3710      	adds	r7, #16
 801e756:	46bd      	mov	sp, r7
 801e758:	bd80      	pop	{r7, pc}
 801e75a:	bf00      	nop
 801e75c:	080331f4 	.word	0x080331f4
 801e760:	080331f8 	.word	0x080331f8
 801e764:	080331fc 	.word	0x080331fc
 801e768:	08033200 	.word	0x08033200
 801e76c:	08033208 	.word	0x08033208
 801e770:	08033210 	.word	0x08033210
 801e774:	08033218 	.word	0x08033218
 801e778:	08033220 	.word	0x08033220

0801e77c <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801e77c:	b580      	push	{r7, lr}
 801e77e:	b08a      	sub	sp, #40	; 0x28
 801e780:	af00      	add	r7, sp, #0
 801e782:	6078      	str	r0, [r7, #4]
 801e784:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801e786:	2300      	movs	r3, #0
 801e788:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801e78a:	4b3c      	ldr	r3, [pc, #240]	; (801e87c <get_http_param_value+0x100>)
 801e78c:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801e78e:	2300      	movs	r3, #0
 801e790:	837b      	strh	r3, [r7, #26]
 801e792:	2300      	movs	r3, #0
 801e794:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801e796:	2300      	movs	r3, #0
 801e798:	60bb      	str	r3, [r7, #8]
 801e79a:	f107 030c 	add.w	r3, r7, #12
 801e79e:	2200      	movs	r2, #0
 801e7a0:	601a      	str	r2, [r3, #0]
 801e7a2:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d002      	beq.n	801e7b0 <get_http_param_value+0x34>
 801e7aa:	683b      	ldr	r3, [r7, #0]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d101      	bne.n	801e7b4 <get_http_param_value+0x38>
 801e7b0:	2300      	movs	r3, #0
 801e7b2:	e05f      	b.n	801e874 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801e7b4:	f107 0308 	add.w	r3, r7, #8
 801e7b8:	4a31      	ldr	r2, [pc, #196]	; (801e880 <get_http_param_value+0x104>)
 801e7ba:	4932      	ldr	r1, [pc, #200]	; (801e884 <get_http_param_value+0x108>)
 801e7bc:	6878      	ldr	r0, [r7, #4]
 801e7be:	f000 f8b4 	bl	801e92a <mid>
 801e7c2:	4603      	mov	r3, r0
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d001      	beq.n	801e7cc <get_http_param_value+0x50>
		return 0;
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	e053      	b.n	801e874 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801e7cc:	f107 0308 	add.w	r3, r7, #8
 801e7d0:	210a      	movs	r1, #10
 801e7d2:	4618      	mov	r0, r3
 801e7d4:	f000 f884 	bl	801e8e0 <ATOI>
 801e7d8:	4603      	mov	r3, r0
 801e7da:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801e7dc:	492a      	ldr	r1, [pc, #168]	; (801e888 <get_http_param_value+0x10c>)
 801e7de:	6878      	ldr	r0, [r7, #4]
 801e7e0:	f00f f8b6 	bl	802d950 <strstr>
 801e7e4:	6078      	str	r0, [r7, #4]
	uri += 4;
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	3304      	adds	r3, #4
 801e7ea:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801e7ec:	8b3b      	ldrh	r3, [r7, #24]
 801e7ee:	687a      	ldr	r2, [r7, #4]
 801e7f0:	4413      	add	r3, r2
 801e7f2:	2200      	movs	r2, #0
 801e7f4:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801e7f6:	6839      	ldr	r1, [r7, #0]
 801e7f8:	6878      	ldr	r0, [r7, #4]
 801e7fa:	f00f f8a9 	bl	802d950 <strstr>
 801e7fe:	6238      	str	r0, [r7, #32]
 801e800:	6a3b      	ldr	r3, [r7, #32]
 801e802:	2b00      	cmp	r3, #0
 801e804:	d033      	beq.n	801e86e <get_http_param_value+0xf2>
	{
		test = name + 1;
 801e806:	6a3b      	ldr	r3, [r7, #32]
 801e808:	3301      	adds	r3, #1
 801e80a:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801e80c:	6838      	ldr	r0, [r7, #0]
 801e80e:	f7f1 fd47 	bl	80102a0 <strlen>
 801e812:	4603      	mov	r3, r0
 801e814:	3301      	adds	r3, #1
 801e816:	6a3a      	ldr	r2, [r7, #32]
 801e818:	4413      	add	r3, r2
 801e81a:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801e81c:	2126      	movs	r1, #38	; 0x26
 801e81e:	6a38      	ldr	r0, [r7, #32]
 801e820:	f00e ffd3 	bl	802d7ca <strchr>
 801e824:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 801e826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d106      	bne.n	801e83a <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801e82c:	6a38      	ldr	r0, [r7, #32]
 801e82e:	f7f1 fd37 	bl	80102a0 <strlen>
 801e832:	4602      	mov	r2, r0
 801e834:	6a3b      	ldr	r3, [r7, #32]
 801e836:	4413      	add	r3, r2
 801e838:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801e83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e83c:	6a3b      	ldr	r3, [r7, #32]
 801e83e:	1ad3      	subs	r3, r2, r3
 801e840:	837b      	strh	r3, [r7, #26]

		if(len)
 801e842:	8b7b      	ldrh	r3, [r7, #26]
 801e844:	2b00      	cmp	r3, #0
 801e846:	d00e      	beq.n	801e866 <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801e848:	8b7b      	ldrh	r3, [r7, #26]
 801e84a:	69fa      	ldr	r2, [r7, #28]
 801e84c:	4413      	add	r3, r2
 801e84e:	2200      	movs	r2, #0
 801e850:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801e852:	8b7b      	ldrh	r3, [r7, #26]
 801e854:	461a      	mov	r2, r3
 801e856:	6a39      	ldr	r1, [r7, #32]
 801e858:	69f8      	ldr	r0, [r7, #28]
 801e85a:	f00e fff9 	bl	802d850 <strncpy>
			unescape_http_url((char *)ret);
 801e85e:	69f8      	ldr	r0, [r7, #28]
 801e860:	f7ff fc88 	bl	801e174 <unescape_http_url>
 801e864:	e005      	b.n	801e872 <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801e866:	69fb      	ldr	r3, [r7, #28]
 801e868:	2200      	movs	r2, #0
 801e86a:	701a      	strb	r2, [r3, #0]
 801e86c:	e001      	b.n	801e872 <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801e86e:	2300      	movs	r3, #0
 801e870:	e000      	b.n	801e874 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801e872:	69fb      	ldr	r3, [r7, #28]
}
 801e874:	4618      	mov	r0, r3
 801e876:	3728      	adds	r7, #40	; 0x28
 801e878:	46bd      	mov	sp, r7
 801e87a:	bd80      	pop	{r7, pc}
 801e87c:	200009d8 	.word	0x200009d8
 801e880:	08033224 	.word	0x08033224
 801e884:	08033228 	.word	0x08033228
 801e888:	080330f4 	.word	0x080330f4

0801e88c <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801e88c:	b580      	push	{r7, lr}
 801e88e:	b084      	sub	sp, #16
 801e890:	af00      	add	r7, sp, #0
 801e892:	6078      	str	r0, [r7, #4]
 801e894:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d101      	bne.n	801e8a0 <get_http_uri_name+0x14>
 801e89c:	2300      	movs	r3, #0
 801e89e:	e017      	b.n	801e8d0 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801e8a0:	6879      	ldr	r1, [r7, #4]
 801e8a2:	6838      	ldr	r0, [r7, #0]
 801e8a4:	f00f f947 	bl	802db36 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801e8a8:	490b      	ldr	r1, [pc, #44]	; (801e8d8 <get_http_uri_name+0x4c>)
 801e8aa:	6838      	ldr	r0, [r7, #0]
 801e8ac:	f00e fff4 	bl	802d898 <strtok>
 801e8b0:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801e8b2:	490a      	ldr	r1, [pc, #40]	; (801e8dc <get_http_uri_name+0x50>)
 801e8b4:	68f8      	ldr	r0, [r7, #12]
 801e8b6:	f7f1 fc93 	bl	80101e0 <strcmp>
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d002      	beq.n	801e8c6 <get_http_uri_name+0x3a>
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	3301      	adds	r3, #1
 801e8c4:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801e8c6:	68f9      	ldr	r1, [r7, #12]
 801e8c8:	6838      	ldr	r0, [r7, #0]
 801e8ca:	f00f f934 	bl	802db36 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801e8ce:	2301      	movs	r3, #1
}
 801e8d0:	4618      	mov	r0, r3
 801e8d2:	3710      	adds	r7, #16
 801e8d4:	46bd      	mov	sp, r7
 801e8d6:	bd80      	pop	{r7, pc}
 801e8d8:	0803323c 	.word	0x0803323c
 801e8dc:	08033240 	.word	0x08033240

0801e8e0 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801e8e0:	b590      	push	{r4, r7, lr}
 801e8e2:	b085      	sub	sp, #20
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
 801e8e8:	460b      	mov	r3, r1
 801e8ea:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e8f0:	e00d      	b.n	801e90e <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801e8f2:	78fb      	ldrb	r3, [r7, #3]
 801e8f4:	68fa      	ldr	r2, [r7, #12]
 801e8f6:	fb02 f403 	mul.w	r4, r2, r3
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	1c5a      	adds	r2, r3, #1
 801e8fe:	607a      	str	r2, [r7, #4]
 801e900:	781b      	ldrb	r3, [r3, #0]
 801e902:	4618      	mov	r0, r3
 801e904:	f000 f843 	bl	801e98e <C2D>
 801e908:	4603      	mov	r3, r0
 801e90a:	4423      	add	r3, r4
 801e90c:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	781b      	ldrb	r3, [r3, #0]
 801e912:	2b00      	cmp	r3, #0
 801e914:	d003      	beq.n	801e91e <ATOI+0x3e>
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	781b      	ldrb	r3, [r3, #0]
 801e91a:	2b20      	cmp	r3, #32
 801e91c:	d1e9      	bne.n	801e8f2 <ATOI+0x12>
	return num;
 801e91e:	68fb      	ldr	r3, [r7, #12]
 801e920:	b29b      	uxth	r3, r3
}
 801e922:	4618      	mov	r0, r3
 801e924:	3714      	adds	r7, #20
 801e926:	46bd      	mov	sp, r7
 801e928:	bd90      	pop	{r4, r7, pc}

0801e92a <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801e92a:	b580      	push	{r7, lr}
 801e92c:	b088      	sub	sp, #32
 801e92e:	af00      	add	r7, sp, #0
 801e930:	60f8      	str	r0, [r7, #12]
 801e932:	60b9      	str	r1, [r7, #8]
 801e934:	607a      	str	r2, [r7, #4]
 801e936:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801e938:	68b9      	ldr	r1, [r7, #8]
 801e93a:	68f8      	ldr	r0, [r7, #12]
 801e93c:	f00f f808 	bl	802d950 <strstr>
 801e940:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801e942:	69fb      	ldr	r3, [r7, #28]
 801e944:	2b00      	cmp	r3, #0
 801e946:	d102      	bne.n	801e94e <mid+0x24>
 801e948:	f04f 33ff 	mov.w	r3, #4294967295
 801e94c:	e01b      	b.n	801e986 <mid+0x5c>
	sub1+=strlen((char*)s1);
 801e94e:	68b8      	ldr	r0, [r7, #8]
 801e950:	f7f1 fca6 	bl	80102a0 <strlen>
 801e954:	4602      	mov	r2, r0
 801e956:	69fb      	ldr	r3, [r7, #28]
 801e958:	4413      	add	r3, r2
 801e95a:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801e95c:	6879      	ldr	r1, [r7, #4]
 801e95e:	69f8      	ldr	r0, [r7, #28]
 801e960:	f00e fff6 	bl	802d950 <strstr>
 801e964:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801e966:	69ba      	ldr	r2, [r7, #24]
 801e968:	69fb      	ldr	r3, [r7, #28]
 801e96a:	1ad3      	subs	r3, r2, r3
 801e96c:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801e96e:	8afb      	ldrh	r3, [r7, #22]
 801e970:	461a      	mov	r2, r3
 801e972:	69f9      	ldr	r1, [r7, #28]
 801e974:	6838      	ldr	r0, [r7, #0]
 801e976:	f00e ff6b 	bl	802d850 <strncpy>
	sub[n]='\0';
 801e97a:	8afb      	ldrh	r3, [r7, #22]
 801e97c:	683a      	ldr	r2, [r7, #0]
 801e97e:	4413      	add	r3, r2
 801e980:	2200      	movs	r2, #0
 801e982:	701a      	strb	r2, [r3, #0]
	return 0;
 801e984:	2300      	movs	r3, #0
}
 801e986:	4618      	mov	r0, r3
 801e988:	3720      	adds	r7, #32
 801e98a:	46bd      	mov	sp, r7
 801e98c:	bd80      	pop	{r7, pc}

0801e98e <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801e98e:	b480      	push	{r7}
 801e990:	b083      	sub	sp, #12
 801e992:	af00      	add	r7, sp, #0
 801e994:	4603      	mov	r3, r0
 801e996:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801e998:	79fb      	ldrb	r3, [r7, #7]
 801e99a:	2b2f      	cmp	r3, #47	; 0x2f
 801e99c:	d906      	bls.n	801e9ac <C2D+0x1e>
 801e99e:	79fb      	ldrb	r3, [r7, #7]
 801e9a0:	2b39      	cmp	r3, #57	; 0x39
 801e9a2:	d803      	bhi.n	801e9ac <C2D+0x1e>
		return c - '0';
 801e9a4:	79fb      	ldrb	r3, [r7, #7]
 801e9a6:	3b30      	subs	r3, #48	; 0x30
 801e9a8:	b2db      	uxtb	r3, r3
 801e9aa:	e014      	b.n	801e9d6 <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801e9ac:	79fb      	ldrb	r3, [r7, #7]
 801e9ae:	2b60      	cmp	r3, #96	; 0x60
 801e9b0:	d906      	bls.n	801e9c0 <C2D+0x32>
 801e9b2:	79fb      	ldrb	r3, [r7, #7]
 801e9b4:	2b66      	cmp	r3, #102	; 0x66
 801e9b6:	d803      	bhi.n	801e9c0 <C2D+0x32>
		return 10 + c -'a';
 801e9b8:	79fb      	ldrb	r3, [r7, #7]
 801e9ba:	3b57      	subs	r3, #87	; 0x57
 801e9bc:	b2db      	uxtb	r3, r3
 801e9be:	e00a      	b.n	801e9d6 <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801e9c0:	79fb      	ldrb	r3, [r7, #7]
 801e9c2:	2b40      	cmp	r3, #64	; 0x40
 801e9c4:	d906      	bls.n	801e9d4 <C2D+0x46>
 801e9c6:	79fb      	ldrb	r3, [r7, #7]
 801e9c8:	2b46      	cmp	r3, #70	; 0x46
 801e9ca:	d803      	bhi.n	801e9d4 <C2D+0x46>
		return 10 + c -'A';
 801e9cc:	79fb      	ldrb	r3, [r7, #7]
 801e9ce:	3b37      	subs	r3, #55	; 0x37
 801e9d0:	b2db      	uxtb	r3, r3
 801e9d2:	e000      	b.n	801e9d6 <C2D+0x48>

	return (char)c;
 801e9d4:	79fb      	ldrb	r3, [r7, #7]
}
 801e9d6:	4618      	mov	r0, r3
 801e9d8:	370c      	adds	r7, #12
 801e9da:	46bd      	mov	sp, r7
 801e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e0:	4770      	bx	lr

0801e9e2 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801e9e2:	b480      	push	{r7}
 801e9e4:	af00      	add	r7, sp, #0
 801e9e6:	bf00      	nop
 801e9e8:	46bd      	mov	sp, r7
 801e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ee:	4770      	bx	lr

0801e9f0 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801e9f0:	b480      	push	{r7}
 801e9f2:	af00      	add	r7, sp, #0
 801e9f4:	bf00      	nop
 801e9f6:	46bd      	mov	sp, r7
 801e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9fc:	4770      	bx	lr
	...

0801ea00 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801ea00:	b480      	push	{r7}
 801ea02:	b085      	sub	sp, #20
 801ea04:	af00      	add	r7, sp, #0
 801ea06:	4603      	mov	r3, r0
 801ea08:	6039      	str	r1, [r7, #0]
 801ea0a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801ea0c:	2300      	movs	r3, #0
 801ea0e:	73fb      	strb	r3, [r7, #15]
 801ea10:	e009      	b.n	801ea26 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801ea12:	7bfb      	ldrb	r3, [r7, #15]
 801ea14:	683a      	ldr	r2, [r7, #0]
 801ea16:	441a      	add	r2, r3
 801ea18:	7bfb      	ldrb	r3, [r7, #15]
 801ea1a:	7811      	ldrb	r1, [r2, #0]
 801ea1c:	4a07      	ldr	r2, [pc, #28]	; (801ea3c <httpServer_Sockinit+0x3c>)
 801ea1e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801ea20:	7bfb      	ldrb	r3, [r7, #15]
 801ea22:	3301      	adds	r3, #1
 801ea24:	73fb      	strb	r3, [r7, #15]
 801ea26:	7bfa      	ldrb	r2, [r7, #15]
 801ea28:	79fb      	ldrb	r3, [r7, #7]
 801ea2a:	429a      	cmp	r2, r3
 801ea2c:	d3f1      	bcc.n	801ea12 <httpServer_Sockinit+0x12>
	}
}
 801ea2e:	bf00      	nop
 801ea30:	bf00      	nop
 801ea32:	3714      	adds	r7, #20
 801ea34:	46bd      	mov	sp, r7
 801ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea3a:	4770      	bx	lr
 801ea3c:	200011d8 	.word	0x200011d8

0801ea40 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801ea40:	b480      	push	{r7}
 801ea42:	b083      	sub	sp, #12
 801ea44:	af00      	add	r7, sp, #0
 801ea46:	4603      	mov	r3, r0
 801ea48:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801ea4a:	79fb      	ldrb	r3, [r7, #7]
 801ea4c:	4a03      	ldr	r2, [pc, #12]	; (801ea5c <getHTTPSocketNum+0x1c>)
 801ea4e:	5cd3      	ldrb	r3, [r2, r3]
}
 801ea50:	4618      	mov	r0, r3
 801ea52:	370c      	adds	r7, #12
 801ea54:	46bd      	mov	sp, r7
 801ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea5a:	4770      	bx	lr
 801ea5c:	200011d8 	.word	0x200011d8

0801ea60 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801ea60:	b480      	push	{r7}
 801ea62:	b085      	sub	sp, #20
 801ea64:	af00      	add	r7, sp, #0
 801ea66:	4603      	mov	r3, r0
 801ea68:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ea6a:	2300      	movs	r3, #0
 801ea6c:	73fb      	strb	r3, [r7, #15]
 801ea6e:	e00b      	b.n	801ea88 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801ea70:	7bfb      	ldrb	r3, [r7, #15]
 801ea72:	4a0b      	ldr	r2, [pc, #44]	; (801eaa0 <getHTTPSequenceNum+0x40>)
 801ea74:	5cd3      	ldrb	r3, [r2, r3]
 801ea76:	79fa      	ldrb	r2, [r7, #7]
 801ea78:	429a      	cmp	r2, r3
 801ea7a:	d102      	bne.n	801ea82 <getHTTPSequenceNum+0x22>
 801ea7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ea80:	e007      	b.n	801ea92 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ea82:	7bfb      	ldrb	r3, [r7, #15]
 801ea84:	3301      	adds	r3, #1
 801ea86:	73fb      	strb	r3, [r7, #15]
 801ea88:	7bfb      	ldrb	r3, [r7, #15]
 801ea8a:	2b07      	cmp	r3, #7
 801ea8c:	d9f0      	bls.n	801ea70 <getHTTPSequenceNum+0x10>

	return -1;
 801ea8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ea92:	4618      	mov	r0, r3
 801ea94:	3714      	adds	r7, #20
 801ea96:	46bd      	mov	sp, r7
 801ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea9c:	4770      	bx	lr
 801ea9e:	bf00      	nop
 801eaa0:	200011d8 	.word	0x200011d8

0801eaa4 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801eaa4:	b580      	push	{r7, lr}
 801eaa6:	b084      	sub	sp, #16
 801eaa8:	af00      	add	r7, sp, #0
 801eaaa:	60f8      	str	r0, [r7, #12]
 801eaac:	60b9      	str	r1, [r7, #8]
 801eaae:	603b      	str	r3, [r7, #0]
 801eab0:	4613      	mov	r3, r2
 801eab2:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801eab4:	4a07      	ldr	r2, [pc, #28]	; (801ead4 <httpServer_init+0x30>)
 801eab6:	68fb      	ldr	r3, [r7, #12]
 801eab8:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801eaba:	4a07      	ldr	r2, [pc, #28]	; (801ead8 <httpServer_init+0x34>)
 801eabc:	68bb      	ldr	r3, [r7, #8]
 801eabe:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801eac0:	79fb      	ldrb	r3, [r7, #7]
 801eac2:	6839      	ldr	r1, [r7, #0]
 801eac4:	4618      	mov	r0, r3
 801eac6:	f7ff ff9b 	bl	801ea00 <httpServer_Sockinit>
}
 801eaca:	bf00      	nop
 801eacc:	3710      	adds	r7, #16
 801eace:	46bd      	mov	sp, r7
 801ead0:	bd80      	pop	{r7, pc}
 801ead2:	bf00      	nop
 801ead4:	200012b8 	.word	0x200012b8
 801ead8:	200012bc 	.word	0x200012bc

0801eadc <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801eadc:	b590      	push	{r4, r7, lr}
 801eade:	b089      	sub	sp, #36	; 0x24
 801eae0:	af02      	add	r7, sp, #8
 801eae2:	4603      	mov	r3, r0
 801eae4:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801eae6:	2300      	movs	r3, #0
 801eae8:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801eaea:	4bb4      	ldr	r3, [pc, #720]	; (801edbc <httpServer_run+0x2e0>)
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	4ab4      	ldr	r2, [pc, #720]	; (801edc0 <httpServer_run+0x2e4>)
 801eaf0:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801eaf2:	4bb4      	ldr	r3, [pc, #720]	; (801edc4 <httpServer_run+0x2e8>)
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	4ab4      	ldr	r2, [pc, #720]	; (801edc8 <httpServer_run+0x2ec>)
 801eaf8:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801eafa:	79fb      	ldrb	r3, [r7, #7]
 801eafc:	4618      	mov	r0, r3
 801eafe:	f7ff ff9f 	bl	801ea40 <getHTTPSocketNum>
 801eb02:	4603      	mov	r3, r0
 801eb04:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801eb06:	7bfb      	ldrb	r3, [r7, #15]
 801eb08:	009b      	lsls	r3, r3, #2
 801eb0a:	3301      	adds	r3, #1
 801eb0c:	00db      	lsls	r3, r3, #3
 801eb0e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801eb12:	4618      	mov	r0, r3
 801eb14:	f7f9 fda0 	bl	8018658 <WIZCHIP_READ>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801eb1c:	7bfb      	ldrb	r3, [r7, #15]
 801eb1e:	009b      	lsls	r3, r3, #2
 801eb20:	3301      	adds	r3, #1
 801eb22:	00db      	lsls	r3, r3, #3
 801eb24:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801eb28:	4618      	mov	r0, r3
 801eb2a:	f7f9 fd95 	bl	8018658 <WIZCHIP_READ>
 801eb2e:	4603      	mov	r3, r0
 801eb30:	2b1c      	cmp	r3, #28
 801eb32:	f200 813e 	bhi.w	801edb2 <httpServer_run+0x2d6>
 801eb36:	a201      	add	r2, pc, #4	; (adr r2, 801eb3c <httpServer_run+0x60>)
 801eb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eb3c:	0801ed9b 	.word	0x0801ed9b
 801eb40:	0801edb3 	.word	0x0801edb3
 801eb44:	0801edb3 	.word	0x0801edb3
 801eb48:	0801edb3 	.word	0x0801edb3
 801eb4c:	0801edb3 	.word	0x0801edb3
 801eb50:	0801edb3 	.word	0x0801edb3
 801eb54:	0801edb3 	.word	0x0801edb3
 801eb58:	0801edb3 	.word	0x0801edb3
 801eb5c:	0801edb3 	.word	0x0801edb3
 801eb60:	0801edb3 	.word	0x0801edb3
 801eb64:	0801edb3 	.word	0x0801edb3
 801eb68:	0801edb3 	.word	0x0801edb3
 801eb6c:	0801edb3 	.word	0x0801edb3
 801eb70:	0801edb3 	.word	0x0801edb3
 801eb74:	0801edb3 	.word	0x0801edb3
 801eb78:	0801edb3 	.word	0x0801edb3
 801eb7c:	0801edb3 	.word	0x0801edb3
 801eb80:	0801edb3 	.word	0x0801edb3
 801eb84:	0801edb3 	.word	0x0801edb3
 801eb88:	0801eda9 	.word	0x0801eda9
 801eb8c:	0801edb3 	.word	0x0801edb3
 801eb90:	0801edb3 	.word	0x0801edb3
 801eb94:	0801edb3 	.word	0x0801edb3
 801eb98:	0801ebb1 	.word	0x0801ebb1
 801eb9c:	0801edb3 	.word	0x0801edb3
 801eba0:	0801edb3 	.word	0x0801edb3
 801eba4:	0801edb3 	.word	0x0801edb3
 801eba8:	0801edb3 	.word	0x0801edb3
 801ebac:	0801ed91 	.word	0x0801ed91
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801ebb0:	7bfb      	ldrb	r3, [r7, #15]
 801ebb2:	009b      	lsls	r3, r3, #2
 801ebb4:	3301      	adds	r3, #1
 801ebb6:	00db      	lsls	r3, r3, #3
 801ebb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801ebbc:	4618      	mov	r0, r3
 801ebbe:	f7f9 fd4b 	bl	8018658 <WIZCHIP_READ>
 801ebc2:	4603      	mov	r3, r0
 801ebc4:	f003 0301 	and.w	r3, r3, #1
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d009      	beq.n	801ebe0 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801ebcc:	7bfb      	ldrb	r3, [r7, #15]
 801ebce:	009b      	lsls	r3, r3, #2
 801ebd0:	3301      	adds	r3, #1
 801ebd2:	00db      	lsls	r3, r3, #3
 801ebd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801ebd8:	2101      	movs	r1, #1
 801ebda:	4618      	mov	r0, r3
 801ebdc:	f7f9 fd88 	bl	80186f0 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801ebe0:	79fa      	ldrb	r2, [r7, #7]
 801ebe2:	497a      	ldr	r1, [pc, #488]	; (801edcc <httpServer_run+0x2f0>)
 801ebe4:	4613      	mov	r3, r2
 801ebe6:	011b      	lsls	r3, r3, #4
 801ebe8:	4413      	add	r3, r2
 801ebea:	009b      	lsls	r3, r3, #2
 801ebec:	440b      	add	r3, r1
 801ebee:	781b      	ldrb	r3, [r3, #0]
 801ebf0:	2b04      	cmp	r3, #4
 801ebf2:	f000 809b 	beq.w	801ed2c <httpServer_run+0x250>
 801ebf6:	2b04      	cmp	r3, #4
 801ebf8:	f300 80c4 	bgt.w	801ed84 <httpServer_run+0x2a8>
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d002      	beq.n	801ec06 <httpServer_run+0x12a>
 801ec00:	2b03      	cmp	r3, #3
 801ec02:	d06e      	beq.n	801ece2 <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801ec04:	e0be      	b.n	801ed84 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801ec06:	7bfb      	ldrb	r3, [r7, #15]
 801ec08:	4618      	mov	r0, r3
 801ec0a:	f7f9 feca 	bl	80189a2 <getSn_RX_RSR>
 801ec0e:	4603      	mov	r3, r0
 801ec10:	82fb      	strh	r3, [r7, #22]
 801ec12:	8afb      	ldrh	r3, [r7, #22]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	f000 80b7 	beq.w	801ed88 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801ec1a:	8afb      	ldrh	r3, [r7, #22]
 801ec1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ec20:	d902      	bls.n	801ec28 <httpServer_run+0x14c>
 801ec22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ec26:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801ec28:	4b65      	ldr	r3, [pc, #404]	; (801edc0 <httpServer_run+0x2e4>)
 801ec2a:	6819      	ldr	r1, [r3, #0]
 801ec2c:	8afa      	ldrh	r2, [r7, #22]
 801ec2e:	7bfb      	ldrb	r3, [r7, #15]
 801ec30:	4618      	mov	r0, r3
 801ec32:	f7fa fc29 	bl	8019488 <recv>
 801ec36:	4603      	mov	r3, r0
 801ec38:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801ec3a:	4b61      	ldr	r3, [pc, #388]	; (801edc0 <httpServer_run+0x2e4>)
 801ec3c:	681a      	ldr	r2, [r3, #0]
 801ec3e:	8afb      	ldrh	r3, [r7, #22]
 801ec40:	4413      	add	r3, r2
 801ec42:	2200      	movs	r2, #0
 801ec44:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801ec46:	4b60      	ldr	r3, [pc, #384]	; (801edc8 <httpServer_run+0x2ec>)
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	4a5d      	ldr	r2, [pc, #372]	; (801edc0 <httpServer_run+0x2e4>)
 801ec4c:	6812      	ldr	r2, [r2, #0]
 801ec4e:	4611      	mov	r1, r2
 801ec50:	4618      	mov	r0, r3
 801ec52:	f7ff fd13 	bl	801e67c <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801ec56:	4b5c      	ldr	r3, [pc, #368]	; (801edc8 <httpServer_run+0x2ec>)
 801ec58:	681a      	ldr	r2, [r3, #0]
 801ec5a:	7bfb      	ldrb	r3, [r7, #15]
 801ec5c:	4611      	mov	r1, r2
 801ec5e:	4618      	mov	r0, r3
 801ec60:	f000 fac4 	bl	801f1ec <http_process_handler>
						gettime = get_httpServer_timecount();
 801ec64:	f000 fd04 	bl	801f670 <get_httpServer_timecount>
 801ec68:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ec6a:	e006      	b.n	801ec7a <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801ec6c:	f000 fd00 	bl	801f670 <get_httpServer_timecount>
 801ec70:	4602      	mov	r2, r0
 801ec72:	693b      	ldr	r3, [r7, #16]
 801ec74:	1ad3      	subs	r3, r2, r3
 801ec76:	2b03      	cmp	r3, #3
 801ec78:	d813      	bhi.n	801eca2 <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ec7a:	7bfb      	ldrb	r3, [r7, #15]
 801ec7c:	4618      	mov	r0, r3
 801ec7e:	f7f9 fe45 	bl	801890c <getSn_TX_FSR>
 801ec82:	4603      	mov	r3, r0
 801ec84:	461c      	mov	r4, r3
 801ec86:	7bfb      	ldrb	r3, [r7, #15]
 801ec88:	009b      	lsls	r3, r3, #2
 801ec8a:	3301      	adds	r3, #1
 801ec8c:	00db      	lsls	r3, r3, #3
 801ec8e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801ec92:	4618      	mov	r0, r3
 801ec94:	f7f9 fce0 	bl	8018658 <WIZCHIP_READ>
 801ec98:	4603      	mov	r3, r0
 801ec9a:	029b      	lsls	r3, r3, #10
 801ec9c:	429c      	cmp	r4, r3
 801ec9e:	d1e5      	bne.n	801ec6c <httpServer_run+0x190>
 801eca0:	e000      	b.n	801eca4 <httpServer_run+0x1c8>
								break;
 801eca2:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801eca4:	79fa      	ldrb	r2, [r7, #7]
 801eca6:	4949      	ldr	r1, [pc, #292]	; (801edcc <httpServer_run+0x2f0>)
 801eca8:	4613      	mov	r3, r2
 801ecaa:	011b      	lsls	r3, r3, #4
 801ecac:	4413      	add	r3, r2
 801ecae:	009b      	lsls	r3, r3, #2
 801ecb0:	440b      	add	r3, r1
 801ecb2:	3338      	adds	r3, #56	; 0x38
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d009      	beq.n	801ecce <httpServer_run+0x1f2>
 801ecba:	79fa      	ldrb	r2, [r7, #7]
 801ecbc:	4943      	ldr	r1, [pc, #268]	; (801edcc <httpServer_run+0x2f0>)
 801ecbe:	4613      	mov	r3, r2
 801ecc0:	011b      	lsls	r3, r3, #4
 801ecc2:	4413      	add	r3, r2
 801ecc4:	009b      	lsls	r3, r3, #2
 801ecc6:	440b      	add	r3, r1
 801ecc8:	2203      	movs	r2, #3
 801ecca:	701a      	strb	r2, [r3, #0]
					break;
 801eccc:	e05c      	b.n	801ed88 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801ecce:	79fa      	ldrb	r2, [r7, #7]
 801ecd0:	493e      	ldr	r1, [pc, #248]	; (801edcc <httpServer_run+0x2f0>)
 801ecd2:	4613      	mov	r3, r2
 801ecd4:	011b      	lsls	r3, r3, #4
 801ecd6:	4413      	add	r3, r2
 801ecd8:	009b      	lsls	r3, r3, #2
 801ecda:	440b      	add	r3, r1
 801ecdc:	2204      	movs	r2, #4
 801ecde:	701a      	strb	r2, [r3, #0]
					break;
 801ece0:	e052      	b.n	801ed88 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801ece2:	79fa      	ldrb	r2, [r7, #7]
 801ece4:	4613      	mov	r3, r2
 801ece6:	011b      	lsls	r3, r3, #4
 801ece8:	4413      	add	r3, r2
 801ecea:	009b      	lsls	r3, r3, #2
 801ecec:	4a37      	ldr	r2, [pc, #220]	; (801edcc <httpServer_run+0x2f0>)
 801ecee:	4413      	add	r3, r2
 801ecf0:	1c59      	adds	r1, r3, #1
 801ecf2:	4b37      	ldr	r3, [pc, #220]	; (801edd0 <httpServer_run+0x2f4>)
 801ecf4:	681a      	ldr	r2, [r3, #0]
 801ecf6:	7bf8      	ldrb	r0, [r7, #15]
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	9300      	str	r3, [sp, #0]
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	f000 f8d5 	bl	801eeac <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801ed02:	79fa      	ldrb	r2, [r7, #7]
 801ed04:	4931      	ldr	r1, [pc, #196]	; (801edcc <httpServer_run+0x2f0>)
 801ed06:	4613      	mov	r3, r2
 801ed08:	011b      	lsls	r3, r3, #4
 801ed0a:	4413      	add	r3, r2
 801ed0c:	009b      	lsls	r3, r3, #2
 801ed0e:	440b      	add	r3, r1
 801ed10:	3338      	adds	r3, #56	; 0x38
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d139      	bne.n	801ed8c <httpServer_run+0x2b0>
 801ed18:	79fa      	ldrb	r2, [r7, #7]
 801ed1a:	492c      	ldr	r1, [pc, #176]	; (801edcc <httpServer_run+0x2f0>)
 801ed1c:	4613      	mov	r3, r2
 801ed1e:	011b      	lsls	r3, r3, #4
 801ed20:	4413      	add	r3, r2
 801ed22:	009b      	lsls	r3, r3, #2
 801ed24:	440b      	add	r3, r1
 801ed26:	2204      	movs	r2, #4
 801ed28:	701a      	strb	r2, [r3, #0]
					break;
 801ed2a:	e02f      	b.n	801ed8c <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801ed2c:	79fa      	ldrb	r2, [r7, #7]
 801ed2e:	4927      	ldr	r1, [pc, #156]	; (801edcc <httpServer_run+0x2f0>)
 801ed30:	4613      	mov	r3, r2
 801ed32:	011b      	lsls	r3, r3, #4
 801ed34:	4413      	add	r3, r2
 801ed36:	009b      	lsls	r3, r3, #2
 801ed38:	440b      	add	r3, r1
 801ed3a:	3338      	adds	r3, #56	; 0x38
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801ed40:	79fa      	ldrb	r2, [r7, #7]
 801ed42:	4922      	ldr	r1, [pc, #136]	; (801edcc <httpServer_run+0x2f0>)
 801ed44:	4613      	mov	r3, r2
 801ed46:	011b      	lsls	r3, r3, #4
 801ed48:	4413      	add	r3, r2
 801ed4a:	009b      	lsls	r3, r3, #2
 801ed4c:	440b      	add	r3, r1
 801ed4e:	333c      	adds	r3, #60	; 0x3c
 801ed50:	2200      	movs	r2, #0
 801ed52:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801ed54:	79fa      	ldrb	r2, [r7, #7]
 801ed56:	491d      	ldr	r1, [pc, #116]	; (801edcc <httpServer_run+0x2f0>)
 801ed58:	4613      	mov	r3, r2
 801ed5a:	011b      	lsls	r3, r3, #4
 801ed5c:	4413      	add	r3, r2
 801ed5e:	009b      	lsls	r3, r3, #2
 801ed60:	440b      	add	r3, r1
 801ed62:	3334      	adds	r3, #52	; 0x34
 801ed64:	2200      	movs	r2, #0
 801ed66:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801ed68:	79fa      	ldrb	r2, [r7, #7]
 801ed6a:	4918      	ldr	r1, [pc, #96]	; (801edcc <httpServer_run+0x2f0>)
 801ed6c:	4613      	mov	r3, r2
 801ed6e:	011b      	lsls	r3, r3, #4
 801ed70:	4413      	add	r3, r2
 801ed72:	009b      	lsls	r3, r3, #2
 801ed74:	440b      	add	r3, r1
 801ed76:	2200      	movs	r2, #0
 801ed78:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801ed7a:	7bfb      	ldrb	r3, [r7, #15]
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	f000 fa13 	bl	801f1a8 <http_disconnect>
					break;
 801ed82:	e004      	b.n	801ed8e <httpServer_run+0x2b2>
					break;
 801ed84:	bf00      	nop
 801ed86:	e015      	b.n	801edb4 <httpServer_run+0x2d8>
					break;
 801ed88:	bf00      	nop
 801ed8a:	e013      	b.n	801edb4 <httpServer_run+0x2d8>
					break;
 801ed8c:	bf00      	nop
			}
			break;
 801ed8e:	e011      	b.n	801edb4 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801ed90:	7bfb      	ldrb	r3, [r7, #15]
 801ed92:	4618      	mov	r0, r3
 801ed94:	f7fa fa08 	bl	80191a8 <disconnect>
			break;
 801ed98:	e00c      	b.n	801edb4 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801ed9a:	7bf8      	ldrb	r0, [r7, #15]
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	2250      	movs	r2, #80	; 0x50
 801eda0:	2101      	movs	r1, #1
 801eda2:	f7f9 ff49 	bl	8018c38 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801eda6:	e005      	b.n	801edb4 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801eda8:	7bfb      	ldrb	r3, [r7, #15]
 801edaa:	4618      	mov	r0, r3
 801edac:	f7fa f8c6 	bl	8018f3c <listen>
			break;
 801edb0:	e000      	b.n	801edb4 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801edb2:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801edb4:	bf00      	nop
 801edb6:	371c      	adds	r7, #28
 801edb8:	46bd      	mov	sp, r7
 801edba:	bd90      	pop	{r4, r7, pc}
 801edbc:	200012bc 	.word	0x200012bc
 801edc0:	200011e0 	.word	0x200011e0
 801edc4:	200012b8 	.word	0x200012b8
 801edc8:	200011e4 	.word	0x200011e4
 801edcc:	200012c4 	.word	0x200012c4
 801edd0:	200011e8 	.word	0x200011e8

0801edd4 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801edd4:	b590      	push	{r4, r7, lr}
 801edd6:	b083      	sub	sp, #12
 801edd8:	af00      	add	r7, sp, #0
 801edda:	603a      	str	r2, [r7, #0]
 801eddc:	461a      	mov	r2, r3
 801edde:	4603      	mov	r3, r0
 801ede0:	71fb      	strb	r3, [r7, #7]
 801ede2:	460b      	mov	r3, r1
 801ede4:	71bb      	strb	r3, [r7, #6]
 801ede6:	4613      	mov	r3, r2
 801ede8:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801edea:	88bb      	ldrh	r3, [r7, #4]
 801edec:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801edf0:	d029      	beq.n	801ee46 <send_http_response_header+0x72>
 801edf2:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801edf6:	dc3a      	bgt.n	801ee6e <send_http_response_header+0x9a>
 801edf8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801edfc:	d019      	beq.n	801ee32 <send_http_response_header+0x5e>
 801edfe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ee02:	dc34      	bgt.n	801ee6e <send_http_response_header+0x9a>
 801ee04:	2bc8      	cmp	r3, #200	; 0xc8
 801ee06:	d003      	beq.n	801ee10 <send_http_response_header+0x3c>
 801ee08:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 801ee0c:	d025      	beq.n	801ee5a <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801ee0e:	e02e      	b.n	801ee6e <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801ee10:	79bb      	ldrb	r3, [r7, #6]
 801ee12:	2b08      	cmp	r3, #8
 801ee14:	d00a      	beq.n	801ee2c <send_http_response_header+0x58>
 801ee16:	79bb      	ldrb	r3, [r7, #6]
 801ee18:	2b09      	cmp	r3, #9
 801ee1a:	d007      	beq.n	801ee2c <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801ee1c:	4b1f      	ldr	r3, [pc, #124]	; (801ee9c <send_http_response_header+0xc8>)
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	79b9      	ldrb	r1, [r7, #6]
 801ee22:	683a      	ldr	r2, [r7, #0]
 801ee24:	4618      	mov	r0, r3
 801ee26:	f7ff f9ed 	bl	801e204 <make_http_response_head>
			break;
 801ee2a:	e021      	b.n	801ee70 <send_http_response_header+0x9c>
				http_status = 0;
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	80bb      	strh	r3, [r7, #4]
			break;
 801ee30:	e01e      	b.n	801ee70 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801ee32:	4b1a      	ldr	r3, [pc, #104]	; (801ee9c <send_http_response_header+0xc8>)
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	4a1a      	ldr	r2, [pc, #104]	; (801eea0 <send_http_response_header+0xcc>)
 801ee38:	4618      	mov	r0, r3
 801ee3a:	4611      	mov	r1, r2
 801ee3c:	2376      	movs	r3, #118	; 0x76
 801ee3e:	461a      	mov	r2, r3
 801ee40:	f00e fe81 	bl	802db46 <memcpy>
			break;
 801ee44:	e014      	b.n	801ee70 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801ee46:	4b15      	ldr	r3, [pc, #84]	; (801ee9c <send_http_response_header+0xc8>)
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	4a16      	ldr	r2, [pc, #88]	; (801eea4 <send_http_response_header+0xd0>)
 801ee4c:	4618      	mov	r0, r3
 801ee4e:	4611      	mov	r1, r2
 801ee50:	2399      	movs	r3, #153	; 0x99
 801ee52:	461a      	mov	r2, r3
 801ee54:	f00e fe77 	bl	802db46 <memcpy>
			break;
 801ee58:	e00a      	b.n	801ee70 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801ee5a:	4b10      	ldr	r3, [pc, #64]	; (801ee9c <send_http_response_header+0xc8>)
 801ee5c:	681b      	ldr	r3, [r3, #0]
 801ee5e:	4a12      	ldr	r2, [pc, #72]	; (801eea8 <send_http_response_header+0xd4>)
 801ee60:	4618      	mov	r0, r3
 801ee62:	4611      	mov	r1, r2
 801ee64:	239e      	movs	r3, #158	; 0x9e
 801ee66:	461a      	mov	r2, r3
 801ee68:	f00e fe6d 	bl	802db46 <memcpy>
			break;
 801ee6c:	e000      	b.n	801ee70 <send_http_response_header+0x9c>
			break;
 801ee6e:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801ee70:	88bb      	ldrh	r3, [r7, #4]
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d00d      	beq.n	801ee92 <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801ee76:	4b09      	ldr	r3, [pc, #36]	; (801ee9c <send_http_response_header+0xc8>)
 801ee78:	681c      	ldr	r4, [r3, #0]
 801ee7a:	4b08      	ldr	r3, [pc, #32]	; (801ee9c <send_http_response_header+0xc8>)
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f7f1 fa0e 	bl	80102a0 <strlen>
 801ee84:	4603      	mov	r3, r0
 801ee86:	b29a      	uxth	r2, r3
 801ee88:	79fb      	ldrb	r3, [r7, #7]
 801ee8a:	4621      	mov	r1, r4
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	f7fa fa01 	bl	8019294 <send>
	}
}
 801ee92:	bf00      	nop
 801ee94:	370c      	adds	r7, #12
 801ee96:	46bd      	mov	sp, r7
 801ee98:	bd90      	pop	{r4, r7, pc}
 801ee9a:	bf00      	nop
 801ee9c:	200011e8 	.word	0x200011e8
 801eea0:	080345b8 	.word	0x080345b8
 801eea4:	0803451c 	.word	0x0803451c
 801eea8:	08034630 	.word	0x08034630

0801eeac <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801eeac:	b580      	push	{r7, lr}
 801eeae:	b0a6      	sub	sp, #152	; 0x98
 801eeb0:	af00      	add	r7, sp, #0
 801eeb2:	60b9      	str	r1, [r7, #8]
 801eeb4:	607a      	str	r2, [r7, #4]
 801eeb6:	603b      	str	r3, [r7, #0]
 801eeb8:	4603      	mov	r3, r0
 801eeba:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801eebc:	2300      	movs	r3, #0
 801eebe:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801eec2:	2300      	movs	r3, #0
 801eec4:	613b      	str	r3, [r7, #16]
 801eec6:	f107 0314 	add.w	r3, r7, #20
 801eeca:	227c      	movs	r2, #124	; 0x7c
 801eecc:	2100      	movs	r1, #0
 801eece:	4618      	mov	r0, r3
 801eed0:	f00e fc64 	bl	802d79c <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801eed4:	7bfb      	ldrb	r3, [r7, #15]
 801eed6:	4618      	mov	r0, r3
 801eed8:	f7ff fdc2 	bl	801ea60 <getHTTPSequenceNum>
 801eedc:	4603      	mov	r3, r0
 801eede:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 801eee2:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 801eee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eeea:	f000 812e 	beq.w	801f14a <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801eeee:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eef2:	4998      	ldr	r1, [pc, #608]	; (801f154 <send_http_response_body+0x2a8>)
 801eef4:	4613      	mov	r3, r2
 801eef6:	011b      	lsls	r3, r3, #4
 801eef8:	4413      	add	r3, r2
 801eefa:	009b      	lsls	r3, r3, #2
 801eefc:	440b      	add	r3, r1
 801eefe:	3338      	adds	r3, #56	; 0x38
 801ef00:	681b      	ldr	r3, [r3, #0]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d140      	bne.n	801ef88 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801ef06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ef0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ef0e:	d336      	bcc.n	801ef7e <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801ef10:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef14:	498f      	ldr	r1, [pc, #572]	; (801f154 <send_http_response_body+0x2a8>)
 801ef16:	4613      	mov	r3, r2
 801ef18:	011b      	lsls	r3, r3, #4
 801ef1a:	4413      	add	r3, r2
 801ef1c:	009b      	lsls	r3, r3, #2
 801ef1e:	440b      	add	r3, r1
 801ef20:	3334      	adds	r3, #52	; 0x34
 801ef22:	683a      	ldr	r2, [r7, #0]
 801ef24:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801ef26:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef2a:	498a      	ldr	r1, [pc, #552]	; (801f154 <send_http_response_body+0x2a8>)
 801ef2c:	4613      	mov	r3, r2
 801ef2e:	011b      	lsls	r3, r3, #4
 801ef30:	4413      	add	r3, r2
 801ef32:	009b      	lsls	r3, r3, #2
 801ef34:	440b      	add	r3, r1
 801ef36:	3338      	adds	r3, #56	; 0x38
 801ef38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801ef3c:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801ef3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801ef42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801ef46:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef4a:	4613      	mov	r3, r2
 801ef4c:	011b      	lsls	r3, r3, #4
 801ef4e:	4413      	add	r3, r2
 801ef50:	009b      	lsls	r3, r3, #2
 801ef52:	4a80      	ldr	r2, [pc, #512]	; (801f154 <send_http_response_body+0x2a8>)
 801ef54:	4413      	add	r3, r2
 801ef56:	3301      	adds	r3, #1
 801ef58:	2232      	movs	r2, #50	; 0x32
 801ef5a:	2100      	movs	r1, #0
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	f00e fc1d 	bl	802d79c <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801ef62:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef66:	4613      	mov	r3, r2
 801ef68:	011b      	lsls	r3, r3, #4
 801ef6a:	4413      	add	r3, r2
 801ef6c:	009b      	lsls	r3, r3, #2
 801ef6e:	4a79      	ldr	r2, [pc, #484]	; (801f154 <send_http_response_body+0x2a8>)
 801ef70:	4413      	add	r3, r2
 801ef72:	3301      	adds	r3, #1
 801ef74:	68b9      	ldr	r1, [r7, #8]
 801ef76:	4618      	mov	r0, r3
 801ef78:	f00e fddd 	bl	802db36 <strcpy>
 801ef7c:	e028      	b.n	801efd0 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801ef7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ef82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ef86:	e023      	b.n	801efd0 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801ef88:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef8c:	4971      	ldr	r1, [pc, #452]	; (801f154 <send_http_response_body+0x2a8>)
 801ef8e:	4613      	mov	r3, r2
 801ef90:	011b      	lsls	r3, r3, #4
 801ef92:	4413      	add	r3, r2
 801ef94:	009b      	lsls	r3, r3, #2
 801ef96:	440b      	add	r3, r1
 801ef98:	3338      	adds	r3, #56	; 0x38
 801ef9a:	6819      	ldr	r1, [r3, #0]
 801ef9c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801efa0:	486c      	ldr	r0, [pc, #432]	; (801f154 <send_http_response_body+0x2a8>)
 801efa2:	4613      	mov	r3, r2
 801efa4:	011b      	lsls	r3, r3, #4
 801efa6:	4413      	add	r3, r2
 801efa8:	009b      	lsls	r3, r3, #2
 801efaa:	4403      	add	r3, r0
 801efac:	333c      	adds	r3, #60	; 0x3c
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	1acb      	subs	r3, r1, r3
 801efb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801efb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801efba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801efbe:	d304      	bcc.n	801efca <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801efc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801efc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801efc8:	e002      	b.n	801efd0 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801efca:	2301      	movs	r3, #1
 801efcc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801efd0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801efd4:	495f      	ldr	r1, [pc, #380]	; (801f154 <send_http_response_body+0x2a8>)
 801efd6:	4613      	mov	r3, r2
 801efd8:	011b      	lsls	r3, r3, #4
 801efda:	4413      	add	r3, r2
 801efdc:	009b      	lsls	r3, r3, #2
 801efde:	440b      	add	r3, r1
 801efe0:	3340      	adds	r3, #64	; 0x40
 801efe2:	781b      	ldrb	r3, [r3, #0]
 801efe4:	2b01      	cmp	r3, #1
 801efe6:	d129      	bne.n	801f03c <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801efe8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801efec:	4959      	ldr	r1, [pc, #356]	; (801f154 <send_http_response_body+0x2a8>)
 801efee:	4613      	mov	r3, r2
 801eff0:	011b      	lsls	r3, r3, #4
 801eff2:	4413      	add	r3, r2
 801eff4:	009b      	lsls	r3, r3, #2
 801eff6:	440b      	add	r3, r1
 801eff8:	3338      	adds	r3, #56	; 0x38
 801effa:	681b      	ldr	r3, [r3, #0]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d00a      	beq.n	801f016 <send_http_response_body+0x16a>
 801f000:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f004:	4953      	ldr	r1, [pc, #332]	; (801f154 <send_http_response_body+0x2a8>)
 801f006:	4613      	mov	r3, r2
 801f008:	011b      	lsls	r3, r3, #4
 801f00a:	4413      	add	r3, r2
 801f00c:	009b      	lsls	r3, r3, #2
 801f00e:	440b      	add	r3, r1
 801f010:	3334      	adds	r3, #52	; 0x34
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f016:	683b      	ldr	r3, [r7, #0]
 801f018:	b298      	uxth	r0, r3
 801f01a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f01e:	494d      	ldr	r1, [pc, #308]	; (801f154 <send_http_response_body+0x2a8>)
 801f020:	4613      	mov	r3, r2
 801f022:	011b      	lsls	r3, r3, #4
 801f024:	4413      	add	r3, r2
 801f026:	009b      	lsls	r3, r3, #2
 801f028:	440b      	add	r3, r1
 801f02a:	333c      	adds	r3, #60	; 0x3c
 801f02c:	681a      	ldr	r2, [r3, #0]
 801f02e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f032:	b29b      	uxth	r3, r3
 801f034:	6879      	ldr	r1, [r7, #4]
 801f036:	f000 fbc9 	bl	801f7cc <read_userReg_webContent>
 801f03a:	e035      	b.n	801f0a8 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801f03c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f040:	4944      	ldr	r1, [pc, #272]	; (801f154 <send_http_response_body+0x2a8>)
 801f042:	4613      	mov	r3, r2
 801f044:	011b      	lsls	r3, r3, #4
 801f046:	4413      	add	r3, r2
 801f048:	009b      	lsls	r3, r3, #2
 801f04a:	440b      	add	r3, r1
 801f04c:	3340      	adds	r3, #64	; 0x40
 801f04e:	781b      	ldrb	r3, [r3, #0]
 801f050:	2b04      	cmp	r3, #4
 801f052:	d126      	bne.n	801f0a2 <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801f054:	f107 0310 	add.w	r3, r7, #16
 801f058:	2280      	movs	r2, #128	; 0x80
 801f05a:	2100      	movs	r1, #0
 801f05c:	4618      	mov	r0, r3
 801f05e:	f00e fb9d 	bl	802d79c <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801f062:	f107 0310 	add.w	r3, r7, #16
 801f066:	4a3c      	ldr	r2, [pc, #240]	; (801f158 <send_http_response_body+0x2ac>)
 801f068:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f06c:	6018      	str	r0, [r3, #0]
 801f06e:	3304      	adds	r3, #4
 801f070:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801f072:	f107 0310 	add.w	r3, r7, #16
 801f076:	68b9      	ldr	r1, [r7, #8]
 801f078:	4618      	mov	r0, r3
 801f07a:	f00e fb97 	bl	802d7ac <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f07e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f082:	4934      	ldr	r1, [pc, #208]	; (801f154 <send_http_response_body+0x2a8>)
 801f084:	4613      	mov	r3, r2
 801f086:	011b      	lsls	r3, r3, #4
 801f088:	4413      	add	r3, r2
 801f08a:	009b      	lsls	r3, r3, #2
 801f08c:	440b      	add	r3, r1
 801f08e:	333c      	adds	r3, #60	; 0x3c
 801f090:	681a      	ldr	r2, [r3, #0]
 801f092:	f107 0010 	add.w	r0, r7, #16
 801f096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f09a:	6879      	ldr	r1, [r7, #4]
 801f09c:	f00b fdf6 	bl	802ac8c <spi_fs_read_file_offset>
 801f0a0:	e002      	b.n	801f0a8 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801f0a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d008      	beq.n	801f0c2 <send_http_response_body+0x216>
 801f0b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f0b4:	b29a      	uxth	r2, r3
 801f0b6:	7bfb      	ldrb	r3, [r7, #15]
 801f0b8:	6879      	ldr	r1, [r7, #4]
 801f0ba:	4618      	mov	r0, r3
 801f0bc:	f7fa f8ea 	bl	8019294 <send>
 801f0c0:	e002      	b.n	801f0c8 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801f0c2:	2301      	movs	r3, #1
 801f0c4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 801f0c8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801f0cc:	2b00      	cmp	r3, #0
 801f0ce:	d024      	beq.n	801f11a <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f0d0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f0d4:	491f      	ldr	r1, [pc, #124]	; (801f154 <send_http_response_body+0x2a8>)
 801f0d6:	4613      	mov	r3, r2
 801f0d8:	011b      	lsls	r3, r3, #4
 801f0da:	4413      	add	r3, r2
 801f0dc:	009b      	lsls	r3, r3, #2
 801f0de:	440b      	add	r3, r1
 801f0e0:	3334      	adds	r3, #52	; 0x34
 801f0e2:	2200      	movs	r2, #0
 801f0e4:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f0e6:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f0ea:	491a      	ldr	r1, [pc, #104]	; (801f154 <send_http_response_body+0x2a8>)
 801f0ec:	4613      	mov	r3, r2
 801f0ee:	011b      	lsls	r3, r3, #4
 801f0f0:	4413      	add	r3, r2
 801f0f2:	009b      	lsls	r3, r3, #2
 801f0f4:	440b      	add	r3, r1
 801f0f6:	3338      	adds	r3, #56	; 0x38
 801f0f8:	2200      	movs	r2, #0
 801f0fa:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f0fc:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f100:	4914      	ldr	r1, [pc, #80]	; (801f154 <send_http_response_body+0x2a8>)
 801f102:	4613      	mov	r3, r2
 801f104:	011b      	lsls	r3, r3, #4
 801f106:	4413      	add	r3, r2
 801f108:	009b      	lsls	r3, r3, #2
 801f10a:	440b      	add	r3, r1
 801f10c:	333c      	adds	r3, #60	; 0x3c
 801f10e:	2200      	movs	r2, #0
 801f110:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f112:	2300      	movs	r3, #0
 801f114:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 801f118:	e018      	b.n	801f14c <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f11a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f11e:	490d      	ldr	r1, [pc, #52]	; (801f154 <send_http_response_body+0x2a8>)
 801f120:	4613      	mov	r3, r2
 801f122:	011b      	lsls	r3, r3, #4
 801f124:	4413      	add	r3, r2
 801f126:	009b      	lsls	r3, r3, #2
 801f128:	440b      	add	r3, r1
 801f12a:	333c      	adds	r3, #60	; 0x3c
 801f12c:	6819      	ldr	r1, [r3, #0]
 801f12e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f136:	4419      	add	r1, r3
 801f138:	4806      	ldr	r0, [pc, #24]	; (801f154 <send_http_response_body+0x2a8>)
 801f13a:	4613      	mov	r3, r2
 801f13c:	011b      	lsls	r3, r3, #4
 801f13e:	4413      	add	r3, r2
 801f140:	009b      	lsls	r3, r3, #2
 801f142:	4403      	add	r3, r0
 801f144:	333c      	adds	r3, #60	; 0x3c
 801f146:	6019      	str	r1, [r3, #0]
 801f148:	e000      	b.n	801f14c <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f14a:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801f14c:	3798      	adds	r7, #152	; 0x98
 801f14e:	46bd      	mov	sp, r7
 801f150:	bd80      	pop	{r7, pc}
 801f152:	bf00      	nop
 801f154:	200012c4 	.word	0x200012c4
 801f158:	08033248 	.word	0x08033248

0801f15c <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801f15c:	b580      	push	{r7, lr}
 801f15e:	b088      	sub	sp, #32
 801f160:	af02      	add	r7, sp, #8
 801f162:	60b9      	str	r1, [r7, #8]
 801f164:	607a      	str	r2, [r7, #4]
 801f166:	461a      	mov	r2, r3
 801f168:	4603      	mov	r3, r0
 801f16a:	73fb      	strb	r3, [r7, #15]
 801f16c:	4613      	mov	r3, r2
 801f16e:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801f170:	2300      	movs	r3, #0
 801f172:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801f174:	89ba      	ldrh	r2, [r7, #12]
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	9300      	str	r3, [sp, #0]
 801f17a:	4613      	mov	r3, r2
 801f17c:	4a08      	ldr	r2, [pc, #32]	; (801f1a0 <send_http_response_cgi+0x44>)
 801f17e:	4909      	ldr	r1, [pc, #36]	; (801f1a4 <send_http_response_cgi+0x48>)
 801f180:	68b8      	ldr	r0, [r7, #8]
 801f182:	f00e f9bb 	bl	802d4fc <siprintf>
 801f186:	4603      	mov	r3, r0
 801f188:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f18a:	8afa      	ldrh	r2, [r7, #22]
 801f18c:	7bfb      	ldrb	r3, [r7, #15]
 801f18e:	68b9      	ldr	r1, [r7, #8]
 801f190:	4618      	mov	r0, r3
 801f192:	f7fa f87f 	bl	8019294 <send>
}
 801f196:	bf00      	nop
 801f198:	3718      	adds	r7, #24
 801f19a:	46bd      	mov	sp, r7
 801f19c:	bd80      	pop	{r7, pc}
 801f19e:	bf00      	nop
 801f1a0:	08033250 	.word	0x08033250
 801f1a4:	080332ac 	.word	0x080332ac

0801f1a8 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801f1a8:	b580      	push	{r7, lr}
 801f1aa:	b082      	sub	sp, #8
 801f1ac:	af00      	add	r7, sp, #0
 801f1ae:	4603      	mov	r3, r0
 801f1b0:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801f1b2:	79fb      	ldrb	r3, [r7, #7]
 801f1b4:	009b      	lsls	r3, r3, #2
 801f1b6:	3301      	adds	r3, #1
 801f1b8:	00db      	lsls	r3, r3, #3
 801f1ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f1be:	2108      	movs	r1, #8
 801f1c0:	4618      	mov	r0, r3
 801f1c2:	f7f9 fa95 	bl	80186f0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801f1c6:	bf00      	nop
 801f1c8:	79fb      	ldrb	r3, [r7, #7]
 801f1ca:	009b      	lsls	r3, r3, #2
 801f1cc:	3301      	adds	r3, #1
 801f1ce:	00db      	lsls	r3, r3, #3
 801f1d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	f7f9 fa3f 	bl	8018658 <WIZCHIP_READ>
 801f1da:	4603      	mov	r3, r0
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d1f3      	bne.n	801f1c8 <http_disconnect+0x20>

	return SOCK_OK;
 801f1e0:	2301      	movs	r3, #1
}
 801f1e2:	4618      	mov	r0, r3
 801f1e4:	3708      	adds	r7, #8
 801f1e6:	46bd      	mov	sp, r7
 801f1e8:	bd80      	pop	{r7, pc}
	...

0801f1ec <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801f1ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f1f0:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801f1f4:	af02      	add	r7, sp, #8
 801f1f6:	4602      	mov	r2, r0
 801f1f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1fc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f200:	6019      	str	r1, [r3, #0]
 801f202:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f206:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f20a:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801f20c:	2300      	movs	r3, #0
 801f20e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 801f212:	2300      	movs	r3, #0
 801f214:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 801f218:	2300      	movs	r3, #0
 801f21a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801f21e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f222:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f226:	2200      	movs	r2, #0
 801f228:	601a      	str	r2, [r3, #0]
 801f22a:	3304      	adds	r3, #4
 801f22c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801f230:	2100      	movs	r1, #0
 801f232:	4618      	mov	r0, r3
 801f234:	f00e fab2 	bl	802d79c <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801f238:	f04f 0200 	mov.w	r2, #0
 801f23c:	f04f 0300 	mov.w	r3, #0
 801f240:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f244:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f248:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f24c:	781b      	ldrb	r3, [r3, #0]
 801f24e:	4618      	mov	r0, r3
 801f250:	f7ff fc06 	bl	801ea60 <getHTTPSequenceNum>
 801f254:	4603      	mov	r3, r0
 801f256:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 801f25a:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 801f25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f262:	f000 81e5 	beq.w	801f630 <http_process_handler+0x444>

	http_status = 0;
 801f266:	2300      	movs	r3, #0
 801f268:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 801f26c:	4ba6      	ldr	r3, [pc, #664]	; (801f508 <http_process_handler+0x31c>)
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	4aa6      	ldr	r2, [pc, #664]	; (801f50c <http_process_handler+0x320>)
 801f272:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801f274:	2300      	movs	r3, #0
 801f276:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801f27a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f27e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f282:	681b      	ldr	r3, [r3, #0]
 801f284:	781b      	ldrb	r3, [r3, #0]
 801f286:	2b03      	cmp	r3, #3
 801f288:	f000 8154 	beq.w	801f534 <http_process_handler+0x348>
 801f28c:	2b03      	cmp	r3, #3
 801f28e:	f300 81be 	bgt.w	801f60e <http_process_handler+0x422>
 801f292:	2b00      	cmp	r3, #0
 801f294:	d007      	beq.n	801f2a6 <http_process_handler+0xba>
 801f296:	2b00      	cmp	r3, #0
 801f298:	f2c0 81b9 	blt.w	801f60e <http_process_handler+0x422>
 801f29c:	3b01      	subs	r3, #1
 801f29e:	2b01      	cmp	r3, #1
 801f2a0:	f200 81b5 	bhi.w	801f60e <http_process_handler+0x422>
 801f2a4:	e010      	b.n	801f2c8 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801f2a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f2aa:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f2ae:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f2b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f2b6:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f2ba:	7818      	ldrb	r0, [r3, #0]
 801f2bc:	4613      	mov	r3, r2
 801f2be:	2200      	movs	r2, #0
 801f2c0:	2100      	movs	r1, #0
 801f2c2:	f7ff fd87 	bl	801edd4 <send_http_response_header>
			break;
 801f2c6:	e1b6      	b.n	801f636 <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801f2c8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f2cc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	3302      	adds	r3, #2
 801f2d4:	f107 0208 	add.w	r2, r7, #8
 801f2d8:	4611      	mov	r1, r2
 801f2da:	4618      	mov	r0, r3
 801f2dc:	f7ff fad6 	bl	801e88c <get_http_uri_name>
			uri_name = uri_buf;
 801f2e0:	f107 0308 	add.w	r3, r7, #8
 801f2e4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801f2e8:	4989      	ldr	r1, [pc, #548]	; (801f510 <http_process_handler+0x324>)
 801f2ea:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f2ee:	f7f0 ff77 	bl	80101e0 <strcmp>
 801f2f2:	4603      	mov	r3, r0
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d10b      	bne.n	801f310 <http_process_handler+0x124>
 801f2f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f2fc:	4985      	ldr	r1, [pc, #532]	; (801f514 <http_process_handler+0x328>)
 801f2fe:	461a      	mov	r2, r3
 801f300:	460b      	mov	r3, r1
 801f302:	cb03      	ldmia	r3!, {r0, r1}
 801f304:	6010      	str	r0, [r2, #0]
 801f306:	6051      	str	r1, [r2, #4]
 801f308:	8819      	ldrh	r1, [r3, #0]
 801f30a:	789b      	ldrb	r3, [r3, #2]
 801f30c:	8111      	strh	r1, [r2, #8]
 801f30e:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801f310:	4981      	ldr	r1, [pc, #516]	; (801f518 <http_process_handler+0x32c>)
 801f312:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f316:	f7f0 ff63 	bl	80101e0 <strcmp>
 801f31a:	4603      	mov	r3, r0
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d10a      	bne.n	801f336 <http_process_handler+0x14a>
 801f320:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f324:	4a7d      	ldr	r2, [pc, #500]	; (801f51c <http_process_handler+0x330>)
 801f326:	461c      	mov	r4, r3
 801f328:	4613      	mov	r3, r2
 801f32a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801f32c:	6020      	str	r0, [r4, #0]
 801f32e:	6061      	str	r1, [r4, #4]
 801f330:	60a2      	str	r2, [r4, #8]
 801f332:	781b      	ldrb	r3, [r3, #0]
 801f334:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801f336:	497a      	ldr	r1, [pc, #488]	; (801f520 <http_process_handler+0x334>)
 801f338:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f33c:	f7f0 ff50 	bl	80101e0 <strcmp>
 801f340:	4603      	mov	r3, r0
 801f342:	2b00      	cmp	r3, #0
 801f344:	d10b      	bne.n	801f35e <http_process_handler+0x172>
 801f346:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f34a:	4a76      	ldr	r2, [pc, #472]	; (801f524 <http_process_handler+0x338>)
 801f34c:	461d      	mov	r5, r3
 801f34e:	4614      	mov	r4, r2
 801f350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f352:	6028      	str	r0, [r5, #0]
 801f354:	6069      	str	r1, [r5, #4]
 801f356:	60aa      	str	r2, [r5, #8]
 801f358:	60eb      	str	r3, [r5, #12]
 801f35a:	8823      	ldrh	r3, [r4, #0]
 801f35c:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801f35e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f362:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	3301      	adds	r3, #1
 801f36a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f36e:	4618      	mov	r0, r3
 801f370:	f7fe fffe 	bl	801e370 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801f374:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f378:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	785b      	ldrb	r3, [r3, #1]
 801f380:	2b08      	cmp	r3, #8
 801f382:	d131      	bne.n	801f3e8 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801f384:	4b68      	ldr	r3, [pc, #416]	; (801f528 <http_process_handler+0x33c>)
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f38c:	4619      	mov	r1, r3
 801f38e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f392:	f000 fa59 	bl	801f848 <http_get_cgi_handler>
 801f396:	4603      	mov	r3, r0
 801f398:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801f39c:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d015      	beq.n	801f3d0 <http_process_handler+0x1e4>
 801f3a4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f3a8:	f240 729e 	movw	r2, #1950	; 0x79e
 801f3ac:	4293      	cmp	r3, r2
 801f3ae:	d80f      	bhi.n	801f3d0 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801f3b0:	4b56      	ldr	r3, [pc, #344]	; (801f50c <http_process_handler+0x320>)
 801f3b2:	6819      	ldr	r1, [r3, #0]
 801f3b4:	4b5c      	ldr	r3, [pc, #368]	; (801f528 <http_process_handler+0x33c>)
 801f3b6:	681a      	ldr	r2, [r3, #0]
 801f3b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f3bc:	b29c      	uxth	r4, r3
 801f3be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f3c2:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f3c6:	7818      	ldrb	r0, [r3, #0]
 801f3c8:	4623      	mov	r3, r4
 801f3ca:	f7ff fec7 	bl	801f15c <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801f3ce:	e131      	b.n	801f634 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f3d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f3d4:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f3d8:	7818      	ldrb	r0, [r3, #0]
 801f3da:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f3de:	2200      	movs	r2, #0
 801f3e0:	2108      	movs	r1, #8
 801f3e2:	f7ff fcf7 	bl	801edd4 <send_http_response_header>
			break;
 801f3e6:	e125      	b.n	801f634 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f3e8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f3ec:	484f      	ldr	r0, [pc, #316]	; (801f52c <http_process_handler+0x340>)
 801f3ee:	f00b fd27 	bl	802ae40 <spi_fs_serch_file_in_dir>
 801f3f2:	4603      	mov	r3, r0
 801f3f4:	17da      	asrs	r2, r3, #31
 801f3f6:	4698      	mov	r8, r3
 801f3f8:	4691      	mov	r9, r2
 801f3fa:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 801f3fe:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 801f402:	2a01      	cmp	r2, #1
 801f404:	f173 0300 	sbcs.w	r3, r3, #0
 801f408:	db12      	blt.n	801f430 <http_process_handler+0x244>
					file_len = err;
 801f40a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801f40e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 801f412:	2301      	movs	r3, #1
 801f414:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f418:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f41c:	4944      	ldr	r1, [pc, #272]	; (801f530 <http_process_handler+0x344>)
 801f41e:	4613      	mov	r3, r2
 801f420:	011b      	lsls	r3, r3, #4
 801f422:	4413      	add	r3, r2
 801f424:	009b      	lsls	r3, r3, #2
 801f426:	440b      	add	r3, r1
 801f428:	3340      	adds	r3, #64	; 0x40
 801f42a:	2204      	movs	r2, #4
 801f42c:	701a      	strb	r2, [r3, #0]
 801f42e:	e024      	b.n	801f47a <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f430:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f434:	f207 210e 	addw	r1, r7, #526	; 0x20e
 801f438:	f107 0308 	add.w	r3, r7, #8
 801f43c:	4618      	mov	r0, r3
 801f43e:	f000 f989 	bl	801f754 <find_userReg_webContent>
 801f442:	4603      	mov	r3, r0
 801f444:	2b00      	cmp	r3, #0
 801f446:	d012      	beq.n	801f46e <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f448:	2301      	movs	r3, #1
 801f44a:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 801f44e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 801f452:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f456:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f45a:	4935      	ldr	r1, [pc, #212]	; (801f530 <http_process_handler+0x344>)
 801f45c:	4613      	mov	r3, r2
 801f45e:	011b      	lsls	r3, r3, #4
 801f460:	4413      	add	r3, r2
 801f462:	009b      	lsls	r3, r3, #2
 801f464:	440b      	add	r3, r1
 801f466:	3340      	adds	r3, #64	; 0x40
 801f468:	2201      	movs	r2, #1
 801f46a:	701a      	strb	r2, [r3, #0]
 801f46c:	e005      	b.n	801f47a <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f46e:	2300      	movs	r3, #0
 801f470:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 801f474:	2300      	movs	r3, #0
 801f476:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 801f47a:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d111      	bne.n	801f4a6 <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f482:	4924      	ldr	r1, [pc, #144]	; (801f514 <http_process_handler+0x328>)
 801f484:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f488:	f7f0 feaa 	bl	80101e0 <strcmp>
 801f48c:	4603      	mov	r3, r0
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d104      	bne.n	801f49c <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f492:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f496:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f49a:	e007      	b.n	801f4ac <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f49c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801f4a0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f4a4:	e002      	b.n	801f4ac <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f4a6:	23c8      	movs	r3, #200	; 0xc8
 801f4a8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 801f4ac:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d011      	beq.n	801f4d8 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f4b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f4b8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	7859      	ldrb	r1, [r3, #1]
 801f4c0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801f4c4:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 801f4c8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f4cc:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f4d0:	7818      	ldrb	r0, [r3, #0]
 801f4d2:	4623      	mov	r3, r4
 801f4d4:	f7ff fc7e 	bl	801edd4 <send_http_response_header>
				if(http_status == STATUS_OK)
 801f4d8:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f4dc:	2bc8      	cmp	r3, #200	; 0xc8
 801f4de:	f040 80a9 	bne.w	801f634 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f4e2:	4b0a      	ldr	r3, [pc, #40]	; (801f50c <http_process_handler+0x320>)
 801f4e4:	6819      	ldr	r1, [r3, #0]
 801f4e6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f4ea:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801f4ee:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 801f4f2:	7810      	ldrb	r0, [r2, #0]
 801f4f4:	9300      	str	r3, [sp, #0]
 801f4f6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f4fa:	460a      	mov	r2, r1
 801f4fc:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f500:	f7ff fcd4 	bl	801eeac <send_http_response_body>
			break;
 801f504:	e096      	b.n	801f634 <http_process_handler+0x448>
 801f506:	bf00      	nop
 801f508:	200012bc 	.word	0x200012bc
 801f50c:	200011e8 	.word	0x200011e8
 801f510:	080332b8 	.word	0x080332b8
 801f514:	080332bc 	.word	0x080332bc
 801f518:	080332c8 	.word	0x080332c8
 801f51c:	080332cc 	.word	0x080332cc
 801f520:	080332dc 	.word	0x080332dc
 801f524:	080332e4 	.word	0x080332e4
 801f528:	200012b8 	.word	0x200012b8
 801f52c:	08033248 	.word	0x08033248
 801f530:	200012c4 	.word	0x200012c4

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f534:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f538:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	1c98      	adds	r0, r3, #2
 801f540:	f107 0308 	add.w	r3, r7, #8
 801f544:	4a3e      	ldr	r2, [pc, #248]	; (801f640 <http_process_handler+0x454>)
 801f546:	493f      	ldr	r1, [pc, #252]	; (801f644 <http_process_handler+0x458>)
 801f548:	f7ff f9ef 	bl	801e92a <mid>
			uri_name = uri_buf;
 801f54c:	f107 0308 	add.w	r3, r7, #8
 801f550:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f554:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f558:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	3301      	adds	r3, #1
 801f560:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f564:	4618      	mov	r0, r3
 801f566:	f7fe ff03 	bl	801e370 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f56a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f56e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	785b      	ldrb	r3, [r3, #1]
 801f576:	2b08      	cmp	r3, #8
 801f578:	d13c      	bne.n	801f5f4 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f57a:	4b33      	ldr	r3, [pc, #204]	; (801f648 <http_process_handler+0x45c>)
 801f57c:	681a      	ldr	r2, [r3, #0]
 801f57e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801f582:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801f586:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 801f58a:	6809      	ldr	r1, [r1, #0]
 801f58c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f590:	f000 f988 	bl	801f8a4 <http_post_cgi_handler>
 801f594:	4603      	mov	r3, r0
 801f596:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f59a:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d01c      	beq.n	801f5dc <http_process_handler+0x3f0>
 801f5a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f5a6:	f240 72be 	movw	r2, #1982	; 0x7be
 801f5aa:	4293      	cmp	r3, r2
 801f5ac:	d816      	bhi.n	801f5dc <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f5ae:	4b27      	ldr	r3, [pc, #156]	; (801f64c <http_process_handler+0x460>)
 801f5b0:	6819      	ldr	r1, [r3, #0]
 801f5b2:	4b25      	ldr	r3, [pc, #148]	; (801f648 <http_process_handler+0x45c>)
 801f5b4:	681a      	ldr	r2, [r3, #0]
 801f5b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f5ba:	b29c      	uxth	r4, r3
 801f5bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f5c0:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f5c4:	7818      	ldrb	r0, [r3, #0]
 801f5c6:	4623      	mov	r3, r4
 801f5c8:	f7ff fdc8 	bl	801f15c <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f5cc:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f5d0:	2b02      	cmp	r3, #2
 801f5d2:	d11b      	bne.n	801f60c <http_process_handler+0x420>
 801f5d4:	4b1e      	ldr	r3, [pc, #120]	; (801f650 <http_process_handler+0x464>)
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	4798      	blx	r3
 801f5da:	e017      	b.n	801f60c <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f5dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f5e0:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f5e4:	7818      	ldrb	r0, [r3, #0]
 801f5e6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f5ea:	2200      	movs	r2, #0
 801f5ec:	2108      	movs	r1, #8
 801f5ee:	f7ff fbf1 	bl	801edd4 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f5f2:	e020      	b.n	801f636 <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f5f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f5f8:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f5fc:	7818      	ldrb	r0, [r3, #0]
 801f5fe:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f602:	2200      	movs	r2, #0
 801f604:	2100      	movs	r1, #0
 801f606:	f7ff fbe5 	bl	801edd4 <send_http_response_header>
			break;
 801f60a:	e014      	b.n	801f636 <http_process_handler+0x44a>
 801f60c:	e013      	b.n	801f636 <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f60e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f612:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f616:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f61a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f61e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f622:	7818      	ldrb	r0, [r3, #0]
 801f624:	4613      	mov	r3, r2
 801f626:	2200      	movs	r2, #0
 801f628:	2100      	movs	r1, #0
 801f62a:	f7ff fbd3 	bl	801edd4 <send_http_response_header>
			break;
 801f62e:	e002      	b.n	801f636 <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f630:	bf00      	nop
 801f632:	e000      	b.n	801f636 <http_process_handler+0x44a>
			break;
 801f634:	bf00      	nop
	}
}
 801f636:	f507 770a 	add.w	r7, r7, #552	; 0x228
 801f63a:	46bd      	mov	sp, r7
 801f63c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f640:	080332f8 	.word	0x080332f8
 801f644:	080332b8 	.word	0x080332b8
 801f648:	200011e8 	.word	0x200011e8
 801f64c:	200012b8 	.word	0x200012b8
 801f650:	20000120 	.word	0x20000120

0801f654 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f654:	b480      	push	{r7}
 801f656:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f658:	4b04      	ldr	r3, [pc, #16]	; (801f66c <httpServer_time_handler+0x18>)
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	3301      	adds	r3, #1
 801f65e:	4a03      	ldr	r2, [pc, #12]	; (801f66c <httpServer_time_handler+0x18>)
 801f660:	6013      	str	r3, [r2, #0]
}
 801f662:	bf00      	nop
 801f664:	46bd      	mov	sp, r7
 801f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f66a:	4770      	bx	lr
 801f66c:	200012c0 	.word	0x200012c0

0801f670 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801f670:	b580      	push	{r7, lr}
 801f672:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801f674:	4b03      	ldr	r3, [pc, #12]	; (801f684 <get_httpServer_timecount+0x14>)
 801f676:	681b      	ldr	r3, [r3, #0]
 801f678:	2001      	movs	r0, #1
 801f67a:	4798      	blx	r3
	return httpServer_tick_1s;
 801f67c:	4b02      	ldr	r3, [pc, #8]	; (801f688 <get_httpServer_timecount+0x18>)
 801f67e:	681b      	ldr	r3, [r3, #0]
}
 801f680:	4618      	mov	r0, r3
 801f682:	bd80      	pop	{r7, pc}
 801f684:	20000124 	.word	0x20000124
 801f688:	200012c0 	.word	0x200012c0

0801f68c <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801f68c:	b580      	push	{r7, lr}
 801f68e:	b084      	sub	sp, #16
 801f690:	af00      	add	r7, sp, #0
 801f692:	6078      	str	r0, [r7, #4]
 801f694:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d04e      	beq.n	801f73a <reg_httpServer_webContent+0xae>
 801f69c:	683b      	ldr	r3, [r7, #0]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d04b      	beq.n	801f73a <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801f6a2:	4b29      	ldr	r3, [pc, #164]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f6a4:	881b      	ldrh	r3, [r3, #0]
 801f6a6:	2b03      	cmp	r3, #3
 801f6a8:	d849      	bhi.n	801f73e <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801f6aa:	6878      	ldr	r0, [r7, #4]
 801f6ac:	f7f0 fdf8 	bl	80102a0 <strlen>
 801f6b0:	4603      	mov	r3, r0
 801f6b2:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801f6b4:	6838      	ldr	r0, [r7, #0]
 801f6b6:	f7f0 fdf3 	bl	80102a0 <strlen>
 801f6ba:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801f6bc:	4b22      	ldr	r3, [pc, #136]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f6be:	881b      	ldrh	r3, [r3, #0]
 801f6c0:	461a      	mov	r2, r3
 801f6c2:	4b21      	ldr	r3, [pc, #132]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f6c4:	881b      	ldrh	r3, [r3, #0]
 801f6c6:	4618      	mov	r0, r3
 801f6c8:	2332      	movs	r3, #50	; 0x32
 801f6ca:	fb02 f303 	mul.w	r3, r2, r3
 801f6ce:	4a1f      	ldr	r2, [pc, #124]	; (801f74c <reg_httpServer_webContent+0xc0>)
 801f6d0:	441a      	add	r2, r3
 801f6d2:	491f      	ldr	r1, [pc, #124]	; (801f750 <reg_httpServer_webContent+0xc4>)
 801f6d4:	4603      	mov	r3, r0
 801f6d6:	005b      	lsls	r3, r3, #1
 801f6d8:	4403      	add	r3, r0
 801f6da:	009b      	lsls	r3, r3, #2
 801f6dc:	440b      	add	r3, r1
 801f6de:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801f6e0:	4b19      	ldr	r3, [pc, #100]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f6e2:	881b      	ldrh	r3, [r3, #0]
 801f6e4:	4619      	mov	r1, r3
 801f6e6:	4a1a      	ldr	r2, [pc, #104]	; (801f750 <reg_httpServer_webContent+0xc4>)
 801f6e8:	460b      	mov	r3, r1
 801f6ea:	005b      	lsls	r3, r3, #1
 801f6ec:	440b      	add	r3, r1
 801f6ee:	009b      	lsls	r3, r3, #2
 801f6f0:	4413      	add	r3, r2
 801f6f2:	681b      	ldr	r3, [r3, #0]
 801f6f4:	6879      	ldr	r1, [r7, #4]
 801f6f6:	4618      	mov	r0, r3
 801f6f8:	f00e fa1d 	bl	802db36 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801f6fc:	4b12      	ldr	r3, [pc, #72]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f6fe:	881b      	ldrh	r3, [r3, #0]
 801f700:	4619      	mov	r1, r3
 801f702:	4a13      	ldr	r2, [pc, #76]	; (801f750 <reg_httpServer_webContent+0xc4>)
 801f704:	460b      	mov	r3, r1
 801f706:	005b      	lsls	r3, r3, #1
 801f708:	440b      	add	r3, r1
 801f70a:	009b      	lsls	r3, r3, #2
 801f70c:	4413      	add	r3, r2
 801f70e:	3304      	adds	r3, #4
 801f710:	68ba      	ldr	r2, [r7, #8]
 801f712:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801f714:	4b0c      	ldr	r3, [pc, #48]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f716:	881b      	ldrh	r3, [r3, #0]
 801f718:	4619      	mov	r1, r3
 801f71a:	4a0d      	ldr	r2, [pc, #52]	; (801f750 <reg_httpServer_webContent+0xc4>)
 801f71c:	460b      	mov	r3, r1
 801f71e:	005b      	lsls	r3, r3, #1
 801f720:	440b      	add	r3, r1
 801f722:	009b      	lsls	r3, r3, #2
 801f724:	4413      	add	r3, r2
 801f726:	3308      	adds	r3, #8
 801f728:	683a      	ldr	r2, [r7, #0]
 801f72a:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801f72c:	4b06      	ldr	r3, [pc, #24]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f72e:	881b      	ldrh	r3, [r3, #0]
 801f730:	3301      	adds	r3, #1
 801f732:	b29a      	uxth	r2, r3
 801f734:	4b04      	ldr	r3, [pc, #16]	; (801f748 <reg_httpServer_webContent+0xbc>)
 801f736:	801a      	strh	r2, [r3, #0]
 801f738:	e002      	b.n	801f740 <reg_httpServer_webContent+0xb4>
		return;
 801f73a:	bf00      	nop
 801f73c:	e000      	b.n	801f740 <reg_httpServer_webContent+0xb4>
		return;
 801f73e:	bf00      	nop
}
 801f740:	3710      	adds	r7, #16
 801f742:	46bd      	mov	sp, r7
 801f744:	bd80      	pop	{r7, pc}
 801f746:	bf00      	nop
 801f748:	200012b4 	.word	0x200012b4
 801f74c:	200011ec 	.word	0x200011ec
 801f750:	200014e4 	.word	0x200014e4

0801f754 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801f754:	b580      	push	{r7, lr}
 801f756:	b086      	sub	sp, #24
 801f758:	af00      	add	r7, sp, #0
 801f75a:	60f8      	str	r0, [r7, #12]
 801f75c:	60b9      	str	r1, [r7, #8]
 801f75e:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801f760:	2300      	movs	r3, #0
 801f762:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801f764:	2300      	movs	r3, #0
 801f766:	82fb      	strh	r3, [r7, #22]
 801f768:	e022      	b.n	801f7b0 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801f76a:	8afa      	ldrh	r2, [r7, #22]
 801f76c:	4915      	ldr	r1, [pc, #84]	; (801f7c4 <find_userReg_webContent+0x70>)
 801f76e:	4613      	mov	r3, r2
 801f770:	005b      	lsls	r3, r3, #1
 801f772:	4413      	add	r3, r2
 801f774:	009b      	lsls	r3, r3, #2
 801f776:	440b      	add	r3, r1
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	4619      	mov	r1, r3
 801f77c:	68f8      	ldr	r0, [r7, #12]
 801f77e:	f7f0 fd2f 	bl	80101e0 <strcmp>
 801f782:	4603      	mov	r3, r0
 801f784:	2b00      	cmp	r3, #0
 801f786:	d110      	bne.n	801f7aa <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801f788:	8afa      	ldrh	r2, [r7, #22]
 801f78a:	490e      	ldr	r1, [pc, #56]	; (801f7c4 <find_userReg_webContent+0x70>)
 801f78c:	4613      	mov	r3, r2
 801f78e:	005b      	lsls	r3, r3, #1
 801f790:	4413      	add	r3, r2
 801f792:	009b      	lsls	r3, r3, #2
 801f794:	440b      	add	r3, r1
 801f796:	3304      	adds	r3, #4
 801f798:	681a      	ldr	r2, [r3, #0]
 801f79a:	687b      	ldr	r3, [r7, #4]
 801f79c:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801f79e:	68bb      	ldr	r3, [r7, #8]
 801f7a0:	8afa      	ldrh	r2, [r7, #22]
 801f7a2:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801f7a4:	2301      	movs	r3, #1
 801f7a6:	757b      	strb	r3, [r7, #21]
			break;
 801f7a8:	e007      	b.n	801f7ba <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801f7aa:	8afb      	ldrh	r3, [r7, #22]
 801f7ac:	3301      	adds	r3, #1
 801f7ae:	82fb      	strh	r3, [r7, #22]
 801f7b0:	4b05      	ldr	r3, [pc, #20]	; (801f7c8 <find_userReg_webContent+0x74>)
 801f7b2:	881b      	ldrh	r3, [r3, #0]
 801f7b4:	8afa      	ldrh	r2, [r7, #22]
 801f7b6:	429a      	cmp	r2, r3
 801f7b8:	d3d7      	bcc.n	801f76a <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801f7ba:	7d7b      	ldrb	r3, [r7, #21]
}
 801f7bc:	4618      	mov	r0, r3
 801f7be:	3718      	adds	r7, #24
 801f7c0:	46bd      	mov	sp, r7
 801f7c2:	bd80      	pop	{r7, pc}
 801f7c4:	200014e4 	.word	0x200014e4
 801f7c8:	200012b4 	.word	0x200012b4

0801f7cc <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b086      	sub	sp, #24
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	60b9      	str	r1, [r7, #8]
 801f7d4:	607a      	str	r2, [r7, #4]
 801f7d6:	461a      	mov	r2, r3
 801f7d8:	4603      	mov	r3, r0
 801f7da:	81fb      	strh	r3, [r7, #14]
 801f7dc:	4613      	mov	r3, r2
 801f7de:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801f7e0:	2300      	movs	r3, #0
 801f7e2:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801f7e4:	4b16      	ldr	r3, [pc, #88]	; (801f840 <read_userReg_webContent+0x74>)
 801f7e6:	881b      	ldrh	r3, [r3, #0]
 801f7e8:	89fa      	ldrh	r2, [r7, #14]
 801f7ea:	429a      	cmp	r2, r3
 801f7ec:	d901      	bls.n	801f7f2 <read_userReg_webContent+0x26>
 801f7ee:	2300      	movs	r3, #0
 801f7f0:	e021      	b.n	801f836 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801f7f2:	89fa      	ldrh	r2, [r7, #14]
 801f7f4:	4913      	ldr	r1, [pc, #76]	; (801f844 <read_userReg_webContent+0x78>)
 801f7f6:	4613      	mov	r3, r2
 801f7f8:	005b      	lsls	r3, r3, #1
 801f7fa:	4413      	add	r3, r2
 801f7fc:	009b      	lsls	r3, r3, #2
 801f7fe:	440b      	add	r3, r1
 801f800:	3308      	adds	r3, #8
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d003      	beq.n	801f814 <read_userReg_webContent+0x48>
 801f80c:	697a      	ldr	r2, [r7, #20]
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	4413      	add	r3, r2
 801f812:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801f814:	89bb      	ldrh	r3, [r7, #12]
 801f816:	461a      	mov	r2, r3
 801f818:	6979      	ldr	r1, [r7, #20]
 801f81a:	68b8      	ldr	r0, [r7, #8]
 801f81c:	f00e f818 	bl	802d850 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801f820:	89bb      	ldrh	r3, [r7, #12]
 801f822:	68ba      	ldr	r2, [r7, #8]
 801f824:	4413      	add	r3, r2
 801f826:	2200      	movs	r2, #0
 801f828:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801f82a:	68b8      	ldr	r0, [r7, #8]
 801f82c:	f7f0 fd38 	bl	80102a0 <strlen>
 801f830:	4603      	mov	r3, r0
 801f832:	827b      	strh	r3, [r7, #18]
	return ret;
 801f834:	8a7b      	ldrh	r3, [r7, #18]
}
 801f836:	4618      	mov	r0, r3
 801f838:	3718      	adds	r7, #24
 801f83a:	46bd      	mov	sp, r7
 801f83c:	bd80      	pop	{r7, pc}
 801f83e:	bf00      	nop
 801f840:	200012b4 	.word	0x200012b4
 801f844:	200014e4 	.word	0x200014e4

0801f848 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801f848:	b580      	push	{r7, lr}
 801f84a:	b086      	sub	sp, #24
 801f84c:	af00      	add	r7, sp, #0
 801f84e:	60f8      	str	r0, [r7, #12]
 801f850:	60b9      	str	r1, [r7, #8]
 801f852:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801f854:	2301      	movs	r3, #1
 801f856:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f858:	2300      	movs	r3, #0
 801f85a:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801f85c:	4b0f      	ldr	r3, [pc, #60]	; (801f89c <http_get_cgi_handler+0x54>)
 801f85e:	681b      	ldr	r3, [r3, #0]
 801f860:	f107 0214 	add.w	r2, r7, #20
 801f864:	68b9      	ldr	r1, [r7, #8]
 801f866:	68f8      	ldr	r0, [r7, #12]
 801f868:	4798      	blx	r3
 801f86a:	4603      	mov	r3, r0
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	d108      	bne.n	801f882 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f870:	490b      	ldr	r1, [pc, #44]	; (801f8a0 <http_get_cgi_handler+0x58>)
 801f872:	68f8      	ldr	r0, [r7, #12]
 801f874:	f7f0 fcb4 	bl	80101e0 <strcmp>
 801f878:	4603      	mov	r3, r0
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d001      	beq.n	801f882 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f87e:	2300      	movs	r3, #0
 801f880:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f882:	7dfb      	ldrb	r3, [r7, #23]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d003      	beq.n	801f890 <http_get_cgi_handler+0x48>
 801f888:	8abb      	ldrh	r3, [r7, #20]
 801f88a:	461a      	mov	r2, r3
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	601a      	str	r2, [r3, #0]
	return ret;
 801f890:	7dfb      	ldrb	r3, [r7, #23]
}
 801f892:	4618      	mov	r0, r3
 801f894:	3718      	adds	r7, #24
 801f896:	46bd      	mov	sp, r7
 801f898:	bd80      	pop	{r7, pc}
 801f89a:	bf00      	nop
 801f89c:	20001518 	.word	0x20001518
 801f8a0:	080333b0 	.word	0x080333b0

0801f8a4 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801f8a4:	b590      	push	{r4, r7, lr}
 801f8a6:	b087      	sub	sp, #28
 801f8a8:	af00      	add	r7, sp, #0
 801f8aa:	60f8      	str	r0, [r7, #12]
 801f8ac:	60b9      	str	r1, [r7, #8]
 801f8ae:	607a      	str	r2, [r7, #4]
 801f8b0:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801f8b2:	2301      	movs	r3, #1
 801f8b4:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f8b6:	2300      	movs	r3, #0
 801f8b8:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801f8ba:	2300      	movs	r3, #0
 801f8bc:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801f8be:	4b20      	ldr	r3, [pc, #128]	; (801f940 <http_post_cgi_handler+0x9c>)
 801f8c0:	681c      	ldr	r4, [r3, #0]
 801f8c2:	68bb      	ldr	r3, [r7, #8]
 801f8c4:	1c99      	adds	r1, r3, #2
 801f8c6:	f107 0314 	add.w	r3, r7, #20
 801f8ca:	687a      	ldr	r2, [r7, #4]
 801f8cc:	68f8      	ldr	r0, [r7, #12]
 801f8ce:	47a0      	blx	r4
 801f8d0:	4603      	mov	r3, r0
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d127      	bne.n	801f926 <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f8d6:	491b      	ldr	r1, [pc, #108]	; (801f944 <http_post_cgi_handler+0xa0>)
 801f8d8:	68f8      	ldr	r0, [r7, #12]
 801f8da:	f7f0 fc81 	bl	80101e0 <strcmp>
 801f8de:	4603      	mov	r3, r0
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d10b      	bne.n	801f8fc <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801f8e4:	2301      	movs	r3, #1
 801f8e6:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f8e8:	7dbb      	ldrb	r3, [r7, #22]
 801f8ea:	461a      	mov	r2, r3
 801f8ec:	4916      	ldr	r1, [pc, #88]	; (801f948 <http_post_cgi_handler+0xa4>)
 801f8ee:	6878      	ldr	r0, [r7, #4]
 801f8f0:	f00d fe04 	bl	802d4fc <siprintf>
 801f8f4:	4603      	mov	r3, r0
 801f8f6:	b29b      	uxth	r3, r3
 801f8f8:	82bb      	strh	r3, [r7, #20]
 801f8fa:	e014      	b.n	801f926 <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801f8fc:	4913      	ldr	r1, [pc, #76]	; (801f94c <http_post_cgi_handler+0xa8>)
 801f8fe:	68f8      	ldr	r0, [r7, #12]
 801f900:	f7f0 fc6e 	bl	80101e0 <strcmp>
 801f904:	4603      	mov	r3, r0
 801f906:	2b00      	cmp	r3, #0
 801f908:	d10b      	bne.n	801f922 <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801f90a:	2301      	movs	r3, #1
 801f90c:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f90e:	7dbb      	ldrb	r3, [r7, #22]
 801f910:	461a      	mov	r2, r3
 801f912:	490d      	ldr	r1, [pc, #52]	; (801f948 <http_post_cgi_handler+0xa4>)
 801f914:	6878      	ldr	r0, [r7, #4]
 801f916:	f00d fdf1 	bl	802d4fc <siprintf>
 801f91a:	4603      	mov	r3, r0
 801f91c:	b29b      	uxth	r3, r3
 801f91e:	82bb      	strh	r3, [r7, #20]
 801f920:	e001      	b.n	801f926 <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f922:	2300      	movs	r3, #0
 801f924:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f926:	7dfb      	ldrb	r3, [r7, #23]
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d003      	beq.n	801f934 <http_post_cgi_handler+0x90>
 801f92c:	8abb      	ldrh	r3, [r7, #20]
 801f92e:	461a      	mov	r2, r3
 801f930:	683b      	ldr	r3, [r7, #0]
 801f932:	601a      	str	r2, [r3, #0]
	return ret;
 801f934:	7dfb      	ldrb	r3, [r7, #23]
}
 801f936:	4618      	mov	r0, r3
 801f938:	371c      	adds	r7, #28
 801f93a:	46bd      	mov	sp, r7
 801f93c:	bd90      	pop	{r4, r7, pc}
 801f93e:	bf00      	nop
 801f940:	20001514 	.word	0x20001514
 801f944:	080333b0 	.word	0x080333b0
 801f948:	080333bc 	.word	0x080333bc
 801f94c:	080333c0 	.word	0x080333c0

0801f950 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801f950:	b480      	push	{r7}
 801f952:	b085      	sub	sp, #20
 801f954:	af00      	add	r7, sp, #0
 801f956:	60f8      	str	r0, [r7, #12]
 801f958:	60b9      	str	r1, [r7, #8]
 801f95a:	607a      	str	r2, [r7, #4]

	;
}
 801f95c:	bf00      	nop
 801f95e:	4618      	mov	r0, r3
 801f960:	3714      	adds	r7, #20
 801f962:	46bd      	mov	sp, r7
 801f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f968:	4770      	bx	lr

0801f96a <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801f96a:	b480      	push	{r7}
 801f96c:	b085      	sub	sp, #20
 801f96e:	af00      	add	r7, sp, #0
 801f970:	60f8      	str	r0, [r7, #12]
 801f972:	60b9      	str	r1, [r7, #8]
 801f974:	607a      	str	r2, [r7, #4]
 801f976:	603b      	str	r3, [r7, #0]
	;
}
 801f978:	bf00      	nop
 801f97a:	4618      	mov	r0, r3
 801f97c:	3714      	adds	r7, #20
 801f97e:	46bd      	mov	sp, r7
 801f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f984:	4770      	bx	lr
	...

0801f988 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801f988:	b480      	push	{r7}
 801f98a:	b083      	sub	sp, #12
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801f990:	4b07      	ldr	r3, [pc, #28]	; (801f9b0 <reg_external_post_cgi_processor+0x28>)
 801f992:	4a08      	ldr	r2, [pc, #32]	; (801f9b4 <reg_external_post_cgi_processor+0x2c>)
 801f994:	601a      	str	r2, [r3, #0]
	if (function) {
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d002      	beq.n	801f9a2 <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801f99c:	4a04      	ldr	r2, [pc, #16]	; (801f9b0 <reg_external_post_cgi_processor+0x28>)
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	6013      	str	r3, [r2, #0]
	}

}
 801f9a2:	bf00      	nop
 801f9a4:	370c      	adds	r7, #12
 801f9a6:	46bd      	mov	sp, r7
 801f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ac:	4770      	bx	lr
 801f9ae:	bf00      	nop
 801f9b0:	20001514 	.word	0x20001514
 801f9b4:	0801f96b 	.word	0x0801f96b

0801f9b8 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801f9b8:	b480      	push	{r7}
 801f9ba:	b083      	sub	sp, #12
 801f9bc:	af00      	add	r7, sp, #0
 801f9be:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801f9c0:	4b07      	ldr	r3, [pc, #28]	; (801f9e0 <reg_external_get_cgi_processor+0x28>)
 801f9c2:	4a08      	ldr	r2, [pc, #32]	; (801f9e4 <reg_external_get_cgi_processor+0x2c>)
 801f9c4:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	d002      	beq.n	801f9d2 <reg_external_get_cgi_processor+0x1a>
 801f9cc:	4a04      	ldr	r2, [pc, #16]	; (801f9e0 <reg_external_get_cgi_processor+0x28>)
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	6013      	str	r3, [r2, #0]

}
 801f9d2:	bf00      	nop
 801f9d4:	370c      	adds	r7, #12
 801f9d6:	46bd      	mov	sp, r7
 801f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9dc:	4770      	bx	lr
 801f9de:	bf00      	nop
 801f9e0:	20001518 	.word	0x20001518
 801f9e4:	0801f951 	.word	0x0801f951

0801f9e8 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801f9e8:	b480      	push	{r7}
 801f9ea:	af00      	add	r7, sp, #0
 801f9ec:	bf00      	nop
 801f9ee:	46bd      	mov	sp, r7
 801f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f4:	4770      	bx	lr

0801f9f6 <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801f9f6:	b480      	push	{r7}
 801f9f8:	b083      	sub	sp, #12
 801f9fa:	af00      	add	r7, sp, #0
 801f9fc:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	f242 7210 	movw	r2, #10000	; 0x2710
 801fa04:	fb02 f303 	mul.w	r3, r2, r3
 801fa08:	607b      	str	r3, [r7, #4]

	while (sec){
 801fa0a:	e002      	b.n	801fa12 <proto_delay_func+0x1c>
		sec--;
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	3b01      	subs	r3, #1
 801fa10:	607b      	str	r3, [r7, #4]
	while (sec){
 801fa12:	687b      	ldr	r3, [r7, #4]
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	d1f9      	bne.n	801fa0c <proto_delay_func+0x16>
	}

}
 801fa18:	bf00      	nop
 801fa1a:	bf00      	nop
 801fa1c:	370c      	adds	r7, #12
 801fa1e:	46bd      	mov	sp, r7
 801fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa24:	4770      	bx	lr
	...

0801fa28 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801fa28:	b480      	push	{r7}
 801fa2a:	b083      	sub	sp, #12
 801fa2c:	af00      	add	r7, sp, #0
 801fa2e:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801fa30:	4a04      	ldr	r2, [pc, #16]	; (801fa44 <w5500_lib_init+0x1c>)
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	6013      	str	r3, [r2, #0]
}
 801fa36:	bf00      	nop
 801fa38:	370c      	adds	r7, #12
 801fa3a:	46bd      	mov	sp, r7
 801fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa40:	4770      	bx	lr
 801fa42:	bf00      	nop
 801fa44:	20001520 	.word	0x20001520

0801fa48 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801fa48:	b580      	push	{r7, lr}
 801fa4a:	b082      	sub	sp, #8
 801fa4c:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801fa4e:	2303      	movs	r3, #3
 801fa50:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801fa52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801fa56:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801fa58:	4b07      	ldr	r3, [pc, #28]	; (801fa78 <network_init+0x30>)
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	4619      	mov	r1, r3
 801fa5e:	2000      	movs	r0, #0
 801fa60:	f7fa fa92 	bl	8019f88 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801fa64:	1d3b      	adds	r3, r7, #4
 801fa66:	4619      	mov	r1, r3
 801fa68:	2004      	movs	r0, #4
 801fa6a:	f7fa fa8d 	bl	8019f88 <ctlnetwork>
}
 801fa6e:	bf00      	nop
 801fa70:	3708      	adds	r7, #8
 801fa72:	46bd      	mov	sp, r7
 801fa74:	bd80      	pop	{r7, pc}
 801fa76:	bf00      	nop
 801fa78:	20001520 	.word	0x20001520

0801fa7c <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801fa7c:	b480      	push	{r7}
 801fa7e:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801fa80:	4b03      	ldr	r3, [pc, #12]	; (801fa90 <Callback_IPConflict+0x14>)
 801fa82:	2200      	movs	r2, #0
 801fa84:	701a      	strb	r2, [r3, #0]
}
 801fa86:	bf00      	nop
 801fa88:	46bd      	mov	sp, r7
 801fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa8e:	4770      	bx	lr
 801fa90:	2000151c 	.word	0x2000151c

0801fa94 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801fa94:	b580      	push	{r7, lr}
 801fa96:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801fa98:	4b11      	ldr	r3, [pc, #68]	; (801fae0 <Callback_IPAssigned+0x4c>)
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	3306      	adds	r3, #6
 801fa9e:	4618      	mov	r0, r3
 801faa0:	f7fc fa08 	bl	801beb4 <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801faa4:	4b0e      	ldr	r3, [pc, #56]	; (801fae0 <Callback_IPAssigned+0x4c>)
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	330e      	adds	r3, #14
 801faaa:	4618      	mov	r0, r3
 801faac:	f7fc fa22 	bl	801bef4 <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801fab0:	4b0b      	ldr	r3, [pc, #44]	; (801fae0 <Callback_IPAssigned+0x4c>)
 801fab2:	681b      	ldr	r3, [r3, #0]
 801fab4:	330a      	adds	r3, #10
 801fab6:	4618      	mov	r0, r3
 801fab8:	f7fc fa3c 	bl	801bf34 <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801fabc:	4b08      	ldr	r3, [pc, #32]	; (801fae0 <Callback_IPAssigned+0x4c>)
 801fabe:	681b      	ldr	r3, [r3, #0]
 801fac0:	3312      	adds	r3, #18
 801fac2:	4618      	mov	r0, r3
 801fac4:	f7fc fa56 	bl	801bf74 <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801fac8:	4b05      	ldr	r3, [pc, #20]	; (801fae0 <Callback_IPAssigned+0x4c>)
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	2202      	movs	r2, #2
 801face:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801fad0:	f7ff ffba 	bl	801fa48 <network_init>

   ip_dhcp_assigned = true;
 801fad4:	4b03      	ldr	r3, [pc, #12]	; (801fae4 <Callback_IPAssigned+0x50>)
 801fad6:	2201      	movs	r2, #1
 801fad8:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801fada:	bf00      	nop
 801fadc:	bd80      	pop	{r7, pc}
 801fade:	bf00      	nop
 801fae0:	20001520 	.word	0x20001520
 801fae4:	2000151c 	.word	0x2000151c

0801fae8 <dhcp_rutine>:

void dhcp_rutine(void){
 801fae8:	b580      	push	{r7, lr}
 801faea:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801faec:	f7fb ff8c 	bl	801ba08 <DHCP_run>
 801faf0:	4603      	mov	r3, r0
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d004      	beq.n	801fb00 <dhcp_rutine+0x18>
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	db09      	blt.n	801fb0e <dhcp_rutine+0x26>
 801fafa:	3b02      	subs	r3, #2
 801fafc:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801fafe:	e006      	b.n	801fb0e <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801fb00:	4b04      	ldr	r3, [pc, #16]	; (801fb14 <dhcp_rutine+0x2c>)
 801fb02:	781b      	ldrb	r3, [r3, #0]
 801fb04:	3301      	adds	r3, #1
 801fb06:	b2da      	uxtb	r2, r3
 801fb08:	4b02      	ldr	r3, [pc, #8]	; (801fb14 <dhcp_rutine+0x2c>)
 801fb0a:	701a      	strb	r2, [r3, #0]
				break;
 801fb0c:	e000      	b.n	801fb10 <dhcp_rutine+0x28>
				break;
 801fb0e:	bf00      	nop
			}
}
 801fb10:	bf00      	nop
 801fb12:	bd80      	pop	{r7, pc}
 801fb14:	20001524 	.word	0x20001524

0801fb18 <link_status>:

int link_status(void){
 801fb18:	b580      	push	{r7, lr}
 801fb1a:	b082      	sub	sp, #8
 801fb1c:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801fb1e:	1dfb      	adds	r3, r7, #7
 801fb20:	4619      	mov	r1, r3
 801fb22:	200f      	movs	r0, #15
 801fb24:	f7fa f94e 	bl	8019dc4 <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801fb28:	79fb      	ldrb	r3, [r7, #7]
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	d102      	bne.n	801fb34 <link_status+0x1c>
 801fb2e:	4b04      	ldr	r3, [pc, #16]	; (801fb40 <link_status+0x28>)
 801fb30:	2200      	movs	r2, #0
 801fb32:	701a      	strb	r2, [r3, #0]
	return temp;
 801fb34:	79fb      	ldrb	r3, [r7, #7]
}
 801fb36:	4618      	mov	r0, r3
 801fb38:	3708      	adds	r7, #8
 801fb3a:	46bd      	mov	sp, r7
 801fb3c:	bd80      	pop	{r7, pc}
 801fb3e:	bf00      	nop
 801fb40:	2000151c 	.word	0x2000151c

0801fb44 <link_duplex>:

int link_duplex(void){
 801fb44:	b580      	push	{r7, lr}
 801fb46:	b082      	sub	sp, #8
 801fb48:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fb4a:	1d3b      	adds	r3, r7, #4
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	f7fa fccb 	bl	801a4e8 <wizphy_getphystat>
	return phy_status.duplex;
 801fb52:	79fb      	ldrb	r3, [r7, #7]
}
 801fb54:	4618      	mov	r0, r3
 801fb56:	3708      	adds	r7, #8
 801fb58:	46bd      	mov	sp, r7
 801fb5a:	bd80      	pop	{r7, pc}

0801fb5c <link_speed>:

int link_speed(void){
 801fb5c:	b580      	push	{r7, lr}
 801fb5e:	b082      	sub	sp, #8
 801fb60:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fb62:	1d3b      	adds	r3, r7, #4
 801fb64:	4618      	mov	r0, r3
 801fb66:	f7fa fcbf 	bl	801a4e8 <wizphy_getphystat>
	return phy_status.speed;
 801fb6a:	79bb      	ldrb	r3, [r7, #6]
}
 801fb6c:	4618      	mov	r0, r3
 801fb6e:	3708      	adds	r7, #8
 801fb70:	46bd      	mov	sp, r7
 801fb72:	bd80      	pop	{r7, pc}

0801fb74 <assigned_ip>:

int assigned_ip(void){
 801fb74:	b480      	push	{r7}
 801fb76:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801fb78:	4b03      	ldr	r3, [pc, #12]	; (801fb88 <assigned_ip+0x14>)
 801fb7a:	781b      	ldrb	r3, [r3, #0]
}
 801fb7c:	4618      	mov	r0, r3
 801fb7e:	46bd      	mov	sp, r7
 801fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb84:	4770      	bx	lr
 801fb86:	bf00      	nop
 801fb88:	2000151c 	.word	0x2000151c

0801fb8c <set_ip_aasigned>:

void set_ip_aasigned(void){
 801fb8c:	b480      	push	{r7}
 801fb8e:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801fb90:	4b03      	ldr	r3, [pc, #12]	; (801fba0 <set_ip_aasigned+0x14>)
 801fb92:	2201      	movs	r2, #1
 801fb94:	701a      	strb	r2, [r3, #0]
}
 801fb96:	bf00      	nop
 801fb98:	46bd      	mov	sp, r7
 801fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb9e:	4770      	bx	lr
 801fba0:	2000151c 	.word	0x2000151c

0801fba4 <w5500_init>:

int w5500_init(void)
{
 801fba4:	b590      	push	{r4, r7, lr}
 801fba6:	b085      	sub	sp, #20
 801fba8:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801fbaa:	4b18      	ldr	r3, [pc, #96]	; (801fc0c <w5500_init+0x68>)
 801fbac:	463c      	mov	r4, r7
 801fbae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fbb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801fbb4:	4b16      	ldr	r3, [pc, #88]	; (801fc10 <w5500_init+0x6c>)
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	4798      	blx	r3
  delay_ms(delay0_5s);
 801fbba:	4b16      	ldr	r3, [pc, #88]	; (801fc14 <w5500_init+0x70>)
 801fbbc:	681b      	ldr	r3, [r3, #0]
 801fbbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801fbc2:	4798      	blx	r3
  ResetOFF();
 801fbc4:	4b14      	ldr	r3, [pc, #80]	; (801fc18 <w5500_init+0x74>)
 801fbc6:	681b      	ldr	r3, [r3, #0]
 801fbc8:	4798      	blx	r3
  delay_ms(delay3s);
 801fbca:	4b12      	ldr	r3, [pc, #72]	; (801fc14 <w5500_init+0x70>)
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801fbd2:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801fbd4:	463b      	mov	r3, r7
 801fbd6:	4619      	mov	r1, r3
 801fbd8:	2001      	movs	r0, #1
 801fbda:	f7fa f8f3 	bl	8019dc4 <ctlwizchip>
 801fbde:	4603      	mov	r3, r0
 801fbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fbe4:	d102      	bne.n	801fbec <w5500_init+0x48>
  {
	  return -1;
 801fbe6:	f04f 33ff 	mov.w	r3, #4294967295
 801fbea:	e00b      	b.n	801fc04 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801fbec:	f7ff ff94 	bl	801fb18 <link_status>
 801fbf0:	4603      	mov	r3, r0
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d102      	bne.n	801fbfc <w5500_init+0x58>
	   return -1;
 801fbf6:	f04f 33ff 	mov.w	r3, #4294967295
 801fbfa:	e003      	b.n	801fc04 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801fbfc:	4b07      	ldr	r3, [pc, #28]	; (801fc1c <w5500_init+0x78>)
 801fbfe:	2200      	movs	r2, #0
 801fc00:	701a      	strb	r2, [r3, #0]
  return 0;
 801fc02:	2300      	movs	r3, #0
}
 801fc04:	4618      	mov	r0, r3
 801fc06:	3714      	adds	r7, #20
 801fc08:	46bd      	mov	sp, r7
 801fc0a:	bd90      	pop	{r4, r7, pc}
 801fc0c:	080333d4 	.word	0x080333d4
 801fc10:	2000152c 	.word	0x2000152c
 801fc14:	20001528 	.word	0x20001528
 801fc18:	20001530 	.word	0x20001530
 801fc1c:	2000151c 	.word	0x2000151c

0801fc20 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801fc20:	b480      	push	{r7}
 801fc22:	b083      	sub	sp, #12
 801fc24:	af00      	add	r7, sp, #0
 801fc26:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801fc28:	4b07      	ldr	r3, [pc, #28]	; (801fc48 <w5500_delay_cb+0x28>)
 801fc2a:	4a08      	ldr	r2, [pc, #32]	; (801fc4c <w5500_delay_cb+0x2c>)
 801fc2c:	601a      	str	r2, [r3, #0]

	if (function){
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	d002      	beq.n	801fc3a <w5500_delay_cb+0x1a>
		delay_ms = function;
 801fc34:	4a04      	ldr	r2, [pc, #16]	; (801fc48 <w5500_delay_cb+0x28>)
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	6013      	str	r3, [r2, #0]
	}
}
 801fc3a:	bf00      	nop
 801fc3c:	370c      	adds	r7, #12
 801fc3e:	46bd      	mov	sp, r7
 801fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc44:	4770      	bx	lr
 801fc46:	bf00      	nop
 801fc48:	20001528 	.word	0x20001528
 801fc4c:	0801f9f7 	.word	0x0801f9f7

0801fc50 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801fc50:	b480      	push	{r7}
 801fc52:	b083      	sub	sp, #12
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	6078      	str	r0, [r7, #4]
 801fc58:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801fc5a:	4b0c      	ldr	r3, [pc, #48]	; (801fc8c <w5500_reset_cb+0x3c>)
 801fc5c:	4a0c      	ldr	r2, [pc, #48]	; (801fc90 <w5500_reset_cb+0x40>)
 801fc5e:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801fc60:	4b0c      	ldr	r3, [pc, #48]	; (801fc94 <w5500_reset_cb+0x44>)
 801fc62:	4a0b      	ldr	r2, [pc, #44]	; (801fc90 <w5500_reset_cb+0x40>)
 801fc64:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d002      	beq.n	801fc72 <w5500_reset_cb+0x22>
 801fc6c:	4a07      	ldr	r2, [pc, #28]	; (801fc8c <w5500_reset_cb+0x3c>)
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 801fc72:	683b      	ldr	r3, [r7, #0]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d002      	beq.n	801fc7e <w5500_reset_cb+0x2e>
 801fc78:	4a06      	ldr	r2, [pc, #24]	; (801fc94 <w5500_reset_cb+0x44>)
 801fc7a:	683b      	ldr	r3, [r7, #0]
 801fc7c:	6013      	str	r3, [r2, #0]
}
 801fc7e:	bf00      	nop
 801fc80:	370c      	adds	r7, #12
 801fc82:	46bd      	mov	sp, r7
 801fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc88:	4770      	bx	lr
 801fc8a:	bf00      	nop
 801fc8c:	2000152c 	.word	0x2000152c
 801fc90:	0801f9e9 	.word	0x0801f9e9
 801fc94:	20001530 	.word	0x20001530

0801fc98 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 801fc98:	b580      	push	{r7, lr}
 801fc9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fca2:	4802      	ldr	r0, [pc, #8]	; (801fcac <Eth_reset_on+0x14>)
 801fca4:	f7f5 ffae 	bl	8015c04 <HAL_GPIO_WritePin>
}
 801fca8:	bf00      	nop
 801fcaa:	bd80      	pop	{r7, pc}
 801fcac:	40020000 	.word	0x40020000

0801fcb0 <Eth_reset_off>:

void Eth_reset_off(void){
 801fcb0:	b580      	push	{r7, lr}
 801fcb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 801fcb4:	2201      	movs	r2, #1
 801fcb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fcba:	4802      	ldr	r0, [pc, #8]	; (801fcc4 <Eth_reset_off+0x14>)
 801fcbc:	f7f5 ffa2 	bl	8015c04 <HAL_GPIO_WritePin>
}
 801fcc0:	bf00      	nop
 801fcc2:	bd80      	pop	{r7, pc}
 801fcc4:	40020000 	.word	0x40020000

0801fcc8 <Eth_spi_select>:

void Eth_spi_select(void){
 801fcc8:	b580      	push	{r7, lr}
 801fcca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 801fccc:	2200      	movs	r2, #0
 801fcce:	2140      	movs	r1, #64	; 0x40
 801fcd0:	4802      	ldr	r0, [pc, #8]	; (801fcdc <Eth_spi_select+0x14>)
 801fcd2:	f7f5 ff97 	bl	8015c04 <HAL_GPIO_WritePin>
}
 801fcd6:	bf00      	nop
 801fcd8:	bd80      	pop	{r7, pc}
 801fcda:	bf00      	nop
 801fcdc:	40020400 	.word	0x40020400

0801fce0 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 801fce0:	b580      	push	{r7, lr}
 801fce2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 801fce4:	2201      	movs	r2, #1
 801fce6:	2140      	movs	r1, #64	; 0x40
 801fce8:	4802      	ldr	r0, [pc, #8]	; (801fcf4 <Eth_spi_deselect+0x14>)
 801fcea:	f7f5 ff8b 	bl	8015c04 <HAL_GPIO_WritePin>
}
 801fcee:	bf00      	nop
 801fcf0:	bd80      	pop	{r7, pc}
 801fcf2:	bf00      	nop
 801fcf4:	40020400 	.word	0x40020400

0801fcf8 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 801fcf8:	b084      	sub	sp, #16
 801fcfa:	b580      	push	{r7, lr}
 801fcfc:	af00      	add	r7, sp, #0
 801fcfe:	f107 0c08 	add.w	ip, r7, #8
 801fd02:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 801fd06:	4b07      	ldr	r3, [pc, #28]	; (801fd24 <Reg_eth_spi+0x2c>)
 801fd08:	4618      	mov	r0, r3
 801fd0a:	f107 0308 	add.w	r3, r7, #8
 801fd0e:	2258      	movs	r2, #88	; 0x58
 801fd10:	4619      	mov	r1, r3
 801fd12:	f00d ff18 	bl	802db46 <memcpy>
}
 801fd16:	bf00      	nop
 801fd18:	46bd      	mov	sp, r7
 801fd1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fd1e:	b004      	add	sp, #16
 801fd20:	4770      	bx	lr
 801fd22:	bf00      	nop
 801fd24:	20001534 	.word	0x20001534

0801fd28 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 801fd28:	b580      	push	{r7, lr}
 801fd2a:	b082      	sub	sp, #8
 801fd2c:	af00      	add	r7, sp, #0
 801fd2e:	4603      	mov	r3, r0
 801fd30:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 801fd32:	1df9      	adds	r1, r7, #7
 801fd34:	f241 3388 	movw	r3, #5000	; 0x1388
 801fd38:	2201      	movs	r2, #1
 801fd3a:	4803      	ldr	r0, [pc, #12]	; (801fd48 <Eth_spi_send_byte+0x20>)
 801fd3c:	f7f6 fd21 	bl	8016782 <HAL_SPI_Transmit>
}
 801fd40:	bf00      	nop
 801fd42:	3708      	adds	r7, #8
 801fd44:	46bd      	mov	sp, r7
 801fd46:	bd80      	pop	{r7, pc}
 801fd48:	20001534 	.word	0x20001534

0801fd4c <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 801fd4c:	b580      	push	{r7, lr}
 801fd4e:	b082      	sub	sp, #8
 801fd50:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 801fd52:	1df9      	adds	r1, r7, #7
 801fd54:	f241 3388 	movw	r3, #5000	; 0x1388
 801fd58:	2201      	movs	r2, #1
 801fd5a:	4804      	ldr	r0, [pc, #16]	; (801fd6c <Eth_spi_resv_byte+0x20>)
 801fd5c:	f7f6 fe54 	bl	8016a08 <HAL_SPI_Receive>
	return byte;
 801fd60:	79fb      	ldrb	r3, [r7, #7]
}
 801fd62:	4618      	mov	r0, r3
 801fd64:	3708      	adds	r7, #8
 801fd66:	46bd      	mov	sp, r7
 801fd68:	bd80      	pop	{r7, pc}
 801fd6a:	bf00      	nop
 801fd6c:	20001534 	.word	0x20001534

0801fd70 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 801fd70:	b480      	push	{r7}
 801fd72:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 801fd74:	bf00      	nop
 801fd76:	46bd      	mov	sp, r7
 801fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd7c:	4770      	bx	lr
	...

0801fd80 <__NVIC_SetPriority>:
{
 801fd80:	b480      	push	{r7}
 801fd82:	b083      	sub	sp, #12
 801fd84:	af00      	add	r7, sp, #0
 801fd86:	4603      	mov	r3, r0
 801fd88:	6039      	str	r1, [r7, #0]
 801fd8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801fd8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	db0a      	blt.n	801fdaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801fd94:	683b      	ldr	r3, [r7, #0]
 801fd96:	b2da      	uxtb	r2, r3
 801fd98:	490c      	ldr	r1, [pc, #48]	; (801fdcc <__NVIC_SetPriority+0x4c>)
 801fd9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801fd9e:	0112      	lsls	r2, r2, #4
 801fda0:	b2d2      	uxtb	r2, r2
 801fda2:	440b      	add	r3, r1
 801fda4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801fda8:	e00a      	b.n	801fdc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801fdaa:	683b      	ldr	r3, [r7, #0]
 801fdac:	b2da      	uxtb	r2, r3
 801fdae:	4908      	ldr	r1, [pc, #32]	; (801fdd0 <__NVIC_SetPriority+0x50>)
 801fdb0:	79fb      	ldrb	r3, [r7, #7]
 801fdb2:	f003 030f 	and.w	r3, r3, #15
 801fdb6:	3b04      	subs	r3, #4
 801fdb8:	0112      	lsls	r2, r2, #4
 801fdba:	b2d2      	uxtb	r2, r2
 801fdbc:	440b      	add	r3, r1
 801fdbe:	761a      	strb	r2, [r3, #24]
}
 801fdc0:	bf00      	nop
 801fdc2:	370c      	adds	r7, #12
 801fdc4:	46bd      	mov	sp, r7
 801fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdca:	4770      	bx	lr
 801fdcc:	e000e100 	.word	0xe000e100
 801fdd0:	e000ed00 	.word	0xe000ed00

0801fdd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801fdd4:	b580      	push	{r7, lr}
 801fdd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801fdd8:	4b05      	ldr	r3, [pc, #20]	; (801fdf0 <SysTick_Handler+0x1c>)
 801fdda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801fddc:	f002 fbe0 	bl	80225a0 <xTaskGetSchedulerState>
 801fde0:	4603      	mov	r3, r0
 801fde2:	2b01      	cmp	r3, #1
 801fde4:	d001      	beq.n	801fdea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801fde6:	f003 fac7 	bl	8023378 <xPortSysTickHandler>
  }
}
 801fdea:	bf00      	nop
 801fdec:	bd80      	pop	{r7, pc}
 801fdee:	bf00      	nop
 801fdf0:	e000e010 	.word	0xe000e010

0801fdf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801fdf4:	b580      	push	{r7, lr}
 801fdf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801fdf8:	2100      	movs	r1, #0
 801fdfa:	f06f 0004 	mvn.w	r0, #4
 801fdfe:	f7ff ffbf 	bl	801fd80 <__NVIC_SetPriority>
#endif
}
 801fe02:	bf00      	nop
 801fe04:	bd80      	pop	{r7, pc}
	...

0801fe08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801fe08:	b480      	push	{r7}
 801fe0a:	b083      	sub	sp, #12
 801fe0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fe0e:	f3ef 8305 	mrs	r3, IPSR
 801fe12:	603b      	str	r3, [r7, #0]
  return(result);
 801fe14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	d003      	beq.n	801fe22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801fe1a:	f06f 0305 	mvn.w	r3, #5
 801fe1e:	607b      	str	r3, [r7, #4]
 801fe20:	e00c      	b.n	801fe3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801fe22:	4b0a      	ldr	r3, [pc, #40]	; (801fe4c <osKernelInitialize+0x44>)
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d105      	bne.n	801fe36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801fe2a:	4b08      	ldr	r3, [pc, #32]	; (801fe4c <osKernelInitialize+0x44>)
 801fe2c:	2201      	movs	r2, #1
 801fe2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801fe30:	2300      	movs	r3, #0
 801fe32:	607b      	str	r3, [r7, #4]
 801fe34:	e002      	b.n	801fe3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801fe36:	f04f 33ff 	mov.w	r3, #4294967295
 801fe3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801fe3c:	687b      	ldr	r3, [r7, #4]
}
 801fe3e:	4618      	mov	r0, r3
 801fe40:	370c      	adds	r7, #12
 801fe42:	46bd      	mov	sp, r7
 801fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe48:	4770      	bx	lr
 801fe4a:	bf00      	nop
 801fe4c:	2000158c 	.word	0x2000158c

0801fe50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801fe50:	b580      	push	{r7, lr}
 801fe52:	b082      	sub	sp, #8
 801fe54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fe56:	f3ef 8305 	mrs	r3, IPSR
 801fe5a:	603b      	str	r3, [r7, #0]
  return(result);
 801fe5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d003      	beq.n	801fe6a <osKernelStart+0x1a>
    stat = osErrorISR;
 801fe62:	f06f 0305 	mvn.w	r3, #5
 801fe66:	607b      	str	r3, [r7, #4]
 801fe68:	e010      	b.n	801fe8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801fe6a:	4b0b      	ldr	r3, [pc, #44]	; (801fe98 <osKernelStart+0x48>)
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	2b01      	cmp	r3, #1
 801fe70:	d109      	bne.n	801fe86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801fe72:	f7ff ffbf 	bl	801fdf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801fe76:	4b08      	ldr	r3, [pc, #32]	; (801fe98 <osKernelStart+0x48>)
 801fe78:	2202      	movs	r2, #2
 801fe7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801fe7c:	f001 fece 	bl	8021c1c <vTaskStartScheduler>
      stat = osOK;
 801fe80:	2300      	movs	r3, #0
 801fe82:	607b      	str	r3, [r7, #4]
 801fe84:	e002      	b.n	801fe8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 801fe86:	f04f 33ff 	mov.w	r3, #4294967295
 801fe8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801fe8c:	687b      	ldr	r3, [r7, #4]
}
 801fe8e:	4618      	mov	r0, r3
 801fe90:	3708      	adds	r7, #8
 801fe92:	46bd      	mov	sp, r7
 801fe94:	bd80      	pop	{r7, pc}
 801fe96:	bf00      	nop
 801fe98:	2000158c 	.word	0x2000158c

0801fe9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801fe9c:	b580      	push	{r7, lr}
 801fe9e:	b08e      	sub	sp, #56	; 0x38
 801fea0:	af04      	add	r7, sp, #16
 801fea2:	60f8      	str	r0, [r7, #12]
 801fea4:	60b9      	str	r1, [r7, #8]
 801fea6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801fea8:	2300      	movs	r3, #0
 801feaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801feac:	f3ef 8305 	mrs	r3, IPSR
 801feb0:	617b      	str	r3, [r7, #20]
  return(result);
 801feb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	d17e      	bne.n	801ffb6 <osThreadNew+0x11a>
 801feb8:	68fb      	ldr	r3, [r7, #12]
 801feba:	2b00      	cmp	r3, #0
 801febc:	d07b      	beq.n	801ffb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801febe:	2380      	movs	r3, #128	; 0x80
 801fec0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801fec2:	2318      	movs	r3, #24
 801fec4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801fec6:	2300      	movs	r3, #0
 801fec8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801feca:	f04f 33ff 	mov.w	r3, #4294967295
 801fece:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d045      	beq.n	801ff62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	681b      	ldr	r3, [r3, #0]
 801feda:	2b00      	cmp	r3, #0
 801fedc:	d002      	beq.n	801fee4 <osThreadNew+0x48>
        name = attr->name;
 801fede:	687b      	ldr	r3, [r7, #4]
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	699b      	ldr	r3, [r3, #24]
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d002      	beq.n	801fef2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	699b      	ldr	r3, [r3, #24]
 801fef0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801fef2:	69fb      	ldr	r3, [r7, #28]
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	d008      	beq.n	801ff0a <osThreadNew+0x6e>
 801fef8:	69fb      	ldr	r3, [r7, #28]
 801fefa:	2b38      	cmp	r3, #56	; 0x38
 801fefc:	d805      	bhi.n	801ff0a <osThreadNew+0x6e>
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	685b      	ldr	r3, [r3, #4]
 801ff02:	f003 0301 	and.w	r3, r3, #1
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d001      	beq.n	801ff0e <osThreadNew+0x72>
        return (NULL);
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	e054      	b.n	801ffb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	695b      	ldr	r3, [r3, #20]
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	d003      	beq.n	801ff1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	695b      	ldr	r3, [r3, #20]
 801ff1a:	089b      	lsrs	r3, r3, #2
 801ff1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	689b      	ldr	r3, [r3, #8]
 801ff22:	2b00      	cmp	r3, #0
 801ff24:	d00e      	beq.n	801ff44 <osThreadNew+0xa8>
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	68db      	ldr	r3, [r3, #12]
 801ff2a:	2bab      	cmp	r3, #171	; 0xab
 801ff2c:	d90a      	bls.n	801ff44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d006      	beq.n	801ff44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	695b      	ldr	r3, [r3, #20]
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	d002      	beq.n	801ff44 <osThreadNew+0xa8>
        mem = 1;
 801ff3e:	2301      	movs	r3, #1
 801ff40:	61bb      	str	r3, [r7, #24]
 801ff42:	e010      	b.n	801ff66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	689b      	ldr	r3, [r3, #8]
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d10c      	bne.n	801ff66 <osThreadNew+0xca>
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	68db      	ldr	r3, [r3, #12]
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	d108      	bne.n	801ff66 <osThreadNew+0xca>
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	691b      	ldr	r3, [r3, #16]
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d104      	bne.n	801ff66 <osThreadNew+0xca>
          mem = 0;
 801ff5c:	2300      	movs	r3, #0
 801ff5e:	61bb      	str	r3, [r7, #24]
 801ff60:	e001      	b.n	801ff66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801ff62:	2300      	movs	r3, #0
 801ff64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801ff66:	69bb      	ldr	r3, [r7, #24]
 801ff68:	2b01      	cmp	r3, #1
 801ff6a:	d110      	bne.n	801ff8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ff6c:	687b      	ldr	r3, [r7, #4]
 801ff6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801ff70:	687a      	ldr	r2, [r7, #4]
 801ff72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ff74:	9202      	str	r2, [sp, #8]
 801ff76:	9301      	str	r3, [sp, #4]
 801ff78:	69fb      	ldr	r3, [r7, #28]
 801ff7a:	9300      	str	r3, [sp, #0]
 801ff7c:	68bb      	ldr	r3, [r7, #8]
 801ff7e:	6a3a      	ldr	r2, [r7, #32]
 801ff80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ff82:	68f8      	ldr	r0, [r7, #12]
 801ff84:	f001 fc5a 	bl	802183c <xTaskCreateStatic>
 801ff88:	4603      	mov	r3, r0
 801ff8a:	613b      	str	r3, [r7, #16]
 801ff8c:	e013      	b.n	801ffb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801ff8e:	69bb      	ldr	r3, [r7, #24]
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	d110      	bne.n	801ffb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801ff94:	6a3b      	ldr	r3, [r7, #32]
 801ff96:	b29a      	uxth	r2, r3
 801ff98:	f107 0310 	add.w	r3, r7, #16
 801ff9c:	9301      	str	r3, [sp, #4]
 801ff9e:	69fb      	ldr	r3, [r7, #28]
 801ffa0:	9300      	str	r3, [sp, #0]
 801ffa2:	68bb      	ldr	r3, [r7, #8]
 801ffa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ffa6:	68f8      	ldr	r0, [r7, #12]
 801ffa8:	f001 fca5 	bl	80218f6 <xTaskCreate>
 801ffac:	4603      	mov	r3, r0
 801ffae:	2b01      	cmp	r3, #1
 801ffb0:	d001      	beq.n	801ffb6 <osThreadNew+0x11a>
            hTask = NULL;
 801ffb2:	2300      	movs	r3, #0
 801ffb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801ffb6:	693b      	ldr	r3, [r7, #16]
}
 801ffb8:	4618      	mov	r0, r3
 801ffba:	3728      	adds	r7, #40	; 0x28
 801ffbc:	46bd      	mov	sp, r7
 801ffbe:	bd80      	pop	{r7, pc}

0801ffc0 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 801ffc0:	b580      	push	{r7, lr}
 801ffc2:	b086      	sub	sp, #24
 801ffc4:	af00      	add	r7, sp, #0
 801ffc6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ffcc:	f3ef 8305 	mrs	r3, IPSR
 801ffd0:	60fb      	str	r3, [r7, #12]
  return(result);
 801ffd2:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	d102      	bne.n	801ffde <osThreadGetStackSpace+0x1e>
 801ffd8:	693b      	ldr	r3, [r7, #16]
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	d102      	bne.n	801ffe4 <osThreadGetStackSpace+0x24>
    sz = 0U;
 801ffde:	2300      	movs	r3, #0
 801ffe0:	617b      	str	r3, [r7, #20]
 801ffe2:	e005      	b.n	801fff0 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 801ffe4:	6938      	ldr	r0, [r7, #16]
 801ffe6:	f002 fa5b 	bl	80224a0 <uxTaskGetStackHighWaterMark>
 801ffea:	4603      	mov	r3, r0
 801ffec:	009b      	lsls	r3, r3, #2
 801ffee:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 801fff0:	697b      	ldr	r3, [r7, #20]
}
 801fff2:	4618      	mov	r0, r3
 801fff4:	3718      	adds	r7, #24
 801fff6:	46bd      	mov	sp, r7
 801fff8:	bd80      	pop	{r7, pc}
	...

0801fffc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801fffc:	b480      	push	{r7}
 801fffe:	b083      	sub	sp, #12
 8020000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020002:	f3ef 8305 	mrs	r3, IPSR
 8020006:	603b      	str	r3, [r7, #0]
  return(result);
 8020008:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802000a:	2b00      	cmp	r3, #0
 802000c:	d003      	beq.n	8020016 <osThreadYield+0x1a>
    stat = osErrorISR;
 802000e:	f06f 0305 	mvn.w	r3, #5
 8020012:	607b      	str	r3, [r7, #4]
 8020014:	e009      	b.n	802002a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8020016:	2300      	movs	r3, #0
 8020018:	607b      	str	r3, [r7, #4]
    taskYIELD();
 802001a:	4b07      	ldr	r3, [pc, #28]	; (8020038 <osThreadYield+0x3c>)
 802001c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020020:	601a      	str	r2, [r3, #0]
 8020022:	f3bf 8f4f 	dsb	sy
 8020026:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 802002a:	687b      	ldr	r3, [r7, #4]
}
 802002c:	4618      	mov	r0, r3
 802002e:	370c      	adds	r7, #12
 8020030:	46bd      	mov	sp, r7
 8020032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020036:	4770      	bx	lr
 8020038:	e000ed04 	.word	0xe000ed04

0802003c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 802003c:	b580      	push	{r7, lr}
 802003e:	b084      	sub	sp, #16
 8020040:	af00      	add	r7, sp, #0
 8020042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020044:	f3ef 8305 	mrs	r3, IPSR
 8020048:	60bb      	str	r3, [r7, #8]
  return(result);
 802004a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802004c:	2b00      	cmp	r3, #0
 802004e:	d003      	beq.n	8020058 <osDelay+0x1c>
    stat = osErrorISR;
 8020050:	f06f 0305 	mvn.w	r3, #5
 8020054:	60fb      	str	r3, [r7, #12]
 8020056:	e007      	b.n	8020068 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8020058:	2300      	movs	r3, #0
 802005a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	2b00      	cmp	r3, #0
 8020060:	d002      	beq.n	8020068 <osDelay+0x2c>
      vTaskDelay(ticks);
 8020062:	6878      	ldr	r0, [r7, #4]
 8020064:	f001 fda6 	bl	8021bb4 <vTaskDelay>
    }
  }

  return (stat);
 8020068:	68fb      	ldr	r3, [r7, #12]
}
 802006a:	4618      	mov	r0, r3
 802006c:	3710      	adds	r7, #16
 802006e:	46bd      	mov	sp, r7
 8020070:	bd80      	pop	{r7, pc}

08020072 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8020072:	b580      	push	{r7, lr}
 8020074:	b088      	sub	sp, #32
 8020076:	af00      	add	r7, sp, #0
 8020078:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 802007a:	2300      	movs	r3, #0
 802007c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802007e:	f3ef 8305 	mrs	r3, IPSR
 8020082:	60bb      	str	r3, [r7, #8]
  return(result);
 8020084:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8020086:	2b00      	cmp	r3, #0
 8020088:	d174      	bne.n	8020174 <osMutexNew+0x102>
    if (attr != NULL) {
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	2b00      	cmp	r3, #0
 802008e:	d003      	beq.n	8020098 <osMutexNew+0x26>
      type = attr->attr_bits;
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	685b      	ldr	r3, [r3, #4]
 8020094:	61bb      	str	r3, [r7, #24]
 8020096:	e001      	b.n	802009c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8020098:	2300      	movs	r3, #0
 802009a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 802009c:	69bb      	ldr	r3, [r7, #24]
 802009e:	f003 0301 	and.w	r3, r3, #1
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d002      	beq.n	80200ac <osMutexNew+0x3a>
      rmtx = 1U;
 80200a6:	2301      	movs	r3, #1
 80200a8:	617b      	str	r3, [r7, #20]
 80200aa:	e001      	b.n	80200b0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80200ac:	2300      	movs	r3, #0
 80200ae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80200b0:	69bb      	ldr	r3, [r7, #24]
 80200b2:	f003 0308 	and.w	r3, r3, #8
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d15c      	bne.n	8020174 <osMutexNew+0x102>
      mem = -1;
 80200ba:	f04f 33ff 	mov.w	r3, #4294967295
 80200be:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d015      	beq.n	80200f2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	689b      	ldr	r3, [r3, #8]
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d006      	beq.n	80200dc <osMutexNew+0x6a>
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	68db      	ldr	r3, [r3, #12]
 80200d2:	2b4f      	cmp	r3, #79	; 0x4f
 80200d4:	d902      	bls.n	80200dc <osMutexNew+0x6a>
          mem = 1;
 80200d6:	2301      	movs	r3, #1
 80200d8:	613b      	str	r3, [r7, #16]
 80200da:	e00c      	b.n	80200f6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	689b      	ldr	r3, [r3, #8]
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	d108      	bne.n	80200f6 <osMutexNew+0x84>
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	68db      	ldr	r3, [r3, #12]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d104      	bne.n	80200f6 <osMutexNew+0x84>
            mem = 0;
 80200ec:	2300      	movs	r3, #0
 80200ee:	613b      	str	r3, [r7, #16]
 80200f0:	e001      	b.n	80200f6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80200f2:	2300      	movs	r3, #0
 80200f4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80200f6:	693b      	ldr	r3, [r7, #16]
 80200f8:	2b01      	cmp	r3, #1
 80200fa:	d112      	bne.n	8020122 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80200fc:	697b      	ldr	r3, [r7, #20]
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d007      	beq.n	8020112 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	689b      	ldr	r3, [r3, #8]
 8020106:	4619      	mov	r1, r3
 8020108:	2004      	movs	r0, #4
 802010a:	f000 fc68 	bl	80209de <xQueueCreateMutexStatic>
 802010e:	61f8      	str	r0, [r7, #28]
 8020110:	e016      	b.n	8020140 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	689b      	ldr	r3, [r3, #8]
 8020116:	4619      	mov	r1, r3
 8020118:	2001      	movs	r0, #1
 802011a:	f000 fc60 	bl	80209de <xQueueCreateMutexStatic>
 802011e:	61f8      	str	r0, [r7, #28]
 8020120:	e00e      	b.n	8020140 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8020122:	693b      	ldr	r3, [r7, #16]
 8020124:	2b00      	cmp	r3, #0
 8020126:	d10b      	bne.n	8020140 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8020128:	697b      	ldr	r3, [r7, #20]
 802012a:	2b00      	cmp	r3, #0
 802012c:	d004      	beq.n	8020138 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 802012e:	2004      	movs	r0, #4
 8020130:	f000 fc3d 	bl	80209ae <xQueueCreateMutex>
 8020134:	61f8      	str	r0, [r7, #28]
 8020136:	e003      	b.n	8020140 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8020138:	2001      	movs	r0, #1
 802013a:	f000 fc38 	bl	80209ae <xQueueCreateMutex>
 802013e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8020140:	69fb      	ldr	r3, [r7, #28]
 8020142:	2b00      	cmp	r3, #0
 8020144:	d00c      	beq.n	8020160 <osMutexNew+0xee>
        if (attr != NULL) {
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	2b00      	cmp	r3, #0
 802014a:	d003      	beq.n	8020154 <osMutexNew+0xe2>
          name = attr->name;
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	681b      	ldr	r3, [r3, #0]
 8020150:	60fb      	str	r3, [r7, #12]
 8020152:	e001      	b.n	8020158 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8020154:	2300      	movs	r3, #0
 8020156:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8020158:	68f9      	ldr	r1, [r7, #12]
 802015a:	69f8      	ldr	r0, [r7, #28]
 802015c:	f001 fb10 	bl	8021780 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8020160:	69fb      	ldr	r3, [r7, #28]
 8020162:	2b00      	cmp	r3, #0
 8020164:	d006      	beq.n	8020174 <osMutexNew+0x102>
 8020166:	697b      	ldr	r3, [r7, #20]
 8020168:	2b00      	cmp	r3, #0
 802016a:	d003      	beq.n	8020174 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 802016c:	69fb      	ldr	r3, [r7, #28]
 802016e:	f043 0301 	orr.w	r3, r3, #1
 8020172:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8020174:	69fb      	ldr	r3, [r7, #28]
}
 8020176:	4618      	mov	r0, r3
 8020178:	3720      	adds	r7, #32
 802017a:	46bd      	mov	sp, r7
 802017c:	bd80      	pop	{r7, pc}

0802017e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 802017e:	b580      	push	{r7, lr}
 8020180:	b086      	sub	sp, #24
 8020182:	af00      	add	r7, sp, #0
 8020184:	6078      	str	r0, [r7, #4]
 8020186:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	f023 0301 	bic.w	r3, r3, #1
 802018e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	f003 0301 	and.w	r3, r3, #1
 8020196:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8020198:	2300      	movs	r3, #0
 802019a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802019c:	f3ef 8305 	mrs	r3, IPSR
 80201a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80201a2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d003      	beq.n	80201b0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80201a8:	f06f 0305 	mvn.w	r3, #5
 80201ac:	617b      	str	r3, [r7, #20]
 80201ae:	e02c      	b.n	802020a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80201b0:	693b      	ldr	r3, [r7, #16]
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d103      	bne.n	80201be <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80201b6:	f06f 0303 	mvn.w	r3, #3
 80201ba:	617b      	str	r3, [r7, #20]
 80201bc:	e025      	b.n	802020a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	d011      	beq.n	80201e8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80201c4:	6839      	ldr	r1, [r7, #0]
 80201c6:	6938      	ldr	r0, [r7, #16]
 80201c8:	f000 fc58 	bl	8020a7c <xQueueTakeMutexRecursive>
 80201cc:	4603      	mov	r3, r0
 80201ce:	2b01      	cmp	r3, #1
 80201d0:	d01b      	beq.n	802020a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80201d2:	683b      	ldr	r3, [r7, #0]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d003      	beq.n	80201e0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80201d8:	f06f 0301 	mvn.w	r3, #1
 80201dc:	617b      	str	r3, [r7, #20]
 80201de:	e014      	b.n	802020a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80201e0:	f06f 0302 	mvn.w	r3, #2
 80201e4:	617b      	str	r3, [r7, #20]
 80201e6:	e010      	b.n	802020a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80201e8:	6839      	ldr	r1, [r7, #0]
 80201ea:	6938      	ldr	r0, [r7, #16]
 80201ec:	f000 fef6 	bl	8020fdc <xQueueSemaphoreTake>
 80201f0:	4603      	mov	r3, r0
 80201f2:	2b01      	cmp	r3, #1
 80201f4:	d009      	beq.n	802020a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80201f6:	683b      	ldr	r3, [r7, #0]
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	d003      	beq.n	8020204 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80201fc:	f06f 0301 	mvn.w	r3, #1
 8020200:	617b      	str	r3, [r7, #20]
 8020202:	e002      	b.n	802020a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020204:	f06f 0302 	mvn.w	r3, #2
 8020208:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 802020a:	697b      	ldr	r3, [r7, #20]
}
 802020c:	4618      	mov	r0, r3
 802020e:	3718      	adds	r7, #24
 8020210:	46bd      	mov	sp, r7
 8020212:	bd80      	pop	{r7, pc}

08020214 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8020214:	b580      	push	{r7, lr}
 8020216:	b086      	sub	sp, #24
 8020218:	af00      	add	r7, sp, #0
 802021a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	f023 0301 	bic.w	r3, r3, #1
 8020222:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	f003 0301 	and.w	r3, r3, #1
 802022a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 802022c:	2300      	movs	r3, #0
 802022e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020230:	f3ef 8305 	mrs	r3, IPSR
 8020234:	60bb      	str	r3, [r7, #8]
  return(result);
 8020236:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8020238:	2b00      	cmp	r3, #0
 802023a:	d003      	beq.n	8020244 <osMutexRelease+0x30>
    stat = osErrorISR;
 802023c:	f06f 0305 	mvn.w	r3, #5
 8020240:	617b      	str	r3, [r7, #20]
 8020242:	e01f      	b.n	8020284 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8020244:	693b      	ldr	r3, [r7, #16]
 8020246:	2b00      	cmp	r3, #0
 8020248:	d103      	bne.n	8020252 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 802024a:	f06f 0303 	mvn.w	r3, #3
 802024e:	617b      	str	r3, [r7, #20]
 8020250:	e018      	b.n	8020284 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	2b00      	cmp	r3, #0
 8020256:	d009      	beq.n	802026c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8020258:	6938      	ldr	r0, [r7, #16]
 802025a:	f000 fbdb 	bl	8020a14 <xQueueGiveMutexRecursive>
 802025e:	4603      	mov	r3, r0
 8020260:	2b01      	cmp	r3, #1
 8020262:	d00f      	beq.n	8020284 <osMutexRelease+0x70>
        stat = osErrorResource;
 8020264:	f06f 0302 	mvn.w	r3, #2
 8020268:	617b      	str	r3, [r7, #20]
 802026a:	e00b      	b.n	8020284 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 802026c:	2300      	movs	r3, #0
 802026e:	2200      	movs	r2, #0
 8020270:	2100      	movs	r1, #0
 8020272:	6938      	ldr	r0, [r7, #16]
 8020274:	f000 fc38 	bl	8020ae8 <xQueueGenericSend>
 8020278:	4603      	mov	r3, r0
 802027a:	2b01      	cmp	r3, #1
 802027c:	d002      	beq.n	8020284 <osMutexRelease+0x70>
        stat = osErrorResource;
 802027e:	f06f 0302 	mvn.w	r3, #2
 8020282:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8020284:	697b      	ldr	r3, [r7, #20]
}
 8020286:	4618      	mov	r0, r3
 8020288:	3718      	adds	r7, #24
 802028a:	46bd      	mov	sp, r7
 802028c:	bd80      	pop	{r7, pc}

0802028e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 802028e:	b580      	push	{r7, lr}
 8020290:	b08a      	sub	sp, #40	; 0x28
 8020292:	af02      	add	r7, sp, #8
 8020294:	60f8      	str	r0, [r7, #12]
 8020296:	60b9      	str	r1, [r7, #8]
 8020298:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 802029a:	2300      	movs	r3, #0
 802029c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802029e:	f3ef 8305 	mrs	r3, IPSR
 80202a2:	613b      	str	r3, [r7, #16]
  return(result);
 80202a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d15f      	bne.n	802036a <osMessageQueueNew+0xdc>
 80202aa:	68fb      	ldr	r3, [r7, #12]
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d05c      	beq.n	802036a <osMessageQueueNew+0xdc>
 80202b0:	68bb      	ldr	r3, [r7, #8]
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d059      	beq.n	802036a <osMessageQueueNew+0xdc>
    mem = -1;
 80202b6:	f04f 33ff 	mov.w	r3, #4294967295
 80202ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d029      	beq.n	8020316 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	689b      	ldr	r3, [r3, #8]
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d012      	beq.n	80202f0 <osMessageQueueNew+0x62>
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	68db      	ldr	r3, [r3, #12]
 80202ce:	2b4f      	cmp	r3, #79	; 0x4f
 80202d0:	d90e      	bls.n	80202f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d00a      	beq.n	80202f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	695a      	ldr	r2, [r3, #20]
 80202de:	68fb      	ldr	r3, [r7, #12]
 80202e0:	68b9      	ldr	r1, [r7, #8]
 80202e2:	fb01 f303 	mul.w	r3, r1, r3
 80202e6:	429a      	cmp	r2, r3
 80202e8:	d302      	bcc.n	80202f0 <osMessageQueueNew+0x62>
        mem = 1;
 80202ea:	2301      	movs	r3, #1
 80202ec:	61bb      	str	r3, [r7, #24]
 80202ee:	e014      	b.n	802031a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	689b      	ldr	r3, [r3, #8]
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d110      	bne.n	802031a <osMessageQueueNew+0x8c>
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	68db      	ldr	r3, [r3, #12]
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d10c      	bne.n	802031a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020304:	2b00      	cmp	r3, #0
 8020306:	d108      	bne.n	802031a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	695b      	ldr	r3, [r3, #20]
 802030c:	2b00      	cmp	r3, #0
 802030e:	d104      	bne.n	802031a <osMessageQueueNew+0x8c>
          mem = 0;
 8020310:	2300      	movs	r3, #0
 8020312:	61bb      	str	r3, [r7, #24]
 8020314:	e001      	b.n	802031a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8020316:	2300      	movs	r3, #0
 8020318:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 802031a:	69bb      	ldr	r3, [r7, #24]
 802031c:	2b01      	cmp	r3, #1
 802031e:	d10b      	bne.n	8020338 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	691a      	ldr	r2, [r3, #16]
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	689b      	ldr	r3, [r3, #8]
 8020328:	2100      	movs	r1, #0
 802032a:	9100      	str	r1, [sp, #0]
 802032c:	68b9      	ldr	r1, [r7, #8]
 802032e:	68f8      	ldr	r0, [r7, #12]
 8020330:	f000 fa4e 	bl	80207d0 <xQueueGenericCreateStatic>
 8020334:	61f8      	str	r0, [r7, #28]
 8020336:	e008      	b.n	802034a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8020338:	69bb      	ldr	r3, [r7, #24]
 802033a:	2b00      	cmp	r3, #0
 802033c:	d105      	bne.n	802034a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 802033e:	2200      	movs	r2, #0
 8020340:	68b9      	ldr	r1, [r7, #8]
 8020342:	68f8      	ldr	r0, [r7, #12]
 8020344:	f000 fabc 	bl	80208c0 <xQueueGenericCreate>
 8020348:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 802034a:	69fb      	ldr	r3, [r7, #28]
 802034c:	2b00      	cmp	r3, #0
 802034e:	d00c      	beq.n	802036a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	2b00      	cmp	r3, #0
 8020354:	d003      	beq.n	802035e <osMessageQueueNew+0xd0>
        name = attr->name;
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	617b      	str	r3, [r7, #20]
 802035c:	e001      	b.n	8020362 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 802035e:	2300      	movs	r3, #0
 8020360:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8020362:	6979      	ldr	r1, [r7, #20]
 8020364:	69f8      	ldr	r0, [r7, #28]
 8020366:	f001 fa0b 	bl	8021780 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 802036a:	69fb      	ldr	r3, [r7, #28]
}
 802036c:	4618      	mov	r0, r3
 802036e:	3720      	adds	r7, #32
 8020370:	46bd      	mov	sp, r7
 8020372:	bd80      	pop	{r7, pc}

08020374 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8020374:	b580      	push	{r7, lr}
 8020376:	b088      	sub	sp, #32
 8020378:	af00      	add	r7, sp, #0
 802037a:	60f8      	str	r0, [r7, #12]
 802037c:	60b9      	str	r1, [r7, #8]
 802037e:	603b      	str	r3, [r7, #0]
 8020380:	4613      	mov	r3, r2
 8020382:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020384:	68fb      	ldr	r3, [r7, #12]
 8020386:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020388:	2300      	movs	r3, #0
 802038a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802038c:	f3ef 8305 	mrs	r3, IPSR
 8020390:	617b      	str	r3, [r7, #20]
  return(result);
 8020392:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8020394:	2b00      	cmp	r3, #0
 8020396:	d028      	beq.n	80203ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020398:	69bb      	ldr	r3, [r7, #24]
 802039a:	2b00      	cmp	r3, #0
 802039c:	d005      	beq.n	80203aa <osMessageQueuePut+0x36>
 802039e:	68bb      	ldr	r3, [r7, #8]
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d002      	beq.n	80203aa <osMessageQueuePut+0x36>
 80203a4:	683b      	ldr	r3, [r7, #0]
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	d003      	beq.n	80203b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80203aa:	f06f 0303 	mvn.w	r3, #3
 80203ae:	61fb      	str	r3, [r7, #28]
 80203b0:	e038      	b.n	8020424 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80203b2:	2300      	movs	r3, #0
 80203b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80203b6:	f107 0210 	add.w	r2, r7, #16
 80203ba:	2300      	movs	r3, #0
 80203bc:	68b9      	ldr	r1, [r7, #8]
 80203be:	69b8      	ldr	r0, [r7, #24]
 80203c0:	f000 fc90 	bl	8020ce4 <xQueueGenericSendFromISR>
 80203c4:	4603      	mov	r3, r0
 80203c6:	2b01      	cmp	r3, #1
 80203c8:	d003      	beq.n	80203d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80203ca:	f06f 0302 	mvn.w	r3, #2
 80203ce:	61fb      	str	r3, [r7, #28]
 80203d0:	e028      	b.n	8020424 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80203d2:	693b      	ldr	r3, [r7, #16]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d025      	beq.n	8020424 <osMessageQueuePut+0xb0>
 80203d8:	4b15      	ldr	r3, [pc, #84]	; (8020430 <osMessageQueuePut+0xbc>)
 80203da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80203de:	601a      	str	r2, [r3, #0]
 80203e0:	f3bf 8f4f 	dsb	sy
 80203e4:	f3bf 8f6f 	isb	sy
 80203e8:	e01c      	b.n	8020424 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80203ea:	69bb      	ldr	r3, [r7, #24]
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	d002      	beq.n	80203f6 <osMessageQueuePut+0x82>
 80203f0:	68bb      	ldr	r3, [r7, #8]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d103      	bne.n	80203fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80203f6:	f06f 0303 	mvn.w	r3, #3
 80203fa:	61fb      	str	r3, [r7, #28]
 80203fc:	e012      	b.n	8020424 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80203fe:	2300      	movs	r3, #0
 8020400:	683a      	ldr	r2, [r7, #0]
 8020402:	68b9      	ldr	r1, [r7, #8]
 8020404:	69b8      	ldr	r0, [r7, #24]
 8020406:	f000 fb6f 	bl	8020ae8 <xQueueGenericSend>
 802040a:	4603      	mov	r3, r0
 802040c:	2b01      	cmp	r3, #1
 802040e:	d009      	beq.n	8020424 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8020410:	683b      	ldr	r3, [r7, #0]
 8020412:	2b00      	cmp	r3, #0
 8020414:	d003      	beq.n	802041e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8020416:	f06f 0301 	mvn.w	r3, #1
 802041a:	61fb      	str	r3, [r7, #28]
 802041c:	e002      	b.n	8020424 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 802041e:	f06f 0302 	mvn.w	r3, #2
 8020422:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020424:	69fb      	ldr	r3, [r7, #28]
}
 8020426:	4618      	mov	r0, r3
 8020428:	3720      	adds	r7, #32
 802042a:	46bd      	mov	sp, r7
 802042c:	bd80      	pop	{r7, pc}
 802042e:	bf00      	nop
 8020430:	e000ed04 	.word	0xe000ed04

08020434 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8020434:	b580      	push	{r7, lr}
 8020436:	b088      	sub	sp, #32
 8020438:	af00      	add	r7, sp, #0
 802043a:	60f8      	str	r0, [r7, #12]
 802043c:	60b9      	str	r1, [r7, #8]
 802043e:	607a      	str	r2, [r7, #4]
 8020440:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020442:	68fb      	ldr	r3, [r7, #12]
 8020444:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020446:	2300      	movs	r3, #0
 8020448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802044a:	f3ef 8305 	mrs	r3, IPSR
 802044e:	617b      	str	r3, [r7, #20]
  return(result);
 8020450:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8020452:	2b00      	cmp	r3, #0
 8020454:	d028      	beq.n	80204a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020456:	69bb      	ldr	r3, [r7, #24]
 8020458:	2b00      	cmp	r3, #0
 802045a:	d005      	beq.n	8020468 <osMessageQueueGet+0x34>
 802045c:	68bb      	ldr	r3, [r7, #8]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d002      	beq.n	8020468 <osMessageQueueGet+0x34>
 8020462:	683b      	ldr	r3, [r7, #0]
 8020464:	2b00      	cmp	r3, #0
 8020466:	d003      	beq.n	8020470 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8020468:	f06f 0303 	mvn.w	r3, #3
 802046c:	61fb      	str	r3, [r7, #28]
 802046e:	e037      	b.n	80204e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8020470:	2300      	movs	r3, #0
 8020472:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8020474:	f107 0310 	add.w	r3, r7, #16
 8020478:	461a      	mov	r2, r3
 802047a:	68b9      	ldr	r1, [r7, #8]
 802047c:	69b8      	ldr	r0, [r7, #24]
 802047e:	f000 ff9b 	bl	80213b8 <xQueueReceiveFromISR>
 8020482:	4603      	mov	r3, r0
 8020484:	2b01      	cmp	r3, #1
 8020486:	d003      	beq.n	8020490 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8020488:	f06f 0302 	mvn.w	r3, #2
 802048c:	61fb      	str	r3, [r7, #28]
 802048e:	e027      	b.n	80204e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8020490:	693b      	ldr	r3, [r7, #16]
 8020492:	2b00      	cmp	r3, #0
 8020494:	d024      	beq.n	80204e0 <osMessageQueueGet+0xac>
 8020496:	4b15      	ldr	r3, [pc, #84]	; (80204ec <osMessageQueueGet+0xb8>)
 8020498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802049c:	601a      	str	r2, [r3, #0]
 802049e:	f3bf 8f4f 	dsb	sy
 80204a2:	f3bf 8f6f 	isb	sy
 80204a6:	e01b      	b.n	80204e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80204a8:	69bb      	ldr	r3, [r7, #24]
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	d002      	beq.n	80204b4 <osMessageQueueGet+0x80>
 80204ae:	68bb      	ldr	r3, [r7, #8]
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	d103      	bne.n	80204bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80204b4:	f06f 0303 	mvn.w	r3, #3
 80204b8:	61fb      	str	r3, [r7, #28]
 80204ba:	e011      	b.n	80204e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80204bc:	683a      	ldr	r2, [r7, #0]
 80204be:	68b9      	ldr	r1, [r7, #8]
 80204c0:	69b8      	ldr	r0, [r7, #24]
 80204c2:	f000 fcab 	bl	8020e1c <xQueueReceive>
 80204c6:	4603      	mov	r3, r0
 80204c8:	2b01      	cmp	r3, #1
 80204ca:	d009      	beq.n	80204e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80204cc:	683b      	ldr	r3, [r7, #0]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d003      	beq.n	80204da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80204d2:	f06f 0301 	mvn.w	r3, #1
 80204d6:	61fb      	str	r3, [r7, #28]
 80204d8:	e002      	b.n	80204e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80204da:	f06f 0302 	mvn.w	r3, #2
 80204de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80204e0:	69fb      	ldr	r3, [r7, #28]
}
 80204e2:	4618      	mov	r0, r3
 80204e4:	3720      	adds	r7, #32
 80204e6:	46bd      	mov	sp, r7
 80204e8:	bd80      	pop	{r7, pc}
 80204ea:	bf00      	nop
 80204ec:	e000ed04 	.word	0xe000ed04

080204f0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80204f0:	b580      	push	{r7, lr}
 80204f2:	b086      	sub	sp, #24
 80204f4:	af00      	add	r7, sp, #0
 80204f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80204fc:	693b      	ldr	r3, [r7, #16]
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d102      	bne.n	8020508 <osMessageQueueGetCount+0x18>
    count = 0U;
 8020502:	2300      	movs	r3, #0
 8020504:	617b      	str	r3, [r7, #20]
 8020506:	e00e      	b.n	8020526 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020508:	f3ef 8305 	mrs	r3, IPSR
 802050c:	60fb      	str	r3, [r7, #12]
  return(result);
 802050e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8020510:	2b00      	cmp	r3, #0
 8020512:	d004      	beq.n	802051e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8020514:	6938      	ldr	r0, [r7, #16]
 8020516:	f000 ffed 	bl	80214f4 <uxQueueMessagesWaitingFromISR>
 802051a:	6178      	str	r0, [r7, #20]
 802051c:	e003      	b.n	8020526 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 802051e:	6938      	ldr	r0, [r7, #16]
 8020520:	f000 ffca 	bl	80214b8 <uxQueueMessagesWaiting>
 8020524:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8020526:	697b      	ldr	r3, [r7, #20]
}
 8020528:	4618      	mov	r0, r3
 802052a:	3718      	adds	r7, #24
 802052c:	46bd      	mov	sp, r7
 802052e:	bd80      	pop	{r7, pc}

08020530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8020530:	b480      	push	{r7}
 8020532:	b085      	sub	sp, #20
 8020534:	af00      	add	r7, sp, #0
 8020536:	60f8      	str	r0, [r7, #12]
 8020538:	60b9      	str	r1, [r7, #8]
 802053a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802053c:	68fb      	ldr	r3, [r7, #12]
 802053e:	4a07      	ldr	r2, [pc, #28]	; (802055c <vApplicationGetIdleTaskMemory+0x2c>)
 8020540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8020542:	68bb      	ldr	r3, [r7, #8]
 8020544:	4a06      	ldr	r2, [pc, #24]	; (8020560 <vApplicationGetIdleTaskMemory+0x30>)
 8020546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	2280      	movs	r2, #128	; 0x80
 802054c:	601a      	str	r2, [r3, #0]
}
 802054e:	bf00      	nop
 8020550:	3714      	adds	r7, #20
 8020552:	46bd      	mov	sp, r7
 8020554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020558:	4770      	bx	lr
 802055a:	bf00      	nop
 802055c:	20001590 	.word	0x20001590
 8020560:	2000163c 	.word	0x2000163c

08020564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8020564:	b480      	push	{r7}
 8020566:	b085      	sub	sp, #20
 8020568:	af00      	add	r7, sp, #0
 802056a:	60f8      	str	r0, [r7, #12]
 802056c:	60b9      	str	r1, [r7, #8]
 802056e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	4a07      	ldr	r2, [pc, #28]	; (8020590 <vApplicationGetTimerTaskMemory+0x2c>)
 8020574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8020576:	68bb      	ldr	r3, [r7, #8]
 8020578:	4a06      	ldr	r2, [pc, #24]	; (8020594 <vApplicationGetTimerTaskMemory+0x30>)
 802057a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 802057c:	687b      	ldr	r3, [r7, #4]
 802057e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020582:	601a      	str	r2, [r3, #0]
}
 8020584:	bf00      	nop
 8020586:	3714      	adds	r7, #20
 8020588:	46bd      	mov	sp, r7
 802058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802058e:	4770      	bx	lr
 8020590:	2000183c 	.word	0x2000183c
 8020594:	200018e8 	.word	0x200018e8

08020598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8020598:	b480      	push	{r7}
 802059a:	b083      	sub	sp, #12
 802059c:	af00      	add	r7, sp, #0
 802059e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	f103 0208 	add.w	r2, r3, #8
 80205a6:	687b      	ldr	r3, [r7, #4]
 80205a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	f04f 32ff 	mov.w	r2, #4294967295
 80205b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	f103 0208 	add.w	r2, r3, #8
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	f103 0208 	add.w	r2, r3, #8
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	2200      	movs	r2, #0
 80205ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80205cc:	bf00      	nop
 80205ce:	370c      	adds	r7, #12
 80205d0:	46bd      	mov	sp, r7
 80205d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d6:	4770      	bx	lr

080205d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80205d8:	b480      	push	{r7}
 80205da:	b083      	sub	sp, #12
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	2200      	movs	r2, #0
 80205e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80205e6:	bf00      	nop
 80205e8:	370c      	adds	r7, #12
 80205ea:	46bd      	mov	sp, r7
 80205ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205f0:	4770      	bx	lr

080205f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80205f2:	b480      	push	{r7}
 80205f4:	b085      	sub	sp, #20
 80205f6:	af00      	add	r7, sp, #0
 80205f8:	6078      	str	r0, [r7, #4]
 80205fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	685b      	ldr	r3, [r3, #4]
 8020600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8020602:	683b      	ldr	r3, [r7, #0]
 8020604:	68fa      	ldr	r2, [r7, #12]
 8020606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8020608:	68fb      	ldr	r3, [r7, #12]
 802060a:	689a      	ldr	r2, [r3, #8]
 802060c:	683b      	ldr	r3, [r7, #0]
 802060e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8020610:	68fb      	ldr	r3, [r7, #12]
 8020612:	689b      	ldr	r3, [r3, #8]
 8020614:	683a      	ldr	r2, [r7, #0]
 8020616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8020618:	68fb      	ldr	r3, [r7, #12]
 802061a:	683a      	ldr	r2, [r7, #0]
 802061c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802061e:	683b      	ldr	r3, [r7, #0]
 8020620:	687a      	ldr	r2, [r7, #4]
 8020622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	681b      	ldr	r3, [r3, #0]
 8020628:	1c5a      	adds	r2, r3, #1
 802062a:	687b      	ldr	r3, [r7, #4]
 802062c:	601a      	str	r2, [r3, #0]
}
 802062e:	bf00      	nop
 8020630:	3714      	adds	r7, #20
 8020632:	46bd      	mov	sp, r7
 8020634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020638:	4770      	bx	lr

0802063a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802063a:	b480      	push	{r7}
 802063c:	b085      	sub	sp, #20
 802063e:	af00      	add	r7, sp, #0
 8020640:	6078      	str	r0, [r7, #4]
 8020642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8020644:	683b      	ldr	r3, [r7, #0]
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802064a:	68bb      	ldr	r3, [r7, #8]
 802064c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020650:	d103      	bne.n	802065a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	691b      	ldr	r3, [r3, #16]
 8020656:	60fb      	str	r3, [r7, #12]
 8020658:	e00c      	b.n	8020674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802065a:	687b      	ldr	r3, [r7, #4]
 802065c:	3308      	adds	r3, #8
 802065e:	60fb      	str	r3, [r7, #12]
 8020660:	e002      	b.n	8020668 <vListInsert+0x2e>
 8020662:	68fb      	ldr	r3, [r7, #12]
 8020664:	685b      	ldr	r3, [r3, #4]
 8020666:	60fb      	str	r3, [r7, #12]
 8020668:	68fb      	ldr	r3, [r7, #12]
 802066a:	685b      	ldr	r3, [r3, #4]
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	68ba      	ldr	r2, [r7, #8]
 8020670:	429a      	cmp	r2, r3
 8020672:	d2f6      	bcs.n	8020662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8020674:	68fb      	ldr	r3, [r7, #12]
 8020676:	685a      	ldr	r2, [r3, #4]
 8020678:	683b      	ldr	r3, [r7, #0]
 802067a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802067c:	683b      	ldr	r3, [r7, #0]
 802067e:	685b      	ldr	r3, [r3, #4]
 8020680:	683a      	ldr	r2, [r7, #0]
 8020682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8020684:	683b      	ldr	r3, [r7, #0]
 8020686:	68fa      	ldr	r2, [r7, #12]
 8020688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 802068a:	68fb      	ldr	r3, [r7, #12]
 802068c:	683a      	ldr	r2, [r7, #0]
 802068e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8020690:	683b      	ldr	r3, [r7, #0]
 8020692:	687a      	ldr	r2, [r7, #4]
 8020694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	1c5a      	adds	r2, r3, #1
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	601a      	str	r2, [r3, #0]
}
 80206a0:	bf00      	nop
 80206a2:	3714      	adds	r7, #20
 80206a4:	46bd      	mov	sp, r7
 80206a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206aa:	4770      	bx	lr

080206ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80206ac:	b480      	push	{r7}
 80206ae:	b085      	sub	sp, #20
 80206b0:	af00      	add	r7, sp, #0
 80206b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	691b      	ldr	r3, [r3, #16]
 80206b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	685b      	ldr	r3, [r3, #4]
 80206be:	687a      	ldr	r2, [r7, #4]
 80206c0:	6892      	ldr	r2, [r2, #8]
 80206c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	689b      	ldr	r3, [r3, #8]
 80206c8:	687a      	ldr	r2, [r7, #4]
 80206ca:	6852      	ldr	r2, [r2, #4]
 80206cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80206ce:	68fb      	ldr	r3, [r7, #12]
 80206d0:	685b      	ldr	r3, [r3, #4]
 80206d2:	687a      	ldr	r2, [r7, #4]
 80206d4:	429a      	cmp	r2, r3
 80206d6:	d103      	bne.n	80206e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	689a      	ldr	r2, [r3, #8]
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	2200      	movs	r2, #0
 80206e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	1e5a      	subs	r2, r3, #1
 80206ec:	68fb      	ldr	r3, [r7, #12]
 80206ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80206f0:	68fb      	ldr	r3, [r7, #12]
 80206f2:	681b      	ldr	r3, [r3, #0]
}
 80206f4:	4618      	mov	r0, r3
 80206f6:	3714      	adds	r7, #20
 80206f8:	46bd      	mov	sp, r7
 80206fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206fe:	4770      	bx	lr

08020700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020700:	b580      	push	{r7, lr}
 8020702:	b084      	sub	sp, #16
 8020704:	af00      	add	r7, sp, #0
 8020706:	6078      	str	r0, [r7, #4]
 8020708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d10a      	bne.n	802072a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8020714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020718:	f383 8811 	msr	BASEPRI, r3
 802071c:	f3bf 8f6f 	isb	sy
 8020720:	f3bf 8f4f 	dsb	sy
 8020724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8020726:	bf00      	nop
 8020728:	e7fe      	b.n	8020728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802072a:	f002 fd93 	bl	8023254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802072e:	68fb      	ldr	r3, [r7, #12]
 8020730:	681a      	ldr	r2, [r3, #0]
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020736:	68f9      	ldr	r1, [r7, #12]
 8020738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802073a:	fb01 f303 	mul.w	r3, r1, r3
 802073e:	441a      	add	r2, r3
 8020740:	68fb      	ldr	r3, [r7, #12]
 8020742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8020744:	68fb      	ldr	r3, [r7, #12]
 8020746:	2200      	movs	r2, #0
 8020748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 802074a:	68fb      	ldr	r3, [r7, #12]
 802074c:	681a      	ldr	r2, [r3, #0]
 802074e:	68fb      	ldr	r3, [r7, #12]
 8020750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020752:	68fb      	ldr	r3, [r7, #12]
 8020754:	681a      	ldr	r2, [r3, #0]
 8020756:	68fb      	ldr	r3, [r7, #12]
 8020758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802075a:	3b01      	subs	r3, #1
 802075c:	68f9      	ldr	r1, [r7, #12]
 802075e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020760:	fb01 f303 	mul.w	r3, r1, r3
 8020764:	441a      	add	r2, r3
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 802076a:	68fb      	ldr	r3, [r7, #12]
 802076c:	22ff      	movs	r2, #255	; 0xff
 802076e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8020772:	68fb      	ldr	r3, [r7, #12]
 8020774:	22ff      	movs	r2, #255	; 0xff
 8020776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 802077a:	683b      	ldr	r3, [r7, #0]
 802077c:	2b00      	cmp	r3, #0
 802077e:	d114      	bne.n	80207aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020780:	68fb      	ldr	r3, [r7, #12]
 8020782:	691b      	ldr	r3, [r3, #16]
 8020784:	2b00      	cmp	r3, #0
 8020786:	d01a      	beq.n	80207be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020788:	68fb      	ldr	r3, [r7, #12]
 802078a:	3310      	adds	r3, #16
 802078c:	4618      	mov	r0, r3
 802078e:	f001 fcfd 	bl	802218c <xTaskRemoveFromEventList>
 8020792:	4603      	mov	r3, r0
 8020794:	2b00      	cmp	r3, #0
 8020796:	d012      	beq.n	80207be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8020798:	4b0c      	ldr	r3, [pc, #48]	; (80207cc <xQueueGenericReset+0xcc>)
 802079a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802079e:	601a      	str	r2, [r3, #0]
 80207a0:	f3bf 8f4f 	dsb	sy
 80207a4:	f3bf 8f6f 	isb	sy
 80207a8:	e009      	b.n	80207be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	3310      	adds	r3, #16
 80207ae:	4618      	mov	r0, r3
 80207b0:	f7ff fef2 	bl	8020598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	3324      	adds	r3, #36	; 0x24
 80207b8:	4618      	mov	r0, r3
 80207ba:	f7ff feed 	bl	8020598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80207be:	f002 fd79 	bl	80232b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80207c2:	2301      	movs	r3, #1
}
 80207c4:	4618      	mov	r0, r3
 80207c6:	3710      	adds	r7, #16
 80207c8:	46bd      	mov	sp, r7
 80207ca:	bd80      	pop	{r7, pc}
 80207cc:	e000ed04 	.word	0xe000ed04

080207d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b08e      	sub	sp, #56	; 0x38
 80207d4:	af02      	add	r7, sp, #8
 80207d6:	60f8      	str	r0, [r7, #12]
 80207d8:	60b9      	str	r1, [r7, #8]
 80207da:	607a      	str	r2, [r7, #4]
 80207dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d10a      	bne.n	80207fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80207e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207e8:	f383 8811 	msr	BASEPRI, r3
 80207ec:	f3bf 8f6f 	isb	sy
 80207f0:	f3bf 8f4f 	dsb	sy
 80207f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80207f6:	bf00      	nop
 80207f8:	e7fe      	b.n	80207f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80207fa:	683b      	ldr	r3, [r7, #0]
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d10a      	bne.n	8020816 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8020800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020804:	f383 8811 	msr	BASEPRI, r3
 8020808:	f3bf 8f6f 	isb	sy
 802080c:	f3bf 8f4f 	dsb	sy
 8020810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020812:	bf00      	nop
 8020814:	e7fe      	b.n	8020814 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	2b00      	cmp	r3, #0
 802081a:	d002      	beq.n	8020822 <xQueueGenericCreateStatic+0x52>
 802081c:	68bb      	ldr	r3, [r7, #8]
 802081e:	2b00      	cmp	r3, #0
 8020820:	d001      	beq.n	8020826 <xQueueGenericCreateStatic+0x56>
 8020822:	2301      	movs	r3, #1
 8020824:	e000      	b.n	8020828 <xQueueGenericCreateStatic+0x58>
 8020826:	2300      	movs	r3, #0
 8020828:	2b00      	cmp	r3, #0
 802082a:	d10a      	bne.n	8020842 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 802082c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020830:	f383 8811 	msr	BASEPRI, r3
 8020834:	f3bf 8f6f 	isb	sy
 8020838:	f3bf 8f4f 	dsb	sy
 802083c:	623b      	str	r3, [r7, #32]
}
 802083e:	bf00      	nop
 8020840:	e7fe      	b.n	8020840 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d102      	bne.n	802084e <xQueueGenericCreateStatic+0x7e>
 8020848:	68bb      	ldr	r3, [r7, #8]
 802084a:	2b00      	cmp	r3, #0
 802084c:	d101      	bne.n	8020852 <xQueueGenericCreateStatic+0x82>
 802084e:	2301      	movs	r3, #1
 8020850:	e000      	b.n	8020854 <xQueueGenericCreateStatic+0x84>
 8020852:	2300      	movs	r3, #0
 8020854:	2b00      	cmp	r3, #0
 8020856:	d10a      	bne.n	802086e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8020858:	f04f 0350 	mov.w	r3, #80	; 0x50
 802085c:	f383 8811 	msr	BASEPRI, r3
 8020860:	f3bf 8f6f 	isb	sy
 8020864:	f3bf 8f4f 	dsb	sy
 8020868:	61fb      	str	r3, [r7, #28]
}
 802086a:	bf00      	nop
 802086c:	e7fe      	b.n	802086c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802086e:	2350      	movs	r3, #80	; 0x50
 8020870:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8020872:	697b      	ldr	r3, [r7, #20]
 8020874:	2b50      	cmp	r3, #80	; 0x50
 8020876:	d00a      	beq.n	802088e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8020878:	f04f 0350 	mov.w	r3, #80	; 0x50
 802087c:	f383 8811 	msr	BASEPRI, r3
 8020880:	f3bf 8f6f 	isb	sy
 8020884:	f3bf 8f4f 	dsb	sy
 8020888:	61bb      	str	r3, [r7, #24]
}
 802088a:	bf00      	nop
 802088c:	e7fe      	b.n	802088c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 802088e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020890:	683b      	ldr	r3, [r7, #0]
 8020892:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8020894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020896:	2b00      	cmp	r3, #0
 8020898:	d00d      	beq.n	80208b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 802089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802089c:	2201      	movs	r2, #1
 802089e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80208a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80208a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208a8:	9300      	str	r3, [sp, #0]
 80208aa:	4613      	mov	r3, r2
 80208ac:	687a      	ldr	r2, [r7, #4]
 80208ae:	68b9      	ldr	r1, [r7, #8]
 80208b0:	68f8      	ldr	r0, [r7, #12]
 80208b2:	f000 f83f 	bl	8020934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80208b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80208b8:	4618      	mov	r0, r3
 80208ba:	3730      	adds	r7, #48	; 0x30
 80208bc:	46bd      	mov	sp, r7
 80208be:	bd80      	pop	{r7, pc}

080208c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80208c0:	b580      	push	{r7, lr}
 80208c2:	b08a      	sub	sp, #40	; 0x28
 80208c4:	af02      	add	r7, sp, #8
 80208c6:	60f8      	str	r0, [r7, #12]
 80208c8:	60b9      	str	r1, [r7, #8]
 80208ca:	4613      	mov	r3, r2
 80208cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80208ce:	68fb      	ldr	r3, [r7, #12]
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	d10a      	bne.n	80208ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80208d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80208d8:	f383 8811 	msr	BASEPRI, r3
 80208dc:	f3bf 8f6f 	isb	sy
 80208e0:	f3bf 8f4f 	dsb	sy
 80208e4:	613b      	str	r3, [r7, #16]
}
 80208e6:	bf00      	nop
 80208e8:	e7fe      	b.n	80208e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80208ea:	68fb      	ldr	r3, [r7, #12]
 80208ec:	68ba      	ldr	r2, [r7, #8]
 80208ee:	fb02 f303 	mul.w	r3, r2, r3
 80208f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80208f4:	69fb      	ldr	r3, [r7, #28]
 80208f6:	3350      	adds	r3, #80	; 0x50
 80208f8:	4618      	mov	r0, r3
 80208fa:	f002 fdcd 	bl	8023498 <pvPortMalloc>
 80208fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020900:	69bb      	ldr	r3, [r7, #24]
 8020902:	2b00      	cmp	r3, #0
 8020904:	d011      	beq.n	802092a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8020906:	69bb      	ldr	r3, [r7, #24]
 8020908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802090a:	697b      	ldr	r3, [r7, #20]
 802090c:	3350      	adds	r3, #80	; 0x50
 802090e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020910:	69bb      	ldr	r3, [r7, #24]
 8020912:	2200      	movs	r2, #0
 8020914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020918:	79fa      	ldrb	r2, [r7, #7]
 802091a:	69bb      	ldr	r3, [r7, #24]
 802091c:	9300      	str	r3, [sp, #0]
 802091e:	4613      	mov	r3, r2
 8020920:	697a      	ldr	r2, [r7, #20]
 8020922:	68b9      	ldr	r1, [r7, #8]
 8020924:	68f8      	ldr	r0, [r7, #12]
 8020926:	f000 f805 	bl	8020934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802092a:	69bb      	ldr	r3, [r7, #24]
	}
 802092c:	4618      	mov	r0, r3
 802092e:	3720      	adds	r7, #32
 8020930:	46bd      	mov	sp, r7
 8020932:	bd80      	pop	{r7, pc}

08020934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8020934:	b580      	push	{r7, lr}
 8020936:	b084      	sub	sp, #16
 8020938:	af00      	add	r7, sp, #0
 802093a:	60f8      	str	r0, [r7, #12]
 802093c:	60b9      	str	r1, [r7, #8]
 802093e:	607a      	str	r2, [r7, #4]
 8020940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8020942:	68bb      	ldr	r3, [r7, #8]
 8020944:	2b00      	cmp	r3, #0
 8020946:	d103      	bne.n	8020950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8020948:	69bb      	ldr	r3, [r7, #24]
 802094a:	69ba      	ldr	r2, [r7, #24]
 802094c:	601a      	str	r2, [r3, #0]
 802094e:	e002      	b.n	8020956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020950:	69bb      	ldr	r3, [r7, #24]
 8020952:	687a      	ldr	r2, [r7, #4]
 8020954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8020956:	69bb      	ldr	r3, [r7, #24]
 8020958:	68fa      	ldr	r2, [r7, #12]
 802095a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 802095c:	69bb      	ldr	r3, [r7, #24]
 802095e:	68ba      	ldr	r2, [r7, #8]
 8020960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8020962:	2101      	movs	r1, #1
 8020964:	69b8      	ldr	r0, [r7, #24]
 8020966:	f7ff fecb 	bl	8020700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802096a:	69bb      	ldr	r3, [r7, #24]
 802096c:	78fa      	ldrb	r2, [r7, #3]
 802096e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8020972:	bf00      	nop
 8020974:	3710      	adds	r7, #16
 8020976:	46bd      	mov	sp, r7
 8020978:	bd80      	pop	{r7, pc}

0802097a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 802097a:	b580      	push	{r7, lr}
 802097c:	b082      	sub	sp, #8
 802097e:	af00      	add	r7, sp, #0
 8020980:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	2b00      	cmp	r3, #0
 8020986:	d00e      	beq.n	80209a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	2200      	movs	r2, #0
 802098c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	2200      	movs	r2, #0
 8020992:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	2200      	movs	r2, #0
 8020998:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 802099a:	2300      	movs	r3, #0
 802099c:	2200      	movs	r2, #0
 802099e:	2100      	movs	r1, #0
 80209a0:	6878      	ldr	r0, [r7, #4]
 80209a2:	f000 f8a1 	bl	8020ae8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80209a6:	bf00      	nop
 80209a8:	3708      	adds	r7, #8
 80209aa:	46bd      	mov	sp, r7
 80209ac:	bd80      	pop	{r7, pc}

080209ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80209ae:	b580      	push	{r7, lr}
 80209b0:	b086      	sub	sp, #24
 80209b2:	af00      	add	r7, sp, #0
 80209b4:	4603      	mov	r3, r0
 80209b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80209b8:	2301      	movs	r3, #1
 80209ba:	617b      	str	r3, [r7, #20]
 80209bc:	2300      	movs	r3, #0
 80209be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80209c0:	79fb      	ldrb	r3, [r7, #7]
 80209c2:	461a      	mov	r2, r3
 80209c4:	6939      	ldr	r1, [r7, #16]
 80209c6:	6978      	ldr	r0, [r7, #20]
 80209c8:	f7ff ff7a 	bl	80208c0 <xQueueGenericCreate>
 80209cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80209ce:	68f8      	ldr	r0, [r7, #12]
 80209d0:	f7ff ffd3 	bl	802097a <prvInitialiseMutex>

		return xNewQueue;
 80209d4:	68fb      	ldr	r3, [r7, #12]
	}
 80209d6:	4618      	mov	r0, r3
 80209d8:	3718      	adds	r7, #24
 80209da:	46bd      	mov	sp, r7
 80209dc:	bd80      	pop	{r7, pc}

080209de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80209de:	b580      	push	{r7, lr}
 80209e0:	b088      	sub	sp, #32
 80209e2:	af02      	add	r7, sp, #8
 80209e4:	4603      	mov	r3, r0
 80209e6:	6039      	str	r1, [r7, #0]
 80209e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80209ea:	2301      	movs	r3, #1
 80209ec:	617b      	str	r3, [r7, #20]
 80209ee:	2300      	movs	r3, #0
 80209f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80209f2:	79fb      	ldrb	r3, [r7, #7]
 80209f4:	9300      	str	r3, [sp, #0]
 80209f6:	683b      	ldr	r3, [r7, #0]
 80209f8:	2200      	movs	r2, #0
 80209fa:	6939      	ldr	r1, [r7, #16]
 80209fc:	6978      	ldr	r0, [r7, #20]
 80209fe:	f7ff fee7 	bl	80207d0 <xQueueGenericCreateStatic>
 8020a02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020a04:	68f8      	ldr	r0, [r7, #12]
 8020a06:	f7ff ffb8 	bl	802097a <prvInitialiseMutex>

		return xNewQueue;
 8020a0a:	68fb      	ldr	r3, [r7, #12]
	}
 8020a0c:	4618      	mov	r0, r3
 8020a0e:	3718      	adds	r7, #24
 8020a10:	46bd      	mov	sp, r7
 8020a12:	bd80      	pop	{r7, pc}

08020a14 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8020a14:	b590      	push	{r4, r7, lr}
 8020a16:	b087      	sub	sp, #28
 8020a18:	af00      	add	r7, sp, #0
 8020a1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020a20:	693b      	ldr	r3, [r7, #16]
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d10a      	bne.n	8020a3c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8020a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a2a:	f383 8811 	msr	BASEPRI, r3
 8020a2e:	f3bf 8f6f 	isb	sy
 8020a32:	f3bf 8f4f 	dsb	sy
 8020a36:	60fb      	str	r3, [r7, #12]
}
 8020a38:	bf00      	nop
 8020a3a:	e7fe      	b.n	8020a3a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020a3c:	693b      	ldr	r3, [r7, #16]
 8020a3e:	689c      	ldr	r4, [r3, #8]
 8020a40:	f001 fd9e 	bl	8022580 <xTaskGetCurrentTaskHandle>
 8020a44:	4603      	mov	r3, r0
 8020a46:	429c      	cmp	r4, r3
 8020a48:	d111      	bne.n	8020a6e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8020a4a:	693b      	ldr	r3, [r7, #16]
 8020a4c:	68db      	ldr	r3, [r3, #12]
 8020a4e:	1e5a      	subs	r2, r3, #1
 8020a50:	693b      	ldr	r3, [r7, #16]
 8020a52:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8020a54:	693b      	ldr	r3, [r7, #16]
 8020a56:	68db      	ldr	r3, [r3, #12]
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d105      	bne.n	8020a68 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8020a5c:	2300      	movs	r3, #0
 8020a5e:	2200      	movs	r2, #0
 8020a60:	2100      	movs	r1, #0
 8020a62:	6938      	ldr	r0, [r7, #16]
 8020a64:	f000 f840 	bl	8020ae8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020a68:	2301      	movs	r3, #1
 8020a6a:	617b      	str	r3, [r7, #20]
 8020a6c:	e001      	b.n	8020a72 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8020a6e:	2300      	movs	r3, #0
 8020a70:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8020a72:	697b      	ldr	r3, [r7, #20]
	}
 8020a74:	4618      	mov	r0, r3
 8020a76:	371c      	adds	r7, #28
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	bd90      	pop	{r4, r7, pc}

08020a7c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8020a7c:	b590      	push	{r4, r7, lr}
 8020a7e:	b087      	sub	sp, #28
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
 8020a84:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020a8a:	693b      	ldr	r3, [r7, #16]
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d10a      	bne.n	8020aa6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8020a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a94:	f383 8811 	msr	BASEPRI, r3
 8020a98:	f3bf 8f6f 	isb	sy
 8020a9c:	f3bf 8f4f 	dsb	sy
 8020aa0:	60fb      	str	r3, [r7, #12]
}
 8020aa2:	bf00      	nop
 8020aa4:	e7fe      	b.n	8020aa4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020aa6:	693b      	ldr	r3, [r7, #16]
 8020aa8:	689c      	ldr	r4, [r3, #8]
 8020aaa:	f001 fd69 	bl	8022580 <xTaskGetCurrentTaskHandle>
 8020aae:	4603      	mov	r3, r0
 8020ab0:	429c      	cmp	r4, r3
 8020ab2:	d107      	bne.n	8020ac4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020ab4:	693b      	ldr	r3, [r7, #16]
 8020ab6:	68db      	ldr	r3, [r3, #12]
 8020ab8:	1c5a      	adds	r2, r3, #1
 8020aba:	693b      	ldr	r3, [r7, #16]
 8020abc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8020abe:	2301      	movs	r3, #1
 8020ac0:	617b      	str	r3, [r7, #20]
 8020ac2:	e00c      	b.n	8020ade <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020ac4:	6839      	ldr	r1, [r7, #0]
 8020ac6:	6938      	ldr	r0, [r7, #16]
 8020ac8:	f000 fa88 	bl	8020fdc <xQueueSemaphoreTake>
 8020acc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8020ace:	697b      	ldr	r3, [r7, #20]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d004      	beq.n	8020ade <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020ad4:	693b      	ldr	r3, [r7, #16]
 8020ad6:	68db      	ldr	r3, [r3, #12]
 8020ad8:	1c5a      	adds	r2, r3, #1
 8020ada:	693b      	ldr	r3, [r7, #16]
 8020adc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8020ade:	697b      	ldr	r3, [r7, #20]
	}
 8020ae0:	4618      	mov	r0, r3
 8020ae2:	371c      	adds	r7, #28
 8020ae4:	46bd      	mov	sp, r7
 8020ae6:	bd90      	pop	{r4, r7, pc}

08020ae8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b08e      	sub	sp, #56	; 0x38
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	60f8      	str	r0, [r7, #12]
 8020af0:	60b9      	str	r1, [r7, #8]
 8020af2:	607a      	str	r2, [r7, #4]
 8020af4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020af6:	2300      	movs	r3, #0
 8020af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020afa:	68fb      	ldr	r3, [r7, #12]
 8020afc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	d10a      	bne.n	8020b1a <xQueueGenericSend+0x32>
	__asm volatile
 8020b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b08:	f383 8811 	msr	BASEPRI, r3
 8020b0c:	f3bf 8f6f 	isb	sy
 8020b10:	f3bf 8f4f 	dsb	sy
 8020b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020b16:	bf00      	nop
 8020b18:	e7fe      	b.n	8020b18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020b1a:	68bb      	ldr	r3, [r7, #8]
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d103      	bne.n	8020b28 <xQueueGenericSend+0x40>
 8020b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d101      	bne.n	8020b2c <xQueueGenericSend+0x44>
 8020b28:	2301      	movs	r3, #1
 8020b2a:	e000      	b.n	8020b2e <xQueueGenericSend+0x46>
 8020b2c:	2300      	movs	r3, #0
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d10a      	bne.n	8020b48 <xQueueGenericSend+0x60>
	__asm volatile
 8020b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b36:	f383 8811 	msr	BASEPRI, r3
 8020b3a:	f3bf 8f6f 	isb	sy
 8020b3e:	f3bf 8f4f 	dsb	sy
 8020b42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020b44:	bf00      	nop
 8020b46:	e7fe      	b.n	8020b46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020b48:	683b      	ldr	r3, [r7, #0]
 8020b4a:	2b02      	cmp	r3, #2
 8020b4c:	d103      	bne.n	8020b56 <xQueueGenericSend+0x6e>
 8020b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020b52:	2b01      	cmp	r3, #1
 8020b54:	d101      	bne.n	8020b5a <xQueueGenericSend+0x72>
 8020b56:	2301      	movs	r3, #1
 8020b58:	e000      	b.n	8020b5c <xQueueGenericSend+0x74>
 8020b5a:	2300      	movs	r3, #0
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	d10a      	bne.n	8020b76 <xQueueGenericSend+0x8e>
	__asm volatile
 8020b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b64:	f383 8811 	msr	BASEPRI, r3
 8020b68:	f3bf 8f6f 	isb	sy
 8020b6c:	f3bf 8f4f 	dsb	sy
 8020b70:	623b      	str	r3, [r7, #32]
}
 8020b72:	bf00      	nop
 8020b74:	e7fe      	b.n	8020b74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020b76:	f001 fd13 	bl	80225a0 <xTaskGetSchedulerState>
 8020b7a:	4603      	mov	r3, r0
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d102      	bne.n	8020b86 <xQueueGenericSend+0x9e>
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d101      	bne.n	8020b8a <xQueueGenericSend+0xa2>
 8020b86:	2301      	movs	r3, #1
 8020b88:	e000      	b.n	8020b8c <xQueueGenericSend+0xa4>
 8020b8a:	2300      	movs	r3, #0
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	d10a      	bne.n	8020ba6 <xQueueGenericSend+0xbe>
	__asm volatile
 8020b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b94:	f383 8811 	msr	BASEPRI, r3
 8020b98:	f3bf 8f6f 	isb	sy
 8020b9c:	f3bf 8f4f 	dsb	sy
 8020ba0:	61fb      	str	r3, [r7, #28]
}
 8020ba2:	bf00      	nop
 8020ba4:	e7fe      	b.n	8020ba4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020ba6:	f002 fb55 	bl	8023254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020bb2:	429a      	cmp	r2, r3
 8020bb4:	d302      	bcc.n	8020bbc <xQueueGenericSend+0xd4>
 8020bb6:	683b      	ldr	r3, [r7, #0]
 8020bb8:	2b02      	cmp	r3, #2
 8020bba:	d129      	bne.n	8020c10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020bbc:	683a      	ldr	r2, [r7, #0]
 8020bbe:	68b9      	ldr	r1, [r7, #8]
 8020bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020bc2:	f000 fccd 	bl	8021560 <prvCopyDataToQueue>
 8020bc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d010      	beq.n	8020bf2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bd2:	3324      	adds	r3, #36	; 0x24
 8020bd4:	4618      	mov	r0, r3
 8020bd6:	f001 fad9 	bl	802218c <xTaskRemoveFromEventList>
 8020bda:	4603      	mov	r3, r0
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	d013      	beq.n	8020c08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020be0:	4b3f      	ldr	r3, [pc, #252]	; (8020ce0 <xQueueGenericSend+0x1f8>)
 8020be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020be6:	601a      	str	r2, [r3, #0]
 8020be8:	f3bf 8f4f 	dsb	sy
 8020bec:	f3bf 8f6f 	isb	sy
 8020bf0:	e00a      	b.n	8020c08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	d007      	beq.n	8020c08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020bf8:	4b39      	ldr	r3, [pc, #228]	; (8020ce0 <xQueueGenericSend+0x1f8>)
 8020bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020bfe:	601a      	str	r2, [r3, #0]
 8020c00:	f3bf 8f4f 	dsb	sy
 8020c04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020c08:	f002 fb54 	bl	80232b4 <vPortExitCritical>
				return pdPASS;
 8020c0c:	2301      	movs	r3, #1
 8020c0e:	e063      	b.n	8020cd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d103      	bne.n	8020c1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020c16:	f002 fb4d 	bl	80232b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020c1a:	2300      	movs	r3, #0
 8020c1c:	e05c      	b.n	8020cd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	d106      	bne.n	8020c32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020c24:	f107 0314 	add.w	r3, r7, #20
 8020c28:	4618      	mov	r0, r3
 8020c2a:	f001 fb13 	bl	8022254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020c2e:	2301      	movs	r3, #1
 8020c30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020c32:	f002 fb3f 	bl	80232b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020c36:	f001 f863 	bl	8021d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020c3a:	f002 fb0b 	bl	8023254 <vPortEnterCritical>
 8020c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020c44:	b25b      	sxtb	r3, r3
 8020c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c4a:	d103      	bne.n	8020c54 <xQueueGenericSend+0x16c>
 8020c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c4e:	2200      	movs	r2, #0
 8020c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020c5a:	b25b      	sxtb	r3, r3
 8020c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c60:	d103      	bne.n	8020c6a <xQueueGenericSend+0x182>
 8020c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c64:	2200      	movs	r2, #0
 8020c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020c6a:	f002 fb23 	bl	80232b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020c6e:	1d3a      	adds	r2, r7, #4
 8020c70:	f107 0314 	add.w	r3, r7, #20
 8020c74:	4611      	mov	r1, r2
 8020c76:	4618      	mov	r0, r3
 8020c78:	f001 fb02 	bl	8022280 <xTaskCheckForTimeOut>
 8020c7c:	4603      	mov	r3, r0
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d124      	bne.n	8020ccc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8020c82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020c84:	f000 fd64 	bl	8021750 <prvIsQueueFull>
 8020c88:	4603      	mov	r3, r0
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d018      	beq.n	8020cc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8020c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c90:	3310      	adds	r3, #16
 8020c92:	687a      	ldr	r2, [r7, #4]
 8020c94:	4611      	mov	r1, r2
 8020c96:	4618      	mov	r0, r3
 8020c98:	f001 fa28 	bl	80220ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8020c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020c9e:	f000 fcef 	bl	8021680 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020ca2:	f001 f83b 	bl	8021d1c <xTaskResumeAll>
 8020ca6:	4603      	mov	r3, r0
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	f47f af7c 	bne.w	8020ba6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8020cae:	4b0c      	ldr	r3, [pc, #48]	; (8020ce0 <xQueueGenericSend+0x1f8>)
 8020cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020cb4:	601a      	str	r2, [r3, #0]
 8020cb6:	f3bf 8f4f 	dsb	sy
 8020cba:	f3bf 8f6f 	isb	sy
 8020cbe:	e772      	b.n	8020ba6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8020cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020cc2:	f000 fcdd 	bl	8021680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020cc6:	f001 f829 	bl	8021d1c <xTaskResumeAll>
 8020cca:	e76c      	b.n	8020ba6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8020ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020cce:	f000 fcd7 	bl	8021680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020cd2:	f001 f823 	bl	8021d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8020cd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8020cd8:	4618      	mov	r0, r3
 8020cda:	3738      	adds	r7, #56	; 0x38
 8020cdc:	46bd      	mov	sp, r7
 8020cde:	bd80      	pop	{r7, pc}
 8020ce0:	e000ed04 	.word	0xe000ed04

08020ce4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8020ce4:	b580      	push	{r7, lr}
 8020ce6:	b090      	sub	sp, #64	; 0x40
 8020ce8:	af00      	add	r7, sp, #0
 8020cea:	60f8      	str	r0, [r7, #12]
 8020cec:	60b9      	str	r1, [r7, #8]
 8020cee:	607a      	str	r2, [r7, #4]
 8020cf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8020cf2:	68fb      	ldr	r3, [r7, #12]
 8020cf4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8020cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d10a      	bne.n	8020d12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8020cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d00:	f383 8811 	msr	BASEPRI, r3
 8020d04:	f3bf 8f6f 	isb	sy
 8020d08:	f3bf 8f4f 	dsb	sy
 8020d0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020d0e:	bf00      	nop
 8020d10:	e7fe      	b.n	8020d10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020d12:	68bb      	ldr	r3, [r7, #8]
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d103      	bne.n	8020d20 <xQueueGenericSendFromISR+0x3c>
 8020d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d101      	bne.n	8020d24 <xQueueGenericSendFromISR+0x40>
 8020d20:	2301      	movs	r3, #1
 8020d22:	e000      	b.n	8020d26 <xQueueGenericSendFromISR+0x42>
 8020d24:	2300      	movs	r3, #0
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d10a      	bne.n	8020d40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8020d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d2e:	f383 8811 	msr	BASEPRI, r3
 8020d32:	f3bf 8f6f 	isb	sy
 8020d36:	f3bf 8f4f 	dsb	sy
 8020d3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020d3c:	bf00      	nop
 8020d3e:	e7fe      	b.n	8020d3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	2b02      	cmp	r3, #2
 8020d44:	d103      	bne.n	8020d4e <xQueueGenericSendFromISR+0x6a>
 8020d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020d4a:	2b01      	cmp	r3, #1
 8020d4c:	d101      	bne.n	8020d52 <xQueueGenericSendFromISR+0x6e>
 8020d4e:	2301      	movs	r3, #1
 8020d50:	e000      	b.n	8020d54 <xQueueGenericSendFromISR+0x70>
 8020d52:	2300      	movs	r3, #0
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	d10a      	bne.n	8020d6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8020d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d5c:	f383 8811 	msr	BASEPRI, r3
 8020d60:	f3bf 8f6f 	isb	sy
 8020d64:	f3bf 8f4f 	dsb	sy
 8020d68:	623b      	str	r3, [r7, #32]
}
 8020d6a:	bf00      	nop
 8020d6c:	e7fe      	b.n	8020d6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020d6e:	f002 fb53 	bl	8023418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8020d72:	f3ef 8211 	mrs	r2, BASEPRI
 8020d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d7a:	f383 8811 	msr	BASEPRI, r3
 8020d7e:	f3bf 8f6f 	isb	sy
 8020d82:	f3bf 8f4f 	dsb	sy
 8020d86:	61fa      	str	r2, [r7, #28]
 8020d88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8020d8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8020d8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020d96:	429a      	cmp	r2, r3
 8020d98:	d302      	bcc.n	8020da0 <xQueueGenericSendFromISR+0xbc>
 8020d9a:	683b      	ldr	r3, [r7, #0]
 8020d9c:	2b02      	cmp	r3, #2
 8020d9e:	d12f      	bne.n	8020e00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8020da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020dae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020db0:	683a      	ldr	r2, [r7, #0]
 8020db2:	68b9      	ldr	r1, [r7, #8]
 8020db4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020db6:	f000 fbd3 	bl	8021560 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8020dba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8020dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020dc2:	d112      	bne.n	8020dea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d016      	beq.n	8020dfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020dce:	3324      	adds	r3, #36	; 0x24
 8020dd0:	4618      	mov	r0, r3
 8020dd2:	f001 f9db 	bl	802218c <xTaskRemoveFromEventList>
 8020dd6:	4603      	mov	r3, r0
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d00e      	beq.n	8020dfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	d00b      	beq.n	8020dfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	2201      	movs	r2, #1
 8020de6:	601a      	str	r2, [r3, #0]
 8020de8:	e007      	b.n	8020dfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020dea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020dee:	3301      	adds	r3, #1
 8020df0:	b2db      	uxtb	r3, r3
 8020df2:	b25a      	sxtb	r2, r3
 8020df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020dfa:	2301      	movs	r3, #1
 8020dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8020dfe:	e001      	b.n	8020e04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8020e00:	2300      	movs	r3, #0
 8020e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020e06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8020e08:	697b      	ldr	r3, [r7, #20]
 8020e0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8020e0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8020e12:	4618      	mov	r0, r3
 8020e14:	3740      	adds	r7, #64	; 0x40
 8020e16:	46bd      	mov	sp, r7
 8020e18:	bd80      	pop	{r7, pc}
	...

08020e1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020e1c:	b580      	push	{r7, lr}
 8020e1e:	b08c      	sub	sp, #48	; 0x30
 8020e20:	af00      	add	r7, sp, #0
 8020e22:	60f8      	str	r0, [r7, #12]
 8020e24:	60b9      	str	r1, [r7, #8]
 8020e26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020e28:	2300      	movs	r3, #0
 8020e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020e2c:	68fb      	ldr	r3, [r7, #12]
 8020e2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	d10a      	bne.n	8020e4c <xQueueReceive+0x30>
	__asm volatile
 8020e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e3a:	f383 8811 	msr	BASEPRI, r3
 8020e3e:	f3bf 8f6f 	isb	sy
 8020e42:	f3bf 8f4f 	dsb	sy
 8020e46:	623b      	str	r3, [r7, #32]
}
 8020e48:	bf00      	nop
 8020e4a:	e7fe      	b.n	8020e4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020e4c:	68bb      	ldr	r3, [r7, #8]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d103      	bne.n	8020e5a <xQueueReceive+0x3e>
 8020e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d101      	bne.n	8020e5e <xQueueReceive+0x42>
 8020e5a:	2301      	movs	r3, #1
 8020e5c:	e000      	b.n	8020e60 <xQueueReceive+0x44>
 8020e5e:	2300      	movs	r3, #0
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d10a      	bne.n	8020e7a <xQueueReceive+0x5e>
	__asm volatile
 8020e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e68:	f383 8811 	msr	BASEPRI, r3
 8020e6c:	f3bf 8f6f 	isb	sy
 8020e70:	f3bf 8f4f 	dsb	sy
 8020e74:	61fb      	str	r3, [r7, #28]
}
 8020e76:	bf00      	nop
 8020e78:	e7fe      	b.n	8020e78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020e7a:	f001 fb91 	bl	80225a0 <xTaskGetSchedulerState>
 8020e7e:	4603      	mov	r3, r0
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d102      	bne.n	8020e8a <xQueueReceive+0x6e>
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d101      	bne.n	8020e8e <xQueueReceive+0x72>
 8020e8a:	2301      	movs	r3, #1
 8020e8c:	e000      	b.n	8020e90 <xQueueReceive+0x74>
 8020e8e:	2300      	movs	r3, #0
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d10a      	bne.n	8020eaa <xQueueReceive+0x8e>
	__asm volatile
 8020e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e98:	f383 8811 	msr	BASEPRI, r3
 8020e9c:	f3bf 8f6f 	isb	sy
 8020ea0:	f3bf 8f4f 	dsb	sy
 8020ea4:	61bb      	str	r3, [r7, #24]
}
 8020ea6:	bf00      	nop
 8020ea8:	e7fe      	b.n	8020ea8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020eaa:	f002 f9d3 	bl	8023254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020eb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	d01f      	beq.n	8020efa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8020eba:	68b9      	ldr	r1, [r7, #8]
 8020ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020ebe:	f000 fbb9 	bl	8021634 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8020ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ec4:	1e5a      	subs	r2, r3, #1
 8020ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ec8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ecc:	691b      	ldr	r3, [r3, #16]
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d00f      	beq.n	8020ef2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ed4:	3310      	adds	r3, #16
 8020ed6:	4618      	mov	r0, r3
 8020ed8:	f001 f958 	bl	802218c <xTaskRemoveFromEventList>
 8020edc:	4603      	mov	r3, r0
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	d007      	beq.n	8020ef2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020ee2:	4b3d      	ldr	r3, [pc, #244]	; (8020fd8 <xQueueReceive+0x1bc>)
 8020ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ee8:	601a      	str	r2, [r3, #0]
 8020eea:	f3bf 8f4f 	dsb	sy
 8020eee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020ef2:	f002 f9df 	bl	80232b4 <vPortExitCritical>
				return pdPASS;
 8020ef6:	2301      	movs	r3, #1
 8020ef8:	e069      	b.n	8020fce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d103      	bne.n	8020f08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020f00:	f002 f9d8 	bl	80232b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020f04:	2300      	movs	r3, #0
 8020f06:	e062      	b.n	8020fce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	d106      	bne.n	8020f1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020f0e:	f107 0310 	add.w	r3, r7, #16
 8020f12:	4618      	mov	r0, r3
 8020f14:	f001 f99e 	bl	8022254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020f18:	2301      	movs	r3, #1
 8020f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020f1c:	f002 f9ca 	bl	80232b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020f20:	f000 feee 	bl	8021d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020f24:	f002 f996 	bl	8023254 <vPortEnterCritical>
 8020f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020f2e:	b25b      	sxtb	r3, r3
 8020f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f34:	d103      	bne.n	8020f3e <xQueueReceive+0x122>
 8020f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f38:	2200      	movs	r2, #0
 8020f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020f44:	b25b      	sxtb	r3, r3
 8020f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f4a:	d103      	bne.n	8020f54 <xQueueReceive+0x138>
 8020f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f4e:	2200      	movs	r2, #0
 8020f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020f54:	f002 f9ae 	bl	80232b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020f58:	1d3a      	adds	r2, r7, #4
 8020f5a:	f107 0310 	add.w	r3, r7, #16
 8020f5e:	4611      	mov	r1, r2
 8020f60:	4618      	mov	r0, r3
 8020f62:	f001 f98d 	bl	8022280 <xTaskCheckForTimeOut>
 8020f66:	4603      	mov	r3, r0
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d123      	bne.n	8020fb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020f6e:	f000 fbd9 	bl	8021724 <prvIsQueueEmpty>
 8020f72:	4603      	mov	r3, r0
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d017      	beq.n	8020fa8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f7a:	3324      	adds	r3, #36	; 0x24
 8020f7c:	687a      	ldr	r2, [r7, #4]
 8020f7e:	4611      	mov	r1, r2
 8020f80:	4618      	mov	r0, r3
 8020f82:	f001 f8b3 	bl	80220ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020f88:	f000 fb7a 	bl	8021680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020f8c:	f000 fec6 	bl	8021d1c <xTaskResumeAll>
 8020f90:	4603      	mov	r3, r0
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d189      	bne.n	8020eaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8020f96:	4b10      	ldr	r3, [pc, #64]	; (8020fd8 <xQueueReceive+0x1bc>)
 8020f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020f9c:	601a      	str	r2, [r3, #0]
 8020f9e:	f3bf 8f4f 	dsb	sy
 8020fa2:	f3bf 8f6f 	isb	sy
 8020fa6:	e780      	b.n	8020eaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8020fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020faa:	f000 fb69 	bl	8021680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020fae:	f000 feb5 	bl	8021d1c <xTaskResumeAll>
 8020fb2:	e77a      	b.n	8020eaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8020fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020fb6:	f000 fb63 	bl	8021680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020fba:	f000 feaf 	bl	8021d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020fc0:	f000 fbb0 	bl	8021724 <prvIsQueueEmpty>
 8020fc4:	4603      	mov	r3, r0
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	f43f af6f 	beq.w	8020eaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8020fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8020fce:	4618      	mov	r0, r3
 8020fd0:	3730      	adds	r7, #48	; 0x30
 8020fd2:	46bd      	mov	sp, r7
 8020fd4:	bd80      	pop	{r7, pc}
 8020fd6:	bf00      	nop
 8020fd8:	e000ed04 	.word	0xe000ed04

08020fdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8020fdc:	b580      	push	{r7, lr}
 8020fde:	b08e      	sub	sp, #56	; 0x38
 8020fe0:	af00      	add	r7, sp, #0
 8020fe2:	6078      	str	r0, [r7, #4]
 8020fe4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8020fe6:	2300      	movs	r3, #0
 8020fe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8020fee:	2300      	movs	r3, #0
 8020ff0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d10a      	bne.n	802100e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8020ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ffc:	f383 8811 	msr	BASEPRI, r3
 8021000:	f3bf 8f6f 	isb	sy
 8021004:	f3bf 8f4f 	dsb	sy
 8021008:	623b      	str	r3, [r7, #32]
}
 802100a:	bf00      	nop
 802100c:	e7fe      	b.n	802100c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021012:	2b00      	cmp	r3, #0
 8021014:	d00a      	beq.n	802102c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8021016:	f04f 0350 	mov.w	r3, #80	; 0x50
 802101a:	f383 8811 	msr	BASEPRI, r3
 802101e:	f3bf 8f6f 	isb	sy
 8021022:	f3bf 8f4f 	dsb	sy
 8021026:	61fb      	str	r3, [r7, #28]
}
 8021028:	bf00      	nop
 802102a:	e7fe      	b.n	802102a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802102c:	f001 fab8 	bl	80225a0 <xTaskGetSchedulerState>
 8021030:	4603      	mov	r3, r0
 8021032:	2b00      	cmp	r3, #0
 8021034:	d102      	bne.n	802103c <xQueueSemaphoreTake+0x60>
 8021036:	683b      	ldr	r3, [r7, #0]
 8021038:	2b00      	cmp	r3, #0
 802103a:	d101      	bne.n	8021040 <xQueueSemaphoreTake+0x64>
 802103c:	2301      	movs	r3, #1
 802103e:	e000      	b.n	8021042 <xQueueSemaphoreTake+0x66>
 8021040:	2300      	movs	r3, #0
 8021042:	2b00      	cmp	r3, #0
 8021044:	d10a      	bne.n	802105c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8021046:	f04f 0350 	mov.w	r3, #80	; 0x50
 802104a:	f383 8811 	msr	BASEPRI, r3
 802104e:	f3bf 8f6f 	isb	sy
 8021052:	f3bf 8f4f 	dsb	sy
 8021056:	61bb      	str	r3, [r7, #24]
}
 8021058:	bf00      	nop
 802105a:	e7fe      	b.n	802105a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802105c:	f002 f8fa 	bl	8023254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8021060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021064:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8021066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021068:	2b00      	cmp	r3, #0
 802106a:	d024      	beq.n	80210b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 802106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802106e:	1e5a      	subs	r2, r3, #1
 8021070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021072:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	2b00      	cmp	r3, #0
 802107a:	d104      	bne.n	8021086 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 802107c:	f001 fc06 	bl	802288c <pvTaskIncrementMutexHeldCount>
 8021080:	4602      	mov	r2, r0
 8021082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021084:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021088:	691b      	ldr	r3, [r3, #16]
 802108a:	2b00      	cmp	r3, #0
 802108c:	d00f      	beq.n	80210ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021090:	3310      	adds	r3, #16
 8021092:	4618      	mov	r0, r3
 8021094:	f001 f87a 	bl	802218c <xTaskRemoveFromEventList>
 8021098:	4603      	mov	r3, r0
 802109a:	2b00      	cmp	r3, #0
 802109c:	d007      	beq.n	80210ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802109e:	4b54      	ldr	r3, [pc, #336]	; (80211f0 <xQueueSemaphoreTake+0x214>)
 80210a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80210a4:	601a      	str	r2, [r3, #0]
 80210a6:	f3bf 8f4f 	dsb	sy
 80210aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80210ae:	f002 f901 	bl	80232b4 <vPortExitCritical>
				return pdPASS;
 80210b2:	2301      	movs	r3, #1
 80210b4:	e097      	b.n	80211e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80210b6:	683b      	ldr	r3, [r7, #0]
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d111      	bne.n	80210e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80210bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d00a      	beq.n	80210d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80210c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80210c6:	f383 8811 	msr	BASEPRI, r3
 80210ca:	f3bf 8f6f 	isb	sy
 80210ce:	f3bf 8f4f 	dsb	sy
 80210d2:	617b      	str	r3, [r7, #20]
}
 80210d4:	bf00      	nop
 80210d6:	e7fe      	b.n	80210d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80210d8:	f002 f8ec 	bl	80232b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80210dc:	2300      	movs	r3, #0
 80210de:	e082      	b.n	80211e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80210e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d106      	bne.n	80210f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80210e6:	f107 030c 	add.w	r3, r7, #12
 80210ea:	4618      	mov	r0, r3
 80210ec:	f001 f8b2 	bl	8022254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80210f0:	2301      	movs	r3, #1
 80210f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80210f4:	f002 f8de 	bl	80232b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80210f8:	f000 fe02 	bl	8021d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80210fc:	f002 f8aa 	bl	8023254 <vPortEnterCritical>
 8021100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021106:	b25b      	sxtb	r3, r3
 8021108:	f1b3 3fff 	cmp.w	r3, #4294967295
 802110c:	d103      	bne.n	8021116 <xQueueSemaphoreTake+0x13a>
 802110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021110:	2200      	movs	r2, #0
 8021112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802111c:	b25b      	sxtb	r3, r3
 802111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021122:	d103      	bne.n	802112c <xQueueSemaphoreTake+0x150>
 8021124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021126:	2200      	movs	r2, #0
 8021128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802112c:	f002 f8c2 	bl	80232b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021130:	463a      	mov	r2, r7
 8021132:	f107 030c 	add.w	r3, r7, #12
 8021136:	4611      	mov	r1, r2
 8021138:	4618      	mov	r0, r3
 802113a:	f001 f8a1 	bl	8022280 <xTaskCheckForTimeOut>
 802113e:	4603      	mov	r3, r0
 8021140:	2b00      	cmp	r3, #0
 8021142:	d132      	bne.n	80211aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021146:	f000 faed 	bl	8021724 <prvIsQueueEmpty>
 802114a:	4603      	mov	r3, r0
 802114c:	2b00      	cmp	r3, #0
 802114e:	d026      	beq.n	802119e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021152:	681b      	ldr	r3, [r3, #0]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d109      	bne.n	802116c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8021158:	f002 f87c 	bl	8023254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 802115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802115e:	689b      	ldr	r3, [r3, #8]
 8021160:	4618      	mov	r0, r3
 8021162:	f001 fa3b 	bl	80225dc <xTaskPriorityInherit>
 8021166:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8021168:	f002 f8a4 	bl	80232b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802116e:	3324      	adds	r3, #36	; 0x24
 8021170:	683a      	ldr	r2, [r7, #0]
 8021172:	4611      	mov	r1, r2
 8021174:	4618      	mov	r0, r3
 8021176:	f000 ffb9 	bl	80220ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802117a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802117c:	f000 fa80 	bl	8021680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021180:	f000 fdcc 	bl	8021d1c <xTaskResumeAll>
 8021184:	4603      	mov	r3, r0
 8021186:	2b00      	cmp	r3, #0
 8021188:	f47f af68 	bne.w	802105c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 802118c:	4b18      	ldr	r3, [pc, #96]	; (80211f0 <xQueueSemaphoreTake+0x214>)
 802118e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021192:	601a      	str	r2, [r3, #0]
 8021194:	f3bf 8f4f 	dsb	sy
 8021198:	f3bf 8f6f 	isb	sy
 802119c:	e75e      	b.n	802105c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 802119e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80211a0:	f000 fa6e 	bl	8021680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80211a4:	f000 fdba 	bl	8021d1c <xTaskResumeAll>
 80211a8:	e758      	b.n	802105c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80211aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80211ac:	f000 fa68 	bl	8021680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80211b0:	f000 fdb4 	bl	8021d1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80211b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80211b6:	f000 fab5 	bl	8021724 <prvIsQueueEmpty>
 80211ba:	4603      	mov	r3, r0
 80211bc:	2b00      	cmp	r3, #0
 80211be:	f43f af4d 	beq.w	802105c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80211c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	d00d      	beq.n	80211e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80211c8:	f002 f844 	bl	8023254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80211cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80211ce:	f000 f9af 	bl	8021530 <prvGetDisinheritPriorityAfterTimeout>
 80211d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80211d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211d6:	689b      	ldr	r3, [r3, #8]
 80211d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80211da:	4618      	mov	r0, r3
 80211dc:	f001 fad4 	bl	8022788 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80211e0:	f002 f868 	bl	80232b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80211e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80211e6:	4618      	mov	r0, r3
 80211e8:	3738      	adds	r7, #56	; 0x38
 80211ea:	46bd      	mov	sp, r7
 80211ec:	bd80      	pop	{r7, pc}
 80211ee:	bf00      	nop
 80211f0:	e000ed04 	.word	0xe000ed04

080211f4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80211f4:	b580      	push	{r7, lr}
 80211f6:	b08e      	sub	sp, #56	; 0x38
 80211f8:	af00      	add	r7, sp, #0
 80211fa:	60f8      	str	r0, [r7, #12]
 80211fc:	60b9      	str	r1, [r7, #8]
 80211fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021200:	2300      	movs	r3, #0
 8021202:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8021204:	68fb      	ldr	r3, [r7, #12]
 8021206:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802120a:	2b00      	cmp	r3, #0
 802120c:	d10a      	bne.n	8021224 <xQueuePeek+0x30>
	__asm volatile
 802120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021212:	f383 8811 	msr	BASEPRI, r3
 8021216:	f3bf 8f6f 	isb	sy
 802121a:	f3bf 8f4f 	dsb	sy
 802121e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8021220:	bf00      	nop
 8021222:	e7fe      	b.n	8021222 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021224:	68bb      	ldr	r3, [r7, #8]
 8021226:	2b00      	cmp	r3, #0
 8021228:	d103      	bne.n	8021232 <xQueuePeek+0x3e>
 802122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802122e:	2b00      	cmp	r3, #0
 8021230:	d101      	bne.n	8021236 <xQueuePeek+0x42>
 8021232:	2301      	movs	r3, #1
 8021234:	e000      	b.n	8021238 <xQueuePeek+0x44>
 8021236:	2300      	movs	r3, #0
 8021238:	2b00      	cmp	r3, #0
 802123a:	d10a      	bne.n	8021252 <xQueuePeek+0x5e>
	__asm volatile
 802123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021240:	f383 8811 	msr	BASEPRI, r3
 8021244:	f3bf 8f6f 	isb	sy
 8021248:	f3bf 8f4f 	dsb	sy
 802124c:	623b      	str	r3, [r7, #32]
}
 802124e:	bf00      	nop
 8021250:	e7fe      	b.n	8021250 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021252:	f001 f9a5 	bl	80225a0 <xTaskGetSchedulerState>
 8021256:	4603      	mov	r3, r0
 8021258:	2b00      	cmp	r3, #0
 802125a:	d102      	bne.n	8021262 <xQueuePeek+0x6e>
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	2b00      	cmp	r3, #0
 8021260:	d101      	bne.n	8021266 <xQueuePeek+0x72>
 8021262:	2301      	movs	r3, #1
 8021264:	e000      	b.n	8021268 <xQueuePeek+0x74>
 8021266:	2300      	movs	r3, #0
 8021268:	2b00      	cmp	r3, #0
 802126a:	d10a      	bne.n	8021282 <xQueuePeek+0x8e>
	__asm volatile
 802126c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021270:	f383 8811 	msr	BASEPRI, r3
 8021274:	f3bf 8f6f 	isb	sy
 8021278:	f3bf 8f4f 	dsb	sy
 802127c:	61fb      	str	r3, [r7, #28]
}
 802127e:	bf00      	nop
 8021280:	e7fe      	b.n	8021280 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021282:	f001 ffe7 	bl	8023254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802128a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802128e:	2b00      	cmp	r3, #0
 8021290:	d021      	beq.n	80212d6 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8021292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021294:	68db      	ldr	r3, [r3, #12]
 8021296:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021298:	68b9      	ldr	r1, [r7, #8]
 802129a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802129c:	f000 f9ca 	bl	8021634 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80212a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80212a4:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80212a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d00f      	beq.n	80212ce <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80212ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212b0:	3324      	adds	r3, #36	; 0x24
 80212b2:	4618      	mov	r0, r3
 80212b4:	f000 ff6a 	bl	802218c <xTaskRemoveFromEventList>
 80212b8:	4603      	mov	r3, r0
 80212ba:	2b00      	cmp	r3, #0
 80212bc:	d007      	beq.n	80212ce <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80212be:	4b3d      	ldr	r3, [pc, #244]	; (80213b4 <xQueuePeek+0x1c0>)
 80212c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80212c4:	601a      	str	r2, [r3, #0]
 80212c6:	f3bf 8f4f 	dsb	sy
 80212ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80212ce:	f001 fff1 	bl	80232b4 <vPortExitCritical>
				return pdPASS;
 80212d2:	2301      	movs	r3, #1
 80212d4:	e069      	b.n	80213aa <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d103      	bne.n	80212e4 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80212dc:	f001 ffea 	bl	80232b4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80212e0:	2300      	movs	r3, #0
 80212e2:	e062      	b.n	80213aa <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 80212e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d106      	bne.n	80212f8 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80212ea:	f107 0314 	add.w	r3, r7, #20
 80212ee:	4618      	mov	r0, r3
 80212f0:	f000 ffb0 	bl	8022254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80212f4:	2301      	movs	r3, #1
 80212f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80212f8:	f001 ffdc 	bl	80232b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80212fc:	f000 fd00 	bl	8021d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021300:	f001 ffa8 	bl	8023254 <vPortEnterCritical>
 8021304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802130a:	b25b      	sxtb	r3, r3
 802130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021310:	d103      	bne.n	802131a <xQueuePeek+0x126>
 8021312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021314:	2200      	movs	r2, #0
 8021316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802131c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021320:	b25b      	sxtb	r3, r3
 8021322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021326:	d103      	bne.n	8021330 <xQueuePeek+0x13c>
 8021328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802132a:	2200      	movs	r2, #0
 802132c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021330:	f001 ffc0 	bl	80232b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021334:	1d3a      	adds	r2, r7, #4
 8021336:	f107 0314 	add.w	r3, r7, #20
 802133a:	4611      	mov	r1, r2
 802133c:	4618      	mov	r0, r3
 802133e:	f000 ff9f 	bl	8022280 <xTaskCheckForTimeOut>
 8021342:	4603      	mov	r3, r0
 8021344:	2b00      	cmp	r3, #0
 8021346:	d123      	bne.n	8021390 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802134a:	f000 f9eb 	bl	8021724 <prvIsQueueEmpty>
 802134e:	4603      	mov	r3, r0
 8021350:	2b00      	cmp	r3, #0
 8021352:	d017      	beq.n	8021384 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021356:	3324      	adds	r3, #36	; 0x24
 8021358:	687a      	ldr	r2, [r7, #4]
 802135a:	4611      	mov	r1, r2
 802135c:	4618      	mov	r0, r3
 802135e:	f000 fec5 	bl	80220ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021364:	f000 f98c 	bl	8021680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021368:	f000 fcd8 	bl	8021d1c <xTaskResumeAll>
 802136c:	4603      	mov	r3, r0
 802136e:	2b00      	cmp	r3, #0
 8021370:	d187      	bne.n	8021282 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8021372:	4b10      	ldr	r3, [pc, #64]	; (80213b4 <xQueuePeek+0x1c0>)
 8021374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021378:	601a      	str	r2, [r3, #0]
 802137a:	f3bf 8f4f 	dsb	sy
 802137e:	f3bf 8f6f 	isb	sy
 8021382:	e77e      	b.n	8021282 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8021384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021386:	f000 f97b 	bl	8021680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802138a:	f000 fcc7 	bl	8021d1c <xTaskResumeAll>
 802138e:	e778      	b.n	8021282 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8021390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021392:	f000 f975 	bl	8021680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021396:	f000 fcc1 	bl	8021d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802139a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802139c:	f000 f9c2 	bl	8021724 <prvIsQueueEmpty>
 80213a0:	4603      	mov	r3, r0
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	f43f af6d 	beq.w	8021282 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80213a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80213aa:	4618      	mov	r0, r3
 80213ac:	3738      	adds	r7, #56	; 0x38
 80213ae:	46bd      	mov	sp, r7
 80213b0:	bd80      	pop	{r7, pc}
 80213b2:	bf00      	nop
 80213b4:	e000ed04 	.word	0xe000ed04

080213b8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80213b8:	b580      	push	{r7, lr}
 80213ba:	b08e      	sub	sp, #56	; 0x38
 80213bc:	af00      	add	r7, sp, #0
 80213be:	60f8      	str	r0, [r7, #12]
 80213c0:	60b9      	str	r1, [r7, #8]
 80213c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80213c4:	68fb      	ldr	r3, [r7, #12]
 80213c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80213c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	d10a      	bne.n	80213e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80213ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80213d2:	f383 8811 	msr	BASEPRI, r3
 80213d6:	f3bf 8f6f 	isb	sy
 80213da:	f3bf 8f4f 	dsb	sy
 80213de:	623b      	str	r3, [r7, #32]
}
 80213e0:	bf00      	nop
 80213e2:	e7fe      	b.n	80213e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80213e4:	68bb      	ldr	r3, [r7, #8]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d103      	bne.n	80213f2 <xQueueReceiveFromISR+0x3a>
 80213ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d101      	bne.n	80213f6 <xQueueReceiveFromISR+0x3e>
 80213f2:	2301      	movs	r3, #1
 80213f4:	e000      	b.n	80213f8 <xQueueReceiveFromISR+0x40>
 80213f6:	2300      	movs	r3, #0
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d10a      	bne.n	8021412 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80213fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021400:	f383 8811 	msr	BASEPRI, r3
 8021404:	f3bf 8f6f 	isb	sy
 8021408:	f3bf 8f4f 	dsb	sy
 802140c:	61fb      	str	r3, [r7, #28]
}
 802140e:	bf00      	nop
 8021410:	e7fe      	b.n	8021410 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8021412:	f002 f801 	bl	8023418 <vPortValidateInterruptPriority>
	__asm volatile
 8021416:	f3ef 8211 	mrs	r2, BASEPRI
 802141a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802141e:	f383 8811 	msr	BASEPRI, r3
 8021422:	f3bf 8f6f 	isb	sy
 8021426:	f3bf 8f4f 	dsb	sy
 802142a:	61ba      	str	r2, [r7, #24]
 802142c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 802142e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802143a:	2b00      	cmp	r3, #0
 802143c:	d02f      	beq.n	802149e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 802143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021448:	68b9      	ldr	r1, [r7, #8]
 802144a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802144c:	f000 f8f2 	bl	8021634 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021452:	1e5a      	subs	r2, r3, #1
 8021454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8021458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021460:	d112      	bne.n	8021488 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021464:	691b      	ldr	r3, [r3, #16]
 8021466:	2b00      	cmp	r3, #0
 8021468:	d016      	beq.n	8021498 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802146c:	3310      	adds	r3, #16
 802146e:	4618      	mov	r0, r3
 8021470:	f000 fe8c 	bl	802218c <xTaskRemoveFromEventList>
 8021474:	4603      	mov	r3, r0
 8021476:	2b00      	cmp	r3, #0
 8021478:	d00e      	beq.n	8021498 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 802147a:	687b      	ldr	r3, [r7, #4]
 802147c:	2b00      	cmp	r3, #0
 802147e:	d00b      	beq.n	8021498 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	2201      	movs	r2, #1
 8021484:	601a      	str	r2, [r3, #0]
 8021486:	e007      	b.n	8021498 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8021488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802148c:	3301      	adds	r3, #1
 802148e:	b2db      	uxtb	r3, r3
 8021490:	b25a      	sxtb	r2, r3
 8021492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8021498:	2301      	movs	r3, #1
 802149a:	637b      	str	r3, [r7, #52]	; 0x34
 802149c:	e001      	b.n	80214a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 802149e:	2300      	movs	r3, #0
 80214a0:	637b      	str	r3, [r7, #52]	; 0x34
 80214a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80214a6:	693b      	ldr	r3, [r7, #16]
 80214a8:	f383 8811 	msr	BASEPRI, r3
}
 80214ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80214ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80214b0:	4618      	mov	r0, r3
 80214b2:	3738      	adds	r7, #56	; 0x38
 80214b4:	46bd      	mov	sp, r7
 80214b6:	bd80      	pop	{r7, pc}

080214b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80214b8:	b580      	push	{r7, lr}
 80214ba:	b084      	sub	sp, #16
 80214bc:	af00      	add	r7, sp, #0
 80214be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d10a      	bne.n	80214dc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80214c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80214ca:	f383 8811 	msr	BASEPRI, r3
 80214ce:	f3bf 8f6f 	isb	sy
 80214d2:	f3bf 8f4f 	dsb	sy
 80214d6:	60bb      	str	r3, [r7, #8]
}
 80214d8:	bf00      	nop
 80214da:	e7fe      	b.n	80214da <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80214dc:	f001 feba 	bl	8023254 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80214e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80214e6:	f001 fee5 	bl	80232b4 <vPortExitCritical>

	return uxReturn;
 80214ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80214ec:	4618      	mov	r0, r3
 80214ee:	3710      	adds	r7, #16
 80214f0:	46bd      	mov	sp, r7
 80214f2:	bd80      	pop	{r7, pc}

080214f4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80214f4:	b480      	push	{r7}
 80214f6:	b087      	sub	sp, #28
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8021500:	697b      	ldr	r3, [r7, #20]
 8021502:	2b00      	cmp	r3, #0
 8021504:	d10a      	bne.n	802151c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8021506:	f04f 0350 	mov.w	r3, #80	; 0x50
 802150a:	f383 8811 	msr	BASEPRI, r3
 802150e:	f3bf 8f6f 	isb	sy
 8021512:	f3bf 8f4f 	dsb	sy
 8021516:	60fb      	str	r3, [r7, #12]
}
 8021518:	bf00      	nop
 802151a:	e7fe      	b.n	802151a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 802151c:	697b      	ldr	r3, [r7, #20]
 802151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021520:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8021522:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8021524:	4618      	mov	r0, r3
 8021526:	371c      	adds	r7, #28
 8021528:	46bd      	mov	sp, r7
 802152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802152e:	4770      	bx	lr

08021530 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8021530:	b480      	push	{r7}
 8021532:	b085      	sub	sp, #20
 8021534:	af00      	add	r7, sp, #0
 8021536:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802153c:	2b00      	cmp	r3, #0
 802153e:	d006      	beq.n	802154e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8021540:	687b      	ldr	r3, [r7, #4]
 8021542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021544:	681b      	ldr	r3, [r3, #0]
 8021546:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802154a:	60fb      	str	r3, [r7, #12]
 802154c:	e001      	b.n	8021552 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 802154e:	2300      	movs	r3, #0
 8021550:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8021552:	68fb      	ldr	r3, [r7, #12]
	}
 8021554:	4618      	mov	r0, r3
 8021556:	3714      	adds	r7, #20
 8021558:	46bd      	mov	sp, r7
 802155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802155e:	4770      	bx	lr

08021560 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8021560:	b580      	push	{r7, lr}
 8021562:	b086      	sub	sp, #24
 8021564:	af00      	add	r7, sp, #0
 8021566:	60f8      	str	r0, [r7, #12]
 8021568:	60b9      	str	r1, [r7, #8]
 802156a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802156c:	2300      	movs	r3, #0
 802156e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021570:	68fb      	ldr	r3, [r7, #12]
 8021572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021574:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8021576:	68fb      	ldr	r3, [r7, #12]
 8021578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802157a:	2b00      	cmp	r3, #0
 802157c:	d10d      	bne.n	802159a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802157e:	68fb      	ldr	r3, [r7, #12]
 8021580:	681b      	ldr	r3, [r3, #0]
 8021582:	2b00      	cmp	r3, #0
 8021584:	d14d      	bne.n	8021622 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8021586:	68fb      	ldr	r3, [r7, #12]
 8021588:	689b      	ldr	r3, [r3, #8]
 802158a:	4618      	mov	r0, r3
 802158c:	f001 f88e 	bl	80226ac <xTaskPriorityDisinherit>
 8021590:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8021592:	68fb      	ldr	r3, [r7, #12]
 8021594:	2200      	movs	r2, #0
 8021596:	609a      	str	r2, [r3, #8]
 8021598:	e043      	b.n	8021622 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	2b00      	cmp	r3, #0
 802159e:	d119      	bne.n	80215d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80215a0:	68fb      	ldr	r3, [r7, #12]
 80215a2:	6858      	ldr	r0, [r3, #4]
 80215a4:	68fb      	ldr	r3, [r7, #12]
 80215a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215a8:	461a      	mov	r2, r3
 80215aa:	68b9      	ldr	r1, [r7, #8]
 80215ac:	f00c facb 	bl	802db46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80215b0:	68fb      	ldr	r3, [r7, #12]
 80215b2:	685a      	ldr	r2, [r3, #4]
 80215b4:	68fb      	ldr	r3, [r7, #12]
 80215b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215b8:	441a      	add	r2, r3
 80215ba:	68fb      	ldr	r3, [r7, #12]
 80215bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80215be:	68fb      	ldr	r3, [r7, #12]
 80215c0:	685a      	ldr	r2, [r3, #4]
 80215c2:	68fb      	ldr	r3, [r7, #12]
 80215c4:	689b      	ldr	r3, [r3, #8]
 80215c6:	429a      	cmp	r2, r3
 80215c8:	d32b      	bcc.n	8021622 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	681a      	ldr	r2, [r3, #0]
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	605a      	str	r2, [r3, #4]
 80215d2:	e026      	b.n	8021622 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80215d4:	68fb      	ldr	r3, [r7, #12]
 80215d6:	68d8      	ldr	r0, [r3, #12]
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215dc:	461a      	mov	r2, r3
 80215de:	68b9      	ldr	r1, [r7, #8]
 80215e0:	f00c fab1 	bl	802db46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80215e4:	68fb      	ldr	r3, [r7, #12]
 80215e6:	68da      	ldr	r2, [r3, #12]
 80215e8:	68fb      	ldr	r3, [r7, #12]
 80215ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215ec:	425b      	negs	r3, r3
 80215ee:	441a      	add	r2, r3
 80215f0:	68fb      	ldr	r3, [r7, #12]
 80215f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80215f4:	68fb      	ldr	r3, [r7, #12]
 80215f6:	68da      	ldr	r2, [r3, #12]
 80215f8:	68fb      	ldr	r3, [r7, #12]
 80215fa:	681b      	ldr	r3, [r3, #0]
 80215fc:	429a      	cmp	r2, r3
 80215fe:	d207      	bcs.n	8021610 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021600:	68fb      	ldr	r3, [r7, #12]
 8021602:	689a      	ldr	r2, [r3, #8]
 8021604:	68fb      	ldr	r3, [r7, #12]
 8021606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021608:	425b      	negs	r3, r3
 802160a:	441a      	add	r2, r3
 802160c:	68fb      	ldr	r3, [r7, #12]
 802160e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	2b02      	cmp	r3, #2
 8021614:	d105      	bne.n	8021622 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021616:	693b      	ldr	r3, [r7, #16]
 8021618:	2b00      	cmp	r3, #0
 802161a:	d002      	beq.n	8021622 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802161c:	693b      	ldr	r3, [r7, #16]
 802161e:	3b01      	subs	r3, #1
 8021620:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8021622:	693b      	ldr	r3, [r7, #16]
 8021624:	1c5a      	adds	r2, r3, #1
 8021626:	68fb      	ldr	r3, [r7, #12]
 8021628:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802162a:	697b      	ldr	r3, [r7, #20]
}
 802162c:	4618      	mov	r0, r3
 802162e:	3718      	adds	r7, #24
 8021630:	46bd      	mov	sp, r7
 8021632:	bd80      	pop	{r7, pc}

08021634 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8021634:	b580      	push	{r7, lr}
 8021636:	b082      	sub	sp, #8
 8021638:	af00      	add	r7, sp, #0
 802163a:	6078      	str	r0, [r7, #4]
 802163c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021642:	2b00      	cmp	r3, #0
 8021644:	d018      	beq.n	8021678 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	68da      	ldr	r2, [r3, #12]
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802164e:	441a      	add	r2, r3
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	68da      	ldr	r2, [r3, #12]
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	689b      	ldr	r3, [r3, #8]
 802165c:	429a      	cmp	r2, r3
 802165e:	d303      	bcc.n	8021668 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	681a      	ldr	r2, [r3, #0]
 8021664:	687b      	ldr	r3, [r7, #4]
 8021666:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	68d9      	ldr	r1, [r3, #12]
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021670:	461a      	mov	r2, r3
 8021672:	6838      	ldr	r0, [r7, #0]
 8021674:	f00c fa67 	bl	802db46 <memcpy>
	}
}
 8021678:	bf00      	nop
 802167a:	3708      	adds	r7, #8
 802167c:	46bd      	mov	sp, r7
 802167e:	bd80      	pop	{r7, pc}

08021680 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8021680:	b580      	push	{r7, lr}
 8021682:	b084      	sub	sp, #16
 8021684:	af00      	add	r7, sp, #0
 8021686:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8021688:	f001 fde4 	bl	8023254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021692:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8021694:	e011      	b.n	80216ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802169a:	2b00      	cmp	r3, #0
 802169c:	d012      	beq.n	80216c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802169e:	687b      	ldr	r3, [r7, #4]
 80216a0:	3324      	adds	r3, #36	; 0x24
 80216a2:	4618      	mov	r0, r3
 80216a4:	f000 fd72 	bl	802218c <xTaskRemoveFromEventList>
 80216a8:	4603      	mov	r3, r0
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d001      	beq.n	80216b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80216ae:	f000 fe49 	bl	8022344 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80216b2:	7bfb      	ldrb	r3, [r7, #15]
 80216b4:	3b01      	subs	r3, #1
 80216b6:	b2db      	uxtb	r3, r3
 80216b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80216ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80216be:	2b00      	cmp	r3, #0
 80216c0:	dce9      	bgt.n	8021696 <prvUnlockQueue+0x16>
 80216c2:	e000      	b.n	80216c6 <prvUnlockQueue+0x46>
					break;
 80216c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	22ff      	movs	r2, #255	; 0xff
 80216ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80216ce:	f001 fdf1 	bl	80232b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80216d2:	f001 fdbf 	bl	8023254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80216dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80216de:	e011      	b.n	8021704 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	691b      	ldr	r3, [r3, #16]
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d012      	beq.n	802170e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	3310      	adds	r3, #16
 80216ec:	4618      	mov	r0, r3
 80216ee:	f000 fd4d 	bl	802218c <xTaskRemoveFromEventList>
 80216f2:	4603      	mov	r3, r0
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	d001      	beq.n	80216fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80216f8:	f000 fe24 	bl	8022344 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80216fc:	7bbb      	ldrb	r3, [r7, #14]
 80216fe:	3b01      	subs	r3, #1
 8021700:	b2db      	uxtb	r3, r3
 8021702:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021708:	2b00      	cmp	r3, #0
 802170a:	dce9      	bgt.n	80216e0 <prvUnlockQueue+0x60>
 802170c:	e000      	b.n	8021710 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802170e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	22ff      	movs	r2, #255	; 0xff
 8021714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8021718:	f001 fdcc 	bl	80232b4 <vPortExitCritical>
}
 802171c:	bf00      	nop
 802171e:	3710      	adds	r7, #16
 8021720:	46bd      	mov	sp, r7
 8021722:	bd80      	pop	{r7, pc}

08021724 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8021724:	b580      	push	{r7, lr}
 8021726:	b084      	sub	sp, #16
 8021728:	af00      	add	r7, sp, #0
 802172a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802172c:	f001 fd92 	bl	8023254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021730:	687b      	ldr	r3, [r7, #4]
 8021732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021734:	2b00      	cmp	r3, #0
 8021736:	d102      	bne.n	802173e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8021738:	2301      	movs	r3, #1
 802173a:	60fb      	str	r3, [r7, #12]
 802173c:	e001      	b.n	8021742 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802173e:	2300      	movs	r3, #0
 8021740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021742:	f001 fdb7 	bl	80232b4 <vPortExitCritical>

	return xReturn;
 8021746:	68fb      	ldr	r3, [r7, #12]
}
 8021748:	4618      	mov	r0, r3
 802174a:	3710      	adds	r7, #16
 802174c:	46bd      	mov	sp, r7
 802174e:	bd80      	pop	{r7, pc}

08021750 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8021750:	b580      	push	{r7, lr}
 8021752:	b084      	sub	sp, #16
 8021754:	af00      	add	r7, sp, #0
 8021756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021758:	f001 fd7c 	bl	8023254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021764:	429a      	cmp	r2, r3
 8021766:	d102      	bne.n	802176e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8021768:	2301      	movs	r3, #1
 802176a:	60fb      	str	r3, [r7, #12]
 802176c:	e001      	b.n	8021772 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 802176e:	2300      	movs	r3, #0
 8021770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021772:	f001 fd9f 	bl	80232b4 <vPortExitCritical>

	return xReturn;
 8021776:	68fb      	ldr	r3, [r7, #12]
}
 8021778:	4618      	mov	r0, r3
 802177a:	3710      	adds	r7, #16
 802177c:	46bd      	mov	sp, r7
 802177e:	bd80      	pop	{r7, pc}

08021780 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8021780:	b480      	push	{r7}
 8021782:	b085      	sub	sp, #20
 8021784:	af00      	add	r7, sp, #0
 8021786:	6078      	str	r0, [r7, #4]
 8021788:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802178a:	2300      	movs	r3, #0
 802178c:	60fb      	str	r3, [r7, #12]
 802178e:	e014      	b.n	80217ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8021790:	4a0f      	ldr	r2, [pc, #60]	; (80217d0 <vQueueAddToRegistry+0x50>)
 8021792:	68fb      	ldr	r3, [r7, #12]
 8021794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021798:	2b00      	cmp	r3, #0
 802179a:	d10b      	bne.n	80217b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 802179c:	490c      	ldr	r1, [pc, #48]	; (80217d0 <vQueueAddToRegistry+0x50>)
 802179e:	68fb      	ldr	r3, [r7, #12]
 80217a0:	683a      	ldr	r2, [r7, #0]
 80217a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80217a6:	4a0a      	ldr	r2, [pc, #40]	; (80217d0 <vQueueAddToRegistry+0x50>)
 80217a8:	68fb      	ldr	r3, [r7, #12]
 80217aa:	00db      	lsls	r3, r3, #3
 80217ac:	4413      	add	r3, r2
 80217ae:	687a      	ldr	r2, [r7, #4]
 80217b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80217b2:	e006      	b.n	80217c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80217b4:	68fb      	ldr	r3, [r7, #12]
 80217b6:	3301      	adds	r3, #1
 80217b8:	60fb      	str	r3, [r7, #12]
 80217ba:	68fb      	ldr	r3, [r7, #12]
 80217bc:	2b09      	cmp	r3, #9
 80217be:	d9e7      	bls.n	8021790 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80217c0:	bf00      	nop
 80217c2:	bf00      	nop
 80217c4:	3714      	adds	r7, #20
 80217c6:	46bd      	mov	sp, r7
 80217c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217cc:	4770      	bx	lr
 80217ce:	bf00      	nop
 80217d0:	20001ce8 	.word	0x20001ce8

080217d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	b086      	sub	sp, #24
 80217d8:	af00      	add	r7, sp, #0
 80217da:	60f8      	str	r0, [r7, #12]
 80217dc:	60b9      	str	r1, [r7, #8]
 80217de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80217e0:	68fb      	ldr	r3, [r7, #12]
 80217e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80217e4:	f001 fd36 	bl	8023254 <vPortEnterCritical>
 80217e8:	697b      	ldr	r3, [r7, #20]
 80217ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80217ee:	b25b      	sxtb	r3, r3
 80217f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80217f4:	d103      	bne.n	80217fe <vQueueWaitForMessageRestricted+0x2a>
 80217f6:	697b      	ldr	r3, [r7, #20]
 80217f8:	2200      	movs	r2, #0
 80217fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80217fe:	697b      	ldr	r3, [r7, #20]
 8021800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021804:	b25b      	sxtb	r3, r3
 8021806:	f1b3 3fff 	cmp.w	r3, #4294967295
 802180a:	d103      	bne.n	8021814 <vQueueWaitForMessageRestricted+0x40>
 802180c:	697b      	ldr	r3, [r7, #20]
 802180e:	2200      	movs	r2, #0
 8021810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021814:	f001 fd4e 	bl	80232b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8021818:	697b      	ldr	r3, [r7, #20]
 802181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802181c:	2b00      	cmp	r3, #0
 802181e:	d106      	bne.n	802182e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8021820:	697b      	ldr	r3, [r7, #20]
 8021822:	3324      	adds	r3, #36	; 0x24
 8021824:	687a      	ldr	r2, [r7, #4]
 8021826:	68b9      	ldr	r1, [r7, #8]
 8021828:	4618      	mov	r0, r3
 802182a:	f000 fc83 	bl	8022134 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802182e:	6978      	ldr	r0, [r7, #20]
 8021830:	f7ff ff26 	bl	8021680 <prvUnlockQueue>
	}
 8021834:	bf00      	nop
 8021836:	3718      	adds	r7, #24
 8021838:	46bd      	mov	sp, r7
 802183a:	bd80      	pop	{r7, pc}

0802183c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 802183c:	b580      	push	{r7, lr}
 802183e:	b08e      	sub	sp, #56	; 0x38
 8021840:	af04      	add	r7, sp, #16
 8021842:	60f8      	str	r0, [r7, #12]
 8021844:	60b9      	str	r1, [r7, #8]
 8021846:	607a      	str	r2, [r7, #4]
 8021848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802184c:	2b00      	cmp	r3, #0
 802184e:	d10a      	bne.n	8021866 <xTaskCreateStatic+0x2a>
	__asm volatile
 8021850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021854:	f383 8811 	msr	BASEPRI, r3
 8021858:	f3bf 8f6f 	isb	sy
 802185c:	f3bf 8f4f 	dsb	sy
 8021860:	623b      	str	r3, [r7, #32]
}
 8021862:	bf00      	nop
 8021864:	e7fe      	b.n	8021864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8021866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021868:	2b00      	cmp	r3, #0
 802186a:	d10a      	bne.n	8021882 <xTaskCreateStatic+0x46>
	__asm volatile
 802186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021870:	f383 8811 	msr	BASEPRI, r3
 8021874:	f3bf 8f6f 	isb	sy
 8021878:	f3bf 8f4f 	dsb	sy
 802187c:	61fb      	str	r3, [r7, #28]
}
 802187e:	bf00      	nop
 8021880:	e7fe      	b.n	8021880 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8021882:	23ac      	movs	r3, #172	; 0xac
 8021884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8021886:	693b      	ldr	r3, [r7, #16]
 8021888:	2bac      	cmp	r3, #172	; 0xac
 802188a:	d00a      	beq.n	80218a2 <xTaskCreateStatic+0x66>
	__asm volatile
 802188c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021890:	f383 8811 	msr	BASEPRI, r3
 8021894:	f3bf 8f6f 	isb	sy
 8021898:	f3bf 8f4f 	dsb	sy
 802189c:	61bb      	str	r3, [r7, #24]
}
 802189e:	bf00      	nop
 80218a0:	e7fe      	b.n	80218a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80218a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80218a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80218a6:	2b00      	cmp	r3, #0
 80218a8:	d01e      	beq.n	80218e8 <xTaskCreateStatic+0xac>
 80218aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d01b      	beq.n	80218e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80218b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80218b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80218b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80218b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80218ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218bc:	2202      	movs	r2, #2
 80218be:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80218c2:	2300      	movs	r3, #0
 80218c4:	9303      	str	r3, [sp, #12]
 80218c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c8:	9302      	str	r3, [sp, #8]
 80218ca:	f107 0314 	add.w	r3, r7, #20
 80218ce:	9301      	str	r3, [sp, #4]
 80218d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218d2:	9300      	str	r3, [sp, #0]
 80218d4:	683b      	ldr	r3, [r7, #0]
 80218d6:	687a      	ldr	r2, [r7, #4]
 80218d8:	68b9      	ldr	r1, [r7, #8]
 80218da:	68f8      	ldr	r0, [r7, #12]
 80218dc:	f000 f850 	bl	8021980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80218e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80218e2:	f000 f8f7 	bl	8021ad4 <prvAddNewTaskToReadyList>
 80218e6:	e001      	b.n	80218ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80218e8:	2300      	movs	r3, #0
 80218ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80218ec:	697b      	ldr	r3, [r7, #20]
	}
 80218ee:	4618      	mov	r0, r3
 80218f0:	3728      	adds	r7, #40	; 0x28
 80218f2:	46bd      	mov	sp, r7
 80218f4:	bd80      	pop	{r7, pc}

080218f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80218f6:	b580      	push	{r7, lr}
 80218f8:	b08c      	sub	sp, #48	; 0x30
 80218fa:	af04      	add	r7, sp, #16
 80218fc:	60f8      	str	r0, [r7, #12]
 80218fe:	60b9      	str	r1, [r7, #8]
 8021900:	603b      	str	r3, [r7, #0]
 8021902:	4613      	mov	r3, r2
 8021904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8021906:	88fb      	ldrh	r3, [r7, #6]
 8021908:	009b      	lsls	r3, r3, #2
 802190a:	4618      	mov	r0, r3
 802190c:	f001 fdc4 	bl	8023498 <pvPortMalloc>
 8021910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8021912:	697b      	ldr	r3, [r7, #20]
 8021914:	2b00      	cmp	r3, #0
 8021916:	d00e      	beq.n	8021936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021918:	20ac      	movs	r0, #172	; 0xac
 802191a:	f001 fdbd 	bl	8023498 <pvPortMalloc>
 802191e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021920:	69fb      	ldr	r3, [r7, #28]
 8021922:	2b00      	cmp	r3, #0
 8021924:	d003      	beq.n	802192e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8021926:	69fb      	ldr	r3, [r7, #28]
 8021928:	697a      	ldr	r2, [r7, #20]
 802192a:	631a      	str	r2, [r3, #48]	; 0x30
 802192c:	e005      	b.n	802193a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802192e:	6978      	ldr	r0, [r7, #20]
 8021930:	f001 fdf8 	bl	8023524 <vPortFree>
 8021934:	e001      	b.n	802193a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8021936:	2300      	movs	r3, #0
 8021938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 802193a:	69fb      	ldr	r3, [r7, #28]
 802193c:	2b00      	cmp	r3, #0
 802193e:	d017      	beq.n	8021970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8021940:	69fb      	ldr	r3, [r7, #28]
 8021942:	2200      	movs	r2, #0
 8021944:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8021948:	88fa      	ldrh	r2, [r7, #6]
 802194a:	2300      	movs	r3, #0
 802194c:	9303      	str	r3, [sp, #12]
 802194e:	69fb      	ldr	r3, [r7, #28]
 8021950:	9302      	str	r3, [sp, #8]
 8021952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021954:	9301      	str	r3, [sp, #4]
 8021956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021958:	9300      	str	r3, [sp, #0]
 802195a:	683b      	ldr	r3, [r7, #0]
 802195c:	68b9      	ldr	r1, [r7, #8]
 802195e:	68f8      	ldr	r0, [r7, #12]
 8021960:	f000 f80e 	bl	8021980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021964:	69f8      	ldr	r0, [r7, #28]
 8021966:	f000 f8b5 	bl	8021ad4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 802196a:	2301      	movs	r3, #1
 802196c:	61bb      	str	r3, [r7, #24]
 802196e:	e002      	b.n	8021976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8021970:	f04f 33ff 	mov.w	r3, #4294967295
 8021974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8021976:	69bb      	ldr	r3, [r7, #24]
	}
 8021978:	4618      	mov	r0, r3
 802197a:	3720      	adds	r7, #32
 802197c:	46bd      	mov	sp, r7
 802197e:	bd80      	pop	{r7, pc}

08021980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8021980:	b580      	push	{r7, lr}
 8021982:	b088      	sub	sp, #32
 8021984:	af00      	add	r7, sp, #0
 8021986:	60f8      	str	r0, [r7, #12]
 8021988:	60b9      	str	r1, [r7, #8]
 802198a:	607a      	str	r2, [r7, #4]
 802198c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 802198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	009b      	lsls	r3, r3, #2
 8021996:	461a      	mov	r2, r3
 8021998:	21a5      	movs	r1, #165	; 0xa5
 802199a:	f00b feff 	bl	802d79c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80219a2:	687b      	ldr	r3, [r7, #4]
 80219a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80219a8:	3b01      	subs	r3, #1
 80219aa:	009b      	lsls	r3, r3, #2
 80219ac:	4413      	add	r3, r2
 80219ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80219b0:	69bb      	ldr	r3, [r7, #24]
 80219b2:	f023 0307 	bic.w	r3, r3, #7
 80219b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80219b8:	69bb      	ldr	r3, [r7, #24]
 80219ba:	f003 0307 	and.w	r3, r3, #7
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d00a      	beq.n	80219d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80219c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219c6:	f383 8811 	msr	BASEPRI, r3
 80219ca:	f3bf 8f6f 	isb	sy
 80219ce:	f3bf 8f4f 	dsb	sy
 80219d2:	617b      	str	r3, [r7, #20]
}
 80219d4:	bf00      	nop
 80219d6:	e7fe      	b.n	80219d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80219d8:	68bb      	ldr	r3, [r7, #8]
 80219da:	2b00      	cmp	r3, #0
 80219dc:	d01f      	beq.n	8021a1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80219de:	2300      	movs	r3, #0
 80219e0:	61fb      	str	r3, [r7, #28]
 80219e2:	e012      	b.n	8021a0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80219e4:	68ba      	ldr	r2, [r7, #8]
 80219e6:	69fb      	ldr	r3, [r7, #28]
 80219e8:	4413      	add	r3, r2
 80219ea:	7819      	ldrb	r1, [r3, #0]
 80219ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80219ee:	69fb      	ldr	r3, [r7, #28]
 80219f0:	4413      	add	r3, r2
 80219f2:	3334      	adds	r3, #52	; 0x34
 80219f4:	460a      	mov	r2, r1
 80219f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80219f8:	68ba      	ldr	r2, [r7, #8]
 80219fa:	69fb      	ldr	r3, [r7, #28]
 80219fc:	4413      	add	r3, r2
 80219fe:	781b      	ldrb	r3, [r3, #0]
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	d006      	beq.n	8021a12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021a04:	69fb      	ldr	r3, [r7, #28]
 8021a06:	3301      	adds	r3, #1
 8021a08:	61fb      	str	r3, [r7, #28]
 8021a0a:	69fb      	ldr	r3, [r7, #28]
 8021a0c:	2b0f      	cmp	r3, #15
 8021a0e:	d9e9      	bls.n	80219e4 <prvInitialiseNewTask+0x64>
 8021a10:	e000      	b.n	8021a14 <prvInitialiseNewTask+0x94>
			{
				break;
 8021a12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8021a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a16:	2200      	movs	r2, #0
 8021a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021a1c:	e003      	b.n	8021a26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8021a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a20:	2200      	movs	r2, #0
 8021a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8021a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a28:	2b37      	cmp	r3, #55	; 0x37
 8021a2a:	d901      	bls.n	8021a30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8021a2c:	2337      	movs	r3, #55	; 0x37
 8021a2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021a34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8021a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021a3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8021a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a3e:	2200      	movs	r2, #0
 8021a40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8021a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a44:	3304      	adds	r3, #4
 8021a46:	4618      	mov	r0, r3
 8021a48:	f7fe fdc6 	bl	80205d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8021a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a4e:	3318      	adds	r3, #24
 8021a50:	4618      	mov	r0, r3
 8021a52:	f7fe fdc1 	bl	80205d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8021a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021a5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8021a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021a6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8021a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a6e:	2200      	movs	r2, #0
 8021a70:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8021a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a74:	2200      	movs	r2, #0
 8021a76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a7c:	2200      	movs	r2, #0
 8021a7e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8021a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a84:	3358      	adds	r3, #88	; 0x58
 8021a86:	224c      	movs	r2, #76	; 0x4c
 8021a88:	2100      	movs	r1, #0
 8021a8a:	4618      	mov	r0, r3
 8021a8c:	f00b fe86 	bl	802d79c <memset>
 8021a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a92:	4a0d      	ldr	r2, [pc, #52]	; (8021ac8 <prvInitialiseNewTask+0x148>)
 8021a94:	65da      	str	r2, [r3, #92]	; 0x5c
 8021a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a98:	4a0c      	ldr	r2, [pc, #48]	; (8021acc <prvInitialiseNewTask+0x14c>)
 8021a9a:	661a      	str	r2, [r3, #96]	; 0x60
 8021a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a9e:	4a0c      	ldr	r2, [pc, #48]	; (8021ad0 <prvInitialiseNewTask+0x150>)
 8021aa0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8021aa2:	683a      	ldr	r2, [r7, #0]
 8021aa4:	68f9      	ldr	r1, [r7, #12]
 8021aa6:	69b8      	ldr	r0, [r7, #24]
 8021aa8:	f001 faa6 	bl	8022ff8 <pxPortInitialiseStack>
 8021aac:	4602      	mov	r2, r0
 8021aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ab0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8021ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d002      	beq.n	8021abe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8021ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021abe:	bf00      	nop
 8021ac0:	3720      	adds	r7, #32
 8021ac2:	46bd      	mov	sp, r7
 8021ac4:	bd80      	pop	{r7, pc}
 8021ac6:	bf00      	nop
 8021ac8:	2000d9b0 	.word	0x2000d9b0
 8021acc:	2000da18 	.word	0x2000da18
 8021ad0:	2000da80 	.word	0x2000da80

08021ad4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b082      	sub	sp, #8
 8021ad8:	af00      	add	r7, sp, #0
 8021ada:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021adc:	f001 fbba 	bl	8023254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021ae0:	4b2d      	ldr	r3, [pc, #180]	; (8021b98 <prvAddNewTaskToReadyList+0xc4>)
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	3301      	adds	r3, #1
 8021ae6:	4a2c      	ldr	r2, [pc, #176]	; (8021b98 <prvAddNewTaskToReadyList+0xc4>)
 8021ae8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021aea:	4b2c      	ldr	r3, [pc, #176]	; (8021b9c <prvAddNewTaskToReadyList+0xc8>)
 8021aec:	681b      	ldr	r3, [r3, #0]
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d109      	bne.n	8021b06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8021af2:	4a2a      	ldr	r2, [pc, #168]	; (8021b9c <prvAddNewTaskToReadyList+0xc8>)
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021af8:	4b27      	ldr	r3, [pc, #156]	; (8021b98 <prvAddNewTaskToReadyList+0xc4>)
 8021afa:	681b      	ldr	r3, [r3, #0]
 8021afc:	2b01      	cmp	r3, #1
 8021afe:	d110      	bne.n	8021b22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021b00:	f000 fc44 	bl	802238c <prvInitialiseTaskLists>
 8021b04:	e00d      	b.n	8021b22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8021b06:	4b26      	ldr	r3, [pc, #152]	; (8021ba0 <prvAddNewTaskToReadyList+0xcc>)
 8021b08:	681b      	ldr	r3, [r3, #0]
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d109      	bne.n	8021b22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021b0e:	4b23      	ldr	r3, [pc, #140]	; (8021b9c <prvAddNewTaskToReadyList+0xc8>)
 8021b10:	681b      	ldr	r3, [r3, #0]
 8021b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b18:	429a      	cmp	r2, r3
 8021b1a:	d802      	bhi.n	8021b22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021b1c:	4a1f      	ldr	r2, [pc, #124]	; (8021b9c <prvAddNewTaskToReadyList+0xc8>)
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8021b22:	4b20      	ldr	r3, [pc, #128]	; (8021ba4 <prvAddNewTaskToReadyList+0xd0>)
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	3301      	adds	r3, #1
 8021b28:	4a1e      	ldr	r2, [pc, #120]	; (8021ba4 <prvAddNewTaskToReadyList+0xd0>)
 8021b2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021b2c:	4b1d      	ldr	r3, [pc, #116]	; (8021ba4 <prvAddNewTaskToReadyList+0xd0>)
 8021b2e:	681a      	ldr	r2, [r3, #0]
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b38:	4b1b      	ldr	r3, [pc, #108]	; (8021ba8 <prvAddNewTaskToReadyList+0xd4>)
 8021b3a:	681b      	ldr	r3, [r3, #0]
 8021b3c:	429a      	cmp	r2, r3
 8021b3e:	d903      	bls.n	8021b48 <prvAddNewTaskToReadyList+0x74>
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b44:	4a18      	ldr	r2, [pc, #96]	; (8021ba8 <prvAddNewTaskToReadyList+0xd4>)
 8021b46:	6013      	str	r3, [r2, #0]
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b4c:	4613      	mov	r3, r2
 8021b4e:	009b      	lsls	r3, r3, #2
 8021b50:	4413      	add	r3, r2
 8021b52:	009b      	lsls	r3, r3, #2
 8021b54:	4a15      	ldr	r2, [pc, #84]	; (8021bac <prvAddNewTaskToReadyList+0xd8>)
 8021b56:	441a      	add	r2, r3
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	3304      	adds	r3, #4
 8021b5c:	4619      	mov	r1, r3
 8021b5e:	4610      	mov	r0, r2
 8021b60:	f7fe fd47 	bl	80205f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8021b64:	f001 fba6 	bl	80232b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021b68:	4b0d      	ldr	r3, [pc, #52]	; (8021ba0 <prvAddNewTaskToReadyList+0xcc>)
 8021b6a:	681b      	ldr	r3, [r3, #0]
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d00e      	beq.n	8021b8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021b70:	4b0a      	ldr	r3, [pc, #40]	; (8021b9c <prvAddNewTaskToReadyList+0xc8>)
 8021b72:	681b      	ldr	r3, [r3, #0]
 8021b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b76:	687b      	ldr	r3, [r7, #4]
 8021b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b7a:	429a      	cmp	r2, r3
 8021b7c:	d207      	bcs.n	8021b8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021b7e:	4b0c      	ldr	r3, [pc, #48]	; (8021bb0 <prvAddNewTaskToReadyList+0xdc>)
 8021b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021b84:	601a      	str	r2, [r3, #0]
 8021b86:	f3bf 8f4f 	dsb	sy
 8021b8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021b8e:	bf00      	nop
 8021b90:	3708      	adds	r7, #8
 8021b92:	46bd      	mov	sp, r7
 8021b94:	bd80      	pop	{r7, pc}
 8021b96:	bf00      	nop
 8021b98:	2000220c 	.word	0x2000220c
 8021b9c:	20001d38 	.word	0x20001d38
 8021ba0:	20002218 	.word	0x20002218
 8021ba4:	20002228 	.word	0x20002228
 8021ba8:	20002214 	.word	0x20002214
 8021bac:	20001d3c 	.word	0x20001d3c
 8021bb0:	e000ed04 	.word	0xe000ed04

08021bb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8021bb4:	b580      	push	{r7, lr}
 8021bb6:	b084      	sub	sp, #16
 8021bb8:	af00      	add	r7, sp, #0
 8021bba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	d017      	beq.n	8021bf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8021bc6:	4b13      	ldr	r3, [pc, #76]	; (8021c14 <vTaskDelay+0x60>)
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d00a      	beq.n	8021be4 <vTaskDelay+0x30>
	__asm volatile
 8021bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021bd2:	f383 8811 	msr	BASEPRI, r3
 8021bd6:	f3bf 8f6f 	isb	sy
 8021bda:	f3bf 8f4f 	dsb	sy
 8021bde:	60bb      	str	r3, [r7, #8]
}
 8021be0:	bf00      	nop
 8021be2:	e7fe      	b.n	8021be2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8021be4:	f000 f88c 	bl	8021d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021be8:	2100      	movs	r1, #0
 8021bea:	6878      	ldr	r0, [r7, #4]
 8021bec:	f000 fe62 	bl	80228b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021bf0:	f000 f894 	bl	8021d1c <xTaskResumeAll>
 8021bf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8021bf6:	68fb      	ldr	r3, [r7, #12]
 8021bf8:	2b00      	cmp	r3, #0
 8021bfa:	d107      	bne.n	8021c0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8021bfc:	4b06      	ldr	r3, [pc, #24]	; (8021c18 <vTaskDelay+0x64>)
 8021bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021c02:	601a      	str	r2, [r3, #0]
 8021c04:	f3bf 8f4f 	dsb	sy
 8021c08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021c0c:	bf00      	nop
 8021c0e:	3710      	adds	r7, #16
 8021c10:	46bd      	mov	sp, r7
 8021c12:	bd80      	pop	{r7, pc}
 8021c14:	20002234 	.word	0x20002234
 8021c18:	e000ed04 	.word	0xe000ed04

08021c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021c1c:	b580      	push	{r7, lr}
 8021c1e:	b08a      	sub	sp, #40	; 0x28
 8021c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8021c22:	2300      	movs	r3, #0
 8021c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8021c26:	2300      	movs	r3, #0
 8021c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021c2a:	463a      	mov	r2, r7
 8021c2c:	1d39      	adds	r1, r7, #4
 8021c2e:	f107 0308 	add.w	r3, r7, #8
 8021c32:	4618      	mov	r0, r3
 8021c34:	f7fe fc7c 	bl	8020530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021c38:	6839      	ldr	r1, [r7, #0]
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	68ba      	ldr	r2, [r7, #8]
 8021c3e:	9202      	str	r2, [sp, #8]
 8021c40:	9301      	str	r3, [sp, #4]
 8021c42:	2300      	movs	r3, #0
 8021c44:	9300      	str	r3, [sp, #0]
 8021c46:	2300      	movs	r3, #0
 8021c48:	460a      	mov	r2, r1
 8021c4a:	4925      	ldr	r1, [pc, #148]	; (8021ce0 <vTaskStartScheduler+0xc4>)
 8021c4c:	4825      	ldr	r0, [pc, #148]	; (8021ce4 <vTaskStartScheduler+0xc8>)
 8021c4e:	f7ff fdf5 	bl	802183c <xTaskCreateStatic>
 8021c52:	4603      	mov	r3, r0
 8021c54:	4a24      	ldr	r2, [pc, #144]	; (8021ce8 <vTaskStartScheduler+0xcc>)
 8021c56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8021c58:	4b23      	ldr	r3, [pc, #140]	; (8021ce8 <vTaskStartScheduler+0xcc>)
 8021c5a:	681b      	ldr	r3, [r3, #0]
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d002      	beq.n	8021c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8021c60:	2301      	movs	r3, #1
 8021c62:	617b      	str	r3, [r7, #20]
 8021c64:	e001      	b.n	8021c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8021c66:	2300      	movs	r3, #0
 8021c68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8021c6a:	697b      	ldr	r3, [r7, #20]
 8021c6c:	2b01      	cmp	r3, #1
 8021c6e:	d102      	bne.n	8021c76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8021c70:	f000 fe74 	bl	802295c <xTimerCreateTimerTask>
 8021c74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8021c76:	697b      	ldr	r3, [r7, #20]
 8021c78:	2b01      	cmp	r3, #1
 8021c7a:	d11d      	bne.n	8021cb8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8021c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c80:	f383 8811 	msr	BASEPRI, r3
 8021c84:	f3bf 8f6f 	isb	sy
 8021c88:	f3bf 8f4f 	dsb	sy
 8021c8c:	613b      	str	r3, [r7, #16]
}
 8021c8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021c90:	4b16      	ldr	r3, [pc, #88]	; (8021cec <vTaskStartScheduler+0xd0>)
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	3358      	adds	r3, #88	; 0x58
 8021c96:	4a16      	ldr	r2, [pc, #88]	; (8021cf0 <vTaskStartScheduler+0xd4>)
 8021c98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8021c9a:	4b16      	ldr	r3, [pc, #88]	; (8021cf4 <vTaskStartScheduler+0xd8>)
 8021c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8021ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8021ca2:	4b15      	ldr	r3, [pc, #84]	; (8021cf8 <vTaskStartScheduler+0xdc>)
 8021ca4:	2201      	movs	r2, #1
 8021ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8021ca8:	4b14      	ldr	r3, [pc, #80]	; (8021cfc <vTaskStartScheduler+0xe0>)
 8021caa:	2200      	movs	r2, #0
 8021cac:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8021cae:	f7ef f9cb 	bl	8011048 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8021cb2:	f001 fa2d 	bl	8023110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8021cb6:	e00e      	b.n	8021cd6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8021cb8:	697b      	ldr	r3, [r7, #20]
 8021cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021cbe:	d10a      	bne.n	8021cd6 <vTaskStartScheduler+0xba>
	__asm volatile
 8021cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021cc4:	f383 8811 	msr	BASEPRI, r3
 8021cc8:	f3bf 8f6f 	isb	sy
 8021ccc:	f3bf 8f4f 	dsb	sy
 8021cd0:	60fb      	str	r3, [r7, #12]
}
 8021cd2:	bf00      	nop
 8021cd4:	e7fe      	b.n	8021cd4 <vTaskStartScheduler+0xb8>
}
 8021cd6:	bf00      	nop
 8021cd8:	3718      	adds	r7, #24
 8021cda:	46bd      	mov	sp, r7
 8021cdc:	bd80      	pop	{r7, pc}
 8021cde:	bf00      	nop
 8021ce0:	080333e4 	.word	0x080333e4
 8021ce4:	0802235d 	.word	0x0802235d
 8021ce8:	20002230 	.word	0x20002230
 8021cec:	20001d38 	.word	0x20001d38
 8021cf0:	20000188 	.word	0x20000188
 8021cf4:	2000222c 	.word	0x2000222c
 8021cf8:	20002218 	.word	0x20002218
 8021cfc:	20002210 	.word	0x20002210

08021d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8021d00:	b480      	push	{r7}
 8021d02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8021d04:	4b04      	ldr	r3, [pc, #16]	; (8021d18 <vTaskSuspendAll+0x18>)
 8021d06:	681b      	ldr	r3, [r3, #0]
 8021d08:	3301      	adds	r3, #1
 8021d0a:	4a03      	ldr	r2, [pc, #12]	; (8021d18 <vTaskSuspendAll+0x18>)
 8021d0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8021d0e:	bf00      	nop
 8021d10:	46bd      	mov	sp, r7
 8021d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d16:	4770      	bx	lr
 8021d18:	20002234 	.word	0x20002234

08021d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	b084      	sub	sp, #16
 8021d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8021d22:	2300      	movs	r3, #0
 8021d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8021d26:	2300      	movs	r3, #0
 8021d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8021d2a:	4b42      	ldr	r3, [pc, #264]	; (8021e34 <xTaskResumeAll+0x118>)
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d10a      	bne.n	8021d48 <xTaskResumeAll+0x2c>
	__asm volatile
 8021d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d36:	f383 8811 	msr	BASEPRI, r3
 8021d3a:	f3bf 8f6f 	isb	sy
 8021d3e:	f3bf 8f4f 	dsb	sy
 8021d42:	603b      	str	r3, [r7, #0]
}
 8021d44:	bf00      	nop
 8021d46:	e7fe      	b.n	8021d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8021d48:	f001 fa84 	bl	8023254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8021d4c:	4b39      	ldr	r3, [pc, #228]	; (8021e34 <xTaskResumeAll+0x118>)
 8021d4e:	681b      	ldr	r3, [r3, #0]
 8021d50:	3b01      	subs	r3, #1
 8021d52:	4a38      	ldr	r2, [pc, #224]	; (8021e34 <xTaskResumeAll+0x118>)
 8021d54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021d56:	4b37      	ldr	r3, [pc, #220]	; (8021e34 <xTaskResumeAll+0x118>)
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d162      	bne.n	8021e24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8021d5e:	4b36      	ldr	r3, [pc, #216]	; (8021e38 <xTaskResumeAll+0x11c>)
 8021d60:	681b      	ldr	r3, [r3, #0]
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	d05e      	beq.n	8021e24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021d66:	e02f      	b.n	8021dc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021d68:	4b34      	ldr	r3, [pc, #208]	; (8021e3c <xTaskResumeAll+0x120>)
 8021d6a:	68db      	ldr	r3, [r3, #12]
 8021d6c:	68db      	ldr	r3, [r3, #12]
 8021d6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021d70:	68fb      	ldr	r3, [r7, #12]
 8021d72:	3318      	adds	r3, #24
 8021d74:	4618      	mov	r0, r3
 8021d76:	f7fe fc99 	bl	80206ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021d7a:	68fb      	ldr	r3, [r7, #12]
 8021d7c:	3304      	adds	r3, #4
 8021d7e:	4618      	mov	r0, r3
 8021d80:	f7fe fc94 	bl	80206ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d88:	4b2d      	ldr	r3, [pc, #180]	; (8021e40 <xTaskResumeAll+0x124>)
 8021d8a:	681b      	ldr	r3, [r3, #0]
 8021d8c:	429a      	cmp	r2, r3
 8021d8e:	d903      	bls.n	8021d98 <xTaskResumeAll+0x7c>
 8021d90:	68fb      	ldr	r3, [r7, #12]
 8021d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d94:	4a2a      	ldr	r2, [pc, #168]	; (8021e40 <xTaskResumeAll+0x124>)
 8021d96:	6013      	str	r3, [r2, #0]
 8021d98:	68fb      	ldr	r3, [r7, #12]
 8021d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d9c:	4613      	mov	r3, r2
 8021d9e:	009b      	lsls	r3, r3, #2
 8021da0:	4413      	add	r3, r2
 8021da2:	009b      	lsls	r3, r3, #2
 8021da4:	4a27      	ldr	r2, [pc, #156]	; (8021e44 <xTaskResumeAll+0x128>)
 8021da6:	441a      	add	r2, r3
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	3304      	adds	r3, #4
 8021dac:	4619      	mov	r1, r3
 8021dae:	4610      	mov	r0, r2
 8021db0:	f7fe fc1f 	bl	80205f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021db4:	68fb      	ldr	r3, [r7, #12]
 8021db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021db8:	4b23      	ldr	r3, [pc, #140]	; (8021e48 <xTaskResumeAll+0x12c>)
 8021dba:	681b      	ldr	r3, [r3, #0]
 8021dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dbe:	429a      	cmp	r2, r3
 8021dc0:	d302      	bcc.n	8021dc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8021dc2:	4b22      	ldr	r3, [pc, #136]	; (8021e4c <xTaskResumeAll+0x130>)
 8021dc4:	2201      	movs	r2, #1
 8021dc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021dc8:	4b1c      	ldr	r3, [pc, #112]	; (8021e3c <xTaskResumeAll+0x120>)
 8021dca:	681b      	ldr	r3, [r3, #0]
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	d1cb      	bne.n	8021d68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8021dd0:	68fb      	ldr	r3, [r7, #12]
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d001      	beq.n	8021dda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8021dd6:	f000 fbb3 	bl	8022540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8021dda:	4b1d      	ldr	r3, [pc, #116]	; (8021e50 <xTaskResumeAll+0x134>)
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8021de0:	687b      	ldr	r3, [r7, #4]
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d010      	beq.n	8021e08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8021de6:	f000 f847 	bl	8021e78 <xTaskIncrementTick>
 8021dea:	4603      	mov	r3, r0
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	d002      	beq.n	8021df6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8021df0:	4b16      	ldr	r3, [pc, #88]	; (8021e4c <xTaskResumeAll+0x130>)
 8021df2:	2201      	movs	r2, #1
 8021df4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	3b01      	subs	r3, #1
 8021dfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8021dfc:	687b      	ldr	r3, [r7, #4]
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d1f1      	bne.n	8021de6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8021e02:	4b13      	ldr	r3, [pc, #76]	; (8021e50 <xTaskResumeAll+0x134>)
 8021e04:	2200      	movs	r2, #0
 8021e06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8021e08:	4b10      	ldr	r3, [pc, #64]	; (8021e4c <xTaskResumeAll+0x130>)
 8021e0a:	681b      	ldr	r3, [r3, #0]
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d009      	beq.n	8021e24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8021e10:	2301      	movs	r3, #1
 8021e12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8021e14:	4b0f      	ldr	r3, [pc, #60]	; (8021e54 <xTaskResumeAll+0x138>)
 8021e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021e1a:	601a      	str	r2, [r3, #0]
 8021e1c:	f3bf 8f4f 	dsb	sy
 8021e20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021e24:	f001 fa46 	bl	80232b4 <vPortExitCritical>

	return xAlreadyYielded;
 8021e28:	68bb      	ldr	r3, [r7, #8]
}
 8021e2a:	4618      	mov	r0, r3
 8021e2c:	3710      	adds	r7, #16
 8021e2e:	46bd      	mov	sp, r7
 8021e30:	bd80      	pop	{r7, pc}
 8021e32:	bf00      	nop
 8021e34:	20002234 	.word	0x20002234
 8021e38:	2000220c 	.word	0x2000220c
 8021e3c:	200021cc 	.word	0x200021cc
 8021e40:	20002214 	.word	0x20002214
 8021e44:	20001d3c 	.word	0x20001d3c
 8021e48:	20001d38 	.word	0x20001d38
 8021e4c:	20002220 	.word	0x20002220
 8021e50:	2000221c 	.word	0x2000221c
 8021e54:	e000ed04 	.word	0xe000ed04

08021e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8021e58:	b480      	push	{r7}
 8021e5a:	b083      	sub	sp, #12
 8021e5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8021e5e:	4b05      	ldr	r3, [pc, #20]	; (8021e74 <xTaskGetTickCount+0x1c>)
 8021e60:	681b      	ldr	r3, [r3, #0]
 8021e62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8021e64:	687b      	ldr	r3, [r7, #4]
}
 8021e66:	4618      	mov	r0, r3
 8021e68:	370c      	adds	r7, #12
 8021e6a:	46bd      	mov	sp, r7
 8021e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e70:	4770      	bx	lr
 8021e72:	bf00      	nop
 8021e74:	20002210 	.word	0x20002210

08021e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8021e78:	b580      	push	{r7, lr}
 8021e7a:	b086      	sub	sp, #24
 8021e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8021e7e:	2300      	movs	r3, #0
 8021e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021e82:	4b4f      	ldr	r3, [pc, #316]	; (8021fc0 <xTaskIncrementTick+0x148>)
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	f040 808f 	bne.w	8021faa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8021e8c:	4b4d      	ldr	r3, [pc, #308]	; (8021fc4 <xTaskIncrementTick+0x14c>)
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	3301      	adds	r3, #1
 8021e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8021e94:	4a4b      	ldr	r2, [pc, #300]	; (8021fc4 <xTaskIncrementTick+0x14c>)
 8021e96:	693b      	ldr	r3, [r7, #16]
 8021e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8021e9a:	693b      	ldr	r3, [r7, #16]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d120      	bne.n	8021ee2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8021ea0:	4b49      	ldr	r3, [pc, #292]	; (8021fc8 <xTaskIncrementTick+0x150>)
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d00a      	beq.n	8021ec0 <xTaskIncrementTick+0x48>
	__asm volatile
 8021eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021eae:	f383 8811 	msr	BASEPRI, r3
 8021eb2:	f3bf 8f6f 	isb	sy
 8021eb6:	f3bf 8f4f 	dsb	sy
 8021eba:	603b      	str	r3, [r7, #0]
}
 8021ebc:	bf00      	nop
 8021ebe:	e7fe      	b.n	8021ebe <xTaskIncrementTick+0x46>
 8021ec0:	4b41      	ldr	r3, [pc, #260]	; (8021fc8 <xTaskIncrementTick+0x150>)
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	60fb      	str	r3, [r7, #12]
 8021ec6:	4b41      	ldr	r3, [pc, #260]	; (8021fcc <xTaskIncrementTick+0x154>)
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	4a3f      	ldr	r2, [pc, #252]	; (8021fc8 <xTaskIncrementTick+0x150>)
 8021ecc:	6013      	str	r3, [r2, #0]
 8021ece:	4a3f      	ldr	r2, [pc, #252]	; (8021fcc <xTaskIncrementTick+0x154>)
 8021ed0:	68fb      	ldr	r3, [r7, #12]
 8021ed2:	6013      	str	r3, [r2, #0]
 8021ed4:	4b3e      	ldr	r3, [pc, #248]	; (8021fd0 <xTaskIncrementTick+0x158>)
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	3301      	adds	r3, #1
 8021eda:	4a3d      	ldr	r2, [pc, #244]	; (8021fd0 <xTaskIncrementTick+0x158>)
 8021edc:	6013      	str	r3, [r2, #0]
 8021ede:	f000 fb2f 	bl	8022540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8021ee2:	4b3c      	ldr	r3, [pc, #240]	; (8021fd4 <xTaskIncrementTick+0x15c>)
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	693a      	ldr	r2, [r7, #16]
 8021ee8:	429a      	cmp	r2, r3
 8021eea:	d349      	bcc.n	8021f80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021eec:	4b36      	ldr	r3, [pc, #216]	; (8021fc8 <xTaskIncrementTick+0x150>)
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d104      	bne.n	8021f00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021ef6:	4b37      	ldr	r3, [pc, #220]	; (8021fd4 <xTaskIncrementTick+0x15c>)
 8021ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8021efc:	601a      	str	r2, [r3, #0]
					break;
 8021efe:	e03f      	b.n	8021f80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021f00:	4b31      	ldr	r3, [pc, #196]	; (8021fc8 <xTaskIncrementTick+0x150>)
 8021f02:	681b      	ldr	r3, [r3, #0]
 8021f04:	68db      	ldr	r3, [r3, #12]
 8021f06:	68db      	ldr	r3, [r3, #12]
 8021f08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8021f0a:	68bb      	ldr	r3, [r7, #8]
 8021f0c:	685b      	ldr	r3, [r3, #4]
 8021f0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8021f10:	693a      	ldr	r2, [r7, #16]
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	429a      	cmp	r2, r3
 8021f16:	d203      	bcs.n	8021f20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8021f18:	4a2e      	ldr	r2, [pc, #184]	; (8021fd4 <xTaskIncrementTick+0x15c>)
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8021f1e:	e02f      	b.n	8021f80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021f20:	68bb      	ldr	r3, [r7, #8]
 8021f22:	3304      	adds	r3, #4
 8021f24:	4618      	mov	r0, r3
 8021f26:	f7fe fbc1 	bl	80206ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8021f2a:	68bb      	ldr	r3, [r7, #8]
 8021f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d004      	beq.n	8021f3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021f32:	68bb      	ldr	r3, [r7, #8]
 8021f34:	3318      	adds	r3, #24
 8021f36:	4618      	mov	r0, r3
 8021f38:	f7fe fbb8 	bl	80206ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8021f3c:	68bb      	ldr	r3, [r7, #8]
 8021f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f40:	4b25      	ldr	r3, [pc, #148]	; (8021fd8 <xTaskIncrementTick+0x160>)
 8021f42:	681b      	ldr	r3, [r3, #0]
 8021f44:	429a      	cmp	r2, r3
 8021f46:	d903      	bls.n	8021f50 <xTaskIncrementTick+0xd8>
 8021f48:	68bb      	ldr	r3, [r7, #8]
 8021f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f4c:	4a22      	ldr	r2, [pc, #136]	; (8021fd8 <xTaskIncrementTick+0x160>)
 8021f4e:	6013      	str	r3, [r2, #0]
 8021f50:	68bb      	ldr	r3, [r7, #8]
 8021f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f54:	4613      	mov	r3, r2
 8021f56:	009b      	lsls	r3, r3, #2
 8021f58:	4413      	add	r3, r2
 8021f5a:	009b      	lsls	r3, r3, #2
 8021f5c:	4a1f      	ldr	r2, [pc, #124]	; (8021fdc <xTaskIncrementTick+0x164>)
 8021f5e:	441a      	add	r2, r3
 8021f60:	68bb      	ldr	r3, [r7, #8]
 8021f62:	3304      	adds	r3, #4
 8021f64:	4619      	mov	r1, r3
 8021f66:	4610      	mov	r0, r2
 8021f68:	f7fe fb43 	bl	80205f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021f6c:	68bb      	ldr	r3, [r7, #8]
 8021f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f70:	4b1b      	ldr	r3, [pc, #108]	; (8021fe0 <xTaskIncrementTick+0x168>)
 8021f72:	681b      	ldr	r3, [r3, #0]
 8021f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f76:	429a      	cmp	r2, r3
 8021f78:	d3b8      	bcc.n	8021eec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8021f7a:	2301      	movs	r3, #1
 8021f7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021f7e:	e7b5      	b.n	8021eec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8021f80:	4b17      	ldr	r3, [pc, #92]	; (8021fe0 <xTaskIncrementTick+0x168>)
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f86:	4915      	ldr	r1, [pc, #84]	; (8021fdc <xTaskIncrementTick+0x164>)
 8021f88:	4613      	mov	r3, r2
 8021f8a:	009b      	lsls	r3, r3, #2
 8021f8c:	4413      	add	r3, r2
 8021f8e:	009b      	lsls	r3, r3, #2
 8021f90:	440b      	add	r3, r1
 8021f92:	681b      	ldr	r3, [r3, #0]
 8021f94:	2b01      	cmp	r3, #1
 8021f96:	d901      	bls.n	8021f9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8021f98:	2301      	movs	r3, #1
 8021f9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8021f9c:	4b11      	ldr	r3, [pc, #68]	; (8021fe4 <xTaskIncrementTick+0x16c>)
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d007      	beq.n	8021fb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8021fa4:	2301      	movs	r3, #1
 8021fa6:	617b      	str	r3, [r7, #20]
 8021fa8:	e004      	b.n	8021fb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8021faa:	4b0f      	ldr	r3, [pc, #60]	; (8021fe8 <xTaskIncrementTick+0x170>)
 8021fac:	681b      	ldr	r3, [r3, #0]
 8021fae:	3301      	adds	r3, #1
 8021fb0:	4a0d      	ldr	r2, [pc, #52]	; (8021fe8 <xTaskIncrementTick+0x170>)
 8021fb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8021fb4:	697b      	ldr	r3, [r7, #20]
}
 8021fb6:	4618      	mov	r0, r3
 8021fb8:	3718      	adds	r7, #24
 8021fba:	46bd      	mov	sp, r7
 8021fbc:	bd80      	pop	{r7, pc}
 8021fbe:	bf00      	nop
 8021fc0:	20002234 	.word	0x20002234
 8021fc4:	20002210 	.word	0x20002210
 8021fc8:	200021c4 	.word	0x200021c4
 8021fcc:	200021c8 	.word	0x200021c8
 8021fd0:	20002224 	.word	0x20002224
 8021fd4:	2000222c 	.word	0x2000222c
 8021fd8:	20002214 	.word	0x20002214
 8021fdc:	20001d3c 	.word	0x20001d3c
 8021fe0:	20001d38 	.word	0x20001d38
 8021fe4:	20002220 	.word	0x20002220
 8021fe8:	2000221c 	.word	0x2000221c

08021fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8021fec:	b580      	push	{r7, lr}
 8021fee:	b084      	sub	sp, #16
 8021ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8021ff2:	4b36      	ldr	r3, [pc, #216]	; (80220cc <vTaskSwitchContext+0xe0>)
 8021ff4:	681b      	ldr	r3, [r3, #0]
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	d003      	beq.n	8022002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8021ffa:	4b35      	ldr	r3, [pc, #212]	; (80220d0 <vTaskSwitchContext+0xe4>)
 8021ffc:	2201      	movs	r2, #1
 8021ffe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8022000:	e05f      	b.n	80220c2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8022002:	4b33      	ldr	r3, [pc, #204]	; (80220d0 <vTaskSwitchContext+0xe4>)
 8022004:	2200      	movs	r2, #0
 8022006:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8022008:	f7ef f825 	bl	8011056 <getRunTimeCounterValue>
 802200c:	4603      	mov	r3, r0
 802200e:	4a31      	ldr	r2, [pc, #196]	; (80220d4 <vTaskSwitchContext+0xe8>)
 8022010:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8022012:	4b30      	ldr	r3, [pc, #192]	; (80220d4 <vTaskSwitchContext+0xe8>)
 8022014:	681a      	ldr	r2, [r3, #0]
 8022016:	4b30      	ldr	r3, [pc, #192]	; (80220d8 <vTaskSwitchContext+0xec>)
 8022018:	681b      	ldr	r3, [r3, #0]
 802201a:	429a      	cmp	r2, r3
 802201c:	d909      	bls.n	8022032 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 802201e:	4b2f      	ldr	r3, [pc, #188]	; (80220dc <vTaskSwitchContext+0xf0>)
 8022020:	681b      	ldr	r3, [r3, #0]
 8022022:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8022024:	4a2b      	ldr	r2, [pc, #172]	; (80220d4 <vTaskSwitchContext+0xe8>)
 8022026:	6810      	ldr	r0, [r2, #0]
 8022028:	4a2b      	ldr	r2, [pc, #172]	; (80220d8 <vTaskSwitchContext+0xec>)
 802202a:	6812      	ldr	r2, [r2, #0]
 802202c:	1a82      	subs	r2, r0, r2
 802202e:	440a      	add	r2, r1
 8022030:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8022032:	4b28      	ldr	r3, [pc, #160]	; (80220d4 <vTaskSwitchContext+0xe8>)
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	4a28      	ldr	r2, [pc, #160]	; (80220d8 <vTaskSwitchContext+0xec>)
 8022038:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802203a:	4b29      	ldr	r3, [pc, #164]	; (80220e0 <vTaskSwitchContext+0xf4>)
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	60fb      	str	r3, [r7, #12]
 8022040:	e010      	b.n	8022064 <vTaskSwitchContext+0x78>
 8022042:	68fb      	ldr	r3, [r7, #12]
 8022044:	2b00      	cmp	r3, #0
 8022046:	d10a      	bne.n	802205e <vTaskSwitchContext+0x72>
	__asm volatile
 8022048:	f04f 0350 	mov.w	r3, #80	; 0x50
 802204c:	f383 8811 	msr	BASEPRI, r3
 8022050:	f3bf 8f6f 	isb	sy
 8022054:	f3bf 8f4f 	dsb	sy
 8022058:	607b      	str	r3, [r7, #4]
}
 802205a:	bf00      	nop
 802205c:	e7fe      	b.n	802205c <vTaskSwitchContext+0x70>
 802205e:	68fb      	ldr	r3, [r7, #12]
 8022060:	3b01      	subs	r3, #1
 8022062:	60fb      	str	r3, [r7, #12]
 8022064:	491f      	ldr	r1, [pc, #124]	; (80220e4 <vTaskSwitchContext+0xf8>)
 8022066:	68fa      	ldr	r2, [r7, #12]
 8022068:	4613      	mov	r3, r2
 802206a:	009b      	lsls	r3, r3, #2
 802206c:	4413      	add	r3, r2
 802206e:	009b      	lsls	r3, r3, #2
 8022070:	440b      	add	r3, r1
 8022072:	681b      	ldr	r3, [r3, #0]
 8022074:	2b00      	cmp	r3, #0
 8022076:	d0e4      	beq.n	8022042 <vTaskSwitchContext+0x56>
 8022078:	68fa      	ldr	r2, [r7, #12]
 802207a:	4613      	mov	r3, r2
 802207c:	009b      	lsls	r3, r3, #2
 802207e:	4413      	add	r3, r2
 8022080:	009b      	lsls	r3, r3, #2
 8022082:	4a18      	ldr	r2, [pc, #96]	; (80220e4 <vTaskSwitchContext+0xf8>)
 8022084:	4413      	add	r3, r2
 8022086:	60bb      	str	r3, [r7, #8]
 8022088:	68bb      	ldr	r3, [r7, #8]
 802208a:	685b      	ldr	r3, [r3, #4]
 802208c:	685a      	ldr	r2, [r3, #4]
 802208e:	68bb      	ldr	r3, [r7, #8]
 8022090:	605a      	str	r2, [r3, #4]
 8022092:	68bb      	ldr	r3, [r7, #8]
 8022094:	685a      	ldr	r2, [r3, #4]
 8022096:	68bb      	ldr	r3, [r7, #8]
 8022098:	3308      	adds	r3, #8
 802209a:	429a      	cmp	r2, r3
 802209c:	d104      	bne.n	80220a8 <vTaskSwitchContext+0xbc>
 802209e:	68bb      	ldr	r3, [r7, #8]
 80220a0:	685b      	ldr	r3, [r3, #4]
 80220a2:	685a      	ldr	r2, [r3, #4]
 80220a4:	68bb      	ldr	r3, [r7, #8]
 80220a6:	605a      	str	r2, [r3, #4]
 80220a8:	68bb      	ldr	r3, [r7, #8]
 80220aa:	685b      	ldr	r3, [r3, #4]
 80220ac:	68db      	ldr	r3, [r3, #12]
 80220ae:	4a0b      	ldr	r2, [pc, #44]	; (80220dc <vTaskSwitchContext+0xf0>)
 80220b0:	6013      	str	r3, [r2, #0]
 80220b2:	4a0b      	ldr	r2, [pc, #44]	; (80220e0 <vTaskSwitchContext+0xf4>)
 80220b4:	68fb      	ldr	r3, [r7, #12]
 80220b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80220b8:	4b08      	ldr	r3, [pc, #32]	; (80220dc <vTaskSwitchContext+0xf0>)
 80220ba:	681b      	ldr	r3, [r3, #0]
 80220bc:	3358      	adds	r3, #88	; 0x58
 80220be:	4a0a      	ldr	r2, [pc, #40]	; (80220e8 <vTaskSwitchContext+0xfc>)
 80220c0:	6013      	str	r3, [r2, #0]
}
 80220c2:	bf00      	nop
 80220c4:	3710      	adds	r7, #16
 80220c6:	46bd      	mov	sp, r7
 80220c8:	bd80      	pop	{r7, pc}
 80220ca:	bf00      	nop
 80220cc:	20002234 	.word	0x20002234
 80220d0:	20002220 	.word	0x20002220
 80220d4:	2000223c 	.word	0x2000223c
 80220d8:	20002238 	.word	0x20002238
 80220dc:	20001d38 	.word	0x20001d38
 80220e0:	20002214 	.word	0x20002214
 80220e4:	20001d3c 	.word	0x20001d3c
 80220e8:	20000188 	.word	0x20000188

080220ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80220ec:	b580      	push	{r7, lr}
 80220ee:	b084      	sub	sp, #16
 80220f0:	af00      	add	r7, sp, #0
 80220f2:	6078      	str	r0, [r7, #4]
 80220f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d10a      	bne.n	8022112 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80220fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022100:	f383 8811 	msr	BASEPRI, r3
 8022104:	f3bf 8f6f 	isb	sy
 8022108:	f3bf 8f4f 	dsb	sy
 802210c:	60fb      	str	r3, [r7, #12]
}
 802210e:	bf00      	nop
 8022110:	e7fe      	b.n	8022110 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022112:	4b07      	ldr	r3, [pc, #28]	; (8022130 <vTaskPlaceOnEventList+0x44>)
 8022114:	681b      	ldr	r3, [r3, #0]
 8022116:	3318      	adds	r3, #24
 8022118:	4619      	mov	r1, r3
 802211a:	6878      	ldr	r0, [r7, #4]
 802211c:	f7fe fa8d 	bl	802063a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022120:	2101      	movs	r1, #1
 8022122:	6838      	ldr	r0, [r7, #0]
 8022124:	f000 fbc6 	bl	80228b4 <prvAddCurrentTaskToDelayedList>
}
 8022128:	bf00      	nop
 802212a:	3710      	adds	r7, #16
 802212c:	46bd      	mov	sp, r7
 802212e:	bd80      	pop	{r7, pc}
 8022130:	20001d38 	.word	0x20001d38

08022134 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022134:	b580      	push	{r7, lr}
 8022136:	b086      	sub	sp, #24
 8022138:	af00      	add	r7, sp, #0
 802213a:	60f8      	str	r0, [r7, #12]
 802213c:	60b9      	str	r1, [r7, #8]
 802213e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8022140:	68fb      	ldr	r3, [r7, #12]
 8022142:	2b00      	cmp	r3, #0
 8022144:	d10a      	bne.n	802215c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8022146:	f04f 0350 	mov.w	r3, #80	; 0x50
 802214a:	f383 8811 	msr	BASEPRI, r3
 802214e:	f3bf 8f6f 	isb	sy
 8022152:	f3bf 8f4f 	dsb	sy
 8022156:	617b      	str	r3, [r7, #20]
}
 8022158:	bf00      	nop
 802215a:	e7fe      	b.n	802215a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802215c:	4b0a      	ldr	r3, [pc, #40]	; (8022188 <vTaskPlaceOnEventListRestricted+0x54>)
 802215e:	681b      	ldr	r3, [r3, #0]
 8022160:	3318      	adds	r3, #24
 8022162:	4619      	mov	r1, r3
 8022164:	68f8      	ldr	r0, [r7, #12]
 8022166:	f7fe fa44 	bl	80205f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	2b00      	cmp	r3, #0
 802216e:	d002      	beq.n	8022176 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8022170:	f04f 33ff 	mov.w	r3, #4294967295
 8022174:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8022176:	6879      	ldr	r1, [r7, #4]
 8022178:	68b8      	ldr	r0, [r7, #8]
 802217a:	f000 fb9b 	bl	80228b4 <prvAddCurrentTaskToDelayedList>
	}
 802217e:	bf00      	nop
 8022180:	3718      	adds	r7, #24
 8022182:	46bd      	mov	sp, r7
 8022184:	bd80      	pop	{r7, pc}
 8022186:	bf00      	nop
 8022188:	20001d38 	.word	0x20001d38

0802218c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802218c:	b580      	push	{r7, lr}
 802218e:	b086      	sub	sp, #24
 8022190:	af00      	add	r7, sp, #0
 8022192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	68db      	ldr	r3, [r3, #12]
 8022198:	68db      	ldr	r3, [r3, #12]
 802219a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802219c:	693b      	ldr	r3, [r7, #16]
 802219e:	2b00      	cmp	r3, #0
 80221a0:	d10a      	bne.n	80221b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80221a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221a6:	f383 8811 	msr	BASEPRI, r3
 80221aa:	f3bf 8f6f 	isb	sy
 80221ae:	f3bf 8f4f 	dsb	sy
 80221b2:	60fb      	str	r3, [r7, #12]
}
 80221b4:	bf00      	nop
 80221b6:	e7fe      	b.n	80221b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80221b8:	693b      	ldr	r3, [r7, #16]
 80221ba:	3318      	adds	r3, #24
 80221bc:	4618      	mov	r0, r3
 80221be:	f7fe fa75 	bl	80206ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80221c2:	4b1e      	ldr	r3, [pc, #120]	; (802223c <xTaskRemoveFromEventList+0xb0>)
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d11d      	bne.n	8022206 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80221ca:	693b      	ldr	r3, [r7, #16]
 80221cc:	3304      	adds	r3, #4
 80221ce:	4618      	mov	r0, r3
 80221d0:	f7fe fa6c 	bl	80206ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80221d4:	693b      	ldr	r3, [r7, #16]
 80221d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80221d8:	4b19      	ldr	r3, [pc, #100]	; (8022240 <xTaskRemoveFromEventList+0xb4>)
 80221da:	681b      	ldr	r3, [r3, #0]
 80221dc:	429a      	cmp	r2, r3
 80221de:	d903      	bls.n	80221e8 <xTaskRemoveFromEventList+0x5c>
 80221e0:	693b      	ldr	r3, [r7, #16]
 80221e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221e4:	4a16      	ldr	r2, [pc, #88]	; (8022240 <xTaskRemoveFromEventList+0xb4>)
 80221e6:	6013      	str	r3, [r2, #0]
 80221e8:	693b      	ldr	r3, [r7, #16]
 80221ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80221ec:	4613      	mov	r3, r2
 80221ee:	009b      	lsls	r3, r3, #2
 80221f0:	4413      	add	r3, r2
 80221f2:	009b      	lsls	r3, r3, #2
 80221f4:	4a13      	ldr	r2, [pc, #76]	; (8022244 <xTaskRemoveFromEventList+0xb8>)
 80221f6:	441a      	add	r2, r3
 80221f8:	693b      	ldr	r3, [r7, #16]
 80221fa:	3304      	adds	r3, #4
 80221fc:	4619      	mov	r1, r3
 80221fe:	4610      	mov	r0, r2
 8022200:	f7fe f9f7 	bl	80205f2 <vListInsertEnd>
 8022204:	e005      	b.n	8022212 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022206:	693b      	ldr	r3, [r7, #16]
 8022208:	3318      	adds	r3, #24
 802220a:	4619      	mov	r1, r3
 802220c:	480e      	ldr	r0, [pc, #56]	; (8022248 <xTaskRemoveFromEventList+0xbc>)
 802220e:	f7fe f9f0 	bl	80205f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022212:	693b      	ldr	r3, [r7, #16]
 8022214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022216:	4b0d      	ldr	r3, [pc, #52]	; (802224c <xTaskRemoveFromEventList+0xc0>)
 8022218:	681b      	ldr	r3, [r3, #0]
 802221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802221c:	429a      	cmp	r2, r3
 802221e:	d905      	bls.n	802222c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8022220:	2301      	movs	r3, #1
 8022222:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8022224:	4b0a      	ldr	r3, [pc, #40]	; (8022250 <xTaskRemoveFromEventList+0xc4>)
 8022226:	2201      	movs	r2, #1
 8022228:	601a      	str	r2, [r3, #0]
 802222a:	e001      	b.n	8022230 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 802222c:	2300      	movs	r3, #0
 802222e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8022230:	697b      	ldr	r3, [r7, #20]
}
 8022232:	4618      	mov	r0, r3
 8022234:	3718      	adds	r7, #24
 8022236:	46bd      	mov	sp, r7
 8022238:	bd80      	pop	{r7, pc}
 802223a:	bf00      	nop
 802223c:	20002234 	.word	0x20002234
 8022240:	20002214 	.word	0x20002214
 8022244:	20001d3c 	.word	0x20001d3c
 8022248:	200021cc 	.word	0x200021cc
 802224c:	20001d38 	.word	0x20001d38
 8022250:	20002220 	.word	0x20002220

08022254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8022254:	b480      	push	{r7}
 8022256:	b083      	sub	sp, #12
 8022258:	af00      	add	r7, sp, #0
 802225a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802225c:	4b06      	ldr	r3, [pc, #24]	; (8022278 <vTaskInternalSetTimeOutState+0x24>)
 802225e:	681a      	ldr	r2, [r3, #0]
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8022264:	4b05      	ldr	r3, [pc, #20]	; (802227c <vTaskInternalSetTimeOutState+0x28>)
 8022266:	681a      	ldr	r2, [r3, #0]
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	605a      	str	r2, [r3, #4]
}
 802226c:	bf00      	nop
 802226e:	370c      	adds	r7, #12
 8022270:	46bd      	mov	sp, r7
 8022272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022276:	4770      	bx	lr
 8022278:	20002224 	.word	0x20002224
 802227c:	20002210 	.word	0x20002210

08022280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8022280:	b580      	push	{r7, lr}
 8022282:	b088      	sub	sp, #32
 8022284:	af00      	add	r7, sp, #0
 8022286:	6078      	str	r0, [r7, #4]
 8022288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	2b00      	cmp	r3, #0
 802228e:	d10a      	bne.n	80222a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8022290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022294:	f383 8811 	msr	BASEPRI, r3
 8022298:	f3bf 8f6f 	isb	sy
 802229c:	f3bf 8f4f 	dsb	sy
 80222a0:	613b      	str	r3, [r7, #16]
}
 80222a2:	bf00      	nop
 80222a4:	e7fe      	b.n	80222a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80222a6:	683b      	ldr	r3, [r7, #0]
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	d10a      	bne.n	80222c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80222ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80222b0:	f383 8811 	msr	BASEPRI, r3
 80222b4:	f3bf 8f6f 	isb	sy
 80222b8:	f3bf 8f4f 	dsb	sy
 80222bc:	60fb      	str	r3, [r7, #12]
}
 80222be:	bf00      	nop
 80222c0:	e7fe      	b.n	80222c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80222c2:	f000 ffc7 	bl	8023254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80222c6:	4b1d      	ldr	r3, [pc, #116]	; (802233c <xTaskCheckForTimeOut+0xbc>)
 80222c8:	681b      	ldr	r3, [r3, #0]
 80222ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80222cc:	687b      	ldr	r3, [r7, #4]
 80222ce:	685b      	ldr	r3, [r3, #4]
 80222d0:	69ba      	ldr	r2, [r7, #24]
 80222d2:	1ad3      	subs	r3, r2, r3
 80222d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80222d6:	683b      	ldr	r3, [r7, #0]
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80222de:	d102      	bne.n	80222e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80222e0:	2300      	movs	r3, #0
 80222e2:	61fb      	str	r3, [r7, #28]
 80222e4:	e023      	b.n	802232e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	681a      	ldr	r2, [r3, #0]
 80222ea:	4b15      	ldr	r3, [pc, #84]	; (8022340 <xTaskCheckForTimeOut+0xc0>)
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	429a      	cmp	r2, r3
 80222f0:	d007      	beq.n	8022302 <xTaskCheckForTimeOut+0x82>
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	685b      	ldr	r3, [r3, #4]
 80222f6:	69ba      	ldr	r2, [r7, #24]
 80222f8:	429a      	cmp	r2, r3
 80222fa:	d302      	bcc.n	8022302 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80222fc:	2301      	movs	r3, #1
 80222fe:	61fb      	str	r3, [r7, #28]
 8022300:	e015      	b.n	802232e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8022302:	683b      	ldr	r3, [r7, #0]
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	697a      	ldr	r2, [r7, #20]
 8022308:	429a      	cmp	r2, r3
 802230a:	d20b      	bcs.n	8022324 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802230c:	683b      	ldr	r3, [r7, #0]
 802230e:	681a      	ldr	r2, [r3, #0]
 8022310:	697b      	ldr	r3, [r7, #20]
 8022312:	1ad2      	subs	r2, r2, r3
 8022314:	683b      	ldr	r3, [r7, #0]
 8022316:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022318:	6878      	ldr	r0, [r7, #4]
 802231a:	f7ff ff9b 	bl	8022254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802231e:	2300      	movs	r3, #0
 8022320:	61fb      	str	r3, [r7, #28]
 8022322:	e004      	b.n	802232e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8022324:	683b      	ldr	r3, [r7, #0]
 8022326:	2200      	movs	r2, #0
 8022328:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802232a:	2301      	movs	r3, #1
 802232c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802232e:	f000 ffc1 	bl	80232b4 <vPortExitCritical>

	return xReturn;
 8022332:	69fb      	ldr	r3, [r7, #28]
}
 8022334:	4618      	mov	r0, r3
 8022336:	3720      	adds	r7, #32
 8022338:	46bd      	mov	sp, r7
 802233a:	bd80      	pop	{r7, pc}
 802233c:	20002210 	.word	0x20002210
 8022340:	20002224 	.word	0x20002224

08022344 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8022344:	b480      	push	{r7}
 8022346:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8022348:	4b03      	ldr	r3, [pc, #12]	; (8022358 <vTaskMissedYield+0x14>)
 802234a:	2201      	movs	r2, #1
 802234c:	601a      	str	r2, [r3, #0]
}
 802234e:	bf00      	nop
 8022350:	46bd      	mov	sp, r7
 8022352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022356:	4770      	bx	lr
 8022358:	20002220 	.word	0x20002220

0802235c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802235c:	b580      	push	{r7, lr}
 802235e:	b082      	sub	sp, #8
 8022360:	af00      	add	r7, sp, #0
 8022362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8022364:	f000 f852 	bl	802240c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8022368:	4b06      	ldr	r3, [pc, #24]	; (8022384 <prvIdleTask+0x28>)
 802236a:	681b      	ldr	r3, [r3, #0]
 802236c:	2b01      	cmp	r3, #1
 802236e:	d9f9      	bls.n	8022364 <prvIdleTask+0x8>
			{
				taskYIELD();
 8022370:	4b05      	ldr	r3, [pc, #20]	; (8022388 <prvIdleTask+0x2c>)
 8022372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022376:	601a      	str	r2, [r3, #0]
 8022378:	f3bf 8f4f 	dsb	sy
 802237c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8022380:	e7f0      	b.n	8022364 <prvIdleTask+0x8>
 8022382:	bf00      	nop
 8022384:	20001d3c 	.word	0x20001d3c
 8022388:	e000ed04 	.word	0xe000ed04

0802238c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802238c:	b580      	push	{r7, lr}
 802238e:	b082      	sub	sp, #8
 8022390:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8022392:	2300      	movs	r3, #0
 8022394:	607b      	str	r3, [r7, #4]
 8022396:	e00c      	b.n	80223b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8022398:	687a      	ldr	r2, [r7, #4]
 802239a:	4613      	mov	r3, r2
 802239c:	009b      	lsls	r3, r3, #2
 802239e:	4413      	add	r3, r2
 80223a0:	009b      	lsls	r3, r3, #2
 80223a2:	4a12      	ldr	r2, [pc, #72]	; (80223ec <prvInitialiseTaskLists+0x60>)
 80223a4:	4413      	add	r3, r2
 80223a6:	4618      	mov	r0, r3
 80223a8:	f7fe f8f6 	bl	8020598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	3301      	adds	r3, #1
 80223b0:	607b      	str	r3, [r7, #4]
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	2b37      	cmp	r3, #55	; 0x37
 80223b6:	d9ef      	bls.n	8022398 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80223b8:	480d      	ldr	r0, [pc, #52]	; (80223f0 <prvInitialiseTaskLists+0x64>)
 80223ba:	f7fe f8ed 	bl	8020598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80223be:	480d      	ldr	r0, [pc, #52]	; (80223f4 <prvInitialiseTaskLists+0x68>)
 80223c0:	f7fe f8ea 	bl	8020598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80223c4:	480c      	ldr	r0, [pc, #48]	; (80223f8 <prvInitialiseTaskLists+0x6c>)
 80223c6:	f7fe f8e7 	bl	8020598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80223ca:	480c      	ldr	r0, [pc, #48]	; (80223fc <prvInitialiseTaskLists+0x70>)
 80223cc:	f7fe f8e4 	bl	8020598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80223d0:	480b      	ldr	r0, [pc, #44]	; (8022400 <prvInitialiseTaskLists+0x74>)
 80223d2:	f7fe f8e1 	bl	8020598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80223d6:	4b0b      	ldr	r3, [pc, #44]	; (8022404 <prvInitialiseTaskLists+0x78>)
 80223d8:	4a05      	ldr	r2, [pc, #20]	; (80223f0 <prvInitialiseTaskLists+0x64>)
 80223da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80223dc:	4b0a      	ldr	r3, [pc, #40]	; (8022408 <prvInitialiseTaskLists+0x7c>)
 80223de:	4a05      	ldr	r2, [pc, #20]	; (80223f4 <prvInitialiseTaskLists+0x68>)
 80223e0:	601a      	str	r2, [r3, #0]
}
 80223e2:	bf00      	nop
 80223e4:	3708      	adds	r7, #8
 80223e6:	46bd      	mov	sp, r7
 80223e8:	bd80      	pop	{r7, pc}
 80223ea:	bf00      	nop
 80223ec:	20001d3c 	.word	0x20001d3c
 80223f0:	2000219c 	.word	0x2000219c
 80223f4:	200021b0 	.word	0x200021b0
 80223f8:	200021cc 	.word	0x200021cc
 80223fc:	200021e0 	.word	0x200021e0
 8022400:	200021f8 	.word	0x200021f8
 8022404:	200021c4 	.word	0x200021c4
 8022408:	200021c8 	.word	0x200021c8

0802240c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802240c:	b580      	push	{r7, lr}
 802240e:	b082      	sub	sp, #8
 8022410:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022412:	e019      	b.n	8022448 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8022414:	f000 ff1e 	bl	8023254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022418:	4b10      	ldr	r3, [pc, #64]	; (802245c <prvCheckTasksWaitingTermination+0x50>)
 802241a:	68db      	ldr	r3, [r3, #12]
 802241c:	68db      	ldr	r3, [r3, #12]
 802241e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	3304      	adds	r3, #4
 8022424:	4618      	mov	r0, r3
 8022426:	f7fe f941 	bl	80206ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 802242a:	4b0d      	ldr	r3, [pc, #52]	; (8022460 <prvCheckTasksWaitingTermination+0x54>)
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	3b01      	subs	r3, #1
 8022430:	4a0b      	ldr	r2, [pc, #44]	; (8022460 <prvCheckTasksWaitingTermination+0x54>)
 8022432:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8022434:	4b0b      	ldr	r3, [pc, #44]	; (8022464 <prvCheckTasksWaitingTermination+0x58>)
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	3b01      	subs	r3, #1
 802243a:	4a0a      	ldr	r2, [pc, #40]	; (8022464 <prvCheckTasksWaitingTermination+0x58>)
 802243c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802243e:	f000 ff39 	bl	80232b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8022442:	6878      	ldr	r0, [r7, #4]
 8022444:	f000 f848 	bl	80224d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022448:	4b06      	ldr	r3, [pc, #24]	; (8022464 <prvCheckTasksWaitingTermination+0x58>)
 802244a:	681b      	ldr	r3, [r3, #0]
 802244c:	2b00      	cmp	r3, #0
 802244e:	d1e1      	bne.n	8022414 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8022450:	bf00      	nop
 8022452:	bf00      	nop
 8022454:	3708      	adds	r7, #8
 8022456:	46bd      	mov	sp, r7
 8022458:	bd80      	pop	{r7, pc}
 802245a:	bf00      	nop
 802245c:	200021e0 	.word	0x200021e0
 8022460:	2000220c 	.word	0x2000220c
 8022464:	200021f4 	.word	0x200021f4

08022468 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8022468:	b480      	push	{r7}
 802246a:	b085      	sub	sp, #20
 802246c:	af00      	add	r7, sp, #0
 802246e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8022470:	2300      	movs	r3, #0
 8022472:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8022474:	e005      	b.n	8022482 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	3301      	adds	r3, #1
 802247a:	607b      	str	r3, [r7, #4]
			ulCount++;
 802247c:	68fb      	ldr	r3, [r7, #12]
 802247e:	3301      	adds	r3, #1
 8022480:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	781b      	ldrb	r3, [r3, #0]
 8022486:	2ba5      	cmp	r3, #165	; 0xa5
 8022488:	d0f5      	beq.n	8022476 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802248a:	68fb      	ldr	r3, [r7, #12]
 802248c:	089b      	lsrs	r3, r3, #2
 802248e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8022490:	68fb      	ldr	r3, [r7, #12]
 8022492:	b29b      	uxth	r3, r3
	}
 8022494:	4618      	mov	r0, r3
 8022496:	3714      	adds	r7, #20
 8022498:	46bd      	mov	sp, r7
 802249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802249e:	4770      	bx	lr

080224a0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80224a0:	b580      	push	{r7, lr}
 80224a2:	b086      	sub	sp, #24
 80224a4:	af00      	add	r7, sp, #0
 80224a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	2b00      	cmp	r3, #0
 80224ac:	d102      	bne.n	80224b4 <uxTaskGetStackHighWaterMark+0x14>
 80224ae:	4b09      	ldr	r3, [pc, #36]	; (80224d4 <uxTaskGetStackHighWaterMark+0x34>)
 80224b0:	681b      	ldr	r3, [r3, #0]
 80224b2:	e000      	b.n	80224b6 <uxTaskGetStackHighWaterMark+0x16>
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80224b8:	697b      	ldr	r3, [r7, #20]
 80224ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224bc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80224be:	6938      	ldr	r0, [r7, #16]
 80224c0:	f7ff ffd2 	bl	8022468 <prvTaskCheckFreeStackSpace>
 80224c4:	4603      	mov	r3, r0
 80224c6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80224c8:	68fb      	ldr	r3, [r7, #12]
	}
 80224ca:	4618      	mov	r0, r3
 80224cc:	3718      	adds	r7, #24
 80224ce:	46bd      	mov	sp, r7
 80224d0:	bd80      	pop	{r7, pc}
 80224d2:	bf00      	nop
 80224d4:	20001d38 	.word	0x20001d38

080224d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80224d8:	b580      	push	{r7, lr}
 80224da:	b084      	sub	sp, #16
 80224dc:	af00      	add	r7, sp, #0
 80224de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	3358      	adds	r3, #88	; 0x58
 80224e4:	4618      	mov	r0, r3
 80224e6:	f00b fa5d 	bl	802d9a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d108      	bne.n	8022506 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224f8:	4618      	mov	r0, r3
 80224fa:	f001 f813 	bl	8023524 <vPortFree>
				vPortFree( pxTCB );
 80224fe:	6878      	ldr	r0, [r7, #4]
 8022500:	f001 f810 	bl	8023524 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8022504:	e018      	b.n	8022538 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802250c:	2b01      	cmp	r3, #1
 802250e:	d103      	bne.n	8022518 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022510:	6878      	ldr	r0, [r7, #4]
 8022512:	f001 f807 	bl	8023524 <vPortFree>
	}
 8022516:	e00f      	b.n	8022538 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802251e:	2b02      	cmp	r3, #2
 8022520:	d00a      	beq.n	8022538 <prvDeleteTCB+0x60>
	__asm volatile
 8022522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022526:	f383 8811 	msr	BASEPRI, r3
 802252a:	f3bf 8f6f 	isb	sy
 802252e:	f3bf 8f4f 	dsb	sy
 8022532:	60fb      	str	r3, [r7, #12]
}
 8022534:	bf00      	nop
 8022536:	e7fe      	b.n	8022536 <prvDeleteTCB+0x5e>
	}
 8022538:	bf00      	nop
 802253a:	3710      	adds	r7, #16
 802253c:	46bd      	mov	sp, r7
 802253e:	bd80      	pop	{r7, pc}

08022540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8022540:	b480      	push	{r7}
 8022542:	b083      	sub	sp, #12
 8022544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022546:	4b0c      	ldr	r3, [pc, #48]	; (8022578 <prvResetNextTaskUnblockTime+0x38>)
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	681b      	ldr	r3, [r3, #0]
 802254c:	2b00      	cmp	r3, #0
 802254e:	d104      	bne.n	802255a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8022550:	4b0a      	ldr	r3, [pc, #40]	; (802257c <prvResetNextTaskUnblockTime+0x3c>)
 8022552:	f04f 32ff 	mov.w	r2, #4294967295
 8022556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8022558:	e008      	b.n	802256c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802255a:	4b07      	ldr	r3, [pc, #28]	; (8022578 <prvResetNextTaskUnblockTime+0x38>)
 802255c:	681b      	ldr	r3, [r3, #0]
 802255e:	68db      	ldr	r3, [r3, #12]
 8022560:	68db      	ldr	r3, [r3, #12]
 8022562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	685b      	ldr	r3, [r3, #4]
 8022568:	4a04      	ldr	r2, [pc, #16]	; (802257c <prvResetNextTaskUnblockTime+0x3c>)
 802256a:	6013      	str	r3, [r2, #0]
}
 802256c:	bf00      	nop
 802256e:	370c      	adds	r7, #12
 8022570:	46bd      	mov	sp, r7
 8022572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022576:	4770      	bx	lr
 8022578:	200021c4 	.word	0x200021c4
 802257c:	2000222c 	.word	0x2000222c

08022580 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8022580:	b480      	push	{r7}
 8022582:	b083      	sub	sp, #12
 8022584:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8022586:	4b05      	ldr	r3, [pc, #20]	; (802259c <xTaskGetCurrentTaskHandle+0x1c>)
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	607b      	str	r3, [r7, #4]

		return xReturn;
 802258c:	687b      	ldr	r3, [r7, #4]
	}
 802258e:	4618      	mov	r0, r3
 8022590:	370c      	adds	r7, #12
 8022592:	46bd      	mov	sp, r7
 8022594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022598:	4770      	bx	lr
 802259a:	bf00      	nop
 802259c:	20001d38 	.word	0x20001d38

080225a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80225a0:	b480      	push	{r7}
 80225a2:	b083      	sub	sp, #12
 80225a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80225a6:	4b0b      	ldr	r3, [pc, #44]	; (80225d4 <xTaskGetSchedulerState+0x34>)
 80225a8:	681b      	ldr	r3, [r3, #0]
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d102      	bne.n	80225b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80225ae:	2301      	movs	r3, #1
 80225b0:	607b      	str	r3, [r7, #4]
 80225b2:	e008      	b.n	80225c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80225b4:	4b08      	ldr	r3, [pc, #32]	; (80225d8 <xTaskGetSchedulerState+0x38>)
 80225b6:	681b      	ldr	r3, [r3, #0]
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	d102      	bne.n	80225c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80225bc:	2302      	movs	r3, #2
 80225be:	607b      	str	r3, [r7, #4]
 80225c0:	e001      	b.n	80225c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80225c2:	2300      	movs	r3, #0
 80225c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80225c6:	687b      	ldr	r3, [r7, #4]
	}
 80225c8:	4618      	mov	r0, r3
 80225ca:	370c      	adds	r7, #12
 80225cc:	46bd      	mov	sp, r7
 80225ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225d2:	4770      	bx	lr
 80225d4:	20002218 	.word	0x20002218
 80225d8:	20002234 	.word	0x20002234

080225dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80225dc:	b580      	push	{r7, lr}
 80225de:	b084      	sub	sp, #16
 80225e0:	af00      	add	r7, sp, #0
 80225e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80225e8:	2300      	movs	r3, #0
 80225ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	d051      	beq.n	8022696 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80225f2:	68bb      	ldr	r3, [r7, #8]
 80225f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225f6:	4b2a      	ldr	r3, [pc, #168]	; (80226a0 <xTaskPriorityInherit+0xc4>)
 80225f8:	681b      	ldr	r3, [r3, #0]
 80225fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225fc:	429a      	cmp	r2, r3
 80225fe:	d241      	bcs.n	8022684 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022600:	68bb      	ldr	r3, [r7, #8]
 8022602:	699b      	ldr	r3, [r3, #24]
 8022604:	2b00      	cmp	r3, #0
 8022606:	db06      	blt.n	8022616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022608:	4b25      	ldr	r3, [pc, #148]	; (80226a0 <xTaskPriorityInherit+0xc4>)
 802260a:	681b      	ldr	r3, [r3, #0]
 802260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802260e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022612:	68bb      	ldr	r3, [r7, #8]
 8022614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8022616:	68bb      	ldr	r3, [r7, #8]
 8022618:	6959      	ldr	r1, [r3, #20]
 802261a:	68bb      	ldr	r3, [r7, #8]
 802261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802261e:	4613      	mov	r3, r2
 8022620:	009b      	lsls	r3, r3, #2
 8022622:	4413      	add	r3, r2
 8022624:	009b      	lsls	r3, r3, #2
 8022626:	4a1f      	ldr	r2, [pc, #124]	; (80226a4 <xTaskPriorityInherit+0xc8>)
 8022628:	4413      	add	r3, r2
 802262a:	4299      	cmp	r1, r3
 802262c:	d122      	bne.n	8022674 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802262e:	68bb      	ldr	r3, [r7, #8]
 8022630:	3304      	adds	r3, #4
 8022632:	4618      	mov	r0, r3
 8022634:	f7fe f83a 	bl	80206ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022638:	4b19      	ldr	r3, [pc, #100]	; (80226a0 <xTaskPriorityInherit+0xc4>)
 802263a:	681b      	ldr	r3, [r3, #0]
 802263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802263e:	68bb      	ldr	r3, [r7, #8]
 8022640:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8022642:	68bb      	ldr	r3, [r7, #8]
 8022644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022646:	4b18      	ldr	r3, [pc, #96]	; (80226a8 <xTaskPriorityInherit+0xcc>)
 8022648:	681b      	ldr	r3, [r3, #0]
 802264a:	429a      	cmp	r2, r3
 802264c:	d903      	bls.n	8022656 <xTaskPriorityInherit+0x7a>
 802264e:	68bb      	ldr	r3, [r7, #8]
 8022650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022652:	4a15      	ldr	r2, [pc, #84]	; (80226a8 <xTaskPriorityInherit+0xcc>)
 8022654:	6013      	str	r3, [r2, #0]
 8022656:	68bb      	ldr	r3, [r7, #8]
 8022658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802265a:	4613      	mov	r3, r2
 802265c:	009b      	lsls	r3, r3, #2
 802265e:	4413      	add	r3, r2
 8022660:	009b      	lsls	r3, r3, #2
 8022662:	4a10      	ldr	r2, [pc, #64]	; (80226a4 <xTaskPriorityInherit+0xc8>)
 8022664:	441a      	add	r2, r3
 8022666:	68bb      	ldr	r3, [r7, #8]
 8022668:	3304      	adds	r3, #4
 802266a:	4619      	mov	r1, r3
 802266c:	4610      	mov	r0, r2
 802266e:	f7fd ffc0 	bl	80205f2 <vListInsertEnd>
 8022672:	e004      	b.n	802267e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022674:	4b0a      	ldr	r3, [pc, #40]	; (80226a0 <xTaskPriorityInherit+0xc4>)
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802267a:	68bb      	ldr	r3, [r7, #8]
 802267c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 802267e:	2301      	movs	r3, #1
 8022680:	60fb      	str	r3, [r7, #12]
 8022682:	e008      	b.n	8022696 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8022684:	68bb      	ldr	r3, [r7, #8]
 8022686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8022688:	4b05      	ldr	r3, [pc, #20]	; (80226a0 <xTaskPriorityInherit+0xc4>)
 802268a:	681b      	ldr	r3, [r3, #0]
 802268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802268e:	429a      	cmp	r2, r3
 8022690:	d201      	bcs.n	8022696 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8022692:	2301      	movs	r3, #1
 8022694:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022696:	68fb      	ldr	r3, [r7, #12]
	}
 8022698:	4618      	mov	r0, r3
 802269a:	3710      	adds	r7, #16
 802269c:	46bd      	mov	sp, r7
 802269e:	bd80      	pop	{r7, pc}
 80226a0:	20001d38 	.word	0x20001d38
 80226a4:	20001d3c 	.word	0x20001d3c
 80226a8:	20002214 	.word	0x20002214

080226ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80226ac:	b580      	push	{r7, lr}
 80226ae:	b086      	sub	sp, #24
 80226b0:	af00      	add	r7, sp, #0
 80226b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80226b8:	2300      	movs	r3, #0
 80226ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d056      	beq.n	8022770 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80226c2:	4b2e      	ldr	r3, [pc, #184]	; (802277c <xTaskPriorityDisinherit+0xd0>)
 80226c4:	681b      	ldr	r3, [r3, #0]
 80226c6:	693a      	ldr	r2, [r7, #16]
 80226c8:	429a      	cmp	r2, r3
 80226ca:	d00a      	beq.n	80226e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80226cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80226d0:	f383 8811 	msr	BASEPRI, r3
 80226d4:	f3bf 8f6f 	isb	sy
 80226d8:	f3bf 8f4f 	dsb	sy
 80226dc:	60fb      	str	r3, [r7, #12]
}
 80226de:	bf00      	nop
 80226e0:	e7fe      	b.n	80226e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80226e2:	693b      	ldr	r3, [r7, #16]
 80226e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d10a      	bne.n	8022700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80226ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80226ee:	f383 8811 	msr	BASEPRI, r3
 80226f2:	f3bf 8f6f 	isb	sy
 80226f6:	f3bf 8f4f 	dsb	sy
 80226fa:	60bb      	str	r3, [r7, #8]
}
 80226fc:	bf00      	nop
 80226fe:	e7fe      	b.n	80226fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8022700:	693b      	ldr	r3, [r7, #16]
 8022702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022704:	1e5a      	subs	r2, r3, #1
 8022706:	693b      	ldr	r3, [r7, #16]
 8022708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802270a:	693b      	ldr	r3, [r7, #16]
 802270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802270e:	693b      	ldr	r3, [r7, #16]
 8022710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022712:	429a      	cmp	r2, r3
 8022714:	d02c      	beq.n	8022770 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8022716:	693b      	ldr	r3, [r7, #16]
 8022718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802271a:	2b00      	cmp	r3, #0
 802271c:	d128      	bne.n	8022770 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802271e:	693b      	ldr	r3, [r7, #16]
 8022720:	3304      	adds	r3, #4
 8022722:	4618      	mov	r0, r3
 8022724:	f7fd ffc2 	bl	80206ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8022728:	693b      	ldr	r3, [r7, #16]
 802272a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802272c:	693b      	ldr	r3, [r7, #16]
 802272e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022730:	693b      	ldr	r3, [r7, #16]
 8022732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022738:	693b      	ldr	r3, [r7, #16]
 802273a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802273c:	693b      	ldr	r3, [r7, #16]
 802273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022740:	4b0f      	ldr	r3, [pc, #60]	; (8022780 <xTaskPriorityDisinherit+0xd4>)
 8022742:	681b      	ldr	r3, [r3, #0]
 8022744:	429a      	cmp	r2, r3
 8022746:	d903      	bls.n	8022750 <xTaskPriorityDisinherit+0xa4>
 8022748:	693b      	ldr	r3, [r7, #16]
 802274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802274c:	4a0c      	ldr	r2, [pc, #48]	; (8022780 <xTaskPriorityDisinherit+0xd4>)
 802274e:	6013      	str	r3, [r2, #0]
 8022750:	693b      	ldr	r3, [r7, #16]
 8022752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022754:	4613      	mov	r3, r2
 8022756:	009b      	lsls	r3, r3, #2
 8022758:	4413      	add	r3, r2
 802275a:	009b      	lsls	r3, r3, #2
 802275c:	4a09      	ldr	r2, [pc, #36]	; (8022784 <xTaskPriorityDisinherit+0xd8>)
 802275e:	441a      	add	r2, r3
 8022760:	693b      	ldr	r3, [r7, #16]
 8022762:	3304      	adds	r3, #4
 8022764:	4619      	mov	r1, r3
 8022766:	4610      	mov	r0, r2
 8022768:	f7fd ff43 	bl	80205f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 802276c:	2301      	movs	r3, #1
 802276e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022770:	697b      	ldr	r3, [r7, #20]
	}
 8022772:	4618      	mov	r0, r3
 8022774:	3718      	adds	r7, #24
 8022776:	46bd      	mov	sp, r7
 8022778:	bd80      	pop	{r7, pc}
 802277a:	bf00      	nop
 802277c:	20001d38 	.word	0x20001d38
 8022780:	20002214 	.word	0x20002214
 8022784:	20001d3c 	.word	0x20001d3c

08022788 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8022788:	b580      	push	{r7, lr}
 802278a:	b088      	sub	sp, #32
 802278c:	af00      	add	r7, sp, #0
 802278e:	6078      	str	r0, [r7, #4]
 8022790:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8022796:	2301      	movs	r3, #1
 8022798:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	2b00      	cmp	r3, #0
 802279e:	d06a      	beq.n	8022876 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80227a0:	69bb      	ldr	r3, [r7, #24]
 80227a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d10a      	bne.n	80227be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80227a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80227ac:	f383 8811 	msr	BASEPRI, r3
 80227b0:	f3bf 8f6f 	isb	sy
 80227b4:	f3bf 8f4f 	dsb	sy
 80227b8:	60fb      	str	r3, [r7, #12]
}
 80227ba:	bf00      	nop
 80227bc:	e7fe      	b.n	80227bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80227be:	69bb      	ldr	r3, [r7, #24]
 80227c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80227c2:	683a      	ldr	r2, [r7, #0]
 80227c4:	429a      	cmp	r2, r3
 80227c6:	d902      	bls.n	80227ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80227c8:	683b      	ldr	r3, [r7, #0]
 80227ca:	61fb      	str	r3, [r7, #28]
 80227cc:	e002      	b.n	80227d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80227ce:	69bb      	ldr	r3, [r7, #24]
 80227d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80227d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80227d4:	69bb      	ldr	r3, [r7, #24]
 80227d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227d8:	69fa      	ldr	r2, [r7, #28]
 80227da:	429a      	cmp	r2, r3
 80227dc:	d04b      	beq.n	8022876 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80227de:	69bb      	ldr	r3, [r7, #24]
 80227e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80227e2:	697a      	ldr	r2, [r7, #20]
 80227e4:	429a      	cmp	r2, r3
 80227e6:	d146      	bne.n	8022876 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80227e8:	4b25      	ldr	r3, [pc, #148]	; (8022880 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80227ea:	681b      	ldr	r3, [r3, #0]
 80227ec:	69ba      	ldr	r2, [r7, #24]
 80227ee:	429a      	cmp	r2, r3
 80227f0:	d10a      	bne.n	8022808 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80227f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80227f6:	f383 8811 	msr	BASEPRI, r3
 80227fa:	f3bf 8f6f 	isb	sy
 80227fe:	f3bf 8f4f 	dsb	sy
 8022802:	60bb      	str	r3, [r7, #8]
}
 8022804:	bf00      	nop
 8022806:	e7fe      	b.n	8022806 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8022808:	69bb      	ldr	r3, [r7, #24]
 802280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802280c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 802280e:	69bb      	ldr	r3, [r7, #24]
 8022810:	69fa      	ldr	r2, [r7, #28]
 8022812:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022814:	69bb      	ldr	r3, [r7, #24]
 8022816:	699b      	ldr	r3, [r3, #24]
 8022818:	2b00      	cmp	r3, #0
 802281a:	db04      	blt.n	8022826 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802281c:	69fb      	ldr	r3, [r7, #28]
 802281e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022822:	69bb      	ldr	r3, [r7, #24]
 8022824:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8022826:	69bb      	ldr	r3, [r7, #24]
 8022828:	6959      	ldr	r1, [r3, #20]
 802282a:	693a      	ldr	r2, [r7, #16]
 802282c:	4613      	mov	r3, r2
 802282e:	009b      	lsls	r3, r3, #2
 8022830:	4413      	add	r3, r2
 8022832:	009b      	lsls	r3, r3, #2
 8022834:	4a13      	ldr	r2, [pc, #76]	; (8022884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022836:	4413      	add	r3, r2
 8022838:	4299      	cmp	r1, r3
 802283a:	d11c      	bne.n	8022876 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802283c:	69bb      	ldr	r3, [r7, #24]
 802283e:	3304      	adds	r3, #4
 8022840:	4618      	mov	r0, r3
 8022842:	f7fd ff33 	bl	80206ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8022846:	69bb      	ldr	r3, [r7, #24]
 8022848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802284a:	4b0f      	ldr	r3, [pc, #60]	; (8022888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	429a      	cmp	r2, r3
 8022850:	d903      	bls.n	802285a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8022852:	69bb      	ldr	r3, [r7, #24]
 8022854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022856:	4a0c      	ldr	r2, [pc, #48]	; (8022888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022858:	6013      	str	r3, [r2, #0]
 802285a:	69bb      	ldr	r3, [r7, #24]
 802285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802285e:	4613      	mov	r3, r2
 8022860:	009b      	lsls	r3, r3, #2
 8022862:	4413      	add	r3, r2
 8022864:	009b      	lsls	r3, r3, #2
 8022866:	4a07      	ldr	r2, [pc, #28]	; (8022884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022868:	441a      	add	r2, r3
 802286a:	69bb      	ldr	r3, [r7, #24]
 802286c:	3304      	adds	r3, #4
 802286e:	4619      	mov	r1, r3
 8022870:	4610      	mov	r0, r2
 8022872:	f7fd febe 	bl	80205f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022876:	bf00      	nop
 8022878:	3720      	adds	r7, #32
 802287a:	46bd      	mov	sp, r7
 802287c:	bd80      	pop	{r7, pc}
 802287e:	bf00      	nop
 8022880:	20001d38 	.word	0x20001d38
 8022884:	20001d3c 	.word	0x20001d3c
 8022888:	20002214 	.word	0x20002214

0802288c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 802288c:	b480      	push	{r7}
 802288e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8022890:	4b07      	ldr	r3, [pc, #28]	; (80228b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8022892:	681b      	ldr	r3, [r3, #0]
 8022894:	2b00      	cmp	r3, #0
 8022896:	d004      	beq.n	80228a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8022898:	4b05      	ldr	r3, [pc, #20]	; (80228b0 <pvTaskIncrementMutexHeldCount+0x24>)
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802289e:	3201      	adds	r2, #1
 80228a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80228a2:	4b03      	ldr	r3, [pc, #12]	; (80228b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80228a4:	681b      	ldr	r3, [r3, #0]
	}
 80228a6:	4618      	mov	r0, r3
 80228a8:	46bd      	mov	sp, r7
 80228aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228ae:	4770      	bx	lr
 80228b0:	20001d38 	.word	0x20001d38

080228b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80228b4:	b580      	push	{r7, lr}
 80228b6:	b084      	sub	sp, #16
 80228b8:	af00      	add	r7, sp, #0
 80228ba:	6078      	str	r0, [r7, #4]
 80228bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80228be:	4b21      	ldr	r3, [pc, #132]	; (8022944 <prvAddCurrentTaskToDelayedList+0x90>)
 80228c0:	681b      	ldr	r3, [r3, #0]
 80228c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80228c4:	4b20      	ldr	r3, [pc, #128]	; (8022948 <prvAddCurrentTaskToDelayedList+0x94>)
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	3304      	adds	r3, #4
 80228ca:	4618      	mov	r0, r3
 80228cc:	f7fd feee 	bl	80206ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228d6:	d10a      	bne.n	80228ee <prvAddCurrentTaskToDelayedList+0x3a>
 80228d8:	683b      	ldr	r3, [r7, #0]
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d007      	beq.n	80228ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80228de:	4b1a      	ldr	r3, [pc, #104]	; (8022948 <prvAddCurrentTaskToDelayedList+0x94>)
 80228e0:	681b      	ldr	r3, [r3, #0]
 80228e2:	3304      	adds	r3, #4
 80228e4:	4619      	mov	r1, r3
 80228e6:	4819      	ldr	r0, [pc, #100]	; (802294c <prvAddCurrentTaskToDelayedList+0x98>)
 80228e8:	f7fd fe83 	bl	80205f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80228ec:	e026      	b.n	802293c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80228ee:	68fa      	ldr	r2, [r7, #12]
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	4413      	add	r3, r2
 80228f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80228f6:	4b14      	ldr	r3, [pc, #80]	; (8022948 <prvAddCurrentTaskToDelayedList+0x94>)
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	68ba      	ldr	r2, [r7, #8]
 80228fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80228fe:	68ba      	ldr	r2, [r7, #8]
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	429a      	cmp	r2, r3
 8022904:	d209      	bcs.n	802291a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022906:	4b12      	ldr	r3, [pc, #72]	; (8022950 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022908:	681a      	ldr	r2, [r3, #0]
 802290a:	4b0f      	ldr	r3, [pc, #60]	; (8022948 <prvAddCurrentTaskToDelayedList+0x94>)
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	3304      	adds	r3, #4
 8022910:	4619      	mov	r1, r3
 8022912:	4610      	mov	r0, r2
 8022914:	f7fd fe91 	bl	802063a <vListInsert>
}
 8022918:	e010      	b.n	802293c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802291a:	4b0e      	ldr	r3, [pc, #56]	; (8022954 <prvAddCurrentTaskToDelayedList+0xa0>)
 802291c:	681a      	ldr	r2, [r3, #0]
 802291e:	4b0a      	ldr	r3, [pc, #40]	; (8022948 <prvAddCurrentTaskToDelayedList+0x94>)
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	3304      	adds	r3, #4
 8022924:	4619      	mov	r1, r3
 8022926:	4610      	mov	r0, r2
 8022928:	f7fd fe87 	bl	802063a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802292c:	4b0a      	ldr	r3, [pc, #40]	; (8022958 <prvAddCurrentTaskToDelayedList+0xa4>)
 802292e:	681b      	ldr	r3, [r3, #0]
 8022930:	68ba      	ldr	r2, [r7, #8]
 8022932:	429a      	cmp	r2, r3
 8022934:	d202      	bcs.n	802293c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8022936:	4a08      	ldr	r2, [pc, #32]	; (8022958 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022938:	68bb      	ldr	r3, [r7, #8]
 802293a:	6013      	str	r3, [r2, #0]
}
 802293c:	bf00      	nop
 802293e:	3710      	adds	r7, #16
 8022940:	46bd      	mov	sp, r7
 8022942:	bd80      	pop	{r7, pc}
 8022944:	20002210 	.word	0x20002210
 8022948:	20001d38 	.word	0x20001d38
 802294c:	200021f8 	.word	0x200021f8
 8022950:	200021c8 	.word	0x200021c8
 8022954:	200021c4 	.word	0x200021c4
 8022958:	2000222c 	.word	0x2000222c

0802295c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802295c:	b580      	push	{r7, lr}
 802295e:	b08a      	sub	sp, #40	; 0x28
 8022960:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022962:	2300      	movs	r3, #0
 8022964:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8022966:	f000 fb07 	bl	8022f78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802296a:	4b1c      	ldr	r3, [pc, #112]	; (80229dc <xTimerCreateTimerTask+0x80>)
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	2b00      	cmp	r3, #0
 8022970:	d021      	beq.n	80229b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8022972:	2300      	movs	r3, #0
 8022974:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8022976:	2300      	movs	r3, #0
 8022978:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802297a:	1d3a      	adds	r2, r7, #4
 802297c:	f107 0108 	add.w	r1, r7, #8
 8022980:	f107 030c 	add.w	r3, r7, #12
 8022984:	4618      	mov	r0, r3
 8022986:	f7fd fded 	bl	8020564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802298a:	6879      	ldr	r1, [r7, #4]
 802298c:	68bb      	ldr	r3, [r7, #8]
 802298e:	68fa      	ldr	r2, [r7, #12]
 8022990:	9202      	str	r2, [sp, #8]
 8022992:	9301      	str	r3, [sp, #4]
 8022994:	2302      	movs	r3, #2
 8022996:	9300      	str	r3, [sp, #0]
 8022998:	2300      	movs	r3, #0
 802299a:	460a      	mov	r2, r1
 802299c:	4910      	ldr	r1, [pc, #64]	; (80229e0 <xTimerCreateTimerTask+0x84>)
 802299e:	4811      	ldr	r0, [pc, #68]	; (80229e4 <xTimerCreateTimerTask+0x88>)
 80229a0:	f7fe ff4c 	bl	802183c <xTaskCreateStatic>
 80229a4:	4603      	mov	r3, r0
 80229a6:	4a10      	ldr	r2, [pc, #64]	; (80229e8 <xTimerCreateTimerTask+0x8c>)
 80229a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80229aa:	4b0f      	ldr	r3, [pc, #60]	; (80229e8 <xTimerCreateTimerTask+0x8c>)
 80229ac:	681b      	ldr	r3, [r3, #0]
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	d001      	beq.n	80229b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80229b2:	2301      	movs	r3, #1
 80229b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80229b6:	697b      	ldr	r3, [r7, #20]
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d10a      	bne.n	80229d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80229bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229c0:	f383 8811 	msr	BASEPRI, r3
 80229c4:	f3bf 8f6f 	isb	sy
 80229c8:	f3bf 8f4f 	dsb	sy
 80229cc:	613b      	str	r3, [r7, #16]
}
 80229ce:	bf00      	nop
 80229d0:	e7fe      	b.n	80229d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80229d2:	697b      	ldr	r3, [r7, #20]
}
 80229d4:	4618      	mov	r0, r3
 80229d6:	3718      	adds	r7, #24
 80229d8:	46bd      	mov	sp, r7
 80229da:	bd80      	pop	{r7, pc}
 80229dc:	20002270 	.word	0x20002270
 80229e0:	080333ec 	.word	0x080333ec
 80229e4:	08022b21 	.word	0x08022b21
 80229e8:	20002274 	.word	0x20002274

080229ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80229ec:	b580      	push	{r7, lr}
 80229ee:	b08a      	sub	sp, #40	; 0x28
 80229f0:	af00      	add	r7, sp, #0
 80229f2:	60f8      	str	r0, [r7, #12]
 80229f4:	60b9      	str	r1, [r7, #8]
 80229f6:	607a      	str	r2, [r7, #4]
 80229f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80229fa:	2300      	movs	r3, #0
 80229fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80229fe:	68fb      	ldr	r3, [r7, #12]
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	d10a      	bne.n	8022a1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8022a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a08:	f383 8811 	msr	BASEPRI, r3
 8022a0c:	f3bf 8f6f 	isb	sy
 8022a10:	f3bf 8f4f 	dsb	sy
 8022a14:	623b      	str	r3, [r7, #32]
}
 8022a16:	bf00      	nop
 8022a18:	e7fe      	b.n	8022a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022a1a:	4b1a      	ldr	r3, [pc, #104]	; (8022a84 <xTimerGenericCommand+0x98>)
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	2b00      	cmp	r3, #0
 8022a20:	d02a      	beq.n	8022a78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022a22:	68bb      	ldr	r3, [r7, #8]
 8022a24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8022a2a:	68fb      	ldr	r3, [r7, #12]
 8022a2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8022a2e:	68bb      	ldr	r3, [r7, #8]
 8022a30:	2b05      	cmp	r3, #5
 8022a32:	dc18      	bgt.n	8022a66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022a34:	f7ff fdb4 	bl	80225a0 <xTaskGetSchedulerState>
 8022a38:	4603      	mov	r3, r0
 8022a3a:	2b02      	cmp	r3, #2
 8022a3c:	d109      	bne.n	8022a52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8022a3e:	4b11      	ldr	r3, [pc, #68]	; (8022a84 <xTimerGenericCommand+0x98>)
 8022a40:	6818      	ldr	r0, [r3, #0]
 8022a42:	f107 0110 	add.w	r1, r7, #16
 8022a46:	2300      	movs	r3, #0
 8022a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022a4a:	f7fe f84d 	bl	8020ae8 <xQueueGenericSend>
 8022a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8022a50:	e012      	b.n	8022a78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022a52:	4b0c      	ldr	r3, [pc, #48]	; (8022a84 <xTimerGenericCommand+0x98>)
 8022a54:	6818      	ldr	r0, [r3, #0]
 8022a56:	f107 0110 	add.w	r1, r7, #16
 8022a5a:	2300      	movs	r3, #0
 8022a5c:	2200      	movs	r2, #0
 8022a5e:	f7fe f843 	bl	8020ae8 <xQueueGenericSend>
 8022a62:	6278      	str	r0, [r7, #36]	; 0x24
 8022a64:	e008      	b.n	8022a78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022a66:	4b07      	ldr	r3, [pc, #28]	; (8022a84 <xTimerGenericCommand+0x98>)
 8022a68:	6818      	ldr	r0, [r3, #0]
 8022a6a:	f107 0110 	add.w	r1, r7, #16
 8022a6e:	2300      	movs	r3, #0
 8022a70:	683a      	ldr	r2, [r7, #0]
 8022a72:	f7fe f937 	bl	8020ce4 <xQueueGenericSendFromISR>
 8022a76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022a7a:	4618      	mov	r0, r3
 8022a7c:	3728      	adds	r7, #40	; 0x28
 8022a7e:	46bd      	mov	sp, r7
 8022a80:	bd80      	pop	{r7, pc}
 8022a82:	bf00      	nop
 8022a84:	20002270 	.word	0x20002270

08022a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8022a88:	b580      	push	{r7, lr}
 8022a8a:	b088      	sub	sp, #32
 8022a8c:	af02      	add	r7, sp, #8
 8022a8e:	6078      	str	r0, [r7, #4]
 8022a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022a92:	4b22      	ldr	r3, [pc, #136]	; (8022b1c <prvProcessExpiredTimer+0x94>)
 8022a94:	681b      	ldr	r3, [r3, #0]
 8022a96:	68db      	ldr	r3, [r3, #12]
 8022a98:	68db      	ldr	r3, [r3, #12]
 8022a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022a9c:	697b      	ldr	r3, [r7, #20]
 8022a9e:	3304      	adds	r3, #4
 8022aa0:	4618      	mov	r0, r3
 8022aa2:	f7fd fe03 	bl	80206ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022aa6:	697b      	ldr	r3, [r7, #20]
 8022aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022aac:	f003 0304 	and.w	r3, r3, #4
 8022ab0:	2b00      	cmp	r3, #0
 8022ab2:	d022      	beq.n	8022afa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8022ab4:	697b      	ldr	r3, [r7, #20]
 8022ab6:	699a      	ldr	r2, [r3, #24]
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	18d1      	adds	r1, r2, r3
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	683a      	ldr	r2, [r7, #0]
 8022ac0:	6978      	ldr	r0, [r7, #20]
 8022ac2:	f000 f8d1 	bl	8022c68 <prvInsertTimerInActiveList>
 8022ac6:	4603      	mov	r3, r0
 8022ac8:	2b00      	cmp	r3, #0
 8022aca:	d01f      	beq.n	8022b0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022acc:	2300      	movs	r3, #0
 8022ace:	9300      	str	r3, [sp, #0]
 8022ad0:	2300      	movs	r3, #0
 8022ad2:	687a      	ldr	r2, [r7, #4]
 8022ad4:	2100      	movs	r1, #0
 8022ad6:	6978      	ldr	r0, [r7, #20]
 8022ad8:	f7ff ff88 	bl	80229ec <xTimerGenericCommand>
 8022adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8022ade:	693b      	ldr	r3, [r7, #16]
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d113      	bne.n	8022b0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8022ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ae8:	f383 8811 	msr	BASEPRI, r3
 8022aec:	f3bf 8f6f 	isb	sy
 8022af0:	f3bf 8f4f 	dsb	sy
 8022af4:	60fb      	str	r3, [r7, #12]
}
 8022af6:	bf00      	nop
 8022af8:	e7fe      	b.n	8022af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022afa:	697b      	ldr	r3, [r7, #20]
 8022afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022b00:	f023 0301 	bic.w	r3, r3, #1
 8022b04:	b2da      	uxtb	r2, r3
 8022b06:	697b      	ldr	r3, [r7, #20]
 8022b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022b0c:	697b      	ldr	r3, [r7, #20]
 8022b0e:	6a1b      	ldr	r3, [r3, #32]
 8022b10:	6978      	ldr	r0, [r7, #20]
 8022b12:	4798      	blx	r3
}
 8022b14:	bf00      	nop
 8022b16:	3718      	adds	r7, #24
 8022b18:	46bd      	mov	sp, r7
 8022b1a:	bd80      	pop	{r7, pc}
 8022b1c:	20002268 	.word	0x20002268

08022b20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022b20:	b580      	push	{r7, lr}
 8022b22:	b084      	sub	sp, #16
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022b28:	f107 0308 	add.w	r3, r7, #8
 8022b2c:	4618      	mov	r0, r3
 8022b2e:	f000 f857 	bl	8022be0 <prvGetNextExpireTime>
 8022b32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022b34:	68bb      	ldr	r3, [r7, #8]
 8022b36:	4619      	mov	r1, r3
 8022b38:	68f8      	ldr	r0, [r7, #12]
 8022b3a:	f000 f803 	bl	8022b44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022b3e:	f000 f8d5 	bl	8022cec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022b42:	e7f1      	b.n	8022b28 <prvTimerTask+0x8>

08022b44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022b44:	b580      	push	{r7, lr}
 8022b46:	b084      	sub	sp, #16
 8022b48:	af00      	add	r7, sp, #0
 8022b4a:	6078      	str	r0, [r7, #4]
 8022b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022b4e:	f7ff f8d7 	bl	8021d00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022b52:	f107 0308 	add.w	r3, r7, #8
 8022b56:	4618      	mov	r0, r3
 8022b58:	f000 f866 	bl	8022c28 <prvSampleTimeNow>
 8022b5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022b5e:	68bb      	ldr	r3, [r7, #8]
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	d130      	bne.n	8022bc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022b64:	683b      	ldr	r3, [r7, #0]
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d10a      	bne.n	8022b80 <prvProcessTimerOrBlockTask+0x3c>
 8022b6a:	687a      	ldr	r2, [r7, #4]
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	429a      	cmp	r2, r3
 8022b70:	d806      	bhi.n	8022b80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022b72:	f7ff f8d3 	bl	8021d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8022b76:	68f9      	ldr	r1, [r7, #12]
 8022b78:	6878      	ldr	r0, [r7, #4]
 8022b7a:	f7ff ff85 	bl	8022a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022b7e:	e024      	b.n	8022bca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022b80:	683b      	ldr	r3, [r7, #0]
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	d008      	beq.n	8022b98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8022b86:	4b13      	ldr	r3, [pc, #76]	; (8022bd4 <prvProcessTimerOrBlockTask+0x90>)
 8022b88:	681b      	ldr	r3, [r3, #0]
 8022b8a:	681b      	ldr	r3, [r3, #0]
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d101      	bne.n	8022b94 <prvProcessTimerOrBlockTask+0x50>
 8022b90:	2301      	movs	r3, #1
 8022b92:	e000      	b.n	8022b96 <prvProcessTimerOrBlockTask+0x52>
 8022b94:	2300      	movs	r3, #0
 8022b96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022b98:	4b0f      	ldr	r3, [pc, #60]	; (8022bd8 <prvProcessTimerOrBlockTask+0x94>)
 8022b9a:	6818      	ldr	r0, [r3, #0]
 8022b9c:	687a      	ldr	r2, [r7, #4]
 8022b9e:	68fb      	ldr	r3, [r7, #12]
 8022ba0:	1ad3      	subs	r3, r2, r3
 8022ba2:	683a      	ldr	r2, [r7, #0]
 8022ba4:	4619      	mov	r1, r3
 8022ba6:	f7fe fe15 	bl	80217d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022baa:	f7ff f8b7 	bl	8021d1c <xTaskResumeAll>
 8022bae:	4603      	mov	r3, r0
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	d10a      	bne.n	8022bca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022bb4:	4b09      	ldr	r3, [pc, #36]	; (8022bdc <prvProcessTimerOrBlockTask+0x98>)
 8022bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022bba:	601a      	str	r2, [r3, #0]
 8022bbc:	f3bf 8f4f 	dsb	sy
 8022bc0:	f3bf 8f6f 	isb	sy
}
 8022bc4:	e001      	b.n	8022bca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8022bc6:	f7ff f8a9 	bl	8021d1c <xTaskResumeAll>
}
 8022bca:	bf00      	nop
 8022bcc:	3710      	adds	r7, #16
 8022bce:	46bd      	mov	sp, r7
 8022bd0:	bd80      	pop	{r7, pc}
 8022bd2:	bf00      	nop
 8022bd4:	2000226c 	.word	0x2000226c
 8022bd8:	20002270 	.word	0x20002270
 8022bdc:	e000ed04 	.word	0xe000ed04

08022be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022be0:	b480      	push	{r7}
 8022be2:	b085      	sub	sp, #20
 8022be4:	af00      	add	r7, sp, #0
 8022be6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022be8:	4b0e      	ldr	r3, [pc, #56]	; (8022c24 <prvGetNextExpireTime+0x44>)
 8022bea:	681b      	ldr	r3, [r3, #0]
 8022bec:	681b      	ldr	r3, [r3, #0]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d101      	bne.n	8022bf6 <prvGetNextExpireTime+0x16>
 8022bf2:	2201      	movs	r2, #1
 8022bf4:	e000      	b.n	8022bf8 <prvGetNextExpireTime+0x18>
 8022bf6:	2200      	movs	r2, #0
 8022bf8:	687b      	ldr	r3, [r7, #4]
 8022bfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d105      	bne.n	8022c10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022c04:	4b07      	ldr	r3, [pc, #28]	; (8022c24 <prvGetNextExpireTime+0x44>)
 8022c06:	681b      	ldr	r3, [r3, #0]
 8022c08:	68db      	ldr	r3, [r3, #12]
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	60fb      	str	r3, [r7, #12]
 8022c0e:	e001      	b.n	8022c14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022c10:	2300      	movs	r3, #0
 8022c12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8022c14:	68fb      	ldr	r3, [r7, #12]
}
 8022c16:	4618      	mov	r0, r3
 8022c18:	3714      	adds	r7, #20
 8022c1a:	46bd      	mov	sp, r7
 8022c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c20:	4770      	bx	lr
 8022c22:	bf00      	nop
 8022c24:	20002268 	.word	0x20002268

08022c28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8022c28:	b580      	push	{r7, lr}
 8022c2a:	b084      	sub	sp, #16
 8022c2c:	af00      	add	r7, sp, #0
 8022c2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022c30:	f7ff f912 	bl	8021e58 <xTaskGetTickCount>
 8022c34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8022c36:	4b0b      	ldr	r3, [pc, #44]	; (8022c64 <prvSampleTimeNow+0x3c>)
 8022c38:	681b      	ldr	r3, [r3, #0]
 8022c3a:	68fa      	ldr	r2, [r7, #12]
 8022c3c:	429a      	cmp	r2, r3
 8022c3e:	d205      	bcs.n	8022c4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022c40:	f000 f936 	bl	8022eb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	2201      	movs	r2, #1
 8022c48:	601a      	str	r2, [r3, #0]
 8022c4a:	e002      	b.n	8022c52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	2200      	movs	r2, #0
 8022c50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022c52:	4a04      	ldr	r2, [pc, #16]	; (8022c64 <prvSampleTimeNow+0x3c>)
 8022c54:	68fb      	ldr	r3, [r7, #12]
 8022c56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022c58:	68fb      	ldr	r3, [r7, #12]
}
 8022c5a:	4618      	mov	r0, r3
 8022c5c:	3710      	adds	r7, #16
 8022c5e:	46bd      	mov	sp, r7
 8022c60:	bd80      	pop	{r7, pc}
 8022c62:	bf00      	nop
 8022c64:	20002278 	.word	0x20002278

08022c68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022c68:	b580      	push	{r7, lr}
 8022c6a:	b086      	sub	sp, #24
 8022c6c:	af00      	add	r7, sp, #0
 8022c6e:	60f8      	str	r0, [r7, #12]
 8022c70:	60b9      	str	r1, [r7, #8]
 8022c72:	607a      	str	r2, [r7, #4]
 8022c74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8022c76:	2300      	movs	r3, #0
 8022c78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022c7a:	68fb      	ldr	r3, [r7, #12]
 8022c7c:	68ba      	ldr	r2, [r7, #8]
 8022c7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022c80:	68fb      	ldr	r3, [r7, #12]
 8022c82:	68fa      	ldr	r2, [r7, #12]
 8022c84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8022c86:	68ba      	ldr	r2, [r7, #8]
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	429a      	cmp	r2, r3
 8022c8c:	d812      	bhi.n	8022cb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022c8e:	687a      	ldr	r2, [r7, #4]
 8022c90:	683b      	ldr	r3, [r7, #0]
 8022c92:	1ad2      	subs	r2, r2, r3
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	699b      	ldr	r3, [r3, #24]
 8022c98:	429a      	cmp	r2, r3
 8022c9a:	d302      	bcc.n	8022ca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022c9c:	2301      	movs	r3, #1
 8022c9e:	617b      	str	r3, [r7, #20]
 8022ca0:	e01b      	b.n	8022cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8022ca2:	4b10      	ldr	r3, [pc, #64]	; (8022ce4 <prvInsertTimerInActiveList+0x7c>)
 8022ca4:	681a      	ldr	r2, [r3, #0]
 8022ca6:	68fb      	ldr	r3, [r7, #12]
 8022ca8:	3304      	adds	r3, #4
 8022caa:	4619      	mov	r1, r3
 8022cac:	4610      	mov	r0, r2
 8022cae:	f7fd fcc4 	bl	802063a <vListInsert>
 8022cb2:	e012      	b.n	8022cda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8022cb4:	687a      	ldr	r2, [r7, #4]
 8022cb6:	683b      	ldr	r3, [r7, #0]
 8022cb8:	429a      	cmp	r2, r3
 8022cba:	d206      	bcs.n	8022cca <prvInsertTimerInActiveList+0x62>
 8022cbc:	68ba      	ldr	r2, [r7, #8]
 8022cbe:	683b      	ldr	r3, [r7, #0]
 8022cc0:	429a      	cmp	r2, r3
 8022cc2:	d302      	bcc.n	8022cca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8022cc4:	2301      	movs	r3, #1
 8022cc6:	617b      	str	r3, [r7, #20]
 8022cc8:	e007      	b.n	8022cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022cca:	4b07      	ldr	r3, [pc, #28]	; (8022ce8 <prvInsertTimerInActiveList+0x80>)
 8022ccc:	681a      	ldr	r2, [r3, #0]
 8022cce:	68fb      	ldr	r3, [r7, #12]
 8022cd0:	3304      	adds	r3, #4
 8022cd2:	4619      	mov	r1, r3
 8022cd4:	4610      	mov	r0, r2
 8022cd6:	f7fd fcb0 	bl	802063a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8022cda:	697b      	ldr	r3, [r7, #20]
}
 8022cdc:	4618      	mov	r0, r3
 8022cde:	3718      	adds	r7, #24
 8022ce0:	46bd      	mov	sp, r7
 8022ce2:	bd80      	pop	{r7, pc}
 8022ce4:	2000226c 	.word	0x2000226c
 8022ce8:	20002268 	.word	0x20002268

08022cec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8022cec:	b580      	push	{r7, lr}
 8022cee:	b08e      	sub	sp, #56	; 0x38
 8022cf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022cf2:	e0ca      	b.n	8022e8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	da18      	bge.n	8022d2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8022cfa:	1d3b      	adds	r3, r7, #4
 8022cfc:	3304      	adds	r3, #4
 8022cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8022d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d10a      	bne.n	8022d1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8022d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d0a:	f383 8811 	msr	BASEPRI, r3
 8022d0e:	f3bf 8f6f 	isb	sy
 8022d12:	f3bf 8f4f 	dsb	sy
 8022d16:	61fb      	str	r3, [r7, #28]
}
 8022d18:	bf00      	nop
 8022d1a:	e7fe      	b.n	8022d1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8022d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d1e:	681b      	ldr	r3, [r3, #0]
 8022d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022d22:	6850      	ldr	r0, [r2, #4]
 8022d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022d26:	6892      	ldr	r2, [r2, #8]
 8022d28:	4611      	mov	r1, r2
 8022d2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	f2c0 80ab 	blt.w	8022e8a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8022d34:	68fb      	ldr	r3, [r7, #12]
 8022d36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8022d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d3a:	695b      	ldr	r3, [r3, #20]
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d004      	beq.n	8022d4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d42:	3304      	adds	r3, #4
 8022d44:	4618      	mov	r0, r3
 8022d46:	f7fd fcb1 	bl	80206ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022d4a:	463b      	mov	r3, r7
 8022d4c:	4618      	mov	r0, r3
 8022d4e:	f7ff ff6b 	bl	8022c28 <prvSampleTimeNow>
 8022d52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8022d54:	687b      	ldr	r3, [r7, #4]
 8022d56:	2b09      	cmp	r3, #9
 8022d58:	f200 8096 	bhi.w	8022e88 <prvProcessReceivedCommands+0x19c>
 8022d5c:	a201      	add	r2, pc, #4	; (adr r2, 8022d64 <prvProcessReceivedCommands+0x78>)
 8022d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022d62:	bf00      	nop
 8022d64:	08022d8d 	.word	0x08022d8d
 8022d68:	08022d8d 	.word	0x08022d8d
 8022d6c:	08022d8d 	.word	0x08022d8d
 8022d70:	08022e01 	.word	0x08022e01
 8022d74:	08022e15 	.word	0x08022e15
 8022d78:	08022e5f 	.word	0x08022e5f
 8022d7c:	08022d8d 	.word	0x08022d8d
 8022d80:	08022d8d 	.word	0x08022d8d
 8022d84:	08022e01 	.word	0x08022e01
 8022d88:	08022e15 	.word	0x08022e15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022d92:	f043 0301 	orr.w	r3, r3, #1
 8022d96:	b2da      	uxtb	r2, r3
 8022d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8022d9e:	68ba      	ldr	r2, [r7, #8]
 8022da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022da2:	699b      	ldr	r3, [r3, #24]
 8022da4:	18d1      	adds	r1, r2, r3
 8022da6:	68bb      	ldr	r3, [r7, #8]
 8022da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022dac:	f7ff ff5c 	bl	8022c68 <prvInsertTimerInActiveList>
 8022db0:	4603      	mov	r3, r0
 8022db2:	2b00      	cmp	r3, #0
 8022db4:	d069      	beq.n	8022e8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022db8:	6a1b      	ldr	r3, [r3, #32]
 8022dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022dbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022dc4:	f003 0304 	and.w	r3, r3, #4
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d05e      	beq.n	8022e8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8022dcc:	68ba      	ldr	r2, [r7, #8]
 8022dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dd0:	699b      	ldr	r3, [r3, #24]
 8022dd2:	441a      	add	r2, r3
 8022dd4:	2300      	movs	r3, #0
 8022dd6:	9300      	str	r3, [sp, #0]
 8022dd8:	2300      	movs	r3, #0
 8022dda:	2100      	movs	r1, #0
 8022ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022dde:	f7ff fe05 	bl	80229ec <xTimerGenericCommand>
 8022de2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8022de4:	6a3b      	ldr	r3, [r7, #32]
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	d14f      	bne.n	8022e8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8022dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022dee:	f383 8811 	msr	BASEPRI, r3
 8022df2:	f3bf 8f6f 	isb	sy
 8022df6:	f3bf 8f4f 	dsb	sy
 8022dfa:	61bb      	str	r3, [r7, #24]
}
 8022dfc:	bf00      	nop
 8022dfe:	e7fe      	b.n	8022dfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e06:	f023 0301 	bic.w	r3, r3, #1
 8022e0a:	b2da      	uxtb	r2, r3
 8022e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8022e12:	e03a      	b.n	8022e8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e1a:	f043 0301 	orr.w	r3, r3, #1
 8022e1e:	b2da      	uxtb	r2, r3
 8022e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8022e26:	68ba      	ldr	r2, [r7, #8]
 8022e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8022e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e2e:	699b      	ldr	r3, [r3, #24]
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	d10a      	bne.n	8022e4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8022e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e38:	f383 8811 	msr	BASEPRI, r3
 8022e3c:	f3bf 8f6f 	isb	sy
 8022e40:	f3bf 8f4f 	dsb	sy
 8022e44:	617b      	str	r3, [r7, #20]
}
 8022e46:	bf00      	nop
 8022e48:	e7fe      	b.n	8022e48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8022e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e4c:	699a      	ldr	r2, [r3, #24]
 8022e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e50:	18d1      	adds	r1, r2, r3
 8022e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022e58:	f7ff ff06 	bl	8022c68 <prvInsertTimerInActiveList>
					break;
 8022e5c:	e015      	b.n	8022e8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8022e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e64:	f003 0302 	and.w	r3, r3, #2
 8022e68:	2b00      	cmp	r3, #0
 8022e6a:	d103      	bne.n	8022e74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8022e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022e6e:	f000 fb59 	bl	8023524 <vPortFree>
 8022e72:	e00a      	b.n	8022e8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e7a:	f023 0301 	bic.w	r3, r3, #1
 8022e7e:	b2da      	uxtb	r2, r3
 8022e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8022e86:	e000      	b.n	8022e8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8022e88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022e8a:	4b08      	ldr	r3, [pc, #32]	; (8022eac <prvProcessReceivedCommands+0x1c0>)
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	1d39      	adds	r1, r7, #4
 8022e90:	2200      	movs	r2, #0
 8022e92:	4618      	mov	r0, r3
 8022e94:	f7fd ffc2 	bl	8020e1c <xQueueReceive>
 8022e98:	4603      	mov	r3, r0
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	f47f af2a 	bne.w	8022cf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8022ea0:	bf00      	nop
 8022ea2:	bf00      	nop
 8022ea4:	3730      	adds	r7, #48	; 0x30
 8022ea6:	46bd      	mov	sp, r7
 8022ea8:	bd80      	pop	{r7, pc}
 8022eaa:	bf00      	nop
 8022eac:	20002270 	.word	0x20002270

08022eb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8022eb0:	b580      	push	{r7, lr}
 8022eb2:	b088      	sub	sp, #32
 8022eb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022eb6:	e048      	b.n	8022f4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022eb8:	4b2d      	ldr	r3, [pc, #180]	; (8022f70 <prvSwitchTimerLists+0xc0>)
 8022eba:	681b      	ldr	r3, [r3, #0]
 8022ebc:	68db      	ldr	r3, [r3, #12]
 8022ebe:	681b      	ldr	r3, [r3, #0]
 8022ec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022ec2:	4b2b      	ldr	r3, [pc, #172]	; (8022f70 <prvSwitchTimerLists+0xc0>)
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	68db      	ldr	r3, [r3, #12]
 8022ec8:	68db      	ldr	r3, [r3, #12]
 8022eca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022ecc:	68fb      	ldr	r3, [r7, #12]
 8022ece:	3304      	adds	r3, #4
 8022ed0:	4618      	mov	r0, r3
 8022ed2:	f7fd fbeb 	bl	80206ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022ed6:	68fb      	ldr	r3, [r7, #12]
 8022ed8:	6a1b      	ldr	r3, [r3, #32]
 8022eda:	68f8      	ldr	r0, [r7, #12]
 8022edc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022ede:	68fb      	ldr	r3, [r7, #12]
 8022ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022ee4:	f003 0304 	and.w	r3, r3, #4
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d02e      	beq.n	8022f4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8022eec:	68fb      	ldr	r3, [r7, #12]
 8022eee:	699b      	ldr	r3, [r3, #24]
 8022ef0:	693a      	ldr	r2, [r7, #16]
 8022ef2:	4413      	add	r3, r2
 8022ef4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8022ef6:	68ba      	ldr	r2, [r7, #8]
 8022ef8:	693b      	ldr	r3, [r7, #16]
 8022efa:	429a      	cmp	r2, r3
 8022efc:	d90e      	bls.n	8022f1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8022efe:	68fb      	ldr	r3, [r7, #12]
 8022f00:	68ba      	ldr	r2, [r7, #8]
 8022f02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022f04:	68fb      	ldr	r3, [r7, #12]
 8022f06:	68fa      	ldr	r2, [r7, #12]
 8022f08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022f0a:	4b19      	ldr	r3, [pc, #100]	; (8022f70 <prvSwitchTimerLists+0xc0>)
 8022f0c:	681a      	ldr	r2, [r3, #0]
 8022f0e:	68fb      	ldr	r3, [r7, #12]
 8022f10:	3304      	adds	r3, #4
 8022f12:	4619      	mov	r1, r3
 8022f14:	4610      	mov	r0, r2
 8022f16:	f7fd fb90 	bl	802063a <vListInsert>
 8022f1a:	e016      	b.n	8022f4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022f1c:	2300      	movs	r3, #0
 8022f1e:	9300      	str	r3, [sp, #0]
 8022f20:	2300      	movs	r3, #0
 8022f22:	693a      	ldr	r2, [r7, #16]
 8022f24:	2100      	movs	r1, #0
 8022f26:	68f8      	ldr	r0, [r7, #12]
 8022f28:	f7ff fd60 	bl	80229ec <xTimerGenericCommand>
 8022f2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	d10a      	bne.n	8022f4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8022f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022f38:	f383 8811 	msr	BASEPRI, r3
 8022f3c:	f3bf 8f6f 	isb	sy
 8022f40:	f3bf 8f4f 	dsb	sy
 8022f44:	603b      	str	r3, [r7, #0]
}
 8022f46:	bf00      	nop
 8022f48:	e7fe      	b.n	8022f48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022f4a:	4b09      	ldr	r3, [pc, #36]	; (8022f70 <prvSwitchTimerLists+0xc0>)
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	681b      	ldr	r3, [r3, #0]
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	d1b1      	bne.n	8022eb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8022f54:	4b06      	ldr	r3, [pc, #24]	; (8022f70 <prvSwitchTimerLists+0xc0>)
 8022f56:	681b      	ldr	r3, [r3, #0]
 8022f58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8022f5a:	4b06      	ldr	r3, [pc, #24]	; (8022f74 <prvSwitchTimerLists+0xc4>)
 8022f5c:	681b      	ldr	r3, [r3, #0]
 8022f5e:	4a04      	ldr	r2, [pc, #16]	; (8022f70 <prvSwitchTimerLists+0xc0>)
 8022f60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8022f62:	4a04      	ldr	r2, [pc, #16]	; (8022f74 <prvSwitchTimerLists+0xc4>)
 8022f64:	697b      	ldr	r3, [r7, #20]
 8022f66:	6013      	str	r3, [r2, #0]
}
 8022f68:	bf00      	nop
 8022f6a:	3718      	adds	r7, #24
 8022f6c:	46bd      	mov	sp, r7
 8022f6e:	bd80      	pop	{r7, pc}
 8022f70:	20002268 	.word	0x20002268
 8022f74:	2000226c 	.word	0x2000226c

08022f78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8022f78:	b580      	push	{r7, lr}
 8022f7a:	b082      	sub	sp, #8
 8022f7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8022f7e:	f000 f969 	bl	8023254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8022f82:	4b15      	ldr	r3, [pc, #84]	; (8022fd8 <prvCheckForValidListAndQueue+0x60>)
 8022f84:	681b      	ldr	r3, [r3, #0]
 8022f86:	2b00      	cmp	r3, #0
 8022f88:	d120      	bne.n	8022fcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8022f8a:	4814      	ldr	r0, [pc, #80]	; (8022fdc <prvCheckForValidListAndQueue+0x64>)
 8022f8c:	f7fd fb04 	bl	8020598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8022f90:	4813      	ldr	r0, [pc, #76]	; (8022fe0 <prvCheckForValidListAndQueue+0x68>)
 8022f92:	f7fd fb01 	bl	8020598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8022f96:	4b13      	ldr	r3, [pc, #76]	; (8022fe4 <prvCheckForValidListAndQueue+0x6c>)
 8022f98:	4a10      	ldr	r2, [pc, #64]	; (8022fdc <prvCheckForValidListAndQueue+0x64>)
 8022f9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8022f9c:	4b12      	ldr	r3, [pc, #72]	; (8022fe8 <prvCheckForValidListAndQueue+0x70>)
 8022f9e:	4a10      	ldr	r2, [pc, #64]	; (8022fe0 <prvCheckForValidListAndQueue+0x68>)
 8022fa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8022fa2:	2300      	movs	r3, #0
 8022fa4:	9300      	str	r3, [sp, #0]
 8022fa6:	4b11      	ldr	r3, [pc, #68]	; (8022fec <prvCheckForValidListAndQueue+0x74>)
 8022fa8:	4a11      	ldr	r2, [pc, #68]	; (8022ff0 <prvCheckForValidListAndQueue+0x78>)
 8022faa:	2110      	movs	r1, #16
 8022fac:	200a      	movs	r0, #10
 8022fae:	f7fd fc0f 	bl	80207d0 <xQueueGenericCreateStatic>
 8022fb2:	4603      	mov	r3, r0
 8022fb4:	4a08      	ldr	r2, [pc, #32]	; (8022fd8 <prvCheckForValidListAndQueue+0x60>)
 8022fb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8022fb8:	4b07      	ldr	r3, [pc, #28]	; (8022fd8 <prvCheckForValidListAndQueue+0x60>)
 8022fba:	681b      	ldr	r3, [r3, #0]
 8022fbc:	2b00      	cmp	r3, #0
 8022fbe:	d005      	beq.n	8022fcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8022fc0:	4b05      	ldr	r3, [pc, #20]	; (8022fd8 <prvCheckForValidListAndQueue+0x60>)
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	490b      	ldr	r1, [pc, #44]	; (8022ff4 <prvCheckForValidListAndQueue+0x7c>)
 8022fc6:	4618      	mov	r0, r3
 8022fc8:	f7fe fbda 	bl	8021780 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022fcc:	f000 f972 	bl	80232b4 <vPortExitCritical>
}
 8022fd0:	bf00      	nop
 8022fd2:	46bd      	mov	sp, r7
 8022fd4:	bd80      	pop	{r7, pc}
 8022fd6:	bf00      	nop
 8022fd8:	20002270 	.word	0x20002270
 8022fdc:	20002240 	.word	0x20002240
 8022fe0:	20002254 	.word	0x20002254
 8022fe4:	20002268 	.word	0x20002268
 8022fe8:	2000226c 	.word	0x2000226c
 8022fec:	2000231c 	.word	0x2000231c
 8022ff0:	2000227c 	.word	0x2000227c
 8022ff4:	080333f4 	.word	0x080333f4

08022ff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8022ff8:	b480      	push	{r7}
 8022ffa:	b085      	sub	sp, #20
 8022ffc:	af00      	add	r7, sp, #0
 8022ffe:	60f8      	str	r0, [r7, #12]
 8023000:	60b9      	str	r1, [r7, #8]
 8023002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8023004:	68fb      	ldr	r3, [r7, #12]
 8023006:	3b04      	subs	r3, #4
 8023008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802300a:	68fb      	ldr	r3, [r7, #12]
 802300c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8023010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8023012:	68fb      	ldr	r3, [r7, #12]
 8023014:	3b04      	subs	r3, #4
 8023016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8023018:	68bb      	ldr	r3, [r7, #8]
 802301a:	f023 0201 	bic.w	r2, r3, #1
 802301e:	68fb      	ldr	r3, [r7, #12]
 8023020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8023022:	68fb      	ldr	r3, [r7, #12]
 8023024:	3b04      	subs	r3, #4
 8023026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8023028:	4a0c      	ldr	r2, [pc, #48]	; (802305c <pxPortInitialiseStack+0x64>)
 802302a:	68fb      	ldr	r3, [r7, #12]
 802302c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802302e:	68fb      	ldr	r3, [r7, #12]
 8023030:	3b14      	subs	r3, #20
 8023032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8023034:	687a      	ldr	r2, [r7, #4]
 8023036:	68fb      	ldr	r3, [r7, #12]
 8023038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802303a:	68fb      	ldr	r3, [r7, #12]
 802303c:	3b04      	subs	r3, #4
 802303e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8023040:	68fb      	ldr	r3, [r7, #12]
 8023042:	f06f 0202 	mvn.w	r2, #2
 8023046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8023048:	68fb      	ldr	r3, [r7, #12]
 802304a:	3b20      	subs	r3, #32
 802304c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802304e:	68fb      	ldr	r3, [r7, #12]
}
 8023050:	4618      	mov	r0, r3
 8023052:	3714      	adds	r7, #20
 8023054:	46bd      	mov	sp, r7
 8023056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802305a:	4770      	bx	lr
 802305c:	08023061 	.word	0x08023061

08023060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8023060:	b480      	push	{r7}
 8023062:	b085      	sub	sp, #20
 8023064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8023066:	2300      	movs	r3, #0
 8023068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802306a:	4b12      	ldr	r3, [pc, #72]	; (80230b4 <prvTaskExitError+0x54>)
 802306c:	681b      	ldr	r3, [r3, #0]
 802306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023072:	d00a      	beq.n	802308a <prvTaskExitError+0x2a>
	__asm volatile
 8023074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023078:	f383 8811 	msr	BASEPRI, r3
 802307c:	f3bf 8f6f 	isb	sy
 8023080:	f3bf 8f4f 	dsb	sy
 8023084:	60fb      	str	r3, [r7, #12]
}
 8023086:	bf00      	nop
 8023088:	e7fe      	b.n	8023088 <prvTaskExitError+0x28>
	__asm volatile
 802308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802308e:	f383 8811 	msr	BASEPRI, r3
 8023092:	f3bf 8f6f 	isb	sy
 8023096:	f3bf 8f4f 	dsb	sy
 802309a:	60bb      	str	r3, [r7, #8]
}
 802309c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802309e:	bf00      	nop
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	d0fc      	beq.n	80230a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80230a6:	bf00      	nop
 80230a8:	bf00      	nop
 80230aa:	3714      	adds	r7, #20
 80230ac:	46bd      	mov	sp, r7
 80230ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230b2:	4770      	bx	lr
 80230b4:	20000128 	.word	0x20000128
	...

080230c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80230c0:	4b07      	ldr	r3, [pc, #28]	; (80230e0 <pxCurrentTCBConst2>)
 80230c2:	6819      	ldr	r1, [r3, #0]
 80230c4:	6808      	ldr	r0, [r1, #0]
 80230c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230ca:	f380 8809 	msr	PSP, r0
 80230ce:	f3bf 8f6f 	isb	sy
 80230d2:	f04f 0000 	mov.w	r0, #0
 80230d6:	f380 8811 	msr	BASEPRI, r0
 80230da:	4770      	bx	lr
 80230dc:	f3af 8000 	nop.w

080230e0 <pxCurrentTCBConst2>:
 80230e0:	20001d38 	.word	0x20001d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80230e4:	bf00      	nop
 80230e6:	bf00      	nop

080230e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80230e8:	4808      	ldr	r0, [pc, #32]	; (802310c <prvPortStartFirstTask+0x24>)
 80230ea:	6800      	ldr	r0, [r0, #0]
 80230ec:	6800      	ldr	r0, [r0, #0]
 80230ee:	f380 8808 	msr	MSP, r0
 80230f2:	f04f 0000 	mov.w	r0, #0
 80230f6:	f380 8814 	msr	CONTROL, r0
 80230fa:	b662      	cpsie	i
 80230fc:	b661      	cpsie	f
 80230fe:	f3bf 8f4f 	dsb	sy
 8023102:	f3bf 8f6f 	isb	sy
 8023106:	df00      	svc	0
 8023108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802310a:	bf00      	nop
 802310c:	e000ed08 	.word	0xe000ed08

08023110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8023110:	b580      	push	{r7, lr}
 8023112:	b086      	sub	sp, #24
 8023114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8023116:	4b46      	ldr	r3, [pc, #280]	; (8023230 <xPortStartScheduler+0x120>)
 8023118:	681b      	ldr	r3, [r3, #0]
 802311a:	4a46      	ldr	r2, [pc, #280]	; (8023234 <xPortStartScheduler+0x124>)
 802311c:	4293      	cmp	r3, r2
 802311e:	d10a      	bne.n	8023136 <xPortStartScheduler+0x26>
	__asm volatile
 8023120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023124:	f383 8811 	msr	BASEPRI, r3
 8023128:	f3bf 8f6f 	isb	sy
 802312c:	f3bf 8f4f 	dsb	sy
 8023130:	613b      	str	r3, [r7, #16]
}
 8023132:	bf00      	nop
 8023134:	e7fe      	b.n	8023134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8023136:	4b3e      	ldr	r3, [pc, #248]	; (8023230 <xPortStartScheduler+0x120>)
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	4a3f      	ldr	r2, [pc, #252]	; (8023238 <xPortStartScheduler+0x128>)
 802313c:	4293      	cmp	r3, r2
 802313e:	d10a      	bne.n	8023156 <xPortStartScheduler+0x46>
	__asm volatile
 8023140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023144:	f383 8811 	msr	BASEPRI, r3
 8023148:	f3bf 8f6f 	isb	sy
 802314c:	f3bf 8f4f 	dsb	sy
 8023150:	60fb      	str	r3, [r7, #12]
}
 8023152:	bf00      	nop
 8023154:	e7fe      	b.n	8023154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8023156:	4b39      	ldr	r3, [pc, #228]	; (802323c <xPortStartScheduler+0x12c>)
 8023158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802315a:	697b      	ldr	r3, [r7, #20]
 802315c:	781b      	ldrb	r3, [r3, #0]
 802315e:	b2db      	uxtb	r3, r3
 8023160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8023162:	697b      	ldr	r3, [r7, #20]
 8023164:	22ff      	movs	r2, #255	; 0xff
 8023166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8023168:	697b      	ldr	r3, [r7, #20]
 802316a:	781b      	ldrb	r3, [r3, #0]
 802316c:	b2db      	uxtb	r3, r3
 802316e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8023170:	78fb      	ldrb	r3, [r7, #3]
 8023172:	b2db      	uxtb	r3, r3
 8023174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8023178:	b2da      	uxtb	r2, r3
 802317a:	4b31      	ldr	r3, [pc, #196]	; (8023240 <xPortStartScheduler+0x130>)
 802317c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802317e:	4b31      	ldr	r3, [pc, #196]	; (8023244 <xPortStartScheduler+0x134>)
 8023180:	2207      	movs	r2, #7
 8023182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8023184:	e009      	b.n	802319a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8023186:	4b2f      	ldr	r3, [pc, #188]	; (8023244 <xPortStartScheduler+0x134>)
 8023188:	681b      	ldr	r3, [r3, #0]
 802318a:	3b01      	subs	r3, #1
 802318c:	4a2d      	ldr	r2, [pc, #180]	; (8023244 <xPortStartScheduler+0x134>)
 802318e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8023190:	78fb      	ldrb	r3, [r7, #3]
 8023192:	b2db      	uxtb	r3, r3
 8023194:	005b      	lsls	r3, r3, #1
 8023196:	b2db      	uxtb	r3, r3
 8023198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802319a:	78fb      	ldrb	r3, [r7, #3]
 802319c:	b2db      	uxtb	r3, r3
 802319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80231a2:	2b80      	cmp	r3, #128	; 0x80
 80231a4:	d0ef      	beq.n	8023186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80231a6:	4b27      	ldr	r3, [pc, #156]	; (8023244 <xPortStartScheduler+0x134>)
 80231a8:	681b      	ldr	r3, [r3, #0]
 80231aa:	f1c3 0307 	rsb	r3, r3, #7
 80231ae:	2b04      	cmp	r3, #4
 80231b0:	d00a      	beq.n	80231c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80231b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80231b6:	f383 8811 	msr	BASEPRI, r3
 80231ba:	f3bf 8f6f 	isb	sy
 80231be:	f3bf 8f4f 	dsb	sy
 80231c2:	60bb      	str	r3, [r7, #8]
}
 80231c4:	bf00      	nop
 80231c6:	e7fe      	b.n	80231c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80231c8:	4b1e      	ldr	r3, [pc, #120]	; (8023244 <xPortStartScheduler+0x134>)
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	021b      	lsls	r3, r3, #8
 80231ce:	4a1d      	ldr	r2, [pc, #116]	; (8023244 <xPortStartScheduler+0x134>)
 80231d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80231d2:	4b1c      	ldr	r3, [pc, #112]	; (8023244 <xPortStartScheduler+0x134>)
 80231d4:	681b      	ldr	r3, [r3, #0]
 80231d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80231da:	4a1a      	ldr	r2, [pc, #104]	; (8023244 <xPortStartScheduler+0x134>)
 80231dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	b2da      	uxtb	r2, r3
 80231e2:	697b      	ldr	r3, [r7, #20]
 80231e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80231e6:	4b18      	ldr	r3, [pc, #96]	; (8023248 <xPortStartScheduler+0x138>)
 80231e8:	681b      	ldr	r3, [r3, #0]
 80231ea:	4a17      	ldr	r2, [pc, #92]	; (8023248 <xPortStartScheduler+0x138>)
 80231ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80231f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80231f2:	4b15      	ldr	r3, [pc, #84]	; (8023248 <xPortStartScheduler+0x138>)
 80231f4:	681b      	ldr	r3, [r3, #0]
 80231f6:	4a14      	ldr	r2, [pc, #80]	; (8023248 <xPortStartScheduler+0x138>)
 80231f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80231fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80231fe:	f000 f8dd 	bl	80233bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8023202:	4b12      	ldr	r3, [pc, #72]	; (802324c <xPortStartScheduler+0x13c>)
 8023204:	2200      	movs	r2, #0
 8023206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8023208:	f000 f8fc 	bl	8023404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802320c:	4b10      	ldr	r3, [pc, #64]	; (8023250 <xPortStartScheduler+0x140>)
 802320e:	681b      	ldr	r3, [r3, #0]
 8023210:	4a0f      	ldr	r2, [pc, #60]	; (8023250 <xPortStartScheduler+0x140>)
 8023212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8023216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8023218:	f7ff ff66 	bl	80230e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802321c:	f7fe fee6 	bl	8021fec <vTaskSwitchContext>
	prvTaskExitError();
 8023220:	f7ff ff1e 	bl	8023060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8023224:	2300      	movs	r3, #0
}
 8023226:	4618      	mov	r0, r3
 8023228:	3718      	adds	r7, #24
 802322a:	46bd      	mov	sp, r7
 802322c:	bd80      	pop	{r7, pc}
 802322e:	bf00      	nop
 8023230:	e000ed00 	.word	0xe000ed00
 8023234:	410fc271 	.word	0x410fc271
 8023238:	410fc270 	.word	0x410fc270
 802323c:	e000e400 	.word	0xe000e400
 8023240:	2000236c 	.word	0x2000236c
 8023244:	20002370 	.word	0x20002370
 8023248:	e000ed20 	.word	0xe000ed20
 802324c:	20000128 	.word	0x20000128
 8023250:	e000ef34 	.word	0xe000ef34

08023254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8023254:	b480      	push	{r7}
 8023256:	b083      	sub	sp, #12
 8023258:	af00      	add	r7, sp, #0
	__asm volatile
 802325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802325e:	f383 8811 	msr	BASEPRI, r3
 8023262:	f3bf 8f6f 	isb	sy
 8023266:	f3bf 8f4f 	dsb	sy
 802326a:	607b      	str	r3, [r7, #4]
}
 802326c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802326e:	4b0f      	ldr	r3, [pc, #60]	; (80232ac <vPortEnterCritical+0x58>)
 8023270:	681b      	ldr	r3, [r3, #0]
 8023272:	3301      	adds	r3, #1
 8023274:	4a0d      	ldr	r2, [pc, #52]	; (80232ac <vPortEnterCritical+0x58>)
 8023276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8023278:	4b0c      	ldr	r3, [pc, #48]	; (80232ac <vPortEnterCritical+0x58>)
 802327a:	681b      	ldr	r3, [r3, #0]
 802327c:	2b01      	cmp	r3, #1
 802327e:	d10f      	bne.n	80232a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8023280:	4b0b      	ldr	r3, [pc, #44]	; (80232b0 <vPortEnterCritical+0x5c>)
 8023282:	681b      	ldr	r3, [r3, #0]
 8023284:	b2db      	uxtb	r3, r3
 8023286:	2b00      	cmp	r3, #0
 8023288:	d00a      	beq.n	80232a0 <vPortEnterCritical+0x4c>
	__asm volatile
 802328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802328e:	f383 8811 	msr	BASEPRI, r3
 8023292:	f3bf 8f6f 	isb	sy
 8023296:	f3bf 8f4f 	dsb	sy
 802329a:	603b      	str	r3, [r7, #0]
}
 802329c:	bf00      	nop
 802329e:	e7fe      	b.n	802329e <vPortEnterCritical+0x4a>
	}
}
 80232a0:	bf00      	nop
 80232a2:	370c      	adds	r7, #12
 80232a4:	46bd      	mov	sp, r7
 80232a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232aa:	4770      	bx	lr
 80232ac:	20000128 	.word	0x20000128
 80232b0:	e000ed04 	.word	0xe000ed04

080232b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80232b4:	b480      	push	{r7}
 80232b6:	b083      	sub	sp, #12
 80232b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80232ba:	4b12      	ldr	r3, [pc, #72]	; (8023304 <vPortExitCritical+0x50>)
 80232bc:	681b      	ldr	r3, [r3, #0]
 80232be:	2b00      	cmp	r3, #0
 80232c0:	d10a      	bne.n	80232d8 <vPortExitCritical+0x24>
	__asm volatile
 80232c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80232c6:	f383 8811 	msr	BASEPRI, r3
 80232ca:	f3bf 8f6f 	isb	sy
 80232ce:	f3bf 8f4f 	dsb	sy
 80232d2:	607b      	str	r3, [r7, #4]
}
 80232d4:	bf00      	nop
 80232d6:	e7fe      	b.n	80232d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80232d8:	4b0a      	ldr	r3, [pc, #40]	; (8023304 <vPortExitCritical+0x50>)
 80232da:	681b      	ldr	r3, [r3, #0]
 80232dc:	3b01      	subs	r3, #1
 80232de:	4a09      	ldr	r2, [pc, #36]	; (8023304 <vPortExitCritical+0x50>)
 80232e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80232e2:	4b08      	ldr	r3, [pc, #32]	; (8023304 <vPortExitCritical+0x50>)
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d105      	bne.n	80232f6 <vPortExitCritical+0x42>
 80232ea:	2300      	movs	r3, #0
 80232ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80232ee:	683b      	ldr	r3, [r7, #0]
 80232f0:	f383 8811 	msr	BASEPRI, r3
}
 80232f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80232f6:	bf00      	nop
 80232f8:	370c      	adds	r7, #12
 80232fa:	46bd      	mov	sp, r7
 80232fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023300:	4770      	bx	lr
 8023302:	bf00      	nop
 8023304:	20000128 	.word	0x20000128
	...

08023310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8023310:	f3ef 8009 	mrs	r0, PSP
 8023314:	f3bf 8f6f 	isb	sy
 8023318:	4b15      	ldr	r3, [pc, #84]	; (8023370 <pxCurrentTCBConst>)
 802331a:	681a      	ldr	r2, [r3, #0]
 802331c:	f01e 0f10 	tst.w	lr, #16
 8023320:	bf08      	it	eq
 8023322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802332a:	6010      	str	r0, [r2, #0]
 802332c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8023334:	f380 8811 	msr	BASEPRI, r0
 8023338:	f3bf 8f4f 	dsb	sy
 802333c:	f3bf 8f6f 	isb	sy
 8023340:	f7fe fe54 	bl	8021fec <vTaskSwitchContext>
 8023344:	f04f 0000 	mov.w	r0, #0
 8023348:	f380 8811 	msr	BASEPRI, r0
 802334c:	bc09      	pop	{r0, r3}
 802334e:	6819      	ldr	r1, [r3, #0]
 8023350:	6808      	ldr	r0, [r1, #0]
 8023352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023356:	f01e 0f10 	tst.w	lr, #16
 802335a:	bf08      	it	eq
 802335c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8023360:	f380 8809 	msr	PSP, r0
 8023364:	f3bf 8f6f 	isb	sy
 8023368:	4770      	bx	lr
 802336a:	bf00      	nop
 802336c:	f3af 8000 	nop.w

08023370 <pxCurrentTCBConst>:
 8023370:	20001d38 	.word	0x20001d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8023374:	bf00      	nop
 8023376:	bf00      	nop

08023378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8023378:	b580      	push	{r7, lr}
 802337a:	b082      	sub	sp, #8
 802337c:	af00      	add	r7, sp, #0
	__asm volatile
 802337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023382:	f383 8811 	msr	BASEPRI, r3
 8023386:	f3bf 8f6f 	isb	sy
 802338a:	f3bf 8f4f 	dsb	sy
 802338e:	607b      	str	r3, [r7, #4]
}
 8023390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8023392:	f7fe fd71 	bl	8021e78 <xTaskIncrementTick>
 8023396:	4603      	mov	r3, r0
 8023398:	2b00      	cmp	r3, #0
 802339a:	d003      	beq.n	80233a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802339c:	4b06      	ldr	r3, [pc, #24]	; (80233b8 <xPortSysTickHandler+0x40>)
 802339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80233a2:	601a      	str	r2, [r3, #0]
 80233a4:	2300      	movs	r3, #0
 80233a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80233a8:	683b      	ldr	r3, [r7, #0]
 80233aa:	f383 8811 	msr	BASEPRI, r3
}
 80233ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80233b0:	bf00      	nop
 80233b2:	3708      	adds	r7, #8
 80233b4:	46bd      	mov	sp, r7
 80233b6:	bd80      	pop	{r7, pc}
 80233b8:	e000ed04 	.word	0xe000ed04

080233bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80233bc:	b480      	push	{r7}
 80233be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80233c0:	4b0b      	ldr	r3, [pc, #44]	; (80233f0 <vPortSetupTimerInterrupt+0x34>)
 80233c2:	2200      	movs	r2, #0
 80233c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80233c6:	4b0b      	ldr	r3, [pc, #44]	; (80233f4 <vPortSetupTimerInterrupt+0x38>)
 80233c8:	2200      	movs	r2, #0
 80233ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80233cc:	4b0a      	ldr	r3, [pc, #40]	; (80233f8 <vPortSetupTimerInterrupt+0x3c>)
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	4a0a      	ldr	r2, [pc, #40]	; (80233fc <vPortSetupTimerInterrupt+0x40>)
 80233d2:	fba2 2303 	umull	r2, r3, r2, r3
 80233d6:	099b      	lsrs	r3, r3, #6
 80233d8:	4a09      	ldr	r2, [pc, #36]	; (8023400 <vPortSetupTimerInterrupt+0x44>)
 80233da:	3b01      	subs	r3, #1
 80233dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80233de:	4b04      	ldr	r3, [pc, #16]	; (80233f0 <vPortSetupTimerInterrupt+0x34>)
 80233e0:	2207      	movs	r2, #7
 80233e2:	601a      	str	r2, [r3, #0]
}
 80233e4:	bf00      	nop
 80233e6:	46bd      	mov	sp, r7
 80233e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233ec:	4770      	bx	lr
 80233ee:	bf00      	nop
 80233f0:	e000e010 	.word	0xe000e010
 80233f4:	e000e018 	.word	0xe000e018
 80233f8:	20000000 	.word	0x20000000
 80233fc:	10624dd3 	.word	0x10624dd3
 8023400:	e000e014 	.word	0xe000e014

08023404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8023414 <vPortEnableVFP+0x10>
 8023408:	6801      	ldr	r1, [r0, #0]
 802340a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802340e:	6001      	str	r1, [r0, #0]
 8023410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023412:	bf00      	nop
 8023414:	e000ed88 	.word	0xe000ed88

08023418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8023418:	b480      	push	{r7}
 802341a:	b085      	sub	sp, #20
 802341c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802341e:	f3ef 8305 	mrs	r3, IPSR
 8023422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8023424:	68fb      	ldr	r3, [r7, #12]
 8023426:	2b0f      	cmp	r3, #15
 8023428:	d914      	bls.n	8023454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802342a:	4a17      	ldr	r2, [pc, #92]	; (8023488 <vPortValidateInterruptPriority+0x70>)
 802342c:	68fb      	ldr	r3, [r7, #12]
 802342e:	4413      	add	r3, r2
 8023430:	781b      	ldrb	r3, [r3, #0]
 8023432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8023434:	4b15      	ldr	r3, [pc, #84]	; (802348c <vPortValidateInterruptPriority+0x74>)
 8023436:	781b      	ldrb	r3, [r3, #0]
 8023438:	7afa      	ldrb	r2, [r7, #11]
 802343a:	429a      	cmp	r2, r3
 802343c:	d20a      	bcs.n	8023454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023442:	f383 8811 	msr	BASEPRI, r3
 8023446:	f3bf 8f6f 	isb	sy
 802344a:	f3bf 8f4f 	dsb	sy
 802344e:	607b      	str	r3, [r7, #4]
}
 8023450:	bf00      	nop
 8023452:	e7fe      	b.n	8023452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8023454:	4b0e      	ldr	r3, [pc, #56]	; (8023490 <vPortValidateInterruptPriority+0x78>)
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802345c:	4b0d      	ldr	r3, [pc, #52]	; (8023494 <vPortValidateInterruptPriority+0x7c>)
 802345e:	681b      	ldr	r3, [r3, #0]
 8023460:	429a      	cmp	r2, r3
 8023462:	d90a      	bls.n	802347a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8023464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023468:	f383 8811 	msr	BASEPRI, r3
 802346c:	f3bf 8f6f 	isb	sy
 8023470:	f3bf 8f4f 	dsb	sy
 8023474:	603b      	str	r3, [r7, #0]
}
 8023476:	bf00      	nop
 8023478:	e7fe      	b.n	8023478 <vPortValidateInterruptPriority+0x60>
	}
 802347a:	bf00      	nop
 802347c:	3714      	adds	r7, #20
 802347e:	46bd      	mov	sp, r7
 8023480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023484:	4770      	bx	lr
 8023486:	bf00      	nop
 8023488:	e000e3f0 	.word	0xe000e3f0
 802348c:	2000236c 	.word	0x2000236c
 8023490:	e000ed0c 	.word	0xe000ed0c
 8023494:	20002370 	.word	0x20002370

08023498 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8023498:	b580      	push	{r7, lr}
 802349a:	b084      	sub	sp, #16
 802349c:	af00      	add	r7, sp, #0
 802349e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80234a0:	2300      	movs	r3, #0
 80234a2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	f003 0307 	and.w	r3, r3, #7
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d004      	beq.n	80234b8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	f023 0307 	bic.w	r3, r3, #7
 80234b4:	3308      	adds	r3, #8
 80234b6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80234b8:	f7fe fc22 	bl	8021d00 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80234bc:	4b16      	ldr	r3, [pc, #88]	; (8023518 <pvPortMalloc+0x80>)
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	d105      	bne.n	80234d0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80234c4:	4b15      	ldr	r3, [pc, #84]	; (802351c <pvPortMalloc+0x84>)
 80234c6:	f023 0307 	bic.w	r3, r3, #7
 80234ca:	461a      	mov	r2, r3
 80234cc:	4b12      	ldr	r3, [pc, #72]	; (8023518 <pvPortMalloc+0x80>)
 80234ce:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80234d0:	4b13      	ldr	r3, [pc, #76]	; (8023520 <pvPortMalloc+0x88>)
 80234d2:	681a      	ldr	r2, [r3, #0]
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	4413      	add	r3, r2
 80234d8:	f24b 1227 	movw	r2, #45351	; 0xb127
 80234dc:	4293      	cmp	r3, r2
 80234de:	d813      	bhi.n	8023508 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80234e0:	4b0f      	ldr	r3, [pc, #60]	; (8023520 <pvPortMalloc+0x88>)
 80234e2:	681a      	ldr	r2, [r3, #0]
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	441a      	add	r2, r3
 80234e8:	4b0d      	ldr	r3, [pc, #52]	; (8023520 <pvPortMalloc+0x88>)
 80234ea:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80234ec:	429a      	cmp	r2, r3
 80234ee:	d90b      	bls.n	8023508 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80234f0:	4b09      	ldr	r3, [pc, #36]	; (8023518 <pvPortMalloc+0x80>)
 80234f2:	681a      	ldr	r2, [r3, #0]
 80234f4:	4b0a      	ldr	r3, [pc, #40]	; (8023520 <pvPortMalloc+0x88>)
 80234f6:	681b      	ldr	r3, [r3, #0]
 80234f8:	4413      	add	r3, r2
 80234fa:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80234fc:	4b08      	ldr	r3, [pc, #32]	; (8023520 <pvPortMalloc+0x88>)
 80234fe:	681a      	ldr	r2, [r3, #0]
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	4413      	add	r3, r2
 8023504:	4a06      	ldr	r2, [pc, #24]	; (8023520 <pvPortMalloc+0x88>)
 8023506:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8023508:	f7fe fc08 	bl	8021d1c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 802350c:	68fb      	ldr	r3, [r7, #12]
}
 802350e:	4618      	mov	r0, r3
 8023510:	3710      	adds	r7, #16
 8023512:	46bd      	mov	sp, r7
 8023514:	bd80      	pop	{r7, pc}
 8023516:	bf00      	nop
 8023518:	2000d4a8 	.word	0x2000d4a8
 802351c:	2000237c 	.word	0x2000237c
 8023520:	2000d4a4 	.word	0x2000d4a4

08023524 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023524:	b480      	push	{r7}
 8023526:	b085      	sub	sp, #20
 8023528:	af00      	add	r7, sp, #0
 802352a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 802352c:	687b      	ldr	r3, [r7, #4]
 802352e:	2b00      	cmp	r3, #0
 8023530:	d00a      	beq.n	8023548 <vPortFree+0x24>
	__asm volatile
 8023532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023536:	f383 8811 	msr	BASEPRI, r3
 802353a:	f3bf 8f6f 	isb	sy
 802353e:	f3bf 8f4f 	dsb	sy
 8023542:	60fb      	str	r3, [r7, #12]
}
 8023544:	bf00      	nop
 8023546:	e7fe      	b.n	8023546 <vPortFree+0x22>
}
 8023548:	bf00      	nop
 802354a:	3714      	adds	r7, #20
 802354c:	46bd      	mov	sp, r7
 802354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023552:	4770      	bx	lr

08023554 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8023554:	b480      	push	{r7}
 8023556:	b083      	sub	sp, #12
 8023558:	af00      	add	r7, sp, #0
 802355a:	6078      	str	r0, [r7, #4]
 802355c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 802355e:	683a      	ldr	r2, [r7, #0]
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	4293      	cmp	r3, r2
 8023564:	bf38      	it	cc
 8023566:	4613      	movcc	r3, r2
}
 8023568:	4618      	mov	r0, r3
 802356a:	370c      	adds	r7, #12
 802356c:	46bd      	mov	sp, r7
 802356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023572:	4770      	bx	lr

08023574 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8023574:	b480      	push	{r7}
 8023576:	b083      	sub	sp, #12
 8023578:	af00      	add	r7, sp, #0
 802357a:	6078      	str	r0, [r7, #4]
 802357c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 802357e:	683a      	ldr	r2, [r7, #0]
 8023580:	687b      	ldr	r3, [r7, #4]
 8023582:	4293      	cmp	r3, r2
 8023584:	bf28      	it	cs
 8023586:	4613      	movcs	r3, r2
}
 8023588:	4618      	mov	r0, r3
 802358a:	370c      	adds	r7, #12
 802358c:	46bd      	mov	sp, r7
 802358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023592:	4770      	bx	lr

08023594 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8023594:	b480      	push	{r7}
 8023596:	b083      	sub	sp, #12
 8023598:	af00      	add	r7, sp, #0
 802359a:	6078      	str	r0, [r7, #4]
 802359c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	683a      	ldr	r2, [r7, #0]
 80235a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80235a6:	6839      	ldr	r1, [r7, #0]
 80235a8:	fb01 f202 	mul.w	r2, r1, r2
 80235ac:	1a9b      	subs	r3, r3, r2
 80235ae:	687a      	ldr	r2, [r7, #4]
 80235b0:	1ad3      	subs	r3, r2, r3
}
 80235b2:	4618      	mov	r0, r3
 80235b4:	370c      	adds	r7, #12
 80235b6:	46bd      	mov	sp, r7
 80235b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235bc:	4770      	bx	lr

080235be <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80235be:	b580      	push	{r7, lr}
 80235c0:	b082      	sub	sp, #8
 80235c2:	af00      	add	r7, sp, #0
 80235c4:	6078      	str	r0, [r7, #4]
 80235c6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80235c8:	687a      	ldr	r2, [r7, #4]
 80235ca:	683b      	ldr	r3, [r7, #0]
 80235cc:	4413      	add	r3, r2
 80235ce:	3b01      	subs	r3, #1
 80235d0:	6839      	ldr	r1, [r7, #0]
 80235d2:	4618      	mov	r0, r3
 80235d4:	f7ff ffde 	bl	8023594 <lfs_aligndown>
 80235d8:	4603      	mov	r3, r0
}
 80235da:	4618      	mov	r0, r3
 80235dc:	3708      	adds	r7, #8
 80235de:	46bd      	mov	sp, r7
 80235e0:	bd80      	pop	{r7, pc}

080235e2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80235e2:	b480      	push	{r7}
 80235e4:	b083      	sub	sp, #12
 80235e6:	af00      	add	r7, sp, #0
 80235e8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	3b01      	subs	r3, #1
 80235ee:	fab3 f383 	clz	r3, r3
 80235f2:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80235f6:	4618      	mov	r0, r3
 80235f8:	370c      	adds	r7, #12
 80235fa:	46bd      	mov	sp, r7
 80235fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023600:	4770      	bx	lr

08023602 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023602:	b480      	push	{r7}
 8023604:	b083      	sub	sp, #12
 8023606:	af00      	add	r7, sp, #0
 8023608:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	fa93 f3a3 	rbit	r3, r3
 8023610:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8023614:	4618      	mov	r0, r3
 8023616:	370c      	adds	r7, #12
 8023618:	46bd      	mov	sp, r7
 802361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802361e:	4770      	bx	lr

08023620 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8023620:	b580      	push	{r7, lr}
 8023622:	b082      	sub	sp, #8
 8023624:	af00      	add	r7, sp, #0
 8023626:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8023628:	6878      	ldr	r0, [r7, #4]
 802362a:	f7ed fb5d 	bl	8010ce8 <__popcountsi2>
 802362e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8023630:	4618      	mov	r0, r3
 8023632:	3708      	adds	r7, #8
 8023634:	46bd      	mov	sp, r7
 8023636:	bd80      	pop	{r7, pc}

08023638 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8023638:	b480      	push	{r7}
 802363a:	b083      	sub	sp, #12
 802363c:	af00      	add	r7, sp, #0
 802363e:	6078      	str	r0, [r7, #4]
 8023640:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8023642:	687a      	ldr	r2, [r7, #4]
 8023644:	683b      	ldr	r3, [r7, #0]
 8023646:	1ad3      	subs	r3, r2, r3
}
 8023648:	4618      	mov	r0, r3
 802364a:	370c      	adds	r7, #12
 802364c:	46bd      	mov	sp, r7
 802364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023652:	4770      	bx	lr

08023654 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8023654:	b480      	push	{r7}
 8023656:	b083      	sub	sp, #12
 8023658:	af00      	add	r7, sp, #0
 802365a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 802365c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 802365e:	4618      	mov	r0, r3
 8023660:	370c      	adds	r7, #12
 8023662:	46bd      	mov	sp, r7
 8023664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023668:	4770      	bx	lr

0802366a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 802366a:	b580      	push	{r7, lr}
 802366c:	b082      	sub	sp, #8
 802366e:	af00      	add	r7, sp, #0
 8023670:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8023672:	6878      	ldr	r0, [r7, #4]
 8023674:	f7ff ffee 	bl	8023654 <lfs_fromle32>
 8023678:	4603      	mov	r3, r0
}
 802367a:	4618      	mov	r0, r3
 802367c:	3708      	adds	r7, #8
 802367e:	46bd      	mov	sp, r7
 8023680:	bd80      	pop	{r7, pc}

08023682 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8023682:	b480      	push	{r7}
 8023684:	b083      	sub	sp, #12
 8023686:	af00      	add	r7, sp, #0
 8023688:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 802368a:	687b      	ldr	r3, [r7, #4]
 802368c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 802368e:	4618      	mov	r0, r3
 8023690:	370c      	adds	r7, #12
 8023692:	46bd      	mov	sp, r7
 8023694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023698:	4770      	bx	lr

0802369a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 802369a:	b580      	push	{r7, lr}
 802369c:	b082      	sub	sp, #8
 802369e:	af00      	add	r7, sp, #0
 80236a0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80236a2:	6878      	ldr	r0, [r7, #4]
 80236a4:	f7ff ffed 	bl	8023682 <lfs_frombe32>
 80236a8:	4603      	mov	r3, r0
}
 80236aa:	4618      	mov	r0, r3
 80236ac:	3708      	adds	r7, #8
 80236ae:	46bd      	mov	sp, r7
 80236b0:	bd80      	pop	{r7, pc}

080236b2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80236b2:	b580      	push	{r7, lr}
 80236b4:	b082      	sub	sp, #8
 80236b6:	af00      	add	r7, sp, #0
 80236b8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80236ba:	6878      	ldr	r0, [r7, #4]
 80236bc:	f008 fed2 	bl	802c464 <malloc>
 80236c0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80236c2:	4618      	mov	r0, r3
 80236c4:	3708      	adds	r7, #8
 80236c6:	46bd      	mov	sp, r7
 80236c8:	bd80      	pop	{r7, pc}

080236ca <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80236ca:	b580      	push	{r7, lr}
 80236cc:	b082      	sub	sp, #8
 80236ce:	af00      	add	r7, sp, #0
 80236d0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80236d2:	6878      	ldr	r0, [r7, #4]
 80236d4:	f008 fece 	bl	802c474 <free>
#else
    (void)p;
#endif
}
 80236d8:	bf00      	nop
 80236da:	3708      	adds	r7, #8
 80236dc:	46bd      	mov	sp, r7
 80236de:	bd80      	pop	{r7, pc}

080236e0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80236e0:	b480      	push	{r7}
 80236e2:	b083      	sub	sp, #12
 80236e4:	af00      	add	r7, sp, #0
 80236e6:	6078      	str	r0, [r7, #4]
 80236e8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80236ea:	683b      	ldr	r3, [r7, #0]
 80236ec:	f04f 32ff 	mov.w	r2, #4294967295
 80236f0:	601a      	str	r2, [r3, #0]
}
 80236f2:	bf00      	nop
 80236f4:	370c      	adds	r7, #12
 80236f6:	46bd      	mov	sp, r7
 80236f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236fc:	4770      	bx	lr

080236fe <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80236fe:	b580      	push	{r7, lr}
 8023700:	b082      	sub	sp, #8
 8023702:	af00      	add	r7, sp, #0
 8023704:	6078      	str	r0, [r7, #4]
 8023706:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023708:	683b      	ldr	r3, [r7, #0]
 802370a:	68d8      	ldr	r0, [r3, #12]
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023712:	461a      	mov	r2, r3
 8023714:	21ff      	movs	r1, #255	; 0xff
 8023716:	f00a f841 	bl	802d79c <memset>
    pcache->block = LFS_BLOCK_NULL;
 802371a:	683b      	ldr	r3, [r7, #0]
 802371c:	f04f 32ff 	mov.w	r2, #4294967295
 8023720:	601a      	str	r2, [r3, #0]
}
 8023722:	bf00      	nop
 8023724:	3708      	adds	r7, #8
 8023726:	46bd      	mov	sp, r7
 8023728:	bd80      	pop	{r7, pc}
	...

0802372c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 802372c:	b5b0      	push	{r4, r5, r7, lr}
 802372e:	b08a      	sub	sp, #40	; 0x28
 8023730:	af02      	add	r7, sp, #8
 8023732:	60f8      	str	r0, [r7, #12]
 8023734:	60b9      	str	r1, [r7, #8]
 8023736:	607a      	str	r2, [r7, #4]
 8023738:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 802373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802373c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 802373e:	68fb      	ldr	r3, [r7, #12]
 8023740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023742:	6a1b      	ldr	r3, [r3, #32]
 8023744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023746:	429a      	cmp	r2, r3
 8023748:	d208      	bcs.n	802375c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 802374a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802374e:	441a      	add	r2, r3
 8023750:	68fb      	ldr	r3, [r7, #12]
 8023752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023754:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8023756:	429a      	cmp	r2, r3
 8023758:	f240 811b 	bls.w	8023992 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 802375c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023760:	e11c      	b.n	802399c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8023762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023764:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8023766:	68bb      	ldr	r3, [r7, #8]
 8023768:	2b00      	cmp	r3, #0
 802376a:	d03f      	beq.n	80237ec <lfs_bd_read+0xc0>
 802376c:	68bb      	ldr	r3, [r7, #8]
 802376e:	681b      	ldr	r3, [r3, #0]
 8023770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023772:	429a      	cmp	r2, r3
 8023774:	d13a      	bne.n	80237ec <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8023776:	68bb      	ldr	r3, [r7, #8]
 8023778:	685a      	ldr	r2, [r3, #4]
 802377a:	68bb      	ldr	r3, [r7, #8]
 802377c:	689b      	ldr	r3, [r3, #8]
 802377e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8023780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023782:	429a      	cmp	r2, r3
 8023784:	d232      	bcs.n	80237ec <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8023786:	68bb      	ldr	r3, [r7, #8]
 8023788:	685b      	ldr	r3, [r3, #4]
 802378a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802378c:	429a      	cmp	r2, r3
 802378e:	d324      	bcc.n	80237da <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8023790:	68bb      	ldr	r3, [r7, #8]
 8023792:	689a      	ldr	r2, [r3, #8]
 8023794:	68bb      	ldr	r3, [r7, #8]
 8023796:	6859      	ldr	r1, [r3, #4]
 8023798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802379a:	1acb      	subs	r3, r1, r3
 802379c:	4413      	add	r3, r2
 802379e:	4619      	mov	r1, r3
 80237a0:	69b8      	ldr	r0, [r7, #24]
 80237a2:	f7ff fee7 	bl	8023574 <lfs_min>
 80237a6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80237a8:	68bb      	ldr	r3, [r7, #8]
 80237aa:	68da      	ldr	r2, [r3, #12]
 80237ac:	68bb      	ldr	r3, [r7, #8]
 80237ae:	685b      	ldr	r3, [r3, #4]
 80237b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80237b2:	1acb      	subs	r3, r1, r3
 80237b4:	4413      	add	r3, r2
 80237b6:	69ba      	ldr	r2, [r7, #24]
 80237b8:	4619      	mov	r1, r3
 80237ba:	69f8      	ldr	r0, [r7, #28]
 80237bc:	f00a f9c3 	bl	802db46 <memcpy>

                data += diff;
 80237c0:	69fa      	ldr	r2, [r7, #28]
 80237c2:	69bb      	ldr	r3, [r7, #24]
 80237c4:	4413      	add	r3, r2
 80237c6:	61fb      	str	r3, [r7, #28]
                off += diff;
 80237c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80237ca:	69bb      	ldr	r3, [r7, #24]
 80237cc:	4413      	add	r3, r2
 80237ce:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80237d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80237d2:	69bb      	ldr	r3, [r7, #24]
 80237d4:	1ad3      	subs	r3, r2, r3
 80237d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80237d8:	e0db      	b.n	8023992 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80237da:	68bb      	ldr	r3, [r7, #8]
 80237dc:	685a      	ldr	r2, [r3, #4]
 80237de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237e0:	1ad3      	subs	r3, r2, r3
 80237e2:	4619      	mov	r1, r3
 80237e4:	69b8      	ldr	r0, [r7, #24]
 80237e6:	f7ff fec5 	bl	8023574 <lfs_min>
 80237ea:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80237ec:	687b      	ldr	r3, [r7, #4]
 80237ee:	681b      	ldr	r3, [r3, #0]
 80237f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80237f2:	429a      	cmp	r2, r3
 80237f4:	d13a      	bne.n	802386c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 80237f6:	687b      	ldr	r3, [r7, #4]
 80237f8:	685a      	ldr	r2, [r3, #4]
 80237fa:	687b      	ldr	r3, [r7, #4]
 80237fc:	689b      	ldr	r3, [r3, #8]
 80237fe:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023802:	429a      	cmp	r2, r3
 8023804:	d232      	bcs.n	802386c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	685b      	ldr	r3, [r3, #4]
 802380a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802380c:	429a      	cmp	r2, r3
 802380e:	d324      	bcc.n	802385a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	689a      	ldr	r2, [r3, #8]
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	6859      	ldr	r1, [r3, #4]
 8023818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802381a:	1acb      	subs	r3, r1, r3
 802381c:	4413      	add	r3, r2
 802381e:	4619      	mov	r1, r3
 8023820:	69b8      	ldr	r0, [r7, #24]
 8023822:	f7ff fea7 	bl	8023574 <lfs_min>
 8023826:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	68da      	ldr	r2, [r3, #12]
 802382c:	687b      	ldr	r3, [r7, #4]
 802382e:	685b      	ldr	r3, [r3, #4]
 8023830:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023832:	1acb      	subs	r3, r1, r3
 8023834:	4413      	add	r3, r2
 8023836:	69ba      	ldr	r2, [r7, #24]
 8023838:	4619      	mov	r1, r3
 802383a:	69f8      	ldr	r0, [r7, #28]
 802383c:	f00a f983 	bl	802db46 <memcpy>

                data += diff;
 8023840:	69fa      	ldr	r2, [r7, #28]
 8023842:	69bb      	ldr	r3, [r7, #24]
 8023844:	4413      	add	r3, r2
 8023846:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802384a:	69bb      	ldr	r3, [r7, #24]
 802384c:	4413      	add	r3, r2
 802384e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023852:	69bb      	ldr	r3, [r7, #24]
 8023854:	1ad3      	subs	r3, r2, r3
 8023856:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023858:	e09b      	b.n	8023992 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	685a      	ldr	r2, [r3, #4]
 802385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023860:	1ad3      	subs	r3, r2, r3
 8023862:	4619      	mov	r1, r3
 8023864:	69b8      	ldr	r0, [r7, #24]
 8023866:	f7ff fe85 	bl	8023574 <lfs_min>
 802386a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 802386c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802386e:	683b      	ldr	r3, [r7, #0]
 8023870:	429a      	cmp	r2, r3
 8023872:	d336      	bcc.n	80238e2 <lfs_bd_read+0x1b6>
 8023874:	68fb      	ldr	r3, [r7, #12]
 8023876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023878:	695a      	ldr	r2, [r3, #20]
 802387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802387c:	fbb3 f1f2 	udiv	r1, r3, r2
 8023880:	fb01 f202 	mul.w	r2, r1, r2
 8023884:	1a9b      	subs	r3, r3, r2
 8023886:	2b00      	cmp	r3, #0
 8023888:	d12b      	bne.n	80238e2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 802388a:	68fb      	ldr	r3, [r7, #12]
 802388c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802388e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023892:	429a      	cmp	r2, r3
 8023894:	d325      	bcc.n	80238e2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8023896:	68fb      	ldr	r3, [r7, #12]
 8023898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802389a:	695b      	ldr	r3, [r3, #20]
 802389c:	4619      	mov	r1, r3
 802389e:	69b8      	ldr	r0, [r7, #24]
 80238a0:	f7ff fe78 	bl	8023594 <lfs_aligndown>
 80238a4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80238a6:	68fb      	ldr	r3, [r7, #12]
 80238a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238aa:	685c      	ldr	r4, [r3, #4]
 80238ac:	68fb      	ldr	r3, [r7, #12]
 80238ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80238b0:	69bb      	ldr	r3, [r7, #24]
 80238b2:	9300      	str	r3, [sp, #0]
 80238b4:	69fb      	ldr	r3, [r7, #28]
 80238b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80238b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80238ba:	47a0      	blx	r4
 80238bc:	6178      	str	r0, [r7, #20]
            if (err) {
 80238be:	697b      	ldr	r3, [r7, #20]
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	d001      	beq.n	80238c8 <lfs_bd_read+0x19c>
                return err;
 80238c4:	697b      	ldr	r3, [r7, #20]
 80238c6:	e069      	b.n	802399c <lfs_bd_read+0x270>
            }

            data += diff;
 80238c8:	69fa      	ldr	r2, [r7, #28]
 80238ca:	69bb      	ldr	r3, [r7, #24]
 80238cc:	4413      	add	r3, r2
 80238ce:	61fb      	str	r3, [r7, #28]
            off += diff;
 80238d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80238d2:	69bb      	ldr	r3, [r7, #24]
 80238d4:	4413      	add	r3, r2
 80238d6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80238d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80238da:	69bb      	ldr	r3, [r7, #24]
 80238dc:	1ad3      	subs	r3, r2, r3
 80238de:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 80238e0:	e057      	b.n	8023992 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 80238e2:	68fb      	ldr	r3, [r7, #12]
 80238e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238e6:	6a1b      	ldr	r3, [r3, #32]
 80238e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80238ea:	429a      	cmp	r2, r3
 80238ec:	d305      	bcc.n	80238fa <lfs_bd_read+0x1ce>
 80238ee:	4b2d      	ldr	r3, [pc, #180]	; (80239a4 <lfs_bd_read+0x278>)
 80238f0:	4a2d      	ldr	r2, [pc, #180]	; (80239a8 <lfs_bd_read+0x27c>)
 80238f2:	216b      	movs	r1, #107	; 0x6b
 80238f4:	482d      	ldr	r0, [pc, #180]	; (80239ac <lfs_bd_read+0x280>)
 80238f6:	f008 fd81 	bl	802c3fc <__assert_func>
        rcache->block = block;
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80238fe:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023900:	68fb      	ldr	r3, [r7, #12]
 8023902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023904:	695b      	ldr	r3, [r3, #20]
 8023906:	4619      	mov	r1, r3
 8023908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802390a:	f7ff fe43 	bl	8023594 <lfs_aligndown>
 802390e:	4602      	mov	r2, r0
 8023910:	687b      	ldr	r3, [r7, #4]
 8023912:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023916:	683b      	ldr	r3, [r7, #0]
 8023918:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 802391a:	68fb      	ldr	r3, [r7, #12]
 802391c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802391e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023920:	4619      	mov	r1, r3
 8023922:	4610      	mov	r0, r2
 8023924:	f7ff fe4b 	bl	80235be <lfs_alignup>
 8023928:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 802392a:	68fb      	ldr	r3, [r7, #12]
 802392c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802392e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023930:	4619      	mov	r1, r3
 8023932:	4610      	mov	r0, r2
 8023934:	f7ff fe1e 	bl	8023574 <lfs_min>
 8023938:	4602      	mov	r2, r0
                - rcache->off,
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 802393e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8023940:	68fb      	ldr	r3, [r7, #12]
 8023942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8023946:	4619      	mov	r1, r3
 8023948:	4610      	mov	r0, r2
 802394a:	f7ff fe13 	bl	8023574 <lfs_min>
 802394e:	4602      	mov	r2, r0
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023958:	685c      	ldr	r4, [r3, #4]
 802395a:	68fb      	ldr	r3, [r7, #12]
 802395c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 802395e:	687b      	ldr	r3, [r7, #4]
 8023960:	6819      	ldr	r1, [r3, #0]
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	689b      	ldr	r3, [r3, #8]
 802396e:	9300      	str	r3, [sp, #0]
 8023970:	462b      	mov	r3, r5
 8023972:	47a0      	blx	r4
 8023974:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8023976:	693b      	ldr	r3, [r7, #16]
 8023978:	2b00      	cmp	r3, #0
 802397a:	dd05      	ble.n	8023988 <lfs_bd_read+0x25c>
 802397c:	4b0c      	ldr	r3, [pc, #48]	; (80239b0 <lfs_bd_read+0x284>)
 802397e:	4a0a      	ldr	r2, [pc, #40]	; (80239a8 <lfs_bd_read+0x27c>)
 8023980:	2176      	movs	r1, #118	; 0x76
 8023982:	480a      	ldr	r0, [pc, #40]	; (80239ac <lfs_bd_read+0x280>)
 8023984:	f008 fd3a 	bl	802c3fc <__assert_func>
        if (err) {
 8023988:	693b      	ldr	r3, [r7, #16]
 802398a:	2b00      	cmp	r3, #0
 802398c:	d001      	beq.n	8023992 <lfs_bd_read+0x266>
            return err;
 802398e:	693b      	ldr	r3, [r7, #16]
 8023990:	e004      	b.n	802399c <lfs_bd_read+0x270>
    while (size > 0) {
 8023992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023994:	2b00      	cmp	r3, #0
 8023996:	f47f aee4 	bne.w	8023762 <lfs_bd_read+0x36>
        }
    }

    return 0;
 802399a:	2300      	movs	r3, #0
}
 802399c:	4618      	mov	r0, r3
 802399e:	3720      	adds	r7, #32
 80239a0:	46bd      	mov	sp, r7
 80239a2:	bdb0      	pop	{r4, r5, r7, pc}
 80239a4:	080333fc 	.word	0x080333fc
 80239a8:	080346d0 	.word	0x080346d0
 80239ac:	0803341c 	.word	0x0803341c
 80239b0:	08033450 	.word	0x08033450

080239b4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80239b4:	b580      	push	{r7, lr}
 80239b6:	b08e      	sub	sp, #56	; 0x38
 80239b8:	af04      	add	r7, sp, #16
 80239ba:	60f8      	str	r0, [r7, #12]
 80239bc:	60b9      	str	r1, [r7, #8]
 80239be:	607a      	str	r2, [r7, #4]
 80239c0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80239c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239c4:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 80239c6:	2300      	movs	r3, #0
 80239c8:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80239ca:	2300      	movs	r3, #0
 80239cc:	627b      	str	r3, [r7, #36]	; 0x24
 80239ce:	e039      	b.n	8023a44 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80239d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80239d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239d4:	1ad3      	subs	r3, r2, r3
 80239d6:	2108      	movs	r1, #8
 80239d8:	4618      	mov	r0, r3
 80239da:	f7ff fdcb 	bl	8023574 <lfs_min>
 80239de:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 80239e0:	683a      	ldr	r2, [r7, #0]
 80239e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239e4:	1ad1      	subs	r1, r2, r3
 80239e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80239e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239ea:	4413      	add	r3, r2
 80239ec:	69fa      	ldr	r2, [r7, #28]
 80239ee:	9203      	str	r2, [sp, #12]
 80239f0:	f107 0210 	add.w	r2, r7, #16
 80239f4:	9202      	str	r2, [sp, #8]
 80239f6:	9301      	str	r3, [sp, #4]
 80239f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80239fa:	9300      	str	r3, [sp, #0]
 80239fc:	460b      	mov	r3, r1
 80239fe:	687a      	ldr	r2, [r7, #4]
 8023a00:	68b9      	ldr	r1, [r7, #8]
 8023a02:	68f8      	ldr	r0, [r7, #12]
 8023a04:	f7ff fe92 	bl	802372c <lfs_bd_read>
 8023a08:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8023a0a:	69bb      	ldr	r3, [r7, #24]
 8023a0c:	2b00      	cmp	r3, #0
 8023a0e:	d001      	beq.n	8023a14 <lfs_bd_cmp+0x60>
            return res;
 8023a10:	69bb      	ldr	r3, [r7, #24]
 8023a12:	e01c      	b.n	8023a4e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023a14:	6a3a      	ldr	r2, [r7, #32]
 8023a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a18:	18d1      	adds	r1, r2, r3
 8023a1a:	f107 0310 	add.w	r3, r7, #16
 8023a1e:	69fa      	ldr	r2, [r7, #28]
 8023a20:	4618      	mov	r0, r3
 8023a22:	f009 fe91 	bl	802d748 <memcmp>
 8023a26:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023a28:	69bb      	ldr	r3, [r7, #24]
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	d006      	beq.n	8023a3c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8023a2e:	69bb      	ldr	r3, [r7, #24]
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	da01      	bge.n	8023a38 <lfs_bd_cmp+0x84>
 8023a34:	2301      	movs	r3, #1
 8023a36:	e00a      	b.n	8023a4e <lfs_bd_cmp+0x9a>
 8023a38:	2302      	movs	r3, #2
 8023a3a:	e008      	b.n	8023a4e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8023a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023a3e:	69fb      	ldr	r3, [r7, #28]
 8023a40:	4413      	add	r3, r2
 8023a42:	627b      	str	r3, [r7, #36]	; 0x24
 8023a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023a48:	429a      	cmp	r2, r3
 8023a4a:	d3c1      	bcc.n	80239d0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8023a4c:	2300      	movs	r3, #0
}
 8023a4e:	4618      	mov	r0, r3
 8023a50:	3728      	adds	r7, #40	; 0x28
 8023a52:	46bd      	mov	sp, r7
 8023a54:	bd80      	pop	{r7, pc}
	...

08023a58 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023a58:	b5b0      	push	{r4, r5, r7, lr}
 8023a5a:	b08c      	sub	sp, #48	; 0x30
 8023a5c:	af04      	add	r7, sp, #16
 8023a5e:	60f8      	str	r0, [r7, #12]
 8023a60:	60b9      	str	r1, [r7, #8]
 8023a62:	607a      	str	r2, [r7, #4]
 8023a64:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8023a66:	68bb      	ldr	r3, [r7, #8]
 8023a68:	681b      	ldr	r3, [r3, #0]
 8023a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a6e:	d061      	beq.n	8023b34 <lfs_bd_flush+0xdc>
 8023a70:	68bb      	ldr	r3, [r7, #8]
 8023a72:	681b      	ldr	r3, [r3, #0]
 8023a74:	f113 0f02 	cmn.w	r3, #2
 8023a78:	d05c      	beq.n	8023b34 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8023a7a:	68bb      	ldr	r3, [r7, #8]
 8023a7c:	681a      	ldr	r2, [r3, #0]
 8023a7e:	68fb      	ldr	r3, [r7, #12]
 8023a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a82:	6a1b      	ldr	r3, [r3, #32]
 8023a84:	429a      	cmp	r2, r3
 8023a86:	d305      	bcc.n	8023a94 <lfs_bd_flush+0x3c>
 8023a88:	4b2d      	ldr	r3, [pc, #180]	; (8023b40 <lfs_bd_flush+0xe8>)
 8023a8a:	4a2e      	ldr	r2, [pc, #184]	; (8023b44 <lfs_bd_flush+0xec>)
 8023a8c:	219e      	movs	r1, #158	; 0x9e
 8023a8e:	482e      	ldr	r0, [pc, #184]	; (8023b48 <lfs_bd_flush+0xf0>)
 8023a90:	f008 fcb4 	bl	802c3fc <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8023a94:	68bb      	ldr	r3, [r7, #8]
 8023a96:	689a      	ldr	r2, [r3, #8]
 8023a98:	68fb      	ldr	r3, [r7, #12]
 8023a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a9c:	699b      	ldr	r3, [r3, #24]
 8023a9e:	4619      	mov	r1, r3
 8023aa0:	4610      	mov	r0, r2
 8023aa2:	f7ff fd8c 	bl	80235be <lfs_alignup>
 8023aa6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023aa8:	68fb      	ldr	r3, [r7, #12]
 8023aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023aac:	689c      	ldr	r4, [r3, #8]
 8023aae:	68fb      	ldr	r3, [r7, #12]
 8023ab0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023ab2:	68bb      	ldr	r3, [r7, #8]
 8023ab4:	6819      	ldr	r1, [r3, #0]
 8023ab6:	68bb      	ldr	r3, [r7, #8]
 8023ab8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8023aba:	68bb      	ldr	r3, [r7, #8]
 8023abc:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023abe:	69fb      	ldr	r3, [r7, #28]
 8023ac0:	9300      	str	r3, [sp, #0]
 8023ac2:	462b      	mov	r3, r5
 8023ac4:	47a0      	blx	r4
 8023ac6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8023ac8:	69bb      	ldr	r3, [r7, #24]
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	dd05      	ble.n	8023ada <lfs_bd_flush+0x82>
 8023ace:	4b1f      	ldr	r3, [pc, #124]	; (8023b4c <lfs_bd_flush+0xf4>)
 8023ad0:	4a1c      	ldr	r2, [pc, #112]	; (8023b44 <lfs_bd_flush+0xec>)
 8023ad2:	21a2      	movs	r1, #162	; 0xa2
 8023ad4:	481c      	ldr	r0, [pc, #112]	; (8023b48 <lfs_bd_flush+0xf0>)
 8023ad6:	f008 fc91 	bl	802c3fc <__assert_func>
        if (err) {
 8023ada:	69bb      	ldr	r3, [r7, #24]
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d001      	beq.n	8023ae4 <lfs_bd_flush+0x8c>
            return err;
 8023ae0:	69bb      	ldr	r3, [r7, #24]
 8023ae2:	e028      	b.n	8023b36 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8023ae4:	78fb      	ldrb	r3, [r7, #3]
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d020      	beq.n	8023b2c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8023aea:	6879      	ldr	r1, [r7, #4]
 8023aec:	68f8      	ldr	r0, [r7, #12]
 8023aee:	f7ff fdf7 	bl	80236e0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023af2:	68bb      	ldr	r3, [r7, #8]
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	68ba      	ldr	r2, [r7, #8]
 8023af8:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8023afa:	68b9      	ldr	r1, [r7, #8]
 8023afc:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8023afe:	69f8      	ldr	r0, [r7, #28]
 8023b00:	9003      	str	r0, [sp, #12]
 8023b02:	9102      	str	r1, [sp, #8]
 8023b04:	9201      	str	r2, [sp, #4]
 8023b06:	9300      	str	r3, [sp, #0]
 8023b08:	69fb      	ldr	r3, [r7, #28]
 8023b0a:	687a      	ldr	r2, [r7, #4]
 8023b0c:	2100      	movs	r1, #0
 8023b0e:	68f8      	ldr	r0, [r7, #12]
 8023b10:	f7ff ff50 	bl	80239b4 <lfs_bd_cmp>
 8023b14:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023b16:	697b      	ldr	r3, [r7, #20]
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	da01      	bge.n	8023b20 <lfs_bd_flush+0xc8>
                return res;
 8023b1c:	697b      	ldr	r3, [r7, #20]
 8023b1e:	e00a      	b.n	8023b36 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023b20:	697b      	ldr	r3, [r7, #20]
 8023b22:	2b00      	cmp	r3, #0
 8023b24:	d002      	beq.n	8023b2c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023b26:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023b2a:	e004      	b.n	8023b36 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8023b2c:	68b9      	ldr	r1, [r7, #8]
 8023b2e:	68f8      	ldr	r0, [r7, #12]
 8023b30:	f7ff fde5 	bl	80236fe <lfs_cache_zero>
    }

    return 0;
 8023b34:	2300      	movs	r3, #0
}
 8023b36:	4618      	mov	r0, r3
 8023b38:	3720      	adds	r7, #32
 8023b3a:	46bd      	mov	sp, r7
 8023b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8023b3e:	bf00      	nop
 8023b40:	0803345c 	.word	0x0803345c
 8023b44:	080346dc 	.word	0x080346dc
 8023b48:	0803341c 	.word	0x0803341c
 8023b4c:	08033450 	.word	0x08033450

08023b50 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023b50:	b580      	push	{r7, lr}
 8023b52:	b086      	sub	sp, #24
 8023b54:	af00      	add	r7, sp, #0
 8023b56:	60f8      	str	r0, [r7, #12]
 8023b58:	60b9      	str	r1, [r7, #8]
 8023b5a:	607a      	str	r2, [r7, #4]
 8023b5c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8023b5e:	6879      	ldr	r1, [r7, #4]
 8023b60:	68f8      	ldr	r0, [r7, #12]
 8023b62:	f7ff fdbd 	bl	80236e0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023b66:	78fb      	ldrb	r3, [r7, #3]
 8023b68:	687a      	ldr	r2, [r7, #4]
 8023b6a:	68b9      	ldr	r1, [r7, #8]
 8023b6c:	68f8      	ldr	r0, [r7, #12]
 8023b6e:	f7ff ff73 	bl	8023a58 <lfs_bd_flush>
 8023b72:	6178      	str	r0, [r7, #20]
    if (err) {
 8023b74:	697b      	ldr	r3, [r7, #20]
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	d001      	beq.n	8023b7e <lfs_bd_sync+0x2e>
        return err;
 8023b7a:	697b      	ldr	r3, [r7, #20]
 8023b7c:	e011      	b.n	8023ba2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8023b7e:	68fb      	ldr	r3, [r7, #12]
 8023b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b82:	691b      	ldr	r3, [r3, #16]
 8023b84:	68fa      	ldr	r2, [r7, #12]
 8023b86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023b88:	4610      	mov	r0, r2
 8023b8a:	4798      	blx	r3
 8023b8c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8023b8e:	697b      	ldr	r3, [r7, #20]
 8023b90:	2b00      	cmp	r3, #0
 8023b92:	dd05      	ble.n	8023ba0 <lfs_bd_sync+0x50>
 8023b94:	4b05      	ldr	r3, [pc, #20]	; (8023bac <lfs_bd_sync+0x5c>)
 8023b96:	4a06      	ldr	r2, [pc, #24]	; (8023bb0 <lfs_bd_sync+0x60>)
 8023b98:	21c8      	movs	r1, #200	; 0xc8
 8023b9a:	4806      	ldr	r0, [pc, #24]	; (8023bb4 <lfs_bd_sync+0x64>)
 8023b9c:	f008 fc2e 	bl	802c3fc <__assert_func>
    return err;
 8023ba0:	697b      	ldr	r3, [r7, #20]
}
 8023ba2:	4618      	mov	r0, r3
 8023ba4:	3718      	adds	r7, #24
 8023ba6:	46bd      	mov	sp, r7
 8023ba8:	bd80      	pop	{r7, pc}
 8023baa:	bf00      	nop
 8023bac:	08033450 	.word	0x08033450
 8023bb0:	080346ec 	.word	0x080346ec
 8023bb4:	0803341c 	.word	0x0803341c

08023bb8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023bb8:	b580      	push	{r7, lr}
 8023bba:	b088      	sub	sp, #32
 8023bbc:	af00      	add	r7, sp, #0
 8023bbe:	60f8      	str	r0, [r7, #12]
 8023bc0:	60b9      	str	r1, [r7, #8]
 8023bc2:	607a      	str	r2, [r7, #4]
 8023bc4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8023bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023bc8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8023bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023bcc:	f113 0f02 	cmn.w	r3, #2
 8023bd0:	d00b      	beq.n	8023bea <lfs_bd_prog+0x32>
 8023bd2:	68fb      	ldr	r3, [r7, #12]
 8023bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bd6:	6a1b      	ldr	r3, [r3, #32]
 8023bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023bda:	429a      	cmp	r2, r3
 8023bdc:	d305      	bcc.n	8023bea <lfs_bd_prog+0x32>
 8023bde:	4b47      	ldr	r3, [pc, #284]	; (8023cfc <lfs_bd_prog+0x144>)
 8023be0:	4a47      	ldr	r2, [pc, #284]	; (8023d00 <lfs_bd_prog+0x148>)
 8023be2:	21d3      	movs	r1, #211	; 0xd3
 8023be4:	4847      	ldr	r0, [pc, #284]	; (8023d04 <lfs_bd_prog+0x14c>)
 8023be6:	f008 fc09 	bl	802c3fc <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8023bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023bee:	441a      	add	r2, r3
 8023bf0:	68fb      	ldr	r3, [r7, #12]
 8023bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bf4:	69db      	ldr	r3, [r3, #28]
 8023bf6:	429a      	cmp	r2, r3
 8023bf8:	d977      	bls.n	8023cea <lfs_bd_prog+0x132>
 8023bfa:	4b43      	ldr	r3, [pc, #268]	; (8023d08 <lfs_bd_prog+0x150>)
 8023bfc:	4a40      	ldr	r2, [pc, #256]	; (8023d00 <lfs_bd_prog+0x148>)
 8023bfe:	21d4      	movs	r1, #212	; 0xd4
 8023c00:	4840      	ldr	r0, [pc, #256]	; (8023d04 <lfs_bd_prog+0x14c>)
 8023c02:	f008 fbfb 	bl	802c3fc <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8023c06:	68bb      	ldr	r3, [r7, #8]
 8023c08:	681b      	ldr	r3, [r3, #0]
 8023c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023c0c:	429a      	cmp	r2, r3
 8023c0e:	d151      	bne.n	8023cb4 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8023c10:	68bb      	ldr	r3, [r7, #8]
 8023c12:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8023c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023c16:	429a      	cmp	r2, r3
 8023c18:	d34c      	bcc.n	8023cb4 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8023c1a:	68bb      	ldr	r3, [r7, #8]
 8023c1c:	685a      	ldr	r2, [r3, #4]
 8023c1e:	68fb      	ldr	r3, [r7, #12]
 8023c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023c24:	4413      	add	r3, r2
                off >= pcache->off &&
 8023c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023c28:	429a      	cmp	r2, r3
 8023c2a:	d243      	bcs.n	8023cb4 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8023c2c:	68fb      	ldr	r3, [r7, #12]
 8023c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023c32:	68bb      	ldr	r3, [r7, #8]
 8023c34:	6859      	ldr	r1, [r3, #4]
 8023c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c38:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8023c3a:	4413      	add	r3, r2
 8023c3c:	4619      	mov	r1, r3
 8023c3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023c40:	f7ff fc98 	bl	8023574 <lfs_min>
 8023c44:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8023c46:	68bb      	ldr	r3, [r7, #8]
 8023c48:	68da      	ldr	r2, [r3, #12]
 8023c4a:	68bb      	ldr	r3, [r7, #8]
 8023c4c:	685b      	ldr	r3, [r3, #4]
 8023c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023c50:	1acb      	subs	r3, r1, r3
 8023c52:	4413      	add	r3, r2
 8023c54:	69ba      	ldr	r2, [r7, #24]
 8023c56:	69f9      	ldr	r1, [r7, #28]
 8023c58:	4618      	mov	r0, r3
 8023c5a:	f009 ff74 	bl	802db46 <memcpy>

            data += diff;
 8023c5e:	69fa      	ldr	r2, [r7, #28]
 8023c60:	69bb      	ldr	r3, [r7, #24]
 8023c62:	4413      	add	r3, r2
 8023c64:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023c68:	69bb      	ldr	r3, [r7, #24]
 8023c6a:	4413      	add	r3, r2
 8023c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8023c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023c70:	69bb      	ldr	r3, [r7, #24]
 8023c72:	1ad3      	subs	r3, r2, r3
 8023c74:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8023c76:	68bb      	ldr	r3, [r7, #8]
 8023c78:	6898      	ldr	r0, [r3, #8]
 8023c7a:	68bb      	ldr	r3, [r7, #8]
 8023c7c:	685b      	ldr	r3, [r3, #4]
 8023c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023c80:	1ad3      	subs	r3, r2, r3
 8023c82:	4619      	mov	r1, r3
 8023c84:	f7ff fc66 	bl	8023554 <lfs_max>
 8023c88:	4602      	mov	r2, r0
 8023c8a:	68bb      	ldr	r3, [r7, #8]
 8023c8c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8023c8e:	68bb      	ldr	r3, [r7, #8]
 8023c90:	689a      	ldr	r2, [r3, #8]
 8023c92:	68fb      	ldr	r3, [r7, #12]
 8023c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023c98:	429a      	cmp	r2, r3
 8023c9a:	d126      	bne.n	8023cea <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023c9c:	78fb      	ldrb	r3, [r7, #3]
 8023c9e:	687a      	ldr	r2, [r7, #4]
 8023ca0:	68b9      	ldr	r1, [r7, #8]
 8023ca2:	68f8      	ldr	r0, [r7, #12]
 8023ca4:	f7ff fed8 	bl	8023a58 <lfs_bd_flush>
 8023ca8:	6178      	str	r0, [r7, #20]
                if (err) {
 8023caa:	697b      	ldr	r3, [r7, #20]
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	d01c      	beq.n	8023cea <lfs_bd_prog+0x132>
                    return err;
 8023cb0:	697b      	ldr	r3, [r7, #20]
 8023cb2:	e01e      	b.n	8023cf2 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8023cb4:	68bb      	ldr	r3, [r7, #8]
 8023cb6:	681b      	ldr	r3, [r3, #0]
 8023cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023cbc:	d005      	beq.n	8023cca <lfs_bd_prog+0x112>
 8023cbe:	4b13      	ldr	r3, [pc, #76]	; (8023d0c <lfs_bd_prog+0x154>)
 8023cc0:	4a0f      	ldr	r2, [pc, #60]	; (8023d00 <lfs_bd_prog+0x148>)
 8023cc2:	21f1      	movs	r1, #241	; 0xf1
 8023cc4:	480f      	ldr	r0, [pc, #60]	; (8023d04 <lfs_bd_prog+0x14c>)
 8023cc6:	f008 fb99 	bl	802c3fc <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8023cca:	68bb      	ldr	r3, [r7, #8]
 8023ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023cce:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8023cd0:	68fb      	ldr	r3, [r7, #12]
 8023cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023cd4:	699b      	ldr	r3, [r3, #24]
 8023cd6:	4619      	mov	r1, r3
 8023cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8023cda:	f7ff fc5b 	bl	8023594 <lfs_aligndown>
 8023cde:	4602      	mov	r2, r0
 8023ce0:	68bb      	ldr	r3, [r7, #8]
 8023ce2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8023ce4:	68bb      	ldr	r3, [r7, #8]
 8023ce6:	2200      	movs	r2, #0
 8023ce8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8023cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023cec:	2b00      	cmp	r3, #0
 8023cee:	d18a      	bne.n	8023c06 <lfs_bd_prog+0x4e>
    }

    return 0;
 8023cf0:	2300      	movs	r3, #0
}
 8023cf2:	4618      	mov	r0, r3
 8023cf4:	3720      	adds	r7, #32
 8023cf6:	46bd      	mov	sp, r7
 8023cf8:	bd80      	pop	{r7, pc}
 8023cfa:	bf00      	nop
 8023cfc:	08033484 	.word	0x08033484
 8023d00:	080346f8 	.word	0x080346f8
 8023d04:	0803341c 	.word	0x0803341c
 8023d08:	080334c0 	.word	0x080334c0
 8023d0c:	080334e4 	.word	0x080334e4

08023d10 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8023d10:	b580      	push	{r7, lr}
 8023d12:	b084      	sub	sp, #16
 8023d14:	af00      	add	r7, sp, #0
 8023d16:	6078      	str	r0, [r7, #4]
 8023d18:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023d1e:	6a1b      	ldr	r3, [r3, #32]
 8023d20:	683a      	ldr	r2, [r7, #0]
 8023d22:	429a      	cmp	r2, r3
 8023d24:	d305      	bcc.n	8023d32 <lfs_bd_erase+0x22>
 8023d26:	4b0f      	ldr	r3, [pc, #60]	; (8023d64 <lfs_bd_erase+0x54>)
 8023d28:	4a0f      	ldr	r2, [pc, #60]	; (8023d68 <lfs_bd_erase+0x58>)
 8023d2a:	21ff      	movs	r1, #255	; 0xff
 8023d2c:	480f      	ldr	r0, [pc, #60]	; (8023d6c <lfs_bd_erase+0x5c>)
 8023d2e:	f008 fb65 	bl	802c3fc <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8023d32:	687b      	ldr	r3, [r7, #4]
 8023d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023d36:	68db      	ldr	r3, [r3, #12]
 8023d38:	687a      	ldr	r2, [r7, #4]
 8023d3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023d3c:	6839      	ldr	r1, [r7, #0]
 8023d3e:	4610      	mov	r0, r2
 8023d40:	4798      	blx	r3
 8023d42:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8023d44:	68fb      	ldr	r3, [r7, #12]
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	dd06      	ble.n	8023d58 <lfs_bd_erase+0x48>
 8023d4a:	4b09      	ldr	r3, [pc, #36]	; (8023d70 <lfs_bd_erase+0x60>)
 8023d4c:	4a06      	ldr	r2, [pc, #24]	; (8023d68 <lfs_bd_erase+0x58>)
 8023d4e:	f240 1101 	movw	r1, #257	; 0x101
 8023d52:	4806      	ldr	r0, [pc, #24]	; (8023d6c <lfs_bd_erase+0x5c>)
 8023d54:	f008 fb52 	bl	802c3fc <__assert_func>
    return err;
 8023d58:	68fb      	ldr	r3, [r7, #12]
}
 8023d5a:	4618      	mov	r0, r3
 8023d5c:	3710      	adds	r7, #16
 8023d5e:	46bd      	mov	sp, r7
 8023d60:	bd80      	pop	{r7, pc}
 8023d62:	bf00      	nop
 8023d64:	080333fc 	.word	0x080333fc
 8023d68:	08034704 	.word	0x08034704
 8023d6c:	0803341c 	.word	0x0803341c
 8023d70:	08033450 	.word	0x08033450

08023d74 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8023d74:	b480      	push	{r7}
 8023d76:	b085      	sub	sp, #20
 8023d78:	af00      	add	r7, sp, #0
 8023d7a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8023d7c:	687b      	ldr	r3, [r7, #4]
 8023d7e:	681b      	ldr	r3, [r3, #0]
 8023d80:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	685a      	ldr	r2, [r3, #4]
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	3304      	adds	r3, #4
 8023d8e:	68fa      	ldr	r2, [r7, #12]
 8023d90:	601a      	str	r2, [r3, #0]
}
 8023d92:	bf00      	nop
 8023d94:	3714      	adds	r7, #20
 8023d96:	46bd      	mov	sp, r7
 8023d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d9c:	4770      	bx	lr

08023d9e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8023d9e:	b480      	push	{r7}
 8023da0:	b083      	sub	sp, #12
 8023da2:	af00      	add	r7, sp, #0
 8023da4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8023da6:	687b      	ldr	r3, [r7, #4]
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023dae:	d005      	beq.n	8023dbc <lfs_pair_isnull+0x1e>
 8023db0:	687b      	ldr	r3, [r7, #4]
 8023db2:	3304      	adds	r3, #4
 8023db4:	681b      	ldr	r3, [r3, #0]
 8023db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023dba:	d101      	bne.n	8023dc0 <lfs_pair_isnull+0x22>
 8023dbc:	2301      	movs	r3, #1
 8023dbe:	e000      	b.n	8023dc2 <lfs_pair_isnull+0x24>
 8023dc0:	2300      	movs	r3, #0
 8023dc2:	f003 0301 	and.w	r3, r3, #1
 8023dc6:	b2db      	uxtb	r3, r3
}
 8023dc8:	4618      	mov	r0, r3
 8023dca:	370c      	adds	r7, #12
 8023dcc:	46bd      	mov	sp, r7
 8023dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dd2:	4770      	bx	lr

08023dd4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023dd4:	b480      	push	{r7}
 8023dd6:	b083      	sub	sp, #12
 8023dd8:	af00      	add	r7, sp, #0
 8023dda:	6078      	str	r0, [r7, #4]
 8023ddc:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	681a      	ldr	r2, [r3, #0]
 8023de2:	683b      	ldr	r3, [r7, #0]
 8023de4:	681b      	ldr	r3, [r3, #0]
 8023de6:	429a      	cmp	r2, r3
 8023de8:	d017      	beq.n	8023e1a <lfs_pair_cmp+0x46>
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	3304      	adds	r3, #4
 8023dee:	681a      	ldr	r2, [r3, #0]
 8023df0:	683b      	ldr	r3, [r7, #0]
 8023df2:	3304      	adds	r3, #4
 8023df4:	681b      	ldr	r3, [r3, #0]
 8023df6:	429a      	cmp	r2, r3
 8023df8:	d00f      	beq.n	8023e1a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	681a      	ldr	r2, [r3, #0]
 8023dfe:	683b      	ldr	r3, [r7, #0]
 8023e00:	3304      	adds	r3, #4
 8023e02:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023e04:	429a      	cmp	r2, r3
 8023e06:	d008      	beq.n	8023e1a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	3304      	adds	r3, #4
 8023e0c:	681a      	ldr	r2, [r3, #0]
 8023e0e:	683b      	ldr	r3, [r7, #0]
 8023e10:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023e12:	429a      	cmp	r2, r3
 8023e14:	d001      	beq.n	8023e1a <lfs_pair_cmp+0x46>
 8023e16:	2301      	movs	r3, #1
 8023e18:	e000      	b.n	8023e1c <lfs_pair_cmp+0x48>
 8023e1a:	2300      	movs	r3, #0
}
 8023e1c:	4618      	mov	r0, r3
 8023e1e:	370c      	adds	r7, #12
 8023e20:	46bd      	mov	sp, r7
 8023e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e26:	4770      	bx	lr

08023e28 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023e28:	b480      	push	{r7}
 8023e2a:	b083      	sub	sp, #12
 8023e2c:	af00      	add	r7, sp, #0
 8023e2e:	6078      	str	r0, [r7, #4]
 8023e30:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	681a      	ldr	r2, [r3, #0]
 8023e36:	683b      	ldr	r3, [r7, #0]
 8023e38:	681b      	ldr	r3, [r3, #0]
 8023e3a:	429a      	cmp	r2, r3
 8023e3c:	d107      	bne.n	8023e4e <lfs_pair_sync+0x26>
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	3304      	adds	r3, #4
 8023e42:	681a      	ldr	r2, [r3, #0]
 8023e44:	683b      	ldr	r3, [r7, #0]
 8023e46:	3304      	adds	r3, #4
 8023e48:	681b      	ldr	r3, [r3, #0]
 8023e4a:	429a      	cmp	r2, r3
 8023e4c:	d00d      	beq.n	8023e6a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023e4e:	687b      	ldr	r3, [r7, #4]
 8023e50:	681a      	ldr	r2, [r3, #0]
 8023e52:	683b      	ldr	r3, [r7, #0]
 8023e54:	3304      	adds	r3, #4
 8023e56:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023e58:	429a      	cmp	r2, r3
 8023e5a:	d108      	bne.n	8023e6e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023e5c:	687b      	ldr	r3, [r7, #4]
 8023e5e:	3304      	adds	r3, #4
 8023e60:	681a      	ldr	r2, [r3, #0]
 8023e62:	683b      	ldr	r3, [r7, #0]
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	429a      	cmp	r2, r3
 8023e68:	d101      	bne.n	8023e6e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023e6a:	2301      	movs	r3, #1
 8023e6c:	e000      	b.n	8023e70 <lfs_pair_sync+0x48>
 8023e6e:	2300      	movs	r3, #0
 8023e70:	f003 0301 	and.w	r3, r3, #1
 8023e74:	b2db      	uxtb	r3, r3
}
 8023e76:	4618      	mov	r0, r3
 8023e78:	370c      	adds	r7, #12
 8023e7a:	46bd      	mov	sp, r7
 8023e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e80:	4770      	bx	lr

08023e82 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8023e82:	b590      	push	{r4, r7, lr}
 8023e84:	b083      	sub	sp, #12
 8023e86:	af00      	add	r7, sp, #0
 8023e88:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8023e8a:	687b      	ldr	r3, [r7, #4]
 8023e8c:	681b      	ldr	r3, [r3, #0]
 8023e8e:	4618      	mov	r0, r3
 8023e90:	f7ff fbe0 	bl	8023654 <lfs_fromle32>
 8023e94:	4602      	mov	r2, r0
 8023e96:	687b      	ldr	r3, [r7, #4]
 8023e98:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	3304      	adds	r3, #4
 8023e9e:	681a      	ldr	r2, [r3, #0]
 8023ea0:	687b      	ldr	r3, [r7, #4]
 8023ea2:	1d1c      	adds	r4, r3, #4
 8023ea4:	4610      	mov	r0, r2
 8023ea6:	f7ff fbd5 	bl	8023654 <lfs_fromle32>
 8023eaa:	4603      	mov	r3, r0
 8023eac:	6023      	str	r3, [r4, #0]
}
 8023eae:	bf00      	nop
 8023eb0:	370c      	adds	r7, #12
 8023eb2:	46bd      	mov	sp, r7
 8023eb4:	bd90      	pop	{r4, r7, pc}

08023eb6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8023eb6:	b590      	push	{r4, r7, lr}
 8023eb8:	b083      	sub	sp, #12
 8023eba:	af00      	add	r7, sp, #0
 8023ebc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8023ebe:	687b      	ldr	r3, [r7, #4]
 8023ec0:	681b      	ldr	r3, [r3, #0]
 8023ec2:	4618      	mov	r0, r3
 8023ec4:	f7ff fbd1 	bl	802366a <lfs_tole32>
 8023ec8:	4602      	mov	r2, r0
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	3304      	adds	r3, #4
 8023ed2:	681a      	ldr	r2, [r3, #0]
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	1d1c      	adds	r4, r3, #4
 8023ed8:	4610      	mov	r0, r2
 8023eda:	f7ff fbc6 	bl	802366a <lfs_tole32>
 8023ede:	4603      	mov	r3, r0
 8023ee0:	6023      	str	r3, [r4, #0]
}
 8023ee2:	bf00      	nop
 8023ee4:	370c      	adds	r7, #12
 8023ee6:	46bd      	mov	sp, r7
 8023ee8:	bd90      	pop	{r4, r7, pc}

08023eea <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8023eea:	b480      	push	{r7}
 8023eec:	b083      	sub	sp, #12
 8023eee:	af00      	add	r7, sp, #0
 8023ef0:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8023ef2:	687b      	ldr	r3, [r7, #4]
 8023ef4:	43db      	mvns	r3, r3
 8023ef6:	0fdb      	lsrs	r3, r3, #31
 8023ef8:	b2db      	uxtb	r3, r3
}
 8023efa:	4618      	mov	r0, r3
 8023efc:	370c      	adds	r7, #12
 8023efe:	46bd      	mov	sp, r7
 8023f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f04:	4770      	bx	lr

08023f06 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8023f06:	b480      	push	{r7}
 8023f08:	b083      	sub	sp, #12
 8023f0a:	af00      	add	r7, sp, #0
 8023f0c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8023f0e:	687b      	ldr	r3, [r7, #4]
 8023f10:	059b      	lsls	r3, r3, #22
 8023f12:	159b      	asrs	r3, r3, #22
 8023f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f18:	bf0c      	ite	eq
 8023f1a:	2301      	moveq	r3, #1
 8023f1c:	2300      	movne	r3, #0
 8023f1e:	b2db      	uxtb	r3, r3
}
 8023f20:	4618      	mov	r0, r3
 8023f22:	370c      	adds	r7, #12
 8023f24:	46bd      	mov	sp, r7
 8023f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f2a:	4770      	bx	lr

08023f2c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8023f2c:	b480      	push	{r7}
 8023f2e:	b083      	sub	sp, #12
 8023f30:	af00      	add	r7, sp, #0
 8023f32:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8023f34:	687b      	ldr	r3, [r7, #4]
 8023f36:	0d1b      	lsrs	r3, r3, #20
 8023f38:	b29b      	uxth	r3, r3
 8023f3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8023f3e:	b29b      	uxth	r3, r3
}
 8023f40:	4618      	mov	r0, r3
 8023f42:	370c      	adds	r7, #12
 8023f44:	46bd      	mov	sp, r7
 8023f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f4a:	4770      	bx	lr

08023f4c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8023f4c:	b480      	push	{r7}
 8023f4e:	b083      	sub	sp, #12
 8023f50:	af00      	add	r7, sp, #0
 8023f52:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	0d1b      	lsrs	r3, r3, #20
 8023f58:	b29b      	uxth	r3, r3
 8023f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8023f5e:	b29b      	uxth	r3, r3
}
 8023f60:	4618      	mov	r0, r3
 8023f62:	370c      	adds	r7, #12
 8023f64:	46bd      	mov	sp, r7
 8023f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f6a:	4770      	bx	lr

08023f6c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8023f6c:	b480      	push	{r7}
 8023f6e:	b083      	sub	sp, #12
 8023f70:	af00      	add	r7, sp, #0
 8023f72:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8023f74:	687b      	ldr	r3, [r7, #4]
 8023f76:	0d1b      	lsrs	r3, r3, #20
 8023f78:	b2db      	uxtb	r3, r3
}
 8023f7a:	4618      	mov	r0, r3
 8023f7c:	370c      	adds	r7, #12
 8023f7e:	46bd      	mov	sp, r7
 8023f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f84:	4770      	bx	lr

08023f86 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8023f86:	b580      	push	{r7, lr}
 8023f88:	b082      	sub	sp, #8
 8023f8a:	af00      	add	r7, sp, #0
 8023f8c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8023f8e:	6878      	ldr	r0, [r7, #4]
 8023f90:	f7ff ffec 	bl	8023f6c <lfs_tag_chunk>
 8023f94:	4603      	mov	r3, r0
 8023f96:	b25b      	sxtb	r3, r3
}
 8023f98:	4618      	mov	r0, r3
 8023f9a:	3708      	adds	r7, #8
 8023f9c:	46bd      	mov	sp, r7
 8023f9e:	bd80      	pop	{r7, pc}

08023fa0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8023fa0:	b480      	push	{r7}
 8023fa2:	b083      	sub	sp, #12
 8023fa4:	af00      	add	r7, sp, #0
 8023fa6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	0a9b      	lsrs	r3, r3, #10
 8023fac:	b29b      	uxth	r3, r3
 8023fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8023fb2:	b29b      	uxth	r3, r3
}
 8023fb4:	4618      	mov	r0, r3
 8023fb6:	370c      	adds	r7, #12
 8023fb8:	46bd      	mov	sp, r7
 8023fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fbe:	4770      	bx	lr

08023fc0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8023fc0:	b480      	push	{r7}
 8023fc2:	b083      	sub	sp, #12
 8023fc4:	af00      	add	r7, sp, #0
 8023fc6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8023fc8:	687b      	ldr	r3, [r7, #4]
 8023fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8023fce:	4618      	mov	r0, r3
 8023fd0:	370c      	adds	r7, #12
 8023fd2:	46bd      	mov	sp, r7
 8023fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fd8:	4770      	bx	lr

08023fda <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8023fda:	b580      	push	{r7, lr}
 8023fdc:	b082      	sub	sp, #8
 8023fde:	af00      	add	r7, sp, #0
 8023fe0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8023fe2:	6878      	ldr	r0, [r7, #4]
 8023fe4:	f7ff ff8f 	bl	8023f06 <lfs_tag_isdelete>
 8023fe8:	4603      	mov	r3, r0
 8023fea:	461a      	mov	r2, r3
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	4413      	add	r3, r2
 8023ff0:	4618      	mov	r0, r3
 8023ff2:	f7ff ffe5 	bl	8023fc0 <lfs_tag_size>
 8023ff6:	4603      	mov	r3, r0
 8023ff8:	3304      	adds	r3, #4
}
 8023ffa:	4618      	mov	r0, r3
 8023ffc:	3708      	adds	r7, #8
 8023ffe:	46bd      	mov	sp, r7
 8024000:	bd80      	pop	{r7, pc}

08024002 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8024002:	b480      	push	{r7}
 8024004:	b085      	sub	sp, #20
 8024006:	af00      	add	r7, sp, #0
 8024008:	6078      	str	r0, [r7, #4]
 802400a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 802400c:	2300      	movs	r3, #0
 802400e:	60fb      	str	r3, [r7, #12]
 8024010:	e012      	b.n	8024038 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8024012:	68fb      	ldr	r3, [r7, #12]
 8024014:	009b      	lsls	r3, r3, #2
 8024016:	687a      	ldr	r2, [r7, #4]
 8024018:	4413      	add	r3, r2
 802401a:	6819      	ldr	r1, [r3, #0]
 802401c:	68fb      	ldr	r3, [r7, #12]
 802401e:	009b      	lsls	r3, r3, #2
 8024020:	683a      	ldr	r2, [r7, #0]
 8024022:	4413      	add	r3, r2
 8024024:	681a      	ldr	r2, [r3, #0]
 8024026:	68fb      	ldr	r3, [r7, #12]
 8024028:	009b      	lsls	r3, r3, #2
 802402a:	6878      	ldr	r0, [r7, #4]
 802402c:	4403      	add	r3, r0
 802402e:	404a      	eors	r2, r1
 8024030:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8024032:	68fb      	ldr	r3, [r7, #12]
 8024034:	3301      	adds	r3, #1
 8024036:	60fb      	str	r3, [r7, #12]
 8024038:	68fb      	ldr	r3, [r7, #12]
 802403a:	2b02      	cmp	r3, #2
 802403c:	dde9      	ble.n	8024012 <lfs_gstate_xor+0x10>
    }
}
 802403e:	bf00      	nop
 8024040:	bf00      	nop
 8024042:	3714      	adds	r7, #20
 8024044:	46bd      	mov	sp, r7
 8024046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802404a:	4770      	bx	lr

0802404c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 802404c:	b480      	push	{r7}
 802404e:	b085      	sub	sp, #20
 8024050:	af00      	add	r7, sp, #0
 8024052:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8024054:	2300      	movs	r3, #0
 8024056:	60fb      	str	r3, [r7, #12]
 8024058:	e00b      	b.n	8024072 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 802405a:	68fb      	ldr	r3, [r7, #12]
 802405c:	009b      	lsls	r3, r3, #2
 802405e:	687a      	ldr	r2, [r7, #4]
 8024060:	4413      	add	r3, r2
 8024062:	681b      	ldr	r3, [r3, #0]
 8024064:	2b00      	cmp	r3, #0
 8024066:	d001      	beq.n	802406c <lfs_gstate_iszero+0x20>
            return false;
 8024068:	2300      	movs	r3, #0
 802406a:	e006      	b.n	802407a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 802406c:	68fb      	ldr	r3, [r7, #12]
 802406e:	3301      	adds	r3, #1
 8024070:	60fb      	str	r3, [r7, #12]
 8024072:	68fb      	ldr	r3, [r7, #12]
 8024074:	2b02      	cmp	r3, #2
 8024076:	ddf0      	ble.n	802405a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8024078:	2301      	movs	r3, #1
}
 802407a:	4618      	mov	r0, r3
 802407c:	3714      	adds	r7, #20
 802407e:	46bd      	mov	sp, r7
 8024080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024084:	4770      	bx	lr

08024086 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8024086:	b580      	push	{r7, lr}
 8024088:	b082      	sub	sp, #8
 802408a:	af00      	add	r7, sp, #0
 802408c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	4618      	mov	r0, r3
 8024094:	f7ff ff94 	bl	8023fc0 <lfs_tag_size>
 8024098:	4603      	mov	r3, r0
 802409a:	2b00      	cmp	r3, #0
 802409c:	bf14      	ite	ne
 802409e:	2301      	movne	r3, #1
 80240a0:	2300      	moveq	r3, #0
 80240a2:	b2db      	uxtb	r3, r3
}
 80240a4:	4618      	mov	r0, r3
 80240a6:	3708      	adds	r7, #8
 80240a8:	46bd      	mov	sp, r7
 80240aa:	bd80      	pop	{r7, pc}

080240ac <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b082      	sub	sp, #8
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	681b      	ldr	r3, [r3, #0]
 80240b8:	4618      	mov	r0, r3
 80240ba:	f7ff ff81 	bl	8023fc0 <lfs_tag_size>
 80240be:	4603      	mov	r3, r0
 80240c0:	b2db      	uxtb	r3, r3
}
 80240c2:	4618      	mov	r0, r3
 80240c4:	3708      	adds	r7, #8
 80240c6:	46bd      	mov	sp, r7
 80240c8:	bd80      	pop	{r7, pc}

080240ca <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80240ca:	b580      	push	{r7, lr}
 80240cc:	b082      	sub	sp, #8
 80240ce:	af00      	add	r7, sp, #0
 80240d0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	681b      	ldr	r3, [r3, #0]
 80240d6:	4618      	mov	r0, r3
 80240d8:	f7ff ff28 	bl	8023f2c <lfs_tag_type1>
 80240dc:	4603      	mov	r3, r0
 80240de:	2b00      	cmp	r3, #0
 80240e0:	bf14      	ite	ne
 80240e2:	2301      	movne	r3, #1
 80240e4:	2300      	moveq	r3, #0
 80240e6:	b2db      	uxtb	r3, r3
}
 80240e8:	4618      	mov	r0, r3
 80240ea:	3708      	adds	r7, #8
 80240ec:	46bd      	mov	sp, r7
 80240ee:	bd80      	pop	{r7, pc}

080240f0 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80240f0:	b580      	push	{r7, lr}
 80240f2:	b082      	sub	sp, #8
 80240f4:	af00      	add	r7, sp, #0
 80240f6:	6078      	str	r0, [r7, #4]
 80240f8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	681b      	ldr	r3, [r3, #0]
 80240fe:	4618      	mov	r0, r3
 8024100:	f7ff ff14 	bl	8023f2c <lfs_tag_type1>
 8024104:	4603      	mov	r3, r0
 8024106:	2b00      	cmp	r3, #0
 8024108:	d00a      	beq.n	8024120 <lfs_gstate_hasmovehere+0x30>
 802410a:	687b      	ldr	r3, [r7, #4]
 802410c:	3304      	adds	r3, #4
 802410e:	6839      	ldr	r1, [r7, #0]
 8024110:	4618      	mov	r0, r3
 8024112:	f7ff fe5f 	bl	8023dd4 <lfs_pair_cmp>
 8024116:	4603      	mov	r3, r0
 8024118:	2b00      	cmp	r3, #0
 802411a:	d101      	bne.n	8024120 <lfs_gstate_hasmovehere+0x30>
 802411c:	2301      	movs	r3, #1
 802411e:	e000      	b.n	8024122 <lfs_gstate_hasmovehere+0x32>
 8024120:	2300      	movs	r3, #0
 8024122:	f003 0301 	and.w	r3, r3, #1
 8024126:	b2db      	uxtb	r3, r3
}
 8024128:	4618      	mov	r0, r3
 802412a:	3708      	adds	r7, #8
 802412c:	46bd      	mov	sp, r7
 802412e:	bd80      	pop	{r7, pc}

08024130 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8024130:	b580      	push	{r7, lr}
 8024132:	b082      	sub	sp, #8
 8024134:	af00      	add	r7, sp, #0
 8024136:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	681b      	ldr	r3, [r3, #0]
 802413c:	4618      	mov	r0, r3
 802413e:	f7ff fa89 	bl	8023654 <lfs_fromle32>
 8024142:	4602      	mov	r2, r0
 8024144:	687b      	ldr	r3, [r7, #4]
 8024146:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	685b      	ldr	r3, [r3, #4]
 802414c:	4618      	mov	r0, r3
 802414e:	f7ff fa81 	bl	8023654 <lfs_fromle32>
 8024152:	4602      	mov	r2, r0
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	689b      	ldr	r3, [r3, #8]
 802415c:	4618      	mov	r0, r3
 802415e:	f7ff fa79 	bl	8023654 <lfs_fromle32>
 8024162:	4602      	mov	r2, r0
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	609a      	str	r2, [r3, #8]
}
 8024168:	bf00      	nop
 802416a:	3708      	adds	r7, #8
 802416c:	46bd      	mov	sp, r7
 802416e:	bd80      	pop	{r7, pc}

08024170 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8024170:	b580      	push	{r7, lr}
 8024172:	b082      	sub	sp, #8
 8024174:	af00      	add	r7, sp, #0
 8024176:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	4618      	mov	r0, r3
 802417e:	f7ff fa74 	bl	802366a <lfs_tole32>
 8024182:	4602      	mov	r2, r0
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8024188:	687b      	ldr	r3, [r7, #4]
 802418a:	685b      	ldr	r3, [r3, #4]
 802418c:	4618      	mov	r0, r3
 802418e:	f7ff fa6c 	bl	802366a <lfs_tole32>
 8024192:	4602      	mov	r2, r0
 8024194:	687b      	ldr	r3, [r7, #4]
 8024196:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	689b      	ldr	r3, [r3, #8]
 802419c:	4618      	mov	r0, r3
 802419e:	f7ff fa64 	bl	802366a <lfs_tole32>
 80241a2:	4602      	mov	r2, r0
 80241a4:	687b      	ldr	r3, [r7, #4]
 80241a6:	609a      	str	r2, [r3, #8]
}
 80241a8:	bf00      	nop
 80241aa:	3708      	adds	r7, #8
 80241ac:	46bd      	mov	sp, r7
 80241ae:	bd80      	pop	{r7, pc}

080241b0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80241b0:	b580      	push	{r7, lr}
 80241b2:	b082      	sub	sp, #8
 80241b4:	af00      	add	r7, sp, #0
 80241b6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	681b      	ldr	r3, [r3, #0]
 80241bc:	4618      	mov	r0, r3
 80241be:	f7ff fa49 	bl	8023654 <lfs_fromle32>
 80241c2:	4602      	mov	r2, r0
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	685b      	ldr	r3, [r3, #4]
 80241cc:	4618      	mov	r0, r3
 80241ce:	f7ff fa41 	bl	8023654 <lfs_fromle32>
 80241d2:	4602      	mov	r2, r0
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	605a      	str	r2, [r3, #4]
}
 80241d8:	bf00      	nop
 80241da:	3708      	adds	r7, #8
 80241dc:	46bd      	mov	sp, r7
 80241de:	bd80      	pop	{r7, pc}

080241e0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80241e0:	b580      	push	{r7, lr}
 80241e2:	b082      	sub	sp, #8
 80241e4:	af00      	add	r7, sp, #0
 80241e6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	681b      	ldr	r3, [r3, #0]
 80241ec:	4618      	mov	r0, r3
 80241ee:	f7ff fa3c 	bl	802366a <lfs_tole32>
 80241f2:	4602      	mov	r2, r0
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	685b      	ldr	r3, [r3, #4]
 80241fc:	4618      	mov	r0, r3
 80241fe:	f7ff fa34 	bl	802366a <lfs_tole32>
 8024202:	4602      	mov	r2, r0
 8024204:	687b      	ldr	r3, [r7, #4]
 8024206:	605a      	str	r2, [r3, #4]
}
 8024208:	bf00      	nop
 802420a:	3708      	adds	r7, #8
 802420c:	46bd      	mov	sp, r7
 802420e:	bd80      	pop	{r7, pc}

08024210 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8024210:	b580      	push	{r7, lr}
 8024212:	b082      	sub	sp, #8
 8024214:	af00      	add	r7, sp, #0
 8024216:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	4618      	mov	r0, r3
 802421e:	f7ff fa19 	bl	8023654 <lfs_fromle32>
 8024222:	4602      	mov	r2, r0
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8024228:	687b      	ldr	r3, [r7, #4]
 802422a:	685b      	ldr	r3, [r3, #4]
 802422c:	4618      	mov	r0, r3
 802422e:	f7ff fa11 	bl	8023654 <lfs_fromle32>
 8024232:	4602      	mov	r2, r0
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8024238:	687b      	ldr	r3, [r7, #4]
 802423a:	689b      	ldr	r3, [r3, #8]
 802423c:	4618      	mov	r0, r3
 802423e:	f7ff fa09 	bl	8023654 <lfs_fromle32>
 8024242:	4602      	mov	r2, r0
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8024248:	687b      	ldr	r3, [r7, #4]
 802424a:	68db      	ldr	r3, [r3, #12]
 802424c:	4618      	mov	r0, r3
 802424e:	f7ff fa01 	bl	8023654 <lfs_fromle32>
 8024252:	4602      	mov	r2, r0
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8024258:	687b      	ldr	r3, [r7, #4]
 802425a:	691b      	ldr	r3, [r3, #16]
 802425c:	4618      	mov	r0, r3
 802425e:	f7ff f9f9 	bl	8023654 <lfs_fromle32>
 8024262:	4602      	mov	r2, r0
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8024268:	687b      	ldr	r3, [r7, #4]
 802426a:	695b      	ldr	r3, [r3, #20]
 802426c:	4618      	mov	r0, r3
 802426e:	f7ff f9f1 	bl	8023654 <lfs_fromle32>
 8024272:	4602      	mov	r2, r0
 8024274:	687b      	ldr	r3, [r7, #4]
 8024276:	615a      	str	r2, [r3, #20]
}
 8024278:	bf00      	nop
 802427a:	3708      	adds	r7, #8
 802427c:	46bd      	mov	sp, r7
 802427e:	bd80      	pop	{r7, pc}

08024280 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8024280:	b580      	push	{r7, lr}
 8024282:	b082      	sub	sp, #8
 8024284:	af00      	add	r7, sp, #0
 8024286:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	681b      	ldr	r3, [r3, #0]
 802428c:	4618      	mov	r0, r3
 802428e:	f7ff f9ec 	bl	802366a <lfs_tole32>
 8024292:	4602      	mov	r2, r0
 8024294:	687b      	ldr	r3, [r7, #4]
 8024296:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	685b      	ldr	r3, [r3, #4]
 802429c:	4618      	mov	r0, r3
 802429e:	f7ff f9e4 	bl	802366a <lfs_tole32>
 80242a2:	4602      	mov	r2, r0
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	689b      	ldr	r3, [r3, #8]
 80242ac:	4618      	mov	r0, r3
 80242ae:	f7ff f9dc 	bl	802366a <lfs_tole32>
 80242b2:	4602      	mov	r2, r0
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	68db      	ldr	r3, [r3, #12]
 80242bc:	4618      	mov	r0, r3
 80242be:	f7ff f9d4 	bl	802366a <lfs_tole32>
 80242c2:	4602      	mov	r2, r0
 80242c4:	687b      	ldr	r3, [r7, #4]
 80242c6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80242c8:	687b      	ldr	r3, [r7, #4]
 80242ca:	691b      	ldr	r3, [r3, #16]
 80242cc:	4618      	mov	r0, r3
 80242ce:	f7ff f9cc 	bl	802366a <lfs_tole32>
 80242d2:	4602      	mov	r2, r0
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	695b      	ldr	r3, [r3, #20]
 80242dc:	4618      	mov	r0, r3
 80242de:	f7ff f9c4 	bl	802366a <lfs_tole32>
 80242e2:	4602      	mov	r2, r0
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	615a      	str	r2, [r3, #20]
}
 80242e8:	bf00      	nop
 80242ea:	3708      	adds	r7, #8
 80242ec:	46bd      	mov	sp, r7
 80242ee:	bd80      	pop	{r7, pc}

080242f0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80242f0:	b480      	push	{r7}
 80242f2:	b085      	sub	sp, #20
 80242f4:	af00      	add	r7, sp, #0
 80242f6:	6078      	str	r0, [r7, #4]
 80242f8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80242fa:	1d3b      	adds	r3, r7, #4
 80242fc:	60fb      	str	r3, [r7, #12]
 80242fe:	e009      	b.n	8024314 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8024300:	68fb      	ldr	r3, [r7, #12]
 8024302:	681b      	ldr	r3, [r3, #0]
 8024304:	683a      	ldr	r2, [r7, #0]
 8024306:	429a      	cmp	r2, r3
 8024308:	d101      	bne.n	802430e <lfs_mlist_isopen+0x1e>
            return true;
 802430a:	2301      	movs	r3, #1
 802430c:	e007      	b.n	802431e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802430e:	68fb      	ldr	r3, [r7, #12]
 8024310:	681b      	ldr	r3, [r3, #0]
 8024312:	60fb      	str	r3, [r7, #12]
 8024314:	68fb      	ldr	r3, [r7, #12]
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	2b00      	cmp	r3, #0
 802431a:	d1f1      	bne.n	8024300 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 802431c:	2300      	movs	r3, #0
}
 802431e:	4618      	mov	r0, r3
 8024320:	3714      	adds	r7, #20
 8024322:	46bd      	mov	sp, r7
 8024324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024328:	4770      	bx	lr

0802432a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 802432a:	b480      	push	{r7}
 802432c:	b085      	sub	sp, #20
 802432e:	af00      	add	r7, sp, #0
 8024330:	6078      	str	r0, [r7, #4]
 8024332:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	3328      	adds	r3, #40	; 0x28
 8024338:	60fb      	str	r3, [r7, #12]
 802433a:	e00d      	b.n	8024358 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 802433c:	68fb      	ldr	r3, [r7, #12]
 802433e:	681b      	ldr	r3, [r3, #0]
 8024340:	683a      	ldr	r2, [r7, #0]
 8024342:	429a      	cmp	r2, r3
 8024344:	d105      	bne.n	8024352 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8024346:	68fb      	ldr	r3, [r7, #12]
 8024348:	681b      	ldr	r3, [r3, #0]
 802434a:	681a      	ldr	r2, [r3, #0]
 802434c:	68fb      	ldr	r3, [r7, #12]
 802434e:	601a      	str	r2, [r3, #0]
            break;
 8024350:	e007      	b.n	8024362 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024352:	68fb      	ldr	r3, [r7, #12]
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	60fb      	str	r3, [r7, #12]
 8024358:	68fb      	ldr	r3, [r7, #12]
 802435a:	681b      	ldr	r3, [r3, #0]
 802435c:	2b00      	cmp	r3, #0
 802435e:	d1ed      	bne.n	802433c <lfs_mlist_remove+0x12>
        }
    }
}
 8024360:	bf00      	nop
 8024362:	bf00      	nop
 8024364:	3714      	adds	r7, #20
 8024366:	46bd      	mov	sp, r7
 8024368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802436c:	4770      	bx	lr

0802436e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 802436e:	b480      	push	{r7}
 8024370:	b083      	sub	sp, #12
 8024372:	af00      	add	r7, sp, #0
 8024374:	6078      	str	r0, [r7, #4]
 8024376:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8024378:	687b      	ldr	r3, [r7, #4]
 802437a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802437c:	683b      	ldr	r3, [r7, #0]
 802437e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8024380:	687b      	ldr	r3, [r7, #4]
 8024382:	683a      	ldr	r2, [r7, #0]
 8024384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8024386:	bf00      	nop
 8024388:	370c      	adds	r7, #12
 802438a:	46bd      	mov	sp, r7
 802438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024390:	4770      	bx	lr

08024392 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8024392:	b480      	push	{r7}
 8024394:	b085      	sub	sp, #20
 8024396:	af00      	add	r7, sp, #0
 8024398:	6078      	str	r0, [r7, #4]
 802439a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 802439c:	687b      	ldr	r3, [r7, #4]
 802439e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80243a0:	68fb      	ldr	r3, [r7, #12]
 80243a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80243a4:	683a      	ldr	r2, [r7, #0]
 80243a6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80243a8:	68fb      	ldr	r3, [r7, #12]
 80243aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80243ac:	6a1b      	ldr	r3, [r3, #32]
 80243ae:	4413      	add	r3, r2
 80243b0:	68fa      	ldr	r2, [r7, #12]
 80243b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80243b4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80243b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80243ba:	fb01 f202 	mul.w	r2, r1, r2
 80243be:	1a9b      	subs	r3, r3, r2
 80243c0:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80243c2:	68fb      	ldr	r3, [r7, #12]
 80243c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80243c6:	68ba      	ldr	r2, [r7, #8]
 80243c8:	429a      	cmp	r2, r3
 80243ca:	d212      	bcs.n	80243f2 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80243cc:	68fb      	ldr	r3, [r7, #12]
 80243ce:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80243d0:	68bb      	ldr	r3, [r7, #8]
 80243d2:	095b      	lsrs	r3, r3, #5
 80243d4:	009a      	lsls	r2, r3, #2
 80243d6:	440a      	add	r2, r1
 80243d8:	6811      	ldr	r1, [r2, #0]
 80243da:	68ba      	ldr	r2, [r7, #8]
 80243dc:	f002 021f 	and.w	r2, r2, #31
 80243e0:	2001      	movs	r0, #1
 80243e2:	fa00 f202 	lsl.w	r2, r0, r2
 80243e6:	68f8      	ldr	r0, [r7, #12]
 80243e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80243ea:	009b      	lsls	r3, r3, #2
 80243ec:	4403      	add	r3, r0
 80243ee:	430a      	orrs	r2, r1
 80243f0:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80243f2:	2300      	movs	r3, #0
}
 80243f4:	4618      	mov	r0, r3
 80243f6:	3714      	adds	r7, #20
 80243f8:	46bd      	mov	sp, r7
 80243fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243fe:	4770      	bx	lr

08024400 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024400:	b480      	push	{r7}
 8024402:	b083      	sub	sp, #12
 8024404:	af00      	add	r7, sp, #0
 8024406:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024408:	687b      	ldr	r3, [r7, #4]
 802440a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802440c:	6a1a      	ldr	r2, [r3, #32]
 802440e:	687b      	ldr	r3, [r7, #4]
 8024410:	661a      	str	r2, [r3, #96]	; 0x60
}
 8024412:	bf00      	nop
 8024414:	370c      	adds	r7, #12
 8024416:	46bd      	mov	sp, r7
 8024418:	f85d 7b04 	ldr.w	r7, [sp], #4
 802441c:	4770      	bx	lr

0802441e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 802441e:	b580      	push	{r7, lr}
 8024420:	b082      	sub	sp, #8
 8024422:	af00      	add	r7, sp, #0
 8024424:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8024426:	687b      	ldr	r3, [r7, #4]
 8024428:	2200      	movs	r2, #0
 802442a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 802442c:	687b      	ldr	r3, [r7, #4]
 802442e:	2200      	movs	r2, #0
 8024430:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8024432:	6878      	ldr	r0, [r7, #4]
 8024434:	f7ff ffe4 	bl	8024400 <lfs_alloc_ack>
}
 8024438:	bf00      	nop
 802443a:	3708      	adds	r7, #8
 802443c:	46bd      	mov	sp, r7
 802443e:	bd80      	pop	{r7, pc}

08024440 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8024440:	b580      	push	{r7, lr}
 8024442:	b086      	sub	sp, #24
 8024444:	af02      	add	r7, sp, #8
 8024446:	6078      	str	r0, [r7, #4]
 8024448:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 802444a:	e04f      	b.n	80244ec <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024450:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8024452:	687b      	ldr	r3, [r7, #4]
 8024454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024456:	1c5a      	adds	r2, r3, #1
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 802445c:	687b      	ldr	r3, [r7, #4]
 802445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024460:	1e5a      	subs	r2, r3, #1
 8024462:	687b      	ldr	r3, [r7, #4]
 8024464:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 802446a:	68bb      	ldr	r3, [r7, #8]
 802446c:	095b      	lsrs	r3, r3, #5
 802446e:	009b      	lsls	r3, r3, #2
 8024470:	4413      	add	r3, r2
 8024472:	681a      	ldr	r2, [r3, #0]
 8024474:	68bb      	ldr	r3, [r7, #8]
 8024476:	f003 031f 	and.w	r3, r3, #31
 802447a:	2101      	movs	r1, #1
 802447c:	fa01 f303 	lsl.w	r3, r1, r3
 8024480:	4013      	ands	r3, r2
 8024482:	2b00      	cmp	r3, #0
 8024484:	d132      	bne.n	80244ec <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802448a:	68bb      	ldr	r3, [r7, #8]
 802448c:	4413      	add	r3, r2
 802448e:	687a      	ldr	r2, [r7, #4]
 8024490:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8024492:	6a12      	ldr	r2, [r2, #32]
 8024494:	fbb3 f1f2 	udiv	r1, r3, r2
 8024498:	fb01 f202 	mul.w	r2, r1, r2
 802449c:	1a9a      	subs	r2, r3, r2
 802449e:	683b      	ldr	r3, [r7, #0]
 80244a0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80244a2:	e009      	b.n	80244b8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80244a4:	687b      	ldr	r3, [r7, #4]
 80244a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80244a8:	1c5a      	adds	r2, r3, #1
 80244aa:	687b      	ldr	r3, [r7, #4]
 80244ac:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80244ae:	687b      	ldr	r3, [r7, #4]
 80244b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80244b2:	1e5a      	subs	r2, r3, #1
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80244c0:	429a      	cmp	r2, r3
 80244c2:	d011      	beq.n	80244e8 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80244c8:	687b      	ldr	r3, [r7, #4]
 80244ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80244cc:	095b      	lsrs	r3, r3, #5
 80244ce:	009b      	lsls	r3, r3, #2
 80244d0:	4413      	add	r3, r2
 80244d2:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80244d4:	687b      	ldr	r3, [r7, #4]
 80244d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80244d8:	f003 031f 	and.w	r3, r3, #31
 80244dc:	2101      	movs	r1, #1
 80244de:	fa01 f303 	lsl.w	r3, r1, r3
 80244e2:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80244e4:	2b00      	cmp	r3, #0
 80244e6:	d1dd      	bne.n	80244a4 <lfs_alloc+0x64>
                }

                return 0;
 80244e8:	2300      	movs	r3, #0
 80244ea:	e050      	b.n	802458e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80244f0:	687b      	ldr	r3, [r7, #4]
 80244f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80244f4:	429a      	cmp	r2, r3
 80244f6:	d1a9      	bne.n	802444c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80244f8:	687b      	ldr	r3, [r7, #4]
 80244fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80244fc:	2b00      	cmp	r3, #0
 80244fe:	d10f      	bne.n	8024520 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024500:	687b      	ldr	r3, [r7, #4]
 8024502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024508:	4413      	add	r3, r2
 802450a:	4a23      	ldr	r2, [pc, #140]	; (8024598 <lfs_alloc+0x158>)
 802450c:	9200      	str	r2, [sp, #0]
 802450e:	f240 2247 	movw	r2, #583	; 0x247
 8024512:	4922      	ldr	r1, [pc, #136]	; (802459c <lfs_alloc+0x15c>)
 8024514:	4822      	ldr	r0, [pc, #136]	; (80245a0 <lfs_alloc+0x160>)
 8024516:	f008 ffab 	bl	802d470 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 802451a:	f06f 031b 	mvn.w	r3, #27
 802451e:	e036      	b.n	802458e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024520:	687b      	ldr	r3, [r7, #4]
 8024522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024528:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 802452a:	687a      	ldr	r2, [r7, #4]
 802452c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802452e:	6a12      	ldr	r2, [r2, #32]
 8024530:	fbb3 f1f2 	udiv	r1, r3, r2
 8024534:	fb01 f202 	mul.w	r2, r1, r2
 8024538:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 802453a:	687b      	ldr	r3, [r7, #4]
 802453c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 802453e:	687b      	ldr	r3, [r7, #4]
 8024540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024544:	00da      	lsls	r2, r3, #3
 8024546:	687b      	ldr	r3, [r7, #4]
 8024548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802454a:	4619      	mov	r1, r3
 802454c:	4610      	mov	r0, r2
 802454e:	f7ff f811 	bl	8023574 <lfs_min>
 8024552:	4602      	mov	r2, r0
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8024558:	687b      	ldr	r3, [r7, #4]
 802455a:	2200      	movs	r2, #0
 802455c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024568:	461a      	mov	r2, r3
 802456a:	2100      	movs	r1, #0
 802456c:	f009 f916 	bl	802d79c <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8024570:	2301      	movs	r3, #1
 8024572:	687a      	ldr	r2, [r7, #4]
 8024574:	490b      	ldr	r1, [pc, #44]	; (80245a4 <lfs_alloc+0x164>)
 8024576:	6878      	ldr	r0, [r7, #4]
 8024578:	f005 fb3e 	bl	8029bf8 <lfs_fs_rawtraverse>
 802457c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802457e:	68fb      	ldr	r3, [r7, #12]
 8024580:	2b00      	cmp	r3, #0
 8024582:	f43f af62 	beq.w	802444a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8024586:	6878      	ldr	r0, [r7, #4]
 8024588:	f7ff ff49 	bl	802441e <lfs_alloc_drop>
            return err;
 802458c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 802458e:	4618      	mov	r0, r3
 8024590:	3710      	adds	r7, #16
 8024592:	46bd      	mov	sp, r7
 8024594:	bd80      	pop	{r7, pc}
 8024596:	bf00      	nop
 8024598:	08033530 	.word	0x08033530
 802459c:	0803341c 	.word	0x0803341c
 80245a0:	08033508 	.word	0x08033508
 80245a4:	08024393 	.word	0x08024393

080245a8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80245a8:	b590      	push	{r4, r7, lr}
 80245aa:	b08f      	sub	sp, #60	; 0x3c
 80245ac:	af04      	add	r7, sp, #16
 80245ae:	60f8      	str	r0, [r7, #12]
 80245b0:	60b9      	str	r1, [r7, #8]
 80245b2:	607a      	str	r2, [r7, #4]
 80245b4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80245b6:	68bb      	ldr	r3, [r7, #8]
 80245b8:	68db      	ldr	r3, [r3, #12]
 80245ba:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80245bc:	68bb      	ldr	r3, [r7, #8]
 80245be:	691b      	ldr	r3, [r3, #16]
 80245c0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80245c2:	2300      	movs	r3, #0
 80245c4:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80245c6:	68fb      	ldr	r3, [r7, #12]
 80245c8:	333c      	adds	r3, #60	; 0x3c
 80245ca:	68ba      	ldr	r2, [r7, #8]
 80245cc:	4611      	mov	r1, r2
 80245ce:	4618      	mov	r0, r3
 80245d0:	f7ff fd8e 	bl	80240f0 <lfs_gstate_hasmovehere>
 80245d4:	4603      	mov	r3, r0
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	f000 80ba 	beq.w	8024750 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 80245dc:	6878      	ldr	r0, [r7, #4]
 80245de:	f7ff fcdf 	bl	8023fa0 <lfs_tag_id>
 80245e2:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80245e4:	2b00      	cmp	r3, #0
 80245e6:	f000 80b3 	beq.w	8024750 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 80245ea:	68fb      	ldr	r3, [r7, #12]
 80245ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80245ee:	4618      	mov	r0, r3
 80245f0:	f7ff fcd6 	bl	8023fa0 <lfs_tag_id>
 80245f4:	4603      	mov	r3, r0
 80245f6:	461c      	mov	r4, r3
 80245f8:	6838      	ldr	r0, [r7, #0]
 80245fa:	f7ff fcd1 	bl	8023fa0 <lfs_tag_id>
 80245fe:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024600:	429c      	cmp	r4, r3
 8024602:	f200 80a5 	bhi.w	8024750 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024606:	6a3b      	ldr	r3, [r7, #32]
 8024608:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802460c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 802460e:	e09f      	b.n	8024750 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8024610:	693b      	ldr	r3, [r7, #16]
 8024612:	4618      	mov	r0, r3
 8024614:	f7ff fce1 	bl	8023fda <lfs_tag_dsize>
 8024618:	4602      	mov	r2, r0
 802461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802461c:	1a9b      	subs	r3, r3, r2
 802461e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8024620:	693b      	ldr	r3, [r7, #16]
 8024622:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8024624:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8024626:	68bb      	ldr	r3, [r7, #8]
 8024628:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 802462a:	2204      	movs	r2, #4
 802462c:	9203      	str	r2, [sp, #12]
 802462e:	f107 0210 	add.w	r2, r7, #16
 8024632:	9202      	str	r2, [sp, #8]
 8024634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024636:	9201      	str	r2, [sp, #4]
 8024638:	9300      	str	r3, [sp, #0]
 802463a:	2304      	movs	r3, #4
 802463c:	460a      	mov	r2, r1
 802463e:	2100      	movs	r1, #0
 8024640:	68f8      	ldr	r0, [r7, #12]
 8024642:	f7ff f873 	bl	802372c <lfs_bd_read>
 8024646:	61b8      	str	r0, [r7, #24]
        if (err) {
 8024648:	69bb      	ldr	r3, [r7, #24]
 802464a:	2b00      	cmp	r3, #0
 802464c:	d001      	beq.n	8024652 <lfs_dir_getslice+0xaa>
            return err;
 802464e:	69bb      	ldr	r3, [r7, #24]
 8024650:	e08a      	b.n	8024768 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8024652:	693b      	ldr	r3, [r7, #16]
 8024654:	4618      	mov	r0, r3
 8024656:	f7ff f814 	bl	8023682 <lfs_frombe32>
 802465a:	4602      	mov	r2, r0
 802465c:	69fb      	ldr	r3, [r7, #28]
 802465e:	4053      	eors	r3, r2
 8024660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024664:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8024666:	6878      	ldr	r0, [r7, #4]
 8024668:	f7ff fc9a 	bl	8023fa0 <lfs_tag_id>
 802466c:	4603      	mov	r3, r0
 802466e:	2b00      	cmp	r3, #0
 8024670:	d02b      	beq.n	80246ca <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024672:	69f8      	ldr	r0, [r7, #28]
 8024674:	f7ff fc5a 	bl	8023f2c <lfs_tag_type1>
 8024678:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 802467a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802467e:	d124      	bne.n	80246ca <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8024680:	69f8      	ldr	r0, [r7, #28]
 8024682:	f7ff fc8d 	bl	8023fa0 <lfs_tag_id>
 8024686:	4603      	mov	r3, r0
 8024688:	461c      	mov	r4, r3
 802468a:	6a3b      	ldr	r3, [r7, #32]
 802468c:	683a      	ldr	r2, [r7, #0]
 802468e:	1ad3      	subs	r3, r2, r3
 8024690:	4618      	mov	r0, r3
 8024692:	f7ff fc85 	bl	8023fa0 <lfs_tag_id>
 8024696:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024698:	429c      	cmp	r4, r3
 802469a:	d816      	bhi.n	80246ca <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 802469c:	6a3b      	ldr	r3, [r7, #32]
 802469e:	683a      	ldr	r2, [r7, #0]
 80246a0:	1ad2      	subs	r2, r2, r3
 80246a2:	4b33      	ldr	r3, [pc, #204]	; (8024770 <lfs_dir_getslice+0x1c8>)
 80246a4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80246a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80246aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80246ae:	69fa      	ldr	r2, [r7, #28]
 80246b0:	429a      	cmp	r2, r3
 80246b2:	d102      	bne.n	80246ba <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80246b4:	f06f 0301 	mvn.w	r3, #1
 80246b8:	e056      	b.n	8024768 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80246ba:	69f8      	ldr	r0, [r7, #28]
 80246bc:	f7ff fc63 	bl	8023f86 <lfs_tag_splice>
 80246c0:	4603      	mov	r3, r0
 80246c2:	029a      	lsls	r2, r3, #10
 80246c4:	6a3b      	ldr	r3, [r7, #32]
 80246c6:	4413      	add	r3, r2
 80246c8:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80246ca:	687a      	ldr	r2, [r7, #4]
 80246cc:	69fb      	ldr	r3, [r7, #28]
 80246ce:	401a      	ands	r2, r3
 80246d0:	6a3b      	ldr	r3, [r7, #32]
 80246d2:	6839      	ldr	r1, [r7, #0]
 80246d4:	1ac9      	subs	r1, r1, r3
 80246d6:	687b      	ldr	r3, [r7, #4]
 80246d8:	400b      	ands	r3, r1
 80246da:	429a      	cmp	r2, r3
 80246dc:	d138      	bne.n	8024750 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 80246de:	69f8      	ldr	r0, [r7, #28]
 80246e0:	f7ff fc11 	bl	8023f06 <lfs_tag_isdelete>
 80246e4:	4603      	mov	r3, r0
 80246e6:	2b00      	cmp	r3, #0
 80246e8:	d002      	beq.n	80246f0 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 80246ea:	f06f 0301 	mvn.w	r3, #1
 80246ee:	e03b      	b.n	8024768 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80246f0:	69f8      	ldr	r0, [r7, #28]
 80246f2:	f7ff fc65 	bl	8023fc0 <lfs_tag_size>
 80246f6:	4603      	mov	r3, r0
 80246f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80246fa:	4618      	mov	r0, r3
 80246fc:	f7fe ff3a 	bl	8023574 <lfs_min>
 8024700:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024702:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024704:	68bb      	ldr	r3, [r7, #8]
 8024706:	681b      	ldr	r3, [r3, #0]
 8024708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802470a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802470c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 802470e:	3204      	adds	r2, #4
 8024710:	6979      	ldr	r1, [r7, #20]
 8024712:	9103      	str	r1, [sp, #12]
 8024714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8024716:	9102      	str	r1, [sp, #8]
 8024718:	9201      	str	r2, [sp, #4]
 802471a:	9300      	str	r3, [sp, #0]
 802471c:	697b      	ldr	r3, [r7, #20]
 802471e:	4602      	mov	r2, r0
 8024720:	2100      	movs	r1, #0
 8024722:	68f8      	ldr	r0, [r7, #12]
 8024724:	f7ff f802 	bl	802372c <lfs_bd_read>
 8024728:	61b8      	str	r0, [r7, #24]
            if (err) {
 802472a:	69bb      	ldr	r3, [r7, #24]
 802472c:	2b00      	cmp	r3, #0
 802472e:	d001      	beq.n	8024734 <lfs_dir_getslice+0x18c>
                return err;
 8024730:	69bb      	ldr	r3, [r7, #24]
 8024732:	e019      	b.n	8024768 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8024734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024736:	697b      	ldr	r3, [r7, #20]
 8024738:	18d0      	adds	r0, r2, r3
 802473a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802473c:	697b      	ldr	r3, [r7, #20]
 802473e:	1ad3      	subs	r3, r2, r3
 8024740:	461a      	mov	r2, r3
 8024742:	2100      	movs	r1, #0
 8024744:	f009 f82a 	bl	802d79c <memset>

            return tag + gdiff;
 8024748:	6a3a      	ldr	r2, [r7, #32]
 802474a:	69fb      	ldr	r3, [r7, #28]
 802474c:	4413      	add	r3, r2
 802474e:	e00b      	b.n	8024768 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8024750:	693b      	ldr	r3, [r7, #16]
 8024752:	4618      	mov	r0, r3
 8024754:	f7ff fc41 	bl	8023fda <lfs_tag_dsize>
 8024758:	4603      	mov	r3, r0
 802475a:	3304      	adds	r3, #4
 802475c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802475e:	429a      	cmp	r2, r3
 8024760:	f4bf af56 	bcs.w	8024610 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8024764:	f06f 0301 	mvn.w	r3, #1
}
 8024768:	4618      	mov	r0, r3
 802476a:	372c      	adds	r7, #44	; 0x2c
 802476c:	46bd      	mov	sp, r7
 802476e:	bd90      	pop	{r4, r7, pc}
 8024770:	000ffc00 	.word	0x000ffc00

08024774 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8024774:	b580      	push	{r7, lr}
 8024776:	b088      	sub	sp, #32
 8024778:	af04      	add	r7, sp, #16
 802477a:	60f8      	str	r0, [r7, #12]
 802477c:	60b9      	str	r1, [r7, #8]
 802477e:	607a      	str	r2, [r7, #4]
 8024780:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8024782:	6838      	ldr	r0, [r7, #0]
 8024784:	f7ff fc1c 	bl	8023fc0 <lfs_tag_size>
 8024788:	4603      	mov	r3, r0
 802478a:	9302      	str	r3, [sp, #8]
 802478c:	69bb      	ldr	r3, [r7, #24]
 802478e:	9301      	str	r3, [sp, #4]
 8024790:	2300      	movs	r3, #0
 8024792:	9300      	str	r3, [sp, #0]
 8024794:	683b      	ldr	r3, [r7, #0]
 8024796:	687a      	ldr	r2, [r7, #4]
 8024798:	68b9      	ldr	r1, [r7, #8]
 802479a:	68f8      	ldr	r0, [r7, #12]
 802479c:	f7ff ff04 	bl	80245a8 <lfs_dir_getslice>
 80247a0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80247a2:	4618      	mov	r0, r3
 80247a4:	3710      	adds	r7, #16
 80247a6:	46bd      	mov	sp, r7
 80247a8:	bd80      	pop	{r7, pc}

080247aa <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80247aa:	b580      	push	{r7, lr}
 80247ac:	b08c      	sub	sp, #48	; 0x30
 80247ae:	af04      	add	r7, sp, #16
 80247b0:	60f8      	str	r0, [r7, #12]
 80247b2:	60b9      	str	r1, [r7, #8]
 80247b4:	607a      	str	r2, [r7, #4]
 80247b6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80247b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80247ba:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80247bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80247c0:	441a      	add	r2, r3
 80247c2:	68fb      	ldr	r3, [r7, #12]
 80247c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80247c6:	69db      	ldr	r3, [r3, #28]
 80247c8:	429a      	cmp	r2, r3
 80247ca:	f240 80c0 	bls.w	802494e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80247ce:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80247d2:	e0c1      	b.n	8024958 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80247d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80247d6:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80247d8:	687b      	ldr	r3, [r7, #4]
 80247da:	2b00      	cmp	r3, #0
 80247dc:	d03f      	beq.n	802485e <lfs_dir_getread+0xb4>
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	681b      	ldr	r3, [r3, #0]
 80247e2:	f113 0f02 	cmn.w	r3, #2
 80247e6:	d13a      	bne.n	802485e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	685a      	ldr	r2, [r3, #4]
 80247ec:	687b      	ldr	r3, [r7, #4]
 80247ee:	689b      	ldr	r3, [r3, #8]
 80247f0:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80247f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247f4:	429a      	cmp	r2, r3
 80247f6:	d232      	bcs.n	802485e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80247f8:	687b      	ldr	r3, [r7, #4]
 80247fa:	685b      	ldr	r3, [r3, #4]
 80247fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247fe:	429a      	cmp	r2, r3
 8024800:	d324      	bcc.n	802484c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024802:	687b      	ldr	r3, [r7, #4]
 8024804:	689a      	ldr	r2, [r3, #8]
 8024806:	687b      	ldr	r3, [r7, #4]
 8024808:	6859      	ldr	r1, [r3, #4]
 802480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802480c:	1acb      	subs	r3, r1, r3
 802480e:	4413      	add	r3, r2
 8024810:	4619      	mov	r1, r3
 8024812:	69b8      	ldr	r0, [r7, #24]
 8024814:	f7fe feae 	bl	8023574 <lfs_min>
 8024818:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 802481a:	687b      	ldr	r3, [r7, #4]
 802481c:	68da      	ldr	r2, [r3, #12]
 802481e:	687b      	ldr	r3, [r7, #4]
 8024820:	685b      	ldr	r3, [r3, #4]
 8024822:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024824:	1acb      	subs	r3, r1, r3
 8024826:	4413      	add	r3, r2
 8024828:	69ba      	ldr	r2, [r7, #24]
 802482a:	4619      	mov	r1, r3
 802482c:	69f8      	ldr	r0, [r7, #28]
 802482e:	f009 f98a 	bl	802db46 <memcpy>

                data += diff;
 8024832:	69fa      	ldr	r2, [r7, #28]
 8024834:	69bb      	ldr	r3, [r7, #24]
 8024836:	4413      	add	r3, r2
 8024838:	61fb      	str	r3, [r7, #28]
                off += diff;
 802483a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802483c:	69bb      	ldr	r3, [r7, #24]
 802483e:	4413      	add	r3, r2
 8024840:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024844:	69bb      	ldr	r3, [r7, #24]
 8024846:	1ad3      	subs	r3, r2, r3
 8024848:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 802484a:	e080      	b.n	802494e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 802484c:	687b      	ldr	r3, [r7, #4]
 802484e:	685a      	ldr	r2, [r3, #4]
 8024850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024852:	1ad3      	subs	r3, r2, r3
 8024854:	4619      	mov	r1, r3
 8024856:	69b8      	ldr	r0, [r7, #24]
 8024858:	f7fe fe8c 	bl	8023574 <lfs_min>
 802485c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 802485e:	683b      	ldr	r3, [r7, #0]
 8024860:	681b      	ldr	r3, [r3, #0]
 8024862:	f113 0f02 	cmn.w	r3, #2
 8024866:	d13a      	bne.n	80248de <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8024868:	683b      	ldr	r3, [r7, #0]
 802486a:	685a      	ldr	r2, [r3, #4]
 802486c:	683b      	ldr	r3, [r7, #0]
 802486e:	689b      	ldr	r3, [r3, #8]
 8024870:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024874:	429a      	cmp	r2, r3
 8024876:	d232      	bcs.n	80248de <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8024878:	683b      	ldr	r3, [r7, #0]
 802487a:	685b      	ldr	r3, [r3, #4]
 802487c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802487e:	429a      	cmp	r2, r3
 8024880:	d324      	bcc.n	80248cc <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8024882:	683b      	ldr	r3, [r7, #0]
 8024884:	689a      	ldr	r2, [r3, #8]
 8024886:	683b      	ldr	r3, [r7, #0]
 8024888:	6859      	ldr	r1, [r3, #4]
 802488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802488c:	1acb      	subs	r3, r1, r3
 802488e:	4413      	add	r3, r2
 8024890:	4619      	mov	r1, r3
 8024892:	69b8      	ldr	r0, [r7, #24]
 8024894:	f7fe fe6e 	bl	8023574 <lfs_min>
 8024898:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 802489a:	683b      	ldr	r3, [r7, #0]
 802489c:	68da      	ldr	r2, [r3, #12]
 802489e:	683b      	ldr	r3, [r7, #0]
 80248a0:	685b      	ldr	r3, [r3, #4]
 80248a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80248a4:	1acb      	subs	r3, r1, r3
 80248a6:	4413      	add	r3, r2
 80248a8:	69ba      	ldr	r2, [r7, #24]
 80248aa:	4619      	mov	r1, r3
 80248ac:	69f8      	ldr	r0, [r7, #28]
 80248ae:	f009 f94a 	bl	802db46 <memcpy>

                data += diff;
 80248b2:	69fa      	ldr	r2, [r7, #28]
 80248b4:	69bb      	ldr	r3, [r7, #24]
 80248b6:	4413      	add	r3, r2
 80248b8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80248ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80248bc:	69bb      	ldr	r3, [r7, #24]
 80248be:	4413      	add	r3, r2
 80248c0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80248c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80248c4:	69bb      	ldr	r3, [r7, #24]
 80248c6:	1ad3      	subs	r3, r2, r3
 80248c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80248ca:	e040      	b.n	802494e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80248cc:	683b      	ldr	r3, [r7, #0]
 80248ce:	685a      	ldr	r2, [r3, #4]
 80248d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80248d2:	1ad3      	subs	r3, r2, r3
 80248d4:	4619      	mov	r1, r3
 80248d6:	69b8      	ldr	r0, [r7, #24]
 80248d8:	f7fe fe4c 	bl	8023574 <lfs_min>
 80248dc:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 80248de:	683b      	ldr	r3, [r7, #0]
 80248e0:	f06f 0201 	mvn.w	r2, #1
 80248e4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80248e6:	68fb      	ldr	r3, [r7, #12]
 80248e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80248ea:	695b      	ldr	r3, [r3, #20]
 80248ec:	4619      	mov	r1, r3
 80248ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80248f0:	f7fe fe50 	bl	8023594 <lfs_aligndown>
 80248f4:	4602      	mov	r2, r0
 80248f6:	683b      	ldr	r3, [r7, #0]
 80248f8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80248fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80248fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248fe:	441a      	add	r2, r3
 8024900:	68fb      	ldr	r3, [r7, #12]
 8024902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024904:	695b      	ldr	r3, [r3, #20]
 8024906:	4619      	mov	r1, r3
 8024908:	4610      	mov	r0, r2
 802490a:	f7fe fe58 	bl	80235be <lfs_alignup>
 802490e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024910:	68fb      	ldr	r3, [r7, #12]
 8024912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024916:	4619      	mov	r1, r3
 8024918:	4610      	mov	r0, r2
 802491a:	f7fe fe2b 	bl	8023574 <lfs_min>
 802491e:	4602      	mov	r2, r0
 8024920:	683b      	ldr	r3, [r7, #0]
 8024922:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024924:	683b      	ldr	r3, [r7, #0]
 8024926:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024928:	683a      	ldr	r2, [r7, #0]
 802492a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 802492c:	6839      	ldr	r1, [r7, #0]
 802492e:	6889      	ldr	r1, [r1, #8]
 8024930:	9102      	str	r1, [sp, #8]
 8024932:	9201      	str	r2, [sp, #4]
 8024934:	9300      	str	r3, [sp, #0]
 8024936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802493a:	68b9      	ldr	r1, [r7, #8]
 802493c:	68f8      	ldr	r0, [r7, #12]
 802493e:	f7ff fe33 	bl	80245a8 <lfs_dir_getslice>
 8024942:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8024944:	697b      	ldr	r3, [r7, #20]
 8024946:	2b00      	cmp	r3, #0
 8024948:	da01      	bge.n	802494e <lfs_dir_getread+0x1a4>
            return err;
 802494a:	697b      	ldr	r3, [r7, #20]
 802494c:	e004      	b.n	8024958 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 802494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024950:	2b00      	cmp	r3, #0
 8024952:	f47f af3f 	bne.w	80247d4 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8024956:	2300      	movs	r3, #0
}
 8024958:	4618      	mov	r0, r3
 802495a:	3720      	adds	r7, #32
 802495c:	46bd      	mov	sp, r7
 802495e:	bd80      	pop	{r7, pc}

08024960 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8024960:	b590      	push	{r4, r7, lr}
 8024962:	b087      	sub	sp, #28
 8024964:	af00      	add	r7, sp, #0
 8024966:	60f8      	str	r0, [r7, #12]
 8024968:	60b9      	str	r1, [r7, #8]
 802496a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 802496c:	68fb      	ldr	r3, [r7, #12]
 802496e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024970:	68bb      	ldr	r3, [r7, #8]
 8024972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8024976:	2b00      	cmp	r3, #0
 8024978:	d001      	beq.n	802497e <lfs_dir_traverse_filter+0x1e>
 802497a:	4b24      	ldr	r3, [pc, #144]	; (8024a0c <lfs_dir_traverse_filter+0xac>)
 802497c:	e000      	b.n	8024980 <lfs_dir_traverse_filter+0x20>
 802497e:	4b24      	ldr	r3, [pc, #144]	; (8024a10 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024980:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8024982:	697b      	ldr	r3, [r7, #20]
 8024984:	681a      	ldr	r2, [r3, #0]
 8024986:	68bb      	ldr	r3, [r7, #8]
 8024988:	405a      	eors	r2, r3
 802498a:	693b      	ldr	r3, [r7, #16]
 802498c:	4013      	ands	r3, r2
 802498e:	2b00      	cmp	r3, #0
 8024990:	d014      	beq.n	80249bc <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8024992:	697b      	ldr	r3, [r7, #20]
 8024994:	681b      	ldr	r3, [r3, #0]
 8024996:	4618      	mov	r0, r3
 8024998:	f7ff fab5 	bl	8023f06 <lfs_tag_isdelete>
 802499c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 802499e:	2b00      	cmp	r3, #0
 80249a0:	d10c      	bne.n	80249bc <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80249a2:	68bb      	ldr	r3, [r7, #8]
 80249a4:	4a19      	ldr	r2, [pc, #100]	; (8024a0c <lfs_dir_traverse_filter+0xac>)
 80249a6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80249a8:	697b      	ldr	r3, [r7, #20]
 80249aa:	6819      	ldr	r1, [r3, #0]
 80249ac:	4b19      	ldr	r3, [pc, #100]	; (8024a14 <lfs_dir_traverse_filter+0xb4>)
 80249ae:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80249b0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80249b4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80249b8:	429a      	cmp	r2, r3
 80249ba:	d104      	bne.n	80249c6 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80249bc:	697b      	ldr	r3, [r7, #20]
 80249be:	2200      	movs	r2, #0
 80249c0:	601a      	str	r2, [r3, #0]
        return true;
 80249c2:	2301      	movs	r3, #1
 80249c4:	e01e      	b.n	8024a04 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80249c6:	68b8      	ldr	r0, [r7, #8]
 80249c8:	f7ff fab0 	bl	8023f2c <lfs_tag_type1>
 80249cc:	4603      	mov	r3, r0
 80249ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80249d2:	d116      	bne.n	8024a02 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 80249d4:	68b8      	ldr	r0, [r7, #8]
 80249d6:	f7ff fae3 	bl	8023fa0 <lfs_tag_id>
 80249da:	4603      	mov	r3, r0
 80249dc:	461c      	mov	r4, r3
 80249de:	697b      	ldr	r3, [r7, #20]
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	4618      	mov	r0, r3
 80249e4:	f7ff fadc 	bl	8023fa0 <lfs_tag_id>
 80249e8:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80249ea:	429c      	cmp	r4, r3
 80249ec:	d809      	bhi.n	8024a02 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80249ee:	68b8      	ldr	r0, [r7, #8]
 80249f0:	f7ff fac9 	bl	8023f86 <lfs_tag_splice>
 80249f4:	4603      	mov	r3, r0
 80249f6:	029a      	lsls	r2, r3, #10
 80249f8:	697b      	ldr	r3, [r7, #20]
 80249fa:	681b      	ldr	r3, [r3, #0]
 80249fc:	441a      	add	r2, r3
 80249fe:	697b      	ldr	r3, [r7, #20]
 8024a00:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024a02:	2300      	movs	r3, #0
}
 8024a04:	4618      	mov	r0, r3
 8024a06:	371c      	adds	r7, #28
 8024a08:	46bd      	mov	sp, r7
 8024a0a:	bd90      	pop	{r4, r7, pc}
 8024a0c:	7ffffc00 	.word	0x7ffffc00
 8024a10:	700ffc00 	.word	0x700ffc00
 8024a14:	000ffc00 	.word	0x000ffc00

08024a18 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024a18:	b590      	push	{r4, r7, lr}
 8024a1a:	b0c1      	sub	sp, #260	; 0x104
 8024a1c:	af04      	add	r7, sp, #16
 8024a1e:	60f8      	str	r0, [r7, #12]
 8024a20:	60b9      	str	r1, [r7, #8]
 8024a22:	607a      	str	r2, [r7, #4]
 8024a24:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024a26:	2300      	movs	r3, #0
 8024a28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8024a2c:	6838      	ldr	r0, [r7, #0]
 8024a2e:	f7ff fad4 	bl	8023fda <lfs_tag_dsize>
 8024a32:	4602      	mov	r2, r0
 8024a34:	687b      	ldr	r3, [r7, #4]
 8024a36:	441a      	add	r2, r3
 8024a38:	68bb      	ldr	r3, [r7, #8]
 8024a3a:	68db      	ldr	r3, [r3, #12]
 8024a3c:	429a      	cmp	r2, r3
 8024a3e:	d237      	bcs.n	8024ab0 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8024a40:	6838      	ldr	r0, [r7, #0]
 8024a42:	f7ff faca 	bl	8023fda <lfs_tag_dsize>
 8024a46:	4602      	mov	r2, r0
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	4413      	add	r3, r2
 8024a4c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8024a4e:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8024a50:	68bb      	ldr	r3, [r7, #8]
 8024a52:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8024a54:	2204      	movs	r2, #4
 8024a56:	9203      	str	r2, [sp, #12]
 8024a58:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8024a5c:	9202      	str	r2, [sp, #8]
 8024a5e:	687a      	ldr	r2, [r7, #4]
 8024a60:	9201      	str	r2, [sp, #4]
 8024a62:	9300      	str	r3, [sp, #0]
 8024a64:	2304      	movs	r3, #4
 8024a66:	460a      	mov	r2, r1
 8024a68:	2100      	movs	r1, #0
 8024a6a:	68f8      	ldr	r0, [r7, #12]
 8024a6c:	f7fe fe5e 	bl	802372c <lfs_bd_read>
 8024a70:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8024a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024a78:	2b00      	cmp	r3, #0
 8024a7a:	d002      	beq.n	8024a82 <lfs_dir_traverse+0x6a>
                    return err;
 8024a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024a80:	e3a6      	b.n	80251d0 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8024a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a84:	4618      	mov	r0, r3
 8024a86:	f7fe fdfc 	bl	8023682 <lfs_frombe32>
 8024a8a:	4602      	mov	r2, r0
 8024a8c:	683b      	ldr	r3, [r7, #0]
 8024a8e:	4053      	eors	r3, r2
 8024a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024a94:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8024a96:	68bb      	ldr	r3, [r7, #8]
 8024a98:	681b      	ldr	r3, [r3, #0]
 8024a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8024a9c:	687b      	ldr	r3, [r7, #4]
 8024a9e:	3304      	adds	r3, #4
 8024aa0:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8024aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8024aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024aac:	603b      	str	r3, [r7, #0]
 8024aae:	e01b      	b.n	8024ae8 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8024ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024ab4:	2b00      	cmp	r3, #0
 8024ab6:	dd13      	ble.n	8024ae0 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8024ab8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024abc:	681b      	ldr	r3, [r3, #0]
 8024abe:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8024ac0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024ac4:	685b      	ldr	r3, [r3, #4]
 8024ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8024aca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024ace:	3308      	adds	r3, #8
 8024ad0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8024ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024ad8:	3b01      	subs	r3, #1
 8024ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8024ade:	e003      	b.n	8024ae8 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8024ae0:	2300      	movs	r3, #0
 8024ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8024ae6:	e2a2      	b.n	802502e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8024ae8:	4b7e      	ldr	r3, [pc, #504]	; (8024ce4 <lfs_dir_traverse+0x2cc>)
 8024aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8024aee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8024af4:	405a      	eors	r2, r3
 8024af6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8024afa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8024afe:	400b      	ands	r3, r1
 8024b00:	4013      	ands	r3, r2
 8024b02:	2b00      	cmp	r3, #0
 8024b04:	f040 8285 	bne.w	8025012 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024b08:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024b0c:	f7ff fa48 	bl	8023fa0 <lfs_tag_id>
 8024b10:	4603      	mov	r3, r0
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	f000 80f0 	beq.w	8024cf8 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024b18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024b1c:	2b02      	cmp	r3, #2
 8024b1e:	d906      	bls.n	8024b2e <lfs_dir_traverse+0x116>
 8024b20:	4b71      	ldr	r3, [pc, #452]	; (8024ce8 <lfs_dir_traverse+0x2d0>)
 8024b22:	4a72      	ldr	r2, [pc, #456]	; (8024cec <lfs_dir_traverse+0x2d4>)
 8024b24:	f240 314e 	movw	r1, #846	; 0x34e
 8024b28:	4871      	ldr	r0, [pc, #452]	; (8024cf0 <lfs_dir_traverse+0x2d8>)
 8024b2a:	f007 fc67 	bl	802c3fc <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8024b2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024b30:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b34:	4613      	mov	r3, r2
 8024b36:	011b      	lsls	r3, r3, #4
 8024b38:	1a9b      	subs	r3, r3, r2
 8024b3a:	009b      	lsls	r3, r3, #2
 8024b3c:	33f0      	adds	r3, #240	; 0xf0
 8024b3e:	443b      	add	r3, r7
 8024b40:	3b98      	subs	r3, #152	; 0x98
 8024b42:	68ba      	ldr	r2, [r7, #8]
 8024b44:	601a      	str	r2, [r3, #0]
 8024b46:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b4a:	4613      	mov	r3, r2
 8024b4c:	011b      	lsls	r3, r3, #4
 8024b4e:	1a9b      	subs	r3, r3, r2
 8024b50:	009b      	lsls	r3, r3, #2
 8024b52:	33f0      	adds	r3, #240	; 0xf0
 8024b54:	443b      	add	r3, r7
 8024b56:	3b94      	subs	r3, #148	; 0x94
 8024b58:	687a      	ldr	r2, [r7, #4]
 8024b5a:	601a      	str	r2, [r3, #0]
 8024b5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b60:	4613      	mov	r3, r2
 8024b62:	011b      	lsls	r3, r3, #4
 8024b64:	1a9b      	subs	r3, r3, r2
 8024b66:	009b      	lsls	r3, r3, #2
 8024b68:	33f0      	adds	r3, #240	; 0xf0
 8024b6a:	443b      	add	r3, r7
 8024b6c:	3b90      	subs	r3, #144	; 0x90
 8024b6e:	683a      	ldr	r2, [r7, #0]
 8024b70:	601a      	str	r2, [r3, #0]
 8024b72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b76:	4613      	mov	r3, r2
 8024b78:	011b      	lsls	r3, r3, #4
 8024b7a:	1a9b      	subs	r3, r3, r2
 8024b7c:	009b      	lsls	r3, r3, #2
 8024b7e:	33f0      	adds	r3, #240	; 0xf0
 8024b80:	443b      	add	r3, r7
 8024b82:	3b8c      	subs	r3, #140	; 0x8c
 8024b84:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024b88:	601a      	str	r2, [r3, #0]
 8024b8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b8e:	4613      	mov	r3, r2
 8024b90:	011b      	lsls	r3, r3, #4
 8024b92:	1a9b      	subs	r3, r3, r2
 8024b94:	009b      	lsls	r3, r3, #2
 8024b96:	33f0      	adds	r3, #240	; 0xf0
 8024b98:	443b      	add	r3, r7
 8024b9a:	3b88      	subs	r3, #136	; 0x88
 8024b9c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024ba0:	601a      	str	r2, [r3, #0]
 8024ba2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ba6:	4613      	mov	r3, r2
 8024ba8:	011b      	lsls	r3, r3, #4
 8024baa:	1a9b      	subs	r3, r3, r2
 8024bac:	009b      	lsls	r3, r3, #2
 8024bae:	33f0      	adds	r3, #240	; 0xf0
 8024bb0:	443b      	add	r3, r7
 8024bb2:	3b84      	subs	r3, #132	; 0x84
 8024bb4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024bb8:	601a      	str	r2, [r3, #0]
 8024bba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024bbe:	4613      	mov	r3, r2
 8024bc0:	011b      	lsls	r3, r3, #4
 8024bc2:	1a9b      	subs	r3, r3, r2
 8024bc4:	009b      	lsls	r3, r3, #2
 8024bc6:	33f0      	adds	r3, #240	; 0xf0
 8024bc8:	443b      	add	r3, r7
 8024bca:	3b80      	subs	r3, #128	; 0x80
 8024bcc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024bd0:	601a      	str	r2, [r3, #0]
 8024bd2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024bd6:	4613      	mov	r3, r2
 8024bd8:	011b      	lsls	r3, r3, #4
 8024bda:	1a9b      	subs	r3, r3, r2
 8024bdc:	009b      	lsls	r3, r3, #2
 8024bde:	33f0      	adds	r3, #240	; 0xf0
 8024be0:	443b      	add	r3, r7
 8024be2:	3b7c      	subs	r3, #124	; 0x7c
 8024be4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024be8:	801a      	strh	r2, [r3, #0]
 8024bea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024bee:	4613      	mov	r3, r2
 8024bf0:	011b      	lsls	r3, r3, #4
 8024bf2:	1a9b      	subs	r3, r3, r2
 8024bf4:	009b      	lsls	r3, r3, #2
 8024bf6:	33f0      	adds	r3, #240	; 0xf0
 8024bf8:	443b      	add	r3, r7
 8024bfa:	3b7a      	subs	r3, #122	; 0x7a
 8024bfc:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024c00:	801a      	strh	r2, [r3, #0]
 8024c02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024c06:	4613      	mov	r3, r2
 8024c08:	011b      	lsls	r3, r3, #4
 8024c0a:	1a9b      	subs	r3, r3, r2
 8024c0c:	009b      	lsls	r3, r3, #2
 8024c0e:	33f0      	adds	r3, #240	; 0xf0
 8024c10:	443b      	add	r3, r7
 8024c12:	3b78      	subs	r3, #120	; 0x78
 8024c14:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024c18:	801a      	strh	r2, [r3, #0]
 8024c1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024c1e:	4613      	mov	r3, r2
 8024c20:	011b      	lsls	r3, r3, #4
 8024c22:	1a9b      	subs	r3, r3, r2
 8024c24:	009b      	lsls	r3, r3, #2
 8024c26:	33f0      	adds	r3, #240	; 0xf0
 8024c28:	443b      	add	r3, r7
 8024c2a:	3b74      	subs	r3, #116	; 0x74
 8024c2c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024c30:	601a      	str	r2, [r3, #0]
 8024c32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024c36:	4613      	mov	r3, r2
 8024c38:	011b      	lsls	r3, r3, #4
 8024c3a:	1a9b      	subs	r3, r3, r2
 8024c3c:	009b      	lsls	r3, r3, #2
 8024c3e:	33f0      	adds	r3, #240	; 0xf0
 8024c40:	443b      	add	r3, r7
 8024c42:	3b70      	subs	r3, #112	; 0x70
 8024c44:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024c48:	601a      	str	r2, [r3, #0]
 8024c4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024c4e:	4613      	mov	r3, r2
 8024c50:	011b      	lsls	r3, r3, #4
 8024c52:	1a9b      	subs	r3, r3, r2
 8024c54:	009b      	lsls	r3, r3, #2
 8024c56:	33f0      	adds	r3, #240	; 0xf0
 8024c58:	443b      	add	r3, r7
 8024c5a:	3b6c      	subs	r3, #108	; 0x6c
 8024c5c:	6019      	str	r1, [r3, #0]
 8024c5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024c62:	4613      	mov	r3, r2
 8024c64:	011b      	lsls	r3, r3, #4
 8024c66:	1a9b      	subs	r3, r3, r2
 8024c68:	009b      	lsls	r3, r3, #2
 8024c6a:	33f0      	adds	r3, #240	; 0xf0
 8024c6c:	443b      	add	r3, r7
 8024c6e:	3b68      	subs	r3, #104	; 0x68
 8024c70:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024c74:	601a      	str	r2, [r3, #0]
 8024c76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024c7a:	4613      	mov	r3, r2
 8024c7c:	011b      	lsls	r3, r3, #4
 8024c7e:	1a9b      	subs	r3, r3, r2
 8024c80:	009b      	lsls	r3, r3, #2
 8024c82:	33f0      	adds	r3, #240	; 0xf0
 8024c84:	443b      	add	r3, r7
 8024c86:	3b68      	subs	r3, #104	; 0x68
 8024c88:	3304      	adds	r3, #4
 8024c8a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8024c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024c92:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8024c96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024c9a:	3301      	adds	r3, #1
 8024c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8024ca0:	2300      	movs	r3, #0
 8024ca2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8024ca6:	2300      	movs	r3, #0
 8024ca8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8024cac:	2300      	movs	r3, #0
 8024cae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8024cb2:	2300      	movs	r3, #0
 8024cb4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8024cb8:	2300      	movs	r3, #0
 8024cba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8024cbe:	4b0d      	ldr	r3, [pc, #52]	; (8024cf4 <lfs_dir_traverse+0x2dc>)
 8024cc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8024cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024cc8:	1e5a      	subs	r2, r3, #1
 8024cca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8024cce:	4613      	mov	r3, r2
 8024cd0:	011b      	lsls	r3, r3, #4
 8024cd2:	1a9b      	subs	r3, r3, r2
 8024cd4:	009b      	lsls	r3, r3, #2
 8024cd6:	3328      	adds	r3, #40	; 0x28
 8024cd8:	440b      	add	r3, r1
 8024cda:	3304      	adds	r3, #4
 8024cdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8024ce0:	e19e      	b.n	8025020 <lfs_dir_traverse+0x608>
 8024ce2:	bf00      	nop
 8024ce4:	7ff00000 	.word	0x7ff00000
 8024ce8:	08033534 	.word	0x08033534
 8024cec:	08034714 	.word	0x08034714
 8024cf0:	0803341c 	.word	0x0803341c
 8024cf4:	08024961 	.word	0x08024961
            }
        }

popped:
 8024cf8:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8024cfa:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024cfe:	f7ff f94f 	bl	8023fa0 <lfs_tag_id>
 8024d02:	4603      	mov	r3, r0
 8024d04:	2b00      	cmp	r3, #0
 8024d06:	d015      	beq.n	8024d34 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024d0a:	4618      	mov	r0, r3
 8024d0c:	f7ff f948 	bl	8023fa0 <lfs_tag_id>
 8024d10:	4603      	mov	r3, r0
 8024d12:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8024d14:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8024d18:	4293      	cmp	r3, r2
 8024d1a:	f200 817c 	bhi.w	8025016 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024d20:	4618      	mov	r0, r3
 8024d22:	f7ff f93d 	bl	8023fa0 <lfs_tag_id>
 8024d26:	4603      	mov	r3, r0
 8024d28:	461a      	mov	r2, r3
 8024d2a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8024d2e:	4293      	cmp	r3, r2
 8024d30:	f240 8171 	bls.w	8025016 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8024d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024d36:	4618      	mov	r0, r3
 8024d38:	f7ff f908 	bl	8023f4c <lfs_tag_type3>
 8024d3c:	4603      	mov	r3, r0
 8024d3e:	2b00      	cmp	r3, #0
 8024d40:	f43f ae74 	beq.w	8024a2c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8024d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024d46:	4618      	mov	r0, r3
 8024d48:	f7ff f900 	bl	8023f4c <lfs_tag_type3>
 8024d4c:	4603      	mov	r3, r0
 8024d4e:	461a      	mov	r2, r3
 8024d50:	f240 1301 	movw	r3, #257	; 0x101
 8024d54:	429a      	cmp	r2, r3
 8024d56:	f040 80e0 	bne.w	8024f1a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8024d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024d5e:	4ab1      	ldr	r2, [pc, #708]	; (8025024 <lfs_dir_traverse+0x60c>)
 8024d60:	4293      	cmp	r3, r2
 8024d62:	f000 815a 	beq.w	802501a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8024d66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d6a:	4613      	mov	r3, r2
 8024d6c:	011b      	lsls	r3, r3, #4
 8024d6e:	1a9b      	subs	r3, r3, r2
 8024d70:	009b      	lsls	r3, r3, #2
 8024d72:	33f0      	adds	r3, #240	; 0xf0
 8024d74:	443b      	add	r3, r7
 8024d76:	3b98      	subs	r3, #152	; 0x98
 8024d78:	4618      	mov	r0, r3
 8024d7a:	233c      	movs	r3, #60	; 0x3c
 8024d7c:	461a      	mov	r2, r3
 8024d7e:	2100      	movs	r1, #0
 8024d80:	f008 fd0c 	bl	802d79c <memset>
 8024d84:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d88:	4613      	mov	r3, r2
 8024d8a:	011b      	lsls	r3, r3, #4
 8024d8c:	1a9b      	subs	r3, r3, r2
 8024d8e:	009b      	lsls	r3, r3, #2
 8024d90:	33f0      	adds	r3, #240	; 0xf0
 8024d92:	443b      	add	r3, r7
 8024d94:	3b98      	subs	r3, #152	; 0x98
 8024d96:	68ba      	ldr	r2, [r7, #8]
 8024d98:	601a      	str	r2, [r3, #0]
 8024d9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d9e:	4613      	mov	r3, r2
 8024da0:	011b      	lsls	r3, r3, #4
 8024da2:	1a9b      	subs	r3, r3, r2
 8024da4:	009b      	lsls	r3, r3, #2
 8024da6:	33f0      	adds	r3, #240	; 0xf0
 8024da8:	443b      	add	r3, r7
 8024daa:	3b94      	subs	r3, #148	; 0x94
 8024dac:	687a      	ldr	r2, [r7, #4]
 8024dae:	601a      	str	r2, [r3, #0]
 8024db0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024db4:	4613      	mov	r3, r2
 8024db6:	011b      	lsls	r3, r3, #4
 8024db8:	1a9b      	subs	r3, r3, r2
 8024dba:	009b      	lsls	r3, r3, #2
 8024dbc:	33f0      	adds	r3, #240	; 0xf0
 8024dbe:	443b      	add	r3, r7
 8024dc0:	3b90      	subs	r3, #144	; 0x90
 8024dc2:	683a      	ldr	r2, [r7, #0]
 8024dc4:	601a      	str	r2, [r3, #0]
 8024dc6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dca:	4613      	mov	r3, r2
 8024dcc:	011b      	lsls	r3, r3, #4
 8024dce:	1a9b      	subs	r3, r3, r2
 8024dd0:	009b      	lsls	r3, r3, #2
 8024dd2:	33f0      	adds	r3, #240	; 0xf0
 8024dd4:	443b      	add	r3, r7
 8024dd6:	3b8c      	subs	r3, #140	; 0x8c
 8024dd8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024ddc:	601a      	str	r2, [r3, #0]
 8024dde:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024de2:	4613      	mov	r3, r2
 8024de4:	011b      	lsls	r3, r3, #4
 8024de6:	1a9b      	subs	r3, r3, r2
 8024de8:	009b      	lsls	r3, r3, #2
 8024dea:	33f0      	adds	r3, #240	; 0xf0
 8024dec:	443b      	add	r3, r7
 8024dee:	3b88      	subs	r3, #136	; 0x88
 8024df0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024df4:	601a      	str	r2, [r3, #0]
 8024df6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dfa:	4613      	mov	r3, r2
 8024dfc:	011b      	lsls	r3, r3, #4
 8024dfe:	1a9b      	subs	r3, r3, r2
 8024e00:	009b      	lsls	r3, r3, #2
 8024e02:	33f0      	adds	r3, #240	; 0xf0
 8024e04:	443b      	add	r3, r7
 8024e06:	3b84      	subs	r3, #132	; 0x84
 8024e08:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024e0c:	601a      	str	r2, [r3, #0]
 8024e0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e12:	4613      	mov	r3, r2
 8024e14:	011b      	lsls	r3, r3, #4
 8024e16:	1a9b      	subs	r3, r3, r2
 8024e18:	009b      	lsls	r3, r3, #2
 8024e1a:	33f0      	adds	r3, #240	; 0xf0
 8024e1c:	443b      	add	r3, r7
 8024e1e:	3b80      	subs	r3, #128	; 0x80
 8024e20:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024e24:	601a      	str	r2, [r3, #0]
 8024e26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e2a:	4613      	mov	r3, r2
 8024e2c:	011b      	lsls	r3, r3, #4
 8024e2e:	1a9b      	subs	r3, r3, r2
 8024e30:	009b      	lsls	r3, r3, #2
 8024e32:	33f0      	adds	r3, #240	; 0xf0
 8024e34:	443b      	add	r3, r7
 8024e36:	3b7c      	subs	r3, #124	; 0x7c
 8024e38:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024e3c:	801a      	strh	r2, [r3, #0]
 8024e3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e42:	4613      	mov	r3, r2
 8024e44:	011b      	lsls	r3, r3, #4
 8024e46:	1a9b      	subs	r3, r3, r2
 8024e48:	009b      	lsls	r3, r3, #2
 8024e4a:	33f0      	adds	r3, #240	; 0xf0
 8024e4c:	443b      	add	r3, r7
 8024e4e:	3b7a      	subs	r3, #122	; 0x7a
 8024e50:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024e54:	801a      	strh	r2, [r3, #0]
 8024e56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e5a:	4613      	mov	r3, r2
 8024e5c:	011b      	lsls	r3, r3, #4
 8024e5e:	1a9b      	subs	r3, r3, r2
 8024e60:	009b      	lsls	r3, r3, #2
 8024e62:	33f0      	adds	r3, #240	; 0xf0
 8024e64:	443b      	add	r3, r7
 8024e66:	3b78      	subs	r3, #120	; 0x78
 8024e68:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024e6c:	801a      	strh	r2, [r3, #0]
 8024e6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e72:	4613      	mov	r3, r2
 8024e74:	011b      	lsls	r3, r3, #4
 8024e76:	1a9b      	subs	r3, r3, r2
 8024e78:	009b      	lsls	r3, r3, #2
 8024e7a:	33f0      	adds	r3, #240	; 0xf0
 8024e7c:	443b      	add	r3, r7
 8024e7e:	3b74      	subs	r3, #116	; 0x74
 8024e80:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024e84:	601a      	str	r2, [r3, #0]
 8024e86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e8a:	4613      	mov	r3, r2
 8024e8c:	011b      	lsls	r3, r3, #4
 8024e8e:	1a9b      	subs	r3, r3, r2
 8024e90:	009b      	lsls	r3, r3, #2
 8024e92:	33f0      	adds	r3, #240	; 0xf0
 8024e94:	443b      	add	r3, r7
 8024e96:	3b70      	subs	r3, #112	; 0x70
 8024e98:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024e9c:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8024e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024ea2:	3301      	adds	r3, #1
 8024ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8024ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024eaa:	4618      	mov	r0, r3
 8024eac:	f7ff f888 	bl	8023fc0 <lfs_tag_size>
 8024eb0:	4603      	mov	r3, r0
 8024eb2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8024eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024eb8:	4618      	mov	r0, r3
 8024eba:	f7ff f871 	bl	8023fa0 <lfs_tag_id>
 8024ebe:	4603      	mov	r3, r0
 8024ec0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8024ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024ec8:	60bb      	str	r3, [r7, #8]
            off = 0;
 8024eca:	2300      	movs	r3, #0
 8024ecc:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8024ece:	f04f 33ff 	mov.w	r3, #4294967295
 8024ed2:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8024ed4:	2300      	movs	r3, #0
 8024ed6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8024eda:	2300      	movs	r3, #0
 8024edc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8024ee0:	4b51      	ldr	r3, [pc, #324]	; (8025028 <lfs_dir_traverse+0x610>)
 8024ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8024ee6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024eea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8024eee:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024ef2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8024ef6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024efa:	3301      	adds	r3, #1
 8024efc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8024f00:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8024f04:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024f08:	1ad3      	subs	r3, r2, r3
 8024f0a:	b29a      	uxth	r2, r3
 8024f0c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8024f10:	4413      	add	r3, r2
 8024f12:	b29b      	uxth	r3, r3
 8024f14:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8024f18:	e588      	b.n	8024a2c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8024f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024f1c:	4618      	mov	r0, r3
 8024f1e:	f7ff f815 	bl	8023f4c <lfs_tag_type3>
 8024f22:	4603      	mov	r3, r0
 8024f24:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8024f28:	d159      	bne.n	8024fde <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024f2a:	2300      	movs	r3, #0
 8024f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024f30:	e04b      	b.n	8024fca <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8024f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024f3e:	4613      	mov	r3, r2
 8024f40:	005b      	lsls	r3, r3, #1
 8024f42:	4413      	add	r3, r2
 8024f44:	009b      	lsls	r3, r3, #2
 8024f46:	461a      	mov	r2, r3
 8024f48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024f4c:	4413      	add	r3, r2
 8024f4e:	781b      	ldrb	r3, [r3, #0]
 8024f50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8024f54:	051c      	lsls	r4, r3, #20
 8024f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024f58:	4618      	mov	r0, r3
 8024f5a:	f7ff f821 	bl	8023fa0 <lfs_tag_id>
 8024f5e:	4603      	mov	r3, r0
 8024f60:	461a      	mov	r2, r3
 8024f62:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024f66:	4413      	add	r3, r2
 8024f68:	029b      	lsls	r3, r3, #10
 8024f6a:	ea44 0103 	orr.w	r1, r4, r3
 8024f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024f72:	4613      	mov	r3, r2
 8024f74:	005b      	lsls	r3, r3, #1
 8024f76:	4413      	add	r3, r2
 8024f78:	009b      	lsls	r3, r3, #2
 8024f7a:	461a      	mov	r2, r3
 8024f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024f80:	4413      	add	r3, r2
 8024f82:	689b      	ldr	r3, [r3, #8]
 8024f84:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8024f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024f8a:	4613      	mov	r3, r2
 8024f8c:	005b      	lsls	r3, r3, #1
 8024f8e:	4413      	add	r3, r2
 8024f90:	009b      	lsls	r3, r3, #2
 8024f92:	461a      	mov	r2, r3
 8024f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024f98:	4413      	add	r3, r2
 8024f9a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024fa0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024fa4:	4798      	blx	r3
 8024fa6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8024faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	da02      	bge.n	8024fb8 <lfs_dir_traverse+0x5a0>
                    return res;
 8024fb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024fb6:	e10b      	b.n	80251d0 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8024fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d12e      	bne.n	802501e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024fc4:	3301      	adds	r3, #1
 8024fc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024fcc:	4618      	mov	r0, r3
 8024fce:	f7fe fff7 	bl	8023fc0 <lfs_tag_size>
 8024fd2:	4602      	mov	r2, r0
 8024fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024fd8:	4293      	cmp	r3, r2
 8024fda:	d3aa      	bcc.n	8024f32 <lfs_dir_traverse+0x51a>
 8024fdc:	e526      	b.n	8024a2c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8024fde:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024fe2:	029a      	lsls	r2, r3, #10
 8024fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024fe6:	18d1      	adds	r1, r2, r3
 8024fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024fec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024ff0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024ff4:	4798      	blx	r3
 8024ff6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8024ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024ffe:	2b00      	cmp	r3, #0
 8025000:	da02      	bge.n	8025008 <lfs_dir_traverse+0x5f0>
                return res;
 8025002:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8025006:	e0e3      	b.n	80251d0 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8025008:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802500c:	2b00      	cmp	r3, #0
 802500e:	d10d      	bne.n	802502c <lfs_dir_traverse+0x614>
 8025010:	e50c      	b.n	8024a2c <lfs_dir_traverse+0x14>
                continue;
 8025012:	bf00      	nop
 8025014:	e50a      	b.n	8024a2c <lfs_dir_traverse+0x14>
            continue;
 8025016:	bf00      	nop
 8025018:	e508      	b.n	8024a2c <lfs_dir_traverse+0x14>
                continue;
 802501a:	bf00      	nop
 802501c:	e506      	b.n	8024a2c <lfs_dir_traverse+0x14>
                    break;
 802501e:	bf00      	nop
        {
 8025020:	e504      	b.n	8024a2c <lfs_dir_traverse+0x14>
 8025022:	bf00      	nop
 8025024:	08024961 	.word	0x08024961
 8025028:	600ffc00 	.word	0x600ffc00
                break;
 802502c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 802502e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025032:	2b00      	cmp	r3, #0
 8025034:	f000 80ca 	beq.w	80251cc <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8025038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802503c:	1e5a      	subs	r2, r3, #1
 802503e:	4613      	mov	r3, r2
 8025040:	011b      	lsls	r3, r3, #4
 8025042:	1a9b      	subs	r3, r3, r2
 8025044:	009b      	lsls	r3, r3, #2
 8025046:	33f0      	adds	r3, #240	; 0xf0
 8025048:	443b      	add	r3, r7
 802504a:	3b98      	subs	r3, #152	; 0x98
 802504c:	681b      	ldr	r3, [r3, #0]
 802504e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8025050:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025054:	1e5a      	subs	r2, r3, #1
 8025056:	4613      	mov	r3, r2
 8025058:	011b      	lsls	r3, r3, #4
 802505a:	1a9b      	subs	r3, r3, r2
 802505c:	009b      	lsls	r3, r3, #2
 802505e:	33f0      	adds	r3, #240	; 0xf0
 8025060:	443b      	add	r3, r7
 8025062:	3b94      	subs	r3, #148	; 0x94
 8025064:	681b      	ldr	r3, [r3, #0]
 8025066:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8025068:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802506c:	1e5a      	subs	r2, r3, #1
 802506e:	4613      	mov	r3, r2
 8025070:	011b      	lsls	r3, r3, #4
 8025072:	1a9b      	subs	r3, r3, r2
 8025074:	009b      	lsls	r3, r3, #2
 8025076:	33f0      	adds	r3, #240	; 0xf0
 8025078:	443b      	add	r3, r7
 802507a:	3b90      	subs	r3, #144	; 0x90
 802507c:	681b      	ldr	r3, [r3, #0]
 802507e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8025080:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025084:	1e5a      	subs	r2, r3, #1
 8025086:	4613      	mov	r3, r2
 8025088:	011b      	lsls	r3, r3, #4
 802508a:	1a9b      	subs	r3, r3, r2
 802508c:	009b      	lsls	r3, r3, #2
 802508e:	33f0      	adds	r3, #240	; 0xf0
 8025090:	443b      	add	r3, r7
 8025092:	3b8c      	subs	r3, #140	; 0x8c
 8025094:	681b      	ldr	r3, [r3, #0]
 8025096:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 802509a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802509e:	1e5a      	subs	r2, r3, #1
 80250a0:	4613      	mov	r3, r2
 80250a2:	011b      	lsls	r3, r3, #4
 80250a4:	1a9b      	subs	r3, r3, r2
 80250a6:	009b      	lsls	r3, r3, #2
 80250a8:	33f0      	adds	r3, #240	; 0xf0
 80250aa:	443b      	add	r3, r7
 80250ac:	3b88      	subs	r3, #136	; 0x88
 80250ae:	681b      	ldr	r3, [r3, #0]
 80250b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80250b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250b8:	1e5a      	subs	r2, r3, #1
 80250ba:	4613      	mov	r3, r2
 80250bc:	011b      	lsls	r3, r3, #4
 80250be:	1a9b      	subs	r3, r3, r2
 80250c0:	009b      	lsls	r3, r3, #2
 80250c2:	33f0      	adds	r3, #240	; 0xf0
 80250c4:	443b      	add	r3, r7
 80250c6:	3b84      	subs	r3, #132	; 0x84
 80250c8:	681b      	ldr	r3, [r3, #0]
 80250ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80250ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250d2:	1e5a      	subs	r2, r3, #1
 80250d4:	4613      	mov	r3, r2
 80250d6:	011b      	lsls	r3, r3, #4
 80250d8:	1a9b      	subs	r3, r3, r2
 80250da:	009b      	lsls	r3, r3, #2
 80250dc:	33f0      	adds	r3, #240	; 0xf0
 80250de:	443b      	add	r3, r7
 80250e0:	3b80      	subs	r3, #128	; 0x80
 80250e2:	681b      	ldr	r3, [r3, #0]
 80250e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80250e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250ec:	1e5a      	subs	r2, r3, #1
 80250ee:	4613      	mov	r3, r2
 80250f0:	011b      	lsls	r3, r3, #4
 80250f2:	1a9b      	subs	r3, r3, r2
 80250f4:	009b      	lsls	r3, r3, #2
 80250f6:	33f0      	adds	r3, #240	; 0xf0
 80250f8:	443b      	add	r3, r7
 80250fa:	3b7c      	subs	r3, #124	; 0x7c
 80250fc:	881b      	ldrh	r3, [r3, #0]
 80250fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8025102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025106:	1e5a      	subs	r2, r3, #1
 8025108:	4613      	mov	r3, r2
 802510a:	011b      	lsls	r3, r3, #4
 802510c:	1a9b      	subs	r3, r3, r2
 802510e:	009b      	lsls	r3, r3, #2
 8025110:	33f0      	adds	r3, #240	; 0xf0
 8025112:	443b      	add	r3, r7
 8025114:	3b7a      	subs	r3, #122	; 0x7a
 8025116:	881b      	ldrh	r3, [r3, #0]
 8025118:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 802511c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025120:	1e5a      	subs	r2, r3, #1
 8025122:	4613      	mov	r3, r2
 8025124:	011b      	lsls	r3, r3, #4
 8025126:	1a9b      	subs	r3, r3, r2
 8025128:	009b      	lsls	r3, r3, #2
 802512a:	33f0      	adds	r3, #240	; 0xf0
 802512c:	443b      	add	r3, r7
 802512e:	3b78      	subs	r3, #120	; 0x78
 8025130:	881b      	ldrh	r3, [r3, #0]
 8025132:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8025136:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802513a:	1e5a      	subs	r2, r3, #1
 802513c:	4613      	mov	r3, r2
 802513e:	011b      	lsls	r3, r3, #4
 8025140:	1a9b      	subs	r3, r3, r2
 8025142:	009b      	lsls	r3, r3, #2
 8025144:	33f0      	adds	r3, #240	; 0xf0
 8025146:	443b      	add	r3, r7
 8025148:	3b74      	subs	r3, #116	; 0x74
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8025150:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025154:	1e5a      	subs	r2, r3, #1
 8025156:	4613      	mov	r3, r2
 8025158:	011b      	lsls	r3, r3, #4
 802515a:	1a9b      	subs	r3, r3, r2
 802515c:	009b      	lsls	r3, r3, #2
 802515e:	33f0      	adds	r3, #240	; 0xf0
 8025160:	443b      	add	r3, r7
 8025162:	3b70      	subs	r3, #112	; 0x70
 8025164:	681b      	ldr	r3, [r3, #0]
 8025166:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 802516a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802516e:	1e5a      	subs	r2, r3, #1
 8025170:	4613      	mov	r3, r2
 8025172:	011b      	lsls	r3, r3, #4
 8025174:	1a9b      	subs	r3, r3, r2
 8025176:	009b      	lsls	r3, r3, #2
 8025178:	33f0      	adds	r3, #240	; 0xf0
 802517a:	443b      	add	r3, r7
 802517c:	3b6c      	subs	r3, #108	; 0x6c
 802517e:	681b      	ldr	r3, [r3, #0]
 8025180:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8025182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025186:	1e5a      	subs	r2, r3, #1
 8025188:	4613      	mov	r3, r2
 802518a:	011b      	lsls	r3, r3, #4
 802518c:	1a9b      	subs	r3, r3, r2
 802518e:	009b      	lsls	r3, r3, #2
 8025190:	33f0      	adds	r3, #240	; 0xf0
 8025192:	443b      	add	r3, r7
 8025194:	3b68      	subs	r3, #104	; 0x68
 8025196:	681b      	ldr	r3, [r3, #0]
 8025198:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 802519c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251a0:	1e5a      	subs	r2, r3, #1
 80251a2:	4613      	mov	r3, r2
 80251a4:	011b      	lsls	r3, r3, #4
 80251a6:	1a9b      	subs	r3, r3, r2
 80251a8:	009b      	lsls	r3, r3, #2
 80251aa:	33f0      	adds	r3, #240	; 0xf0
 80251ac:	443b      	add	r3, r7
 80251ae:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80251b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80251b6:	3204      	adds	r2, #4
 80251b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80251bc:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80251c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251c4:	3b01      	subs	r3, #1
 80251c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80251ca:	e596      	b.n	8024cfa <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80251cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80251d0:	4618      	mov	r0, r3
 80251d2:	37f4      	adds	r7, #244	; 0xf4
 80251d4:	46bd      	mov	sp, r7
 80251d6:	bd90      	pop	{r4, r7, pc}

080251d8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80251d8:	b590      	push	{r4, r7, lr}
 80251da:	b09f      	sub	sp, #124	; 0x7c
 80251dc:	af04      	add	r7, sp, #16
 80251de:	60f8      	str	r0, [r7, #12]
 80251e0:	60b9      	str	r1, [r7, #8]
 80251e2:	607a      	str	r2, [r7, #4]
 80251e4:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80251e6:	f04f 33ff 	mov.w	r3, #4294967295
 80251ea:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80251ec:	687b      	ldr	r3, [r7, #4]
 80251ee:	681a      	ldr	r2, [r3, #0]
 80251f0:	68fb      	ldr	r3, [r7, #12]
 80251f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80251f4:	6a1b      	ldr	r3, [r3, #32]
 80251f6:	429a      	cmp	r2, r3
 80251f8:	d207      	bcs.n	802520a <lfs_dir_fetchmatch+0x32>
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	3304      	adds	r3, #4
 80251fe:	681a      	ldr	r2, [r3, #0]
 8025200:	68fb      	ldr	r3, [r7, #12]
 8025202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025204:	6a1b      	ldr	r3, [r3, #32]
 8025206:	429a      	cmp	r2, r3
 8025208:	d302      	bcc.n	8025210 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 802520a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802520e:	e342      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8025210:	2300      	movs	r3, #0
 8025212:	633b      	str	r3, [r7, #48]	; 0x30
 8025214:	2300      	movs	r3, #0
 8025216:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8025218:	2300      	movs	r3, #0
 802521a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 802521c:	2300      	movs	r3, #0
 802521e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025220:	e052      	b.n	80252c8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8025222:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8025224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025226:	009b      	lsls	r3, r3, #2
 8025228:	687a      	ldr	r2, [r7, #4]
 802522a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 802522c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 802522e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8025232:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025234:	0092      	lsls	r2, r2, #2
 8025236:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8025238:	2104      	movs	r1, #4
 802523a:	9103      	str	r1, [sp, #12]
 802523c:	9202      	str	r2, [sp, #8]
 802523e:	2200      	movs	r2, #0
 8025240:	9201      	str	r2, [sp, #4]
 8025242:	9300      	str	r3, [sp, #0]
 8025244:	2304      	movs	r3, #4
 8025246:	4602      	mov	r2, r0
 8025248:	2100      	movs	r1, #0
 802524a:	68f8      	ldr	r0, [r7, #12]
 802524c:	f7fe fa6e 	bl	802372c <lfs_bd_read>
 8025250:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8025252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025254:	009b      	lsls	r3, r3, #2
 8025256:	3368      	adds	r3, #104	; 0x68
 8025258:	443b      	add	r3, r7
 802525a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 802525e:	4618      	mov	r0, r3
 8025260:	f7fe f9f8 	bl	8023654 <lfs_fromle32>
 8025264:	4602      	mov	r2, r0
 8025266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025268:	009b      	lsls	r3, r3, #2
 802526a:	3368      	adds	r3, #104	; 0x68
 802526c:	443b      	add	r3, r7
 802526e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8025272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025274:	2b00      	cmp	r3, #0
 8025276:	d005      	beq.n	8025284 <lfs_dir_fetchmatch+0xac>
 8025278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802527a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802527e:	d001      	beq.n	8025284 <lfs_dir_fetchmatch+0xac>
            return err;
 8025280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025282:	e308      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8025284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025286:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802528a:	d01a      	beq.n	80252c2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 802528c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802528e:	009b      	lsls	r3, r3, #2
 8025290:	3368      	adds	r3, #104	; 0x68
 8025292:	443b      	add	r3, r7
 8025294:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802529a:	3301      	adds	r3, #1
 802529c:	2b00      	cmp	r3, #0
 802529e:	f003 0301 	and.w	r3, r3, #1
 80252a2:	bfb8      	it	lt
 80252a4:	425b      	neglt	r3, r3
 80252a6:	009b      	lsls	r3, r3, #2
 80252a8:	3368      	adds	r3, #104	; 0x68
 80252aa:	443b      	add	r3, r7
 80252ac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80252b0:	4619      	mov	r1, r3
 80252b2:	4610      	mov	r0, r2
 80252b4:	f7fe f9c0 	bl	8023638 <lfs_scmp>
 80252b8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80252ba:	2b00      	cmp	r3, #0
 80252bc:	dd01      	ble.n	80252c2 <lfs_dir_fetchmatch+0xea>
            r = i;
 80252be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80252c0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80252c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80252c4:	3301      	adds	r3, #1
 80252c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80252c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80252ca:	2b01      	cmp	r3, #1
 80252cc:	dda9      	ble.n	8025222 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80252ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	f003 0301 	and.w	r3, r3, #1
 80252d6:	bfb8      	it	lt
 80252d8:	425b      	neglt	r3, r3
 80252da:	009b      	lsls	r3, r3, #2
 80252dc:	687a      	ldr	r2, [r7, #4]
 80252de:	4413      	add	r3, r2
 80252e0:	681a      	ldr	r2, [r3, #0]
 80252e2:	68bb      	ldr	r3, [r7, #8]
 80252e4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80252e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80252e8:	3301      	adds	r3, #1
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	f003 0301 	and.w	r3, r3, #1
 80252f0:	bfb8      	it	lt
 80252f2:	425b      	neglt	r3, r3
 80252f4:	009b      	lsls	r3, r3, #2
 80252f6:	687a      	ldr	r2, [r7, #4]
 80252f8:	4413      	add	r3, r2
 80252fa:	681a      	ldr	r2, [r3, #0]
 80252fc:	68bb      	ldr	r3, [r7, #8]
 80252fe:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8025300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025302:	2b00      	cmp	r3, #0
 8025304:	f003 0301 	and.w	r3, r3, #1
 8025308:	bfb8      	it	lt
 802530a:	425b      	neglt	r3, r3
 802530c:	009b      	lsls	r3, r3, #2
 802530e:	3368      	adds	r3, #104	; 0x68
 8025310:	443b      	add	r3, r7
 8025312:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025316:	68bb      	ldr	r3, [r7, #8]
 8025318:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 802531a:	68bb      	ldr	r3, [r7, #8]
 802531c:	2200      	movs	r2, #0
 802531e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8025320:	2300      	movs	r3, #0
 8025322:	65bb      	str	r3, [r7, #88]	; 0x58
 8025324:	e2a3      	b.n	802586e <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8025326:	2300      	movs	r3, #0
 8025328:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 802532a:	f04f 33ff 	mov.w	r3, #4294967295
 802532e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8025330:	2300      	movs	r3, #0
 8025332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8025336:	4a96      	ldr	r2, [pc, #600]	; (8025590 <lfs_dir_fetchmatch+0x3b8>)
 8025338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802533c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025340:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8025344:	2300      	movs	r3, #0
 8025346:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 802534a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802534c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 802534e:	68bb      	ldr	r3, [r7, #8]
 8025350:	689b      	ldr	r3, [r3, #8]
 8025352:	4618      	mov	r0, r3
 8025354:	f7fe f989 	bl	802366a <lfs_tole32>
 8025358:	4602      	mov	r2, r0
 802535a:	68bb      	ldr	r3, [r7, #8]
 802535c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 802535e:	68bb      	ldr	r3, [r7, #8]
 8025360:	3308      	adds	r3, #8
 8025362:	2204      	movs	r2, #4
 8025364:	4619      	mov	r1, r3
 8025366:	f04f 30ff 	mov.w	r0, #4294967295
 802536a:	f005 fbc9 	bl	802ab00 <lfs_crc>
 802536e:	4603      	mov	r3, r0
 8025370:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8025372:	68bb      	ldr	r3, [r7, #8]
 8025374:	689b      	ldr	r3, [r3, #8]
 8025376:	4618      	mov	r0, r3
 8025378:	f7fe f96c 	bl	8023654 <lfs_fromle32>
 802537c:	4602      	mov	r2, r0
 802537e:	68bb      	ldr	r3, [r7, #8]
 8025380:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8025382:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8025384:	f7fe fe29 	bl	8023fda <lfs_tag_dsize>
 8025388:	4602      	mov	r2, r0
 802538a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802538c:	4413      	add	r3, r2
 802538e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8025390:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8025392:	68fb      	ldr	r3, [r7, #12]
 8025394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025396:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8025398:	68bb      	ldr	r3, [r7, #8]
 802539a:	681b      	ldr	r3, [r3, #0]
 802539c:	2204      	movs	r2, #4
 802539e:	9203      	str	r2, [sp, #12]
 80253a0:	f107 0220 	add.w	r2, r7, #32
 80253a4:	9202      	str	r2, [sp, #8]
 80253a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80253a8:	9201      	str	r2, [sp, #4]
 80253aa:	9300      	str	r3, [sp, #0]
 80253ac:	4603      	mov	r3, r0
 80253ae:	460a      	mov	r2, r1
 80253b0:	2100      	movs	r1, #0
 80253b2:	68f8      	ldr	r0, [r7, #12]
 80253b4:	f7fe f9ba 	bl	802372c <lfs_bd_read>
 80253b8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80253ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80253bc:	2b00      	cmp	r3, #0
 80253be:	d009      	beq.n	80253d4 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80253c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80253c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80253c6:	d103      	bne.n	80253d0 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80253c8:	68bb      	ldr	r3, [r7, #8]
 80253ca:	2200      	movs	r2, #0
 80253cc:	759a      	strb	r2, [r3, #22]
                    break;
 80253ce:	e1d6      	b.n	802577e <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80253d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80253d2:	e260      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80253d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253d6:	f107 0120 	add.w	r1, r7, #32
 80253da:	2204      	movs	r2, #4
 80253dc:	4618      	mov	r0, r3
 80253de:	f005 fb8f 	bl	802ab00 <lfs_crc>
 80253e2:	4603      	mov	r3, r0
 80253e4:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 80253e6:	6a3b      	ldr	r3, [r7, #32]
 80253e8:	4618      	mov	r0, r3
 80253ea:	f7fe f94a 	bl	8023682 <lfs_frombe32>
 80253ee:	4602      	mov	r2, r0
 80253f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80253f2:	4053      	eors	r3, r2
 80253f4:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 80253f6:	6a3b      	ldr	r3, [r7, #32]
 80253f8:	4618      	mov	r0, r3
 80253fa:	f7fe fd76 	bl	8023eea <lfs_tag_isvalid>
 80253fe:	4603      	mov	r3, r0
 8025400:	f083 0301 	eor.w	r3, r3, #1
 8025404:	b2db      	uxtb	r3, r3
 8025406:	2b00      	cmp	r3, #0
 8025408:	d01b      	beq.n	8025442 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802540a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802540c:	f7fe fd8e 	bl	8023f2c <lfs_tag_type1>
 8025410:	4603      	mov	r3, r0
 8025412:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025416:	d10d      	bne.n	8025434 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8025418:	68bb      	ldr	r3, [r7, #8]
 802541a:	68db      	ldr	r3, [r3, #12]
 802541c:	68fa      	ldr	r2, [r7, #12]
 802541e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025420:	6992      	ldr	r2, [r2, #24]
 8025422:	fbb3 f1f2 	udiv	r1, r3, r2
 8025426:	fb01 f202 	mul.w	r2, r1, r2
 802542a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802542c:	2b00      	cmp	r3, #0
 802542e:	d101      	bne.n	8025434 <lfs_dir_fetchmatch+0x25c>
 8025430:	2301      	movs	r3, #1
 8025432:	e000      	b.n	8025436 <lfs_dir_fetchmatch+0x25e>
 8025434:	2300      	movs	r3, #0
 8025436:	f003 0301 	and.w	r3, r3, #1
 802543a:	b2da      	uxtb	r2, r3
 802543c:	68bb      	ldr	r3, [r7, #8]
 802543e:	759a      	strb	r2, [r3, #22]
                break;
 8025440:	e19d      	b.n	802577e <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8025442:	6a3b      	ldr	r3, [r7, #32]
 8025444:	4618      	mov	r0, r3
 8025446:	f7fe fdc8 	bl	8023fda <lfs_tag_dsize>
 802544a:	4602      	mov	r2, r0
 802544c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802544e:	441a      	add	r2, r3
 8025450:	68fb      	ldr	r3, [r7, #12]
 8025452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025454:	69db      	ldr	r3, [r3, #28]
 8025456:	429a      	cmp	r2, r3
 8025458:	d903      	bls.n	8025462 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 802545a:	68bb      	ldr	r3, [r7, #8]
 802545c:	2200      	movs	r2, #0
 802545e:	759a      	strb	r2, [r3, #22]
                break;
 8025460:	e18d      	b.n	802577e <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8025462:	6a3b      	ldr	r3, [r7, #32]
 8025464:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8025466:	6a3b      	ldr	r3, [r7, #32]
 8025468:	4618      	mov	r0, r3
 802546a:	f7fe fd5f 	bl	8023f2c <lfs_tag_type1>
 802546e:	4603      	mov	r3, r0
 8025470:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025474:	d164      	bne.n	8025540 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8025476:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025478:	68fb      	ldr	r3, [r7, #12]
 802547a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802547c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802547e:	68bb      	ldr	r3, [r7, #8]
 8025480:	681b      	ldr	r3, [r3, #0]
 8025482:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025484:	3204      	adds	r2, #4
 8025486:	2104      	movs	r1, #4
 8025488:	9103      	str	r1, [sp, #12]
 802548a:	f107 011c 	add.w	r1, r7, #28
 802548e:	9102      	str	r1, [sp, #8]
 8025490:	9201      	str	r2, [sp, #4]
 8025492:	9300      	str	r3, [sp, #0]
 8025494:	4623      	mov	r3, r4
 8025496:	4602      	mov	r2, r0
 8025498:	2100      	movs	r1, #0
 802549a:	68f8      	ldr	r0, [r7, #12]
 802549c:	f7fe f946 	bl	802372c <lfs_bd_read>
 80254a0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80254a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254a4:	2b00      	cmp	r3, #0
 80254a6:	d009      	beq.n	80254bc <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80254a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254aa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80254ae:	d103      	bne.n	80254b8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80254b0:	68bb      	ldr	r3, [r7, #8]
 80254b2:	2200      	movs	r2, #0
 80254b4:	759a      	strb	r2, [r3, #22]
                        break;
 80254b6:	e162      	b.n	802577e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80254b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80254ba:	e1ec      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80254bc:	69fb      	ldr	r3, [r7, #28]
 80254be:	4618      	mov	r0, r3
 80254c0:	f7fe f8c8 	bl	8023654 <lfs_fromle32>
 80254c4:	4603      	mov	r3, r0
 80254c6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80254c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80254ca:	69fb      	ldr	r3, [r7, #28]
 80254cc:	429a      	cmp	r2, r3
 80254ce:	d003      	beq.n	80254d8 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80254d0:	68bb      	ldr	r3, [r7, #8]
 80254d2:	2200      	movs	r2, #0
 80254d4:	759a      	strb	r2, [r3, #22]
                    break;
 80254d6:	e152      	b.n	802577e <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80254d8:	6a3b      	ldr	r3, [r7, #32]
 80254da:	4618      	mov	r0, r3
 80254dc:	f7fe fd46 	bl	8023f6c <lfs_tag_chunk>
 80254e0:	4603      	mov	r3, r0
 80254e2:	07db      	lsls	r3, r3, #31
 80254e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80254e6:	4053      	eors	r3, r2
 80254e8:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80254ea:	68fb      	ldr	r3, [r7, #12]
 80254ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80254ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80254f2:	2204      	movs	r2, #4
 80254f4:	4618      	mov	r0, r3
 80254f6:	f005 fb03 	bl	802ab00 <lfs_crc>
 80254fa:	4602      	mov	r2, r0
 80254fc:	68fb      	ldr	r3, [r7, #12]
 80254fe:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025502:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8025504:	6a3b      	ldr	r3, [r7, #32]
 8025506:	4618      	mov	r0, r3
 8025508:	f7fe fd67 	bl	8023fda <lfs_tag_dsize>
 802550c:	4602      	mov	r2, r0
 802550e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025510:	441a      	add	r2, r3
 8025512:	68bb      	ldr	r3, [r7, #8]
 8025514:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8025516:	68bb      	ldr	r3, [r7, #8]
 8025518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802551a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 802551c:	68bb      	ldr	r3, [r7, #8]
 802551e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8025522:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8025524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025526:	68bb      	ldr	r3, [r7, #8]
 8025528:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 802552a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802552c:	68bb      	ldr	r3, [r7, #8]
 802552e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8025530:	68bb      	ldr	r3, [r7, #8]
 8025532:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8025536:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8025538:	f04f 33ff 	mov.w	r3, #4294967295
 802553c:	627b      	str	r3, [r7, #36]	; 0x24
 802553e:	e720      	b.n	8025382 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025540:	2304      	movs	r3, #4
 8025542:	647b      	str	r3, [r7, #68]	; 0x44
 8025544:	e032      	b.n	80255ac <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8025546:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025548:	68fb      	ldr	r3, [r7, #12]
 802554a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802554c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802554e:	68bb      	ldr	r3, [r7, #8]
 8025550:	681b      	ldr	r3, [r3, #0]
 8025552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8025554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025556:	440a      	add	r2, r1
 8025558:	2101      	movs	r1, #1
 802555a:	9103      	str	r1, [sp, #12]
 802555c:	f107 011b 	add.w	r1, r7, #27
 8025560:	9102      	str	r1, [sp, #8]
 8025562:	9201      	str	r2, [sp, #4]
 8025564:	9300      	str	r3, [sp, #0]
 8025566:	4623      	mov	r3, r4
 8025568:	4602      	mov	r2, r0
 802556a:	2100      	movs	r1, #0
 802556c:	68f8      	ldr	r0, [r7, #12]
 802556e:	f7fe f8dd 	bl	802372c <lfs_bd_read>
 8025572:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8025574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025576:	2b00      	cmp	r3, #0
 8025578:	d00c      	beq.n	8025594 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 802557a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802557c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025580:	d103      	bne.n	802558a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8025582:	68bb      	ldr	r3, [r7, #8]
 8025584:	2200      	movs	r2, #0
 8025586:	759a      	strb	r2, [r3, #22]
 8025588:	e018      	b.n	80255bc <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 802558a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 802558c:	e183      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
 802558e:	bf00      	nop
 8025590:	08033574 	.word	0x08033574
                }

                crc = lfs_crc(crc, &dat, 1);
 8025594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025596:	f107 011b 	add.w	r1, r7, #27
 802559a:	2201      	movs	r2, #1
 802559c:	4618      	mov	r0, r3
 802559e:	f005 faaf 	bl	802ab00 <lfs_crc>
 80255a2:	4603      	mov	r3, r0
 80255a4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80255a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80255a8:	3301      	adds	r3, #1
 80255aa:	647b      	str	r3, [r7, #68]	; 0x44
 80255ac:	6a3b      	ldr	r3, [r7, #32]
 80255ae:	4618      	mov	r0, r3
 80255b0:	f7fe fd13 	bl	8023fda <lfs_tag_dsize>
 80255b4:	4602      	mov	r2, r0
 80255b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80255b8:	4293      	cmp	r3, r2
 80255ba:	d3c4      	bcc.n	8025546 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80255bc:	6a3b      	ldr	r3, [r7, #32]
 80255be:	4618      	mov	r0, r3
 80255c0:	f7fe fcb4 	bl	8023f2c <lfs_tag_type1>
 80255c4:	4603      	mov	r3, r0
 80255c6:	2b00      	cmp	r3, #0
 80255c8:	d113      	bne.n	80255f2 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80255ca:	6a3b      	ldr	r3, [r7, #32]
 80255cc:	4618      	mov	r0, r3
 80255ce:	f7fe fce7 	bl	8023fa0 <lfs_tag_id>
 80255d2:	4603      	mov	r3, r0
 80255d4:	461a      	mov	r2, r3
 80255d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80255da:	4293      	cmp	r3, r2
 80255dc:	f200 8083 	bhi.w	80256e6 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 80255e0:	6a3b      	ldr	r3, [r7, #32]
 80255e2:	4618      	mov	r0, r3
 80255e4:	f7fe fcdc 	bl	8023fa0 <lfs_tag_id>
 80255e8:	4603      	mov	r3, r0
 80255ea:	3301      	adds	r3, #1
 80255ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80255f0:	e079      	b.n	80256e6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80255f2:	6a3b      	ldr	r3, [r7, #32]
 80255f4:	4618      	mov	r0, r3
 80255f6:	f7fe fc99 	bl	8023f2c <lfs_tag_type1>
 80255fa:	4603      	mov	r3, r0
 80255fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025600:	d134      	bne.n	802566c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025602:	6a3b      	ldr	r3, [r7, #32]
 8025604:	4618      	mov	r0, r3
 8025606:	f7fe fcbe 	bl	8023f86 <lfs_tag_splice>
 802560a:	4603      	mov	r3, r0
 802560c:	b29a      	uxth	r2, r3
 802560e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8025612:	4413      	add	r3, r2
 8025614:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8025618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802561a:	4ba1      	ldr	r3, [pc, #644]	; (80258a0 <lfs_dir_fetchmatch+0x6c8>)
 802561c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 802561e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8025622:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8025626:	6a3a      	ldr	r2, [r7, #32]
 8025628:	4293      	cmp	r3, r2
 802562a:	d104      	bne.n	8025636 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 802562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802562e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025632:	64bb      	str	r3, [r7, #72]	; 0x48
 8025634:	e057      	b.n	80256e6 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8025636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025638:	f1b3 3fff 	cmp.w	r3, #4294967295
 802563c:	d053      	beq.n	80256e6 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 802563e:	6a3b      	ldr	r3, [r7, #32]
 8025640:	4618      	mov	r0, r3
 8025642:	f7fe fcad 	bl	8023fa0 <lfs_tag_id>
 8025646:	4603      	mov	r3, r0
 8025648:	461c      	mov	r4, r3
 802564a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802564c:	4618      	mov	r0, r3
 802564e:	f7fe fca7 	bl	8023fa0 <lfs_tag_id>
 8025652:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8025654:	429c      	cmp	r4, r3
 8025656:	d846      	bhi.n	80256e6 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8025658:	6a3b      	ldr	r3, [r7, #32]
 802565a:	4618      	mov	r0, r3
 802565c:	f7fe fc93 	bl	8023f86 <lfs_tag_splice>
 8025660:	4603      	mov	r3, r0
 8025662:	029a      	lsls	r2, r3, #10
 8025664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025666:	4413      	add	r3, r2
 8025668:	64bb      	str	r3, [r7, #72]	; 0x48
 802566a:	e03c      	b.n	80256e6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 802566c:	6a3b      	ldr	r3, [r7, #32]
 802566e:	4618      	mov	r0, r3
 8025670:	f7fe fc5c 	bl	8023f2c <lfs_tag_type1>
 8025674:	4603      	mov	r3, r0
 8025676:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802567a:	d134      	bne.n	80256e6 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 802567c:	6a3b      	ldr	r3, [r7, #32]
 802567e:	4618      	mov	r0, r3
 8025680:	f7fe fc74 	bl	8023f6c <lfs_tag_chunk>
 8025684:	4603      	mov	r3, r0
 8025686:	f003 0301 	and.w	r3, r3, #1
 802568a:	2b00      	cmp	r3, #0
 802568c:	bf14      	ite	ne
 802568e:	2301      	movne	r3, #1
 8025690:	2300      	moveq	r3, #0
 8025692:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8025696:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025698:	68fb      	ldr	r3, [r7, #12]
 802569a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802569c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802569e:	68bb      	ldr	r3, [r7, #8]
 80256a0:	681b      	ldr	r3, [r3, #0]
 80256a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80256a4:	3204      	adds	r2, #4
 80256a6:	2108      	movs	r1, #8
 80256a8:	9103      	str	r1, [sp, #12]
 80256aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80256ae:	9102      	str	r1, [sp, #8]
 80256b0:	9201      	str	r2, [sp, #4]
 80256b2:	9300      	str	r3, [sp, #0]
 80256b4:	4623      	mov	r3, r4
 80256b6:	4602      	mov	r2, r0
 80256b8:	2100      	movs	r1, #0
 80256ba:	68f8      	ldr	r0, [r7, #12]
 80256bc:	f7fe f836 	bl	802372c <lfs_bd_read>
 80256c0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80256c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	d009      	beq.n	80256dc <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 80256c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80256ca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80256ce:	d103      	bne.n	80256d8 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 80256d0:	68bb      	ldr	r3, [r7, #8]
 80256d2:	2200      	movs	r2, #0
 80256d4:	759a      	strb	r2, [r3, #22]
                        break;
 80256d6:	e052      	b.n	802577e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80256d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80256da:	e0dc      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 80256dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80256e0:	4618      	mov	r0, r3
 80256e2:	f7fe fbce 	bl	8023e82 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80256e6:	6a3a      	ldr	r2, [r7, #32]
 80256e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80256ea:	405a      	eors	r2, r3
 80256ec:	683b      	ldr	r3, [r7, #0]
 80256ee:	4013      	ands	r3, r2
 80256f0:	2b00      	cmp	r3, #0
 80256f2:	f47f ae46 	bne.w	8025382 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80256f6:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80256f8:	68bb      	ldr	r3, [r7, #8]
 80256fa:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80256fc:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 80256fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025700:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025702:	617b      	str	r3, [r7, #20]
 8025704:	f107 0210 	add.w	r2, r7, #16
 8025708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802570c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8025710:	4798      	blx	r3
 8025712:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8025714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025716:	2b00      	cmp	r3, #0
 8025718:	da09      	bge.n	802572e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 802571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802571c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025720:	d103      	bne.n	802572a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8025722:	68bb      	ldr	r3, [r7, #8]
 8025724:	2200      	movs	r2, #0
 8025726:	759a      	strb	r2, [r3, #22]
 8025728:	e029      	b.n	802577e <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 802572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 802572c:	e0b3      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 802572e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025730:	2b00      	cmp	r3, #0
 8025732:	d102      	bne.n	802573a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8025734:	6a3b      	ldr	r3, [r7, #32]
 8025736:	64bb      	str	r3, [r7, #72]	; 0x48
 8025738:	e623      	b.n	8025382 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 802573a:	6a3a      	ldr	r2, [r7, #32]
 802573c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802573e:	405a      	eors	r2, r3
 8025740:	4b58      	ldr	r3, [pc, #352]	; (80258a4 <lfs_dir_fetchmatch+0x6cc>)
 8025742:	4013      	ands	r3, r2
 8025744:	2b00      	cmp	r3, #0
 8025746:	d103      	bne.n	8025750 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8025748:	f04f 33ff 	mov.w	r3, #4294967295
 802574c:	64bb      	str	r3, [r7, #72]	; 0x48
 802574e:	e618      	b.n	8025382 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8025750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025752:	2b02      	cmp	r3, #2
 8025754:	f47f ae15 	bne.w	8025382 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8025758:	6a3b      	ldr	r3, [r7, #32]
 802575a:	4618      	mov	r0, r3
 802575c:	f7fe fc20 	bl	8023fa0 <lfs_tag_id>
 8025760:	4603      	mov	r3, r0
 8025762:	461c      	mov	r4, r3
 8025764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025766:	4618      	mov	r0, r3
 8025768:	f7fe fc1a 	bl	8023fa0 <lfs_tag_id>
 802576c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 802576e:	429c      	cmp	r4, r3
 8025770:	f63f ae07 	bhi.w	8025382 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8025774:	6a3b      	ldr	r3, [r7, #32]
 8025776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802577a:	64bb      	str	r3, [r7, #72]	; 0x48
 802577c:	e601      	b.n	8025382 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 802577e:	68bb      	ldr	r3, [r7, #8]
 8025780:	68db      	ldr	r3, [r3, #12]
 8025782:	2b00      	cmp	r3, #0
 8025784:	d100      	bne.n	8025788 <lfs_dir_fetchmatch+0x5b0>
 8025786:	e05d      	b.n	8025844 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8025788:	68fb      	ldr	r3, [r7, #12]
 802578a:	333c      	adds	r3, #60	; 0x3c
 802578c:	68ba      	ldr	r2, [r7, #8]
 802578e:	4611      	mov	r1, r2
 8025790:	4618      	mov	r0, r3
 8025792:	f7fe fcad 	bl	80240f0 <lfs_gstate_hasmovehere>
 8025796:	4603      	mov	r3, r0
 8025798:	2b00      	cmp	r3, #0
 802579a:	d028      	beq.n	80257ee <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 802579c:	68fb      	ldr	r3, [r7, #12]
 802579e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80257a0:	4618      	mov	r0, r3
 80257a2:	f7fe fbfd 	bl	8023fa0 <lfs_tag_id>
 80257a6:	4603      	mov	r3, r0
 80257a8:	461c      	mov	r4, r3
 80257aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80257ac:	4618      	mov	r0, r3
 80257ae:	f7fe fbf7 	bl	8023fa0 <lfs_tag_id>
 80257b2:	4603      	mov	r3, r0
 80257b4:	429c      	cmp	r4, r3
 80257b6:	d104      	bne.n	80257c2 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 80257b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80257ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80257be:	667b      	str	r3, [r7, #100]	; 0x64
 80257c0:	e015      	b.n	80257ee <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 80257c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80257c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80257c8:	d011      	beq.n	80257ee <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80257ca:	68fb      	ldr	r3, [r7, #12]
 80257cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80257ce:	4618      	mov	r0, r3
 80257d0:	f7fe fbe6 	bl	8023fa0 <lfs_tag_id>
 80257d4:	4603      	mov	r3, r0
 80257d6:	461c      	mov	r4, r3
 80257d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80257da:	4618      	mov	r0, r3
 80257dc:	f7fe fbe0 	bl	8023fa0 <lfs_tag_id>
 80257e0:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 80257e2:	429c      	cmp	r4, r3
 80257e4:	d203      	bcs.n	80257ee <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 80257e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80257e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80257ec:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 80257ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80257f0:	2b00      	cmp	r3, #0
 80257f2:	d00f      	beq.n	8025814 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80257f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80257f6:	4618      	mov	r0, r3
 80257f8:	f7fe fbd2 	bl	8023fa0 <lfs_tag_id>
 80257fc:	4603      	mov	r3, r0
 80257fe:	461a      	mov	r2, r3
 8025800:	68bb      	ldr	r3, [r7, #8]
 8025802:	8a9b      	ldrh	r3, [r3, #20]
 8025804:	4619      	mov	r1, r3
 8025806:	4610      	mov	r0, r2
 8025808:	f7fd feb4 	bl	8023574 <lfs_min>
 802580c:	4603      	mov	r3, r0
 802580e:	b29a      	uxth	r2, r3
 8025810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025812:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8025814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025816:	4618      	mov	r0, r3
 8025818:	f7fe fb67 	bl	8023eea <lfs_tag_isvalid>
 802581c:	4603      	mov	r3, r0
 802581e:	2b00      	cmp	r3, #0
 8025820:	d001      	beq.n	8025826 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8025822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025824:	e037      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8025826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025828:	4618      	mov	r0, r3
 802582a:	f7fe fbb9 	bl	8023fa0 <lfs_tag_id>
 802582e:	4603      	mov	r3, r0
 8025830:	461a      	mov	r2, r3
 8025832:	68bb      	ldr	r3, [r7, #8]
 8025834:	8a9b      	ldrh	r3, [r3, #20]
 8025836:	429a      	cmp	r2, r3
 8025838:	d202      	bcs.n	8025840 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 802583a:	f06f 0301 	mvn.w	r3, #1
 802583e:	e02a      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8025840:	2300      	movs	r3, #0
 8025842:	e028      	b.n	8025896 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8025844:	68bb      	ldr	r3, [r7, #8]
 8025846:	4618      	mov	r0, r3
 8025848:	f7fe fa94 	bl	8023d74 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 802584c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802584e:	3301      	adds	r3, #1
 8025850:	2b00      	cmp	r3, #0
 8025852:	f003 0301 	and.w	r3, r3, #1
 8025856:	bfb8      	it	lt
 8025858:	425b      	neglt	r3, r3
 802585a:	009b      	lsls	r3, r3, #2
 802585c:	3368      	adds	r3, #104	; 0x68
 802585e:	443b      	add	r3, r7
 8025860:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025864:	68bb      	ldr	r3, [r7, #8]
 8025866:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8025868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802586a:	3301      	adds	r3, #1
 802586c:	65bb      	str	r3, [r7, #88]	; 0x58
 802586e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025870:	2b01      	cmp	r3, #1
 8025872:	f77f ad58 	ble.w	8025326 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8025876:	68bb      	ldr	r3, [r7, #8]
 8025878:	681a      	ldr	r2, [r3, #0]
 802587a:	68bb      	ldr	r3, [r7, #8]
 802587c:	685b      	ldr	r3, [r3, #4]
 802587e:	490a      	ldr	r1, [pc, #40]	; (80258a8 <lfs_dir_fetchmatch+0x6d0>)
 8025880:	9101      	str	r1, [sp, #4]
 8025882:	9300      	str	r3, [sp, #0]
 8025884:	4613      	mov	r3, r2
 8025886:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 802588a:	4908      	ldr	r1, [pc, #32]	; (80258ac <lfs_dir_fetchmatch+0x6d4>)
 802588c:	4808      	ldr	r0, [pc, #32]	; (80258b0 <lfs_dir_fetchmatch+0x6d8>)
 802588e:	f007 fdef 	bl	802d470 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8025892:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8025896:	4618      	mov	r0, r3
 8025898:	376c      	adds	r7, #108	; 0x6c
 802589a:	46bd      	mov	sp, r7
 802589c:	bd90      	pop	{r4, r7, pc}
 802589e:	bf00      	nop
 80258a0:	000ffc00 	.word	0x000ffc00
 80258a4:	7ffffc00 	.word	0x7ffffc00
 80258a8:	08033530 	.word	0x08033530
 80258ac:	0803341c 	.word	0x0803341c
 80258b0:	0803353c 	.word	0x0803353c

080258b4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80258b4:	b580      	push	{r7, lr}
 80258b6:	b088      	sub	sp, #32
 80258b8:	af04      	add	r7, sp, #16
 80258ba:	60f8      	str	r0, [r7, #12]
 80258bc:	60b9      	str	r1, [r7, #8]
 80258be:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80258c0:	2300      	movs	r3, #0
 80258c2:	9303      	str	r3, [sp, #12]
 80258c4:	2300      	movs	r3, #0
 80258c6:	9302      	str	r3, [sp, #8]
 80258c8:	2300      	movs	r3, #0
 80258ca:	9301      	str	r3, [sp, #4]
 80258cc:	f04f 33ff 	mov.w	r3, #4294967295
 80258d0:	9300      	str	r3, [sp, #0]
 80258d2:	f04f 33ff 	mov.w	r3, #4294967295
 80258d6:	687a      	ldr	r2, [r7, #4]
 80258d8:	68b9      	ldr	r1, [r7, #8]
 80258da:	68f8      	ldr	r0, [r7, #12]
 80258dc:	f7ff fc7c 	bl	80251d8 <lfs_dir_fetchmatch>
 80258e0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80258e2:	4618      	mov	r0, r3
 80258e4:	3710      	adds	r7, #16
 80258e6:	46bd      	mov	sp, r7
 80258e8:	bd80      	pop	{r7, pc}
	...

080258ec <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80258ec:	b580      	push	{r7, lr}
 80258ee:	b08a      	sub	sp, #40	; 0x28
 80258f0:	af02      	add	r7, sp, #8
 80258f2:	60f8      	str	r0, [r7, #12]
 80258f4:	60b9      	str	r1, [r7, #8]
 80258f6:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80258f8:	f107 0310 	add.w	r3, r7, #16
 80258fc:	9300      	str	r3, [sp, #0]
 80258fe:	4b12      	ldr	r3, [pc, #72]	; (8025948 <lfs_dir_getgstate+0x5c>)
 8025900:	4a12      	ldr	r2, [pc, #72]	; (802594c <lfs_dir_getgstate+0x60>)
 8025902:	68b9      	ldr	r1, [r7, #8]
 8025904:	68f8      	ldr	r0, [r7, #12]
 8025906:	f7fe ff35 	bl	8024774 <lfs_dir_get>
 802590a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 802590c:	69fb      	ldr	r3, [r7, #28]
 802590e:	2b00      	cmp	r3, #0
 8025910:	da05      	bge.n	802591e <lfs_dir_getgstate+0x32>
 8025912:	69fb      	ldr	r3, [r7, #28]
 8025914:	f113 0f02 	cmn.w	r3, #2
 8025918:	d001      	beq.n	802591e <lfs_dir_getgstate+0x32>
        return res;
 802591a:	69fb      	ldr	r3, [r7, #28]
 802591c:	e00f      	b.n	802593e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 802591e:	69fb      	ldr	r3, [r7, #28]
 8025920:	f113 0f02 	cmn.w	r3, #2
 8025924:	d00a      	beq.n	802593c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025926:	f107 0310 	add.w	r3, r7, #16
 802592a:	4618      	mov	r0, r3
 802592c:	f7fe fc00 	bl	8024130 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025930:	f107 0310 	add.w	r3, r7, #16
 8025934:	4619      	mov	r1, r3
 8025936:	6878      	ldr	r0, [r7, #4]
 8025938:	f7fe fb63 	bl	8024002 <lfs_gstate_xor>
    }

    return 0;
 802593c:	2300      	movs	r3, #0
}
 802593e:	4618      	mov	r0, r3
 8025940:	3720      	adds	r7, #32
 8025942:	46bd      	mov	sp, r7
 8025944:	bd80      	pop	{r7, pc}
 8025946:	bf00      	nop
 8025948:	7ff0000c 	.word	0x7ff0000c
 802594c:	7ff00000 	.word	0x7ff00000

08025950 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8025950:	b580      	push	{r7, lr}
 8025952:	b08a      	sub	sp, #40	; 0x28
 8025954:	af02      	add	r7, sp, #8
 8025956:	60f8      	str	r0, [r7, #12]
 8025958:	60b9      	str	r1, [r7, #8]
 802595a:	603b      	str	r3, [r7, #0]
 802595c:	4613      	mov	r3, r2
 802595e:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8025960:	88fb      	ldrh	r3, [r7, #6]
 8025962:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025966:	4293      	cmp	r3, r2
 8025968:	d10b      	bne.n	8025982 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 802596a:	683b      	ldr	r3, [r7, #0]
 802596c:	3308      	adds	r3, #8
 802596e:	4932      	ldr	r1, [pc, #200]	; (8025a38 <lfs_dir_getinfo+0xe8>)
 8025970:	461a      	mov	r2, r3
 8025972:	460b      	mov	r3, r1
 8025974:	881b      	ldrh	r3, [r3, #0]
 8025976:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8025978:	683b      	ldr	r3, [r7, #0]
 802597a:	2202      	movs	r2, #2
 802597c:	701a      	strb	r2, [r3, #0]
        return 0;
 802597e:	2300      	movs	r3, #0
 8025980:	e055      	b.n	8025a2e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025982:	88fb      	ldrh	r3, [r7, #6]
 8025984:	029a      	lsls	r2, r3, #10
 8025986:	68fb      	ldr	r3, [r7, #12]
 8025988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802598a:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 802598c:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 802598e:	683b      	ldr	r3, [r7, #0]
 8025990:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025992:	9300      	str	r3, [sp, #0]
 8025994:	4613      	mov	r3, r2
 8025996:	4a29      	ldr	r2, [pc, #164]	; (8025a3c <lfs_dir_getinfo+0xec>)
 8025998:	68b9      	ldr	r1, [r7, #8]
 802599a:	68f8      	ldr	r0, [r7, #12]
 802599c:	f7fe feea 	bl	8024774 <lfs_dir_get>
 80259a0:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 80259a2:	69fb      	ldr	r3, [r7, #28]
 80259a4:	2b00      	cmp	r3, #0
 80259a6:	da01      	bge.n	80259ac <lfs_dir_getinfo+0x5c>
        return (int)tag;
 80259a8:	69fb      	ldr	r3, [r7, #28]
 80259aa:	e040      	b.n	8025a2e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 80259ac:	69fb      	ldr	r3, [r7, #28]
 80259ae:	4618      	mov	r0, r3
 80259b0:	f7fe facc 	bl	8023f4c <lfs_tag_type3>
 80259b4:	4603      	mov	r3, r0
 80259b6:	b2da      	uxtb	r2, r3
 80259b8:	683b      	ldr	r3, [r7, #0]
 80259ba:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80259bc:	88fb      	ldrh	r3, [r7, #6]
 80259be:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80259c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80259c4:	f043 0308 	orr.w	r3, r3, #8
 80259c8:	f107 0214 	add.w	r2, r7, #20
 80259cc:	9200      	str	r2, [sp, #0]
 80259ce:	4a1c      	ldr	r2, [pc, #112]	; (8025a40 <lfs_dir_getinfo+0xf0>)
 80259d0:	68b9      	ldr	r1, [r7, #8]
 80259d2:	68f8      	ldr	r0, [r7, #12]
 80259d4:	f7fe fece 	bl	8024774 <lfs_dir_get>
 80259d8:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 80259da:	69fb      	ldr	r3, [r7, #28]
 80259dc:	2b00      	cmp	r3, #0
 80259de:	da01      	bge.n	80259e4 <lfs_dir_getinfo+0x94>
        return (int)tag;
 80259e0:	69fb      	ldr	r3, [r7, #28]
 80259e2:	e024      	b.n	8025a2e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 80259e4:	f107 0314 	add.w	r3, r7, #20
 80259e8:	4618      	mov	r0, r3
 80259ea:	f7fe fbe1 	bl	80241b0 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80259ee:	69fb      	ldr	r3, [r7, #28]
 80259f0:	4618      	mov	r0, r3
 80259f2:	f7fe faab 	bl	8023f4c <lfs_tag_type3>
 80259f6:	4603      	mov	r3, r0
 80259f8:	461a      	mov	r2, r3
 80259fa:	f240 2302 	movw	r3, #514	; 0x202
 80259fe:	429a      	cmp	r2, r3
 8025a00:	d103      	bne.n	8025a0a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025a02:	69ba      	ldr	r2, [r7, #24]
 8025a04:	683b      	ldr	r3, [r7, #0]
 8025a06:	605a      	str	r2, [r3, #4]
 8025a08:	e010      	b.n	8025a2c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8025a0a:	69fb      	ldr	r3, [r7, #28]
 8025a0c:	4618      	mov	r0, r3
 8025a0e:	f7fe fa9d 	bl	8023f4c <lfs_tag_type3>
 8025a12:	4603      	mov	r3, r0
 8025a14:	461a      	mov	r2, r3
 8025a16:	f240 2301 	movw	r3, #513	; 0x201
 8025a1a:	429a      	cmp	r2, r3
 8025a1c:	d106      	bne.n	8025a2c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8025a1e:	69fb      	ldr	r3, [r7, #28]
 8025a20:	4618      	mov	r0, r3
 8025a22:	f7fe facd 	bl	8023fc0 <lfs_tag_size>
 8025a26:	4602      	mov	r2, r0
 8025a28:	683b      	ldr	r3, [r7, #0]
 8025a2a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8025a2c:	2300      	movs	r3, #0
}
 8025a2e:	4618      	mov	r0, r3
 8025a30:	3720      	adds	r7, #32
 8025a32:	46bd      	mov	sp, r7
 8025a34:	bd80      	pop	{r7, pc}
 8025a36:	bf00      	nop
 8025a38:	0803357c 	.word	0x0803357c
 8025a3c:	780ffc00 	.word	0x780ffc00
 8025a40:	700ffc00 	.word	0x700ffc00

08025a44 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8025a44:	b590      	push	{r4, r7, lr}
 8025a46:	b08f      	sub	sp, #60	; 0x3c
 8025a48:	af04      	add	r7, sp, #16
 8025a4a:	60f8      	str	r0, [r7, #12]
 8025a4c:	60b9      	str	r1, [r7, #8]
 8025a4e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8025a50:	68fb      	ldr	r3, [r7, #12]
 8025a52:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8025a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a56:	681b      	ldr	r3, [r3, #0]
 8025a58:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8025a5a:	687b      	ldr	r3, [r7, #4]
 8025a5c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8025a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a60:	689c      	ldr	r4, [r3, #8]
 8025a62:	68b8      	ldr	r0, [r7, #8]
 8025a64:	f7fe faac 	bl	8023fc0 <lfs_tag_size>
 8025a68:	4603      	mov	r3, r0
 8025a6a:	4619      	mov	r1, r3
 8025a6c:	4620      	mov	r0, r4
 8025a6e:	f7fd fd81 	bl	8023574 <lfs_min>
 8025a72:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8025a74:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8025a76:	69fb      	ldr	r3, [r7, #28]
 8025a78:	681b      	ldr	r3, [r3, #0]
 8025a7a:	69fa      	ldr	r2, [r7, #28]
 8025a7c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8025a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025a80:	6849      	ldr	r1, [r1, #4]
 8025a82:	69b8      	ldr	r0, [r7, #24]
 8025a84:	9003      	str	r0, [sp, #12]
 8025a86:	9102      	str	r1, [sp, #8]
 8025a88:	9201      	str	r2, [sp, #4]
 8025a8a:	9300      	str	r3, [sp, #0]
 8025a8c:	69bb      	ldr	r3, [r7, #24]
 8025a8e:	4622      	mov	r2, r4
 8025a90:	2100      	movs	r1, #0
 8025a92:	6a38      	ldr	r0, [r7, #32]
 8025a94:	f7fd ff8e 	bl	80239b4 <lfs_bd_cmp>
 8025a98:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8025a9a:	697b      	ldr	r3, [r7, #20]
 8025a9c:	2b00      	cmp	r3, #0
 8025a9e:	d001      	beq.n	8025aa4 <lfs_dir_find_match+0x60>
        return res;
 8025aa0:	697b      	ldr	r3, [r7, #20]
 8025aa2:	e014      	b.n	8025ace <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8025aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025aa6:	689c      	ldr	r4, [r3, #8]
 8025aa8:	68b8      	ldr	r0, [r7, #8]
 8025aaa:	f7fe fa89 	bl	8023fc0 <lfs_tag_size>
 8025aae:	4603      	mov	r3, r0
 8025ab0:	429c      	cmp	r4, r3
 8025ab2:	d00b      	beq.n	8025acc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8025ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ab6:	689c      	ldr	r4, [r3, #8]
 8025ab8:	68b8      	ldr	r0, [r7, #8]
 8025aba:	f7fe fa81 	bl	8023fc0 <lfs_tag_size>
 8025abe:	4603      	mov	r3, r0
 8025ac0:	429c      	cmp	r4, r3
 8025ac2:	d201      	bcs.n	8025ac8 <lfs_dir_find_match+0x84>
 8025ac4:	2301      	movs	r3, #1
 8025ac6:	e002      	b.n	8025ace <lfs_dir_find_match+0x8a>
 8025ac8:	2302      	movs	r3, #2
 8025aca:	e000      	b.n	8025ace <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8025acc:	2300      	movs	r3, #0
}
 8025ace:	4618      	mov	r0, r3
 8025ad0:	372c      	adds	r7, #44	; 0x2c
 8025ad2:	46bd      	mov	sp, r7
 8025ad4:	bd90      	pop	{r4, r7, pc}
	...

08025ad8 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8025ad8:	b590      	push	{r4, r7, lr}
 8025ada:	b093      	sub	sp, #76	; 0x4c
 8025adc:	af04      	add	r7, sp, #16
 8025ade:	60f8      	str	r0, [r7, #12]
 8025ae0:	60b9      	str	r1, [r7, #8]
 8025ae2:	607a      	str	r2, [r7, #4]
 8025ae4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	681b      	ldr	r3, [r3, #0]
 8025aea:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8025aec:	683b      	ldr	r3, [r7, #0]
 8025aee:	2b00      	cmp	r3, #0
 8025af0:	d003      	beq.n	8025afa <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025af2:	683b      	ldr	r3, [r7, #0]
 8025af4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025af8:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8025afa:	4b6e      	ldr	r3, [pc, #440]	; (8025cb4 <lfs_dir_find+0x1dc>)
 8025afc:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8025afe:	68fb      	ldr	r3, [r7, #12]
 8025b00:	6a1a      	ldr	r2, [r3, #32]
 8025b02:	68bb      	ldr	r3, [r7, #8]
 8025b04:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025b06:	68fb      	ldr	r3, [r7, #12]
 8025b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025b0a:	68bb      	ldr	r3, [r7, #8]
 8025b0c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8025b0e:	496a      	ldr	r1, [pc, #424]	; (8025cb8 <lfs_dir_find+0x1e0>)
 8025b10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025b12:	f007 feb0 	bl	802d876 <strspn>
 8025b16:	4602      	mov	r2, r0
 8025b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025b1a:	4413      	add	r3, r2
 8025b1c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8025b1e:	4966      	ldr	r1, [pc, #408]	; (8025cb8 <lfs_dir_find+0x1e0>)
 8025b20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025b22:	f007 fe5f 	bl	802d7e4 <strcspn>
 8025b26:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b2a:	2b01      	cmp	r3, #1
 8025b2c:	d105      	bne.n	8025b3a <lfs_dir_find+0x62>
 8025b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025b30:	781a      	ldrb	r2, [r3, #0]
 8025b32:	4b62      	ldr	r3, [pc, #392]	; (8025cbc <lfs_dir_find+0x1e4>)
 8025b34:	781b      	ldrb	r3, [r3, #0]
 8025b36:	429a      	cmp	r2, r3
 8025b38:	d00a      	beq.n	8025b50 <lfs_dir_find+0x78>
 8025b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b3c:	2b02      	cmp	r3, #2
 8025b3e:	d10c      	bne.n	8025b5a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025b40:	2202      	movs	r2, #2
 8025b42:	495f      	ldr	r1, [pc, #380]	; (8025cc0 <lfs_dir_find+0x1e8>)
 8025b44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025b46:	f007 fdff 	bl	802d748 <memcmp>
 8025b4a:	4603      	mov	r3, r0
 8025b4c:	2b00      	cmp	r3, #0
 8025b4e:	d104      	bne.n	8025b5a <lfs_dir_find+0x82>
            name += namelen;
 8025b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b54:	4413      	add	r3, r2
 8025b56:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8025b58:	e7d9      	b.n	8025b0e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8025b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b5e:	4413      	add	r3, r2
 8025b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025b62:	2301      	movs	r3, #1
 8025b64:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025b66:	4954      	ldr	r1, [pc, #336]	; (8025cb8 <lfs_dir_find+0x1e0>)
 8025b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025b6a:	f007 fe84 	bl	802d876 <strspn>
 8025b6e:	4602      	mov	r2, r0
 8025b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025b72:	4413      	add	r3, r2
 8025b74:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8025b76:	4950      	ldr	r1, [pc, #320]	; (8025cb8 <lfs_dir_find+0x1e0>)
 8025b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025b7a:	f007 fe33 	bl	802d7e4 <strcspn>
 8025b7e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025b80:	6a3b      	ldr	r3, [r7, #32]
 8025b82:	2b00      	cmp	r3, #0
 8025b84:	d01d      	beq.n	8025bc2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025b86:	6a3b      	ldr	r3, [r7, #32]
 8025b88:	2b02      	cmp	r3, #2
 8025b8a:	d112      	bne.n	8025bb2 <lfs_dir_find+0xda>
 8025b8c:	2202      	movs	r2, #2
 8025b8e:	494c      	ldr	r1, [pc, #304]	; (8025cc0 <lfs_dir_find+0x1e8>)
 8025b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025b92:	f007 fdd9 	bl	802d748 <memcmp>
 8025b96:	4603      	mov	r3, r0
 8025b98:	2b00      	cmp	r3, #0
 8025b9a:	d10a      	bne.n	8025bb2 <lfs_dir_find+0xda>
                depth -= 1;
 8025b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b9e:	3b01      	subs	r3, #1
 8025ba0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8025ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ba4:	2b00      	cmp	r3, #0
 8025ba6:	d107      	bne.n	8025bb8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8025ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025baa:	6a3b      	ldr	r3, [r7, #32]
 8025bac:	4413      	add	r3, r2
 8025bae:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8025bb0:	e7ad      	b.n	8025b0e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8025bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bb4:	3301      	adds	r3, #1
 8025bb6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8025bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025bba:	6a3b      	ldr	r3, [r7, #32]
 8025bbc:	4413      	add	r3, r2
 8025bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8025bc0:	e7d1      	b.n	8025b66 <lfs_dir_find+0x8e>
                break;
 8025bc2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8025bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025bc6:	781b      	ldrb	r3, [r3, #0]
 8025bc8:	2b00      	cmp	r3, #0
 8025bca:	d101      	bne.n	8025bd0 <lfs_dir_find+0xf8>
            return tag;
 8025bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bce:	e06c      	b.n	8025caa <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8025bd0:	687b      	ldr	r3, [r7, #4]
 8025bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025bd4:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8025bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bd8:	4618      	mov	r0, r3
 8025bda:	f7fe f9b7 	bl	8023f4c <lfs_tag_type3>
 8025bde:	4603      	mov	r3, r0
 8025be0:	2b02      	cmp	r3, #2
 8025be2:	d002      	beq.n	8025bea <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8025be4:	f06f 0313 	mvn.w	r3, #19
 8025be8:	e05f      	b.n	8025caa <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8025bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bec:	4618      	mov	r0, r3
 8025bee:	f7fe f9d7 	bl	8023fa0 <lfs_tag_id>
 8025bf2:	4603      	mov	r3, r0
 8025bf4:	461a      	mov	r2, r3
 8025bf6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8025bfa:	429a      	cmp	r2, r3
 8025bfc:	d01c      	beq.n	8025c38 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c00:	4618      	mov	r0, r3
 8025c02:	f7fe f9cd 	bl	8023fa0 <lfs_tag_id>
 8025c06:	4603      	mov	r3, r0
 8025c08:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025c0e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025c12:	68ba      	ldr	r2, [r7, #8]
 8025c14:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025c16:	9200      	str	r2, [sp, #0]
 8025c18:	4a2a      	ldr	r2, [pc, #168]	; (8025cc4 <lfs_dir_find+0x1ec>)
 8025c1a:	68b9      	ldr	r1, [r7, #8]
 8025c1c:	68f8      	ldr	r0, [r7, #12]
 8025c1e:	f7fe fda9 	bl	8024774 <lfs_dir_get>
 8025c22:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8025c24:	69fb      	ldr	r3, [r7, #28]
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	da01      	bge.n	8025c2e <lfs_dir_find+0x156>
                return res;
 8025c2a:	69fb      	ldr	r3, [r7, #28]
 8025c2c:	e03d      	b.n	8025caa <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8025c2e:	68bb      	ldr	r3, [r7, #8]
 8025c30:	3318      	adds	r3, #24
 8025c32:	4618      	mov	r0, r3
 8025c34:	f7fe f925 	bl	8023e82 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025c38:	68bb      	ldr	r3, [r7, #8]
 8025c3a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8025c3e:	212f      	movs	r1, #47	; 0x2f
 8025c40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025c42:	f007 fdc2 	bl	802d7ca <strchr>
 8025c46:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025c48:	2b00      	cmp	r3, #0
 8025c4a:	d101      	bne.n	8025c50 <lfs_dir_find+0x178>
 8025c4c:	683b      	ldr	r3, [r7, #0]
 8025c4e:	e000      	b.n	8025c52 <lfs_dir_find+0x17a>
 8025c50:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8025c52:	68fa      	ldr	r2, [r7, #12]
 8025c54:	613a      	str	r2, [r7, #16]
 8025c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025c58:	617a      	str	r2, [r7, #20]
 8025c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025c5c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025c5e:	f107 0210 	add.w	r2, r7, #16
 8025c62:	9203      	str	r2, [sp, #12]
 8025c64:	4a18      	ldr	r2, [pc, #96]	; (8025cc8 <lfs_dir_find+0x1f0>)
 8025c66:	9202      	str	r2, [sp, #8]
 8025c68:	9301      	str	r3, [sp, #4]
 8025c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c6c:	9300      	str	r3, [sp, #0]
 8025c6e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8025c72:	4622      	mov	r2, r4
 8025c74:	68b9      	ldr	r1, [r7, #8]
 8025c76:	68f8      	ldr	r0, [r7, #12]
 8025c78:	f7ff faae 	bl	80251d8 <lfs_dir_fetchmatch>
 8025c7c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8025c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	da01      	bge.n	8025c88 <lfs_dir_find+0x1b0>
                return tag;
 8025c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c86:	e010      	b.n	8025caa <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8025c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c8a:	2b00      	cmp	r3, #0
 8025c8c:	d004      	beq.n	8025c98 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8025c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c92:	4413      	add	r3, r2
 8025c94:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8025c96:	e73a      	b.n	8025b0e <lfs_dir_find+0x36>
            if (!dir->split) {
 8025c98:	68bb      	ldr	r3, [r7, #8]
 8025c9a:	7ddb      	ldrb	r3, [r3, #23]
 8025c9c:	f083 0301 	eor.w	r3, r3, #1
 8025ca0:	b2db      	uxtb	r3, r3
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d0c8      	beq.n	8025c38 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8025ca6:	f06f 0301 	mvn.w	r3, #1
    }
}
 8025caa:	4618      	mov	r0, r3
 8025cac:	373c      	adds	r7, #60	; 0x3c
 8025cae:	46bd      	mov	sp, r7
 8025cb0:	bd90      	pop	{r4, r7, pc}
 8025cb2:	bf00      	nop
 8025cb4:	002ffc00 	.word	0x002ffc00
 8025cb8:	0803357c 	.word	0x0803357c
 8025cbc:	08033580 	.word	0x08033580
 8025cc0:	08033584 	.word	0x08033584
 8025cc4:	700ffc00 	.word	0x700ffc00
 8025cc8:	08025a45 	.word	0x08025a45

08025ccc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8025ccc:	b590      	push	{r4, r7, lr}
 8025cce:	b08b      	sub	sp, #44	; 0x2c
 8025cd0:	af04      	add	r7, sp, #16
 8025cd2:	60f8      	str	r0, [r7, #12]
 8025cd4:	60b9      	str	r1, [r7, #8]
 8025cd6:	607a      	str	r2, [r7, #4]
 8025cd8:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8025cda:	68fb      	ldr	r3, [r7, #12]
 8025cdc:	f103 0010 	add.w	r0, r3, #16
 8025ce0:	68fc      	ldr	r4, [r7, #12]
 8025ce2:	68bb      	ldr	r3, [r7, #8]
 8025ce4:	681b      	ldr	r3, [r3, #0]
 8025ce6:	68ba      	ldr	r2, [r7, #8]
 8025ce8:	6852      	ldr	r2, [r2, #4]
 8025cea:	6839      	ldr	r1, [r7, #0]
 8025cec:	9103      	str	r1, [sp, #12]
 8025cee:	6879      	ldr	r1, [r7, #4]
 8025cf0:	9102      	str	r1, [sp, #8]
 8025cf2:	9201      	str	r2, [sp, #4]
 8025cf4:	9300      	str	r3, [sp, #0]
 8025cf6:	2300      	movs	r3, #0
 8025cf8:	4622      	mov	r2, r4
 8025cfa:	4601      	mov	r1, r0
 8025cfc:	68f8      	ldr	r0, [r7, #12]
 8025cfe:	f7fd ff5b 	bl	8023bb8 <lfs_bd_prog>
 8025d02:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8025d04:	697b      	ldr	r3, [r7, #20]
 8025d06:	2b00      	cmp	r3, #0
 8025d08:	d001      	beq.n	8025d0e <lfs_dir_commitprog+0x42>
        return err;
 8025d0a:	697b      	ldr	r3, [r7, #20]
 8025d0c:	e010      	b.n	8025d30 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8025d0e:	68bb      	ldr	r3, [r7, #8]
 8025d10:	68db      	ldr	r3, [r3, #12]
 8025d12:	683a      	ldr	r2, [r7, #0]
 8025d14:	6879      	ldr	r1, [r7, #4]
 8025d16:	4618      	mov	r0, r3
 8025d18:	f004 fef2 	bl	802ab00 <lfs_crc>
 8025d1c:	4602      	mov	r2, r0
 8025d1e:	68bb      	ldr	r3, [r7, #8]
 8025d20:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8025d22:	68bb      	ldr	r3, [r7, #8]
 8025d24:	685a      	ldr	r2, [r3, #4]
 8025d26:	683b      	ldr	r3, [r7, #0]
 8025d28:	441a      	add	r2, r3
 8025d2a:	68bb      	ldr	r3, [r7, #8]
 8025d2c:	605a      	str	r2, [r3, #4]
    return 0;
 8025d2e:	2300      	movs	r3, #0
}
 8025d30:	4618      	mov	r0, r3
 8025d32:	371c      	adds	r7, #28
 8025d34:	46bd      	mov	sp, r7
 8025d36:	bd90      	pop	{r4, r7, pc}

08025d38 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8025d38:	b590      	push	{r4, r7, lr}
 8025d3a:	b08f      	sub	sp, #60	; 0x3c
 8025d3c:	af04      	add	r7, sp, #16
 8025d3e:	60f8      	str	r0, [r7, #12]
 8025d40:	60b9      	str	r1, [r7, #8]
 8025d42:	607a      	str	r2, [r7, #4]
 8025d44:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8025d46:	6878      	ldr	r0, [r7, #4]
 8025d48:	f7fe f947 	bl	8023fda <lfs_tag_dsize>
 8025d4c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8025d4e:	68bb      	ldr	r3, [r7, #8]
 8025d50:	685a      	ldr	r2, [r3, #4]
 8025d52:	6a3b      	ldr	r3, [r7, #32]
 8025d54:	441a      	add	r2, r3
 8025d56:	68bb      	ldr	r3, [r7, #8]
 8025d58:	695b      	ldr	r3, [r3, #20]
 8025d5a:	429a      	cmp	r2, r3
 8025d5c:	d902      	bls.n	8025d64 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8025d5e:	f06f 031b 	mvn.w	r3, #27
 8025d62:	e065      	b.n	8025e30 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025d6a:	68bb      	ldr	r3, [r7, #8]
 8025d6c:	689b      	ldr	r3, [r3, #8]
 8025d6e:	4053      	eors	r3, r2
 8025d70:	4618      	mov	r0, r3
 8025d72:	f7fd fc92 	bl	802369a <lfs_tobe32>
 8025d76:	4603      	mov	r3, r0
 8025d78:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8025d7a:	f107 0214 	add.w	r2, r7, #20
 8025d7e:	2304      	movs	r3, #4
 8025d80:	68b9      	ldr	r1, [r7, #8]
 8025d82:	68f8      	ldr	r0, [r7, #12]
 8025d84:	f7ff ffa2 	bl	8025ccc <lfs_dir_commitprog>
 8025d88:	61f8      	str	r0, [r7, #28]
    if (err) {
 8025d8a:	69fb      	ldr	r3, [r7, #28]
 8025d8c:	2b00      	cmp	r3, #0
 8025d8e:	d001      	beq.n	8025d94 <lfs_dir_commitattr+0x5c>
        return err;
 8025d90:	69fb      	ldr	r3, [r7, #28]
 8025d92:	e04d      	b.n	8025e30 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8025d94:	687b      	ldr	r3, [r7, #4]
 8025d96:	2b00      	cmp	r3, #0
 8025d98:	db0c      	blt.n	8025db4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8025d9a:	6a3b      	ldr	r3, [r7, #32]
 8025d9c:	3b04      	subs	r3, #4
 8025d9e:	683a      	ldr	r2, [r7, #0]
 8025da0:	68b9      	ldr	r1, [r7, #8]
 8025da2:	68f8      	ldr	r0, [r7, #12]
 8025da4:	f7ff ff92 	bl	8025ccc <lfs_dir_commitprog>
 8025da8:	61f8      	str	r0, [r7, #28]
        if (err) {
 8025daa:	69fb      	ldr	r3, [r7, #28]
 8025dac:	2b00      	cmp	r3, #0
 8025dae:	d039      	beq.n	8025e24 <lfs_dir_commitattr+0xec>
            return err;
 8025db0:	69fb      	ldr	r3, [r7, #28]
 8025db2:	e03d      	b.n	8025e30 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8025db4:	683b      	ldr	r3, [r7, #0]
 8025db6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025db8:	2300      	movs	r3, #0
 8025dba:	627b      	str	r3, [r7, #36]	; 0x24
 8025dbc:	e02d      	b.n	8025e1a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8025dbe:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8025dc0:	6a3a      	ldr	r2, [r7, #32]
 8025dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dc4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8025dc6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8025dc8:	69bb      	ldr	r3, [r7, #24]
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	69ba      	ldr	r2, [r7, #24]
 8025dce:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8025dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025dd2:	440a      	add	r2, r1
 8025dd4:	2101      	movs	r1, #1
 8025dd6:	9103      	str	r1, [sp, #12]
 8025dd8:	f107 0113 	add.w	r1, r7, #19
 8025ddc:	9102      	str	r1, [sp, #8]
 8025dde:	9201      	str	r2, [sp, #4]
 8025de0:	9300      	str	r3, [sp, #0]
 8025de2:	4623      	mov	r3, r4
 8025de4:	4602      	mov	r2, r0
 8025de6:	2100      	movs	r1, #0
 8025de8:	68f8      	ldr	r0, [r7, #12]
 8025dea:	f7fd fc9f 	bl	802372c <lfs_bd_read>
 8025dee:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025df0:	69fb      	ldr	r3, [r7, #28]
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	d001      	beq.n	8025dfa <lfs_dir_commitattr+0xc2>
                return err;
 8025df6:	69fb      	ldr	r3, [r7, #28]
 8025df8:	e01a      	b.n	8025e30 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8025dfa:	f107 0213 	add.w	r2, r7, #19
 8025dfe:	2301      	movs	r3, #1
 8025e00:	68b9      	ldr	r1, [r7, #8]
 8025e02:	68f8      	ldr	r0, [r7, #12]
 8025e04:	f7ff ff62 	bl	8025ccc <lfs_dir_commitprog>
 8025e08:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025e0a:	69fb      	ldr	r3, [r7, #28]
 8025e0c:	2b00      	cmp	r3, #0
 8025e0e:	d001      	beq.n	8025e14 <lfs_dir_commitattr+0xdc>
                return err;
 8025e10:	69fb      	ldr	r3, [r7, #28]
 8025e12:	e00d      	b.n	8025e30 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e16:	3301      	adds	r3, #1
 8025e18:	627b      	str	r3, [r7, #36]	; 0x24
 8025e1a:	6a3b      	ldr	r3, [r7, #32]
 8025e1c:	3b04      	subs	r3, #4
 8025e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e20:	429a      	cmp	r2, r3
 8025e22:	d3cc      	bcc.n	8025dbe <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8025e24:	687b      	ldr	r3, [r7, #4]
 8025e26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025e2a:	68bb      	ldr	r3, [r7, #8]
 8025e2c:	609a      	str	r2, [r3, #8]
    return 0;
 8025e2e:	2300      	movs	r3, #0
}
 8025e30:	4618      	mov	r0, r3
 8025e32:	372c      	adds	r7, #44	; 0x2c
 8025e34:	46bd      	mov	sp, r7
 8025e36:	bd90      	pop	{r4, r7, pc}

08025e38 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8025e38:	b590      	push	{r4, r7, lr}
 8025e3a:	b097      	sub	sp, #92	; 0x5c
 8025e3c:	af04      	add	r7, sp, #16
 8025e3e:	6078      	str	r0, [r7, #4]
 8025e40:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025e42:	683b      	ldr	r3, [r7, #0]
 8025e44:	685b      	ldr	r3, [r3, #4]
 8025e46:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8025e4a:	687b      	ldr	r3, [r7, #4]
 8025e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025e4e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025e50:	4619      	mov	r1, r3
 8025e52:	4610      	mov	r0, r2
 8025e54:	f7fd fbb3 	bl	80235be <lfs_alignup>
 8025e58:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8025e5a:	2300      	movs	r3, #0
 8025e5c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8025e5e:	2300      	movs	r3, #0
 8025e60:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8025e62:	e0a6      	b.n	8025fb2 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8025e64:	683b      	ldr	r3, [r7, #0]
 8025e66:	685b      	ldr	r3, [r3, #4]
 8025e68:	3304      	adds	r3, #4
 8025e6a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8025e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025e6e:	6a3b      	ldr	r3, [r7, #32]
 8025e70:	1ad3      	subs	r3, r2, r3
 8025e72:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8025e76:	4618      	mov	r0, r3
 8025e78:	f7fd fb7c 	bl	8023574 <lfs_min>
 8025e7c:	4602      	mov	r2, r0
 8025e7e:	6a3b      	ldr	r3, [r7, #32]
 8025e80:	4413      	add	r3, r2
 8025e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8025e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e88:	429a      	cmp	r2, r3
 8025e8a:	d206      	bcs.n	8025e9a <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8025e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e8e:	3b08      	subs	r3, #8
 8025e90:	4619      	mov	r1, r3
 8025e92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8025e94:	f7fd fb6e 	bl	8023574 <lfs_min>
 8025e98:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8025e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8025e9e:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8025ea0:	6879      	ldr	r1, [r7, #4]
 8025ea2:	683b      	ldr	r3, [r7, #0]
 8025ea4:	681b      	ldr	r3, [r3, #0]
 8025ea6:	2204      	movs	r2, #4
 8025ea8:	9203      	str	r2, [sp, #12]
 8025eaa:	f107 0214 	add.w	r2, r7, #20
 8025eae:	9202      	str	r2, [sp, #8]
 8025eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025eb2:	9201      	str	r2, [sp, #4]
 8025eb4:	9300      	str	r3, [sp, #0]
 8025eb6:	2304      	movs	r3, #4
 8025eb8:	460a      	mov	r2, r1
 8025eba:	2100      	movs	r1, #0
 8025ebc:	6878      	ldr	r0, [r7, #4]
 8025ebe:	f7fd fc35 	bl	802372c <lfs_bd_read>
 8025ec2:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8025ec4:	69fb      	ldr	r3, [r7, #28]
 8025ec6:	2b00      	cmp	r3, #0
 8025ec8:	d005      	beq.n	8025ed6 <lfs_dir_commitcrc+0x9e>
 8025eca:	69fb      	ldr	r3, [r7, #28]
 8025ecc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025ed0:	d001      	beq.n	8025ed6 <lfs_dir_commitcrc+0x9e>
            return err;
 8025ed2:	69fb      	ldr	r3, [r7, #28]
 8025ed4:	e0e8      	b.n	80260a8 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8025ed6:	697b      	ldr	r3, [r7, #20]
 8025ed8:	4618      	mov	r0, r3
 8025eda:	f7fd fbd2 	bl	8023682 <lfs_frombe32>
 8025ede:	4603      	mov	r3, r0
 8025ee0:	43db      	mvns	r3, r3
 8025ee2:	0fdb      	lsrs	r3, r3, #31
 8025ee4:	2b00      	cmp	r3, #0
 8025ee6:	bf14      	ite	ne
 8025ee8:	2301      	movne	r3, #1
 8025eea:	2300      	moveq	r3, #0
 8025eec:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8025eee:	7efb      	ldrb	r3, [r7, #27]
 8025ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ef4:	051a      	lsls	r2, r3, #20
 8025ef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8025ef8:	6a3b      	ldr	r3, [r7, #32]
 8025efa:	1acb      	subs	r3, r1, r3
 8025efc:	4313      	orrs	r3, r2
 8025efe:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8025f02:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8025f06:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8025f08:	683b      	ldr	r3, [r7, #0]
 8025f0a:	689a      	ldr	r2, [r3, #8]
 8025f0c:	697b      	ldr	r3, [r7, #20]
 8025f0e:	4053      	eors	r3, r2
 8025f10:	4618      	mov	r0, r3
 8025f12:	f7fd fbc2 	bl	802369a <lfs_tobe32>
 8025f16:	4603      	mov	r3, r0
 8025f18:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8025f1a:	683b      	ldr	r3, [r7, #0]
 8025f1c:	68db      	ldr	r3, [r3, #12]
 8025f1e:	f107 010c 	add.w	r1, r7, #12
 8025f22:	2204      	movs	r2, #4
 8025f24:	4618      	mov	r0, r3
 8025f26:	f004 fdeb 	bl	802ab00 <lfs_crc>
 8025f2a:	4602      	mov	r2, r0
 8025f2c:	683b      	ldr	r3, [r7, #0]
 8025f2e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8025f30:	683b      	ldr	r3, [r7, #0]
 8025f32:	68db      	ldr	r3, [r3, #12]
 8025f34:	4618      	mov	r0, r3
 8025f36:	f7fd fb98 	bl	802366a <lfs_tole32>
 8025f3a:	4603      	mov	r3, r0
 8025f3c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8025f3e:	687b      	ldr	r3, [r7, #4]
 8025f40:	f103 0010 	add.w	r0, r3, #16
 8025f44:	687c      	ldr	r4, [r7, #4]
 8025f46:	683b      	ldr	r3, [r7, #0]
 8025f48:	681b      	ldr	r3, [r3, #0]
 8025f4a:	683a      	ldr	r2, [r7, #0]
 8025f4c:	6852      	ldr	r2, [r2, #4]
 8025f4e:	2108      	movs	r1, #8
 8025f50:	9103      	str	r1, [sp, #12]
 8025f52:	f107 010c 	add.w	r1, r7, #12
 8025f56:	9102      	str	r1, [sp, #8]
 8025f58:	9201      	str	r2, [sp, #4]
 8025f5a:	9300      	str	r3, [sp, #0]
 8025f5c:	2300      	movs	r3, #0
 8025f5e:	4622      	mov	r2, r4
 8025f60:	4601      	mov	r1, r0
 8025f62:	6878      	ldr	r0, [r7, #4]
 8025f64:	f7fd fe28 	bl	8023bb8 <lfs_bd_prog>
 8025f68:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8025f6a:	69fb      	ldr	r3, [r7, #28]
 8025f6c:	2b00      	cmp	r3, #0
 8025f6e:	d001      	beq.n	8025f74 <lfs_dir_commitcrc+0x13c>
            return err;
 8025f70:	69fb      	ldr	r3, [r7, #28]
 8025f72:	e099      	b.n	80260a8 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8025f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	d106      	bne.n	8025f88 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8025f7a:	683b      	ldr	r3, [r7, #0]
 8025f7c:	685b      	ldr	r3, [r3, #4]
 8025f7e:	3304      	adds	r3, #4
 8025f80:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8025f82:	683b      	ldr	r3, [r7, #0]
 8025f84:	68db      	ldr	r3, [r3, #12]
 8025f86:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8025f88:	697b      	ldr	r3, [r7, #20]
 8025f8a:	4618      	mov	r0, r3
 8025f8c:	f7fe f818 	bl	8023fc0 <lfs_tag_size>
 8025f90:	4603      	mov	r3, r0
 8025f92:	1d1a      	adds	r2, r3, #4
 8025f94:	683b      	ldr	r3, [r7, #0]
 8025f96:	685b      	ldr	r3, [r3, #4]
 8025f98:	441a      	add	r2, r3
 8025f9a:	683b      	ldr	r3, [r7, #0]
 8025f9c:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8025f9e:	7efb      	ldrb	r3, [r7, #27]
 8025fa0:	07da      	lsls	r2, r3, #31
 8025fa2:	697b      	ldr	r3, [r7, #20]
 8025fa4:	405a      	eors	r2, r3
 8025fa6:	683b      	ldr	r3, [r7, #0]
 8025fa8:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8025faa:	683b      	ldr	r3, [r7, #0]
 8025fac:	f04f 32ff 	mov.w	r2, #4294967295
 8025fb0:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8025fb2:	683b      	ldr	r3, [r7, #0]
 8025fb4:	685b      	ldr	r3, [r3, #4]
 8025fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025fb8:	429a      	cmp	r2, r3
 8025fba:	f63f af53 	bhi.w	8025e64 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8025fbe:	687b      	ldr	r3, [r7, #4]
 8025fc0:	f103 0110 	add.w	r1, r3, #16
 8025fc4:	687a      	ldr	r2, [r7, #4]
 8025fc6:	2300      	movs	r3, #0
 8025fc8:	6878      	ldr	r0, [r7, #4]
 8025fca:	f7fd fdc1 	bl	8023b50 <lfs_bd_sync>
 8025fce:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8025fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fd2:	2b00      	cmp	r3, #0
 8025fd4:	d001      	beq.n	8025fda <lfs_dir_commitcrc+0x1a2>
        return err;
 8025fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fd8:	e066      	b.n	80260a8 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8025fda:	683b      	ldr	r3, [r7, #0]
 8025fdc:	691b      	ldr	r3, [r3, #16]
 8025fde:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8025fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025fe2:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8025fe4:	e05b      	b.n	802609e <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8025fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8025fea:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8025fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025ff0:	e030      	b.n	8026054 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8025ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025ff6:	429a      	cmp	r2, r3
 8025ff8:	d106      	bne.n	8026008 <lfs_dir_commitcrc+0x1d0>
 8025ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ffe:	429a      	cmp	r2, r3
 8026000:	d002      	beq.n	8026008 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8026002:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8026006:	e04f      	b.n	80260a8 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8026008:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 802600a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802600e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8026010:	1d18      	adds	r0, r3, #4
 8026012:	683b      	ldr	r3, [r7, #0]
 8026014:	681b      	ldr	r3, [r3, #0]
 8026016:	2201      	movs	r2, #1
 8026018:	9203      	str	r2, [sp, #12]
 802601a:	f107 020b 	add.w	r2, r7, #11
 802601e:	9202      	str	r2, [sp, #8]
 8026020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026022:	9201      	str	r2, [sp, #4]
 8026024:	9300      	str	r3, [sp, #0]
 8026026:	4603      	mov	r3, r0
 8026028:	460a      	mov	r2, r1
 802602a:	2100      	movs	r1, #0
 802602c:	6878      	ldr	r0, [r7, #4]
 802602e:	f7fd fb7d 	bl	802372c <lfs_bd_read>
 8026032:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8026034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026036:	2b00      	cmp	r3, #0
 8026038:	d001      	beq.n	802603e <lfs_dir_commitcrc+0x206>
                return err;
 802603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802603c:	e034      	b.n	80260a8 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 802603e:	f107 030b 	add.w	r3, r7, #11
 8026042:	2201      	movs	r2, #1
 8026044:	4619      	mov	r1, r3
 8026046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026048:	f004 fd5a 	bl	802ab00 <lfs_crc>
 802604c:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 802604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026050:	3301      	adds	r3, #1
 8026052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026056:	3304      	adds	r3, #4
 8026058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802605a:	429a      	cmp	r2, r3
 802605c:	d3c9      	bcc.n	8025ff2 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 802605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026060:	2b00      	cmp	r3, #0
 8026062:	d002      	beq.n	802606a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8026064:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8026068:	e01e      	b.n	80260a8 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 802606a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802606e:	1ad3      	subs	r3, r2, r3
 8026070:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8026074:	4618      	mov	r0, r3
 8026076:	f7fd fa7d 	bl	8023574 <lfs_min>
 802607a:	4602      	mov	r2, r0
 802607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802607e:	4413      	add	r3, r2
 8026080:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8026082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026086:	429a      	cmp	r2, r3
 8026088:	d206      	bcs.n	8026098 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 802608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802608c:	3b08      	subs	r3, #8
 802608e:	4619      	mov	r1, r3
 8026090:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8026092:	f7fd fa6f 	bl	8023574 <lfs_min>
 8026096:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8026098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802609a:	3304      	adds	r3, #4
 802609c:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 802609e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80260a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80260a2:	429a      	cmp	r2, r3
 80260a4:	d39f      	bcc.n	8025fe6 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80260a6:	2300      	movs	r3, #0
}
 80260a8:	4618      	mov	r0, r3
 80260aa:	374c      	adds	r7, #76	; 0x4c
 80260ac:	46bd      	mov	sp, r7
 80260ae:	bd90      	pop	{r4, r7, pc}

080260b0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80260b0:	b580      	push	{r7, lr}
 80260b2:	b08a      	sub	sp, #40	; 0x28
 80260b4:	af04      	add	r7, sp, #16
 80260b6:	6078      	str	r0, [r7, #4]
 80260b8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80260ba:	2300      	movs	r3, #0
 80260bc:	617b      	str	r3, [r7, #20]
 80260be:	e016      	b.n	80260ee <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80260c0:	697b      	ldr	r3, [r7, #20]
 80260c2:	3301      	adds	r3, #1
 80260c4:	2b00      	cmp	r3, #0
 80260c6:	f003 0301 	and.w	r3, r3, #1
 80260ca:	bfb8      	it	lt
 80260cc:	425b      	neglt	r3, r3
 80260ce:	009b      	lsls	r3, r3, #2
 80260d0:	683a      	ldr	r2, [r7, #0]
 80260d2:	4413      	add	r3, r2
 80260d4:	4619      	mov	r1, r3
 80260d6:	6878      	ldr	r0, [r7, #4]
 80260d8:	f7fe f9b2 	bl	8024440 <lfs_alloc>
 80260dc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80260de:	68fb      	ldr	r3, [r7, #12]
 80260e0:	2b00      	cmp	r3, #0
 80260e2:	d001      	beq.n	80260e8 <lfs_dir_alloc+0x38>
            return err;
 80260e4:	68fb      	ldr	r3, [r7, #12]
 80260e6:	e058      	b.n	802619a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80260e8:	697b      	ldr	r3, [r7, #20]
 80260ea:	3301      	adds	r3, #1
 80260ec:	617b      	str	r3, [r7, #20]
 80260ee:	697b      	ldr	r3, [r7, #20]
 80260f0:	2b01      	cmp	r3, #1
 80260f2:	dde5      	ble.n	80260c0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80260f4:	683b      	ldr	r3, [r7, #0]
 80260f6:	2200      	movs	r2, #0
 80260f8:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80260fa:	6879      	ldr	r1, [r7, #4]
 80260fc:	683b      	ldr	r3, [r7, #0]
 80260fe:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8026100:	683a      	ldr	r2, [r7, #0]
 8026102:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8026104:	2004      	movs	r0, #4
 8026106:	9003      	str	r0, [sp, #12]
 8026108:	9202      	str	r2, [sp, #8]
 802610a:	2200      	movs	r2, #0
 802610c:	9201      	str	r2, [sp, #4]
 802610e:	9300      	str	r3, [sp, #0]
 8026110:	2304      	movs	r3, #4
 8026112:	460a      	mov	r2, r1
 8026114:	2100      	movs	r1, #0
 8026116:	6878      	ldr	r0, [r7, #4]
 8026118:	f7fd fb08 	bl	802372c <lfs_bd_read>
 802611c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 802611e:	683b      	ldr	r3, [r7, #0]
 8026120:	689b      	ldr	r3, [r3, #8]
 8026122:	4618      	mov	r0, r3
 8026124:	f7fd fa96 	bl	8023654 <lfs_fromle32>
 8026128:	4602      	mov	r2, r0
 802612a:	683b      	ldr	r3, [r7, #0]
 802612c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 802612e:	693b      	ldr	r3, [r7, #16]
 8026130:	2b00      	cmp	r3, #0
 8026132:	d005      	beq.n	8026140 <lfs_dir_alloc+0x90>
 8026134:	693b      	ldr	r3, [r7, #16]
 8026136:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802613a:	d001      	beq.n	8026140 <lfs_dir_alloc+0x90>
        return err;
 802613c:	693b      	ldr	r3, [r7, #16]
 802613e:	e02c      	b.n	802619a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8026140:	687b      	ldr	r3, [r7, #4]
 8026142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026146:	2b00      	cmp	r3, #0
 8026148:	dd0e      	ble.n	8026168 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 802614a:	683b      	ldr	r3, [r7, #0]
 802614c:	689a      	ldr	r2, [r3, #8]
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026154:	3301      	adds	r3, #1
 8026156:	f043 0301 	orr.w	r3, r3, #1
 802615a:	4619      	mov	r1, r3
 802615c:	4610      	mov	r0, r2
 802615e:	f7fd fa2e 	bl	80235be <lfs_alignup>
 8026162:	4602      	mov	r2, r0
 8026164:	683b      	ldr	r3, [r7, #0]
 8026166:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8026168:	683b      	ldr	r3, [r7, #0]
 802616a:	2204      	movs	r2, #4
 802616c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 802616e:	683b      	ldr	r3, [r7, #0]
 8026170:	f04f 32ff 	mov.w	r2, #4294967295
 8026174:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8026176:	683b      	ldr	r3, [r7, #0]
 8026178:	2200      	movs	r2, #0
 802617a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 802617c:	683b      	ldr	r3, [r7, #0]
 802617e:	f04f 32ff 	mov.w	r2, #4294967295
 8026182:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8026184:	683b      	ldr	r3, [r7, #0]
 8026186:	f04f 32ff 	mov.w	r2, #4294967295
 802618a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 802618c:	683b      	ldr	r3, [r7, #0]
 802618e:	2200      	movs	r2, #0
 8026190:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8026192:	683b      	ldr	r3, [r7, #0]
 8026194:	2200      	movs	r2, #0
 8026196:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8026198:	2300      	movs	r3, #0
}
 802619a:	4618      	mov	r0, r3
 802619c:	3718      	adds	r7, #24
 802619e:	46bd      	mov	sp, r7
 80261a0:	bd80      	pop	{r7, pc}
	...

080261a4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80261a4:	b580      	push	{r7, lr}
 80261a6:	b08a      	sub	sp, #40	; 0x28
 80261a8:	af00      	add	r7, sp, #0
 80261aa:	60f8      	str	r0, [r7, #12]
 80261ac:	60b9      	str	r1, [r7, #8]
 80261ae:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80261b0:	68fb      	ldr	r3, [r7, #12]
 80261b2:	3348      	adds	r3, #72	; 0x48
 80261b4:	461a      	mov	r2, r3
 80261b6:	6879      	ldr	r1, [r7, #4]
 80261b8:	68f8      	ldr	r0, [r7, #12]
 80261ba:	f7ff fb97 	bl	80258ec <lfs_dir_getgstate>
 80261be:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80261c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d001      	beq.n	80261ca <lfs_dir_drop+0x26>
        return err;
 80261c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80261c8:	e022      	b.n	8026210 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 80261ca:	687b      	ldr	r3, [r7, #4]
 80261cc:	3318      	adds	r3, #24
 80261ce:	4618      	mov	r0, r3
 80261d0:	f7fd fe71 	bl	8023eb6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80261d4:	687b      	ldr	r3, [r7, #4]
 80261d6:	7ddb      	ldrb	r3, [r3, #23]
 80261d8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80261dc:	051a      	lsls	r2, r3, #20
 80261de:	4b0e      	ldr	r3, [pc, #56]	; (8026218 <lfs_dir_drop+0x74>)
 80261e0:	4313      	orrs	r3, r2
 80261e2:	61fb      	str	r3, [r7, #28]
 80261e4:	687b      	ldr	r3, [r7, #4]
 80261e6:	3318      	adds	r3, #24
 80261e8:	623b      	str	r3, [r7, #32]
 80261ea:	f107 021c 	add.w	r2, r7, #28
 80261ee:	2301      	movs	r3, #1
 80261f0:	68b9      	ldr	r1, [r7, #8]
 80261f2:	68f8      	ldr	r0, [r7, #12]
 80261f4:	f001 f978 	bl	80274e8 <lfs_dir_commit>
 80261f8:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	3318      	adds	r3, #24
 80261fe:	4618      	mov	r0, r3
 8026200:	f7fd fe3f 	bl	8023e82 <lfs_pair_fromle32>
    if (err) {
 8026204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026206:	2b00      	cmp	r3, #0
 8026208:	d001      	beq.n	802620e <lfs_dir_drop+0x6a>
        return err;
 802620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802620c:	e000      	b.n	8026210 <lfs_dir_drop+0x6c>
    }

    return 0;
 802620e:	2300      	movs	r3, #0
}
 8026210:	4618      	mov	r0, r3
 8026212:	3728      	adds	r7, #40	; 0x28
 8026214:	46bd      	mov	sp, r7
 8026216:	bd80      	pop	{r7, pc}
 8026218:	000ffc08 	.word	0x000ffc08

0802621c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 802621c:	b580      	push	{r7, lr}
 802621e:	b092      	sub	sp, #72	; 0x48
 8026220:	af04      	add	r7, sp, #16
 8026222:	60f8      	str	r0, [r7, #12]
 8026224:	60b9      	str	r1, [r7, #8]
 8026226:	607a      	str	r2, [r7, #4]
 8026228:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 802622a:	f107 0310 	add.w	r3, r7, #16
 802622e:	4619      	mov	r1, r3
 8026230:	68f8      	ldr	r0, [r7, #12]
 8026232:	f7ff ff3d 	bl	80260b0 <lfs_dir_alloc>
 8026236:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8026238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802623a:	2b00      	cmp	r3, #0
 802623c:	d001      	beq.n	8026242 <lfs_dir_split+0x26>
        return err;
 802623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026240:	e03c      	b.n	80262bc <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8026242:	68bb      	ldr	r3, [r7, #8]
 8026244:	7ddb      	ldrb	r3, [r3, #23]
 8026246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 802624a:	68bb      	ldr	r3, [r7, #8]
 802624c:	699b      	ldr	r3, [r3, #24]
 802624e:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8026250:	68bb      	ldr	r3, [r7, #8]
 8026252:	69db      	ldr	r3, [r3, #28]
 8026254:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8026256:	f107 0110 	add.w	r1, r7, #16
 802625a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802625e:	9302      	str	r3, [sp, #8]
 8026260:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026264:	9301      	str	r3, [sp, #4]
 8026266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026268:	9300      	str	r3, [sp, #0]
 802626a:	683b      	ldr	r3, [r7, #0]
 802626c:	687a      	ldr	r2, [r7, #4]
 802626e:	68f8      	ldr	r0, [r7, #12]
 8026270:	f000 f87a 	bl	8026368 <lfs_dir_compact>
 8026274:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8026276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026278:	2b00      	cmp	r3, #0
 802627a:	da01      	bge.n	8026280 <lfs_dir_split+0x64>
        return res;
 802627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802627e:	e01d      	b.n	80262bc <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8026280:	693a      	ldr	r2, [r7, #16]
 8026282:	68bb      	ldr	r3, [r7, #8]
 8026284:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8026286:	697a      	ldr	r2, [r7, #20]
 8026288:	68bb      	ldr	r3, [r7, #8]
 802628a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 802628c:	68bb      	ldr	r3, [r7, #8]
 802628e:	2201      	movs	r2, #1
 8026290:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8026292:	68ba      	ldr	r2, [r7, #8]
 8026294:	68fb      	ldr	r3, [r7, #12]
 8026296:	3320      	adds	r3, #32
 8026298:	4619      	mov	r1, r3
 802629a:	4610      	mov	r0, r2
 802629c:	f7fd fd9a 	bl	8023dd4 <lfs_pair_cmp>
 80262a0:	4603      	mov	r3, r0
 80262a2:	2b00      	cmp	r3, #0
 80262a4:	d109      	bne.n	80262ba <lfs_dir_split+0x9e>
 80262a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80262aa:	2b00      	cmp	r3, #0
 80262ac:	d105      	bne.n	80262ba <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80262ae:	693a      	ldr	r2, [r7, #16]
 80262b0:	68fb      	ldr	r3, [r7, #12]
 80262b2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80262b4:	697a      	ldr	r2, [r7, #20]
 80262b6:	68fb      	ldr	r3, [r7, #12]
 80262b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80262ba:	2300      	movs	r3, #0
}
 80262bc:	4618      	mov	r0, r3
 80262be:	3738      	adds	r7, #56	; 0x38
 80262c0:	46bd      	mov	sp, r7
 80262c2:	bd80      	pop	{r7, pc}

080262c4 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80262c4:	b580      	push	{r7, lr}
 80262c6:	b086      	sub	sp, #24
 80262c8:	af00      	add	r7, sp, #0
 80262ca:	60f8      	str	r0, [r7, #12]
 80262cc:	60b9      	str	r1, [r7, #8]
 80262ce:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80262d0:	68fb      	ldr	r3, [r7, #12]
 80262d2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80262d4:	68b8      	ldr	r0, [r7, #8]
 80262d6:	f7fd fe80 	bl	8023fda <lfs_tag_dsize>
 80262da:	4602      	mov	r2, r0
 80262dc:	697b      	ldr	r3, [r7, #20]
 80262de:	681b      	ldr	r3, [r3, #0]
 80262e0:	441a      	add	r2, r3
 80262e2:	697b      	ldr	r3, [r7, #20]
 80262e4:	601a      	str	r2, [r3, #0]
    return 0;
 80262e6:	2300      	movs	r3, #0
}
 80262e8:	4618      	mov	r0, r3
 80262ea:	3718      	adds	r7, #24
 80262ec:	46bd      	mov	sp, r7
 80262ee:	bd80      	pop	{r7, pc}

080262f0 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80262f0:	b580      	push	{r7, lr}
 80262f2:	b086      	sub	sp, #24
 80262f4:	af00      	add	r7, sp, #0
 80262f6:	60f8      	str	r0, [r7, #12]
 80262f8:	60b9      	str	r1, [r7, #8]
 80262fa:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80262fc:	68fb      	ldr	r3, [r7, #12]
 80262fe:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8026300:	697b      	ldr	r3, [r7, #20]
 8026302:	6818      	ldr	r0, [r3, #0]
 8026304:	697b      	ldr	r3, [r7, #20]
 8026306:	6859      	ldr	r1, [r3, #4]
 8026308:	687b      	ldr	r3, [r7, #4]
 802630a:	68ba      	ldr	r2, [r7, #8]
 802630c:	f7ff fd14 	bl	8025d38 <lfs_dir_commitattr>
 8026310:	4603      	mov	r3, r0
}
 8026312:	4618      	mov	r0, r3
 8026314:	3718      	adds	r7, #24
 8026316:	46bd      	mov	sp, r7
 8026318:	bd80      	pop	{r7, pc}

0802631a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 802631a:	b480      	push	{r7}
 802631c:	b083      	sub	sp, #12
 802631e:	af00      	add	r7, sp, #0
 8026320:	6078      	str	r0, [r7, #4]
 8026322:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 802632a:	2b00      	cmp	r3, #0
 802632c:	dd11      	ble.n	8026352 <lfs_dir_needsrelocation+0x38>
 802632e:	683b      	ldr	r3, [r7, #0]
 8026330:	689b      	ldr	r3, [r3, #8]
 8026332:	3301      	adds	r3, #1
 8026334:	687a      	ldr	r2, [r7, #4]
 8026336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802633a:	3201      	adds	r2, #1
 802633c:	f042 0201 	orr.w	r2, r2, #1
 8026340:	fbb3 f1f2 	udiv	r1, r3, r2
 8026344:	fb01 f202 	mul.w	r2, r1, r2
 8026348:	1a9b      	subs	r3, r3, r2
 802634a:	2b00      	cmp	r3, #0
 802634c:	d101      	bne.n	8026352 <lfs_dir_needsrelocation+0x38>
 802634e:	2301      	movs	r3, #1
 8026350:	e000      	b.n	8026354 <lfs_dir_needsrelocation+0x3a>
 8026352:	2300      	movs	r3, #0
 8026354:	f003 0301 	and.w	r3, r3, #1
 8026358:	b2db      	uxtb	r3, r3
}
 802635a:	4618      	mov	r0, r3
 802635c:	370c      	adds	r7, #12
 802635e:	46bd      	mov	sp, r7
 8026360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026364:	4770      	bx	lr
	...

08026368 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026368:	b580      	push	{r7, lr}
 802636a:	b0a4      	sub	sp, #144	; 0x90
 802636c:	af0a      	add	r7, sp, #40	; 0x28
 802636e:	60f8      	str	r0, [r7, #12]
 8026370:	60b9      	str	r1, [r7, #8]
 8026372:	607a      	str	r2, [r7, #4]
 8026374:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8026376:	2300      	movs	r3, #0
 8026378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 802637c:	68b9      	ldr	r1, [r7, #8]
 802637e:	68f8      	ldr	r0, [r7, #12]
 8026380:	f7ff ffcb 	bl	802631a <lfs_dir_needsrelocation>
 8026384:	4603      	mov	r3, r0
 8026386:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 802638a:	68bb      	ldr	r3, [r7, #8]
 802638c:	689b      	ldr	r3, [r3, #8]
 802638e:	1c5a      	adds	r2, r3, #1
 8026390:	68bb      	ldr	r3, [r7, #8]
 8026392:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8026394:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026398:	2b00      	cmp	r3, #0
 802639a:	d00e      	beq.n	80263ba <lfs_dir_compact+0x52>
 802639c:	68bb      	ldr	r3, [r7, #8]
 802639e:	2200      	movs	r2, #0
 80263a0:	657a      	str	r2, [r7, #84]	; 0x54
 80263a2:	2201      	movs	r2, #1
 80263a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80263a6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80263aa:	4611      	mov	r1, r2
 80263ac:	4618      	mov	r0, r3
 80263ae:	f7fd fd11 	bl	8023dd4 <lfs_pair_cmp>
 80263b2:	4603      	mov	r3, r0
 80263b4:	2b00      	cmp	r3, #0
 80263b6:	f040 8155 	bne.w	8026664 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80263ba:	68bb      	ldr	r3, [r7, #8]
 80263bc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80263be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80263c0:	2300      	movs	r3, #0
 80263c2:	643b      	str	r3, [r7, #64]	; 0x40
 80263c4:	f04f 33ff 	mov.w	r3, #4294967295
 80263c8:	647b      	str	r3, [r7, #68]	; 0x44
 80263ca:	f04f 33ff 	mov.w	r3, #4294967295
 80263ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80263d0:	2300      	movs	r3, #0
 80263d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80263d4:	68fb      	ldr	r3, [r7, #12]
 80263d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80263d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d004      	beq.n	80263e8 <lfs_dir_compact+0x80>
 80263de:	68fb      	ldr	r3, [r7, #12]
 80263e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80263e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80263e4:	3b08      	subs	r3, #8
 80263e6:	e003      	b.n	80263f0 <lfs_dir_compact+0x88>
 80263e8:	68fb      	ldr	r3, [r7, #12]
 80263ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80263ec:	69db      	ldr	r3, [r3, #28]
 80263ee:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80263f0:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80263f2:	68bb      	ldr	r3, [r7, #8]
 80263f4:	685b      	ldr	r3, [r3, #4]
 80263f6:	4619      	mov	r1, r3
 80263f8:	68f8      	ldr	r0, [r7, #12]
 80263fa:	f7fd fc89 	bl	8023d10 <lfs_bd_erase>
 80263fe:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026402:	2b00      	cmp	r3, #0
 8026404:	d006      	beq.n	8026414 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8026406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026408:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802640c:	f000 812c 	beq.w	8026668 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8026410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026412:	e188      	b.n	8026726 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8026414:	68bb      	ldr	r3, [r7, #8]
 8026416:	689b      	ldr	r3, [r3, #8]
 8026418:	4618      	mov	r0, r3
 802641a:	f7fd f926 	bl	802366a <lfs_tole32>
 802641e:	4602      	mov	r2, r0
 8026420:	68bb      	ldr	r3, [r7, #8]
 8026422:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8026424:	68bb      	ldr	r3, [r7, #8]
 8026426:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 802642a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 802642e:	2304      	movs	r3, #4
 8026430:	68f8      	ldr	r0, [r7, #12]
 8026432:	f7ff fc4b 	bl	8025ccc <lfs_dir_commitprog>
 8026436:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8026438:	68bb      	ldr	r3, [r7, #8]
 802643a:	689b      	ldr	r3, [r3, #8]
 802643c:	4618      	mov	r0, r3
 802643e:	f7fd f909 	bl	8023654 <lfs_fromle32>
 8026442:	4602      	mov	r2, r0
 8026444:	68bb      	ldr	r3, [r7, #8]
 8026446:	609a      	str	r2, [r3, #8]
            if (err) {
 8026448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802644a:	2b00      	cmp	r3, #0
 802644c:	d006      	beq.n	802645c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 802644e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026450:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026454:	f000 810a 	beq.w	802666c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8026458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802645a:	e164      	b.n	8026726 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 802645c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026460:	425b      	negs	r3, r3
 8026462:	b29b      	uxth	r3, r3
 8026464:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026466:	68fa      	ldr	r2, [r7, #12]
 8026468:	637a      	str	r2, [r7, #52]	; 0x34
 802646a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802646e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8026470:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026474:	9208      	str	r2, [sp, #32]
 8026476:	4aae      	ldr	r2, [pc, #696]	; (8026730 <lfs_dir_compact+0x3c8>)
 8026478:	9207      	str	r2, [sp, #28]
 802647a:	9306      	str	r3, [sp, #24]
 802647c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8026480:	9305      	str	r3, [sp, #20]
 8026482:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026486:	9304      	str	r3, [sp, #16]
 8026488:	2300      	movs	r3, #0
 802648a:	9303      	str	r3, [sp, #12]
 802648c:	4ba9      	ldr	r3, [pc, #676]	; (8026734 <lfs_dir_compact+0x3cc>)
 802648e:	9302      	str	r3, [sp, #8]
 8026490:	683b      	ldr	r3, [r7, #0]
 8026492:	9301      	str	r3, [sp, #4]
 8026494:	687b      	ldr	r3, [r7, #4]
 8026496:	9300      	str	r3, [sp, #0]
 8026498:	f04f 33ff 	mov.w	r3, #4294967295
 802649c:	2200      	movs	r2, #0
 802649e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80264a0:	68f8      	ldr	r0, [r7, #12]
 80264a2:	f7fe fab9 	bl	8024a18 <lfs_dir_traverse>
 80264a6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80264a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264aa:	2b00      	cmp	r3, #0
 80264ac:	d006      	beq.n	80264bc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80264ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80264b4:	f000 80dc 	beq.w	8026670 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80264b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264ba:	e134      	b.n	8026726 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80264bc:	68bb      	ldr	r3, [r7, #8]
 80264be:	3318      	adds	r3, #24
 80264c0:	4618      	mov	r0, r3
 80264c2:	f7fd fc6c 	bl	8023d9e <lfs_pair_isnull>
 80264c6:	4603      	mov	r3, r0
 80264c8:	f083 0301 	eor.w	r3, r3, #1
 80264cc:	b2db      	uxtb	r3, r3
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	d022      	beq.n	8026518 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80264d2:	68bb      	ldr	r3, [r7, #8]
 80264d4:	3318      	adds	r3, #24
 80264d6:	4618      	mov	r0, r3
 80264d8:	f7fd fced 	bl	8023eb6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80264dc:	68bb      	ldr	r3, [r7, #8]
 80264de:	7ddb      	ldrb	r3, [r3, #23]
 80264e0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80264e4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80264e6:	4a94      	ldr	r2, [pc, #592]	; (8026738 <lfs_dir_compact+0x3d0>)
 80264e8:	431a      	orrs	r2, r3
                        dir->tail);
 80264ea:	68bb      	ldr	r3, [r7, #8]
 80264ec:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80264ee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80264f2:	68f8      	ldr	r0, [r7, #12]
 80264f4:	f7ff fc20 	bl	8025d38 <lfs_dir_commitattr>
 80264f8:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 80264fa:	68bb      	ldr	r3, [r7, #8]
 80264fc:	3318      	adds	r3, #24
 80264fe:	4618      	mov	r0, r3
 8026500:	f7fd fcbf 	bl	8023e82 <lfs_pair_fromle32>
                if (err) {
 8026504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026506:	2b00      	cmp	r3, #0
 8026508:	d006      	beq.n	8026518 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802650a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802650c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026510:	f000 80b0 	beq.w	8026674 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8026514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026516:	e106      	b.n	8026726 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8026518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802651c:	2200      	movs	r2, #0
 802651e:	601a      	str	r2, [r3, #0]
 8026520:	605a      	str	r2, [r3, #4]
 8026522:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026524:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8026528:	f083 0301 	eor.w	r3, r3, #1
 802652c:	b2db      	uxtb	r3, r3
 802652e:	2b00      	cmp	r3, #0
 8026530:	d011      	beq.n	8026556 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8026532:	68fb      	ldr	r3, [r7, #12]
 8026534:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802653c:	4611      	mov	r1, r2
 802653e:	4618      	mov	r0, r3
 8026540:	f7fd fd5f 	bl	8024002 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8026544:	68fb      	ldr	r3, [r7, #12]
 8026546:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802654a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802654e:	4611      	mov	r1, r2
 8026550:	4618      	mov	r0, r3
 8026552:	f7fd fd56 	bl	8024002 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8026556:	68fb      	ldr	r3, [r7, #12]
 8026558:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802655c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026560:	4611      	mov	r1, r2
 8026562:	4618      	mov	r0, r3
 8026564:	f7fd fd4d 	bl	8024002 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802656a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802656e:	f023 0303 	bic.w	r3, r3, #3
 8026572:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026578:	461a      	mov	r2, r3
 802657a:	68b9      	ldr	r1, [r7, #8]
 802657c:	68f8      	ldr	r0, [r7, #12]
 802657e:	f7ff f9b5 	bl	80258ec <lfs_dir_getgstate>
 8026582:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026586:	2b00      	cmp	r3, #0
 8026588:	d001      	beq.n	802658e <lfs_dir_compact+0x226>
                return err;
 802658a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802658c:	e0cb      	b.n	8026726 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 802658e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026592:	4618      	mov	r0, r3
 8026594:	f7fd fd5a 	bl	802404c <lfs_gstate_iszero>
 8026598:	4603      	mov	r3, r0
 802659a:	f083 0301 	eor.w	r3, r3, #1
 802659e:	b2db      	uxtb	r3, r3
 80265a0:	2b00      	cmp	r3, #0
 80265a2:	d016      	beq.n	80265d2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80265a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80265a8:	4618      	mov	r0, r3
 80265aa:	f7fd fde1 	bl	8024170 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80265ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80265b2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80265b6:	4a61      	ldr	r2, [pc, #388]	; (802673c <lfs_dir_compact+0x3d4>)
 80265b8:	68f8      	ldr	r0, [r7, #12]
 80265ba:	f7ff fbbd 	bl	8025d38 <lfs_dir_commitattr>
 80265be:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80265c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265c2:	2b00      	cmp	r3, #0
 80265c4:	d005      	beq.n	80265d2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80265c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265c8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80265cc:	d054      	beq.n	8026678 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80265ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265d0:	e0a9      	b.n	8026726 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80265d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80265d6:	4619      	mov	r1, r3
 80265d8:	68f8      	ldr	r0, [r7, #12]
 80265da:	f7ff fc2d 	bl	8025e38 <lfs_dir_commitcrc>
 80265de:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80265e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265e2:	2b00      	cmp	r3, #0
 80265e4:	d005      	beq.n	80265f2 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80265e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265e8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80265ec:	d046      	beq.n	802667c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80265ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265f0:	e099      	b.n	8026726 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80265f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80265f4:	68fa      	ldr	r2, [r7, #12]
 80265f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80265f8:	6992      	ldr	r2, [r2, #24]
 80265fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80265fe:	fb01 f202 	mul.w	r2, r1, r2
 8026602:	1a9b      	subs	r3, r3, r2
 8026604:	2b00      	cmp	r3, #0
 8026606:	d006      	beq.n	8026616 <lfs_dir_compact+0x2ae>
 8026608:	4b4d      	ldr	r3, [pc, #308]	; (8026740 <lfs_dir_compact+0x3d8>)
 802660a:	4a4e      	ldr	r2, [pc, #312]	; (8026744 <lfs_dir_compact+0x3dc>)
 802660c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8026610:	484d      	ldr	r0, [pc, #308]	; (8026748 <lfs_dir_compact+0x3e0>)
 8026612:	f005 fef3 	bl	802c3fc <__assert_func>
            lfs_pair_swap(dir->pair);
 8026616:	68bb      	ldr	r3, [r7, #8]
 8026618:	4618      	mov	r0, r3
 802661a:	f7fd fbab 	bl	8023d74 <lfs_pair_swap>
            dir->count = end - begin;
 802661e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8026622:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026626:	1ad3      	subs	r3, r2, r3
 8026628:	b29a      	uxth	r2, r3
 802662a:	68bb      	ldr	r3, [r7, #8]
 802662c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 802662e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026630:	68bb      	ldr	r3, [r7, #8]
 8026632:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8026634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026636:	68bb      	ldr	r3, [r7, #8]
 8026638:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 802663a:	68fb      	ldr	r3, [r7, #12]
 802663c:	3348      	adds	r3, #72	; 0x48
 802663e:	2200      	movs	r2, #0
 8026640:	601a      	str	r2, [r3, #0]
 8026642:	605a      	str	r2, [r3, #4]
 8026644:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026646:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802664a:	f083 0301 	eor.w	r3, r3, #1
 802664e:	b2db      	uxtb	r3, r3
 8026650:	2b00      	cmp	r3, #0
 8026652:	d065      	beq.n	8026720 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8026654:	68fb      	ldr	r3, [r7, #12]
 8026656:	68fa      	ldr	r2, [r7, #12]
 8026658:	333c      	adds	r3, #60	; 0x3c
 802665a:	3230      	adds	r2, #48	; 0x30
 802665c:	ca07      	ldmia	r2, {r0, r1, r2}
 802665e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8026662:	e05d      	b.n	8026720 <lfs_dir_compact+0x3b8>
        goto relocate;
 8026664:	bf00      	nop
 8026666:	e00a      	b.n	802667e <lfs_dir_compact+0x316>
                    goto relocate;
 8026668:	bf00      	nop
 802666a:	e008      	b.n	802667e <lfs_dir_compact+0x316>
                    goto relocate;
 802666c:	bf00      	nop
 802666e:	e006      	b.n	802667e <lfs_dir_compact+0x316>
                    goto relocate;
 8026670:	bf00      	nop
 8026672:	e004      	b.n	802667e <lfs_dir_compact+0x316>
                        goto relocate;
 8026674:	bf00      	nop
 8026676:	e002      	b.n	802667e <lfs_dir_compact+0x316>
                        goto relocate;
 8026678:	bf00      	nop
 802667a:	e000      	b.n	802667e <lfs_dir_compact+0x316>
                    goto relocate;
 802667c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 802667e:	2301      	movs	r3, #1
 8026680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8026684:	68fb      	ldr	r3, [r7, #12]
 8026686:	3310      	adds	r3, #16
 8026688:	4619      	mov	r1, r3
 802668a:	68f8      	ldr	r0, [r7, #12]
 802668c:	f7fd f828 	bl	80236e0 <lfs_cache_drop>
        if (!tired) {
 8026690:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026694:	f083 0301 	eor.w	r3, r3, #1
 8026698:	b2db      	uxtb	r3, r3
 802669a:	2b00      	cmp	r3, #0
 802669c:	d009      	beq.n	80266b2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 802669e:	68bb      	ldr	r3, [r7, #8]
 80266a0:	685b      	ldr	r3, [r3, #4]
 80266a2:	4a2a      	ldr	r2, [pc, #168]	; (802674c <lfs_dir_compact+0x3e4>)
 80266a4:	9200      	str	r2, [sp, #0]
 80266a6:	f240 725a 	movw	r2, #1882	; 0x75a
 80266aa:	4927      	ldr	r1, [pc, #156]	; (8026748 <lfs_dir_compact+0x3e0>)
 80266ac:	4828      	ldr	r0, [pc, #160]	; (8026750 <lfs_dir_compact+0x3e8>)
 80266ae:	f006 fedf 	bl	802d470 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80266b2:	68bb      	ldr	r3, [r7, #8]
 80266b4:	2200      	movs	r2, #0
 80266b6:	617a      	str	r2, [r7, #20]
 80266b8:	2201      	movs	r2, #1
 80266ba:	61ba      	str	r2, [r7, #24]
 80266bc:	f107 0214 	add.w	r2, r7, #20
 80266c0:	4611      	mov	r1, r2
 80266c2:	4618      	mov	r0, r3
 80266c4:	f7fd fb86 	bl	8023dd4 <lfs_pair_cmp>
 80266c8:	4603      	mov	r3, r0
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	d10c      	bne.n	80266e8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80266ce:	68bb      	ldr	r3, [r7, #8]
 80266d0:	685b      	ldr	r3, [r3, #4]
 80266d2:	4a1e      	ldr	r2, [pc, #120]	; (802674c <lfs_dir_compact+0x3e4>)
 80266d4:	9200      	str	r2, [sp, #0]
 80266d6:	f240 725f 	movw	r2, #1887	; 0x75f
 80266da:	491b      	ldr	r1, [pc, #108]	; (8026748 <lfs_dir_compact+0x3e0>)
 80266dc:	481d      	ldr	r0, [pc, #116]	; (8026754 <lfs_dir_compact+0x3ec>)
 80266de:	f006 fec7 	bl	802d470 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80266e2:	f06f 031b 	mvn.w	r3, #27
 80266e6:	e01e      	b.n	8026726 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80266e8:	68bb      	ldr	r3, [r7, #8]
 80266ea:	3304      	adds	r3, #4
 80266ec:	4619      	mov	r1, r3
 80266ee:	68f8      	ldr	r0, [r7, #12]
 80266f0:	f7fd fea6 	bl	8024440 <lfs_alloc>
 80266f4:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80266f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d00c      	beq.n	8026716 <lfs_dir_compact+0x3ae>
 80266fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80266fe:	f113 0f1c 	cmn.w	r3, #28
 8026702:	d106      	bne.n	8026712 <lfs_dir_compact+0x3aa>
 8026704:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026708:	f083 0301 	eor.w	r3, r3, #1
 802670c:	b2db      	uxtb	r3, r3
 802670e:	2b00      	cmp	r3, #0
 8026710:	d001      	beq.n	8026716 <lfs_dir_compact+0x3ae>
            return err;
 8026712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026714:	e007      	b.n	8026726 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8026716:	2300      	movs	r3, #0
 8026718:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 802671c:	bf00      	nop
    while (true) {
 802671e:	e64c      	b.n	80263ba <lfs_dir_compact+0x52>
        break;
 8026720:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8026722:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8026726:	4618      	mov	r0, r3
 8026728:	3768      	adds	r7, #104	; 0x68
 802672a:	46bd      	mov	sp, r7
 802672c:	bd80      	pop	{r7, pc}
 802672e:	bf00      	nop
 8026730:	080262f1 	.word	0x080262f1
 8026734:	400ffc00 	.word	0x400ffc00
 8026738:	000ffc08 	.word	0x000ffc08
 802673c:	7ffffc0c 	.word	0x7ffffc0c
 8026740:	08033588 	.word	0x08033588
 8026744:	08034728 	.word	0x08034728
 8026748:	0803341c 	.word	0x0803341c
 802674c:	08033530 	.word	0x08033530
 8026750:	080335b0 	.word	0x080335b0
 8026754:	080335d4 	.word	0x080335d4

08026758 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026758:	b590      	push	{r4, r7, lr}
 802675a:	b097      	sub	sp, #92	; 0x5c
 802675c:	af0a      	add	r7, sp, #40	; 0x28
 802675e:	60f8      	str	r0, [r7, #12]
 8026760:	60b9      	str	r1, [r7, #8]
 8026762:	607a      	str	r2, [r7, #4]
 8026764:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8026766:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802676a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 802676c:	e058      	b.n	8026820 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 802676e:	2300      	movs	r3, #0
 8026770:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8026772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026774:	b29b      	uxth	r3, r3
 8026776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026778:	b292      	uxth	r2, r2
 802677a:	4252      	negs	r2, r2
 802677c:	b292      	uxth	r2, r2
 802677e:	b212      	sxth	r2, r2
 8026780:	f107 0118 	add.w	r1, r7, #24
 8026784:	9108      	str	r1, [sp, #32]
 8026786:	4979      	ldr	r1, [pc, #484]	; (802696c <lfs_dir_splittingcompact+0x214>)
 8026788:	9107      	str	r1, [sp, #28]
 802678a:	9206      	str	r2, [sp, #24]
 802678c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026790:	9205      	str	r2, [sp, #20]
 8026792:	9304      	str	r3, [sp, #16]
 8026794:	2300      	movs	r3, #0
 8026796:	9303      	str	r3, [sp, #12]
 8026798:	4b75      	ldr	r3, [pc, #468]	; (8026970 <lfs_dir_splittingcompact+0x218>)
 802679a:	9302      	str	r3, [sp, #8]
 802679c:	683b      	ldr	r3, [r7, #0]
 802679e:	9301      	str	r3, [sp, #4]
 80267a0:	687b      	ldr	r3, [r7, #4]
 80267a2:	9300      	str	r3, [sp, #0]
 80267a4:	f04f 33ff 	mov.w	r3, #4294967295
 80267a8:	2200      	movs	r2, #0
 80267aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80267ac:	68f8      	ldr	r0, [r7, #12]
 80267ae:	f7fe f933 	bl	8024a18 <lfs_dir_traverse>
 80267b2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80267b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80267b6:	2b00      	cmp	r3, #0
 80267b8:	d001      	beq.n	80267be <lfs_dir_splittingcompact+0x66>
                return err;
 80267ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80267bc:	e0d1      	b.n	8026962 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 80267be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80267c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80267c4:	1ad3      	subs	r3, r2, r3
 80267c6:	2bfe      	cmp	r3, #254	; 0xfe
 80267c8:	d822      	bhi.n	8026810 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80267ce:	69db      	ldr	r3, [r3, #28]
 80267d0:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80267d4:	68fb      	ldr	r3, [r7, #12]
 80267d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80267d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80267da:	2b00      	cmp	r3, #0
 80267dc:	d004      	beq.n	80267e8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80267de:	68fb      	ldr	r3, [r7, #12]
 80267e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80267e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80267e4:	085b      	lsrs	r3, r3, #1
 80267e6:	e003      	b.n	80267f0 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80267e8:	68fb      	ldr	r3, [r7, #12]
 80267ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80267ec:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80267ee:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80267f0:	68fa      	ldr	r2, [r7, #12]
 80267f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80267f4:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80267f6:	4611      	mov	r1, r2
 80267f8:	4618      	mov	r0, r3
 80267fa:	f7fc fee0 	bl	80235be <lfs_alignup>
 80267fe:	4603      	mov	r3, r0
 8026800:	4619      	mov	r1, r3
 8026802:	4620      	mov	r0, r4
 8026804:	f7fc feb6 	bl	8023574 <lfs_min>
 8026808:	4602      	mov	r2, r0
 802680a:	69bb      	ldr	r3, [r7, #24]
 802680c:	429a      	cmp	r2, r3
 802680e:	d20e      	bcs.n	802682e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8026810:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026816:	1ad3      	subs	r3, r2, r3
 8026818:	085b      	lsrs	r3, r3, #1
 802681a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802681c:	4413      	add	r3, r2
 802681e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026820:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026826:	1ad3      	subs	r3, r2, r3
 8026828:	2b01      	cmp	r3, #1
 802682a:	d8a0      	bhi.n	802676e <lfs_dir_splittingcompact+0x16>
 802682c:	e000      	b.n	8026830 <lfs_dir_splittingcompact+0xd8>
                break;
 802682e:	bf00      	nop
        }

        if (split == begin) {
 8026830:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026836:	429a      	cmp	r2, r3
 8026838:	d02d      	beq.n	8026896 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 802683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802683c:	b29b      	uxth	r3, r3
 802683e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026842:	9202      	str	r2, [sp, #8]
 8026844:	9301      	str	r3, [sp, #4]
 8026846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026848:	9300      	str	r3, [sp, #0]
 802684a:	683b      	ldr	r3, [r7, #0]
 802684c:	687a      	ldr	r2, [r7, #4]
 802684e:	68b9      	ldr	r1, [r7, #8]
 8026850:	68f8      	ldr	r0, [r7, #12]
 8026852:	f7ff fce3 	bl	802621c <lfs_dir_split>
 8026856:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8026858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802685a:	2b00      	cmp	r3, #0
 802685c:	d005      	beq.n	802686a <lfs_dir_splittingcompact+0x112>
 802685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026860:	f113 0f1c 	cmn.w	r3, #28
 8026864:	d001      	beq.n	802686a <lfs_dir_splittingcompact+0x112>
            return err;
 8026866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026868:	e07b      	b.n	8026962 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 802686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802686c:	2b00      	cmp	r3, #0
 802686e:	d00e      	beq.n	802688e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8026870:	68bb      	ldr	r3, [r7, #8]
 8026872:	681a      	ldr	r2, [r3, #0]
 8026874:	68bb      	ldr	r3, [r7, #8]
 8026876:	685b      	ldr	r3, [r3, #4]
 8026878:	493e      	ldr	r1, [pc, #248]	; (8026974 <lfs_dir_splittingcompact+0x21c>)
 802687a:	9101      	str	r1, [sp, #4]
 802687c:	9300      	str	r3, [sp, #0]
 802687e:	4613      	mov	r3, r2
 8026880:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8026884:	493c      	ldr	r1, [pc, #240]	; (8026978 <lfs_dir_splittingcompact+0x220>)
 8026886:	483d      	ldr	r0, [pc, #244]	; (802697c <lfs_dir_splittingcompact+0x224>)
 8026888:	f006 fdf2 	bl	802d470 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 802688c:	e004      	b.n	8026898 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 802688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026890:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8026894:	e767      	b.n	8026766 <lfs_dir_splittingcompact+0xe>
            break;
 8026896:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8026898:	68b9      	ldr	r1, [r7, #8]
 802689a:	68f8      	ldr	r0, [r7, #12]
 802689c:	f7ff fd3d 	bl	802631a <lfs_dir_needsrelocation>
 80268a0:	4603      	mov	r3, r0
 80268a2:	2b00      	cmp	r3, #0
 80268a4:	d04e      	beq.n	8026944 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80268a6:	68bb      	ldr	r3, [r7, #8]
 80268a8:	2200      	movs	r2, #0
 80268aa:	613a      	str	r2, [r7, #16]
 80268ac:	2201      	movs	r2, #1
 80268ae:	617a      	str	r2, [r7, #20]
 80268b0:	f107 0210 	add.w	r2, r7, #16
 80268b4:	4611      	mov	r1, r2
 80268b6:	4618      	mov	r0, r3
 80268b8:	f7fd fa8c 	bl	8023dd4 <lfs_pair_cmp>
 80268bc:	4603      	mov	r3, r0
 80268be:	2b00      	cmp	r3, #0
 80268c0:	d140      	bne.n	8026944 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80268c2:	68f8      	ldr	r0, [r7, #12]
 80268c4:	f003 fe4c 	bl	802a560 <lfs_fs_rawsize>
 80268c8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80268ca:	6a3b      	ldr	r3, [r7, #32]
 80268cc:	2b00      	cmp	r3, #0
 80268ce:	da01      	bge.n	80268d4 <lfs_dir_splittingcompact+0x17c>
            return size;
 80268d0:	6a3b      	ldr	r3, [r7, #32]
 80268d2:	e046      	b.n	8026962 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80268d4:	68fb      	ldr	r3, [r7, #12]
 80268d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80268d8:	6a1b      	ldr	r3, [r3, #32]
 80268da:	085a      	lsrs	r2, r3, #1
 80268dc:	6a3b      	ldr	r3, [r7, #32]
 80268de:	429a      	cmp	r2, r3
 80268e0:	d930      	bls.n	8026944 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80268e2:	68bb      	ldr	r3, [r7, #8]
 80268e4:	689b      	ldr	r3, [r3, #8]
 80268e6:	4a23      	ldr	r2, [pc, #140]	; (8026974 <lfs_dir_splittingcompact+0x21c>)
 80268e8:	9200      	str	r2, [sp, #0]
 80268ea:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80268ee:	4922      	ldr	r1, [pc, #136]	; (8026978 <lfs_dir_splittingcompact+0x220>)
 80268f0:	4823      	ldr	r0, [pc, #140]	; (8026980 <lfs_dir_splittingcompact+0x228>)
 80268f2:	f006 fdbd 	bl	802d470 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80268f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80268fa:	9302      	str	r3, [sp, #8]
 80268fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026900:	9301      	str	r3, [sp, #4]
 8026902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026904:	9300      	str	r3, [sp, #0]
 8026906:	683b      	ldr	r3, [r7, #0]
 8026908:	687a      	ldr	r2, [r7, #4]
 802690a:	68b9      	ldr	r1, [r7, #8]
 802690c:	68f8      	ldr	r0, [r7, #12]
 802690e:	f7ff fc85 	bl	802621c <lfs_dir_split>
 8026912:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026914:	69fb      	ldr	r3, [r7, #28]
 8026916:	2b00      	cmp	r3, #0
 8026918:	d005      	beq.n	8026926 <lfs_dir_splittingcompact+0x1ce>
 802691a:	69fb      	ldr	r3, [r7, #28]
 802691c:	f113 0f1c 	cmn.w	r3, #28
 8026920:	d001      	beq.n	8026926 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026922:	69fb      	ldr	r3, [r7, #28]
 8026924:	e01d      	b.n	8026962 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026926:	69fb      	ldr	r3, [r7, #28]
 8026928:	2b00      	cmp	r3, #0
 802692a:	d007      	beq.n	802693c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 802692c:	4b11      	ldr	r3, [pc, #68]	; (8026974 <lfs_dir_splittingcompact+0x21c>)
 802692e:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8026932:	4911      	ldr	r1, [pc, #68]	; (8026978 <lfs_dir_splittingcompact+0x220>)
 8026934:	4813      	ldr	r0, [pc, #76]	; (8026984 <lfs_dir_splittingcompact+0x22c>)
 8026936:	f006 fd9b 	bl	802d470 <iprintf>
 802693a:	e003      	b.n	8026944 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 802693c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026940:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8026944:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026948:	9302      	str	r3, [sp, #8]
 802694a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802694e:	9301      	str	r3, [sp, #4]
 8026950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026952:	9300      	str	r3, [sp, #0]
 8026954:	683b      	ldr	r3, [r7, #0]
 8026956:	687a      	ldr	r2, [r7, #4]
 8026958:	68b9      	ldr	r1, [r7, #8]
 802695a:	68f8      	ldr	r0, [r7, #12]
 802695c:	f7ff fd04 	bl	8026368 <lfs_dir_compact>
 8026960:	4603      	mov	r3, r0
}
 8026962:	4618      	mov	r0, r3
 8026964:	3734      	adds	r7, #52	; 0x34
 8026966:	46bd      	mov	sp, r7
 8026968:	bd90      	pop	{r4, r7, pc}
 802696a:	bf00      	nop
 802696c:	080262c5 	.word	0x080262c5
 8026970:	400ffc00 	.word	0x400ffc00
 8026974:	08033530 	.word	0x08033530
 8026978:	0803341c 	.word	0x0803341c
 802697c:	0803360c 	.word	0x0803360c
 8026980:	0803363c 	.word	0x0803363c
 8026984:	0803366c 	.word	0x0803366c

08026988 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8026988:	b5b0      	push	{r4, r5, r7, lr}
 802698a:	b0a6      	sub	sp, #152	; 0x98
 802698c:	af0a      	add	r7, sp, #40	; 0x28
 802698e:	60f8      	str	r0, [r7, #12]
 8026990:	60b9      	str	r1, [r7, #8]
 8026992:	607a      	str	r2, [r7, #4]
 8026994:	603b      	str	r3, [r7, #0]
    int state = 0;
 8026996:	2300      	movs	r3, #0
 8026998:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 802699a:	2300      	movs	r3, #0
 802699c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 80269a0:	2300      	movs	r3, #0
 80269a2:	667b      	str	r3, [r7, #100]	; 0x64
 80269a4:	e06d      	b.n	8026a82 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80269a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80269a8:	00db      	lsls	r3, r3, #3
 80269aa:	683a      	ldr	r2, [r7, #0]
 80269ac:	4413      	add	r3, r2
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	4618      	mov	r0, r3
 80269b2:	f7fd facb 	bl	8023f4c <lfs_tag_type3>
 80269b6:	4603      	mov	r3, r0
 80269b8:	461a      	mov	r2, r3
 80269ba:	f240 4301 	movw	r3, #1025	; 0x401
 80269be:	429a      	cmp	r2, r3
 80269c0:	d106      	bne.n	80269d0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80269c2:	68bb      	ldr	r3, [r7, #8]
 80269c4:	8a9b      	ldrh	r3, [r3, #20]
 80269c6:	3301      	adds	r3, #1
 80269c8:	b29a      	uxth	r2, r3
 80269ca:	68bb      	ldr	r3, [r7, #8]
 80269cc:	829a      	strh	r2, [r3, #20]
 80269ce:	e055      	b.n	8026a7c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80269d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80269d2:	00db      	lsls	r3, r3, #3
 80269d4:	683a      	ldr	r2, [r7, #0]
 80269d6:	4413      	add	r3, r2
 80269d8:	681b      	ldr	r3, [r3, #0]
 80269da:	4618      	mov	r0, r3
 80269dc:	f7fd fab6 	bl	8023f4c <lfs_tag_type3>
 80269e0:	4603      	mov	r3, r0
 80269e2:	461a      	mov	r2, r3
 80269e4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80269e8:	429a      	cmp	r2, r3
 80269ea:	d114      	bne.n	8026a16 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80269ec:	68bb      	ldr	r3, [r7, #8]
 80269ee:	8a9b      	ldrh	r3, [r3, #20]
 80269f0:	2b00      	cmp	r3, #0
 80269f2:	d106      	bne.n	8026a02 <lfs_dir_relocatingcommit+0x7a>
 80269f4:	4ba4      	ldr	r3, [pc, #656]	; (8026c88 <lfs_dir_relocatingcommit+0x300>)
 80269f6:	4aa5      	ldr	r2, [pc, #660]	; (8026c8c <lfs_dir_relocatingcommit+0x304>)
 80269f8:	f240 71df 	movw	r1, #2015	; 0x7df
 80269fc:	48a4      	ldr	r0, [pc, #656]	; (8026c90 <lfs_dir_relocatingcommit+0x308>)
 80269fe:	f005 fcfd 	bl	802c3fc <__assert_func>
            dir->count -= 1;
 8026a02:	68bb      	ldr	r3, [r7, #8]
 8026a04:	8a9b      	ldrh	r3, [r3, #20]
 8026a06:	3b01      	subs	r3, #1
 8026a08:	b29a      	uxth	r2, r3
 8026a0a:	68bb      	ldr	r3, [r7, #8]
 8026a0c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8026a0e:	2301      	movs	r3, #1
 8026a10:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8026a14:	e032      	b.n	8026a7c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026a18:	00db      	lsls	r3, r3, #3
 8026a1a:	683a      	ldr	r2, [r7, #0]
 8026a1c:	4413      	add	r3, r2
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	4618      	mov	r0, r3
 8026a22:	f7fd fa83 	bl	8023f2c <lfs_tag_type1>
 8026a26:	4603      	mov	r3, r0
 8026a28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8026a2c:	d126      	bne.n	8026a7c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8026a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026a30:	00db      	lsls	r3, r3, #3
 8026a32:	683a      	ldr	r2, [r7, #0]
 8026a34:	4413      	add	r3, r2
 8026a36:	685b      	ldr	r3, [r3, #4]
 8026a38:	681a      	ldr	r2, [r3, #0]
 8026a3a:	68bb      	ldr	r3, [r7, #8]
 8026a3c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8026a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026a40:	00db      	lsls	r3, r3, #3
 8026a42:	683a      	ldr	r2, [r7, #0]
 8026a44:	4413      	add	r3, r2
 8026a46:	685b      	ldr	r3, [r3, #4]
 8026a48:	685a      	ldr	r2, [r3, #4]
 8026a4a:	68bb      	ldr	r3, [r7, #8]
 8026a4c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8026a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026a50:	00db      	lsls	r3, r3, #3
 8026a52:	683a      	ldr	r2, [r7, #0]
 8026a54:	4413      	add	r3, r2
 8026a56:	681b      	ldr	r3, [r3, #0]
 8026a58:	4618      	mov	r0, r3
 8026a5a:	f7fd fa87 	bl	8023f6c <lfs_tag_chunk>
 8026a5e:	4603      	mov	r3, r0
 8026a60:	f003 0301 	and.w	r3, r3, #1
 8026a64:	2b00      	cmp	r3, #0
 8026a66:	bf14      	ite	ne
 8026a68:	2301      	movne	r3, #1
 8026a6a:	2300      	moveq	r3, #0
 8026a6c:	b2da      	uxtb	r2, r3
 8026a6e:	68bb      	ldr	r3, [r7, #8]
 8026a70:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8026a72:	68bb      	ldr	r3, [r7, #8]
 8026a74:	3318      	adds	r3, #24
 8026a76:	4618      	mov	r0, r3
 8026a78:	f7fd fa03 	bl	8023e82 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8026a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026a7e:	3301      	adds	r3, #1
 8026a80:	667b      	str	r3, [r7, #100]	; 0x64
 8026a82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8026a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026a88:	429a      	cmp	r2, r3
 8026a8a:	db8c      	blt.n	80269a6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8026a8c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8026a90:	2b00      	cmp	r3, #0
 8026a92:	d02b      	beq.n	8026aec <lfs_dir_relocatingcommit+0x164>
 8026a94:	68bb      	ldr	r3, [r7, #8]
 8026a96:	8a9b      	ldrh	r3, [r3, #20]
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	d127      	bne.n	8026aec <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8026a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	d106      	bne.n	8026ab2 <lfs_dir_relocatingcommit+0x12a>
 8026aa4:	4b7b      	ldr	r3, [pc, #492]	; (8026c94 <lfs_dir_relocatingcommit+0x30c>)
 8026aa6:	4a79      	ldr	r2, [pc, #484]	; (8026c8c <lfs_dir_relocatingcommit+0x304>)
 8026aa8:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8026aac:	4878      	ldr	r0, [pc, #480]	; (8026c90 <lfs_dir_relocatingcommit+0x308>)
 8026aae:	f005 fca5 	bl	802c3fc <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8026ab2:	68bb      	ldr	r3, [r7, #8]
 8026ab4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026ab8:	4619      	mov	r1, r3
 8026aba:	68f8      	ldr	r0, [r7, #12]
 8026abc:	f003 f9c2 	bl	8029e44 <lfs_fs_pred>
 8026ac0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8026ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026ac4:	2b00      	cmp	r3, #0
 8026ac6:	d005      	beq.n	8026ad4 <lfs_dir_relocatingcommit+0x14c>
 8026ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026aca:	f113 0f02 	cmn.w	r3, #2
 8026ace:	d001      	beq.n	8026ad4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8026ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026ad2:	e204      	b.n	8026ede <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8026ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026ad6:	f113 0f02 	cmn.w	r3, #2
 8026ada:	d007      	beq.n	8026aec <lfs_dir_relocatingcommit+0x164>
 8026adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026ae0:	7ddb      	ldrb	r3, [r3, #23]
 8026ae2:	2b00      	cmp	r3, #0
 8026ae4:	d002      	beq.n	8026aec <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8026ae6:	2302      	movs	r3, #2
 8026ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8026aea:	e121      	b.n	8026d30 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8026aec:	68bb      	ldr	r3, [r7, #8]
 8026aee:	7d9b      	ldrb	r3, [r3, #22]
 8026af0:	2b00      	cmp	r3, #0
 8026af2:	f000 80fb 	beq.w	8026cec <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026af6:	68bb      	ldr	r3, [r7, #8]
 8026af8:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8026afa:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8026afc:	68bb      	ldr	r3, [r7, #8]
 8026afe:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026b00:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8026b02:	68bb      	ldr	r3, [r7, #8]
 8026b04:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8026b08:	f04f 33ff 	mov.w	r3, #4294967295
 8026b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8026b0e:	68bb      	ldr	r3, [r7, #8]
 8026b10:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026b12:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8026b14:	68fb      	ldr	r3, [r7, #12]
 8026b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d004      	beq.n	8026b28 <lfs_dir_relocatingcommit+0x1a0>
 8026b1e:	68fb      	ldr	r3, [r7, #12]
 8026b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026b24:	3b08      	subs	r3, #8
 8026b26:	e003      	b.n	8026b30 <lfs_dir_relocatingcommit+0x1a8>
 8026b28:	68fb      	ldr	r3, [r7, #12]
 8026b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b2c:	69db      	ldr	r3, [r3, #28]
 8026b2e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026b30:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026b32:	68bb      	ldr	r3, [r7, #8]
 8026b34:	3318      	adds	r3, #24
 8026b36:	4618      	mov	r0, r3
 8026b38:	f7fd f9bd 	bl	8023eb6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8026b3c:	68bb      	ldr	r3, [r7, #8]
 8026b3e:	68da      	ldr	r2, [r3, #12]
 8026b40:	68bb      	ldr	r3, [r7, #8]
 8026b42:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026b44:	68fb      	ldr	r3, [r7, #12]
 8026b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8026b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8026b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026b52:	9308      	str	r3, [sp, #32]
 8026b54:	4b50      	ldr	r3, [pc, #320]	; (8026c98 <lfs_dir_relocatingcommit+0x310>)
 8026b56:	9307      	str	r3, [sp, #28]
 8026b58:	2300      	movs	r3, #0
 8026b5a:	9306      	str	r3, [sp, #24]
 8026b5c:	2300      	movs	r3, #0
 8026b5e:	9305      	str	r3, [sp, #20]
 8026b60:	2300      	movs	r3, #0
 8026b62:	9304      	str	r3, [sp, #16]
 8026b64:	2300      	movs	r3, #0
 8026b66:	9303      	str	r3, [sp, #12]
 8026b68:	2300      	movs	r3, #0
 8026b6a:	9302      	str	r3, [sp, #8]
 8026b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026b70:	9301      	str	r3, [sp, #4]
 8026b72:	683b      	ldr	r3, [r7, #0]
 8026b74:	9300      	str	r3, [sp, #0]
 8026b76:	460b      	mov	r3, r1
 8026b78:	68b9      	ldr	r1, [r7, #8]
 8026b7a:	68f8      	ldr	r0, [r7, #12]
 8026b7c:	f7fd ff4c 	bl	8024a18 <lfs_dir_traverse>
 8026b80:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026b82:	68bb      	ldr	r3, [r7, #8]
 8026b84:	3318      	adds	r3, #24
 8026b86:	4618      	mov	r0, r3
 8026b88:	f7fd f97b 	bl	8023e82 <lfs_pair_fromle32>
        if (err) {
 8026b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b8e:	2b00      	cmp	r3, #0
 8026b90:	d00b      	beq.n	8026baa <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b94:	f113 0f1c 	cmn.w	r3, #28
 8026b98:	f000 80aa 	beq.w	8026cf0 <lfs_dir_relocatingcommit+0x368>
 8026b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b9e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026ba2:	f000 80a5 	beq.w	8026cf0 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8026ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ba8:	e199      	b.n	8026ede <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8026baa:	f107 031c 	add.w	r3, r7, #28
 8026bae:	2200      	movs	r2, #0
 8026bb0:	601a      	str	r2, [r3, #0]
 8026bb2:	605a      	str	r2, [r3, #4]
 8026bb4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026bb6:	68fb      	ldr	r3, [r7, #12]
 8026bb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8026bbc:	f107 031c 	add.w	r3, r7, #28
 8026bc0:	4611      	mov	r1, r2
 8026bc2:	4618      	mov	r0, r3
 8026bc4:	f7fd fa1d 	bl	8024002 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026bc8:	68fb      	ldr	r3, [r7, #12]
 8026bca:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026bce:	f107 031c 	add.w	r3, r7, #28
 8026bd2:	4611      	mov	r1, r2
 8026bd4:	4618      	mov	r0, r3
 8026bd6:	f7fd fa14 	bl	8024002 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8026bda:	68fb      	ldr	r3, [r7, #12]
 8026bdc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8026be0:	f107 031c 	add.w	r3, r7, #28
 8026be4:	4611      	mov	r1, r2
 8026be6:	4618      	mov	r0, r3
 8026be8:	f7fd fa0b 	bl	8024002 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026bec:	69fb      	ldr	r3, [r7, #28]
 8026bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026bf2:	f023 0303 	bic.w	r3, r3, #3
 8026bf6:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8026bf8:	f107 031c 	add.w	r3, r7, #28
 8026bfc:	4618      	mov	r0, r3
 8026bfe:	f7fd fa25 	bl	802404c <lfs_gstate_iszero>
 8026c02:	4603      	mov	r3, r0
 8026c04:	f083 0301 	eor.w	r3, r3, #1
 8026c08:	b2db      	uxtb	r3, r3
 8026c0a:	2b00      	cmp	r3, #0
 8026c0c:	d027      	beq.n	8026c5e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026c0e:	f107 031c 	add.w	r3, r7, #28
 8026c12:	461a      	mov	r2, r3
 8026c14:	68b9      	ldr	r1, [r7, #8]
 8026c16:	68f8      	ldr	r0, [r7, #12]
 8026c18:	f7fe fe68 	bl	80258ec <lfs_dir_getgstate>
 8026c1c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8026c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c20:	2b00      	cmp	r3, #0
 8026c22:	d001      	beq.n	8026c28 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8026c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c26:	e15a      	b.n	8026ede <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8026c28:	f107 031c 	add.w	r3, r7, #28
 8026c2c:	4618      	mov	r0, r3
 8026c2e:	f7fd fa9f 	bl	8024170 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8026c32:	f107 031c 	add.w	r3, r7, #28
 8026c36:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8026c3a:	4a18      	ldr	r2, [pc, #96]	; (8026c9c <lfs_dir_relocatingcommit+0x314>)
 8026c3c:	68f8      	ldr	r0, [r7, #12]
 8026c3e:	f7ff f87b 	bl	8025d38 <lfs_dir_commitattr>
 8026c42:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8026c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c46:	2b00      	cmp	r3, #0
 8026c48:	d009      	beq.n	8026c5e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c4c:	f113 0f1c 	cmn.w	r3, #28
 8026c50:	d050      	beq.n	8026cf4 <lfs_dir_relocatingcommit+0x36c>
 8026c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c54:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026c58:	d04c      	beq.n	8026cf4 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8026c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c5c:	e13f      	b.n	8026ede <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8026c5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026c62:	4619      	mov	r1, r3
 8026c64:	68f8      	ldr	r0, [r7, #12]
 8026c66:	f7ff f8e7 	bl	8025e38 <lfs_dir_commitcrc>
 8026c6a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8026c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c6e:	2b00      	cmp	r3, #0
 8026c70:	d016      	beq.n	8026ca0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c74:	f113 0f1c 	cmn.w	r3, #28
 8026c78:	d03e      	beq.n	8026cf8 <lfs_dir_relocatingcommit+0x370>
 8026c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c7c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026c80:	d03a      	beq.n	8026cf8 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8026c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026c84:	e12b      	b.n	8026ede <lfs_dir_relocatingcommit+0x556>
 8026c86:	bf00      	nop
 8026c88:	08033698 	.word	0x08033698
 8026c8c:	08034738 	.word	0x08034738
 8026c90:	0803341c 	.word	0x0803341c
 8026c94:	080336a8 	.word	0x080336a8
 8026c98:	080262f1 	.word	0x080262f1
 8026c9c:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026ca2:	68fa      	ldr	r2, [r7, #12]
 8026ca4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026ca6:	6992      	ldr	r2, [r2, #24]
 8026ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8026cac:	fb01 f202 	mul.w	r2, r1, r2
 8026cb0:	1a9b      	subs	r3, r3, r2
 8026cb2:	2b00      	cmp	r3, #0
 8026cb4:	d006      	beq.n	8026cc4 <lfs_dir_relocatingcommit+0x33c>
 8026cb6:	4b8c      	ldr	r3, [pc, #560]	; (8026ee8 <lfs_dir_relocatingcommit+0x560>)
 8026cb8:	4a8c      	ldr	r2, [pc, #560]	; (8026eec <lfs_dir_relocatingcommit+0x564>)
 8026cba:	f640 0136 	movw	r1, #2102	; 0x836
 8026cbe:	488c      	ldr	r0, [pc, #560]	; (8026ef0 <lfs_dir_relocatingcommit+0x568>)
 8026cc0:	f005 fb9c 	bl	802c3fc <__assert_func>
        dir->off = commit.off;
 8026cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026cc6:	68bb      	ldr	r3, [r7, #8]
 8026cc8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8026cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026ccc:	68bb      	ldr	r3, [r7, #8]
 8026cce:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8026cd0:	68fb      	ldr	r3, [r7, #12]
 8026cd2:	68fa      	ldr	r2, [r7, #12]
 8026cd4:	333c      	adds	r3, #60	; 0x3c
 8026cd6:	3230      	adds	r2, #48	; 0x30
 8026cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8026cda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8026cde:	68fb      	ldr	r3, [r7, #12]
 8026ce0:	3348      	adds	r3, #72	; 0x48
 8026ce2:	2200      	movs	r2, #0
 8026ce4:	601a      	str	r2, [r3, #0]
 8026ce6:	605a      	str	r2, [r3, #4]
 8026ce8:	609a      	str	r2, [r3, #8]
 8026cea:	e021      	b.n	8026d30 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8026cec:	bf00      	nop
 8026cee:	e004      	b.n	8026cfa <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026cf0:	bf00      	nop
 8026cf2:	e002      	b.n	8026cfa <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8026cf4:	bf00      	nop
 8026cf6:	e000      	b.n	8026cfa <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026cf8:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8026cfa:	68fb      	ldr	r3, [r7, #12]
 8026cfc:	3310      	adds	r3, #16
 8026cfe:	4619      	mov	r1, r3
 8026d00:	68f8      	ldr	r0, [r7, #12]
 8026d02:	f7fc fced 	bl	80236e0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8026d06:	68bb      	ldr	r3, [r7, #8]
 8026d08:	8a9b      	ldrh	r3, [r3, #20]
 8026d0a:	9302      	str	r3, [sp, #8]
 8026d0c:	2300      	movs	r3, #0
 8026d0e:	9301      	str	r3, [sp, #4]
 8026d10:	68bb      	ldr	r3, [r7, #8]
 8026d12:	9300      	str	r3, [sp, #0]
 8026d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026d18:	683a      	ldr	r2, [r7, #0]
 8026d1a:	68b9      	ldr	r1, [r7, #8]
 8026d1c:	68f8      	ldr	r0, [r7, #12]
 8026d1e:	f7ff fd1b 	bl	8026758 <lfs_dir_splittingcompact>
 8026d22:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8026d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026d26:	2b00      	cmp	r3, #0
 8026d28:	da01      	bge.n	8026d2e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8026d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026d2c:	e0d7      	b.n	8026ede <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8026d2e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8026d30:	687b      	ldr	r3, [r7, #4]
 8026d32:	681b      	ldr	r3, [r3, #0]
 8026d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8026d36:	687b      	ldr	r3, [r7, #4]
 8026d38:	3304      	adds	r3, #4
 8026d3a:	681b      	ldr	r3, [r3, #0]
 8026d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026d3e:	68fb      	ldr	r3, [r7, #12]
 8026d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d42:	663b      	str	r3, [r7, #96]	; 0x60
 8026d44:	e0c6      	b.n	8026ed4 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8026d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d48:	3308      	adds	r3, #8
 8026d4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8026d4e:	4611      	mov	r1, r2
 8026d50:	4618      	mov	r0, r3
 8026d52:	f7fd f83f 	bl	8023dd4 <lfs_pair_cmp>
 8026d56:	4603      	mov	r3, r0
 8026d58:	2b00      	cmp	r3, #0
 8026d5a:	f040 80b8 	bne.w	8026ece <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 8026d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d60:	68ba      	ldr	r2, [r7, #8]
 8026d62:	f103 0408 	add.w	r4, r3, #8
 8026d66:	4615      	mov	r5, r2
 8026d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026d6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8026d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d76:	3308      	adds	r3, #8
 8026d78:	687a      	ldr	r2, [r7, #4]
 8026d7a:	429a      	cmp	r2, r3
 8026d7c:	f000 809d 	beq.w	8026eba <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8026d80:	2300      	movs	r3, #0
 8026d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026d84:	e07b      	b.n	8026e7e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d88:	00db      	lsls	r3, r3, #3
 8026d8a:	683a      	ldr	r2, [r7, #0]
 8026d8c:	4413      	add	r3, r2
 8026d8e:	681b      	ldr	r3, [r3, #0]
 8026d90:	4618      	mov	r0, r3
 8026d92:	f7fd f8db 	bl	8023f4c <lfs_tag_type3>
 8026d96:	4603      	mov	r3, r0
 8026d98:	461a      	mov	r2, r3
 8026d9a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026d9e:	429a      	cmp	r2, r3
 8026da0:	d115      	bne.n	8026dce <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8026da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026da4:	889c      	ldrh	r4, [r3, #4]
 8026da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026da8:	00db      	lsls	r3, r3, #3
 8026daa:	683a      	ldr	r2, [r7, #0]
 8026dac:	4413      	add	r3, r2
 8026dae:	681b      	ldr	r3, [r3, #0]
 8026db0:	4618      	mov	r0, r3
 8026db2:	f7fd f8f5 	bl	8023fa0 <lfs_tag_id>
 8026db6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026db8:	429c      	cmp	r4, r3
 8026dba:	d108      	bne.n	8026dce <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8026dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8026dc2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8026dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8026dca:	60da      	str	r2, [r3, #12]
 8026dcc:	e054      	b.n	8026e78 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026dd0:	00db      	lsls	r3, r3, #3
 8026dd2:	683a      	ldr	r2, [r7, #0]
 8026dd4:	4413      	add	r3, r2
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	4618      	mov	r0, r3
 8026dda:	f7fd f8b7 	bl	8023f4c <lfs_tag_type3>
 8026dde:	4603      	mov	r3, r0
 8026de0:	461a      	mov	r2, r3
 8026de2:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026de6:	429a      	cmp	r2, r3
 8026de8:	d11c      	bne.n	8026e24 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8026dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dec:	889c      	ldrh	r4, [r3, #4]
 8026dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026df0:	00db      	lsls	r3, r3, #3
 8026df2:	683a      	ldr	r2, [r7, #0]
 8026df4:	4413      	add	r3, r2
 8026df6:	681b      	ldr	r3, [r3, #0]
 8026df8:	4618      	mov	r0, r3
 8026dfa:	f7fd f8d1 	bl	8023fa0 <lfs_tag_id>
 8026dfe:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026e00:	429c      	cmp	r4, r3
 8026e02:	d90f      	bls.n	8026e24 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8026e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e06:	889b      	ldrh	r3, [r3, #4]
 8026e08:	3b01      	subs	r3, #1
 8026e0a:	b29a      	uxth	r2, r3
 8026e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e0e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e12:	799b      	ldrb	r3, [r3, #6]
 8026e14:	2b02      	cmp	r3, #2
 8026e16:	d12f      	bne.n	8026e78 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8026e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e1c:	1e5a      	subs	r2, r3, #1
 8026e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e20:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8026e22:	e029      	b.n	8026e78 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026e26:	00db      	lsls	r3, r3, #3
 8026e28:	683a      	ldr	r2, [r7, #0]
 8026e2a:	4413      	add	r3, r2
 8026e2c:	681b      	ldr	r3, [r3, #0]
 8026e2e:	4618      	mov	r0, r3
 8026e30:	f7fd f88c 	bl	8023f4c <lfs_tag_type3>
 8026e34:	4603      	mov	r3, r0
 8026e36:	461a      	mov	r2, r3
 8026e38:	f240 4301 	movw	r3, #1025	; 0x401
 8026e3c:	429a      	cmp	r2, r3
 8026e3e:	d11b      	bne.n	8026e78 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8026e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e42:	889c      	ldrh	r4, [r3, #4]
 8026e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026e46:	00db      	lsls	r3, r3, #3
 8026e48:	683a      	ldr	r2, [r7, #0]
 8026e4a:	4413      	add	r3, r2
 8026e4c:	681b      	ldr	r3, [r3, #0]
 8026e4e:	4618      	mov	r0, r3
 8026e50:	f7fd f8a6 	bl	8023fa0 <lfs_tag_id>
 8026e54:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026e56:	429c      	cmp	r4, r3
 8026e58:	d30e      	bcc.n	8026e78 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8026e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e5c:	889b      	ldrh	r3, [r3, #4]
 8026e5e:	3301      	adds	r3, #1
 8026e60:	b29a      	uxth	r2, r3
 8026e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e64:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e68:	799b      	ldrb	r3, [r3, #6]
 8026e6a:	2b02      	cmp	r3, #2
 8026e6c:	d104      	bne.n	8026e78 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8026e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e72:	1c5a      	adds	r2, r3, #1
 8026e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e76:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8026e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026e7a:	3301      	adds	r3, #1
 8026e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026e7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8026e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026e84:	429a      	cmp	r2, r3
 8026e86:	f6ff af7e 	blt.w	8026d86 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8026e8a:	e016      	b.n	8026eba <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8026e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e8e:	889a      	ldrh	r2, [r3, #4]
 8026e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e92:	8b9b      	ldrh	r3, [r3, #28]
 8026e94:	1ad3      	subs	r3, r2, r3
 8026e96:	b29a      	uxth	r2, r3
 8026e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e9a:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8026e9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e9e:	f103 0108 	add.w	r1, r3, #8
 8026ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ea4:	3320      	adds	r3, #32
 8026ea6:	461a      	mov	r2, r3
 8026ea8:	68f8      	ldr	r0, [r7, #12]
 8026eaa:	f7fe fd03 	bl	80258b4 <lfs_dir_fetch>
 8026eae:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8026eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026eb2:	2b00      	cmp	r3, #0
 8026eb4:	d001      	beq.n	8026eba <lfs_dir_relocatingcommit+0x532>
                    return err;
 8026eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026eb8:	e011      	b.n	8026ede <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8026eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ebc:	889a      	ldrh	r2, [r3, #4]
 8026ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ec0:	8b9b      	ldrh	r3, [r3, #28]
 8026ec2:	429a      	cmp	r2, r3
 8026ec4:	d303      	bcc.n	8026ece <lfs_dir_relocatingcommit+0x546>
 8026ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ec8:	7fdb      	ldrb	r3, [r3, #31]
 8026eca:	2b00      	cmp	r3, #0
 8026ecc:	d1de      	bne.n	8026e8c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ed0:	681b      	ldr	r3, [r3, #0]
 8026ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8026ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	f47f af35 	bne.w	8026d46 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8026edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8026ede:	4618      	mov	r0, r3
 8026ee0:	3770      	adds	r7, #112	; 0x70
 8026ee2:	46bd      	mov	sp, r7
 8026ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8026ee6:	bf00      	nop
 8026ee8:	08033588 	.word	0x08033588
 8026eec:	08034738 	.word	0x08034738
 8026ef0:	0803341c 	.word	0x0803341c

08026ef4 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8026ef4:	b5b0      	push	{r4, r5, r7, lr}
 8026ef6:	b0bc      	sub	sp, #240	; 0xf0
 8026ef8:	af04      	add	r7, sp, #16
 8026efa:	60f8      	str	r0, [r7, #12]
 8026efc:	60b9      	str	r1, [r7, #8]
 8026efe:	607a      	str	r2, [r7, #4]
 8026f00:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026f02:	68fb      	ldr	r3, [r7, #12]
 8026f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026f0a:	e045      	b.n	8026f98 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026f10:	3308      	adds	r3, #8
 8026f12:	68ba      	ldr	r2, [r7, #8]
 8026f14:	429a      	cmp	r2, r3
 8026f16:	d03a      	beq.n	8026f8e <lfs_dir_orphaningcommit+0x9a>
 8026f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026f1c:	3308      	adds	r3, #8
 8026f1e:	68ba      	ldr	r2, [r7, #8]
 8026f20:	4611      	mov	r1, r2
 8026f22:	4618      	mov	r0, r3
 8026f24:	f7fc ff56 	bl	8023dd4 <lfs_pair_cmp>
 8026f28:	4603      	mov	r3, r0
 8026f2a:	2b00      	cmp	r3, #0
 8026f2c:	d12f      	bne.n	8026f8e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026f32:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026f34:	2b01      	cmp	r3, #1
 8026f36:	d12a      	bne.n	8026f8e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	d023      	beq.n	8026f8e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8026f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026f4c:	68fb      	ldr	r3, [r7, #12]
 8026f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026f52:	429a      	cmp	r2, r3
 8026f54:	d91b      	bls.n	8026f8e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8026f56:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026f5a:	68f8      	ldr	r0, [r7, #12]
 8026f5c:	f001 fa26 	bl	80283ac <lfs_file_outline>
 8026f60:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026f68:	2b00      	cmp	r3, #0
 8026f6a:	d002      	beq.n	8026f72 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8026f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026f70:	e2ad      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8026f72:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026f76:	68f8      	ldr	r0, [r7, #12]
 8026f78:	f001 fa3a 	bl	80283f0 <lfs_file_flush>
 8026f7c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026f84:	2b00      	cmp	r3, #0
 8026f86:	d002      	beq.n	8026f8e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8026f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026f8c:	e29f      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026f92:	681b      	ldr	r3, [r3, #0]
 8026f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026f9c:	2b00      	cmp	r3, #0
 8026f9e:	d1b5      	bne.n	8026f0c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8026fa0:	68bb      	ldr	r3, [r7, #8]
 8026fa2:	681b      	ldr	r3, [r3, #0]
 8026fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8026fa8:	68bb      	ldr	r3, [r7, #8]
 8026faa:	685b      	ldr	r3, [r3, #4]
 8026fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8026fb0:	68bb      	ldr	r3, [r7, #8]
 8026fb2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026fb6:	461d      	mov	r5, r3
 8026fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8026fc4:	68ba      	ldr	r2, [r7, #8]
 8026fc6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8026fca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8026fce:	9301      	str	r3, [sp, #4]
 8026fd0:	683b      	ldr	r3, [r7, #0]
 8026fd2:	9300      	str	r3, [sp, #0]
 8026fd4:	687b      	ldr	r3, [r7, #4]
 8026fd6:	68f8      	ldr	r0, [r7, #12]
 8026fd8:	f7ff fcd6 	bl	8026988 <lfs_dir_relocatingcommit>
 8026fdc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8026fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026fe4:	2b00      	cmp	r3, #0
 8026fe6:	da02      	bge.n	8026fee <lfs_dir_orphaningcommit+0xfa>
        return state;
 8026fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026fec:	e26f      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8026fee:	68bb      	ldr	r3, [r7, #8]
 8026ff0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026ff4:	4611      	mov	r1, r2
 8026ff6:	4618      	mov	r0, r3
 8026ff8:	f7fc feec 	bl	8023dd4 <lfs_pair_cmp>
 8026ffc:	4603      	mov	r3, r0
 8026ffe:	2b00      	cmp	r3, #0
 8027000:	d109      	bne.n	8027016 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8027002:	68bb      	ldr	r3, [r7, #8]
 8027004:	461d      	mov	r5, r3
 8027006:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 802700a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802700c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802700e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8027012:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8027016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802701a:	2b02      	cmp	r3, #2
 802701c:	d14a      	bne.n	80270b4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 802701e:	68fb      	ldr	r3, [r7, #12]
 8027020:	3348      	adds	r3, #72	; 0x48
 8027022:	461a      	mov	r2, r3
 8027024:	68b9      	ldr	r1, [r7, #8]
 8027026:	68f8      	ldr	r0, [r7, #12]
 8027028:	f7fe fc60 	bl	80258ec <lfs_dir_getgstate>
 802702c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8027030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8027034:	2b00      	cmp	r3, #0
 8027036:	d002      	beq.n	802703e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8027038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802703c:	e247      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 802703e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8027044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 802704a:	68bb      	ldr	r3, [r7, #8]
 802704c:	3318      	adds	r3, #24
 802704e:	4618      	mov	r0, r3
 8027050:	f7fc ff31 	bl	8023eb6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027054:	68bb      	ldr	r3, [r7, #8]
 8027056:	7ddb      	ldrb	r3, [r3, #23]
 8027058:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802705c:	051a      	lsls	r2, r3, #20
 802705e:	4bc2      	ldr	r3, [pc, #776]	; (8027368 <lfs_dir_orphaningcommit+0x474>)
 8027060:	4313      	orrs	r3, r2
 8027062:	667b      	str	r3, [r7, #100]	; 0x64
 8027064:	68bb      	ldr	r3, [r7, #8]
 8027066:	3318      	adds	r3, #24
 8027068:	66bb      	str	r3, [r7, #104]	; 0x68
 802706a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802706e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027072:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027076:	2000      	movs	r0, #0
 8027078:	9001      	str	r0, [sp, #4]
 802707a:	2001      	movs	r0, #1
 802707c:	9000      	str	r0, [sp, #0]
 802707e:	68f8      	ldr	r0, [r7, #12]
 8027080:	f7ff fc82 	bl	8026988 <lfs_dir_relocatingcommit>
 8027084:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8027088:	68bb      	ldr	r3, [r7, #8]
 802708a:	3318      	adds	r3, #24
 802708c:	4618      	mov	r0, r3
 802708e:	f7fc fef8 	bl	8023e82 <lfs_pair_fromle32>
        if (state < 0) {
 8027092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027096:	2b00      	cmp	r3, #0
 8027098:	da02      	bge.n	80270a0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 802709a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802709e:	e216      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80270a0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80270a4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80270a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80270aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80270ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80270b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80270b4:	2300      	movs	r3, #0
 80270b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80270ba:	e1fc      	b.n	80274b6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80270bc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80270c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80270c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80270c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80270cc:	4ca7      	ldr	r4, [pc, #668]	; (802736c <lfs_dir_orphaningcommit+0x478>)
 80270ce:	9403      	str	r4, [sp, #12]
 80270d0:	9102      	str	r1, [sp, #8]
 80270d2:	9201      	str	r2, [sp, #4]
 80270d4:	9300      	str	r3, [sp, #0]
 80270d6:	4603      	mov	r3, r0
 80270d8:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 80270dc:	49a4      	ldr	r1, [pc, #656]	; (8027370 <lfs_dir_orphaningcommit+0x47c>)
 80270de:	48a5      	ldr	r0, [pc, #660]	; (8027374 <lfs_dir_orphaningcommit+0x480>)
 80270e0:	f006 f9c6 	bl	802d470 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80270e4:	2300      	movs	r3, #0
 80270e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80270ea:	68fb      	ldr	r3, [r7, #12]
 80270ec:	f103 0220 	add.w	r2, r3, #32
 80270f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80270f4:	4611      	mov	r1, r2
 80270f6:	4618      	mov	r0, r3
 80270f8:	f7fc fe6c 	bl	8023dd4 <lfs_pair_cmp>
 80270fc:	4603      	mov	r3, r0
 80270fe:	2b00      	cmp	r3, #0
 8027100:	d107      	bne.n	8027112 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8027102:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027106:	68fb      	ldr	r3, [r7, #12]
 8027108:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 802710a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802710e:	68fb      	ldr	r3, [r7, #12]
 8027110:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027112:	68fb      	ldr	r3, [r7, #12]
 8027114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027116:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802711a:	e037      	b.n	802718c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 802711c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027120:	f103 0208 	add.w	r2, r3, #8
 8027124:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027128:	4611      	mov	r1, r2
 802712a:	4618      	mov	r0, r3
 802712c:	f7fc fe52 	bl	8023dd4 <lfs_pair_cmp>
 8027130:	4603      	mov	r3, r0
 8027132:	2b00      	cmp	r3, #0
 8027134:	d109      	bne.n	802714a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8027136:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802713a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802713e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8027140:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027144:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027148:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 802714a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802714e:	799b      	ldrb	r3, [r3, #6]
 8027150:	2b02      	cmp	r3, #2
 8027152:	d116      	bne.n	8027182 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8027154:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027158:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 802715c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027160:	4611      	mov	r1, r2
 8027162:	4618      	mov	r0, r3
 8027164:	f7fc fe36 	bl	8023dd4 <lfs_pair_cmp>
 8027168:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 802716a:	2b00      	cmp	r3, #0
 802716c:	d109      	bne.n	8027182 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 802716e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027172:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027176:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8027178:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802717c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027180:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027182:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027186:	681b      	ldr	r3, [r3, #0]
 8027188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802718c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027190:	2b00      	cmp	r3, #0
 8027192:	d1c3      	bne.n	802711c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8027194:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027198:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802719c:	4619      	mov	r1, r3
 802719e:	68f8      	ldr	r0, [r7, #12]
 80271a0:	f002 fed8 	bl	8029f54 <lfs_fs_parent>
 80271a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80271a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271ac:	2b00      	cmp	r3, #0
 80271ae:	da07      	bge.n	80271c0 <lfs_dir_orphaningcommit+0x2cc>
 80271b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271b4:	f113 0f02 	cmn.w	r3, #2
 80271b8:	d002      	beq.n	80271c0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80271ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271be:	e186      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80271c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271c4:	f113 0f02 	cmn.w	r3, #2
 80271c8:	bf14      	ite	ne
 80271ca:	2301      	movne	r3, #1
 80271cc:	2300      	moveq	r3, #0
 80271ce:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80271d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271d6:	f113 0f02 	cmn.w	r3, #2
 80271da:	f000 809e 	beq.w	802731a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80271de:	2101      	movs	r1, #1
 80271e0:	68f8      	ldr	r0, [r7, #12]
 80271e2:	f002 ff0f 	bl	802a004 <lfs_fs_preporphans>
 80271e6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80271ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80271ee:	2b00      	cmp	r3, #0
 80271f0:	d002      	beq.n	80271f8 <lfs_dir_orphaningcommit+0x304>
                return err;
 80271f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80271f6:	e16a      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80271f8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80271fc:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8027200:	68fb      	ldr	r3, [r7, #12]
 8027202:	3330      	adds	r3, #48	; 0x30
 8027204:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027208:	4611      	mov	r1, r2
 802720a:	4618      	mov	r0, r3
 802720c:	f7fc ff70 	bl	80240f0 <lfs_gstate_hasmovehere>
 8027210:	4603      	mov	r3, r0
 8027212:	2b00      	cmp	r3, #0
 8027214:	d02d      	beq.n	8027272 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027216:	68fb      	ldr	r3, [r7, #12]
 8027218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802721a:	4618      	mov	r0, r3
 802721c:	f7fc fec0 	bl	8023fa0 <lfs_tag_id>
 8027220:	4603      	mov	r3, r0
 8027222:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8027226:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802722a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 802722e:	484f      	ldr	r0, [pc, #316]	; (802736c <lfs_dir_orphaningcommit+0x478>)
 8027230:	9002      	str	r0, [sp, #8]
 8027232:	9201      	str	r2, [sp, #4]
 8027234:	9300      	str	r3, [sp, #0]
 8027236:	460b      	mov	r3, r1
 8027238:	f640 02ed 	movw	r2, #2285	; 0x8ed
 802723c:	494c      	ldr	r1, [pc, #304]	; (8027370 <lfs_dir_orphaningcommit+0x47c>)
 802723e:	484e      	ldr	r0, [pc, #312]	; (8027378 <lfs_dir_orphaningcommit+0x484>)
 8027240:	f006 f916 	bl	802d470 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027244:	2200      	movs	r2, #0
 8027246:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802724a:	68f8      	ldr	r0, [r7, #12]
 802724c:	f002 ff14 	bl	802a078 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8027250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027254:	4618      	mov	r0, r3
 8027256:	f7fc fea3 	bl	8023fa0 <lfs_tag_id>
 802725a:	4603      	mov	r3, r0
 802725c:	461a      	mov	r2, r3
 802725e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027262:	4293      	cmp	r3, r2
 8027264:	d205      	bcs.n	8027272 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8027266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802726a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802726e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8027272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027274:	657b      	str	r3, [r7, #84]	; 0x54
 8027276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027278:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 802727a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802727e:	4618      	mov	r0, r3
 8027280:	f7fc fe19 	bl	8023eb6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8027284:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027288:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802728c:	4293      	cmp	r3, r2
 802728e:	d007      	beq.n	80272a0 <lfs_dir_orphaningcommit+0x3ac>
 8027290:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027294:	029b      	lsls	r3, r3, #10
 8027296:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802729a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802729e:	e000      	b.n	80272a2 <lfs_dir_orphaningcommit+0x3ae>
 80272a0:	2300      	movs	r3, #0
 80272a2:	647b      	str	r3, [r7, #68]	; 0x44
 80272a4:	2300      	movs	r3, #0
 80272a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80272a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80272ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80272ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80272b2:	653b      	str	r3, [r7, #80]	; 0x50
 80272b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80272b8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80272bc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80272c0:	2000      	movs	r0, #0
 80272c2:	9001      	str	r0, [sp, #4]
 80272c4:	2002      	movs	r0, #2
 80272c6:	9000      	str	r0, [sp, #0]
 80272c8:	68f8      	ldr	r0, [r7, #12]
 80272ca:	f7ff fb5d 	bl	8026988 <lfs_dir_relocatingcommit>
 80272ce:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80272d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80272d6:	4618      	mov	r0, r3
 80272d8:	f7fc fdd3 	bl	8023e82 <lfs_pair_fromle32>
            if (state < 0) {
 80272dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80272e0:	2b00      	cmp	r3, #0
 80272e2:	da02      	bge.n	80272ea <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80272e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80272e8:	e0f1      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80272ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80272ee:	2b01      	cmp	r3, #1
 80272f0:	d113      	bne.n	802731a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80272f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80272f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80272f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80272fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 80272fe:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027302:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802730a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802730e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8027312:	2301      	movs	r3, #1
 8027314:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8027318:	e0cd      	b.n	80274b6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 802731a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802731e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027322:	4619      	mov	r1, r3
 8027324:	68f8      	ldr	r0, [r7, #12]
 8027326:	f002 fd8d 	bl	8029e44 <lfs_fs_pred>
 802732a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 802732e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027332:	2b00      	cmp	r3, #0
 8027334:	d007      	beq.n	8027346 <lfs_dir_orphaningcommit+0x452>
 8027336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802733a:	f113 0f02 	cmn.w	r3, #2
 802733e:	d002      	beq.n	8027346 <lfs_dir_orphaningcommit+0x452>
            return err;
 8027340:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027344:	e0c3      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8027346:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802734a:	2b00      	cmp	r3, #0
 802734c:	d01a      	beq.n	8027384 <lfs_dir_orphaningcommit+0x490>
 802734e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027352:	f113 0f02 	cmn.w	r3, #2
 8027356:	d115      	bne.n	8027384 <lfs_dir_orphaningcommit+0x490>
 8027358:	4b08      	ldr	r3, [pc, #32]	; (802737c <lfs_dir_orphaningcommit+0x488>)
 802735a:	4a09      	ldr	r2, [pc, #36]	; (8027380 <lfs_dir_orphaningcommit+0x48c>)
 802735c:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8027360:	4803      	ldr	r0, [pc, #12]	; (8027370 <lfs_dir_orphaningcommit+0x47c>)
 8027362:	f005 f84b 	bl	802c3fc <__assert_func>
 8027366:	bf00      	nop
 8027368:	000ffc08 	.word	0x000ffc08
 802736c:	08033530 	.word	0x08033530
 8027370:	0803341c 	.word	0x0803341c
 8027374:	080336b0 	.word	0x080336b0
 8027378:	080336ec 	.word	0x080336ec
 802737c:	08033730 	.word	0x08033730
 8027380:	08034754 	.word	0x08034754

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8027384:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027388:	f113 0f02 	cmn.w	r3, #2
 802738c:	f000 8093 	beq.w	80274b6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8027390:	68fb      	ldr	r3, [r7, #12]
 8027392:	3330      	adds	r3, #48	; 0x30
 8027394:	4618      	mov	r0, r3
 8027396:	f7fc fe76 	bl	8024086 <lfs_gstate_hasorphans>
 802739a:	4603      	mov	r3, r0
 802739c:	2b00      	cmp	r3, #0
 802739e:	d011      	beq.n	80273c4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80273a0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80273a4:	425b      	negs	r3, r3
 80273a6:	b2db      	uxtb	r3, r3
 80273a8:	b25b      	sxtb	r3, r3
 80273aa:	4619      	mov	r1, r3
 80273ac:	68f8      	ldr	r0, [r7, #12]
 80273ae:	f002 fe29 	bl	802a004 <lfs_fs_preporphans>
 80273b2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80273b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80273ba:	2b00      	cmp	r3, #0
 80273bc:	d002      	beq.n	80273c4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80273be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80273c2:	e084      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80273c4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80273c8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80273cc:	68fb      	ldr	r3, [r7, #12]
 80273ce:	3330      	adds	r3, #48	; 0x30
 80273d0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80273d4:	4611      	mov	r1, r2
 80273d6:	4618      	mov	r0, r3
 80273d8:	f7fc fe8a 	bl	80240f0 <lfs_gstate_hasmovehere>
 80273dc:	4603      	mov	r3, r0
 80273de:	2b00      	cmp	r3, #0
 80273e0:	d01c      	beq.n	802741c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80273e2:	68fb      	ldr	r3, [r7, #12]
 80273e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80273e6:	4618      	mov	r0, r3
 80273e8:	f7fc fdda 	bl	8023fa0 <lfs_tag_id>
 80273ec:	4603      	mov	r3, r0
 80273ee:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80273f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80273f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80273f6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80273fa:	4837      	ldr	r0, [pc, #220]	; (80274d8 <lfs_dir_orphaningcommit+0x5e4>)
 80273fc:	9002      	str	r0, [sp, #8]
 80273fe:	9201      	str	r2, [sp, #4]
 8027400:	9300      	str	r3, [sp, #0]
 8027402:	460b      	mov	r3, r1
 8027404:	f640 1221 	movw	r2, #2337	; 0x921
 8027408:	4934      	ldr	r1, [pc, #208]	; (80274dc <lfs_dir_orphaningcommit+0x5e8>)
 802740a:	4835      	ldr	r0, [pc, #212]	; (80274e0 <lfs_dir_orphaningcommit+0x5ec>)
 802740c:	f006 f830 	bl	802d470 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027410:	2200      	movs	r2, #0
 8027412:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8027416:	68f8      	ldr	r0, [r7, #12]
 8027418:	f002 fe2e 	bl	802a078 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 802741c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802741e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8027422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8027428:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802742c:	4618      	mov	r0, r3
 802742e:	f7fc fd42 	bl	8023eb6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027432:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027436:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802743a:	4293      	cmp	r3, r2
 802743c:	d007      	beq.n	802744e <lfs_dir_orphaningcommit+0x55a>
 802743e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027442:	029b      	lsls	r3, r3, #10
 8027444:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8027448:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802744c:	e000      	b.n	8027450 <lfs_dir_orphaningcommit+0x55c>
 802744e:	2300      	movs	r3, #0
 8027450:	627b      	str	r3, [r7, #36]	; 0x24
 8027452:	2300      	movs	r3, #0
 8027454:	62bb      	str	r3, [r7, #40]	; 0x28
 8027456:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802745a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802745e:	051a      	lsls	r2, r3, #20
 8027460:	4b20      	ldr	r3, [pc, #128]	; (80274e4 <lfs_dir_orphaningcommit+0x5f0>)
 8027462:	4313      	orrs	r3, r2
 8027464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027466:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802746a:	633b      	str	r3, [r7, #48]	; 0x30
 802746c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027470:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027474:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027478:	2000      	movs	r0, #0
 802747a:	9001      	str	r0, [sp, #4]
 802747c:	2002      	movs	r0, #2
 802747e:	9000      	str	r0, [sp, #0]
 8027480:	68f8      	ldr	r0, [r7, #12]
 8027482:	f7ff fa81 	bl	8026988 <lfs_dir_relocatingcommit>
 8027486:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 802748a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802748e:	4618      	mov	r0, r3
 8027490:	f7fc fcf7 	bl	8023e82 <lfs_pair_fromle32>
            if (state < 0) {
 8027494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027498:	2b00      	cmp	r3, #0
 802749a:	da02      	bge.n	80274a2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 802749c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80274a0:	e015      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80274a2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80274a6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80274aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80274ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80274ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80274b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80274b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80274ba:	2b01      	cmp	r3, #1
 80274bc:	f43f adfe 	beq.w	80270bc <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80274c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	d001      	beq.n	80274cc <lfs_dir_orphaningcommit+0x5d8>
 80274c8:	2303      	movs	r3, #3
 80274ca:	e000      	b.n	80274ce <lfs_dir_orphaningcommit+0x5da>
 80274cc:	2300      	movs	r3, #0
}
 80274ce:	4618      	mov	r0, r3
 80274d0:	37e0      	adds	r7, #224	; 0xe0
 80274d2:	46bd      	mov	sp, r7
 80274d4:	bdb0      	pop	{r4, r5, r7, pc}
 80274d6:	bf00      	nop
 80274d8:	08033530 	.word	0x08033530
 80274dc:	0803341c 	.word	0x0803341c
 80274e0:	080336ec 	.word	0x080336ec
 80274e4:	000ffc08 	.word	0x000ffc08

080274e8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80274e8:	b580      	push	{r7, lr}
 80274ea:	b086      	sub	sp, #24
 80274ec:	af00      	add	r7, sp, #0
 80274ee:	60f8      	str	r0, [r7, #12]
 80274f0:	60b9      	str	r1, [r7, #8]
 80274f2:	607a      	str	r2, [r7, #4]
 80274f4:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80274f6:	683b      	ldr	r3, [r7, #0]
 80274f8:	687a      	ldr	r2, [r7, #4]
 80274fa:	68b9      	ldr	r1, [r7, #8]
 80274fc:	68f8      	ldr	r0, [r7, #12]
 80274fe:	f7ff fcf9 	bl	8026ef4 <lfs_dir_orphaningcommit>
 8027502:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8027504:	697b      	ldr	r3, [r7, #20]
 8027506:	2b00      	cmp	r3, #0
 8027508:	da01      	bge.n	802750e <lfs_dir_commit+0x26>
        return orphans;
 802750a:	697b      	ldr	r3, [r7, #20]
 802750c:	e00d      	b.n	802752a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802750e:	697b      	ldr	r3, [r7, #20]
 8027510:	2b00      	cmp	r3, #0
 8027512:	d009      	beq.n	8027528 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8027514:	2100      	movs	r1, #0
 8027516:	68f8      	ldr	r0, [r7, #12]
 8027518:	f002 fe4e 	bl	802a1b8 <lfs_fs_deorphan>
 802751c:	6138      	str	r0, [r7, #16]
        if (err) {
 802751e:	693b      	ldr	r3, [r7, #16]
 8027520:	2b00      	cmp	r3, #0
 8027522:	d001      	beq.n	8027528 <lfs_dir_commit+0x40>
            return err;
 8027524:	693b      	ldr	r3, [r7, #16]
 8027526:	e000      	b.n	802752a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8027528:	2300      	movs	r3, #0
}
 802752a:	4618      	mov	r0, r3
 802752c:	3718      	adds	r7, #24
 802752e:	46bd      	mov	sp, r7
 8027530:	bd80      	pop	{r7, pc}
	...

08027534 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8027534:	b5b0      	push	{r4, r5, r7, lr}
 8027536:	b0b8      	sub	sp, #224	; 0xe0
 8027538:	af00      	add	r7, sp, #0
 802753a:	6078      	str	r0, [r7, #4]
 802753c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 802753e:	6878      	ldr	r0, [r7, #4]
 8027540:	f002 ffde 	bl	802a500 <lfs_fs_forceconsistency>
 8027544:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802754c:	2b00      	cmp	r3, #0
 802754e:	d002      	beq.n	8027556 <lfs_rawmkdir+0x22>
        return err;
 8027550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027554:	e128      	b.n	80277a8 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8027556:	687b      	ldr	r3, [r7, #4]
 8027558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802755a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 802755e:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8027562:	463a      	mov	r2, r7
 8027564:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8027568:	f103 0108 	add.w	r1, r3, #8
 802756c:	4603      	mov	r3, r0
 802756e:	6878      	ldr	r0, [r7, #4]
 8027570:	f7fe fab2 	bl	8025ad8 <lfs_dir_find>
 8027574:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8027578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802757c:	f113 0f02 	cmn.w	r3, #2
 8027580:	d105      	bne.n	802758e <lfs_rawmkdir+0x5a>
 8027582:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027586:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802758a:	4293      	cmp	r3, r2
 802758c:	d109      	bne.n	80275a2 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 802758e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027592:	2b00      	cmp	r3, #0
 8027594:	da02      	bge.n	802759c <lfs_rawmkdir+0x68>
 8027596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802759a:	e105      	b.n	80277a8 <lfs_rawmkdir+0x274>
 802759c:	f06f 0310 	mvn.w	r3, #16
 80275a0:	e102      	b.n	80277a8 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80275a2:	683b      	ldr	r3, [r7, #0]
 80275a4:	4618      	mov	r0, r3
 80275a6:	f7e8 fe7b 	bl	80102a0 <strlen>
 80275aa:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 80275ae:	687b      	ldr	r3, [r7, #4]
 80275b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80275b2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80275b6:	429a      	cmp	r2, r3
 80275b8:	d902      	bls.n	80275c0 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80275ba:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80275be:	e0f3      	b.n	80277a8 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 80275c0:	6878      	ldr	r0, [r7, #4]
 80275c2:	f7fc ff1d 	bl	8024400 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80275c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275ca:	4619      	mov	r1, r3
 80275cc:	6878      	ldr	r0, [r7, #4]
 80275ce:	f7fe fd6f 	bl	80260b0 <lfs_dir_alloc>
 80275d2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80275d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275da:	2b00      	cmp	r3, #0
 80275dc:	d002      	beq.n	80275e4 <lfs_rawmkdir+0xb0>
        return err;
 80275de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275e2:	e0e1      	b.n	80277a8 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 80275e4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80275e8:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80275ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80275ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80275f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80275f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 80275f8:	e012      	b.n	8027620 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 80275fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80275fe:	f103 0218 	add.w	r2, r3, #24
 8027602:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027606:	4619      	mov	r1, r3
 8027608:	6878      	ldr	r0, [r7, #4]
 802760a:	f7fe f953 	bl	80258b4 <lfs_dir_fetch>
 802760e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027616:	2b00      	cmp	r3, #0
 8027618:	d002      	beq.n	8027620 <lfs_rawmkdir+0xec>
            return err;
 802761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802761e:	e0c3      	b.n	80277a8 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8027620:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8027624:	2b00      	cmp	r3, #0
 8027626:	d1e8      	bne.n	80275fa <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8027628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802762c:	3318      	adds	r3, #24
 802762e:	4618      	mov	r0, r3
 8027630:	f7fc fc41 	bl	8023eb6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8027634:	4b5e      	ldr	r3, [pc, #376]	; (80277b0 <lfs_rawmkdir+0x27c>)
 8027636:	667b      	str	r3, [r7, #100]	; 0x64
 8027638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802763c:	3318      	adds	r3, #24
 802763e:	66bb      	str	r3, [r7, #104]	; 0x68
 8027640:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8027644:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8027648:	2301      	movs	r3, #1
 802764a:	6878      	ldr	r0, [r7, #4]
 802764c:	f7ff ff4c 	bl	80274e8 <lfs_dir_commit>
 8027650:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8027654:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027658:	3318      	adds	r3, #24
 802765a:	4618      	mov	r0, r3
 802765c:	f7fc fc11 	bl	8023e82 <lfs_pair_fromle32>
    if (err) {
 8027660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027664:	2b00      	cmp	r3, #0
 8027666:	d002      	beq.n	802766e <lfs_rawmkdir+0x13a>
        return err;
 8027668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802766c:	e09c      	b.n	80277a8 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 802766e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8027672:	2b00      	cmp	r3, #0
 8027674:	d04c      	beq.n	8027710 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8027676:	2101      	movs	r1, #1
 8027678:	6878      	ldr	r0, [r7, #4]
 802767a:	f002 fcc3 	bl	802a004 <lfs_fs_preporphans>
 802767e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027686:	2b00      	cmp	r3, #0
 8027688:	d002      	beq.n	8027690 <lfs_rawmkdir+0x15c>
            return err;
 802768a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802768e:	e08b      	b.n	80277a8 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8027690:	2300      	movs	r3, #0
 8027692:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 8027696:	2300      	movs	r3, #0
 8027698:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 802769c:	687b      	ldr	r3, [r7, #4]
 802769e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80276a2:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 80276a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276a8:	4618      	mov	r0, r3
 80276aa:	f7fc fc04 	bl	8023eb6 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 80276ae:	4b40      	ldr	r3, [pc, #256]	; (80277b0 <lfs_rawmkdir+0x27c>)
 80276b0:	617b      	str	r3, [r7, #20]
 80276b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276b6:	61bb      	str	r3, [r7, #24]
 80276b8:	f107 0214 	add.w	r2, r7, #20
 80276bc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80276c0:	2301      	movs	r3, #1
 80276c2:	6878      	ldr	r0, [r7, #4]
 80276c4:	f7ff ff10 	bl	80274e8 <lfs_dir_commit>
 80276c8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80276cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276d0:	4618      	mov	r0, r3
 80276d2:	f7fc fbd6 	bl	8023e82 <lfs_pair_fromle32>
        if (err) {
 80276d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80276da:	2b00      	cmp	r3, #0
 80276dc:	d006      	beq.n	80276ec <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 80276de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80276e2:	687b      	ldr	r3, [r7, #4]
 80276e4:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 80276e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80276ea:	e05d      	b.n	80277a8 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 80276ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80276f0:	687b      	ldr	r3, [r7, #4]
 80276f2:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 80276f4:	f04f 31ff 	mov.w	r1, #4294967295
 80276f8:	6878      	ldr	r0, [r7, #4]
 80276fa:	f002 fc83 	bl	802a004 <lfs_fs_preporphans>
 80276fe:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027706:	2b00      	cmp	r3, #0
 8027708:	d002      	beq.n	8027710 <lfs_rawmkdir+0x1dc>
            return err;
 802770a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802770e:	e04b      	b.n	80277a8 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8027710:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027714:	4618      	mov	r0, r3
 8027716:	f7fc fbce 	bl	8023eb6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 802771a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 802771e:	029b      	lsls	r3, r3, #10
 8027720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027728:	63fb      	str	r3, [r7, #60]	; 0x3c
 802772a:	2300      	movs	r3, #0
 802772c:	643b      	str	r3, [r7, #64]	; 0x40
 802772e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027732:	029a      	lsls	r2, r3, #10
 8027734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027738:	4313      	orrs	r3, r2
 802773a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802773e:	647b      	str	r3, [r7, #68]	; 0x44
 8027740:	683b      	ldr	r3, [r7, #0]
 8027742:	64bb      	str	r3, [r7, #72]	; 0x48
 8027744:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027748:	029b      	lsls	r3, r3, #10
 802774a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802774e:	f043 0308 	orr.w	r3, r3, #8
 8027752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027754:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027758:	653b      	str	r3, [r7, #80]	; 0x50
 802775a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 802775e:	f083 0301 	eor.w	r3, r3, #1
 8027762:	b2db      	uxtb	r3, r3
 8027764:	2b00      	cmp	r3, #0
 8027766:	d001      	beq.n	802776c <lfs_rawmkdir+0x238>
 8027768:	4b11      	ldr	r3, [pc, #68]	; (80277b0 <lfs_rawmkdir+0x27c>)
 802776a:	e000      	b.n	802776e <lfs_rawmkdir+0x23a>
 802776c:	2300      	movs	r3, #0
 802776e:	657b      	str	r3, [r7, #84]	; 0x54
 8027770:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027774:	65bb      	str	r3, [r7, #88]	; 0x58
 8027776:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802777a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802777e:	f103 0108 	add.w	r1, r3, #8
 8027782:	2304      	movs	r3, #4
 8027784:	6878      	ldr	r0, [r7, #4]
 8027786:	f7ff feaf 	bl	80274e8 <lfs_dir_commit>
 802778a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 802778e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027792:	4618      	mov	r0, r3
 8027794:	f7fc fb75 	bl	8023e82 <lfs_pair_fromle32>
    if (err) {
 8027798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802779c:	2b00      	cmp	r3, #0
 802779e:	d002      	beq.n	80277a6 <lfs_rawmkdir+0x272>
        return err;
 80277a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80277a4:	e000      	b.n	80277a8 <lfs_rawmkdir+0x274>
    }

    return 0;
 80277a6:	2300      	movs	r3, #0
}
 80277a8:	4618      	mov	r0, r3
 80277aa:	37e0      	adds	r7, #224	; 0xe0
 80277ac:	46bd      	mov	sp, r7
 80277ae:	bdb0      	pop	{r4, r5, r7, pc}
 80277b0:	600ffc08 	.word	0x600ffc08

080277b4 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80277b4:	b590      	push	{r4, r7, lr}
 80277b6:	b08d      	sub	sp, #52	; 0x34
 80277b8:	af02      	add	r7, sp, #8
 80277ba:	60f8      	str	r0, [r7, #12]
 80277bc:	60b9      	str	r1, [r7, #8]
 80277be:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80277c0:	68bb      	ldr	r3, [r7, #8]
 80277c2:	f103 0108 	add.w	r1, r3, #8
 80277c6:	1d3a      	adds	r2, r7, #4
 80277c8:	2300      	movs	r3, #0
 80277ca:	68f8      	ldr	r0, [r7, #12]
 80277cc:	f7fe f984 	bl	8025ad8 <lfs_dir_find>
 80277d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 80277d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80277d4:	2b00      	cmp	r3, #0
 80277d6:	da01      	bge.n	80277dc <lfs_dir_rawopen+0x28>
        return tag;
 80277d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80277da:	e05e      	b.n	802789a <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80277dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80277de:	4618      	mov	r0, r3
 80277e0:	f7fc fbb4 	bl	8023f4c <lfs_tag_type3>
 80277e4:	4603      	mov	r3, r0
 80277e6:	2b02      	cmp	r3, #2
 80277e8:	d002      	beq.n	80277f0 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 80277ea:	f06f 0313 	mvn.w	r3, #19
 80277ee:	e054      	b.n	802789a <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 80277f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80277f2:	4618      	mov	r0, r3
 80277f4:	f7fc fbd4 	bl	8023fa0 <lfs_tag_id>
 80277f8:	4603      	mov	r3, r0
 80277fa:	461a      	mov	r2, r3
 80277fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027800:	429a      	cmp	r2, r3
 8027802:	d106      	bne.n	8027812 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027804:	68fb      	ldr	r3, [r7, #12]
 8027806:	6a1b      	ldr	r3, [r3, #32]
 8027808:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 802780a:	68fb      	ldr	r3, [r7, #12]
 802780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802780e:	61bb      	str	r3, [r7, #24]
 8027810:	e01f      	b.n	8027852 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027812:	68bb      	ldr	r3, [r7, #8]
 8027814:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8027818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802781a:	4618      	mov	r0, r3
 802781c:	f7fc fbc0 	bl	8023fa0 <lfs_tag_id>
 8027820:	4603      	mov	r3, r0
 8027822:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027828:	f043 0308 	orr.w	r3, r3, #8
 802782c:	f107 0214 	add.w	r2, r7, #20
 8027830:	9200      	str	r2, [sp, #0]
 8027832:	4a1c      	ldr	r2, [pc, #112]	; (80278a4 <lfs_dir_rawopen+0xf0>)
 8027834:	4621      	mov	r1, r4
 8027836:	68f8      	ldr	r0, [r7, #12]
 8027838:	f7fc ff9c 	bl	8024774 <lfs_dir_get>
 802783c:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 802783e:	6a3b      	ldr	r3, [r7, #32]
 8027840:	2b00      	cmp	r3, #0
 8027842:	da01      	bge.n	8027848 <lfs_dir_rawopen+0x94>
            return res;
 8027844:	6a3b      	ldr	r3, [r7, #32]
 8027846:	e028      	b.n	802789a <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8027848:	f107 0314 	add.w	r3, r7, #20
 802784c:	4618      	mov	r0, r3
 802784e:	f7fc fb18 	bl	8023e82 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8027852:	68bb      	ldr	r3, [r7, #8]
 8027854:	3308      	adds	r3, #8
 8027856:	f107 0214 	add.w	r2, r7, #20
 802785a:	4619      	mov	r1, r3
 802785c:	68f8      	ldr	r0, [r7, #12]
 802785e:	f7fe f829 	bl	80258b4 <lfs_dir_fetch>
 8027862:	61f8      	str	r0, [r7, #28]
    if (err) {
 8027864:	69fb      	ldr	r3, [r7, #28]
 8027866:	2b00      	cmp	r3, #0
 8027868:	d001      	beq.n	802786e <lfs_dir_rawopen+0xba>
        return err;
 802786a:	69fb      	ldr	r3, [r7, #28]
 802786c:	e015      	b.n	802789a <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 802786e:	68bb      	ldr	r3, [r7, #8]
 8027870:	689a      	ldr	r2, [r3, #8]
 8027872:	68bb      	ldr	r3, [r7, #8]
 8027874:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8027876:	68bb      	ldr	r3, [r7, #8]
 8027878:	68da      	ldr	r2, [r3, #12]
 802787a:	68bb      	ldr	r3, [r7, #8]
 802787c:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 802787e:	68bb      	ldr	r3, [r7, #8]
 8027880:	2200      	movs	r2, #0
 8027882:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8027884:	68bb      	ldr	r3, [r7, #8]
 8027886:	2200      	movs	r2, #0
 8027888:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 802788a:	68bb      	ldr	r3, [r7, #8]
 802788c:	2202      	movs	r2, #2
 802788e:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8027890:	68b9      	ldr	r1, [r7, #8]
 8027892:	68f8      	ldr	r0, [r7, #12]
 8027894:	f7fc fd6b 	bl	802436e <lfs_mlist_append>

    return 0;
 8027898:	2300      	movs	r3, #0
}
 802789a:	4618      	mov	r0, r3
 802789c:	372c      	adds	r7, #44	; 0x2c
 802789e:	46bd      	mov	sp, r7
 80278a0:	bd90      	pop	{r4, r7, pc}
 80278a2:	bf00      	nop
 80278a4:	700ffc00 	.word	0x700ffc00

080278a8 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 80278a8:	b580      	push	{r7, lr}
 80278aa:	b082      	sub	sp, #8
 80278ac:	af00      	add	r7, sp, #0
 80278ae:	6078      	str	r0, [r7, #4]
 80278b0:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80278b2:	6839      	ldr	r1, [r7, #0]
 80278b4:	6878      	ldr	r0, [r7, #4]
 80278b6:	f7fc fd38 	bl	802432a <lfs_mlist_remove>

    return 0;
 80278ba:	2300      	movs	r3, #0
}
 80278bc:	4618      	mov	r0, r3
 80278be:	3708      	adds	r7, #8
 80278c0:	46bd      	mov	sp, r7
 80278c2:	bd80      	pop	{r7, pc}

080278c4 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80278c4:	b580      	push	{r7, lr}
 80278c6:	b086      	sub	sp, #24
 80278c8:	af00      	add	r7, sp, #0
 80278ca:	60f8      	str	r0, [r7, #12]
 80278cc:	60b9      	str	r1, [r7, #8]
 80278ce:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80278d0:	f44f 7284 	mov.w	r2, #264	; 0x108
 80278d4:	2100      	movs	r1, #0
 80278d6:	6878      	ldr	r0, [r7, #4]
 80278d8:	f005 ff60 	bl	802d79c <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80278dc:	68bb      	ldr	r3, [r7, #8]
 80278de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	d110      	bne.n	8027906 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 80278e4:	687b      	ldr	r3, [r7, #4]
 80278e6:	2202      	movs	r2, #2
 80278e8:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80278ea:	687b      	ldr	r3, [r7, #4]
 80278ec:	3308      	adds	r3, #8
 80278ee:	4935      	ldr	r1, [pc, #212]	; (80279c4 <lfs_dir_rawread+0x100>)
 80278f0:	461a      	mov	r2, r3
 80278f2:	460b      	mov	r3, r1
 80278f4:	881b      	ldrh	r3, [r3, #0]
 80278f6:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 80278f8:	68bb      	ldr	r3, [r7, #8]
 80278fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80278fc:	1c5a      	adds	r2, r3, #1
 80278fe:	68bb      	ldr	r3, [r7, #8]
 8027900:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027902:	2301      	movs	r3, #1
 8027904:	e05a      	b.n	80279bc <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027906:	68bb      	ldr	r3, [r7, #8]
 8027908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802790a:	2b01      	cmp	r3, #1
 802790c:	d110      	bne.n	8027930 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 802790e:	687b      	ldr	r3, [r7, #4]
 8027910:	2202      	movs	r2, #2
 8027912:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027914:	687b      	ldr	r3, [r7, #4]
 8027916:	3308      	adds	r3, #8
 8027918:	4a2b      	ldr	r2, [pc, #172]	; (80279c8 <lfs_dir_rawread+0x104>)
 802791a:	8811      	ldrh	r1, [r2, #0]
 802791c:	7892      	ldrb	r2, [r2, #2]
 802791e:	8019      	strh	r1, [r3, #0]
 8027920:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027922:	68bb      	ldr	r3, [r7, #8]
 8027924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027926:	1c5a      	adds	r2, r3, #1
 8027928:	68bb      	ldr	r3, [r7, #8]
 802792a:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 802792c:	2301      	movs	r3, #1
 802792e:	e045      	b.n	80279bc <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027930:	68bb      	ldr	r3, [r7, #8]
 8027932:	889a      	ldrh	r2, [r3, #4]
 8027934:	68bb      	ldr	r3, [r7, #8]
 8027936:	8b9b      	ldrh	r3, [r3, #28]
 8027938:	429a      	cmp	r2, r3
 802793a:	d11a      	bne.n	8027972 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 802793c:	68bb      	ldr	r3, [r7, #8]
 802793e:	7fdb      	ldrb	r3, [r3, #31]
 8027940:	f083 0301 	eor.w	r3, r3, #1
 8027944:	b2db      	uxtb	r3, r3
 8027946:	2b00      	cmp	r3, #0
 8027948:	d001      	beq.n	802794e <lfs_dir_rawread+0x8a>
                return false;
 802794a:	2300      	movs	r3, #0
 802794c:	e036      	b.n	80279bc <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 802794e:	68bb      	ldr	r3, [r7, #8]
 8027950:	f103 0108 	add.w	r1, r3, #8
 8027954:	68bb      	ldr	r3, [r7, #8]
 8027956:	3320      	adds	r3, #32
 8027958:	461a      	mov	r2, r3
 802795a:	68f8      	ldr	r0, [r7, #12]
 802795c:	f7fd ffaa 	bl	80258b4 <lfs_dir_fetch>
 8027960:	6178      	str	r0, [r7, #20]
            if (err) {
 8027962:	697b      	ldr	r3, [r7, #20]
 8027964:	2b00      	cmp	r3, #0
 8027966:	d001      	beq.n	802796c <lfs_dir_rawread+0xa8>
                return err;
 8027968:	697b      	ldr	r3, [r7, #20]
 802796a:	e027      	b.n	80279bc <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 802796c:	68bb      	ldr	r3, [r7, #8]
 802796e:	2200      	movs	r2, #0
 8027970:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8027972:	68bb      	ldr	r3, [r7, #8]
 8027974:	f103 0108 	add.w	r1, r3, #8
 8027978:	68bb      	ldr	r3, [r7, #8]
 802797a:	889a      	ldrh	r2, [r3, #4]
 802797c:	687b      	ldr	r3, [r7, #4]
 802797e:	68f8      	ldr	r0, [r7, #12]
 8027980:	f7fd ffe6 	bl	8025950 <lfs_dir_getinfo>
 8027984:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8027986:	693b      	ldr	r3, [r7, #16]
 8027988:	2b00      	cmp	r3, #0
 802798a:	d005      	beq.n	8027998 <lfs_dir_rawread+0xd4>
 802798c:	693b      	ldr	r3, [r7, #16]
 802798e:	f113 0f02 	cmn.w	r3, #2
 8027992:	d001      	beq.n	8027998 <lfs_dir_rawread+0xd4>
            return err;
 8027994:	693b      	ldr	r3, [r7, #16]
 8027996:	e011      	b.n	80279bc <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8027998:	68bb      	ldr	r3, [r7, #8]
 802799a:	889b      	ldrh	r3, [r3, #4]
 802799c:	3301      	adds	r3, #1
 802799e:	b29a      	uxth	r2, r3
 80279a0:	68bb      	ldr	r3, [r7, #8]
 80279a2:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 80279a4:	693b      	ldr	r3, [r7, #16]
 80279a6:	f113 0f02 	cmn.w	r3, #2
 80279aa:	d100      	bne.n	80279ae <lfs_dir_rawread+0xea>
    while (true) {
 80279ac:	e7c0      	b.n	8027930 <lfs_dir_rawread+0x6c>
            break;
 80279ae:	bf00      	nop
        }
    }

    dir->pos += 1;
 80279b0:	68bb      	ldr	r3, [r7, #8]
 80279b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80279b4:	1c5a      	adds	r2, r3, #1
 80279b6:	68bb      	ldr	r3, [r7, #8]
 80279b8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80279ba:	2301      	movs	r3, #1
}
 80279bc:	4618      	mov	r0, r3
 80279be:	3718      	adds	r7, #24
 80279c0:	46bd      	mov	sp, r7
 80279c2:	bd80      	pop	{r7, pc}
 80279c4:	08033580 	.word	0x08033580
 80279c8:	08033584 	.word	0x08033584

080279cc <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80279cc:	b590      	push	{r4, r7, lr}
 80279ce:	b087      	sub	sp, #28
 80279d0:	af00      	add	r7, sp, #0
 80279d2:	6078      	str	r0, [r7, #4]
 80279d4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80279d6:	683b      	ldr	r3, [r7, #0]
 80279d8:	681b      	ldr	r3, [r3, #0]
 80279da:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80279e0:	69db      	ldr	r3, [r3, #28]
 80279e2:	3b08      	subs	r3, #8
 80279e4:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80279e6:	697a      	ldr	r2, [r7, #20]
 80279e8:	693b      	ldr	r3, [r7, #16]
 80279ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80279ee:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80279f0:	68fb      	ldr	r3, [r7, #12]
 80279f2:	2b00      	cmp	r3, #0
 80279f4:	d101      	bne.n	80279fa <lfs_ctz_index+0x2e>
        return 0;
 80279f6:	2300      	movs	r3, #0
 80279f8:	e01c      	b.n	8027a34 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80279fa:	68fb      	ldr	r3, [r7, #12]
 80279fc:	3b01      	subs	r3, #1
 80279fe:	4618      	mov	r0, r3
 8027a00:	f7fb fe0e 	bl	8023620 <lfs_popc>
 8027a04:	4603      	mov	r3, r0
 8027a06:	3302      	adds	r3, #2
 8027a08:	009b      	lsls	r3, r3, #2
 8027a0a:	697a      	ldr	r2, [r7, #20]
 8027a0c:	1ad2      	subs	r2, r2, r3
 8027a0e:	693b      	ldr	r3, [r7, #16]
 8027a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8027a14:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027a16:	693b      	ldr	r3, [r7, #16]
 8027a18:	68fa      	ldr	r2, [r7, #12]
 8027a1a:	fb02 f303 	mul.w	r3, r2, r3
 8027a1e:	697a      	ldr	r2, [r7, #20]
 8027a20:	1ad4      	subs	r4, r2, r3
 8027a22:	68f8      	ldr	r0, [r7, #12]
 8027a24:	f7fb fdfc 	bl	8023620 <lfs_popc>
 8027a28:	4603      	mov	r3, r0
 8027a2a:	009b      	lsls	r3, r3, #2
 8027a2c:	1ae2      	subs	r2, r4, r3
 8027a2e:	683b      	ldr	r3, [r7, #0]
 8027a30:	601a      	str	r2, [r3, #0]
    return i;
 8027a32:	68fb      	ldr	r3, [r7, #12]
}
 8027a34:	4618      	mov	r0, r3
 8027a36:	371c      	adds	r7, #28
 8027a38:	46bd      	mov	sp, r7
 8027a3a:	bd90      	pop	{r4, r7, pc}

08027a3c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8027a3c:	b590      	push	{r4, r7, lr}
 8027a3e:	b08f      	sub	sp, #60	; 0x3c
 8027a40:	af04      	add	r7, sp, #16
 8027a42:	60f8      	str	r0, [r7, #12]
 8027a44:	60b9      	str	r1, [r7, #8]
 8027a46:	607a      	str	r2, [r7, #4]
 8027a48:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027a4c:	2b00      	cmp	r3, #0
 8027a4e:	d108      	bne.n	8027a62 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8027a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027a52:	f04f 32ff 	mov.w	r2, #4294967295
 8027a56:	601a      	str	r2, [r3, #0]
        *off = 0;
 8027a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027a5a:	2200      	movs	r2, #0
 8027a5c:	601a      	str	r2, [r3, #0]
        return 0;
 8027a5e:	2300      	movs	r3, #0
 8027a60:	e053      	b.n	8027b0a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027a64:	3b01      	subs	r3, #1
 8027a66:	617b      	str	r3, [r7, #20]
 8027a68:	f107 0314 	add.w	r3, r7, #20
 8027a6c:	4619      	mov	r1, r3
 8027a6e:	68f8      	ldr	r0, [r7, #12]
 8027a70:	f7ff ffac 	bl	80279cc <lfs_ctz_index>
 8027a74:	4603      	mov	r3, r0
 8027a76:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8027a78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8027a7c:	4619      	mov	r1, r3
 8027a7e:	68f8      	ldr	r0, [r7, #12]
 8027a80:	f7ff ffa4 	bl	80279cc <lfs_ctz_index>
 8027a84:	4603      	mov	r3, r0
 8027a86:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8027a88:	e034      	b.n	8027af4 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8027a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027a8c:	6a3b      	ldr	r3, [r7, #32]
 8027a8e:	1ad3      	subs	r3, r2, r3
 8027a90:	3301      	adds	r3, #1
 8027a92:	4618      	mov	r0, r3
 8027a94:	f7fb fda5 	bl	80235e2 <lfs_npw2>
 8027a98:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8027a9a:	1e5c      	subs	r4, r3, #1
 8027a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027a9e:	f7fb fdb0 	bl	8023602 <lfs_ctz>
 8027aa2:	4603      	mov	r3, r0
 8027aa4:	4619      	mov	r1, r3
 8027aa6:	4620      	mov	r0, r4
 8027aa8:	f7fb fd64 	bl	8023574 <lfs_min>
 8027aac:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8027aae:	683b      	ldr	r3, [r7, #0]
 8027ab0:	69fa      	ldr	r2, [r7, #28]
 8027ab2:	0092      	lsls	r2, r2, #2
 8027ab4:	2104      	movs	r1, #4
 8027ab6:	9103      	str	r1, [sp, #12]
 8027ab8:	4639      	mov	r1, r7
 8027aba:	9102      	str	r1, [sp, #8]
 8027abc:	9201      	str	r2, [sp, #4]
 8027abe:	9300      	str	r3, [sp, #0]
 8027ac0:	2304      	movs	r3, #4
 8027ac2:	687a      	ldr	r2, [r7, #4]
 8027ac4:	68b9      	ldr	r1, [r7, #8]
 8027ac6:	68f8      	ldr	r0, [r7, #12]
 8027ac8:	f7fb fe30 	bl	802372c <lfs_bd_read>
 8027acc:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8027ace:	683b      	ldr	r3, [r7, #0]
 8027ad0:	4618      	mov	r0, r3
 8027ad2:	f7fb fdbf 	bl	8023654 <lfs_fromle32>
 8027ad6:	4603      	mov	r3, r0
 8027ad8:	603b      	str	r3, [r7, #0]
        if (err) {
 8027ada:	69bb      	ldr	r3, [r7, #24]
 8027adc:	2b00      	cmp	r3, #0
 8027ade:	d001      	beq.n	8027ae4 <lfs_ctz_find+0xa8>
            return err;
 8027ae0:	69bb      	ldr	r3, [r7, #24]
 8027ae2:	e012      	b.n	8027b0a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8027ae4:	2201      	movs	r2, #1
 8027ae6:	69fb      	ldr	r3, [r7, #28]
 8027ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8027aec:	461a      	mov	r2, r3
 8027aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027af0:	1a9b      	subs	r3, r3, r2
 8027af2:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8027af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027af6:	6a3b      	ldr	r3, [r7, #32]
 8027af8:	429a      	cmp	r2, r3
 8027afa:	d8c6      	bhi.n	8027a8a <lfs_ctz_find+0x4e>
    }

    *block = head;
 8027afc:	683a      	ldr	r2, [r7, #0]
 8027afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027b00:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027b02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027b06:	601a      	str	r2, [r3, #0]
    return 0;
 8027b08:	2300      	movs	r3, #0
}
 8027b0a:	4618      	mov	r0, r3
 8027b0c:	372c      	adds	r7, #44	; 0x2c
 8027b0e:	46bd      	mov	sp, r7
 8027b10:	bd90      	pop	{r4, r7, pc}
	...

08027b14 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027b14:	b580      	push	{r7, lr}
 8027b16:	b092      	sub	sp, #72	; 0x48
 8027b18:	af04      	add	r7, sp, #16
 8027b1a:	60f8      	str	r0, [r7, #12]
 8027b1c:	60b9      	str	r1, [r7, #8]
 8027b1e:	607a      	str	r2, [r7, #4]
 8027b20:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027b22:	f107 0320 	add.w	r3, r7, #32
 8027b26:	4619      	mov	r1, r3
 8027b28:	68f8      	ldr	r0, [r7, #12]
 8027b2a:	f7fc fc89 	bl	8024440 <lfs_alloc>
 8027b2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8027b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b32:	2b00      	cmp	r3, #0
 8027b34:	d001      	beq.n	8027b3a <lfs_ctz_extend+0x26>
            return err;
 8027b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b38:	e0e9      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8027b3a:	6a3b      	ldr	r3, [r7, #32]
 8027b3c:	4619      	mov	r1, r3
 8027b3e:	68f8      	ldr	r0, [r7, #12]
 8027b40:	f7fc f8e6 	bl	8023d10 <lfs_bd_erase>
 8027b44:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8027b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b48:	2b00      	cmp	r3, #0
 8027b4a:	d006      	beq.n	8027b5a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8027b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b4e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027b52:	f000 80cb 	beq.w	8027cec <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b58:	e0d9      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8027b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027b5c:	2b00      	cmp	r3, #0
 8027b5e:	d107      	bne.n	8027b70 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027b60:	6a3a      	ldr	r2, [r7, #32]
 8027b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027b64:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027b68:	2200      	movs	r2, #0
 8027b6a:	601a      	str	r2, [r3, #0]
                return 0;
 8027b6c:	2300      	movs	r3, #0
 8027b6e:	e0ce      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027b72:	3b01      	subs	r3, #1
 8027b74:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027b76:	f107 031c 	add.w	r3, r7, #28
 8027b7a:	4619      	mov	r1, r3
 8027b7c:	68f8      	ldr	r0, [r7, #12]
 8027b7e:	f7ff ff25 	bl	80279cc <lfs_ctz_index>
 8027b82:	4603      	mov	r3, r0
 8027b84:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8027b86:	69fb      	ldr	r3, [r7, #28]
 8027b88:	3301      	adds	r3, #1
 8027b8a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8027b8c:	68fb      	ldr	r3, [r7, #12]
 8027b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027b90:	69da      	ldr	r2, [r3, #28]
 8027b92:	69fb      	ldr	r3, [r7, #28]
 8027b94:	429a      	cmp	r2, r3
 8027b96:	d044      	beq.n	8027c22 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027b98:	2300      	movs	r3, #0
 8027b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8027b9c:	e035      	b.n	8027c0a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8027b9e:	69fa      	ldr	r2, [r7, #28]
 8027ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027ba2:	1ad2      	subs	r2, r2, r3
 8027ba4:	2301      	movs	r3, #1
 8027ba6:	9303      	str	r3, [sp, #12]
 8027ba8:	f107 0317 	add.w	r3, r7, #23
 8027bac:	9302      	str	r3, [sp, #8]
 8027bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027bb0:	9301      	str	r3, [sp, #4]
 8027bb2:	683b      	ldr	r3, [r7, #0]
 8027bb4:	9300      	str	r3, [sp, #0]
 8027bb6:	4613      	mov	r3, r2
 8027bb8:	687a      	ldr	r2, [r7, #4]
 8027bba:	2100      	movs	r1, #0
 8027bbc:	68f8      	ldr	r0, [r7, #12]
 8027bbe:	f7fb fdb5 	bl	802372c <lfs_bd_read>
 8027bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8027bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bc6:	2b00      	cmp	r3, #0
 8027bc8:	d001      	beq.n	8027bce <lfs_ctz_extend+0xba>
                        return err;
 8027bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bcc:	e09f      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8027bce:	6a3b      	ldr	r3, [r7, #32]
 8027bd0:	2201      	movs	r2, #1
 8027bd2:	9203      	str	r2, [sp, #12]
 8027bd4:	f107 0217 	add.w	r2, r7, #23
 8027bd8:	9202      	str	r2, [sp, #8]
 8027bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027bdc:	9201      	str	r2, [sp, #4]
 8027bde:	9300      	str	r3, [sp, #0]
 8027be0:	2301      	movs	r3, #1
 8027be2:	687a      	ldr	r2, [r7, #4]
 8027be4:	68b9      	ldr	r1, [r7, #8]
 8027be6:	68f8      	ldr	r0, [r7, #12]
 8027be8:	f7fb ffe6 	bl	8023bb8 <lfs_bd_prog>
 8027bec:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8027bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bf0:	2b00      	cmp	r3, #0
 8027bf2:	d007      	beq.n	8027c04 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8027bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bf6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027bfa:	d101      	bne.n	8027c00 <lfs_ctz_extend+0xec>
                            goto relocate;
 8027bfc:	bf00      	nop
                    goto relocate;
 8027bfe:	e075      	b.n	8027cec <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8027c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8027c02:	e084      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027c06:	3301      	adds	r3, #1
 8027c08:	637b      	str	r3, [r7, #52]	; 0x34
 8027c0a:	69fb      	ldr	r3, [r7, #28]
 8027c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027c0e:	429a      	cmp	r2, r3
 8027c10:	d3c5      	bcc.n	8027b9e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8027c12:	6a3a      	ldr	r2, [r7, #32]
 8027c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c16:	601a      	str	r2, [r3, #0]
                *off = noff;
 8027c18:	69fa      	ldr	r2, [r7, #28]
 8027c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027c1c:	601a      	str	r2, [r3, #0]
                return 0;
 8027c1e:	2300      	movs	r3, #0
 8027c20:	e075      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8027c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027c24:	3301      	adds	r3, #1
 8027c26:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8027c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027c2a:	f7fb fcea 	bl	8023602 <lfs_ctz>
 8027c2e:	4603      	mov	r3, r0
 8027c30:	3301      	adds	r3, #1
 8027c32:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8027c34:	683b      	ldr	r3, [r7, #0]
 8027c36:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8027c38:	2300      	movs	r3, #0
 8027c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8027c3c:	e049      	b.n	8027cd2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8027c3e:	69bb      	ldr	r3, [r7, #24]
 8027c40:	4618      	mov	r0, r3
 8027c42:	f7fb fd12 	bl	802366a <lfs_tole32>
 8027c46:	4603      	mov	r3, r0
 8027c48:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8027c4a:	6a3b      	ldr	r3, [r7, #32]
 8027c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027c4e:	0092      	lsls	r2, r2, #2
 8027c50:	2104      	movs	r1, #4
 8027c52:	9103      	str	r1, [sp, #12]
 8027c54:	f107 0118 	add.w	r1, r7, #24
 8027c58:	9102      	str	r1, [sp, #8]
 8027c5a:	9201      	str	r2, [sp, #4]
 8027c5c:	9300      	str	r3, [sp, #0]
 8027c5e:	2301      	movs	r3, #1
 8027c60:	687a      	ldr	r2, [r7, #4]
 8027c62:	68b9      	ldr	r1, [r7, #8]
 8027c64:	68f8      	ldr	r0, [r7, #12]
 8027c66:	f7fb ffa7 	bl	8023bb8 <lfs_bd_prog>
 8027c6a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8027c6c:	69bb      	ldr	r3, [r7, #24]
 8027c6e:	4618      	mov	r0, r3
 8027c70:	f7fb fcf0 	bl	8023654 <lfs_fromle32>
 8027c74:	4603      	mov	r3, r0
 8027c76:	61bb      	str	r3, [r7, #24]
                if (err) {
 8027c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c7a:	2b00      	cmp	r3, #0
 8027c7c:	d005      	beq.n	8027c8a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8027c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c80:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027c84:	d034      	beq.n	8027cf0 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8027c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c88:	e041      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8027c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c8c:	3b01      	subs	r3, #1
 8027c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027c90:	429a      	cmp	r2, r3
 8027c92:	d01b      	beq.n	8027ccc <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8027c94:	69bb      	ldr	r3, [r7, #24]
 8027c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027c98:	0092      	lsls	r2, r2, #2
 8027c9a:	2104      	movs	r1, #4
 8027c9c:	9103      	str	r1, [sp, #12]
 8027c9e:	f107 0118 	add.w	r1, r7, #24
 8027ca2:	9102      	str	r1, [sp, #8]
 8027ca4:	9201      	str	r2, [sp, #4]
 8027ca6:	9300      	str	r3, [sp, #0]
 8027ca8:	2304      	movs	r3, #4
 8027caa:	687a      	ldr	r2, [r7, #4]
 8027cac:	2100      	movs	r1, #0
 8027cae:	68f8      	ldr	r0, [r7, #12]
 8027cb0:	f7fb fd3c 	bl	802372c <lfs_bd_read>
 8027cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8027cb6:	69bb      	ldr	r3, [r7, #24]
 8027cb8:	4618      	mov	r0, r3
 8027cba:	f7fb fccb 	bl	8023654 <lfs_fromle32>
 8027cbe:	4603      	mov	r3, r0
 8027cc0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8027cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cc4:	2b00      	cmp	r3, #0
 8027cc6:	d001      	beq.n	8027ccc <lfs_ctz_extend+0x1b8>
                        return err;
 8027cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cca:	e020      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8027ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027cce:	3301      	adds	r3, #1
 8027cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8027cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027cd6:	429a      	cmp	r2, r3
 8027cd8:	d3b1      	bcc.n	8027c3e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8027cda:	6a3a      	ldr	r2, [r7, #32]
 8027cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027cde:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8027ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ce2:	009a      	lsls	r2, r3, #2
 8027ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027ce6:	601a      	str	r2, [r3, #0]
            return 0;
 8027ce8:	2300      	movs	r3, #0
 8027cea:	e010      	b.n	8027d0e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8027cec:	bf00      	nop
 8027cee:	e000      	b.n	8027cf2 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8027cf0:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8027cf2:	6a3b      	ldr	r3, [r7, #32]
 8027cf4:	4a08      	ldr	r2, [pc, #32]	; (8027d18 <lfs_ctz_extend+0x204>)
 8027cf6:	9200      	str	r2, [sp, #0]
 8027cf8:	f640 22da 	movw	r2, #2778	; 0xada
 8027cfc:	4907      	ldr	r1, [pc, #28]	; (8027d1c <lfs_ctz_extend+0x208>)
 8027cfe:	4808      	ldr	r0, [pc, #32]	; (8027d20 <lfs_ctz_extend+0x20c>)
 8027d00:	f005 fbb6 	bl	802d470 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8027d04:	68b9      	ldr	r1, [r7, #8]
 8027d06:	68f8      	ldr	r0, [r7, #12]
 8027d08:	f7fb fcea 	bl	80236e0 <lfs_cache_drop>
    while (true) {
 8027d0c:	e709      	b.n	8027b22 <lfs_ctz_extend+0xe>
    }
}
 8027d0e:	4618      	mov	r0, r3
 8027d10:	3738      	adds	r7, #56	; 0x38
 8027d12:	46bd      	mov	sp, r7
 8027d14:	bd80      	pop	{r7, pc}
 8027d16:	bf00      	nop
 8027d18:	08033530 	.word	0x08033530
 8027d1c:	0803341c 	.word	0x0803341c
 8027d20:	080335b0 	.word	0x080335b0

08027d24 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8027d24:	b580      	push	{r7, lr}
 8027d26:	b090      	sub	sp, #64	; 0x40
 8027d28:	af04      	add	r7, sp, #16
 8027d2a:	60f8      	str	r0, [r7, #12]
 8027d2c:	60b9      	str	r1, [r7, #8]
 8027d2e:	607a      	str	r2, [r7, #4]
 8027d30:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d34:	2b00      	cmp	r3, #0
 8027d36:	d101      	bne.n	8027d3c <lfs_ctz_traverse+0x18>
        return 0;
 8027d38:	2300      	movs	r3, #0
 8027d3a:	e06b      	b.n	8027e14 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d3e:	3b01      	subs	r3, #1
 8027d40:	61fb      	str	r3, [r7, #28]
 8027d42:	f107 031c 	add.w	r3, r7, #28
 8027d46:	4619      	mov	r1, r3
 8027d48:	68f8      	ldr	r0, [r7, #12]
 8027d4a:	f7ff fe3f 	bl	80279cc <lfs_ctz_index>
 8027d4e:	4603      	mov	r3, r0
 8027d50:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8027d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027d54:	6839      	ldr	r1, [r7, #0]
 8027d56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027d58:	4798      	blx	r3
 8027d5a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8027d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d5e:	2b00      	cmp	r3, #0
 8027d60:	d001      	beq.n	8027d66 <lfs_ctz_traverse+0x42>
            return err;
 8027d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d64:	e056      	b.n	8027e14 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8027d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027d68:	2b00      	cmp	r3, #0
 8027d6a:	d101      	bne.n	8027d70 <lfs_ctz_traverse+0x4c>
            return 0;
 8027d6c:	2300      	movs	r3, #0
 8027d6e:	e051      	b.n	8027e14 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8027d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027d72:	f003 0301 	and.w	r3, r3, #1
 8027d76:	f1c3 0302 	rsb	r3, r3, #2
 8027d7a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8027d7c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8027d7e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8027d80:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8027d82:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8027d84:	9303      	str	r3, [sp, #12]
 8027d86:	f107 0314 	add.w	r3, r7, #20
 8027d8a:	9302      	str	r3, [sp, #8]
 8027d8c:	2300      	movs	r3, #0
 8027d8e:	9301      	str	r3, [sp, #4]
 8027d90:	683b      	ldr	r3, [r7, #0]
 8027d92:	9300      	str	r3, [sp, #0]
 8027d94:	4613      	mov	r3, r2
 8027d96:	687a      	ldr	r2, [r7, #4]
 8027d98:	68b9      	ldr	r1, [r7, #8]
 8027d9a:	68f8      	ldr	r0, [r7, #12]
 8027d9c:	f7fb fcc6 	bl	802372c <lfs_bd_read>
 8027da0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8027da2:	697b      	ldr	r3, [r7, #20]
 8027da4:	4618      	mov	r0, r3
 8027da6:	f7fb fc55 	bl	8023654 <lfs_fromle32>
 8027daa:	4603      	mov	r3, r0
 8027dac:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8027dae:	69bb      	ldr	r3, [r7, #24]
 8027db0:	4618      	mov	r0, r3
 8027db2:	f7fb fc4f 	bl	8023654 <lfs_fromle32>
 8027db6:	4603      	mov	r3, r0
 8027db8:	61bb      	str	r3, [r7, #24]
        if (err) {
 8027dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	d001      	beq.n	8027dc4 <lfs_ctz_traverse+0xa0>
            return err;
 8027dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027dc2:	e027      	b.n	8027e14 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8027dc4:	2300      	movs	r3, #0
 8027dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8027dc8:	e012      	b.n	8027df0 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8027dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027dcc:	009b      	lsls	r3, r3, #2
 8027dce:	3330      	adds	r3, #48	; 0x30
 8027dd0:	443b      	add	r3, r7
 8027dd2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8027dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027dd8:	4611      	mov	r1, r2
 8027dda:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027ddc:	4798      	blx	r3
 8027dde:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8027de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027de2:	2b00      	cmp	r3, #0
 8027de4:	d001      	beq.n	8027dea <lfs_ctz_traverse+0xc6>
                return err;
 8027de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027de8:	e014      	b.n	8027e14 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8027dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027dec:	3301      	adds	r3, #1
 8027dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8027df0:	6a3b      	ldr	r3, [r7, #32]
 8027df2:	3b01      	subs	r3, #1
 8027df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027df6:	429a      	cmp	r2, r3
 8027df8:	dbe7      	blt.n	8027dca <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8027dfa:	6a3b      	ldr	r3, [r7, #32]
 8027dfc:	3b01      	subs	r3, #1
 8027dfe:	009b      	lsls	r3, r3, #2
 8027e00:	3330      	adds	r3, #48	; 0x30
 8027e02:	443b      	add	r3, r7
 8027e04:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8027e08:	603b      	str	r3, [r7, #0]
        index -= count;
 8027e0a:	6a3b      	ldr	r3, [r7, #32]
 8027e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027e0e:	1ad3      	subs	r3, r2, r3
 8027e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8027e12:	e79e      	b.n	8027d52 <lfs_ctz_traverse+0x2e>
    }
}
 8027e14:	4618      	mov	r0, r3
 8027e16:	3730      	adds	r7, #48	; 0x30
 8027e18:	46bd      	mov	sp, r7
 8027e1a:	bd80      	pop	{r7, pc}

08027e1c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8027e1c:	b5b0      	push	{r4, r5, r7, lr}
 8027e1e:	b09a      	sub	sp, #104	; 0x68
 8027e20:	af02      	add	r7, sp, #8
 8027e22:	60f8      	str	r0, [r7, #12]
 8027e24:	60b9      	str	r1, [r7, #8]
 8027e26:	607a      	str	r2, [r7, #4]
 8027e28:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027e2a:	683b      	ldr	r3, [r7, #0]
 8027e2c:	f003 0302 	and.w	r3, r3, #2
 8027e30:	2b00      	cmp	r3, #0
 8027e32:	d008      	beq.n	8027e46 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8027e34:	68f8      	ldr	r0, [r7, #12]
 8027e36:	f002 fb63 	bl	802a500 <lfs_fs_forceconsistency>
 8027e3a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8027e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027e3e:	2b00      	cmp	r3, #0
 8027e40:	d001      	beq.n	8027e46 <lfs_file_rawopencfg+0x2a>
            return err;
 8027e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027e44:	e1b0      	b.n	80281a8 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8027e46:	68bb      	ldr	r3, [r7, #8]
 8027e48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8027e4a:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8027e4c:	683a      	ldr	r2, [r7, #0]
 8027e4e:	68bb      	ldr	r3, [r7, #8]
 8027e50:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8027e52:	68bb      	ldr	r3, [r7, #8]
 8027e54:	2200      	movs	r2, #0
 8027e56:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8027e58:	68bb      	ldr	r3, [r7, #8]
 8027e5a:	2200      	movs	r2, #0
 8027e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8027e5e:	68bb      	ldr	r3, [r7, #8]
 8027e60:	2200      	movs	r2, #0
 8027e62:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8027e64:	68bb      	ldr	r3, [r7, #8]
 8027e66:	f103 0108 	add.w	r1, r3, #8
 8027e6a:	68bb      	ldr	r3, [r7, #8]
 8027e6c:	3304      	adds	r3, #4
 8027e6e:	1d3a      	adds	r2, r7, #4
 8027e70:	68f8      	ldr	r0, [r7, #12]
 8027e72:	f7fd fe31 	bl	8025ad8 <lfs_dir_find>
 8027e76:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8027e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027e7a:	2b00      	cmp	r3, #0
 8027e7c:	da0c      	bge.n	8027e98 <lfs_file_rawopencfg+0x7c>
 8027e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027e80:	f113 0f02 	cmn.w	r3, #2
 8027e84:	d105      	bne.n	8027e92 <lfs_file_rawopencfg+0x76>
 8027e86:	68bb      	ldr	r3, [r7, #8]
 8027e88:	889b      	ldrh	r3, [r3, #4]
 8027e8a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8027e8e:	4293      	cmp	r3, r2
 8027e90:	d102      	bne.n	8027e98 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8027e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027e94:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027e96:	e17c      	b.n	8028192 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8027e98:	68bb      	ldr	r3, [r7, #8]
 8027e9a:	2201      	movs	r2, #1
 8027e9c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8027e9e:	68b9      	ldr	r1, [r7, #8]
 8027ea0:	68f8      	ldr	r0, [r7, #12]
 8027ea2:	f7fc fa64 	bl	802436e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8027ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027ea8:	f113 0f02 	cmn.w	r3, #2
 8027eac:	d14e      	bne.n	8027f4c <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8027eae:	683b      	ldr	r3, [r7, #0]
 8027eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	d103      	bne.n	8027ec0 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8027eb8:	f06f 0301 	mvn.w	r3, #1
 8027ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027ebe:	e168      	b.n	8028192 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8027ec0:	687b      	ldr	r3, [r7, #4]
 8027ec2:	4618      	mov	r0, r3
 8027ec4:	f7e8 f9ec 	bl	80102a0 <strlen>
 8027ec8:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8027eca:	68fb      	ldr	r3, [r7, #12]
 8027ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027ed0:	429a      	cmp	r2, r3
 8027ed2:	d903      	bls.n	8027edc <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8027ed4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027eda:	e15a      	b.n	8028192 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8027edc:	68bb      	ldr	r3, [r7, #8]
 8027ede:	f103 0108 	add.w	r1, r3, #8
 8027ee2:	68bb      	ldr	r3, [r7, #8]
 8027ee4:	889b      	ldrh	r3, [r3, #4]
 8027ee6:	029b      	lsls	r3, r3, #10
 8027ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027ef2:	2300      	movs	r3, #0
 8027ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8027ef6:	68bb      	ldr	r3, [r7, #8]
 8027ef8:	889b      	ldrh	r3, [r3, #4]
 8027efa:	029a      	lsls	r2, r3, #10
 8027efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027efe:	4313      	orrs	r3, r2
 8027f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027f04:	637b      	str	r3, [r7, #52]	; 0x34
 8027f06:	687b      	ldr	r3, [r7, #4]
 8027f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8027f0a:	68bb      	ldr	r3, [r7, #8]
 8027f0c:	889b      	ldrh	r3, [r3, #4]
 8027f0e:	029b      	lsls	r3, r3, #10
 8027f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027f1a:	2300      	movs	r3, #0
 8027f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8027f1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8027f22:	2303      	movs	r3, #3
 8027f24:	68f8      	ldr	r0, [r7, #12]
 8027f26:	f7ff fadf 	bl	80274e8 <lfs_dir_commit>
 8027f2a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8027f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027f2e:	f113 0f1c 	cmn.w	r3, #28
 8027f32:	d001      	beq.n	8027f38 <lfs_file_rawopencfg+0x11c>
 8027f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027f36:	e001      	b.n	8027f3c <lfs_file_rawopencfg+0x120>
 8027f38:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8027f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027f40:	2b00      	cmp	r3, #0
 8027f42:	f040 8125 	bne.w	8028190 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8027f46:	4b9a      	ldr	r3, [pc, #616]	; (80281b0 <lfs_file_rawopencfg+0x394>)
 8027f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8027f4a:	e044      	b.n	8027fd6 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8027f4c:	683b      	ldr	r3, [r7, #0]
 8027f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027f52:	2b00      	cmp	r3, #0
 8027f54:	d003      	beq.n	8027f5e <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8027f56:	f06f 0310 	mvn.w	r3, #16
 8027f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027f5c:	e119      	b.n	8028192 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8027f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027f60:	4618      	mov	r0, r3
 8027f62:	f7fb fff3 	bl	8023f4c <lfs_tag_type3>
 8027f66:	4603      	mov	r3, r0
 8027f68:	2b01      	cmp	r3, #1
 8027f6a:	d003      	beq.n	8027f74 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8027f6c:	f06f 0314 	mvn.w	r3, #20
 8027f70:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027f72:	e10e      	b.n	8028192 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8027f74:	683b      	ldr	r3, [r7, #0]
 8027f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027f7a:	2b00      	cmp	r3, #0
 8027f7c:	d00e      	beq.n	8027f9c <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8027f7e:	68bb      	ldr	r3, [r7, #8]
 8027f80:	889b      	ldrh	r3, [r3, #4]
 8027f82:	029b      	lsls	r3, r3, #10
 8027f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027f8c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8027f8e:	68bb      	ldr	r3, [r7, #8]
 8027f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027f96:	68bb      	ldr	r3, [r7, #8]
 8027f98:	631a      	str	r2, [r3, #48]	; 0x30
 8027f9a:	e01c      	b.n	8027fd6 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027f9c:	68bb      	ldr	r3, [r7, #8]
 8027f9e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027fa2:	68bb      	ldr	r3, [r7, #8]
 8027fa4:	889b      	ldrh	r3, [r3, #4]
 8027fa6:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027fac:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027fb0:	68ba      	ldr	r2, [r7, #8]
 8027fb2:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027fb4:	9200      	str	r2, [sp, #0]
 8027fb6:	4a7f      	ldr	r2, [pc, #508]	; (80281b4 <lfs_file_rawopencfg+0x398>)
 8027fb8:	68f8      	ldr	r0, [r7, #12]
 8027fba:	f7fc fbdb 	bl	8024774 <lfs_dir_get>
 8027fbe:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8027fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027fc2:	2b00      	cmp	r3, #0
 8027fc4:	da02      	bge.n	8027fcc <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8027fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027fca:	e0e2      	b.n	8028192 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8027fcc:	68bb      	ldr	r3, [r7, #8]
 8027fce:	3328      	adds	r3, #40	; 0x28
 8027fd0:	4618      	mov	r0, r3
 8027fd2:	f7fc f8ed 	bl	80241b0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8027fd6:	2300      	movs	r3, #0
 8027fd8:	657b      	str	r3, [r7, #84]	; 0x54
 8027fda:	e063      	b.n	80280a4 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8027fdc:	68bb      	ldr	r3, [r7, #8]
 8027fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027fe0:	f003 0301 	and.w	r3, r3, #1
 8027fe4:	2b00      	cmp	r3, #0
 8027fe6:	d03c      	beq.n	8028062 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027fe8:	68bb      	ldr	r3, [r7, #8]
 8027fea:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8027fee:	68bb      	ldr	r3, [r7, #8]
 8027ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027ff2:	6859      	ldr	r1, [r3, #4]
 8027ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027ff6:	4613      	mov	r3, r2
 8027ff8:	005b      	lsls	r3, r3, #1
 8027ffa:	4413      	add	r3, r2
 8027ffc:	009b      	lsls	r3, r3, #2
 8027ffe:	440b      	add	r3, r1
 8028000:	781b      	ldrb	r3, [r3, #0]
 8028002:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8028006:	051a      	lsls	r2, r3, #20
 8028008:	68bb      	ldr	r3, [r7, #8]
 802800a:	889b      	ldrh	r3, [r3, #4]
 802800c:	029b      	lsls	r3, r3, #10
 802800e:	ea42 0103 	orr.w	r1, r2, r3
 8028012:	68bb      	ldr	r3, [r7, #8]
 8028014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028016:	6858      	ldr	r0, [r3, #4]
 8028018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802801a:	4613      	mov	r3, r2
 802801c:	005b      	lsls	r3, r3, #1
 802801e:	4413      	add	r3, r2
 8028020:	009b      	lsls	r3, r3, #2
 8028022:	4403      	add	r3, r0
 8028024:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028026:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 802802a:	68bb      	ldr	r3, [r7, #8]
 802802c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802802e:	6859      	ldr	r1, [r3, #4]
 8028030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028032:	4613      	mov	r3, r2
 8028034:	005b      	lsls	r3, r3, #1
 8028036:	4413      	add	r3, r2
 8028038:	009b      	lsls	r3, r3, #2
 802803a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802803c:	685b      	ldr	r3, [r3, #4]
 802803e:	9300      	str	r3, [sp, #0]
 8028040:	4603      	mov	r3, r0
 8028042:	4a5d      	ldr	r2, [pc, #372]	; (80281b8 <lfs_file_rawopencfg+0x39c>)
 8028044:	4621      	mov	r1, r4
 8028046:	68f8      	ldr	r0, [r7, #12]
 8028048:	f7fc fb94 	bl	8024774 <lfs_dir_get>
 802804c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 802804e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028050:	2b00      	cmp	r3, #0
 8028052:	da06      	bge.n	8028062 <lfs_file_rawopencfg+0x246>
 8028054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028056:	f113 0f02 	cmn.w	r3, #2
 802805a:	d002      	beq.n	8028062 <lfs_file_rawopencfg+0x246>
                err = res;
 802805c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802805e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8028060:	e097      	b.n	8028192 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8028062:	68bb      	ldr	r3, [r7, #8]
 8028064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028066:	f003 0302 	and.w	r3, r3, #2
 802806a:	2b00      	cmp	r3, #0
 802806c:	d017      	beq.n	802809e <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 802806e:	68bb      	ldr	r3, [r7, #8]
 8028070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028072:	6859      	ldr	r1, [r3, #4]
 8028074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028076:	4613      	mov	r3, r2
 8028078:	005b      	lsls	r3, r3, #1
 802807a:	4413      	add	r3, r2
 802807c:	009b      	lsls	r3, r3, #2
 802807e:	440b      	add	r3, r1
 8028080:	689a      	ldr	r2, [r3, #8]
 8028082:	68fb      	ldr	r3, [r7, #12]
 8028084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028086:	429a      	cmp	r2, r3
 8028088:	d903      	bls.n	8028092 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 802808a:	f06f 031b 	mvn.w	r3, #27
 802808e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8028090:	e07f      	b.n	8028192 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8028092:	68bb      	ldr	r3, [r7, #8]
 8028094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802809a:	68bb      	ldr	r3, [r7, #8]
 802809c:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 802809e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80280a0:	3301      	adds	r3, #1
 80280a2:	657b      	str	r3, [r7, #84]	; 0x54
 80280a4:	68bb      	ldr	r3, [r7, #8]
 80280a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80280a8:	689b      	ldr	r3, [r3, #8]
 80280aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80280ac:	429a      	cmp	r2, r3
 80280ae:	d395      	bcc.n	8027fdc <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80280b0:	68bb      	ldr	r3, [r7, #8]
 80280b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80280b4:	681b      	ldr	r3, [r3, #0]
 80280b6:	2b00      	cmp	r3, #0
 80280b8:	d005      	beq.n	80280c6 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80280ba:	68bb      	ldr	r3, [r7, #8]
 80280bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80280be:	681a      	ldr	r2, [r3, #0]
 80280c0:	68bb      	ldr	r3, [r7, #8]
 80280c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80280c4:	e010      	b.n	80280e8 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80280c6:	68fb      	ldr	r3, [r7, #12]
 80280c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80280ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80280cc:	4618      	mov	r0, r3
 80280ce:	f7fb faf0 	bl	80236b2 <lfs_malloc>
 80280d2:	4602      	mov	r2, r0
 80280d4:	68bb      	ldr	r3, [r7, #8]
 80280d6:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80280d8:	68bb      	ldr	r3, [r7, #8]
 80280da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80280dc:	2b00      	cmp	r3, #0
 80280de:	d103      	bne.n	80280e8 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 80280e0:	f06f 030b 	mvn.w	r3, #11
 80280e4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80280e6:	e054      	b.n	8028192 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80280e8:	68bb      	ldr	r3, [r7, #8]
 80280ea:	3340      	adds	r3, #64	; 0x40
 80280ec:	4619      	mov	r1, r3
 80280ee:	68f8      	ldr	r0, [r7, #12]
 80280f0:	f7fb fb05 	bl	80236fe <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80280f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80280f6:	4618      	mov	r0, r3
 80280f8:	f7fb ff28 	bl	8023f4c <lfs_tag_type3>
 80280fc:	4603      	mov	r3, r0
 80280fe:	461a      	mov	r2, r3
 8028100:	f240 2301 	movw	r3, #513	; 0x201
 8028104:	429a      	cmp	r2, r3
 8028106:	d141      	bne.n	802818c <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8028108:	68bb      	ldr	r3, [r7, #8]
 802810a:	f06f 0201 	mvn.w	r2, #1
 802810e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8028110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028112:	4618      	mov	r0, r3
 8028114:	f7fb ff54 	bl	8023fc0 <lfs_tag_size>
 8028118:	4602      	mov	r2, r0
 802811a:	68bb      	ldr	r3, [r7, #8]
 802811c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 802811e:	68bb      	ldr	r3, [r7, #8]
 8028120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028122:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8028126:	68bb      	ldr	r3, [r7, #8]
 8028128:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 802812a:	68bb      	ldr	r3, [r7, #8]
 802812c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802812e:	68bb      	ldr	r3, [r7, #8]
 8028130:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8028132:	68bb      	ldr	r3, [r7, #8]
 8028134:	2200      	movs	r2, #0
 8028136:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8028138:	68fb      	ldr	r3, [r7, #12]
 802813a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802813c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802813e:	68bb      	ldr	r3, [r7, #8]
 8028140:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8028142:	68bb      	ldr	r3, [r7, #8]
 8028144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028146:	2b00      	cmp	r3, #0
 8028148:	d020      	beq.n	802818c <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802814a:	68bb      	ldr	r3, [r7, #8]
 802814c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8028150:	68bb      	ldr	r3, [r7, #8]
 8028152:	889b      	ldrh	r3, [r3, #4]
 8028154:	029c      	lsls	r4, r3, #10
 8028156:	68bb      	ldr	r3, [r7, #8]
 8028158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802815a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 802815e:	4618      	mov	r0, r3
 8028160:	f7fb fa08 	bl	8023574 <lfs_min>
 8028164:	4603      	mov	r3, r0
 8028166:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028168:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 802816c:	68bb      	ldr	r3, [r7, #8]
 802816e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028170:	9300      	str	r3, [sp, #0]
 8028172:	4613      	mov	r3, r2
 8028174:	4a0f      	ldr	r2, [pc, #60]	; (80281b4 <lfs_file_rawopencfg+0x398>)
 8028176:	4629      	mov	r1, r5
 8028178:	68f8      	ldr	r0, [r7, #12]
 802817a:	f7fc fafb 	bl	8024774 <lfs_dir_get>
 802817e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8028180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028182:	2b00      	cmp	r3, #0
 8028184:	da02      	bge.n	802818c <lfs_file_rawopencfg+0x370>
                err = res;
 8028186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028188:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 802818a:	e002      	b.n	8028192 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 802818c:	2300      	movs	r3, #0
 802818e:	e00b      	b.n	80281a8 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8028190:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8028192:	68bb      	ldr	r3, [r7, #8]
 8028194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028196:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802819a:	68bb      	ldr	r3, [r7, #8]
 802819c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 802819e:	68b9      	ldr	r1, [r7, #8]
 80281a0:	68f8      	ldr	r0, [r7, #12]
 80281a2:	f000 f80b 	bl	80281bc <lfs_file_rawclose>
    return err;
 80281a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80281a8:	4618      	mov	r0, r3
 80281aa:	3760      	adds	r7, #96	; 0x60
 80281ac:	46bd      	mov	sp, r7
 80281ae:	bdb0      	pop	{r4, r5, r7, pc}
 80281b0:	20100000 	.word	0x20100000
 80281b4:	700ffc00 	.word	0x700ffc00
 80281b8:	7ffffc00 	.word	0x7ffffc00

080281bc <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80281bc:	b580      	push	{r7, lr}
 80281be:	b084      	sub	sp, #16
 80281c0:	af00      	add	r7, sp, #0
 80281c2:	6078      	str	r0, [r7, #4]
 80281c4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80281c6:	6839      	ldr	r1, [r7, #0]
 80281c8:	6878      	ldr	r0, [r7, #4]
 80281ca:	f000 f9e5 	bl	8028598 <lfs_file_rawsync>
 80281ce:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80281d0:	6839      	ldr	r1, [r7, #0]
 80281d2:	6878      	ldr	r0, [r7, #4]
 80281d4:	f7fc f8a9 	bl	802432a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80281d8:	683b      	ldr	r3, [r7, #0]
 80281da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80281dc:	681b      	ldr	r3, [r3, #0]
 80281de:	2b00      	cmp	r3, #0
 80281e0:	d104      	bne.n	80281ec <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80281e2:	683b      	ldr	r3, [r7, #0]
 80281e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80281e6:	4618      	mov	r0, r3
 80281e8:	f7fb fa6f 	bl	80236ca <lfs_free>
    }

    return err;
 80281ec:	68fb      	ldr	r3, [r7, #12]
}
 80281ee:	4618      	mov	r0, r3
 80281f0:	3710      	adds	r7, #16
 80281f2:	46bd      	mov	sp, r7
 80281f4:	bd80      	pop	{r7, pc}
	...

080281f8 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80281f8:	b590      	push	{r4, r7, lr}
 80281fa:	b08d      	sub	sp, #52	; 0x34
 80281fc:	af06      	add	r7, sp, #24
 80281fe:	6078      	str	r0, [r7, #4]
 8028200:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8028202:	f107 030c 	add.w	r3, r7, #12
 8028206:	4619      	mov	r1, r3
 8028208:	6878      	ldr	r0, [r7, #4]
 802820a:	f7fc f919 	bl	8024440 <lfs_alloc>
 802820e:	6138      	str	r0, [r7, #16]
        if (err) {
 8028210:	693b      	ldr	r3, [r7, #16]
 8028212:	2b00      	cmp	r3, #0
 8028214:	d001      	beq.n	802821a <lfs_file_relocate+0x22>
            return err;
 8028216:	693b      	ldr	r3, [r7, #16]
 8028218:	e0bb      	b.n	8028392 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 802821a:	68fb      	ldr	r3, [r7, #12]
 802821c:	4619      	mov	r1, r3
 802821e:	6878      	ldr	r0, [r7, #4]
 8028220:	f7fb fd76 	bl	8023d10 <lfs_bd_erase>
 8028224:	6138      	str	r0, [r7, #16]
        if (err) {
 8028226:	693b      	ldr	r3, [r7, #16]
 8028228:	2b00      	cmp	r3, #0
 802822a:	d006      	beq.n	802823a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 802822c:	693b      	ldr	r3, [r7, #16]
 802822e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028232:	f000 809b 	beq.w	802836c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8028236:	693b      	ldr	r3, [r7, #16]
 8028238:	e0ab      	b.n	8028392 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 802823a:	2300      	movs	r3, #0
 802823c:	617b      	str	r3, [r7, #20]
 802823e:	e069      	b.n	8028314 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8028240:	683b      	ldr	r3, [r7, #0]
 8028242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028248:	2b00      	cmp	r3, #0
 802824a:	d027      	beq.n	802829c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 802824c:	683b      	ldr	r3, [r7, #0]
 802824e:	f103 0008 	add.w	r0, r3, #8
 8028252:	683b      	ldr	r3, [r7, #0]
 8028254:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8028258:	683b      	ldr	r3, [r7, #0]
 802825a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 802825c:	697b      	ldr	r3, [r7, #20]
 802825e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028260:	683b      	ldr	r3, [r7, #0]
 8028262:	889b      	ldrh	r3, [r3, #4]
 8028264:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8028266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802826a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802826e:	2101      	movs	r1, #1
 8028270:	9105      	str	r1, [sp, #20]
 8028272:	f107 010b 	add.w	r1, r7, #11
 8028276:	9104      	str	r1, [sp, #16]
 8028278:	6979      	ldr	r1, [r7, #20]
 802827a:	9103      	str	r1, [sp, #12]
 802827c:	9302      	str	r3, [sp, #8]
 802827e:	4b47      	ldr	r3, [pc, #284]	; (802839c <lfs_file_relocate+0x1a4>)
 8028280:	9301      	str	r3, [sp, #4]
 8028282:	9200      	str	r2, [sp, #0]
 8028284:	4623      	mov	r3, r4
 8028286:	2200      	movs	r2, #0
 8028288:	4601      	mov	r1, r0
 802828a:	6878      	ldr	r0, [r7, #4]
 802828c:	f7fc fa8d 	bl	80247aa <lfs_dir_getread>
 8028290:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8028292:	693b      	ldr	r3, [r7, #16]
 8028294:	2b00      	cmp	r3, #0
 8028296:	d01e      	beq.n	80282d6 <lfs_file_relocate+0xde>
                    return err;
 8028298:	693b      	ldr	r3, [r7, #16]
 802829a:	e07a      	b.n	8028392 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 802829c:	683b      	ldr	r3, [r7, #0]
 802829e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80282a2:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80282a4:	683b      	ldr	r3, [r7, #0]
 80282a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80282a8:	697b      	ldr	r3, [r7, #20]
 80282aa:	1ad4      	subs	r4, r2, r3
 80282ac:	683b      	ldr	r3, [r7, #0]
 80282ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80282b0:	2201      	movs	r2, #1
 80282b2:	9203      	str	r2, [sp, #12]
 80282b4:	f107 020b 	add.w	r2, r7, #11
 80282b8:	9202      	str	r2, [sp, #8]
 80282ba:	697a      	ldr	r2, [r7, #20]
 80282bc:	9201      	str	r2, [sp, #4]
 80282be:	9300      	str	r3, [sp, #0]
 80282c0:	4623      	mov	r3, r4
 80282c2:	4602      	mov	r2, r0
 80282c4:	6878      	ldr	r0, [r7, #4]
 80282c6:	f7fb fa31 	bl	802372c <lfs_bd_read>
 80282ca:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80282cc:	693b      	ldr	r3, [r7, #16]
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	d001      	beq.n	80282d6 <lfs_file_relocate+0xde>
                    return err;
 80282d2:	693b      	ldr	r3, [r7, #16]
 80282d4:	e05d      	b.n	8028392 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80282d6:	687b      	ldr	r3, [r7, #4]
 80282d8:	f103 0110 	add.w	r1, r3, #16
 80282dc:	6878      	ldr	r0, [r7, #4]
 80282de:	68fb      	ldr	r3, [r7, #12]
 80282e0:	2201      	movs	r2, #1
 80282e2:	9203      	str	r2, [sp, #12]
 80282e4:	f107 020b 	add.w	r2, r7, #11
 80282e8:	9202      	str	r2, [sp, #8]
 80282ea:	697a      	ldr	r2, [r7, #20]
 80282ec:	9201      	str	r2, [sp, #4]
 80282ee:	9300      	str	r3, [sp, #0]
 80282f0:	2301      	movs	r3, #1
 80282f2:	4602      	mov	r2, r0
 80282f4:	6878      	ldr	r0, [r7, #4]
 80282f6:	f7fb fc5f 	bl	8023bb8 <lfs_bd_prog>
 80282fa:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80282fc:	693b      	ldr	r3, [r7, #16]
 80282fe:	2b00      	cmp	r3, #0
 8028300:	d005      	beq.n	802830e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8028302:	693b      	ldr	r3, [r7, #16]
 8028304:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028308:	d032      	beq.n	8028370 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 802830a:	693b      	ldr	r3, [r7, #16]
 802830c:	e041      	b.n	8028392 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 802830e:	697b      	ldr	r3, [r7, #20]
 8028310:	3301      	adds	r3, #1
 8028312:	617b      	str	r3, [r7, #20]
 8028314:	683b      	ldr	r3, [r7, #0]
 8028316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028318:	697a      	ldr	r2, [r7, #20]
 802831a:	429a      	cmp	r2, r3
 802831c:	d390      	bcc.n	8028240 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 802831e:	683b      	ldr	r3, [r7, #0]
 8028320:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8028322:	687b      	ldr	r3, [r7, #4]
 8028324:	69d9      	ldr	r1, [r3, #28]
 8028326:	687b      	ldr	r3, [r7, #4]
 8028328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802832c:	461a      	mov	r2, r3
 802832e:	f005 fc0a 	bl	802db46 <memcpy>
        file->cache.block = lfs->pcache.block;
 8028332:	687b      	ldr	r3, [r7, #4]
 8028334:	691a      	ldr	r2, [r3, #16]
 8028336:	683b      	ldr	r3, [r7, #0]
 8028338:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 802833a:	687b      	ldr	r3, [r7, #4]
 802833c:	695a      	ldr	r2, [r3, #20]
 802833e:	683b      	ldr	r3, [r7, #0]
 8028340:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8028342:	687b      	ldr	r3, [r7, #4]
 8028344:	699a      	ldr	r2, [r3, #24]
 8028346:	683b      	ldr	r3, [r7, #0]
 8028348:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 802834a:	687b      	ldr	r3, [r7, #4]
 802834c:	3310      	adds	r3, #16
 802834e:	4619      	mov	r1, r3
 8028350:	6878      	ldr	r0, [r7, #4]
 8028352:	f7fb f9d4 	bl	80236fe <lfs_cache_zero>

        file->block = nblock;
 8028356:	68fa      	ldr	r2, [r7, #12]
 8028358:	683b      	ldr	r3, [r7, #0]
 802835a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 802835c:	683b      	ldr	r3, [r7, #0]
 802835e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028360:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028364:	683b      	ldr	r3, [r7, #0]
 8028366:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8028368:	2300      	movs	r3, #0
 802836a:	e012      	b.n	8028392 <lfs_file_relocate+0x19a>
                goto relocate;
 802836c:	bf00      	nop
 802836e:	e000      	b.n	8028372 <lfs_file_relocate+0x17a>
                    goto relocate;
 8028370:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8028372:	68fb      	ldr	r3, [r7, #12]
 8028374:	4a0a      	ldr	r2, [pc, #40]	; (80283a0 <lfs_file_relocate+0x1a8>)
 8028376:	9200      	str	r2, [sp, #0]
 8028378:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 802837c:	4909      	ldr	r1, [pc, #36]	; (80283a4 <lfs_file_relocate+0x1ac>)
 802837e:	480a      	ldr	r0, [pc, #40]	; (80283a8 <lfs_file_relocate+0x1b0>)
 8028380:	f005 f876 	bl	802d470 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8028384:	687b      	ldr	r3, [r7, #4]
 8028386:	3310      	adds	r3, #16
 8028388:	4619      	mov	r1, r3
 802838a:	6878      	ldr	r0, [r7, #4]
 802838c:	f7fb f9a8 	bl	80236e0 <lfs_cache_drop>
    while (true) {
 8028390:	e737      	b.n	8028202 <lfs_file_relocate+0xa>
    }
}
 8028392:	4618      	mov	r0, r3
 8028394:	371c      	adds	r7, #28
 8028396:	46bd      	mov	sp, r7
 8028398:	bd90      	pop	{r4, r7, pc}
 802839a:	bf00      	nop
 802839c:	fff7fc00 	.word	0xfff7fc00
 80283a0:	08033530 	.word	0x08033530
 80283a4:	0803341c 	.word	0x0803341c
 80283a8:	080335b0 	.word	0x080335b0

080283ac <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80283ac:	b580      	push	{r7, lr}
 80283ae:	b084      	sub	sp, #16
 80283b0:	af00      	add	r7, sp, #0
 80283b2:	6078      	str	r0, [r7, #4]
 80283b4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80283b6:	683b      	ldr	r3, [r7, #0]
 80283b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80283ba:	683b      	ldr	r3, [r7, #0]
 80283bc:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80283be:	6878      	ldr	r0, [r7, #4]
 80283c0:	f7fc f81e 	bl	8024400 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80283c4:	6839      	ldr	r1, [r7, #0]
 80283c6:	6878      	ldr	r0, [r7, #4]
 80283c8:	f7ff ff16 	bl	80281f8 <lfs_file_relocate>
 80283cc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80283ce:	68fb      	ldr	r3, [r7, #12]
 80283d0:	2b00      	cmp	r3, #0
 80283d2:	d001      	beq.n	80283d8 <lfs_file_outline+0x2c>
        return err;
 80283d4:	68fb      	ldr	r3, [r7, #12]
 80283d6:	e006      	b.n	80283e6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80283d8:	683b      	ldr	r3, [r7, #0]
 80283da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80283e0:	683b      	ldr	r3, [r7, #0]
 80283e2:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80283e4:	2300      	movs	r3, #0
}
 80283e6:	4618      	mov	r0, r3
 80283e8:	3710      	adds	r7, #16
 80283ea:	46bd      	mov	sp, r7
 80283ec:	bd80      	pop	{r7, pc}
	...

080283f0 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80283f0:	b590      	push	{r4, r7, lr}
 80283f2:	b09f      	sub	sp, #124	; 0x7c
 80283f4:	af02      	add	r7, sp, #8
 80283f6:	6078      	str	r0, [r7, #4]
 80283f8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80283fa:	683b      	ldr	r3, [r7, #0]
 80283fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028402:	2b00      	cmp	r3, #0
 8028404:	d011      	beq.n	802842a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8028406:	683b      	ldr	r3, [r7, #0]
 8028408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802840a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802840e:	2b00      	cmp	r3, #0
 8028410:	d105      	bne.n	802841e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8028412:	683b      	ldr	r3, [r7, #0]
 8028414:	3340      	adds	r3, #64	; 0x40
 8028416:	4619      	mov	r1, r3
 8028418:	6878      	ldr	r0, [r7, #4]
 802841a:	f7fb f961 	bl	80236e0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 802841e:	683b      	ldr	r3, [r7, #0]
 8028420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028422:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8028426:	683b      	ldr	r3, [r7, #0]
 8028428:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802842a:	683b      	ldr	r3, [r7, #0]
 802842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802842e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028432:	2b00      	cmp	r3, #0
 8028434:	f000 80a4 	beq.w	8028580 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8028438:	683b      	ldr	r3, [r7, #0]
 802843a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802843c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 802843e:	683b      	ldr	r3, [r7, #0]
 8028440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028446:	2b00      	cmp	r3, #0
 8028448:	d176      	bne.n	8028538 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 802844a:	f107 030c 	add.w	r3, r7, #12
 802844e:	2254      	movs	r2, #84	; 0x54
 8028450:	2100      	movs	r1, #0
 8028452:	4618      	mov	r0, r3
 8028454:	f005 f9a2 	bl	802d79c <memset>
                .ctz.head = file->ctz.head,
 8028458:	683b      	ldr	r3, [r7, #0]
 802845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 802845c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 802845e:	683b      	ldr	r3, [r7, #0]
 8028460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8028462:	63bb      	str	r3, [r7, #56]	; 0x38
 8028464:	2301      	movs	r3, #1
 8028466:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8028468:	683b      	ldr	r3, [r7, #0]
 802846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 802846c:	643b      	str	r3, [r7, #64]	; 0x40
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8028474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 802847a:	687b      	ldr	r3, [r7, #4]
 802847c:	4619      	mov	r1, r3
 802847e:	6878      	ldr	r0, [r7, #4]
 8028480:	f7fb f92e 	bl	80236e0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8028484:	e02b      	b.n	80284de <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8028486:	f107 0263 	add.w	r2, r7, #99	; 0x63
 802848a:	f107 010c 	add.w	r1, r7, #12
 802848e:	2301      	movs	r3, #1
 8028490:	6878      	ldr	r0, [r7, #4]
 8028492:	f000 f90d 	bl	80286b0 <lfs_file_flushedread>
 8028496:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8028498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802849a:	2b00      	cmp	r3, #0
 802849c:	da01      	bge.n	80284a2 <lfs_file_flush+0xb2>
                    return res;
 802849e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80284a0:	e06f      	b.n	8028582 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80284a2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80284a6:	2301      	movs	r3, #1
 80284a8:	6839      	ldr	r1, [r7, #0]
 80284aa:	6878      	ldr	r0, [r7, #4]
 80284ac:	f000 fa08 	bl	80288c0 <lfs_file_flushedwrite>
 80284b0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80284b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80284b4:	2b00      	cmp	r3, #0
 80284b6:	da01      	bge.n	80284bc <lfs_file_flush+0xcc>
                    return res;
 80284b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80284ba:	e062      	b.n	8028582 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80284bc:	687b      	ldr	r3, [r7, #4]
 80284be:	681b      	ldr	r3, [r3, #0]
 80284c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80284c4:	d00b      	beq.n	80284de <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80284c6:	f107 030c 	add.w	r3, r7, #12
 80284ca:	3340      	adds	r3, #64	; 0x40
 80284cc:	4619      	mov	r1, r3
 80284ce:	6878      	ldr	r0, [r7, #4]
 80284d0:	f7fb f906 	bl	80236e0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80284d4:	687b      	ldr	r3, [r7, #4]
 80284d6:	4619      	mov	r1, r3
 80284d8:	6878      	ldr	r0, [r7, #4]
 80284da:	f7fb f901 	bl	80236e0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80284de:	683b      	ldr	r3, [r7, #0]
 80284e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80284e2:	683b      	ldr	r3, [r7, #0]
 80284e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80284e6:	429a      	cmp	r2, r3
 80284e8:	d3cd      	bcc.n	8028486 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80284ea:	683b      	ldr	r3, [r7, #0]
 80284ec:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80284f0:	687a      	ldr	r2, [r7, #4]
 80284f2:	2301      	movs	r3, #1
 80284f4:	6878      	ldr	r0, [r7, #4]
 80284f6:	f7fb faaf 	bl	8023a58 <lfs_bd_flush>
 80284fa:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80284fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80284fe:	2b00      	cmp	r3, #0
 8028500:	d026      	beq.n	8028550 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8028502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028504:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028508:	d001      	beq.n	802850e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 802850a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802850c:	e039      	b.n	8028582 <lfs_file_flush+0x192>
                        goto relocate;
 802850e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8028510:	683b      	ldr	r3, [r7, #0]
 8028512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028514:	4a1d      	ldr	r2, [pc, #116]	; (802858c <lfs_file_flush+0x19c>)
 8028516:	9200      	str	r2, [sp, #0]
 8028518:	f640 425f 	movw	r2, #3167	; 0xc5f
 802851c:	491c      	ldr	r1, [pc, #112]	; (8028590 <lfs_file_flush+0x1a0>)
 802851e:	481d      	ldr	r0, [pc, #116]	; (8028594 <lfs_file_flush+0x1a4>)
 8028520:	f004 ffa6 	bl	802d470 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8028524:	6839      	ldr	r1, [r7, #0]
 8028526:	6878      	ldr	r0, [r7, #4]
 8028528:	f7ff fe66 	bl	80281f8 <lfs_file_relocate>
 802852c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802852e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028530:	2b00      	cmp	r3, #0
 8028532:	d0da      	beq.n	80284ea <lfs_file_flush+0xfa>
                    return err;
 8028534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028536:	e024      	b.n	8028582 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8028538:	683b      	ldr	r3, [r7, #0]
 802853a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802853c:	683b      	ldr	r3, [r7, #0]
 802853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028540:	4619      	mov	r1, r3
 8028542:	4610      	mov	r0, r2
 8028544:	f7fb f806 	bl	8023554 <lfs_max>
 8028548:	4602      	mov	r2, r0
 802854a:	683b      	ldr	r3, [r7, #0]
 802854c:	635a      	str	r2, [r3, #52]	; 0x34
 802854e:	e000      	b.n	8028552 <lfs_file_flush+0x162>
                break;
 8028550:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8028552:	683b      	ldr	r3, [r7, #0]
 8028554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028556:	683b      	ldr	r3, [r7, #0]
 8028558:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 802855a:	683b      	ldr	r3, [r7, #0]
 802855c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802855e:	683b      	ldr	r3, [r7, #0]
 8028560:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8028562:	683b      	ldr	r3, [r7, #0]
 8028564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028566:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802856a:	683b      	ldr	r3, [r7, #0]
 802856c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 802856e:	683b      	ldr	r3, [r7, #0]
 8028570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028572:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028576:	683b      	ldr	r3, [r7, #0]
 8028578:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 802857a:	683b      	ldr	r3, [r7, #0]
 802857c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802857e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8028580:	2300      	movs	r3, #0
}
 8028582:	4618      	mov	r0, r3
 8028584:	3774      	adds	r7, #116	; 0x74
 8028586:	46bd      	mov	sp, r7
 8028588:	bd90      	pop	{r4, r7, pc}
 802858a:	bf00      	nop
 802858c:	08033530 	.word	0x08033530
 8028590:	0803341c 	.word	0x0803341c
 8028594:	080335b0 	.word	0x080335b0

08028598 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8028598:	b580      	push	{r7, lr}
 802859a:	b090      	sub	sp, #64	; 0x40
 802859c:	af00      	add	r7, sp, #0
 802859e:	6078      	str	r0, [r7, #4]
 80285a0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80285a2:	683b      	ldr	r3, [r7, #0]
 80285a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80285aa:	2b00      	cmp	r3, #0
 80285ac:	d001      	beq.n	80285b2 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80285ae:	2300      	movs	r3, #0
 80285b0:	e07a      	b.n	80286a8 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80285b2:	6839      	ldr	r1, [r7, #0]
 80285b4:	6878      	ldr	r0, [r7, #4]
 80285b6:	f7ff ff1b 	bl	80283f0 <lfs_file_flush>
 80285ba:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80285bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80285be:	2b00      	cmp	r3, #0
 80285c0:	d007      	beq.n	80285d2 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80285c2:	683b      	ldr	r3, [r7, #0]
 80285c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80285ca:	683b      	ldr	r3, [r7, #0]
 80285cc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80285ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80285d0:	e06a      	b.n	80286a8 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80285d2:	683b      	ldr	r3, [r7, #0]
 80285d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80285da:	2b00      	cmp	r3, #0
 80285dc:	d063      	beq.n	80286a6 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80285de:	683b      	ldr	r3, [r7, #0]
 80285e0:	3308      	adds	r3, #8
 80285e2:	4618      	mov	r0, r3
 80285e4:	f7fb fbdb 	bl	8023d9e <lfs_pair_isnull>
 80285e8:	4603      	mov	r3, r0
 80285ea:	f083 0301 	eor.w	r3, r3, #1
 80285ee:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80285f0:	2b00      	cmp	r3, #0
 80285f2:	d058      	beq.n	80286a6 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80285f4:	683b      	ldr	r3, [r7, #0]
 80285f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80285fc:	2b00      	cmp	r3, #0
 80285fe:	d009      	beq.n	8028614 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028600:	f240 2301 	movw	r3, #513	; 0x201
 8028604:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8028606:	683b      	ldr	r3, [r7, #0]
 8028608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802860a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 802860c:	683b      	ldr	r3, [r7, #0]
 802860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028610:	637b      	str	r3, [r7, #52]	; 0x34
 8028612:	e014      	b.n	802863e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8028614:	f240 2302 	movw	r3, #514	; 0x202
 8028618:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 802861a:	683a      	ldr	r2, [r7, #0]
 802861c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028620:	3228      	adds	r2, #40	; 0x28
 8028622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028626:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802862a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802862e:	4618      	mov	r0, r3
 8028630:	f7fb fdd6 	bl	80241e0 <lfs_ctz_tole32>
            buffer = &ctz;
 8028634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028638:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 802863a:	2308      	movs	r3, #8
 802863c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802863e:	683b      	ldr	r3, [r7, #0]
 8028640:	f103 0108 	add.w	r1, r3, #8
 8028644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8028646:	051a      	lsls	r2, r3, #20
 8028648:	683b      	ldr	r3, [r7, #0]
 802864a:	889b      	ldrh	r3, [r3, #4]
 802864c:	029b      	lsls	r3, r3, #10
 802864e:	431a      	orrs	r2, r3
 8028650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028652:	4313      	orrs	r3, r2
 8028654:	61bb      	str	r3, [r7, #24]
 8028656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028658:	61fb      	str	r3, [r7, #28]
 802865a:	683b      	ldr	r3, [r7, #0]
 802865c:	889b      	ldrh	r3, [r3, #4]
 802865e:	029a      	lsls	r2, r3, #10
 8028660:	683b      	ldr	r3, [r7, #0]
 8028662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028664:	689b      	ldr	r3, [r3, #8]
 8028666:	4313      	orrs	r3, r2
 8028668:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 802866c:	623b      	str	r3, [r7, #32]
 802866e:	683b      	ldr	r3, [r7, #0]
 8028670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028672:	685b      	ldr	r3, [r3, #4]
 8028674:	627b      	str	r3, [r7, #36]	; 0x24
 8028676:	f107 0218 	add.w	r2, r7, #24
 802867a:	2302      	movs	r3, #2
 802867c:	6878      	ldr	r0, [r7, #4]
 802867e:	f7fe ff33 	bl	80274e8 <lfs_dir_commit>
 8028682:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8028684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028686:	2b00      	cmp	r3, #0
 8028688:	d007      	beq.n	802869a <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 802868a:	683b      	ldr	r3, [r7, #0]
 802868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802868e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028692:	683b      	ldr	r3, [r7, #0]
 8028694:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028698:	e006      	b.n	80286a8 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 802869a:	683b      	ldr	r3, [r7, #0]
 802869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802869e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80286a2:	683b      	ldr	r3, [r7, #0]
 80286a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80286a6:	2300      	movs	r3, #0
}
 80286a8:	4618      	mov	r0, r3
 80286aa:	3740      	adds	r7, #64	; 0x40
 80286ac:	46bd      	mov	sp, r7
 80286ae:	bd80      	pop	{r7, pc}

080286b0 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80286b0:	b5b0      	push	{r4, r5, r7, lr}
 80286b2:	b090      	sub	sp, #64	; 0x40
 80286b4:	af06      	add	r7, sp, #24
 80286b6:	60f8      	str	r0, [r7, #12]
 80286b8:	60b9      	str	r1, [r7, #8]
 80286ba:	607a      	str	r2, [r7, #4]
 80286bc:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80286be:	687b      	ldr	r3, [r7, #4]
 80286c0:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80286c2:	683b      	ldr	r3, [r7, #0]
 80286c4:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80286c6:	68bb      	ldr	r3, [r7, #8]
 80286c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80286ca:	68bb      	ldr	r3, [r7, #8]
 80286cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80286ce:	429a      	cmp	r2, r3
 80286d0:	d301      	bcc.n	80286d6 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80286d2:	2300      	movs	r3, #0
 80286d4:	e0b7      	b.n	8028846 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80286d6:	68bb      	ldr	r3, [r7, #8]
 80286d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80286da:	68bb      	ldr	r3, [r7, #8]
 80286dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80286de:	1ad3      	subs	r3, r2, r3
 80286e0:	4619      	mov	r1, r3
 80286e2:	6838      	ldr	r0, [r7, #0]
 80286e4:	f7fa ff46 	bl	8023574 <lfs_min>
 80286e8:	6038      	str	r0, [r7, #0]
    nsize = size;
 80286ea:	683b      	ldr	r3, [r7, #0]
 80286ec:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80286ee:	e0a5      	b.n	802883c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80286f0:	68bb      	ldr	r3, [r7, #8]
 80286f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80286f8:	2b00      	cmp	r3, #0
 80286fa:	d006      	beq.n	802870a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80286fc:	68bb      	ldr	r3, [r7, #8]
 80286fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028700:	68fb      	ldr	r3, [r7, #12]
 8028702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028704:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028706:	429a      	cmp	r2, r3
 8028708:	d130      	bne.n	802876c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 802870a:	68bb      	ldr	r3, [r7, #8]
 802870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802870e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028712:	2b00      	cmp	r3, #0
 8028714:	d11c      	bne.n	8028750 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028716:	68bb      	ldr	r3, [r7, #8]
 8028718:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802871c:	68bb      	ldr	r3, [r7, #8]
 802871e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028720:	68bb      	ldr	r3, [r7, #8]
 8028722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028724:	68ba      	ldr	r2, [r7, #8]
 8028726:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028728:	68b9      	ldr	r1, [r7, #8]
 802872a:	3138      	adds	r1, #56	; 0x38
 802872c:	68b8      	ldr	r0, [r7, #8]
 802872e:	303c      	adds	r0, #60	; 0x3c
 8028730:	9003      	str	r0, [sp, #12]
 8028732:	9102      	str	r1, [sp, #8]
 8028734:	9201      	str	r2, [sp, #4]
 8028736:	9300      	str	r3, [sp, #0]
 8028738:	462b      	mov	r3, r5
 802873a:	4622      	mov	r2, r4
 802873c:	2100      	movs	r1, #0
 802873e:	68f8      	ldr	r0, [r7, #12]
 8028740:	f7ff f97c 	bl	8027a3c <lfs_ctz_find>
 8028744:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8028746:	69fb      	ldr	r3, [r7, #28]
 8028748:	2b00      	cmp	r3, #0
 802874a:	d009      	beq.n	8028760 <lfs_file_flushedread+0xb0>
                    return err;
 802874c:	69fb      	ldr	r3, [r7, #28]
 802874e:	e07a      	b.n	8028846 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028750:	68bb      	ldr	r3, [r7, #8]
 8028752:	f06f 0201 	mvn.w	r2, #1
 8028756:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028758:	68bb      	ldr	r3, [r7, #8]
 802875a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802875c:	68bb      	ldr	r3, [r7, #8]
 802875e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8028760:	68bb      	ldr	r3, [r7, #8]
 8028762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028764:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8028768:	68bb      	ldr	r3, [r7, #8]
 802876a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 802876c:	68fb      	ldr	r3, [r7, #12]
 802876e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028770:	69da      	ldr	r2, [r3, #28]
 8028772:	68bb      	ldr	r3, [r7, #8]
 8028774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028776:	1ad3      	subs	r3, r2, r3
 8028778:	4619      	mov	r1, r3
 802877a:	6a38      	ldr	r0, [r7, #32]
 802877c:	f7fa fefa 	bl	8023574 <lfs_min>
 8028780:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8028782:	68bb      	ldr	r3, [r7, #8]
 8028784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802878a:	2b00      	cmp	r3, #0
 802878c:	d026      	beq.n	80287dc <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 802878e:	68bb      	ldr	r3, [r7, #8]
 8028790:	f103 0408 	add.w	r4, r3, #8
 8028794:	68bb      	ldr	r3, [r7, #8]
 8028796:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 802879a:	68fb      	ldr	r3, [r7, #12]
 802879c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802879e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80287a0:	68bb      	ldr	r3, [r7, #8]
 80287a2:	889b      	ldrh	r3, [r3, #4]
 80287a4:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80287a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80287aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80287ae:	68b9      	ldr	r1, [r7, #8]
 80287b0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80287b2:	69b8      	ldr	r0, [r7, #24]
 80287b4:	9005      	str	r0, [sp, #20]
 80287b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80287b8:	9004      	str	r0, [sp, #16]
 80287ba:	9103      	str	r1, [sp, #12]
 80287bc:	9302      	str	r3, [sp, #8]
 80287be:	4b24      	ldr	r3, [pc, #144]	; (8028850 <lfs_file_flushedread+0x1a0>)
 80287c0:	9301      	str	r3, [sp, #4]
 80287c2:	9200      	str	r2, [sp, #0]
 80287c4:	462b      	mov	r3, r5
 80287c6:	2200      	movs	r2, #0
 80287c8:	4621      	mov	r1, r4
 80287ca:	68f8      	ldr	r0, [r7, #12]
 80287cc:	f7fb ffed 	bl	80247aa <lfs_dir_getread>
 80287d0:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80287d2:	693b      	ldr	r3, [r7, #16]
 80287d4:	2b00      	cmp	r3, #0
 80287d6:	d01d      	beq.n	8028814 <lfs_file_flushedread+0x164>
                return err;
 80287d8:	693b      	ldr	r3, [r7, #16]
 80287da:	e034      	b.n	8028846 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80287dc:	68bb      	ldr	r3, [r7, #8]
 80287de:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80287e2:	68fb      	ldr	r3, [r7, #12]
 80287e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80287e6:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80287e8:	68bb      	ldr	r3, [r7, #8]
 80287ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287ec:	68ba      	ldr	r2, [r7, #8]
 80287ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80287f0:	69b9      	ldr	r1, [r7, #24]
 80287f2:	9103      	str	r1, [sp, #12]
 80287f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80287f6:	9102      	str	r1, [sp, #8]
 80287f8:	9201      	str	r2, [sp, #4]
 80287fa:	9300      	str	r3, [sp, #0]
 80287fc:	4623      	mov	r3, r4
 80287fe:	4602      	mov	r2, r0
 8028800:	2100      	movs	r1, #0
 8028802:	68f8      	ldr	r0, [r7, #12]
 8028804:	f7fa ff92 	bl	802372c <lfs_bd_read>
 8028808:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 802880a:	697b      	ldr	r3, [r7, #20]
 802880c:	2b00      	cmp	r3, #0
 802880e:	d001      	beq.n	8028814 <lfs_file_flushedread+0x164>
                return err;
 8028810:	697b      	ldr	r3, [r7, #20]
 8028812:	e018      	b.n	8028846 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8028814:	68bb      	ldr	r3, [r7, #8]
 8028816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028818:	69bb      	ldr	r3, [r7, #24]
 802881a:	441a      	add	r2, r3
 802881c:	68bb      	ldr	r3, [r7, #8]
 802881e:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028820:	68bb      	ldr	r3, [r7, #8]
 8028822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028824:	69bb      	ldr	r3, [r7, #24]
 8028826:	441a      	add	r2, r3
 8028828:	68bb      	ldr	r3, [r7, #8]
 802882a:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 802882c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802882e:	69bb      	ldr	r3, [r7, #24]
 8028830:	4413      	add	r3, r2
 8028832:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8028834:	6a3a      	ldr	r2, [r7, #32]
 8028836:	69bb      	ldr	r3, [r7, #24]
 8028838:	1ad3      	subs	r3, r2, r3
 802883a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 802883c:	6a3b      	ldr	r3, [r7, #32]
 802883e:	2b00      	cmp	r3, #0
 8028840:	f47f af56 	bne.w	80286f0 <lfs_file_flushedread+0x40>
    }

    return size;
 8028844:	683b      	ldr	r3, [r7, #0]
}
 8028846:	4618      	mov	r0, r3
 8028848:	3728      	adds	r7, #40	; 0x28
 802884a:	46bd      	mov	sp, r7
 802884c:	bdb0      	pop	{r4, r5, r7, pc}
 802884e:	bf00      	nop
 8028850:	fff7fc00 	.word	0xfff7fc00

08028854 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028854:	b580      	push	{r7, lr}
 8028856:	b086      	sub	sp, #24
 8028858:	af00      	add	r7, sp, #0
 802885a:	60f8      	str	r0, [r7, #12]
 802885c:	60b9      	str	r1, [r7, #8]
 802885e:	607a      	str	r2, [r7, #4]
 8028860:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8028862:	68bb      	ldr	r3, [r7, #8]
 8028864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028866:	f003 0301 	and.w	r3, r3, #1
 802886a:	2b00      	cmp	r3, #0
 802886c:	d106      	bne.n	802887c <lfs_file_rawread+0x28>
 802886e:	4b11      	ldr	r3, [pc, #68]	; (80288b4 <lfs_file_rawread+0x60>)
 8028870:	4a11      	ldr	r2, [pc, #68]	; (80288b8 <lfs_file_rawread+0x64>)
 8028872:	f640 41ea 	movw	r1, #3306	; 0xcea
 8028876:	4811      	ldr	r0, [pc, #68]	; (80288bc <lfs_file_rawread+0x68>)
 8028878:	f003 fdc0 	bl	802c3fc <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802887c:	68bb      	ldr	r3, [r7, #8]
 802887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028884:	2b00      	cmp	r3, #0
 8028886:	d009      	beq.n	802889c <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8028888:	68b9      	ldr	r1, [r7, #8]
 802888a:	68f8      	ldr	r0, [r7, #12]
 802888c:	f7ff fdb0 	bl	80283f0 <lfs_file_flush>
 8028890:	6178      	str	r0, [r7, #20]
        if (err) {
 8028892:	697b      	ldr	r3, [r7, #20]
 8028894:	2b00      	cmp	r3, #0
 8028896:	d001      	beq.n	802889c <lfs_file_rawread+0x48>
            return err;
 8028898:	697b      	ldr	r3, [r7, #20]
 802889a:	e006      	b.n	80288aa <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 802889c:	683b      	ldr	r3, [r7, #0]
 802889e:	687a      	ldr	r2, [r7, #4]
 80288a0:	68b9      	ldr	r1, [r7, #8]
 80288a2:	68f8      	ldr	r0, [r7, #12]
 80288a4:	f7ff ff04 	bl	80286b0 <lfs_file_flushedread>
 80288a8:	4603      	mov	r3, r0
}
 80288aa:	4618      	mov	r0, r3
 80288ac:	3718      	adds	r7, #24
 80288ae:	46bd      	mov	sp, r7
 80288b0:	bd80      	pop	{r7, pc}
 80288b2:	bf00      	nop
 80288b4:	08033758 	.word	0x08033758
 80288b8:	0803476c 	.word	0x0803476c
 80288bc:	0803341c 	.word	0x0803341c

080288c0 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80288c0:	b5b0      	push	{r4, r5, r7, lr}
 80288c2:	b090      	sub	sp, #64	; 0x40
 80288c4:	af04      	add	r7, sp, #16
 80288c6:	60f8      	str	r0, [r7, #12]
 80288c8:	60b9      	str	r1, [r7, #8]
 80288ca:	607a      	str	r2, [r7, #4]
 80288cc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80288ce:	687b      	ldr	r3, [r7, #4]
 80288d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80288d2:	683b      	ldr	r3, [r7, #0]
 80288d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80288d6:	68bb      	ldr	r3, [r7, #8]
 80288d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80288de:	2b00      	cmp	r3, #0
 80288e0:	f000 810c 	beq.w	8028afc <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80288e4:	68bb      	ldr	r3, [r7, #8]
 80288e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80288e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80288ea:	441a      	add	r2, r3
 80288ec:	68bb      	ldr	r3, [r7, #8]
 80288ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80288f0:	4619      	mov	r1, r3
 80288f2:	4610      	mov	r0, r2
 80288f4:	f7fa fe2e 	bl	8023554 <lfs_max>
 80288f8:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80288fa:	68fb      	ldr	r3, [r7, #12]
 80288fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80288fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8028900:	68fb      	ldr	r3, [r7, #12]
 8028902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028906:	2b00      	cmp	r3, #0
 8028908:	d004      	beq.n	8028914 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 802890a:	68fb      	ldr	r3, [r7, #12]
 802890c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802890e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028910:	08db      	lsrs	r3, r3, #3
 8028912:	e003      	b.n	802891c <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028914:	68fb      	ldr	r3, [r7, #12]
 8028916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028918:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 802891a:	08db      	lsrs	r3, r3, #3
 802891c:	4619      	mov	r1, r3
 802891e:	4610      	mov	r0, r2
 8028920:	f7fa fe28 	bl	8023574 <lfs_min>
 8028924:	4603      	mov	r3, r0
 8028926:	4619      	mov	r1, r3
 8028928:	f240 30fe 	movw	r0, #1022	; 0x3fe
 802892c:	f7fa fe22 	bl	8023574 <lfs_min>
 8028930:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028932:	429c      	cmp	r4, r3
 8028934:	f240 80e2 	bls.w	8028afc <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028938:	68b9      	ldr	r1, [r7, #8]
 802893a:	68f8      	ldr	r0, [r7, #12]
 802893c:	f7ff fd36 	bl	80283ac <lfs_file_outline>
 8028940:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028944:	2b00      	cmp	r3, #0
 8028946:	f000 80d9 	beq.w	8028afc <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 802894a:	68bb      	ldr	r3, [r7, #8]
 802894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802894e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028952:	68bb      	ldr	r3, [r7, #8]
 8028954:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028958:	e0d5      	b.n	8028b06 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 802895a:	68bb      	ldr	r3, [r7, #8]
 802895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802895e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028962:	2b00      	cmp	r3, #0
 8028964:	d006      	beq.n	8028974 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8028966:	68bb      	ldr	r3, [r7, #8]
 8028968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802896a:	68fb      	ldr	r3, [r7, #12]
 802896c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802896e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8028970:	429a      	cmp	r2, r3
 8028972:	d16b      	bne.n	8028a4c <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8028974:	68bb      	ldr	r3, [r7, #8]
 8028976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802897c:	2b00      	cmp	r3, #0
 802897e:	d157      	bne.n	8028a30 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8028980:	68bb      	ldr	r3, [r7, #8]
 8028982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028988:	2b00      	cmp	r3, #0
 802898a:	d12d      	bne.n	80289e8 <lfs_file_flushedwrite+0x128>
 802898c:	68bb      	ldr	r3, [r7, #8]
 802898e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028990:	2b00      	cmp	r3, #0
 8028992:	d029      	beq.n	80289e8 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028994:	68bb      	ldr	r3, [r7, #8]
 8028996:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802899a:	68bb      	ldr	r3, [r7, #8]
 802899c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 802899e:	68bb      	ldr	r3, [r7, #8]
 80289a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 80289a2:	68ba      	ldr	r2, [r7, #8]
 80289a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80289a6:	3a01      	subs	r2, #1
 80289a8:	68b9      	ldr	r1, [r7, #8]
 80289aa:	3138      	adds	r1, #56	; 0x38
 80289ac:	68b8      	ldr	r0, [r7, #8]
 80289ae:	303c      	adds	r0, #60	; 0x3c
 80289b0:	9003      	str	r0, [sp, #12]
 80289b2:	9102      	str	r1, [sp, #8]
 80289b4:	9201      	str	r2, [sp, #4]
 80289b6:	9300      	str	r3, [sp, #0]
 80289b8:	462b      	mov	r3, r5
 80289ba:	4622      	mov	r2, r4
 80289bc:	2100      	movs	r1, #0
 80289be:	68f8      	ldr	r0, [r7, #12]
 80289c0:	f7ff f83c 	bl	8027a3c <lfs_ctz_find>
 80289c4:	6238      	str	r0, [r7, #32]
                    if (err) {
 80289c6:	6a3b      	ldr	r3, [r7, #32]
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d007      	beq.n	80289dc <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 80289cc:	68bb      	ldr	r3, [r7, #8]
 80289ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80289d4:	68bb      	ldr	r3, [r7, #8]
 80289d6:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80289d8:	6a3b      	ldr	r3, [r7, #32]
 80289da:	e094      	b.n	8028b06 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80289dc:	68bb      	ldr	r3, [r7, #8]
 80289de:	3340      	adds	r3, #64	; 0x40
 80289e0:	4619      	mov	r1, r3
 80289e2:	68f8      	ldr	r0, [r7, #12]
 80289e4:	f7fa fe8b 	bl	80236fe <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80289e8:	68f8      	ldr	r0, [r7, #12]
 80289ea:	f7fb fd09 	bl	8024400 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80289ee:	68bb      	ldr	r3, [r7, #8]
 80289f0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80289f4:	68fc      	ldr	r4, [r7, #12]
 80289f6:	68bb      	ldr	r3, [r7, #8]
 80289f8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80289fa:	68bb      	ldr	r3, [r7, #8]
 80289fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80289fe:	68ba      	ldr	r2, [r7, #8]
 8028a00:	3238      	adds	r2, #56	; 0x38
 8028a02:	68b9      	ldr	r1, [r7, #8]
 8028a04:	313c      	adds	r1, #60	; 0x3c
 8028a06:	9102      	str	r1, [sp, #8]
 8028a08:	9201      	str	r2, [sp, #4]
 8028a0a:	9300      	str	r3, [sp, #0]
 8028a0c:	462b      	mov	r3, r5
 8028a0e:	4622      	mov	r2, r4
 8028a10:	4601      	mov	r1, r0
 8028a12:	68f8      	ldr	r0, [r7, #12]
 8028a14:	f7ff f87e 	bl	8027b14 <lfs_ctz_extend>
 8028a18:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8028a1a:	69fb      	ldr	r3, [r7, #28]
 8028a1c:	2b00      	cmp	r3, #0
 8028a1e:	d00f      	beq.n	8028a40 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028a20:	68bb      	ldr	r3, [r7, #8]
 8028a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028a28:	68bb      	ldr	r3, [r7, #8]
 8028a2a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8028a2c:	69fb      	ldr	r3, [r7, #28]
 8028a2e:	e06a      	b.n	8028b06 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028a30:	68bb      	ldr	r3, [r7, #8]
 8028a32:	f06f 0201 	mvn.w	r2, #1
 8028a36:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028a38:	68bb      	ldr	r3, [r7, #8]
 8028a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028a3c:	68bb      	ldr	r3, [r7, #8]
 8028a3e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8028a40:	68bb      	ldr	r3, [r7, #8]
 8028a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028a48:	68bb      	ldr	r3, [r7, #8]
 8028a4a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028a4c:	68fb      	ldr	r3, [r7, #12]
 8028a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a50:	69da      	ldr	r2, [r3, #28]
 8028a52:	68bb      	ldr	r3, [r7, #8]
 8028a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028a56:	1ad3      	subs	r3, r2, r3
 8028a58:	4619      	mov	r1, r3
 8028a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028a5c:	f7fa fd8a 	bl	8023574 <lfs_min>
 8028a60:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8028a62:	68bb      	ldr	r3, [r7, #8]
 8028a64:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028a68:	68fc      	ldr	r4, [r7, #12]
 8028a6a:	68bb      	ldr	r3, [r7, #8]
 8028a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a6e:	68ba      	ldr	r2, [r7, #8]
 8028a70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028a72:	69b9      	ldr	r1, [r7, #24]
 8028a74:	9103      	str	r1, [sp, #12]
 8028a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028a78:	9102      	str	r1, [sp, #8]
 8028a7a:	9201      	str	r2, [sp, #4]
 8028a7c:	9300      	str	r3, [sp, #0]
 8028a7e:	2301      	movs	r3, #1
 8028a80:	4622      	mov	r2, r4
 8028a82:	4601      	mov	r1, r0
 8028a84:	68f8      	ldr	r0, [r7, #12]
 8028a86:	f7fb f897 	bl	8023bb8 <lfs_bd_prog>
 8028a8a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028a8c:	697b      	ldr	r3, [r7, #20]
 8028a8e:	2b00      	cmp	r3, #0
 8028a90:	d01c      	beq.n	8028acc <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8028a92:	697b      	ldr	r3, [r7, #20]
 8028a94:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028a98:	d007      	beq.n	8028aaa <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8028a9a:	68bb      	ldr	r3, [r7, #8]
 8028a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028aa2:	68bb      	ldr	r3, [r7, #8]
 8028aa4:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028aa6:	697b      	ldr	r3, [r7, #20]
 8028aa8:	e02d      	b.n	8028b06 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8028aaa:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8028aac:	68b9      	ldr	r1, [r7, #8]
 8028aae:	68f8      	ldr	r0, [r7, #12]
 8028ab0:	f7ff fba2 	bl	80281f8 <lfs_file_relocate>
 8028ab4:	6178      	str	r0, [r7, #20]
            if (err) {
 8028ab6:	697b      	ldr	r3, [r7, #20]
 8028ab8:	2b00      	cmp	r3, #0
 8028aba:	d0d2      	beq.n	8028a62 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8028abc:	68bb      	ldr	r3, [r7, #8]
 8028abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ac0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028ac4:	68bb      	ldr	r3, [r7, #8]
 8028ac6:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028ac8:	697b      	ldr	r3, [r7, #20]
 8028aca:	e01c      	b.n	8028b06 <lfs_file_flushedwrite+0x246>
            break;
 8028acc:	bf00      	nop
            }
        }

        file->pos += diff;
 8028ace:	68bb      	ldr	r3, [r7, #8]
 8028ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028ad2:	69bb      	ldr	r3, [r7, #24]
 8028ad4:	441a      	add	r2, r3
 8028ad6:	68bb      	ldr	r3, [r7, #8]
 8028ad8:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028ada:	68bb      	ldr	r3, [r7, #8]
 8028adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028ade:	69bb      	ldr	r3, [r7, #24]
 8028ae0:	441a      	add	r2, r3
 8028ae2:	68bb      	ldr	r3, [r7, #8]
 8028ae4:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028ae8:	69bb      	ldr	r3, [r7, #24]
 8028aea:	4413      	add	r3, r2
 8028aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8028aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028af0:	69bb      	ldr	r3, [r7, #24]
 8028af2:	1ad3      	subs	r3, r2, r3
 8028af4:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8028af6:	68f8      	ldr	r0, [r7, #12]
 8028af8:	f7fb fc82 	bl	8024400 <lfs_alloc_ack>
    while (nsize > 0) {
 8028afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028afe:	2b00      	cmp	r3, #0
 8028b00:	f47f af2b 	bne.w	802895a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028b04:	683b      	ldr	r3, [r7, #0]
}
 8028b06:	4618      	mov	r0, r3
 8028b08:	3730      	adds	r7, #48	; 0x30
 8028b0a:	46bd      	mov	sp, r7
 8028b0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028b10 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028b10:	b580      	push	{r7, lr}
 8028b12:	b08a      	sub	sp, #40	; 0x28
 8028b14:	af00      	add	r7, sp, #0
 8028b16:	60f8      	str	r0, [r7, #12]
 8028b18:	60b9      	str	r1, [r7, #8]
 8028b1a:	607a      	str	r2, [r7, #4]
 8028b1c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8028b1e:	68bb      	ldr	r3, [r7, #8]
 8028b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b22:	f003 0302 	and.w	r3, r3, #2
 8028b26:	2b00      	cmp	r3, #0
 8028b28:	d106      	bne.n	8028b38 <lfs_file_rawwrite+0x28>
 8028b2a:	4b38      	ldr	r3, [pc, #224]	; (8028c0c <lfs_file_rawwrite+0xfc>)
 8028b2c:	4a38      	ldr	r2, [pc, #224]	; (8028c10 <lfs_file_rawwrite+0x100>)
 8028b2e:	f640 5155 	movw	r1, #3413	; 0xd55
 8028b32:	4838      	ldr	r0, [pc, #224]	; (8028c14 <lfs_file_rawwrite+0x104>)
 8028b34:	f003 fc62 	bl	802c3fc <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028b38:	68bb      	ldr	r3, [r7, #8]
 8028b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028b40:	2b00      	cmp	r3, #0
 8028b42:	d009      	beq.n	8028b58 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028b44:	68b9      	ldr	r1, [r7, #8]
 8028b46:	68f8      	ldr	r0, [r7, #12]
 8028b48:	f7ff fc52 	bl	80283f0 <lfs_file_flush>
 8028b4c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b50:	2b00      	cmp	r3, #0
 8028b52:	d001      	beq.n	8028b58 <lfs_file_rawwrite+0x48>
            return err;
 8028b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b56:	e055      	b.n	8028c04 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028b58:	68bb      	ldr	r3, [r7, #8]
 8028b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028b60:	2b00      	cmp	r3, #0
 8028b62:	d009      	beq.n	8028b78 <lfs_file_rawwrite+0x68>
 8028b64:	68bb      	ldr	r3, [r7, #8]
 8028b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028b68:	68bb      	ldr	r3, [r7, #8]
 8028b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b6c:	429a      	cmp	r2, r3
 8028b6e:	d203      	bcs.n	8028b78 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028b70:	68bb      	ldr	r3, [r7, #8]
 8028b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028b74:	68bb      	ldr	r3, [r7, #8]
 8028b76:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028b78:	68bb      	ldr	r3, [r7, #8]
 8028b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028b7c:	683b      	ldr	r3, [r7, #0]
 8028b7e:	441a      	add	r2, r3
 8028b80:	68fb      	ldr	r3, [r7, #12]
 8028b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b84:	429a      	cmp	r2, r3
 8028b86:	d902      	bls.n	8028b8e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028b88:	f06f 031a 	mvn.w	r3, #26
 8028b8c:	e03a      	b.n	8028c04 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8028b8e:	68bb      	ldr	r3, [r7, #8]
 8028b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028b96:	2b00      	cmp	r3, #0
 8028b98:	d121      	bne.n	8028bde <lfs_file_rawwrite+0xce>
 8028b9a:	68bb      	ldr	r3, [r7, #8]
 8028b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028b9e:	68bb      	ldr	r3, [r7, #8]
 8028ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ba2:	429a      	cmp	r2, r3
 8028ba4:	d91b      	bls.n	8028bde <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8028ba6:	68bb      	ldr	r3, [r7, #8]
 8028ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028baa:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8028bac:	68bb      	ldr	r3, [r7, #8]
 8028bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028bb0:	68bb      	ldr	r3, [r7, #8]
 8028bb2:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8028bb4:	e00e      	b.n	8028bd4 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8028bb6:	2300      	movs	r3, #0
 8028bb8:	75fb      	strb	r3, [r7, #23]
 8028bba:	f107 0217 	add.w	r2, r7, #23
 8028bbe:	2301      	movs	r3, #1
 8028bc0:	68b9      	ldr	r1, [r7, #8]
 8028bc2:	68f8      	ldr	r0, [r7, #12]
 8028bc4:	f7ff fe7c 	bl	80288c0 <lfs_file_flushedwrite>
 8028bc8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8028bca:	69fb      	ldr	r3, [r7, #28]
 8028bcc:	2b00      	cmp	r3, #0
 8028bce:	da01      	bge.n	8028bd4 <lfs_file_rawwrite+0xc4>
                return res;
 8028bd0:	69fb      	ldr	r3, [r7, #28]
 8028bd2:	e017      	b.n	8028c04 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8028bd4:	68bb      	ldr	r3, [r7, #8]
 8028bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028bd8:	6a3a      	ldr	r2, [r7, #32]
 8028bda:	429a      	cmp	r2, r3
 8028bdc:	d8eb      	bhi.n	8028bb6 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8028bde:	683b      	ldr	r3, [r7, #0]
 8028be0:	687a      	ldr	r2, [r7, #4]
 8028be2:	68b9      	ldr	r1, [r7, #8]
 8028be4:	68f8      	ldr	r0, [r7, #12]
 8028be6:	f7ff fe6b 	bl	80288c0 <lfs_file_flushedwrite>
 8028bea:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8028bec:	69bb      	ldr	r3, [r7, #24]
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	da01      	bge.n	8028bf6 <lfs_file_rawwrite+0xe6>
        return nsize;
 8028bf2:	69bb      	ldr	r3, [r7, #24]
 8028bf4:	e006      	b.n	8028c04 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8028bf6:	68bb      	ldr	r3, [r7, #8]
 8028bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bfa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8028bfe:	68bb      	ldr	r3, [r7, #8]
 8028c00:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8028c02:	69bb      	ldr	r3, [r7, #24]
}
 8028c04:	4618      	mov	r0, r3
 8028c06:	3728      	adds	r7, #40	; 0x28
 8028c08:	46bd      	mov	sp, r7
 8028c0a:	bd80      	pop	{r7, pc}
 8028c0c:	08033788 	.word	0x08033788
 8028c10:	08034780 	.word	0x08034780
 8028c14:	0803341c 	.word	0x0803341c

08028c18 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8028c18:	b580      	push	{r7, lr}
 8028c1a:	b08c      	sub	sp, #48	; 0x30
 8028c1c:	af00      	add	r7, sp, #0
 8028c1e:	60f8      	str	r0, [r7, #12]
 8028c20:	60b9      	str	r1, [r7, #8]
 8028c22:	607a      	str	r2, [r7, #4]
 8028c24:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8028c26:	68bb      	ldr	r3, [r7, #8]
 8028c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8028c2c:	683b      	ldr	r3, [r7, #0]
 8028c2e:	2b00      	cmp	r3, #0
 8028c30:	d102      	bne.n	8028c38 <lfs_file_rawseek+0x20>
        npos = off;
 8028c32:	687b      	ldr	r3, [r7, #4]
 8028c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028c36:	e025      	b.n	8028c84 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8028c38:	683b      	ldr	r3, [r7, #0]
 8028c3a:	2b01      	cmp	r3, #1
 8028c3c:	d10f      	bne.n	8028c5e <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8028c3e:	68bb      	ldr	r3, [r7, #8]
 8028c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028c42:	461a      	mov	r2, r3
 8028c44:	687b      	ldr	r3, [r7, #4]
 8028c46:	4413      	add	r3, r2
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	da02      	bge.n	8028c52 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8028c4c:	f06f 0315 	mvn.w	r3, #21
 8028c50:	e067      	b.n	8028d22 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8028c52:	68bb      	ldr	r3, [r7, #8]
 8028c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028c56:	687b      	ldr	r3, [r7, #4]
 8028c58:	4413      	add	r3, r2
 8028c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028c5c:	e012      	b.n	8028c84 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8028c5e:	683b      	ldr	r3, [r7, #0]
 8028c60:	2b02      	cmp	r3, #2
 8028c62:	d10f      	bne.n	8028c84 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8028c64:	68b9      	ldr	r1, [r7, #8]
 8028c66:	68f8      	ldr	r0, [r7, #12]
 8028c68:	f000 f85f 	bl	8028d2a <lfs_file_rawsize>
 8028c6c:	4602      	mov	r2, r0
 8028c6e:	687b      	ldr	r3, [r7, #4]
 8028c70:	4413      	add	r3, r2
 8028c72:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8028c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	da02      	bge.n	8028c80 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8028c7a:	f06f 0315 	mvn.w	r3, #21
 8028c7e:	e050      	b.n	8028d22 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8028c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8028c84:	68fb      	ldr	r3, [r7, #12]
 8028c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028c8a:	429a      	cmp	r2, r3
 8028c8c:	d902      	bls.n	8028c94 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8028c8e:	f06f 0315 	mvn.w	r3, #21
 8028c92:	e046      	b.n	8028d22 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8028c94:	68bb      	ldr	r3, [r7, #8]
 8028c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028c9a:	429a      	cmp	r2, r3
 8028c9c:	d101      	bne.n	8028ca2 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8028c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ca0:	e03f      	b.n	8028d22 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8028ca2:	68bb      	ldr	r3, [r7, #8]
 8028ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8028caa:	2b00      	cmp	r3, #0
 8028cac:	d12b      	bne.n	8028d06 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8028cae:	68bb      	ldr	r3, [r7, #8]
 8028cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028cb2:	61bb      	str	r3, [r7, #24]
 8028cb4:	f107 0318 	add.w	r3, r7, #24
 8028cb8:	4619      	mov	r1, r3
 8028cba:	68f8      	ldr	r0, [r7, #12]
 8028cbc:	f7fe fe86 	bl	80279cc <lfs_ctz_index>
 8028cc0:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8028cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028cc4:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8028cc6:	f107 0314 	add.w	r3, r7, #20
 8028cca:	4619      	mov	r1, r3
 8028ccc:	68f8      	ldr	r0, [r7, #12]
 8028cce:	f7fe fe7d 	bl	80279cc <lfs_ctz_index>
 8028cd2:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8028cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028cd6:	6a3b      	ldr	r3, [r7, #32]
 8028cd8:	429a      	cmp	r2, r3
 8028cda:	d114      	bne.n	8028d06 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8028cdc:	68bb      	ldr	r3, [r7, #8]
 8028cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028ce0:	697b      	ldr	r3, [r7, #20]
 8028ce2:	429a      	cmp	r2, r3
 8028ce4:	d80f      	bhi.n	8028d06 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8028ce6:	68bb      	ldr	r3, [r7, #8]
 8028ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028cea:	68bb      	ldr	r3, [r7, #8]
 8028cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028cee:	441a      	add	r2, r3
 8028cf0:	697b      	ldr	r3, [r7, #20]
 8028cf2:	429a      	cmp	r2, r3
 8028cf4:	d907      	bls.n	8028d06 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8028cf6:	68bb      	ldr	r3, [r7, #8]
 8028cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028cfa:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8028cfc:	697a      	ldr	r2, [r7, #20]
 8028cfe:	68bb      	ldr	r3, [r7, #8]
 8028d00:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8028d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028d04:	e00d      	b.n	8028d22 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8028d06:	68b9      	ldr	r1, [r7, #8]
 8028d08:	68f8      	ldr	r0, [r7, #12]
 8028d0a:	f7ff fb71 	bl	80283f0 <lfs_file_flush>
 8028d0e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8028d10:	69fb      	ldr	r3, [r7, #28]
 8028d12:	2b00      	cmp	r3, #0
 8028d14:	d001      	beq.n	8028d1a <lfs_file_rawseek+0x102>
        return err;
 8028d16:	69fb      	ldr	r3, [r7, #28]
 8028d18:	e003      	b.n	8028d22 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8028d1a:	68bb      	ldr	r3, [r7, #8]
 8028d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028d1e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8028d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8028d22:	4618      	mov	r0, r3
 8028d24:	3730      	adds	r7, #48	; 0x30
 8028d26:	46bd      	mov	sp, r7
 8028d28:	bd80      	pop	{r7, pc}

08028d2a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8028d2a:	b580      	push	{r7, lr}
 8028d2c:	b082      	sub	sp, #8
 8028d2e:	af00      	add	r7, sp, #0
 8028d30:	6078      	str	r0, [r7, #4]
 8028d32:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028d34:	683b      	ldr	r3, [r7, #0]
 8028d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028d3c:	2b00      	cmp	r3, #0
 8028d3e:	d009      	beq.n	8028d54 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8028d40:	683b      	ldr	r3, [r7, #0]
 8028d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028d44:	683b      	ldr	r3, [r7, #0]
 8028d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028d48:	4619      	mov	r1, r3
 8028d4a:	4610      	mov	r0, r2
 8028d4c:	f7fa fc02 	bl	8023554 <lfs_max>
 8028d50:	4603      	mov	r3, r0
 8028d52:	e001      	b.n	8028d58 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8028d54:	683b      	ldr	r3, [r7, #0]
 8028d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8028d58:	4618      	mov	r0, r3
 8028d5a:	3708      	adds	r7, #8
 8028d5c:	46bd      	mov	sp, r7
 8028d5e:	bd80      	pop	{r7, pc}

08028d60 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8028d60:	b580      	push	{r7, lr}
 8028d62:	b08e      	sub	sp, #56	; 0x38
 8028d64:	af00      	add	r7, sp, #0
 8028d66:	60f8      	str	r0, [r7, #12]
 8028d68:	60b9      	str	r1, [r7, #8]
 8028d6a:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028d6c:	f107 0208 	add.w	r2, r7, #8
 8028d70:	f107 0114 	add.w	r1, r7, #20
 8028d74:	2300      	movs	r3, #0
 8028d76:	68f8      	ldr	r0, [r7, #12]
 8028d78:	f7fc feae 	bl	8025ad8 <lfs_dir_find>
 8028d7c:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8028d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028d80:	2b00      	cmp	r3, #0
 8028d82:	da01      	bge.n	8028d88 <lfs_rawstat+0x28>
        return (int)tag;
 8028d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028d86:	e00c      	b.n	8028da2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8028d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028d8a:	4618      	mov	r0, r3
 8028d8c:	f7fb f908 	bl	8023fa0 <lfs_tag_id>
 8028d90:	4603      	mov	r3, r0
 8028d92:	461a      	mov	r2, r3
 8028d94:	f107 0114 	add.w	r1, r7, #20
 8028d98:	687b      	ldr	r3, [r7, #4]
 8028d9a:	68f8      	ldr	r0, [r7, #12]
 8028d9c:	f7fc fdd8 	bl	8025950 <lfs_dir_getinfo>
 8028da0:	4603      	mov	r3, r0
}
 8028da2:	4618      	mov	r0, r3
 8028da4:	3738      	adds	r7, #56	; 0x38
 8028da6:	46bd      	mov	sp, r7
 8028da8:	bd80      	pop	{r7, pc}
	...

08028dac <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8028dac:	b580      	push	{r7, lr}
 8028dae:	b0a0      	sub	sp, #128	; 0x80
 8028db0:	af02      	add	r7, sp, #8
 8028db2:	6078      	str	r0, [r7, #4]
 8028db4:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028db6:	6878      	ldr	r0, [r7, #4]
 8028db8:	f001 fba2 	bl	802a500 <lfs_fs_forceconsistency>
 8028dbc:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 8028dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028dc0:	2b00      	cmp	r3, #0
 8028dc2:	d001      	beq.n	8028dc8 <lfs_rawremove+0x1c>
        return err;
 8028dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028dc6:	e0c4      	b.n	8028f52 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028dc8:	463a      	mov	r2, r7
 8028dca:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028dce:	2300      	movs	r3, #0
 8028dd0:	6878      	ldr	r0, [r7, #4]
 8028dd2:	f7fc fe81 	bl	8025ad8 <lfs_dir_find>
 8028dd6:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8028dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028dda:	2b00      	cmp	r3, #0
 8028ddc:	db09      	blt.n	8028df2 <lfs_rawremove+0x46>
 8028dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028de0:	4618      	mov	r0, r3
 8028de2:	f7fb f8dd 	bl	8023fa0 <lfs_tag_id>
 8028de6:	4603      	mov	r3, r0
 8028de8:	461a      	mov	r2, r3
 8028dea:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028dee:	429a      	cmp	r2, r3
 8028df0:	d107      	bne.n	8028e02 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8028df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028df4:	2b00      	cmp	r3, #0
 8028df6:	da01      	bge.n	8028dfc <lfs_rawremove+0x50>
 8028df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028dfa:	e0aa      	b.n	8028f52 <lfs_rawremove+0x1a6>
 8028dfc:	f06f 0315 	mvn.w	r3, #21
 8028e00:	e0a7      	b.n	8028f52 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8028e02:	687b      	ldr	r3, [r7, #4]
 8028e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e06:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028e0a:	4618      	mov	r0, r3
 8028e0c:	f7fb f89e 	bl	8023f4c <lfs_tag_type3>
 8028e10:	4603      	mov	r3, r0
 8028e12:	2b02      	cmp	r3, #2
 8028e14:	d14a      	bne.n	8028eac <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8028e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028e18:	4618      	mov	r0, r3
 8028e1a:	f7fb f8c1 	bl	8023fa0 <lfs_tag_id>
 8028e1e:	4603      	mov	r3, r0
 8028e20:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8028e22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028e26:	f043 0308 	orr.w	r3, r3, #8
 8028e2a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028e2e:	f107 020c 	add.w	r2, r7, #12
 8028e32:	9200      	str	r2, [sp, #0]
 8028e34:	4a49      	ldr	r2, [pc, #292]	; (8028f5c <lfs_rawremove+0x1b0>)
 8028e36:	6878      	ldr	r0, [r7, #4]
 8028e38:	f7fb fc9c 	bl	8024774 <lfs_dir_get>
 8028e3c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 8028e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028e40:	2b00      	cmp	r3, #0
 8028e42:	da01      	bge.n	8028e48 <lfs_rawremove+0x9c>
            return (int)res;
 8028e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028e46:	e084      	b.n	8028f52 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8028e48:	f107 030c 	add.w	r3, r7, #12
 8028e4c:	4618      	mov	r0, r3
 8028e4e:	f7fb f818 	bl	8023e82 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8028e52:	f107 020c 	add.w	r2, r7, #12
 8028e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028e5a:	3308      	adds	r3, #8
 8028e5c:	4619      	mov	r1, r3
 8028e5e:	6878      	ldr	r0, [r7, #4]
 8028e60:	f7fc fd28 	bl	80258b4 <lfs_dir_fetch>
 8028e64:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e68:	2b00      	cmp	r3, #0
 8028e6a:	d001      	beq.n	8028e70 <lfs_rawremove+0xc4>
            return err;
 8028e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e6e:	e070      	b.n	8028f52 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8028e70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8028e74:	2b00      	cmp	r3, #0
 8028e76:	d103      	bne.n	8028e80 <lfs_rawremove+0xd4>
 8028e78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8028e7c:	2b00      	cmp	r3, #0
 8028e7e:	d002      	beq.n	8028e86 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8028e80:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8028e84:	e065      	b.n	8028f52 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8028e86:	2101      	movs	r1, #1
 8028e88:	6878      	ldr	r0, [r7, #4]
 8028e8a:	f001 f8bb 	bl	802a004 <lfs_fs_preporphans>
 8028e8e:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e92:	2b00      	cmp	r3, #0
 8028e94:	d001      	beq.n	8028e9a <lfs_rawremove+0xee>
            return err;
 8028e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e98:	e05b      	b.n	8028f52 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8028e9a:	2300      	movs	r3, #0
 8028e9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 8028ea0:	2300      	movs	r3, #0
 8028ea2:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 8028ea4:	687b      	ldr	r3, [r7, #4]
 8028ea6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028eaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8028eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028eae:	4618      	mov	r0, r3
 8028eb0:	f7fb f876 	bl	8023fa0 <lfs_tag_id>
 8028eb4:	4603      	mov	r3, r0
 8028eb6:	029b      	lsls	r3, r3, #10
 8028eb8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8028ebc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028ec0:	61fb      	str	r3, [r7, #28]
 8028ec2:	2300      	movs	r3, #0
 8028ec4:	623b      	str	r3, [r7, #32]
 8028ec6:	f107 021c 	add.w	r2, r7, #28
 8028eca:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028ece:	2301      	movs	r3, #1
 8028ed0:	6878      	ldr	r0, [r7, #4]
 8028ed2:	f7fe fb09 	bl	80274e8 <lfs_dir_commit>
 8028ed6:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8028ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028eda:	2b00      	cmp	r3, #0
 8028edc:	d004      	beq.n	8028ee8 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 8028ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028ee0:	687b      	ldr	r3, [r7, #4]
 8028ee2:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8028ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028ee6:	e034      	b.n	8028f52 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8028ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028eea:	687b      	ldr	r3, [r7, #4]
 8028eec:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028ef0:	4618      	mov	r0, r3
 8028ef2:	f7fb f82b 	bl	8023f4c <lfs_tag_type3>
 8028ef6:	4603      	mov	r3, r0
 8028ef8:	2b02      	cmp	r3, #2
 8028efa:	d129      	bne.n	8028f50 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8028efc:	f04f 31ff 	mov.w	r1, #4294967295
 8028f00:	6878      	ldr	r0, [r7, #4]
 8028f02:	f001 f87f 	bl	802a004 <lfs_fs_preporphans>
 8028f06:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f0a:	2b00      	cmp	r3, #0
 8028f0c:	d001      	beq.n	8028f12 <lfs_rawremove+0x166>
            return err;
 8028f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f10:	e01f      	b.n	8028f52 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8028f12:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8028f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028f1a:	3308      	adds	r3, #8
 8028f1c:	4619      	mov	r1, r3
 8028f1e:	6878      	ldr	r0, [r7, #4]
 8028f20:	f000 ff90 	bl	8029e44 <lfs_fs_pred>
 8028f24:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f28:	2b00      	cmp	r3, #0
 8028f2a:	d001      	beq.n	8028f30 <lfs_rawremove+0x184>
            return err;
 8028f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f2e:	e010      	b.n	8028f52 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8028f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028f34:	f103 0208 	add.w	r2, r3, #8
 8028f38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8028f3c:	4619      	mov	r1, r3
 8028f3e:	6878      	ldr	r0, [r7, #4]
 8028f40:	f7fd f930 	bl	80261a4 <lfs_dir_drop>
 8028f44:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f48:	2b00      	cmp	r3, #0
 8028f4a:	d001      	beq.n	8028f50 <lfs_rawremove+0x1a4>
            return err;
 8028f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f4e:	e000      	b.n	8028f52 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8028f50:	2300      	movs	r3, #0
}
 8028f52:	4618      	mov	r0, r3
 8028f54:	3778      	adds	r7, #120	; 0x78
 8028f56:	46bd      	mov	sp, r7
 8028f58:	bd80      	pop	{r7, pc}
 8028f5a:	bf00      	nop
 8028f5c:	700ffc00 	.word	0x700ffc00

08028f60 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8028f60:	b590      	push	{r4, r7, lr}
 8028f62:	b0c3      	sub	sp, #268	; 0x10c
 8028f64:	af02      	add	r7, sp, #8
 8028f66:	60f8      	str	r0, [r7, #12]
 8028f68:	60b9      	str	r1, [r7, #8]
 8028f6a:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028f6c:	68f8      	ldr	r0, [r7, #12]
 8028f6e:	f001 fac7 	bl	802a500 <lfs_fs_forceconsistency>
 8028f72:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (err) {
 8028f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f7a:	2b00      	cmp	r3, #0
 8028f7c:	d002      	beq.n	8028f84 <lfs_rawrename+0x24>
        return err;
 8028f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f82:	e1f7      	b.n	8029374 <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8028f84:	f107 0208 	add.w	r2, r7, #8
 8028f88:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8028f8c:	2300      	movs	r3, #0
 8028f8e:	68f8      	ldr	r0, [r7, #12]
 8028f90:	f7fc fda2 	bl	8025ad8 <lfs_dir_find>
 8028f94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8028f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028f9c:	2b00      	cmp	r3, #0
 8028f9e:	db0a      	blt.n	8028fb6 <lfs_rawrename+0x56>
 8028fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028fa4:	4618      	mov	r0, r3
 8028fa6:	f7fa fffb 	bl	8023fa0 <lfs_tag_id>
 8028faa:	4603      	mov	r3, r0
 8028fac:	461a      	mov	r2, r3
 8028fae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028fb2:	429a      	cmp	r2, r3
 8028fb4:	d109      	bne.n	8028fca <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8028fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	da02      	bge.n	8028fc4 <lfs_rawrename+0x64>
 8028fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028fc2:	e1d7      	b.n	8029374 <lfs_rawrename+0x414>
 8028fc4:	f06f 0315 	mvn.w	r3, #21
 8028fc8:	e1d4      	b.n	8029374 <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8028fca:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 8028fce:	1d3a      	adds	r2, r7, #4
 8028fd0:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8028fd4:	68f8      	ldr	r0, [r7, #12]
 8028fd6:	f7fc fd7f 	bl	8025ad8 <lfs_dir_find>
 8028fda:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8028fde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028fe2:	2b00      	cmp	r3, #0
 8028fe4:	db0a      	blt.n	8028ffc <lfs_rawrename+0x9c>
 8028fe6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028fea:	4618      	mov	r0, r3
 8028fec:	f7fa ffd8 	bl	8023fa0 <lfs_tag_id>
 8028ff0:	4603      	mov	r3, r0
 8028ff2:	461a      	mov	r2, r3
 8028ff4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028ff8:	429a      	cmp	r2, r3
 8028ffa:	d114      	bne.n	8029026 <lfs_rawrename+0xc6>
 8028ffc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029000:	f113 0f02 	cmn.w	r3, #2
 8029004:	d105      	bne.n	8029012 <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8029006:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802900a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802900e:	4293      	cmp	r3, r2
 8029010:	d109      	bne.n	8029026 <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8029012:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029016:	2b00      	cmp	r3, #0
 8029018:	da02      	bge.n	8029020 <lfs_rawrename+0xc0>
 802901a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802901e:	e1a9      	b.n	8029374 <lfs_rawrename+0x414>
 8029020:	f06f 0315 	mvn.w	r3, #21
 8029024:	e1a6      	b.n	8029374 <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8029026:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802902a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 802902e:	4611      	mov	r1, r2
 8029030:	4618      	mov	r0, r3
 8029032:	f7fa fecf 	bl	8023dd4 <lfs_pair_cmp>
 8029036:	4603      	mov	r3, r0
 8029038:	2b00      	cmp	r3, #0
 802903a:	bf0c      	ite	eq
 802903c:	2301      	moveq	r3, #1
 802903e:	2300      	movne	r3, #0
 8029040:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8029044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029048:	4618      	mov	r0, r3
 802904a:	f7fa ffa9 	bl	8023fa0 <lfs_tag_id>
 802904e:	4603      	mov	r3, r0
 8029050:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8029054:	68fb      	ldr	r3, [r7, #12]
 8029056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029058:	67bb      	str	r3, [r7, #120]	; 0x78
    if (prevtag == LFS_ERR_NOENT) {
 802905a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802905e:	f113 0f02 	cmn.w	r3, #2
 8029062:	d11f      	bne.n	80290a4 <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8029064:	687b      	ldr	r3, [r7, #4]
 8029066:	4618      	mov	r0, r3
 8029068:	f7e7 f91a 	bl	80102a0 <strlen>
 802906c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        if (nlen > lfs->name_max) {
 8029070:	68fb      	ldr	r3, [r7, #12]
 8029072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029074:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8029078:	429a      	cmp	r2, r3
 802907a:	d902      	bls.n	8029082 <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 802907c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8029080:	e178      	b.n	8029374 <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8029082:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029086:	2b00      	cmp	r3, #0
 8029088:	f000 8084 	beq.w	8029194 <lfs_rawrename+0x234>
 802908c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029090:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8029094:	429a      	cmp	r2, r3
 8029096:	d37d      	bcc.n	8029194 <lfs_rawrename+0x234>
            newoldid += 1;
 8029098:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 802909c:	3301      	adds	r3, #1
 802909e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80290a2:	e077      	b.n	8029194 <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 80290a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80290a8:	4618      	mov	r0, r3
 80290aa:	f7fa ff4f 	bl	8023f4c <lfs_tag_type3>
 80290ae:	4603      	mov	r3, r0
 80290b0:	461c      	mov	r4, r3
 80290b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80290b6:	4618      	mov	r0, r3
 80290b8:	f7fa ff48 	bl	8023f4c <lfs_tag_type3>
 80290bc:	4603      	mov	r3, r0
 80290be:	429c      	cmp	r4, r3
 80290c0:	d002      	beq.n	80290c8 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 80290c2:	f06f 0314 	mvn.w	r3, #20
 80290c6:	e155      	b.n	8029374 <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 80290c8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80290cc:	2b00      	cmp	r3, #0
 80290ce:	d007      	beq.n	80290e0 <lfs_rawrename+0x180>
 80290d0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80290d4:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80290d8:	429a      	cmp	r2, r3
 80290da:	d101      	bne.n	80290e0 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 80290dc:	2300      	movs	r3, #0
 80290de:	e149      	b.n	8029374 <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 80290e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80290e4:	4618      	mov	r0, r3
 80290e6:	f7fa ff31 	bl	8023f4c <lfs_tag_type3>
 80290ea:	4603      	mov	r3, r0
 80290ec:	2b02      	cmp	r3, #2
 80290ee:	d151      	bne.n	8029194 <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 80290f0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80290f4:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 80290f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80290fa:	f043 0308 	orr.w	r3, r3, #8
 80290fe:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029102:	f107 0220 	add.w	r2, r7, #32
 8029106:	9200      	str	r2, [sp, #0]
 8029108:	4a9d      	ldr	r2, [pc, #628]	; (8029380 <lfs_rawrename+0x420>)
 802910a:	68f8      	ldr	r0, [r7, #12]
 802910c:	f7fb fb32 	bl	8024774 <lfs_dir_get>
 8029110:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (res < 0) {
 8029114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029118:	2b00      	cmp	r3, #0
 802911a:	da02      	bge.n	8029122 <lfs_rawrename+0x1c2>
            return (int)res;
 802911c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029120:	e128      	b.n	8029374 <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 8029122:	f107 0320 	add.w	r3, r7, #32
 8029126:	4618      	mov	r0, r3
 8029128:	f7fa feab 	bl	8023e82 <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 802912c:	f107 0220 	add.w	r2, r7, #32
 8029130:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029134:	3308      	adds	r3, #8
 8029136:	4619      	mov	r1, r3
 8029138:	68f8      	ldr	r0, [r7, #12]
 802913a:	f7fc fbbb 	bl	80258b4 <lfs_dir_fetch>
 802913e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029146:	2b00      	cmp	r3, #0
 8029148:	d002      	beq.n	8029150 <lfs_rawrename+0x1f0>
            return err;
 802914a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802914e:	e111      	b.n	8029374 <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8029150:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8029154:	2b00      	cmp	r3, #0
 8029156:	d103      	bne.n	8029160 <lfs_rawrename+0x200>
 8029158:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 802915c:	2b00      	cmp	r3, #0
 802915e:	d002      	beq.n	8029166 <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 8029160:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8029164:	e106      	b.n	8029374 <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8029166:	2101      	movs	r1, #1
 8029168:	68f8      	ldr	r0, [r7, #12]
 802916a:	f000 ff4b 	bl	802a004 <lfs_fs_preporphans>
 802916e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029176:	2b00      	cmp	r3, #0
 8029178:	d002      	beq.n	8029180 <lfs_rawrename+0x220>
            return err;
 802917a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802917e:	e0f9      	b.n	8029374 <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8029180:	2300      	movs	r3, #0
 8029182:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        prevdir.id = 0;
 8029186:	2300      	movs	r3, #0
 8029188:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        lfs->mlist = &prevdir;
 802918c:	68fb      	ldr	r3, [r7, #12]
 802918e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8029192:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (!samepair) {
 8029194:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029198:	f083 0301 	eor.w	r3, r3, #1
 802919c:	b2db      	uxtb	r3, r3
 802919e:	2b00      	cmp	r3, #0
 80291a0:	d007      	beq.n	80291b2 <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 80291a2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80291a6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80291aa:	4619      	mov	r1, r3
 80291ac:	68f8      	ldr	r0, [r7, #12]
 80291ae:	f000 ff63 	bl	802a078 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 80291b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80291b6:	f113 0f02 	cmn.w	r3, #2
 80291ba:	d007      	beq.n	80291cc <lfs_rawrename+0x26c>
 80291bc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80291c0:	029b      	lsls	r3, r3, #10
 80291c2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80291c6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80291ca:	e000      	b.n	80291ce <lfs_rawrename+0x26e>
 80291cc:	2300      	movs	r3, #0
 80291ce:	653b      	str	r3, [r7, #80]	; 0x50
 80291d0:	2300      	movs	r3, #0
 80291d2:	657b      	str	r3, [r7, #84]	; 0x54
 80291d4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80291d8:	029b      	lsls	r3, r3, #10
 80291da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80291de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80291e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80291e4:	2300      	movs	r3, #0
 80291e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80291e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80291ec:	4618      	mov	r0, r3
 80291ee:	f7fa fead 	bl	8023f4c <lfs_tag_type3>
 80291f2:	4603      	mov	r3, r0
 80291f4:	051a      	lsls	r2, r3, #20
 80291f6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80291fa:	029b      	lsls	r3, r3, #10
 80291fc:	ea42 0403 	orr.w	r4, r2, r3
 8029200:	687b      	ldr	r3, [r7, #4]
 8029202:	4618      	mov	r0, r3
 8029204:	f7e7 f84c 	bl	80102a0 <strlen>
 8029208:	4603      	mov	r3, r0
 802920a:	4323      	orrs	r3, r4
 802920c:	663b      	str	r3, [r7, #96]	; 0x60
 802920e:	687b      	ldr	r3, [r7, #4]
 8029210:	667b      	str	r3, [r7, #100]	; 0x64
 8029212:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029216:	029c      	lsls	r4, r3, #10
 8029218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802921c:	4618      	mov	r0, r3
 802921e:	f7fa febf 	bl	8023fa0 <lfs_tag_id>
 8029222:	4603      	mov	r3, r0
 8029224:	4323      	orrs	r3, r4
 8029226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802922a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802922e:	66bb      	str	r3, [r7, #104]	; 0x68
 8029230:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8029234:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029236:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802923a:	2b00      	cmp	r3, #0
 802923c:	d007      	beq.n	802924e <lfs_rawrename+0x2ee>
 802923e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8029242:	029b      	lsls	r3, r3, #10
 8029244:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029248:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802924c:	e000      	b.n	8029250 <lfs_rawrename+0x2f0>
 802924e:	2300      	movs	r3, #0
 8029250:	673b      	str	r3, [r7, #112]	; 0x70
 8029252:	2300      	movs	r3, #0
 8029254:	677b      	str	r3, [r7, #116]	; 0x74
 8029256:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802925a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802925e:	2305      	movs	r3, #5
 8029260:	68f8      	ldr	r0, [r7, #12]
 8029262:	f7fe f941 	bl	80274e8 <lfs_dir_commit>
 8029266:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 802926a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802926e:	2b00      	cmp	r3, #0
 8029270:	d005      	beq.n	802927e <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 8029272:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029274:	68fb      	ldr	r3, [r7, #12]
 8029276:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8029278:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802927c:	e07a      	b.n	8029374 <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 802927e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029282:	f083 0301 	eor.w	r3, r3, #1
 8029286:	b2db      	uxtb	r3, r3
 8029288:	2b00      	cmp	r3, #0
 802928a:	d02f      	beq.n	80292ec <lfs_rawrename+0x38c>
 802928c:	68fb      	ldr	r3, [r7, #12]
 802928e:	3330      	adds	r3, #48	; 0x30
 8029290:	4618      	mov	r0, r3
 8029292:	f7fa ff1a 	bl	80240ca <lfs_gstate_hasmove>
 8029296:	4603      	mov	r3, r0
 8029298:	2b00      	cmp	r3, #0
 802929a:	d027      	beq.n	80292ec <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802929c:	2200      	movs	r2, #0
 802929e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80292a2:	68f8      	ldr	r0, [r7, #12]
 80292a4:	f000 fee8 	bl	802a078 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 80292a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80292ac:	4618      	mov	r0, r3
 80292ae:	f7fa fe77 	bl	8023fa0 <lfs_tag_id>
 80292b2:	4603      	mov	r3, r0
 80292b4:	029b      	lsls	r3, r3, #10
 80292b6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80292ba:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80292be:	61bb      	str	r3, [r7, #24]
 80292c0:	2300      	movs	r3, #0
 80292c2:	61fb      	str	r3, [r7, #28]
 80292c4:	f107 0218 	add.w	r2, r7, #24
 80292c8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80292cc:	2301      	movs	r3, #1
 80292ce:	68f8      	ldr	r0, [r7, #12]
 80292d0:	f7fe f90a 	bl	80274e8 <lfs_dir_commit>
 80292d4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 80292d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292dc:	2b00      	cmp	r3, #0
 80292de:	d005      	beq.n	80292ec <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 80292e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80292e2:	68fb      	ldr	r3, [r7, #12]
 80292e4:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 80292e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292ea:	e043      	b.n	8029374 <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 80292ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80292ee:	68fb      	ldr	r3, [r7, #12]
 80292f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
 80292f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80292f6:	f113 0f02 	cmn.w	r3, #2
 80292fa:	d03a      	beq.n	8029372 <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 80292fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029300:	4618      	mov	r0, r3
 8029302:	f7fa fe23 	bl	8023f4c <lfs_tag_type3>
 8029306:	4603      	mov	r3, r0
 8029308:	2b02      	cmp	r3, #2
 802930a:	d132      	bne.n	8029372 <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802930c:	f04f 31ff 	mov.w	r1, #4294967295
 8029310:	68f8      	ldr	r0, [r7, #12]
 8029312:	f000 fe77 	bl	802a004 <lfs_fs_preporphans>
 8029316:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802931a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802931e:	2b00      	cmp	r3, #0
 8029320:	d002      	beq.n	8029328 <lfs_rawrename+0x3c8>
            return err;
 8029322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029326:	e025      	b.n	8029374 <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8029328:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802932c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029330:	3308      	adds	r3, #8
 8029332:	4619      	mov	r1, r3
 8029334:	68f8      	ldr	r0, [r7, #12]
 8029336:	f000 fd85 	bl	8029e44 <lfs_fs_pred>
 802933a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802933e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029342:	2b00      	cmp	r3, #0
 8029344:	d002      	beq.n	802934c <lfs_rawrename+0x3ec>
            return err;
 8029346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802934a:	e013      	b.n	8029374 <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 802934c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029350:	f103 0208 	add.w	r2, r3, #8
 8029354:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8029358:	4619      	mov	r1, r3
 802935a:	68f8      	ldr	r0, [r7, #12]
 802935c:	f7fc ff22 	bl	80261a4 <lfs_dir_drop>
 8029360:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029368:	2b00      	cmp	r3, #0
 802936a:	d002      	beq.n	8029372 <lfs_rawrename+0x412>
            return err;
 802936c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029370:	e000      	b.n	8029374 <lfs_rawrename+0x414>
        }
    }

    return 0;
 8029372:	2300      	movs	r3, #0
}
 8029374:	4618      	mov	r0, r3
 8029376:	f507 7782 	add.w	r7, r7, #260	; 0x104
 802937a:	46bd      	mov	sp, r7
 802937c:	bd90      	pop	{r4, r7, pc}
 802937e:	bf00      	nop
 8029380:	700ffc00 	.word	0x700ffc00

08029384 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8029384:	b580      	push	{r7, lr}
 8029386:	b08c      	sub	sp, #48	; 0x30
 8029388:	af00      	add	r7, sp, #0
 802938a:	6078      	str	r0, [r7, #4]
 802938c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 802938e:	687b      	ldr	r3, [r7, #4]
 8029390:	683a      	ldr	r2, [r7, #0]
 8029392:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8029394:	2300      	movs	r3, #0
 8029396:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8029398:	687b      	ldr	r3, [r7, #4]
 802939a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802939c:	695b      	ldr	r3, [r3, #20]
 802939e:	2b00      	cmp	r3, #0
 80293a0:	d106      	bne.n	80293b0 <lfs_init+0x2c>
 80293a2:	4b92      	ldr	r3, [pc, #584]	; (80295ec <lfs_init+0x268>)
 80293a4:	4a92      	ldr	r2, [pc, #584]	; (80295f0 <lfs_init+0x26c>)
 80293a6:	f640 7146 	movw	r1, #3910	; 0xf46
 80293aa:	4892      	ldr	r0, [pc, #584]	; (80295f4 <lfs_init+0x270>)
 80293ac:	f003 f826 	bl	802c3fc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80293b0:	687b      	ldr	r3, [r7, #4]
 80293b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293b4:	699b      	ldr	r3, [r3, #24]
 80293b6:	2b00      	cmp	r3, #0
 80293b8:	d106      	bne.n	80293c8 <lfs_init+0x44>
 80293ba:	4b8f      	ldr	r3, [pc, #572]	; (80295f8 <lfs_init+0x274>)
 80293bc:	4a8c      	ldr	r2, [pc, #560]	; (80295f0 <lfs_init+0x26c>)
 80293be:	f640 7147 	movw	r1, #3911	; 0xf47
 80293c2:	488c      	ldr	r0, [pc, #560]	; (80295f4 <lfs_init+0x270>)
 80293c4:	f003 f81a 	bl	802c3fc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80293c8:	687b      	ldr	r3, [r7, #4]
 80293ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80293ce:	2b00      	cmp	r3, #0
 80293d0:	d106      	bne.n	80293e0 <lfs_init+0x5c>
 80293d2:	4b8a      	ldr	r3, [pc, #552]	; (80295fc <lfs_init+0x278>)
 80293d4:	4a86      	ldr	r2, [pc, #536]	; (80295f0 <lfs_init+0x26c>)
 80293d6:	f640 7148 	movw	r1, #3912	; 0xf48
 80293da:	4886      	ldr	r0, [pc, #536]	; (80295f4 <lfs_init+0x270>)
 80293dc:	f003 f80e 	bl	802c3fc <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80293e0:	687b      	ldr	r3, [r7, #4]
 80293e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80293e6:	687a      	ldr	r2, [r7, #4]
 80293e8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80293ea:	6952      	ldr	r2, [r2, #20]
 80293ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80293f0:	fb01 f202 	mul.w	r2, r1, r2
 80293f4:	1a9b      	subs	r3, r3, r2
 80293f6:	2b00      	cmp	r3, #0
 80293f8:	d006      	beq.n	8029408 <lfs_init+0x84>
 80293fa:	4b81      	ldr	r3, [pc, #516]	; (8029600 <lfs_init+0x27c>)
 80293fc:	4a7c      	ldr	r2, [pc, #496]	; (80295f0 <lfs_init+0x26c>)
 80293fe:	f640 714c 	movw	r1, #3916	; 0xf4c
 8029402:	487c      	ldr	r0, [pc, #496]	; (80295f4 <lfs_init+0x270>)
 8029404:	f002 fffa 	bl	802c3fc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802940e:	687a      	ldr	r2, [r7, #4]
 8029410:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029412:	6992      	ldr	r2, [r2, #24]
 8029414:	fbb3 f1f2 	udiv	r1, r3, r2
 8029418:	fb01 f202 	mul.w	r2, r1, r2
 802941c:	1a9b      	subs	r3, r3, r2
 802941e:	2b00      	cmp	r3, #0
 8029420:	d006      	beq.n	8029430 <lfs_init+0xac>
 8029422:	4b78      	ldr	r3, [pc, #480]	; (8029604 <lfs_init+0x280>)
 8029424:	4a72      	ldr	r2, [pc, #456]	; (80295f0 <lfs_init+0x26c>)
 8029426:	f640 714d 	movw	r1, #3917	; 0xf4d
 802942a:	4872      	ldr	r0, [pc, #456]	; (80295f4 <lfs_init+0x270>)
 802942c:	f002 ffe6 	bl	802c3fc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8029430:	687b      	ldr	r3, [r7, #4]
 8029432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029434:	69db      	ldr	r3, [r3, #28]
 8029436:	687a      	ldr	r2, [r7, #4]
 8029438:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802943a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 802943c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029440:	fb01 f202 	mul.w	r2, r1, r2
 8029444:	1a9b      	subs	r3, r3, r2
 8029446:	2b00      	cmp	r3, #0
 8029448:	d006      	beq.n	8029458 <lfs_init+0xd4>
 802944a:	4b6f      	ldr	r3, [pc, #444]	; (8029608 <lfs_init+0x284>)
 802944c:	4a68      	ldr	r2, [pc, #416]	; (80295f0 <lfs_init+0x26c>)
 802944e:	f640 714e 	movw	r1, #3918	; 0xf4e
 8029452:	4868      	ldr	r0, [pc, #416]	; (80295f4 <lfs_init+0x270>)
 8029454:	f002 ffd2 	bl	802c3fc <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8029458:	687b      	ldr	r3, [r7, #4]
 802945a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802945c:	69db      	ldr	r3, [r3, #28]
 802945e:	3b08      	subs	r3, #8
 8029460:	f04f 32ff 	mov.w	r2, #4294967295
 8029464:	fbb2 f3f3 	udiv	r3, r2, r3
 8029468:	4618      	mov	r0, r3
 802946a:	f7fa f8ba 	bl	80235e2 <lfs_npw2>
 802946e:	4603      	mov	r3, r0
 8029470:	009a      	lsls	r2, r3, #2
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029476:	69db      	ldr	r3, [r3, #28]
 8029478:	429a      	cmp	r2, r3
 802947a:	d906      	bls.n	802948a <lfs_init+0x106>
 802947c:	4b63      	ldr	r3, [pc, #396]	; (802960c <lfs_init+0x288>)
 802947e:	4a5c      	ldr	r2, [pc, #368]	; (80295f0 <lfs_init+0x26c>)
 8029480:	f640 7151 	movw	r1, #3921	; 0xf51
 8029484:	485b      	ldr	r0, [pc, #364]	; (80295f4 <lfs_init+0x270>)
 8029486:	f002 ffb9 	bl	802c3fc <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029490:	2b00      	cmp	r3, #0
 8029492:	d106      	bne.n	80294a2 <lfs_init+0x11e>
 8029494:	4b5e      	ldr	r3, [pc, #376]	; (8029610 <lfs_init+0x28c>)
 8029496:	4a56      	ldr	r2, [pc, #344]	; (80295f0 <lfs_init+0x26c>)
 8029498:	f640 715a 	movw	r1, #3930	; 0xf5a
 802949c:	4855      	ldr	r0, [pc, #340]	; (80295f4 <lfs_init+0x270>)
 802949e:	f002 ffad 	bl	802c3fc <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80294a8:	2b00      	cmp	r3, #0
 80294aa:	d005      	beq.n	80294b8 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80294ac:	687b      	ldr	r3, [r7, #4]
 80294ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80294b2:	687b      	ldr	r3, [r7, #4]
 80294b4:	60da      	str	r2, [r3, #12]
 80294b6:	e010      	b.n	80294da <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80294b8:	687b      	ldr	r3, [r7, #4]
 80294ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80294be:	4618      	mov	r0, r3
 80294c0:	f7fa f8f7 	bl	80236b2 <lfs_malloc>
 80294c4:	4602      	mov	r2, r0
 80294c6:	687b      	ldr	r3, [r7, #4]
 80294c8:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	68db      	ldr	r3, [r3, #12]
 80294ce:	2b00      	cmp	r3, #0
 80294d0:	d103      	bne.n	80294da <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 80294d2:	f06f 030b 	mvn.w	r3, #11
 80294d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80294d8:	e0fd      	b.n	80296d6 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 80294da:	687b      	ldr	r3, [r7, #4]
 80294dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80294e0:	2b00      	cmp	r3, #0
 80294e2:	d005      	beq.n	80294f0 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80294e4:	687b      	ldr	r3, [r7, #4]
 80294e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80294ea:	687b      	ldr	r3, [r7, #4]
 80294ec:	61da      	str	r2, [r3, #28]
 80294ee:	e010      	b.n	8029512 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80294f6:	4618      	mov	r0, r3
 80294f8:	f7fa f8db 	bl	80236b2 <lfs_malloc>
 80294fc:	4602      	mov	r2, r0
 80294fe:	687b      	ldr	r3, [r7, #4]
 8029500:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	69db      	ldr	r3, [r3, #28]
 8029506:	2b00      	cmp	r3, #0
 8029508:	d103      	bne.n	8029512 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 802950a:	f06f 030b 	mvn.w	r3, #11
 802950e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029510:	e0e1      	b.n	80296d6 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8029512:	687b      	ldr	r3, [r7, #4]
 8029514:	4619      	mov	r1, r3
 8029516:	6878      	ldr	r0, [r7, #4]
 8029518:	f7fa f8f1 	bl	80236fe <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 802951c:	687b      	ldr	r3, [r7, #4]
 802951e:	3310      	adds	r3, #16
 8029520:	4619      	mov	r1, r3
 8029522:	6878      	ldr	r0, [r7, #4]
 8029524:	f7fa f8eb 	bl	80236fe <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8029528:	687b      	ldr	r3, [r7, #4]
 802952a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802952e:	2b00      	cmp	r3, #0
 8029530:	d106      	bne.n	8029540 <lfs_init+0x1bc>
 8029532:	4b38      	ldr	r3, [pc, #224]	; (8029614 <lfs_init+0x290>)
 8029534:	4a2e      	ldr	r2, [pc, #184]	; (80295f0 <lfs_init+0x26c>)
 8029536:	f640 7178 	movw	r1, #3960	; 0xf78
 802953a:	482e      	ldr	r0, [pc, #184]	; (80295f4 <lfs_init+0x270>)
 802953c:	f002 ff5e 	bl	802c3fc <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029546:	f003 0307 	and.w	r3, r3, #7
 802954a:	2b00      	cmp	r3, #0
 802954c:	d106      	bne.n	802955c <lfs_init+0x1d8>
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029554:	f003 0303 	and.w	r3, r3, #3
 8029558:	2b00      	cmp	r3, #0
 802955a:	d006      	beq.n	802956a <lfs_init+0x1e6>
 802955c:	4b2e      	ldr	r3, [pc, #184]	; (8029618 <lfs_init+0x294>)
 802955e:	4a24      	ldr	r2, [pc, #144]	; (80295f0 <lfs_init+0x26c>)
 8029560:	f640 7179 	movw	r1, #3961	; 0xf79
 8029564:	4823      	ldr	r0, [pc, #140]	; (80295f4 <lfs_init+0x270>)
 8029566:	f002 ff49 	bl	802c3fc <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029570:	2b00      	cmp	r3, #0
 8029572:	d005      	beq.n	8029580 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	665a      	str	r2, [r3, #100]	; 0x64
 802957e:	e010      	b.n	80295a2 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8029580:	687b      	ldr	r3, [r7, #4]
 8029582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029586:	4618      	mov	r0, r3
 8029588:	f7fa f893 	bl	80236b2 <lfs_malloc>
 802958c:	4602      	mov	r2, r0
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8029592:	687b      	ldr	r3, [r7, #4]
 8029594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029596:	2b00      	cmp	r3, #0
 8029598:	d103      	bne.n	80295a2 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 802959a:	f06f 030b 	mvn.w	r3, #11
 802959e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80295a0:	e099      	b.n	80296d6 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80295a8:	2bff      	cmp	r3, #255	; 0xff
 80295aa:	d906      	bls.n	80295ba <lfs_init+0x236>
 80295ac:	4b1b      	ldr	r3, [pc, #108]	; (802961c <lfs_init+0x298>)
 80295ae:	4a10      	ldr	r2, [pc, #64]	; (80295f0 <lfs_init+0x26c>)
 80295b0:	f640 7186 	movw	r1, #3974	; 0xf86
 80295b4:	480f      	ldr	r0, [pc, #60]	; (80295f4 <lfs_init+0x270>)
 80295b6:	f002 ff21 	bl	802c3fc <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80295c0:	687b      	ldr	r3, [r7, #4]
 80295c2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80295c4:	687b      	ldr	r3, [r7, #4]
 80295c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	d102      	bne.n	80295d2 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80295cc:	687b      	ldr	r3, [r7, #4]
 80295ce:	22ff      	movs	r2, #255	; 0xff
 80295d0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80295d2:	687b      	ldr	r3, [r7, #4]
 80295d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80295d8:	2b00      	cmp	r3, #0
 80295da:	da23      	bge.n	8029624 <lfs_init+0x2a0>
 80295dc:	4b10      	ldr	r3, [pc, #64]	; (8029620 <lfs_init+0x29c>)
 80295de:	4a04      	ldr	r2, [pc, #16]	; (80295f0 <lfs_init+0x26c>)
 80295e0:	f640 718c 	movw	r1, #3980	; 0xf8c
 80295e4:	4803      	ldr	r0, [pc, #12]	; (80295f4 <lfs_init+0x270>)
 80295e6:	f002 ff09 	bl	802c3fc <__assert_func>
 80295ea:	bf00      	nop
 80295ec:	080337b8 	.word	0x080337b8
 80295f0:	08034794 	.word	0x08034794
 80295f4:	0803341c 	.word	0x0803341c
 80295f8:	080337d4 	.word	0x080337d4
 80295fc:	080337f0 	.word	0x080337f0
 8029600:	0803380c 	.word	0x0803380c
 8029604:	0803383c 	.word	0x0803383c
 8029608:	0803386c 	.word	0x0803386c
 802960c:	080338a0 	.word	0x080338a0
 8029610:	080338ec 	.word	0x080338ec
 8029614:	08033908 	.word	0x08033908
 8029618:	08033928 	.word	0x08033928
 802961c:	0803397c 	.word	0x0803397c
 8029620:	08033998 	.word	0x08033998
    lfs->file_max = lfs->cfg->file_max;
 8029624:	687b      	ldr	r3, [r7, #4]
 8029626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 802962e:	687b      	ldr	r3, [r7, #4]
 8029630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029632:	2b00      	cmp	r3, #0
 8029634:	d103      	bne.n	802963e <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802963c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802963e:	687b      	ldr	r3, [r7, #4]
 8029640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029644:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029648:	4293      	cmp	r3, r2
 802964a:	d906      	bls.n	802965a <lfs_init+0x2d6>
 802964c:	4b26      	ldr	r3, [pc, #152]	; (80296e8 <lfs_init+0x364>)
 802964e:	4a27      	ldr	r2, [pc, #156]	; (80296ec <lfs_init+0x368>)
 8029650:	f640 7192 	movw	r1, #3986	; 0xf92
 8029654:	4826      	ldr	r0, [pc, #152]	; (80296f0 <lfs_init+0x36c>)
 8029656:	f002 fed1 	bl	802c3fc <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 802965a:	687b      	ldr	r3, [r7, #4]
 802965c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802965e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029660:	687b      	ldr	r3, [r7, #4]
 8029662:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8029664:	687b      	ldr	r3, [r7, #4]
 8029666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029668:	2b00      	cmp	r3, #0
 802966a:	d103      	bne.n	8029674 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029672:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802967a:	687b      	ldr	r3, [r7, #4]
 802967c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802967e:	69db      	ldr	r3, [r3, #28]
 8029680:	429a      	cmp	r2, r3
 8029682:	d906      	bls.n	8029692 <lfs_init+0x30e>
 8029684:	4b1b      	ldr	r3, [pc, #108]	; (80296f4 <lfs_init+0x370>)
 8029686:	4a19      	ldr	r2, [pc, #100]	; (80296ec <lfs_init+0x368>)
 8029688:	f640 7198 	movw	r1, #3992	; 0xf98
 802968c:	4818      	ldr	r0, [pc, #96]	; (80296f0 <lfs_init+0x36c>)
 802968e:	f002 feb5 	bl	802c3fc <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8029692:	687b      	ldr	r3, [r7, #4]
 8029694:	f04f 32ff 	mov.w	r2, #4294967295
 8029698:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 802969a:	687b      	ldr	r3, [r7, #4]
 802969c:	f04f 32ff 	mov.w	r2, #4294967295
 80296a0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80296a2:	687b      	ldr	r3, [r7, #4]
 80296a4:	2200      	movs	r2, #0
 80296a6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80296a8:	687b      	ldr	r3, [r7, #4]
 80296aa:	2200      	movs	r2, #0
 80296ac:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80296ae:	687b      	ldr	r3, [r7, #4]
 80296b0:	333c      	adds	r3, #60	; 0x3c
 80296b2:	2200      	movs	r2, #0
 80296b4:	601a      	str	r2, [r3, #0]
 80296b6:	605a      	str	r2, [r3, #4]
 80296b8:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80296ba:	687b      	ldr	r3, [r7, #4]
 80296bc:	3330      	adds	r3, #48	; 0x30
 80296be:	2200      	movs	r2, #0
 80296c0:	601a      	str	r2, [r3, #0]
 80296c2:	605a      	str	r2, [r3, #4]
 80296c4:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80296c6:	687b      	ldr	r3, [r7, #4]
 80296c8:	3348      	adds	r3, #72	; 0x48
 80296ca:	2200      	movs	r2, #0
 80296cc:	601a      	str	r2, [r3, #0]
 80296ce:	605a      	str	r2, [r3, #4]
 80296d0:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80296d2:	2300      	movs	r3, #0
 80296d4:	e003      	b.n	80296de <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 80296d6:	6878      	ldr	r0, [r7, #4]
 80296d8:	f000 f80e 	bl	80296f8 <lfs_deinit>
    return err;
 80296dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80296de:	4618      	mov	r0, r3
 80296e0:	3730      	adds	r7, #48	; 0x30
 80296e2:	46bd      	mov	sp, r7
 80296e4:	bd80      	pop	{r7, pc}
 80296e6:	bf00      	nop
 80296e8:	080339bc 	.word	0x080339bc
 80296ec:	08034794 	.word	0x08034794
 80296f0:	0803341c 	.word	0x0803341c
 80296f4:	080339d8 	.word	0x080339d8

080296f8 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80296f8:	b580      	push	{r7, lr}
 80296fa:	b082      	sub	sp, #8
 80296fc:	af00      	add	r7, sp, #0
 80296fe:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029700:	687b      	ldr	r3, [r7, #4]
 8029702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029706:	2b00      	cmp	r3, #0
 8029708:	d104      	bne.n	8029714 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	68db      	ldr	r3, [r3, #12]
 802970e:	4618      	mov	r0, r3
 8029710:	f7f9 ffdb 	bl	80236ca <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8029714:	687b      	ldr	r3, [r7, #4]
 8029716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802971a:	2b00      	cmp	r3, #0
 802971c:	d104      	bne.n	8029728 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	69db      	ldr	r3, [r3, #28]
 8029722:	4618      	mov	r0, r3
 8029724:	f7f9 ffd1 	bl	80236ca <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8029728:	687b      	ldr	r3, [r7, #4]
 802972a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802972e:	2b00      	cmp	r3, #0
 8029730:	d104      	bne.n	802973c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8029732:	687b      	ldr	r3, [r7, #4]
 8029734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029736:	4618      	mov	r0, r3
 8029738:	f7f9 ffc7 	bl	80236ca <lfs_free>
    }

    return 0;
 802973c:	2300      	movs	r3, #0
}
 802973e:	4618      	mov	r0, r3
 8029740:	3708      	adds	r7, #8
 8029742:	46bd      	mov	sp, r7
 8029744:	bd80      	pop	{r7, pc}
	...

08029748 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8029748:	b580      	push	{r7, lr}
 802974a:	b0a0      	sub	sp, #128	; 0x80
 802974c:	af00      	add	r7, sp, #0
 802974e:	6078      	str	r0, [r7, #4]
 8029750:	6039      	str	r1, [r7, #0]
    int err = 0;
 8029752:	2300      	movs	r3, #0
 8029754:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8029756:	6839      	ldr	r1, [r7, #0]
 8029758:	6878      	ldr	r0, [r7, #4]
 802975a:	f7ff fe13 	bl	8029384 <lfs_init>
 802975e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029760:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029762:	2b00      	cmp	r3, #0
 8029764:	d001      	beq.n	802976a <lfs_rawformat+0x22>
            return err;
 8029766:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029768:	e082      	b.n	8029870 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 802976a:	687b      	ldr	r3, [r7, #4]
 802976c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 802976e:	687b      	ldr	r3, [r7, #4]
 8029770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029774:	461a      	mov	r2, r3
 8029776:	2100      	movs	r1, #0
 8029778:	f004 f810 	bl	802d79c <memset>
        lfs->free.off = 0;
 802977c:	687b      	ldr	r3, [r7, #4]
 802977e:	2200      	movs	r2, #0
 8029780:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029782:	687b      	ldr	r3, [r7, #4]
 8029784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029788:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802978e:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029790:	4619      	mov	r1, r3
 8029792:	4610      	mov	r0, r2
 8029794:	f7f9 feee 	bl	8023574 <lfs_min>
 8029798:	4602      	mov	r2, r0
 802979a:	687b      	ldr	r3, [r7, #4]
 802979c:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 802979e:	687b      	ldr	r3, [r7, #4]
 80297a0:	2200      	movs	r2, #0
 80297a2:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 80297a4:	6878      	ldr	r0, [r7, #4]
 80297a6:	f7fa fe2b 	bl	8024400 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80297aa:	f107 030c 	add.w	r3, r7, #12
 80297ae:	4619      	mov	r1, r3
 80297b0:	6878      	ldr	r0, [r7, #4]
 80297b2:	f7fc fc7d 	bl	80260b0 <lfs_dir_alloc>
 80297b6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80297b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80297ba:	2b00      	cmp	r3, #0
 80297bc:	d14f      	bne.n	802985e <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 80297be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80297c2:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80297c4:	687b      	ldr	r3, [r7, #4]
 80297c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297c8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80297ca:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80297cc:	687b      	ldr	r3, [r7, #4]
 80297ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297d0:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80297d2:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80297d8:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80297da:	687b      	ldr	r3, [r7, #4]
 80297dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80297de:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80297e0:	687b      	ldr	r3, [r7, #4]
 80297e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80297e4:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80297e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80297ea:	4618      	mov	r0, r3
 80297ec:	f7fa fd48 	bl	8024280 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80297f0:	4b21      	ldr	r3, [pc, #132]	; (8029878 <lfs_rawformat+0x130>)
 80297f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80297f4:	2300      	movs	r3, #0
 80297f6:	653b      	str	r3, [r7, #80]	; 0x50
 80297f8:	4b20      	ldr	r3, [pc, #128]	; (802987c <lfs_rawformat+0x134>)
 80297fa:	657b      	str	r3, [r7, #84]	; 0x54
 80297fc:	4b20      	ldr	r3, [pc, #128]	; (8029880 <lfs_rawformat+0x138>)
 80297fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8029800:	4b20      	ldr	r3, [pc, #128]	; (8029884 <lfs_rawformat+0x13c>)
 8029802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029804:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029808:	663b      	str	r3, [r7, #96]	; 0x60
 802980a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802980e:	f107 010c 	add.w	r1, r7, #12
 8029812:	2303      	movs	r3, #3
 8029814:	6878      	ldr	r0, [r7, #4]
 8029816:	f7fd fe67 	bl	80274e8 <lfs_dir_commit>
 802981a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 802981c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802981e:	2b00      	cmp	r3, #0
 8029820:	d11f      	bne.n	8029862 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8029822:	2300      	movs	r3, #0
 8029824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8029828:	f107 010c 	add.w	r1, r7, #12
 802982c:	2300      	movs	r3, #0
 802982e:	2200      	movs	r2, #0
 8029830:	6878      	ldr	r0, [r7, #4]
 8029832:	f7fd fe59 	bl	80274e8 <lfs_dir_commit>
 8029836:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802983a:	2b00      	cmp	r3, #0
 802983c:	d113      	bne.n	8029866 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 802983e:	2300      	movs	r3, #0
 8029840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029842:	2301      	movs	r3, #1
 8029844:	633b      	str	r3, [r7, #48]	; 0x30
 8029846:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802984a:	f107 030c 	add.w	r3, r7, #12
 802984e:	4619      	mov	r1, r3
 8029850:	6878      	ldr	r0, [r7, #4]
 8029852:	f7fc f82f 	bl	80258b4 <lfs_dir_fetch>
 8029856:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029858:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802985a:	2b00      	cmp	r3, #0
 802985c:	e004      	b.n	8029868 <lfs_rawformat+0x120>
            goto cleanup;
 802985e:	bf00      	nop
 8029860:	e002      	b.n	8029868 <lfs_rawformat+0x120>
            goto cleanup;
 8029862:	bf00      	nop
 8029864:	e000      	b.n	8029868 <lfs_rawformat+0x120>
            goto cleanup;
 8029866:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8029868:	6878      	ldr	r0, [r7, #4]
 802986a:	f7ff ff45 	bl	80296f8 <lfs_deinit>
    return err;
 802986e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8029870:	4618      	mov	r0, r3
 8029872:	3780      	adds	r7, #128	; 0x80
 8029874:	46bd      	mov	sp, r7
 8029876:	bd80      	pop	{r7, pc}
 8029878:	40100000 	.word	0x40100000
 802987c:	0ff00008 	.word	0x0ff00008
 8029880:	08033a08 	.word	0x08033a08
 8029884:	20100018 	.word	0x20100018

08029888 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8029888:	b580      	push	{r7, lr}
 802988a:	b09c      	sub	sp, #112	; 0x70
 802988c:	af04      	add	r7, sp, #16
 802988e:	6078      	str	r0, [r7, #4]
 8029890:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8029892:	6839      	ldr	r1, [r7, #0]
 8029894:	6878      	ldr	r0, [r7, #4]
 8029896:	f7ff fd75 	bl	8029384 <lfs_init>
 802989a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 802989c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802989e:	2b00      	cmp	r3, #0
 80298a0:	d001      	beq.n	80298a6 <lfs_rawmount+0x1e>
        return err;
 80298a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80298a4:	e192      	b.n	8029bcc <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80298a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80298aa:	2220      	movs	r2, #32
 80298ac:	2100      	movs	r1, #0
 80298ae:	4618      	mov	r0, r3
 80298b0:	f003 ff74 	bl	802d79c <memset>
 80298b4:	2301      	movs	r3, #1
 80298b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 80298b8:	2300      	movs	r3, #0
 80298ba:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 80298bc:	e10b      	b.n	8029ad6 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 80298be:	687b      	ldr	r3, [r7, #4]
 80298c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298c2:	6a1b      	ldr	r3, [r3, #32]
 80298c4:	085b      	lsrs	r3, r3, #1
 80298c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80298c8:	429a      	cmp	r2, r3
 80298ca:	d303      	bcc.n	80298d4 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 80298cc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80298d0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80298d2:	e177      	b.n	8029bc4 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 80298d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80298d6:	3301      	adds	r3, #1
 80298d8:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80298da:	687b      	ldr	r3, [r7, #4]
 80298dc:	627b      	str	r3, [r7, #36]	; 0x24
 80298de:	4b8a      	ldr	r3, [pc, #552]	; (8029b08 <lfs_rawmount+0x280>)
 80298e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80298e2:	2308      	movs	r3, #8
 80298e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80298e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80298ea:	f103 0218 	add.w	r2, r3, #24
 80298ee:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80298f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80298f6:	9303      	str	r3, [sp, #12]
 80298f8:	4b84      	ldr	r3, [pc, #528]	; (8029b0c <lfs_rawmount+0x284>)
 80298fa:	9302      	str	r3, [sp, #8]
 80298fc:	2300      	movs	r3, #0
 80298fe:	9301      	str	r3, [sp, #4]
 8029900:	4b83      	ldr	r3, [pc, #524]	; (8029b10 <lfs_rawmount+0x288>)
 8029902:	9300      	str	r3, [sp, #0]
 8029904:	4b83      	ldr	r3, [pc, #524]	; (8029b14 <lfs_rawmount+0x28c>)
 8029906:	6878      	ldr	r0, [r7, #4]
 8029908:	f7fb fc66 	bl	80251d8 <lfs_dir_fetchmatch>
 802990c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 802990e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029910:	2b00      	cmp	r3, #0
 8029912:	da02      	bge.n	802991a <lfs_rawmount+0x92>
            err = tag;
 8029914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029916:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029918:	e154      	b.n	8029bc4 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 802991a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802991c:	2b00      	cmp	r3, #0
 802991e:	f000 80cd 	beq.w	8029abc <lfs_rawmount+0x234>
 8029922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029924:	4618      	mov	r0, r3
 8029926:	f7fa faee 	bl	8023f06 <lfs_tag_isdelete>
 802992a:	4603      	mov	r3, r0
 802992c:	f083 0301 	eor.w	r3, r3, #1
 8029930:	b2db      	uxtb	r3, r3
 8029932:	2b00      	cmp	r3, #0
 8029934:	f000 80c2 	beq.w	8029abc <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802993a:	687b      	ldr	r3, [r7, #4]
 802993c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 802993e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029940:	687b      	ldr	r3, [r7, #4]
 8029942:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8029944:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029948:	f107 030c 	add.w	r3, r7, #12
 802994c:	9300      	str	r3, [sp, #0]
 802994e:	4b72      	ldr	r3, [pc, #456]	; (8029b18 <lfs_rawmount+0x290>)
 8029950:	4a70      	ldr	r2, [pc, #448]	; (8029b14 <lfs_rawmount+0x28c>)
 8029952:	6878      	ldr	r0, [r7, #4]
 8029954:	f7fa ff0e 	bl	8024774 <lfs_dir_get>
 8029958:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 802995a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802995c:	2b00      	cmp	r3, #0
 802995e:	da02      	bge.n	8029966 <lfs_rawmount+0xde>
                err = tag;
 8029960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029962:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029964:	e12e      	b.n	8029bc4 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8029966:	f107 030c 	add.w	r3, r7, #12
 802996a:	4618      	mov	r0, r3
 802996c:	f7fa fc50 	bl	8024210 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8029970:	68fb      	ldr	r3, [r7, #12]
 8029972:	0c1b      	lsrs	r3, r3, #16
 8029974:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8029978:	68fb      	ldr	r3, [r7, #12]
 802997a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 802997e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8029982:	2b02      	cmp	r3, #2
 8029984:	d103      	bne.n	802998e <lfs_rawmount+0x106>
 8029986:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 802998a:	2b00      	cmp	r3, #0
 802998c:	d011      	beq.n	80299b2 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 802998e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8029992:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8029996:	4961      	ldr	r1, [pc, #388]	; (8029b1c <lfs_rawmount+0x294>)
 8029998:	9101      	str	r1, [sp, #4]
 802999a:	9300      	str	r3, [sp, #0]
 802999c:	4613      	mov	r3, r2
 802999e:	f241 0233 	movw	r2, #4147	; 0x1033
 80299a2:	495f      	ldr	r1, [pc, #380]	; (8029b20 <lfs_rawmount+0x298>)
 80299a4:	485f      	ldr	r0, [pc, #380]	; (8029b24 <lfs_rawmount+0x29c>)
 80299a6:	f003 fd63 	bl	802d470 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 80299aa:	f06f 0315 	mvn.w	r3, #21
 80299ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80299b0:	e083      	b.n	8029aba <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80299b2:	69bb      	ldr	r3, [r7, #24]
 80299b4:	2b00      	cmp	r3, #0
 80299b6:	d018      	beq.n	80299ea <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 80299b8:	69ba      	ldr	r2, [r7, #24]
 80299ba:	687b      	ldr	r3, [r7, #4]
 80299bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80299be:	429a      	cmp	r2, r3
 80299c0:	d910      	bls.n	80299e4 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80299c2:	69ba      	ldr	r2, [r7, #24]
 80299c4:	687b      	ldr	r3, [r7, #4]
 80299c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80299c8:	4954      	ldr	r1, [pc, #336]	; (8029b1c <lfs_rawmount+0x294>)
 80299ca:	9101      	str	r1, [sp, #4]
 80299cc:	9300      	str	r3, [sp, #0]
 80299ce:	4613      	mov	r3, r2
 80299d0:	f241 023c 	movw	r2, #4156	; 0x103c
 80299d4:	4952      	ldr	r1, [pc, #328]	; (8029b20 <lfs_rawmount+0x298>)
 80299d6:	4854      	ldr	r0, [pc, #336]	; (8029b28 <lfs_rawmount+0x2a0>)
 80299d8:	f003 fd4a 	bl	802d470 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80299dc:	f06f 0315 	mvn.w	r3, #21
 80299e0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80299e2:	e06a      	b.n	8029aba <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 80299e4:	69ba      	ldr	r2, [r7, #24]
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 80299ea:	69fb      	ldr	r3, [r7, #28]
 80299ec:	2b00      	cmp	r3, #0
 80299ee:	d018      	beq.n	8029a22 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 80299f0:	69fa      	ldr	r2, [r7, #28]
 80299f2:	687b      	ldr	r3, [r7, #4]
 80299f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80299f6:	429a      	cmp	r2, r3
 80299f8:	d910      	bls.n	8029a1c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80299fa:	69fa      	ldr	r2, [r7, #28]
 80299fc:	687b      	ldr	r3, [r7, #4]
 80299fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029a00:	4946      	ldr	r1, [pc, #280]	; (8029b1c <lfs_rawmount+0x294>)
 8029a02:	9101      	str	r1, [sp, #4]
 8029a04:	9300      	str	r3, [sp, #0]
 8029a06:	4613      	mov	r3, r2
 8029a08:	f241 0247 	movw	r2, #4167	; 0x1047
 8029a0c:	4944      	ldr	r1, [pc, #272]	; (8029b20 <lfs_rawmount+0x298>)
 8029a0e:	4847      	ldr	r0, [pc, #284]	; (8029b2c <lfs_rawmount+0x2a4>)
 8029a10:	f003 fd2e 	bl	802d470 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029a14:	f06f 0315 	mvn.w	r3, #21
 8029a18:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029a1a:	e04e      	b.n	8029aba <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8029a1c:	69fa      	ldr	r2, [r7, #28]
 8029a1e:	687b      	ldr	r3, [r7, #4]
 8029a20:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8029a22:	6a3b      	ldr	r3, [r7, #32]
 8029a24:	2b00      	cmp	r3, #0
 8029a26:	d018      	beq.n	8029a5a <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029a28:	6a3a      	ldr	r2, [r7, #32]
 8029a2a:	687b      	ldr	r3, [r7, #4]
 8029a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029a2e:	429a      	cmp	r2, r3
 8029a30:	d910      	bls.n	8029a54 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029a32:	6a3a      	ldr	r2, [r7, #32]
 8029a34:	687b      	ldr	r3, [r7, #4]
 8029a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029a38:	4938      	ldr	r1, [pc, #224]	; (8029b1c <lfs_rawmount+0x294>)
 8029a3a:	9101      	str	r1, [sp, #4]
 8029a3c:	9300      	str	r3, [sp, #0]
 8029a3e:	4613      	mov	r3, r2
 8029a40:	f241 0252 	movw	r2, #4178	; 0x1052
 8029a44:	4936      	ldr	r1, [pc, #216]	; (8029b20 <lfs_rawmount+0x298>)
 8029a46:	483a      	ldr	r0, [pc, #232]	; (8029b30 <lfs_rawmount+0x2a8>)
 8029a48:	f003 fd12 	bl	802d470 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8029a4c:	f06f 0315 	mvn.w	r3, #21
 8029a50:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029a52:	e032      	b.n	8029aba <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8029a54:	6a3a      	ldr	r2, [r7, #32]
 8029a56:	687b      	ldr	r3, [r7, #4]
 8029a58:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8029a5a:	697a      	ldr	r2, [r7, #20]
 8029a5c:	687b      	ldr	r3, [r7, #4]
 8029a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a60:	6a1b      	ldr	r3, [r3, #32]
 8029a62:	429a      	cmp	r2, r3
 8029a64:	d011      	beq.n	8029a8a <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8029a66:	697a      	ldr	r2, [r7, #20]
 8029a68:	687b      	ldr	r3, [r7, #4]
 8029a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a6c:	6a1b      	ldr	r3, [r3, #32]
 8029a6e:	492b      	ldr	r1, [pc, #172]	; (8029b1c <lfs_rawmount+0x294>)
 8029a70:	9101      	str	r1, [sp, #4]
 8029a72:	9300      	str	r3, [sp, #0]
 8029a74:	4613      	mov	r3, r2
 8029a76:	f241 025c 	movw	r2, #4188	; 0x105c
 8029a7a:	4929      	ldr	r1, [pc, #164]	; (8029b20 <lfs_rawmount+0x298>)
 8029a7c:	482d      	ldr	r0, [pc, #180]	; (8029b34 <lfs_rawmount+0x2ac>)
 8029a7e:	f003 fcf7 	bl	802d470 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8029a82:	f06f 0315 	mvn.w	r3, #21
 8029a86:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029a88:	e017      	b.n	8029aba <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8029a8a:	693a      	ldr	r2, [r7, #16]
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a90:	69db      	ldr	r3, [r3, #28]
 8029a92:	429a      	cmp	r2, r3
 8029a94:	d012      	beq.n	8029abc <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8029a96:	693a      	ldr	r2, [r7, #16]
 8029a98:	687b      	ldr	r3, [r7, #4]
 8029a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a9c:	69db      	ldr	r3, [r3, #28]
 8029a9e:	491f      	ldr	r1, [pc, #124]	; (8029b1c <lfs_rawmount+0x294>)
 8029aa0:	9101      	str	r1, [sp, #4]
 8029aa2:	9300      	str	r3, [sp, #0]
 8029aa4:	4613      	mov	r3, r2
 8029aa6:	f241 0263 	movw	r2, #4195	; 0x1063
 8029aaa:	491d      	ldr	r1, [pc, #116]	; (8029b20 <lfs_rawmount+0x298>)
 8029aac:	4822      	ldr	r0, [pc, #136]	; (8029b38 <lfs_rawmount+0x2b0>)
 8029aae:	f003 fcdf 	bl	802d470 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8029ab2:	f06f 0315 	mvn.w	r3, #21
 8029ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029ab8:	bf00      	nop
            goto cleanup;
 8029aba:	e083      	b.n	8029bc4 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8029abc:	687b      	ldr	r3, [r7, #4]
 8029abe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8029ac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029ac6:	4619      	mov	r1, r3
 8029ac8:	6878      	ldr	r0, [r7, #4]
 8029aca:	f7fb ff0f 	bl	80258ec <lfs_dir_getgstate>
 8029ace:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8029ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029ad2:	2b00      	cmp	r3, #0
 8029ad4:	d175      	bne.n	8029bc2 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8029ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029ada:	3318      	adds	r3, #24
 8029adc:	4618      	mov	r0, r3
 8029ade:	f7fa f95e 	bl	8023d9e <lfs_pair_isnull>
 8029ae2:	4603      	mov	r3, r0
 8029ae4:	f083 0301 	eor.w	r3, r3, #1
 8029ae8:	b2db      	uxtb	r3, r3
 8029aea:	2b00      	cmp	r3, #0
 8029aec:	f47f aee7 	bne.w	80298be <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029af0:	687b      	ldr	r3, [r7, #4]
 8029af2:	3320      	adds	r3, #32
 8029af4:	4618      	mov	r0, r3
 8029af6:	f7fa f952 	bl	8023d9e <lfs_pair_isnull>
 8029afa:	4603      	mov	r3, r0
 8029afc:	2b00      	cmp	r3, #0
 8029afe:	d01d      	beq.n	8029b3c <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029b00:	f06f 0315 	mvn.w	r3, #21
 8029b04:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8029b06:	e05d      	b.n	8029bc4 <lfs_rawmount+0x33c>
 8029b08:	08033a08 	.word	0x08033a08
 8029b0c:	08025a45 	.word	0x08025a45
 8029b10:	0ff00008 	.word	0x0ff00008
 8029b14:	7ffffc00 	.word	0x7ffffc00
 8029b18:	20100018 	.word	0x20100018
 8029b1c:	08033530 	.word	0x08033530
 8029b20:	0803341c 	.word	0x0803341c
 8029b24:	08033a14 	.word	0x08033a14
 8029b28:	08033a40 	.word	0x08033a40
 8029b2c:	08033a74 	.word	0x08033a74
 8029b30:	08033aa8 	.word	0x08033aa8
 8029b34:	08033adc 	.word	0x08033adc
 8029b38:	08033b10 	.word	0x08033b10
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8029b3c:	687b      	ldr	r3, [r7, #4]
 8029b3e:	3330      	adds	r3, #48	; 0x30
 8029b40:	4618      	mov	r0, r3
 8029b42:	f7fa fa83 	bl	802404c <lfs_gstate_iszero>
 8029b46:	4603      	mov	r3, r0
 8029b48:	f083 0301 	eor.w	r3, r3, #1
 8029b4c:	b2db      	uxtb	r3, r3
 8029b4e:	2b00      	cmp	r3, #0
 8029b50:	d010      	beq.n	8029b74 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029b52:	687b      	ldr	r3, [r7, #4]
 8029b54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029b56:	687b      	ldr	r3, [r7, #4]
 8029b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029b5a:	687a      	ldr	r2, [r7, #4]
 8029b5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029b5e:	481d      	ldr	r0, [pc, #116]	; (8029bd4 <lfs_rawmount+0x34c>)
 8029b60:	9002      	str	r0, [sp, #8]
 8029b62:	9201      	str	r2, [sp, #4]
 8029b64:	9300      	str	r3, [sp, #0]
 8029b66:	460b      	mov	r3, r1
 8029b68:	f241 0279 	movw	r2, #4217	; 0x1079
 8029b6c:	491a      	ldr	r1, [pc, #104]	; (8029bd8 <lfs_rawmount+0x350>)
 8029b6e:	481b      	ldr	r0, [pc, #108]	; (8029bdc <lfs_rawmount+0x354>)
 8029b70:	f003 fc7e 	bl	802d470 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029b74:	687b      	ldr	r3, [r7, #4]
 8029b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029b78:	4618      	mov	r0, r3
 8029b7a:	f7fa f9b6 	bl	8023eea <lfs_tag_isvalid>
 8029b7e:	4603      	mov	r3, r0
 8029b80:	f083 0301 	eor.w	r3, r3, #1
 8029b84:	b2db      	uxtb	r3, r3
 8029b86:	461a      	mov	r2, r3
 8029b88:	687b      	ldr	r3, [r7, #4]
 8029b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029b8c:	441a      	add	r2, r3
 8029b8e:	687b      	ldr	r3, [r7, #4]
 8029b90:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8029b92:	687b      	ldr	r3, [r7, #4]
 8029b94:	687a      	ldr	r2, [r7, #4]
 8029b96:	333c      	adds	r3, #60	; 0x3c
 8029b98:	3230      	adds	r2, #48	; 0x30
 8029b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8029b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8029ba0:	687b      	ldr	r3, [r7, #4]
 8029ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029ba4:	687a      	ldr	r2, [r7, #4]
 8029ba6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029ba8:	6a12      	ldr	r2, [r2, #32]
 8029baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8029bae:	fb01 f202 	mul.w	r2, r1, r2
 8029bb2:	1a9a      	subs	r2, r3, r2
 8029bb4:	687b      	ldr	r3, [r7, #4]
 8029bb6:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8029bb8:	6878      	ldr	r0, [r7, #4]
 8029bba:	f7fa fc30 	bl	802441e <lfs_alloc_drop>

    return 0;
 8029bbe:	2300      	movs	r3, #0
 8029bc0:	e004      	b.n	8029bcc <lfs_rawmount+0x344>
            goto cleanup;
 8029bc2:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8029bc4:	6878      	ldr	r0, [r7, #4]
 8029bc6:	f000 f80b 	bl	8029be0 <lfs_rawunmount>
    return err;
 8029bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8029bcc:	4618      	mov	r0, r3
 8029bce:	3760      	adds	r7, #96	; 0x60
 8029bd0:	46bd      	mov	sp, r7
 8029bd2:	bd80      	pop	{r7, pc}
 8029bd4:	08033530 	.word	0x08033530
 8029bd8:	0803341c 	.word	0x0803341c
 8029bdc:	08033b40 	.word	0x08033b40

08029be0 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8029be0:	b580      	push	{r7, lr}
 8029be2:	b082      	sub	sp, #8
 8029be4:	af00      	add	r7, sp, #0
 8029be6:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8029be8:	6878      	ldr	r0, [r7, #4]
 8029bea:	f7ff fd85 	bl	80296f8 <lfs_deinit>
 8029bee:	4603      	mov	r3, r0
}
 8029bf0:	4618      	mov	r0, r3
 8029bf2:	3708      	adds	r7, #8
 8029bf4:	46bd      	mov	sp, r7
 8029bf6:	bd80      	pop	{r7, pc}

08029bf8 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8029bf8:	b590      	push	{r4, r7, lr}
 8029bfa:	b09d      	sub	sp, #116	; 0x74
 8029bfc:	af04      	add	r7, sp, #16
 8029bfe:	60f8      	str	r0, [r7, #12]
 8029c00:	60b9      	str	r1, [r7, #8]
 8029c02:	607a      	str	r2, [r7, #4]
 8029c04:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029c06:	f107 0318 	add.w	r3, r7, #24
 8029c0a:	2220      	movs	r2, #32
 8029c0c:	2100      	movs	r1, #0
 8029c0e:	4618      	mov	r0, r3
 8029c10:	f003 fdc4 	bl	802d79c <memset>
 8029c14:	2301      	movs	r3, #1
 8029c16:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8029c18:	2300      	movs	r3, #0
 8029c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8029c1c:	e0a7      	b.n	8029d6e <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8029c1e:	68fb      	ldr	r3, [r7, #12]
 8029c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029c22:	6a1b      	ldr	r3, [r3, #32]
 8029c24:	085b      	lsrs	r3, r3, #1
 8029c26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029c28:	429a      	cmp	r2, r3
 8029c2a:	d302      	bcc.n	8029c32 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029c2c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029c30:	e102      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8029c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029c34:	3301      	adds	r3, #1
 8029c36:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8029c38:	2300      	movs	r3, #0
 8029c3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8029c3c:	e013      	b.n	8029c66 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8029c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c40:	3306      	adds	r3, #6
 8029c42:	009b      	lsls	r3, r3, #2
 8029c44:	3360      	adds	r3, #96	; 0x60
 8029c46:	443b      	add	r3, r7
 8029c48:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8029c4c:	68bb      	ldr	r3, [r7, #8]
 8029c4e:	4611      	mov	r1, r2
 8029c50:	6878      	ldr	r0, [r7, #4]
 8029c52:	4798      	blx	r3
 8029c54:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8029c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029c58:	2b00      	cmp	r3, #0
 8029c5a:	d001      	beq.n	8029c60 <lfs_fs_rawtraverse+0x68>
                return err;
 8029c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029c5e:	e0eb      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8029c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c62:	3301      	adds	r3, #1
 8029c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8029c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c68:	2b01      	cmp	r3, #1
 8029c6a:	dde8      	ble.n	8029c3e <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8029c6c:	f107 0318 	add.w	r3, r7, #24
 8029c70:	f103 0218 	add.w	r2, r3, #24
 8029c74:	f107 0318 	add.w	r3, r7, #24
 8029c78:	4619      	mov	r1, r3
 8029c7a:	68f8      	ldr	r0, [r7, #12]
 8029c7c:	f7fb fe1a 	bl	80258b4 <lfs_dir_fetch>
 8029c80:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8029c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c84:	2b00      	cmp	r3, #0
 8029c86:	d001      	beq.n	8029c8c <lfs_fs_rawtraverse+0x94>
            return err;
 8029c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c8a:	e0d5      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8029c8c:	2300      	movs	r3, #0
 8029c8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029c92:	e067      	b.n	8029d64 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8029c94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029c98:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8029c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029c9e:	f043 0308 	orr.w	r3, r3, #8
 8029ca2:	f107 0118 	add.w	r1, r7, #24
 8029ca6:	f107 0210 	add.w	r2, r7, #16
 8029caa:	9200      	str	r2, [sp, #0]
 8029cac:	4a64      	ldr	r2, [pc, #400]	; (8029e40 <lfs_fs_rawtraverse+0x248>)
 8029cae:	68f8      	ldr	r0, [r7, #12]
 8029cb0:	f7fa fd60 	bl	8024774 <lfs_dir_get>
 8029cb4:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8029cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029cb8:	2b00      	cmp	r3, #0
 8029cba:	da05      	bge.n	8029cc8 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8029cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029cbe:	f113 0f02 	cmn.w	r3, #2
 8029cc2:	d049      	beq.n	8029d58 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8029cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029cc6:	e0b7      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8029cc8:	f107 0310 	add.w	r3, r7, #16
 8029ccc:	4618      	mov	r0, r3
 8029cce:	f7fa fa6f 	bl	80241b0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8029cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029cd4:	4618      	mov	r0, r3
 8029cd6:	f7fa f939 	bl	8023f4c <lfs_tag_type3>
 8029cda:	4603      	mov	r3, r0
 8029cdc:	461a      	mov	r2, r3
 8029cde:	f240 2302 	movw	r3, #514	; 0x202
 8029ce2:	429a      	cmp	r2, r3
 8029ce4:	d113      	bne.n	8029d0e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8029ce6:	68f9      	ldr	r1, [r7, #12]
 8029ce8:	6938      	ldr	r0, [r7, #16]
 8029cea:	697b      	ldr	r3, [r7, #20]
 8029cec:	687a      	ldr	r2, [r7, #4]
 8029cee:	9202      	str	r2, [sp, #8]
 8029cf0:	68ba      	ldr	r2, [r7, #8]
 8029cf2:	9201      	str	r2, [sp, #4]
 8029cf4:	9300      	str	r3, [sp, #0]
 8029cf6:	4603      	mov	r3, r0
 8029cf8:	460a      	mov	r2, r1
 8029cfa:	2100      	movs	r1, #0
 8029cfc:	68f8      	ldr	r0, [r7, #12]
 8029cfe:	f7fe f811 	bl	8027d24 <lfs_ctz_traverse>
 8029d02:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8029d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	d027      	beq.n	8029d5a <lfs_fs_rawtraverse+0x162>
                    return err;
 8029d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d0c:	e094      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8029d0e:	78fb      	ldrb	r3, [r7, #3]
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	d022      	beq.n	8029d5a <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8029d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029d16:	4618      	mov	r0, r3
 8029d18:	f7fa f918 	bl	8023f4c <lfs_tag_type3>
 8029d1c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8029d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029d22:	d11a      	bne.n	8029d5a <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8029d24:	2300      	movs	r3, #0
 8029d26:	653b      	str	r3, [r7, #80]	; 0x50
 8029d28:	e012      	b.n	8029d50 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8029d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029d2c:	009b      	lsls	r3, r3, #2
 8029d2e:	f107 0210 	add.w	r2, r7, #16
 8029d32:	4413      	add	r3, r2
 8029d34:	681a      	ldr	r2, [r3, #0]
 8029d36:	68bb      	ldr	r3, [r7, #8]
 8029d38:	4611      	mov	r1, r2
 8029d3a:	6878      	ldr	r0, [r7, #4]
 8029d3c:	4798      	blx	r3
 8029d3e:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8029d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d42:	2b00      	cmp	r3, #0
 8029d44:	d001      	beq.n	8029d4a <lfs_fs_rawtraverse+0x152>
                        return err;
 8029d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d48:	e076      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8029d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029d4c:	3301      	adds	r3, #1
 8029d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8029d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029d52:	2b01      	cmp	r3, #1
 8029d54:	dde9      	ble.n	8029d2a <lfs_fs_rawtraverse+0x132>
 8029d56:	e000      	b.n	8029d5a <lfs_fs_rawtraverse+0x162>
                    continue;
 8029d58:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8029d5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029d5e:	3301      	adds	r3, #1
 8029d60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029d64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8029d66:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8029d6a:	429a      	cmp	r2, r3
 8029d6c:	d392      	bcc.n	8029c94 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8029d6e:	f107 0318 	add.w	r3, r7, #24
 8029d72:	3318      	adds	r3, #24
 8029d74:	4618      	mov	r0, r3
 8029d76:	f7fa f812 	bl	8023d9e <lfs_pair_isnull>
 8029d7a:	4603      	mov	r3, r0
 8029d7c:	f083 0301 	eor.w	r3, r3, #1
 8029d80:	b2db      	uxtb	r3, r3
 8029d82:	2b00      	cmp	r3, #0
 8029d84:	f47f af4b 	bne.w	8029c1e <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029d88:	68fb      	ldr	r3, [r7, #12]
 8029d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029d8e:	e04f      	b.n	8029e30 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8029d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d92:	799b      	ldrb	r3, [r3, #6]
 8029d94:	2b01      	cmp	r3, #1
 8029d96:	d147      	bne.n	8029e28 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8029d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029da0:	2b00      	cmp	r3, #0
 8029da2:	d01d      	beq.n	8029de0 <lfs_fs_rawtraverse+0x1e8>
 8029da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029dac:	2b00      	cmp	r3, #0
 8029dae:	d117      	bne.n	8029de0 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029db2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029db6:	68f8      	ldr	r0, [r7, #12]
 8029db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029dba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8029dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029dc0:	687a      	ldr	r2, [r7, #4]
 8029dc2:	9202      	str	r2, [sp, #8]
 8029dc4:	68ba      	ldr	r2, [r7, #8]
 8029dc6:	9201      	str	r2, [sp, #4]
 8029dc8:	9300      	str	r3, [sp, #0]
 8029dca:	4623      	mov	r3, r4
 8029dcc:	4602      	mov	r2, r0
 8029dce:	68f8      	ldr	r0, [r7, #12]
 8029dd0:	f7fd ffa8 	bl	8027d24 <lfs_ctz_traverse>
 8029dd4:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8029dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029dd8:	2b00      	cmp	r3, #0
 8029dda:	d001      	beq.n	8029de0 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8029ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029dde:	e02b      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8029de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029de8:	2b00      	cmp	r3, #0
 8029dea:	d01e      	beq.n	8029e2a <lfs_fs_rawtraverse+0x232>
 8029dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029df4:	2b00      	cmp	r3, #0
 8029df6:	d118      	bne.n	8029e2a <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029dfa:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029dfe:	68f8      	ldr	r0, [r7, #12]
 8029e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029e02:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8029e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029e08:	687a      	ldr	r2, [r7, #4]
 8029e0a:	9202      	str	r2, [sp, #8]
 8029e0c:	68ba      	ldr	r2, [r7, #8]
 8029e0e:	9201      	str	r2, [sp, #4]
 8029e10:	9300      	str	r3, [sp, #0]
 8029e12:	4623      	mov	r3, r4
 8029e14:	4602      	mov	r2, r0
 8029e16:	68f8      	ldr	r0, [r7, #12]
 8029e18:	f7fd ff84 	bl	8027d24 <lfs_ctz_traverse>
 8029e1c:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8029e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029e20:	2b00      	cmp	r3, #0
 8029e22:	d002      	beq.n	8029e2a <lfs_fs_rawtraverse+0x232>
                return err;
 8029e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029e26:	e007      	b.n	8029e38 <lfs_fs_rawtraverse+0x240>
            continue;
 8029e28:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029e2c:	681b      	ldr	r3, [r3, #0]
 8029e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029e32:	2b00      	cmp	r3, #0
 8029e34:	d1ac      	bne.n	8029d90 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8029e36:	2300      	movs	r3, #0
}
 8029e38:	4618      	mov	r0, r3
 8029e3a:	3764      	adds	r7, #100	; 0x64
 8029e3c:	46bd      	mov	sp, r7
 8029e3e:	bd90      	pop	{r4, r7, pc}
 8029e40:	700ffc00 	.word	0x700ffc00

08029e44 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8029e44:	b580      	push	{r7, lr}
 8029e46:	b086      	sub	sp, #24
 8029e48:	af00      	add	r7, sp, #0
 8029e4a:	60f8      	str	r0, [r7, #12]
 8029e4c:	60b9      	str	r1, [r7, #8]
 8029e4e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8029e50:	687b      	ldr	r3, [r7, #4]
 8029e52:	2200      	movs	r2, #0
 8029e54:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8029e56:	687b      	ldr	r3, [r7, #4]
 8029e58:	2201      	movs	r2, #1
 8029e5a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029e5c:	2300      	movs	r3, #0
 8029e5e:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8029e60:	e024      	b.n	8029eac <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8029e62:	68fb      	ldr	r3, [r7, #12]
 8029e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029e66:	6a1b      	ldr	r3, [r3, #32]
 8029e68:	085b      	lsrs	r3, r3, #1
 8029e6a:	697a      	ldr	r2, [r7, #20]
 8029e6c:	429a      	cmp	r2, r3
 8029e6e:	d302      	bcc.n	8029e76 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029e70:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029e74:	e027      	b.n	8029ec6 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8029e76:	697b      	ldr	r3, [r7, #20]
 8029e78:	3301      	adds	r3, #1
 8029e7a:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8029e7c:	687b      	ldr	r3, [r7, #4]
 8029e7e:	3318      	adds	r3, #24
 8029e80:	68b9      	ldr	r1, [r7, #8]
 8029e82:	4618      	mov	r0, r3
 8029e84:	f7f9 ffa6 	bl	8023dd4 <lfs_pair_cmp>
 8029e88:	4603      	mov	r3, r0
 8029e8a:	2b00      	cmp	r3, #0
 8029e8c:	d101      	bne.n	8029e92 <lfs_fs_pred+0x4e>
            return 0;
 8029e8e:	2300      	movs	r3, #0
 8029e90:	e019      	b.n	8029ec6 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8029e92:	687b      	ldr	r3, [r7, #4]
 8029e94:	3318      	adds	r3, #24
 8029e96:	461a      	mov	r2, r3
 8029e98:	6879      	ldr	r1, [r7, #4]
 8029e9a:	68f8      	ldr	r0, [r7, #12]
 8029e9c:	f7fb fd0a 	bl	80258b4 <lfs_dir_fetch>
 8029ea0:	6138      	str	r0, [r7, #16]
        if (err) {
 8029ea2:	693b      	ldr	r3, [r7, #16]
 8029ea4:	2b00      	cmp	r3, #0
 8029ea6:	d001      	beq.n	8029eac <lfs_fs_pred+0x68>
            return err;
 8029ea8:	693b      	ldr	r3, [r7, #16]
 8029eaa:	e00c      	b.n	8029ec6 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8029eac:	687b      	ldr	r3, [r7, #4]
 8029eae:	3318      	adds	r3, #24
 8029eb0:	4618      	mov	r0, r3
 8029eb2:	f7f9 ff74 	bl	8023d9e <lfs_pair_isnull>
 8029eb6:	4603      	mov	r3, r0
 8029eb8:	f083 0301 	eor.w	r3, r3, #1
 8029ebc:	b2db      	uxtb	r3, r3
 8029ebe:	2b00      	cmp	r3, #0
 8029ec0:	d1cf      	bne.n	8029e62 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029ec2:	f06f 0301 	mvn.w	r3, #1
}
 8029ec6:	4618      	mov	r0, r3
 8029ec8:	3718      	adds	r7, #24
 8029eca:	46bd      	mov	sp, r7
 8029ecc:	bd80      	pop	{r7, pc}

08029ece <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8029ece:	b5b0      	push	{r4, r5, r7, lr}
 8029ed0:	b08e      	sub	sp, #56	; 0x38
 8029ed2:	af04      	add	r7, sp, #16
 8029ed4:	60f8      	str	r0, [r7, #12]
 8029ed6:	60b9      	str	r1, [r7, #8]
 8029ed8:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8029eda:	68fb      	ldr	r3, [r7, #12]
 8029edc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8029ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ee0:	681b      	ldr	r3, [r3, #0]
 8029ee2:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029ee8:	6a3b      	ldr	r3, [r7, #32]
 8029eea:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8029eee:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029ef0:	6a3b      	ldr	r3, [r7, #32]
 8029ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ef4:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8029ef6:	69fb      	ldr	r3, [r7, #28]
 8029ef8:	681b      	ldr	r3, [r3, #0]
 8029efa:	69fa      	ldr	r2, [r7, #28]
 8029efc:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8029efe:	2108      	movs	r1, #8
 8029f00:	9103      	str	r1, [sp, #12]
 8029f02:	f107 0110 	add.w	r1, r7, #16
 8029f06:	9102      	str	r1, [sp, #8]
 8029f08:	9201      	str	r2, [sp, #4]
 8029f0a:	9300      	str	r3, [sp, #0]
 8029f0c:	462b      	mov	r3, r5
 8029f0e:	4622      	mov	r2, r4
 8029f10:	4601      	mov	r1, r0
 8029f12:	6a38      	ldr	r0, [r7, #32]
 8029f14:	f7f9 fc0a 	bl	802372c <lfs_bd_read>
 8029f18:	61b8      	str	r0, [r7, #24]
    if (err) {
 8029f1a:	69bb      	ldr	r3, [r7, #24]
 8029f1c:	2b00      	cmp	r3, #0
 8029f1e:	d001      	beq.n	8029f24 <lfs_fs_parent_match+0x56>
        return err;
 8029f20:	69bb      	ldr	r3, [r7, #24]
 8029f22:	e012      	b.n	8029f4a <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8029f24:	f107 0310 	add.w	r3, r7, #16
 8029f28:	4618      	mov	r0, r3
 8029f2a:	f7f9 ffaa 	bl	8023e82 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8029f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f30:	1d1a      	adds	r2, r3, #4
 8029f32:	f107 0310 	add.w	r3, r7, #16
 8029f36:	4611      	mov	r1, r2
 8029f38:	4618      	mov	r0, r3
 8029f3a:	f7f9 ff4b 	bl	8023dd4 <lfs_pair_cmp>
 8029f3e:	4603      	mov	r3, r0
 8029f40:	2b00      	cmp	r3, #0
 8029f42:	bf14      	ite	ne
 8029f44:	2301      	movne	r3, #1
 8029f46:	2300      	moveq	r3, #0
 8029f48:	b2db      	uxtb	r3, r3
}
 8029f4a:	4618      	mov	r0, r3
 8029f4c:	3728      	adds	r7, #40	; 0x28
 8029f4e:	46bd      	mov	sp, r7
 8029f50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08029f54 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8029f54:	b580      	push	{r7, lr}
 8029f56:	b08e      	sub	sp, #56	; 0x38
 8029f58:	af04      	add	r7, sp, #16
 8029f5a:	60f8      	str	r0, [r7, #12]
 8029f5c:	60b9      	str	r1, [r7, #8]
 8029f5e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8029f60:	687b      	ldr	r3, [r7, #4]
 8029f62:	2200      	movs	r2, #0
 8029f64:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8029f66:	687b      	ldr	r3, [r7, #4]
 8029f68:	2201      	movs	r2, #1
 8029f6a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029f6c:	2300      	movs	r3, #0
 8029f6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8029f70:	e030      	b.n	8029fd4 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 8029f72:	68fb      	ldr	r3, [r7, #12]
 8029f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029f76:	6a1b      	ldr	r3, [r3, #32]
 8029f78:	085b      	lsrs	r3, r3, #1
 8029f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029f7c:	429a      	cmp	r2, r3
 8029f7e:	d302      	bcc.n	8029f86 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029f80:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029f84:	e033      	b.n	8029fee <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8029f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f88:	3301      	adds	r3, #1
 8029f8a:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029f8c:	687b      	ldr	r3, [r7, #4]
 8029f8e:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029f92:	68fb      	ldr	r3, [r7, #12]
 8029f94:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8029f96:	68bb      	ldr	r3, [r7, #8]
 8029f98:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029f9a:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8029f9c:	68bb      	ldr	r3, [r7, #8]
 8029f9e:	3304      	adds	r3, #4
 8029fa0:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029fa2:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029fa4:	f107 0314 	add.w	r3, r7, #20
 8029fa8:	9303      	str	r3, [sp, #12]
 8029faa:	4b13      	ldr	r3, [pc, #76]	; (8029ff8 <lfs_fs_parent+0xa4>)
 8029fac:	9302      	str	r3, [sp, #8]
 8029fae:	2300      	movs	r3, #0
 8029fb0:	9301      	str	r3, [sp, #4]
 8029fb2:	4b12      	ldr	r3, [pc, #72]	; (8029ffc <lfs_fs_parent+0xa8>)
 8029fb4:	9300      	str	r3, [sp, #0]
 8029fb6:	4b12      	ldr	r3, [pc, #72]	; (802a000 <lfs_fs_parent+0xac>)
 8029fb8:	6879      	ldr	r1, [r7, #4]
 8029fba:	68f8      	ldr	r0, [r7, #12]
 8029fbc:	f7fb f90c 	bl	80251d8 <lfs_dir_fetchmatch>
 8029fc0:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8029fc2:	6a3b      	ldr	r3, [r7, #32]
 8029fc4:	2b00      	cmp	r3, #0
 8029fc6:	d005      	beq.n	8029fd4 <lfs_fs_parent+0x80>
 8029fc8:	6a3b      	ldr	r3, [r7, #32]
 8029fca:	f113 0f02 	cmn.w	r3, #2
 8029fce:	d001      	beq.n	8029fd4 <lfs_fs_parent+0x80>
            return tag;
 8029fd0:	6a3b      	ldr	r3, [r7, #32]
 8029fd2:	e00c      	b.n	8029fee <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8029fd4:	687b      	ldr	r3, [r7, #4]
 8029fd6:	3318      	adds	r3, #24
 8029fd8:	4618      	mov	r0, r3
 8029fda:	f7f9 fee0 	bl	8023d9e <lfs_pair_isnull>
 8029fde:	4603      	mov	r3, r0
 8029fe0:	f083 0301 	eor.w	r3, r3, #1
 8029fe4:	b2db      	uxtb	r3, r3
 8029fe6:	2b00      	cmp	r3, #0
 8029fe8:	d1c3      	bne.n	8029f72 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029fea:	f06f 0301 	mvn.w	r3, #1
}
 8029fee:	4618      	mov	r0, r3
 8029ff0:	3728      	adds	r7, #40	; 0x28
 8029ff2:	46bd      	mov	sp, r7
 8029ff4:	bd80      	pop	{r7, pc}
 8029ff6:	bf00      	nop
 8029ff8:	08029ecf 	.word	0x08029ecf
 8029ffc:	20000008 	.word	0x20000008
 802a000:	7ff003ff 	.word	0x7ff003ff

0802a004 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 802a004:	b590      	push	{r4, r7, lr}
 802a006:	b083      	sub	sp, #12
 802a008:	af00      	add	r7, sp, #0
 802a00a:	6078      	str	r0, [r7, #4]
 802a00c:	460b      	mov	r3, r1
 802a00e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 802a010:	687b      	ldr	r3, [r7, #4]
 802a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a014:	4618      	mov	r0, r3
 802a016:	f7f9 ffd3 	bl	8023fc0 <lfs_tag_size>
 802a01a:	4603      	mov	r3, r0
 802a01c:	2b00      	cmp	r3, #0
 802a01e:	d10a      	bne.n	802a036 <lfs_fs_preporphans+0x32>
 802a020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a024:	2b00      	cmp	r3, #0
 802a026:	da06      	bge.n	802a036 <lfs_fs_preporphans+0x32>
 802a028:	4b10      	ldr	r3, [pc, #64]	; (802a06c <lfs_fs_preporphans+0x68>)
 802a02a:	4a11      	ldr	r2, [pc, #68]	; (802a070 <lfs_fs_preporphans+0x6c>)
 802a02c:	f241 114c 	movw	r1, #4428	; 0x114c
 802a030:	4810      	ldr	r0, [pc, #64]	; (802a074 <lfs_fs_preporphans+0x70>)
 802a032:	f002 f9e3 	bl	802c3fc <__assert_func>
    lfs->gstate.tag += orphans;
 802a036:	687b      	ldr	r3, [r7, #4]
 802a038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802a03a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a03e:	441a      	add	r2, r3
 802a040:	687b      	ldr	r3, [r7, #4]
 802a042:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a044:	687b      	ldr	r3, [r7, #4]
 802a046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a048:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 802a04c:	687b      	ldr	r3, [r7, #4]
 802a04e:	3330      	adds	r3, #48	; 0x30
 802a050:	4618      	mov	r0, r3
 802a052:	f7fa f818 	bl	8024086 <lfs_gstate_hasorphans>
 802a056:	4603      	mov	r3, r0
 802a058:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a05a:	ea44 0203 	orr.w	r2, r4, r3
 802a05e:	687b      	ldr	r3, [r7, #4]
 802a060:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 802a062:	2300      	movs	r3, #0
}
 802a064:	4618      	mov	r0, r3
 802a066:	370c      	adds	r7, #12
 802a068:	46bd      	mov	sp, r7
 802a06a:	bd90      	pop	{r4, r7, pc}
 802a06c:	08033b78 	.word	0x08033b78
 802a070:	080347a0 	.word	0x080347a0
 802a074:	0803341c 	.word	0x0803341c

0802a078 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 802a078:	b480      	push	{r7}
 802a07a:	b085      	sub	sp, #20
 802a07c:	af00      	add	r7, sp, #0
 802a07e:	60f8      	str	r0, [r7, #12]
 802a080:	460b      	mov	r3, r1
 802a082:	607a      	str	r2, [r7, #4]
 802a084:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a086:	68fb      	ldr	r3, [r7, #12]
 802a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a08a:	4a17      	ldr	r2, [pc, #92]	; (802a0e8 <lfs_fs_prepmove+0x70>)
 802a08c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 802a08e:	897b      	ldrh	r3, [r7, #10]
 802a090:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a094:	428b      	cmp	r3, r1
 802a096:	d006      	beq.n	802a0a6 <lfs_fs_prepmove+0x2e>
 802a098:	897b      	ldrh	r3, [r7, #10]
 802a09a:	029b      	lsls	r3, r3, #10
 802a09c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a0a0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a0a4:	e000      	b.n	802a0a8 <lfs_fs_prepmove+0x30>
 802a0a6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a0a8:	431a      	orrs	r2, r3
 802a0aa:	68fb      	ldr	r3, [r7, #12]
 802a0ac:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 802a0ae:	897b      	ldrh	r3, [r7, #10]
 802a0b0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a0b4:	4293      	cmp	r3, r2
 802a0b6:	d002      	beq.n	802a0be <lfs_fs_prepmove+0x46>
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	681b      	ldr	r3, [r3, #0]
 802a0bc:	e000      	b.n	802a0c0 <lfs_fs_prepmove+0x48>
 802a0be:	2300      	movs	r3, #0
 802a0c0:	68fa      	ldr	r2, [r7, #12]
 802a0c2:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 802a0c4:	897b      	ldrh	r3, [r7, #10]
 802a0c6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a0ca:	4293      	cmp	r3, r2
 802a0cc:	d003      	beq.n	802a0d6 <lfs_fs_prepmove+0x5e>
 802a0ce:	687b      	ldr	r3, [r7, #4]
 802a0d0:	3304      	adds	r3, #4
 802a0d2:	681b      	ldr	r3, [r3, #0]
 802a0d4:	e000      	b.n	802a0d8 <lfs_fs_prepmove+0x60>
 802a0d6:	2300      	movs	r3, #0
 802a0d8:	68fa      	ldr	r2, [r7, #12]
 802a0da:	6393      	str	r3, [r2, #56]	; 0x38
}
 802a0dc:	bf00      	nop
 802a0de:	3714      	adds	r7, #20
 802a0e0:	46bd      	mov	sp, r7
 802a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0e6:	4770      	bx	lr
 802a0e8:	800003ff 	.word	0x800003ff

0802a0ec <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 802a0ec:	b5b0      	push	{r4, r5, r7, lr}
 802a0ee:	b094      	sub	sp, #80	; 0x50
 802a0f0:	af04      	add	r7, sp, #16
 802a0f2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	333c      	adds	r3, #60	; 0x3c
 802a0f8:	4618      	mov	r0, r3
 802a0fa:	f7f9 ffe6 	bl	80240ca <lfs_gstate_hasmove>
 802a0fe:	4603      	mov	r3, r0
 802a100:	f083 0301 	eor.w	r3, r3, #1
 802a104:	b2db      	uxtb	r3, r3
 802a106:	2b00      	cmp	r3, #0
 802a108:	d001      	beq.n	802a10e <lfs_fs_demove+0x22>
        return 0;
 802a10a:	2300      	movs	r3, #0
 802a10c:	e049      	b.n	802a1a2 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802a10e:	687b      	ldr	r3, [r7, #4]
 802a110:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 802a112:	687b      	ldr	r3, [r7, #4]
 802a114:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 802a116:	687b      	ldr	r3, [r7, #4]
 802a118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a11a:	4618      	mov	r0, r3
 802a11c:	f7f9 ff40 	bl	8023fa0 <lfs_tag_id>
 802a120:	4603      	mov	r3, r0
 802a122:	461a      	mov	r2, r3
 802a124:	4b21      	ldr	r3, [pc, #132]	; (802a1ac <lfs_fs_demove+0xc0>)
 802a126:	9302      	str	r3, [sp, #8]
 802a128:	9201      	str	r2, [sp, #4]
 802a12a:	9400      	str	r4, [sp, #0]
 802a12c:	462b      	mov	r3, r5
 802a12e:	f241 1266 	movw	r2, #4454	; 0x1166
 802a132:	491f      	ldr	r1, [pc, #124]	; (802a1b0 <lfs_fs_demove+0xc4>)
 802a134:	481f      	ldr	r0, [pc, #124]	; (802a1b4 <lfs_fs_demove+0xc8>)
 802a136:	f003 f99b 	bl	802d470 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802a13a:	687b      	ldr	r3, [r7, #4]
 802a13c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 802a140:	f107 0318 	add.w	r3, r7, #24
 802a144:	4619      	mov	r1, r3
 802a146:	6878      	ldr	r0, [r7, #4]
 802a148:	f7fb fbb4 	bl	80258b4 <lfs_dir_fetch>
 802a14c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 802a14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a150:	2b00      	cmp	r3, #0
 802a152:	d001      	beq.n	802a158 <lfs_fs_demove+0x6c>
        return err;
 802a154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a156:	e024      	b.n	802a1a2 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 802a158:	687b      	ldr	r3, [r7, #4]
 802a15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a15c:	4618      	mov	r0, r3
 802a15e:	f7f9 ff1f 	bl	8023fa0 <lfs_tag_id>
 802a162:	4603      	mov	r3, r0
 802a164:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a166:	2200      	movs	r2, #0
 802a168:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a16c:	6878      	ldr	r0, [r7, #4]
 802a16e:	f7ff ff83 	bl	802a078 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 802a172:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802a174:	029b      	lsls	r3, r3, #10
 802a176:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a17a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a17e:	613b      	str	r3, [r7, #16]
 802a180:	2300      	movs	r3, #0
 802a182:	617b      	str	r3, [r7, #20]
 802a184:	f107 0210 	add.w	r2, r7, #16
 802a188:	f107 0118 	add.w	r1, r7, #24
 802a18c:	2301      	movs	r3, #1
 802a18e:	6878      	ldr	r0, [r7, #4]
 802a190:	f7fd f9aa 	bl	80274e8 <lfs_dir_commit>
 802a194:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 802a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a198:	2b00      	cmp	r3, #0
 802a19a:	d001      	beq.n	802a1a0 <lfs_fs_demove+0xb4>
        return err;
 802a19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a19e:	e000      	b.n	802a1a2 <lfs_fs_demove+0xb6>
    }

    return 0;
 802a1a0:	2300      	movs	r3, #0
}
 802a1a2:	4618      	mov	r0, r3
 802a1a4:	3740      	adds	r7, #64	; 0x40
 802a1a6:	46bd      	mov	sp, r7
 802a1a8:	bdb0      	pop	{r4, r5, r7, pc}
 802a1aa:	bf00      	nop
 802a1ac:	08033530 	.word	0x08033530
 802a1b0:	0803341c 	.word	0x0803341c
 802a1b4:	08033bac 	.word	0x08033bac

0802a1b8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 802a1b8:	b5b0      	push	{r4, r5, r7, lr}
 802a1ba:	b0b2      	sub	sp, #200	; 0xc8
 802a1bc:	af04      	add	r7, sp, #16
 802a1be:	6078      	str	r0, [r7, #4]
 802a1c0:	460b      	mov	r3, r1
 802a1c2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802a1c4:	687b      	ldr	r3, [r7, #4]
 802a1c6:	3330      	adds	r3, #48	; 0x30
 802a1c8:	4618      	mov	r0, r3
 802a1ca:	f7f9 ff5c 	bl	8024086 <lfs_gstate_hasorphans>
 802a1ce:	4603      	mov	r3, r0
 802a1d0:	f083 0301 	eor.w	r3, r3, #1
 802a1d4:	b2db      	uxtb	r3, r3
 802a1d6:	2b00      	cmp	r3, #0
 802a1d8:	d001      	beq.n	802a1de <lfs_fs_deorphan+0x26>
        return 0;
 802a1da:	2300      	movs	r3, #0
 802a1dc:	e17c      	b.n	802a4d8 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 802a1de:	2300      	movs	r3, #0
 802a1e0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802a1e4:	f107 030c 	add.w	r3, r7, #12
 802a1e8:	2220      	movs	r2, #32
 802a1ea:	2100      	movs	r1, #0
 802a1ec:	4618      	mov	r0, r3
 802a1ee:	f003 fad5 	bl	802d79c <memset>
 802a1f2:	2301      	movs	r3, #1
 802a1f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802a1f8:	2301      	movs	r3, #1
 802a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802a1fc:	e148      	b.n	802a490 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802a1fe:	f107 030c 	add.w	r3, r7, #12
 802a202:	f103 0218 	add.w	r2, r3, #24
 802a206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a20a:	4619      	mov	r1, r3
 802a20c:	6878      	ldr	r0, [r7, #4]
 802a20e:	f7fb fb51 	bl	80258b4 <lfs_dir_fetch>
 802a212:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 802a216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a21a:	2b00      	cmp	r3, #0
 802a21c:	d002      	beq.n	802a224 <lfs_fs_deorphan+0x6c>
                return err;
 802a21e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a222:	e159      	b.n	802a4d8 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 802a224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802a228:	f083 0301 	eor.w	r3, r3, #1
 802a22c:	b2db      	uxtb	r3, r3
 802a22e:	2b00      	cmp	r3, #0
 802a230:	f000 8124 	beq.w	802a47c <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 802a234:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802a238:	f107 030c 	add.w	r3, r7, #12
 802a23c:	3318      	adds	r3, #24
 802a23e:	4619      	mov	r1, r3
 802a240:	6878      	ldr	r0, [r7, #4]
 802a242:	f7ff fe87 	bl	8029f54 <lfs_fs_parent>
 802a246:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 802a24a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a24e:	2b00      	cmp	r3, #0
 802a250:	da07      	bge.n	802a262 <lfs_fs_deorphan+0xaa>
 802a252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a256:	f113 0f02 	cmn.w	r3, #2
 802a25a:	d002      	beq.n	802a262 <lfs_fs_deorphan+0xaa>
                    return tag;
 802a25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a260:	e13a      	b.n	802a4d8 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 802a262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a266:	f113 0f02 	cmn.w	r3, #2
 802a26a:	d157      	bne.n	802a31c <lfs_fs_deorphan+0x164>
 802a26c:	78fb      	ldrb	r3, [r7, #3]
 802a26e:	2b00      	cmp	r3, #0
 802a270:	d054      	beq.n	802a31c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 802a272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a276:	499a      	ldr	r1, [pc, #616]	; (802a4e0 <lfs_fs_deorphan+0x328>)
 802a278:	9101      	str	r1, [sp, #4]
 802a27a:	9300      	str	r3, [sp, #0]
 802a27c:	4613      	mov	r3, r2
 802a27e:	f241 12a1 	movw	r2, #4513	; 0x11a1
 802a282:	4998      	ldr	r1, [pc, #608]	; (802a4e4 <lfs_fs_deorphan+0x32c>)
 802a284:	4898      	ldr	r0, [pc, #608]	; (802a4e8 <lfs_fs_deorphan+0x330>)
 802a286:	f003 f8f3 	bl	802d470 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 802a28a:	687b      	ldr	r3, [r7, #4]
 802a28c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802a290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a294:	4619      	mov	r1, r3
 802a296:	6878      	ldr	r0, [r7, #4]
 802a298:	f7fb fb28 	bl	80258ec <lfs_dir_getgstate>
 802a29c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 802a2a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a2a4:	2b00      	cmp	r3, #0
 802a2a6:	d002      	beq.n	802a2ae <lfs_fs_deorphan+0xf6>
                        return err;
 802a2a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a2ac:	e114      	b.n	802a4d8 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 802a2ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a2b2:	3318      	adds	r3, #24
 802a2b4:	4618      	mov	r0, r3
 802a2b6:	f7f9 fdfe 	bl	8023eb6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a2ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a2be:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802a2c2:	051a      	lsls	r2, r3, #20
 802a2c4:	4b89      	ldr	r3, [pc, #548]	; (802a4ec <lfs_fs_deorphan+0x334>)
 802a2c6:	4313      	orrs	r3, r2
 802a2c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a2cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a2d0:	3318      	adds	r3, #24
 802a2d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a2d6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 802a2da:	f107 010c 	add.w	r1, r7, #12
 802a2de:	2301      	movs	r3, #1
 802a2e0:	6878      	ldr	r0, [r7, #4]
 802a2e2:	f7fc fe07 	bl	8026ef4 <lfs_dir_orphaningcommit>
 802a2e6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 802a2ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a2ee:	3318      	adds	r3, #24
 802a2f0:	4618      	mov	r0, r3
 802a2f2:	f7f9 fdc6 	bl	8023e82 <lfs_pair_fromle32>
                    if (state < 0) {
 802a2f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a2fa:	2b00      	cmp	r3, #0
 802a2fc:	da02      	bge.n	802a304 <lfs_fs_deorphan+0x14c>
                        return state;
 802a2fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 802a302:	e0e9      	b.n	802a4d8 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 802a304:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a308:	3301      	adds	r3, #1
 802a30a:	b2db      	uxtb	r3, r3
 802a30c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 802a310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a314:	2b03      	cmp	r3, #3
 802a316:	f040 80af 	bne.w	802a478 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 802a31a:	e763      	b.n	802a1e4 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 802a31c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a320:	f113 0f02 	cmn.w	r3, #2
 802a324:	f000 80aa 	beq.w	802a47c <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802a328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802a32c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802a330:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a334:	9300      	str	r3, [sp, #0]
 802a336:	4613      	mov	r3, r2
 802a338:	4a6d      	ldr	r2, [pc, #436]	; (802a4f0 <lfs_fs_deorphan+0x338>)
 802a33a:	6878      	ldr	r0, [r7, #4]
 802a33c:	f7fa fa1a 	bl	8024774 <lfs_dir_get>
 802a340:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 802a344:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a348:	2b00      	cmp	r3, #0
 802a34a:	da02      	bge.n	802a352 <lfs_fs_deorphan+0x19a>
                        return state;
 802a34c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a350:	e0c2      	b.n	802a4d8 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 802a352:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a356:	4618      	mov	r0, r3
 802a358:	f7f9 fd93 	bl	8023e82 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 802a35c:	f107 030c 	add.w	r3, r7, #12
 802a360:	f103 0218 	add.w	r2, r3, #24
 802a364:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a368:	4611      	mov	r1, r2
 802a36a:	4618      	mov	r0, r3
 802a36c:	f7f9 fd5c 	bl	8023e28 <lfs_pair_sync>
 802a370:	4603      	mov	r3, r0
 802a372:	f083 0301 	eor.w	r3, r3, #1
 802a376:	b2db      	uxtb	r3, r3
 802a378:	2b00      	cmp	r3, #0
 802a37a:	d07f      	beq.n	802a47c <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 802a37c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a380:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802a384:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802a388:	4c55      	ldr	r4, [pc, #340]	; (802a4e0 <lfs_fs_deorphan+0x328>)
 802a38a:	9403      	str	r4, [sp, #12]
 802a38c:	9102      	str	r1, [sp, #8]
 802a38e:	9201      	str	r2, [sp, #4]
 802a390:	9300      	str	r3, [sp, #0]
 802a392:	4603      	mov	r3, r0
 802a394:	f241 12ca 	movw	r2, #4554	; 0x11ca
 802a398:	4952      	ldr	r1, [pc, #328]	; (802a4e4 <lfs_fs_deorphan+0x32c>)
 802a39a:	4856      	ldr	r0, [pc, #344]	; (802a4f4 <lfs_fs_deorphan+0x33c>)
 802a39c:	f003 f868 	bl	802d470 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802a3a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802a3a4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802a3a8:	687b      	ldr	r3, [r7, #4]
 802a3aa:	3330      	adds	r3, #48	; 0x30
 802a3ac:	f107 020c 	add.w	r2, r7, #12
 802a3b0:	4611      	mov	r1, r2
 802a3b2:	4618      	mov	r0, r3
 802a3b4:	f7f9 fe9c 	bl	80240f0 <lfs_gstate_hasmovehere>
 802a3b8:	4603      	mov	r3, r0
 802a3ba:	2b00      	cmp	r3, #0
 802a3bc:	d01c      	beq.n	802a3f8 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802a3be:	687b      	ldr	r3, [r7, #4]
 802a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a3c2:	4618      	mov	r0, r3
 802a3c4:	f7f9 fdec 	bl	8023fa0 <lfs_tag_id>
 802a3c8:	4603      	mov	r3, r0
 802a3ca:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 802a3ce:	68f9      	ldr	r1, [r7, #12]
 802a3d0:	693b      	ldr	r3, [r7, #16]
 802a3d2:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802a3d6:	4842      	ldr	r0, [pc, #264]	; (802a4e0 <lfs_fs_deorphan+0x328>)
 802a3d8:	9002      	str	r0, [sp, #8]
 802a3da:	9201      	str	r2, [sp, #4]
 802a3dc:	9300      	str	r3, [sp, #0]
 802a3de:	460b      	mov	r3, r1
 802a3e0:	f241 12d5 	movw	r2, #4565	; 0x11d5
 802a3e4:	493f      	ldr	r1, [pc, #252]	; (802a4e4 <lfs_fs_deorphan+0x32c>)
 802a3e6:	4844      	ldr	r0, [pc, #272]	; (802a4f8 <lfs_fs_deorphan+0x340>)
 802a3e8:	f003 f842 	bl	802d470 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a3ec:	2200      	movs	r2, #0
 802a3ee:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a3f2:	6878      	ldr	r0, [r7, #4]
 802a3f4:	f7ff fe40 	bl	802a078 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a3f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a3fc:	4618      	mov	r0, r3
 802a3fe:	f7f9 fd5a 	bl	8023eb6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a402:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a406:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a40a:	4293      	cmp	r3, r2
 802a40c:	d007      	beq.n	802a41e <lfs_fs_deorphan+0x266>
 802a40e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a412:	029b      	lsls	r3, r3, #10
 802a414:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a418:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a41c:	e000      	b.n	802a420 <lfs_fs_deorphan+0x268>
 802a41e:	2300      	movs	r3, #0
 802a420:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a422:	2300      	movs	r3, #0
 802a424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a428:	4b34      	ldr	r3, [pc, #208]	; (802a4fc <lfs_fs_deorphan+0x344>)
 802a42a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a42e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a436:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a43a:	f107 010c 	add.w	r1, r7, #12
 802a43e:	2302      	movs	r3, #2
 802a440:	6878      	ldr	r0, [r7, #4]
 802a442:	f7fc fd57 	bl	8026ef4 <lfs_dir_orphaningcommit>
 802a446:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a44a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a44e:	4618      	mov	r0, r3
 802a450:	f7f9 fd17 	bl	8023e82 <lfs_pair_fromle32>
                        if (state < 0) {
 802a454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a458:	2b00      	cmp	r3, #0
 802a45a:	da02      	bge.n	802a462 <lfs_fs_deorphan+0x2aa>
                            return state;
 802a45c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 802a460:	e03a      	b.n	802a4d8 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a462:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a466:	3301      	adds	r3, #1
 802a468:	b2db      	uxtb	r3, r3
 802a46a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a46e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a472:	2b03      	cmp	r3, #3
 802a474:	d10c      	bne.n	802a490 <lfs_fs_deorphan+0x2d8>
 802a476:	e6b5      	b.n	802a1e4 <lfs_fs_deorphan+0x2c>
                    continue;
 802a478:	bf00      	nop
 802a47a:	e009      	b.n	802a490 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a47c:	f107 040c 	add.w	r4, r7, #12
 802a480:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 802a484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a488:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a48c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 802a490:	f107 030c 	add.w	r3, r7, #12
 802a494:	3318      	adds	r3, #24
 802a496:	4618      	mov	r0, r3
 802a498:	f7f9 fc81 	bl	8023d9e <lfs_pair_isnull>
 802a49c:	4603      	mov	r3, r0
 802a49e:	f083 0301 	eor.w	r3, r3, #1
 802a4a2:	b2db      	uxtb	r3, r3
 802a4a4:	2b00      	cmp	r3, #0
 802a4a6:	f47f aeaa 	bne.w	802a1fe <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a4aa:	687b      	ldr	r3, [r7, #4]
 802a4ac:	3330      	adds	r3, #48	; 0x30
 802a4ae:	4618      	mov	r0, r3
 802a4b0:	f7f9 fdfc 	bl	80240ac <lfs_gstate_getorphans>
 802a4b4:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a4b6:	461a      	mov	r2, r3
 802a4b8:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 802a4bc:	4619      	mov	r1, r3
 802a4be:	4610      	mov	r0, r2
 802a4c0:	f7f9 f858 	bl	8023574 <lfs_min>
 802a4c4:	4603      	mov	r3, r0
 802a4c6:	b2db      	uxtb	r3, r3
 802a4c8:	425b      	negs	r3, r3
 802a4ca:	b2db      	uxtb	r3, r3
 802a4cc:	b25b      	sxtb	r3, r3
 802a4ce:	4619      	mov	r1, r3
 802a4d0:	6878      	ldr	r0, [r7, #4]
 802a4d2:	f7ff fd97 	bl	802a004 <lfs_fs_preporphans>
 802a4d6:	4603      	mov	r3, r0
            found));
}
 802a4d8:	4618      	mov	r0, r3
 802a4da:	37b8      	adds	r7, #184	; 0xb8
 802a4dc:	46bd      	mov	sp, r7
 802a4de:	bdb0      	pop	{r4, r5, r7, pc}
 802a4e0:	08033530 	.word	0x08033530
 802a4e4:	0803341c 	.word	0x0803341c
 802a4e8:	08033be0 	.word	0x08033be0
 802a4ec:	000ffc08 	.word	0x000ffc08
 802a4f0:	7ffffc00 	.word	0x7ffffc00
 802a4f4:	08033c10 	.word	0x08033c10
 802a4f8:	08033c54 	.word	0x08033c54
 802a4fc:	600ffc08 	.word	0x600ffc08

0802a500 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a500:	b580      	push	{r7, lr}
 802a502:	b084      	sub	sp, #16
 802a504:	af00      	add	r7, sp, #0
 802a506:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a508:	6878      	ldr	r0, [r7, #4]
 802a50a:	f7ff fdef 	bl	802a0ec <lfs_fs_demove>
 802a50e:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a510:	68fb      	ldr	r3, [r7, #12]
 802a512:	2b00      	cmp	r3, #0
 802a514:	d001      	beq.n	802a51a <lfs_fs_forceconsistency+0x1a>
        return err;
 802a516:	68fb      	ldr	r3, [r7, #12]
 802a518:	e00a      	b.n	802a530 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a51a:	2101      	movs	r1, #1
 802a51c:	6878      	ldr	r0, [r7, #4]
 802a51e:	f7ff fe4b 	bl	802a1b8 <lfs_fs_deorphan>
 802a522:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a524:	68fb      	ldr	r3, [r7, #12]
 802a526:	2b00      	cmp	r3, #0
 802a528:	d001      	beq.n	802a52e <lfs_fs_forceconsistency+0x2e>
        return err;
 802a52a:	68fb      	ldr	r3, [r7, #12]
 802a52c:	e000      	b.n	802a530 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a52e:	2300      	movs	r3, #0
}
 802a530:	4618      	mov	r0, r3
 802a532:	3710      	adds	r7, #16
 802a534:	46bd      	mov	sp, r7
 802a536:	bd80      	pop	{r7, pc}

0802a538 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a538:	b480      	push	{r7}
 802a53a:	b085      	sub	sp, #20
 802a53c:	af00      	add	r7, sp, #0
 802a53e:	6078      	str	r0, [r7, #4]
 802a540:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a542:	687b      	ldr	r3, [r7, #4]
 802a544:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a546:	68fb      	ldr	r3, [r7, #12]
 802a548:	681b      	ldr	r3, [r3, #0]
 802a54a:	1c5a      	adds	r2, r3, #1
 802a54c:	68fb      	ldr	r3, [r7, #12]
 802a54e:	601a      	str	r2, [r3, #0]
    return 0;
 802a550:	2300      	movs	r3, #0
}
 802a552:	4618      	mov	r0, r3
 802a554:	3714      	adds	r7, #20
 802a556:	46bd      	mov	sp, r7
 802a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a55c:	4770      	bx	lr
	...

0802a560 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a560:	b580      	push	{r7, lr}
 802a562:	b084      	sub	sp, #16
 802a564:	af00      	add	r7, sp, #0
 802a566:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a568:	2300      	movs	r3, #0
 802a56a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a56c:	f107 0208 	add.w	r2, r7, #8
 802a570:	2300      	movs	r3, #0
 802a572:	4907      	ldr	r1, [pc, #28]	; (802a590 <lfs_fs_rawsize+0x30>)
 802a574:	6878      	ldr	r0, [r7, #4]
 802a576:	f7ff fb3f 	bl	8029bf8 <lfs_fs_rawtraverse>
 802a57a:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a57c:	68fb      	ldr	r3, [r7, #12]
 802a57e:	2b00      	cmp	r3, #0
 802a580:	d001      	beq.n	802a586 <lfs_fs_rawsize+0x26>
        return err;
 802a582:	68fb      	ldr	r3, [r7, #12]
 802a584:	e000      	b.n	802a588 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a586:	68bb      	ldr	r3, [r7, #8]
}
 802a588:	4618      	mov	r0, r3
 802a58a:	3710      	adds	r7, #16
 802a58c:	46bd      	mov	sp, r7
 802a58e:	bd80      	pop	{r7, pc}
 802a590:	0802a539 	.word	0x0802a539

0802a594 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a594:	b580      	push	{r7, lr}
 802a596:	b084      	sub	sp, #16
 802a598:	af00      	add	r7, sp, #0
 802a59a:	6078      	str	r0, [r7, #4]
 802a59c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a59e:	2300      	movs	r3, #0
 802a5a0:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a5a2:	68fb      	ldr	r3, [r7, #12]
 802a5a4:	2b00      	cmp	r3, #0
 802a5a6:	d001      	beq.n	802a5ac <lfs_format+0x18>
        return err;
 802a5a8:	68fb      	ldr	r3, [r7, #12]
 802a5aa:	e005      	b.n	802a5b8 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a5ac:	6839      	ldr	r1, [r7, #0]
 802a5ae:	6878      	ldr	r0, [r7, #4]
 802a5b0:	f7ff f8ca 	bl	8029748 <lfs_rawformat>
 802a5b4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a5b6:	68fb      	ldr	r3, [r7, #12]
}
 802a5b8:	4618      	mov	r0, r3
 802a5ba:	3710      	adds	r7, #16
 802a5bc:	46bd      	mov	sp, r7
 802a5be:	bd80      	pop	{r7, pc}

0802a5c0 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a5c0:	b580      	push	{r7, lr}
 802a5c2:	b084      	sub	sp, #16
 802a5c4:	af00      	add	r7, sp, #0
 802a5c6:	6078      	str	r0, [r7, #4]
 802a5c8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a5ca:	2300      	movs	r3, #0
 802a5cc:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a5ce:	68fb      	ldr	r3, [r7, #12]
 802a5d0:	2b00      	cmp	r3, #0
 802a5d2:	d001      	beq.n	802a5d8 <lfs_mount+0x18>
        return err;
 802a5d4:	68fb      	ldr	r3, [r7, #12]
 802a5d6:	e005      	b.n	802a5e4 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802a5d8:	6839      	ldr	r1, [r7, #0]
 802a5da:	6878      	ldr	r0, [r7, #4]
 802a5dc:	f7ff f954 	bl	8029888 <lfs_rawmount>
 802a5e0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a5e2:	68fb      	ldr	r3, [r7, #12]
}
 802a5e4:	4618      	mov	r0, r3
 802a5e6:	3710      	adds	r7, #16
 802a5e8:	46bd      	mov	sp, r7
 802a5ea:	bd80      	pop	{r7, pc}

0802a5ec <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802a5ec:	b580      	push	{r7, lr}
 802a5ee:	b084      	sub	sp, #16
 802a5f0:	af00      	add	r7, sp, #0
 802a5f2:	6078      	str	r0, [r7, #4]
 802a5f4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a5f6:	2300      	movs	r3, #0
 802a5f8:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a5fa:	68fb      	ldr	r3, [r7, #12]
 802a5fc:	2b00      	cmp	r3, #0
 802a5fe:	d001      	beq.n	802a604 <lfs_remove+0x18>
        return err;
 802a600:	68fb      	ldr	r3, [r7, #12]
 802a602:	e005      	b.n	802a610 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802a604:	6839      	ldr	r1, [r7, #0]
 802a606:	6878      	ldr	r0, [r7, #4]
 802a608:	f7fe fbd0 	bl	8028dac <lfs_rawremove>
 802a60c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a60e:	68fb      	ldr	r3, [r7, #12]
}
 802a610:	4618      	mov	r0, r3
 802a612:	3710      	adds	r7, #16
 802a614:	46bd      	mov	sp, r7
 802a616:	bd80      	pop	{r7, pc}

0802a618 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802a618:	b580      	push	{r7, lr}
 802a61a:	b086      	sub	sp, #24
 802a61c:	af00      	add	r7, sp, #0
 802a61e:	60f8      	str	r0, [r7, #12]
 802a620:	60b9      	str	r1, [r7, #8]
 802a622:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a624:	2300      	movs	r3, #0
 802a626:	617b      	str	r3, [r7, #20]
    if (err) {
 802a628:	697b      	ldr	r3, [r7, #20]
 802a62a:	2b00      	cmp	r3, #0
 802a62c:	d001      	beq.n	802a632 <lfs_rename+0x1a>
        return err;
 802a62e:	697b      	ldr	r3, [r7, #20]
 802a630:	e006      	b.n	802a640 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802a632:	687a      	ldr	r2, [r7, #4]
 802a634:	68b9      	ldr	r1, [r7, #8]
 802a636:	68f8      	ldr	r0, [r7, #12]
 802a638:	f7fe fc92 	bl	8028f60 <lfs_rawrename>
 802a63c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a63e:	697b      	ldr	r3, [r7, #20]
}
 802a640:	4618      	mov	r0, r3
 802a642:	3718      	adds	r7, #24
 802a644:	46bd      	mov	sp, r7
 802a646:	bd80      	pop	{r7, pc}

0802a648 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802a648:	b580      	push	{r7, lr}
 802a64a:	b086      	sub	sp, #24
 802a64c:	af00      	add	r7, sp, #0
 802a64e:	60f8      	str	r0, [r7, #12]
 802a650:	60b9      	str	r1, [r7, #8]
 802a652:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a654:	2300      	movs	r3, #0
 802a656:	617b      	str	r3, [r7, #20]
    if (err) {
 802a658:	697b      	ldr	r3, [r7, #20]
 802a65a:	2b00      	cmp	r3, #0
 802a65c:	d001      	beq.n	802a662 <lfs_stat+0x1a>
        return err;
 802a65e:	697b      	ldr	r3, [r7, #20]
 802a660:	e006      	b.n	802a670 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802a662:	687a      	ldr	r2, [r7, #4]
 802a664:	68b9      	ldr	r1, [r7, #8]
 802a666:	68f8      	ldr	r0, [r7, #12]
 802a668:	f7fe fb7a 	bl	8028d60 <lfs_rawstat>
 802a66c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a66e:	697b      	ldr	r3, [r7, #20]
}
 802a670:	4618      	mov	r0, r3
 802a672:	3718      	adds	r7, #24
 802a674:	46bd      	mov	sp, r7
 802a676:	bd80      	pop	{r7, pc}

0802a678 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802a678:	b580      	push	{r7, lr}
 802a67a:	b088      	sub	sp, #32
 802a67c:	af02      	add	r7, sp, #8
 802a67e:	60f8      	str	r0, [r7, #12]
 802a680:	60b9      	str	r1, [r7, #8]
 802a682:	607a      	str	r2, [r7, #4]
 802a684:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a686:	2300      	movs	r3, #0
 802a688:	617b      	str	r3, [r7, #20]
    if (err) {
 802a68a:	697b      	ldr	r3, [r7, #20]
 802a68c:	2b00      	cmp	r3, #0
 802a68e:	d001      	beq.n	802a694 <lfs_file_opencfg+0x1c>
        return err;
 802a690:	697b      	ldr	r3, [r7, #20]
 802a692:	e01c      	b.n	802a6ce <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a694:	68fb      	ldr	r3, [r7, #12]
 802a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a698:	68b9      	ldr	r1, [r7, #8]
 802a69a:	4618      	mov	r0, r3
 802a69c:	f7f9 fe28 	bl	80242f0 <lfs_mlist_isopen>
 802a6a0:	4603      	mov	r3, r0
 802a6a2:	f083 0301 	eor.w	r3, r3, #1
 802a6a6:	b2db      	uxtb	r3, r3
 802a6a8:	2b00      	cmp	r3, #0
 802a6aa:	d106      	bne.n	802a6ba <lfs_file_opencfg+0x42>
 802a6ac:	4b0a      	ldr	r3, [pc, #40]	; (802a6d8 <lfs_file_opencfg+0x60>)
 802a6ae:	4a0b      	ldr	r2, [pc, #44]	; (802a6dc <lfs_file_opencfg+0x64>)
 802a6b0:	f241 517b 	movw	r1, #5499	; 0x157b
 802a6b4:	480a      	ldr	r0, [pc, #40]	; (802a6e0 <lfs_file_opencfg+0x68>)
 802a6b6:	f001 fea1 	bl	802c3fc <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802a6ba:	6a3b      	ldr	r3, [r7, #32]
 802a6bc:	9300      	str	r3, [sp, #0]
 802a6be:	683b      	ldr	r3, [r7, #0]
 802a6c0:	687a      	ldr	r2, [r7, #4]
 802a6c2:	68b9      	ldr	r1, [r7, #8]
 802a6c4:	68f8      	ldr	r0, [r7, #12]
 802a6c6:	f7fd fba9 	bl	8027e1c <lfs_file_rawopencfg>
 802a6ca:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a6cc:	697b      	ldr	r3, [r7, #20]
}
 802a6ce:	4618      	mov	r0, r3
 802a6d0:	3718      	adds	r7, #24
 802a6d2:	46bd      	mov	sp, r7
 802a6d4:	bd80      	pop	{r7, pc}
 802a6d6:	bf00      	nop
 802a6d8:	08033c9c 	.word	0x08033c9c
 802a6dc:	080347b4 	.word	0x080347b4
 802a6e0:	0803341c 	.word	0x0803341c

0802a6e4 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802a6e4:	b580      	push	{r7, lr}
 802a6e6:	b084      	sub	sp, #16
 802a6e8:	af00      	add	r7, sp, #0
 802a6ea:	6078      	str	r0, [r7, #4]
 802a6ec:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a6ee:	2300      	movs	r3, #0
 802a6f0:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a6f2:	68fb      	ldr	r3, [r7, #12]
 802a6f4:	2b00      	cmp	r3, #0
 802a6f6:	d001      	beq.n	802a6fc <lfs_file_close+0x18>
        return err;
 802a6f8:	68fb      	ldr	r3, [r7, #12]
 802a6fa:	e015      	b.n	802a728 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a6fc:	687b      	ldr	r3, [r7, #4]
 802a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a700:	6839      	ldr	r1, [r7, #0]
 802a702:	4618      	mov	r0, r3
 802a704:	f7f9 fdf4 	bl	80242f0 <lfs_mlist_isopen>
 802a708:	4603      	mov	r3, r0
 802a70a:	2b00      	cmp	r3, #0
 802a70c:	d106      	bne.n	802a71c <lfs_file_close+0x38>
 802a70e:	4b08      	ldr	r3, [pc, #32]	; (802a730 <lfs_file_close+0x4c>)
 802a710:	4a08      	ldr	r2, [pc, #32]	; (802a734 <lfs_file_close+0x50>)
 802a712:	f241 518a 	movw	r1, #5514	; 0x158a
 802a716:	4808      	ldr	r0, [pc, #32]	; (802a738 <lfs_file_close+0x54>)
 802a718:	f001 fe70 	bl	802c3fc <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802a71c:	6839      	ldr	r1, [r7, #0]
 802a71e:	6878      	ldr	r0, [r7, #4]
 802a720:	f7fd fd4c 	bl	80281bc <lfs_file_rawclose>
 802a724:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a726:	68fb      	ldr	r3, [r7, #12]
}
 802a728:	4618      	mov	r0, r3
 802a72a:	3710      	adds	r7, #16
 802a72c:	46bd      	mov	sp, r7
 802a72e:	bd80      	pop	{r7, pc}
 802a730:	08033cd4 	.word	0x08033cd4
 802a734:	080347c8 	.word	0x080347c8
 802a738:	0803341c 	.word	0x0803341c

0802a73c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802a73c:	b580      	push	{r7, lr}
 802a73e:	b086      	sub	sp, #24
 802a740:	af00      	add	r7, sp, #0
 802a742:	60f8      	str	r0, [r7, #12]
 802a744:	60b9      	str	r1, [r7, #8]
 802a746:	607a      	str	r2, [r7, #4]
 802a748:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a74a:	2300      	movs	r3, #0
 802a74c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a74e:	697b      	ldr	r3, [r7, #20]
 802a750:	2b00      	cmp	r3, #0
 802a752:	d001      	beq.n	802a758 <lfs_file_read+0x1c>
        return err;
 802a754:	697b      	ldr	r3, [r7, #20]
 802a756:	e017      	b.n	802a788 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a758:	68fb      	ldr	r3, [r7, #12]
 802a75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a75c:	68b9      	ldr	r1, [r7, #8]
 802a75e:	4618      	mov	r0, r3
 802a760:	f7f9 fdc6 	bl	80242f0 <lfs_mlist_isopen>
 802a764:	4603      	mov	r3, r0
 802a766:	2b00      	cmp	r3, #0
 802a768:	d106      	bne.n	802a778 <lfs_file_read+0x3c>
 802a76a:	4b09      	ldr	r3, [pc, #36]	; (802a790 <lfs_file_read+0x54>)
 802a76c:	4a09      	ldr	r2, [pc, #36]	; (802a794 <lfs_file_read+0x58>)
 802a76e:	f241 51ac 	movw	r1, #5548	; 0x15ac
 802a772:	4809      	ldr	r0, [pc, #36]	; (802a798 <lfs_file_read+0x5c>)
 802a774:	f001 fe42 	bl	802c3fc <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802a778:	683b      	ldr	r3, [r7, #0]
 802a77a:	687a      	ldr	r2, [r7, #4]
 802a77c:	68b9      	ldr	r1, [r7, #8]
 802a77e:	68f8      	ldr	r0, [r7, #12]
 802a780:	f7fe f868 	bl	8028854 <lfs_file_rawread>
 802a784:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a786:	693b      	ldr	r3, [r7, #16]
}
 802a788:	4618      	mov	r0, r3
 802a78a:	3718      	adds	r7, #24
 802a78c:	46bd      	mov	sp, r7
 802a78e:	bd80      	pop	{r7, pc}
 802a790:	08033cd4 	.word	0x08033cd4
 802a794:	080347d8 	.word	0x080347d8
 802a798:	0803341c 	.word	0x0803341c

0802a79c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802a79c:	b580      	push	{r7, lr}
 802a79e:	b086      	sub	sp, #24
 802a7a0:	af00      	add	r7, sp, #0
 802a7a2:	60f8      	str	r0, [r7, #12]
 802a7a4:	60b9      	str	r1, [r7, #8]
 802a7a6:	607a      	str	r2, [r7, #4]
 802a7a8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a7aa:	2300      	movs	r3, #0
 802a7ac:	617b      	str	r3, [r7, #20]
    if (err) {
 802a7ae:	697b      	ldr	r3, [r7, #20]
 802a7b0:	2b00      	cmp	r3, #0
 802a7b2:	d001      	beq.n	802a7b8 <lfs_file_write+0x1c>
        return err;
 802a7b4:	697b      	ldr	r3, [r7, #20]
 802a7b6:	e017      	b.n	802a7e8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a7b8:	68fb      	ldr	r3, [r7, #12]
 802a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a7bc:	68b9      	ldr	r1, [r7, #8]
 802a7be:	4618      	mov	r0, r3
 802a7c0:	f7f9 fd96 	bl	80242f0 <lfs_mlist_isopen>
 802a7c4:	4603      	mov	r3, r0
 802a7c6:	2b00      	cmp	r3, #0
 802a7c8:	d106      	bne.n	802a7d8 <lfs_file_write+0x3c>
 802a7ca:	4b09      	ldr	r3, [pc, #36]	; (802a7f0 <lfs_file_write+0x54>)
 802a7cc:	4a09      	ldr	r2, [pc, #36]	; (802a7f4 <lfs_file_write+0x58>)
 802a7ce:	f241 51be 	movw	r1, #5566	; 0x15be
 802a7d2:	4809      	ldr	r0, [pc, #36]	; (802a7f8 <lfs_file_write+0x5c>)
 802a7d4:	f001 fe12 	bl	802c3fc <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802a7d8:	683b      	ldr	r3, [r7, #0]
 802a7da:	687a      	ldr	r2, [r7, #4]
 802a7dc:	68b9      	ldr	r1, [r7, #8]
 802a7de:	68f8      	ldr	r0, [r7, #12]
 802a7e0:	f7fe f996 	bl	8028b10 <lfs_file_rawwrite>
 802a7e4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a7e6:	693b      	ldr	r3, [r7, #16]
}
 802a7e8:	4618      	mov	r0, r3
 802a7ea:	3718      	adds	r7, #24
 802a7ec:	46bd      	mov	sp, r7
 802a7ee:	bd80      	pop	{r7, pc}
 802a7f0:	08033cd4 	.word	0x08033cd4
 802a7f4:	080347e8 	.word	0x080347e8
 802a7f8:	0803341c 	.word	0x0803341c

0802a7fc <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802a7fc:	b580      	push	{r7, lr}
 802a7fe:	b086      	sub	sp, #24
 802a800:	af00      	add	r7, sp, #0
 802a802:	60f8      	str	r0, [r7, #12]
 802a804:	60b9      	str	r1, [r7, #8]
 802a806:	607a      	str	r2, [r7, #4]
 802a808:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a80a:	2300      	movs	r3, #0
 802a80c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a80e:	697b      	ldr	r3, [r7, #20]
 802a810:	2b00      	cmp	r3, #0
 802a812:	d001      	beq.n	802a818 <lfs_file_seek+0x1c>
        return err;
 802a814:	697b      	ldr	r3, [r7, #20]
 802a816:	e017      	b.n	802a848 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a818:	68fb      	ldr	r3, [r7, #12]
 802a81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a81c:	68b9      	ldr	r1, [r7, #8]
 802a81e:	4618      	mov	r0, r3
 802a820:	f7f9 fd66 	bl	80242f0 <lfs_mlist_isopen>
 802a824:	4603      	mov	r3, r0
 802a826:	2b00      	cmp	r3, #0
 802a828:	d106      	bne.n	802a838 <lfs_file_seek+0x3c>
 802a82a:	4b09      	ldr	r3, [pc, #36]	; (802a850 <lfs_file_seek+0x54>)
 802a82c:	4a09      	ldr	r2, [pc, #36]	; (802a854 <lfs_file_seek+0x58>)
 802a82e:	f241 51d0 	movw	r1, #5584	; 0x15d0
 802a832:	4809      	ldr	r0, [pc, #36]	; (802a858 <lfs_file_seek+0x5c>)
 802a834:	f001 fde2 	bl	802c3fc <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802a838:	683b      	ldr	r3, [r7, #0]
 802a83a:	687a      	ldr	r2, [r7, #4]
 802a83c:	68b9      	ldr	r1, [r7, #8]
 802a83e:	68f8      	ldr	r0, [r7, #12]
 802a840:	f7fe f9ea 	bl	8028c18 <lfs_file_rawseek>
 802a844:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a846:	693b      	ldr	r3, [r7, #16]
}
 802a848:	4618      	mov	r0, r3
 802a84a:	3718      	adds	r7, #24
 802a84c:	46bd      	mov	sp, r7
 802a84e:	bd80      	pop	{r7, pc}
 802a850:	08033cd4 	.word	0x08033cd4
 802a854:	080347f8 	.word	0x080347f8
 802a858:	0803341c 	.word	0x0803341c

0802a85c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802a85c:	b580      	push	{r7, lr}
 802a85e:	b084      	sub	sp, #16
 802a860:	af00      	add	r7, sp, #0
 802a862:	6078      	str	r0, [r7, #4]
 802a864:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a866:	2300      	movs	r3, #0
 802a868:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a86a:	68fb      	ldr	r3, [r7, #12]
 802a86c:	2b00      	cmp	r3, #0
 802a86e:	d001      	beq.n	802a874 <lfs_mkdir+0x18>
        return err;
 802a870:	68fb      	ldr	r3, [r7, #12]
 802a872:	e005      	b.n	802a880 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802a874:	6839      	ldr	r1, [r7, #0]
 802a876:	6878      	ldr	r0, [r7, #4]
 802a878:	f7fc fe5c 	bl	8027534 <lfs_rawmkdir>
 802a87c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a87e:	68fb      	ldr	r3, [r7, #12]
}
 802a880:	4618      	mov	r0, r3
 802a882:	3710      	adds	r7, #16
 802a884:	46bd      	mov	sp, r7
 802a886:	bd80      	pop	{r7, pc}

0802a888 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802a888:	b580      	push	{r7, lr}
 802a88a:	b086      	sub	sp, #24
 802a88c:	af00      	add	r7, sp, #0
 802a88e:	60f8      	str	r0, [r7, #12]
 802a890:	60b9      	str	r1, [r7, #8]
 802a892:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a894:	2300      	movs	r3, #0
 802a896:	617b      	str	r3, [r7, #20]
    if (err) {
 802a898:	697b      	ldr	r3, [r7, #20]
 802a89a:	2b00      	cmp	r3, #0
 802a89c:	d001      	beq.n	802a8a2 <lfs_dir_open+0x1a>
        return err;
 802a89e:	697b      	ldr	r3, [r7, #20]
 802a8a0:	e019      	b.n	802a8d6 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802a8a2:	68fb      	ldr	r3, [r7, #12]
 802a8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a8a6:	68b9      	ldr	r1, [r7, #8]
 802a8a8:	4618      	mov	r0, r3
 802a8aa:	f7f9 fd21 	bl	80242f0 <lfs_mlist_isopen>
 802a8ae:	4603      	mov	r3, r0
 802a8b0:	f083 0301 	eor.w	r3, r3, #1
 802a8b4:	b2db      	uxtb	r3, r3
 802a8b6:	2b00      	cmp	r3, #0
 802a8b8:	d106      	bne.n	802a8c8 <lfs_dir_open+0x40>
 802a8ba:	4b09      	ldr	r3, [pc, #36]	; (802a8e0 <lfs_dir_open+0x58>)
 802a8bc:	4a09      	ldr	r2, [pc, #36]	; (802a8e4 <lfs_dir_open+0x5c>)
 802a8be:	f241 612d 	movw	r1, #5677	; 0x162d
 802a8c2:	4809      	ldr	r0, [pc, #36]	; (802a8e8 <lfs_dir_open+0x60>)
 802a8c4:	f001 fd9a 	bl	802c3fc <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802a8c8:	687a      	ldr	r2, [r7, #4]
 802a8ca:	68b9      	ldr	r1, [r7, #8]
 802a8cc:	68f8      	ldr	r0, [r7, #12]
 802a8ce:	f7fc ff71 	bl	80277b4 <lfs_dir_rawopen>
 802a8d2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a8d4:	697b      	ldr	r3, [r7, #20]
}
 802a8d6:	4618      	mov	r0, r3
 802a8d8:	3718      	adds	r7, #24
 802a8da:	46bd      	mov	sp, r7
 802a8dc:	bd80      	pop	{r7, pc}
 802a8de:	bf00      	nop
 802a8e0:	08033d0c 	.word	0x08033d0c
 802a8e4:	08034808 	.word	0x08034808
 802a8e8:	0803341c 	.word	0x0803341c

0802a8ec <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802a8ec:	b580      	push	{r7, lr}
 802a8ee:	b084      	sub	sp, #16
 802a8f0:	af00      	add	r7, sp, #0
 802a8f2:	6078      	str	r0, [r7, #4]
 802a8f4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a8f6:	2300      	movs	r3, #0
 802a8f8:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a8fa:	68fb      	ldr	r3, [r7, #12]
 802a8fc:	2b00      	cmp	r3, #0
 802a8fe:	d001      	beq.n	802a904 <lfs_dir_close+0x18>
        return err;
 802a900:	68fb      	ldr	r3, [r7, #12]
 802a902:	e005      	b.n	802a910 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802a904:	6839      	ldr	r1, [r7, #0]
 802a906:	6878      	ldr	r0, [r7, #4]
 802a908:	f7fc ffce 	bl	80278a8 <lfs_dir_rawclose>
 802a90c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a90e:	68fb      	ldr	r3, [r7, #12]
}
 802a910:	4618      	mov	r0, r3
 802a912:	3710      	adds	r7, #16
 802a914:	46bd      	mov	sp, r7
 802a916:	bd80      	pop	{r7, pc}

0802a918 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802a918:	b580      	push	{r7, lr}
 802a91a:	b086      	sub	sp, #24
 802a91c:	af00      	add	r7, sp, #0
 802a91e:	60f8      	str	r0, [r7, #12]
 802a920:	60b9      	str	r1, [r7, #8]
 802a922:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a924:	2300      	movs	r3, #0
 802a926:	617b      	str	r3, [r7, #20]
    if (err) {
 802a928:	697b      	ldr	r3, [r7, #20]
 802a92a:	2b00      	cmp	r3, #0
 802a92c:	d001      	beq.n	802a932 <lfs_dir_read+0x1a>
        return err;
 802a92e:	697b      	ldr	r3, [r7, #20]
 802a930:	e006      	b.n	802a940 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802a932:	687a      	ldr	r2, [r7, #4]
 802a934:	68b9      	ldr	r1, [r7, #8]
 802a936:	68f8      	ldr	r0, [r7, #12]
 802a938:	f7fc ffc4 	bl	80278c4 <lfs_dir_rawread>
 802a93c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a93e:	697b      	ldr	r3, [r7, #20]
}
 802a940:	4618      	mov	r0, r3
 802a942:	3718      	adds	r7, #24
 802a944:	46bd      	mov	sp, r7
 802a946:	bd80      	pop	{r7, pc}

0802a948 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802a948:	b580      	push	{r7, lr}
 802a94a:	b088      	sub	sp, #32
 802a94c:	af00      	add	r7, sp, #0
 802a94e:	60f8      	str	r0, [r7, #12]
 802a950:	60b9      	str	r1, [r7, #8]
 802a952:	607a      	str	r2, [r7, #4]
 802a954:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802a956:	f107 0310 	add.w	r3, r7, #16
 802a95a:	4618      	mov	r0, r3
 802a95c:	f7ea fb5c 	bl	8015018 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802a960:	8abb      	ldrh	r3, [r7, #20]
 802a962:	461a      	mov	r2, r3
 802a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a966:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802a968:	8afb      	ldrh	r3, [r7, #22]
 802a96a:	461a      	mov	r2, r3
 802a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a96e:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802a970:	8b3b      	ldrh	r3, [r7, #24]
 802a972:	461a      	mov	r2, r3
 802a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a976:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802a978:	8bbb      	ldrh	r3, [r7, #28]
 802a97a:	461a      	mov	r2, r3
 802a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a97e:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802a980:	887a      	ldrh	r2, [r7, #2]
 802a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a984:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 802a986:	887a      	ldrh	r2, [r7, #2]
 802a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a98a:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 802a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a98e:	68fa      	ldr	r2, [r7, #12]
 802a990:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a994:	68ba      	ldr	r2, [r7, #8]
 802a996:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a99a:	687a      	ldr	r2, [r7, #4]
 802a99c:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 802a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9a0:	4a11      	ldr	r2, [pc, #68]	; (802a9e8 <io_fs_init+0xa0>)
 802a9a2:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9a6:	4a11      	ldr	r2, [pc, #68]	; (802a9ec <io_fs_init+0xa4>)
 802a9a8:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9ac:	4a10      	ldr	r2, [pc, #64]	; (802a9f0 <io_fs_init+0xa8>)
 802a9ae:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9b2:	4a10      	ldr	r2, [pc, #64]	; (802a9f4 <io_fs_init+0xac>)
 802a9b4:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9b8:	f242 7210 	movw	r2, #10000	; 0x2710
 802a9bc:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 802a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9c0:	22ff      	movs	r2, #255	; 0xff
 802a9c2:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 802a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a9ca:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 802a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9ce:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802a9d2:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 802a9d4:	8b3b      	ldrh	r3, [r7, #24]
 802a9d6:	461a      	mov	r2, r3
 802a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9da:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 802a9dc:	2300      	movs	r3, #0
}
 802a9de:	4618      	mov	r0, r3
 802a9e0:	3720      	adds	r7, #32
 802a9e2:	46bd      	mov	sp, r7
 802a9e4:	bd80      	pop	{r7, pc}
 802a9e6:	bf00      	nop
 802a9e8:	0802a9f9 	.word	0x0802a9f9
 802a9ec:	0802aa95 	.word	0x0802aa95
 802a9f0:	0802aa4d 	.word	0x0802aa4d
 802a9f4:	0802aae9 	.word	0x0802aae9

0802a9f8 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802a9f8:	b580      	push	{r7, lr}
 802a9fa:	b084      	sub	sp, #16
 802a9fc:	af00      	add	r7, sp, #0
 802a9fe:	60f8      	str	r0, [r7, #12]
 802aa00:	60b9      	str	r1, [r7, #8]
 802aa02:	607a      	str	r2, [r7, #4]
 802aa04:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802aa06:	68fb      	ldr	r3, [r7, #12]
 802aa08:	6a1b      	ldr	r3, [r3, #32]
 802aa0a:	68ba      	ldr	r2, [r7, #8]
 802aa0c:	429a      	cmp	r2, r3
 802aa0e:	d305      	bcc.n	802aa1c <block_device_read+0x24>
 802aa10:	4b0b      	ldr	r3, [pc, #44]	; (802aa40 <block_device_read+0x48>)
 802aa12:	4a0c      	ldr	r2, [pc, #48]	; (802aa44 <block_device_read+0x4c>)
 802aa14:	2148      	movs	r1, #72	; 0x48
 802aa16:	480c      	ldr	r0, [pc, #48]	; (802aa48 <block_device_read+0x50>)
 802aa18:	f001 fcf0 	bl	802c3fc <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802aa1c:	68fb      	ldr	r3, [r7, #12]
 802aa1e:	69db      	ldr	r3, [r3, #28]
 802aa20:	68ba      	ldr	r2, [r7, #8]
 802aa22:	fb03 f202 	mul.w	r2, r3, r2
 802aa26:	687b      	ldr	r3, [r7, #4]
 802aa28:	4413      	add	r3, r2
 802aa2a:	69ba      	ldr	r2, [r7, #24]
 802aa2c:	b292      	uxth	r2, r2
 802aa2e:	4619      	mov	r1, r3
 802aa30:	6838      	ldr	r0, [r7, #0]
 802aa32:	f7ea fc99 	bl	8015368 <sFLASH_ReadBuffer>
	return 0;
 802aa36:	2300      	movs	r3, #0
}
 802aa38:	4618      	mov	r0, r3
 802aa3a:	3710      	adds	r7, #16
 802aa3c:	46bd      	mov	sp, r7
 802aa3e:	bd80      	pop	{r7, pc}
 802aa40:	08033d44 	.word	0x08033d44
 802aa44:	08034818 	.word	0x08034818
 802aa48:	08033d5c 	.word	0x08033d5c

0802aa4c <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802aa4c:	b580      	push	{r7, lr}
 802aa4e:	b082      	sub	sp, #8
 802aa50:	af00      	add	r7, sp, #0
 802aa52:	6078      	str	r0, [r7, #4]
 802aa54:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802aa56:	687b      	ldr	r3, [r7, #4]
 802aa58:	6a1b      	ldr	r3, [r3, #32]
 802aa5a:	683a      	ldr	r2, [r7, #0]
 802aa5c:	429a      	cmp	r2, r3
 802aa5e:	d305      	bcc.n	802aa6c <block_device_erase+0x20>
 802aa60:	4b09      	ldr	r3, [pc, #36]	; (802aa88 <block_device_erase+0x3c>)
 802aa62:	4a0a      	ldr	r2, [pc, #40]	; (802aa8c <block_device_erase+0x40>)
 802aa64:	2150      	movs	r1, #80	; 0x50
 802aa66:	480a      	ldr	r0, [pc, #40]	; (802aa90 <block_device_erase+0x44>)
 802aa68:	f001 fcc8 	bl	802c3fc <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802aa6c:	687b      	ldr	r3, [r7, #4]
 802aa6e:	69db      	ldr	r3, [r3, #28]
 802aa70:	683a      	ldr	r2, [r7, #0]
 802aa72:	fb02 f303 	mul.w	r3, r2, r3
 802aa76:	4618      	mov	r0, r3
 802aa78:	f7ea fb74 	bl	8015164 <sFLASH_EraseSector>
	return 0;
 802aa7c:	2300      	movs	r3, #0
}
 802aa7e:	4618      	mov	r0, r3
 802aa80:	3708      	adds	r7, #8
 802aa82:	46bd      	mov	sp, r7
 802aa84:	bd80      	pop	{r7, pc}
 802aa86:	bf00      	nop
 802aa88:	08033d44 	.word	0x08033d44
 802aa8c:	0803482c 	.word	0x0803482c
 802aa90:	08033d5c 	.word	0x08033d5c

0802aa94 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802aa94:	b580      	push	{r7, lr}
 802aa96:	b084      	sub	sp, #16
 802aa98:	af00      	add	r7, sp, #0
 802aa9a:	60f8      	str	r0, [r7, #12]
 802aa9c:	60b9      	str	r1, [r7, #8]
 802aa9e:	607a      	str	r2, [r7, #4]
 802aaa0:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802aaa2:	68fb      	ldr	r3, [r7, #12]
 802aaa4:	6a1b      	ldr	r3, [r3, #32]
 802aaa6:	68ba      	ldr	r2, [r7, #8]
 802aaa8:	429a      	cmp	r2, r3
 802aaaa:	d305      	bcc.n	802aab8 <block_device_prog+0x24>
 802aaac:	4b0b      	ldr	r3, [pc, #44]	; (802aadc <block_device_prog+0x48>)
 802aaae:	4a0c      	ldr	r2, [pc, #48]	; (802aae0 <block_device_prog+0x4c>)
 802aab0:	2158      	movs	r1, #88	; 0x58
 802aab2:	480c      	ldr	r0, [pc, #48]	; (802aae4 <block_device_prog+0x50>)
 802aab4:	f001 fca2 	bl	802c3fc <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802aab8:	68fb      	ldr	r3, [r7, #12]
 802aaba:	69db      	ldr	r3, [r3, #28]
 802aabc:	68ba      	ldr	r2, [r7, #8]
 802aabe:	fb03 f202 	mul.w	r2, r3, r2
 802aac2:	687b      	ldr	r3, [r7, #4]
 802aac4:	4413      	add	r3, r2
 802aac6:	69ba      	ldr	r2, [r7, #24]
 802aac8:	b292      	uxth	r2, r2
 802aaca:	4619      	mov	r1, r3
 802aacc:	6838      	ldr	r0, [r7, #0]
 802aace:	f7ea fba2 	bl	8015216 <sFLASH_WriteBuffer>
	return 0;
 802aad2:	2300      	movs	r3, #0
}
 802aad4:	4618      	mov	r0, r3
 802aad6:	3710      	adds	r7, #16
 802aad8:	46bd      	mov	sp, r7
 802aada:	bd80      	pop	{r7, pc}
 802aadc:	08033d44 	.word	0x08033d44
 802aae0:	08034840 	.word	0x08034840
 802aae4:	08033d5c 	.word	0x08033d5c

0802aae8 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802aae8:	b480      	push	{r7}
 802aaea:	b083      	sub	sp, #12
 802aaec:	af00      	add	r7, sp, #0
 802aaee:	6078      	str	r0, [r7, #4]
	return 0;
 802aaf0:	2300      	movs	r3, #0
}
 802aaf2:	4618      	mov	r0, r3
 802aaf4:	370c      	adds	r7, #12
 802aaf6:	46bd      	mov	sp, r7
 802aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aafc:	4770      	bx	lr
	...

0802ab00 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802ab00:	b480      	push	{r7}
 802ab02:	b087      	sub	sp, #28
 802ab04:	af00      	add	r7, sp, #0
 802ab06:	60f8      	str	r0, [r7, #12]
 802ab08:	60b9      	str	r1, [r7, #8]
 802ab0a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802ab0c:	68bb      	ldr	r3, [r7, #8]
 802ab0e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802ab10:	2300      	movs	r3, #0
 802ab12:	617b      	str	r3, [r7, #20]
 802ab14:	e024      	b.n	802ab60 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802ab16:	68fb      	ldr	r3, [r7, #12]
 802ab18:	091a      	lsrs	r2, r3, #4
 802ab1a:	6939      	ldr	r1, [r7, #16]
 802ab1c:	697b      	ldr	r3, [r7, #20]
 802ab1e:	440b      	add	r3, r1
 802ab20:	781b      	ldrb	r3, [r3, #0]
 802ab22:	4619      	mov	r1, r3
 802ab24:	68fb      	ldr	r3, [r7, #12]
 802ab26:	404b      	eors	r3, r1
 802ab28:	f003 030f 	and.w	r3, r3, #15
 802ab2c:	4912      	ldr	r1, [pc, #72]	; (802ab78 <lfs_crc+0x78>)
 802ab2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ab32:	4053      	eors	r3, r2
 802ab34:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802ab36:	68fb      	ldr	r3, [r7, #12]
 802ab38:	091a      	lsrs	r2, r3, #4
 802ab3a:	6939      	ldr	r1, [r7, #16]
 802ab3c:	697b      	ldr	r3, [r7, #20]
 802ab3e:	440b      	add	r3, r1
 802ab40:	781b      	ldrb	r3, [r3, #0]
 802ab42:	091b      	lsrs	r3, r3, #4
 802ab44:	b2db      	uxtb	r3, r3
 802ab46:	4619      	mov	r1, r3
 802ab48:	68fb      	ldr	r3, [r7, #12]
 802ab4a:	404b      	eors	r3, r1
 802ab4c:	f003 030f 	and.w	r3, r3, #15
 802ab50:	4909      	ldr	r1, [pc, #36]	; (802ab78 <lfs_crc+0x78>)
 802ab52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ab56:	4053      	eors	r3, r2
 802ab58:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802ab5a:	697b      	ldr	r3, [r7, #20]
 802ab5c:	3301      	adds	r3, #1
 802ab5e:	617b      	str	r3, [r7, #20]
 802ab60:	697a      	ldr	r2, [r7, #20]
 802ab62:	687b      	ldr	r3, [r7, #4]
 802ab64:	429a      	cmp	r2, r3
 802ab66:	d3d6      	bcc.n	802ab16 <lfs_crc+0x16>
    }

    return crc;
 802ab68:	68fb      	ldr	r3, [r7, #12]
}
 802ab6a:	4618      	mov	r0, r3
 802ab6c:	371c      	adds	r7, #28
 802ab6e:	46bd      	mov	sp, r7
 802ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab74:	4770      	bx	lr
 802ab76:	bf00      	nop
 802ab78:	08034854 	.word	0x08034854

0802ab7c <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802ab7c:	b480      	push	{r7}
 802ab7e:	b083      	sub	sp, #12
 802ab80:	af00      	add	r7, sp, #0
 802ab82:	6078      	str	r0, [r7, #4]
 802ab84:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802ab86:	687b      	ldr	r3, [r7, #4]
 802ab88:	2b00      	cmp	r3, #0
 802ab8a:	d002      	beq.n	802ab92 <spi_fs_init_mutex+0x16>
 802ab8c:	4a07      	ldr	r2, [pc, #28]	; (802abac <spi_fs_init_mutex+0x30>)
 802ab8e:	687b      	ldr	r3, [r7, #4]
 802ab90:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802ab92:	683b      	ldr	r3, [r7, #0]
 802ab94:	2b00      	cmp	r3, #0
 802ab96:	d002      	beq.n	802ab9e <spi_fs_init_mutex+0x22>
 802ab98:	4a05      	ldr	r2, [pc, #20]	; (802abb0 <spi_fs_init_mutex+0x34>)
 802ab9a:	683b      	ldr	r3, [r7, #0]
 802ab9c:	6013      	str	r3, [r2, #0]

};
 802ab9e:	bf00      	nop
 802aba0:	370c      	adds	r7, #12
 802aba2:	46bd      	mov	sp, r7
 802aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aba8:	4770      	bx	lr
 802abaa:	bf00      	nop
 802abac:	2000d9a0 	.word	0x2000d9a0
 802abb0:	2000d9a4 	.word	0x2000d9a4

0802abb4 <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802abb4:	b590      	push	{r4, r7, lr}
 802abb6:	b08b      	sub	sp, #44	; 0x2c
 802abb8:	af02      	add	r7, sp, #8
 802abba:	61f8      	str	r0, [r7, #28]
 802abbc:	61b9      	str	r1, [r7, #24]
 802abbe:	617a      	str	r2, [r7, #20]
 802abc0:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802abc2:	4c14      	ldr	r4, [pc, #80]	; (802ac14 <spi_fs_init+0x60>)
 802abc4:	463b      	mov	r3, r7
 802abc6:	4618      	mov	r0, r3
 802abc8:	f7ea fa26 	bl	8015018 <sFLASH_GetInfo>
 802abcc:	463b      	mov	r3, r7
 802abce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802abd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802abd4:	4b0f      	ldr	r3, [pc, #60]	; (802ac14 <spi_fs_init+0x60>)
 802abd6:	681b      	ldr	r3, [r3, #0]
 802abd8:	2b00      	cmp	r3, #0
 802abda:	d102      	bne.n	802abe2 <spi_fs_init+0x2e>
 802abdc:	f04f 33ff 	mov.w	r3, #4294967295
 802abe0:	e013      	b.n	802ac0a <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802abe2:	8a7b      	ldrh	r3, [r7, #18]
 802abe4:	4a0c      	ldr	r2, [pc, #48]	; (802ac18 <spi_fs_init+0x64>)
 802abe6:	9200      	str	r2, [sp, #0]
 802abe8:	697a      	ldr	r2, [r7, #20]
 802abea:	69b9      	ldr	r1, [r7, #24]
 802abec:	69f8      	ldr	r0, [r7, #28]
 802abee:	f7ff feab 	bl	802a948 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802abf2:	220c      	movs	r2, #12
 802abf4:	2100      	movs	r1, #0
 802abf6:	4809      	ldr	r0, [pc, #36]	; (802ac1c <spi_fs_init+0x68>)
 802abf8:	f002 fdd0 	bl	802d79c <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802abfc:	4b07      	ldr	r3, [pc, #28]	; (802ac1c <spi_fs_init+0x68>)
 802abfe:	4a08      	ldr	r2, [pc, #32]	; (802ac20 <spi_fs_init+0x6c>)
 802ac00:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802ac02:	4b06      	ldr	r3, [pc, #24]	; (802ac1c <spi_fs_init+0x68>)
 802ac04:	2200      	movs	r2, #0
 802ac06:	609a      	str	r2, [r3, #8]

	return 0;
 802ac08:	2300      	movs	r3, #0
}
 802ac0a:	4618      	mov	r0, r3
 802ac0c:	3724      	adds	r7, #36	; 0x24
 802ac0e:	46bd      	mov	sp, r7
 802ac10:	bd90      	pop	{r4, r7, pc}
 802ac12:	bf00      	nop
 802ac14:	2000d904 	.word	0x2000d904
 802ac18:	2000d8b8 	.word	0x2000d8b8
 802ac1c:	2000d914 	.word	0x2000d914
 802ac20:	2000d4ac 	.word	0x2000d4ac

0802ac24 <spi_fs_mount>:

int spi_fs_mount(void){
 802ac24:	b580      	push	{r7, lr}
 802ac26:	b082      	sub	sp, #8
 802ac28:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ac2a:	4b0d      	ldr	r3, [pc, #52]	; (802ac60 <spi_fs_mount+0x3c>)
 802ac2c:	681b      	ldr	r3, [r3, #0]
 802ac2e:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802ac30:	490c      	ldr	r1, [pc, #48]	; (802ac64 <spi_fs_mount+0x40>)
 802ac32:	480d      	ldr	r0, [pc, #52]	; (802ac68 <spi_fs_mount+0x44>)
 802ac34:	f7ff fcc4 	bl	802a5c0 <lfs_mount>
 802ac38:	6078      	str	r0, [r7, #4]
	if (err) {
 802ac3a:	687b      	ldr	r3, [r7, #4]
 802ac3c:	2b00      	cmp	r3, #0
 802ac3e:	d003      	beq.n	802ac48 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802ac40:	4b0a      	ldr	r3, [pc, #40]	; (802ac6c <spi_fs_mount+0x48>)
 802ac42:	2200      	movs	r2, #0
 802ac44:	701a      	strb	r2, [r3, #0]
 802ac46:	e002      	b.n	802ac4e <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802ac48:	4b08      	ldr	r3, [pc, #32]	; (802ac6c <spi_fs_mount+0x48>)
 802ac4a:	2201      	movs	r2, #1
 802ac4c:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ac4e:	4b08      	ldr	r3, [pc, #32]	; (802ac70 <spi_fs_mount+0x4c>)
 802ac50:	681b      	ldr	r3, [r3, #0]
 802ac52:	4798      	blx	r3
#endif

	return err;
 802ac54:	687b      	ldr	r3, [r7, #4]
}
 802ac56:	4618      	mov	r0, r3
 802ac58:	3708      	adds	r7, #8
 802ac5a:	46bd      	mov	sp, r7
 802ac5c:	bd80      	pop	{r7, pc}
 802ac5e:	bf00      	nop
 802ac60:	2000d9a0 	.word	0x2000d9a0
 802ac64:	2000d8b8 	.word	0x2000d8b8
 802ac68:	2000d6b0 	.word	0x2000d6b0
 802ac6c:	2000d6ac 	.word	0x2000d6ac
 802ac70:	2000d9a4 	.word	0x2000d9a4

0802ac74 <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802ac74:	b580      	push	{r7, lr}
 802ac76:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802ac78:	4902      	ldr	r1, [pc, #8]	; (802ac84 <spi_fs_format+0x10>)
 802ac7a:	4803      	ldr	r0, [pc, #12]	; (802ac88 <spi_fs_format+0x14>)
 802ac7c:	f7ff fc8a 	bl	802a594 <lfs_format>
}
 802ac80:	bf00      	nop
 802ac82:	bd80      	pop	{r7, pc}
 802ac84:	2000d8b8 	.word	0x2000d8b8
 802ac88:	2000d6b0 	.word	0x2000d6b0

0802ac8c <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802ac8c:	b580      	push	{r7, lr}
 802ac8e:	b088      	sub	sp, #32
 802ac90:	af02      	add	r7, sp, #8
 802ac92:	60f8      	str	r0, [r7, #12]
 802ac94:	60b9      	str	r1, [r7, #8]
 802ac96:	607a      	str	r2, [r7, #4]
 802ac98:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ac9a:	4b19      	ldr	r3, [pc, #100]	; (802ad00 <spi_fs_read_file_offset+0x74>)
 802ac9c:	681b      	ldr	r3, [r3, #0]
 802ac9e:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802aca0:	4b18      	ldr	r3, [pc, #96]	; (802ad04 <spi_fs_read_file_offset+0x78>)
 802aca2:	9300      	str	r3, [sp, #0]
 802aca4:	f240 1301 	movw	r3, #257	; 0x101
 802aca8:	68fa      	ldr	r2, [r7, #12]
 802acaa:	4917      	ldr	r1, [pc, #92]	; (802ad08 <spi_fs_read_file_offset+0x7c>)
 802acac:	4817      	ldr	r0, [pc, #92]	; (802ad0c <spi_fs_read_file_offset+0x80>)
 802acae:	f7ff fce3 	bl	802a678 <lfs_file_opencfg>
 802acb2:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802acb4:	697b      	ldr	r3, [r7, #20]
 802acb6:	2b00      	cmp	r3, #0
 802acb8:	db13      	blt.n	802ace2 <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802acba:	687a      	ldr	r2, [r7, #4]
 802acbc:	2300      	movs	r3, #0
 802acbe:	4912      	ldr	r1, [pc, #72]	; (802ad08 <spi_fs_read_file_offset+0x7c>)
 802acc0:	4812      	ldr	r0, [pc, #72]	; (802ad0c <spi_fs_read_file_offset+0x80>)
 802acc2:	f7ff fd9b 	bl	802a7fc <lfs_file_seek>
 802acc6:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802acc8:	697b      	ldr	r3, [r7, #20]
 802acca:	2b00      	cmp	r3, #0
 802accc:	db0b      	blt.n	802ace6 <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802acce:	683b      	ldr	r3, [r7, #0]
 802acd0:	68ba      	ldr	r2, [r7, #8]
 802acd2:	490d      	ldr	r1, [pc, #52]	; (802ad08 <spi_fs_read_file_offset+0x7c>)
 802acd4:	480d      	ldr	r0, [pc, #52]	; (802ad0c <spi_fs_read_file_offset+0x80>)
 802acd6:	f7ff fd31 	bl	802a73c <lfs_file_read>
 802acda:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802acdc:	697b      	ldr	r3, [r7, #20]
 802acde:	2b00      	cmp	r3, #0

	func_end:
 802ace0:	e002      	b.n	802ace8 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ace2:	bf00      	nop
 802ace4:	e000      	b.n	802ace8 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ace6:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802ace8:	4907      	ldr	r1, [pc, #28]	; (802ad08 <spi_fs_read_file_offset+0x7c>)
 802acea:	4808      	ldr	r0, [pc, #32]	; (802ad0c <spi_fs_read_file_offset+0x80>)
 802acec:	f7ff fcfa 	bl	802a6e4 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802acf0:	4b07      	ldr	r3, [pc, #28]	; (802ad10 <spi_fs_read_file_offset+0x84>)
 802acf2:	681b      	ldr	r3, [r3, #0]
 802acf4:	4798      	blx	r3
#endif
	return err;
 802acf6:	697b      	ldr	r3, [r7, #20]

}
 802acf8:	4618      	mov	r0, r3
 802acfa:	3718      	adds	r7, #24
 802acfc:	46bd      	mov	sp, r7
 802acfe:	bd80      	pop	{r7, pc}
 802ad00:	2000d9a0 	.word	0x2000d9a0
 802ad04:	2000d914 	.word	0x2000d914
 802ad08:	2000d728 	.word	0x2000d728
 802ad0c:	2000d6b0 	.word	0x2000d6b0
 802ad10:	2000d9a4 	.word	0x2000d9a4

0802ad14 <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802ad14:	b580      	push	{r7, lr}
 802ad16:	b088      	sub	sp, #32
 802ad18:	af02      	add	r7, sp, #8
 802ad1a:	60f8      	str	r0, [r7, #12]
 802ad1c:	60b9      	str	r1, [r7, #8]
 802ad1e:	607a      	str	r2, [r7, #4]
	int err = 0;
 802ad20:	2300      	movs	r3, #0
 802ad22:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ad24:	4b12      	ldr	r3, [pc, #72]	; (802ad70 <spi_fs_over_write_file+0x5c>)
 802ad26:	681b      	ldr	r3, [r3, #0]
 802ad28:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802ad2a:	4b12      	ldr	r3, [pc, #72]	; (802ad74 <spi_fs_over_write_file+0x60>)
 802ad2c:	9300      	str	r3, [sp, #0]
 802ad2e:	f240 5303 	movw	r3, #1283	; 0x503
 802ad32:	68fa      	ldr	r2, [r7, #12]
 802ad34:	4910      	ldr	r1, [pc, #64]	; (802ad78 <spi_fs_over_write_file+0x64>)
 802ad36:	4811      	ldr	r0, [pc, #68]	; (802ad7c <spi_fs_over_write_file+0x68>)
 802ad38:	f7ff fc9e 	bl	802a678 <lfs_file_opencfg>
 802ad3c:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ad3e:	697b      	ldr	r3, [r7, #20]
 802ad40:	2b00      	cmp	r3, #0
 802ad42:	db0b      	blt.n	802ad5c <spi_fs_over_write_file+0x48>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802ad44:	687b      	ldr	r3, [r7, #4]
 802ad46:	68ba      	ldr	r2, [r7, #8]
 802ad48:	490b      	ldr	r1, [pc, #44]	; (802ad78 <spi_fs_over_write_file+0x64>)
 802ad4a:	480c      	ldr	r0, [pc, #48]	; (802ad7c <spi_fs_over_write_file+0x68>)
 802ad4c:	f7ff fd26 	bl	802a79c <lfs_file_write>
 802ad50:	6178      	str	r0, [r7, #20]

	lfs_file_close(&lfs, &file);
 802ad52:	4909      	ldr	r1, [pc, #36]	; (802ad78 <spi_fs_over_write_file+0x64>)
 802ad54:	4809      	ldr	r0, [pc, #36]	; (802ad7c <spi_fs_over_write_file+0x68>)
 802ad56:	f7ff fcc5 	bl	802a6e4 <lfs_file_close>
 802ad5a:	e000      	b.n	802ad5e <spi_fs_over_write_file+0x4a>
	if (err < 0) goto func_end;
 802ad5c:	bf00      	nop
	func_end:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ad5e:	4b08      	ldr	r3, [pc, #32]	; (802ad80 <spi_fs_over_write_file+0x6c>)
 802ad60:	681b      	ldr	r3, [r3, #0]
 802ad62:	4798      	blx	r3
#endif
	return err;
 802ad64:	697b      	ldr	r3, [r7, #20]
}
 802ad66:	4618      	mov	r0, r3
 802ad68:	3718      	adds	r7, #24
 802ad6a:	46bd      	mov	sp, r7
 802ad6c:	bd80      	pop	{r7, pc}
 802ad6e:	bf00      	nop
 802ad70:	2000d9a0 	.word	0x2000d9a0
 802ad74:	2000d914 	.word	0x2000d914
 802ad78:	2000d728 	.word	0x2000d728
 802ad7c:	2000d6b0 	.word	0x2000d6b0
 802ad80:	2000d9a4 	.word	0x2000d9a4

0802ad84 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802ad84:	b580      	push	{r7, lr}
 802ad86:	b084      	sub	sp, #16
 802ad88:	af00      	add	r7, sp, #0
 802ad8a:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ad8c:	4b0b      	ldr	r3, [pc, #44]	; (802adbc <spi_fs_file_size+0x38>)
 802ad8e:	681b      	ldr	r3, [r3, #0]
 802ad90:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802ad92:	4a0b      	ldr	r2, [pc, #44]	; (802adc0 <spi_fs_file_size+0x3c>)
 802ad94:	6879      	ldr	r1, [r7, #4]
 802ad96:	480b      	ldr	r0, [pc, #44]	; (802adc4 <spi_fs_file_size+0x40>)
 802ad98:	f7ff fc56 	bl	802a648 <lfs_stat>
 802ad9c:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802ad9e:	68fb      	ldr	r3, [r7, #12]
 802ada0:	2b00      	cmp	r3, #0
 802ada2:	d102      	bne.n	802adaa <spi_fs_file_size+0x26>
		err = file_info.size;
 802ada4:	4b06      	ldr	r3, [pc, #24]	; (802adc0 <spi_fs_file_size+0x3c>)
 802ada6:	685b      	ldr	r3, [r3, #4]
 802ada8:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802adaa:	4b07      	ldr	r3, [pc, #28]	; (802adc8 <spi_fs_file_size+0x44>)
 802adac:	681b      	ldr	r3, [r3, #0]
 802adae:	4798      	blx	r3
#endif
	return err;
 802adb0:	68fb      	ldr	r3, [r7, #12]
}
 802adb2:	4618      	mov	r0, r3
 802adb4:	3710      	adds	r7, #16
 802adb6:	46bd      	mov	sp, r7
 802adb8:	bd80      	pop	{r7, pc}
 802adba:	bf00      	nop
 802adbc:	2000d9a0 	.word	0x2000d9a0
 802adc0:	2000d7b0 	.word	0x2000d7b0
 802adc4:	2000d6b0 	.word	0x2000d6b0
 802adc8:	2000d9a4 	.word	0x2000d9a4

0802adcc <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802adcc:	b580      	push	{r7, lr}
 802adce:	b088      	sub	sp, #32
 802add0:	af02      	add	r7, sp, #8
 802add2:	60f8      	str	r0, [r7, #12]
 802add4:	60b9      	str	r1, [r7, #8]
 802add6:	607a      	str	r2, [r7, #4]
	int err = 0;
 802add8:	2300      	movs	r3, #0
 802adda:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802addc:	4b13      	ldr	r3, [pc, #76]	; (802ae2c <spi_fs_write_file_to_end+0x60>)
 802adde:	681b      	ldr	r3, [r3, #0]
 802ade0:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802ade2:	4b13      	ldr	r3, [pc, #76]	; (802ae30 <spi_fs_write_file_to_end+0x64>)
 802ade4:	9300      	str	r3, [sp, #0]
 802ade6:	f640 1303 	movw	r3, #2307	; 0x903
 802adea:	68fa      	ldr	r2, [r7, #12]
 802adec:	4911      	ldr	r1, [pc, #68]	; (802ae34 <spi_fs_write_file_to_end+0x68>)
 802adee:	4812      	ldr	r0, [pc, #72]	; (802ae38 <spi_fs_write_file_to_end+0x6c>)
 802adf0:	f7ff fc42 	bl	802a678 <lfs_file_opencfg>
 802adf4:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802adf6:	697b      	ldr	r3, [r7, #20]
 802adf8:	2b00      	cmp	r3, #0
 802adfa:	db09      	blt.n	802ae10 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802adfc:	687b      	ldr	r3, [r7, #4]
 802adfe:	68ba      	ldr	r2, [r7, #8]
 802ae00:	490c      	ldr	r1, [pc, #48]	; (802ae34 <spi_fs_write_file_to_end+0x68>)
 802ae02:	480d      	ldr	r0, [pc, #52]	; (802ae38 <spi_fs_write_file_to_end+0x6c>)
 802ae04:	f7ff fcca 	bl	802a79c <lfs_file_write>
 802ae08:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ae0a:	697b      	ldr	r3, [r7, #20]
 802ae0c:	2b00      	cmp	r3, #0

	func_end:
 802ae0e:	e000      	b.n	802ae12 <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802ae10:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802ae12:	4908      	ldr	r1, [pc, #32]	; (802ae34 <spi_fs_write_file_to_end+0x68>)
 802ae14:	4808      	ldr	r0, [pc, #32]	; (802ae38 <spi_fs_write_file_to_end+0x6c>)
 802ae16:	f7ff fc65 	bl	802a6e4 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ae1a:	4b08      	ldr	r3, [pc, #32]	; (802ae3c <spi_fs_write_file_to_end+0x70>)
 802ae1c:	681b      	ldr	r3, [r3, #0]
 802ae1e:	4798      	blx	r3
#endif
	return err;
 802ae20:	697b      	ldr	r3, [r7, #20]
}
 802ae22:	4618      	mov	r0, r3
 802ae24:	3718      	adds	r7, #24
 802ae26:	46bd      	mov	sp, r7
 802ae28:	bd80      	pop	{r7, pc}
 802ae2a:	bf00      	nop
 802ae2c:	2000d9a0 	.word	0x2000d9a0
 802ae30:	2000d914 	.word	0x2000d914
 802ae34:	2000d728 	.word	0x2000d728
 802ae38:	2000d6b0 	.word	0x2000d6b0
 802ae3c:	2000d9a4 	.word	0x2000d9a4

0802ae40 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802ae40:	b580      	push	{r7, lr}
 802ae42:	b084      	sub	sp, #16
 802ae44:	af00      	add	r7, sp, #0
 802ae46:	6078      	str	r0, [r7, #4]
 802ae48:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802ae4a:	2280      	movs	r2, #128	; 0x80
 802ae4c:	2100      	movs	r1, #0
 802ae4e:	480a      	ldr	r0, [pc, #40]	; (802ae78 <spi_fs_serch_file_in_dir+0x38>)
 802ae50:	f002 fca4 	bl	802d79c <memset>
	strcpy((char *)temp_buf, dir_path);
 802ae54:	6879      	ldr	r1, [r7, #4]
 802ae56:	4808      	ldr	r0, [pc, #32]	; (802ae78 <spi_fs_serch_file_in_dir+0x38>)
 802ae58:	f002 fe6d 	bl	802db36 <strcpy>
	strcat((char *)temp_buf, filename);
 802ae5c:	6839      	ldr	r1, [r7, #0]
 802ae5e:	4806      	ldr	r0, [pc, #24]	; (802ae78 <spi_fs_serch_file_in_dir+0x38>)
 802ae60:	f002 fca4 	bl	802d7ac <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802ae64:	4804      	ldr	r0, [pc, #16]	; (802ae78 <spi_fs_serch_file_in_dir+0x38>)
 802ae66:	f7ff ff8d 	bl	802ad84 <spi_fs_file_size>
 802ae6a:	60f8      	str	r0, [r7, #12]
	return err;
 802ae6c:	68fb      	ldr	r3, [r7, #12]

}
 802ae6e:	4618      	mov	r0, r3
 802ae70:	3710      	adds	r7, #16
 802ae72:	46bd      	mov	sp, r7
 802ae74:	bd80      	pop	{r7, pc}
 802ae76:	bf00      	nop
 802ae78:	2000d920 	.word	0x2000d920

0802ae7c <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802ae7c:	b580      	push	{r7, lr}
 802ae7e:	b084      	sub	sp, #16
 802ae80:	af00      	add	r7, sp, #0
 802ae82:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ae84:	4b07      	ldr	r3, [pc, #28]	; (802aea4 <spi_fs_mkdir+0x28>)
 802ae86:	681b      	ldr	r3, [r3, #0]
 802ae88:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802ae8a:	6879      	ldr	r1, [r7, #4]
 802ae8c:	4806      	ldr	r0, [pc, #24]	; (802aea8 <spi_fs_mkdir+0x2c>)
 802ae8e:	f7ff fce5 	bl	802a85c <lfs_mkdir>
 802ae92:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ae94:	4b05      	ldr	r3, [pc, #20]	; (802aeac <spi_fs_mkdir+0x30>)
 802ae96:	681b      	ldr	r3, [r3, #0]
 802ae98:	4798      	blx	r3
#endif

	return err;
 802ae9a:	68fb      	ldr	r3, [r7, #12]
}
 802ae9c:	4618      	mov	r0, r3
 802ae9e:	3710      	adds	r7, #16
 802aea0:	46bd      	mov	sp, r7
 802aea2:	bd80      	pop	{r7, pc}
 802aea4:	2000d9a0 	.word	0x2000d9a0
 802aea8:	2000d6b0 	.word	0x2000d6b0
 802aeac:	2000d9a4 	.word	0x2000d9a4

0802aeb0 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802aeb0:	b580      	push	{r7, lr}
 802aeb2:	b084      	sub	sp, #16
 802aeb4:	af00      	add	r7, sp, #0
 802aeb6:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802aeb8:	4b07      	ldr	r3, [pc, #28]	; (802aed8 <spi_fs_remove+0x28>)
 802aeba:	681b      	ldr	r3, [r3, #0]
 802aebc:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802aebe:	6879      	ldr	r1, [r7, #4]
 802aec0:	4806      	ldr	r0, [pc, #24]	; (802aedc <spi_fs_remove+0x2c>)
 802aec2:	f7ff fb93 	bl	802a5ec <lfs_remove>
 802aec6:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802aec8:	4b05      	ldr	r3, [pc, #20]	; (802aee0 <spi_fs_remove+0x30>)
 802aeca:	681b      	ldr	r3, [r3, #0]
 802aecc:	4798      	blx	r3
#endif
	return err;
 802aece:	68fb      	ldr	r3, [r7, #12]
}
 802aed0:	4618      	mov	r0, r3
 802aed2:	3710      	adds	r7, #16
 802aed4:	46bd      	mov	sp, r7
 802aed6:	bd80      	pop	{r7, pc}
 802aed8:	2000d9a0 	.word	0x2000d9a0
 802aedc:	2000d6b0 	.word	0x2000d6b0
 802aee0:	2000d9a4 	.word	0x2000d9a4

0802aee4 <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path, uint8_t deep) {
 802aee4:	b580      	push	{r7, lr}
 802aee6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802aeea:	af02      	add	r7, sp, #8
 802aeec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802aef0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802aef4:	6018      	str	r0, [r3, #0]
 802aef6:	460a      	mov	r2, r1
 802aef8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802aefc:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802af00:	701a      	strb	r2, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802af02:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af06:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802af0a:	681a      	ldr	r2, [r3, #0]
 802af0c:	4945      	ldr	r1, [pc, #276]	; (802b024 <remove_recursively_files_and_directories+0x140>)
 802af0e:	4846      	ldr	r0, [pc, #280]	; (802b028 <remove_recursively_files_and_directories+0x144>)
 802af10:	f7ff fcba 	bl	802a888 <lfs_dir_open>
 802af14:	4603      	mov	r3, r0
 802af16:	2b00      	cmp	r3, #0
 802af18:	d17f      	bne.n	802b01a <remove_recursively_files_and_directories+0x136>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802af1a:	e061      	b.n	802afe0 <remove_recursively_files_and_directories+0xfc>
            if (info.type == LFS_TYPE_DIR) {
 802af1c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802af24:	781b      	ldrb	r3, [r3, #0]
 802af26:	2b02      	cmp	r3, #2
 802af28:	d13d      	bne.n	802afa6 <remove_recursively_files_and_directories+0xc2>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802af2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802af2e:	3308      	adds	r3, #8
 802af30:	493e      	ldr	r1, [pc, #248]	; (802b02c <remove_recursively_files_and_directories+0x148>)
 802af32:	4618      	mov	r0, r3
 802af34:	f7e5 f954 	bl	80101e0 <strcmp>
 802af38:	4603      	mov	r3, r0
 802af3a:	2b00      	cmp	r3, #0
 802af3c:	d050      	beq.n	802afe0 <remove_recursively_files_and_directories+0xfc>
 802af3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802af42:	3308      	adds	r3, #8
 802af44:	493a      	ldr	r1, [pc, #232]	; (802b030 <remove_recursively_files_and_directories+0x14c>)
 802af46:	4618      	mov	r0, r3
 802af48:	f7e5 f94a 	bl	80101e0 <strcmp>
 802af4c:	4603      	mov	r3, r0
 802af4e:	2b00      	cmp	r3, #0
 802af50:	d100      	bne.n	802af54 <remove_recursively_files_and_directories+0x70>
 802af52:	e045      	b.n	802afe0 <remove_recursively_files_and_directories+0xfc>
                printf("Directory: %s\n", info.name);
 802af54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802af58:	3308      	adds	r3, #8
 802af5a:	4619      	mov	r1, r3
 802af5c:	4835      	ldr	r0, [pc, #212]	; (802b034 <remove_recursively_files_and_directories+0x150>)
 802af5e:	f002 fa87 	bl	802d470 <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802af62:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af66:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802af6a:	f107 0008 	add.w	r0, r7, #8
 802af6e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802af72:	3208      	adds	r2, #8
 802af74:	9200      	str	r2, [sp, #0]
 802af76:	681b      	ldr	r3, [r3, #0]
 802af78:	4a2f      	ldr	r2, [pc, #188]	; (802b038 <remove_recursively_files_and_directories+0x154>)
 802af7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802af7e:	f002 fa89 	bl	802d494 <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802af82:	4928      	ldr	r1, [pc, #160]	; (802b024 <remove_recursively_files_and_directories+0x140>)
 802af84:	4828      	ldr	r0, [pc, #160]	; (802b028 <remove_recursively_files_and_directories+0x144>)
 802af86:	f7ff fcb1 	bl	802a8ec <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path, deep + 1);  // Recursive call for subdirectories
 802af8a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af8e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802af92:	781b      	ldrb	r3, [r3, #0]
 802af94:	3301      	adds	r3, #1
 802af96:	b2da      	uxtb	r2, r3
 802af98:	f107 0308 	add.w	r3, r7, #8
 802af9c:	4611      	mov	r1, r2
 802af9e:	4618      	mov	r0, r3
 802afa0:	f7ff ffa0 	bl	802aee4 <remove_recursively_files_and_directories>
 802afa4:	e01c      	b.n	802afe0 <remove_recursively_files_and_directories+0xfc>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802afa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802afaa:	3308      	adds	r3, #8
 802afac:	4619      	mov	r1, r3
 802afae:	4823      	ldr	r0, [pc, #140]	; (802b03c <remove_recursively_files_and_directories+0x158>)
 802afb0:	f002 fa5e 	bl	802d470 <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802afb4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802afb8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802afbc:	f107 0008 	add.w	r0, r7, #8
 802afc0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802afc4:	3208      	adds	r2, #8
 802afc6:	9200      	str	r2, [sp, #0]
 802afc8:	681b      	ldr	r3, [r3, #0]
 802afca:	4a1b      	ldr	r2, [pc, #108]	; (802b038 <remove_recursively_files_and_directories+0x154>)
 802afcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 802afd0:	f002 fa60 	bl	802d494 <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802afd4:	f107 0308 	add.w	r3, r7, #8
 802afd8:	4619      	mov	r1, r3
 802afda:	4813      	ldr	r0, [pc, #76]	; (802b028 <remove_recursively_files_and_directories+0x144>)
 802afdc:	f7ff fb06 	bl	802a5ec <lfs_remove>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802afe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802afe4:	461a      	mov	r2, r3
 802afe6:	490f      	ldr	r1, [pc, #60]	; (802b024 <remove_recursively_files_and_directories+0x140>)
 802afe8:	480f      	ldr	r0, [pc, #60]	; (802b028 <remove_recursively_files_and_directories+0x144>)
 802afea:	f7ff fc95 	bl	802a918 <lfs_dir_read>
 802afee:	4603      	mov	r3, r0
 802aff0:	2b00      	cmp	r3, #0
 802aff2:	dc93      	bgt.n	802af1c <remove_recursively_files_and_directories+0x38>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802aff4:	490b      	ldr	r1, [pc, #44]	; (802b024 <remove_recursively_files_and_directories+0x140>)
 802aff6:	480c      	ldr	r0, [pc, #48]	; (802b028 <remove_recursively_files_and_directories+0x144>)
 802aff8:	f7ff fc78 	bl	802a8ec <lfs_dir_close>
        if (deep >= 1){
 802affc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b000:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b004:	781b      	ldrb	r3, [r3, #0]
 802b006:	2b00      	cmp	r3, #0
 802b008:	d007      	beq.n	802b01a <remove_recursively_files_and_directories+0x136>
        	lfs_remove(&lfs, path);
 802b00a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b00e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b012:	6819      	ldr	r1, [r3, #0]
 802b014:	4804      	ldr	r0, [pc, #16]	; (802b028 <remove_recursively_files_and_directories+0x144>)
 802b016:	f7ff fae9 	bl	802a5ec <lfs_remove>
        }

    }
}
 802b01a:	bf00      	nop
 802b01c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802b020:	46bd      	mov	sp, r7
 802b022:	bd80      	pop	{r7, pc}
 802b024:	2000d77c 	.word	0x2000d77c
 802b028:	2000d6b0 	.word	0x2000d6b0
 802b02c:	08033d94 	.word	0x08033d94
 802b030:	08033d98 	.word	0x08033d98
 802b034:	08033d9c 	.word	0x08033d9c
 802b038:	08033dac 	.word	0x08033dac
 802b03c:	08033db4 	.word	0x08033db4

0802b040 <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802b040:	b580      	push	{r7, lr}
 802b042:	b084      	sub	sp, #16
 802b044:	af00      	add	r7, sp, #0
 802b046:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b048:	4b0b      	ldr	r3, [pc, #44]	; (802b078 <spi_fs_remove_recurcuve_in+0x38>)
 802b04a:	681b      	ldr	r3, [r3, #0]
 802b04c:	4798      	blx	r3
#endif
	uint8_t deep = 0;
 802b04e:	2300      	movs	r3, #0
 802b050:	73fb      	strb	r3, [r7, #15]

	remove_recursively_files_and_directories(path, deep);
 802b052:	7bfb      	ldrb	r3, [r7, #15]
 802b054:	4619      	mov	r1, r3
 802b056:	6878      	ldr	r0, [r7, #4]
 802b058:	f7ff ff44 	bl	802aee4 <remove_recursively_files_and_directories>
	deep = 0;
 802b05c:	2300      	movs	r3, #0
 802b05e:	73fb      	strb	r3, [r7, #15]
	remove_recursively_files_and_directories(path, deep);
 802b060:	7bfb      	ldrb	r3, [r7, #15]
 802b062:	4619      	mov	r1, r3
 802b064:	6878      	ldr	r0, [r7, #4]
 802b066:	f7ff ff3d 	bl	802aee4 <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b06a:	4b04      	ldr	r3, [pc, #16]	; (802b07c <spi_fs_remove_recurcuve_in+0x3c>)
 802b06c:	681b      	ldr	r3, [r3, #0]
 802b06e:	4798      	blx	r3
#endif
}
 802b070:	bf00      	nop
 802b072:	3710      	adds	r7, #16
 802b074:	46bd      	mov	sp, r7
 802b076:	bd80      	pop	{r7, pc}
 802b078:	2000d9a0 	.word	0x2000d9a0
 802b07c:	2000d9a4 	.word	0x2000d9a4

0802b080 <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802b080:	b580      	push	{r7, lr}
 802b082:	b084      	sub	sp, #16
 802b084:	af00      	add	r7, sp, #0
 802b086:	6078      	str	r0, [r7, #4]
 802b088:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b08a:	4b08      	ldr	r3, [pc, #32]	; (802b0ac <spi_fs_mv+0x2c>)
 802b08c:	681b      	ldr	r3, [r3, #0]
 802b08e:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802b090:	683a      	ldr	r2, [r7, #0]
 802b092:	6879      	ldr	r1, [r7, #4]
 802b094:	4806      	ldr	r0, [pc, #24]	; (802b0b0 <spi_fs_mv+0x30>)
 802b096:	f7ff fabf 	bl	802a618 <lfs_rename>
 802b09a:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b09c:	4b05      	ldr	r3, [pc, #20]	; (802b0b4 <spi_fs_mv+0x34>)
 802b09e:	681b      	ldr	r3, [r3, #0]
 802b0a0:	4798      	blx	r3
#endif
	return err;
 802b0a2:	68fb      	ldr	r3, [r7, #12]
}
 802b0a4:	4618      	mov	r0, r3
 802b0a6:	3710      	adds	r7, #16
 802b0a8:	46bd      	mov	sp, r7
 802b0aa:	bd80      	pop	{r7, pc}
 802b0ac:	2000d9a0 	.word	0x2000d9a0
 802b0b0:	2000d6b0 	.word	0x2000d6b0
 802b0b4:	2000d9a4 	.word	0x2000d9a4

0802b0b8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802b0b8:	b480      	push	{r7}
 802b0ba:	b08b      	sub	sp, #44	; 0x2c
 802b0bc:	af00      	add	r7, sp, #0
 802b0be:	60f8      	str	r0, [r7, #12]
 802b0c0:	60b9      	str	r1, [r7, #8]
 802b0c2:	607a      	str	r2, [r7, #4]
 802b0c4:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802b0c6:	2300      	movs	r3, #0
 802b0c8:	61fb      	str	r3, [r7, #28]
 802b0ca:	2300      	movs	r3, #0
 802b0cc:	623b      	str	r3, [r7, #32]
 802b0ce:	6a3b      	ldr	r3, [r7, #32]
 802b0d0:	627b      	str	r3, [r7, #36]	; 0x24
 802b0d2:	e06f      	b.n	802b1b4 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802b0d4:	2300      	movs	r3, #0
 802b0d6:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b0d8:	e005      	b.n	802b0e6 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0dc:	3301      	adds	r3, #1
 802b0de:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 802b0e0:	69bb      	ldr	r3, [r7, #24]
 802b0e2:	3301      	adds	r3, #1
 802b0e4:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0ea:	429a      	cmp	r2, r3
 802b0ec:	d205      	bcs.n	802b0fa <mbedtls_base64_decode+0x42>
 802b0ee:	683a      	ldr	r2, [r7, #0]
 802b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0f2:	4413      	add	r3, r2
 802b0f4:	781b      	ldrb	r3, [r3, #0]
 802b0f6:	2b20      	cmp	r3, #32
 802b0f8:	d0ef      	beq.n	802b0da <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802b0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0fe:	429a      	cmp	r2, r3
 802b100:	d05d      	beq.n	802b1be <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802b102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b106:	1ad3      	subs	r3, r2, r3
 802b108:	2b01      	cmp	r3, #1
 802b10a:	d90c      	bls.n	802b126 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b10c:	683a      	ldr	r2, [r7, #0]
 802b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b110:	4413      	add	r3, r2
 802b112:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802b114:	2b0d      	cmp	r3, #13
 802b116:	d106      	bne.n	802b126 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b11a:	3301      	adds	r3, #1
 802b11c:	683a      	ldr	r2, [r7, #0]
 802b11e:	4413      	add	r3, r2
 802b120:	781b      	ldrb	r3, [r3, #0]
 802b122:	2b0a      	cmp	r3, #10
 802b124:	d040      	beq.n	802b1a8 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802b126:	683a      	ldr	r2, [r7, #0]
 802b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b12a:	4413      	add	r3, r2
 802b12c:	781b      	ldrb	r3, [r3, #0]
 802b12e:	2b0a      	cmp	r3, #10
 802b130:	d03c      	beq.n	802b1ac <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802b132:	69bb      	ldr	r3, [r7, #24]
 802b134:	2b00      	cmp	r3, #0
 802b136:	d002      	beq.n	802b13e <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b138:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b13c:	e0d0      	b.n	802b2e0 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802b13e:	683a      	ldr	r2, [r7, #0]
 802b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b142:	4413      	add	r3, r2
 802b144:	781b      	ldrb	r3, [r3, #0]
 802b146:	2b3d      	cmp	r3, #61	; 0x3d
 802b148:	d108      	bne.n	802b15c <mbedtls_base64_decode+0xa4>
 802b14a:	69fb      	ldr	r3, [r7, #28]
 802b14c:	3301      	adds	r3, #1
 802b14e:	61fb      	str	r3, [r7, #28]
 802b150:	69fb      	ldr	r3, [r7, #28]
 802b152:	2b02      	cmp	r3, #2
 802b154:	d902      	bls.n	802b15c <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b156:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b15a:	e0c1      	b.n	802b2e0 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802b15c:	683a      	ldr	r2, [r7, #0]
 802b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b160:	4413      	add	r3, r2
 802b162:	781b      	ldrb	r3, [r3, #0]
 802b164:	b25b      	sxtb	r3, r3
 802b166:	2b00      	cmp	r3, #0
 802b168:	db08      	blt.n	802b17c <mbedtls_base64_decode+0xc4>
 802b16a:	683a      	ldr	r2, [r7, #0]
 802b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b16e:	4413      	add	r3, r2
 802b170:	781b      	ldrb	r3, [r3, #0]
 802b172:	461a      	mov	r2, r3
 802b174:	4b5d      	ldr	r3, [pc, #372]	; (802b2ec <mbedtls_base64_decode+0x234>)
 802b176:	5c9b      	ldrb	r3, [r3, r2]
 802b178:	2b7f      	cmp	r3, #127	; 0x7f
 802b17a:	d102      	bne.n	802b182 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b17c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b180:	e0ae      	b.n	802b2e0 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802b182:	683a      	ldr	r2, [r7, #0]
 802b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b186:	4413      	add	r3, r2
 802b188:	781b      	ldrb	r3, [r3, #0]
 802b18a:	461a      	mov	r2, r3
 802b18c:	4b57      	ldr	r3, [pc, #348]	; (802b2ec <mbedtls_base64_decode+0x234>)
 802b18e:	5c9b      	ldrb	r3, [r3, r2]
 802b190:	2b3f      	cmp	r3, #63	; 0x3f
 802b192:	d805      	bhi.n	802b1a0 <mbedtls_base64_decode+0xe8>
 802b194:	69fb      	ldr	r3, [r7, #28]
 802b196:	2b00      	cmp	r3, #0
 802b198:	d002      	beq.n	802b1a0 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b19a:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b19e:	e09f      	b.n	802b2e0 <mbedtls_base64_decode+0x228>

        n++;
 802b1a0:	6a3b      	ldr	r3, [r7, #32]
 802b1a2:	3301      	adds	r3, #1
 802b1a4:	623b      	str	r3, [r7, #32]
 802b1a6:	e002      	b.n	802b1ae <mbedtls_base64_decode+0xf6>
            continue;
 802b1a8:	bf00      	nop
 802b1aa:	e000      	b.n	802b1ae <mbedtls_base64_decode+0xf6>
            continue;
 802b1ac:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1b0:	3301      	adds	r3, #1
 802b1b2:	627b      	str	r3, [r7, #36]	; 0x24
 802b1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b1b8:	429a      	cmp	r2, r3
 802b1ba:	d38b      	bcc.n	802b0d4 <mbedtls_base64_decode+0x1c>
 802b1bc:	e000      	b.n	802b1c0 <mbedtls_base64_decode+0x108>
            break;
 802b1be:	bf00      	nop
    }

    if( n == 0 )
 802b1c0:	6a3b      	ldr	r3, [r7, #32]
 802b1c2:	2b00      	cmp	r3, #0
 802b1c4:	d104      	bne.n	802b1d0 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802b1c6:	687b      	ldr	r3, [r7, #4]
 802b1c8:	2200      	movs	r2, #0
 802b1ca:	601a      	str	r2, [r3, #0]
        return( 0 );
 802b1cc:	2300      	movs	r3, #0
 802b1ce:	e087      	b.n	802b2e0 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802b1d0:	6a3b      	ldr	r3, [r7, #32]
 802b1d2:	08da      	lsrs	r2, r3, #3
 802b1d4:	4613      	mov	r3, r2
 802b1d6:	005b      	lsls	r3, r3, #1
 802b1d8:	4413      	add	r3, r2
 802b1da:	005b      	lsls	r3, r3, #1
 802b1dc:	4619      	mov	r1, r3
 802b1de:	6a3b      	ldr	r3, [r7, #32]
 802b1e0:	f003 0207 	and.w	r2, r3, #7
 802b1e4:	4613      	mov	r3, r2
 802b1e6:	005b      	lsls	r3, r3, #1
 802b1e8:	4413      	add	r3, r2
 802b1ea:	005b      	lsls	r3, r3, #1
 802b1ec:	3307      	adds	r3, #7
 802b1ee:	08db      	lsrs	r3, r3, #3
 802b1f0:	440b      	add	r3, r1
 802b1f2:	623b      	str	r3, [r7, #32]
    n -= j;
 802b1f4:	6a3a      	ldr	r2, [r7, #32]
 802b1f6:	69fb      	ldr	r3, [r7, #28]
 802b1f8:	1ad3      	subs	r3, r2, r3
 802b1fa:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802b1fc:	68fb      	ldr	r3, [r7, #12]
 802b1fe:	2b00      	cmp	r3, #0
 802b200:	d003      	beq.n	802b20a <mbedtls_base64_decode+0x152>
 802b202:	68ba      	ldr	r2, [r7, #8]
 802b204:	6a3b      	ldr	r3, [r7, #32]
 802b206:	429a      	cmp	r2, r3
 802b208:	d205      	bcs.n	802b216 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802b20a:	687b      	ldr	r3, [r7, #4]
 802b20c:	6a3a      	ldr	r2, [r7, #32]
 802b20e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802b210:	f06f 0329 	mvn.w	r3, #41	; 0x29
 802b214:	e064      	b.n	802b2e0 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b216:	2303      	movs	r3, #3
 802b218:	61fb      	str	r3, [r7, #28]
 802b21a:	2300      	movs	r3, #0
 802b21c:	61bb      	str	r3, [r7, #24]
 802b21e:	2300      	movs	r3, #0
 802b220:	623b      	str	r3, [r7, #32]
 802b222:	68fb      	ldr	r3, [r7, #12]
 802b224:	617b      	str	r3, [r7, #20]
 802b226:	e051      	b.n	802b2cc <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802b228:	683b      	ldr	r3, [r7, #0]
 802b22a:	781b      	ldrb	r3, [r3, #0]
 802b22c:	2b0d      	cmp	r3, #13
 802b22e:	d046      	beq.n	802b2be <mbedtls_base64_decode+0x206>
 802b230:	683b      	ldr	r3, [r7, #0]
 802b232:	781b      	ldrb	r3, [r3, #0]
 802b234:	2b0a      	cmp	r3, #10
 802b236:	d042      	beq.n	802b2be <mbedtls_base64_decode+0x206>
 802b238:	683b      	ldr	r3, [r7, #0]
 802b23a:	781b      	ldrb	r3, [r3, #0]
 802b23c:	2b20      	cmp	r3, #32
 802b23e:	d03e      	beq.n	802b2be <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802b240:	683b      	ldr	r3, [r7, #0]
 802b242:	781b      	ldrb	r3, [r3, #0]
 802b244:	461a      	mov	r2, r3
 802b246:	4b29      	ldr	r3, [pc, #164]	; (802b2ec <mbedtls_base64_decode+0x234>)
 802b248:	5c9b      	ldrb	r3, [r3, r2]
 802b24a:	2b40      	cmp	r3, #64	; 0x40
 802b24c:	bf0c      	ite	eq
 802b24e:	2301      	moveq	r3, #1
 802b250:	2300      	movne	r3, #0
 802b252:	b2db      	uxtb	r3, r3
 802b254:	461a      	mov	r2, r3
 802b256:	69fb      	ldr	r3, [r7, #28]
 802b258:	1a9b      	subs	r3, r3, r2
 802b25a:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802b25c:	69bb      	ldr	r3, [r7, #24]
 802b25e:	019a      	lsls	r2, r3, #6
 802b260:	683b      	ldr	r3, [r7, #0]
 802b262:	781b      	ldrb	r3, [r3, #0]
 802b264:	4619      	mov	r1, r3
 802b266:	4b21      	ldr	r3, [pc, #132]	; (802b2ec <mbedtls_base64_decode+0x234>)
 802b268:	5c5b      	ldrb	r3, [r3, r1]
 802b26a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b26e:	4313      	orrs	r3, r2
 802b270:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802b272:	6a3b      	ldr	r3, [r7, #32]
 802b274:	3301      	adds	r3, #1
 802b276:	623b      	str	r3, [r7, #32]
 802b278:	6a3b      	ldr	r3, [r7, #32]
 802b27a:	2b04      	cmp	r3, #4
 802b27c:	d120      	bne.n	802b2c0 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802b27e:	2300      	movs	r3, #0
 802b280:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802b282:	69fb      	ldr	r3, [r7, #28]
 802b284:	2b00      	cmp	r3, #0
 802b286:	d006      	beq.n	802b296 <mbedtls_base64_decode+0x1de>
 802b288:	69bb      	ldr	r3, [r7, #24]
 802b28a:	0c19      	lsrs	r1, r3, #16
 802b28c:	697b      	ldr	r3, [r7, #20]
 802b28e:	1c5a      	adds	r2, r3, #1
 802b290:	617a      	str	r2, [r7, #20]
 802b292:	b2ca      	uxtb	r2, r1
 802b294:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802b296:	69fb      	ldr	r3, [r7, #28]
 802b298:	2b01      	cmp	r3, #1
 802b29a:	d906      	bls.n	802b2aa <mbedtls_base64_decode+0x1f2>
 802b29c:	69bb      	ldr	r3, [r7, #24]
 802b29e:	0a19      	lsrs	r1, r3, #8
 802b2a0:	697b      	ldr	r3, [r7, #20]
 802b2a2:	1c5a      	adds	r2, r3, #1
 802b2a4:	617a      	str	r2, [r7, #20]
 802b2a6:	b2ca      	uxtb	r2, r1
 802b2a8:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802b2aa:	69fb      	ldr	r3, [r7, #28]
 802b2ac:	2b02      	cmp	r3, #2
 802b2ae:	d907      	bls.n	802b2c0 <mbedtls_base64_decode+0x208>
 802b2b0:	697b      	ldr	r3, [r7, #20]
 802b2b2:	1c5a      	adds	r2, r3, #1
 802b2b4:	617a      	str	r2, [r7, #20]
 802b2b6:	69ba      	ldr	r2, [r7, #24]
 802b2b8:	b2d2      	uxtb	r2, r2
 802b2ba:	701a      	strb	r2, [r3, #0]
 802b2bc:	e000      	b.n	802b2c0 <mbedtls_base64_decode+0x208>
            continue;
 802b2be:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2c2:	3b01      	subs	r3, #1
 802b2c4:	627b      	str	r3, [r7, #36]	; 0x24
 802b2c6:	683b      	ldr	r3, [r7, #0]
 802b2c8:	3301      	adds	r3, #1
 802b2ca:	603b      	str	r3, [r7, #0]
 802b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2ce:	2b00      	cmp	r3, #0
 802b2d0:	d1aa      	bne.n	802b228 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802b2d2:	697a      	ldr	r2, [r7, #20]
 802b2d4:	68fb      	ldr	r3, [r7, #12]
 802b2d6:	1ad3      	subs	r3, r2, r3
 802b2d8:	461a      	mov	r2, r3
 802b2da:	687b      	ldr	r3, [r7, #4]
 802b2dc:	601a      	str	r2, [r3, #0]

    return( 0 );
 802b2de:	2300      	movs	r3, #0
}
 802b2e0:	4618      	mov	r0, r3
 802b2e2:	372c      	adds	r7, #44	; 0x2c
 802b2e4:	46bd      	mov	sp, r7
 802b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2ea:	4770      	bx	lr
 802b2ec:	08034894 	.word	0x08034894

0802b2f0 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802b2f0:	b580      	push	{r7, lr}
 802b2f2:	b082      	sub	sp, #8
 802b2f4:	af00      	add	r7, sp, #0
 802b2f6:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802b2f8:	2258      	movs	r2, #88	; 0x58
 802b2fa:	2100      	movs	r1, #0
 802b2fc:	6878      	ldr	r0, [r7, #4]
 802b2fe:	f002 fa4d 	bl	802d79c <memset>
}
 802b302:	bf00      	nop
 802b304:	3708      	adds	r7, #8
 802b306:	46bd      	mov	sp, r7
 802b308:	bd80      	pop	{r7, pc}

0802b30a <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802b30a:	b580      	push	{r7, lr}
 802b30c:	b082      	sub	sp, #8
 802b30e:	af00      	add	r7, sp, #0
 802b310:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802b312:	687b      	ldr	r3, [r7, #4]
 802b314:	2b00      	cmp	r3, #0
 802b316:	d004      	beq.n	802b322 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802b318:	2158      	movs	r1, #88	; 0x58
 802b31a:	6878      	ldr	r0, [r7, #4]
 802b31c:	f001 f85c 	bl	802c3d8 <mbedtls_platform_zeroize>
 802b320:	e000      	b.n	802b324 <mbedtls_md5_free+0x1a>
        return;
 802b322:	bf00      	nop
}
 802b324:	3708      	adds	r7, #8
 802b326:	46bd      	mov	sp, r7
 802b328:	bd80      	pop	{r7, pc}
	...

0802b32c <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802b32c:	b480      	push	{r7}
 802b32e:	b083      	sub	sp, #12
 802b330:	af00      	add	r7, sp, #0
 802b332:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802b334:	687b      	ldr	r3, [r7, #4]
 802b336:	2200      	movs	r2, #0
 802b338:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802b33a:	687b      	ldr	r3, [r7, #4]
 802b33c:	2200      	movs	r2, #0
 802b33e:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802b340:	687b      	ldr	r3, [r7, #4]
 802b342:	4a09      	ldr	r2, [pc, #36]	; (802b368 <mbedtls_md5_starts_ret+0x3c>)
 802b344:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802b346:	687b      	ldr	r3, [r7, #4]
 802b348:	4a08      	ldr	r2, [pc, #32]	; (802b36c <mbedtls_md5_starts_ret+0x40>)
 802b34a:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802b34c:	687b      	ldr	r3, [r7, #4]
 802b34e:	4a08      	ldr	r2, [pc, #32]	; (802b370 <mbedtls_md5_starts_ret+0x44>)
 802b350:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802b352:	687b      	ldr	r3, [r7, #4]
 802b354:	4a07      	ldr	r2, [pc, #28]	; (802b374 <mbedtls_md5_starts_ret+0x48>)
 802b356:	615a      	str	r2, [r3, #20]

    return( 0 );
 802b358:	2300      	movs	r3, #0
}
 802b35a:	4618      	mov	r0, r3
 802b35c:	370c      	adds	r7, #12
 802b35e:	46bd      	mov	sp, r7
 802b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b364:	4770      	bx	lr
 802b366:	bf00      	nop
 802b368:	67452301 	.word	0x67452301
 802b36c:	efcdab89 	.word	0xefcdab89
 802b370:	98badcfe 	.word	0x98badcfe
 802b374:	10325476 	.word	0x10325476

0802b378 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802b378:	b480      	push	{r7}
 802b37a:	b097      	sub	sp, #92	; 0x5c
 802b37c:	af00      	add	r7, sp, #0
 802b37e:	6078      	str	r0, [r7, #4]
 802b380:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802b382:	683b      	ldr	r3, [r7, #0]
 802b384:	781b      	ldrb	r3, [r3, #0]
 802b386:	461a      	mov	r2, r3
 802b388:	683b      	ldr	r3, [r7, #0]
 802b38a:	3301      	adds	r3, #1
 802b38c:	781b      	ldrb	r3, [r3, #0]
 802b38e:	021b      	lsls	r3, r3, #8
 802b390:	431a      	orrs	r2, r3
 802b392:	683b      	ldr	r3, [r7, #0]
 802b394:	3302      	adds	r3, #2
 802b396:	781b      	ldrb	r3, [r3, #0]
 802b398:	041b      	lsls	r3, r3, #16
 802b39a:	431a      	orrs	r2, r3
 802b39c:	683b      	ldr	r3, [r7, #0]
 802b39e:	3303      	adds	r3, #3
 802b3a0:	781b      	ldrb	r3, [r3, #0]
 802b3a2:	061b      	lsls	r3, r3, #24
 802b3a4:	4313      	orrs	r3, r2
 802b3a6:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802b3a8:	683b      	ldr	r3, [r7, #0]
 802b3aa:	3304      	adds	r3, #4
 802b3ac:	781b      	ldrb	r3, [r3, #0]
 802b3ae:	461a      	mov	r2, r3
 802b3b0:	683b      	ldr	r3, [r7, #0]
 802b3b2:	3305      	adds	r3, #5
 802b3b4:	781b      	ldrb	r3, [r3, #0]
 802b3b6:	021b      	lsls	r3, r3, #8
 802b3b8:	431a      	orrs	r2, r3
 802b3ba:	683b      	ldr	r3, [r7, #0]
 802b3bc:	3306      	adds	r3, #6
 802b3be:	781b      	ldrb	r3, [r3, #0]
 802b3c0:	041b      	lsls	r3, r3, #16
 802b3c2:	431a      	orrs	r2, r3
 802b3c4:	683b      	ldr	r3, [r7, #0]
 802b3c6:	3307      	adds	r3, #7
 802b3c8:	781b      	ldrb	r3, [r3, #0]
 802b3ca:	061b      	lsls	r3, r3, #24
 802b3cc:	4313      	orrs	r3, r2
 802b3ce:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802b3d0:	683b      	ldr	r3, [r7, #0]
 802b3d2:	3308      	adds	r3, #8
 802b3d4:	781b      	ldrb	r3, [r3, #0]
 802b3d6:	461a      	mov	r2, r3
 802b3d8:	683b      	ldr	r3, [r7, #0]
 802b3da:	3309      	adds	r3, #9
 802b3dc:	781b      	ldrb	r3, [r3, #0]
 802b3de:	021b      	lsls	r3, r3, #8
 802b3e0:	431a      	orrs	r2, r3
 802b3e2:	683b      	ldr	r3, [r7, #0]
 802b3e4:	330a      	adds	r3, #10
 802b3e6:	781b      	ldrb	r3, [r3, #0]
 802b3e8:	041b      	lsls	r3, r3, #16
 802b3ea:	431a      	orrs	r2, r3
 802b3ec:	683b      	ldr	r3, [r7, #0]
 802b3ee:	330b      	adds	r3, #11
 802b3f0:	781b      	ldrb	r3, [r3, #0]
 802b3f2:	061b      	lsls	r3, r3, #24
 802b3f4:	4313      	orrs	r3, r2
 802b3f6:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802b3f8:	683b      	ldr	r3, [r7, #0]
 802b3fa:	330c      	adds	r3, #12
 802b3fc:	781b      	ldrb	r3, [r3, #0]
 802b3fe:	461a      	mov	r2, r3
 802b400:	683b      	ldr	r3, [r7, #0]
 802b402:	330d      	adds	r3, #13
 802b404:	781b      	ldrb	r3, [r3, #0]
 802b406:	021b      	lsls	r3, r3, #8
 802b408:	431a      	orrs	r2, r3
 802b40a:	683b      	ldr	r3, [r7, #0]
 802b40c:	330e      	adds	r3, #14
 802b40e:	781b      	ldrb	r3, [r3, #0]
 802b410:	041b      	lsls	r3, r3, #16
 802b412:	431a      	orrs	r2, r3
 802b414:	683b      	ldr	r3, [r7, #0]
 802b416:	330f      	adds	r3, #15
 802b418:	781b      	ldrb	r3, [r3, #0]
 802b41a:	061b      	lsls	r3, r3, #24
 802b41c:	4313      	orrs	r3, r2
 802b41e:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802b420:	683b      	ldr	r3, [r7, #0]
 802b422:	3310      	adds	r3, #16
 802b424:	781b      	ldrb	r3, [r3, #0]
 802b426:	461a      	mov	r2, r3
 802b428:	683b      	ldr	r3, [r7, #0]
 802b42a:	3311      	adds	r3, #17
 802b42c:	781b      	ldrb	r3, [r3, #0]
 802b42e:	021b      	lsls	r3, r3, #8
 802b430:	431a      	orrs	r2, r3
 802b432:	683b      	ldr	r3, [r7, #0]
 802b434:	3312      	adds	r3, #18
 802b436:	781b      	ldrb	r3, [r3, #0]
 802b438:	041b      	lsls	r3, r3, #16
 802b43a:	431a      	orrs	r2, r3
 802b43c:	683b      	ldr	r3, [r7, #0]
 802b43e:	3313      	adds	r3, #19
 802b440:	781b      	ldrb	r3, [r3, #0]
 802b442:	061b      	lsls	r3, r3, #24
 802b444:	4313      	orrs	r3, r2
 802b446:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b448:	683b      	ldr	r3, [r7, #0]
 802b44a:	3314      	adds	r3, #20
 802b44c:	781b      	ldrb	r3, [r3, #0]
 802b44e:	461a      	mov	r2, r3
 802b450:	683b      	ldr	r3, [r7, #0]
 802b452:	3315      	adds	r3, #21
 802b454:	781b      	ldrb	r3, [r3, #0]
 802b456:	021b      	lsls	r3, r3, #8
 802b458:	431a      	orrs	r2, r3
 802b45a:	683b      	ldr	r3, [r7, #0]
 802b45c:	3316      	adds	r3, #22
 802b45e:	781b      	ldrb	r3, [r3, #0]
 802b460:	041b      	lsls	r3, r3, #16
 802b462:	431a      	orrs	r2, r3
 802b464:	683b      	ldr	r3, [r7, #0]
 802b466:	3317      	adds	r3, #23
 802b468:	781b      	ldrb	r3, [r3, #0]
 802b46a:	061b      	lsls	r3, r3, #24
 802b46c:	4313      	orrs	r3, r2
 802b46e:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b470:	683b      	ldr	r3, [r7, #0]
 802b472:	3318      	adds	r3, #24
 802b474:	781b      	ldrb	r3, [r3, #0]
 802b476:	461a      	mov	r2, r3
 802b478:	683b      	ldr	r3, [r7, #0]
 802b47a:	3319      	adds	r3, #25
 802b47c:	781b      	ldrb	r3, [r3, #0]
 802b47e:	021b      	lsls	r3, r3, #8
 802b480:	431a      	orrs	r2, r3
 802b482:	683b      	ldr	r3, [r7, #0]
 802b484:	331a      	adds	r3, #26
 802b486:	781b      	ldrb	r3, [r3, #0]
 802b488:	041b      	lsls	r3, r3, #16
 802b48a:	431a      	orrs	r2, r3
 802b48c:	683b      	ldr	r3, [r7, #0]
 802b48e:	331b      	adds	r3, #27
 802b490:	781b      	ldrb	r3, [r3, #0]
 802b492:	061b      	lsls	r3, r3, #24
 802b494:	4313      	orrs	r3, r2
 802b496:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b498:	683b      	ldr	r3, [r7, #0]
 802b49a:	331c      	adds	r3, #28
 802b49c:	781b      	ldrb	r3, [r3, #0]
 802b49e:	461a      	mov	r2, r3
 802b4a0:	683b      	ldr	r3, [r7, #0]
 802b4a2:	331d      	adds	r3, #29
 802b4a4:	781b      	ldrb	r3, [r3, #0]
 802b4a6:	021b      	lsls	r3, r3, #8
 802b4a8:	431a      	orrs	r2, r3
 802b4aa:	683b      	ldr	r3, [r7, #0]
 802b4ac:	331e      	adds	r3, #30
 802b4ae:	781b      	ldrb	r3, [r3, #0]
 802b4b0:	041b      	lsls	r3, r3, #16
 802b4b2:	431a      	orrs	r2, r3
 802b4b4:	683b      	ldr	r3, [r7, #0]
 802b4b6:	331f      	adds	r3, #31
 802b4b8:	781b      	ldrb	r3, [r3, #0]
 802b4ba:	061b      	lsls	r3, r3, #24
 802b4bc:	4313      	orrs	r3, r2
 802b4be:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b4c0:	683b      	ldr	r3, [r7, #0]
 802b4c2:	3320      	adds	r3, #32
 802b4c4:	781b      	ldrb	r3, [r3, #0]
 802b4c6:	461a      	mov	r2, r3
 802b4c8:	683b      	ldr	r3, [r7, #0]
 802b4ca:	3321      	adds	r3, #33	; 0x21
 802b4cc:	781b      	ldrb	r3, [r3, #0]
 802b4ce:	021b      	lsls	r3, r3, #8
 802b4d0:	431a      	orrs	r2, r3
 802b4d2:	683b      	ldr	r3, [r7, #0]
 802b4d4:	3322      	adds	r3, #34	; 0x22
 802b4d6:	781b      	ldrb	r3, [r3, #0]
 802b4d8:	041b      	lsls	r3, r3, #16
 802b4da:	431a      	orrs	r2, r3
 802b4dc:	683b      	ldr	r3, [r7, #0]
 802b4de:	3323      	adds	r3, #35	; 0x23
 802b4e0:	781b      	ldrb	r3, [r3, #0]
 802b4e2:	061b      	lsls	r3, r3, #24
 802b4e4:	4313      	orrs	r3, r2
 802b4e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b4e8:	683b      	ldr	r3, [r7, #0]
 802b4ea:	3324      	adds	r3, #36	; 0x24
 802b4ec:	781b      	ldrb	r3, [r3, #0]
 802b4ee:	461a      	mov	r2, r3
 802b4f0:	683b      	ldr	r3, [r7, #0]
 802b4f2:	3325      	adds	r3, #37	; 0x25
 802b4f4:	781b      	ldrb	r3, [r3, #0]
 802b4f6:	021b      	lsls	r3, r3, #8
 802b4f8:	431a      	orrs	r2, r3
 802b4fa:	683b      	ldr	r3, [r7, #0]
 802b4fc:	3326      	adds	r3, #38	; 0x26
 802b4fe:	781b      	ldrb	r3, [r3, #0]
 802b500:	041b      	lsls	r3, r3, #16
 802b502:	431a      	orrs	r2, r3
 802b504:	683b      	ldr	r3, [r7, #0]
 802b506:	3327      	adds	r3, #39	; 0x27
 802b508:	781b      	ldrb	r3, [r3, #0]
 802b50a:	061b      	lsls	r3, r3, #24
 802b50c:	4313      	orrs	r3, r2
 802b50e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b510:	683b      	ldr	r3, [r7, #0]
 802b512:	3328      	adds	r3, #40	; 0x28
 802b514:	781b      	ldrb	r3, [r3, #0]
 802b516:	461a      	mov	r2, r3
 802b518:	683b      	ldr	r3, [r7, #0]
 802b51a:	3329      	adds	r3, #41	; 0x29
 802b51c:	781b      	ldrb	r3, [r3, #0]
 802b51e:	021b      	lsls	r3, r3, #8
 802b520:	431a      	orrs	r2, r3
 802b522:	683b      	ldr	r3, [r7, #0]
 802b524:	332a      	adds	r3, #42	; 0x2a
 802b526:	781b      	ldrb	r3, [r3, #0]
 802b528:	041b      	lsls	r3, r3, #16
 802b52a:	431a      	orrs	r2, r3
 802b52c:	683b      	ldr	r3, [r7, #0]
 802b52e:	332b      	adds	r3, #43	; 0x2b
 802b530:	781b      	ldrb	r3, [r3, #0]
 802b532:	061b      	lsls	r3, r3, #24
 802b534:	4313      	orrs	r3, r2
 802b536:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b538:	683b      	ldr	r3, [r7, #0]
 802b53a:	332c      	adds	r3, #44	; 0x2c
 802b53c:	781b      	ldrb	r3, [r3, #0]
 802b53e:	461a      	mov	r2, r3
 802b540:	683b      	ldr	r3, [r7, #0]
 802b542:	332d      	adds	r3, #45	; 0x2d
 802b544:	781b      	ldrb	r3, [r3, #0]
 802b546:	021b      	lsls	r3, r3, #8
 802b548:	431a      	orrs	r2, r3
 802b54a:	683b      	ldr	r3, [r7, #0]
 802b54c:	332e      	adds	r3, #46	; 0x2e
 802b54e:	781b      	ldrb	r3, [r3, #0]
 802b550:	041b      	lsls	r3, r3, #16
 802b552:	431a      	orrs	r2, r3
 802b554:	683b      	ldr	r3, [r7, #0]
 802b556:	332f      	adds	r3, #47	; 0x2f
 802b558:	781b      	ldrb	r3, [r3, #0]
 802b55a:	061b      	lsls	r3, r3, #24
 802b55c:	4313      	orrs	r3, r2
 802b55e:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b560:	683b      	ldr	r3, [r7, #0]
 802b562:	3330      	adds	r3, #48	; 0x30
 802b564:	781b      	ldrb	r3, [r3, #0]
 802b566:	461a      	mov	r2, r3
 802b568:	683b      	ldr	r3, [r7, #0]
 802b56a:	3331      	adds	r3, #49	; 0x31
 802b56c:	781b      	ldrb	r3, [r3, #0]
 802b56e:	021b      	lsls	r3, r3, #8
 802b570:	431a      	orrs	r2, r3
 802b572:	683b      	ldr	r3, [r7, #0]
 802b574:	3332      	adds	r3, #50	; 0x32
 802b576:	781b      	ldrb	r3, [r3, #0]
 802b578:	041b      	lsls	r3, r3, #16
 802b57a:	431a      	orrs	r2, r3
 802b57c:	683b      	ldr	r3, [r7, #0]
 802b57e:	3333      	adds	r3, #51	; 0x33
 802b580:	781b      	ldrb	r3, [r3, #0]
 802b582:	061b      	lsls	r3, r3, #24
 802b584:	4313      	orrs	r3, r2
 802b586:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b588:	683b      	ldr	r3, [r7, #0]
 802b58a:	3334      	adds	r3, #52	; 0x34
 802b58c:	781b      	ldrb	r3, [r3, #0]
 802b58e:	461a      	mov	r2, r3
 802b590:	683b      	ldr	r3, [r7, #0]
 802b592:	3335      	adds	r3, #53	; 0x35
 802b594:	781b      	ldrb	r3, [r3, #0]
 802b596:	021b      	lsls	r3, r3, #8
 802b598:	431a      	orrs	r2, r3
 802b59a:	683b      	ldr	r3, [r7, #0]
 802b59c:	3336      	adds	r3, #54	; 0x36
 802b59e:	781b      	ldrb	r3, [r3, #0]
 802b5a0:	041b      	lsls	r3, r3, #16
 802b5a2:	431a      	orrs	r2, r3
 802b5a4:	683b      	ldr	r3, [r7, #0]
 802b5a6:	3337      	adds	r3, #55	; 0x37
 802b5a8:	781b      	ldrb	r3, [r3, #0]
 802b5aa:	061b      	lsls	r3, r3, #24
 802b5ac:	4313      	orrs	r3, r2
 802b5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b5b0:	683b      	ldr	r3, [r7, #0]
 802b5b2:	3338      	adds	r3, #56	; 0x38
 802b5b4:	781b      	ldrb	r3, [r3, #0]
 802b5b6:	461a      	mov	r2, r3
 802b5b8:	683b      	ldr	r3, [r7, #0]
 802b5ba:	3339      	adds	r3, #57	; 0x39
 802b5bc:	781b      	ldrb	r3, [r3, #0]
 802b5be:	021b      	lsls	r3, r3, #8
 802b5c0:	431a      	orrs	r2, r3
 802b5c2:	683b      	ldr	r3, [r7, #0]
 802b5c4:	333a      	adds	r3, #58	; 0x3a
 802b5c6:	781b      	ldrb	r3, [r3, #0]
 802b5c8:	041b      	lsls	r3, r3, #16
 802b5ca:	431a      	orrs	r2, r3
 802b5cc:	683b      	ldr	r3, [r7, #0]
 802b5ce:	333b      	adds	r3, #59	; 0x3b
 802b5d0:	781b      	ldrb	r3, [r3, #0]
 802b5d2:	061b      	lsls	r3, r3, #24
 802b5d4:	4313      	orrs	r3, r2
 802b5d6:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b5d8:	683b      	ldr	r3, [r7, #0]
 802b5da:	333c      	adds	r3, #60	; 0x3c
 802b5dc:	781b      	ldrb	r3, [r3, #0]
 802b5de:	461a      	mov	r2, r3
 802b5e0:	683b      	ldr	r3, [r7, #0]
 802b5e2:	333d      	adds	r3, #61	; 0x3d
 802b5e4:	781b      	ldrb	r3, [r3, #0]
 802b5e6:	021b      	lsls	r3, r3, #8
 802b5e8:	431a      	orrs	r2, r3
 802b5ea:	683b      	ldr	r3, [r7, #0]
 802b5ec:	333e      	adds	r3, #62	; 0x3e
 802b5ee:	781b      	ldrb	r3, [r3, #0]
 802b5f0:	041b      	lsls	r3, r3, #16
 802b5f2:	431a      	orrs	r2, r3
 802b5f4:	683b      	ldr	r3, [r7, #0]
 802b5f6:	333f      	adds	r3, #63	; 0x3f
 802b5f8:	781b      	ldrb	r3, [r3, #0]
 802b5fa:	061b      	lsls	r3, r3, #24
 802b5fc:	4313      	orrs	r3, r2
 802b5fe:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802b600:	687b      	ldr	r3, [r7, #4]
 802b602:	689b      	ldr	r3, [r3, #8]
 802b604:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 802b606:	687b      	ldr	r3, [r7, #4]
 802b608:	68db      	ldr	r3, [r3, #12]
 802b60a:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 802b60c:	687b      	ldr	r3, [r7, #4]
 802b60e:	691b      	ldr	r3, [r3, #16]
 802b610:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 802b612:	687b      	ldr	r3, [r7, #4]
 802b614:	695b      	ldr	r3, [r3, #20]
 802b616:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802b618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b61c:	405a      	eors	r2, r3
 802b61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b620:	401a      	ands	r2, r3
 802b622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b624:	405a      	eors	r2, r3
 802b626:	68bb      	ldr	r3, [r7, #8]
 802b628:	441a      	add	r2, r3
 802b62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b62c:	441a      	add	r2, r3
 802b62e:	4ba5      	ldr	r3, [pc, #660]	; (802b8c4 <mbedtls_internal_md5_process+0x54c>)
 802b630:	4413      	add	r3, r2
 802b632:	657b      	str	r3, [r7, #84]	; 0x54
 802b634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b636:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b63a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b63c:	4413      	add	r3, r2
 802b63e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802b640:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b644:	405a      	eors	r2, r3
 802b646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b648:	401a      	ands	r2, r3
 802b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b64c:	405a      	eors	r2, r3
 802b64e:	68fb      	ldr	r3, [r7, #12]
 802b650:	441a      	add	r2, r3
 802b652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b654:	441a      	add	r2, r3
 802b656:	4b9c      	ldr	r3, [pc, #624]	; (802b8c8 <mbedtls_internal_md5_process+0x550>)
 802b658:	4413      	add	r3, r2
 802b65a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b65c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b65e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b662:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b664:	4413      	add	r3, r2
 802b666:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802b668:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b66c:	405a      	eors	r2, r3
 802b66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b670:	401a      	ands	r2, r3
 802b672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b674:	405a      	eors	r2, r3
 802b676:	693b      	ldr	r3, [r7, #16]
 802b678:	441a      	add	r2, r3
 802b67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b67c:	441a      	add	r2, r3
 802b67e:	4b93      	ldr	r3, [pc, #588]	; (802b8cc <mbedtls_internal_md5_process+0x554>)
 802b680:	4413      	add	r3, r2
 802b682:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b686:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b68a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b68c:	4413      	add	r3, r2
 802b68e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802b690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b694:	405a      	eors	r2, r3
 802b696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b698:	401a      	ands	r2, r3
 802b69a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b69c:	405a      	eors	r2, r3
 802b69e:	697b      	ldr	r3, [r7, #20]
 802b6a0:	441a      	add	r2, r3
 802b6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6a4:	441a      	add	r2, r3
 802b6a6:	4b8a      	ldr	r3, [pc, #552]	; (802b8d0 <mbedtls_internal_md5_process+0x558>)
 802b6a8:	4413      	add	r3, r2
 802b6aa:	653b      	str	r3, [r7, #80]	; 0x50
 802b6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6ae:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b6b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b6b4:	4413      	add	r3, r2
 802b6b6:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802b6b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6bc:	405a      	eors	r2, r3
 802b6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6c0:	401a      	ands	r2, r3
 802b6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6c4:	405a      	eors	r2, r3
 802b6c6:	69bb      	ldr	r3, [r7, #24]
 802b6c8:	441a      	add	r2, r3
 802b6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6cc:	441a      	add	r2, r3
 802b6ce:	4b81      	ldr	r3, [pc, #516]	; (802b8d4 <mbedtls_internal_md5_process+0x55c>)
 802b6d0:	4413      	add	r3, r2
 802b6d2:	657b      	str	r3, [r7, #84]	; 0x54
 802b6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6d6:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b6da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b6dc:	4413      	add	r3, r2
 802b6de:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802b6e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b6e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6e4:	405a      	eors	r2, r3
 802b6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6e8:	401a      	ands	r2, r3
 802b6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6ec:	405a      	eors	r2, r3
 802b6ee:	69fb      	ldr	r3, [r7, #28]
 802b6f0:	441a      	add	r2, r3
 802b6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6f4:	441a      	add	r2, r3
 802b6f6:	4b78      	ldr	r3, [pc, #480]	; (802b8d8 <mbedtls_internal_md5_process+0x560>)
 802b6f8:	4413      	add	r3, r2
 802b6fa:	64bb      	str	r3, [r7, #72]	; 0x48
 802b6fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6fe:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b704:	4413      	add	r3, r2
 802b706:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802b708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b70c:	405a      	eors	r2, r3
 802b70e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b710:	401a      	ands	r2, r3
 802b712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b714:	405a      	eors	r2, r3
 802b716:	6a3b      	ldr	r3, [r7, #32]
 802b718:	441a      	add	r2, r3
 802b71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b71c:	441a      	add	r2, r3
 802b71e:	4b6f      	ldr	r3, [pc, #444]	; (802b8dc <mbedtls_internal_md5_process+0x564>)
 802b720:	4413      	add	r3, r2
 802b722:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b726:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b72a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b72c:	4413      	add	r3, r2
 802b72e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802b730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b734:	405a      	eors	r2, r3
 802b736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b738:	401a      	ands	r2, r3
 802b73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b73c:	405a      	eors	r2, r3
 802b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b740:	441a      	add	r2, r3
 802b742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b744:	441a      	add	r2, r3
 802b746:	4b66      	ldr	r3, [pc, #408]	; (802b8e0 <mbedtls_internal_md5_process+0x568>)
 802b748:	4413      	add	r3, r2
 802b74a:	653b      	str	r3, [r7, #80]	; 0x50
 802b74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b74e:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b754:	4413      	add	r3, r2
 802b756:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802b758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b75c:	405a      	eors	r2, r3
 802b75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b760:	401a      	ands	r2, r3
 802b762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b764:	405a      	eors	r2, r3
 802b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b768:	441a      	add	r2, r3
 802b76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b76c:	441a      	add	r2, r3
 802b76e:	4b5d      	ldr	r3, [pc, #372]	; (802b8e4 <mbedtls_internal_md5_process+0x56c>)
 802b770:	4413      	add	r3, r2
 802b772:	657b      	str	r3, [r7, #84]	; 0x54
 802b774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b776:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b77a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b77c:	4413      	add	r3, r2
 802b77e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802b780:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b784:	405a      	eors	r2, r3
 802b786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b788:	401a      	ands	r2, r3
 802b78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b78c:	405a      	eors	r2, r3
 802b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b790:	441a      	add	r2, r3
 802b792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b794:	441a      	add	r2, r3
 802b796:	4b54      	ldr	r3, [pc, #336]	; (802b8e8 <mbedtls_internal_md5_process+0x570>)
 802b798:	4413      	add	r3, r2
 802b79a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b79c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b79e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b7a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b7a4:	4413      	add	r3, r2
 802b7a6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802b7a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7ac:	405a      	eors	r2, r3
 802b7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7b0:	401a      	ands	r2, r3
 802b7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7b4:	405a      	eors	r2, r3
 802b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b7b8:	441a      	add	r2, r3
 802b7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7bc:	4413      	add	r3, r2
 802b7be:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 802b7c2:	3b4f      	subs	r3, #79	; 0x4f
 802b7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7c8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b7cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b7ce:	4413      	add	r3, r2
 802b7d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802b7d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7d6:	405a      	eors	r2, r3
 802b7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7da:	401a      	ands	r2, r3
 802b7dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7de:	405a      	eors	r2, r3
 802b7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b7e2:	441a      	add	r2, r3
 802b7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7e6:	441a      	add	r2, r3
 802b7e8:	4b40      	ldr	r3, [pc, #256]	; (802b8ec <mbedtls_internal_md5_process+0x574>)
 802b7ea:	4413      	add	r3, r2
 802b7ec:	653b      	str	r3, [r7, #80]	; 0x50
 802b7ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7f0:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b7f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b7f6:	4413      	add	r3, r2
 802b7f8:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802b7fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7fe:	405a      	eors	r2, r3
 802b800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b802:	401a      	ands	r2, r3
 802b804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b806:	405a      	eors	r2, r3
 802b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b80a:	441a      	add	r2, r3
 802b80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b80e:	441a      	add	r2, r3
 802b810:	4b37      	ldr	r3, [pc, #220]	; (802b8f0 <mbedtls_internal_md5_process+0x578>)
 802b812:	4413      	add	r3, r2
 802b814:	657b      	str	r3, [r7, #84]	; 0x54
 802b816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b818:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b81c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b81e:	4413      	add	r3, r2
 802b820:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802b822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b826:	405a      	eors	r2, r3
 802b828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b82a:	401a      	ands	r2, r3
 802b82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b82e:	405a      	eors	r2, r3
 802b830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b832:	441a      	add	r2, r3
 802b834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b836:	441a      	add	r2, r3
 802b838:	4b2e      	ldr	r3, [pc, #184]	; (802b8f4 <mbedtls_internal_md5_process+0x57c>)
 802b83a:	4413      	add	r3, r2
 802b83c:	64bb      	str	r3, [r7, #72]	; 0x48
 802b83e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b840:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b846:	4413      	add	r3, r2
 802b848:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802b84a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b84e:	405a      	eors	r2, r3
 802b850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b852:	401a      	ands	r2, r3
 802b854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b856:	405a      	eors	r2, r3
 802b858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b85a:	441a      	add	r2, r3
 802b85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b85e:	441a      	add	r2, r3
 802b860:	4b25      	ldr	r3, [pc, #148]	; (802b8f8 <mbedtls_internal_md5_process+0x580>)
 802b862:	4413      	add	r3, r2
 802b864:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b868:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b86c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b86e:	4413      	add	r3, r2
 802b870:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802b872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b876:	405a      	eors	r2, r3
 802b878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b87a:	401a      	ands	r2, r3
 802b87c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b87e:	405a      	eors	r2, r3
 802b880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b882:	441a      	add	r2, r3
 802b884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b886:	441a      	add	r2, r3
 802b888:	4b1c      	ldr	r3, [pc, #112]	; (802b8fc <mbedtls_internal_md5_process+0x584>)
 802b88a:	4413      	add	r3, r2
 802b88c:	653b      	str	r3, [r7, #80]	; 0x50
 802b88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b890:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b896:	4413      	add	r3, r2
 802b898:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802b89a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b89e:	405a      	eors	r2, r3
 802b8a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8a2:	401a      	ands	r2, r3
 802b8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8a6:	405a      	eors	r2, r3
 802b8a8:	68fb      	ldr	r3, [r7, #12]
 802b8aa:	441a      	add	r2, r3
 802b8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8ae:	441a      	add	r2, r3
 802b8b0:	4b13      	ldr	r3, [pc, #76]	; (802b900 <mbedtls_internal_md5_process+0x588>)
 802b8b2:	4413      	add	r3, r2
 802b8b4:	657b      	str	r3, [r7, #84]	; 0x54
 802b8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8b8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b8bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b8be:	4413      	add	r3, r2
 802b8c0:	e020      	b.n	802b904 <mbedtls_internal_md5_process+0x58c>
 802b8c2:	bf00      	nop
 802b8c4:	d76aa478 	.word	0xd76aa478
 802b8c8:	e8c7b756 	.word	0xe8c7b756
 802b8cc:	242070db 	.word	0x242070db
 802b8d0:	c1bdceee 	.word	0xc1bdceee
 802b8d4:	f57c0faf 	.word	0xf57c0faf
 802b8d8:	4787c62a 	.word	0x4787c62a
 802b8dc:	a8304613 	.word	0xa8304613
 802b8e0:	fd469501 	.word	0xfd469501
 802b8e4:	698098d8 	.word	0x698098d8
 802b8e8:	8b44f7af 	.word	0x8b44f7af
 802b8ec:	895cd7be 	.word	0x895cd7be
 802b8f0:	6b901122 	.word	0x6b901122
 802b8f4:	fd987193 	.word	0xfd987193
 802b8f8:	a679438e 	.word	0xa679438e
 802b8fc:	49b40821 	.word	0x49b40821
 802b900:	f61e2562 	.word	0xf61e2562
 802b904:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802b906:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b90a:	405a      	eors	r2, r3
 802b90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b90e:	401a      	ands	r2, r3
 802b910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b912:	405a      	eors	r2, r3
 802b914:	6a3b      	ldr	r3, [r7, #32]
 802b916:	441a      	add	r2, r3
 802b918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b91a:	441a      	add	r2, r3
 802b91c:	4ba4      	ldr	r3, [pc, #656]	; (802bbb0 <mbedtls_internal_md5_process+0x838>)
 802b91e:	4413      	add	r3, r2
 802b920:	64bb      	str	r3, [r7, #72]	; 0x48
 802b922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b924:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b92a:	4413      	add	r3, r2
 802b92c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802b92e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b932:	405a      	eors	r2, r3
 802b934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b936:	401a      	ands	r2, r3
 802b938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b93a:	405a      	eors	r2, r3
 802b93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b93e:	441a      	add	r2, r3
 802b940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b942:	441a      	add	r2, r3
 802b944:	4b9b      	ldr	r3, [pc, #620]	; (802bbb4 <mbedtls_internal_md5_process+0x83c>)
 802b946:	4413      	add	r3, r2
 802b948:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b94c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b952:	4413      	add	r3, r2
 802b954:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802b956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b95a:	405a      	eors	r2, r3
 802b95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b95e:	401a      	ands	r2, r3
 802b960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b962:	405a      	eors	r2, r3
 802b964:	68bb      	ldr	r3, [r7, #8]
 802b966:	441a      	add	r2, r3
 802b968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b96a:	441a      	add	r2, r3
 802b96c:	4b92      	ldr	r3, [pc, #584]	; (802bbb8 <mbedtls_internal_md5_process+0x840>)
 802b96e:	4413      	add	r3, r2
 802b970:	653b      	str	r3, [r7, #80]	; 0x50
 802b972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b974:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b97a:	4413      	add	r3, r2
 802b97c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802b97e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b982:	405a      	eors	r2, r3
 802b984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b986:	401a      	ands	r2, r3
 802b988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b98a:	405a      	eors	r2, r3
 802b98c:	69fb      	ldr	r3, [r7, #28]
 802b98e:	441a      	add	r2, r3
 802b990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b992:	441a      	add	r2, r3
 802b994:	4b89      	ldr	r3, [pc, #548]	; (802bbbc <mbedtls_internal_md5_process+0x844>)
 802b996:	4413      	add	r3, r2
 802b998:	657b      	str	r3, [r7, #84]	; 0x54
 802b99a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b99c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b9a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9a2:	4413      	add	r3, r2
 802b9a4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802b9a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9aa:	405a      	eors	r2, r3
 802b9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9ae:	401a      	ands	r2, r3
 802b9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9b2:	405a      	eors	r2, r3
 802b9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b9b6:	441a      	add	r2, r3
 802b9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9ba:	441a      	add	r2, r3
 802b9bc:	4b80      	ldr	r3, [pc, #512]	; (802bbc0 <mbedtls_internal_md5_process+0x848>)
 802b9be:	4413      	add	r3, r2
 802b9c0:	64bb      	str	r3, [r7, #72]	; 0x48
 802b9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9c4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b9c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9ca:	4413      	add	r3, r2
 802b9cc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802b9ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9d2:	405a      	eors	r2, r3
 802b9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9d6:	401a      	ands	r2, r3
 802b9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9da:	405a      	eors	r2, r3
 802b9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b9de:	441a      	add	r2, r3
 802b9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9e2:	441a      	add	r2, r3
 802b9e4:	4b77      	ldr	r3, [pc, #476]	; (802bbc4 <mbedtls_internal_md5_process+0x84c>)
 802b9e6:	4413      	add	r3, r2
 802b9e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9ec:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b9f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9f2:	4413      	add	r3, r2
 802b9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802b9f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9fa:	405a      	eors	r2, r3
 802b9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9fe:	401a      	ands	r2, r3
 802ba00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba02:	405a      	eors	r2, r3
 802ba04:	69bb      	ldr	r3, [r7, #24]
 802ba06:	441a      	add	r2, r3
 802ba08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba0a:	441a      	add	r2, r3
 802ba0c:	4b6e      	ldr	r3, [pc, #440]	; (802bbc8 <mbedtls_internal_md5_process+0x850>)
 802ba0e:	4413      	add	r3, r2
 802ba10:	653b      	str	r3, [r7, #80]	; 0x50
 802ba12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba14:	ea4f 3333 	mov.w	r3, r3, ror #12
 802ba18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba1a:	4413      	add	r3, r2
 802ba1c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802ba1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba22:	405a      	eors	r2, r3
 802ba24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba26:	401a      	ands	r2, r3
 802ba28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba2a:	405a      	eors	r2, r3
 802ba2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ba2e:	441a      	add	r2, r3
 802ba30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba32:	441a      	add	r2, r3
 802ba34:	4b65      	ldr	r3, [pc, #404]	; (802bbcc <mbedtls_internal_md5_process+0x854>)
 802ba36:	4413      	add	r3, r2
 802ba38:	657b      	str	r3, [r7, #84]	; 0x54
 802ba3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba3c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802ba40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba42:	4413      	add	r3, r2
 802ba44:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802ba46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba4a:	405a      	eors	r2, r3
 802ba4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba4e:	401a      	ands	r2, r3
 802ba50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba52:	405a      	eors	r2, r3
 802ba54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ba56:	441a      	add	r2, r3
 802ba58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba5a:	441a      	add	r2, r3
 802ba5c:	4b5c      	ldr	r3, [pc, #368]	; (802bbd0 <mbedtls_internal_md5_process+0x858>)
 802ba5e:	4413      	add	r3, r2
 802ba60:	64bb      	str	r3, [r7, #72]	; 0x48
 802ba62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba64:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802ba68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba6a:	4413      	add	r3, r2
 802ba6c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802ba6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba72:	405a      	eors	r2, r3
 802ba74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba76:	401a      	ands	r2, r3
 802ba78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba7a:	405a      	eors	r2, r3
 802ba7c:	697b      	ldr	r3, [r7, #20]
 802ba7e:	441a      	add	r2, r3
 802ba80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba82:	441a      	add	r2, r3
 802ba84:	4b53      	ldr	r3, [pc, #332]	; (802bbd4 <mbedtls_internal_md5_process+0x85c>)
 802ba86:	4413      	add	r3, r2
 802ba88:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ba8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba8c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802ba90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba92:	4413      	add	r3, r2
 802ba94:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802ba96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba9a:	405a      	eors	r2, r3
 802ba9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba9e:	401a      	ands	r2, r3
 802baa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baa2:	405a      	eors	r2, r3
 802baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802baa6:	441a      	add	r2, r3
 802baa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baaa:	441a      	add	r2, r3
 802baac:	4b4a      	ldr	r3, [pc, #296]	; (802bbd8 <mbedtls_internal_md5_process+0x860>)
 802baae:	4413      	add	r3, r2
 802bab0:	653b      	str	r3, [r7, #80]	; 0x50
 802bab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bab4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802baba:	4413      	add	r3, r2
 802babc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802babe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bac2:	405a      	eors	r2, r3
 802bac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bac6:	401a      	ands	r2, r3
 802bac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802baca:	405a      	eors	r2, r3
 802bacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bace:	441a      	add	r2, r3
 802bad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bad2:	441a      	add	r2, r3
 802bad4:	4b41      	ldr	r3, [pc, #260]	; (802bbdc <mbedtls_internal_md5_process+0x864>)
 802bad6:	4413      	add	r3, r2
 802bad8:	657b      	str	r3, [r7, #84]	; 0x54
 802bada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802badc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bae2:	4413      	add	r3, r2
 802bae4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802bae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baea:	405a      	eors	r2, r3
 802baec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802baee:	401a      	ands	r2, r3
 802baf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baf2:	405a      	eors	r2, r3
 802baf4:	693b      	ldr	r3, [r7, #16]
 802baf6:	441a      	add	r2, r3
 802baf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bafa:	441a      	add	r2, r3
 802bafc:	4b38      	ldr	r3, [pc, #224]	; (802bbe0 <mbedtls_internal_md5_process+0x868>)
 802bafe:	4413      	add	r3, r2
 802bb00:	64bb      	str	r3, [r7, #72]	; 0x48
 802bb02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb04:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bb08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb0a:	4413      	add	r3, r2
 802bb0c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802bb0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb12:	405a      	eors	r2, r3
 802bb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb16:	401a      	ands	r2, r3
 802bb18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb1a:	405a      	eors	r2, r3
 802bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bb1e:	441a      	add	r2, r3
 802bb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb22:	441a      	add	r2, r3
 802bb24:	4b2f      	ldr	r3, [pc, #188]	; (802bbe4 <mbedtls_internal_md5_process+0x86c>)
 802bb26:	4413      	add	r3, r2
 802bb28:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb2c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bb30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb32:	4413      	add	r3, r2
 802bb34:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802bb36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb3a:	405a      	eors	r2, r3
 802bb3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb3e:	401a      	ands	r2, r3
 802bb40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb42:	405a      	eors	r2, r3
 802bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bb46:	441a      	add	r2, r3
 802bb48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb4a:	441a      	add	r2, r3
 802bb4c:	4b26      	ldr	r3, [pc, #152]	; (802bbe8 <mbedtls_internal_md5_process+0x870>)
 802bb4e:	4413      	add	r3, r2
 802bb50:	653b      	str	r3, [r7, #80]	; 0x50
 802bb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb54:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bb58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb5a:	4413      	add	r3, r2
 802bb5c:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802bb5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb62:	405a      	eors	r2, r3
 802bb64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb66:	405a      	eors	r2, r3
 802bb68:	69fb      	ldr	r3, [r7, #28]
 802bb6a:	441a      	add	r2, r3
 802bb6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb6e:	4413      	add	r3, r2
 802bb70:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 802bb74:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 802bb78:	657b      	str	r3, [r7, #84]	; 0x54
 802bb7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb7c:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bb80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb82:	4413      	add	r3, r2
 802bb84:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802bb86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb8a:	405a      	eors	r2, r3
 802bb8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb8e:	405a      	eors	r2, r3
 802bb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bb92:	441a      	add	r2, r3
 802bb94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb96:	441a      	add	r2, r3
 802bb98:	4b14      	ldr	r3, [pc, #80]	; (802bbec <mbedtls_internal_md5_process+0x874>)
 802bb9a:	4413      	add	r3, r2
 802bb9c:	64bb      	str	r3, [r7, #72]	; 0x48
 802bb9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bba0:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bba6:	4413      	add	r3, r2
 802bba8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802bbaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbac:	e020      	b.n	802bbf0 <mbedtls_internal_md5_process+0x878>
 802bbae:	bf00      	nop
 802bbb0:	c040b340 	.word	0xc040b340
 802bbb4:	265e5a51 	.word	0x265e5a51
 802bbb8:	e9b6c7aa 	.word	0xe9b6c7aa
 802bbbc:	d62f105d 	.word	0xd62f105d
 802bbc0:	02441453 	.word	0x02441453
 802bbc4:	d8a1e681 	.word	0xd8a1e681
 802bbc8:	e7d3fbc8 	.word	0xe7d3fbc8
 802bbcc:	21e1cde6 	.word	0x21e1cde6
 802bbd0:	c33707d6 	.word	0xc33707d6
 802bbd4:	f4d50d87 	.word	0xf4d50d87
 802bbd8:	455a14ed 	.word	0x455a14ed
 802bbdc:	a9e3e905 	.word	0xa9e3e905
 802bbe0:	fcefa3f8 	.word	0xfcefa3f8
 802bbe4:	676f02d9 	.word	0x676f02d9
 802bbe8:	8d2a4c8a 	.word	0x8d2a4c8a
 802bbec:	8771f681 	.word	0x8771f681
 802bbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbf2:	405a      	eors	r2, r3
 802bbf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbf6:	405a      	eors	r2, r3
 802bbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bbfa:	441a      	add	r2, r3
 802bbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbfe:	441a      	add	r2, r3
 802bc00:	4ba4      	ldr	r3, [pc, #656]	; (802be94 <mbedtls_internal_md5_process+0xb1c>)
 802bc02:	4413      	add	r3, r2
 802bc04:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc08:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bc0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc0e:	4413      	add	r3, r2
 802bc10:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802bc12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc16:	405a      	eors	r2, r3
 802bc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc1a:	405a      	eors	r2, r3
 802bc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bc1e:	441a      	add	r2, r3
 802bc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc22:	441a      	add	r2, r3
 802bc24:	4b9c      	ldr	r3, [pc, #624]	; (802be98 <mbedtls_internal_md5_process+0xb20>)
 802bc26:	4413      	add	r3, r2
 802bc28:	653b      	str	r3, [r7, #80]	; 0x50
 802bc2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc2c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bc30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc32:	4413      	add	r3, r2
 802bc34:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802bc36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc3a:	405a      	eors	r2, r3
 802bc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc3e:	405a      	eors	r2, r3
 802bc40:	68fb      	ldr	r3, [r7, #12]
 802bc42:	441a      	add	r2, r3
 802bc44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc46:	441a      	add	r2, r3
 802bc48:	4b94      	ldr	r3, [pc, #592]	; (802be9c <mbedtls_internal_md5_process+0xb24>)
 802bc4a:	4413      	add	r3, r2
 802bc4c:	657b      	str	r3, [r7, #84]	; 0x54
 802bc4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc50:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bc54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc56:	4413      	add	r3, r2
 802bc58:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802bc5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc5e:	405a      	eors	r2, r3
 802bc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc62:	405a      	eors	r2, r3
 802bc64:	69bb      	ldr	r3, [r7, #24]
 802bc66:	441a      	add	r2, r3
 802bc68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc6a:	441a      	add	r2, r3
 802bc6c:	4b8c      	ldr	r3, [pc, #560]	; (802bea0 <mbedtls_internal_md5_process+0xb28>)
 802bc6e:	4413      	add	r3, r2
 802bc70:	64bb      	str	r3, [r7, #72]	; 0x48
 802bc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc74:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bc78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc7a:	4413      	add	r3, r2
 802bc7c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802bc7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc82:	405a      	eors	r2, r3
 802bc84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc86:	405a      	eors	r2, r3
 802bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc8a:	441a      	add	r2, r3
 802bc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc8e:	441a      	add	r2, r3
 802bc90:	4b84      	ldr	r3, [pc, #528]	; (802bea4 <mbedtls_internal_md5_process+0xb2c>)
 802bc92:	4413      	add	r3, r2
 802bc94:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc98:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bc9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc9e:	4413      	add	r3, r2
 802bca0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802bca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bca6:	405a      	eors	r2, r3
 802bca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcaa:	405a      	eors	r2, r3
 802bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bcae:	441a      	add	r2, r3
 802bcb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcb2:	441a      	add	r2, r3
 802bcb4:	4b7c      	ldr	r3, [pc, #496]	; (802bea8 <mbedtls_internal_md5_process+0xb30>)
 802bcb6:	4413      	add	r3, r2
 802bcb8:	653b      	str	r3, [r7, #80]	; 0x50
 802bcba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcbc:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bcc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bcc2:	4413      	add	r3, r2
 802bcc4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802bcc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bcc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcca:	405a      	eors	r2, r3
 802bccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcce:	405a      	eors	r2, r3
 802bcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bcd2:	441a      	add	r2, r3
 802bcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcd6:	441a      	add	r2, r3
 802bcd8:	4b74      	ldr	r3, [pc, #464]	; (802beac <mbedtls_internal_md5_process+0xb34>)
 802bcda:	4413      	add	r3, r2
 802bcdc:	657b      	str	r3, [r7, #84]	; 0x54
 802bcde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bce0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bce6:	4413      	add	r3, r2
 802bce8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802bcea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcee:	405a      	eors	r2, r3
 802bcf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcf2:	405a      	eors	r2, r3
 802bcf4:	68bb      	ldr	r3, [r7, #8]
 802bcf6:	441a      	add	r2, r3
 802bcf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcfa:	441a      	add	r2, r3
 802bcfc:	4b6c      	ldr	r3, [pc, #432]	; (802beb0 <mbedtls_internal_md5_process+0xb38>)
 802bcfe:	4413      	add	r3, r2
 802bd00:	64bb      	str	r3, [r7, #72]	; 0x48
 802bd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd04:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bd08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd0a:	4413      	add	r3, r2
 802bd0c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802bd0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd12:	405a      	eors	r2, r3
 802bd14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd16:	405a      	eors	r2, r3
 802bd18:	697b      	ldr	r3, [r7, #20]
 802bd1a:	441a      	add	r2, r3
 802bd1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd1e:	441a      	add	r2, r3
 802bd20:	4b64      	ldr	r3, [pc, #400]	; (802beb4 <mbedtls_internal_md5_process+0xb3c>)
 802bd22:	4413      	add	r3, r2
 802bd24:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bd26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd28:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bd2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd2e:	4413      	add	r3, r2
 802bd30:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802bd32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd36:	405a      	eors	r2, r3
 802bd38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd3a:	405a      	eors	r2, r3
 802bd3c:	6a3b      	ldr	r3, [r7, #32]
 802bd3e:	441a      	add	r2, r3
 802bd40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd42:	441a      	add	r2, r3
 802bd44:	4b5c      	ldr	r3, [pc, #368]	; (802beb8 <mbedtls_internal_md5_process+0xb40>)
 802bd46:	4413      	add	r3, r2
 802bd48:	653b      	str	r3, [r7, #80]	; 0x50
 802bd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd4c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bd50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd52:	4413      	add	r3, r2
 802bd54:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802bd56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd5a:	405a      	eors	r2, r3
 802bd5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd5e:	405a      	eors	r2, r3
 802bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bd62:	441a      	add	r2, r3
 802bd64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd66:	441a      	add	r2, r3
 802bd68:	4b54      	ldr	r3, [pc, #336]	; (802bebc <mbedtls_internal_md5_process+0xb44>)
 802bd6a:	4413      	add	r3, r2
 802bd6c:	657b      	str	r3, [r7, #84]	; 0x54
 802bd6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd70:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bd74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd76:	4413      	add	r3, r2
 802bd78:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802bd7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd7e:	405a      	eors	r2, r3
 802bd80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd82:	405a      	eors	r2, r3
 802bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bd86:	441a      	add	r2, r3
 802bd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd8a:	441a      	add	r2, r3
 802bd8c:	4b4c      	ldr	r3, [pc, #304]	; (802bec0 <mbedtls_internal_md5_process+0xb48>)
 802bd8e:	4413      	add	r3, r2
 802bd90:	64bb      	str	r3, [r7, #72]	; 0x48
 802bd92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd94:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bd98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd9a:	4413      	add	r3, r2
 802bd9c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802bd9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bda2:	405a      	eors	r2, r3
 802bda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bda6:	405a      	eors	r2, r3
 802bda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bdaa:	441a      	add	r2, r3
 802bdac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdae:	441a      	add	r2, r3
 802bdb0:	4b44      	ldr	r3, [pc, #272]	; (802bec4 <mbedtls_internal_md5_process+0xb4c>)
 802bdb2:	4413      	add	r3, r2
 802bdb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bdb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdb8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bdbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bdbe:	4413      	add	r3, r2
 802bdc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802bdc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bdc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdc6:	405a      	eors	r2, r3
 802bdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdca:	405a      	eors	r2, r3
 802bdcc:	693b      	ldr	r3, [r7, #16]
 802bdce:	441a      	add	r2, r3
 802bdd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdd2:	441a      	add	r2, r3
 802bdd4:	4b3c      	ldr	r3, [pc, #240]	; (802bec8 <mbedtls_internal_md5_process+0xb50>)
 802bdd6:	4413      	add	r3, r2
 802bdd8:	653b      	str	r3, [r7, #80]	; 0x50
 802bdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bddc:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bde0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bde2:	4413      	add	r3, r2
 802bde4:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802bde6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bde8:	43da      	mvns	r2, r3
 802bdea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdec:	431a      	orrs	r2, r3
 802bdee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdf0:	405a      	eors	r2, r3
 802bdf2:	68bb      	ldr	r3, [r7, #8]
 802bdf4:	441a      	add	r2, r3
 802bdf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdf8:	441a      	add	r2, r3
 802bdfa:	4b34      	ldr	r3, [pc, #208]	; (802becc <mbedtls_internal_md5_process+0xb54>)
 802bdfc:	4413      	add	r3, r2
 802bdfe:	657b      	str	r3, [r7, #84]	; 0x54
 802be00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be02:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802be06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be08:	4413      	add	r3, r2
 802be0a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802be0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be0e:	43da      	mvns	r2, r3
 802be10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be12:	431a      	orrs	r2, r3
 802be14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be16:	405a      	eors	r2, r3
 802be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be1a:	441a      	add	r2, r3
 802be1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be1e:	441a      	add	r2, r3
 802be20:	4b2b      	ldr	r3, [pc, #172]	; (802bed0 <mbedtls_internal_md5_process+0xb58>)
 802be22:	4413      	add	r3, r2
 802be24:	64bb      	str	r3, [r7, #72]	; 0x48
 802be26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be28:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802be2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be2e:	4413      	add	r3, r2
 802be30:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802be32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be34:	43da      	mvns	r2, r3
 802be36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be38:	431a      	orrs	r2, r3
 802be3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be3c:	405a      	eors	r2, r3
 802be3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802be40:	441a      	add	r2, r3
 802be42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be44:	441a      	add	r2, r3
 802be46:	4b23      	ldr	r3, [pc, #140]	; (802bed4 <mbedtls_internal_md5_process+0xb5c>)
 802be48:	4413      	add	r3, r2
 802be4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be4e:	ea4f 4373 	mov.w	r3, r3, ror #17
 802be52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be54:	4413      	add	r3, r2
 802be56:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802be58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be5a:	43da      	mvns	r2, r3
 802be5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be5e:	431a      	orrs	r2, r3
 802be60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be62:	405a      	eors	r2, r3
 802be64:	69fb      	ldr	r3, [r7, #28]
 802be66:	441a      	add	r2, r3
 802be68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be6a:	441a      	add	r2, r3
 802be6c:	4b1a      	ldr	r3, [pc, #104]	; (802bed8 <mbedtls_internal_md5_process+0xb60>)
 802be6e:	4413      	add	r3, r2
 802be70:	653b      	str	r3, [r7, #80]	; 0x50
 802be72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be74:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802be78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be7a:	4413      	add	r3, r2
 802be7c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802be7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be80:	43da      	mvns	r2, r3
 802be82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be84:	431a      	orrs	r2, r3
 802be86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be88:	405a      	eors	r2, r3
 802be8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802be8c:	441a      	add	r2, r3
 802be8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be90:	e024      	b.n	802bedc <mbedtls_internal_md5_process+0xb64>
 802be92:	bf00      	nop
 802be94:	6d9d6122 	.word	0x6d9d6122
 802be98:	fde5380c 	.word	0xfde5380c
 802be9c:	a4beea44 	.word	0xa4beea44
 802bea0:	4bdecfa9 	.word	0x4bdecfa9
 802bea4:	f6bb4b60 	.word	0xf6bb4b60
 802bea8:	bebfbc70 	.word	0xbebfbc70
 802beac:	289b7ec6 	.word	0x289b7ec6
 802beb0:	eaa127fa 	.word	0xeaa127fa
 802beb4:	d4ef3085 	.word	0xd4ef3085
 802beb8:	04881d05 	.word	0x04881d05
 802bebc:	d9d4d039 	.word	0xd9d4d039
 802bec0:	e6db99e5 	.word	0xe6db99e5
 802bec4:	1fa27cf8 	.word	0x1fa27cf8
 802bec8:	c4ac5665 	.word	0xc4ac5665
 802becc:	f4292244 	.word	0xf4292244
 802bed0:	432aff97 	.word	0x432aff97
 802bed4:	ab9423a7 	.word	0xab9423a7
 802bed8:	fc93a039 	.word	0xfc93a039
 802bedc:	441a      	add	r2, r3
 802bede:	4b7d      	ldr	r3, [pc, #500]	; (802c0d4 <mbedtls_internal_md5_process+0xd5c>)
 802bee0:	4413      	add	r3, r2
 802bee2:	657b      	str	r3, [r7, #84]	; 0x54
 802bee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bee6:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802beea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802beec:	4413      	add	r3, r2
 802beee:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802bef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bef2:	43da      	mvns	r2, r3
 802bef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bef6:	431a      	orrs	r2, r3
 802bef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802befa:	405a      	eors	r2, r3
 802befc:	697b      	ldr	r3, [r7, #20]
 802befe:	441a      	add	r2, r3
 802bf00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf02:	441a      	add	r2, r3
 802bf04:	4b74      	ldr	r3, [pc, #464]	; (802c0d8 <mbedtls_internal_md5_process+0xd60>)
 802bf06:	4413      	add	r3, r2
 802bf08:	64bb      	str	r3, [r7, #72]	; 0x48
 802bf0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf0c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bf10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bf12:	4413      	add	r3, r2
 802bf14:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802bf16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf18:	43da      	mvns	r2, r3
 802bf1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf1c:	431a      	orrs	r2, r3
 802bf1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf20:	405a      	eors	r2, r3
 802bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bf24:	441a      	add	r2, r3
 802bf26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf28:	4413      	add	r3, r2
 802bf2a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802bf2e:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 802bf32:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bf34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf36:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bf3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf3c:	4413      	add	r3, r2
 802bf3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802bf40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf42:	43da      	mvns	r2, r3
 802bf44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf46:	431a      	orrs	r2, r3
 802bf48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf4a:	405a      	eors	r2, r3
 802bf4c:	68fb      	ldr	r3, [r7, #12]
 802bf4e:	441a      	add	r2, r3
 802bf50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf52:	441a      	add	r2, r3
 802bf54:	4b61      	ldr	r3, [pc, #388]	; (802c0dc <mbedtls_internal_md5_process+0xd64>)
 802bf56:	4413      	add	r3, r2
 802bf58:	653b      	str	r3, [r7, #80]	; 0x50
 802bf5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf5c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bf60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf62:	4413      	add	r3, r2
 802bf64:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802bf66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf68:	43da      	mvns	r2, r3
 802bf6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf6c:	431a      	orrs	r2, r3
 802bf6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf70:	405a      	eors	r2, r3
 802bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bf74:	441a      	add	r2, r3
 802bf76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf78:	441a      	add	r2, r3
 802bf7a:	4b59      	ldr	r3, [pc, #356]	; (802c0e0 <mbedtls_internal_md5_process+0xd68>)
 802bf7c:	4413      	add	r3, r2
 802bf7e:	657b      	str	r3, [r7, #84]	; 0x54
 802bf80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf82:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bf86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf88:	4413      	add	r3, r2
 802bf8a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802bf8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf8e:	43da      	mvns	r2, r3
 802bf90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf92:	431a      	orrs	r2, r3
 802bf94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf96:	405a      	eors	r2, r3
 802bf98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bf9a:	441a      	add	r2, r3
 802bf9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf9e:	441a      	add	r2, r3
 802bfa0:	4b50      	ldr	r3, [pc, #320]	; (802c0e4 <mbedtls_internal_md5_process+0xd6c>)
 802bfa2:	4413      	add	r3, r2
 802bfa4:	64bb      	str	r3, [r7, #72]	; 0x48
 802bfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfa8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bfac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bfae:	4413      	add	r3, r2
 802bfb0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802bfb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfb4:	43da      	mvns	r2, r3
 802bfb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfb8:	431a      	orrs	r2, r3
 802bfba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfbc:	405a      	eors	r2, r3
 802bfbe:	6a3b      	ldr	r3, [r7, #32]
 802bfc0:	441a      	add	r2, r3
 802bfc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfc4:	441a      	add	r2, r3
 802bfc6:	4b48      	ldr	r3, [pc, #288]	; (802c0e8 <mbedtls_internal_md5_process+0xd70>)
 802bfc8:	4413      	add	r3, r2
 802bfca:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bfcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfce:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bfd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bfd4:	4413      	add	r3, r2
 802bfd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802bfd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfda:	43da      	mvns	r2, r3
 802bfdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfde:	431a      	orrs	r2, r3
 802bfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfe2:	405a      	eors	r2, r3
 802bfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bfe6:	441a      	add	r2, r3
 802bfe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfea:	441a      	add	r2, r3
 802bfec:	4b3f      	ldr	r3, [pc, #252]	; (802c0ec <mbedtls_internal_md5_process+0xd74>)
 802bfee:	4413      	add	r3, r2
 802bff0:	653b      	str	r3, [r7, #80]	; 0x50
 802bff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bff4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bffa:	4413      	add	r3, r2
 802bffc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802bffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c000:	43da      	mvns	r2, r3
 802c002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c004:	431a      	orrs	r2, r3
 802c006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c008:	405a      	eors	r2, r3
 802c00a:	69bb      	ldr	r3, [r7, #24]
 802c00c:	441a      	add	r2, r3
 802c00e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c010:	441a      	add	r2, r3
 802c012:	4b37      	ldr	r3, [pc, #220]	; (802c0f0 <mbedtls_internal_md5_process+0xd78>)
 802c014:	4413      	add	r3, r2
 802c016:	657b      	str	r3, [r7, #84]	; 0x54
 802c018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c01a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c01e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c020:	4413      	add	r3, r2
 802c022:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802c024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c026:	43da      	mvns	r2, r3
 802c028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c02a:	431a      	orrs	r2, r3
 802c02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c02e:	405a      	eors	r2, r3
 802c030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c032:	441a      	add	r2, r3
 802c034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c036:	441a      	add	r2, r3
 802c038:	4b2e      	ldr	r3, [pc, #184]	; (802c0f4 <mbedtls_internal_md5_process+0xd7c>)
 802c03a:	4413      	add	r3, r2
 802c03c:	64bb      	str	r3, [r7, #72]	; 0x48
 802c03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c040:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c046:	4413      	add	r3, r2
 802c048:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802c04a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c04c:	43da      	mvns	r2, r3
 802c04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c050:	431a      	orrs	r2, r3
 802c052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c054:	405a      	eors	r2, r3
 802c056:	693b      	ldr	r3, [r7, #16]
 802c058:	441a      	add	r2, r3
 802c05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c05c:	441a      	add	r2, r3
 802c05e:	4b26      	ldr	r3, [pc, #152]	; (802c0f8 <mbedtls_internal_md5_process+0xd80>)
 802c060:	4413      	add	r3, r2
 802c062:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c066:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c06a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c06c:	4413      	add	r3, r2
 802c06e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802c070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c072:	43da      	mvns	r2, r3
 802c074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c076:	431a      	orrs	r2, r3
 802c078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c07a:	405a      	eors	r2, r3
 802c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c07e:	441a      	add	r2, r3
 802c080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c082:	441a      	add	r2, r3
 802c084:	4b1d      	ldr	r3, [pc, #116]	; (802c0fc <mbedtls_internal_md5_process+0xd84>)
 802c086:	4413      	add	r3, r2
 802c088:	653b      	str	r3, [r7, #80]	; 0x50
 802c08a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c08c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c092:	4413      	add	r3, r2
 802c094:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 802c096:	687b      	ldr	r3, [r7, #4]
 802c098:	689a      	ldr	r2, [r3, #8]
 802c09a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c09c:	441a      	add	r2, r3
 802c09e:	687b      	ldr	r3, [r7, #4]
 802c0a0:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802c0a2:	687b      	ldr	r3, [r7, #4]
 802c0a4:	68da      	ldr	r2, [r3, #12]
 802c0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0a8:	441a      	add	r2, r3
 802c0aa:	687b      	ldr	r3, [r7, #4]
 802c0ac:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802c0ae:	687b      	ldr	r3, [r7, #4]
 802c0b0:	691a      	ldr	r2, [r3, #16]
 802c0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0b4:	441a      	add	r2, r3
 802c0b6:	687b      	ldr	r3, [r7, #4]
 802c0b8:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802c0ba:	687b      	ldr	r3, [r7, #4]
 802c0bc:	695a      	ldr	r2, [r3, #20]
 802c0be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0c0:	441a      	add	r2, r3
 802c0c2:	687b      	ldr	r3, [r7, #4]
 802c0c4:	615a      	str	r2, [r3, #20]

    return( 0 );
 802c0c6:	2300      	movs	r3, #0
}
 802c0c8:	4618      	mov	r0, r3
 802c0ca:	375c      	adds	r7, #92	; 0x5c
 802c0cc:	46bd      	mov	sp, r7
 802c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0d2:	4770      	bx	lr
 802c0d4:	655b59c3 	.word	0x655b59c3
 802c0d8:	8f0ccc92 	.word	0x8f0ccc92
 802c0dc:	85845dd1 	.word	0x85845dd1
 802c0e0:	6fa87e4f 	.word	0x6fa87e4f
 802c0e4:	fe2ce6e0 	.word	0xfe2ce6e0
 802c0e8:	a3014314 	.word	0xa3014314
 802c0ec:	4e0811a1 	.word	0x4e0811a1
 802c0f0:	f7537e82 	.word	0xf7537e82
 802c0f4:	bd3af235 	.word	0xbd3af235
 802c0f8:	2ad7d2bb 	.word	0x2ad7d2bb
 802c0fc:	eb86d391 	.word	0xeb86d391

0802c100 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802c100:	b580      	push	{r7, lr}
 802c102:	b088      	sub	sp, #32
 802c104:	af00      	add	r7, sp, #0
 802c106:	60f8      	str	r0, [r7, #12]
 802c108:	60b9      	str	r1, [r7, #8]
 802c10a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802c10c:	687b      	ldr	r3, [r7, #4]
 802c10e:	2b00      	cmp	r3, #0
 802c110:	d101      	bne.n	802c116 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802c112:	2300      	movs	r3, #0
 802c114:	e065      	b.n	802c1e2 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802c116:	68fb      	ldr	r3, [r7, #12]
 802c118:	681b      	ldr	r3, [r3, #0]
 802c11a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c11e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802c120:	69fb      	ldr	r3, [r7, #28]
 802c122:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c126:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802c128:	68fb      	ldr	r3, [r7, #12]
 802c12a:	681a      	ldr	r2, [r3, #0]
 802c12c:	687b      	ldr	r3, [r7, #4]
 802c12e:	441a      	add	r2, r3
 802c130:	68fb      	ldr	r3, [r7, #12]
 802c132:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802c134:	68fb      	ldr	r3, [r7, #12]
 802c136:	681a      	ldr	r2, [r3, #0]
 802c138:	68fb      	ldr	r3, [r7, #12]
 802c13a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802c13c:	68fb      	ldr	r3, [r7, #12]
 802c13e:	681b      	ldr	r3, [r3, #0]
 802c140:	687a      	ldr	r2, [r7, #4]
 802c142:	429a      	cmp	r2, r3
 802c144:	d904      	bls.n	802c150 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802c146:	68fb      	ldr	r3, [r7, #12]
 802c148:	685b      	ldr	r3, [r3, #4]
 802c14a:	1c5a      	adds	r2, r3, #1
 802c14c:	68fb      	ldr	r3, [r7, #12]
 802c14e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802c150:	69fb      	ldr	r3, [r7, #28]
 802c152:	2b00      	cmp	r3, #0
 802c154:	d034      	beq.n	802c1c0 <mbedtls_md5_update_ret+0xc0>
 802c156:	687a      	ldr	r2, [r7, #4]
 802c158:	69bb      	ldr	r3, [r7, #24]
 802c15a:	429a      	cmp	r2, r3
 802c15c:	d330      	bcc.n	802c1c0 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802c15e:	68fb      	ldr	r3, [r7, #12]
 802c160:	f103 0218 	add.w	r2, r3, #24
 802c164:	69fb      	ldr	r3, [r7, #28]
 802c166:	4413      	add	r3, r2
 802c168:	69ba      	ldr	r2, [r7, #24]
 802c16a:	68b9      	ldr	r1, [r7, #8]
 802c16c:	4618      	mov	r0, r3
 802c16e:	f001 fcea 	bl	802db46 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c172:	68fb      	ldr	r3, [r7, #12]
 802c174:	3318      	adds	r3, #24
 802c176:	4619      	mov	r1, r3
 802c178:	68f8      	ldr	r0, [r7, #12]
 802c17a:	f7ff f8fd 	bl	802b378 <mbedtls_internal_md5_process>
 802c17e:	6178      	str	r0, [r7, #20]
 802c180:	697b      	ldr	r3, [r7, #20]
 802c182:	2b00      	cmp	r3, #0
 802c184:	d001      	beq.n	802c18a <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802c186:	697b      	ldr	r3, [r7, #20]
 802c188:	e02b      	b.n	802c1e2 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802c18a:	68ba      	ldr	r2, [r7, #8]
 802c18c:	69bb      	ldr	r3, [r7, #24]
 802c18e:	4413      	add	r3, r2
 802c190:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802c192:	687a      	ldr	r2, [r7, #4]
 802c194:	69bb      	ldr	r3, [r7, #24]
 802c196:	1ad3      	subs	r3, r2, r3
 802c198:	607b      	str	r3, [r7, #4]
        left = 0;
 802c19a:	2300      	movs	r3, #0
 802c19c:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802c19e:	e00f      	b.n	802c1c0 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802c1a0:	68b9      	ldr	r1, [r7, #8]
 802c1a2:	68f8      	ldr	r0, [r7, #12]
 802c1a4:	f7ff f8e8 	bl	802b378 <mbedtls_internal_md5_process>
 802c1a8:	6178      	str	r0, [r7, #20]
 802c1aa:	697b      	ldr	r3, [r7, #20]
 802c1ac:	2b00      	cmp	r3, #0
 802c1ae:	d001      	beq.n	802c1b4 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802c1b0:	697b      	ldr	r3, [r7, #20]
 802c1b2:	e016      	b.n	802c1e2 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802c1b4:	68bb      	ldr	r3, [r7, #8]
 802c1b6:	3340      	adds	r3, #64	; 0x40
 802c1b8:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802c1ba:	687b      	ldr	r3, [r7, #4]
 802c1bc:	3b40      	subs	r3, #64	; 0x40
 802c1be:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802c1c0:	687b      	ldr	r3, [r7, #4]
 802c1c2:	2b3f      	cmp	r3, #63	; 0x3f
 802c1c4:	d8ec      	bhi.n	802c1a0 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802c1c6:	687b      	ldr	r3, [r7, #4]
 802c1c8:	2b00      	cmp	r3, #0
 802c1ca:	d009      	beq.n	802c1e0 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802c1cc:	68fb      	ldr	r3, [r7, #12]
 802c1ce:	f103 0218 	add.w	r2, r3, #24
 802c1d2:	69fb      	ldr	r3, [r7, #28]
 802c1d4:	4413      	add	r3, r2
 802c1d6:	687a      	ldr	r2, [r7, #4]
 802c1d8:	68b9      	ldr	r1, [r7, #8]
 802c1da:	4618      	mov	r0, r3
 802c1dc:	f001 fcb3 	bl	802db46 <memcpy>
    }

    return( 0 );
 802c1e0:	2300      	movs	r3, #0
}
 802c1e2:	4618      	mov	r0, r3
 802c1e4:	3720      	adds	r7, #32
 802c1e6:	46bd      	mov	sp, r7
 802c1e8:	bd80      	pop	{r7, pc}

0802c1ea <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802c1ea:	b580      	push	{r7, lr}
 802c1ec:	b086      	sub	sp, #24
 802c1ee:	af00      	add	r7, sp, #0
 802c1f0:	6078      	str	r0, [r7, #4]
 802c1f2:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802c1f4:	687b      	ldr	r3, [r7, #4]
 802c1f6:	681b      	ldr	r3, [r3, #0]
 802c1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c1fc:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802c1fe:	697b      	ldr	r3, [r7, #20]
 802c200:	1c5a      	adds	r2, r3, #1
 802c202:	617a      	str	r2, [r7, #20]
 802c204:	687a      	ldr	r2, [r7, #4]
 802c206:	4413      	add	r3, r2
 802c208:	2280      	movs	r2, #128	; 0x80
 802c20a:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802c20c:	697b      	ldr	r3, [r7, #20]
 802c20e:	2b38      	cmp	r3, #56	; 0x38
 802c210:	d80c      	bhi.n	802c22c <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802c212:	687b      	ldr	r3, [r7, #4]
 802c214:	f103 0218 	add.w	r2, r3, #24
 802c218:	697b      	ldr	r3, [r7, #20]
 802c21a:	18d0      	adds	r0, r2, r3
 802c21c:	697b      	ldr	r3, [r7, #20]
 802c21e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802c222:	461a      	mov	r2, r3
 802c224:	2100      	movs	r1, #0
 802c226:	f001 fab9 	bl	802d79c <memset>
 802c22a:	e01e      	b.n	802c26a <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802c22c:	687b      	ldr	r3, [r7, #4]
 802c22e:	f103 0218 	add.w	r2, r3, #24
 802c232:	697b      	ldr	r3, [r7, #20]
 802c234:	18d0      	adds	r0, r2, r3
 802c236:	697b      	ldr	r3, [r7, #20]
 802c238:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c23c:	461a      	mov	r2, r3
 802c23e:	2100      	movs	r1, #0
 802c240:	f001 faac 	bl	802d79c <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c244:	687b      	ldr	r3, [r7, #4]
 802c246:	3318      	adds	r3, #24
 802c248:	4619      	mov	r1, r3
 802c24a:	6878      	ldr	r0, [r7, #4]
 802c24c:	f7ff f894 	bl	802b378 <mbedtls_internal_md5_process>
 802c250:	6138      	str	r0, [r7, #16]
 802c252:	693b      	ldr	r3, [r7, #16]
 802c254:	2b00      	cmp	r3, #0
 802c256:	d001      	beq.n	802c25c <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802c258:	693b      	ldr	r3, [r7, #16]
 802c25a:	e0b8      	b.n	802c3ce <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802c25c:	687b      	ldr	r3, [r7, #4]
 802c25e:	3318      	adds	r3, #24
 802c260:	2238      	movs	r2, #56	; 0x38
 802c262:	2100      	movs	r1, #0
 802c264:	4618      	mov	r0, r3
 802c266:	f001 fa99 	bl	802d79c <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802c26a:	687b      	ldr	r3, [r7, #4]
 802c26c:	681b      	ldr	r3, [r3, #0]
 802c26e:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802c270:	687b      	ldr	r3, [r7, #4]
 802c272:	685b      	ldr	r3, [r3, #4]
 802c274:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802c276:	4313      	orrs	r3, r2
 802c278:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802c27a:	687b      	ldr	r3, [r7, #4]
 802c27c:	681b      	ldr	r3, [r3, #0]
 802c27e:	00db      	lsls	r3, r3, #3
 802c280:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802c282:	68bb      	ldr	r3, [r7, #8]
 802c284:	b2da      	uxtb	r2, r3
 802c286:	687b      	ldr	r3, [r7, #4]
 802c288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802c28c:	68bb      	ldr	r3, [r7, #8]
 802c28e:	0a1b      	lsrs	r3, r3, #8
 802c290:	b2da      	uxtb	r2, r3
 802c292:	687b      	ldr	r3, [r7, #4]
 802c294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 802c298:	68bb      	ldr	r3, [r7, #8]
 802c29a:	0c1b      	lsrs	r3, r3, #16
 802c29c:	b2da      	uxtb	r2, r3
 802c29e:	687b      	ldr	r3, [r7, #4]
 802c2a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 802c2a4:	68bb      	ldr	r3, [r7, #8]
 802c2a6:	0e1b      	lsrs	r3, r3, #24
 802c2a8:	b2da      	uxtb	r2, r3
 802c2aa:	687b      	ldr	r3, [r7, #4]
 802c2ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802c2b0:	68fb      	ldr	r3, [r7, #12]
 802c2b2:	b2da      	uxtb	r2, r3
 802c2b4:	687b      	ldr	r3, [r7, #4]
 802c2b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 802c2ba:	68fb      	ldr	r3, [r7, #12]
 802c2bc:	0a1b      	lsrs	r3, r3, #8
 802c2be:	b2da      	uxtb	r2, r3
 802c2c0:	687b      	ldr	r3, [r7, #4]
 802c2c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 802c2c6:	68fb      	ldr	r3, [r7, #12]
 802c2c8:	0c1b      	lsrs	r3, r3, #16
 802c2ca:	b2da      	uxtb	r2, r3
 802c2cc:	687b      	ldr	r3, [r7, #4]
 802c2ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 802c2d2:	68fb      	ldr	r3, [r7, #12]
 802c2d4:	0e1b      	lsrs	r3, r3, #24
 802c2d6:	b2da      	uxtb	r2, r3
 802c2d8:	687b      	ldr	r3, [r7, #4]
 802c2da:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c2de:	687b      	ldr	r3, [r7, #4]
 802c2e0:	3318      	adds	r3, #24
 802c2e2:	4619      	mov	r1, r3
 802c2e4:	6878      	ldr	r0, [r7, #4]
 802c2e6:	f7ff f847 	bl	802b378 <mbedtls_internal_md5_process>
 802c2ea:	6138      	str	r0, [r7, #16]
 802c2ec:	693b      	ldr	r3, [r7, #16]
 802c2ee:	2b00      	cmp	r3, #0
 802c2f0:	d001      	beq.n	802c2f6 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802c2f2:	693b      	ldr	r3, [r7, #16]
 802c2f4:	e06b      	b.n	802c3ce <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802c2f6:	687b      	ldr	r3, [r7, #4]
 802c2f8:	689b      	ldr	r3, [r3, #8]
 802c2fa:	b2da      	uxtb	r2, r3
 802c2fc:	683b      	ldr	r3, [r7, #0]
 802c2fe:	701a      	strb	r2, [r3, #0]
 802c300:	687b      	ldr	r3, [r7, #4]
 802c302:	689b      	ldr	r3, [r3, #8]
 802c304:	0a1a      	lsrs	r2, r3, #8
 802c306:	683b      	ldr	r3, [r7, #0]
 802c308:	3301      	adds	r3, #1
 802c30a:	b2d2      	uxtb	r2, r2
 802c30c:	701a      	strb	r2, [r3, #0]
 802c30e:	687b      	ldr	r3, [r7, #4]
 802c310:	689b      	ldr	r3, [r3, #8]
 802c312:	0c1a      	lsrs	r2, r3, #16
 802c314:	683b      	ldr	r3, [r7, #0]
 802c316:	3302      	adds	r3, #2
 802c318:	b2d2      	uxtb	r2, r2
 802c31a:	701a      	strb	r2, [r3, #0]
 802c31c:	687b      	ldr	r3, [r7, #4]
 802c31e:	689b      	ldr	r3, [r3, #8]
 802c320:	0e1a      	lsrs	r2, r3, #24
 802c322:	683b      	ldr	r3, [r7, #0]
 802c324:	3303      	adds	r3, #3
 802c326:	b2d2      	uxtb	r2, r2
 802c328:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802c32a:	687b      	ldr	r3, [r7, #4]
 802c32c:	68da      	ldr	r2, [r3, #12]
 802c32e:	683b      	ldr	r3, [r7, #0]
 802c330:	3304      	adds	r3, #4
 802c332:	b2d2      	uxtb	r2, r2
 802c334:	701a      	strb	r2, [r3, #0]
 802c336:	687b      	ldr	r3, [r7, #4]
 802c338:	68db      	ldr	r3, [r3, #12]
 802c33a:	0a1a      	lsrs	r2, r3, #8
 802c33c:	683b      	ldr	r3, [r7, #0]
 802c33e:	3305      	adds	r3, #5
 802c340:	b2d2      	uxtb	r2, r2
 802c342:	701a      	strb	r2, [r3, #0]
 802c344:	687b      	ldr	r3, [r7, #4]
 802c346:	68db      	ldr	r3, [r3, #12]
 802c348:	0c1a      	lsrs	r2, r3, #16
 802c34a:	683b      	ldr	r3, [r7, #0]
 802c34c:	3306      	adds	r3, #6
 802c34e:	b2d2      	uxtb	r2, r2
 802c350:	701a      	strb	r2, [r3, #0]
 802c352:	687b      	ldr	r3, [r7, #4]
 802c354:	68db      	ldr	r3, [r3, #12]
 802c356:	0e1a      	lsrs	r2, r3, #24
 802c358:	683b      	ldr	r3, [r7, #0]
 802c35a:	3307      	adds	r3, #7
 802c35c:	b2d2      	uxtb	r2, r2
 802c35e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802c360:	687b      	ldr	r3, [r7, #4]
 802c362:	691a      	ldr	r2, [r3, #16]
 802c364:	683b      	ldr	r3, [r7, #0]
 802c366:	3308      	adds	r3, #8
 802c368:	b2d2      	uxtb	r2, r2
 802c36a:	701a      	strb	r2, [r3, #0]
 802c36c:	687b      	ldr	r3, [r7, #4]
 802c36e:	691b      	ldr	r3, [r3, #16]
 802c370:	0a1a      	lsrs	r2, r3, #8
 802c372:	683b      	ldr	r3, [r7, #0]
 802c374:	3309      	adds	r3, #9
 802c376:	b2d2      	uxtb	r2, r2
 802c378:	701a      	strb	r2, [r3, #0]
 802c37a:	687b      	ldr	r3, [r7, #4]
 802c37c:	691b      	ldr	r3, [r3, #16]
 802c37e:	0c1a      	lsrs	r2, r3, #16
 802c380:	683b      	ldr	r3, [r7, #0]
 802c382:	330a      	adds	r3, #10
 802c384:	b2d2      	uxtb	r2, r2
 802c386:	701a      	strb	r2, [r3, #0]
 802c388:	687b      	ldr	r3, [r7, #4]
 802c38a:	691b      	ldr	r3, [r3, #16]
 802c38c:	0e1a      	lsrs	r2, r3, #24
 802c38e:	683b      	ldr	r3, [r7, #0]
 802c390:	330b      	adds	r3, #11
 802c392:	b2d2      	uxtb	r2, r2
 802c394:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802c396:	687b      	ldr	r3, [r7, #4]
 802c398:	695a      	ldr	r2, [r3, #20]
 802c39a:	683b      	ldr	r3, [r7, #0]
 802c39c:	330c      	adds	r3, #12
 802c39e:	b2d2      	uxtb	r2, r2
 802c3a0:	701a      	strb	r2, [r3, #0]
 802c3a2:	687b      	ldr	r3, [r7, #4]
 802c3a4:	695b      	ldr	r3, [r3, #20]
 802c3a6:	0a1a      	lsrs	r2, r3, #8
 802c3a8:	683b      	ldr	r3, [r7, #0]
 802c3aa:	330d      	adds	r3, #13
 802c3ac:	b2d2      	uxtb	r2, r2
 802c3ae:	701a      	strb	r2, [r3, #0]
 802c3b0:	687b      	ldr	r3, [r7, #4]
 802c3b2:	695b      	ldr	r3, [r3, #20]
 802c3b4:	0c1a      	lsrs	r2, r3, #16
 802c3b6:	683b      	ldr	r3, [r7, #0]
 802c3b8:	330e      	adds	r3, #14
 802c3ba:	b2d2      	uxtb	r2, r2
 802c3bc:	701a      	strb	r2, [r3, #0]
 802c3be:	687b      	ldr	r3, [r7, #4]
 802c3c0:	695b      	ldr	r3, [r3, #20]
 802c3c2:	0e1a      	lsrs	r2, r3, #24
 802c3c4:	683b      	ldr	r3, [r7, #0]
 802c3c6:	330f      	adds	r3, #15
 802c3c8:	b2d2      	uxtb	r2, r2
 802c3ca:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802c3cc:	2300      	movs	r3, #0
}
 802c3ce:	4618      	mov	r0, r3
 802c3d0:	3718      	adds	r7, #24
 802c3d2:	46bd      	mov	sp, r7
 802c3d4:	bd80      	pop	{r7, pc}
	...

0802c3d8 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802c3d8:	b580      	push	{r7, lr}
 802c3da:	b082      	sub	sp, #8
 802c3dc:	af00      	add	r7, sp, #0
 802c3de:	6078      	str	r0, [r7, #4]
 802c3e0:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802c3e2:	4b05      	ldr	r3, [pc, #20]	; (802c3f8 <mbedtls_platform_zeroize+0x20>)
 802c3e4:	681b      	ldr	r3, [r3, #0]
 802c3e6:	683a      	ldr	r2, [r7, #0]
 802c3e8:	2100      	movs	r1, #0
 802c3ea:	6878      	ldr	r0, [r7, #4]
 802c3ec:	4798      	blx	r3
}
 802c3ee:	bf00      	nop
 802c3f0:	3708      	adds	r7, #8
 802c3f2:	46bd      	mov	sp, r7
 802c3f4:	bd80      	pop	{r7, pc}
 802c3f6:	bf00      	nop
 802c3f8:	2000012c 	.word	0x2000012c

0802c3fc <__assert_func>:
 802c3fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c3fe:	4614      	mov	r4, r2
 802c400:	461a      	mov	r2, r3
 802c402:	4b09      	ldr	r3, [pc, #36]	; (802c428 <__assert_func+0x2c>)
 802c404:	681b      	ldr	r3, [r3, #0]
 802c406:	4605      	mov	r5, r0
 802c408:	68d8      	ldr	r0, [r3, #12]
 802c40a:	b14c      	cbz	r4, 802c420 <__assert_func+0x24>
 802c40c:	4b07      	ldr	r3, [pc, #28]	; (802c42c <__assert_func+0x30>)
 802c40e:	9100      	str	r1, [sp, #0]
 802c410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c414:	4906      	ldr	r1, [pc, #24]	; (802c430 <__assert_func+0x34>)
 802c416:	462b      	mov	r3, r5
 802c418:	f000 fffa 	bl	802d410 <fiprintf>
 802c41c:	f001 fba8 	bl	802db70 <abort>
 802c420:	4b04      	ldr	r3, [pc, #16]	; (802c434 <__assert_func+0x38>)
 802c422:	461c      	mov	r4, r3
 802c424:	e7f3      	b.n	802c40e <__assert_func+0x12>
 802c426:	bf00      	nop
 802c428:	20000188 	.word	0x20000188
 802c42c:	08034914 	.word	0x08034914
 802c430:	08034921 	.word	0x08034921
 802c434:	0803494f 	.word	0x0803494f

0802c438 <_calloc_r>:
 802c438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c43a:	fba1 2402 	umull	r2, r4, r1, r2
 802c43e:	b94c      	cbnz	r4, 802c454 <_calloc_r+0x1c>
 802c440:	4611      	mov	r1, r2
 802c442:	9201      	str	r2, [sp, #4]
 802c444:	f000 f83e 	bl	802c4c4 <_malloc_r>
 802c448:	9a01      	ldr	r2, [sp, #4]
 802c44a:	4605      	mov	r5, r0
 802c44c:	b930      	cbnz	r0, 802c45c <_calloc_r+0x24>
 802c44e:	4628      	mov	r0, r5
 802c450:	b003      	add	sp, #12
 802c452:	bd30      	pop	{r4, r5, pc}
 802c454:	220c      	movs	r2, #12
 802c456:	6002      	str	r2, [r0, #0]
 802c458:	2500      	movs	r5, #0
 802c45a:	e7f8      	b.n	802c44e <_calloc_r+0x16>
 802c45c:	4621      	mov	r1, r4
 802c45e:	f001 f99d 	bl	802d79c <memset>
 802c462:	e7f4      	b.n	802c44e <_calloc_r+0x16>

0802c464 <malloc>:
 802c464:	4b02      	ldr	r3, [pc, #8]	; (802c470 <malloc+0xc>)
 802c466:	4601      	mov	r1, r0
 802c468:	6818      	ldr	r0, [r3, #0]
 802c46a:	f000 b82b 	b.w	802c4c4 <_malloc_r>
 802c46e:	bf00      	nop
 802c470:	20000188 	.word	0x20000188

0802c474 <free>:
 802c474:	4b02      	ldr	r3, [pc, #8]	; (802c480 <free+0xc>)
 802c476:	4601      	mov	r1, r0
 802c478:	6818      	ldr	r0, [r3, #0]
 802c47a:	f002 b9fb 	b.w	802e874 <_free_r>
 802c47e:	bf00      	nop
 802c480:	20000188 	.word	0x20000188

0802c484 <sbrk_aligned>:
 802c484:	b570      	push	{r4, r5, r6, lr}
 802c486:	4e0e      	ldr	r6, [pc, #56]	; (802c4c0 <sbrk_aligned+0x3c>)
 802c488:	460c      	mov	r4, r1
 802c48a:	6831      	ldr	r1, [r6, #0]
 802c48c:	4605      	mov	r5, r0
 802c48e:	b911      	cbnz	r1, 802c496 <sbrk_aligned+0x12>
 802c490:	f001 fb02 	bl	802da98 <_sbrk_r>
 802c494:	6030      	str	r0, [r6, #0]
 802c496:	4621      	mov	r1, r4
 802c498:	4628      	mov	r0, r5
 802c49a:	f001 fafd 	bl	802da98 <_sbrk_r>
 802c49e:	1c43      	adds	r3, r0, #1
 802c4a0:	d00a      	beq.n	802c4b8 <sbrk_aligned+0x34>
 802c4a2:	1cc4      	adds	r4, r0, #3
 802c4a4:	f024 0403 	bic.w	r4, r4, #3
 802c4a8:	42a0      	cmp	r0, r4
 802c4aa:	d007      	beq.n	802c4bc <sbrk_aligned+0x38>
 802c4ac:	1a21      	subs	r1, r4, r0
 802c4ae:	4628      	mov	r0, r5
 802c4b0:	f001 faf2 	bl	802da98 <_sbrk_r>
 802c4b4:	3001      	adds	r0, #1
 802c4b6:	d101      	bne.n	802c4bc <sbrk_aligned+0x38>
 802c4b8:	f04f 34ff 	mov.w	r4, #4294967295
 802c4bc:	4620      	mov	r0, r4
 802c4be:	bd70      	pop	{r4, r5, r6, pc}
 802c4c0:	2000d9ac 	.word	0x2000d9ac

0802c4c4 <_malloc_r>:
 802c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c4c8:	1ccd      	adds	r5, r1, #3
 802c4ca:	f025 0503 	bic.w	r5, r5, #3
 802c4ce:	3508      	adds	r5, #8
 802c4d0:	2d0c      	cmp	r5, #12
 802c4d2:	bf38      	it	cc
 802c4d4:	250c      	movcc	r5, #12
 802c4d6:	2d00      	cmp	r5, #0
 802c4d8:	4607      	mov	r7, r0
 802c4da:	db01      	blt.n	802c4e0 <_malloc_r+0x1c>
 802c4dc:	42a9      	cmp	r1, r5
 802c4de:	d905      	bls.n	802c4ec <_malloc_r+0x28>
 802c4e0:	230c      	movs	r3, #12
 802c4e2:	603b      	str	r3, [r7, #0]
 802c4e4:	2600      	movs	r6, #0
 802c4e6:	4630      	mov	r0, r6
 802c4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c4ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c5c0 <_malloc_r+0xfc>
 802c4f0:	f000 f868 	bl	802c5c4 <__malloc_lock>
 802c4f4:	f8d8 3000 	ldr.w	r3, [r8]
 802c4f8:	461c      	mov	r4, r3
 802c4fa:	bb5c      	cbnz	r4, 802c554 <_malloc_r+0x90>
 802c4fc:	4629      	mov	r1, r5
 802c4fe:	4638      	mov	r0, r7
 802c500:	f7ff ffc0 	bl	802c484 <sbrk_aligned>
 802c504:	1c43      	adds	r3, r0, #1
 802c506:	4604      	mov	r4, r0
 802c508:	d155      	bne.n	802c5b6 <_malloc_r+0xf2>
 802c50a:	f8d8 4000 	ldr.w	r4, [r8]
 802c50e:	4626      	mov	r6, r4
 802c510:	2e00      	cmp	r6, #0
 802c512:	d145      	bne.n	802c5a0 <_malloc_r+0xdc>
 802c514:	2c00      	cmp	r4, #0
 802c516:	d048      	beq.n	802c5aa <_malloc_r+0xe6>
 802c518:	6823      	ldr	r3, [r4, #0]
 802c51a:	4631      	mov	r1, r6
 802c51c:	4638      	mov	r0, r7
 802c51e:	eb04 0903 	add.w	r9, r4, r3
 802c522:	f001 fab9 	bl	802da98 <_sbrk_r>
 802c526:	4581      	cmp	r9, r0
 802c528:	d13f      	bne.n	802c5aa <_malloc_r+0xe6>
 802c52a:	6821      	ldr	r1, [r4, #0]
 802c52c:	1a6d      	subs	r5, r5, r1
 802c52e:	4629      	mov	r1, r5
 802c530:	4638      	mov	r0, r7
 802c532:	f7ff ffa7 	bl	802c484 <sbrk_aligned>
 802c536:	3001      	adds	r0, #1
 802c538:	d037      	beq.n	802c5aa <_malloc_r+0xe6>
 802c53a:	6823      	ldr	r3, [r4, #0]
 802c53c:	442b      	add	r3, r5
 802c53e:	6023      	str	r3, [r4, #0]
 802c540:	f8d8 3000 	ldr.w	r3, [r8]
 802c544:	2b00      	cmp	r3, #0
 802c546:	d038      	beq.n	802c5ba <_malloc_r+0xf6>
 802c548:	685a      	ldr	r2, [r3, #4]
 802c54a:	42a2      	cmp	r2, r4
 802c54c:	d12b      	bne.n	802c5a6 <_malloc_r+0xe2>
 802c54e:	2200      	movs	r2, #0
 802c550:	605a      	str	r2, [r3, #4]
 802c552:	e00f      	b.n	802c574 <_malloc_r+0xb0>
 802c554:	6822      	ldr	r2, [r4, #0]
 802c556:	1b52      	subs	r2, r2, r5
 802c558:	d41f      	bmi.n	802c59a <_malloc_r+0xd6>
 802c55a:	2a0b      	cmp	r2, #11
 802c55c:	d917      	bls.n	802c58e <_malloc_r+0xca>
 802c55e:	1961      	adds	r1, r4, r5
 802c560:	42a3      	cmp	r3, r4
 802c562:	6025      	str	r5, [r4, #0]
 802c564:	bf18      	it	ne
 802c566:	6059      	strne	r1, [r3, #4]
 802c568:	6863      	ldr	r3, [r4, #4]
 802c56a:	bf08      	it	eq
 802c56c:	f8c8 1000 	streq.w	r1, [r8]
 802c570:	5162      	str	r2, [r4, r5]
 802c572:	604b      	str	r3, [r1, #4]
 802c574:	4638      	mov	r0, r7
 802c576:	f104 060b 	add.w	r6, r4, #11
 802c57a:	f000 f829 	bl	802c5d0 <__malloc_unlock>
 802c57e:	f026 0607 	bic.w	r6, r6, #7
 802c582:	1d23      	adds	r3, r4, #4
 802c584:	1af2      	subs	r2, r6, r3
 802c586:	d0ae      	beq.n	802c4e6 <_malloc_r+0x22>
 802c588:	1b9b      	subs	r3, r3, r6
 802c58a:	50a3      	str	r3, [r4, r2]
 802c58c:	e7ab      	b.n	802c4e6 <_malloc_r+0x22>
 802c58e:	42a3      	cmp	r3, r4
 802c590:	6862      	ldr	r2, [r4, #4]
 802c592:	d1dd      	bne.n	802c550 <_malloc_r+0x8c>
 802c594:	f8c8 2000 	str.w	r2, [r8]
 802c598:	e7ec      	b.n	802c574 <_malloc_r+0xb0>
 802c59a:	4623      	mov	r3, r4
 802c59c:	6864      	ldr	r4, [r4, #4]
 802c59e:	e7ac      	b.n	802c4fa <_malloc_r+0x36>
 802c5a0:	4634      	mov	r4, r6
 802c5a2:	6876      	ldr	r6, [r6, #4]
 802c5a4:	e7b4      	b.n	802c510 <_malloc_r+0x4c>
 802c5a6:	4613      	mov	r3, r2
 802c5a8:	e7cc      	b.n	802c544 <_malloc_r+0x80>
 802c5aa:	230c      	movs	r3, #12
 802c5ac:	603b      	str	r3, [r7, #0]
 802c5ae:	4638      	mov	r0, r7
 802c5b0:	f000 f80e 	bl	802c5d0 <__malloc_unlock>
 802c5b4:	e797      	b.n	802c4e6 <_malloc_r+0x22>
 802c5b6:	6025      	str	r5, [r4, #0]
 802c5b8:	e7dc      	b.n	802c574 <_malloc_r+0xb0>
 802c5ba:	605b      	str	r3, [r3, #4]
 802c5bc:	deff      	udf	#255	; 0xff
 802c5be:	bf00      	nop
 802c5c0:	2000d9a8 	.word	0x2000d9a8

0802c5c4 <__malloc_lock>:
 802c5c4:	4801      	ldr	r0, [pc, #4]	; (802c5cc <__malloc_lock+0x8>)
 802c5c6:	f001 bab4 	b.w	802db32 <__retarget_lock_acquire_recursive>
 802c5ca:	bf00      	nop
 802c5cc:	2000daf0 	.word	0x2000daf0

0802c5d0 <__malloc_unlock>:
 802c5d0:	4801      	ldr	r0, [pc, #4]	; (802c5d8 <__malloc_unlock+0x8>)
 802c5d2:	f001 baaf 	b.w	802db34 <__retarget_lock_release_recursive>
 802c5d6:	bf00      	nop
 802c5d8:	2000daf0 	.word	0x2000daf0

0802c5dc <__cvt>:
 802c5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c5e0:	ec55 4b10 	vmov	r4, r5, d0
 802c5e4:	2d00      	cmp	r5, #0
 802c5e6:	460e      	mov	r6, r1
 802c5e8:	4619      	mov	r1, r3
 802c5ea:	462b      	mov	r3, r5
 802c5ec:	bfbb      	ittet	lt
 802c5ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802c5f2:	461d      	movlt	r5, r3
 802c5f4:	2300      	movge	r3, #0
 802c5f6:	232d      	movlt	r3, #45	; 0x2d
 802c5f8:	700b      	strb	r3, [r1, #0]
 802c5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c5fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802c600:	4691      	mov	r9, r2
 802c602:	f023 0820 	bic.w	r8, r3, #32
 802c606:	bfbc      	itt	lt
 802c608:	4622      	movlt	r2, r4
 802c60a:	4614      	movlt	r4, r2
 802c60c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c610:	d005      	beq.n	802c61e <__cvt+0x42>
 802c612:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802c616:	d100      	bne.n	802c61a <__cvt+0x3e>
 802c618:	3601      	adds	r6, #1
 802c61a:	2102      	movs	r1, #2
 802c61c:	e000      	b.n	802c620 <__cvt+0x44>
 802c61e:	2103      	movs	r1, #3
 802c620:	ab03      	add	r3, sp, #12
 802c622:	9301      	str	r3, [sp, #4]
 802c624:	ab02      	add	r3, sp, #8
 802c626:	9300      	str	r3, [sp, #0]
 802c628:	ec45 4b10 	vmov	d0, r4, r5
 802c62c:	4653      	mov	r3, sl
 802c62e:	4632      	mov	r2, r6
 802c630:	f001 fb2e 	bl	802dc90 <_dtoa_r>
 802c634:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802c638:	4607      	mov	r7, r0
 802c63a:	d102      	bne.n	802c642 <__cvt+0x66>
 802c63c:	f019 0f01 	tst.w	r9, #1
 802c640:	d022      	beq.n	802c688 <__cvt+0xac>
 802c642:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c646:	eb07 0906 	add.w	r9, r7, r6
 802c64a:	d110      	bne.n	802c66e <__cvt+0x92>
 802c64c:	783b      	ldrb	r3, [r7, #0]
 802c64e:	2b30      	cmp	r3, #48	; 0x30
 802c650:	d10a      	bne.n	802c668 <__cvt+0x8c>
 802c652:	2200      	movs	r2, #0
 802c654:	2300      	movs	r3, #0
 802c656:	4620      	mov	r0, r4
 802c658:	4629      	mov	r1, r5
 802c65a:	f7e4 fa4d 	bl	8010af8 <__aeabi_dcmpeq>
 802c65e:	b918      	cbnz	r0, 802c668 <__cvt+0x8c>
 802c660:	f1c6 0601 	rsb	r6, r6, #1
 802c664:	f8ca 6000 	str.w	r6, [sl]
 802c668:	f8da 3000 	ldr.w	r3, [sl]
 802c66c:	4499      	add	r9, r3
 802c66e:	2200      	movs	r2, #0
 802c670:	2300      	movs	r3, #0
 802c672:	4620      	mov	r0, r4
 802c674:	4629      	mov	r1, r5
 802c676:	f7e4 fa3f 	bl	8010af8 <__aeabi_dcmpeq>
 802c67a:	b108      	cbz	r0, 802c680 <__cvt+0xa4>
 802c67c:	f8cd 900c 	str.w	r9, [sp, #12]
 802c680:	2230      	movs	r2, #48	; 0x30
 802c682:	9b03      	ldr	r3, [sp, #12]
 802c684:	454b      	cmp	r3, r9
 802c686:	d307      	bcc.n	802c698 <__cvt+0xbc>
 802c688:	9b03      	ldr	r3, [sp, #12]
 802c68a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c68c:	1bdb      	subs	r3, r3, r7
 802c68e:	4638      	mov	r0, r7
 802c690:	6013      	str	r3, [r2, #0]
 802c692:	b004      	add	sp, #16
 802c694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c698:	1c59      	adds	r1, r3, #1
 802c69a:	9103      	str	r1, [sp, #12]
 802c69c:	701a      	strb	r2, [r3, #0]
 802c69e:	e7f0      	b.n	802c682 <__cvt+0xa6>

0802c6a0 <__exponent>:
 802c6a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c6a2:	4603      	mov	r3, r0
 802c6a4:	2900      	cmp	r1, #0
 802c6a6:	bfb8      	it	lt
 802c6a8:	4249      	neglt	r1, r1
 802c6aa:	f803 2b02 	strb.w	r2, [r3], #2
 802c6ae:	bfb4      	ite	lt
 802c6b0:	222d      	movlt	r2, #45	; 0x2d
 802c6b2:	222b      	movge	r2, #43	; 0x2b
 802c6b4:	2909      	cmp	r1, #9
 802c6b6:	7042      	strb	r2, [r0, #1]
 802c6b8:	dd2a      	ble.n	802c710 <__exponent+0x70>
 802c6ba:	f10d 0207 	add.w	r2, sp, #7
 802c6be:	4617      	mov	r7, r2
 802c6c0:	260a      	movs	r6, #10
 802c6c2:	4694      	mov	ip, r2
 802c6c4:	fb91 f5f6 	sdiv	r5, r1, r6
 802c6c8:	fb06 1415 	mls	r4, r6, r5, r1
 802c6cc:	3430      	adds	r4, #48	; 0x30
 802c6ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802c6d2:	460c      	mov	r4, r1
 802c6d4:	2c63      	cmp	r4, #99	; 0x63
 802c6d6:	f102 32ff 	add.w	r2, r2, #4294967295
 802c6da:	4629      	mov	r1, r5
 802c6dc:	dcf1      	bgt.n	802c6c2 <__exponent+0x22>
 802c6de:	3130      	adds	r1, #48	; 0x30
 802c6e0:	f1ac 0402 	sub.w	r4, ip, #2
 802c6e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c6e8:	1c41      	adds	r1, r0, #1
 802c6ea:	4622      	mov	r2, r4
 802c6ec:	42ba      	cmp	r2, r7
 802c6ee:	d30a      	bcc.n	802c706 <__exponent+0x66>
 802c6f0:	f10d 0209 	add.w	r2, sp, #9
 802c6f4:	eba2 020c 	sub.w	r2, r2, ip
 802c6f8:	42bc      	cmp	r4, r7
 802c6fa:	bf88      	it	hi
 802c6fc:	2200      	movhi	r2, #0
 802c6fe:	4413      	add	r3, r2
 802c700:	1a18      	subs	r0, r3, r0
 802c702:	b003      	add	sp, #12
 802c704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c706:	f812 5b01 	ldrb.w	r5, [r2], #1
 802c70a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802c70e:	e7ed      	b.n	802c6ec <__exponent+0x4c>
 802c710:	2330      	movs	r3, #48	; 0x30
 802c712:	3130      	adds	r1, #48	; 0x30
 802c714:	7083      	strb	r3, [r0, #2]
 802c716:	70c1      	strb	r1, [r0, #3]
 802c718:	1d03      	adds	r3, r0, #4
 802c71a:	e7f1      	b.n	802c700 <__exponent+0x60>

0802c71c <_printf_float>:
 802c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c720:	ed2d 8b02 	vpush	{d8}
 802c724:	b08d      	sub	sp, #52	; 0x34
 802c726:	460c      	mov	r4, r1
 802c728:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802c72c:	4616      	mov	r6, r2
 802c72e:	461f      	mov	r7, r3
 802c730:	4605      	mov	r5, r0
 802c732:	f001 f923 	bl	802d97c <_localeconv_r>
 802c736:	f8d0 a000 	ldr.w	sl, [r0]
 802c73a:	4650      	mov	r0, sl
 802c73c:	f7e3 fdb0 	bl	80102a0 <strlen>
 802c740:	2300      	movs	r3, #0
 802c742:	930a      	str	r3, [sp, #40]	; 0x28
 802c744:	6823      	ldr	r3, [r4, #0]
 802c746:	9305      	str	r3, [sp, #20]
 802c748:	f8d8 3000 	ldr.w	r3, [r8]
 802c74c:	f894 b018 	ldrb.w	fp, [r4, #24]
 802c750:	3307      	adds	r3, #7
 802c752:	f023 0307 	bic.w	r3, r3, #7
 802c756:	f103 0208 	add.w	r2, r3, #8
 802c75a:	f8c8 2000 	str.w	r2, [r8]
 802c75e:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c762:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802c766:	9307      	str	r3, [sp, #28]
 802c768:	f8cd 8018 	str.w	r8, [sp, #24]
 802c76c:	ee08 0a10 	vmov	s16, r0
 802c770:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802c774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c778:	4b9e      	ldr	r3, [pc, #632]	; (802c9f4 <_printf_float+0x2d8>)
 802c77a:	f04f 32ff 	mov.w	r2, #4294967295
 802c77e:	f7e4 f9ed 	bl	8010b5c <__aeabi_dcmpun>
 802c782:	bb88      	cbnz	r0, 802c7e8 <_printf_float+0xcc>
 802c784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c788:	4b9a      	ldr	r3, [pc, #616]	; (802c9f4 <_printf_float+0x2d8>)
 802c78a:	f04f 32ff 	mov.w	r2, #4294967295
 802c78e:	f7e4 f9c7 	bl	8010b20 <__aeabi_dcmple>
 802c792:	bb48      	cbnz	r0, 802c7e8 <_printf_float+0xcc>
 802c794:	2200      	movs	r2, #0
 802c796:	2300      	movs	r3, #0
 802c798:	4640      	mov	r0, r8
 802c79a:	4649      	mov	r1, r9
 802c79c:	f7e4 f9b6 	bl	8010b0c <__aeabi_dcmplt>
 802c7a0:	b110      	cbz	r0, 802c7a8 <_printf_float+0x8c>
 802c7a2:	232d      	movs	r3, #45	; 0x2d
 802c7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c7a8:	4a93      	ldr	r2, [pc, #588]	; (802c9f8 <_printf_float+0x2dc>)
 802c7aa:	4b94      	ldr	r3, [pc, #592]	; (802c9fc <_printf_float+0x2e0>)
 802c7ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802c7b0:	bf94      	ite	ls
 802c7b2:	4690      	movls	r8, r2
 802c7b4:	4698      	movhi	r8, r3
 802c7b6:	2303      	movs	r3, #3
 802c7b8:	6123      	str	r3, [r4, #16]
 802c7ba:	9b05      	ldr	r3, [sp, #20]
 802c7bc:	f023 0304 	bic.w	r3, r3, #4
 802c7c0:	6023      	str	r3, [r4, #0]
 802c7c2:	f04f 0900 	mov.w	r9, #0
 802c7c6:	9700      	str	r7, [sp, #0]
 802c7c8:	4633      	mov	r3, r6
 802c7ca:	aa0b      	add	r2, sp, #44	; 0x2c
 802c7cc:	4621      	mov	r1, r4
 802c7ce:	4628      	mov	r0, r5
 802c7d0:	f000 f9da 	bl	802cb88 <_printf_common>
 802c7d4:	3001      	adds	r0, #1
 802c7d6:	f040 8090 	bne.w	802c8fa <_printf_float+0x1de>
 802c7da:	f04f 30ff 	mov.w	r0, #4294967295
 802c7de:	b00d      	add	sp, #52	; 0x34
 802c7e0:	ecbd 8b02 	vpop	{d8}
 802c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c7e8:	4642      	mov	r2, r8
 802c7ea:	464b      	mov	r3, r9
 802c7ec:	4640      	mov	r0, r8
 802c7ee:	4649      	mov	r1, r9
 802c7f0:	f7e4 f9b4 	bl	8010b5c <__aeabi_dcmpun>
 802c7f4:	b140      	cbz	r0, 802c808 <_printf_float+0xec>
 802c7f6:	464b      	mov	r3, r9
 802c7f8:	2b00      	cmp	r3, #0
 802c7fa:	bfbc      	itt	lt
 802c7fc:	232d      	movlt	r3, #45	; 0x2d
 802c7fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802c802:	4a7f      	ldr	r2, [pc, #508]	; (802ca00 <_printf_float+0x2e4>)
 802c804:	4b7f      	ldr	r3, [pc, #508]	; (802ca04 <_printf_float+0x2e8>)
 802c806:	e7d1      	b.n	802c7ac <_printf_float+0x90>
 802c808:	6863      	ldr	r3, [r4, #4]
 802c80a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802c80e:	9206      	str	r2, [sp, #24]
 802c810:	1c5a      	adds	r2, r3, #1
 802c812:	d13f      	bne.n	802c894 <_printf_float+0x178>
 802c814:	2306      	movs	r3, #6
 802c816:	6063      	str	r3, [r4, #4]
 802c818:	9b05      	ldr	r3, [sp, #20]
 802c81a:	6861      	ldr	r1, [r4, #4]
 802c81c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802c820:	2300      	movs	r3, #0
 802c822:	9303      	str	r3, [sp, #12]
 802c824:	ab0a      	add	r3, sp, #40	; 0x28
 802c826:	e9cd b301 	strd	fp, r3, [sp, #4]
 802c82a:	ab09      	add	r3, sp, #36	; 0x24
 802c82c:	ec49 8b10 	vmov	d0, r8, r9
 802c830:	9300      	str	r3, [sp, #0]
 802c832:	6022      	str	r2, [r4, #0]
 802c834:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802c838:	4628      	mov	r0, r5
 802c83a:	f7ff fecf 	bl	802c5dc <__cvt>
 802c83e:	9b06      	ldr	r3, [sp, #24]
 802c840:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c842:	2b47      	cmp	r3, #71	; 0x47
 802c844:	4680      	mov	r8, r0
 802c846:	d108      	bne.n	802c85a <_printf_float+0x13e>
 802c848:	1cc8      	adds	r0, r1, #3
 802c84a:	db02      	blt.n	802c852 <_printf_float+0x136>
 802c84c:	6863      	ldr	r3, [r4, #4]
 802c84e:	4299      	cmp	r1, r3
 802c850:	dd41      	ble.n	802c8d6 <_printf_float+0x1ba>
 802c852:	f1ab 0302 	sub.w	r3, fp, #2
 802c856:	fa5f fb83 	uxtb.w	fp, r3
 802c85a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c85e:	d820      	bhi.n	802c8a2 <_printf_float+0x186>
 802c860:	3901      	subs	r1, #1
 802c862:	465a      	mov	r2, fp
 802c864:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802c868:	9109      	str	r1, [sp, #36]	; 0x24
 802c86a:	f7ff ff19 	bl	802c6a0 <__exponent>
 802c86e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c870:	1813      	adds	r3, r2, r0
 802c872:	2a01      	cmp	r2, #1
 802c874:	4681      	mov	r9, r0
 802c876:	6123      	str	r3, [r4, #16]
 802c878:	dc02      	bgt.n	802c880 <_printf_float+0x164>
 802c87a:	6822      	ldr	r2, [r4, #0]
 802c87c:	07d2      	lsls	r2, r2, #31
 802c87e:	d501      	bpl.n	802c884 <_printf_float+0x168>
 802c880:	3301      	adds	r3, #1
 802c882:	6123      	str	r3, [r4, #16]
 802c884:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802c888:	2b00      	cmp	r3, #0
 802c88a:	d09c      	beq.n	802c7c6 <_printf_float+0xaa>
 802c88c:	232d      	movs	r3, #45	; 0x2d
 802c88e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c892:	e798      	b.n	802c7c6 <_printf_float+0xaa>
 802c894:	9a06      	ldr	r2, [sp, #24]
 802c896:	2a47      	cmp	r2, #71	; 0x47
 802c898:	d1be      	bne.n	802c818 <_printf_float+0xfc>
 802c89a:	2b00      	cmp	r3, #0
 802c89c:	d1bc      	bne.n	802c818 <_printf_float+0xfc>
 802c89e:	2301      	movs	r3, #1
 802c8a0:	e7b9      	b.n	802c816 <_printf_float+0xfa>
 802c8a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802c8a6:	d118      	bne.n	802c8da <_printf_float+0x1be>
 802c8a8:	2900      	cmp	r1, #0
 802c8aa:	6863      	ldr	r3, [r4, #4]
 802c8ac:	dd0b      	ble.n	802c8c6 <_printf_float+0x1aa>
 802c8ae:	6121      	str	r1, [r4, #16]
 802c8b0:	b913      	cbnz	r3, 802c8b8 <_printf_float+0x19c>
 802c8b2:	6822      	ldr	r2, [r4, #0]
 802c8b4:	07d0      	lsls	r0, r2, #31
 802c8b6:	d502      	bpl.n	802c8be <_printf_float+0x1a2>
 802c8b8:	3301      	adds	r3, #1
 802c8ba:	440b      	add	r3, r1
 802c8bc:	6123      	str	r3, [r4, #16]
 802c8be:	65a1      	str	r1, [r4, #88]	; 0x58
 802c8c0:	f04f 0900 	mov.w	r9, #0
 802c8c4:	e7de      	b.n	802c884 <_printf_float+0x168>
 802c8c6:	b913      	cbnz	r3, 802c8ce <_printf_float+0x1b2>
 802c8c8:	6822      	ldr	r2, [r4, #0]
 802c8ca:	07d2      	lsls	r2, r2, #31
 802c8cc:	d501      	bpl.n	802c8d2 <_printf_float+0x1b6>
 802c8ce:	3302      	adds	r3, #2
 802c8d0:	e7f4      	b.n	802c8bc <_printf_float+0x1a0>
 802c8d2:	2301      	movs	r3, #1
 802c8d4:	e7f2      	b.n	802c8bc <_printf_float+0x1a0>
 802c8d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802c8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c8dc:	4299      	cmp	r1, r3
 802c8de:	db05      	blt.n	802c8ec <_printf_float+0x1d0>
 802c8e0:	6823      	ldr	r3, [r4, #0]
 802c8e2:	6121      	str	r1, [r4, #16]
 802c8e4:	07d8      	lsls	r0, r3, #31
 802c8e6:	d5ea      	bpl.n	802c8be <_printf_float+0x1a2>
 802c8e8:	1c4b      	adds	r3, r1, #1
 802c8ea:	e7e7      	b.n	802c8bc <_printf_float+0x1a0>
 802c8ec:	2900      	cmp	r1, #0
 802c8ee:	bfd4      	ite	le
 802c8f0:	f1c1 0202 	rsble	r2, r1, #2
 802c8f4:	2201      	movgt	r2, #1
 802c8f6:	4413      	add	r3, r2
 802c8f8:	e7e0      	b.n	802c8bc <_printf_float+0x1a0>
 802c8fa:	6823      	ldr	r3, [r4, #0]
 802c8fc:	055a      	lsls	r2, r3, #21
 802c8fe:	d407      	bmi.n	802c910 <_printf_float+0x1f4>
 802c900:	6923      	ldr	r3, [r4, #16]
 802c902:	4642      	mov	r2, r8
 802c904:	4631      	mov	r1, r6
 802c906:	4628      	mov	r0, r5
 802c908:	47b8      	blx	r7
 802c90a:	3001      	adds	r0, #1
 802c90c:	d12c      	bne.n	802c968 <_printf_float+0x24c>
 802c90e:	e764      	b.n	802c7da <_printf_float+0xbe>
 802c910:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c914:	f240 80e0 	bls.w	802cad8 <_printf_float+0x3bc>
 802c918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802c91c:	2200      	movs	r2, #0
 802c91e:	2300      	movs	r3, #0
 802c920:	f7e4 f8ea 	bl	8010af8 <__aeabi_dcmpeq>
 802c924:	2800      	cmp	r0, #0
 802c926:	d034      	beq.n	802c992 <_printf_float+0x276>
 802c928:	4a37      	ldr	r2, [pc, #220]	; (802ca08 <_printf_float+0x2ec>)
 802c92a:	2301      	movs	r3, #1
 802c92c:	4631      	mov	r1, r6
 802c92e:	4628      	mov	r0, r5
 802c930:	47b8      	blx	r7
 802c932:	3001      	adds	r0, #1
 802c934:	f43f af51 	beq.w	802c7da <_printf_float+0xbe>
 802c938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c93c:	429a      	cmp	r2, r3
 802c93e:	db02      	blt.n	802c946 <_printf_float+0x22a>
 802c940:	6823      	ldr	r3, [r4, #0]
 802c942:	07d8      	lsls	r0, r3, #31
 802c944:	d510      	bpl.n	802c968 <_printf_float+0x24c>
 802c946:	ee18 3a10 	vmov	r3, s16
 802c94a:	4652      	mov	r2, sl
 802c94c:	4631      	mov	r1, r6
 802c94e:	4628      	mov	r0, r5
 802c950:	47b8      	blx	r7
 802c952:	3001      	adds	r0, #1
 802c954:	f43f af41 	beq.w	802c7da <_printf_float+0xbe>
 802c958:	f04f 0800 	mov.w	r8, #0
 802c95c:	f104 091a 	add.w	r9, r4, #26
 802c960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c962:	3b01      	subs	r3, #1
 802c964:	4543      	cmp	r3, r8
 802c966:	dc09      	bgt.n	802c97c <_printf_float+0x260>
 802c968:	6823      	ldr	r3, [r4, #0]
 802c96a:	079b      	lsls	r3, r3, #30
 802c96c:	f100 8107 	bmi.w	802cb7e <_printf_float+0x462>
 802c970:	68e0      	ldr	r0, [r4, #12]
 802c972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c974:	4298      	cmp	r0, r3
 802c976:	bfb8      	it	lt
 802c978:	4618      	movlt	r0, r3
 802c97a:	e730      	b.n	802c7de <_printf_float+0xc2>
 802c97c:	2301      	movs	r3, #1
 802c97e:	464a      	mov	r2, r9
 802c980:	4631      	mov	r1, r6
 802c982:	4628      	mov	r0, r5
 802c984:	47b8      	blx	r7
 802c986:	3001      	adds	r0, #1
 802c988:	f43f af27 	beq.w	802c7da <_printf_float+0xbe>
 802c98c:	f108 0801 	add.w	r8, r8, #1
 802c990:	e7e6      	b.n	802c960 <_printf_float+0x244>
 802c992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c994:	2b00      	cmp	r3, #0
 802c996:	dc39      	bgt.n	802ca0c <_printf_float+0x2f0>
 802c998:	4a1b      	ldr	r2, [pc, #108]	; (802ca08 <_printf_float+0x2ec>)
 802c99a:	2301      	movs	r3, #1
 802c99c:	4631      	mov	r1, r6
 802c99e:	4628      	mov	r0, r5
 802c9a0:	47b8      	blx	r7
 802c9a2:	3001      	adds	r0, #1
 802c9a4:	f43f af19 	beq.w	802c7da <_printf_float+0xbe>
 802c9a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802c9ac:	4313      	orrs	r3, r2
 802c9ae:	d102      	bne.n	802c9b6 <_printf_float+0x29a>
 802c9b0:	6823      	ldr	r3, [r4, #0]
 802c9b2:	07d9      	lsls	r1, r3, #31
 802c9b4:	d5d8      	bpl.n	802c968 <_printf_float+0x24c>
 802c9b6:	ee18 3a10 	vmov	r3, s16
 802c9ba:	4652      	mov	r2, sl
 802c9bc:	4631      	mov	r1, r6
 802c9be:	4628      	mov	r0, r5
 802c9c0:	47b8      	blx	r7
 802c9c2:	3001      	adds	r0, #1
 802c9c4:	f43f af09 	beq.w	802c7da <_printf_float+0xbe>
 802c9c8:	f04f 0900 	mov.w	r9, #0
 802c9cc:	f104 0a1a 	add.w	sl, r4, #26
 802c9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c9d2:	425b      	negs	r3, r3
 802c9d4:	454b      	cmp	r3, r9
 802c9d6:	dc01      	bgt.n	802c9dc <_printf_float+0x2c0>
 802c9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c9da:	e792      	b.n	802c902 <_printf_float+0x1e6>
 802c9dc:	2301      	movs	r3, #1
 802c9de:	4652      	mov	r2, sl
 802c9e0:	4631      	mov	r1, r6
 802c9e2:	4628      	mov	r0, r5
 802c9e4:	47b8      	blx	r7
 802c9e6:	3001      	adds	r0, #1
 802c9e8:	f43f aef7 	beq.w	802c7da <_printf_float+0xbe>
 802c9ec:	f109 0901 	add.w	r9, r9, #1
 802c9f0:	e7ee      	b.n	802c9d0 <_printf_float+0x2b4>
 802c9f2:	bf00      	nop
 802c9f4:	7fefffff 	.word	0x7fefffff
 802c9f8:	08034950 	.word	0x08034950
 802c9fc:	08034954 	.word	0x08034954
 802ca00:	08034958 	.word	0x08034958
 802ca04:	0803495c 	.word	0x0803495c
 802ca08:	08034d40 	.word	0x08034d40
 802ca0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ca0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802ca10:	429a      	cmp	r2, r3
 802ca12:	bfa8      	it	ge
 802ca14:	461a      	movge	r2, r3
 802ca16:	2a00      	cmp	r2, #0
 802ca18:	4691      	mov	r9, r2
 802ca1a:	dc37      	bgt.n	802ca8c <_printf_float+0x370>
 802ca1c:	f04f 0b00 	mov.w	fp, #0
 802ca20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802ca24:	f104 021a 	add.w	r2, r4, #26
 802ca28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802ca2a:	9305      	str	r3, [sp, #20]
 802ca2c:	eba3 0309 	sub.w	r3, r3, r9
 802ca30:	455b      	cmp	r3, fp
 802ca32:	dc33      	bgt.n	802ca9c <_printf_float+0x380>
 802ca34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802ca38:	429a      	cmp	r2, r3
 802ca3a:	db3b      	blt.n	802cab4 <_printf_float+0x398>
 802ca3c:	6823      	ldr	r3, [r4, #0]
 802ca3e:	07da      	lsls	r2, r3, #31
 802ca40:	d438      	bmi.n	802cab4 <_printf_float+0x398>
 802ca42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802ca46:	eba2 0903 	sub.w	r9, r2, r3
 802ca4a:	9b05      	ldr	r3, [sp, #20]
 802ca4c:	1ad2      	subs	r2, r2, r3
 802ca4e:	4591      	cmp	r9, r2
 802ca50:	bfa8      	it	ge
 802ca52:	4691      	movge	r9, r2
 802ca54:	f1b9 0f00 	cmp.w	r9, #0
 802ca58:	dc35      	bgt.n	802cac6 <_printf_float+0x3aa>
 802ca5a:	f04f 0800 	mov.w	r8, #0
 802ca5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802ca62:	f104 0a1a 	add.w	sl, r4, #26
 802ca66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802ca6a:	1a9b      	subs	r3, r3, r2
 802ca6c:	eba3 0309 	sub.w	r3, r3, r9
 802ca70:	4543      	cmp	r3, r8
 802ca72:	f77f af79 	ble.w	802c968 <_printf_float+0x24c>
 802ca76:	2301      	movs	r3, #1
 802ca78:	4652      	mov	r2, sl
 802ca7a:	4631      	mov	r1, r6
 802ca7c:	4628      	mov	r0, r5
 802ca7e:	47b8      	blx	r7
 802ca80:	3001      	adds	r0, #1
 802ca82:	f43f aeaa 	beq.w	802c7da <_printf_float+0xbe>
 802ca86:	f108 0801 	add.w	r8, r8, #1
 802ca8a:	e7ec      	b.n	802ca66 <_printf_float+0x34a>
 802ca8c:	4613      	mov	r3, r2
 802ca8e:	4631      	mov	r1, r6
 802ca90:	4642      	mov	r2, r8
 802ca92:	4628      	mov	r0, r5
 802ca94:	47b8      	blx	r7
 802ca96:	3001      	adds	r0, #1
 802ca98:	d1c0      	bne.n	802ca1c <_printf_float+0x300>
 802ca9a:	e69e      	b.n	802c7da <_printf_float+0xbe>
 802ca9c:	2301      	movs	r3, #1
 802ca9e:	4631      	mov	r1, r6
 802caa0:	4628      	mov	r0, r5
 802caa2:	9205      	str	r2, [sp, #20]
 802caa4:	47b8      	blx	r7
 802caa6:	3001      	adds	r0, #1
 802caa8:	f43f ae97 	beq.w	802c7da <_printf_float+0xbe>
 802caac:	9a05      	ldr	r2, [sp, #20]
 802caae:	f10b 0b01 	add.w	fp, fp, #1
 802cab2:	e7b9      	b.n	802ca28 <_printf_float+0x30c>
 802cab4:	ee18 3a10 	vmov	r3, s16
 802cab8:	4652      	mov	r2, sl
 802caba:	4631      	mov	r1, r6
 802cabc:	4628      	mov	r0, r5
 802cabe:	47b8      	blx	r7
 802cac0:	3001      	adds	r0, #1
 802cac2:	d1be      	bne.n	802ca42 <_printf_float+0x326>
 802cac4:	e689      	b.n	802c7da <_printf_float+0xbe>
 802cac6:	9a05      	ldr	r2, [sp, #20]
 802cac8:	464b      	mov	r3, r9
 802caca:	4442      	add	r2, r8
 802cacc:	4631      	mov	r1, r6
 802cace:	4628      	mov	r0, r5
 802cad0:	47b8      	blx	r7
 802cad2:	3001      	adds	r0, #1
 802cad4:	d1c1      	bne.n	802ca5a <_printf_float+0x33e>
 802cad6:	e680      	b.n	802c7da <_printf_float+0xbe>
 802cad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cada:	2a01      	cmp	r2, #1
 802cadc:	dc01      	bgt.n	802cae2 <_printf_float+0x3c6>
 802cade:	07db      	lsls	r3, r3, #31
 802cae0:	d53a      	bpl.n	802cb58 <_printf_float+0x43c>
 802cae2:	2301      	movs	r3, #1
 802cae4:	4642      	mov	r2, r8
 802cae6:	4631      	mov	r1, r6
 802cae8:	4628      	mov	r0, r5
 802caea:	47b8      	blx	r7
 802caec:	3001      	adds	r0, #1
 802caee:	f43f ae74 	beq.w	802c7da <_printf_float+0xbe>
 802caf2:	ee18 3a10 	vmov	r3, s16
 802caf6:	4652      	mov	r2, sl
 802caf8:	4631      	mov	r1, r6
 802cafa:	4628      	mov	r0, r5
 802cafc:	47b8      	blx	r7
 802cafe:	3001      	adds	r0, #1
 802cb00:	f43f ae6b 	beq.w	802c7da <_printf_float+0xbe>
 802cb04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802cb08:	2200      	movs	r2, #0
 802cb0a:	2300      	movs	r3, #0
 802cb0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802cb10:	f7e3 fff2 	bl	8010af8 <__aeabi_dcmpeq>
 802cb14:	b9d8      	cbnz	r0, 802cb4e <_printf_float+0x432>
 802cb16:	f10a 33ff 	add.w	r3, sl, #4294967295
 802cb1a:	f108 0201 	add.w	r2, r8, #1
 802cb1e:	4631      	mov	r1, r6
 802cb20:	4628      	mov	r0, r5
 802cb22:	47b8      	blx	r7
 802cb24:	3001      	adds	r0, #1
 802cb26:	d10e      	bne.n	802cb46 <_printf_float+0x42a>
 802cb28:	e657      	b.n	802c7da <_printf_float+0xbe>
 802cb2a:	2301      	movs	r3, #1
 802cb2c:	4652      	mov	r2, sl
 802cb2e:	4631      	mov	r1, r6
 802cb30:	4628      	mov	r0, r5
 802cb32:	47b8      	blx	r7
 802cb34:	3001      	adds	r0, #1
 802cb36:	f43f ae50 	beq.w	802c7da <_printf_float+0xbe>
 802cb3a:	f108 0801 	add.w	r8, r8, #1
 802cb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cb40:	3b01      	subs	r3, #1
 802cb42:	4543      	cmp	r3, r8
 802cb44:	dcf1      	bgt.n	802cb2a <_printf_float+0x40e>
 802cb46:	464b      	mov	r3, r9
 802cb48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802cb4c:	e6da      	b.n	802c904 <_printf_float+0x1e8>
 802cb4e:	f04f 0800 	mov.w	r8, #0
 802cb52:	f104 0a1a 	add.w	sl, r4, #26
 802cb56:	e7f2      	b.n	802cb3e <_printf_float+0x422>
 802cb58:	2301      	movs	r3, #1
 802cb5a:	4642      	mov	r2, r8
 802cb5c:	e7df      	b.n	802cb1e <_printf_float+0x402>
 802cb5e:	2301      	movs	r3, #1
 802cb60:	464a      	mov	r2, r9
 802cb62:	4631      	mov	r1, r6
 802cb64:	4628      	mov	r0, r5
 802cb66:	47b8      	blx	r7
 802cb68:	3001      	adds	r0, #1
 802cb6a:	f43f ae36 	beq.w	802c7da <_printf_float+0xbe>
 802cb6e:	f108 0801 	add.w	r8, r8, #1
 802cb72:	68e3      	ldr	r3, [r4, #12]
 802cb74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802cb76:	1a5b      	subs	r3, r3, r1
 802cb78:	4543      	cmp	r3, r8
 802cb7a:	dcf0      	bgt.n	802cb5e <_printf_float+0x442>
 802cb7c:	e6f8      	b.n	802c970 <_printf_float+0x254>
 802cb7e:	f04f 0800 	mov.w	r8, #0
 802cb82:	f104 0919 	add.w	r9, r4, #25
 802cb86:	e7f4      	b.n	802cb72 <_printf_float+0x456>

0802cb88 <_printf_common>:
 802cb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cb8c:	4616      	mov	r6, r2
 802cb8e:	4699      	mov	r9, r3
 802cb90:	688a      	ldr	r2, [r1, #8]
 802cb92:	690b      	ldr	r3, [r1, #16]
 802cb94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802cb98:	4293      	cmp	r3, r2
 802cb9a:	bfb8      	it	lt
 802cb9c:	4613      	movlt	r3, r2
 802cb9e:	6033      	str	r3, [r6, #0]
 802cba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802cba4:	4607      	mov	r7, r0
 802cba6:	460c      	mov	r4, r1
 802cba8:	b10a      	cbz	r2, 802cbae <_printf_common+0x26>
 802cbaa:	3301      	adds	r3, #1
 802cbac:	6033      	str	r3, [r6, #0]
 802cbae:	6823      	ldr	r3, [r4, #0]
 802cbb0:	0699      	lsls	r1, r3, #26
 802cbb2:	bf42      	ittt	mi
 802cbb4:	6833      	ldrmi	r3, [r6, #0]
 802cbb6:	3302      	addmi	r3, #2
 802cbb8:	6033      	strmi	r3, [r6, #0]
 802cbba:	6825      	ldr	r5, [r4, #0]
 802cbbc:	f015 0506 	ands.w	r5, r5, #6
 802cbc0:	d106      	bne.n	802cbd0 <_printf_common+0x48>
 802cbc2:	f104 0a19 	add.w	sl, r4, #25
 802cbc6:	68e3      	ldr	r3, [r4, #12]
 802cbc8:	6832      	ldr	r2, [r6, #0]
 802cbca:	1a9b      	subs	r3, r3, r2
 802cbcc:	42ab      	cmp	r3, r5
 802cbce:	dc26      	bgt.n	802cc1e <_printf_common+0x96>
 802cbd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cbd4:	1e13      	subs	r3, r2, #0
 802cbd6:	6822      	ldr	r2, [r4, #0]
 802cbd8:	bf18      	it	ne
 802cbda:	2301      	movne	r3, #1
 802cbdc:	0692      	lsls	r2, r2, #26
 802cbde:	d42b      	bmi.n	802cc38 <_printf_common+0xb0>
 802cbe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cbe4:	4649      	mov	r1, r9
 802cbe6:	4638      	mov	r0, r7
 802cbe8:	47c0      	blx	r8
 802cbea:	3001      	adds	r0, #1
 802cbec:	d01e      	beq.n	802cc2c <_printf_common+0xa4>
 802cbee:	6823      	ldr	r3, [r4, #0]
 802cbf0:	6922      	ldr	r2, [r4, #16]
 802cbf2:	f003 0306 	and.w	r3, r3, #6
 802cbf6:	2b04      	cmp	r3, #4
 802cbf8:	bf02      	ittt	eq
 802cbfa:	68e5      	ldreq	r5, [r4, #12]
 802cbfc:	6833      	ldreq	r3, [r6, #0]
 802cbfe:	1aed      	subeq	r5, r5, r3
 802cc00:	68a3      	ldr	r3, [r4, #8]
 802cc02:	bf0c      	ite	eq
 802cc04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cc08:	2500      	movne	r5, #0
 802cc0a:	4293      	cmp	r3, r2
 802cc0c:	bfc4      	itt	gt
 802cc0e:	1a9b      	subgt	r3, r3, r2
 802cc10:	18ed      	addgt	r5, r5, r3
 802cc12:	2600      	movs	r6, #0
 802cc14:	341a      	adds	r4, #26
 802cc16:	42b5      	cmp	r5, r6
 802cc18:	d11a      	bne.n	802cc50 <_printf_common+0xc8>
 802cc1a:	2000      	movs	r0, #0
 802cc1c:	e008      	b.n	802cc30 <_printf_common+0xa8>
 802cc1e:	2301      	movs	r3, #1
 802cc20:	4652      	mov	r2, sl
 802cc22:	4649      	mov	r1, r9
 802cc24:	4638      	mov	r0, r7
 802cc26:	47c0      	blx	r8
 802cc28:	3001      	adds	r0, #1
 802cc2a:	d103      	bne.n	802cc34 <_printf_common+0xac>
 802cc2c:	f04f 30ff 	mov.w	r0, #4294967295
 802cc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cc34:	3501      	adds	r5, #1
 802cc36:	e7c6      	b.n	802cbc6 <_printf_common+0x3e>
 802cc38:	18e1      	adds	r1, r4, r3
 802cc3a:	1c5a      	adds	r2, r3, #1
 802cc3c:	2030      	movs	r0, #48	; 0x30
 802cc3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cc42:	4422      	add	r2, r4
 802cc44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cc48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cc4c:	3302      	adds	r3, #2
 802cc4e:	e7c7      	b.n	802cbe0 <_printf_common+0x58>
 802cc50:	2301      	movs	r3, #1
 802cc52:	4622      	mov	r2, r4
 802cc54:	4649      	mov	r1, r9
 802cc56:	4638      	mov	r0, r7
 802cc58:	47c0      	blx	r8
 802cc5a:	3001      	adds	r0, #1
 802cc5c:	d0e6      	beq.n	802cc2c <_printf_common+0xa4>
 802cc5e:	3601      	adds	r6, #1
 802cc60:	e7d9      	b.n	802cc16 <_printf_common+0x8e>
	...

0802cc64 <_printf_i>:
 802cc64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cc68:	7e0f      	ldrb	r7, [r1, #24]
 802cc6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802cc6c:	2f78      	cmp	r7, #120	; 0x78
 802cc6e:	4691      	mov	r9, r2
 802cc70:	4680      	mov	r8, r0
 802cc72:	460c      	mov	r4, r1
 802cc74:	469a      	mov	sl, r3
 802cc76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802cc7a:	d807      	bhi.n	802cc8c <_printf_i+0x28>
 802cc7c:	2f62      	cmp	r7, #98	; 0x62
 802cc7e:	d80a      	bhi.n	802cc96 <_printf_i+0x32>
 802cc80:	2f00      	cmp	r7, #0
 802cc82:	f000 80d4 	beq.w	802ce2e <_printf_i+0x1ca>
 802cc86:	2f58      	cmp	r7, #88	; 0x58
 802cc88:	f000 80c0 	beq.w	802ce0c <_printf_i+0x1a8>
 802cc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cc90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802cc94:	e03a      	b.n	802cd0c <_printf_i+0xa8>
 802cc96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802cc9a:	2b15      	cmp	r3, #21
 802cc9c:	d8f6      	bhi.n	802cc8c <_printf_i+0x28>
 802cc9e:	a101      	add	r1, pc, #4	; (adr r1, 802cca4 <_printf_i+0x40>)
 802cca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802cca4:	0802ccfd 	.word	0x0802ccfd
 802cca8:	0802cd11 	.word	0x0802cd11
 802ccac:	0802cc8d 	.word	0x0802cc8d
 802ccb0:	0802cc8d 	.word	0x0802cc8d
 802ccb4:	0802cc8d 	.word	0x0802cc8d
 802ccb8:	0802cc8d 	.word	0x0802cc8d
 802ccbc:	0802cd11 	.word	0x0802cd11
 802ccc0:	0802cc8d 	.word	0x0802cc8d
 802ccc4:	0802cc8d 	.word	0x0802cc8d
 802ccc8:	0802cc8d 	.word	0x0802cc8d
 802cccc:	0802cc8d 	.word	0x0802cc8d
 802ccd0:	0802ce15 	.word	0x0802ce15
 802ccd4:	0802cd3d 	.word	0x0802cd3d
 802ccd8:	0802cdcf 	.word	0x0802cdcf
 802ccdc:	0802cc8d 	.word	0x0802cc8d
 802cce0:	0802cc8d 	.word	0x0802cc8d
 802cce4:	0802ce37 	.word	0x0802ce37
 802cce8:	0802cc8d 	.word	0x0802cc8d
 802ccec:	0802cd3d 	.word	0x0802cd3d
 802ccf0:	0802cc8d 	.word	0x0802cc8d
 802ccf4:	0802cc8d 	.word	0x0802cc8d
 802ccf8:	0802cdd7 	.word	0x0802cdd7
 802ccfc:	682b      	ldr	r3, [r5, #0]
 802ccfe:	1d1a      	adds	r2, r3, #4
 802cd00:	681b      	ldr	r3, [r3, #0]
 802cd02:	602a      	str	r2, [r5, #0]
 802cd04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cd08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802cd0c:	2301      	movs	r3, #1
 802cd0e:	e09f      	b.n	802ce50 <_printf_i+0x1ec>
 802cd10:	6820      	ldr	r0, [r4, #0]
 802cd12:	682b      	ldr	r3, [r5, #0]
 802cd14:	0607      	lsls	r7, r0, #24
 802cd16:	f103 0104 	add.w	r1, r3, #4
 802cd1a:	6029      	str	r1, [r5, #0]
 802cd1c:	d501      	bpl.n	802cd22 <_printf_i+0xbe>
 802cd1e:	681e      	ldr	r6, [r3, #0]
 802cd20:	e003      	b.n	802cd2a <_printf_i+0xc6>
 802cd22:	0646      	lsls	r6, r0, #25
 802cd24:	d5fb      	bpl.n	802cd1e <_printf_i+0xba>
 802cd26:	f9b3 6000 	ldrsh.w	r6, [r3]
 802cd2a:	2e00      	cmp	r6, #0
 802cd2c:	da03      	bge.n	802cd36 <_printf_i+0xd2>
 802cd2e:	232d      	movs	r3, #45	; 0x2d
 802cd30:	4276      	negs	r6, r6
 802cd32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cd36:	485a      	ldr	r0, [pc, #360]	; (802cea0 <_printf_i+0x23c>)
 802cd38:	230a      	movs	r3, #10
 802cd3a:	e012      	b.n	802cd62 <_printf_i+0xfe>
 802cd3c:	682b      	ldr	r3, [r5, #0]
 802cd3e:	6820      	ldr	r0, [r4, #0]
 802cd40:	1d19      	adds	r1, r3, #4
 802cd42:	6029      	str	r1, [r5, #0]
 802cd44:	0605      	lsls	r5, r0, #24
 802cd46:	d501      	bpl.n	802cd4c <_printf_i+0xe8>
 802cd48:	681e      	ldr	r6, [r3, #0]
 802cd4a:	e002      	b.n	802cd52 <_printf_i+0xee>
 802cd4c:	0641      	lsls	r1, r0, #25
 802cd4e:	d5fb      	bpl.n	802cd48 <_printf_i+0xe4>
 802cd50:	881e      	ldrh	r6, [r3, #0]
 802cd52:	4853      	ldr	r0, [pc, #332]	; (802cea0 <_printf_i+0x23c>)
 802cd54:	2f6f      	cmp	r7, #111	; 0x6f
 802cd56:	bf0c      	ite	eq
 802cd58:	2308      	moveq	r3, #8
 802cd5a:	230a      	movne	r3, #10
 802cd5c:	2100      	movs	r1, #0
 802cd5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802cd62:	6865      	ldr	r5, [r4, #4]
 802cd64:	60a5      	str	r5, [r4, #8]
 802cd66:	2d00      	cmp	r5, #0
 802cd68:	bfa2      	ittt	ge
 802cd6a:	6821      	ldrge	r1, [r4, #0]
 802cd6c:	f021 0104 	bicge.w	r1, r1, #4
 802cd70:	6021      	strge	r1, [r4, #0]
 802cd72:	b90e      	cbnz	r6, 802cd78 <_printf_i+0x114>
 802cd74:	2d00      	cmp	r5, #0
 802cd76:	d04b      	beq.n	802ce10 <_printf_i+0x1ac>
 802cd78:	4615      	mov	r5, r2
 802cd7a:	fbb6 f1f3 	udiv	r1, r6, r3
 802cd7e:	fb03 6711 	mls	r7, r3, r1, r6
 802cd82:	5dc7      	ldrb	r7, [r0, r7]
 802cd84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802cd88:	4637      	mov	r7, r6
 802cd8a:	42bb      	cmp	r3, r7
 802cd8c:	460e      	mov	r6, r1
 802cd8e:	d9f4      	bls.n	802cd7a <_printf_i+0x116>
 802cd90:	2b08      	cmp	r3, #8
 802cd92:	d10b      	bne.n	802cdac <_printf_i+0x148>
 802cd94:	6823      	ldr	r3, [r4, #0]
 802cd96:	07de      	lsls	r6, r3, #31
 802cd98:	d508      	bpl.n	802cdac <_printf_i+0x148>
 802cd9a:	6923      	ldr	r3, [r4, #16]
 802cd9c:	6861      	ldr	r1, [r4, #4]
 802cd9e:	4299      	cmp	r1, r3
 802cda0:	bfde      	ittt	le
 802cda2:	2330      	movle	r3, #48	; 0x30
 802cda4:	f805 3c01 	strble.w	r3, [r5, #-1]
 802cda8:	f105 35ff 	addle.w	r5, r5, #4294967295
 802cdac:	1b52      	subs	r2, r2, r5
 802cdae:	6122      	str	r2, [r4, #16]
 802cdb0:	f8cd a000 	str.w	sl, [sp]
 802cdb4:	464b      	mov	r3, r9
 802cdb6:	aa03      	add	r2, sp, #12
 802cdb8:	4621      	mov	r1, r4
 802cdba:	4640      	mov	r0, r8
 802cdbc:	f7ff fee4 	bl	802cb88 <_printf_common>
 802cdc0:	3001      	adds	r0, #1
 802cdc2:	d14a      	bne.n	802ce5a <_printf_i+0x1f6>
 802cdc4:	f04f 30ff 	mov.w	r0, #4294967295
 802cdc8:	b004      	add	sp, #16
 802cdca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cdce:	6823      	ldr	r3, [r4, #0]
 802cdd0:	f043 0320 	orr.w	r3, r3, #32
 802cdd4:	6023      	str	r3, [r4, #0]
 802cdd6:	4833      	ldr	r0, [pc, #204]	; (802cea4 <_printf_i+0x240>)
 802cdd8:	2778      	movs	r7, #120	; 0x78
 802cdda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802cdde:	6823      	ldr	r3, [r4, #0]
 802cde0:	6829      	ldr	r1, [r5, #0]
 802cde2:	061f      	lsls	r7, r3, #24
 802cde4:	f851 6b04 	ldr.w	r6, [r1], #4
 802cde8:	d402      	bmi.n	802cdf0 <_printf_i+0x18c>
 802cdea:	065f      	lsls	r7, r3, #25
 802cdec:	bf48      	it	mi
 802cdee:	b2b6      	uxthmi	r6, r6
 802cdf0:	07df      	lsls	r7, r3, #31
 802cdf2:	bf48      	it	mi
 802cdf4:	f043 0320 	orrmi.w	r3, r3, #32
 802cdf8:	6029      	str	r1, [r5, #0]
 802cdfa:	bf48      	it	mi
 802cdfc:	6023      	strmi	r3, [r4, #0]
 802cdfe:	b91e      	cbnz	r6, 802ce08 <_printf_i+0x1a4>
 802ce00:	6823      	ldr	r3, [r4, #0]
 802ce02:	f023 0320 	bic.w	r3, r3, #32
 802ce06:	6023      	str	r3, [r4, #0]
 802ce08:	2310      	movs	r3, #16
 802ce0a:	e7a7      	b.n	802cd5c <_printf_i+0xf8>
 802ce0c:	4824      	ldr	r0, [pc, #144]	; (802cea0 <_printf_i+0x23c>)
 802ce0e:	e7e4      	b.n	802cdda <_printf_i+0x176>
 802ce10:	4615      	mov	r5, r2
 802ce12:	e7bd      	b.n	802cd90 <_printf_i+0x12c>
 802ce14:	682b      	ldr	r3, [r5, #0]
 802ce16:	6826      	ldr	r6, [r4, #0]
 802ce18:	6961      	ldr	r1, [r4, #20]
 802ce1a:	1d18      	adds	r0, r3, #4
 802ce1c:	6028      	str	r0, [r5, #0]
 802ce1e:	0635      	lsls	r5, r6, #24
 802ce20:	681b      	ldr	r3, [r3, #0]
 802ce22:	d501      	bpl.n	802ce28 <_printf_i+0x1c4>
 802ce24:	6019      	str	r1, [r3, #0]
 802ce26:	e002      	b.n	802ce2e <_printf_i+0x1ca>
 802ce28:	0670      	lsls	r0, r6, #25
 802ce2a:	d5fb      	bpl.n	802ce24 <_printf_i+0x1c0>
 802ce2c:	8019      	strh	r1, [r3, #0]
 802ce2e:	2300      	movs	r3, #0
 802ce30:	6123      	str	r3, [r4, #16]
 802ce32:	4615      	mov	r5, r2
 802ce34:	e7bc      	b.n	802cdb0 <_printf_i+0x14c>
 802ce36:	682b      	ldr	r3, [r5, #0]
 802ce38:	1d1a      	adds	r2, r3, #4
 802ce3a:	602a      	str	r2, [r5, #0]
 802ce3c:	681d      	ldr	r5, [r3, #0]
 802ce3e:	6862      	ldr	r2, [r4, #4]
 802ce40:	2100      	movs	r1, #0
 802ce42:	4628      	mov	r0, r5
 802ce44:	f7e3 f9dc 	bl	8010200 <memchr>
 802ce48:	b108      	cbz	r0, 802ce4e <_printf_i+0x1ea>
 802ce4a:	1b40      	subs	r0, r0, r5
 802ce4c:	6060      	str	r0, [r4, #4]
 802ce4e:	6863      	ldr	r3, [r4, #4]
 802ce50:	6123      	str	r3, [r4, #16]
 802ce52:	2300      	movs	r3, #0
 802ce54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ce58:	e7aa      	b.n	802cdb0 <_printf_i+0x14c>
 802ce5a:	6923      	ldr	r3, [r4, #16]
 802ce5c:	462a      	mov	r2, r5
 802ce5e:	4649      	mov	r1, r9
 802ce60:	4640      	mov	r0, r8
 802ce62:	47d0      	blx	sl
 802ce64:	3001      	adds	r0, #1
 802ce66:	d0ad      	beq.n	802cdc4 <_printf_i+0x160>
 802ce68:	6823      	ldr	r3, [r4, #0]
 802ce6a:	079b      	lsls	r3, r3, #30
 802ce6c:	d413      	bmi.n	802ce96 <_printf_i+0x232>
 802ce6e:	68e0      	ldr	r0, [r4, #12]
 802ce70:	9b03      	ldr	r3, [sp, #12]
 802ce72:	4298      	cmp	r0, r3
 802ce74:	bfb8      	it	lt
 802ce76:	4618      	movlt	r0, r3
 802ce78:	e7a6      	b.n	802cdc8 <_printf_i+0x164>
 802ce7a:	2301      	movs	r3, #1
 802ce7c:	4632      	mov	r2, r6
 802ce7e:	4649      	mov	r1, r9
 802ce80:	4640      	mov	r0, r8
 802ce82:	47d0      	blx	sl
 802ce84:	3001      	adds	r0, #1
 802ce86:	d09d      	beq.n	802cdc4 <_printf_i+0x160>
 802ce88:	3501      	adds	r5, #1
 802ce8a:	68e3      	ldr	r3, [r4, #12]
 802ce8c:	9903      	ldr	r1, [sp, #12]
 802ce8e:	1a5b      	subs	r3, r3, r1
 802ce90:	42ab      	cmp	r3, r5
 802ce92:	dcf2      	bgt.n	802ce7a <_printf_i+0x216>
 802ce94:	e7eb      	b.n	802ce6e <_printf_i+0x20a>
 802ce96:	2500      	movs	r5, #0
 802ce98:	f104 0619 	add.w	r6, r4, #25
 802ce9c:	e7f5      	b.n	802ce8a <_printf_i+0x226>
 802ce9e:	bf00      	nop
 802cea0:	08034960 	.word	0x08034960
 802cea4:	08034971 	.word	0x08034971

0802cea8 <_scanf_float>:
 802cea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ceac:	b087      	sub	sp, #28
 802ceae:	4617      	mov	r7, r2
 802ceb0:	9303      	str	r3, [sp, #12]
 802ceb2:	688b      	ldr	r3, [r1, #8]
 802ceb4:	1e5a      	subs	r2, r3, #1
 802ceb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802ceba:	bf83      	ittte	hi
 802cebc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802cec0:	195b      	addhi	r3, r3, r5
 802cec2:	9302      	strhi	r3, [sp, #8]
 802cec4:	2300      	movls	r3, #0
 802cec6:	bf86      	itte	hi
 802cec8:	f240 135d 	movwhi	r3, #349	; 0x15d
 802cecc:	608b      	strhi	r3, [r1, #8]
 802cece:	9302      	strls	r3, [sp, #8]
 802ced0:	680b      	ldr	r3, [r1, #0]
 802ced2:	468b      	mov	fp, r1
 802ced4:	2500      	movs	r5, #0
 802ced6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802ceda:	f84b 3b1c 	str.w	r3, [fp], #28
 802cede:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802cee2:	4680      	mov	r8, r0
 802cee4:	460c      	mov	r4, r1
 802cee6:	465e      	mov	r6, fp
 802cee8:	46aa      	mov	sl, r5
 802ceea:	46a9      	mov	r9, r5
 802ceec:	9501      	str	r5, [sp, #4]
 802ceee:	68a2      	ldr	r2, [r4, #8]
 802cef0:	b152      	cbz	r2, 802cf08 <_scanf_float+0x60>
 802cef2:	683b      	ldr	r3, [r7, #0]
 802cef4:	781b      	ldrb	r3, [r3, #0]
 802cef6:	2b4e      	cmp	r3, #78	; 0x4e
 802cef8:	d864      	bhi.n	802cfc4 <_scanf_float+0x11c>
 802cefa:	2b40      	cmp	r3, #64	; 0x40
 802cefc:	d83c      	bhi.n	802cf78 <_scanf_float+0xd0>
 802cefe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802cf02:	b2c8      	uxtb	r0, r1
 802cf04:	280e      	cmp	r0, #14
 802cf06:	d93a      	bls.n	802cf7e <_scanf_float+0xd6>
 802cf08:	f1b9 0f00 	cmp.w	r9, #0
 802cf0c:	d003      	beq.n	802cf16 <_scanf_float+0x6e>
 802cf0e:	6823      	ldr	r3, [r4, #0]
 802cf10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802cf14:	6023      	str	r3, [r4, #0]
 802cf16:	f10a 3aff 	add.w	sl, sl, #4294967295
 802cf1a:	f1ba 0f01 	cmp.w	sl, #1
 802cf1e:	f200 8113 	bhi.w	802d148 <_scanf_float+0x2a0>
 802cf22:	455e      	cmp	r6, fp
 802cf24:	f200 8105 	bhi.w	802d132 <_scanf_float+0x28a>
 802cf28:	2501      	movs	r5, #1
 802cf2a:	4628      	mov	r0, r5
 802cf2c:	b007      	add	sp, #28
 802cf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802cf36:	2a0d      	cmp	r2, #13
 802cf38:	d8e6      	bhi.n	802cf08 <_scanf_float+0x60>
 802cf3a:	a101      	add	r1, pc, #4	; (adr r1, 802cf40 <_scanf_float+0x98>)
 802cf3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802cf40:	0802d07f 	.word	0x0802d07f
 802cf44:	0802cf09 	.word	0x0802cf09
 802cf48:	0802cf09 	.word	0x0802cf09
 802cf4c:	0802cf09 	.word	0x0802cf09
 802cf50:	0802d0df 	.word	0x0802d0df
 802cf54:	0802d0b7 	.word	0x0802d0b7
 802cf58:	0802cf09 	.word	0x0802cf09
 802cf5c:	0802cf09 	.word	0x0802cf09
 802cf60:	0802d08d 	.word	0x0802d08d
 802cf64:	0802cf09 	.word	0x0802cf09
 802cf68:	0802cf09 	.word	0x0802cf09
 802cf6c:	0802cf09 	.word	0x0802cf09
 802cf70:	0802cf09 	.word	0x0802cf09
 802cf74:	0802d045 	.word	0x0802d045
 802cf78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802cf7c:	e7db      	b.n	802cf36 <_scanf_float+0x8e>
 802cf7e:	290e      	cmp	r1, #14
 802cf80:	d8c2      	bhi.n	802cf08 <_scanf_float+0x60>
 802cf82:	a001      	add	r0, pc, #4	; (adr r0, 802cf88 <_scanf_float+0xe0>)
 802cf84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802cf88:	0802d037 	.word	0x0802d037
 802cf8c:	0802cf09 	.word	0x0802cf09
 802cf90:	0802d037 	.word	0x0802d037
 802cf94:	0802d0cb 	.word	0x0802d0cb
 802cf98:	0802cf09 	.word	0x0802cf09
 802cf9c:	0802cfe5 	.word	0x0802cfe5
 802cfa0:	0802d021 	.word	0x0802d021
 802cfa4:	0802d021 	.word	0x0802d021
 802cfa8:	0802d021 	.word	0x0802d021
 802cfac:	0802d021 	.word	0x0802d021
 802cfb0:	0802d021 	.word	0x0802d021
 802cfb4:	0802d021 	.word	0x0802d021
 802cfb8:	0802d021 	.word	0x0802d021
 802cfbc:	0802d021 	.word	0x0802d021
 802cfc0:	0802d021 	.word	0x0802d021
 802cfc4:	2b6e      	cmp	r3, #110	; 0x6e
 802cfc6:	d809      	bhi.n	802cfdc <_scanf_float+0x134>
 802cfc8:	2b60      	cmp	r3, #96	; 0x60
 802cfca:	d8b2      	bhi.n	802cf32 <_scanf_float+0x8a>
 802cfcc:	2b54      	cmp	r3, #84	; 0x54
 802cfce:	d077      	beq.n	802d0c0 <_scanf_float+0x218>
 802cfd0:	2b59      	cmp	r3, #89	; 0x59
 802cfd2:	d199      	bne.n	802cf08 <_scanf_float+0x60>
 802cfd4:	2d07      	cmp	r5, #7
 802cfd6:	d197      	bne.n	802cf08 <_scanf_float+0x60>
 802cfd8:	2508      	movs	r5, #8
 802cfda:	e029      	b.n	802d030 <_scanf_float+0x188>
 802cfdc:	2b74      	cmp	r3, #116	; 0x74
 802cfde:	d06f      	beq.n	802d0c0 <_scanf_float+0x218>
 802cfe0:	2b79      	cmp	r3, #121	; 0x79
 802cfe2:	e7f6      	b.n	802cfd2 <_scanf_float+0x12a>
 802cfe4:	6821      	ldr	r1, [r4, #0]
 802cfe6:	05c8      	lsls	r0, r1, #23
 802cfe8:	d51a      	bpl.n	802d020 <_scanf_float+0x178>
 802cfea:	9b02      	ldr	r3, [sp, #8]
 802cfec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802cff0:	6021      	str	r1, [r4, #0]
 802cff2:	f109 0901 	add.w	r9, r9, #1
 802cff6:	b11b      	cbz	r3, 802d000 <_scanf_float+0x158>
 802cff8:	3b01      	subs	r3, #1
 802cffa:	3201      	adds	r2, #1
 802cffc:	9302      	str	r3, [sp, #8]
 802cffe:	60a2      	str	r2, [r4, #8]
 802d000:	68a3      	ldr	r3, [r4, #8]
 802d002:	3b01      	subs	r3, #1
 802d004:	60a3      	str	r3, [r4, #8]
 802d006:	6923      	ldr	r3, [r4, #16]
 802d008:	3301      	adds	r3, #1
 802d00a:	6123      	str	r3, [r4, #16]
 802d00c:	687b      	ldr	r3, [r7, #4]
 802d00e:	3b01      	subs	r3, #1
 802d010:	2b00      	cmp	r3, #0
 802d012:	607b      	str	r3, [r7, #4]
 802d014:	f340 8084 	ble.w	802d120 <_scanf_float+0x278>
 802d018:	683b      	ldr	r3, [r7, #0]
 802d01a:	3301      	adds	r3, #1
 802d01c:	603b      	str	r3, [r7, #0]
 802d01e:	e766      	b.n	802ceee <_scanf_float+0x46>
 802d020:	eb1a 0f05 	cmn.w	sl, r5
 802d024:	f47f af70 	bne.w	802cf08 <_scanf_float+0x60>
 802d028:	6822      	ldr	r2, [r4, #0]
 802d02a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802d02e:	6022      	str	r2, [r4, #0]
 802d030:	f806 3b01 	strb.w	r3, [r6], #1
 802d034:	e7e4      	b.n	802d000 <_scanf_float+0x158>
 802d036:	6822      	ldr	r2, [r4, #0]
 802d038:	0610      	lsls	r0, r2, #24
 802d03a:	f57f af65 	bpl.w	802cf08 <_scanf_float+0x60>
 802d03e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d042:	e7f4      	b.n	802d02e <_scanf_float+0x186>
 802d044:	f1ba 0f00 	cmp.w	sl, #0
 802d048:	d10e      	bne.n	802d068 <_scanf_float+0x1c0>
 802d04a:	f1b9 0f00 	cmp.w	r9, #0
 802d04e:	d10e      	bne.n	802d06e <_scanf_float+0x1c6>
 802d050:	6822      	ldr	r2, [r4, #0]
 802d052:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d056:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d05a:	d108      	bne.n	802d06e <_scanf_float+0x1c6>
 802d05c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d060:	6022      	str	r2, [r4, #0]
 802d062:	f04f 0a01 	mov.w	sl, #1
 802d066:	e7e3      	b.n	802d030 <_scanf_float+0x188>
 802d068:	f1ba 0f02 	cmp.w	sl, #2
 802d06c:	d055      	beq.n	802d11a <_scanf_float+0x272>
 802d06e:	2d01      	cmp	r5, #1
 802d070:	d002      	beq.n	802d078 <_scanf_float+0x1d0>
 802d072:	2d04      	cmp	r5, #4
 802d074:	f47f af48 	bne.w	802cf08 <_scanf_float+0x60>
 802d078:	3501      	adds	r5, #1
 802d07a:	b2ed      	uxtb	r5, r5
 802d07c:	e7d8      	b.n	802d030 <_scanf_float+0x188>
 802d07e:	f1ba 0f01 	cmp.w	sl, #1
 802d082:	f47f af41 	bne.w	802cf08 <_scanf_float+0x60>
 802d086:	f04f 0a02 	mov.w	sl, #2
 802d08a:	e7d1      	b.n	802d030 <_scanf_float+0x188>
 802d08c:	b97d      	cbnz	r5, 802d0ae <_scanf_float+0x206>
 802d08e:	f1b9 0f00 	cmp.w	r9, #0
 802d092:	f47f af3c 	bne.w	802cf0e <_scanf_float+0x66>
 802d096:	6822      	ldr	r2, [r4, #0]
 802d098:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d09c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d0a0:	f47f af39 	bne.w	802cf16 <_scanf_float+0x6e>
 802d0a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d0a8:	6022      	str	r2, [r4, #0]
 802d0aa:	2501      	movs	r5, #1
 802d0ac:	e7c0      	b.n	802d030 <_scanf_float+0x188>
 802d0ae:	2d03      	cmp	r5, #3
 802d0b0:	d0e2      	beq.n	802d078 <_scanf_float+0x1d0>
 802d0b2:	2d05      	cmp	r5, #5
 802d0b4:	e7de      	b.n	802d074 <_scanf_float+0x1cc>
 802d0b6:	2d02      	cmp	r5, #2
 802d0b8:	f47f af26 	bne.w	802cf08 <_scanf_float+0x60>
 802d0bc:	2503      	movs	r5, #3
 802d0be:	e7b7      	b.n	802d030 <_scanf_float+0x188>
 802d0c0:	2d06      	cmp	r5, #6
 802d0c2:	f47f af21 	bne.w	802cf08 <_scanf_float+0x60>
 802d0c6:	2507      	movs	r5, #7
 802d0c8:	e7b2      	b.n	802d030 <_scanf_float+0x188>
 802d0ca:	6822      	ldr	r2, [r4, #0]
 802d0cc:	0591      	lsls	r1, r2, #22
 802d0ce:	f57f af1b 	bpl.w	802cf08 <_scanf_float+0x60>
 802d0d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802d0d6:	6022      	str	r2, [r4, #0]
 802d0d8:	f8cd 9004 	str.w	r9, [sp, #4]
 802d0dc:	e7a8      	b.n	802d030 <_scanf_float+0x188>
 802d0de:	6822      	ldr	r2, [r4, #0]
 802d0e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802d0e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802d0e8:	d006      	beq.n	802d0f8 <_scanf_float+0x250>
 802d0ea:	0550      	lsls	r0, r2, #21
 802d0ec:	f57f af0c 	bpl.w	802cf08 <_scanf_float+0x60>
 802d0f0:	f1b9 0f00 	cmp.w	r9, #0
 802d0f4:	f43f af0f 	beq.w	802cf16 <_scanf_float+0x6e>
 802d0f8:	0591      	lsls	r1, r2, #22
 802d0fa:	bf58      	it	pl
 802d0fc:	9901      	ldrpl	r1, [sp, #4]
 802d0fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d102:	bf58      	it	pl
 802d104:	eba9 0101 	subpl.w	r1, r9, r1
 802d108:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802d10c:	bf58      	it	pl
 802d10e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802d112:	6022      	str	r2, [r4, #0]
 802d114:	f04f 0900 	mov.w	r9, #0
 802d118:	e78a      	b.n	802d030 <_scanf_float+0x188>
 802d11a:	f04f 0a03 	mov.w	sl, #3
 802d11e:	e787      	b.n	802d030 <_scanf_float+0x188>
 802d120:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d124:	4639      	mov	r1, r7
 802d126:	4640      	mov	r0, r8
 802d128:	4798      	blx	r3
 802d12a:	2800      	cmp	r0, #0
 802d12c:	f43f aedf 	beq.w	802ceee <_scanf_float+0x46>
 802d130:	e6ea      	b.n	802cf08 <_scanf_float+0x60>
 802d132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d136:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d13a:	463a      	mov	r2, r7
 802d13c:	4640      	mov	r0, r8
 802d13e:	4798      	blx	r3
 802d140:	6923      	ldr	r3, [r4, #16]
 802d142:	3b01      	subs	r3, #1
 802d144:	6123      	str	r3, [r4, #16]
 802d146:	e6ec      	b.n	802cf22 <_scanf_float+0x7a>
 802d148:	1e6b      	subs	r3, r5, #1
 802d14a:	2b06      	cmp	r3, #6
 802d14c:	d825      	bhi.n	802d19a <_scanf_float+0x2f2>
 802d14e:	2d02      	cmp	r5, #2
 802d150:	d836      	bhi.n	802d1c0 <_scanf_float+0x318>
 802d152:	455e      	cmp	r6, fp
 802d154:	f67f aee8 	bls.w	802cf28 <_scanf_float+0x80>
 802d158:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d15c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d160:	463a      	mov	r2, r7
 802d162:	4640      	mov	r0, r8
 802d164:	4798      	blx	r3
 802d166:	6923      	ldr	r3, [r4, #16]
 802d168:	3b01      	subs	r3, #1
 802d16a:	6123      	str	r3, [r4, #16]
 802d16c:	e7f1      	b.n	802d152 <_scanf_float+0x2aa>
 802d16e:	9802      	ldr	r0, [sp, #8]
 802d170:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d174:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802d178:	9002      	str	r0, [sp, #8]
 802d17a:	463a      	mov	r2, r7
 802d17c:	4640      	mov	r0, r8
 802d17e:	4798      	blx	r3
 802d180:	6923      	ldr	r3, [r4, #16]
 802d182:	3b01      	subs	r3, #1
 802d184:	6123      	str	r3, [r4, #16]
 802d186:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d18a:	fa5f fa8a 	uxtb.w	sl, sl
 802d18e:	f1ba 0f02 	cmp.w	sl, #2
 802d192:	d1ec      	bne.n	802d16e <_scanf_float+0x2c6>
 802d194:	3d03      	subs	r5, #3
 802d196:	b2ed      	uxtb	r5, r5
 802d198:	1b76      	subs	r6, r6, r5
 802d19a:	6823      	ldr	r3, [r4, #0]
 802d19c:	05da      	lsls	r2, r3, #23
 802d19e:	d52f      	bpl.n	802d200 <_scanf_float+0x358>
 802d1a0:	055b      	lsls	r3, r3, #21
 802d1a2:	d510      	bpl.n	802d1c6 <_scanf_float+0x31e>
 802d1a4:	455e      	cmp	r6, fp
 802d1a6:	f67f aebf 	bls.w	802cf28 <_scanf_float+0x80>
 802d1aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d1ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d1b2:	463a      	mov	r2, r7
 802d1b4:	4640      	mov	r0, r8
 802d1b6:	4798      	blx	r3
 802d1b8:	6923      	ldr	r3, [r4, #16]
 802d1ba:	3b01      	subs	r3, #1
 802d1bc:	6123      	str	r3, [r4, #16]
 802d1be:	e7f1      	b.n	802d1a4 <_scanf_float+0x2fc>
 802d1c0:	46aa      	mov	sl, r5
 802d1c2:	9602      	str	r6, [sp, #8]
 802d1c4:	e7df      	b.n	802d186 <_scanf_float+0x2de>
 802d1c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802d1ca:	6923      	ldr	r3, [r4, #16]
 802d1cc:	2965      	cmp	r1, #101	; 0x65
 802d1ce:	f103 33ff 	add.w	r3, r3, #4294967295
 802d1d2:	f106 35ff 	add.w	r5, r6, #4294967295
 802d1d6:	6123      	str	r3, [r4, #16]
 802d1d8:	d00c      	beq.n	802d1f4 <_scanf_float+0x34c>
 802d1da:	2945      	cmp	r1, #69	; 0x45
 802d1dc:	d00a      	beq.n	802d1f4 <_scanf_float+0x34c>
 802d1de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d1e2:	463a      	mov	r2, r7
 802d1e4:	4640      	mov	r0, r8
 802d1e6:	4798      	blx	r3
 802d1e8:	6923      	ldr	r3, [r4, #16]
 802d1ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802d1ee:	3b01      	subs	r3, #1
 802d1f0:	1eb5      	subs	r5, r6, #2
 802d1f2:	6123      	str	r3, [r4, #16]
 802d1f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d1f8:	463a      	mov	r2, r7
 802d1fa:	4640      	mov	r0, r8
 802d1fc:	4798      	blx	r3
 802d1fe:	462e      	mov	r6, r5
 802d200:	6825      	ldr	r5, [r4, #0]
 802d202:	f015 0510 	ands.w	r5, r5, #16
 802d206:	d158      	bne.n	802d2ba <_scanf_float+0x412>
 802d208:	7035      	strb	r5, [r6, #0]
 802d20a:	6823      	ldr	r3, [r4, #0]
 802d20c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d214:	d11c      	bne.n	802d250 <_scanf_float+0x3a8>
 802d216:	9b01      	ldr	r3, [sp, #4]
 802d218:	454b      	cmp	r3, r9
 802d21a:	eba3 0209 	sub.w	r2, r3, r9
 802d21e:	d124      	bne.n	802d26a <_scanf_float+0x3c2>
 802d220:	2200      	movs	r2, #0
 802d222:	4659      	mov	r1, fp
 802d224:	4640      	mov	r0, r8
 802d226:	f002 fe2b 	bl	802fe80 <_strtod_r>
 802d22a:	9b03      	ldr	r3, [sp, #12]
 802d22c:	6821      	ldr	r1, [r4, #0]
 802d22e:	681b      	ldr	r3, [r3, #0]
 802d230:	f011 0f02 	tst.w	r1, #2
 802d234:	ec57 6b10 	vmov	r6, r7, d0
 802d238:	f103 0204 	add.w	r2, r3, #4
 802d23c:	d020      	beq.n	802d280 <_scanf_float+0x3d8>
 802d23e:	9903      	ldr	r1, [sp, #12]
 802d240:	600a      	str	r2, [r1, #0]
 802d242:	681b      	ldr	r3, [r3, #0]
 802d244:	e9c3 6700 	strd	r6, r7, [r3]
 802d248:	68e3      	ldr	r3, [r4, #12]
 802d24a:	3301      	adds	r3, #1
 802d24c:	60e3      	str	r3, [r4, #12]
 802d24e:	e66c      	b.n	802cf2a <_scanf_float+0x82>
 802d250:	9b04      	ldr	r3, [sp, #16]
 802d252:	2b00      	cmp	r3, #0
 802d254:	d0e4      	beq.n	802d220 <_scanf_float+0x378>
 802d256:	9905      	ldr	r1, [sp, #20]
 802d258:	230a      	movs	r3, #10
 802d25a:	462a      	mov	r2, r5
 802d25c:	3101      	adds	r1, #1
 802d25e:	4640      	mov	r0, r8
 802d260:	f002 fe96 	bl	802ff90 <_strtol_r>
 802d264:	9b04      	ldr	r3, [sp, #16]
 802d266:	9e05      	ldr	r6, [sp, #20]
 802d268:	1ac2      	subs	r2, r0, r3
 802d26a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802d26e:	429e      	cmp	r6, r3
 802d270:	bf28      	it	cs
 802d272:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802d276:	4912      	ldr	r1, [pc, #72]	; (802d2c0 <_scanf_float+0x418>)
 802d278:	4630      	mov	r0, r6
 802d27a:	f000 f93f 	bl	802d4fc <siprintf>
 802d27e:	e7cf      	b.n	802d220 <_scanf_float+0x378>
 802d280:	f011 0f04 	tst.w	r1, #4
 802d284:	9903      	ldr	r1, [sp, #12]
 802d286:	600a      	str	r2, [r1, #0]
 802d288:	d1db      	bne.n	802d242 <_scanf_float+0x39a>
 802d28a:	f8d3 8000 	ldr.w	r8, [r3]
 802d28e:	ee10 2a10 	vmov	r2, s0
 802d292:	ee10 0a10 	vmov	r0, s0
 802d296:	463b      	mov	r3, r7
 802d298:	4639      	mov	r1, r7
 802d29a:	f7e3 fc5f 	bl	8010b5c <__aeabi_dcmpun>
 802d29e:	b128      	cbz	r0, 802d2ac <_scanf_float+0x404>
 802d2a0:	4808      	ldr	r0, [pc, #32]	; (802d2c4 <_scanf_float+0x41c>)
 802d2a2:	f000 fc5f 	bl	802db64 <nanf>
 802d2a6:	ed88 0a00 	vstr	s0, [r8]
 802d2aa:	e7cd      	b.n	802d248 <_scanf_float+0x3a0>
 802d2ac:	4630      	mov	r0, r6
 802d2ae:	4639      	mov	r1, r7
 802d2b0:	f7e3 fcb2 	bl	8010c18 <__aeabi_d2f>
 802d2b4:	f8c8 0000 	str.w	r0, [r8]
 802d2b8:	e7c6      	b.n	802d248 <_scanf_float+0x3a0>
 802d2ba:	2500      	movs	r5, #0
 802d2bc:	e635      	b.n	802cf2a <_scanf_float+0x82>
 802d2be:	bf00      	nop
 802d2c0:	08034982 	.word	0x08034982
 802d2c4:	0803494f 	.word	0x0803494f

0802d2c8 <std>:
 802d2c8:	2300      	movs	r3, #0
 802d2ca:	b510      	push	{r4, lr}
 802d2cc:	4604      	mov	r4, r0
 802d2ce:	e9c0 3300 	strd	r3, r3, [r0]
 802d2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d2d6:	6083      	str	r3, [r0, #8]
 802d2d8:	8181      	strh	r1, [r0, #12]
 802d2da:	6643      	str	r3, [r0, #100]	; 0x64
 802d2dc:	81c2      	strh	r2, [r0, #14]
 802d2de:	6183      	str	r3, [r0, #24]
 802d2e0:	4619      	mov	r1, r3
 802d2e2:	2208      	movs	r2, #8
 802d2e4:	305c      	adds	r0, #92	; 0x5c
 802d2e6:	f000 fa59 	bl	802d79c <memset>
 802d2ea:	4b0d      	ldr	r3, [pc, #52]	; (802d320 <std+0x58>)
 802d2ec:	6263      	str	r3, [r4, #36]	; 0x24
 802d2ee:	4b0d      	ldr	r3, [pc, #52]	; (802d324 <std+0x5c>)
 802d2f0:	62a3      	str	r3, [r4, #40]	; 0x28
 802d2f2:	4b0d      	ldr	r3, [pc, #52]	; (802d328 <std+0x60>)
 802d2f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d2f6:	4b0d      	ldr	r3, [pc, #52]	; (802d32c <std+0x64>)
 802d2f8:	6323      	str	r3, [r4, #48]	; 0x30
 802d2fa:	4b0d      	ldr	r3, [pc, #52]	; (802d330 <std+0x68>)
 802d2fc:	6224      	str	r4, [r4, #32]
 802d2fe:	429c      	cmp	r4, r3
 802d300:	d006      	beq.n	802d310 <std+0x48>
 802d302:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802d306:	4294      	cmp	r4, r2
 802d308:	d002      	beq.n	802d310 <std+0x48>
 802d30a:	33d0      	adds	r3, #208	; 0xd0
 802d30c:	429c      	cmp	r4, r3
 802d30e:	d105      	bne.n	802d31c <std+0x54>
 802d310:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d318:	f000 bc0a 	b.w	802db30 <__retarget_lock_init_recursive>
 802d31c:	bd10      	pop	{r4, pc}
 802d31e:	bf00      	nop
 802d320:	0802d595 	.word	0x0802d595
 802d324:	0802d5bb 	.word	0x0802d5bb
 802d328:	0802d5f3 	.word	0x0802d5f3
 802d32c:	0802d617 	.word	0x0802d617
 802d330:	2000d9b0 	.word	0x2000d9b0

0802d334 <stdio_exit_handler>:
 802d334:	4a02      	ldr	r2, [pc, #8]	; (802d340 <stdio_exit_handler+0xc>)
 802d336:	4903      	ldr	r1, [pc, #12]	; (802d344 <stdio_exit_handler+0x10>)
 802d338:	4803      	ldr	r0, [pc, #12]	; (802d348 <stdio_exit_handler+0x14>)
 802d33a:	f000 b87b 	b.w	802d434 <_fwalk_sglue>
 802d33e:	bf00      	nop
 802d340:	20000130 	.word	0x20000130
 802d344:	08030c19 	.word	0x08030c19
 802d348:	2000013c 	.word	0x2000013c

0802d34c <cleanup_stdio>:
 802d34c:	6841      	ldr	r1, [r0, #4]
 802d34e:	4b0c      	ldr	r3, [pc, #48]	; (802d380 <cleanup_stdio+0x34>)
 802d350:	4299      	cmp	r1, r3
 802d352:	b510      	push	{r4, lr}
 802d354:	4604      	mov	r4, r0
 802d356:	d001      	beq.n	802d35c <cleanup_stdio+0x10>
 802d358:	f003 fc5e 	bl	8030c18 <_fflush_r>
 802d35c:	68a1      	ldr	r1, [r4, #8]
 802d35e:	4b09      	ldr	r3, [pc, #36]	; (802d384 <cleanup_stdio+0x38>)
 802d360:	4299      	cmp	r1, r3
 802d362:	d002      	beq.n	802d36a <cleanup_stdio+0x1e>
 802d364:	4620      	mov	r0, r4
 802d366:	f003 fc57 	bl	8030c18 <_fflush_r>
 802d36a:	68e1      	ldr	r1, [r4, #12]
 802d36c:	4b06      	ldr	r3, [pc, #24]	; (802d388 <cleanup_stdio+0x3c>)
 802d36e:	4299      	cmp	r1, r3
 802d370:	d004      	beq.n	802d37c <cleanup_stdio+0x30>
 802d372:	4620      	mov	r0, r4
 802d374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d378:	f003 bc4e 	b.w	8030c18 <_fflush_r>
 802d37c:	bd10      	pop	{r4, pc}
 802d37e:	bf00      	nop
 802d380:	2000d9b0 	.word	0x2000d9b0
 802d384:	2000da18 	.word	0x2000da18
 802d388:	2000da80 	.word	0x2000da80

0802d38c <global_stdio_init.part.0>:
 802d38c:	b510      	push	{r4, lr}
 802d38e:	4b0b      	ldr	r3, [pc, #44]	; (802d3bc <global_stdio_init.part.0+0x30>)
 802d390:	4c0b      	ldr	r4, [pc, #44]	; (802d3c0 <global_stdio_init.part.0+0x34>)
 802d392:	4a0c      	ldr	r2, [pc, #48]	; (802d3c4 <global_stdio_init.part.0+0x38>)
 802d394:	601a      	str	r2, [r3, #0]
 802d396:	4620      	mov	r0, r4
 802d398:	2200      	movs	r2, #0
 802d39a:	2104      	movs	r1, #4
 802d39c:	f7ff ff94 	bl	802d2c8 <std>
 802d3a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802d3a4:	2201      	movs	r2, #1
 802d3a6:	2109      	movs	r1, #9
 802d3a8:	f7ff ff8e 	bl	802d2c8 <std>
 802d3ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802d3b0:	2202      	movs	r2, #2
 802d3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d3b6:	2112      	movs	r1, #18
 802d3b8:	f7ff bf86 	b.w	802d2c8 <std>
 802d3bc:	2000dae8 	.word	0x2000dae8
 802d3c0:	2000d9b0 	.word	0x2000d9b0
 802d3c4:	0802d335 	.word	0x0802d335

0802d3c8 <__sfp_lock_acquire>:
 802d3c8:	4801      	ldr	r0, [pc, #4]	; (802d3d0 <__sfp_lock_acquire+0x8>)
 802d3ca:	f000 bbb2 	b.w	802db32 <__retarget_lock_acquire_recursive>
 802d3ce:	bf00      	nop
 802d3d0:	2000daf1 	.word	0x2000daf1

0802d3d4 <__sfp_lock_release>:
 802d3d4:	4801      	ldr	r0, [pc, #4]	; (802d3dc <__sfp_lock_release+0x8>)
 802d3d6:	f000 bbad 	b.w	802db34 <__retarget_lock_release_recursive>
 802d3da:	bf00      	nop
 802d3dc:	2000daf1 	.word	0x2000daf1

0802d3e0 <__sinit>:
 802d3e0:	b510      	push	{r4, lr}
 802d3e2:	4604      	mov	r4, r0
 802d3e4:	f7ff fff0 	bl	802d3c8 <__sfp_lock_acquire>
 802d3e8:	6a23      	ldr	r3, [r4, #32]
 802d3ea:	b11b      	cbz	r3, 802d3f4 <__sinit+0x14>
 802d3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d3f0:	f7ff bff0 	b.w	802d3d4 <__sfp_lock_release>
 802d3f4:	4b04      	ldr	r3, [pc, #16]	; (802d408 <__sinit+0x28>)
 802d3f6:	6223      	str	r3, [r4, #32]
 802d3f8:	4b04      	ldr	r3, [pc, #16]	; (802d40c <__sinit+0x2c>)
 802d3fa:	681b      	ldr	r3, [r3, #0]
 802d3fc:	2b00      	cmp	r3, #0
 802d3fe:	d1f5      	bne.n	802d3ec <__sinit+0xc>
 802d400:	f7ff ffc4 	bl	802d38c <global_stdio_init.part.0>
 802d404:	e7f2      	b.n	802d3ec <__sinit+0xc>
 802d406:	bf00      	nop
 802d408:	0802d34d 	.word	0x0802d34d
 802d40c:	2000dae8 	.word	0x2000dae8

0802d410 <fiprintf>:
 802d410:	b40e      	push	{r1, r2, r3}
 802d412:	b503      	push	{r0, r1, lr}
 802d414:	4601      	mov	r1, r0
 802d416:	ab03      	add	r3, sp, #12
 802d418:	4805      	ldr	r0, [pc, #20]	; (802d430 <fiprintf+0x20>)
 802d41a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d41e:	6800      	ldr	r0, [r0, #0]
 802d420:	9301      	str	r3, [sp, #4]
 802d422:	f003 f90b 	bl	803063c <_vfiprintf_r>
 802d426:	b002      	add	sp, #8
 802d428:	f85d eb04 	ldr.w	lr, [sp], #4
 802d42c:	b003      	add	sp, #12
 802d42e:	4770      	bx	lr
 802d430:	20000188 	.word	0x20000188

0802d434 <_fwalk_sglue>:
 802d434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d438:	4607      	mov	r7, r0
 802d43a:	4688      	mov	r8, r1
 802d43c:	4614      	mov	r4, r2
 802d43e:	2600      	movs	r6, #0
 802d440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d444:	f1b9 0901 	subs.w	r9, r9, #1
 802d448:	d505      	bpl.n	802d456 <_fwalk_sglue+0x22>
 802d44a:	6824      	ldr	r4, [r4, #0]
 802d44c:	2c00      	cmp	r4, #0
 802d44e:	d1f7      	bne.n	802d440 <_fwalk_sglue+0xc>
 802d450:	4630      	mov	r0, r6
 802d452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d456:	89ab      	ldrh	r3, [r5, #12]
 802d458:	2b01      	cmp	r3, #1
 802d45a:	d907      	bls.n	802d46c <_fwalk_sglue+0x38>
 802d45c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d460:	3301      	adds	r3, #1
 802d462:	d003      	beq.n	802d46c <_fwalk_sglue+0x38>
 802d464:	4629      	mov	r1, r5
 802d466:	4638      	mov	r0, r7
 802d468:	47c0      	blx	r8
 802d46a:	4306      	orrs	r6, r0
 802d46c:	3568      	adds	r5, #104	; 0x68
 802d46e:	e7e9      	b.n	802d444 <_fwalk_sglue+0x10>

0802d470 <iprintf>:
 802d470:	b40f      	push	{r0, r1, r2, r3}
 802d472:	b507      	push	{r0, r1, r2, lr}
 802d474:	4906      	ldr	r1, [pc, #24]	; (802d490 <iprintf+0x20>)
 802d476:	ab04      	add	r3, sp, #16
 802d478:	6808      	ldr	r0, [r1, #0]
 802d47a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d47e:	6881      	ldr	r1, [r0, #8]
 802d480:	9301      	str	r3, [sp, #4]
 802d482:	f003 f8db 	bl	803063c <_vfiprintf_r>
 802d486:	b003      	add	sp, #12
 802d488:	f85d eb04 	ldr.w	lr, [sp], #4
 802d48c:	b004      	add	sp, #16
 802d48e:	4770      	bx	lr
 802d490:	20000188 	.word	0x20000188

0802d494 <sniprintf>:
 802d494:	b40c      	push	{r2, r3}
 802d496:	b530      	push	{r4, r5, lr}
 802d498:	4b17      	ldr	r3, [pc, #92]	; (802d4f8 <sniprintf+0x64>)
 802d49a:	1e0c      	subs	r4, r1, #0
 802d49c:	681d      	ldr	r5, [r3, #0]
 802d49e:	b09d      	sub	sp, #116	; 0x74
 802d4a0:	da08      	bge.n	802d4b4 <sniprintf+0x20>
 802d4a2:	238b      	movs	r3, #139	; 0x8b
 802d4a4:	602b      	str	r3, [r5, #0]
 802d4a6:	f04f 30ff 	mov.w	r0, #4294967295
 802d4aa:	b01d      	add	sp, #116	; 0x74
 802d4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d4b0:	b002      	add	sp, #8
 802d4b2:	4770      	bx	lr
 802d4b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 802d4b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d4bc:	bf14      	ite	ne
 802d4be:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d4c2:	4623      	moveq	r3, r4
 802d4c4:	9304      	str	r3, [sp, #16]
 802d4c6:	9307      	str	r3, [sp, #28]
 802d4c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d4cc:	9002      	str	r0, [sp, #8]
 802d4ce:	9006      	str	r0, [sp, #24]
 802d4d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d4d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802d4d6:	ab21      	add	r3, sp, #132	; 0x84
 802d4d8:	a902      	add	r1, sp, #8
 802d4da:	4628      	mov	r0, r5
 802d4dc:	9301      	str	r3, [sp, #4]
 802d4de:	f002 fdb3 	bl	8030048 <_svfiprintf_r>
 802d4e2:	1c43      	adds	r3, r0, #1
 802d4e4:	bfbc      	itt	lt
 802d4e6:	238b      	movlt	r3, #139	; 0x8b
 802d4e8:	602b      	strlt	r3, [r5, #0]
 802d4ea:	2c00      	cmp	r4, #0
 802d4ec:	d0dd      	beq.n	802d4aa <sniprintf+0x16>
 802d4ee:	9b02      	ldr	r3, [sp, #8]
 802d4f0:	2200      	movs	r2, #0
 802d4f2:	701a      	strb	r2, [r3, #0]
 802d4f4:	e7d9      	b.n	802d4aa <sniprintf+0x16>
 802d4f6:	bf00      	nop
 802d4f8:	20000188 	.word	0x20000188

0802d4fc <siprintf>:
 802d4fc:	b40e      	push	{r1, r2, r3}
 802d4fe:	b500      	push	{lr}
 802d500:	b09c      	sub	sp, #112	; 0x70
 802d502:	ab1d      	add	r3, sp, #116	; 0x74
 802d504:	9002      	str	r0, [sp, #8]
 802d506:	9006      	str	r0, [sp, #24]
 802d508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d50c:	4809      	ldr	r0, [pc, #36]	; (802d534 <siprintf+0x38>)
 802d50e:	9107      	str	r1, [sp, #28]
 802d510:	9104      	str	r1, [sp, #16]
 802d512:	4909      	ldr	r1, [pc, #36]	; (802d538 <siprintf+0x3c>)
 802d514:	f853 2b04 	ldr.w	r2, [r3], #4
 802d518:	9105      	str	r1, [sp, #20]
 802d51a:	6800      	ldr	r0, [r0, #0]
 802d51c:	9301      	str	r3, [sp, #4]
 802d51e:	a902      	add	r1, sp, #8
 802d520:	f002 fd92 	bl	8030048 <_svfiprintf_r>
 802d524:	9b02      	ldr	r3, [sp, #8]
 802d526:	2200      	movs	r2, #0
 802d528:	701a      	strb	r2, [r3, #0]
 802d52a:	b01c      	add	sp, #112	; 0x70
 802d52c:	f85d eb04 	ldr.w	lr, [sp], #4
 802d530:	b003      	add	sp, #12
 802d532:	4770      	bx	lr
 802d534:	20000188 	.word	0x20000188
 802d538:	ffff0208 	.word	0xffff0208

0802d53c <siscanf>:
 802d53c:	b40e      	push	{r1, r2, r3}
 802d53e:	b510      	push	{r4, lr}
 802d540:	b09f      	sub	sp, #124	; 0x7c
 802d542:	ac21      	add	r4, sp, #132	; 0x84
 802d544:	f44f 7101 	mov.w	r1, #516	; 0x204
 802d548:	f854 2b04 	ldr.w	r2, [r4], #4
 802d54c:	9201      	str	r2, [sp, #4]
 802d54e:	f8ad 101c 	strh.w	r1, [sp, #28]
 802d552:	9004      	str	r0, [sp, #16]
 802d554:	9008      	str	r0, [sp, #32]
 802d556:	f7e2 fea3 	bl	80102a0 <strlen>
 802d55a:	4b0c      	ldr	r3, [pc, #48]	; (802d58c <siscanf+0x50>)
 802d55c:	9005      	str	r0, [sp, #20]
 802d55e:	9009      	str	r0, [sp, #36]	; 0x24
 802d560:	930d      	str	r3, [sp, #52]	; 0x34
 802d562:	480b      	ldr	r0, [pc, #44]	; (802d590 <siscanf+0x54>)
 802d564:	9a01      	ldr	r2, [sp, #4]
 802d566:	6800      	ldr	r0, [r0, #0]
 802d568:	9403      	str	r4, [sp, #12]
 802d56a:	2300      	movs	r3, #0
 802d56c:	9311      	str	r3, [sp, #68]	; 0x44
 802d56e:	9316      	str	r3, [sp, #88]	; 0x58
 802d570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d574:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d578:	a904      	add	r1, sp, #16
 802d57a:	4623      	mov	r3, r4
 802d57c:	f002 febc 	bl	80302f8 <__ssvfiscanf_r>
 802d580:	b01f      	add	sp, #124	; 0x7c
 802d582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d586:	b003      	add	sp, #12
 802d588:	4770      	bx	lr
 802d58a:	bf00      	nop
 802d58c:	0802d5b7 	.word	0x0802d5b7
 802d590:	20000188 	.word	0x20000188

0802d594 <__sread>:
 802d594:	b510      	push	{r4, lr}
 802d596:	460c      	mov	r4, r1
 802d598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d59c:	f000 fa6a 	bl	802da74 <_read_r>
 802d5a0:	2800      	cmp	r0, #0
 802d5a2:	bfab      	itete	ge
 802d5a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d5a6:	89a3      	ldrhlt	r3, [r4, #12]
 802d5a8:	181b      	addge	r3, r3, r0
 802d5aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d5ae:	bfac      	ite	ge
 802d5b0:	6563      	strge	r3, [r4, #84]	; 0x54
 802d5b2:	81a3      	strhlt	r3, [r4, #12]
 802d5b4:	bd10      	pop	{r4, pc}

0802d5b6 <__seofread>:
 802d5b6:	2000      	movs	r0, #0
 802d5b8:	4770      	bx	lr

0802d5ba <__swrite>:
 802d5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d5be:	461f      	mov	r7, r3
 802d5c0:	898b      	ldrh	r3, [r1, #12]
 802d5c2:	05db      	lsls	r3, r3, #23
 802d5c4:	4605      	mov	r5, r0
 802d5c6:	460c      	mov	r4, r1
 802d5c8:	4616      	mov	r6, r2
 802d5ca:	d505      	bpl.n	802d5d8 <__swrite+0x1e>
 802d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d5d0:	2302      	movs	r3, #2
 802d5d2:	2200      	movs	r2, #0
 802d5d4:	f000 fa3c 	bl	802da50 <_lseek_r>
 802d5d8:	89a3      	ldrh	r3, [r4, #12]
 802d5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d5e2:	81a3      	strh	r3, [r4, #12]
 802d5e4:	4632      	mov	r2, r6
 802d5e6:	463b      	mov	r3, r7
 802d5e8:	4628      	mov	r0, r5
 802d5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d5ee:	f000 ba63 	b.w	802dab8 <_write_r>

0802d5f2 <__sseek>:
 802d5f2:	b510      	push	{r4, lr}
 802d5f4:	460c      	mov	r4, r1
 802d5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d5fa:	f000 fa29 	bl	802da50 <_lseek_r>
 802d5fe:	1c43      	adds	r3, r0, #1
 802d600:	89a3      	ldrh	r3, [r4, #12]
 802d602:	bf15      	itete	ne
 802d604:	6560      	strne	r0, [r4, #84]	; 0x54
 802d606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d60e:	81a3      	strheq	r3, [r4, #12]
 802d610:	bf18      	it	ne
 802d612:	81a3      	strhne	r3, [r4, #12]
 802d614:	bd10      	pop	{r4, pc}

0802d616 <__sclose>:
 802d616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d61a:	f000 b9b3 	b.w	802d984 <_close_r>

0802d61e <__swbuf_r>:
 802d61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d620:	460e      	mov	r6, r1
 802d622:	4614      	mov	r4, r2
 802d624:	4605      	mov	r5, r0
 802d626:	b118      	cbz	r0, 802d630 <__swbuf_r+0x12>
 802d628:	6a03      	ldr	r3, [r0, #32]
 802d62a:	b90b      	cbnz	r3, 802d630 <__swbuf_r+0x12>
 802d62c:	f7ff fed8 	bl	802d3e0 <__sinit>
 802d630:	69a3      	ldr	r3, [r4, #24]
 802d632:	60a3      	str	r3, [r4, #8]
 802d634:	89a3      	ldrh	r3, [r4, #12]
 802d636:	071a      	lsls	r2, r3, #28
 802d638:	d525      	bpl.n	802d686 <__swbuf_r+0x68>
 802d63a:	6923      	ldr	r3, [r4, #16]
 802d63c:	b31b      	cbz	r3, 802d686 <__swbuf_r+0x68>
 802d63e:	6823      	ldr	r3, [r4, #0]
 802d640:	6922      	ldr	r2, [r4, #16]
 802d642:	1a98      	subs	r0, r3, r2
 802d644:	6963      	ldr	r3, [r4, #20]
 802d646:	b2f6      	uxtb	r6, r6
 802d648:	4283      	cmp	r3, r0
 802d64a:	4637      	mov	r7, r6
 802d64c:	dc04      	bgt.n	802d658 <__swbuf_r+0x3a>
 802d64e:	4621      	mov	r1, r4
 802d650:	4628      	mov	r0, r5
 802d652:	f003 fae1 	bl	8030c18 <_fflush_r>
 802d656:	b9e0      	cbnz	r0, 802d692 <__swbuf_r+0x74>
 802d658:	68a3      	ldr	r3, [r4, #8]
 802d65a:	3b01      	subs	r3, #1
 802d65c:	60a3      	str	r3, [r4, #8]
 802d65e:	6823      	ldr	r3, [r4, #0]
 802d660:	1c5a      	adds	r2, r3, #1
 802d662:	6022      	str	r2, [r4, #0]
 802d664:	701e      	strb	r6, [r3, #0]
 802d666:	6962      	ldr	r2, [r4, #20]
 802d668:	1c43      	adds	r3, r0, #1
 802d66a:	429a      	cmp	r2, r3
 802d66c:	d004      	beq.n	802d678 <__swbuf_r+0x5a>
 802d66e:	89a3      	ldrh	r3, [r4, #12]
 802d670:	07db      	lsls	r3, r3, #31
 802d672:	d506      	bpl.n	802d682 <__swbuf_r+0x64>
 802d674:	2e0a      	cmp	r6, #10
 802d676:	d104      	bne.n	802d682 <__swbuf_r+0x64>
 802d678:	4621      	mov	r1, r4
 802d67a:	4628      	mov	r0, r5
 802d67c:	f003 facc 	bl	8030c18 <_fflush_r>
 802d680:	b938      	cbnz	r0, 802d692 <__swbuf_r+0x74>
 802d682:	4638      	mov	r0, r7
 802d684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d686:	4621      	mov	r1, r4
 802d688:	4628      	mov	r0, r5
 802d68a:	f000 f805 	bl	802d698 <__swsetup_r>
 802d68e:	2800      	cmp	r0, #0
 802d690:	d0d5      	beq.n	802d63e <__swbuf_r+0x20>
 802d692:	f04f 37ff 	mov.w	r7, #4294967295
 802d696:	e7f4      	b.n	802d682 <__swbuf_r+0x64>

0802d698 <__swsetup_r>:
 802d698:	b538      	push	{r3, r4, r5, lr}
 802d69a:	4b2a      	ldr	r3, [pc, #168]	; (802d744 <__swsetup_r+0xac>)
 802d69c:	4605      	mov	r5, r0
 802d69e:	6818      	ldr	r0, [r3, #0]
 802d6a0:	460c      	mov	r4, r1
 802d6a2:	b118      	cbz	r0, 802d6ac <__swsetup_r+0x14>
 802d6a4:	6a03      	ldr	r3, [r0, #32]
 802d6a6:	b90b      	cbnz	r3, 802d6ac <__swsetup_r+0x14>
 802d6a8:	f7ff fe9a 	bl	802d3e0 <__sinit>
 802d6ac:	89a3      	ldrh	r3, [r4, #12]
 802d6ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d6b2:	0718      	lsls	r0, r3, #28
 802d6b4:	d422      	bmi.n	802d6fc <__swsetup_r+0x64>
 802d6b6:	06d9      	lsls	r1, r3, #27
 802d6b8:	d407      	bmi.n	802d6ca <__swsetup_r+0x32>
 802d6ba:	2309      	movs	r3, #9
 802d6bc:	602b      	str	r3, [r5, #0]
 802d6be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d6c2:	81a3      	strh	r3, [r4, #12]
 802d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 802d6c8:	e034      	b.n	802d734 <__swsetup_r+0x9c>
 802d6ca:	0758      	lsls	r0, r3, #29
 802d6cc:	d512      	bpl.n	802d6f4 <__swsetup_r+0x5c>
 802d6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d6d0:	b141      	cbz	r1, 802d6e4 <__swsetup_r+0x4c>
 802d6d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d6d6:	4299      	cmp	r1, r3
 802d6d8:	d002      	beq.n	802d6e0 <__swsetup_r+0x48>
 802d6da:	4628      	mov	r0, r5
 802d6dc:	f001 f8ca 	bl	802e874 <_free_r>
 802d6e0:	2300      	movs	r3, #0
 802d6e2:	6363      	str	r3, [r4, #52]	; 0x34
 802d6e4:	89a3      	ldrh	r3, [r4, #12]
 802d6e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d6ea:	81a3      	strh	r3, [r4, #12]
 802d6ec:	2300      	movs	r3, #0
 802d6ee:	6063      	str	r3, [r4, #4]
 802d6f0:	6923      	ldr	r3, [r4, #16]
 802d6f2:	6023      	str	r3, [r4, #0]
 802d6f4:	89a3      	ldrh	r3, [r4, #12]
 802d6f6:	f043 0308 	orr.w	r3, r3, #8
 802d6fa:	81a3      	strh	r3, [r4, #12]
 802d6fc:	6923      	ldr	r3, [r4, #16]
 802d6fe:	b94b      	cbnz	r3, 802d714 <__swsetup_r+0x7c>
 802d700:	89a3      	ldrh	r3, [r4, #12]
 802d702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d70a:	d003      	beq.n	802d714 <__swsetup_r+0x7c>
 802d70c:	4621      	mov	r1, r4
 802d70e:	4628      	mov	r0, r5
 802d710:	f003 fad0 	bl	8030cb4 <__smakebuf_r>
 802d714:	89a0      	ldrh	r0, [r4, #12]
 802d716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d71a:	f010 0301 	ands.w	r3, r0, #1
 802d71e:	d00a      	beq.n	802d736 <__swsetup_r+0x9e>
 802d720:	2300      	movs	r3, #0
 802d722:	60a3      	str	r3, [r4, #8]
 802d724:	6963      	ldr	r3, [r4, #20]
 802d726:	425b      	negs	r3, r3
 802d728:	61a3      	str	r3, [r4, #24]
 802d72a:	6923      	ldr	r3, [r4, #16]
 802d72c:	b943      	cbnz	r3, 802d740 <__swsetup_r+0xa8>
 802d72e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d732:	d1c4      	bne.n	802d6be <__swsetup_r+0x26>
 802d734:	bd38      	pop	{r3, r4, r5, pc}
 802d736:	0781      	lsls	r1, r0, #30
 802d738:	bf58      	it	pl
 802d73a:	6963      	ldrpl	r3, [r4, #20]
 802d73c:	60a3      	str	r3, [r4, #8]
 802d73e:	e7f4      	b.n	802d72a <__swsetup_r+0x92>
 802d740:	2000      	movs	r0, #0
 802d742:	e7f7      	b.n	802d734 <__swsetup_r+0x9c>
 802d744:	20000188 	.word	0x20000188

0802d748 <memcmp>:
 802d748:	b510      	push	{r4, lr}
 802d74a:	3901      	subs	r1, #1
 802d74c:	4402      	add	r2, r0
 802d74e:	4290      	cmp	r0, r2
 802d750:	d101      	bne.n	802d756 <memcmp+0xe>
 802d752:	2000      	movs	r0, #0
 802d754:	e005      	b.n	802d762 <memcmp+0x1a>
 802d756:	7803      	ldrb	r3, [r0, #0]
 802d758:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d75c:	42a3      	cmp	r3, r4
 802d75e:	d001      	beq.n	802d764 <memcmp+0x1c>
 802d760:	1b18      	subs	r0, r3, r4
 802d762:	bd10      	pop	{r4, pc}
 802d764:	3001      	adds	r0, #1
 802d766:	e7f2      	b.n	802d74e <memcmp+0x6>

0802d768 <memmove>:
 802d768:	4288      	cmp	r0, r1
 802d76a:	b510      	push	{r4, lr}
 802d76c:	eb01 0402 	add.w	r4, r1, r2
 802d770:	d902      	bls.n	802d778 <memmove+0x10>
 802d772:	4284      	cmp	r4, r0
 802d774:	4623      	mov	r3, r4
 802d776:	d807      	bhi.n	802d788 <memmove+0x20>
 802d778:	1e43      	subs	r3, r0, #1
 802d77a:	42a1      	cmp	r1, r4
 802d77c:	d008      	beq.n	802d790 <memmove+0x28>
 802d77e:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d782:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d786:	e7f8      	b.n	802d77a <memmove+0x12>
 802d788:	4402      	add	r2, r0
 802d78a:	4601      	mov	r1, r0
 802d78c:	428a      	cmp	r2, r1
 802d78e:	d100      	bne.n	802d792 <memmove+0x2a>
 802d790:	bd10      	pop	{r4, pc}
 802d792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d79a:	e7f7      	b.n	802d78c <memmove+0x24>

0802d79c <memset>:
 802d79c:	4402      	add	r2, r0
 802d79e:	4603      	mov	r3, r0
 802d7a0:	4293      	cmp	r3, r2
 802d7a2:	d100      	bne.n	802d7a6 <memset+0xa>
 802d7a4:	4770      	bx	lr
 802d7a6:	f803 1b01 	strb.w	r1, [r3], #1
 802d7aa:	e7f9      	b.n	802d7a0 <memset+0x4>

0802d7ac <strcat>:
 802d7ac:	b510      	push	{r4, lr}
 802d7ae:	4602      	mov	r2, r0
 802d7b0:	7814      	ldrb	r4, [r2, #0]
 802d7b2:	4613      	mov	r3, r2
 802d7b4:	3201      	adds	r2, #1
 802d7b6:	2c00      	cmp	r4, #0
 802d7b8:	d1fa      	bne.n	802d7b0 <strcat+0x4>
 802d7ba:	3b01      	subs	r3, #1
 802d7bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d7c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d7c4:	2a00      	cmp	r2, #0
 802d7c6:	d1f9      	bne.n	802d7bc <strcat+0x10>
 802d7c8:	bd10      	pop	{r4, pc}

0802d7ca <strchr>:
 802d7ca:	b2c9      	uxtb	r1, r1
 802d7cc:	4603      	mov	r3, r0
 802d7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d7d2:	b11a      	cbz	r2, 802d7dc <strchr+0x12>
 802d7d4:	428a      	cmp	r2, r1
 802d7d6:	d1f9      	bne.n	802d7cc <strchr+0x2>
 802d7d8:	4618      	mov	r0, r3
 802d7da:	4770      	bx	lr
 802d7dc:	2900      	cmp	r1, #0
 802d7de:	bf18      	it	ne
 802d7e0:	2300      	movne	r3, #0
 802d7e2:	e7f9      	b.n	802d7d8 <strchr+0xe>

0802d7e4 <strcspn>:
 802d7e4:	b570      	push	{r4, r5, r6, lr}
 802d7e6:	4603      	mov	r3, r0
 802d7e8:	461e      	mov	r6, r3
 802d7ea:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d7ee:	b144      	cbz	r4, 802d802 <strcspn+0x1e>
 802d7f0:	1e4a      	subs	r2, r1, #1
 802d7f2:	e001      	b.n	802d7f8 <strcspn+0x14>
 802d7f4:	42a5      	cmp	r5, r4
 802d7f6:	d004      	beq.n	802d802 <strcspn+0x1e>
 802d7f8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d7fc:	2d00      	cmp	r5, #0
 802d7fe:	d1f9      	bne.n	802d7f4 <strcspn+0x10>
 802d800:	e7f2      	b.n	802d7e8 <strcspn+0x4>
 802d802:	1a30      	subs	r0, r6, r0
 802d804:	bd70      	pop	{r4, r5, r6, pc}

0802d806 <strncat>:
 802d806:	b530      	push	{r4, r5, lr}
 802d808:	4604      	mov	r4, r0
 802d80a:	7825      	ldrb	r5, [r4, #0]
 802d80c:	4623      	mov	r3, r4
 802d80e:	3401      	adds	r4, #1
 802d810:	2d00      	cmp	r5, #0
 802d812:	d1fa      	bne.n	802d80a <strncat+0x4>
 802d814:	3a01      	subs	r2, #1
 802d816:	d304      	bcc.n	802d822 <strncat+0x1c>
 802d818:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d81c:	f803 4b01 	strb.w	r4, [r3], #1
 802d820:	b904      	cbnz	r4, 802d824 <strncat+0x1e>
 802d822:	bd30      	pop	{r4, r5, pc}
 802d824:	2a00      	cmp	r2, #0
 802d826:	d1f5      	bne.n	802d814 <strncat+0xe>
 802d828:	701a      	strb	r2, [r3, #0]
 802d82a:	e7f3      	b.n	802d814 <strncat+0xe>

0802d82c <strncmp>:
 802d82c:	b510      	push	{r4, lr}
 802d82e:	b16a      	cbz	r2, 802d84c <strncmp+0x20>
 802d830:	3901      	subs	r1, #1
 802d832:	1884      	adds	r4, r0, r2
 802d834:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d838:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d83c:	429a      	cmp	r2, r3
 802d83e:	d103      	bne.n	802d848 <strncmp+0x1c>
 802d840:	42a0      	cmp	r0, r4
 802d842:	d001      	beq.n	802d848 <strncmp+0x1c>
 802d844:	2a00      	cmp	r2, #0
 802d846:	d1f5      	bne.n	802d834 <strncmp+0x8>
 802d848:	1ad0      	subs	r0, r2, r3
 802d84a:	bd10      	pop	{r4, pc}
 802d84c:	4610      	mov	r0, r2
 802d84e:	e7fc      	b.n	802d84a <strncmp+0x1e>

0802d850 <strncpy>:
 802d850:	b510      	push	{r4, lr}
 802d852:	3901      	subs	r1, #1
 802d854:	4603      	mov	r3, r0
 802d856:	b132      	cbz	r2, 802d866 <strncpy+0x16>
 802d858:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d85c:	f803 4b01 	strb.w	r4, [r3], #1
 802d860:	3a01      	subs	r2, #1
 802d862:	2c00      	cmp	r4, #0
 802d864:	d1f7      	bne.n	802d856 <strncpy+0x6>
 802d866:	441a      	add	r2, r3
 802d868:	2100      	movs	r1, #0
 802d86a:	4293      	cmp	r3, r2
 802d86c:	d100      	bne.n	802d870 <strncpy+0x20>
 802d86e:	bd10      	pop	{r4, pc}
 802d870:	f803 1b01 	strb.w	r1, [r3], #1
 802d874:	e7f9      	b.n	802d86a <strncpy+0x1a>

0802d876 <strspn>:
 802d876:	b570      	push	{r4, r5, r6, lr}
 802d878:	4603      	mov	r3, r0
 802d87a:	461e      	mov	r6, r3
 802d87c:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d880:	b13c      	cbz	r4, 802d892 <strspn+0x1c>
 802d882:	1e4a      	subs	r2, r1, #1
 802d884:	e001      	b.n	802d88a <strspn+0x14>
 802d886:	42a5      	cmp	r5, r4
 802d888:	d0f7      	beq.n	802d87a <strspn+0x4>
 802d88a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d88e:	2d00      	cmp	r5, #0
 802d890:	d1f9      	bne.n	802d886 <strspn+0x10>
 802d892:	1a30      	subs	r0, r6, r0
 802d894:	bd70      	pop	{r4, r5, r6, pc}
	...

0802d898 <strtok>:
 802d898:	4b16      	ldr	r3, [pc, #88]	; (802d8f4 <strtok+0x5c>)
 802d89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d89c:	681e      	ldr	r6, [r3, #0]
 802d89e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 802d8a0:	4605      	mov	r5, r0
 802d8a2:	b9fc      	cbnz	r4, 802d8e4 <strtok+0x4c>
 802d8a4:	2050      	movs	r0, #80	; 0x50
 802d8a6:	9101      	str	r1, [sp, #4]
 802d8a8:	f7fe fddc 	bl	802c464 <malloc>
 802d8ac:	9901      	ldr	r1, [sp, #4]
 802d8ae:	6470      	str	r0, [r6, #68]	; 0x44
 802d8b0:	4602      	mov	r2, r0
 802d8b2:	b920      	cbnz	r0, 802d8be <strtok+0x26>
 802d8b4:	4b10      	ldr	r3, [pc, #64]	; (802d8f8 <strtok+0x60>)
 802d8b6:	4811      	ldr	r0, [pc, #68]	; (802d8fc <strtok+0x64>)
 802d8b8:	215b      	movs	r1, #91	; 0x5b
 802d8ba:	f7fe fd9f 	bl	802c3fc <__assert_func>
 802d8be:	e9c0 4400 	strd	r4, r4, [r0]
 802d8c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802d8c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802d8ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802d8ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802d8d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802d8d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802d8da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802d8de:	6184      	str	r4, [r0, #24]
 802d8e0:	7704      	strb	r4, [r0, #28]
 802d8e2:	6244      	str	r4, [r0, #36]	; 0x24
 802d8e4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 802d8e6:	2301      	movs	r3, #1
 802d8e8:	4628      	mov	r0, r5
 802d8ea:	b002      	add	sp, #8
 802d8ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d8f0:	f000 b806 	b.w	802d900 <__strtok_r>
 802d8f4:	20000188 	.word	0x20000188
 802d8f8:	08034987 	.word	0x08034987
 802d8fc:	0803499e 	.word	0x0803499e

0802d900 <__strtok_r>:
 802d900:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d902:	b908      	cbnz	r0, 802d908 <__strtok_r+0x8>
 802d904:	6810      	ldr	r0, [r2, #0]
 802d906:	b188      	cbz	r0, 802d92c <__strtok_r+0x2c>
 802d908:	4604      	mov	r4, r0
 802d90a:	4620      	mov	r0, r4
 802d90c:	f814 5b01 	ldrb.w	r5, [r4], #1
 802d910:	460f      	mov	r7, r1
 802d912:	f817 6b01 	ldrb.w	r6, [r7], #1
 802d916:	b91e      	cbnz	r6, 802d920 <__strtok_r+0x20>
 802d918:	b965      	cbnz	r5, 802d934 <__strtok_r+0x34>
 802d91a:	6015      	str	r5, [r2, #0]
 802d91c:	4628      	mov	r0, r5
 802d91e:	e005      	b.n	802d92c <__strtok_r+0x2c>
 802d920:	42b5      	cmp	r5, r6
 802d922:	d1f6      	bne.n	802d912 <__strtok_r+0x12>
 802d924:	2b00      	cmp	r3, #0
 802d926:	d1f0      	bne.n	802d90a <__strtok_r+0xa>
 802d928:	6014      	str	r4, [r2, #0]
 802d92a:	7003      	strb	r3, [r0, #0]
 802d92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d92e:	461c      	mov	r4, r3
 802d930:	e00c      	b.n	802d94c <__strtok_r+0x4c>
 802d932:	b915      	cbnz	r5, 802d93a <__strtok_r+0x3a>
 802d934:	f814 3b01 	ldrb.w	r3, [r4], #1
 802d938:	460e      	mov	r6, r1
 802d93a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802d93e:	42ab      	cmp	r3, r5
 802d940:	d1f7      	bne.n	802d932 <__strtok_r+0x32>
 802d942:	2b00      	cmp	r3, #0
 802d944:	d0f3      	beq.n	802d92e <__strtok_r+0x2e>
 802d946:	2300      	movs	r3, #0
 802d948:	f804 3c01 	strb.w	r3, [r4, #-1]
 802d94c:	6014      	str	r4, [r2, #0]
 802d94e:	e7ed      	b.n	802d92c <__strtok_r+0x2c>

0802d950 <strstr>:
 802d950:	780a      	ldrb	r2, [r1, #0]
 802d952:	b570      	push	{r4, r5, r6, lr}
 802d954:	b96a      	cbnz	r2, 802d972 <strstr+0x22>
 802d956:	bd70      	pop	{r4, r5, r6, pc}
 802d958:	429a      	cmp	r2, r3
 802d95a:	d109      	bne.n	802d970 <strstr+0x20>
 802d95c:	460c      	mov	r4, r1
 802d95e:	4605      	mov	r5, r0
 802d960:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d964:	2b00      	cmp	r3, #0
 802d966:	d0f6      	beq.n	802d956 <strstr+0x6>
 802d968:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802d96c:	429e      	cmp	r6, r3
 802d96e:	d0f7      	beq.n	802d960 <strstr+0x10>
 802d970:	3001      	adds	r0, #1
 802d972:	7803      	ldrb	r3, [r0, #0]
 802d974:	2b00      	cmp	r3, #0
 802d976:	d1ef      	bne.n	802d958 <strstr+0x8>
 802d978:	4618      	mov	r0, r3
 802d97a:	e7ec      	b.n	802d956 <strstr+0x6>

0802d97c <_localeconv_r>:
 802d97c:	4800      	ldr	r0, [pc, #0]	; (802d980 <_localeconv_r+0x4>)
 802d97e:	4770      	bx	lr
 802d980:	2000027c 	.word	0x2000027c

0802d984 <_close_r>:
 802d984:	b538      	push	{r3, r4, r5, lr}
 802d986:	4d06      	ldr	r5, [pc, #24]	; (802d9a0 <_close_r+0x1c>)
 802d988:	2300      	movs	r3, #0
 802d98a:	4604      	mov	r4, r0
 802d98c:	4608      	mov	r0, r1
 802d98e:	602b      	str	r3, [r5, #0]
 802d990:	f7e5 f957 	bl	8012c42 <_close>
 802d994:	1c43      	adds	r3, r0, #1
 802d996:	d102      	bne.n	802d99e <_close_r+0x1a>
 802d998:	682b      	ldr	r3, [r5, #0]
 802d99a:	b103      	cbz	r3, 802d99e <_close_r+0x1a>
 802d99c:	6023      	str	r3, [r4, #0]
 802d99e:	bd38      	pop	{r3, r4, r5, pc}
 802d9a0:	2000daec 	.word	0x2000daec

0802d9a4 <_reclaim_reent>:
 802d9a4:	4b29      	ldr	r3, [pc, #164]	; (802da4c <_reclaim_reent+0xa8>)
 802d9a6:	681b      	ldr	r3, [r3, #0]
 802d9a8:	4283      	cmp	r3, r0
 802d9aa:	b570      	push	{r4, r5, r6, lr}
 802d9ac:	4604      	mov	r4, r0
 802d9ae:	d04b      	beq.n	802da48 <_reclaim_reent+0xa4>
 802d9b0:	69c3      	ldr	r3, [r0, #28]
 802d9b2:	b143      	cbz	r3, 802d9c6 <_reclaim_reent+0x22>
 802d9b4:	68db      	ldr	r3, [r3, #12]
 802d9b6:	2b00      	cmp	r3, #0
 802d9b8:	d144      	bne.n	802da44 <_reclaim_reent+0xa0>
 802d9ba:	69e3      	ldr	r3, [r4, #28]
 802d9bc:	6819      	ldr	r1, [r3, #0]
 802d9be:	b111      	cbz	r1, 802d9c6 <_reclaim_reent+0x22>
 802d9c0:	4620      	mov	r0, r4
 802d9c2:	f000 ff57 	bl	802e874 <_free_r>
 802d9c6:	6961      	ldr	r1, [r4, #20]
 802d9c8:	b111      	cbz	r1, 802d9d0 <_reclaim_reent+0x2c>
 802d9ca:	4620      	mov	r0, r4
 802d9cc:	f000 ff52 	bl	802e874 <_free_r>
 802d9d0:	69e1      	ldr	r1, [r4, #28]
 802d9d2:	b111      	cbz	r1, 802d9da <_reclaim_reent+0x36>
 802d9d4:	4620      	mov	r0, r4
 802d9d6:	f000 ff4d 	bl	802e874 <_free_r>
 802d9da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802d9dc:	b111      	cbz	r1, 802d9e4 <_reclaim_reent+0x40>
 802d9de:	4620      	mov	r0, r4
 802d9e0:	f000 ff48 	bl	802e874 <_free_r>
 802d9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d9e6:	b111      	cbz	r1, 802d9ee <_reclaim_reent+0x4a>
 802d9e8:	4620      	mov	r0, r4
 802d9ea:	f000 ff43 	bl	802e874 <_free_r>
 802d9ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d9f0:	b111      	cbz	r1, 802d9f8 <_reclaim_reent+0x54>
 802d9f2:	4620      	mov	r0, r4
 802d9f4:	f000 ff3e 	bl	802e874 <_free_r>
 802d9f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802d9fa:	b111      	cbz	r1, 802da02 <_reclaim_reent+0x5e>
 802d9fc:	4620      	mov	r0, r4
 802d9fe:	f000 ff39 	bl	802e874 <_free_r>
 802da02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802da04:	b111      	cbz	r1, 802da0c <_reclaim_reent+0x68>
 802da06:	4620      	mov	r0, r4
 802da08:	f000 ff34 	bl	802e874 <_free_r>
 802da0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802da0e:	b111      	cbz	r1, 802da16 <_reclaim_reent+0x72>
 802da10:	4620      	mov	r0, r4
 802da12:	f000 ff2f 	bl	802e874 <_free_r>
 802da16:	6a23      	ldr	r3, [r4, #32]
 802da18:	b1b3      	cbz	r3, 802da48 <_reclaim_reent+0xa4>
 802da1a:	4620      	mov	r0, r4
 802da1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802da20:	4718      	bx	r3
 802da22:	5949      	ldr	r1, [r1, r5]
 802da24:	b941      	cbnz	r1, 802da38 <_reclaim_reent+0x94>
 802da26:	3504      	adds	r5, #4
 802da28:	69e3      	ldr	r3, [r4, #28]
 802da2a:	2d80      	cmp	r5, #128	; 0x80
 802da2c:	68d9      	ldr	r1, [r3, #12]
 802da2e:	d1f8      	bne.n	802da22 <_reclaim_reent+0x7e>
 802da30:	4620      	mov	r0, r4
 802da32:	f000 ff1f 	bl	802e874 <_free_r>
 802da36:	e7c0      	b.n	802d9ba <_reclaim_reent+0x16>
 802da38:	680e      	ldr	r6, [r1, #0]
 802da3a:	4620      	mov	r0, r4
 802da3c:	f000 ff1a 	bl	802e874 <_free_r>
 802da40:	4631      	mov	r1, r6
 802da42:	e7ef      	b.n	802da24 <_reclaim_reent+0x80>
 802da44:	2500      	movs	r5, #0
 802da46:	e7ef      	b.n	802da28 <_reclaim_reent+0x84>
 802da48:	bd70      	pop	{r4, r5, r6, pc}
 802da4a:	bf00      	nop
 802da4c:	20000188 	.word	0x20000188

0802da50 <_lseek_r>:
 802da50:	b538      	push	{r3, r4, r5, lr}
 802da52:	4d07      	ldr	r5, [pc, #28]	; (802da70 <_lseek_r+0x20>)
 802da54:	4604      	mov	r4, r0
 802da56:	4608      	mov	r0, r1
 802da58:	4611      	mov	r1, r2
 802da5a:	2200      	movs	r2, #0
 802da5c:	602a      	str	r2, [r5, #0]
 802da5e:	461a      	mov	r2, r3
 802da60:	f7e5 f916 	bl	8012c90 <_lseek>
 802da64:	1c43      	adds	r3, r0, #1
 802da66:	d102      	bne.n	802da6e <_lseek_r+0x1e>
 802da68:	682b      	ldr	r3, [r5, #0]
 802da6a:	b103      	cbz	r3, 802da6e <_lseek_r+0x1e>
 802da6c:	6023      	str	r3, [r4, #0]
 802da6e:	bd38      	pop	{r3, r4, r5, pc}
 802da70:	2000daec 	.word	0x2000daec

0802da74 <_read_r>:
 802da74:	b538      	push	{r3, r4, r5, lr}
 802da76:	4d07      	ldr	r5, [pc, #28]	; (802da94 <_read_r+0x20>)
 802da78:	4604      	mov	r4, r0
 802da7a:	4608      	mov	r0, r1
 802da7c:	4611      	mov	r1, r2
 802da7e:	2200      	movs	r2, #0
 802da80:	602a      	str	r2, [r5, #0]
 802da82:	461a      	mov	r2, r3
 802da84:	f7e5 f8a4 	bl	8012bd0 <_read>
 802da88:	1c43      	adds	r3, r0, #1
 802da8a:	d102      	bne.n	802da92 <_read_r+0x1e>
 802da8c:	682b      	ldr	r3, [r5, #0]
 802da8e:	b103      	cbz	r3, 802da92 <_read_r+0x1e>
 802da90:	6023      	str	r3, [r4, #0]
 802da92:	bd38      	pop	{r3, r4, r5, pc}
 802da94:	2000daec 	.word	0x2000daec

0802da98 <_sbrk_r>:
 802da98:	b538      	push	{r3, r4, r5, lr}
 802da9a:	4d06      	ldr	r5, [pc, #24]	; (802dab4 <_sbrk_r+0x1c>)
 802da9c:	2300      	movs	r3, #0
 802da9e:	4604      	mov	r4, r0
 802daa0:	4608      	mov	r0, r1
 802daa2:	602b      	str	r3, [r5, #0]
 802daa4:	f7e5 f902 	bl	8012cac <_sbrk>
 802daa8:	1c43      	adds	r3, r0, #1
 802daaa:	d102      	bne.n	802dab2 <_sbrk_r+0x1a>
 802daac:	682b      	ldr	r3, [r5, #0]
 802daae:	b103      	cbz	r3, 802dab2 <_sbrk_r+0x1a>
 802dab0:	6023      	str	r3, [r4, #0]
 802dab2:	bd38      	pop	{r3, r4, r5, pc}
 802dab4:	2000daec 	.word	0x2000daec

0802dab8 <_write_r>:
 802dab8:	b538      	push	{r3, r4, r5, lr}
 802daba:	4d07      	ldr	r5, [pc, #28]	; (802dad8 <_write_r+0x20>)
 802dabc:	4604      	mov	r4, r0
 802dabe:	4608      	mov	r0, r1
 802dac0:	4611      	mov	r1, r2
 802dac2:	2200      	movs	r2, #0
 802dac4:	602a      	str	r2, [r5, #0]
 802dac6:	461a      	mov	r2, r3
 802dac8:	f7e5 f89f 	bl	8012c0a <_write>
 802dacc:	1c43      	adds	r3, r0, #1
 802dace:	d102      	bne.n	802dad6 <_write_r+0x1e>
 802dad0:	682b      	ldr	r3, [r5, #0]
 802dad2:	b103      	cbz	r3, 802dad6 <_write_r+0x1e>
 802dad4:	6023      	str	r3, [r4, #0]
 802dad6:	bd38      	pop	{r3, r4, r5, pc}
 802dad8:	2000daec 	.word	0x2000daec

0802dadc <__errno>:
 802dadc:	4b01      	ldr	r3, [pc, #4]	; (802dae4 <__errno+0x8>)
 802dade:	6818      	ldr	r0, [r3, #0]
 802dae0:	4770      	bx	lr
 802dae2:	bf00      	nop
 802dae4:	20000188 	.word	0x20000188

0802dae8 <__libc_init_array>:
 802dae8:	b570      	push	{r4, r5, r6, lr}
 802daea:	4d0d      	ldr	r5, [pc, #52]	; (802db20 <__libc_init_array+0x38>)
 802daec:	4c0d      	ldr	r4, [pc, #52]	; (802db24 <__libc_init_array+0x3c>)
 802daee:	1b64      	subs	r4, r4, r5
 802daf0:	10a4      	asrs	r4, r4, #2
 802daf2:	2600      	movs	r6, #0
 802daf4:	42a6      	cmp	r6, r4
 802daf6:	d109      	bne.n	802db0c <__libc_init_array+0x24>
 802daf8:	4d0b      	ldr	r5, [pc, #44]	; (802db28 <__libc_init_array+0x40>)
 802dafa:	4c0c      	ldr	r4, [pc, #48]	; (802db2c <__libc_init_array+0x44>)
 802dafc:	f003 fe1a 	bl	8031734 <_init>
 802db00:	1b64      	subs	r4, r4, r5
 802db02:	10a4      	asrs	r4, r4, #2
 802db04:	2600      	movs	r6, #0
 802db06:	42a6      	cmp	r6, r4
 802db08:	d105      	bne.n	802db16 <__libc_init_array+0x2e>
 802db0a:	bd70      	pop	{r4, r5, r6, pc}
 802db0c:	f855 3b04 	ldr.w	r3, [r5], #4
 802db10:	4798      	blx	r3
 802db12:	3601      	adds	r6, #1
 802db14:	e7ee      	b.n	802daf4 <__libc_init_array+0xc>
 802db16:	f855 3b04 	ldr.w	r3, [r5], #4
 802db1a:	4798      	blx	r3
 802db1c:	3601      	adds	r6, #1
 802db1e:	e7f2      	b.n	802db06 <__libc_init_array+0x1e>
 802db20:	08034db8 	.word	0x08034db8
 802db24:	08034db8 	.word	0x08034db8
 802db28:	08034db8 	.word	0x08034db8
 802db2c:	08034dbc 	.word	0x08034dbc

0802db30 <__retarget_lock_init_recursive>:
 802db30:	4770      	bx	lr

0802db32 <__retarget_lock_acquire_recursive>:
 802db32:	4770      	bx	lr

0802db34 <__retarget_lock_release_recursive>:
 802db34:	4770      	bx	lr

0802db36 <strcpy>:
 802db36:	4603      	mov	r3, r0
 802db38:	f811 2b01 	ldrb.w	r2, [r1], #1
 802db3c:	f803 2b01 	strb.w	r2, [r3], #1
 802db40:	2a00      	cmp	r2, #0
 802db42:	d1f9      	bne.n	802db38 <strcpy+0x2>
 802db44:	4770      	bx	lr

0802db46 <memcpy>:
 802db46:	440a      	add	r2, r1
 802db48:	4291      	cmp	r1, r2
 802db4a:	f100 33ff 	add.w	r3, r0, #4294967295
 802db4e:	d100      	bne.n	802db52 <memcpy+0xc>
 802db50:	4770      	bx	lr
 802db52:	b510      	push	{r4, lr}
 802db54:	f811 4b01 	ldrb.w	r4, [r1], #1
 802db58:	f803 4f01 	strb.w	r4, [r3, #1]!
 802db5c:	4291      	cmp	r1, r2
 802db5e:	d1f9      	bne.n	802db54 <memcpy+0xe>
 802db60:	bd10      	pop	{r4, pc}
	...

0802db64 <nanf>:
 802db64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802db6c <nanf+0x8>
 802db68:	4770      	bx	lr
 802db6a:	bf00      	nop
 802db6c:	7fc00000 	.word	0x7fc00000

0802db70 <abort>:
 802db70:	b508      	push	{r3, lr}
 802db72:	2006      	movs	r0, #6
 802db74:	f003 f976 	bl	8030e64 <raise>
 802db78:	2001      	movs	r0, #1
 802db7a:	f7e5 f81f 	bl	8012bbc <_exit>

0802db7e <quorem>:
 802db7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802db82:	6903      	ldr	r3, [r0, #16]
 802db84:	690c      	ldr	r4, [r1, #16]
 802db86:	42a3      	cmp	r3, r4
 802db88:	4607      	mov	r7, r0
 802db8a:	db7e      	blt.n	802dc8a <quorem+0x10c>
 802db8c:	3c01      	subs	r4, #1
 802db8e:	f101 0814 	add.w	r8, r1, #20
 802db92:	f100 0514 	add.w	r5, r0, #20
 802db96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802db9a:	9301      	str	r3, [sp, #4]
 802db9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802dba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802dba4:	3301      	adds	r3, #1
 802dba6:	429a      	cmp	r2, r3
 802dba8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802dbac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802dbb0:	fbb2 f6f3 	udiv	r6, r2, r3
 802dbb4:	d331      	bcc.n	802dc1a <quorem+0x9c>
 802dbb6:	f04f 0e00 	mov.w	lr, #0
 802dbba:	4640      	mov	r0, r8
 802dbbc:	46ac      	mov	ip, r5
 802dbbe:	46f2      	mov	sl, lr
 802dbc0:	f850 2b04 	ldr.w	r2, [r0], #4
 802dbc4:	b293      	uxth	r3, r2
 802dbc6:	fb06 e303 	mla	r3, r6, r3, lr
 802dbca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802dbce:	0c1a      	lsrs	r2, r3, #16
 802dbd0:	b29b      	uxth	r3, r3
 802dbd2:	ebaa 0303 	sub.w	r3, sl, r3
 802dbd6:	f8dc a000 	ldr.w	sl, [ip]
 802dbda:	fa13 f38a 	uxtah	r3, r3, sl
 802dbde:	fb06 220e 	mla	r2, r6, lr, r2
 802dbe2:	9300      	str	r3, [sp, #0]
 802dbe4:	9b00      	ldr	r3, [sp, #0]
 802dbe6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802dbea:	b292      	uxth	r2, r2
 802dbec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802dbf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802dbf4:	f8bd 3000 	ldrh.w	r3, [sp]
 802dbf8:	4581      	cmp	r9, r0
 802dbfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802dbfe:	f84c 3b04 	str.w	r3, [ip], #4
 802dc02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802dc06:	d2db      	bcs.n	802dbc0 <quorem+0x42>
 802dc08:	f855 300b 	ldr.w	r3, [r5, fp]
 802dc0c:	b92b      	cbnz	r3, 802dc1a <quorem+0x9c>
 802dc0e:	9b01      	ldr	r3, [sp, #4]
 802dc10:	3b04      	subs	r3, #4
 802dc12:	429d      	cmp	r5, r3
 802dc14:	461a      	mov	r2, r3
 802dc16:	d32c      	bcc.n	802dc72 <quorem+0xf4>
 802dc18:	613c      	str	r4, [r7, #16]
 802dc1a:	4638      	mov	r0, r7
 802dc1c:	f001 f93c 	bl	802ee98 <__mcmp>
 802dc20:	2800      	cmp	r0, #0
 802dc22:	db22      	blt.n	802dc6a <quorem+0xec>
 802dc24:	3601      	adds	r6, #1
 802dc26:	4629      	mov	r1, r5
 802dc28:	2000      	movs	r0, #0
 802dc2a:	f858 2b04 	ldr.w	r2, [r8], #4
 802dc2e:	f8d1 c000 	ldr.w	ip, [r1]
 802dc32:	b293      	uxth	r3, r2
 802dc34:	1ac3      	subs	r3, r0, r3
 802dc36:	0c12      	lsrs	r2, r2, #16
 802dc38:	fa13 f38c 	uxtah	r3, r3, ip
 802dc3c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802dc40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802dc44:	b29b      	uxth	r3, r3
 802dc46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802dc4a:	45c1      	cmp	r9, r8
 802dc4c:	f841 3b04 	str.w	r3, [r1], #4
 802dc50:	ea4f 4022 	mov.w	r0, r2, asr #16
 802dc54:	d2e9      	bcs.n	802dc2a <quorem+0xac>
 802dc56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802dc5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802dc5e:	b922      	cbnz	r2, 802dc6a <quorem+0xec>
 802dc60:	3b04      	subs	r3, #4
 802dc62:	429d      	cmp	r5, r3
 802dc64:	461a      	mov	r2, r3
 802dc66:	d30a      	bcc.n	802dc7e <quorem+0x100>
 802dc68:	613c      	str	r4, [r7, #16]
 802dc6a:	4630      	mov	r0, r6
 802dc6c:	b003      	add	sp, #12
 802dc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dc72:	6812      	ldr	r2, [r2, #0]
 802dc74:	3b04      	subs	r3, #4
 802dc76:	2a00      	cmp	r2, #0
 802dc78:	d1ce      	bne.n	802dc18 <quorem+0x9a>
 802dc7a:	3c01      	subs	r4, #1
 802dc7c:	e7c9      	b.n	802dc12 <quorem+0x94>
 802dc7e:	6812      	ldr	r2, [r2, #0]
 802dc80:	3b04      	subs	r3, #4
 802dc82:	2a00      	cmp	r2, #0
 802dc84:	d1f0      	bne.n	802dc68 <quorem+0xea>
 802dc86:	3c01      	subs	r4, #1
 802dc88:	e7eb      	b.n	802dc62 <quorem+0xe4>
 802dc8a:	2000      	movs	r0, #0
 802dc8c:	e7ee      	b.n	802dc6c <quorem+0xee>
	...

0802dc90 <_dtoa_r>:
 802dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dc94:	ed2d 8b04 	vpush	{d8-d9}
 802dc98:	69c5      	ldr	r5, [r0, #28]
 802dc9a:	b093      	sub	sp, #76	; 0x4c
 802dc9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 802dca0:	ec57 6b10 	vmov	r6, r7, d0
 802dca4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802dca8:	9107      	str	r1, [sp, #28]
 802dcaa:	4604      	mov	r4, r0
 802dcac:	920a      	str	r2, [sp, #40]	; 0x28
 802dcae:	930d      	str	r3, [sp, #52]	; 0x34
 802dcb0:	b975      	cbnz	r5, 802dcd0 <_dtoa_r+0x40>
 802dcb2:	2010      	movs	r0, #16
 802dcb4:	f7fe fbd6 	bl	802c464 <malloc>
 802dcb8:	4602      	mov	r2, r0
 802dcba:	61e0      	str	r0, [r4, #28]
 802dcbc:	b920      	cbnz	r0, 802dcc8 <_dtoa_r+0x38>
 802dcbe:	4bae      	ldr	r3, [pc, #696]	; (802df78 <_dtoa_r+0x2e8>)
 802dcc0:	21ef      	movs	r1, #239	; 0xef
 802dcc2:	48ae      	ldr	r0, [pc, #696]	; (802df7c <_dtoa_r+0x2ec>)
 802dcc4:	f7fe fb9a 	bl	802c3fc <__assert_func>
 802dcc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802dccc:	6005      	str	r5, [r0, #0]
 802dcce:	60c5      	str	r5, [r0, #12]
 802dcd0:	69e3      	ldr	r3, [r4, #28]
 802dcd2:	6819      	ldr	r1, [r3, #0]
 802dcd4:	b151      	cbz	r1, 802dcec <_dtoa_r+0x5c>
 802dcd6:	685a      	ldr	r2, [r3, #4]
 802dcd8:	604a      	str	r2, [r1, #4]
 802dcda:	2301      	movs	r3, #1
 802dcdc:	4093      	lsls	r3, r2
 802dcde:	608b      	str	r3, [r1, #8]
 802dce0:	4620      	mov	r0, r4
 802dce2:	f000 fe53 	bl	802e98c <_Bfree>
 802dce6:	69e3      	ldr	r3, [r4, #28]
 802dce8:	2200      	movs	r2, #0
 802dcea:	601a      	str	r2, [r3, #0]
 802dcec:	1e3b      	subs	r3, r7, #0
 802dcee:	bfbb      	ittet	lt
 802dcf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802dcf4:	9303      	strlt	r3, [sp, #12]
 802dcf6:	2300      	movge	r3, #0
 802dcf8:	2201      	movlt	r2, #1
 802dcfa:	bfac      	ite	ge
 802dcfc:	f8c8 3000 	strge.w	r3, [r8]
 802dd00:	f8c8 2000 	strlt.w	r2, [r8]
 802dd04:	4b9e      	ldr	r3, [pc, #632]	; (802df80 <_dtoa_r+0x2f0>)
 802dd06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802dd0a:	ea33 0308 	bics.w	r3, r3, r8
 802dd0e:	d11b      	bne.n	802dd48 <_dtoa_r+0xb8>
 802dd10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802dd12:	f242 730f 	movw	r3, #9999	; 0x270f
 802dd16:	6013      	str	r3, [r2, #0]
 802dd18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802dd1c:	4333      	orrs	r3, r6
 802dd1e:	f000 8593 	beq.w	802e848 <_dtoa_r+0xbb8>
 802dd22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802dd24:	b963      	cbnz	r3, 802dd40 <_dtoa_r+0xb0>
 802dd26:	4b97      	ldr	r3, [pc, #604]	; (802df84 <_dtoa_r+0x2f4>)
 802dd28:	e027      	b.n	802dd7a <_dtoa_r+0xea>
 802dd2a:	4b97      	ldr	r3, [pc, #604]	; (802df88 <_dtoa_r+0x2f8>)
 802dd2c:	9300      	str	r3, [sp, #0]
 802dd2e:	3308      	adds	r3, #8
 802dd30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802dd32:	6013      	str	r3, [r2, #0]
 802dd34:	9800      	ldr	r0, [sp, #0]
 802dd36:	b013      	add	sp, #76	; 0x4c
 802dd38:	ecbd 8b04 	vpop	{d8-d9}
 802dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dd40:	4b90      	ldr	r3, [pc, #576]	; (802df84 <_dtoa_r+0x2f4>)
 802dd42:	9300      	str	r3, [sp, #0]
 802dd44:	3303      	adds	r3, #3
 802dd46:	e7f3      	b.n	802dd30 <_dtoa_r+0xa0>
 802dd48:	ed9d 7b02 	vldr	d7, [sp, #8]
 802dd4c:	2200      	movs	r2, #0
 802dd4e:	ec51 0b17 	vmov	r0, r1, d7
 802dd52:	eeb0 8a47 	vmov.f32	s16, s14
 802dd56:	eef0 8a67 	vmov.f32	s17, s15
 802dd5a:	2300      	movs	r3, #0
 802dd5c:	f7e2 fecc 	bl	8010af8 <__aeabi_dcmpeq>
 802dd60:	4681      	mov	r9, r0
 802dd62:	b160      	cbz	r0, 802dd7e <_dtoa_r+0xee>
 802dd64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802dd66:	2301      	movs	r3, #1
 802dd68:	6013      	str	r3, [r2, #0]
 802dd6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802dd6c:	2b00      	cmp	r3, #0
 802dd6e:	f000 8568 	beq.w	802e842 <_dtoa_r+0xbb2>
 802dd72:	4b86      	ldr	r3, [pc, #536]	; (802df8c <_dtoa_r+0x2fc>)
 802dd74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802dd76:	6013      	str	r3, [r2, #0]
 802dd78:	3b01      	subs	r3, #1
 802dd7a:	9300      	str	r3, [sp, #0]
 802dd7c:	e7da      	b.n	802dd34 <_dtoa_r+0xa4>
 802dd7e:	aa10      	add	r2, sp, #64	; 0x40
 802dd80:	a911      	add	r1, sp, #68	; 0x44
 802dd82:	4620      	mov	r0, r4
 802dd84:	eeb0 0a48 	vmov.f32	s0, s16
 802dd88:	eef0 0a68 	vmov.f32	s1, s17
 802dd8c:	f001 f99a 	bl	802f0c4 <__d2b>
 802dd90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802dd94:	4682      	mov	sl, r0
 802dd96:	2d00      	cmp	r5, #0
 802dd98:	d07f      	beq.n	802de9a <_dtoa_r+0x20a>
 802dd9a:	ee18 3a90 	vmov	r3, s17
 802dd9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802dda2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802dda6:	ec51 0b18 	vmov	r0, r1, d8
 802ddaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802ddae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802ddb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802ddb6:	4619      	mov	r1, r3
 802ddb8:	2200      	movs	r2, #0
 802ddba:	4b75      	ldr	r3, [pc, #468]	; (802df90 <_dtoa_r+0x300>)
 802ddbc:	f7e2 fa7c 	bl	80102b8 <__aeabi_dsub>
 802ddc0:	a367      	add	r3, pc, #412	; (adr r3, 802df60 <_dtoa_r+0x2d0>)
 802ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddc6:	f7e2 fc2f 	bl	8010628 <__aeabi_dmul>
 802ddca:	a367      	add	r3, pc, #412	; (adr r3, 802df68 <_dtoa_r+0x2d8>)
 802ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddd0:	f7e2 fa74 	bl	80102bc <__adddf3>
 802ddd4:	4606      	mov	r6, r0
 802ddd6:	4628      	mov	r0, r5
 802ddd8:	460f      	mov	r7, r1
 802ddda:	f7e2 fbbb 	bl	8010554 <__aeabi_i2d>
 802ddde:	a364      	add	r3, pc, #400	; (adr r3, 802df70 <_dtoa_r+0x2e0>)
 802dde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dde4:	f7e2 fc20 	bl	8010628 <__aeabi_dmul>
 802dde8:	4602      	mov	r2, r0
 802ddea:	460b      	mov	r3, r1
 802ddec:	4630      	mov	r0, r6
 802ddee:	4639      	mov	r1, r7
 802ddf0:	f7e2 fa64 	bl	80102bc <__adddf3>
 802ddf4:	4606      	mov	r6, r0
 802ddf6:	460f      	mov	r7, r1
 802ddf8:	f7e2 fec6 	bl	8010b88 <__aeabi_d2iz>
 802ddfc:	2200      	movs	r2, #0
 802ddfe:	4683      	mov	fp, r0
 802de00:	2300      	movs	r3, #0
 802de02:	4630      	mov	r0, r6
 802de04:	4639      	mov	r1, r7
 802de06:	f7e2 fe81 	bl	8010b0c <__aeabi_dcmplt>
 802de0a:	b148      	cbz	r0, 802de20 <_dtoa_r+0x190>
 802de0c:	4658      	mov	r0, fp
 802de0e:	f7e2 fba1 	bl	8010554 <__aeabi_i2d>
 802de12:	4632      	mov	r2, r6
 802de14:	463b      	mov	r3, r7
 802de16:	f7e2 fe6f 	bl	8010af8 <__aeabi_dcmpeq>
 802de1a:	b908      	cbnz	r0, 802de20 <_dtoa_r+0x190>
 802de1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802de20:	f1bb 0f16 	cmp.w	fp, #22
 802de24:	d857      	bhi.n	802ded6 <_dtoa_r+0x246>
 802de26:	4b5b      	ldr	r3, [pc, #364]	; (802df94 <_dtoa_r+0x304>)
 802de28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de30:	ec51 0b18 	vmov	r0, r1, d8
 802de34:	f7e2 fe6a 	bl	8010b0c <__aeabi_dcmplt>
 802de38:	2800      	cmp	r0, #0
 802de3a:	d04e      	beq.n	802deda <_dtoa_r+0x24a>
 802de3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802de40:	2300      	movs	r3, #0
 802de42:	930c      	str	r3, [sp, #48]	; 0x30
 802de44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802de46:	1b5b      	subs	r3, r3, r5
 802de48:	1e5a      	subs	r2, r3, #1
 802de4a:	bf45      	ittet	mi
 802de4c:	f1c3 0301 	rsbmi	r3, r3, #1
 802de50:	9305      	strmi	r3, [sp, #20]
 802de52:	2300      	movpl	r3, #0
 802de54:	2300      	movmi	r3, #0
 802de56:	9206      	str	r2, [sp, #24]
 802de58:	bf54      	ite	pl
 802de5a:	9305      	strpl	r3, [sp, #20]
 802de5c:	9306      	strmi	r3, [sp, #24]
 802de5e:	f1bb 0f00 	cmp.w	fp, #0
 802de62:	db3c      	blt.n	802dede <_dtoa_r+0x24e>
 802de64:	9b06      	ldr	r3, [sp, #24]
 802de66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802de6a:	445b      	add	r3, fp
 802de6c:	9306      	str	r3, [sp, #24]
 802de6e:	2300      	movs	r3, #0
 802de70:	9308      	str	r3, [sp, #32]
 802de72:	9b07      	ldr	r3, [sp, #28]
 802de74:	2b09      	cmp	r3, #9
 802de76:	d868      	bhi.n	802df4a <_dtoa_r+0x2ba>
 802de78:	2b05      	cmp	r3, #5
 802de7a:	bfc4      	itt	gt
 802de7c:	3b04      	subgt	r3, #4
 802de7e:	9307      	strgt	r3, [sp, #28]
 802de80:	9b07      	ldr	r3, [sp, #28]
 802de82:	f1a3 0302 	sub.w	r3, r3, #2
 802de86:	bfcc      	ite	gt
 802de88:	2500      	movgt	r5, #0
 802de8a:	2501      	movle	r5, #1
 802de8c:	2b03      	cmp	r3, #3
 802de8e:	f200 8085 	bhi.w	802df9c <_dtoa_r+0x30c>
 802de92:	e8df f003 	tbb	[pc, r3]
 802de96:	3b2e      	.short	0x3b2e
 802de98:	5839      	.short	0x5839
 802de9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802de9e:	441d      	add	r5, r3
 802dea0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802dea4:	2b20      	cmp	r3, #32
 802dea6:	bfc1      	itttt	gt
 802dea8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802deac:	fa08 f803 	lslgt.w	r8, r8, r3
 802deb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802deb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 802deb8:	bfd6      	itet	le
 802deba:	f1c3 0320 	rsble	r3, r3, #32
 802debe:	ea48 0003 	orrgt.w	r0, r8, r3
 802dec2:	fa06 f003 	lslle.w	r0, r6, r3
 802dec6:	f7e2 fb35 	bl	8010534 <__aeabi_ui2d>
 802deca:	2201      	movs	r2, #1
 802decc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802ded0:	3d01      	subs	r5, #1
 802ded2:	920e      	str	r2, [sp, #56]	; 0x38
 802ded4:	e76f      	b.n	802ddb6 <_dtoa_r+0x126>
 802ded6:	2301      	movs	r3, #1
 802ded8:	e7b3      	b.n	802de42 <_dtoa_r+0x1b2>
 802deda:	900c      	str	r0, [sp, #48]	; 0x30
 802dedc:	e7b2      	b.n	802de44 <_dtoa_r+0x1b4>
 802dede:	9b05      	ldr	r3, [sp, #20]
 802dee0:	eba3 030b 	sub.w	r3, r3, fp
 802dee4:	9305      	str	r3, [sp, #20]
 802dee6:	f1cb 0300 	rsb	r3, fp, #0
 802deea:	9308      	str	r3, [sp, #32]
 802deec:	2300      	movs	r3, #0
 802deee:	930b      	str	r3, [sp, #44]	; 0x2c
 802def0:	e7bf      	b.n	802de72 <_dtoa_r+0x1e2>
 802def2:	2300      	movs	r3, #0
 802def4:	9309      	str	r3, [sp, #36]	; 0x24
 802def6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802def8:	2b00      	cmp	r3, #0
 802defa:	dc52      	bgt.n	802dfa2 <_dtoa_r+0x312>
 802defc:	2301      	movs	r3, #1
 802defe:	9301      	str	r3, [sp, #4]
 802df00:	9304      	str	r3, [sp, #16]
 802df02:	461a      	mov	r2, r3
 802df04:	920a      	str	r2, [sp, #40]	; 0x28
 802df06:	e00b      	b.n	802df20 <_dtoa_r+0x290>
 802df08:	2301      	movs	r3, #1
 802df0a:	e7f3      	b.n	802def4 <_dtoa_r+0x264>
 802df0c:	2300      	movs	r3, #0
 802df0e:	9309      	str	r3, [sp, #36]	; 0x24
 802df10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802df12:	445b      	add	r3, fp
 802df14:	9301      	str	r3, [sp, #4]
 802df16:	3301      	adds	r3, #1
 802df18:	2b01      	cmp	r3, #1
 802df1a:	9304      	str	r3, [sp, #16]
 802df1c:	bfb8      	it	lt
 802df1e:	2301      	movlt	r3, #1
 802df20:	69e0      	ldr	r0, [r4, #28]
 802df22:	2100      	movs	r1, #0
 802df24:	2204      	movs	r2, #4
 802df26:	f102 0614 	add.w	r6, r2, #20
 802df2a:	429e      	cmp	r6, r3
 802df2c:	d93d      	bls.n	802dfaa <_dtoa_r+0x31a>
 802df2e:	6041      	str	r1, [r0, #4]
 802df30:	4620      	mov	r0, r4
 802df32:	f000 fceb 	bl	802e90c <_Balloc>
 802df36:	9000      	str	r0, [sp, #0]
 802df38:	2800      	cmp	r0, #0
 802df3a:	d139      	bne.n	802dfb0 <_dtoa_r+0x320>
 802df3c:	4b16      	ldr	r3, [pc, #88]	; (802df98 <_dtoa_r+0x308>)
 802df3e:	4602      	mov	r2, r0
 802df40:	f240 11af 	movw	r1, #431	; 0x1af
 802df44:	e6bd      	b.n	802dcc2 <_dtoa_r+0x32>
 802df46:	2301      	movs	r3, #1
 802df48:	e7e1      	b.n	802df0e <_dtoa_r+0x27e>
 802df4a:	2501      	movs	r5, #1
 802df4c:	2300      	movs	r3, #0
 802df4e:	9307      	str	r3, [sp, #28]
 802df50:	9509      	str	r5, [sp, #36]	; 0x24
 802df52:	f04f 33ff 	mov.w	r3, #4294967295
 802df56:	9301      	str	r3, [sp, #4]
 802df58:	9304      	str	r3, [sp, #16]
 802df5a:	2200      	movs	r2, #0
 802df5c:	2312      	movs	r3, #18
 802df5e:	e7d1      	b.n	802df04 <_dtoa_r+0x274>
 802df60:	636f4361 	.word	0x636f4361
 802df64:	3fd287a7 	.word	0x3fd287a7
 802df68:	8b60c8b3 	.word	0x8b60c8b3
 802df6c:	3fc68a28 	.word	0x3fc68a28
 802df70:	509f79fb 	.word	0x509f79fb
 802df74:	3fd34413 	.word	0x3fd34413
 802df78:	08034987 	.word	0x08034987
 802df7c:	08034a05 	.word	0x08034a05
 802df80:	7ff00000 	.word	0x7ff00000
 802df84:	08034a01 	.word	0x08034a01
 802df88:	080349f8 	.word	0x080349f8
 802df8c:	08034d41 	.word	0x08034d41
 802df90:	3ff80000 	.word	0x3ff80000
 802df94:	08034af0 	.word	0x08034af0
 802df98:	08034a5d 	.word	0x08034a5d
 802df9c:	2301      	movs	r3, #1
 802df9e:	9309      	str	r3, [sp, #36]	; 0x24
 802dfa0:	e7d7      	b.n	802df52 <_dtoa_r+0x2c2>
 802dfa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802dfa4:	9301      	str	r3, [sp, #4]
 802dfa6:	9304      	str	r3, [sp, #16]
 802dfa8:	e7ba      	b.n	802df20 <_dtoa_r+0x290>
 802dfaa:	3101      	adds	r1, #1
 802dfac:	0052      	lsls	r2, r2, #1
 802dfae:	e7ba      	b.n	802df26 <_dtoa_r+0x296>
 802dfb0:	69e3      	ldr	r3, [r4, #28]
 802dfb2:	9a00      	ldr	r2, [sp, #0]
 802dfb4:	601a      	str	r2, [r3, #0]
 802dfb6:	9b04      	ldr	r3, [sp, #16]
 802dfb8:	2b0e      	cmp	r3, #14
 802dfba:	f200 80a8 	bhi.w	802e10e <_dtoa_r+0x47e>
 802dfbe:	2d00      	cmp	r5, #0
 802dfc0:	f000 80a5 	beq.w	802e10e <_dtoa_r+0x47e>
 802dfc4:	f1bb 0f00 	cmp.w	fp, #0
 802dfc8:	dd38      	ble.n	802e03c <_dtoa_r+0x3ac>
 802dfca:	4bc0      	ldr	r3, [pc, #768]	; (802e2cc <_dtoa_r+0x63c>)
 802dfcc:	f00b 020f 	and.w	r2, fp, #15
 802dfd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802dfd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802dfd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 802dfdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 802dfe0:	d019      	beq.n	802e016 <_dtoa_r+0x386>
 802dfe2:	4bbb      	ldr	r3, [pc, #748]	; (802e2d0 <_dtoa_r+0x640>)
 802dfe4:	ec51 0b18 	vmov	r0, r1, d8
 802dfe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802dfec:	f7e2 fc46 	bl	801087c <__aeabi_ddiv>
 802dff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dff4:	f008 080f 	and.w	r8, r8, #15
 802dff8:	2503      	movs	r5, #3
 802dffa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802e2d0 <_dtoa_r+0x640>
 802dffe:	f1b8 0f00 	cmp.w	r8, #0
 802e002:	d10a      	bne.n	802e01a <_dtoa_r+0x38a>
 802e004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e008:	4632      	mov	r2, r6
 802e00a:	463b      	mov	r3, r7
 802e00c:	f7e2 fc36 	bl	801087c <__aeabi_ddiv>
 802e010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e014:	e02b      	b.n	802e06e <_dtoa_r+0x3de>
 802e016:	2502      	movs	r5, #2
 802e018:	e7ef      	b.n	802dffa <_dtoa_r+0x36a>
 802e01a:	f018 0f01 	tst.w	r8, #1
 802e01e:	d008      	beq.n	802e032 <_dtoa_r+0x3a2>
 802e020:	4630      	mov	r0, r6
 802e022:	4639      	mov	r1, r7
 802e024:	e9d9 2300 	ldrd	r2, r3, [r9]
 802e028:	f7e2 fafe 	bl	8010628 <__aeabi_dmul>
 802e02c:	3501      	adds	r5, #1
 802e02e:	4606      	mov	r6, r0
 802e030:	460f      	mov	r7, r1
 802e032:	ea4f 0868 	mov.w	r8, r8, asr #1
 802e036:	f109 0908 	add.w	r9, r9, #8
 802e03a:	e7e0      	b.n	802dffe <_dtoa_r+0x36e>
 802e03c:	f000 809f 	beq.w	802e17e <_dtoa_r+0x4ee>
 802e040:	f1cb 0600 	rsb	r6, fp, #0
 802e044:	4ba1      	ldr	r3, [pc, #644]	; (802e2cc <_dtoa_r+0x63c>)
 802e046:	4fa2      	ldr	r7, [pc, #648]	; (802e2d0 <_dtoa_r+0x640>)
 802e048:	f006 020f 	and.w	r2, r6, #15
 802e04c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e054:	ec51 0b18 	vmov	r0, r1, d8
 802e058:	f7e2 fae6 	bl	8010628 <__aeabi_dmul>
 802e05c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e060:	1136      	asrs	r6, r6, #4
 802e062:	2300      	movs	r3, #0
 802e064:	2502      	movs	r5, #2
 802e066:	2e00      	cmp	r6, #0
 802e068:	d17e      	bne.n	802e168 <_dtoa_r+0x4d8>
 802e06a:	2b00      	cmp	r3, #0
 802e06c:	d1d0      	bne.n	802e010 <_dtoa_r+0x380>
 802e06e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e070:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e074:	2b00      	cmp	r3, #0
 802e076:	f000 8084 	beq.w	802e182 <_dtoa_r+0x4f2>
 802e07a:	4b96      	ldr	r3, [pc, #600]	; (802e2d4 <_dtoa_r+0x644>)
 802e07c:	2200      	movs	r2, #0
 802e07e:	4640      	mov	r0, r8
 802e080:	4649      	mov	r1, r9
 802e082:	f7e2 fd43 	bl	8010b0c <__aeabi_dcmplt>
 802e086:	2800      	cmp	r0, #0
 802e088:	d07b      	beq.n	802e182 <_dtoa_r+0x4f2>
 802e08a:	9b04      	ldr	r3, [sp, #16]
 802e08c:	2b00      	cmp	r3, #0
 802e08e:	d078      	beq.n	802e182 <_dtoa_r+0x4f2>
 802e090:	9b01      	ldr	r3, [sp, #4]
 802e092:	2b00      	cmp	r3, #0
 802e094:	dd39      	ble.n	802e10a <_dtoa_r+0x47a>
 802e096:	4b90      	ldr	r3, [pc, #576]	; (802e2d8 <_dtoa_r+0x648>)
 802e098:	2200      	movs	r2, #0
 802e09a:	4640      	mov	r0, r8
 802e09c:	4649      	mov	r1, r9
 802e09e:	f7e2 fac3 	bl	8010628 <__aeabi_dmul>
 802e0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e0a6:	9e01      	ldr	r6, [sp, #4]
 802e0a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 802e0ac:	3501      	adds	r5, #1
 802e0ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e0b2:	4628      	mov	r0, r5
 802e0b4:	f7e2 fa4e 	bl	8010554 <__aeabi_i2d>
 802e0b8:	4642      	mov	r2, r8
 802e0ba:	464b      	mov	r3, r9
 802e0bc:	f7e2 fab4 	bl	8010628 <__aeabi_dmul>
 802e0c0:	4b86      	ldr	r3, [pc, #536]	; (802e2dc <_dtoa_r+0x64c>)
 802e0c2:	2200      	movs	r2, #0
 802e0c4:	f7e2 f8fa 	bl	80102bc <__adddf3>
 802e0c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802e0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e0d0:	9303      	str	r3, [sp, #12]
 802e0d2:	2e00      	cmp	r6, #0
 802e0d4:	d158      	bne.n	802e188 <_dtoa_r+0x4f8>
 802e0d6:	4b82      	ldr	r3, [pc, #520]	; (802e2e0 <_dtoa_r+0x650>)
 802e0d8:	2200      	movs	r2, #0
 802e0da:	4640      	mov	r0, r8
 802e0dc:	4649      	mov	r1, r9
 802e0de:	f7e2 f8eb 	bl	80102b8 <__aeabi_dsub>
 802e0e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e0e6:	4680      	mov	r8, r0
 802e0e8:	4689      	mov	r9, r1
 802e0ea:	f7e2 fd2d 	bl	8010b48 <__aeabi_dcmpgt>
 802e0ee:	2800      	cmp	r0, #0
 802e0f0:	f040 8296 	bne.w	802e620 <_dtoa_r+0x990>
 802e0f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802e0f8:	4640      	mov	r0, r8
 802e0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802e0fe:	4649      	mov	r1, r9
 802e100:	f7e2 fd04 	bl	8010b0c <__aeabi_dcmplt>
 802e104:	2800      	cmp	r0, #0
 802e106:	f040 8289 	bne.w	802e61c <_dtoa_r+0x98c>
 802e10a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802e10e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802e110:	2b00      	cmp	r3, #0
 802e112:	f2c0 814e 	blt.w	802e3b2 <_dtoa_r+0x722>
 802e116:	f1bb 0f0e 	cmp.w	fp, #14
 802e11a:	f300 814a 	bgt.w	802e3b2 <_dtoa_r+0x722>
 802e11e:	4b6b      	ldr	r3, [pc, #428]	; (802e2cc <_dtoa_r+0x63c>)
 802e120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e124:	e9d3 8900 	ldrd	r8, r9, [r3]
 802e128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e12a:	2b00      	cmp	r3, #0
 802e12c:	f280 80dc 	bge.w	802e2e8 <_dtoa_r+0x658>
 802e130:	9b04      	ldr	r3, [sp, #16]
 802e132:	2b00      	cmp	r3, #0
 802e134:	f300 80d8 	bgt.w	802e2e8 <_dtoa_r+0x658>
 802e138:	f040 826f 	bne.w	802e61a <_dtoa_r+0x98a>
 802e13c:	4b68      	ldr	r3, [pc, #416]	; (802e2e0 <_dtoa_r+0x650>)
 802e13e:	2200      	movs	r2, #0
 802e140:	4640      	mov	r0, r8
 802e142:	4649      	mov	r1, r9
 802e144:	f7e2 fa70 	bl	8010628 <__aeabi_dmul>
 802e148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e14c:	f7e2 fcf2 	bl	8010b34 <__aeabi_dcmpge>
 802e150:	9e04      	ldr	r6, [sp, #16]
 802e152:	4637      	mov	r7, r6
 802e154:	2800      	cmp	r0, #0
 802e156:	f040 8245 	bne.w	802e5e4 <_dtoa_r+0x954>
 802e15a:	9d00      	ldr	r5, [sp, #0]
 802e15c:	2331      	movs	r3, #49	; 0x31
 802e15e:	f805 3b01 	strb.w	r3, [r5], #1
 802e162:	f10b 0b01 	add.w	fp, fp, #1
 802e166:	e241      	b.n	802e5ec <_dtoa_r+0x95c>
 802e168:	07f2      	lsls	r2, r6, #31
 802e16a:	d505      	bpl.n	802e178 <_dtoa_r+0x4e8>
 802e16c:	e9d7 2300 	ldrd	r2, r3, [r7]
 802e170:	f7e2 fa5a 	bl	8010628 <__aeabi_dmul>
 802e174:	3501      	adds	r5, #1
 802e176:	2301      	movs	r3, #1
 802e178:	1076      	asrs	r6, r6, #1
 802e17a:	3708      	adds	r7, #8
 802e17c:	e773      	b.n	802e066 <_dtoa_r+0x3d6>
 802e17e:	2502      	movs	r5, #2
 802e180:	e775      	b.n	802e06e <_dtoa_r+0x3de>
 802e182:	9e04      	ldr	r6, [sp, #16]
 802e184:	465f      	mov	r7, fp
 802e186:	e792      	b.n	802e0ae <_dtoa_r+0x41e>
 802e188:	9900      	ldr	r1, [sp, #0]
 802e18a:	4b50      	ldr	r3, [pc, #320]	; (802e2cc <_dtoa_r+0x63c>)
 802e18c:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e190:	4431      	add	r1, r6
 802e192:	9102      	str	r1, [sp, #8]
 802e194:	9909      	ldr	r1, [sp, #36]	; 0x24
 802e196:	eeb0 9a47 	vmov.f32	s18, s14
 802e19a:	eef0 9a67 	vmov.f32	s19, s15
 802e19e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802e1a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e1a6:	2900      	cmp	r1, #0
 802e1a8:	d044      	beq.n	802e234 <_dtoa_r+0x5a4>
 802e1aa:	494e      	ldr	r1, [pc, #312]	; (802e2e4 <_dtoa_r+0x654>)
 802e1ac:	2000      	movs	r0, #0
 802e1ae:	f7e2 fb65 	bl	801087c <__aeabi_ddiv>
 802e1b2:	ec53 2b19 	vmov	r2, r3, d9
 802e1b6:	f7e2 f87f 	bl	80102b8 <__aeabi_dsub>
 802e1ba:	9d00      	ldr	r5, [sp, #0]
 802e1bc:	ec41 0b19 	vmov	d9, r0, r1
 802e1c0:	4649      	mov	r1, r9
 802e1c2:	4640      	mov	r0, r8
 802e1c4:	f7e2 fce0 	bl	8010b88 <__aeabi_d2iz>
 802e1c8:	4606      	mov	r6, r0
 802e1ca:	f7e2 f9c3 	bl	8010554 <__aeabi_i2d>
 802e1ce:	4602      	mov	r2, r0
 802e1d0:	460b      	mov	r3, r1
 802e1d2:	4640      	mov	r0, r8
 802e1d4:	4649      	mov	r1, r9
 802e1d6:	f7e2 f86f 	bl	80102b8 <__aeabi_dsub>
 802e1da:	3630      	adds	r6, #48	; 0x30
 802e1dc:	f805 6b01 	strb.w	r6, [r5], #1
 802e1e0:	ec53 2b19 	vmov	r2, r3, d9
 802e1e4:	4680      	mov	r8, r0
 802e1e6:	4689      	mov	r9, r1
 802e1e8:	f7e2 fc90 	bl	8010b0c <__aeabi_dcmplt>
 802e1ec:	2800      	cmp	r0, #0
 802e1ee:	d164      	bne.n	802e2ba <_dtoa_r+0x62a>
 802e1f0:	4642      	mov	r2, r8
 802e1f2:	464b      	mov	r3, r9
 802e1f4:	4937      	ldr	r1, [pc, #220]	; (802e2d4 <_dtoa_r+0x644>)
 802e1f6:	2000      	movs	r0, #0
 802e1f8:	f7e2 f85e 	bl	80102b8 <__aeabi_dsub>
 802e1fc:	ec53 2b19 	vmov	r2, r3, d9
 802e200:	f7e2 fc84 	bl	8010b0c <__aeabi_dcmplt>
 802e204:	2800      	cmp	r0, #0
 802e206:	f040 80b6 	bne.w	802e376 <_dtoa_r+0x6e6>
 802e20a:	9b02      	ldr	r3, [sp, #8]
 802e20c:	429d      	cmp	r5, r3
 802e20e:	f43f af7c 	beq.w	802e10a <_dtoa_r+0x47a>
 802e212:	4b31      	ldr	r3, [pc, #196]	; (802e2d8 <_dtoa_r+0x648>)
 802e214:	ec51 0b19 	vmov	r0, r1, d9
 802e218:	2200      	movs	r2, #0
 802e21a:	f7e2 fa05 	bl	8010628 <__aeabi_dmul>
 802e21e:	4b2e      	ldr	r3, [pc, #184]	; (802e2d8 <_dtoa_r+0x648>)
 802e220:	ec41 0b19 	vmov	d9, r0, r1
 802e224:	2200      	movs	r2, #0
 802e226:	4640      	mov	r0, r8
 802e228:	4649      	mov	r1, r9
 802e22a:	f7e2 f9fd 	bl	8010628 <__aeabi_dmul>
 802e22e:	4680      	mov	r8, r0
 802e230:	4689      	mov	r9, r1
 802e232:	e7c5      	b.n	802e1c0 <_dtoa_r+0x530>
 802e234:	ec51 0b17 	vmov	r0, r1, d7
 802e238:	f7e2 f9f6 	bl	8010628 <__aeabi_dmul>
 802e23c:	9b02      	ldr	r3, [sp, #8]
 802e23e:	9d00      	ldr	r5, [sp, #0]
 802e240:	930f      	str	r3, [sp, #60]	; 0x3c
 802e242:	ec41 0b19 	vmov	d9, r0, r1
 802e246:	4649      	mov	r1, r9
 802e248:	4640      	mov	r0, r8
 802e24a:	f7e2 fc9d 	bl	8010b88 <__aeabi_d2iz>
 802e24e:	4606      	mov	r6, r0
 802e250:	f7e2 f980 	bl	8010554 <__aeabi_i2d>
 802e254:	3630      	adds	r6, #48	; 0x30
 802e256:	4602      	mov	r2, r0
 802e258:	460b      	mov	r3, r1
 802e25a:	4640      	mov	r0, r8
 802e25c:	4649      	mov	r1, r9
 802e25e:	f7e2 f82b 	bl	80102b8 <__aeabi_dsub>
 802e262:	f805 6b01 	strb.w	r6, [r5], #1
 802e266:	9b02      	ldr	r3, [sp, #8]
 802e268:	429d      	cmp	r5, r3
 802e26a:	4680      	mov	r8, r0
 802e26c:	4689      	mov	r9, r1
 802e26e:	f04f 0200 	mov.w	r2, #0
 802e272:	d124      	bne.n	802e2be <_dtoa_r+0x62e>
 802e274:	4b1b      	ldr	r3, [pc, #108]	; (802e2e4 <_dtoa_r+0x654>)
 802e276:	ec51 0b19 	vmov	r0, r1, d9
 802e27a:	f7e2 f81f 	bl	80102bc <__adddf3>
 802e27e:	4602      	mov	r2, r0
 802e280:	460b      	mov	r3, r1
 802e282:	4640      	mov	r0, r8
 802e284:	4649      	mov	r1, r9
 802e286:	f7e2 fc5f 	bl	8010b48 <__aeabi_dcmpgt>
 802e28a:	2800      	cmp	r0, #0
 802e28c:	d173      	bne.n	802e376 <_dtoa_r+0x6e6>
 802e28e:	ec53 2b19 	vmov	r2, r3, d9
 802e292:	4914      	ldr	r1, [pc, #80]	; (802e2e4 <_dtoa_r+0x654>)
 802e294:	2000      	movs	r0, #0
 802e296:	f7e2 f80f 	bl	80102b8 <__aeabi_dsub>
 802e29a:	4602      	mov	r2, r0
 802e29c:	460b      	mov	r3, r1
 802e29e:	4640      	mov	r0, r8
 802e2a0:	4649      	mov	r1, r9
 802e2a2:	f7e2 fc33 	bl	8010b0c <__aeabi_dcmplt>
 802e2a6:	2800      	cmp	r0, #0
 802e2a8:	f43f af2f 	beq.w	802e10a <_dtoa_r+0x47a>
 802e2ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802e2ae:	1e6b      	subs	r3, r5, #1
 802e2b0:	930f      	str	r3, [sp, #60]	; 0x3c
 802e2b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802e2b6:	2b30      	cmp	r3, #48	; 0x30
 802e2b8:	d0f8      	beq.n	802e2ac <_dtoa_r+0x61c>
 802e2ba:	46bb      	mov	fp, r7
 802e2bc:	e04a      	b.n	802e354 <_dtoa_r+0x6c4>
 802e2be:	4b06      	ldr	r3, [pc, #24]	; (802e2d8 <_dtoa_r+0x648>)
 802e2c0:	f7e2 f9b2 	bl	8010628 <__aeabi_dmul>
 802e2c4:	4680      	mov	r8, r0
 802e2c6:	4689      	mov	r9, r1
 802e2c8:	e7bd      	b.n	802e246 <_dtoa_r+0x5b6>
 802e2ca:	bf00      	nop
 802e2cc:	08034af0 	.word	0x08034af0
 802e2d0:	08034ac8 	.word	0x08034ac8
 802e2d4:	3ff00000 	.word	0x3ff00000
 802e2d8:	40240000 	.word	0x40240000
 802e2dc:	401c0000 	.word	0x401c0000
 802e2e0:	40140000 	.word	0x40140000
 802e2e4:	3fe00000 	.word	0x3fe00000
 802e2e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802e2ec:	9d00      	ldr	r5, [sp, #0]
 802e2ee:	4642      	mov	r2, r8
 802e2f0:	464b      	mov	r3, r9
 802e2f2:	4630      	mov	r0, r6
 802e2f4:	4639      	mov	r1, r7
 802e2f6:	f7e2 fac1 	bl	801087c <__aeabi_ddiv>
 802e2fa:	f7e2 fc45 	bl	8010b88 <__aeabi_d2iz>
 802e2fe:	9001      	str	r0, [sp, #4]
 802e300:	f7e2 f928 	bl	8010554 <__aeabi_i2d>
 802e304:	4642      	mov	r2, r8
 802e306:	464b      	mov	r3, r9
 802e308:	f7e2 f98e 	bl	8010628 <__aeabi_dmul>
 802e30c:	4602      	mov	r2, r0
 802e30e:	460b      	mov	r3, r1
 802e310:	4630      	mov	r0, r6
 802e312:	4639      	mov	r1, r7
 802e314:	f7e1 ffd0 	bl	80102b8 <__aeabi_dsub>
 802e318:	9e01      	ldr	r6, [sp, #4]
 802e31a:	9f04      	ldr	r7, [sp, #16]
 802e31c:	3630      	adds	r6, #48	; 0x30
 802e31e:	f805 6b01 	strb.w	r6, [r5], #1
 802e322:	9e00      	ldr	r6, [sp, #0]
 802e324:	1bae      	subs	r6, r5, r6
 802e326:	42b7      	cmp	r7, r6
 802e328:	4602      	mov	r2, r0
 802e32a:	460b      	mov	r3, r1
 802e32c:	d134      	bne.n	802e398 <_dtoa_r+0x708>
 802e32e:	f7e1 ffc5 	bl	80102bc <__adddf3>
 802e332:	4642      	mov	r2, r8
 802e334:	464b      	mov	r3, r9
 802e336:	4606      	mov	r6, r0
 802e338:	460f      	mov	r7, r1
 802e33a:	f7e2 fc05 	bl	8010b48 <__aeabi_dcmpgt>
 802e33e:	b9c8      	cbnz	r0, 802e374 <_dtoa_r+0x6e4>
 802e340:	4642      	mov	r2, r8
 802e342:	464b      	mov	r3, r9
 802e344:	4630      	mov	r0, r6
 802e346:	4639      	mov	r1, r7
 802e348:	f7e2 fbd6 	bl	8010af8 <__aeabi_dcmpeq>
 802e34c:	b110      	cbz	r0, 802e354 <_dtoa_r+0x6c4>
 802e34e:	9b01      	ldr	r3, [sp, #4]
 802e350:	07db      	lsls	r3, r3, #31
 802e352:	d40f      	bmi.n	802e374 <_dtoa_r+0x6e4>
 802e354:	4651      	mov	r1, sl
 802e356:	4620      	mov	r0, r4
 802e358:	f000 fb18 	bl	802e98c <_Bfree>
 802e35c:	2300      	movs	r3, #0
 802e35e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e360:	702b      	strb	r3, [r5, #0]
 802e362:	f10b 0301 	add.w	r3, fp, #1
 802e366:	6013      	str	r3, [r2, #0]
 802e368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e36a:	2b00      	cmp	r3, #0
 802e36c:	f43f ace2 	beq.w	802dd34 <_dtoa_r+0xa4>
 802e370:	601d      	str	r5, [r3, #0]
 802e372:	e4df      	b.n	802dd34 <_dtoa_r+0xa4>
 802e374:	465f      	mov	r7, fp
 802e376:	462b      	mov	r3, r5
 802e378:	461d      	mov	r5, r3
 802e37a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e37e:	2a39      	cmp	r2, #57	; 0x39
 802e380:	d106      	bne.n	802e390 <_dtoa_r+0x700>
 802e382:	9a00      	ldr	r2, [sp, #0]
 802e384:	429a      	cmp	r2, r3
 802e386:	d1f7      	bne.n	802e378 <_dtoa_r+0x6e8>
 802e388:	9900      	ldr	r1, [sp, #0]
 802e38a:	2230      	movs	r2, #48	; 0x30
 802e38c:	3701      	adds	r7, #1
 802e38e:	700a      	strb	r2, [r1, #0]
 802e390:	781a      	ldrb	r2, [r3, #0]
 802e392:	3201      	adds	r2, #1
 802e394:	701a      	strb	r2, [r3, #0]
 802e396:	e790      	b.n	802e2ba <_dtoa_r+0x62a>
 802e398:	4ba3      	ldr	r3, [pc, #652]	; (802e628 <_dtoa_r+0x998>)
 802e39a:	2200      	movs	r2, #0
 802e39c:	f7e2 f944 	bl	8010628 <__aeabi_dmul>
 802e3a0:	2200      	movs	r2, #0
 802e3a2:	2300      	movs	r3, #0
 802e3a4:	4606      	mov	r6, r0
 802e3a6:	460f      	mov	r7, r1
 802e3a8:	f7e2 fba6 	bl	8010af8 <__aeabi_dcmpeq>
 802e3ac:	2800      	cmp	r0, #0
 802e3ae:	d09e      	beq.n	802e2ee <_dtoa_r+0x65e>
 802e3b0:	e7d0      	b.n	802e354 <_dtoa_r+0x6c4>
 802e3b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e3b4:	2a00      	cmp	r2, #0
 802e3b6:	f000 80ca 	beq.w	802e54e <_dtoa_r+0x8be>
 802e3ba:	9a07      	ldr	r2, [sp, #28]
 802e3bc:	2a01      	cmp	r2, #1
 802e3be:	f300 80ad 	bgt.w	802e51c <_dtoa_r+0x88c>
 802e3c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802e3c4:	2a00      	cmp	r2, #0
 802e3c6:	f000 80a5 	beq.w	802e514 <_dtoa_r+0x884>
 802e3ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802e3ce:	9e08      	ldr	r6, [sp, #32]
 802e3d0:	9d05      	ldr	r5, [sp, #20]
 802e3d2:	9a05      	ldr	r2, [sp, #20]
 802e3d4:	441a      	add	r2, r3
 802e3d6:	9205      	str	r2, [sp, #20]
 802e3d8:	9a06      	ldr	r2, [sp, #24]
 802e3da:	2101      	movs	r1, #1
 802e3dc:	441a      	add	r2, r3
 802e3de:	4620      	mov	r0, r4
 802e3e0:	9206      	str	r2, [sp, #24]
 802e3e2:	f000 fbd3 	bl	802eb8c <__i2b>
 802e3e6:	4607      	mov	r7, r0
 802e3e8:	b165      	cbz	r5, 802e404 <_dtoa_r+0x774>
 802e3ea:	9b06      	ldr	r3, [sp, #24]
 802e3ec:	2b00      	cmp	r3, #0
 802e3ee:	dd09      	ble.n	802e404 <_dtoa_r+0x774>
 802e3f0:	42ab      	cmp	r3, r5
 802e3f2:	9a05      	ldr	r2, [sp, #20]
 802e3f4:	bfa8      	it	ge
 802e3f6:	462b      	movge	r3, r5
 802e3f8:	1ad2      	subs	r2, r2, r3
 802e3fa:	9205      	str	r2, [sp, #20]
 802e3fc:	9a06      	ldr	r2, [sp, #24]
 802e3fe:	1aed      	subs	r5, r5, r3
 802e400:	1ad3      	subs	r3, r2, r3
 802e402:	9306      	str	r3, [sp, #24]
 802e404:	9b08      	ldr	r3, [sp, #32]
 802e406:	b1f3      	cbz	r3, 802e446 <_dtoa_r+0x7b6>
 802e408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e40a:	2b00      	cmp	r3, #0
 802e40c:	f000 80a3 	beq.w	802e556 <_dtoa_r+0x8c6>
 802e410:	2e00      	cmp	r6, #0
 802e412:	dd10      	ble.n	802e436 <_dtoa_r+0x7a6>
 802e414:	4639      	mov	r1, r7
 802e416:	4632      	mov	r2, r6
 802e418:	4620      	mov	r0, r4
 802e41a:	f000 fc77 	bl	802ed0c <__pow5mult>
 802e41e:	4652      	mov	r2, sl
 802e420:	4601      	mov	r1, r0
 802e422:	4607      	mov	r7, r0
 802e424:	4620      	mov	r0, r4
 802e426:	f000 fbc7 	bl	802ebb8 <__multiply>
 802e42a:	4651      	mov	r1, sl
 802e42c:	4680      	mov	r8, r0
 802e42e:	4620      	mov	r0, r4
 802e430:	f000 faac 	bl	802e98c <_Bfree>
 802e434:	46c2      	mov	sl, r8
 802e436:	9b08      	ldr	r3, [sp, #32]
 802e438:	1b9a      	subs	r2, r3, r6
 802e43a:	d004      	beq.n	802e446 <_dtoa_r+0x7b6>
 802e43c:	4651      	mov	r1, sl
 802e43e:	4620      	mov	r0, r4
 802e440:	f000 fc64 	bl	802ed0c <__pow5mult>
 802e444:	4682      	mov	sl, r0
 802e446:	2101      	movs	r1, #1
 802e448:	4620      	mov	r0, r4
 802e44a:	f000 fb9f 	bl	802eb8c <__i2b>
 802e44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e450:	2b00      	cmp	r3, #0
 802e452:	4606      	mov	r6, r0
 802e454:	f340 8081 	ble.w	802e55a <_dtoa_r+0x8ca>
 802e458:	461a      	mov	r2, r3
 802e45a:	4601      	mov	r1, r0
 802e45c:	4620      	mov	r0, r4
 802e45e:	f000 fc55 	bl	802ed0c <__pow5mult>
 802e462:	9b07      	ldr	r3, [sp, #28]
 802e464:	2b01      	cmp	r3, #1
 802e466:	4606      	mov	r6, r0
 802e468:	dd7a      	ble.n	802e560 <_dtoa_r+0x8d0>
 802e46a:	f04f 0800 	mov.w	r8, #0
 802e46e:	6933      	ldr	r3, [r6, #16]
 802e470:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802e474:	6918      	ldr	r0, [r3, #16]
 802e476:	f000 fb3b 	bl	802eaf0 <__hi0bits>
 802e47a:	f1c0 0020 	rsb	r0, r0, #32
 802e47e:	9b06      	ldr	r3, [sp, #24]
 802e480:	4418      	add	r0, r3
 802e482:	f010 001f 	ands.w	r0, r0, #31
 802e486:	f000 8094 	beq.w	802e5b2 <_dtoa_r+0x922>
 802e48a:	f1c0 0320 	rsb	r3, r0, #32
 802e48e:	2b04      	cmp	r3, #4
 802e490:	f340 8085 	ble.w	802e59e <_dtoa_r+0x90e>
 802e494:	9b05      	ldr	r3, [sp, #20]
 802e496:	f1c0 001c 	rsb	r0, r0, #28
 802e49a:	4403      	add	r3, r0
 802e49c:	9305      	str	r3, [sp, #20]
 802e49e:	9b06      	ldr	r3, [sp, #24]
 802e4a0:	4403      	add	r3, r0
 802e4a2:	4405      	add	r5, r0
 802e4a4:	9306      	str	r3, [sp, #24]
 802e4a6:	9b05      	ldr	r3, [sp, #20]
 802e4a8:	2b00      	cmp	r3, #0
 802e4aa:	dd05      	ble.n	802e4b8 <_dtoa_r+0x828>
 802e4ac:	4651      	mov	r1, sl
 802e4ae:	461a      	mov	r2, r3
 802e4b0:	4620      	mov	r0, r4
 802e4b2:	f000 fc85 	bl	802edc0 <__lshift>
 802e4b6:	4682      	mov	sl, r0
 802e4b8:	9b06      	ldr	r3, [sp, #24]
 802e4ba:	2b00      	cmp	r3, #0
 802e4bc:	dd05      	ble.n	802e4ca <_dtoa_r+0x83a>
 802e4be:	4631      	mov	r1, r6
 802e4c0:	461a      	mov	r2, r3
 802e4c2:	4620      	mov	r0, r4
 802e4c4:	f000 fc7c 	bl	802edc0 <__lshift>
 802e4c8:	4606      	mov	r6, r0
 802e4ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e4cc:	2b00      	cmp	r3, #0
 802e4ce:	d072      	beq.n	802e5b6 <_dtoa_r+0x926>
 802e4d0:	4631      	mov	r1, r6
 802e4d2:	4650      	mov	r0, sl
 802e4d4:	f000 fce0 	bl	802ee98 <__mcmp>
 802e4d8:	2800      	cmp	r0, #0
 802e4da:	da6c      	bge.n	802e5b6 <_dtoa_r+0x926>
 802e4dc:	2300      	movs	r3, #0
 802e4de:	4651      	mov	r1, sl
 802e4e0:	220a      	movs	r2, #10
 802e4e2:	4620      	mov	r0, r4
 802e4e4:	f000 fa74 	bl	802e9d0 <__multadd>
 802e4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e4ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e4ee:	4682      	mov	sl, r0
 802e4f0:	2b00      	cmp	r3, #0
 802e4f2:	f000 81b0 	beq.w	802e856 <_dtoa_r+0xbc6>
 802e4f6:	2300      	movs	r3, #0
 802e4f8:	4639      	mov	r1, r7
 802e4fa:	220a      	movs	r2, #10
 802e4fc:	4620      	mov	r0, r4
 802e4fe:	f000 fa67 	bl	802e9d0 <__multadd>
 802e502:	9b01      	ldr	r3, [sp, #4]
 802e504:	2b00      	cmp	r3, #0
 802e506:	4607      	mov	r7, r0
 802e508:	f300 8096 	bgt.w	802e638 <_dtoa_r+0x9a8>
 802e50c:	9b07      	ldr	r3, [sp, #28]
 802e50e:	2b02      	cmp	r3, #2
 802e510:	dc59      	bgt.n	802e5c6 <_dtoa_r+0x936>
 802e512:	e091      	b.n	802e638 <_dtoa_r+0x9a8>
 802e514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802e51a:	e758      	b.n	802e3ce <_dtoa_r+0x73e>
 802e51c:	9b04      	ldr	r3, [sp, #16]
 802e51e:	1e5e      	subs	r6, r3, #1
 802e520:	9b08      	ldr	r3, [sp, #32]
 802e522:	42b3      	cmp	r3, r6
 802e524:	bfbf      	itttt	lt
 802e526:	9b08      	ldrlt	r3, [sp, #32]
 802e528:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802e52a:	9608      	strlt	r6, [sp, #32]
 802e52c:	1af3      	sublt	r3, r6, r3
 802e52e:	bfb4      	ite	lt
 802e530:	18d2      	addlt	r2, r2, r3
 802e532:	1b9e      	subge	r6, r3, r6
 802e534:	9b04      	ldr	r3, [sp, #16]
 802e536:	bfbc      	itt	lt
 802e538:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802e53a:	2600      	movlt	r6, #0
 802e53c:	2b00      	cmp	r3, #0
 802e53e:	bfb7      	itett	lt
 802e540:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802e544:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802e548:	1a9d      	sublt	r5, r3, r2
 802e54a:	2300      	movlt	r3, #0
 802e54c:	e741      	b.n	802e3d2 <_dtoa_r+0x742>
 802e54e:	9e08      	ldr	r6, [sp, #32]
 802e550:	9d05      	ldr	r5, [sp, #20]
 802e552:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802e554:	e748      	b.n	802e3e8 <_dtoa_r+0x758>
 802e556:	9a08      	ldr	r2, [sp, #32]
 802e558:	e770      	b.n	802e43c <_dtoa_r+0x7ac>
 802e55a:	9b07      	ldr	r3, [sp, #28]
 802e55c:	2b01      	cmp	r3, #1
 802e55e:	dc19      	bgt.n	802e594 <_dtoa_r+0x904>
 802e560:	9b02      	ldr	r3, [sp, #8]
 802e562:	b9bb      	cbnz	r3, 802e594 <_dtoa_r+0x904>
 802e564:	9b03      	ldr	r3, [sp, #12]
 802e566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e56a:	b99b      	cbnz	r3, 802e594 <_dtoa_r+0x904>
 802e56c:	9b03      	ldr	r3, [sp, #12]
 802e56e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e572:	0d1b      	lsrs	r3, r3, #20
 802e574:	051b      	lsls	r3, r3, #20
 802e576:	b183      	cbz	r3, 802e59a <_dtoa_r+0x90a>
 802e578:	9b05      	ldr	r3, [sp, #20]
 802e57a:	3301      	adds	r3, #1
 802e57c:	9305      	str	r3, [sp, #20]
 802e57e:	9b06      	ldr	r3, [sp, #24]
 802e580:	3301      	adds	r3, #1
 802e582:	9306      	str	r3, [sp, #24]
 802e584:	f04f 0801 	mov.w	r8, #1
 802e588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e58a:	2b00      	cmp	r3, #0
 802e58c:	f47f af6f 	bne.w	802e46e <_dtoa_r+0x7de>
 802e590:	2001      	movs	r0, #1
 802e592:	e774      	b.n	802e47e <_dtoa_r+0x7ee>
 802e594:	f04f 0800 	mov.w	r8, #0
 802e598:	e7f6      	b.n	802e588 <_dtoa_r+0x8f8>
 802e59a:	4698      	mov	r8, r3
 802e59c:	e7f4      	b.n	802e588 <_dtoa_r+0x8f8>
 802e59e:	d082      	beq.n	802e4a6 <_dtoa_r+0x816>
 802e5a0:	9a05      	ldr	r2, [sp, #20]
 802e5a2:	331c      	adds	r3, #28
 802e5a4:	441a      	add	r2, r3
 802e5a6:	9205      	str	r2, [sp, #20]
 802e5a8:	9a06      	ldr	r2, [sp, #24]
 802e5aa:	441a      	add	r2, r3
 802e5ac:	441d      	add	r5, r3
 802e5ae:	9206      	str	r2, [sp, #24]
 802e5b0:	e779      	b.n	802e4a6 <_dtoa_r+0x816>
 802e5b2:	4603      	mov	r3, r0
 802e5b4:	e7f4      	b.n	802e5a0 <_dtoa_r+0x910>
 802e5b6:	9b04      	ldr	r3, [sp, #16]
 802e5b8:	2b00      	cmp	r3, #0
 802e5ba:	dc37      	bgt.n	802e62c <_dtoa_r+0x99c>
 802e5bc:	9b07      	ldr	r3, [sp, #28]
 802e5be:	2b02      	cmp	r3, #2
 802e5c0:	dd34      	ble.n	802e62c <_dtoa_r+0x99c>
 802e5c2:	9b04      	ldr	r3, [sp, #16]
 802e5c4:	9301      	str	r3, [sp, #4]
 802e5c6:	9b01      	ldr	r3, [sp, #4]
 802e5c8:	b963      	cbnz	r3, 802e5e4 <_dtoa_r+0x954>
 802e5ca:	4631      	mov	r1, r6
 802e5cc:	2205      	movs	r2, #5
 802e5ce:	4620      	mov	r0, r4
 802e5d0:	f000 f9fe 	bl	802e9d0 <__multadd>
 802e5d4:	4601      	mov	r1, r0
 802e5d6:	4606      	mov	r6, r0
 802e5d8:	4650      	mov	r0, sl
 802e5da:	f000 fc5d 	bl	802ee98 <__mcmp>
 802e5de:	2800      	cmp	r0, #0
 802e5e0:	f73f adbb 	bgt.w	802e15a <_dtoa_r+0x4ca>
 802e5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e5e6:	9d00      	ldr	r5, [sp, #0]
 802e5e8:	ea6f 0b03 	mvn.w	fp, r3
 802e5ec:	f04f 0800 	mov.w	r8, #0
 802e5f0:	4631      	mov	r1, r6
 802e5f2:	4620      	mov	r0, r4
 802e5f4:	f000 f9ca 	bl	802e98c <_Bfree>
 802e5f8:	2f00      	cmp	r7, #0
 802e5fa:	f43f aeab 	beq.w	802e354 <_dtoa_r+0x6c4>
 802e5fe:	f1b8 0f00 	cmp.w	r8, #0
 802e602:	d005      	beq.n	802e610 <_dtoa_r+0x980>
 802e604:	45b8      	cmp	r8, r7
 802e606:	d003      	beq.n	802e610 <_dtoa_r+0x980>
 802e608:	4641      	mov	r1, r8
 802e60a:	4620      	mov	r0, r4
 802e60c:	f000 f9be 	bl	802e98c <_Bfree>
 802e610:	4639      	mov	r1, r7
 802e612:	4620      	mov	r0, r4
 802e614:	f000 f9ba 	bl	802e98c <_Bfree>
 802e618:	e69c      	b.n	802e354 <_dtoa_r+0x6c4>
 802e61a:	2600      	movs	r6, #0
 802e61c:	4637      	mov	r7, r6
 802e61e:	e7e1      	b.n	802e5e4 <_dtoa_r+0x954>
 802e620:	46bb      	mov	fp, r7
 802e622:	4637      	mov	r7, r6
 802e624:	e599      	b.n	802e15a <_dtoa_r+0x4ca>
 802e626:	bf00      	nop
 802e628:	40240000 	.word	0x40240000
 802e62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e62e:	2b00      	cmp	r3, #0
 802e630:	f000 80c8 	beq.w	802e7c4 <_dtoa_r+0xb34>
 802e634:	9b04      	ldr	r3, [sp, #16]
 802e636:	9301      	str	r3, [sp, #4]
 802e638:	2d00      	cmp	r5, #0
 802e63a:	dd05      	ble.n	802e648 <_dtoa_r+0x9b8>
 802e63c:	4639      	mov	r1, r7
 802e63e:	462a      	mov	r2, r5
 802e640:	4620      	mov	r0, r4
 802e642:	f000 fbbd 	bl	802edc0 <__lshift>
 802e646:	4607      	mov	r7, r0
 802e648:	f1b8 0f00 	cmp.w	r8, #0
 802e64c:	d05b      	beq.n	802e706 <_dtoa_r+0xa76>
 802e64e:	6879      	ldr	r1, [r7, #4]
 802e650:	4620      	mov	r0, r4
 802e652:	f000 f95b 	bl	802e90c <_Balloc>
 802e656:	4605      	mov	r5, r0
 802e658:	b928      	cbnz	r0, 802e666 <_dtoa_r+0x9d6>
 802e65a:	4b83      	ldr	r3, [pc, #524]	; (802e868 <_dtoa_r+0xbd8>)
 802e65c:	4602      	mov	r2, r0
 802e65e:	f240 21ef 	movw	r1, #751	; 0x2ef
 802e662:	f7ff bb2e 	b.w	802dcc2 <_dtoa_r+0x32>
 802e666:	693a      	ldr	r2, [r7, #16]
 802e668:	3202      	adds	r2, #2
 802e66a:	0092      	lsls	r2, r2, #2
 802e66c:	f107 010c 	add.w	r1, r7, #12
 802e670:	300c      	adds	r0, #12
 802e672:	f7ff fa68 	bl	802db46 <memcpy>
 802e676:	2201      	movs	r2, #1
 802e678:	4629      	mov	r1, r5
 802e67a:	4620      	mov	r0, r4
 802e67c:	f000 fba0 	bl	802edc0 <__lshift>
 802e680:	9b00      	ldr	r3, [sp, #0]
 802e682:	3301      	adds	r3, #1
 802e684:	9304      	str	r3, [sp, #16]
 802e686:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e68a:	4413      	add	r3, r2
 802e68c:	9308      	str	r3, [sp, #32]
 802e68e:	9b02      	ldr	r3, [sp, #8]
 802e690:	f003 0301 	and.w	r3, r3, #1
 802e694:	46b8      	mov	r8, r7
 802e696:	9306      	str	r3, [sp, #24]
 802e698:	4607      	mov	r7, r0
 802e69a:	9b04      	ldr	r3, [sp, #16]
 802e69c:	4631      	mov	r1, r6
 802e69e:	3b01      	subs	r3, #1
 802e6a0:	4650      	mov	r0, sl
 802e6a2:	9301      	str	r3, [sp, #4]
 802e6a4:	f7ff fa6b 	bl	802db7e <quorem>
 802e6a8:	4641      	mov	r1, r8
 802e6aa:	9002      	str	r0, [sp, #8]
 802e6ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e6b0:	4650      	mov	r0, sl
 802e6b2:	f000 fbf1 	bl	802ee98 <__mcmp>
 802e6b6:	463a      	mov	r2, r7
 802e6b8:	9005      	str	r0, [sp, #20]
 802e6ba:	4631      	mov	r1, r6
 802e6bc:	4620      	mov	r0, r4
 802e6be:	f000 fc07 	bl	802eed0 <__mdiff>
 802e6c2:	68c2      	ldr	r2, [r0, #12]
 802e6c4:	4605      	mov	r5, r0
 802e6c6:	bb02      	cbnz	r2, 802e70a <_dtoa_r+0xa7a>
 802e6c8:	4601      	mov	r1, r0
 802e6ca:	4650      	mov	r0, sl
 802e6cc:	f000 fbe4 	bl	802ee98 <__mcmp>
 802e6d0:	4602      	mov	r2, r0
 802e6d2:	4629      	mov	r1, r5
 802e6d4:	4620      	mov	r0, r4
 802e6d6:	9209      	str	r2, [sp, #36]	; 0x24
 802e6d8:	f000 f958 	bl	802e98c <_Bfree>
 802e6dc:	9b07      	ldr	r3, [sp, #28]
 802e6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e6e0:	9d04      	ldr	r5, [sp, #16]
 802e6e2:	ea43 0102 	orr.w	r1, r3, r2
 802e6e6:	9b06      	ldr	r3, [sp, #24]
 802e6e8:	4319      	orrs	r1, r3
 802e6ea:	d110      	bne.n	802e70e <_dtoa_r+0xa7e>
 802e6ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e6f0:	d029      	beq.n	802e746 <_dtoa_r+0xab6>
 802e6f2:	9b05      	ldr	r3, [sp, #20]
 802e6f4:	2b00      	cmp	r3, #0
 802e6f6:	dd02      	ble.n	802e6fe <_dtoa_r+0xa6e>
 802e6f8:	9b02      	ldr	r3, [sp, #8]
 802e6fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802e6fe:	9b01      	ldr	r3, [sp, #4]
 802e700:	f883 9000 	strb.w	r9, [r3]
 802e704:	e774      	b.n	802e5f0 <_dtoa_r+0x960>
 802e706:	4638      	mov	r0, r7
 802e708:	e7ba      	b.n	802e680 <_dtoa_r+0x9f0>
 802e70a:	2201      	movs	r2, #1
 802e70c:	e7e1      	b.n	802e6d2 <_dtoa_r+0xa42>
 802e70e:	9b05      	ldr	r3, [sp, #20]
 802e710:	2b00      	cmp	r3, #0
 802e712:	db04      	blt.n	802e71e <_dtoa_r+0xa8e>
 802e714:	9907      	ldr	r1, [sp, #28]
 802e716:	430b      	orrs	r3, r1
 802e718:	9906      	ldr	r1, [sp, #24]
 802e71a:	430b      	orrs	r3, r1
 802e71c:	d120      	bne.n	802e760 <_dtoa_r+0xad0>
 802e71e:	2a00      	cmp	r2, #0
 802e720:	dded      	ble.n	802e6fe <_dtoa_r+0xa6e>
 802e722:	4651      	mov	r1, sl
 802e724:	2201      	movs	r2, #1
 802e726:	4620      	mov	r0, r4
 802e728:	f000 fb4a 	bl	802edc0 <__lshift>
 802e72c:	4631      	mov	r1, r6
 802e72e:	4682      	mov	sl, r0
 802e730:	f000 fbb2 	bl	802ee98 <__mcmp>
 802e734:	2800      	cmp	r0, #0
 802e736:	dc03      	bgt.n	802e740 <_dtoa_r+0xab0>
 802e738:	d1e1      	bne.n	802e6fe <_dtoa_r+0xa6e>
 802e73a:	f019 0f01 	tst.w	r9, #1
 802e73e:	d0de      	beq.n	802e6fe <_dtoa_r+0xa6e>
 802e740:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e744:	d1d8      	bne.n	802e6f8 <_dtoa_r+0xa68>
 802e746:	9a01      	ldr	r2, [sp, #4]
 802e748:	2339      	movs	r3, #57	; 0x39
 802e74a:	7013      	strb	r3, [r2, #0]
 802e74c:	462b      	mov	r3, r5
 802e74e:	461d      	mov	r5, r3
 802e750:	3b01      	subs	r3, #1
 802e752:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802e756:	2a39      	cmp	r2, #57	; 0x39
 802e758:	d06c      	beq.n	802e834 <_dtoa_r+0xba4>
 802e75a:	3201      	adds	r2, #1
 802e75c:	701a      	strb	r2, [r3, #0]
 802e75e:	e747      	b.n	802e5f0 <_dtoa_r+0x960>
 802e760:	2a00      	cmp	r2, #0
 802e762:	dd07      	ble.n	802e774 <_dtoa_r+0xae4>
 802e764:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e768:	d0ed      	beq.n	802e746 <_dtoa_r+0xab6>
 802e76a:	9a01      	ldr	r2, [sp, #4]
 802e76c:	f109 0301 	add.w	r3, r9, #1
 802e770:	7013      	strb	r3, [r2, #0]
 802e772:	e73d      	b.n	802e5f0 <_dtoa_r+0x960>
 802e774:	9b04      	ldr	r3, [sp, #16]
 802e776:	9a08      	ldr	r2, [sp, #32]
 802e778:	f803 9c01 	strb.w	r9, [r3, #-1]
 802e77c:	4293      	cmp	r3, r2
 802e77e:	d043      	beq.n	802e808 <_dtoa_r+0xb78>
 802e780:	4651      	mov	r1, sl
 802e782:	2300      	movs	r3, #0
 802e784:	220a      	movs	r2, #10
 802e786:	4620      	mov	r0, r4
 802e788:	f000 f922 	bl	802e9d0 <__multadd>
 802e78c:	45b8      	cmp	r8, r7
 802e78e:	4682      	mov	sl, r0
 802e790:	f04f 0300 	mov.w	r3, #0
 802e794:	f04f 020a 	mov.w	r2, #10
 802e798:	4641      	mov	r1, r8
 802e79a:	4620      	mov	r0, r4
 802e79c:	d107      	bne.n	802e7ae <_dtoa_r+0xb1e>
 802e79e:	f000 f917 	bl	802e9d0 <__multadd>
 802e7a2:	4680      	mov	r8, r0
 802e7a4:	4607      	mov	r7, r0
 802e7a6:	9b04      	ldr	r3, [sp, #16]
 802e7a8:	3301      	adds	r3, #1
 802e7aa:	9304      	str	r3, [sp, #16]
 802e7ac:	e775      	b.n	802e69a <_dtoa_r+0xa0a>
 802e7ae:	f000 f90f 	bl	802e9d0 <__multadd>
 802e7b2:	4639      	mov	r1, r7
 802e7b4:	4680      	mov	r8, r0
 802e7b6:	2300      	movs	r3, #0
 802e7b8:	220a      	movs	r2, #10
 802e7ba:	4620      	mov	r0, r4
 802e7bc:	f000 f908 	bl	802e9d0 <__multadd>
 802e7c0:	4607      	mov	r7, r0
 802e7c2:	e7f0      	b.n	802e7a6 <_dtoa_r+0xb16>
 802e7c4:	9b04      	ldr	r3, [sp, #16]
 802e7c6:	9301      	str	r3, [sp, #4]
 802e7c8:	9d00      	ldr	r5, [sp, #0]
 802e7ca:	4631      	mov	r1, r6
 802e7cc:	4650      	mov	r0, sl
 802e7ce:	f7ff f9d6 	bl	802db7e <quorem>
 802e7d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e7d6:	9b00      	ldr	r3, [sp, #0]
 802e7d8:	f805 9b01 	strb.w	r9, [r5], #1
 802e7dc:	1aea      	subs	r2, r5, r3
 802e7de:	9b01      	ldr	r3, [sp, #4]
 802e7e0:	4293      	cmp	r3, r2
 802e7e2:	dd07      	ble.n	802e7f4 <_dtoa_r+0xb64>
 802e7e4:	4651      	mov	r1, sl
 802e7e6:	2300      	movs	r3, #0
 802e7e8:	220a      	movs	r2, #10
 802e7ea:	4620      	mov	r0, r4
 802e7ec:	f000 f8f0 	bl	802e9d0 <__multadd>
 802e7f0:	4682      	mov	sl, r0
 802e7f2:	e7ea      	b.n	802e7ca <_dtoa_r+0xb3a>
 802e7f4:	9b01      	ldr	r3, [sp, #4]
 802e7f6:	2b00      	cmp	r3, #0
 802e7f8:	bfc8      	it	gt
 802e7fa:	461d      	movgt	r5, r3
 802e7fc:	9b00      	ldr	r3, [sp, #0]
 802e7fe:	bfd8      	it	le
 802e800:	2501      	movle	r5, #1
 802e802:	441d      	add	r5, r3
 802e804:	f04f 0800 	mov.w	r8, #0
 802e808:	4651      	mov	r1, sl
 802e80a:	2201      	movs	r2, #1
 802e80c:	4620      	mov	r0, r4
 802e80e:	f000 fad7 	bl	802edc0 <__lshift>
 802e812:	4631      	mov	r1, r6
 802e814:	4682      	mov	sl, r0
 802e816:	f000 fb3f 	bl	802ee98 <__mcmp>
 802e81a:	2800      	cmp	r0, #0
 802e81c:	dc96      	bgt.n	802e74c <_dtoa_r+0xabc>
 802e81e:	d102      	bne.n	802e826 <_dtoa_r+0xb96>
 802e820:	f019 0f01 	tst.w	r9, #1
 802e824:	d192      	bne.n	802e74c <_dtoa_r+0xabc>
 802e826:	462b      	mov	r3, r5
 802e828:	461d      	mov	r5, r3
 802e82a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e82e:	2a30      	cmp	r2, #48	; 0x30
 802e830:	d0fa      	beq.n	802e828 <_dtoa_r+0xb98>
 802e832:	e6dd      	b.n	802e5f0 <_dtoa_r+0x960>
 802e834:	9a00      	ldr	r2, [sp, #0]
 802e836:	429a      	cmp	r2, r3
 802e838:	d189      	bne.n	802e74e <_dtoa_r+0xabe>
 802e83a:	f10b 0b01 	add.w	fp, fp, #1
 802e83e:	2331      	movs	r3, #49	; 0x31
 802e840:	e796      	b.n	802e770 <_dtoa_r+0xae0>
 802e842:	4b0a      	ldr	r3, [pc, #40]	; (802e86c <_dtoa_r+0xbdc>)
 802e844:	f7ff ba99 	b.w	802dd7a <_dtoa_r+0xea>
 802e848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e84a:	2b00      	cmp	r3, #0
 802e84c:	f47f aa6d 	bne.w	802dd2a <_dtoa_r+0x9a>
 802e850:	4b07      	ldr	r3, [pc, #28]	; (802e870 <_dtoa_r+0xbe0>)
 802e852:	f7ff ba92 	b.w	802dd7a <_dtoa_r+0xea>
 802e856:	9b01      	ldr	r3, [sp, #4]
 802e858:	2b00      	cmp	r3, #0
 802e85a:	dcb5      	bgt.n	802e7c8 <_dtoa_r+0xb38>
 802e85c:	9b07      	ldr	r3, [sp, #28]
 802e85e:	2b02      	cmp	r3, #2
 802e860:	f73f aeb1 	bgt.w	802e5c6 <_dtoa_r+0x936>
 802e864:	e7b0      	b.n	802e7c8 <_dtoa_r+0xb38>
 802e866:	bf00      	nop
 802e868:	08034a5d 	.word	0x08034a5d
 802e86c:	08034d40 	.word	0x08034d40
 802e870:	080349f8 	.word	0x080349f8

0802e874 <_free_r>:
 802e874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e876:	2900      	cmp	r1, #0
 802e878:	d044      	beq.n	802e904 <_free_r+0x90>
 802e87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e87e:	9001      	str	r0, [sp, #4]
 802e880:	2b00      	cmp	r3, #0
 802e882:	f1a1 0404 	sub.w	r4, r1, #4
 802e886:	bfb8      	it	lt
 802e888:	18e4      	addlt	r4, r4, r3
 802e88a:	f7fd fe9b 	bl	802c5c4 <__malloc_lock>
 802e88e:	4a1e      	ldr	r2, [pc, #120]	; (802e908 <_free_r+0x94>)
 802e890:	9801      	ldr	r0, [sp, #4]
 802e892:	6813      	ldr	r3, [r2, #0]
 802e894:	b933      	cbnz	r3, 802e8a4 <_free_r+0x30>
 802e896:	6063      	str	r3, [r4, #4]
 802e898:	6014      	str	r4, [r2, #0]
 802e89a:	b003      	add	sp, #12
 802e89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e8a0:	f7fd be96 	b.w	802c5d0 <__malloc_unlock>
 802e8a4:	42a3      	cmp	r3, r4
 802e8a6:	d908      	bls.n	802e8ba <_free_r+0x46>
 802e8a8:	6825      	ldr	r5, [r4, #0]
 802e8aa:	1961      	adds	r1, r4, r5
 802e8ac:	428b      	cmp	r3, r1
 802e8ae:	bf01      	itttt	eq
 802e8b0:	6819      	ldreq	r1, [r3, #0]
 802e8b2:	685b      	ldreq	r3, [r3, #4]
 802e8b4:	1949      	addeq	r1, r1, r5
 802e8b6:	6021      	streq	r1, [r4, #0]
 802e8b8:	e7ed      	b.n	802e896 <_free_r+0x22>
 802e8ba:	461a      	mov	r2, r3
 802e8bc:	685b      	ldr	r3, [r3, #4]
 802e8be:	b10b      	cbz	r3, 802e8c4 <_free_r+0x50>
 802e8c0:	42a3      	cmp	r3, r4
 802e8c2:	d9fa      	bls.n	802e8ba <_free_r+0x46>
 802e8c4:	6811      	ldr	r1, [r2, #0]
 802e8c6:	1855      	adds	r5, r2, r1
 802e8c8:	42a5      	cmp	r5, r4
 802e8ca:	d10b      	bne.n	802e8e4 <_free_r+0x70>
 802e8cc:	6824      	ldr	r4, [r4, #0]
 802e8ce:	4421      	add	r1, r4
 802e8d0:	1854      	adds	r4, r2, r1
 802e8d2:	42a3      	cmp	r3, r4
 802e8d4:	6011      	str	r1, [r2, #0]
 802e8d6:	d1e0      	bne.n	802e89a <_free_r+0x26>
 802e8d8:	681c      	ldr	r4, [r3, #0]
 802e8da:	685b      	ldr	r3, [r3, #4]
 802e8dc:	6053      	str	r3, [r2, #4]
 802e8de:	440c      	add	r4, r1
 802e8e0:	6014      	str	r4, [r2, #0]
 802e8e2:	e7da      	b.n	802e89a <_free_r+0x26>
 802e8e4:	d902      	bls.n	802e8ec <_free_r+0x78>
 802e8e6:	230c      	movs	r3, #12
 802e8e8:	6003      	str	r3, [r0, #0]
 802e8ea:	e7d6      	b.n	802e89a <_free_r+0x26>
 802e8ec:	6825      	ldr	r5, [r4, #0]
 802e8ee:	1961      	adds	r1, r4, r5
 802e8f0:	428b      	cmp	r3, r1
 802e8f2:	bf04      	itt	eq
 802e8f4:	6819      	ldreq	r1, [r3, #0]
 802e8f6:	685b      	ldreq	r3, [r3, #4]
 802e8f8:	6063      	str	r3, [r4, #4]
 802e8fa:	bf04      	itt	eq
 802e8fc:	1949      	addeq	r1, r1, r5
 802e8fe:	6021      	streq	r1, [r4, #0]
 802e900:	6054      	str	r4, [r2, #4]
 802e902:	e7ca      	b.n	802e89a <_free_r+0x26>
 802e904:	b003      	add	sp, #12
 802e906:	bd30      	pop	{r4, r5, pc}
 802e908:	2000d9a8 	.word	0x2000d9a8

0802e90c <_Balloc>:
 802e90c:	b570      	push	{r4, r5, r6, lr}
 802e90e:	69c6      	ldr	r6, [r0, #28]
 802e910:	4604      	mov	r4, r0
 802e912:	460d      	mov	r5, r1
 802e914:	b976      	cbnz	r6, 802e934 <_Balloc+0x28>
 802e916:	2010      	movs	r0, #16
 802e918:	f7fd fda4 	bl	802c464 <malloc>
 802e91c:	4602      	mov	r2, r0
 802e91e:	61e0      	str	r0, [r4, #28]
 802e920:	b920      	cbnz	r0, 802e92c <_Balloc+0x20>
 802e922:	4b18      	ldr	r3, [pc, #96]	; (802e984 <_Balloc+0x78>)
 802e924:	4818      	ldr	r0, [pc, #96]	; (802e988 <_Balloc+0x7c>)
 802e926:	216b      	movs	r1, #107	; 0x6b
 802e928:	f7fd fd68 	bl	802c3fc <__assert_func>
 802e92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e930:	6006      	str	r6, [r0, #0]
 802e932:	60c6      	str	r6, [r0, #12]
 802e934:	69e6      	ldr	r6, [r4, #28]
 802e936:	68f3      	ldr	r3, [r6, #12]
 802e938:	b183      	cbz	r3, 802e95c <_Balloc+0x50>
 802e93a:	69e3      	ldr	r3, [r4, #28]
 802e93c:	68db      	ldr	r3, [r3, #12]
 802e93e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802e942:	b9b8      	cbnz	r0, 802e974 <_Balloc+0x68>
 802e944:	2101      	movs	r1, #1
 802e946:	fa01 f605 	lsl.w	r6, r1, r5
 802e94a:	1d72      	adds	r2, r6, #5
 802e94c:	0092      	lsls	r2, r2, #2
 802e94e:	4620      	mov	r0, r4
 802e950:	f7fd fd72 	bl	802c438 <_calloc_r>
 802e954:	b160      	cbz	r0, 802e970 <_Balloc+0x64>
 802e956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802e95a:	e00e      	b.n	802e97a <_Balloc+0x6e>
 802e95c:	2221      	movs	r2, #33	; 0x21
 802e95e:	2104      	movs	r1, #4
 802e960:	4620      	mov	r0, r4
 802e962:	f7fd fd69 	bl	802c438 <_calloc_r>
 802e966:	69e3      	ldr	r3, [r4, #28]
 802e968:	60f0      	str	r0, [r6, #12]
 802e96a:	68db      	ldr	r3, [r3, #12]
 802e96c:	2b00      	cmp	r3, #0
 802e96e:	d1e4      	bne.n	802e93a <_Balloc+0x2e>
 802e970:	2000      	movs	r0, #0
 802e972:	bd70      	pop	{r4, r5, r6, pc}
 802e974:	6802      	ldr	r2, [r0, #0]
 802e976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802e97a:	2300      	movs	r3, #0
 802e97c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802e980:	e7f7      	b.n	802e972 <_Balloc+0x66>
 802e982:	bf00      	nop
 802e984:	08034987 	.word	0x08034987
 802e988:	08034a6e 	.word	0x08034a6e

0802e98c <_Bfree>:
 802e98c:	b570      	push	{r4, r5, r6, lr}
 802e98e:	69c6      	ldr	r6, [r0, #28]
 802e990:	4605      	mov	r5, r0
 802e992:	460c      	mov	r4, r1
 802e994:	b976      	cbnz	r6, 802e9b4 <_Bfree+0x28>
 802e996:	2010      	movs	r0, #16
 802e998:	f7fd fd64 	bl	802c464 <malloc>
 802e99c:	4602      	mov	r2, r0
 802e99e:	61e8      	str	r0, [r5, #28]
 802e9a0:	b920      	cbnz	r0, 802e9ac <_Bfree+0x20>
 802e9a2:	4b09      	ldr	r3, [pc, #36]	; (802e9c8 <_Bfree+0x3c>)
 802e9a4:	4809      	ldr	r0, [pc, #36]	; (802e9cc <_Bfree+0x40>)
 802e9a6:	218f      	movs	r1, #143	; 0x8f
 802e9a8:	f7fd fd28 	bl	802c3fc <__assert_func>
 802e9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e9b0:	6006      	str	r6, [r0, #0]
 802e9b2:	60c6      	str	r6, [r0, #12]
 802e9b4:	b13c      	cbz	r4, 802e9c6 <_Bfree+0x3a>
 802e9b6:	69eb      	ldr	r3, [r5, #28]
 802e9b8:	6862      	ldr	r2, [r4, #4]
 802e9ba:	68db      	ldr	r3, [r3, #12]
 802e9bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802e9c0:	6021      	str	r1, [r4, #0]
 802e9c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802e9c6:	bd70      	pop	{r4, r5, r6, pc}
 802e9c8:	08034987 	.word	0x08034987
 802e9cc:	08034a6e 	.word	0x08034a6e

0802e9d0 <__multadd>:
 802e9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e9d4:	690d      	ldr	r5, [r1, #16]
 802e9d6:	4607      	mov	r7, r0
 802e9d8:	460c      	mov	r4, r1
 802e9da:	461e      	mov	r6, r3
 802e9dc:	f101 0c14 	add.w	ip, r1, #20
 802e9e0:	2000      	movs	r0, #0
 802e9e2:	f8dc 3000 	ldr.w	r3, [ip]
 802e9e6:	b299      	uxth	r1, r3
 802e9e8:	fb02 6101 	mla	r1, r2, r1, r6
 802e9ec:	0c1e      	lsrs	r6, r3, #16
 802e9ee:	0c0b      	lsrs	r3, r1, #16
 802e9f0:	fb02 3306 	mla	r3, r2, r6, r3
 802e9f4:	b289      	uxth	r1, r1
 802e9f6:	3001      	adds	r0, #1
 802e9f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802e9fc:	4285      	cmp	r5, r0
 802e9fe:	f84c 1b04 	str.w	r1, [ip], #4
 802ea02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802ea06:	dcec      	bgt.n	802e9e2 <__multadd+0x12>
 802ea08:	b30e      	cbz	r6, 802ea4e <__multadd+0x7e>
 802ea0a:	68a3      	ldr	r3, [r4, #8]
 802ea0c:	42ab      	cmp	r3, r5
 802ea0e:	dc19      	bgt.n	802ea44 <__multadd+0x74>
 802ea10:	6861      	ldr	r1, [r4, #4]
 802ea12:	4638      	mov	r0, r7
 802ea14:	3101      	adds	r1, #1
 802ea16:	f7ff ff79 	bl	802e90c <_Balloc>
 802ea1a:	4680      	mov	r8, r0
 802ea1c:	b928      	cbnz	r0, 802ea2a <__multadd+0x5a>
 802ea1e:	4602      	mov	r2, r0
 802ea20:	4b0c      	ldr	r3, [pc, #48]	; (802ea54 <__multadd+0x84>)
 802ea22:	480d      	ldr	r0, [pc, #52]	; (802ea58 <__multadd+0x88>)
 802ea24:	21ba      	movs	r1, #186	; 0xba
 802ea26:	f7fd fce9 	bl	802c3fc <__assert_func>
 802ea2a:	6922      	ldr	r2, [r4, #16]
 802ea2c:	3202      	adds	r2, #2
 802ea2e:	f104 010c 	add.w	r1, r4, #12
 802ea32:	0092      	lsls	r2, r2, #2
 802ea34:	300c      	adds	r0, #12
 802ea36:	f7ff f886 	bl	802db46 <memcpy>
 802ea3a:	4621      	mov	r1, r4
 802ea3c:	4638      	mov	r0, r7
 802ea3e:	f7ff ffa5 	bl	802e98c <_Bfree>
 802ea42:	4644      	mov	r4, r8
 802ea44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802ea48:	3501      	adds	r5, #1
 802ea4a:	615e      	str	r6, [r3, #20]
 802ea4c:	6125      	str	r5, [r4, #16]
 802ea4e:	4620      	mov	r0, r4
 802ea50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ea54:	08034a5d 	.word	0x08034a5d
 802ea58:	08034a6e 	.word	0x08034a6e

0802ea5c <__s2b>:
 802ea5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ea60:	460c      	mov	r4, r1
 802ea62:	4615      	mov	r5, r2
 802ea64:	461f      	mov	r7, r3
 802ea66:	2209      	movs	r2, #9
 802ea68:	3308      	adds	r3, #8
 802ea6a:	4606      	mov	r6, r0
 802ea6c:	fb93 f3f2 	sdiv	r3, r3, r2
 802ea70:	2100      	movs	r1, #0
 802ea72:	2201      	movs	r2, #1
 802ea74:	429a      	cmp	r2, r3
 802ea76:	db09      	blt.n	802ea8c <__s2b+0x30>
 802ea78:	4630      	mov	r0, r6
 802ea7a:	f7ff ff47 	bl	802e90c <_Balloc>
 802ea7e:	b940      	cbnz	r0, 802ea92 <__s2b+0x36>
 802ea80:	4602      	mov	r2, r0
 802ea82:	4b19      	ldr	r3, [pc, #100]	; (802eae8 <__s2b+0x8c>)
 802ea84:	4819      	ldr	r0, [pc, #100]	; (802eaec <__s2b+0x90>)
 802ea86:	21d3      	movs	r1, #211	; 0xd3
 802ea88:	f7fd fcb8 	bl	802c3fc <__assert_func>
 802ea8c:	0052      	lsls	r2, r2, #1
 802ea8e:	3101      	adds	r1, #1
 802ea90:	e7f0      	b.n	802ea74 <__s2b+0x18>
 802ea92:	9b08      	ldr	r3, [sp, #32]
 802ea94:	6143      	str	r3, [r0, #20]
 802ea96:	2d09      	cmp	r5, #9
 802ea98:	f04f 0301 	mov.w	r3, #1
 802ea9c:	6103      	str	r3, [r0, #16]
 802ea9e:	dd16      	ble.n	802eace <__s2b+0x72>
 802eaa0:	f104 0909 	add.w	r9, r4, #9
 802eaa4:	46c8      	mov	r8, r9
 802eaa6:	442c      	add	r4, r5
 802eaa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 802eaac:	4601      	mov	r1, r0
 802eaae:	3b30      	subs	r3, #48	; 0x30
 802eab0:	220a      	movs	r2, #10
 802eab2:	4630      	mov	r0, r6
 802eab4:	f7ff ff8c 	bl	802e9d0 <__multadd>
 802eab8:	45a0      	cmp	r8, r4
 802eaba:	d1f5      	bne.n	802eaa8 <__s2b+0x4c>
 802eabc:	f1a5 0408 	sub.w	r4, r5, #8
 802eac0:	444c      	add	r4, r9
 802eac2:	1b2d      	subs	r5, r5, r4
 802eac4:	1963      	adds	r3, r4, r5
 802eac6:	42bb      	cmp	r3, r7
 802eac8:	db04      	blt.n	802ead4 <__s2b+0x78>
 802eaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802eace:	340a      	adds	r4, #10
 802ead0:	2509      	movs	r5, #9
 802ead2:	e7f6      	b.n	802eac2 <__s2b+0x66>
 802ead4:	f814 3b01 	ldrb.w	r3, [r4], #1
 802ead8:	4601      	mov	r1, r0
 802eada:	3b30      	subs	r3, #48	; 0x30
 802eadc:	220a      	movs	r2, #10
 802eade:	4630      	mov	r0, r6
 802eae0:	f7ff ff76 	bl	802e9d0 <__multadd>
 802eae4:	e7ee      	b.n	802eac4 <__s2b+0x68>
 802eae6:	bf00      	nop
 802eae8:	08034a5d 	.word	0x08034a5d
 802eaec:	08034a6e 	.word	0x08034a6e

0802eaf0 <__hi0bits>:
 802eaf0:	0c03      	lsrs	r3, r0, #16
 802eaf2:	041b      	lsls	r3, r3, #16
 802eaf4:	b9d3      	cbnz	r3, 802eb2c <__hi0bits+0x3c>
 802eaf6:	0400      	lsls	r0, r0, #16
 802eaf8:	2310      	movs	r3, #16
 802eafa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802eafe:	bf04      	itt	eq
 802eb00:	0200      	lsleq	r0, r0, #8
 802eb02:	3308      	addeq	r3, #8
 802eb04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802eb08:	bf04      	itt	eq
 802eb0a:	0100      	lsleq	r0, r0, #4
 802eb0c:	3304      	addeq	r3, #4
 802eb0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802eb12:	bf04      	itt	eq
 802eb14:	0080      	lsleq	r0, r0, #2
 802eb16:	3302      	addeq	r3, #2
 802eb18:	2800      	cmp	r0, #0
 802eb1a:	db05      	blt.n	802eb28 <__hi0bits+0x38>
 802eb1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802eb20:	f103 0301 	add.w	r3, r3, #1
 802eb24:	bf08      	it	eq
 802eb26:	2320      	moveq	r3, #32
 802eb28:	4618      	mov	r0, r3
 802eb2a:	4770      	bx	lr
 802eb2c:	2300      	movs	r3, #0
 802eb2e:	e7e4      	b.n	802eafa <__hi0bits+0xa>

0802eb30 <__lo0bits>:
 802eb30:	6803      	ldr	r3, [r0, #0]
 802eb32:	f013 0207 	ands.w	r2, r3, #7
 802eb36:	d00c      	beq.n	802eb52 <__lo0bits+0x22>
 802eb38:	07d9      	lsls	r1, r3, #31
 802eb3a:	d422      	bmi.n	802eb82 <__lo0bits+0x52>
 802eb3c:	079a      	lsls	r2, r3, #30
 802eb3e:	bf49      	itett	mi
 802eb40:	085b      	lsrmi	r3, r3, #1
 802eb42:	089b      	lsrpl	r3, r3, #2
 802eb44:	6003      	strmi	r3, [r0, #0]
 802eb46:	2201      	movmi	r2, #1
 802eb48:	bf5c      	itt	pl
 802eb4a:	6003      	strpl	r3, [r0, #0]
 802eb4c:	2202      	movpl	r2, #2
 802eb4e:	4610      	mov	r0, r2
 802eb50:	4770      	bx	lr
 802eb52:	b299      	uxth	r1, r3
 802eb54:	b909      	cbnz	r1, 802eb5a <__lo0bits+0x2a>
 802eb56:	0c1b      	lsrs	r3, r3, #16
 802eb58:	2210      	movs	r2, #16
 802eb5a:	b2d9      	uxtb	r1, r3
 802eb5c:	b909      	cbnz	r1, 802eb62 <__lo0bits+0x32>
 802eb5e:	3208      	adds	r2, #8
 802eb60:	0a1b      	lsrs	r3, r3, #8
 802eb62:	0719      	lsls	r1, r3, #28
 802eb64:	bf04      	itt	eq
 802eb66:	091b      	lsreq	r3, r3, #4
 802eb68:	3204      	addeq	r2, #4
 802eb6a:	0799      	lsls	r1, r3, #30
 802eb6c:	bf04      	itt	eq
 802eb6e:	089b      	lsreq	r3, r3, #2
 802eb70:	3202      	addeq	r2, #2
 802eb72:	07d9      	lsls	r1, r3, #31
 802eb74:	d403      	bmi.n	802eb7e <__lo0bits+0x4e>
 802eb76:	085b      	lsrs	r3, r3, #1
 802eb78:	f102 0201 	add.w	r2, r2, #1
 802eb7c:	d003      	beq.n	802eb86 <__lo0bits+0x56>
 802eb7e:	6003      	str	r3, [r0, #0]
 802eb80:	e7e5      	b.n	802eb4e <__lo0bits+0x1e>
 802eb82:	2200      	movs	r2, #0
 802eb84:	e7e3      	b.n	802eb4e <__lo0bits+0x1e>
 802eb86:	2220      	movs	r2, #32
 802eb88:	e7e1      	b.n	802eb4e <__lo0bits+0x1e>
	...

0802eb8c <__i2b>:
 802eb8c:	b510      	push	{r4, lr}
 802eb8e:	460c      	mov	r4, r1
 802eb90:	2101      	movs	r1, #1
 802eb92:	f7ff febb 	bl	802e90c <_Balloc>
 802eb96:	4602      	mov	r2, r0
 802eb98:	b928      	cbnz	r0, 802eba6 <__i2b+0x1a>
 802eb9a:	4b05      	ldr	r3, [pc, #20]	; (802ebb0 <__i2b+0x24>)
 802eb9c:	4805      	ldr	r0, [pc, #20]	; (802ebb4 <__i2b+0x28>)
 802eb9e:	f240 1145 	movw	r1, #325	; 0x145
 802eba2:	f7fd fc2b 	bl	802c3fc <__assert_func>
 802eba6:	2301      	movs	r3, #1
 802eba8:	6144      	str	r4, [r0, #20]
 802ebaa:	6103      	str	r3, [r0, #16]
 802ebac:	bd10      	pop	{r4, pc}
 802ebae:	bf00      	nop
 802ebb0:	08034a5d 	.word	0x08034a5d
 802ebb4:	08034a6e 	.word	0x08034a6e

0802ebb8 <__multiply>:
 802ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ebbc:	4691      	mov	r9, r2
 802ebbe:	690a      	ldr	r2, [r1, #16]
 802ebc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802ebc4:	429a      	cmp	r2, r3
 802ebc6:	bfb8      	it	lt
 802ebc8:	460b      	movlt	r3, r1
 802ebca:	460c      	mov	r4, r1
 802ebcc:	bfbc      	itt	lt
 802ebce:	464c      	movlt	r4, r9
 802ebd0:	4699      	movlt	r9, r3
 802ebd2:	6927      	ldr	r7, [r4, #16]
 802ebd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802ebd8:	68a3      	ldr	r3, [r4, #8]
 802ebda:	6861      	ldr	r1, [r4, #4]
 802ebdc:	eb07 060a 	add.w	r6, r7, sl
 802ebe0:	42b3      	cmp	r3, r6
 802ebe2:	b085      	sub	sp, #20
 802ebe4:	bfb8      	it	lt
 802ebe6:	3101      	addlt	r1, #1
 802ebe8:	f7ff fe90 	bl	802e90c <_Balloc>
 802ebec:	b930      	cbnz	r0, 802ebfc <__multiply+0x44>
 802ebee:	4602      	mov	r2, r0
 802ebf0:	4b44      	ldr	r3, [pc, #272]	; (802ed04 <__multiply+0x14c>)
 802ebf2:	4845      	ldr	r0, [pc, #276]	; (802ed08 <__multiply+0x150>)
 802ebf4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802ebf8:	f7fd fc00 	bl	802c3fc <__assert_func>
 802ebfc:	f100 0514 	add.w	r5, r0, #20
 802ec00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802ec04:	462b      	mov	r3, r5
 802ec06:	2200      	movs	r2, #0
 802ec08:	4543      	cmp	r3, r8
 802ec0a:	d321      	bcc.n	802ec50 <__multiply+0x98>
 802ec0c:	f104 0314 	add.w	r3, r4, #20
 802ec10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802ec14:	f109 0314 	add.w	r3, r9, #20
 802ec18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802ec1c:	9202      	str	r2, [sp, #8]
 802ec1e:	1b3a      	subs	r2, r7, r4
 802ec20:	3a15      	subs	r2, #21
 802ec22:	f022 0203 	bic.w	r2, r2, #3
 802ec26:	3204      	adds	r2, #4
 802ec28:	f104 0115 	add.w	r1, r4, #21
 802ec2c:	428f      	cmp	r7, r1
 802ec2e:	bf38      	it	cc
 802ec30:	2204      	movcc	r2, #4
 802ec32:	9201      	str	r2, [sp, #4]
 802ec34:	9a02      	ldr	r2, [sp, #8]
 802ec36:	9303      	str	r3, [sp, #12]
 802ec38:	429a      	cmp	r2, r3
 802ec3a:	d80c      	bhi.n	802ec56 <__multiply+0x9e>
 802ec3c:	2e00      	cmp	r6, #0
 802ec3e:	dd03      	ble.n	802ec48 <__multiply+0x90>
 802ec40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802ec44:	2b00      	cmp	r3, #0
 802ec46:	d05b      	beq.n	802ed00 <__multiply+0x148>
 802ec48:	6106      	str	r6, [r0, #16]
 802ec4a:	b005      	add	sp, #20
 802ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ec50:	f843 2b04 	str.w	r2, [r3], #4
 802ec54:	e7d8      	b.n	802ec08 <__multiply+0x50>
 802ec56:	f8b3 a000 	ldrh.w	sl, [r3]
 802ec5a:	f1ba 0f00 	cmp.w	sl, #0
 802ec5e:	d024      	beq.n	802ecaa <__multiply+0xf2>
 802ec60:	f104 0e14 	add.w	lr, r4, #20
 802ec64:	46a9      	mov	r9, r5
 802ec66:	f04f 0c00 	mov.w	ip, #0
 802ec6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802ec6e:	f8d9 1000 	ldr.w	r1, [r9]
 802ec72:	fa1f fb82 	uxth.w	fp, r2
 802ec76:	b289      	uxth	r1, r1
 802ec78:	fb0a 110b 	mla	r1, sl, fp, r1
 802ec7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802ec80:	f8d9 2000 	ldr.w	r2, [r9]
 802ec84:	4461      	add	r1, ip
 802ec86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ec8a:	fb0a c20b 	mla	r2, sl, fp, ip
 802ec8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802ec92:	b289      	uxth	r1, r1
 802ec94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ec98:	4577      	cmp	r7, lr
 802ec9a:	f849 1b04 	str.w	r1, [r9], #4
 802ec9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802eca2:	d8e2      	bhi.n	802ec6a <__multiply+0xb2>
 802eca4:	9a01      	ldr	r2, [sp, #4]
 802eca6:	f845 c002 	str.w	ip, [r5, r2]
 802ecaa:	9a03      	ldr	r2, [sp, #12]
 802ecac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802ecb0:	3304      	adds	r3, #4
 802ecb2:	f1b9 0f00 	cmp.w	r9, #0
 802ecb6:	d021      	beq.n	802ecfc <__multiply+0x144>
 802ecb8:	6829      	ldr	r1, [r5, #0]
 802ecba:	f104 0c14 	add.w	ip, r4, #20
 802ecbe:	46ae      	mov	lr, r5
 802ecc0:	f04f 0a00 	mov.w	sl, #0
 802ecc4:	f8bc b000 	ldrh.w	fp, [ip]
 802ecc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802eccc:	fb09 220b 	mla	r2, r9, fp, r2
 802ecd0:	4452      	add	r2, sl
 802ecd2:	b289      	uxth	r1, r1
 802ecd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ecd8:	f84e 1b04 	str.w	r1, [lr], #4
 802ecdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 802ece0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ece4:	f8be 1000 	ldrh.w	r1, [lr]
 802ece8:	fb09 110a 	mla	r1, r9, sl, r1
 802ecec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802ecf0:	4567      	cmp	r7, ip
 802ecf2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ecf6:	d8e5      	bhi.n	802ecc4 <__multiply+0x10c>
 802ecf8:	9a01      	ldr	r2, [sp, #4]
 802ecfa:	50a9      	str	r1, [r5, r2]
 802ecfc:	3504      	adds	r5, #4
 802ecfe:	e799      	b.n	802ec34 <__multiply+0x7c>
 802ed00:	3e01      	subs	r6, #1
 802ed02:	e79b      	b.n	802ec3c <__multiply+0x84>
 802ed04:	08034a5d 	.word	0x08034a5d
 802ed08:	08034a6e 	.word	0x08034a6e

0802ed0c <__pow5mult>:
 802ed0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ed10:	4615      	mov	r5, r2
 802ed12:	f012 0203 	ands.w	r2, r2, #3
 802ed16:	4606      	mov	r6, r0
 802ed18:	460f      	mov	r7, r1
 802ed1a:	d007      	beq.n	802ed2c <__pow5mult+0x20>
 802ed1c:	4c25      	ldr	r4, [pc, #148]	; (802edb4 <__pow5mult+0xa8>)
 802ed1e:	3a01      	subs	r2, #1
 802ed20:	2300      	movs	r3, #0
 802ed22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802ed26:	f7ff fe53 	bl	802e9d0 <__multadd>
 802ed2a:	4607      	mov	r7, r0
 802ed2c:	10ad      	asrs	r5, r5, #2
 802ed2e:	d03d      	beq.n	802edac <__pow5mult+0xa0>
 802ed30:	69f4      	ldr	r4, [r6, #28]
 802ed32:	b97c      	cbnz	r4, 802ed54 <__pow5mult+0x48>
 802ed34:	2010      	movs	r0, #16
 802ed36:	f7fd fb95 	bl	802c464 <malloc>
 802ed3a:	4602      	mov	r2, r0
 802ed3c:	61f0      	str	r0, [r6, #28]
 802ed3e:	b928      	cbnz	r0, 802ed4c <__pow5mult+0x40>
 802ed40:	4b1d      	ldr	r3, [pc, #116]	; (802edb8 <__pow5mult+0xac>)
 802ed42:	481e      	ldr	r0, [pc, #120]	; (802edbc <__pow5mult+0xb0>)
 802ed44:	f240 11b3 	movw	r1, #435	; 0x1b3
 802ed48:	f7fd fb58 	bl	802c3fc <__assert_func>
 802ed4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802ed50:	6004      	str	r4, [r0, #0]
 802ed52:	60c4      	str	r4, [r0, #12]
 802ed54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802ed58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802ed5c:	b94c      	cbnz	r4, 802ed72 <__pow5mult+0x66>
 802ed5e:	f240 2171 	movw	r1, #625	; 0x271
 802ed62:	4630      	mov	r0, r6
 802ed64:	f7ff ff12 	bl	802eb8c <__i2b>
 802ed68:	2300      	movs	r3, #0
 802ed6a:	f8c8 0008 	str.w	r0, [r8, #8]
 802ed6e:	4604      	mov	r4, r0
 802ed70:	6003      	str	r3, [r0, #0]
 802ed72:	f04f 0900 	mov.w	r9, #0
 802ed76:	07eb      	lsls	r3, r5, #31
 802ed78:	d50a      	bpl.n	802ed90 <__pow5mult+0x84>
 802ed7a:	4639      	mov	r1, r7
 802ed7c:	4622      	mov	r2, r4
 802ed7e:	4630      	mov	r0, r6
 802ed80:	f7ff ff1a 	bl	802ebb8 <__multiply>
 802ed84:	4639      	mov	r1, r7
 802ed86:	4680      	mov	r8, r0
 802ed88:	4630      	mov	r0, r6
 802ed8a:	f7ff fdff 	bl	802e98c <_Bfree>
 802ed8e:	4647      	mov	r7, r8
 802ed90:	106d      	asrs	r5, r5, #1
 802ed92:	d00b      	beq.n	802edac <__pow5mult+0xa0>
 802ed94:	6820      	ldr	r0, [r4, #0]
 802ed96:	b938      	cbnz	r0, 802eda8 <__pow5mult+0x9c>
 802ed98:	4622      	mov	r2, r4
 802ed9a:	4621      	mov	r1, r4
 802ed9c:	4630      	mov	r0, r6
 802ed9e:	f7ff ff0b 	bl	802ebb8 <__multiply>
 802eda2:	6020      	str	r0, [r4, #0]
 802eda4:	f8c0 9000 	str.w	r9, [r0]
 802eda8:	4604      	mov	r4, r0
 802edaa:	e7e4      	b.n	802ed76 <__pow5mult+0x6a>
 802edac:	4638      	mov	r0, r7
 802edae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802edb2:	bf00      	nop
 802edb4:	08034bb8 	.word	0x08034bb8
 802edb8:	08034987 	.word	0x08034987
 802edbc:	08034a6e 	.word	0x08034a6e

0802edc0 <__lshift>:
 802edc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802edc4:	460c      	mov	r4, r1
 802edc6:	6849      	ldr	r1, [r1, #4]
 802edc8:	6923      	ldr	r3, [r4, #16]
 802edca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802edce:	68a3      	ldr	r3, [r4, #8]
 802edd0:	4607      	mov	r7, r0
 802edd2:	4691      	mov	r9, r2
 802edd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802edd8:	f108 0601 	add.w	r6, r8, #1
 802eddc:	42b3      	cmp	r3, r6
 802edde:	db0b      	blt.n	802edf8 <__lshift+0x38>
 802ede0:	4638      	mov	r0, r7
 802ede2:	f7ff fd93 	bl	802e90c <_Balloc>
 802ede6:	4605      	mov	r5, r0
 802ede8:	b948      	cbnz	r0, 802edfe <__lshift+0x3e>
 802edea:	4602      	mov	r2, r0
 802edec:	4b28      	ldr	r3, [pc, #160]	; (802ee90 <__lshift+0xd0>)
 802edee:	4829      	ldr	r0, [pc, #164]	; (802ee94 <__lshift+0xd4>)
 802edf0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802edf4:	f7fd fb02 	bl	802c3fc <__assert_func>
 802edf8:	3101      	adds	r1, #1
 802edfa:	005b      	lsls	r3, r3, #1
 802edfc:	e7ee      	b.n	802eddc <__lshift+0x1c>
 802edfe:	2300      	movs	r3, #0
 802ee00:	f100 0114 	add.w	r1, r0, #20
 802ee04:	f100 0210 	add.w	r2, r0, #16
 802ee08:	4618      	mov	r0, r3
 802ee0a:	4553      	cmp	r3, sl
 802ee0c:	db33      	blt.n	802ee76 <__lshift+0xb6>
 802ee0e:	6920      	ldr	r0, [r4, #16]
 802ee10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802ee14:	f104 0314 	add.w	r3, r4, #20
 802ee18:	f019 091f 	ands.w	r9, r9, #31
 802ee1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802ee20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802ee24:	d02b      	beq.n	802ee7e <__lshift+0xbe>
 802ee26:	f1c9 0e20 	rsb	lr, r9, #32
 802ee2a:	468a      	mov	sl, r1
 802ee2c:	2200      	movs	r2, #0
 802ee2e:	6818      	ldr	r0, [r3, #0]
 802ee30:	fa00 f009 	lsl.w	r0, r0, r9
 802ee34:	4310      	orrs	r0, r2
 802ee36:	f84a 0b04 	str.w	r0, [sl], #4
 802ee3a:	f853 2b04 	ldr.w	r2, [r3], #4
 802ee3e:	459c      	cmp	ip, r3
 802ee40:	fa22 f20e 	lsr.w	r2, r2, lr
 802ee44:	d8f3      	bhi.n	802ee2e <__lshift+0x6e>
 802ee46:	ebac 0304 	sub.w	r3, ip, r4
 802ee4a:	3b15      	subs	r3, #21
 802ee4c:	f023 0303 	bic.w	r3, r3, #3
 802ee50:	3304      	adds	r3, #4
 802ee52:	f104 0015 	add.w	r0, r4, #21
 802ee56:	4584      	cmp	ip, r0
 802ee58:	bf38      	it	cc
 802ee5a:	2304      	movcc	r3, #4
 802ee5c:	50ca      	str	r2, [r1, r3]
 802ee5e:	b10a      	cbz	r2, 802ee64 <__lshift+0xa4>
 802ee60:	f108 0602 	add.w	r6, r8, #2
 802ee64:	3e01      	subs	r6, #1
 802ee66:	4638      	mov	r0, r7
 802ee68:	612e      	str	r6, [r5, #16]
 802ee6a:	4621      	mov	r1, r4
 802ee6c:	f7ff fd8e 	bl	802e98c <_Bfree>
 802ee70:	4628      	mov	r0, r5
 802ee72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ee76:	f842 0f04 	str.w	r0, [r2, #4]!
 802ee7a:	3301      	adds	r3, #1
 802ee7c:	e7c5      	b.n	802ee0a <__lshift+0x4a>
 802ee7e:	3904      	subs	r1, #4
 802ee80:	f853 2b04 	ldr.w	r2, [r3], #4
 802ee84:	f841 2f04 	str.w	r2, [r1, #4]!
 802ee88:	459c      	cmp	ip, r3
 802ee8a:	d8f9      	bhi.n	802ee80 <__lshift+0xc0>
 802ee8c:	e7ea      	b.n	802ee64 <__lshift+0xa4>
 802ee8e:	bf00      	nop
 802ee90:	08034a5d 	.word	0x08034a5d
 802ee94:	08034a6e 	.word	0x08034a6e

0802ee98 <__mcmp>:
 802ee98:	b530      	push	{r4, r5, lr}
 802ee9a:	6902      	ldr	r2, [r0, #16]
 802ee9c:	690c      	ldr	r4, [r1, #16]
 802ee9e:	1b12      	subs	r2, r2, r4
 802eea0:	d10e      	bne.n	802eec0 <__mcmp+0x28>
 802eea2:	f100 0314 	add.w	r3, r0, #20
 802eea6:	3114      	adds	r1, #20
 802eea8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802eeac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802eeb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802eeb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802eeb8:	42a5      	cmp	r5, r4
 802eeba:	d003      	beq.n	802eec4 <__mcmp+0x2c>
 802eebc:	d305      	bcc.n	802eeca <__mcmp+0x32>
 802eebe:	2201      	movs	r2, #1
 802eec0:	4610      	mov	r0, r2
 802eec2:	bd30      	pop	{r4, r5, pc}
 802eec4:	4283      	cmp	r3, r0
 802eec6:	d3f3      	bcc.n	802eeb0 <__mcmp+0x18>
 802eec8:	e7fa      	b.n	802eec0 <__mcmp+0x28>
 802eeca:	f04f 32ff 	mov.w	r2, #4294967295
 802eece:	e7f7      	b.n	802eec0 <__mcmp+0x28>

0802eed0 <__mdiff>:
 802eed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eed4:	460c      	mov	r4, r1
 802eed6:	4606      	mov	r6, r0
 802eed8:	4611      	mov	r1, r2
 802eeda:	4620      	mov	r0, r4
 802eedc:	4690      	mov	r8, r2
 802eede:	f7ff ffdb 	bl	802ee98 <__mcmp>
 802eee2:	1e05      	subs	r5, r0, #0
 802eee4:	d110      	bne.n	802ef08 <__mdiff+0x38>
 802eee6:	4629      	mov	r1, r5
 802eee8:	4630      	mov	r0, r6
 802eeea:	f7ff fd0f 	bl	802e90c <_Balloc>
 802eeee:	b930      	cbnz	r0, 802eefe <__mdiff+0x2e>
 802eef0:	4b3a      	ldr	r3, [pc, #232]	; (802efdc <__mdiff+0x10c>)
 802eef2:	4602      	mov	r2, r0
 802eef4:	f240 2137 	movw	r1, #567	; 0x237
 802eef8:	4839      	ldr	r0, [pc, #228]	; (802efe0 <__mdiff+0x110>)
 802eefa:	f7fd fa7f 	bl	802c3fc <__assert_func>
 802eefe:	2301      	movs	r3, #1
 802ef00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802ef04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ef08:	bfa4      	itt	ge
 802ef0a:	4643      	movge	r3, r8
 802ef0c:	46a0      	movge	r8, r4
 802ef0e:	4630      	mov	r0, r6
 802ef10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802ef14:	bfa6      	itte	ge
 802ef16:	461c      	movge	r4, r3
 802ef18:	2500      	movge	r5, #0
 802ef1a:	2501      	movlt	r5, #1
 802ef1c:	f7ff fcf6 	bl	802e90c <_Balloc>
 802ef20:	b920      	cbnz	r0, 802ef2c <__mdiff+0x5c>
 802ef22:	4b2e      	ldr	r3, [pc, #184]	; (802efdc <__mdiff+0x10c>)
 802ef24:	4602      	mov	r2, r0
 802ef26:	f240 2145 	movw	r1, #581	; 0x245
 802ef2a:	e7e5      	b.n	802eef8 <__mdiff+0x28>
 802ef2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802ef30:	6926      	ldr	r6, [r4, #16]
 802ef32:	60c5      	str	r5, [r0, #12]
 802ef34:	f104 0914 	add.w	r9, r4, #20
 802ef38:	f108 0514 	add.w	r5, r8, #20
 802ef3c:	f100 0e14 	add.w	lr, r0, #20
 802ef40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802ef44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802ef48:	f108 0210 	add.w	r2, r8, #16
 802ef4c:	46f2      	mov	sl, lr
 802ef4e:	2100      	movs	r1, #0
 802ef50:	f859 3b04 	ldr.w	r3, [r9], #4
 802ef54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802ef58:	fa11 f88b 	uxtah	r8, r1, fp
 802ef5c:	b299      	uxth	r1, r3
 802ef5e:	0c1b      	lsrs	r3, r3, #16
 802ef60:	eba8 0801 	sub.w	r8, r8, r1
 802ef64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802ef68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802ef6c:	fa1f f888 	uxth.w	r8, r8
 802ef70:	1419      	asrs	r1, r3, #16
 802ef72:	454e      	cmp	r6, r9
 802ef74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802ef78:	f84a 3b04 	str.w	r3, [sl], #4
 802ef7c:	d8e8      	bhi.n	802ef50 <__mdiff+0x80>
 802ef7e:	1b33      	subs	r3, r6, r4
 802ef80:	3b15      	subs	r3, #21
 802ef82:	f023 0303 	bic.w	r3, r3, #3
 802ef86:	3304      	adds	r3, #4
 802ef88:	3415      	adds	r4, #21
 802ef8a:	42a6      	cmp	r6, r4
 802ef8c:	bf38      	it	cc
 802ef8e:	2304      	movcc	r3, #4
 802ef90:	441d      	add	r5, r3
 802ef92:	4473      	add	r3, lr
 802ef94:	469e      	mov	lr, r3
 802ef96:	462e      	mov	r6, r5
 802ef98:	4566      	cmp	r6, ip
 802ef9a:	d30e      	bcc.n	802efba <__mdiff+0xea>
 802ef9c:	f10c 0203 	add.w	r2, ip, #3
 802efa0:	1b52      	subs	r2, r2, r5
 802efa2:	f022 0203 	bic.w	r2, r2, #3
 802efa6:	3d03      	subs	r5, #3
 802efa8:	45ac      	cmp	ip, r5
 802efaa:	bf38      	it	cc
 802efac:	2200      	movcc	r2, #0
 802efae:	4413      	add	r3, r2
 802efb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802efb4:	b17a      	cbz	r2, 802efd6 <__mdiff+0x106>
 802efb6:	6107      	str	r7, [r0, #16]
 802efb8:	e7a4      	b.n	802ef04 <__mdiff+0x34>
 802efba:	f856 8b04 	ldr.w	r8, [r6], #4
 802efbe:	fa11 f288 	uxtah	r2, r1, r8
 802efc2:	1414      	asrs	r4, r2, #16
 802efc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802efc8:	b292      	uxth	r2, r2
 802efca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802efce:	f84e 2b04 	str.w	r2, [lr], #4
 802efd2:	1421      	asrs	r1, r4, #16
 802efd4:	e7e0      	b.n	802ef98 <__mdiff+0xc8>
 802efd6:	3f01      	subs	r7, #1
 802efd8:	e7ea      	b.n	802efb0 <__mdiff+0xe0>
 802efda:	bf00      	nop
 802efdc:	08034a5d 	.word	0x08034a5d
 802efe0:	08034a6e 	.word	0x08034a6e

0802efe4 <__ulp>:
 802efe4:	b082      	sub	sp, #8
 802efe6:	ed8d 0b00 	vstr	d0, [sp]
 802efea:	9a01      	ldr	r2, [sp, #4]
 802efec:	4b0f      	ldr	r3, [pc, #60]	; (802f02c <__ulp+0x48>)
 802efee:	4013      	ands	r3, r2
 802eff0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802eff4:	2b00      	cmp	r3, #0
 802eff6:	dc08      	bgt.n	802f00a <__ulp+0x26>
 802eff8:	425b      	negs	r3, r3
 802effa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802effe:	ea4f 5223 	mov.w	r2, r3, asr #20
 802f002:	da04      	bge.n	802f00e <__ulp+0x2a>
 802f004:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802f008:	4113      	asrs	r3, r2
 802f00a:	2200      	movs	r2, #0
 802f00c:	e008      	b.n	802f020 <__ulp+0x3c>
 802f00e:	f1a2 0314 	sub.w	r3, r2, #20
 802f012:	2b1e      	cmp	r3, #30
 802f014:	bfda      	itte	le
 802f016:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802f01a:	40da      	lsrle	r2, r3
 802f01c:	2201      	movgt	r2, #1
 802f01e:	2300      	movs	r3, #0
 802f020:	4619      	mov	r1, r3
 802f022:	4610      	mov	r0, r2
 802f024:	ec41 0b10 	vmov	d0, r0, r1
 802f028:	b002      	add	sp, #8
 802f02a:	4770      	bx	lr
 802f02c:	7ff00000 	.word	0x7ff00000

0802f030 <__b2d>:
 802f030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f034:	6906      	ldr	r6, [r0, #16]
 802f036:	f100 0814 	add.w	r8, r0, #20
 802f03a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802f03e:	1f37      	subs	r7, r6, #4
 802f040:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802f044:	4610      	mov	r0, r2
 802f046:	f7ff fd53 	bl	802eaf0 <__hi0bits>
 802f04a:	f1c0 0320 	rsb	r3, r0, #32
 802f04e:	280a      	cmp	r0, #10
 802f050:	600b      	str	r3, [r1, #0]
 802f052:	491b      	ldr	r1, [pc, #108]	; (802f0c0 <__b2d+0x90>)
 802f054:	dc15      	bgt.n	802f082 <__b2d+0x52>
 802f056:	f1c0 0c0b 	rsb	ip, r0, #11
 802f05a:	fa22 f30c 	lsr.w	r3, r2, ip
 802f05e:	45b8      	cmp	r8, r7
 802f060:	ea43 0501 	orr.w	r5, r3, r1
 802f064:	bf34      	ite	cc
 802f066:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f06a:	2300      	movcs	r3, #0
 802f06c:	3015      	adds	r0, #21
 802f06e:	fa02 f000 	lsl.w	r0, r2, r0
 802f072:	fa23 f30c 	lsr.w	r3, r3, ip
 802f076:	4303      	orrs	r3, r0
 802f078:	461c      	mov	r4, r3
 802f07a:	ec45 4b10 	vmov	d0, r4, r5
 802f07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f082:	45b8      	cmp	r8, r7
 802f084:	bf3a      	itte	cc
 802f086:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f08a:	f1a6 0708 	subcc.w	r7, r6, #8
 802f08e:	2300      	movcs	r3, #0
 802f090:	380b      	subs	r0, #11
 802f092:	d012      	beq.n	802f0ba <__b2d+0x8a>
 802f094:	f1c0 0120 	rsb	r1, r0, #32
 802f098:	fa23 f401 	lsr.w	r4, r3, r1
 802f09c:	4082      	lsls	r2, r0
 802f09e:	4322      	orrs	r2, r4
 802f0a0:	4547      	cmp	r7, r8
 802f0a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802f0a6:	bf8c      	ite	hi
 802f0a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802f0ac:	2200      	movls	r2, #0
 802f0ae:	4083      	lsls	r3, r0
 802f0b0:	40ca      	lsrs	r2, r1
 802f0b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802f0b6:	4313      	orrs	r3, r2
 802f0b8:	e7de      	b.n	802f078 <__b2d+0x48>
 802f0ba:	ea42 0501 	orr.w	r5, r2, r1
 802f0be:	e7db      	b.n	802f078 <__b2d+0x48>
 802f0c0:	3ff00000 	.word	0x3ff00000

0802f0c4 <__d2b>:
 802f0c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f0c8:	460f      	mov	r7, r1
 802f0ca:	2101      	movs	r1, #1
 802f0cc:	ec59 8b10 	vmov	r8, r9, d0
 802f0d0:	4616      	mov	r6, r2
 802f0d2:	f7ff fc1b 	bl	802e90c <_Balloc>
 802f0d6:	4604      	mov	r4, r0
 802f0d8:	b930      	cbnz	r0, 802f0e8 <__d2b+0x24>
 802f0da:	4602      	mov	r2, r0
 802f0dc:	4b24      	ldr	r3, [pc, #144]	; (802f170 <__d2b+0xac>)
 802f0de:	4825      	ldr	r0, [pc, #148]	; (802f174 <__d2b+0xb0>)
 802f0e0:	f240 310f 	movw	r1, #783	; 0x30f
 802f0e4:	f7fd f98a 	bl	802c3fc <__assert_func>
 802f0e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802f0ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f0f0:	bb2d      	cbnz	r5, 802f13e <__d2b+0x7a>
 802f0f2:	9301      	str	r3, [sp, #4]
 802f0f4:	f1b8 0300 	subs.w	r3, r8, #0
 802f0f8:	d026      	beq.n	802f148 <__d2b+0x84>
 802f0fa:	4668      	mov	r0, sp
 802f0fc:	9300      	str	r3, [sp, #0]
 802f0fe:	f7ff fd17 	bl	802eb30 <__lo0bits>
 802f102:	e9dd 1200 	ldrd	r1, r2, [sp]
 802f106:	b1e8      	cbz	r0, 802f144 <__d2b+0x80>
 802f108:	f1c0 0320 	rsb	r3, r0, #32
 802f10c:	fa02 f303 	lsl.w	r3, r2, r3
 802f110:	430b      	orrs	r3, r1
 802f112:	40c2      	lsrs	r2, r0
 802f114:	6163      	str	r3, [r4, #20]
 802f116:	9201      	str	r2, [sp, #4]
 802f118:	9b01      	ldr	r3, [sp, #4]
 802f11a:	61a3      	str	r3, [r4, #24]
 802f11c:	2b00      	cmp	r3, #0
 802f11e:	bf14      	ite	ne
 802f120:	2202      	movne	r2, #2
 802f122:	2201      	moveq	r2, #1
 802f124:	6122      	str	r2, [r4, #16]
 802f126:	b1bd      	cbz	r5, 802f158 <__d2b+0x94>
 802f128:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802f12c:	4405      	add	r5, r0
 802f12e:	603d      	str	r5, [r7, #0]
 802f130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802f134:	6030      	str	r0, [r6, #0]
 802f136:	4620      	mov	r0, r4
 802f138:	b003      	add	sp, #12
 802f13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802f13e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802f142:	e7d6      	b.n	802f0f2 <__d2b+0x2e>
 802f144:	6161      	str	r1, [r4, #20]
 802f146:	e7e7      	b.n	802f118 <__d2b+0x54>
 802f148:	a801      	add	r0, sp, #4
 802f14a:	f7ff fcf1 	bl	802eb30 <__lo0bits>
 802f14e:	9b01      	ldr	r3, [sp, #4]
 802f150:	6163      	str	r3, [r4, #20]
 802f152:	3020      	adds	r0, #32
 802f154:	2201      	movs	r2, #1
 802f156:	e7e5      	b.n	802f124 <__d2b+0x60>
 802f158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802f15c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802f160:	6038      	str	r0, [r7, #0]
 802f162:	6918      	ldr	r0, [r3, #16]
 802f164:	f7ff fcc4 	bl	802eaf0 <__hi0bits>
 802f168:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802f16c:	e7e2      	b.n	802f134 <__d2b+0x70>
 802f16e:	bf00      	nop
 802f170:	08034a5d 	.word	0x08034a5d
 802f174:	08034a6e 	.word	0x08034a6e

0802f178 <__ratio>:
 802f178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f17c:	4688      	mov	r8, r1
 802f17e:	4669      	mov	r1, sp
 802f180:	4681      	mov	r9, r0
 802f182:	f7ff ff55 	bl	802f030 <__b2d>
 802f186:	a901      	add	r1, sp, #4
 802f188:	4640      	mov	r0, r8
 802f18a:	ec55 4b10 	vmov	r4, r5, d0
 802f18e:	f7ff ff4f 	bl	802f030 <__b2d>
 802f192:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f196:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802f19a:	eba3 0c02 	sub.w	ip, r3, r2
 802f19e:	e9dd 3200 	ldrd	r3, r2, [sp]
 802f1a2:	1a9b      	subs	r3, r3, r2
 802f1a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802f1a8:	ec51 0b10 	vmov	r0, r1, d0
 802f1ac:	2b00      	cmp	r3, #0
 802f1ae:	bfd6      	itet	le
 802f1b0:	460a      	movle	r2, r1
 802f1b2:	462a      	movgt	r2, r5
 802f1b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802f1b8:	468b      	mov	fp, r1
 802f1ba:	462f      	mov	r7, r5
 802f1bc:	bfd4      	ite	le
 802f1be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802f1c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802f1c6:	4620      	mov	r0, r4
 802f1c8:	ee10 2a10 	vmov	r2, s0
 802f1cc:	465b      	mov	r3, fp
 802f1ce:	4639      	mov	r1, r7
 802f1d0:	f7e1 fb54 	bl	801087c <__aeabi_ddiv>
 802f1d4:	ec41 0b10 	vmov	d0, r0, r1
 802f1d8:	b003      	add	sp, #12
 802f1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802f1de <__copybits>:
 802f1de:	3901      	subs	r1, #1
 802f1e0:	b570      	push	{r4, r5, r6, lr}
 802f1e2:	1149      	asrs	r1, r1, #5
 802f1e4:	6914      	ldr	r4, [r2, #16]
 802f1e6:	3101      	adds	r1, #1
 802f1e8:	f102 0314 	add.w	r3, r2, #20
 802f1ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802f1f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802f1f4:	1f05      	subs	r5, r0, #4
 802f1f6:	42a3      	cmp	r3, r4
 802f1f8:	d30c      	bcc.n	802f214 <__copybits+0x36>
 802f1fa:	1aa3      	subs	r3, r4, r2
 802f1fc:	3b11      	subs	r3, #17
 802f1fe:	f023 0303 	bic.w	r3, r3, #3
 802f202:	3211      	adds	r2, #17
 802f204:	42a2      	cmp	r2, r4
 802f206:	bf88      	it	hi
 802f208:	2300      	movhi	r3, #0
 802f20a:	4418      	add	r0, r3
 802f20c:	2300      	movs	r3, #0
 802f20e:	4288      	cmp	r0, r1
 802f210:	d305      	bcc.n	802f21e <__copybits+0x40>
 802f212:	bd70      	pop	{r4, r5, r6, pc}
 802f214:	f853 6b04 	ldr.w	r6, [r3], #4
 802f218:	f845 6f04 	str.w	r6, [r5, #4]!
 802f21c:	e7eb      	b.n	802f1f6 <__copybits+0x18>
 802f21e:	f840 3b04 	str.w	r3, [r0], #4
 802f222:	e7f4      	b.n	802f20e <__copybits+0x30>

0802f224 <__any_on>:
 802f224:	f100 0214 	add.w	r2, r0, #20
 802f228:	6900      	ldr	r0, [r0, #16]
 802f22a:	114b      	asrs	r3, r1, #5
 802f22c:	4298      	cmp	r0, r3
 802f22e:	b510      	push	{r4, lr}
 802f230:	db11      	blt.n	802f256 <__any_on+0x32>
 802f232:	dd0a      	ble.n	802f24a <__any_on+0x26>
 802f234:	f011 011f 	ands.w	r1, r1, #31
 802f238:	d007      	beq.n	802f24a <__any_on+0x26>
 802f23a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f23e:	fa24 f001 	lsr.w	r0, r4, r1
 802f242:	fa00 f101 	lsl.w	r1, r0, r1
 802f246:	428c      	cmp	r4, r1
 802f248:	d10b      	bne.n	802f262 <__any_on+0x3e>
 802f24a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f24e:	4293      	cmp	r3, r2
 802f250:	d803      	bhi.n	802f25a <__any_on+0x36>
 802f252:	2000      	movs	r0, #0
 802f254:	bd10      	pop	{r4, pc}
 802f256:	4603      	mov	r3, r0
 802f258:	e7f7      	b.n	802f24a <__any_on+0x26>
 802f25a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f25e:	2900      	cmp	r1, #0
 802f260:	d0f5      	beq.n	802f24e <__any_on+0x2a>
 802f262:	2001      	movs	r0, #1
 802f264:	e7f6      	b.n	802f254 <__any_on+0x30>

0802f266 <sulp>:
 802f266:	b570      	push	{r4, r5, r6, lr}
 802f268:	4604      	mov	r4, r0
 802f26a:	460d      	mov	r5, r1
 802f26c:	ec45 4b10 	vmov	d0, r4, r5
 802f270:	4616      	mov	r6, r2
 802f272:	f7ff feb7 	bl	802efe4 <__ulp>
 802f276:	ec51 0b10 	vmov	r0, r1, d0
 802f27a:	b17e      	cbz	r6, 802f29c <sulp+0x36>
 802f27c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802f280:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802f284:	2b00      	cmp	r3, #0
 802f286:	dd09      	ble.n	802f29c <sulp+0x36>
 802f288:	051b      	lsls	r3, r3, #20
 802f28a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802f28e:	2400      	movs	r4, #0
 802f290:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802f294:	4622      	mov	r2, r4
 802f296:	462b      	mov	r3, r5
 802f298:	f7e1 f9c6 	bl	8010628 <__aeabi_dmul>
 802f29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802f2a0 <_strtod_l>:
 802f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f2a4:	ed2d 8b02 	vpush	{d8}
 802f2a8:	b09b      	sub	sp, #108	; 0x6c
 802f2aa:	4604      	mov	r4, r0
 802f2ac:	9213      	str	r2, [sp, #76]	; 0x4c
 802f2ae:	2200      	movs	r2, #0
 802f2b0:	9216      	str	r2, [sp, #88]	; 0x58
 802f2b2:	460d      	mov	r5, r1
 802f2b4:	f04f 0800 	mov.w	r8, #0
 802f2b8:	f04f 0900 	mov.w	r9, #0
 802f2bc:	460a      	mov	r2, r1
 802f2be:	9215      	str	r2, [sp, #84]	; 0x54
 802f2c0:	7811      	ldrb	r1, [r2, #0]
 802f2c2:	292b      	cmp	r1, #43	; 0x2b
 802f2c4:	d04c      	beq.n	802f360 <_strtod_l+0xc0>
 802f2c6:	d83a      	bhi.n	802f33e <_strtod_l+0x9e>
 802f2c8:	290d      	cmp	r1, #13
 802f2ca:	d834      	bhi.n	802f336 <_strtod_l+0x96>
 802f2cc:	2908      	cmp	r1, #8
 802f2ce:	d834      	bhi.n	802f33a <_strtod_l+0x9a>
 802f2d0:	2900      	cmp	r1, #0
 802f2d2:	d03d      	beq.n	802f350 <_strtod_l+0xb0>
 802f2d4:	2200      	movs	r2, #0
 802f2d6:	920a      	str	r2, [sp, #40]	; 0x28
 802f2d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802f2da:	7832      	ldrb	r2, [r6, #0]
 802f2dc:	2a30      	cmp	r2, #48	; 0x30
 802f2de:	f040 80b4 	bne.w	802f44a <_strtod_l+0x1aa>
 802f2e2:	7872      	ldrb	r2, [r6, #1]
 802f2e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 802f2e8:	2a58      	cmp	r2, #88	; 0x58
 802f2ea:	d170      	bne.n	802f3ce <_strtod_l+0x12e>
 802f2ec:	9302      	str	r3, [sp, #8]
 802f2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f2f0:	9301      	str	r3, [sp, #4]
 802f2f2:	ab16      	add	r3, sp, #88	; 0x58
 802f2f4:	9300      	str	r3, [sp, #0]
 802f2f6:	4a8e      	ldr	r2, [pc, #568]	; (802f530 <_strtod_l+0x290>)
 802f2f8:	ab17      	add	r3, sp, #92	; 0x5c
 802f2fa:	a915      	add	r1, sp, #84	; 0x54
 802f2fc:	4620      	mov	r0, r4
 802f2fe:	f001 fe5f 	bl	8030fc0 <__gethex>
 802f302:	f010 070f 	ands.w	r7, r0, #15
 802f306:	4605      	mov	r5, r0
 802f308:	d005      	beq.n	802f316 <_strtod_l+0x76>
 802f30a:	2f06      	cmp	r7, #6
 802f30c:	d12a      	bne.n	802f364 <_strtod_l+0xc4>
 802f30e:	3601      	adds	r6, #1
 802f310:	2300      	movs	r3, #0
 802f312:	9615      	str	r6, [sp, #84]	; 0x54
 802f314:	930a      	str	r3, [sp, #40]	; 0x28
 802f316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f318:	2b00      	cmp	r3, #0
 802f31a:	f040 857f 	bne.w	802fe1c <_strtod_l+0xb7c>
 802f31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f320:	b1db      	cbz	r3, 802f35a <_strtod_l+0xba>
 802f322:	4642      	mov	r2, r8
 802f324:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802f328:	ec43 2b10 	vmov	d0, r2, r3
 802f32c:	b01b      	add	sp, #108	; 0x6c
 802f32e:	ecbd 8b02 	vpop	{d8}
 802f332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f336:	2920      	cmp	r1, #32
 802f338:	d1cc      	bne.n	802f2d4 <_strtod_l+0x34>
 802f33a:	3201      	adds	r2, #1
 802f33c:	e7bf      	b.n	802f2be <_strtod_l+0x1e>
 802f33e:	292d      	cmp	r1, #45	; 0x2d
 802f340:	d1c8      	bne.n	802f2d4 <_strtod_l+0x34>
 802f342:	2101      	movs	r1, #1
 802f344:	910a      	str	r1, [sp, #40]	; 0x28
 802f346:	1c51      	adds	r1, r2, #1
 802f348:	9115      	str	r1, [sp, #84]	; 0x54
 802f34a:	7852      	ldrb	r2, [r2, #1]
 802f34c:	2a00      	cmp	r2, #0
 802f34e:	d1c3      	bne.n	802f2d8 <_strtod_l+0x38>
 802f350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f352:	9515      	str	r5, [sp, #84]	; 0x54
 802f354:	2b00      	cmp	r3, #0
 802f356:	f040 855f 	bne.w	802fe18 <_strtod_l+0xb78>
 802f35a:	4642      	mov	r2, r8
 802f35c:	464b      	mov	r3, r9
 802f35e:	e7e3      	b.n	802f328 <_strtod_l+0x88>
 802f360:	2100      	movs	r1, #0
 802f362:	e7ef      	b.n	802f344 <_strtod_l+0xa4>
 802f364:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f366:	b13a      	cbz	r2, 802f378 <_strtod_l+0xd8>
 802f368:	2135      	movs	r1, #53	; 0x35
 802f36a:	a818      	add	r0, sp, #96	; 0x60
 802f36c:	f7ff ff37 	bl	802f1de <__copybits>
 802f370:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f372:	4620      	mov	r0, r4
 802f374:	f7ff fb0a 	bl	802e98c <_Bfree>
 802f378:	3f01      	subs	r7, #1
 802f37a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802f37c:	2f04      	cmp	r7, #4
 802f37e:	d806      	bhi.n	802f38e <_strtod_l+0xee>
 802f380:	e8df f007 	tbb	[pc, r7]
 802f384:	201d0314 	.word	0x201d0314
 802f388:	14          	.byte	0x14
 802f389:	00          	.byte	0x00
 802f38a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 802f38e:	05e9      	lsls	r1, r5, #23
 802f390:	bf48      	it	mi
 802f392:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802f396:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f39a:	0d1b      	lsrs	r3, r3, #20
 802f39c:	051b      	lsls	r3, r3, #20
 802f39e:	2b00      	cmp	r3, #0
 802f3a0:	d1b9      	bne.n	802f316 <_strtod_l+0x76>
 802f3a2:	f7fe fb9b 	bl	802dadc <__errno>
 802f3a6:	2322      	movs	r3, #34	; 0x22
 802f3a8:	6003      	str	r3, [r0, #0]
 802f3aa:	e7b4      	b.n	802f316 <_strtod_l+0x76>
 802f3ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 802f3b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802f3b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802f3b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802f3bc:	e7e7      	b.n	802f38e <_strtod_l+0xee>
 802f3be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802f538 <_strtod_l+0x298>
 802f3c2:	e7e4      	b.n	802f38e <_strtod_l+0xee>
 802f3c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802f3c8:	f04f 38ff 	mov.w	r8, #4294967295
 802f3cc:	e7df      	b.n	802f38e <_strtod_l+0xee>
 802f3ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f3d0:	1c5a      	adds	r2, r3, #1
 802f3d2:	9215      	str	r2, [sp, #84]	; 0x54
 802f3d4:	785b      	ldrb	r3, [r3, #1]
 802f3d6:	2b30      	cmp	r3, #48	; 0x30
 802f3d8:	d0f9      	beq.n	802f3ce <_strtod_l+0x12e>
 802f3da:	2b00      	cmp	r3, #0
 802f3dc:	d09b      	beq.n	802f316 <_strtod_l+0x76>
 802f3de:	2301      	movs	r3, #1
 802f3e0:	f04f 0a00 	mov.w	sl, #0
 802f3e4:	9304      	str	r3, [sp, #16]
 802f3e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f3e8:	930b      	str	r3, [sp, #44]	; 0x2c
 802f3ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802f3ee:	46d3      	mov	fp, sl
 802f3f0:	220a      	movs	r2, #10
 802f3f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 802f3f4:	7806      	ldrb	r6, [r0, #0]
 802f3f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802f3fa:	b2d9      	uxtb	r1, r3
 802f3fc:	2909      	cmp	r1, #9
 802f3fe:	d926      	bls.n	802f44e <_strtod_l+0x1ae>
 802f400:	494c      	ldr	r1, [pc, #304]	; (802f534 <_strtod_l+0x294>)
 802f402:	2201      	movs	r2, #1
 802f404:	f7fe fa12 	bl	802d82c <strncmp>
 802f408:	2800      	cmp	r0, #0
 802f40a:	d030      	beq.n	802f46e <_strtod_l+0x1ce>
 802f40c:	2000      	movs	r0, #0
 802f40e:	4632      	mov	r2, r6
 802f410:	9005      	str	r0, [sp, #20]
 802f412:	465e      	mov	r6, fp
 802f414:	4603      	mov	r3, r0
 802f416:	2a65      	cmp	r2, #101	; 0x65
 802f418:	d001      	beq.n	802f41e <_strtod_l+0x17e>
 802f41a:	2a45      	cmp	r2, #69	; 0x45
 802f41c:	d113      	bne.n	802f446 <_strtod_l+0x1a6>
 802f41e:	b91e      	cbnz	r6, 802f428 <_strtod_l+0x188>
 802f420:	9a04      	ldr	r2, [sp, #16]
 802f422:	4302      	orrs	r2, r0
 802f424:	d094      	beq.n	802f350 <_strtod_l+0xb0>
 802f426:	2600      	movs	r6, #0
 802f428:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802f42a:	1c6a      	adds	r2, r5, #1
 802f42c:	9215      	str	r2, [sp, #84]	; 0x54
 802f42e:	786a      	ldrb	r2, [r5, #1]
 802f430:	2a2b      	cmp	r2, #43	; 0x2b
 802f432:	d074      	beq.n	802f51e <_strtod_l+0x27e>
 802f434:	2a2d      	cmp	r2, #45	; 0x2d
 802f436:	d078      	beq.n	802f52a <_strtod_l+0x28a>
 802f438:	f04f 0c00 	mov.w	ip, #0
 802f43c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802f440:	2909      	cmp	r1, #9
 802f442:	d97f      	bls.n	802f544 <_strtod_l+0x2a4>
 802f444:	9515      	str	r5, [sp, #84]	; 0x54
 802f446:	2700      	movs	r7, #0
 802f448:	e09e      	b.n	802f588 <_strtod_l+0x2e8>
 802f44a:	2300      	movs	r3, #0
 802f44c:	e7c8      	b.n	802f3e0 <_strtod_l+0x140>
 802f44e:	f1bb 0f08 	cmp.w	fp, #8
 802f452:	bfd8      	it	le
 802f454:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802f456:	f100 0001 	add.w	r0, r0, #1
 802f45a:	bfda      	itte	le
 802f45c:	fb02 3301 	mlale	r3, r2, r1, r3
 802f460:	9309      	strle	r3, [sp, #36]	; 0x24
 802f462:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 802f466:	f10b 0b01 	add.w	fp, fp, #1
 802f46a:	9015      	str	r0, [sp, #84]	; 0x54
 802f46c:	e7c1      	b.n	802f3f2 <_strtod_l+0x152>
 802f46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f470:	1c5a      	adds	r2, r3, #1
 802f472:	9215      	str	r2, [sp, #84]	; 0x54
 802f474:	785a      	ldrb	r2, [r3, #1]
 802f476:	f1bb 0f00 	cmp.w	fp, #0
 802f47a:	d037      	beq.n	802f4ec <_strtod_l+0x24c>
 802f47c:	9005      	str	r0, [sp, #20]
 802f47e:	465e      	mov	r6, fp
 802f480:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 802f484:	2b09      	cmp	r3, #9
 802f486:	d912      	bls.n	802f4ae <_strtod_l+0x20e>
 802f488:	2301      	movs	r3, #1
 802f48a:	e7c4      	b.n	802f416 <_strtod_l+0x176>
 802f48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f48e:	1c5a      	adds	r2, r3, #1
 802f490:	9215      	str	r2, [sp, #84]	; 0x54
 802f492:	785a      	ldrb	r2, [r3, #1]
 802f494:	3001      	adds	r0, #1
 802f496:	2a30      	cmp	r2, #48	; 0x30
 802f498:	d0f8      	beq.n	802f48c <_strtod_l+0x1ec>
 802f49a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802f49e:	2b08      	cmp	r3, #8
 802f4a0:	f200 84c1 	bhi.w	802fe26 <_strtod_l+0xb86>
 802f4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f4a6:	9005      	str	r0, [sp, #20]
 802f4a8:	2000      	movs	r0, #0
 802f4aa:	930b      	str	r3, [sp, #44]	; 0x2c
 802f4ac:	4606      	mov	r6, r0
 802f4ae:	3a30      	subs	r2, #48	; 0x30
 802f4b0:	f100 0301 	add.w	r3, r0, #1
 802f4b4:	d014      	beq.n	802f4e0 <_strtod_l+0x240>
 802f4b6:	9905      	ldr	r1, [sp, #20]
 802f4b8:	4419      	add	r1, r3
 802f4ba:	9105      	str	r1, [sp, #20]
 802f4bc:	4633      	mov	r3, r6
 802f4be:	eb00 0c06 	add.w	ip, r0, r6
 802f4c2:	210a      	movs	r1, #10
 802f4c4:	4563      	cmp	r3, ip
 802f4c6:	d113      	bne.n	802f4f0 <_strtod_l+0x250>
 802f4c8:	1833      	adds	r3, r6, r0
 802f4ca:	2b08      	cmp	r3, #8
 802f4cc:	f106 0601 	add.w	r6, r6, #1
 802f4d0:	4406      	add	r6, r0
 802f4d2:	dc1a      	bgt.n	802f50a <_strtod_l+0x26a>
 802f4d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f4d6:	230a      	movs	r3, #10
 802f4d8:	fb03 2301 	mla	r3, r3, r1, r2
 802f4dc:	9309      	str	r3, [sp, #36]	; 0x24
 802f4de:	2300      	movs	r3, #0
 802f4e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f4e2:	1c51      	adds	r1, r2, #1
 802f4e4:	9115      	str	r1, [sp, #84]	; 0x54
 802f4e6:	7852      	ldrb	r2, [r2, #1]
 802f4e8:	4618      	mov	r0, r3
 802f4ea:	e7c9      	b.n	802f480 <_strtod_l+0x1e0>
 802f4ec:	4658      	mov	r0, fp
 802f4ee:	e7d2      	b.n	802f496 <_strtod_l+0x1f6>
 802f4f0:	2b08      	cmp	r3, #8
 802f4f2:	f103 0301 	add.w	r3, r3, #1
 802f4f6:	dc03      	bgt.n	802f500 <_strtod_l+0x260>
 802f4f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f4fa:	434f      	muls	r7, r1
 802f4fc:	9709      	str	r7, [sp, #36]	; 0x24
 802f4fe:	e7e1      	b.n	802f4c4 <_strtod_l+0x224>
 802f500:	2b10      	cmp	r3, #16
 802f502:	bfd8      	it	le
 802f504:	fb01 fa0a 	mulle.w	sl, r1, sl
 802f508:	e7dc      	b.n	802f4c4 <_strtod_l+0x224>
 802f50a:	2e10      	cmp	r6, #16
 802f50c:	bfdc      	itt	le
 802f50e:	230a      	movle	r3, #10
 802f510:	fb03 2a0a 	mlale	sl, r3, sl, r2
 802f514:	e7e3      	b.n	802f4de <_strtod_l+0x23e>
 802f516:	2300      	movs	r3, #0
 802f518:	9305      	str	r3, [sp, #20]
 802f51a:	2301      	movs	r3, #1
 802f51c:	e780      	b.n	802f420 <_strtod_l+0x180>
 802f51e:	f04f 0c00 	mov.w	ip, #0
 802f522:	1caa      	adds	r2, r5, #2
 802f524:	9215      	str	r2, [sp, #84]	; 0x54
 802f526:	78aa      	ldrb	r2, [r5, #2]
 802f528:	e788      	b.n	802f43c <_strtod_l+0x19c>
 802f52a:	f04f 0c01 	mov.w	ip, #1
 802f52e:	e7f8      	b.n	802f522 <_strtod_l+0x282>
 802f530:	08034bc8 	.word	0x08034bc8
 802f534:	08034bc4 	.word	0x08034bc4
 802f538:	7ff00000 	.word	0x7ff00000
 802f53c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f53e:	1c51      	adds	r1, r2, #1
 802f540:	9115      	str	r1, [sp, #84]	; 0x54
 802f542:	7852      	ldrb	r2, [r2, #1]
 802f544:	2a30      	cmp	r2, #48	; 0x30
 802f546:	d0f9      	beq.n	802f53c <_strtod_l+0x29c>
 802f548:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 802f54c:	2908      	cmp	r1, #8
 802f54e:	f63f af7a 	bhi.w	802f446 <_strtod_l+0x1a6>
 802f552:	3a30      	subs	r2, #48	; 0x30
 802f554:	9208      	str	r2, [sp, #32]
 802f556:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f558:	920c      	str	r2, [sp, #48]	; 0x30
 802f55a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f55c:	1c57      	adds	r7, r2, #1
 802f55e:	9715      	str	r7, [sp, #84]	; 0x54
 802f560:	7852      	ldrb	r2, [r2, #1]
 802f562:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 802f566:	f1be 0f09 	cmp.w	lr, #9
 802f56a:	d938      	bls.n	802f5de <_strtod_l+0x33e>
 802f56c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802f56e:	1a7f      	subs	r7, r7, r1
 802f570:	2f08      	cmp	r7, #8
 802f572:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802f576:	dc03      	bgt.n	802f580 <_strtod_l+0x2e0>
 802f578:	9908      	ldr	r1, [sp, #32]
 802f57a:	428f      	cmp	r7, r1
 802f57c:	bfa8      	it	ge
 802f57e:	460f      	movge	r7, r1
 802f580:	f1bc 0f00 	cmp.w	ip, #0
 802f584:	d000      	beq.n	802f588 <_strtod_l+0x2e8>
 802f586:	427f      	negs	r7, r7
 802f588:	2e00      	cmp	r6, #0
 802f58a:	d14f      	bne.n	802f62c <_strtod_l+0x38c>
 802f58c:	9904      	ldr	r1, [sp, #16]
 802f58e:	4301      	orrs	r1, r0
 802f590:	f47f aec1 	bne.w	802f316 <_strtod_l+0x76>
 802f594:	2b00      	cmp	r3, #0
 802f596:	f47f aedb 	bne.w	802f350 <_strtod_l+0xb0>
 802f59a:	2a69      	cmp	r2, #105	; 0x69
 802f59c:	d029      	beq.n	802f5f2 <_strtod_l+0x352>
 802f59e:	dc26      	bgt.n	802f5ee <_strtod_l+0x34e>
 802f5a0:	2a49      	cmp	r2, #73	; 0x49
 802f5a2:	d026      	beq.n	802f5f2 <_strtod_l+0x352>
 802f5a4:	2a4e      	cmp	r2, #78	; 0x4e
 802f5a6:	f47f aed3 	bne.w	802f350 <_strtod_l+0xb0>
 802f5aa:	499b      	ldr	r1, [pc, #620]	; (802f818 <_strtod_l+0x578>)
 802f5ac:	a815      	add	r0, sp, #84	; 0x54
 802f5ae:	f001 ff47 	bl	8031440 <__match>
 802f5b2:	2800      	cmp	r0, #0
 802f5b4:	f43f aecc 	beq.w	802f350 <_strtod_l+0xb0>
 802f5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f5ba:	781b      	ldrb	r3, [r3, #0]
 802f5bc:	2b28      	cmp	r3, #40	; 0x28
 802f5be:	d12f      	bne.n	802f620 <_strtod_l+0x380>
 802f5c0:	4996      	ldr	r1, [pc, #600]	; (802f81c <_strtod_l+0x57c>)
 802f5c2:	aa18      	add	r2, sp, #96	; 0x60
 802f5c4:	a815      	add	r0, sp, #84	; 0x54
 802f5c6:	f001 ff4f 	bl	8031468 <__hexnan>
 802f5ca:	2805      	cmp	r0, #5
 802f5cc:	d128      	bne.n	802f620 <_strtod_l+0x380>
 802f5ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802f5d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802f5d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 802f5d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802f5dc:	e69b      	b.n	802f316 <_strtod_l+0x76>
 802f5de:	9f08      	ldr	r7, [sp, #32]
 802f5e0:	210a      	movs	r1, #10
 802f5e2:	fb01 2107 	mla	r1, r1, r7, r2
 802f5e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802f5ea:	9208      	str	r2, [sp, #32]
 802f5ec:	e7b5      	b.n	802f55a <_strtod_l+0x2ba>
 802f5ee:	2a6e      	cmp	r2, #110	; 0x6e
 802f5f0:	e7d9      	b.n	802f5a6 <_strtod_l+0x306>
 802f5f2:	498b      	ldr	r1, [pc, #556]	; (802f820 <_strtod_l+0x580>)
 802f5f4:	a815      	add	r0, sp, #84	; 0x54
 802f5f6:	f001 ff23 	bl	8031440 <__match>
 802f5fa:	2800      	cmp	r0, #0
 802f5fc:	f43f aea8 	beq.w	802f350 <_strtod_l+0xb0>
 802f600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f602:	4988      	ldr	r1, [pc, #544]	; (802f824 <_strtod_l+0x584>)
 802f604:	3b01      	subs	r3, #1
 802f606:	a815      	add	r0, sp, #84	; 0x54
 802f608:	9315      	str	r3, [sp, #84]	; 0x54
 802f60a:	f001 ff19 	bl	8031440 <__match>
 802f60e:	b910      	cbnz	r0, 802f616 <_strtod_l+0x376>
 802f610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f612:	3301      	adds	r3, #1
 802f614:	9315      	str	r3, [sp, #84]	; 0x54
 802f616:	f8df 921c 	ldr.w	r9, [pc, #540]	; 802f834 <_strtod_l+0x594>
 802f61a:	f04f 0800 	mov.w	r8, #0
 802f61e:	e67a      	b.n	802f316 <_strtod_l+0x76>
 802f620:	4881      	ldr	r0, [pc, #516]	; (802f828 <_strtod_l+0x588>)
 802f622:	f001 fc5d 	bl	8030ee0 <nan>
 802f626:	ec59 8b10 	vmov	r8, r9, d0
 802f62a:	e674      	b.n	802f316 <_strtod_l+0x76>
 802f62c:	9b05      	ldr	r3, [sp, #20]
 802f62e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f630:	1afb      	subs	r3, r7, r3
 802f632:	f1bb 0f00 	cmp.w	fp, #0
 802f636:	bf08      	it	eq
 802f638:	46b3      	moveq	fp, r6
 802f63a:	2e10      	cmp	r6, #16
 802f63c:	9308      	str	r3, [sp, #32]
 802f63e:	4635      	mov	r5, r6
 802f640:	bfa8      	it	ge
 802f642:	2510      	movge	r5, #16
 802f644:	f7e0 ff76 	bl	8010534 <__aeabi_ui2d>
 802f648:	2e09      	cmp	r6, #9
 802f64a:	4680      	mov	r8, r0
 802f64c:	4689      	mov	r9, r1
 802f64e:	dd13      	ble.n	802f678 <_strtod_l+0x3d8>
 802f650:	4b76      	ldr	r3, [pc, #472]	; (802f82c <_strtod_l+0x58c>)
 802f652:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f656:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802f65a:	f7e0 ffe5 	bl	8010628 <__aeabi_dmul>
 802f65e:	4680      	mov	r8, r0
 802f660:	4650      	mov	r0, sl
 802f662:	4689      	mov	r9, r1
 802f664:	f7e0 ff66 	bl	8010534 <__aeabi_ui2d>
 802f668:	4602      	mov	r2, r0
 802f66a:	460b      	mov	r3, r1
 802f66c:	4640      	mov	r0, r8
 802f66e:	4649      	mov	r1, r9
 802f670:	f7e0 fe24 	bl	80102bc <__adddf3>
 802f674:	4680      	mov	r8, r0
 802f676:	4689      	mov	r9, r1
 802f678:	2e0f      	cmp	r6, #15
 802f67a:	dc38      	bgt.n	802f6ee <_strtod_l+0x44e>
 802f67c:	9b08      	ldr	r3, [sp, #32]
 802f67e:	2b00      	cmp	r3, #0
 802f680:	f43f ae49 	beq.w	802f316 <_strtod_l+0x76>
 802f684:	dd24      	ble.n	802f6d0 <_strtod_l+0x430>
 802f686:	2b16      	cmp	r3, #22
 802f688:	dc0b      	bgt.n	802f6a2 <_strtod_l+0x402>
 802f68a:	4968      	ldr	r1, [pc, #416]	; (802f82c <_strtod_l+0x58c>)
 802f68c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f690:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f694:	4642      	mov	r2, r8
 802f696:	464b      	mov	r3, r9
 802f698:	f7e0 ffc6 	bl	8010628 <__aeabi_dmul>
 802f69c:	4680      	mov	r8, r0
 802f69e:	4689      	mov	r9, r1
 802f6a0:	e639      	b.n	802f316 <_strtod_l+0x76>
 802f6a2:	9a08      	ldr	r2, [sp, #32]
 802f6a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 802f6a8:	4293      	cmp	r3, r2
 802f6aa:	db20      	blt.n	802f6ee <_strtod_l+0x44e>
 802f6ac:	4c5f      	ldr	r4, [pc, #380]	; (802f82c <_strtod_l+0x58c>)
 802f6ae:	f1c6 060f 	rsb	r6, r6, #15
 802f6b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 802f6b6:	4642      	mov	r2, r8
 802f6b8:	464b      	mov	r3, r9
 802f6ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f6be:	f7e0 ffb3 	bl	8010628 <__aeabi_dmul>
 802f6c2:	9b08      	ldr	r3, [sp, #32]
 802f6c4:	1b9e      	subs	r6, r3, r6
 802f6c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 802f6ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f6ce:	e7e3      	b.n	802f698 <_strtod_l+0x3f8>
 802f6d0:	9b08      	ldr	r3, [sp, #32]
 802f6d2:	3316      	adds	r3, #22
 802f6d4:	db0b      	blt.n	802f6ee <_strtod_l+0x44e>
 802f6d6:	9b05      	ldr	r3, [sp, #20]
 802f6d8:	1bdf      	subs	r7, r3, r7
 802f6da:	4b54      	ldr	r3, [pc, #336]	; (802f82c <_strtod_l+0x58c>)
 802f6dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802f6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f6e4:	4640      	mov	r0, r8
 802f6e6:	4649      	mov	r1, r9
 802f6e8:	f7e1 f8c8 	bl	801087c <__aeabi_ddiv>
 802f6ec:	e7d6      	b.n	802f69c <_strtod_l+0x3fc>
 802f6ee:	9b08      	ldr	r3, [sp, #32]
 802f6f0:	1b75      	subs	r5, r6, r5
 802f6f2:	441d      	add	r5, r3
 802f6f4:	2d00      	cmp	r5, #0
 802f6f6:	dd70      	ble.n	802f7da <_strtod_l+0x53a>
 802f6f8:	f015 030f 	ands.w	r3, r5, #15
 802f6fc:	d00a      	beq.n	802f714 <_strtod_l+0x474>
 802f6fe:	494b      	ldr	r1, [pc, #300]	; (802f82c <_strtod_l+0x58c>)
 802f700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f704:	4642      	mov	r2, r8
 802f706:	464b      	mov	r3, r9
 802f708:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f70c:	f7e0 ff8c 	bl	8010628 <__aeabi_dmul>
 802f710:	4680      	mov	r8, r0
 802f712:	4689      	mov	r9, r1
 802f714:	f035 050f 	bics.w	r5, r5, #15
 802f718:	d04d      	beq.n	802f7b6 <_strtod_l+0x516>
 802f71a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 802f71e:	dd22      	ble.n	802f766 <_strtod_l+0x4c6>
 802f720:	2500      	movs	r5, #0
 802f722:	46ab      	mov	fp, r5
 802f724:	9509      	str	r5, [sp, #36]	; 0x24
 802f726:	9505      	str	r5, [sp, #20]
 802f728:	2322      	movs	r3, #34	; 0x22
 802f72a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802f834 <_strtod_l+0x594>
 802f72e:	6023      	str	r3, [r4, #0]
 802f730:	f04f 0800 	mov.w	r8, #0
 802f734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f736:	2b00      	cmp	r3, #0
 802f738:	f43f aded 	beq.w	802f316 <_strtod_l+0x76>
 802f73c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f73e:	4620      	mov	r0, r4
 802f740:	f7ff f924 	bl	802e98c <_Bfree>
 802f744:	9905      	ldr	r1, [sp, #20]
 802f746:	4620      	mov	r0, r4
 802f748:	f7ff f920 	bl	802e98c <_Bfree>
 802f74c:	4659      	mov	r1, fp
 802f74e:	4620      	mov	r0, r4
 802f750:	f7ff f91c 	bl	802e98c <_Bfree>
 802f754:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f756:	4620      	mov	r0, r4
 802f758:	f7ff f918 	bl	802e98c <_Bfree>
 802f75c:	4629      	mov	r1, r5
 802f75e:	4620      	mov	r0, r4
 802f760:	f7ff f914 	bl	802e98c <_Bfree>
 802f764:	e5d7      	b.n	802f316 <_strtod_l+0x76>
 802f766:	4b32      	ldr	r3, [pc, #200]	; (802f830 <_strtod_l+0x590>)
 802f768:	9304      	str	r3, [sp, #16]
 802f76a:	2300      	movs	r3, #0
 802f76c:	112d      	asrs	r5, r5, #4
 802f76e:	4640      	mov	r0, r8
 802f770:	4649      	mov	r1, r9
 802f772:	469a      	mov	sl, r3
 802f774:	2d01      	cmp	r5, #1
 802f776:	dc21      	bgt.n	802f7bc <_strtod_l+0x51c>
 802f778:	b10b      	cbz	r3, 802f77e <_strtod_l+0x4de>
 802f77a:	4680      	mov	r8, r0
 802f77c:	4689      	mov	r9, r1
 802f77e:	492c      	ldr	r1, [pc, #176]	; (802f830 <_strtod_l+0x590>)
 802f780:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802f784:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802f788:	4642      	mov	r2, r8
 802f78a:	464b      	mov	r3, r9
 802f78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f790:	f7e0 ff4a 	bl	8010628 <__aeabi_dmul>
 802f794:	4b27      	ldr	r3, [pc, #156]	; (802f834 <_strtod_l+0x594>)
 802f796:	460a      	mov	r2, r1
 802f798:	400b      	ands	r3, r1
 802f79a:	4927      	ldr	r1, [pc, #156]	; (802f838 <_strtod_l+0x598>)
 802f79c:	428b      	cmp	r3, r1
 802f79e:	4680      	mov	r8, r0
 802f7a0:	d8be      	bhi.n	802f720 <_strtod_l+0x480>
 802f7a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802f7a6:	428b      	cmp	r3, r1
 802f7a8:	bf86      	itte	hi
 802f7aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 802f83c <_strtod_l+0x59c>
 802f7ae:	f04f 38ff 	movhi.w	r8, #4294967295
 802f7b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 802f7b6:	2300      	movs	r3, #0
 802f7b8:	9304      	str	r3, [sp, #16]
 802f7ba:	e07b      	b.n	802f8b4 <_strtod_l+0x614>
 802f7bc:	07ea      	lsls	r2, r5, #31
 802f7be:	d505      	bpl.n	802f7cc <_strtod_l+0x52c>
 802f7c0:	9b04      	ldr	r3, [sp, #16]
 802f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7c6:	f7e0 ff2f 	bl	8010628 <__aeabi_dmul>
 802f7ca:	2301      	movs	r3, #1
 802f7cc:	9a04      	ldr	r2, [sp, #16]
 802f7ce:	3208      	adds	r2, #8
 802f7d0:	f10a 0a01 	add.w	sl, sl, #1
 802f7d4:	106d      	asrs	r5, r5, #1
 802f7d6:	9204      	str	r2, [sp, #16]
 802f7d8:	e7cc      	b.n	802f774 <_strtod_l+0x4d4>
 802f7da:	d0ec      	beq.n	802f7b6 <_strtod_l+0x516>
 802f7dc:	426d      	negs	r5, r5
 802f7de:	f015 020f 	ands.w	r2, r5, #15
 802f7e2:	d00a      	beq.n	802f7fa <_strtod_l+0x55a>
 802f7e4:	4b11      	ldr	r3, [pc, #68]	; (802f82c <_strtod_l+0x58c>)
 802f7e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802f7ea:	4640      	mov	r0, r8
 802f7ec:	4649      	mov	r1, r9
 802f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7f2:	f7e1 f843 	bl	801087c <__aeabi_ddiv>
 802f7f6:	4680      	mov	r8, r0
 802f7f8:	4689      	mov	r9, r1
 802f7fa:	112d      	asrs	r5, r5, #4
 802f7fc:	d0db      	beq.n	802f7b6 <_strtod_l+0x516>
 802f7fe:	2d1f      	cmp	r5, #31
 802f800:	dd1e      	ble.n	802f840 <_strtod_l+0x5a0>
 802f802:	2500      	movs	r5, #0
 802f804:	46ab      	mov	fp, r5
 802f806:	9509      	str	r5, [sp, #36]	; 0x24
 802f808:	9505      	str	r5, [sp, #20]
 802f80a:	2322      	movs	r3, #34	; 0x22
 802f80c:	f04f 0800 	mov.w	r8, #0
 802f810:	f04f 0900 	mov.w	r9, #0
 802f814:	6023      	str	r3, [r4, #0]
 802f816:	e78d      	b.n	802f734 <_strtod_l+0x494>
 802f818:	0803495d 	.word	0x0803495d
 802f81c:	08034bdc 	.word	0x08034bdc
 802f820:	08034955 	.word	0x08034955
 802f824:	080349fb 	.word	0x080349fb
 802f828:	0803494f 	.word	0x0803494f
 802f82c:	08034af0 	.word	0x08034af0
 802f830:	08034ac8 	.word	0x08034ac8
 802f834:	7ff00000 	.word	0x7ff00000
 802f838:	7ca00000 	.word	0x7ca00000
 802f83c:	7fefffff 	.word	0x7fefffff
 802f840:	f015 0310 	ands.w	r3, r5, #16
 802f844:	bf18      	it	ne
 802f846:	236a      	movne	r3, #106	; 0x6a
 802f848:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802fbec <_strtod_l+0x94c>
 802f84c:	9304      	str	r3, [sp, #16]
 802f84e:	4640      	mov	r0, r8
 802f850:	4649      	mov	r1, r9
 802f852:	2300      	movs	r3, #0
 802f854:	07ea      	lsls	r2, r5, #31
 802f856:	d504      	bpl.n	802f862 <_strtod_l+0x5c2>
 802f858:	e9da 2300 	ldrd	r2, r3, [sl]
 802f85c:	f7e0 fee4 	bl	8010628 <__aeabi_dmul>
 802f860:	2301      	movs	r3, #1
 802f862:	106d      	asrs	r5, r5, #1
 802f864:	f10a 0a08 	add.w	sl, sl, #8
 802f868:	d1f4      	bne.n	802f854 <_strtod_l+0x5b4>
 802f86a:	b10b      	cbz	r3, 802f870 <_strtod_l+0x5d0>
 802f86c:	4680      	mov	r8, r0
 802f86e:	4689      	mov	r9, r1
 802f870:	9b04      	ldr	r3, [sp, #16]
 802f872:	b1bb      	cbz	r3, 802f8a4 <_strtod_l+0x604>
 802f874:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802f878:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802f87c:	2b00      	cmp	r3, #0
 802f87e:	4649      	mov	r1, r9
 802f880:	dd10      	ble.n	802f8a4 <_strtod_l+0x604>
 802f882:	2b1f      	cmp	r3, #31
 802f884:	f340 811e 	ble.w	802fac4 <_strtod_l+0x824>
 802f888:	2b34      	cmp	r3, #52	; 0x34
 802f88a:	bfde      	ittt	le
 802f88c:	f04f 33ff 	movle.w	r3, #4294967295
 802f890:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802f894:	4093      	lslle	r3, r2
 802f896:	f04f 0800 	mov.w	r8, #0
 802f89a:	bfcc      	ite	gt
 802f89c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802f8a0:	ea03 0901 	andle.w	r9, r3, r1
 802f8a4:	2200      	movs	r2, #0
 802f8a6:	2300      	movs	r3, #0
 802f8a8:	4640      	mov	r0, r8
 802f8aa:	4649      	mov	r1, r9
 802f8ac:	f7e1 f924 	bl	8010af8 <__aeabi_dcmpeq>
 802f8b0:	2800      	cmp	r0, #0
 802f8b2:	d1a6      	bne.n	802f802 <_strtod_l+0x562>
 802f8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f8b6:	9300      	str	r3, [sp, #0]
 802f8b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802f8ba:	4633      	mov	r3, r6
 802f8bc:	465a      	mov	r2, fp
 802f8be:	4620      	mov	r0, r4
 802f8c0:	f7ff f8cc 	bl	802ea5c <__s2b>
 802f8c4:	9009      	str	r0, [sp, #36]	; 0x24
 802f8c6:	2800      	cmp	r0, #0
 802f8c8:	f43f af2a 	beq.w	802f720 <_strtod_l+0x480>
 802f8cc:	9a08      	ldr	r2, [sp, #32]
 802f8ce:	9b05      	ldr	r3, [sp, #20]
 802f8d0:	2a00      	cmp	r2, #0
 802f8d2:	eba3 0307 	sub.w	r3, r3, r7
 802f8d6:	bfa8      	it	ge
 802f8d8:	2300      	movge	r3, #0
 802f8da:	930c      	str	r3, [sp, #48]	; 0x30
 802f8dc:	2500      	movs	r5, #0
 802f8de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802f8e2:	9312      	str	r3, [sp, #72]	; 0x48
 802f8e4:	46ab      	mov	fp, r5
 802f8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f8e8:	4620      	mov	r0, r4
 802f8ea:	6859      	ldr	r1, [r3, #4]
 802f8ec:	f7ff f80e 	bl	802e90c <_Balloc>
 802f8f0:	9005      	str	r0, [sp, #20]
 802f8f2:	2800      	cmp	r0, #0
 802f8f4:	f43f af18 	beq.w	802f728 <_strtod_l+0x488>
 802f8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f8fa:	691a      	ldr	r2, [r3, #16]
 802f8fc:	3202      	adds	r2, #2
 802f8fe:	f103 010c 	add.w	r1, r3, #12
 802f902:	0092      	lsls	r2, r2, #2
 802f904:	300c      	adds	r0, #12
 802f906:	f7fe f91e 	bl	802db46 <memcpy>
 802f90a:	ec49 8b10 	vmov	d0, r8, r9
 802f90e:	aa18      	add	r2, sp, #96	; 0x60
 802f910:	a917      	add	r1, sp, #92	; 0x5c
 802f912:	4620      	mov	r0, r4
 802f914:	f7ff fbd6 	bl	802f0c4 <__d2b>
 802f918:	ec49 8b18 	vmov	d8, r8, r9
 802f91c:	9016      	str	r0, [sp, #88]	; 0x58
 802f91e:	2800      	cmp	r0, #0
 802f920:	f43f af02 	beq.w	802f728 <_strtod_l+0x488>
 802f924:	2101      	movs	r1, #1
 802f926:	4620      	mov	r0, r4
 802f928:	f7ff f930 	bl	802eb8c <__i2b>
 802f92c:	4683      	mov	fp, r0
 802f92e:	2800      	cmp	r0, #0
 802f930:	f43f aefa 	beq.w	802f728 <_strtod_l+0x488>
 802f934:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802f936:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802f938:	2e00      	cmp	r6, #0
 802f93a:	bfab      	itete	ge
 802f93c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 802f93e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 802f940:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802f942:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 802f946:	bfac      	ite	ge
 802f948:	eb06 0a03 	addge.w	sl, r6, r3
 802f94c:	1b9f      	sublt	r7, r3, r6
 802f94e:	9b04      	ldr	r3, [sp, #16]
 802f950:	1af6      	subs	r6, r6, r3
 802f952:	4416      	add	r6, r2
 802f954:	4ba0      	ldr	r3, [pc, #640]	; (802fbd8 <_strtod_l+0x938>)
 802f956:	3e01      	subs	r6, #1
 802f958:	429e      	cmp	r6, r3
 802f95a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802f95e:	f280 80c4 	bge.w	802faea <_strtod_l+0x84a>
 802f962:	1b9b      	subs	r3, r3, r6
 802f964:	2b1f      	cmp	r3, #31
 802f966:	eba2 0203 	sub.w	r2, r2, r3
 802f96a:	f04f 0101 	mov.w	r1, #1
 802f96e:	f300 80b0 	bgt.w	802fad2 <_strtod_l+0x832>
 802f972:	fa01 f303 	lsl.w	r3, r1, r3
 802f976:	930e      	str	r3, [sp, #56]	; 0x38
 802f978:	2300      	movs	r3, #0
 802f97a:	930d      	str	r3, [sp, #52]	; 0x34
 802f97c:	eb0a 0602 	add.w	r6, sl, r2
 802f980:	9b04      	ldr	r3, [sp, #16]
 802f982:	45b2      	cmp	sl, r6
 802f984:	4417      	add	r7, r2
 802f986:	441f      	add	r7, r3
 802f988:	4653      	mov	r3, sl
 802f98a:	bfa8      	it	ge
 802f98c:	4633      	movge	r3, r6
 802f98e:	42bb      	cmp	r3, r7
 802f990:	bfa8      	it	ge
 802f992:	463b      	movge	r3, r7
 802f994:	2b00      	cmp	r3, #0
 802f996:	bfc2      	ittt	gt
 802f998:	1af6      	subgt	r6, r6, r3
 802f99a:	1aff      	subgt	r7, r7, r3
 802f99c:	ebaa 0a03 	subgt.w	sl, sl, r3
 802f9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802f9a2:	2b00      	cmp	r3, #0
 802f9a4:	dd17      	ble.n	802f9d6 <_strtod_l+0x736>
 802f9a6:	4659      	mov	r1, fp
 802f9a8:	461a      	mov	r2, r3
 802f9aa:	4620      	mov	r0, r4
 802f9ac:	f7ff f9ae 	bl	802ed0c <__pow5mult>
 802f9b0:	4683      	mov	fp, r0
 802f9b2:	2800      	cmp	r0, #0
 802f9b4:	f43f aeb8 	beq.w	802f728 <_strtod_l+0x488>
 802f9b8:	4601      	mov	r1, r0
 802f9ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f9bc:	4620      	mov	r0, r4
 802f9be:	f7ff f8fb 	bl	802ebb8 <__multiply>
 802f9c2:	900b      	str	r0, [sp, #44]	; 0x2c
 802f9c4:	2800      	cmp	r0, #0
 802f9c6:	f43f aeaf 	beq.w	802f728 <_strtod_l+0x488>
 802f9ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f9cc:	4620      	mov	r0, r4
 802f9ce:	f7fe ffdd 	bl	802e98c <_Bfree>
 802f9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f9d4:	9316      	str	r3, [sp, #88]	; 0x58
 802f9d6:	2e00      	cmp	r6, #0
 802f9d8:	f300 808c 	bgt.w	802faf4 <_strtod_l+0x854>
 802f9dc:	9b08      	ldr	r3, [sp, #32]
 802f9de:	2b00      	cmp	r3, #0
 802f9e0:	dd08      	ble.n	802f9f4 <_strtod_l+0x754>
 802f9e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802f9e4:	9905      	ldr	r1, [sp, #20]
 802f9e6:	4620      	mov	r0, r4
 802f9e8:	f7ff f990 	bl	802ed0c <__pow5mult>
 802f9ec:	9005      	str	r0, [sp, #20]
 802f9ee:	2800      	cmp	r0, #0
 802f9f0:	f43f ae9a 	beq.w	802f728 <_strtod_l+0x488>
 802f9f4:	2f00      	cmp	r7, #0
 802f9f6:	dd08      	ble.n	802fa0a <_strtod_l+0x76a>
 802f9f8:	9905      	ldr	r1, [sp, #20]
 802f9fa:	463a      	mov	r2, r7
 802f9fc:	4620      	mov	r0, r4
 802f9fe:	f7ff f9df 	bl	802edc0 <__lshift>
 802fa02:	9005      	str	r0, [sp, #20]
 802fa04:	2800      	cmp	r0, #0
 802fa06:	f43f ae8f 	beq.w	802f728 <_strtod_l+0x488>
 802fa0a:	f1ba 0f00 	cmp.w	sl, #0
 802fa0e:	dd08      	ble.n	802fa22 <_strtod_l+0x782>
 802fa10:	4659      	mov	r1, fp
 802fa12:	4652      	mov	r2, sl
 802fa14:	4620      	mov	r0, r4
 802fa16:	f7ff f9d3 	bl	802edc0 <__lshift>
 802fa1a:	4683      	mov	fp, r0
 802fa1c:	2800      	cmp	r0, #0
 802fa1e:	f43f ae83 	beq.w	802f728 <_strtod_l+0x488>
 802fa22:	9a05      	ldr	r2, [sp, #20]
 802fa24:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fa26:	4620      	mov	r0, r4
 802fa28:	f7ff fa52 	bl	802eed0 <__mdiff>
 802fa2c:	4605      	mov	r5, r0
 802fa2e:	2800      	cmp	r0, #0
 802fa30:	f43f ae7a 	beq.w	802f728 <_strtod_l+0x488>
 802fa34:	68c3      	ldr	r3, [r0, #12]
 802fa36:	930b      	str	r3, [sp, #44]	; 0x2c
 802fa38:	2300      	movs	r3, #0
 802fa3a:	60c3      	str	r3, [r0, #12]
 802fa3c:	4659      	mov	r1, fp
 802fa3e:	f7ff fa2b 	bl	802ee98 <__mcmp>
 802fa42:	2800      	cmp	r0, #0
 802fa44:	da60      	bge.n	802fb08 <_strtod_l+0x868>
 802fa46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fa48:	ea53 0308 	orrs.w	r3, r3, r8
 802fa4c:	f040 8084 	bne.w	802fb58 <_strtod_l+0x8b8>
 802fa50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fa54:	2b00      	cmp	r3, #0
 802fa56:	d17f      	bne.n	802fb58 <_strtod_l+0x8b8>
 802fa58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802fa5c:	0d1b      	lsrs	r3, r3, #20
 802fa5e:	051b      	lsls	r3, r3, #20
 802fa60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802fa64:	d978      	bls.n	802fb58 <_strtod_l+0x8b8>
 802fa66:	696b      	ldr	r3, [r5, #20]
 802fa68:	b913      	cbnz	r3, 802fa70 <_strtod_l+0x7d0>
 802fa6a:	692b      	ldr	r3, [r5, #16]
 802fa6c:	2b01      	cmp	r3, #1
 802fa6e:	dd73      	ble.n	802fb58 <_strtod_l+0x8b8>
 802fa70:	4629      	mov	r1, r5
 802fa72:	2201      	movs	r2, #1
 802fa74:	4620      	mov	r0, r4
 802fa76:	f7ff f9a3 	bl	802edc0 <__lshift>
 802fa7a:	4659      	mov	r1, fp
 802fa7c:	4605      	mov	r5, r0
 802fa7e:	f7ff fa0b 	bl	802ee98 <__mcmp>
 802fa82:	2800      	cmp	r0, #0
 802fa84:	dd68      	ble.n	802fb58 <_strtod_l+0x8b8>
 802fa86:	9904      	ldr	r1, [sp, #16]
 802fa88:	4a54      	ldr	r2, [pc, #336]	; (802fbdc <_strtod_l+0x93c>)
 802fa8a:	464b      	mov	r3, r9
 802fa8c:	2900      	cmp	r1, #0
 802fa8e:	f000 8084 	beq.w	802fb9a <_strtod_l+0x8fa>
 802fa92:	ea02 0109 	and.w	r1, r2, r9
 802fa96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802fa9a:	dc7e      	bgt.n	802fb9a <_strtod_l+0x8fa>
 802fa9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802faa0:	f77f aeb3 	ble.w	802f80a <_strtod_l+0x56a>
 802faa4:	4b4e      	ldr	r3, [pc, #312]	; (802fbe0 <_strtod_l+0x940>)
 802faa6:	4640      	mov	r0, r8
 802faa8:	4649      	mov	r1, r9
 802faaa:	2200      	movs	r2, #0
 802faac:	f7e0 fdbc 	bl	8010628 <__aeabi_dmul>
 802fab0:	4b4a      	ldr	r3, [pc, #296]	; (802fbdc <_strtod_l+0x93c>)
 802fab2:	400b      	ands	r3, r1
 802fab4:	4680      	mov	r8, r0
 802fab6:	4689      	mov	r9, r1
 802fab8:	2b00      	cmp	r3, #0
 802faba:	f47f ae3f 	bne.w	802f73c <_strtod_l+0x49c>
 802fabe:	2322      	movs	r3, #34	; 0x22
 802fac0:	6023      	str	r3, [r4, #0]
 802fac2:	e63b      	b.n	802f73c <_strtod_l+0x49c>
 802fac4:	f04f 32ff 	mov.w	r2, #4294967295
 802fac8:	fa02 f303 	lsl.w	r3, r2, r3
 802facc:	ea03 0808 	and.w	r8, r3, r8
 802fad0:	e6e8      	b.n	802f8a4 <_strtod_l+0x604>
 802fad2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802fad6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802fada:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802fade:	36e2      	adds	r6, #226	; 0xe2
 802fae0:	fa01 f306 	lsl.w	r3, r1, r6
 802fae4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802fae8:	e748      	b.n	802f97c <_strtod_l+0x6dc>
 802faea:	2100      	movs	r1, #0
 802faec:	2301      	movs	r3, #1
 802faee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 802faf2:	e743      	b.n	802f97c <_strtod_l+0x6dc>
 802faf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 802faf6:	4632      	mov	r2, r6
 802faf8:	4620      	mov	r0, r4
 802fafa:	f7ff f961 	bl	802edc0 <__lshift>
 802fafe:	9016      	str	r0, [sp, #88]	; 0x58
 802fb00:	2800      	cmp	r0, #0
 802fb02:	f47f af6b 	bne.w	802f9dc <_strtod_l+0x73c>
 802fb06:	e60f      	b.n	802f728 <_strtod_l+0x488>
 802fb08:	46ca      	mov	sl, r9
 802fb0a:	d171      	bne.n	802fbf0 <_strtod_l+0x950>
 802fb0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fb0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fb12:	b352      	cbz	r2, 802fb6a <_strtod_l+0x8ca>
 802fb14:	4a33      	ldr	r2, [pc, #204]	; (802fbe4 <_strtod_l+0x944>)
 802fb16:	4293      	cmp	r3, r2
 802fb18:	d12a      	bne.n	802fb70 <_strtod_l+0x8d0>
 802fb1a:	9b04      	ldr	r3, [sp, #16]
 802fb1c:	4641      	mov	r1, r8
 802fb1e:	b1fb      	cbz	r3, 802fb60 <_strtod_l+0x8c0>
 802fb20:	4b2e      	ldr	r3, [pc, #184]	; (802fbdc <_strtod_l+0x93c>)
 802fb22:	ea09 0303 	and.w	r3, r9, r3
 802fb26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fb2a:	f04f 32ff 	mov.w	r2, #4294967295
 802fb2e:	d81a      	bhi.n	802fb66 <_strtod_l+0x8c6>
 802fb30:	0d1b      	lsrs	r3, r3, #20
 802fb32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802fb36:	fa02 f303 	lsl.w	r3, r2, r3
 802fb3a:	4299      	cmp	r1, r3
 802fb3c:	d118      	bne.n	802fb70 <_strtod_l+0x8d0>
 802fb3e:	4b2a      	ldr	r3, [pc, #168]	; (802fbe8 <_strtod_l+0x948>)
 802fb40:	459a      	cmp	sl, r3
 802fb42:	d102      	bne.n	802fb4a <_strtod_l+0x8aa>
 802fb44:	3101      	adds	r1, #1
 802fb46:	f43f adef 	beq.w	802f728 <_strtod_l+0x488>
 802fb4a:	4b24      	ldr	r3, [pc, #144]	; (802fbdc <_strtod_l+0x93c>)
 802fb4c:	ea0a 0303 	and.w	r3, sl, r3
 802fb50:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802fb54:	f04f 0800 	mov.w	r8, #0
 802fb58:	9b04      	ldr	r3, [sp, #16]
 802fb5a:	2b00      	cmp	r3, #0
 802fb5c:	d1a2      	bne.n	802faa4 <_strtod_l+0x804>
 802fb5e:	e5ed      	b.n	802f73c <_strtod_l+0x49c>
 802fb60:	f04f 33ff 	mov.w	r3, #4294967295
 802fb64:	e7e9      	b.n	802fb3a <_strtod_l+0x89a>
 802fb66:	4613      	mov	r3, r2
 802fb68:	e7e7      	b.n	802fb3a <_strtod_l+0x89a>
 802fb6a:	ea53 0308 	orrs.w	r3, r3, r8
 802fb6e:	d08a      	beq.n	802fa86 <_strtod_l+0x7e6>
 802fb70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fb72:	b1e3      	cbz	r3, 802fbae <_strtod_l+0x90e>
 802fb74:	ea13 0f0a 	tst.w	r3, sl
 802fb78:	d0ee      	beq.n	802fb58 <_strtod_l+0x8b8>
 802fb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fb7c:	9a04      	ldr	r2, [sp, #16]
 802fb7e:	4640      	mov	r0, r8
 802fb80:	4649      	mov	r1, r9
 802fb82:	b1c3      	cbz	r3, 802fbb6 <_strtod_l+0x916>
 802fb84:	f7ff fb6f 	bl	802f266 <sulp>
 802fb88:	4602      	mov	r2, r0
 802fb8a:	460b      	mov	r3, r1
 802fb8c:	ec51 0b18 	vmov	r0, r1, d8
 802fb90:	f7e0 fb94 	bl	80102bc <__adddf3>
 802fb94:	4680      	mov	r8, r0
 802fb96:	4689      	mov	r9, r1
 802fb98:	e7de      	b.n	802fb58 <_strtod_l+0x8b8>
 802fb9a:	4013      	ands	r3, r2
 802fb9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802fba0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802fba4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802fba8:	f04f 38ff 	mov.w	r8, #4294967295
 802fbac:	e7d4      	b.n	802fb58 <_strtod_l+0x8b8>
 802fbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802fbb0:	ea13 0f08 	tst.w	r3, r8
 802fbb4:	e7e0      	b.n	802fb78 <_strtod_l+0x8d8>
 802fbb6:	f7ff fb56 	bl	802f266 <sulp>
 802fbba:	4602      	mov	r2, r0
 802fbbc:	460b      	mov	r3, r1
 802fbbe:	ec51 0b18 	vmov	r0, r1, d8
 802fbc2:	f7e0 fb79 	bl	80102b8 <__aeabi_dsub>
 802fbc6:	2200      	movs	r2, #0
 802fbc8:	2300      	movs	r3, #0
 802fbca:	4680      	mov	r8, r0
 802fbcc:	4689      	mov	r9, r1
 802fbce:	f7e0 ff93 	bl	8010af8 <__aeabi_dcmpeq>
 802fbd2:	2800      	cmp	r0, #0
 802fbd4:	d0c0      	beq.n	802fb58 <_strtod_l+0x8b8>
 802fbd6:	e618      	b.n	802f80a <_strtod_l+0x56a>
 802fbd8:	fffffc02 	.word	0xfffffc02
 802fbdc:	7ff00000 	.word	0x7ff00000
 802fbe0:	39500000 	.word	0x39500000
 802fbe4:	000fffff 	.word	0x000fffff
 802fbe8:	7fefffff 	.word	0x7fefffff
 802fbec:	08034bf0 	.word	0x08034bf0
 802fbf0:	4659      	mov	r1, fp
 802fbf2:	4628      	mov	r0, r5
 802fbf4:	f7ff fac0 	bl	802f178 <__ratio>
 802fbf8:	ec57 6b10 	vmov	r6, r7, d0
 802fbfc:	ee10 0a10 	vmov	r0, s0
 802fc00:	2200      	movs	r2, #0
 802fc02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802fc06:	4639      	mov	r1, r7
 802fc08:	f7e0 ff8a 	bl	8010b20 <__aeabi_dcmple>
 802fc0c:	2800      	cmp	r0, #0
 802fc0e:	d071      	beq.n	802fcf4 <_strtod_l+0xa54>
 802fc10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fc12:	2b00      	cmp	r3, #0
 802fc14:	d17c      	bne.n	802fd10 <_strtod_l+0xa70>
 802fc16:	f1b8 0f00 	cmp.w	r8, #0
 802fc1a:	d15a      	bne.n	802fcd2 <_strtod_l+0xa32>
 802fc1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fc20:	2b00      	cmp	r3, #0
 802fc22:	d15d      	bne.n	802fce0 <_strtod_l+0xa40>
 802fc24:	4b90      	ldr	r3, [pc, #576]	; (802fe68 <_strtod_l+0xbc8>)
 802fc26:	2200      	movs	r2, #0
 802fc28:	4630      	mov	r0, r6
 802fc2a:	4639      	mov	r1, r7
 802fc2c:	f7e0 ff6e 	bl	8010b0c <__aeabi_dcmplt>
 802fc30:	2800      	cmp	r0, #0
 802fc32:	d15c      	bne.n	802fcee <_strtod_l+0xa4e>
 802fc34:	4630      	mov	r0, r6
 802fc36:	4639      	mov	r1, r7
 802fc38:	4b8c      	ldr	r3, [pc, #560]	; (802fe6c <_strtod_l+0xbcc>)
 802fc3a:	2200      	movs	r2, #0
 802fc3c:	f7e0 fcf4 	bl	8010628 <__aeabi_dmul>
 802fc40:	4606      	mov	r6, r0
 802fc42:	460f      	mov	r7, r1
 802fc44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802fc48:	9606      	str	r6, [sp, #24]
 802fc4a:	9307      	str	r3, [sp, #28]
 802fc4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fc50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802fc54:	4b86      	ldr	r3, [pc, #536]	; (802fe70 <_strtod_l+0xbd0>)
 802fc56:	ea0a 0303 	and.w	r3, sl, r3
 802fc5a:	930d      	str	r3, [sp, #52]	; 0x34
 802fc5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fc5e:	4b85      	ldr	r3, [pc, #532]	; (802fe74 <_strtod_l+0xbd4>)
 802fc60:	429a      	cmp	r2, r3
 802fc62:	f040 8090 	bne.w	802fd86 <_strtod_l+0xae6>
 802fc66:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 802fc6a:	ec49 8b10 	vmov	d0, r8, r9
 802fc6e:	f7ff f9b9 	bl	802efe4 <__ulp>
 802fc72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fc76:	ec51 0b10 	vmov	r0, r1, d0
 802fc7a:	f7e0 fcd5 	bl	8010628 <__aeabi_dmul>
 802fc7e:	4642      	mov	r2, r8
 802fc80:	464b      	mov	r3, r9
 802fc82:	f7e0 fb1b 	bl	80102bc <__adddf3>
 802fc86:	460b      	mov	r3, r1
 802fc88:	4979      	ldr	r1, [pc, #484]	; (802fe70 <_strtod_l+0xbd0>)
 802fc8a:	4a7b      	ldr	r2, [pc, #492]	; (802fe78 <_strtod_l+0xbd8>)
 802fc8c:	4019      	ands	r1, r3
 802fc8e:	4291      	cmp	r1, r2
 802fc90:	4680      	mov	r8, r0
 802fc92:	d944      	bls.n	802fd1e <_strtod_l+0xa7e>
 802fc94:	ee18 2a90 	vmov	r2, s17
 802fc98:	4b78      	ldr	r3, [pc, #480]	; (802fe7c <_strtod_l+0xbdc>)
 802fc9a:	429a      	cmp	r2, r3
 802fc9c:	d104      	bne.n	802fca8 <_strtod_l+0xa08>
 802fc9e:	ee18 3a10 	vmov	r3, s16
 802fca2:	3301      	adds	r3, #1
 802fca4:	f43f ad40 	beq.w	802f728 <_strtod_l+0x488>
 802fca8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 802fe7c <_strtod_l+0xbdc>
 802fcac:	f04f 38ff 	mov.w	r8, #4294967295
 802fcb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fcb2:	4620      	mov	r0, r4
 802fcb4:	f7fe fe6a 	bl	802e98c <_Bfree>
 802fcb8:	9905      	ldr	r1, [sp, #20]
 802fcba:	4620      	mov	r0, r4
 802fcbc:	f7fe fe66 	bl	802e98c <_Bfree>
 802fcc0:	4659      	mov	r1, fp
 802fcc2:	4620      	mov	r0, r4
 802fcc4:	f7fe fe62 	bl	802e98c <_Bfree>
 802fcc8:	4629      	mov	r1, r5
 802fcca:	4620      	mov	r0, r4
 802fccc:	f7fe fe5e 	bl	802e98c <_Bfree>
 802fcd0:	e609      	b.n	802f8e6 <_strtod_l+0x646>
 802fcd2:	f1b8 0f01 	cmp.w	r8, #1
 802fcd6:	d103      	bne.n	802fce0 <_strtod_l+0xa40>
 802fcd8:	f1b9 0f00 	cmp.w	r9, #0
 802fcdc:	f43f ad95 	beq.w	802f80a <_strtod_l+0x56a>
 802fce0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 802fe38 <_strtod_l+0xb98>
 802fce4:	4f60      	ldr	r7, [pc, #384]	; (802fe68 <_strtod_l+0xbc8>)
 802fce6:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fcea:	2600      	movs	r6, #0
 802fcec:	e7ae      	b.n	802fc4c <_strtod_l+0x9ac>
 802fcee:	4f5f      	ldr	r7, [pc, #380]	; (802fe6c <_strtod_l+0xbcc>)
 802fcf0:	2600      	movs	r6, #0
 802fcf2:	e7a7      	b.n	802fc44 <_strtod_l+0x9a4>
 802fcf4:	4b5d      	ldr	r3, [pc, #372]	; (802fe6c <_strtod_l+0xbcc>)
 802fcf6:	4630      	mov	r0, r6
 802fcf8:	4639      	mov	r1, r7
 802fcfa:	2200      	movs	r2, #0
 802fcfc:	f7e0 fc94 	bl	8010628 <__aeabi_dmul>
 802fd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fd02:	4606      	mov	r6, r0
 802fd04:	460f      	mov	r7, r1
 802fd06:	2b00      	cmp	r3, #0
 802fd08:	d09c      	beq.n	802fc44 <_strtod_l+0x9a4>
 802fd0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802fd0e:	e79d      	b.n	802fc4c <_strtod_l+0x9ac>
 802fd10:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802fe40 <_strtod_l+0xba0>
 802fd14:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fd18:	ec57 6b17 	vmov	r6, r7, d7
 802fd1c:	e796      	b.n	802fc4c <_strtod_l+0x9ac>
 802fd1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802fd22:	9b04      	ldr	r3, [sp, #16]
 802fd24:	46ca      	mov	sl, r9
 802fd26:	2b00      	cmp	r3, #0
 802fd28:	d1c2      	bne.n	802fcb0 <_strtod_l+0xa10>
 802fd2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802fd2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fd30:	0d1b      	lsrs	r3, r3, #20
 802fd32:	051b      	lsls	r3, r3, #20
 802fd34:	429a      	cmp	r2, r3
 802fd36:	d1bb      	bne.n	802fcb0 <_strtod_l+0xa10>
 802fd38:	4630      	mov	r0, r6
 802fd3a:	4639      	mov	r1, r7
 802fd3c:	f7e0 ffe8 	bl	8010d10 <__aeabi_d2lz>
 802fd40:	f7e0 fc44 	bl	80105cc <__aeabi_l2d>
 802fd44:	4602      	mov	r2, r0
 802fd46:	460b      	mov	r3, r1
 802fd48:	4630      	mov	r0, r6
 802fd4a:	4639      	mov	r1, r7
 802fd4c:	f7e0 fab4 	bl	80102b8 <__aeabi_dsub>
 802fd50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fd52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fd56:	ea43 0308 	orr.w	r3, r3, r8
 802fd5a:	4313      	orrs	r3, r2
 802fd5c:	4606      	mov	r6, r0
 802fd5e:	460f      	mov	r7, r1
 802fd60:	d054      	beq.n	802fe0c <_strtod_l+0xb6c>
 802fd62:	a339      	add	r3, pc, #228	; (adr r3, 802fe48 <_strtod_l+0xba8>)
 802fd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd68:	f7e0 fed0 	bl	8010b0c <__aeabi_dcmplt>
 802fd6c:	2800      	cmp	r0, #0
 802fd6e:	f47f ace5 	bne.w	802f73c <_strtod_l+0x49c>
 802fd72:	a337      	add	r3, pc, #220	; (adr r3, 802fe50 <_strtod_l+0xbb0>)
 802fd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd78:	4630      	mov	r0, r6
 802fd7a:	4639      	mov	r1, r7
 802fd7c:	f7e0 fee4 	bl	8010b48 <__aeabi_dcmpgt>
 802fd80:	2800      	cmp	r0, #0
 802fd82:	d095      	beq.n	802fcb0 <_strtod_l+0xa10>
 802fd84:	e4da      	b.n	802f73c <_strtod_l+0x49c>
 802fd86:	9b04      	ldr	r3, [sp, #16]
 802fd88:	b333      	cbz	r3, 802fdd8 <_strtod_l+0xb38>
 802fd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fd8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fd90:	d822      	bhi.n	802fdd8 <_strtod_l+0xb38>
 802fd92:	a331      	add	r3, pc, #196	; (adr r3, 802fe58 <_strtod_l+0xbb8>)
 802fd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd98:	4630      	mov	r0, r6
 802fd9a:	4639      	mov	r1, r7
 802fd9c:	f7e0 fec0 	bl	8010b20 <__aeabi_dcmple>
 802fda0:	b1a0      	cbz	r0, 802fdcc <_strtod_l+0xb2c>
 802fda2:	4639      	mov	r1, r7
 802fda4:	4630      	mov	r0, r6
 802fda6:	f7e0 ff17 	bl	8010bd8 <__aeabi_d2uiz>
 802fdaa:	2801      	cmp	r0, #1
 802fdac:	bf38      	it	cc
 802fdae:	2001      	movcc	r0, #1
 802fdb0:	f7e0 fbc0 	bl	8010534 <__aeabi_ui2d>
 802fdb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fdb6:	4606      	mov	r6, r0
 802fdb8:	460f      	mov	r7, r1
 802fdba:	bb23      	cbnz	r3, 802fe06 <_strtod_l+0xb66>
 802fdbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802fdc0:	9010      	str	r0, [sp, #64]	; 0x40
 802fdc2:	9311      	str	r3, [sp, #68]	; 0x44
 802fdc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802fdc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802fdcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802fdce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fdd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802fdd4:	1a9b      	subs	r3, r3, r2
 802fdd6:	930f      	str	r3, [sp, #60]	; 0x3c
 802fdd8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802fddc:	eeb0 0a48 	vmov.f32	s0, s16
 802fde0:	eef0 0a68 	vmov.f32	s1, s17
 802fde4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802fde8:	f7ff f8fc 	bl	802efe4 <__ulp>
 802fdec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802fdf0:	ec53 2b10 	vmov	r2, r3, d0
 802fdf4:	f7e0 fc18 	bl	8010628 <__aeabi_dmul>
 802fdf8:	ec53 2b18 	vmov	r2, r3, d8
 802fdfc:	f7e0 fa5e 	bl	80102bc <__adddf3>
 802fe00:	4680      	mov	r8, r0
 802fe02:	4689      	mov	r9, r1
 802fe04:	e78d      	b.n	802fd22 <_strtod_l+0xa82>
 802fe06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802fe0a:	e7db      	b.n	802fdc4 <_strtod_l+0xb24>
 802fe0c:	a314      	add	r3, pc, #80	; (adr r3, 802fe60 <_strtod_l+0xbc0>)
 802fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe12:	f7e0 fe7b 	bl	8010b0c <__aeabi_dcmplt>
 802fe16:	e7b3      	b.n	802fd80 <_strtod_l+0xae0>
 802fe18:	2300      	movs	r3, #0
 802fe1a:	930a      	str	r3, [sp, #40]	; 0x28
 802fe1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802fe1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802fe20:	6013      	str	r3, [r2, #0]
 802fe22:	f7ff ba7c 	b.w	802f31e <_strtod_l+0x7e>
 802fe26:	2a65      	cmp	r2, #101	; 0x65
 802fe28:	f43f ab75 	beq.w	802f516 <_strtod_l+0x276>
 802fe2c:	2a45      	cmp	r2, #69	; 0x45
 802fe2e:	f43f ab72 	beq.w	802f516 <_strtod_l+0x276>
 802fe32:	2301      	movs	r3, #1
 802fe34:	f7ff bbaa 	b.w	802f58c <_strtod_l+0x2ec>
 802fe38:	00000000 	.word	0x00000000
 802fe3c:	bff00000 	.word	0xbff00000
 802fe40:	00000000 	.word	0x00000000
 802fe44:	3ff00000 	.word	0x3ff00000
 802fe48:	94a03595 	.word	0x94a03595
 802fe4c:	3fdfffff 	.word	0x3fdfffff
 802fe50:	35afe535 	.word	0x35afe535
 802fe54:	3fe00000 	.word	0x3fe00000
 802fe58:	ffc00000 	.word	0xffc00000
 802fe5c:	41dfffff 	.word	0x41dfffff
 802fe60:	94a03595 	.word	0x94a03595
 802fe64:	3fcfffff 	.word	0x3fcfffff
 802fe68:	3ff00000 	.word	0x3ff00000
 802fe6c:	3fe00000 	.word	0x3fe00000
 802fe70:	7ff00000 	.word	0x7ff00000
 802fe74:	7fe00000 	.word	0x7fe00000
 802fe78:	7c9fffff 	.word	0x7c9fffff
 802fe7c:	7fefffff 	.word	0x7fefffff

0802fe80 <_strtod_r>:
 802fe80:	4b01      	ldr	r3, [pc, #4]	; (802fe88 <_strtod_r+0x8>)
 802fe82:	f7ff ba0d 	b.w	802f2a0 <_strtod_l>
 802fe86:	bf00      	nop
 802fe88:	2000018c 	.word	0x2000018c

0802fe8c <_strtol_l.constprop.0>:
 802fe8c:	2b01      	cmp	r3, #1
 802fe8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fe92:	d001      	beq.n	802fe98 <_strtol_l.constprop.0+0xc>
 802fe94:	2b24      	cmp	r3, #36	; 0x24
 802fe96:	d906      	bls.n	802fea6 <_strtol_l.constprop.0+0x1a>
 802fe98:	f7fd fe20 	bl	802dadc <__errno>
 802fe9c:	2316      	movs	r3, #22
 802fe9e:	6003      	str	r3, [r0, #0]
 802fea0:	2000      	movs	r0, #0
 802fea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fea6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802ff8c <_strtol_l.constprop.0+0x100>
 802feaa:	460d      	mov	r5, r1
 802feac:	462e      	mov	r6, r5
 802feae:	f815 4b01 	ldrb.w	r4, [r5], #1
 802feb2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802feb6:	f017 0708 	ands.w	r7, r7, #8
 802feba:	d1f7      	bne.n	802feac <_strtol_l.constprop.0+0x20>
 802febc:	2c2d      	cmp	r4, #45	; 0x2d
 802febe:	d132      	bne.n	802ff26 <_strtol_l.constprop.0+0x9a>
 802fec0:	782c      	ldrb	r4, [r5, #0]
 802fec2:	2701      	movs	r7, #1
 802fec4:	1cb5      	adds	r5, r6, #2
 802fec6:	2b00      	cmp	r3, #0
 802fec8:	d05b      	beq.n	802ff82 <_strtol_l.constprop.0+0xf6>
 802feca:	2b10      	cmp	r3, #16
 802fecc:	d109      	bne.n	802fee2 <_strtol_l.constprop.0+0x56>
 802fece:	2c30      	cmp	r4, #48	; 0x30
 802fed0:	d107      	bne.n	802fee2 <_strtol_l.constprop.0+0x56>
 802fed2:	782c      	ldrb	r4, [r5, #0]
 802fed4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802fed8:	2c58      	cmp	r4, #88	; 0x58
 802feda:	d14d      	bne.n	802ff78 <_strtol_l.constprop.0+0xec>
 802fedc:	786c      	ldrb	r4, [r5, #1]
 802fede:	2310      	movs	r3, #16
 802fee0:	3502      	adds	r5, #2
 802fee2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802fee6:	f108 38ff 	add.w	r8, r8, #4294967295
 802feea:	f04f 0e00 	mov.w	lr, #0
 802feee:	fbb8 f9f3 	udiv	r9, r8, r3
 802fef2:	4676      	mov	r6, lr
 802fef4:	fb03 8a19 	mls	sl, r3, r9, r8
 802fef8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802fefc:	f1bc 0f09 	cmp.w	ip, #9
 802ff00:	d816      	bhi.n	802ff30 <_strtol_l.constprop.0+0xa4>
 802ff02:	4664      	mov	r4, ip
 802ff04:	42a3      	cmp	r3, r4
 802ff06:	dd24      	ble.n	802ff52 <_strtol_l.constprop.0+0xc6>
 802ff08:	f1be 3fff 	cmp.w	lr, #4294967295
 802ff0c:	d008      	beq.n	802ff20 <_strtol_l.constprop.0+0x94>
 802ff0e:	45b1      	cmp	r9, r6
 802ff10:	d31c      	bcc.n	802ff4c <_strtol_l.constprop.0+0xc0>
 802ff12:	d101      	bne.n	802ff18 <_strtol_l.constprop.0+0x8c>
 802ff14:	45a2      	cmp	sl, r4
 802ff16:	db19      	blt.n	802ff4c <_strtol_l.constprop.0+0xc0>
 802ff18:	fb06 4603 	mla	r6, r6, r3, r4
 802ff1c:	f04f 0e01 	mov.w	lr, #1
 802ff20:	f815 4b01 	ldrb.w	r4, [r5], #1
 802ff24:	e7e8      	b.n	802fef8 <_strtol_l.constprop.0+0x6c>
 802ff26:	2c2b      	cmp	r4, #43	; 0x2b
 802ff28:	bf04      	itt	eq
 802ff2a:	782c      	ldrbeq	r4, [r5, #0]
 802ff2c:	1cb5      	addeq	r5, r6, #2
 802ff2e:	e7ca      	b.n	802fec6 <_strtol_l.constprop.0+0x3a>
 802ff30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802ff34:	f1bc 0f19 	cmp.w	ip, #25
 802ff38:	d801      	bhi.n	802ff3e <_strtol_l.constprop.0+0xb2>
 802ff3a:	3c37      	subs	r4, #55	; 0x37
 802ff3c:	e7e2      	b.n	802ff04 <_strtol_l.constprop.0+0x78>
 802ff3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802ff42:	f1bc 0f19 	cmp.w	ip, #25
 802ff46:	d804      	bhi.n	802ff52 <_strtol_l.constprop.0+0xc6>
 802ff48:	3c57      	subs	r4, #87	; 0x57
 802ff4a:	e7db      	b.n	802ff04 <_strtol_l.constprop.0+0x78>
 802ff4c:	f04f 3eff 	mov.w	lr, #4294967295
 802ff50:	e7e6      	b.n	802ff20 <_strtol_l.constprop.0+0x94>
 802ff52:	f1be 3fff 	cmp.w	lr, #4294967295
 802ff56:	d105      	bne.n	802ff64 <_strtol_l.constprop.0+0xd8>
 802ff58:	2322      	movs	r3, #34	; 0x22
 802ff5a:	6003      	str	r3, [r0, #0]
 802ff5c:	4646      	mov	r6, r8
 802ff5e:	b942      	cbnz	r2, 802ff72 <_strtol_l.constprop.0+0xe6>
 802ff60:	4630      	mov	r0, r6
 802ff62:	e79e      	b.n	802fea2 <_strtol_l.constprop.0+0x16>
 802ff64:	b107      	cbz	r7, 802ff68 <_strtol_l.constprop.0+0xdc>
 802ff66:	4276      	negs	r6, r6
 802ff68:	2a00      	cmp	r2, #0
 802ff6a:	d0f9      	beq.n	802ff60 <_strtol_l.constprop.0+0xd4>
 802ff6c:	f1be 0f00 	cmp.w	lr, #0
 802ff70:	d000      	beq.n	802ff74 <_strtol_l.constprop.0+0xe8>
 802ff72:	1e69      	subs	r1, r5, #1
 802ff74:	6011      	str	r1, [r2, #0]
 802ff76:	e7f3      	b.n	802ff60 <_strtol_l.constprop.0+0xd4>
 802ff78:	2430      	movs	r4, #48	; 0x30
 802ff7a:	2b00      	cmp	r3, #0
 802ff7c:	d1b1      	bne.n	802fee2 <_strtol_l.constprop.0+0x56>
 802ff7e:	2308      	movs	r3, #8
 802ff80:	e7af      	b.n	802fee2 <_strtol_l.constprop.0+0x56>
 802ff82:	2c30      	cmp	r4, #48	; 0x30
 802ff84:	d0a5      	beq.n	802fed2 <_strtol_l.constprop.0+0x46>
 802ff86:	230a      	movs	r3, #10
 802ff88:	e7ab      	b.n	802fee2 <_strtol_l.constprop.0+0x56>
 802ff8a:	bf00      	nop
 802ff8c:	08034c19 	.word	0x08034c19

0802ff90 <_strtol_r>:
 802ff90:	f7ff bf7c 	b.w	802fe8c <_strtol_l.constprop.0>

0802ff94 <__ssputs_r>:
 802ff94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ff98:	688e      	ldr	r6, [r1, #8]
 802ff9a:	461f      	mov	r7, r3
 802ff9c:	42be      	cmp	r6, r7
 802ff9e:	680b      	ldr	r3, [r1, #0]
 802ffa0:	4682      	mov	sl, r0
 802ffa2:	460c      	mov	r4, r1
 802ffa4:	4690      	mov	r8, r2
 802ffa6:	d82c      	bhi.n	8030002 <__ssputs_r+0x6e>
 802ffa8:	898a      	ldrh	r2, [r1, #12]
 802ffaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ffae:	d026      	beq.n	802fffe <__ssputs_r+0x6a>
 802ffb0:	6965      	ldr	r5, [r4, #20]
 802ffb2:	6909      	ldr	r1, [r1, #16]
 802ffb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ffb8:	eba3 0901 	sub.w	r9, r3, r1
 802ffbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ffc0:	1c7b      	adds	r3, r7, #1
 802ffc2:	444b      	add	r3, r9
 802ffc4:	106d      	asrs	r5, r5, #1
 802ffc6:	429d      	cmp	r5, r3
 802ffc8:	bf38      	it	cc
 802ffca:	461d      	movcc	r5, r3
 802ffcc:	0553      	lsls	r3, r2, #21
 802ffce:	d527      	bpl.n	8030020 <__ssputs_r+0x8c>
 802ffd0:	4629      	mov	r1, r5
 802ffd2:	f7fc fa77 	bl	802c4c4 <_malloc_r>
 802ffd6:	4606      	mov	r6, r0
 802ffd8:	b360      	cbz	r0, 8030034 <__ssputs_r+0xa0>
 802ffda:	6921      	ldr	r1, [r4, #16]
 802ffdc:	464a      	mov	r2, r9
 802ffde:	f7fd fdb2 	bl	802db46 <memcpy>
 802ffe2:	89a3      	ldrh	r3, [r4, #12]
 802ffe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ffe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ffec:	81a3      	strh	r3, [r4, #12]
 802ffee:	6126      	str	r6, [r4, #16]
 802fff0:	6165      	str	r5, [r4, #20]
 802fff2:	444e      	add	r6, r9
 802fff4:	eba5 0509 	sub.w	r5, r5, r9
 802fff8:	6026      	str	r6, [r4, #0]
 802fffa:	60a5      	str	r5, [r4, #8]
 802fffc:	463e      	mov	r6, r7
 802fffe:	42be      	cmp	r6, r7
 8030000:	d900      	bls.n	8030004 <__ssputs_r+0x70>
 8030002:	463e      	mov	r6, r7
 8030004:	6820      	ldr	r0, [r4, #0]
 8030006:	4632      	mov	r2, r6
 8030008:	4641      	mov	r1, r8
 803000a:	f7fd fbad 	bl	802d768 <memmove>
 803000e:	68a3      	ldr	r3, [r4, #8]
 8030010:	1b9b      	subs	r3, r3, r6
 8030012:	60a3      	str	r3, [r4, #8]
 8030014:	6823      	ldr	r3, [r4, #0]
 8030016:	4433      	add	r3, r6
 8030018:	6023      	str	r3, [r4, #0]
 803001a:	2000      	movs	r0, #0
 803001c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030020:	462a      	mov	r2, r5
 8030022:	f001 face 	bl	80315c2 <_realloc_r>
 8030026:	4606      	mov	r6, r0
 8030028:	2800      	cmp	r0, #0
 803002a:	d1e0      	bne.n	802ffee <__ssputs_r+0x5a>
 803002c:	6921      	ldr	r1, [r4, #16]
 803002e:	4650      	mov	r0, sl
 8030030:	f7fe fc20 	bl	802e874 <_free_r>
 8030034:	230c      	movs	r3, #12
 8030036:	f8ca 3000 	str.w	r3, [sl]
 803003a:	89a3      	ldrh	r3, [r4, #12]
 803003c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030040:	81a3      	strh	r3, [r4, #12]
 8030042:	f04f 30ff 	mov.w	r0, #4294967295
 8030046:	e7e9      	b.n	803001c <__ssputs_r+0x88>

08030048 <_svfiprintf_r>:
 8030048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803004c:	4698      	mov	r8, r3
 803004e:	898b      	ldrh	r3, [r1, #12]
 8030050:	061b      	lsls	r3, r3, #24
 8030052:	b09d      	sub	sp, #116	; 0x74
 8030054:	4607      	mov	r7, r0
 8030056:	460d      	mov	r5, r1
 8030058:	4614      	mov	r4, r2
 803005a:	d50e      	bpl.n	803007a <_svfiprintf_r+0x32>
 803005c:	690b      	ldr	r3, [r1, #16]
 803005e:	b963      	cbnz	r3, 803007a <_svfiprintf_r+0x32>
 8030060:	2140      	movs	r1, #64	; 0x40
 8030062:	f7fc fa2f 	bl	802c4c4 <_malloc_r>
 8030066:	6028      	str	r0, [r5, #0]
 8030068:	6128      	str	r0, [r5, #16]
 803006a:	b920      	cbnz	r0, 8030076 <_svfiprintf_r+0x2e>
 803006c:	230c      	movs	r3, #12
 803006e:	603b      	str	r3, [r7, #0]
 8030070:	f04f 30ff 	mov.w	r0, #4294967295
 8030074:	e0d0      	b.n	8030218 <_svfiprintf_r+0x1d0>
 8030076:	2340      	movs	r3, #64	; 0x40
 8030078:	616b      	str	r3, [r5, #20]
 803007a:	2300      	movs	r3, #0
 803007c:	9309      	str	r3, [sp, #36]	; 0x24
 803007e:	2320      	movs	r3, #32
 8030080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030084:	f8cd 800c 	str.w	r8, [sp, #12]
 8030088:	2330      	movs	r3, #48	; 0x30
 803008a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8030230 <_svfiprintf_r+0x1e8>
 803008e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030092:	f04f 0901 	mov.w	r9, #1
 8030096:	4623      	mov	r3, r4
 8030098:	469a      	mov	sl, r3
 803009a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803009e:	b10a      	cbz	r2, 80300a4 <_svfiprintf_r+0x5c>
 80300a0:	2a25      	cmp	r2, #37	; 0x25
 80300a2:	d1f9      	bne.n	8030098 <_svfiprintf_r+0x50>
 80300a4:	ebba 0b04 	subs.w	fp, sl, r4
 80300a8:	d00b      	beq.n	80300c2 <_svfiprintf_r+0x7a>
 80300aa:	465b      	mov	r3, fp
 80300ac:	4622      	mov	r2, r4
 80300ae:	4629      	mov	r1, r5
 80300b0:	4638      	mov	r0, r7
 80300b2:	f7ff ff6f 	bl	802ff94 <__ssputs_r>
 80300b6:	3001      	adds	r0, #1
 80300b8:	f000 80a9 	beq.w	803020e <_svfiprintf_r+0x1c6>
 80300bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80300be:	445a      	add	r2, fp
 80300c0:	9209      	str	r2, [sp, #36]	; 0x24
 80300c2:	f89a 3000 	ldrb.w	r3, [sl]
 80300c6:	2b00      	cmp	r3, #0
 80300c8:	f000 80a1 	beq.w	803020e <_svfiprintf_r+0x1c6>
 80300cc:	2300      	movs	r3, #0
 80300ce:	f04f 32ff 	mov.w	r2, #4294967295
 80300d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80300d6:	f10a 0a01 	add.w	sl, sl, #1
 80300da:	9304      	str	r3, [sp, #16]
 80300dc:	9307      	str	r3, [sp, #28]
 80300de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80300e2:	931a      	str	r3, [sp, #104]	; 0x68
 80300e4:	4654      	mov	r4, sl
 80300e6:	2205      	movs	r2, #5
 80300e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80300ec:	4850      	ldr	r0, [pc, #320]	; (8030230 <_svfiprintf_r+0x1e8>)
 80300ee:	f7e0 f887 	bl	8010200 <memchr>
 80300f2:	9a04      	ldr	r2, [sp, #16]
 80300f4:	b9d8      	cbnz	r0, 803012e <_svfiprintf_r+0xe6>
 80300f6:	06d0      	lsls	r0, r2, #27
 80300f8:	bf44      	itt	mi
 80300fa:	2320      	movmi	r3, #32
 80300fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030100:	0711      	lsls	r1, r2, #28
 8030102:	bf44      	itt	mi
 8030104:	232b      	movmi	r3, #43	; 0x2b
 8030106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803010a:	f89a 3000 	ldrb.w	r3, [sl]
 803010e:	2b2a      	cmp	r3, #42	; 0x2a
 8030110:	d015      	beq.n	803013e <_svfiprintf_r+0xf6>
 8030112:	9a07      	ldr	r2, [sp, #28]
 8030114:	4654      	mov	r4, sl
 8030116:	2000      	movs	r0, #0
 8030118:	f04f 0c0a 	mov.w	ip, #10
 803011c:	4621      	mov	r1, r4
 803011e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030122:	3b30      	subs	r3, #48	; 0x30
 8030124:	2b09      	cmp	r3, #9
 8030126:	d94d      	bls.n	80301c4 <_svfiprintf_r+0x17c>
 8030128:	b1b0      	cbz	r0, 8030158 <_svfiprintf_r+0x110>
 803012a:	9207      	str	r2, [sp, #28]
 803012c:	e014      	b.n	8030158 <_svfiprintf_r+0x110>
 803012e:	eba0 0308 	sub.w	r3, r0, r8
 8030132:	fa09 f303 	lsl.w	r3, r9, r3
 8030136:	4313      	orrs	r3, r2
 8030138:	9304      	str	r3, [sp, #16]
 803013a:	46a2      	mov	sl, r4
 803013c:	e7d2      	b.n	80300e4 <_svfiprintf_r+0x9c>
 803013e:	9b03      	ldr	r3, [sp, #12]
 8030140:	1d19      	adds	r1, r3, #4
 8030142:	681b      	ldr	r3, [r3, #0]
 8030144:	9103      	str	r1, [sp, #12]
 8030146:	2b00      	cmp	r3, #0
 8030148:	bfbb      	ittet	lt
 803014a:	425b      	neglt	r3, r3
 803014c:	f042 0202 	orrlt.w	r2, r2, #2
 8030150:	9307      	strge	r3, [sp, #28]
 8030152:	9307      	strlt	r3, [sp, #28]
 8030154:	bfb8      	it	lt
 8030156:	9204      	strlt	r2, [sp, #16]
 8030158:	7823      	ldrb	r3, [r4, #0]
 803015a:	2b2e      	cmp	r3, #46	; 0x2e
 803015c:	d10c      	bne.n	8030178 <_svfiprintf_r+0x130>
 803015e:	7863      	ldrb	r3, [r4, #1]
 8030160:	2b2a      	cmp	r3, #42	; 0x2a
 8030162:	d134      	bne.n	80301ce <_svfiprintf_r+0x186>
 8030164:	9b03      	ldr	r3, [sp, #12]
 8030166:	1d1a      	adds	r2, r3, #4
 8030168:	681b      	ldr	r3, [r3, #0]
 803016a:	9203      	str	r2, [sp, #12]
 803016c:	2b00      	cmp	r3, #0
 803016e:	bfb8      	it	lt
 8030170:	f04f 33ff 	movlt.w	r3, #4294967295
 8030174:	3402      	adds	r4, #2
 8030176:	9305      	str	r3, [sp, #20]
 8030178:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8030240 <_svfiprintf_r+0x1f8>
 803017c:	7821      	ldrb	r1, [r4, #0]
 803017e:	2203      	movs	r2, #3
 8030180:	4650      	mov	r0, sl
 8030182:	f7e0 f83d 	bl	8010200 <memchr>
 8030186:	b138      	cbz	r0, 8030198 <_svfiprintf_r+0x150>
 8030188:	9b04      	ldr	r3, [sp, #16]
 803018a:	eba0 000a 	sub.w	r0, r0, sl
 803018e:	2240      	movs	r2, #64	; 0x40
 8030190:	4082      	lsls	r2, r0
 8030192:	4313      	orrs	r3, r2
 8030194:	3401      	adds	r4, #1
 8030196:	9304      	str	r3, [sp, #16]
 8030198:	f814 1b01 	ldrb.w	r1, [r4], #1
 803019c:	4825      	ldr	r0, [pc, #148]	; (8030234 <_svfiprintf_r+0x1ec>)
 803019e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80301a2:	2206      	movs	r2, #6
 80301a4:	f7e0 f82c 	bl	8010200 <memchr>
 80301a8:	2800      	cmp	r0, #0
 80301aa:	d038      	beq.n	803021e <_svfiprintf_r+0x1d6>
 80301ac:	4b22      	ldr	r3, [pc, #136]	; (8030238 <_svfiprintf_r+0x1f0>)
 80301ae:	bb1b      	cbnz	r3, 80301f8 <_svfiprintf_r+0x1b0>
 80301b0:	9b03      	ldr	r3, [sp, #12]
 80301b2:	3307      	adds	r3, #7
 80301b4:	f023 0307 	bic.w	r3, r3, #7
 80301b8:	3308      	adds	r3, #8
 80301ba:	9303      	str	r3, [sp, #12]
 80301bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80301be:	4433      	add	r3, r6
 80301c0:	9309      	str	r3, [sp, #36]	; 0x24
 80301c2:	e768      	b.n	8030096 <_svfiprintf_r+0x4e>
 80301c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80301c8:	460c      	mov	r4, r1
 80301ca:	2001      	movs	r0, #1
 80301cc:	e7a6      	b.n	803011c <_svfiprintf_r+0xd4>
 80301ce:	2300      	movs	r3, #0
 80301d0:	3401      	adds	r4, #1
 80301d2:	9305      	str	r3, [sp, #20]
 80301d4:	4619      	mov	r1, r3
 80301d6:	f04f 0c0a 	mov.w	ip, #10
 80301da:	4620      	mov	r0, r4
 80301dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80301e0:	3a30      	subs	r2, #48	; 0x30
 80301e2:	2a09      	cmp	r2, #9
 80301e4:	d903      	bls.n	80301ee <_svfiprintf_r+0x1a6>
 80301e6:	2b00      	cmp	r3, #0
 80301e8:	d0c6      	beq.n	8030178 <_svfiprintf_r+0x130>
 80301ea:	9105      	str	r1, [sp, #20]
 80301ec:	e7c4      	b.n	8030178 <_svfiprintf_r+0x130>
 80301ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80301f2:	4604      	mov	r4, r0
 80301f4:	2301      	movs	r3, #1
 80301f6:	e7f0      	b.n	80301da <_svfiprintf_r+0x192>
 80301f8:	ab03      	add	r3, sp, #12
 80301fa:	9300      	str	r3, [sp, #0]
 80301fc:	462a      	mov	r2, r5
 80301fe:	4b0f      	ldr	r3, [pc, #60]	; (803023c <_svfiprintf_r+0x1f4>)
 8030200:	a904      	add	r1, sp, #16
 8030202:	4638      	mov	r0, r7
 8030204:	f7fc fa8a 	bl	802c71c <_printf_float>
 8030208:	1c42      	adds	r2, r0, #1
 803020a:	4606      	mov	r6, r0
 803020c:	d1d6      	bne.n	80301bc <_svfiprintf_r+0x174>
 803020e:	89ab      	ldrh	r3, [r5, #12]
 8030210:	065b      	lsls	r3, r3, #25
 8030212:	f53f af2d 	bmi.w	8030070 <_svfiprintf_r+0x28>
 8030216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030218:	b01d      	add	sp, #116	; 0x74
 803021a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803021e:	ab03      	add	r3, sp, #12
 8030220:	9300      	str	r3, [sp, #0]
 8030222:	462a      	mov	r2, r5
 8030224:	4b05      	ldr	r3, [pc, #20]	; (803023c <_svfiprintf_r+0x1f4>)
 8030226:	a904      	add	r1, sp, #16
 8030228:	4638      	mov	r0, r7
 803022a:	f7fc fd1b 	bl	802cc64 <_printf_i>
 803022e:	e7eb      	b.n	8030208 <_svfiprintf_r+0x1c0>
 8030230:	08034d19 	.word	0x08034d19
 8030234:	08034d23 	.word	0x08034d23
 8030238:	0802c71d 	.word	0x0802c71d
 803023c:	0802ff95 	.word	0x0802ff95
 8030240:	08034d1f 	.word	0x08034d1f

08030244 <_sungetc_r>:
 8030244:	b538      	push	{r3, r4, r5, lr}
 8030246:	1c4b      	adds	r3, r1, #1
 8030248:	4614      	mov	r4, r2
 803024a:	d103      	bne.n	8030254 <_sungetc_r+0x10>
 803024c:	f04f 35ff 	mov.w	r5, #4294967295
 8030250:	4628      	mov	r0, r5
 8030252:	bd38      	pop	{r3, r4, r5, pc}
 8030254:	8993      	ldrh	r3, [r2, #12]
 8030256:	f023 0320 	bic.w	r3, r3, #32
 803025a:	8193      	strh	r3, [r2, #12]
 803025c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803025e:	6852      	ldr	r2, [r2, #4]
 8030260:	b2cd      	uxtb	r5, r1
 8030262:	b18b      	cbz	r3, 8030288 <_sungetc_r+0x44>
 8030264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8030266:	4293      	cmp	r3, r2
 8030268:	dd08      	ble.n	803027c <_sungetc_r+0x38>
 803026a:	6823      	ldr	r3, [r4, #0]
 803026c:	1e5a      	subs	r2, r3, #1
 803026e:	6022      	str	r2, [r4, #0]
 8030270:	f803 5c01 	strb.w	r5, [r3, #-1]
 8030274:	6863      	ldr	r3, [r4, #4]
 8030276:	3301      	adds	r3, #1
 8030278:	6063      	str	r3, [r4, #4]
 803027a:	e7e9      	b.n	8030250 <_sungetc_r+0xc>
 803027c:	4621      	mov	r1, r4
 803027e:	f000 fd8e 	bl	8030d9e <__submore>
 8030282:	2800      	cmp	r0, #0
 8030284:	d0f1      	beq.n	803026a <_sungetc_r+0x26>
 8030286:	e7e1      	b.n	803024c <_sungetc_r+0x8>
 8030288:	6921      	ldr	r1, [r4, #16]
 803028a:	6823      	ldr	r3, [r4, #0]
 803028c:	b151      	cbz	r1, 80302a4 <_sungetc_r+0x60>
 803028e:	4299      	cmp	r1, r3
 8030290:	d208      	bcs.n	80302a4 <_sungetc_r+0x60>
 8030292:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8030296:	42a9      	cmp	r1, r5
 8030298:	d104      	bne.n	80302a4 <_sungetc_r+0x60>
 803029a:	3b01      	subs	r3, #1
 803029c:	3201      	adds	r2, #1
 803029e:	6023      	str	r3, [r4, #0]
 80302a0:	6062      	str	r2, [r4, #4]
 80302a2:	e7d5      	b.n	8030250 <_sungetc_r+0xc>
 80302a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80302a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80302ac:	6363      	str	r3, [r4, #52]	; 0x34
 80302ae:	2303      	movs	r3, #3
 80302b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80302b2:	4623      	mov	r3, r4
 80302b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80302b8:	6023      	str	r3, [r4, #0]
 80302ba:	2301      	movs	r3, #1
 80302bc:	e7dc      	b.n	8030278 <_sungetc_r+0x34>

080302be <__ssrefill_r>:
 80302be:	b510      	push	{r4, lr}
 80302c0:	460c      	mov	r4, r1
 80302c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80302c4:	b169      	cbz	r1, 80302e2 <__ssrefill_r+0x24>
 80302c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80302ca:	4299      	cmp	r1, r3
 80302cc:	d001      	beq.n	80302d2 <__ssrefill_r+0x14>
 80302ce:	f7fe fad1 	bl	802e874 <_free_r>
 80302d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80302d4:	6063      	str	r3, [r4, #4]
 80302d6:	2000      	movs	r0, #0
 80302d8:	6360      	str	r0, [r4, #52]	; 0x34
 80302da:	b113      	cbz	r3, 80302e2 <__ssrefill_r+0x24>
 80302dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80302de:	6023      	str	r3, [r4, #0]
 80302e0:	bd10      	pop	{r4, pc}
 80302e2:	6923      	ldr	r3, [r4, #16]
 80302e4:	6023      	str	r3, [r4, #0]
 80302e6:	2300      	movs	r3, #0
 80302e8:	6063      	str	r3, [r4, #4]
 80302ea:	89a3      	ldrh	r3, [r4, #12]
 80302ec:	f043 0320 	orr.w	r3, r3, #32
 80302f0:	81a3      	strh	r3, [r4, #12]
 80302f2:	f04f 30ff 	mov.w	r0, #4294967295
 80302f6:	e7f3      	b.n	80302e0 <__ssrefill_r+0x22>

080302f8 <__ssvfiscanf_r>:
 80302f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80302fc:	460c      	mov	r4, r1
 80302fe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8030302:	2100      	movs	r1, #0
 8030304:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8030308:	49a6      	ldr	r1, [pc, #664]	; (80305a4 <__ssvfiscanf_r+0x2ac>)
 803030a:	91a0      	str	r1, [sp, #640]	; 0x280
 803030c:	f10d 0804 	add.w	r8, sp, #4
 8030310:	49a5      	ldr	r1, [pc, #660]	; (80305a8 <__ssvfiscanf_r+0x2b0>)
 8030312:	4fa6      	ldr	r7, [pc, #664]	; (80305ac <__ssvfiscanf_r+0x2b4>)
 8030314:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80305b0 <__ssvfiscanf_r+0x2b8>
 8030318:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 803031c:	4606      	mov	r6, r0
 803031e:	91a1      	str	r1, [sp, #644]	; 0x284
 8030320:	9300      	str	r3, [sp, #0]
 8030322:	7813      	ldrb	r3, [r2, #0]
 8030324:	2b00      	cmp	r3, #0
 8030326:	f000 815a 	beq.w	80305de <__ssvfiscanf_r+0x2e6>
 803032a:	5cf9      	ldrb	r1, [r7, r3]
 803032c:	f011 0108 	ands.w	r1, r1, #8
 8030330:	f102 0501 	add.w	r5, r2, #1
 8030334:	d019      	beq.n	803036a <__ssvfiscanf_r+0x72>
 8030336:	6863      	ldr	r3, [r4, #4]
 8030338:	2b00      	cmp	r3, #0
 803033a:	dd0f      	ble.n	803035c <__ssvfiscanf_r+0x64>
 803033c:	6823      	ldr	r3, [r4, #0]
 803033e:	781a      	ldrb	r2, [r3, #0]
 8030340:	5cba      	ldrb	r2, [r7, r2]
 8030342:	0712      	lsls	r2, r2, #28
 8030344:	d401      	bmi.n	803034a <__ssvfiscanf_r+0x52>
 8030346:	462a      	mov	r2, r5
 8030348:	e7eb      	b.n	8030322 <__ssvfiscanf_r+0x2a>
 803034a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803034c:	3201      	adds	r2, #1
 803034e:	9245      	str	r2, [sp, #276]	; 0x114
 8030350:	6862      	ldr	r2, [r4, #4]
 8030352:	3301      	adds	r3, #1
 8030354:	3a01      	subs	r2, #1
 8030356:	6062      	str	r2, [r4, #4]
 8030358:	6023      	str	r3, [r4, #0]
 803035a:	e7ec      	b.n	8030336 <__ssvfiscanf_r+0x3e>
 803035c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803035e:	4621      	mov	r1, r4
 8030360:	4630      	mov	r0, r6
 8030362:	4798      	blx	r3
 8030364:	2800      	cmp	r0, #0
 8030366:	d0e9      	beq.n	803033c <__ssvfiscanf_r+0x44>
 8030368:	e7ed      	b.n	8030346 <__ssvfiscanf_r+0x4e>
 803036a:	2b25      	cmp	r3, #37	; 0x25
 803036c:	d012      	beq.n	8030394 <__ssvfiscanf_r+0x9c>
 803036e:	469a      	mov	sl, r3
 8030370:	6863      	ldr	r3, [r4, #4]
 8030372:	2b00      	cmp	r3, #0
 8030374:	f340 8091 	ble.w	803049a <__ssvfiscanf_r+0x1a2>
 8030378:	6822      	ldr	r2, [r4, #0]
 803037a:	7813      	ldrb	r3, [r2, #0]
 803037c:	4553      	cmp	r3, sl
 803037e:	f040 812e 	bne.w	80305de <__ssvfiscanf_r+0x2e6>
 8030382:	6863      	ldr	r3, [r4, #4]
 8030384:	3b01      	subs	r3, #1
 8030386:	6063      	str	r3, [r4, #4]
 8030388:	9b45      	ldr	r3, [sp, #276]	; 0x114
 803038a:	3201      	adds	r2, #1
 803038c:	3301      	adds	r3, #1
 803038e:	6022      	str	r2, [r4, #0]
 8030390:	9345      	str	r3, [sp, #276]	; 0x114
 8030392:	e7d8      	b.n	8030346 <__ssvfiscanf_r+0x4e>
 8030394:	9141      	str	r1, [sp, #260]	; 0x104
 8030396:	9143      	str	r1, [sp, #268]	; 0x10c
 8030398:	7853      	ldrb	r3, [r2, #1]
 803039a:	2b2a      	cmp	r3, #42	; 0x2a
 803039c:	bf02      	ittt	eq
 803039e:	2310      	moveq	r3, #16
 80303a0:	1c95      	addeq	r5, r2, #2
 80303a2:	9341      	streq	r3, [sp, #260]	; 0x104
 80303a4:	220a      	movs	r2, #10
 80303a6:	46aa      	mov	sl, r5
 80303a8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80303ac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80303b0:	2b09      	cmp	r3, #9
 80303b2:	d91c      	bls.n	80303ee <__ssvfiscanf_r+0xf6>
 80303b4:	487e      	ldr	r0, [pc, #504]	; (80305b0 <__ssvfiscanf_r+0x2b8>)
 80303b6:	2203      	movs	r2, #3
 80303b8:	f7df ff22 	bl	8010200 <memchr>
 80303bc:	b138      	cbz	r0, 80303ce <__ssvfiscanf_r+0xd6>
 80303be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80303c0:	eba0 0009 	sub.w	r0, r0, r9
 80303c4:	2301      	movs	r3, #1
 80303c6:	4083      	lsls	r3, r0
 80303c8:	4313      	orrs	r3, r2
 80303ca:	9341      	str	r3, [sp, #260]	; 0x104
 80303cc:	4655      	mov	r5, sl
 80303ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80303d2:	2b78      	cmp	r3, #120	; 0x78
 80303d4:	d806      	bhi.n	80303e4 <__ssvfiscanf_r+0xec>
 80303d6:	2b57      	cmp	r3, #87	; 0x57
 80303d8:	d810      	bhi.n	80303fc <__ssvfiscanf_r+0x104>
 80303da:	2b25      	cmp	r3, #37	; 0x25
 80303dc:	d0c7      	beq.n	803036e <__ssvfiscanf_r+0x76>
 80303de:	d857      	bhi.n	8030490 <__ssvfiscanf_r+0x198>
 80303e0:	2b00      	cmp	r3, #0
 80303e2:	d065      	beq.n	80304b0 <__ssvfiscanf_r+0x1b8>
 80303e4:	2303      	movs	r3, #3
 80303e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80303e8:	230a      	movs	r3, #10
 80303ea:	9342      	str	r3, [sp, #264]	; 0x108
 80303ec:	e076      	b.n	80304dc <__ssvfiscanf_r+0x1e4>
 80303ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80303f0:	fb02 1103 	mla	r1, r2, r3, r1
 80303f4:	3930      	subs	r1, #48	; 0x30
 80303f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80303f8:	4655      	mov	r5, sl
 80303fa:	e7d4      	b.n	80303a6 <__ssvfiscanf_r+0xae>
 80303fc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8030400:	2a20      	cmp	r2, #32
 8030402:	d8ef      	bhi.n	80303e4 <__ssvfiscanf_r+0xec>
 8030404:	a101      	add	r1, pc, #4	; (adr r1, 803040c <__ssvfiscanf_r+0x114>)
 8030406:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803040a:	bf00      	nop
 803040c:	080304bf 	.word	0x080304bf
 8030410:	080303e5 	.word	0x080303e5
 8030414:	080303e5 	.word	0x080303e5
 8030418:	0803051d 	.word	0x0803051d
 803041c:	080303e5 	.word	0x080303e5
 8030420:	080303e5 	.word	0x080303e5
 8030424:	080303e5 	.word	0x080303e5
 8030428:	080303e5 	.word	0x080303e5
 803042c:	080303e5 	.word	0x080303e5
 8030430:	080303e5 	.word	0x080303e5
 8030434:	080303e5 	.word	0x080303e5
 8030438:	08030533 	.word	0x08030533
 803043c:	08030519 	.word	0x08030519
 8030440:	08030497 	.word	0x08030497
 8030444:	08030497 	.word	0x08030497
 8030448:	08030497 	.word	0x08030497
 803044c:	080303e5 	.word	0x080303e5
 8030450:	080304d5 	.word	0x080304d5
 8030454:	080303e5 	.word	0x080303e5
 8030458:	080303e5 	.word	0x080303e5
 803045c:	080303e5 	.word	0x080303e5
 8030460:	080303e5 	.word	0x080303e5
 8030464:	08030543 	.word	0x08030543
 8030468:	08030511 	.word	0x08030511
 803046c:	080304b7 	.word	0x080304b7
 8030470:	080303e5 	.word	0x080303e5
 8030474:	080303e5 	.word	0x080303e5
 8030478:	0803053f 	.word	0x0803053f
 803047c:	080303e5 	.word	0x080303e5
 8030480:	08030519 	.word	0x08030519
 8030484:	080303e5 	.word	0x080303e5
 8030488:	080303e5 	.word	0x080303e5
 803048c:	080304bf 	.word	0x080304bf
 8030490:	3b45      	subs	r3, #69	; 0x45
 8030492:	2b02      	cmp	r3, #2
 8030494:	d8a6      	bhi.n	80303e4 <__ssvfiscanf_r+0xec>
 8030496:	2305      	movs	r3, #5
 8030498:	e01f      	b.n	80304da <__ssvfiscanf_r+0x1e2>
 803049a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803049c:	4621      	mov	r1, r4
 803049e:	4630      	mov	r0, r6
 80304a0:	4798      	blx	r3
 80304a2:	2800      	cmp	r0, #0
 80304a4:	f43f af68 	beq.w	8030378 <__ssvfiscanf_r+0x80>
 80304a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80304aa:	2800      	cmp	r0, #0
 80304ac:	f040 808d 	bne.w	80305ca <__ssvfiscanf_r+0x2d2>
 80304b0:	f04f 30ff 	mov.w	r0, #4294967295
 80304b4:	e08f      	b.n	80305d6 <__ssvfiscanf_r+0x2de>
 80304b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80304b8:	f042 0220 	orr.w	r2, r2, #32
 80304bc:	9241      	str	r2, [sp, #260]	; 0x104
 80304be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80304c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80304c4:	9241      	str	r2, [sp, #260]	; 0x104
 80304c6:	2210      	movs	r2, #16
 80304c8:	2b6f      	cmp	r3, #111	; 0x6f
 80304ca:	9242      	str	r2, [sp, #264]	; 0x108
 80304cc:	bf34      	ite	cc
 80304ce:	2303      	movcc	r3, #3
 80304d0:	2304      	movcs	r3, #4
 80304d2:	e002      	b.n	80304da <__ssvfiscanf_r+0x1e2>
 80304d4:	2300      	movs	r3, #0
 80304d6:	9342      	str	r3, [sp, #264]	; 0x108
 80304d8:	2303      	movs	r3, #3
 80304da:	9347      	str	r3, [sp, #284]	; 0x11c
 80304dc:	6863      	ldr	r3, [r4, #4]
 80304de:	2b00      	cmp	r3, #0
 80304e0:	dd3d      	ble.n	803055e <__ssvfiscanf_r+0x266>
 80304e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80304e4:	0659      	lsls	r1, r3, #25
 80304e6:	d404      	bmi.n	80304f2 <__ssvfiscanf_r+0x1fa>
 80304e8:	6823      	ldr	r3, [r4, #0]
 80304ea:	781a      	ldrb	r2, [r3, #0]
 80304ec:	5cba      	ldrb	r2, [r7, r2]
 80304ee:	0712      	lsls	r2, r2, #28
 80304f0:	d43c      	bmi.n	803056c <__ssvfiscanf_r+0x274>
 80304f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80304f4:	2b02      	cmp	r3, #2
 80304f6:	dc4b      	bgt.n	8030590 <__ssvfiscanf_r+0x298>
 80304f8:	466b      	mov	r3, sp
 80304fa:	4622      	mov	r2, r4
 80304fc:	a941      	add	r1, sp, #260	; 0x104
 80304fe:	4630      	mov	r0, r6
 8030500:	f000 f9b6 	bl	8030870 <_scanf_chars>
 8030504:	2801      	cmp	r0, #1
 8030506:	d06a      	beq.n	80305de <__ssvfiscanf_r+0x2e6>
 8030508:	2802      	cmp	r0, #2
 803050a:	f47f af1c 	bne.w	8030346 <__ssvfiscanf_r+0x4e>
 803050e:	e7cb      	b.n	80304a8 <__ssvfiscanf_r+0x1b0>
 8030510:	2308      	movs	r3, #8
 8030512:	9342      	str	r3, [sp, #264]	; 0x108
 8030514:	2304      	movs	r3, #4
 8030516:	e7e0      	b.n	80304da <__ssvfiscanf_r+0x1e2>
 8030518:	220a      	movs	r2, #10
 803051a:	e7d5      	b.n	80304c8 <__ssvfiscanf_r+0x1d0>
 803051c:	4629      	mov	r1, r5
 803051e:	4640      	mov	r0, r8
 8030520:	f000 fc04 	bl	8030d2c <__sccl>
 8030524:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803052a:	9341      	str	r3, [sp, #260]	; 0x104
 803052c:	4605      	mov	r5, r0
 803052e:	2301      	movs	r3, #1
 8030530:	e7d3      	b.n	80304da <__ssvfiscanf_r+0x1e2>
 8030532:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030538:	9341      	str	r3, [sp, #260]	; 0x104
 803053a:	2300      	movs	r3, #0
 803053c:	e7cd      	b.n	80304da <__ssvfiscanf_r+0x1e2>
 803053e:	2302      	movs	r3, #2
 8030540:	e7cb      	b.n	80304da <__ssvfiscanf_r+0x1e2>
 8030542:	9841      	ldr	r0, [sp, #260]	; 0x104
 8030544:	06c3      	lsls	r3, r0, #27
 8030546:	f53f aefe 	bmi.w	8030346 <__ssvfiscanf_r+0x4e>
 803054a:	9b00      	ldr	r3, [sp, #0]
 803054c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803054e:	1d19      	adds	r1, r3, #4
 8030550:	9100      	str	r1, [sp, #0]
 8030552:	681b      	ldr	r3, [r3, #0]
 8030554:	07c0      	lsls	r0, r0, #31
 8030556:	bf4c      	ite	mi
 8030558:	801a      	strhmi	r2, [r3, #0]
 803055a:	601a      	strpl	r2, [r3, #0]
 803055c:	e6f3      	b.n	8030346 <__ssvfiscanf_r+0x4e>
 803055e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030560:	4621      	mov	r1, r4
 8030562:	4630      	mov	r0, r6
 8030564:	4798      	blx	r3
 8030566:	2800      	cmp	r0, #0
 8030568:	d0bb      	beq.n	80304e2 <__ssvfiscanf_r+0x1ea>
 803056a:	e79d      	b.n	80304a8 <__ssvfiscanf_r+0x1b0>
 803056c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803056e:	3201      	adds	r2, #1
 8030570:	9245      	str	r2, [sp, #276]	; 0x114
 8030572:	6862      	ldr	r2, [r4, #4]
 8030574:	3a01      	subs	r2, #1
 8030576:	2a00      	cmp	r2, #0
 8030578:	6062      	str	r2, [r4, #4]
 803057a:	dd02      	ble.n	8030582 <__ssvfiscanf_r+0x28a>
 803057c:	3301      	adds	r3, #1
 803057e:	6023      	str	r3, [r4, #0]
 8030580:	e7b2      	b.n	80304e8 <__ssvfiscanf_r+0x1f0>
 8030582:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030584:	4621      	mov	r1, r4
 8030586:	4630      	mov	r0, r6
 8030588:	4798      	blx	r3
 803058a:	2800      	cmp	r0, #0
 803058c:	d0ac      	beq.n	80304e8 <__ssvfiscanf_r+0x1f0>
 803058e:	e78b      	b.n	80304a8 <__ssvfiscanf_r+0x1b0>
 8030590:	2b04      	cmp	r3, #4
 8030592:	dc0f      	bgt.n	80305b4 <__ssvfiscanf_r+0x2bc>
 8030594:	466b      	mov	r3, sp
 8030596:	4622      	mov	r2, r4
 8030598:	a941      	add	r1, sp, #260	; 0x104
 803059a:	4630      	mov	r0, r6
 803059c:	f000 f9c2 	bl	8030924 <_scanf_i>
 80305a0:	e7b0      	b.n	8030504 <__ssvfiscanf_r+0x20c>
 80305a2:	bf00      	nop
 80305a4:	08030245 	.word	0x08030245
 80305a8:	080302bf 	.word	0x080302bf
 80305ac:	08034c19 	.word	0x08034c19
 80305b0:	08034d1f 	.word	0x08034d1f
 80305b4:	4b0b      	ldr	r3, [pc, #44]	; (80305e4 <__ssvfiscanf_r+0x2ec>)
 80305b6:	2b00      	cmp	r3, #0
 80305b8:	f43f aec5 	beq.w	8030346 <__ssvfiscanf_r+0x4e>
 80305bc:	466b      	mov	r3, sp
 80305be:	4622      	mov	r2, r4
 80305c0:	a941      	add	r1, sp, #260	; 0x104
 80305c2:	4630      	mov	r0, r6
 80305c4:	f7fc fc70 	bl	802cea8 <_scanf_float>
 80305c8:	e79c      	b.n	8030504 <__ssvfiscanf_r+0x20c>
 80305ca:	89a3      	ldrh	r3, [r4, #12]
 80305cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80305d0:	bf18      	it	ne
 80305d2:	f04f 30ff 	movne.w	r0, #4294967295
 80305d6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80305da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80305de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80305e0:	e7f9      	b.n	80305d6 <__ssvfiscanf_r+0x2de>
 80305e2:	bf00      	nop
 80305e4:	0802cea9 	.word	0x0802cea9

080305e8 <__sfputc_r>:
 80305e8:	6893      	ldr	r3, [r2, #8]
 80305ea:	3b01      	subs	r3, #1
 80305ec:	2b00      	cmp	r3, #0
 80305ee:	b410      	push	{r4}
 80305f0:	6093      	str	r3, [r2, #8]
 80305f2:	da08      	bge.n	8030606 <__sfputc_r+0x1e>
 80305f4:	6994      	ldr	r4, [r2, #24]
 80305f6:	42a3      	cmp	r3, r4
 80305f8:	db01      	blt.n	80305fe <__sfputc_r+0x16>
 80305fa:	290a      	cmp	r1, #10
 80305fc:	d103      	bne.n	8030606 <__sfputc_r+0x1e>
 80305fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030602:	f7fd b80c 	b.w	802d61e <__swbuf_r>
 8030606:	6813      	ldr	r3, [r2, #0]
 8030608:	1c58      	adds	r0, r3, #1
 803060a:	6010      	str	r0, [r2, #0]
 803060c:	7019      	strb	r1, [r3, #0]
 803060e:	4608      	mov	r0, r1
 8030610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030614:	4770      	bx	lr

08030616 <__sfputs_r>:
 8030616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030618:	4606      	mov	r6, r0
 803061a:	460f      	mov	r7, r1
 803061c:	4614      	mov	r4, r2
 803061e:	18d5      	adds	r5, r2, r3
 8030620:	42ac      	cmp	r4, r5
 8030622:	d101      	bne.n	8030628 <__sfputs_r+0x12>
 8030624:	2000      	movs	r0, #0
 8030626:	e007      	b.n	8030638 <__sfputs_r+0x22>
 8030628:	f814 1b01 	ldrb.w	r1, [r4], #1
 803062c:	463a      	mov	r2, r7
 803062e:	4630      	mov	r0, r6
 8030630:	f7ff ffda 	bl	80305e8 <__sfputc_r>
 8030634:	1c43      	adds	r3, r0, #1
 8030636:	d1f3      	bne.n	8030620 <__sfputs_r+0xa>
 8030638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803063c <_vfiprintf_r>:
 803063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030640:	460d      	mov	r5, r1
 8030642:	b09d      	sub	sp, #116	; 0x74
 8030644:	4614      	mov	r4, r2
 8030646:	4698      	mov	r8, r3
 8030648:	4606      	mov	r6, r0
 803064a:	b118      	cbz	r0, 8030654 <_vfiprintf_r+0x18>
 803064c:	6a03      	ldr	r3, [r0, #32]
 803064e:	b90b      	cbnz	r3, 8030654 <_vfiprintf_r+0x18>
 8030650:	f7fc fec6 	bl	802d3e0 <__sinit>
 8030654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030656:	07d9      	lsls	r1, r3, #31
 8030658:	d405      	bmi.n	8030666 <_vfiprintf_r+0x2a>
 803065a:	89ab      	ldrh	r3, [r5, #12]
 803065c:	059a      	lsls	r2, r3, #22
 803065e:	d402      	bmi.n	8030666 <_vfiprintf_r+0x2a>
 8030660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030662:	f7fd fa66 	bl	802db32 <__retarget_lock_acquire_recursive>
 8030666:	89ab      	ldrh	r3, [r5, #12]
 8030668:	071b      	lsls	r3, r3, #28
 803066a:	d501      	bpl.n	8030670 <_vfiprintf_r+0x34>
 803066c:	692b      	ldr	r3, [r5, #16]
 803066e:	b99b      	cbnz	r3, 8030698 <_vfiprintf_r+0x5c>
 8030670:	4629      	mov	r1, r5
 8030672:	4630      	mov	r0, r6
 8030674:	f7fd f810 	bl	802d698 <__swsetup_r>
 8030678:	b170      	cbz	r0, 8030698 <_vfiprintf_r+0x5c>
 803067a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803067c:	07dc      	lsls	r4, r3, #31
 803067e:	d504      	bpl.n	803068a <_vfiprintf_r+0x4e>
 8030680:	f04f 30ff 	mov.w	r0, #4294967295
 8030684:	b01d      	add	sp, #116	; 0x74
 8030686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803068a:	89ab      	ldrh	r3, [r5, #12]
 803068c:	0598      	lsls	r0, r3, #22
 803068e:	d4f7      	bmi.n	8030680 <_vfiprintf_r+0x44>
 8030690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030692:	f7fd fa4f 	bl	802db34 <__retarget_lock_release_recursive>
 8030696:	e7f3      	b.n	8030680 <_vfiprintf_r+0x44>
 8030698:	2300      	movs	r3, #0
 803069a:	9309      	str	r3, [sp, #36]	; 0x24
 803069c:	2320      	movs	r3, #32
 803069e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80306a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80306a6:	2330      	movs	r3, #48	; 0x30
 80306a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 803085c <_vfiprintf_r+0x220>
 80306ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80306b0:	f04f 0901 	mov.w	r9, #1
 80306b4:	4623      	mov	r3, r4
 80306b6:	469a      	mov	sl, r3
 80306b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80306bc:	b10a      	cbz	r2, 80306c2 <_vfiprintf_r+0x86>
 80306be:	2a25      	cmp	r2, #37	; 0x25
 80306c0:	d1f9      	bne.n	80306b6 <_vfiprintf_r+0x7a>
 80306c2:	ebba 0b04 	subs.w	fp, sl, r4
 80306c6:	d00b      	beq.n	80306e0 <_vfiprintf_r+0xa4>
 80306c8:	465b      	mov	r3, fp
 80306ca:	4622      	mov	r2, r4
 80306cc:	4629      	mov	r1, r5
 80306ce:	4630      	mov	r0, r6
 80306d0:	f7ff ffa1 	bl	8030616 <__sfputs_r>
 80306d4:	3001      	adds	r0, #1
 80306d6:	f000 80a9 	beq.w	803082c <_vfiprintf_r+0x1f0>
 80306da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80306dc:	445a      	add	r2, fp
 80306de:	9209      	str	r2, [sp, #36]	; 0x24
 80306e0:	f89a 3000 	ldrb.w	r3, [sl]
 80306e4:	2b00      	cmp	r3, #0
 80306e6:	f000 80a1 	beq.w	803082c <_vfiprintf_r+0x1f0>
 80306ea:	2300      	movs	r3, #0
 80306ec:	f04f 32ff 	mov.w	r2, #4294967295
 80306f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80306f4:	f10a 0a01 	add.w	sl, sl, #1
 80306f8:	9304      	str	r3, [sp, #16]
 80306fa:	9307      	str	r3, [sp, #28]
 80306fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030700:	931a      	str	r3, [sp, #104]	; 0x68
 8030702:	4654      	mov	r4, sl
 8030704:	2205      	movs	r2, #5
 8030706:	f814 1b01 	ldrb.w	r1, [r4], #1
 803070a:	4854      	ldr	r0, [pc, #336]	; (803085c <_vfiprintf_r+0x220>)
 803070c:	f7df fd78 	bl	8010200 <memchr>
 8030710:	9a04      	ldr	r2, [sp, #16]
 8030712:	b9d8      	cbnz	r0, 803074c <_vfiprintf_r+0x110>
 8030714:	06d1      	lsls	r1, r2, #27
 8030716:	bf44      	itt	mi
 8030718:	2320      	movmi	r3, #32
 803071a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803071e:	0713      	lsls	r3, r2, #28
 8030720:	bf44      	itt	mi
 8030722:	232b      	movmi	r3, #43	; 0x2b
 8030724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030728:	f89a 3000 	ldrb.w	r3, [sl]
 803072c:	2b2a      	cmp	r3, #42	; 0x2a
 803072e:	d015      	beq.n	803075c <_vfiprintf_r+0x120>
 8030730:	9a07      	ldr	r2, [sp, #28]
 8030732:	4654      	mov	r4, sl
 8030734:	2000      	movs	r0, #0
 8030736:	f04f 0c0a 	mov.w	ip, #10
 803073a:	4621      	mov	r1, r4
 803073c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030740:	3b30      	subs	r3, #48	; 0x30
 8030742:	2b09      	cmp	r3, #9
 8030744:	d94d      	bls.n	80307e2 <_vfiprintf_r+0x1a6>
 8030746:	b1b0      	cbz	r0, 8030776 <_vfiprintf_r+0x13a>
 8030748:	9207      	str	r2, [sp, #28]
 803074a:	e014      	b.n	8030776 <_vfiprintf_r+0x13a>
 803074c:	eba0 0308 	sub.w	r3, r0, r8
 8030750:	fa09 f303 	lsl.w	r3, r9, r3
 8030754:	4313      	orrs	r3, r2
 8030756:	9304      	str	r3, [sp, #16]
 8030758:	46a2      	mov	sl, r4
 803075a:	e7d2      	b.n	8030702 <_vfiprintf_r+0xc6>
 803075c:	9b03      	ldr	r3, [sp, #12]
 803075e:	1d19      	adds	r1, r3, #4
 8030760:	681b      	ldr	r3, [r3, #0]
 8030762:	9103      	str	r1, [sp, #12]
 8030764:	2b00      	cmp	r3, #0
 8030766:	bfbb      	ittet	lt
 8030768:	425b      	neglt	r3, r3
 803076a:	f042 0202 	orrlt.w	r2, r2, #2
 803076e:	9307      	strge	r3, [sp, #28]
 8030770:	9307      	strlt	r3, [sp, #28]
 8030772:	bfb8      	it	lt
 8030774:	9204      	strlt	r2, [sp, #16]
 8030776:	7823      	ldrb	r3, [r4, #0]
 8030778:	2b2e      	cmp	r3, #46	; 0x2e
 803077a:	d10c      	bne.n	8030796 <_vfiprintf_r+0x15a>
 803077c:	7863      	ldrb	r3, [r4, #1]
 803077e:	2b2a      	cmp	r3, #42	; 0x2a
 8030780:	d134      	bne.n	80307ec <_vfiprintf_r+0x1b0>
 8030782:	9b03      	ldr	r3, [sp, #12]
 8030784:	1d1a      	adds	r2, r3, #4
 8030786:	681b      	ldr	r3, [r3, #0]
 8030788:	9203      	str	r2, [sp, #12]
 803078a:	2b00      	cmp	r3, #0
 803078c:	bfb8      	it	lt
 803078e:	f04f 33ff 	movlt.w	r3, #4294967295
 8030792:	3402      	adds	r4, #2
 8030794:	9305      	str	r3, [sp, #20]
 8030796:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 803086c <_vfiprintf_r+0x230>
 803079a:	7821      	ldrb	r1, [r4, #0]
 803079c:	2203      	movs	r2, #3
 803079e:	4650      	mov	r0, sl
 80307a0:	f7df fd2e 	bl	8010200 <memchr>
 80307a4:	b138      	cbz	r0, 80307b6 <_vfiprintf_r+0x17a>
 80307a6:	9b04      	ldr	r3, [sp, #16]
 80307a8:	eba0 000a 	sub.w	r0, r0, sl
 80307ac:	2240      	movs	r2, #64	; 0x40
 80307ae:	4082      	lsls	r2, r0
 80307b0:	4313      	orrs	r3, r2
 80307b2:	3401      	adds	r4, #1
 80307b4:	9304      	str	r3, [sp, #16]
 80307b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80307ba:	4829      	ldr	r0, [pc, #164]	; (8030860 <_vfiprintf_r+0x224>)
 80307bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80307c0:	2206      	movs	r2, #6
 80307c2:	f7df fd1d 	bl	8010200 <memchr>
 80307c6:	2800      	cmp	r0, #0
 80307c8:	d03f      	beq.n	803084a <_vfiprintf_r+0x20e>
 80307ca:	4b26      	ldr	r3, [pc, #152]	; (8030864 <_vfiprintf_r+0x228>)
 80307cc:	bb1b      	cbnz	r3, 8030816 <_vfiprintf_r+0x1da>
 80307ce:	9b03      	ldr	r3, [sp, #12]
 80307d0:	3307      	adds	r3, #7
 80307d2:	f023 0307 	bic.w	r3, r3, #7
 80307d6:	3308      	adds	r3, #8
 80307d8:	9303      	str	r3, [sp, #12]
 80307da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80307dc:	443b      	add	r3, r7
 80307de:	9309      	str	r3, [sp, #36]	; 0x24
 80307e0:	e768      	b.n	80306b4 <_vfiprintf_r+0x78>
 80307e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80307e6:	460c      	mov	r4, r1
 80307e8:	2001      	movs	r0, #1
 80307ea:	e7a6      	b.n	803073a <_vfiprintf_r+0xfe>
 80307ec:	2300      	movs	r3, #0
 80307ee:	3401      	adds	r4, #1
 80307f0:	9305      	str	r3, [sp, #20]
 80307f2:	4619      	mov	r1, r3
 80307f4:	f04f 0c0a 	mov.w	ip, #10
 80307f8:	4620      	mov	r0, r4
 80307fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80307fe:	3a30      	subs	r2, #48	; 0x30
 8030800:	2a09      	cmp	r2, #9
 8030802:	d903      	bls.n	803080c <_vfiprintf_r+0x1d0>
 8030804:	2b00      	cmp	r3, #0
 8030806:	d0c6      	beq.n	8030796 <_vfiprintf_r+0x15a>
 8030808:	9105      	str	r1, [sp, #20]
 803080a:	e7c4      	b.n	8030796 <_vfiprintf_r+0x15a>
 803080c:	fb0c 2101 	mla	r1, ip, r1, r2
 8030810:	4604      	mov	r4, r0
 8030812:	2301      	movs	r3, #1
 8030814:	e7f0      	b.n	80307f8 <_vfiprintf_r+0x1bc>
 8030816:	ab03      	add	r3, sp, #12
 8030818:	9300      	str	r3, [sp, #0]
 803081a:	462a      	mov	r2, r5
 803081c:	4b12      	ldr	r3, [pc, #72]	; (8030868 <_vfiprintf_r+0x22c>)
 803081e:	a904      	add	r1, sp, #16
 8030820:	4630      	mov	r0, r6
 8030822:	f7fb ff7b 	bl	802c71c <_printf_float>
 8030826:	4607      	mov	r7, r0
 8030828:	1c78      	adds	r0, r7, #1
 803082a:	d1d6      	bne.n	80307da <_vfiprintf_r+0x19e>
 803082c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803082e:	07d9      	lsls	r1, r3, #31
 8030830:	d405      	bmi.n	803083e <_vfiprintf_r+0x202>
 8030832:	89ab      	ldrh	r3, [r5, #12]
 8030834:	059a      	lsls	r2, r3, #22
 8030836:	d402      	bmi.n	803083e <_vfiprintf_r+0x202>
 8030838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803083a:	f7fd f97b 	bl	802db34 <__retarget_lock_release_recursive>
 803083e:	89ab      	ldrh	r3, [r5, #12]
 8030840:	065b      	lsls	r3, r3, #25
 8030842:	f53f af1d 	bmi.w	8030680 <_vfiprintf_r+0x44>
 8030846:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030848:	e71c      	b.n	8030684 <_vfiprintf_r+0x48>
 803084a:	ab03      	add	r3, sp, #12
 803084c:	9300      	str	r3, [sp, #0]
 803084e:	462a      	mov	r2, r5
 8030850:	4b05      	ldr	r3, [pc, #20]	; (8030868 <_vfiprintf_r+0x22c>)
 8030852:	a904      	add	r1, sp, #16
 8030854:	4630      	mov	r0, r6
 8030856:	f7fc fa05 	bl	802cc64 <_printf_i>
 803085a:	e7e4      	b.n	8030826 <_vfiprintf_r+0x1ea>
 803085c:	08034d19 	.word	0x08034d19
 8030860:	08034d23 	.word	0x08034d23
 8030864:	0802c71d 	.word	0x0802c71d
 8030868:	08030617 	.word	0x08030617
 803086c:	08034d1f 	.word	0x08034d1f

08030870 <_scanf_chars>:
 8030870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030874:	4615      	mov	r5, r2
 8030876:	688a      	ldr	r2, [r1, #8]
 8030878:	4680      	mov	r8, r0
 803087a:	460c      	mov	r4, r1
 803087c:	b932      	cbnz	r2, 803088c <_scanf_chars+0x1c>
 803087e:	698a      	ldr	r2, [r1, #24]
 8030880:	2a00      	cmp	r2, #0
 8030882:	bf0c      	ite	eq
 8030884:	2201      	moveq	r2, #1
 8030886:	f04f 32ff 	movne.w	r2, #4294967295
 803088a:	608a      	str	r2, [r1, #8]
 803088c:	6822      	ldr	r2, [r4, #0]
 803088e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8030920 <_scanf_chars+0xb0>
 8030892:	06d1      	lsls	r1, r2, #27
 8030894:	bf5f      	itttt	pl
 8030896:	681a      	ldrpl	r2, [r3, #0]
 8030898:	1d11      	addpl	r1, r2, #4
 803089a:	6019      	strpl	r1, [r3, #0]
 803089c:	6816      	ldrpl	r6, [r2, #0]
 803089e:	2700      	movs	r7, #0
 80308a0:	69a0      	ldr	r0, [r4, #24]
 80308a2:	b188      	cbz	r0, 80308c8 <_scanf_chars+0x58>
 80308a4:	2801      	cmp	r0, #1
 80308a6:	d107      	bne.n	80308b8 <_scanf_chars+0x48>
 80308a8:	682a      	ldr	r2, [r5, #0]
 80308aa:	7811      	ldrb	r1, [r2, #0]
 80308ac:	6962      	ldr	r2, [r4, #20]
 80308ae:	5c52      	ldrb	r2, [r2, r1]
 80308b0:	b952      	cbnz	r2, 80308c8 <_scanf_chars+0x58>
 80308b2:	2f00      	cmp	r7, #0
 80308b4:	d031      	beq.n	803091a <_scanf_chars+0xaa>
 80308b6:	e022      	b.n	80308fe <_scanf_chars+0x8e>
 80308b8:	2802      	cmp	r0, #2
 80308ba:	d120      	bne.n	80308fe <_scanf_chars+0x8e>
 80308bc:	682b      	ldr	r3, [r5, #0]
 80308be:	781b      	ldrb	r3, [r3, #0]
 80308c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80308c4:	071b      	lsls	r3, r3, #28
 80308c6:	d41a      	bmi.n	80308fe <_scanf_chars+0x8e>
 80308c8:	6823      	ldr	r3, [r4, #0]
 80308ca:	06da      	lsls	r2, r3, #27
 80308cc:	bf5e      	ittt	pl
 80308ce:	682b      	ldrpl	r3, [r5, #0]
 80308d0:	781b      	ldrbpl	r3, [r3, #0]
 80308d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80308d6:	682a      	ldr	r2, [r5, #0]
 80308d8:	686b      	ldr	r3, [r5, #4]
 80308da:	3201      	adds	r2, #1
 80308dc:	602a      	str	r2, [r5, #0]
 80308de:	68a2      	ldr	r2, [r4, #8]
 80308e0:	3b01      	subs	r3, #1
 80308e2:	3a01      	subs	r2, #1
 80308e4:	606b      	str	r3, [r5, #4]
 80308e6:	3701      	adds	r7, #1
 80308e8:	60a2      	str	r2, [r4, #8]
 80308ea:	b142      	cbz	r2, 80308fe <_scanf_chars+0x8e>
 80308ec:	2b00      	cmp	r3, #0
 80308ee:	dcd7      	bgt.n	80308a0 <_scanf_chars+0x30>
 80308f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80308f4:	4629      	mov	r1, r5
 80308f6:	4640      	mov	r0, r8
 80308f8:	4798      	blx	r3
 80308fa:	2800      	cmp	r0, #0
 80308fc:	d0d0      	beq.n	80308a0 <_scanf_chars+0x30>
 80308fe:	6823      	ldr	r3, [r4, #0]
 8030900:	f013 0310 	ands.w	r3, r3, #16
 8030904:	d105      	bne.n	8030912 <_scanf_chars+0xa2>
 8030906:	68e2      	ldr	r2, [r4, #12]
 8030908:	3201      	adds	r2, #1
 803090a:	60e2      	str	r2, [r4, #12]
 803090c:	69a2      	ldr	r2, [r4, #24]
 803090e:	b102      	cbz	r2, 8030912 <_scanf_chars+0xa2>
 8030910:	7033      	strb	r3, [r6, #0]
 8030912:	6923      	ldr	r3, [r4, #16]
 8030914:	443b      	add	r3, r7
 8030916:	6123      	str	r3, [r4, #16]
 8030918:	2000      	movs	r0, #0
 803091a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803091e:	bf00      	nop
 8030920:	08034c19 	.word	0x08034c19

08030924 <_scanf_i>:
 8030924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030928:	4698      	mov	r8, r3
 803092a:	4b74      	ldr	r3, [pc, #464]	; (8030afc <_scanf_i+0x1d8>)
 803092c:	460c      	mov	r4, r1
 803092e:	4682      	mov	sl, r0
 8030930:	4616      	mov	r6, r2
 8030932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030936:	b087      	sub	sp, #28
 8030938:	ab03      	add	r3, sp, #12
 803093a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 803093e:	4b70      	ldr	r3, [pc, #448]	; (8030b00 <_scanf_i+0x1dc>)
 8030940:	69a1      	ldr	r1, [r4, #24]
 8030942:	4a70      	ldr	r2, [pc, #448]	; (8030b04 <_scanf_i+0x1e0>)
 8030944:	2903      	cmp	r1, #3
 8030946:	bf18      	it	ne
 8030948:	461a      	movne	r2, r3
 803094a:	68a3      	ldr	r3, [r4, #8]
 803094c:	9201      	str	r2, [sp, #4]
 803094e:	1e5a      	subs	r2, r3, #1
 8030950:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8030954:	bf88      	it	hi
 8030956:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 803095a:	4627      	mov	r7, r4
 803095c:	bf82      	ittt	hi
 803095e:	eb03 0905 	addhi.w	r9, r3, r5
 8030962:	f240 135d 	movwhi	r3, #349	; 0x15d
 8030966:	60a3      	strhi	r3, [r4, #8]
 8030968:	f857 3b1c 	ldr.w	r3, [r7], #28
 803096c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8030970:	bf98      	it	ls
 8030972:	f04f 0900 	movls.w	r9, #0
 8030976:	6023      	str	r3, [r4, #0]
 8030978:	463d      	mov	r5, r7
 803097a:	f04f 0b00 	mov.w	fp, #0
 803097e:	6831      	ldr	r1, [r6, #0]
 8030980:	ab03      	add	r3, sp, #12
 8030982:	7809      	ldrb	r1, [r1, #0]
 8030984:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8030988:	2202      	movs	r2, #2
 803098a:	f7df fc39 	bl	8010200 <memchr>
 803098e:	b328      	cbz	r0, 80309dc <_scanf_i+0xb8>
 8030990:	f1bb 0f01 	cmp.w	fp, #1
 8030994:	d159      	bne.n	8030a4a <_scanf_i+0x126>
 8030996:	6862      	ldr	r2, [r4, #4]
 8030998:	b92a      	cbnz	r2, 80309a6 <_scanf_i+0x82>
 803099a:	6822      	ldr	r2, [r4, #0]
 803099c:	2308      	movs	r3, #8
 803099e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80309a2:	6063      	str	r3, [r4, #4]
 80309a4:	6022      	str	r2, [r4, #0]
 80309a6:	6822      	ldr	r2, [r4, #0]
 80309a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80309ac:	6022      	str	r2, [r4, #0]
 80309ae:	68a2      	ldr	r2, [r4, #8]
 80309b0:	1e51      	subs	r1, r2, #1
 80309b2:	60a1      	str	r1, [r4, #8]
 80309b4:	b192      	cbz	r2, 80309dc <_scanf_i+0xb8>
 80309b6:	6832      	ldr	r2, [r6, #0]
 80309b8:	1c51      	adds	r1, r2, #1
 80309ba:	6031      	str	r1, [r6, #0]
 80309bc:	7812      	ldrb	r2, [r2, #0]
 80309be:	f805 2b01 	strb.w	r2, [r5], #1
 80309c2:	6872      	ldr	r2, [r6, #4]
 80309c4:	3a01      	subs	r2, #1
 80309c6:	2a00      	cmp	r2, #0
 80309c8:	6072      	str	r2, [r6, #4]
 80309ca:	dc07      	bgt.n	80309dc <_scanf_i+0xb8>
 80309cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80309d0:	4631      	mov	r1, r6
 80309d2:	4650      	mov	r0, sl
 80309d4:	4790      	blx	r2
 80309d6:	2800      	cmp	r0, #0
 80309d8:	f040 8085 	bne.w	8030ae6 <_scanf_i+0x1c2>
 80309dc:	f10b 0b01 	add.w	fp, fp, #1
 80309e0:	f1bb 0f03 	cmp.w	fp, #3
 80309e4:	d1cb      	bne.n	803097e <_scanf_i+0x5a>
 80309e6:	6863      	ldr	r3, [r4, #4]
 80309e8:	b90b      	cbnz	r3, 80309ee <_scanf_i+0xca>
 80309ea:	230a      	movs	r3, #10
 80309ec:	6063      	str	r3, [r4, #4]
 80309ee:	6863      	ldr	r3, [r4, #4]
 80309f0:	4945      	ldr	r1, [pc, #276]	; (8030b08 <_scanf_i+0x1e4>)
 80309f2:	6960      	ldr	r0, [r4, #20]
 80309f4:	1ac9      	subs	r1, r1, r3
 80309f6:	f000 f999 	bl	8030d2c <__sccl>
 80309fa:	f04f 0b00 	mov.w	fp, #0
 80309fe:	68a3      	ldr	r3, [r4, #8]
 8030a00:	6822      	ldr	r2, [r4, #0]
 8030a02:	2b00      	cmp	r3, #0
 8030a04:	d03d      	beq.n	8030a82 <_scanf_i+0x15e>
 8030a06:	6831      	ldr	r1, [r6, #0]
 8030a08:	6960      	ldr	r0, [r4, #20]
 8030a0a:	f891 c000 	ldrb.w	ip, [r1]
 8030a0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8030a12:	2800      	cmp	r0, #0
 8030a14:	d035      	beq.n	8030a82 <_scanf_i+0x15e>
 8030a16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8030a1a:	d124      	bne.n	8030a66 <_scanf_i+0x142>
 8030a1c:	0510      	lsls	r0, r2, #20
 8030a1e:	d522      	bpl.n	8030a66 <_scanf_i+0x142>
 8030a20:	f10b 0b01 	add.w	fp, fp, #1
 8030a24:	f1b9 0f00 	cmp.w	r9, #0
 8030a28:	d003      	beq.n	8030a32 <_scanf_i+0x10e>
 8030a2a:	3301      	adds	r3, #1
 8030a2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8030a30:	60a3      	str	r3, [r4, #8]
 8030a32:	6873      	ldr	r3, [r6, #4]
 8030a34:	3b01      	subs	r3, #1
 8030a36:	2b00      	cmp	r3, #0
 8030a38:	6073      	str	r3, [r6, #4]
 8030a3a:	dd1b      	ble.n	8030a74 <_scanf_i+0x150>
 8030a3c:	6833      	ldr	r3, [r6, #0]
 8030a3e:	3301      	adds	r3, #1
 8030a40:	6033      	str	r3, [r6, #0]
 8030a42:	68a3      	ldr	r3, [r4, #8]
 8030a44:	3b01      	subs	r3, #1
 8030a46:	60a3      	str	r3, [r4, #8]
 8030a48:	e7d9      	b.n	80309fe <_scanf_i+0xda>
 8030a4a:	f1bb 0f02 	cmp.w	fp, #2
 8030a4e:	d1ae      	bne.n	80309ae <_scanf_i+0x8a>
 8030a50:	6822      	ldr	r2, [r4, #0]
 8030a52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8030a56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8030a5a:	d1bf      	bne.n	80309dc <_scanf_i+0xb8>
 8030a5c:	2310      	movs	r3, #16
 8030a5e:	6063      	str	r3, [r4, #4]
 8030a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030a64:	e7a2      	b.n	80309ac <_scanf_i+0x88>
 8030a66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8030a6a:	6022      	str	r2, [r4, #0]
 8030a6c:	780b      	ldrb	r3, [r1, #0]
 8030a6e:	f805 3b01 	strb.w	r3, [r5], #1
 8030a72:	e7de      	b.n	8030a32 <_scanf_i+0x10e>
 8030a74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030a78:	4631      	mov	r1, r6
 8030a7a:	4650      	mov	r0, sl
 8030a7c:	4798      	blx	r3
 8030a7e:	2800      	cmp	r0, #0
 8030a80:	d0df      	beq.n	8030a42 <_scanf_i+0x11e>
 8030a82:	6823      	ldr	r3, [r4, #0]
 8030a84:	05d9      	lsls	r1, r3, #23
 8030a86:	d50d      	bpl.n	8030aa4 <_scanf_i+0x180>
 8030a88:	42bd      	cmp	r5, r7
 8030a8a:	d909      	bls.n	8030aa0 <_scanf_i+0x17c>
 8030a8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8030a90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8030a94:	4632      	mov	r2, r6
 8030a96:	4650      	mov	r0, sl
 8030a98:	4798      	blx	r3
 8030a9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8030a9e:	464d      	mov	r5, r9
 8030aa0:	42bd      	cmp	r5, r7
 8030aa2:	d028      	beq.n	8030af6 <_scanf_i+0x1d2>
 8030aa4:	6822      	ldr	r2, [r4, #0]
 8030aa6:	f012 0210 	ands.w	r2, r2, #16
 8030aaa:	d113      	bne.n	8030ad4 <_scanf_i+0x1b0>
 8030aac:	702a      	strb	r2, [r5, #0]
 8030aae:	6863      	ldr	r3, [r4, #4]
 8030ab0:	9e01      	ldr	r6, [sp, #4]
 8030ab2:	4639      	mov	r1, r7
 8030ab4:	4650      	mov	r0, sl
 8030ab6:	47b0      	blx	r6
 8030ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8030abc:	6821      	ldr	r1, [r4, #0]
 8030abe:	1d1a      	adds	r2, r3, #4
 8030ac0:	f8c8 2000 	str.w	r2, [r8]
 8030ac4:	f011 0f20 	tst.w	r1, #32
 8030ac8:	681b      	ldr	r3, [r3, #0]
 8030aca:	d00f      	beq.n	8030aec <_scanf_i+0x1c8>
 8030acc:	6018      	str	r0, [r3, #0]
 8030ace:	68e3      	ldr	r3, [r4, #12]
 8030ad0:	3301      	adds	r3, #1
 8030ad2:	60e3      	str	r3, [r4, #12]
 8030ad4:	6923      	ldr	r3, [r4, #16]
 8030ad6:	1bed      	subs	r5, r5, r7
 8030ad8:	445d      	add	r5, fp
 8030ada:	442b      	add	r3, r5
 8030adc:	6123      	str	r3, [r4, #16]
 8030ade:	2000      	movs	r0, #0
 8030ae0:	b007      	add	sp, #28
 8030ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030ae6:	f04f 0b00 	mov.w	fp, #0
 8030aea:	e7ca      	b.n	8030a82 <_scanf_i+0x15e>
 8030aec:	07ca      	lsls	r2, r1, #31
 8030aee:	bf4c      	ite	mi
 8030af0:	8018      	strhmi	r0, [r3, #0]
 8030af2:	6018      	strpl	r0, [r3, #0]
 8030af4:	e7eb      	b.n	8030ace <_scanf_i+0x1aa>
 8030af6:	2001      	movs	r0, #1
 8030af8:	e7f2      	b.n	8030ae0 <_scanf_i+0x1bc>
 8030afa:	bf00      	nop
 8030afc:	08033dc0 	.word	0x08033dc0
 8030b00:	08031705 	.word	0x08031705
 8030b04:	0802ff91 	.word	0x0802ff91
 8030b08:	08034d3a 	.word	0x08034d3a

08030b0c <__sflush_r>:
 8030b0c:	898a      	ldrh	r2, [r1, #12]
 8030b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030b12:	4605      	mov	r5, r0
 8030b14:	0710      	lsls	r0, r2, #28
 8030b16:	460c      	mov	r4, r1
 8030b18:	d458      	bmi.n	8030bcc <__sflush_r+0xc0>
 8030b1a:	684b      	ldr	r3, [r1, #4]
 8030b1c:	2b00      	cmp	r3, #0
 8030b1e:	dc05      	bgt.n	8030b2c <__sflush_r+0x20>
 8030b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030b22:	2b00      	cmp	r3, #0
 8030b24:	dc02      	bgt.n	8030b2c <__sflush_r+0x20>
 8030b26:	2000      	movs	r0, #0
 8030b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030b2e:	2e00      	cmp	r6, #0
 8030b30:	d0f9      	beq.n	8030b26 <__sflush_r+0x1a>
 8030b32:	2300      	movs	r3, #0
 8030b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030b38:	682f      	ldr	r7, [r5, #0]
 8030b3a:	6a21      	ldr	r1, [r4, #32]
 8030b3c:	602b      	str	r3, [r5, #0]
 8030b3e:	d032      	beq.n	8030ba6 <__sflush_r+0x9a>
 8030b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030b42:	89a3      	ldrh	r3, [r4, #12]
 8030b44:	075a      	lsls	r2, r3, #29
 8030b46:	d505      	bpl.n	8030b54 <__sflush_r+0x48>
 8030b48:	6863      	ldr	r3, [r4, #4]
 8030b4a:	1ac0      	subs	r0, r0, r3
 8030b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030b4e:	b10b      	cbz	r3, 8030b54 <__sflush_r+0x48>
 8030b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030b52:	1ac0      	subs	r0, r0, r3
 8030b54:	2300      	movs	r3, #0
 8030b56:	4602      	mov	r2, r0
 8030b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030b5a:	6a21      	ldr	r1, [r4, #32]
 8030b5c:	4628      	mov	r0, r5
 8030b5e:	47b0      	blx	r6
 8030b60:	1c43      	adds	r3, r0, #1
 8030b62:	89a3      	ldrh	r3, [r4, #12]
 8030b64:	d106      	bne.n	8030b74 <__sflush_r+0x68>
 8030b66:	6829      	ldr	r1, [r5, #0]
 8030b68:	291d      	cmp	r1, #29
 8030b6a:	d82b      	bhi.n	8030bc4 <__sflush_r+0xb8>
 8030b6c:	4a29      	ldr	r2, [pc, #164]	; (8030c14 <__sflush_r+0x108>)
 8030b6e:	410a      	asrs	r2, r1
 8030b70:	07d6      	lsls	r6, r2, #31
 8030b72:	d427      	bmi.n	8030bc4 <__sflush_r+0xb8>
 8030b74:	2200      	movs	r2, #0
 8030b76:	6062      	str	r2, [r4, #4]
 8030b78:	04d9      	lsls	r1, r3, #19
 8030b7a:	6922      	ldr	r2, [r4, #16]
 8030b7c:	6022      	str	r2, [r4, #0]
 8030b7e:	d504      	bpl.n	8030b8a <__sflush_r+0x7e>
 8030b80:	1c42      	adds	r2, r0, #1
 8030b82:	d101      	bne.n	8030b88 <__sflush_r+0x7c>
 8030b84:	682b      	ldr	r3, [r5, #0]
 8030b86:	b903      	cbnz	r3, 8030b8a <__sflush_r+0x7e>
 8030b88:	6560      	str	r0, [r4, #84]	; 0x54
 8030b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030b8c:	602f      	str	r7, [r5, #0]
 8030b8e:	2900      	cmp	r1, #0
 8030b90:	d0c9      	beq.n	8030b26 <__sflush_r+0x1a>
 8030b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030b96:	4299      	cmp	r1, r3
 8030b98:	d002      	beq.n	8030ba0 <__sflush_r+0x94>
 8030b9a:	4628      	mov	r0, r5
 8030b9c:	f7fd fe6a 	bl	802e874 <_free_r>
 8030ba0:	2000      	movs	r0, #0
 8030ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8030ba4:	e7c0      	b.n	8030b28 <__sflush_r+0x1c>
 8030ba6:	2301      	movs	r3, #1
 8030ba8:	4628      	mov	r0, r5
 8030baa:	47b0      	blx	r6
 8030bac:	1c41      	adds	r1, r0, #1
 8030bae:	d1c8      	bne.n	8030b42 <__sflush_r+0x36>
 8030bb0:	682b      	ldr	r3, [r5, #0]
 8030bb2:	2b00      	cmp	r3, #0
 8030bb4:	d0c5      	beq.n	8030b42 <__sflush_r+0x36>
 8030bb6:	2b1d      	cmp	r3, #29
 8030bb8:	d001      	beq.n	8030bbe <__sflush_r+0xb2>
 8030bba:	2b16      	cmp	r3, #22
 8030bbc:	d101      	bne.n	8030bc2 <__sflush_r+0xb6>
 8030bbe:	602f      	str	r7, [r5, #0]
 8030bc0:	e7b1      	b.n	8030b26 <__sflush_r+0x1a>
 8030bc2:	89a3      	ldrh	r3, [r4, #12]
 8030bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030bc8:	81a3      	strh	r3, [r4, #12]
 8030bca:	e7ad      	b.n	8030b28 <__sflush_r+0x1c>
 8030bcc:	690f      	ldr	r7, [r1, #16]
 8030bce:	2f00      	cmp	r7, #0
 8030bd0:	d0a9      	beq.n	8030b26 <__sflush_r+0x1a>
 8030bd2:	0793      	lsls	r3, r2, #30
 8030bd4:	680e      	ldr	r6, [r1, #0]
 8030bd6:	bf08      	it	eq
 8030bd8:	694b      	ldreq	r3, [r1, #20]
 8030bda:	600f      	str	r7, [r1, #0]
 8030bdc:	bf18      	it	ne
 8030bde:	2300      	movne	r3, #0
 8030be0:	eba6 0807 	sub.w	r8, r6, r7
 8030be4:	608b      	str	r3, [r1, #8]
 8030be6:	f1b8 0f00 	cmp.w	r8, #0
 8030bea:	dd9c      	ble.n	8030b26 <__sflush_r+0x1a>
 8030bec:	6a21      	ldr	r1, [r4, #32]
 8030bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030bf0:	4643      	mov	r3, r8
 8030bf2:	463a      	mov	r2, r7
 8030bf4:	4628      	mov	r0, r5
 8030bf6:	47b0      	blx	r6
 8030bf8:	2800      	cmp	r0, #0
 8030bfa:	dc06      	bgt.n	8030c0a <__sflush_r+0xfe>
 8030bfc:	89a3      	ldrh	r3, [r4, #12]
 8030bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030c02:	81a3      	strh	r3, [r4, #12]
 8030c04:	f04f 30ff 	mov.w	r0, #4294967295
 8030c08:	e78e      	b.n	8030b28 <__sflush_r+0x1c>
 8030c0a:	4407      	add	r7, r0
 8030c0c:	eba8 0800 	sub.w	r8, r8, r0
 8030c10:	e7e9      	b.n	8030be6 <__sflush_r+0xda>
 8030c12:	bf00      	nop
 8030c14:	dfbffffe 	.word	0xdfbffffe

08030c18 <_fflush_r>:
 8030c18:	b538      	push	{r3, r4, r5, lr}
 8030c1a:	690b      	ldr	r3, [r1, #16]
 8030c1c:	4605      	mov	r5, r0
 8030c1e:	460c      	mov	r4, r1
 8030c20:	b913      	cbnz	r3, 8030c28 <_fflush_r+0x10>
 8030c22:	2500      	movs	r5, #0
 8030c24:	4628      	mov	r0, r5
 8030c26:	bd38      	pop	{r3, r4, r5, pc}
 8030c28:	b118      	cbz	r0, 8030c32 <_fflush_r+0x1a>
 8030c2a:	6a03      	ldr	r3, [r0, #32]
 8030c2c:	b90b      	cbnz	r3, 8030c32 <_fflush_r+0x1a>
 8030c2e:	f7fc fbd7 	bl	802d3e0 <__sinit>
 8030c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030c36:	2b00      	cmp	r3, #0
 8030c38:	d0f3      	beq.n	8030c22 <_fflush_r+0xa>
 8030c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030c3c:	07d0      	lsls	r0, r2, #31
 8030c3e:	d404      	bmi.n	8030c4a <_fflush_r+0x32>
 8030c40:	0599      	lsls	r1, r3, #22
 8030c42:	d402      	bmi.n	8030c4a <_fflush_r+0x32>
 8030c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030c46:	f7fc ff74 	bl	802db32 <__retarget_lock_acquire_recursive>
 8030c4a:	4628      	mov	r0, r5
 8030c4c:	4621      	mov	r1, r4
 8030c4e:	f7ff ff5d 	bl	8030b0c <__sflush_r>
 8030c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030c54:	07da      	lsls	r2, r3, #31
 8030c56:	4605      	mov	r5, r0
 8030c58:	d4e4      	bmi.n	8030c24 <_fflush_r+0xc>
 8030c5a:	89a3      	ldrh	r3, [r4, #12]
 8030c5c:	059b      	lsls	r3, r3, #22
 8030c5e:	d4e1      	bmi.n	8030c24 <_fflush_r+0xc>
 8030c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030c62:	f7fc ff67 	bl	802db34 <__retarget_lock_release_recursive>
 8030c66:	e7dd      	b.n	8030c24 <_fflush_r+0xc>

08030c68 <__swhatbuf_r>:
 8030c68:	b570      	push	{r4, r5, r6, lr}
 8030c6a:	460c      	mov	r4, r1
 8030c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030c70:	2900      	cmp	r1, #0
 8030c72:	b096      	sub	sp, #88	; 0x58
 8030c74:	4615      	mov	r5, r2
 8030c76:	461e      	mov	r6, r3
 8030c78:	da0d      	bge.n	8030c96 <__swhatbuf_r+0x2e>
 8030c7a:	89a3      	ldrh	r3, [r4, #12]
 8030c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030c80:	f04f 0100 	mov.w	r1, #0
 8030c84:	bf0c      	ite	eq
 8030c86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8030c8a:	2340      	movne	r3, #64	; 0x40
 8030c8c:	2000      	movs	r0, #0
 8030c8e:	6031      	str	r1, [r6, #0]
 8030c90:	602b      	str	r3, [r5, #0]
 8030c92:	b016      	add	sp, #88	; 0x58
 8030c94:	bd70      	pop	{r4, r5, r6, pc}
 8030c96:	466a      	mov	r2, sp
 8030c98:	f000 f8ec 	bl	8030e74 <_fstat_r>
 8030c9c:	2800      	cmp	r0, #0
 8030c9e:	dbec      	blt.n	8030c7a <__swhatbuf_r+0x12>
 8030ca0:	9901      	ldr	r1, [sp, #4]
 8030ca2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8030ca6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8030caa:	4259      	negs	r1, r3
 8030cac:	4159      	adcs	r1, r3
 8030cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030cb2:	e7eb      	b.n	8030c8c <__swhatbuf_r+0x24>

08030cb4 <__smakebuf_r>:
 8030cb4:	898b      	ldrh	r3, [r1, #12]
 8030cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030cb8:	079d      	lsls	r5, r3, #30
 8030cba:	4606      	mov	r6, r0
 8030cbc:	460c      	mov	r4, r1
 8030cbe:	d507      	bpl.n	8030cd0 <__smakebuf_r+0x1c>
 8030cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8030cc4:	6023      	str	r3, [r4, #0]
 8030cc6:	6123      	str	r3, [r4, #16]
 8030cc8:	2301      	movs	r3, #1
 8030cca:	6163      	str	r3, [r4, #20]
 8030ccc:	b002      	add	sp, #8
 8030cce:	bd70      	pop	{r4, r5, r6, pc}
 8030cd0:	ab01      	add	r3, sp, #4
 8030cd2:	466a      	mov	r2, sp
 8030cd4:	f7ff ffc8 	bl	8030c68 <__swhatbuf_r>
 8030cd8:	9900      	ldr	r1, [sp, #0]
 8030cda:	4605      	mov	r5, r0
 8030cdc:	4630      	mov	r0, r6
 8030cde:	f7fb fbf1 	bl	802c4c4 <_malloc_r>
 8030ce2:	b948      	cbnz	r0, 8030cf8 <__smakebuf_r+0x44>
 8030ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030ce8:	059a      	lsls	r2, r3, #22
 8030cea:	d4ef      	bmi.n	8030ccc <__smakebuf_r+0x18>
 8030cec:	f023 0303 	bic.w	r3, r3, #3
 8030cf0:	f043 0302 	orr.w	r3, r3, #2
 8030cf4:	81a3      	strh	r3, [r4, #12]
 8030cf6:	e7e3      	b.n	8030cc0 <__smakebuf_r+0xc>
 8030cf8:	89a3      	ldrh	r3, [r4, #12]
 8030cfa:	6020      	str	r0, [r4, #0]
 8030cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030d00:	81a3      	strh	r3, [r4, #12]
 8030d02:	9b00      	ldr	r3, [sp, #0]
 8030d04:	6163      	str	r3, [r4, #20]
 8030d06:	9b01      	ldr	r3, [sp, #4]
 8030d08:	6120      	str	r0, [r4, #16]
 8030d0a:	b15b      	cbz	r3, 8030d24 <__smakebuf_r+0x70>
 8030d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030d10:	4630      	mov	r0, r6
 8030d12:	f000 f8c1 	bl	8030e98 <_isatty_r>
 8030d16:	b128      	cbz	r0, 8030d24 <__smakebuf_r+0x70>
 8030d18:	89a3      	ldrh	r3, [r4, #12]
 8030d1a:	f023 0303 	bic.w	r3, r3, #3
 8030d1e:	f043 0301 	orr.w	r3, r3, #1
 8030d22:	81a3      	strh	r3, [r4, #12]
 8030d24:	89a3      	ldrh	r3, [r4, #12]
 8030d26:	431d      	orrs	r5, r3
 8030d28:	81a5      	strh	r5, [r4, #12]
 8030d2a:	e7cf      	b.n	8030ccc <__smakebuf_r+0x18>

08030d2c <__sccl>:
 8030d2c:	b570      	push	{r4, r5, r6, lr}
 8030d2e:	780b      	ldrb	r3, [r1, #0]
 8030d30:	4604      	mov	r4, r0
 8030d32:	2b5e      	cmp	r3, #94	; 0x5e
 8030d34:	bf0b      	itete	eq
 8030d36:	784b      	ldrbeq	r3, [r1, #1]
 8030d38:	1c4a      	addne	r2, r1, #1
 8030d3a:	1c8a      	addeq	r2, r1, #2
 8030d3c:	2100      	movne	r1, #0
 8030d3e:	bf08      	it	eq
 8030d40:	2101      	moveq	r1, #1
 8030d42:	3801      	subs	r0, #1
 8030d44:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8030d48:	f800 1f01 	strb.w	r1, [r0, #1]!
 8030d4c:	42a8      	cmp	r0, r5
 8030d4e:	d1fb      	bne.n	8030d48 <__sccl+0x1c>
 8030d50:	b90b      	cbnz	r3, 8030d56 <__sccl+0x2a>
 8030d52:	1e50      	subs	r0, r2, #1
 8030d54:	bd70      	pop	{r4, r5, r6, pc}
 8030d56:	f081 0101 	eor.w	r1, r1, #1
 8030d5a:	54e1      	strb	r1, [r4, r3]
 8030d5c:	4610      	mov	r0, r2
 8030d5e:	4602      	mov	r2, r0
 8030d60:	f812 5b01 	ldrb.w	r5, [r2], #1
 8030d64:	2d2d      	cmp	r5, #45	; 0x2d
 8030d66:	d005      	beq.n	8030d74 <__sccl+0x48>
 8030d68:	2d5d      	cmp	r5, #93	; 0x5d
 8030d6a:	d016      	beq.n	8030d9a <__sccl+0x6e>
 8030d6c:	2d00      	cmp	r5, #0
 8030d6e:	d0f1      	beq.n	8030d54 <__sccl+0x28>
 8030d70:	462b      	mov	r3, r5
 8030d72:	e7f2      	b.n	8030d5a <__sccl+0x2e>
 8030d74:	7846      	ldrb	r6, [r0, #1]
 8030d76:	2e5d      	cmp	r6, #93	; 0x5d
 8030d78:	d0fa      	beq.n	8030d70 <__sccl+0x44>
 8030d7a:	42b3      	cmp	r3, r6
 8030d7c:	dcf8      	bgt.n	8030d70 <__sccl+0x44>
 8030d7e:	3002      	adds	r0, #2
 8030d80:	461a      	mov	r2, r3
 8030d82:	3201      	adds	r2, #1
 8030d84:	4296      	cmp	r6, r2
 8030d86:	54a1      	strb	r1, [r4, r2]
 8030d88:	dcfb      	bgt.n	8030d82 <__sccl+0x56>
 8030d8a:	1af2      	subs	r2, r6, r3
 8030d8c:	3a01      	subs	r2, #1
 8030d8e:	1c5d      	adds	r5, r3, #1
 8030d90:	42b3      	cmp	r3, r6
 8030d92:	bfa8      	it	ge
 8030d94:	2200      	movge	r2, #0
 8030d96:	18ab      	adds	r3, r5, r2
 8030d98:	e7e1      	b.n	8030d5e <__sccl+0x32>
 8030d9a:	4610      	mov	r0, r2
 8030d9c:	e7da      	b.n	8030d54 <__sccl+0x28>

08030d9e <__submore>:
 8030d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030da2:	460c      	mov	r4, r1
 8030da4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030da6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030daa:	4299      	cmp	r1, r3
 8030dac:	d11d      	bne.n	8030dea <__submore+0x4c>
 8030dae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8030db2:	f7fb fb87 	bl	802c4c4 <_malloc_r>
 8030db6:	b918      	cbnz	r0, 8030dc0 <__submore+0x22>
 8030db8:	f04f 30ff 	mov.w	r0, #4294967295
 8030dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030dc4:	63a3      	str	r3, [r4, #56]	; 0x38
 8030dc6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8030dca:	6360      	str	r0, [r4, #52]	; 0x34
 8030dcc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8030dd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8030dd4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8030dd8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8030ddc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8030de0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8030de4:	6020      	str	r0, [r4, #0]
 8030de6:	2000      	movs	r0, #0
 8030de8:	e7e8      	b.n	8030dbc <__submore+0x1e>
 8030dea:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8030dec:	0077      	lsls	r7, r6, #1
 8030dee:	463a      	mov	r2, r7
 8030df0:	f000 fbe7 	bl	80315c2 <_realloc_r>
 8030df4:	4605      	mov	r5, r0
 8030df6:	2800      	cmp	r0, #0
 8030df8:	d0de      	beq.n	8030db8 <__submore+0x1a>
 8030dfa:	eb00 0806 	add.w	r8, r0, r6
 8030dfe:	4601      	mov	r1, r0
 8030e00:	4632      	mov	r2, r6
 8030e02:	4640      	mov	r0, r8
 8030e04:	f7fc fe9f 	bl	802db46 <memcpy>
 8030e08:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8030e0c:	f8c4 8000 	str.w	r8, [r4]
 8030e10:	e7e9      	b.n	8030de6 <__submore+0x48>

08030e12 <_raise_r>:
 8030e12:	291f      	cmp	r1, #31
 8030e14:	b538      	push	{r3, r4, r5, lr}
 8030e16:	4604      	mov	r4, r0
 8030e18:	460d      	mov	r5, r1
 8030e1a:	d904      	bls.n	8030e26 <_raise_r+0x14>
 8030e1c:	2316      	movs	r3, #22
 8030e1e:	6003      	str	r3, [r0, #0]
 8030e20:	f04f 30ff 	mov.w	r0, #4294967295
 8030e24:	bd38      	pop	{r3, r4, r5, pc}
 8030e26:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8030e28:	b112      	cbz	r2, 8030e30 <_raise_r+0x1e>
 8030e2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8030e2e:	b94b      	cbnz	r3, 8030e44 <_raise_r+0x32>
 8030e30:	4620      	mov	r0, r4
 8030e32:	f000 f853 	bl	8030edc <_getpid_r>
 8030e36:	462a      	mov	r2, r5
 8030e38:	4601      	mov	r1, r0
 8030e3a:	4620      	mov	r0, r4
 8030e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8030e40:	f000 b83a 	b.w	8030eb8 <_kill_r>
 8030e44:	2b01      	cmp	r3, #1
 8030e46:	d00a      	beq.n	8030e5e <_raise_r+0x4c>
 8030e48:	1c59      	adds	r1, r3, #1
 8030e4a:	d103      	bne.n	8030e54 <_raise_r+0x42>
 8030e4c:	2316      	movs	r3, #22
 8030e4e:	6003      	str	r3, [r0, #0]
 8030e50:	2001      	movs	r0, #1
 8030e52:	e7e7      	b.n	8030e24 <_raise_r+0x12>
 8030e54:	2400      	movs	r4, #0
 8030e56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8030e5a:	4628      	mov	r0, r5
 8030e5c:	4798      	blx	r3
 8030e5e:	2000      	movs	r0, #0
 8030e60:	e7e0      	b.n	8030e24 <_raise_r+0x12>
	...

08030e64 <raise>:
 8030e64:	4b02      	ldr	r3, [pc, #8]	; (8030e70 <raise+0xc>)
 8030e66:	4601      	mov	r1, r0
 8030e68:	6818      	ldr	r0, [r3, #0]
 8030e6a:	f7ff bfd2 	b.w	8030e12 <_raise_r>
 8030e6e:	bf00      	nop
 8030e70:	20000188 	.word	0x20000188

08030e74 <_fstat_r>:
 8030e74:	b538      	push	{r3, r4, r5, lr}
 8030e76:	4d07      	ldr	r5, [pc, #28]	; (8030e94 <_fstat_r+0x20>)
 8030e78:	2300      	movs	r3, #0
 8030e7a:	4604      	mov	r4, r0
 8030e7c:	4608      	mov	r0, r1
 8030e7e:	4611      	mov	r1, r2
 8030e80:	602b      	str	r3, [r5, #0]
 8030e82:	f7e1 feea 	bl	8012c5a <_fstat>
 8030e86:	1c43      	adds	r3, r0, #1
 8030e88:	d102      	bne.n	8030e90 <_fstat_r+0x1c>
 8030e8a:	682b      	ldr	r3, [r5, #0]
 8030e8c:	b103      	cbz	r3, 8030e90 <_fstat_r+0x1c>
 8030e8e:	6023      	str	r3, [r4, #0]
 8030e90:	bd38      	pop	{r3, r4, r5, pc}
 8030e92:	bf00      	nop
 8030e94:	2000daec 	.word	0x2000daec

08030e98 <_isatty_r>:
 8030e98:	b538      	push	{r3, r4, r5, lr}
 8030e9a:	4d06      	ldr	r5, [pc, #24]	; (8030eb4 <_isatty_r+0x1c>)
 8030e9c:	2300      	movs	r3, #0
 8030e9e:	4604      	mov	r4, r0
 8030ea0:	4608      	mov	r0, r1
 8030ea2:	602b      	str	r3, [r5, #0]
 8030ea4:	f7e1 fee9 	bl	8012c7a <_isatty>
 8030ea8:	1c43      	adds	r3, r0, #1
 8030eaa:	d102      	bne.n	8030eb2 <_isatty_r+0x1a>
 8030eac:	682b      	ldr	r3, [r5, #0]
 8030eae:	b103      	cbz	r3, 8030eb2 <_isatty_r+0x1a>
 8030eb0:	6023      	str	r3, [r4, #0]
 8030eb2:	bd38      	pop	{r3, r4, r5, pc}
 8030eb4:	2000daec 	.word	0x2000daec

08030eb8 <_kill_r>:
 8030eb8:	b538      	push	{r3, r4, r5, lr}
 8030eba:	4d07      	ldr	r5, [pc, #28]	; (8030ed8 <_kill_r+0x20>)
 8030ebc:	2300      	movs	r3, #0
 8030ebe:	4604      	mov	r4, r0
 8030ec0:	4608      	mov	r0, r1
 8030ec2:	4611      	mov	r1, r2
 8030ec4:	602b      	str	r3, [r5, #0]
 8030ec6:	f7e1 fe69 	bl	8012b9c <_kill>
 8030eca:	1c43      	adds	r3, r0, #1
 8030ecc:	d102      	bne.n	8030ed4 <_kill_r+0x1c>
 8030ece:	682b      	ldr	r3, [r5, #0]
 8030ed0:	b103      	cbz	r3, 8030ed4 <_kill_r+0x1c>
 8030ed2:	6023      	str	r3, [r4, #0]
 8030ed4:	bd38      	pop	{r3, r4, r5, pc}
 8030ed6:	bf00      	nop
 8030ed8:	2000daec 	.word	0x2000daec

08030edc <_getpid_r>:
 8030edc:	f7e1 be56 	b.w	8012b8c <_getpid>

08030ee0 <nan>:
 8030ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8030ee8 <nan+0x8>
 8030ee4:	4770      	bx	lr
 8030ee6:	bf00      	nop
 8030ee8:	00000000 	.word	0x00000000
 8030eec:	7ff80000 	.word	0x7ff80000

08030ef0 <rshift>:
 8030ef0:	6903      	ldr	r3, [r0, #16]
 8030ef2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8030ef6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8030efa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8030efe:	f100 0414 	add.w	r4, r0, #20
 8030f02:	dd45      	ble.n	8030f90 <rshift+0xa0>
 8030f04:	f011 011f 	ands.w	r1, r1, #31
 8030f08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8030f0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8030f10:	d10c      	bne.n	8030f2c <rshift+0x3c>
 8030f12:	f100 0710 	add.w	r7, r0, #16
 8030f16:	4629      	mov	r1, r5
 8030f18:	42b1      	cmp	r1, r6
 8030f1a:	d334      	bcc.n	8030f86 <rshift+0x96>
 8030f1c:	1a9b      	subs	r3, r3, r2
 8030f1e:	009b      	lsls	r3, r3, #2
 8030f20:	1eea      	subs	r2, r5, #3
 8030f22:	4296      	cmp	r6, r2
 8030f24:	bf38      	it	cc
 8030f26:	2300      	movcc	r3, #0
 8030f28:	4423      	add	r3, r4
 8030f2a:	e015      	b.n	8030f58 <rshift+0x68>
 8030f2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8030f30:	f1c1 0820 	rsb	r8, r1, #32
 8030f34:	40cf      	lsrs	r7, r1
 8030f36:	f105 0e04 	add.w	lr, r5, #4
 8030f3a:	46a1      	mov	r9, r4
 8030f3c:	4576      	cmp	r6, lr
 8030f3e:	46f4      	mov	ip, lr
 8030f40:	d815      	bhi.n	8030f6e <rshift+0x7e>
 8030f42:	1a9a      	subs	r2, r3, r2
 8030f44:	0092      	lsls	r2, r2, #2
 8030f46:	3a04      	subs	r2, #4
 8030f48:	3501      	adds	r5, #1
 8030f4a:	42ae      	cmp	r6, r5
 8030f4c:	bf38      	it	cc
 8030f4e:	2200      	movcc	r2, #0
 8030f50:	18a3      	adds	r3, r4, r2
 8030f52:	50a7      	str	r7, [r4, r2]
 8030f54:	b107      	cbz	r7, 8030f58 <rshift+0x68>
 8030f56:	3304      	adds	r3, #4
 8030f58:	1b1a      	subs	r2, r3, r4
 8030f5a:	42a3      	cmp	r3, r4
 8030f5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8030f60:	bf08      	it	eq
 8030f62:	2300      	moveq	r3, #0
 8030f64:	6102      	str	r2, [r0, #16]
 8030f66:	bf08      	it	eq
 8030f68:	6143      	streq	r3, [r0, #20]
 8030f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8030f6e:	f8dc c000 	ldr.w	ip, [ip]
 8030f72:	fa0c fc08 	lsl.w	ip, ip, r8
 8030f76:	ea4c 0707 	orr.w	r7, ip, r7
 8030f7a:	f849 7b04 	str.w	r7, [r9], #4
 8030f7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8030f82:	40cf      	lsrs	r7, r1
 8030f84:	e7da      	b.n	8030f3c <rshift+0x4c>
 8030f86:	f851 cb04 	ldr.w	ip, [r1], #4
 8030f8a:	f847 cf04 	str.w	ip, [r7, #4]!
 8030f8e:	e7c3      	b.n	8030f18 <rshift+0x28>
 8030f90:	4623      	mov	r3, r4
 8030f92:	e7e1      	b.n	8030f58 <rshift+0x68>

08030f94 <__hexdig_fun>:
 8030f94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8030f98:	2b09      	cmp	r3, #9
 8030f9a:	d802      	bhi.n	8030fa2 <__hexdig_fun+0xe>
 8030f9c:	3820      	subs	r0, #32
 8030f9e:	b2c0      	uxtb	r0, r0
 8030fa0:	4770      	bx	lr
 8030fa2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8030fa6:	2b05      	cmp	r3, #5
 8030fa8:	d801      	bhi.n	8030fae <__hexdig_fun+0x1a>
 8030faa:	3847      	subs	r0, #71	; 0x47
 8030fac:	e7f7      	b.n	8030f9e <__hexdig_fun+0xa>
 8030fae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8030fb2:	2b05      	cmp	r3, #5
 8030fb4:	d801      	bhi.n	8030fba <__hexdig_fun+0x26>
 8030fb6:	3827      	subs	r0, #39	; 0x27
 8030fb8:	e7f1      	b.n	8030f9e <__hexdig_fun+0xa>
 8030fba:	2000      	movs	r0, #0
 8030fbc:	4770      	bx	lr
	...

08030fc0 <__gethex>:
 8030fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030fc4:	4617      	mov	r7, r2
 8030fc6:	680a      	ldr	r2, [r1, #0]
 8030fc8:	b085      	sub	sp, #20
 8030fca:	f102 0b02 	add.w	fp, r2, #2
 8030fce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8030fd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8030fd6:	4681      	mov	r9, r0
 8030fd8:	468a      	mov	sl, r1
 8030fda:	9302      	str	r3, [sp, #8]
 8030fdc:	32fe      	adds	r2, #254	; 0xfe
 8030fde:	eb02 030b 	add.w	r3, r2, fp
 8030fe2:	46d8      	mov	r8, fp
 8030fe4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8030fe8:	9301      	str	r3, [sp, #4]
 8030fea:	2830      	cmp	r0, #48	; 0x30
 8030fec:	d0f7      	beq.n	8030fde <__gethex+0x1e>
 8030fee:	f7ff ffd1 	bl	8030f94 <__hexdig_fun>
 8030ff2:	4604      	mov	r4, r0
 8030ff4:	2800      	cmp	r0, #0
 8030ff6:	d138      	bne.n	803106a <__gethex+0xaa>
 8030ff8:	49a7      	ldr	r1, [pc, #668]	; (8031298 <__gethex+0x2d8>)
 8030ffa:	2201      	movs	r2, #1
 8030ffc:	4640      	mov	r0, r8
 8030ffe:	f7fc fc15 	bl	802d82c <strncmp>
 8031002:	4606      	mov	r6, r0
 8031004:	2800      	cmp	r0, #0
 8031006:	d169      	bne.n	80310dc <__gethex+0x11c>
 8031008:	f898 0001 	ldrb.w	r0, [r8, #1]
 803100c:	465d      	mov	r5, fp
 803100e:	f7ff ffc1 	bl	8030f94 <__hexdig_fun>
 8031012:	2800      	cmp	r0, #0
 8031014:	d064      	beq.n	80310e0 <__gethex+0x120>
 8031016:	465a      	mov	r2, fp
 8031018:	7810      	ldrb	r0, [r2, #0]
 803101a:	2830      	cmp	r0, #48	; 0x30
 803101c:	4690      	mov	r8, r2
 803101e:	f102 0201 	add.w	r2, r2, #1
 8031022:	d0f9      	beq.n	8031018 <__gethex+0x58>
 8031024:	f7ff ffb6 	bl	8030f94 <__hexdig_fun>
 8031028:	2301      	movs	r3, #1
 803102a:	fab0 f480 	clz	r4, r0
 803102e:	0964      	lsrs	r4, r4, #5
 8031030:	465e      	mov	r6, fp
 8031032:	9301      	str	r3, [sp, #4]
 8031034:	4642      	mov	r2, r8
 8031036:	4615      	mov	r5, r2
 8031038:	3201      	adds	r2, #1
 803103a:	7828      	ldrb	r0, [r5, #0]
 803103c:	f7ff ffaa 	bl	8030f94 <__hexdig_fun>
 8031040:	2800      	cmp	r0, #0
 8031042:	d1f8      	bne.n	8031036 <__gethex+0x76>
 8031044:	4994      	ldr	r1, [pc, #592]	; (8031298 <__gethex+0x2d8>)
 8031046:	2201      	movs	r2, #1
 8031048:	4628      	mov	r0, r5
 803104a:	f7fc fbef 	bl	802d82c <strncmp>
 803104e:	b978      	cbnz	r0, 8031070 <__gethex+0xb0>
 8031050:	b946      	cbnz	r6, 8031064 <__gethex+0xa4>
 8031052:	1c6e      	adds	r6, r5, #1
 8031054:	4632      	mov	r2, r6
 8031056:	4615      	mov	r5, r2
 8031058:	3201      	adds	r2, #1
 803105a:	7828      	ldrb	r0, [r5, #0]
 803105c:	f7ff ff9a 	bl	8030f94 <__hexdig_fun>
 8031060:	2800      	cmp	r0, #0
 8031062:	d1f8      	bne.n	8031056 <__gethex+0x96>
 8031064:	1b73      	subs	r3, r6, r5
 8031066:	009e      	lsls	r6, r3, #2
 8031068:	e004      	b.n	8031074 <__gethex+0xb4>
 803106a:	2400      	movs	r4, #0
 803106c:	4626      	mov	r6, r4
 803106e:	e7e1      	b.n	8031034 <__gethex+0x74>
 8031070:	2e00      	cmp	r6, #0
 8031072:	d1f7      	bne.n	8031064 <__gethex+0xa4>
 8031074:	782b      	ldrb	r3, [r5, #0]
 8031076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 803107a:	2b50      	cmp	r3, #80	; 0x50
 803107c:	d13d      	bne.n	80310fa <__gethex+0x13a>
 803107e:	786b      	ldrb	r3, [r5, #1]
 8031080:	2b2b      	cmp	r3, #43	; 0x2b
 8031082:	d02f      	beq.n	80310e4 <__gethex+0x124>
 8031084:	2b2d      	cmp	r3, #45	; 0x2d
 8031086:	d031      	beq.n	80310ec <__gethex+0x12c>
 8031088:	1c69      	adds	r1, r5, #1
 803108a:	f04f 0b00 	mov.w	fp, #0
 803108e:	7808      	ldrb	r0, [r1, #0]
 8031090:	f7ff ff80 	bl	8030f94 <__hexdig_fun>
 8031094:	1e42      	subs	r2, r0, #1
 8031096:	b2d2      	uxtb	r2, r2
 8031098:	2a18      	cmp	r2, #24
 803109a:	d82e      	bhi.n	80310fa <__gethex+0x13a>
 803109c:	f1a0 0210 	sub.w	r2, r0, #16
 80310a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80310a4:	f7ff ff76 	bl	8030f94 <__hexdig_fun>
 80310a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80310ac:	fa5f fc8c 	uxtb.w	ip, ip
 80310b0:	f1bc 0f18 	cmp.w	ip, #24
 80310b4:	d91d      	bls.n	80310f2 <__gethex+0x132>
 80310b6:	f1bb 0f00 	cmp.w	fp, #0
 80310ba:	d000      	beq.n	80310be <__gethex+0xfe>
 80310bc:	4252      	negs	r2, r2
 80310be:	4416      	add	r6, r2
 80310c0:	f8ca 1000 	str.w	r1, [sl]
 80310c4:	b1dc      	cbz	r4, 80310fe <__gethex+0x13e>
 80310c6:	9b01      	ldr	r3, [sp, #4]
 80310c8:	2b00      	cmp	r3, #0
 80310ca:	bf14      	ite	ne
 80310cc:	f04f 0800 	movne.w	r8, #0
 80310d0:	f04f 0806 	moveq.w	r8, #6
 80310d4:	4640      	mov	r0, r8
 80310d6:	b005      	add	sp, #20
 80310d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80310dc:	4645      	mov	r5, r8
 80310de:	4626      	mov	r6, r4
 80310e0:	2401      	movs	r4, #1
 80310e2:	e7c7      	b.n	8031074 <__gethex+0xb4>
 80310e4:	f04f 0b00 	mov.w	fp, #0
 80310e8:	1ca9      	adds	r1, r5, #2
 80310ea:	e7d0      	b.n	803108e <__gethex+0xce>
 80310ec:	f04f 0b01 	mov.w	fp, #1
 80310f0:	e7fa      	b.n	80310e8 <__gethex+0x128>
 80310f2:	230a      	movs	r3, #10
 80310f4:	fb03 0002 	mla	r0, r3, r2, r0
 80310f8:	e7d0      	b.n	803109c <__gethex+0xdc>
 80310fa:	4629      	mov	r1, r5
 80310fc:	e7e0      	b.n	80310c0 <__gethex+0x100>
 80310fe:	eba5 0308 	sub.w	r3, r5, r8
 8031102:	3b01      	subs	r3, #1
 8031104:	4621      	mov	r1, r4
 8031106:	2b07      	cmp	r3, #7
 8031108:	dc0a      	bgt.n	8031120 <__gethex+0x160>
 803110a:	4648      	mov	r0, r9
 803110c:	f7fd fbfe 	bl	802e90c <_Balloc>
 8031110:	4604      	mov	r4, r0
 8031112:	b940      	cbnz	r0, 8031126 <__gethex+0x166>
 8031114:	4b61      	ldr	r3, [pc, #388]	; (803129c <__gethex+0x2dc>)
 8031116:	4602      	mov	r2, r0
 8031118:	21e4      	movs	r1, #228	; 0xe4
 803111a:	4861      	ldr	r0, [pc, #388]	; (80312a0 <__gethex+0x2e0>)
 803111c:	f7fb f96e 	bl	802c3fc <__assert_func>
 8031120:	3101      	adds	r1, #1
 8031122:	105b      	asrs	r3, r3, #1
 8031124:	e7ef      	b.n	8031106 <__gethex+0x146>
 8031126:	f100 0a14 	add.w	sl, r0, #20
 803112a:	2300      	movs	r3, #0
 803112c:	495a      	ldr	r1, [pc, #360]	; (8031298 <__gethex+0x2d8>)
 803112e:	f8cd a004 	str.w	sl, [sp, #4]
 8031132:	469b      	mov	fp, r3
 8031134:	45a8      	cmp	r8, r5
 8031136:	d342      	bcc.n	80311be <__gethex+0x1fe>
 8031138:	9801      	ldr	r0, [sp, #4]
 803113a:	f840 bb04 	str.w	fp, [r0], #4
 803113e:	eba0 000a 	sub.w	r0, r0, sl
 8031142:	1080      	asrs	r0, r0, #2
 8031144:	6120      	str	r0, [r4, #16]
 8031146:	ea4f 1840 	mov.w	r8, r0, lsl #5
 803114a:	4658      	mov	r0, fp
 803114c:	f7fd fcd0 	bl	802eaf0 <__hi0bits>
 8031150:	683d      	ldr	r5, [r7, #0]
 8031152:	eba8 0000 	sub.w	r0, r8, r0
 8031156:	42a8      	cmp	r0, r5
 8031158:	dd59      	ble.n	803120e <__gethex+0x24e>
 803115a:	eba0 0805 	sub.w	r8, r0, r5
 803115e:	4641      	mov	r1, r8
 8031160:	4620      	mov	r0, r4
 8031162:	f7fe f85f 	bl	802f224 <__any_on>
 8031166:	4683      	mov	fp, r0
 8031168:	b1b8      	cbz	r0, 803119a <__gethex+0x1da>
 803116a:	f108 33ff 	add.w	r3, r8, #4294967295
 803116e:	1159      	asrs	r1, r3, #5
 8031170:	f003 021f 	and.w	r2, r3, #31
 8031174:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8031178:	f04f 0b01 	mov.w	fp, #1
 803117c:	fa0b f202 	lsl.w	r2, fp, r2
 8031180:	420a      	tst	r2, r1
 8031182:	d00a      	beq.n	803119a <__gethex+0x1da>
 8031184:	455b      	cmp	r3, fp
 8031186:	dd06      	ble.n	8031196 <__gethex+0x1d6>
 8031188:	f1a8 0102 	sub.w	r1, r8, #2
 803118c:	4620      	mov	r0, r4
 803118e:	f7fe f849 	bl	802f224 <__any_on>
 8031192:	2800      	cmp	r0, #0
 8031194:	d138      	bne.n	8031208 <__gethex+0x248>
 8031196:	f04f 0b02 	mov.w	fp, #2
 803119a:	4641      	mov	r1, r8
 803119c:	4620      	mov	r0, r4
 803119e:	f7ff fea7 	bl	8030ef0 <rshift>
 80311a2:	4446      	add	r6, r8
 80311a4:	68bb      	ldr	r3, [r7, #8]
 80311a6:	42b3      	cmp	r3, r6
 80311a8:	da41      	bge.n	803122e <__gethex+0x26e>
 80311aa:	4621      	mov	r1, r4
 80311ac:	4648      	mov	r0, r9
 80311ae:	f7fd fbed 	bl	802e98c <_Bfree>
 80311b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80311b4:	2300      	movs	r3, #0
 80311b6:	6013      	str	r3, [r2, #0]
 80311b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80311bc:	e78a      	b.n	80310d4 <__gethex+0x114>
 80311be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80311c2:	2a2e      	cmp	r2, #46	; 0x2e
 80311c4:	d014      	beq.n	80311f0 <__gethex+0x230>
 80311c6:	2b20      	cmp	r3, #32
 80311c8:	d106      	bne.n	80311d8 <__gethex+0x218>
 80311ca:	9b01      	ldr	r3, [sp, #4]
 80311cc:	f843 bb04 	str.w	fp, [r3], #4
 80311d0:	f04f 0b00 	mov.w	fp, #0
 80311d4:	9301      	str	r3, [sp, #4]
 80311d6:	465b      	mov	r3, fp
 80311d8:	7828      	ldrb	r0, [r5, #0]
 80311da:	9303      	str	r3, [sp, #12]
 80311dc:	f7ff feda 	bl	8030f94 <__hexdig_fun>
 80311e0:	9b03      	ldr	r3, [sp, #12]
 80311e2:	f000 000f 	and.w	r0, r0, #15
 80311e6:	4098      	lsls	r0, r3
 80311e8:	ea4b 0b00 	orr.w	fp, fp, r0
 80311ec:	3304      	adds	r3, #4
 80311ee:	e7a1      	b.n	8031134 <__gethex+0x174>
 80311f0:	45a8      	cmp	r8, r5
 80311f2:	d8e8      	bhi.n	80311c6 <__gethex+0x206>
 80311f4:	2201      	movs	r2, #1
 80311f6:	4628      	mov	r0, r5
 80311f8:	9303      	str	r3, [sp, #12]
 80311fa:	f7fc fb17 	bl	802d82c <strncmp>
 80311fe:	4926      	ldr	r1, [pc, #152]	; (8031298 <__gethex+0x2d8>)
 8031200:	9b03      	ldr	r3, [sp, #12]
 8031202:	2800      	cmp	r0, #0
 8031204:	d1df      	bne.n	80311c6 <__gethex+0x206>
 8031206:	e795      	b.n	8031134 <__gethex+0x174>
 8031208:	f04f 0b03 	mov.w	fp, #3
 803120c:	e7c5      	b.n	803119a <__gethex+0x1da>
 803120e:	da0b      	bge.n	8031228 <__gethex+0x268>
 8031210:	eba5 0800 	sub.w	r8, r5, r0
 8031214:	4621      	mov	r1, r4
 8031216:	4642      	mov	r2, r8
 8031218:	4648      	mov	r0, r9
 803121a:	f7fd fdd1 	bl	802edc0 <__lshift>
 803121e:	eba6 0608 	sub.w	r6, r6, r8
 8031222:	4604      	mov	r4, r0
 8031224:	f100 0a14 	add.w	sl, r0, #20
 8031228:	f04f 0b00 	mov.w	fp, #0
 803122c:	e7ba      	b.n	80311a4 <__gethex+0x1e4>
 803122e:	687b      	ldr	r3, [r7, #4]
 8031230:	42b3      	cmp	r3, r6
 8031232:	dd73      	ble.n	803131c <__gethex+0x35c>
 8031234:	1b9e      	subs	r6, r3, r6
 8031236:	42b5      	cmp	r5, r6
 8031238:	dc34      	bgt.n	80312a4 <__gethex+0x2e4>
 803123a:	68fb      	ldr	r3, [r7, #12]
 803123c:	2b02      	cmp	r3, #2
 803123e:	d023      	beq.n	8031288 <__gethex+0x2c8>
 8031240:	2b03      	cmp	r3, #3
 8031242:	d025      	beq.n	8031290 <__gethex+0x2d0>
 8031244:	2b01      	cmp	r3, #1
 8031246:	d115      	bne.n	8031274 <__gethex+0x2b4>
 8031248:	42b5      	cmp	r5, r6
 803124a:	d113      	bne.n	8031274 <__gethex+0x2b4>
 803124c:	2d01      	cmp	r5, #1
 803124e:	d10b      	bne.n	8031268 <__gethex+0x2a8>
 8031250:	9a02      	ldr	r2, [sp, #8]
 8031252:	687b      	ldr	r3, [r7, #4]
 8031254:	6013      	str	r3, [r2, #0]
 8031256:	2301      	movs	r3, #1
 8031258:	6123      	str	r3, [r4, #16]
 803125a:	f8ca 3000 	str.w	r3, [sl]
 803125e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8031260:	f04f 0862 	mov.w	r8, #98	; 0x62
 8031264:	601c      	str	r4, [r3, #0]
 8031266:	e735      	b.n	80310d4 <__gethex+0x114>
 8031268:	1e69      	subs	r1, r5, #1
 803126a:	4620      	mov	r0, r4
 803126c:	f7fd ffda 	bl	802f224 <__any_on>
 8031270:	2800      	cmp	r0, #0
 8031272:	d1ed      	bne.n	8031250 <__gethex+0x290>
 8031274:	4621      	mov	r1, r4
 8031276:	4648      	mov	r0, r9
 8031278:	f7fd fb88 	bl	802e98c <_Bfree>
 803127c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 803127e:	2300      	movs	r3, #0
 8031280:	6013      	str	r3, [r2, #0]
 8031282:	f04f 0850 	mov.w	r8, #80	; 0x50
 8031286:	e725      	b.n	80310d4 <__gethex+0x114>
 8031288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803128a:	2b00      	cmp	r3, #0
 803128c:	d1f2      	bne.n	8031274 <__gethex+0x2b4>
 803128e:	e7df      	b.n	8031250 <__gethex+0x290>
 8031290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8031292:	2b00      	cmp	r3, #0
 8031294:	d1dc      	bne.n	8031250 <__gethex+0x290>
 8031296:	e7ed      	b.n	8031274 <__gethex+0x2b4>
 8031298:	08034bc4 	.word	0x08034bc4
 803129c:	08034a5d 	.word	0x08034a5d
 80312a0:	08034d4d 	.word	0x08034d4d
 80312a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80312a8:	f1bb 0f00 	cmp.w	fp, #0
 80312ac:	d133      	bne.n	8031316 <__gethex+0x356>
 80312ae:	f1b8 0f00 	cmp.w	r8, #0
 80312b2:	d004      	beq.n	80312be <__gethex+0x2fe>
 80312b4:	4641      	mov	r1, r8
 80312b6:	4620      	mov	r0, r4
 80312b8:	f7fd ffb4 	bl	802f224 <__any_on>
 80312bc:	4683      	mov	fp, r0
 80312be:	ea4f 1268 	mov.w	r2, r8, asr #5
 80312c2:	2301      	movs	r3, #1
 80312c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80312c8:	f008 081f 	and.w	r8, r8, #31
 80312cc:	fa03 f308 	lsl.w	r3, r3, r8
 80312d0:	4213      	tst	r3, r2
 80312d2:	4631      	mov	r1, r6
 80312d4:	4620      	mov	r0, r4
 80312d6:	bf18      	it	ne
 80312d8:	f04b 0b02 	orrne.w	fp, fp, #2
 80312dc:	1bad      	subs	r5, r5, r6
 80312de:	f7ff fe07 	bl	8030ef0 <rshift>
 80312e2:	687e      	ldr	r6, [r7, #4]
 80312e4:	f04f 0802 	mov.w	r8, #2
 80312e8:	f1bb 0f00 	cmp.w	fp, #0
 80312ec:	d04a      	beq.n	8031384 <__gethex+0x3c4>
 80312ee:	68fb      	ldr	r3, [r7, #12]
 80312f0:	2b02      	cmp	r3, #2
 80312f2:	d016      	beq.n	8031322 <__gethex+0x362>
 80312f4:	2b03      	cmp	r3, #3
 80312f6:	d018      	beq.n	803132a <__gethex+0x36a>
 80312f8:	2b01      	cmp	r3, #1
 80312fa:	d109      	bne.n	8031310 <__gethex+0x350>
 80312fc:	f01b 0f02 	tst.w	fp, #2
 8031300:	d006      	beq.n	8031310 <__gethex+0x350>
 8031302:	f8da 3000 	ldr.w	r3, [sl]
 8031306:	ea4b 0b03 	orr.w	fp, fp, r3
 803130a:	f01b 0f01 	tst.w	fp, #1
 803130e:	d10f      	bne.n	8031330 <__gethex+0x370>
 8031310:	f048 0810 	orr.w	r8, r8, #16
 8031314:	e036      	b.n	8031384 <__gethex+0x3c4>
 8031316:	f04f 0b01 	mov.w	fp, #1
 803131a:	e7d0      	b.n	80312be <__gethex+0x2fe>
 803131c:	f04f 0801 	mov.w	r8, #1
 8031320:	e7e2      	b.n	80312e8 <__gethex+0x328>
 8031322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8031324:	f1c3 0301 	rsb	r3, r3, #1
 8031328:	930f      	str	r3, [sp, #60]	; 0x3c
 803132a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803132c:	2b00      	cmp	r3, #0
 803132e:	d0ef      	beq.n	8031310 <__gethex+0x350>
 8031330:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8031334:	f104 0214 	add.w	r2, r4, #20
 8031338:	ea4f 038b 	mov.w	r3, fp, lsl #2
 803133c:	9301      	str	r3, [sp, #4]
 803133e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8031342:	2300      	movs	r3, #0
 8031344:	4694      	mov	ip, r2
 8031346:	f852 1b04 	ldr.w	r1, [r2], #4
 803134a:	f1b1 3fff 	cmp.w	r1, #4294967295
 803134e:	d01e      	beq.n	803138e <__gethex+0x3ce>
 8031350:	3101      	adds	r1, #1
 8031352:	f8cc 1000 	str.w	r1, [ip]
 8031356:	f1b8 0f02 	cmp.w	r8, #2
 803135a:	f104 0214 	add.w	r2, r4, #20
 803135e:	d13d      	bne.n	80313dc <__gethex+0x41c>
 8031360:	683b      	ldr	r3, [r7, #0]
 8031362:	3b01      	subs	r3, #1
 8031364:	42ab      	cmp	r3, r5
 8031366:	d10b      	bne.n	8031380 <__gethex+0x3c0>
 8031368:	1169      	asrs	r1, r5, #5
 803136a:	2301      	movs	r3, #1
 803136c:	f005 051f 	and.w	r5, r5, #31
 8031370:	fa03 f505 	lsl.w	r5, r3, r5
 8031374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8031378:	421d      	tst	r5, r3
 803137a:	bf18      	it	ne
 803137c:	f04f 0801 	movne.w	r8, #1
 8031380:	f048 0820 	orr.w	r8, r8, #32
 8031384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8031386:	601c      	str	r4, [r3, #0]
 8031388:	9b02      	ldr	r3, [sp, #8]
 803138a:	601e      	str	r6, [r3, #0]
 803138c:	e6a2      	b.n	80310d4 <__gethex+0x114>
 803138e:	4290      	cmp	r0, r2
 8031390:	f842 3c04 	str.w	r3, [r2, #-4]
 8031394:	d8d6      	bhi.n	8031344 <__gethex+0x384>
 8031396:	68a2      	ldr	r2, [r4, #8]
 8031398:	4593      	cmp	fp, r2
 803139a:	db17      	blt.n	80313cc <__gethex+0x40c>
 803139c:	6861      	ldr	r1, [r4, #4]
 803139e:	4648      	mov	r0, r9
 80313a0:	3101      	adds	r1, #1
 80313a2:	f7fd fab3 	bl	802e90c <_Balloc>
 80313a6:	4682      	mov	sl, r0
 80313a8:	b918      	cbnz	r0, 80313b2 <__gethex+0x3f2>
 80313aa:	4b1b      	ldr	r3, [pc, #108]	; (8031418 <__gethex+0x458>)
 80313ac:	4602      	mov	r2, r0
 80313ae:	2184      	movs	r1, #132	; 0x84
 80313b0:	e6b3      	b.n	803111a <__gethex+0x15a>
 80313b2:	6922      	ldr	r2, [r4, #16]
 80313b4:	3202      	adds	r2, #2
 80313b6:	f104 010c 	add.w	r1, r4, #12
 80313ba:	0092      	lsls	r2, r2, #2
 80313bc:	300c      	adds	r0, #12
 80313be:	f7fc fbc2 	bl	802db46 <memcpy>
 80313c2:	4621      	mov	r1, r4
 80313c4:	4648      	mov	r0, r9
 80313c6:	f7fd fae1 	bl	802e98c <_Bfree>
 80313ca:	4654      	mov	r4, sl
 80313cc:	6922      	ldr	r2, [r4, #16]
 80313ce:	1c51      	adds	r1, r2, #1
 80313d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80313d4:	6121      	str	r1, [r4, #16]
 80313d6:	2101      	movs	r1, #1
 80313d8:	6151      	str	r1, [r2, #20]
 80313da:	e7bc      	b.n	8031356 <__gethex+0x396>
 80313dc:	6921      	ldr	r1, [r4, #16]
 80313de:	4559      	cmp	r1, fp
 80313e0:	dd0b      	ble.n	80313fa <__gethex+0x43a>
 80313e2:	2101      	movs	r1, #1
 80313e4:	4620      	mov	r0, r4
 80313e6:	f7ff fd83 	bl	8030ef0 <rshift>
 80313ea:	68bb      	ldr	r3, [r7, #8]
 80313ec:	3601      	adds	r6, #1
 80313ee:	42b3      	cmp	r3, r6
 80313f0:	f6ff aedb 	blt.w	80311aa <__gethex+0x1ea>
 80313f4:	f04f 0801 	mov.w	r8, #1
 80313f8:	e7c2      	b.n	8031380 <__gethex+0x3c0>
 80313fa:	f015 051f 	ands.w	r5, r5, #31
 80313fe:	d0f9      	beq.n	80313f4 <__gethex+0x434>
 8031400:	9b01      	ldr	r3, [sp, #4]
 8031402:	441a      	add	r2, r3
 8031404:	f1c5 0520 	rsb	r5, r5, #32
 8031408:	f852 0c04 	ldr.w	r0, [r2, #-4]
 803140c:	f7fd fb70 	bl	802eaf0 <__hi0bits>
 8031410:	42a8      	cmp	r0, r5
 8031412:	dbe6      	blt.n	80313e2 <__gethex+0x422>
 8031414:	e7ee      	b.n	80313f4 <__gethex+0x434>
 8031416:	bf00      	nop
 8031418:	08034a5d 	.word	0x08034a5d

0803141c <L_shift>:
 803141c:	f1c2 0208 	rsb	r2, r2, #8
 8031420:	0092      	lsls	r2, r2, #2
 8031422:	b570      	push	{r4, r5, r6, lr}
 8031424:	f1c2 0620 	rsb	r6, r2, #32
 8031428:	6843      	ldr	r3, [r0, #4]
 803142a:	6804      	ldr	r4, [r0, #0]
 803142c:	fa03 f506 	lsl.w	r5, r3, r6
 8031430:	432c      	orrs	r4, r5
 8031432:	40d3      	lsrs	r3, r2
 8031434:	6004      	str	r4, [r0, #0]
 8031436:	f840 3f04 	str.w	r3, [r0, #4]!
 803143a:	4288      	cmp	r0, r1
 803143c:	d3f4      	bcc.n	8031428 <L_shift+0xc>
 803143e:	bd70      	pop	{r4, r5, r6, pc}

08031440 <__match>:
 8031440:	b530      	push	{r4, r5, lr}
 8031442:	6803      	ldr	r3, [r0, #0]
 8031444:	3301      	adds	r3, #1
 8031446:	f811 4b01 	ldrb.w	r4, [r1], #1
 803144a:	b914      	cbnz	r4, 8031452 <__match+0x12>
 803144c:	6003      	str	r3, [r0, #0]
 803144e:	2001      	movs	r0, #1
 8031450:	bd30      	pop	{r4, r5, pc}
 8031452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031456:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 803145a:	2d19      	cmp	r5, #25
 803145c:	bf98      	it	ls
 803145e:	3220      	addls	r2, #32
 8031460:	42a2      	cmp	r2, r4
 8031462:	d0f0      	beq.n	8031446 <__match+0x6>
 8031464:	2000      	movs	r0, #0
 8031466:	e7f3      	b.n	8031450 <__match+0x10>

08031468 <__hexnan>:
 8031468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803146c:	680b      	ldr	r3, [r1, #0]
 803146e:	6801      	ldr	r1, [r0, #0]
 8031470:	115e      	asrs	r6, r3, #5
 8031472:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8031476:	f013 031f 	ands.w	r3, r3, #31
 803147a:	b087      	sub	sp, #28
 803147c:	bf18      	it	ne
 803147e:	3604      	addne	r6, #4
 8031480:	2500      	movs	r5, #0
 8031482:	1f37      	subs	r7, r6, #4
 8031484:	4682      	mov	sl, r0
 8031486:	4690      	mov	r8, r2
 8031488:	9301      	str	r3, [sp, #4]
 803148a:	f846 5c04 	str.w	r5, [r6, #-4]
 803148e:	46b9      	mov	r9, r7
 8031490:	463c      	mov	r4, r7
 8031492:	9502      	str	r5, [sp, #8]
 8031494:	46ab      	mov	fp, r5
 8031496:	784a      	ldrb	r2, [r1, #1]
 8031498:	1c4b      	adds	r3, r1, #1
 803149a:	9303      	str	r3, [sp, #12]
 803149c:	b342      	cbz	r2, 80314f0 <__hexnan+0x88>
 803149e:	4610      	mov	r0, r2
 80314a0:	9105      	str	r1, [sp, #20]
 80314a2:	9204      	str	r2, [sp, #16]
 80314a4:	f7ff fd76 	bl	8030f94 <__hexdig_fun>
 80314a8:	2800      	cmp	r0, #0
 80314aa:	d14f      	bne.n	803154c <__hexnan+0xe4>
 80314ac:	9a04      	ldr	r2, [sp, #16]
 80314ae:	9905      	ldr	r1, [sp, #20]
 80314b0:	2a20      	cmp	r2, #32
 80314b2:	d818      	bhi.n	80314e6 <__hexnan+0x7e>
 80314b4:	9b02      	ldr	r3, [sp, #8]
 80314b6:	459b      	cmp	fp, r3
 80314b8:	dd13      	ble.n	80314e2 <__hexnan+0x7a>
 80314ba:	454c      	cmp	r4, r9
 80314bc:	d206      	bcs.n	80314cc <__hexnan+0x64>
 80314be:	2d07      	cmp	r5, #7
 80314c0:	dc04      	bgt.n	80314cc <__hexnan+0x64>
 80314c2:	462a      	mov	r2, r5
 80314c4:	4649      	mov	r1, r9
 80314c6:	4620      	mov	r0, r4
 80314c8:	f7ff ffa8 	bl	803141c <L_shift>
 80314cc:	4544      	cmp	r4, r8
 80314ce:	d950      	bls.n	8031572 <__hexnan+0x10a>
 80314d0:	2300      	movs	r3, #0
 80314d2:	f1a4 0904 	sub.w	r9, r4, #4
 80314d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80314da:	f8cd b008 	str.w	fp, [sp, #8]
 80314de:	464c      	mov	r4, r9
 80314e0:	461d      	mov	r5, r3
 80314e2:	9903      	ldr	r1, [sp, #12]
 80314e4:	e7d7      	b.n	8031496 <__hexnan+0x2e>
 80314e6:	2a29      	cmp	r2, #41	; 0x29
 80314e8:	d155      	bne.n	8031596 <__hexnan+0x12e>
 80314ea:	3102      	adds	r1, #2
 80314ec:	f8ca 1000 	str.w	r1, [sl]
 80314f0:	f1bb 0f00 	cmp.w	fp, #0
 80314f4:	d04f      	beq.n	8031596 <__hexnan+0x12e>
 80314f6:	454c      	cmp	r4, r9
 80314f8:	d206      	bcs.n	8031508 <__hexnan+0xa0>
 80314fa:	2d07      	cmp	r5, #7
 80314fc:	dc04      	bgt.n	8031508 <__hexnan+0xa0>
 80314fe:	462a      	mov	r2, r5
 8031500:	4649      	mov	r1, r9
 8031502:	4620      	mov	r0, r4
 8031504:	f7ff ff8a 	bl	803141c <L_shift>
 8031508:	4544      	cmp	r4, r8
 803150a:	d934      	bls.n	8031576 <__hexnan+0x10e>
 803150c:	f1a8 0204 	sub.w	r2, r8, #4
 8031510:	4623      	mov	r3, r4
 8031512:	f853 1b04 	ldr.w	r1, [r3], #4
 8031516:	f842 1f04 	str.w	r1, [r2, #4]!
 803151a:	429f      	cmp	r7, r3
 803151c:	d2f9      	bcs.n	8031512 <__hexnan+0xaa>
 803151e:	1b3b      	subs	r3, r7, r4
 8031520:	f023 0303 	bic.w	r3, r3, #3
 8031524:	3304      	adds	r3, #4
 8031526:	3e03      	subs	r6, #3
 8031528:	3401      	adds	r4, #1
 803152a:	42a6      	cmp	r6, r4
 803152c:	bf38      	it	cc
 803152e:	2304      	movcc	r3, #4
 8031530:	4443      	add	r3, r8
 8031532:	2200      	movs	r2, #0
 8031534:	f843 2b04 	str.w	r2, [r3], #4
 8031538:	429f      	cmp	r7, r3
 803153a:	d2fb      	bcs.n	8031534 <__hexnan+0xcc>
 803153c:	683b      	ldr	r3, [r7, #0]
 803153e:	b91b      	cbnz	r3, 8031548 <__hexnan+0xe0>
 8031540:	4547      	cmp	r7, r8
 8031542:	d126      	bne.n	8031592 <__hexnan+0x12a>
 8031544:	2301      	movs	r3, #1
 8031546:	603b      	str	r3, [r7, #0]
 8031548:	2005      	movs	r0, #5
 803154a:	e025      	b.n	8031598 <__hexnan+0x130>
 803154c:	3501      	adds	r5, #1
 803154e:	2d08      	cmp	r5, #8
 8031550:	f10b 0b01 	add.w	fp, fp, #1
 8031554:	dd06      	ble.n	8031564 <__hexnan+0xfc>
 8031556:	4544      	cmp	r4, r8
 8031558:	d9c3      	bls.n	80314e2 <__hexnan+0x7a>
 803155a:	2300      	movs	r3, #0
 803155c:	f844 3c04 	str.w	r3, [r4, #-4]
 8031560:	2501      	movs	r5, #1
 8031562:	3c04      	subs	r4, #4
 8031564:	6822      	ldr	r2, [r4, #0]
 8031566:	f000 000f 	and.w	r0, r0, #15
 803156a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803156e:	6020      	str	r0, [r4, #0]
 8031570:	e7b7      	b.n	80314e2 <__hexnan+0x7a>
 8031572:	2508      	movs	r5, #8
 8031574:	e7b5      	b.n	80314e2 <__hexnan+0x7a>
 8031576:	9b01      	ldr	r3, [sp, #4]
 8031578:	2b00      	cmp	r3, #0
 803157a:	d0df      	beq.n	803153c <__hexnan+0xd4>
 803157c:	f1c3 0320 	rsb	r3, r3, #32
 8031580:	f04f 32ff 	mov.w	r2, #4294967295
 8031584:	40da      	lsrs	r2, r3
 8031586:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803158a:	4013      	ands	r3, r2
 803158c:	f846 3c04 	str.w	r3, [r6, #-4]
 8031590:	e7d4      	b.n	803153c <__hexnan+0xd4>
 8031592:	3f04      	subs	r7, #4
 8031594:	e7d2      	b.n	803153c <__hexnan+0xd4>
 8031596:	2004      	movs	r0, #4
 8031598:	b007      	add	sp, #28
 803159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803159e <__ascii_mbtowc>:
 803159e:	b082      	sub	sp, #8
 80315a0:	b901      	cbnz	r1, 80315a4 <__ascii_mbtowc+0x6>
 80315a2:	a901      	add	r1, sp, #4
 80315a4:	b142      	cbz	r2, 80315b8 <__ascii_mbtowc+0x1a>
 80315a6:	b14b      	cbz	r3, 80315bc <__ascii_mbtowc+0x1e>
 80315a8:	7813      	ldrb	r3, [r2, #0]
 80315aa:	600b      	str	r3, [r1, #0]
 80315ac:	7812      	ldrb	r2, [r2, #0]
 80315ae:	1e10      	subs	r0, r2, #0
 80315b0:	bf18      	it	ne
 80315b2:	2001      	movne	r0, #1
 80315b4:	b002      	add	sp, #8
 80315b6:	4770      	bx	lr
 80315b8:	4610      	mov	r0, r2
 80315ba:	e7fb      	b.n	80315b4 <__ascii_mbtowc+0x16>
 80315bc:	f06f 0001 	mvn.w	r0, #1
 80315c0:	e7f8      	b.n	80315b4 <__ascii_mbtowc+0x16>

080315c2 <_realloc_r>:
 80315c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80315c6:	4680      	mov	r8, r0
 80315c8:	4614      	mov	r4, r2
 80315ca:	460e      	mov	r6, r1
 80315cc:	b921      	cbnz	r1, 80315d8 <_realloc_r+0x16>
 80315ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80315d2:	4611      	mov	r1, r2
 80315d4:	f7fa bf76 	b.w	802c4c4 <_malloc_r>
 80315d8:	b92a      	cbnz	r2, 80315e6 <_realloc_r+0x24>
 80315da:	f7fd f94b 	bl	802e874 <_free_r>
 80315de:	4625      	mov	r5, r4
 80315e0:	4628      	mov	r0, r5
 80315e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80315e6:	f000 f89c 	bl	8031722 <_malloc_usable_size_r>
 80315ea:	4284      	cmp	r4, r0
 80315ec:	4607      	mov	r7, r0
 80315ee:	d802      	bhi.n	80315f6 <_realloc_r+0x34>
 80315f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80315f4:	d812      	bhi.n	803161c <_realloc_r+0x5a>
 80315f6:	4621      	mov	r1, r4
 80315f8:	4640      	mov	r0, r8
 80315fa:	f7fa ff63 	bl	802c4c4 <_malloc_r>
 80315fe:	4605      	mov	r5, r0
 8031600:	2800      	cmp	r0, #0
 8031602:	d0ed      	beq.n	80315e0 <_realloc_r+0x1e>
 8031604:	42bc      	cmp	r4, r7
 8031606:	4622      	mov	r2, r4
 8031608:	4631      	mov	r1, r6
 803160a:	bf28      	it	cs
 803160c:	463a      	movcs	r2, r7
 803160e:	f7fc fa9a 	bl	802db46 <memcpy>
 8031612:	4631      	mov	r1, r6
 8031614:	4640      	mov	r0, r8
 8031616:	f7fd f92d 	bl	802e874 <_free_r>
 803161a:	e7e1      	b.n	80315e0 <_realloc_r+0x1e>
 803161c:	4635      	mov	r5, r6
 803161e:	e7df      	b.n	80315e0 <_realloc_r+0x1e>

08031620 <_strtoul_l.constprop.0>:
 8031620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031624:	4f36      	ldr	r7, [pc, #216]	; (8031700 <_strtoul_l.constprop.0+0xe0>)
 8031626:	4686      	mov	lr, r0
 8031628:	460d      	mov	r5, r1
 803162a:	4628      	mov	r0, r5
 803162c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031630:	5d3e      	ldrb	r6, [r7, r4]
 8031632:	f016 0608 	ands.w	r6, r6, #8
 8031636:	d1f8      	bne.n	803162a <_strtoul_l.constprop.0+0xa>
 8031638:	2c2d      	cmp	r4, #45	; 0x2d
 803163a:	d130      	bne.n	803169e <_strtoul_l.constprop.0+0x7e>
 803163c:	782c      	ldrb	r4, [r5, #0]
 803163e:	2601      	movs	r6, #1
 8031640:	1c85      	adds	r5, r0, #2
 8031642:	2b00      	cmp	r3, #0
 8031644:	d057      	beq.n	80316f6 <_strtoul_l.constprop.0+0xd6>
 8031646:	2b10      	cmp	r3, #16
 8031648:	d109      	bne.n	803165e <_strtoul_l.constprop.0+0x3e>
 803164a:	2c30      	cmp	r4, #48	; 0x30
 803164c:	d107      	bne.n	803165e <_strtoul_l.constprop.0+0x3e>
 803164e:	7828      	ldrb	r0, [r5, #0]
 8031650:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8031654:	2858      	cmp	r0, #88	; 0x58
 8031656:	d149      	bne.n	80316ec <_strtoul_l.constprop.0+0xcc>
 8031658:	786c      	ldrb	r4, [r5, #1]
 803165a:	2310      	movs	r3, #16
 803165c:	3502      	adds	r5, #2
 803165e:	f04f 38ff 	mov.w	r8, #4294967295
 8031662:	2700      	movs	r7, #0
 8031664:	fbb8 f8f3 	udiv	r8, r8, r3
 8031668:	fb03 f908 	mul.w	r9, r3, r8
 803166c:	ea6f 0909 	mvn.w	r9, r9
 8031670:	4638      	mov	r0, r7
 8031672:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8031676:	f1bc 0f09 	cmp.w	ip, #9
 803167a:	d815      	bhi.n	80316a8 <_strtoul_l.constprop.0+0x88>
 803167c:	4664      	mov	r4, ip
 803167e:	42a3      	cmp	r3, r4
 8031680:	dd23      	ble.n	80316ca <_strtoul_l.constprop.0+0xaa>
 8031682:	f1b7 3fff 	cmp.w	r7, #4294967295
 8031686:	d007      	beq.n	8031698 <_strtoul_l.constprop.0+0x78>
 8031688:	4580      	cmp	r8, r0
 803168a:	d31b      	bcc.n	80316c4 <_strtoul_l.constprop.0+0xa4>
 803168c:	d101      	bne.n	8031692 <_strtoul_l.constprop.0+0x72>
 803168e:	45a1      	cmp	r9, r4
 8031690:	db18      	blt.n	80316c4 <_strtoul_l.constprop.0+0xa4>
 8031692:	fb00 4003 	mla	r0, r0, r3, r4
 8031696:	2701      	movs	r7, #1
 8031698:	f815 4b01 	ldrb.w	r4, [r5], #1
 803169c:	e7e9      	b.n	8031672 <_strtoul_l.constprop.0+0x52>
 803169e:	2c2b      	cmp	r4, #43	; 0x2b
 80316a0:	bf04      	itt	eq
 80316a2:	782c      	ldrbeq	r4, [r5, #0]
 80316a4:	1c85      	addeq	r5, r0, #2
 80316a6:	e7cc      	b.n	8031642 <_strtoul_l.constprop.0+0x22>
 80316a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80316ac:	f1bc 0f19 	cmp.w	ip, #25
 80316b0:	d801      	bhi.n	80316b6 <_strtoul_l.constprop.0+0x96>
 80316b2:	3c37      	subs	r4, #55	; 0x37
 80316b4:	e7e3      	b.n	803167e <_strtoul_l.constprop.0+0x5e>
 80316b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80316ba:	f1bc 0f19 	cmp.w	ip, #25
 80316be:	d804      	bhi.n	80316ca <_strtoul_l.constprop.0+0xaa>
 80316c0:	3c57      	subs	r4, #87	; 0x57
 80316c2:	e7dc      	b.n	803167e <_strtoul_l.constprop.0+0x5e>
 80316c4:	f04f 37ff 	mov.w	r7, #4294967295
 80316c8:	e7e6      	b.n	8031698 <_strtoul_l.constprop.0+0x78>
 80316ca:	1c7b      	adds	r3, r7, #1
 80316cc:	d106      	bne.n	80316dc <_strtoul_l.constprop.0+0xbc>
 80316ce:	2322      	movs	r3, #34	; 0x22
 80316d0:	f8ce 3000 	str.w	r3, [lr]
 80316d4:	4638      	mov	r0, r7
 80316d6:	b932      	cbnz	r2, 80316e6 <_strtoul_l.constprop.0+0xc6>
 80316d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80316dc:	b106      	cbz	r6, 80316e0 <_strtoul_l.constprop.0+0xc0>
 80316de:	4240      	negs	r0, r0
 80316e0:	2a00      	cmp	r2, #0
 80316e2:	d0f9      	beq.n	80316d8 <_strtoul_l.constprop.0+0xb8>
 80316e4:	b107      	cbz	r7, 80316e8 <_strtoul_l.constprop.0+0xc8>
 80316e6:	1e69      	subs	r1, r5, #1
 80316e8:	6011      	str	r1, [r2, #0]
 80316ea:	e7f5      	b.n	80316d8 <_strtoul_l.constprop.0+0xb8>
 80316ec:	2430      	movs	r4, #48	; 0x30
 80316ee:	2b00      	cmp	r3, #0
 80316f0:	d1b5      	bne.n	803165e <_strtoul_l.constprop.0+0x3e>
 80316f2:	2308      	movs	r3, #8
 80316f4:	e7b3      	b.n	803165e <_strtoul_l.constprop.0+0x3e>
 80316f6:	2c30      	cmp	r4, #48	; 0x30
 80316f8:	d0a9      	beq.n	803164e <_strtoul_l.constprop.0+0x2e>
 80316fa:	230a      	movs	r3, #10
 80316fc:	e7af      	b.n	803165e <_strtoul_l.constprop.0+0x3e>
 80316fe:	bf00      	nop
 8031700:	08034c19 	.word	0x08034c19

08031704 <_strtoul_r>:
 8031704:	f7ff bf8c 	b.w	8031620 <_strtoul_l.constprop.0>

08031708 <__ascii_wctomb>:
 8031708:	b149      	cbz	r1, 803171e <__ascii_wctomb+0x16>
 803170a:	2aff      	cmp	r2, #255	; 0xff
 803170c:	bf85      	ittet	hi
 803170e:	238a      	movhi	r3, #138	; 0x8a
 8031710:	6003      	strhi	r3, [r0, #0]
 8031712:	700a      	strbls	r2, [r1, #0]
 8031714:	f04f 30ff 	movhi.w	r0, #4294967295
 8031718:	bf98      	it	ls
 803171a:	2001      	movls	r0, #1
 803171c:	4770      	bx	lr
 803171e:	4608      	mov	r0, r1
 8031720:	4770      	bx	lr

08031722 <_malloc_usable_size_r>:
 8031722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031726:	1f18      	subs	r0, r3, #4
 8031728:	2b00      	cmp	r3, #0
 803172a:	bfbc      	itt	lt
 803172c:	580b      	ldrlt	r3, [r1, r0]
 803172e:	18c0      	addlt	r0, r0, r3
 8031730:	4770      	bx	lr
	...

08031734 <_init>:
 8031734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031736:	bf00      	nop
 8031738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803173a:	bc08      	pop	{r3}
 803173c:	469e      	mov	lr, r3
 803173e:	4770      	bx	lr

08031740 <_fini>:
 8031740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031742:	bf00      	nop
 8031744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031746:	bc08      	pop	{r3}
 8031748:	469e      	mov	lr, r3
 803174a:	4770      	bx	lr
