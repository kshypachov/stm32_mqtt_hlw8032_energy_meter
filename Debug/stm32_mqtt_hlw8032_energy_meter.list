
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002118c  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003560  08031330  08031330  00031330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034890  08034890  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  08034890  08034890  00034890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034898  08034898  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034898  08034898  00034898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803489c  0803489c  0003489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  080348a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7e8  200002f8  08034b98  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dae0  08034b98  0004dae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eb22  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007998  00000000  00000000  0006ee8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a68  00000000  00000000  00076828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002237  00000000  00000000  00079290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6ac  00000000  00000000  0007b4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032567  00000000  00000000  0009ab73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9bb8  00000000  00000000  000cd0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c99c  00000000  00000000  00176c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00183630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08031314 	.word	0x08031314

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	08031314 	.word	0x08031314

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	; 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9ba 	b.w	8011044 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9e08      	ldr	r6, [sp, #32]
 8010d82:	460d      	mov	r5, r1
 8010d84:	4604      	mov	r4, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14a      	bne.n	8010e22 <__udivmoddi4+0xa6>
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	4694      	mov	ip, r2
 8010d90:	d965      	bls.n	8010e5e <__udivmoddi4+0xe2>
 8010d92:	fab2 f382 	clz	r3, r2
 8010d96:	b143      	cbz	r3, 8010daa <__udivmoddi4+0x2e>
 8010d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8010d9c:	f1c3 0220 	rsb	r2, r3, #32
 8010da0:	409f      	lsls	r7, r3
 8010da2:	fa20 f202 	lsr.w	r2, r0, r2
 8010da6:	4317      	orrs	r7, r2
 8010da8:	409c      	lsls	r4, r3
 8010daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010dae:	fa1f f58c 	uxth.w	r5, ip
 8010db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8010db6:	0c22      	lsrs	r2, r4, #16
 8010db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8010dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010dc0:	fb01 f005 	mul.w	r0, r1, r5
 8010dc4:	4290      	cmp	r0, r2
 8010dc6:	d90a      	bls.n	8010dde <__udivmoddi4+0x62>
 8010dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8010dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8010dd0:	f080 811c 	bcs.w	801100c <__udivmoddi4+0x290>
 8010dd4:	4290      	cmp	r0, r2
 8010dd6:	f240 8119 	bls.w	801100c <__udivmoddi4+0x290>
 8010dda:	3902      	subs	r1, #2
 8010ddc:	4462      	add	r2, ip
 8010dde:	1a12      	subs	r2, r2, r0
 8010de0:	b2a4      	uxth	r4, r4
 8010de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8010de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8010dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010dee:	fb00 f505 	mul.w	r5, r0, r5
 8010df2:	42a5      	cmp	r5, r4
 8010df4:	d90a      	bls.n	8010e0c <__udivmoddi4+0x90>
 8010df6:	eb1c 0404 	adds.w	r4, ip, r4
 8010dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8010dfe:	f080 8107 	bcs.w	8011010 <__udivmoddi4+0x294>
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	f240 8104 	bls.w	8011010 <__udivmoddi4+0x294>
 8010e08:	4464      	add	r4, ip
 8010e0a:	3802      	subs	r0, #2
 8010e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	2100      	movs	r1, #0
 8010e14:	b11e      	cbz	r6, 8010e1e <__udivmoddi4+0xa2>
 8010e16:	40dc      	lsrs	r4, r3
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	428b      	cmp	r3, r1
 8010e24:	d908      	bls.n	8010e38 <__udivmoddi4+0xbc>
 8010e26:	2e00      	cmp	r6, #0
 8010e28:	f000 80ed 	beq.w	8011006 <__udivmoddi4+0x28a>
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8010e32:	4608      	mov	r0, r1
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	fab3 f183 	clz	r1, r3
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d149      	bne.n	8010ed4 <__udivmoddi4+0x158>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d302      	bcc.n	8010e4a <__udivmoddi4+0xce>
 8010e44:	4282      	cmp	r2, r0
 8010e46:	f200 80f8 	bhi.w	801103a <__udivmoddi4+0x2be>
 8010e4a:	1a84      	subs	r4, r0, r2
 8010e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8010e50:	2001      	movs	r0, #1
 8010e52:	4617      	mov	r7, r2
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0e2      	beq.n	8010e1e <__udivmoddi4+0xa2>
 8010e58:	e9c6 4700 	strd	r4, r7, [r6]
 8010e5c:	e7df      	b.n	8010e1e <__udivmoddi4+0xa2>
 8010e5e:	b902      	cbnz	r2, 8010e62 <__udivmoddi4+0xe6>
 8010e60:	deff      	udf	#255	; 0xff
 8010e62:	fab2 f382 	clz	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f040 8090 	bne.w	8010f8c <__udivmoddi4+0x210>
 8010e6c:	1a8a      	subs	r2, r1, r2
 8010e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e72:	fa1f fe8c 	uxth.w	lr, ip
 8010e76:	2101      	movs	r1, #1
 8010e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8010e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8010e80:	0c22      	lsrs	r2, r4, #16
 8010e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010e86:	fb0e f005 	mul.w	r0, lr, r5
 8010e8a:	4290      	cmp	r0, r2
 8010e8c:	d908      	bls.n	8010ea0 <__udivmoddi4+0x124>
 8010e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8010e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8010e96:	d202      	bcs.n	8010e9e <__udivmoddi4+0x122>
 8010e98:	4290      	cmp	r0, r2
 8010e9a:	f200 80cb 	bhi.w	8011034 <__udivmoddi4+0x2b8>
 8010e9e:	4645      	mov	r5, r8
 8010ea0:	1a12      	subs	r2, r2, r0
 8010ea2:	b2a4      	uxth	r4, r4
 8010ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8010ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8010eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8010eb4:	45a6      	cmp	lr, r4
 8010eb6:	d908      	bls.n	8010eca <__udivmoddi4+0x14e>
 8010eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8010ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8010ec0:	d202      	bcs.n	8010ec8 <__udivmoddi4+0x14c>
 8010ec2:	45a6      	cmp	lr, r4
 8010ec4:	f200 80bb 	bhi.w	801103e <__udivmoddi4+0x2c2>
 8010ec8:	4610      	mov	r0, r2
 8010eca:	eba4 040e 	sub.w	r4, r4, lr
 8010ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010ed2:	e79f      	b.n	8010e14 <__udivmoddi4+0x98>
 8010ed4:	f1c1 0720 	rsb	r7, r1, #32
 8010ed8:	408b      	lsls	r3, r1
 8010eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8010ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8010ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8010ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8010eea:	40fd      	lsrs	r5, r7
 8010eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010ef0:	4323      	orrs	r3, r4
 8010ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8010ef6:	fa1f fe8c 	uxth.w	lr, ip
 8010efa:	fb09 5518 	mls	r5, r9, r8, r5
 8010efe:	0c1c      	lsrs	r4, r3, #16
 8010f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010f04:	fb08 f50e 	mul.w	r5, r8, lr
 8010f08:	42a5      	cmp	r5, r4
 8010f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8010f12:	d90b      	bls.n	8010f2c <__udivmoddi4+0x1b0>
 8010f14:	eb1c 0404 	adds.w	r4, ip, r4
 8010f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8010f1c:	f080 8088 	bcs.w	8011030 <__udivmoddi4+0x2b4>
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	f240 8085 	bls.w	8011030 <__udivmoddi4+0x2b4>
 8010f26:	f1a8 0802 	sub.w	r8, r8, #2
 8010f2a:	4464      	add	r4, ip
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	b29d      	uxth	r5, r3
 8010f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8010f34:	fb09 4413 	mls	r4, r9, r3, r4
 8010f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8010f40:	45a6      	cmp	lr, r4
 8010f42:	d908      	bls.n	8010f56 <__udivmoddi4+0x1da>
 8010f44:	eb1c 0404 	adds.w	r4, ip, r4
 8010f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8010f4c:	d26c      	bcs.n	8011028 <__udivmoddi4+0x2ac>
 8010f4e:	45a6      	cmp	lr, r4
 8010f50:	d96a      	bls.n	8011028 <__udivmoddi4+0x2ac>
 8010f52:	3b02      	subs	r3, #2
 8010f54:	4464      	add	r4, ip
 8010f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8010f5e:	eba4 040e 	sub.w	r4, r4, lr
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	46c8      	mov	r8, r9
 8010f66:	46ae      	mov	lr, r5
 8010f68:	d356      	bcc.n	8011018 <__udivmoddi4+0x29c>
 8010f6a:	d053      	beq.n	8011014 <__udivmoddi4+0x298>
 8010f6c:	b156      	cbz	r6, 8010f84 <__udivmoddi4+0x208>
 8010f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8010f72:	eb64 040e 	sbc.w	r4, r4, lr
 8010f76:	fa04 f707 	lsl.w	r7, r4, r7
 8010f7a:	40ca      	lsrs	r2, r1
 8010f7c:	40cc      	lsrs	r4, r1
 8010f7e:	4317      	orrs	r7, r2
 8010f80:	e9c6 7400 	strd	r7, r4, [r6]
 8010f84:	4618      	mov	r0, r3
 8010f86:	2100      	movs	r1, #0
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	f1c3 0120 	rsb	r1, r3, #32
 8010f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8010f94:	fa20 f201 	lsr.w	r2, r0, r1
 8010f98:	fa25 f101 	lsr.w	r1, r5, r1
 8010f9c:	409d      	lsls	r5, r3
 8010f9e:	432a      	orrs	r2, r5
 8010fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010fa4:	fa1f fe8c 	uxth.w	lr, ip
 8010fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8010fac:	fb07 1510 	mls	r5, r7, r0, r1
 8010fb0:	0c11      	lsrs	r1, r2, #16
 8010fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8010fba:	428d      	cmp	r5, r1
 8010fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8010fc0:	d908      	bls.n	8010fd4 <__udivmoddi4+0x258>
 8010fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8010fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8010fca:	d22f      	bcs.n	801102c <__udivmoddi4+0x2b0>
 8010fcc:	428d      	cmp	r5, r1
 8010fce:	d92d      	bls.n	801102c <__udivmoddi4+0x2b0>
 8010fd0:	3802      	subs	r0, #2
 8010fd2:	4461      	add	r1, ip
 8010fd4:	1b49      	subs	r1, r1, r5
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8010fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8010fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8010fe8:	4291      	cmp	r1, r2
 8010fea:	d908      	bls.n	8010ffe <__udivmoddi4+0x282>
 8010fec:	eb1c 0202 	adds.w	r2, ip, r2
 8010ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8010ff4:	d216      	bcs.n	8011024 <__udivmoddi4+0x2a8>
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	d914      	bls.n	8011024 <__udivmoddi4+0x2a8>
 8010ffa:	3d02      	subs	r5, #2
 8010ffc:	4462      	add	r2, ip
 8010ffe:	1a52      	subs	r2, r2, r1
 8011000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8011004:	e738      	b.n	8010e78 <__udivmoddi4+0xfc>
 8011006:	4631      	mov	r1, r6
 8011008:	4630      	mov	r0, r6
 801100a:	e708      	b.n	8010e1e <__udivmoddi4+0xa2>
 801100c:	4639      	mov	r1, r7
 801100e:	e6e6      	b.n	8010dde <__udivmoddi4+0x62>
 8011010:	4610      	mov	r0, r2
 8011012:	e6fb      	b.n	8010e0c <__udivmoddi4+0x90>
 8011014:	4548      	cmp	r0, r9
 8011016:	d2a9      	bcs.n	8010f6c <__udivmoddi4+0x1f0>
 8011018:	ebb9 0802 	subs.w	r8, r9, r2
 801101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8011020:	3b01      	subs	r3, #1
 8011022:	e7a3      	b.n	8010f6c <__udivmoddi4+0x1f0>
 8011024:	4645      	mov	r5, r8
 8011026:	e7ea      	b.n	8010ffe <__udivmoddi4+0x282>
 8011028:	462b      	mov	r3, r5
 801102a:	e794      	b.n	8010f56 <__udivmoddi4+0x1da>
 801102c:	4640      	mov	r0, r8
 801102e:	e7d1      	b.n	8010fd4 <__udivmoddi4+0x258>
 8011030:	46d0      	mov	r8, sl
 8011032:	e77b      	b.n	8010f2c <__udivmoddi4+0x1b0>
 8011034:	3d02      	subs	r5, #2
 8011036:	4462      	add	r2, ip
 8011038:	e732      	b.n	8010ea0 <__udivmoddi4+0x124>
 801103a:	4608      	mov	r0, r1
 801103c:	e70a      	b.n	8010e54 <__udivmoddi4+0xd8>
 801103e:	4464      	add	r4, ip
 8011040:	3802      	subs	r0, #2
 8011042:	e742      	b.n	8010eca <__udivmoddi4+0x14e>

08011044 <__aeabi_idiv0>:
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop

08011048 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0

}
 801104c:	bf00      	nop
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8011056:	b480      	push	{r7}
 8011058:	af00      	add	r7, sp, #0
return 0;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
	...

08011068 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a0e      	ldr	r2, [pc, #56]	; (80110b4 <HAL_UARTEx_RxEventCallback+0x4c>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d116      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801107e:	887b      	ldrh	r3, [r7, #2]
 8011080:	2b18      	cmp	r3, #24
 8011082:	d113      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011084:	4b0c      	ldr	r3, [pc, #48]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f00f f83d 	bl	8020108 <osMessageQueueGetCount>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	2300      	movs	r3, #0
 801109a:	2200      	movs	r2, #0
 801109c:	4907      	ldr	r1, [pc, #28]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 801109e:	f00e ff75 	bl	801ff8c <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110a2:	2218      	movs	r2, #24
 80110a4:	4905      	ldr	r1, [pc, #20]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 80110a6:	4806      	ldr	r0, [pc, #24]	; (80110c0 <HAL_UARTEx_RxEventCallback+0x58>)
 80110a8:	f006 f96a 	bl	8017380 <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	40004400 	.word	0x40004400
 80110b8:	20000434 	.word	0x20000434
 80110bc:	20000460 	.word	0x20000460
 80110c0:	200003cc 	.word	0x200003cc

080110c4 <EthMutexTake>:

void EthMutexTake(void){
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <EthMutexTake+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f04f 31ff 	mov.w	r1, #4294967295
 80110d0:	4618      	mov	r0, r3
 80110d2:	f00e fe60 	bl	801fd96 <osMutexAcquire>
}
 80110d6:	bf00      	nop
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000450 	.word	0x20000450

080110e0 <EthMutexRelease>:

void EthMutexRelease(void){
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110e4:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <EthMutexRelease+0x14>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f00e fe9f 	bl	801fe2c <osMutexRelease>
}
 80110ee:	bf00      	nop
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000450 	.word	0x20000450

080110f8 <LfsMutexTake>:

void LfsMutexTake(void){
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80110fc:	4b04      	ldr	r3, [pc, #16]	; (8011110 <LfsMutexTake+0x18>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f04f 31ff 	mov.w	r1, #4294967295
 8011104:	4618      	mov	r0, r3
 8011106:	f00e fe46 	bl	801fd96 <osMutexAcquire>
}
 801110a:	bf00      	nop
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000454 	.word	0x20000454

08011114 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011118:	4b03      	ldr	r3, [pc, #12]	; (8011128 <LfsMutexRelease+0x14>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f00e fe85 	bl	801fe2c <osMutexRelease>
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20000454 	.word	0x20000454

0801112c <SocketMutexTake>:

void SocketMutexTake(void){
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 8011130:	4b04      	ldr	r3, [pc, #16]	; (8011144 <SocketMutexTake+0x18>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f04f 31ff 	mov.w	r1, #4294967295
 8011138:	4618      	mov	r0, r3
 801113a:	f00e fe2c 	bl	801fd96 <osMutexAcquire>
}
 801113e:	bf00      	nop
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20000458 	.word	0x20000458

08011148 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 801114c:	4b03      	ldr	r3, [pc, #12]	; (801115c <SocketMutexRelease+0x14>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4618      	mov	r0, r3
 8011152:	f00e fe6b 	bl	801fe2c <osMutexRelease>
}
 8011156:	bf00      	nop
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	20000458 	.word	0x20000458

08011160 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8011160:	b580      	push	{r7, lr}
 8011162:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011164:	4b04      	ldr	r3, [pc, #16]	; (8011178 <ServiceSockMutexTake+0x18>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f04f 31ff 	mov.w	r1, #4294967295
 801116c:	4618      	mov	r0, r3
 801116e:	f00e fe12 	bl	801fd96 <osMutexAcquire>
}
 8011172:	bf00      	nop
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	2000045c 	.word	0x2000045c

0801117c <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8011180:	4b03      	ldr	r3, [pc, #12]	; (8011190 <ServiceSockMutexRelease+0x14>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f00e fe51 	bl	801fe2c <osMutexRelease>
}
 801118a:	bf00      	nop
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	2000045c 	.word	0x2000045c

08011194 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 8011198:	2200      	movs	r2, #0
 801119a:	2102      	movs	r1, #2
 801119c:	4802      	ldr	r0, [pc, #8]	; (80111a8 <PowerON_HLW8032+0x14>)
 801119e:	f004 fb71 	bl	8015884 <HAL_GPIO_WritePin>
}
 80111a2:	bf00      	nop
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	40020000 	.word	0x40020000

080111ac <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111b0:	2201      	movs	r2, #1
 80111b2:	2102      	movs	r1, #2
 80111b4:	4802      	ldr	r0, [pc, #8]	; (80111c0 <PowerOFF_HLW8032+0x14>)
 80111b6:	f004 fb65 	bl	8015884 <HAL_GPIO_WritePin>
}
 80111ba:	bf00      	nop
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	40020000 	.word	0x40020000

080111c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
}
 80111ca:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111cc:	4b57      	ldr	r3, [pc, #348]	; (801132c <main+0x168>)
 80111ce:	4a58      	ldr	r2, [pc, #352]	; (8011330 <main+0x16c>)
 80111d0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111d2:	b662      	cpsie	i
}
 80111d4:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111d6:	f003 ffff 	bl	80151d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111da:	f000 f909 	bl	80113f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111de:	4855      	ldr	r0, [pc, #340]	; (8011334 <main+0x170>)
 80111e0:	f00b f98e 	bl	801c500 <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111e4:	f000 fa1a 	bl	801161c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111e8:	f000 f9ec 	bl	80115c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111ec:	f000 f97e 	bl	80114ec <MX_SPI1_Init>
  MX_SPI3_Init();
 80111f0:	f000 f9b2 	bl	8011558 <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 80111f4:	f00e fbc8 	bl	801f988 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 80111f8:	f000 f964 	bl	80114c4 <MX_CRC_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 80111fc:	f00e fbc4 	bl	801f988 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011200:	f00e fc0e 	bl	801fa20 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011204:	484c      	ldr	r0, [pc, #304]	; (8011338 <main+0x174>)
 8011206:	f00e fd40 	bl	801fc8a <osMutexNew>
 801120a:	4603      	mov	r3, r0
 801120c:	4a4b      	ldr	r2, [pc, #300]	; (801133c <main+0x178>)
 801120e:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011210:	484b      	ldr	r0, [pc, #300]	; (8011340 <main+0x17c>)
 8011212:	f00e fd3a 	bl	801fc8a <osMutexNew>
 8011216:	4603      	mov	r3, r0
 8011218:	4a4a      	ldr	r2, [pc, #296]	; (8011344 <main+0x180>)
 801121a:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 801121c:	484a      	ldr	r0, [pc, #296]	; (8011348 <main+0x184>)
 801121e:	f00e fd34 	bl	801fc8a <osMutexNew>
 8011222:	4603      	mov	r3, r0
 8011224:	4a49      	ldr	r2, [pc, #292]	; (801134c <main+0x188>)
 8011226:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 8011228:	4849      	ldr	r0, [pc, #292]	; (8011350 <main+0x18c>)
 801122a:	f00e fd2e 	bl	801fc8a <osMutexNew>
 801122e:	4603      	mov	r3, r0
 8011230:	4a48      	ldr	r2, [pc, #288]	; (8011354 <main+0x190>)
 8011232:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011234:	4a48      	ldr	r2, [pc, #288]	; (8011358 <main+0x194>)
 8011236:	211e      	movs	r1, #30
 8011238:	2001      	movs	r0, #1
 801123a:	f00e fe34 	bl	801fea6 <osMessageQueueNew>
 801123e:	4603      	mov	r3, r0
 8011240:	4a46      	ldr	r2, [pc, #280]	; (801135c <main+0x198>)
 8011242:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011244:	4a46      	ldr	r2, [pc, #280]	; (8011360 <main+0x19c>)
 8011246:	2120      	movs	r1, #32
 8011248:	2001      	movs	r0, #1
 801124a:	f00e fe2c 	bl	801fea6 <osMessageQueueNew>
 801124e:	4603      	mov	r3, r0
 8011250:	4a44      	ldr	r2, [pc, #272]	; (8011364 <main+0x1a0>)
 8011252:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011254:	4a44      	ldr	r2, [pc, #272]	; (8011368 <main+0x1a4>)
 8011256:	2124      	movs	r1, #36	; 0x24
 8011258:	2001      	movs	r0, #1
 801125a:	f00e fe24 	bl	801fea6 <osMessageQueueNew>
 801125e:	4603      	mov	r3, r0
 8011260:	4a42      	ldr	r2, [pc, #264]	; (801136c <main+0x1a8>)
 8011262:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011264:	4a42      	ldr	r2, [pc, #264]	; (8011370 <main+0x1ac>)
 8011266:	2108      	movs	r1, #8
 8011268:	2001      	movs	r0, #1
 801126a:	f00e fe1c 	bl	801fea6 <osMessageQueueNew>
 801126e:	4603      	mov	r3, r0
 8011270:	4a40      	ldr	r2, [pc, #256]	; (8011374 <main+0x1b0>)
 8011272:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011274:	4a40      	ldr	r2, [pc, #256]	; (8011378 <main+0x1b4>)
 8011276:	21c6      	movs	r1, #198	; 0xc6
 8011278:	2001      	movs	r0, #1
 801127a:	f00e fe14 	bl	801fea6 <osMessageQueueNew>
 801127e:	4603      	mov	r3, r0
 8011280:	4a3e      	ldr	r2, [pc, #248]	; (801137c <main+0x1b8>)
 8011282:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011284:	4a3e      	ldr	r2, [pc, #248]	; (8011380 <main+0x1bc>)
 8011286:	2102      	movs	r1, #2
 8011288:	2001      	movs	r0, #1
 801128a:	f00e fe0c 	bl	801fea6 <osMessageQueueNew>
 801128e:	4603      	mov	r3, r0
 8011290:	4a3c      	ldr	r2, [pc, #240]	; (8011384 <main+0x1c0>)
 8011292:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 8011294:	4a3c      	ldr	r2, [pc, #240]	; (8011388 <main+0x1c4>)
 8011296:	2104      	movs	r1, #4
 8011298:	2001      	movs	r0, #1
 801129a:	f00e fe04 	bl	801fea6 <osMessageQueueNew>
 801129e:	4603      	mov	r3, r0
 80112a0:	4a3a      	ldr	r2, [pc, #232]	; (801138c <main+0x1c8>)
 80112a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112a4:	4a3a      	ldr	r2, [pc, #232]	; (8011390 <main+0x1cc>)
 80112a6:	2100      	movs	r1, #0
 80112a8:	483a      	ldr	r0, [pc, #232]	; (8011394 <main+0x1d0>)
 80112aa:	f00e fc03 	bl	801fab4 <osThreadNew>
 80112ae:	4603      	mov	r3, r0
 80112b0:	4a39      	ldr	r2, [pc, #228]	; (8011398 <main+0x1d4>)
 80112b2:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112b4:	4a39      	ldr	r2, [pc, #228]	; (801139c <main+0x1d8>)
 80112b6:	2100      	movs	r1, #0
 80112b8:	4839      	ldr	r0, [pc, #228]	; (80113a0 <main+0x1dc>)
 80112ba:	f00e fbfb 	bl	801fab4 <osThreadNew>
 80112be:	4603      	mov	r3, r0
 80112c0:	4a38      	ldr	r2, [pc, #224]	; (80113a4 <main+0x1e0>)
 80112c2:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112c4:	4a38      	ldr	r2, [pc, #224]	; (80113a8 <main+0x1e4>)
 80112c6:	2100      	movs	r1, #0
 80112c8:	4838      	ldr	r0, [pc, #224]	; (80113ac <main+0x1e8>)
 80112ca:	f00e fbf3 	bl	801fab4 <osThreadNew>
 80112ce:	4603      	mov	r3, r0
 80112d0:	4a37      	ldr	r2, [pc, #220]	; (80113b0 <main+0x1ec>)
 80112d2:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112d4:	4a37      	ldr	r2, [pc, #220]	; (80113b4 <main+0x1f0>)
 80112d6:	2100      	movs	r1, #0
 80112d8:	4837      	ldr	r0, [pc, #220]	; (80113b8 <main+0x1f4>)
 80112da:	f00e fbeb 	bl	801fab4 <osThreadNew>
 80112de:	4603      	mov	r3, r0
 80112e0:	4a36      	ldr	r2, [pc, #216]	; (80113bc <main+0x1f8>)
 80112e2:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112e4:	4a36      	ldr	r2, [pc, #216]	; (80113c0 <main+0x1fc>)
 80112e6:	2100      	movs	r1, #0
 80112e8:	4836      	ldr	r0, [pc, #216]	; (80113c4 <main+0x200>)
 80112ea:	f00e fbe3 	bl	801fab4 <osThreadNew>
 80112ee:	4603      	mov	r3, r0
 80112f0:	4a35      	ldr	r2, [pc, #212]	; (80113c8 <main+0x204>)
 80112f2:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 80112f4:	4a35      	ldr	r2, [pc, #212]	; (80113cc <main+0x208>)
 80112f6:	2100      	movs	r1, #0
 80112f8:	4835      	ldr	r0, [pc, #212]	; (80113d0 <main+0x20c>)
 80112fa:	f00e fbdb 	bl	801fab4 <osThreadNew>
 80112fe:	4603      	mov	r3, r0
 8011300:	4a34      	ldr	r2, [pc, #208]	; (80113d4 <main+0x210>)
 8011302:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011304:	4a34      	ldr	r2, [pc, #208]	; (80113d8 <main+0x214>)
 8011306:	2100      	movs	r1, #0
 8011308:	4834      	ldr	r0, [pc, #208]	; (80113dc <main+0x218>)
 801130a:	f00e fbd3 	bl	801fab4 <osThreadNew>
 801130e:	4603      	mov	r3, r0
 8011310:	4a33      	ldr	r2, [pc, #204]	; (80113e0 <main+0x21c>)
 8011312:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011314:	4a33      	ldr	r2, [pc, #204]	; (80113e4 <main+0x220>)
 8011316:	2100      	movs	r1, #0
 8011318:	4833      	ldr	r0, [pc, #204]	; (80113e8 <main+0x224>)
 801131a:	f00e fbcb 	bl	801fab4 <osThreadNew>
 801131e:	4603      	mov	r3, r0
 8011320:	4a32      	ldr	r2, [pc, #200]	; (80113ec <main+0x228>)
 8011322:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011324:	f00e fba0 	bl	801fa68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8011328:	e7fe      	b.n	8011328 <main+0x164>
 801132a:	bf00      	nop
 801132c:	e000ed00 	.word	0xe000ed00
 8011330:	08010000 	.word	0x08010000
 8011334:	0801f78d 	.word	0x0801f78d
 8011338:	08033ab8 	.word	0x08033ab8
 801133c:	20000450 	.word	0x20000450
 8011340:	08033ac8 	.word	0x08033ac8
 8011344:	20000454 	.word	0x20000454
 8011348:	08033ad8 	.word	0x08033ad8
 801134c:	20000458 	.word	0x20000458
 8011350:	08033ae8 	.word	0x08033ae8
 8011354:	2000045c 	.word	0x2000045c
 8011358:	08033a10 	.word	0x08033a10
 801135c:	20000434 	.word	0x20000434
 8011360:	08033a28 	.word	0x08033a28
 8011364:	20000438 	.word	0x20000438
 8011368:	08033a40 	.word	0x08033a40
 801136c:	2000043c 	.word	0x2000043c
 8011370:	08033a58 	.word	0x08033a58
 8011374:	20000440 	.word	0x20000440
 8011378:	08033a70 	.word	0x08033a70
 801137c:	20000444 	.word	0x20000444
 8011380:	08033a88 	.word	0x08033a88
 8011384:	20000448 	.word	0x20000448
 8011388:	08033aa0 	.word	0x08033aa0
 801138c:	2000044c 	.word	0x2000044c
 8011390:	080338f0 	.word	0x080338f0
 8011394:	08011711 	.word	0x08011711
 8011398:	20000414 	.word	0x20000414
 801139c:	08033914 	.word	0x08033914
 80113a0:	08011721 	.word	0x08011721
 80113a4:	20000418 	.word	0x20000418
 80113a8:	08033938 	.word	0x08033938
 80113ac:	080118b5 	.word	0x080118b5
 80113b0:	2000041c 	.word	0x2000041c
 80113b4:	0803395c 	.word	0x0803395c
 80113b8:	08011c25 	.word	0x08011c25
 80113bc:	20000420 	.word	0x20000420
 80113c0:	08033980 	.word	0x08033980
 80113c4:	08011c61 	.word	0x08011c61
 80113c8:	20000424 	.word	0x20000424
 80113cc:	080339a4 	.word	0x080339a4
 80113d0:	080121dd 	.word	0x080121dd
 80113d4:	20000428 	.word	0x20000428
 80113d8:	080339c8 	.word	0x080339c8
 80113dc:	08012279 	.word	0x08012279
 80113e0:	2000042c 	.word	0x2000042c
 80113e4:	080339ec 	.word	0x080339ec
 80113e8:	080123fd 	.word	0x080123fd
 80113ec:	20000430 	.word	0x20000430

080113f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b094      	sub	sp, #80	; 0x50
 80113f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80113f6:	f107 0320 	add.w	r3, r7, #32
 80113fa:	2230      	movs	r2, #48	; 0x30
 80113fc:	2100      	movs	r1, #0
 80113fe:	4618      	mov	r0, r3
 8011400:	f01b ffba 	bl	802d378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011404:	f107 030c 	add.w	r3, r7, #12
 8011408:	2200      	movs	r2, #0
 801140a:	601a      	str	r2, [r3, #0]
 801140c:	605a      	str	r2, [r3, #4]
 801140e:	609a      	str	r2, [r3, #8]
 8011410:	60da      	str	r2, [r3, #12]
 8011412:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011414:	2300      	movs	r3, #0
 8011416:	60bb      	str	r3, [r7, #8]
 8011418:	4b28      	ldr	r3, [pc, #160]	; (80114bc <SystemClock_Config+0xcc>)
 801141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141c:	4a27      	ldr	r2, [pc, #156]	; (80114bc <SystemClock_Config+0xcc>)
 801141e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011422:	6413      	str	r3, [r2, #64]	; 0x40
 8011424:	4b25      	ldr	r3, [pc, #148]	; (80114bc <SystemClock_Config+0xcc>)
 8011426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801142c:	60bb      	str	r3, [r7, #8]
 801142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8011430:	2300      	movs	r3, #0
 8011432:	607b      	str	r3, [r7, #4]
 8011434:	4b22      	ldr	r3, [pc, #136]	; (80114c0 <SystemClock_Config+0xd0>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801143c:	4a20      	ldr	r2, [pc, #128]	; (80114c0 <SystemClock_Config+0xd0>)
 801143e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011442:	6013      	str	r3, [r2, #0]
 8011444:	4b1e      	ldr	r3, [pc, #120]	; (80114c0 <SystemClock_Config+0xd0>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801144c:	607b      	str	r3, [r7, #4]
 801144e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011450:	2301      	movs	r3, #1
 8011452:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011458:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801145a:	2302      	movs	r3, #2
 801145c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801145e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8011464:	2304      	movs	r3, #4
 8011466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8011468:	2354      	movs	r3, #84	; 0x54
 801146a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801146c:	2302      	movs	r3, #2
 801146e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011470:	2304      	movs	r3, #4
 8011472:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011474:	f107 0320 	add.w	r3, r7, #32
 8011478:	4618      	mov	r0, r3
 801147a:	f004 fa1d 	bl	80158b8 <HAL_RCC_OscConfig>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d001      	beq.n	8011488 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8011484:	f001 f8fa 	bl	801267c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011488:	230f      	movs	r3, #15
 801148a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801148c:	2302      	movs	r3, #2
 801148e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011490:	2300      	movs	r3, #0
 8011492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8011494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011498:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801149a:	2300      	movs	r3, #0
 801149c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801149e:	f107 030c 	add.w	r3, r7, #12
 80114a2:	2102      	movs	r1, #2
 80114a4:	4618      	mov	r0, r3
 80114a6:	f004 fc7f 	bl	8015da8 <HAL_RCC_ClockConfig>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80114b0:	f001 f8e4 	bl	801267c <Error_Handler>
  }
}
 80114b4:	bf00      	nop
 80114b6:	3750      	adds	r7, #80	; 0x50
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	40023800 	.word	0x40023800
 80114c0:	40007000 	.word	0x40007000

080114c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80114c8:	4b06      	ldr	r3, [pc, #24]	; (80114e4 <MX_CRC_Init+0x20>)
 80114ca:	4a07      	ldr	r2, [pc, #28]	; (80114e8 <MX_CRC_Init+0x24>)
 80114cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80114ce:	4805      	ldr	r0, [pc, #20]	; (80114e4 <MX_CRC_Init+0x20>)
 80114d0:	f003 ffa6 	bl	8015420 <HAL_CRC_Init>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80114da:	f001 f8cf 	bl	801267c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80114de:	bf00      	nop
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	bf00      	nop
 80114e4:	20000314 	.word	0x20000314
 80114e8:	40023000 	.word	0x40023000

080114ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80114f0:	4b17      	ldr	r3, [pc, #92]	; (8011550 <MX_SPI1_Init+0x64>)
 80114f2:	4a18      	ldr	r2, [pc, #96]	; (8011554 <MX_SPI1_Init+0x68>)
 80114f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80114f6:	4b16      	ldr	r3, [pc, #88]	; (8011550 <MX_SPI1_Init+0x64>)
 80114f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80114fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80114fe:	4b14      	ldr	r3, [pc, #80]	; (8011550 <MX_SPI1_Init+0x64>)
 8011500:	2200      	movs	r2, #0
 8011502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011504:	4b12      	ldr	r3, [pc, #72]	; (8011550 <MX_SPI1_Init+0x64>)
 8011506:	2200      	movs	r2, #0
 8011508:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801150a:	4b11      	ldr	r3, [pc, #68]	; (8011550 <MX_SPI1_Init+0x64>)
 801150c:	2202      	movs	r2, #2
 801150e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011510:	4b0f      	ldr	r3, [pc, #60]	; (8011550 <MX_SPI1_Init+0x64>)
 8011512:	2201      	movs	r2, #1
 8011514:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011516:	4b0e      	ldr	r3, [pc, #56]	; (8011550 <MX_SPI1_Init+0x64>)
 8011518:	f44f 7200 	mov.w	r2, #512	; 0x200
 801151c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801151e:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <MX_SPI1_Init+0x64>)
 8011520:	2200      	movs	r2, #0
 8011522:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011524:	4b0a      	ldr	r3, [pc, #40]	; (8011550 <MX_SPI1_Init+0x64>)
 8011526:	2200      	movs	r2, #0
 8011528:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801152a:	4b09      	ldr	r3, [pc, #36]	; (8011550 <MX_SPI1_Init+0x64>)
 801152c:	2200      	movs	r2, #0
 801152e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011530:	4b07      	ldr	r3, [pc, #28]	; (8011550 <MX_SPI1_Init+0x64>)
 8011532:	2200      	movs	r2, #0
 8011534:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8011536:	4b06      	ldr	r3, [pc, #24]	; (8011550 <MX_SPI1_Init+0x64>)
 8011538:	220a      	movs	r2, #10
 801153a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801153c:	4804      	ldr	r0, [pc, #16]	; (8011550 <MX_SPI1_Init+0x64>)
 801153e:	f004 fe85 	bl	801624c <HAL_SPI_Init>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d001      	beq.n	801154c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8011548:	f001 f898 	bl	801267c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801154c:	bf00      	nop
 801154e:	bd80      	pop	{r7, pc}
 8011550:	2000031c 	.word	0x2000031c
 8011554:	40013000 	.word	0x40013000

08011558 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 801155c:	4b17      	ldr	r3, [pc, #92]	; (80115bc <MX_SPI3_Init+0x64>)
 801155e:	4a18      	ldr	r2, [pc, #96]	; (80115c0 <MX_SPI3_Init+0x68>)
 8011560:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8011562:	4b16      	ldr	r3, [pc, #88]	; (80115bc <MX_SPI3_Init+0x64>)
 8011564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011568:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801156a:	4b14      	ldr	r3, [pc, #80]	; (80115bc <MX_SPI3_Init+0x64>)
 801156c:	2200      	movs	r2, #0
 801156e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8011570:	4b12      	ldr	r3, [pc, #72]	; (80115bc <MX_SPI3_Init+0x64>)
 8011572:	2200      	movs	r2, #0
 8011574:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8011576:	4b11      	ldr	r3, [pc, #68]	; (80115bc <MX_SPI3_Init+0x64>)
 8011578:	2202      	movs	r2, #2
 801157a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801157c:	4b0f      	ldr	r3, [pc, #60]	; (80115bc <MX_SPI3_Init+0x64>)
 801157e:	2201      	movs	r2, #1
 8011580:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011582:	4b0e      	ldr	r3, [pc, #56]	; (80115bc <MX_SPI3_Init+0x64>)
 8011584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011588:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801158a:	4b0c      	ldr	r3, [pc, #48]	; (80115bc <MX_SPI3_Init+0x64>)
 801158c:	2200      	movs	r2, #0
 801158e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011590:	4b0a      	ldr	r3, [pc, #40]	; (80115bc <MX_SPI3_Init+0x64>)
 8011592:	2200      	movs	r2, #0
 8011594:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8011596:	4b09      	ldr	r3, [pc, #36]	; (80115bc <MX_SPI3_Init+0x64>)
 8011598:	2200      	movs	r2, #0
 801159a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801159c:	4b07      	ldr	r3, [pc, #28]	; (80115bc <MX_SPI3_Init+0x64>)
 801159e:	2200      	movs	r2, #0
 80115a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80115a2:	4b06      	ldr	r3, [pc, #24]	; (80115bc <MX_SPI3_Init+0x64>)
 80115a4:	220a      	movs	r2, #10
 80115a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80115a8:	4804      	ldr	r0, [pc, #16]	; (80115bc <MX_SPI3_Init+0x64>)
 80115aa:	f004 fe4f 	bl	801624c <HAL_SPI_Init>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80115b4:	f001 f862 	bl	801267c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80115b8:	bf00      	nop
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	20000374 	.word	0x20000374
 80115c0:	40003c00 	.word	0x40003c00

080115c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80115c8:	4b12      	ldr	r3, [pc, #72]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115ca:	4a13      	ldr	r2, [pc, #76]	; (8011618 <MX_USART2_UART_Init+0x54>)
 80115cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 80115ce:	4b11      	ldr	r3, [pc, #68]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115d0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80115d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80115d6:	4b0f      	ldr	r3, [pc, #60]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80115dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80115de:	4b0d      	ldr	r3, [pc, #52]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80115e4:	4b0b      	ldr	r3, [pc, #44]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80115ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80115ec:	4b09      	ldr	r3, [pc, #36]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115ee:	2204      	movs	r2, #4
 80115f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80115f2:	4b08      	ldr	r3, [pc, #32]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115f4:	2200      	movs	r2, #0
 80115f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80115f8:	4b06      	ldr	r3, [pc, #24]	; (8011614 <MX_USART2_UART_Init+0x50>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80115fe:	4805      	ldr	r0, [pc, #20]	; (8011614 <MX_USART2_UART_Init+0x50>)
 8011600:	f005 fe6e 	bl	80172e0 <HAL_UART_Init>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 801160a:	f001 f837 	bl	801267c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801160e:	bf00      	nop
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	200003cc 	.word	0x200003cc
 8011618:	40004400 	.word	0x40004400

0801161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b088      	sub	sp, #32
 8011620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011622:	f107 030c 	add.w	r3, r7, #12
 8011626:	2200      	movs	r2, #0
 8011628:	601a      	str	r2, [r3, #0]
 801162a:	605a      	str	r2, [r3, #4]
 801162c:	609a      	str	r2, [r3, #8]
 801162e:	60da      	str	r2, [r3, #12]
 8011630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011632:	2300      	movs	r3, #0
 8011634:	60bb      	str	r3, [r7, #8]
 8011636:	4b33      	ldr	r3, [pc, #204]	; (8011704 <MX_GPIO_Init+0xe8>)
 8011638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801163a:	4a32      	ldr	r2, [pc, #200]	; (8011704 <MX_GPIO_Init+0xe8>)
 801163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011640:	6313      	str	r3, [r2, #48]	; 0x30
 8011642:	4b30      	ldr	r3, [pc, #192]	; (8011704 <MX_GPIO_Init+0xe8>)
 8011644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801164a:	60bb      	str	r3, [r7, #8]
 801164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801164e:	2300      	movs	r3, #0
 8011650:	607b      	str	r3, [r7, #4]
 8011652:	4b2c      	ldr	r3, [pc, #176]	; (8011704 <MX_GPIO_Init+0xe8>)
 8011654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011656:	4a2b      	ldr	r2, [pc, #172]	; (8011704 <MX_GPIO_Init+0xe8>)
 8011658:	f043 0301 	orr.w	r3, r3, #1
 801165c:	6313      	str	r3, [r2, #48]	; 0x30
 801165e:	4b29      	ldr	r3, [pc, #164]	; (8011704 <MX_GPIO_Init+0xe8>)
 8011660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011662:	f003 0301 	and.w	r3, r3, #1
 8011666:	607b      	str	r3, [r7, #4]
 8011668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801166a:	2300      	movs	r3, #0
 801166c:	603b      	str	r3, [r7, #0]
 801166e:	4b25      	ldr	r3, [pc, #148]	; (8011704 <MX_GPIO_Init+0xe8>)
 8011670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011672:	4a24      	ldr	r2, [pc, #144]	; (8011704 <MX_GPIO_Init+0xe8>)
 8011674:	f043 0302 	orr.w	r3, r3, #2
 8011678:	6313      	str	r3, [r2, #48]	; 0x30
 801167a:	4b22      	ldr	r3, [pc, #136]	; (8011704 <MX_GPIO_Init+0xe8>)
 801167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801167e:	f003 0302 	and.w	r3, r3, #2
 8011682:	603b      	str	r3, [r7, #0]
 8011684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 8011686:	2201      	movs	r2, #1
 8011688:	2112      	movs	r1, #18
 801168a:	481f      	ldr	r0, [pc, #124]	; (8011708 <MX_GPIO_Init+0xec>)
 801168c:	f004 f8fa 	bl	8015884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 8011690:	2200      	movs	r2, #0
 8011692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011696:	481c      	ldr	r0, [pc, #112]	; (8011708 <MX_GPIO_Init+0xec>)
 8011698:	f004 f8f4 	bl	8015884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 801169c:	2200      	movs	r2, #0
 801169e:	2140      	movs	r1, #64	; 0x40
 80116a0:	481a      	ldr	r0, [pc, #104]	; (801170c <MX_GPIO_Init+0xf0>)
 80116a2:	f004 f8ef 	bl	8015884 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 80116a6:	f248 0302 	movw	r3, #32770	; 0x8002
 80116aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80116ac:	2301      	movs	r3, #1
 80116ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116b0:	2300      	movs	r3, #0
 80116b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80116b4:	2300      	movs	r3, #0
 80116b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80116b8:	f107 030c 	add.w	r3, r7, #12
 80116bc:	4619      	mov	r1, r3
 80116be:	4812      	ldr	r0, [pc, #72]	; (8011708 <MX_GPIO_Init+0xec>)
 80116c0:	f003 ff5c 	bl	801557c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 80116c4:	2310      	movs	r3, #16
 80116c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80116c8:	2301      	movs	r3, #1
 80116ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116cc:	2300      	movs	r3, #0
 80116ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80116d0:	2303      	movs	r3, #3
 80116d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 80116d4:	f107 030c 	add.w	r3, r7, #12
 80116d8:	4619      	mov	r1, r3
 80116da:	480b      	ldr	r0, [pc, #44]	; (8011708 <MX_GPIO_Init+0xec>)
 80116dc:	f003 ff4e 	bl	801557c <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 80116e0:	2340      	movs	r3, #64	; 0x40
 80116e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80116e4:	2301      	movs	r3, #1
 80116e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116e8:	2300      	movs	r3, #0
 80116ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80116ec:	2300      	movs	r3, #0
 80116ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 80116f0:	f107 030c 	add.w	r3, r7, #12
 80116f4:	4619      	mov	r1, r3
 80116f6:	4805      	ldr	r0, [pc, #20]	; (801170c <MX_GPIO_Init+0xf0>)
 80116f8:	f003 ff40 	bl	801557c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80116fc:	bf00      	nop
 80116fe:	3720      	adds	r7, #32
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	40023800 	.word	0x40023800
 8011708:	40020000 	.word	0x40020000
 801170c:	40020400 	.word	0x40020400

08011710 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8011718:	2001      	movs	r0, #1
 801171a:	f00e fa9b 	bl	801fc54 <osDelay>
 801171e:	e7fb      	b.n	8011718 <StartDefaultTask+0x8>

08011720 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b098      	sub	sp, #96	; 0x60
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 8011728:	2300      	movs	r3, #0
 801172a:	65fb      	str	r3, [r7, #92]	; 0x5c


	PowerSett.resistance = 0.001;
 801172c:	4b57      	ldr	r3, [pc, #348]	; (801188c <vSensorsTask+0x16c>)
 801172e:	613b      	str	r3, [r7, #16]
	PowerSett.save = 0;
 8011730:	2300      	movs	r3, #0
 8011732:	733b      	strb	r3, [r7, #12]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 8011734:	f241 3088 	movw	r0, #5000	; 0x1388
 8011738:	f00e fa8c 	bl	801fc54 <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 801173c:	4b54      	ldr	r3, [pc, #336]	; (8011890 <vSensorsTask+0x170>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f107 010c 	add.w	r1, r7, #12
 8011744:	2200      	movs	r2, #0
 8011746:	4618      	mov	r0, r3
 8011748:	f00f fb60 	bl	8020e0c <xQueuePeek>
	PowerOFF_HLW8032();
 801174c:	f7ff fd2e 	bl	80111ac <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 8011750:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011754:	f00e fa7e 	bl	801fc54 <osDelay>
	USART2->DR; //read data from register if exist
 8011758:	4b4e      	ldr	r3, [pc, #312]	; (8011894 <vSensorsTask+0x174>)
 801175a:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 801175c:	2218      	movs	r2, #24
 801175e:	494e      	ldr	r1, [pc, #312]	; (8011898 <vSensorsTask+0x178>)
 8011760:	484e      	ldr	r0, [pc, #312]	; (801189c <vSensorsTask+0x17c>)
 8011762:	f005 fe0d 	bl	8017380 <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 8011766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801176a:	f00e fa73 	bl	801fc54 <osDelay>
	PowerON_HLW8032();
 801176e:	f7ff fd11 	bl	8011194 <PowerON_HLW8032>

	sens_task_start:

	InitHLW8032(1880000, 1000, PowerSett.resistance);
 8011772:	edd7 7a04 	vldr	s15, [r7, #16]
 8011776:	eeb0 0a67 	vmov.f32	s0, s15
 801177a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801177e:	4848      	ldr	r0, [pc, #288]	; (80118a0 <vSensorsTask+0x180>)
 8011780:	f002 ff24 	bl	80145cc <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 8011784:	4b47      	ldr	r3, [pc, #284]	; (80118a4 <vSensorsTask+0x184>)
 8011786:	6818      	ldr	r0, [r3, #0]
 8011788:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801178c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011790:	2200      	movs	r2, #0
 8011792:	f00e fc5b 	bl	802004c <osMessageQueueGet>
 8011796:	4603      	mov	r3, r0
 8011798:	f113 0f02 	cmn.w	r3, #2
 801179c:	d04c      	beq.n	8011838 <vSensorsTask+0x118>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 801179e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80117a2:	4618      	mov	r0, r3
 80117a4:	f002 ff84 	bl	80146b0 <RecvRawString>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d155      	bne.n	801185a <vSensorsTask+0x13a>
			test_kWh_from_read 				= GetKWh();
 80117ae:	f003 f9af 	bl	8014b10 <GetKWh>
 80117b2:	eef0 7a40 	vmov.f32	s15, s0
 80117b6:	4b3c      	ldr	r3, [pc, #240]	; (80118a8 <vSensorsTask+0x188>)
 80117b8:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 80117bc:	f003 f9a8 	bl	8014b10 <GetKWh>
 80117c0:	eeb0 7a40 	vmov.f32	s14, s0
 80117c4:	4b39      	ldr	r3, [pc, #228]	; (80118ac <vSensorsTask+0x18c>)
 80117c6:	edd3 7a00 	vldr	s15, [r3]
 80117ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117ce:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Voltage 				= GetVoltage();
 80117d2:	f003 f865 	bl	80148a0 <GetVoltage>
 80117d6:	eef0 7a40 	vmov.f32	s15, s0
 80117da:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.ApparPower 			= GetApparentPower();
 80117de:	f003 f90f 	bl	8014a00 <GetApparentPower>
 80117e2:	eef0 7a40 	vmov.f32	s15, s0
 80117e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.ActivPower 			= GetActivePower();
 80117ea:	f003 f8cb 	bl	8014984 <GetActivePower>
 80117ee:	eef0 7a40 	vmov.f32	s15, s0
 80117f2:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.Current 				= GetCurrent();
 80117f6:	f003 f89f 	bl	8014938 <GetCurrent>
 80117fa:	eef0 7a40 	vmov.f32	s15, s0
 80117fe:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.PowerFactor			= PowerFactor();
 8011802:	f003 f925 	bl	8014a50 <PowerFactor>
 8011806:	eef0 7a40 	vmov.f32	s15, s0
 801180a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			PowerData.test_pulse_counter 	= GetTestPulse();
 801180e:	f003 f95b 	bl	8014ac8 <GetTestPulse>
 8011812:	4603      	mov	r3, r0
 8011814:	62fb      	str	r3, [r7, #44]	; 0x2c
			PowerData.readed_counter 		= GetCountedPulse();
 8011816:	f003 f963 	bl	8014ae0 <GetCountedPulse>
 801181a:	4603      	mov	r3, r0
 801181c:	633b      	str	r3, [r7, #48]	; 0x30
			PowerData.PF_reg				= GetPFReg();
 801181e:	f003 f96b 	bl	8014af8 <GetPFReg>
 8011822:	4603      	mov	r3, r0
 8011824:	637b      	str	r3, [r7, #52]	; 0x34
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 8011826:	4b22      	ldr	r3, [pc, #136]	; (80118b0 <vSensorsTask+0x190>)
 8011828:	6818      	ldr	r0, [r3, #0]
 801182a:	f107 0114 	add.w	r1, r7, #20
 801182e:	2302      	movs	r3, #2
 8011830:	2200      	movs	r2, #0
 8011832:	f00e ff65 	bl	8020700 <xQueueGenericSend>
 8011836:	e010      	b.n	801185a <vSensorsTask+0x13a>
		}
	}else{
		count++;
 8011838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801183a:	3301      	adds	r3, #1
 801183c:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 801183e:	e004      	b.n	801184a <vSensorsTask+0x12a>
			temp = USART2->DR;
 8011840:	4b14      	ldr	r3, [pc, #80]	; (8011894 <vSensorsTask+0x174>)
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	65bb      	str	r3, [r7, #88]	; 0x58
			osThreadYield();
 8011846:	f00e f9e5 	bl	801fc14 <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 801184a:	2218      	movs	r2, #24
 801184c:	4912      	ldr	r1, [pc, #72]	; (8011898 <vSensorsTask+0x178>)
 801184e:	4813      	ldr	r0, [pc, #76]	; (801189c <vSensorsTask+0x17c>)
 8011850:	f005 fd96 	bl	8017380 <HAL_UARTEx_ReceiveToIdle_IT>
 8011854:	4603      	mov	r3, r0
 8011856:	2b01      	cmp	r3, #1
 8011858:	d0f2      	beq.n	8011840 <vSensorsTask+0x120>
	}

	}
	osThreadYield();
 801185a:	f00e f9db 	bl	801fc14 <osThreadYield>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 801185e:	4b0c      	ldr	r3, [pc, #48]	; (8011890 <vSensorsTask+0x170>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f107 010c 	add.w	r1, r7, #12
 8011866:	2200      	movs	r2, #0
 8011868:	4618      	mov	r0, r3
 801186a:	f00f facf 	bl	8020e0c <xQueuePeek>
    if (PowerSett.save == 1){
 801186e:	7b3b      	ldrb	r3, [r7, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d087      	beq.n	8011784 <vSensorsTask+0x64>
    	PowerSett.save = 0;
 8011874:	2300      	movs	r3, #0
 8011876:	733b      	strb	r3, [r7, #12]
    	xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);
 8011878:	4b05      	ldr	r3, [pc, #20]	; (8011890 <vSensorsTask+0x170>)
 801187a:	6818      	ldr	r0, [r3, #0]
 801187c:	f107 010c 	add.w	r1, r7, #12
 8011880:	2302      	movs	r3, #2
 8011882:	2200      	movs	r2, #0
 8011884:	f00e ff3c 	bl	8020700 <xQueueGenericSend>
    	goto sens_task_start;
 8011888:	e773      	b.n	8011772 <vSensorsTask+0x52>
 801188a:	bf00      	nop
 801188c:	3a83126f 	.word	0x3a83126f
 8011890:	20000440 	.word	0x20000440
 8011894:	40004400 	.word	0x40004400
 8011898:	20000460 	.word	0x20000460
 801189c:	200003cc 	.word	0x200003cc
 80118a0:	001cafc0 	.word	0x001cafc0
 80118a4:	20000434 	.word	0x20000434
 80118a8:	20000484 	.word	0x20000484
 80118ac:	20000480 	.word	0x20000480
 80118b0:	2000043c 	.word	0x2000043c

080118b4 <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 80118b4:	b590      	push	{r4, r7, lr}
 80118b6:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 80118ba:	af12      	add	r7, sp, #72	; 0x48
 80118bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80118c0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80118c4:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 80118c6:	2314      	movs	r3, #20
 80118c8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80118cc:	2300      	movs	r3, #0
 80118ce:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 80118d2:	f04f 0300 	mov.w	r3, #0
 80118d6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80118da:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 80118dc:	4cbd      	ldr	r4, [pc, #756]	; (8011bd4 <vRW_Settings_Tas+0x320>)
 80118de:	4668      	mov	r0, sp
 80118e0:	f104 0310 	add.w	r3, r4, #16
 80118e4:	2248      	movs	r2, #72	; 0x48
 80118e6:	4619      	mov	r1, r3
 80118e8:	f01b ff1b 	bl	802d722 <memcpy>
 80118ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80118f0:	f003 fc1e 	bl	8015130 <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 80118f4:	4bb8      	ldr	r3, [pc, #736]	; (8011bd8 <vRW_Settings_Tas+0x324>)
 80118f6:	4ab9      	ldr	r2, [pc, #740]	; (8011bdc <vRW_Settings_Tas+0x328>)
 80118f8:	49b9      	ldr	r1, [pc, #740]	; (8011be0 <vRW_Settings_Tas+0x32c>)
 80118fa:	48ba      	ldr	r0, [pc, #744]	; (8011be4 <vRW_Settings_Tas+0x330>)
 80118fc:	f003 f992 	bl	8014c24 <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011900:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011904:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8011908:	f507 7041 	add.w	r0, r7, #772	; 0x304
 801190c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011910:	f018 ff58 	bl	802a7c4 <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8011914:	49b4      	ldr	r1, [pc, #720]	; (8011be8 <vRW_Settings_Tas+0x334>)
 8011916:	48b5      	ldr	r0, [pc, #724]	; (8011bec <vRW_Settings_Tas+0x338>)
 8011918:	f018 ff38 	bl	802a78c <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 801191c:	f018 ff8a 	bl	802a834 <spi_fs_mount>
 8011920:	4603      	mov	r3, r0
 8011922:	2b00      	cmp	r3, #0
 8011924:	da03      	bge.n	801192e <vRW_Settings_Tas+0x7a>
		spi_fs_format();
 8011926:	f018 ffad 	bl	802a884 <spi_fs_format>
		spi_fs_mount();
 801192a:	f018 ff83 	bl	802a834 <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 801192e:	48b0      	ldr	r0, [pc, #704]	; (8011bf0 <vRW_Settings_Tas+0x33c>)
 8011930:	f019 f832 	bl	802a998 <spi_fs_file_size>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	dd0f      	ble.n	801195a <vRW_Settings_Tas+0xa6>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 801193a:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 801193e:	2308      	movs	r3, #8
 8011940:	2200      	movs	r2, #0
 8011942:	48ab      	ldr	r0, [pc, #684]	; (8011bf0 <vRW_Settings_Tas+0x33c>)
 8011944:	f018 ffaa 	bl	802a89c <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011948:	4baa      	ldr	r3, [pc, #680]	; (8011bf4 <vRW_Settings_Tas+0x340>)
 801194a:	6818      	ldr	r0, [r3, #0]
 801194c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011950:	2302      	movs	r3, #2
 8011952:	2200      	movs	r2, #0
 8011954:	f00e fed4 	bl	8020700 <xQueueGenericSend>
 8011958:	e013      	b.n	8011982 <vRW_Settings_Tas+0xce>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 801195a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801195e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011962:	4aa5      	ldr	r2, [pc, #660]	; (8011bf8 <vRW_Settings_Tas+0x344>)
 8011964:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 8011966:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801196a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801196e:	2201      	movs	r2, #1
 8011970:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011972:	4ba0      	ldr	r3, [pc, #640]	; (8011bf4 <vRW_Settings_Tas+0x340>)
 8011974:	6818      	ldr	r0, [r3, #0]
 8011976:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 801197a:	2302      	movs	r3, #2
 801197c:	2200      	movs	r2, #0
 801197e:	f00e febf 	bl	8020700 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 8011982:	489e      	ldr	r0, [pc, #632]	; (8011bfc <vRW_Settings_Tas+0x348>)
 8011984:	f019 f808 	bl	802a998 <spi_fs_file_size>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	dd0f      	ble.n	80119ae <vRW_Settings_Tas+0xfa>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 801198e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011992:	23c6      	movs	r3, #198	; 0xc6
 8011994:	2200      	movs	r2, #0
 8011996:	4899      	ldr	r0, [pc, #612]	; (8011bfc <vRW_Settings_Tas+0x348>)
 8011998:	f018 ff80 	bl	802a89c <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 801199c:	4b98      	ldr	r3, [pc, #608]	; (8011c00 <vRW_Settings_Tas+0x34c>)
 801199e:	6818      	ldr	r0, [r3, #0]
 80119a0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80119a4:	2302      	movs	r3, #2
 80119a6:	2200      	movs	r2, #0
 80119a8:	f00e feaa 	bl	8020700 <xQueueGenericSend>
 80119ac:	e027      	b.n	80119fe <vRW_Settings_Tas+0x14a>
	}else{
		MQTT_cred.save 			= 1;
 80119ae:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119b2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80119b6:	2201      	movs	r2, #1
 80119b8:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 80119ba:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119be:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80119c2:	2200      	movs	r2, #0
 80119c4:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 80119c6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119ca:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80119ce:	2200      	movs	r2, #0
 80119d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		MQTT_cred.pass[0]		= '\0';
 80119d4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119d8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80119dc:	2200      	movs	r2, #0
 80119de:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		MQTT_cred.uri[0]		= '\0';
 80119e2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119e6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80119ea:	2200      	movs	r2, #0
 80119ec:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 80119ee:	4b84      	ldr	r3, [pc, #528]	; (8011c00 <vRW_Settings_Tas+0x34c>)
 80119f0:	6818      	ldr	r0, [r3, #0]
 80119f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80119f6:	2302      	movs	r3, #2
 80119f8:	2200      	movs	r2, #0
 80119fa:	f00e fe81 	bl	8020700 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 80119fe:	4881      	ldr	r0, [pc, #516]	; (8011c04 <vRW_Settings_Tas+0x350>)
 8011a00:	f018 ffca 	bl	802a998 <spi_fs_file_size>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	dd0f      	ble.n	8011a2a <vRW_Settings_Tas+0x176>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a0a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a0e:	2302      	movs	r3, #2
 8011a10:	2200      	movs	r2, #0
 8011a12:	487c      	ldr	r0, [pc, #496]	; (8011c04 <vRW_Settings_Tas+0x350>)
 8011a14:	f018 ff42 	bl	802a89c <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a18:	4b7b      	ldr	r3, [pc, #492]	; (8011c08 <vRW_Settings_Tas+0x354>)
 8011a1a:	6818      	ldr	r0, [r3, #0]
 8011a1c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a20:	2302      	movs	r3, #2
 8011a22:	2200      	movs	r2, #0
 8011a24:	f00e fe6c 	bl	8020700 <xQueueGenericSend>
 8011a28:	e00b      	b.n	8011a42 <vRW_Settings_Tas+0x18e>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011a2a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a2e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011a32:	2200      	movs	r2, #0
 8011a34:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011a36:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a3a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011a3e:	2201      	movs	r2, #1
 8011a40:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011a42:	4872      	ldr	r0, [pc, #456]	; (8011c0c <vRW_Settings_Tas+0x358>)
 8011a44:	f018 ffa8 	bl	802a998 <spi_fs_file_size>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	dd0b      	ble.n	8011a66 <vRW_Settings_Tas+0x1b2>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011a4e:	2304      	movs	r3, #4
 8011a50:	2200      	movs	r2, #0
 8011a52:	496f      	ldr	r1, [pc, #444]	; (8011c10 <vRW_Settings_Tas+0x35c>)
 8011a54:	486d      	ldr	r0, [pc, #436]	; (8011c0c <vRW_Settings_Tas+0x358>)
 8011a56:	f018 ff21 	bl	802a89c <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011a5a:	4b6d      	ldr	r3, [pc, #436]	; (8011c10 <vRW_Settings_Tas+0x35c>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011a62:	6013      	str	r3, [r2, #0]
 8011a64:	e00d      	b.n	8011a82 <vRW_Settings_Tas+0x1ce>
	}else{
		test_kWh_from_flash = 0.0;
 8011a66:	4b6a      	ldr	r3, [pc, #424]	; (8011c10 <vRW_Settings_Tas+0x35c>)
 8011a68:	f04f 0200 	mov.w	r2, #0
 8011a6c:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011a6e:	f04f 0300 	mov.w	r3, #0
 8011a72:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011a76:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011a78:	2204      	movs	r2, #4
 8011a7a:	4965      	ldr	r1, [pc, #404]	; (8011c10 <vRW_Settings_Tas+0x35c>)
 8011a7c:	4863      	ldr	r0, [pc, #396]	; (8011c0c <vRW_Settings_Tas+0x358>)
 8011a7e:	f018 ff51 	bl	802a924 <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011a82:	4864      	ldr	r0, [pc, #400]	; (8011c14 <vRW_Settings_Tas+0x360>)
 8011a84:	f019 f804 	bl	802aa90 <spi_fs_mkdir>
	spi_fs_mkdir("/web/assets");
 8011a88:	4863      	ldr	r0, [pc, #396]	; (8011c18 <vRW_Settings_Tas+0x364>)
 8011a8a:	f019 f801 	bl	802aa90 <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011a8e:	4863      	ldr	r0, [pc, #396]	; (8011c1c <vRW_Settings_Tas+0x368>)
 8011a90:	f019 f8cc 	bl	802ac2c <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011a94:	4861      	ldr	r0, [pc, #388]	; (8011c1c <vRW_Settings_Tas+0x368>)
 8011a96:	f018 fffb 	bl	802aa90 <spi_fs_mkdir>
  /* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011a9a:	4b56      	ldr	r3, [pc, #344]	; (8011bf4 <vRW_Settings_Tas+0x340>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f00f f9b1 	bl	8020e0c <xQueuePeek>
	  if (PowerSett.save){
 8011aaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aae:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d014      	beq.n	8011ae2 <vRW_Settings_Tas+0x22e>
		  PowerSett.save = 0;
 8011ab8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011abc:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011ac4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011ac8:	2208      	movs	r2, #8
 8011aca:	4619      	mov	r1, r3
 8011acc:	4848      	ldr	r0, [pc, #288]	; (8011bf0 <vRW_Settings_Tas+0x33c>)
 8011ace:	f018 ff29 	bl	802a924 <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011ad2:	4b48      	ldr	r3, [pc, #288]	; (8011bf4 <vRW_Settings_Tas+0x340>)
 8011ad4:	6818      	ldr	r0, [r3, #0]
 8011ad6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011ada:	2302      	movs	r3, #2
 8011adc:	2200      	movs	r2, #0
 8011ade:	f00e fe0f 	bl	8020700 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011ae2:	4b47      	ldr	r3, [pc, #284]	; (8011c00 <vRW_Settings_Tas+0x34c>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011aea:	2200      	movs	r2, #0
 8011aec:	4618      	mov	r0, r3
 8011aee:	f00f f98d 	bl	8020e0c <xQueuePeek>
	  if (MQTT_cred.save){
 8011af2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011af6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d014      	beq.n	8011b2a <vRW_Settings_Tas+0x276>
		  MQTT_cred.save = 0;
 8011b00:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b04:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b08:	2200      	movs	r2, #0
 8011b0a:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b10:	22c6      	movs	r2, #198	; 0xc6
 8011b12:	4619      	mov	r1, r3
 8011b14:	4839      	ldr	r0, [pc, #228]	; (8011bfc <vRW_Settings_Tas+0x348>)
 8011b16:	f018 ff05 	bl	802a924 <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b1a:	4b39      	ldr	r3, [pc, #228]	; (8011c00 <vRW_Settings_Tas+0x34c>)
 8011b1c:	6818      	ldr	r0, [r3, #0]
 8011b1e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b22:	2302      	movs	r3, #2
 8011b24:	2200      	movs	r2, #0
 8011b26:	f00e fdeb 	bl	8020700 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011b2a:	4b37      	ldr	r3, [pc, #220]	; (8011c08 <vRW_Settings_Tas+0x354>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011b32:	2200      	movs	r2, #0
 8011b34:	4618      	mov	r0, r3
 8011b36:	f00f f969 	bl	8020e0c <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011b3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b3e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00c      	beq.n	8011b62 <vRW_Settings_Tas+0x2ae>
		  mb_tcp_sett.save = 0;
 8011b48:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b4c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011b50:	2200      	movs	r2, #0
 8011b52:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b58:	2202      	movs	r2, #2
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	4829      	ldr	r0, [pc, #164]	; (8011c04 <vRW_Settings_Tas+0x350>)
 8011b5e:	f018 fee1 	bl	802a924 <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011b62:	4b2f      	ldr	r3, [pc, #188]	; (8011c20 <vRW_Settings_Tas+0x36c>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f107 010c 	add.w	r1, r7, #12
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f00f f94d 	bl	8020e0c <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011b72:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8011b76:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d312      	bcc.n	8011ba4 <vRW_Settings_Tas+0x2f0>
 8011b7e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b82:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011b86:	ed93 7a02 	vldr	s14, [r3, #8]
 8011b8a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8011b8e:	edd3 7a00 	vldr	s15, [r3]
 8011b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba2:	dd0d      	ble.n	8011bc0 <vRW_Settings_Tas+0x30c>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011ba4:	f107 030c 	add.w	r3, r7, #12
 8011ba8:	3308      	adds	r3, #8
 8011baa:	2204      	movs	r2, #4
 8011bac:	4619      	mov	r1, r3
 8011bae:	4817      	ldr	r0, [pc, #92]	; (8011c0c <vRW_Settings_Tas+0x358>)
 8011bb0:	f018 feb8 	bl	802a924 <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011bb4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011bb8:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011bbc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  time_counter ++;
 8011bc0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    osDelay(delay1s);
 8011bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011bce:	f00e f841 	bl	801fc54 <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011bd2:	e762      	b.n	8011a9a <vRW_Settings_Tas+0x1e6>
 8011bd4:	2000031c 	.word	0x2000031c
 8011bd8:	08015185 	.word	0x08015185
 8011bdc:	08015161 	.word	0x08015161
 8011be0:	080151c1 	.word	0x080151c1
 8011be4:	080151a9 	.word	0x080151a9
 8011be8:	08011115 	.word	0x08011115
 8011bec:	080110f9 	.word	0x080110f9
 8011bf0:	08031434 	.word	0x08031434
 8011bf4:	20000440 	.word	0x20000440
 8011bf8:	3a83126f 	.word	0x3a83126f
 8011bfc:	08031444 	.word	0x08031444
 8011c00:	20000444 	.word	0x20000444
 8011c04:	08031454 	.word	0x08031454
 8011c08:	20000448 	.word	0x20000448
 8011c0c:	08031468 	.word	0x08031468
 8011c10:	20000480 	.word	0x20000480
 8011c14:	0803147c 	.word	0x0803147c
 8011c18:	08031484 	.word	0x08031484
 8011c1c:	08031490 	.word	0x08031490
 8011c20:	2000043c 	.word	0x2000043c

08011c24 <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	3301      	adds	r3, #1
 8011c34:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011c36:	f009 ff3d 	bl	801bab4 <DHCP_time_handler>
	httpServer_time_handler();
 8011c3a:	f00d fb17 	bl	801f26c <httpServer_time_handler>
	dns_service_increment_second();
 8011c3e:	f00a fcc5 	bl	801c5cc <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011c42:	4b06      	ldr	r3, [pc, #24]	; (8011c5c <vOneSecondTickTask+0x38>)
 8011c44:	6818      	ldr	r0, [r3, #0]
 8011c46:	f107 010c 	add.w	r1, r7, #12
 8011c4a:	2302      	movs	r3, #2
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f00e fd57 	bl	8020700 <xQueueGenericSend>
    osDelay(delay1s);
 8011c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c56:	f00d fffd 	bl	801fc54 <osDelay>
	seconds++ ;
 8011c5a:	e7e9      	b.n	8011c30 <vOneSecondTickTask+0xc>
 8011c5c:	2000044c 	.word	0x2000044c

08011c60 <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011c60:	b590      	push	{r4, r7, lr}
 8011c62:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8011c66:	b083      	sub	sp, #12
 8011c68:	af12      	add	r7, sp, #72	; 0x48
 8011c6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011c6e:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011c72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011c76:	f103 0308 	add.w	r3, r3, #8
 8011c7a:	2220      	movs	r2, #32
 8011c7c:	2100      	movs	r1, #0
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f01b fb7a 	bl	802d378 <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011c84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011c88:	f103 0308 	add.w	r3, r3, #8
 8011c8c:	2217      	movs	r2, #23
 8011c8e:	2100      	movs	r1, #0
 8011c90:	4618      	mov	r0, r3
 8011c92:	f01b fb71 	bl	802d378 <memset>

	  NetInfo.mac[0]	= 0x40;
 8011c96:	2340      	movs	r3, #64	; 0x40
 8011c98:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011c9c:	f102 0208 	add.w	r2, r2, #8
 8011ca0:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011ca2:	2308      	movs	r3, #8
 8011ca4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ca8:	f102 0209 	add.w	r2, r2, #9
 8011cac:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011cae:	4bdc      	ldr	r3, [pc, #880]	; (8012020 <vMaintEthTask+0x3c0>)
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011cb6:	f102 020a 	add.w	r2, r2, #10
 8011cba:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011cbc:	4bd9      	ldr	r3, [pc, #868]	; (8012024 <vMaintEthTask+0x3c4>)
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011cc4:	f102 020b 	add.w	r2, r2, #11
 8011cc8:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011cca:	4bd7      	ldr	r3, [pc, #860]	; (8012028 <vMaintEthTask+0x3c8>)
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011cd2:	f102 020c 	add.w	r2, r2, #12
 8011cd6:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011cd8:	4bd4      	ldr	r3, [pc, #848]	; (801202c <vMaintEthTask+0x3cc>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ce0:	f102 020d 	add.w	r2, r2, #13
 8011ce4:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011ce6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011cea:	f103 030b 	add.w	r3, r3, #11
 8011cee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011cf2:	f102 0208 	add.w	r2, r2, #8
 8011cf6:	6810      	ldr	r0, [r2, #0]
 8011cf8:	6018      	str	r0, [r3, #0]
 8011cfa:	8892      	ldrh	r2, [r2, #4]
 8011cfc:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011cfe:	2302      	movs	r3, #2
 8011d00:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d04:	f102 021e 	add.w	r2, r2, #30
 8011d08:	7013      	strb	r3, [r2, #0]
 8011d0a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d0e:	f103 030e 	add.w	r3, r3, #14
 8011d12:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d14:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d18:	f102 0211 	add.w	r2, r2, #17
 8011d1c:	6013      	str	r3, [r2, #0]
 8011d1e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d22:	f103 0312 	add.w	r3, r3, #18
 8011d26:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011d28:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d2c:	f102 0215 	add.w	r2, r2, #21
 8011d30:	6013      	str	r3, [r2, #0]
 8011d32:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d36:	f103 0316 	add.w	r3, r3, #22
 8011d3a:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011d3c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d40:	f102 0219 	add.w	r2, r2, #25
 8011d44:	6013      	str	r3, [r2, #0]
 8011d46:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d4a:	f103 031a 	add.w	r3, r3, #26
 8011d4e:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011d50:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d54:	f102 021d 	add.w	r2, r2, #29
 8011d58:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011d5a:	4cb5      	ldr	r4, [pc, #724]	; (8012030 <vMaintEthTask+0x3d0>)
 8011d5c:	4668      	mov	r0, sp
 8011d5e:	f104 0310 	add.w	r3, r4, #16
 8011d62:	2248      	movs	r2, #72	; 0x48
 8011d64:	4619      	mov	r1, r3
 8011d66:	f01b fcdc 	bl	802d722 <memcpy>
 8011d6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011d6e:	f00d fdcf 	bl	801f910 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011d72:	49b0      	ldr	r1, [pc, #704]	; (8012034 <vMaintEthTask+0x3d4>)
 8011d74:	48b0      	ldr	r0, [pc, #704]	; (8012038 <vMaintEthTask+0x3d8>)
 8011d76:	f00d fd77 	bl	801f868 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011d7a:	48b0      	ldr	r0, [pc, #704]	; (801203c <vMaintEthTask+0x3dc>)
 8011d7c:	f00d fd5c 	bl	801f838 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011d80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d84:	f103 0308 	add.w	r3, r3, #8
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f00d fc59 	bl	801f640 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011d8e:	49ac      	ldr	r1, [pc, #688]	; (8012040 <vMaintEthTask+0x3e0>)
 8011d90:	48ac      	ldr	r0, [pc, #688]	; (8012044 <vMaintEthTask+0x3e4>)
 8011d92:	f007 fdd9 	bl	8019948 <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011d96:	49ac      	ldr	r1, [pc, #688]	; (8012048 <vMaintEthTask+0x3e8>)
 8011d98:	48ac      	ldr	r0, [pc, #688]	; (801204c <vMaintEthTask+0x3ec>)
 8011d9a:	f007 fdaf 	bl	80198fc <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011d9e:	49ac      	ldr	r1, [pc, #688]	; (8012050 <vMaintEthTask+0x3f0>)
 8011da0:	48ac      	ldr	r0, [pc, #688]	; (8012054 <vMaintEthTask+0x3f4>)
 8011da2:	f007 fd85 	bl	80198b0 <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011da6:	4aac      	ldr	r2, [pc, #688]	; (8012058 <vMaintEthTask+0x3f8>)
 8011da8:	49ac      	ldr	r1, [pc, #688]	; (801205c <vMaintEthTask+0x3fc>)
 8011daa:	48ac      	ldr	r0, [pc, #688]	; (801205c <vMaintEthTask+0x3fc>)
 8011dac:	f008 fb30 	bl	801a410 <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011db0:	f107 0320 	add.w	r3, r7, #32
 8011db4:	3b18      	subs	r3, #24
 8011db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011dba:	4619      	mov	r1, r3
 8011dbc:	2004      	movs	r0, #4
 8011dbe:	f00a fbb1 	bl	801c524 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011dc2:	48a7      	ldr	r0, [pc, #668]	; (8012060 <vMaintEthTask+0x400>)
 8011dc4:	f00a fb9c 	bl	801c500 <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011dc8:	49a6      	ldr	r1, [pc, #664]	; (8012064 <vMaintEthTask+0x404>)
 8011dca:	48a7      	ldr	r0, [pc, #668]	; (8012068 <vMaintEthTask+0x408>)
 8011dcc:	f00a fb7c 	bl	801c4c8 <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011dd0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dd4:	f103 031e 	add.w	r3, r3, #30
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011dde:	f102 0201 	add.w	r2, r2, #1
 8011de2:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011de4:	2300      	movs	r3, #0
 8011de6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dea:	f102 0208 	add.w	r2, r2, #8
 8011dee:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011df0:	f00d fce4 	bl	801f7bc <w5500_init>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f040 81eb 	bne.w	80121d2 <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e00:	f00f fce4 	bl	80217cc <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e04:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e08:	f103 0308 	add.w	r3, r3, #8
 8011e0c:	2206      	movs	r2, #6
 8011e0e:	4619      	mov	r1, r3
 8011e10:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8011e14:	f006 fb08 	bl	8018428 <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e1c:	f103 031e 	add.w	r3, r3, #30
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	2b02      	cmp	r3, #2
 8011e24:	d106      	bne.n	8011e34 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e26:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	f009 fd97 	bl	801b960 <DHCP_init>
 8011e32:	e003      	b.n	8011e3c <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011e34:	f00d fc14 	bl	801f660 <network_init>
			set_ip_aasigned();
 8011e38:	f00d fcb4 	bl	801f7a4 <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011e3c:	f7ff f976 	bl	801112c <SocketMutexTake>
			dhcp_rutine();
 8011e40:	f00d fc5e 	bl	801f700 <dhcp_rutine>

			if (!link_status()){
 8011e44:	f00d fc74 	bl	801f730 <link_status>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f040 80e0 	bne.w	8012010 <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e56:	f102 020e 	add.w	r2, r2, #14
 8011e5a:	7013      	strb	r3, [r2, #0]
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e62:	f102 020f 	add.w	r2, r2, #15
 8011e66:	7013      	strb	r3, [r2, #0]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e6e:	f102 0210 	add.w	r2, r2, #16
 8011e72:	7013      	strb	r3, [r2, #0]
 8011e74:	2300      	movs	r3, #0
 8011e76:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e7a:	f102 0211 	add.w	r2, r2, #17
 8011e7e:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011e80:	2300      	movs	r3, #0
 8011e82:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e86:	f102 0212 	add.w	r2, r2, #18
 8011e8a:	7013      	strb	r3, [r2, #0]
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e92:	f102 0213 	add.w	r2, r2, #19
 8011e96:	7013      	strb	r3, [r2, #0]
 8011e98:	2300      	movs	r3, #0
 8011e9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e9e:	f102 0214 	add.w	r2, r2, #20
 8011ea2:	7013      	strb	r3, [r2, #0]
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eaa:	f102 0215 	add.w	r2, r2, #21
 8011eae:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eb6:	f102 0216 	add.w	r2, r2, #22
 8011eba:	7013      	strb	r3, [r2, #0]
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ec2:	f102 0217 	add.w	r2, r2, #23
 8011ec6:	7013      	strb	r3, [r2, #0]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ece:	f102 0218 	add.w	r2, r2, #24
 8011ed2:	7013      	strb	r3, [r2, #0]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eda:	f102 0219 	add.w	r2, r2, #25
 8011ede:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ee6:	f102 021a 	add.w	r2, r2, #26
 8011eea:	7013      	strb	r3, [r2, #0]
 8011eec:	2300      	movs	r3, #0
 8011eee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ef2:	f102 021b 	add.w	r2, r2, #27
 8011ef6:	7013      	strb	r3, [r2, #0]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011efe:	f102 021c 	add.w	r2, r2, #28
 8011f02:	7013      	strb	r3, [r2, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f0a:	f102 021d 	add.w	r2, r2, #29
 8011f0e:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f10:	f7ff f91a 	bl	8011148 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f14:	2300      	movs	r3, #0
 8011f16:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f1a:	f102 021f 	add.w	r2, r2, #31
 8011f1e:	7013      	strb	r3, [r2, #0]
 8011f20:	e05a      	b.n	8011fd8 <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f22:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f26:	f103 031f 	add.w	r3, r3, #31
 8011f2a:	781a      	ldrb	r2, [r3, #0]
 8011f2c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f30:	f103 031f 	add.w	r3, r3, #31
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011f3a:	443a      	add	r2, r7
 8011f3c:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011f40:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011f44:	443b      	add	r3, r7
 8011f46:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011f4a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f4e:	f103 031f 	add.w	r3, r3, #31
 8011f52:	781a      	ldrb	r2, [r3, #0]
 8011f54:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f58:	f103 031f 	add.w	r3, r3, #31
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011f62:	443a      	add	r2, r7
 8011f64:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011f68:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011f6c:	443b      	add	r3, r7
 8011f6e:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011f72:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f76:	f103 031f 	add.w	r3, r3, #31
 8011f7a:	781a      	ldrb	r2, [r3, #0]
 8011f7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f80:	f103 031f 	add.w	r3, r3, #31
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011f8a:	443a      	add	r2, r7
 8011f8c:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8011f90:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011f94:	443b      	add	r3, r7
 8011f96:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8011f9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f9e:	f103 031f 	add.w	r3, r3, #31
 8011fa2:	781a      	ldrb	r2, [r3, #0]
 8011fa4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fa8:	f103 031f 	add.w	r3, r3, #31
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fb2:	443a      	add	r2, r7
 8011fb4:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8011fb8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fbc:	443b      	add	r3, r7
 8011fbe:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 8011fc2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fc6:	f103 031f 	add.w	r3, r3, #31
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011fd2:	f102 021f 	add.w	r2, r2, #31
 8011fd6:	7013      	strb	r3, [r2, #0]
 8011fd8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fdc:	f103 031f 	add.w	r3, r3, #31
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	2b03      	cmp	r3, #3
 8011fe4:	d99d      	bls.n	8011f22 <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011fec:	f102 0208 	add.w	r2, r2, #8
 8011ff0:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8011ff2:	4b1e      	ldr	r3, [pc, #120]	; (801206c <vMaintEthTask+0x40c>)
 8011ff4:	6818      	ldr	r0, [r3, #0]
 8011ff6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8011ffa:	f101 0108 	add.w	r1, r1, #8
 8011ffe:	2302      	movs	r3, #2
 8012000:	2200      	movs	r2, #0
 8012002:	f00e fb7d 	bl	8020700 <xQueueGenericSend>
				break;
 8012006:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8012008:	2001      	movs	r0, #1
 801200a:	f00d fe23 	bl	801fc54 <osDelay>
 801200e:	e6df      	b.n	8011dd0 <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012010:	2300      	movs	r3, #0
 8012012:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012016:	f102 021f 	add.w	r2, r2, #31
 801201a:	7013      	strb	r3, [r2, #0]
 801201c:	e083      	b.n	8012126 <vMaintEthTask+0x4c6>
 801201e:	bf00      	nop
 8012020:	1fff7a10 	.word	0x1fff7a10
 8012024:	1fff7a11 	.word	0x1fff7a11
 8012028:	1fff7a12 	.word	0x1fff7a12
 801202c:	1fff7a13 	.word	0x1fff7a13
 8012030:	20000374 	.word	0x20000374
 8012034:	0801f8c9 	.word	0x0801f8c9
 8012038:	0801f8b1 	.word	0x0801f8b1
 801203c:	0801fc55 	.word	0x0801fc55
 8012040:	0801f941 	.word	0x0801f941
 8012044:	0801f965 	.word	0x0801f965
 8012048:	0801f8f9 	.word	0x0801f8f9
 801204c:	0801f8e1 	.word	0x0801f8e1
 8012050:	080110e1 	.word	0x080110e1
 8012054:	080110c5 	.word	0x080110c5
 8012058:	0801f695 	.word	0x0801f695
 801205c:	0801f6ad 	.word	0x0801f6ad
 8012060:	0801f78d 	.word	0x0801f78d
 8012064:	0801117d 	.word	0x0801117d
 8012068:	08011161 	.word	0x08011161
 801206c:	20000438 	.word	0x20000438
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8012070:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012074:	f103 031f 	add.w	r3, r3, #31
 8012078:	781a      	ldrb	r2, [r3, #0]
 801207a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801207e:	f103 031f 	add.w	r3, r3, #31
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012088:	443a      	add	r2, r7
 801208a:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 801208e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012092:	443b      	add	r3, r7
 8012094:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8012098:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801209c:	f103 031f 	add.w	r3, r3, #31
 80120a0:	781a      	ldrb	r2, [r3, #0]
 80120a2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120a6:	f103 031f 	add.w	r3, r3, #31
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 80120b0:	443a      	add	r2, r7
 80120b2:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 80120b6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80120ba:	443b      	add	r3, r7
 80120bc:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 80120c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120c4:	f103 031f 	add.w	r3, r3, #31
 80120c8:	781a      	ldrb	r2, [r3, #0]
 80120ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ce:	f103 031f 	add.w	r3, r3, #31
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 80120d8:	443a      	add	r2, r7
 80120da:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 80120de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80120e2:	443b      	add	r3, r7
 80120e4:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 80120e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ec:	f103 031f 	add.w	r3, r3, #31
 80120f0:	781a      	ldrb	r2, [r3, #0]
 80120f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120f6:	f103 031f 	add.w	r3, r3, #31
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012100:	443a      	add	r2, r7
 8012102:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012106:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801210a:	443b      	add	r3, r7
 801210c:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012110:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012114:	f103 031f 	add.w	r3, r3, #31
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	3301      	adds	r3, #1
 801211c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012120:	f102 021f 	add.w	r2, r2, #31
 8012124:	7013      	strb	r3, [r2, #0]
 8012126:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801212a:	f103 031f 	add.w	r3, r3, #31
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	2b03      	cmp	r3, #3
 8012132:	d99d      	bls.n	8012070 <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 8012134:	2301      	movs	r3, #1
 8012136:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801213a:	f102 0208 	add.w	r2, r2, #8
 801213e:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 8012140:	f00d fb18 	bl	801f774 <link_speed>
 8012144:	4603      	mov	r3, r0
 8012146:	b2db      	uxtb	r3, r3
 8012148:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801214c:	f102 020a 	add.w	r2, r2, #10
 8012150:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 8012152:	f00d fb03 	bl	801f75c <link_duplex>
 8012156:	4603      	mov	r3, r0
 8012158:	b2db      	uxtb	r3, r3
 801215a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801215e:	f102 0209 	add.w	r2, r2, #9
 8012162:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 8012164:	f009 fd34 	bl	801bbd0 <getDHCPLeasetime>
 8012168:	4603      	mov	r3, r0
 801216a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801216e:	f102 0204 	add.w	r2, r2, #4
 8012172:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 8012174:	f7fe ffe8 	bl	8011148 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 8012178:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801217c:	f103 030e 	add.w	r3, r3, #14
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d10e      	bne.n	80121a4 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012186:	4b14      	ldr	r3, [pc, #80]	; (80121d8 <vMaintEthTask+0x578>)
 8012188:	6818      	ldr	r0, [r3, #0]
 801218a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 801218e:	f101 0108 	add.w	r1, r1, #8
 8012192:	2302      	movs	r3, #2
 8012194:	2200      	movs	r2, #0
 8012196:	f00e fab3 	bl	8020700 <xQueueGenericSend>
				osDelay(delay1s);
 801219a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801219e:	f00d fd59 	bl	801fc54 <osDelay>
				continue;
 80121a2:	e015      	b.n	80121d0 <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 80121a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80121a8:	f103 0308 	add.w	r3, r3, #8
 80121ac:	3315      	adds	r3, #21
 80121ae:	4618      	mov	r0, r3
 80121b0:	f00a f9d2 	bl	801c558 <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121b4:	4b08      	ldr	r3, [pc, #32]	; (80121d8 <vMaintEthTask+0x578>)
 80121b6:	6818      	ldr	r0, [r3, #0]
 80121b8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80121bc:	f101 0108 	add.w	r1, r1, #8
 80121c0:	2302      	movs	r3, #2
 80121c2:	2200      	movs	r2, #0
 80121c4:	f00e fa9c 	bl	8020700 <xQueueGenericSend>
			osDelay(delay1s);
 80121c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80121cc:	f00d fd42 	bl	801fc54 <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 80121d0:	e634      	b.n	8011e3c <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 80121d2:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 80121d4:	e5fc      	b.n	8011dd0 <vMaintEthTask+0x170>
 80121d6:	bf00      	nop
 80121d8:	20000438 	.word	0x20000438

080121dc <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80121e4:	4b1d      	ldr	r3, [pc, #116]	; (801225c <vDebugMemUsage+0x80>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f00d fcf5 	bl	801fbd8 <osThreadGetStackSpace>
 80121ee:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 80121f0:	4b1b      	ldr	r3, [pc, #108]	; (8012260 <vDebugMemUsage+0x84>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f00d fcef 	bl	801fbd8 <osThreadGetStackSpace>
 80121fa:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 80121fc:	4b19      	ldr	r3, [pc, #100]	; (8012264 <vDebugMemUsage+0x88>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4618      	mov	r0, r3
 8012202:	f00d fce9 	bl	801fbd8 <osThreadGetStackSpace>
 8012206:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 8012208:	4b17      	ldr	r3, [pc, #92]	; (8012268 <vDebugMemUsage+0x8c>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4618      	mov	r0, r3
 801220e:	f00d fce3 	bl	801fbd8 <osThreadGetStackSpace>
 8012212:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8012214:	4b15      	ldr	r3, [pc, #84]	; (801226c <vDebugMemUsage+0x90>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4618      	mov	r0, r3
 801221a:	f00d fcdd 	bl	801fbd8 <osThreadGetStackSpace>
 801221e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 8012220:	4b13      	ldr	r3, [pc, #76]	; (8012270 <vDebugMemUsage+0x94>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	4618      	mov	r0, r3
 8012226:	f00d fcd7 	bl	801fbd8 <osThreadGetStackSpace>
 801222a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 801222c:	4b11      	ldr	r3, [pc, #68]	; (8012274 <vDebugMemUsage+0x98>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4618      	mov	r0, r3
 8012232:	f00d fcd1 	bl	801fbd8 <osThreadGetStackSpace>
 8012236:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8012238:	2000      	movs	r0, #0
 801223a:	f00d fccd 	bl	801fbd8 <osThreadGetStackSpace>
 801223e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8012240:	2000      	movs	r0, #0
 8012242:	f00d fcc9 	bl	801fbd8 <osThreadGetStackSpace>
 8012246:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8012248:	2000      	movs	r0, #0
 801224a:	f00d fcc5 	bl	801fbd8 <osThreadGetStackSpace>
 801224e:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 8012250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012254:	f00d fcfe 	bl	801fc54 <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8012258:	e7c4      	b.n	80121e4 <vDebugMemUsage+0x8>
 801225a:	bf00      	nop
 801225c:	20000414 	.word	0x20000414
 8012260:	20000418 	.word	0x20000418
 8012264:	2000041c 	.word	0x2000041c
 8012268:	20000420 	.word	0x20000420
 801226c:	20000424 	.word	0x20000424
 8012270:	20000428 	.word	0x20000428
 8012274:	2000042c 	.word	0x2000042c

08012278 <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012286:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 801228a:	4a4d      	ldr	r2, [pc, #308]	; (80123c0 <httpServ+0x148>)
 801228c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012290:	f103 0308 	add.w	r3, r3, #8
 8012294:	6812      	ldr	r2, [r2, #0]
 8012296:	4611      	mov	r1, r2
 8012298:	8019      	strh	r1, [r3, #0]
 801229a:	3302      	adds	r3, #2
 801229c:	0c12      	lsrs	r2, r2, #16
 801229e:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 80122a0:	2303      	movs	r3, #3
 80122a2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80122a6:	f102 020e 	add.w	r2, r2, #14
 80122aa:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 80122ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80122b0:	f103 0308 	add.w	r3, r3, #8
 80122b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80122b8:	f102 020e 	add.w	r2, r2, #14
 80122bc:	7812      	ldrb	r2, [r2, #0]
 80122be:	f607 0108 	addw	r1, r7, #2056	; 0x808
 80122c2:	f107 0010 	add.w	r0, r7, #16
 80122c6:	3808      	subs	r0, #8
 80122c8:	f00c f9f8 	bl	801e6bc <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 80122cc:	483d      	ldr	r0, [pc, #244]	; (80123c4 <httpServ+0x14c>)
 80122ce:	f00d f967 	bl	801f5a0 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 80122d2:	483d      	ldr	r0, [pc, #244]	; (80123c8 <httpServ+0x150>)
 80122d4:	f00d f97c 	bl	801f5d0 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 80122d8:	4b3c      	ldr	r3, [pc, #240]	; (80123cc <httpServ+0x154>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	2103      	movs	r1, #3
 80122de:	4618      	mov	r0, r3
 80122e0:	f000 fcb2 	bl	8012c48 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 80122e4:	4b3a      	ldr	r3, [pc, #232]	; (80123d0 <httpServ+0x158>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2104      	movs	r1, #4
 80122ea:	4618      	mov	r0, r3
 80122ec:	f000 fcac 	bl	8012c48 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 80122f0:	4b38      	ldr	r3, [pc, #224]	; (80123d4 <httpServ+0x15c>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2100      	movs	r1, #0
 80122f6:	4618      	mov	r0, r3
 80122f8:	f000 fca6 	bl	8012c48 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 80122fc:	4b36      	ldr	r3, [pc, #216]	; (80123d8 <httpServ+0x160>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2102      	movs	r1, #2
 8012302:	4618      	mov	r0, r3
 8012304:	f000 fca0 	bl	8012c48 <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 8012308:	4b34      	ldr	r3, [pc, #208]	; (80123dc <httpServ+0x164>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	2105      	movs	r1, #5
 801230e:	4618      	mov	r0, r3
 8012310:	f000 fc9a 	bl	8012c48 <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 8012314:	4932      	ldr	r1, [pc, #200]	; (80123e0 <httpServ+0x168>)
 8012316:	4833      	ldr	r0, [pc, #204]	; (80123e4 <httpServ+0x16c>)
 8012318:	f00c ffc4 	bl	801f2a4 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 801231c:	4932      	ldr	r1, [pc, #200]	; (80123e8 <httpServ+0x170>)
 801231e:	4833      	ldr	r0, [pc, #204]	; (80123ec <httpServ+0x174>)
 8012320:	f00c ffc0 	bl	801f2a4 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 8012324:	4932      	ldr	r1, [pc, #200]	; (80123f0 <httpServ+0x178>)
 8012326:	4833      	ldr	r0, [pc, #204]	; (80123f4 <httpServ+0x17c>)
 8012328:	f00c ffbc 	bl	801f2a4 <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 801232c:	4b32      	ldr	r3, [pc, #200]	; (80123f8 <httpServ+0x180>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012334:	f101 010c 	add.w	r1, r1, #12
 8012338:	2200      	movs	r2, #0
 801233a:	4618      	mov	r0, r3
 801233c:	f00e fd66 	bl	8020e0c <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012340:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012344:	f103 030c 	add.w	r3, r3, #12
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d02f      	beq.n	80123ae <httpServ+0x136>
 801234e:	f00d fa1d 	bl	801f78c <assigned_ip>
 8012352:	4603      	mov	r3, r0
 8012354:	2b01      	cmp	r3, #1
 8012356:	d12a      	bne.n	80123ae <httpServ+0x136>
		  for(i = 0 ; i < http_nsockets; i++){
 8012358:	2300      	movs	r3, #0
 801235a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801235e:	f102 020f 	add.w	r2, r2, #15
 8012362:	7013      	strb	r3, [r2, #0]
 8012364:	e016      	b.n	8012394 <httpServ+0x11c>
			  SocketMutexTake();
 8012366:	f7fe fee1 	bl	801112c <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 801236a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801236e:	f103 030f 	add.w	r3, r3, #15
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	4618      	mov	r0, r3
 8012376:	f00c f9bd 	bl	801e6f4 <httpServer_run>
			  SocketMutexRelease();
 801237a:	f7fe fee5 	bl	8011148 <SocketMutexRelease>
		  for(i = 0 ; i < http_nsockets; i++){
 801237e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012382:	f103 030f 	add.w	r3, r3, #15
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	3301      	adds	r3, #1
 801238a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801238e:	f102 020f 	add.w	r2, r2, #15
 8012392:	7013      	strb	r3, [r2, #0]
 8012394:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012398:	f103 030f 	add.w	r3, r3, #15
 801239c:	781a      	ldrb	r2, [r3, #0]
 801239e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123a2:	f103 030e 	add.w	r3, r3, #14
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d3dc      	bcc.n	8012366 <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123ac:	e003      	b.n	80123b6 <httpServ+0x13e>
			  //osDelay(delay0_1s);

		  }
	  }else{
		  osDelay(delay1s);
 80123ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80123b2:	f00d fc4f 	bl	801fc54 <osDelay>
	  }
	  osDelay(delay0_1s);
 80123b6:	2064      	movs	r0, #100	; 0x64
 80123b8:	f00d fc4c 	bl	801fc54 <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 80123bc:	e7b6      	b.n	801232c <httpServ+0xb4>
 80123be:	bf00      	nop
 80123c0:	080320b0 	.word	0x080320b0
 80123c4:	080138f5 	.word	0x080138f5
 80123c8:	080139dd 	.word	0x080139dd
 80123cc:	2000043c 	.word	0x2000043c
 80123d0:	20000440 	.word	0x20000440
 80123d4:	20000444 	.word	0x20000444
 80123d8:	20000448 	.word	0x20000448
 80123dc:	2000044c 	.word	0x2000044c
 80123e0:	0803149c 	.word	0x0803149c
 80123e4:	080317b8 	.word	0x080317b8
 80123e8:	080317c4 	.word	0x080317c4
 80123ec:	08031af8 	.word	0x08031af8
 80123f0:	08031b0c 	.word	0x08031b0c
 80123f4:	080320a4 	.word	0x080320a4
 80123f8:	20000438 	.word	0x20000438

080123fc <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	f5ad 6d22 	sub.w	sp, sp, #2592	; 0xa20
 8012402:	af02      	add	r7, sp, #8
 8012404:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012408:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 801240c:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 801240e:	4987      	ldr	r1, [pc, #540]	; (801262c <vMQTT_Task+0x230>)
 8012410:	4887      	ldr	r0, [pc, #540]	; (8012630 <vMQTT_Task+0x234>)
 8012412:	f001 fba3 	bl	8013b5c <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 8012416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801241a:	f00d fc1b 	bl	801fc54 <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 801241e:	4b85      	ldr	r3, [pc, #532]	; (8012634 <vMQTT_Task+0x238>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8012426:	2200      	movs	r2, #0
 8012428:	4618      	mov	r0, r3
 801242a:	f00e fcef 	bl	8020e0c <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 801242e:	f897 39f8 	ldrb.w	r3, [r7, #2552]	; 0x9f8
 8012432:	f083 0301 	eor.w	r3, r3, #1
 8012436:	b2db      	uxtb	r3, r3
 8012438:	2b00      	cmp	r3, #0
 801243a:	f040 80ec 	bne.w	8012616 <vMQTT_Task+0x21a>
 801243e:	f00d f9a5 	bl	801f78c <assigned_ip>
 8012442:	4603      	mov	r3, r0
 8012444:	2b01      	cmp	r3, #1
 8012446:	f040 80e6 	bne.w	8012616 <vMQTT_Task+0x21a>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 801244a:	4b7b      	ldr	r3, [pc, #492]	; (8012638 <vMQTT_Task+0x23c>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012452:	2200      	movs	r2, #0
 8012454:	4618      	mov	r0, r3
 8012456:	f00e fcd9 	bl	8020e0c <xQueuePeek>
		while (MQTT_cred.enable == 0){
 801245a:	e00b      	b.n	8012474 <vMQTT_Task+0x78>
			osDelay(delay1s);
 801245c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012460:	f00d fbf8 	bl	801fc54 <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 8012464:	4b74      	ldr	r3, [pc, #464]	; (8012638 <vMQTT_Task+0x23c>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 801246c:	2200      	movs	r2, #0
 801246e:	4618      	mov	r0, r3
 8012470:	f00e fccc 	bl	8020e0c <xQueuePeek>
		while (MQTT_cred.enable == 0){
 8012474:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 8012478:	f083 0301 	eor.w	r3, r3, #1
 801247c:	b2db      	uxtb	r3, r3
 801247e:	2b00      	cmp	r3, #0
 8012480:	d1ec      	bne.n	801245c <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 8012482:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 8012486:	f083 0301 	eor.w	r3, r3, #1
 801248a:	b2db      	uxtb	r3, r3
 801248c:	2b00      	cmp	r3, #0
 801248e:	f040 80c4 	bne.w	801261a <vMQTT_Task+0x21e>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 8012492:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8012496:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 801249a:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 801249e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124a2:	9301      	str	r3, [sp, #4]
 80124a4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80124a8:	9300      	str	r3, [sp, #0]
 80124aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ae:	f001 fb71 	bl	8013b94 <mqtt_client_init>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f040 80b2 	bne.w	801261e <vMQTT_Task+0x222>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 80124ba:	f001 fc57 	bl	8013d6c <mqtt_client_connect>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	f2c0 80ae 	blt.w	8012622 <vMQTT_Task+0x226>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80124c6:	f001 fca1 	bl	8013e0c <mqtt_client_reg_dev_on_home_assist>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f040 80aa 	bne.w	8012626 <vMQTT_Task+0x22a>

		generate_status_topik(topik_name, 0);
 80124d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80124d6:	2100      	movs	r1, #0
 80124d8:	4618      	mov	r0, r3
 80124da:	f002 f825 	bl	8014528 <generate_status_topik>
		while (1){
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 80124de:	4b57      	ldr	r3, [pc, #348]	; (801263c <vMQTT_Task+0x240>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80124e6:	2200      	movs	r2, #0
 80124e8:	4618      	mov	r0, r3
 80124ea:	f00e fc8f 	bl	8020e0c <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 80124ee:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80124f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80124f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80124fa:	f107 030c 	add.w	r3, r7, #12
 80124fe:	eeb0 0a67 	vmov.f32	s0, s15
 8012502:	494f      	ldr	r1, [pc, #316]	; (8012640 <vMQTT_Task+0x244>)
 8012504:	4618      	mov	r0, r3
 8012506:	f002 f847 	bl	8014598 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801250a:	f107 020c 	add.w	r2, r7, #12
 801250e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012512:	4611      	mov	r1, r2
 8012514:	4618      	mov	r0, r3
 8012516:	f001 fd87 	bl	8014028 <send_data_to_topik>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d16c      	bne.n	80125fa <vMQTT_Task+0x1fe>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 8012520:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012524:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012528:	edd3 7a00 	vldr	s15, [r3]
 801252c:	f107 030c 	add.w	r3, r7, #12
 8012530:	eeb0 0a67 	vmov.f32	s0, s15
 8012534:	4943      	ldr	r1, [pc, #268]	; (8012644 <vMQTT_Task+0x248>)
 8012536:	4618      	mov	r0, r3
 8012538:	f002 f82e 	bl	8014598 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801253c:	f107 020c 	add.w	r2, r7, #12
 8012540:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012544:	4611      	mov	r1, r2
 8012546:	4618      	mov	r0, r3
 8012548:	f001 fd6e 	bl	8014028 <send_data_to_topik>
 801254c:	4603      	mov	r3, r0
 801254e:	2b00      	cmp	r3, #0
 8012550:	d155      	bne.n	80125fe <vMQTT_Task+0x202>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 8012552:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012556:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801255a:	edd3 7a01 	vldr	s15, [r3, #4]
 801255e:	f107 030c 	add.w	r3, r7, #12
 8012562:	eeb0 0a67 	vmov.f32	s0, s15
 8012566:	4938      	ldr	r1, [pc, #224]	; (8012648 <vMQTT_Task+0x24c>)
 8012568:	4618      	mov	r0, r3
 801256a:	f002 f815 	bl	8014598 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801256e:	f107 020c 	add.w	r2, r7, #12
 8012572:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012576:	4611      	mov	r1, r2
 8012578:	4618      	mov	r0, r3
 801257a:	f001 fd55 	bl	8014028 <send_data_to_topik>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d13e      	bne.n	8012602 <vMQTT_Task+0x206>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 8012584:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012588:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801258c:	edd3 7a05 	vldr	s15, [r3, #20]
 8012590:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 801264c <vMQTT_Task+0x250>
 8012594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012598:	f107 030c 	add.w	r3, r7, #12
 801259c:	eeb0 0a67 	vmov.f32	s0, s15
 80125a0:	492b      	ldr	r1, [pc, #172]	; (8012650 <vMQTT_Task+0x254>)
 80125a2:	4618      	mov	r0, r3
 80125a4:	f001 fff8 	bl	8014598 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125a8:	f107 020c 	add.w	r2, r7, #12
 80125ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125b0:	4611      	mov	r1, r2
 80125b2:	4618      	mov	r0, r3
 80125b4:	f001 fd38 	bl	8014028 <send_data_to_topik>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d123      	bne.n	8012606 <vMQTT_Task+0x20a>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ApparPower);
 80125be:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80125ca:	f107 030c 	add.w	r3, r7, #12
 80125ce:	eeb0 0a67 	vmov.f32	s0, s15
 80125d2:	4920      	ldr	r1, [pc, #128]	; (8012654 <vMQTT_Task+0x258>)
 80125d4:	4618      	mov	r0, r3
 80125d6:	f001 ffdf 	bl	8014598 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125da:	f107 020c 	add.w	r2, r7, #12
 80125de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125e2:	4611      	mov	r1, r2
 80125e4:	4618      	mov	r0, r3
 80125e6:	f001 fd1f 	bl	8014028 <send_data_to_topik>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10c      	bne.n	801260a <vMQTT_Task+0x20e>

			osDelay(delay30s);
 80125f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80125f4:	f00d fb2e 	bl	801fc54 <osDelay>
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 80125f8:	e771      	b.n	80124de <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125fa:	bf00      	nop
 80125fc:	e006      	b.n	801260c <vMQTT_Task+0x210>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125fe:	bf00      	nop
 8012600:	e004      	b.n	801260c <vMQTT_Task+0x210>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012602:	bf00      	nop
 8012604:	e002      	b.n	801260c <vMQTT_Task+0x210>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012606:	bf00      	nop
 8012608:	e000      	b.n	801260c <vMQTT_Task+0x210>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801260a:	bf00      	nop
		}
		osDelay(delay1s);
 801260c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012610:	f00d fb20 	bl	801fc54 <osDelay>
 8012614:	e6ff      	b.n	8012416 <vMQTT_Task+0x1a>
			continue;
 8012616:	bf00      	nop
 8012618:	e6fd      	b.n	8012416 <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 801261a:	bf00      	nop
 801261c:	e6fb      	b.n	8012416 <vMQTT_Task+0x1a>
			continue;
 801261e:	bf00      	nop
 8012620:	e6f9      	b.n	8012416 <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 8012622:	bf00      	nop
 8012624:	e6f7      	b.n	8012416 <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8012626:	bf00      	nop
		osDelay(delay1s);
 8012628:	e6f5      	b.n	8012416 <vMQTT_Task+0x1a>
 801262a:	bf00      	nop
 801262c:	08011149 	.word	0x08011149
 8012630:	0801112d 	.word	0x0801112d
 8012634:	20000438 	.word	0x20000438
 8012638:	20000444 	.word	0x20000444
 801263c:	2000043c 	.word	0x2000043c
 8012640:	080320b4 	.word	0x080320b4
 8012644:	080320bc 	.word	0x080320bc
 8012648:	080320c4 	.word	0x080320c4
 801264c:	42c80000 	.word	0x42c80000
 8012650:	080320cc 	.word	0x080320cc
 8012654:	080320dc 	.word	0x080320dc

08012658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	4a04      	ldr	r2, [pc, #16]	; (8012678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d101      	bne.n	801266e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801266a:	f002 fdd7 	bl	801521c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801266e:	bf00      	nop
 8012670:	3708      	adds	r7, #8
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	40010000 	.word	0x40010000

0801267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801267c:	b480      	push	{r7}
 801267e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012680:	b672      	cpsid	i
}
 8012682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012684:	e7fe      	b.n	8012684 <Error_Handler+0x8>
	...

08012688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801268e:	2300      	movs	r3, #0
 8012690:	607b      	str	r3, [r7, #4]
 8012692:	4b12      	ldr	r3, [pc, #72]	; (80126dc <HAL_MspInit+0x54>)
 8012694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012696:	4a11      	ldr	r2, [pc, #68]	; (80126dc <HAL_MspInit+0x54>)
 8012698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801269c:	6453      	str	r3, [r2, #68]	; 0x44
 801269e:	4b0f      	ldr	r3, [pc, #60]	; (80126dc <HAL_MspInit+0x54>)
 80126a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80126a6:	607b      	str	r3, [r7, #4]
 80126a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80126aa:	2300      	movs	r3, #0
 80126ac:	603b      	str	r3, [r7, #0]
 80126ae:	4b0b      	ldr	r3, [pc, #44]	; (80126dc <HAL_MspInit+0x54>)
 80126b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126b2:	4a0a      	ldr	r2, [pc, #40]	; (80126dc <HAL_MspInit+0x54>)
 80126b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126b8:	6413      	str	r3, [r2, #64]	; 0x40
 80126ba:	4b08      	ldr	r3, [pc, #32]	; (80126dc <HAL_MspInit+0x54>)
 80126bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126c2:	603b      	str	r3, [r7, #0]
 80126c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80126c6:	2200      	movs	r2, #0
 80126c8:	210f      	movs	r1, #15
 80126ca:	f06f 0001 	mvn.w	r0, #1
 80126ce:	f002 fe7d 	bl	80153cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80126d2:	bf00      	nop
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	40023800 	.word	0x40023800

080126e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4a0b      	ldr	r2, [pc, #44]	; (801271c <HAL_CRC_MspInit+0x3c>)
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d10d      	bne.n	801270e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80126f2:	2300      	movs	r3, #0
 80126f4:	60fb      	str	r3, [r7, #12]
 80126f6:	4b0a      	ldr	r3, [pc, #40]	; (8012720 <HAL_CRC_MspInit+0x40>)
 80126f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126fa:	4a09      	ldr	r2, [pc, #36]	; (8012720 <HAL_CRC_MspInit+0x40>)
 80126fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012700:	6313      	str	r3, [r2, #48]	; 0x30
 8012702:	4b07      	ldr	r3, [pc, #28]	; (8012720 <HAL_CRC_MspInit+0x40>)
 8012704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801270a:	60fb      	str	r3, [r7, #12]
 801270c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801270e:	bf00      	nop
 8012710:	3714      	adds	r7, #20
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	40023000 	.word	0x40023000
 8012720:	40023800 	.word	0x40023800

08012724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b08c      	sub	sp, #48	; 0x30
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801272c:	f107 031c 	add.w	r3, r7, #28
 8012730:	2200      	movs	r2, #0
 8012732:	601a      	str	r2, [r3, #0]
 8012734:	605a      	str	r2, [r3, #4]
 8012736:	609a      	str	r2, [r3, #8]
 8012738:	60da      	str	r2, [r3, #12]
 801273a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	4a32      	ldr	r2, [pc, #200]	; (801280c <HAL_SPI_MspInit+0xe8>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d12c      	bne.n	80127a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012746:	2300      	movs	r3, #0
 8012748:	61bb      	str	r3, [r7, #24]
 801274a:	4b31      	ldr	r3, [pc, #196]	; (8012810 <HAL_SPI_MspInit+0xec>)
 801274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801274e:	4a30      	ldr	r2, [pc, #192]	; (8012810 <HAL_SPI_MspInit+0xec>)
 8012750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012754:	6453      	str	r3, [r2, #68]	; 0x44
 8012756:	4b2e      	ldr	r3, [pc, #184]	; (8012810 <HAL_SPI_MspInit+0xec>)
 8012758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801275e:	61bb      	str	r3, [r7, #24]
 8012760:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012762:	2300      	movs	r3, #0
 8012764:	617b      	str	r3, [r7, #20]
 8012766:	4b2a      	ldr	r3, [pc, #168]	; (8012810 <HAL_SPI_MspInit+0xec>)
 8012768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801276a:	4a29      	ldr	r2, [pc, #164]	; (8012810 <HAL_SPI_MspInit+0xec>)
 801276c:	f043 0301 	orr.w	r3, r3, #1
 8012770:	6313      	str	r3, [r2, #48]	; 0x30
 8012772:	4b27      	ldr	r3, [pc, #156]	; (8012810 <HAL_SPI_MspInit+0xec>)
 8012774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012776:	f003 0301 	and.w	r3, r3, #1
 801277a:	617b      	str	r3, [r7, #20]
 801277c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 801277e:	23e0      	movs	r3, #224	; 0xe0
 8012780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012782:	2302      	movs	r3, #2
 8012784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012786:	2300      	movs	r3, #0
 8012788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801278a:	2303      	movs	r3, #3
 801278c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801278e:	2305      	movs	r3, #5
 8012790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012792:	f107 031c 	add.w	r3, r7, #28
 8012796:	4619      	mov	r1, r3
 8012798:	481e      	ldr	r0, [pc, #120]	; (8012814 <HAL_SPI_MspInit+0xf0>)
 801279a:	f002 feef 	bl	801557c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 801279e:	e030      	b.n	8012802 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a1c      	ldr	r2, [pc, #112]	; (8012818 <HAL_SPI_MspInit+0xf4>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d12b      	bne.n	8012802 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80127aa:	2300      	movs	r3, #0
 80127ac:	613b      	str	r3, [r7, #16]
 80127ae:	4b18      	ldr	r3, [pc, #96]	; (8012810 <HAL_SPI_MspInit+0xec>)
 80127b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127b2:	4a17      	ldr	r2, [pc, #92]	; (8012810 <HAL_SPI_MspInit+0xec>)
 80127b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127b8:	6413      	str	r3, [r2, #64]	; 0x40
 80127ba:	4b15      	ldr	r3, [pc, #84]	; (8012810 <HAL_SPI_MspInit+0xec>)
 80127bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127c2:	613b      	str	r3, [r7, #16]
 80127c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80127c6:	2300      	movs	r3, #0
 80127c8:	60fb      	str	r3, [r7, #12]
 80127ca:	4b11      	ldr	r3, [pc, #68]	; (8012810 <HAL_SPI_MspInit+0xec>)
 80127cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ce:	4a10      	ldr	r2, [pc, #64]	; (8012810 <HAL_SPI_MspInit+0xec>)
 80127d0:	f043 0302 	orr.w	r3, r3, #2
 80127d4:	6313      	str	r3, [r2, #48]	; 0x30
 80127d6:	4b0e      	ldr	r3, [pc, #56]	; (8012810 <HAL_SPI_MspInit+0xec>)
 80127d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127da:	f003 0302 	and.w	r3, r3, #2
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80127e2:	2338      	movs	r3, #56	; 0x38
 80127e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127e6:	2302      	movs	r3, #2
 80127e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127ea:	2300      	movs	r3, #0
 80127ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127ee:	2303      	movs	r3, #3
 80127f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80127f2:	2306      	movs	r3, #6
 80127f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80127f6:	f107 031c 	add.w	r3, r7, #28
 80127fa:	4619      	mov	r1, r3
 80127fc:	4807      	ldr	r0, [pc, #28]	; (801281c <HAL_SPI_MspInit+0xf8>)
 80127fe:	f002 febd 	bl	801557c <HAL_GPIO_Init>
}
 8012802:	bf00      	nop
 8012804:	3730      	adds	r7, #48	; 0x30
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	40013000 	.word	0x40013000
 8012810:	40023800 	.word	0x40023800
 8012814:	40020000 	.word	0x40020000
 8012818:	40003c00 	.word	0x40003c00
 801281c:	40020400 	.word	0x40020400

08012820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b08a      	sub	sp, #40	; 0x28
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012828:	f107 0314 	add.w	r3, r7, #20
 801282c:	2200      	movs	r2, #0
 801282e:	601a      	str	r2, [r3, #0]
 8012830:	605a      	str	r2, [r3, #4]
 8012832:	609a      	str	r2, [r3, #8]
 8012834:	60da      	str	r2, [r3, #12]
 8012836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	4a1d      	ldr	r2, [pc, #116]	; (80128b4 <HAL_UART_MspInit+0x94>)
 801283e:	4293      	cmp	r3, r2
 8012840:	d133      	bne.n	80128aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8012842:	2300      	movs	r3, #0
 8012844:	613b      	str	r3, [r7, #16]
 8012846:	4b1c      	ldr	r3, [pc, #112]	; (80128b8 <HAL_UART_MspInit+0x98>)
 8012848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801284a:	4a1b      	ldr	r2, [pc, #108]	; (80128b8 <HAL_UART_MspInit+0x98>)
 801284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012850:	6413      	str	r3, [r2, #64]	; 0x40
 8012852:	4b19      	ldr	r3, [pc, #100]	; (80128b8 <HAL_UART_MspInit+0x98>)
 8012854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801285a:	613b      	str	r3, [r7, #16]
 801285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801285e:	2300      	movs	r3, #0
 8012860:	60fb      	str	r3, [r7, #12]
 8012862:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <HAL_UART_MspInit+0x98>)
 8012864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012866:	4a14      	ldr	r2, [pc, #80]	; (80128b8 <HAL_UART_MspInit+0x98>)
 8012868:	f043 0301 	orr.w	r3, r3, #1
 801286c:	6313      	str	r3, [r2, #48]	; 0x30
 801286e:	4b12      	ldr	r3, [pc, #72]	; (80128b8 <HAL_UART_MspInit+0x98>)
 8012870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012872:	f003 0301 	and.w	r3, r3, #1
 8012876:	60fb      	str	r3, [r7, #12]
 8012878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 801287a:	230c      	movs	r3, #12
 801287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801287e:	2302      	movs	r3, #2
 8012880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012882:	2300      	movs	r3, #0
 8012884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012886:	2303      	movs	r3, #3
 8012888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801288a:	2307      	movs	r3, #7
 801288c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801288e:	f107 0314 	add.w	r3, r7, #20
 8012892:	4619      	mov	r1, r3
 8012894:	4809      	ldr	r0, [pc, #36]	; (80128bc <HAL_UART_MspInit+0x9c>)
 8012896:	f002 fe71 	bl	801557c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 801289a:	2200      	movs	r2, #0
 801289c:	2105      	movs	r1, #5
 801289e:	2026      	movs	r0, #38	; 0x26
 80128a0:	f002 fd94 	bl	80153cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80128a4:	2026      	movs	r0, #38	; 0x26
 80128a6:	f002 fdad 	bl	8015404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80128aa:	bf00      	nop
 80128ac:	3728      	adds	r7, #40	; 0x28
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	40004400 	.word	0x40004400
 80128b8:	40023800 	.word	0x40023800
 80128bc:	40020000 	.word	0x40020000

080128c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b08c      	sub	sp, #48	; 0x30
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80128c8:	2300      	movs	r3, #0
 80128ca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80128cc:	2300      	movs	r3, #0
 80128ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80128d0:	2300      	movs	r3, #0
 80128d2:	60bb      	str	r3, [r7, #8]
 80128d4:	4b2e      	ldr	r3, [pc, #184]	; (8012990 <HAL_InitTick+0xd0>)
 80128d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128d8:	4a2d      	ldr	r2, [pc, #180]	; (8012990 <HAL_InitTick+0xd0>)
 80128da:	f043 0301 	orr.w	r3, r3, #1
 80128de:	6453      	str	r3, [r2, #68]	; 0x44
 80128e0:	4b2b      	ldr	r3, [pc, #172]	; (8012990 <HAL_InitTick+0xd0>)
 80128e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128e4:	f003 0301 	and.w	r3, r3, #1
 80128e8:	60bb      	str	r3, [r7, #8]
 80128ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80128ec:	f107 020c 	add.w	r2, r7, #12
 80128f0:	f107 0310 	add.w	r3, r7, #16
 80128f4:	4611      	mov	r1, r2
 80128f6:	4618      	mov	r0, r3
 80128f8:	f003 fc76 	bl	80161e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80128fc:	f003 fc60 	bl	80161c0 <HAL_RCC_GetPCLK2Freq>
 8012900:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012904:	4a23      	ldr	r2, [pc, #140]	; (8012994 <HAL_InitTick+0xd4>)
 8012906:	fba2 2303 	umull	r2, r3, r2, r3
 801290a:	0c9b      	lsrs	r3, r3, #18
 801290c:	3b01      	subs	r3, #1
 801290e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012910:	4b21      	ldr	r3, [pc, #132]	; (8012998 <HAL_InitTick+0xd8>)
 8012912:	4a22      	ldr	r2, [pc, #136]	; (801299c <HAL_InitTick+0xdc>)
 8012914:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012916:	4b20      	ldr	r3, [pc, #128]	; (8012998 <HAL_InitTick+0xd8>)
 8012918:	f240 32e7 	movw	r2, #999	; 0x3e7
 801291c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801291e:	4a1e      	ldr	r2, [pc, #120]	; (8012998 <HAL_InitTick+0xd8>)
 8012920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012922:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012924:	4b1c      	ldr	r3, [pc, #112]	; (8012998 <HAL_InitTick+0xd8>)
 8012926:	2200      	movs	r2, #0
 8012928:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801292a:	4b1b      	ldr	r3, [pc, #108]	; (8012998 <HAL_InitTick+0xd8>)
 801292c:	2200      	movs	r2, #0
 801292e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012930:	4b19      	ldr	r3, [pc, #100]	; (8012998 <HAL_InitTick+0xd8>)
 8012932:	2200      	movs	r2, #0
 8012934:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8012936:	4818      	ldr	r0, [pc, #96]	; (8012998 <HAL_InitTick+0xd8>)
 8012938:	f004 fa5e 	bl	8016df8 <HAL_TIM_Base_Init>
 801293c:	4603      	mov	r3, r0
 801293e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8012942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012946:	2b00      	cmp	r3, #0
 8012948:	d11b      	bne.n	8012982 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 801294a:	4813      	ldr	r0, [pc, #76]	; (8012998 <HAL_InitTick+0xd8>)
 801294c:	f004 faae 	bl	8016eac <HAL_TIM_Base_Start_IT>
 8012950:	4603      	mov	r3, r0
 8012952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8012956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801295a:	2b00      	cmp	r3, #0
 801295c:	d111      	bne.n	8012982 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 801295e:	2019      	movs	r0, #25
 8012960:	f002 fd50 	bl	8015404 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b0f      	cmp	r3, #15
 8012968:	d808      	bhi.n	801297c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 801296a:	2200      	movs	r2, #0
 801296c:	6879      	ldr	r1, [r7, #4]
 801296e:	2019      	movs	r0, #25
 8012970:	f002 fd2c 	bl	80153cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012974:	4a0a      	ldr	r2, [pc, #40]	; (80129a0 <HAL_InitTick+0xe0>)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6013      	str	r3, [r2, #0]
 801297a:	e002      	b.n	8012982 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 801297c:	2301      	movs	r3, #1
 801297e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012986:	4618      	mov	r0, r3
 8012988:	3730      	adds	r7, #48	; 0x30
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	40023800 	.word	0x40023800
 8012994:	431bde83 	.word	0x431bde83
 8012998:	20000488 	.word	0x20000488
 801299c:	40010000 	.word	0x40010000
 80129a0:	200000bc 	.word	0x200000bc

080129a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80129a4:	b480      	push	{r7}
 80129a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80129a8:	e7fe      	b.n	80129a8 <NMI_Handler+0x4>

080129aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80129aa:	b480      	push	{r7}
 80129ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80129ae:	e7fe      	b.n	80129ae <HardFault_Handler+0x4>

080129b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80129b0:	b480      	push	{r7}
 80129b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80129b4:	e7fe      	b.n	80129b4 <MemManage_Handler+0x4>

080129b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80129b6:	b480      	push	{r7}
 80129b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80129ba:	e7fe      	b.n	80129ba <BusFault_Handler+0x4>

080129bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80129bc:	b480      	push	{r7}
 80129be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80129c0:	e7fe      	b.n	80129c0 <UsageFault_Handler+0x4>

080129c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80129c2:	b480      	push	{r7}
 80129c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80129c6:	bf00      	nop
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr

080129d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80129d4:	4802      	ldr	r0, [pc, #8]	; (80129e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80129d6:	f004 facb 	bl	8016f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80129da:	bf00      	nop
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	20000488 	.word	0x20000488

080129e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80129e8:	4802      	ldr	r0, [pc, #8]	; (80129f4 <USART2_IRQHandler+0x10>)
 80129ea:	f004 fd27 	bl	801743c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80129ee:	bf00      	nop
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	200003cc 	.word	0x200003cc

080129f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80129f8:	b480      	push	{r7}
 80129fa:	af00      	add	r7, sp, #0
  return 1;
 80129fc:	2301      	movs	r3, #1
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <_kill>:

int _kill(int pid, int sig)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b082      	sub	sp, #8
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012a12:	f01a fe51 	bl	802d6b8 <__errno>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2216      	movs	r2, #22
 8012a1a:	601a      	str	r2, [r3, #0]
  return -1;
 8012a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <_exit>:

void _exit (int status)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012a30:	f04f 31ff 	mov.w	r1, #4294967295
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7ff ffe7 	bl	8012a08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012a3a:	e7fe      	b.n	8012a3a <_exit+0x12>

08012a3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b086      	sub	sp, #24
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a48:	2300      	movs	r3, #0
 8012a4a:	617b      	str	r3, [r7, #20]
 8012a4c:	e00a      	b.n	8012a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012a4e:	f3af 8000 	nop.w
 8012a52:	4601      	mov	r1, r0
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	1c5a      	adds	r2, r3, #1
 8012a58:	60ba      	str	r2, [r7, #8]
 8012a5a:	b2ca      	uxtb	r2, r1
 8012a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	3301      	adds	r3, #1
 8012a62:	617b      	str	r3, [r7, #20]
 8012a64:	697a      	ldr	r2, [r7, #20]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	dbf0      	blt.n	8012a4e <_read+0x12>
  }

  return len;
 8012a6c:	687b      	ldr	r3, [r7, #4]
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3718      	adds	r7, #24
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}

08012a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012a76:	b580      	push	{r7, lr}
 8012a78:	b086      	sub	sp, #24
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	60f8      	str	r0, [r7, #12]
 8012a7e:	60b9      	str	r1, [r7, #8]
 8012a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a82:	2300      	movs	r3, #0
 8012a84:	617b      	str	r3, [r7, #20]
 8012a86:	e009      	b.n	8012a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	1c5a      	adds	r2, r3, #1
 8012a8c:	60ba      	str	r2, [r7, #8]
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	4618      	mov	r0, r3
 8012a92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	617b      	str	r3, [r7, #20]
 8012a9c:	697a      	ldr	r2, [r7, #20]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	dbf1      	blt.n	8012a88 <_write+0x12>
  }
  return len;
 8012aa4:	687b      	ldr	r3, [r7, #4]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}

08012aae <_close>:

int _close(int file)
{
 8012aae:	b480      	push	{r7}
 8012ab0:	b083      	sub	sp, #12
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	370c      	adds	r7, #12
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr

08012ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012ac6:	b480      	push	{r7}
 8012ac8:	b083      	sub	sp, #12
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
 8012ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8012ad8:	2300      	movs	r3, #0
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	370c      	adds	r7, #12
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr

08012ae6 <_isatty>:

int _isatty(int file)
{
 8012ae6:	b480      	push	{r7}
 8012ae8:	b083      	sub	sp, #12
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012aee:	2301      	movs	r3, #1
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	370c      	adds	r7, #12
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012afc:	b480      	push	{r7}
 8012afe:	b085      	sub	sp, #20
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012b08:	2300      	movs	r3, #0
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3714      	adds	r7, #20
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr
	...

08012b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b086      	sub	sp, #24
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012b20:	4a14      	ldr	r2, [pc, #80]	; (8012b74 <_sbrk+0x5c>)
 8012b22:	4b15      	ldr	r3, [pc, #84]	; (8012b78 <_sbrk+0x60>)
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012b2c:	4b13      	ldr	r3, [pc, #76]	; (8012b7c <_sbrk+0x64>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d102      	bne.n	8012b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012b34:	4b11      	ldr	r3, [pc, #68]	; (8012b7c <_sbrk+0x64>)
 8012b36:	4a12      	ldr	r2, [pc, #72]	; (8012b80 <_sbrk+0x68>)
 8012b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012b3a:	4b10      	ldr	r3, [pc, #64]	; (8012b7c <_sbrk+0x64>)
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4413      	add	r3, r2
 8012b42:	693a      	ldr	r2, [r7, #16]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d207      	bcs.n	8012b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012b48:	f01a fdb6 	bl	802d6b8 <__errno>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	220c      	movs	r2, #12
 8012b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012b52:	f04f 33ff 	mov.w	r3, #4294967295
 8012b56:	e009      	b.n	8012b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012b58:	4b08      	ldr	r3, [pc, #32]	; (8012b7c <_sbrk+0x64>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012b5e:	4b07      	ldr	r3, [pc, #28]	; (8012b7c <_sbrk+0x64>)
 8012b60:	681a      	ldr	r2, [r3, #0]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4413      	add	r3, r2
 8012b66:	4a05      	ldr	r2, [pc, #20]	; (8012b7c <_sbrk+0x64>)
 8012b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	20010000 	.word	0x20010000
 8012b78:	00000400 	.word	0x00000400
 8012b7c:	200004d0 	.word	0x200004d0
 8012b80:	2000dae0 	.word	0x2000dae0

08012b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012b84:	b480      	push	{r7}
 8012b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012b88:	4b06      	ldr	r3, [pc, #24]	; (8012ba4 <SystemInit+0x20>)
 8012b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b8e:	4a05      	ldr	r2, [pc, #20]	; (8012ba4 <SystemInit+0x20>)
 8012b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012b98:	bf00      	nop
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr
 8012ba2:	bf00      	nop
 8012ba4:	e000ed00 	.word	0xe000ed00

08012ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012be0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012bac:	f7ff ffea 	bl	8012b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012bb0:	480c      	ldr	r0, [pc, #48]	; (8012be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012bb2:	490d      	ldr	r1, [pc, #52]	; (8012be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012bb4:	4a0d      	ldr	r2, [pc, #52]	; (8012bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012bb8:	e002      	b.n	8012bc0 <LoopCopyDataInit>

08012bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012bbe:	3304      	adds	r3, #4

08012bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012bc4:	d3f9      	bcc.n	8012bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012bc6:	4a0a      	ldr	r2, [pc, #40]	; (8012bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012bc8:	4c0a      	ldr	r4, [pc, #40]	; (8012bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012bcc:	e001      	b.n	8012bd2 <LoopFillZerobss>

08012bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012bd0:	3204      	adds	r2, #4

08012bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012bd4:	d3fb      	bcc.n	8012bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012bd6:	f01a fd75 	bl	802d6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012bda:	f7fe faf3 	bl	80111c4 <main>
  bx  lr    
 8012bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012be0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012be8:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012bec:	080348a0 	.word	0x080348a0
  ldr r2, =_sbss
 8012bf0:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012bf4:	2000dae0 	.word	0x2000dae0

08012bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012bf8:	e7fe      	b.n	8012bf8 <ADC_IRQHandler>

08012bfa <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012bfa:	b480      	push	{r7}
 8012bfc:	b083      	sub	sp, #12
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	4603      	mov	r3, r0
 8012c02:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012c04:	79fb      	ldrb	r3, [r7, #7]
 8012c06:	2b2f      	cmp	r3, #47	; 0x2f
 8012c08:	d905      	bls.n	8012c16 <CharToDec+0x1c>
 8012c0a:	79fb      	ldrb	r3, [r7, #7]
 8012c0c:	2b39      	cmp	r3, #57	; 0x39
 8012c0e:	d802      	bhi.n	8012c16 <CharToDec+0x1c>
 8012c10:	79fb      	ldrb	r3, [r7, #7]
 8012c12:	3b30      	subs	r3, #48	; 0x30
 8012c14:	e012      	b.n	8012c3c <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012c16:	79fb      	ldrb	r3, [r7, #7]
 8012c18:	2b60      	cmp	r3, #96	; 0x60
 8012c1a:	d905      	bls.n	8012c28 <CharToDec+0x2e>
 8012c1c:	79fb      	ldrb	r3, [r7, #7]
 8012c1e:	2b66      	cmp	r3, #102	; 0x66
 8012c20:	d802      	bhi.n	8012c28 <CharToDec+0x2e>
 8012c22:	79fb      	ldrb	r3, [r7, #7]
 8012c24:	3b57      	subs	r3, #87	; 0x57
 8012c26:	e009      	b.n	8012c3c <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012c28:	79fb      	ldrb	r3, [r7, #7]
 8012c2a:	2b40      	cmp	r3, #64	; 0x40
 8012c2c:	d905      	bls.n	8012c3a <CharToDec+0x40>
 8012c2e:	79fb      	ldrb	r3, [r7, #7]
 8012c30:	2b46      	cmp	r3, #70	; 0x46
 8012c32:	d802      	bhi.n	8012c3a <CharToDec+0x40>
 8012c34:	79fb      	ldrb	r3, [r7, #7]
 8012c36:	3b37      	subs	r3, #55	; 0x37
 8012c38:	e000      	b.n	8012c3c <CharToDec+0x42>
    return 0;
 8012c3a:	2300      	movs	r3, #0
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	460b      	mov	r3, r1
 8012c52:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012c54:	78fb      	ldrb	r3, [r7, #3]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d106      	bne.n	8012c68 <http_parse_params_init+0x20>
		if (xQueue){
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d034      	beq.n	8012cca <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012c60:	4a1d      	ldr	r2, [pc, #116]	; (8012cd8 <http_parse_params_init+0x90>)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012c66:	e030      	b.n	8012cca <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012c68:	78fb      	ldrb	r3, [r7, #3]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d106      	bne.n	8012c7c <http_parse_params_init+0x34>
		if (xQueue){
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d02a      	beq.n	8012cca <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012c74:	4a19      	ldr	r2, [pc, #100]	; (8012cdc <http_parse_params_init+0x94>)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6013      	str	r3, [r2, #0]
}
 8012c7a:	e026      	b.n	8012cca <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012c7c:	78fb      	ldrb	r3, [r7, #3]
 8012c7e:	2b02      	cmp	r3, #2
 8012c80:	d106      	bne.n	8012c90 <http_parse_params_init+0x48>
		if (xQueue){
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d020      	beq.n	8012cca <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8012c88:	4a15      	ldr	r2, [pc, #84]	; (8012ce0 <http_parse_params_init+0x98>)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6013      	str	r3, [r2, #0]
}
 8012c8e:	e01c      	b.n	8012cca <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 8012c90:	78fb      	ldrb	r3, [r7, #3]
 8012c92:	2b03      	cmp	r3, #3
 8012c94:	d106      	bne.n	8012ca4 <http_parse_params_init+0x5c>
		if (xQueue){
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d016      	beq.n	8012cca <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 8012c9c:	4a11      	ldr	r2, [pc, #68]	; (8012ce4 <http_parse_params_init+0x9c>)
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6013      	str	r3, [r2, #0]
}
 8012ca2:	e012      	b.n	8012cca <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8012ca4:	78fb      	ldrb	r3, [r7, #3]
 8012ca6:	2b04      	cmp	r3, #4
 8012ca8:	d106      	bne.n	8012cb8 <http_parse_params_init+0x70>
		if (xQueue){
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00c      	beq.n	8012cca <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 8012cb0:	4a0d      	ldr	r2, [pc, #52]	; (8012ce8 <http_parse_params_init+0xa0>)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6013      	str	r3, [r2, #0]
}
 8012cb6:	e008      	b.n	8012cca <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8012cb8:	78fb      	ldrb	r3, [r7, #3]
 8012cba:	2b05      	cmp	r3, #5
 8012cbc:	d105      	bne.n	8012cca <http_parse_params_init+0x82>
		if (xQueue){
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d002      	beq.n	8012cca <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8012cc4:	4a09      	ldr	r2, [pc, #36]	; (8012cec <http_parse_params_init+0xa4>)
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6013      	str	r3, [r2, #0]
}
 8012cca:	bf00      	nop
 8012ccc:	370c      	adds	r7, #12
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd4:	4770      	bx	lr
 8012cd6:	bf00      	nop
 8012cd8:	200004d4 	.word	0x200004d4
 8012cdc:	200004d8 	.word	0x200004d8
 8012ce0:	200004dc 	.word	0x200004dc
 8012ce4:	200004e0 	.word	0x200004e0
 8012ce8:	200004e4 	.word	0x200004e4
 8012cec:	200004e8 	.word	0x200004e8

08012cf0 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b0cc      	sub	sp, #304	; 0x130
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012cfe:	6018      	str	r0, [r3, #0]
 8012d00:	460a      	mov	r2, r1
 8012d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d06:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012d0a:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8012d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d10:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	2b04      	cmp	r3, #4
 8012d18:	f200 814a 	bhi.w	8012fb0 <param_from_http_to_Q+0x2c0>
 8012d1c:	a201      	add	r2, pc, #4	; (adr r2, 8012d24 <param_from_http_to_Q+0x34>)
 8012d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d22:	bf00      	nop
 8012d24:	08012d39 	.word	0x08012d39
 8012d28:	08012fb1 	.word	0x08012fb1
 8012d2c:	08012ec5 	.word	0x08012ec5
 8012d30:	08012fb1 	.word	0x08012fb1
 8012d34:	08012f4b 	.word	0x08012f4b

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 8012d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012d3c:	22c6      	movs	r2, #198	; 0xc6
 8012d3e:	2100      	movs	r1, #0
 8012d40:	4618      	mov	r0, r3
 8012d42:	f01a fb19 	bl	802d378 <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1")){
 8012d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d4e:	499c      	ldr	r1, [pc, #624]	; (8012fc0 <param_from_http_to_Q+0x2d0>)
 8012d50:	6818      	ldr	r0, [r3, #0]
 8012d52:	f00b fb1f 	bl	801e394 <get_http_param_value>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2131      	movs	r1, #49	; 0x31
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f01a fb23 	bl	802d3a6 <strchr>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d003      	beq.n	8012d6e <param_from_http_to_Q+0x7e>
				MQTT_params.enable = 1;
 8012d66:	2301      	movs	r3, #1
 8012d68:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8012d6c:	e012      	b.n	8012d94 <param_from_http_to_Q+0xa4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0")) {
 8012d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d76:	4992      	ldr	r1, [pc, #584]	; (8012fc0 <param_from_http_to_Q+0x2d0>)
 8012d78:	6818      	ldr	r0, [r3, #0]
 8012d7a:	f00b fb0b 	bl	801e394 <get_http_param_value>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	2130      	movs	r1, #48	; 0x30
 8012d82:	4618      	mov	r0, r3
 8012d84:	f01a fb0f 	bl	802d3a6 <strchr>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d002      	beq.n	8012d94 <param_from_http_to_Q+0xa4>
				MQTT_params.enable = 0;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8012d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012d9c:	4989      	ldr	r1, [pc, #548]	; (8012fc4 <param_from_http_to_Q+0x2d4>)
 8012d9e:	6818      	ldr	r0, [r3, #0]
 8012da0:	f00b faf8 	bl	801e394 <get_http_param_value>
 8012da4:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8012da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d106      	bne.n	8012dbe <param_from_http_to_Q+0xce>
 8012db0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012db4:	f7fd fa74 	bl	80102a0 <strlen>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b20      	cmp	r3, #32
 8012dbc:	d807      	bhi.n	8012dce <param_from_http_to_Q+0xde>
				strcpy(MQTT_params.login, buf);
 8012dbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012dc2:	3384      	adds	r3, #132	; 0x84
 8012dc4:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f01a fca2 	bl	802d712 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 8012dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012dd6:	497c      	ldr	r1, [pc, #496]	; (8012fc8 <param_from_http_to_Q+0x2d8>)
 8012dd8:	6818      	ldr	r0, [r3, #0]
 8012dda:	f00b fadb 	bl	801e394 <get_http_param_value>
 8012dde:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8012de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <param_from_http_to_Q+0x108>
 8012dea:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012dee:	f7fd fa57 	bl	80102a0 <strlen>
 8012df2:	4603      	mov	r3, r0
 8012df4:	2b20      	cmp	r3, #32
 8012df6:	d807      	bhi.n	8012e08 <param_from_http_to_Q+0x118>
				strcpy(MQTT_params.pass, buf);
 8012df8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012dfc:	33a5      	adds	r3, #165	; 0xa5
 8012dfe:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012e02:	4618      	mov	r0, r3
 8012e04:	f01a fc85 	bl	802d712 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 8012e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e10:	496e      	ldr	r1, [pc, #440]	; (8012fcc <param_from_http_to_Q+0x2dc>)
 8012e12:	6818      	ldr	r0, [r3, #0]
 8012e14:	f00b fabe 	bl	801e394 <get_http_param_value>
 8012e18:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 8012e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d106      	bne.n	8012e32 <param_from_http_to_Q+0x142>
 8012e24:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012e28:	f7fd fa3a 	bl	80102a0 <strlen>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8012e30:	d808      	bhi.n	8012e44 <param_from_http_to_Q+0x154>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 8012e32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e36:	3302      	adds	r3, #2
 8012e38:	227f      	movs	r2, #127	; 0x7f
 8012e3a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f01a faf4 	bl	802d42c <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8012e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e4c:	4960      	ldr	r1, [pc, #384]	; (8012fd0 <param_from_http_to_Q+0x2e0>)
 8012e4e:	6818      	ldr	r0, [r3, #0]
 8012e50:	f00b faa0 	bl	801e394 <get_http_param_value>
 8012e54:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8012e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d106      	bne.n	8012e6e <param_from_http_to_Q+0x17e>
 8012e60:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012e64:	f7fd fa1c 	bl	80102a0 <strlen>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b05      	cmp	r3, #5
 8012e6c:	d81e      	bhi.n	8012eac <param_from_http_to_Q+0x1bc>
				sscanf(buf, "%d", &port);
 8012e6e:	f107 0316 	add.w	r3, r7, #22
 8012e72:	461a      	mov	r2, r3
 8012e74:	4957      	ldr	r1, [pc, #348]	; (8012fd4 <param_from_http_to_Q+0x2e4>)
 8012e76:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012e7a:	f01a f94d 	bl	802d118 <siscanf>
				if ((port > 0) && (port < 65535)){
 8012e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e82:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d00f      	beq.n	8012eac <param_from_http_to_Q+0x1bc>
 8012e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e90:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012e94:	881b      	ldrh	r3, [r3, #0]
 8012e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	d006      	beq.n	8012eac <param_from_http_to_Q+0x1bc>
					MQTT_params.port = port;
 8012e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ea2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012ea6:	881b      	ldrh	r3, [r3, #0]
 8012ea8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 8012eac:	2301      	movs	r3, #1
 8012eae:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8012eb2:	4b49      	ldr	r3, [pc, #292]	; (8012fd8 <param_from_http_to_Q+0x2e8>)
 8012eb4:	6818      	ldr	r0, [r3, #0]
 8012eb6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8012eba:	2302      	movs	r3, #2
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	f00d fc1f 	bl	8020700 <xQueueGenericSend>

			break;
 8012ec2:	e078      	b.n	8012fb6 <param_from_http_to_Q+0x2c6>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8012ec4:	f107 031c 	add.w	r3, r7, #28
 8012ec8:	2202      	movs	r2, #2
 8012eca:	2100      	movs	r1, #0
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f01a fa53 	bl	802d378 <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 8012ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ed6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eda:	4940      	ldr	r1, [pc, #256]	; (8012fdc <param_from_http_to_Q+0x2ec>)
 8012edc:	6818      	ldr	r0, [r3, #0]
 8012ede:	f00b fa59 	bl	801e394 <get_http_param_value>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2131      	movs	r1, #49	; 0x31
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f01a fa5d 	bl	802d3a6 <strchr>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d006      	beq.n	8012f00 <param_from_http_to_Q+0x210>
				ModBusTCP_parameters.enable = 1;
 8012ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ef6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012efa:	2201      	movs	r2, #1
 8012efc:	705a      	strb	r2, [r3, #1]
 8012efe:	e015      	b.n	8012f2c <param_from_http_to_Q+0x23c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 8012f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f08:	4934      	ldr	r1, [pc, #208]	; (8012fdc <param_from_http_to_Q+0x2ec>)
 8012f0a:	6818      	ldr	r0, [r3, #0]
 8012f0c:	f00b fa42 	bl	801e394 <get_http_param_value>
 8012f10:	4603      	mov	r3, r0
 8012f12:	2130      	movs	r1, #48	; 0x30
 8012f14:	4618      	mov	r0, r3
 8012f16:	f01a fa46 	bl	802d3a6 <strchr>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d005      	beq.n	8012f2c <param_from_http_to_Q+0x23c>
				ModBusTCP_parameters.enable = 0;
 8012f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012f28:	2200      	movs	r2, #0
 8012f2a:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 8012f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012f34:	2201      	movs	r2, #1
 8012f36:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 8012f38:	4b29      	ldr	r3, [pc, #164]	; (8012fe0 <param_from_http_to_Q+0x2f0>)
 8012f3a:	6818      	ldr	r0, [r3, #0]
 8012f3c:	f107 011c 	add.w	r1, r7, #28
 8012f40:	2302      	movs	r3, #2
 8012f42:	2200      	movs	r2, #0
 8012f44:	f00d fbdc 	bl	8020700 <xQueueGenericSend>
			break;
 8012f48:	e035      	b.n	8012fb6 <param_from_http_to_Q+0x2c6>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 8012f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f52:	4924      	ldr	r1, [pc, #144]	; (8012fe4 <param_from_http_to_Q+0x2f4>)
 8012f54:	6818      	ldr	r0, [r3, #0]
 8012f56:	f00b fa1d 	bl	801e394 <get_http_param_value>
 8012f5a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 8012f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d026      	beq.n	8012fb4 <param_from_http_to_Q+0x2c4>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 8012f66:	4a20      	ldr	r2, [pc, #128]	; (8012fe8 <param_from_http_to_Q+0x2f8>)
 8012f68:	4920      	ldr	r1, [pc, #128]	; (8012fec <param_from_http_to_Q+0x2fc>)
 8012f6a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012f6e:	f01a f8d3 	bl	802d118 <siscanf>
				if (float_temp > 0){									//validate value
 8012f72:	4b1d      	ldr	r3, [pc, #116]	; (8012fe8 <param_from_http_to_Q+0x2f8>)
 8012f74:	edd3 7a00 	vldr	s15, [r3]
 8012f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f80:	dc00      	bgt.n	8012f84 <param_from_http_to_Q+0x294>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 8012f82:	e017      	b.n	8012fb4 <param_from_http_to_Q+0x2c4>
					PowShunSett.resistance = float_temp;
 8012f84:	4b18      	ldr	r3, [pc, #96]	; (8012fe8 <param_from_http_to_Q+0x2f8>)
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012f90:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 8012f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 8012f9e:	4b14      	ldr	r3, [pc, #80]	; (8012ff0 <param_from_http_to_Q+0x300>)
 8012fa0:	6818      	ldr	r0, [r3, #0]
 8012fa2:	f107 010c 	add.w	r1, r7, #12
 8012fa6:	2302      	movs	r3, #2
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f00d fba9 	bl	8020700 <xQueueGenericSend>
			break;
 8012fae:	e001      	b.n	8012fb4 <param_from_http_to_Q+0x2c4>
		default:
			break;
 8012fb0:	bf00      	nop
 8012fb2:	e000      	b.n	8012fb6 <param_from_http_to_Q+0x2c6>
			break;
 8012fb4:	bf00      	nop
	}
}
 8012fb6:	bf00      	nop
 8012fb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	080320e4 	.word	0x080320e4
 8012fc4:	080320ec 	.word	0x080320ec
 8012fc8:	080320f4 	.word	0x080320f4
 8012fcc:	08032100 	.word	0x08032100
 8012fd0:	08032104 	.word	0x08032104
 8012fd4:	0803210c 	.word	0x0803210c
 8012fd8:	200004d4 	.word	0x200004d4
 8012fdc:	08032110 	.word	0x08032110
 8012fe0:	200004dc 	.word	0x200004dc
 8012fe4:	08032118 	.word	0x08032118
 8012fe8:	200004ec 	.word	0x200004ec
 8012fec:	08032120 	.word	0x08032120
 8012ff0:	200004e4 	.word	0x200004e4

08012ff4 <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 8012ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff8:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8012ffc:	af0a      	add	r7, sp, #40	; 0x28
 8012ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013002:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013006:	6018      	str	r0, [r3, #0]
 8013008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801300c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013010:	601a      	str	r2, [r3, #0]
 8013012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013016:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 801301a:	460a      	mov	r2, r1
 801301c:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 801301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013022:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013026:	4a73      	ldr	r2, [pc, #460]	; (80131f4 <param_from_Q_to_JSON+0x200>)
 8013028:	4618      	mov	r0, r3
 801302a:	4611      	mov	r1, r2
 801302c:	2351      	movs	r3, #81	; 0x51
 801302e:	461a      	mov	r2, r3
 8013030:	f01a fb77 	bl	802d722 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 8013034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013038:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801303c:	4a6e      	ldr	r2, [pc, #440]	; (80131f8 <param_from_Q_to_JSON+0x204>)
 801303e:	4618      	mov	r0, r3
 8013040:	4611      	mov	r1, r2
 8013042:	2384      	movs	r3, #132	; 0x84
 8013044:	461a      	mov	r2, r3
 8013046:	f01a fb6c 	bl	802d722 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 801304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801304e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8013052:	4a6a      	ldr	r2, [pc, #424]	; (80131fc <param_from_Q_to_JSON+0x208>)
 8013054:	461c      	mov	r4, r3
 8013056:	4615      	mov	r5, r2
 8013058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801305a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8013060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013064:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	2b04      	cmp	r3, #4
 801306c:	f000 8093 	beq.w	8013196 <param_from_Q_to_JSON+0x1a2>
 8013070:	2b04      	cmp	r3, #4
 8013072:	f300 80b8 	bgt.w	80131e6 <param_from_Q_to_JSON+0x1f2>
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <param_from_Q_to_JSON+0x8c>
 801307a:	2b03      	cmp	r3, #3
 801307c:	d031      	beq.n	80130e2 <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 801307e:	e0b2      	b.n	80131e6 <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8013080:	4b5f      	ldr	r3, [pc, #380]	; (8013200 <param_from_Q_to_JSON+0x20c>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013088:	2200      	movs	r2, #0
 801308a:	4618      	mov	r0, r3
 801308c:	f00d febe 	bl	8020e0c <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8013090:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 8013094:	461d      	mov	r5, r3
 8013096:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 801309a:	461e      	mov	r6, r3
 801309c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130a0:	1c9c      	adds	r4, r3, #2
 80130a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80130a6:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80130aa:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80130ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130b2:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 80130b6:	9601      	str	r6, [sp, #4]
 80130b8:	9500      	str	r5, [sp, #0]
 80130ba:	4623      	mov	r3, r4
 80130bc:	6800      	ldr	r0, [r0, #0]
 80130be:	f01a f80b 	bl	802d0d8 <siprintf>
			*len = strlen(buf);
 80130c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80130ca:	6818      	ldr	r0, [r3, #0]
 80130cc:	f7fd f8e8 	bl	80102a0 <strlen>
 80130d0:	4603      	mov	r3, r0
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	801a      	strh	r2, [r3, #0]
			break;
 80130e0:	e082      	b.n	80131e8 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 80130e2:	4b48      	ldr	r3, [pc, #288]	; (8013204 <param_from_Q_to_JSON+0x210>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80130ea:	2200      	movs	r2, #0
 80130ec:	4618      	mov	r0, r3
 80130ee:	f00d fe8d 	bl	8020e0c <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivPower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 80130f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7fd fa3e 	bl	8010578 <__aeabi_f2d>
 80130fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8013100:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013104:	4618      	mov	r0, r3
 8013106:	f7fd fa37 	bl	8010578 <__aeabi_f2d>
 801310a:	4604      	mov	r4, r0
 801310c:	460d      	mov	r5, r1
 801310e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013112:	4618      	mov	r0, r3
 8013114:	f7fd fa30 	bl	8010578 <__aeabi_f2d>
 8013118:	4680      	mov	r8, r0
 801311a:	4689      	mov	r9, r1
 801311c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013120:	4618      	mov	r0, r3
 8013122:	f7fd fa29 	bl	8010578 <__aeabi_f2d>
 8013126:	4682      	mov	sl, r0
 8013128:	468b      	mov	fp, r1
 801312a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801312e:	4618      	mov	r0, r3
 8013130:	f7fd fa22 	bl	8010578 <__aeabi_f2d>
 8013134:	e9c7 0100 	strd	r0, r1, [r7]
 8013138:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801313c:	4618      	mov	r0, r3
 801313e:	f7fd fa1b 	bl	8010578 <__aeabi_f2d>
 8013142:	4602      	mov	r2, r0
 8013144:	460b      	mov	r3, r1
 8013146:	f107 0634 	add.w	r6, r7, #52	; 0x34
 801314a:	f507 7100 	add.w	r1, r7, #512	; 0x200
 801314e:	f5a1 70f2 	sub.w	r0, r1, #484	; 0x1e4
 8013152:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013156:	ed97 7b00 	vldr	d7, [r7]
 801315a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801315e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8013162:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013166:	e9cd 4500 	strd	r4, r5, [sp]
 801316a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801316e:	4631      	mov	r1, r6
 8013170:	6800      	ldr	r0, [r0, #0]
 8013172:	f019 ffb1 	bl	802d0d8 <siprintf>
			*len = strlen(buf);
 8013176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801317a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801317e:	6818      	ldr	r0, [r3, #0]
 8013180:	f7fd f88e 	bl	80102a0 <strlen>
 8013184:	4603      	mov	r3, r0
 8013186:	b29a      	uxth	r2, r3
 8013188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801318c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	801a      	strh	r2, [r3, #0]
			break;
 8013194:	e028      	b.n	80131e8 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 8013196:	4b1c      	ldr	r3, [pc, #112]	; (8013208 <param_from_Q_to_JSON+0x214>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801319e:	2200      	movs	r2, #0
 80131a0:	4618      	mov	r0, r3
 80131a2:	f00d fe33 	bl	8020e0c <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 80131a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fd f9e4 	bl	8010578 <__aeabi_f2d>
 80131b0:	4602      	mov	r2, r0
 80131b2:	460b      	mov	r3, r1
 80131b4:	f107 0120 	add.w	r1, r7, #32
 80131b8:	f507 7000 	add.w	r0, r7, #512	; 0x200
 80131bc:	f5a0 70f2 	sub.w	r0, r0, #484	; 0x1e4
 80131c0:	6800      	ldr	r0, [r0, #0]
 80131c2:	f019 ff89 	bl	802d0d8 <siprintf>
			*len = strlen(buf);
 80131c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80131ce:	6818      	ldr	r0, [r3, #0]
 80131d0:	f7fd f866 	bl	80102a0 <strlen>
 80131d4:	4603      	mov	r3, r0
 80131d6:	b29a      	uxth	r2, r3
 80131d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	801a      	strh	r2, [r3, #0]
			break;
 80131e4:	e000      	b.n	80131e8 <param_from_Q_to_JSON+0x1f4>
			break;
 80131e6:	bf00      	nop
	}
}
 80131e8:	bf00      	nop
 80131ea:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80131ee:	46bd      	mov	sp, r7
 80131f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f4:	08032124 	.word	0x08032124
 80131f8:	08032178 	.word	0x08032178
 80131fc:	080321fc 	.word	0x080321fc
 8013200:	200004d4 	.word	0x200004d4
 8013204:	200004e0 	.word	0x200004e0
 8013208:	200004e4 	.word	0x200004e4

0801320c <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 801320c:	b590      	push	{r4, r7, lr}
 801320e:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8013212:	af02      	add	r7, sp, #8
 8013214:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 8013218:	f5a4 7439 	sub.w	r4, r4, #740	; 0x2e4
 801321c:	6020      	str	r0, [r4, #0]
 801321e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8013222:	f5a0 703a 	sub.w	r0, r0, #744	; 0x2e8
 8013226:	6001      	str	r1, [r0, #0]
 8013228:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 801322c:	f5a1 713b 	sub.w	r1, r1, #748	; 0x2ec
 8013230:	600a      	str	r2, [r1, #0]
 8013232:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8013236:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 801323a:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 801323c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013240:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 8013244:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013248:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801324c:	49ac      	ldr	r1, [pc, #688]	; (8013500 <write_to_file+0x2f4>)
 801324e:	6818      	ldr	r0, [r3, #0]
 8013250:	f00b f8a0 	bl	801e394 <get_http_param_value>
 8013254:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 8013258:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d025      	beq.n	80132ac <write_to_file+0xa0>
		strcpy(filename, base_path);
 8013260:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013264:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8013268:	f107 0294 	add.w	r2, r7, #148	; 0x94
 801326c:	6819      	ldr	r1, [r3, #0]
 801326e:	4610      	mov	r0, r2
 8013270:	f01a fa4f 	bl	802d712 <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 8013274:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013278:	222d      	movs	r2, #45	; 0x2d
 801327a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801327e:	4618      	mov	r0, r3
 8013280:	f01a f8af 	bl	802d3e2 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 8013284:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013288:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801328c:	499d      	ldr	r1, [pc, #628]	; (8013504 <write_to_file+0x2f8>)
 801328e:	6818      	ldr	r0, [r3, #0]
 8013290:	f00b f880 	bl	801e394 <get_http_param_value>
 8013294:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 8013298:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 801329c:	f7fd f800 	bl	80102a0 <strlen>
 80132a0:	4603      	mov	r3, r0
 80132a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132a6:	f080 8113 	bcs.w	80134d0 <write_to_file+0x2c4>
 80132aa:	e011      	b.n	80132d0 <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 80132ac:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80132b0:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	4a94      	ldr	r2, [pc, #592]	; (8013508 <write_to_file+0x2fc>)
 80132b8:	6810      	ldr	r0, [r2, #0]
 80132ba:	6018      	str	r0, [r3, #0]
 80132bc:	8892      	ldrh	r2, [r2, #4]
 80132be:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80132c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80132c4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	2205      	movs	r2, #5
 80132cc:	801a      	strh	r2, [r3, #0]
		return;
 80132ce:	e111      	b.n	80134f4 <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 80132d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	f000 80e9 	beq.w	80134ac <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 80132da:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 80132de:	f7fc ffdf 	bl	80102a0 <strlen>
 80132e2:	4603      	mov	r3, r0
 80132e4:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 80132e8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80132ec:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80132f6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80132fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80132fe:	f017 fcc9 	bl	802ac94 <mbedtls_base64_decode>
 8013302:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 8013306:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801330a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801330e:	497f      	ldr	r1, [pc, #508]	; (801350c <write_to_file+0x300>)
 8013310:	6818      	ldr	r0, [r3, #0]
 8013312:	f00b f83f 	bl	801e394 <get_http_param_value>
 8013316:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 801331a:	2300      	movs	r3, #0
 801331c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8013320:	e030      	b.n	8013384 <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 8013322:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013326:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 801332a:	4413      	add	r3, r2
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff fc63 	bl	8012bfa <CharToDec>
 8013334:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 8013338:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801333c:	3301      	adds	r3, #1
 801333e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8013342:	4413      	add	r3, r2
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	4618      	mov	r0, r3
 8013348:	f7ff fc57 	bl	8012bfa <CharToDec>
 801334c:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 8013350:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8013354:	011b      	lsls	r3, r3, #4
 8013356:	b25a      	sxtb	r2, r3
 8013358:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801335c:	b25b      	sxtb	r3, r3
 801335e:	4313      	orrs	r3, r2
 8013360:	b259      	sxtb	r1, r3
 8013362:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013366:	0fda      	lsrs	r2, r3, #31
 8013368:	4413      	add	r3, r2
 801336a:	105b      	asrs	r3, r3, #1
 801336c:	461a      	mov	r2, r3
 801336e:	b2c9      	uxtb	r1, r1
 8013370:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013374:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013378:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 801337a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801337e:	3302      	adds	r3, #2
 8013380:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8013384:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013388:	2b1f      	cmp	r3, #31
 801338a:	ddca      	ble.n	8013322 <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 801338c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013390:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013394:	2200      	movs	r2, #0
 8013396:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 8013398:	f107 0310 	add.w	r3, r7, #16
 801339c:	4618      	mov	r0, r3
 801339e:	f017 fd95 	bl	802aecc <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 80133a2:	f107 0310 	add.w	r3, r7, #16
 80133a6:	4618      	mov	r0, r3
 80133a8:	f017 fdae 	bl	802af08 <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 80133ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80133b0:	681a      	ldr	r2, [r3, #0]
 80133b2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80133b6:	f107 0310 	add.w	r3, r7, #16
 80133ba:	4618      	mov	r0, r3
 80133bc:	f018 fc8e 	bl	802bcdc <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 80133c0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80133c4:	f107 0310 	add.w	r3, r7, #16
 80133c8:	4611      	mov	r1, r2
 80133ca:	4618      	mov	r0, r3
 80133cc:	f018 fcfb 	bl	802bdc6 <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 80133d0:	f107 0310 	add.w	r3, r7, #16
 80133d4:	4618      	mov	r0, r3
 80133d6:	f017 fd86 	bl	802aee6 <mbedtls_md5_free>
		output[16] = '\0';
 80133da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80133de:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80133e2:	2200      	movs	r2, #0
 80133e4:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 80133e6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80133ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80133ee:	2210      	movs	r2, #16
 80133f0:	4618      	mov	r0, r3
 80133f2:	f01a f809 	bl	802d408 <strncmp>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d006      	beq.n	801340a <write_to_file+0x1fe>
			err = -1;
 80133fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013400:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 8013404:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013408:	e074      	b.n	80134f4 <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 801340a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801340e:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013412:	493f      	ldr	r1, [pc, #252]	; (8013510 <write_to_file+0x304>)
 8013414:	6818      	ldr	r0, [r3, #0]
 8013416:	f00a ffbd 	bl	801e394 <get_http_param_value>
 801341a:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 801341e:	210a      	movs	r1, #10
 8013420:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8013424:	f00b f868 	bl	801e4f8 <ATOI>
 8013428:	4603      	mov	r3, r0
 801342a:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 801342e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d10f      	bne.n	8013456 <write_to_file+0x24a>
			part =0;
 8013436:	4b37      	ldr	r3, [pc, #220]	; (8013514 <write_to_file+0x308>)
 8013438:	2200      	movs	r2, #0
 801343a:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 801343c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013440:	681a      	ldr	r2, [r3, #0]
 8013442:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8013446:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801344a:	4618      	mov	r0, r3
 801344c:	f017 fa6a 	bl	802a924 <spi_fs_over_write_file>
 8013450:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 8013454:	e01d      	b.n	8013492 <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 8013456:	210a      	movs	r1, #10
 8013458:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 801345c:	f00b f84c 	bl	801e4f8 <ATOI>
 8013460:	4603      	mov	r3, r0
 8013462:	461a      	mov	r2, r3
 8013464:	4b2b      	ldr	r3, [pc, #172]	; (8013514 <write_to_file+0x308>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	429a      	cmp	r2, r3
 801346a:	d006      	beq.n	801347a <write_to_file+0x26e>
				err = -1;
 801346c:	f04f 33ff 	mov.w	r3, #4294967295
 8013470:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 8013474:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013478:	e03c      	b.n	80134f4 <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 801347a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8013484:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013488:	4618      	mov	r0, r3
 801348a:	f017 faa9 	bl	802a9e0 <spi_fs_write_file_to_end>
 801348e:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 8013492:	4b20      	ldr	r3, [pc, #128]	; (8013514 <write_to_file+0x308>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	3301      	adds	r3, #1
 8013498:	4a1e      	ldr	r2, [pc, #120]	; (8013514 <write_to_file+0x308>)
 801349a:	6013      	str	r3, [r2, #0]

		if (err < 0){
 801349c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	da15      	bge.n	80134d0 <write_to_file+0x2c4>
			err = 0;
 80134a4:	2300      	movs	r3, #0
 80134a6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80134aa:	e011      	b.n	80134d0 <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 80134ac:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80134b0:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	4a14      	ldr	r2, [pc, #80]	; (8013508 <write_to_file+0x2fc>)
 80134b8:	6810      	ldr	r0, [r2, #0]
 80134ba:	6018      	str	r0, [r3, #0]
 80134bc:	8892      	ldrh	r2, [r2, #4]
 80134be:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80134c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80134c4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2205      	movs	r2, #5
 80134cc:	801a      	strh	r2, [r3, #0]
		return;
 80134ce:	e011      	b.n	80134f4 <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 80134d0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80134d4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4a0f      	ldr	r2, [pc, #60]	; (8013518 <write_to_file+0x30c>)
 80134dc:	8811      	ldrh	r1, [r2, #0]
 80134de:	7892      	ldrb	r2, [r2, #2]
 80134e0:	8019      	strh	r1, [r3, #0]
 80134e2:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 80134e4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80134e8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	2202      	movs	r2, #2
 80134f0:	801a      	strh	r2, [r3, #0]
}
 80134f2:	e7ff      	b.n	80134f4 <write_to_file+0x2e8>
 80134f4:	4618      	mov	r0, r3
 80134f6:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd90      	pop	{r4, r7, pc}
 80134fe:	bf00      	nop
 8013500:	08032210 	.word	0x08032210
 8013504:	08032224 	.word	0x08032224
 8013508:	0803221c 	.word	0x0803221c
 801350c:	0803222c 	.word	0x0803222c
 8013510:	08032234 	.word	0x08032234
 8013514:	200004f0 	.word	0x200004f0
 8013518:	0803223c 	.word	0x0803223c

0801351c <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 801351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013520:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8013524:	af16      	add	r7, sp, #88	; 0x58
 8013526:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801352a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801352e:	6018      	str	r0, [r3, #0]
 8013530:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013534:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013538:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 801353a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801353e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8013542:	4a5d      	ldr	r2, [pc, #372]	; (80136b8 <read_all_parameters+0x19c>)
 8013544:	4618      	mov	r0, r3
 8013546:	4611      	mov	r1, r2
 8013548:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801354c:	461a      	mov	r2, r3
 801354e:	f01a f8e8 	bl	802d722 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 8013552:	4b5a      	ldr	r3, [pc, #360]	; (80136bc <read_all_parameters+0x1a0>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 801355a:	2200      	movs	r2, #0
 801355c:	4618      	mov	r0, r3
 801355e:	f00d fc55 	bl	8020e0c <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 8013562:	4b57      	ldr	r3, [pc, #348]	; (80136c0 <read_all_parameters+0x1a4>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	f507 7111 	add.w	r1, r7, #580	; 0x244
 801356a:	2200      	movs	r2, #0
 801356c:	4618      	mov	r0, r3
 801356e:	f00d fc4d 	bl	8020e0c <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 8013572:	4b54      	ldr	r3, [pc, #336]	; (80136c4 <read_all_parameters+0x1a8>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 801357a:	2200      	movs	r2, #0
 801357c:	4618      	mov	r0, r3
 801357e:	f00d fc45 	bl	8020e0c <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 8013582:	4b51      	ldr	r3, [pc, #324]	; (80136c8 <read_all_parameters+0x1ac>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801358a:	2200      	movs	r2, #0
 801358c:	4618      	mov	r0, r3
 801358e:	f00d fc3d 	bl	8020e0c <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 8013592:	4b4e      	ldr	r3, [pc, #312]	; (80136cc <read_all_parameters+0x1b0>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 801359a:	2200      	movs	r2, #0
 801359c:	4618      	mov	r0, r3
 801359e:	f00d fc35 	bl	8020e0c <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivPower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 80135a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fc ffe6 	bl	8010578 <__aeabi_f2d>
 80135ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80135b0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fc ffdf 	bl	8010578 <__aeabi_f2d>
 80135ba:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80135be:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7fc ffd8 	bl	8010578 <__aeabi_f2d>
 80135c8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80135cc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fc ffd1 	bl	8010578 <__aeabi_f2d>
 80135d6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80135da:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80135de:	4618      	mov	r0, r3
 80135e0:	f7fc ffca 	bl	8010578 <__aeabi_f2d>
 80135e4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80135e8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7fc ffc3 	bl	8010578 <__aeabi_f2d>
 80135f2:	4682      	mov	sl, r0
 80135f4:	468b      	mov	fp, r1
 80135f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7fc ffbc 	bl	8010578 <__aeabi_f2d>
 8013600:	4680      	mov	r8, r0
 8013602:	4689      	mov	r9, r1
 8013604:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8013608:	60fb      	str	r3, [r7, #12]
 801360a:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 801360e:	60bb      	str	r3, [r7, #8]
 8013610:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8013614:	607b      	str	r3, [r7, #4]
 8013616:	f8d7 4264 	ldr.w	r4, [r7, #612]	; 0x264
 801361a:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 801361e:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8013622:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8013626:	f107 0644 	add.w	r6, r7, #68	; 0x44
 801362a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801362e:	f5a3 750d 	sub.w	r5, r3, #564	; 0x234
 8013632:	9214      	str	r2, [sp, #80]	; 0x50
 8013634:	9113      	str	r1, [sp, #76]	; 0x4c
 8013636:	9012      	str	r0, [sp, #72]	; 0x48
 8013638:	9411      	str	r4, [sp, #68]	; 0x44
 801363a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801363e:	3302      	adds	r3, #2
 8013640:	9310      	str	r3, [sp, #64]	; 0x40
 8013642:	6879      	ldr	r1, [r7, #4]
 8013644:	910f      	str	r1, [sp, #60]	; 0x3c
 8013646:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801364a:	3384      	adds	r3, #132	; 0x84
 801364c:	930e      	str	r3, [sp, #56]	; 0x38
 801364e:	68b9      	ldr	r1, [r7, #8]
 8013650:	910d      	str	r1, [sp, #52]	; 0x34
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	930c      	str	r3, [sp, #48]	; 0x30
 8013656:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801365a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801365e:	ed97 7b04 	vldr	d7, [r7, #16]
 8013662:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013666:	ed97 7b06 	vldr	d7, [r7, #24]
 801366a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801366e:	ed97 7b08 	vldr	d7, [r7, #32]
 8013672:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013676:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801367a:	ed8d 7b00 	vstr	d7, [sp]
 801367e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013682:	4631      	mov	r1, r6
 8013684:	6828      	ldr	r0, [r5, #0]
 8013686:	f019 fd27 	bl	802d0d8 <siprintf>
	*len = strlen(buf);
 801368a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801368e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013692:	6818      	ldr	r0, [r3, #0]
 8013694:	f7fc fe04 	bl	80102a0 <strlen>
 8013698:	4603      	mov	r3, r0
 801369a:	b29a      	uxth	r2, r3
 801369c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80136a0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	801a      	strh	r2, [r3, #0]

	return 0 ;
 80136a8:	2300      	movs	r3, #0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	f507 771d 	add.w	r7, r7, #628	; 0x274
 80136b0:	46bd      	mov	sp, r7
 80136b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b6:	bf00      	nop
 80136b8:	08032240 	.word	0x08032240
 80136bc:	200004e0 	.word	0x200004e0
 80136c0:	200004e4 	.word	0x200004e4
 80136c4:	200004d4 	.word	0x200004d4
 80136c8:	200004dc 	.word	0x200004dc
 80136cc:	200004e8 	.word	0x200004e8

080136d0 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 80136d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136d2:	b0db      	sub	sp, #364	; 0x16c
 80136d4:	af0e      	add	r7, sp, #56	; 0x38
 80136d6:	6378      	str	r0, [r7, #52]	; 0x34
 80136d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80136dc:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 80136e0:	6001      	str	r1, [r0, #0]
 80136e2:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80136e6:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 80136ea:	600a      	str	r2, [r1, #0]
 80136ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80136f0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80136f4:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 80136fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013700:	4618      	mov	r0, r3
 8013702:	f017 fbe3 	bl	802aecc <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 8013706:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801370a:	4618      	mov	r0, r3
 801370c:	f017 fbfc 	bl	802af08 <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013710:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013714:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013716:	4618      	mov	r0, r3
 8013718:	f019 fffb 	bl	802d712 <strcpy>
	strncat(path, filename, 20);
 801371c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013720:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013724:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013728:	2214      	movs	r2, #20
 801372a:	6819      	ldr	r1, [r3, #0]
 801372c:	f019 fe59 	bl	802d3e2 <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013730:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013734:	2241      	movs	r2, #65	; 0x41
 8013736:	2100      	movs	r1, #0
 8013738:	4618      	mov	r0, r3
 801373a:	f019 fe1d 	bl	802d378 <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 801373e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013742:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013746:	2340      	movs	r3, #64	; 0x40
 8013748:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801374c:	f017 f8a6 	bl	802a89c <spi_fs_read_file_offset>
 8013750:	4603      	mov	r3, r0
 8013752:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 8013756:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 801375a:	2b40      	cmp	r3, #64	; 0x40
 801375c:	d110      	bne.n	8013780 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 801375e:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013762:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013766:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801376a:	4618      	mov	r0, r3
 801376c:	f018 fab6 	bl	802bcdc <mbedtls_md5_update_ret>
				offset += readed_len;
 8013770:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013774:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013778:	4413      	add	r3, r2
 801377a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801377e:	e7d7      	b.n	8013730 <calculate_md5_file+0x60>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013780:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013784:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013788:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801378c:	4618      	mov	r0, r3
 801378e:	f018 faa5 	bl	802bcdc <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 8013792:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8013796:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801379a:	4611      	mov	r1, r2
 801379c:	4618      	mov	r0, r3
 801379e:	f018 fb12 	bl	802bdc6 <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 80137a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80137a6:	4618      	mov	r0, r3
 80137a8:	f017 fb9d 	bl	802aee6 <mbedtls_md5_free>
				md5sum[16] = '\0';
 80137ac:	2300      	movs	r3, #0
 80137ae:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				break;
 80137b2:	bf00      	nop
			}
		}
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 80137b4:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80137b8:	469c      	mov	ip, r3
 80137ba:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80137be:	469e      	mov	lr, r3
 80137c0:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80137c4:	461d      	mov	r5, r3
 80137c6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80137ca:	461e      	mov	r6, r3
 80137cc:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80137d0:	627b      	str	r3, [r7, #36]	; 0x24
 80137d2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80137d6:	623b      	str	r3, [r7, #32]
 80137d8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80137dc:	61fb      	str	r3, [r7, #28]
 80137de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80137e2:	61bb      	str	r3, [r7, #24]
 80137e4:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80137e8:	617b      	str	r3, [r7, #20]
 80137ea:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80137ee:	613b      	str	r3, [r7, #16]
 80137f0:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80137f4:	60fb      	str	r3, [r7, #12]
 80137f6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80137fa:	60bb      	str	r3, [r7, #8]
 80137fc:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8013800:	607b      	str	r3, [r7, #4]
 8013802:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8013806:	461c      	mov	r4, r3
 8013808:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 801380c:	4619      	mov	r1, r3
 801380e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013812:	461a      	mov	r2, r3
 8013814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013818:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 801381c:	920d      	str	r2, [sp, #52]	; 0x34
 801381e:	910c      	str	r1, [sp, #48]	; 0x30
 8013820:	940b      	str	r4, [sp, #44]	; 0x2c
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	920a      	str	r2, [sp, #40]	; 0x28
 8013826:	68ba      	ldr	r2, [r7, #8]
 8013828:	9209      	str	r2, [sp, #36]	; 0x24
 801382a:	68fa      	ldr	r2, [r7, #12]
 801382c:	9208      	str	r2, [sp, #32]
 801382e:	693a      	ldr	r2, [r7, #16]
 8013830:	9207      	str	r2, [sp, #28]
 8013832:	697a      	ldr	r2, [r7, #20]
 8013834:	9206      	str	r2, [sp, #24]
 8013836:	69ba      	ldr	r2, [r7, #24]
 8013838:	9205      	str	r2, [sp, #20]
 801383a:	69fa      	ldr	r2, [r7, #28]
 801383c:	9204      	str	r2, [sp, #16]
 801383e:	6a3a      	ldr	r2, [r7, #32]
 8013840:	9203      	str	r2, [sp, #12]
 8013842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013844:	9302      	str	r3, [sp, #8]
 8013846:	9601      	str	r6, [sp, #4]
 8013848:	9500      	str	r5, [sp, #0]
 801384a:	4673      	mov	r3, lr
 801384c:	4662      	mov	r2, ip
 801384e:	4908      	ldr	r1, [pc, #32]	; (8013870 <calculate_md5_file+0x1a0>)
 8013850:	6800      	ldr	r0, [r0, #0]
 8013852:	f019 fc41 	bl	802d0d8 <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 8013856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801385a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2220      	movs	r2, #32
 8013862:	801a      	strh	r2, [r3, #0]
	return 0;
 8013864:	2300      	movs	r3, #0
}
 8013866:	4618      	mov	r0, r3
 8013868:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801386c:	46bd      	mov	sp, r7
 801386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013870:	08032370 	.word	0x08032370

08013874 <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 8013874:	b580      	push	{r7, lr}
 8013876:	b092      	sub	sp, #72	; 0x48
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 801387e:	f107 0308 	add.w	r3, r7, #8
 8013882:	4a18      	ldr	r2, [pc, #96]	; (80138e4 <activate_firmware+0x70>)
 8013884:	ca07      	ldmia	r2, {r0, r1, r2}
 8013886:	c303      	stmia	r3!, {r0, r1}
 8013888:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 801388a:	f107 0308 	add.w	r3, r7, #8
 801388e:	4618      	mov	r0, r3
 8013890:	f7fc fd06 	bl	80102a0 <strlen>
 8013894:	4603      	mov	r3, r0
 8013896:	461a      	mov	r2, r3
 8013898:	f107 0308 	add.w	r3, r7, #8
 801389c:	4413      	add	r3, r2
 801389e:	4912      	ldr	r1, [pc, #72]	; (80138e8 <activate_firmware+0x74>)
 80138a0:	461a      	mov	r2, r3
 80138a2:	460b      	mov	r3, r1
 80138a4:	cb03      	ldmia	r3!, {r0, r1}
 80138a6:	6010      	str	r0, [r2, #0]
 80138a8:	6051      	str	r1, [r2, #4]
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 80138ae:	f107 0308 	add.w	r3, r7, #8
 80138b2:	490e      	ldr	r1, [pc, #56]	; (80138ec <activate_firmware+0x78>)
 80138b4:	4618      	mov	r0, r3
 80138b6:	f017 f9d1 	bl	802ac5c <spi_fs_mv>
 80138ba:	6478      	str	r0, [r7, #68]	; 0x44

	if(err >= 0){
 80138bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138be:	2b00      	cmp	r3, #0
 80138c0:	db0a      	blt.n	80138d8 <activate_firmware+0x64>
		strcpy(buf, "OK");
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	4a0a      	ldr	r2, [pc, #40]	; (80138f0 <activate_firmware+0x7c>)
 80138c6:	8811      	ldrh	r1, [r2, #0]
 80138c8:	7892      	ldrb	r2, [r2, #2]
 80138ca:	8019      	strh	r1, [r3, #0]
 80138cc:	709a      	strb	r2, [r3, #2]
		* len = 2;
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	2202      	movs	r2, #2
 80138d2:	801a      	strh	r2, [r3, #0]
		return 1;
 80138d4:	2301      	movs	r3, #1
 80138d6:	e000      	b.n	80138da <activate_firmware+0x66>
	}

 	return 0;
 80138d8:	2300      	movs	r3, #0
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3748      	adds	r7, #72	; 0x48
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	080323b4 	.word	0x080323b4
 80138e8:	080323c0 	.word	0x080323c0
 80138ec:	080323cc 	.word	0x080323cc
 80138f0:	080323dc 	.word	0x080323dc

080138f4 <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b086      	sub	sp, #24
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	607a      	str	r2, [r7, #4]
 8013900:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013902:	2300      	movs	r3, #0
 8013904:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013906:	2300      	movs	r3, #0
 8013908:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 801390a:	492d      	ldr	r1, [pc, #180]	; (80139c0 <http_post_cgi_processor+0xcc>)
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7fc fc67 	bl	80101e0 <strcmp>
 8013912:	4603      	mov	r3, r0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d106      	bne.n	8013926 <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013918:	2100      	movs	r1, #0
 801391a:	68b8      	ldr	r0, [r7, #8]
 801391c:	f7ff f9e8 	bl	8012cf0 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013920:	2301      	movs	r3, #1
 8013922:	75fb      	strb	r3, [r7, #23]
 8013924:	e046      	b.n	80139b4 <http_post_cgi_processor+0xc0>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013926:	4927      	ldr	r1, [pc, #156]	; (80139c4 <http_post_cgi_processor+0xd0>)
 8013928:	68f8      	ldr	r0, [r7, #12]
 801392a:	f7fc fc59 	bl	80101e0 <strcmp>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d106      	bne.n	8013942 <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013934:	2102      	movs	r1, #2
 8013936:	68b8      	ldr	r0, [r7, #8]
 8013938:	f7ff f9da 	bl	8012cf0 <param_from_http_to_Q>
		ret = HTTP_OK;
 801393c:	2301      	movs	r3, #1
 801393e:	75fb      	strb	r3, [r7, #23]
 8013940:	e038      	b.n	80139b4 <http_post_cgi_processor+0xc0>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013942:	4921      	ldr	r1, [pc, #132]	; (80139c8 <http_post_cgi_processor+0xd4>)
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f7fc fc4b 	bl	80101e0 <strcmp>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	d10e      	bne.n	801396e <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013950:	4b1e      	ldr	r3, [pc, #120]	; (80139cc <http_post_cgi_processor+0xd8>)
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	6839      	ldr	r1, [r7, #0]
 8013956:	68b8      	ldr	r0, [r7, #8]
 8013958:	f7ff fc58 	bl	801320c <write_to_file>
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	da02      	bge.n	8013968 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013962:	2300      	movs	r3, #0
 8013964:	75fb      	strb	r3, [r7, #23]
 8013966:	e025      	b.n	80139b4 <http_post_cgi_processor+0xc0>
		}else{
			ret = HTTP_OK;
 8013968:	2301      	movs	r3, #1
 801396a:	75fb      	strb	r3, [r7, #23]
 801396c:	e022      	b.n	80139b4 <http_post_cgi_processor+0xc0>
		}
	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 801396e:	4918      	ldr	r1, [pc, #96]	; (80139d0 <http_post_cgi_processor+0xdc>)
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f7fc fc35 	bl	80101e0 <strcmp>
 8013976:	4603      	mov	r3, r0
 8013978:	2b00      	cmp	r3, #0
 801397a:	d106      	bne.n	801398a <http_post_cgi_processor+0x96>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 801397c:	2104      	movs	r1, #4
 801397e:	68b8      	ldr	r0, [r7, #8]
 8013980:	f7ff f9b6 	bl	8012cf0 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013984:	2301      	movs	r3, #1
 8013986:	75fb      	strb	r3, [r7, #23]
 8013988:	e014      	b.n	80139b4 <http_post_cgi_processor+0xc0>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 801398a:	4912      	ldr	r1, [pc, #72]	; (80139d4 <http_post_cgi_processor+0xe0>)
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f7fc fc27 	bl	80101e0 <strcmp>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d10d      	bne.n	80139b4 <http_post_cgi_processor+0xc0>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013998:	4b0f      	ldr	r3, [pc, #60]	; (80139d8 <http_post_cgi_processor+0xe4>)
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	6839      	ldr	r1, [r7, #0]
 801399e:	68b8      	ldr	r0, [r7, #8]
 80139a0:	f7ff fc34 	bl	801320c <write_to_file>
 80139a4:	4603      	mov	r3, r0
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	da02      	bge.n	80139b0 <http_post_cgi_processor+0xbc>
			ret = HTTP_FAILED;
 80139aa:	2300      	movs	r3, #0
 80139ac:	75fb      	strb	r3, [r7, #23]
 80139ae:	e001      	b.n	80139b4 <http_post_cgi_processor+0xc0>
		}else{
			ret = HTTP_OK;
 80139b0:	2301      	movs	r3, #1
 80139b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 80139b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3718      	adds	r7, #24
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	080323e0 	.word	0x080323e0
 80139c4:	080323f4 	.word	0x080323f4
 80139c8:	08032408 	.word	0x08032408
 80139cc:	08032418 	.word	0x08032418
 80139d0:	08032420 	.word	0x08032420
 80139d4:	08032438 	.word	0x08032438
 80139d8:	080323b4 	.word	0x080323b4

080139dc <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 80139e8:	2300      	movs	r3, #0
 80139ea:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 80139ec:	4949      	ldr	r1, [pc, #292]	; (8013b14 <http_get_cgi_processor+0x138>)
 80139ee:	68f8      	ldr	r0, [r7, #12]
 80139f0:	f7fc fbf6 	bl	80101e0 <strcmp>
 80139f4:	4603      	mov	r3, r0
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d107      	bne.n	8013a0a <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 80139fa:	687a      	ldr	r2, [r7, #4]
 80139fc:	2100      	movs	r1, #0
 80139fe:	68b8      	ldr	r0, [r7, #8]
 8013a00:	f7ff faf8 	bl	8012ff4 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013a04:	2301      	movs	r3, #1
 8013a06:	75fb      	strb	r3, [r7, #23]
 8013a08:	e07e      	b.n	8013b08 <http_get_cgi_processor+0x12c>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013a0a:	4943      	ldr	r1, [pc, #268]	; (8013b18 <http_get_cgi_processor+0x13c>)
 8013a0c:	68f8      	ldr	r0, [r7, #12]
 8013a0e:	f7fc fbe7 	bl	80101e0 <strcmp>
 8013a12:	4603      	mov	r3, r0
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d10b      	bne.n	8013a30 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	4940      	ldr	r1, [pc, #256]	; (8013b1c <http_get_cgi_processor+0x140>)
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	460b      	mov	r3, r1
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013a24:	2301      	movs	r3, #1
 8013a26:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2202      	movs	r2, #2
 8013a2c:	801a      	strh	r2, [r3, #0]
 8013a2e:	e06b      	b.n	8013b08 <http_get_cgi_processor+0x12c>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013a30:	493b      	ldr	r1, [pc, #236]	; (8013b20 <http_get_cgi_processor+0x144>)
 8013a32:	68f8      	ldr	r0, [r7, #12]
 8013a34:	f7fc fbd4 	bl	80101e0 <strcmp>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d107      	bne.n	8013a4e <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	2103      	movs	r1, #3
 8013a42:	68b8      	ldr	r0, [r7, #8]
 8013a44:	f7ff fad6 	bl	8012ff4 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013a48:	2301      	movs	r3, #1
 8013a4a:	75fb      	strb	r3, [r7, #23]
 8013a4c:	e05c      	b.n	8013b08 <http_get_cgi_processor+0x12c>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013a4e:	4935      	ldr	r1, [pc, #212]	; (8013b24 <http_get_cgi_processor+0x148>)
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f7fc fbc5 	bl	80101e0 <strcmp>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d107      	bne.n	8013a6c <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	2104      	movs	r1, #4
 8013a60:	68b8      	ldr	r0, [r7, #8]
 8013a62:	f7ff fac7 	bl	8012ff4 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013a66:	2301      	movs	r3, #1
 8013a68:	75fb      	strb	r3, [r7, #23]
 8013a6a:	e04d      	b.n	8013b08 <http_get_cgi_processor+0x12c>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013a6c:	492e      	ldr	r1, [pc, #184]	; (8013b28 <http_get_cgi_processor+0x14c>)
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	f7fc fbb6 	bl	80101e0 <strcmp>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d106      	bne.n	8013a88 <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013a7a:	6879      	ldr	r1, [r7, #4]
 8013a7c:	68b8      	ldr	r0, [r7, #8]
 8013a7e:	f7ff fd4d 	bl	801351c <read_all_parameters>
		ret = HTTP_OK;
 8013a82:	2301      	movs	r3, #1
 8013a84:	75fb      	strb	r3, [r7, #23]
 8013a86:	e03f      	b.n	8013b08 <http_get_cgi_processor+0x12c>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013a88:	4928      	ldr	r1, [pc, #160]	; (8013b2c <http_get_cgi_processor+0x150>)
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f7fc fba8 	bl	80101e0 <strcmp>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d111      	bne.n	8013aba <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	68ba      	ldr	r2, [r7, #8]
 8013a9a:	4925      	ldr	r1, [pc, #148]	; (8013b30 <http_get_cgi_processor+0x154>)
 8013a9c:	4825      	ldr	r0, [pc, #148]	; (8013b34 <http_get_cgi_processor+0x158>)
 8013a9e:	f7ff fe17 	bl	80136d0 <calculate_md5_file>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d102      	bne.n	8013aae <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	75fb      	strb	r3, [r7, #23]
 8013aac:	e02c      	b.n	8013b08 <http_get_cgi_processor+0x12c>
		}else{
			* len = 0;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	75fb      	strb	r3, [r7, #23]
 8013ab8:	e026      	b.n	8013b08 <http_get_cgi_processor+0x12c>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013aba:	491f      	ldr	r1, [pc, #124]	; (8013b38 <http_get_cgi_processor+0x15c>)
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7fc fb8f 	bl	80101e0 <strcmp>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d106      	bne.n	8013ad6 <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013ac8:	6879      	ldr	r1, [r7, #4]
 8013aca:	68b8      	ldr	r0, [r7, #8]
 8013acc:	f7ff fed2 	bl	8013874 <activate_firmware>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	75fb      	strb	r3, [r7, #23]
 8013ad4:	e018      	b.n	8013b08 <http_get_cgi_processor+0x12c>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013ad6:	4919      	ldr	r1, [pc, #100]	; (8013b3c <http_get_cgi_processor+0x160>)
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	f7fc fb81 	bl	80101e0 <strcmp>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d105      	bne.n	8013af0 <http_get_cgi_processor+0x114>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013ae4:	4816      	ldr	r0, [pc, #88]	; (8013b40 <http_get_cgi_processor+0x164>)
 8013ae6:	f016 ffed 	bl	802aac4 <spi_fs_remove>
		ret = HTTP_OK;
 8013aea:	2301      	movs	r3, #1
 8013aec:	75fb      	strb	r3, [r7, #23]
 8013aee:	e00b      	b.n	8013b08 <http_get_cgi_processor+0x12c>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013af0:	4914      	ldr	r1, [pc, #80]	; (8013b44 <http_get_cgi_processor+0x168>)
 8013af2:	68f8      	ldr	r0, [r7, #12]
 8013af4:	f7fc fb74 	bl	80101e0 <strcmp>
 8013af8:	4603      	mov	r3, r0
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d104      	bne.n	8013b08 <http_get_cgi_processor+0x12c>
		spi_fs_remove_recurcuve_in("/");
 8013afe:	4812      	ldr	r0, [pc, #72]	; (8013b48 <http_get_cgi_processor+0x16c>)
 8013b00:	f017 f894 	bl	802ac2c <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013b04:	2301      	movs	r3, #1
 8013b06:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3718      	adds	r7, #24
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	0803244c 	.word	0x0803244c
 8013b18:	08032460 	.word	0x08032460
 8013b1c:	0803246c 	.word	0x0803246c
 8013b20:	08032470 	.word	0x08032470
 8013b24:	0803247c 	.word	0x0803247c
 8013b28:	08032490 	.word	0x08032490
 8013b2c:	0803249c 	.word	0x0803249c
 8013b30:	080323c0 	.word	0x080323c0
 8013b34:	080323b4 	.word	0x080323b4
 8013b38:	080324b4 	.word	0x080324b4
 8013b3c:	080324cc 	.word	0x080324cc
 8013b40:	080324e0 	.word	0x080324e0
 8013b44:	080324f4 	.word	0x080324f4
 8013b48:	08032508 	.word	0x08032508

08013b4c <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8013b4c:	b480      	push	{r7}
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	bf00      	nop
 8013b52:	46bd      	mov	sp, r7
 8013b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b58:	4770      	bx	lr
	...

08013b5c <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8013b5c:	b480      	push	{r7}
 8013b5e:	b083      	sub	sp, #12
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d002      	beq.n	8013b72 <init_mqtt_call_mutex+0x16>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4a07      	ldr	r2, [pc, #28]	; (8013b8c <init_mqtt_call_mutex+0x30>)
 8013b70:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d002      	beq.n	8013b7e <init_mqtt_call_mutex+0x22>
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	4a05      	ldr	r2, [pc, #20]	; (8013b90 <init_mqtt_call_mutex+0x34>)
 8013b7c:	6013      	str	r3, [r2, #0]
}
 8013b7e:	bf00      	nop
 8013b80:	370c      	adds	r7, #12
 8013b82:	46bd      	mov	sp, r7
 8013b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b88:	4770      	bx	lr
 8013b8a:	bf00      	nop
 8013b8c:	2000005c 	.word	0x2000005c
 8013b90:	20000060 	.word	0x20000060

08013b94 <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8013b94:	b5b0      	push	{r4, r5, r7, lr}
 8013b96:	b088      	sub	sp, #32
 8013b98:	af04      	add	r7, sp, #16
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
 8013ba0:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 8013ba2:	4a5e      	ldr	r2, [pc, #376]	; (8013d1c <mqtt_client_init+0x188>)
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8013ba8:	4a5d      	ldr	r2, [pc, #372]	; (8013d20 <mqtt_client_init+0x18c>)
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8013bae:	4a5d      	ldr	r2, [pc, #372]	; (8013d24 <mqtt_client_init+0x190>)
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 8013bb4:	4a5c      	ldr	r2, [pc, #368]	; (8013d28 <mqtt_client_init+0x194>)
 8013bb6:	6a3b      	ldr	r3, [r7, #32]
 8013bb8:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 8013bba:	4a5c      	ldr	r2, [pc, #368]	; (8013d2c <mqtt_client_init+0x198>)
 8013bbc:	887b      	ldrh	r3, [r7, #2]
 8013bbe:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8013bc0:	4a5b      	ldr	r2, [pc, #364]	; (8013d30 <mqtt_client_init+0x19c>)
 8013bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bc4:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 8013bc6:	4b55      	ldr	r3, [pc, #340]	; (8013d1c <mqtt_client_init+0x188>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	78db      	ldrb	r3, [r3, #3]
 8013bcc:	461c      	mov	r4, r3
 8013bce:	4b53      	ldr	r3, [pc, #332]	; (8013d1c <mqtt_client_init+0x188>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	791b      	ldrb	r3, [r3, #4]
 8013bd4:	461d      	mov	r5, r3
 8013bd6:	4b51      	ldr	r3, [pc, #324]	; (8013d1c <mqtt_client_init+0x188>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	795b      	ldrb	r3, [r3, #5]
 8013bdc:	461a      	mov	r2, r3
 8013bde:	4b4f      	ldr	r3, [pc, #316]	; (8013d1c <mqtt_client_init+0x188>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	799b      	ldrb	r3, [r3, #6]
 8013be4:	4619      	mov	r1, r3
 8013be6:	4b4d      	ldr	r3, [pc, #308]	; (8013d1c <mqtt_client_init+0x188>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	79db      	ldrb	r3, [r3, #7]
 8013bec:	4618      	mov	r0, r3
 8013bee:	4b4b      	ldr	r3, [pc, #300]	; (8013d1c <mqtt_client_init+0x188>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	7a1b      	ldrb	r3, [r3, #8]
 8013bf4:	9303      	str	r3, [sp, #12]
 8013bf6:	9002      	str	r0, [sp, #8]
 8013bf8:	9101      	str	r1, [sp, #4]
 8013bfa:	9200      	str	r2, [sp, #0]
 8013bfc:	462b      	mov	r3, r5
 8013bfe:	4622      	mov	r2, r4
 8013c00:	494c      	ldr	r1, [pc, #304]	; (8013d34 <mqtt_client_init+0x1a0>)
 8013c02:	484d      	ldr	r0, [pc, #308]	; (8013d38 <mqtt_client_init+0x1a4>)
 8013c04:	f019 fa68 	bl	802d0d8 <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 8013c08:	484b      	ldr	r0, [pc, #300]	; (8013d38 <mqtt_client_init+0x1a4>)
 8013c0a:	f000 fa3d 	bl	8014088 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 8013c0e:	4b43      	ldr	r3, [pc, #268]	; (8013d1c <mqtt_client_init+0x188>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	7a5b      	ldrb	r3, [r3, #9]
 8013c14:	4619      	mov	r1, r3
 8013c16:	4b41      	ldr	r3, [pc, #260]	; (8013d1c <mqtt_client_init+0x188>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	7a9b      	ldrb	r3, [r3, #10]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	4b3f      	ldr	r3, [pc, #252]	; (8013d1c <mqtt_client_init+0x188>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	7adb      	ldrb	r3, [r3, #11]
 8013c24:	461a      	mov	r2, r3
 8013c26:	4b3d      	ldr	r3, [pc, #244]	; (8013d1c <mqtt_client_init+0x188>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	7b1b      	ldrb	r3, [r3, #12]
 8013c2c:	9301      	str	r3, [sp, #4]
 8013c2e:	9200      	str	r2, [sp, #0]
 8013c30:	4603      	mov	r3, r0
 8013c32:	460a      	mov	r2, r1
 8013c34:	4941      	ldr	r1, [pc, #260]	; (8013d3c <mqtt_client_init+0x1a8>)
 8013c36:	4842      	ldr	r0, [pc, #264]	; (8013d40 <mqtt_client_init+0x1ac>)
 8013c38:	f019 fa4e 	bl	802d0d8 <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 8013c3c:	4840      	ldr	r0, [pc, #256]	; (8013d40 <mqtt_client_init+0x1ac>)
 8013c3e:	f000 fa45 	bl	80140cc <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 8013c42:	4b37      	ldr	r3, [pc, #220]	; (8013d20 <mqtt_client_init+0x18c>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	3302      	adds	r3, #2
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f008 fcc5 	bl	801c5d8 <isValidIPv4>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d00c      	beq.n	8013c6e <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8013c54:	4b32      	ldr	r3, [pc, #200]	; (8013d20 <mqtt_client_init+0x18c>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	1c98      	adds	r0, r3, #2
 8013c5a:	4b3a      	ldr	r3, [pc, #232]	; (8013d44 <mqtt_client_init+0x1b0>)
 8013c5c:	9301      	str	r3, [sp, #4]
 8013c5e:	4b3a      	ldr	r3, [pc, #232]	; (8013d48 <mqtt_client_init+0x1b4>)
 8013c60:	9300      	str	r3, [sp, #0]
 8013c62:	4b3a      	ldr	r3, [pc, #232]	; (8013d4c <mqtt_client_init+0x1b8>)
 8013c64:	4a3a      	ldr	r2, [pc, #232]	; (8013d50 <mqtt_client_init+0x1bc>)
 8013c66:	493b      	ldr	r1, [pc, #236]	; (8013d54 <mqtt_client_init+0x1c0>)
 8013c68:	f019 fa56 	bl	802d118 <siscanf>
 8013c6c:	e00d      	b.n	8013c8a <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 8013c6e:	4b2c      	ldr	r3, [pc, #176]	; (8013d20 <mqtt_client_init+0x18c>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	3302      	adds	r3, #2
 8013c74:	4936      	ldr	r1, [pc, #216]	; (8013d50 <mqtt_client_init+0x1bc>)
 8013c76:	4618      	mov	r0, r3
 8013c78:	f008 fc80 	bl	801c57c <dns_service_resolve_name>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c82:	d102      	bne.n	8013c8a <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 8013c84:	f04f 33ff 	mov.w	r3, #4294967295
 8013c88:	e043      	b.n	8013d12 <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 8013c8a:	4b33      	ldr	r3, [pc, #204]	; (8013d58 <mqtt_client_init+0x1c4>)
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 8013c90:	4b31      	ldr	r3, [pc, #196]	; (8013d58 <mqtt_client_init+0x1c4>)
 8013c92:	2203      	movs	r2, #3
 8013c94:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 8013c96:	4b30      	ldr	r3, [pc, #192]	; (8013d58 <mqtt_client_init+0x1c4>)
 8013c98:	4a27      	ldr	r2, [pc, #156]	; (8013d38 <mqtt_client_init+0x1a4>)
 8013c9a:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8013c9c:	4b2e      	ldr	r3, [pc, #184]	; (8013d58 <mqtt_client_init+0x1c4>)
 8013c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ca2:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 8013ca4:	4b2c      	ldr	r3, [pc, #176]	; (8013d58 <mqtt_client_init+0x1c4>)
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 8013caa:	4b1d      	ldr	r3, [pc, #116]	; (8013d20 <mqtt_client_init+0x18c>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	3384      	adds	r3, #132	; 0x84
 8013cb0:	4a29      	ldr	r2, [pc, #164]	; (8013d58 <mqtt_client_init+0x1c4>)
 8013cb2:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 8013cb4:	4b1a      	ldr	r3, [pc, #104]	; (8013d20 <mqtt_client_init+0x18c>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	33a5      	adds	r3, #165	; 0xa5
 8013cba:	4a27      	ldr	r2, [pc, #156]	; (8013d58 <mqtt_client_init+0x1c4>)
 8013cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 8013cbe:	4b18      	ldr	r3, [pc, #96]	; (8013d20 <mqtt_client_init+0x18c>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8013cc6:	4b25      	ldr	r3, [pc, #148]	; (8013d5c <mqtt_client_init+0x1c8>)
 8013cc8:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 8013cca:	4b25      	ldr	r3, [pc, #148]	; (8013d60 <mqtt_client_init+0x1cc>)
 8013ccc:	2200      	movs	r2, #0
 8013cce:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8013cd0:	4b23      	ldr	r3, [pc, #140]	; (8013d60 <mqtt_client_init+0x1cc>)
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 8013cd6:	4b22      	ldr	r3, [pc, #136]	; (8013d60 <mqtt_client_init+0x1cc>)
 8013cd8:	2200      	movs	r2, #0
 8013cda:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 8013cdc:	4b20      	ldr	r3, [pc, #128]	; (8013d60 <mqtt_client_init+0x1cc>)
 8013cde:	2200      	movs	r2, #0
 8013ce0:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 8013ce2:	2105      	movs	r1, #5
 8013ce4:	481f      	ldr	r0, [pc, #124]	; (8013d64 <mqtt_client_init+0x1d0>)
 8013ce6:	f009 fa11 	bl	801d10c <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 8013cea:	4b0e      	ldr	r3, [pc, #56]	; (8013d24 <mqtt_client_init+0x190>)
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	4b0f      	ldr	r3, [pc, #60]	; (8013d2c <mqtt_client_init+0x198>)
 8013cf0:	881b      	ldrh	r3, [r3, #0]
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	4b0c      	ldr	r3, [pc, #48]	; (8013d28 <mqtt_client_init+0x194>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	490d      	ldr	r1, [pc, #52]	; (8013d30 <mqtt_client_init+0x19c>)
 8013cfa:	8809      	ldrh	r1, [r1, #0]
 8013cfc:	9102      	str	r1, [sp, #8]
 8013cfe:	9301      	str	r3, [sp, #4]
 8013d00:	9000      	str	r0, [sp, #0]
 8013d02:	4613      	mov	r3, r2
 8013d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013d08:	4916      	ldr	r1, [pc, #88]	; (8013d64 <mqtt_client_init+0x1d0>)
 8013d0a:	4817      	ldr	r0, [pc, #92]	; (8013d68 <mqtt_client_init+0x1d4>)
 8013d0c:	f008 fd4e 	bl	801c7ac <MQTTClientInit>

	return 0;
 8013d10:	2300      	movs	r3, #0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3710      	adds	r7, #16
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bdb0      	pop	{r4, r5, r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	200004f8 	.word	0x200004f8
 8013d20:	200004f4 	.word	0x200004f4
 8013d24:	20000524 	.word	0x20000524
 8013d28:	20000520 	.word	0x20000520
 8013d2c:	20000802 	.word	0x20000802
 8013d30:	20000800 	.word	0x20000800
 8013d34:	0803250c 	.word	0x0803250c
 8013d38:	200004fc 	.word	0x200004fc
 8013d3c:	08032528 	.word	0x08032528
 8013d40:	2000050c 	.word	0x2000050c
 8013d44:	20000807 	.word	0x20000807
 8013d48:	20000806 	.word	0x20000806
 8013d4c:	20000805 	.word	0x20000805
 8013d50:	20000804 	.word	0x20000804
 8013d54:	08032534 	.word	0x08032534
 8013d58:	20000004 	.word	0x20000004
 8013d5c:	20000808 	.word	0x20000808
 8013d60:	20000878 	.word	0x20000878
 8013d64:	2000080c 	.word	0x2000080c
 8013d68:	2000081c 	.word	0x2000081c

08013d6c <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 8013d72:	4b1f      	ldr	r3, [pc, #124]	; (8013df0 <mqtt_client_connect+0x84>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 8013d78:	4b1e      	ldr	r3, [pc, #120]	; (8013df4 <mqtt_client_connect+0x88>)
 8013d7a:	881b      	ldrh	r3, [r3, #0]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	491e      	ldr	r1, [pc, #120]	; (8013df8 <mqtt_client_connect+0x8c>)
 8013d80:	481e      	ldr	r0, [pc, #120]	; (8013dfc <mqtt_client_connect+0x90>)
 8013d82:	f009 fa40 	bl	801d206 <ConnectNetwork>
 8013d86:	4603      	mov	r3, r0
 8013d88:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8013d8a:	4b1d      	ldr	r3, [pc, #116]	; (8013e00 <mqtt_client_connect+0x94>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4798      	blx	r3
	if (result != 1) {
 8013d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d010      	beq.n	8013dba <mqtt_client_connect+0x4e>
		set_mutex();
 8013d98:	4b15      	ldr	r3, [pc, #84]	; (8013df0 <mqtt_client_connect+0x84>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 8013d9e:	4b17      	ldr	r3, [pc, #92]	; (8013dfc <mqtt_client_connect+0x90>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	b2db      	uxtb	r3, r3
 8013da4:	4618      	mov	r0, r3
 8013da6:	f004 fe49 	bl	8018a3c <close>
		release_mutex();
 8013daa:	4b15      	ldr	r3, [pc, #84]	; (8013e00 <mqtt_client_connect+0x94>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8013db0:	88fb      	ldrh	r3, [r7, #6]
 8013db2:	3b0a      	subs	r3, #10
 8013db4:	b29b      	uxth	r3, r3
 8013db6:	b21b      	sxth	r3, r3
 8013db8:	e016      	b.n	8013de8 <mqtt_client_connect+0x7c>
	}
	set_mutex();
 8013dba:	4b0d      	ldr	r3, [pc, #52]	; (8013df0 <mqtt_client_connect+0x84>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8013dc0:	4910      	ldr	r1, [pc, #64]	; (8013e04 <mqtt_client_connect+0x98>)
 8013dc2:	4811      	ldr	r0, [pc, #68]	; (8013e08 <mqtt_client_connect+0x9c>)
 8013dc4:	f008 fff8 	bl	801cdb8 <MQTTConnect>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8013dcc:	4b0c      	ldr	r3, [pc, #48]	; (8013e00 <mqtt_client_connect+0x94>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 8013dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d004      	beq.n	8013de4 <mqtt_client_connect+0x78>
 8013dda:	88fb      	ldrh	r3, [r7, #6]
 8013ddc:	3b14      	subs	r3, #20
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	b21b      	sxth	r3, r3
 8013de2:	e001      	b.n	8013de8 <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 8013de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3708      	adds	r7, #8
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	2000005c 	.word	0x2000005c
 8013df4:	20000808 	.word	0x20000808
 8013df8:	20000804 	.word	0x20000804
 8013dfc:	2000080c 	.word	0x2000080c
 8013e00:	20000060 	.word	0x20000060
 8013e04:	20000004 	.word	0x20000004
 8013e08:	2000081c 	.word	0x2000081c

08013e0c <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013e12:	2280      	movs	r2, #128	; 0x80
 8013e14:	2100      	movs	r1, #0
 8013e16:	487e      	ldr	r0, [pc, #504]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013e18:	f019 faae 	bl	802d378 <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	2103      	movs	r1, #3
 8013e20:	487b      	ldr	r0, [pc, #492]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013e22:	f000 f973 	bl	801410c <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 8013e26:	2200      	movs	r2, #0
 8013e28:	2103      	movs	r1, #3
 8013e2a:	487a      	ldr	r0, [pc, #488]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013e2c:	f000 fa0e 	bl	801424c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013e30:	4878      	ldr	r0, [pc, #480]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013e32:	f7fc fa35 	bl	80102a0 <strlen>
 8013e36:	4603      	mov	r3, r0
 8013e38:	4a77      	ldr	r2, [pc, #476]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013e3a:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013e3c:	4b76      	ldr	r3, [pc, #472]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013e3e:	4a75      	ldr	r2, [pc, #468]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013e40:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013e42:	4b76      	ldr	r3, [pc, #472]	; (801401c <mqtt_client_reg_dev_on_home_assist+0x210>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8013e48:	4a73      	ldr	r2, [pc, #460]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013e4a:	4971      	ldr	r1, [pc, #452]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013e4c:	4874      	ldr	r0, [pc, #464]	; (8014020 <mqtt_client_reg_dev_on_home_assist+0x214>)
 8013e4e:	f009 f839 	bl	801cec4 <MQTTPublish>
 8013e52:	4603      	mov	r3, r0
 8013e54:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8013e56:	4b73      	ldr	r3, [pc, #460]	; (8014024 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8013e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <mqtt_client_reg_dev_on_home_assist+0x5e>
 8013e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013e68:	e0ce      	b.n	8014008 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 8013e6a:	4b6b      	ldr	r3, [pc, #428]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013e6c:	889b      	ldrh	r3, [r3, #4]
 8013e6e:	3301      	adds	r3, #1
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	4b69      	ldr	r3, [pc, #420]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013e74:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013e76:	2280      	movs	r2, #128	; 0x80
 8013e78:	2100      	movs	r1, #0
 8013e7a:	4865      	ldr	r0, [pc, #404]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013e7c:	f019 fa7c 	bl	802d378 <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 8013e80:	2200      	movs	r2, #0
 8013e82:	2105      	movs	r1, #5
 8013e84:	4862      	ldr	r0, [pc, #392]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013e86:	f000 f941 	bl	801410c <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	2105      	movs	r1, #5
 8013e8e:	4861      	ldr	r0, [pc, #388]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013e90:	f000 f9dc 	bl	801424c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013e94:	485f      	ldr	r0, [pc, #380]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013e96:	f7fc fa03 	bl	80102a0 <strlen>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	4a5e      	ldr	r2, [pc, #376]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013e9e:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013ea0:	4b5d      	ldr	r3, [pc, #372]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013ea2:	4a5c      	ldr	r2, [pc, #368]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013ea4:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013ea6:	4b5d      	ldr	r3, [pc, #372]	; (801401c <mqtt_client_reg_dev_on_home_assist+0x210>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8013eac:	4a5a      	ldr	r2, [pc, #360]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013eae:	4958      	ldr	r1, [pc, #352]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013eb0:	485b      	ldr	r0, [pc, #364]	; (8014020 <mqtt_client_reg_dev_on_home_assist+0x214>)
 8013eb2:	f009 f807 	bl	801cec4 <MQTTPublish>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8013eba:	4b5a      	ldr	r3, [pc, #360]	; (8014024 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8013ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d002      	beq.n	8013ece <mqtt_client_reg_dev_on_home_assist+0xc2>
 8013ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ecc:	e09c      	b.n	8014008 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 8013ece:	4b52      	ldr	r3, [pc, #328]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013ed0:	889b      	ldrh	r3, [r3, #4]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	4b50      	ldr	r3, [pc, #320]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013ed8:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013eda:	2280      	movs	r2, #128	; 0x80
 8013edc:	2100      	movs	r1, #0
 8013ede:	484c      	ldr	r0, [pc, #304]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013ee0:	f019 fa4a 	bl	802d378 <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	2104      	movs	r1, #4
 8013ee8:	4849      	ldr	r0, [pc, #292]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013eea:	f000 f90f 	bl	801410c <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 8013eee:	2200      	movs	r2, #0
 8013ef0:	2104      	movs	r1, #4
 8013ef2:	4848      	ldr	r0, [pc, #288]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013ef4:	f000 f9aa 	bl	801424c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013ef8:	4846      	ldr	r0, [pc, #280]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013efa:	f7fc f9d1 	bl	80102a0 <strlen>
 8013efe:	4603      	mov	r3, r0
 8013f00:	4a45      	ldr	r2, [pc, #276]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f02:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013f04:	4b44      	ldr	r3, [pc, #272]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f06:	4a43      	ldr	r2, [pc, #268]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013f08:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013f0a:	4b44      	ldr	r3, [pc, #272]	; (801401c <mqtt_client_reg_dev_on_home_assist+0x210>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8013f10:	4a41      	ldr	r2, [pc, #260]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f12:	493f      	ldr	r1, [pc, #252]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013f14:	4842      	ldr	r0, [pc, #264]	; (8014020 <mqtt_client_reg_dev_on_home_assist+0x214>)
 8013f16:	f008 ffd5 	bl	801cec4 <MQTTPublish>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8013f1e:	4b41      	ldr	r3, [pc, #260]	; (8014024 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8013f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d002      	beq.n	8013f32 <mqtt_client_reg_dev_on_home_assist+0x126>
 8013f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f30:	e06a      	b.n	8014008 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 8013f32:	4b39      	ldr	r3, [pc, #228]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f34:	889b      	ldrh	r3, [r3, #4]
 8013f36:	3301      	adds	r3, #1
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	4b37      	ldr	r3, [pc, #220]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f3c:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013f3e:	2280      	movs	r2, #128	; 0x80
 8013f40:	2100      	movs	r1, #0
 8013f42:	4833      	ldr	r0, [pc, #204]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013f44:	f019 fa18 	bl	802d378 <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 8013f48:	2200      	movs	r2, #0
 8013f4a:	2106      	movs	r1, #6
 8013f4c:	4830      	ldr	r0, [pc, #192]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013f4e:	f000 f8dd 	bl	801410c <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 8013f52:	2200      	movs	r2, #0
 8013f54:	2106      	movs	r1, #6
 8013f56:	482f      	ldr	r0, [pc, #188]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013f58:	f000 f978 	bl	801424c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013f5c:	482d      	ldr	r0, [pc, #180]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013f5e:	f7fc f99f 	bl	80102a0 <strlen>
 8013f62:	4603      	mov	r3, r0
 8013f64:	4a2c      	ldr	r2, [pc, #176]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f66:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013f68:	4b2b      	ldr	r3, [pc, #172]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f6a:	4a2a      	ldr	r2, [pc, #168]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013f6c:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013f6e:	4b2b      	ldr	r3, [pc, #172]	; (801401c <mqtt_client_reg_dev_on_home_assist+0x210>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8013f74:	4a28      	ldr	r2, [pc, #160]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f76:	4926      	ldr	r1, [pc, #152]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013f78:	4829      	ldr	r0, [pc, #164]	; (8014020 <mqtt_client_reg_dev_on_home_assist+0x214>)
 8013f7a:	f008 ffa3 	bl	801cec4 <MQTTPublish>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8013f82:	4b28      	ldr	r3, [pc, #160]	; (8014024 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8013f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d002      	beq.n	8013f96 <mqtt_client_reg_dev_on_home_assist+0x18a>
 8013f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f94:	e038      	b.n	8014008 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 8013f96:	4b20      	ldr	r3, [pc, #128]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013f98:	889b      	ldrh	r3, [r3, #4]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	4b1e      	ldr	r3, [pc, #120]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013fa0:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013fa2:	2280      	movs	r2, #128	; 0x80
 8013fa4:	2100      	movs	r1, #0
 8013fa6:	481a      	ldr	r0, [pc, #104]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013fa8:	f019 f9e6 	bl	802d378 <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 8013fac:	2200      	movs	r2, #0
 8013fae:	2107      	movs	r1, #7
 8013fb0:	4817      	ldr	r0, [pc, #92]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013fb2:	f000 f8ab 	bl	801410c <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	2107      	movs	r1, #7
 8013fba:	4816      	ldr	r0, [pc, #88]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013fbc:	f000 f946 	bl	801424c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013fc0:	4814      	ldr	r0, [pc, #80]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013fc2:	f7fc f96d 	bl	80102a0 <strlen>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	4a13      	ldr	r2, [pc, #76]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013fca:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013fcc:	4b12      	ldr	r3, [pc, #72]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013fce:	4a11      	ldr	r2, [pc, #68]	; (8014014 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8013fd0:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013fd2:	4b12      	ldr	r3, [pc, #72]	; (801401c <mqtt_client_reg_dev_on_home_assist+0x210>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8013fd8:	4a0f      	ldr	r2, [pc, #60]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013fda:	490d      	ldr	r1, [pc, #52]	; (8014010 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8013fdc:	4810      	ldr	r0, [pc, #64]	; (8014020 <mqtt_client_reg_dev_on_home_assist+0x214>)
 8013fde:	f008 ff71 	bl	801cec4 <MQTTPublish>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8013fe6:	4b0f      	ldr	r3, [pc, #60]	; (8014024 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8013fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d002      	beq.n	8013ffa <mqtt_client_reg_dev_on_home_assist+0x1ee>
 8013ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ff8:	e006      	b.n	8014008 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 8013ffa:	4b07      	ldr	r3, [pc, #28]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8013ffc:	889b      	ldrh	r3, [r3, #4]
 8013ffe:	3301      	adds	r3, #1
 8014000:	b29a      	uxth	r2, r3
 8014002:	4b05      	ldr	r3, [pc, #20]	; (8014018 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8014004:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 8014006:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 8014008:	4618      	mov	r0, r3
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	20000528 	.word	0x20000528
 8014014:	200005a8 	.word	0x200005a8
 8014018:	20000878 	.word	0x20000878
 801401c:	2000005c 	.word	0x2000005c
 8014020:	2000081c 	.word	0x2000081c
 8014024:	20000060 	.word	0x20000060

08014028 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 8014032:	6838      	ldr	r0, [r7, #0]
 8014034:	f7fc f934 	bl	80102a0 <strlen>
 8014038:	4603      	mov	r3, r0
 801403a:	4a0f      	ldr	r2, [pc, #60]	; (8014078 <send_data_to_topik+0x50>)
 801403c:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 801403e:	4a0e      	ldr	r2, [pc, #56]	; (8014078 <send_data_to_topik+0x50>)
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 8014044:	4b0c      	ldr	r3, [pc, #48]	; (8014078 <send_data_to_topik+0x50>)
 8014046:	889b      	ldrh	r3, [r3, #4]
 8014048:	3301      	adds	r3, #1
 801404a:	b29a      	uxth	r2, r3
 801404c:	4b0a      	ldr	r3, [pc, #40]	; (8014078 <send_data_to_topik+0x50>)
 801404e:	809a      	strh	r2, [r3, #4]
	set_mutex();
 8014050:	4b0a      	ldr	r3, [pc, #40]	; (801407c <send_data_to_topik+0x54>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 8014056:	4a08      	ldr	r2, [pc, #32]	; (8014078 <send_data_to_topik+0x50>)
 8014058:	6879      	ldr	r1, [r7, #4]
 801405a:	4809      	ldr	r0, [pc, #36]	; (8014080 <send_data_to_topik+0x58>)
 801405c:	f008 ff32 	bl	801cec4 <MQTTPublish>
 8014060:	4603      	mov	r3, r0
 8014062:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 8014064:	4b07      	ldr	r3, [pc, #28]	; (8014084 <send_data_to_topik+0x5c>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 801406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801406e:	4618      	mov	r0, r3
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	20000878 	.word	0x20000878
 801407c:	2000005c 	.word	0x2000005c
 8014080:	2000081c 	.word	0x2000081c
 8014084:	20000060 	.word	0x20000060

08014088 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 8014088:	b580      	push	{r7, lr}
 801408a:	b084      	sub	sp, #16
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 8014090:	2300      	movs	r3, #0
 8014092:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f7fc f903 	bl	80102a0 <strlen>
 801409a:	4603      	mov	r3, r0
 801409c:	2b0d      	cmp	r3, #13
 801409e:	d902      	bls.n	80140a6 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 80140a0:	230e      	movs	r3, #14
 80140a2:	73fb      	strb	r3, [r7, #15]
 80140a4:	e004      	b.n	80140b0 <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f7fc f8fa 	bl	80102a0 <strlen>
 80140ac:	4603      	mov	r3, r0
 80140ae:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
 80140b2:	461a      	mov	r2, r3
 80140b4:	6879      	ldr	r1, [r7, #4]
 80140b6:	4804      	ldr	r0, [pc, #16]	; (80140c8 <set_device_id+0x40>)
 80140b8:	f019 f9b8 	bl	802d42c <strncpy>
	return 0;
 80140bc:	2300      	movs	r3, #0
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3710      	adds	r7, #16
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	20000888 	.word	0x20000888

080140cc <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 80140d4:	4b0c      	ldr	r3, [pc, #48]	; (8014108 <set_device_conf_ip+0x3c>)
 80140d6:	2200      	movs	r2, #0
 80140d8:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f7fc f8e0 	bl	80102a0 <strlen>
 80140e0:	4603      	mov	r3, r0
 80140e2:	2b12      	cmp	r3, #18
 80140e4:	d80a      	bhi.n	80140fc <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7fc f8da 	bl	80102a0 <strlen>
 80140ec:	4603      	mov	r3, r0
 80140ee:	461a      	mov	r2, r3
 80140f0:	6879      	ldr	r1, [r7, #4]
 80140f2:	4805      	ldr	r0, [pc, #20]	; (8014108 <set_device_conf_ip+0x3c>)
 80140f4:	f019 f99a 	bl	802d42c <strncpy>
		return 0;
 80140f8:	2300      	movs	r3, #0
 80140fa:	e001      	b.n	8014100 <set_device_conf_ip+0x34>
	}
	return -1;
 80140fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014100:	4618      	mov	r0, r3
 8014102:	3708      	adds	r7, #8
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}
 8014108:	20000898 	.word	0x20000898

0801410c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 801410c:	b580      	push	{r7, lr}
 801410e:	b086      	sub	sp, #24
 8014110:	af04      	add	r7, sp, #16
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	460b      	mov	r3, r1
 8014116:	70fb      	strb	r3, [r7, #3]
 8014118:	4613      	mov	r3, r2
 801411a:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 801411c:	2100      	movs	r1, #0
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f019 faf7 	bl	802d712 <strcpy>
	switch (topik_type) {
 8014124:	78fb      	ldrb	r3, [r7, #3]
 8014126:	3b01      	subs	r3, #1
 8014128:	2b06      	cmp	r3, #6
 801412a:	d86c      	bhi.n	8014206 <get_config_topik_string+0xfa>
 801412c:	a201      	add	r2, pc, #4	; (adr r2, 8014134 <get_config_topik_string+0x28>)
 801412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014132:	bf00      	nop
 8014134:	08014151 	.word	0x08014151
 8014138:	0801416b 	.word	0x0801416b
 801413c:	08014185 	.word	0x08014185
 8014140:	080141b9 	.word	0x080141b9
 8014144:	0801419f 	.word	0x0801419f
 8014148:	080141d3 	.word	0x080141d3
 801414c:	080141ed 	.word	0x080141ed
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 8014150:	78bb      	ldrb	r3, [r7, #2]
 8014152:	9302      	str	r3, [sp, #8]
 8014154:	4b2f      	ldr	r3, [pc, #188]	; (8014214 <get_config_topik_string+0x108>)
 8014156:	9301      	str	r3, [sp, #4]
 8014158:	4b2f      	ldr	r3, [pc, #188]	; (8014218 <get_config_topik_string+0x10c>)
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	4b2f      	ldr	r3, [pc, #188]	; (801421c <get_config_topik_string+0x110>)
 801415e:	4a30      	ldr	r2, [pc, #192]	; (8014220 <get_config_topik_string+0x114>)
 8014160:	4930      	ldr	r1, [pc, #192]	; (8014224 <get_config_topik_string+0x118>)
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f018 ffb8 	bl	802d0d8 <siprintf>
			break;
 8014168:	e04e      	b.n	8014208 <get_config_topik_string+0xfc>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 801416a:	78bb      	ldrb	r3, [r7, #2]
 801416c:	9302      	str	r3, [sp, #8]
 801416e:	4b2e      	ldr	r3, [pc, #184]	; (8014228 <get_config_topik_string+0x11c>)
 8014170:	9301      	str	r3, [sp, #4]
 8014172:	4b29      	ldr	r3, [pc, #164]	; (8014218 <get_config_topik_string+0x10c>)
 8014174:	9300      	str	r3, [sp, #0]
 8014176:	4b2c      	ldr	r3, [pc, #176]	; (8014228 <get_config_topik_string+0x11c>)
 8014178:	4a29      	ldr	r2, [pc, #164]	; (8014220 <get_config_topik_string+0x114>)
 801417a:	492a      	ldr	r1, [pc, #168]	; (8014224 <get_config_topik_string+0x118>)
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f018 ffab 	bl	802d0d8 <siprintf>
			break;
 8014182:	e041      	b.n	8014208 <get_config_topik_string+0xfc>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 8014184:	4b29      	ldr	r3, [pc, #164]	; (801422c <get_config_topik_string+0x120>)
 8014186:	9302      	str	r3, [sp, #8]
 8014188:	4b23      	ldr	r3, [pc, #140]	; (8014218 <get_config_topik_string+0x10c>)
 801418a:	9301      	str	r3, [sp, #4]
 801418c:	4b28      	ldr	r3, [pc, #160]	; (8014230 <get_config_topik_string+0x124>)
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	4b28      	ldr	r3, [pc, #160]	; (8014234 <get_config_topik_string+0x128>)
 8014192:	4a23      	ldr	r2, [pc, #140]	; (8014220 <get_config_topik_string+0x114>)
 8014194:	4928      	ldr	r1, [pc, #160]	; (8014238 <get_config_topik_string+0x12c>)
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f018 ff9e 	bl	802d0d8 <siprintf>
			break;
 801419c:	e034      	b.n	8014208 <get_config_topik_string+0xfc>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 801419e:	4b27      	ldr	r3, [pc, #156]	; (801423c <get_config_topik_string+0x130>)
 80141a0:	9302      	str	r3, [sp, #8]
 80141a2:	4b1d      	ldr	r3, [pc, #116]	; (8014218 <get_config_topik_string+0x10c>)
 80141a4:	9301      	str	r3, [sp, #4]
 80141a6:	4b22      	ldr	r3, [pc, #136]	; (8014230 <get_config_topik_string+0x124>)
 80141a8:	9300      	str	r3, [sp, #0]
 80141aa:	4b22      	ldr	r3, [pc, #136]	; (8014234 <get_config_topik_string+0x128>)
 80141ac:	4a1c      	ldr	r2, [pc, #112]	; (8014220 <get_config_topik_string+0x114>)
 80141ae:	4922      	ldr	r1, [pc, #136]	; (8014238 <get_config_topik_string+0x12c>)
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f018 ff91 	bl	802d0d8 <siprintf>
			break;
 80141b6:	e027      	b.n	8014208 <get_config_topik_string+0xfc>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 80141b8:	4b21      	ldr	r3, [pc, #132]	; (8014240 <get_config_topik_string+0x134>)
 80141ba:	9302      	str	r3, [sp, #8]
 80141bc:	4b16      	ldr	r3, [pc, #88]	; (8014218 <get_config_topik_string+0x10c>)
 80141be:	9301      	str	r3, [sp, #4]
 80141c0:	4b1b      	ldr	r3, [pc, #108]	; (8014230 <get_config_topik_string+0x124>)
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	4b1b      	ldr	r3, [pc, #108]	; (8014234 <get_config_topik_string+0x128>)
 80141c6:	4a16      	ldr	r2, [pc, #88]	; (8014220 <get_config_topik_string+0x114>)
 80141c8:	491b      	ldr	r1, [pc, #108]	; (8014238 <get_config_topik_string+0x12c>)
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f018 ff84 	bl	802d0d8 <siprintf>
			break;
 80141d0:	e01a      	b.n	8014208 <get_config_topik_string+0xfc>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 80141d2:	4b1c      	ldr	r3, [pc, #112]	; (8014244 <get_config_topik_string+0x138>)
 80141d4:	9302      	str	r3, [sp, #8]
 80141d6:	4b10      	ldr	r3, [pc, #64]	; (8014218 <get_config_topik_string+0x10c>)
 80141d8:	9301      	str	r3, [sp, #4]
 80141da:	4b15      	ldr	r3, [pc, #84]	; (8014230 <get_config_topik_string+0x124>)
 80141dc:	9300      	str	r3, [sp, #0]
 80141de:	4b15      	ldr	r3, [pc, #84]	; (8014234 <get_config_topik_string+0x128>)
 80141e0:	4a0f      	ldr	r2, [pc, #60]	; (8014220 <get_config_topik_string+0x114>)
 80141e2:	4915      	ldr	r1, [pc, #84]	; (8014238 <get_config_topik_string+0x12c>)
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f018 ff77 	bl	802d0d8 <siprintf>
			break;
 80141ea:	e00d      	b.n	8014208 <get_config_topik_string+0xfc>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 80141ec:	4b16      	ldr	r3, [pc, #88]	; (8014248 <get_config_topik_string+0x13c>)
 80141ee:	9302      	str	r3, [sp, #8]
 80141f0:	4b09      	ldr	r3, [pc, #36]	; (8014218 <get_config_topik_string+0x10c>)
 80141f2:	9301      	str	r3, [sp, #4]
 80141f4:	4b0e      	ldr	r3, [pc, #56]	; (8014230 <get_config_topik_string+0x124>)
 80141f6:	9300      	str	r3, [sp, #0]
 80141f8:	4b0e      	ldr	r3, [pc, #56]	; (8014234 <get_config_topik_string+0x128>)
 80141fa:	4a09      	ldr	r2, [pc, #36]	; (8014220 <get_config_topik_string+0x114>)
 80141fc:	490e      	ldr	r1, [pc, #56]	; (8014238 <get_config_topik_string+0x12c>)
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f018 ff6a 	bl	802d0d8 <siprintf>
			break;
 8014204:	e000      	b.n	8014208 <get_config_topik_string+0xfc>
		default:
			break;
 8014206:	bf00      	nop
	}


	return 0;
 8014208:	2300      	movs	r3, #0
}
 801420a:	4618      	mov	r0, r3
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	2000008c 	.word	0x2000008c
 8014218:	20000888 	.word	0x20000888
 801421c:	20000074 	.word	0x20000074
 8014220:	20000064 	.word	0x20000064
 8014224:	08033b10 	.word	0x08033b10
 8014228:	20000084 	.word	0x20000084
 801422c:	08032570 	.word	0x08032570
 8014230:	08032578 	.word	0x08032578
 8014234:	08032550 	.word	0x08032550
 8014238:	08032558 	.word	0x08032558
 801423c:	08032580 	.word	0x08032580
 8014240:	08032588 	.word	0x08032588
 8014244:	08032590 	.word	0x08032590
 8014248:	080325a0 	.word	0x080325a0

0801424c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 801424c:	b590      	push	{r4, r7, lr}
 801424e:	b097      	sub	sp, #92	; 0x5c
 8014250:	af12      	add	r7, sp, #72	; 0x48
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	460b      	mov	r3, r1
 8014256:	70fb      	strb	r3, [r7, #3]
 8014258:	4613      	mov	r3, r2
 801425a:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 801425c:	2300      	movs	r3, #0
 801425e:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2200      	movs	r2, #0
 8014264:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 8014266:	78fb      	ldrb	r3, [r7, #3]
 8014268:	3b01      	subs	r3, #1
 801426a:	2b06      	cmp	r3, #6
 801426c:	f200 811a 	bhi.w	80144a4 <get_config_payload_string+0x258>
 8014270:	a201      	add	r2, pc, #4	; (adr r2, 8014278 <get_config_payload_string+0x2c>)
 8014272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014276:	bf00      	nop
 8014278:	080142c9 	.word	0x080142c9
 801427c:	08014295 	.word	0x08014295
 8014280:	080142f7 	.word	0x080142f7
 8014284:	080143a3 	.word	0x080143a3
 8014288:	0801434d 	.word	0x0801434d
 801428c:	080143f9 	.word	0x080143f9
 8014290:	0801444f 	.word	0x0801444f
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014294:	78bb      	ldrb	r3, [r7, #2]
 8014296:	78ba      	ldrb	r2, [r7, #2]
 8014298:	78b9      	ldrb	r1, [r7, #2]
 801429a:	78b8      	ldrb	r0, [r7, #2]
 801429c:	4c85      	ldr	r4, [pc, #532]	; (80144b4 <get_config_payload_string+0x268>)
 801429e:	9407      	str	r4, [sp, #28]
 80142a0:	4c85      	ldr	r4, [pc, #532]	; (80144b8 <get_config_payload_string+0x26c>)
 80142a2:	9406      	str	r4, [sp, #24]
 80142a4:	4c84      	ldr	r4, [pc, #528]	; (80144b8 <get_config_payload_string+0x26c>)
 80142a6:	9405      	str	r4, [sp, #20]
 80142a8:	9004      	str	r0, [sp, #16]
 80142aa:	4883      	ldr	r0, [pc, #524]	; (80144b8 <get_config_payload_string+0x26c>)
 80142ac:	9003      	str	r0, [sp, #12]
 80142ae:	9102      	str	r1, [sp, #8]
 80142b0:	9201      	str	r2, [sp, #4]
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	4b80      	ldr	r3, [pc, #512]	; (80144b8 <get_config_payload_string+0x26c>)
 80142b6:	4a80      	ldr	r2, [pc, #512]	; (80144b8 <get_config_payload_string+0x26c>)
 80142b8:	4980      	ldr	r1, [pc, #512]	; (80144bc <get_config_payload_string+0x270>)
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f018 ff0c 	bl	802d0d8 <siprintf>
 80142c0:	4603      	mov	r3, r0
 80142c2:	73fb      	strb	r3, [r7, #15]
			return len;
 80142c4:	7bfb      	ldrb	r3, [r7, #15]
 80142c6:	e0f0      	b.n	80144aa <get_config_payload_string+0x25e>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 80142c8:	78b9      	ldrb	r1, [r7, #2]
 80142ca:	78bb      	ldrb	r3, [r7, #2]
 80142cc:	78ba      	ldrb	r2, [r7, #2]
 80142ce:	4879      	ldr	r0, [pc, #484]	; (80144b4 <get_config_payload_string+0x268>)
 80142d0:	9005      	str	r0, [sp, #20]
 80142d2:	4879      	ldr	r0, [pc, #484]	; (80144b8 <get_config_payload_string+0x26c>)
 80142d4:	9004      	str	r0, [sp, #16]
 80142d6:	4878      	ldr	r0, [pc, #480]	; (80144b8 <get_config_payload_string+0x26c>)
 80142d8:	9003      	str	r0, [sp, #12]
 80142da:	9202      	str	r2, [sp, #8]
 80142dc:	4a76      	ldr	r2, [pc, #472]	; (80144b8 <get_config_payload_string+0x26c>)
 80142de:	9201      	str	r2, [sp, #4]
 80142e0:	9300      	str	r3, [sp, #0]
 80142e2:	460b      	mov	r3, r1
 80142e4:	4a74      	ldr	r2, [pc, #464]	; (80144b8 <get_config_payload_string+0x26c>)
 80142e6:	4976      	ldr	r1, [pc, #472]	; (80144c0 <get_config_payload_string+0x274>)
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f018 fef5 	bl	802d0d8 <siprintf>
 80142ee:	4603      	mov	r3, r0
 80142f0:	73fb      	strb	r3, [r7, #15]
			return len;
 80142f2:	7bfb      	ldrb	r3, [r7, #15]
 80142f4:	e0d9      	b.n	80144aa <get_config_payload_string+0x25e>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 80142f6:	4b6f      	ldr	r3, [pc, #444]	; (80144b4 <get_config_payload_string+0x268>)
 80142f8:	9310      	str	r3, [sp, #64]	; 0x40
 80142fa:	4b72      	ldr	r3, [pc, #456]	; (80144c4 <get_config_payload_string+0x278>)
 80142fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80142fe:	4b72      	ldr	r3, [pc, #456]	; (80144c8 <get_config_payload_string+0x27c>)
 8014300:	930e      	str	r3, [sp, #56]	; 0x38
 8014302:	4b72      	ldr	r3, [pc, #456]	; (80144cc <get_config_payload_string+0x280>)
 8014304:	930d      	str	r3, [sp, #52]	; 0x34
 8014306:	4b72      	ldr	r3, [pc, #456]	; (80144d0 <get_config_payload_string+0x284>)
 8014308:	930c      	str	r3, [sp, #48]	; 0x30
 801430a:	4b72      	ldr	r3, [pc, #456]	; (80144d4 <get_config_payload_string+0x288>)
 801430c:	930b      	str	r3, [sp, #44]	; 0x2c
 801430e:	4b6a      	ldr	r3, [pc, #424]	; (80144b8 <get_config_payload_string+0x26c>)
 8014310:	930a      	str	r3, [sp, #40]	; 0x28
 8014312:	4b71      	ldr	r3, [pc, #452]	; (80144d8 <get_config_payload_string+0x28c>)
 8014314:	9309      	str	r3, [sp, #36]	; 0x24
 8014316:	4b71      	ldr	r3, [pc, #452]	; (80144dc <get_config_payload_string+0x290>)
 8014318:	9308      	str	r3, [sp, #32]
 801431a:	4b71      	ldr	r3, [pc, #452]	; (80144e0 <get_config_payload_string+0x294>)
 801431c:	9307      	str	r3, [sp, #28]
 801431e:	4b66      	ldr	r3, [pc, #408]	; (80144b8 <get_config_payload_string+0x26c>)
 8014320:	9306      	str	r3, [sp, #24]
 8014322:	4b6d      	ldr	r3, [pc, #436]	; (80144d8 <get_config_payload_string+0x28c>)
 8014324:	9305      	str	r3, [sp, #20]
 8014326:	4b6f      	ldr	r3, [pc, #444]	; (80144e4 <get_config_payload_string+0x298>)
 8014328:	9304      	str	r3, [sp, #16]
 801432a:	4b6f      	ldr	r3, [pc, #444]	; (80144e8 <get_config_payload_string+0x29c>)
 801432c:	9303      	str	r3, [sp, #12]
 801432e:	4b6c      	ldr	r3, [pc, #432]	; (80144e0 <get_config_payload_string+0x294>)
 8014330:	9302      	str	r3, [sp, #8]
 8014332:	4b6e      	ldr	r3, [pc, #440]	; (80144ec <get_config_payload_string+0x2a0>)
 8014334:	9301      	str	r3, [sp, #4]
 8014336:	4b60      	ldr	r3, [pc, #384]	; (80144b8 <get_config_payload_string+0x26c>)
 8014338:	9300      	str	r3, [sp, #0]
 801433a:	4b67      	ldr	r3, [pc, #412]	; (80144d8 <get_config_payload_string+0x28c>)
 801433c:	4a68      	ldr	r2, [pc, #416]	; (80144e0 <get_config_payload_string+0x294>)
 801433e:	496c      	ldr	r1, [pc, #432]	; (80144f0 <get_config_payload_string+0x2a4>)
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f018 fec9 	bl	802d0d8 <siprintf>
 8014346:	4603      	mov	r3, r0
 8014348:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801434a:	e0ae      	b.n	80144aa <get_config_payload_string+0x25e>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 801434c:	4b59      	ldr	r3, [pc, #356]	; (80144b4 <get_config_payload_string+0x268>)
 801434e:	9310      	str	r3, [sp, #64]	; 0x40
 8014350:	4b5c      	ldr	r3, [pc, #368]	; (80144c4 <get_config_payload_string+0x278>)
 8014352:	930f      	str	r3, [sp, #60]	; 0x3c
 8014354:	4b5c      	ldr	r3, [pc, #368]	; (80144c8 <get_config_payload_string+0x27c>)
 8014356:	930e      	str	r3, [sp, #56]	; 0x38
 8014358:	4b5c      	ldr	r3, [pc, #368]	; (80144cc <get_config_payload_string+0x280>)
 801435a:	930d      	str	r3, [sp, #52]	; 0x34
 801435c:	4b5c      	ldr	r3, [pc, #368]	; (80144d0 <get_config_payload_string+0x284>)
 801435e:	930c      	str	r3, [sp, #48]	; 0x30
 8014360:	4b5c      	ldr	r3, [pc, #368]	; (80144d4 <get_config_payload_string+0x288>)
 8014362:	930b      	str	r3, [sp, #44]	; 0x2c
 8014364:	4b54      	ldr	r3, [pc, #336]	; (80144b8 <get_config_payload_string+0x26c>)
 8014366:	930a      	str	r3, [sp, #40]	; 0x28
 8014368:	4b5b      	ldr	r3, [pc, #364]	; (80144d8 <get_config_payload_string+0x28c>)
 801436a:	9309      	str	r3, [sp, #36]	; 0x24
 801436c:	4b61      	ldr	r3, [pc, #388]	; (80144f4 <get_config_payload_string+0x2a8>)
 801436e:	9308      	str	r3, [sp, #32]
 8014370:	4b61      	ldr	r3, [pc, #388]	; (80144f8 <get_config_payload_string+0x2ac>)
 8014372:	9307      	str	r3, [sp, #28]
 8014374:	4b50      	ldr	r3, [pc, #320]	; (80144b8 <get_config_payload_string+0x26c>)
 8014376:	9306      	str	r3, [sp, #24]
 8014378:	4b57      	ldr	r3, [pc, #348]	; (80144d8 <get_config_payload_string+0x28c>)
 801437a:	9305      	str	r3, [sp, #20]
 801437c:	4b5f      	ldr	r3, [pc, #380]	; (80144fc <get_config_payload_string+0x2b0>)
 801437e:	9304      	str	r3, [sp, #16]
 8014380:	4b5f      	ldr	r3, [pc, #380]	; (8014500 <get_config_payload_string+0x2b4>)
 8014382:	9303      	str	r3, [sp, #12]
 8014384:	4b5c      	ldr	r3, [pc, #368]	; (80144f8 <get_config_payload_string+0x2ac>)
 8014386:	9302      	str	r3, [sp, #8]
 8014388:	4b58      	ldr	r3, [pc, #352]	; (80144ec <get_config_payload_string+0x2a0>)
 801438a:	9301      	str	r3, [sp, #4]
 801438c:	4b4a      	ldr	r3, [pc, #296]	; (80144b8 <get_config_payload_string+0x26c>)
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	4b51      	ldr	r3, [pc, #324]	; (80144d8 <get_config_payload_string+0x28c>)
 8014392:	4a59      	ldr	r2, [pc, #356]	; (80144f8 <get_config_payload_string+0x2ac>)
 8014394:	4956      	ldr	r1, [pc, #344]	; (80144f0 <get_config_payload_string+0x2a4>)
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f018 fe9e 	bl	802d0d8 <siprintf>
 801439c:	4603      	mov	r3, r0
 801439e:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80143a0:	e083      	b.n	80144aa <get_config_payload_string+0x25e>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 80143a2:	4b44      	ldr	r3, [pc, #272]	; (80144b4 <get_config_payload_string+0x268>)
 80143a4:	9310      	str	r3, [sp, #64]	; 0x40
 80143a6:	4b47      	ldr	r3, [pc, #284]	; (80144c4 <get_config_payload_string+0x278>)
 80143a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80143aa:	4b47      	ldr	r3, [pc, #284]	; (80144c8 <get_config_payload_string+0x27c>)
 80143ac:	930e      	str	r3, [sp, #56]	; 0x38
 80143ae:	4b47      	ldr	r3, [pc, #284]	; (80144cc <get_config_payload_string+0x280>)
 80143b0:	930d      	str	r3, [sp, #52]	; 0x34
 80143b2:	4b47      	ldr	r3, [pc, #284]	; (80144d0 <get_config_payload_string+0x284>)
 80143b4:	930c      	str	r3, [sp, #48]	; 0x30
 80143b6:	4b47      	ldr	r3, [pc, #284]	; (80144d4 <get_config_payload_string+0x288>)
 80143b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80143ba:	4b3f      	ldr	r3, [pc, #252]	; (80144b8 <get_config_payload_string+0x26c>)
 80143bc:	930a      	str	r3, [sp, #40]	; 0x28
 80143be:	4b46      	ldr	r3, [pc, #280]	; (80144d8 <get_config_payload_string+0x28c>)
 80143c0:	9309      	str	r3, [sp, #36]	; 0x24
 80143c2:	4b50      	ldr	r3, [pc, #320]	; (8014504 <get_config_payload_string+0x2b8>)
 80143c4:	9308      	str	r3, [sp, #32]
 80143c6:	4b50      	ldr	r3, [pc, #320]	; (8014508 <get_config_payload_string+0x2bc>)
 80143c8:	9307      	str	r3, [sp, #28]
 80143ca:	4b3b      	ldr	r3, [pc, #236]	; (80144b8 <get_config_payload_string+0x26c>)
 80143cc:	9306      	str	r3, [sp, #24]
 80143ce:	4b42      	ldr	r3, [pc, #264]	; (80144d8 <get_config_payload_string+0x28c>)
 80143d0:	9305      	str	r3, [sp, #20]
 80143d2:	4b4e      	ldr	r3, [pc, #312]	; (801450c <get_config_payload_string+0x2c0>)
 80143d4:	9304      	str	r3, [sp, #16]
 80143d6:	4b4a      	ldr	r3, [pc, #296]	; (8014500 <get_config_payload_string+0x2b4>)
 80143d8:	9303      	str	r3, [sp, #12]
 80143da:	4b4b      	ldr	r3, [pc, #300]	; (8014508 <get_config_payload_string+0x2bc>)
 80143dc:	9302      	str	r3, [sp, #8]
 80143de:	4b43      	ldr	r3, [pc, #268]	; (80144ec <get_config_payload_string+0x2a0>)
 80143e0:	9301      	str	r3, [sp, #4]
 80143e2:	4b35      	ldr	r3, [pc, #212]	; (80144b8 <get_config_payload_string+0x26c>)
 80143e4:	9300      	str	r3, [sp, #0]
 80143e6:	4b3c      	ldr	r3, [pc, #240]	; (80144d8 <get_config_payload_string+0x28c>)
 80143e8:	4a47      	ldr	r2, [pc, #284]	; (8014508 <get_config_payload_string+0x2bc>)
 80143ea:	4941      	ldr	r1, [pc, #260]	; (80144f0 <get_config_payload_string+0x2a4>)
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f018 fe73 	bl	802d0d8 <siprintf>
 80143f2:	4603      	mov	r3, r0
 80143f4:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80143f6:	e058      	b.n	80144aa <get_config_payload_string+0x25e>
		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80143f8:	4b2e      	ldr	r3, [pc, #184]	; (80144b4 <get_config_payload_string+0x268>)
 80143fa:	9310      	str	r3, [sp, #64]	; 0x40
 80143fc:	4b31      	ldr	r3, [pc, #196]	; (80144c4 <get_config_payload_string+0x278>)
 80143fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014400:	4b31      	ldr	r3, [pc, #196]	; (80144c8 <get_config_payload_string+0x27c>)
 8014402:	930e      	str	r3, [sp, #56]	; 0x38
 8014404:	4b31      	ldr	r3, [pc, #196]	; (80144cc <get_config_payload_string+0x280>)
 8014406:	930d      	str	r3, [sp, #52]	; 0x34
 8014408:	4b31      	ldr	r3, [pc, #196]	; (80144d0 <get_config_payload_string+0x284>)
 801440a:	930c      	str	r3, [sp, #48]	; 0x30
 801440c:	4b31      	ldr	r3, [pc, #196]	; (80144d4 <get_config_payload_string+0x288>)
 801440e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014410:	4b29      	ldr	r3, [pc, #164]	; (80144b8 <get_config_payload_string+0x26c>)
 8014412:	930a      	str	r3, [sp, #40]	; 0x28
 8014414:	4b30      	ldr	r3, [pc, #192]	; (80144d8 <get_config_payload_string+0x28c>)
 8014416:	9309      	str	r3, [sp, #36]	; 0x24
 8014418:	4b3d      	ldr	r3, [pc, #244]	; (8014510 <get_config_payload_string+0x2c4>)
 801441a:	9308      	str	r3, [sp, #32]
 801441c:	4b3d      	ldr	r3, [pc, #244]	; (8014514 <get_config_payload_string+0x2c8>)
 801441e:	9307      	str	r3, [sp, #28]
 8014420:	4b25      	ldr	r3, [pc, #148]	; (80144b8 <get_config_payload_string+0x26c>)
 8014422:	9306      	str	r3, [sp, #24]
 8014424:	4b2c      	ldr	r3, [pc, #176]	; (80144d8 <get_config_payload_string+0x28c>)
 8014426:	9305      	str	r3, [sp, #20]
 8014428:	4b3b      	ldr	r3, [pc, #236]	; (8014518 <get_config_payload_string+0x2cc>)
 801442a:	9304      	str	r3, [sp, #16]
 801442c:	4b34      	ldr	r3, [pc, #208]	; (8014500 <get_config_payload_string+0x2b4>)
 801442e:	9303      	str	r3, [sp, #12]
 8014430:	4b38      	ldr	r3, [pc, #224]	; (8014514 <get_config_payload_string+0x2c8>)
 8014432:	9302      	str	r3, [sp, #8]
 8014434:	4b2d      	ldr	r3, [pc, #180]	; (80144ec <get_config_payload_string+0x2a0>)
 8014436:	9301      	str	r3, [sp, #4]
 8014438:	4b1f      	ldr	r3, [pc, #124]	; (80144b8 <get_config_payload_string+0x26c>)
 801443a:	9300      	str	r3, [sp, #0]
 801443c:	4b26      	ldr	r3, [pc, #152]	; (80144d8 <get_config_payload_string+0x28c>)
 801443e:	4a35      	ldr	r2, [pc, #212]	; (8014514 <get_config_payload_string+0x2c8>)
 8014440:	492b      	ldr	r1, [pc, #172]	; (80144f0 <get_config_payload_string+0x2a4>)
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f018 fe48 	bl	802d0d8 <siprintf>
 8014448:	4603      	mov	r3, r0
 801444a:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801444c:	e02d      	b.n	80144aa <get_config_payload_string+0x25e>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 801444e:	4b19      	ldr	r3, [pc, #100]	; (80144b4 <get_config_payload_string+0x268>)
 8014450:	9310      	str	r3, [sp, #64]	; 0x40
 8014452:	4b1c      	ldr	r3, [pc, #112]	; (80144c4 <get_config_payload_string+0x278>)
 8014454:	930f      	str	r3, [sp, #60]	; 0x3c
 8014456:	4b1c      	ldr	r3, [pc, #112]	; (80144c8 <get_config_payload_string+0x27c>)
 8014458:	930e      	str	r3, [sp, #56]	; 0x38
 801445a:	4b1c      	ldr	r3, [pc, #112]	; (80144cc <get_config_payload_string+0x280>)
 801445c:	930d      	str	r3, [sp, #52]	; 0x34
 801445e:	4b1c      	ldr	r3, [pc, #112]	; (80144d0 <get_config_payload_string+0x284>)
 8014460:	930c      	str	r3, [sp, #48]	; 0x30
 8014462:	4b1c      	ldr	r3, [pc, #112]	; (80144d4 <get_config_payload_string+0x288>)
 8014464:	930b      	str	r3, [sp, #44]	; 0x2c
 8014466:	4b14      	ldr	r3, [pc, #80]	; (80144b8 <get_config_payload_string+0x26c>)
 8014468:	930a      	str	r3, [sp, #40]	; 0x28
 801446a:	4b1b      	ldr	r3, [pc, #108]	; (80144d8 <get_config_payload_string+0x28c>)
 801446c:	9309      	str	r3, [sp, #36]	; 0x24
 801446e:	4b2b      	ldr	r3, [pc, #172]	; (801451c <get_config_payload_string+0x2d0>)
 8014470:	9308      	str	r3, [sp, #32]
 8014472:	4b2b      	ldr	r3, [pc, #172]	; (8014520 <get_config_payload_string+0x2d4>)
 8014474:	9307      	str	r3, [sp, #28]
 8014476:	4b10      	ldr	r3, [pc, #64]	; (80144b8 <get_config_payload_string+0x26c>)
 8014478:	9306      	str	r3, [sp, #24]
 801447a:	4b17      	ldr	r3, [pc, #92]	; (80144d8 <get_config_payload_string+0x28c>)
 801447c:	9305      	str	r3, [sp, #20]
 801447e:	4b29      	ldr	r3, [pc, #164]	; (8014524 <get_config_payload_string+0x2d8>)
 8014480:	9304      	str	r3, [sp, #16]
 8014482:	4b1f      	ldr	r3, [pc, #124]	; (8014500 <get_config_payload_string+0x2b4>)
 8014484:	9303      	str	r3, [sp, #12]
 8014486:	4b26      	ldr	r3, [pc, #152]	; (8014520 <get_config_payload_string+0x2d4>)
 8014488:	9302      	str	r3, [sp, #8]
 801448a:	4b18      	ldr	r3, [pc, #96]	; (80144ec <get_config_payload_string+0x2a0>)
 801448c:	9301      	str	r3, [sp, #4]
 801448e:	4b0a      	ldr	r3, [pc, #40]	; (80144b8 <get_config_payload_string+0x26c>)
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	4b11      	ldr	r3, [pc, #68]	; (80144d8 <get_config_payload_string+0x28c>)
 8014494:	4a22      	ldr	r2, [pc, #136]	; (8014520 <get_config_payload_string+0x2d4>)
 8014496:	4916      	ldr	r1, [pc, #88]	; (80144f0 <get_config_payload_string+0x2a4>)
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f018 fe1d 	bl	802d0d8 <siprintf>
 801449e:	4603      	mov	r3, r0
 80144a0:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80144a2:	e002      	b.n	80144aa <get_config_payload_string+0x25e>

		default:
			return -1;
 80144a4:	f04f 33ff 	mov.w	r3, #4294967295
 80144a8:	e7ff      	b.n	80144aa <get_config_payload_string+0x25e>
			break;
	}
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3714      	adds	r7, #20
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd90      	pop	{r4, r7, pc}
 80144b2:	bf00      	nop
 80144b4:	20000898 	.word	0x20000898
 80144b8:	20000888 	.word	0x20000888
 80144bc:	08033b2c 	.word	0x08033b2c
 80144c0:	08033cec 	.word	0x08033cec
 80144c4:	080325a8 	.word	0x080325a8
 80144c8:	080325b0 	.word	0x080325b0
 80144cc:	080325b8 	.word	0x080325b8
 80144d0:	080325c8 	.word	0x080325c8
 80144d4:	080325d8 	.word	0x080325d8
 80144d8:	08032578 	.word	0x08032578
 80144dc:	080325e8 	.word	0x080325e8
 80144e0:	08032570 	.word	0x08032570
 80144e4:	080325ec 	.word	0x080325ec
 80144e8:	080325fc 	.word	0x080325fc
 80144ec:	08032620 	.word	0x08032620
 80144f0:	08033e84 	.word	0x08033e84
 80144f4:	08032628 	.word	0x08032628
 80144f8:	08032580 	.word	0x08032580
 80144fc:	0803262c 	.word	0x0803262c
 8014500:	0803263c 	.word	0x0803263c
 8014504:	08032640 	.word	0x08032640
 8014508:	08032588 	.word	0x08032588
 801450c:	08032644 	.word	0x08032644
 8014510:	0803265c 	.word	0x0803265c
 8014514:	08032590 	.word	0x08032590
 8014518:	08032660 	.word	0x08032660
 801451c:	0803268c 	.word	0x0803268c
 8014520:	080325a0 	.word	0x080325a0
 8014524:	08032690 	.word	0x08032690

08014528 <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 8014528:	b580      	push	{r7, lr}
 801452a:	b084      	sub	sp, #16
 801452c:	af02      	add	r7, sp, #8
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	460b      	mov	r3, r1
 8014532:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2200      	movs	r2, #0
 8014538:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 801453a:	4b11      	ldr	r3, [pc, #68]	; (8014580 <generate_status_topik+0x58>)
 801453c:	9300      	str	r3, [sp, #0]
 801453e:	4b11      	ldr	r3, [pc, #68]	; (8014584 <generate_status_topik+0x5c>)
 8014540:	4a11      	ldr	r2, [pc, #68]	; (8014588 <generate_status_topik+0x60>)
 8014542:	4912      	ldr	r1, [pc, #72]	; (801458c <generate_status_topik+0x64>)
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f018 fdc7 	bl	802d0d8 <siprintf>

	switch (topik_type) {
 801454a:	78fb      	ldrb	r3, [r7, #3]
 801454c:	2b01      	cmp	r3, #1
 801454e:	d002      	beq.n	8014556 <generate_status_topik+0x2e>
 8014550:	2b02      	cmp	r3, #2
 8014552:	d006      	beq.n	8014562 <generate_status_topik+0x3a>
 8014554:	e00b      	b.n	801456e <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 8014556:	4a0b      	ldr	r2, [pc, #44]	; (8014584 <generate_status_topik+0x5c>)
 8014558:	490d      	ldr	r1, [pc, #52]	; (8014590 <generate_status_topik+0x68>)
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f018 fdbc 	bl	802d0d8 <siprintf>
			break;
 8014560:	e008      	b.n	8014574 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 8014562:	4a08      	ldr	r2, [pc, #32]	; (8014584 <generate_status_topik+0x5c>)
 8014564:	490b      	ldr	r1, [pc, #44]	; (8014594 <generate_status_topik+0x6c>)
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f018 fdb6 	bl	802d0d8 <siprintf>
			break;
 801456c:	e002      	b.n	8014574 <generate_status_topik+0x4c>

		default:
			return -1;
 801456e:	f04f 33ff 	mov.w	r3, #4294967295
 8014572:	e000      	b.n	8014576 <generate_status_topik+0x4e>
			break;
	}

	return 0;
 8014574:	2300      	movs	r3, #0
}
 8014576:	4618      	mov	r0, r3
 8014578:	3708      	adds	r7, #8
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	08032620 	.word	0x08032620
 8014584:	20000888 	.word	0x20000888
 8014588:	08032578 	.word	0x08032578
 801458c:	080326b8 	.word	0x080326b8
 8014590:	20000094 	.word	0x20000094
 8014594:	200000a4 	.word	0x200000a4

08014598 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014598:	b580      	push	{r7, lr}
 801459a:	b086      	sub	sp, #24
 801459c:	af02      	add	r7, sp, #8
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f7fb ffe6 	bl	8010578 <__aeabi_f2d>
 80145ac:	4602      	mov	r2, r0
 80145ae:	460b      	mov	r3, r1
 80145b0:	e9cd 2300 	strd	r2, r3, [sp]
 80145b4:	68ba      	ldr	r2, [r7, #8]
 80145b6:	4904      	ldr	r1, [pc, #16]	; (80145c8 <generate_key_value_JSON+0x30>)
 80145b8:	68f8      	ldr	r0, [r7, #12]
 80145ba:	f018 fd8d 	bl	802d0d8 <siprintf>
}
 80145be:	bf00      	nop
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	080326c4 	.word	0x080326c4

080145cc <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 80145cc:	b5b0      	push	{r4, r5, r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 80145da:	68f8      	ldr	r0, [r7, #12]
 80145dc:	f7fb ffaa 	bl	8010534 <__aeabi_ui2d>
 80145e0:	4604      	mov	r4, r0
 80145e2:	460d      	mov	r5, r1
 80145e4:	68b8      	ldr	r0, [r7, #8]
 80145e6:	f7fb ffa5 	bl	8010534 <__aeabi_ui2d>
 80145ea:	f04f 0200 	mov.w	r2, #0
 80145ee:	4b17      	ldr	r3, [pc, #92]	; (801464c <InitHLW8032+0x80>)
 80145f0:	f7fc f81a 	bl	8010628 <__aeabi_dmul>
 80145f4:	4602      	mov	r2, r0
 80145f6:	460b      	mov	r3, r1
 80145f8:	4620      	mov	r0, r4
 80145fa:	4629      	mov	r1, r5
 80145fc:	f7fc f93e 	bl	801087c <__aeabi_ddiv>
 8014600:	4602      	mov	r2, r0
 8014602:	460b      	mov	r3, r1
 8014604:	4610      	mov	r0, r2
 8014606:	4619      	mov	r1, r3
 8014608:	f7fc fb06 	bl	8010c18 <__aeabi_d2f>
 801460c:	4603      	mov	r3, r0
 801460e:	4a10      	ldr	r2, [pc, #64]	; (8014650 <InitHLW8032+0x84>)
 8014610:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f7fb ffb0 	bl	8010578 <__aeabi_f2d>
 8014618:	f04f 0200 	mov.w	r2, #0
 801461c:	4b0b      	ldr	r3, [pc, #44]	; (801464c <InitHLW8032+0x80>)
 801461e:	f7fc f803 	bl	8010628 <__aeabi_dmul>
 8014622:	4602      	mov	r2, r0
 8014624:	460b      	mov	r3, r1
 8014626:	f04f 0000 	mov.w	r0, #0
 801462a:	490a      	ldr	r1, [pc, #40]	; (8014654 <InitHLW8032+0x88>)
 801462c:	f7fc f926 	bl	801087c <__aeabi_ddiv>
 8014630:	4602      	mov	r2, r0
 8014632:	460b      	mov	r3, r1
 8014634:	4610      	mov	r0, r2
 8014636:	4619      	mov	r1, r3
 8014638:	f7fc faee 	bl	8010c18 <__aeabi_d2f>
 801463c:	4603      	mov	r3, r0
 801463e:	4a06      	ldr	r2, [pc, #24]	; (8014658 <InitHLW8032+0x8c>)
 8014640:	6013      	str	r3, [r2, #0]
}
 8014642:	bf00      	nop
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bdb0      	pop	{r4, r5, r7, pc}
 801464a:	bf00      	nop
 801464c:	408f4000 	.word	0x408f4000
 8014650:	200000b4 	.word	0x200000b4
 8014654:	3ff00000 	.word	0x3ff00000
 8014658:	200000b8 	.word	0x200000b8

0801465c <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 801465c:	b480      	push	{r7}
 801465e:	b085      	sub	sp, #20
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8014664:	2300      	movs	r3, #0
 8014666:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014668:	2302      	movs	r3, #2
 801466a:	73fb      	strb	r3, [r7, #15]
 801466c:	e00e      	b.n	801468c <Checksum+0x30>
		tmp = string[i];
 801466e:	7bfb      	ldrb	r3, [r7, #15]
 8014670:	687a      	ldr	r2, [r7, #4]
 8014672:	4413      	add	r3, r2
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8014678:	7bfb      	ldrb	r3, [r7, #15]
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	4413      	add	r3, r2
 801467e:	781a      	ldrb	r2, [r3, #0]
 8014680:	7bbb      	ldrb	r3, [r7, #14]
 8014682:	4413      	add	r3, r2
 8014684:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014686:	7bfb      	ldrb	r3, [r7, #15]
 8014688:	3301      	adds	r3, #1
 801468a:	73fb      	strb	r3, [r7, #15]
 801468c:	7bfb      	ldrb	r3, [r7, #15]
 801468e:	2b16      	cmp	r3, #22
 8014690:	d9ed      	bls.n	801466e <Checksum+0x12>
	}
	if (byte == string[23])
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	3317      	adds	r3, #23
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	7bba      	ldrb	r2, [r7, #14]
 801469a:	429a      	cmp	r2, r3
 801469c:	d101      	bne.n	80146a2 <Checksum+0x46>
	{
		return 1;
 801469e:	2301      	movs	r3, #1
 80146a0:	e000      	b.n	80146a4 <Checksum+0x48>
	}
	return 0;
 80146a2:	2300      	movs	r3, #0
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3714      	adds	r7, #20
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	3301      	adds	r3, #1
 80146bc:	215a      	movs	r1, #90	; 0x5a
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fb fd8e 	bl	80101e0 <strcmp>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d102      	bne.n	80146d0 <RecvRawString+0x20>
		return -1; //error code
 80146ca:	f04f 33ff 	mov.w	r3, #4294967295
 80146ce:	e0a9      	b.n	8014824 <RecvRawString+0x174>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f7ff ffc3 	bl	801465c <Checksum>
 80146d6:	4603      	mov	r3, r0
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d102      	bne.n	80146e2 <RecvRawString+0x32>
		return -2; //Checksum Error
 80146dc:	f06f 0301 	mvn.w	r3, #1
 80146e0:	e0a0      	b.n	8014824 <RecvRawString+0x174>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	3302      	adds	r3, #2
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	041a      	lsls	r2, r3, #16
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	3303      	adds	r3, #3
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	021b      	lsls	r3, r3, #8
 80146f2:	4413      	add	r3, r2
 80146f4:	687a      	ldr	r2, [r7, #4]
 80146f6:	3204      	adds	r2, #4
 80146f8:	7812      	ldrb	r2, [r2, #0]
 80146fa:	4413      	add	r3, r2
 80146fc:	4a4b      	ldr	r2, [pc, #300]	; (801482c <RecvRawString+0x17c>)
 80146fe:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	3314      	adds	r3, #20
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	099b      	lsrs	r3, r3, #6
 8014708:	b2db      	uxtb	r3, r3
 801470a:	f003 0301 	and.w	r3, r3, #1
 801470e:	2b00      	cmp	r3, #0
 8014710:	d00e      	beq.n	8014730 <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	3305      	adds	r3, #5
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	041a      	lsls	r2, r3, #16
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	3306      	adds	r3, #6
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	021b      	lsls	r3, r3, #8
 8014722:	4413      	add	r3, r2
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	3207      	adds	r2, #7
 8014728:	7812      	ldrb	r2, [r2, #0]
 801472a:	4413      	add	r3, r2
 801472c:	4a40      	ldr	r2, [pc, #256]	; (8014830 <RecvRawString+0x180>)
 801472e:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	3308      	adds	r3, #8
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	041a      	lsls	r2, r3, #16
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	3309      	adds	r3, #9
 801473c:	781b      	ldrb	r3, [r3, #0]
 801473e:	021b      	lsls	r3, r3, #8
 8014740:	4413      	add	r3, r2
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	320a      	adds	r2, #10
 8014746:	7812      	ldrb	r2, [r2, #0]
 8014748:	4413      	add	r3, r2
 801474a:	4a3a      	ldr	r2, [pc, #232]	; (8014834 <RecvRawString+0x184>)
 801474c:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	3314      	adds	r3, #20
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	095b      	lsrs	r3, r3, #5
 8014756:	b2db      	uxtb	r3, r3
 8014758:	f003 0301 	and.w	r3, r3, #1
 801475c:	2b00      	cmp	r3, #0
 801475e:	d00e      	beq.n	801477e <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	330b      	adds	r3, #11
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	041a      	lsls	r2, r3, #16
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	330c      	adds	r3, #12
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	021b      	lsls	r3, r3, #8
 8014770:	4413      	add	r3, r2
 8014772:	687a      	ldr	r2, [r7, #4]
 8014774:	320d      	adds	r2, #13
 8014776:	7812      	ldrb	r2, [r2, #0]
 8014778:	4413      	add	r3, r2
 801477a:	4a2f      	ldr	r2, [pc, #188]	; (8014838 <RecvRawString+0x188>)
 801477c:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	330e      	adds	r3, #14
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	041a      	lsls	r2, r3, #16
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	330f      	adds	r3, #15
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	021b      	lsls	r3, r3, #8
 801478e:	4413      	add	r3, r2
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	3210      	adds	r2, #16
 8014794:	7812      	ldrb	r2, [r2, #0]
 8014796:	4413      	add	r3, r2
 8014798:	4a28      	ldr	r2, [pc, #160]	; (801483c <RecvRawString+0x18c>)
 801479a:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	3314      	adds	r3, #20
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	091b      	lsrs	r3, r3, #4
 80147a4:	b2db      	uxtb	r3, r3
 80147a6:	f003 0301 	and.w	r3, r3, #1
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00e      	beq.n	80147cc <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3311      	adds	r3, #17
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	041a      	lsls	r2, r3, #16
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	3312      	adds	r3, #18
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	021b      	lsls	r3, r3, #8
 80147be:	4413      	add	r3, r2
 80147c0:	687a      	ldr	r2, [r7, #4]
 80147c2:	3213      	adds	r2, #19
 80147c4:	7812      	ldrb	r2, [r2, #0]
 80147c6:	4413      	add	r3, r2
 80147c8:	4a1d      	ldr	r2, [pc, #116]	; (8014840 <RecvRawString+0x190>)
 80147ca:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	3315      	adds	r3, #21
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	021b      	lsls	r3, r3, #8
 80147d6:	b29a      	uxth	r2, r3
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	3316      	adds	r3, #22
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	b29b      	uxth	r3, r3
 80147e0:	4413      	add	r3, r2
 80147e2:	b29a      	uxth	r2, r3
 80147e4:	4b17      	ldr	r3, [pc, #92]	; (8014844 <RecvRawString+0x194>)
 80147e6:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	3314      	adds	r3, #20
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	09db      	lsrs	r3, r3, #7
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	f003 0301 	and.w	r3, r3, #1
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d004      	beq.n	8014804 <RecvRawString+0x154>
	{
		PFData++;
 80147fa:	4b13      	ldr	r3, [pc, #76]	; (8014848 <RecvRawString+0x198>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	3301      	adds	r3, #1
 8014800:	4a11      	ldr	r2, [pc, #68]	; (8014848 <RecvRawString+0x198>)
 8014802:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014804:	4b11      	ldr	r3, [pc, #68]	; (801484c <RecvRawString+0x19c>)
 8014806:	881a      	ldrh	r2, [r3, #0]
 8014808:	4b0e      	ldr	r3, [pc, #56]	; (8014844 <RecvRawString+0x194>)
 801480a:	881b      	ldrh	r3, [r3, #0]
 801480c:	429a      	cmp	r2, r3
 801480e:	d904      	bls.n	801481a <RecvRawString+0x16a>
		test_flag++;
 8014810:	4b0f      	ldr	r3, [pc, #60]	; (8014850 <RecvRawString+0x1a0>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	3301      	adds	r3, #1
 8014816:	4a0e      	ldr	r2, [pc, #56]	; (8014850 <RecvRawString+0x1a0>)
 8014818:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 801481a:	4b0a      	ldr	r3, [pc, #40]	; (8014844 <RecvRawString+0x194>)
 801481c:	881a      	ldrh	r2, [r3, #0]
 801481e:	4b0b      	ldr	r3, [pc, #44]	; (801484c <RecvRawString+0x19c>)
 8014820:	801a      	strh	r2, [r3, #0]

	return 0;
 8014822:	2300      	movs	r3, #0
}
 8014824:	4618      	mov	r0, r3
 8014826:	3708      	adds	r7, #8
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}
 801482c:	200008ac 	.word	0x200008ac
 8014830:	200008b0 	.word	0x200008b0
 8014834:	200008bc 	.word	0x200008bc
 8014838:	200008c0 	.word	0x200008c0
 801483c:	200008b4 	.word	0x200008b4
 8014840:	200008b8 	.word	0x200008b8
 8014844:	200008c8 	.word	0x200008c8
 8014848:	200008c4 	.word	0x200008c4
 801484c:	200008ca 	.word	0x200008ca
 8014850:	200008cc 	.word	0x200008cc

08014854 <GetVolRaw>:

float GetVolRaw(void){
 8014854:	b480      	push	{r7}
 8014856:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014858:	4b0e      	ldr	r3, [pc, #56]	; (8014894 <GetVolRaw+0x40>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d102      	bne.n	8014866 <GetVolRaw+0x12>
		return 0;
 8014860:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014898 <GetVolRaw+0x44>
 8014864:	e00d      	b.n	8014882 <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014866:	4b0d      	ldr	r3, [pc, #52]	; (801489c <GetVolRaw+0x48>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	ee07 3a90 	vmov	s15, r3
 801486e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014872:	4b08      	ldr	r3, [pc, #32]	; (8014894 <GetVolRaw+0x40>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	ee07 3a90 	vmov	s15, r3
 801487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801487e:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014882:	eef0 7a66 	vmov.f32	s15, s13
 8014886:	eeb0 0a67 	vmov.f32	s0, s15
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	200008b0 	.word	0x200008b0
 8014898:	00000000 	.word	0x00000000
 801489c:	200008ac 	.word	0x200008ac

080148a0 <GetVoltage>:

float GetVoltage(void){
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 80148a6:	f7ff ffd5 	bl	8014854 <GetVolRaw>
 80148aa:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 80148ae:	4b0d      	ldr	r3, [pc, #52]	; (80148e4 <GetVoltage+0x44>)
 80148b0:	edd3 7a00 	vldr	s15, [r3]
 80148b4:	ed97 7a00 	vldr	s14, [r7]
 80148b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148bc:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 80148c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80148c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80148c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148cc:	d501      	bpl.n	80148d2 <GetVoltage+0x32>
 80148ce:	4b06      	ldr	r3, [pc, #24]	; (80148e8 <GetVoltage+0x48>)
 80148d0:	607b      	str	r3, [r7, #4]
	return RealVolt;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	ee07 3a90 	vmov	s15, r3
}
 80148d8:	eeb0 0a67 	vmov.f32	s0, s15
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	200000b4 	.word	0x200000b4
 80148e8:	3089705f 	.word	0x3089705f

080148ec <GetCurrentRaw>:

float GetCurrentRaw(void){
 80148ec:	b480      	push	{r7}
 80148ee:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 80148f0:	4b0e      	ldr	r3, [pc, #56]	; (801492c <GetCurrentRaw+0x40>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d102      	bne.n	80148fe <GetCurrentRaw+0x12>
		return 0;
 80148f8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014930 <GetCurrentRaw+0x44>
 80148fc:	e00d      	b.n	801491a <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 80148fe:	4b0d      	ldr	r3, [pc, #52]	; (8014934 <GetCurrentRaw+0x48>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	ee07 3a90 	vmov	s15, r3
 8014906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801490a:	4b08      	ldr	r3, [pc, #32]	; (801492c <GetCurrentRaw+0x40>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	ee07 3a90 	vmov	s15, r3
 8014912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014916:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 801491a:	eef0 7a66 	vmov.f32	s15, s13
 801491e:	eeb0 0a67 	vmov.f32	s0, s15
 8014922:	46bd      	mov	sp, r7
 8014924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop
 801492c:	200008c0 	.word	0x200008c0
 8014930:	00000000 	.word	0x00000000
 8014934:	200008bc 	.word	0x200008bc

08014938 <GetCurrent>:

float GetCurrent(void){
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 801493e:	f7ff ffd5 	bl	80148ec <GetCurrentRaw>
 8014942:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014946:	4b0d      	ldr	r3, [pc, #52]	; (801497c <GetCurrent+0x44>)
 8014948:	edd3 7a00 	vldr	s15, [r3]
 801494c:	ed97 7a00 	vldr	s14, [r7]
 8014950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014954:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014958:	edd7 7a01 	vldr	s15, [r7, #4]
 801495c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014964:	d501      	bpl.n	801496a <GetCurrent+0x32>
 8014966:	4b06      	ldr	r3, [pc, #24]	; (8014980 <GetCurrent+0x48>)
 8014968:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	ee07 3a90 	vmov	s15, r3
}
 8014970:	eeb0 0a67 	vmov.f32	s0, s15
 8014974:	3708      	adds	r7, #8
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	200000b8 	.word	0x200000b8
 8014980:	3089705f 	.word	0x3089705f

08014984 <GetActivePower>:

float GetActivePower(void){
 8014984:	b480      	push	{r7}
 8014986:	b083      	sub	sp, #12
 8014988:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 801498a:	4b18      	ldr	r3, [pc, #96]	; (80149ec <GetActivePower+0x68>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d102      	bne.n	8014998 <GetActivePower+0x14>
		return 0;
 8014992:	f04f 0300 	mov.w	r3, #0
 8014996:	e01f      	b.n	80149d8 <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014998:	4b15      	ldr	r3, [pc, #84]	; (80149f0 <GetActivePower+0x6c>)
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	4b13      	ldr	r3, [pc, #76]	; (80149ec <GetActivePower+0x68>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80149a4:	ee07 3a90 	vmov	s15, r3
 80149a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80149ac:	4b11      	ldr	r3, [pc, #68]	; (80149f4 <GetActivePower+0x70>)
 80149ae:	edd3 7a00 	vldr	s15, [r3]
 80149b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80149b6:	4b10      	ldr	r3, [pc, #64]	; (80149f8 <GetActivePower+0x74>)
 80149b8:	edd3 7a00 	vldr	s15, [r3]
 80149bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149c0:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 80149c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80149c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80149cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d0:	d501      	bpl.n	80149d6 <GetActivePower+0x52>
 80149d2:	4b0a      	ldr	r3, [pc, #40]	; (80149fc <GetActivePower+0x78>)
 80149d4:	607b      	str	r3, [r7, #4]

	return tmp;
 80149d6:	687b      	ldr	r3, [r7, #4]
}
 80149d8:	ee07 3a90 	vmov	s15, r3
 80149dc:	eeb0 0a67 	vmov.f32	s0, s15
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	200008b8 	.word	0x200008b8
 80149f0:	200008b4 	.word	0x200008b4
 80149f4:	200000b4 	.word	0x200000b4
 80149f8:	200000b8 	.word	0x200000b8
 80149fc:	3089705f 	.word	0x3089705f

08014a00 <GetApparentPower>:

float GetApparentPower(void){
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 8014a06:	f7ff ff4b 	bl	80148a0 <GetVoltage>
 8014a0a:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 8014a0e:	f7ff ff93 	bl	8014938 <GetCurrent>
 8014a12:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 8014a16:	ed97 7a02 	vldr	s14, [r7, #8]
 8014a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8014a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a22:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 8014a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8014a2a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8014a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a36:	d501      	bpl.n	8014a3c <GetApparentPower+0x3c>
 8014a38:	4b04      	ldr	r3, [pc, #16]	; (8014a4c <GetApparentPower+0x4c>)
 8014a3a:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	ee07 3a90 	vmov	s15, r3
}
 8014a42:	eeb0 0a67 	vmov.f32	s0, s15
 8014a46:	3710      	adds	r7, #16
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	3089705f 	.word	0x3089705f

08014a50 <PowerFactor>:

float PowerFactor(void){
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b084      	sub	sp, #16
 8014a54:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 8014a56:	f7ff ff95 	bl	8014984 <GetActivePower>
 8014a5a:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8014a5e:	f7ff ffcf 	bl	8014a00 <GetApparentPower>
 8014a62:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 1;
 8014a66:	edd7 7a02 	vldr	s15, [r7, #8]
 8014a6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a72:	d102      	bne.n	8014a7a <PowerFactor+0x2a>
 8014a74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014a78:	e01e      	b.n	8014ab8 <PowerFactor+0x68>
	if (ActivePower 	== 0) return 1;
 8014a7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8014a7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a86:	d102      	bne.n	8014a8e <PowerFactor+0x3e>
 8014a88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014a8c:	e014      	b.n	8014ab8 <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8014a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8014a92:	edd7 7a02 	vldr	s15, [r7, #8]
 8014a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a9e:	dd02      	ble.n	8014aa6 <PowerFactor+0x56>
 8014aa0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014aa4:	e008      	b.n	8014ab8 <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 8014aa6:	edd7 6a03 	vldr	s13, [r7, #12]
 8014aaa:	ed97 7a02 	vldr	s14, [r7, #8]
 8014aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014ab2:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 8014ab6:	687b      	ldr	r3, [r7, #4]
}
 8014ab8:	ee07 3a90 	vmov	s15, r3
 8014abc:	eeb0 0a67 	vmov.f32	s0, s15
 8014ac0:	3710      	adds	r7, #16
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
	...

08014ac8 <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 8014ac8:	b480      	push	{r7}
 8014aca:	af00      	add	r7, sp, #0
	return test_flag;
 8014acc:	4b03      	ldr	r3, [pc, #12]	; (8014adc <GetTestPulse+0x14>)
 8014ace:	681b      	ldr	r3, [r3, #0]
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr
 8014ada:	bf00      	nop
 8014adc:	200008cc 	.word	0x200008cc

08014ae0 <GetCountedPulse>:

uint32_t GetCountedPulse(){
 8014ae0:	b480      	push	{r7}
 8014ae2:	af00      	add	r7, sp, #0
	return PFData;
 8014ae4:	4b03      	ldr	r3, [pc, #12]	; (8014af4 <GetCountedPulse+0x14>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	200008c4 	.word	0x200008c4

08014af8 <GetPFReg>:

uint32_t GetPFReg(){
 8014af8:	b480      	push	{r7}
 8014afa:	af00      	add	r7, sp, #0
	return PF_reg;
 8014afc:	4b03      	ldr	r3, [pc, #12]	; (8014b0c <GetPFReg+0x14>)
 8014afe:	881b      	ldrh	r3, [r3, #0]
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	46bd      	mov	sp, r7
 8014b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b08:	4770      	bx	lr
 8014b0a:	bf00      	nop
 8014b0c:	200008c8 	.word	0x200008c8

08014b10 <GetKWh>:

float GetKWh(void){
 8014b10:	b5b0      	push	{r4, r5, r7, lr}
 8014b12:	b084      	sub	sp, #16
 8014b14:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 8014b16:	f7ff ff73 	bl	8014a00 <GetApparentPower>
 8014b1a:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 8014b1e:	4b38      	ldr	r3, [pc, #224]	; (8014c00 <GetKWh+0xf0>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7fb fd06 	bl	8010534 <__aeabi_ui2d>
 8014b28:	4602      	mov	r2, r0
 8014b2a:	460b      	mov	r3, r1
 8014b2c:	f04f 0000 	mov.w	r0, #0
 8014b30:	4934      	ldr	r1, [pc, #208]	; (8014c04 <GetKWh+0xf4>)
 8014b32:	f7fb fea3 	bl	801087c <__aeabi_ddiv>
 8014b36:	4602      	mov	r2, r0
 8014b38:	460b      	mov	r3, r1
 8014b3a:	4614      	mov	r4, r2
 8014b3c:	461d      	mov	r5, r3
 8014b3e:	4b32      	ldr	r3, [pc, #200]	; (8014c08 <GetKWh+0xf8>)
 8014b40:	ed93 7a00 	vldr	s14, [r3]
 8014b44:	4b31      	ldr	r3, [pc, #196]	; (8014c0c <GetKWh+0xfc>)
 8014b46:	edd3 7a00 	vldr	s15, [r3]
 8014b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b4e:	ee17 0a90 	vmov	r0, s15
 8014b52:	f7fb fd11 	bl	8010578 <__aeabi_f2d>
 8014b56:	4602      	mov	r2, r0
 8014b58:	460b      	mov	r3, r1
 8014b5a:	f04f 0000 	mov.w	r0, #0
 8014b5e:	4929      	ldr	r1, [pc, #164]	; (8014c04 <GetKWh+0xf4>)
 8014b60:	f7fb fe8c 	bl	801087c <__aeabi_ddiv>
 8014b64:	4602      	mov	r2, r0
 8014b66:	460b      	mov	r3, r1
 8014b68:	4620      	mov	r0, r4
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	f7fb fd5c 	bl	8010628 <__aeabi_dmul>
 8014b70:	4602      	mov	r2, r0
 8014b72:	460b      	mov	r3, r1
 8014b74:	4610      	mov	r0, r2
 8014b76:	4619      	mov	r1, r3
 8014b78:	a31d      	add	r3, pc, #116	; (adr r3, 8014bf0 <GetKWh+0xe0>)
 8014b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b7e:	f7fb fd53 	bl	8010628 <__aeabi_dmul>
 8014b82:	4602      	mov	r2, r0
 8014b84:	460b      	mov	r3, r1
 8014b86:	4610      	mov	r0, r2
 8014b88:	4619      	mov	r1, r3
 8014b8a:	a31b      	add	r3, pc, #108	; (adr r3, 8014bf8 <GetKWh+0xe8>)
 8014b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b90:	f7fb fd4a 	bl	8010628 <__aeabi_dmul>
 8014b94:	4602      	mov	r2, r0
 8014b96:	460b      	mov	r3, r1
 8014b98:	4610      	mov	r0, r2
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	f7fc f83c 	bl	8010c18 <__aeabi_d2f>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 8014ba4:	f7ff ff90 	bl	8014ac8 <GetTestPulse>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	041c      	lsls	r4, r3, #16
 8014bac:	f7ff ffa4 	bl	8014af8 <GetPFReg>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	4423      	add	r3, r4
 8014bb4:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	ee07 3a90 	vmov	s15, r3
 8014bbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8014bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014bc8:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 8014bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8014bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd8:	d501      	bpl.n	8014bde <GetKWh+0xce>
 8014bda:	4b0d      	ldr	r3, [pc, #52]	; (8014c10 <GetKWh+0x100>)
 8014bdc:	60fb      	str	r3, [r7, #12]

	return kWh;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	ee07 3a90 	vmov	s15, r3
}
 8014be4:	eeb0 0a67 	vmov.f32	s0, s15
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bdb0      	pop	{r4, r5, r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	00000000 	.word	0x00000000
 8014bf4:	41cdcd65 	.word	0x41cdcd65
 8014bf8:	00000000 	.word	0x00000000
 8014bfc:	40ac2000 	.word	0x40ac2000
 8014c00:	200008b4 	.word	0x200008b4
 8014c04:	3ff00000 	.word	0x3ff00000
 8014c08:	200000b4 	.word	0x200000b4
 8014c0c:	200000b8 	.word	0x200000b8
 8014c10:	3089705f 	.word	0x3089705f

08014c14 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8014c14:	b480      	push	{r7}
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	bf00      	nop
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c20:	4770      	bx	lr
	...

08014c24 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 8014c24:	b480      	push	{r7}
 8014c26:	b085      	sub	sp, #20
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
 8014c30:	603b      	str	r3, [r7, #0]

	if (chip_select){
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d003      	beq.n	8014c40 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8014c38:	4a0e      	ldr	r2, [pc, #56]	; (8014c74 <SPI_flash_reg_cb+0x50>)
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	60d3      	str	r3, [r2, #12]
 8014c3e:	e002      	b.n	8014c46 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8014c40:	4b0c      	ldr	r3, [pc, #48]	; (8014c74 <SPI_flash_reg_cb+0x50>)
 8014c42:	4a0d      	ldr	r2, [pc, #52]	; (8014c78 <SPI_flash_reg_cb+0x54>)
 8014c44:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d003      	beq.n	8014c54 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8014c4c:	4a09      	ldr	r2, [pc, #36]	; (8014c74 <SPI_flash_reg_cb+0x50>)
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	6113      	str	r3, [r2, #16]
 8014c52:	e002      	b.n	8014c5a <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 8014c54:	4b07      	ldr	r3, [pc, #28]	; (8014c74 <SPI_flash_reg_cb+0x50>)
 8014c56:	4a08      	ldr	r2, [pc, #32]	; (8014c78 <SPI_flash_reg_cb+0x54>)
 8014c58:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8014c5a:	4a06      	ldr	r2, [pc, #24]	; (8014c74 <SPI_flash_reg_cb+0x50>)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8014c60:	4a04      	ldr	r2, [pc, #16]	; (8014c74 <SPI_flash_reg_cb+0x50>)
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	6093      	str	r3, [r2, #8]

}
 8014c66:	bf00      	nop
 8014c68:	3714      	adds	r7, #20
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c70:	4770      	bx	lr
 8014c72:	bf00      	nop
 8014c74:	200008d0 	.word	0x200008d0
 8014c78:	08014c15 	.word	0x08014c15

08014c7c <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8014c80:	f000 f89c 	bl	8014dbc <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8014c84:	2066      	movs	r0, #102	; 0x66
 8014c86:	f000 fa1f 	bl	80150c8 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8014c8a:	2099      	movs	r0, #153	; 0x99
 8014c8c:	f000 fa1c 	bl	80150c8 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8014c90:	f000 f89e 	bl	8014dd0 <sFLASH_CS_HIGH>
}
 8014c94:	bf00      	nop
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 8014c98:	b590      	push	{r4, r7, lr}
 8014c9a:	b085      	sub	sp, #20
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 8014ca0:	f7ff ffec 	bl	8014c7c <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 8014ca4:	f000 f9d2 	bl	801504c <sFLASH_ReadID>
 8014ca8:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	4a3e      	ldr	r2, [pc, #248]	; (8014da8 <sFLASH_GetInfo+0x110>)
 8014cae:	4293      	cmp	r3, r2
 8014cb0:	d03f      	beq.n	8014d32 <sFLASH_GetInfo+0x9a>
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	4a3c      	ldr	r2, [pc, #240]	; (8014da8 <sFLASH_GetInfo+0x110>)
 8014cb6:	4293      	cmp	r3, r2
 8014cb8:	d867      	bhi.n	8014d8a <sFLASH_GetInfo+0xf2>
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	4a3b      	ldr	r2, [pc, #236]	; (8014dac <sFLASH_GetInfo+0x114>)
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d021      	beq.n	8014d06 <sFLASH_GetInfo+0x6e>
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	4a39      	ldr	r2, [pc, #228]	; (8014dac <sFLASH_GetInfo+0x114>)
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	d85f      	bhi.n	8014d8a <sFLASH_GetInfo+0xf2>
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	4a38      	ldr	r2, [pc, #224]	; (8014db0 <sFLASH_GetInfo+0x118>)
 8014cce:	4293      	cmp	r3, r2
 8014cd0:	d045      	beq.n	8014d5e <sFLASH_GetInfo+0xc6>
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	4a37      	ldr	r2, [pc, #220]	; (8014db4 <sFLASH_GetInfo+0x11c>)
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d157      	bne.n	8014d8a <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8014cda:	4b37      	ldr	r3, [pc, #220]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014cdc:	4a35      	ldr	r2, [pc, #212]	; (8014db4 <sFLASH_GetInfo+0x11c>)
 8014cde:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014ce0:	4b35      	ldr	r3, [pc, #212]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014ce6:	4b34      	ldr	r3, [pc, #208]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014ce8:	2201      	movs	r2, #1
 8014cea:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014cec:	4b32      	ldr	r3, [pc, #200]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014cf2:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014cf4:	4b30      	ldr	r3, [pc, #192]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014cfa:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8014cfc:	4b2e      	ldr	r3, [pc, #184]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d02:	819a      	strh	r2, [r3, #12]
			break;
 8014d04:	e045      	b.n	8014d92 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8014d06:	4b2c      	ldr	r3, [pc, #176]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d08:	4a28      	ldr	r2, [pc, #160]	; (8014dac <sFLASH_GetInfo+0x114>)
 8014d0a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014d0c:	4b2a      	ldr	r3, [pc, #168]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d0e:	2201      	movs	r2, #1
 8014d10:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014d12:	4b29      	ldr	r3, [pc, #164]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d14:	2201      	movs	r2, #1
 8014d16:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014d18:	4b27      	ldr	r3, [pc, #156]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014d1e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014d20:	4b25      	ldr	r3, [pc, #148]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014d26:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8014d28:	4b23      	ldr	r3, [pc, #140]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014d2e:	819a      	strh	r2, [r3, #12]
			break;
 8014d30:	e02f      	b.n	8014d92 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8014d32:	4b21      	ldr	r3, [pc, #132]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d34:	4a1c      	ldr	r2, [pc, #112]	; (8014da8 <sFLASH_GetInfo+0x110>)
 8014d36:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014d38:	4b1f      	ldr	r3, [pc, #124]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014d3e:	4b1e      	ldr	r3, [pc, #120]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d40:	2201      	movs	r2, #1
 8014d42:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014d44:	4b1c      	ldr	r3, [pc, #112]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014d4a:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014d4c:	4b1a      	ldr	r3, [pc, #104]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014d52:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8014d54:	4b18      	ldr	r3, [pc, #96]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014d5a:	819a      	strh	r2, [r3, #12]
			break;
 8014d5c:	e019      	b.n	8014d92 <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8014d5e:	4b16      	ldr	r3, [pc, #88]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d60:	4a13      	ldr	r2, [pc, #76]	; (8014db0 <sFLASH_GetInfo+0x118>)
 8014d62:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014d64:	4b14      	ldr	r3, [pc, #80]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d66:	2201      	movs	r2, #1
 8014d68:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014d6a:	4b13      	ldr	r3, [pc, #76]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014d70:	4b11      	ldr	r3, [pc, #68]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014d76:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014d78:	4b0f      	ldr	r3, [pc, #60]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014d7e:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8014d80:	4b0d      	ldr	r3, [pc, #52]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014d86:	819a      	strh	r2, [r3, #12]
			break;
 8014d88:	e003      	b.n	8014d92 <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8014d8a:	4b0b      	ldr	r3, [pc, #44]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	601a      	str	r2, [r3, #0]
			break;
 8014d90:	bf00      	nop
	}

	return flash_info;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	4a08      	ldr	r2, [pc, #32]	; (8014db8 <sFLASH_GetInfo+0x120>)
 8014d96:	461c      	mov	r4, r3
 8014d98:	4613      	mov	r3, r2
 8014d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	3714      	adds	r7, #20
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd90      	pop	{r4, r7, pc}
 8014da8:	00ef4017 	.word	0x00ef4017
 8014dac:	00ef4016 	.word	0x00ef4016
 8014db0:	00c22016 	.word	0x00c22016
 8014db4:	00ef4015 	.word	0x00ef4015
 8014db8:	200008e4 	.word	0x200008e4

08014dbc <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8014dc0:	4b02      	ldr	r3, [pc, #8]	; (8014dcc <sFLASH_CS_LOW+0x10>)
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	4798      	blx	r3

}
 8014dc6:	bf00      	nop
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	200008d0 	.word	0x200008d0

08014dd0 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8014dd4:	4b02      	ldr	r3, [pc, #8]	; (8014de0 <sFLASH_CS_HIGH+0x10>)
 8014dd6:	691b      	ldr	r3, [r3, #16]
 8014dd8:	4798      	blx	r3
}
 8014dda:	bf00      	nop
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	200008d0 	.word	0x200008d0

08014de4 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8014dec:	f000 f97c 	bl	80150e8 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8014df0:	f7ff ffe4 	bl	8014dbc <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8014df4:	2020      	movs	r0, #32
 8014df6:	f000 f967 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	0c1b      	lsrs	r3, r3, #16
 8014dfe:	b2db      	uxtb	r3, r3
 8014e00:	4618      	mov	r0, r3
 8014e02:	f000 f961 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	0a1b      	lsrs	r3, r3, #8
 8014e0a:	b2db      	uxtb	r3, r3
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f000 f95b 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	4618      	mov	r0, r3
 8014e18:	f000 f956 	bl	80150c8 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8014e1c:	f7ff ffd8 	bl	8014dd0 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8014e20:	f000 f96d 	bl	80150fe <sFLASH_WaitForWriteEnd>
}
 8014e24:	bf00      	nop
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	60f8      	str	r0, [r7, #12]
 8014e34:	60b9      	str	r1, [r7, #8]
 8014e36:	4613      	mov	r3, r2
 8014e38:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8014e3a:	f000 f955 	bl	80150e8 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8014e3e:	f7ff ffbd 	bl	8014dbc <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8014e42:	2002      	movs	r0, #2
 8014e44:	f000 f940 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	0c1b      	lsrs	r3, r3, #16
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f000 f93a 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	0a1b      	lsrs	r3, r3, #8
 8014e58:	b2db      	uxtb	r3, r3
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f000 f934 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	4618      	mov	r0, r3
 8014e66:	f000 f92f 	bl	80150c8 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8014e6a:	e007      	b.n	8014e7c <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	4618      	mov	r0, r3
 8014e72:	f000 f929 	bl	80150c8 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8014e7c:	88fb      	ldrh	r3, [r7, #6]
 8014e7e:	1e5a      	subs	r2, r3, #1
 8014e80:	80fa      	strh	r2, [r7, #6]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d1f2      	bne.n	8014e6c <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8014e86:	f7ff ffa3 	bl	8014dd0 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8014e8a:	f000 f938 	bl	80150fe <sFLASH_WaitForWriteEnd>
}
 8014e8e:	bf00      	nop
 8014e90:	3710      	adds	r7, #16
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b086      	sub	sp, #24
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	60f8      	str	r0, [r7, #12]
 8014e9e:	60b9      	str	r1, [r7, #8]
 8014ea0:	4613      	mov	r3, r2
 8014ea2:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	75fb      	strb	r3, [r7, #23]
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	75bb      	strb	r3, [r7, #22]
 8014eac:	2300      	movs	r3, #0
 8014eae:	757b      	strb	r3, [r7, #21]
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	753b      	strb	r3, [r7, #20]
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8014ebc:	7d7b      	ldrb	r3, [r7, #21]
 8014ebe:	425b      	negs	r3, r3
 8014ec0:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8014ec2:	88fb      	ldrh	r3, [r7, #6]
 8014ec4:	0a1b      	lsrs	r3, r3, #8
 8014ec6:	b29b      	uxth	r3, r3
 8014ec8:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8014eca:	88fb      	ldrh	r3, [r7, #6]
 8014ecc:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8014ece:	7d7b      	ldrb	r3, [r7, #21]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d124      	bne.n	8014f1e <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8014ed4:	7dfb      	ldrb	r3, [r7, #23]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d114      	bne.n	8014f04 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8014eda:	88fb      	ldrh	r3, [r7, #6]
 8014edc:	461a      	mov	r2, r3
 8014ede:	68b9      	ldr	r1, [r7, #8]
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	f7ff ffa3 	bl	8014e2c <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8014ee6:	e07b      	b.n	8014fe0 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8014ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014eec:	68b9      	ldr	r1, [r7, #8]
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f7ff ff9c 	bl	8014e2c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014efa:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014f02:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8014f04:	7dfb      	ldrb	r3, [r7, #23]
 8014f06:	1e5a      	subs	r2, r3, #1
 8014f08:	75fa      	strb	r2, [r7, #23]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d1ec      	bne.n	8014ee8 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8014f0e:	7dbb      	ldrb	r3, [r7, #22]
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	461a      	mov	r2, r3
 8014f14:	68b9      	ldr	r1, [r7, #8]
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f7ff ff88 	bl	8014e2c <sFLASH_WritePage>
}
 8014f1c:	e060      	b.n	8014fe0 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d125      	bne.n	8014f70 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8014f24:	7dba      	ldrb	r2, [r7, #22]
 8014f26:	7d3b      	ldrb	r3, [r7, #20]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d91a      	bls.n	8014f62 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8014f2c:	7dba      	ldrb	r2, [r7, #22]
 8014f2e:	7d3b      	ldrb	r3, [r7, #20]
 8014f30:	1ad3      	subs	r3, r2, r3
 8014f32:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8014f34:	7d3b      	ldrb	r3, [r7, #20]
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	461a      	mov	r2, r3
 8014f3a:	68b9      	ldr	r1, [r7, #8]
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	f7ff ff75 	bl	8014e2c <sFLASH_WritePage>
        WriteAddr +=  count;
 8014f42:	7d3b      	ldrb	r3, [r7, #20]
 8014f44:	68ba      	ldr	r2, [r7, #8]
 8014f46:	4413      	add	r3, r2
 8014f48:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8014f4a:	7d3b      	ldrb	r3, [r7, #20]
 8014f4c:	68fa      	ldr	r2, [r7, #12]
 8014f4e:	4413      	add	r3, r2
 8014f50:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8014f52:	7cfb      	ldrb	r3, [r7, #19]
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	461a      	mov	r2, r3
 8014f58:	68b9      	ldr	r1, [r7, #8]
 8014f5a:	68f8      	ldr	r0, [r7, #12]
 8014f5c:	f7ff ff66 	bl	8014e2c <sFLASH_WritePage>
}
 8014f60:	e03e      	b.n	8014fe0 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8014f62:	88fb      	ldrh	r3, [r7, #6]
 8014f64:	461a      	mov	r2, r3
 8014f66:	68b9      	ldr	r1, [r7, #8]
 8014f68:	68f8      	ldr	r0, [r7, #12]
 8014f6a:	f7ff ff5f 	bl	8014e2c <sFLASH_WritePage>
}
 8014f6e:	e037      	b.n	8014fe0 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8014f70:	7d3b      	ldrb	r3, [r7, #20]
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	88fa      	ldrh	r2, [r7, #6]
 8014f76:	1ad3      	subs	r3, r2, r3
 8014f78:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8014f7a:	88fb      	ldrh	r3, [r7, #6]
 8014f7c:	0a1b      	lsrs	r3, r3, #8
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8014f82:	88fb      	ldrh	r3, [r7, #6]
 8014f84:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8014f86:	7d3b      	ldrb	r3, [r7, #20]
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	461a      	mov	r2, r3
 8014f8c:	68b9      	ldr	r1, [r7, #8]
 8014f8e:	68f8      	ldr	r0, [r7, #12]
 8014f90:	f7ff ff4c 	bl	8014e2c <sFLASH_WritePage>
      WriteAddr +=  count;
 8014f94:	7d3b      	ldrb	r3, [r7, #20]
 8014f96:	68ba      	ldr	r2, [r7, #8]
 8014f98:	4413      	add	r3, r2
 8014f9a:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8014f9c:	7d3b      	ldrb	r3, [r7, #20]
 8014f9e:	68fa      	ldr	r2, [r7, #12]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8014fa4:	e00d      	b.n	8014fc2 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8014fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014faa:	68b9      	ldr	r1, [r7, #8]
 8014fac:	68f8      	ldr	r0, [r7, #12]
 8014fae:	f7ff ff3d 	bl	8014e2c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014fb8:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014fc0:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8014fc2:	7dfb      	ldrb	r3, [r7, #23]
 8014fc4:	1e5a      	subs	r2, r3, #1
 8014fc6:	75fa      	strb	r2, [r7, #23]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d1ec      	bne.n	8014fa6 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8014fcc:	7dbb      	ldrb	r3, [r7, #22]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d006      	beq.n	8014fe0 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8014fd2:	7dbb      	ldrb	r3, [r7, #22]
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	461a      	mov	r2, r3
 8014fd8:	68b9      	ldr	r1, [r7, #8]
 8014fda:	68f8      	ldr	r0, [r7, #12]
 8014fdc:	f7ff ff26 	bl	8014e2c <sFLASH_WritePage>
}
 8014fe0:	bf00      	nop
 8014fe2:	3718      	adds	r7, #24
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8014ff6:	f7ff fee1 	bl	8014dbc <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 8014ffa:	2003      	movs	r0, #3
 8014ffc:	f000 f864 	bl	80150c8 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	0c1b      	lsrs	r3, r3, #16
 8015004:	b2db      	uxtb	r3, r3
 8015006:	4618      	mov	r0, r3
 8015008:	f000 f85e 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	0a1b      	lsrs	r3, r3, #8
 8015010:	b2db      	uxtb	r3, r3
 8015012:	4618      	mov	r0, r3
 8015014:	f000 f858 	bl	80150c8 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8015018:	68bb      	ldr	r3, [r7, #8]
 801501a:	b2db      	uxtb	r3, r3
 801501c:	4618      	mov	r0, r3
 801501e:	f000 f853 	bl	80150c8 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 8015022:	e008      	b.n	8015036 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 8015024:	f000 f846 	bl	80150b4 <sFLASH_ReadByte>
 8015028:	4603      	mov	r3, r0
 801502a:	461a      	mov	r2, r3
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	3301      	adds	r3, #1
 8015034:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 8015036:	88fb      	ldrh	r3, [r7, #6]
 8015038:	1e5a      	subs	r2, r3, #1
 801503a:	80fa      	strh	r2, [r7, #6]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d1f1      	bne.n	8015024 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015040:	f7ff fec6 	bl	8014dd0 <sFLASH_CS_HIGH>
}
 8015044:	bf00      	nop
 8015046:	3710      	adds	r7, #16
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b084      	sub	sp, #16
 8015050:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8015052:	2300      	movs	r3, #0
 8015054:	60fb      	str	r3, [r7, #12]
 8015056:	2300      	movs	r3, #0
 8015058:	60bb      	str	r3, [r7, #8]
 801505a:	2300      	movs	r3, #0
 801505c:	607b      	str	r3, [r7, #4]
 801505e:	2300      	movs	r3, #0
 8015060:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015062:	f7ff feab 	bl	8014dbc <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015066:	f7ff feb3 	bl	8014dd0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801506a:	f7ff fea7 	bl	8014dbc <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801506e:	f7ff feaf 	bl	8014dd0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015072:	f7ff fea3 	bl	8014dbc <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8015076:	209f      	movs	r0, #159	; 0x9f
 8015078:	f000 f826 	bl	80150c8 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 801507c:	f000 f81a 	bl	80150b4 <sFLASH_ReadByte>
 8015080:	4603      	mov	r3, r0
 8015082:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8015084:	f000 f816 	bl	80150b4 <sFLASH_ReadByte>
 8015088:	4603      	mov	r3, r0
 801508a:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 801508c:	f000 f812 	bl	80150b4 <sFLASH_ReadByte>
 8015090:	4603      	mov	r3, r0
 8015092:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015094:	f7ff fe9c 	bl	8014dd0 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015098:	68bb      	ldr	r3, [r7, #8]
 801509a:	041a      	lsls	r2, r3, #16
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	021b      	lsls	r3, r3, #8
 80150a0:	4313      	orrs	r3, r2
 80150a2:	683a      	ldr	r2, [r7, #0]
 80150a4:	4313      	orrs	r3, r2
 80150a6:	60fb      	str	r3, [r7, #12]

  return Temp;
 80150a8:	68fb      	ldr	r3, [r7, #12]
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
	...

080150b4 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 80150b8:	4b02      	ldr	r3, [pc, #8]	; (80150c4 <sFLASH_ReadByte+0x10>)
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	4798      	blx	r3
 80150be:	4603      	mov	r3, r0
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	200008d0 	.word	0x200008d0

080150c8 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4603      	mov	r3, r0
 80150d0:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 80150d2:	4b04      	ldr	r3, [pc, #16]	; (80150e4 <sFLASH_SendByte+0x1c>)
 80150d4:	689b      	ldr	r3, [r3, #8]
 80150d6:	79fa      	ldrb	r2, [r7, #7]
 80150d8:	4610      	mov	r0, r2
 80150da:	4798      	blx	r3
}
 80150dc:	bf00      	nop
 80150de:	3708      	adds	r7, #8
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}
 80150e4:	200008d0 	.word	0x200008d0

080150e8 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80150ec:	f7ff fe66 	bl	8014dbc <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80150f0:	2006      	movs	r0, #6
 80150f2:	f7ff ffe9 	bl	80150c8 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80150f6:	f7ff fe6b 	bl	8014dd0 <sFLASH_CS_HIGH>
}
 80150fa:	bf00      	nop
 80150fc:	bd80      	pop	{r7, pc}

080150fe <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b082      	sub	sp, #8
 8015102:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8015104:	2300      	movs	r3, #0
 8015106:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015108:	f7ff fe58 	bl	8014dbc <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 801510c:	2005      	movs	r0, #5
 801510e:	f7ff ffdb 	bl	80150c8 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 8015112:	f7ff ffcf 	bl	80150b4 <sFLASH_ReadByte>
 8015116:	4603      	mov	r3, r0
 8015118:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 801511a:	79fb      	ldrb	r3, [r7, #7]
 801511c:	f003 0301 	and.w	r3, r3, #1
 8015120:	2b00      	cmp	r3, #0
 8015122:	d1f6      	bne.n	8015112 <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015124:	f7ff fe54 	bl	8014dd0 <sFLASH_CS_HIGH>
}
 8015128:	bf00      	nop
 801512a:	3708      	adds	r7, #8
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 8015130:	b084      	sub	sp, #16
 8015132:	b580      	push	{r7, lr}
 8015134:	af00      	add	r7, sp, #0
 8015136:	f107 0c08 	add.w	ip, r7, #8
 801513a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 801513e:	4b07      	ldr	r3, [pc, #28]	; (801515c <SPI_flash_set+0x2c>)
 8015140:	4618      	mov	r0, r3
 8015142:	f107 0308 	add.w	r3, r7, #8
 8015146:	2258      	movs	r2, #88	; 0x58
 8015148:	4619      	mov	r1, r3
 801514a:	f018 faea 	bl	802d722 <memcpy>
}
 801514e:	bf00      	nop
 8015150:	46bd      	mov	sp, r7
 8015152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015156:	b004      	add	sp, #16
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop
 801515c:	200008f4 	.word	0x200008f4

08015160 <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 8015166:	1df9      	adds	r1, r7, #7
 8015168:	f241 3388 	movw	r3, #5000	; 0x1388
 801516c:	2201      	movs	r2, #1
 801516e:	4804      	ldr	r0, [pc, #16]	; (8015180 <SPI_flash_read_byte+0x20>)
 8015170:	f001 fa38 	bl	80165e4 <HAL_SPI_Receive>
	return byte;
 8015174:	79fb      	ldrb	r3, [r7, #7]
}
 8015176:	4618      	mov	r0, r3
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}
 801517e:	bf00      	nop
 8015180:	200008f4 	.word	0x200008f4

08015184 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	4603      	mov	r3, r0
 801518c:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 801518e:	1df9      	adds	r1, r7, #7
 8015190:	f241 3388 	movw	r3, #5000	; 0x1388
 8015194:	2201      	movs	r2, #1
 8015196:	4803      	ldr	r0, [pc, #12]	; (80151a4 <SPI_flash_send_byte+0x20>)
 8015198:	f001 f8e1 	bl	801635e <HAL_SPI_Transmit>

}
 801519c:	bf00      	nop
 801519e:	3708      	adds	r7, #8
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	200008f4 	.word	0x200008f4

080151a8 <SPI_flash_select>:

void SPI_flash_select(void){
 80151a8:	b580      	push	{r7, lr}
 80151aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80151ac:	2200      	movs	r2, #0
 80151ae:	2110      	movs	r1, #16
 80151b0:	4802      	ldr	r0, [pc, #8]	; (80151bc <SPI_flash_select+0x14>)
 80151b2:	f000 fb67 	bl	8015884 <HAL_GPIO_WritePin>
}
 80151b6:	bf00      	nop
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	40020000 	.word	0x40020000

080151c0 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 80151c0:	b580      	push	{r7, lr}
 80151c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80151c4:	2201      	movs	r2, #1
 80151c6:	2110      	movs	r1, #16
 80151c8:	4802      	ldr	r0, [pc, #8]	; (80151d4 <SPI_flash_deselect+0x14>)
 80151ca:	f000 fb5b 	bl	8015884 <HAL_GPIO_WritePin>
}
 80151ce:	bf00      	nop
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	40020000 	.word	0x40020000

080151d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80151dc:	4b0e      	ldr	r3, [pc, #56]	; (8015218 <HAL_Init+0x40>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	4a0d      	ldr	r2, [pc, #52]	; (8015218 <HAL_Init+0x40>)
 80151e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80151e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80151e8:	4b0b      	ldr	r3, [pc, #44]	; (8015218 <HAL_Init+0x40>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	4a0a      	ldr	r2, [pc, #40]	; (8015218 <HAL_Init+0x40>)
 80151ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80151f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80151f4:	4b08      	ldr	r3, [pc, #32]	; (8015218 <HAL_Init+0x40>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	4a07      	ldr	r2, [pc, #28]	; (8015218 <HAL_Init+0x40>)
 80151fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015200:	2003      	movs	r0, #3
 8015202:	f000 f8d8 	bl	80153b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015206:	200f      	movs	r0, #15
 8015208:	f7fd fb5a 	bl	80128c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801520c:	f7fd fa3c 	bl	8012688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015210:	2300      	movs	r3, #0
}
 8015212:	4618      	mov	r0, r3
 8015214:	bd80      	pop	{r7, pc}
 8015216:	bf00      	nop
 8015218:	40023c00 	.word	0x40023c00

0801521c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801521c:	b480      	push	{r7}
 801521e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015220:	4b06      	ldr	r3, [pc, #24]	; (801523c <HAL_IncTick+0x20>)
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	461a      	mov	r2, r3
 8015226:	4b06      	ldr	r3, [pc, #24]	; (8015240 <HAL_IncTick+0x24>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	4413      	add	r3, r2
 801522c:	4a04      	ldr	r2, [pc, #16]	; (8015240 <HAL_IncTick+0x24>)
 801522e:	6013      	str	r3, [r2, #0]
}
 8015230:	bf00      	nop
 8015232:	46bd      	mov	sp, r7
 8015234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015238:	4770      	bx	lr
 801523a:	bf00      	nop
 801523c:	200000c0 	.word	0x200000c0
 8015240:	2000094c 	.word	0x2000094c

08015244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015244:	b480      	push	{r7}
 8015246:	af00      	add	r7, sp, #0
  return uwTick;
 8015248:	4b03      	ldr	r3, [pc, #12]	; (8015258 <HAL_GetTick+0x14>)
 801524a:	681b      	ldr	r3, [r3, #0]
}
 801524c:	4618      	mov	r0, r3
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr
 8015256:	bf00      	nop
 8015258:	2000094c 	.word	0x2000094c

0801525c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801525c:	b480      	push	{r7}
 801525e:	b085      	sub	sp, #20
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f003 0307 	and.w	r3, r3, #7
 801526a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801526c:	4b0c      	ldr	r3, [pc, #48]	; (80152a0 <__NVIC_SetPriorityGrouping+0x44>)
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015272:	68ba      	ldr	r2, [r7, #8]
 8015274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015278:	4013      	ands	r3, r2
 801527a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801528c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801528e:	4a04      	ldr	r2, [pc, #16]	; (80152a0 <__NVIC_SetPriorityGrouping+0x44>)
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	60d3      	str	r3, [r2, #12]
}
 8015294:	bf00      	nop
 8015296:	3714      	adds	r7, #20
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr
 80152a0:	e000ed00 	.word	0xe000ed00

080152a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80152a4:	b480      	push	{r7}
 80152a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80152a8:	4b04      	ldr	r3, [pc, #16]	; (80152bc <__NVIC_GetPriorityGrouping+0x18>)
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	0a1b      	lsrs	r3, r3, #8
 80152ae:	f003 0307 	and.w	r3, r3, #7
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	46bd      	mov	sp, r7
 80152b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ba:	4770      	bx	lr
 80152bc:	e000ed00 	.word	0xe000ed00

080152c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b083      	sub	sp, #12
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	4603      	mov	r3, r0
 80152c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80152ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	db0b      	blt.n	80152ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80152d2:	79fb      	ldrb	r3, [r7, #7]
 80152d4:	f003 021f 	and.w	r2, r3, #31
 80152d8:	4907      	ldr	r1, [pc, #28]	; (80152f8 <__NVIC_EnableIRQ+0x38>)
 80152da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152de:	095b      	lsrs	r3, r3, #5
 80152e0:	2001      	movs	r0, #1
 80152e2:	fa00 f202 	lsl.w	r2, r0, r2
 80152e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80152ea:	bf00      	nop
 80152ec:	370c      	adds	r7, #12
 80152ee:	46bd      	mov	sp, r7
 80152f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop
 80152f8:	e000e100 	.word	0xe000e100

080152fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80152fc:	b480      	push	{r7}
 80152fe:	b083      	sub	sp, #12
 8015300:	af00      	add	r7, sp, #0
 8015302:	4603      	mov	r3, r0
 8015304:	6039      	str	r1, [r7, #0]
 8015306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801530c:	2b00      	cmp	r3, #0
 801530e:	db0a      	blt.n	8015326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	b2da      	uxtb	r2, r3
 8015314:	490c      	ldr	r1, [pc, #48]	; (8015348 <__NVIC_SetPriority+0x4c>)
 8015316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801531a:	0112      	lsls	r2, r2, #4
 801531c:	b2d2      	uxtb	r2, r2
 801531e:	440b      	add	r3, r1
 8015320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015324:	e00a      	b.n	801533c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	b2da      	uxtb	r2, r3
 801532a:	4908      	ldr	r1, [pc, #32]	; (801534c <__NVIC_SetPriority+0x50>)
 801532c:	79fb      	ldrb	r3, [r7, #7]
 801532e:	f003 030f 	and.w	r3, r3, #15
 8015332:	3b04      	subs	r3, #4
 8015334:	0112      	lsls	r2, r2, #4
 8015336:	b2d2      	uxtb	r2, r2
 8015338:	440b      	add	r3, r1
 801533a:	761a      	strb	r2, [r3, #24]
}
 801533c:	bf00      	nop
 801533e:	370c      	adds	r7, #12
 8015340:	46bd      	mov	sp, r7
 8015342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015346:	4770      	bx	lr
 8015348:	e000e100 	.word	0xe000e100
 801534c:	e000ed00 	.word	0xe000ed00

08015350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015350:	b480      	push	{r7}
 8015352:	b089      	sub	sp, #36	; 0x24
 8015354:	af00      	add	r7, sp, #0
 8015356:	60f8      	str	r0, [r7, #12]
 8015358:	60b9      	str	r1, [r7, #8]
 801535a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f003 0307 	and.w	r3, r3, #7
 8015362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	f1c3 0307 	rsb	r3, r3, #7
 801536a:	2b04      	cmp	r3, #4
 801536c:	bf28      	it	cs
 801536e:	2304      	movcs	r3, #4
 8015370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	3304      	adds	r3, #4
 8015376:	2b06      	cmp	r3, #6
 8015378:	d902      	bls.n	8015380 <NVIC_EncodePriority+0x30>
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	3b03      	subs	r3, #3
 801537e:	e000      	b.n	8015382 <NVIC_EncodePriority+0x32>
 8015380:	2300      	movs	r3, #0
 8015382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015384:	f04f 32ff 	mov.w	r2, #4294967295
 8015388:	69bb      	ldr	r3, [r7, #24]
 801538a:	fa02 f303 	lsl.w	r3, r2, r3
 801538e:	43da      	mvns	r2, r3
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	401a      	ands	r2, r3
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015398:	f04f 31ff 	mov.w	r1, #4294967295
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	fa01 f303 	lsl.w	r3, r1, r3
 80153a2:	43d9      	mvns	r1, r3
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80153a8:	4313      	orrs	r3, r2
         );
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3724      	adds	r7, #36	; 0x24
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr

080153b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b082      	sub	sp, #8
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f7ff ff4c 	bl	801525c <__NVIC_SetPriorityGrouping>
}
 80153c4:	bf00      	nop
 80153c6:	3708      	adds	r7, #8
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}

080153cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b086      	sub	sp, #24
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	4603      	mov	r3, r0
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
 80153d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80153da:	2300      	movs	r3, #0
 80153dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80153de:	f7ff ff61 	bl	80152a4 <__NVIC_GetPriorityGrouping>
 80153e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80153e4:	687a      	ldr	r2, [r7, #4]
 80153e6:	68b9      	ldr	r1, [r7, #8]
 80153e8:	6978      	ldr	r0, [r7, #20]
 80153ea:	f7ff ffb1 	bl	8015350 <NVIC_EncodePriority>
 80153ee:	4602      	mov	r2, r0
 80153f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153f4:	4611      	mov	r1, r2
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7ff ff80 	bl	80152fc <__NVIC_SetPriority>
}
 80153fc:	bf00      	nop
 80153fe:	3718      	adds	r7, #24
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
 801540a:	4603      	mov	r3, r0
 801540c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015412:	4618      	mov	r0, r3
 8015414:	f7ff ff54 	bl	80152c0 <__NVIC_EnableIRQ>
}
 8015418:	bf00      	nop
 801541a:	3708      	adds	r7, #8
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d101      	bne.n	8015432 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801542e:	2301      	movs	r3, #1
 8015430:	e00e      	b.n	8015450 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	795b      	ldrb	r3, [r3, #5]
 8015436:	b2db      	uxtb	r3, r3
 8015438:	2b00      	cmp	r3, #0
 801543a:	d105      	bne.n	8015448 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2200      	movs	r2, #0
 8015440:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f7fd f94c 	bl	80126e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2201      	movs	r2, #1
 801544c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 801544e:	2300      	movs	r3, #0
}
 8015450:	4618      	mov	r0, r3
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b084      	sub	sp, #16
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015464:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8015466:	f7ff feed 	bl	8015244 <HAL_GetTick>
 801546a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015472:	b2db      	uxtb	r3, r3
 8015474:	2b02      	cmp	r3, #2
 8015476:	d008      	beq.n	801548a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2280      	movs	r2, #128	; 0x80
 801547c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2200      	movs	r2, #0
 8015482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8015486:	2301      	movs	r3, #1
 8015488:	e052      	b.n	8015530 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	f022 0216 	bic.w	r2, r2, #22
 8015498:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	695a      	ldr	r2, [r3, #20]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80154a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d103      	bne.n	80154ba <HAL_DMA_Abort+0x62>
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d007      	beq.n	80154ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	681a      	ldr	r2, [r3, #0]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f022 0208 	bic.w	r2, r2, #8
 80154c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	681a      	ldr	r2, [r3, #0]
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	f022 0201 	bic.w	r2, r2, #1
 80154d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80154da:	e013      	b.n	8015504 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80154dc:	f7ff feb2 	bl	8015244 <HAL_GetTick>
 80154e0:	4602      	mov	r2, r0
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	1ad3      	subs	r3, r2, r3
 80154e6:	2b05      	cmp	r3, #5
 80154e8:	d90c      	bls.n	8015504 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2220      	movs	r2, #32
 80154ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2203      	movs	r2, #3
 80154f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2200      	movs	r2, #0
 80154fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8015500:	2303      	movs	r3, #3
 8015502:	e015      	b.n	8015530 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	f003 0301 	and.w	r3, r3, #1
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1e4      	bne.n	80154dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015516:	223f      	movs	r2, #63	; 0x3f
 8015518:	409a      	lsls	r2, r3
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2201      	movs	r2, #1
 8015522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2200      	movs	r2, #0
 801552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801552e:	2300      	movs	r3, #0
}
 8015530:	4618      	mov	r0, r3
 8015532:	3710      	adds	r7, #16
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}

08015538 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015538:	b480      	push	{r7}
 801553a:	b083      	sub	sp, #12
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015546:	b2db      	uxtb	r3, r3
 8015548:	2b02      	cmp	r3, #2
 801554a:	d004      	beq.n	8015556 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2280      	movs	r2, #128	; 0x80
 8015550:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015552:	2301      	movs	r3, #1
 8015554:	e00c      	b.n	8015570 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2205      	movs	r2, #5
 801555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f022 0201 	bic.w	r2, r2, #1
 801556c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801556e:	2300      	movs	r3, #0
}
 8015570:	4618      	mov	r0, r3
 8015572:	370c      	adds	r7, #12
 8015574:	46bd      	mov	sp, r7
 8015576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557a:	4770      	bx	lr

0801557c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801557c:	b480      	push	{r7}
 801557e:	b089      	sub	sp, #36	; 0x24
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015586:	2300      	movs	r3, #0
 8015588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801558a:	2300      	movs	r3, #0
 801558c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801558e:	2300      	movs	r3, #0
 8015590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015592:	2300      	movs	r3, #0
 8015594:	61fb      	str	r3, [r7, #28]
 8015596:	e159      	b.n	801584c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015598:	2201      	movs	r2, #1
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	fa02 f303 	lsl.w	r3, r2, r3
 80155a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	697a      	ldr	r2, [r7, #20]
 80155a8:	4013      	ands	r3, r2
 80155aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80155ac:	693a      	ldr	r2, [r7, #16]
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	f040 8148 	bne.w	8015846 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	f003 0303 	and.w	r3, r3, #3
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d005      	beq.n	80155ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80155ca:	2b02      	cmp	r3, #2
 80155cc:	d130      	bne.n	8015630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	689b      	ldr	r3, [r3, #8]
 80155d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	005b      	lsls	r3, r3, #1
 80155d8:	2203      	movs	r2, #3
 80155da:	fa02 f303 	lsl.w	r3, r2, r3
 80155de:	43db      	mvns	r3, r3
 80155e0:	69ba      	ldr	r2, [r7, #24]
 80155e2:	4013      	ands	r3, r2
 80155e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	68da      	ldr	r2, [r3, #12]
 80155ea:	69fb      	ldr	r3, [r7, #28]
 80155ec:	005b      	lsls	r3, r3, #1
 80155ee:	fa02 f303 	lsl.w	r3, r2, r3
 80155f2:	69ba      	ldr	r2, [r7, #24]
 80155f4:	4313      	orrs	r3, r2
 80155f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	69ba      	ldr	r2, [r7, #24]
 80155fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015604:	2201      	movs	r2, #1
 8015606:	69fb      	ldr	r3, [r7, #28]
 8015608:	fa02 f303 	lsl.w	r3, r2, r3
 801560c:	43db      	mvns	r3, r3
 801560e:	69ba      	ldr	r2, [r7, #24]
 8015610:	4013      	ands	r3, r2
 8015612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	091b      	lsrs	r3, r3, #4
 801561a:	f003 0201 	and.w	r2, r3, #1
 801561e:	69fb      	ldr	r3, [r7, #28]
 8015620:	fa02 f303 	lsl.w	r3, r2, r3
 8015624:	69ba      	ldr	r2, [r7, #24]
 8015626:	4313      	orrs	r3, r2
 8015628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	69ba      	ldr	r2, [r7, #24]
 801562e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	685b      	ldr	r3, [r3, #4]
 8015634:	f003 0303 	and.w	r3, r3, #3
 8015638:	2b03      	cmp	r3, #3
 801563a:	d017      	beq.n	801566c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	68db      	ldr	r3, [r3, #12]
 8015640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	005b      	lsls	r3, r3, #1
 8015646:	2203      	movs	r2, #3
 8015648:	fa02 f303 	lsl.w	r3, r2, r3
 801564c:	43db      	mvns	r3, r3
 801564e:	69ba      	ldr	r2, [r7, #24]
 8015650:	4013      	ands	r3, r2
 8015652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	689a      	ldr	r2, [r3, #8]
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	005b      	lsls	r3, r3, #1
 801565c:	fa02 f303 	lsl.w	r3, r2, r3
 8015660:	69ba      	ldr	r2, [r7, #24]
 8015662:	4313      	orrs	r3, r2
 8015664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	69ba      	ldr	r2, [r7, #24]
 801566a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	685b      	ldr	r3, [r3, #4]
 8015670:	f003 0303 	and.w	r3, r3, #3
 8015674:	2b02      	cmp	r3, #2
 8015676:	d123      	bne.n	80156c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015678:	69fb      	ldr	r3, [r7, #28]
 801567a:	08da      	lsrs	r2, r3, #3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	3208      	adds	r2, #8
 8015680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	f003 0307 	and.w	r3, r3, #7
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	220f      	movs	r2, #15
 8015690:	fa02 f303 	lsl.w	r3, r2, r3
 8015694:	43db      	mvns	r3, r3
 8015696:	69ba      	ldr	r2, [r7, #24]
 8015698:	4013      	ands	r3, r2
 801569a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	691a      	ldr	r2, [r3, #16]
 80156a0:	69fb      	ldr	r3, [r7, #28]
 80156a2:	f003 0307 	and.w	r3, r3, #7
 80156a6:	009b      	lsls	r3, r3, #2
 80156a8:	fa02 f303 	lsl.w	r3, r2, r3
 80156ac:	69ba      	ldr	r2, [r7, #24]
 80156ae:	4313      	orrs	r3, r2
 80156b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	08da      	lsrs	r2, r3, #3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	3208      	adds	r2, #8
 80156ba:	69b9      	ldr	r1, [r7, #24]
 80156bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80156c6:	69fb      	ldr	r3, [r7, #28]
 80156c8:	005b      	lsls	r3, r3, #1
 80156ca:	2203      	movs	r2, #3
 80156cc:	fa02 f303 	lsl.w	r3, r2, r3
 80156d0:	43db      	mvns	r3, r3
 80156d2:	69ba      	ldr	r2, [r7, #24]
 80156d4:	4013      	ands	r3, r2
 80156d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	f003 0203 	and.w	r2, r3, #3
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	005b      	lsls	r3, r3, #1
 80156e4:	fa02 f303 	lsl.w	r3, r2, r3
 80156e8:	69ba      	ldr	r2, [r7, #24]
 80156ea:	4313      	orrs	r3, r2
 80156ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	69ba      	ldr	r2, [r7, #24]
 80156f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	f000 80a2 	beq.w	8015846 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015702:	2300      	movs	r3, #0
 8015704:	60fb      	str	r3, [r7, #12]
 8015706:	4b57      	ldr	r3, [pc, #348]	; (8015864 <HAL_GPIO_Init+0x2e8>)
 8015708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801570a:	4a56      	ldr	r2, [pc, #344]	; (8015864 <HAL_GPIO_Init+0x2e8>)
 801570c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015710:	6453      	str	r3, [r2, #68]	; 0x44
 8015712:	4b54      	ldr	r3, [pc, #336]	; (8015864 <HAL_GPIO_Init+0x2e8>)
 8015714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801571a:	60fb      	str	r3, [r7, #12]
 801571c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801571e:	4a52      	ldr	r2, [pc, #328]	; (8015868 <HAL_GPIO_Init+0x2ec>)
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	089b      	lsrs	r3, r3, #2
 8015724:	3302      	adds	r3, #2
 8015726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	f003 0303 	and.w	r3, r3, #3
 8015732:	009b      	lsls	r3, r3, #2
 8015734:	220f      	movs	r2, #15
 8015736:	fa02 f303 	lsl.w	r3, r2, r3
 801573a:	43db      	mvns	r3, r3
 801573c:	69ba      	ldr	r2, [r7, #24]
 801573e:	4013      	ands	r3, r2
 8015740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	4a49      	ldr	r2, [pc, #292]	; (801586c <HAL_GPIO_Init+0x2f0>)
 8015746:	4293      	cmp	r3, r2
 8015748:	d019      	beq.n	801577e <HAL_GPIO_Init+0x202>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	4a48      	ldr	r2, [pc, #288]	; (8015870 <HAL_GPIO_Init+0x2f4>)
 801574e:	4293      	cmp	r3, r2
 8015750:	d013      	beq.n	801577a <HAL_GPIO_Init+0x1fe>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4a47      	ldr	r2, [pc, #284]	; (8015874 <HAL_GPIO_Init+0x2f8>)
 8015756:	4293      	cmp	r3, r2
 8015758:	d00d      	beq.n	8015776 <HAL_GPIO_Init+0x1fa>
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4a46      	ldr	r2, [pc, #280]	; (8015878 <HAL_GPIO_Init+0x2fc>)
 801575e:	4293      	cmp	r3, r2
 8015760:	d007      	beq.n	8015772 <HAL_GPIO_Init+0x1f6>
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	4a45      	ldr	r2, [pc, #276]	; (801587c <HAL_GPIO_Init+0x300>)
 8015766:	4293      	cmp	r3, r2
 8015768:	d101      	bne.n	801576e <HAL_GPIO_Init+0x1f2>
 801576a:	2304      	movs	r3, #4
 801576c:	e008      	b.n	8015780 <HAL_GPIO_Init+0x204>
 801576e:	2307      	movs	r3, #7
 8015770:	e006      	b.n	8015780 <HAL_GPIO_Init+0x204>
 8015772:	2303      	movs	r3, #3
 8015774:	e004      	b.n	8015780 <HAL_GPIO_Init+0x204>
 8015776:	2302      	movs	r3, #2
 8015778:	e002      	b.n	8015780 <HAL_GPIO_Init+0x204>
 801577a:	2301      	movs	r3, #1
 801577c:	e000      	b.n	8015780 <HAL_GPIO_Init+0x204>
 801577e:	2300      	movs	r3, #0
 8015780:	69fa      	ldr	r2, [r7, #28]
 8015782:	f002 0203 	and.w	r2, r2, #3
 8015786:	0092      	lsls	r2, r2, #2
 8015788:	4093      	lsls	r3, r2
 801578a:	69ba      	ldr	r2, [r7, #24]
 801578c:	4313      	orrs	r3, r2
 801578e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015790:	4935      	ldr	r1, [pc, #212]	; (8015868 <HAL_GPIO_Init+0x2ec>)
 8015792:	69fb      	ldr	r3, [r7, #28]
 8015794:	089b      	lsrs	r3, r3, #2
 8015796:	3302      	adds	r3, #2
 8015798:	69ba      	ldr	r2, [r7, #24]
 801579a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801579e:	4b38      	ldr	r3, [pc, #224]	; (8015880 <HAL_GPIO_Init+0x304>)
 80157a0:	689b      	ldr	r3, [r3, #8]
 80157a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	43db      	mvns	r3, r3
 80157a8:	69ba      	ldr	r2, [r7, #24]
 80157aa:	4013      	ands	r3, r2
 80157ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	685b      	ldr	r3, [r3, #4]
 80157b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d003      	beq.n	80157c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80157ba:	69ba      	ldr	r2, [r7, #24]
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	4313      	orrs	r3, r2
 80157c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80157c2:	4a2f      	ldr	r2, [pc, #188]	; (8015880 <HAL_GPIO_Init+0x304>)
 80157c4:	69bb      	ldr	r3, [r7, #24]
 80157c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80157c8:	4b2d      	ldr	r3, [pc, #180]	; (8015880 <HAL_GPIO_Init+0x304>)
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	43db      	mvns	r3, r3
 80157d2:	69ba      	ldr	r2, [r7, #24]
 80157d4:	4013      	ands	r3, r2
 80157d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	685b      	ldr	r3, [r3, #4]
 80157dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d003      	beq.n	80157ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80157e4:	69ba      	ldr	r2, [r7, #24]
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	4313      	orrs	r3, r2
 80157ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80157ec:	4a24      	ldr	r2, [pc, #144]	; (8015880 <HAL_GPIO_Init+0x304>)
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80157f2:	4b23      	ldr	r3, [pc, #140]	; (8015880 <HAL_GPIO_Init+0x304>)
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	43db      	mvns	r3, r3
 80157fc:	69ba      	ldr	r2, [r7, #24]
 80157fe:	4013      	ands	r3, r2
 8015800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801580a:	2b00      	cmp	r3, #0
 801580c:	d003      	beq.n	8015816 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801580e:	69ba      	ldr	r2, [r7, #24]
 8015810:	693b      	ldr	r3, [r7, #16]
 8015812:	4313      	orrs	r3, r2
 8015814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015816:	4a1a      	ldr	r2, [pc, #104]	; (8015880 <HAL_GPIO_Init+0x304>)
 8015818:	69bb      	ldr	r3, [r7, #24]
 801581a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801581c:	4b18      	ldr	r3, [pc, #96]	; (8015880 <HAL_GPIO_Init+0x304>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	43db      	mvns	r3, r3
 8015826:	69ba      	ldr	r2, [r7, #24]
 8015828:	4013      	ands	r3, r2
 801582a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015834:	2b00      	cmp	r3, #0
 8015836:	d003      	beq.n	8015840 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015838:	69ba      	ldr	r2, [r7, #24]
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	4313      	orrs	r3, r2
 801583e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015840:	4a0f      	ldr	r2, [pc, #60]	; (8015880 <HAL_GPIO_Init+0x304>)
 8015842:	69bb      	ldr	r3, [r7, #24]
 8015844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015846:	69fb      	ldr	r3, [r7, #28]
 8015848:	3301      	adds	r3, #1
 801584a:	61fb      	str	r3, [r7, #28]
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	2b0f      	cmp	r3, #15
 8015850:	f67f aea2 	bls.w	8015598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015854:	bf00      	nop
 8015856:	bf00      	nop
 8015858:	3724      	adds	r7, #36	; 0x24
 801585a:	46bd      	mov	sp, r7
 801585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop
 8015864:	40023800 	.word	0x40023800
 8015868:	40013800 	.word	0x40013800
 801586c:	40020000 	.word	0x40020000
 8015870:	40020400 	.word	0x40020400
 8015874:	40020800 	.word	0x40020800
 8015878:	40020c00 	.word	0x40020c00
 801587c:	40021000 	.word	0x40021000
 8015880:	40013c00 	.word	0x40013c00

08015884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	460b      	mov	r3, r1
 801588e:	807b      	strh	r3, [r7, #2]
 8015890:	4613      	mov	r3, r2
 8015892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015894:	787b      	ldrb	r3, [r7, #1]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d003      	beq.n	80158a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801589a:	887a      	ldrh	r2, [r7, #2]
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80158a0:	e003      	b.n	80158aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80158a2:	887b      	ldrh	r3, [r7, #2]
 80158a4:	041a      	lsls	r2, r3, #16
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	619a      	str	r2, [r3, #24]
}
 80158aa:	bf00      	nop
 80158ac:	370c      	adds	r7, #12
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
	...

080158b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b086      	sub	sp, #24
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d101      	bne.n	80158ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80158c6:	2301      	movs	r3, #1
 80158c8:	e267      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	f003 0301 	and.w	r3, r3, #1
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d075      	beq.n	80159c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80158d6:	4b88      	ldr	r3, [pc, #544]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80158d8:	689b      	ldr	r3, [r3, #8]
 80158da:	f003 030c 	and.w	r3, r3, #12
 80158de:	2b04      	cmp	r3, #4
 80158e0:	d00c      	beq.n	80158fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80158e2:	4b85      	ldr	r3, [pc, #532]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80158e4:	689b      	ldr	r3, [r3, #8]
 80158e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80158ea:	2b08      	cmp	r3, #8
 80158ec:	d112      	bne.n	8015914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80158ee:	4b82      	ldr	r3, [pc, #520]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80158f0:	685b      	ldr	r3, [r3, #4]
 80158f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80158f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80158fa:	d10b      	bne.n	8015914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80158fc:	4b7e      	ldr	r3, [pc, #504]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015904:	2b00      	cmp	r3, #0
 8015906:	d05b      	beq.n	80159c0 <HAL_RCC_OscConfig+0x108>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d157      	bne.n	80159c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8015910:	2301      	movs	r3, #1
 8015912:	e242      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	685b      	ldr	r3, [r3, #4]
 8015918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801591c:	d106      	bne.n	801592c <HAL_RCC_OscConfig+0x74>
 801591e:	4b76      	ldr	r3, [pc, #472]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	4a75      	ldr	r2, [pc, #468]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015928:	6013      	str	r3, [r2, #0]
 801592a:	e01d      	b.n	8015968 <HAL_RCC_OscConfig+0xb0>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015934:	d10c      	bne.n	8015950 <HAL_RCC_OscConfig+0x98>
 8015936:	4b70      	ldr	r3, [pc, #448]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	4a6f      	ldr	r2, [pc, #444]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 801593c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015940:	6013      	str	r3, [r2, #0]
 8015942:	4b6d      	ldr	r3, [pc, #436]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	4a6c      	ldr	r2, [pc, #432]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801594c:	6013      	str	r3, [r2, #0]
 801594e:	e00b      	b.n	8015968 <HAL_RCC_OscConfig+0xb0>
 8015950:	4b69      	ldr	r3, [pc, #420]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	4a68      	ldr	r2, [pc, #416]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801595a:	6013      	str	r3, [r2, #0]
 801595c:	4b66      	ldr	r3, [pc, #408]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	4a65      	ldr	r2, [pc, #404]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	685b      	ldr	r3, [r3, #4]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d013      	beq.n	8015998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015970:	f7ff fc68 	bl	8015244 <HAL_GetTick>
 8015974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015976:	e008      	b.n	801598a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015978:	f7ff fc64 	bl	8015244 <HAL_GetTick>
 801597c:	4602      	mov	r2, r0
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	1ad3      	subs	r3, r2, r3
 8015982:	2b64      	cmp	r3, #100	; 0x64
 8015984:	d901      	bls.n	801598a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015986:	2303      	movs	r3, #3
 8015988:	e207      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801598a:	4b5b      	ldr	r3, [pc, #364]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015992:	2b00      	cmp	r3, #0
 8015994:	d0f0      	beq.n	8015978 <HAL_RCC_OscConfig+0xc0>
 8015996:	e014      	b.n	80159c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015998:	f7ff fc54 	bl	8015244 <HAL_GetTick>
 801599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801599e:	e008      	b.n	80159b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80159a0:	f7ff fc50 	bl	8015244 <HAL_GetTick>
 80159a4:	4602      	mov	r2, r0
 80159a6:	693b      	ldr	r3, [r7, #16]
 80159a8:	1ad3      	subs	r3, r2, r3
 80159aa:	2b64      	cmp	r3, #100	; 0x64
 80159ac:	d901      	bls.n	80159b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80159ae:	2303      	movs	r3, #3
 80159b0:	e1f3      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80159b2:	4b51      	ldr	r3, [pc, #324]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d1f0      	bne.n	80159a0 <HAL_RCC_OscConfig+0xe8>
 80159be:	e000      	b.n	80159c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80159c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	f003 0302 	and.w	r3, r3, #2
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d063      	beq.n	8015a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80159ce:	4b4a      	ldr	r3, [pc, #296]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80159d0:	689b      	ldr	r3, [r3, #8]
 80159d2:	f003 030c 	and.w	r3, r3, #12
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d00b      	beq.n	80159f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80159da:	4b47      	ldr	r3, [pc, #284]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80159dc:	689b      	ldr	r3, [r3, #8]
 80159de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80159e2:	2b08      	cmp	r3, #8
 80159e4:	d11c      	bne.n	8015a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80159e6:	4b44      	ldr	r3, [pc, #272]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d116      	bne.n	8015a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80159f2:	4b41      	ldr	r3, [pc, #260]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	f003 0302 	and.w	r3, r3, #2
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d005      	beq.n	8015a0a <HAL_RCC_OscConfig+0x152>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d001      	beq.n	8015a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8015a06:	2301      	movs	r3, #1
 8015a08:	e1c7      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015a0a:	4b3b      	ldr	r3, [pc, #236]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	691b      	ldr	r3, [r3, #16]
 8015a16:	00db      	lsls	r3, r3, #3
 8015a18:	4937      	ldr	r1, [pc, #220]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015a1a:	4313      	orrs	r3, r2
 8015a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015a1e:	e03a      	b.n	8015a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d020      	beq.n	8015a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015a28:	4b34      	ldr	r3, [pc, #208]	; (8015afc <HAL_RCC_OscConfig+0x244>)
 8015a2a:	2201      	movs	r2, #1
 8015a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a2e:	f7ff fc09 	bl	8015244 <HAL_GetTick>
 8015a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015a34:	e008      	b.n	8015a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015a36:	f7ff fc05 	bl	8015244 <HAL_GetTick>
 8015a3a:	4602      	mov	r2, r0
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	1ad3      	subs	r3, r2, r3
 8015a40:	2b02      	cmp	r3, #2
 8015a42:	d901      	bls.n	8015a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015a44:	2303      	movs	r3, #3
 8015a46:	e1a8      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015a48:	4b2b      	ldr	r3, [pc, #172]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	f003 0302 	and.w	r3, r3, #2
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d0f0      	beq.n	8015a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015a54:	4b28      	ldr	r3, [pc, #160]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	691b      	ldr	r3, [r3, #16]
 8015a60:	00db      	lsls	r3, r3, #3
 8015a62:	4925      	ldr	r1, [pc, #148]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015a64:	4313      	orrs	r3, r2
 8015a66:	600b      	str	r3, [r1, #0]
 8015a68:	e015      	b.n	8015a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015a6a:	4b24      	ldr	r3, [pc, #144]	; (8015afc <HAL_RCC_OscConfig+0x244>)
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a70:	f7ff fbe8 	bl	8015244 <HAL_GetTick>
 8015a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015a76:	e008      	b.n	8015a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015a78:	f7ff fbe4 	bl	8015244 <HAL_GetTick>
 8015a7c:	4602      	mov	r2, r0
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	1ad3      	subs	r3, r2, r3
 8015a82:	2b02      	cmp	r3, #2
 8015a84:	d901      	bls.n	8015a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8015a86:	2303      	movs	r3, #3
 8015a88:	e187      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015a8a:	4b1b      	ldr	r3, [pc, #108]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f003 0302 	and.w	r3, r3, #2
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d1f0      	bne.n	8015a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f003 0308 	and.w	r3, r3, #8
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d036      	beq.n	8015b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	695b      	ldr	r3, [r3, #20]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d016      	beq.n	8015ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015aaa:	4b15      	ldr	r3, [pc, #84]	; (8015b00 <HAL_RCC_OscConfig+0x248>)
 8015aac:	2201      	movs	r2, #1
 8015aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015ab0:	f7ff fbc8 	bl	8015244 <HAL_GetTick>
 8015ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015ab6:	e008      	b.n	8015aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015ab8:	f7ff fbc4 	bl	8015244 <HAL_GetTick>
 8015abc:	4602      	mov	r2, r0
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	1ad3      	subs	r3, r2, r3
 8015ac2:	2b02      	cmp	r3, #2
 8015ac4:	d901      	bls.n	8015aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8015ac6:	2303      	movs	r3, #3
 8015ac8:	e167      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015aca:	4b0b      	ldr	r3, [pc, #44]	; (8015af8 <HAL_RCC_OscConfig+0x240>)
 8015acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ace:	f003 0302 	and.w	r3, r3, #2
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d0f0      	beq.n	8015ab8 <HAL_RCC_OscConfig+0x200>
 8015ad6:	e01b      	b.n	8015b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015ad8:	4b09      	ldr	r3, [pc, #36]	; (8015b00 <HAL_RCC_OscConfig+0x248>)
 8015ada:	2200      	movs	r2, #0
 8015adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015ade:	f7ff fbb1 	bl	8015244 <HAL_GetTick>
 8015ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015ae4:	e00e      	b.n	8015b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015ae6:	f7ff fbad 	bl	8015244 <HAL_GetTick>
 8015aea:	4602      	mov	r2, r0
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	1ad3      	subs	r3, r2, r3
 8015af0:	2b02      	cmp	r3, #2
 8015af2:	d907      	bls.n	8015b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8015af4:	2303      	movs	r3, #3
 8015af6:	e150      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
 8015af8:	40023800 	.word	0x40023800
 8015afc:	42470000 	.word	0x42470000
 8015b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015b04:	4b88      	ldr	r3, [pc, #544]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b08:	f003 0302 	and.w	r3, r3, #2
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d1ea      	bne.n	8015ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f003 0304 	and.w	r3, r3, #4
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	f000 8097 	beq.w	8015c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015b22:	4b81      	ldr	r3, [pc, #516]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d10f      	bne.n	8015b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015b2e:	2300      	movs	r3, #0
 8015b30:	60bb      	str	r3, [r7, #8]
 8015b32:	4b7d      	ldr	r3, [pc, #500]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b36:	4a7c      	ldr	r2, [pc, #496]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8015b3e:	4b7a      	ldr	r3, [pc, #488]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015b46:	60bb      	str	r3, [r7, #8]
 8015b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b4e:	4b77      	ldr	r3, [pc, #476]	; (8015d2c <HAL_RCC_OscConfig+0x474>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d118      	bne.n	8015b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015b5a:	4b74      	ldr	r3, [pc, #464]	; (8015d2c <HAL_RCC_OscConfig+0x474>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	4a73      	ldr	r2, [pc, #460]	; (8015d2c <HAL_RCC_OscConfig+0x474>)
 8015b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015b66:	f7ff fb6d 	bl	8015244 <HAL_GetTick>
 8015b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b6c:	e008      	b.n	8015b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015b6e:	f7ff fb69 	bl	8015244 <HAL_GetTick>
 8015b72:	4602      	mov	r2, r0
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	1ad3      	subs	r3, r2, r3
 8015b78:	2b02      	cmp	r3, #2
 8015b7a:	d901      	bls.n	8015b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8015b7c:	2303      	movs	r3, #3
 8015b7e:	e10c      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b80:	4b6a      	ldr	r3, [pc, #424]	; (8015d2c <HAL_RCC_OscConfig+0x474>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d0f0      	beq.n	8015b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	689b      	ldr	r3, [r3, #8]
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d106      	bne.n	8015ba2 <HAL_RCC_OscConfig+0x2ea>
 8015b94:	4b64      	ldr	r3, [pc, #400]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b98:	4a63      	ldr	r2, [pc, #396]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015b9a:	f043 0301 	orr.w	r3, r3, #1
 8015b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8015ba0:	e01c      	b.n	8015bdc <HAL_RCC_OscConfig+0x324>
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	689b      	ldr	r3, [r3, #8]
 8015ba6:	2b05      	cmp	r3, #5
 8015ba8:	d10c      	bne.n	8015bc4 <HAL_RCC_OscConfig+0x30c>
 8015baa:	4b5f      	ldr	r3, [pc, #380]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bae:	4a5e      	ldr	r2, [pc, #376]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bb0:	f043 0304 	orr.w	r3, r3, #4
 8015bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8015bb6:	4b5c      	ldr	r3, [pc, #368]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bba:	4a5b      	ldr	r2, [pc, #364]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bbc:	f043 0301 	orr.w	r3, r3, #1
 8015bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8015bc2:	e00b      	b.n	8015bdc <HAL_RCC_OscConfig+0x324>
 8015bc4:	4b58      	ldr	r3, [pc, #352]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bc8:	4a57      	ldr	r2, [pc, #348]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bca:	f023 0301 	bic.w	r3, r3, #1
 8015bce:	6713      	str	r3, [r2, #112]	; 0x70
 8015bd0:	4b55      	ldr	r3, [pc, #340]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bd4:	4a54      	ldr	r2, [pc, #336]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015bd6:	f023 0304 	bic.w	r3, r3, #4
 8015bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	689b      	ldr	r3, [r3, #8]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d015      	beq.n	8015c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015be4:	f7ff fb2e 	bl	8015244 <HAL_GetTick>
 8015be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015bea:	e00a      	b.n	8015c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015bec:	f7ff fb2a 	bl	8015244 <HAL_GetTick>
 8015bf0:	4602      	mov	r2, r0
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	1ad3      	subs	r3, r2, r3
 8015bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8015bfa:	4293      	cmp	r3, r2
 8015bfc:	d901      	bls.n	8015c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8015bfe:	2303      	movs	r3, #3
 8015c00:	e0cb      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015c02:	4b49      	ldr	r3, [pc, #292]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c06:	f003 0302 	and.w	r3, r3, #2
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d0ee      	beq.n	8015bec <HAL_RCC_OscConfig+0x334>
 8015c0e:	e014      	b.n	8015c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015c10:	f7ff fb18 	bl	8015244 <HAL_GetTick>
 8015c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015c16:	e00a      	b.n	8015c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015c18:	f7ff fb14 	bl	8015244 <HAL_GetTick>
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	1ad3      	subs	r3, r2, r3
 8015c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8015c26:	4293      	cmp	r3, r2
 8015c28:	d901      	bls.n	8015c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8015c2a:	2303      	movs	r3, #3
 8015c2c:	e0b5      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015c2e:	4b3e      	ldr	r3, [pc, #248]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c32:	f003 0302 	and.w	r3, r3, #2
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d1ee      	bne.n	8015c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015c3a:	7dfb      	ldrb	r3, [r7, #23]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d105      	bne.n	8015c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015c40:	4b39      	ldr	r3, [pc, #228]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c44:	4a38      	ldr	r2, [pc, #224]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	699b      	ldr	r3, [r3, #24]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	f000 80a1 	beq.w	8015d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015c56:	4b34      	ldr	r3, [pc, #208]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015c58:	689b      	ldr	r3, [r3, #8]
 8015c5a:	f003 030c 	and.w	r3, r3, #12
 8015c5e:	2b08      	cmp	r3, #8
 8015c60:	d05c      	beq.n	8015d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	699b      	ldr	r3, [r3, #24]
 8015c66:	2b02      	cmp	r3, #2
 8015c68:	d141      	bne.n	8015cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015c6a:	4b31      	ldr	r3, [pc, #196]	; (8015d30 <HAL_RCC_OscConfig+0x478>)
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c70:	f7ff fae8 	bl	8015244 <HAL_GetTick>
 8015c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015c76:	e008      	b.n	8015c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015c78:	f7ff fae4 	bl	8015244 <HAL_GetTick>
 8015c7c:	4602      	mov	r2, r0
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	1ad3      	subs	r3, r2, r3
 8015c82:	2b02      	cmp	r3, #2
 8015c84:	d901      	bls.n	8015c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8015c86:	2303      	movs	r3, #3
 8015c88:	e087      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015c8a:	4b27      	ldr	r3, [pc, #156]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d1f0      	bne.n	8015c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	69da      	ldr	r2, [r3, #28]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6a1b      	ldr	r3, [r3, #32]
 8015c9e:	431a      	orrs	r2, r3
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ca4:	019b      	lsls	r3, r3, #6
 8015ca6:	431a      	orrs	r2, r3
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cac:	085b      	lsrs	r3, r3, #1
 8015cae:	3b01      	subs	r3, #1
 8015cb0:	041b      	lsls	r3, r3, #16
 8015cb2:	431a      	orrs	r2, r3
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cb8:	061b      	lsls	r3, r3, #24
 8015cba:	491b      	ldr	r1, [pc, #108]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015cbc:	4313      	orrs	r3, r2
 8015cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015cc0:	4b1b      	ldr	r3, [pc, #108]	; (8015d30 <HAL_RCC_OscConfig+0x478>)
 8015cc2:	2201      	movs	r2, #1
 8015cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cc6:	f7ff fabd 	bl	8015244 <HAL_GetTick>
 8015cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015ccc:	e008      	b.n	8015ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015cce:	f7ff fab9 	bl	8015244 <HAL_GetTick>
 8015cd2:	4602      	mov	r2, r0
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d901      	bls.n	8015ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8015cdc:	2303      	movs	r3, #3
 8015cde:	e05c      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015ce0:	4b11      	ldr	r3, [pc, #68]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d0f0      	beq.n	8015cce <HAL_RCC_OscConfig+0x416>
 8015cec:	e054      	b.n	8015d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015cee:	4b10      	ldr	r3, [pc, #64]	; (8015d30 <HAL_RCC_OscConfig+0x478>)
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cf4:	f7ff faa6 	bl	8015244 <HAL_GetTick>
 8015cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015cfa:	e008      	b.n	8015d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015cfc:	f7ff faa2 	bl	8015244 <HAL_GetTick>
 8015d00:	4602      	mov	r2, r0
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	1ad3      	subs	r3, r2, r3
 8015d06:	2b02      	cmp	r3, #2
 8015d08:	d901      	bls.n	8015d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8015d0a:	2303      	movs	r3, #3
 8015d0c:	e045      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015d0e:	4b06      	ldr	r3, [pc, #24]	; (8015d28 <HAL_RCC_OscConfig+0x470>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d1f0      	bne.n	8015cfc <HAL_RCC_OscConfig+0x444>
 8015d1a:	e03d      	b.n	8015d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	699b      	ldr	r3, [r3, #24]
 8015d20:	2b01      	cmp	r3, #1
 8015d22:	d107      	bne.n	8015d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8015d24:	2301      	movs	r3, #1
 8015d26:	e038      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
 8015d28:	40023800 	.word	0x40023800
 8015d2c:	40007000 	.word	0x40007000
 8015d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8015d34:	4b1b      	ldr	r3, [pc, #108]	; (8015da4 <HAL_RCC_OscConfig+0x4ec>)
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	699b      	ldr	r3, [r3, #24]
 8015d3e:	2b01      	cmp	r3, #1
 8015d40:	d028      	beq.n	8015d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d121      	bne.n	8015d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d11a      	bne.n	8015d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015d5e:	68fa      	ldr	r2, [r7, #12]
 8015d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8015d64:	4013      	ands	r3, r2
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015d6c:	4293      	cmp	r3, r2
 8015d6e:	d111      	bne.n	8015d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d7a:	085b      	lsrs	r3, r3, #1
 8015d7c:	3b01      	subs	r3, #1
 8015d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d107      	bne.n	8015d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d001      	beq.n	8015d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8015d94:	2301      	movs	r3, #1
 8015d96:	e000      	b.n	8015d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3718      	adds	r7, #24
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	40023800 	.word	0x40023800

08015da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b084      	sub	sp, #16
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d101      	bne.n	8015dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015db8:	2301      	movs	r3, #1
 8015dba:	e0cc      	b.n	8015f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015dbc:	4b68      	ldr	r3, [pc, #416]	; (8015f60 <HAL_RCC_ClockConfig+0x1b8>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f003 0307 	and.w	r3, r3, #7
 8015dc4:	683a      	ldr	r2, [r7, #0]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d90c      	bls.n	8015de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015dca:	4b65      	ldr	r3, [pc, #404]	; (8015f60 <HAL_RCC_ClockConfig+0x1b8>)
 8015dcc:	683a      	ldr	r2, [r7, #0]
 8015dce:	b2d2      	uxtb	r2, r2
 8015dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015dd2:	4b63      	ldr	r3, [pc, #396]	; (8015f60 <HAL_RCC_ClockConfig+0x1b8>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	f003 0307 	and.w	r3, r3, #7
 8015dda:	683a      	ldr	r2, [r7, #0]
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d001      	beq.n	8015de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8015de0:	2301      	movs	r3, #1
 8015de2:	e0b8      	b.n	8015f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	f003 0302 	and.w	r3, r3, #2
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d020      	beq.n	8015e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f003 0304 	and.w	r3, r3, #4
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d005      	beq.n	8015e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8015dfc:	4b59      	ldr	r3, [pc, #356]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	4a58      	ldr	r2, [pc, #352]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8015e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	f003 0308 	and.w	r3, r3, #8
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d005      	beq.n	8015e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015e14:	4b53      	ldr	r3, [pc, #332]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e16:	689b      	ldr	r3, [r3, #8]
 8015e18:	4a52      	ldr	r2, [pc, #328]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8015e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015e20:	4b50      	ldr	r3, [pc, #320]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e22:	689b      	ldr	r3, [r3, #8]
 8015e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	689b      	ldr	r3, [r3, #8]
 8015e2c:	494d      	ldr	r1, [pc, #308]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e2e:	4313      	orrs	r3, r2
 8015e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	f003 0301 	and.w	r3, r3, #1
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d044      	beq.n	8015ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	685b      	ldr	r3, [r3, #4]
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d107      	bne.n	8015e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015e46:	4b47      	ldr	r3, [pc, #284]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d119      	bne.n	8015e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015e52:	2301      	movs	r3, #1
 8015e54:	e07f      	b.n	8015f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	2b02      	cmp	r3, #2
 8015e5c:	d003      	beq.n	8015e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015e62:	2b03      	cmp	r3, #3
 8015e64:	d107      	bne.n	8015e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015e66:	4b3f      	ldr	r3, [pc, #252]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d109      	bne.n	8015e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015e72:	2301      	movs	r3, #1
 8015e74:	e06f      	b.n	8015f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015e76:	4b3b      	ldr	r3, [pc, #236]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f003 0302 	and.w	r3, r3, #2
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d101      	bne.n	8015e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015e82:	2301      	movs	r3, #1
 8015e84:	e067      	b.n	8015f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015e86:	4b37      	ldr	r3, [pc, #220]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e88:	689b      	ldr	r3, [r3, #8]
 8015e8a:	f023 0203 	bic.w	r2, r3, #3
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	4934      	ldr	r1, [pc, #208]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015e94:	4313      	orrs	r3, r2
 8015e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015e98:	f7ff f9d4 	bl	8015244 <HAL_GetTick>
 8015e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015e9e:	e00a      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015ea0:	f7ff f9d0 	bl	8015244 <HAL_GetTick>
 8015ea4:	4602      	mov	r2, r0
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	1ad3      	subs	r3, r2, r3
 8015eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	d901      	bls.n	8015eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8015eb2:	2303      	movs	r3, #3
 8015eb4:	e04f      	b.n	8015f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015eb6:	4b2b      	ldr	r3, [pc, #172]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015eb8:	689b      	ldr	r3, [r3, #8]
 8015eba:	f003 020c 	and.w	r2, r3, #12
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	685b      	ldr	r3, [r3, #4]
 8015ec2:	009b      	lsls	r3, r3, #2
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d1eb      	bne.n	8015ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015ec8:	4b25      	ldr	r3, [pc, #148]	; (8015f60 <HAL_RCC_ClockConfig+0x1b8>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	f003 0307 	and.w	r3, r3, #7
 8015ed0:	683a      	ldr	r2, [r7, #0]
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d20c      	bcs.n	8015ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015ed6:	4b22      	ldr	r3, [pc, #136]	; (8015f60 <HAL_RCC_ClockConfig+0x1b8>)
 8015ed8:	683a      	ldr	r2, [r7, #0]
 8015eda:	b2d2      	uxtb	r2, r2
 8015edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015ede:	4b20      	ldr	r3, [pc, #128]	; (8015f60 <HAL_RCC_ClockConfig+0x1b8>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	f003 0307 	and.w	r3, r3, #7
 8015ee6:	683a      	ldr	r2, [r7, #0]
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d001      	beq.n	8015ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8015eec:	2301      	movs	r3, #1
 8015eee:	e032      	b.n	8015f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	f003 0304 	and.w	r3, r3, #4
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d008      	beq.n	8015f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015efc:	4b19      	ldr	r3, [pc, #100]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015efe:	689b      	ldr	r3, [r3, #8]
 8015f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	68db      	ldr	r3, [r3, #12]
 8015f08:	4916      	ldr	r1, [pc, #88]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015f0a:	4313      	orrs	r3, r2
 8015f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	f003 0308 	and.w	r3, r3, #8
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d009      	beq.n	8015f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8015f1a:	4b12      	ldr	r3, [pc, #72]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015f1c:	689b      	ldr	r3, [r3, #8]
 8015f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	691b      	ldr	r3, [r3, #16]
 8015f26:	00db      	lsls	r3, r3, #3
 8015f28:	490e      	ldr	r1, [pc, #56]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015f2a:	4313      	orrs	r3, r2
 8015f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015f2e:	f000 f821 	bl	8015f74 <HAL_RCC_GetSysClockFreq>
 8015f32:	4602      	mov	r2, r0
 8015f34:	4b0b      	ldr	r3, [pc, #44]	; (8015f64 <HAL_RCC_ClockConfig+0x1bc>)
 8015f36:	689b      	ldr	r3, [r3, #8]
 8015f38:	091b      	lsrs	r3, r3, #4
 8015f3a:	f003 030f 	and.w	r3, r3, #15
 8015f3e:	490a      	ldr	r1, [pc, #40]	; (8015f68 <HAL_RCC_ClockConfig+0x1c0>)
 8015f40:	5ccb      	ldrb	r3, [r1, r3]
 8015f42:	fa22 f303 	lsr.w	r3, r2, r3
 8015f46:	4a09      	ldr	r2, [pc, #36]	; (8015f6c <HAL_RCC_ClockConfig+0x1c4>)
 8015f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8015f4a:	4b09      	ldr	r3, [pc, #36]	; (8015f70 <HAL_RCC_ClockConfig+0x1c8>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7fc fcb6 	bl	80128c0 <HAL_InitTick>

  return HAL_OK;
 8015f54:	2300      	movs	r3, #0
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	3710      	adds	r7, #16
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	40023c00 	.word	0x40023c00
 8015f64:	40023800 	.word	0x40023800
 8015f68:	08033af8 	.word	0x08033af8
 8015f6c:	20000000 	.word	0x20000000
 8015f70:	200000bc 	.word	0x200000bc

08015f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015f78:	b094      	sub	sp, #80	; 0x50
 8015f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8015f80:	2300      	movs	r3, #0
 8015f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f84:	2300      	movs	r3, #0
 8015f86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015f8c:	4b79      	ldr	r3, [pc, #484]	; (8016174 <HAL_RCC_GetSysClockFreq+0x200>)
 8015f8e:	689b      	ldr	r3, [r3, #8]
 8015f90:	f003 030c 	and.w	r3, r3, #12
 8015f94:	2b08      	cmp	r3, #8
 8015f96:	d00d      	beq.n	8015fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8015f98:	2b08      	cmp	r3, #8
 8015f9a:	f200 80e1 	bhi.w	8016160 <HAL_RCC_GetSysClockFreq+0x1ec>
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d002      	beq.n	8015fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8015fa2:	2b04      	cmp	r3, #4
 8015fa4:	d003      	beq.n	8015fae <HAL_RCC_GetSysClockFreq+0x3a>
 8015fa6:	e0db      	b.n	8016160 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8015fa8:	4b73      	ldr	r3, [pc, #460]	; (8016178 <HAL_RCC_GetSysClockFreq+0x204>)
 8015faa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8015fac:	e0db      	b.n	8016166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8015fae:	4b73      	ldr	r3, [pc, #460]	; (801617c <HAL_RCC_GetSysClockFreq+0x208>)
 8015fb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8015fb2:	e0d8      	b.n	8016166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015fb4:	4b6f      	ldr	r3, [pc, #444]	; (8016174 <HAL_RCC_GetSysClockFreq+0x200>)
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015fbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015fbe:	4b6d      	ldr	r3, [pc, #436]	; (8016174 <HAL_RCC_GetSysClockFreq+0x200>)
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d063      	beq.n	8016092 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015fca:	4b6a      	ldr	r3, [pc, #424]	; (8016174 <HAL_RCC_GetSysClockFreq+0x200>)
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	099b      	lsrs	r3, r3, #6
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8015fde:	2300      	movs	r3, #0
 8015fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8015fe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8015fe6:	4622      	mov	r2, r4
 8015fe8:	462b      	mov	r3, r5
 8015fea:	f04f 0000 	mov.w	r0, #0
 8015fee:	f04f 0100 	mov.w	r1, #0
 8015ff2:	0159      	lsls	r1, r3, #5
 8015ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8015ff8:	0150      	lsls	r0, r2, #5
 8015ffa:	4602      	mov	r2, r0
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	4621      	mov	r1, r4
 8016000:	1a51      	subs	r1, r2, r1
 8016002:	6139      	str	r1, [r7, #16]
 8016004:	4629      	mov	r1, r5
 8016006:	eb63 0301 	sbc.w	r3, r3, r1
 801600a:	617b      	str	r3, [r7, #20]
 801600c:	f04f 0200 	mov.w	r2, #0
 8016010:	f04f 0300 	mov.w	r3, #0
 8016014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8016018:	4659      	mov	r1, fp
 801601a:	018b      	lsls	r3, r1, #6
 801601c:	4651      	mov	r1, sl
 801601e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8016022:	4651      	mov	r1, sl
 8016024:	018a      	lsls	r2, r1, #6
 8016026:	4651      	mov	r1, sl
 8016028:	ebb2 0801 	subs.w	r8, r2, r1
 801602c:	4659      	mov	r1, fp
 801602e:	eb63 0901 	sbc.w	r9, r3, r1
 8016032:	f04f 0200 	mov.w	r2, #0
 8016036:	f04f 0300 	mov.w	r3, #0
 801603a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801603e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016046:	4690      	mov	r8, r2
 8016048:	4699      	mov	r9, r3
 801604a:	4623      	mov	r3, r4
 801604c:	eb18 0303 	adds.w	r3, r8, r3
 8016050:	60bb      	str	r3, [r7, #8]
 8016052:	462b      	mov	r3, r5
 8016054:	eb49 0303 	adc.w	r3, r9, r3
 8016058:	60fb      	str	r3, [r7, #12]
 801605a:	f04f 0200 	mov.w	r2, #0
 801605e:	f04f 0300 	mov.w	r3, #0
 8016062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016066:	4629      	mov	r1, r5
 8016068:	024b      	lsls	r3, r1, #9
 801606a:	4621      	mov	r1, r4
 801606c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8016070:	4621      	mov	r1, r4
 8016072:	024a      	lsls	r2, r1, #9
 8016074:	4610      	mov	r0, r2
 8016076:	4619      	mov	r1, r3
 8016078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801607a:	2200      	movs	r2, #0
 801607c:	62bb      	str	r3, [r7, #40]	; 0x28
 801607e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016084:	f7fa fe18 	bl	8010cb8 <__aeabi_uldivmod>
 8016088:	4602      	mov	r2, r0
 801608a:	460b      	mov	r3, r1
 801608c:	4613      	mov	r3, r2
 801608e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016090:	e058      	b.n	8016144 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016092:	4b38      	ldr	r3, [pc, #224]	; (8016174 <HAL_RCC_GetSysClockFreq+0x200>)
 8016094:	685b      	ldr	r3, [r3, #4]
 8016096:	099b      	lsrs	r3, r3, #6
 8016098:	2200      	movs	r2, #0
 801609a:	4618      	mov	r0, r3
 801609c:	4611      	mov	r1, r2
 801609e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80160a2:	623b      	str	r3, [r7, #32]
 80160a4:	2300      	movs	r3, #0
 80160a6:	627b      	str	r3, [r7, #36]	; 0x24
 80160a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80160ac:	4642      	mov	r2, r8
 80160ae:	464b      	mov	r3, r9
 80160b0:	f04f 0000 	mov.w	r0, #0
 80160b4:	f04f 0100 	mov.w	r1, #0
 80160b8:	0159      	lsls	r1, r3, #5
 80160ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80160be:	0150      	lsls	r0, r2, #5
 80160c0:	4602      	mov	r2, r0
 80160c2:	460b      	mov	r3, r1
 80160c4:	4641      	mov	r1, r8
 80160c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80160ca:	4649      	mov	r1, r9
 80160cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80160d0:	f04f 0200 	mov.w	r2, #0
 80160d4:	f04f 0300 	mov.w	r3, #0
 80160d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80160dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80160e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80160e4:	ebb2 040a 	subs.w	r4, r2, sl
 80160e8:	eb63 050b 	sbc.w	r5, r3, fp
 80160ec:	f04f 0200 	mov.w	r2, #0
 80160f0:	f04f 0300 	mov.w	r3, #0
 80160f4:	00eb      	lsls	r3, r5, #3
 80160f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80160fa:	00e2      	lsls	r2, r4, #3
 80160fc:	4614      	mov	r4, r2
 80160fe:	461d      	mov	r5, r3
 8016100:	4643      	mov	r3, r8
 8016102:	18e3      	adds	r3, r4, r3
 8016104:	603b      	str	r3, [r7, #0]
 8016106:	464b      	mov	r3, r9
 8016108:	eb45 0303 	adc.w	r3, r5, r3
 801610c:	607b      	str	r3, [r7, #4]
 801610e:	f04f 0200 	mov.w	r2, #0
 8016112:	f04f 0300 	mov.w	r3, #0
 8016116:	e9d7 4500 	ldrd	r4, r5, [r7]
 801611a:	4629      	mov	r1, r5
 801611c:	028b      	lsls	r3, r1, #10
 801611e:	4621      	mov	r1, r4
 8016120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8016124:	4621      	mov	r1, r4
 8016126:	028a      	lsls	r2, r1, #10
 8016128:	4610      	mov	r0, r2
 801612a:	4619      	mov	r1, r3
 801612c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801612e:	2200      	movs	r2, #0
 8016130:	61bb      	str	r3, [r7, #24]
 8016132:	61fa      	str	r2, [r7, #28]
 8016134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016138:	f7fa fdbe 	bl	8010cb8 <__aeabi_uldivmod>
 801613c:	4602      	mov	r2, r0
 801613e:	460b      	mov	r3, r1
 8016140:	4613      	mov	r3, r2
 8016142:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016144:	4b0b      	ldr	r3, [pc, #44]	; (8016174 <HAL_RCC_GetSysClockFreq+0x200>)
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	0c1b      	lsrs	r3, r3, #16
 801614a:	f003 0303 	and.w	r3, r3, #3
 801614e:	3301      	adds	r3, #1
 8016150:	005b      	lsls	r3, r3, #1
 8016152:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8016154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016158:	fbb2 f3f3 	udiv	r3, r2, r3
 801615c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801615e:	e002      	b.n	8016166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016160:	4b05      	ldr	r3, [pc, #20]	; (8016178 <HAL_RCC_GetSysClockFreq+0x204>)
 8016162:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8016164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8016168:	4618      	mov	r0, r3
 801616a:	3750      	adds	r7, #80	; 0x50
 801616c:	46bd      	mov	sp, r7
 801616e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016172:	bf00      	nop
 8016174:	40023800 	.word	0x40023800
 8016178:	00f42400 	.word	0x00f42400
 801617c:	007a1200 	.word	0x007a1200

08016180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016180:	b480      	push	{r7}
 8016182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016184:	4b03      	ldr	r3, [pc, #12]	; (8016194 <HAL_RCC_GetHCLKFreq+0x14>)
 8016186:	681b      	ldr	r3, [r3, #0]
}
 8016188:	4618      	mov	r0, r3
 801618a:	46bd      	mov	sp, r7
 801618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop
 8016194:	20000000 	.word	0x20000000

08016198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801619c:	f7ff fff0 	bl	8016180 <HAL_RCC_GetHCLKFreq>
 80161a0:	4602      	mov	r2, r0
 80161a2:	4b05      	ldr	r3, [pc, #20]	; (80161b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	0a9b      	lsrs	r3, r3, #10
 80161a8:	f003 0307 	and.w	r3, r3, #7
 80161ac:	4903      	ldr	r1, [pc, #12]	; (80161bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80161ae:	5ccb      	ldrb	r3, [r1, r3]
 80161b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	bd80      	pop	{r7, pc}
 80161b8:	40023800 	.word	0x40023800
 80161bc:	08033b08 	.word	0x08033b08

080161c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80161c4:	f7ff ffdc 	bl	8016180 <HAL_RCC_GetHCLKFreq>
 80161c8:	4602      	mov	r2, r0
 80161ca:	4b05      	ldr	r3, [pc, #20]	; (80161e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	0b5b      	lsrs	r3, r3, #13
 80161d0:	f003 0307 	and.w	r3, r3, #7
 80161d4:	4903      	ldr	r1, [pc, #12]	; (80161e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80161d6:	5ccb      	ldrb	r3, [r1, r3]
 80161d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80161dc:	4618      	mov	r0, r3
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	40023800 	.word	0x40023800
 80161e4:	08033b08 	.word	0x08033b08

080161e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80161e8:	b480      	push	{r7}
 80161ea:	b083      	sub	sp, #12
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	220f      	movs	r2, #15
 80161f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80161f8:	4b12      	ldr	r3, [pc, #72]	; (8016244 <HAL_RCC_GetClockConfig+0x5c>)
 80161fa:	689b      	ldr	r3, [r3, #8]
 80161fc:	f003 0203 	and.w	r2, r3, #3
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016204:	4b0f      	ldr	r3, [pc, #60]	; (8016244 <HAL_RCC_GetClockConfig+0x5c>)
 8016206:	689b      	ldr	r3, [r3, #8]
 8016208:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016210:	4b0c      	ldr	r3, [pc, #48]	; (8016244 <HAL_RCC_GetClockConfig+0x5c>)
 8016212:	689b      	ldr	r3, [r3, #8]
 8016214:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801621c:	4b09      	ldr	r3, [pc, #36]	; (8016244 <HAL_RCC_GetClockConfig+0x5c>)
 801621e:	689b      	ldr	r3, [r3, #8]
 8016220:	08db      	lsrs	r3, r3, #3
 8016222:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801622a:	4b07      	ldr	r3, [pc, #28]	; (8016248 <HAL_RCC_GetClockConfig+0x60>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	f003 0207 	and.w	r2, r3, #7
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	601a      	str	r2, [r3, #0]
}
 8016236:	bf00      	nop
 8016238:	370c      	adds	r7, #12
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr
 8016242:	bf00      	nop
 8016244:	40023800 	.word	0x40023800
 8016248:	40023c00 	.word	0x40023c00

0801624c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d101      	bne.n	801625e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801625a:	2301      	movs	r3, #1
 801625c:	e07b      	b.n	8016356 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016262:	2b00      	cmp	r3, #0
 8016264:	d108      	bne.n	8016278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801626e:	d009      	beq.n	8016284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2200      	movs	r2, #0
 8016274:	61da      	str	r2, [r3, #28]
 8016276:	e005      	b.n	8016284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2200      	movs	r2, #0
 8016282:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2200      	movs	r2, #0
 8016288:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016290:	b2db      	uxtb	r3, r3
 8016292:	2b00      	cmp	r3, #0
 8016294:	d106      	bne.n	80162a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f7fc fa40 	bl	8012724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2202      	movs	r2, #2
 80162a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	681a      	ldr	r2, [r3, #0]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80162ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	685b      	ldr	r3, [r3, #4]
 80162c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	689b      	ldr	r3, [r3, #8]
 80162c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80162cc:	431a      	orrs	r2, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80162d6:	431a      	orrs	r2, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	691b      	ldr	r3, [r3, #16]
 80162dc:	f003 0302 	and.w	r3, r3, #2
 80162e0:	431a      	orrs	r2, r3
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	695b      	ldr	r3, [r3, #20]
 80162e6:	f003 0301 	and.w	r3, r3, #1
 80162ea:	431a      	orrs	r2, r3
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	699b      	ldr	r3, [r3, #24]
 80162f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80162f4:	431a      	orrs	r2, r3
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	69db      	ldr	r3, [r3, #28]
 80162fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80162fe:	431a      	orrs	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	6a1b      	ldr	r3, [r3, #32]
 8016304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016308:	ea42 0103 	orr.w	r1, r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016310:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	430a      	orrs	r2, r1
 801631a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	699b      	ldr	r3, [r3, #24]
 8016320:	0c1b      	lsrs	r3, r3, #16
 8016322:	f003 0104 	and.w	r1, r3, #4
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801632a:	f003 0210 	and.w	r2, r3, #16
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	430a      	orrs	r2, r1
 8016334:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	69da      	ldr	r2, [r3, #28]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016344:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2200      	movs	r2, #0
 801634a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2201      	movs	r2, #1
 8016350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8016354:	2300      	movs	r3, #0
}
 8016356:	4618      	mov	r0, r3
 8016358:	3708      	adds	r7, #8
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}

0801635e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801635e:	b580      	push	{r7, lr}
 8016360:	b088      	sub	sp, #32
 8016362:	af00      	add	r7, sp, #0
 8016364:	60f8      	str	r0, [r7, #12]
 8016366:	60b9      	str	r1, [r7, #8]
 8016368:	603b      	str	r3, [r7, #0]
 801636a:	4613      	mov	r3, r2
 801636c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801636e:	2300      	movs	r3, #0
 8016370:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016378:	2b01      	cmp	r3, #1
 801637a:	d101      	bne.n	8016380 <HAL_SPI_Transmit+0x22>
 801637c:	2302      	movs	r3, #2
 801637e:	e12d      	b.n	80165dc <HAL_SPI_Transmit+0x27e>
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2201      	movs	r2, #1
 8016384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016388:	f7fe ff5c 	bl	8015244 <HAL_GetTick>
 801638c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801638e:	88fb      	ldrh	r3, [r7, #6]
 8016390:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016398:	b2db      	uxtb	r3, r3
 801639a:	2b01      	cmp	r3, #1
 801639c:	d002      	beq.n	80163a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801639e:	2302      	movs	r3, #2
 80163a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80163a2:	e116      	b.n	80165d2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d002      	beq.n	80163b0 <HAL_SPI_Transmit+0x52>
 80163aa:	88fb      	ldrh	r3, [r7, #6]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d102      	bne.n	80163b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80163b0:	2301      	movs	r3, #1
 80163b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80163b4:	e10d      	b.n	80165d2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	2203      	movs	r2, #3
 80163ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	2200      	movs	r2, #0
 80163c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	68ba      	ldr	r2, [r7, #8]
 80163c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	88fa      	ldrh	r2, [r7, #6]
 80163ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	88fa      	ldrh	r2, [r7, #6]
 80163d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	2200      	movs	r2, #0
 80163da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2200      	movs	r2, #0
 80163e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	2200      	movs	r2, #0
 80163e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	2200      	movs	r2, #0
 80163ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2200      	movs	r2, #0
 80163f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	689b      	ldr	r3, [r3, #8]
 80163f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80163fc:	d10f      	bne.n	801641e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801640c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801641c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016428:	2b40      	cmp	r3, #64	; 0x40
 801642a:	d007      	beq.n	801643c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	681a      	ldr	r2, [r3, #0]
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801643a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	68db      	ldr	r3, [r3, #12]
 8016440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016444:	d14f      	bne.n	80164e6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d002      	beq.n	8016454 <HAL_SPI_Transmit+0xf6>
 801644e:	8afb      	ldrh	r3, [r7, #22]
 8016450:	2b01      	cmp	r3, #1
 8016452:	d142      	bne.n	80164da <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016458:	881a      	ldrh	r2, [r3, #0]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016464:	1c9a      	adds	r2, r3, #2
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801646e:	b29b      	uxth	r3, r3
 8016470:	3b01      	subs	r3, #1
 8016472:	b29a      	uxth	r2, r3
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8016478:	e02f      	b.n	80164da <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	689b      	ldr	r3, [r3, #8]
 8016480:	f003 0302 	and.w	r3, r3, #2
 8016484:	2b02      	cmp	r3, #2
 8016486:	d112      	bne.n	80164ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801648c:	881a      	ldrh	r2, [r3, #0]
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016498:	1c9a      	adds	r2, r3, #2
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80164a2:	b29b      	uxth	r3, r3
 80164a4:	3b01      	subs	r3, #1
 80164a6:	b29a      	uxth	r2, r3
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80164ac:	e015      	b.n	80164da <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80164ae:	f7fe fec9 	bl	8015244 <HAL_GetTick>
 80164b2:	4602      	mov	r2, r0
 80164b4:	69bb      	ldr	r3, [r7, #24]
 80164b6:	1ad3      	subs	r3, r2, r3
 80164b8:	683a      	ldr	r2, [r7, #0]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d803      	bhi.n	80164c6 <HAL_SPI_Transmit+0x168>
 80164be:	683b      	ldr	r3, [r7, #0]
 80164c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164c4:	d102      	bne.n	80164cc <HAL_SPI_Transmit+0x16e>
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d106      	bne.n	80164da <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80164cc:	2303      	movs	r3, #3
 80164ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	2201      	movs	r2, #1
 80164d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80164d8:	e07b      	b.n	80165d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80164de:	b29b      	uxth	r3, r3
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d1ca      	bne.n	801647a <HAL_SPI_Transmit+0x11c>
 80164e4:	e050      	b.n	8016588 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d002      	beq.n	80164f4 <HAL_SPI_Transmit+0x196>
 80164ee:	8afb      	ldrh	r3, [r7, #22]
 80164f0:	2b01      	cmp	r3, #1
 80164f2:	d144      	bne.n	801657e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	330c      	adds	r3, #12
 80164fe:	7812      	ldrb	r2, [r2, #0]
 8016500:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016506:	1c5a      	adds	r2, r3, #1
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016510:	b29b      	uxth	r3, r3
 8016512:	3b01      	subs	r3, #1
 8016514:	b29a      	uxth	r2, r3
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801651a:	e030      	b.n	801657e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	689b      	ldr	r3, [r3, #8]
 8016522:	f003 0302 	and.w	r3, r3, #2
 8016526:	2b02      	cmp	r3, #2
 8016528:	d113      	bne.n	8016552 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	330c      	adds	r3, #12
 8016534:	7812      	ldrb	r2, [r2, #0]
 8016536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801653c:	1c5a      	adds	r2, r3, #1
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016546:	b29b      	uxth	r3, r3
 8016548:	3b01      	subs	r3, #1
 801654a:	b29a      	uxth	r2, r3
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	86da      	strh	r2, [r3, #54]	; 0x36
 8016550:	e015      	b.n	801657e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016552:	f7fe fe77 	bl	8015244 <HAL_GetTick>
 8016556:	4602      	mov	r2, r0
 8016558:	69bb      	ldr	r3, [r7, #24]
 801655a:	1ad3      	subs	r3, r2, r3
 801655c:	683a      	ldr	r2, [r7, #0]
 801655e:	429a      	cmp	r2, r3
 8016560:	d803      	bhi.n	801656a <HAL_SPI_Transmit+0x20c>
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016568:	d102      	bne.n	8016570 <HAL_SPI_Transmit+0x212>
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d106      	bne.n	801657e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8016570:	2303      	movs	r3, #3
 8016572:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2201      	movs	r2, #1
 8016578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 801657c:	e029      	b.n	80165d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016582:	b29b      	uxth	r3, r3
 8016584:	2b00      	cmp	r3, #0
 8016586:	d1c9      	bne.n	801651c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016588:	69ba      	ldr	r2, [r7, #24]
 801658a:	6839      	ldr	r1, [r7, #0]
 801658c:	68f8      	ldr	r0, [r7, #12]
 801658e:	f000 fbdf 	bl	8016d50 <SPI_EndRxTxTransaction>
 8016592:	4603      	mov	r3, r0
 8016594:	2b00      	cmp	r3, #0
 8016596:	d002      	beq.n	801659e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	2220      	movs	r2, #32
 801659c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	689b      	ldr	r3, [r3, #8]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d10a      	bne.n	80165bc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80165a6:	2300      	movs	r3, #0
 80165a8:	613b      	str	r3, [r7, #16]
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	68db      	ldr	r3, [r3, #12]
 80165b0:	613b      	str	r3, [r7, #16]
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	689b      	ldr	r3, [r3, #8]
 80165b8:	613b      	str	r3, [r7, #16]
 80165ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d002      	beq.n	80165ca <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80165c4:	2301      	movs	r3, #1
 80165c6:	77fb      	strb	r3, [r7, #31]
 80165c8:	e003      	b.n	80165d2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2201      	movs	r2, #1
 80165ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	2200      	movs	r2, #0
 80165d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80165da:	7ffb      	ldrb	r3, [r7, #31]
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3720      	adds	r7, #32
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}

080165e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b088      	sub	sp, #32
 80165e8:	af02      	add	r7, sp, #8
 80165ea:	60f8      	str	r0, [r7, #12]
 80165ec:	60b9      	str	r1, [r7, #8]
 80165ee:	603b      	str	r3, [r7, #0]
 80165f0:	4613      	mov	r3, r2
 80165f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80165f4:	2300      	movs	r3, #0
 80165f6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80165fe:	b2db      	uxtb	r3, r3
 8016600:	2b01      	cmp	r3, #1
 8016602:	d002      	beq.n	801660a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016604:	2302      	movs	r3, #2
 8016606:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016608:	e0fb      	b.n	8016802 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016612:	d112      	bne.n	801663a <HAL_SPI_Receive+0x56>
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	689b      	ldr	r3, [r3, #8]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d10e      	bne.n	801663a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	2204      	movs	r2, #4
 8016620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016624:	88fa      	ldrh	r2, [r7, #6]
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	9300      	str	r3, [sp, #0]
 801662a:	4613      	mov	r3, r2
 801662c:	68ba      	ldr	r2, [r7, #8]
 801662e:	68b9      	ldr	r1, [r7, #8]
 8016630:	68f8      	ldr	r0, [r7, #12]
 8016632:	f000 f8ef 	bl	8016814 <HAL_SPI_TransmitReceive>
 8016636:	4603      	mov	r3, r0
 8016638:	e0e8      	b.n	801680c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016640:	2b01      	cmp	r3, #1
 8016642:	d101      	bne.n	8016648 <HAL_SPI_Receive+0x64>
 8016644:	2302      	movs	r3, #2
 8016646:	e0e1      	b.n	801680c <HAL_SPI_Receive+0x228>
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	2201      	movs	r2, #1
 801664c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016650:	f7fe fdf8 	bl	8015244 <HAL_GetTick>
 8016654:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d002      	beq.n	8016662 <HAL_SPI_Receive+0x7e>
 801665c:	88fb      	ldrh	r3, [r7, #6]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d102      	bne.n	8016668 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016662:	2301      	movs	r3, #1
 8016664:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016666:	e0cc      	b.n	8016802 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2204      	movs	r2, #4
 801666c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	2200      	movs	r2, #0
 8016674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	88fa      	ldrh	r2, [r7, #6]
 8016680:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	88fa      	ldrh	r2, [r7, #6]
 8016686:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2200      	movs	r2, #0
 801668c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	2200      	movs	r2, #0
 8016692:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2200      	movs	r2, #0
 8016698:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	2200      	movs	r2, #0
 801669e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	2200      	movs	r2, #0
 80166a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	689b      	ldr	r3, [r3, #8]
 80166aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80166ae:	d10f      	bne.n	80166d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	681a      	ldr	r2, [r3, #0]
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80166be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80166ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166da:	2b40      	cmp	r3, #64	; 0x40
 80166dc:	d007      	beq.n	80166ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80166ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d16a      	bne.n	80167cc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80166f6:	e032      	b.n	801675e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	689b      	ldr	r3, [r3, #8]
 80166fe:	f003 0301 	and.w	r3, r3, #1
 8016702:	2b01      	cmp	r3, #1
 8016704:	d115      	bne.n	8016732 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f103 020c 	add.w	r2, r3, #12
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016712:	7812      	ldrb	r2, [r2, #0]
 8016714:	b2d2      	uxtb	r2, r2
 8016716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801671c:	1c5a      	adds	r2, r3, #1
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016726:	b29b      	uxth	r3, r3
 8016728:	3b01      	subs	r3, #1
 801672a:	b29a      	uxth	r2, r3
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016730:	e015      	b.n	801675e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016732:	f7fe fd87 	bl	8015244 <HAL_GetTick>
 8016736:	4602      	mov	r2, r0
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	1ad3      	subs	r3, r2, r3
 801673c:	683a      	ldr	r2, [r7, #0]
 801673e:	429a      	cmp	r2, r3
 8016740:	d803      	bhi.n	801674a <HAL_SPI_Receive+0x166>
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016748:	d102      	bne.n	8016750 <HAL_SPI_Receive+0x16c>
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d106      	bne.n	801675e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016750:	2303      	movs	r3, #3
 8016752:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2201      	movs	r2, #1
 8016758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 801675c:	e051      	b.n	8016802 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016762:	b29b      	uxth	r3, r3
 8016764:	2b00      	cmp	r3, #0
 8016766:	d1c7      	bne.n	80166f8 <HAL_SPI_Receive+0x114>
 8016768:	e035      	b.n	80167d6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	689b      	ldr	r3, [r3, #8]
 8016770:	f003 0301 	and.w	r3, r3, #1
 8016774:	2b01      	cmp	r3, #1
 8016776:	d113      	bne.n	80167a0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	68da      	ldr	r2, [r3, #12]
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016782:	b292      	uxth	r2, r2
 8016784:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801678a:	1c9a      	adds	r2, r3, #2
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016794:	b29b      	uxth	r3, r3
 8016796:	3b01      	subs	r3, #1
 8016798:	b29a      	uxth	r2, r3
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801679e:	e015      	b.n	80167cc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80167a0:	f7fe fd50 	bl	8015244 <HAL_GetTick>
 80167a4:	4602      	mov	r2, r0
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	1ad3      	subs	r3, r2, r3
 80167aa:	683a      	ldr	r2, [r7, #0]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d803      	bhi.n	80167b8 <HAL_SPI_Receive+0x1d4>
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167b6:	d102      	bne.n	80167be <HAL_SPI_Receive+0x1da>
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d106      	bne.n	80167cc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80167be:	2303      	movs	r3, #3
 80167c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	2201      	movs	r2, #1
 80167c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80167ca:	e01a      	b.n	8016802 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d1c9      	bne.n	801676a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80167d6:	693a      	ldr	r2, [r7, #16]
 80167d8:	6839      	ldr	r1, [r7, #0]
 80167da:	68f8      	ldr	r0, [r7, #12]
 80167dc:	f000 fa52 	bl	8016c84 <SPI_EndRxTransaction>
 80167e0:	4603      	mov	r3, r0
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d002      	beq.n	80167ec <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	2220      	movs	r2, #32
 80167ea:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d002      	beq.n	80167fa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80167f4:	2301      	movs	r3, #1
 80167f6:	75fb      	strb	r3, [r7, #23]
 80167f8:	e003      	b.n	8016802 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2201      	movs	r2, #1
 80167fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	2200      	movs	r2, #0
 8016806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801680a:	7dfb      	ldrb	r3, [r7, #23]
}
 801680c:	4618      	mov	r0, r3
 801680e:	3718      	adds	r7, #24
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}

08016814 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b08c      	sub	sp, #48	; 0x30
 8016818:	af00      	add	r7, sp, #0
 801681a:	60f8      	str	r0, [r7, #12]
 801681c:	60b9      	str	r1, [r7, #8]
 801681e:	607a      	str	r2, [r7, #4]
 8016820:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016822:	2301      	movs	r3, #1
 8016824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016826:	2300      	movs	r3, #0
 8016828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016832:	2b01      	cmp	r3, #1
 8016834:	d101      	bne.n	801683a <HAL_SPI_TransmitReceive+0x26>
 8016836:	2302      	movs	r3, #2
 8016838:	e198      	b.n	8016b6c <HAL_SPI_TransmitReceive+0x358>
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	2201      	movs	r2, #1
 801683e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016842:	f7fe fcff 	bl	8015244 <HAL_GetTick>
 8016846:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016858:	887b      	ldrh	r3, [r7, #2]
 801685a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801685c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016860:	2b01      	cmp	r3, #1
 8016862:	d00f      	beq.n	8016884 <HAL_SPI_TransmitReceive+0x70>
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801686a:	d107      	bne.n	801687c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	689b      	ldr	r3, [r3, #8]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d103      	bne.n	801687c <HAL_SPI_TransmitReceive+0x68>
 8016874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016878:	2b04      	cmp	r3, #4
 801687a:	d003      	beq.n	8016884 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801687c:	2302      	movs	r3, #2
 801687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016882:	e16d      	b.n	8016b60 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d005      	beq.n	8016896 <HAL_SPI_TransmitReceive+0x82>
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d002      	beq.n	8016896 <HAL_SPI_TransmitReceive+0x82>
 8016890:	887b      	ldrh	r3, [r7, #2]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d103      	bne.n	801689e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016896:	2301      	movs	r3, #1
 8016898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801689c:	e160      	b.n	8016b60 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80168a4:	b2db      	uxtb	r3, r3
 80168a6:	2b04      	cmp	r3, #4
 80168a8:	d003      	beq.n	80168b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2205      	movs	r2, #5
 80168ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2200      	movs	r2, #0
 80168b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	687a      	ldr	r2, [r7, #4]
 80168bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	887a      	ldrh	r2, [r7, #2]
 80168c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	887a      	ldrh	r2, [r7, #2]
 80168c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	68ba      	ldr	r2, [r7, #8]
 80168ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	887a      	ldrh	r2, [r7, #2]
 80168d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	887a      	ldrh	r2, [r7, #2]
 80168da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	2200      	movs	r2, #0
 80168e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	2200      	movs	r2, #0
 80168e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168f2:	2b40      	cmp	r3, #64	; 0x40
 80168f4:	d007      	beq.n	8016906 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	681a      	ldr	r2, [r3, #0]
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	68db      	ldr	r3, [r3, #12]
 801690a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801690e:	d17c      	bne.n	8016a0a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d002      	beq.n	801691e <HAL_SPI_TransmitReceive+0x10a>
 8016918:	8b7b      	ldrh	r3, [r7, #26]
 801691a:	2b01      	cmp	r3, #1
 801691c:	d16a      	bne.n	80169f4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016922:	881a      	ldrh	r2, [r3, #0]
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801692e:	1c9a      	adds	r2, r3, #2
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016938:	b29b      	uxth	r3, r3
 801693a:	3b01      	subs	r3, #1
 801693c:	b29a      	uxth	r2, r3
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016942:	e057      	b.n	80169f4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	689b      	ldr	r3, [r3, #8]
 801694a:	f003 0302 	and.w	r3, r3, #2
 801694e:	2b02      	cmp	r3, #2
 8016950:	d11b      	bne.n	801698a <HAL_SPI_TransmitReceive+0x176>
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016956:	b29b      	uxth	r3, r3
 8016958:	2b00      	cmp	r3, #0
 801695a:	d016      	beq.n	801698a <HAL_SPI_TransmitReceive+0x176>
 801695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695e:	2b01      	cmp	r3, #1
 8016960:	d113      	bne.n	801698a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016966:	881a      	ldrh	r2, [r3, #0]
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016972:	1c9a      	adds	r2, r3, #2
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801697c:	b29b      	uxth	r3, r3
 801697e:	3b01      	subs	r3, #1
 8016980:	b29a      	uxth	r2, r3
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016986:	2300      	movs	r3, #0
 8016988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	689b      	ldr	r3, [r3, #8]
 8016990:	f003 0301 	and.w	r3, r3, #1
 8016994:	2b01      	cmp	r3, #1
 8016996:	d119      	bne.n	80169cc <HAL_SPI_TransmitReceive+0x1b8>
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801699c:	b29b      	uxth	r3, r3
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d014      	beq.n	80169cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	68da      	ldr	r2, [r3, #12]
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169ac:	b292      	uxth	r2, r2
 80169ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169b4:	1c9a      	adds	r2, r3, #2
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80169be:	b29b      	uxth	r3, r3
 80169c0:	3b01      	subs	r3, #1
 80169c2:	b29a      	uxth	r2, r3
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80169c8:	2301      	movs	r3, #1
 80169ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80169cc:	f7fe fc3a 	bl	8015244 <HAL_GetTick>
 80169d0:	4602      	mov	r2, r0
 80169d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d4:	1ad3      	subs	r3, r2, r3
 80169d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169d8:	429a      	cmp	r2, r3
 80169da:	d80b      	bhi.n	80169f4 <HAL_SPI_TransmitReceive+0x1e0>
 80169dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169e2:	d007      	beq.n	80169f4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80169e4:	2303      	movs	r3, #3
 80169e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	2201      	movs	r2, #1
 80169ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80169f2:	e0b5      	b.n	8016b60 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d1a2      	bne.n	8016944 <HAL_SPI_TransmitReceive+0x130>
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d19d      	bne.n	8016944 <HAL_SPI_TransmitReceive+0x130>
 8016a08:	e080      	b.n	8016b0c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	685b      	ldr	r3, [r3, #4]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d002      	beq.n	8016a18 <HAL_SPI_TransmitReceive+0x204>
 8016a12:	8b7b      	ldrh	r3, [r7, #26]
 8016a14:	2b01      	cmp	r3, #1
 8016a16:	d16f      	bne.n	8016af8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	330c      	adds	r3, #12
 8016a22:	7812      	ldrb	r2, [r2, #0]
 8016a24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a2a:	1c5a      	adds	r2, r3, #1
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	3b01      	subs	r3, #1
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016a3e:	e05b      	b.n	8016af8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	689b      	ldr	r3, [r3, #8]
 8016a46:	f003 0302 	and.w	r3, r3, #2
 8016a4a:	2b02      	cmp	r3, #2
 8016a4c:	d11c      	bne.n	8016a88 <HAL_SPI_TransmitReceive+0x274>
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d017      	beq.n	8016a88 <HAL_SPI_TransmitReceive+0x274>
 8016a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a5a:	2b01      	cmp	r3, #1
 8016a5c:	d114      	bne.n	8016a88 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	330c      	adds	r3, #12
 8016a68:	7812      	ldrb	r2, [r2, #0]
 8016a6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a70:	1c5a      	adds	r2, r3, #1
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	3b01      	subs	r3, #1
 8016a7e:	b29a      	uxth	r2, r3
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016a84:	2300      	movs	r3, #0
 8016a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	689b      	ldr	r3, [r3, #8]
 8016a8e:	f003 0301 	and.w	r3, r3, #1
 8016a92:	2b01      	cmp	r3, #1
 8016a94:	d119      	bne.n	8016aca <HAL_SPI_TransmitReceive+0x2b6>
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016a9a:	b29b      	uxth	r3, r3
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d014      	beq.n	8016aca <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	68da      	ldr	r2, [r3, #12]
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016aaa:	b2d2      	uxtb	r2, r2
 8016aac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ab2:	1c5a      	adds	r2, r3, #1
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	3b01      	subs	r3, #1
 8016ac0:	b29a      	uxth	r2, r3
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8016aca:	f7fe fbbb 	bl	8015244 <HAL_GetTick>
 8016ace:	4602      	mov	r2, r0
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad2:	1ad3      	subs	r3, r2, r3
 8016ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d803      	bhi.n	8016ae2 <HAL_SPI_TransmitReceive+0x2ce>
 8016ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ae0:	d102      	bne.n	8016ae8 <HAL_SPI_TransmitReceive+0x2d4>
 8016ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d107      	bne.n	8016af8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8016ae8:	2303      	movs	r3, #3
 8016aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	2201      	movs	r2, #1
 8016af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016af6:	e033      	b.n	8016b60 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d19e      	bne.n	8016a40 <HAL_SPI_TransmitReceive+0x22c>
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016b06:	b29b      	uxth	r3, r3
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d199      	bne.n	8016a40 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016b10:	68f8      	ldr	r0, [r7, #12]
 8016b12:	f000 f91d 	bl	8016d50 <SPI_EndRxTxTransaction>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d006      	beq.n	8016b2a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	2220      	movs	r2, #32
 8016b26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8016b28:	e01a      	b.n	8016b60 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	689b      	ldr	r3, [r3, #8]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d10a      	bne.n	8016b48 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016b32:	2300      	movs	r3, #0
 8016b34:	617b      	str	r3, [r7, #20]
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	68db      	ldr	r3, [r3, #12]
 8016b3c:	617b      	str	r3, [r7, #20]
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	689b      	ldr	r3, [r3, #8]
 8016b44:	617b      	str	r3, [r7, #20]
 8016b46:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d003      	beq.n	8016b58 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8016b50:	2301      	movs	r3, #1
 8016b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b56:	e003      	b.n	8016b60 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	2200      	movs	r2, #0
 8016b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3730      	adds	r7, #48	; 0x30
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}

08016b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b088      	sub	sp, #32
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	60f8      	str	r0, [r7, #12]
 8016b7c:	60b9      	str	r1, [r7, #8]
 8016b7e:	603b      	str	r3, [r7, #0]
 8016b80:	4613      	mov	r3, r2
 8016b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8016b84:	f7fe fb5e 	bl	8015244 <HAL_GetTick>
 8016b88:	4602      	mov	r2, r0
 8016b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b8c:	1a9b      	subs	r3, r3, r2
 8016b8e:	683a      	ldr	r2, [r7, #0]
 8016b90:	4413      	add	r3, r2
 8016b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8016b94:	f7fe fb56 	bl	8015244 <HAL_GetTick>
 8016b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8016b9a:	4b39      	ldr	r3, [pc, #228]	; (8016c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	015b      	lsls	r3, r3, #5
 8016ba0:	0d1b      	lsrs	r3, r3, #20
 8016ba2:	69fa      	ldr	r2, [r7, #28]
 8016ba4:	fb02 f303 	mul.w	r3, r2, r3
 8016ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016baa:	e054      	b.n	8016c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bb2:	d050      	beq.n	8016c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016bb4:	f7fe fb46 	bl	8015244 <HAL_GetTick>
 8016bb8:	4602      	mov	r2, r0
 8016bba:	69bb      	ldr	r3, [r7, #24]
 8016bbc:	1ad3      	subs	r3, r2, r3
 8016bbe:	69fa      	ldr	r2, [r7, #28]
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d902      	bls.n	8016bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d13d      	bne.n	8016c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	685a      	ldr	r2, [r3, #4]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	685b      	ldr	r3, [r3, #4]
 8016bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016be2:	d111      	bne.n	8016c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	689b      	ldr	r3, [r3, #8]
 8016be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016bec:	d004      	beq.n	8016bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	689b      	ldr	r3, [r3, #8]
 8016bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016bf6:	d107      	bne.n	8016c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016c10:	d10f      	bne.n	8016c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016c20:	601a      	str	r2, [r3, #0]
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	2201      	movs	r2, #1
 8016c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8016c42:	2303      	movs	r3, #3
 8016c44:	e017      	b.n	8016c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d101      	bne.n	8016c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	3b01      	subs	r3, #1
 8016c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	689a      	ldr	r2, [r3, #8]
 8016c5c:	68bb      	ldr	r3, [r7, #8]
 8016c5e:	4013      	ands	r3, r2
 8016c60:	68ba      	ldr	r2, [r7, #8]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	bf0c      	ite	eq
 8016c66:	2301      	moveq	r3, #1
 8016c68:	2300      	movne	r3, #0
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	461a      	mov	r2, r3
 8016c6e:	79fb      	ldrb	r3, [r7, #7]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d19b      	bne.n	8016bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8016c74:	2300      	movs	r3, #0
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3720      	adds	r7, #32
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	20000000 	.word	0x20000000

08016c84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b086      	sub	sp, #24
 8016c88:	af02      	add	r7, sp, #8
 8016c8a:	60f8      	str	r0, [r7, #12]
 8016c8c:	60b9      	str	r1, [r7, #8]
 8016c8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016c98:	d111      	bne.n	8016cbe <SPI_EndRxTransaction+0x3a>
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	689b      	ldr	r3, [r3, #8]
 8016c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016ca2:	d004      	beq.n	8016cae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	689b      	ldr	r3, [r3, #8]
 8016ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016cac:	d107      	bne.n	8016cbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	681a      	ldr	r2, [r3, #0]
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016cbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016cc6:	d12a      	bne.n	8016d1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	689b      	ldr	r3, [r3, #8]
 8016ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016cd0:	d012      	beq.n	8016cf8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	9300      	str	r3, [sp, #0]
 8016cd6:	68bb      	ldr	r3, [r7, #8]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	2180      	movs	r1, #128	; 0x80
 8016cdc:	68f8      	ldr	r0, [r7, #12]
 8016cde:	f7ff ff49 	bl	8016b74 <SPI_WaitFlagStateUntilTimeout>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d02d      	beq.n	8016d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016cec:	f043 0220 	orr.w	r2, r3, #32
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8016cf4:	2303      	movs	r3, #3
 8016cf6:	e026      	b.n	8016d46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	2200      	movs	r2, #0
 8016d00:	2101      	movs	r1, #1
 8016d02:	68f8      	ldr	r0, [r7, #12]
 8016d04:	f7ff ff36 	bl	8016b74 <SPI_WaitFlagStateUntilTimeout>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d01a      	beq.n	8016d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d12:	f043 0220 	orr.w	r2, r3, #32
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8016d1a:	2303      	movs	r3, #3
 8016d1c:	e013      	b.n	8016d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	9300      	str	r3, [sp, #0]
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	2200      	movs	r2, #0
 8016d26:	2101      	movs	r1, #1
 8016d28:	68f8      	ldr	r0, [r7, #12]
 8016d2a:	f7ff ff23 	bl	8016b74 <SPI_WaitFlagStateUntilTimeout>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d007      	beq.n	8016d44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d38:	f043 0220 	orr.w	r2, r3, #32
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8016d40:	2303      	movs	r3, #3
 8016d42:	e000      	b.n	8016d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8016d44:	2300      	movs	r3, #0
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3710      	adds	r7, #16
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
	...

08016d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b088      	sub	sp, #32
 8016d54:	af02      	add	r7, sp, #8
 8016d56:	60f8      	str	r0, [r7, #12]
 8016d58:	60b9      	str	r1, [r7, #8]
 8016d5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	9300      	str	r3, [sp, #0]
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	2201      	movs	r2, #1
 8016d64:	2102      	movs	r1, #2
 8016d66:	68f8      	ldr	r0, [r7, #12]
 8016d68:	f7ff ff04 	bl	8016b74 <SPI_WaitFlagStateUntilTimeout>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d007      	beq.n	8016d82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d76:	f043 0220 	orr.w	r2, r3, #32
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8016d7e:	2303      	movs	r3, #3
 8016d80:	e032      	b.n	8016de8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8016d82:	4b1b      	ldr	r3, [pc, #108]	; (8016df0 <SPI_EndRxTxTransaction+0xa0>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	4a1b      	ldr	r2, [pc, #108]	; (8016df4 <SPI_EndRxTxTransaction+0xa4>)
 8016d88:	fba2 2303 	umull	r2, r3, r2, r3
 8016d8c:	0d5b      	lsrs	r3, r3, #21
 8016d8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016d92:	fb02 f303 	mul.w	r3, r2, r3
 8016d96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	685b      	ldr	r3, [r3, #4]
 8016d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016da0:	d112      	bne.n	8016dc8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	9300      	str	r3, [sp, #0]
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	2200      	movs	r2, #0
 8016daa:	2180      	movs	r1, #128	; 0x80
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f7ff fee1 	bl	8016b74 <SPI_WaitFlagStateUntilTimeout>
 8016db2:	4603      	mov	r3, r0
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d016      	beq.n	8016de6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016dbc:	f043 0220 	orr.w	r2, r3, #32
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8016dc4:	2303      	movs	r3, #3
 8016dc6:	e00f      	b.n	8016de8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d00a      	beq.n	8016de4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	3b01      	subs	r3, #1
 8016dd2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	689b      	ldr	r3, [r3, #8]
 8016dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016dde:	2b80      	cmp	r3, #128	; 0x80
 8016de0:	d0f2      	beq.n	8016dc8 <SPI_EndRxTxTransaction+0x78>
 8016de2:	e000      	b.n	8016de6 <SPI_EndRxTxTransaction+0x96>
        break;
 8016de4:	bf00      	nop
  }

  return HAL_OK;
 8016de6:	2300      	movs	r3, #0
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3718      	adds	r7, #24
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}
 8016df0:	20000000 	.word	0x20000000
 8016df4:	165e9f81 	.word	0x165e9f81

08016df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b082      	sub	sp, #8
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d101      	bne.n	8016e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016e06:	2301      	movs	r3, #1
 8016e08:	e041      	b.n	8016e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016e10:	b2db      	uxtb	r3, r3
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d106      	bne.n	8016e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2200      	movs	r2, #0
 8016e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f000 f839 	bl	8016e96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	2202      	movs	r2, #2
 8016e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	3304      	adds	r3, #4
 8016e34:	4619      	mov	r1, r3
 8016e36:	4610      	mov	r0, r2
 8016e38:	f000 f9b2 	bl	80171a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2201      	movs	r2, #1
 8016e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2201      	movs	r2, #1
 8016e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2201      	movs	r2, #1
 8016e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2201      	movs	r2, #1
 8016e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2201      	movs	r2, #1
 8016e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2201      	movs	r2, #1
 8016e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2201      	movs	r2, #1
 8016e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2201      	movs	r2, #1
 8016e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2201      	movs	r2, #1
 8016e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	2201      	movs	r2, #1
 8016e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016e8c:	2300      	movs	r3, #0
}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	3708      	adds	r7, #8
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd80      	pop	{r7, pc}

08016e96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8016e96:	b480      	push	{r7}
 8016e98:	b083      	sub	sp, #12
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8016e9e:	bf00      	nop
 8016ea0:	370c      	adds	r7, #12
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea8:	4770      	bx	lr
	...

08016eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016eac:	b480      	push	{r7}
 8016eae:	b085      	sub	sp, #20
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	2b01      	cmp	r3, #1
 8016ebe:	d001      	beq.n	8016ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	e044      	b.n	8016f4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2202      	movs	r2, #2
 8016ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	68da      	ldr	r2, [r3, #12]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	f042 0201 	orr.w	r2, r2, #1
 8016eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	4a1e      	ldr	r2, [pc, #120]	; (8016f5c <HAL_TIM_Base_Start_IT+0xb0>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d018      	beq.n	8016f18 <HAL_TIM_Base_Start_IT+0x6c>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016eee:	d013      	beq.n	8016f18 <HAL_TIM_Base_Start_IT+0x6c>
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	4a1a      	ldr	r2, [pc, #104]	; (8016f60 <HAL_TIM_Base_Start_IT+0xb4>)
 8016ef6:	4293      	cmp	r3, r2
 8016ef8:	d00e      	beq.n	8016f18 <HAL_TIM_Base_Start_IT+0x6c>
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	4a19      	ldr	r2, [pc, #100]	; (8016f64 <HAL_TIM_Base_Start_IT+0xb8>)
 8016f00:	4293      	cmp	r3, r2
 8016f02:	d009      	beq.n	8016f18 <HAL_TIM_Base_Start_IT+0x6c>
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	4a17      	ldr	r2, [pc, #92]	; (8016f68 <HAL_TIM_Base_Start_IT+0xbc>)
 8016f0a:	4293      	cmp	r3, r2
 8016f0c:	d004      	beq.n	8016f18 <HAL_TIM_Base_Start_IT+0x6c>
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	4a16      	ldr	r2, [pc, #88]	; (8016f6c <HAL_TIM_Base_Start_IT+0xc0>)
 8016f14:	4293      	cmp	r3, r2
 8016f16:	d111      	bne.n	8016f3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	689b      	ldr	r3, [r3, #8]
 8016f1e:	f003 0307 	and.w	r3, r3, #7
 8016f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	2b06      	cmp	r3, #6
 8016f28:	d010      	beq.n	8016f4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	681a      	ldr	r2, [r3, #0]
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f042 0201 	orr.w	r2, r2, #1
 8016f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f3a:	e007      	b.n	8016f4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	681a      	ldr	r2, [r3, #0]
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	f042 0201 	orr.w	r2, r2, #1
 8016f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016f4c:	2300      	movs	r3, #0
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3714      	adds	r7, #20
 8016f52:	46bd      	mov	sp, r7
 8016f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f58:	4770      	bx	lr
 8016f5a:	bf00      	nop
 8016f5c:	40010000 	.word	0x40010000
 8016f60:	40000400 	.word	0x40000400
 8016f64:	40000800 	.word	0x40000800
 8016f68:	40000c00 	.word	0x40000c00
 8016f6c:	40014000 	.word	0x40014000

08016f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	68db      	ldr	r3, [r3, #12]
 8016f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	691b      	ldr	r3, [r3, #16]
 8016f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	f003 0302 	and.w	r3, r3, #2
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d020      	beq.n	8016fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	f003 0302 	and.w	r3, r3, #2
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d01b      	beq.n	8016fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	f06f 0202 	mvn.w	r2, #2
 8016fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2201      	movs	r2, #1
 8016faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	699b      	ldr	r3, [r3, #24]
 8016fb2:	f003 0303 	and.w	r3, r3, #3
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d003      	beq.n	8016fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016fba:	6878      	ldr	r0, [r7, #4]
 8016fbc:	f000 f8d2 	bl	8017164 <HAL_TIM_IC_CaptureCallback>
 8016fc0:	e005      	b.n	8016fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 f8c4 	bl	8017150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f000 f8d5 	bl	8017178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8016fd4:	68bb      	ldr	r3, [r7, #8]
 8016fd6:	f003 0304 	and.w	r3, r3, #4
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d020      	beq.n	8017020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	f003 0304 	and.w	r3, r3, #4
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d01b      	beq.n	8017020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	f06f 0204 	mvn.w	r2, #4
 8016ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2202      	movs	r2, #2
 8016ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	699b      	ldr	r3, [r3, #24]
 8016ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017002:	2b00      	cmp	r3, #0
 8017004:	d003      	beq.n	801700e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 f8ac 	bl	8017164 <HAL_TIM_IC_CaptureCallback>
 801700c:	e005      	b.n	801701a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f000 f89e 	bl	8017150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	f000 f8af 	bl	8017178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	2200      	movs	r2, #0
 801701e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	f003 0308 	and.w	r3, r3, #8
 8017026:	2b00      	cmp	r3, #0
 8017028:	d020      	beq.n	801706c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	f003 0308 	and.w	r3, r3, #8
 8017030:	2b00      	cmp	r3, #0
 8017032:	d01b      	beq.n	801706c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	f06f 0208 	mvn.w	r2, #8
 801703c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2204      	movs	r2, #4
 8017042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	69db      	ldr	r3, [r3, #28]
 801704a:	f003 0303 	and.w	r3, r3, #3
 801704e:	2b00      	cmp	r3, #0
 8017050:	d003      	beq.n	801705a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f000 f886 	bl	8017164 <HAL_TIM_IC_CaptureCallback>
 8017058:	e005      	b.n	8017066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f000 f878 	bl	8017150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	f000 f889 	bl	8017178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2200      	movs	r2, #0
 801706a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	f003 0310 	and.w	r3, r3, #16
 8017072:	2b00      	cmp	r3, #0
 8017074:	d020      	beq.n	80170b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	f003 0310 	and.w	r3, r3, #16
 801707c:	2b00      	cmp	r3, #0
 801707e:	d01b      	beq.n	80170b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	f06f 0210 	mvn.w	r2, #16
 8017088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	2208      	movs	r2, #8
 801708e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	69db      	ldr	r3, [r3, #28]
 8017096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801709a:	2b00      	cmp	r3, #0
 801709c:	d003      	beq.n	80170a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f000 f860 	bl	8017164 <HAL_TIM_IC_CaptureCallback>
 80170a4:	e005      	b.n	80170b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f000 f852 	bl	8017150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f000 f863 	bl	8017178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2200      	movs	r2, #0
 80170b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	f003 0301 	and.w	r3, r3, #1
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d00c      	beq.n	80170dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	f003 0301 	and.w	r3, r3, #1
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d007      	beq.n	80170dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	f06f 0201 	mvn.w	r2, #1
 80170d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f7fb fabe 	bl	8012658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d00c      	beq.n	8017100 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d007      	beq.n	8017100 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80170f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f000 f8e6 	bl	80172cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017106:	2b00      	cmp	r3, #0
 8017108:	d00c      	beq.n	8017124 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017110:	2b00      	cmp	r3, #0
 8017112:	d007      	beq.n	8017124 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801711c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f000 f834 	bl	801718c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	f003 0320 	and.w	r3, r3, #32
 801712a:	2b00      	cmp	r3, #0
 801712c:	d00c      	beq.n	8017148 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	f003 0320 	and.w	r3, r3, #32
 8017134:	2b00      	cmp	r3, #0
 8017136:	d007      	beq.n	8017148 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f06f 0220 	mvn.w	r2, #32
 8017140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f000 f8b8 	bl	80172b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017148:	bf00      	nop
 801714a:	3710      	adds	r7, #16
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017150:	b480      	push	{r7}
 8017152:	b083      	sub	sp, #12
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017158:	bf00      	nop
 801715a:	370c      	adds	r7, #12
 801715c:	46bd      	mov	sp, r7
 801715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017162:	4770      	bx	lr

08017164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017164:	b480      	push	{r7}
 8017166:	b083      	sub	sp, #12
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801716c:	bf00      	nop
 801716e:	370c      	adds	r7, #12
 8017170:	46bd      	mov	sp, r7
 8017172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017176:	4770      	bx	lr

08017178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017178:	b480      	push	{r7}
 801717a:	b083      	sub	sp, #12
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017180:	bf00      	nop
 8017182:	370c      	adds	r7, #12
 8017184:	46bd      	mov	sp, r7
 8017186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718a:	4770      	bx	lr

0801718c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801718c:	b480      	push	{r7}
 801718e:	b083      	sub	sp, #12
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017194:	bf00      	nop
 8017196:	370c      	adds	r7, #12
 8017198:	46bd      	mov	sp, r7
 801719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719e:	4770      	bx	lr

080171a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80171a0:	b480      	push	{r7}
 80171a2:	b085      	sub	sp, #20
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	4a3a      	ldr	r2, [pc, #232]	; (801729c <TIM_Base_SetConfig+0xfc>)
 80171b4:	4293      	cmp	r3, r2
 80171b6:	d00f      	beq.n	80171d8 <TIM_Base_SetConfig+0x38>
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80171be:	d00b      	beq.n	80171d8 <TIM_Base_SetConfig+0x38>
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	4a37      	ldr	r2, [pc, #220]	; (80172a0 <TIM_Base_SetConfig+0x100>)
 80171c4:	4293      	cmp	r3, r2
 80171c6:	d007      	beq.n	80171d8 <TIM_Base_SetConfig+0x38>
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	4a36      	ldr	r2, [pc, #216]	; (80172a4 <TIM_Base_SetConfig+0x104>)
 80171cc:	4293      	cmp	r3, r2
 80171ce:	d003      	beq.n	80171d8 <TIM_Base_SetConfig+0x38>
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	4a35      	ldr	r2, [pc, #212]	; (80172a8 <TIM_Base_SetConfig+0x108>)
 80171d4:	4293      	cmp	r3, r2
 80171d6:	d108      	bne.n	80171ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80171de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	685b      	ldr	r3, [r3, #4]
 80171e4:	68fa      	ldr	r2, [r7, #12]
 80171e6:	4313      	orrs	r3, r2
 80171e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	4a2b      	ldr	r2, [pc, #172]	; (801729c <TIM_Base_SetConfig+0xfc>)
 80171ee:	4293      	cmp	r3, r2
 80171f0:	d01b      	beq.n	801722a <TIM_Base_SetConfig+0x8a>
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80171f8:	d017      	beq.n	801722a <TIM_Base_SetConfig+0x8a>
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	4a28      	ldr	r2, [pc, #160]	; (80172a0 <TIM_Base_SetConfig+0x100>)
 80171fe:	4293      	cmp	r3, r2
 8017200:	d013      	beq.n	801722a <TIM_Base_SetConfig+0x8a>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	4a27      	ldr	r2, [pc, #156]	; (80172a4 <TIM_Base_SetConfig+0x104>)
 8017206:	4293      	cmp	r3, r2
 8017208:	d00f      	beq.n	801722a <TIM_Base_SetConfig+0x8a>
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	4a26      	ldr	r2, [pc, #152]	; (80172a8 <TIM_Base_SetConfig+0x108>)
 801720e:	4293      	cmp	r3, r2
 8017210:	d00b      	beq.n	801722a <TIM_Base_SetConfig+0x8a>
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	4a25      	ldr	r2, [pc, #148]	; (80172ac <TIM_Base_SetConfig+0x10c>)
 8017216:	4293      	cmp	r3, r2
 8017218:	d007      	beq.n	801722a <TIM_Base_SetConfig+0x8a>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	4a24      	ldr	r2, [pc, #144]	; (80172b0 <TIM_Base_SetConfig+0x110>)
 801721e:	4293      	cmp	r3, r2
 8017220:	d003      	beq.n	801722a <TIM_Base_SetConfig+0x8a>
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	4a23      	ldr	r2, [pc, #140]	; (80172b4 <TIM_Base_SetConfig+0x114>)
 8017226:	4293      	cmp	r3, r2
 8017228:	d108      	bne.n	801723c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	68db      	ldr	r3, [r3, #12]
 8017236:	68fa      	ldr	r2, [r7, #12]
 8017238:	4313      	orrs	r3, r2
 801723a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	695b      	ldr	r3, [r3, #20]
 8017246:	4313      	orrs	r3, r2
 8017248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	68fa      	ldr	r2, [r7, #12]
 801724e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	689a      	ldr	r2, [r3, #8]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	681a      	ldr	r2, [r3, #0]
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	4a0e      	ldr	r2, [pc, #56]	; (801729c <TIM_Base_SetConfig+0xfc>)
 8017264:	4293      	cmp	r3, r2
 8017266:	d103      	bne.n	8017270 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	691a      	ldr	r2, [r3, #16]
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2201      	movs	r2, #1
 8017274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	691b      	ldr	r3, [r3, #16]
 801727a:	f003 0301 	and.w	r3, r3, #1
 801727e:	2b01      	cmp	r3, #1
 8017280:	d105      	bne.n	801728e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	691b      	ldr	r3, [r3, #16]
 8017286:	f023 0201 	bic.w	r2, r3, #1
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	611a      	str	r2, [r3, #16]
  }
}
 801728e:	bf00      	nop
 8017290:	3714      	adds	r7, #20
 8017292:	46bd      	mov	sp, r7
 8017294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop
 801729c:	40010000 	.word	0x40010000
 80172a0:	40000400 	.word	0x40000400
 80172a4:	40000800 	.word	0x40000800
 80172a8:	40000c00 	.word	0x40000c00
 80172ac:	40014000 	.word	0x40014000
 80172b0:	40014400 	.word	0x40014400
 80172b4:	40014800 	.word	0x40014800

080172b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80172b8:	b480      	push	{r7}
 80172ba:	b083      	sub	sp, #12
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80172c0:	bf00      	nop
 80172c2:	370c      	adds	r7, #12
 80172c4:	46bd      	mov	sp, r7
 80172c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ca:	4770      	bx	lr

080172cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80172cc:	b480      	push	{r7}
 80172ce:	b083      	sub	sp, #12
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80172d4:	bf00      	nop
 80172d6:	370c      	adds	r7, #12
 80172d8:	46bd      	mov	sp, r7
 80172da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172de:	4770      	bx	lr

080172e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b082      	sub	sp, #8
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d101      	bne.n	80172f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80172ee:	2301      	movs	r3, #1
 80172f0:	e042      	b.n	8017378 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d106      	bne.n	801730c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	2200      	movs	r2, #0
 8017302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f7fb fa8a 	bl	8012820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2224      	movs	r2, #36	; 0x24
 8017310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	68da      	ldr	r2, [r3, #12]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f000 fd11 	bl	8017d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	691a      	ldr	r2, [r3, #16]
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	695a      	ldr	r2, [r3, #20]
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	68da      	ldr	r2, [r3, #12]
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8017358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	2200      	movs	r2, #0
 801735e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	2220      	movs	r2, #32
 8017364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	2220      	movs	r2, #32
 801736c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2200      	movs	r2, #0
 8017374:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8017376:	2300      	movs	r3, #0
}
 8017378:	4618      	mov	r0, r3
 801737a:	3708      	adds	r7, #8
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b08c      	sub	sp, #48	; 0x30
 8017384:	af00      	add	r7, sp, #0
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	4613      	mov	r3, r2
 801738c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017394:	b2db      	uxtb	r3, r3
 8017396:	2b20      	cmp	r3, #32
 8017398:	d14a      	bne.n	8017430 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 801739a:	68bb      	ldr	r3, [r7, #8]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d002      	beq.n	80173a6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80173a0:	88fb      	ldrh	r3, [r7, #6]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d101      	bne.n	80173aa <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80173a6:	2301      	movs	r3, #1
 80173a8:	e043      	b.n	8017432 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	2201      	movs	r2, #1
 80173ae:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2200      	movs	r2, #0
 80173b4:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80173b6:	88fb      	ldrh	r3, [r7, #6]
 80173b8:	461a      	mov	r2, r3
 80173ba:	68b9      	ldr	r1, [r7, #8]
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	f000 faed 	bl	801799c <UART_Start_Receive_IT>
 80173c2:	4603      	mov	r3, r0
 80173c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80173c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d12c      	bne.n	801742a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d125      	bne.n	8017424 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80173d8:	2300      	movs	r3, #0
 80173da:	613b      	str	r3, [r7, #16]
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	613b      	str	r3, [r7, #16]
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	685b      	ldr	r3, [r3, #4]
 80173ea:	613b      	str	r3, [r7, #16]
 80173ec:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	330c      	adds	r3, #12
 80173f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173f6:	69bb      	ldr	r3, [r7, #24]
 80173f8:	e853 3f00 	ldrex	r3, [r3]
 80173fc:	617b      	str	r3, [r7, #20]
   return(result);
 80173fe:	697b      	ldr	r3, [r7, #20]
 8017400:	f043 0310 	orr.w	r3, r3, #16
 8017404:	62bb      	str	r3, [r7, #40]	; 0x28
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	330c      	adds	r3, #12
 801740c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801740e:	627a      	str	r2, [r7, #36]	; 0x24
 8017410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017412:	6a39      	ldr	r1, [r7, #32]
 8017414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017416:	e841 2300 	strex	r3, r2, [r1]
 801741a:	61fb      	str	r3, [r7, #28]
   return(result);
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d1e5      	bne.n	80173ee <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017422:	e002      	b.n	801742a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017424:	2301      	movs	r3, #1
 8017426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801742a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801742e:	e000      	b.n	8017432 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8017430:	2302      	movs	r3, #2
  }
}
 8017432:	4618      	mov	r0, r3
 8017434:	3730      	adds	r7, #48	; 0x30
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}
	...

0801743c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b0ba      	sub	sp, #232	; 0xe8
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	68db      	ldr	r3, [r3, #12]
 8017454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	695b      	ldr	r3, [r3, #20]
 801745e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017462:	2300      	movs	r3, #0
 8017464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8017468:	2300      	movs	r3, #0
 801746a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801746e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017472:	f003 030f 	and.w	r3, r3, #15
 8017476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801747a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801747e:	2b00      	cmp	r3, #0
 8017480:	d10f      	bne.n	80174a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017486:	f003 0320 	and.w	r3, r3, #32
 801748a:	2b00      	cmp	r3, #0
 801748c:	d009      	beq.n	80174a2 <HAL_UART_IRQHandler+0x66>
 801748e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017492:	f003 0320 	and.w	r3, r3, #32
 8017496:	2b00      	cmp	r3, #0
 8017498:	d003      	beq.n	80174a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f000 fb97 	bl	8017bce <UART_Receive_IT>
      return;
 80174a0:	e25b      	b.n	801795a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80174a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	f000 80de 	beq.w	8017668 <HAL_UART_IRQHandler+0x22c>
 80174ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80174b0:	f003 0301 	and.w	r3, r3, #1
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d106      	bne.n	80174c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80174b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80174bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	f000 80d1 	beq.w	8017668 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80174c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80174ca:	f003 0301 	and.w	r3, r3, #1
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d00b      	beq.n	80174ea <HAL_UART_IRQHandler+0xae>
 80174d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80174d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d005      	beq.n	80174ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174e2:	f043 0201 	orr.w	r2, r3, #1
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80174ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80174ee:	f003 0304 	and.w	r3, r3, #4
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d00b      	beq.n	801750e <HAL_UART_IRQHandler+0xd2>
 80174f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80174fa:	f003 0301 	and.w	r3, r3, #1
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d005      	beq.n	801750e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017506:	f043 0202 	orr.w	r2, r3, #2
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801750e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017512:	f003 0302 	and.w	r3, r3, #2
 8017516:	2b00      	cmp	r3, #0
 8017518:	d00b      	beq.n	8017532 <HAL_UART_IRQHandler+0xf6>
 801751a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801751e:	f003 0301 	and.w	r3, r3, #1
 8017522:	2b00      	cmp	r3, #0
 8017524:	d005      	beq.n	8017532 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801752a:	f043 0204 	orr.w	r2, r3, #4
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017536:	f003 0308 	and.w	r3, r3, #8
 801753a:	2b00      	cmp	r3, #0
 801753c:	d011      	beq.n	8017562 <HAL_UART_IRQHandler+0x126>
 801753e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017542:	f003 0320 	and.w	r3, r3, #32
 8017546:	2b00      	cmp	r3, #0
 8017548:	d105      	bne.n	8017556 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801754a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801754e:	f003 0301 	and.w	r3, r3, #1
 8017552:	2b00      	cmp	r3, #0
 8017554:	d005      	beq.n	8017562 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801755a:	f043 0208 	orr.w	r2, r3, #8
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017566:	2b00      	cmp	r3, #0
 8017568:	f000 81f2 	beq.w	8017950 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017570:	f003 0320 	and.w	r3, r3, #32
 8017574:	2b00      	cmp	r3, #0
 8017576:	d008      	beq.n	801758a <HAL_UART_IRQHandler+0x14e>
 8017578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801757c:	f003 0320 	and.w	r3, r3, #32
 8017580:	2b00      	cmp	r3, #0
 8017582:	d002      	beq.n	801758a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017584:	6878      	ldr	r0, [r7, #4]
 8017586:	f000 fb22 	bl	8017bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	695b      	ldr	r3, [r3, #20]
 8017590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017594:	2b40      	cmp	r3, #64	; 0x40
 8017596:	bf0c      	ite	eq
 8017598:	2301      	moveq	r3, #1
 801759a:	2300      	movne	r3, #0
 801759c:	b2db      	uxtb	r3, r3
 801759e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175a6:	f003 0308 	and.w	r3, r3, #8
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d103      	bne.n	80175b6 <HAL_UART_IRQHandler+0x17a>
 80175ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d04f      	beq.n	8017656 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f000 fa2a 	bl	8017a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	695b      	ldr	r3, [r3, #20]
 80175c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175c6:	2b40      	cmp	r3, #64	; 0x40
 80175c8:	d141      	bne.n	801764e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	3314      	adds	r3, #20
 80175d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80175d8:	e853 3f00 	ldrex	r3, [r3]
 80175dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80175e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80175e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80175e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	3314      	adds	r3, #20
 80175f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80175f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80175fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017606:	e841 2300 	strex	r3, r2, [r1]
 801760a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801760e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017612:	2b00      	cmp	r3, #0
 8017614:	d1d9      	bne.n	80175ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801761a:	2b00      	cmp	r3, #0
 801761c:	d013      	beq.n	8017646 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017622:	4a7e      	ldr	r2, [pc, #504]	; (801781c <HAL_UART_IRQHandler+0x3e0>)
 8017624:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801762a:	4618      	mov	r0, r3
 801762c:	f7fd ff84 	bl	8015538 <HAL_DMA_Abort_IT>
 8017630:	4603      	mov	r3, r0
 8017632:	2b00      	cmp	r3, #0
 8017634:	d016      	beq.n	8017664 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801763c:	687a      	ldr	r2, [r7, #4]
 801763e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017640:	4610      	mov	r0, r2
 8017642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017644:	e00e      	b.n	8017664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017646:	6878      	ldr	r0, [r7, #4]
 8017648:	f000 f99e 	bl	8017988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801764c:	e00a      	b.n	8017664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f000 f99a 	bl	8017988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017654:	e006      	b.n	8017664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f000 f996 	bl	8017988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2200      	movs	r2, #0
 8017660:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8017662:	e175      	b.n	8017950 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017664:	bf00      	nop
    return;
 8017666:	e173      	b.n	8017950 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801766c:	2b01      	cmp	r3, #1
 801766e:	f040 814f 	bne.w	8017910 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017676:	f003 0310 	and.w	r3, r3, #16
 801767a:	2b00      	cmp	r3, #0
 801767c:	f000 8148 	beq.w	8017910 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017684:	f003 0310 	and.w	r3, r3, #16
 8017688:	2b00      	cmp	r3, #0
 801768a:	f000 8141 	beq.w	8017910 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801768e:	2300      	movs	r3, #0
 8017690:	60bb      	str	r3, [r7, #8]
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	60bb      	str	r3, [r7, #8]
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	60bb      	str	r3, [r7, #8]
 80176a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	695b      	ldr	r3, [r3, #20]
 80176aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176ae:	2b40      	cmp	r3, #64	; 0x40
 80176b0:	f040 80b6 	bne.w	8017820 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	685b      	ldr	r3, [r3, #4]
 80176bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80176c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f000 8145 	beq.w	8017954 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80176ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80176d2:	429a      	cmp	r2, r3
 80176d4:	f080 813e 	bcs.w	8017954 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80176de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176e4:	69db      	ldr	r3, [r3, #28]
 80176e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80176ea:	f000 8088 	beq.w	80177fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	330c      	adds	r3, #12
 80176f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80176fc:	e853 3f00 	ldrex	r3, [r3]
 8017700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801770c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	330c      	adds	r3, #12
 8017716:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801771a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801771e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017722:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017726:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801772a:	e841 2300 	strex	r3, r2, [r1]
 801772e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017736:	2b00      	cmp	r3, #0
 8017738:	d1d9      	bne.n	80176ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	3314      	adds	r3, #20
 8017740:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017744:	e853 3f00 	ldrex	r3, [r3]
 8017748:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801774a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801774c:	f023 0301 	bic.w	r3, r3, #1
 8017750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	3314      	adds	r3, #20
 801775a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801775e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017762:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017764:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017766:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801776a:	e841 2300 	strex	r3, r2, [r1]
 801776e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017772:	2b00      	cmp	r3, #0
 8017774:	d1e1      	bne.n	801773a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	3314      	adds	r3, #20
 801777c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801777e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017780:	e853 3f00 	ldrex	r3, [r3]
 8017784:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801778c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	3314      	adds	r3, #20
 8017796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801779a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801779c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801779e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80177a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80177a2:	e841 2300 	strex	r3, r2, [r1]
 80177a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80177a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d1e3      	bne.n	8017776 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	2220      	movs	r2, #32
 80177b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2200      	movs	r2, #0
 80177ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	330c      	adds	r3, #12
 80177c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177c6:	e853 3f00 	ldrex	r3, [r3]
 80177ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80177cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80177ce:	f023 0310 	bic.w	r3, r3, #16
 80177d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	330c      	adds	r3, #12
 80177dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80177e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80177e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80177e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80177e8:	e841 2300 	strex	r3, r2, [r1]
 80177ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80177ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d1e3      	bne.n	80177bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fd fe2d 	bl	8015458 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	2202      	movs	r2, #2
 8017802:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801780c:	b29b      	uxth	r3, r3
 801780e:	1ad3      	subs	r3, r2, r3
 8017810:	b29b      	uxth	r3, r3
 8017812:	4619      	mov	r1, r3
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f7f9 fc27 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801781a:	e09b      	b.n	8017954 <HAL_UART_IRQHandler+0x518>
 801781c:	08017ad7 	.word	0x08017ad7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017828:	b29b      	uxth	r3, r3
 801782a:	1ad3      	subs	r3, r2, r3
 801782c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017834:	b29b      	uxth	r3, r3
 8017836:	2b00      	cmp	r3, #0
 8017838:	f000 808e 	beq.w	8017958 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 801783c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017840:	2b00      	cmp	r3, #0
 8017842:	f000 8089 	beq.w	8017958 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	330c      	adds	r3, #12
 801784c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017850:	e853 3f00 	ldrex	r3, [r3]
 8017854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801785c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	330c      	adds	r3, #12
 8017866:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801786a:	647a      	str	r2, [r7, #68]	; 0x44
 801786c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801786e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017872:	e841 2300 	strex	r3, r2, [r1]
 8017876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801787a:	2b00      	cmp	r3, #0
 801787c:	d1e3      	bne.n	8017846 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	3314      	adds	r3, #20
 8017884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017888:	e853 3f00 	ldrex	r3, [r3]
 801788c:	623b      	str	r3, [r7, #32]
   return(result);
 801788e:	6a3b      	ldr	r3, [r7, #32]
 8017890:	f023 0301 	bic.w	r3, r3, #1
 8017894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	3314      	adds	r3, #20
 801789e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80178a2:	633a      	str	r2, [r7, #48]	; 0x30
 80178a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80178a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178aa:	e841 2300 	strex	r3, r2, [r1]
 80178ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80178b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d1e3      	bne.n	801787e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	2220      	movs	r2, #32
 80178ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2200      	movs	r2, #0
 80178c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	330c      	adds	r3, #12
 80178ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178cc:	693b      	ldr	r3, [r7, #16]
 80178ce:	e853 3f00 	ldrex	r3, [r3]
 80178d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	f023 0310 	bic.w	r3, r3, #16
 80178da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	330c      	adds	r3, #12
 80178e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80178e8:	61fa      	str	r2, [r7, #28]
 80178ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178ec:	69b9      	ldr	r1, [r7, #24]
 80178ee:	69fa      	ldr	r2, [r7, #28]
 80178f0:	e841 2300 	strex	r3, r2, [r1]
 80178f4:	617b      	str	r3, [r7, #20]
   return(result);
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d1e3      	bne.n	80178c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	2202      	movs	r2, #2
 8017900:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017906:	4619      	mov	r1, r3
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	f7f9 fbad 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801790e:	e023      	b.n	8017958 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017918:	2b00      	cmp	r3, #0
 801791a:	d009      	beq.n	8017930 <HAL_UART_IRQHandler+0x4f4>
 801791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017924:	2b00      	cmp	r3, #0
 8017926:	d003      	beq.n	8017930 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f000 f8e8 	bl	8017afe <UART_Transmit_IT>
    return;
 801792e:	e014      	b.n	801795a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017938:	2b00      	cmp	r3, #0
 801793a:	d00e      	beq.n	801795a <HAL_UART_IRQHandler+0x51e>
 801793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017944:	2b00      	cmp	r3, #0
 8017946:	d008      	beq.n	801795a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f000 f928 	bl	8017b9e <UART_EndTransmit_IT>
    return;
 801794e:	e004      	b.n	801795a <HAL_UART_IRQHandler+0x51e>
    return;
 8017950:	bf00      	nop
 8017952:	e002      	b.n	801795a <HAL_UART_IRQHandler+0x51e>
      return;
 8017954:	bf00      	nop
 8017956:	e000      	b.n	801795a <HAL_UART_IRQHandler+0x51e>
      return;
 8017958:	bf00      	nop
  }
}
 801795a:	37e8      	adds	r7, #232	; 0xe8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017960:	b480      	push	{r7}
 8017962:	b083      	sub	sp, #12
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017968:	bf00      	nop
 801796a:	370c      	adds	r7, #12
 801796c:	46bd      	mov	sp, r7
 801796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017972:	4770      	bx	lr

08017974 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017974:	b480      	push	{r7}
 8017976:	b083      	sub	sp, #12
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801797c:	bf00      	nop
 801797e:	370c      	adds	r7, #12
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr

08017988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017990:	bf00      	nop
 8017992:	370c      	adds	r7, #12
 8017994:	46bd      	mov	sp, r7
 8017996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799a:	4770      	bx	lr

0801799c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801799c:	b480      	push	{r7}
 801799e:	b085      	sub	sp, #20
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	4613      	mov	r3, r2
 80179a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	68ba      	ldr	r2, [r7, #8]
 80179ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	88fa      	ldrh	r2, [r7, #6]
 80179b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	88fa      	ldrh	r2, [r7, #6]
 80179ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	2200      	movs	r2, #0
 80179c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	2222      	movs	r2, #34	; 0x22
 80179c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	691b      	ldr	r3, [r3, #16]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d007      	beq.n	80179e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	68da      	ldr	r2, [r3, #12]
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80179e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	695a      	ldr	r2, [r3, #20]
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	f042 0201 	orr.w	r2, r2, #1
 80179f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	68da      	ldr	r2, [r3, #12]
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	f042 0220 	orr.w	r2, r2, #32
 8017a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017a02:	2300      	movs	r3, #0
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3714      	adds	r7, #20
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0e:	4770      	bx	lr

08017a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017a10:	b480      	push	{r7}
 8017a12:	b095      	sub	sp, #84	; 0x54
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	330c      	adds	r3, #12
 8017a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a22:	e853 3f00 	ldrex	r3, [r3]
 8017a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	330c      	adds	r3, #12
 8017a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a38:	643a      	str	r2, [r7, #64]	; 0x40
 8017a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017a40:	e841 2300 	strex	r3, r2, [r1]
 8017a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d1e5      	bne.n	8017a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	3314      	adds	r3, #20
 8017a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a54:	6a3b      	ldr	r3, [r7, #32]
 8017a56:	e853 3f00 	ldrex	r3, [r3]
 8017a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a5c:	69fb      	ldr	r3, [r7, #28]
 8017a5e:	f023 0301 	bic.w	r3, r3, #1
 8017a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	3314      	adds	r3, #20
 8017a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a74:	e841 2300 	strex	r3, r2, [r1]
 8017a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d1e5      	bne.n	8017a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a84:	2b01      	cmp	r3, #1
 8017a86:	d119      	bne.n	8017abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	330c      	adds	r3, #12
 8017a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	e853 3f00 	ldrex	r3, [r3]
 8017a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	f023 0310 	bic.w	r3, r3, #16
 8017a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	330c      	adds	r3, #12
 8017aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017aa8:	61ba      	str	r2, [r7, #24]
 8017aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aac:	6979      	ldr	r1, [r7, #20]
 8017aae:	69ba      	ldr	r2, [r7, #24]
 8017ab0:	e841 2300 	strex	r3, r2, [r1]
 8017ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8017ab6:	693b      	ldr	r3, [r7, #16]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d1e5      	bne.n	8017a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	2220      	movs	r2, #32
 8017ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017aca:	bf00      	nop
 8017acc:	3754      	adds	r7, #84	; 0x54
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad4:	4770      	bx	lr

08017ad6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017ad6:	b580      	push	{r7, lr}
 8017ad8:	b084      	sub	sp, #16
 8017ada:	af00      	add	r7, sp, #0
 8017adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	2200      	movs	r2, #0
 8017aee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017af0:	68f8      	ldr	r0, [r7, #12]
 8017af2:	f7ff ff49 	bl	8017988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017af6:	bf00      	nop
 8017af8:	3710      	adds	r7, #16
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}

08017afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017afe:	b480      	push	{r7}
 8017b00:	b085      	sub	sp, #20
 8017b02:	af00      	add	r7, sp, #0
 8017b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017b0c:	b2db      	uxtb	r3, r3
 8017b0e:	2b21      	cmp	r3, #33	; 0x21
 8017b10:	d13e      	bne.n	8017b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	689b      	ldr	r3, [r3, #8]
 8017b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b1a:	d114      	bne.n	8017b46 <UART_Transmit_IT+0x48>
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	691b      	ldr	r3, [r3, #16]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d110      	bne.n	8017b46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	6a1b      	ldr	r3, [r3, #32]
 8017b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	881b      	ldrh	r3, [r3, #0]
 8017b2e:	461a      	mov	r2, r3
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	6a1b      	ldr	r3, [r3, #32]
 8017b3e:	1c9a      	adds	r2, r3, #2
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	621a      	str	r2, [r3, #32]
 8017b44:	e008      	b.n	8017b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6a1b      	ldr	r3, [r3, #32]
 8017b4a:	1c59      	adds	r1, r3, #1
 8017b4c:	687a      	ldr	r2, [r7, #4]
 8017b4e:	6211      	str	r1, [r2, #32]
 8017b50:	781a      	ldrb	r2, [r3, #0]
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017b5c:	b29b      	uxth	r3, r3
 8017b5e:	3b01      	subs	r3, #1
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	687a      	ldr	r2, [r7, #4]
 8017b64:	4619      	mov	r1, r3
 8017b66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d10f      	bne.n	8017b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	68da      	ldr	r2, [r3, #12]
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	68da      	ldr	r2, [r3, #12]
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	e000      	b.n	8017b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017b90:	2302      	movs	r3, #2
  }
}
 8017b92:	4618      	mov	r0, r3
 8017b94:	3714      	adds	r7, #20
 8017b96:	46bd      	mov	sp, r7
 8017b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9c:	4770      	bx	lr

08017b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017b9e:	b580      	push	{r7, lr}
 8017ba0:	b082      	sub	sp, #8
 8017ba2:	af00      	add	r7, sp, #0
 8017ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	68da      	ldr	r2, [r3, #12]
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	2220      	movs	r2, #32
 8017bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017bbe:	6878      	ldr	r0, [r7, #4]
 8017bc0:	f7ff fece 	bl	8017960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017bc4:	2300      	movs	r3, #0
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	3708      	adds	r7, #8
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}

08017bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017bce:	b580      	push	{r7, lr}
 8017bd0:	b08c      	sub	sp, #48	; 0x30
 8017bd2:	af00      	add	r7, sp, #0
 8017bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017bdc:	b2db      	uxtb	r3, r3
 8017bde:	2b22      	cmp	r3, #34	; 0x22
 8017be0:	f040 80ae 	bne.w	8017d40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	689b      	ldr	r3, [r3, #8]
 8017be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017bec:	d117      	bne.n	8017c1e <UART_Receive_IT+0x50>
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	691b      	ldr	r3, [r3, #16]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d113      	bne.n	8017c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	685b      	ldr	r3, [r3, #4]
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c0c:	b29a      	uxth	r2, r3
 8017c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c16:	1c9a      	adds	r2, r3, #2
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8017c1c:	e026      	b.n	8017c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017c24:	2300      	movs	r3, #0
 8017c26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	689b      	ldr	r3, [r3, #8]
 8017c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c30:	d007      	beq.n	8017c42 <UART_Receive_IT+0x74>
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	689b      	ldr	r3, [r3, #8]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d10a      	bne.n	8017c50 <UART_Receive_IT+0x82>
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	691b      	ldr	r3, [r3, #16]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d106      	bne.n	8017c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	685b      	ldr	r3, [r3, #4]
 8017c48:	b2da      	uxtb	r2, r3
 8017c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c4c:	701a      	strb	r2, [r3, #0]
 8017c4e:	e008      	b.n	8017c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	685b      	ldr	r3, [r3, #4]
 8017c56:	b2db      	uxtb	r3, r3
 8017c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017c5c:	b2da      	uxtb	r2, r3
 8017c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c66:	1c5a      	adds	r2, r3, #1
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017c70:	b29b      	uxth	r3, r3
 8017c72:	3b01      	subs	r3, #1
 8017c74:	b29b      	uxth	r3, r3
 8017c76:	687a      	ldr	r2, [r7, #4]
 8017c78:	4619      	mov	r1, r3
 8017c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d15d      	bne.n	8017d3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	68da      	ldr	r2, [r3, #12]
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	f022 0220 	bic.w	r2, r2, #32
 8017c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	68da      	ldr	r2, [r3, #12]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	695a      	ldr	r2, [r3, #20]
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	f022 0201 	bic.w	r2, r2, #1
 8017cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2220      	movs	r2, #32
 8017cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	2200      	movs	r2, #0
 8017cbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cc2:	2b01      	cmp	r3, #1
 8017cc4:	d135      	bne.n	8017d32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2200      	movs	r2, #0
 8017cca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	330c      	adds	r3, #12
 8017cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cd4:	697b      	ldr	r3, [r7, #20]
 8017cd6:	e853 3f00 	ldrex	r3, [r3]
 8017cda:	613b      	str	r3, [r7, #16]
   return(result);
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	f023 0310 	bic.w	r3, r3, #16
 8017ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	330c      	adds	r3, #12
 8017cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cec:	623a      	str	r2, [r7, #32]
 8017cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cf0:	69f9      	ldr	r1, [r7, #28]
 8017cf2:	6a3a      	ldr	r2, [r7, #32]
 8017cf4:	e841 2300 	strex	r3, r2, [r1]
 8017cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8017cfa:	69bb      	ldr	r3, [r7, #24]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d1e5      	bne.n	8017ccc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	f003 0310 	and.w	r3, r3, #16
 8017d0a:	2b10      	cmp	r3, #16
 8017d0c:	d10a      	bne.n	8017d24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017d0e:	2300      	movs	r3, #0
 8017d10:	60fb      	str	r3, [r7, #12]
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	60fb      	str	r3, [r7, #12]
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	60fb      	str	r3, [r7, #12]
 8017d22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017d28:	4619      	mov	r1, r3
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f7f9 f99c 	bl	8011068 <HAL_UARTEx_RxEventCallback>
 8017d30:	e002      	b.n	8017d38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f7ff fe1e 	bl	8017974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	e002      	b.n	8017d42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	e000      	b.n	8017d42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8017d40:	2302      	movs	r3, #2
  }
}
 8017d42:	4618      	mov	r0, r3
 8017d44:	3730      	adds	r7, #48	; 0x30
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
	...

08017d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017d50:	b0c0      	sub	sp, #256	; 0x100
 8017d52:	af00      	add	r7, sp, #0
 8017d54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	691b      	ldr	r3, [r3, #16]
 8017d60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d68:	68d9      	ldr	r1, [r3, #12]
 8017d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d6e:	681a      	ldr	r2, [r3, #0]
 8017d70:	ea40 0301 	orr.w	r3, r0, r1
 8017d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d7a:	689a      	ldr	r2, [r3, #8]
 8017d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d80:	691b      	ldr	r3, [r3, #16]
 8017d82:	431a      	orrs	r2, r3
 8017d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d88:	695b      	ldr	r3, [r3, #20]
 8017d8a:	431a      	orrs	r2, r3
 8017d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d90:	69db      	ldr	r3, [r3, #28]
 8017d92:	4313      	orrs	r3, r2
 8017d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8017d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	68db      	ldr	r3, [r3, #12]
 8017da0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8017da4:	f021 010c 	bic.w	r1, r1, #12
 8017da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017dac:	681a      	ldr	r2, [r3, #0]
 8017dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017db2:	430b      	orrs	r3, r1
 8017db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8017db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	695b      	ldr	r3, [r3, #20]
 8017dbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8017dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017dc6:	6999      	ldr	r1, [r3, #24]
 8017dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017dcc:	681a      	ldr	r2, [r3, #0]
 8017dce:	ea40 0301 	orr.w	r3, r0, r1
 8017dd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017dd8:	681a      	ldr	r2, [r3, #0]
 8017dda:	4b8f      	ldr	r3, [pc, #572]	; (8018018 <UART_SetConfig+0x2cc>)
 8017ddc:	429a      	cmp	r2, r3
 8017dde:	d005      	beq.n	8017dec <UART_SetConfig+0xa0>
 8017de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017de4:	681a      	ldr	r2, [r3, #0]
 8017de6:	4b8d      	ldr	r3, [pc, #564]	; (801801c <UART_SetConfig+0x2d0>)
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d104      	bne.n	8017df6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8017dec:	f7fe f9e8 	bl	80161c0 <HAL_RCC_GetPCLK2Freq>
 8017df0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8017df4:	e003      	b.n	8017dfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017df6:	f7fe f9cf 	bl	8016198 <HAL_RCC_GetPCLK1Freq>
 8017dfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e02:	69db      	ldr	r3, [r3, #28]
 8017e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017e08:	f040 810c 	bne.w	8018024 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8017e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017e10:	2200      	movs	r2, #0
 8017e12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017e16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017e1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8017e1e:	4622      	mov	r2, r4
 8017e20:	462b      	mov	r3, r5
 8017e22:	1891      	adds	r1, r2, r2
 8017e24:	65b9      	str	r1, [r7, #88]	; 0x58
 8017e26:	415b      	adcs	r3, r3
 8017e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017e2e:	4621      	mov	r1, r4
 8017e30:	eb12 0801 	adds.w	r8, r2, r1
 8017e34:	4629      	mov	r1, r5
 8017e36:	eb43 0901 	adc.w	r9, r3, r1
 8017e3a:	f04f 0200 	mov.w	r2, #0
 8017e3e:	f04f 0300 	mov.w	r3, #0
 8017e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017e4e:	4690      	mov	r8, r2
 8017e50:	4699      	mov	r9, r3
 8017e52:	4623      	mov	r3, r4
 8017e54:	eb18 0303 	adds.w	r3, r8, r3
 8017e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017e5c:	462b      	mov	r3, r5
 8017e5e:	eb49 0303 	adc.w	r3, r9, r3
 8017e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017e72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8017e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8017e7a:	460b      	mov	r3, r1
 8017e7c:	18db      	adds	r3, r3, r3
 8017e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8017e80:	4613      	mov	r3, r2
 8017e82:	eb42 0303 	adc.w	r3, r2, r3
 8017e86:	657b      	str	r3, [r7, #84]	; 0x54
 8017e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8017e8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017e90:	f7f8 ff12 	bl	8010cb8 <__aeabi_uldivmod>
 8017e94:	4602      	mov	r2, r0
 8017e96:	460b      	mov	r3, r1
 8017e98:	4b61      	ldr	r3, [pc, #388]	; (8018020 <UART_SetConfig+0x2d4>)
 8017e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8017e9e:	095b      	lsrs	r3, r3, #5
 8017ea0:	011c      	lsls	r4, r3, #4
 8017ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017eac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8017eb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8017eb4:	4642      	mov	r2, r8
 8017eb6:	464b      	mov	r3, r9
 8017eb8:	1891      	adds	r1, r2, r2
 8017eba:	64b9      	str	r1, [r7, #72]	; 0x48
 8017ebc:	415b      	adcs	r3, r3
 8017ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017ec0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017ec4:	4641      	mov	r1, r8
 8017ec6:	eb12 0a01 	adds.w	sl, r2, r1
 8017eca:	4649      	mov	r1, r9
 8017ecc:	eb43 0b01 	adc.w	fp, r3, r1
 8017ed0:	f04f 0200 	mov.w	r2, #0
 8017ed4:	f04f 0300 	mov.w	r3, #0
 8017ed8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017edc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8017ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8017ee4:	4692      	mov	sl, r2
 8017ee6:	469b      	mov	fp, r3
 8017ee8:	4643      	mov	r3, r8
 8017eea:	eb1a 0303 	adds.w	r3, sl, r3
 8017eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017ef2:	464b      	mov	r3, r9
 8017ef4:	eb4b 0303 	adc.w	r3, fp, r3
 8017ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	2200      	movs	r2, #0
 8017f04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017f08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8017f0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8017f10:	460b      	mov	r3, r1
 8017f12:	18db      	adds	r3, r3, r3
 8017f14:	643b      	str	r3, [r7, #64]	; 0x40
 8017f16:	4613      	mov	r3, r2
 8017f18:	eb42 0303 	adc.w	r3, r2, r3
 8017f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8017f1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017f22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8017f26:	f7f8 fec7 	bl	8010cb8 <__aeabi_uldivmod>
 8017f2a:	4602      	mov	r2, r0
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	4611      	mov	r1, r2
 8017f30:	4b3b      	ldr	r3, [pc, #236]	; (8018020 <UART_SetConfig+0x2d4>)
 8017f32:	fba3 2301 	umull	r2, r3, r3, r1
 8017f36:	095b      	lsrs	r3, r3, #5
 8017f38:	2264      	movs	r2, #100	; 0x64
 8017f3a:	fb02 f303 	mul.w	r3, r2, r3
 8017f3e:	1acb      	subs	r3, r1, r3
 8017f40:	00db      	lsls	r3, r3, #3
 8017f42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8017f46:	4b36      	ldr	r3, [pc, #216]	; (8018020 <UART_SetConfig+0x2d4>)
 8017f48:	fba3 2302 	umull	r2, r3, r3, r2
 8017f4c:	095b      	lsrs	r3, r3, #5
 8017f4e:	005b      	lsls	r3, r3, #1
 8017f50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8017f54:	441c      	add	r4, r3
 8017f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017f60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8017f64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8017f68:	4642      	mov	r2, r8
 8017f6a:	464b      	mov	r3, r9
 8017f6c:	1891      	adds	r1, r2, r2
 8017f6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8017f70:	415b      	adcs	r3, r3
 8017f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8017f78:	4641      	mov	r1, r8
 8017f7a:	1851      	adds	r1, r2, r1
 8017f7c:	6339      	str	r1, [r7, #48]	; 0x30
 8017f7e:	4649      	mov	r1, r9
 8017f80:	414b      	adcs	r3, r1
 8017f82:	637b      	str	r3, [r7, #52]	; 0x34
 8017f84:	f04f 0200 	mov.w	r2, #0
 8017f88:	f04f 0300 	mov.w	r3, #0
 8017f8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8017f90:	4659      	mov	r1, fp
 8017f92:	00cb      	lsls	r3, r1, #3
 8017f94:	4651      	mov	r1, sl
 8017f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017f9a:	4651      	mov	r1, sl
 8017f9c:	00ca      	lsls	r2, r1, #3
 8017f9e:	4610      	mov	r0, r2
 8017fa0:	4619      	mov	r1, r3
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	4642      	mov	r2, r8
 8017fa6:	189b      	adds	r3, r3, r2
 8017fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017fac:	464b      	mov	r3, r9
 8017fae:	460a      	mov	r2, r1
 8017fb0:	eb42 0303 	adc.w	r3, r2, r3
 8017fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017fbc:	685b      	ldr	r3, [r3, #4]
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8017fc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8017fc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8017fcc:	460b      	mov	r3, r1
 8017fce:	18db      	adds	r3, r3, r3
 8017fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	eb42 0303 	adc.w	r3, r2, r3
 8017fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017fde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8017fe2:	f7f8 fe69 	bl	8010cb8 <__aeabi_uldivmod>
 8017fe6:	4602      	mov	r2, r0
 8017fe8:	460b      	mov	r3, r1
 8017fea:	4b0d      	ldr	r3, [pc, #52]	; (8018020 <UART_SetConfig+0x2d4>)
 8017fec:	fba3 1302 	umull	r1, r3, r3, r2
 8017ff0:	095b      	lsrs	r3, r3, #5
 8017ff2:	2164      	movs	r1, #100	; 0x64
 8017ff4:	fb01 f303 	mul.w	r3, r1, r3
 8017ff8:	1ad3      	subs	r3, r2, r3
 8017ffa:	00db      	lsls	r3, r3, #3
 8017ffc:	3332      	adds	r3, #50	; 0x32
 8017ffe:	4a08      	ldr	r2, [pc, #32]	; (8018020 <UART_SetConfig+0x2d4>)
 8018000:	fba2 2303 	umull	r2, r3, r2, r3
 8018004:	095b      	lsrs	r3, r3, #5
 8018006:	f003 0207 	and.w	r2, r3, #7
 801800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	4422      	add	r2, r4
 8018012:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018014:	e106      	b.n	8018224 <UART_SetConfig+0x4d8>
 8018016:	bf00      	nop
 8018018:	40011000 	.word	0x40011000
 801801c:	40011400 	.word	0x40011400
 8018020:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018028:	2200      	movs	r2, #0
 801802a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801802e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018032:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8018036:	4642      	mov	r2, r8
 8018038:	464b      	mov	r3, r9
 801803a:	1891      	adds	r1, r2, r2
 801803c:	6239      	str	r1, [r7, #32]
 801803e:	415b      	adcs	r3, r3
 8018040:	627b      	str	r3, [r7, #36]	; 0x24
 8018042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018046:	4641      	mov	r1, r8
 8018048:	1854      	adds	r4, r2, r1
 801804a:	4649      	mov	r1, r9
 801804c:	eb43 0501 	adc.w	r5, r3, r1
 8018050:	f04f 0200 	mov.w	r2, #0
 8018054:	f04f 0300 	mov.w	r3, #0
 8018058:	00eb      	lsls	r3, r5, #3
 801805a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801805e:	00e2      	lsls	r2, r4, #3
 8018060:	4614      	mov	r4, r2
 8018062:	461d      	mov	r5, r3
 8018064:	4643      	mov	r3, r8
 8018066:	18e3      	adds	r3, r4, r3
 8018068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801806c:	464b      	mov	r3, r9
 801806e:	eb45 0303 	adc.w	r3, r5, r3
 8018072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801807a:	685b      	ldr	r3, [r3, #4]
 801807c:	2200      	movs	r2, #0
 801807e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018082:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018086:	f04f 0200 	mov.w	r2, #0
 801808a:	f04f 0300 	mov.w	r3, #0
 801808e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8018092:	4629      	mov	r1, r5
 8018094:	008b      	lsls	r3, r1, #2
 8018096:	4621      	mov	r1, r4
 8018098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801809c:	4621      	mov	r1, r4
 801809e:	008a      	lsls	r2, r1, #2
 80180a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80180a4:	f7f8 fe08 	bl	8010cb8 <__aeabi_uldivmod>
 80180a8:	4602      	mov	r2, r0
 80180aa:	460b      	mov	r3, r1
 80180ac:	4b60      	ldr	r3, [pc, #384]	; (8018230 <UART_SetConfig+0x4e4>)
 80180ae:	fba3 2302 	umull	r2, r3, r3, r2
 80180b2:	095b      	lsrs	r3, r3, #5
 80180b4:	011c      	lsls	r4, r3, #4
 80180b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80180ba:	2200      	movs	r2, #0
 80180bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80180c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80180c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80180c8:	4642      	mov	r2, r8
 80180ca:	464b      	mov	r3, r9
 80180cc:	1891      	adds	r1, r2, r2
 80180ce:	61b9      	str	r1, [r7, #24]
 80180d0:	415b      	adcs	r3, r3
 80180d2:	61fb      	str	r3, [r7, #28]
 80180d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80180d8:	4641      	mov	r1, r8
 80180da:	1851      	adds	r1, r2, r1
 80180dc:	6139      	str	r1, [r7, #16]
 80180de:	4649      	mov	r1, r9
 80180e0:	414b      	adcs	r3, r1
 80180e2:	617b      	str	r3, [r7, #20]
 80180e4:	f04f 0200 	mov.w	r2, #0
 80180e8:	f04f 0300 	mov.w	r3, #0
 80180ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80180f0:	4659      	mov	r1, fp
 80180f2:	00cb      	lsls	r3, r1, #3
 80180f4:	4651      	mov	r1, sl
 80180f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80180fa:	4651      	mov	r1, sl
 80180fc:	00ca      	lsls	r2, r1, #3
 80180fe:	4610      	mov	r0, r2
 8018100:	4619      	mov	r1, r3
 8018102:	4603      	mov	r3, r0
 8018104:	4642      	mov	r2, r8
 8018106:	189b      	adds	r3, r3, r2
 8018108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801810c:	464b      	mov	r3, r9
 801810e:	460a      	mov	r2, r1
 8018110:	eb42 0303 	adc.w	r3, r2, r3
 8018114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801811c:	685b      	ldr	r3, [r3, #4]
 801811e:	2200      	movs	r2, #0
 8018120:	67bb      	str	r3, [r7, #120]	; 0x78
 8018122:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018124:	f04f 0200 	mov.w	r2, #0
 8018128:	f04f 0300 	mov.w	r3, #0
 801812c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018130:	4649      	mov	r1, r9
 8018132:	008b      	lsls	r3, r1, #2
 8018134:	4641      	mov	r1, r8
 8018136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801813a:	4641      	mov	r1, r8
 801813c:	008a      	lsls	r2, r1, #2
 801813e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018142:	f7f8 fdb9 	bl	8010cb8 <__aeabi_uldivmod>
 8018146:	4602      	mov	r2, r0
 8018148:	460b      	mov	r3, r1
 801814a:	4611      	mov	r1, r2
 801814c:	4b38      	ldr	r3, [pc, #224]	; (8018230 <UART_SetConfig+0x4e4>)
 801814e:	fba3 2301 	umull	r2, r3, r3, r1
 8018152:	095b      	lsrs	r3, r3, #5
 8018154:	2264      	movs	r2, #100	; 0x64
 8018156:	fb02 f303 	mul.w	r3, r2, r3
 801815a:	1acb      	subs	r3, r1, r3
 801815c:	011b      	lsls	r3, r3, #4
 801815e:	3332      	adds	r3, #50	; 0x32
 8018160:	4a33      	ldr	r2, [pc, #204]	; (8018230 <UART_SetConfig+0x4e4>)
 8018162:	fba2 2303 	umull	r2, r3, r2, r3
 8018166:	095b      	lsrs	r3, r3, #5
 8018168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801816c:	441c      	add	r4, r3
 801816e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018172:	2200      	movs	r2, #0
 8018174:	673b      	str	r3, [r7, #112]	; 0x70
 8018176:	677a      	str	r2, [r7, #116]	; 0x74
 8018178:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801817c:	4642      	mov	r2, r8
 801817e:	464b      	mov	r3, r9
 8018180:	1891      	adds	r1, r2, r2
 8018182:	60b9      	str	r1, [r7, #8]
 8018184:	415b      	adcs	r3, r3
 8018186:	60fb      	str	r3, [r7, #12]
 8018188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801818c:	4641      	mov	r1, r8
 801818e:	1851      	adds	r1, r2, r1
 8018190:	6039      	str	r1, [r7, #0]
 8018192:	4649      	mov	r1, r9
 8018194:	414b      	adcs	r3, r1
 8018196:	607b      	str	r3, [r7, #4]
 8018198:	f04f 0200 	mov.w	r2, #0
 801819c:	f04f 0300 	mov.w	r3, #0
 80181a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80181a4:	4659      	mov	r1, fp
 80181a6:	00cb      	lsls	r3, r1, #3
 80181a8:	4651      	mov	r1, sl
 80181aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80181ae:	4651      	mov	r1, sl
 80181b0:	00ca      	lsls	r2, r1, #3
 80181b2:	4610      	mov	r0, r2
 80181b4:	4619      	mov	r1, r3
 80181b6:	4603      	mov	r3, r0
 80181b8:	4642      	mov	r2, r8
 80181ba:	189b      	adds	r3, r3, r2
 80181bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80181be:	464b      	mov	r3, r9
 80181c0:	460a      	mov	r2, r1
 80181c2:	eb42 0303 	adc.w	r3, r2, r3
 80181c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80181c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181cc:	685b      	ldr	r3, [r3, #4]
 80181ce:	2200      	movs	r2, #0
 80181d0:	663b      	str	r3, [r7, #96]	; 0x60
 80181d2:	667a      	str	r2, [r7, #100]	; 0x64
 80181d4:	f04f 0200 	mov.w	r2, #0
 80181d8:	f04f 0300 	mov.w	r3, #0
 80181dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80181e0:	4649      	mov	r1, r9
 80181e2:	008b      	lsls	r3, r1, #2
 80181e4:	4641      	mov	r1, r8
 80181e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80181ea:	4641      	mov	r1, r8
 80181ec:	008a      	lsls	r2, r1, #2
 80181ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80181f2:	f7f8 fd61 	bl	8010cb8 <__aeabi_uldivmod>
 80181f6:	4602      	mov	r2, r0
 80181f8:	460b      	mov	r3, r1
 80181fa:	4b0d      	ldr	r3, [pc, #52]	; (8018230 <UART_SetConfig+0x4e4>)
 80181fc:	fba3 1302 	umull	r1, r3, r3, r2
 8018200:	095b      	lsrs	r3, r3, #5
 8018202:	2164      	movs	r1, #100	; 0x64
 8018204:	fb01 f303 	mul.w	r3, r1, r3
 8018208:	1ad3      	subs	r3, r2, r3
 801820a:	011b      	lsls	r3, r3, #4
 801820c:	3332      	adds	r3, #50	; 0x32
 801820e:	4a08      	ldr	r2, [pc, #32]	; (8018230 <UART_SetConfig+0x4e4>)
 8018210:	fba2 2303 	umull	r2, r3, r2, r3
 8018214:	095b      	lsrs	r3, r3, #5
 8018216:	f003 020f 	and.w	r2, r3, #15
 801821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	4422      	add	r2, r4
 8018222:	609a      	str	r2, [r3, #8]
}
 8018224:	bf00      	nop
 8018226:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801822a:	46bd      	mov	sp, r7
 801822c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018230:	51eb851f 	.word	0x51eb851f

08018234 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b084      	sub	sp, #16
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 801823c:	4b22      	ldr	r3, [pc, #136]	; (80182c8 <WIZCHIP_READ+0x94>)
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018242:	4b21      	ldr	r3, [pc, #132]	; (80182c8 <WIZCHIP_READ+0x94>)
 8018244:	695b      	ldr	r3, [r3, #20]
 8018246:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018248:	4b1f      	ldr	r3, [pc, #124]	; (80182c8 <WIZCHIP_READ+0x94>)
 801824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801824c:	2b00      	cmp	r3, #0
 801824e:	d003      	beq.n	8018258 <WIZCHIP_READ+0x24>
 8018250:	4b1d      	ldr	r3, [pc, #116]	; (80182c8 <WIZCHIP_READ+0x94>)
 8018252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018254:	2b00      	cmp	r3, #0
 8018256:	d114      	bne.n	8018282 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018258:	4b1b      	ldr	r3, [pc, #108]	; (80182c8 <WIZCHIP_READ+0x94>)
 801825a:	6a1b      	ldr	r3, [r3, #32]
 801825c:	687a      	ldr	r2, [r7, #4]
 801825e:	0c12      	lsrs	r2, r2, #16
 8018260:	b2d2      	uxtb	r2, r2
 8018262:	4610      	mov	r0, r2
 8018264:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018266:	4b18      	ldr	r3, [pc, #96]	; (80182c8 <WIZCHIP_READ+0x94>)
 8018268:	6a1b      	ldr	r3, [r3, #32]
 801826a:	687a      	ldr	r2, [r7, #4]
 801826c:	0a12      	lsrs	r2, r2, #8
 801826e:	b2d2      	uxtb	r2, r2
 8018270:	4610      	mov	r0, r2
 8018272:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018274:	4b14      	ldr	r3, [pc, #80]	; (80182c8 <WIZCHIP_READ+0x94>)
 8018276:	6a1b      	ldr	r3, [r3, #32]
 8018278:	687a      	ldr	r2, [r7, #4]
 801827a:	b2d2      	uxtb	r2, r2
 801827c:	4610      	mov	r0, r2
 801827e:	4798      	blx	r3
 8018280:	e011      	b.n	80182a6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	0c1b      	lsrs	r3, r3, #16
 8018286:	b2db      	uxtb	r3, r3
 8018288:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	0a1b      	lsrs	r3, r3, #8
 801828e:	b2db      	uxtb	r3, r3
 8018290:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	b2db      	uxtb	r3, r3
 8018296:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018298:	4b0b      	ldr	r3, [pc, #44]	; (80182c8 <WIZCHIP_READ+0x94>)
 801829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801829c:	f107 020c 	add.w	r2, r7, #12
 80182a0:	2103      	movs	r1, #3
 80182a2:	4610      	mov	r0, r2
 80182a4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80182a6:	4b08      	ldr	r3, [pc, #32]	; (80182c8 <WIZCHIP_READ+0x94>)
 80182a8:	69db      	ldr	r3, [r3, #28]
 80182aa:	4798      	blx	r3
 80182ac:	4603      	mov	r3, r0
 80182ae:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80182b0:	4b05      	ldr	r3, [pc, #20]	; (80182c8 <WIZCHIP_READ+0x94>)
 80182b2:	699b      	ldr	r3, [r3, #24]
 80182b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80182b6:	4b04      	ldr	r3, [pc, #16]	; (80182c8 <WIZCHIP_READ+0x94>)
 80182b8:	691b      	ldr	r3, [r3, #16]
 80182ba:	4798      	blx	r3
   return ret;
 80182bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80182be:	4618      	mov	r0, r3
 80182c0:	3710      	adds	r7, #16
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop
 80182c8:	200000c4 	.word	0x200000c4

080182cc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b084      	sub	sp, #16
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
 80182d4:	460b      	mov	r3, r1
 80182d6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80182d8:	4b22      	ldr	r3, [pc, #136]	; (8018364 <WIZCHIP_WRITE+0x98>)
 80182da:	68db      	ldr	r3, [r3, #12]
 80182dc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80182de:	4b21      	ldr	r3, [pc, #132]	; (8018364 <WIZCHIP_WRITE+0x98>)
 80182e0:	695b      	ldr	r3, [r3, #20]
 80182e2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f043 0304 	orr.w	r3, r3, #4
 80182ea:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80182ec:	4b1d      	ldr	r3, [pc, #116]	; (8018364 <WIZCHIP_WRITE+0x98>)
 80182ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d119      	bne.n	8018328 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80182f4:	4b1b      	ldr	r3, [pc, #108]	; (8018364 <WIZCHIP_WRITE+0x98>)
 80182f6:	6a1b      	ldr	r3, [r3, #32]
 80182f8:	687a      	ldr	r2, [r7, #4]
 80182fa:	0c12      	lsrs	r2, r2, #16
 80182fc:	b2d2      	uxtb	r2, r2
 80182fe:	4610      	mov	r0, r2
 8018300:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018302:	4b18      	ldr	r3, [pc, #96]	; (8018364 <WIZCHIP_WRITE+0x98>)
 8018304:	6a1b      	ldr	r3, [r3, #32]
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	0a12      	lsrs	r2, r2, #8
 801830a:	b2d2      	uxtb	r2, r2
 801830c:	4610      	mov	r0, r2
 801830e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018310:	4b14      	ldr	r3, [pc, #80]	; (8018364 <WIZCHIP_WRITE+0x98>)
 8018312:	6a1b      	ldr	r3, [r3, #32]
 8018314:	687a      	ldr	r2, [r7, #4]
 8018316:	b2d2      	uxtb	r2, r2
 8018318:	4610      	mov	r0, r2
 801831a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 801831c:	4b11      	ldr	r3, [pc, #68]	; (8018364 <WIZCHIP_WRITE+0x98>)
 801831e:	6a1b      	ldr	r3, [r3, #32]
 8018320:	78fa      	ldrb	r2, [r7, #3]
 8018322:	4610      	mov	r0, r2
 8018324:	4798      	blx	r3
 8018326:	e013      	b.n	8018350 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	0c1b      	lsrs	r3, r3, #16
 801832c:	b2db      	uxtb	r3, r3
 801832e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	0a1b      	lsrs	r3, r3, #8
 8018334:	b2db      	uxtb	r3, r3
 8018336:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	b2db      	uxtb	r3, r3
 801833c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 801833e:	78fb      	ldrb	r3, [r7, #3]
 8018340:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8018342:	4b08      	ldr	r3, [pc, #32]	; (8018364 <WIZCHIP_WRITE+0x98>)
 8018344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018346:	f107 020c 	add.w	r2, r7, #12
 801834a:	2104      	movs	r1, #4
 801834c:	4610      	mov	r0, r2
 801834e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018350:	4b04      	ldr	r3, [pc, #16]	; (8018364 <WIZCHIP_WRITE+0x98>)
 8018352:	699b      	ldr	r3, [r3, #24]
 8018354:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018356:	4b03      	ldr	r3, [pc, #12]	; (8018364 <WIZCHIP_WRITE+0x98>)
 8018358:	691b      	ldr	r3, [r3, #16]
 801835a:	4798      	blx	r3
}
 801835c:	bf00      	nop
 801835e:	3710      	adds	r7, #16
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}
 8018364:	200000c4 	.word	0x200000c4

08018368 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018368:	b590      	push	{r4, r7, lr}
 801836a:	b087      	sub	sp, #28
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	60b9      	str	r1, [r7, #8]
 8018372:	4613      	mov	r3, r2
 8018374:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018376:	4b2b      	ldr	r3, [pc, #172]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 8018378:	68db      	ldr	r3, [r3, #12]
 801837a:	4798      	blx	r3
   WIZCHIP.CS._select();
 801837c:	4b29      	ldr	r3, [pc, #164]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 801837e:	695b      	ldr	r3, [r3, #20]
 8018380:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018382:	4b28      	ldr	r3, [pc, #160]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 8018384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018386:	2b00      	cmp	r3, #0
 8018388:	d003      	beq.n	8018392 <WIZCHIP_READ_BUF+0x2a>
 801838a:	4b26      	ldr	r3, [pc, #152]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 801838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801838e:	2b00      	cmp	r3, #0
 8018390:	d126      	bne.n	80183e0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018392:	4b24      	ldr	r3, [pc, #144]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 8018394:	6a1b      	ldr	r3, [r3, #32]
 8018396:	68fa      	ldr	r2, [r7, #12]
 8018398:	0c12      	lsrs	r2, r2, #16
 801839a:	b2d2      	uxtb	r2, r2
 801839c:	4610      	mov	r0, r2
 801839e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80183a0:	4b20      	ldr	r3, [pc, #128]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 80183a2:	6a1b      	ldr	r3, [r3, #32]
 80183a4:	68fa      	ldr	r2, [r7, #12]
 80183a6:	0a12      	lsrs	r2, r2, #8
 80183a8:	b2d2      	uxtb	r2, r2
 80183aa:	4610      	mov	r0, r2
 80183ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80183ae:	4b1d      	ldr	r3, [pc, #116]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 80183b0:	6a1b      	ldr	r3, [r3, #32]
 80183b2:	68fa      	ldr	r2, [r7, #12]
 80183b4:	b2d2      	uxtb	r2, r2
 80183b6:	4610      	mov	r0, r2
 80183b8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80183ba:	2300      	movs	r3, #0
 80183bc:	82fb      	strh	r3, [r7, #22]
 80183be:	e00a      	b.n	80183d6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80183c0:	4b18      	ldr	r3, [pc, #96]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 80183c2:	69db      	ldr	r3, [r3, #28]
 80183c4:	8afa      	ldrh	r2, [r7, #22]
 80183c6:	68b9      	ldr	r1, [r7, #8]
 80183c8:	188c      	adds	r4, r1, r2
 80183ca:	4798      	blx	r3
 80183cc:	4603      	mov	r3, r0
 80183ce:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80183d0:	8afb      	ldrh	r3, [r7, #22]
 80183d2:	3301      	adds	r3, #1
 80183d4:	82fb      	strh	r3, [r7, #22]
 80183d6:	8afa      	ldrh	r2, [r7, #22]
 80183d8:	88fb      	ldrh	r3, [r7, #6]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d3f0      	bcc.n	80183c0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80183de:	e017      	b.n	8018410 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	0c1b      	lsrs	r3, r3, #16
 80183e4:	b2db      	uxtb	r3, r3
 80183e6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	0a1b      	lsrs	r3, r3, #8
 80183ec:	b2db      	uxtb	r3, r3
 80183ee:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	b2db      	uxtb	r3, r3
 80183f4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80183f6:	4b0b      	ldr	r3, [pc, #44]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 80183f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183fa:	f107 0210 	add.w	r2, r7, #16
 80183fe:	2103      	movs	r1, #3
 8018400:	4610      	mov	r0, r2
 8018402:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8018404:	4b07      	ldr	r3, [pc, #28]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 8018406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018408:	88fa      	ldrh	r2, [r7, #6]
 801840a:	4611      	mov	r1, r2
 801840c:	68b8      	ldr	r0, [r7, #8]
 801840e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018410:	4b04      	ldr	r3, [pc, #16]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 8018412:	699b      	ldr	r3, [r3, #24]
 8018414:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018416:	4b03      	ldr	r3, [pc, #12]	; (8018424 <WIZCHIP_READ_BUF+0xbc>)
 8018418:	691b      	ldr	r3, [r3, #16]
 801841a:	4798      	blx	r3
}
 801841c:	bf00      	nop
 801841e:	371c      	adds	r7, #28
 8018420:	46bd      	mov	sp, r7
 8018422:	bd90      	pop	{r4, r7, pc}
 8018424:	200000c4 	.word	0x200000c4

08018428 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b086      	sub	sp, #24
 801842c:	af00      	add	r7, sp, #0
 801842e:	60f8      	str	r0, [r7, #12]
 8018430:	60b9      	str	r1, [r7, #8]
 8018432:	4613      	mov	r3, r2
 8018434:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018436:	4b2b      	ldr	r3, [pc, #172]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8018438:	68db      	ldr	r3, [r3, #12]
 801843a:	4798      	blx	r3
   WIZCHIP.CS._select();
 801843c:	4b29      	ldr	r3, [pc, #164]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 801843e:	695b      	ldr	r3, [r3, #20]
 8018440:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	f043 0304 	orr.w	r3, r3, #4
 8018448:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801844a:	4b26      	ldr	r3, [pc, #152]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 801844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801844e:	2b00      	cmp	r3, #0
 8018450:	d126      	bne.n	80184a0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018452:	4b24      	ldr	r3, [pc, #144]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8018454:	6a1b      	ldr	r3, [r3, #32]
 8018456:	68fa      	ldr	r2, [r7, #12]
 8018458:	0c12      	lsrs	r2, r2, #16
 801845a:	b2d2      	uxtb	r2, r2
 801845c:	4610      	mov	r0, r2
 801845e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018460:	4b20      	ldr	r3, [pc, #128]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8018462:	6a1b      	ldr	r3, [r3, #32]
 8018464:	68fa      	ldr	r2, [r7, #12]
 8018466:	0a12      	lsrs	r2, r2, #8
 8018468:	b2d2      	uxtb	r2, r2
 801846a:	4610      	mov	r0, r2
 801846c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801846e:	4b1d      	ldr	r3, [pc, #116]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8018470:	6a1b      	ldr	r3, [r3, #32]
 8018472:	68fa      	ldr	r2, [r7, #12]
 8018474:	b2d2      	uxtb	r2, r2
 8018476:	4610      	mov	r0, r2
 8018478:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801847a:	2300      	movs	r3, #0
 801847c:	82fb      	strh	r3, [r7, #22]
 801847e:	e00a      	b.n	8018496 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8018480:	4b18      	ldr	r3, [pc, #96]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8018482:	6a1b      	ldr	r3, [r3, #32]
 8018484:	8afa      	ldrh	r2, [r7, #22]
 8018486:	68b9      	ldr	r1, [r7, #8]
 8018488:	440a      	add	r2, r1
 801848a:	7812      	ldrb	r2, [r2, #0]
 801848c:	4610      	mov	r0, r2
 801848e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018490:	8afb      	ldrh	r3, [r7, #22]
 8018492:	3301      	adds	r3, #1
 8018494:	82fb      	strh	r3, [r7, #22]
 8018496:	8afa      	ldrh	r2, [r7, #22]
 8018498:	88fb      	ldrh	r3, [r7, #6]
 801849a:	429a      	cmp	r2, r3
 801849c:	d3f0      	bcc.n	8018480 <WIZCHIP_WRITE_BUF+0x58>
 801849e:	e017      	b.n	80184d0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	0c1b      	lsrs	r3, r3, #16
 80184a4:	b2db      	uxtb	r3, r3
 80184a6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	0a1b      	lsrs	r3, r3, #8
 80184ac:	b2db      	uxtb	r3, r3
 80184ae:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	b2db      	uxtb	r3, r3
 80184b4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80184b6:	4b0b      	ldr	r3, [pc, #44]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80184b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184ba:	f107 0210 	add.w	r2, r7, #16
 80184be:	2103      	movs	r1, #3
 80184c0:	4610      	mov	r0, r2
 80184c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80184c4:	4b07      	ldr	r3, [pc, #28]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80184c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184c8:	88fa      	ldrh	r2, [r7, #6]
 80184ca:	4611      	mov	r1, r2
 80184cc:	68b8      	ldr	r0, [r7, #8]
 80184ce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80184d0:	4b04      	ldr	r3, [pc, #16]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80184d2:	699b      	ldr	r3, [r3, #24]
 80184d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80184d6:	4b03      	ldr	r3, [pc, #12]	; (80184e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80184d8:	691b      	ldr	r3, [r3, #16]
 80184da:	4798      	blx	r3
}
 80184dc:	bf00      	nop
 80184de:	3718      	adds	r7, #24
 80184e0:	46bd      	mov	sp, r7
 80184e2:	bd80      	pop	{r7, pc}
 80184e4:	200000c4 	.word	0x200000c4

080184e8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80184e8:	b590      	push	{r4, r7, lr}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	4603      	mov	r3, r0
 80184f0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80184f2:	2300      	movs	r3, #0
 80184f4:	81fb      	strh	r3, [r7, #14]
 80184f6:	2300      	movs	r3, #0
 80184f8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80184fa:	79fb      	ldrb	r3, [r7, #7]
 80184fc:	009b      	lsls	r3, r3, #2
 80184fe:	3301      	adds	r3, #1
 8018500:	00db      	lsls	r3, r3, #3
 8018502:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018506:	4618      	mov	r0, r3
 8018508:	f7ff fe94 	bl	8018234 <WIZCHIP_READ>
 801850c:	4603      	mov	r3, r0
 801850e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018510:	89bb      	ldrh	r3, [r7, #12]
 8018512:	021b      	lsls	r3, r3, #8
 8018514:	b29c      	uxth	r4, r3
 8018516:	79fb      	ldrb	r3, [r7, #7]
 8018518:	009b      	lsls	r3, r3, #2
 801851a:	3301      	adds	r3, #1
 801851c:	00db      	lsls	r3, r3, #3
 801851e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018522:	4618      	mov	r0, r3
 8018524:	f7ff fe86 	bl	8018234 <WIZCHIP_READ>
 8018528:	4603      	mov	r3, r0
 801852a:	b29b      	uxth	r3, r3
 801852c:	4423      	add	r3, r4
 801852e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018530:	89bb      	ldrh	r3, [r7, #12]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d01a      	beq.n	801856c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018536:	79fb      	ldrb	r3, [r7, #7]
 8018538:	009b      	lsls	r3, r3, #2
 801853a:	3301      	adds	r3, #1
 801853c:	00db      	lsls	r3, r3, #3
 801853e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018542:	4618      	mov	r0, r3
 8018544:	f7ff fe76 	bl	8018234 <WIZCHIP_READ>
 8018548:	4603      	mov	r3, r0
 801854a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801854c:	89fb      	ldrh	r3, [r7, #14]
 801854e:	021b      	lsls	r3, r3, #8
 8018550:	b29c      	uxth	r4, r3
 8018552:	79fb      	ldrb	r3, [r7, #7]
 8018554:	009b      	lsls	r3, r3, #2
 8018556:	3301      	adds	r3, #1
 8018558:	00db      	lsls	r3, r3, #3
 801855a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801855e:	4618      	mov	r0, r3
 8018560:	f7ff fe68 	bl	8018234 <WIZCHIP_READ>
 8018564:	4603      	mov	r3, r0
 8018566:	b29b      	uxth	r3, r3
 8018568:	4423      	add	r3, r4
 801856a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 801856c:	89fa      	ldrh	r2, [r7, #14]
 801856e:	89bb      	ldrh	r3, [r7, #12]
 8018570:	429a      	cmp	r2, r3
 8018572:	d1c2      	bne.n	80184fa <getSn_TX_FSR+0x12>
   return val;
 8018574:	89fb      	ldrh	r3, [r7, #14]
}
 8018576:	4618      	mov	r0, r3
 8018578:	3714      	adds	r7, #20
 801857a:	46bd      	mov	sp, r7
 801857c:	bd90      	pop	{r4, r7, pc}

0801857e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 801857e:	b590      	push	{r4, r7, lr}
 8018580:	b085      	sub	sp, #20
 8018582:	af00      	add	r7, sp, #0
 8018584:	4603      	mov	r3, r0
 8018586:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018588:	2300      	movs	r3, #0
 801858a:	81fb      	strh	r3, [r7, #14]
 801858c:	2300      	movs	r3, #0
 801858e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018590:	79fb      	ldrb	r3, [r7, #7]
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	3301      	adds	r3, #1
 8018596:	00db      	lsls	r3, r3, #3
 8018598:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801859c:	4618      	mov	r0, r3
 801859e:	f7ff fe49 	bl	8018234 <WIZCHIP_READ>
 80185a2:	4603      	mov	r3, r0
 80185a4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80185a6:	89bb      	ldrh	r3, [r7, #12]
 80185a8:	021b      	lsls	r3, r3, #8
 80185aa:	b29c      	uxth	r4, r3
 80185ac:	79fb      	ldrb	r3, [r7, #7]
 80185ae:	009b      	lsls	r3, r3, #2
 80185b0:	3301      	adds	r3, #1
 80185b2:	00db      	lsls	r3, r3, #3
 80185b4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7ff fe3b 	bl	8018234 <WIZCHIP_READ>
 80185be:	4603      	mov	r3, r0
 80185c0:	b29b      	uxth	r3, r3
 80185c2:	4423      	add	r3, r4
 80185c4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80185c6:	89bb      	ldrh	r3, [r7, #12]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d01a      	beq.n	8018602 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80185cc:	79fb      	ldrb	r3, [r7, #7]
 80185ce:	009b      	lsls	r3, r3, #2
 80185d0:	3301      	adds	r3, #1
 80185d2:	00db      	lsls	r3, r3, #3
 80185d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80185d8:	4618      	mov	r0, r3
 80185da:	f7ff fe2b 	bl	8018234 <WIZCHIP_READ>
 80185de:	4603      	mov	r3, r0
 80185e0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80185e2:	89fb      	ldrh	r3, [r7, #14]
 80185e4:	021b      	lsls	r3, r3, #8
 80185e6:	b29c      	uxth	r4, r3
 80185e8:	79fb      	ldrb	r3, [r7, #7]
 80185ea:	009b      	lsls	r3, r3, #2
 80185ec:	3301      	adds	r3, #1
 80185ee:	00db      	lsls	r3, r3, #3
 80185f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80185f4:	4618      	mov	r0, r3
 80185f6:	f7ff fe1d 	bl	8018234 <WIZCHIP_READ>
 80185fa:	4603      	mov	r3, r0
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	4423      	add	r3, r4
 8018600:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018602:	89fa      	ldrh	r2, [r7, #14]
 8018604:	89bb      	ldrh	r3, [r7, #12]
 8018606:	429a      	cmp	r2, r3
 8018608:	d1c2      	bne.n	8018590 <getSn_RX_RSR+0x12>
   return val;
 801860a:	89fb      	ldrh	r3, [r7, #14]
}
 801860c:	4618      	mov	r0, r3
 801860e:	3714      	adds	r7, #20
 8018610:	46bd      	mov	sp, r7
 8018612:	bd90      	pop	{r4, r7, pc}

08018614 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018614:	b590      	push	{r4, r7, lr}
 8018616:	b085      	sub	sp, #20
 8018618:	af00      	add	r7, sp, #0
 801861a:	4603      	mov	r3, r0
 801861c:	6039      	str	r1, [r7, #0]
 801861e:	71fb      	strb	r3, [r7, #7]
 8018620:	4613      	mov	r3, r2
 8018622:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018624:	2300      	movs	r3, #0
 8018626:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018628:	2300      	movs	r3, #0
 801862a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 801862c:	88bb      	ldrh	r3, [r7, #4]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d048      	beq.n	80186c4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8018632:	79fb      	ldrb	r3, [r7, #7]
 8018634:	009b      	lsls	r3, r3, #2
 8018636:	3301      	adds	r3, #1
 8018638:	00db      	lsls	r3, r3, #3
 801863a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801863e:	4618      	mov	r0, r3
 8018640:	f7ff fdf8 	bl	8018234 <WIZCHIP_READ>
 8018644:	4603      	mov	r3, r0
 8018646:	b29b      	uxth	r3, r3
 8018648:	021b      	lsls	r3, r3, #8
 801864a:	b29c      	uxth	r4, r3
 801864c:	79fb      	ldrb	r3, [r7, #7]
 801864e:	009b      	lsls	r3, r3, #2
 8018650:	3301      	adds	r3, #1
 8018652:	00db      	lsls	r3, r3, #3
 8018654:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018658:	4618      	mov	r0, r3
 801865a:	f7ff fdeb 	bl	8018234 <WIZCHIP_READ>
 801865e:	4603      	mov	r3, r0
 8018660:	b29b      	uxth	r3, r3
 8018662:	4423      	add	r3, r4
 8018664:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8018666:	89fb      	ldrh	r3, [r7, #14]
 8018668:	021b      	lsls	r3, r3, #8
 801866a:	79fa      	ldrb	r2, [r7, #7]
 801866c:	0092      	lsls	r2, r2, #2
 801866e:	3202      	adds	r2, #2
 8018670:	00d2      	lsls	r2, r2, #3
 8018672:	4413      	add	r3, r2
 8018674:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8018676:	88bb      	ldrh	r3, [r7, #4]
 8018678:	461a      	mov	r2, r3
 801867a:	6839      	ldr	r1, [r7, #0]
 801867c:	68b8      	ldr	r0, [r7, #8]
 801867e:	f7ff fed3 	bl	8018428 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8018682:	89fa      	ldrh	r2, [r7, #14]
 8018684:	88bb      	ldrh	r3, [r7, #4]
 8018686:	4413      	add	r3, r2
 8018688:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 801868a:	79fb      	ldrb	r3, [r7, #7]
 801868c:	009b      	lsls	r3, r3, #2
 801868e:	3301      	adds	r3, #1
 8018690:	00db      	lsls	r3, r3, #3
 8018692:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018696:	461a      	mov	r2, r3
 8018698:	89fb      	ldrh	r3, [r7, #14]
 801869a:	0a1b      	lsrs	r3, r3, #8
 801869c:	b29b      	uxth	r3, r3
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	4619      	mov	r1, r3
 80186a2:	4610      	mov	r0, r2
 80186a4:	f7ff fe12 	bl	80182cc <WIZCHIP_WRITE>
 80186a8:	79fb      	ldrb	r3, [r7, #7]
 80186aa:	009b      	lsls	r3, r3, #2
 80186ac:	3301      	adds	r3, #1
 80186ae:	00db      	lsls	r3, r3, #3
 80186b0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80186b4:	461a      	mov	r2, r3
 80186b6:	89fb      	ldrh	r3, [r7, #14]
 80186b8:	b2db      	uxtb	r3, r3
 80186ba:	4619      	mov	r1, r3
 80186bc:	4610      	mov	r0, r2
 80186be:	f7ff fe05 	bl	80182cc <WIZCHIP_WRITE>
 80186c2:	e000      	b.n	80186c6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80186c4:	bf00      	nop
}
 80186c6:	3714      	adds	r7, #20
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd90      	pop	{r4, r7, pc}

080186cc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80186cc:	b590      	push	{r4, r7, lr}
 80186ce:	b085      	sub	sp, #20
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	4603      	mov	r3, r0
 80186d4:	6039      	str	r1, [r7, #0]
 80186d6:	71fb      	strb	r3, [r7, #7]
 80186d8:	4613      	mov	r3, r2
 80186da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80186dc:	2300      	movs	r3, #0
 80186de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80186e0:	2300      	movs	r3, #0
 80186e2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80186e4:	88bb      	ldrh	r3, [r7, #4]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d048      	beq.n	801877c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80186ea:	79fb      	ldrb	r3, [r7, #7]
 80186ec:	009b      	lsls	r3, r3, #2
 80186ee:	3301      	adds	r3, #1
 80186f0:	00db      	lsls	r3, r3, #3
 80186f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7ff fd9c 	bl	8018234 <WIZCHIP_READ>
 80186fc:	4603      	mov	r3, r0
 80186fe:	b29b      	uxth	r3, r3
 8018700:	021b      	lsls	r3, r3, #8
 8018702:	b29c      	uxth	r4, r3
 8018704:	79fb      	ldrb	r3, [r7, #7]
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	3301      	adds	r3, #1
 801870a:	00db      	lsls	r3, r3, #3
 801870c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018710:	4618      	mov	r0, r3
 8018712:	f7ff fd8f 	bl	8018234 <WIZCHIP_READ>
 8018716:	4603      	mov	r3, r0
 8018718:	b29b      	uxth	r3, r3
 801871a:	4423      	add	r3, r4
 801871c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 801871e:	89fb      	ldrh	r3, [r7, #14]
 8018720:	021b      	lsls	r3, r3, #8
 8018722:	79fa      	ldrb	r2, [r7, #7]
 8018724:	0092      	lsls	r2, r2, #2
 8018726:	3203      	adds	r2, #3
 8018728:	00d2      	lsls	r2, r2, #3
 801872a:	4413      	add	r3, r2
 801872c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 801872e:	88bb      	ldrh	r3, [r7, #4]
 8018730:	461a      	mov	r2, r3
 8018732:	6839      	ldr	r1, [r7, #0]
 8018734:	68b8      	ldr	r0, [r7, #8]
 8018736:	f7ff fe17 	bl	8018368 <WIZCHIP_READ_BUF>
   ptr += len;
 801873a:	89fa      	ldrh	r2, [r7, #14]
 801873c:	88bb      	ldrh	r3, [r7, #4]
 801873e:	4413      	add	r3, r2
 8018740:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018742:	79fb      	ldrb	r3, [r7, #7]
 8018744:	009b      	lsls	r3, r3, #2
 8018746:	3301      	adds	r3, #1
 8018748:	00db      	lsls	r3, r3, #3
 801874a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801874e:	461a      	mov	r2, r3
 8018750:	89fb      	ldrh	r3, [r7, #14]
 8018752:	0a1b      	lsrs	r3, r3, #8
 8018754:	b29b      	uxth	r3, r3
 8018756:	b2db      	uxtb	r3, r3
 8018758:	4619      	mov	r1, r3
 801875a:	4610      	mov	r0, r2
 801875c:	f7ff fdb6 	bl	80182cc <WIZCHIP_WRITE>
 8018760:	79fb      	ldrb	r3, [r7, #7]
 8018762:	009b      	lsls	r3, r3, #2
 8018764:	3301      	adds	r3, #1
 8018766:	00db      	lsls	r3, r3, #3
 8018768:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 801876c:	461a      	mov	r2, r3
 801876e:	89fb      	ldrh	r3, [r7, #14]
 8018770:	b2db      	uxtb	r3, r3
 8018772:	4619      	mov	r1, r3
 8018774:	4610      	mov	r0, r2
 8018776:	f7ff fda9 	bl	80182cc <WIZCHIP_WRITE>
 801877a:	e000      	b.n	801877e <wiz_recv_data+0xb2>
   if(len == 0) return;
 801877c:	bf00      	nop
}
 801877e:	3714      	adds	r7, #20
 8018780:	46bd      	mov	sp, r7
 8018782:	bd90      	pop	{r4, r7, pc}

08018784 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018784:	b590      	push	{r4, r7, lr}
 8018786:	b085      	sub	sp, #20
 8018788:	af00      	add	r7, sp, #0
 801878a:	4603      	mov	r3, r0
 801878c:	460a      	mov	r2, r1
 801878e:	71fb      	strb	r3, [r7, #7]
 8018790:	4613      	mov	r3, r2
 8018792:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018794:	2300      	movs	r3, #0
 8018796:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018798:	79fb      	ldrb	r3, [r7, #7]
 801879a:	009b      	lsls	r3, r3, #2
 801879c:	3301      	adds	r3, #1
 801879e:	00db      	lsls	r3, r3, #3
 80187a0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80187a4:	4618      	mov	r0, r3
 80187a6:	f7ff fd45 	bl	8018234 <WIZCHIP_READ>
 80187aa:	4603      	mov	r3, r0
 80187ac:	b29b      	uxth	r3, r3
 80187ae:	021b      	lsls	r3, r3, #8
 80187b0:	b29c      	uxth	r4, r3
 80187b2:	79fb      	ldrb	r3, [r7, #7]
 80187b4:	009b      	lsls	r3, r3, #2
 80187b6:	3301      	adds	r3, #1
 80187b8:	00db      	lsls	r3, r3, #3
 80187ba:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80187be:	4618      	mov	r0, r3
 80187c0:	f7ff fd38 	bl	8018234 <WIZCHIP_READ>
 80187c4:	4603      	mov	r3, r0
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	4423      	add	r3, r4
 80187ca:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80187cc:	89fa      	ldrh	r2, [r7, #14]
 80187ce:	88bb      	ldrh	r3, [r7, #4]
 80187d0:	4413      	add	r3, r2
 80187d2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80187d4:	79fb      	ldrb	r3, [r7, #7]
 80187d6:	009b      	lsls	r3, r3, #2
 80187d8:	3301      	adds	r3, #1
 80187da:	00db      	lsls	r3, r3, #3
 80187dc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80187e0:	461a      	mov	r2, r3
 80187e2:	89fb      	ldrh	r3, [r7, #14]
 80187e4:	0a1b      	lsrs	r3, r3, #8
 80187e6:	b29b      	uxth	r3, r3
 80187e8:	b2db      	uxtb	r3, r3
 80187ea:	4619      	mov	r1, r3
 80187ec:	4610      	mov	r0, r2
 80187ee:	f7ff fd6d 	bl	80182cc <WIZCHIP_WRITE>
 80187f2:	79fb      	ldrb	r3, [r7, #7]
 80187f4:	009b      	lsls	r3, r3, #2
 80187f6:	3301      	adds	r3, #1
 80187f8:	00db      	lsls	r3, r3, #3
 80187fa:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80187fe:	461a      	mov	r2, r3
 8018800:	89fb      	ldrh	r3, [r7, #14]
 8018802:	b2db      	uxtb	r3, r3
 8018804:	4619      	mov	r1, r3
 8018806:	4610      	mov	r0, r2
 8018808:	f7ff fd60 	bl	80182cc <WIZCHIP_WRITE>
}
 801880c:	bf00      	nop
 801880e:	3714      	adds	r7, #20
 8018810:	46bd      	mov	sp, r7
 8018812:	bd90      	pop	{r4, r7, pc}

08018814 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018814:	b590      	push	{r4, r7, lr}
 8018816:	b085      	sub	sp, #20
 8018818:	af00      	add	r7, sp, #0
 801881a:	4604      	mov	r4, r0
 801881c:	4608      	mov	r0, r1
 801881e:	4611      	mov	r1, r2
 8018820:	461a      	mov	r2, r3
 8018822:	4623      	mov	r3, r4
 8018824:	71fb      	strb	r3, [r7, #7]
 8018826:	4603      	mov	r3, r0
 8018828:	71bb      	strb	r3, [r7, #6]
 801882a:	460b      	mov	r3, r1
 801882c:	80bb      	strh	r3, [r7, #4]
 801882e:	4613      	mov	r3, r2
 8018830:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018832:	79fb      	ldrb	r3, [r7, #7]
 8018834:	2b08      	cmp	r3, #8
 8018836:	d902      	bls.n	801883e <socket+0x2a>
 8018838:	f04f 33ff 	mov.w	r3, #4294967295
 801883c:	e0f0      	b.n	8018a20 <socket+0x20c>
	switch(protocol)
 801883e:	79bb      	ldrb	r3, [r7, #6]
 8018840:	2b01      	cmp	r3, #1
 8018842:	d005      	beq.n	8018850 <socket+0x3c>
 8018844:	2b00      	cmp	r3, #0
 8018846:	dd11      	ble.n	801886c <socket+0x58>
 8018848:	3b02      	subs	r3, #2
 801884a:	2b02      	cmp	r3, #2
 801884c:	d80e      	bhi.n	801886c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 801884e:	e011      	b.n	8018874 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018850:	f107 030c 	add.w	r3, r7, #12
 8018854:	2204      	movs	r2, #4
 8018856:	4619      	mov	r1, r3
 8018858:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801885c:	f7ff fd84 	bl	8018368 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d105      	bne.n	8018872 <socket+0x5e>
 8018866:	f06f 0302 	mvn.w	r3, #2
 801886a:	e0d9      	b.n	8018a20 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 801886c:	f06f 0304 	mvn.w	r3, #4
 8018870:	e0d6      	b.n	8018a20 <socket+0x20c>
	    break;
 8018872:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018874:	78fb      	ldrb	r3, [r7, #3]
 8018876:	f003 0304 	and.w	r3, r3, #4
 801887a:	2b00      	cmp	r3, #0
 801887c:	d002      	beq.n	8018884 <socket+0x70>
 801887e:	f06f 0305 	mvn.w	r3, #5
 8018882:	e0cd      	b.n	8018a20 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018884:	78fb      	ldrb	r3, [r7, #3]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d028      	beq.n	80188dc <socket+0xc8>
	{
   	switch(protocol)
 801888a:	79bb      	ldrb	r3, [r7, #6]
 801888c:	2b01      	cmp	r3, #1
 801888e:	d002      	beq.n	8018896 <socket+0x82>
 8018890:	2b02      	cmp	r3, #2
 8018892:	d008      	beq.n	80188a6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018894:	e022      	b.n	80188dc <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018896:	78fb      	ldrb	r3, [r7, #3]
 8018898:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801889c:	2b00      	cmp	r3, #0
 801889e:	d11a      	bne.n	80188d6 <socket+0xc2>
 80188a0:	f06f 0305 	mvn.w	r3, #5
 80188a4:	e0bc      	b.n	8018a20 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80188a6:	78fb      	ldrb	r3, [r7, #3]
 80188a8:	f003 0320 	and.w	r3, r3, #32
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d006      	beq.n	80188be <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80188b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	db02      	blt.n	80188be <socket+0xaa>
 80188b8:	f06f 0305 	mvn.w	r3, #5
 80188bc:	e0b0      	b.n	8018a20 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80188be:	78fb      	ldrb	r3, [r7, #3]
 80188c0:	f003 0310 	and.w	r3, r3, #16
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d008      	beq.n	80188da <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80188c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	db04      	blt.n	80188da <socket+0xc6>
 80188d0:	f06f 0305 	mvn.w	r3, #5
 80188d4:	e0a4      	b.n	8018a20 <socket+0x20c>
   	      break;
 80188d6:	bf00      	nop
 80188d8:	e000      	b.n	80188dc <socket+0xc8>
   	      break;
 80188da:	bf00      	nop
   	}
   }
	close(sn);
 80188dc:	79fb      	ldrb	r3, [r7, #7]
 80188de:	4618      	mov	r0, r3
 80188e0:	f000 f8ac 	bl	8018a3c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80188e4:	79fb      	ldrb	r3, [r7, #7]
 80188e6:	009b      	lsls	r3, r3, #2
 80188e8:	3301      	adds	r3, #1
 80188ea:	00db      	lsls	r3, r3, #3
 80188ec:	4618      	mov	r0, r3
 80188ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80188f2:	f023 030f 	bic.w	r3, r3, #15
 80188f6:	b25a      	sxtb	r2, r3
 80188f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80188fc:	4313      	orrs	r3, r2
 80188fe:	b25b      	sxtb	r3, r3
 8018900:	b2db      	uxtb	r3, r3
 8018902:	4619      	mov	r1, r3
 8018904:	f7ff fce2 	bl	80182cc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8018908:	88bb      	ldrh	r3, [r7, #4]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d110      	bne.n	8018930 <socket+0x11c>
	{
	   port = sock_any_port++;
 801890e:	4b46      	ldr	r3, [pc, #280]	; (8018a28 <socket+0x214>)
 8018910:	881b      	ldrh	r3, [r3, #0]
 8018912:	1c5a      	adds	r2, r3, #1
 8018914:	b291      	uxth	r1, r2
 8018916:	4a44      	ldr	r2, [pc, #272]	; (8018a28 <socket+0x214>)
 8018918:	8011      	strh	r1, [r2, #0]
 801891a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801891c:	4b42      	ldr	r3, [pc, #264]	; (8018a28 <socket+0x214>)
 801891e:	881b      	ldrh	r3, [r3, #0]
 8018920:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018924:	4293      	cmp	r3, r2
 8018926:	d103      	bne.n	8018930 <socket+0x11c>
 8018928:	4b3f      	ldr	r3, [pc, #252]	; (8018a28 <socket+0x214>)
 801892a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801892e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8018930:	79fb      	ldrb	r3, [r7, #7]
 8018932:	009b      	lsls	r3, r3, #2
 8018934:	3301      	adds	r3, #1
 8018936:	00db      	lsls	r3, r3, #3
 8018938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801893c:	461a      	mov	r2, r3
 801893e:	88bb      	ldrh	r3, [r7, #4]
 8018940:	0a1b      	lsrs	r3, r3, #8
 8018942:	b29b      	uxth	r3, r3
 8018944:	b2db      	uxtb	r3, r3
 8018946:	4619      	mov	r1, r3
 8018948:	4610      	mov	r0, r2
 801894a:	f7ff fcbf 	bl	80182cc <WIZCHIP_WRITE>
 801894e:	79fb      	ldrb	r3, [r7, #7]
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	3301      	adds	r3, #1
 8018954:	00db      	lsls	r3, r3, #3
 8018956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801895a:	461a      	mov	r2, r3
 801895c:	88bb      	ldrh	r3, [r7, #4]
 801895e:	b2db      	uxtb	r3, r3
 8018960:	4619      	mov	r1, r3
 8018962:	4610      	mov	r0, r2
 8018964:	f7ff fcb2 	bl	80182cc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8018968:	79fb      	ldrb	r3, [r7, #7]
 801896a:	009b      	lsls	r3, r3, #2
 801896c:	3301      	adds	r3, #1
 801896e:	00db      	lsls	r3, r3, #3
 8018970:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018974:	2101      	movs	r1, #1
 8018976:	4618      	mov	r0, r3
 8018978:	f7ff fca8 	bl	80182cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801897c:	bf00      	nop
 801897e:	79fb      	ldrb	r3, [r7, #7]
 8018980:	009b      	lsls	r3, r3, #2
 8018982:	3301      	adds	r3, #1
 8018984:	00db      	lsls	r3, r3, #3
 8018986:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801898a:	4618      	mov	r0, r3
 801898c:	f7ff fc52 	bl	8018234 <WIZCHIP_READ>
 8018990:	4603      	mov	r3, r0
 8018992:	2b00      	cmp	r3, #0
 8018994:	d1f3      	bne.n	801897e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8018996:	79fb      	ldrb	r3, [r7, #7]
 8018998:	2201      	movs	r2, #1
 801899a:	fa02 f303 	lsl.w	r3, r2, r3
 801899e:	b21b      	sxth	r3, r3
 80189a0:	43db      	mvns	r3, r3
 80189a2:	b21a      	sxth	r2, r3
 80189a4:	4b21      	ldr	r3, [pc, #132]	; (8018a2c <socket+0x218>)
 80189a6:	881b      	ldrh	r3, [r3, #0]
 80189a8:	b21b      	sxth	r3, r3
 80189aa:	4013      	ands	r3, r2
 80189ac:	b21b      	sxth	r3, r3
 80189ae:	b29a      	uxth	r2, r3
 80189b0:	4b1e      	ldr	r3, [pc, #120]	; (8018a2c <socket+0x218>)
 80189b2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80189b4:	78fb      	ldrb	r3, [r7, #3]
 80189b6:	f003 0201 	and.w	r2, r3, #1
 80189ba:	79fb      	ldrb	r3, [r7, #7]
 80189bc:	fa02 f303 	lsl.w	r3, r2, r3
 80189c0:	b21a      	sxth	r2, r3
 80189c2:	4b1a      	ldr	r3, [pc, #104]	; (8018a2c <socket+0x218>)
 80189c4:	881b      	ldrh	r3, [r3, #0]
 80189c6:	b21b      	sxth	r3, r3
 80189c8:	4313      	orrs	r3, r2
 80189ca:	b21b      	sxth	r3, r3
 80189cc:	b29a      	uxth	r2, r3
 80189ce:	4b17      	ldr	r3, [pc, #92]	; (8018a2c <socket+0x218>)
 80189d0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80189d2:	79fb      	ldrb	r3, [r7, #7]
 80189d4:	2201      	movs	r2, #1
 80189d6:	fa02 f303 	lsl.w	r3, r2, r3
 80189da:	b21b      	sxth	r3, r3
 80189dc:	43db      	mvns	r3, r3
 80189de:	b21a      	sxth	r2, r3
 80189e0:	4b13      	ldr	r3, [pc, #76]	; (8018a30 <socket+0x21c>)
 80189e2:	881b      	ldrh	r3, [r3, #0]
 80189e4:	b21b      	sxth	r3, r3
 80189e6:	4013      	ands	r3, r2
 80189e8:	b21b      	sxth	r3, r3
 80189ea:	b29a      	uxth	r2, r3
 80189ec:	4b10      	ldr	r3, [pc, #64]	; (8018a30 <socket+0x21c>)
 80189ee:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80189f0:	79fb      	ldrb	r3, [r7, #7]
 80189f2:	4a10      	ldr	r2, [pc, #64]	; (8018a34 <socket+0x220>)
 80189f4:	2100      	movs	r1, #0
 80189f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80189fa:	79fb      	ldrb	r3, [r7, #7]
 80189fc:	4a0e      	ldr	r2, [pc, #56]	; (8018a38 <socket+0x224>)
 80189fe:	2100      	movs	r1, #0
 8018a00:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8018a02:	bf00      	nop
 8018a04:	79fb      	ldrb	r3, [r7, #7]
 8018a06:	009b      	lsls	r3, r3, #2
 8018a08:	3301      	adds	r3, #1
 8018a0a:	00db      	lsls	r3, r3, #3
 8018a0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018a10:	4618      	mov	r0, r3
 8018a12:	f7ff fc0f 	bl	8018234 <WIZCHIP_READ>
 8018a16:	4603      	mov	r3, r0
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d0f3      	beq.n	8018a04 <socket+0x1f0>
   return (int8_t)sn;
 8018a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8018a20:	4618      	mov	r0, r3
 8018a22:	3714      	adds	r7, #20
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd90      	pop	{r4, r7, pc}
 8018a28:	200000c2 	.word	0x200000c2
 8018a2c:	20000950 	.word	0x20000950
 8018a30:	20000952 	.word	0x20000952
 8018a34:	20000954 	.word	0x20000954
 8018a38:	20000964 	.word	0x20000964

08018a3c <close>:

int8_t close(uint8_t sn)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b082      	sub	sp, #8
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	4603      	mov	r3, r0
 8018a44:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018a46:	79fb      	ldrb	r3, [r7, #7]
 8018a48:	2b08      	cmp	r3, #8
 8018a4a:	d902      	bls.n	8018a52 <close+0x16>
 8018a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8018a50:	e055      	b.n	8018afe <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8018a52:	79fb      	ldrb	r3, [r7, #7]
 8018a54:	009b      	lsls	r3, r3, #2
 8018a56:	3301      	adds	r3, #1
 8018a58:	00db      	lsls	r3, r3, #3
 8018a5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018a5e:	2110      	movs	r1, #16
 8018a60:	4618      	mov	r0, r3
 8018a62:	f7ff fc33 	bl	80182cc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8018a66:	bf00      	nop
 8018a68:	79fb      	ldrb	r3, [r7, #7]
 8018a6a:	009b      	lsls	r3, r3, #2
 8018a6c:	3301      	adds	r3, #1
 8018a6e:	00db      	lsls	r3, r3, #3
 8018a70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018a74:	4618      	mov	r0, r3
 8018a76:	f7ff fbdd 	bl	8018234 <WIZCHIP_READ>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d1f3      	bne.n	8018a68 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8018a80:	79fb      	ldrb	r3, [r7, #7]
 8018a82:	009b      	lsls	r3, r3, #2
 8018a84:	3301      	adds	r3, #1
 8018a86:	00db      	lsls	r3, r3, #3
 8018a88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018a8c:	211f      	movs	r1, #31
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7ff fc1c 	bl	80182cc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8018a94:	79fb      	ldrb	r3, [r7, #7]
 8018a96:	2201      	movs	r2, #1
 8018a98:	fa02 f303 	lsl.w	r3, r2, r3
 8018a9c:	b21b      	sxth	r3, r3
 8018a9e:	43db      	mvns	r3, r3
 8018aa0:	b21a      	sxth	r2, r3
 8018aa2:	4b19      	ldr	r3, [pc, #100]	; (8018b08 <close+0xcc>)
 8018aa4:	881b      	ldrh	r3, [r3, #0]
 8018aa6:	b21b      	sxth	r3, r3
 8018aa8:	4013      	ands	r3, r2
 8018aaa:	b21b      	sxth	r3, r3
 8018aac:	b29a      	uxth	r2, r3
 8018aae:	4b16      	ldr	r3, [pc, #88]	; (8018b08 <close+0xcc>)
 8018ab0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8018ab2:	79fb      	ldrb	r3, [r7, #7]
 8018ab4:	2201      	movs	r2, #1
 8018ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8018aba:	b21b      	sxth	r3, r3
 8018abc:	43db      	mvns	r3, r3
 8018abe:	b21a      	sxth	r2, r3
 8018ac0:	4b12      	ldr	r3, [pc, #72]	; (8018b0c <close+0xd0>)
 8018ac2:	881b      	ldrh	r3, [r3, #0]
 8018ac4:	b21b      	sxth	r3, r3
 8018ac6:	4013      	ands	r3, r2
 8018ac8:	b21b      	sxth	r3, r3
 8018aca:	b29a      	uxth	r2, r3
 8018acc:	4b0f      	ldr	r3, [pc, #60]	; (8018b0c <close+0xd0>)
 8018ace:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8018ad0:	79fb      	ldrb	r3, [r7, #7]
 8018ad2:	4a0f      	ldr	r2, [pc, #60]	; (8018b10 <close+0xd4>)
 8018ad4:	2100      	movs	r1, #0
 8018ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8018ada:	79fb      	ldrb	r3, [r7, #7]
 8018adc:	4a0d      	ldr	r2, [pc, #52]	; (8018b14 <close+0xd8>)
 8018ade:	2100      	movs	r1, #0
 8018ae0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8018ae2:	bf00      	nop
 8018ae4:	79fb      	ldrb	r3, [r7, #7]
 8018ae6:	009b      	lsls	r3, r3, #2
 8018ae8:	3301      	adds	r3, #1
 8018aea:	00db      	lsls	r3, r3, #3
 8018aec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018af0:	4618      	mov	r0, r3
 8018af2:	f7ff fb9f 	bl	8018234 <WIZCHIP_READ>
 8018af6:	4603      	mov	r3, r0
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d1f3      	bne.n	8018ae4 <close+0xa8>
	return SOCK_OK;
 8018afc:	2301      	movs	r3, #1
}
 8018afe:	4618      	mov	r0, r3
 8018b00:	3708      	adds	r7, #8
 8018b02:	46bd      	mov	sp, r7
 8018b04:	bd80      	pop	{r7, pc}
 8018b06:	bf00      	nop
 8018b08:	20000950 	.word	0x20000950
 8018b0c:	20000952 	.word	0x20000952
 8018b10:	20000954 	.word	0x20000954
 8018b14:	20000964 	.word	0x20000964

08018b18 <listen>:

int8_t listen(uint8_t sn)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	4603      	mov	r3, r0
 8018b20:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018b22:	79fb      	ldrb	r3, [r7, #7]
 8018b24:	2b08      	cmp	r3, #8
 8018b26:	d902      	bls.n	8018b2e <listen+0x16>
 8018b28:	f04f 33ff 	mov.w	r3, #4294967295
 8018b2c:	e049      	b.n	8018bc2 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018b2e:	79fb      	ldrb	r3, [r7, #7]
 8018b30:	009b      	lsls	r3, r3, #2
 8018b32:	3301      	adds	r3, #1
 8018b34:	00db      	lsls	r3, r3, #3
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7ff fb7c 	bl	8018234 <WIZCHIP_READ>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	f003 030f 	and.w	r3, r3, #15
 8018b42:	2b01      	cmp	r3, #1
 8018b44:	d002      	beq.n	8018b4c <listen+0x34>
 8018b46:	f06f 0304 	mvn.w	r3, #4
 8018b4a:	e03a      	b.n	8018bc2 <listen+0xaa>
	CHECK_SOCKINIT();
 8018b4c:	79fb      	ldrb	r3, [r7, #7]
 8018b4e:	009b      	lsls	r3, r3, #2
 8018b50:	3301      	adds	r3, #1
 8018b52:	00db      	lsls	r3, r3, #3
 8018b54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7ff fb6b 	bl	8018234 <WIZCHIP_READ>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	2b13      	cmp	r3, #19
 8018b62:	d002      	beq.n	8018b6a <listen+0x52>
 8018b64:	f06f 0302 	mvn.w	r3, #2
 8018b68:	e02b      	b.n	8018bc2 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8018b6a:	79fb      	ldrb	r3, [r7, #7]
 8018b6c:	009b      	lsls	r3, r3, #2
 8018b6e:	3301      	adds	r3, #1
 8018b70:	00db      	lsls	r3, r3, #3
 8018b72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018b76:	2102      	movs	r1, #2
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7ff fba7 	bl	80182cc <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8018b7e:	bf00      	nop
 8018b80:	79fb      	ldrb	r3, [r7, #7]
 8018b82:	009b      	lsls	r3, r3, #2
 8018b84:	3301      	adds	r3, #1
 8018b86:	00db      	lsls	r3, r3, #3
 8018b88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	f7ff fb51 	bl	8018234 <WIZCHIP_READ>
 8018b92:	4603      	mov	r3, r0
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d1f3      	bne.n	8018b80 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018b98:	e006      	b.n	8018ba8 <listen+0x90>
   {
         close(sn);
 8018b9a:	79fb      	ldrb	r3, [r7, #7]
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	f7ff ff4d 	bl	8018a3c <close>
         return SOCKERR_SOCKCLOSED;
 8018ba2:	f06f 0303 	mvn.w	r3, #3
 8018ba6:	e00c      	b.n	8018bc2 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018ba8:	79fb      	ldrb	r3, [r7, #7]
 8018baa:	009b      	lsls	r3, r3, #2
 8018bac:	3301      	adds	r3, #1
 8018bae:	00db      	lsls	r3, r3, #3
 8018bb0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f7ff fb3d 	bl	8018234 <WIZCHIP_READ>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	2b14      	cmp	r3, #20
 8018bbe:	d1ec      	bne.n	8018b9a <listen+0x82>
   }
   return SOCK_OK;
 8018bc0:	2301      	movs	r3, #1
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	3708      	adds	r7, #8
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
	...

08018bcc <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b084      	sub	sp, #16
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	6039      	str	r1, [r7, #0]
 8018bd6:	71fb      	strb	r3, [r7, #7]
 8018bd8:	4613      	mov	r3, r2
 8018bda:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8018bdc:	79fb      	ldrb	r3, [r7, #7]
 8018bde:	2b08      	cmp	r3, #8
 8018be0:	d902      	bls.n	8018be8 <connect+0x1c>
 8018be2:	f04f 33ff 	mov.w	r3, #4294967295
 8018be6:	e0c6      	b.n	8018d76 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018be8:	79fb      	ldrb	r3, [r7, #7]
 8018bea:	009b      	lsls	r3, r3, #2
 8018bec:	3301      	adds	r3, #1
 8018bee:	00db      	lsls	r3, r3, #3
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f7ff fb1f 	bl	8018234 <WIZCHIP_READ>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	f003 030f 	and.w	r3, r3, #15
 8018bfc:	2b01      	cmp	r3, #1
 8018bfe:	d002      	beq.n	8018c06 <connect+0x3a>
 8018c00:	f06f 0304 	mvn.w	r3, #4
 8018c04:	e0b7      	b.n	8018d76 <connect+0x1aa>
   CHECK_SOCKINIT();
 8018c06:	79fb      	ldrb	r3, [r7, #7]
 8018c08:	009b      	lsls	r3, r3, #2
 8018c0a:	3301      	adds	r3, #1
 8018c0c:	00db      	lsls	r3, r3, #3
 8018c0e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018c12:	4618      	mov	r0, r3
 8018c14:	f7ff fb0e 	bl	8018234 <WIZCHIP_READ>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	2b13      	cmp	r3, #19
 8018c1c:	d002      	beq.n	8018c24 <connect+0x58>
 8018c1e:	f06f 0302 	mvn.w	r3, #2
 8018c22:	e0a8      	b.n	8018d76 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8018c24:	683b      	ldr	r3, [r7, #0]
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	021b      	lsls	r3, r3, #8
 8018c2e:	683a      	ldr	r2, [r7, #0]
 8018c30:	3201      	adds	r2, #1
 8018c32:	7812      	ldrb	r2, [r2, #0]
 8018c34:	4413      	add	r3, r2
 8018c36:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	021b      	lsls	r3, r3, #8
 8018c3c:	683a      	ldr	r2, [r7, #0]
 8018c3e:	3202      	adds	r2, #2
 8018c40:	7812      	ldrb	r2, [r2, #0]
 8018c42:	4413      	add	r3, r2
 8018c44:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	021b      	lsls	r3, r3, #8
 8018c4a:	683a      	ldr	r2, [r7, #0]
 8018c4c:	3203      	adds	r2, #3
 8018c4e:	7812      	ldrb	r2, [r2, #0]
 8018c50:	4413      	add	r3, r2
 8018c52:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c5a:	d002      	beq.n	8018c62 <connect+0x96>
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d102      	bne.n	8018c68 <connect+0x9c>
 8018c62:	f06f 030b 	mvn.w	r3, #11
 8018c66:	e086      	b.n	8018d76 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8018c68:	88bb      	ldrh	r3, [r7, #4]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d102      	bne.n	8018c74 <connect+0xa8>
 8018c6e:	f06f 030a 	mvn.w	r3, #10
 8018c72:	e080      	b.n	8018d76 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8018c74:	79fb      	ldrb	r3, [r7, #7]
 8018c76:	009b      	lsls	r3, r3, #2
 8018c78:	3301      	adds	r3, #1
 8018c7a:	00db      	lsls	r3, r3, #3
 8018c7c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8018c80:	2204      	movs	r2, #4
 8018c82:	6839      	ldr	r1, [r7, #0]
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7ff fbcf 	bl	8018428 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8018c8a:	79fb      	ldrb	r3, [r7, #7]
 8018c8c:	009b      	lsls	r3, r3, #2
 8018c8e:	3301      	adds	r3, #1
 8018c90:	00db      	lsls	r3, r3, #3
 8018c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018c96:	461a      	mov	r2, r3
 8018c98:	88bb      	ldrh	r3, [r7, #4]
 8018c9a:	0a1b      	lsrs	r3, r3, #8
 8018c9c:	b29b      	uxth	r3, r3
 8018c9e:	b2db      	uxtb	r3, r3
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	4610      	mov	r0, r2
 8018ca4:	f7ff fb12 	bl	80182cc <WIZCHIP_WRITE>
 8018ca8:	79fb      	ldrb	r3, [r7, #7]
 8018caa:	009b      	lsls	r3, r3, #2
 8018cac:	3301      	adds	r3, #1
 8018cae:	00db      	lsls	r3, r3, #3
 8018cb0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8018cb4:	461a      	mov	r2, r3
 8018cb6:	88bb      	ldrh	r3, [r7, #4]
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	4619      	mov	r1, r3
 8018cbc:	4610      	mov	r0, r2
 8018cbe:	f7ff fb05 	bl	80182cc <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8018cc2:	79fb      	ldrb	r3, [r7, #7]
 8018cc4:	009b      	lsls	r3, r3, #2
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	00db      	lsls	r3, r3, #3
 8018cca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018cce:	2104      	movs	r1, #4
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7ff fafb 	bl	80182cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8018cd6:	bf00      	nop
 8018cd8:	79fb      	ldrb	r3, [r7, #7]
 8018cda:	009b      	lsls	r3, r3, #2
 8018cdc:	3301      	adds	r3, #1
 8018cde:	00db      	lsls	r3, r3, #3
 8018ce0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7ff faa5 	bl	8018234 <WIZCHIP_READ>
 8018cea:	4603      	mov	r3, r0
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d1f3      	bne.n	8018cd8 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8018cf0:	4b23      	ldr	r3, [pc, #140]	; (8018d80 <connect+0x1b4>)
 8018cf2:	881b      	ldrh	r3, [r3, #0]
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	79fb      	ldrb	r3, [r7, #7]
 8018cf8:	fa42 f303 	asr.w	r3, r2, r3
 8018cfc:	f003 0301 	and.w	r3, r3, #1
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d02b      	beq.n	8018d5c <connect+0x190>
 8018d04:	2300      	movs	r3, #0
 8018d06:	e036      	b.n	8018d76 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8018d08:	79fb      	ldrb	r3, [r7, #7]
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	3301      	adds	r3, #1
 8018d0e:	00db      	lsls	r3, r3, #3
 8018d10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018d14:	4618      	mov	r0, r3
 8018d16:	f7ff fa8d 	bl	8018234 <WIZCHIP_READ>
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	f003 0308 	and.w	r3, r3, #8
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d00c      	beq.n	8018d3e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8018d24:	79fb      	ldrb	r3, [r7, #7]
 8018d26:	009b      	lsls	r3, r3, #2
 8018d28:	3301      	adds	r3, #1
 8018d2a:	00db      	lsls	r3, r3, #3
 8018d2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018d30:	2108      	movs	r1, #8
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7ff faca 	bl	80182cc <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8018d38:	f06f 030c 	mvn.w	r3, #12
 8018d3c:	e01b      	b.n	8018d76 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8018d3e:	79fb      	ldrb	r3, [r7, #7]
 8018d40:	009b      	lsls	r3, r3, #2
 8018d42:	3301      	adds	r3, #1
 8018d44:	00db      	lsls	r3, r3, #3
 8018d46:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7ff fa72 	bl	8018234 <WIZCHIP_READ>
 8018d50:	4603      	mov	r3, r0
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d102      	bne.n	8018d5c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8018d56:	f06f 0303 	mvn.w	r3, #3
 8018d5a:	e00c      	b.n	8018d76 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8018d5c:	79fb      	ldrb	r3, [r7, #7]
 8018d5e:	009b      	lsls	r3, r3, #2
 8018d60:	3301      	adds	r3, #1
 8018d62:	00db      	lsls	r3, r3, #3
 8018d64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f7ff fa63 	bl	8018234 <WIZCHIP_READ>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	2b17      	cmp	r3, #23
 8018d72:	d1c9      	bne.n	8018d08 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8018d74:	2301      	movs	r3, #1
}
 8018d76:	4618      	mov	r0, r3
 8018d78:	3710      	adds	r7, #16
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	20000950 	.word	0x20000950

08018d84 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b082      	sub	sp, #8
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8018d8e:	79fb      	ldrb	r3, [r7, #7]
 8018d90:	2b08      	cmp	r3, #8
 8018d92:	d902      	bls.n	8018d9a <disconnect+0x16>
 8018d94:	f04f 33ff 	mov.w	r3, #4294967295
 8018d98:	e062      	b.n	8018e60 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018d9a:	79fb      	ldrb	r3, [r7, #7]
 8018d9c:	009b      	lsls	r3, r3, #2
 8018d9e:	3301      	adds	r3, #1
 8018da0:	00db      	lsls	r3, r3, #3
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7ff fa46 	bl	8018234 <WIZCHIP_READ>
 8018da8:	4603      	mov	r3, r0
 8018daa:	f003 030f 	and.w	r3, r3, #15
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d002      	beq.n	8018db8 <disconnect+0x34>
 8018db2:	f06f 0304 	mvn.w	r3, #4
 8018db6:	e053      	b.n	8018e60 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8018db8:	79fb      	ldrb	r3, [r7, #7]
 8018dba:	009b      	lsls	r3, r3, #2
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	00db      	lsls	r3, r3, #3
 8018dc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018dc4:	2108      	movs	r1, #8
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7ff fa80 	bl	80182cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8018dcc:	bf00      	nop
 8018dce:	79fb      	ldrb	r3, [r7, #7]
 8018dd0:	009b      	lsls	r3, r3, #2
 8018dd2:	3301      	adds	r3, #1
 8018dd4:	00db      	lsls	r3, r3, #3
 8018dd6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f7ff fa2a 	bl	8018234 <WIZCHIP_READ>
 8018de0:	4603      	mov	r3, r0
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d1f3      	bne.n	8018dce <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8018de6:	79fb      	ldrb	r3, [r7, #7]
 8018de8:	2201      	movs	r2, #1
 8018dea:	fa02 f303 	lsl.w	r3, r2, r3
 8018dee:	b21b      	sxth	r3, r3
 8018df0:	43db      	mvns	r3, r3
 8018df2:	b21a      	sxth	r2, r3
 8018df4:	4b1c      	ldr	r3, [pc, #112]	; (8018e68 <disconnect+0xe4>)
 8018df6:	881b      	ldrh	r3, [r3, #0]
 8018df8:	b21b      	sxth	r3, r3
 8018dfa:	4013      	ands	r3, r2
 8018dfc:	b21b      	sxth	r3, r3
 8018dfe:	b29a      	uxth	r2, r3
 8018e00:	4b19      	ldr	r3, [pc, #100]	; (8018e68 <disconnect+0xe4>)
 8018e02:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8018e04:	4b19      	ldr	r3, [pc, #100]	; (8018e6c <disconnect+0xe8>)
 8018e06:	881b      	ldrh	r3, [r3, #0]
 8018e08:	461a      	mov	r2, r3
 8018e0a:	79fb      	ldrb	r3, [r7, #7]
 8018e0c:	fa42 f303 	asr.w	r3, r2, r3
 8018e10:	f003 0301 	and.w	r3, r3, #1
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d016      	beq.n	8018e46 <disconnect+0xc2>
 8018e18:	2300      	movs	r3, #0
 8018e1a:	e021      	b.n	8018e60 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8018e1c:	79fb      	ldrb	r3, [r7, #7]
 8018e1e:	009b      	lsls	r3, r3, #2
 8018e20:	3301      	adds	r3, #1
 8018e22:	00db      	lsls	r3, r3, #3
 8018e24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f7ff fa03 	bl	8018234 <WIZCHIP_READ>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	f003 0308 	and.w	r3, r3, #8
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d006      	beq.n	8018e46 <disconnect+0xc2>
	   {
	      close(sn);
 8018e38:	79fb      	ldrb	r3, [r7, #7]
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	f7ff fdfe 	bl	8018a3c <close>
	      return SOCKERR_TIMEOUT;
 8018e40:	f06f 030c 	mvn.w	r3, #12
 8018e44:	e00c      	b.n	8018e60 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8018e46:	79fb      	ldrb	r3, [r7, #7]
 8018e48:	009b      	lsls	r3, r3, #2
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	00db      	lsls	r3, r3, #3
 8018e4e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7ff f9ee 	bl	8018234 <WIZCHIP_READ>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d1de      	bne.n	8018e1c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8018e5e:	2301      	movs	r3, #1
}
 8018e60:	4618      	mov	r0, r3
 8018e62:	3708      	adds	r7, #8
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}
 8018e68:	20000952 	.word	0x20000952
 8018e6c:	20000950 	.word	0x20000950

08018e70 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b084      	sub	sp, #16
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	4603      	mov	r3, r0
 8018e78:	6039      	str	r1, [r7, #0]
 8018e7a:	71fb      	strb	r3, [r7, #7]
 8018e7c:	4613      	mov	r3, r2
 8018e7e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8018e80:	2300      	movs	r3, #0
 8018e82:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8018e84:	2300      	movs	r3, #0
 8018e86:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8018e88:	79fb      	ldrb	r3, [r7, #7]
 8018e8a:	2b08      	cmp	r3, #8
 8018e8c:	d902      	bls.n	8018e94 <send+0x24>
 8018e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e92:	e0de      	b.n	8019052 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018e94:	79fb      	ldrb	r3, [r7, #7]
 8018e96:	009b      	lsls	r3, r3, #2
 8018e98:	3301      	adds	r3, #1
 8018e9a:	00db      	lsls	r3, r3, #3
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f7ff f9c9 	bl	8018234 <WIZCHIP_READ>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	f003 030f 	and.w	r3, r3, #15
 8018ea8:	2b01      	cmp	r3, #1
 8018eaa:	d002      	beq.n	8018eb2 <send+0x42>
 8018eac:	f06f 0304 	mvn.w	r3, #4
 8018eb0:	e0cf      	b.n	8019052 <send+0x1e2>
   CHECK_SOCKDATA();
 8018eb2:	88bb      	ldrh	r3, [r7, #4]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d102      	bne.n	8018ebe <send+0x4e>
 8018eb8:	f06f 030d 	mvn.w	r3, #13
 8018ebc:	e0c9      	b.n	8019052 <send+0x1e2>
   tmp = getSn_SR(sn);
 8018ebe:	79fb      	ldrb	r3, [r7, #7]
 8018ec0:	009b      	lsls	r3, r3, #2
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	00db      	lsls	r3, r3, #3
 8018ec6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f7ff f9b2 	bl	8018234 <WIZCHIP_READ>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8018ed4:	7bfb      	ldrb	r3, [r7, #15]
 8018ed6:	2b17      	cmp	r3, #23
 8018ed8:	d005      	beq.n	8018ee6 <send+0x76>
 8018eda:	7bfb      	ldrb	r3, [r7, #15]
 8018edc:	2b1c      	cmp	r3, #28
 8018ede:	d002      	beq.n	8018ee6 <send+0x76>
 8018ee0:	f06f 0306 	mvn.w	r3, #6
 8018ee4:	e0b5      	b.n	8019052 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8018ee6:	4b5d      	ldr	r3, [pc, #372]	; (801905c <send+0x1ec>)
 8018ee8:	881b      	ldrh	r3, [r3, #0]
 8018eea:	461a      	mov	r2, r3
 8018eec:	79fb      	ldrb	r3, [r7, #7]
 8018eee:	fa42 f303 	asr.w	r3, r2, r3
 8018ef2:	f003 0301 	and.w	r3, r3, #1
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d039      	beq.n	8018f6e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8018efa:	79fb      	ldrb	r3, [r7, #7]
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	3301      	adds	r3, #1
 8018f00:	00db      	lsls	r3, r3, #3
 8018f02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018f06:	4618      	mov	r0, r3
 8018f08:	f7ff f994 	bl	8018234 <WIZCHIP_READ>
 8018f0c:	4603      	mov	r3, r0
 8018f0e:	f003 031f 	and.w	r3, r3, #31
 8018f12:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8018f14:	7bfb      	ldrb	r3, [r7, #15]
 8018f16:	f003 0310 	and.w	r3, r3, #16
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d019      	beq.n	8018f52 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8018f1e:	79fb      	ldrb	r3, [r7, #7]
 8018f20:	009b      	lsls	r3, r3, #2
 8018f22:	3301      	adds	r3, #1
 8018f24:	00db      	lsls	r3, r3, #3
 8018f26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018f2a:	2110      	movs	r1, #16
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	f7ff f9cd 	bl	80182cc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8018f32:	79fb      	ldrb	r3, [r7, #7]
 8018f34:	2201      	movs	r2, #1
 8018f36:	fa02 f303 	lsl.w	r3, r2, r3
 8018f3a:	b21b      	sxth	r3, r3
 8018f3c:	43db      	mvns	r3, r3
 8018f3e:	b21a      	sxth	r2, r3
 8018f40:	4b46      	ldr	r3, [pc, #280]	; (801905c <send+0x1ec>)
 8018f42:	881b      	ldrh	r3, [r3, #0]
 8018f44:	b21b      	sxth	r3, r3
 8018f46:	4013      	ands	r3, r2
 8018f48:	b21b      	sxth	r3, r3
 8018f4a:	b29a      	uxth	r2, r3
 8018f4c:	4b43      	ldr	r3, [pc, #268]	; (801905c <send+0x1ec>)
 8018f4e:	801a      	strh	r2, [r3, #0]
 8018f50:	e00d      	b.n	8018f6e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8018f52:	7bfb      	ldrb	r3, [r7, #15]
 8018f54:	f003 0308 	and.w	r3, r3, #8
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d006      	beq.n	8018f6a <send+0xfa>
      {
         close(sn);
 8018f5c:	79fb      	ldrb	r3, [r7, #7]
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7ff fd6c 	bl	8018a3c <close>
         return SOCKERR_TIMEOUT;
 8018f64:	f06f 030c 	mvn.w	r3, #12
 8018f68:	e073      	b.n	8019052 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	e071      	b.n	8019052 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8018f6e:	79fb      	ldrb	r3, [r7, #7]
 8018f70:	009b      	lsls	r3, r3, #2
 8018f72:	3301      	adds	r3, #1
 8018f74:	00db      	lsls	r3, r3, #3
 8018f76:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7ff f95a 	bl	8018234 <WIZCHIP_READ>
 8018f80:	4603      	mov	r3, r0
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	029b      	lsls	r3, r3, #10
 8018f86:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8018f88:	88ba      	ldrh	r2, [r7, #4]
 8018f8a:	89bb      	ldrh	r3, [r7, #12]
 8018f8c:	429a      	cmp	r2, r3
 8018f8e:	d901      	bls.n	8018f94 <send+0x124>
 8018f90:	89bb      	ldrh	r3, [r7, #12]
 8018f92:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8018f94:	79fb      	ldrb	r3, [r7, #7]
 8018f96:	4618      	mov	r0, r3
 8018f98:	f7ff faa6 	bl	80184e8 <getSn_TX_FSR>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8018fa0:	79fb      	ldrb	r3, [r7, #7]
 8018fa2:	009b      	lsls	r3, r3, #2
 8018fa4:	3301      	adds	r3, #1
 8018fa6:	00db      	lsls	r3, r3, #3
 8018fa8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018fac:	4618      	mov	r0, r3
 8018fae:	f7ff f941 	bl	8018234 <WIZCHIP_READ>
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8018fb6:	7bfb      	ldrb	r3, [r7, #15]
 8018fb8:	2b17      	cmp	r3, #23
 8018fba:	d009      	beq.n	8018fd0 <send+0x160>
 8018fbc:	7bfb      	ldrb	r3, [r7, #15]
 8018fbe:	2b1c      	cmp	r3, #28
 8018fc0:	d006      	beq.n	8018fd0 <send+0x160>
      {
         close(sn);
 8018fc2:	79fb      	ldrb	r3, [r7, #7]
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7ff fd39 	bl	8018a3c <close>
         return SOCKERR_SOCKSTATUS;
 8018fca:	f06f 0306 	mvn.w	r3, #6
 8018fce:	e040      	b.n	8019052 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8018fd0:	4b23      	ldr	r3, [pc, #140]	; (8019060 <send+0x1f0>)
 8018fd2:	881b      	ldrh	r3, [r3, #0]
 8018fd4:	461a      	mov	r2, r3
 8018fd6:	79fb      	ldrb	r3, [r7, #7]
 8018fd8:	fa42 f303 	asr.w	r3, r2, r3
 8018fdc:	f003 0301 	and.w	r3, r3, #1
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d005      	beq.n	8018ff0 <send+0x180>
 8018fe4:	88ba      	ldrh	r2, [r7, #4]
 8018fe6:	89bb      	ldrh	r3, [r7, #12]
 8018fe8:	429a      	cmp	r2, r3
 8018fea:	d901      	bls.n	8018ff0 <send+0x180>
 8018fec:	2300      	movs	r3, #0
 8018fee:	e030      	b.n	8019052 <send+0x1e2>
      if(len <= freesize) break;
 8018ff0:	88ba      	ldrh	r2, [r7, #4]
 8018ff2:	89bb      	ldrh	r3, [r7, #12]
 8018ff4:	429a      	cmp	r2, r3
 8018ff6:	d900      	bls.n	8018ffa <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8018ff8:	e7cc      	b.n	8018f94 <send+0x124>
      if(len <= freesize) break;
 8018ffa:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8018ffc:	88ba      	ldrh	r2, [r7, #4]
 8018ffe:	79fb      	ldrb	r3, [r7, #7]
 8019000:	6839      	ldr	r1, [r7, #0]
 8019002:	4618      	mov	r0, r3
 8019004:	f7ff fb06 	bl	8018614 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8019008:	79fb      	ldrb	r3, [r7, #7]
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	3301      	adds	r3, #1
 801900e:	00db      	lsls	r3, r3, #3
 8019010:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019014:	2120      	movs	r1, #32
 8019016:	4618      	mov	r0, r3
 8019018:	f7ff f958 	bl	80182cc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 801901c:	bf00      	nop
 801901e:	79fb      	ldrb	r3, [r7, #7]
 8019020:	009b      	lsls	r3, r3, #2
 8019022:	3301      	adds	r3, #1
 8019024:	00db      	lsls	r3, r3, #3
 8019026:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801902a:	4618      	mov	r0, r3
 801902c:	f7ff f902 	bl	8018234 <WIZCHIP_READ>
 8019030:	4603      	mov	r3, r0
 8019032:	2b00      	cmp	r3, #0
 8019034:	d1f3      	bne.n	801901e <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8019036:	79fb      	ldrb	r3, [r7, #7]
 8019038:	2201      	movs	r2, #1
 801903a:	fa02 f303 	lsl.w	r3, r2, r3
 801903e:	b21a      	sxth	r2, r3
 8019040:	4b06      	ldr	r3, [pc, #24]	; (801905c <send+0x1ec>)
 8019042:	881b      	ldrh	r3, [r3, #0]
 8019044:	b21b      	sxth	r3, r3
 8019046:	4313      	orrs	r3, r2
 8019048:	b21b      	sxth	r3, r3
 801904a:	b29a      	uxth	r2, r3
 801904c:	4b03      	ldr	r3, [pc, #12]	; (801905c <send+0x1ec>)
 801904e:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019050:	88bb      	ldrh	r3, [r7, #4]
}
 8019052:	4618      	mov	r0, r3
 8019054:	3710      	adds	r7, #16
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}
 801905a:	bf00      	nop
 801905c:	20000952 	.word	0x20000952
 8019060:	20000950 	.word	0x20000950

08019064 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019064:	b590      	push	{r4, r7, lr}
 8019066:	b085      	sub	sp, #20
 8019068:	af00      	add	r7, sp, #0
 801906a:	4603      	mov	r3, r0
 801906c:	6039      	str	r1, [r7, #0]
 801906e:	71fb      	strb	r3, [r7, #7]
 8019070:	4613      	mov	r3, r2
 8019072:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8019074:	2300      	movs	r3, #0
 8019076:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8019078:	2300      	movs	r3, #0
 801907a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 801907c:	79fb      	ldrb	r3, [r7, #7]
 801907e:	2b08      	cmp	r3, #8
 8019080:	d902      	bls.n	8019088 <recv+0x24>
 8019082:	f04f 33ff 	mov.w	r3, #4294967295
 8019086:	e09c      	b.n	80191c2 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019088:	79fb      	ldrb	r3, [r7, #7]
 801908a:	009b      	lsls	r3, r3, #2
 801908c:	3301      	adds	r3, #1
 801908e:	00db      	lsls	r3, r3, #3
 8019090:	4618      	mov	r0, r3
 8019092:	f7ff f8cf 	bl	8018234 <WIZCHIP_READ>
 8019096:	4603      	mov	r3, r0
 8019098:	f003 030f 	and.w	r3, r3, #15
 801909c:	2b01      	cmp	r3, #1
 801909e:	d002      	beq.n	80190a6 <recv+0x42>
 80190a0:	f06f 0304 	mvn.w	r3, #4
 80190a4:	e08d      	b.n	80191c2 <recv+0x15e>
   CHECK_SOCKDATA();
 80190a6:	88bb      	ldrh	r3, [r7, #4]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d102      	bne.n	80190b2 <recv+0x4e>
 80190ac:	f06f 030d 	mvn.w	r3, #13
 80190b0:	e087      	b.n	80191c2 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80190b2:	79fb      	ldrb	r3, [r7, #7]
 80190b4:	009b      	lsls	r3, r3, #2
 80190b6:	3301      	adds	r3, #1
 80190b8:	00db      	lsls	r3, r3, #3
 80190ba:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80190be:	4618      	mov	r0, r3
 80190c0:	f7ff f8b8 	bl	8018234 <WIZCHIP_READ>
 80190c4:	4603      	mov	r3, r0
 80190c6:	b29b      	uxth	r3, r3
 80190c8:	029b      	lsls	r3, r3, #10
 80190ca:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80190cc:	89ba      	ldrh	r2, [r7, #12]
 80190ce:	88bb      	ldrh	r3, [r7, #4]
 80190d0:	429a      	cmp	r2, r3
 80190d2:	d201      	bcs.n	80190d8 <recv+0x74>
 80190d4:	89bb      	ldrh	r3, [r7, #12]
 80190d6:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80190d8:	79fb      	ldrb	r3, [r7, #7]
 80190da:	4618      	mov	r0, r3
 80190dc:	f7ff fa4f 	bl	801857e <getSn_RX_RSR>
 80190e0:	4603      	mov	r3, r0
 80190e2:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80190e4:	79fb      	ldrb	r3, [r7, #7]
 80190e6:	009b      	lsls	r3, r3, #2
 80190e8:	3301      	adds	r3, #1
 80190ea:	00db      	lsls	r3, r3, #3
 80190ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7ff f89f 	bl	8018234 <WIZCHIP_READ>
 80190f6:	4603      	mov	r3, r0
 80190f8:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80190fa:	7bfb      	ldrb	r3, [r7, #15]
 80190fc:	2b17      	cmp	r3, #23
 80190fe:	d026      	beq.n	801914e <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8019100:	7bfb      	ldrb	r3, [r7, #15]
 8019102:	2b1c      	cmp	r3, #28
 8019104:	d11c      	bne.n	8019140 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8019106:	89bb      	ldrh	r3, [r7, #12]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d133      	bne.n	8019174 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801910c:	79fb      	ldrb	r3, [r7, #7]
 801910e:	4618      	mov	r0, r3
 8019110:	f7ff f9ea 	bl	80184e8 <getSn_TX_FSR>
 8019114:	4603      	mov	r3, r0
 8019116:	461c      	mov	r4, r3
 8019118:	79fb      	ldrb	r3, [r7, #7]
 801911a:	009b      	lsls	r3, r3, #2
 801911c:	3301      	adds	r3, #1
 801911e:	00db      	lsls	r3, r3, #3
 8019120:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019124:	4618      	mov	r0, r3
 8019126:	f7ff f885 	bl	8018234 <WIZCHIP_READ>
 801912a:	4603      	mov	r3, r0
 801912c:	029b      	lsls	r3, r3, #10
 801912e:	429c      	cmp	r4, r3
 8019130:	d10d      	bne.n	801914e <recv+0xea>
               {
                  close(sn);
 8019132:	79fb      	ldrb	r3, [r7, #7]
 8019134:	4618      	mov	r0, r3
 8019136:	f7ff fc81 	bl	8018a3c <close>
                  return SOCKERR_SOCKSTATUS;
 801913a:	f06f 0306 	mvn.w	r3, #6
 801913e:	e040      	b.n	80191c2 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8019140:	79fb      	ldrb	r3, [r7, #7]
 8019142:	4618      	mov	r0, r3
 8019144:	f7ff fc7a 	bl	8018a3c <close>
               return SOCKERR_SOCKSTATUS;
 8019148:	f06f 0306 	mvn.w	r3, #6
 801914c:	e039      	b.n	80191c2 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801914e:	4b1f      	ldr	r3, [pc, #124]	; (80191cc <recv+0x168>)
 8019150:	881b      	ldrh	r3, [r3, #0]
 8019152:	461a      	mov	r2, r3
 8019154:	79fb      	ldrb	r3, [r7, #7]
 8019156:	fa42 f303 	asr.w	r3, r2, r3
 801915a:	f003 0301 	and.w	r3, r3, #1
 801915e:	2b00      	cmp	r3, #0
 8019160:	d004      	beq.n	801916c <recv+0x108>
 8019162:	89bb      	ldrh	r3, [r7, #12]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d101      	bne.n	801916c <recv+0x108>
 8019168:	2300      	movs	r3, #0
 801916a:	e02a      	b.n	80191c2 <recv+0x15e>
         if(recvsize != 0) break;
 801916c:	89bb      	ldrh	r3, [r7, #12]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d102      	bne.n	8019178 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8019172:	e7b1      	b.n	80190d8 <recv+0x74>
               if(recvsize != 0) break;
 8019174:	bf00      	nop
 8019176:	e000      	b.n	801917a <recv+0x116>
         if(recvsize != 0) break;
 8019178:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 801917a:	89ba      	ldrh	r2, [r7, #12]
 801917c:	88bb      	ldrh	r3, [r7, #4]
 801917e:	429a      	cmp	r2, r3
 8019180:	d201      	bcs.n	8019186 <recv+0x122>
 8019182:	89bb      	ldrh	r3, [r7, #12]
 8019184:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8019186:	88ba      	ldrh	r2, [r7, #4]
 8019188:	79fb      	ldrb	r3, [r7, #7]
 801918a:	6839      	ldr	r1, [r7, #0]
 801918c:	4618      	mov	r0, r3
 801918e:	f7ff fa9d 	bl	80186cc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8019192:	79fb      	ldrb	r3, [r7, #7]
 8019194:	009b      	lsls	r3, r3, #2
 8019196:	3301      	adds	r3, #1
 8019198:	00db      	lsls	r3, r3, #3
 801919a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801919e:	2140      	movs	r1, #64	; 0x40
 80191a0:	4618      	mov	r0, r3
 80191a2:	f7ff f893 	bl	80182cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80191a6:	bf00      	nop
 80191a8:	79fb      	ldrb	r3, [r7, #7]
 80191aa:	009b      	lsls	r3, r3, #2
 80191ac:	3301      	adds	r3, #1
 80191ae:	00db      	lsls	r3, r3, #3
 80191b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191b4:	4618      	mov	r0, r3
 80191b6:	f7ff f83d 	bl	8018234 <WIZCHIP_READ>
 80191ba:	4603      	mov	r3, r0
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d1f3      	bne.n	80191a8 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80191c0:	88bb      	ldrh	r3, [r7, #4]
}
 80191c2:	4618      	mov	r0, r3
 80191c4:	3714      	adds	r7, #20
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd90      	pop	{r4, r7, pc}
 80191ca:	bf00      	nop
 80191cc:	20000950 	.word	0x20000950

080191d0 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b086      	sub	sp, #24
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	60b9      	str	r1, [r7, #8]
 80191d8:	607b      	str	r3, [r7, #4]
 80191da:	4603      	mov	r3, r0
 80191dc:	73fb      	strb	r3, [r7, #15]
 80191de:	4613      	mov	r3, r2
 80191e0:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80191e2:	2300      	movs	r3, #0
 80191e4:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80191e6:	2300      	movs	r3, #0
 80191e8:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80191ea:	7bfb      	ldrb	r3, [r7, #15]
 80191ec:	2b08      	cmp	r3, #8
 80191ee:	d902      	bls.n	80191f6 <sendto+0x26>
 80191f0:	f04f 33ff 	mov.w	r3, #4294967295
 80191f4:	e11b      	b.n	801942e <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80191f6:	7bfb      	ldrb	r3, [r7, #15]
 80191f8:	009b      	lsls	r3, r3, #2
 80191fa:	3301      	adds	r3, #1
 80191fc:	00db      	lsls	r3, r3, #3
 80191fe:	4618      	mov	r0, r3
 8019200:	f7ff f818 	bl	8018234 <WIZCHIP_READ>
 8019204:	4603      	mov	r3, r0
 8019206:	f003 030f 	and.w	r3, r3, #15
 801920a:	3b02      	subs	r3, #2
 801920c:	2b02      	cmp	r3, #2
 801920e:	d902      	bls.n	8019216 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019210:	f06f 0304 	mvn.w	r3, #4
 8019214:	e10b      	b.n	801942e <sendto+0x25e>
         break;
 8019216:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019218:	89bb      	ldrh	r3, [r7, #12]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d102      	bne.n	8019224 <sendto+0x54>
 801921e:	f06f 030d 	mvn.w	r3, #13
 8019222:	e104      	b.n	801942e <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801922a:	693b      	ldr	r3, [r7, #16]
 801922c:	021b      	lsls	r3, r3, #8
 801922e:	687a      	ldr	r2, [r7, #4]
 8019230:	3201      	adds	r2, #1
 8019232:	7812      	ldrb	r2, [r2, #0]
 8019234:	4413      	add	r3, r2
 8019236:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8019238:	693b      	ldr	r3, [r7, #16]
 801923a:	021b      	lsls	r3, r3, #8
 801923c:	687a      	ldr	r2, [r7, #4]
 801923e:	3202      	adds	r2, #2
 8019240:	7812      	ldrb	r2, [r2, #0]
 8019242:	4413      	add	r3, r2
 8019244:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8019246:	693b      	ldr	r3, [r7, #16]
 8019248:	021b      	lsls	r3, r3, #8
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	3203      	adds	r2, #3
 801924e:	7812      	ldrb	r2, [r2, #0]
 8019250:	4413      	add	r3, r2
 8019252:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8019254:	693b      	ldr	r3, [r7, #16]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d10e      	bne.n	8019278 <sendto+0xa8>
 801925a:	7bfb      	ldrb	r3, [r7, #15]
 801925c:	009b      	lsls	r3, r3, #2
 801925e:	3301      	adds	r3, #1
 8019260:	00db      	lsls	r3, r3, #3
 8019262:	4618      	mov	r0, r3
 8019264:	f7fe ffe6 	bl	8018234 <WIZCHIP_READ>
 8019268:	4603      	mov	r3, r0
 801926a:	f003 0304 	and.w	r3, r3, #4
 801926e:	2b04      	cmp	r3, #4
 8019270:	d002      	beq.n	8019278 <sendto+0xa8>
 8019272:	f06f 030b 	mvn.w	r3, #11
 8019276:	e0da      	b.n	801942e <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8019278:	8c3b      	ldrh	r3, [r7, #32]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d10e      	bne.n	801929c <sendto+0xcc>
 801927e:	7bfb      	ldrb	r3, [r7, #15]
 8019280:	009b      	lsls	r3, r3, #2
 8019282:	3301      	adds	r3, #1
 8019284:	00db      	lsls	r3, r3, #3
 8019286:	4618      	mov	r0, r3
 8019288:	f7fe ffd4 	bl	8018234 <WIZCHIP_READ>
 801928c:	4603      	mov	r3, r0
 801928e:	f003 0304 	and.w	r3, r3, #4
 8019292:	2b04      	cmp	r3, #4
 8019294:	d002      	beq.n	801929c <sendto+0xcc>
 8019296:	f06f 030a 	mvn.w	r3, #10
 801929a:	e0c8      	b.n	801942e <sendto+0x25e>
   tmp = getSn_SR(sn);
 801929c:	7bfb      	ldrb	r3, [r7, #15]
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	3301      	adds	r3, #1
 80192a2:	00db      	lsls	r3, r3, #3
 80192a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80192a8:	4618      	mov	r0, r3
 80192aa:	f7fe ffc3 	bl	8018234 <WIZCHIP_READ>
 80192ae:	4603      	mov	r3, r0
 80192b0:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80192b2:	7dfb      	ldrb	r3, [r7, #23]
 80192b4:	2b42      	cmp	r3, #66	; 0x42
 80192b6:	d008      	beq.n	80192ca <sendto+0xfa>
 80192b8:	7dfb      	ldrb	r3, [r7, #23]
 80192ba:	2b22      	cmp	r3, #34	; 0x22
 80192bc:	d005      	beq.n	80192ca <sendto+0xfa>
 80192be:	7dfb      	ldrb	r3, [r7, #23]
 80192c0:	2b32      	cmp	r3, #50	; 0x32
 80192c2:	d002      	beq.n	80192ca <sendto+0xfa>
 80192c4:	f06f 0306 	mvn.w	r3, #6
 80192c8:	e0b1      	b.n	801942e <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80192ca:	7bfb      	ldrb	r3, [r7, #15]
 80192cc:	009b      	lsls	r3, r3, #2
 80192ce:	3301      	adds	r3, #1
 80192d0:	00db      	lsls	r3, r3, #3
 80192d2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80192d6:	2204      	movs	r2, #4
 80192d8:	6879      	ldr	r1, [r7, #4]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7ff f8a4 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80192e0:	7bfb      	ldrb	r3, [r7, #15]
 80192e2:	009b      	lsls	r3, r3, #2
 80192e4:	3301      	adds	r3, #1
 80192e6:	00db      	lsls	r3, r3, #3
 80192e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80192ec:	461a      	mov	r2, r3
 80192ee:	8c3b      	ldrh	r3, [r7, #32]
 80192f0:	0a1b      	lsrs	r3, r3, #8
 80192f2:	b29b      	uxth	r3, r3
 80192f4:	b2db      	uxtb	r3, r3
 80192f6:	4619      	mov	r1, r3
 80192f8:	4610      	mov	r0, r2
 80192fa:	f7fe ffe7 	bl	80182cc <WIZCHIP_WRITE>
 80192fe:	7bfb      	ldrb	r3, [r7, #15]
 8019300:	009b      	lsls	r3, r3, #2
 8019302:	3301      	adds	r3, #1
 8019304:	00db      	lsls	r3, r3, #3
 8019306:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801930a:	461a      	mov	r2, r3
 801930c:	8c3b      	ldrh	r3, [r7, #32]
 801930e:	b2db      	uxtb	r3, r3
 8019310:	4619      	mov	r1, r3
 8019312:	4610      	mov	r0, r2
 8019314:	f7fe ffda 	bl	80182cc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8019318:	7bfb      	ldrb	r3, [r7, #15]
 801931a:	009b      	lsls	r3, r3, #2
 801931c:	3301      	adds	r3, #1
 801931e:	00db      	lsls	r3, r3, #3
 8019320:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019324:	4618      	mov	r0, r3
 8019326:	f7fe ff85 	bl	8018234 <WIZCHIP_READ>
 801932a:	4603      	mov	r3, r0
 801932c:	b29b      	uxth	r3, r3
 801932e:	029b      	lsls	r3, r3, #10
 8019330:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8019332:	89ba      	ldrh	r2, [r7, #12]
 8019334:	8abb      	ldrh	r3, [r7, #20]
 8019336:	429a      	cmp	r2, r3
 8019338:	d901      	bls.n	801933e <sendto+0x16e>
 801933a:	8abb      	ldrh	r3, [r7, #20]
 801933c:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801933e:	7bfb      	ldrb	r3, [r7, #15]
 8019340:	4618      	mov	r0, r3
 8019342:	f7ff f8d1 	bl	80184e8 <getSn_TX_FSR>
 8019346:	4603      	mov	r3, r0
 8019348:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801934a:	7bfb      	ldrb	r3, [r7, #15]
 801934c:	009b      	lsls	r3, r3, #2
 801934e:	3301      	adds	r3, #1
 8019350:	00db      	lsls	r3, r3, #3
 8019352:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019356:	4618      	mov	r0, r3
 8019358:	f7fe ff6c 	bl	8018234 <WIZCHIP_READ>
 801935c:	4603      	mov	r3, r0
 801935e:	2b00      	cmp	r3, #0
 8019360:	d102      	bne.n	8019368 <sendto+0x198>
 8019362:	f06f 0303 	mvn.w	r3, #3
 8019366:	e062      	b.n	801942e <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8019368:	4b33      	ldr	r3, [pc, #204]	; (8019438 <sendto+0x268>)
 801936a:	881b      	ldrh	r3, [r3, #0]
 801936c:	461a      	mov	r2, r3
 801936e:	7bfb      	ldrb	r3, [r7, #15]
 8019370:	fa42 f303 	asr.w	r3, r2, r3
 8019374:	f003 0301 	and.w	r3, r3, #1
 8019378:	2b00      	cmp	r3, #0
 801937a:	d005      	beq.n	8019388 <sendto+0x1b8>
 801937c:	89ba      	ldrh	r2, [r7, #12]
 801937e:	8abb      	ldrh	r3, [r7, #20]
 8019380:	429a      	cmp	r2, r3
 8019382:	d901      	bls.n	8019388 <sendto+0x1b8>
 8019384:	2300      	movs	r3, #0
 8019386:	e052      	b.n	801942e <sendto+0x25e>
      if(len <= freesize) break;
 8019388:	89ba      	ldrh	r2, [r7, #12]
 801938a:	8abb      	ldrh	r3, [r7, #20]
 801938c:	429a      	cmp	r2, r3
 801938e:	d900      	bls.n	8019392 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8019390:	e7d5      	b.n	801933e <sendto+0x16e>
      if(len <= freesize) break;
 8019392:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8019394:	89ba      	ldrh	r2, [r7, #12]
 8019396:	7bfb      	ldrb	r3, [r7, #15]
 8019398:	68b9      	ldr	r1, [r7, #8]
 801939a:	4618      	mov	r0, r3
 801939c:	f7ff f93a 	bl	8018614 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80193a0:	7bfb      	ldrb	r3, [r7, #15]
 80193a2:	009b      	lsls	r3, r3, #2
 80193a4:	3301      	adds	r3, #1
 80193a6:	00db      	lsls	r3, r3, #3
 80193a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80193ac:	2120      	movs	r1, #32
 80193ae:	4618      	mov	r0, r3
 80193b0:	f7fe ff8c 	bl	80182cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80193b4:	bf00      	nop
 80193b6:	7bfb      	ldrb	r3, [r7, #15]
 80193b8:	009b      	lsls	r3, r3, #2
 80193ba:	3301      	adds	r3, #1
 80193bc:	00db      	lsls	r3, r3, #3
 80193be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80193c2:	4618      	mov	r0, r3
 80193c4:	f7fe ff36 	bl	8018234 <WIZCHIP_READ>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d1f3      	bne.n	80193b6 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80193ce:	7bfb      	ldrb	r3, [r7, #15]
 80193d0:	009b      	lsls	r3, r3, #2
 80193d2:	3301      	adds	r3, #1
 80193d4:	00db      	lsls	r3, r3, #3
 80193d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80193da:	4618      	mov	r0, r3
 80193dc:	f7fe ff2a 	bl	8018234 <WIZCHIP_READ>
 80193e0:	4603      	mov	r3, r0
 80193e2:	f003 031f 	and.w	r3, r3, #31
 80193e6:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80193e8:	7dfb      	ldrb	r3, [r7, #23]
 80193ea:	f003 0310 	and.w	r3, r3, #16
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d00c      	beq.n	801940c <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80193f2:	7bfb      	ldrb	r3, [r7, #15]
 80193f4:	009b      	lsls	r3, r3, #2
 80193f6:	3301      	adds	r3, #1
 80193f8:	00db      	lsls	r3, r3, #3
 80193fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80193fe:	2110      	movs	r1, #16
 8019400:	4618      	mov	r0, r3
 8019402:	f7fe ff63 	bl	80182cc <WIZCHIP_WRITE>
         break;
 8019406:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019408:	89bb      	ldrh	r3, [r7, #12]
 801940a:	e010      	b.n	801942e <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 801940c:	7dfb      	ldrb	r3, [r7, #23]
 801940e:	f003 0308 	and.w	r3, r3, #8
 8019412:	2b00      	cmp	r3, #0
 8019414:	d0db      	beq.n	80193ce <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8019416:	7bfb      	ldrb	r3, [r7, #15]
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	3301      	adds	r3, #1
 801941c:	00db      	lsls	r3, r3, #3
 801941e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019422:	2108      	movs	r1, #8
 8019424:	4618      	mov	r0, r3
 8019426:	f7fe ff51 	bl	80182cc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 801942a:	f06f 030c 	mvn.w	r3, #12
}
 801942e:	4618      	mov	r0, r3
 8019430:	3718      	adds	r7, #24
 8019432:	46bd      	mov	sp, r7
 8019434:	bd80      	pop	{r7, pc}
 8019436:	bf00      	nop
 8019438:	20000950 	.word	0x20000950

0801943c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b088      	sub	sp, #32
 8019440:	af00      	add	r7, sp, #0
 8019442:	60b9      	str	r1, [r7, #8]
 8019444:	607b      	str	r3, [r7, #4]
 8019446:	4603      	mov	r3, r0
 8019448:	73fb      	strb	r3, [r7, #15]
 801944a:	4613      	mov	r3, r2
 801944c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 801944e:	2300      	movs	r3, #0
 8019450:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019452:	7bfb      	ldrb	r3, [r7, #15]
 8019454:	2b08      	cmp	r3, #8
 8019456:	d902      	bls.n	801945e <recvfrom+0x22>
 8019458:	f04f 33ff 	mov.w	r3, #4294967295
 801945c:	e1d4      	b.n	8019808 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 801945e:	7bfb      	ldrb	r3, [r7, #15]
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	3301      	adds	r3, #1
 8019464:	00db      	lsls	r3, r3, #3
 8019466:	4618      	mov	r0, r3
 8019468:	f7fe fee4 	bl	8018234 <WIZCHIP_READ>
 801946c:	4603      	mov	r3, r0
 801946e:	777b      	strb	r3, [r7, #29]
 8019470:	7f7b      	ldrb	r3, [r7, #29]
 8019472:	f003 030f 	and.w	r3, r3, #15
 8019476:	3b02      	subs	r3, #2
 8019478:	2b02      	cmp	r3, #2
 801947a:	d902      	bls.n	8019482 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 801947c:	f06f 0304 	mvn.w	r3, #4
 8019480:	e1c2      	b.n	8019808 <recvfrom+0x3cc>
         break;
 8019482:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019484:	89bb      	ldrh	r3, [r7, #12]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d102      	bne.n	8019490 <recvfrom+0x54>
 801948a:	f06f 030d 	mvn.w	r3, #13
 801948e:	e1bb      	b.n	8019808 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8019490:	7bfb      	ldrb	r3, [r7, #15]
 8019492:	4a88      	ldr	r2, [pc, #544]	; (80196b4 <recvfrom+0x278>)
 8019494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d128      	bne.n	80194ee <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 801949c:	7bfb      	ldrb	r3, [r7, #15]
 801949e:	4618      	mov	r0, r3
 80194a0:	f7ff f86d 	bl	801857e <getSn_RX_RSR>
 80194a4:	4603      	mov	r3, r0
 80194a6:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80194a8:	7bfb      	ldrb	r3, [r7, #15]
 80194aa:	009b      	lsls	r3, r3, #2
 80194ac:	3301      	adds	r3, #1
 80194ae:	00db      	lsls	r3, r3, #3
 80194b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7fe febd 	bl	8018234 <WIZCHIP_READ>
 80194ba:	4603      	mov	r3, r0
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d102      	bne.n	80194c6 <recvfrom+0x8a>
 80194c0:	f06f 0303 	mvn.w	r3, #3
 80194c4:	e1a0      	b.n	8019808 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80194c6:	4b7c      	ldr	r3, [pc, #496]	; (80196b8 <recvfrom+0x27c>)
 80194c8:	881b      	ldrh	r3, [r3, #0]
 80194ca:	461a      	mov	r2, r3
 80194cc:	7bfb      	ldrb	r3, [r7, #15]
 80194ce:	fa42 f303 	asr.w	r3, r2, r3
 80194d2:	f003 0301 	and.w	r3, r3, #1
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d004      	beq.n	80194e4 <recvfrom+0xa8>
 80194da:	8bfb      	ldrh	r3, [r7, #30]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d101      	bne.n	80194e4 <recvfrom+0xa8>
 80194e0:	2300      	movs	r3, #0
 80194e2:	e191      	b.n	8019808 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 80194e4:	8bfb      	ldrh	r3, [r7, #30]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d100      	bne.n	80194ec <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80194ea:	e7d7      	b.n	801949c <recvfrom+0x60>
         if(pack_len != 0) break;
 80194ec:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80194ee:	7f7b      	ldrb	r3, [r7, #29]
 80194f0:	f003 0307 	and.w	r3, r3, #7
 80194f4:	2b04      	cmp	r3, #4
 80194f6:	d079      	beq.n	80195ec <recvfrom+0x1b0>
 80194f8:	2b04      	cmp	r3, #4
 80194fa:	f300 8142 	bgt.w	8019782 <recvfrom+0x346>
 80194fe:	2b02      	cmp	r3, #2
 8019500:	d003      	beq.n	801950a <recvfrom+0xce>
 8019502:	2b03      	cmp	r3, #3
 8019504:	f000 80dc 	beq.w	80196c0 <recvfrom+0x284>
 8019508:	e13b      	b.n	8019782 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 801950a:	7bfb      	ldrb	r3, [r7, #15]
 801950c:	4a69      	ldr	r2, [pc, #420]	; (80196b4 <recvfrom+0x278>)
 801950e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d152      	bne.n	80195bc <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8019516:	f107 0114 	add.w	r1, r7, #20
 801951a:	7bfb      	ldrb	r3, [r7, #15]
 801951c:	2208      	movs	r2, #8
 801951e:	4618      	mov	r0, r3
 8019520:	f7ff f8d4 	bl	80186cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019524:	7bfb      	ldrb	r3, [r7, #15]
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	3301      	adds	r3, #1
 801952a:	00db      	lsls	r3, r3, #3
 801952c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019530:	2140      	movs	r1, #64	; 0x40
 8019532:	4618      	mov	r0, r3
 8019534:	f7fe feca 	bl	80182cc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019538:	bf00      	nop
 801953a:	7bfb      	ldrb	r3, [r7, #15]
 801953c:	009b      	lsls	r3, r3, #2
 801953e:	3301      	adds	r3, #1
 8019540:	00db      	lsls	r3, r3, #3
 8019542:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019546:	4618      	mov	r0, r3
 8019548:	f7fe fe74 	bl	8018234 <WIZCHIP_READ>
 801954c:	4603      	mov	r3, r0
 801954e:	2b00      	cmp	r3, #0
 8019550:	d1f3      	bne.n	801953a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019552:	7d3a      	ldrb	r2, [r7, #20]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	3301      	adds	r3, #1
 801955c:	7d7a      	ldrb	r2, [r7, #21]
 801955e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	3302      	adds	r3, #2
 8019564:	7dba      	ldrb	r2, [r7, #22]
 8019566:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	3303      	adds	r3, #3
 801956c:	7dfa      	ldrb	r2, [r7, #23]
 801956e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8019570:	7e3b      	ldrb	r3, [r7, #24]
 8019572:	b29a      	uxth	r2, r3
 8019574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019576:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8019578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957a:	881b      	ldrh	r3, [r3, #0]
 801957c:	021b      	lsls	r3, r3, #8
 801957e:	b29a      	uxth	r2, r3
 8019580:	7e7b      	ldrb	r3, [r7, #25]
 8019582:	b29b      	uxth	r3, r3
 8019584:	4413      	add	r3, r2
 8019586:	b29a      	uxth	r2, r3
 8019588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801958a:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 801958c:	7eba      	ldrb	r2, [r7, #26]
 801958e:	7bfb      	ldrb	r3, [r7, #15]
 8019590:	b291      	uxth	r1, r2
 8019592:	4a48      	ldr	r2, [pc, #288]	; (80196b4 <recvfrom+0x278>)
 8019594:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8019598:	7bfb      	ldrb	r3, [r7, #15]
 801959a:	4a46      	ldr	r2, [pc, #280]	; (80196b4 <recvfrom+0x278>)
 801959c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195a0:	021b      	lsls	r3, r3, #8
 80195a2:	b299      	uxth	r1, r3
 80195a4:	7efb      	ldrb	r3, [r7, #27]
 80195a6:	b29a      	uxth	r2, r3
 80195a8:	7bfb      	ldrb	r3, [r7, #15]
 80195aa:	440a      	add	r2, r1
 80195ac:	b291      	uxth	r1, r2
 80195ae:	4a41      	ldr	r2, [pc, #260]	; (80196b4 <recvfrom+0x278>)
 80195b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80195b4:	7bfb      	ldrb	r3, [r7, #15]
 80195b6:	4a41      	ldr	r2, [pc, #260]	; (80196bc <recvfrom+0x280>)
 80195b8:	2180      	movs	r1, #128	; 0x80
 80195ba:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80195bc:	7bfb      	ldrb	r3, [r7, #15]
 80195be:	4a3d      	ldr	r2, [pc, #244]	; (80196b4 <recvfrom+0x278>)
 80195c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195c4:	89ba      	ldrh	r2, [r7, #12]
 80195c6:	429a      	cmp	r2, r3
 80195c8:	d202      	bcs.n	80195d0 <recvfrom+0x194>
 80195ca:	89bb      	ldrh	r3, [r7, #12]
 80195cc:	83fb      	strh	r3, [r7, #30]
 80195ce:	e004      	b.n	80195da <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80195d0:	7bfb      	ldrb	r3, [r7, #15]
 80195d2:	4a38      	ldr	r2, [pc, #224]	; (80196b4 <recvfrom+0x278>)
 80195d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195d8:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80195da:	8bfb      	ldrh	r3, [r7, #30]
 80195dc:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80195de:	8bfa      	ldrh	r2, [r7, #30]
 80195e0:	7bfb      	ldrb	r3, [r7, #15]
 80195e2:	68b9      	ldr	r1, [r7, #8]
 80195e4:	4618      	mov	r0, r3
 80195e6:	f7ff f871 	bl	80186cc <wiz_recv_data>
			break;
 80195ea:	e0d6      	b.n	801979a <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80195ec:	7bfb      	ldrb	r3, [r7, #15]
 80195ee:	4a31      	ldr	r2, [pc, #196]	; (80196b4 <recvfrom+0x278>)
 80195f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d146      	bne.n	8019686 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 80195f8:	f107 0114 	add.w	r1, r7, #20
 80195fc:	7bfb      	ldrb	r3, [r7, #15]
 80195fe:	2202      	movs	r2, #2
 8019600:	4618      	mov	r0, r3
 8019602:	f7ff f863 	bl	80186cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019606:	7bfb      	ldrb	r3, [r7, #15]
 8019608:	009b      	lsls	r3, r3, #2
 801960a:	3301      	adds	r3, #1
 801960c:	00db      	lsls	r3, r3, #3
 801960e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019612:	2140      	movs	r1, #64	; 0x40
 8019614:	4618      	mov	r0, r3
 8019616:	f7fe fe59 	bl	80182cc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801961a:	bf00      	nop
 801961c:	7bfb      	ldrb	r3, [r7, #15]
 801961e:	009b      	lsls	r3, r3, #2
 8019620:	3301      	adds	r3, #1
 8019622:	00db      	lsls	r3, r3, #3
 8019624:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019628:	4618      	mov	r0, r3
 801962a:	f7fe fe03 	bl	8018234 <WIZCHIP_READ>
 801962e:	4603      	mov	r3, r0
 8019630:	2b00      	cmp	r3, #0
 8019632:	d1f3      	bne.n	801961c <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019634:	7d3a      	ldrb	r2, [r7, #20]
 8019636:	7bfb      	ldrb	r3, [r7, #15]
 8019638:	b291      	uxth	r1, r2
 801963a:	4a1e      	ldr	r2, [pc, #120]	; (80196b4 <recvfrom+0x278>)
 801963c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019640:	7bfb      	ldrb	r3, [r7, #15]
 8019642:	4a1c      	ldr	r2, [pc, #112]	; (80196b4 <recvfrom+0x278>)
 8019644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019648:	021b      	lsls	r3, r3, #8
 801964a:	b29a      	uxth	r2, r3
 801964c:	7d7b      	ldrb	r3, [r7, #21]
 801964e:	b29b      	uxth	r3, r3
 8019650:	4413      	add	r3, r2
 8019652:	b29a      	uxth	r2, r3
 8019654:	7bfb      	ldrb	r3, [r7, #15]
 8019656:	3a02      	subs	r2, #2
 8019658:	b291      	uxth	r1, r2
 801965a:	4a16      	ldr	r2, [pc, #88]	; (80196b4 <recvfrom+0x278>)
 801965c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8019660:	7bfb      	ldrb	r3, [r7, #15]
 8019662:	4a14      	ldr	r2, [pc, #80]	; (80196b4 <recvfrom+0x278>)
 8019664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019668:	f240 52ea 	movw	r2, #1514	; 0x5ea
 801966c:	4293      	cmp	r3, r2
 801966e:	d906      	bls.n	801967e <recvfrom+0x242>
   			{
   			   close(sn);
 8019670:	7bfb      	ldrb	r3, [r7, #15]
 8019672:	4618      	mov	r0, r3
 8019674:	f7ff f9e2 	bl	8018a3c <close>
   			   return SOCKFATAL_PACKLEN;
 8019678:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 801967c:	e0c4      	b.n	8019808 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 801967e:	7bfb      	ldrb	r3, [r7, #15]
 8019680:	4a0e      	ldr	r2, [pc, #56]	; (80196bc <recvfrom+0x280>)
 8019682:	2180      	movs	r1, #128	; 0x80
 8019684:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019686:	7bfb      	ldrb	r3, [r7, #15]
 8019688:	4a0a      	ldr	r2, [pc, #40]	; (80196b4 <recvfrom+0x278>)
 801968a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801968e:	89ba      	ldrh	r2, [r7, #12]
 8019690:	429a      	cmp	r2, r3
 8019692:	d202      	bcs.n	801969a <recvfrom+0x25e>
 8019694:	89bb      	ldrh	r3, [r7, #12]
 8019696:	83fb      	strh	r3, [r7, #30]
 8019698:	e004      	b.n	80196a4 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 801969a:	7bfb      	ldrb	r3, [r7, #15]
 801969c:	4a05      	ldr	r2, [pc, #20]	; (80196b4 <recvfrom+0x278>)
 801969e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80196a2:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80196a4:	8bfa      	ldrh	r2, [r7, #30]
 80196a6:	7bfb      	ldrb	r3, [r7, #15]
 80196a8:	68b9      	ldr	r1, [r7, #8]
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7ff f80e 	bl	80186cc <wiz_recv_data>
		   break;
 80196b0:	e073      	b.n	801979a <recvfrom+0x35e>
 80196b2:	bf00      	nop
 80196b4:	20000954 	.word	0x20000954
 80196b8:	20000950 	.word	0x20000950
 80196bc:	20000964 	.word	0x20000964
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80196c0:	7bfb      	ldrb	r3, [r7, #15]
 80196c2:	4a53      	ldr	r2, [pc, #332]	; (8019810 <recvfrom+0x3d4>)
 80196c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d144      	bne.n	8019756 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 80196cc:	f107 0114 	add.w	r1, r7, #20
 80196d0:	7bfb      	ldrb	r3, [r7, #15]
 80196d2:	2206      	movs	r2, #6
 80196d4:	4618      	mov	r0, r3
 80196d6:	f7fe fff9 	bl	80186cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80196da:	7bfb      	ldrb	r3, [r7, #15]
 80196dc:	009b      	lsls	r3, r3, #2
 80196de:	3301      	adds	r3, #1
 80196e0:	00db      	lsls	r3, r3, #3
 80196e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196e6:	2140      	movs	r1, #64	; 0x40
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7fe fdef 	bl	80182cc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80196ee:	bf00      	nop
 80196f0:	7bfb      	ldrb	r3, [r7, #15]
 80196f2:	009b      	lsls	r3, r3, #2
 80196f4:	3301      	adds	r3, #1
 80196f6:	00db      	lsls	r3, r3, #3
 80196f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196fc:	4618      	mov	r0, r3
 80196fe:	f7fe fd99 	bl	8018234 <WIZCHIP_READ>
 8019702:	4603      	mov	r3, r0
 8019704:	2b00      	cmp	r3, #0
 8019706:	d1f3      	bne.n	80196f0 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8019708:	7d3a      	ldrb	r2, [r7, #20]
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	3301      	adds	r3, #1
 8019712:	7d7a      	ldrb	r2, [r7, #21]
 8019714:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	3302      	adds	r3, #2
 801971a:	7dba      	ldrb	r2, [r7, #22]
 801971c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	3303      	adds	r3, #3
 8019722:	7dfa      	ldrb	r2, [r7, #23]
 8019724:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019726:	7e3a      	ldrb	r2, [r7, #24]
 8019728:	7bfb      	ldrb	r3, [r7, #15]
 801972a:	b291      	uxth	r1, r2
 801972c:	4a38      	ldr	r2, [pc, #224]	; (8019810 <recvfrom+0x3d4>)
 801972e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019732:	7bfb      	ldrb	r3, [r7, #15]
 8019734:	4a36      	ldr	r2, [pc, #216]	; (8019810 <recvfrom+0x3d4>)
 8019736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801973a:	021b      	lsls	r3, r3, #8
 801973c:	b299      	uxth	r1, r3
 801973e:	7e7b      	ldrb	r3, [r7, #25]
 8019740:	b29a      	uxth	r2, r3
 8019742:	7bfb      	ldrb	r3, [r7, #15]
 8019744:	440a      	add	r2, r1
 8019746:	b291      	uxth	r1, r2
 8019748:	4a31      	ldr	r2, [pc, #196]	; (8019810 <recvfrom+0x3d4>)
 801974a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 801974e:	7bfb      	ldrb	r3, [r7, #15]
 8019750:	4a30      	ldr	r2, [pc, #192]	; (8019814 <recvfrom+0x3d8>)
 8019752:	2180      	movs	r1, #128	; 0x80
 8019754:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019756:	7bfb      	ldrb	r3, [r7, #15]
 8019758:	4a2d      	ldr	r2, [pc, #180]	; (8019810 <recvfrom+0x3d4>)
 801975a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801975e:	89ba      	ldrh	r2, [r7, #12]
 8019760:	429a      	cmp	r2, r3
 8019762:	d202      	bcs.n	801976a <recvfrom+0x32e>
 8019764:	89bb      	ldrh	r3, [r7, #12]
 8019766:	83fb      	strh	r3, [r7, #30]
 8019768:	e004      	b.n	8019774 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 801976a:	7bfb      	ldrb	r3, [r7, #15]
 801976c:	4a28      	ldr	r2, [pc, #160]	; (8019810 <recvfrom+0x3d4>)
 801976e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019772:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019774:	8bfa      	ldrh	r2, [r7, #30]
 8019776:	7bfb      	ldrb	r3, [r7, #15]
 8019778:	68b9      	ldr	r1, [r7, #8]
 801977a:	4618      	mov	r0, r3
 801977c:	f7fe ffa6 	bl	80186cc <wiz_recv_data>
			break;
 8019780:	e00b      	b.n	801979a <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019782:	8bfa      	ldrh	r2, [r7, #30]
 8019784:	7bfb      	ldrb	r3, [r7, #15]
 8019786:	4611      	mov	r1, r2
 8019788:	4618      	mov	r0, r3
 801978a:	f7fe fffb 	bl	8018784 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 801978e:	7bfb      	ldrb	r3, [r7, #15]
 8019790:	491f      	ldr	r1, [pc, #124]	; (8019810 <recvfrom+0x3d4>)
 8019792:	8bfa      	ldrh	r2, [r7, #30]
 8019794:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019798:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 801979a:	7bfb      	ldrb	r3, [r7, #15]
 801979c:	009b      	lsls	r3, r3, #2
 801979e:	3301      	adds	r3, #1
 80197a0:	00db      	lsls	r3, r3, #3
 80197a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80197a6:	2140      	movs	r1, #64	; 0x40
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7fe fd8f 	bl	80182cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80197ae:	bf00      	nop
 80197b0:	7bfb      	ldrb	r3, [r7, #15]
 80197b2:	009b      	lsls	r3, r3, #2
 80197b4:	3301      	adds	r3, #1
 80197b6:	00db      	lsls	r3, r3, #3
 80197b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80197bc:	4618      	mov	r0, r3
 80197be:	f7fe fd39 	bl	8018234 <WIZCHIP_READ>
 80197c2:	4603      	mov	r3, r0
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d1f3      	bne.n	80197b0 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 80197c8:	7bfb      	ldrb	r3, [r7, #15]
 80197ca:	4a11      	ldr	r2, [pc, #68]	; (8019810 <recvfrom+0x3d4>)
 80197cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80197d0:	7bfb      	ldrb	r3, [r7, #15]
 80197d2:	8bfa      	ldrh	r2, [r7, #30]
 80197d4:	1a8a      	subs	r2, r1, r2
 80197d6:	b291      	uxth	r1, r2
 80197d8:	4a0d      	ldr	r2, [pc, #52]	; (8019810 <recvfrom+0x3d4>)
 80197da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80197de:	7bfb      	ldrb	r3, [r7, #15]
 80197e0:	4a0b      	ldr	r2, [pc, #44]	; (8019810 <recvfrom+0x3d4>)
 80197e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d009      	beq.n	80197fe <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80197ea:	7bfb      	ldrb	r3, [r7, #15]
 80197ec:	4a09      	ldr	r2, [pc, #36]	; (8019814 <recvfrom+0x3d8>)
 80197ee:	5cd2      	ldrb	r2, [r2, r3]
 80197f0:	7bfb      	ldrb	r3, [r7, #15]
 80197f2:	f042 0201 	orr.w	r2, r2, #1
 80197f6:	b2d1      	uxtb	r1, r2
 80197f8:	4a06      	ldr	r2, [pc, #24]	; (8019814 <recvfrom+0x3d8>)
 80197fa:	54d1      	strb	r1, [r2, r3]
 80197fc:	e003      	b.n	8019806 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80197fe:	7bfb      	ldrb	r3, [r7, #15]
 8019800:	4a04      	ldr	r2, [pc, #16]	; (8019814 <recvfrom+0x3d8>)
 8019802:	2100      	movs	r1, #0
 8019804:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019806:	8bfb      	ldrh	r3, [r7, #30]
}
 8019808:	4618      	mov	r0, r3
 801980a:	3720      	adds	r7, #32
 801980c:	46bd      	mov	sp, r7
 801980e:	bd80      	pop	{r7, pc}
 8019810:	20000954 	.word	0x20000954
 8019814:	20000964 	.word	0x20000964

08019818 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019818:	b480      	push	{r7}
 801981a:	af00      	add	r7, sp, #0
 801981c:	bf00      	nop
 801981e:	46bd      	mov	sp, r7
 8019820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019824:	4770      	bx	lr

08019826 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019826:	b480      	push	{r7}
 8019828:	af00      	add	r7, sp, #0
 801982a:	bf00      	nop
 801982c:	46bd      	mov	sp, r7
 801982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019832:	4770      	bx	lr

08019834 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019834:	b480      	push	{r7}
 8019836:	af00      	add	r7, sp, #0
 8019838:	bf00      	nop
 801983a:	46bd      	mov	sp, r7
 801983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019840:	4770      	bx	lr

08019842 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019842:	b480      	push	{r7}
 8019844:	af00      	add	r7, sp, #0
 8019846:	bf00      	nop
 8019848:	46bd      	mov	sp, r7
 801984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984e:	4770      	bx	lr

08019850 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019850:	b480      	push	{r7}
 8019852:	b083      	sub	sp, #12
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	781b      	ldrb	r3, [r3, #0]
 801985c:	b2db      	uxtb	r3, r3
 801985e:	4618      	mov	r0, r3
 8019860:	370c      	adds	r7, #12
 8019862:	46bd      	mov	sp, r7
 8019864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019868:	4770      	bx	lr

0801986a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 801986a:	b480      	push	{r7}
 801986c:	b083      	sub	sp, #12
 801986e:	af00      	add	r7, sp, #0
 8019870:	6078      	str	r0, [r7, #4]
 8019872:	460b      	mov	r3, r1
 8019874:	70fb      	strb	r3, [r7, #3]
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	78fa      	ldrb	r2, [r7, #3]
 801987a:	701a      	strb	r2, [r3, #0]
 801987c:	bf00      	nop
 801987e:	370c      	adds	r7, #12
 8019880:	46bd      	mov	sp, r7
 8019882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019886:	4770      	bx	lr

08019888 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019888:	b480      	push	{r7}
 801988a:	af00      	add	r7, sp, #0
 801988c:	2300      	movs	r3, #0
 801988e:	4618      	mov	r0, r3
 8019890:	46bd      	mov	sp, r7
 8019892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019896:	4770      	bx	lr

08019898 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
 801989e:	4603      	mov	r3, r0
 80198a0:	71fb      	strb	r3, [r7, #7]
 80198a2:	bf00      	nop
 80198a4:	370c      	adds	r7, #12
 80198a6:	46bd      	mov	sp, r7
 80198a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ac:	4770      	bx	lr
	...

080198b0 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 80198b0:	b480      	push	{r7}
 80198b2:	b083      	sub	sp, #12
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
 80198b8:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d002      	beq.n	80198c6 <reg_wizchip_cris_cbfunc+0x16>
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d106      	bne.n	80198d4 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80198c6:	4b0a      	ldr	r3, [pc, #40]	; (80198f0 <reg_wizchip_cris_cbfunc+0x40>)
 80198c8:	4a0a      	ldr	r2, [pc, #40]	; (80198f4 <reg_wizchip_cris_cbfunc+0x44>)
 80198ca:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80198cc:	4b08      	ldr	r3, [pc, #32]	; (80198f0 <reg_wizchip_cris_cbfunc+0x40>)
 80198ce:	4a0a      	ldr	r2, [pc, #40]	; (80198f8 <reg_wizchip_cris_cbfunc+0x48>)
 80198d0:	611a      	str	r2, [r3, #16]
 80198d2:	e006      	b.n	80198e2 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 80198d4:	4a06      	ldr	r2, [pc, #24]	; (80198f0 <reg_wizchip_cris_cbfunc+0x40>)
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 80198da:	4a05      	ldr	r2, [pc, #20]	; (80198f0 <reg_wizchip_cris_cbfunc+0x40>)
 80198dc:	683b      	ldr	r3, [r7, #0]
 80198de:	6113      	str	r3, [r2, #16]
   }
}
 80198e0:	bf00      	nop
 80198e2:	bf00      	nop
 80198e4:	370c      	adds	r7, #12
 80198e6:	46bd      	mov	sp, r7
 80198e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ec:	4770      	bx	lr
 80198ee:	bf00      	nop
 80198f0:	200000c4 	.word	0x200000c4
 80198f4:	08019819 	.word	0x08019819
 80198f8:	08019827 	.word	0x08019827

080198fc <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80198fc:	b480      	push	{r7}
 80198fe:	b083      	sub	sp, #12
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
 8019904:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d002      	beq.n	8019912 <reg_wizchip_cs_cbfunc+0x16>
 801990c:	683b      	ldr	r3, [r7, #0]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d106      	bne.n	8019920 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8019912:	4b0a      	ldr	r3, [pc, #40]	; (801993c <reg_wizchip_cs_cbfunc+0x40>)
 8019914:	4a0a      	ldr	r2, [pc, #40]	; (8019940 <reg_wizchip_cs_cbfunc+0x44>)
 8019916:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8019918:	4b08      	ldr	r3, [pc, #32]	; (801993c <reg_wizchip_cs_cbfunc+0x40>)
 801991a:	4a0a      	ldr	r2, [pc, #40]	; (8019944 <reg_wizchip_cs_cbfunc+0x48>)
 801991c:	619a      	str	r2, [r3, #24]
 801991e:	e006      	b.n	801992e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8019920:	4a06      	ldr	r2, [pc, #24]	; (801993c <reg_wizchip_cs_cbfunc+0x40>)
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8019926:	4a05      	ldr	r2, [pc, #20]	; (801993c <reg_wizchip_cs_cbfunc+0x40>)
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	6193      	str	r3, [r2, #24]
   }
}
 801992c:	bf00      	nop
 801992e:	bf00      	nop
 8019930:	370c      	adds	r7, #12
 8019932:	46bd      	mov	sp, r7
 8019934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019938:	4770      	bx	lr
 801993a:	bf00      	nop
 801993c:	200000c4 	.word	0x200000c4
 8019940:	08019835 	.word	0x08019835
 8019944:	08019843 	.word	0x08019843

08019948 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8019948:	b480      	push	{r7}
 801994a:	b083      	sub	sp, #12
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8019952:	bf00      	nop
 8019954:	4b0f      	ldr	r3, [pc, #60]	; (8019994 <reg_wizchip_spi_cbfunc+0x4c>)
 8019956:	881b      	ldrh	r3, [r3, #0]
 8019958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801995c:	2b00      	cmp	r3, #0
 801995e:	d0f9      	beq.n	8019954 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d002      	beq.n	801996c <reg_wizchip_spi_cbfunc+0x24>
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d106      	bne.n	801997a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801996c:	4b09      	ldr	r3, [pc, #36]	; (8019994 <reg_wizchip_spi_cbfunc+0x4c>)
 801996e:	4a0a      	ldr	r2, [pc, #40]	; (8019998 <reg_wizchip_spi_cbfunc+0x50>)
 8019970:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8019972:	4b08      	ldr	r3, [pc, #32]	; (8019994 <reg_wizchip_spi_cbfunc+0x4c>)
 8019974:	4a09      	ldr	r2, [pc, #36]	; (801999c <reg_wizchip_spi_cbfunc+0x54>)
 8019976:	621a      	str	r2, [r3, #32]
 8019978:	e006      	b.n	8019988 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801997a:	4a06      	ldr	r2, [pc, #24]	; (8019994 <reg_wizchip_spi_cbfunc+0x4c>)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8019980:	4a04      	ldr	r2, [pc, #16]	; (8019994 <reg_wizchip_spi_cbfunc+0x4c>)
 8019982:	683b      	ldr	r3, [r7, #0]
 8019984:	6213      	str	r3, [r2, #32]
   }
}
 8019986:	bf00      	nop
 8019988:	bf00      	nop
 801998a:	370c      	adds	r7, #12
 801998c:	46bd      	mov	sp, r7
 801998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019992:	4770      	bx	lr
 8019994:	200000c4 	.word	0x200000c4
 8019998:	08019889 	.word	0x08019889
 801999c:	08019899 	.word	0x08019899

080199a0 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80199a0:	b590      	push	{r4, r7, lr}
 80199a2:	b087      	sub	sp, #28
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	4603      	mov	r3, r0
 80199a8:	6039      	str	r1, [r7, #0]
 80199aa:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80199ac:	2300      	movs	r3, #0
 80199ae:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80199b0:	2300      	movs	r3, #0
 80199b2:	60fb      	str	r3, [r7, #12]
 80199b4:	2300      	movs	r3, #0
 80199b6:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80199b8:	79fb      	ldrb	r3, [r7, #7]
 80199ba:	2b0f      	cmp	r3, #15
 80199bc:	f200 80c7 	bhi.w	8019b4e <ctlwizchip+0x1ae>
 80199c0:	a201      	add	r2, pc, #4	; (adr r2, 80199c8 <ctlwizchip+0x28>)
 80199c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199c6:	bf00      	nop
 80199c8:	08019a09 	.word	0x08019a09
 80199cc:	08019a0f 	.word	0x08019a0f
 80199d0:	08019a3b 	.word	0x08019a3b
 80199d4:	08019a2f 	.word	0x08019a2f
 80199d8:	08019a49 	.word	0x08019a49
 80199dc:	08019a55 	.word	0x08019a55
 80199e0:	08019a63 	.word	0x08019a63
 80199e4:	08019a89 	.word	0x08019a89
 80199e8:	08019aaf 	.word	0x08019aaf
 80199ec:	08019af3 	.word	0x08019af3
 80199f0:	08019af9 	.word	0x08019af9
 80199f4:	08019b01 	.word	0x08019b01
 80199f8:	08019b55 	.word	0x08019b55
 80199fc:	08019b09 	.word	0x08019b09
 8019a00:	08019b17 	.word	0x08019b17
 8019a04:	08019b33 	.word	0x08019b33
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8019a08:	f000 f8ea 	bl	8019be0 <wizchip_sw_reset>
         break;
 8019a0c:	e0a3      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d004      	beq.n	8019a1e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	3308      	adds	r3, #8
 8019a1c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	693a      	ldr	r2, [r7, #16]
 8019a22:	4611      	mov	r1, r2
 8019a24:	4618      	mov	r0, r3
 8019a26:	f000 f927 	bl	8019c78 <wizchip_init>
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	e094      	b.n	8019b58 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	881b      	ldrh	r3, [r3, #0]
 8019a32:	4618      	mov	r0, r3
 8019a34:	f000 f9ac 	bl	8019d90 <wizchip_clrinterrupt>
         break;
 8019a38:	e08d      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8019a3a:	f000 f9dd 	bl	8019df8 <wizchip_getinterrupt>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	461a      	mov	r2, r3
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	801a      	strh	r2, [r3, #0]
         break;
 8019a46:	e086      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	881b      	ldrh	r3, [r3, #0]
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f000 f9f8 	bl	8019e42 <wizchip_setinterruptmask>
         break;         
 8019a52:	e080      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8019a54:	f000 fa10 	bl	8019e78 <wizchip_getinterruptmask>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	461a      	mov	r2, r3
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	801a      	strh	r2, [r3, #0]
         break;
 8019a60:	e079      	b.n	8019b56 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8019a62:	683b      	ldr	r3, [r7, #0]
 8019a64:	881b      	ldrh	r3, [r3, #0]
 8019a66:	0a1b      	lsrs	r3, r3, #8
 8019a68:	b29b      	uxth	r3, r3
 8019a6a:	b2db      	uxtb	r3, r3
 8019a6c:	4619      	mov	r1, r3
 8019a6e:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019a72:	f7fe fc2b 	bl	80182cc <WIZCHIP_WRITE>
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	881b      	ldrh	r3, [r3, #0]
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019a82:	f7fe fc23 	bl	80182cc <WIZCHIP_WRITE>
         break;
 8019a86:	e066      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8019a88:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019a8c:	f7fe fbd2 	bl	8018234 <WIZCHIP_READ>
 8019a90:	4603      	mov	r3, r0
 8019a92:	b29b      	uxth	r3, r3
 8019a94:	021b      	lsls	r3, r3, #8
 8019a96:	b29c      	uxth	r4, r3
 8019a98:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019a9c:	f7fe fbca 	bl	8018234 <WIZCHIP_READ>
 8019aa0:	4603      	mov	r3, r0
 8019aa2:	b29b      	uxth	r3, r3
 8019aa4:	4423      	add	r3, r4
 8019aa6:	b29a      	uxth	r2, r3
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	801a      	strh	r2, [r3, #0]
         break;
 8019aac:	e053      	b.n	8019b56 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8019aae:	4b2c      	ldr	r3, [pc, #176]	; (8019b60 <ctlwizchip+0x1c0>)
 8019ab0:	789a      	ldrb	r2, [r3, #2]
 8019ab2:	683b      	ldr	r3, [r7, #0]
 8019ab4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	3301      	adds	r3, #1
 8019aba:	4a29      	ldr	r2, [pc, #164]	; (8019b60 <ctlwizchip+0x1c0>)
 8019abc:	78d2      	ldrb	r2, [r2, #3]
 8019abe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8019ac0:	683b      	ldr	r3, [r7, #0]
 8019ac2:	3302      	adds	r3, #2
 8019ac4:	4a26      	ldr	r2, [pc, #152]	; (8019b60 <ctlwizchip+0x1c0>)
 8019ac6:	7912      	ldrb	r2, [r2, #4]
 8019ac8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	3303      	adds	r3, #3
 8019ace:	4a24      	ldr	r2, [pc, #144]	; (8019b60 <ctlwizchip+0x1c0>)
 8019ad0:	7952      	ldrb	r2, [r2, #5]
 8019ad2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	3304      	adds	r3, #4
 8019ad8:	4a21      	ldr	r2, [pc, #132]	; (8019b60 <ctlwizchip+0x1c0>)
 8019ada:	7992      	ldrb	r2, [r2, #6]
 8019adc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	3305      	adds	r3, #5
 8019ae2:	4a1f      	ldr	r2, [pc, #124]	; (8019b60 <ctlwizchip+0x1c0>)
 8019ae4:	79d2      	ldrb	r2, [r2, #7]
 8019ae6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8019ae8:	683b      	ldr	r3, [r7, #0]
 8019aea:	3306      	adds	r3, #6
 8019aec:	2200      	movs	r2, #0
 8019aee:	701a      	strb	r2, [r3, #0]
         break;
 8019af0:	e031      	b.n	8019b56 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8019af2:	f000 fa13 	bl	8019f1c <wizphy_reset>
         break;
 8019af6:	e02e      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8019af8:	6838      	ldr	r0, [r7, #0]
 8019afa:	f000 fa36 	bl	8019f6a <wizphy_setphyconf>
         break;
 8019afe:	e02a      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8019b00:	6838      	ldr	r0, [r7, #0]
 8019b02:	f000 fa75 	bl	8019ff0 <wizphy_getphyconf>
         break;
 8019b06:	e026      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	f000 faf7 	bl	801a100 <wizphy_setphypmode>
 8019b12:	4603      	mov	r3, r0
 8019b14:	e020      	b.n	8019b58 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8019b16:	f000 f9e8 	bl	8019eea <wizphy_getphypmode>
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019b1e:	7dfb      	ldrb	r3, [r7, #23]
 8019b20:	2bff      	cmp	r3, #255	; 0xff
 8019b22:	d102      	bne.n	8019b2a <ctlwizchip+0x18a>
 8019b24:	f04f 33ff 	mov.w	r3, #4294967295
 8019b28:	e016      	b.n	8019b58 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	7dfa      	ldrb	r2, [r7, #23]
 8019b2e:	701a      	strb	r2, [r3, #0]
         break;
 8019b30:	e011      	b.n	8019b56 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8019b32:	f000 f9c4 	bl	8019ebe <wizphy_getphylink>
 8019b36:	4603      	mov	r3, r0
 8019b38:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019b3a:	7dfb      	ldrb	r3, [r7, #23]
 8019b3c:	2bff      	cmp	r3, #255	; 0xff
 8019b3e:	d102      	bne.n	8019b46 <ctlwizchip+0x1a6>
 8019b40:	f04f 33ff 	mov.w	r3, #4294967295
 8019b44:	e008      	b.n	8019b58 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	7dfa      	ldrb	r2, [r7, #23]
 8019b4a:	701a      	strb	r2, [r3, #0]
         break;
 8019b4c:	e003      	b.n	8019b56 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8019b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b52:	e001      	b.n	8019b58 <ctlwizchip+0x1b8>
         break;
 8019b54:	bf00      	nop
   }
   return 0;
 8019b56:	2300      	movs	r3, #0
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	371c      	adds	r7, #28
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd90      	pop	{r4, r7, pc}
 8019b60:	200000c4 	.word	0x200000c4

08019b64 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	6039      	str	r1, [r7, #0]
 8019b6e:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8019b70:	79fb      	ldrb	r3, [r7, #7]
 8019b72:	2b05      	cmp	r3, #5
 8019b74:	d82c      	bhi.n	8019bd0 <ctlnetwork+0x6c>
 8019b76:	a201      	add	r2, pc, #4	; (adr r2, 8019b7c <ctlnetwork+0x18>)
 8019b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b7c:	08019b95 	.word	0x08019b95
 8019b80:	08019b9d 	.word	0x08019b9d
 8019b84:	08019ba5 	.word	0x08019ba5
 8019b88:	08019bb3 	.word	0x08019bb3
 8019b8c:	08019bc1 	.word	0x08019bc1
 8019b90:	08019bc9 	.word	0x08019bc9
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8019b94:	6838      	ldr	r0, [r7, #0]
 8019b96:	f000 fafd 	bl	801a194 <wizchip_setnetinfo>
         break;
 8019b9a:	e01c      	b.n	8019bd6 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8019b9c:	6838      	ldr	r0, [r7, #0]
 8019b9e:	f000 fb39 	bl	801a214 <wizchip_getnetinfo>
         break;
 8019ba2:	e018      	b.n	8019bd6 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	781b      	ldrb	r3, [r3, #0]
 8019ba8:	4618      	mov	r0, r3
 8019baa:	f000 fb73 	bl	801a294 <wizchip_setnetmode>
 8019bae:	4603      	mov	r3, r0
 8019bb0:	e012      	b.n	8019bd8 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8019bb2:	f000 fb91 	bl	801a2d8 <wizchip_getnetmode>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	461a      	mov	r2, r3
 8019bba:	683b      	ldr	r3, [r7, #0]
 8019bbc:	701a      	strb	r2, [r3, #0]
         break;
 8019bbe:	e00a      	b.n	8019bd6 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8019bc0:	6838      	ldr	r0, [r7, #0]
 8019bc2:	f000 fb91 	bl	801a2e8 <wizchip_settimeout>
         break;
 8019bc6:	e006      	b.n	8019bd6 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8019bc8:	6838      	ldr	r0, [r7, #0]
 8019bca:	f000 fbae 	bl	801a32a <wizchip_gettimeout>
         break;
 8019bce:	e002      	b.n	8019bd6 <ctlnetwork+0x72>
      default:
         return -1;
 8019bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8019bd4:	e000      	b.n	8019bd8 <ctlnetwork+0x74>
   }
   return 0;
 8019bd6:	2300      	movs	r3, #0
}
 8019bd8:	4618      	mov	r0, r3
 8019bda:	3708      	adds	r7, #8
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	bd80      	pop	{r7, pc}

08019be0 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b086      	sub	sp, #24
 8019be4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8019be6:	1d3b      	adds	r3, r7, #4
 8019be8:	2206      	movs	r2, #6
 8019bea:	4619      	mov	r1, r3
 8019bec:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8019bf0:	f7fe fbba 	bl	8018368 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8019bf4:	f107 0314 	add.w	r3, r7, #20
 8019bf8:	2204      	movs	r2, #4
 8019bfa:	4619      	mov	r1, r3
 8019bfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019c00:	f7fe fbb2 	bl	8018368 <WIZCHIP_READ_BUF>
 8019c04:	f107 0310 	add.w	r3, r7, #16
 8019c08:	2204      	movs	r2, #4
 8019c0a:	4619      	mov	r1, r3
 8019c0c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8019c10:	f7fe fbaa 	bl	8018368 <WIZCHIP_READ_BUF>
 8019c14:	f107 030c 	add.w	r3, r7, #12
 8019c18:	2204      	movs	r2, #4
 8019c1a:	4619      	mov	r1, r3
 8019c1c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8019c20:	f7fe fba2 	bl	8018368 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8019c24:	2180      	movs	r1, #128	; 0x80
 8019c26:	2000      	movs	r0, #0
 8019c28:	f7fe fb50 	bl	80182cc <WIZCHIP_WRITE>
   getMR(); // for delay
 8019c2c:	2000      	movs	r0, #0
 8019c2e:	f7fe fb01 	bl	8018234 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8019c32:	1d3b      	adds	r3, r7, #4
 8019c34:	2206      	movs	r2, #6
 8019c36:	4619      	mov	r1, r3
 8019c38:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8019c3c:	f7fe fbf4 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8019c40:	f107 0314 	add.w	r3, r7, #20
 8019c44:	2204      	movs	r2, #4
 8019c46:	4619      	mov	r1, r3
 8019c48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019c4c:	f7fe fbec 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8019c50:	f107 0310 	add.w	r3, r7, #16
 8019c54:	2204      	movs	r2, #4
 8019c56:	4619      	mov	r1, r3
 8019c58:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8019c5c:	f7fe fbe4 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8019c60:	f107 030c 	add.w	r3, r7, #12
 8019c64:	2204      	movs	r2, #4
 8019c66:	4619      	mov	r1, r3
 8019c68:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8019c6c:	f7fe fbdc 	bl	8018428 <WIZCHIP_WRITE_BUF>
}
 8019c70:	bf00      	nop
 8019c72:	3718      	adds	r7, #24
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b084      	sub	sp, #16
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
 8019c80:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8019c82:	2300      	movs	r3, #0
 8019c84:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8019c86:	f7ff ffab 	bl	8019be0 <wizchip_sw_reset>
   if(txsize)
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d03b      	beq.n	8019d08 <wizchip_init+0x90>
   {
      tmp = 0;
 8019c90:	2300      	movs	r3, #0
 8019c92:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019c94:	2300      	movs	r3, #0
 8019c96:	73fb      	strb	r3, [r7, #15]
 8019c98:	e015      	b.n	8019cc6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8019c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019c9e:	687a      	ldr	r2, [r7, #4]
 8019ca0:	4413      	add	r3, r2
 8019ca2:	781a      	ldrb	r2, [r3, #0]
 8019ca4:	7bbb      	ldrb	r3, [r7, #14]
 8019ca6:	4413      	add	r3, r2
 8019ca8:	b2db      	uxtb	r3, r3
 8019caa:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8019cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019cb0:	2b10      	cmp	r3, #16
 8019cb2:	dd02      	ble.n	8019cba <wizchip_init+0x42>
 8019cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8019cb8:	e066      	b.n	8019d88 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cbe:	b2db      	uxtb	r3, r3
 8019cc0:	3301      	adds	r3, #1
 8019cc2:	b2db      	uxtb	r3, r3
 8019cc4:	73fb      	strb	r3, [r7, #15]
 8019cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cca:	2b07      	cmp	r3, #7
 8019ccc:	dde5      	ble.n	8019c9a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019cce:	2300      	movs	r3, #0
 8019cd0:	73fb      	strb	r3, [r7, #15]
 8019cd2:	e015      	b.n	8019d00 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8019cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cd8:	009b      	lsls	r3, r3, #2
 8019cda:	3301      	adds	r3, #1
 8019cdc:	00db      	lsls	r3, r3, #3
 8019cde:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	4413      	add	r3, r2
 8019cec:	781b      	ldrb	r3, [r3, #0]
 8019cee:	4619      	mov	r1, r3
 8019cf0:	f7fe faec 	bl	80182cc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cf8:	b2db      	uxtb	r3, r3
 8019cfa:	3301      	adds	r3, #1
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	73fb      	strb	r3, [r7, #15]
 8019d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d04:	2b07      	cmp	r3, #7
 8019d06:	dde5      	ble.n	8019cd4 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d03b      	beq.n	8019d86 <wizchip_init+0x10e>
   {
      tmp = 0;
 8019d0e:	2300      	movs	r3, #0
 8019d10:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019d12:	2300      	movs	r3, #0
 8019d14:	73fb      	strb	r3, [r7, #15]
 8019d16:	e015      	b.n	8019d44 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8019d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d1c:	683a      	ldr	r2, [r7, #0]
 8019d1e:	4413      	add	r3, r2
 8019d20:	781a      	ldrb	r2, [r3, #0]
 8019d22:	7bbb      	ldrb	r3, [r7, #14]
 8019d24:	4413      	add	r3, r2
 8019d26:	b2db      	uxtb	r3, r3
 8019d28:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8019d2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019d2e:	2b10      	cmp	r3, #16
 8019d30:	dd02      	ble.n	8019d38 <wizchip_init+0xc0>
 8019d32:	f04f 33ff 	mov.w	r3, #4294967295
 8019d36:	e027      	b.n	8019d88 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d3c:	b2db      	uxtb	r3, r3
 8019d3e:	3301      	adds	r3, #1
 8019d40:	b2db      	uxtb	r3, r3
 8019d42:	73fb      	strb	r3, [r7, #15]
 8019d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d48:	2b07      	cmp	r3, #7
 8019d4a:	dde5      	ble.n	8019d18 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	73fb      	strb	r3, [r7, #15]
 8019d50:	e015      	b.n	8019d7e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8019d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	3301      	adds	r3, #1
 8019d5a:	00db      	lsls	r3, r3, #3
 8019d5c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8019d60:	4618      	mov	r0, r3
 8019d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d66:	683a      	ldr	r2, [r7, #0]
 8019d68:	4413      	add	r3, r2
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	4619      	mov	r1, r3
 8019d6e:	f7fe faad 	bl	80182cc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d76:	b2db      	uxtb	r3, r3
 8019d78:	3301      	adds	r3, #1
 8019d7a:	b2db      	uxtb	r3, r3
 8019d7c:	73fb      	strb	r3, [r7, #15]
 8019d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d82:	2b07      	cmp	r3, #7
 8019d84:	dde5      	ble.n	8019d52 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8019d86:	2300      	movs	r3, #0
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3710      	adds	r7, #16
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}

08019d90 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	4603      	mov	r3, r0
 8019d98:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8019d9a:	88fb      	ldrh	r3, [r7, #6]
 8019d9c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8019d9e:	88fb      	ldrh	r3, [r7, #6]
 8019da0:	0a1b      	lsrs	r3, r3, #8
 8019da2:	b29b      	uxth	r3, r3
 8019da4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8019da6:	7bfb      	ldrb	r3, [r7, #15]
 8019da8:	f023 030f 	bic.w	r3, r3, #15
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	4619      	mov	r1, r3
 8019db0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8019db4:	f7fe fa8a 	bl	80182cc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8019db8:	2300      	movs	r3, #0
 8019dba:	73fb      	strb	r3, [r7, #15]
 8019dbc:	e014      	b.n	8019de8 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8019dbe:	7bba      	ldrb	r2, [r7, #14]
 8019dc0:	7bfb      	ldrb	r3, [r7, #15]
 8019dc2:	fa42 f303 	asr.w	r3, r2, r3
 8019dc6:	f003 0301 	and.w	r3, r3, #1
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d009      	beq.n	8019de2 <wizchip_clrinterrupt+0x52>
 8019dce:	7bfb      	ldrb	r3, [r7, #15]
 8019dd0:	009b      	lsls	r3, r3, #2
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	00db      	lsls	r3, r3, #3
 8019dd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019dda:	211f      	movs	r1, #31
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7fe fa75 	bl	80182cc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8019de2:	7bfb      	ldrb	r3, [r7, #15]
 8019de4:	3301      	adds	r3, #1
 8019de6:	73fb      	strb	r3, [r7, #15]
 8019de8:	7bfb      	ldrb	r3, [r7, #15]
 8019dea:	2b07      	cmp	r3, #7
 8019dec:	d9e7      	bls.n	8019dbe <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8019dee:	bf00      	nop
 8019df0:	bf00      	nop
 8019df2:	3710      	adds	r7, #16
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}

08019df8 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b082      	sub	sp, #8
 8019dfc:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8019dfe:	2300      	movs	r3, #0
 8019e00:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8019e02:	2300      	movs	r3, #0
 8019e04:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8019e06:	2300      	movs	r3, #0
 8019e08:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8019e0a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8019e0e:	f7fe fa11 	bl	8018234 <WIZCHIP_READ>
 8019e12:	4603      	mov	r3, r0
 8019e14:	f023 030f 	bic.w	r3, r3, #15
 8019e18:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8019e1a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8019e1e:	f7fe fa09 	bl	8018234 <WIZCHIP_READ>
 8019e22:	4603      	mov	r3, r0
 8019e24:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8019e26:	79bb      	ldrb	r3, [r7, #6]
 8019e28:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8019e2a:	88bb      	ldrh	r3, [r7, #4]
 8019e2c:	021b      	lsls	r3, r3, #8
 8019e2e:	b29a      	uxth	r2, r3
 8019e30:	79fb      	ldrb	r3, [r7, #7]
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	4413      	add	r3, r2
 8019e36:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8019e38:	88bb      	ldrh	r3, [r7, #4]
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3708      	adds	r7, #8
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}

08019e42 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8019e42:	b580      	push	{r7, lr}
 8019e44:	b084      	sub	sp, #16
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	4603      	mov	r3, r0
 8019e4a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8019e4c:	88fb      	ldrh	r3, [r7, #6]
 8019e4e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8019e50:	88fb      	ldrh	r3, [r7, #6]
 8019e52:	0a1b      	lsrs	r3, r3, #8
 8019e54:	b29b      	uxth	r3, r3
 8019e56:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8019e58:	7bfb      	ldrb	r3, [r7, #15]
 8019e5a:	4619      	mov	r1, r3
 8019e5c:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8019e60:	f7fe fa34 	bl	80182cc <WIZCHIP_WRITE>
   setSIMR(simr);
 8019e64:	7bbb      	ldrb	r3, [r7, #14]
 8019e66:	4619      	mov	r1, r3
 8019e68:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8019e6c:	f7fe fa2e 	bl	80182cc <WIZCHIP_WRITE>
#endif   
}
 8019e70:	bf00      	nop
 8019e72:	3710      	adds	r7, #16
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd80      	pop	{r7, pc}

08019e78 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b082      	sub	sp, #8
 8019e7c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8019e7e:	2300      	movs	r3, #0
 8019e80:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8019e82:	2300      	movs	r3, #0
 8019e84:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8019e86:	2300      	movs	r3, #0
 8019e88:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8019e8a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8019e8e:	f7fe f9d1 	bl	8018234 <WIZCHIP_READ>
 8019e92:	4603      	mov	r3, r0
 8019e94:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8019e96:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8019e9a:	f7fe f9cb 	bl	8018234 <WIZCHIP_READ>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8019ea2:	79bb      	ldrb	r3, [r7, #6]
 8019ea4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8019ea6:	88bb      	ldrh	r3, [r7, #4]
 8019ea8:	021b      	lsls	r3, r3, #8
 8019eaa:	b29a      	uxth	r2, r3
 8019eac:	79fb      	ldrb	r3, [r7, #7]
 8019eae:	b29b      	uxth	r3, r3
 8019eb0:	4413      	add	r3, r2
 8019eb2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8019eb4:	88bb      	ldrh	r3, [r7, #4]
}
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	3708      	adds	r7, #8
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	bd80      	pop	{r7, pc}

08019ebe <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8019ebe:	b580      	push	{r7, lr}
 8019ec0:	b082      	sub	sp, #8
 8019ec2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8019ec8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8019ecc:	f7fe f9b2 	bl	8018234 <WIZCHIP_READ>
 8019ed0:	4603      	mov	r3, r0
 8019ed2:	f003 0301 	and.w	r3, r3, #1
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d001      	beq.n	8019ede <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8019eda:	2301      	movs	r3, #1
 8019edc:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8019ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	3708      	adds	r7, #8
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	bd80      	pop	{r7, pc}

08019eea <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8019eea:	b580      	push	{r7, lr}
 8019eec:	b082      	sub	sp, #8
 8019eee:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8019ef4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8019ef8:	f7fe f99c 	bl	8018234 <WIZCHIP_READ>
 8019efc:	4603      	mov	r3, r0
 8019efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019f02:	2b30      	cmp	r3, #48	; 0x30
 8019f04:	d102      	bne.n	8019f0c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8019f06:	2301      	movs	r3, #1
 8019f08:	71fb      	strb	r3, [r7, #7]
 8019f0a:	e001      	b.n	8019f10 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8019f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	3708      	adds	r7, #8
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd80      	pop	{r7, pc}

08019f1c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b082      	sub	sp, #8
 8019f20:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8019f22:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8019f26:	f7fe f985 	bl	8018234 <WIZCHIP_READ>
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8019f2e:	79fb      	ldrb	r3, [r7, #7]
 8019f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019f34:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8019f36:	79fb      	ldrb	r3, [r7, #7]
 8019f38:	4619      	mov	r1, r3
 8019f3a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8019f3e:	f7fe f9c5 	bl	80182cc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8019f42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8019f46:	f7fe f975 	bl	8018234 <WIZCHIP_READ>
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8019f4e:	79fb      	ldrb	r3, [r7, #7]
 8019f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019f54:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8019f56:	79fb      	ldrb	r3, [r7, #7]
 8019f58:	4619      	mov	r1, r3
 8019f5a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8019f5e:	f7fe f9b5 	bl	80182cc <WIZCHIP_WRITE>
}
 8019f62:	bf00      	nop
 8019f64:	3708      	adds	r7, #8
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}

08019f6a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8019f6a:	b580      	push	{r7, lr}
 8019f6c:	b084      	sub	sp, #16
 8019f6e:	af00      	add	r7, sp, #0
 8019f70:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8019f72:	2300      	movs	r3, #0
 8019f74:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	781b      	ldrb	r3, [r3, #0]
 8019f7a:	2b01      	cmp	r3, #1
 8019f7c:	d104      	bne.n	8019f88 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8019f7e:	7bfb      	ldrb	r3, [r7, #15]
 8019f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f84:	73fb      	strb	r3, [r7, #15]
 8019f86:	e003      	b.n	8019f90 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8019f88:	7bfb      	ldrb	r3, [r7, #15]
 8019f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019f8e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	785b      	ldrb	r3, [r3, #1]
 8019f94:	2b01      	cmp	r3, #1
 8019f96:	d104      	bne.n	8019fa2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8019f98:	7bfb      	ldrb	r3, [r7, #15]
 8019f9a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8019f9e:	73fb      	strb	r3, [r7, #15]
 8019fa0:	e019      	b.n	8019fd6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	78db      	ldrb	r3, [r3, #3]
 8019fa6:	2b01      	cmp	r3, #1
 8019fa8:	d10d      	bne.n	8019fc6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	789b      	ldrb	r3, [r3, #2]
 8019fae:	2b01      	cmp	r3, #1
 8019fb0:	d104      	bne.n	8019fbc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8019fb2:	7bfb      	ldrb	r3, [r7, #15]
 8019fb4:	f043 0318 	orr.w	r3, r3, #24
 8019fb8:	73fb      	strb	r3, [r7, #15]
 8019fba:	e00c      	b.n	8019fd6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8019fbc:	7bfb      	ldrb	r3, [r7, #15]
 8019fbe:	f043 0308 	orr.w	r3, r3, #8
 8019fc2:	73fb      	strb	r3, [r7, #15]
 8019fc4:	e007      	b.n	8019fd6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	789b      	ldrb	r3, [r3, #2]
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d103      	bne.n	8019fd6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8019fce:	7bfb      	ldrb	r3, [r7, #15]
 8019fd0:	f043 0310 	orr.w	r3, r3, #16
 8019fd4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8019fd6:	7bfb      	ldrb	r3, [r7, #15]
 8019fd8:	4619      	mov	r1, r3
 8019fda:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8019fde:	f7fe f975 	bl	80182cc <WIZCHIP_WRITE>
   wizphy_reset();
 8019fe2:	f7ff ff9b 	bl	8019f1c <wizphy_reset>
}
 8019fe6:	bf00      	nop
 8019fe8:	3710      	adds	r7, #16
 8019fea:	46bd      	mov	sp, r7
 8019fec:	bd80      	pop	{r7, pc}
	...

08019ff0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b084      	sub	sp, #16
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8019ffc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a000:	f7fe f918 	bl	8018234 <WIZCHIP_READ>
 801a004:	4603      	mov	r3, r0
 801a006:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a008:	7bfb      	ldrb	r3, [r7, #15]
 801a00a:	119b      	asrs	r3, r3, #6
 801a00c:	b2db      	uxtb	r3, r3
 801a00e:	f003 0301 	and.w	r3, r3, #1
 801a012:	b2da      	uxtb	r2, r3
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a018:	7bfb      	ldrb	r3, [r7, #15]
 801a01a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a01e:	2b20      	cmp	r3, #32
 801a020:	d001      	beq.n	801a026 <wizphy_getphyconf+0x36>
 801a022:	2b38      	cmp	r3, #56	; 0x38
 801a024:	d103      	bne.n	801a02e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	2201      	movs	r2, #1
 801a02a:	705a      	strb	r2, [r3, #1]
         break;
 801a02c:	e003      	b.n	801a036 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2200      	movs	r2, #0
 801a032:	705a      	strb	r2, [r3, #1]
         break;
 801a034:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a036:	7bfb      	ldrb	r3, [r7, #15]
 801a038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a03c:	3b10      	subs	r3, #16
 801a03e:	2b10      	cmp	r3, #16
 801a040:	bf8c      	ite	hi
 801a042:	2201      	movhi	r2, #1
 801a044:	2200      	movls	r2, #0
 801a046:	b2d2      	uxtb	r2, r2
 801a048:	2a00      	cmp	r2, #0
 801a04a:	d10f      	bne.n	801a06c <wizphy_getphyconf+0x7c>
 801a04c:	4a1b      	ldr	r2, [pc, #108]	; (801a0bc <wizphy_getphyconf+0xcc>)
 801a04e:	fa22 f303 	lsr.w	r3, r2, r3
 801a052:	f003 0301 	and.w	r3, r3, #1
 801a056:	2b00      	cmp	r3, #0
 801a058:	bf14      	ite	ne
 801a05a:	2301      	movne	r3, #1
 801a05c:	2300      	moveq	r3, #0
 801a05e:	b2db      	uxtb	r3, r3
 801a060:	2b00      	cmp	r3, #0
 801a062:	d003      	beq.n	801a06c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	2201      	movs	r2, #1
 801a068:	709a      	strb	r2, [r3, #2]
         break;
 801a06a:	e003      	b.n	801a074 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	2200      	movs	r2, #0
 801a070:	709a      	strb	r2, [r3, #2]
         break;
 801a072:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a074:	7bfb      	ldrb	r3, [r7, #15]
 801a076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a07a:	3b08      	subs	r3, #8
 801a07c:	2b18      	cmp	r3, #24
 801a07e:	bf8c      	ite	hi
 801a080:	2201      	movhi	r2, #1
 801a082:	2200      	movls	r2, #0
 801a084:	b2d2      	uxtb	r2, r2
 801a086:	2a00      	cmp	r2, #0
 801a088:	d10f      	bne.n	801a0aa <wizphy_getphyconf+0xba>
 801a08a:	4a0d      	ldr	r2, [pc, #52]	; (801a0c0 <wizphy_getphyconf+0xd0>)
 801a08c:	fa22 f303 	lsr.w	r3, r2, r3
 801a090:	f003 0301 	and.w	r3, r3, #1
 801a094:	2b00      	cmp	r3, #0
 801a096:	bf14      	ite	ne
 801a098:	2301      	movne	r3, #1
 801a09a:	2300      	moveq	r3, #0
 801a09c:	b2db      	uxtb	r3, r3
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d003      	beq.n	801a0aa <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	2201      	movs	r2, #1
 801a0a6:	70da      	strb	r2, [r3, #3]
         break;
 801a0a8:	e003      	b.n	801a0b2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	70da      	strb	r2, [r3, #3]
         break;
 801a0b0:	bf00      	nop
   }
}
 801a0b2:	bf00      	nop
 801a0b4:	3710      	adds	r7, #16
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd80      	pop	{r7, pc}
 801a0ba:	bf00      	nop
 801a0bc:	00010101 	.word	0x00010101
 801a0c0:	01010001 	.word	0x01010001

0801a0c4 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b084      	sub	sp, #16
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a0cc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a0d0:	f7fe f8b0 	bl	8018234 <WIZCHIP_READ>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a0d8:	7bfb      	ldrb	r3, [r7, #15]
 801a0da:	109b      	asrs	r3, r3, #2
 801a0dc:	b2db      	uxtb	r3, r3
 801a0de:	f003 0301 	and.w	r3, r3, #1
 801a0e2:	b2da      	uxtb	r2, r3
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a0e8:	7bfb      	ldrb	r3, [r7, #15]
 801a0ea:	105b      	asrs	r3, r3, #1
 801a0ec:	b2db      	uxtb	r3, r3
 801a0ee:	f003 0301 	and.w	r3, r3, #1
 801a0f2:	b2da      	uxtb	r2, r3
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	709a      	strb	r2, [r3, #2]
}
 801a0f8:	bf00      	nop
 801a0fa:	3710      	adds	r7, #16
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}

0801a100 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b084      	sub	sp, #16
 801a104:	af00      	add	r7, sp, #0
 801a106:	4603      	mov	r3, r0
 801a108:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a10a:	2300      	movs	r3, #0
 801a10c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a10e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a112:	f7fe f88f 	bl	8018234 <WIZCHIP_READ>
 801a116:	4603      	mov	r3, r0
 801a118:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a11a:	7bfb      	ldrb	r3, [r7, #15]
 801a11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a120:	2b00      	cmp	r3, #0
 801a122:	d102      	bne.n	801a12a <wizphy_setphypmode+0x2a>
 801a124:	f04f 33ff 	mov.w	r3, #4294967295
 801a128:	e030      	b.n	801a18c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a12a:	7bfb      	ldrb	r3, [r7, #15]
 801a12c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 801a130:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a132:	79fb      	ldrb	r3, [r7, #7]
 801a134:	2b01      	cmp	r3, #1
 801a136:	d104      	bne.n	801a142 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a138:	7bfb      	ldrb	r3, [r7, #15]
 801a13a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801a13e:	73fb      	strb	r3, [r7, #15]
 801a140:	e003      	b.n	801a14a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a142:	7bfb      	ldrb	r3, [r7, #15]
 801a144:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a148:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a14a:	7bfb      	ldrb	r3, [r7, #15]
 801a14c:	4619      	mov	r1, r3
 801a14e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a152:	f7fe f8bb 	bl	80182cc <WIZCHIP_WRITE>
   wizphy_reset();
 801a156:	f7ff fee1 	bl	8019f1c <wizphy_reset>
   tmp = getPHYCFGR();
 801a15a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a15e:	f7fe f869 	bl	8018234 <WIZCHIP_READ>
 801a162:	4603      	mov	r3, r0
 801a164:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a166:	79fb      	ldrb	r3, [r7, #7]
 801a168:	2b01      	cmp	r3, #1
 801a16a:	d106      	bne.n	801a17a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a16c:	7bfb      	ldrb	r3, [r7, #15]
 801a16e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a172:	2b00      	cmp	r3, #0
 801a174:	d008      	beq.n	801a188 <wizphy_setphypmode+0x88>
 801a176:	2300      	movs	r3, #0
 801a178:	e008      	b.n	801a18c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a17a:	7bfb      	ldrb	r3, [r7, #15]
 801a17c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a180:	2b00      	cmp	r3, #0
 801a182:	d001      	beq.n	801a188 <wizphy_setphypmode+0x88>
 801a184:	2300      	movs	r3, #0
 801a186:	e001      	b.n	801a18c <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a188:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	3710      	adds	r7, #16
 801a190:	46bd      	mov	sp, r7
 801a192:	bd80      	pop	{r7, pc}

0801a194 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b082      	sub	sp, #8
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2206      	movs	r2, #6
 801a1a0:	4619      	mov	r1, r3
 801a1a2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a1a6:	f7fe f93f 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	330e      	adds	r3, #14
 801a1ae:	2204      	movs	r2, #4
 801a1b0:	4619      	mov	r1, r3
 801a1b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a1b6:	f7fe f937 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	330a      	adds	r3, #10
 801a1be:	2204      	movs	r2, #4
 801a1c0:	4619      	mov	r1, r3
 801a1c2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a1c6:	f7fe f92f 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	3306      	adds	r3, #6
 801a1ce:	2204      	movs	r2, #4
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a1d6:	f7fe f927 	bl	8018428 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	7c9a      	ldrb	r2, [r3, #18]
 801a1de:	4b0b      	ldr	r3, [pc, #44]	; (801a20c <wizchip_setnetinfo+0x78>)
 801a1e0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	7cda      	ldrb	r2, [r3, #19]
 801a1e6:	4b09      	ldr	r3, [pc, #36]	; (801a20c <wizchip_setnetinfo+0x78>)
 801a1e8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	7d1a      	ldrb	r2, [r3, #20]
 801a1ee:	4b07      	ldr	r3, [pc, #28]	; (801a20c <wizchip_setnetinfo+0x78>)
 801a1f0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	7d5a      	ldrb	r2, [r3, #21]
 801a1f6:	4b05      	ldr	r3, [pc, #20]	; (801a20c <wizchip_setnetinfo+0x78>)
 801a1f8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	7d9a      	ldrb	r2, [r3, #22]
 801a1fe:	4b04      	ldr	r3, [pc, #16]	; (801a210 <wizchip_setnetinfo+0x7c>)
 801a200:	701a      	strb	r2, [r3, #0]
}
 801a202:	bf00      	nop
 801a204:	3708      	adds	r7, #8
 801a206:	46bd      	mov	sp, r7
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	bf00      	nop
 801a20c:	2000096c 	.word	0x2000096c
 801a210:	20000970 	.word	0x20000970

0801a214 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b082      	sub	sp, #8
 801a218:	af00      	add	r7, sp, #0
 801a21a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2206      	movs	r2, #6
 801a220:	4619      	mov	r1, r3
 801a222:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a226:	f7fe f89f 	bl	8018368 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	330e      	adds	r3, #14
 801a22e:	2204      	movs	r2, #4
 801a230:	4619      	mov	r1, r3
 801a232:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a236:	f7fe f897 	bl	8018368 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	330a      	adds	r3, #10
 801a23e:	2204      	movs	r2, #4
 801a240:	4619      	mov	r1, r3
 801a242:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a246:	f7fe f88f 	bl	8018368 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	3306      	adds	r3, #6
 801a24e:	2204      	movs	r2, #4
 801a250:	4619      	mov	r1, r3
 801a252:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a256:	f7fe f887 	bl	8018368 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a25a:	4b0c      	ldr	r3, [pc, #48]	; (801a28c <wizchip_getnetinfo+0x78>)
 801a25c:	781a      	ldrb	r2, [r3, #0]
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a262:	4b0a      	ldr	r3, [pc, #40]	; (801a28c <wizchip_getnetinfo+0x78>)
 801a264:	785a      	ldrb	r2, [r3, #1]
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a26a:	4b08      	ldr	r3, [pc, #32]	; (801a28c <wizchip_getnetinfo+0x78>)
 801a26c:	789a      	ldrb	r2, [r3, #2]
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a272:	4b06      	ldr	r3, [pc, #24]	; (801a28c <wizchip_getnetinfo+0x78>)
 801a274:	78da      	ldrb	r2, [r3, #3]
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a27a:	4b05      	ldr	r3, [pc, #20]	; (801a290 <wizchip_getnetinfo+0x7c>)
 801a27c:	781a      	ldrb	r2, [r3, #0]
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	759a      	strb	r2, [r3, #22]
}
 801a282:	bf00      	nop
 801a284:	3708      	adds	r7, #8
 801a286:	46bd      	mov	sp, r7
 801a288:	bd80      	pop	{r7, pc}
 801a28a:	bf00      	nop
 801a28c:	2000096c 	.word	0x2000096c
 801a290:	20000970 	.word	0x20000970

0801a294 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b084      	sub	sp, #16
 801a298:	af00      	add	r7, sp, #0
 801a29a:	4603      	mov	r3, r0
 801a29c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a29e:	2300      	movs	r3, #0
 801a2a0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a2a2:	79fb      	ldrb	r3, [r7, #7]
 801a2a4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d002      	beq.n	801a2b2 <wizchip_setnetmode+0x1e>
 801a2ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a2b0:	e00e      	b.n	801a2d0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a2b2:	2000      	movs	r0, #0
 801a2b4:	f7fd ffbe 	bl	8018234 <WIZCHIP_READ>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a2bc:	7bfa      	ldrb	r2, [r7, #15]
 801a2be:	79fb      	ldrb	r3, [r7, #7]
 801a2c0:	4313      	orrs	r3, r2
 801a2c2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a2c4:	7bfb      	ldrb	r3, [r7, #15]
 801a2c6:	4619      	mov	r1, r3
 801a2c8:	2000      	movs	r0, #0
 801a2ca:	f7fd ffff 	bl	80182cc <WIZCHIP_WRITE>
   return 0;
 801a2ce:	2300      	movs	r3, #0
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3710      	adds	r7, #16
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a2dc:	2000      	movs	r0, #0
 801a2de:	f7fd ffa9 	bl	8018234 <WIZCHIP_READ>
 801a2e2:	4603      	mov	r3, r0
}
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	781b      	ldrb	r3, [r3, #0]
 801a2f4:	4619      	mov	r1, r3
 801a2f6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a2fa:	f7fd ffe7 	bl	80182cc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	885b      	ldrh	r3, [r3, #2]
 801a302:	0a1b      	lsrs	r3, r3, #8
 801a304:	b29b      	uxth	r3, r3
 801a306:	b2db      	uxtb	r3, r3
 801a308:	4619      	mov	r1, r3
 801a30a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a30e:	f7fd ffdd 	bl	80182cc <WIZCHIP_WRITE>
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	885b      	ldrh	r3, [r3, #2]
 801a316:	b2db      	uxtb	r3, r3
 801a318:	4619      	mov	r1, r3
 801a31a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a31e:	f7fd ffd5 	bl	80182cc <WIZCHIP_WRITE>
}
 801a322:	bf00      	nop
 801a324:	3708      	adds	r7, #8
 801a326:	46bd      	mov	sp, r7
 801a328:	bd80      	pop	{r7, pc}

0801a32a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801a32a:	b590      	push	{r4, r7, lr}
 801a32c:	b083      	sub	sp, #12
 801a32e:	af00      	add	r7, sp, #0
 801a330:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801a332:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a336:	f7fd ff7d 	bl	8018234 <WIZCHIP_READ>
 801a33a:	4603      	mov	r3, r0
 801a33c:	461a      	mov	r2, r3
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801a342:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a346:	f7fd ff75 	bl	8018234 <WIZCHIP_READ>
 801a34a:	4603      	mov	r3, r0
 801a34c:	b29b      	uxth	r3, r3
 801a34e:	021b      	lsls	r3, r3, #8
 801a350:	b29c      	uxth	r4, r3
 801a352:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a356:	f7fd ff6d 	bl	8018234 <WIZCHIP_READ>
 801a35a:	4603      	mov	r3, r0
 801a35c:	b29b      	uxth	r3, r3
 801a35e:	4423      	add	r3, r4
 801a360:	b29a      	uxth	r2, r3
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	805a      	strh	r2, [r3, #2]
}
 801a366:	bf00      	nop
 801a368:	370c      	adds	r7, #12
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd90      	pop	{r4, r7, pc}
	...

0801a370 <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801a370:	b580      	push	{r7, lr}
 801a372:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801a374:	2204      	movs	r2, #4
 801a376:	4909      	ldr	r1, [pc, #36]	; (801a39c <default_ip_assign+0x2c>)
 801a378:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a37c:	f7fe f854 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801a380:	2204      	movs	r2, #4
 801a382:	4907      	ldr	r1, [pc, #28]	; (801a3a0 <default_ip_assign+0x30>)
 801a384:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a388:	f7fe f84e 	bl	8018428 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801a38c:	2204      	movs	r2, #4
 801a38e:	4905      	ldr	r1, [pc, #20]	; (801a3a4 <default_ip_assign+0x34>)
 801a390:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a394:	f7fe f848 	bl	8018428 <WIZCHIP_WRITE_BUF>
}
 801a398:	bf00      	nop
 801a39a:	bd80      	pop	{r7, pc}
 801a39c:	20000980 	.word	0x20000980
 801a3a0:	20000988 	.word	0x20000988
 801a3a4:	20000984 	.word	0x20000984

0801a3a8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801a3ac:	2180      	movs	r1, #128	; 0x80
 801a3ae:	2000      	movs	r0, #0
 801a3b0:	f7fd ff8c 	bl	80182cc <WIZCHIP_WRITE>
   getMR(); // for delay
 801a3b4:	2000      	movs	r0, #0
 801a3b6:	f7fd ff3d 	bl	8018234 <WIZCHIP_READ>
   default_ip_assign();
 801a3ba:	f7ff ffd9 	bl	801a370 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801a3be:	2206      	movs	r2, #6
 801a3c0:	4903      	ldr	r1, [pc, #12]	; (801a3d0 <default_ip_update+0x28>)
 801a3c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a3c6:	f7fe f82f 	bl	8018428 <WIZCHIP_WRITE_BUF>
}
 801a3ca:	bf00      	nop
 801a3cc:	bd80      	pop	{r7, pc}
 801a3ce:	bf00      	nop
 801a3d0:	200009a0 	.word	0x200009a0

0801a3d4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801a3d8:	2180      	movs	r1, #128	; 0x80
 801a3da:	2000      	movs	r0, #0
 801a3dc:	f7fd ff76 	bl	80182cc <WIZCHIP_WRITE>
	getMR(); // for delay
 801a3e0:	2000      	movs	r0, #0
 801a3e2:	f7fd ff27 	bl	8018234 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801a3e6:	2206      	movs	r2, #6
 801a3e8:	4903      	ldr	r1, [pc, #12]	; (801a3f8 <default_ip_conflict+0x24>)
 801a3ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a3ee:	f7fe f81b 	bl	8018428 <WIZCHIP_WRITE_BUF>
}
 801a3f2:	bf00      	nop
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	200009a0 	.word	0x200009a0

0801a3fc <default_delay>:

void default_delay(uint32_t time){}
 801a3fc:	b480      	push	{r7}
 801a3fe:	b083      	sub	sp, #12
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	bf00      	nop
 801a406:	370c      	adds	r7, #12
 801a408:	46bd      	mov	sp, r7
 801a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a40e:	4770      	bx	lr

0801a410 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801a410:	b480      	push	{r7}
 801a412:	b085      	sub	sp, #20
 801a414:	af00      	add	r7, sp, #0
 801a416:	60f8      	str	r0, [r7, #12]
 801a418:	60b9      	str	r1, [r7, #8]
 801a41a:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801a41c:	4b10      	ldr	r3, [pc, #64]	; (801a460 <reg_dhcp_cbfunc+0x50>)
 801a41e:	4a11      	ldr	r2, [pc, #68]	; (801a464 <reg_dhcp_cbfunc+0x54>)
 801a420:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801a422:	4b11      	ldr	r3, [pc, #68]	; (801a468 <reg_dhcp_cbfunc+0x58>)
 801a424:	4a11      	ldr	r2, [pc, #68]	; (801a46c <reg_dhcp_cbfunc+0x5c>)
 801a426:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801a428:	4b11      	ldr	r3, [pc, #68]	; (801a470 <reg_dhcp_cbfunc+0x60>)
 801a42a:	4a12      	ldr	r2, [pc, #72]	; (801a474 <reg_dhcp_cbfunc+0x64>)
 801a42c:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d002      	beq.n	801a43a <reg_dhcp_cbfunc+0x2a>
 801a434:	4a0a      	ldr	r2, [pc, #40]	; (801a460 <reg_dhcp_cbfunc+0x50>)
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801a43a:	68bb      	ldr	r3, [r7, #8]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d002      	beq.n	801a446 <reg_dhcp_cbfunc+0x36>
 801a440:	4a09      	ldr	r2, [pc, #36]	; (801a468 <reg_dhcp_cbfunc+0x58>)
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d002      	beq.n	801a452 <reg_dhcp_cbfunc+0x42>
 801a44c:	4a08      	ldr	r2, [pc, #32]	; (801a470 <reg_dhcp_cbfunc+0x60>)
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6013      	str	r3, [r2, #0]
}
 801a452:	bf00      	nop
 801a454:	3714      	adds	r7, #20
 801a456:	46bd      	mov	sp, r7
 801a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a45c:	4770      	bx	lr
 801a45e:	bf00      	nop
 801a460:	20000104 	.word	0x20000104
 801a464:	0801a371 	.word	0x0801a371
 801a468:	20000108 	.word	0x20000108
 801a46c:	0801a3a9 	.word	0x0801a3a9
 801a470:	2000010c 	.word	0x2000010c
 801a474:	0801a3d5 	.word	0x0801a3d5

0801a478 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b084      	sub	sp, #16
 801a47c:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801a47e:	463b      	mov	r3, r7
 801a480:	2206      	movs	r2, #6
 801a482:	4619      	mov	r1, r3
 801a484:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a488:	f7fd ff6e 	bl	8018368 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801a48c:	4b72      	ldr	r3, [pc, #456]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	2201      	movs	r2, #1
 801a492:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801a494:	4b70      	ldr	r3, [pc, #448]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	2201      	movs	r2, #1
 801a49a:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801a49c:	4b6e      	ldr	r3, [pc, #440]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	2206      	movs	r2, #6
 801a4a2:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801a4a4:	4b6c      	ldr	r3, [pc, #432]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801a4ac:	4b6a      	ldr	r3, [pc, #424]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	3304      	adds	r3, #4
 801a4b2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801a4b4:	4b69      	ldr	r3, [pc, #420]	; (801a65c <makeDHCPMSG+0x1e4>)
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	0e1b      	lsrs	r3, r3, #24
 801a4ba:	b2da      	uxtb	r2, r3
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801a4c0:	4b66      	ldr	r3, [pc, #408]	; (801a65c <makeDHCPMSG+0x1e4>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	0c1a      	lsrs	r2, r3, #16
 801a4c6:	68bb      	ldr	r3, [r7, #8]
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	b2d2      	uxtb	r2, r2
 801a4cc:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801a4ce:	4b63      	ldr	r3, [pc, #396]	; (801a65c <makeDHCPMSG+0x1e4>)
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	0a1a      	lsrs	r2, r3, #8
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	3302      	adds	r3, #2
 801a4d8:	b2d2      	uxtb	r2, r2
 801a4da:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801a4dc:	4b5f      	ldr	r3, [pc, #380]	; (801a65c <makeDHCPMSG+0x1e4>)
 801a4de:	681a      	ldr	r2, [r3, #0]
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	3303      	adds	r3, #3
 801a4e4:	b2d2      	uxtb	r2, r2
 801a4e6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801a4e8:	4b5b      	ldr	r3, [pc, #364]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801a4f0:	4b59      	ldr	r3, [pc, #356]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	330a      	adds	r3, #10
 801a4f6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801a4f8:	68bb      	ldr	r3, [r7, #8]
 801a4fa:	2280      	movs	r2, #128	; 0x80
 801a4fc:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801a4fe:	68bb      	ldr	r3, [r7, #8]
 801a500:	3301      	adds	r3, #1
 801a502:	2200      	movs	r2, #0
 801a504:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801a506:	4b54      	ldr	r3, [pc, #336]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	2200      	movs	r2, #0
 801a50c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801a50e:	4b52      	ldr	r3, [pc, #328]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	2200      	movs	r2, #0
 801a514:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801a516:	4b50      	ldr	r3, [pc, #320]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	2200      	movs	r2, #0
 801a51c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801a51e:	4b4e      	ldr	r3, [pc, #312]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2200      	movs	r2, #0
 801a524:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801a526:	4b4c      	ldr	r3, [pc, #304]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	2200      	movs	r2, #0
 801a52c:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801a52e:	4b4a      	ldr	r3, [pc, #296]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	2200      	movs	r2, #0
 801a534:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801a536:	4b48      	ldr	r3, [pc, #288]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	2200      	movs	r2, #0
 801a53c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801a53e:	4b46      	ldr	r3, [pc, #280]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	2200      	movs	r2, #0
 801a544:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801a546:	4b44      	ldr	r3, [pc, #272]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	2200      	movs	r2, #0
 801a54c:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801a54e:	4b42      	ldr	r3, [pc, #264]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	2200      	movs	r2, #0
 801a554:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801a556:	4b40      	ldr	r3, [pc, #256]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	2200      	movs	r2, #0
 801a55c:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801a55e:	4b3e      	ldr	r3, [pc, #248]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	2200      	movs	r2, #0
 801a564:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801a566:	4b3c      	ldr	r3, [pc, #240]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	2200      	movs	r2, #0
 801a56c:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801a56e:	4b3a      	ldr	r3, [pc, #232]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	2200      	movs	r2, #0
 801a574:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801a576:	4b38      	ldr	r3, [pc, #224]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	2200      	movs	r2, #0
 801a57c:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801a57e:	4b36      	ldr	r3, [pc, #216]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	2200      	movs	r2, #0
 801a584:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801a586:	4b34      	ldr	r3, [pc, #208]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	4a35      	ldr	r2, [pc, #212]	; (801a660 <makeDHCPMSG+0x1e8>)
 801a58c:	7812      	ldrb	r2, [r2, #0]
 801a58e:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801a590:	4b31      	ldr	r3, [pc, #196]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	4a32      	ldr	r2, [pc, #200]	; (801a660 <makeDHCPMSG+0x1e8>)
 801a596:	7852      	ldrb	r2, [r2, #1]
 801a598:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801a59a:	4b2f      	ldr	r3, [pc, #188]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	4a30      	ldr	r2, [pc, #192]	; (801a660 <makeDHCPMSG+0x1e8>)
 801a5a0:	7892      	ldrb	r2, [r2, #2]
 801a5a2:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801a5a4:	4b2c      	ldr	r3, [pc, #176]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	4a2d      	ldr	r2, [pc, #180]	; (801a660 <makeDHCPMSG+0x1e8>)
 801a5aa:	78d2      	ldrb	r2, [r2, #3]
 801a5ac:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801a5ae:	4b2a      	ldr	r3, [pc, #168]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	4a2b      	ldr	r2, [pc, #172]	; (801a660 <makeDHCPMSG+0x1e8>)
 801a5b4:	7912      	ldrb	r2, [r2, #4]
 801a5b6:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801a5ba:	4b27      	ldr	r3, [pc, #156]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	4a28      	ldr	r2, [pc, #160]	; (801a660 <makeDHCPMSG+0x1e8>)
 801a5c0:	7952      	ldrb	r2, [r2, #5]
 801a5c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801a5c6:	2306      	movs	r3, #6
 801a5c8:	73fb      	strb	r3, [r7, #15]
 801a5ca:	e008      	b.n	801a5de <makeDHCPMSG+0x166>
 801a5cc:	4b22      	ldr	r3, [pc, #136]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a5ce:	681a      	ldr	r2, [r3, #0]
 801a5d0:	7bfb      	ldrb	r3, [r7, #15]
 801a5d2:	4413      	add	r3, r2
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	771a      	strb	r2, [r3, #28]
 801a5d8:	7bfb      	ldrb	r3, [r7, #15]
 801a5da:	3301      	adds	r3, #1
 801a5dc:	73fb      	strb	r3, [r7, #15]
 801a5de:	7bfb      	ldrb	r3, [r7, #15]
 801a5e0:	2b0f      	cmp	r3, #15
 801a5e2:	d9f3      	bls.n	801a5cc <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	73fb      	strb	r3, [r7, #15]
 801a5e8:	e009      	b.n	801a5fe <makeDHCPMSG+0x186>
 801a5ea:	4b1b      	ldr	r3, [pc, #108]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a5ec:	681a      	ldr	r2, [r3, #0]
 801a5ee:	7bfb      	ldrb	r3, [r7, #15]
 801a5f0:	4413      	add	r3, r2
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801a5f8:	7bfb      	ldrb	r3, [r7, #15]
 801a5fa:	3301      	adds	r3, #1
 801a5fc:	73fb      	strb	r3, [r7, #15]
 801a5fe:	7bfb      	ldrb	r3, [r7, #15]
 801a600:	2b3f      	cmp	r3, #63	; 0x3f
 801a602:	d9f2      	bls.n	801a5ea <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801a604:	2300      	movs	r3, #0
 801a606:	73fb      	strb	r3, [r7, #15]
 801a608:	e009      	b.n	801a61e <makeDHCPMSG+0x1a6>
 801a60a:	4b13      	ldr	r3, [pc, #76]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a60c:	681a      	ldr	r2, [r3, #0]
 801a60e:	7bfb      	ldrb	r3, [r7, #15]
 801a610:	4413      	add	r3, r2
 801a612:	2200      	movs	r2, #0
 801a614:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801a618:	7bfb      	ldrb	r3, [r7, #15]
 801a61a:	3301      	adds	r3, #1
 801a61c:	73fb      	strb	r3, [r7, #15]
 801a61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a622:	2b00      	cmp	r3, #0
 801a624:	daf1      	bge.n	801a60a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801a626:	4b0c      	ldr	r3, [pc, #48]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	2263      	movs	r2, #99	; 0x63
 801a62c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801a630:	4b09      	ldr	r3, [pc, #36]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	2282      	movs	r2, #130	; 0x82
 801a636:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801a63a:	4b07      	ldr	r3, [pc, #28]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	2253      	movs	r2, #83	; 0x53
 801a640:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801a644:	4b04      	ldr	r3, [pc, #16]	; (801a658 <makeDHCPMSG+0x1e0>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	2263      	movs	r2, #99	; 0x63
 801a64a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 801a64e:	bf00      	nop
 801a650:	3710      	adds	r7, #16
 801a652:	46bd      	mov	sp, r7
 801a654:	bd80      	pop	{r7, pc}
 801a656:	bf00      	nop
 801a658:	2000099c 	.word	0x2000099c
 801a65c:	20000998 	.word	0x20000998
 801a660:	200009a0 	.word	0x200009a0

0801a664 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801a664:	b5b0      	push	{r4, r5, r7, lr}
 801a666:	b084      	sub	sp, #16
 801a668:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801a66a:	2300      	movs	r3, #0
 801a66c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801a66e:	f7ff ff03 	bl	801a478 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801a672:	4b56      	ldr	r3, [pc, #344]	; (801a7cc <send_DHCP_DISCOVER+0x168>)
 801a674:	2200      	movs	r2, #0
 801a676:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801a678:	4b54      	ldr	r3, [pc, #336]	; (801a7cc <send_DHCP_DISCOVER+0x168>)
 801a67a:	2200      	movs	r2, #0
 801a67c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801a67e:	4b53      	ldr	r3, [pc, #332]	; (801a7cc <send_DHCP_DISCOVER+0x168>)
 801a680:	2200      	movs	r2, #0
 801a682:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801a684:	4b51      	ldr	r3, [pc, #324]	; (801a7cc <send_DHCP_DISCOVER+0x168>)
 801a686:	2200      	movs	r2, #0
 801a688:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801a68a:	4b51      	ldr	r3, [pc, #324]	; (801a7d0 <send_DHCP_DISCOVER+0x16c>)
 801a68c:	2200      	movs	r2, #0
 801a68e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801a690:	4b4f      	ldr	r3, [pc, #316]	; (801a7d0 <send_DHCP_DISCOVER+0x16c>)
 801a692:	2200      	movs	r2, #0
 801a694:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801a696:	4b4e      	ldr	r3, [pc, #312]	; (801a7d0 <send_DHCP_DISCOVER+0x16c>)
 801a698:	2200      	movs	r2, #0
 801a69a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801a69c:	4b4c      	ldr	r3, [pc, #304]	; (801a7d0 <send_DHCP_DISCOVER+0x16c>)
 801a69e:	2200      	movs	r2, #0
 801a6a0:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801a6a2:	2304      	movs	r3, #4
 801a6a4:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801a6a6:	4b4b      	ldr	r3, [pc, #300]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a6a8:	681a      	ldr	r2, [r3, #0]
 801a6aa:	88bb      	ldrh	r3, [r7, #4]
 801a6ac:	1c59      	adds	r1, r3, #1
 801a6ae:	80b9      	strh	r1, [r7, #4]
 801a6b0:	4413      	add	r3, r2
 801a6b2:	2235      	movs	r2, #53	; 0x35
 801a6b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801a6b8:	4b46      	ldr	r3, [pc, #280]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a6ba:	681a      	ldr	r2, [r3, #0]
 801a6bc:	88bb      	ldrh	r3, [r7, #4]
 801a6be:	1c59      	adds	r1, r3, #1
 801a6c0:	80b9      	strh	r1, [r7, #4]
 801a6c2:	4413      	add	r3, r2
 801a6c4:	2201      	movs	r2, #1
 801a6c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801a6ca:	4b42      	ldr	r3, [pc, #264]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a6cc:	681a      	ldr	r2, [r3, #0]
 801a6ce:	88bb      	ldrh	r3, [r7, #4]
 801a6d0:	1c59      	adds	r1, r3, #1
 801a6d2:	80b9      	strh	r1, [r7, #4]
 801a6d4:	4413      	add	r3, r2
 801a6d6:	2201      	movs	r2, #1
 801a6d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801a6dc:	4b3d      	ldr	r3, [pc, #244]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a6de:	681a      	ldr	r2, [r3, #0]
 801a6e0:	88bb      	ldrh	r3, [r7, #4]
 801a6e2:	1c59      	adds	r1, r3, #1
 801a6e4:	80b9      	strh	r1, [r7, #4]
 801a6e6:	4413      	add	r3, r2
 801a6e8:	223d      	movs	r2, #61	; 0x3d
 801a6ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801a6ee:	4b39      	ldr	r3, [pc, #228]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a6f0:	681a      	ldr	r2, [r3, #0]
 801a6f2:	88bb      	ldrh	r3, [r7, #4]
 801a6f4:	1c59      	adds	r1, r3, #1
 801a6f6:	80b9      	strh	r1, [r7, #4]
 801a6f8:	4413      	add	r3, r2
 801a6fa:	2207      	movs	r2, #7
 801a6fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801a700:	4b34      	ldr	r3, [pc, #208]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a702:	681a      	ldr	r2, [r3, #0]
 801a704:	88bb      	ldrh	r3, [r7, #4]
 801a706:	1c59      	adds	r1, r3, #1
 801a708:	80b9      	strh	r1, [r7, #4]
 801a70a:	4413      	add	r3, r2
 801a70c:	2201      	movs	r2, #1
 801a70e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801a712:	4b30      	ldr	r3, [pc, #192]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a714:	681a      	ldr	r2, [r3, #0]
 801a716:	88bb      	ldrh	r3, [r7, #4]
 801a718:	1c59      	adds	r1, r3, #1
 801a71a:	80b9      	strh	r1, [r7, #4]
 801a71c:	4618      	mov	r0, r3
 801a71e:	4b2e      	ldr	r3, [pc, #184]	; (801a7d8 <send_DHCP_DISCOVER+0x174>)
 801a720:	7819      	ldrb	r1, [r3, #0]
 801a722:	1813      	adds	r3, r2, r0
 801a724:	460a      	mov	r2, r1
 801a726:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801a72a:	4b2a      	ldr	r3, [pc, #168]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a72c:	681a      	ldr	r2, [r3, #0]
 801a72e:	88bb      	ldrh	r3, [r7, #4]
 801a730:	1c59      	adds	r1, r3, #1
 801a732:	80b9      	strh	r1, [r7, #4]
 801a734:	4618      	mov	r0, r3
 801a736:	4b28      	ldr	r3, [pc, #160]	; (801a7d8 <send_DHCP_DISCOVER+0x174>)
 801a738:	7859      	ldrb	r1, [r3, #1]
 801a73a:	1813      	adds	r3, r2, r0
 801a73c:	460a      	mov	r2, r1
 801a73e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801a742:	4b24      	ldr	r3, [pc, #144]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a744:	681a      	ldr	r2, [r3, #0]
 801a746:	88bb      	ldrh	r3, [r7, #4]
 801a748:	1c59      	adds	r1, r3, #1
 801a74a:	80b9      	strh	r1, [r7, #4]
 801a74c:	4618      	mov	r0, r3
 801a74e:	4b22      	ldr	r3, [pc, #136]	; (801a7d8 <send_DHCP_DISCOVER+0x174>)
 801a750:	7899      	ldrb	r1, [r3, #2]
 801a752:	1813      	adds	r3, r2, r0
 801a754:	460a      	mov	r2, r1
 801a756:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801a75a:	4b1e      	ldr	r3, [pc, #120]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a75c:	681a      	ldr	r2, [r3, #0]
 801a75e:	88bb      	ldrh	r3, [r7, #4]
 801a760:	1c59      	adds	r1, r3, #1
 801a762:	80b9      	strh	r1, [r7, #4]
 801a764:	4618      	mov	r0, r3
 801a766:	4b1c      	ldr	r3, [pc, #112]	; (801a7d8 <send_DHCP_DISCOVER+0x174>)
 801a768:	78d9      	ldrb	r1, [r3, #3]
 801a76a:	1813      	adds	r3, r2, r0
 801a76c:	460a      	mov	r2, r1
 801a76e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801a772:	4b18      	ldr	r3, [pc, #96]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a774:	681a      	ldr	r2, [r3, #0]
 801a776:	88bb      	ldrh	r3, [r7, #4]
 801a778:	1c59      	adds	r1, r3, #1
 801a77a:	80b9      	strh	r1, [r7, #4]
 801a77c:	4618      	mov	r0, r3
 801a77e:	4b16      	ldr	r3, [pc, #88]	; (801a7d8 <send_DHCP_DISCOVER+0x174>)
 801a780:	7919      	ldrb	r1, [r3, #4]
 801a782:	1813      	adds	r3, r2, r0
 801a784:	460a      	mov	r2, r1
 801a786:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801a78a:	4b12      	ldr	r3, [pc, #72]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a78c:	681a      	ldr	r2, [r3, #0]
 801a78e:	88bb      	ldrh	r3, [r7, #4]
 801a790:	1c59      	adds	r1, r3, #1
 801a792:	80b9      	strh	r1, [r7, #4]
 801a794:	4618      	mov	r0, r3
 801a796:	4b10      	ldr	r3, [pc, #64]	; (801a7d8 <send_DHCP_DISCOVER+0x174>)
 801a798:	7959      	ldrb	r1, [r3, #5]
 801a79a:	1813      	adds	r3, r2, r0
 801a79c:	460a      	mov	r2, r1
 801a79e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801a7a2:	4b0c      	ldr	r3, [pc, #48]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a7a4:	681a      	ldr	r2, [r3, #0]
 801a7a6:	88bb      	ldrh	r3, [r7, #4]
 801a7a8:	1c59      	adds	r1, r3, #1
 801a7aa:	80b9      	strh	r1, [r7, #4]
 801a7ac:	4413      	add	r3, r2
 801a7ae:	220c      	movs	r2, #12
 801a7b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801a7b4:	4b07      	ldr	r3, [pc, #28]	; (801a7d4 <send_DHCP_DISCOVER+0x170>)
 801a7b6:	681a      	ldr	r2, [r3, #0]
 801a7b8:	88bb      	ldrh	r3, [r7, #4]
 801a7ba:	1c59      	adds	r1, r3, #1
 801a7bc:	80b9      	strh	r1, [r7, #4]
 801a7be:	4413      	add	r3, r2
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	80fb      	strh	r3, [r7, #6]
 801a7ca:	e017      	b.n	801a7fc <send_DHCP_DISCOVER+0x198>
 801a7cc:	20000974 	.word	0x20000974
 801a7d0:	20000978 	.word	0x20000978
 801a7d4:	2000099c 	.word	0x2000099c
 801a7d8:	200009a0 	.word	0x200009a0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801a7dc:	88f9      	ldrh	r1, [r7, #6]
 801a7de:	4b80      	ldr	r3, [pc, #512]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a7e0:	681a      	ldr	r2, [r3, #0]
 801a7e2:	88bb      	ldrh	r3, [r7, #4]
 801a7e4:	1c58      	adds	r0, r3, #1
 801a7e6:	80b8      	strh	r0, [r7, #4]
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	4b7e      	ldr	r3, [pc, #504]	; (801a9e4 <send_DHCP_DISCOVER+0x380>)
 801a7ec:	5c59      	ldrb	r1, [r3, r1]
 801a7ee:	1813      	adds	r3, r2, r0
 801a7f0:	460a      	mov	r2, r1
 801a7f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801a7f6:	88fb      	ldrh	r3, [r7, #6]
 801a7f8:	3301      	adds	r3, #1
 801a7fa:	80fb      	strh	r3, [r7, #6]
 801a7fc:	88fb      	ldrh	r3, [r7, #6]
 801a7fe:	4a79      	ldr	r2, [pc, #484]	; (801a9e4 <send_DHCP_DISCOVER+0x380>)
 801a800:	5cd3      	ldrb	r3, [r2, r3]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d1ea      	bne.n	801a7dc <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801a806:	4b78      	ldr	r3, [pc, #480]	; (801a9e8 <send_DHCP_DISCOVER+0x384>)
 801a808:	78db      	ldrb	r3, [r3, #3]
 801a80a:	091b      	lsrs	r3, r3, #4
 801a80c:	b2da      	uxtb	r2, r3
 801a80e:	4b74      	ldr	r3, [pc, #464]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a810:	681c      	ldr	r4, [r3, #0]
 801a812:	88bb      	ldrh	r3, [r7, #4]
 801a814:	1c59      	adds	r1, r3, #1
 801a816:	80b9      	strh	r1, [r7, #4]
 801a818:	461d      	mov	r5, r3
 801a81a:	4610      	mov	r0, r2
 801a81c:	f001 f9e4 	bl	801bbe8 <NibbleToHex>
 801a820:	4603      	mov	r3, r0
 801a822:	461a      	mov	r2, r3
 801a824:	1963      	adds	r3, r4, r5
 801a826:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801a82a:	4b6f      	ldr	r3, [pc, #444]	; (801a9e8 <send_DHCP_DISCOVER+0x384>)
 801a82c:	78da      	ldrb	r2, [r3, #3]
 801a82e:	4b6c      	ldr	r3, [pc, #432]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a830:	681c      	ldr	r4, [r3, #0]
 801a832:	88bb      	ldrh	r3, [r7, #4]
 801a834:	1c59      	adds	r1, r3, #1
 801a836:	80b9      	strh	r1, [r7, #4]
 801a838:	461d      	mov	r5, r3
 801a83a:	4610      	mov	r0, r2
 801a83c:	f001 f9d4 	bl	801bbe8 <NibbleToHex>
 801a840:	4603      	mov	r3, r0
 801a842:	461a      	mov	r2, r3
 801a844:	1963      	adds	r3, r4, r5
 801a846:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801a84a:	4b67      	ldr	r3, [pc, #412]	; (801a9e8 <send_DHCP_DISCOVER+0x384>)
 801a84c:	791b      	ldrb	r3, [r3, #4]
 801a84e:	091b      	lsrs	r3, r3, #4
 801a850:	b2da      	uxtb	r2, r3
 801a852:	4b63      	ldr	r3, [pc, #396]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a854:	681c      	ldr	r4, [r3, #0]
 801a856:	88bb      	ldrh	r3, [r7, #4]
 801a858:	1c59      	adds	r1, r3, #1
 801a85a:	80b9      	strh	r1, [r7, #4]
 801a85c:	461d      	mov	r5, r3
 801a85e:	4610      	mov	r0, r2
 801a860:	f001 f9c2 	bl	801bbe8 <NibbleToHex>
 801a864:	4603      	mov	r3, r0
 801a866:	461a      	mov	r2, r3
 801a868:	1963      	adds	r3, r4, r5
 801a86a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801a86e:	4b5e      	ldr	r3, [pc, #376]	; (801a9e8 <send_DHCP_DISCOVER+0x384>)
 801a870:	791a      	ldrb	r2, [r3, #4]
 801a872:	4b5b      	ldr	r3, [pc, #364]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a874:	681c      	ldr	r4, [r3, #0]
 801a876:	88bb      	ldrh	r3, [r7, #4]
 801a878:	1c59      	adds	r1, r3, #1
 801a87a:	80b9      	strh	r1, [r7, #4]
 801a87c:	461d      	mov	r5, r3
 801a87e:	4610      	mov	r0, r2
 801a880:	f001 f9b2 	bl	801bbe8 <NibbleToHex>
 801a884:	4603      	mov	r3, r0
 801a886:	461a      	mov	r2, r3
 801a888:	1963      	adds	r3, r4, r5
 801a88a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801a88e:	4b56      	ldr	r3, [pc, #344]	; (801a9e8 <send_DHCP_DISCOVER+0x384>)
 801a890:	795b      	ldrb	r3, [r3, #5]
 801a892:	091b      	lsrs	r3, r3, #4
 801a894:	b2da      	uxtb	r2, r3
 801a896:	4b52      	ldr	r3, [pc, #328]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a898:	681c      	ldr	r4, [r3, #0]
 801a89a:	88bb      	ldrh	r3, [r7, #4]
 801a89c:	1c59      	adds	r1, r3, #1
 801a89e:	80b9      	strh	r1, [r7, #4]
 801a8a0:	461d      	mov	r5, r3
 801a8a2:	4610      	mov	r0, r2
 801a8a4:	f001 f9a0 	bl	801bbe8 <NibbleToHex>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	461a      	mov	r2, r3
 801a8ac:	1963      	adds	r3, r4, r5
 801a8ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801a8b2:	4b4d      	ldr	r3, [pc, #308]	; (801a9e8 <send_DHCP_DISCOVER+0x384>)
 801a8b4:	795a      	ldrb	r2, [r3, #5]
 801a8b6:	4b4a      	ldr	r3, [pc, #296]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a8b8:	681c      	ldr	r4, [r3, #0]
 801a8ba:	88bb      	ldrh	r3, [r7, #4]
 801a8bc:	1c59      	adds	r1, r3, #1
 801a8be:	80b9      	strh	r1, [r7, #4]
 801a8c0:	461d      	mov	r5, r3
 801a8c2:	4610      	mov	r0, r2
 801a8c4:	f001 f990 	bl	801bbe8 <NibbleToHex>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	461a      	mov	r2, r3
 801a8cc:	1963      	adds	r3, r4, r5
 801a8ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801a8d2:	88fb      	ldrh	r3, [r7, #6]
 801a8d4:	b2d9      	uxtb	r1, r3
 801a8d6:	4b42      	ldr	r3, [pc, #264]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a8d8:	681a      	ldr	r2, [r3, #0]
 801a8da:	88b8      	ldrh	r0, [r7, #4]
 801a8dc:	88fb      	ldrh	r3, [r7, #6]
 801a8de:	3307      	adds	r3, #7
 801a8e0:	1ac3      	subs	r3, r0, r3
 801a8e2:	3106      	adds	r1, #6
 801a8e4:	b2c9      	uxtb	r1, r1
 801a8e6:	4413      	add	r3, r2
 801a8e8:	460a      	mov	r2, r1
 801a8ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801a8ee:	4b3c      	ldr	r3, [pc, #240]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a8f0:	681a      	ldr	r2, [r3, #0]
 801a8f2:	88bb      	ldrh	r3, [r7, #4]
 801a8f4:	1c59      	adds	r1, r3, #1
 801a8f6:	80b9      	strh	r1, [r7, #4]
 801a8f8:	4413      	add	r3, r2
 801a8fa:	2237      	movs	r2, #55	; 0x37
 801a8fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801a900:	4b37      	ldr	r3, [pc, #220]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a902:	681a      	ldr	r2, [r3, #0]
 801a904:	88bb      	ldrh	r3, [r7, #4]
 801a906:	1c59      	adds	r1, r3, #1
 801a908:	80b9      	strh	r1, [r7, #4]
 801a90a:	4413      	add	r3, r2
 801a90c:	2206      	movs	r2, #6
 801a90e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801a912:	4b33      	ldr	r3, [pc, #204]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a914:	681a      	ldr	r2, [r3, #0]
 801a916:	88bb      	ldrh	r3, [r7, #4]
 801a918:	1c59      	adds	r1, r3, #1
 801a91a:	80b9      	strh	r1, [r7, #4]
 801a91c:	4413      	add	r3, r2
 801a91e:	2201      	movs	r2, #1
 801a920:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801a924:	4b2e      	ldr	r3, [pc, #184]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	88bb      	ldrh	r3, [r7, #4]
 801a92a:	1c59      	adds	r1, r3, #1
 801a92c:	80b9      	strh	r1, [r7, #4]
 801a92e:	4413      	add	r3, r2
 801a930:	2203      	movs	r2, #3
 801a932:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801a936:	4b2a      	ldr	r3, [pc, #168]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a938:	681a      	ldr	r2, [r3, #0]
 801a93a:	88bb      	ldrh	r3, [r7, #4]
 801a93c:	1c59      	adds	r1, r3, #1
 801a93e:	80b9      	strh	r1, [r7, #4]
 801a940:	4413      	add	r3, r2
 801a942:	2206      	movs	r2, #6
 801a944:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801a948:	4b25      	ldr	r3, [pc, #148]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a94a:	681a      	ldr	r2, [r3, #0]
 801a94c:	88bb      	ldrh	r3, [r7, #4]
 801a94e:	1c59      	adds	r1, r3, #1
 801a950:	80b9      	strh	r1, [r7, #4]
 801a952:	4413      	add	r3, r2
 801a954:	220f      	movs	r2, #15
 801a956:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801a95a:	4b21      	ldr	r3, [pc, #132]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a95c:	681a      	ldr	r2, [r3, #0]
 801a95e:	88bb      	ldrh	r3, [r7, #4]
 801a960:	1c59      	adds	r1, r3, #1
 801a962:	80b9      	strh	r1, [r7, #4]
 801a964:	4413      	add	r3, r2
 801a966:	223a      	movs	r2, #58	; 0x3a
 801a968:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801a96c:	4b1c      	ldr	r3, [pc, #112]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a96e:	681a      	ldr	r2, [r3, #0]
 801a970:	88bb      	ldrh	r3, [r7, #4]
 801a972:	1c59      	adds	r1, r3, #1
 801a974:	80b9      	strh	r1, [r7, #4]
 801a976:	4413      	add	r3, r2
 801a978:	223b      	movs	r2, #59	; 0x3b
 801a97a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801a97e:	4b18      	ldr	r3, [pc, #96]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	88bb      	ldrh	r3, [r7, #4]
 801a984:	1c59      	adds	r1, r3, #1
 801a986:	80b9      	strh	r1, [r7, #4]
 801a988:	4413      	add	r3, r2
 801a98a:	22ff      	movs	r2, #255	; 0xff
 801a98c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801a990:	88bb      	ldrh	r3, [r7, #4]
 801a992:	80fb      	strh	r3, [r7, #6]
 801a994:	e009      	b.n	801a9aa <send_DHCP_DISCOVER+0x346>
 801a996:	4b12      	ldr	r3, [pc, #72]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a998:	681a      	ldr	r2, [r3, #0]
 801a99a:	88fb      	ldrh	r3, [r7, #6]
 801a99c:	4413      	add	r3, r2
 801a99e:	2200      	movs	r2, #0
 801a9a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801a9a4:	88fb      	ldrh	r3, [r7, #6]
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	80fb      	strh	r3, [r7, #6]
 801a9aa:	88fb      	ldrh	r3, [r7, #6]
 801a9ac:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801a9b0:	d3f1      	bcc.n	801a996 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801a9b2:	23ff      	movs	r3, #255	; 0xff
 801a9b4:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801a9b6:	23ff      	movs	r3, #255	; 0xff
 801a9b8:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801a9ba:	23ff      	movs	r3, #255	; 0xff
 801a9bc:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801a9be:	23ff      	movs	r3, #255	; 0xff
 801a9c0:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801a9c2:	4b0a      	ldr	r3, [pc, #40]	; (801a9ec <send_DHCP_DISCOVER+0x388>)
 801a9c4:	7818      	ldrb	r0, [r3, #0]
 801a9c6:	4b06      	ldr	r3, [pc, #24]	; (801a9e0 <send_DHCP_DISCOVER+0x37c>)
 801a9c8:	6819      	ldr	r1, [r3, #0]
 801a9ca:	463b      	mov	r3, r7
 801a9cc:	2243      	movs	r2, #67	; 0x43
 801a9ce:	9200      	str	r2, [sp, #0]
 801a9d0:	f44f 7209 	mov.w	r2, #548	; 0x224
 801a9d4:	f7fe fbfc 	bl	80191d0 <sendto>
}
 801a9d8:	bf00      	nop
 801a9da:	3708      	adds	r7, #8
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	bdb0      	pop	{r4, r5, r7, pc}
 801a9e0:	2000099c 	.word	0x2000099c
 801a9e4:	200000f8 	.word	0x200000f8
 801a9e8:	200009a0 	.word	0x200009a0
 801a9ec:	20000971 	.word	0x20000971

0801a9f0 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801a9f0:	b5b0      	push	{r4, r5, r7, lr}
 801a9f2:	b086      	sub	sp, #24
 801a9f4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801a9fa:	f7ff fd3d 	bl	801a478 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801a9fe:	4b1b      	ldr	r3, [pc, #108]	; (801aa6c <send_DHCP_REQUEST+0x7c>)
 801aa00:	f993 3000 	ldrsb.w	r3, [r3]
 801aa04:	2b03      	cmp	r3, #3
 801aa06:	d004      	beq.n	801aa12 <send_DHCP_REQUEST+0x22>
 801aa08:	4b18      	ldr	r3, [pc, #96]	; (801aa6c <send_DHCP_REQUEST+0x7c>)
 801aa0a:	f993 3000 	ldrsb.w	r3, [r3]
 801aa0e:	2b04      	cmp	r3, #4
 801aa10:	d134      	bne.n	801aa7c <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801aa12:	4b17      	ldr	r3, [pc, #92]	; (801aa70 <send_DHCP_REQUEST+0x80>)
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	330a      	adds	r3, #10
 801aa18:	2200      	movs	r2, #0
 801aa1a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801aa1c:	4b14      	ldr	r3, [pc, #80]	; (801aa70 <send_DHCP_REQUEST+0x80>)
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	330a      	adds	r3, #10
 801aa22:	3301      	adds	r3, #1
 801aa24:	2200      	movs	r2, #0
 801aa26:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801aa28:	4b11      	ldr	r3, [pc, #68]	; (801aa70 <send_DHCP_REQUEST+0x80>)
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4a11      	ldr	r2, [pc, #68]	; (801aa74 <send_DHCP_REQUEST+0x84>)
 801aa2e:	7812      	ldrb	r2, [r2, #0]
 801aa30:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801aa32:	4b0f      	ldr	r3, [pc, #60]	; (801aa70 <send_DHCP_REQUEST+0x80>)
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	4a0f      	ldr	r2, [pc, #60]	; (801aa74 <send_DHCP_REQUEST+0x84>)
 801aa38:	7852      	ldrb	r2, [r2, #1]
 801aa3a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801aa3c:	4b0c      	ldr	r3, [pc, #48]	; (801aa70 <send_DHCP_REQUEST+0x80>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	4a0c      	ldr	r2, [pc, #48]	; (801aa74 <send_DHCP_REQUEST+0x84>)
 801aa42:	7892      	ldrb	r2, [r2, #2]
 801aa44:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801aa46:	4b0a      	ldr	r3, [pc, #40]	; (801aa70 <send_DHCP_REQUEST+0x80>)
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	4a0a      	ldr	r2, [pc, #40]	; (801aa74 <send_DHCP_REQUEST+0x84>)
 801aa4c:	78d2      	ldrb	r2, [r2, #3]
 801aa4e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801aa50:	4b09      	ldr	r3, [pc, #36]	; (801aa78 <send_DHCP_REQUEST+0x88>)
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801aa56:	4b08      	ldr	r3, [pc, #32]	; (801aa78 <send_DHCP_REQUEST+0x88>)
 801aa58:	785b      	ldrb	r3, [r3, #1]
 801aa5a:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801aa5c:	4b06      	ldr	r3, [pc, #24]	; (801aa78 <send_DHCP_REQUEST+0x88>)
 801aa5e:	789b      	ldrb	r3, [r3, #2]
 801aa60:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801aa62:	4b05      	ldr	r3, [pc, #20]	; (801aa78 <send_DHCP_REQUEST+0x88>)
 801aa64:	78db      	ldrb	r3, [r3, #3]
 801aa66:	71fb      	strb	r3, [r7, #7]
 801aa68:	e010      	b.n	801aa8c <send_DHCP_REQUEST+0x9c>
 801aa6a:	bf00      	nop
 801aa6c:	20000990 	.word	0x20000990
 801aa70:	2000099c 	.word	0x2000099c
 801aa74:	20000980 	.word	0x20000980
 801aa78:	20000974 	.word	0x20000974
   }
   else
   {
   	ip[0] = 255;
 801aa7c:	23ff      	movs	r3, #255	; 0xff
 801aa7e:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801aa80:	23ff      	movs	r3, #255	; 0xff
 801aa82:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801aa84:	23ff      	movs	r3, #255	; 0xff
 801aa86:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801aa88:	23ff      	movs	r3, #255	; 0xff
 801aa8a:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801aa8c:	2304      	movs	r3, #4
 801aa8e:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801aa90:	4b8d      	ldr	r3, [pc, #564]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aa92:	681a      	ldr	r2, [r3, #0]
 801aa94:	897b      	ldrh	r3, [r7, #10]
 801aa96:	1c59      	adds	r1, r3, #1
 801aa98:	8179      	strh	r1, [r7, #10]
 801aa9a:	4413      	add	r3, r2
 801aa9c:	2235      	movs	r2, #53	; 0x35
 801aa9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801aaa2:	4b89      	ldr	r3, [pc, #548]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aaa4:	681a      	ldr	r2, [r3, #0]
 801aaa6:	897b      	ldrh	r3, [r7, #10]
 801aaa8:	1c59      	adds	r1, r3, #1
 801aaaa:	8179      	strh	r1, [r7, #10]
 801aaac:	4413      	add	r3, r2
 801aaae:	2201      	movs	r2, #1
 801aab0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801aab4:	4b84      	ldr	r3, [pc, #528]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aab6:	681a      	ldr	r2, [r3, #0]
 801aab8:	897b      	ldrh	r3, [r7, #10]
 801aaba:	1c59      	adds	r1, r3, #1
 801aabc:	8179      	strh	r1, [r7, #10]
 801aabe:	4413      	add	r3, r2
 801aac0:	2203      	movs	r2, #3
 801aac2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801aac6:	4b80      	ldr	r3, [pc, #512]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aac8:	681a      	ldr	r2, [r3, #0]
 801aaca:	897b      	ldrh	r3, [r7, #10]
 801aacc:	1c59      	adds	r1, r3, #1
 801aace:	8179      	strh	r1, [r7, #10]
 801aad0:	4413      	add	r3, r2
 801aad2:	223d      	movs	r2, #61	; 0x3d
 801aad4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801aad8:	4b7b      	ldr	r3, [pc, #492]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aada:	681a      	ldr	r2, [r3, #0]
 801aadc:	897b      	ldrh	r3, [r7, #10]
 801aade:	1c59      	adds	r1, r3, #1
 801aae0:	8179      	strh	r1, [r7, #10]
 801aae2:	4413      	add	r3, r2
 801aae4:	2207      	movs	r2, #7
 801aae6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801aaea:	4b77      	ldr	r3, [pc, #476]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aaec:	681a      	ldr	r2, [r3, #0]
 801aaee:	897b      	ldrh	r3, [r7, #10]
 801aaf0:	1c59      	adds	r1, r3, #1
 801aaf2:	8179      	strh	r1, [r7, #10]
 801aaf4:	4413      	add	r3, r2
 801aaf6:	2201      	movs	r2, #1
 801aaf8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801aafc:	4b72      	ldr	r3, [pc, #456]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aafe:	681a      	ldr	r2, [r3, #0]
 801ab00:	897b      	ldrh	r3, [r7, #10]
 801ab02:	1c59      	adds	r1, r3, #1
 801ab04:	8179      	strh	r1, [r7, #10]
 801ab06:	4618      	mov	r0, r3
 801ab08:	4b70      	ldr	r3, [pc, #448]	; (801accc <send_DHCP_REQUEST+0x2dc>)
 801ab0a:	7819      	ldrb	r1, [r3, #0]
 801ab0c:	1813      	adds	r3, r2, r0
 801ab0e:	460a      	mov	r2, r1
 801ab10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801ab14:	4b6c      	ldr	r3, [pc, #432]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ab16:	681a      	ldr	r2, [r3, #0]
 801ab18:	897b      	ldrh	r3, [r7, #10]
 801ab1a:	1c59      	adds	r1, r3, #1
 801ab1c:	8179      	strh	r1, [r7, #10]
 801ab1e:	4618      	mov	r0, r3
 801ab20:	4b6a      	ldr	r3, [pc, #424]	; (801accc <send_DHCP_REQUEST+0x2dc>)
 801ab22:	7859      	ldrb	r1, [r3, #1]
 801ab24:	1813      	adds	r3, r2, r0
 801ab26:	460a      	mov	r2, r1
 801ab28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801ab2c:	4b66      	ldr	r3, [pc, #408]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ab2e:	681a      	ldr	r2, [r3, #0]
 801ab30:	897b      	ldrh	r3, [r7, #10]
 801ab32:	1c59      	adds	r1, r3, #1
 801ab34:	8179      	strh	r1, [r7, #10]
 801ab36:	4618      	mov	r0, r3
 801ab38:	4b64      	ldr	r3, [pc, #400]	; (801accc <send_DHCP_REQUEST+0x2dc>)
 801ab3a:	7899      	ldrb	r1, [r3, #2]
 801ab3c:	1813      	adds	r3, r2, r0
 801ab3e:	460a      	mov	r2, r1
 801ab40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801ab44:	4b60      	ldr	r3, [pc, #384]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ab46:	681a      	ldr	r2, [r3, #0]
 801ab48:	897b      	ldrh	r3, [r7, #10]
 801ab4a:	1c59      	adds	r1, r3, #1
 801ab4c:	8179      	strh	r1, [r7, #10]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	4b5e      	ldr	r3, [pc, #376]	; (801accc <send_DHCP_REQUEST+0x2dc>)
 801ab52:	78d9      	ldrb	r1, [r3, #3]
 801ab54:	1813      	adds	r3, r2, r0
 801ab56:	460a      	mov	r2, r1
 801ab58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801ab5c:	4b5a      	ldr	r3, [pc, #360]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ab5e:	681a      	ldr	r2, [r3, #0]
 801ab60:	897b      	ldrh	r3, [r7, #10]
 801ab62:	1c59      	adds	r1, r3, #1
 801ab64:	8179      	strh	r1, [r7, #10]
 801ab66:	4618      	mov	r0, r3
 801ab68:	4b58      	ldr	r3, [pc, #352]	; (801accc <send_DHCP_REQUEST+0x2dc>)
 801ab6a:	7919      	ldrb	r1, [r3, #4]
 801ab6c:	1813      	adds	r3, r2, r0
 801ab6e:	460a      	mov	r2, r1
 801ab70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801ab74:	4b54      	ldr	r3, [pc, #336]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ab76:	681a      	ldr	r2, [r3, #0]
 801ab78:	897b      	ldrh	r3, [r7, #10]
 801ab7a:	1c59      	adds	r1, r3, #1
 801ab7c:	8179      	strh	r1, [r7, #10]
 801ab7e:	4618      	mov	r0, r3
 801ab80:	4b52      	ldr	r3, [pc, #328]	; (801accc <send_DHCP_REQUEST+0x2dc>)
 801ab82:	7959      	ldrb	r1, [r3, #5]
 801ab84:	1813      	adds	r3, r2, r0
 801ab86:	460a      	mov	r2, r1
 801ab88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801ab8c:	79fb      	ldrb	r3, [r7, #7]
 801ab8e:	2bff      	cmp	r3, #255	; 0xff
 801ab90:	f040 8084 	bne.w	801ac9c <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801ab94:	4b4c      	ldr	r3, [pc, #304]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ab96:	681a      	ldr	r2, [r3, #0]
 801ab98:	897b      	ldrh	r3, [r7, #10]
 801ab9a:	1c59      	adds	r1, r3, #1
 801ab9c:	8179      	strh	r1, [r7, #10]
 801ab9e:	4413      	add	r3, r2
 801aba0:	2232      	movs	r2, #50	; 0x32
 801aba2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801aba6:	4b48      	ldr	r3, [pc, #288]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801aba8:	681a      	ldr	r2, [r3, #0]
 801abaa:	897b      	ldrh	r3, [r7, #10]
 801abac:	1c59      	adds	r1, r3, #1
 801abae:	8179      	strh	r1, [r7, #10]
 801abb0:	4413      	add	r3, r2
 801abb2:	2204      	movs	r2, #4
 801abb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801abb8:	4b43      	ldr	r3, [pc, #268]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801abba:	681a      	ldr	r2, [r3, #0]
 801abbc:	897b      	ldrh	r3, [r7, #10]
 801abbe:	1c59      	adds	r1, r3, #1
 801abc0:	8179      	strh	r1, [r7, #10]
 801abc2:	4618      	mov	r0, r3
 801abc4:	4b42      	ldr	r3, [pc, #264]	; (801acd0 <send_DHCP_REQUEST+0x2e0>)
 801abc6:	7819      	ldrb	r1, [r3, #0]
 801abc8:	1813      	adds	r3, r2, r0
 801abca:	460a      	mov	r2, r1
 801abcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801abd0:	4b3d      	ldr	r3, [pc, #244]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801abd2:	681a      	ldr	r2, [r3, #0]
 801abd4:	897b      	ldrh	r3, [r7, #10]
 801abd6:	1c59      	adds	r1, r3, #1
 801abd8:	8179      	strh	r1, [r7, #10]
 801abda:	4618      	mov	r0, r3
 801abdc:	4b3c      	ldr	r3, [pc, #240]	; (801acd0 <send_DHCP_REQUEST+0x2e0>)
 801abde:	7859      	ldrb	r1, [r3, #1]
 801abe0:	1813      	adds	r3, r2, r0
 801abe2:	460a      	mov	r2, r1
 801abe4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801abe8:	4b37      	ldr	r3, [pc, #220]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801abea:	681a      	ldr	r2, [r3, #0]
 801abec:	897b      	ldrh	r3, [r7, #10]
 801abee:	1c59      	adds	r1, r3, #1
 801abf0:	8179      	strh	r1, [r7, #10]
 801abf2:	4618      	mov	r0, r3
 801abf4:	4b36      	ldr	r3, [pc, #216]	; (801acd0 <send_DHCP_REQUEST+0x2e0>)
 801abf6:	7899      	ldrb	r1, [r3, #2]
 801abf8:	1813      	adds	r3, r2, r0
 801abfa:	460a      	mov	r2, r1
 801abfc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801ac00:	4b31      	ldr	r3, [pc, #196]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac02:	681a      	ldr	r2, [r3, #0]
 801ac04:	897b      	ldrh	r3, [r7, #10]
 801ac06:	1c59      	adds	r1, r3, #1
 801ac08:	8179      	strh	r1, [r7, #10]
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	4b30      	ldr	r3, [pc, #192]	; (801acd0 <send_DHCP_REQUEST+0x2e0>)
 801ac0e:	78d9      	ldrb	r1, [r3, #3]
 801ac10:	1813      	adds	r3, r2, r0
 801ac12:	460a      	mov	r2, r1
 801ac14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801ac18:	4b2b      	ldr	r3, [pc, #172]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac1a:	681a      	ldr	r2, [r3, #0]
 801ac1c:	897b      	ldrh	r3, [r7, #10]
 801ac1e:	1c59      	adds	r1, r3, #1
 801ac20:	8179      	strh	r1, [r7, #10]
 801ac22:	4413      	add	r3, r2
 801ac24:	2236      	movs	r2, #54	; 0x36
 801ac26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801ac2a:	4b27      	ldr	r3, [pc, #156]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac2c:	681a      	ldr	r2, [r3, #0]
 801ac2e:	897b      	ldrh	r3, [r7, #10]
 801ac30:	1c59      	adds	r1, r3, #1
 801ac32:	8179      	strh	r1, [r7, #10]
 801ac34:	4413      	add	r3, r2
 801ac36:	2204      	movs	r2, #4
 801ac38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801ac3c:	4b22      	ldr	r3, [pc, #136]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac3e:	681a      	ldr	r2, [r3, #0]
 801ac40:	897b      	ldrh	r3, [r7, #10]
 801ac42:	1c59      	adds	r1, r3, #1
 801ac44:	8179      	strh	r1, [r7, #10]
 801ac46:	4618      	mov	r0, r3
 801ac48:	4b22      	ldr	r3, [pc, #136]	; (801acd4 <send_DHCP_REQUEST+0x2e4>)
 801ac4a:	7819      	ldrb	r1, [r3, #0]
 801ac4c:	1813      	adds	r3, r2, r0
 801ac4e:	460a      	mov	r2, r1
 801ac50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801ac54:	4b1c      	ldr	r3, [pc, #112]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac56:	681a      	ldr	r2, [r3, #0]
 801ac58:	897b      	ldrh	r3, [r7, #10]
 801ac5a:	1c59      	adds	r1, r3, #1
 801ac5c:	8179      	strh	r1, [r7, #10]
 801ac5e:	4618      	mov	r0, r3
 801ac60:	4b1c      	ldr	r3, [pc, #112]	; (801acd4 <send_DHCP_REQUEST+0x2e4>)
 801ac62:	7859      	ldrb	r1, [r3, #1]
 801ac64:	1813      	adds	r3, r2, r0
 801ac66:	460a      	mov	r2, r1
 801ac68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801ac6c:	4b16      	ldr	r3, [pc, #88]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac6e:	681a      	ldr	r2, [r3, #0]
 801ac70:	897b      	ldrh	r3, [r7, #10]
 801ac72:	1c59      	adds	r1, r3, #1
 801ac74:	8179      	strh	r1, [r7, #10]
 801ac76:	4618      	mov	r0, r3
 801ac78:	4b16      	ldr	r3, [pc, #88]	; (801acd4 <send_DHCP_REQUEST+0x2e4>)
 801ac7a:	7899      	ldrb	r1, [r3, #2]
 801ac7c:	1813      	adds	r3, r2, r0
 801ac7e:	460a      	mov	r2, r1
 801ac80:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801ac84:	4b10      	ldr	r3, [pc, #64]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	897b      	ldrh	r3, [r7, #10]
 801ac8a:	1c59      	adds	r1, r3, #1
 801ac8c:	8179      	strh	r1, [r7, #10]
 801ac8e:	4618      	mov	r0, r3
 801ac90:	4b10      	ldr	r3, [pc, #64]	; (801acd4 <send_DHCP_REQUEST+0x2e4>)
 801ac92:	78d9      	ldrb	r1, [r3, #3]
 801ac94:	1813      	adds	r3, r2, r0
 801ac96:	460a      	mov	r2, r1
 801ac98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801ac9c:	4b0a      	ldr	r3, [pc, #40]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801ac9e:	681a      	ldr	r2, [r3, #0]
 801aca0:	897b      	ldrh	r3, [r7, #10]
 801aca2:	1c59      	adds	r1, r3, #1
 801aca4:	8179      	strh	r1, [r7, #10]
 801aca6:	4413      	add	r3, r2
 801aca8:	220c      	movs	r2, #12
 801acaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801acae:	4b06      	ldr	r3, [pc, #24]	; (801acc8 <send_DHCP_REQUEST+0x2d8>)
 801acb0:	681a      	ldr	r2, [r3, #0]
 801acb2:	897b      	ldrh	r3, [r7, #10]
 801acb4:	1c59      	adds	r1, r3, #1
 801acb6:	8179      	strh	r1, [r7, #10]
 801acb8:	4413      	add	r3, r2
 801acba:	2200      	movs	r2, #0
 801acbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801acc0:	2300      	movs	r3, #0
 801acc2:	60fb      	str	r3, [r7, #12]
 801acc4:	e019      	b.n	801acfa <send_DHCP_REQUEST+0x30a>
 801acc6:	bf00      	nop
 801acc8:	2000099c 	.word	0x2000099c
 801accc:	200009a0 	.word	0x200009a0
 801acd0:	20000980 	.word	0x20000980
 801acd4:	20000974 	.word	0x20000974
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801acd8:	4b86      	ldr	r3, [pc, #536]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	897b      	ldrh	r3, [r7, #10]
 801acde:	1c59      	adds	r1, r3, #1
 801ace0:	8179      	strh	r1, [r7, #10]
 801ace2:	4618      	mov	r0, r3
 801ace4:	4984      	ldr	r1, [pc, #528]	; (801aef8 <send_DHCP_REQUEST+0x508>)
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	440b      	add	r3, r1
 801acea:	7819      	ldrb	r1, [r3, #0]
 801acec:	1813      	adds	r3, r2, r0
 801acee:	460a      	mov	r2, r1
 801acf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	3301      	adds	r3, #1
 801acf8:	60fb      	str	r3, [r7, #12]
 801acfa:	4a7f      	ldr	r2, [pc, #508]	; (801aef8 <send_DHCP_REQUEST+0x508>)
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	4413      	add	r3, r2
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d1e8      	bne.n	801acd8 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801ad06:	4b7d      	ldr	r3, [pc, #500]	; (801aefc <send_DHCP_REQUEST+0x50c>)
 801ad08:	78db      	ldrb	r3, [r3, #3]
 801ad0a:	091b      	lsrs	r3, r3, #4
 801ad0c:	b2da      	uxtb	r2, r3
 801ad0e:	4b79      	ldr	r3, [pc, #484]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ad10:	681c      	ldr	r4, [r3, #0]
 801ad12:	897b      	ldrh	r3, [r7, #10]
 801ad14:	1c59      	adds	r1, r3, #1
 801ad16:	8179      	strh	r1, [r7, #10]
 801ad18:	461d      	mov	r5, r3
 801ad1a:	4610      	mov	r0, r2
 801ad1c:	f000 ff64 	bl	801bbe8 <NibbleToHex>
 801ad20:	4603      	mov	r3, r0
 801ad22:	461a      	mov	r2, r3
 801ad24:	1963      	adds	r3, r4, r5
 801ad26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801ad2a:	4b74      	ldr	r3, [pc, #464]	; (801aefc <send_DHCP_REQUEST+0x50c>)
 801ad2c:	78da      	ldrb	r2, [r3, #3]
 801ad2e:	4b71      	ldr	r3, [pc, #452]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ad30:	681c      	ldr	r4, [r3, #0]
 801ad32:	897b      	ldrh	r3, [r7, #10]
 801ad34:	1c59      	adds	r1, r3, #1
 801ad36:	8179      	strh	r1, [r7, #10]
 801ad38:	461d      	mov	r5, r3
 801ad3a:	4610      	mov	r0, r2
 801ad3c:	f000 ff54 	bl	801bbe8 <NibbleToHex>
 801ad40:	4603      	mov	r3, r0
 801ad42:	461a      	mov	r2, r3
 801ad44:	1963      	adds	r3, r4, r5
 801ad46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801ad4a:	4b6c      	ldr	r3, [pc, #432]	; (801aefc <send_DHCP_REQUEST+0x50c>)
 801ad4c:	791b      	ldrb	r3, [r3, #4]
 801ad4e:	091b      	lsrs	r3, r3, #4
 801ad50:	b2da      	uxtb	r2, r3
 801ad52:	4b68      	ldr	r3, [pc, #416]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ad54:	681c      	ldr	r4, [r3, #0]
 801ad56:	897b      	ldrh	r3, [r7, #10]
 801ad58:	1c59      	adds	r1, r3, #1
 801ad5a:	8179      	strh	r1, [r7, #10]
 801ad5c:	461d      	mov	r5, r3
 801ad5e:	4610      	mov	r0, r2
 801ad60:	f000 ff42 	bl	801bbe8 <NibbleToHex>
 801ad64:	4603      	mov	r3, r0
 801ad66:	461a      	mov	r2, r3
 801ad68:	1963      	adds	r3, r4, r5
 801ad6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801ad6e:	4b63      	ldr	r3, [pc, #396]	; (801aefc <send_DHCP_REQUEST+0x50c>)
 801ad70:	791a      	ldrb	r2, [r3, #4]
 801ad72:	4b60      	ldr	r3, [pc, #384]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ad74:	681c      	ldr	r4, [r3, #0]
 801ad76:	897b      	ldrh	r3, [r7, #10]
 801ad78:	1c59      	adds	r1, r3, #1
 801ad7a:	8179      	strh	r1, [r7, #10]
 801ad7c:	461d      	mov	r5, r3
 801ad7e:	4610      	mov	r0, r2
 801ad80:	f000 ff32 	bl	801bbe8 <NibbleToHex>
 801ad84:	4603      	mov	r3, r0
 801ad86:	461a      	mov	r2, r3
 801ad88:	1963      	adds	r3, r4, r5
 801ad8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801ad8e:	4b5b      	ldr	r3, [pc, #364]	; (801aefc <send_DHCP_REQUEST+0x50c>)
 801ad90:	795b      	ldrb	r3, [r3, #5]
 801ad92:	091b      	lsrs	r3, r3, #4
 801ad94:	b2da      	uxtb	r2, r3
 801ad96:	4b57      	ldr	r3, [pc, #348]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ad98:	681c      	ldr	r4, [r3, #0]
 801ad9a:	897b      	ldrh	r3, [r7, #10]
 801ad9c:	1c59      	adds	r1, r3, #1
 801ad9e:	8179      	strh	r1, [r7, #10]
 801ada0:	461d      	mov	r5, r3
 801ada2:	4610      	mov	r0, r2
 801ada4:	f000 ff20 	bl	801bbe8 <NibbleToHex>
 801ada8:	4603      	mov	r3, r0
 801adaa:	461a      	mov	r2, r3
 801adac:	1963      	adds	r3, r4, r5
 801adae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801adb2:	4b52      	ldr	r3, [pc, #328]	; (801aefc <send_DHCP_REQUEST+0x50c>)
 801adb4:	795a      	ldrb	r2, [r3, #5]
 801adb6:	4b4f      	ldr	r3, [pc, #316]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801adb8:	681c      	ldr	r4, [r3, #0]
 801adba:	897b      	ldrh	r3, [r7, #10]
 801adbc:	1c59      	adds	r1, r3, #1
 801adbe:	8179      	strh	r1, [r7, #10]
 801adc0:	461d      	mov	r5, r3
 801adc2:	4610      	mov	r0, r2
 801adc4:	f000 ff10 	bl	801bbe8 <NibbleToHex>
 801adc8:	4603      	mov	r3, r0
 801adca:	461a      	mov	r2, r3
 801adcc:	1963      	adds	r3, r4, r5
 801adce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	b2d9      	uxtb	r1, r3
 801add6:	4b47      	ldr	r3, [pc, #284]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801add8:	681a      	ldr	r2, [r3, #0]
 801adda:	8978      	ldrh	r0, [r7, #10]
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	3307      	adds	r3, #7
 801ade0:	1ac3      	subs	r3, r0, r3
 801ade2:	3106      	adds	r1, #6
 801ade4:	b2c9      	uxtb	r1, r1
 801ade6:	4413      	add	r3, r2
 801ade8:	460a      	mov	r2, r1
 801adea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801adee:	4b41      	ldr	r3, [pc, #260]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801adf0:	681a      	ldr	r2, [r3, #0]
 801adf2:	897b      	ldrh	r3, [r7, #10]
 801adf4:	1c59      	adds	r1, r3, #1
 801adf6:	8179      	strh	r1, [r7, #10]
 801adf8:	4413      	add	r3, r2
 801adfa:	2237      	movs	r2, #55	; 0x37
 801adfc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801ae00:	4b3c      	ldr	r3, [pc, #240]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae02:	681a      	ldr	r2, [r3, #0]
 801ae04:	897b      	ldrh	r3, [r7, #10]
 801ae06:	1c59      	adds	r1, r3, #1
 801ae08:	8179      	strh	r1, [r7, #10]
 801ae0a:	4413      	add	r3, r2
 801ae0c:	2208      	movs	r2, #8
 801ae0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801ae12:	4b38      	ldr	r3, [pc, #224]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae14:	681a      	ldr	r2, [r3, #0]
 801ae16:	897b      	ldrh	r3, [r7, #10]
 801ae18:	1c59      	adds	r1, r3, #1
 801ae1a:	8179      	strh	r1, [r7, #10]
 801ae1c:	4413      	add	r3, r2
 801ae1e:	2201      	movs	r2, #1
 801ae20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801ae24:	4b33      	ldr	r3, [pc, #204]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae26:	681a      	ldr	r2, [r3, #0]
 801ae28:	897b      	ldrh	r3, [r7, #10]
 801ae2a:	1c59      	adds	r1, r3, #1
 801ae2c:	8179      	strh	r1, [r7, #10]
 801ae2e:	4413      	add	r3, r2
 801ae30:	2203      	movs	r2, #3
 801ae32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801ae36:	4b2f      	ldr	r3, [pc, #188]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae38:	681a      	ldr	r2, [r3, #0]
 801ae3a:	897b      	ldrh	r3, [r7, #10]
 801ae3c:	1c59      	adds	r1, r3, #1
 801ae3e:	8179      	strh	r1, [r7, #10]
 801ae40:	4413      	add	r3, r2
 801ae42:	2206      	movs	r2, #6
 801ae44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801ae48:	4b2a      	ldr	r3, [pc, #168]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae4a:	681a      	ldr	r2, [r3, #0]
 801ae4c:	897b      	ldrh	r3, [r7, #10]
 801ae4e:	1c59      	adds	r1, r3, #1
 801ae50:	8179      	strh	r1, [r7, #10]
 801ae52:	4413      	add	r3, r2
 801ae54:	220f      	movs	r2, #15
 801ae56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801ae5a:	4b26      	ldr	r3, [pc, #152]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae5c:	681a      	ldr	r2, [r3, #0]
 801ae5e:	897b      	ldrh	r3, [r7, #10]
 801ae60:	1c59      	adds	r1, r3, #1
 801ae62:	8179      	strh	r1, [r7, #10]
 801ae64:	4413      	add	r3, r2
 801ae66:	223a      	movs	r2, #58	; 0x3a
 801ae68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801ae6c:	4b21      	ldr	r3, [pc, #132]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae6e:	681a      	ldr	r2, [r3, #0]
 801ae70:	897b      	ldrh	r3, [r7, #10]
 801ae72:	1c59      	adds	r1, r3, #1
 801ae74:	8179      	strh	r1, [r7, #10]
 801ae76:	4413      	add	r3, r2
 801ae78:	223b      	movs	r2, #59	; 0x3b
 801ae7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801ae7e:	4b1d      	ldr	r3, [pc, #116]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	897b      	ldrh	r3, [r7, #10]
 801ae84:	1c59      	adds	r1, r3, #1
 801ae86:	8179      	strh	r1, [r7, #10]
 801ae88:	4413      	add	r3, r2
 801ae8a:	221f      	movs	r2, #31
 801ae8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801ae90:	4b18      	ldr	r3, [pc, #96]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801ae92:	681a      	ldr	r2, [r3, #0]
 801ae94:	897b      	ldrh	r3, [r7, #10]
 801ae96:	1c59      	adds	r1, r3, #1
 801ae98:	8179      	strh	r1, [r7, #10]
 801ae9a:	4413      	add	r3, r2
 801ae9c:	2221      	movs	r2, #33	; 0x21
 801ae9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801aea2:	4b14      	ldr	r3, [pc, #80]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801aea4:	681a      	ldr	r2, [r3, #0]
 801aea6:	897b      	ldrh	r3, [r7, #10]
 801aea8:	1c59      	adds	r1, r3, #1
 801aeaa:	8179      	strh	r1, [r7, #10]
 801aeac:	4413      	add	r3, r2
 801aeae:	22ff      	movs	r2, #255	; 0xff
 801aeb0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801aeb4:	897b      	ldrh	r3, [r7, #10]
 801aeb6:	60fb      	str	r3, [r7, #12]
 801aeb8:	e009      	b.n	801aece <send_DHCP_REQUEST+0x4de>
 801aeba:	4b0e      	ldr	r3, [pc, #56]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801aebc:	681a      	ldr	r2, [r3, #0]
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	4413      	add	r3, r2
 801aec2:	33ec      	adds	r3, #236	; 0xec
 801aec4:	2200      	movs	r2, #0
 801aec6:	701a      	strb	r2, [r3, #0]
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	3301      	adds	r3, #1
 801aecc:	60fb      	str	r3, [r7, #12]
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801aed4:	dbf1      	blt.n	801aeba <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801aed6:	4b0a      	ldr	r3, [pc, #40]	; (801af00 <send_DHCP_REQUEST+0x510>)
 801aed8:	7818      	ldrb	r0, [r3, #0]
 801aeda:	4b06      	ldr	r3, [pc, #24]	; (801aef4 <send_DHCP_REQUEST+0x504>)
 801aedc:	6819      	ldr	r1, [r3, #0]
 801aede:	1d3b      	adds	r3, r7, #4
 801aee0:	2243      	movs	r2, #67	; 0x43
 801aee2:	9200      	str	r2, [sp, #0]
 801aee4:	f44f 7209 	mov.w	r2, #548	; 0x224
 801aee8:	f7fe f972 	bl	80191d0 <sendto>

}
 801aeec:	bf00      	nop
 801aeee:	3710      	adds	r7, #16
 801aef0:	46bd      	mov	sp, r7
 801aef2:	bdb0      	pop	{r4, r5, r7, pc}
 801aef4:	2000099c 	.word	0x2000099c
 801aef8:	200000f8 	.word	0x200000f8
 801aefc:	200009a0 	.word	0x200009a0
 801af00:	20000971 	.word	0x20000971

0801af04 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b086      	sub	sp, #24
 801af08:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801af0a:	2300      	movs	r3, #0
 801af0c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801af0e:	f7ff fab3 	bl	801a478 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801af12:	2304      	movs	r3, #4
 801af14:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801af16:	4b9f      	ldr	r3, [pc, #636]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	330a      	adds	r3, #10
 801af1c:	2200      	movs	r2, #0
 801af1e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801af20:	4b9c      	ldr	r3, [pc, #624]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	330a      	adds	r3, #10
 801af26:	3301      	adds	r3, #1
 801af28:	2200      	movs	r2, #0
 801af2a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801af2c:	4b99      	ldr	r3, [pc, #612]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af2e:	681a      	ldr	r2, [r3, #0]
 801af30:	897b      	ldrh	r3, [r7, #10]
 801af32:	1c59      	adds	r1, r3, #1
 801af34:	8179      	strh	r1, [r7, #10]
 801af36:	4413      	add	r3, r2
 801af38:	2235      	movs	r2, #53	; 0x35
 801af3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801af3e:	4b95      	ldr	r3, [pc, #596]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af40:	681a      	ldr	r2, [r3, #0]
 801af42:	897b      	ldrh	r3, [r7, #10]
 801af44:	1c59      	adds	r1, r3, #1
 801af46:	8179      	strh	r1, [r7, #10]
 801af48:	4413      	add	r3, r2
 801af4a:	2201      	movs	r2, #1
 801af4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801af50:	4b90      	ldr	r3, [pc, #576]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af52:	681a      	ldr	r2, [r3, #0]
 801af54:	897b      	ldrh	r3, [r7, #10]
 801af56:	1c59      	adds	r1, r3, #1
 801af58:	8179      	strh	r1, [r7, #10]
 801af5a:	4413      	add	r3, r2
 801af5c:	2204      	movs	r2, #4
 801af5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801af62:	4b8c      	ldr	r3, [pc, #560]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af64:	681a      	ldr	r2, [r3, #0]
 801af66:	897b      	ldrh	r3, [r7, #10]
 801af68:	1c59      	adds	r1, r3, #1
 801af6a:	8179      	strh	r1, [r7, #10]
 801af6c:	4413      	add	r3, r2
 801af6e:	223d      	movs	r2, #61	; 0x3d
 801af70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801af74:	4b87      	ldr	r3, [pc, #540]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af76:	681a      	ldr	r2, [r3, #0]
 801af78:	897b      	ldrh	r3, [r7, #10]
 801af7a:	1c59      	adds	r1, r3, #1
 801af7c:	8179      	strh	r1, [r7, #10]
 801af7e:	4413      	add	r3, r2
 801af80:	2207      	movs	r2, #7
 801af82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801af86:	4b83      	ldr	r3, [pc, #524]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af88:	681a      	ldr	r2, [r3, #0]
 801af8a:	897b      	ldrh	r3, [r7, #10]
 801af8c:	1c59      	adds	r1, r3, #1
 801af8e:	8179      	strh	r1, [r7, #10]
 801af90:	4413      	add	r3, r2
 801af92:	2201      	movs	r2, #1
 801af94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801af98:	4b7e      	ldr	r3, [pc, #504]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801af9a:	681a      	ldr	r2, [r3, #0]
 801af9c:	897b      	ldrh	r3, [r7, #10]
 801af9e:	1c59      	adds	r1, r3, #1
 801afa0:	8179      	strh	r1, [r7, #10]
 801afa2:	4618      	mov	r0, r3
 801afa4:	4b7c      	ldr	r3, [pc, #496]	; (801b198 <send_DHCP_DECLINE+0x294>)
 801afa6:	7819      	ldrb	r1, [r3, #0]
 801afa8:	1813      	adds	r3, r2, r0
 801afaa:	460a      	mov	r2, r1
 801afac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801afb0:	4b78      	ldr	r3, [pc, #480]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801afb2:	681a      	ldr	r2, [r3, #0]
 801afb4:	897b      	ldrh	r3, [r7, #10]
 801afb6:	1c59      	adds	r1, r3, #1
 801afb8:	8179      	strh	r1, [r7, #10]
 801afba:	4618      	mov	r0, r3
 801afbc:	4b76      	ldr	r3, [pc, #472]	; (801b198 <send_DHCP_DECLINE+0x294>)
 801afbe:	7859      	ldrb	r1, [r3, #1]
 801afc0:	1813      	adds	r3, r2, r0
 801afc2:	460a      	mov	r2, r1
 801afc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801afc8:	4b72      	ldr	r3, [pc, #456]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801afca:	681a      	ldr	r2, [r3, #0]
 801afcc:	897b      	ldrh	r3, [r7, #10]
 801afce:	1c59      	adds	r1, r3, #1
 801afd0:	8179      	strh	r1, [r7, #10]
 801afd2:	4618      	mov	r0, r3
 801afd4:	4b70      	ldr	r3, [pc, #448]	; (801b198 <send_DHCP_DECLINE+0x294>)
 801afd6:	7899      	ldrb	r1, [r3, #2]
 801afd8:	1813      	adds	r3, r2, r0
 801afda:	460a      	mov	r2, r1
 801afdc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801afe0:	4b6c      	ldr	r3, [pc, #432]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801afe2:	681a      	ldr	r2, [r3, #0]
 801afe4:	897b      	ldrh	r3, [r7, #10]
 801afe6:	1c59      	adds	r1, r3, #1
 801afe8:	8179      	strh	r1, [r7, #10]
 801afea:	4618      	mov	r0, r3
 801afec:	4b6a      	ldr	r3, [pc, #424]	; (801b198 <send_DHCP_DECLINE+0x294>)
 801afee:	78d9      	ldrb	r1, [r3, #3]
 801aff0:	1813      	adds	r3, r2, r0
 801aff2:	460a      	mov	r2, r1
 801aff4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801aff8:	4b66      	ldr	r3, [pc, #408]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801affa:	681a      	ldr	r2, [r3, #0]
 801affc:	897b      	ldrh	r3, [r7, #10]
 801affe:	1c59      	adds	r1, r3, #1
 801b000:	8179      	strh	r1, [r7, #10]
 801b002:	4618      	mov	r0, r3
 801b004:	4b64      	ldr	r3, [pc, #400]	; (801b198 <send_DHCP_DECLINE+0x294>)
 801b006:	7919      	ldrb	r1, [r3, #4]
 801b008:	1813      	adds	r3, r2, r0
 801b00a:	460a      	mov	r2, r1
 801b00c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b010:	4b60      	ldr	r3, [pc, #384]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b012:	681a      	ldr	r2, [r3, #0]
 801b014:	897b      	ldrh	r3, [r7, #10]
 801b016:	1c59      	adds	r1, r3, #1
 801b018:	8179      	strh	r1, [r7, #10]
 801b01a:	4618      	mov	r0, r3
 801b01c:	4b5e      	ldr	r3, [pc, #376]	; (801b198 <send_DHCP_DECLINE+0x294>)
 801b01e:	7959      	ldrb	r1, [r3, #5]
 801b020:	1813      	adds	r3, r2, r0
 801b022:	460a      	mov	r2, r1
 801b024:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b028:	4b5a      	ldr	r3, [pc, #360]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b02a:	681a      	ldr	r2, [r3, #0]
 801b02c:	897b      	ldrh	r3, [r7, #10]
 801b02e:	1c59      	adds	r1, r3, #1
 801b030:	8179      	strh	r1, [r7, #10]
 801b032:	4413      	add	r3, r2
 801b034:	2232      	movs	r2, #50	; 0x32
 801b036:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b03a:	4b56      	ldr	r3, [pc, #344]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b03c:	681a      	ldr	r2, [r3, #0]
 801b03e:	897b      	ldrh	r3, [r7, #10]
 801b040:	1c59      	adds	r1, r3, #1
 801b042:	8179      	strh	r1, [r7, #10]
 801b044:	4413      	add	r3, r2
 801b046:	2204      	movs	r2, #4
 801b048:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b04c:	4b51      	ldr	r3, [pc, #324]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b04e:	681a      	ldr	r2, [r3, #0]
 801b050:	897b      	ldrh	r3, [r7, #10]
 801b052:	1c59      	adds	r1, r3, #1
 801b054:	8179      	strh	r1, [r7, #10]
 801b056:	4618      	mov	r0, r3
 801b058:	4b50      	ldr	r3, [pc, #320]	; (801b19c <send_DHCP_DECLINE+0x298>)
 801b05a:	7819      	ldrb	r1, [r3, #0]
 801b05c:	1813      	adds	r3, r2, r0
 801b05e:	460a      	mov	r2, r1
 801b060:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b064:	4b4b      	ldr	r3, [pc, #300]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b066:	681a      	ldr	r2, [r3, #0]
 801b068:	897b      	ldrh	r3, [r7, #10]
 801b06a:	1c59      	adds	r1, r3, #1
 801b06c:	8179      	strh	r1, [r7, #10]
 801b06e:	4618      	mov	r0, r3
 801b070:	4b4a      	ldr	r3, [pc, #296]	; (801b19c <send_DHCP_DECLINE+0x298>)
 801b072:	7859      	ldrb	r1, [r3, #1]
 801b074:	1813      	adds	r3, r2, r0
 801b076:	460a      	mov	r2, r1
 801b078:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b07c:	4b45      	ldr	r3, [pc, #276]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b07e:	681a      	ldr	r2, [r3, #0]
 801b080:	897b      	ldrh	r3, [r7, #10]
 801b082:	1c59      	adds	r1, r3, #1
 801b084:	8179      	strh	r1, [r7, #10]
 801b086:	4618      	mov	r0, r3
 801b088:	4b44      	ldr	r3, [pc, #272]	; (801b19c <send_DHCP_DECLINE+0x298>)
 801b08a:	7899      	ldrb	r1, [r3, #2]
 801b08c:	1813      	adds	r3, r2, r0
 801b08e:	460a      	mov	r2, r1
 801b090:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b094:	4b3f      	ldr	r3, [pc, #252]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b096:	681a      	ldr	r2, [r3, #0]
 801b098:	897b      	ldrh	r3, [r7, #10]
 801b09a:	1c59      	adds	r1, r3, #1
 801b09c:	8179      	strh	r1, [r7, #10]
 801b09e:	4618      	mov	r0, r3
 801b0a0:	4b3e      	ldr	r3, [pc, #248]	; (801b19c <send_DHCP_DECLINE+0x298>)
 801b0a2:	78d9      	ldrb	r1, [r3, #3]
 801b0a4:	1813      	adds	r3, r2, r0
 801b0a6:	460a      	mov	r2, r1
 801b0a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b0ac:	4b39      	ldr	r3, [pc, #228]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b0ae:	681a      	ldr	r2, [r3, #0]
 801b0b0:	897b      	ldrh	r3, [r7, #10]
 801b0b2:	1c59      	adds	r1, r3, #1
 801b0b4:	8179      	strh	r1, [r7, #10]
 801b0b6:	4413      	add	r3, r2
 801b0b8:	2236      	movs	r2, #54	; 0x36
 801b0ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b0be:	4b35      	ldr	r3, [pc, #212]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b0c0:	681a      	ldr	r2, [r3, #0]
 801b0c2:	897b      	ldrh	r3, [r7, #10]
 801b0c4:	1c59      	adds	r1, r3, #1
 801b0c6:	8179      	strh	r1, [r7, #10]
 801b0c8:	4413      	add	r3, r2
 801b0ca:	2204      	movs	r2, #4
 801b0cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b0d0:	4b30      	ldr	r3, [pc, #192]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	897b      	ldrh	r3, [r7, #10]
 801b0d6:	1c59      	adds	r1, r3, #1
 801b0d8:	8179      	strh	r1, [r7, #10]
 801b0da:	4618      	mov	r0, r3
 801b0dc:	4b30      	ldr	r3, [pc, #192]	; (801b1a0 <send_DHCP_DECLINE+0x29c>)
 801b0de:	7819      	ldrb	r1, [r3, #0]
 801b0e0:	1813      	adds	r3, r2, r0
 801b0e2:	460a      	mov	r2, r1
 801b0e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b0e8:	4b2a      	ldr	r3, [pc, #168]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b0ea:	681a      	ldr	r2, [r3, #0]
 801b0ec:	897b      	ldrh	r3, [r7, #10]
 801b0ee:	1c59      	adds	r1, r3, #1
 801b0f0:	8179      	strh	r1, [r7, #10]
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	4b2a      	ldr	r3, [pc, #168]	; (801b1a0 <send_DHCP_DECLINE+0x29c>)
 801b0f6:	7859      	ldrb	r1, [r3, #1]
 801b0f8:	1813      	adds	r3, r2, r0
 801b0fa:	460a      	mov	r2, r1
 801b0fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b100:	4b24      	ldr	r3, [pc, #144]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b102:	681a      	ldr	r2, [r3, #0]
 801b104:	897b      	ldrh	r3, [r7, #10]
 801b106:	1c59      	adds	r1, r3, #1
 801b108:	8179      	strh	r1, [r7, #10]
 801b10a:	4618      	mov	r0, r3
 801b10c:	4b24      	ldr	r3, [pc, #144]	; (801b1a0 <send_DHCP_DECLINE+0x29c>)
 801b10e:	7899      	ldrb	r1, [r3, #2]
 801b110:	1813      	adds	r3, r2, r0
 801b112:	460a      	mov	r2, r1
 801b114:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b118:	4b1e      	ldr	r3, [pc, #120]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b11a:	681a      	ldr	r2, [r3, #0]
 801b11c:	897b      	ldrh	r3, [r7, #10]
 801b11e:	1c59      	adds	r1, r3, #1
 801b120:	8179      	strh	r1, [r7, #10]
 801b122:	4618      	mov	r0, r3
 801b124:	4b1e      	ldr	r3, [pc, #120]	; (801b1a0 <send_DHCP_DECLINE+0x29c>)
 801b126:	78d9      	ldrb	r1, [r3, #3]
 801b128:	1813      	adds	r3, r2, r0
 801b12a:	460a      	mov	r2, r1
 801b12c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b130:	4b18      	ldr	r3, [pc, #96]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b132:	681a      	ldr	r2, [r3, #0]
 801b134:	897b      	ldrh	r3, [r7, #10]
 801b136:	1c59      	adds	r1, r3, #1
 801b138:	8179      	strh	r1, [r7, #10]
 801b13a:	4413      	add	r3, r2
 801b13c:	22ff      	movs	r2, #255	; 0xff
 801b13e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b142:	897b      	ldrh	r3, [r7, #10]
 801b144:	60fb      	str	r3, [r7, #12]
 801b146:	e009      	b.n	801b15c <send_DHCP_DECLINE+0x258>
 801b148:	4b12      	ldr	r3, [pc, #72]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b14a:	681a      	ldr	r2, [r3, #0]
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	4413      	add	r3, r2
 801b150:	33ec      	adds	r3, #236	; 0xec
 801b152:	2200      	movs	r2, #0
 801b154:	701a      	strb	r2, [r3, #0]
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	3301      	adds	r3, #1
 801b15a:	60fb      	str	r3, [r7, #12]
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b162:	dbf1      	blt.n	801b148 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b164:	23ff      	movs	r3, #255	; 0xff
 801b166:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b168:	23ff      	movs	r3, #255	; 0xff
 801b16a:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b16c:	23ff      	movs	r3, #255	; 0xff
 801b16e:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b170:	23ff      	movs	r3, #255	; 0xff
 801b172:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b174:	4b0b      	ldr	r3, [pc, #44]	; (801b1a4 <send_DHCP_DECLINE+0x2a0>)
 801b176:	7818      	ldrb	r0, [r3, #0]
 801b178:	4b06      	ldr	r3, [pc, #24]	; (801b194 <send_DHCP_DECLINE+0x290>)
 801b17a:	6819      	ldr	r1, [r3, #0]
 801b17c:	1d3b      	adds	r3, r7, #4
 801b17e:	2243      	movs	r2, #67	; 0x43
 801b180:	9200      	str	r2, [sp, #0]
 801b182:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b186:	f7fe f823 	bl	80191d0 <sendto>
}
 801b18a:	bf00      	nop
 801b18c:	3710      	adds	r7, #16
 801b18e:	46bd      	mov	sp, r7
 801b190:	bd80      	pop	{r7, pc}
 801b192:	bf00      	nop
 801b194:	2000099c 	.word	0x2000099c
 801b198:	200009a0 	.word	0x200009a0
 801b19c:	20000980 	.word	0x20000980
 801b1a0:	20000974 	.word	0x20000974
 801b1a4:	20000971 	.word	0x20000971

0801b1a8 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b1a8:	b590      	push	{r4, r7, lr}
 801b1aa:	b089      	sub	sp, #36	; 0x24
 801b1ac:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b1b2:	4ba1      	ldr	r3, [pc, #644]	; (801b438 <parseDHCPMSG+0x290>)
 801b1b4:	781b      	ldrb	r3, [r3, #0]
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	f7fd f9e1 	bl	801857e <getSn_RX_RSR>
 801b1bc:	4603      	mov	r3, r0
 801b1be:	823b      	strh	r3, [r7, #16]
 801b1c0:	8a3b      	ldrh	r3, [r7, #16]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d011      	beq.n	801b1ea <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b1c6:	4b9c      	ldr	r3, [pc, #624]	; (801b438 <parseDHCPMSG+0x290>)
 801b1c8:	7818      	ldrb	r0, [r3, #0]
 801b1ca:	4b9c      	ldr	r3, [pc, #624]	; (801b43c <parseDHCPMSG+0x294>)
 801b1cc:	6819      	ldr	r1, [r3, #0]
 801b1ce:	1d3c      	adds	r4, r7, #4
 801b1d0:	8a3a      	ldrh	r2, [r7, #16]
 801b1d2:	1cbb      	adds	r3, r7, #2
 801b1d4:	9300      	str	r3, [sp, #0]
 801b1d6:	4623      	mov	r3, r4
 801b1d8:	f7fe f930 	bl	801943c <recvfrom>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b1e0:	887b      	ldrh	r3, [r7, #2]
 801b1e2:	2b43      	cmp	r3, #67	; 0x43
 801b1e4:	f040 81ed 	bne.w	801b5c2 <parseDHCPMSG+0x41a>
 801b1e8:	e001      	b.n	801b1ee <parseDHCPMSG+0x46>
   else return 0;
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	e1eb      	b.n	801b5c6 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b1ee:	4b93      	ldr	r3, [pc, #588]	; (801b43c <parseDHCPMSG+0x294>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	7f1a      	ldrb	r2, [r3, #28]
 801b1f4:	4b92      	ldr	r3, [pc, #584]	; (801b440 <parseDHCPMSG+0x298>)
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	429a      	cmp	r2, r3
 801b1fa:	d124      	bne.n	801b246 <parseDHCPMSG+0x9e>
 801b1fc:	4b8f      	ldr	r3, [pc, #572]	; (801b43c <parseDHCPMSG+0x294>)
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	7f5a      	ldrb	r2, [r3, #29]
 801b202:	4b8f      	ldr	r3, [pc, #572]	; (801b440 <parseDHCPMSG+0x298>)
 801b204:	785b      	ldrb	r3, [r3, #1]
 801b206:	429a      	cmp	r2, r3
 801b208:	d11d      	bne.n	801b246 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b20a:	4b8c      	ldr	r3, [pc, #560]	; (801b43c <parseDHCPMSG+0x294>)
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	7f9a      	ldrb	r2, [r3, #30]
 801b210:	4b8b      	ldr	r3, [pc, #556]	; (801b440 <parseDHCPMSG+0x298>)
 801b212:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b214:	429a      	cmp	r2, r3
 801b216:	d116      	bne.n	801b246 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b218:	4b88      	ldr	r3, [pc, #544]	; (801b43c <parseDHCPMSG+0x294>)
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	7fda      	ldrb	r2, [r3, #31]
 801b21e:	4b88      	ldr	r3, [pc, #544]	; (801b440 <parseDHCPMSG+0x298>)
 801b220:	78db      	ldrb	r3, [r3, #3]
 801b222:	429a      	cmp	r2, r3
 801b224:	d10f      	bne.n	801b246 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b226:	4b85      	ldr	r3, [pc, #532]	; (801b43c <parseDHCPMSG+0x294>)
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b22e:	4b84      	ldr	r3, [pc, #528]	; (801b440 <parseDHCPMSG+0x298>)
 801b230:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b232:	429a      	cmp	r2, r3
 801b234:	d107      	bne.n	801b246 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b236:	4b81      	ldr	r3, [pc, #516]	; (801b43c <parseDHCPMSG+0x294>)
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b23e:	4b80      	ldr	r3, [pc, #512]	; (801b440 <parseDHCPMSG+0x298>)
 801b240:	795b      	ldrb	r3, [r3, #5]
 801b242:	429a      	cmp	r2, r3
 801b244:	d001      	beq.n	801b24a <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b246:	2300      	movs	r3, #0
 801b248:	e1bd      	b.n	801b5c6 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b24a:	4b7e      	ldr	r3, [pc, #504]	; (801b444 <parseDHCPMSG+0x29c>)
 801b24c:	781b      	ldrb	r3, [r3, #0]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d10b      	bne.n	801b26a <parseDHCPMSG+0xc2>
 801b252:	4b7c      	ldr	r3, [pc, #496]	; (801b444 <parseDHCPMSG+0x29c>)
 801b254:	785b      	ldrb	r3, [r3, #1]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d107      	bne.n	801b26a <parseDHCPMSG+0xc2>
 801b25a:	4b7a      	ldr	r3, [pc, #488]	; (801b444 <parseDHCPMSG+0x29c>)
 801b25c:	789b      	ldrb	r3, [r3, #2]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d103      	bne.n	801b26a <parseDHCPMSG+0xc2>
 801b262:	4b78      	ldr	r3, [pc, #480]	; (801b444 <parseDHCPMSG+0x29c>)
 801b264:	78db      	ldrb	r3, [r3, #3]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d029      	beq.n	801b2be <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b26a:	793a      	ldrb	r2, [r7, #4]
 801b26c:	4b75      	ldr	r3, [pc, #468]	; (801b444 <parseDHCPMSG+0x29c>)
 801b26e:	781b      	ldrb	r3, [r3, #0]
 801b270:	429a      	cmp	r2, r3
 801b272:	d10e      	bne.n	801b292 <parseDHCPMSG+0xea>
 801b274:	797a      	ldrb	r2, [r7, #5]
 801b276:	4b73      	ldr	r3, [pc, #460]	; (801b444 <parseDHCPMSG+0x29c>)
 801b278:	785b      	ldrb	r3, [r3, #1]
 801b27a:	429a      	cmp	r2, r3
 801b27c:	d109      	bne.n	801b292 <parseDHCPMSG+0xea>
 801b27e:	79ba      	ldrb	r2, [r7, #6]
 801b280:	4b70      	ldr	r3, [pc, #448]	; (801b444 <parseDHCPMSG+0x29c>)
 801b282:	789b      	ldrb	r3, [r3, #2]
 801b284:	429a      	cmp	r2, r3
 801b286:	d104      	bne.n	801b292 <parseDHCPMSG+0xea>
 801b288:	79fa      	ldrb	r2, [r7, #7]
 801b28a:	4b6e      	ldr	r3, [pc, #440]	; (801b444 <parseDHCPMSG+0x29c>)
 801b28c:	78db      	ldrb	r3, [r3, #3]
 801b28e:	429a      	cmp	r2, r3
 801b290:	d015      	beq.n	801b2be <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b292:	793a      	ldrb	r2, [r7, #4]
 801b294:	4b6c      	ldr	r3, [pc, #432]	; (801b448 <parseDHCPMSG+0x2a0>)
 801b296:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b298:	429a      	cmp	r2, r3
 801b29a:	d10e      	bne.n	801b2ba <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b29c:	797a      	ldrb	r2, [r7, #5]
 801b29e:	4b6a      	ldr	r3, [pc, #424]	; (801b448 <parseDHCPMSG+0x2a0>)
 801b2a0:	785b      	ldrb	r3, [r3, #1]
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d109      	bne.n	801b2ba <parseDHCPMSG+0x112>
 801b2a6:	79ba      	ldrb	r2, [r7, #6]
 801b2a8:	4b67      	ldr	r3, [pc, #412]	; (801b448 <parseDHCPMSG+0x2a0>)
 801b2aa:	789b      	ldrb	r3, [r3, #2]
 801b2ac:	429a      	cmp	r2, r3
 801b2ae:	d104      	bne.n	801b2ba <parseDHCPMSG+0x112>
 801b2b0:	79fa      	ldrb	r2, [r7, #7]
 801b2b2:	4b65      	ldr	r3, [pc, #404]	; (801b448 <parseDHCPMSG+0x2a0>)
 801b2b4:	78db      	ldrb	r3, [r3, #3]
 801b2b6:	429a      	cmp	r2, r3
 801b2b8:	d001      	beq.n	801b2be <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	e183      	b.n	801b5c6 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b2be:	4b5f      	ldr	r3, [pc, #380]	; (801b43c <parseDHCPMSG+0x294>)
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	33f0      	adds	r3, #240	; 0xf0
 801b2c8:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b2ca:	8a3b      	ldrh	r3, [r7, #16]
 801b2cc:	3bf0      	subs	r3, #240	; 0xf0
 801b2ce:	697a      	ldr	r2, [r7, #20]
 801b2d0:	4413      	add	r3, r2
 801b2d2:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b2d4:	e170      	b.n	801b5b8 <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b2d6:	697b      	ldr	r3, [r7, #20]
 801b2d8:	781b      	ldrb	r3, [r3, #0]
 801b2da:	2b36      	cmp	r3, #54	; 0x36
 801b2dc:	dc76      	bgt.n	801b3cc <parseDHCPMSG+0x224>
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	f2c0 815d 	blt.w	801b59e <parseDHCPMSG+0x3f6>
 801b2e4:	2b36      	cmp	r3, #54	; 0x36
 801b2e6:	f200 815a 	bhi.w	801b59e <parseDHCPMSG+0x3f6>
 801b2ea:	a201      	add	r2, pc, #4	; (adr r2, 801b2f0 <parseDHCPMSG+0x148>)
 801b2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2f0:	0801b3d9 	.word	0x0801b3d9
 801b2f4:	0801b3f9 	.word	0x0801b3f9
 801b2f8:	0801b59f 	.word	0x0801b59f
 801b2fc:	0801b451 	.word	0x0801b451
 801b300:	0801b59f 	.word	0x0801b59f
 801b304:	0801b59f 	.word	0x0801b59f
 801b308:	0801b49d 	.word	0x0801b49d
 801b30c:	0801b59f 	.word	0x0801b59f
 801b310:	0801b59f 	.word	0x0801b59f
 801b314:	0801b59f 	.word	0x0801b59f
 801b318:	0801b59f 	.word	0x0801b59f
 801b31c:	0801b59f 	.word	0x0801b59f
 801b320:	0801b59f 	.word	0x0801b59f
 801b324:	0801b59f 	.word	0x0801b59f
 801b328:	0801b59f 	.word	0x0801b59f
 801b32c:	0801b59f 	.word	0x0801b59f
 801b330:	0801b59f 	.word	0x0801b59f
 801b334:	0801b59f 	.word	0x0801b59f
 801b338:	0801b59f 	.word	0x0801b59f
 801b33c:	0801b59f 	.word	0x0801b59f
 801b340:	0801b59f 	.word	0x0801b59f
 801b344:	0801b59f 	.word	0x0801b59f
 801b348:	0801b59f 	.word	0x0801b59f
 801b34c:	0801b59f 	.word	0x0801b59f
 801b350:	0801b59f 	.word	0x0801b59f
 801b354:	0801b59f 	.word	0x0801b59f
 801b358:	0801b59f 	.word	0x0801b59f
 801b35c:	0801b59f 	.word	0x0801b59f
 801b360:	0801b59f 	.word	0x0801b59f
 801b364:	0801b59f 	.word	0x0801b59f
 801b368:	0801b59f 	.word	0x0801b59f
 801b36c:	0801b59f 	.word	0x0801b59f
 801b370:	0801b59f 	.word	0x0801b59f
 801b374:	0801b59f 	.word	0x0801b59f
 801b378:	0801b59f 	.word	0x0801b59f
 801b37c:	0801b59f 	.word	0x0801b59f
 801b380:	0801b59f 	.word	0x0801b59f
 801b384:	0801b59f 	.word	0x0801b59f
 801b388:	0801b59f 	.word	0x0801b59f
 801b38c:	0801b59f 	.word	0x0801b59f
 801b390:	0801b59f 	.word	0x0801b59f
 801b394:	0801b59f 	.word	0x0801b59f
 801b398:	0801b59f 	.word	0x0801b59f
 801b39c:	0801b59f 	.word	0x0801b59f
 801b3a0:	0801b59f 	.word	0x0801b59f
 801b3a4:	0801b59f 	.word	0x0801b59f
 801b3a8:	0801b59f 	.word	0x0801b59f
 801b3ac:	0801b59f 	.word	0x0801b59f
 801b3b0:	0801b59f 	.word	0x0801b59f
 801b3b4:	0801b59f 	.word	0x0801b59f
 801b3b8:	0801b59f 	.word	0x0801b59f
 801b3bc:	0801b4e9 	.word	0x0801b4e9
 801b3c0:	0801b59f 	.word	0x0801b59f
 801b3c4:	0801b3e1 	.word	0x0801b3e1
 801b3c8:	0801b545 	.word	0x0801b545
 801b3cc:	2bff      	cmp	r3, #255	; 0xff
 801b3ce:	f040 80e6 	bne.w	801b59e <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801b3d2:	68fb      	ldr	r3, [r7, #12]
 801b3d4:	617b      	str	r3, [r7, #20]
   				break;
 801b3d6:	e0ef      	b.n	801b5b8 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801b3d8:	697b      	ldr	r3, [r7, #20]
 801b3da:	3301      	adds	r3, #1
 801b3dc:	617b      	str	r3, [r7, #20]
   				break;
 801b3de:	e0eb      	b.n	801b5b8 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801b3e0:	697b      	ldr	r3, [r7, #20]
 801b3e2:	3301      	adds	r3, #1
 801b3e4:	617b      	str	r3, [r7, #20]
   				p++;
 801b3e6:	697b      	ldr	r3, [r7, #20]
 801b3e8:	3301      	adds	r3, #1
 801b3ea:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801b3ec:	697b      	ldr	r3, [r7, #20]
 801b3ee:	1c5a      	adds	r2, r3, #1
 801b3f0:	617a      	str	r2, [r7, #20]
 801b3f2:	781b      	ldrb	r3, [r3, #0]
 801b3f4:	74fb      	strb	r3, [r7, #19]
   				break;
 801b3f6:	e0df      	b.n	801b5b8 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801b3f8:	697b      	ldr	r3, [r7, #20]
 801b3fa:	3301      	adds	r3, #1
 801b3fc:	617b      	str	r3, [r7, #20]
   				p++;
 801b3fe:	697b      	ldr	r3, [r7, #20]
 801b400:	3301      	adds	r3, #1
 801b402:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801b404:	697b      	ldr	r3, [r7, #20]
 801b406:	1c5a      	adds	r2, r3, #1
 801b408:	617a      	str	r2, [r7, #20]
 801b40a:	781a      	ldrb	r2, [r3, #0]
 801b40c:	4b0f      	ldr	r3, [pc, #60]	; (801b44c <parseDHCPMSG+0x2a4>)
 801b40e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801b410:	697b      	ldr	r3, [r7, #20]
 801b412:	1c5a      	adds	r2, r3, #1
 801b414:	617a      	str	r2, [r7, #20]
 801b416:	781a      	ldrb	r2, [r3, #0]
 801b418:	4b0c      	ldr	r3, [pc, #48]	; (801b44c <parseDHCPMSG+0x2a4>)
 801b41a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801b41c:	697b      	ldr	r3, [r7, #20]
 801b41e:	1c5a      	adds	r2, r3, #1
 801b420:	617a      	str	r2, [r7, #20]
 801b422:	781a      	ldrb	r2, [r3, #0]
 801b424:	4b09      	ldr	r3, [pc, #36]	; (801b44c <parseDHCPMSG+0x2a4>)
 801b426:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801b428:	697b      	ldr	r3, [r7, #20]
 801b42a:	1c5a      	adds	r2, r3, #1
 801b42c:	617a      	str	r2, [r7, #20]
 801b42e:	781a      	ldrb	r2, [r3, #0]
 801b430:	4b06      	ldr	r3, [pc, #24]	; (801b44c <parseDHCPMSG+0x2a4>)
 801b432:	70da      	strb	r2, [r3, #3]
   				break;
 801b434:	e0c0      	b.n	801b5b8 <parseDHCPMSG+0x410>
 801b436:	bf00      	nop
 801b438:	20000971 	.word	0x20000971
 801b43c:	2000099c 	.word	0x2000099c
 801b440:	200009a0 	.word	0x200009a0
 801b444:	20000974 	.word	0x20000974
 801b448:	20000978 	.word	0x20000978
 801b44c:	20000988 	.word	0x20000988
   			case routersOnSubnet :
   				p++;
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	3301      	adds	r3, #1
 801b454:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	1c5a      	adds	r2, r3, #1
 801b45a:	617a      	str	r2, [r7, #20]
 801b45c:	781b      	ldrb	r3, [r3, #0]
 801b45e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801b460:	697b      	ldr	r3, [r7, #20]
 801b462:	1c5a      	adds	r2, r3, #1
 801b464:	617a      	str	r2, [r7, #20]
 801b466:	781a      	ldrb	r2, [r3, #0]
 801b468:	4b59      	ldr	r3, [pc, #356]	; (801b5d0 <parseDHCPMSG+0x428>)
 801b46a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801b46c:	697b      	ldr	r3, [r7, #20]
 801b46e:	1c5a      	adds	r2, r3, #1
 801b470:	617a      	str	r2, [r7, #20]
 801b472:	781a      	ldrb	r2, [r3, #0]
 801b474:	4b56      	ldr	r3, [pc, #344]	; (801b5d0 <parseDHCPMSG+0x428>)
 801b476:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801b478:	697b      	ldr	r3, [r7, #20]
 801b47a:	1c5a      	adds	r2, r3, #1
 801b47c:	617a      	str	r2, [r7, #20]
 801b47e:	781a      	ldrb	r2, [r3, #0]
 801b480:	4b53      	ldr	r3, [pc, #332]	; (801b5d0 <parseDHCPMSG+0x428>)
 801b482:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801b484:	697b      	ldr	r3, [r7, #20]
 801b486:	1c5a      	adds	r2, r3, #1
 801b488:	617a      	str	r2, [r7, #20]
 801b48a:	781a      	ldrb	r2, [r3, #0]
 801b48c:	4b50      	ldr	r3, [pc, #320]	; (801b5d0 <parseDHCPMSG+0x428>)
 801b48e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b490:	7afb      	ldrb	r3, [r7, #11]
 801b492:	3b04      	subs	r3, #4
 801b494:	697a      	ldr	r2, [r7, #20]
 801b496:	4413      	add	r3, r2
 801b498:	617b      	str	r3, [r7, #20]
   				break;
 801b49a:	e08d      	b.n	801b5b8 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801b49c:	697b      	ldr	r3, [r7, #20]
 801b49e:	3301      	adds	r3, #1
 801b4a0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b4a2:	697b      	ldr	r3, [r7, #20]
 801b4a4:	1c5a      	adds	r2, r3, #1
 801b4a6:	617a      	str	r2, [r7, #20]
 801b4a8:	781b      	ldrb	r3, [r3, #0]
 801b4aa:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801b4ac:	697b      	ldr	r3, [r7, #20]
 801b4ae:	1c5a      	adds	r2, r3, #1
 801b4b0:	617a      	str	r2, [r7, #20]
 801b4b2:	781a      	ldrb	r2, [r3, #0]
 801b4b4:	4b47      	ldr	r3, [pc, #284]	; (801b5d4 <parseDHCPMSG+0x42c>)
 801b4b6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801b4b8:	697b      	ldr	r3, [r7, #20]
 801b4ba:	1c5a      	adds	r2, r3, #1
 801b4bc:	617a      	str	r2, [r7, #20]
 801b4be:	781a      	ldrb	r2, [r3, #0]
 801b4c0:	4b44      	ldr	r3, [pc, #272]	; (801b5d4 <parseDHCPMSG+0x42c>)
 801b4c2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801b4c4:	697b      	ldr	r3, [r7, #20]
 801b4c6:	1c5a      	adds	r2, r3, #1
 801b4c8:	617a      	str	r2, [r7, #20]
 801b4ca:	781a      	ldrb	r2, [r3, #0]
 801b4cc:	4b41      	ldr	r3, [pc, #260]	; (801b5d4 <parseDHCPMSG+0x42c>)
 801b4ce:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801b4d0:	697b      	ldr	r3, [r7, #20]
 801b4d2:	1c5a      	adds	r2, r3, #1
 801b4d4:	617a      	str	r2, [r7, #20]
 801b4d6:	781a      	ldrb	r2, [r3, #0]
 801b4d8:	4b3e      	ldr	r3, [pc, #248]	; (801b5d4 <parseDHCPMSG+0x42c>)
 801b4da:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b4dc:	7afb      	ldrb	r3, [r7, #11]
 801b4de:	3b04      	subs	r3, #4
 801b4e0:	697a      	ldr	r2, [r7, #20]
 801b4e2:	4413      	add	r3, r2
 801b4e4:	617b      	str	r3, [r7, #20]
   				break;
 801b4e6:	e067      	b.n	801b5b8 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801b4e8:	697b      	ldr	r3, [r7, #20]
 801b4ea:	3301      	adds	r3, #1
 801b4ec:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b4ee:	697b      	ldr	r3, [r7, #20]
 801b4f0:	1c5a      	adds	r2, r3, #1
 801b4f2:	617a      	str	r2, [r7, #20]
 801b4f4:	781b      	ldrb	r3, [r3, #0]
 801b4f6:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801b4f8:	697b      	ldr	r3, [r7, #20]
 801b4fa:	1c5a      	adds	r2, r3, #1
 801b4fc:	617a      	str	r2, [r7, #20]
 801b4fe:	781b      	ldrb	r3, [r3, #0]
 801b500:	461a      	mov	r2, r3
 801b502:	4b35      	ldr	r3, [pc, #212]	; (801b5d8 <parseDHCPMSG+0x430>)
 801b504:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b506:	4b34      	ldr	r3, [pc, #208]	; (801b5d8 <parseDHCPMSG+0x430>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	021a      	lsls	r2, r3, #8
 801b50c:	697b      	ldr	r3, [r7, #20]
 801b50e:	1c59      	adds	r1, r3, #1
 801b510:	6179      	str	r1, [r7, #20]
 801b512:	781b      	ldrb	r3, [r3, #0]
 801b514:	4413      	add	r3, r2
 801b516:	4a30      	ldr	r2, [pc, #192]	; (801b5d8 <parseDHCPMSG+0x430>)
 801b518:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b51a:	4b2f      	ldr	r3, [pc, #188]	; (801b5d8 <parseDHCPMSG+0x430>)
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	021a      	lsls	r2, r3, #8
 801b520:	697b      	ldr	r3, [r7, #20]
 801b522:	1c59      	adds	r1, r3, #1
 801b524:	6179      	str	r1, [r7, #20]
 801b526:	781b      	ldrb	r3, [r3, #0]
 801b528:	4413      	add	r3, r2
 801b52a:	4a2b      	ldr	r2, [pc, #172]	; (801b5d8 <parseDHCPMSG+0x430>)
 801b52c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b52e:	4b2a      	ldr	r3, [pc, #168]	; (801b5d8 <parseDHCPMSG+0x430>)
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	021a      	lsls	r2, r3, #8
 801b534:	697b      	ldr	r3, [r7, #20]
 801b536:	1c59      	adds	r1, r3, #1
 801b538:	6179      	str	r1, [r7, #20]
 801b53a:	781b      	ldrb	r3, [r3, #0]
 801b53c:	4413      	add	r3, r2
 801b53e:	4a26      	ldr	r2, [pc, #152]	; (801b5d8 <parseDHCPMSG+0x430>)
 801b540:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801b542:	e039      	b.n	801b5b8 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801b544:	697b      	ldr	r3, [r7, #20]
 801b546:	3301      	adds	r3, #1
 801b548:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b54a:	697b      	ldr	r3, [r7, #20]
 801b54c:	1c5a      	adds	r2, r3, #1
 801b54e:	617a      	str	r2, [r7, #20]
 801b550:	781b      	ldrb	r3, [r3, #0]
 801b552:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801b554:	697b      	ldr	r3, [r7, #20]
 801b556:	1c5a      	adds	r2, r3, #1
 801b558:	617a      	str	r2, [r7, #20]
 801b55a:	781a      	ldrb	r2, [r3, #0]
 801b55c:	4b1f      	ldr	r3, [pc, #124]	; (801b5dc <parseDHCPMSG+0x434>)
 801b55e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	1c5a      	adds	r2, r3, #1
 801b564:	617a      	str	r2, [r7, #20]
 801b566:	781a      	ldrb	r2, [r3, #0]
 801b568:	4b1c      	ldr	r3, [pc, #112]	; (801b5dc <parseDHCPMSG+0x434>)
 801b56a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801b56c:	697b      	ldr	r3, [r7, #20]
 801b56e:	1c5a      	adds	r2, r3, #1
 801b570:	617a      	str	r2, [r7, #20]
 801b572:	781a      	ldrb	r2, [r3, #0]
 801b574:	4b19      	ldr	r3, [pc, #100]	; (801b5dc <parseDHCPMSG+0x434>)
 801b576:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801b578:	697b      	ldr	r3, [r7, #20]
 801b57a:	1c5a      	adds	r2, r3, #1
 801b57c:	617a      	str	r2, [r7, #20]
 801b57e:	781a      	ldrb	r2, [r3, #0]
 801b580:	4b16      	ldr	r3, [pc, #88]	; (801b5dc <parseDHCPMSG+0x434>)
 801b582:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801b584:	793a      	ldrb	r2, [r7, #4]
 801b586:	4b16      	ldr	r3, [pc, #88]	; (801b5e0 <parseDHCPMSG+0x438>)
 801b588:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801b58a:	797a      	ldrb	r2, [r7, #5]
 801b58c:	4b14      	ldr	r3, [pc, #80]	; (801b5e0 <parseDHCPMSG+0x438>)
 801b58e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801b590:	79ba      	ldrb	r2, [r7, #6]
 801b592:	4b13      	ldr	r3, [pc, #76]	; (801b5e0 <parseDHCPMSG+0x438>)
 801b594:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801b596:	79fa      	ldrb	r2, [r7, #7]
 801b598:	4b11      	ldr	r3, [pc, #68]	; (801b5e0 <parseDHCPMSG+0x438>)
 801b59a:	70da      	strb	r2, [r3, #3]
   				break;
 801b59c:	e00c      	b.n	801b5b8 <parseDHCPMSG+0x410>
   			default :
   				p++;
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	3301      	adds	r3, #1
 801b5a2:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	1c5a      	adds	r2, r3, #1
 801b5a8:	617a      	str	r2, [r7, #20]
 801b5aa:	781b      	ldrb	r3, [r3, #0]
 801b5ac:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801b5ae:	7afb      	ldrb	r3, [r7, #11]
 801b5b0:	697a      	ldr	r2, [r7, #20]
 801b5b2:	4413      	add	r3, r2
 801b5b4:	617b      	str	r3, [r7, #20]
   				break;
 801b5b6:	bf00      	nop
		while ( p < e ) {
 801b5b8:	697a      	ldr	r2, [r7, #20]
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	f4ff ae8a 	bcc.w	801b2d6 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801b5c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	371c      	adds	r7, #28
 801b5ca:	46bd      	mov	sp, r7
 801b5cc:	bd90      	pop	{r4, r7, pc}
 801b5ce:	bf00      	nop
 801b5d0:	20000984 	.word	0x20000984
 801b5d4:	2000098c 	.word	0x2000098c
 801b5d8:	200000f0 	.word	0x200000f0
 801b5dc:	20000974 	.word	0x20000974
 801b5e0:	20000978 	.word	0x20000978

0801b5e4 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b082      	sub	sp, #8
 801b5e8:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801b5ea:	4b7f      	ldr	r3, [pc, #508]	; (801b7e8 <DHCP_run+0x204>)
 801b5ec:	f993 3000 	ldrsb.w	r3, [r3]
 801b5f0:	2b06      	cmp	r3, #6
 801b5f2:	d101      	bne.n	801b5f8 <DHCP_run+0x14>
 801b5f4:	2305      	movs	r3, #5
 801b5f6:	e0f3      	b.n	801b7e0 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801b5f8:	4b7c      	ldr	r3, [pc, #496]	; (801b7ec <DHCP_run+0x208>)
 801b5fa:	781b      	ldrb	r3, [r3, #0]
 801b5fc:	009b      	lsls	r3, r3, #2
 801b5fe:	3301      	adds	r3, #1
 801b600:	00db      	lsls	r3, r3, #3
 801b602:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801b606:	4618      	mov	r0, r3
 801b608:	f7fc fe14 	bl	8018234 <WIZCHIP_READ>
 801b60c:	4603      	mov	r3, r0
 801b60e:	2b22      	cmp	r3, #34	; 0x22
 801b610:	d006      	beq.n	801b620 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801b612:	4b76      	ldr	r3, [pc, #472]	; (801b7ec <DHCP_run+0x208>)
 801b614:	7818      	ldrb	r0, [r3, #0]
 801b616:	2300      	movs	r3, #0
 801b618:	2244      	movs	r2, #68	; 0x44
 801b61a:	2102      	movs	r1, #2
 801b61c:	f7fd f8fa 	bl	8018814 <socket>

	ret = DHCP_RUNNING;
 801b620:	2301      	movs	r3, #1
 801b622:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801b624:	f7ff fdc0 	bl	801b1a8 <parseDHCPMSG>
 801b628:	4603      	mov	r3, r0
 801b62a:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801b62c:	4b6e      	ldr	r3, [pc, #440]	; (801b7e8 <DHCP_run+0x204>)
 801b62e:	f993 3000 	ldrsb.w	r3, [r3]
 801b632:	2b04      	cmp	r3, #4
 801b634:	f200 80d0 	bhi.w	801b7d8 <DHCP_run+0x1f4>
 801b638:	a201      	add	r2, pc, #4	; (adr r2, 801b640 <DHCP_run+0x5c>)
 801b63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b63e:	bf00      	nop
 801b640:	0801b655 	.word	0x0801b655
 801b644:	0801b679 	.word	0x0801b679
 801b648:	0801b6bd 	.word	0x0801b6bd
 801b64c:	0801b70d 	.word	0x0801b70d
 801b650:	0801b767 	.word	0x0801b767
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801b654:	4b66      	ldr	r3, [pc, #408]	; (801b7f0 <DHCP_run+0x20c>)
 801b656:	2200      	movs	r2, #0
 801b658:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801b65a:	4b65      	ldr	r3, [pc, #404]	; (801b7f0 <DHCP_run+0x20c>)
 801b65c:	2200      	movs	r2, #0
 801b65e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801b660:	4b63      	ldr	r3, [pc, #396]	; (801b7f0 <DHCP_run+0x20c>)
 801b662:	2200      	movs	r2, #0
 801b664:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801b666:	4b62      	ldr	r3, [pc, #392]	; (801b7f0 <DHCP_run+0x20c>)
 801b668:	2200      	movs	r2, #0
 801b66a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801b66c:	f7fe fffa 	bl	801a664 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801b670:	4b5d      	ldr	r3, [pc, #372]	; (801b7e8 <DHCP_run+0x204>)
 801b672:	2201      	movs	r2, #1
 801b674:	701a      	strb	r2, [r3, #0]
   		break;
 801b676:	e0b2      	b.n	801b7de <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801b678:	79bb      	ldrb	r3, [r7, #6]
 801b67a:	2b02      	cmp	r3, #2
 801b67c:	d119      	bne.n	801b6b2 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801b67e:	4b5d      	ldr	r3, [pc, #372]	; (801b7f4 <DHCP_run+0x210>)
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	7c1a      	ldrb	r2, [r3, #16]
 801b684:	4b5a      	ldr	r3, [pc, #360]	; (801b7f0 <DHCP_run+0x20c>)
 801b686:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801b688:	4b5a      	ldr	r3, [pc, #360]	; (801b7f4 <DHCP_run+0x210>)
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	7c5a      	ldrb	r2, [r3, #17]
 801b68e:	4b58      	ldr	r3, [pc, #352]	; (801b7f0 <DHCP_run+0x20c>)
 801b690:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801b692:	4b58      	ldr	r3, [pc, #352]	; (801b7f4 <DHCP_run+0x210>)
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	7c9a      	ldrb	r2, [r3, #18]
 801b698:	4b55      	ldr	r3, [pc, #340]	; (801b7f0 <DHCP_run+0x20c>)
 801b69a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801b69c:	4b55      	ldr	r3, [pc, #340]	; (801b7f4 <DHCP_run+0x210>)
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	7cda      	ldrb	r2, [r3, #19]
 801b6a2:	4b53      	ldr	r3, [pc, #332]	; (801b7f0 <DHCP_run+0x20c>)
 801b6a4:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801b6a6:	f7ff f9a3 	bl	801a9f0 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801b6aa:	4b4f      	ldr	r3, [pc, #316]	; (801b7e8 <DHCP_run+0x204>)
 801b6ac:	2202      	movs	r2, #2
 801b6ae:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801b6b0:	e095      	b.n	801b7de <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801b6b2:	f000 f8b1 	bl	801b818 <check_DHCP_timeout>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	71fb      	strb	r3, [r7, #7]
         break;
 801b6ba:	e090      	b.n	801b7de <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801b6bc:	79bb      	ldrb	r3, [r7, #6]
 801b6be:	2b05      	cmp	r3, #5
 801b6c0:	d116      	bne.n	801b6f0 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801b6c2:	f000 f909 	bl	801b8d8 <check_DHCP_leasedIP>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d008      	beq.n	801b6de <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801b6cc:	4b4a      	ldr	r3, [pc, #296]	; (801b7f8 <DHCP_run+0x214>)
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	4798      	blx	r3
					reset_DHCP_timeout();
 801b6d2:	f000 f9d9 	bl	801ba88 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801b6d6:	4b44      	ldr	r3, [pc, #272]	; (801b7e8 <DHCP_run+0x204>)
 801b6d8:	2203      	movs	r2, #3
 801b6da:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801b6dc:	e07f      	b.n	801b7de <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801b6de:	f000 f9d3 	bl	801ba88 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801b6e2:	4b46      	ldr	r3, [pc, #280]	; (801b7fc <DHCP_run+0x218>)
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801b6e8:	4b3f      	ldr	r3, [pc, #252]	; (801b7e8 <DHCP_run+0x204>)
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	701a      	strb	r2, [r3, #0]
		break;
 801b6ee:	e076      	b.n	801b7de <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801b6f0:	79bb      	ldrb	r3, [r7, #6]
 801b6f2:	2b06      	cmp	r3, #6
 801b6f4:	d105      	bne.n	801b702 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801b6f6:	f000 f9c7 	bl	801ba88 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801b6fa:	4b3b      	ldr	r3, [pc, #236]	; (801b7e8 <DHCP_run+0x204>)
 801b6fc:	2201      	movs	r2, #1
 801b6fe:	701a      	strb	r2, [r3, #0]
		break;
 801b700:	e06d      	b.n	801b7de <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801b702:	f000 f889 	bl	801b818 <check_DHCP_timeout>
 801b706:	4603      	mov	r3, r0
 801b708:	71fb      	strb	r3, [r7, #7]
		break;
 801b70a:	e068      	b.n	801b7de <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801b70c:	2304      	movs	r3, #4
 801b70e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801b710:	4b3b      	ldr	r3, [pc, #236]	; (801b800 <DHCP_run+0x21c>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b718:	d060      	beq.n	801b7dc <DHCP_run+0x1f8>
 801b71a:	4b39      	ldr	r3, [pc, #228]	; (801b800 <DHCP_run+0x21c>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	089a      	lsrs	r2, r3, #2
 801b720:	4b38      	ldr	r3, [pc, #224]	; (801b804 <DHCP_run+0x220>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	429a      	cmp	r2, r3
 801b726:	d259      	bcs.n	801b7dc <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801b728:	2300      	movs	r3, #0
 801b72a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801b72c:	4b30      	ldr	r3, [pc, #192]	; (801b7f0 <DHCP_run+0x20c>)
 801b72e:	781a      	ldrb	r2, [r3, #0]
 801b730:	4b35      	ldr	r3, [pc, #212]	; (801b808 <DHCP_run+0x224>)
 801b732:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801b734:	4b2e      	ldr	r3, [pc, #184]	; (801b7f0 <DHCP_run+0x20c>)
 801b736:	785a      	ldrb	r2, [r3, #1]
 801b738:	4b33      	ldr	r3, [pc, #204]	; (801b808 <DHCP_run+0x224>)
 801b73a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801b73c:	4b2c      	ldr	r3, [pc, #176]	; (801b7f0 <DHCP_run+0x20c>)
 801b73e:	789a      	ldrb	r2, [r3, #2]
 801b740:	4b31      	ldr	r3, [pc, #196]	; (801b808 <DHCP_run+0x224>)
 801b742:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801b744:	4b2a      	ldr	r3, [pc, #168]	; (801b7f0 <DHCP_run+0x20c>)
 801b746:	78da      	ldrb	r2, [r3, #3]
 801b748:	4b2f      	ldr	r3, [pc, #188]	; (801b808 <DHCP_run+0x224>)
 801b74a:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801b74c:	4b2f      	ldr	r3, [pc, #188]	; (801b80c <DHCP_run+0x228>)
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	3301      	adds	r3, #1
 801b752:	4a2e      	ldr	r2, [pc, #184]	; (801b80c <DHCP_run+0x228>)
 801b754:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801b756:	f7ff f94b 	bl	801a9f0 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801b75a:	f000 f995 	bl	801ba88 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801b75e:	4b22      	ldr	r3, [pc, #136]	; (801b7e8 <DHCP_run+0x204>)
 801b760:	2204      	movs	r2, #4
 801b762:	701a      	strb	r2, [r3, #0]
			}
		break;
 801b764:	e03a      	b.n	801b7dc <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801b766:	2304      	movs	r3, #4
 801b768:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801b76a:	79bb      	ldrb	r3, [r7, #6]
 801b76c:	2b05      	cmp	r3, #5
 801b76e:	d125      	bne.n	801b7bc <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801b770:	4b27      	ldr	r3, [pc, #156]	; (801b810 <DHCP_run+0x22c>)
 801b772:	2200      	movs	r2, #0
 801b774:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801b776:	4b24      	ldr	r3, [pc, #144]	; (801b808 <DHCP_run+0x224>)
 801b778:	781a      	ldrb	r2, [r3, #0]
 801b77a:	4b1d      	ldr	r3, [pc, #116]	; (801b7f0 <DHCP_run+0x20c>)
 801b77c:	781b      	ldrb	r3, [r3, #0]
 801b77e:	429a      	cmp	r2, r3
 801b780:	d111      	bne.n	801b7a6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801b782:	4b21      	ldr	r3, [pc, #132]	; (801b808 <DHCP_run+0x224>)
 801b784:	785a      	ldrb	r2, [r3, #1]
 801b786:	4b1a      	ldr	r3, [pc, #104]	; (801b7f0 <DHCP_run+0x20c>)
 801b788:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d10b      	bne.n	801b7a6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801b78e:	4b1e      	ldr	r3, [pc, #120]	; (801b808 <DHCP_run+0x224>)
 801b790:	789a      	ldrb	r2, [r3, #2]
 801b792:	4b17      	ldr	r3, [pc, #92]	; (801b7f0 <DHCP_run+0x20c>)
 801b794:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801b796:	429a      	cmp	r2, r3
 801b798:	d105      	bne.n	801b7a6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801b79a:	4b1b      	ldr	r3, [pc, #108]	; (801b808 <DHCP_run+0x224>)
 801b79c:	78da      	ldrb	r2, [r3, #3]
 801b79e:	4b14      	ldr	r3, [pc, #80]	; (801b7f0 <DHCP_run+0x20c>)
 801b7a0:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801b7a2:	429a      	cmp	r2, r3
 801b7a4:	d004      	beq.n	801b7b0 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801b7a6:	2303      	movs	r3, #3
 801b7a8:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801b7aa:	4b1a      	ldr	r3, [pc, #104]	; (801b814 <DHCP_run+0x230>)
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801b7b0:	f000 f96a 	bl	801ba88 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801b7b4:	4b0c      	ldr	r3, [pc, #48]	; (801b7e8 <DHCP_run+0x204>)
 801b7b6:	2203      	movs	r2, #3
 801b7b8:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801b7ba:	e010      	b.n	801b7de <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801b7bc:	79bb      	ldrb	r3, [r7, #6]
 801b7be:	2b06      	cmp	r3, #6
 801b7c0:	d105      	bne.n	801b7ce <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801b7c2:	f000 f961 	bl	801ba88 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801b7c6:	4b08      	ldr	r3, [pc, #32]	; (801b7e8 <DHCP_run+0x204>)
 801b7c8:	2201      	movs	r2, #1
 801b7ca:	701a      	strb	r2, [r3, #0]
	   	break;
 801b7cc:	e007      	b.n	801b7de <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801b7ce:	f000 f823 	bl	801b818 <check_DHCP_timeout>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	71fb      	strb	r3, [r7, #7]
	   	break;
 801b7d6:	e002      	b.n	801b7de <DHCP_run+0x1fa>
		default :
   		break;
 801b7d8:	bf00      	nop
 801b7da:	e000      	b.n	801b7de <DHCP_run+0x1fa>
		break;
 801b7dc:	bf00      	nop
	}

	return ret;
 801b7de:	79fb      	ldrb	r3, [r7, #7]
}
 801b7e0:	4618      	mov	r0, r3
 801b7e2:	3708      	adds	r7, #8
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd80      	pop	{r7, pc}
 801b7e8:	20000990 	.word	0x20000990
 801b7ec:	20000971 	.word	0x20000971
 801b7f0:	20000980 	.word	0x20000980
 801b7f4:	2000099c 	.word	0x2000099c
 801b7f8:	20000104 	.word	0x20000104
 801b7fc:	2000010c 	.word	0x2000010c
 801b800:	200000f0 	.word	0x200000f0
 801b804:	20000994 	.word	0x20000994
 801b808:	2000097c 	.word	0x2000097c
 801b80c:	20000998 	.word	0x20000998
 801b810:	20000991 	.word	0x20000991
 801b814:	20000108 	.word	0x20000108

0801b818 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801b818:	b580      	push	{r7, lr}
 801b81a:	b082      	sub	sp, #8
 801b81c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801b81e:	2301      	movs	r3, #1
 801b820:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 801b822:	4b29      	ldr	r3, [pc, #164]	; (801b8c8 <check_DHCP_timeout+0xb0>)
 801b824:	f993 3000 	ldrsb.w	r3, [r3]
 801b828:	2b63      	cmp	r3, #99	; 0x63
 801b82a:	dc2d      	bgt.n	801b888 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 801b82c:	4b27      	ldr	r3, [pc, #156]	; (801b8cc <check_DHCP_timeout+0xb4>)
 801b82e:	681a      	ldr	r2, [r3, #0]
 801b830:	4b27      	ldr	r3, [pc, #156]	; (801b8d0 <check_DHCP_timeout+0xb8>)
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	429a      	cmp	r2, r3
 801b836:	d242      	bcs.n	801b8be <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 801b838:	4b26      	ldr	r3, [pc, #152]	; (801b8d4 <check_DHCP_timeout+0xbc>)
 801b83a:	f993 3000 	ldrsb.w	r3, [r3]
 801b83e:	2b04      	cmp	r3, #4
 801b840:	d00c      	beq.n	801b85c <check_DHCP_timeout+0x44>
 801b842:	2b04      	cmp	r3, #4
 801b844:	dc0d      	bgt.n	801b862 <check_DHCP_timeout+0x4a>
 801b846:	2b01      	cmp	r3, #1
 801b848:	d002      	beq.n	801b850 <check_DHCP_timeout+0x38>
 801b84a:	2b02      	cmp	r3, #2
 801b84c:	d003      	beq.n	801b856 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801b84e:	e008      	b.n	801b862 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 801b850:	f7fe ff08 	bl	801a664 <send_DHCP_DISCOVER>
				break;
 801b854:	e006      	b.n	801b864 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801b856:	f7ff f8cb 	bl	801a9f0 <send_DHCP_REQUEST>
				break;
 801b85a:	e003      	b.n	801b864 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801b85c:	f7ff f8c8 	bl	801a9f0 <send_DHCP_REQUEST>
				break;
 801b860:	e000      	b.n	801b864 <check_DHCP_timeout+0x4c>
				break;
 801b862:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801b864:	4b1a      	ldr	r3, [pc, #104]	; (801b8d0 <check_DHCP_timeout+0xb8>)
 801b866:	2200      	movs	r2, #0
 801b868:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801b86a:	4b19      	ldr	r3, [pc, #100]	; (801b8d0 <check_DHCP_timeout+0xb8>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	3302      	adds	r3, #2
 801b870:	4a16      	ldr	r2, [pc, #88]	; (801b8cc <check_DHCP_timeout+0xb4>)
 801b872:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801b874:	4b14      	ldr	r3, [pc, #80]	; (801b8c8 <check_DHCP_timeout+0xb0>)
 801b876:	f993 3000 	ldrsb.w	r3, [r3]
 801b87a:	b2db      	uxtb	r3, r3
 801b87c:	3301      	adds	r3, #1
 801b87e:	b2db      	uxtb	r3, r3
 801b880:	b25a      	sxtb	r2, r3
 801b882:	4b11      	ldr	r3, [pc, #68]	; (801b8c8 <check_DHCP_timeout+0xb0>)
 801b884:	701a      	strb	r2, [r3, #0]
 801b886:	e01a      	b.n	801b8be <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 801b888:	4b12      	ldr	r3, [pc, #72]	; (801b8d4 <check_DHCP_timeout+0xbc>)
 801b88a:	f993 3000 	ldrsb.w	r3, [r3]
 801b88e:	2b04      	cmp	r3, #4
 801b890:	d00c      	beq.n	801b8ac <check_DHCP_timeout+0x94>
 801b892:	2b04      	cmp	r3, #4
 801b894:	dc10      	bgt.n	801b8b8 <check_DHCP_timeout+0xa0>
 801b896:	2b01      	cmp	r3, #1
 801b898:	d002      	beq.n	801b8a0 <check_DHCP_timeout+0x88>
 801b89a:	2b02      	cmp	r3, #2
 801b89c:	d006      	beq.n	801b8ac <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 801b89e:	e00b      	b.n	801b8b8 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 801b8a0:	4b0c      	ldr	r3, [pc, #48]	; (801b8d4 <check_DHCP_timeout+0xbc>)
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	71fb      	strb	r3, [r7, #7]
				break;
 801b8aa:	e006      	b.n	801b8ba <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 801b8ac:	f7fe feda 	bl	801a664 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 801b8b0:	4b08      	ldr	r3, [pc, #32]	; (801b8d4 <check_DHCP_timeout+0xbc>)
 801b8b2:	2201      	movs	r2, #1
 801b8b4:	701a      	strb	r2, [r3, #0]
				break;
 801b8b6:	e000      	b.n	801b8ba <check_DHCP_timeout+0xa2>
				break;
 801b8b8:	bf00      	nop
		}
		reset_DHCP_timeout();
 801b8ba:	f000 f8e5 	bl	801ba88 <reset_DHCP_timeout>
	}
	return ret;
 801b8be:	79fb      	ldrb	r3, [r7, #7]
}
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	3708      	adds	r7, #8
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	20000991 	.word	0x20000991
 801b8cc:	200000f4 	.word	0x200000f4
 801b8d0:	20000994 	.word	0x20000994
 801b8d4:	20000990 	.word	0x20000990

0801b8d8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b084      	sub	sp, #16
 801b8dc:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801b8de:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801b8e2:	f7fc fca7 	bl	8018234 <WIZCHIP_READ>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801b8ea:	2103      	movs	r1, #3
 801b8ec:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801b8f0:	f7fc fcec 	bl	80182cc <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801b8f4:	4b15      	ldr	r3, [pc, #84]	; (801b94c <check_DHCP_leasedIP+0x74>)
 801b8f6:	7818      	ldrb	r0, [r3, #0]
 801b8f8:	f241 3388 	movw	r3, #5000	; 0x1388
 801b8fc:	9300      	str	r3, [sp, #0]
 801b8fe:	4b14      	ldr	r3, [pc, #80]	; (801b950 <check_DHCP_leasedIP+0x78>)
 801b900:	2211      	movs	r2, #17
 801b902:	4914      	ldr	r1, [pc, #80]	; (801b954 <check_DHCP_leasedIP+0x7c>)
 801b904:	f7fd fc64 	bl	80191d0 <sendto>
 801b908:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801b90a:	79fb      	ldrb	r3, [r7, #7]
 801b90c:	4619      	mov	r1, r3
 801b90e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801b912:	f7fc fcdb 	bl	80182cc <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801b916:	683b      	ldr	r3, [r7, #0]
 801b918:	f113 0f0d 	cmn.w	r3, #13
 801b91c:	d101      	bne.n	801b922 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801b91e:	2301      	movs	r3, #1
 801b920:	e010      	b.n	801b944 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801b922:	f7ff faef 	bl	801af04 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801b926:	4b0c      	ldr	r3, [pc, #48]	; (801b958 <check_DHCP_leasedIP+0x80>)
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801b92c:	e003      	b.n	801b936 <check_DHCP_leasedIP+0x5e>

			delay(200);
 801b92e:	4b0b      	ldr	r3, [pc, #44]	; (801b95c <check_DHCP_leasedIP+0x84>)
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	20c8      	movs	r0, #200	; 0xc8
 801b934:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801b936:	4b08      	ldr	r3, [pc, #32]	; (801b958 <check_DHCP_leasedIP+0x80>)
 801b938:	681a      	ldr	r2, [r3, #0]
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	1ad3      	subs	r3, r2, r3
 801b93e:	2b01      	cmp	r3, #1
 801b940:	d9f5      	bls.n	801b92e <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801b942:	2300      	movs	r3, #0
	}
}	
 801b944:	4618      	mov	r0, r3
 801b946:	3708      	adds	r7, #8
 801b948:	46bd      	mov	sp, r7
 801b94a:	bd80      	pop	{r7, pc}
 801b94c:	20000971 	.word	0x20000971
 801b950:	20000980 	.word	0x20000980
 801b954:	080326d4 	.word	0x080326d4
 801b958:	20000994 	.word	0x20000994
 801b95c:	20000110 	.word	0x20000110

0801b960 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b084      	sub	sp, #16
 801b964:	af00      	add	r7, sp, #0
 801b966:	4603      	mov	r3, r0
 801b968:	6039      	str	r1, [r7, #0]
 801b96a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801b96c:	2300      	movs	r3, #0
 801b96e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801b970:	2206      	movs	r2, #6
 801b972:	493f      	ldr	r1, [pc, #252]	; (801ba70 <DHCP_init+0x110>)
 801b974:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801b978:	f7fc fcf6 	bl	8018368 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801b97c:	4b3c      	ldr	r3, [pc, #240]	; (801ba70 <DHCP_init+0x110>)
 801b97e:	781a      	ldrb	r2, [r3, #0]
 801b980:	4b3b      	ldr	r3, [pc, #236]	; (801ba70 <DHCP_init+0x110>)
 801b982:	785b      	ldrb	r3, [r3, #1]
 801b984:	4313      	orrs	r3, r2
 801b986:	b2da      	uxtb	r2, r3
 801b988:	4b39      	ldr	r3, [pc, #228]	; (801ba70 <DHCP_init+0x110>)
 801b98a:	789b      	ldrb	r3, [r3, #2]
 801b98c:	4313      	orrs	r3, r2
 801b98e:	b2da      	uxtb	r2, r3
 801b990:	4b37      	ldr	r3, [pc, #220]	; (801ba70 <DHCP_init+0x110>)
 801b992:	78db      	ldrb	r3, [r3, #3]
 801b994:	4313      	orrs	r3, r2
 801b996:	b2da      	uxtb	r2, r3
 801b998:	4b35      	ldr	r3, [pc, #212]	; (801ba70 <DHCP_init+0x110>)
 801b99a:	791b      	ldrb	r3, [r3, #4]
 801b99c:	4313      	orrs	r3, r2
 801b99e:	b2da      	uxtb	r2, r3
 801b9a0:	4b33      	ldr	r3, [pc, #204]	; (801ba70 <DHCP_init+0x110>)
 801b9a2:	795b      	ldrb	r3, [r3, #5]
 801b9a4:	4313      	orrs	r3, r2
 801b9a6:	b2db      	uxtb	r3, r3
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d117      	bne.n	801b9dc <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801b9ac:	4b30      	ldr	r3, [pc, #192]	; (801ba70 <DHCP_init+0x110>)
 801b9ae:	2200      	movs	r2, #0
 801b9b0:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801b9b2:	4b2f      	ldr	r3, [pc, #188]	; (801ba70 <DHCP_init+0x110>)
 801b9b4:	2208      	movs	r2, #8
 801b9b6:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801b9b8:	4b2d      	ldr	r3, [pc, #180]	; (801ba70 <DHCP_init+0x110>)
 801b9ba:	22dc      	movs	r2, #220	; 0xdc
 801b9bc:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801b9be:	4b2c      	ldr	r3, [pc, #176]	; (801ba70 <DHCP_init+0x110>)
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801b9c4:	4b2a      	ldr	r3, [pc, #168]	; (801ba70 <DHCP_init+0x110>)
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801b9ca:	4b29      	ldr	r3, [pc, #164]	; (801ba70 <DHCP_init+0x110>)
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801b9d0:	2206      	movs	r2, #6
 801b9d2:	4927      	ldr	r1, [pc, #156]	; (801ba70 <DHCP_init+0x110>)
 801b9d4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801b9d8:	f7fc fd26 	bl	8018428 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801b9dc:	4a25      	ldr	r2, [pc, #148]	; (801ba74 <DHCP_init+0x114>)
 801b9de:	79fb      	ldrb	r3, [r7, #7]
 801b9e0:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801b9e2:	4a25      	ldr	r2, [pc, #148]	; (801ba78 <DHCP_init+0x118>)
 801b9e4:	683b      	ldr	r3, [r7, #0]
 801b9e6:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801b9e8:	4b24      	ldr	r3, [pc, #144]	; (801ba7c <DHCP_init+0x11c>)
 801b9ea:	4a25      	ldr	r2, [pc, #148]	; (801ba80 <DHCP_init+0x120>)
 801b9ec:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801b9ee:	4b20      	ldr	r3, [pc, #128]	; (801ba70 <DHCP_init+0x110>)
 801b9f0:	78db      	ldrb	r3, [r3, #3]
 801b9f2:	461a      	mov	r2, r3
 801b9f4:	4b21      	ldr	r3, [pc, #132]	; (801ba7c <DHCP_init+0x11c>)
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	4413      	add	r3, r2
 801b9fa:	4a20      	ldr	r2, [pc, #128]	; (801ba7c <DHCP_init+0x11c>)
 801b9fc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801b9fe:	4b1c      	ldr	r3, [pc, #112]	; (801ba70 <DHCP_init+0x110>)
 801ba00:	791b      	ldrb	r3, [r3, #4]
 801ba02:	461a      	mov	r2, r3
 801ba04:	4b1d      	ldr	r3, [pc, #116]	; (801ba7c <DHCP_init+0x11c>)
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	4413      	add	r3, r2
 801ba0a:	4a1c      	ldr	r2, [pc, #112]	; (801ba7c <DHCP_init+0x11c>)
 801ba0c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801ba0e:	4b18      	ldr	r3, [pc, #96]	; (801ba70 <DHCP_init+0x110>)
 801ba10:	795b      	ldrb	r3, [r3, #5]
 801ba12:	461a      	mov	r2, r3
 801ba14:	4b19      	ldr	r3, [pc, #100]	; (801ba7c <DHCP_init+0x11c>)
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	4413      	add	r3, r2
 801ba1a:	4a18      	ldr	r2, [pc, #96]	; (801ba7c <DHCP_init+0x11c>)
 801ba1c:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801ba1e:	4b14      	ldr	r3, [pc, #80]	; (801ba70 <DHCP_init+0x110>)
 801ba20:	78da      	ldrb	r2, [r3, #3]
 801ba22:	4b13      	ldr	r3, [pc, #76]	; (801ba70 <DHCP_init+0x110>)
 801ba24:	791b      	ldrb	r3, [r3, #4]
 801ba26:	4053      	eors	r3, r2
 801ba28:	b2da      	uxtb	r2, r3
 801ba2a:	4b11      	ldr	r3, [pc, #68]	; (801ba70 <DHCP_init+0x110>)
 801ba2c:	795b      	ldrb	r3, [r3, #5]
 801ba2e:	4053      	eors	r3, r2
 801ba30:	b2db      	uxtb	r3, r3
 801ba32:	461a      	mov	r2, r3
 801ba34:	4b11      	ldr	r3, [pc, #68]	; (801ba7c <DHCP_init+0x11c>)
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	4413      	add	r3, r2
 801ba3a:	4a10      	ldr	r2, [pc, #64]	; (801ba7c <DHCP_init+0x11c>)
 801ba3c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801ba3e:	f107 030c 	add.w	r3, r7, #12
 801ba42:	2204      	movs	r2, #4
 801ba44:	4619      	mov	r1, r3
 801ba46:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801ba4a:	f7fc fced 	bl	8018428 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801ba4e:	f107 030c 	add.w	r3, r7, #12
 801ba52:	2204      	movs	r2, #4
 801ba54:	4619      	mov	r1, r3
 801ba56:	f44f 7080 	mov.w	r0, #256	; 0x100
 801ba5a:	f7fc fce5 	bl	8018428 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801ba5e:	f000 f813 	bl	801ba88 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801ba62:	4b08      	ldr	r3, [pc, #32]	; (801ba84 <DHCP_init+0x124>)
 801ba64:	2200      	movs	r2, #0
 801ba66:	701a      	strb	r2, [r3, #0]
}
 801ba68:	bf00      	nop
 801ba6a:	3710      	adds	r7, #16
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	bd80      	pop	{r7, pc}
 801ba70:	200009a0 	.word	0x200009a0
 801ba74:	20000971 	.word	0x20000971
 801ba78:	2000099c 	.word	0x2000099c
 801ba7c:	20000998 	.word	0x20000998
 801ba80:	12345678 	.word	0x12345678
 801ba84:	20000990 	.word	0x20000990

0801ba88 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801ba88:	b480      	push	{r7}
 801ba8a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801ba8c:	4b06      	ldr	r3, [pc, #24]	; (801baa8 <reset_DHCP_timeout+0x20>)
 801ba8e:	2200      	movs	r2, #0
 801ba90:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ba92:	4b06      	ldr	r3, [pc, #24]	; (801baac <reset_DHCP_timeout+0x24>)
 801ba94:	2202      	movs	r2, #2
 801ba96:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801ba98:	4b05      	ldr	r3, [pc, #20]	; (801bab0 <reset_DHCP_timeout+0x28>)
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	701a      	strb	r2, [r3, #0]
}
 801ba9e:	bf00      	nop
 801baa0:	46bd      	mov	sp, r7
 801baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa6:	4770      	bx	lr
 801baa8:	20000994 	.word	0x20000994
 801baac:	200000f4 	.word	0x200000f4
 801bab0:	20000991 	.word	0x20000991

0801bab4 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801bab4:	b480      	push	{r7}
 801bab6:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801bab8:	4b04      	ldr	r3, [pc, #16]	; (801bacc <DHCP_time_handler+0x18>)
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	3301      	adds	r3, #1
 801babe:	4a03      	ldr	r2, [pc, #12]	; (801bacc <DHCP_time_handler+0x18>)
 801bac0:	6013      	str	r3, [r2, #0]
}
 801bac2:	bf00      	nop
 801bac4:	46bd      	mov	sp, r7
 801bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baca:	4770      	bx	lr
 801bacc:	20000994 	.word	0x20000994

0801bad0 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801bad0:	b480      	push	{r7}
 801bad2:	b083      	sub	sp, #12
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801bad8:	4b0c      	ldr	r3, [pc, #48]	; (801bb0c <getIPfromDHCP+0x3c>)
 801bada:	781a      	ldrb	r2, [r3, #0]
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	3301      	adds	r3, #1
 801bae4:	4a09      	ldr	r2, [pc, #36]	; (801bb0c <getIPfromDHCP+0x3c>)
 801bae6:	7852      	ldrb	r2, [r2, #1]
 801bae8:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	3302      	adds	r3, #2
 801baee:	4a07      	ldr	r2, [pc, #28]	; (801bb0c <getIPfromDHCP+0x3c>)
 801baf0:	7892      	ldrb	r2, [r2, #2]
 801baf2:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	3303      	adds	r3, #3
 801baf8:	4a04      	ldr	r2, [pc, #16]	; (801bb0c <getIPfromDHCP+0x3c>)
 801bafa:	78d2      	ldrb	r2, [r2, #3]
 801bafc:	701a      	strb	r2, [r3, #0]
}
 801bafe:	bf00      	nop
 801bb00:	370c      	adds	r7, #12
 801bb02:	46bd      	mov	sp, r7
 801bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb08:	4770      	bx	lr
 801bb0a:	bf00      	nop
 801bb0c:	20000980 	.word	0x20000980

0801bb10 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801bb10:	b480      	push	{r7}
 801bb12:	b083      	sub	sp, #12
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801bb18:	4b0c      	ldr	r3, [pc, #48]	; (801bb4c <getGWfromDHCP+0x3c>)
 801bb1a:	781a      	ldrb	r2, [r3, #0]
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	3301      	adds	r3, #1
 801bb24:	4a09      	ldr	r2, [pc, #36]	; (801bb4c <getGWfromDHCP+0x3c>)
 801bb26:	7852      	ldrb	r2, [r2, #1]
 801bb28:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	3302      	adds	r3, #2
 801bb2e:	4a07      	ldr	r2, [pc, #28]	; (801bb4c <getGWfromDHCP+0x3c>)
 801bb30:	7892      	ldrb	r2, [r2, #2]
 801bb32:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	3303      	adds	r3, #3
 801bb38:	4a04      	ldr	r2, [pc, #16]	; (801bb4c <getGWfromDHCP+0x3c>)
 801bb3a:	78d2      	ldrb	r2, [r2, #3]
 801bb3c:	701a      	strb	r2, [r3, #0]
}
 801bb3e:	bf00      	nop
 801bb40:	370c      	adds	r7, #12
 801bb42:	46bd      	mov	sp, r7
 801bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb48:	4770      	bx	lr
 801bb4a:	bf00      	nop
 801bb4c:	20000984 	.word	0x20000984

0801bb50 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801bb50:	b480      	push	{r7}
 801bb52:	b083      	sub	sp, #12
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801bb58:	4b0c      	ldr	r3, [pc, #48]	; (801bb8c <getSNfromDHCP+0x3c>)
 801bb5a:	781a      	ldrb	r2, [r3, #0]
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	3301      	adds	r3, #1
 801bb64:	4a09      	ldr	r2, [pc, #36]	; (801bb8c <getSNfromDHCP+0x3c>)
 801bb66:	7852      	ldrb	r2, [r2, #1]
 801bb68:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	3302      	adds	r3, #2
 801bb6e:	4a07      	ldr	r2, [pc, #28]	; (801bb8c <getSNfromDHCP+0x3c>)
 801bb70:	7892      	ldrb	r2, [r2, #2]
 801bb72:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	3303      	adds	r3, #3
 801bb78:	4a04      	ldr	r2, [pc, #16]	; (801bb8c <getSNfromDHCP+0x3c>)
 801bb7a:	78d2      	ldrb	r2, [r2, #3]
 801bb7c:	701a      	strb	r2, [r3, #0]
}
 801bb7e:	bf00      	nop
 801bb80:	370c      	adds	r7, #12
 801bb82:	46bd      	mov	sp, r7
 801bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb88:	4770      	bx	lr
 801bb8a:	bf00      	nop
 801bb8c:	20000988 	.word	0x20000988

0801bb90 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801bb90:	b480      	push	{r7}
 801bb92:	b083      	sub	sp, #12
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801bb98:	4b0c      	ldr	r3, [pc, #48]	; (801bbcc <getDNSfromDHCP+0x3c>)
 801bb9a:	781a      	ldrb	r2, [r3, #0]
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	3301      	adds	r3, #1
 801bba4:	4a09      	ldr	r2, [pc, #36]	; (801bbcc <getDNSfromDHCP+0x3c>)
 801bba6:	7852      	ldrb	r2, [r2, #1]
 801bba8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	3302      	adds	r3, #2
 801bbae:	4a07      	ldr	r2, [pc, #28]	; (801bbcc <getDNSfromDHCP+0x3c>)
 801bbb0:	7892      	ldrb	r2, [r2, #2]
 801bbb2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	3303      	adds	r3, #3
 801bbb8:	4a04      	ldr	r2, [pc, #16]	; (801bbcc <getDNSfromDHCP+0x3c>)
 801bbba:	78d2      	ldrb	r2, [r2, #3]
 801bbbc:	701a      	strb	r2, [r3, #0]
}
 801bbbe:	bf00      	nop
 801bbc0:	370c      	adds	r7, #12
 801bbc2:	46bd      	mov	sp, r7
 801bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc8:	4770      	bx	lr
 801bbca:	bf00      	nop
 801bbcc:	2000098c 	.word	0x2000098c

0801bbd0 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801bbd0:	b480      	push	{r7}
 801bbd2:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801bbd4:	4b03      	ldr	r3, [pc, #12]	; (801bbe4 <getDHCPLeasetime+0x14>)
 801bbd6:	681b      	ldr	r3, [r3, #0]
}
 801bbd8:	4618      	mov	r0, r3
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe0:	4770      	bx	lr
 801bbe2:	bf00      	nop
 801bbe4:	200000f0 	.word	0x200000f0

0801bbe8 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801bbe8:	b480      	push	{r7}
 801bbea:	b083      	sub	sp, #12
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	4603      	mov	r3, r0
 801bbf0:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801bbf2:	79fb      	ldrb	r3, [r7, #7]
 801bbf4:	f003 030f 	and.w	r3, r3, #15
 801bbf8:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801bbfa:	79fb      	ldrb	r3, [r7, #7]
 801bbfc:	2b09      	cmp	r3, #9
 801bbfe:	d803      	bhi.n	801bc08 <NibbleToHex+0x20>
    return nibble + '0';
 801bc00:	79fb      	ldrb	r3, [r7, #7]
 801bc02:	3330      	adds	r3, #48	; 0x30
 801bc04:	b2db      	uxtb	r3, r3
 801bc06:	e002      	b.n	801bc0e <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801bc08:	79fb      	ldrb	r3, [r7, #7]
 801bc0a:	3337      	adds	r3, #55	; 0x37
 801bc0c:	b2db      	uxtb	r3, r3
}
 801bc0e:	4618      	mov	r0, r3
 801bc10:	370c      	adds	r7, #12
 801bc12:	46bd      	mov	sp, r7
 801bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc18:	4770      	bx	lr

0801bc1a <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801bc1a:	b480      	push	{r7}
 801bc1c:	b085      	sub	sp, #20
 801bc1e:	af00      	add	r7, sp, #0
 801bc20:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	1c5a      	adds	r2, r3, #1
 801bc26:	607a      	str	r2, [r7, #4]
 801bc28:	781b      	ldrb	r3, [r3, #0]
 801bc2a:	b29b      	uxth	r3, r3
 801bc2c:	021b      	lsls	r3, r3, #8
 801bc2e:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	781b      	ldrb	r3, [r3, #0]
 801bc34:	b29a      	uxth	r2, r3
 801bc36:	89fb      	ldrh	r3, [r7, #14]
 801bc38:	4413      	add	r3, r2
 801bc3a:	81fb      	strh	r3, [r7, #14]
	return i;
 801bc3c:	89fb      	ldrh	r3, [r7, #14]
}
 801bc3e:	4618      	mov	r0, r3
 801bc40:	3714      	adds	r7, #20
 801bc42:	46bd      	mov	sp, r7
 801bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc48:	4770      	bx	lr

0801bc4a <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801bc4a:	b480      	push	{r7}
 801bc4c:	b083      	sub	sp, #12
 801bc4e:	af00      	add	r7, sp, #0
 801bc50:	6078      	str	r0, [r7, #4]
 801bc52:	460b      	mov	r3, r1
 801bc54:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801bc56:	887b      	ldrh	r3, [r7, #2]
 801bc58:	0a1b      	lsrs	r3, r3, #8
 801bc5a:	b299      	uxth	r1, r3
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	1c5a      	adds	r2, r3, #1
 801bc60:	607a      	str	r2, [r7, #4]
 801bc62:	b2ca      	uxtb	r2, r1
 801bc64:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	1c5a      	adds	r2, r3, #1
 801bc6a:	607a      	str	r2, [r7, #4]
 801bc6c:	887a      	ldrh	r2, [r7, #2]
 801bc6e:	b2d2      	uxtb	r2, r2
 801bc70:	701a      	strb	r2, [r3, #0]
	return s;
 801bc72:	687b      	ldr	r3, [r7, #4]
}
 801bc74:	4618      	mov	r0, r3
 801bc76:	370c      	adds	r7, #12
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7e:	4770      	bx	lr

0801bc80 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801bc80:	b480      	push	{r7}
 801bc82:	b08b      	sub	sp, #44	; 0x2c
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	60f8      	str	r0, [r7, #12]
 801bc88:	60b9      	str	r1, [r7, #8]
 801bc8a:	607a      	str	r2, [r7, #4]
 801bc8c:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801bc8e:	2300      	movs	r3, #0
 801bc90:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801bc92:	2300      	movs	r3, #0
 801bc94:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801bc96:	2300      	movs	r3, #0
 801bc98:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801bc9a:	68bb      	ldr	r3, [r7, #8]
 801bc9c:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801bc9e:	6a3b      	ldr	r3, [r7, #32]
 801bca0:	1c5a      	adds	r2, r3, #1
 801bca2:	623a      	str	r2, [r7, #32]
 801bca4:	781b      	ldrb	r3, [r3, #0]
 801bca6:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 801bca8:	69bb      	ldr	r3, [r7, #24]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d102      	bne.n	801bcb4 <parse_name+0x34>
 801bcae:	69fb      	ldr	r3, [r7, #28]
 801bcb0:	3301      	adds	r3, #1
 801bcb2:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801bcb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bcb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bcba:	2bc0      	cmp	r3, #192	; 0xc0
 801bcbc:	d117      	bne.n	801bcee <parse_name+0x6e>
		{
			if (!indirect)
 801bcbe:	69bb      	ldr	r3, [r7, #24]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d102      	bne.n	801bcca <parse_name+0x4a>
				clen++;
 801bcc4:	69fb      	ldr	r3, [r7, #28]
 801bcc6:	3301      	adds	r3, #1
 801bcc8:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801bcca:	2301      	movs	r3, #1
 801bccc:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801bcce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bcd0:	021b      	lsls	r3, r3, #8
 801bcd2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801bcd6:	6a3a      	ldr	r2, [r7, #32]
 801bcd8:	7812      	ldrb	r2, [r2, #0]
 801bcda:	4413      	add	r3, r2
 801bcdc:	461a      	mov	r2, r3
 801bcde:	68fb      	ldr	r3, [r7, #12]
 801bce0:	4413      	add	r3, r2
 801bce2:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801bce4:	6a3b      	ldr	r3, [r7, #32]
 801bce6:	1c5a      	adds	r2, r3, #1
 801bce8:	623a      	str	r2, [r7, #32]
 801bcea:	781b      	ldrb	r3, [r3, #0]
 801bcec:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801bcee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d02b      	beq.n	801bd4c <parse_name+0xcc>
			break;

		len -= slen + 1;
 801bcf4:	887a      	ldrh	r2, [r7, #2]
 801bcf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bcf8:	1ad3      	subs	r3, r2, r3
 801bcfa:	b29b      	uxth	r3, r3
 801bcfc:	3b01      	subs	r3, #1
 801bcfe:	b29b      	uxth	r3, r3
 801bd00:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801bd02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	da02      	bge.n	801bd10 <parse_name+0x90>
 801bd0a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd0e:	e038      	b.n	801bd82 <parse_name+0x102>

		if (!indirect) clen += slen;
 801bd10:	69bb      	ldr	r3, [r7, #24]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d10c      	bne.n	801bd30 <parse_name+0xb0>
 801bd16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bd18:	69fa      	ldr	r2, [r7, #28]
 801bd1a:	4413      	add	r3, r2
 801bd1c:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801bd1e:	e007      	b.n	801bd30 <parse_name+0xb0>
 801bd20:	6a3a      	ldr	r2, [r7, #32]
 801bd22:	1c53      	adds	r3, r2, #1
 801bd24:	623b      	str	r3, [r7, #32]
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	1c59      	adds	r1, r3, #1
 801bd2a:	6079      	str	r1, [r7, #4]
 801bd2c:	7812      	ldrb	r2, [r2, #0]
 801bd2e:	701a      	strb	r2, [r3, #0]
 801bd30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bd32:	1e5a      	subs	r2, r3, #1
 801bd34:	84fa      	strh	r2, [r7, #38]	; 0x26
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d1f2      	bne.n	801bd20 <parse_name+0xa0>
		*buf++ = '.';
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	1c5a      	adds	r2, r3, #1
 801bd3e:	607a      	str	r2, [r7, #4]
 801bd40:	222e      	movs	r2, #46	; 0x2e
 801bd42:	701a      	strb	r2, [r3, #0]
		nseg++;
 801bd44:	697b      	ldr	r3, [r7, #20]
 801bd46:	3301      	adds	r3, #1
 801bd48:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801bd4a:	e7a8      	b.n	801bc9e <parse_name+0x1e>
			break;
 801bd4c:	bf00      	nop
	}

	if (nseg == 0)
 801bd4e:	697b      	ldr	r3, [r7, #20]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d10a      	bne.n	801bd6a <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	1c5a      	adds	r2, r3, #1
 801bd58:	607a      	str	r2, [r7, #4]
 801bd5a:	222e      	movs	r2, #46	; 0x2e
 801bd5c:	701a      	strb	r2, [r3, #0]
		len--;
 801bd5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801bd62:	b29b      	uxth	r3, r3
 801bd64:	3b01      	subs	r3, #1
 801bd66:	b29b      	uxth	r3, r3
 801bd68:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	1c5a      	adds	r2, r3, #1
 801bd6e:	607a      	str	r2, [r7, #4]
 801bd70:	2200      	movs	r2, #0
 801bd72:	701a      	strb	r2, [r3, #0]
	len--;
 801bd74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801bd78:	b29b      	uxth	r3, r3
 801bd7a:	3b01      	subs	r3, #1
 801bd7c:	b29b      	uxth	r3, r3
 801bd7e:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801bd80:	69fb      	ldr	r3, [r7, #28]
}
 801bd82:	4618      	mov	r0, r3
 801bd84:	372c      	adds	r7, #44	; 0x2c
 801bd86:	46bd      	mov	sp, r7
 801bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8c:	4770      	bx	lr

0801bd8e <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801bd8e:	b580      	push	{r7, lr}
 801bd90:	b0b4      	sub	sp, #208	; 0xd0
 801bd92:	af00      	add	r7, sp, #0
 801bd94:	6078      	str	r0, [r7, #4]
 801bd96:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801bd98:	f107 020c 	add.w	r2, r7, #12
 801bd9c:	23c0      	movs	r3, #192	; 0xc0
 801bd9e:	6839      	ldr	r1, [r7, #0]
 801bda0:	6878      	ldr	r0, [r7, #4]
 801bda2:	f7ff ff6d 	bl	801bc80 <parse_name>
 801bda6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 801bdaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801bdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdb2:	d101      	bne.n	801bdb8 <dns_question+0x2a>
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	e00b      	b.n	801bdd0 <dns_question+0x42>

	cp += len;
 801bdb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801bdbc:	683a      	ldr	r2, [r7, #0]
 801bdbe:	4413      	add	r3, r2
 801bdc0:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801bdc2:	683b      	ldr	r3, [r7, #0]
 801bdc4:	3302      	adds	r3, #2
 801bdc6:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	3302      	adds	r3, #2
 801bdcc:	603b      	str	r3, [r7, #0]

	return cp;
 801bdce:	683b      	ldr	r3, [r7, #0]
}
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	37d0      	adds	r7, #208	; 0xd0
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	bd80      	pop	{r7, pc}

0801bdd8 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b0b6      	sub	sp, #216	; 0xd8
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	60f8      	str	r0, [r7, #12]
 801bde0:	60b9      	str	r1, [r7, #8]
 801bde2:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801bde4:	f107 0210 	add.w	r2, r7, #16
 801bde8:	23c0      	movs	r3, #192	; 0xc0
 801bdea:	68b9      	ldr	r1, [r7, #8]
 801bdec:	68f8      	ldr	r0, [r7, #12]
 801bdee:	f7ff ff47 	bl	801bc80 <parse_name>
 801bdf2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 801bdf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdfe:	d101      	bne.n	801be04 <dns_answer+0x2c>
 801be00:	2300      	movs	r3, #0
 801be02:	e0f9      	b.n	801bff8 <dns_answer+0x220>

	cp += len;
 801be04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801be08:	68ba      	ldr	r2, [r7, #8]
 801be0a:	4413      	add	r3, r2
 801be0c:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801be0e:	68b8      	ldr	r0, [r7, #8]
 801be10:	f7ff ff03 	bl	801bc1a <get16>
 801be14:	4603      	mov	r3, r0
 801be16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 801be1a:	68bb      	ldr	r3, [r7, #8]
 801be1c:	3302      	adds	r3, #2
 801be1e:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801be20:	68bb      	ldr	r3, [r7, #8]
 801be22:	3302      	adds	r3, #2
 801be24:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801be26:	68bb      	ldr	r3, [r7, #8]
 801be28:	3304      	adds	r3, #4
 801be2a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801be2c:	68bb      	ldr	r3, [r7, #8]
 801be2e:	3302      	adds	r3, #2
 801be30:	60bb      	str	r3, [r7, #8]


	switch (type)
 801be32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be36:	2b10      	cmp	r3, #16
 801be38:	f000 80da 	beq.w	801bff0 <dns_answer+0x218>
 801be3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be40:	2b10      	cmp	r3, #16
 801be42:	f300 80d7 	bgt.w	801bff4 <dns_answer+0x21c>
 801be46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be4a:	2b0f      	cmp	r3, #15
 801be4c:	d07d      	beq.n	801bf4a <dns_answer+0x172>
 801be4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be52:	2b0f      	cmp	r3, #15
 801be54:	f300 80ce 	bgt.w	801bff4 <dns_answer+0x21c>
 801be58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be5c:	2b0c      	cmp	r3, #12
 801be5e:	dc26      	bgt.n	801beae <dns_answer+0xd6>
 801be60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be64:	2b00      	cmp	r3, #0
 801be66:	f340 80c5 	ble.w	801bff4 <dns_answer+0x21c>
 801be6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be6e:	2201      	movs	r2, #1
 801be70:	fa02 f303 	lsl.w	r3, r2, r3
 801be74:	f241 32a4 	movw	r2, #5028	; 0x13a4
 801be78:	401a      	ands	r2, r3
 801be7a:	2a00      	cmp	r2, #0
 801be7c:	bf14      	ite	ne
 801be7e:	2201      	movne	r2, #1
 801be80:	2200      	moveq	r2, #0
 801be82:	b2d2      	uxtb	r2, r2
 801be84:	2a00      	cmp	r2, #0
 801be86:	d133      	bne.n	801bef0 <dns_answer+0x118>
 801be88:	f003 0240 	and.w	r2, r3, #64	; 0x40
 801be8c:	2a00      	cmp	r2, #0
 801be8e:	bf14      	ite	ne
 801be90:	2201      	movne	r2, #1
 801be92:	2200      	moveq	r2, #0
 801be94:	b2d2      	uxtb	r2, r2
 801be96:	2a00      	cmp	r2, #0
 801be98:	d170      	bne.n	801bf7c <dns_answer+0x1a4>
 801be9a:	f003 0302 	and.w	r3, r3, #2
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	bf14      	ite	ne
 801bea2:	2301      	movne	r3, #1
 801bea4:	2300      	moveq	r3, #0
 801bea6:	b2db      	uxtb	r3, r3
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d105      	bne.n	801beb8 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801beac:	e0a2      	b.n	801bff4 <dns_answer+0x21c>
	switch (type)
 801beae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801beb2:	2b0d      	cmp	r3, #13
 801beb4:	d032      	beq.n	801bf1c <dns_answer+0x144>
		break;
 801beb6:	e09d      	b.n	801bff4 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801beb8:	68bb      	ldr	r3, [r7, #8]
 801beba:	1c5a      	adds	r2, r3, #1
 801bebc:	60ba      	str	r2, [r7, #8]
 801bebe:	781a      	ldrb	r2, [r3, #0]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801bec4:	68bb      	ldr	r3, [r7, #8]
 801bec6:	1c5a      	adds	r2, r3, #1
 801bec8:	60ba      	str	r2, [r7, #8]
 801beca:	687a      	ldr	r2, [r7, #4]
 801becc:	3201      	adds	r2, #1
 801bece:	781b      	ldrb	r3, [r3, #0]
 801bed0:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801bed2:	68bb      	ldr	r3, [r7, #8]
 801bed4:	1c5a      	adds	r2, r3, #1
 801bed6:	60ba      	str	r2, [r7, #8]
 801bed8:	687a      	ldr	r2, [r7, #4]
 801beda:	3202      	adds	r2, #2
 801bedc:	781b      	ldrb	r3, [r3, #0]
 801bede:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801bee0:	68bb      	ldr	r3, [r7, #8]
 801bee2:	1c5a      	adds	r2, r3, #1
 801bee4:	60ba      	str	r2, [r7, #8]
 801bee6:	687a      	ldr	r2, [r7, #4]
 801bee8:	3203      	adds	r2, #3
 801beea:	781b      	ldrb	r3, [r3, #0]
 801beec:	7013      	strb	r3, [r2, #0]
		break;
 801beee:	e082      	b.n	801bff6 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801bef0:	f107 0210 	add.w	r2, r7, #16
 801bef4:	23c0      	movs	r3, #192	; 0xc0
 801bef6:	68b9      	ldr	r1, [r7, #8]
 801bef8:	68f8      	ldr	r0, [r7, #12]
 801befa:	f7ff fec1 	bl	801bc80 <parse_name>
 801befe:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801bf02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf0a:	d101      	bne.n	801bf10 <dns_answer+0x138>
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	e073      	b.n	801bff8 <dns_answer+0x220>
		cp += len;
 801bf10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bf14:	68ba      	ldr	r2, [r7, #8]
 801bf16:	4413      	add	r3, r2
 801bf18:	60bb      	str	r3, [r7, #8]
		break;
 801bf1a:	e06c      	b.n	801bff6 <dns_answer+0x21e>
		len = *cp++;
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	1c5a      	adds	r2, r3, #1
 801bf20:	60ba      	str	r2, [r7, #8]
 801bf22:	781b      	ldrb	r3, [r3, #0]
 801bf24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801bf28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bf2c:	68ba      	ldr	r2, [r7, #8]
 801bf2e:	4413      	add	r3, r2
 801bf30:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801bf32:	68bb      	ldr	r3, [r7, #8]
 801bf34:	1c5a      	adds	r2, r3, #1
 801bf36:	60ba      	str	r2, [r7, #8]
 801bf38:	781b      	ldrb	r3, [r3, #0]
 801bf3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801bf3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bf42:	68ba      	ldr	r2, [r7, #8]
 801bf44:	4413      	add	r3, r2
 801bf46:	60bb      	str	r3, [r7, #8]
		break;
 801bf48:	e055      	b.n	801bff6 <dns_answer+0x21e>
		cp += 2;
 801bf4a:	68bb      	ldr	r3, [r7, #8]
 801bf4c:	3302      	adds	r3, #2
 801bf4e:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801bf50:	f107 0210 	add.w	r2, r7, #16
 801bf54:	23c0      	movs	r3, #192	; 0xc0
 801bf56:	68b9      	ldr	r1, [r7, #8]
 801bf58:	68f8      	ldr	r0, [r7, #12]
 801bf5a:	f7ff fe91 	bl	801bc80 <parse_name>
 801bf5e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801bf62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf6a:	d101      	bne.n	801bf70 <dns_answer+0x198>
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	e043      	b.n	801bff8 <dns_answer+0x220>
		cp += len;
 801bf70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bf74:	68ba      	ldr	r2, [r7, #8]
 801bf76:	4413      	add	r3, r2
 801bf78:	60bb      	str	r3, [r7, #8]
		break;
 801bf7a:	e03c      	b.n	801bff6 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801bf7c:	f107 0210 	add.w	r2, r7, #16
 801bf80:	23c0      	movs	r3, #192	; 0xc0
 801bf82:	68b9      	ldr	r1, [r7, #8]
 801bf84:	68f8      	ldr	r0, [r7, #12]
 801bf86:	f7ff fe7b 	bl	801bc80 <parse_name>
 801bf8a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801bf8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bf92:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf96:	d101      	bne.n	801bf9c <dns_answer+0x1c4>
 801bf98:	2300      	movs	r3, #0
 801bf9a:	e02d      	b.n	801bff8 <dns_answer+0x220>
		cp += len;
 801bf9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bfa0:	68ba      	ldr	r2, [r7, #8]
 801bfa2:	4413      	add	r3, r2
 801bfa4:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801bfa6:	f107 0210 	add.w	r2, r7, #16
 801bfaa:	23c0      	movs	r3, #192	; 0xc0
 801bfac:	68b9      	ldr	r1, [r7, #8]
 801bfae:	68f8      	ldr	r0, [r7, #12]
 801bfb0:	f7ff fe66 	bl	801bc80 <parse_name>
 801bfb4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801bfb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfc0:	d101      	bne.n	801bfc6 <dns_answer+0x1ee>
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	e018      	b.n	801bff8 <dns_answer+0x220>
		cp += len;
 801bfc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bfca:	68ba      	ldr	r2, [r7, #8]
 801bfcc:	4413      	add	r3, r2
 801bfce:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801bfd0:	68bb      	ldr	r3, [r7, #8]
 801bfd2:	3304      	adds	r3, #4
 801bfd4:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801bfd6:	68bb      	ldr	r3, [r7, #8]
 801bfd8:	3304      	adds	r3, #4
 801bfda:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801bfdc:	68bb      	ldr	r3, [r7, #8]
 801bfde:	3304      	adds	r3, #4
 801bfe0:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801bfe2:	68bb      	ldr	r3, [r7, #8]
 801bfe4:	3304      	adds	r3, #4
 801bfe6:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	3304      	adds	r3, #4
 801bfec:	60bb      	str	r3, [r7, #8]
		break;
 801bfee:	e002      	b.n	801bff6 <dns_answer+0x21e>
		break;
 801bff0:	bf00      	nop
 801bff2:	e000      	b.n	801bff6 <dns_answer+0x21e>
		break;
 801bff4:	bf00      	nop
	}

	return cp;
 801bff6:	68bb      	ldr	r3, [r7, #8]
}
 801bff8:	4618      	mov	r0, r3
 801bffa:	37d8      	adds	r7, #216	; 0xd8
 801bffc:	46bd      	mov	sp, r7
 801bffe:	bd80      	pop	{r7, pc}

0801c000 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c000:	b580      	push	{r7, lr}
 801c002:	b088      	sub	sp, #32
 801c004:	af00      	add	r7, sp, #0
 801c006:	60f8      	str	r0, [r7, #12]
 801c008:	60b9      	str	r1, [r7, #8]
 801c00a:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c010:	2212      	movs	r2, #18
 801c012:	2100      	movs	r1, #0
 801c014:	68f8      	ldr	r0, [r7, #12]
 801c016:	f011 f9af 	bl	802d378 <memset>

	pdhdr->id = get16(&msg[0]);
 801c01a:	6978      	ldr	r0, [r7, #20]
 801c01c:	f7ff fdfd 	bl	801bc1a <get16>
 801c020:	4603      	mov	r3, r0
 801c022:	461a      	mov	r2, r3
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c028:	697b      	ldr	r3, [r7, #20]
 801c02a:	3302      	adds	r3, #2
 801c02c:	4618      	mov	r0, r3
 801c02e:	f7ff fdf4 	bl	801bc1a <get16>
 801c032:	4603      	mov	r3, r0
 801c034:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c036:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	da02      	bge.n	801c044 <parseDNSMSG+0x44>
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	2201      	movs	r2, #1
 801c042:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c044:	8a7b      	ldrh	r3, [r7, #18]
 801c046:	0adb      	lsrs	r3, r3, #11
 801c048:	b29b      	uxth	r3, r3
 801c04a:	b2db      	uxtb	r3, r3
 801c04c:	f003 030f 	and.w	r3, r3, #15
 801c050:	b2da      	uxtb	r2, r3
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c056:	8a7b      	ldrh	r3, [r7, #18]
 801c058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d002      	beq.n	801c066 <parseDNSMSG+0x66>
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	2201      	movs	r2, #1
 801c064:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c066:	8a7b      	ldrh	r3, [r7, #18]
 801c068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d002      	beq.n	801c076 <parseDNSMSG+0x76>
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	2201      	movs	r2, #1
 801c074:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c076:	8a7b      	ldrh	r3, [r7, #18]
 801c078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d002      	beq.n	801c086 <parseDNSMSG+0x86>
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	2201      	movs	r2, #1
 801c084:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c086:	8a7b      	ldrh	r3, [r7, #18]
 801c088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d002      	beq.n	801c096 <parseDNSMSG+0x96>
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	2201      	movs	r2, #1
 801c094:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c096:	8a7b      	ldrh	r3, [r7, #18]
 801c098:	b2db      	uxtb	r3, r3
 801c09a:	f003 030f 	and.w	r3, r3, #15
 801c09e:	b2da      	uxtb	r2, r3
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c0a4:	697b      	ldr	r3, [r7, #20]
 801c0a6:	3304      	adds	r3, #4
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	f7ff fdb6 	bl	801bc1a <get16>
 801c0ae:	4603      	mov	r3, r0
 801c0b0:	461a      	mov	r2, r3
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c0b6:	697b      	ldr	r3, [r7, #20]
 801c0b8:	3306      	adds	r3, #6
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f7ff fdad 	bl	801bc1a <get16>
 801c0c0:	4603      	mov	r3, r0
 801c0c2:	461a      	mov	r2, r3
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c0c8:	697b      	ldr	r3, [r7, #20]
 801c0ca:	3308      	adds	r3, #8
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	f7ff fda4 	bl	801bc1a <get16>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	461a      	mov	r2, r3
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c0da:	697b      	ldr	r3, [r7, #20]
 801c0dc:	330a      	adds	r3, #10
 801c0de:	4618      	mov	r0, r3
 801c0e0:	f7ff fd9b 	bl	801bc1a <get16>
 801c0e4:	4603      	mov	r3, r0
 801c0e6:	461a      	mov	r2, r3
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c0ec:	697b      	ldr	r3, [r7, #20]
 801c0ee:	330c      	adds	r3, #12
 801c0f0:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	83fb      	strh	r3, [r7, #30]
 801c0f6:	e00d      	b.n	801c114 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c0f8:	69b9      	ldr	r1, [r7, #24]
 801c0fa:	6978      	ldr	r0, [r7, #20]
 801c0fc:	f7ff fe47 	bl	801bd8e <dns_question>
 801c100:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c102:	69bb      	ldr	r3, [r7, #24]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d102      	bne.n	801c10e <parseDNSMSG+0x10e>
 801c108:	f04f 33ff 	mov.w	r3, #4294967295
 801c10c:	e03b      	b.n	801c186 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c10e:	8bfb      	ldrh	r3, [r7, #30]
 801c110:	3301      	adds	r3, #1
 801c112:	83fb      	strh	r3, [r7, #30]
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	895b      	ldrh	r3, [r3, #10]
 801c118:	8bfa      	ldrh	r2, [r7, #30]
 801c11a:	429a      	cmp	r2, r3
 801c11c:	d3ec      	bcc.n	801c0f8 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c11e:	2300      	movs	r3, #0
 801c120:	83fb      	strh	r3, [r7, #30]
 801c122:	e00e      	b.n	801c142 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c124:	687a      	ldr	r2, [r7, #4]
 801c126:	69b9      	ldr	r1, [r7, #24]
 801c128:	6978      	ldr	r0, [r7, #20]
 801c12a:	f7ff fe55 	bl	801bdd8 <dns_answer>
 801c12e:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c130:	69bb      	ldr	r3, [r7, #24]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d102      	bne.n	801c13c <parseDNSMSG+0x13c>
 801c136:	f04f 33ff 	mov.w	r3, #4294967295
 801c13a:	e024      	b.n	801c186 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c13c:	8bfb      	ldrh	r3, [r7, #30]
 801c13e:	3301      	adds	r3, #1
 801c140:	83fb      	strh	r3, [r7, #30]
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	899b      	ldrh	r3, [r3, #12]
 801c146:	8bfa      	ldrh	r2, [r7, #30]
 801c148:	429a      	cmp	r2, r3
 801c14a:	d3eb      	bcc.n	801c124 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c14c:	2300      	movs	r3, #0
 801c14e:	83fb      	strh	r3, [r7, #30]
 801c150:	e002      	b.n	801c158 <parseDNSMSG+0x158>
 801c152:	8bfb      	ldrh	r3, [r7, #30]
 801c154:	3301      	adds	r3, #1
 801c156:	83fb      	strh	r3, [r7, #30]
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	89db      	ldrh	r3, [r3, #14]
 801c15c:	8bfa      	ldrh	r2, [r7, #30]
 801c15e:	429a      	cmp	r2, r3
 801c160:	d3f7      	bcc.n	801c152 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c162:	2300      	movs	r3, #0
 801c164:	83fb      	strh	r3, [r7, #30]
 801c166:	e002      	b.n	801c16e <parseDNSMSG+0x16e>
 801c168:	8bfb      	ldrh	r3, [r7, #30]
 801c16a:	3301      	adds	r3, #1
 801c16c:	83fb      	strh	r3, [r7, #30]
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	8a1b      	ldrh	r3, [r3, #16]
 801c172:	8bfa      	ldrh	r2, [r7, #30]
 801c174:	429a      	cmp	r2, r3
 801c176:	d3f7      	bcc.n	801c168 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	7a1b      	ldrb	r3, [r3, #8]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d101      	bne.n	801c184 <parseDNSMSG+0x184>
 801c180:	2301      	movs	r3, #1
 801c182:	e000      	b.n	801c186 <parseDNSMSG+0x186>
	else return 0;
 801c184:	2300      	movs	r3, #0
}
 801c186:	4618      	mov	r0, r3
 801c188:	3720      	adds	r7, #32
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd80      	pop	{r7, pc}
	...

0801c190 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b0b8      	sub	sp, #224	; 0xe0
 801c194:	af00      	add	r7, sp, #0
 801c196:	60b9      	str	r1, [r7, #8]
 801c198:	607a      	str	r2, [r7, #4]
 801c19a:	461a      	mov	r2, r3
 801c19c:	4603      	mov	r3, r0
 801c19e:	81fb      	strh	r3, [r7, #14]
 801c1a0:	4613      	mov	r3, r2
 801c1a2:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 801c1aa:	4b57      	ldr	r3, [pc, #348]	; (801c308 <dns_makequery+0x178>)
 801c1ac:	881b      	ldrh	r3, [r3, #0]
 801c1ae:	3301      	adds	r3, #1
 801c1b0:	b29a      	uxth	r2, r3
 801c1b2:	4b55      	ldr	r3, [pc, #340]	; (801c308 <dns_makequery+0x178>)
 801c1b4:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c1b6:	4b54      	ldr	r3, [pc, #336]	; (801c308 <dns_makequery+0x178>)
 801c1b8:	881b      	ldrh	r3, [r3, #0]
 801c1ba:	4619      	mov	r1, r3
 801c1bc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c1c0:	f7ff fd43 	bl	801bc4a <put16>
 801c1c4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c1c8:	89fb      	ldrh	r3, [r7, #14]
 801c1ca:	02db      	lsls	r3, r3, #11
 801c1cc:	b21b      	sxth	r3, r3
 801c1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c1d2:	b21b      	sxth	r3, r3
 801c1d4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 801c1d8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 801c1dc:	4619      	mov	r1, r3
 801c1de:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c1e2:	f7ff fd32 	bl	801bc4a <put16>
 801c1e6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 801c1ea:	2101      	movs	r1, #1
 801c1ec:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c1f0:	f7ff fd2b 	bl	801bc4a <put16>
 801c1f4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c1f8:	2100      	movs	r1, #0
 801c1fa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c1fe:	f7ff fd24 	bl	801bc4a <put16>
 801c202:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c206:	2100      	movs	r1, #0
 801c208:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c20c:	f7ff fd1d 	bl	801bc4a <put16>
 801c210:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c214:	2100      	movs	r1, #0
 801c216:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c21a:	f7ff fd16 	bl	801bc4a <put16>
 801c21e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 801c222:	f107 0310 	add.w	r3, r7, #16
 801c226:	68b9      	ldr	r1, [r7, #8]
 801c228:	4618      	mov	r0, r3
 801c22a:	f011 fa72 	bl	802d712 <strcpy>
	dname = sname;
 801c22e:	f107 0310 	add.w	r3, r7, #16
 801c232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 801c236:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c23a:	f7f4 f831 	bl	80102a0 <strlen>
 801c23e:	4603      	mov	r3, r0
 801c240:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c244:	212e      	movs	r1, #46	; 0x2e
 801c246:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c24a:	f011 f8ac 	bl	802d3a6 <strchr>
 801c24e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c252:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c256:	2b00      	cmp	r3, #0
 801c258:	d006      	beq.n	801c268 <dns_makequery+0xd8>
 801c25a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c25e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c262:	1ad3      	subs	r3, r2, r3
 801c264:	81bb      	strh	r3, [r7, #12]
 801c266:	e002      	b.n	801c26e <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c268:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801c26c:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c26e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c272:	1c5a      	adds	r2, r3, #1
 801c274:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c278:	89ba      	ldrh	r2, [r7, #12]
 801c27a:	b2d2      	uxtb	r2, r2
 801c27c:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c27e:	89bb      	ldrh	r3, [r7, #12]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d029      	beq.n	801c2d8 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c284:	89bb      	ldrh	r3, [r7, #12]
 801c286:	461a      	mov	r2, r3
 801c288:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c28c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c290:	f011 f8cc 	bl	802d42c <strncpy>
		cp += len;
 801c294:	89bb      	ldrh	r3, [r7, #12]
 801c296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c29a:	4413      	add	r3, r2
 801c29c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801c2a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d107      	bne.n	801c2b8 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c2ac:	1c5a      	adds	r2, r3, #1
 801c2ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	701a      	strb	r2, [r3, #0]
			break;
 801c2b6:	e010      	b.n	801c2da <dns_makequery+0x14a>
		}
		dname += len+1;
 801c2b8:	89bb      	ldrh	r3, [r7, #12]
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c2c0:	4413      	add	r3, r2
 801c2c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 801c2c6:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801c2ca:	89bb      	ldrh	r3, [r7, #12]
 801c2cc:	1ad3      	subs	r3, r2, r3
 801c2ce:	b29b      	uxth	r3, r3
 801c2d0:	3b01      	subs	r3, #1
 801c2d2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 801c2d6:	e7b5      	b.n	801c244 <dns_makequery+0xb4>
		if (len == 0) break;
 801c2d8:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c2da:	2101      	movs	r1, #1
 801c2dc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c2e0:	f7ff fcb3 	bl	801bc4a <put16>
 801c2e4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c2e8:	2101      	movs	r1, #1
 801c2ea:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c2ee:	f7ff fcac 	bl	801bc4a <put16>
 801c2f2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c2f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	1ad3      	subs	r3, r2, r3
 801c2fe:	b21b      	sxth	r3, r3
}
 801c300:	4618      	mov	r0, r3
 801c302:	37e0      	adds	r7, #224	; 0xe0
 801c304:	46bd      	mov	sp, r7
 801c306:	bd80      	pop	{r7, pc}
 801c308:	200009ae 	.word	0x200009ae

0801c30c <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c30c:	b480      	push	{r7}
 801c30e:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c310:	4b0f      	ldr	r3, [pc, #60]	; (801c350 <check_DNS_timeout+0x44>)
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	2b02      	cmp	r3, #2
 801c316:	d914      	bls.n	801c342 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c318:	4b0d      	ldr	r3, [pc, #52]	; (801c350 <check_DNS_timeout+0x44>)
 801c31a:	2200      	movs	r2, #0
 801c31c:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c31e:	4b0d      	ldr	r3, [pc, #52]	; (801c354 <check_DNS_timeout+0x48>)
 801c320:	781b      	ldrb	r3, [r3, #0]
 801c322:	2b01      	cmp	r3, #1
 801c324:	d905      	bls.n	801c332 <check_DNS_timeout+0x26>
			retry_count = 0;
 801c326:	4b0b      	ldr	r3, [pc, #44]	; (801c354 <check_DNS_timeout+0x48>)
 801c328:	2200      	movs	r2, #0
 801c32a:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c32c:	f04f 33ff 	mov.w	r3, #4294967295
 801c330:	e008      	b.n	801c344 <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c332:	4b08      	ldr	r3, [pc, #32]	; (801c354 <check_DNS_timeout+0x48>)
 801c334:	781b      	ldrb	r3, [r3, #0]
 801c336:	3301      	adds	r3, #1
 801c338:	b2da      	uxtb	r2, r3
 801c33a:	4b06      	ldr	r3, [pc, #24]	; (801c354 <check_DNS_timeout+0x48>)
 801c33c:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801c33e:	2300      	movs	r3, #0
 801c340:	e000      	b.n	801c344 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801c342:	2301      	movs	r3, #1
}
 801c344:	4618      	mov	r0, r3
 801c346:	46bd      	mov	sp, r7
 801c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c34c:	4770      	bx	lr
 801c34e:	bf00      	nop
 801c350:	200009b0 	.word	0x200009b0
 801c354:	200009b4 	.word	0x200009b4

0801c358 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801c358:	b480      	push	{r7}
 801c35a:	b083      	sub	sp, #12
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	4603      	mov	r3, r0
 801c360:	6039      	str	r1, [r7, #0]
 801c362:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801c364:	4a07      	ldr	r2, [pc, #28]	; (801c384 <DNS_init+0x2c>)
 801c366:	79fb      	ldrb	r3, [r7, #7]
 801c368:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801c36a:	4a07      	ldr	r2, [pc, #28]	; (801c388 <DNS_init+0x30>)
 801c36c:	683b      	ldr	r3, [r7, #0]
 801c36e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801c370:	4b06      	ldr	r3, [pc, #24]	; (801c38c <DNS_init+0x34>)
 801c372:	f241 1222 	movw	r2, #4386	; 0x1122
 801c376:	801a      	strh	r2, [r3, #0]
}
 801c378:	bf00      	nop
 801c37a:	370c      	adds	r7, #12
 801c37c:	46bd      	mov	sp, r7
 801c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c382:	4770      	bx	lr
 801c384:	200009ac 	.word	0x200009ac
 801c388:	200009a8 	.word	0x200009a8
 801c38c:	200009ae 	.word	0x200009ae

0801c390 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801c390:	b590      	push	{r4, r7, lr}
 801c392:	b08f      	sub	sp, #60	; 0x3c
 801c394:	af02      	add	r7, sp, #8
 801c396:	60f8      	str	r0, [r7, #12]
 801c398:	60b9      	str	r1, [r7, #8]
 801c39a:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801c39c:	4b3b      	ldr	r3, [pc, #236]	; (801c48c <DNS_run+0xfc>)
 801c39e:	2200      	movs	r2, #0
 801c3a0:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801c3a2:	4b3b      	ldr	r3, [pc, #236]	; (801c490 <DNS_run+0x100>)
 801c3a4:	2200      	movs	r2, #0
 801c3a6:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801c3a8:	4b3a      	ldr	r3, [pc, #232]	; (801c494 <DNS_run+0x104>)
 801c3aa:	7818      	ldrb	r0, [r3, #0]
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	2102      	movs	r1, #2
 801c3b2:	f7fc fa2f 	bl	8018814 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801c3b6:	4b38      	ldr	r3, [pc, #224]	; (801c498 <DNS_run+0x108>)
 801c3b8:	681a      	ldr	r2, [r3, #0]
 801c3ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c3be:	68b9      	ldr	r1, [r7, #8]
 801c3c0:	2000      	movs	r0, #0
 801c3c2:	f7ff fee5 	bl	801c190 <dns_makequery>
 801c3c6:	4603      	mov	r3, r0
 801c3c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c3ca:	4b32      	ldr	r3, [pc, #200]	; (801c494 <DNS_run+0x104>)
 801c3cc:	7818      	ldrb	r0, [r3, #0]
 801c3ce:	4b32      	ldr	r3, [pc, #200]	; (801c498 <DNS_run+0x108>)
 801c3d0:	6819      	ldr	r1, [r3, #0]
 801c3d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c3d4:	2335      	movs	r3, #53	; 0x35
 801c3d6:	9300      	str	r3, [sp, #0]
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	f7fc fef9 	bl	80191d0 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c3de:	4b2d      	ldr	r3, [pc, #180]	; (801c494 <DNS_run+0x104>)
 801c3e0:	781b      	ldrb	r3, [r3, #0]
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	f7fc f8cb 	bl	801857e <getSn_RX_RSR>
 801c3e8:	4603      	mov	r3, r0
 801c3ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c3ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d029      	beq.n	801c446 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801c3f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c3f8:	d902      	bls.n	801c400 <DNS_run+0x70>
 801c3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c3fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801c400:	4b24      	ldr	r3, [pc, #144]	; (801c494 <DNS_run+0x104>)
 801c402:	7818      	ldrb	r0, [r3, #0]
 801c404:	4b24      	ldr	r3, [pc, #144]	; (801c498 <DNS_run+0x108>)
 801c406:	6819      	ldr	r1, [r3, #0]
 801c408:	f107 0414 	add.w	r4, r7, #20
 801c40c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c40e:	f107 0312 	add.w	r3, r7, #18
 801c412:	9300      	str	r3, [sp, #0]
 801c414:	4623      	mov	r3, r4
 801c416:	f7fd f811 	bl	801943c <recvfrom>
 801c41a:	4603      	mov	r3, r0
 801c41c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801c41e:	4b1e      	ldr	r3, [pc, #120]	; (801c498 <DNS_run+0x108>)
 801c420:	6819      	ldr	r1, [r3, #0]
 801c422:	f107 0318 	add.w	r3, r7, #24
 801c426:	687a      	ldr	r2, [r7, #4]
 801c428:	4618      	mov	r0, r3
 801c42a:	f7ff fde9 	bl	801c000 <parseDNSMSG>
 801c42e:	4603      	mov	r3, r0
 801c430:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 801c434:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801c436:	4b17      	ldr	r3, [pc, #92]	; (801c494 <DNS_run+0x104>)
 801c438:	781b      	ldrb	r3, [r3, #0]
 801c43a:	4618      	mov	r0, r3
 801c43c:	f7fc fafe 	bl	8018a3c <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801c440:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801c444:	e01e      	b.n	801c484 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801c446:	f7ff ff61 	bl	801c30c <check_DNS_timeout>
 801c44a:	4603      	mov	r3, r0
 801c44c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 801c450:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c454:	2b00      	cmp	r3, #0
 801c456:	da06      	bge.n	801c466 <DNS_run+0xd6>
			close(DNS_SOCKET);
 801c458:	4b0e      	ldr	r3, [pc, #56]	; (801c494 <DNS_run+0x104>)
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	4618      	mov	r0, r3
 801c45e:	f7fc faed 	bl	8018a3c <close>
			return 0; // timeout occurred
 801c462:	2300      	movs	r3, #0
 801c464:	e00e      	b.n	801c484 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801c466:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d1b7      	bne.n	801c3de <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c46e:	4b09      	ldr	r3, [pc, #36]	; (801c494 <DNS_run+0x104>)
 801c470:	7818      	ldrb	r0, [r3, #0]
 801c472:	4b09      	ldr	r3, [pc, #36]	; (801c498 <DNS_run+0x108>)
 801c474:	6819      	ldr	r1, [r3, #0]
 801c476:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c478:	2335      	movs	r3, #53	; 0x35
 801c47a:	9300      	str	r3, [sp, #0]
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	f7fc fea7 	bl	80191d0 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c482:	e7ac      	b.n	801c3de <DNS_run+0x4e>
}
 801c484:	4618      	mov	r0, r3
 801c486:	3734      	adds	r7, #52	; 0x34
 801c488:	46bd      	mov	sp, r7
 801c48a:	bd90      	pop	{r4, r7, pc}
 801c48c:	200009b4 	.word	0x200009b4
 801c490:	200009b0 	.word	0x200009b0
 801c494:	200009ac 	.word	0x200009ac
 801c498:	200009a8 	.word	0x200009a8

0801c49c <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801c49c:	b480      	push	{r7}
 801c49e:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801c4a0:	4b04      	ldr	r3, [pc, #16]	; (801c4b4 <DNS_time_handler+0x18>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	3301      	adds	r3, #1
 801c4a6:	4a03      	ldr	r2, [pc, #12]	; (801c4b4 <DNS_time_handler+0x18>)
 801c4a8:	6013      	str	r3, [r2, #0]
}
 801c4aa:	bf00      	nop
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4b2:	4770      	bx	lr
 801c4b4:	200009b0 	.word	0x200009b0

0801c4b8 <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801c4b8:	b480      	push	{r7}
 801c4ba:	af00      	add	r7, sp, #0
 801c4bc:	bf00      	nop
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4c4:	4770      	bx	lr
	...

0801c4c8 <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801c4c8:	b480      	push	{r7}
 801c4ca:	b083      	sub	sp, #12
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
 801c4d0:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d002      	beq.n	801c4de <dns_service_reg_cb_mutex+0x16>
 801c4d8:	4a07      	ldr	r2, [pc, #28]	; (801c4f8 <dns_service_reg_cb_mutex+0x30>)
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801c4de:	683b      	ldr	r3, [r7, #0]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d002      	beq.n	801c4ea <dns_service_reg_cb_mutex+0x22>
 801c4e4:	4a05      	ldr	r2, [pc, #20]	; (801c4fc <dns_service_reg_cb_mutex+0x34>)
 801c4e6:	683b      	ldr	r3, [r7, #0]
 801c4e8:	6013      	str	r3, [r2, #0]

}
 801c4ea:	bf00      	nop
 801c4ec:	370c      	adds	r7, #12
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4f4:	4770      	bx	lr
 801c4f6:	bf00      	nop
 801c4f8:	20000114 	.word	0x20000114
 801c4fc:	20000118 	.word	0x20000118

0801c500 <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801c500:	b480      	push	{r7}
 801c502:	b083      	sub	sp, #12
 801c504:	af00      	add	r7, sp, #0
 801c506:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d002      	beq.n	801c514 <dns_service_reg_cb_net_ready+0x14>
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	4a03      	ldr	r2, [pc, #12]	; (801c520 <dns_service_reg_cb_net_ready+0x20>)
 801c512:	6013      	str	r3, [r2, #0]

}
 801c514:	bf00      	nop
 801c516:	370c      	adds	r7, #12
 801c518:	46bd      	mov	sp, r7
 801c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c51e:	4770      	bx	lr
 801c520:	2000011c 	.word	0x2000011c

0801c524 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801c524:	b580      	push	{r7, lr}
 801c526:	b082      	sub	sp, #8
 801c528:	af00      	add	r7, sp, #0
 801c52a:	4603      	mov	r3, r0
 801c52c:	6039      	str	r1, [r7, #0]
 801c52e:	71fb      	strb	r3, [r7, #7]
 801c530:	4613      	mov	r3, r2
 801c532:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801c534:	88bb      	ldrh	r3, [r7, #4]
 801c536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c53a:	d202      	bcs.n	801c542 <dns_service_init+0x1e>
 801c53c:	f04f 33ff 	mov.w	r3, #4294967295
 801c540:	e005      	b.n	801c54e <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801c542:	79fb      	ldrb	r3, [r7, #7]
 801c544:	6839      	ldr	r1, [r7, #0]
 801c546:	4618      	mov	r0, r3
 801c548:	f7ff ff06 	bl	801c358 <DNS_init>
	return 0;
 801c54c:	2300      	movs	r3, #0
}
 801c54e:	4618      	mov	r0, r3
 801c550:	3708      	adds	r7, #8
 801c552:	46bd      	mov	sp, r7
 801c554:	bd80      	pop	{r7, pc}
	...

0801c558 <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801c558:	b480      	push	{r7}
 801c55a:	b083      	sub	sp, #12
 801c55c:	af00      	add	r7, sp, #0
 801c55e:	6078      	str	r0, [r7, #4]
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801c566:	4b04      	ldr	r3, [pc, #16]	; (801c578 <dns_service_set_dns_ip+0x20>)
 801c568:	601a      	str	r2, [r3, #0]
}
 801c56a:	bf00      	nop
 801c56c:	370c      	adds	r7, #12
 801c56e:	46bd      	mov	sp, r7
 801c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c574:	4770      	bx	lr
 801c576:	bf00      	nop
 801c578:	200009b8 	.word	0x200009b8

0801c57c <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801c57c:	b580      	push	{r7, lr}
 801c57e:	b084      	sub	sp, #16
 801c580:	af00      	add	r7, sp, #0
 801c582:	6078      	str	r0, [r7, #4]
 801c584:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801c586:	4b0d      	ldr	r3, [pc, #52]	; (801c5bc <dns_service_resolve_name+0x40>)
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady){
 801c58c:	4b0c      	ldr	r3, [pc, #48]	; (801c5c0 <dns_service_resolve_name+0x44>)
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	2b00      	cmp	r3, #0
 801c592:	d007      	beq.n	801c5a4 <dns_service_resolve_name+0x28>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801c594:	683a      	ldr	r2, [r7, #0]
 801c596:	6879      	ldr	r1, [r7, #4]
 801c598:	480a      	ldr	r0, [pc, #40]	; (801c5c4 <dns_service_resolve_name+0x48>)
 801c59a:	f7ff fef9 	bl	801c390 <DNS_run>
 801c59e:	4603      	mov	r3, r0
 801c5a0:	73fb      	strb	r3, [r7, #15]
 801c5a2:	e001      	b.n	801c5a8 <dns_service_resolve_name+0x2c>
	}else{
		err = -1;
 801c5a4:	23ff      	movs	r3, #255	; 0xff
 801c5a6:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801c5a8:	4b07      	ldr	r3, [pc, #28]	; (801c5c8 <dns_service_resolve_name+0x4c>)
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	4798      	blx	r3
#endif
	return err;
 801c5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c5b2:	4618      	mov	r0, r3
 801c5b4:	3710      	adds	r7, #16
 801c5b6:	46bd      	mov	sp, r7
 801c5b8:	bd80      	pop	{r7, pc}
 801c5ba:	bf00      	nop
 801c5bc:	20000114 	.word	0x20000114
 801c5c0:	2000011c 	.word	0x2000011c
 801c5c4:	200009b8 	.word	0x200009b8
 801c5c8:	20000118 	.word	0x20000118

0801c5cc <dns_service_increment_second>:

void dns_service_increment_second(void){
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801c5d0:	f7ff ff64 	bl	801c49c <DNS_time_handler>
}
 801c5d4:	bf00      	nop
 801c5d6:	bd80      	pop	{r7, pc}

0801c5d8 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b086      	sub	sp, #24
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d101      	bne.n	801c5ea <isValidIPv4+0x12>
        return false;
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	e068      	b.n	801c6bc <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801c5f2:	2300      	movs	r3, #0
 801c5f4:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	60bb      	str	r3, [r7, #8]
 801c5fa:	e043      	b.n	801c684 <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801c5fc:	687a      	ldr	r2, [r7, #4]
 801c5fe:	68bb      	ldr	r3, [r7, #8]
 801c600:	4413      	add	r3, r2
 801c602:	781b      	ldrb	r3, [r3, #0]
 801c604:	3b30      	subs	r3, #48	; 0x30
 801c606:	2b09      	cmp	r3, #9
 801c608:	d818      	bhi.n	801c63c <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801c60a:	697a      	ldr	r2, [r7, #20]
 801c60c:	4613      	mov	r3, r2
 801c60e:	009b      	lsls	r3, r3, #2
 801c610:	4413      	add	r3, r2
 801c612:	005b      	lsls	r3, r3, #1
 801c614:	4619      	mov	r1, r3
 801c616:	687a      	ldr	r2, [r7, #4]
 801c618:	68bb      	ldr	r3, [r7, #8]
 801c61a:	4413      	add	r3, r2
 801c61c:	781b      	ldrb	r3, [r3, #0]
 801c61e:	3b30      	subs	r3, #48	; 0x30
 801c620:	440b      	add	r3, r1
 801c622:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801c624:	697b      	ldr	r3, [r7, #20]
 801c626:	2b00      	cmp	r3, #0
 801c628:	db02      	blt.n	801c630 <isValidIPv4+0x58>
 801c62a:	697b      	ldr	r3, [r7, #20]
 801c62c:	2bff      	cmp	r3, #255	; 0xff
 801c62e:	dd01      	ble.n	801c634 <isValidIPv4+0x5c>
                return false;
 801c630:	2300      	movs	r3, #0
 801c632:	e043      	b.n	801c6bc <isValidIPv4+0xe4>
            }

            segmentLength++;
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	3301      	adds	r3, #1
 801c638:	60fb      	str	r3, [r7, #12]
 801c63a:	e020      	b.n	801c67e <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801c63c:	687a      	ldr	r2, [r7, #4]
 801c63e:	68bb      	ldr	r3, [r7, #8]
 801c640:	4413      	add	r3, r2
 801c642:	781b      	ldrb	r3, [r3, #0]
 801c644:	2b2e      	cmp	r3, #46	; 0x2e
 801c646:	d118      	bne.n	801c67a <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	2b01      	cmp	r3, #1
 801c64c:	dd09      	ble.n	801c662 <isValidIPv4+0x8a>
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	68ba      	ldr	r2, [r7, #8]
 801c652:	1ad3      	subs	r3, r2, r3
 801c654:	687a      	ldr	r2, [r7, #4]
 801c656:	4413      	add	r3, r2
 801c658:	781b      	ldrb	r3, [r3, #0]
 801c65a:	2b30      	cmp	r3, #48	; 0x30
 801c65c:	d101      	bne.n	801c662 <isValidIPv4+0x8a>
                return false;
 801c65e:	2300      	movs	r3, #0
 801c660:	e02c      	b.n	801c6bc <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801c662:	2300      	movs	r3, #0
 801c664:	617b      	str	r3, [r7, #20]
            count++;
 801c666:	693b      	ldr	r3, [r7, #16]
 801c668:	3301      	adds	r3, #1
 801c66a:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801c66c:	2300      	movs	r3, #0
 801c66e:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801c670:	693b      	ldr	r3, [r7, #16]
 801c672:	2b03      	cmp	r3, #3
 801c674:	dd03      	ble.n	801c67e <isValidIPv4+0xa6>
                return false;
 801c676:	2300      	movs	r3, #0
 801c678:	e020      	b.n	801c6bc <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801c67a:	2300      	movs	r3, #0
 801c67c:	e01e      	b.n	801c6bc <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801c67e:	68bb      	ldr	r3, [r7, #8]
 801c680:	3301      	adds	r3, #1
 801c682:	60bb      	str	r3, [r7, #8]
 801c684:	687a      	ldr	r2, [r7, #4]
 801c686:	68bb      	ldr	r3, [r7, #8]
 801c688:	4413      	add	r3, r2
 801c68a:	781b      	ldrb	r3, [r3, #0]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d1b5      	bne.n	801c5fc <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	2b01      	cmp	r3, #1
 801c694:	dd0c      	ble.n	801c6b0 <isValidIPv4+0xd8>
 801c696:	6878      	ldr	r0, [r7, #4]
 801c698:	f7f3 fe02 	bl	80102a0 <strlen>
 801c69c:	4602      	mov	r2, r0
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	1ad3      	subs	r3, r2, r3
 801c6a2:	687a      	ldr	r2, [r7, #4]
 801c6a4:	4413      	add	r3, r2
 801c6a6:	781b      	ldrb	r3, [r3, #0]
 801c6a8:	2b30      	cmp	r3, #48	; 0x30
 801c6aa:	d101      	bne.n	801c6b0 <isValidIPv4+0xd8>
        return false;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	e005      	b.n	801c6bc <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801c6b0:	693b      	ldr	r3, [r7, #16]
 801c6b2:	2b03      	cmp	r3, #3
 801c6b4:	bf0c      	ite	eq
 801c6b6:	2301      	moveq	r3, #1
 801c6b8:	2300      	movne	r3, #0
 801c6ba:	b2db      	uxtb	r3, r3
}
 801c6bc:	4618      	mov	r0, r3
 801c6be:	3718      	adds	r7, #24
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	bd80      	pop	{r7, pc}

0801c6c4 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801c6c4:	b480      	push	{r7}
 801c6c6:	b085      	sub	sp, #20
 801c6c8:	af00      	add	r7, sp, #0
 801c6ca:	60f8      	str	r0, [r7, #12]
 801c6cc:	60b9      	str	r1, [r7, #8]
 801c6ce:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	68ba      	ldr	r2, [r7, #8]
 801c6d4:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	687a      	ldr	r2, [r7, #4]
 801c6da:	601a      	str	r2, [r3, #0]
}
 801c6dc:	bf00      	nop
 801c6de:	3714      	adds	r7, #20
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e6:	4770      	bx	lr

0801c6e8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801c6e8:	b480      	push	{r7}
 801c6ea:	b083      	sub	sp, #12
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c6f8:	4293      	cmp	r3, r2
 801c6fa:	d003      	beq.n	801c704 <getNextPacketId+0x1c>
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	3301      	adds	r3, #1
 801c702:	e000      	b.n	801c706 <getNextPacketId+0x1e>
 801c704:	2301      	movs	r3, #1
 801c706:	687a      	ldr	r2, [r7, #4]
 801c708:	6013      	str	r3, [r2, #0]
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	681b      	ldr	r3, [r3, #0]
}
 801c70e:	4618      	mov	r0, r3
 801c710:	370c      	adds	r7, #12
 801c712:	46bd      	mov	sp, r7
 801c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c718:	4770      	bx	lr

0801c71a <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801c71a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c71c:	b087      	sub	sp, #28
 801c71e:	af00      	add	r7, sp, #0
 801c720:	60f8      	str	r0, [r7, #12]
 801c722:	60b9      	str	r1, [r7, #8]
 801c724:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801c726:	f04f 33ff 	mov.w	r3, #4294967295
 801c72a:	617b      	str	r3, [r7, #20]
        sent = 0;
 801c72c:	2300      	movs	r3, #0
 801c72e:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801c730:	e018      	b.n	801c764 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c736:	689c      	ldr	r4, [r3, #8]
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	691a      	ldr	r2, [r3, #16]
 801c740:	693b      	ldr	r3, [r7, #16]
 801c742:	18d6      	adds	r6, r2, r3
 801c744:	6878      	ldr	r0, [r7, #4]
 801c746:	f000 fccb 	bl	801d0e0 <TimerLeftMS>
 801c74a:	4603      	mov	r3, r0
 801c74c:	68ba      	ldr	r2, [r7, #8]
 801c74e:	4631      	mov	r1, r6
 801c750:	4628      	mov	r0, r5
 801c752:	47a0      	blx	r4
 801c754:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801c756:	697b      	ldr	r3, [r7, #20]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	db0e      	blt.n	801c77a <sendPacket+0x60>
            break;
        sent += rc;
 801c75c:	693a      	ldr	r2, [r7, #16]
 801c75e:	697b      	ldr	r3, [r7, #20]
 801c760:	4413      	add	r3, r2
 801c762:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801c764:	693a      	ldr	r2, [r7, #16]
 801c766:	68bb      	ldr	r3, [r7, #8]
 801c768:	429a      	cmp	r2, r3
 801c76a:	da07      	bge.n	801c77c <sendPacket+0x62>
 801c76c:	6878      	ldr	r0, [r7, #4]
 801c76e:	f000 fc75 	bl	801d05c <TimerIsExpired>
 801c772:	4603      	mov	r3, r0
 801c774:	2b00      	cmp	r3, #0
 801c776:	d0dc      	beq.n	801c732 <sendPacket+0x18>
 801c778:	e000      	b.n	801c77c <sendPacket+0x62>
            break;
 801c77a:	bf00      	nop
    }
    if (sent == length)
 801c77c:	693a      	ldr	r2, [r7, #16]
 801c77e:	68bb      	ldr	r3, [r7, #8]
 801c780:	429a      	cmp	r2, r3
 801c782:	d10b      	bne.n	801c79c <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	699b      	ldr	r3, [r3, #24]
 801c78e:	4619      	mov	r1, r3
 801c790:	4610      	mov	r0, r2
 801c792:	f000 fc8d 	bl	801d0b0 <TimerCountdown>
        rc = SUCCESSS;
 801c796:	2300      	movs	r3, #0
 801c798:	617b      	str	r3, [r7, #20]
 801c79a:	e002      	b.n	801c7a2 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801c79c:	f04f 33ff 	mov.w	r3, #4294967295
 801c7a0:	617b      	str	r3, [r7, #20]
    return rc;
 801c7a2:	697b      	ldr	r3, [r7, #20]
}
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	371c      	adds	r7, #28
 801c7a8:	46bd      	mov	sp, r7
 801c7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c7ac <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	b086      	sub	sp, #24
 801c7b0:	af00      	add	r7, sp, #0
 801c7b2:	60f8      	str	r0, [r7, #12]
 801c7b4:	60b9      	str	r1, [r7, #8]
 801c7b6:	607a      	str	r2, [r7, #4]
 801c7b8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	68ba      	ldr	r2, [r7, #8]
 801c7be:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801c7c0:	2300      	movs	r3, #0
 801c7c2:	617b      	str	r3, [r7, #20]
 801c7c4:	e009      	b.n	801c7da <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801c7c6:	68fa      	ldr	r2, [r7, #12]
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	3304      	adds	r3, #4
 801c7cc:	00db      	lsls	r3, r3, #3
 801c7ce:	4413      	add	r3, r2
 801c7d0:	2200      	movs	r2, #0
 801c7d2:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801c7d4:	697b      	ldr	r3, [r7, #20]
 801c7d6:	3301      	adds	r3, #1
 801c7d8:	617b      	str	r3, [r7, #20]
 801c7da:	697b      	ldr	r3, [r7, #20]
 801c7dc:	2b04      	cmp	r3, #4
 801c7de:	ddf2      	ble.n	801c7c6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	687a      	ldr	r2, [r7, #4]
 801c7e4:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	683a      	ldr	r2, [r7, #0]
 801c7ea:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	6a3a      	ldr	r2, [r7, #32]
 801c7f0:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801c7f2:	68fb      	ldr	r3, [r7, #12]
 801c7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c7f6:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c7fc:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	2200      	movs	r2, #0
 801c802:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	2200      	movs	r2, #0
 801c808:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	2200      	movs	r2, #0
 801c80e:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	2201      	movs	r2, #1
 801c814:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	3354      	adds	r3, #84	; 0x54
 801c81a:	4618      	mov	r0, r3
 801c81c:	f000 fc11 	bl	801d042 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801c820:	bf00      	nop
 801c822:	3718      	adds	r7, #24
 801c824:	46bd      	mov	sp, r7
 801c826:	bd80      	pop	{r7, pc}

0801c828 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801c828:	b590      	push	{r4, r7, lr}
 801c82a:	b08b      	sub	sp, #44	; 0x2c
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	60f8      	str	r0, [r7, #12]
 801c830:	60b9      	str	r1, [r7, #8]
 801c832:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801c834:	2301      	movs	r3, #1
 801c836:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801c838:	2300      	movs	r3, #0
 801c83a:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801c83c:	2304      	movs	r3, #4
 801c83e:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801c840:	68bb      	ldr	r3, [r7, #8]
 801c842:	2200      	movs	r2, #0
 801c844:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801c846:	f04f 33ff 	mov.w	r3, #4294967295
 801c84a:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801c84c:	6a3b      	ldr	r3, [r7, #32]
 801c84e:	3301      	adds	r3, #1
 801c850:	623b      	str	r3, [r7, #32]
 801c852:	6a3a      	ldr	r2, [r7, #32]
 801c854:	69fb      	ldr	r3, [r7, #28]
 801c856:	429a      	cmp	r2, r3
 801c858:	dd03      	ble.n	801c862 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801c85a:	f04f 33ff 	mov.w	r3, #4294967295
 801c85e:	61bb      	str	r3, [r7, #24]
            goto exit;
 801c860:	e021      	b.n	801c8a6 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c866:	685c      	ldr	r4, [r3, #4]
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801c86c:	f107 0117 	add.w	r1, r7, #23
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	2201      	movs	r2, #1
 801c874:	47a0      	blx	r4
 801c876:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801c878:	69bb      	ldr	r3, [r7, #24]
 801c87a:	2b01      	cmp	r3, #1
 801c87c:	d112      	bne.n	801c8a4 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801c87e:	68bb      	ldr	r3, [r7, #8]
 801c880:	681a      	ldr	r2, [r3, #0]
 801c882:	7dfb      	ldrb	r3, [r7, #23]
 801c884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c88a:	fb01 f303 	mul.w	r3, r1, r3
 801c88e:	441a      	add	r2, r3
 801c890:	68bb      	ldr	r3, [r7, #8]
 801c892:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c896:	01db      	lsls	r3, r3, #7
 801c898:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801c89a:	7dfb      	ldrb	r3, [r7, #23]
 801c89c:	b25b      	sxtb	r3, r3
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	dbd1      	blt.n	801c846 <decodePacket+0x1e>
exit:
 801c8a2:	e000      	b.n	801c8a6 <decodePacket+0x7e>
            goto exit;
 801c8a4:	bf00      	nop
    return len;
 801c8a6:	6a3b      	ldr	r3, [r7, #32]
}
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	372c      	adds	r7, #44	; 0x2c
 801c8ac:	46bd      	mov	sp, r7
 801c8ae:	bd90      	pop	{r4, r7, pc}

0801c8b0 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8b2:	b089      	sub	sp, #36	; 0x24
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	60f8      	str	r0, [r7, #12]
 801c8b8:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801c8ba:	f04f 33ff 	mov.w	r3, #4294967295
 801c8be:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	617b      	str	r3, [r7, #20]
    int len = 0;
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801c8c8:	2300      	movs	r3, #0
 801c8ca:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c8d0:	685c      	ldr	r4, [r3, #4]
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	695e      	ldr	r6, [r3, #20]
 801c8da:	68b8      	ldr	r0, [r7, #8]
 801c8dc:	f000 fc00 	bl	801d0e0 <TimerLeftMS>
 801c8e0:	4603      	mov	r3, r0
 801c8e2:	2201      	movs	r2, #1
 801c8e4:	4631      	mov	r1, r6
 801c8e6:	4628      	mov	r0, r5
 801c8e8:	47a0      	blx	r4
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	2b01      	cmp	r3, #1
 801c8ee:	d13b      	bne.n	801c968 <readPacket+0xb8>
        goto exit;

    len = 1;
 801c8f0:	2301      	movs	r3, #1
 801c8f2:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801c8f4:	68b8      	ldr	r0, [r7, #8]
 801c8f6:	f000 fbf3 	bl	801d0e0 <TimerLeftMS>
 801c8fa:	4602      	mov	r2, r0
 801c8fc:	f107 0310 	add.w	r3, r7, #16
 801c900:	4619      	mov	r1, r3
 801c902:	68f8      	ldr	r0, [r7, #12]
 801c904:	f7ff ff90 	bl	801c828 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	695b      	ldr	r3, [r3, #20]
 801c90c:	3301      	adds	r3, #1
 801c90e:	693a      	ldr	r2, [r7, #16]
 801c910:	4611      	mov	r1, r2
 801c912:	4618      	mov	r0, r3
 801c914:	f000 ff49 	bl	801d7aa <MQTTPacket_encode>
 801c918:	4602      	mov	r2, r0
 801c91a:	69bb      	ldr	r3, [r7, #24]
 801c91c:	4413      	add	r3, r2
 801c91e:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801c920:	693b      	ldr	r3, [r7, #16]
 801c922:	2b00      	cmp	r3, #0
 801c924:	dd16      	ble.n	801c954 <readPacket+0xa4>
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c92a:	685c      	ldr	r4, [r3, #4]
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	695a      	ldr	r2, [r3, #20]
 801c934:	69bb      	ldr	r3, [r7, #24]
 801c936:	18d6      	adds	r6, r2, r3
 801c938:	693b      	ldr	r3, [r7, #16]
 801c93a:	607b      	str	r3, [r7, #4]
 801c93c:	68b8      	ldr	r0, [r7, #8]
 801c93e:	f000 fbcf 	bl	801d0e0 <TimerLeftMS>
 801c942:	4603      	mov	r3, r0
 801c944:	687a      	ldr	r2, [r7, #4]
 801c946:	4631      	mov	r1, r6
 801c948:	4628      	mov	r0, r5
 801c94a:	47a0      	blx	r4
 801c94c:	4602      	mov	r2, r0
 801c94e:	693b      	ldr	r3, [r7, #16]
 801c950:	429a      	cmp	r2, r3
 801c952:	d10b      	bne.n	801c96c <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	695b      	ldr	r3, [r3, #20]
 801c958:	781b      	ldrb	r3, [r3, #0]
 801c95a:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801c95c:	7d3b      	ldrb	r3, [r7, #20]
 801c95e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801c962:	b2db      	uxtb	r3, r3
 801c964:	61fb      	str	r3, [r7, #28]
 801c966:	e002      	b.n	801c96e <readPacket+0xbe>
        goto exit;
 801c968:	bf00      	nop
 801c96a:	e000      	b.n	801c96e <readPacket+0xbe>
        goto exit;
 801c96c:	bf00      	nop
exit:
    return rc;
 801c96e:	69fb      	ldr	r3, [r7, #28]
}
 801c970:	4618      	mov	r0, r3
 801c972:	3724      	adds	r7, #36	; 0x24
 801c974:	46bd      	mov	sp, r7
 801c976:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c978 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801c978:	b480      	push	{r7}
 801c97a:	b087      	sub	sp, #28
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
 801c980:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801c986:	683b      	ldr	r3, [r7, #0]
 801c988:	689b      	ldr	r3, [r3, #8]
 801c98a:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801c98c:	683b      	ldr	r3, [r7, #0]
 801c98e:	685b      	ldr	r3, [r3, #4]
 801c990:	461a      	mov	r2, r3
 801c992:	693b      	ldr	r3, [r7, #16]
 801c994:	4413      	add	r3, r2
 801c996:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801c998:	e039      	b.n	801ca0e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801c99a:	693b      	ldr	r3, [r7, #16]
 801c99c:	781b      	ldrb	r3, [r3, #0]
 801c99e:	2b2f      	cmp	r3, #47	; 0x2f
 801c9a0:	d103      	bne.n	801c9aa <isTopicMatched+0x32>
 801c9a2:	697b      	ldr	r3, [r7, #20]
 801c9a4:	781b      	ldrb	r3, [r3, #0]
 801c9a6:	2b2f      	cmp	r3, #47	; 0x2f
 801c9a8:	d13a      	bne.n	801ca20 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801c9aa:	697b      	ldr	r3, [r7, #20]
 801c9ac:	781b      	ldrb	r3, [r3, #0]
 801c9ae:	2b2b      	cmp	r3, #43	; 0x2b
 801c9b0:	d009      	beq.n	801c9c6 <isTopicMatched+0x4e>
 801c9b2:	697b      	ldr	r3, [r7, #20]
 801c9b4:	781b      	ldrb	r3, [r3, #0]
 801c9b6:	2b23      	cmp	r3, #35	; 0x23
 801c9b8:	d005      	beq.n	801c9c6 <isTopicMatched+0x4e>
 801c9ba:	697b      	ldr	r3, [r7, #20]
 801c9bc:	781a      	ldrb	r2, [r3, #0]
 801c9be:	693b      	ldr	r3, [r7, #16]
 801c9c0:	781b      	ldrb	r3, [r3, #0]
 801c9c2:	429a      	cmp	r2, r3
 801c9c4:	d12e      	bne.n	801ca24 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801c9c6:	697b      	ldr	r3, [r7, #20]
 801c9c8:	781b      	ldrb	r3, [r3, #0]
 801c9ca:	2b2b      	cmp	r3, #43	; 0x2b
 801c9cc:	d112      	bne.n	801c9f4 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801c9ce:	693b      	ldr	r3, [r7, #16]
 801c9d0:	3301      	adds	r3, #1
 801c9d2:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801c9d4:	e005      	b.n	801c9e2 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801c9d6:	693b      	ldr	r3, [r7, #16]
 801c9d8:	3301      	adds	r3, #1
 801c9da:	613b      	str	r3, [r7, #16]
 801c9dc:	693b      	ldr	r3, [r7, #16]
 801c9de:	3301      	adds	r3, #1
 801c9e0:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801c9e2:	68fa      	ldr	r2, [r7, #12]
 801c9e4:	68bb      	ldr	r3, [r7, #8]
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	d20b      	bcs.n	801ca02 <isTopicMatched+0x8a>
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	781b      	ldrb	r3, [r3, #0]
 801c9ee:	2b2f      	cmp	r3, #47	; 0x2f
 801c9f0:	d1f1      	bne.n	801c9d6 <isTopicMatched+0x5e>
 801c9f2:	e006      	b.n	801ca02 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801c9f4:	697b      	ldr	r3, [r7, #20]
 801c9f6:	781b      	ldrb	r3, [r3, #0]
 801c9f8:	2b23      	cmp	r3, #35	; 0x23
 801c9fa:	d102      	bne.n	801ca02 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801c9fc:	68bb      	ldr	r3, [r7, #8]
 801c9fe:	3b01      	subs	r3, #1
 801ca00:	613b      	str	r3, [r7, #16]
        curf++;
 801ca02:	697b      	ldr	r3, [r7, #20]
 801ca04:	3301      	adds	r3, #1
 801ca06:	617b      	str	r3, [r7, #20]
        curn++;
 801ca08:	693b      	ldr	r3, [r7, #16]
 801ca0a:	3301      	adds	r3, #1
 801ca0c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801ca0e:	697b      	ldr	r3, [r7, #20]
 801ca10:	781b      	ldrb	r3, [r3, #0]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d007      	beq.n	801ca26 <isTopicMatched+0xae>
 801ca16:	693a      	ldr	r2, [r7, #16]
 801ca18:	68bb      	ldr	r3, [r7, #8]
 801ca1a:	429a      	cmp	r2, r3
 801ca1c:	d3bd      	bcc.n	801c99a <isTopicMatched+0x22>
 801ca1e:	e002      	b.n	801ca26 <isTopicMatched+0xae>
            break;
 801ca20:	bf00      	nop
 801ca22:	e000      	b.n	801ca26 <isTopicMatched+0xae>
            break;
 801ca24:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801ca26:	693a      	ldr	r2, [r7, #16]
 801ca28:	68bb      	ldr	r3, [r7, #8]
 801ca2a:	429a      	cmp	r2, r3
 801ca2c:	d105      	bne.n	801ca3a <isTopicMatched+0xc2>
 801ca2e:	697b      	ldr	r3, [r7, #20]
 801ca30:	781b      	ldrb	r3, [r3, #0]
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d101      	bne.n	801ca3a <isTopicMatched+0xc2>
 801ca36:	2301      	movs	r3, #1
 801ca38:	e000      	b.n	801ca3c <isTopicMatched+0xc4>
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	b2db      	uxtb	r3, r3
}
 801ca3e:	4618      	mov	r0, r3
 801ca40:	371c      	adds	r7, #28
 801ca42:	46bd      	mov	sp, r7
 801ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca48:	4770      	bx	lr

0801ca4a <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801ca4a:	b580      	push	{r7, lr}
 801ca4c:	b08a      	sub	sp, #40	; 0x28
 801ca4e:	af00      	add	r7, sp, #0
 801ca50:	60f8      	str	r0, [r7, #12]
 801ca52:	60b9      	str	r1, [r7, #8]
 801ca54:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801ca56:	f04f 33ff 	mov.w	r3, #4294967295
 801ca5a:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	627b      	str	r3, [r7, #36]	; 0x24
 801ca60:	e03f      	b.n	801cae2 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801ca62:	68fa      	ldr	r2, [r7, #12]
 801ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca66:	3304      	adds	r3, #4
 801ca68:	00db      	lsls	r3, r3, #3
 801ca6a:	4413      	add	r3, r2
 801ca6c:	685b      	ldr	r3, [r3, #4]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d034      	beq.n	801cadc <deliverMessage+0x92>
 801ca72:	68fa      	ldr	r2, [r7, #12]
 801ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca76:	3304      	adds	r3, #4
 801ca78:	00db      	lsls	r3, r3, #3
 801ca7a:	4413      	add	r3, r2
 801ca7c:	685b      	ldr	r3, [r3, #4]
 801ca7e:	4619      	mov	r1, r3
 801ca80:	68b8      	ldr	r0, [r7, #8]
 801ca82:	f001 f861 	bl	801db48 <MQTTPacket_equals>
 801ca86:	4603      	mov	r3, r0
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d10c      	bne.n	801caa6 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801ca8c:	68fa      	ldr	r2, [r7, #12]
 801ca8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca90:	3304      	adds	r3, #4
 801ca92:	00db      	lsls	r3, r3, #3
 801ca94:	4413      	add	r3, r2
 801ca96:	685b      	ldr	r3, [r3, #4]
 801ca98:	68b9      	ldr	r1, [r7, #8]
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	f7ff ff6c 	bl	801c978 <isTopicMatched>
 801caa0:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d01a      	beq.n	801cadc <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801caa6:	68fa      	ldr	r2, [r7, #12]
 801caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caaa:	3304      	adds	r3, #4
 801caac:	00db      	lsls	r3, r3, #3
 801caae:	4413      	add	r3, r2
 801cab0:	689b      	ldr	r3, [r3, #8]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d012      	beq.n	801cadc <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801cab6:	f107 0318 	add.w	r3, r7, #24
 801caba:	687a      	ldr	r2, [r7, #4]
 801cabc:	68b9      	ldr	r1, [r7, #8]
 801cabe:	4618      	mov	r0, r3
 801cac0:	f7ff fe00 	bl	801c6c4 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801cac4:	68fa      	ldr	r2, [r7, #12]
 801cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cac8:	3304      	adds	r3, #4
 801caca:	00db      	lsls	r3, r3, #3
 801cacc:	4413      	add	r3, r2
 801cace:	689b      	ldr	r3, [r3, #8]
 801cad0:	f107 0218 	add.w	r2, r7, #24
 801cad4:	4610      	mov	r0, r2
 801cad6:	4798      	blx	r3
                rc = SUCCESSS;
 801cad8:	2300      	movs	r3, #0
 801cada:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cade:	3301      	adds	r3, #1
 801cae0:	627b      	str	r3, [r7, #36]	; 0x24
 801cae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cae4:	2b04      	cmp	r3, #4
 801cae6:	ddbc      	ble.n	801ca62 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801cae8:	6a3b      	ldr	r3, [r7, #32]
 801caea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801caee:	d112      	bne.n	801cb16 <deliverMessage+0xcc>
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d00e      	beq.n	801cb16 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801caf8:	f107 0310 	add.w	r3, r7, #16
 801cafc:	687a      	ldr	r2, [r7, #4]
 801cafe:	68b9      	ldr	r1, [r7, #8]
 801cb00:	4618      	mov	r0, r3
 801cb02:	f7ff fddf 	bl	801c6c4 <NewMessageData>
        c->defaultMessageHandler(&md);
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb0a:	f107 0210 	add.w	r2, r7, #16
 801cb0e:	4610      	mov	r0, r2
 801cb10:	4798      	blx	r3
        rc = SUCCESSS;
 801cb12:	2300      	movs	r3, #0
 801cb14:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801cb16:	6a3b      	ldr	r3, [r7, #32]
}
 801cb18:	4618      	mov	r0, r3
 801cb1a:	3728      	adds	r7, #40	; 0x28
 801cb1c:	46bd      	mov	sp, r7
 801cb1e:	bd80      	pop	{r7, pc}

0801cb20 <keepalive>:


int keepalive(MQTTClient* c)
{
 801cb20:	b580      	push	{r7, lr}
 801cb22:	b086      	sub	sp, #24
 801cb24:	af00      	add	r7, sp, #0
 801cb26:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801cb28:	f04f 33ff 	mov.w	r3, #4294967295
 801cb2c:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	699b      	ldr	r3, [r3, #24]
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d102      	bne.n	801cb3c <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801cb36:	2300      	movs	r3, #0
 801cb38:	617b      	str	r3, [r7, #20]
        goto exit;
 801cb3a:	e033      	b.n	801cba4 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	3354      	adds	r3, #84	; 0x54
 801cb40:	4618      	mov	r0, r3
 801cb42:	f000 fa8b 	bl	801d05c <TimerIsExpired>
 801cb46:	4603      	mov	r3, r0
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d02a      	beq.n	801cba2 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	7f1b      	ldrb	r3, [r3, #28]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d126      	bne.n	801cba2 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801cb54:	f107 0308 	add.w	r3, r7, #8
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f000 fa72 	bl	801d042 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801cb5e:	f107 0308 	add.w	r3, r7, #8
 801cb62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801cb66:	4618      	mov	r0, r3
 801cb68:	f000 fa8e 	bl	801d088 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	691a      	ldr	r2, [r3, #16]
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	689b      	ldr	r3, [r3, #8]
 801cb74:	4619      	mov	r1, r3
 801cb76:	4610      	mov	r0, r2
 801cb78:	f000 fd4b 	bl	801d612 <MQTTSerialize_pingreq>
 801cb7c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801cb7e:	693b      	ldr	r3, [r7, #16]
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	dd0f      	ble.n	801cba4 <keepalive+0x84>
 801cb84:	f107 0308 	add.w	r3, r7, #8
 801cb88:	461a      	mov	r2, r3
 801cb8a:	6939      	ldr	r1, [r7, #16]
 801cb8c:	6878      	ldr	r0, [r7, #4]
 801cb8e:	f7ff fdc4 	bl	801c71a <sendPacket>
 801cb92:	6178      	str	r0, [r7, #20]
 801cb94:	697b      	ldr	r3, [r7, #20]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d104      	bne.n	801cba4 <keepalive+0x84>
                c->ping_outstanding = 1;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2201      	movs	r2, #1
 801cb9e:	771a      	strb	r2, [r3, #28]
 801cba0:	e000      	b.n	801cba4 <keepalive+0x84>
        }
    }

exit:
 801cba2:	bf00      	nop
    return rc;
 801cba4:	697b      	ldr	r3, [r7, #20]
}
 801cba6:	4618      	mov	r0, r3
 801cba8:	3718      	adds	r7, #24
 801cbaa:	46bd      	mov	sp, r7
 801cbac:	bd80      	pop	{r7, pc}
	...

0801cbb0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801cbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbb2:	b095      	sub	sp, #84	; 0x54
 801cbb4:	af06      	add	r7, sp, #24
 801cbb6:	6078      	str	r0, [r7, #4]
 801cbb8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801cbba:	6839      	ldr	r1, [r7, #0]
 801cbbc:	6878      	ldr	r0, [r7, #4]
 801cbbe:	f7ff fe77 	bl	801c8b0 <readPacket>
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 801cbc6:	2300      	movs	r3, #0
 801cbc8:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 801cbca:	2300      	movs	r3, #0
 801cbcc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 801cbce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cbd0:	3b02      	subs	r3, #2
 801cbd2:	2b0b      	cmp	r3, #11
 801cbd4:	f200 80c0 	bhi.w	801cd58 <cycle+0x1a8>
 801cbd8:	a201      	add	r2, pc, #4	; (adr r2, 801cbe0 <cycle+0x30>)
 801cbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbde:	bf00      	nop
 801cbe0:	0801cd59 	.word	0x0801cd59
 801cbe4:	0801cc11 	.word	0x0801cc11
 801cbe8:	0801cd59 	.word	0x0801cd59
 801cbec:	0801ccd9 	.word	0x0801ccd9
 801cbf0:	0801cd59 	.word	0x0801cd59
 801cbf4:	0801cd59 	.word	0x0801cd59
 801cbf8:	0801cd59 	.word	0x0801cd59
 801cbfc:	0801cd59 	.word	0x0801cd59
 801cc00:	0801cd59 	.word	0x0801cd59
 801cc04:	0801cd59 	.word	0x0801cd59
 801cc08:	0801cd59 	.word	0x0801cd59
 801cc0c:	0801cd4b 	.word	0x0801cd4b
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801cc14:	687a      	ldr	r2, [r7, #4]
 801cc16:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801cc18:	4616      	mov	r6, r2
 801cc1a:	f107 0210 	add.w	r2, r7, #16
 801cc1e:	1d15      	adds	r5, r2, #4
 801cc20:	f107 0210 	add.w	r2, r7, #16
 801cc24:	1c54      	adds	r4, r2, #1
 801cc26:	f107 010c 	add.w	r1, r7, #12
 801cc2a:	f107 0210 	add.w	r2, r7, #16
 801cc2e:	1c90      	adds	r0, r2, #2
 801cc30:	9604      	str	r6, [sp, #16]
 801cc32:	9303      	str	r3, [sp, #12]
 801cc34:	f107 0310 	add.w	r3, r7, #16
 801cc38:	330c      	adds	r3, #12
 801cc3a:	9302      	str	r3, [sp, #8]
 801cc3c:	f107 0310 	add.w	r3, r7, #16
 801cc40:	3308      	adds	r3, #8
 801cc42:	9301      	str	r3, [sp, #4]
 801cc44:	f107 0320 	add.w	r3, r7, #32
 801cc48:	9300      	str	r3, [sp, #0]
 801cc4a:	462b      	mov	r3, r5
 801cc4c:	4622      	mov	r2, r4
 801cc4e:	f000 fcef 	bl	801d630 <MQTTDeserialize_publish>
 801cc52:	4603      	mov	r3, r0
 801cc54:	2b01      	cmp	r3, #1
 801cc56:	f040 8083 	bne.w	801cd60 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	b2db      	uxtb	r3, r3
 801cc5e:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801cc60:	f107 0210 	add.w	r2, r7, #16
 801cc64:	f107 0320 	add.w	r3, r7, #32
 801cc68:	4619      	mov	r1, r3
 801cc6a:	6878      	ldr	r0, [r7, #4]
 801cc6c:	f7ff feed 	bl	801ca4a <deliverMessage>
            if (msg.qos != QOS0)
 801cc70:	7c3b      	ldrb	r3, [r7, #16]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d06d      	beq.n	801cd52 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801cc76:	7c3b      	ldrb	r3, [r7, #16]
 801cc78:	2b01      	cmp	r3, #1
 801cc7a:	d10c      	bne.n	801cc96 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	6918      	ldr	r0, [r3, #16]
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	689b      	ldr	r3, [r3, #8]
 801cc84:	4619      	mov	r1, r3
 801cc86:	8abb      	ldrh	r3, [r7, #20]
 801cc88:	9300      	str	r3, [sp, #0]
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	2204      	movs	r2, #4
 801cc8e:	f001 f828 	bl	801dce2 <MQTTSerialize_ack>
 801cc92:	6378      	str	r0, [r7, #52]	; 0x34
 801cc94:	e00e      	b.n	801ccb4 <cycle+0x104>
                else if (msg.qos == QOS2)
 801cc96:	7c3b      	ldrb	r3, [r7, #16]
 801cc98:	2b02      	cmp	r3, #2
 801cc9a:	d10b      	bne.n	801ccb4 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	6918      	ldr	r0, [r3, #16]
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	689b      	ldr	r3, [r3, #8]
 801cca4:	4619      	mov	r1, r3
 801cca6:	8abb      	ldrh	r3, [r7, #20]
 801cca8:	9300      	str	r3, [sp, #0]
 801ccaa:	2300      	movs	r3, #0
 801ccac:	2205      	movs	r2, #5
 801ccae:	f001 f818 	bl	801dce2 <MQTTSerialize_ack>
 801ccb2:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801ccb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	dc03      	bgt.n	801ccc2 <cycle+0x112>
                    rc = FAILURE;
 801ccba:	f04f 33ff 	mov.w	r3, #4294967295
 801ccbe:	633b      	str	r3, [r7, #48]	; 0x30
 801ccc0:	e005      	b.n	801ccce <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801ccc2:	683a      	ldr	r2, [r7, #0]
 801ccc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ccc6:	6878      	ldr	r0, [r7, #4]
 801ccc8:	f7ff fd27 	bl	801c71a <sendPacket>
 801cccc:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ccd4:	d13d      	bne.n	801cd52 <cycle+0x1a2>
                    goto exit; // there was a problem
 801ccd6:	e044      	b.n	801cd62 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	695c      	ldr	r4, [r3, #20]
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	68db      	ldr	r3, [r3, #12]
 801cce0:	f107 020a 	add.w	r2, r7, #10
 801cce4:	f107 0109 	add.w	r1, r7, #9
 801cce8:	f107 0008 	add.w	r0, r7, #8
 801ccec:	9300      	str	r3, [sp, #0]
 801ccee:	4623      	mov	r3, r4
 801ccf0:	f000 fd10 	bl	801d714 <MQTTDeserialize_ack>
 801ccf4:	4603      	mov	r3, r0
 801ccf6:	2b01      	cmp	r3, #1
 801ccf8:	d003      	beq.n	801cd02 <cycle+0x152>
                rc = FAILURE;
 801ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 801ccfe:	633b      	str	r3, [r7, #48]	; 0x30
 801cd00:	e01e      	b.n	801cd40 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	6918      	ldr	r0, [r3, #16]
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	689b      	ldr	r3, [r3, #8]
 801cd0a:	4619      	mov	r1, r3
 801cd0c:	897b      	ldrh	r3, [r7, #10]
 801cd0e:	9300      	str	r3, [sp, #0]
 801cd10:	2300      	movs	r3, #0
 801cd12:	2206      	movs	r2, #6
 801cd14:	f000 ffe5 	bl	801dce2 <MQTTSerialize_ack>
 801cd18:	6378      	str	r0, [r7, #52]	; 0x34
 801cd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	dc03      	bgt.n	801cd28 <cycle+0x178>
                rc = FAILURE;
 801cd20:	f04f 33ff 	mov.w	r3, #4294967295
 801cd24:	633b      	str	r3, [r7, #48]	; 0x30
 801cd26:	e00b      	b.n	801cd40 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801cd28:	683a      	ldr	r2, [r7, #0]
 801cd2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801cd2c:	6878      	ldr	r0, [r7, #4]
 801cd2e:	f7ff fcf4 	bl	801c71a <sendPacket>
 801cd32:	6338      	str	r0, [r7, #48]	; 0x30
 801cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d002      	beq.n	801cd40 <cycle+0x190>
                rc = FAILURE; // there was a problem
 801cd3a:	f04f 33ff 	mov.w	r3, #4294967295
 801cd3e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd46:	d106      	bne.n	801cd56 <cycle+0x1a6>
                goto exit; // there was a problem
 801cd48:	e00b      	b.n	801cd62 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	771a      	strb	r2, [r3, #28]
            break;
 801cd50:	e002      	b.n	801cd58 <cycle+0x1a8>
            break;
 801cd52:	bf00      	nop
 801cd54:	e000      	b.n	801cd58 <cycle+0x1a8>
            break;
 801cd56:	bf00      	nop
    }
    keepalive(c);
 801cd58:	6878      	ldr	r0, [r7, #4]
 801cd5a:	f7ff fee1 	bl	801cb20 <keepalive>
 801cd5e:	e000      	b.n	801cd62 <cycle+0x1b2>
                goto exit;
 801cd60:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d101      	bne.n	801cd6c <cycle+0x1bc>
        rc = packet_type;
 801cd68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cd6a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 801cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801cd6e:	4618      	mov	r0, r3
 801cd70:	373c      	adds	r7, #60	; 0x3c
 801cd72:	46bd      	mov	sp, r7
 801cd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd76:	bf00      	nop

0801cd78 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b086      	sub	sp, #24
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	60f8      	str	r0, [r7, #12]
 801cd80:	60b9      	str	r1, [r7, #8]
 801cd82:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801cd84:	f04f 33ff 	mov.w	r3, #4294967295
 801cd88:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801cd8a:	6878      	ldr	r0, [r7, #4]
 801cd8c:	f000 f966 	bl	801d05c <TimerIsExpired>
 801cd90:	4603      	mov	r3, r0
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d109      	bne.n	801cdaa <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801cd96:	6879      	ldr	r1, [r7, #4]
 801cd98:	68f8      	ldr	r0, [r7, #12]
 801cd9a:	f7ff ff09 	bl	801cbb0 <cycle>
 801cd9e:	6178      	str	r0, [r7, #20]
 801cda0:	697a      	ldr	r2, [r7, #20]
 801cda2:	68bb      	ldr	r3, [r7, #8]
 801cda4:	429a      	cmp	r2, r3
 801cda6:	d1f0      	bne.n	801cd8a <waitfor+0x12>
 801cda8:	e000      	b.n	801cdac <waitfor+0x34>
            break; // we timed out
 801cdaa:	bf00      	nop

    return rc;
 801cdac:	697b      	ldr	r3, [r7, #20]
}
 801cdae:	4618      	mov	r0, r3
 801cdb0:	3718      	adds	r7, #24
 801cdb2:	46bd      	mov	sp, r7
 801cdb4:	bd80      	pop	{r7, pc}
	...

0801cdb8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801cdb8:	b580      	push	{r7, lr}
 801cdba:	b09e      	sub	sp, #120	; 0x78
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	6078      	str	r0, [r7, #4]
 801cdc0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801cdc2:	f04f 33ff 	mov.w	r3, #4294967295
 801cdc6:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801cdc8:	4a3d      	ldr	r2, [pc, #244]	; (801cec0 <MQTTConnect+0x108>)
 801cdca:	f107 0310 	add.w	r3, r7, #16
 801cdce:	4611      	mov	r1, r2
 801cdd0:	2258      	movs	r2, #88	; 0x58
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	f010 fca5 	bl	802d722 <memcpy>
    int len = 0;
 801cdd8:	2300      	movs	r3, #0
 801cdda:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	6a1b      	ldr	r3, [r3, #32]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d15d      	bne.n	801cea0 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801cde4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801cde8:	4618      	mov	r0, r3
 801cdea:	f000 f92a 	bl	801d042 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	685a      	ldr	r2, [r3, #4]
 801cdf2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801cdf6:	4611      	mov	r1, r2
 801cdf8:	4618      	mov	r0, r3
 801cdfa:	f000 f945 	bl	801d088 <TimerCountdownMS>

    if (options == 0)
 801cdfe:	683b      	ldr	r3, [r7, #0]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d102      	bne.n	801ce0a <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801ce04:	f107 0310 	add.w	r3, r7, #16
 801ce08:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801ce0a:	683b      	ldr	r3, [r7, #0]
 801ce0c:	8b1b      	ldrh	r3, [r3, #24]
 801ce0e:	461a      	mov	r2, r3
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	699b      	ldr	r3, [r3, #24]
 801ce1e:	4619      	mov	r1, r3
 801ce20:	4610      	mov	r0, r2
 801ce22:	f000 f945 	bl	801d0b0 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	6918      	ldr	r0, [r3, #16]
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	689b      	ldr	r3, [r3, #8]
 801ce2e:	683a      	ldr	r2, [r7, #0]
 801ce30:	4619      	mov	r1, r3
 801ce32:	f000 fa75 	bl	801d320 <MQTTSerialize_connect>
 801ce36:	6738      	str	r0, [r7, #112]	; 0x70
 801ce38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	dd32      	ble.n	801cea4 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801ce3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ce42:	461a      	mov	r2, r3
 801ce44:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801ce46:	6878      	ldr	r0, [r7, #4]
 801ce48:	f7ff fc67 	bl	801c71a <sendPacket>
 801ce4c:	6778      	str	r0, [r7, #116]	; 0x74
 801ce4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d129      	bne.n	801cea8 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801ce54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ce58:	461a      	mov	r2, r3
 801ce5a:	2102      	movs	r1, #2
 801ce5c:	6878      	ldr	r0, [r7, #4]
 801ce5e:	f7ff ff8b 	bl	801cd78 <waitfor>
 801ce62:	4603      	mov	r3, r0
 801ce64:	2b02      	cmp	r3, #2
 801ce66:	d117      	bne.n	801ce98 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801ce68:	23ff      	movs	r3, #255	; 0xff
 801ce6a:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	695a      	ldr	r2, [r3, #20]
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	68db      	ldr	r3, [r3, #12]
 801ce78:	f107 010f 	add.w	r1, r7, #15
 801ce7c:	f107 000e 	add.w	r0, r7, #14
 801ce80:	f000 fb3a 	bl	801d4f8 <MQTTDeserialize_connack>
 801ce84:	4603      	mov	r3, r0
 801ce86:	2b01      	cmp	r3, #1
 801ce88:	d102      	bne.n	801ce90 <MQTTConnect+0xd8>
            rc = connack_rc;
 801ce8a:	7bfb      	ldrb	r3, [r7, #15]
 801ce8c:	677b      	str	r3, [r7, #116]	; 0x74
 801ce8e:	e00c      	b.n	801ceaa <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801ce90:	f04f 33ff 	mov.w	r3, #4294967295
 801ce94:	677b      	str	r3, [r7, #116]	; 0x74
 801ce96:	e008      	b.n	801ceaa <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801ce98:	f04f 33ff 	mov.w	r3, #4294967295
 801ce9c:	677b      	str	r3, [r7, #116]	; 0x74
 801ce9e:	e004      	b.n	801ceaa <MQTTConnect+0xf2>
		goto exit;
 801cea0:	bf00      	nop
 801cea2:	e002      	b.n	801ceaa <MQTTConnect+0xf2>
        goto exit;
 801cea4:	bf00      	nop
 801cea6:	e000      	b.n	801ceaa <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801cea8:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801ceaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d102      	bne.n	801ceb6 <MQTTConnect+0xfe>
        c->isconnected = 1;
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	2201      	movs	r2, #1
 801ceb4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801ceb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801ceb8:	4618      	mov	r0, r3
 801ceba:	3778      	adds	r7, #120	; 0x78
 801cebc:	46bd      	mov	sp, r7
 801cebe:	bd80      	pop	{r7, pc}
 801cec0:	080326e8 	.word	0x080326e8

0801cec4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801cec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cec6:	b097      	sub	sp, #92	; 0x5c
 801cec8:	af08      	add	r7, sp, #32
 801ceca:	60f8      	str	r0, [r7, #12]
 801cecc:	60b9      	str	r1, [r7, #8]
 801cece:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801ced0:	f04f 33ff 	mov.w	r3, #4294967295
 801ced4:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801ced6:	2300      	movs	r3, #0
 801ced8:	61fb      	str	r3, [r7, #28]
 801ceda:	2300      	movs	r3, #0
 801cedc:	623b      	str	r3, [r7, #32]
 801cede:	2300      	movs	r3, #0
 801cee0:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801cee2:	68bb      	ldr	r3, [r7, #8]
 801cee4:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801cee6:	2300      	movs	r3, #0
 801cee8:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	6a1b      	ldr	r3, [r3, #32]
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	f000 809b 	beq.w	801d02a <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801cef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cef8:	4618      	mov	r0, r3
 801cefa:	f000 f8a2 	bl	801d042 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	685a      	ldr	r2, [r3, #4]
 801cf02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf06:	4611      	mov	r1, r2
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f000 f8bd 	bl	801d088 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	781b      	ldrb	r3, [r3, #0]
 801cf12:	2b01      	cmp	r3, #1
 801cf14:	d003      	beq.n	801cf1e <MQTTPublish+0x5a>
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	781b      	ldrb	r3, [r3, #0]
 801cf1a:	2b02      	cmp	r3, #2
 801cf1c:	d106      	bne.n	801cf2c <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801cf1e:	68f8      	ldr	r0, [r7, #12]
 801cf20:	f7ff fbe2 	bl	801c6e8 <getNextPacketId>
 801cf24:	4603      	mov	r3, r0
 801cf26:	b29a      	uxth	r2, r3
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	691b      	ldr	r3, [r3, #16]
 801cf30:	603b      	str	r3, [r7, #0]
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	689b      	ldr	r3, [r3, #8]
 801cf36:	469c      	mov	ip, r3
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	781b      	ldrb	r3, [r3, #0]
 801cf3c:	469e      	mov	lr, r3
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	785d      	ldrb	r5, [r3, #1]
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	689b      	ldr	r3, [r3, #8]
 801cf4a:	687a      	ldr	r2, [r7, #4]
 801cf4c:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801cf4e:	9206      	str	r2, [sp, #24]
 801cf50:	9305      	str	r3, [sp, #20]
 801cf52:	ac02      	add	r4, sp, #8
 801cf54:	f107 031c 	add.w	r3, r7, #28
 801cf58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801cf5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801cf60:	9601      	str	r6, [sp, #4]
 801cf62:	9500      	str	r5, [sp, #0]
 801cf64:	4673      	mov	r3, lr
 801cf66:	2200      	movs	r2, #0
 801cf68:	4661      	mov	r1, ip
 801cf6a:	6838      	ldr	r0, [r7, #0]
 801cf6c:	f000 fe43 	bl	801dbf6 <MQTTSerialize_publish>
 801cf70:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	dd5a      	ble.n	801d02e <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801cf78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf7c:	461a      	mov	r2, r3
 801cf7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cf80:	68f8      	ldr	r0, [r7, #12]
 801cf82:	f7ff fbca 	bl	801c71a <sendPacket>
 801cf86:	6378      	str	r0, [r7, #52]	; 0x34
 801cf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d151      	bne.n	801d032 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	781b      	ldrb	r3, [r3, #0]
 801cf92:	2b01      	cmp	r3, #1
 801cf94:	d122      	bne.n	801cfdc <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801cf96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf9a:	461a      	mov	r2, r3
 801cf9c:	2104      	movs	r1, #4
 801cf9e:	68f8      	ldr	r0, [r7, #12]
 801cfa0:	f7ff feea 	bl	801cd78 <waitfor>
 801cfa4:	4603      	mov	r3, r0
 801cfa6:	2b04      	cmp	r3, #4
 801cfa8:	d114      	bne.n	801cfd4 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	695c      	ldr	r4, [r3, #20]
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	68db      	ldr	r3, [r3, #12]
 801cfb2:	f107 021a 	add.w	r2, r7, #26
 801cfb6:	f107 0119 	add.w	r1, r7, #25
 801cfba:	f107 0018 	add.w	r0, r7, #24
 801cfbe:	9300      	str	r3, [sp, #0]
 801cfc0:	4623      	mov	r3, r4
 801cfc2:	f000 fba7 	bl	801d714 <MQTTDeserialize_ack>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	2b01      	cmp	r3, #1
 801cfca:	d035      	beq.n	801d038 <MQTTPublish+0x174>
                rc = FAILURE;
 801cfcc:	f04f 33ff 	mov.w	r3, #4294967295
 801cfd0:	637b      	str	r3, [r7, #52]	; 0x34
 801cfd2:	e031      	b.n	801d038 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801cfd4:	f04f 33ff 	mov.w	r3, #4294967295
 801cfd8:	637b      	str	r3, [r7, #52]	; 0x34
 801cfda:	e02d      	b.n	801d038 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	781b      	ldrb	r3, [r3, #0]
 801cfe0:	2b02      	cmp	r3, #2
 801cfe2:	d128      	bne.n	801d036 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801cfe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cfe8:	461a      	mov	r2, r3
 801cfea:	2107      	movs	r1, #7
 801cfec:	68f8      	ldr	r0, [r7, #12]
 801cfee:	f7ff fec3 	bl	801cd78 <waitfor>
 801cff2:	4603      	mov	r3, r0
 801cff4:	2b07      	cmp	r3, #7
 801cff6:	d114      	bne.n	801d022 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	695c      	ldr	r4, [r3, #20]
 801cffc:	68fb      	ldr	r3, [r7, #12]
 801cffe:	68db      	ldr	r3, [r3, #12]
 801d000:	f107 0216 	add.w	r2, r7, #22
 801d004:	f107 0115 	add.w	r1, r7, #21
 801d008:	f107 0014 	add.w	r0, r7, #20
 801d00c:	9300      	str	r3, [sp, #0]
 801d00e:	4623      	mov	r3, r4
 801d010:	f000 fb80 	bl	801d714 <MQTTDeserialize_ack>
 801d014:	4603      	mov	r3, r0
 801d016:	2b01      	cmp	r3, #1
 801d018:	d00e      	beq.n	801d038 <MQTTPublish+0x174>
                rc = FAILURE;
 801d01a:	f04f 33ff 	mov.w	r3, #4294967295
 801d01e:	637b      	str	r3, [r7, #52]	; 0x34
 801d020:	e00a      	b.n	801d038 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d022:	f04f 33ff 	mov.w	r3, #4294967295
 801d026:	637b      	str	r3, [r7, #52]	; 0x34
 801d028:	e006      	b.n	801d038 <MQTTPublish+0x174>
		goto exit;
 801d02a:	bf00      	nop
 801d02c:	e004      	b.n	801d038 <MQTTPublish+0x174>
        goto exit;
 801d02e:	bf00      	nop
 801d030:	e002      	b.n	801d038 <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d032:	bf00      	nop
 801d034:	e000      	b.n	801d038 <MQTTPublish+0x174>
    }

exit:
 801d036:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d03a:	4618      	mov	r0, r3
 801d03c:	373c      	adds	r7, #60	; 0x3c
 801d03e:	46bd      	mov	sp, r7
 801d040:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d042 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d042:	b480      	push	{r7}
 801d044:	b083      	sub	sp, #12
 801d046:	af00      	add	r7, sp, #0
 801d048:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	2200      	movs	r2, #0
 801d04e:	605a      	str	r2, [r3, #4]
}
 801d050:	bf00      	nop
 801d052:	370c      	adds	r7, #12
 801d054:	46bd      	mov	sp, r7
 801d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d05a:	4770      	bx	lr

0801d05c <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d05c:	b480      	push	{r7}
 801d05e:	b085      	sub	sp, #20
 801d060:	af00      	add	r7, sp, #0
 801d062:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	685a      	ldr	r2, [r3, #4]
 801d068:	4b06      	ldr	r3, [pc, #24]	; (801d084 <TimerIsExpired+0x28>)
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	1ad3      	subs	r3, r2, r3
 801d06e:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	0fdb      	lsrs	r3, r3, #31
 801d074:	b2db      	uxtb	r3, r3
}
 801d076:	4618      	mov	r0, r3
 801d078:	3714      	adds	r7, #20
 801d07a:	46bd      	mov	sp, r7
 801d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d080:	4770      	bx	lr
 801d082:	bf00      	nop
 801d084:	200009bc 	.word	0x200009bc

0801d088 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d088:	b480      	push	{r7}
 801d08a:	b083      	sub	sp, #12
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
 801d090:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d092:	4b06      	ldr	r3, [pc, #24]	; (801d0ac <TimerCountdownMS+0x24>)
 801d094:	681a      	ldr	r2, [r3, #0]
 801d096:	683b      	ldr	r3, [r7, #0]
 801d098:	441a      	add	r2, r3
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	605a      	str	r2, [r3, #4]
}
 801d09e:	bf00      	nop
 801d0a0:	370c      	adds	r7, #12
 801d0a2:	46bd      	mov	sp, r7
 801d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0a8:	4770      	bx	lr
 801d0aa:	bf00      	nop
 801d0ac:	200009bc 	.word	0x200009bc

0801d0b0 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d0b0:	b480      	push	{r7}
 801d0b2:	b083      	sub	sp, #12
 801d0b4:	af00      	add	r7, sp, #0
 801d0b6:	6078      	str	r0, [r7, #4]
 801d0b8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d0ba:	683b      	ldr	r3, [r7, #0]
 801d0bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d0c0:	fb03 f202 	mul.w	r2, r3, r2
 801d0c4:	4b05      	ldr	r3, [pc, #20]	; (801d0dc <TimerCountdown+0x2c>)
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	441a      	add	r2, r3
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	605a      	str	r2, [r3, #4]
}
 801d0ce:	bf00      	nop
 801d0d0:	370c      	adds	r7, #12
 801d0d2:	46bd      	mov	sp, r7
 801d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0d8:	4770      	bx	lr
 801d0da:	bf00      	nop
 801d0dc:	200009bc 	.word	0x200009bc

0801d0e0 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d0e0:	b480      	push	{r7}
 801d0e2:	b085      	sub	sp, #20
 801d0e4:	af00      	add	r7, sp, #0
 801d0e6:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	685a      	ldr	r2, [r3, #4]
 801d0ec:	4b06      	ldr	r3, [pc, #24]	; (801d108 <TimerLeftMS+0x28>)
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	1ad3      	subs	r3, r2, r3
 801d0f2:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	3714      	adds	r7, #20
 801d0fe:	46bd      	mov	sp, r7
 801d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d104:	4770      	bx	lr
 801d106:	bf00      	nop
 801d108:	200009bc 	.word	0x200009bc

0801d10c <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d10c:	b480      	push	{r7}
 801d10e:	b083      	sub	sp, #12
 801d110:	af00      	add	r7, sp, #0
 801d112:	6078      	str	r0, [r7, #4]
 801d114:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	683a      	ldr	r2, [r7, #0]
 801d11a:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	4a07      	ldr	r2, [pc, #28]	; (801d13c <NewNetwork+0x30>)
 801d120:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	4a06      	ldr	r2, [pc, #24]	; (801d140 <NewNetwork+0x34>)
 801d126:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	4a06      	ldr	r2, [pc, #24]	; (801d144 <NewNetwork+0x38>)
 801d12c:	60da      	str	r2, [r3, #12]
}
 801d12e:	bf00      	nop
 801d130:	370c      	adds	r7, #12
 801d132:	46bd      	mov	sp, r7
 801d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d138:	4770      	bx	lr
 801d13a:	bf00      	nop
 801d13c:	0801d149 	.word	0x0801d149
 801d140:	0801d1a3 	.word	0x0801d1a3
 801d144:	0801d1eb 	.word	0x0801d1eb

0801d148 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d148:	b580      	push	{r7, lr}
 801d14a:	b084      	sub	sp, #16
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	60f8      	str	r0, [r7, #12]
 801d150:	60b9      	str	r1, [r7, #8]
 801d152:	607a      	str	r2, [r7, #4]
 801d154:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	009b      	lsls	r3, r3, #2
 801d15c:	3301      	adds	r3, #1
 801d15e:	00db      	lsls	r3, r3, #3
 801d160:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d164:	4618      	mov	r0, r3
 801d166:	f7fb f865 	bl	8018234 <WIZCHIP_READ>
 801d16a:	4603      	mov	r3, r0
 801d16c:	2b17      	cmp	r3, #23
 801d16e:	d113      	bne.n	801d198 <w5x00_read+0x50>
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	b2db      	uxtb	r3, r3
 801d176:	4618      	mov	r0, r3
 801d178:	f7fb fa01 	bl	801857e <getSn_RX_RSR>
 801d17c:	4603      	mov	r3, r0
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d00a      	beq.n	801d198 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	b2db      	uxtb	r3, r3
 801d188:	687a      	ldr	r2, [r7, #4]
 801d18a:	b292      	uxth	r2, r2
 801d18c:	68b9      	ldr	r1, [r7, #8]
 801d18e:	4618      	mov	r0, r3
 801d190:	f7fb ff68 	bl	8019064 <recv>
 801d194:	4603      	mov	r3, r0
 801d196:	e000      	b.n	801d19a <w5x00_read+0x52>

	return SOCK_ERROR;
 801d198:	2300      	movs	r3, #0
}
 801d19a:	4618      	mov	r0, r3
 801d19c:	3710      	adds	r7, #16
 801d19e:	46bd      	mov	sp, r7
 801d1a0:	bd80      	pop	{r7, pc}

0801d1a2 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d1a2:	b580      	push	{r7, lr}
 801d1a4:	b084      	sub	sp, #16
 801d1a6:	af00      	add	r7, sp, #0
 801d1a8:	60f8      	str	r0, [r7, #12]
 801d1aa:	60b9      	str	r1, [r7, #8]
 801d1ac:	607a      	str	r2, [r7, #4]
 801d1ae:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	009b      	lsls	r3, r3, #2
 801d1b6:	3301      	adds	r3, #1
 801d1b8:	00db      	lsls	r3, r3, #3
 801d1ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f7fb f838 	bl	8018234 <WIZCHIP_READ>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	2b17      	cmp	r3, #23
 801d1c8:	d10a      	bne.n	801d1e0 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	b2db      	uxtb	r3, r3
 801d1d0:	687a      	ldr	r2, [r7, #4]
 801d1d2:	b292      	uxth	r2, r2
 801d1d4:	68b9      	ldr	r1, [r7, #8]
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	f7fb fe4a 	bl	8018e70 <send>
 801d1dc:	4603      	mov	r3, r0
 801d1de:	e000      	b.n	801d1e2 <w5x00_write+0x40>

	return SOCK_ERROR;
 801d1e0:	2300      	movs	r3, #0
}
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	3710      	adds	r7, #16
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd80      	pop	{r7, pc}

0801d1ea <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d1ea:	b580      	push	{r7, lr}
 801d1ec:	b082      	sub	sp, #8
 801d1ee:	af00      	add	r7, sp, #0
 801d1f0:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	b2db      	uxtb	r3, r3
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	f7fb fdc3 	bl	8018d84 <disconnect>
}
 801d1fe:	bf00      	nop
 801d200:	3708      	adds	r7, #8
 801d202:	46bd      	mov	sp, r7
 801d204:	bd80      	pop	{r7, pc}

0801d206 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d206:	b580      	push	{r7, lr}
 801d208:	b086      	sub	sp, #24
 801d20a:	af00      	add	r7, sp, #0
 801d20c:	60f8      	str	r0, [r7, #12]
 801d20e:	60b9      	str	r1, [r7, #8]
 801d210:	4613      	mov	r3, r2
 801d212:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d214:	f243 0339 	movw	r3, #12345	; 0x3039
 801d218:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	b2d8      	uxtb	r0, r3
 801d220:	8afa      	ldrh	r2, [r7, #22]
 801d222:	2300      	movs	r3, #0
 801d224:	2101      	movs	r1, #1
 801d226:	f7fb faf5 	bl	8018814 <socket>
 801d22a:	4603      	mov	r3, r0
 801d22c:	461a      	mov	r2, r3
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	429a      	cmp	r2, r3
 801d234:	d001      	beq.n	801d23a <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d236:	2300      	movs	r3, #0
 801d238:	e00d      	b.n	801d256 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	b2db      	uxtb	r3, r3
 801d240:	88fa      	ldrh	r2, [r7, #6]
 801d242:	68b9      	ldr	r1, [r7, #8]
 801d244:	4618      	mov	r0, r3
 801d246:	f7fb fcc1 	bl	8018bcc <connect>
 801d24a:	4603      	mov	r3, r0
 801d24c:	2b01      	cmp	r3, #1
 801d24e:	d001      	beq.n	801d254 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d250:	2300      	movs	r3, #0
 801d252:	e000      	b.n	801d256 <ConnectNetwork+0x50>

	return SOCK_OK;
 801d254:	2301      	movs	r3, #1
}
 801d256:	4618      	mov	r0, r3
 801d258:	3718      	adds	r7, #24
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd80      	pop	{r7, pc}

0801d25e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d25e:	b590      	push	{r4, r7, lr}
 801d260:	b085      	sub	sp, #20
 801d262:	af00      	add	r7, sp, #0
 801d264:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d266:	2300      	movs	r3, #0
 801d268:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	7a1b      	ldrb	r3, [r3, #8]
 801d26e:	2b03      	cmp	r3, #3
 801d270:	d102      	bne.n	801d278 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d272:	230c      	movs	r3, #12
 801d274:	60fb      	str	r3, [r7, #12]
 801d276:	e005      	b.n	801d284 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	7a1b      	ldrb	r3, [r3, #8]
 801d27c:	2b04      	cmp	r3, #4
 801d27e:	d101      	bne.n	801d284 <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d280:	230a      	movs	r3, #10
 801d282:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	330c      	adds	r3, #12
 801d288:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d28c:	f000 fc43 	bl	801db16 <MQTTstrlen>
 801d290:	4603      	mov	r3, r0
 801d292:	3302      	adds	r3, #2
 801d294:	68fa      	ldr	r2, [r7, #12]
 801d296:	4413      	add	r3, r2
 801d298:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	7edb      	ldrb	r3, [r3, #27]
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d013      	beq.n	801d2ca <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	3324      	adds	r3, #36	; 0x24
 801d2a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d2aa:	f000 fc34 	bl	801db16 <MQTTstrlen>
 801d2ae:	4603      	mov	r3, r0
 801d2b0:	1c9c      	adds	r4, r3, #2
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	3330      	adds	r3, #48	; 0x30
 801d2b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d2ba:	f000 fc2c 	bl	801db16 <MQTTstrlen>
 801d2be:	4603      	mov	r3, r0
 801d2c0:	4423      	add	r3, r4
 801d2c2:	3302      	adds	r3, #2
 801d2c4:	68fa      	ldr	r2, [r7, #12]
 801d2c6:	4413      	add	r3, r2
 801d2c8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d103      	bne.n	801d2da <MQTTSerialize_connectLength+0x7c>
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d00a      	beq.n	801d2f0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	3340      	adds	r3, #64	; 0x40
 801d2de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d2e2:	f000 fc18 	bl	801db16 <MQTTstrlen>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	3302      	adds	r3, #2
 801d2ea:	68fa      	ldr	r2, [r7, #12]
 801d2ec:	4413      	add	r3, r2
 801d2ee:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d103      	bne.n	801d300 <MQTTSerialize_connectLength+0xa2>
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d00a      	beq.n	801d316 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	334c      	adds	r3, #76	; 0x4c
 801d304:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d308:	f000 fc05 	bl	801db16 <MQTTstrlen>
 801d30c:	4603      	mov	r3, r0
 801d30e:	3302      	adds	r3, #2
 801d310:	68fa      	ldr	r2, [r7, #12]
 801d312:	4413      	add	r3, r2
 801d314:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801d316:	68fb      	ldr	r3, [r7, #12]
}
 801d318:	4618      	mov	r0, r3
 801d31a:	3714      	adds	r7, #20
 801d31c:	46bd      	mov	sp, r7
 801d31e:	bd90      	pop	{r4, r7, pc}

0801d320 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b08a      	sub	sp, #40	; 0x28
 801d324:	af00      	add	r7, sp, #0
 801d326:	60f8      	str	r0, [r7, #12]
 801d328:	60b9      	str	r1, [r7, #8]
 801d32a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801d330:	2300      	movs	r3, #0
 801d332:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801d334:	2300      	movs	r3, #0
 801d336:	617b      	str	r3, [r7, #20]
	int len = 0;
 801d338:	2300      	movs	r3, #0
 801d33a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801d33c:	f04f 33ff 	mov.w	r3, #4294967295
 801d340:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801d342:	6878      	ldr	r0, [r7, #4]
 801d344:	f7ff ff8b 	bl	801d25e <MQTTSerialize_connectLength>
 801d348:	6238      	str	r0, [r7, #32]
 801d34a:	6a38      	ldr	r0, [r7, #32]
 801d34c:	f000 fa98 	bl	801d880 <MQTTPacket_len>
 801d350:	4602      	mov	r2, r0
 801d352:	68bb      	ldr	r3, [r7, #8]
 801d354:	4293      	cmp	r3, r2
 801d356:	da03      	bge.n	801d360 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d358:	f06f 0301 	mvn.w	r3, #1
 801d35c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801d35e:	e0c2      	b.n	801d4e6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801d360:	2300      	movs	r3, #0
 801d362:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801d364:	7e3b      	ldrb	r3, [r7, #24]
 801d366:	2201      	movs	r2, #1
 801d368:	f362 1307 	bfi	r3, r2, #4, #4
 801d36c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d36e:	7e3a      	ldrb	r2, [r7, #24]
 801d370:	f107 031c 	add.w	r3, r7, #28
 801d374:	4611      	mov	r1, r2
 801d376:	4618      	mov	r0, r3
 801d378:	f000 fb11 	bl	801d99e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801d37c:	69fb      	ldr	r3, [r7, #28]
 801d37e:	6a39      	ldr	r1, [r7, #32]
 801d380:	4618      	mov	r0, r3
 801d382:	f000 fa12 	bl	801d7aa <MQTTPacket_encode>
 801d386:	4602      	mov	r2, r0
 801d388:	69fb      	ldr	r3, [r7, #28]
 801d38a:	4413      	add	r3, r2
 801d38c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	7a1b      	ldrb	r3, [r3, #8]
 801d392:	2b04      	cmp	r3, #4
 801d394:	d10c      	bne.n	801d3b0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801d396:	f107 031c 	add.w	r3, r7, #28
 801d39a:	4955      	ldr	r1, [pc, #340]	; (801d4f0 <MQTTSerialize_connect+0x1d0>)
 801d39c:	4618      	mov	r0, r3
 801d39e:	f000 fb3c 	bl	801da1a <writeCString>
		writeChar(&ptr, (char) 4);
 801d3a2:	f107 031c 	add.w	r3, r7, #28
 801d3a6:	2104      	movs	r1, #4
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	f000 faf8 	bl	801d99e <writeChar>
 801d3ae:	e00b      	b.n	801d3c8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801d3b0:	f107 031c 	add.w	r3, r7, #28
 801d3b4:	494f      	ldr	r1, [pc, #316]	; (801d4f4 <MQTTSerialize_connect+0x1d4>)
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f000 fb2f 	bl	801da1a <writeCString>
		writeChar(&ptr, (char) 3);
 801d3bc:	f107 031c 	add.w	r3, r7, #28
 801d3c0:	2103      	movs	r1, #3
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	f000 faeb 	bl	801d99e <writeChar>
	}

	flags.all = 0;
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	7e9b      	ldrb	r3, [r3, #26]
 801d3d0:	f003 0301 	and.w	r3, r3, #1
 801d3d4:	b2da      	uxtb	r2, r3
 801d3d6:	7d3b      	ldrb	r3, [r7, #20]
 801d3d8:	f362 0341 	bfi	r3, r2, #1, #1
 801d3dc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	7edb      	ldrb	r3, [r3, #27]
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	bf14      	ite	ne
 801d3e6:	2301      	movne	r3, #1
 801d3e8:	2300      	moveq	r3, #0
 801d3ea:	b2da      	uxtb	r2, r3
 801d3ec:	7d3b      	ldrb	r3, [r7, #20]
 801d3ee:	f362 0382 	bfi	r3, r2, #2, #1
 801d3f2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801d3f4:	7d3b      	ldrb	r3, [r7, #20]
 801d3f6:	f003 0304 	and.w	r3, r3, #4
 801d3fa:	b2db      	uxtb	r3, r3
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d013      	beq.n	801d428 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d406:	f003 0303 	and.w	r3, r3, #3
 801d40a:	b2da      	uxtb	r2, r3
 801d40c:	7d3b      	ldrb	r3, [r7, #20]
 801d40e:	f362 03c4 	bfi	r3, r2, #3, #2
 801d412:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d41a:	f003 0301 	and.w	r3, r3, #1
 801d41e:	b2da      	uxtb	r2, r3
 801d420:	7d3b      	ldrb	r3, [r7, #20]
 801d422:	f362 1345 	bfi	r3, r2, #5, #1
 801d426:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d103      	bne.n	801d438 <MQTTSerialize_connect+0x118>
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d434:	2b00      	cmp	r3, #0
 801d436:	d003      	beq.n	801d440 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801d438:	7d3b      	ldrb	r3, [r7, #20]
 801d43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d43e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d444:	2b00      	cmp	r3, #0
 801d446:	d103      	bne.n	801d450 <MQTTSerialize_connect+0x130>
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d003      	beq.n	801d458 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801d450:	7d3b      	ldrb	r3, [r7, #20]
 801d452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d456:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801d458:	7d3a      	ldrb	r2, [r7, #20]
 801d45a:	f107 031c 	add.w	r3, r7, #28
 801d45e:	4611      	mov	r1, r2
 801d460:	4618      	mov	r0, r3
 801d462:	f000 fa9c 	bl	801d99e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	8b1b      	ldrh	r3, [r3, #24]
 801d46a:	461a      	mov	r2, r3
 801d46c:	f107 031c 	add.w	r3, r7, #28
 801d470:	4611      	mov	r1, r2
 801d472:	4618      	mov	r0, r3
 801d474:	f000 faa8 	bl	801d9c8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	f107 001c 	add.w	r0, r7, #28
 801d47e:	330c      	adds	r3, #12
 801d480:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d482:	f000 fae9 	bl	801da58 <writeMQTTString>
	if (options->willFlag)
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	7edb      	ldrb	r3, [r3, #27]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d00d      	beq.n	801d4aa <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	f107 001c 	add.w	r0, r7, #28
 801d494:	3324      	adds	r3, #36	; 0x24
 801d496:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d498:	f000 fade 	bl	801da58 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	f107 001c 	add.w	r0, r7, #28
 801d4a2:	3330      	adds	r3, #48	; 0x30
 801d4a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d4a6:	f000 fad7 	bl	801da58 <writeMQTTString>
	}
	if (flags.bits.username)
 801d4aa:	7d3b      	ldrb	r3, [r7, #20]
 801d4ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d4b0:	b2db      	uxtb	r3, r3
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d006      	beq.n	801d4c4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	f107 001c 	add.w	r0, r7, #28
 801d4bc:	3340      	adds	r3, #64	; 0x40
 801d4be:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d4c0:	f000 faca 	bl	801da58 <writeMQTTString>
	if (flags.bits.password)
 801d4c4:	7d3b      	ldrb	r3, [r7, #20]
 801d4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d4ca:	b2db      	uxtb	r3, r3
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d006      	beq.n	801d4de <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	f107 001c 	add.w	r0, r7, #28
 801d4d6:	334c      	adds	r3, #76	; 0x4c
 801d4d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d4da:	f000 fabd 	bl	801da58 <writeMQTTString>

	rc = ptr - buf;
 801d4de:	69fa      	ldr	r2, [r7, #28]
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	1ad3      	subs	r3, r2, r3
 801d4e4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	3728      	adds	r7, #40	; 0x28
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	bd80      	pop	{r7, pc}
 801d4f0:	08032740 	.word	0x08032740
 801d4f4:	08032748 	.word	0x08032748

0801d4f8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b08a      	sub	sp, #40	; 0x28
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	60f8      	str	r0, [r7, #12]
 801d500:	60b9      	str	r1, [r7, #8]
 801d502:	607a      	str	r2, [r7, #4]
 801d504:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d506:	2300      	movs	r3, #0
 801d508:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d50e:	2300      	movs	r3, #0
 801d510:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d512:	2300      	movs	r3, #0
 801d514:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801d516:	2300      	movs	r3, #0
 801d518:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d51a:	f107 0318 	add.w	r3, r7, #24
 801d51e:	4618      	mov	r0, r3
 801d520:	f000 fa29 	bl	801d976 <readChar>
 801d524:	4603      	mov	r3, r0
 801d526:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801d528:	7f3b      	ldrb	r3, [r7, #28]
 801d52a:	f023 030f 	bic.w	r3, r3, #15
 801d52e:	b2db      	uxtb	r3, r3
 801d530:	2b20      	cmp	r3, #32
 801d532:	d12e      	bne.n	801d592 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d534:	69bb      	ldr	r3, [r7, #24]
 801d536:	f107 0214 	add.w	r2, r7, #20
 801d53a:	4611      	mov	r1, r2
 801d53c:	4618      	mov	r0, r3
 801d53e:	f000 f9e9 	bl	801d914 <MQTTPacket_decodeBuf>
 801d542:	6278      	str	r0, [r7, #36]	; 0x24
 801d544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d546:	69bb      	ldr	r3, [r7, #24]
 801d548:	4413      	add	r3, r2
 801d54a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d54c:	69bb      	ldr	r3, [r7, #24]
 801d54e:	697a      	ldr	r2, [r7, #20]
 801d550:	4413      	add	r3, r2
 801d552:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801d554:	69bb      	ldr	r3, [r7, #24]
 801d556:	6a3a      	ldr	r2, [r7, #32]
 801d558:	1ad3      	subs	r3, r2, r3
 801d55a:	2b01      	cmp	r3, #1
 801d55c:	dd1b      	ble.n	801d596 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801d55e:	f107 0318 	add.w	r3, r7, #24
 801d562:	4618      	mov	r0, r3
 801d564:	f000 fa07 	bl	801d976 <readChar>
 801d568:	4603      	mov	r3, r0
 801d56a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801d56c:	7c3b      	ldrb	r3, [r7, #16]
 801d56e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801d572:	b2db      	uxtb	r3, r3
 801d574:	461a      	mov	r2, r3
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801d57a:	f107 0318 	add.w	r3, r7, #24
 801d57e:	4618      	mov	r0, r3
 801d580:	f000 f9f9 	bl	801d976 <readChar>
 801d584:	4603      	mov	r3, r0
 801d586:	461a      	mov	r2, r3
 801d588:	68bb      	ldr	r3, [r7, #8]
 801d58a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801d58c:	2301      	movs	r3, #1
 801d58e:	627b      	str	r3, [r7, #36]	; 0x24
 801d590:	e002      	b.n	801d598 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d592:	bf00      	nop
 801d594:	e000      	b.n	801d598 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d596:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d59a:	4618      	mov	r0, r3
 801d59c:	3728      	adds	r7, #40	; 0x28
 801d59e:	46bd      	mov	sp, r7
 801d5a0:	bd80      	pop	{r7, pc}

0801d5a2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801d5a2:	b580      	push	{r7, lr}
 801d5a4:	b088      	sub	sp, #32
 801d5a6:	af00      	add	r7, sp, #0
 801d5a8:	60f8      	str	r0, [r7, #12]
 801d5aa:	60b9      	str	r1, [r7, #8]
 801d5ac:	4613      	mov	r3, r2
 801d5ae:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801d5b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d5b8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801d5be:	68bb      	ldr	r3, [r7, #8]
 801d5c0:	2b01      	cmp	r3, #1
 801d5c2:	dc03      	bgt.n	801d5cc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d5c4:	f06f 0301 	mvn.w	r3, #1
 801d5c8:	61fb      	str	r3, [r7, #28]
		goto exit;
 801d5ca:	e01d      	b.n	801d608 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801d5cc:	2300      	movs	r3, #0
 801d5ce:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801d5d0:	79fb      	ldrb	r3, [r7, #7]
 801d5d2:	f003 030f 	and.w	r3, r3, #15
 801d5d6:	b2da      	uxtb	r2, r3
 801d5d8:	7e3b      	ldrb	r3, [r7, #24]
 801d5da:	f362 1307 	bfi	r3, r2, #4, #4
 801d5de:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d5e0:	7e3a      	ldrb	r2, [r7, #24]
 801d5e2:	f107 0314 	add.w	r3, r7, #20
 801d5e6:	4611      	mov	r1, r2
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	f000 f9d8 	bl	801d99e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801d5ee:	697b      	ldr	r3, [r7, #20]
 801d5f0:	2100      	movs	r1, #0
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f000 f8d9 	bl	801d7aa <MQTTPacket_encode>
 801d5f8:	4602      	mov	r2, r0
 801d5fa:	697b      	ldr	r3, [r7, #20]
 801d5fc:	4413      	add	r3, r2
 801d5fe:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801d600:	697a      	ldr	r2, [r7, #20]
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	1ad3      	subs	r3, r2, r3
 801d606:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d608:	69fb      	ldr	r3, [r7, #28]
}
 801d60a:	4618      	mov	r0, r3
 801d60c:	3720      	adds	r7, #32
 801d60e:	46bd      	mov	sp, r7
 801d610:	bd80      	pop	{r7, pc}

0801d612 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801d612:	b580      	push	{r7, lr}
 801d614:	b082      	sub	sp, #8
 801d616:	af00      	add	r7, sp, #0
 801d618:	6078      	str	r0, [r7, #4]
 801d61a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801d61c:	220c      	movs	r2, #12
 801d61e:	6839      	ldr	r1, [r7, #0]
 801d620:	6878      	ldr	r0, [r7, #4]
 801d622:	f7ff ffbe 	bl	801d5a2 <MQTTSerialize_zero>
 801d626:	4603      	mov	r3, r0
}
 801d628:	4618      	mov	r0, r3
 801d62a:	3708      	adds	r7, #8
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}

0801d630 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b08a      	sub	sp, #40	; 0x28
 801d634:	af00      	add	r7, sp, #0
 801d636:	60f8      	str	r0, [r7, #12]
 801d638:	60b9      	str	r1, [r7, #8]
 801d63a:	607a      	str	r2, [r7, #4]
 801d63c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d63e:	2300      	movs	r3, #0
 801d640:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d644:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d646:	2300      	movs	r3, #0
 801d648:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d64a:	2300      	movs	r3, #0
 801d64c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801d64e:	2300      	movs	r3, #0
 801d650:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d652:	f107 0318 	add.w	r3, r7, #24
 801d656:	4618      	mov	r0, r3
 801d658:	f000 f98d 	bl	801d976 <readChar>
 801d65c:	4603      	mov	r3, r0
 801d65e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801d660:	7f3b      	ldrb	r3, [r7, #28]
 801d662:	f023 030f 	bic.w	r3, r3, #15
 801d666:	b2db      	uxtb	r3, r3
 801d668:	2b30      	cmp	r3, #48	; 0x30
 801d66a:	d14b      	bne.n	801d704 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801d66c:	7f3b      	ldrb	r3, [r7, #28]
 801d66e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d672:	b2db      	uxtb	r3, r3
 801d674:	461a      	mov	r2, r3
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801d67a:	7f3b      	ldrb	r3, [r7, #28]
 801d67c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801d680:	b2db      	uxtb	r3, r3
 801d682:	461a      	mov	r2, r3
 801d684:	68bb      	ldr	r3, [r7, #8]
 801d686:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801d688:	7f3b      	ldrb	r3, [r7, #28]
 801d68a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d68e:	b2db      	uxtb	r3, r3
 801d690:	461a      	mov	r2, r3
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d696:	69bb      	ldr	r3, [r7, #24]
 801d698:	f107 0214 	add.w	r2, r7, #20
 801d69c:	4611      	mov	r1, r2
 801d69e:	4618      	mov	r0, r3
 801d6a0:	f000 f938 	bl	801d914 <MQTTPacket_decodeBuf>
 801d6a4:	6278      	str	r0, [r7, #36]	; 0x24
 801d6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d6a8:	69bb      	ldr	r3, [r7, #24]
 801d6aa:	4413      	add	r3, r2
 801d6ac:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d6ae:	69bb      	ldr	r3, [r7, #24]
 801d6b0:	697a      	ldr	r2, [r7, #20]
 801d6b2:	4413      	add	r3, r2
 801d6b4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801d6b6:	f107 0318 	add.w	r3, r7, #24
 801d6ba:	6a3a      	ldr	r2, [r7, #32]
 801d6bc:	4619      	mov	r1, r3
 801d6be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d6c0:	f000 f9f8 	bl	801dab4 <readMQTTLenString>
 801d6c4:	4603      	mov	r3, r0
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d01e      	beq.n	801d708 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801d6ca:	69bb      	ldr	r3, [r7, #24]
 801d6cc:	6a3a      	ldr	r2, [r7, #32]
 801d6ce:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	db19      	blt.n	801d708 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801d6d4:	68bb      	ldr	r3, [r7, #8]
 801d6d6:	681b      	ldr	r3, [r3, #0]
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	dd08      	ble.n	801d6ee <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801d6dc:	f107 0318 	add.w	r3, r7, #24
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f000 f92d 	bl	801d940 <readInt>
 801d6e6:	4603      	mov	r3, r0
 801d6e8:	b29a      	uxth	r2, r3
 801d6ea:	683b      	ldr	r3, [r7, #0]
 801d6ec:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801d6ee:	69bb      	ldr	r3, [r7, #24]
 801d6f0:	6a3a      	ldr	r2, [r7, #32]
 801d6f2:	1ad2      	subs	r2, r2, r3
 801d6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6f6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801d6f8:	69ba      	ldr	r2, [r7, #24]
 801d6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6fc:	601a      	str	r2, [r3, #0]
	rc = 1;
 801d6fe:	2301      	movs	r3, #1
 801d700:	627b      	str	r3, [r7, #36]	; 0x24
 801d702:	e002      	b.n	801d70a <MQTTDeserialize_publish+0xda>
		goto exit;
 801d704:	bf00      	nop
 801d706:	e000      	b.n	801d70a <MQTTDeserialize_publish+0xda>
		goto exit;
 801d708:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d70c:	4618      	mov	r0, r3
 801d70e:	3728      	adds	r7, #40	; 0x28
 801d710:	46bd      	mov	sp, r7
 801d712:	bd80      	pop	{r7, pc}

0801d714 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801d714:	b580      	push	{r7, lr}
 801d716:	b08a      	sub	sp, #40	; 0x28
 801d718:	af00      	add	r7, sp, #0
 801d71a:	60f8      	str	r0, [r7, #12]
 801d71c:	60b9      	str	r1, [r7, #8]
 801d71e:	607a      	str	r2, [r7, #4]
 801d720:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d722:	2300      	movs	r3, #0
 801d724:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d726:	683b      	ldr	r3, [r7, #0]
 801d728:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d72a:	2300      	movs	r3, #0
 801d72c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d72e:	2300      	movs	r3, #0
 801d730:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d732:	f107 0318 	add.w	r3, r7, #24
 801d736:	4618      	mov	r0, r3
 801d738:	f000 f91d 	bl	801d976 <readChar>
 801d73c:	4603      	mov	r3, r0
 801d73e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801d740:	7f3b      	ldrb	r3, [r7, #28]
 801d742:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d746:	b2db      	uxtb	r3, r3
 801d748:	461a      	mov	r2, r3
 801d74a:	68bb      	ldr	r3, [r7, #8]
 801d74c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801d74e:	7f3b      	ldrb	r3, [r7, #28]
 801d750:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801d754:	b2db      	uxtb	r3, r3
 801d756:	461a      	mov	r2, r3
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d75c:	69bb      	ldr	r3, [r7, #24]
 801d75e:	f107 0214 	add.w	r2, r7, #20
 801d762:	4611      	mov	r1, r2
 801d764:	4618      	mov	r0, r3
 801d766:	f000 f8d5 	bl	801d914 <MQTTPacket_decodeBuf>
 801d76a:	6278      	str	r0, [r7, #36]	; 0x24
 801d76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d76e:	69bb      	ldr	r3, [r7, #24]
 801d770:	4413      	add	r3, r2
 801d772:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d774:	69bb      	ldr	r3, [r7, #24]
 801d776:	697a      	ldr	r2, [r7, #20]
 801d778:	4413      	add	r3, r2
 801d77a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801d77c:	69bb      	ldr	r3, [r7, #24]
 801d77e:	6a3a      	ldr	r2, [r7, #32]
 801d780:	1ad3      	subs	r3, r2, r3
 801d782:	2b01      	cmp	r3, #1
 801d784:	dd0b      	ble.n	801d79e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801d786:	f107 0318 	add.w	r3, r7, #24
 801d78a:	4618      	mov	r0, r3
 801d78c:	f000 f8d8 	bl	801d940 <readInt>
 801d790:	4603      	mov	r3, r0
 801d792:	b29a      	uxth	r2, r3
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801d798:	2301      	movs	r3, #1
 801d79a:	627b      	str	r3, [r7, #36]	; 0x24
 801d79c:	e000      	b.n	801d7a0 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801d79e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d7a2:	4618      	mov	r0, r3
 801d7a4:	3728      	adds	r7, #40	; 0x28
 801d7a6:	46bd      	mov	sp, r7
 801d7a8:	bd80      	pop	{r7, pc}

0801d7aa <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801d7aa:	b480      	push	{r7}
 801d7ac:	b085      	sub	sp, #20
 801d7ae:	af00      	add	r7, sp, #0
 801d7b0:	6078      	str	r0, [r7, #4]
 801d7b2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	425a      	negs	r2, r3
 801d7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d7c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d7c4:	bf58      	it	pl
 801d7c6:	4253      	negpl	r3, r2
 801d7c8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801d7ca:	683b      	ldr	r3, [r7, #0]
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	da00      	bge.n	801d7d2 <MQTTPacket_encode+0x28>
 801d7d0:	337f      	adds	r3, #127	; 0x7f
 801d7d2:	11db      	asrs	r3, r3, #7
 801d7d4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801d7d6:	683b      	ldr	r3, [r7, #0]
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	dd03      	ble.n	801d7e4 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801d7dc:	7afb      	ldrb	r3, [r7, #11]
 801d7de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d7e2:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	1c5a      	adds	r2, r3, #1
 801d7e8:	60fa      	str	r2, [r7, #12]
 801d7ea:	461a      	mov	r2, r3
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	4413      	add	r3, r2
 801d7f0:	7afa      	ldrb	r2, [r7, #11]
 801d7f2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801d7f4:	683b      	ldr	r3, [r7, #0]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	dcde      	bgt.n	801d7b8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801d7fa:	68fb      	ldr	r3, [r7, #12]
}
 801d7fc:	4618      	mov	r0, r3
 801d7fe:	3714      	adds	r7, #20
 801d800:	46bd      	mov	sp, r7
 801d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d806:	4770      	bx	lr

0801d808 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b086      	sub	sp, #24
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6078      	str	r0, [r7, #4]
 801d810:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801d812:	2301      	movs	r3, #1
 801d814:	617b      	str	r3, [r7, #20]
	int len = 0;
 801d816:	2300      	movs	r3, #0
 801d818:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801d81a:	683b      	ldr	r3, [r7, #0]
 801d81c:	2200      	movs	r2, #0
 801d81e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801d820:	f04f 33ff 	mov.w	r3, #4294967295
 801d824:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801d826:	693b      	ldr	r3, [r7, #16]
 801d828:	3301      	adds	r3, #1
 801d82a:	613b      	str	r3, [r7, #16]
 801d82c:	693b      	ldr	r3, [r7, #16]
 801d82e:	2b04      	cmp	r3, #4
 801d830:	dd03      	ble.n	801d83a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801d832:	f04f 33ff 	mov.w	r3, #4294967295
 801d836:	60fb      	str	r3, [r7, #12]
			goto exit;
 801d838:	e01d      	b.n	801d876 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801d83a:	f107 020b 	add.w	r2, r7, #11
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	2101      	movs	r1, #1
 801d842:	4610      	mov	r0, r2
 801d844:	4798      	blx	r3
 801d846:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	2b01      	cmp	r3, #1
 801d84c:	d112      	bne.n	801d874 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801d84e:	683b      	ldr	r3, [r7, #0]
 801d850:	681a      	ldr	r2, [r3, #0]
 801d852:	7afb      	ldrb	r3, [r7, #11]
 801d854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d858:	6979      	ldr	r1, [r7, #20]
 801d85a:	fb01 f303 	mul.w	r3, r1, r3
 801d85e:	441a      	add	r2, r3
 801d860:	683b      	ldr	r3, [r7, #0]
 801d862:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801d864:	697b      	ldr	r3, [r7, #20]
 801d866:	01db      	lsls	r3, r3, #7
 801d868:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801d86a:	7afb      	ldrb	r3, [r7, #11]
 801d86c:	b25b      	sxtb	r3, r3
 801d86e:	2b00      	cmp	r3, #0
 801d870:	dbd6      	blt.n	801d820 <MQTTPacket_decode+0x18>
exit:
 801d872:	e000      	b.n	801d876 <MQTTPacket_decode+0x6e>
			goto exit;
 801d874:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801d876:	693b      	ldr	r3, [r7, #16]
}
 801d878:	4618      	mov	r0, r3
 801d87a:	3718      	adds	r7, #24
 801d87c:	46bd      	mov	sp, r7
 801d87e:	bd80      	pop	{r7, pc}

0801d880 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801d880:	b480      	push	{r7}
 801d882:	b083      	sub	sp, #12
 801d884:	af00      	add	r7, sp, #0
 801d886:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	3301      	adds	r3, #1
 801d88c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	2b7f      	cmp	r3, #127	; 0x7f
 801d892:	dc03      	bgt.n	801d89c <MQTTPacket_len+0x1c>
		rem_len += 1;
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	3301      	adds	r3, #1
 801d898:	607b      	str	r3, [r7, #4]
 801d89a:	e012      	b.n	801d8c2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d8a2:	da03      	bge.n	801d8ac <MQTTPacket_len+0x2c>
		rem_len += 2;
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	3302      	adds	r3, #2
 801d8a8:	607b      	str	r3, [r7, #4]
 801d8aa:	e00a      	b.n	801d8c2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	4a08      	ldr	r2, [pc, #32]	; (801d8d0 <MQTTPacket_len+0x50>)
 801d8b0:	4293      	cmp	r3, r2
 801d8b2:	dc03      	bgt.n	801d8bc <MQTTPacket_len+0x3c>
		rem_len += 3;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	3303      	adds	r3, #3
 801d8b8:	607b      	str	r3, [r7, #4]
 801d8ba:	e002      	b.n	801d8c2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	3304      	adds	r3, #4
 801d8c0:	607b      	str	r3, [r7, #4]
	return rem_len;
 801d8c2:	687b      	ldr	r3, [r7, #4]
}
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	370c      	adds	r7, #12
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ce:	4770      	bx	lr
 801d8d0:	001ffffe 	.word	0x001ffffe

0801d8d4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801d8d4:	b480      	push	{r7}
 801d8d6:	b085      	sub	sp, #20
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
 801d8dc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801d8de:	2300      	movs	r3, #0
 801d8e0:	60fb      	str	r3, [r7, #12]
 801d8e2:	e00a      	b.n	801d8fa <bufchar+0x26>
		*c = *bufptr++;
 801d8e4:	4b0a      	ldr	r3, [pc, #40]	; (801d910 <bufchar+0x3c>)
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	1c5a      	adds	r2, r3, #1
 801d8ea:	4909      	ldr	r1, [pc, #36]	; (801d910 <bufchar+0x3c>)
 801d8ec:	600a      	str	r2, [r1, #0]
 801d8ee:	781a      	ldrb	r2, [r3, #0]
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	3301      	adds	r3, #1
 801d8f8:	60fb      	str	r3, [r7, #12]
 801d8fa:	68fa      	ldr	r2, [r7, #12]
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	429a      	cmp	r2, r3
 801d900:	dbf0      	blt.n	801d8e4 <bufchar+0x10>
	return count;
 801d902:	683b      	ldr	r3, [r7, #0]
}
 801d904:	4618      	mov	r0, r3
 801d906:	3714      	adds	r7, #20
 801d908:	46bd      	mov	sp, r7
 801d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d90e:	4770      	bx	lr
 801d910:	200009c0 	.word	0x200009c0

0801d914 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b082      	sub	sp, #8
 801d918:	af00      	add	r7, sp, #0
 801d91a:	6078      	str	r0, [r7, #4]
 801d91c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801d91e:	4a06      	ldr	r2, [pc, #24]	; (801d938 <MQTTPacket_decodeBuf+0x24>)
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801d924:	6839      	ldr	r1, [r7, #0]
 801d926:	4805      	ldr	r0, [pc, #20]	; (801d93c <MQTTPacket_decodeBuf+0x28>)
 801d928:	f7ff ff6e 	bl	801d808 <MQTTPacket_decode>
 801d92c:	4603      	mov	r3, r0
}
 801d92e:	4618      	mov	r0, r3
 801d930:	3708      	adds	r7, #8
 801d932:	46bd      	mov	sp, r7
 801d934:	bd80      	pop	{r7, pc}
 801d936:	bf00      	nop
 801d938:	200009c0 	.word	0x200009c0
 801d93c:	0801d8d5 	.word	0x0801d8d5

0801d940 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801d940:	b480      	push	{r7}
 801d942:	b085      	sub	sp, #20
 801d944:	af00      	add	r7, sp, #0
 801d946:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	781b      	ldrb	r3, [r3, #0]
 801d952:	021b      	lsls	r3, r3, #8
 801d954:	68fa      	ldr	r2, [r7, #12]
 801d956:	3201      	adds	r2, #1
 801d958:	7812      	ldrb	r2, [r2, #0]
 801d95a:	4413      	add	r3, r2
 801d95c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	1c9a      	adds	r2, r3, #2
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	601a      	str	r2, [r3, #0]
	return len;
 801d968:	68bb      	ldr	r3, [r7, #8]
}
 801d96a:	4618      	mov	r0, r3
 801d96c:	3714      	adds	r7, #20
 801d96e:	46bd      	mov	sp, r7
 801d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d974:	4770      	bx	lr

0801d976 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801d976:	b480      	push	{r7}
 801d978:	b085      	sub	sp, #20
 801d97a:	af00      	add	r7, sp, #0
 801d97c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	781b      	ldrb	r3, [r3, #0]
 801d984:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	1c5a      	adds	r2, r3, #1
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	601a      	str	r2, [r3, #0]
	return c;
 801d990:	7bfb      	ldrb	r3, [r7, #15]
}
 801d992:	4618      	mov	r0, r3
 801d994:	3714      	adds	r7, #20
 801d996:	46bd      	mov	sp, r7
 801d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d99c:	4770      	bx	lr

0801d99e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801d99e:	b480      	push	{r7}
 801d9a0:	b083      	sub	sp, #12
 801d9a2:	af00      	add	r7, sp, #0
 801d9a4:	6078      	str	r0, [r7, #4]
 801d9a6:	460b      	mov	r3, r1
 801d9a8:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	681b      	ldr	r3, [r3, #0]
 801d9ae:	78fa      	ldrb	r2, [r7, #3]
 801d9b0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	1c5a      	adds	r2, r3, #1
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	601a      	str	r2, [r3, #0]
}
 801d9bc:	bf00      	nop
 801d9be:	370c      	adds	r7, #12
 801d9c0:	46bd      	mov	sp, r7
 801d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9c6:	4770      	bx	lr

0801d9c8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801d9c8:	b480      	push	{r7}
 801d9ca:	b083      	sub	sp, #12
 801d9cc:	af00      	add	r7, sp, #0
 801d9ce:	6078      	str	r0, [r7, #4]
 801d9d0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801d9d2:	683b      	ldr	r3, [r7, #0]
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	da00      	bge.n	801d9da <writeInt+0x12>
 801d9d8:	33ff      	adds	r3, #255	; 0xff
 801d9da:	121b      	asrs	r3, r3, #8
 801d9dc:	461a      	mov	r2, r3
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	b2d2      	uxtb	r2, r2
 801d9e4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	1c5a      	adds	r2, r3, #1
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801d9f0:	683b      	ldr	r3, [r7, #0]
 801d9f2:	425a      	negs	r2, r3
 801d9f4:	b2db      	uxtb	r3, r3
 801d9f6:	b2d2      	uxtb	r2, r2
 801d9f8:	bf58      	it	pl
 801d9fa:	4253      	negpl	r3, r2
 801d9fc:	687a      	ldr	r2, [r7, #4]
 801d9fe:	6812      	ldr	r2, [r2, #0]
 801da00:	b2db      	uxtb	r3, r3
 801da02:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	1c5a      	adds	r2, r3, #1
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	601a      	str	r2, [r3, #0]
}
 801da0e:	bf00      	nop
 801da10:	370c      	adds	r7, #12
 801da12:	46bd      	mov	sp, r7
 801da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da18:	4770      	bx	lr

0801da1a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801da1a:	b580      	push	{r7, lr}
 801da1c:	b084      	sub	sp, #16
 801da1e:	af00      	add	r7, sp, #0
 801da20:	6078      	str	r0, [r7, #4]
 801da22:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801da24:	6838      	ldr	r0, [r7, #0]
 801da26:	f7f2 fc3b 	bl	80102a0 <strlen>
 801da2a:	4603      	mov	r3, r0
 801da2c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801da2e:	68f9      	ldr	r1, [r7, #12]
 801da30:	6878      	ldr	r0, [r7, #4]
 801da32:	f7ff ffc9 	bl	801d9c8 <writeInt>
	memcpy(*pptr, string, len);
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	68fa      	ldr	r2, [r7, #12]
 801da3c:	6839      	ldr	r1, [r7, #0]
 801da3e:	4618      	mov	r0, r3
 801da40:	f00f fe6f 	bl	802d722 <memcpy>
	*pptr += len;
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	681a      	ldr	r2, [r3, #0]
 801da48:	68fb      	ldr	r3, [r7, #12]
 801da4a:	441a      	add	r2, r3
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	601a      	str	r2, [r3, #0]
}
 801da50:	bf00      	nop
 801da52:	3710      	adds	r7, #16
 801da54:	46bd      	mov	sp, r7
 801da56:	bd80      	pop	{r7, pc}

0801da58 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801da58:	b580      	push	{r7, lr}
 801da5a:	b084      	sub	sp, #16
 801da5c:	af00      	add	r7, sp, #0
 801da5e:	60f8      	str	r0, [r7, #12]
 801da60:	4638      	mov	r0, r7
 801da62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	dd12      	ble.n	801da92 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	4619      	mov	r1, r3
 801da70:	68f8      	ldr	r0, [r7, #12]
 801da72:	f7ff ffa9 	bl	801d9c8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	68b9      	ldr	r1, [r7, #8]
 801da7c:	687a      	ldr	r2, [r7, #4]
 801da7e:	4618      	mov	r0, r3
 801da80:	f00f fe4f 	bl	802d722 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	687a      	ldr	r2, [r7, #4]
 801da8a:	441a      	add	r2, r3
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801da90:	e00c      	b.n	801daac <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801da92:	683b      	ldr	r3, [r7, #0]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d005      	beq.n	801daa4 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801da98:	683b      	ldr	r3, [r7, #0]
 801da9a:	4619      	mov	r1, r3
 801da9c:	68f8      	ldr	r0, [r7, #12]
 801da9e:	f7ff ffbc 	bl	801da1a <writeCString>
}
 801daa2:	e003      	b.n	801daac <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801daa4:	2100      	movs	r1, #0
 801daa6:	68f8      	ldr	r0, [r7, #12]
 801daa8:	f7ff ff8e 	bl	801d9c8 <writeInt>
}
 801daac:	bf00      	nop
 801daae:	3710      	adds	r7, #16
 801dab0:	46bd      	mov	sp, r7
 801dab2:	bd80      	pop	{r7, pc}

0801dab4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801dab4:	b580      	push	{r7, lr}
 801dab6:	b086      	sub	sp, #24
 801dab8:	af00      	add	r7, sp, #0
 801daba:	60f8      	str	r0, [r7, #12]
 801dabc:	60b9      	str	r1, [r7, #8]
 801dabe:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801dac0:	2300      	movs	r3, #0
 801dac2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801dac4:	68bb      	ldr	r3, [r7, #8]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	687a      	ldr	r2, [r7, #4]
 801daca:	1ad3      	subs	r3, r2, r3
 801dacc:	2b01      	cmp	r3, #1
 801dace:	dd1a      	ble.n	801db06 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801dad0:	68b8      	ldr	r0, [r7, #8]
 801dad2:	f7ff ff35 	bl	801d940 <readInt>
 801dad6:	4602      	mov	r2, r0
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801dadc:	68bb      	ldr	r3, [r7, #8]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	68fa      	ldr	r2, [r7, #12]
 801dae2:	6852      	ldr	r2, [r2, #4]
 801dae4:	4413      	add	r3, r2
 801dae6:	687a      	ldr	r2, [r7, #4]
 801dae8:	429a      	cmp	r2, r3
 801daea:	d30c      	bcc.n	801db06 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801daec:	68bb      	ldr	r3, [r7, #8]
 801daee:	681a      	ldr	r2, [r3, #0]
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801daf4:	68bb      	ldr	r3, [r7, #8]
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	68fa      	ldr	r2, [r7, #12]
 801dafa:	6852      	ldr	r2, [r2, #4]
 801dafc:	441a      	add	r2, r3
 801dafe:	68bb      	ldr	r3, [r7, #8]
 801db00:	601a      	str	r2, [r3, #0]
			rc = 1;
 801db02:	2301      	movs	r3, #1
 801db04:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	2200      	movs	r2, #0
 801db0a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801db0c:	697b      	ldr	r3, [r7, #20]
}
 801db0e:	4618      	mov	r0, r3
 801db10:	3718      	adds	r7, #24
 801db12:	46bd      	mov	sp, r7
 801db14:	bd80      	pop	{r7, pc}

0801db16 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801db16:	b580      	push	{r7, lr}
 801db18:	b086      	sub	sp, #24
 801db1a:	af00      	add	r7, sp, #0
 801db1c:	1d3b      	adds	r3, r7, #4
 801db1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801db22:	2300      	movs	r3, #0
 801db24:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d006      	beq.n	801db3a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	4618      	mov	r0, r3
 801db30:	f7f2 fbb6 	bl	80102a0 <strlen>
 801db34:	4603      	mov	r3, r0
 801db36:	617b      	str	r3, [r7, #20]
 801db38:	e001      	b.n	801db3e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801db3a:	68bb      	ldr	r3, [r7, #8]
 801db3c:	617b      	str	r3, [r7, #20]
	return rc;
 801db3e:	697b      	ldr	r3, [r7, #20]
}
 801db40:	4618      	mov	r0, r3
 801db42:	3718      	adds	r7, #24
 801db44:	46bd      	mov	sp, r7
 801db46:	bd80      	pop	{r7, pc}

0801db48 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b086      	sub	sp, #24
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
 801db50:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801db52:	2300      	movs	r3, #0
 801db54:	617b      	str	r3, [r7, #20]
		blen = 0;
 801db56:	2300      	movs	r3, #0
 801db58:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d00a      	beq.n	801db78 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	4618      	mov	r0, r3
 801db6e:	f7f2 fb97 	bl	80102a0 <strlen>
 801db72:	4603      	mov	r3, r0
 801db74:	617b      	str	r3, [r7, #20]
 801db76:	e005      	b.n	801db84 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	689b      	ldr	r3, [r3, #8]
 801db7c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	685b      	ldr	r3, [r3, #4]
 801db82:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801db84:	6838      	ldr	r0, [r7, #0]
 801db86:	f7f2 fb8b 	bl	80102a0 <strlen>
 801db8a:	4603      	mov	r3, r0
 801db8c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801db8e:	697a      	ldr	r2, [r7, #20]
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	429a      	cmp	r2, r3
 801db94:	d10a      	bne.n	801dbac <MQTTPacket_equals+0x64>
 801db96:	697b      	ldr	r3, [r7, #20]
 801db98:	461a      	mov	r2, r3
 801db9a:	6839      	ldr	r1, [r7, #0]
 801db9c:	6938      	ldr	r0, [r7, #16]
 801db9e:	f00f fc33 	bl	802d408 <strncmp>
 801dba2:	4603      	mov	r3, r0
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d101      	bne.n	801dbac <MQTTPacket_equals+0x64>
 801dba8:	2301      	movs	r3, #1
 801dbaa:	e000      	b.n	801dbae <MQTTPacket_equals+0x66>
 801dbac:	2300      	movs	r3, #0
}
 801dbae:	4618      	mov	r0, r3
 801dbb0:	3718      	adds	r7, #24
 801dbb2:	46bd      	mov	sp, r7
 801dbb4:	bd80      	pop	{r7, pc}

0801dbb6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801dbb6:	b580      	push	{r7, lr}
 801dbb8:	b086      	sub	sp, #24
 801dbba:	af00      	add	r7, sp, #0
 801dbbc:	60f8      	str	r0, [r7, #12]
 801dbbe:	4638      	mov	r0, r7
 801dbc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801dbc8:	463b      	mov	r3, r7
 801dbca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801dbce:	f7ff ffa2 	bl	801db16 <MQTTstrlen>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	1c9a      	adds	r2, r3, #2
 801dbd6:	6a3b      	ldr	r3, [r7, #32]
 801dbd8:	4413      	add	r3, r2
 801dbda:	697a      	ldr	r2, [r7, #20]
 801dbdc:	4413      	add	r3, r2
 801dbde:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	dd02      	ble.n	801dbec <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801dbe6:	697b      	ldr	r3, [r7, #20]
 801dbe8:	3302      	adds	r3, #2
 801dbea:	617b      	str	r3, [r7, #20]
	return len;
 801dbec:	697b      	ldr	r3, [r7, #20]
}
 801dbee:	4618      	mov	r0, r3
 801dbf0:	3718      	adds	r7, #24
 801dbf2:	46bd      	mov	sp, r7
 801dbf4:	bd80      	pop	{r7, pc}

0801dbf6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801dbf6:	b580      	push	{r7, lr}
 801dbf8:	b08a      	sub	sp, #40	; 0x28
 801dbfa:	af02      	add	r7, sp, #8
 801dbfc:	60f8      	str	r0, [r7, #12]
 801dbfe:	60b9      	str	r1, [r7, #8]
 801dc00:	603b      	str	r3, [r7, #0]
 801dc02:	4613      	mov	r3, r2
 801dc04:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801dc0e:	2300      	movs	r3, #0
 801dc10:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801dc12:	2300      	movs	r3, #0
 801dc14:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801dc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc18:	9300      	str	r3, [sp, #0]
 801dc1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dc20:	6838      	ldr	r0, [r7, #0]
 801dc22:	f7ff ffc8 	bl	801dbb6 <MQTTSerialize_publishLength>
 801dc26:	61b8      	str	r0, [r7, #24]
 801dc28:	69b8      	ldr	r0, [r7, #24]
 801dc2a:	f7ff fe29 	bl	801d880 <MQTTPacket_len>
 801dc2e:	4602      	mov	r2, r0
 801dc30:	68bb      	ldr	r3, [r7, #8]
 801dc32:	4293      	cmp	r3, r2
 801dc34:	da03      	bge.n	801dc3e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801dc36:	f06f 0301 	mvn.w	r3, #1
 801dc3a:	61fb      	str	r3, [r7, #28]
		goto exit;
 801dc3c:	e04c      	b.n	801dcd8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801dc3e:	7c3b      	ldrb	r3, [r7, #16]
 801dc40:	2203      	movs	r2, #3
 801dc42:	f362 1307 	bfi	r3, r2, #4, #4
 801dc46:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801dc48:	79fb      	ldrb	r3, [r7, #7]
 801dc4a:	f003 0301 	and.w	r3, r3, #1
 801dc4e:	b2da      	uxtb	r2, r3
 801dc50:	7c3b      	ldrb	r3, [r7, #16]
 801dc52:	f362 03c3 	bfi	r3, r2, #3, #1
 801dc56:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	f003 0303 	and.w	r3, r3, #3
 801dc5e:	b2da      	uxtb	r2, r3
 801dc60:	7c3b      	ldrb	r3, [r7, #16]
 801dc62:	f362 0342 	bfi	r3, r2, #1, #2
 801dc66:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801dc68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801dc6c:	f003 0301 	and.w	r3, r3, #1
 801dc70:	b2da      	uxtb	r2, r3
 801dc72:	7c3b      	ldrb	r3, [r7, #16]
 801dc74:	f362 0300 	bfi	r3, r2, #0, #1
 801dc78:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801dc7a:	7c3a      	ldrb	r2, [r7, #16]
 801dc7c:	f107 0314 	add.w	r3, r7, #20
 801dc80:	4611      	mov	r1, r2
 801dc82:	4618      	mov	r0, r3
 801dc84:	f7ff fe8b 	bl	801d99e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801dc88:	697b      	ldr	r3, [r7, #20]
 801dc8a:	69b9      	ldr	r1, [r7, #24]
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	f7ff fd8c 	bl	801d7aa <MQTTPacket_encode>
 801dc92:	4602      	mov	r2, r0
 801dc94:	697b      	ldr	r3, [r7, #20]
 801dc96:	4413      	add	r3, r2
 801dc98:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801dc9a:	f107 0014 	add.w	r0, r7, #20
 801dc9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dca4:	f7ff fed8 	bl	801da58 <writeMQTTString>

	if (qos > 0)
 801dca8:	683b      	ldr	r3, [r7, #0]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	dd06      	ble.n	801dcbc <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801dcae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801dcb0:	f107 0314 	add.w	r3, r7, #20
 801dcb4:	4611      	mov	r1, r2
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	f7ff fe86 	bl	801d9c8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801dcbc:	697b      	ldr	r3, [r7, #20]
 801dcbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dcc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	f00f fd2d 	bl	802d722 <memcpy>
	ptr += payloadlen;
 801dcc8:	697a      	ldr	r2, [r7, #20]
 801dcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dccc:	4413      	add	r3, r2
 801dcce:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801dcd0:	697a      	ldr	r2, [r7, #20]
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	1ad3      	subs	r3, r2, r3
 801dcd6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dcd8:	69fb      	ldr	r3, [r7, #28]
}
 801dcda:	4618      	mov	r0, r3
 801dcdc:	3720      	adds	r7, #32
 801dcde:	46bd      	mov	sp, r7
 801dce0:	bd80      	pop	{r7, pc}

0801dce2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801dce2:	b580      	push	{r7, lr}
 801dce4:	b088      	sub	sp, #32
 801dce6:	af00      	add	r7, sp, #0
 801dce8:	60f8      	str	r0, [r7, #12]
 801dcea:	60b9      	str	r1, [r7, #8]
 801dcec:	4611      	mov	r1, r2
 801dcee:	461a      	mov	r2, r3
 801dcf0:	460b      	mov	r3, r1
 801dcf2:	71fb      	strb	r3, [r7, #7]
 801dcf4:	4613      	mov	r3, r2
 801dcf6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801dd04:	68bb      	ldr	r3, [r7, #8]
 801dd06:	2b03      	cmp	r3, #3
 801dd08:	dc03      	bgt.n	801dd12 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801dd0a:	f06f 0301 	mvn.w	r3, #1
 801dd0e:	61fb      	str	r3, [r7, #28]
		goto exit;
 801dd10:	e037      	b.n	801dd82 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801dd12:	79fb      	ldrb	r3, [r7, #7]
 801dd14:	f003 030f 	and.w	r3, r3, #15
 801dd18:	b2da      	uxtb	r2, r3
 801dd1a:	7e3b      	ldrb	r3, [r7, #24]
 801dd1c:	f362 1307 	bfi	r3, r2, #4, #4
 801dd20:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801dd22:	79bb      	ldrb	r3, [r7, #6]
 801dd24:	f003 0301 	and.w	r3, r3, #1
 801dd28:	b2da      	uxtb	r2, r3
 801dd2a:	7e3b      	ldrb	r3, [r7, #24]
 801dd2c:	f362 03c3 	bfi	r3, r2, #3, #1
 801dd30:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801dd32:	79fb      	ldrb	r3, [r7, #7]
 801dd34:	2b06      	cmp	r3, #6
 801dd36:	bf0c      	ite	eq
 801dd38:	2301      	moveq	r3, #1
 801dd3a:	2300      	movne	r3, #0
 801dd3c:	b2db      	uxtb	r3, r3
 801dd3e:	f003 0303 	and.w	r3, r3, #3
 801dd42:	b2da      	uxtb	r2, r3
 801dd44:	7e3b      	ldrb	r3, [r7, #24]
 801dd46:	f362 0342 	bfi	r3, r2, #1, #2
 801dd4a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801dd4c:	7e3a      	ldrb	r2, [r7, #24]
 801dd4e:	f107 0314 	add.w	r3, r7, #20
 801dd52:	4611      	mov	r1, r2
 801dd54:	4618      	mov	r0, r3
 801dd56:	f7ff fe22 	bl	801d99e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801dd5a:	697b      	ldr	r3, [r7, #20]
 801dd5c:	2102      	movs	r1, #2
 801dd5e:	4618      	mov	r0, r3
 801dd60:	f7ff fd23 	bl	801d7aa <MQTTPacket_encode>
 801dd64:	4602      	mov	r2, r0
 801dd66:	697b      	ldr	r3, [r7, #20]
 801dd68:	4413      	add	r3, r2
 801dd6a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801dd6c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801dd6e:	f107 0314 	add.w	r3, r7, #20
 801dd72:	4611      	mov	r1, r2
 801dd74:	4618      	mov	r0, r3
 801dd76:	f7ff fe27 	bl	801d9c8 <writeInt>
	rc = ptr - buf;
 801dd7a:	697a      	ldr	r2, [r7, #20]
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	1ad3      	subs	r3, r2, r3
 801dd80:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dd82:	69fb      	ldr	r3, [r7, #28]
}
 801dd84:	4618      	mov	r0, r3
 801dd86:	3720      	adds	r7, #32
 801dd88:	46bd      	mov	sp, r7
 801dd8a:	bd80      	pop	{r7, pc}

0801dd8c <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801dd8c:	b590      	push	{r4, r7, lr}
 801dd8e:	b085      	sub	sp, #20
 801dd90:	af00      	add	r7, sp, #0
 801dd92:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801dd94:	2300      	movs	r3, #0
 801dd96:	60fb      	str	r3, [r7, #12]
 801dd98:	2300      	movs	r3, #0
 801dd9a:	60bb      	str	r3, [r7, #8]
 801dd9c:	e02e      	b.n	801ddfc <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801dd9e:	68bb      	ldr	r3, [r7, #8]
 801dda0:	687a      	ldr	r2, [r7, #4]
 801dda2:	441a      	add	r2, r3
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	6879      	ldr	r1, [r7, #4]
 801dda8:	440b      	add	r3, r1
 801ddaa:	7812      	ldrb	r2, [r2, #0]
 801ddac:	701a      	strb	r2, [r3, #0]
 801ddae:	781b      	ldrb	r3, [r3, #0]
 801ddb0:	2b25      	cmp	r3, #37	; 0x25
 801ddb2:	d11d      	bne.n	801ddf0 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801ddb4:	68bb      	ldr	r3, [r7, #8]
 801ddb6:	3301      	adds	r3, #1
 801ddb8:	687a      	ldr	r2, [r7, #4]
 801ddba:	4413      	add	r3, r2
 801ddbc:	781b      	ldrb	r3, [r3, #0]
 801ddbe:	4618      	mov	r0, r3
 801ddc0:	f000 fbf1 	bl	801e5a6 <C2D>
 801ddc4:	4603      	mov	r3, r0
 801ddc6:	011b      	lsls	r3, r3, #4
 801ddc8:	b2dc      	uxtb	r4, r3
 801ddca:	68bb      	ldr	r3, [r7, #8]
 801ddcc:	3302      	adds	r3, #2
 801ddce:	687a      	ldr	r2, [r7, #4]
 801ddd0:	4413      	add	r3, r2
 801ddd2:	781b      	ldrb	r3, [r3, #0]
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	f000 fbe6 	bl	801e5a6 <C2D>
 801ddda:	4603      	mov	r3, r0
 801dddc:	4619      	mov	r1, r3
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	687a      	ldr	r2, [r7, #4]
 801dde2:	4413      	add	r3, r2
 801dde4:	1862      	adds	r2, r4, r1
 801dde6:	b2d2      	uxtb	r2, r2
 801dde8:	701a      	strb	r2, [r3, #0]
			y+=2;
 801ddea:	68bb      	ldr	r3, [r7, #8]
 801ddec:	3302      	adds	r3, #2
 801ddee:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	3301      	adds	r3, #1
 801ddf4:	60fb      	str	r3, [r7, #12]
 801ddf6:	68bb      	ldr	r3, [r7, #8]
 801ddf8:	3301      	adds	r3, #1
 801ddfa:	60bb      	str	r3, [r7, #8]
 801ddfc:	68bb      	ldr	r3, [r7, #8]
 801ddfe:	687a      	ldr	r2, [r7, #4]
 801de00:	4413      	add	r3, r2
 801de02:	781b      	ldrb	r3, [r3, #0]
 801de04:	2b00      	cmp	r3, #0
 801de06:	d1ca      	bne.n	801dd9e <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	687a      	ldr	r2, [r7, #4]
 801de0c:	4413      	add	r3, r2
 801de0e:	2200      	movs	r2, #0
 801de10:	701a      	strb	r2, [r3, #0]
}
 801de12:	bf00      	nop
 801de14:	3714      	adds	r7, #20
 801de16:	46bd      	mov	sp, r7
 801de18:	bd90      	pop	{r4, r7, pc}
	...

0801de1c <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801de1c:	b580      	push	{r7, lr}
 801de1e:	b088      	sub	sp, #32
 801de20:	af00      	add	r7, sp, #0
 801de22:	60f8      	str	r0, [r7, #12]
 801de24:	460b      	mov	r3, r1
 801de26:	607a      	str	r2, [r7, #4]
 801de28:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801de2a:	7afb      	ldrb	r3, [r7, #11]
 801de2c:	2b01      	cmp	r3, #1
 801de2e:	d102      	bne.n	801de36 <make_http_response_head+0x1a>
 801de30:	4b42      	ldr	r3, [pc, #264]	; (801df3c <make_http_response_head+0x120>)
 801de32:	61fb      	str	r3, [r7, #28]
 801de34:	e061      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801de36:	7afb      	ldrb	r3, [r7, #11]
 801de38:	2b02      	cmp	r3, #2
 801de3a:	d102      	bne.n	801de42 <make_http_response_head+0x26>
 801de3c:	4b40      	ldr	r3, [pc, #256]	; (801df40 <make_http_response_head+0x124>)
 801de3e:	61fb      	str	r3, [r7, #28]
 801de40:	e05b      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801de42:	7afb      	ldrb	r3, [r7, #11]
 801de44:	2b03      	cmp	r3, #3
 801de46:	d102      	bne.n	801de4e <make_http_response_head+0x32>
 801de48:	4b3e      	ldr	r3, [pc, #248]	; (801df44 <make_http_response_head+0x128>)
 801de4a:	61fb      	str	r3, [r7, #28]
 801de4c:	e055      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801de4e:	7afb      	ldrb	r3, [r7, #11]
 801de50:	2b04      	cmp	r3, #4
 801de52:	d102      	bne.n	801de5a <make_http_response_head+0x3e>
 801de54:	4b3c      	ldr	r3, [pc, #240]	; (801df48 <make_http_response_head+0x12c>)
 801de56:	61fb      	str	r3, [r7, #28]
 801de58:	e04f      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801de5a:	7afb      	ldrb	r3, [r7, #11]
 801de5c:	2b05      	cmp	r3, #5
 801de5e:	d102      	bne.n	801de66 <make_http_response_head+0x4a>
 801de60:	4b3a      	ldr	r3, [pc, #232]	; (801df4c <make_http_response_head+0x130>)
 801de62:	61fb      	str	r3, [r7, #28]
 801de64:	e049      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801de66:	7afb      	ldrb	r3, [r7, #11]
 801de68:	2b09      	cmp	r3, #9
 801de6a:	d102      	bne.n	801de72 <make_http_response_head+0x56>
 801de6c:	4b38      	ldr	r3, [pc, #224]	; (801df50 <make_http_response_head+0x134>)
 801de6e:	61fb      	str	r3, [r7, #28]
 801de70:	e043      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801de72:	7afb      	ldrb	r3, [r7, #11]
 801de74:	2b0a      	cmp	r3, #10
 801de76:	d102      	bne.n	801de7e <make_http_response_head+0x62>
 801de78:	4b36      	ldr	r3, [pc, #216]	; (801df54 <make_http_response_head+0x138>)
 801de7a:	61fb      	str	r3, [r7, #28]
 801de7c:	e03d      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801de7e:	7afb      	ldrb	r3, [r7, #11]
 801de80:	2b0c      	cmp	r3, #12
 801de82:	d102      	bne.n	801de8a <make_http_response_head+0x6e>
 801de84:	4b34      	ldr	r3, [pc, #208]	; (801df58 <make_http_response_head+0x13c>)
 801de86:	61fb      	str	r3, [r7, #28]
 801de88:	e037      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801de8a:	7afb      	ldrb	r3, [r7, #11]
 801de8c:	2b0b      	cmp	r3, #11
 801de8e:	d102      	bne.n	801de96 <make_http_response_head+0x7a>
 801de90:	4b32      	ldr	r3, [pc, #200]	; (801df5c <make_http_response_head+0x140>)
 801de92:	61fb      	str	r3, [r7, #28]
 801de94:	e031      	b.n	801defa <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801de96:	7afb      	ldrb	r3, [r7, #11]
 801de98:	2b08      	cmp	r3, #8
 801de9a:	d102      	bne.n	801dea2 <make_http_response_head+0x86>
 801de9c:	4b30      	ldr	r3, [pc, #192]	; (801df60 <make_http_response_head+0x144>)
 801de9e:	61fb      	str	r3, [r7, #28]
 801dea0:	e02b      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801dea2:	7afb      	ldrb	r3, [r7, #11]
 801dea4:	2b0d      	cmp	r3, #13
 801dea6:	d102      	bne.n	801deae <make_http_response_head+0x92>
 801dea8:	4b2e      	ldr	r3, [pc, #184]	; (801df64 <make_http_response_head+0x148>)
 801deaa:	61fb      	str	r3, [r7, #28]
 801deac:	e025      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801deae:	7afb      	ldrb	r3, [r7, #11]
 801deb0:	2b0e      	cmp	r3, #14
 801deb2:	d102      	bne.n	801deba <make_http_response_head+0x9e>
 801deb4:	4b2c      	ldr	r3, [pc, #176]	; (801df68 <make_http_response_head+0x14c>)
 801deb6:	61fb      	str	r3, [r7, #28]
 801deb8:	e01f      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801deba:	7afb      	ldrb	r3, [r7, #11]
 801debc:	2b14      	cmp	r3, #20
 801debe:	d102      	bne.n	801dec6 <make_http_response_head+0xaa>
 801dec0:	4b2a      	ldr	r3, [pc, #168]	; (801df6c <make_http_response_head+0x150>)
 801dec2:	61fb      	str	r3, [r7, #28]
 801dec4:	e019      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801dec6:	7afb      	ldrb	r3, [r7, #11]
 801dec8:	2b15      	cmp	r3, #21
 801deca:	d102      	bne.n	801ded2 <make_http_response_head+0xb6>
 801decc:	4b28      	ldr	r3, [pc, #160]	; (801df70 <make_http_response_head+0x154>)
 801dece:	61fb      	str	r3, [r7, #28]
 801ded0:	e013      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801ded2:	7afb      	ldrb	r3, [r7, #11]
 801ded4:	2b16      	cmp	r3, #22
 801ded6:	d102      	bne.n	801dede <make_http_response_head+0xc2>
 801ded8:	4b26      	ldr	r3, [pc, #152]	; (801df74 <make_http_response_head+0x158>)
 801deda:	61fb      	str	r3, [r7, #28]
 801dedc:	e00d      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801dede:	7afb      	ldrb	r3, [r7, #11]
 801dee0:	2b17      	cmp	r3, #23
 801dee2:	d102      	bne.n	801deea <make_http_response_head+0xce>
 801dee4:	4b24      	ldr	r3, [pc, #144]	; (801df78 <make_http_response_head+0x15c>)
 801dee6:	61fb      	str	r3, [r7, #28]
 801dee8:	e007      	b.n	801defa <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801deea:	7afb      	ldrb	r3, [r7, #11]
 801deec:	2b18      	cmp	r3, #24
 801deee:	d102      	bne.n	801def6 <make_http_response_head+0xda>
 801def0:	4b22      	ldr	r3, [pc, #136]	; (801df7c <make_http_response_head+0x160>)
 801def2:	61fb      	str	r3, [r7, #28]
 801def4:	e001      	b.n	801defa <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801def6:	2300      	movs	r3, #0
 801def8:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801defa:	f107 0310 	add.w	r3, r7, #16
 801defe:	687a      	ldr	r2, [r7, #4]
 801df00:	491f      	ldr	r1, [pc, #124]	; (801df80 <make_http_response_head+0x164>)
 801df02:	4618      	mov	r0, r3
 801df04:	f00f f8e8 	bl	802d0d8 <siprintf>
	strcpy(buf, head);
 801df08:	69f9      	ldr	r1, [r7, #28]
 801df0a:	68f8      	ldr	r0, [r7, #12]
 801df0c:	f00f fc01 	bl	802d712 <strcpy>
	strcat(buf, tmp);
 801df10:	f107 0310 	add.w	r3, r7, #16
 801df14:	4619      	mov	r1, r3
 801df16:	68f8      	ldr	r0, [r7, #12]
 801df18:	f00f fa36 	bl	802d388 <strcat>
	strcat(buf, "\r\n\r\n");
 801df1c:	68f8      	ldr	r0, [r7, #12]
 801df1e:	f7f2 f9bf 	bl	80102a0 <strlen>
 801df22:	4603      	mov	r3, r0
 801df24:	461a      	mov	r2, r3
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	4413      	add	r3, r2
 801df2a:	4a16      	ldr	r2, [pc, #88]	; (801df84 <make_http_response_head+0x168>)
 801df2c:	6810      	ldr	r0, [r2, #0]
 801df2e:	6018      	str	r0, [r3, #0]
 801df30:	7912      	ldrb	r2, [r2, #4]
 801df32:	711a      	strb	r2, [r3, #4]
}
 801df34:	bf00      	nop
 801df36:	3720      	adds	r7, #32
 801df38:	46bd      	mov	sp, r7
 801df3a:	bd80      	pop	{r7, pc}
 801df3c:	08032750 	.word	0x08032750
 801df40:	080327a4 	.word	0x080327a4
 801df44:	080327e0 	.word	0x080327e0
 801df48:	0803281c 	.word	0x0803281c
 801df4c:	08032858 	.word	0x08032858
 801df50:	080328a8 	.word	0x080328a8
 801df54:	080328fc 	.word	0x080328fc
 801df58:	08032938 	.word	0x08032938
 801df5c:	0803297c 	.word	0x0803297c
 801df60:	080329c4 	.word	0x080329c4
 801df64:	08032a20 	.word	0x08032a20
 801df68:	08032a5c 	.word	0x08032a5c
 801df6c:	08032a9c 	.word	0x08032a9c
 801df70:	08032aec 	.word	0x08032aec
 801df74:	08032b3c 	.word	0x08032b3c
 801df78:	08032b84 	.word	0x08032b84
 801df7c:	08032bd4 	.word	0x08032bd4
 801df80:	08032c14 	.word	0x08032c14
 801df84:	08032c18 	.word	0x08032c18

0801df88 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801df88:	b580      	push	{r7, lr}
 801df8a:	b084      	sub	sp, #16
 801df8c:	af00      	add	r7, sp, #0
 801df8e:	6078      	str	r0, [r7, #4]
 801df90:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801df92:	683b      	ldr	r3, [r7, #0]
 801df94:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801df96:	499f      	ldr	r1, [pc, #636]	; (801e214 <find_http_uri_type+0x28c>)
 801df98:	68f8      	ldr	r0, [r7, #12]
 801df9a:	f00f fac7 	bl	802d52c <strstr>
 801df9e:	4603      	mov	r3, r0
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d106      	bne.n	801dfb2 <find_http_uri_type+0x2a>
 801dfa4:	499c      	ldr	r1, [pc, #624]	; (801e218 <find_http_uri_type+0x290>)
 801dfa6:	68f8      	ldr	r0, [r7, #12]
 801dfa8:	f00f fac0 	bl	802d52c <strstr>
 801dfac:	4603      	mov	r3, r0
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d003      	beq.n	801dfba <find_http_uri_type+0x32>
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	2201      	movs	r2, #1
 801dfb6:	701a      	strb	r2, [r3, #0]
 801dfb8:	e127      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801dfba:	4998      	ldr	r1, [pc, #608]	; (801e21c <find_http_uri_type+0x294>)
 801dfbc:	68f8      	ldr	r0, [r7, #12]
 801dfbe:	f00f fab5 	bl	802d52c <strstr>
 801dfc2:	4603      	mov	r3, r0
 801dfc4:	2b00      	cmp	r3, #0
 801dfc6:	d003      	beq.n	801dfd0 <find_http_uri_type+0x48>
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	2202      	movs	r2, #2
 801dfcc:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801dfce:	e11c      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801dfd0:	4993      	ldr	r1, [pc, #588]	; (801e220 <find_http_uri_type+0x298>)
 801dfd2:	68f8      	ldr	r0, [r7, #12]
 801dfd4:	f00f faaa 	bl	802d52c <strstr>
 801dfd8:	4603      	mov	r3, r0
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d106      	bne.n	801dfec <find_http_uri_type+0x64>
 801dfde:	4991      	ldr	r1, [pc, #580]	; (801e224 <find_http_uri_type+0x29c>)
 801dfe0:	68f8      	ldr	r0, [r7, #12]
 801dfe2:	f00f faa3 	bl	802d52c <strstr>
 801dfe6:	4603      	mov	r3, r0
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d003      	beq.n	801dff4 <find_http_uri_type+0x6c>
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	2203      	movs	r2, #3
 801dff0:	701a      	strb	r2, [r3, #0]
 801dff2:	e10a      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801dff4:	498c      	ldr	r1, [pc, #560]	; (801e228 <find_http_uri_type+0x2a0>)
 801dff6:	68f8      	ldr	r0, [r7, #12]
 801dff8:	f00f fa98 	bl	802d52c <strstr>
 801dffc:	4603      	mov	r3, r0
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d106      	bne.n	801e010 <find_http_uri_type+0x88>
 801e002:	498a      	ldr	r1, [pc, #552]	; (801e22c <find_http_uri_type+0x2a4>)
 801e004:	68f8      	ldr	r0, [r7, #12]
 801e006:	f00f fa91 	bl	802d52c <strstr>
 801e00a:	4603      	mov	r3, r0
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d003      	beq.n	801e018 <find_http_uri_type+0x90>
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	2204      	movs	r2, #4
 801e014:	701a      	strb	r2, [r3, #0]
 801e016:	e0f8      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e018:	4985      	ldr	r1, [pc, #532]	; (801e230 <find_http_uri_type+0x2a8>)
 801e01a:	68f8      	ldr	r0, [r7, #12]
 801e01c:	f00f fa86 	bl	802d52c <strstr>
 801e020:	4603      	mov	r3, r0
 801e022:	2b00      	cmp	r3, #0
 801e024:	d003      	beq.n	801e02e <find_http_uri_type+0xa6>
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	2205      	movs	r2, #5
 801e02a:	701a      	strb	r2, [r3, #0]
}
 801e02c:	e0ed      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e02e:	4981      	ldr	r1, [pc, #516]	; (801e234 <find_http_uri_type+0x2ac>)
 801e030:	68f8      	ldr	r0, [r7, #12]
 801e032:	f00f fa7b 	bl	802d52c <strstr>
 801e036:	4603      	mov	r3, r0
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d106      	bne.n	801e04a <find_http_uri_type+0xc2>
 801e03c:	497e      	ldr	r1, [pc, #504]	; (801e238 <find_http_uri_type+0x2b0>)
 801e03e:	68f8      	ldr	r0, [r7, #12]
 801e040:	f00f fa74 	bl	802d52c <strstr>
 801e044:	4603      	mov	r3, r0
 801e046:	2b00      	cmp	r3, #0
 801e048:	d003      	beq.n	801e052 <find_http_uri_type+0xca>
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	2208      	movs	r2, #8
 801e04e:	701a      	strb	r2, [r3, #0]
 801e050:	e0db      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e052:	497a      	ldr	r1, [pc, #488]	; (801e23c <find_http_uri_type+0x2b4>)
 801e054:	68f8      	ldr	r0, [r7, #12]
 801e056:	f00f fa69 	bl	802d52c <strstr>
 801e05a:	4603      	mov	r3, r0
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d106      	bne.n	801e06e <find_http_uri_type+0xe6>
 801e060:	4977      	ldr	r1, [pc, #476]	; (801e240 <find_http_uri_type+0x2b8>)
 801e062:	68f8      	ldr	r0, [r7, #12]
 801e064:	f00f fa62 	bl	802d52c <strstr>
 801e068:	4603      	mov	r3, r0
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	d003      	beq.n	801e076 <find_http_uri_type+0xee>
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	220c      	movs	r2, #12
 801e072:	701a      	strb	r2, [r3, #0]
 801e074:	e0c9      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e076:	4973      	ldr	r1, [pc, #460]	; (801e244 <find_http_uri_type+0x2bc>)
 801e078:	68f8      	ldr	r0, [r7, #12]
 801e07a:	f00f fa57 	bl	802d52c <strstr>
 801e07e:	4603      	mov	r3, r0
 801e080:	2b00      	cmp	r3, #0
 801e082:	d106      	bne.n	801e092 <find_http_uri_type+0x10a>
 801e084:	4970      	ldr	r1, [pc, #448]	; (801e248 <find_http_uri_type+0x2c0>)
 801e086:	68f8      	ldr	r0, [r7, #12]
 801e088:	f00f fa50 	bl	802d52c <strstr>
 801e08c:	4603      	mov	r3, r0
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d003      	beq.n	801e09a <find_http_uri_type+0x112>
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	220b      	movs	r2, #11
 801e096:	701a      	strb	r2, [r3, #0]
 801e098:	e0b7      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e09a:	4967      	ldr	r1, [pc, #412]	; (801e238 <find_http_uri_type+0x2b0>)
 801e09c:	68f8      	ldr	r0, [r7, #12]
 801e09e:	f00f fa45 	bl	802d52c <strstr>
 801e0a2:	4603      	mov	r3, r0
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d106      	bne.n	801e0b6 <find_http_uri_type+0x12e>
 801e0a8:	4962      	ldr	r1, [pc, #392]	; (801e234 <find_http_uri_type+0x2ac>)
 801e0aa:	68f8      	ldr	r0, [r7, #12]
 801e0ac:	f00f fa3e 	bl	802d52c <strstr>
 801e0b0:	4603      	mov	r3, r0
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d003      	beq.n	801e0be <find_http_uri_type+0x136>
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	2208      	movs	r2, #8
 801e0ba:	701a      	strb	r2, [r3, #0]
 801e0bc:	e0a5      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e0be:	4963      	ldr	r1, [pc, #396]	; (801e24c <find_http_uri_type+0x2c4>)
 801e0c0:	68f8      	ldr	r0, [r7, #12]
 801e0c2:	f00f fa33 	bl	802d52c <strstr>
 801e0c6:	4603      	mov	r3, r0
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d106      	bne.n	801e0da <find_http_uri_type+0x152>
 801e0cc:	4960      	ldr	r1, [pc, #384]	; (801e250 <find_http_uri_type+0x2c8>)
 801e0ce:	68f8      	ldr	r0, [r7, #12]
 801e0d0:	f00f fa2c 	bl	802d52c <strstr>
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	d003      	beq.n	801e0e2 <find_http_uri_type+0x15a>
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	2209      	movs	r2, #9
 801e0de:	701a      	strb	r2, [r3, #0]
 801e0e0:	e093      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e0e2:	495c      	ldr	r1, [pc, #368]	; (801e254 <find_http_uri_type+0x2cc>)
 801e0e4:	68f8      	ldr	r0, [r7, #12]
 801e0e6:	f00f fa21 	bl	802d52c <strstr>
 801e0ea:	4603      	mov	r3, r0
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d106      	bne.n	801e0fe <find_http_uri_type+0x176>
 801e0f0:	4959      	ldr	r1, [pc, #356]	; (801e258 <find_http_uri_type+0x2d0>)
 801e0f2:	68f8      	ldr	r0, [r7, #12]
 801e0f4:	f00f fa1a 	bl	802d52c <strstr>
 801e0f8:	4603      	mov	r3, r0
 801e0fa:	2b00      	cmp	r3, #0
 801e0fc:	d003      	beq.n	801e106 <find_http_uri_type+0x17e>
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	220a      	movs	r2, #10
 801e102:	701a      	strb	r2, [r3, #0]
 801e104:	e081      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e106:	4955      	ldr	r1, [pc, #340]	; (801e25c <find_http_uri_type+0x2d4>)
 801e108:	68f8      	ldr	r0, [r7, #12]
 801e10a:	f00f fa0f 	bl	802d52c <strstr>
 801e10e:	4603      	mov	r3, r0
 801e110:	2b00      	cmp	r3, #0
 801e112:	d106      	bne.n	801e122 <find_http_uri_type+0x19a>
 801e114:	4952      	ldr	r1, [pc, #328]	; (801e260 <find_http_uri_type+0x2d8>)
 801e116:	68f8      	ldr	r0, [r7, #12]
 801e118:	f00f fa08 	bl	802d52c <strstr>
 801e11c:	4603      	mov	r3, r0
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d003      	beq.n	801e12a <find_http_uri_type+0x1a2>
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	220d      	movs	r2, #13
 801e126:	701a      	strb	r2, [r3, #0]
 801e128:	e06f      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e12a:	494e      	ldr	r1, [pc, #312]	; (801e264 <find_http_uri_type+0x2dc>)
 801e12c:	68f8      	ldr	r0, [r7, #12]
 801e12e:	f00f f9fd 	bl	802d52c <strstr>
 801e132:	4603      	mov	r3, r0
 801e134:	2b00      	cmp	r3, #0
 801e136:	d106      	bne.n	801e146 <find_http_uri_type+0x1be>
 801e138:	494b      	ldr	r1, [pc, #300]	; (801e268 <find_http_uri_type+0x2e0>)
 801e13a:	68f8      	ldr	r0, [r7, #12]
 801e13c:	f00f f9f6 	bl	802d52c <strstr>
 801e140:	4603      	mov	r3, r0
 801e142:	2b00      	cmp	r3, #0
 801e144:	d003      	beq.n	801e14e <find_http_uri_type+0x1c6>
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	220e      	movs	r2, #14
 801e14a:	701a      	strb	r2, [r3, #0]
 801e14c:	e05d      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e14e:	4947      	ldr	r1, [pc, #284]	; (801e26c <find_http_uri_type+0x2e4>)
 801e150:	68f8      	ldr	r0, [r7, #12]
 801e152:	f00f f9eb 	bl	802d52c <strstr>
 801e156:	4603      	mov	r3, r0
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d106      	bne.n	801e16a <find_http_uri_type+0x1e2>
 801e15c:	4944      	ldr	r1, [pc, #272]	; (801e270 <find_http_uri_type+0x2e8>)
 801e15e:	68f8      	ldr	r0, [r7, #12]
 801e160:	f00f f9e4 	bl	802d52c <strstr>
 801e164:	4603      	mov	r3, r0
 801e166:	2b00      	cmp	r3, #0
 801e168:	d003      	beq.n	801e172 <find_http_uri_type+0x1ea>
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	2214      	movs	r2, #20
 801e16e:	701a      	strb	r2, [r3, #0]
 801e170:	e04b      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e172:	4940      	ldr	r1, [pc, #256]	; (801e274 <find_http_uri_type+0x2ec>)
 801e174:	68f8      	ldr	r0, [r7, #12]
 801e176:	f00f f9d9 	bl	802d52c <strstr>
 801e17a:	4603      	mov	r3, r0
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d106      	bne.n	801e18e <find_http_uri_type+0x206>
 801e180:	493d      	ldr	r1, [pc, #244]	; (801e278 <find_http_uri_type+0x2f0>)
 801e182:	68f8      	ldr	r0, [r7, #12]
 801e184:	f00f f9d2 	bl	802d52c <strstr>
 801e188:	4603      	mov	r3, r0
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d003      	beq.n	801e196 <find_http_uri_type+0x20e>
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	2215      	movs	r2, #21
 801e192:	701a      	strb	r2, [r3, #0]
 801e194:	e039      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e196:	4939      	ldr	r1, [pc, #228]	; (801e27c <find_http_uri_type+0x2f4>)
 801e198:	68f8      	ldr	r0, [r7, #12]
 801e19a:	f00f f9c7 	bl	802d52c <strstr>
 801e19e:	4603      	mov	r3, r0
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d106      	bne.n	801e1b2 <find_http_uri_type+0x22a>
 801e1a4:	4936      	ldr	r1, [pc, #216]	; (801e280 <find_http_uri_type+0x2f8>)
 801e1a6:	68f8      	ldr	r0, [r7, #12]
 801e1a8:	f00f f9c0 	bl	802d52c <strstr>
 801e1ac:	4603      	mov	r3, r0
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d003      	beq.n	801e1ba <find_http_uri_type+0x232>
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	2216      	movs	r2, #22
 801e1b6:	701a      	strb	r2, [r3, #0]
 801e1b8:	e027      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e1ba:	4932      	ldr	r1, [pc, #200]	; (801e284 <find_http_uri_type+0x2fc>)
 801e1bc:	68f8      	ldr	r0, [r7, #12]
 801e1be:	f00f f9b5 	bl	802d52c <strstr>
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d106      	bne.n	801e1d6 <find_http_uri_type+0x24e>
 801e1c8:	492f      	ldr	r1, [pc, #188]	; (801e288 <find_http_uri_type+0x300>)
 801e1ca:	68f8      	ldr	r0, [r7, #12]
 801e1cc:	f00f f9ae 	bl	802d52c <strstr>
 801e1d0:	4603      	mov	r3, r0
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d003      	beq.n	801e1de <find_http_uri_type+0x256>
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	2217      	movs	r2, #23
 801e1da:	701a      	strb	r2, [r3, #0]
 801e1dc:	e015      	b.n	801e20a <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e1de:	492b      	ldr	r1, [pc, #172]	; (801e28c <find_http_uri_type+0x304>)
 801e1e0:	68f8      	ldr	r0, [r7, #12]
 801e1e2:	f00f f9a3 	bl	802d52c <strstr>
 801e1e6:	4603      	mov	r3, r0
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d106      	bne.n	801e1fa <find_http_uri_type+0x272>
 801e1ec:	4928      	ldr	r1, [pc, #160]	; (801e290 <find_http_uri_type+0x308>)
 801e1ee:	68f8      	ldr	r0, [r7, #12]
 801e1f0:	f00f f99c 	bl	802d52c <strstr>
 801e1f4:	4603      	mov	r3, r0
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d003      	beq.n	801e202 <find_http_uri_type+0x27a>
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	2218      	movs	r2, #24
 801e1fe:	701a      	strb	r2, [r3, #0]
 801e200:	e003      	b.n	801e20a <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	2200      	movs	r2, #0
 801e206:	701a      	strb	r2, [r3, #0]
}
 801e208:	e7ff      	b.n	801e20a <find_http_uri_type+0x282>
 801e20a:	bf00      	nop
 801e20c:	3710      	adds	r7, #16
 801e20e:	46bd      	mov	sp, r7
 801e210:	bd80      	pop	{r7, pc}
 801e212:	bf00      	nop
 801e214:	08032c20 	.word	0x08032c20
 801e218:	08032c28 	.word	0x08032c28
 801e21c:	08032c30 	.word	0x08032c30
 801e220:	08032c38 	.word	0x08032c38
 801e224:	08032c40 	.word	0x08032c40
 801e228:	08032c48 	.word	0x08032c48
 801e22c:	08032c50 	.word	0x08032c50
 801e230:	08032c58 	.word	0x08032c58
 801e234:	08032c60 	.word	0x08032c60
 801e238:	08032c68 	.word	0x08032c68
 801e23c:	08032c70 	.word	0x08032c70
 801e240:	08032c78 	.word	0x08032c78
 801e244:	08032c80 	.word	0x08032c80
 801e248:	08032c84 	.word	0x08032c84
 801e24c:	08032c88 	.word	0x08032c88
 801e250:	08032c90 	.word	0x08032c90
 801e254:	08032c98 	.word	0x08032c98
 801e258:	08032ca0 	.word	0x08032ca0
 801e25c:	08032ca8 	.word	0x08032ca8
 801e260:	08032cb0 	.word	0x08032cb0
 801e264:	08032cb8 	.word	0x08032cb8
 801e268:	08032cc0 	.word	0x08032cc0
 801e26c:	08032cc8 	.word	0x08032cc8
 801e270:	08032cd0 	.word	0x08032cd0
 801e274:	08032cd8 	.word	0x08032cd8
 801e278:	08032ce0 	.word	0x08032ce0
 801e27c:	08032ce8 	.word	0x08032ce8
 801e280:	08032cf0 	.word	0x08032cf0
 801e284:	08032cf8 	.word	0x08032cf8
 801e288:	08032d00 	.word	0x08032d00
 801e28c:	08032d08 	.word	0x08032d08
 801e290:	08032d10 	.word	0x08032d10

0801e294 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801e294:	b580      	push	{r7, lr}
 801e296:	b084      	sub	sp, #16
 801e298:	af00      	add	r7, sp, #0
 801e29a:	6078      	str	r0, [r7, #4]
 801e29c:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801e29e:	4935      	ldr	r1, [pc, #212]	; (801e374 <parse_http_request+0xe0>)
 801e2a0:	6838      	ldr	r0, [r7, #0]
 801e2a2:	f00f f8e7 	bl	802d474 <strtok>
 801e2a6:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d103      	bne.n	801e2b6 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	2200      	movs	r2, #0
 801e2b2:	701a      	strb	r2, [r3, #0]
    return;
 801e2b4:	e05a      	b.n	801e36c <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801e2b6:	4930      	ldr	r1, [pc, #192]	; (801e378 <parse_http_request+0xe4>)
 801e2b8:	68f8      	ldr	r0, [r7, #12]
 801e2ba:	f7f1 ff91 	bl	80101e0 <strcmp>
 801e2be:	4603      	mov	r3, r0
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d006      	beq.n	801e2d2 <parse_http_request+0x3e>
 801e2c4:	492d      	ldr	r1, [pc, #180]	; (801e37c <parse_http_request+0xe8>)
 801e2c6:	68f8      	ldr	r0, [r7, #12]
 801e2c8:	f7f1 ff8a 	bl	80101e0 <strcmp>
 801e2cc:	4603      	mov	r3, r0
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d10a      	bne.n	801e2e8 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	2201      	movs	r2, #1
 801e2d6:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	3304      	adds	r3, #4
 801e2dc:	4925      	ldr	r1, [pc, #148]	; (801e374 <parse_http_request+0xe0>)
 801e2de:	4618      	mov	r0, r3
 801e2e0:	f00f f8c8 	bl	802d474 <strtok>
 801e2e4:	60f8      	str	r0, [r7, #12]
 801e2e6:	e034      	b.n	801e352 <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801e2e8:	4925      	ldr	r1, [pc, #148]	; (801e380 <parse_http_request+0xec>)
 801e2ea:	68f8      	ldr	r0, [r7, #12]
 801e2ec:	f7f1 ff78 	bl	80101e0 <strcmp>
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d006      	beq.n	801e304 <parse_http_request+0x70>
 801e2f6:	4923      	ldr	r1, [pc, #140]	; (801e384 <parse_http_request+0xf0>)
 801e2f8:	68f8      	ldr	r0, [r7, #12]
 801e2fa:	f7f1 ff71 	bl	80101e0 <strcmp>
 801e2fe:	4603      	mov	r3, r0
 801e300:	2b00      	cmp	r3, #0
 801e302:	d10a      	bne.n	801e31a <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	2202      	movs	r2, #2
 801e308:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	3305      	adds	r3, #5
 801e30e:	4919      	ldr	r1, [pc, #100]	; (801e374 <parse_http_request+0xe0>)
 801e310:	4618      	mov	r0, r3
 801e312:	f00f f8af 	bl	802d474 <strtok>
 801e316:	60f8      	str	r0, [r7, #12]
 801e318:	e01b      	b.n	801e352 <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801e31a:	491b      	ldr	r1, [pc, #108]	; (801e388 <parse_http_request+0xf4>)
 801e31c:	68f8      	ldr	r0, [r7, #12]
 801e31e:	f7f1 ff5f 	bl	80101e0 <strcmp>
 801e322:	4603      	mov	r3, r0
 801e324:	2b00      	cmp	r3, #0
 801e326:	d006      	beq.n	801e336 <parse_http_request+0xa2>
 801e328:	4918      	ldr	r1, [pc, #96]	; (801e38c <parse_http_request+0xf8>)
 801e32a:	68f8      	ldr	r0, [r7, #12]
 801e32c:	f7f1 ff58 	bl	80101e0 <strcmp>
 801e330:	4603      	mov	r3, r0
 801e332:	2b00      	cmp	r3, #0
 801e334:	d10a      	bne.n	801e34c <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801e336:	68fb      	ldr	r3, [r7, #12]
 801e338:	3305      	adds	r3, #5
 801e33a:	4915      	ldr	r1, [pc, #84]	; (801e390 <parse_http_request+0xfc>)
 801e33c:	4618      	mov	r0, r3
 801e33e:	f00f f899 	bl	802d474 <strtok>
 801e342:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	2203      	movs	r2, #3
 801e348:	701a      	strb	r2, [r3, #0]
 801e34a:	e002      	b.n	801e352 <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	2200      	movs	r2, #0
 801e350:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801e352:	68fb      	ldr	r3, [r7, #12]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d103      	bne.n	801e360 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	2200      	movs	r2, #0
 801e35c:	701a      	strb	r2, [r3, #0]
    return;
 801e35e:	e005      	b.n	801e36c <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	3302      	adds	r3, #2
 801e364:	68f9      	ldr	r1, [r7, #12]
 801e366:	4618      	mov	r0, r3
 801e368:	f00f f9d3 	bl	802d712 <strcpy>
}
 801e36c:	3710      	adds	r7, #16
 801e36e:	46bd      	mov	sp, r7
 801e370:	bd80      	pop	{r7, pc}
 801e372:	bf00      	nop
 801e374:	08032d18 	.word	0x08032d18
 801e378:	08032d1c 	.word	0x08032d1c
 801e37c:	08032d20 	.word	0x08032d20
 801e380:	08032d24 	.word	0x08032d24
 801e384:	08032d2c 	.word	0x08032d2c
 801e388:	08032d34 	.word	0x08032d34
 801e38c:	08032d3c 	.word	0x08032d3c
 801e390:	08032d44 	.word	0x08032d44

0801e394 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801e394:	b580      	push	{r7, lr}
 801e396:	b08a      	sub	sp, #40	; 0x28
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
 801e39c:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801e39e:	2300      	movs	r3, #0
 801e3a0:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801e3a2:	4b3c      	ldr	r3, [pc, #240]	; (801e494 <get_http_param_value+0x100>)
 801e3a4:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	837b      	strh	r3, [r7, #26]
 801e3aa:	2300      	movs	r3, #0
 801e3ac:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801e3ae:	2300      	movs	r3, #0
 801e3b0:	60bb      	str	r3, [r7, #8]
 801e3b2:	f107 030c 	add.w	r3, r7, #12
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	601a      	str	r2, [r3, #0]
 801e3ba:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	d002      	beq.n	801e3c8 <get_http_param_value+0x34>
 801e3c2:	683b      	ldr	r3, [r7, #0]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d101      	bne.n	801e3cc <get_http_param_value+0x38>
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	e05f      	b.n	801e48c <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801e3cc:	f107 0308 	add.w	r3, r7, #8
 801e3d0:	4a31      	ldr	r2, [pc, #196]	; (801e498 <get_http_param_value+0x104>)
 801e3d2:	4932      	ldr	r1, [pc, #200]	; (801e49c <get_http_param_value+0x108>)
 801e3d4:	6878      	ldr	r0, [r7, #4]
 801e3d6:	f000 f8b4 	bl	801e542 <mid>
 801e3da:	4603      	mov	r3, r0
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d001      	beq.n	801e3e4 <get_http_param_value+0x50>
		return 0;
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	e053      	b.n	801e48c <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801e3e4:	f107 0308 	add.w	r3, r7, #8
 801e3e8:	210a      	movs	r1, #10
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	f000 f884 	bl	801e4f8 <ATOI>
 801e3f0:	4603      	mov	r3, r0
 801e3f2:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801e3f4:	492a      	ldr	r1, [pc, #168]	; (801e4a0 <get_http_param_value+0x10c>)
 801e3f6:	6878      	ldr	r0, [r7, #4]
 801e3f8:	f00f f898 	bl	802d52c <strstr>
 801e3fc:	6078      	str	r0, [r7, #4]
	uri += 4;
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	3304      	adds	r3, #4
 801e402:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801e404:	8b3b      	ldrh	r3, [r7, #24]
 801e406:	687a      	ldr	r2, [r7, #4]
 801e408:	4413      	add	r3, r2
 801e40a:	2200      	movs	r2, #0
 801e40c:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801e40e:	6839      	ldr	r1, [r7, #0]
 801e410:	6878      	ldr	r0, [r7, #4]
 801e412:	f00f f88b 	bl	802d52c <strstr>
 801e416:	6238      	str	r0, [r7, #32]
 801e418:	6a3b      	ldr	r3, [r7, #32]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d033      	beq.n	801e486 <get_http_param_value+0xf2>
	{
		test = name + 1;
 801e41e:	6a3b      	ldr	r3, [r7, #32]
 801e420:	3301      	adds	r3, #1
 801e422:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801e424:	6838      	ldr	r0, [r7, #0]
 801e426:	f7f1 ff3b 	bl	80102a0 <strlen>
 801e42a:	4603      	mov	r3, r0
 801e42c:	3301      	adds	r3, #1
 801e42e:	6a3a      	ldr	r2, [r7, #32]
 801e430:	4413      	add	r3, r2
 801e432:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801e434:	2126      	movs	r1, #38	; 0x26
 801e436:	6a38      	ldr	r0, [r7, #32]
 801e438:	f00e ffb5 	bl	802d3a6 <strchr>
 801e43c:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 801e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e440:	2b00      	cmp	r3, #0
 801e442:	d106      	bne.n	801e452 <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801e444:	6a38      	ldr	r0, [r7, #32]
 801e446:	f7f1 ff2b 	bl	80102a0 <strlen>
 801e44a:	4602      	mov	r2, r0
 801e44c:	6a3b      	ldr	r3, [r7, #32]
 801e44e:	4413      	add	r3, r2
 801e450:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801e452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e454:	6a3b      	ldr	r3, [r7, #32]
 801e456:	1ad3      	subs	r3, r2, r3
 801e458:	837b      	strh	r3, [r7, #26]

		if(len)
 801e45a:	8b7b      	ldrh	r3, [r7, #26]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d00e      	beq.n	801e47e <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801e460:	8b7b      	ldrh	r3, [r7, #26]
 801e462:	69fa      	ldr	r2, [r7, #28]
 801e464:	4413      	add	r3, r2
 801e466:	2200      	movs	r2, #0
 801e468:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801e46a:	8b7b      	ldrh	r3, [r7, #26]
 801e46c:	461a      	mov	r2, r3
 801e46e:	6a39      	ldr	r1, [r7, #32]
 801e470:	69f8      	ldr	r0, [r7, #28]
 801e472:	f00e ffdb 	bl	802d42c <strncpy>
			unescape_http_url((char *)ret);
 801e476:	69f8      	ldr	r0, [r7, #28]
 801e478:	f7ff fc88 	bl	801dd8c <unescape_http_url>
 801e47c:	e005      	b.n	801e48a <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801e47e:	69fb      	ldr	r3, [r7, #28]
 801e480:	2200      	movs	r2, #0
 801e482:	701a      	strb	r2, [r3, #0]
 801e484:	e001      	b.n	801e48a <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801e486:	2300      	movs	r3, #0
 801e488:	e000      	b.n	801e48c <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801e48a:	69fb      	ldr	r3, [r7, #28]
}
 801e48c:	4618      	mov	r0, r3
 801e48e:	3728      	adds	r7, #40	; 0x28
 801e490:	46bd      	mov	sp, r7
 801e492:	bd80      	pop	{r7, pc}
 801e494:	200009c4 	.word	0x200009c4
 801e498:	08032d48 	.word	0x08032d48
 801e49c:	08032d4c 	.word	0x08032d4c
 801e4a0:	08032c18 	.word	0x08032c18

0801e4a4 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801e4a4:	b580      	push	{r7, lr}
 801e4a6:	b084      	sub	sp, #16
 801e4a8:	af00      	add	r7, sp, #0
 801e4aa:	6078      	str	r0, [r7, #4]
 801e4ac:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d101      	bne.n	801e4b8 <get_http_uri_name+0x14>
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	e017      	b.n	801e4e8 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801e4b8:	6879      	ldr	r1, [r7, #4]
 801e4ba:	6838      	ldr	r0, [r7, #0]
 801e4bc:	f00f f929 	bl	802d712 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801e4c0:	490b      	ldr	r1, [pc, #44]	; (801e4f0 <get_http_uri_name+0x4c>)
 801e4c2:	6838      	ldr	r0, [r7, #0]
 801e4c4:	f00e ffd6 	bl	802d474 <strtok>
 801e4c8:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801e4ca:	490a      	ldr	r1, [pc, #40]	; (801e4f4 <get_http_uri_name+0x50>)
 801e4cc:	68f8      	ldr	r0, [r7, #12]
 801e4ce:	f7f1 fe87 	bl	80101e0 <strcmp>
 801e4d2:	4603      	mov	r3, r0
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d002      	beq.n	801e4de <get_http_uri_name+0x3a>
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	3301      	adds	r3, #1
 801e4dc:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801e4de:	68f9      	ldr	r1, [r7, #12]
 801e4e0:	6838      	ldr	r0, [r7, #0]
 801e4e2:	f00f f916 	bl	802d712 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801e4e6:	2301      	movs	r3, #1
}
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	3710      	adds	r7, #16
 801e4ec:	46bd      	mov	sp, r7
 801e4ee:	bd80      	pop	{r7, pc}
 801e4f0:	08032d60 	.word	0x08032d60
 801e4f4:	08032d64 	.word	0x08032d64

0801e4f8 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801e4f8:	b590      	push	{r4, r7, lr}
 801e4fa:	b085      	sub	sp, #20
 801e4fc:	af00      	add	r7, sp, #0
 801e4fe:	6078      	str	r0, [r7, #4]
 801e500:	460b      	mov	r3, r1
 801e502:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801e504:	2300      	movs	r3, #0
 801e506:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e508:	e00d      	b.n	801e526 <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801e50a:	78fb      	ldrb	r3, [r7, #3]
 801e50c:	68fa      	ldr	r2, [r7, #12]
 801e50e:	fb02 f403 	mul.w	r4, r2, r3
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	1c5a      	adds	r2, r3, #1
 801e516:	607a      	str	r2, [r7, #4]
 801e518:	781b      	ldrb	r3, [r3, #0]
 801e51a:	4618      	mov	r0, r3
 801e51c:	f000 f843 	bl	801e5a6 <C2D>
 801e520:	4603      	mov	r3, r0
 801e522:	4423      	add	r3, r4
 801e524:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	781b      	ldrb	r3, [r3, #0]
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	d003      	beq.n	801e536 <ATOI+0x3e>
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	781b      	ldrb	r3, [r3, #0]
 801e532:	2b20      	cmp	r3, #32
 801e534:	d1e9      	bne.n	801e50a <ATOI+0x12>
	return num;
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	b29b      	uxth	r3, r3
}
 801e53a:	4618      	mov	r0, r3
 801e53c:	3714      	adds	r7, #20
 801e53e:	46bd      	mov	sp, r7
 801e540:	bd90      	pop	{r4, r7, pc}

0801e542 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801e542:	b580      	push	{r7, lr}
 801e544:	b088      	sub	sp, #32
 801e546:	af00      	add	r7, sp, #0
 801e548:	60f8      	str	r0, [r7, #12]
 801e54a:	60b9      	str	r1, [r7, #8]
 801e54c:	607a      	str	r2, [r7, #4]
 801e54e:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801e550:	68b9      	ldr	r1, [r7, #8]
 801e552:	68f8      	ldr	r0, [r7, #12]
 801e554:	f00e ffea 	bl	802d52c <strstr>
 801e558:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801e55a:	69fb      	ldr	r3, [r7, #28]
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d102      	bne.n	801e566 <mid+0x24>
 801e560:	f04f 33ff 	mov.w	r3, #4294967295
 801e564:	e01b      	b.n	801e59e <mid+0x5c>
	sub1+=strlen((char*)s1);
 801e566:	68b8      	ldr	r0, [r7, #8]
 801e568:	f7f1 fe9a 	bl	80102a0 <strlen>
 801e56c:	4602      	mov	r2, r0
 801e56e:	69fb      	ldr	r3, [r7, #28]
 801e570:	4413      	add	r3, r2
 801e572:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801e574:	6879      	ldr	r1, [r7, #4]
 801e576:	69f8      	ldr	r0, [r7, #28]
 801e578:	f00e ffd8 	bl	802d52c <strstr>
 801e57c:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801e57e:	69ba      	ldr	r2, [r7, #24]
 801e580:	69fb      	ldr	r3, [r7, #28]
 801e582:	1ad3      	subs	r3, r2, r3
 801e584:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801e586:	8afb      	ldrh	r3, [r7, #22]
 801e588:	461a      	mov	r2, r3
 801e58a:	69f9      	ldr	r1, [r7, #28]
 801e58c:	6838      	ldr	r0, [r7, #0]
 801e58e:	f00e ff4d 	bl	802d42c <strncpy>
	sub[n]='\0';
 801e592:	8afb      	ldrh	r3, [r7, #22]
 801e594:	683a      	ldr	r2, [r7, #0]
 801e596:	4413      	add	r3, r2
 801e598:	2200      	movs	r2, #0
 801e59a:	701a      	strb	r2, [r3, #0]
	return 0;
 801e59c:	2300      	movs	r3, #0
}
 801e59e:	4618      	mov	r0, r3
 801e5a0:	3720      	adds	r7, #32
 801e5a2:	46bd      	mov	sp, r7
 801e5a4:	bd80      	pop	{r7, pc}

0801e5a6 <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801e5a6:	b480      	push	{r7}
 801e5a8:	b083      	sub	sp, #12
 801e5aa:	af00      	add	r7, sp, #0
 801e5ac:	4603      	mov	r3, r0
 801e5ae:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801e5b0:	79fb      	ldrb	r3, [r7, #7]
 801e5b2:	2b2f      	cmp	r3, #47	; 0x2f
 801e5b4:	d906      	bls.n	801e5c4 <C2D+0x1e>
 801e5b6:	79fb      	ldrb	r3, [r7, #7]
 801e5b8:	2b39      	cmp	r3, #57	; 0x39
 801e5ba:	d803      	bhi.n	801e5c4 <C2D+0x1e>
		return c - '0';
 801e5bc:	79fb      	ldrb	r3, [r7, #7]
 801e5be:	3b30      	subs	r3, #48	; 0x30
 801e5c0:	b2db      	uxtb	r3, r3
 801e5c2:	e014      	b.n	801e5ee <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801e5c4:	79fb      	ldrb	r3, [r7, #7]
 801e5c6:	2b60      	cmp	r3, #96	; 0x60
 801e5c8:	d906      	bls.n	801e5d8 <C2D+0x32>
 801e5ca:	79fb      	ldrb	r3, [r7, #7]
 801e5cc:	2b66      	cmp	r3, #102	; 0x66
 801e5ce:	d803      	bhi.n	801e5d8 <C2D+0x32>
		return 10 + c -'a';
 801e5d0:	79fb      	ldrb	r3, [r7, #7]
 801e5d2:	3b57      	subs	r3, #87	; 0x57
 801e5d4:	b2db      	uxtb	r3, r3
 801e5d6:	e00a      	b.n	801e5ee <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801e5d8:	79fb      	ldrb	r3, [r7, #7]
 801e5da:	2b40      	cmp	r3, #64	; 0x40
 801e5dc:	d906      	bls.n	801e5ec <C2D+0x46>
 801e5de:	79fb      	ldrb	r3, [r7, #7]
 801e5e0:	2b46      	cmp	r3, #70	; 0x46
 801e5e2:	d803      	bhi.n	801e5ec <C2D+0x46>
		return 10 + c -'A';
 801e5e4:	79fb      	ldrb	r3, [r7, #7]
 801e5e6:	3b37      	subs	r3, #55	; 0x37
 801e5e8:	b2db      	uxtb	r3, r3
 801e5ea:	e000      	b.n	801e5ee <C2D+0x48>

	return (char)c;
 801e5ec:	79fb      	ldrb	r3, [r7, #7]
}
 801e5ee:	4618      	mov	r0, r3
 801e5f0:	370c      	adds	r7, #12
 801e5f2:	46bd      	mov	sp, r7
 801e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5f8:	4770      	bx	lr

0801e5fa <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801e5fa:	b480      	push	{r7}
 801e5fc:	af00      	add	r7, sp, #0
 801e5fe:	bf00      	nop
 801e600:	46bd      	mov	sp, r7
 801e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e606:	4770      	bx	lr

0801e608 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801e608:	b480      	push	{r7}
 801e60a:	af00      	add	r7, sp, #0
 801e60c:	bf00      	nop
 801e60e:	46bd      	mov	sp, r7
 801e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e614:	4770      	bx	lr
	...

0801e618 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801e618:	b480      	push	{r7}
 801e61a:	b085      	sub	sp, #20
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	4603      	mov	r3, r0
 801e620:	6039      	str	r1, [r7, #0]
 801e622:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801e624:	2300      	movs	r3, #0
 801e626:	73fb      	strb	r3, [r7, #15]
 801e628:	e009      	b.n	801e63e <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801e62a:	7bfb      	ldrb	r3, [r7, #15]
 801e62c:	683a      	ldr	r2, [r7, #0]
 801e62e:	441a      	add	r2, r3
 801e630:	7bfb      	ldrb	r3, [r7, #15]
 801e632:	7811      	ldrb	r1, [r2, #0]
 801e634:	4a07      	ldr	r2, [pc, #28]	; (801e654 <httpServer_Sockinit+0x3c>)
 801e636:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801e638:	7bfb      	ldrb	r3, [r7, #15]
 801e63a:	3301      	adds	r3, #1
 801e63c:	73fb      	strb	r3, [r7, #15]
 801e63e:	7bfa      	ldrb	r2, [r7, #15]
 801e640:	79fb      	ldrb	r3, [r7, #7]
 801e642:	429a      	cmp	r2, r3
 801e644:	d3f1      	bcc.n	801e62a <httpServer_Sockinit+0x12>
	}
}
 801e646:	bf00      	nop
 801e648:	bf00      	nop
 801e64a:	3714      	adds	r7, #20
 801e64c:	46bd      	mov	sp, r7
 801e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e652:	4770      	bx	lr
 801e654:	200011c4 	.word	0x200011c4

0801e658 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801e658:	b480      	push	{r7}
 801e65a:	b083      	sub	sp, #12
 801e65c:	af00      	add	r7, sp, #0
 801e65e:	4603      	mov	r3, r0
 801e660:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801e662:	79fb      	ldrb	r3, [r7, #7]
 801e664:	4a03      	ldr	r2, [pc, #12]	; (801e674 <getHTTPSocketNum+0x1c>)
 801e666:	5cd3      	ldrb	r3, [r2, r3]
}
 801e668:	4618      	mov	r0, r3
 801e66a:	370c      	adds	r7, #12
 801e66c:	46bd      	mov	sp, r7
 801e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e672:	4770      	bx	lr
 801e674:	200011c4 	.word	0x200011c4

0801e678 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801e678:	b480      	push	{r7}
 801e67a:	b085      	sub	sp, #20
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	4603      	mov	r3, r0
 801e680:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801e682:	2300      	movs	r3, #0
 801e684:	73fb      	strb	r3, [r7, #15]
 801e686:	e00b      	b.n	801e6a0 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801e688:	7bfb      	ldrb	r3, [r7, #15]
 801e68a:	4a0b      	ldr	r2, [pc, #44]	; (801e6b8 <getHTTPSequenceNum+0x40>)
 801e68c:	5cd3      	ldrb	r3, [r2, r3]
 801e68e:	79fa      	ldrb	r2, [r7, #7]
 801e690:	429a      	cmp	r2, r3
 801e692:	d102      	bne.n	801e69a <getHTTPSequenceNum+0x22>
 801e694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e698:	e007      	b.n	801e6aa <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801e69a:	7bfb      	ldrb	r3, [r7, #15]
 801e69c:	3301      	adds	r3, #1
 801e69e:	73fb      	strb	r3, [r7, #15]
 801e6a0:	7bfb      	ldrb	r3, [r7, #15]
 801e6a2:	2b07      	cmp	r3, #7
 801e6a4:	d9f0      	bls.n	801e688 <getHTTPSequenceNum+0x10>

	return -1;
 801e6a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	3714      	adds	r7, #20
 801e6ae:	46bd      	mov	sp, r7
 801e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6b4:	4770      	bx	lr
 801e6b6:	bf00      	nop
 801e6b8:	200011c4 	.word	0x200011c4

0801e6bc <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b084      	sub	sp, #16
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	60f8      	str	r0, [r7, #12]
 801e6c4:	60b9      	str	r1, [r7, #8]
 801e6c6:	603b      	str	r3, [r7, #0]
 801e6c8:	4613      	mov	r3, r2
 801e6ca:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801e6cc:	4a07      	ldr	r2, [pc, #28]	; (801e6ec <httpServer_init+0x30>)
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801e6d2:	4a07      	ldr	r2, [pc, #28]	; (801e6f0 <httpServer_init+0x34>)
 801e6d4:	68bb      	ldr	r3, [r7, #8]
 801e6d6:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801e6d8:	79fb      	ldrb	r3, [r7, #7]
 801e6da:	6839      	ldr	r1, [r7, #0]
 801e6dc:	4618      	mov	r0, r3
 801e6de:	f7ff ff9b 	bl	801e618 <httpServer_Sockinit>
}
 801e6e2:	bf00      	nop
 801e6e4:	3710      	adds	r7, #16
 801e6e6:	46bd      	mov	sp, r7
 801e6e8:	bd80      	pop	{r7, pc}
 801e6ea:	bf00      	nop
 801e6ec:	200012a4 	.word	0x200012a4
 801e6f0:	200012a8 	.word	0x200012a8

0801e6f4 <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801e6f4:	b590      	push	{r4, r7, lr}
 801e6f6:	b089      	sub	sp, #36	; 0x24
 801e6f8:	af02      	add	r7, sp, #8
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801e6fe:	2300      	movs	r3, #0
 801e700:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801e702:	4bb4      	ldr	r3, [pc, #720]	; (801e9d4 <httpServer_run+0x2e0>)
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	4ab4      	ldr	r2, [pc, #720]	; (801e9d8 <httpServer_run+0x2e4>)
 801e708:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801e70a:	4bb4      	ldr	r3, [pc, #720]	; (801e9dc <httpServer_run+0x2e8>)
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	4ab4      	ldr	r2, [pc, #720]	; (801e9e0 <httpServer_run+0x2ec>)
 801e710:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801e712:	79fb      	ldrb	r3, [r7, #7]
 801e714:	4618      	mov	r0, r3
 801e716:	f7ff ff9f 	bl	801e658 <getHTTPSocketNum>
 801e71a:	4603      	mov	r3, r0
 801e71c:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801e71e:	7bfb      	ldrb	r3, [r7, #15]
 801e720:	009b      	lsls	r3, r3, #2
 801e722:	3301      	adds	r3, #1
 801e724:	00db      	lsls	r3, r3, #3
 801e726:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801e72a:	4618      	mov	r0, r3
 801e72c:	f7f9 fd82 	bl	8018234 <WIZCHIP_READ>
 801e730:	4603      	mov	r3, r0
 801e732:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801e734:	7bfb      	ldrb	r3, [r7, #15]
 801e736:	009b      	lsls	r3, r3, #2
 801e738:	3301      	adds	r3, #1
 801e73a:	00db      	lsls	r3, r3, #3
 801e73c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801e740:	4618      	mov	r0, r3
 801e742:	f7f9 fd77 	bl	8018234 <WIZCHIP_READ>
 801e746:	4603      	mov	r3, r0
 801e748:	2b1c      	cmp	r3, #28
 801e74a:	f200 813e 	bhi.w	801e9ca <httpServer_run+0x2d6>
 801e74e:	a201      	add	r2, pc, #4	; (adr r2, 801e754 <httpServer_run+0x60>)
 801e750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e754:	0801e9b3 	.word	0x0801e9b3
 801e758:	0801e9cb 	.word	0x0801e9cb
 801e75c:	0801e9cb 	.word	0x0801e9cb
 801e760:	0801e9cb 	.word	0x0801e9cb
 801e764:	0801e9cb 	.word	0x0801e9cb
 801e768:	0801e9cb 	.word	0x0801e9cb
 801e76c:	0801e9cb 	.word	0x0801e9cb
 801e770:	0801e9cb 	.word	0x0801e9cb
 801e774:	0801e9cb 	.word	0x0801e9cb
 801e778:	0801e9cb 	.word	0x0801e9cb
 801e77c:	0801e9cb 	.word	0x0801e9cb
 801e780:	0801e9cb 	.word	0x0801e9cb
 801e784:	0801e9cb 	.word	0x0801e9cb
 801e788:	0801e9cb 	.word	0x0801e9cb
 801e78c:	0801e9cb 	.word	0x0801e9cb
 801e790:	0801e9cb 	.word	0x0801e9cb
 801e794:	0801e9cb 	.word	0x0801e9cb
 801e798:	0801e9cb 	.word	0x0801e9cb
 801e79c:	0801e9cb 	.word	0x0801e9cb
 801e7a0:	0801e9c1 	.word	0x0801e9c1
 801e7a4:	0801e9cb 	.word	0x0801e9cb
 801e7a8:	0801e9cb 	.word	0x0801e9cb
 801e7ac:	0801e9cb 	.word	0x0801e9cb
 801e7b0:	0801e7c9 	.word	0x0801e7c9
 801e7b4:	0801e9cb 	.word	0x0801e9cb
 801e7b8:	0801e9cb 	.word	0x0801e9cb
 801e7bc:	0801e9cb 	.word	0x0801e9cb
 801e7c0:	0801e9cb 	.word	0x0801e9cb
 801e7c4:	0801e9a9 	.word	0x0801e9a9
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801e7c8:	7bfb      	ldrb	r3, [r7, #15]
 801e7ca:	009b      	lsls	r3, r3, #2
 801e7cc:	3301      	adds	r3, #1
 801e7ce:	00db      	lsls	r3, r3, #3
 801e7d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801e7d4:	4618      	mov	r0, r3
 801e7d6:	f7f9 fd2d 	bl	8018234 <WIZCHIP_READ>
 801e7da:	4603      	mov	r3, r0
 801e7dc:	f003 0301 	and.w	r3, r3, #1
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d009      	beq.n	801e7f8 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801e7e4:	7bfb      	ldrb	r3, [r7, #15]
 801e7e6:	009b      	lsls	r3, r3, #2
 801e7e8:	3301      	adds	r3, #1
 801e7ea:	00db      	lsls	r3, r3, #3
 801e7ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801e7f0:	2101      	movs	r1, #1
 801e7f2:	4618      	mov	r0, r3
 801e7f4:	f7f9 fd6a 	bl	80182cc <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801e7f8:	79fa      	ldrb	r2, [r7, #7]
 801e7fa:	497a      	ldr	r1, [pc, #488]	; (801e9e4 <httpServer_run+0x2f0>)
 801e7fc:	4613      	mov	r3, r2
 801e7fe:	011b      	lsls	r3, r3, #4
 801e800:	4413      	add	r3, r2
 801e802:	009b      	lsls	r3, r3, #2
 801e804:	440b      	add	r3, r1
 801e806:	781b      	ldrb	r3, [r3, #0]
 801e808:	2b04      	cmp	r3, #4
 801e80a:	f000 809b 	beq.w	801e944 <httpServer_run+0x250>
 801e80e:	2b04      	cmp	r3, #4
 801e810:	f300 80c4 	bgt.w	801e99c <httpServer_run+0x2a8>
 801e814:	2b00      	cmp	r3, #0
 801e816:	d002      	beq.n	801e81e <httpServer_run+0x12a>
 801e818:	2b03      	cmp	r3, #3
 801e81a:	d06e      	beq.n	801e8fa <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801e81c:	e0be      	b.n	801e99c <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801e81e:	7bfb      	ldrb	r3, [r7, #15]
 801e820:	4618      	mov	r0, r3
 801e822:	f7f9 feac 	bl	801857e <getSn_RX_RSR>
 801e826:	4603      	mov	r3, r0
 801e828:	82fb      	strh	r3, [r7, #22]
 801e82a:	8afb      	ldrh	r3, [r7, #22]
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	f000 80b7 	beq.w	801e9a0 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801e832:	8afb      	ldrh	r3, [r7, #22]
 801e834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e838:	d902      	bls.n	801e840 <httpServer_run+0x14c>
 801e83a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e83e:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801e840:	4b65      	ldr	r3, [pc, #404]	; (801e9d8 <httpServer_run+0x2e4>)
 801e842:	6819      	ldr	r1, [r3, #0]
 801e844:	8afa      	ldrh	r2, [r7, #22]
 801e846:	7bfb      	ldrb	r3, [r7, #15]
 801e848:	4618      	mov	r0, r3
 801e84a:	f7fa fc0b 	bl	8019064 <recv>
 801e84e:	4603      	mov	r3, r0
 801e850:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801e852:	4b61      	ldr	r3, [pc, #388]	; (801e9d8 <httpServer_run+0x2e4>)
 801e854:	681a      	ldr	r2, [r3, #0]
 801e856:	8afb      	ldrh	r3, [r7, #22]
 801e858:	4413      	add	r3, r2
 801e85a:	2200      	movs	r2, #0
 801e85c:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801e85e:	4b60      	ldr	r3, [pc, #384]	; (801e9e0 <httpServer_run+0x2ec>)
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	4a5d      	ldr	r2, [pc, #372]	; (801e9d8 <httpServer_run+0x2e4>)
 801e864:	6812      	ldr	r2, [r2, #0]
 801e866:	4611      	mov	r1, r2
 801e868:	4618      	mov	r0, r3
 801e86a:	f7ff fd13 	bl	801e294 <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801e86e:	4b5c      	ldr	r3, [pc, #368]	; (801e9e0 <httpServer_run+0x2ec>)
 801e870:	681a      	ldr	r2, [r3, #0]
 801e872:	7bfb      	ldrb	r3, [r7, #15]
 801e874:	4611      	mov	r1, r2
 801e876:	4618      	mov	r0, r3
 801e878:	f000 fac4 	bl	801ee04 <http_process_handler>
						gettime = get_httpServer_timecount();
 801e87c:	f000 fd04 	bl	801f288 <get_httpServer_timecount>
 801e880:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801e882:	e006      	b.n	801e892 <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801e884:	f000 fd00 	bl	801f288 <get_httpServer_timecount>
 801e888:	4602      	mov	r2, r0
 801e88a:	693b      	ldr	r3, [r7, #16]
 801e88c:	1ad3      	subs	r3, r2, r3
 801e88e:	2b03      	cmp	r3, #3
 801e890:	d813      	bhi.n	801e8ba <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801e892:	7bfb      	ldrb	r3, [r7, #15]
 801e894:	4618      	mov	r0, r3
 801e896:	f7f9 fe27 	bl	80184e8 <getSn_TX_FSR>
 801e89a:	4603      	mov	r3, r0
 801e89c:	461c      	mov	r4, r3
 801e89e:	7bfb      	ldrb	r3, [r7, #15]
 801e8a0:	009b      	lsls	r3, r3, #2
 801e8a2:	3301      	adds	r3, #1
 801e8a4:	00db      	lsls	r3, r3, #3
 801e8a6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	f7f9 fcc2 	bl	8018234 <WIZCHIP_READ>
 801e8b0:	4603      	mov	r3, r0
 801e8b2:	029b      	lsls	r3, r3, #10
 801e8b4:	429c      	cmp	r4, r3
 801e8b6:	d1e5      	bne.n	801e884 <httpServer_run+0x190>
 801e8b8:	e000      	b.n	801e8bc <httpServer_run+0x1c8>
								break;
 801e8ba:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801e8bc:	79fa      	ldrb	r2, [r7, #7]
 801e8be:	4949      	ldr	r1, [pc, #292]	; (801e9e4 <httpServer_run+0x2f0>)
 801e8c0:	4613      	mov	r3, r2
 801e8c2:	011b      	lsls	r3, r3, #4
 801e8c4:	4413      	add	r3, r2
 801e8c6:	009b      	lsls	r3, r3, #2
 801e8c8:	440b      	add	r3, r1
 801e8ca:	3338      	adds	r3, #56	; 0x38
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d009      	beq.n	801e8e6 <httpServer_run+0x1f2>
 801e8d2:	79fa      	ldrb	r2, [r7, #7]
 801e8d4:	4943      	ldr	r1, [pc, #268]	; (801e9e4 <httpServer_run+0x2f0>)
 801e8d6:	4613      	mov	r3, r2
 801e8d8:	011b      	lsls	r3, r3, #4
 801e8da:	4413      	add	r3, r2
 801e8dc:	009b      	lsls	r3, r3, #2
 801e8de:	440b      	add	r3, r1
 801e8e0:	2203      	movs	r2, #3
 801e8e2:	701a      	strb	r2, [r3, #0]
					break;
 801e8e4:	e05c      	b.n	801e9a0 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801e8e6:	79fa      	ldrb	r2, [r7, #7]
 801e8e8:	493e      	ldr	r1, [pc, #248]	; (801e9e4 <httpServer_run+0x2f0>)
 801e8ea:	4613      	mov	r3, r2
 801e8ec:	011b      	lsls	r3, r3, #4
 801e8ee:	4413      	add	r3, r2
 801e8f0:	009b      	lsls	r3, r3, #2
 801e8f2:	440b      	add	r3, r1
 801e8f4:	2204      	movs	r2, #4
 801e8f6:	701a      	strb	r2, [r3, #0]
					break;
 801e8f8:	e052      	b.n	801e9a0 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801e8fa:	79fa      	ldrb	r2, [r7, #7]
 801e8fc:	4613      	mov	r3, r2
 801e8fe:	011b      	lsls	r3, r3, #4
 801e900:	4413      	add	r3, r2
 801e902:	009b      	lsls	r3, r3, #2
 801e904:	4a37      	ldr	r2, [pc, #220]	; (801e9e4 <httpServer_run+0x2f0>)
 801e906:	4413      	add	r3, r2
 801e908:	1c59      	adds	r1, r3, #1
 801e90a:	4b37      	ldr	r3, [pc, #220]	; (801e9e8 <httpServer_run+0x2f4>)
 801e90c:	681a      	ldr	r2, [r3, #0]
 801e90e:	7bf8      	ldrb	r0, [r7, #15]
 801e910:	2300      	movs	r3, #0
 801e912:	9300      	str	r3, [sp, #0]
 801e914:	2300      	movs	r3, #0
 801e916:	f000 f8d5 	bl	801eac4 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801e91a:	79fa      	ldrb	r2, [r7, #7]
 801e91c:	4931      	ldr	r1, [pc, #196]	; (801e9e4 <httpServer_run+0x2f0>)
 801e91e:	4613      	mov	r3, r2
 801e920:	011b      	lsls	r3, r3, #4
 801e922:	4413      	add	r3, r2
 801e924:	009b      	lsls	r3, r3, #2
 801e926:	440b      	add	r3, r1
 801e928:	3338      	adds	r3, #56	; 0x38
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d139      	bne.n	801e9a4 <httpServer_run+0x2b0>
 801e930:	79fa      	ldrb	r2, [r7, #7]
 801e932:	492c      	ldr	r1, [pc, #176]	; (801e9e4 <httpServer_run+0x2f0>)
 801e934:	4613      	mov	r3, r2
 801e936:	011b      	lsls	r3, r3, #4
 801e938:	4413      	add	r3, r2
 801e93a:	009b      	lsls	r3, r3, #2
 801e93c:	440b      	add	r3, r1
 801e93e:	2204      	movs	r2, #4
 801e940:	701a      	strb	r2, [r3, #0]
					break;
 801e942:	e02f      	b.n	801e9a4 <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801e944:	79fa      	ldrb	r2, [r7, #7]
 801e946:	4927      	ldr	r1, [pc, #156]	; (801e9e4 <httpServer_run+0x2f0>)
 801e948:	4613      	mov	r3, r2
 801e94a:	011b      	lsls	r3, r3, #4
 801e94c:	4413      	add	r3, r2
 801e94e:	009b      	lsls	r3, r3, #2
 801e950:	440b      	add	r3, r1
 801e952:	3338      	adds	r3, #56	; 0x38
 801e954:	2200      	movs	r2, #0
 801e956:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801e958:	79fa      	ldrb	r2, [r7, #7]
 801e95a:	4922      	ldr	r1, [pc, #136]	; (801e9e4 <httpServer_run+0x2f0>)
 801e95c:	4613      	mov	r3, r2
 801e95e:	011b      	lsls	r3, r3, #4
 801e960:	4413      	add	r3, r2
 801e962:	009b      	lsls	r3, r3, #2
 801e964:	440b      	add	r3, r1
 801e966:	333c      	adds	r3, #60	; 0x3c
 801e968:	2200      	movs	r2, #0
 801e96a:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801e96c:	79fa      	ldrb	r2, [r7, #7]
 801e96e:	491d      	ldr	r1, [pc, #116]	; (801e9e4 <httpServer_run+0x2f0>)
 801e970:	4613      	mov	r3, r2
 801e972:	011b      	lsls	r3, r3, #4
 801e974:	4413      	add	r3, r2
 801e976:	009b      	lsls	r3, r3, #2
 801e978:	440b      	add	r3, r1
 801e97a:	3334      	adds	r3, #52	; 0x34
 801e97c:	2200      	movs	r2, #0
 801e97e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801e980:	79fa      	ldrb	r2, [r7, #7]
 801e982:	4918      	ldr	r1, [pc, #96]	; (801e9e4 <httpServer_run+0x2f0>)
 801e984:	4613      	mov	r3, r2
 801e986:	011b      	lsls	r3, r3, #4
 801e988:	4413      	add	r3, r2
 801e98a:	009b      	lsls	r3, r3, #2
 801e98c:	440b      	add	r3, r1
 801e98e:	2200      	movs	r2, #0
 801e990:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801e992:	7bfb      	ldrb	r3, [r7, #15]
 801e994:	4618      	mov	r0, r3
 801e996:	f000 fa13 	bl	801edc0 <http_disconnect>
					break;
 801e99a:	e004      	b.n	801e9a6 <httpServer_run+0x2b2>
					break;
 801e99c:	bf00      	nop
 801e99e:	e015      	b.n	801e9cc <httpServer_run+0x2d8>
					break;
 801e9a0:	bf00      	nop
 801e9a2:	e013      	b.n	801e9cc <httpServer_run+0x2d8>
					break;
 801e9a4:	bf00      	nop
			}
			break;
 801e9a6:	e011      	b.n	801e9cc <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801e9a8:	7bfb      	ldrb	r3, [r7, #15]
 801e9aa:	4618      	mov	r0, r3
 801e9ac:	f7fa f9ea 	bl	8018d84 <disconnect>
			break;
 801e9b0:	e00c      	b.n	801e9cc <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801e9b2:	7bf8      	ldrb	r0, [r7, #15]
 801e9b4:	2300      	movs	r3, #0
 801e9b6:	2250      	movs	r2, #80	; 0x50
 801e9b8:	2101      	movs	r1, #1
 801e9ba:	f7f9 ff2b 	bl	8018814 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801e9be:	e005      	b.n	801e9cc <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801e9c0:	7bfb      	ldrb	r3, [r7, #15]
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	f7fa f8a8 	bl	8018b18 <listen>
			break;
 801e9c8:	e000      	b.n	801e9cc <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801e9ca:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801e9cc:	bf00      	nop
 801e9ce:	371c      	adds	r7, #28
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	bd90      	pop	{r4, r7, pc}
 801e9d4:	200012a8 	.word	0x200012a8
 801e9d8:	200011cc 	.word	0x200011cc
 801e9dc:	200012a4 	.word	0x200012a4
 801e9e0:	200011d0 	.word	0x200011d0
 801e9e4:	200012b0 	.word	0x200012b0
 801e9e8:	200011d4 	.word	0x200011d4

0801e9ec <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801e9ec:	b590      	push	{r4, r7, lr}
 801e9ee:	b083      	sub	sp, #12
 801e9f0:	af00      	add	r7, sp, #0
 801e9f2:	603a      	str	r2, [r7, #0]
 801e9f4:	461a      	mov	r2, r3
 801e9f6:	4603      	mov	r3, r0
 801e9f8:	71fb      	strb	r3, [r7, #7]
 801e9fa:	460b      	mov	r3, r1
 801e9fc:	71bb      	strb	r3, [r7, #6]
 801e9fe:	4613      	mov	r3, r2
 801ea00:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801ea02:	88bb      	ldrh	r3, [r7, #4]
 801ea04:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ea08:	d029      	beq.n	801ea5e <send_http_response_header+0x72>
 801ea0a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ea0e:	dc3a      	bgt.n	801ea86 <send_http_response_header+0x9a>
 801ea10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ea14:	d019      	beq.n	801ea4a <send_http_response_header+0x5e>
 801ea16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ea1a:	dc34      	bgt.n	801ea86 <send_http_response_header+0x9a>
 801ea1c:	2bc8      	cmp	r3, #200	; 0xc8
 801ea1e:	d003      	beq.n	801ea28 <send_http_response_header+0x3c>
 801ea20:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 801ea24:	d025      	beq.n	801ea72 <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801ea26:	e02e      	b.n	801ea86 <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801ea28:	79bb      	ldrb	r3, [r7, #6]
 801ea2a:	2b08      	cmp	r3, #8
 801ea2c:	d00a      	beq.n	801ea44 <send_http_response_header+0x58>
 801ea2e:	79bb      	ldrb	r3, [r7, #6]
 801ea30:	2b09      	cmp	r3, #9
 801ea32:	d007      	beq.n	801ea44 <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801ea34:	4b1f      	ldr	r3, [pc, #124]	; (801eab4 <send_http_response_header+0xc8>)
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	79b9      	ldrb	r1, [r7, #6]
 801ea3a:	683a      	ldr	r2, [r7, #0]
 801ea3c:	4618      	mov	r0, r3
 801ea3e:	f7ff f9ed 	bl	801de1c <make_http_response_head>
			break;
 801ea42:	e021      	b.n	801ea88 <send_http_response_header+0x9c>
				http_status = 0;
 801ea44:	2300      	movs	r3, #0
 801ea46:	80bb      	strh	r3, [r7, #4]
			break;
 801ea48:	e01e      	b.n	801ea88 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801ea4a:	4b1a      	ldr	r3, [pc, #104]	; (801eab4 <send_http_response_header+0xc8>)
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	4a1a      	ldr	r2, [pc, #104]	; (801eab8 <send_http_response_header+0xcc>)
 801ea50:	4618      	mov	r0, r3
 801ea52:	4611      	mov	r1, r2
 801ea54:	2376      	movs	r3, #118	; 0x76
 801ea56:	461a      	mov	r2, r3
 801ea58:	f00e fe63 	bl	802d722 <memcpy>
			break;
 801ea5c:	e014      	b.n	801ea88 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801ea5e:	4b15      	ldr	r3, [pc, #84]	; (801eab4 <send_http_response_header+0xc8>)
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	4a16      	ldr	r2, [pc, #88]	; (801eabc <send_http_response_header+0xd0>)
 801ea64:	4618      	mov	r0, r3
 801ea66:	4611      	mov	r1, r2
 801ea68:	2399      	movs	r3, #153	; 0x99
 801ea6a:	461a      	mov	r2, r3
 801ea6c:	f00e fe59 	bl	802d722 <memcpy>
			break;
 801ea70:	e00a      	b.n	801ea88 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801ea72:	4b10      	ldr	r3, [pc, #64]	; (801eab4 <send_http_response_header+0xc8>)
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	4a12      	ldr	r2, [pc, #72]	; (801eac0 <send_http_response_header+0xd4>)
 801ea78:	4618      	mov	r0, r3
 801ea7a:	4611      	mov	r1, r2
 801ea7c:	239e      	movs	r3, #158	; 0x9e
 801ea7e:	461a      	mov	r2, r3
 801ea80:	f00e fe4f 	bl	802d722 <memcpy>
			break;
 801ea84:	e000      	b.n	801ea88 <send_http_response_header+0x9c>
			break;
 801ea86:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801ea88:	88bb      	ldrh	r3, [r7, #4]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d00d      	beq.n	801eaaa <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801ea8e:	4b09      	ldr	r3, [pc, #36]	; (801eab4 <send_http_response_header+0xc8>)
 801ea90:	681c      	ldr	r4, [r3, #0]
 801ea92:	4b08      	ldr	r3, [pc, #32]	; (801eab4 <send_http_response_header+0xc8>)
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	4618      	mov	r0, r3
 801ea98:	f7f1 fc02 	bl	80102a0 <strlen>
 801ea9c:	4603      	mov	r3, r0
 801ea9e:	b29a      	uxth	r2, r3
 801eaa0:	79fb      	ldrb	r3, [r7, #7]
 801eaa2:	4621      	mov	r1, r4
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	f7fa f9e3 	bl	8018e70 <send>
	}
}
 801eaaa:	bf00      	nop
 801eaac:	370c      	adds	r7, #12
 801eaae:	46bd      	mov	sp, r7
 801eab0:	bd90      	pop	{r4, r7, pc}
 801eab2:	bf00      	nop
 801eab4:	200011d4 	.word	0x200011d4
 801eab8:	08034094 	.word	0x08034094
 801eabc:	08033ff8 	.word	0x08033ff8
 801eac0:	0803410c 	.word	0x0803410c

0801eac4 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801eac4:	b580      	push	{r7, lr}
 801eac6:	b0a6      	sub	sp, #152	; 0x98
 801eac8:	af00      	add	r7, sp, #0
 801eaca:	60b9      	str	r1, [r7, #8]
 801eacc:	607a      	str	r2, [r7, #4]
 801eace:	603b      	str	r3, [r7, #0]
 801ead0:	4603      	mov	r3, r0
 801ead2:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801ead4:	2300      	movs	r3, #0
 801ead6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801eada:	2300      	movs	r3, #0
 801eadc:	613b      	str	r3, [r7, #16]
 801eade:	f107 0314 	add.w	r3, r7, #20
 801eae2:	227c      	movs	r2, #124	; 0x7c
 801eae4:	2100      	movs	r1, #0
 801eae6:	4618      	mov	r0, r3
 801eae8:	f00e fc46 	bl	802d378 <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801eaec:	7bfb      	ldrb	r3, [r7, #15]
 801eaee:	4618      	mov	r0, r3
 801eaf0:	f7ff fdc2 	bl	801e678 <getHTTPSequenceNum>
 801eaf4:	4603      	mov	r3, r0
 801eaf6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 801eafa:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 801eafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eb02:	f000 812e 	beq.w	801ed62 <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801eb06:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eb0a:	4998      	ldr	r1, [pc, #608]	; (801ed6c <send_http_response_body+0x2a8>)
 801eb0c:	4613      	mov	r3, r2
 801eb0e:	011b      	lsls	r3, r3, #4
 801eb10:	4413      	add	r3, r2
 801eb12:	009b      	lsls	r3, r3, #2
 801eb14:	440b      	add	r3, r1
 801eb16:	3338      	adds	r3, #56	; 0x38
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d140      	bne.n	801eba0 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801eb1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801eb22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eb26:	d336      	bcc.n	801eb96 <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801eb28:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eb2c:	498f      	ldr	r1, [pc, #572]	; (801ed6c <send_http_response_body+0x2a8>)
 801eb2e:	4613      	mov	r3, r2
 801eb30:	011b      	lsls	r3, r3, #4
 801eb32:	4413      	add	r3, r2
 801eb34:	009b      	lsls	r3, r3, #2
 801eb36:	440b      	add	r3, r1
 801eb38:	3334      	adds	r3, #52	; 0x34
 801eb3a:	683a      	ldr	r2, [r7, #0]
 801eb3c:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801eb3e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eb42:	498a      	ldr	r1, [pc, #552]	; (801ed6c <send_http_response_body+0x2a8>)
 801eb44:	4613      	mov	r3, r2
 801eb46:	011b      	lsls	r3, r3, #4
 801eb48:	4413      	add	r3, r2
 801eb4a:	009b      	lsls	r3, r3, #2
 801eb4c:	440b      	add	r3, r1
 801eb4e:	3338      	adds	r3, #56	; 0x38
 801eb50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801eb54:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801eb56:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801eb5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801eb5e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eb62:	4613      	mov	r3, r2
 801eb64:	011b      	lsls	r3, r3, #4
 801eb66:	4413      	add	r3, r2
 801eb68:	009b      	lsls	r3, r3, #2
 801eb6a:	4a80      	ldr	r2, [pc, #512]	; (801ed6c <send_http_response_body+0x2a8>)
 801eb6c:	4413      	add	r3, r2
 801eb6e:	3301      	adds	r3, #1
 801eb70:	2232      	movs	r2, #50	; 0x32
 801eb72:	2100      	movs	r1, #0
 801eb74:	4618      	mov	r0, r3
 801eb76:	f00e fbff 	bl	802d378 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801eb7a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eb7e:	4613      	mov	r3, r2
 801eb80:	011b      	lsls	r3, r3, #4
 801eb82:	4413      	add	r3, r2
 801eb84:	009b      	lsls	r3, r3, #2
 801eb86:	4a79      	ldr	r2, [pc, #484]	; (801ed6c <send_http_response_body+0x2a8>)
 801eb88:	4413      	add	r3, r2
 801eb8a:	3301      	adds	r3, #1
 801eb8c:	68b9      	ldr	r1, [r7, #8]
 801eb8e:	4618      	mov	r0, r3
 801eb90:	f00e fdbf 	bl	802d712 <strcpy>
 801eb94:	e028      	b.n	801ebe8 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801eb96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801eb9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801eb9e:	e023      	b.n	801ebe8 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801eba0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eba4:	4971      	ldr	r1, [pc, #452]	; (801ed6c <send_http_response_body+0x2a8>)
 801eba6:	4613      	mov	r3, r2
 801eba8:	011b      	lsls	r3, r3, #4
 801ebaa:	4413      	add	r3, r2
 801ebac:	009b      	lsls	r3, r3, #2
 801ebae:	440b      	add	r3, r1
 801ebb0:	3338      	adds	r3, #56	; 0x38
 801ebb2:	6819      	ldr	r1, [r3, #0]
 801ebb4:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ebb8:	486c      	ldr	r0, [pc, #432]	; (801ed6c <send_http_response_body+0x2a8>)
 801ebba:	4613      	mov	r3, r2
 801ebbc:	011b      	lsls	r3, r3, #4
 801ebbe:	4413      	add	r3, r2
 801ebc0:	009b      	lsls	r3, r3, #2
 801ebc2:	4403      	add	r3, r0
 801ebc4:	333c      	adds	r3, #60	; 0x3c
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	1acb      	subs	r3, r1, r3
 801ebca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801ebce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ebd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ebd6:	d304      	bcc.n	801ebe2 <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801ebd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801ebdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ebe0:	e002      	b.n	801ebe8 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801ebe2:	2301      	movs	r3, #1
 801ebe4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801ebe8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ebec:	495f      	ldr	r1, [pc, #380]	; (801ed6c <send_http_response_body+0x2a8>)
 801ebee:	4613      	mov	r3, r2
 801ebf0:	011b      	lsls	r3, r3, #4
 801ebf2:	4413      	add	r3, r2
 801ebf4:	009b      	lsls	r3, r3, #2
 801ebf6:	440b      	add	r3, r1
 801ebf8:	3340      	adds	r3, #64	; 0x40
 801ebfa:	781b      	ldrb	r3, [r3, #0]
 801ebfc:	2b01      	cmp	r3, #1
 801ebfe:	d129      	bne.n	801ec54 <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801ec00:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ec04:	4959      	ldr	r1, [pc, #356]	; (801ed6c <send_http_response_body+0x2a8>)
 801ec06:	4613      	mov	r3, r2
 801ec08:	011b      	lsls	r3, r3, #4
 801ec0a:	4413      	add	r3, r2
 801ec0c:	009b      	lsls	r3, r3, #2
 801ec0e:	440b      	add	r3, r1
 801ec10:	3338      	adds	r3, #56	; 0x38
 801ec12:	681b      	ldr	r3, [r3, #0]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d00a      	beq.n	801ec2e <send_http_response_body+0x16a>
 801ec18:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ec1c:	4953      	ldr	r1, [pc, #332]	; (801ed6c <send_http_response_body+0x2a8>)
 801ec1e:	4613      	mov	r3, r2
 801ec20:	011b      	lsls	r3, r3, #4
 801ec22:	4413      	add	r3, r2
 801ec24:	009b      	lsls	r3, r3, #2
 801ec26:	440b      	add	r3, r1
 801ec28:	3334      	adds	r3, #52	; 0x34
 801ec2a:	681b      	ldr	r3, [r3, #0]
 801ec2c:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801ec2e:	683b      	ldr	r3, [r7, #0]
 801ec30:	b298      	uxth	r0, r3
 801ec32:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ec36:	494d      	ldr	r1, [pc, #308]	; (801ed6c <send_http_response_body+0x2a8>)
 801ec38:	4613      	mov	r3, r2
 801ec3a:	011b      	lsls	r3, r3, #4
 801ec3c:	4413      	add	r3, r2
 801ec3e:	009b      	lsls	r3, r3, #2
 801ec40:	440b      	add	r3, r1
 801ec42:	333c      	adds	r3, #60	; 0x3c
 801ec44:	681a      	ldr	r2, [r3, #0]
 801ec46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ec4a:	b29b      	uxth	r3, r3
 801ec4c:	6879      	ldr	r1, [r7, #4]
 801ec4e:	f000 fbc9 	bl	801f3e4 <read_userReg_webContent>
 801ec52:	e035      	b.n	801ecc0 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801ec54:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ec58:	4944      	ldr	r1, [pc, #272]	; (801ed6c <send_http_response_body+0x2a8>)
 801ec5a:	4613      	mov	r3, r2
 801ec5c:	011b      	lsls	r3, r3, #4
 801ec5e:	4413      	add	r3, r2
 801ec60:	009b      	lsls	r3, r3, #2
 801ec62:	440b      	add	r3, r1
 801ec64:	3340      	adds	r3, #64	; 0x40
 801ec66:	781b      	ldrb	r3, [r3, #0]
 801ec68:	2b04      	cmp	r3, #4
 801ec6a:	d126      	bne.n	801ecba <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801ec6c:	f107 0310 	add.w	r3, r7, #16
 801ec70:	2280      	movs	r2, #128	; 0x80
 801ec72:	2100      	movs	r1, #0
 801ec74:	4618      	mov	r0, r3
 801ec76:	f00e fb7f 	bl	802d378 <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801ec7a:	f107 0310 	add.w	r3, r7, #16
 801ec7e:	4a3c      	ldr	r2, [pc, #240]	; (801ed70 <send_http_response_body+0x2ac>)
 801ec80:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ec84:	6018      	str	r0, [r3, #0]
 801ec86:	3304      	adds	r3, #4
 801ec88:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801ec8a:	f107 0310 	add.w	r3, r7, #16
 801ec8e:	68b9      	ldr	r1, [r7, #8]
 801ec90:	4618      	mov	r0, r3
 801ec92:	f00e fb79 	bl	802d388 <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801ec96:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ec9a:	4934      	ldr	r1, [pc, #208]	; (801ed6c <send_http_response_body+0x2a8>)
 801ec9c:	4613      	mov	r3, r2
 801ec9e:	011b      	lsls	r3, r3, #4
 801eca0:	4413      	add	r3, r2
 801eca2:	009b      	lsls	r3, r3, #2
 801eca4:	440b      	add	r3, r1
 801eca6:	333c      	adds	r3, #60	; 0x3c
 801eca8:	681a      	ldr	r2, [r3, #0]
 801ecaa:	f107 0010 	add.w	r0, r7, #16
 801ecae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ecb2:	6879      	ldr	r1, [r7, #4]
 801ecb4:	f00b fdf2 	bl	802a89c <spi_fs_read_file_offset>
 801ecb8:	e002      	b.n	801ecc0 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801ecba:	2300      	movs	r3, #0
 801ecbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801ecc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d008      	beq.n	801ecda <send_http_response_body+0x216>
 801ecc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801eccc:	b29a      	uxth	r2, r3
 801ecce:	7bfb      	ldrb	r3, [r7, #15]
 801ecd0:	6879      	ldr	r1, [r7, #4]
 801ecd2:	4618      	mov	r0, r3
 801ecd4:	f7fa f8cc 	bl	8018e70 <send>
 801ecd8:	e002      	b.n	801ece0 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801ecda:	2301      	movs	r3, #1
 801ecdc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 801ece0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	d024      	beq.n	801ed32 <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801ece8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ecec:	491f      	ldr	r1, [pc, #124]	; (801ed6c <send_http_response_body+0x2a8>)
 801ecee:	4613      	mov	r3, r2
 801ecf0:	011b      	lsls	r3, r3, #4
 801ecf2:	4413      	add	r3, r2
 801ecf4:	009b      	lsls	r3, r3, #2
 801ecf6:	440b      	add	r3, r1
 801ecf8:	3334      	adds	r3, #52	; 0x34
 801ecfa:	2200      	movs	r2, #0
 801ecfc:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801ecfe:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ed02:	491a      	ldr	r1, [pc, #104]	; (801ed6c <send_http_response_body+0x2a8>)
 801ed04:	4613      	mov	r3, r2
 801ed06:	011b      	lsls	r3, r3, #4
 801ed08:	4413      	add	r3, r2
 801ed0a:	009b      	lsls	r3, r3, #2
 801ed0c:	440b      	add	r3, r1
 801ed0e:	3338      	adds	r3, #56	; 0x38
 801ed10:	2200      	movs	r2, #0
 801ed12:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801ed14:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ed18:	4914      	ldr	r1, [pc, #80]	; (801ed6c <send_http_response_body+0x2a8>)
 801ed1a:	4613      	mov	r3, r2
 801ed1c:	011b      	lsls	r3, r3, #4
 801ed1e:	4413      	add	r3, r2
 801ed20:	009b      	lsls	r3, r3, #2
 801ed22:	440b      	add	r3, r1
 801ed24:	333c      	adds	r3, #60	; 0x3c
 801ed26:	2200      	movs	r2, #0
 801ed28:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801ed2a:	2300      	movs	r3, #0
 801ed2c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 801ed30:	e018      	b.n	801ed64 <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801ed32:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ed36:	490d      	ldr	r1, [pc, #52]	; (801ed6c <send_http_response_body+0x2a8>)
 801ed38:	4613      	mov	r3, r2
 801ed3a:	011b      	lsls	r3, r3, #4
 801ed3c:	4413      	add	r3, r2
 801ed3e:	009b      	lsls	r3, r3, #2
 801ed40:	440b      	add	r3, r1
 801ed42:	333c      	adds	r3, #60	; 0x3c
 801ed44:	6819      	ldr	r1, [r3, #0]
 801ed46:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ed4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ed4e:	4419      	add	r1, r3
 801ed50:	4806      	ldr	r0, [pc, #24]	; (801ed6c <send_http_response_body+0x2a8>)
 801ed52:	4613      	mov	r3, r2
 801ed54:	011b      	lsls	r3, r3, #4
 801ed56:	4413      	add	r3, r2
 801ed58:	009b      	lsls	r3, r3, #2
 801ed5a:	4403      	add	r3, r0
 801ed5c:	333c      	adds	r3, #60	; 0x3c
 801ed5e:	6019      	str	r1, [r3, #0]
 801ed60:	e000      	b.n	801ed64 <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801ed62:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801ed64:	3798      	adds	r7, #152	; 0x98
 801ed66:	46bd      	mov	sp, r7
 801ed68:	bd80      	pop	{r7, pc}
 801ed6a:	bf00      	nop
 801ed6c:	200012b0 	.word	0x200012b0
 801ed70:	08032d6c 	.word	0x08032d6c

0801ed74 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801ed74:	b580      	push	{r7, lr}
 801ed76:	b088      	sub	sp, #32
 801ed78:	af02      	add	r7, sp, #8
 801ed7a:	60b9      	str	r1, [r7, #8]
 801ed7c:	607a      	str	r2, [r7, #4]
 801ed7e:	461a      	mov	r2, r3
 801ed80:	4603      	mov	r3, r0
 801ed82:	73fb      	strb	r3, [r7, #15]
 801ed84:	4613      	mov	r3, r2
 801ed86:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801ed88:	2300      	movs	r3, #0
 801ed8a:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801ed8c:	89ba      	ldrh	r2, [r7, #12]
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	9300      	str	r3, [sp, #0]
 801ed92:	4613      	mov	r3, r2
 801ed94:	4a08      	ldr	r2, [pc, #32]	; (801edb8 <send_http_response_cgi+0x44>)
 801ed96:	4909      	ldr	r1, [pc, #36]	; (801edbc <send_http_response_cgi+0x48>)
 801ed98:	68b8      	ldr	r0, [r7, #8]
 801ed9a:	f00e f99d 	bl	802d0d8 <siprintf>
 801ed9e:	4603      	mov	r3, r0
 801eda0:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801eda2:	8afa      	ldrh	r2, [r7, #22]
 801eda4:	7bfb      	ldrb	r3, [r7, #15]
 801eda6:	68b9      	ldr	r1, [r7, #8]
 801eda8:	4618      	mov	r0, r3
 801edaa:	f7fa f861 	bl	8018e70 <send>
}
 801edae:	bf00      	nop
 801edb0:	3718      	adds	r7, #24
 801edb2:	46bd      	mov	sp, r7
 801edb4:	bd80      	pop	{r7, pc}
 801edb6:	bf00      	nop
 801edb8:	08032d74 	.word	0x08032d74
 801edbc:	08032dd0 	.word	0x08032dd0

0801edc0 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801edc0:	b580      	push	{r7, lr}
 801edc2:	b082      	sub	sp, #8
 801edc4:	af00      	add	r7, sp, #0
 801edc6:	4603      	mov	r3, r0
 801edc8:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801edca:	79fb      	ldrb	r3, [r7, #7]
 801edcc:	009b      	lsls	r3, r3, #2
 801edce:	3301      	adds	r3, #1
 801edd0:	00db      	lsls	r3, r3, #3
 801edd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801edd6:	2108      	movs	r1, #8
 801edd8:	4618      	mov	r0, r3
 801edda:	f7f9 fa77 	bl	80182cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801edde:	bf00      	nop
 801ede0:	79fb      	ldrb	r3, [r7, #7]
 801ede2:	009b      	lsls	r3, r3, #2
 801ede4:	3301      	adds	r3, #1
 801ede6:	00db      	lsls	r3, r3, #3
 801ede8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801edec:	4618      	mov	r0, r3
 801edee:	f7f9 fa21 	bl	8018234 <WIZCHIP_READ>
 801edf2:	4603      	mov	r3, r0
 801edf4:	2b00      	cmp	r3, #0
 801edf6:	d1f3      	bne.n	801ede0 <http_disconnect+0x20>

	return SOCK_OK;
 801edf8:	2301      	movs	r3, #1
}
 801edfa:	4618      	mov	r0, r3
 801edfc:	3708      	adds	r7, #8
 801edfe:	46bd      	mov	sp, r7
 801ee00:	bd80      	pop	{r7, pc}
	...

0801ee04 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801ee04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ee08:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801ee0c:	af02      	add	r7, sp, #8
 801ee0e:	4602      	mov	r2, r0
 801ee10:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ee14:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801ee18:	6019      	str	r1, [r3, #0]
 801ee1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ee1e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801ee22:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801ee24:	2300      	movs	r3, #0
 801ee26:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 801ee2a:	2300      	movs	r3, #0
 801ee2c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 801ee30:	2300      	movs	r3, #0
 801ee32:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801ee36:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ee3a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801ee3e:	2200      	movs	r2, #0
 801ee40:	601a      	str	r2, [r3, #0]
 801ee42:	3304      	adds	r3, #4
 801ee44:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801ee48:	2100      	movs	r1, #0
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	f00e fa94 	bl	802d378 <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801ee50:	f04f 0200 	mov.w	r2, #0
 801ee54:	f04f 0300 	mov.w	r3, #0
 801ee58:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801ee5c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ee60:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801ee64:	781b      	ldrb	r3, [r3, #0]
 801ee66:	4618      	mov	r0, r3
 801ee68:	f7ff fc06 	bl	801e678 <getHTTPSequenceNum>
 801ee6c:	4603      	mov	r3, r0
 801ee6e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 801ee72:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 801ee76:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee7a:	f000 81e5 	beq.w	801f248 <http_process_handler+0x444>

	http_status = 0;
 801ee7e:	2300      	movs	r3, #0
 801ee80:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 801ee84:	4ba6      	ldr	r3, [pc, #664]	; (801f120 <http_process_handler+0x31c>)
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	4aa6      	ldr	r2, [pc, #664]	; (801f124 <http_process_handler+0x320>)
 801ee8a:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801ee8c:	2300      	movs	r3, #0
 801ee8e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801ee92:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ee96:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	781b      	ldrb	r3, [r3, #0]
 801ee9e:	2b03      	cmp	r3, #3
 801eea0:	f000 8154 	beq.w	801f14c <http_process_handler+0x348>
 801eea4:	2b03      	cmp	r3, #3
 801eea6:	f300 81be 	bgt.w	801f226 <http_process_handler+0x422>
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d007      	beq.n	801eebe <http_process_handler+0xba>
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	f2c0 81b9 	blt.w	801f226 <http_process_handler+0x422>
 801eeb4:	3b01      	subs	r3, #1
 801eeb6:	2b01      	cmp	r3, #1
 801eeb8:	f200 81b5 	bhi.w	801f226 <http_process_handler+0x422>
 801eebc:	e010      	b.n	801eee0 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801eebe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801eec2:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801eec6:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801eeca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801eece:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801eed2:	7818      	ldrb	r0, [r3, #0]
 801eed4:	4613      	mov	r3, r2
 801eed6:	2200      	movs	r2, #0
 801eed8:	2100      	movs	r1, #0
 801eeda:	f7ff fd87 	bl	801e9ec <send_http_response_header>
			break;
 801eede:	e1b6      	b.n	801f24e <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801eee0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801eee4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	3302      	adds	r3, #2
 801eeec:	f107 0208 	add.w	r2, r7, #8
 801eef0:	4611      	mov	r1, r2
 801eef2:	4618      	mov	r0, r3
 801eef4:	f7ff fad6 	bl	801e4a4 <get_http_uri_name>
			uri_name = uri_buf;
 801eef8:	f107 0308 	add.w	r3, r7, #8
 801eefc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801ef00:	4989      	ldr	r1, [pc, #548]	; (801f128 <http_process_handler+0x324>)
 801ef02:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801ef06:	f7f1 f96b 	bl	80101e0 <strcmp>
 801ef0a:	4603      	mov	r3, r0
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d10b      	bne.n	801ef28 <http_process_handler+0x124>
 801ef10:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801ef14:	4985      	ldr	r1, [pc, #532]	; (801f12c <http_process_handler+0x328>)
 801ef16:	461a      	mov	r2, r3
 801ef18:	460b      	mov	r3, r1
 801ef1a:	cb03      	ldmia	r3!, {r0, r1}
 801ef1c:	6010      	str	r0, [r2, #0]
 801ef1e:	6051      	str	r1, [r2, #4]
 801ef20:	8819      	ldrh	r1, [r3, #0]
 801ef22:	789b      	ldrb	r3, [r3, #2]
 801ef24:	8111      	strh	r1, [r2, #8]
 801ef26:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801ef28:	4981      	ldr	r1, [pc, #516]	; (801f130 <http_process_handler+0x32c>)
 801ef2a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801ef2e:	f7f1 f957 	bl	80101e0 <strcmp>
 801ef32:	4603      	mov	r3, r0
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d10a      	bne.n	801ef4e <http_process_handler+0x14a>
 801ef38:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801ef3c:	4a7d      	ldr	r2, [pc, #500]	; (801f134 <http_process_handler+0x330>)
 801ef3e:	461c      	mov	r4, r3
 801ef40:	4613      	mov	r3, r2
 801ef42:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ef44:	6020      	str	r0, [r4, #0]
 801ef46:	6061      	str	r1, [r4, #4]
 801ef48:	60a2      	str	r2, [r4, #8]
 801ef4a:	781b      	ldrb	r3, [r3, #0]
 801ef4c:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801ef4e:	497a      	ldr	r1, [pc, #488]	; (801f138 <http_process_handler+0x334>)
 801ef50:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801ef54:	f7f1 f944 	bl	80101e0 <strcmp>
 801ef58:	4603      	mov	r3, r0
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d10b      	bne.n	801ef76 <http_process_handler+0x172>
 801ef5e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801ef62:	4a76      	ldr	r2, [pc, #472]	; (801f13c <http_process_handler+0x338>)
 801ef64:	461d      	mov	r5, r3
 801ef66:	4614      	mov	r4, r2
 801ef68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ef6a:	6028      	str	r0, [r5, #0]
 801ef6c:	6069      	str	r1, [r5, #4]
 801ef6e:	60aa      	str	r2, [r5, #8]
 801ef70:	60eb      	str	r3, [r5, #12]
 801ef72:	8823      	ldrh	r3, [r4, #0]
 801ef74:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801ef76:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ef7a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	3301      	adds	r3, #1
 801ef82:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801ef86:	4618      	mov	r0, r3
 801ef88:	f7fe fffe 	bl	801df88 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801ef8c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ef90:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	785b      	ldrb	r3, [r3, #1]
 801ef98:	2b08      	cmp	r3, #8
 801ef9a:	d131      	bne.n	801f000 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801ef9c:	4b68      	ldr	r3, [pc, #416]	; (801f140 <http_process_handler+0x33c>)
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801efa4:	4619      	mov	r1, r3
 801efa6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801efaa:	f000 fa59 	bl	801f460 <http_get_cgi_handler>
 801efae:	4603      	mov	r3, r0
 801efb0:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801efb4:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d015      	beq.n	801efe8 <http_process_handler+0x1e4>
 801efbc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801efc0:	f240 729e 	movw	r2, #1950	; 0x79e
 801efc4:	4293      	cmp	r3, r2
 801efc6:	d80f      	bhi.n	801efe8 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801efc8:	4b56      	ldr	r3, [pc, #344]	; (801f124 <http_process_handler+0x320>)
 801efca:	6819      	ldr	r1, [r3, #0]
 801efcc:	4b5c      	ldr	r3, [pc, #368]	; (801f140 <http_process_handler+0x33c>)
 801efce:	681a      	ldr	r2, [r3, #0]
 801efd0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801efd4:	b29c      	uxth	r4, r3
 801efd6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801efda:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801efde:	7818      	ldrb	r0, [r3, #0]
 801efe0:	4623      	mov	r3, r4
 801efe2:	f7ff fec7 	bl	801ed74 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801efe6:	e131      	b.n	801f24c <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801efe8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801efec:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801eff0:	7818      	ldrb	r0, [r3, #0]
 801eff2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801eff6:	2200      	movs	r2, #0
 801eff8:	2108      	movs	r1, #8
 801effa:	f7ff fcf7 	bl	801e9ec <send_http_response_header>
			break;
 801effe:	e125      	b.n	801f24c <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f000:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f004:	484f      	ldr	r0, [pc, #316]	; (801f144 <http_process_handler+0x340>)
 801f006:	f00b fd25 	bl	802aa54 <spi_fs_serch_file_in_dir>
 801f00a:	4603      	mov	r3, r0
 801f00c:	17da      	asrs	r2, r3, #31
 801f00e:	4698      	mov	r8, r3
 801f010:	4691      	mov	r9, r2
 801f012:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 801f016:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 801f01a:	2a01      	cmp	r2, #1
 801f01c:	f173 0300 	sbcs.w	r3, r3, #0
 801f020:	db12      	blt.n	801f048 <http_process_handler+0x244>
					file_len = err;
 801f022:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801f026:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 801f02a:	2301      	movs	r3, #1
 801f02c:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f030:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f034:	4944      	ldr	r1, [pc, #272]	; (801f148 <http_process_handler+0x344>)
 801f036:	4613      	mov	r3, r2
 801f038:	011b      	lsls	r3, r3, #4
 801f03a:	4413      	add	r3, r2
 801f03c:	009b      	lsls	r3, r3, #2
 801f03e:	440b      	add	r3, r1
 801f040:	3340      	adds	r3, #64	; 0x40
 801f042:	2204      	movs	r2, #4
 801f044:	701a      	strb	r2, [r3, #0]
 801f046:	e024      	b.n	801f092 <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f048:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f04c:	f207 210e 	addw	r1, r7, #526	; 0x20e
 801f050:	f107 0308 	add.w	r3, r7, #8
 801f054:	4618      	mov	r0, r3
 801f056:	f000 f989 	bl	801f36c <find_userReg_webContent>
 801f05a:	4603      	mov	r3, r0
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d012      	beq.n	801f086 <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f060:	2301      	movs	r3, #1
 801f062:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 801f066:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 801f06a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f06e:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f072:	4935      	ldr	r1, [pc, #212]	; (801f148 <http_process_handler+0x344>)
 801f074:	4613      	mov	r3, r2
 801f076:	011b      	lsls	r3, r3, #4
 801f078:	4413      	add	r3, r2
 801f07a:	009b      	lsls	r3, r3, #2
 801f07c:	440b      	add	r3, r1
 801f07e:	3340      	adds	r3, #64	; 0x40
 801f080:	2201      	movs	r2, #1
 801f082:	701a      	strb	r2, [r3, #0]
 801f084:	e005      	b.n	801f092 <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f086:	2300      	movs	r3, #0
 801f088:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 801f08c:	2300      	movs	r3, #0
 801f08e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 801f092:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f096:	2b00      	cmp	r3, #0
 801f098:	d111      	bne.n	801f0be <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f09a:	4924      	ldr	r1, [pc, #144]	; (801f12c <http_process_handler+0x328>)
 801f09c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f0a0:	f7f1 f89e 	bl	80101e0 <strcmp>
 801f0a4:	4603      	mov	r3, r0
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d104      	bne.n	801f0b4 <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f0aa:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f0ae:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f0b2:	e007      	b.n	801f0c4 <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f0b4:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801f0b8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f0bc:	e002      	b.n	801f0c4 <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f0be:	23c8      	movs	r3, #200	; 0xc8
 801f0c0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 801f0c4:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d011      	beq.n	801f0f0 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f0cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f0d0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	7859      	ldrb	r1, [r3, #1]
 801f0d8:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801f0dc:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 801f0e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f0e4:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f0e8:	7818      	ldrb	r0, [r3, #0]
 801f0ea:	4623      	mov	r3, r4
 801f0ec:	f7ff fc7e 	bl	801e9ec <send_http_response_header>
				if(http_status == STATUS_OK)
 801f0f0:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f0f4:	2bc8      	cmp	r3, #200	; 0xc8
 801f0f6:	f040 80a9 	bne.w	801f24c <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f0fa:	4b0a      	ldr	r3, [pc, #40]	; (801f124 <http_process_handler+0x320>)
 801f0fc:	6819      	ldr	r1, [r3, #0]
 801f0fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f102:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801f106:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 801f10a:	7810      	ldrb	r0, [r2, #0]
 801f10c:	9300      	str	r3, [sp, #0]
 801f10e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f112:	460a      	mov	r2, r1
 801f114:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f118:	f7ff fcd4 	bl	801eac4 <send_http_response_body>
			break;
 801f11c:	e096      	b.n	801f24c <http_process_handler+0x448>
 801f11e:	bf00      	nop
 801f120:	200012a8 	.word	0x200012a8
 801f124:	200011d4 	.word	0x200011d4
 801f128:	08032ddc 	.word	0x08032ddc
 801f12c:	08032de0 	.word	0x08032de0
 801f130:	08032dec 	.word	0x08032dec
 801f134:	08032df0 	.word	0x08032df0
 801f138:	08032e00 	.word	0x08032e00
 801f13c:	08032e08 	.word	0x08032e08
 801f140:	200012a4 	.word	0x200012a4
 801f144:	08032d6c 	.word	0x08032d6c
 801f148:	200012b0 	.word	0x200012b0

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f14c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f150:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	1c98      	adds	r0, r3, #2
 801f158:	f107 0308 	add.w	r3, r7, #8
 801f15c:	4a3e      	ldr	r2, [pc, #248]	; (801f258 <http_process_handler+0x454>)
 801f15e:	493f      	ldr	r1, [pc, #252]	; (801f25c <http_process_handler+0x458>)
 801f160:	f7ff f9ef 	bl	801e542 <mid>
			uri_name = uri_buf;
 801f164:	f107 0308 	add.w	r3, r7, #8
 801f168:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f16c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f170:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	3301      	adds	r3, #1
 801f178:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f17c:	4618      	mov	r0, r3
 801f17e:	f7fe ff03 	bl	801df88 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f182:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f186:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f18a:	681b      	ldr	r3, [r3, #0]
 801f18c:	785b      	ldrb	r3, [r3, #1]
 801f18e:	2b08      	cmp	r3, #8
 801f190:	d13c      	bne.n	801f20c <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f192:	4b33      	ldr	r3, [pc, #204]	; (801f260 <http_process_handler+0x45c>)
 801f194:	681a      	ldr	r2, [r3, #0]
 801f196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801f19a:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801f19e:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 801f1a2:	6809      	ldr	r1, [r1, #0]
 801f1a4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f1a8:	f000 f988 	bl	801f4bc <http_post_cgi_handler>
 801f1ac:	4603      	mov	r3, r0
 801f1ae:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f1b2:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d01c      	beq.n	801f1f4 <http_process_handler+0x3f0>
 801f1ba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f1be:	f240 72be 	movw	r2, #1982	; 0x7be
 801f1c2:	4293      	cmp	r3, r2
 801f1c4:	d816      	bhi.n	801f1f4 <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f1c6:	4b27      	ldr	r3, [pc, #156]	; (801f264 <http_process_handler+0x460>)
 801f1c8:	6819      	ldr	r1, [r3, #0]
 801f1ca:	4b25      	ldr	r3, [pc, #148]	; (801f260 <http_process_handler+0x45c>)
 801f1cc:	681a      	ldr	r2, [r3, #0]
 801f1ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f1d2:	b29c      	uxth	r4, r3
 801f1d4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1d8:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f1dc:	7818      	ldrb	r0, [r3, #0]
 801f1de:	4623      	mov	r3, r4
 801f1e0:	f7ff fdc8 	bl	801ed74 <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f1e4:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f1e8:	2b02      	cmp	r3, #2
 801f1ea:	d11b      	bne.n	801f224 <http_process_handler+0x420>
 801f1ec:	4b1e      	ldr	r3, [pc, #120]	; (801f268 <http_process_handler+0x464>)
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	4798      	blx	r3
 801f1f2:	e017      	b.n	801f224 <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f1f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1f8:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f1fc:	7818      	ldrb	r0, [r3, #0]
 801f1fe:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f202:	2200      	movs	r2, #0
 801f204:	2108      	movs	r1, #8
 801f206:	f7ff fbf1 	bl	801e9ec <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f20a:	e020      	b.n	801f24e <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f20c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f210:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f214:	7818      	ldrb	r0, [r3, #0]
 801f216:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f21a:	2200      	movs	r2, #0
 801f21c:	2100      	movs	r1, #0
 801f21e:	f7ff fbe5 	bl	801e9ec <send_http_response_header>
			break;
 801f222:	e014      	b.n	801f24e <http_process_handler+0x44a>
 801f224:	e013      	b.n	801f24e <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f226:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f22a:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f22e:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f232:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f236:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f23a:	7818      	ldrb	r0, [r3, #0]
 801f23c:	4613      	mov	r3, r2
 801f23e:	2200      	movs	r2, #0
 801f240:	2100      	movs	r1, #0
 801f242:	f7ff fbd3 	bl	801e9ec <send_http_response_header>
			break;
 801f246:	e002      	b.n	801f24e <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f248:	bf00      	nop
 801f24a:	e000      	b.n	801f24e <http_process_handler+0x44a>
			break;
 801f24c:	bf00      	nop
	}
}
 801f24e:	f507 770a 	add.w	r7, r7, #552	; 0x228
 801f252:	46bd      	mov	sp, r7
 801f254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f258:	08032e1c 	.word	0x08032e1c
 801f25c:	08032ddc 	.word	0x08032ddc
 801f260:	200011d4 	.word	0x200011d4
 801f264:	200012a4 	.word	0x200012a4
 801f268:	20000120 	.word	0x20000120

0801f26c <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f26c:	b480      	push	{r7}
 801f26e:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f270:	4b04      	ldr	r3, [pc, #16]	; (801f284 <httpServer_time_handler+0x18>)
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	3301      	adds	r3, #1
 801f276:	4a03      	ldr	r2, [pc, #12]	; (801f284 <httpServer_time_handler+0x18>)
 801f278:	6013      	str	r3, [r2, #0]
}
 801f27a:	bf00      	nop
 801f27c:	46bd      	mov	sp, r7
 801f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f282:	4770      	bx	lr
 801f284:	200012ac 	.word	0x200012ac

0801f288 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801f288:	b580      	push	{r7, lr}
 801f28a:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801f28c:	4b03      	ldr	r3, [pc, #12]	; (801f29c <get_httpServer_timecount+0x14>)
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	2001      	movs	r0, #1
 801f292:	4798      	blx	r3
	return httpServer_tick_1s;
 801f294:	4b02      	ldr	r3, [pc, #8]	; (801f2a0 <get_httpServer_timecount+0x18>)
 801f296:	681b      	ldr	r3, [r3, #0]
}
 801f298:	4618      	mov	r0, r3
 801f29a:	bd80      	pop	{r7, pc}
 801f29c:	20000124 	.word	0x20000124
 801f2a0:	200012ac 	.word	0x200012ac

0801f2a4 <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801f2a4:	b580      	push	{r7, lr}
 801f2a6:	b084      	sub	sp, #16
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	6078      	str	r0, [r7, #4]
 801f2ac:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d04e      	beq.n	801f352 <reg_httpServer_webContent+0xae>
 801f2b4:	683b      	ldr	r3, [r7, #0]
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d04b      	beq.n	801f352 <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801f2ba:	4b29      	ldr	r3, [pc, #164]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f2bc:	881b      	ldrh	r3, [r3, #0]
 801f2be:	2b03      	cmp	r3, #3
 801f2c0:	d849      	bhi.n	801f356 <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801f2c2:	6878      	ldr	r0, [r7, #4]
 801f2c4:	f7f0 ffec 	bl	80102a0 <strlen>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801f2cc:	6838      	ldr	r0, [r7, #0]
 801f2ce:	f7f0 ffe7 	bl	80102a0 <strlen>
 801f2d2:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801f2d4:	4b22      	ldr	r3, [pc, #136]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f2d6:	881b      	ldrh	r3, [r3, #0]
 801f2d8:	461a      	mov	r2, r3
 801f2da:	4b21      	ldr	r3, [pc, #132]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f2dc:	881b      	ldrh	r3, [r3, #0]
 801f2de:	4618      	mov	r0, r3
 801f2e0:	2332      	movs	r3, #50	; 0x32
 801f2e2:	fb02 f303 	mul.w	r3, r2, r3
 801f2e6:	4a1f      	ldr	r2, [pc, #124]	; (801f364 <reg_httpServer_webContent+0xc0>)
 801f2e8:	441a      	add	r2, r3
 801f2ea:	491f      	ldr	r1, [pc, #124]	; (801f368 <reg_httpServer_webContent+0xc4>)
 801f2ec:	4603      	mov	r3, r0
 801f2ee:	005b      	lsls	r3, r3, #1
 801f2f0:	4403      	add	r3, r0
 801f2f2:	009b      	lsls	r3, r3, #2
 801f2f4:	440b      	add	r3, r1
 801f2f6:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801f2f8:	4b19      	ldr	r3, [pc, #100]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f2fa:	881b      	ldrh	r3, [r3, #0]
 801f2fc:	4619      	mov	r1, r3
 801f2fe:	4a1a      	ldr	r2, [pc, #104]	; (801f368 <reg_httpServer_webContent+0xc4>)
 801f300:	460b      	mov	r3, r1
 801f302:	005b      	lsls	r3, r3, #1
 801f304:	440b      	add	r3, r1
 801f306:	009b      	lsls	r3, r3, #2
 801f308:	4413      	add	r3, r2
 801f30a:	681b      	ldr	r3, [r3, #0]
 801f30c:	6879      	ldr	r1, [r7, #4]
 801f30e:	4618      	mov	r0, r3
 801f310:	f00e f9ff 	bl	802d712 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801f314:	4b12      	ldr	r3, [pc, #72]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f316:	881b      	ldrh	r3, [r3, #0]
 801f318:	4619      	mov	r1, r3
 801f31a:	4a13      	ldr	r2, [pc, #76]	; (801f368 <reg_httpServer_webContent+0xc4>)
 801f31c:	460b      	mov	r3, r1
 801f31e:	005b      	lsls	r3, r3, #1
 801f320:	440b      	add	r3, r1
 801f322:	009b      	lsls	r3, r3, #2
 801f324:	4413      	add	r3, r2
 801f326:	3304      	adds	r3, #4
 801f328:	68ba      	ldr	r2, [r7, #8]
 801f32a:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801f32c:	4b0c      	ldr	r3, [pc, #48]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f32e:	881b      	ldrh	r3, [r3, #0]
 801f330:	4619      	mov	r1, r3
 801f332:	4a0d      	ldr	r2, [pc, #52]	; (801f368 <reg_httpServer_webContent+0xc4>)
 801f334:	460b      	mov	r3, r1
 801f336:	005b      	lsls	r3, r3, #1
 801f338:	440b      	add	r3, r1
 801f33a:	009b      	lsls	r3, r3, #2
 801f33c:	4413      	add	r3, r2
 801f33e:	3308      	adds	r3, #8
 801f340:	683a      	ldr	r2, [r7, #0]
 801f342:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801f344:	4b06      	ldr	r3, [pc, #24]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f346:	881b      	ldrh	r3, [r3, #0]
 801f348:	3301      	adds	r3, #1
 801f34a:	b29a      	uxth	r2, r3
 801f34c:	4b04      	ldr	r3, [pc, #16]	; (801f360 <reg_httpServer_webContent+0xbc>)
 801f34e:	801a      	strh	r2, [r3, #0]
 801f350:	e002      	b.n	801f358 <reg_httpServer_webContent+0xb4>
		return;
 801f352:	bf00      	nop
 801f354:	e000      	b.n	801f358 <reg_httpServer_webContent+0xb4>
		return;
 801f356:	bf00      	nop
}
 801f358:	3710      	adds	r7, #16
 801f35a:	46bd      	mov	sp, r7
 801f35c:	bd80      	pop	{r7, pc}
 801f35e:	bf00      	nop
 801f360:	200012a0 	.word	0x200012a0
 801f364:	200011d8 	.word	0x200011d8
 801f368:	200014d0 	.word	0x200014d0

0801f36c <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801f36c:	b580      	push	{r7, lr}
 801f36e:	b086      	sub	sp, #24
 801f370:	af00      	add	r7, sp, #0
 801f372:	60f8      	str	r0, [r7, #12]
 801f374:	60b9      	str	r1, [r7, #8]
 801f376:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801f378:	2300      	movs	r3, #0
 801f37a:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801f37c:	2300      	movs	r3, #0
 801f37e:	82fb      	strh	r3, [r7, #22]
 801f380:	e022      	b.n	801f3c8 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801f382:	8afa      	ldrh	r2, [r7, #22]
 801f384:	4915      	ldr	r1, [pc, #84]	; (801f3dc <find_userReg_webContent+0x70>)
 801f386:	4613      	mov	r3, r2
 801f388:	005b      	lsls	r3, r3, #1
 801f38a:	4413      	add	r3, r2
 801f38c:	009b      	lsls	r3, r3, #2
 801f38e:	440b      	add	r3, r1
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	4619      	mov	r1, r3
 801f394:	68f8      	ldr	r0, [r7, #12]
 801f396:	f7f0 ff23 	bl	80101e0 <strcmp>
 801f39a:	4603      	mov	r3, r0
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d110      	bne.n	801f3c2 <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801f3a0:	8afa      	ldrh	r2, [r7, #22]
 801f3a2:	490e      	ldr	r1, [pc, #56]	; (801f3dc <find_userReg_webContent+0x70>)
 801f3a4:	4613      	mov	r3, r2
 801f3a6:	005b      	lsls	r3, r3, #1
 801f3a8:	4413      	add	r3, r2
 801f3aa:	009b      	lsls	r3, r3, #2
 801f3ac:	440b      	add	r3, r1
 801f3ae:	3304      	adds	r3, #4
 801f3b0:	681a      	ldr	r2, [r3, #0]
 801f3b2:	687b      	ldr	r3, [r7, #4]
 801f3b4:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801f3b6:	68bb      	ldr	r3, [r7, #8]
 801f3b8:	8afa      	ldrh	r2, [r7, #22]
 801f3ba:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801f3bc:	2301      	movs	r3, #1
 801f3be:	757b      	strb	r3, [r7, #21]
			break;
 801f3c0:	e007      	b.n	801f3d2 <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801f3c2:	8afb      	ldrh	r3, [r7, #22]
 801f3c4:	3301      	adds	r3, #1
 801f3c6:	82fb      	strh	r3, [r7, #22]
 801f3c8:	4b05      	ldr	r3, [pc, #20]	; (801f3e0 <find_userReg_webContent+0x74>)
 801f3ca:	881b      	ldrh	r3, [r3, #0]
 801f3cc:	8afa      	ldrh	r2, [r7, #22]
 801f3ce:	429a      	cmp	r2, r3
 801f3d0:	d3d7      	bcc.n	801f382 <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801f3d2:	7d7b      	ldrb	r3, [r7, #21]
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	3718      	adds	r7, #24
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}
 801f3dc:	200014d0 	.word	0x200014d0
 801f3e0:	200012a0 	.word	0x200012a0

0801f3e4 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b086      	sub	sp, #24
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	60b9      	str	r1, [r7, #8]
 801f3ec:	607a      	str	r2, [r7, #4]
 801f3ee:	461a      	mov	r2, r3
 801f3f0:	4603      	mov	r3, r0
 801f3f2:	81fb      	strh	r3, [r7, #14]
 801f3f4:	4613      	mov	r3, r2
 801f3f6:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801f3f8:	2300      	movs	r3, #0
 801f3fa:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801f3fc:	4b16      	ldr	r3, [pc, #88]	; (801f458 <read_userReg_webContent+0x74>)
 801f3fe:	881b      	ldrh	r3, [r3, #0]
 801f400:	89fa      	ldrh	r2, [r7, #14]
 801f402:	429a      	cmp	r2, r3
 801f404:	d901      	bls.n	801f40a <read_userReg_webContent+0x26>
 801f406:	2300      	movs	r3, #0
 801f408:	e021      	b.n	801f44e <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801f40a:	89fa      	ldrh	r2, [r7, #14]
 801f40c:	4913      	ldr	r1, [pc, #76]	; (801f45c <read_userReg_webContent+0x78>)
 801f40e:	4613      	mov	r3, r2
 801f410:	005b      	lsls	r3, r3, #1
 801f412:	4413      	add	r3, r2
 801f414:	009b      	lsls	r3, r3, #2
 801f416:	440b      	add	r3, r1
 801f418:	3308      	adds	r3, #8
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	2b00      	cmp	r3, #0
 801f422:	d003      	beq.n	801f42c <read_userReg_webContent+0x48>
 801f424:	697a      	ldr	r2, [r7, #20]
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	4413      	add	r3, r2
 801f42a:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801f42c:	89bb      	ldrh	r3, [r7, #12]
 801f42e:	461a      	mov	r2, r3
 801f430:	6979      	ldr	r1, [r7, #20]
 801f432:	68b8      	ldr	r0, [r7, #8]
 801f434:	f00d fffa 	bl	802d42c <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801f438:	89bb      	ldrh	r3, [r7, #12]
 801f43a:	68ba      	ldr	r2, [r7, #8]
 801f43c:	4413      	add	r3, r2
 801f43e:	2200      	movs	r2, #0
 801f440:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801f442:	68b8      	ldr	r0, [r7, #8]
 801f444:	f7f0 ff2c 	bl	80102a0 <strlen>
 801f448:	4603      	mov	r3, r0
 801f44a:	827b      	strh	r3, [r7, #18]
	return ret;
 801f44c:	8a7b      	ldrh	r3, [r7, #18]
}
 801f44e:	4618      	mov	r0, r3
 801f450:	3718      	adds	r7, #24
 801f452:	46bd      	mov	sp, r7
 801f454:	bd80      	pop	{r7, pc}
 801f456:	bf00      	nop
 801f458:	200012a0 	.word	0x200012a0
 801f45c:	200014d0 	.word	0x200014d0

0801f460 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801f460:	b580      	push	{r7, lr}
 801f462:	b086      	sub	sp, #24
 801f464:	af00      	add	r7, sp, #0
 801f466:	60f8      	str	r0, [r7, #12]
 801f468:	60b9      	str	r1, [r7, #8]
 801f46a:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801f46c:	2301      	movs	r3, #1
 801f46e:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f470:	2300      	movs	r3, #0
 801f472:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801f474:	4b0f      	ldr	r3, [pc, #60]	; (801f4b4 <http_get_cgi_handler+0x54>)
 801f476:	681b      	ldr	r3, [r3, #0]
 801f478:	f107 0214 	add.w	r2, r7, #20
 801f47c:	68b9      	ldr	r1, [r7, #8]
 801f47e:	68f8      	ldr	r0, [r7, #12]
 801f480:	4798      	blx	r3
 801f482:	4603      	mov	r3, r0
 801f484:	2b00      	cmp	r3, #0
 801f486:	d108      	bne.n	801f49a <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f488:	490b      	ldr	r1, [pc, #44]	; (801f4b8 <http_get_cgi_handler+0x58>)
 801f48a:	68f8      	ldr	r0, [r7, #12]
 801f48c:	f7f0 fea8 	bl	80101e0 <strcmp>
 801f490:	4603      	mov	r3, r0
 801f492:	2b00      	cmp	r3, #0
 801f494:	d001      	beq.n	801f49a <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f496:	2300      	movs	r3, #0
 801f498:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f49a:	7dfb      	ldrb	r3, [r7, #23]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d003      	beq.n	801f4a8 <http_get_cgi_handler+0x48>
 801f4a0:	8abb      	ldrh	r3, [r7, #20]
 801f4a2:	461a      	mov	r2, r3
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	601a      	str	r2, [r3, #0]
	return ret;
 801f4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 801f4aa:	4618      	mov	r0, r3
 801f4ac:	3718      	adds	r7, #24
 801f4ae:	46bd      	mov	sp, r7
 801f4b0:	bd80      	pop	{r7, pc}
 801f4b2:	bf00      	nop
 801f4b4:	20001504 	.word	0x20001504
 801f4b8:	08032ed4 	.word	0x08032ed4

0801f4bc <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801f4bc:	b590      	push	{r4, r7, lr}
 801f4be:	b087      	sub	sp, #28
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	60f8      	str	r0, [r7, #12]
 801f4c4:	60b9      	str	r1, [r7, #8]
 801f4c6:	607a      	str	r2, [r7, #4]
 801f4c8:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801f4ca:	2301      	movs	r3, #1
 801f4cc:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f4ce:	2300      	movs	r3, #0
 801f4d0:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801f4d2:	2300      	movs	r3, #0
 801f4d4:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801f4d6:	4b20      	ldr	r3, [pc, #128]	; (801f558 <http_post_cgi_handler+0x9c>)
 801f4d8:	681c      	ldr	r4, [r3, #0]
 801f4da:	68bb      	ldr	r3, [r7, #8]
 801f4dc:	1c99      	adds	r1, r3, #2
 801f4de:	f107 0314 	add.w	r3, r7, #20
 801f4e2:	687a      	ldr	r2, [r7, #4]
 801f4e4:	68f8      	ldr	r0, [r7, #12]
 801f4e6:	47a0      	blx	r4
 801f4e8:	4603      	mov	r3, r0
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d127      	bne.n	801f53e <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f4ee:	491b      	ldr	r1, [pc, #108]	; (801f55c <http_post_cgi_handler+0xa0>)
 801f4f0:	68f8      	ldr	r0, [r7, #12]
 801f4f2:	f7f0 fe75 	bl	80101e0 <strcmp>
 801f4f6:	4603      	mov	r3, r0
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d10b      	bne.n	801f514 <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801f4fc:	2301      	movs	r3, #1
 801f4fe:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f500:	7dbb      	ldrb	r3, [r7, #22]
 801f502:	461a      	mov	r2, r3
 801f504:	4916      	ldr	r1, [pc, #88]	; (801f560 <http_post_cgi_handler+0xa4>)
 801f506:	6878      	ldr	r0, [r7, #4]
 801f508:	f00d fde6 	bl	802d0d8 <siprintf>
 801f50c:	4603      	mov	r3, r0
 801f50e:	b29b      	uxth	r3, r3
 801f510:	82bb      	strh	r3, [r7, #20]
 801f512:	e014      	b.n	801f53e <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801f514:	4913      	ldr	r1, [pc, #76]	; (801f564 <http_post_cgi_handler+0xa8>)
 801f516:	68f8      	ldr	r0, [r7, #12]
 801f518:	f7f0 fe62 	bl	80101e0 <strcmp>
 801f51c:	4603      	mov	r3, r0
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d10b      	bne.n	801f53a <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801f522:	2301      	movs	r3, #1
 801f524:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f526:	7dbb      	ldrb	r3, [r7, #22]
 801f528:	461a      	mov	r2, r3
 801f52a:	490d      	ldr	r1, [pc, #52]	; (801f560 <http_post_cgi_handler+0xa4>)
 801f52c:	6878      	ldr	r0, [r7, #4]
 801f52e:	f00d fdd3 	bl	802d0d8 <siprintf>
 801f532:	4603      	mov	r3, r0
 801f534:	b29b      	uxth	r3, r3
 801f536:	82bb      	strh	r3, [r7, #20]
 801f538:	e001      	b.n	801f53e <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f53a:	2300      	movs	r3, #0
 801f53c:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f53e:	7dfb      	ldrb	r3, [r7, #23]
 801f540:	2b00      	cmp	r3, #0
 801f542:	d003      	beq.n	801f54c <http_post_cgi_handler+0x90>
 801f544:	8abb      	ldrh	r3, [r7, #20]
 801f546:	461a      	mov	r2, r3
 801f548:	683b      	ldr	r3, [r7, #0]
 801f54a:	601a      	str	r2, [r3, #0]
	return ret;
 801f54c:	7dfb      	ldrb	r3, [r7, #23]
}
 801f54e:	4618      	mov	r0, r3
 801f550:	371c      	adds	r7, #28
 801f552:	46bd      	mov	sp, r7
 801f554:	bd90      	pop	{r4, r7, pc}
 801f556:	bf00      	nop
 801f558:	20001500 	.word	0x20001500
 801f55c:	08032ed4 	.word	0x08032ed4
 801f560:	08032ee0 	.word	0x08032ee0
 801f564:	08032ee4 	.word	0x08032ee4

0801f568 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801f568:	b480      	push	{r7}
 801f56a:	b085      	sub	sp, #20
 801f56c:	af00      	add	r7, sp, #0
 801f56e:	60f8      	str	r0, [r7, #12]
 801f570:	60b9      	str	r1, [r7, #8]
 801f572:	607a      	str	r2, [r7, #4]

	;
}
 801f574:	bf00      	nop
 801f576:	4618      	mov	r0, r3
 801f578:	3714      	adds	r7, #20
 801f57a:	46bd      	mov	sp, r7
 801f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f580:	4770      	bx	lr

0801f582 <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801f582:	b480      	push	{r7}
 801f584:	b085      	sub	sp, #20
 801f586:	af00      	add	r7, sp, #0
 801f588:	60f8      	str	r0, [r7, #12]
 801f58a:	60b9      	str	r1, [r7, #8]
 801f58c:	607a      	str	r2, [r7, #4]
 801f58e:	603b      	str	r3, [r7, #0]
	;
}
 801f590:	bf00      	nop
 801f592:	4618      	mov	r0, r3
 801f594:	3714      	adds	r7, #20
 801f596:	46bd      	mov	sp, r7
 801f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f59c:	4770      	bx	lr
	...

0801f5a0 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801f5a0:	b480      	push	{r7}
 801f5a2:	b083      	sub	sp, #12
 801f5a4:	af00      	add	r7, sp, #0
 801f5a6:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801f5a8:	4b07      	ldr	r3, [pc, #28]	; (801f5c8 <reg_external_post_cgi_processor+0x28>)
 801f5aa:	4a08      	ldr	r2, [pc, #32]	; (801f5cc <reg_external_post_cgi_processor+0x2c>)
 801f5ac:	601a      	str	r2, [r3, #0]
	if (function) {
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d002      	beq.n	801f5ba <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801f5b4:	4a04      	ldr	r2, [pc, #16]	; (801f5c8 <reg_external_post_cgi_processor+0x28>)
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	6013      	str	r3, [r2, #0]
	}

}
 801f5ba:	bf00      	nop
 801f5bc:	370c      	adds	r7, #12
 801f5be:	46bd      	mov	sp, r7
 801f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5c4:	4770      	bx	lr
 801f5c6:	bf00      	nop
 801f5c8:	20001500 	.word	0x20001500
 801f5cc:	0801f583 	.word	0x0801f583

0801f5d0 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801f5d0:	b480      	push	{r7}
 801f5d2:	b083      	sub	sp, #12
 801f5d4:	af00      	add	r7, sp, #0
 801f5d6:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801f5d8:	4b07      	ldr	r3, [pc, #28]	; (801f5f8 <reg_external_get_cgi_processor+0x28>)
 801f5da:	4a08      	ldr	r2, [pc, #32]	; (801f5fc <reg_external_get_cgi_processor+0x2c>)
 801f5dc:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d002      	beq.n	801f5ea <reg_external_get_cgi_processor+0x1a>
 801f5e4:	4a04      	ldr	r2, [pc, #16]	; (801f5f8 <reg_external_get_cgi_processor+0x28>)
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	6013      	str	r3, [r2, #0]

}
 801f5ea:	bf00      	nop
 801f5ec:	370c      	adds	r7, #12
 801f5ee:	46bd      	mov	sp, r7
 801f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5f4:	4770      	bx	lr
 801f5f6:	bf00      	nop
 801f5f8:	20001504 	.word	0x20001504
 801f5fc:	0801f569 	.word	0x0801f569

0801f600 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801f600:	b480      	push	{r7}
 801f602:	af00      	add	r7, sp, #0
 801f604:	bf00      	nop
 801f606:	46bd      	mov	sp, r7
 801f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f60c:	4770      	bx	lr

0801f60e <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801f60e:	b480      	push	{r7}
 801f610:	b083      	sub	sp, #12
 801f612:	af00      	add	r7, sp, #0
 801f614:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	f242 7210 	movw	r2, #10000	; 0x2710
 801f61c:	fb02 f303 	mul.w	r3, r2, r3
 801f620:	607b      	str	r3, [r7, #4]

	while (sec){
 801f622:	e002      	b.n	801f62a <proto_delay_func+0x1c>
		sec--;
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	3b01      	subs	r3, #1
 801f628:	607b      	str	r3, [r7, #4]
	while (sec){
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d1f9      	bne.n	801f624 <proto_delay_func+0x16>
	}

}
 801f630:	bf00      	nop
 801f632:	bf00      	nop
 801f634:	370c      	adds	r7, #12
 801f636:	46bd      	mov	sp, r7
 801f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f63c:	4770      	bx	lr
	...

0801f640 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801f640:	b480      	push	{r7}
 801f642:	b083      	sub	sp, #12
 801f644:	af00      	add	r7, sp, #0
 801f646:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801f648:	4a04      	ldr	r2, [pc, #16]	; (801f65c <w5500_lib_init+0x1c>)
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	6013      	str	r3, [r2, #0]
}
 801f64e:	bf00      	nop
 801f650:	370c      	adds	r7, #12
 801f652:	46bd      	mov	sp, r7
 801f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f658:	4770      	bx	lr
 801f65a:	bf00      	nop
 801f65c:	2000150c 	.word	0x2000150c

0801f660 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801f660:	b580      	push	{r7, lr}
 801f662:	b082      	sub	sp, #8
 801f664:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801f666:	2303      	movs	r3, #3
 801f668:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801f66a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801f66e:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801f670:	4b07      	ldr	r3, [pc, #28]	; (801f690 <network_init+0x30>)
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	4619      	mov	r1, r3
 801f676:	2000      	movs	r0, #0
 801f678:	f7fa fa74 	bl	8019b64 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801f67c:	1d3b      	adds	r3, r7, #4
 801f67e:	4619      	mov	r1, r3
 801f680:	2004      	movs	r0, #4
 801f682:	f7fa fa6f 	bl	8019b64 <ctlnetwork>
}
 801f686:	bf00      	nop
 801f688:	3708      	adds	r7, #8
 801f68a:	46bd      	mov	sp, r7
 801f68c:	bd80      	pop	{r7, pc}
 801f68e:	bf00      	nop
 801f690:	2000150c 	.word	0x2000150c

0801f694 <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801f694:	b480      	push	{r7}
 801f696:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801f698:	4b03      	ldr	r3, [pc, #12]	; (801f6a8 <Callback_IPConflict+0x14>)
 801f69a:	2200      	movs	r2, #0
 801f69c:	701a      	strb	r2, [r3, #0]
}
 801f69e:	bf00      	nop
 801f6a0:	46bd      	mov	sp, r7
 801f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6a6:	4770      	bx	lr
 801f6a8:	20001508 	.word	0x20001508

0801f6ac <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801f6b0:	4b11      	ldr	r3, [pc, #68]	; (801f6f8 <Callback_IPAssigned+0x4c>)
 801f6b2:	681b      	ldr	r3, [r3, #0]
 801f6b4:	3306      	adds	r3, #6
 801f6b6:	4618      	mov	r0, r3
 801f6b8:	f7fc fa0a 	bl	801bad0 <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801f6bc:	4b0e      	ldr	r3, [pc, #56]	; (801f6f8 <Callback_IPAssigned+0x4c>)
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	330e      	adds	r3, #14
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	f7fc fa24 	bl	801bb10 <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801f6c8:	4b0b      	ldr	r3, [pc, #44]	; (801f6f8 <Callback_IPAssigned+0x4c>)
 801f6ca:	681b      	ldr	r3, [r3, #0]
 801f6cc:	330a      	adds	r3, #10
 801f6ce:	4618      	mov	r0, r3
 801f6d0:	f7fc fa3e 	bl	801bb50 <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801f6d4:	4b08      	ldr	r3, [pc, #32]	; (801f6f8 <Callback_IPAssigned+0x4c>)
 801f6d6:	681b      	ldr	r3, [r3, #0]
 801f6d8:	3312      	adds	r3, #18
 801f6da:	4618      	mov	r0, r3
 801f6dc:	f7fc fa58 	bl	801bb90 <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801f6e0:	4b05      	ldr	r3, [pc, #20]	; (801f6f8 <Callback_IPAssigned+0x4c>)
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	2202      	movs	r2, #2
 801f6e6:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801f6e8:	f7ff ffba 	bl	801f660 <network_init>

   ip_dhcp_assigned = true;
 801f6ec:	4b03      	ldr	r3, [pc, #12]	; (801f6fc <Callback_IPAssigned+0x50>)
 801f6ee:	2201      	movs	r2, #1
 801f6f0:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801f6f2:	bf00      	nop
 801f6f4:	bd80      	pop	{r7, pc}
 801f6f6:	bf00      	nop
 801f6f8:	2000150c 	.word	0x2000150c
 801f6fc:	20001508 	.word	0x20001508

0801f700 <dhcp_rutine>:

void dhcp_rutine(void){
 801f700:	b580      	push	{r7, lr}
 801f702:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801f704:	f7fb ff6e 	bl	801b5e4 <DHCP_run>
 801f708:	4603      	mov	r3, r0
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d004      	beq.n	801f718 <dhcp_rutine+0x18>
 801f70e:	2b00      	cmp	r3, #0
 801f710:	db09      	blt.n	801f726 <dhcp_rutine+0x26>
 801f712:	3b02      	subs	r3, #2
 801f714:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801f716:	e006      	b.n	801f726 <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801f718:	4b04      	ldr	r3, [pc, #16]	; (801f72c <dhcp_rutine+0x2c>)
 801f71a:	781b      	ldrb	r3, [r3, #0]
 801f71c:	3301      	adds	r3, #1
 801f71e:	b2da      	uxtb	r2, r3
 801f720:	4b02      	ldr	r3, [pc, #8]	; (801f72c <dhcp_rutine+0x2c>)
 801f722:	701a      	strb	r2, [r3, #0]
				break;
 801f724:	e000      	b.n	801f728 <dhcp_rutine+0x28>
				break;
 801f726:	bf00      	nop
			}
}
 801f728:	bf00      	nop
 801f72a:	bd80      	pop	{r7, pc}
 801f72c:	20001510 	.word	0x20001510

0801f730 <link_status>:

int link_status(void){
 801f730:	b580      	push	{r7, lr}
 801f732:	b082      	sub	sp, #8
 801f734:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801f736:	1dfb      	adds	r3, r7, #7
 801f738:	4619      	mov	r1, r3
 801f73a:	200f      	movs	r0, #15
 801f73c:	f7fa f930 	bl	80199a0 <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801f740:	79fb      	ldrb	r3, [r7, #7]
 801f742:	2b00      	cmp	r3, #0
 801f744:	d102      	bne.n	801f74c <link_status+0x1c>
 801f746:	4b04      	ldr	r3, [pc, #16]	; (801f758 <link_status+0x28>)
 801f748:	2200      	movs	r2, #0
 801f74a:	701a      	strb	r2, [r3, #0]
	return temp;
 801f74c:	79fb      	ldrb	r3, [r7, #7]
}
 801f74e:	4618      	mov	r0, r3
 801f750:	3708      	adds	r7, #8
 801f752:	46bd      	mov	sp, r7
 801f754:	bd80      	pop	{r7, pc}
 801f756:	bf00      	nop
 801f758:	20001508 	.word	0x20001508

0801f75c <link_duplex>:

int link_duplex(void){
 801f75c:	b580      	push	{r7, lr}
 801f75e:	b082      	sub	sp, #8
 801f760:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801f762:	1d3b      	adds	r3, r7, #4
 801f764:	4618      	mov	r0, r3
 801f766:	f7fa fcad 	bl	801a0c4 <wizphy_getphystat>
	return phy_status.duplex;
 801f76a:	79fb      	ldrb	r3, [r7, #7]
}
 801f76c:	4618      	mov	r0, r3
 801f76e:	3708      	adds	r7, #8
 801f770:	46bd      	mov	sp, r7
 801f772:	bd80      	pop	{r7, pc}

0801f774 <link_speed>:

int link_speed(void){
 801f774:	b580      	push	{r7, lr}
 801f776:	b082      	sub	sp, #8
 801f778:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801f77a:	1d3b      	adds	r3, r7, #4
 801f77c:	4618      	mov	r0, r3
 801f77e:	f7fa fca1 	bl	801a0c4 <wizphy_getphystat>
	return phy_status.speed;
 801f782:	79bb      	ldrb	r3, [r7, #6]
}
 801f784:	4618      	mov	r0, r3
 801f786:	3708      	adds	r7, #8
 801f788:	46bd      	mov	sp, r7
 801f78a:	bd80      	pop	{r7, pc}

0801f78c <assigned_ip>:

int assigned_ip(void){
 801f78c:	b480      	push	{r7}
 801f78e:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801f790:	4b03      	ldr	r3, [pc, #12]	; (801f7a0 <assigned_ip+0x14>)
 801f792:	781b      	ldrb	r3, [r3, #0]
}
 801f794:	4618      	mov	r0, r3
 801f796:	46bd      	mov	sp, r7
 801f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f79c:	4770      	bx	lr
 801f79e:	bf00      	nop
 801f7a0:	20001508 	.word	0x20001508

0801f7a4 <set_ip_aasigned>:

void set_ip_aasigned(void){
 801f7a4:	b480      	push	{r7}
 801f7a6:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801f7a8:	4b03      	ldr	r3, [pc, #12]	; (801f7b8 <set_ip_aasigned+0x14>)
 801f7aa:	2201      	movs	r2, #1
 801f7ac:	701a      	strb	r2, [r3, #0]
}
 801f7ae:	bf00      	nop
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7b6:	4770      	bx	lr
 801f7b8:	20001508 	.word	0x20001508

0801f7bc <w5500_init>:

int w5500_init(void)
{
 801f7bc:	b590      	push	{r4, r7, lr}
 801f7be:	b085      	sub	sp, #20
 801f7c0:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801f7c2:	4b18      	ldr	r3, [pc, #96]	; (801f824 <w5500_init+0x68>)
 801f7c4:	463c      	mov	r4, r7
 801f7c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f7c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801f7cc:	4b16      	ldr	r3, [pc, #88]	; (801f828 <w5500_init+0x6c>)
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	4798      	blx	r3
  delay_ms(delay0_5s);
 801f7d2:	4b16      	ldr	r3, [pc, #88]	; (801f82c <w5500_init+0x70>)
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801f7da:	4798      	blx	r3
  ResetOFF();
 801f7dc:	4b14      	ldr	r3, [pc, #80]	; (801f830 <w5500_init+0x74>)
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	4798      	blx	r3
  delay_ms(delay3s);
 801f7e2:	4b12      	ldr	r3, [pc, #72]	; (801f82c <w5500_init+0x70>)
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801f7ea:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801f7ec:	463b      	mov	r3, r7
 801f7ee:	4619      	mov	r1, r3
 801f7f0:	2001      	movs	r0, #1
 801f7f2:	f7fa f8d5 	bl	80199a0 <ctlwizchip>
 801f7f6:	4603      	mov	r3, r0
 801f7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f7fc:	d102      	bne.n	801f804 <w5500_init+0x48>
  {
	  return -1;
 801f7fe:	f04f 33ff 	mov.w	r3, #4294967295
 801f802:	e00b      	b.n	801f81c <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801f804:	f7ff ff94 	bl	801f730 <link_status>
 801f808:	4603      	mov	r3, r0
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d102      	bne.n	801f814 <w5500_init+0x58>
	   return -1;
 801f80e:	f04f 33ff 	mov.w	r3, #4294967295
 801f812:	e003      	b.n	801f81c <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801f814:	4b07      	ldr	r3, [pc, #28]	; (801f834 <w5500_init+0x78>)
 801f816:	2200      	movs	r2, #0
 801f818:	701a      	strb	r2, [r3, #0]
  return 0;
 801f81a:	2300      	movs	r3, #0
}
 801f81c:	4618      	mov	r0, r3
 801f81e:	3714      	adds	r7, #20
 801f820:	46bd      	mov	sp, r7
 801f822:	bd90      	pop	{r4, r7, pc}
 801f824:	08032ef8 	.word	0x08032ef8
 801f828:	20001518 	.word	0x20001518
 801f82c:	20001514 	.word	0x20001514
 801f830:	2000151c 	.word	0x2000151c
 801f834:	20001508 	.word	0x20001508

0801f838 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801f838:	b480      	push	{r7}
 801f83a:	b083      	sub	sp, #12
 801f83c:	af00      	add	r7, sp, #0
 801f83e:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801f840:	4b07      	ldr	r3, [pc, #28]	; (801f860 <w5500_delay_cb+0x28>)
 801f842:	4a08      	ldr	r2, [pc, #32]	; (801f864 <w5500_delay_cb+0x2c>)
 801f844:	601a      	str	r2, [r3, #0]

	if (function){
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d002      	beq.n	801f852 <w5500_delay_cb+0x1a>
		delay_ms = function;
 801f84c:	4a04      	ldr	r2, [pc, #16]	; (801f860 <w5500_delay_cb+0x28>)
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	6013      	str	r3, [r2, #0]
	}
}
 801f852:	bf00      	nop
 801f854:	370c      	adds	r7, #12
 801f856:	46bd      	mov	sp, r7
 801f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f85c:	4770      	bx	lr
 801f85e:	bf00      	nop
 801f860:	20001514 	.word	0x20001514
 801f864:	0801f60f 	.word	0x0801f60f

0801f868 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801f868:	b480      	push	{r7}
 801f86a:	b083      	sub	sp, #12
 801f86c:	af00      	add	r7, sp, #0
 801f86e:	6078      	str	r0, [r7, #4]
 801f870:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801f872:	4b0c      	ldr	r3, [pc, #48]	; (801f8a4 <w5500_reset_cb+0x3c>)
 801f874:	4a0c      	ldr	r2, [pc, #48]	; (801f8a8 <w5500_reset_cb+0x40>)
 801f876:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801f878:	4b0c      	ldr	r3, [pc, #48]	; (801f8ac <w5500_reset_cb+0x44>)
 801f87a:	4a0b      	ldr	r2, [pc, #44]	; (801f8a8 <w5500_reset_cb+0x40>)
 801f87c:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	2b00      	cmp	r3, #0
 801f882:	d002      	beq.n	801f88a <w5500_reset_cb+0x22>
 801f884:	4a07      	ldr	r2, [pc, #28]	; (801f8a4 <w5500_reset_cb+0x3c>)
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 801f88a:	683b      	ldr	r3, [r7, #0]
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d002      	beq.n	801f896 <w5500_reset_cb+0x2e>
 801f890:	4a06      	ldr	r2, [pc, #24]	; (801f8ac <w5500_reset_cb+0x44>)
 801f892:	683b      	ldr	r3, [r7, #0]
 801f894:	6013      	str	r3, [r2, #0]
}
 801f896:	bf00      	nop
 801f898:	370c      	adds	r7, #12
 801f89a:	46bd      	mov	sp, r7
 801f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8a0:	4770      	bx	lr
 801f8a2:	bf00      	nop
 801f8a4:	20001518 	.word	0x20001518
 801f8a8:	0801f601 	.word	0x0801f601
 801f8ac:	2000151c 	.word	0x2000151c

0801f8b0 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 801f8b0:	b580      	push	{r7, lr}
 801f8b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 801f8b4:	2200      	movs	r2, #0
 801f8b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801f8ba:	4802      	ldr	r0, [pc, #8]	; (801f8c4 <Eth_reset_on+0x14>)
 801f8bc:	f7f5 ffe2 	bl	8015884 <HAL_GPIO_WritePin>
}
 801f8c0:	bf00      	nop
 801f8c2:	bd80      	pop	{r7, pc}
 801f8c4:	40020000 	.word	0x40020000

0801f8c8 <Eth_reset_off>:

void Eth_reset_off(void){
 801f8c8:	b580      	push	{r7, lr}
 801f8ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 801f8cc:	2201      	movs	r2, #1
 801f8ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801f8d2:	4802      	ldr	r0, [pc, #8]	; (801f8dc <Eth_reset_off+0x14>)
 801f8d4:	f7f5 ffd6 	bl	8015884 <HAL_GPIO_WritePin>
}
 801f8d8:	bf00      	nop
 801f8da:	bd80      	pop	{r7, pc}
 801f8dc:	40020000 	.word	0x40020000

0801f8e0 <Eth_spi_select>:

void Eth_spi_select(void){
 801f8e0:	b580      	push	{r7, lr}
 801f8e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 801f8e4:	2200      	movs	r2, #0
 801f8e6:	2140      	movs	r1, #64	; 0x40
 801f8e8:	4802      	ldr	r0, [pc, #8]	; (801f8f4 <Eth_spi_select+0x14>)
 801f8ea:	f7f5 ffcb 	bl	8015884 <HAL_GPIO_WritePin>
}
 801f8ee:	bf00      	nop
 801f8f0:	bd80      	pop	{r7, pc}
 801f8f2:	bf00      	nop
 801f8f4:	40020400 	.word	0x40020400

0801f8f8 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 801f8f8:	b580      	push	{r7, lr}
 801f8fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 801f8fc:	2201      	movs	r2, #1
 801f8fe:	2140      	movs	r1, #64	; 0x40
 801f900:	4802      	ldr	r0, [pc, #8]	; (801f90c <Eth_spi_deselect+0x14>)
 801f902:	f7f5 ffbf 	bl	8015884 <HAL_GPIO_WritePin>
}
 801f906:	bf00      	nop
 801f908:	bd80      	pop	{r7, pc}
 801f90a:	bf00      	nop
 801f90c:	40020400 	.word	0x40020400

0801f910 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 801f910:	b084      	sub	sp, #16
 801f912:	b580      	push	{r7, lr}
 801f914:	af00      	add	r7, sp, #0
 801f916:	f107 0c08 	add.w	ip, r7, #8
 801f91a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 801f91e:	4b07      	ldr	r3, [pc, #28]	; (801f93c <Reg_eth_spi+0x2c>)
 801f920:	4618      	mov	r0, r3
 801f922:	f107 0308 	add.w	r3, r7, #8
 801f926:	2258      	movs	r2, #88	; 0x58
 801f928:	4619      	mov	r1, r3
 801f92a:	f00d fefa 	bl	802d722 <memcpy>
}
 801f92e:	bf00      	nop
 801f930:	46bd      	mov	sp, r7
 801f932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801f936:	b004      	add	sp, #16
 801f938:	4770      	bx	lr
 801f93a:	bf00      	nop
 801f93c:	20001520 	.word	0x20001520

0801f940 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 801f940:	b580      	push	{r7, lr}
 801f942:	b082      	sub	sp, #8
 801f944:	af00      	add	r7, sp, #0
 801f946:	4603      	mov	r3, r0
 801f948:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 801f94a:	1df9      	adds	r1, r7, #7
 801f94c:	f241 3388 	movw	r3, #5000	; 0x1388
 801f950:	2201      	movs	r2, #1
 801f952:	4803      	ldr	r0, [pc, #12]	; (801f960 <Eth_spi_send_byte+0x20>)
 801f954:	f7f6 fd03 	bl	801635e <HAL_SPI_Transmit>
}
 801f958:	bf00      	nop
 801f95a:	3708      	adds	r7, #8
 801f95c:	46bd      	mov	sp, r7
 801f95e:	bd80      	pop	{r7, pc}
 801f960:	20001520 	.word	0x20001520

0801f964 <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 801f964:	b580      	push	{r7, lr}
 801f966:	b082      	sub	sp, #8
 801f968:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 801f96a:	1df9      	adds	r1, r7, #7
 801f96c:	f241 3388 	movw	r3, #5000	; 0x1388
 801f970:	2201      	movs	r2, #1
 801f972:	4804      	ldr	r0, [pc, #16]	; (801f984 <Eth_spi_resv_byte+0x20>)
 801f974:	f7f6 fe36 	bl	80165e4 <HAL_SPI_Receive>
	return byte;
 801f978:	79fb      	ldrb	r3, [r7, #7]
}
 801f97a:	4618      	mov	r0, r3
 801f97c:	3708      	adds	r7, #8
 801f97e:	46bd      	mov	sp, r7
 801f980:	bd80      	pop	{r7, pc}
 801f982:	bf00      	nop
 801f984:	20001520 	.word	0x20001520

0801f988 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 801f988:	b480      	push	{r7}
 801f98a:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 801f98c:	bf00      	nop
 801f98e:	46bd      	mov	sp, r7
 801f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f994:	4770      	bx	lr
	...

0801f998 <__NVIC_SetPriority>:
{
 801f998:	b480      	push	{r7}
 801f99a:	b083      	sub	sp, #12
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	4603      	mov	r3, r0
 801f9a0:	6039      	str	r1, [r7, #0]
 801f9a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801f9a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	db0a      	blt.n	801f9c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801f9ac:	683b      	ldr	r3, [r7, #0]
 801f9ae:	b2da      	uxtb	r2, r3
 801f9b0:	490c      	ldr	r1, [pc, #48]	; (801f9e4 <__NVIC_SetPriority+0x4c>)
 801f9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f9b6:	0112      	lsls	r2, r2, #4
 801f9b8:	b2d2      	uxtb	r2, r2
 801f9ba:	440b      	add	r3, r1
 801f9bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801f9c0:	e00a      	b.n	801f9d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801f9c2:	683b      	ldr	r3, [r7, #0]
 801f9c4:	b2da      	uxtb	r2, r3
 801f9c6:	4908      	ldr	r1, [pc, #32]	; (801f9e8 <__NVIC_SetPriority+0x50>)
 801f9c8:	79fb      	ldrb	r3, [r7, #7]
 801f9ca:	f003 030f 	and.w	r3, r3, #15
 801f9ce:	3b04      	subs	r3, #4
 801f9d0:	0112      	lsls	r2, r2, #4
 801f9d2:	b2d2      	uxtb	r2, r2
 801f9d4:	440b      	add	r3, r1
 801f9d6:	761a      	strb	r2, [r3, #24]
}
 801f9d8:	bf00      	nop
 801f9da:	370c      	adds	r7, #12
 801f9dc:	46bd      	mov	sp, r7
 801f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9e2:	4770      	bx	lr
 801f9e4:	e000e100 	.word	0xe000e100
 801f9e8:	e000ed00 	.word	0xe000ed00

0801f9ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801f9ec:	b580      	push	{r7, lr}
 801f9ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801f9f0:	4b05      	ldr	r3, [pc, #20]	; (801fa08 <SysTick_Handler+0x1c>)
 801f9f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801f9f4:	f002 fbe0 	bl	80221b8 <xTaskGetSchedulerState>
 801f9f8:	4603      	mov	r3, r0
 801f9fa:	2b01      	cmp	r3, #1
 801f9fc:	d001      	beq.n	801fa02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801f9fe:	f003 fac3 	bl	8022f88 <xPortSysTickHandler>
  }
}
 801fa02:	bf00      	nop
 801fa04:	bd80      	pop	{r7, pc}
 801fa06:	bf00      	nop
 801fa08:	e000e010 	.word	0xe000e010

0801fa0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801fa0c:	b580      	push	{r7, lr}
 801fa0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801fa10:	2100      	movs	r1, #0
 801fa12:	f06f 0004 	mvn.w	r0, #4
 801fa16:	f7ff ffbf 	bl	801f998 <__NVIC_SetPriority>
#endif
}
 801fa1a:	bf00      	nop
 801fa1c:	bd80      	pop	{r7, pc}
	...

0801fa20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801fa20:	b480      	push	{r7}
 801fa22:	b083      	sub	sp, #12
 801fa24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fa26:	f3ef 8305 	mrs	r3, IPSR
 801fa2a:	603b      	str	r3, [r7, #0]
  return(result);
 801fa2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d003      	beq.n	801fa3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801fa32:	f06f 0305 	mvn.w	r3, #5
 801fa36:	607b      	str	r3, [r7, #4]
 801fa38:	e00c      	b.n	801fa54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801fa3a:	4b0a      	ldr	r3, [pc, #40]	; (801fa64 <osKernelInitialize+0x44>)
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d105      	bne.n	801fa4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801fa42:	4b08      	ldr	r3, [pc, #32]	; (801fa64 <osKernelInitialize+0x44>)
 801fa44:	2201      	movs	r2, #1
 801fa46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801fa48:	2300      	movs	r3, #0
 801fa4a:	607b      	str	r3, [r7, #4]
 801fa4c:	e002      	b.n	801fa54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801fa4e:	f04f 33ff 	mov.w	r3, #4294967295
 801fa52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801fa54:	687b      	ldr	r3, [r7, #4]
}
 801fa56:	4618      	mov	r0, r3
 801fa58:	370c      	adds	r7, #12
 801fa5a:	46bd      	mov	sp, r7
 801fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa60:	4770      	bx	lr
 801fa62:	bf00      	nop
 801fa64:	20001578 	.word	0x20001578

0801fa68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801fa68:	b580      	push	{r7, lr}
 801fa6a:	b082      	sub	sp, #8
 801fa6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fa6e:	f3ef 8305 	mrs	r3, IPSR
 801fa72:	603b      	str	r3, [r7, #0]
  return(result);
 801fa74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d003      	beq.n	801fa82 <osKernelStart+0x1a>
    stat = osErrorISR;
 801fa7a:	f06f 0305 	mvn.w	r3, #5
 801fa7e:	607b      	str	r3, [r7, #4]
 801fa80:	e010      	b.n	801faa4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801fa82:	4b0b      	ldr	r3, [pc, #44]	; (801fab0 <osKernelStart+0x48>)
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	2b01      	cmp	r3, #1
 801fa88:	d109      	bne.n	801fa9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801fa8a:	f7ff ffbf 	bl	801fa0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801fa8e:	4b08      	ldr	r3, [pc, #32]	; (801fab0 <osKernelStart+0x48>)
 801fa90:	2202      	movs	r2, #2
 801fa92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801fa94:	f001 fece 	bl	8021834 <vTaskStartScheduler>
      stat = osOK;
 801fa98:	2300      	movs	r3, #0
 801fa9a:	607b      	str	r3, [r7, #4]
 801fa9c:	e002      	b.n	801faa4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801fa9e:	f04f 33ff 	mov.w	r3, #4294967295
 801faa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801faa4:	687b      	ldr	r3, [r7, #4]
}
 801faa6:	4618      	mov	r0, r3
 801faa8:	3708      	adds	r7, #8
 801faaa:	46bd      	mov	sp, r7
 801faac:	bd80      	pop	{r7, pc}
 801faae:	bf00      	nop
 801fab0:	20001578 	.word	0x20001578

0801fab4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801fab4:	b580      	push	{r7, lr}
 801fab6:	b08e      	sub	sp, #56	; 0x38
 801fab8:	af04      	add	r7, sp, #16
 801faba:	60f8      	str	r0, [r7, #12]
 801fabc:	60b9      	str	r1, [r7, #8]
 801fabe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801fac0:	2300      	movs	r3, #0
 801fac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fac4:	f3ef 8305 	mrs	r3, IPSR
 801fac8:	617b      	str	r3, [r7, #20]
  return(result);
 801faca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801facc:	2b00      	cmp	r3, #0
 801face:	d17e      	bne.n	801fbce <osThreadNew+0x11a>
 801fad0:	68fb      	ldr	r3, [r7, #12]
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d07b      	beq.n	801fbce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801fad6:	2380      	movs	r3, #128	; 0x80
 801fad8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801fada:	2318      	movs	r3, #24
 801fadc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801fade:	2300      	movs	r3, #0
 801fae0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801fae2:	f04f 33ff 	mov.w	r3, #4294967295
 801fae6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	2b00      	cmp	r3, #0
 801faec:	d045      	beq.n	801fb7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d002      	beq.n	801fafc <osThreadNew+0x48>
        name = attr->name;
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	681b      	ldr	r3, [r3, #0]
 801fafa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	699b      	ldr	r3, [r3, #24]
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d002      	beq.n	801fb0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	699b      	ldr	r3, [r3, #24]
 801fb08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801fb0a:	69fb      	ldr	r3, [r7, #28]
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	d008      	beq.n	801fb22 <osThreadNew+0x6e>
 801fb10:	69fb      	ldr	r3, [r7, #28]
 801fb12:	2b38      	cmp	r3, #56	; 0x38
 801fb14:	d805      	bhi.n	801fb22 <osThreadNew+0x6e>
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	685b      	ldr	r3, [r3, #4]
 801fb1a:	f003 0301 	and.w	r3, r3, #1
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d001      	beq.n	801fb26 <osThreadNew+0x72>
        return (NULL);
 801fb22:	2300      	movs	r3, #0
 801fb24:	e054      	b.n	801fbd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801fb26:	687b      	ldr	r3, [r7, #4]
 801fb28:	695b      	ldr	r3, [r3, #20]
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	d003      	beq.n	801fb36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	695b      	ldr	r3, [r3, #20]
 801fb32:	089b      	lsrs	r3, r3, #2
 801fb34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	689b      	ldr	r3, [r3, #8]
 801fb3a:	2b00      	cmp	r3, #0
 801fb3c:	d00e      	beq.n	801fb5c <osThreadNew+0xa8>
 801fb3e:	687b      	ldr	r3, [r7, #4]
 801fb40:	68db      	ldr	r3, [r3, #12]
 801fb42:	2bab      	cmp	r3, #171	; 0xab
 801fb44:	d90a      	bls.n	801fb5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d006      	beq.n	801fb5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	695b      	ldr	r3, [r3, #20]
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d002      	beq.n	801fb5c <osThreadNew+0xa8>
        mem = 1;
 801fb56:	2301      	movs	r3, #1
 801fb58:	61bb      	str	r3, [r7, #24]
 801fb5a:	e010      	b.n	801fb7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	689b      	ldr	r3, [r3, #8]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d10c      	bne.n	801fb7e <osThreadNew+0xca>
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	68db      	ldr	r3, [r3, #12]
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d108      	bne.n	801fb7e <osThreadNew+0xca>
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	691b      	ldr	r3, [r3, #16]
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d104      	bne.n	801fb7e <osThreadNew+0xca>
          mem = 0;
 801fb74:	2300      	movs	r3, #0
 801fb76:	61bb      	str	r3, [r7, #24]
 801fb78:	e001      	b.n	801fb7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801fb7e:	69bb      	ldr	r3, [r7, #24]
 801fb80:	2b01      	cmp	r3, #1
 801fb82:	d110      	bne.n	801fba6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801fb88:	687a      	ldr	r2, [r7, #4]
 801fb8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801fb8c:	9202      	str	r2, [sp, #8]
 801fb8e:	9301      	str	r3, [sp, #4]
 801fb90:	69fb      	ldr	r3, [r7, #28]
 801fb92:	9300      	str	r3, [sp, #0]
 801fb94:	68bb      	ldr	r3, [r7, #8]
 801fb96:	6a3a      	ldr	r2, [r7, #32]
 801fb98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fb9a:	68f8      	ldr	r0, [r7, #12]
 801fb9c:	f001 fc5a 	bl	8021454 <xTaskCreateStatic>
 801fba0:	4603      	mov	r3, r0
 801fba2:	613b      	str	r3, [r7, #16]
 801fba4:	e013      	b.n	801fbce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801fba6:	69bb      	ldr	r3, [r7, #24]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d110      	bne.n	801fbce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801fbac:	6a3b      	ldr	r3, [r7, #32]
 801fbae:	b29a      	uxth	r2, r3
 801fbb0:	f107 0310 	add.w	r3, r7, #16
 801fbb4:	9301      	str	r3, [sp, #4]
 801fbb6:	69fb      	ldr	r3, [r7, #28]
 801fbb8:	9300      	str	r3, [sp, #0]
 801fbba:	68bb      	ldr	r3, [r7, #8]
 801fbbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fbbe:	68f8      	ldr	r0, [r7, #12]
 801fbc0:	f001 fca5 	bl	802150e <xTaskCreate>
 801fbc4:	4603      	mov	r3, r0
 801fbc6:	2b01      	cmp	r3, #1
 801fbc8:	d001      	beq.n	801fbce <osThreadNew+0x11a>
            hTask = NULL;
 801fbca:	2300      	movs	r3, #0
 801fbcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801fbce:	693b      	ldr	r3, [r7, #16]
}
 801fbd0:	4618      	mov	r0, r3
 801fbd2:	3728      	adds	r7, #40	; 0x28
 801fbd4:	46bd      	mov	sp, r7
 801fbd6:	bd80      	pop	{r7, pc}

0801fbd8 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 801fbd8:	b580      	push	{r7, lr}
 801fbda:	b086      	sub	sp, #24
 801fbdc:	af00      	add	r7, sp, #0
 801fbde:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fbe4:	f3ef 8305 	mrs	r3, IPSR
 801fbe8:	60fb      	str	r3, [r7, #12]
  return(result);
 801fbea:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d102      	bne.n	801fbf6 <osThreadGetStackSpace+0x1e>
 801fbf0:	693b      	ldr	r3, [r7, #16]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d102      	bne.n	801fbfc <osThreadGetStackSpace+0x24>
    sz = 0U;
 801fbf6:	2300      	movs	r3, #0
 801fbf8:	617b      	str	r3, [r7, #20]
 801fbfa:	e005      	b.n	801fc08 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 801fbfc:	6938      	ldr	r0, [r7, #16]
 801fbfe:	f002 fa5b 	bl	80220b8 <uxTaskGetStackHighWaterMark>
 801fc02:	4603      	mov	r3, r0
 801fc04:	009b      	lsls	r3, r3, #2
 801fc06:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 801fc08:	697b      	ldr	r3, [r7, #20]
}
 801fc0a:	4618      	mov	r0, r3
 801fc0c:	3718      	adds	r7, #24
 801fc0e:	46bd      	mov	sp, r7
 801fc10:	bd80      	pop	{r7, pc}
	...

0801fc14 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801fc14:	b480      	push	{r7}
 801fc16:	b083      	sub	sp, #12
 801fc18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fc1a:	f3ef 8305 	mrs	r3, IPSR
 801fc1e:	603b      	str	r3, [r7, #0]
  return(result);
 801fc20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fc22:	2b00      	cmp	r3, #0
 801fc24:	d003      	beq.n	801fc2e <osThreadYield+0x1a>
    stat = osErrorISR;
 801fc26:	f06f 0305 	mvn.w	r3, #5
 801fc2a:	607b      	str	r3, [r7, #4]
 801fc2c:	e009      	b.n	801fc42 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801fc2e:	2300      	movs	r3, #0
 801fc30:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801fc32:	4b07      	ldr	r3, [pc, #28]	; (801fc50 <osThreadYield+0x3c>)
 801fc34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fc38:	601a      	str	r2, [r3, #0]
 801fc3a:	f3bf 8f4f 	dsb	sy
 801fc3e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801fc42:	687b      	ldr	r3, [r7, #4]
}
 801fc44:	4618      	mov	r0, r3
 801fc46:	370c      	adds	r7, #12
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc4e:	4770      	bx	lr
 801fc50:	e000ed04 	.word	0xe000ed04

0801fc54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801fc54:	b580      	push	{r7, lr}
 801fc56:	b084      	sub	sp, #16
 801fc58:	af00      	add	r7, sp, #0
 801fc5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fc5c:	f3ef 8305 	mrs	r3, IPSR
 801fc60:	60bb      	str	r3, [r7, #8]
  return(result);
 801fc62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d003      	beq.n	801fc70 <osDelay+0x1c>
    stat = osErrorISR;
 801fc68:	f06f 0305 	mvn.w	r3, #5
 801fc6c:	60fb      	str	r3, [r7, #12]
 801fc6e:	e007      	b.n	801fc80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801fc70:	2300      	movs	r3, #0
 801fc72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d002      	beq.n	801fc80 <osDelay+0x2c>
      vTaskDelay(ticks);
 801fc7a:	6878      	ldr	r0, [r7, #4]
 801fc7c:	f001 fda6 	bl	80217cc <vTaskDelay>
    }
  }

  return (stat);
 801fc80:	68fb      	ldr	r3, [r7, #12]
}
 801fc82:	4618      	mov	r0, r3
 801fc84:	3710      	adds	r7, #16
 801fc86:	46bd      	mov	sp, r7
 801fc88:	bd80      	pop	{r7, pc}

0801fc8a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801fc8a:	b580      	push	{r7, lr}
 801fc8c:	b088      	sub	sp, #32
 801fc8e:	af00      	add	r7, sp, #0
 801fc90:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801fc92:	2300      	movs	r3, #0
 801fc94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fc96:	f3ef 8305 	mrs	r3, IPSR
 801fc9a:	60bb      	str	r3, [r7, #8]
  return(result);
 801fc9c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d174      	bne.n	801fd8c <osMutexNew+0x102>
    if (attr != NULL) {
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d003      	beq.n	801fcb0 <osMutexNew+0x26>
      type = attr->attr_bits;
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	685b      	ldr	r3, [r3, #4]
 801fcac:	61bb      	str	r3, [r7, #24]
 801fcae:	e001      	b.n	801fcb4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801fcb4:	69bb      	ldr	r3, [r7, #24]
 801fcb6:	f003 0301 	and.w	r3, r3, #1
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d002      	beq.n	801fcc4 <osMutexNew+0x3a>
      rmtx = 1U;
 801fcbe:	2301      	movs	r3, #1
 801fcc0:	617b      	str	r3, [r7, #20]
 801fcc2:	e001      	b.n	801fcc8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801fcc4:	2300      	movs	r3, #0
 801fcc6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801fcc8:	69bb      	ldr	r3, [r7, #24]
 801fcca:	f003 0308 	and.w	r3, r3, #8
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	d15c      	bne.n	801fd8c <osMutexNew+0x102>
      mem = -1;
 801fcd2:	f04f 33ff 	mov.w	r3, #4294967295
 801fcd6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	d015      	beq.n	801fd0a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	689b      	ldr	r3, [r3, #8]
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d006      	beq.n	801fcf4 <osMutexNew+0x6a>
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	68db      	ldr	r3, [r3, #12]
 801fcea:	2b4f      	cmp	r3, #79	; 0x4f
 801fcec:	d902      	bls.n	801fcf4 <osMutexNew+0x6a>
          mem = 1;
 801fcee:	2301      	movs	r3, #1
 801fcf0:	613b      	str	r3, [r7, #16]
 801fcf2:	e00c      	b.n	801fd0e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	689b      	ldr	r3, [r3, #8]
 801fcf8:	2b00      	cmp	r3, #0
 801fcfa:	d108      	bne.n	801fd0e <osMutexNew+0x84>
 801fcfc:	687b      	ldr	r3, [r7, #4]
 801fcfe:	68db      	ldr	r3, [r3, #12]
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	d104      	bne.n	801fd0e <osMutexNew+0x84>
            mem = 0;
 801fd04:	2300      	movs	r3, #0
 801fd06:	613b      	str	r3, [r7, #16]
 801fd08:	e001      	b.n	801fd0e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801fd0a:	2300      	movs	r3, #0
 801fd0c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 801fd0e:	693b      	ldr	r3, [r7, #16]
 801fd10:	2b01      	cmp	r3, #1
 801fd12:	d112      	bne.n	801fd3a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801fd14:	697b      	ldr	r3, [r7, #20]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d007      	beq.n	801fd2a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	689b      	ldr	r3, [r3, #8]
 801fd1e:	4619      	mov	r1, r3
 801fd20:	2004      	movs	r0, #4
 801fd22:	f000 fc68 	bl	80205f6 <xQueueCreateMutexStatic>
 801fd26:	61f8      	str	r0, [r7, #28]
 801fd28:	e016      	b.n	801fd58 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	689b      	ldr	r3, [r3, #8]
 801fd2e:	4619      	mov	r1, r3
 801fd30:	2001      	movs	r0, #1
 801fd32:	f000 fc60 	bl	80205f6 <xQueueCreateMutexStatic>
 801fd36:	61f8      	str	r0, [r7, #28]
 801fd38:	e00e      	b.n	801fd58 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801fd3a:	693b      	ldr	r3, [r7, #16]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d10b      	bne.n	801fd58 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 801fd40:	697b      	ldr	r3, [r7, #20]
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d004      	beq.n	801fd50 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801fd46:	2004      	movs	r0, #4
 801fd48:	f000 fc3d 	bl	80205c6 <xQueueCreateMutex>
 801fd4c:	61f8      	str	r0, [r7, #28]
 801fd4e:	e003      	b.n	801fd58 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 801fd50:	2001      	movs	r0, #1
 801fd52:	f000 fc38 	bl	80205c6 <xQueueCreateMutex>
 801fd56:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801fd58:	69fb      	ldr	r3, [r7, #28]
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d00c      	beq.n	801fd78 <osMutexNew+0xee>
        if (attr != NULL) {
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d003      	beq.n	801fd6c <osMutexNew+0xe2>
          name = attr->name;
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	60fb      	str	r3, [r7, #12]
 801fd6a:	e001      	b.n	801fd70 <osMutexNew+0xe6>
        } else {
          name = NULL;
 801fd6c:	2300      	movs	r3, #0
 801fd6e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 801fd70:	68f9      	ldr	r1, [r7, #12]
 801fd72:	69f8      	ldr	r0, [r7, #28]
 801fd74:	f001 fb10 	bl	8021398 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801fd78:	69fb      	ldr	r3, [r7, #28]
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d006      	beq.n	801fd8c <osMutexNew+0x102>
 801fd7e:	697b      	ldr	r3, [r7, #20]
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d003      	beq.n	801fd8c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801fd84:	69fb      	ldr	r3, [r7, #28]
 801fd86:	f043 0301 	orr.w	r3, r3, #1
 801fd8a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801fd8c:	69fb      	ldr	r3, [r7, #28]
}
 801fd8e:	4618      	mov	r0, r3
 801fd90:	3720      	adds	r7, #32
 801fd92:	46bd      	mov	sp, r7
 801fd94:	bd80      	pop	{r7, pc}

0801fd96 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801fd96:	b580      	push	{r7, lr}
 801fd98:	b086      	sub	sp, #24
 801fd9a:	af00      	add	r7, sp, #0
 801fd9c:	6078      	str	r0, [r7, #4]
 801fd9e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	f023 0301 	bic.w	r3, r3, #1
 801fda6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	f003 0301 	and.w	r3, r3, #1
 801fdae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801fdb0:	2300      	movs	r3, #0
 801fdb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fdb4:	f3ef 8305 	mrs	r3, IPSR
 801fdb8:	60bb      	str	r3, [r7, #8]
  return(result);
 801fdba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d003      	beq.n	801fdc8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 801fdc0:	f06f 0305 	mvn.w	r3, #5
 801fdc4:	617b      	str	r3, [r7, #20]
 801fdc6:	e02c      	b.n	801fe22 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801fdc8:	693b      	ldr	r3, [r7, #16]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d103      	bne.n	801fdd6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 801fdce:	f06f 0303 	mvn.w	r3, #3
 801fdd2:	617b      	str	r3, [r7, #20]
 801fdd4:	e025      	b.n	801fe22 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801fdd6:	68fb      	ldr	r3, [r7, #12]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d011      	beq.n	801fe00 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801fddc:	6839      	ldr	r1, [r7, #0]
 801fdde:	6938      	ldr	r0, [r7, #16]
 801fde0:	f000 fc58 	bl	8020694 <xQueueTakeMutexRecursive>
 801fde4:	4603      	mov	r3, r0
 801fde6:	2b01      	cmp	r3, #1
 801fde8:	d01b      	beq.n	801fe22 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801fdea:	683b      	ldr	r3, [r7, #0]
 801fdec:	2b00      	cmp	r3, #0
 801fdee:	d003      	beq.n	801fdf8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 801fdf0:	f06f 0301 	mvn.w	r3, #1
 801fdf4:	617b      	str	r3, [r7, #20]
 801fdf6:	e014      	b.n	801fe22 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801fdf8:	f06f 0302 	mvn.w	r3, #2
 801fdfc:	617b      	str	r3, [r7, #20]
 801fdfe:	e010      	b.n	801fe22 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801fe00:	6839      	ldr	r1, [r7, #0]
 801fe02:	6938      	ldr	r0, [r7, #16]
 801fe04:	f000 fef6 	bl	8020bf4 <xQueueSemaphoreTake>
 801fe08:	4603      	mov	r3, r0
 801fe0a:	2b01      	cmp	r3, #1
 801fe0c:	d009      	beq.n	801fe22 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d003      	beq.n	801fe1c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801fe14:	f06f 0301 	mvn.w	r3, #1
 801fe18:	617b      	str	r3, [r7, #20]
 801fe1a:	e002      	b.n	801fe22 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801fe1c:	f06f 0302 	mvn.w	r3, #2
 801fe20:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 801fe22:	697b      	ldr	r3, [r7, #20]
}
 801fe24:	4618      	mov	r0, r3
 801fe26:	3718      	adds	r7, #24
 801fe28:	46bd      	mov	sp, r7
 801fe2a:	bd80      	pop	{r7, pc}

0801fe2c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801fe2c:	b580      	push	{r7, lr}
 801fe2e:	b086      	sub	sp, #24
 801fe30:	af00      	add	r7, sp, #0
 801fe32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801fe34:	687b      	ldr	r3, [r7, #4]
 801fe36:	f023 0301 	bic.w	r3, r3, #1
 801fe3a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	f003 0301 	and.w	r3, r3, #1
 801fe42:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801fe44:	2300      	movs	r3, #0
 801fe46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fe48:	f3ef 8305 	mrs	r3, IPSR
 801fe4c:	60bb      	str	r3, [r7, #8]
  return(result);
 801fe4e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	d003      	beq.n	801fe5c <osMutexRelease+0x30>
    stat = osErrorISR;
 801fe54:	f06f 0305 	mvn.w	r3, #5
 801fe58:	617b      	str	r3, [r7, #20]
 801fe5a:	e01f      	b.n	801fe9c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 801fe5c:	693b      	ldr	r3, [r7, #16]
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d103      	bne.n	801fe6a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 801fe62:	f06f 0303 	mvn.w	r3, #3
 801fe66:	617b      	str	r3, [r7, #20]
 801fe68:	e018      	b.n	801fe9c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801fe6a:	68fb      	ldr	r3, [r7, #12]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d009      	beq.n	801fe84 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801fe70:	6938      	ldr	r0, [r7, #16]
 801fe72:	f000 fbdb 	bl	802062c <xQueueGiveMutexRecursive>
 801fe76:	4603      	mov	r3, r0
 801fe78:	2b01      	cmp	r3, #1
 801fe7a:	d00f      	beq.n	801fe9c <osMutexRelease+0x70>
        stat = osErrorResource;
 801fe7c:	f06f 0302 	mvn.w	r3, #2
 801fe80:	617b      	str	r3, [r7, #20]
 801fe82:	e00b      	b.n	801fe9c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801fe84:	2300      	movs	r3, #0
 801fe86:	2200      	movs	r2, #0
 801fe88:	2100      	movs	r1, #0
 801fe8a:	6938      	ldr	r0, [r7, #16]
 801fe8c:	f000 fc38 	bl	8020700 <xQueueGenericSend>
 801fe90:	4603      	mov	r3, r0
 801fe92:	2b01      	cmp	r3, #1
 801fe94:	d002      	beq.n	801fe9c <osMutexRelease+0x70>
        stat = osErrorResource;
 801fe96:	f06f 0302 	mvn.w	r3, #2
 801fe9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801fe9c:	697b      	ldr	r3, [r7, #20]
}
 801fe9e:	4618      	mov	r0, r3
 801fea0:	3718      	adds	r7, #24
 801fea2:	46bd      	mov	sp, r7
 801fea4:	bd80      	pop	{r7, pc}

0801fea6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801fea6:	b580      	push	{r7, lr}
 801fea8:	b08a      	sub	sp, #40	; 0x28
 801feaa:	af02      	add	r7, sp, #8
 801feac:	60f8      	str	r0, [r7, #12]
 801feae:	60b9      	str	r1, [r7, #8]
 801feb0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801feb2:	2300      	movs	r3, #0
 801feb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801feb6:	f3ef 8305 	mrs	r3, IPSR
 801feba:	613b      	str	r3, [r7, #16]
  return(result);
 801febc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d15f      	bne.n	801ff82 <osMessageQueueNew+0xdc>
 801fec2:	68fb      	ldr	r3, [r7, #12]
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	d05c      	beq.n	801ff82 <osMessageQueueNew+0xdc>
 801fec8:	68bb      	ldr	r3, [r7, #8]
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d059      	beq.n	801ff82 <osMessageQueueNew+0xdc>
    mem = -1;
 801fece:	f04f 33ff 	mov.w	r3, #4294967295
 801fed2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	d029      	beq.n	801ff2e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	689b      	ldr	r3, [r3, #8]
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d012      	beq.n	801ff08 <osMessageQueueNew+0x62>
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	68db      	ldr	r3, [r3, #12]
 801fee6:	2b4f      	cmp	r3, #79	; 0x4f
 801fee8:	d90e      	bls.n	801ff08 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d00a      	beq.n	801ff08 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	695a      	ldr	r2, [r3, #20]
 801fef6:	68fb      	ldr	r3, [r7, #12]
 801fef8:	68b9      	ldr	r1, [r7, #8]
 801fefa:	fb01 f303 	mul.w	r3, r1, r3
 801fefe:	429a      	cmp	r2, r3
 801ff00:	d302      	bcc.n	801ff08 <osMessageQueueNew+0x62>
        mem = 1;
 801ff02:	2301      	movs	r3, #1
 801ff04:	61bb      	str	r3, [r7, #24]
 801ff06:	e014      	b.n	801ff32 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	689b      	ldr	r3, [r3, #8]
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d110      	bne.n	801ff32 <osMessageQueueNew+0x8c>
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	68db      	ldr	r3, [r3, #12]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d10c      	bne.n	801ff32 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	d108      	bne.n	801ff32 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801ff20:	687b      	ldr	r3, [r7, #4]
 801ff22:	695b      	ldr	r3, [r3, #20]
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	d104      	bne.n	801ff32 <osMessageQueueNew+0x8c>
          mem = 0;
 801ff28:	2300      	movs	r3, #0
 801ff2a:	61bb      	str	r3, [r7, #24]
 801ff2c:	e001      	b.n	801ff32 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801ff2e:	2300      	movs	r3, #0
 801ff30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801ff32:	69bb      	ldr	r3, [r7, #24]
 801ff34:	2b01      	cmp	r3, #1
 801ff36:	d10b      	bne.n	801ff50 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	691a      	ldr	r2, [r3, #16]
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	689b      	ldr	r3, [r3, #8]
 801ff40:	2100      	movs	r1, #0
 801ff42:	9100      	str	r1, [sp, #0]
 801ff44:	68b9      	ldr	r1, [r7, #8]
 801ff46:	68f8      	ldr	r0, [r7, #12]
 801ff48:	f000 fa4e 	bl	80203e8 <xQueueGenericCreateStatic>
 801ff4c:	61f8      	str	r0, [r7, #28]
 801ff4e:	e008      	b.n	801ff62 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801ff50:	69bb      	ldr	r3, [r7, #24]
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d105      	bne.n	801ff62 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801ff56:	2200      	movs	r2, #0
 801ff58:	68b9      	ldr	r1, [r7, #8]
 801ff5a:	68f8      	ldr	r0, [r7, #12]
 801ff5c:	f000 fabc 	bl	80204d8 <xQueueGenericCreate>
 801ff60:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801ff62:	69fb      	ldr	r3, [r7, #28]
 801ff64:	2b00      	cmp	r3, #0
 801ff66:	d00c      	beq.n	801ff82 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	d003      	beq.n	801ff76 <osMessageQueueNew+0xd0>
        name = attr->name;
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	681b      	ldr	r3, [r3, #0]
 801ff72:	617b      	str	r3, [r7, #20]
 801ff74:	e001      	b.n	801ff7a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801ff76:	2300      	movs	r3, #0
 801ff78:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801ff7a:	6979      	ldr	r1, [r7, #20]
 801ff7c:	69f8      	ldr	r0, [r7, #28]
 801ff7e:	f001 fa0b 	bl	8021398 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801ff82:	69fb      	ldr	r3, [r7, #28]
}
 801ff84:	4618      	mov	r0, r3
 801ff86:	3720      	adds	r7, #32
 801ff88:	46bd      	mov	sp, r7
 801ff8a:	bd80      	pop	{r7, pc}

0801ff8c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801ff8c:	b580      	push	{r7, lr}
 801ff8e:	b088      	sub	sp, #32
 801ff90:	af00      	add	r7, sp, #0
 801ff92:	60f8      	str	r0, [r7, #12]
 801ff94:	60b9      	str	r1, [r7, #8]
 801ff96:	603b      	str	r3, [r7, #0]
 801ff98:	4613      	mov	r3, r2
 801ff9a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801ff9c:	68fb      	ldr	r3, [r7, #12]
 801ff9e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801ffa0:	2300      	movs	r3, #0
 801ffa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ffa4:	f3ef 8305 	mrs	r3, IPSR
 801ffa8:	617b      	str	r3, [r7, #20]
  return(result);
 801ffaa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d028      	beq.n	8020002 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801ffb0:	69bb      	ldr	r3, [r7, #24]
 801ffb2:	2b00      	cmp	r3, #0
 801ffb4:	d005      	beq.n	801ffc2 <osMessageQueuePut+0x36>
 801ffb6:	68bb      	ldr	r3, [r7, #8]
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d002      	beq.n	801ffc2 <osMessageQueuePut+0x36>
 801ffbc:	683b      	ldr	r3, [r7, #0]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d003      	beq.n	801ffca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801ffc2:	f06f 0303 	mvn.w	r3, #3
 801ffc6:	61fb      	str	r3, [r7, #28]
 801ffc8:	e038      	b.n	802003c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801ffca:	2300      	movs	r3, #0
 801ffcc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801ffce:	f107 0210 	add.w	r2, r7, #16
 801ffd2:	2300      	movs	r3, #0
 801ffd4:	68b9      	ldr	r1, [r7, #8]
 801ffd6:	69b8      	ldr	r0, [r7, #24]
 801ffd8:	f000 fc90 	bl	80208fc <xQueueGenericSendFromISR>
 801ffdc:	4603      	mov	r3, r0
 801ffde:	2b01      	cmp	r3, #1
 801ffe0:	d003      	beq.n	801ffea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801ffe2:	f06f 0302 	mvn.w	r3, #2
 801ffe6:	61fb      	str	r3, [r7, #28]
 801ffe8:	e028      	b.n	802003c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801ffea:	693b      	ldr	r3, [r7, #16]
 801ffec:	2b00      	cmp	r3, #0
 801ffee:	d025      	beq.n	802003c <osMessageQueuePut+0xb0>
 801fff0:	4b15      	ldr	r3, [pc, #84]	; (8020048 <osMessageQueuePut+0xbc>)
 801fff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fff6:	601a      	str	r2, [r3, #0]
 801fff8:	f3bf 8f4f 	dsb	sy
 801fffc:	f3bf 8f6f 	isb	sy
 8020000:	e01c      	b.n	802003c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8020002:	69bb      	ldr	r3, [r7, #24]
 8020004:	2b00      	cmp	r3, #0
 8020006:	d002      	beq.n	802000e <osMessageQueuePut+0x82>
 8020008:	68bb      	ldr	r3, [r7, #8]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d103      	bne.n	8020016 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 802000e:	f06f 0303 	mvn.w	r3, #3
 8020012:	61fb      	str	r3, [r7, #28]
 8020014:	e012      	b.n	802003c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8020016:	2300      	movs	r3, #0
 8020018:	683a      	ldr	r2, [r7, #0]
 802001a:	68b9      	ldr	r1, [r7, #8]
 802001c:	69b8      	ldr	r0, [r7, #24]
 802001e:	f000 fb6f 	bl	8020700 <xQueueGenericSend>
 8020022:	4603      	mov	r3, r0
 8020024:	2b01      	cmp	r3, #1
 8020026:	d009      	beq.n	802003c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8020028:	683b      	ldr	r3, [r7, #0]
 802002a:	2b00      	cmp	r3, #0
 802002c:	d003      	beq.n	8020036 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 802002e:	f06f 0301 	mvn.w	r3, #1
 8020032:	61fb      	str	r3, [r7, #28]
 8020034:	e002      	b.n	802003c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8020036:	f06f 0302 	mvn.w	r3, #2
 802003a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 802003c:	69fb      	ldr	r3, [r7, #28]
}
 802003e:	4618      	mov	r0, r3
 8020040:	3720      	adds	r7, #32
 8020042:	46bd      	mov	sp, r7
 8020044:	bd80      	pop	{r7, pc}
 8020046:	bf00      	nop
 8020048:	e000ed04 	.word	0xe000ed04

0802004c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 802004c:	b580      	push	{r7, lr}
 802004e:	b088      	sub	sp, #32
 8020050:	af00      	add	r7, sp, #0
 8020052:	60f8      	str	r0, [r7, #12]
 8020054:	60b9      	str	r1, [r7, #8]
 8020056:	607a      	str	r2, [r7, #4]
 8020058:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 802005a:	68fb      	ldr	r3, [r7, #12]
 802005c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 802005e:	2300      	movs	r3, #0
 8020060:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020062:	f3ef 8305 	mrs	r3, IPSR
 8020066:	617b      	str	r3, [r7, #20]
  return(result);
 8020068:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 802006a:	2b00      	cmp	r3, #0
 802006c:	d028      	beq.n	80200c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 802006e:	69bb      	ldr	r3, [r7, #24]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d005      	beq.n	8020080 <osMessageQueueGet+0x34>
 8020074:	68bb      	ldr	r3, [r7, #8]
 8020076:	2b00      	cmp	r3, #0
 8020078:	d002      	beq.n	8020080 <osMessageQueueGet+0x34>
 802007a:	683b      	ldr	r3, [r7, #0]
 802007c:	2b00      	cmp	r3, #0
 802007e:	d003      	beq.n	8020088 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8020080:	f06f 0303 	mvn.w	r3, #3
 8020084:	61fb      	str	r3, [r7, #28]
 8020086:	e037      	b.n	80200f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8020088:	2300      	movs	r3, #0
 802008a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 802008c:	f107 0310 	add.w	r3, r7, #16
 8020090:	461a      	mov	r2, r3
 8020092:	68b9      	ldr	r1, [r7, #8]
 8020094:	69b8      	ldr	r0, [r7, #24]
 8020096:	f000 ff9b 	bl	8020fd0 <xQueueReceiveFromISR>
 802009a:	4603      	mov	r3, r0
 802009c:	2b01      	cmp	r3, #1
 802009e:	d003      	beq.n	80200a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80200a0:	f06f 0302 	mvn.w	r3, #2
 80200a4:	61fb      	str	r3, [r7, #28]
 80200a6:	e027      	b.n	80200f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80200a8:	693b      	ldr	r3, [r7, #16]
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	d024      	beq.n	80200f8 <osMessageQueueGet+0xac>
 80200ae:	4b15      	ldr	r3, [pc, #84]	; (8020104 <osMessageQueueGet+0xb8>)
 80200b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80200b4:	601a      	str	r2, [r3, #0]
 80200b6:	f3bf 8f4f 	dsb	sy
 80200ba:	f3bf 8f6f 	isb	sy
 80200be:	e01b      	b.n	80200f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80200c0:	69bb      	ldr	r3, [r7, #24]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d002      	beq.n	80200cc <osMessageQueueGet+0x80>
 80200c6:	68bb      	ldr	r3, [r7, #8]
 80200c8:	2b00      	cmp	r3, #0
 80200ca:	d103      	bne.n	80200d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80200cc:	f06f 0303 	mvn.w	r3, #3
 80200d0:	61fb      	str	r3, [r7, #28]
 80200d2:	e011      	b.n	80200f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80200d4:	683a      	ldr	r2, [r7, #0]
 80200d6:	68b9      	ldr	r1, [r7, #8]
 80200d8:	69b8      	ldr	r0, [r7, #24]
 80200da:	f000 fcab 	bl	8020a34 <xQueueReceive>
 80200de:	4603      	mov	r3, r0
 80200e0:	2b01      	cmp	r3, #1
 80200e2:	d009      	beq.n	80200f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80200e4:	683b      	ldr	r3, [r7, #0]
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	d003      	beq.n	80200f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80200ea:	f06f 0301 	mvn.w	r3, #1
 80200ee:	61fb      	str	r3, [r7, #28]
 80200f0:	e002      	b.n	80200f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80200f2:	f06f 0302 	mvn.w	r3, #2
 80200f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80200f8:	69fb      	ldr	r3, [r7, #28]
}
 80200fa:	4618      	mov	r0, r3
 80200fc:	3720      	adds	r7, #32
 80200fe:	46bd      	mov	sp, r7
 8020100:	bd80      	pop	{r7, pc}
 8020102:	bf00      	nop
 8020104:	e000ed04 	.word	0xe000ed04

08020108 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8020108:	b580      	push	{r7, lr}
 802010a:	b086      	sub	sp, #24
 802010c:	af00      	add	r7, sp, #0
 802010e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8020114:	693b      	ldr	r3, [r7, #16]
 8020116:	2b00      	cmp	r3, #0
 8020118:	d102      	bne.n	8020120 <osMessageQueueGetCount+0x18>
    count = 0U;
 802011a:	2300      	movs	r3, #0
 802011c:	617b      	str	r3, [r7, #20]
 802011e:	e00e      	b.n	802013e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020120:	f3ef 8305 	mrs	r3, IPSR
 8020124:	60fb      	str	r3, [r7, #12]
  return(result);
 8020126:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8020128:	2b00      	cmp	r3, #0
 802012a:	d004      	beq.n	8020136 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 802012c:	6938      	ldr	r0, [r7, #16]
 802012e:	f000 ffed 	bl	802110c <uxQueueMessagesWaitingFromISR>
 8020132:	6178      	str	r0, [r7, #20]
 8020134:	e003      	b.n	802013e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8020136:	6938      	ldr	r0, [r7, #16]
 8020138:	f000 ffca 	bl	80210d0 <uxQueueMessagesWaiting>
 802013c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 802013e:	697b      	ldr	r3, [r7, #20]
}
 8020140:	4618      	mov	r0, r3
 8020142:	3718      	adds	r7, #24
 8020144:	46bd      	mov	sp, r7
 8020146:	bd80      	pop	{r7, pc}

08020148 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8020148:	b480      	push	{r7}
 802014a:	b085      	sub	sp, #20
 802014c:	af00      	add	r7, sp, #0
 802014e:	60f8      	str	r0, [r7, #12]
 8020150:	60b9      	str	r1, [r7, #8]
 8020152:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8020154:	68fb      	ldr	r3, [r7, #12]
 8020156:	4a07      	ldr	r2, [pc, #28]	; (8020174 <vApplicationGetIdleTaskMemory+0x2c>)
 8020158:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 802015a:	68bb      	ldr	r3, [r7, #8]
 802015c:	4a06      	ldr	r2, [pc, #24]	; (8020178 <vApplicationGetIdleTaskMemory+0x30>)
 802015e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	2280      	movs	r2, #128	; 0x80
 8020164:	601a      	str	r2, [r3, #0]
}
 8020166:	bf00      	nop
 8020168:	3714      	adds	r7, #20
 802016a:	46bd      	mov	sp, r7
 802016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020170:	4770      	bx	lr
 8020172:	bf00      	nop
 8020174:	2000157c 	.word	0x2000157c
 8020178:	20001628 	.word	0x20001628

0802017c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 802017c:	b480      	push	{r7}
 802017e:	b085      	sub	sp, #20
 8020180:	af00      	add	r7, sp, #0
 8020182:	60f8      	str	r0, [r7, #12]
 8020184:	60b9      	str	r1, [r7, #8]
 8020186:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	4a07      	ldr	r2, [pc, #28]	; (80201a8 <vApplicationGetTimerTaskMemory+0x2c>)
 802018c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 802018e:	68bb      	ldr	r3, [r7, #8]
 8020190:	4a06      	ldr	r2, [pc, #24]	; (80201ac <vApplicationGetTimerTaskMemory+0x30>)
 8020192:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	f44f 7280 	mov.w	r2, #256	; 0x100
 802019a:	601a      	str	r2, [r3, #0]
}
 802019c:	bf00      	nop
 802019e:	3714      	adds	r7, #20
 80201a0:	46bd      	mov	sp, r7
 80201a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201a6:	4770      	bx	lr
 80201a8:	20001828 	.word	0x20001828
 80201ac:	200018d4 	.word	0x200018d4

080201b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80201b0:	b480      	push	{r7}
 80201b2:	b083      	sub	sp, #12
 80201b4:	af00      	add	r7, sp, #0
 80201b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	f103 0208 	add.w	r2, r3, #8
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	f04f 32ff 	mov.w	r2, #4294967295
 80201c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	f103 0208 	add.w	r2, r3, #8
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	f103 0208 	add.w	r2, r3, #8
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	2200      	movs	r2, #0
 80201e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80201e4:	bf00      	nop
 80201e6:	370c      	adds	r7, #12
 80201e8:	46bd      	mov	sp, r7
 80201ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ee:	4770      	bx	lr

080201f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80201f0:	b480      	push	{r7}
 80201f2:	b083      	sub	sp, #12
 80201f4:	af00      	add	r7, sp, #0
 80201f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80201f8:	687b      	ldr	r3, [r7, #4]
 80201fa:	2200      	movs	r2, #0
 80201fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80201fe:	bf00      	nop
 8020200:	370c      	adds	r7, #12
 8020202:	46bd      	mov	sp, r7
 8020204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020208:	4770      	bx	lr

0802020a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802020a:	b480      	push	{r7}
 802020c:	b085      	sub	sp, #20
 802020e:	af00      	add	r7, sp, #0
 8020210:	6078      	str	r0, [r7, #4]
 8020212:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	685b      	ldr	r3, [r3, #4]
 8020218:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802021a:	683b      	ldr	r3, [r7, #0]
 802021c:	68fa      	ldr	r2, [r7, #12]
 802021e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8020220:	68fb      	ldr	r3, [r7, #12]
 8020222:	689a      	ldr	r2, [r3, #8]
 8020224:	683b      	ldr	r3, [r7, #0]
 8020226:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8020228:	68fb      	ldr	r3, [r7, #12]
 802022a:	689b      	ldr	r3, [r3, #8]
 802022c:	683a      	ldr	r2, [r7, #0]
 802022e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8020230:	68fb      	ldr	r3, [r7, #12]
 8020232:	683a      	ldr	r2, [r7, #0]
 8020234:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8020236:	683b      	ldr	r3, [r7, #0]
 8020238:	687a      	ldr	r2, [r7, #4]
 802023a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	681b      	ldr	r3, [r3, #0]
 8020240:	1c5a      	adds	r2, r3, #1
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	601a      	str	r2, [r3, #0]
}
 8020246:	bf00      	nop
 8020248:	3714      	adds	r7, #20
 802024a:	46bd      	mov	sp, r7
 802024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020250:	4770      	bx	lr

08020252 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8020252:	b480      	push	{r7}
 8020254:	b085      	sub	sp, #20
 8020256:	af00      	add	r7, sp, #0
 8020258:	6078      	str	r0, [r7, #4]
 802025a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 802025c:	683b      	ldr	r3, [r7, #0]
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8020262:	68bb      	ldr	r3, [r7, #8]
 8020264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020268:	d103      	bne.n	8020272 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	691b      	ldr	r3, [r3, #16]
 802026e:	60fb      	str	r3, [r7, #12]
 8020270:	e00c      	b.n	802028c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	3308      	adds	r3, #8
 8020276:	60fb      	str	r3, [r7, #12]
 8020278:	e002      	b.n	8020280 <vListInsert+0x2e>
 802027a:	68fb      	ldr	r3, [r7, #12]
 802027c:	685b      	ldr	r3, [r3, #4]
 802027e:	60fb      	str	r3, [r7, #12]
 8020280:	68fb      	ldr	r3, [r7, #12]
 8020282:	685b      	ldr	r3, [r3, #4]
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	68ba      	ldr	r2, [r7, #8]
 8020288:	429a      	cmp	r2, r3
 802028a:	d2f6      	bcs.n	802027a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 802028c:	68fb      	ldr	r3, [r7, #12]
 802028e:	685a      	ldr	r2, [r3, #4]
 8020290:	683b      	ldr	r3, [r7, #0]
 8020292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8020294:	683b      	ldr	r3, [r7, #0]
 8020296:	685b      	ldr	r3, [r3, #4]
 8020298:	683a      	ldr	r2, [r7, #0]
 802029a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 802029c:	683b      	ldr	r3, [r7, #0]
 802029e:	68fa      	ldr	r2, [r7, #12]
 80202a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80202a2:	68fb      	ldr	r3, [r7, #12]
 80202a4:	683a      	ldr	r2, [r7, #0]
 80202a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80202a8:	683b      	ldr	r3, [r7, #0]
 80202aa:	687a      	ldr	r2, [r7, #4]
 80202ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	1c5a      	adds	r2, r3, #1
 80202b4:	687b      	ldr	r3, [r7, #4]
 80202b6:	601a      	str	r2, [r3, #0]
}
 80202b8:	bf00      	nop
 80202ba:	3714      	adds	r7, #20
 80202bc:	46bd      	mov	sp, r7
 80202be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202c2:	4770      	bx	lr

080202c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80202c4:	b480      	push	{r7}
 80202c6:	b085      	sub	sp, #20
 80202c8:	af00      	add	r7, sp, #0
 80202ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	691b      	ldr	r3, [r3, #16]
 80202d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	685b      	ldr	r3, [r3, #4]
 80202d6:	687a      	ldr	r2, [r7, #4]
 80202d8:	6892      	ldr	r2, [r2, #8]
 80202da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80202dc:	687b      	ldr	r3, [r7, #4]
 80202de:	689b      	ldr	r3, [r3, #8]
 80202e0:	687a      	ldr	r2, [r7, #4]
 80202e2:	6852      	ldr	r2, [r2, #4]
 80202e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80202e6:	68fb      	ldr	r3, [r7, #12]
 80202e8:	685b      	ldr	r3, [r3, #4]
 80202ea:	687a      	ldr	r2, [r7, #4]
 80202ec:	429a      	cmp	r2, r3
 80202ee:	d103      	bne.n	80202f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	689a      	ldr	r2, [r3, #8]
 80202f4:	68fb      	ldr	r3, [r7, #12]
 80202f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	2200      	movs	r2, #0
 80202fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	681b      	ldr	r3, [r3, #0]
 8020302:	1e5a      	subs	r2, r3, #1
 8020304:	68fb      	ldr	r3, [r7, #12]
 8020306:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8020308:	68fb      	ldr	r3, [r7, #12]
 802030a:	681b      	ldr	r3, [r3, #0]
}
 802030c:	4618      	mov	r0, r3
 802030e:	3714      	adds	r7, #20
 8020310:	46bd      	mov	sp, r7
 8020312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020316:	4770      	bx	lr

08020318 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020318:	b580      	push	{r7, lr}
 802031a:	b084      	sub	sp, #16
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]
 8020320:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	2b00      	cmp	r3, #0
 802032a:	d10a      	bne.n	8020342 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 802032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020330:	f383 8811 	msr	BASEPRI, r3
 8020334:	f3bf 8f6f 	isb	sy
 8020338:	f3bf 8f4f 	dsb	sy
 802033c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802033e:	bf00      	nop
 8020340:	e7fe      	b.n	8020340 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8020342:	f002 fd8f 	bl	8022e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020346:	68fb      	ldr	r3, [r7, #12]
 8020348:	681a      	ldr	r2, [r3, #0]
 802034a:	68fb      	ldr	r3, [r7, #12]
 802034c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802034e:	68f9      	ldr	r1, [r7, #12]
 8020350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020352:	fb01 f303 	mul.w	r3, r1, r3
 8020356:	441a      	add	r2, r3
 8020358:	68fb      	ldr	r3, [r7, #12]
 802035a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 802035c:	68fb      	ldr	r3, [r7, #12]
 802035e:	2200      	movs	r2, #0
 8020360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8020362:	68fb      	ldr	r3, [r7, #12]
 8020364:	681a      	ldr	r2, [r3, #0]
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802036a:	68fb      	ldr	r3, [r7, #12]
 802036c:	681a      	ldr	r2, [r3, #0]
 802036e:	68fb      	ldr	r3, [r7, #12]
 8020370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020372:	3b01      	subs	r3, #1
 8020374:	68f9      	ldr	r1, [r7, #12]
 8020376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020378:	fb01 f303 	mul.w	r3, r1, r3
 802037c:	441a      	add	r2, r3
 802037e:	68fb      	ldr	r3, [r7, #12]
 8020380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8020382:	68fb      	ldr	r3, [r7, #12]
 8020384:	22ff      	movs	r2, #255	; 0xff
 8020386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 802038a:	68fb      	ldr	r3, [r7, #12]
 802038c:	22ff      	movs	r2, #255	; 0xff
 802038e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8020392:	683b      	ldr	r3, [r7, #0]
 8020394:	2b00      	cmp	r3, #0
 8020396:	d114      	bne.n	80203c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	691b      	ldr	r3, [r3, #16]
 802039c:	2b00      	cmp	r3, #0
 802039e:	d01a      	beq.n	80203d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80203a0:	68fb      	ldr	r3, [r7, #12]
 80203a2:	3310      	adds	r3, #16
 80203a4:	4618      	mov	r0, r3
 80203a6:	f001 fcfd 	bl	8021da4 <xTaskRemoveFromEventList>
 80203aa:	4603      	mov	r3, r0
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	d012      	beq.n	80203d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80203b0:	4b0c      	ldr	r3, [pc, #48]	; (80203e4 <xQueueGenericReset+0xcc>)
 80203b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80203b6:	601a      	str	r2, [r3, #0]
 80203b8:	f3bf 8f4f 	dsb	sy
 80203bc:	f3bf 8f6f 	isb	sy
 80203c0:	e009      	b.n	80203d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80203c2:	68fb      	ldr	r3, [r7, #12]
 80203c4:	3310      	adds	r3, #16
 80203c6:	4618      	mov	r0, r3
 80203c8:	f7ff fef2 	bl	80201b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80203cc:	68fb      	ldr	r3, [r7, #12]
 80203ce:	3324      	adds	r3, #36	; 0x24
 80203d0:	4618      	mov	r0, r3
 80203d2:	f7ff feed 	bl	80201b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80203d6:	f002 fd75 	bl	8022ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80203da:	2301      	movs	r3, #1
}
 80203dc:	4618      	mov	r0, r3
 80203de:	3710      	adds	r7, #16
 80203e0:	46bd      	mov	sp, r7
 80203e2:	bd80      	pop	{r7, pc}
 80203e4:	e000ed04 	.word	0xe000ed04

080203e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b08e      	sub	sp, #56	; 0x38
 80203ec:	af02      	add	r7, sp, #8
 80203ee:	60f8      	str	r0, [r7, #12]
 80203f0:	60b9      	str	r1, [r7, #8]
 80203f2:	607a      	str	r2, [r7, #4]
 80203f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80203f6:	68fb      	ldr	r3, [r7, #12]
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d10a      	bne.n	8020412 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80203fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020400:	f383 8811 	msr	BASEPRI, r3
 8020404:	f3bf 8f6f 	isb	sy
 8020408:	f3bf 8f4f 	dsb	sy
 802040c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802040e:	bf00      	nop
 8020410:	e7fe      	b.n	8020410 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8020412:	683b      	ldr	r3, [r7, #0]
 8020414:	2b00      	cmp	r3, #0
 8020416:	d10a      	bne.n	802042e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8020418:	f04f 0350 	mov.w	r3, #80	; 0x50
 802041c:	f383 8811 	msr	BASEPRI, r3
 8020420:	f3bf 8f6f 	isb	sy
 8020424:	f3bf 8f4f 	dsb	sy
 8020428:	627b      	str	r3, [r7, #36]	; 0x24
}
 802042a:	bf00      	nop
 802042c:	e7fe      	b.n	802042c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	2b00      	cmp	r3, #0
 8020432:	d002      	beq.n	802043a <xQueueGenericCreateStatic+0x52>
 8020434:	68bb      	ldr	r3, [r7, #8]
 8020436:	2b00      	cmp	r3, #0
 8020438:	d001      	beq.n	802043e <xQueueGenericCreateStatic+0x56>
 802043a:	2301      	movs	r3, #1
 802043c:	e000      	b.n	8020440 <xQueueGenericCreateStatic+0x58>
 802043e:	2300      	movs	r3, #0
 8020440:	2b00      	cmp	r3, #0
 8020442:	d10a      	bne.n	802045a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8020444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020448:	f383 8811 	msr	BASEPRI, r3
 802044c:	f3bf 8f6f 	isb	sy
 8020450:	f3bf 8f4f 	dsb	sy
 8020454:	623b      	str	r3, [r7, #32]
}
 8020456:	bf00      	nop
 8020458:	e7fe      	b.n	8020458 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	2b00      	cmp	r3, #0
 802045e:	d102      	bne.n	8020466 <xQueueGenericCreateStatic+0x7e>
 8020460:	68bb      	ldr	r3, [r7, #8]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d101      	bne.n	802046a <xQueueGenericCreateStatic+0x82>
 8020466:	2301      	movs	r3, #1
 8020468:	e000      	b.n	802046c <xQueueGenericCreateStatic+0x84>
 802046a:	2300      	movs	r3, #0
 802046c:	2b00      	cmp	r3, #0
 802046e:	d10a      	bne.n	8020486 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8020470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020474:	f383 8811 	msr	BASEPRI, r3
 8020478:	f3bf 8f6f 	isb	sy
 802047c:	f3bf 8f4f 	dsb	sy
 8020480:	61fb      	str	r3, [r7, #28]
}
 8020482:	bf00      	nop
 8020484:	e7fe      	b.n	8020484 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8020486:	2350      	movs	r3, #80	; 0x50
 8020488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 802048a:	697b      	ldr	r3, [r7, #20]
 802048c:	2b50      	cmp	r3, #80	; 0x50
 802048e:	d00a      	beq.n	80204a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8020490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020494:	f383 8811 	msr	BASEPRI, r3
 8020498:	f3bf 8f6f 	isb	sy
 802049c:	f3bf 8f4f 	dsb	sy
 80204a0:	61bb      	str	r3, [r7, #24]
}
 80204a2:	bf00      	nop
 80204a4:	e7fe      	b.n	80204a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80204a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80204a8:	683b      	ldr	r3, [r7, #0]
 80204aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80204ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ae:	2b00      	cmp	r3, #0
 80204b0:	d00d      	beq.n	80204ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80204b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204b4:	2201      	movs	r2, #1
 80204b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80204ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80204be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204c0:	9300      	str	r3, [sp, #0]
 80204c2:	4613      	mov	r3, r2
 80204c4:	687a      	ldr	r2, [r7, #4]
 80204c6:	68b9      	ldr	r1, [r7, #8]
 80204c8:	68f8      	ldr	r0, [r7, #12]
 80204ca:	f000 f83f 	bl	802054c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80204ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80204d0:	4618      	mov	r0, r3
 80204d2:	3730      	adds	r7, #48	; 0x30
 80204d4:	46bd      	mov	sp, r7
 80204d6:	bd80      	pop	{r7, pc}

080204d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b08a      	sub	sp, #40	; 0x28
 80204dc:	af02      	add	r7, sp, #8
 80204de:	60f8      	str	r0, [r7, #12]
 80204e0:	60b9      	str	r1, [r7, #8]
 80204e2:	4613      	mov	r3, r2
 80204e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80204e6:	68fb      	ldr	r3, [r7, #12]
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d10a      	bne.n	8020502 <xQueueGenericCreate+0x2a>
	__asm volatile
 80204ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204f0:	f383 8811 	msr	BASEPRI, r3
 80204f4:	f3bf 8f6f 	isb	sy
 80204f8:	f3bf 8f4f 	dsb	sy
 80204fc:	613b      	str	r3, [r7, #16]
}
 80204fe:	bf00      	nop
 8020500:	e7fe      	b.n	8020500 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020502:	68fb      	ldr	r3, [r7, #12]
 8020504:	68ba      	ldr	r2, [r7, #8]
 8020506:	fb02 f303 	mul.w	r3, r2, r3
 802050a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 802050c:	69fb      	ldr	r3, [r7, #28]
 802050e:	3350      	adds	r3, #80	; 0x50
 8020510:	4618      	mov	r0, r3
 8020512:	f002 fdc9 	bl	80230a8 <pvPortMalloc>
 8020516:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020518:	69bb      	ldr	r3, [r7, #24]
 802051a:	2b00      	cmp	r3, #0
 802051c:	d011      	beq.n	8020542 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 802051e:	69bb      	ldr	r3, [r7, #24]
 8020520:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020522:	697b      	ldr	r3, [r7, #20]
 8020524:	3350      	adds	r3, #80	; 0x50
 8020526:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020528:	69bb      	ldr	r3, [r7, #24]
 802052a:	2200      	movs	r2, #0
 802052c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020530:	79fa      	ldrb	r2, [r7, #7]
 8020532:	69bb      	ldr	r3, [r7, #24]
 8020534:	9300      	str	r3, [sp, #0]
 8020536:	4613      	mov	r3, r2
 8020538:	697a      	ldr	r2, [r7, #20]
 802053a:	68b9      	ldr	r1, [r7, #8]
 802053c:	68f8      	ldr	r0, [r7, #12]
 802053e:	f000 f805 	bl	802054c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020542:	69bb      	ldr	r3, [r7, #24]
	}
 8020544:	4618      	mov	r0, r3
 8020546:	3720      	adds	r7, #32
 8020548:	46bd      	mov	sp, r7
 802054a:	bd80      	pop	{r7, pc}

0802054c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 802054c:	b580      	push	{r7, lr}
 802054e:	b084      	sub	sp, #16
 8020550:	af00      	add	r7, sp, #0
 8020552:	60f8      	str	r0, [r7, #12]
 8020554:	60b9      	str	r1, [r7, #8]
 8020556:	607a      	str	r2, [r7, #4]
 8020558:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 802055a:	68bb      	ldr	r3, [r7, #8]
 802055c:	2b00      	cmp	r3, #0
 802055e:	d103      	bne.n	8020568 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8020560:	69bb      	ldr	r3, [r7, #24]
 8020562:	69ba      	ldr	r2, [r7, #24]
 8020564:	601a      	str	r2, [r3, #0]
 8020566:	e002      	b.n	802056e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020568:	69bb      	ldr	r3, [r7, #24]
 802056a:	687a      	ldr	r2, [r7, #4]
 802056c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 802056e:	69bb      	ldr	r3, [r7, #24]
 8020570:	68fa      	ldr	r2, [r7, #12]
 8020572:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8020574:	69bb      	ldr	r3, [r7, #24]
 8020576:	68ba      	ldr	r2, [r7, #8]
 8020578:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 802057a:	2101      	movs	r1, #1
 802057c:	69b8      	ldr	r0, [r7, #24]
 802057e:	f7ff fecb 	bl	8020318 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8020582:	69bb      	ldr	r3, [r7, #24]
 8020584:	78fa      	ldrb	r2, [r7, #3]
 8020586:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 802058a:	bf00      	nop
 802058c:	3710      	adds	r7, #16
 802058e:	46bd      	mov	sp, r7
 8020590:	bd80      	pop	{r7, pc}

08020592 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8020592:	b580      	push	{r7, lr}
 8020594:	b082      	sub	sp, #8
 8020596:	af00      	add	r7, sp, #0
 8020598:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	2b00      	cmp	r3, #0
 802059e:	d00e      	beq.n	80205be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	2200      	movs	r2, #0
 80205a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80205a6:	687b      	ldr	r3, [r7, #4]
 80205a8:	2200      	movs	r2, #0
 80205aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	2200      	movs	r2, #0
 80205b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80205b2:	2300      	movs	r3, #0
 80205b4:	2200      	movs	r2, #0
 80205b6:	2100      	movs	r1, #0
 80205b8:	6878      	ldr	r0, [r7, #4]
 80205ba:	f000 f8a1 	bl	8020700 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80205be:	bf00      	nop
 80205c0:	3708      	adds	r7, #8
 80205c2:	46bd      	mov	sp, r7
 80205c4:	bd80      	pop	{r7, pc}

080205c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80205c6:	b580      	push	{r7, lr}
 80205c8:	b086      	sub	sp, #24
 80205ca:	af00      	add	r7, sp, #0
 80205cc:	4603      	mov	r3, r0
 80205ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80205d0:	2301      	movs	r3, #1
 80205d2:	617b      	str	r3, [r7, #20]
 80205d4:	2300      	movs	r3, #0
 80205d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80205d8:	79fb      	ldrb	r3, [r7, #7]
 80205da:	461a      	mov	r2, r3
 80205dc:	6939      	ldr	r1, [r7, #16]
 80205de:	6978      	ldr	r0, [r7, #20]
 80205e0:	f7ff ff7a 	bl	80204d8 <xQueueGenericCreate>
 80205e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80205e6:	68f8      	ldr	r0, [r7, #12]
 80205e8:	f7ff ffd3 	bl	8020592 <prvInitialiseMutex>

		return xNewQueue;
 80205ec:	68fb      	ldr	r3, [r7, #12]
	}
 80205ee:	4618      	mov	r0, r3
 80205f0:	3718      	adds	r7, #24
 80205f2:	46bd      	mov	sp, r7
 80205f4:	bd80      	pop	{r7, pc}

080205f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80205f6:	b580      	push	{r7, lr}
 80205f8:	b088      	sub	sp, #32
 80205fa:	af02      	add	r7, sp, #8
 80205fc:	4603      	mov	r3, r0
 80205fe:	6039      	str	r1, [r7, #0]
 8020600:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020602:	2301      	movs	r3, #1
 8020604:	617b      	str	r3, [r7, #20]
 8020606:	2300      	movs	r3, #0
 8020608:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 802060a:	79fb      	ldrb	r3, [r7, #7]
 802060c:	9300      	str	r3, [sp, #0]
 802060e:	683b      	ldr	r3, [r7, #0]
 8020610:	2200      	movs	r2, #0
 8020612:	6939      	ldr	r1, [r7, #16]
 8020614:	6978      	ldr	r0, [r7, #20]
 8020616:	f7ff fee7 	bl	80203e8 <xQueueGenericCreateStatic>
 802061a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 802061c:	68f8      	ldr	r0, [r7, #12]
 802061e:	f7ff ffb8 	bl	8020592 <prvInitialiseMutex>

		return xNewQueue;
 8020622:	68fb      	ldr	r3, [r7, #12]
	}
 8020624:	4618      	mov	r0, r3
 8020626:	3718      	adds	r7, #24
 8020628:	46bd      	mov	sp, r7
 802062a:	bd80      	pop	{r7, pc}

0802062c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 802062c:	b590      	push	{r4, r7, lr}
 802062e:	b087      	sub	sp, #28
 8020630:	af00      	add	r7, sp, #0
 8020632:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020638:	693b      	ldr	r3, [r7, #16]
 802063a:	2b00      	cmp	r3, #0
 802063c:	d10a      	bne.n	8020654 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 802063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020642:	f383 8811 	msr	BASEPRI, r3
 8020646:	f3bf 8f6f 	isb	sy
 802064a:	f3bf 8f4f 	dsb	sy
 802064e:	60fb      	str	r3, [r7, #12]
}
 8020650:	bf00      	nop
 8020652:	e7fe      	b.n	8020652 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020654:	693b      	ldr	r3, [r7, #16]
 8020656:	689c      	ldr	r4, [r3, #8]
 8020658:	f001 fd9e 	bl	8022198 <xTaskGetCurrentTaskHandle>
 802065c:	4603      	mov	r3, r0
 802065e:	429c      	cmp	r4, r3
 8020660:	d111      	bne.n	8020686 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8020662:	693b      	ldr	r3, [r7, #16]
 8020664:	68db      	ldr	r3, [r3, #12]
 8020666:	1e5a      	subs	r2, r3, #1
 8020668:	693b      	ldr	r3, [r7, #16]
 802066a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 802066c:	693b      	ldr	r3, [r7, #16]
 802066e:	68db      	ldr	r3, [r3, #12]
 8020670:	2b00      	cmp	r3, #0
 8020672:	d105      	bne.n	8020680 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8020674:	2300      	movs	r3, #0
 8020676:	2200      	movs	r2, #0
 8020678:	2100      	movs	r1, #0
 802067a:	6938      	ldr	r0, [r7, #16]
 802067c:	f000 f840 	bl	8020700 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020680:	2301      	movs	r3, #1
 8020682:	617b      	str	r3, [r7, #20]
 8020684:	e001      	b.n	802068a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8020686:	2300      	movs	r3, #0
 8020688:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 802068a:	697b      	ldr	r3, [r7, #20]
	}
 802068c:	4618      	mov	r0, r3
 802068e:	371c      	adds	r7, #28
 8020690:	46bd      	mov	sp, r7
 8020692:	bd90      	pop	{r4, r7, pc}

08020694 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8020694:	b590      	push	{r4, r7, lr}
 8020696:	b087      	sub	sp, #28
 8020698:	af00      	add	r7, sp, #0
 802069a:	6078      	str	r0, [r7, #4]
 802069c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 802069e:	687b      	ldr	r3, [r7, #4]
 80206a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80206a2:	693b      	ldr	r3, [r7, #16]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d10a      	bne.n	80206be <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80206a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80206ac:	f383 8811 	msr	BASEPRI, r3
 80206b0:	f3bf 8f6f 	isb	sy
 80206b4:	f3bf 8f4f 	dsb	sy
 80206b8:	60fb      	str	r3, [r7, #12]
}
 80206ba:	bf00      	nop
 80206bc:	e7fe      	b.n	80206bc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80206be:	693b      	ldr	r3, [r7, #16]
 80206c0:	689c      	ldr	r4, [r3, #8]
 80206c2:	f001 fd69 	bl	8022198 <xTaskGetCurrentTaskHandle>
 80206c6:	4603      	mov	r3, r0
 80206c8:	429c      	cmp	r4, r3
 80206ca:	d107      	bne.n	80206dc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80206cc:	693b      	ldr	r3, [r7, #16]
 80206ce:	68db      	ldr	r3, [r3, #12]
 80206d0:	1c5a      	adds	r2, r3, #1
 80206d2:	693b      	ldr	r3, [r7, #16]
 80206d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80206d6:	2301      	movs	r3, #1
 80206d8:	617b      	str	r3, [r7, #20]
 80206da:	e00c      	b.n	80206f6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80206dc:	6839      	ldr	r1, [r7, #0]
 80206de:	6938      	ldr	r0, [r7, #16]
 80206e0:	f000 fa88 	bl	8020bf4 <xQueueSemaphoreTake>
 80206e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80206e6:	697b      	ldr	r3, [r7, #20]
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d004      	beq.n	80206f6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80206ec:	693b      	ldr	r3, [r7, #16]
 80206ee:	68db      	ldr	r3, [r3, #12]
 80206f0:	1c5a      	adds	r2, r3, #1
 80206f2:	693b      	ldr	r3, [r7, #16]
 80206f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80206f6:	697b      	ldr	r3, [r7, #20]
	}
 80206f8:	4618      	mov	r0, r3
 80206fa:	371c      	adds	r7, #28
 80206fc:	46bd      	mov	sp, r7
 80206fe:	bd90      	pop	{r4, r7, pc}

08020700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020700:	b580      	push	{r7, lr}
 8020702:	b08e      	sub	sp, #56	; 0x38
 8020704:	af00      	add	r7, sp, #0
 8020706:	60f8      	str	r0, [r7, #12]
 8020708:	60b9      	str	r1, [r7, #8]
 802070a:	607a      	str	r2, [r7, #4]
 802070c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 802070e:	2300      	movs	r3, #0
 8020710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020718:	2b00      	cmp	r3, #0
 802071a:	d10a      	bne.n	8020732 <xQueueGenericSend+0x32>
	__asm volatile
 802071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020720:	f383 8811 	msr	BASEPRI, r3
 8020724:	f3bf 8f6f 	isb	sy
 8020728:	f3bf 8f4f 	dsb	sy
 802072c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802072e:	bf00      	nop
 8020730:	e7fe      	b.n	8020730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020732:	68bb      	ldr	r3, [r7, #8]
 8020734:	2b00      	cmp	r3, #0
 8020736:	d103      	bne.n	8020740 <xQueueGenericSend+0x40>
 8020738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802073c:	2b00      	cmp	r3, #0
 802073e:	d101      	bne.n	8020744 <xQueueGenericSend+0x44>
 8020740:	2301      	movs	r3, #1
 8020742:	e000      	b.n	8020746 <xQueueGenericSend+0x46>
 8020744:	2300      	movs	r3, #0
 8020746:	2b00      	cmp	r3, #0
 8020748:	d10a      	bne.n	8020760 <xQueueGenericSend+0x60>
	__asm volatile
 802074a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802074e:	f383 8811 	msr	BASEPRI, r3
 8020752:	f3bf 8f6f 	isb	sy
 8020756:	f3bf 8f4f 	dsb	sy
 802075a:	627b      	str	r3, [r7, #36]	; 0x24
}
 802075c:	bf00      	nop
 802075e:	e7fe      	b.n	802075e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020760:	683b      	ldr	r3, [r7, #0]
 8020762:	2b02      	cmp	r3, #2
 8020764:	d103      	bne.n	802076e <xQueueGenericSend+0x6e>
 8020766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802076a:	2b01      	cmp	r3, #1
 802076c:	d101      	bne.n	8020772 <xQueueGenericSend+0x72>
 802076e:	2301      	movs	r3, #1
 8020770:	e000      	b.n	8020774 <xQueueGenericSend+0x74>
 8020772:	2300      	movs	r3, #0
 8020774:	2b00      	cmp	r3, #0
 8020776:	d10a      	bne.n	802078e <xQueueGenericSend+0x8e>
	__asm volatile
 8020778:	f04f 0350 	mov.w	r3, #80	; 0x50
 802077c:	f383 8811 	msr	BASEPRI, r3
 8020780:	f3bf 8f6f 	isb	sy
 8020784:	f3bf 8f4f 	dsb	sy
 8020788:	623b      	str	r3, [r7, #32]
}
 802078a:	bf00      	nop
 802078c:	e7fe      	b.n	802078c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802078e:	f001 fd13 	bl	80221b8 <xTaskGetSchedulerState>
 8020792:	4603      	mov	r3, r0
 8020794:	2b00      	cmp	r3, #0
 8020796:	d102      	bne.n	802079e <xQueueGenericSend+0x9e>
 8020798:	687b      	ldr	r3, [r7, #4]
 802079a:	2b00      	cmp	r3, #0
 802079c:	d101      	bne.n	80207a2 <xQueueGenericSend+0xa2>
 802079e:	2301      	movs	r3, #1
 80207a0:	e000      	b.n	80207a4 <xQueueGenericSend+0xa4>
 80207a2:	2300      	movs	r3, #0
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d10a      	bne.n	80207be <xQueueGenericSend+0xbe>
	__asm volatile
 80207a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207ac:	f383 8811 	msr	BASEPRI, r3
 80207b0:	f3bf 8f6f 	isb	sy
 80207b4:	f3bf 8f4f 	dsb	sy
 80207b8:	61fb      	str	r3, [r7, #28]
}
 80207ba:	bf00      	nop
 80207bc:	e7fe      	b.n	80207bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80207be:	f002 fb51 	bl	8022e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80207c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80207c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80207ca:	429a      	cmp	r2, r3
 80207cc:	d302      	bcc.n	80207d4 <xQueueGenericSend+0xd4>
 80207ce:	683b      	ldr	r3, [r7, #0]
 80207d0:	2b02      	cmp	r3, #2
 80207d2:	d129      	bne.n	8020828 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80207d4:	683a      	ldr	r2, [r7, #0]
 80207d6:	68b9      	ldr	r1, [r7, #8]
 80207d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80207da:	f000 fccd 	bl	8021178 <prvCopyDataToQueue>
 80207de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80207e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d010      	beq.n	802080a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80207e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207ea:	3324      	adds	r3, #36	; 0x24
 80207ec:	4618      	mov	r0, r3
 80207ee:	f001 fad9 	bl	8021da4 <xTaskRemoveFromEventList>
 80207f2:	4603      	mov	r3, r0
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d013      	beq.n	8020820 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80207f8:	4b3f      	ldr	r3, [pc, #252]	; (80208f8 <xQueueGenericSend+0x1f8>)
 80207fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80207fe:	601a      	str	r2, [r3, #0]
 8020800:	f3bf 8f4f 	dsb	sy
 8020804:	f3bf 8f6f 	isb	sy
 8020808:	e00a      	b.n	8020820 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 802080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802080c:	2b00      	cmp	r3, #0
 802080e:	d007      	beq.n	8020820 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020810:	4b39      	ldr	r3, [pc, #228]	; (80208f8 <xQueueGenericSend+0x1f8>)
 8020812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020816:	601a      	str	r2, [r3, #0]
 8020818:	f3bf 8f4f 	dsb	sy
 802081c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020820:	f002 fb50 	bl	8022ec4 <vPortExitCritical>
				return pdPASS;
 8020824:	2301      	movs	r3, #1
 8020826:	e063      	b.n	80208f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	2b00      	cmp	r3, #0
 802082c:	d103      	bne.n	8020836 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802082e:	f002 fb49 	bl	8022ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020832:	2300      	movs	r3, #0
 8020834:	e05c      	b.n	80208f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020838:	2b00      	cmp	r3, #0
 802083a:	d106      	bne.n	802084a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802083c:	f107 0314 	add.w	r3, r7, #20
 8020840:	4618      	mov	r0, r3
 8020842:	f001 fb13 	bl	8021e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020846:	2301      	movs	r3, #1
 8020848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802084a:	f002 fb3b 	bl	8022ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802084e:	f001 f863 	bl	8021918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020852:	f002 fb07 	bl	8022e64 <vPortEnterCritical>
 8020856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802085c:	b25b      	sxtb	r3, r3
 802085e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020862:	d103      	bne.n	802086c <xQueueGenericSend+0x16c>
 8020864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020866:	2200      	movs	r2, #0
 8020868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802086c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802086e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020872:	b25b      	sxtb	r3, r3
 8020874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020878:	d103      	bne.n	8020882 <xQueueGenericSend+0x182>
 802087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802087c:	2200      	movs	r2, #0
 802087e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020882:	f002 fb1f 	bl	8022ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020886:	1d3a      	adds	r2, r7, #4
 8020888:	f107 0314 	add.w	r3, r7, #20
 802088c:	4611      	mov	r1, r2
 802088e:	4618      	mov	r0, r3
 8020890:	f001 fb02 	bl	8021e98 <xTaskCheckForTimeOut>
 8020894:	4603      	mov	r3, r0
 8020896:	2b00      	cmp	r3, #0
 8020898:	d124      	bne.n	80208e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 802089a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802089c:	f000 fd64 	bl	8021368 <prvIsQueueFull>
 80208a0:	4603      	mov	r3, r0
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d018      	beq.n	80208d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80208a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208a8:	3310      	adds	r3, #16
 80208aa:	687a      	ldr	r2, [r7, #4]
 80208ac:	4611      	mov	r1, r2
 80208ae:	4618      	mov	r0, r3
 80208b0:	f001 fa28 	bl	8021d04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80208b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80208b6:	f000 fcef 	bl	8021298 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80208ba:	f001 f83b 	bl	8021934 <xTaskResumeAll>
 80208be:	4603      	mov	r3, r0
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	f47f af7c 	bne.w	80207be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80208c6:	4b0c      	ldr	r3, [pc, #48]	; (80208f8 <xQueueGenericSend+0x1f8>)
 80208c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80208cc:	601a      	str	r2, [r3, #0]
 80208ce:	f3bf 8f4f 	dsb	sy
 80208d2:	f3bf 8f6f 	isb	sy
 80208d6:	e772      	b.n	80207be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80208d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80208da:	f000 fcdd 	bl	8021298 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80208de:	f001 f829 	bl	8021934 <xTaskResumeAll>
 80208e2:	e76c      	b.n	80207be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80208e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80208e6:	f000 fcd7 	bl	8021298 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80208ea:	f001 f823 	bl	8021934 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80208ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80208f0:	4618      	mov	r0, r3
 80208f2:	3738      	adds	r7, #56	; 0x38
 80208f4:	46bd      	mov	sp, r7
 80208f6:	bd80      	pop	{r7, pc}
 80208f8:	e000ed04 	.word	0xe000ed04

080208fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b090      	sub	sp, #64	; 0x40
 8020900:	af00      	add	r7, sp, #0
 8020902:	60f8      	str	r0, [r7, #12]
 8020904:	60b9      	str	r1, [r7, #8]
 8020906:	607a      	str	r2, [r7, #4]
 8020908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802090a:	68fb      	ldr	r3, [r7, #12]
 802090c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 802090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020910:	2b00      	cmp	r3, #0
 8020912:	d10a      	bne.n	802092a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8020914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020918:	f383 8811 	msr	BASEPRI, r3
 802091c:	f3bf 8f6f 	isb	sy
 8020920:	f3bf 8f4f 	dsb	sy
 8020924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020926:	bf00      	nop
 8020928:	e7fe      	b.n	8020928 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802092a:	68bb      	ldr	r3, [r7, #8]
 802092c:	2b00      	cmp	r3, #0
 802092e:	d103      	bne.n	8020938 <xQueueGenericSendFromISR+0x3c>
 8020930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020934:	2b00      	cmp	r3, #0
 8020936:	d101      	bne.n	802093c <xQueueGenericSendFromISR+0x40>
 8020938:	2301      	movs	r3, #1
 802093a:	e000      	b.n	802093e <xQueueGenericSendFromISR+0x42>
 802093c:	2300      	movs	r3, #0
 802093e:	2b00      	cmp	r3, #0
 8020940:	d10a      	bne.n	8020958 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8020942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020946:	f383 8811 	msr	BASEPRI, r3
 802094a:	f3bf 8f6f 	isb	sy
 802094e:	f3bf 8f4f 	dsb	sy
 8020952:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020954:	bf00      	nop
 8020956:	e7fe      	b.n	8020956 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020958:	683b      	ldr	r3, [r7, #0]
 802095a:	2b02      	cmp	r3, #2
 802095c:	d103      	bne.n	8020966 <xQueueGenericSendFromISR+0x6a>
 802095e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020962:	2b01      	cmp	r3, #1
 8020964:	d101      	bne.n	802096a <xQueueGenericSendFromISR+0x6e>
 8020966:	2301      	movs	r3, #1
 8020968:	e000      	b.n	802096c <xQueueGenericSendFromISR+0x70>
 802096a:	2300      	movs	r3, #0
 802096c:	2b00      	cmp	r3, #0
 802096e:	d10a      	bne.n	8020986 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8020970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020974:	f383 8811 	msr	BASEPRI, r3
 8020978:	f3bf 8f6f 	isb	sy
 802097c:	f3bf 8f4f 	dsb	sy
 8020980:	623b      	str	r3, [r7, #32]
}
 8020982:	bf00      	nop
 8020984:	e7fe      	b.n	8020984 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020986:	f002 fb4f 	bl	8023028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802098a:	f3ef 8211 	mrs	r2, BASEPRI
 802098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020992:	f383 8811 	msr	BASEPRI, r3
 8020996:	f3bf 8f6f 	isb	sy
 802099a:	f3bf 8f4f 	dsb	sy
 802099e:	61fa      	str	r2, [r7, #28]
 80209a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80209a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80209a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80209a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80209aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80209ae:	429a      	cmp	r2, r3
 80209b0:	d302      	bcc.n	80209b8 <xQueueGenericSendFromISR+0xbc>
 80209b2:	683b      	ldr	r3, [r7, #0]
 80209b4:	2b02      	cmp	r3, #2
 80209b6:	d12f      	bne.n	8020a18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80209b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80209be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80209c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80209c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80209c8:	683a      	ldr	r2, [r7, #0]
 80209ca:	68b9      	ldr	r1, [r7, #8]
 80209cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80209ce:	f000 fbd3 	bl	8021178 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80209d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80209d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80209da:	d112      	bne.n	8020a02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80209dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d016      	beq.n	8020a12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80209e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209e6:	3324      	adds	r3, #36	; 0x24
 80209e8:	4618      	mov	r0, r3
 80209ea:	f001 f9db 	bl	8021da4 <xTaskRemoveFromEventList>
 80209ee:	4603      	mov	r3, r0
 80209f0:	2b00      	cmp	r3, #0
 80209f2:	d00e      	beq.n	8020a12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d00b      	beq.n	8020a12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80209fa:	687b      	ldr	r3, [r7, #4]
 80209fc:	2201      	movs	r2, #1
 80209fe:	601a      	str	r2, [r3, #0]
 8020a00:	e007      	b.n	8020a12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020a06:	3301      	adds	r3, #1
 8020a08:	b2db      	uxtb	r3, r3
 8020a0a:	b25a      	sxtb	r2, r3
 8020a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020a12:	2301      	movs	r3, #1
 8020a14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8020a16:	e001      	b.n	8020a1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8020a18:	2300      	movs	r3, #0
 8020a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8020a20:	697b      	ldr	r3, [r7, #20]
 8020a22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8020a26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8020a2a:	4618      	mov	r0, r3
 8020a2c:	3740      	adds	r7, #64	; 0x40
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bd80      	pop	{r7, pc}
	...

08020a34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020a34:	b580      	push	{r7, lr}
 8020a36:	b08c      	sub	sp, #48	; 0x30
 8020a38:	af00      	add	r7, sp, #0
 8020a3a:	60f8      	str	r0, [r7, #12]
 8020a3c:	60b9      	str	r1, [r7, #8]
 8020a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020a40:	2300      	movs	r3, #0
 8020a42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a4a:	2b00      	cmp	r3, #0
 8020a4c:	d10a      	bne.n	8020a64 <xQueueReceive+0x30>
	__asm volatile
 8020a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a52:	f383 8811 	msr	BASEPRI, r3
 8020a56:	f3bf 8f6f 	isb	sy
 8020a5a:	f3bf 8f4f 	dsb	sy
 8020a5e:	623b      	str	r3, [r7, #32]
}
 8020a60:	bf00      	nop
 8020a62:	e7fe      	b.n	8020a62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020a64:	68bb      	ldr	r3, [r7, #8]
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	d103      	bne.n	8020a72 <xQueueReceive+0x3e>
 8020a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d101      	bne.n	8020a76 <xQueueReceive+0x42>
 8020a72:	2301      	movs	r3, #1
 8020a74:	e000      	b.n	8020a78 <xQueueReceive+0x44>
 8020a76:	2300      	movs	r3, #0
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d10a      	bne.n	8020a92 <xQueueReceive+0x5e>
	__asm volatile
 8020a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a80:	f383 8811 	msr	BASEPRI, r3
 8020a84:	f3bf 8f6f 	isb	sy
 8020a88:	f3bf 8f4f 	dsb	sy
 8020a8c:	61fb      	str	r3, [r7, #28]
}
 8020a8e:	bf00      	nop
 8020a90:	e7fe      	b.n	8020a90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020a92:	f001 fb91 	bl	80221b8 <xTaskGetSchedulerState>
 8020a96:	4603      	mov	r3, r0
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	d102      	bne.n	8020aa2 <xQueueReceive+0x6e>
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d101      	bne.n	8020aa6 <xQueueReceive+0x72>
 8020aa2:	2301      	movs	r3, #1
 8020aa4:	e000      	b.n	8020aa8 <xQueueReceive+0x74>
 8020aa6:	2300      	movs	r3, #0
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d10a      	bne.n	8020ac2 <xQueueReceive+0x8e>
	__asm volatile
 8020aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ab0:	f383 8811 	msr	BASEPRI, r3
 8020ab4:	f3bf 8f6f 	isb	sy
 8020ab8:	f3bf 8f4f 	dsb	sy
 8020abc:	61bb      	str	r3, [r7, #24]
}
 8020abe:	bf00      	nop
 8020ac0:	e7fe      	b.n	8020ac0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020ac2:	f002 f9cf 	bl	8022e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020aca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d01f      	beq.n	8020b12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8020ad2:	68b9      	ldr	r1, [r7, #8]
 8020ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020ad6:	f000 fbb9 	bl	802124c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8020ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020adc:	1e5a      	subs	r2, r3, #1
 8020ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ae4:	691b      	ldr	r3, [r3, #16]
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d00f      	beq.n	8020b0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020aec:	3310      	adds	r3, #16
 8020aee:	4618      	mov	r0, r3
 8020af0:	f001 f958 	bl	8021da4 <xTaskRemoveFromEventList>
 8020af4:	4603      	mov	r3, r0
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d007      	beq.n	8020b0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020afa:	4b3d      	ldr	r3, [pc, #244]	; (8020bf0 <xQueueReceive+0x1bc>)
 8020afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020b00:	601a      	str	r2, [r3, #0]
 8020b02:	f3bf 8f4f 	dsb	sy
 8020b06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020b0a:	f002 f9db 	bl	8022ec4 <vPortExitCritical>
				return pdPASS;
 8020b0e:	2301      	movs	r3, #1
 8020b10:	e069      	b.n	8020be6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d103      	bne.n	8020b20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020b18:	f002 f9d4 	bl	8022ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020b1c:	2300      	movs	r3, #0
 8020b1e:	e062      	b.n	8020be6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d106      	bne.n	8020b34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020b26:	f107 0310 	add.w	r3, r7, #16
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	f001 f99e 	bl	8021e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020b30:	2301      	movs	r3, #1
 8020b32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020b34:	f002 f9c6 	bl	8022ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020b38:	f000 feee 	bl	8021918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020b3c:	f002 f992 	bl	8022e64 <vPortEnterCritical>
 8020b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020b46:	b25b      	sxtb	r3, r3
 8020b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b4c:	d103      	bne.n	8020b56 <xQueueReceive+0x122>
 8020b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b50:	2200      	movs	r2, #0
 8020b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020b5c:	b25b      	sxtb	r3, r3
 8020b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b62:	d103      	bne.n	8020b6c <xQueueReceive+0x138>
 8020b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b66:	2200      	movs	r2, #0
 8020b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020b6c:	f002 f9aa 	bl	8022ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020b70:	1d3a      	adds	r2, r7, #4
 8020b72:	f107 0310 	add.w	r3, r7, #16
 8020b76:	4611      	mov	r1, r2
 8020b78:	4618      	mov	r0, r3
 8020b7a:	f001 f98d 	bl	8021e98 <xTaskCheckForTimeOut>
 8020b7e:	4603      	mov	r3, r0
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	d123      	bne.n	8020bcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020b86:	f000 fbd9 	bl	802133c <prvIsQueueEmpty>
 8020b8a:	4603      	mov	r3, r0
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	d017      	beq.n	8020bc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b92:	3324      	adds	r3, #36	; 0x24
 8020b94:	687a      	ldr	r2, [r7, #4]
 8020b96:	4611      	mov	r1, r2
 8020b98:	4618      	mov	r0, r3
 8020b9a:	f001 f8b3 	bl	8021d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020ba0:	f000 fb7a 	bl	8021298 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020ba4:	f000 fec6 	bl	8021934 <xTaskResumeAll>
 8020ba8:	4603      	mov	r3, r0
 8020baa:	2b00      	cmp	r3, #0
 8020bac:	d189      	bne.n	8020ac2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8020bae:	4b10      	ldr	r3, [pc, #64]	; (8020bf0 <xQueueReceive+0x1bc>)
 8020bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020bb4:	601a      	str	r2, [r3, #0]
 8020bb6:	f3bf 8f4f 	dsb	sy
 8020bba:	f3bf 8f6f 	isb	sy
 8020bbe:	e780      	b.n	8020ac2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8020bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020bc2:	f000 fb69 	bl	8021298 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020bc6:	f000 feb5 	bl	8021934 <xTaskResumeAll>
 8020bca:	e77a      	b.n	8020ac2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8020bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020bce:	f000 fb63 	bl	8021298 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020bd2:	f000 feaf 	bl	8021934 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020bd8:	f000 fbb0 	bl	802133c <prvIsQueueEmpty>
 8020bdc:	4603      	mov	r3, r0
 8020bde:	2b00      	cmp	r3, #0
 8020be0:	f43f af6f 	beq.w	8020ac2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8020be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8020be6:	4618      	mov	r0, r3
 8020be8:	3730      	adds	r7, #48	; 0x30
 8020bea:	46bd      	mov	sp, r7
 8020bec:	bd80      	pop	{r7, pc}
 8020bee:	bf00      	nop
 8020bf0:	e000ed04 	.word	0xe000ed04

08020bf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8020bf4:	b580      	push	{r7, lr}
 8020bf6:	b08e      	sub	sp, #56	; 0x38
 8020bf8:	af00      	add	r7, sp, #0
 8020bfa:	6078      	str	r0, [r7, #4]
 8020bfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8020bfe:	2300      	movs	r3, #0
 8020c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8020c06:	2300      	movs	r3, #0
 8020c08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	d10a      	bne.n	8020c26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8020c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c14:	f383 8811 	msr	BASEPRI, r3
 8020c18:	f3bf 8f6f 	isb	sy
 8020c1c:	f3bf 8f4f 	dsb	sy
 8020c20:	623b      	str	r3, [r7, #32]
}
 8020c22:	bf00      	nop
 8020c24:	e7fe      	b.n	8020c24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8020c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	d00a      	beq.n	8020c44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8020c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c32:	f383 8811 	msr	BASEPRI, r3
 8020c36:	f3bf 8f6f 	isb	sy
 8020c3a:	f3bf 8f4f 	dsb	sy
 8020c3e:	61fb      	str	r3, [r7, #28]
}
 8020c40:	bf00      	nop
 8020c42:	e7fe      	b.n	8020c42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020c44:	f001 fab8 	bl	80221b8 <xTaskGetSchedulerState>
 8020c48:	4603      	mov	r3, r0
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d102      	bne.n	8020c54 <xQueueSemaphoreTake+0x60>
 8020c4e:	683b      	ldr	r3, [r7, #0]
 8020c50:	2b00      	cmp	r3, #0
 8020c52:	d101      	bne.n	8020c58 <xQueueSemaphoreTake+0x64>
 8020c54:	2301      	movs	r3, #1
 8020c56:	e000      	b.n	8020c5a <xQueueSemaphoreTake+0x66>
 8020c58:	2300      	movs	r3, #0
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d10a      	bne.n	8020c74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8020c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c62:	f383 8811 	msr	BASEPRI, r3
 8020c66:	f3bf 8f6f 	isb	sy
 8020c6a:	f3bf 8f4f 	dsb	sy
 8020c6e:	61bb      	str	r3, [r7, #24]
}
 8020c70:	bf00      	nop
 8020c72:	e7fe      	b.n	8020c72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020c74:	f002 f8f6 	bl	8022e64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8020c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8020c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d024      	beq.n	8020cce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8020c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c86:	1e5a      	subs	r2, r3, #1
 8020c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	d104      	bne.n	8020c9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8020c94:	f001 fc06 	bl	80224a4 <pvTaskIncrementMutexHeldCount>
 8020c98:	4602      	mov	r2, r0
 8020c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ca0:	691b      	ldr	r3, [r3, #16]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d00f      	beq.n	8020cc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ca8:	3310      	adds	r3, #16
 8020caa:	4618      	mov	r0, r3
 8020cac:	f001 f87a 	bl	8021da4 <xTaskRemoveFromEventList>
 8020cb0:	4603      	mov	r3, r0
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	d007      	beq.n	8020cc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020cb6:	4b54      	ldr	r3, [pc, #336]	; (8020e08 <xQueueSemaphoreTake+0x214>)
 8020cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020cbc:	601a      	str	r2, [r3, #0]
 8020cbe:	f3bf 8f4f 	dsb	sy
 8020cc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020cc6:	f002 f8fd 	bl	8022ec4 <vPortExitCritical>
				return pdPASS;
 8020cca:	2301      	movs	r3, #1
 8020ccc:	e097      	b.n	8020dfe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020cce:	683b      	ldr	r3, [r7, #0]
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	d111      	bne.n	8020cf8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8020cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d00a      	beq.n	8020cf0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8020cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cde:	f383 8811 	msr	BASEPRI, r3
 8020ce2:	f3bf 8f6f 	isb	sy
 8020ce6:	f3bf 8f4f 	dsb	sy
 8020cea:	617b      	str	r3, [r7, #20]
}
 8020cec:	bf00      	nop
 8020cee:	e7fe      	b.n	8020cee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8020cf0:	f002 f8e8 	bl	8022ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020cf4:	2300      	movs	r3, #0
 8020cf6:	e082      	b.n	8020dfe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	d106      	bne.n	8020d0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020cfe:	f107 030c 	add.w	r3, r7, #12
 8020d02:	4618      	mov	r0, r3
 8020d04:	f001 f8b2 	bl	8021e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020d08:	2301      	movs	r3, #1
 8020d0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020d0c:	f002 f8da 	bl	8022ec4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020d10:	f000 fe02 	bl	8021918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020d14:	f002 f8a6 	bl	8022e64 <vPortEnterCritical>
 8020d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020d1e:	b25b      	sxtb	r3, r3
 8020d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d24:	d103      	bne.n	8020d2e <xQueueSemaphoreTake+0x13a>
 8020d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d28:	2200      	movs	r2, #0
 8020d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020d34:	b25b      	sxtb	r3, r3
 8020d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d3a:	d103      	bne.n	8020d44 <xQueueSemaphoreTake+0x150>
 8020d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d3e:	2200      	movs	r2, #0
 8020d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020d44:	f002 f8be 	bl	8022ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020d48:	463a      	mov	r2, r7
 8020d4a:	f107 030c 	add.w	r3, r7, #12
 8020d4e:	4611      	mov	r1, r2
 8020d50:	4618      	mov	r0, r3
 8020d52:	f001 f8a1 	bl	8021e98 <xTaskCheckForTimeOut>
 8020d56:	4603      	mov	r3, r0
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	d132      	bne.n	8020dc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020d5e:	f000 faed 	bl	802133c <prvIsQueueEmpty>
 8020d62:	4603      	mov	r3, r0
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d026      	beq.n	8020db6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d109      	bne.n	8020d84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8020d70:	f002 f878 	bl	8022e64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8020d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d76:	689b      	ldr	r3, [r3, #8]
 8020d78:	4618      	mov	r0, r3
 8020d7a:	f001 fa3b 	bl	80221f4 <xTaskPriorityInherit>
 8020d7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8020d80:	f002 f8a0 	bl	8022ec4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d86:	3324      	adds	r3, #36	; 0x24
 8020d88:	683a      	ldr	r2, [r7, #0]
 8020d8a:	4611      	mov	r1, r2
 8020d8c:	4618      	mov	r0, r3
 8020d8e:	f000 ffb9 	bl	8021d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020d94:	f000 fa80 	bl	8021298 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020d98:	f000 fdcc 	bl	8021934 <xTaskResumeAll>
 8020d9c:	4603      	mov	r3, r0
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	f47f af68 	bne.w	8020c74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8020da4:	4b18      	ldr	r3, [pc, #96]	; (8020e08 <xQueueSemaphoreTake+0x214>)
 8020da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020daa:	601a      	str	r2, [r3, #0]
 8020dac:	f3bf 8f4f 	dsb	sy
 8020db0:	f3bf 8f6f 	isb	sy
 8020db4:	e75e      	b.n	8020c74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8020db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020db8:	f000 fa6e 	bl	8021298 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020dbc:	f000 fdba 	bl	8021934 <xTaskResumeAll>
 8020dc0:	e758      	b.n	8020c74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8020dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020dc4:	f000 fa68 	bl	8021298 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020dc8:	f000 fdb4 	bl	8021934 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020dce:	f000 fab5 	bl	802133c <prvIsQueueEmpty>
 8020dd2:	4603      	mov	r3, r0
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	f43f af4d 	beq.w	8020c74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8020dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d00d      	beq.n	8020dfc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8020de0:	f002 f840 	bl	8022e64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8020de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020de6:	f000 f9af 	bl	8021148 <prvGetDisinheritPriorityAfterTimeout>
 8020dea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8020dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dee:	689b      	ldr	r3, [r3, #8]
 8020df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020df2:	4618      	mov	r0, r3
 8020df4:	f001 fad4 	bl	80223a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8020df8:	f002 f864 	bl	8022ec4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8020dfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8020dfe:	4618      	mov	r0, r3
 8020e00:	3738      	adds	r7, #56	; 0x38
 8020e02:	46bd      	mov	sp, r7
 8020e04:	bd80      	pop	{r7, pc}
 8020e06:	bf00      	nop
 8020e08:	e000ed04 	.word	0xe000ed04

08020e0c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020e0c:	b580      	push	{r7, lr}
 8020e0e:	b08e      	sub	sp, #56	; 0x38
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	60f8      	str	r0, [r7, #12]
 8020e14:	60b9      	str	r1, [r7, #8]
 8020e16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020e18:	2300      	movs	r3, #0
 8020e1a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8020e1c:	68fb      	ldr	r3, [r7, #12]
 8020e1e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d10a      	bne.n	8020e3c <xQueuePeek+0x30>
	__asm volatile
 8020e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e2a:	f383 8811 	msr	BASEPRI, r3
 8020e2e:	f3bf 8f6f 	isb	sy
 8020e32:	f3bf 8f4f 	dsb	sy
 8020e36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020e38:	bf00      	nop
 8020e3a:	e7fe      	b.n	8020e3a <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020e3c:	68bb      	ldr	r3, [r7, #8]
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d103      	bne.n	8020e4a <xQueuePeek+0x3e>
 8020e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	d101      	bne.n	8020e4e <xQueuePeek+0x42>
 8020e4a:	2301      	movs	r3, #1
 8020e4c:	e000      	b.n	8020e50 <xQueuePeek+0x44>
 8020e4e:	2300      	movs	r3, #0
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d10a      	bne.n	8020e6a <xQueuePeek+0x5e>
	__asm volatile
 8020e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e58:	f383 8811 	msr	BASEPRI, r3
 8020e5c:	f3bf 8f6f 	isb	sy
 8020e60:	f3bf 8f4f 	dsb	sy
 8020e64:	623b      	str	r3, [r7, #32]
}
 8020e66:	bf00      	nop
 8020e68:	e7fe      	b.n	8020e68 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020e6a:	f001 f9a5 	bl	80221b8 <xTaskGetSchedulerState>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d102      	bne.n	8020e7a <xQueuePeek+0x6e>
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d101      	bne.n	8020e7e <xQueuePeek+0x72>
 8020e7a:	2301      	movs	r3, #1
 8020e7c:	e000      	b.n	8020e80 <xQueuePeek+0x74>
 8020e7e:	2300      	movs	r3, #0
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d10a      	bne.n	8020e9a <xQueuePeek+0x8e>
	__asm volatile
 8020e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e88:	f383 8811 	msr	BASEPRI, r3
 8020e8c:	f3bf 8f6f 	isb	sy
 8020e90:	f3bf 8f4f 	dsb	sy
 8020e94:	61fb      	str	r3, [r7, #28]
}
 8020e96:	bf00      	nop
 8020e98:	e7fe      	b.n	8020e98 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020e9a:	f001 ffe3 	bl	8022e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d021      	beq.n	8020eee <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8020eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020eac:	68db      	ldr	r3, [r3, #12]
 8020eae:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8020eb0:	68b9      	ldr	r1, [r7, #8]
 8020eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020eb4:	f000 f9ca 	bl	802124c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8020eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020ebc:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d00f      	beq.n	8020ee6 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ec8:	3324      	adds	r3, #36	; 0x24
 8020eca:	4618      	mov	r0, r3
 8020ecc:	f000 ff6a 	bl	8021da4 <xTaskRemoveFromEventList>
 8020ed0:	4603      	mov	r3, r0
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d007      	beq.n	8020ee6 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8020ed6:	4b3d      	ldr	r3, [pc, #244]	; (8020fcc <xQueuePeek+0x1c0>)
 8020ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020edc:	601a      	str	r2, [r3, #0]
 8020ede:	f3bf 8f4f 	dsb	sy
 8020ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020ee6:	f001 ffed 	bl	8022ec4 <vPortExitCritical>
				return pdPASS;
 8020eea:	2301      	movs	r3, #1
 8020eec:	e069      	b.n	8020fc2 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	d103      	bne.n	8020efc <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020ef4:	f001 ffe6 	bl	8022ec4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020ef8:	2300      	movs	r3, #0
 8020efa:	e062      	b.n	8020fc2 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d106      	bne.n	8020f10 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020f02:	f107 0314 	add.w	r3, r7, #20
 8020f06:	4618      	mov	r0, r3
 8020f08:	f000 ffb0 	bl	8021e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020f0c:	2301      	movs	r3, #1
 8020f0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020f10:	f001 ffd8 	bl	8022ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020f14:	f000 fd00 	bl	8021918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020f18:	f001 ffa4 	bl	8022e64 <vPortEnterCritical>
 8020f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020f22:	b25b      	sxtb	r3, r3
 8020f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f28:	d103      	bne.n	8020f32 <xQueuePeek+0x126>
 8020f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f2c:	2200      	movs	r2, #0
 8020f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020f38:	b25b      	sxtb	r3, r3
 8020f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f3e:	d103      	bne.n	8020f48 <xQueuePeek+0x13c>
 8020f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f42:	2200      	movs	r2, #0
 8020f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020f48:	f001 ffbc 	bl	8022ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020f4c:	1d3a      	adds	r2, r7, #4
 8020f4e:	f107 0314 	add.w	r3, r7, #20
 8020f52:	4611      	mov	r1, r2
 8020f54:	4618      	mov	r0, r3
 8020f56:	f000 ff9f 	bl	8021e98 <xTaskCheckForTimeOut>
 8020f5a:	4603      	mov	r3, r0
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d123      	bne.n	8020fa8 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f62:	f000 f9eb 	bl	802133c <prvIsQueueEmpty>
 8020f66:	4603      	mov	r3, r0
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d017      	beq.n	8020f9c <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f6e:	3324      	adds	r3, #36	; 0x24
 8020f70:	687a      	ldr	r2, [r7, #4]
 8020f72:	4611      	mov	r1, r2
 8020f74:	4618      	mov	r0, r3
 8020f76:	f000 fec5 	bl	8021d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f7c:	f000 f98c 	bl	8021298 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020f80:	f000 fcd8 	bl	8021934 <xTaskResumeAll>
 8020f84:	4603      	mov	r3, r0
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d187      	bne.n	8020e9a <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8020f8a:	4b10      	ldr	r3, [pc, #64]	; (8020fcc <xQueuePeek+0x1c0>)
 8020f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020f90:	601a      	str	r2, [r3, #0]
 8020f92:	f3bf 8f4f 	dsb	sy
 8020f96:	f3bf 8f6f 	isb	sy
 8020f9a:	e77e      	b.n	8020e9a <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8020f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f9e:	f000 f97b 	bl	8021298 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020fa2:	f000 fcc7 	bl	8021934 <xTaskResumeAll>
 8020fa6:	e778      	b.n	8020e9a <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8020fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020faa:	f000 f975 	bl	8021298 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020fae:	f000 fcc1 	bl	8021934 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020fb4:	f000 f9c2 	bl	802133c <prvIsQueueEmpty>
 8020fb8:	4603      	mov	r3, r0
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	f43f af6d 	beq.w	8020e9a <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8020fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	3738      	adds	r7, #56	; 0x38
 8020fc6:	46bd      	mov	sp, r7
 8020fc8:	bd80      	pop	{r7, pc}
 8020fca:	bf00      	nop
 8020fcc:	e000ed04 	.word	0xe000ed04

08020fd0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8020fd0:	b580      	push	{r7, lr}
 8020fd2:	b08e      	sub	sp, #56	; 0x38
 8020fd4:	af00      	add	r7, sp, #0
 8020fd6:	60f8      	str	r0, [r7, #12]
 8020fd8:	60b9      	str	r1, [r7, #8]
 8020fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d10a      	bne.n	8020ffc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8020fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020fea:	f383 8811 	msr	BASEPRI, r3
 8020fee:	f3bf 8f6f 	isb	sy
 8020ff2:	f3bf 8f4f 	dsb	sy
 8020ff6:	623b      	str	r3, [r7, #32]
}
 8020ff8:	bf00      	nop
 8020ffa:	e7fe      	b.n	8020ffa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020ffc:	68bb      	ldr	r3, [r7, #8]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d103      	bne.n	802100a <xQueueReceiveFromISR+0x3a>
 8021002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021006:	2b00      	cmp	r3, #0
 8021008:	d101      	bne.n	802100e <xQueueReceiveFromISR+0x3e>
 802100a:	2301      	movs	r3, #1
 802100c:	e000      	b.n	8021010 <xQueueReceiveFromISR+0x40>
 802100e:	2300      	movs	r3, #0
 8021010:	2b00      	cmp	r3, #0
 8021012:	d10a      	bne.n	802102a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8021014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021018:	f383 8811 	msr	BASEPRI, r3
 802101c:	f3bf 8f6f 	isb	sy
 8021020:	f3bf 8f4f 	dsb	sy
 8021024:	61fb      	str	r3, [r7, #28]
}
 8021026:	bf00      	nop
 8021028:	e7fe      	b.n	8021028 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802102a:	f001 fffd 	bl	8023028 <vPortValidateInterruptPriority>
	__asm volatile
 802102e:	f3ef 8211 	mrs	r2, BASEPRI
 8021032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021036:	f383 8811 	msr	BASEPRI, r3
 802103a:	f3bf 8f6f 	isb	sy
 802103e:	f3bf 8f4f 	dsb	sy
 8021042:	61ba      	str	r2, [r7, #24]
 8021044:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8021046:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021048:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802104e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021052:	2b00      	cmp	r3, #0
 8021054:	d02f      	beq.n	80210b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8021056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802105c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021060:	68b9      	ldr	r1, [r7, #8]
 8021062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021064:	f000 f8f2 	bl	802124c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802106a:	1e5a      	subs	r2, r3, #1
 802106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802106e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8021070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8021074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021078:	d112      	bne.n	80210a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802107c:	691b      	ldr	r3, [r3, #16]
 802107e:	2b00      	cmp	r3, #0
 8021080:	d016      	beq.n	80210b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021084:	3310      	adds	r3, #16
 8021086:	4618      	mov	r0, r3
 8021088:	f000 fe8c 	bl	8021da4 <xTaskRemoveFromEventList>
 802108c:	4603      	mov	r3, r0
 802108e:	2b00      	cmp	r3, #0
 8021090:	d00e      	beq.n	80210b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	2b00      	cmp	r3, #0
 8021096:	d00b      	beq.n	80210b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	2201      	movs	r2, #1
 802109c:	601a      	str	r2, [r3, #0]
 802109e:	e007      	b.n	80210b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80210a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80210a4:	3301      	adds	r3, #1
 80210a6:	b2db      	uxtb	r3, r3
 80210a8:	b25a      	sxtb	r2, r3
 80210aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80210b0:	2301      	movs	r3, #1
 80210b2:	637b      	str	r3, [r7, #52]	; 0x34
 80210b4:	e001      	b.n	80210ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80210b6:	2300      	movs	r3, #0
 80210b8:	637b      	str	r3, [r7, #52]	; 0x34
 80210ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80210be:	693b      	ldr	r3, [r7, #16]
 80210c0:	f383 8811 	msr	BASEPRI, r3
}
 80210c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80210c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80210c8:	4618      	mov	r0, r3
 80210ca:	3738      	adds	r7, #56	; 0x38
 80210cc:	46bd      	mov	sp, r7
 80210ce:	bd80      	pop	{r7, pc}

080210d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80210d0:	b580      	push	{r7, lr}
 80210d2:	b084      	sub	sp, #16
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d10a      	bne.n	80210f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80210de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80210e2:	f383 8811 	msr	BASEPRI, r3
 80210e6:	f3bf 8f6f 	isb	sy
 80210ea:	f3bf 8f4f 	dsb	sy
 80210ee:	60bb      	str	r3, [r7, #8]
}
 80210f0:	bf00      	nop
 80210f2:	e7fe      	b.n	80210f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80210f4:	f001 feb6 	bl	8022e64 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80210fe:	f001 fee1 	bl	8022ec4 <vPortExitCritical>

	return uxReturn;
 8021102:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8021104:	4618      	mov	r0, r3
 8021106:	3710      	adds	r7, #16
 8021108:	46bd      	mov	sp, r7
 802110a:	bd80      	pop	{r7, pc}

0802110c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 802110c:	b480      	push	{r7}
 802110e:	b087      	sub	sp, #28
 8021110:	af00      	add	r7, sp, #0
 8021112:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8021118:	697b      	ldr	r3, [r7, #20]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d10a      	bne.n	8021134 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 802111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021122:	f383 8811 	msr	BASEPRI, r3
 8021126:	f3bf 8f6f 	isb	sy
 802112a:	f3bf 8f4f 	dsb	sy
 802112e:	60fb      	str	r3, [r7, #12]
}
 8021130:	bf00      	nop
 8021132:	e7fe      	b.n	8021132 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8021134:	697b      	ldr	r3, [r7, #20]
 8021136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021138:	613b      	str	r3, [r7, #16]

	return uxReturn;
 802113a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 802113c:	4618      	mov	r0, r3
 802113e:	371c      	adds	r7, #28
 8021140:	46bd      	mov	sp, r7
 8021142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021146:	4770      	bx	lr

08021148 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8021148:	b480      	push	{r7}
 802114a:	b085      	sub	sp, #20
 802114c:	af00      	add	r7, sp, #0
 802114e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021154:	2b00      	cmp	r3, #0
 8021156:	d006      	beq.n	8021166 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8021162:	60fb      	str	r3, [r7, #12]
 8021164:	e001      	b.n	802116a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8021166:	2300      	movs	r3, #0
 8021168:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 802116a:	68fb      	ldr	r3, [r7, #12]
	}
 802116c:	4618      	mov	r0, r3
 802116e:	3714      	adds	r7, #20
 8021170:	46bd      	mov	sp, r7
 8021172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021176:	4770      	bx	lr

08021178 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b086      	sub	sp, #24
 802117c:	af00      	add	r7, sp, #0
 802117e:	60f8      	str	r0, [r7, #12]
 8021180:	60b9      	str	r1, [r7, #8]
 8021182:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8021184:	2300      	movs	r3, #0
 8021186:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021188:	68fb      	ldr	r3, [r7, #12]
 802118a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802118c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802118e:	68fb      	ldr	r3, [r7, #12]
 8021190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021192:	2b00      	cmp	r3, #0
 8021194:	d10d      	bne.n	80211b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021196:	68fb      	ldr	r3, [r7, #12]
 8021198:	681b      	ldr	r3, [r3, #0]
 802119a:	2b00      	cmp	r3, #0
 802119c:	d14d      	bne.n	802123a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	689b      	ldr	r3, [r3, #8]
 80211a2:	4618      	mov	r0, r3
 80211a4:	f001 f88e 	bl	80222c4 <xTaskPriorityDisinherit>
 80211a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80211aa:	68fb      	ldr	r3, [r7, #12]
 80211ac:	2200      	movs	r2, #0
 80211ae:	609a      	str	r2, [r3, #8]
 80211b0:	e043      	b.n	802123a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	2b00      	cmp	r3, #0
 80211b6:	d119      	bne.n	80211ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80211b8:	68fb      	ldr	r3, [r7, #12]
 80211ba:	6858      	ldr	r0, [r3, #4]
 80211bc:	68fb      	ldr	r3, [r7, #12]
 80211be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211c0:	461a      	mov	r2, r3
 80211c2:	68b9      	ldr	r1, [r7, #8]
 80211c4:	f00c faad 	bl	802d722 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80211c8:	68fb      	ldr	r3, [r7, #12]
 80211ca:	685a      	ldr	r2, [r3, #4]
 80211cc:	68fb      	ldr	r3, [r7, #12]
 80211ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211d0:	441a      	add	r2, r3
 80211d2:	68fb      	ldr	r3, [r7, #12]
 80211d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80211d6:	68fb      	ldr	r3, [r7, #12]
 80211d8:	685a      	ldr	r2, [r3, #4]
 80211da:	68fb      	ldr	r3, [r7, #12]
 80211dc:	689b      	ldr	r3, [r3, #8]
 80211de:	429a      	cmp	r2, r3
 80211e0:	d32b      	bcc.n	802123a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	681a      	ldr	r2, [r3, #0]
 80211e6:	68fb      	ldr	r3, [r7, #12]
 80211e8:	605a      	str	r2, [r3, #4]
 80211ea:	e026      	b.n	802123a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80211ec:	68fb      	ldr	r3, [r7, #12]
 80211ee:	68d8      	ldr	r0, [r3, #12]
 80211f0:	68fb      	ldr	r3, [r7, #12]
 80211f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211f4:	461a      	mov	r2, r3
 80211f6:	68b9      	ldr	r1, [r7, #8]
 80211f8:	f00c fa93 	bl	802d722 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80211fc:	68fb      	ldr	r3, [r7, #12]
 80211fe:	68da      	ldr	r2, [r3, #12]
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021204:	425b      	negs	r3, r3
 8021206:	441a      	add	r2, r3
 8021208:	68fb      	ldr	r3, [r7, #12]
 802120a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802120c:	68fb      	ldr	r3, [r7, #12]
 802120e:	68da      	ldr	r2, [r3, #12]
 8021210:	68fb      	ldr	r3, [r7, #12]
 8021212:	681b      	ldr	r3, [r3, #0]
 8021214:	429a      	cmp	r2, r3
 8021216:	d207      	bcs.n	8021228 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021218:	68fb      	ldr	r3, [r7, #12]
 802121a:	689a      	ldr	r2, [r3, #8]
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021220:	425b      	negs	r3, r3
 8021222:	441a      	add	r2, r3
 8021224:	68fb      	ldr	r3, [r7, #12]
 8021226:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	2b02      	cmp	r3, #2
 802122c:	d105      	bne.n	802123a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802122e:	693b      	ldr	r3, [r7, #16]
 8021230:	2b00      	cmp	r3, #0
 8021232:	d002      	beq.n	802123a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8021234:	693b      	ldr	r3, [r7, #16]
 8021236:	3b01      	subs	r3, #1
 8021238:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802123a:	693b      	ldr	r3, [r7, #16]
 802123c:	1c5a      	adds	r2, r3, #1
 802123e:	68fb      	ldr	r3, [r7, #12]
 8021240:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8021242:	697b      	ldr	r3, [r7, #20]
}
 8021244:	4618      	mov	r0, r3
 8021246:	3718      	adds	r7, #24
 8021248:	46bd      	mov	sp, r7
 802124a:	bd80      	pop	{r7, pc}

0802124c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 802124c:	b580      	push	{r7, lr}
 802124e:	b082      	sub	sp, #8
 8021250:	af00      	add	r7, sp, #0
 8021252:	6078      	str	r0, [r7, #4]
 8021254:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802125a:	2b00      	cmp	r3, #0
 802125c:	d018      	beq.n	8021290 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	68da      	ldr	r2, [r3, #12]
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021266:	441a      	add	r2, r3
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	68da      	ldr	r2, [r3, #12]
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	689b      	ldr	r3, [r3, #8]
 8021274:	429a      	cmp	r2, r3
 8021276:	d303      	bcc.n	8021280 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	681a      	ldr	r2, [r3, #0]
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	68d9      	ldr	r1, [r3, #12]
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021288:	461a      	mov	r2, r3
 802128a:	6838      	ldr	r0, [r7, #0]
 802128c:	f00c fa49 	bl	802d722 <memcpy>
	}
}
 8021290:	bf00      	nop
 8021292:	3708      	adds	r7, #8
 8021294:	46bd      	mov	sp, r7
 8021296:	bd80      	pop	{r7, pc}

08021298 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8021298:	b580      	push	{r7, lr}
 802129a:	b084      	sub	sp, #16
 802129c:	af00      	add	r7, sp, #0
 802129e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80212a0:	f001 fde0 	bl	8022e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80212aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80212ac:	e011      	b.n	80212d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d012      	beq.n	80212dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	3324      	adds	r3, #36	; 0x24
 80212ba:	4618      	mov	r0, r3
 80212bc:	f000 fd72 	bl	8021da4 <xTaskRemoveFromEventList>
 80212c0:	4603      	mov	r3, r0
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	d001      	beq.n	80212ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80212c6:	f000 fe49 	bl	8021f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80212ca:	7bfb      	ldrb	r3, [r7, #15]
 80212cc:	3b01      	subs	r3, #1
 80212ce:	b2db      	uxtb	r3, r3
 80212d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80212d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	dce9      	bgt.n	80212ae <prvUnlockQueue+0x16>
 80212da:	e000      	b.n	80212de <prvUnlockQueue+0x46>
					break;
 80212dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80212de:	687b      	ldr	r3, [r7, #4]
 80212e0:	22ff      	movs	r2, #255	; 0xff
 80212e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80212e6:	f001 fded 	bl	8022ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80212ea:	f001 fdbb 	bl	8022e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80212f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80212f6:	e011      	b.n	802131c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80212f8:	687b      	ldr	r3, [r7, #4]
 80212fa:	691b      	ldr	r3, [r3, #16]
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d012      	beq.n	8021326 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	3310      	adds	r3, #16
 8021304:	4618      	mov	r0, r3
 8021306:	f000 fd4d 	bl	8021da4 <xTaskRemoveFromEventList>
 802130a:	4603      	mov	r3, r0
 802130c:	2b00      	cmp	r3, #0
 802130e:	d001      	beq.n	8021314 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8021310:	f000 fe24 	bl	8021f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8021314:	7bbb      	ldrb	r3, [r7, #14]
 8021316:	3b01      	subs	r3, #1
 8021318:	b2db      	uxtb	r3, r3
 802131a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802131c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021320:	2b00      	cmp	r3, #0
 8021322:	dce9      	bgt.n	80212f8 <prvUnlockQueue+0x60>
 8021324:	e000      	b.n	8021328 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8021326:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	22ff      	movs	r2, #255	; 0xff
 802132c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8021330:	f001 fdc8 	bl	8022ec4 <vPortExitCritical>
}
 8021334:	bf00      	nop
 8021336:	3710      	adds	r7, #16
 8021338:	46bd      	mov	sp, r7
 802133a:	bd80      	pop	{r7, pc}

0802133c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 802133c:	b580      	push	{r7, lr}
 802133e:	b084      	sub	sp, #16
 8021340:	af00      	add	r7, sp, #0
 8021342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021344:	f001 fd8e 	bl	8022e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021348:	687b      	ldr	r3, [r7, #4]
 802134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802134c:	2b00      	cmp	r3, #0
 802134e:	d102      	bne.n	8021356 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8021350:	2301      	movs	r3, #1
 8021352:	60fb      	str	r3, [r7, #12]
 8021354:	e001      	b.n	802135a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8021356:	2300      	movs	r3, #0
 8021358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802135a:	f001 fdb3 	bl	8022ec4 <vPortExitCritical>

	return xReturn;
 802135e:	68fb      	ldr	r3, [r7, #12]
}
 8021360:	4618      	mov	r0, r3
 8021362:	3710      	adds	r7, #16
 8021364:	46bd      	mov	sp, r7
 8021366:	bd80      	pop	{r7, pc}

08021368 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8021368:	b580      	push	{r7, lr}
 802136a:	b084      	sub	sp, #16
 802136c:	af00      	add	r7, sp, #0
 802136e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021370:	f001 fd78 	bl	8022e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802137c:	429a      	cmp	r2, r3
 802137e:	d102      	bne.n	8021386 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8021380:	2301      	movs	r3, #1
 8021382:	60fb      	str	r3, [r7, #12]
 8021384:	e001      	b.n	802138a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8021386:	2300      	movs	r3, #0
 8021388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802138a:	f001 fd9b 	bl	8022ec4 <vPortExitCritical>

	return xReturn;
 802138e:	68fb      	ldr	r3, [r7, #12]
}
 8021390:	4618      	mov	r0, r3
 8021392:	3710      	adds	r7, #16
 8021394:	46bd      	mov	sp, r7
 8021396:	bd80      	pop	{r7, pc}

08021398 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8021398:	b480      	push	{r7}
 802139a:	b085      	sub	sp, #20
 802139c:	af00      	add	r7, sp, #0
 802139e:	6078      	str	r0, [r7, #4]
 80213a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80213a2:	2300      	movs	r3, #0
 80213a4:	60fb      	str	r3, [r7, #12]
 80213a6:	e014      	b.n	80213d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80213a8:	4a0f      	ldr	r2, [pc, #60]	; (80213e8 <vQueueAddToRegistry+0x50>)
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d10b      	bne.n	80213cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80213b4:	490c      	ldr	r1, [pc, #48]	; (80213e8 <vQueueAddToRegistry+0x50>)
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	683a      	ldr	r2, [r7, #0]
 80213ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80213be:	4a0a      	ldr	r2, [pc, #40]	; (80213e8 <vQueueAddToRegistry+0x50>)
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	00db      	lsls	r3, r3, #3
 80213c4:	4413      	add	r3, r2
 80213c6:	687a      	ldr	r2, [r7, #4]
 80213c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80213ca:	e006      	b.n	80213da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80213cc:	68fb      	ldr	r3, [r7, #12]
 80213ce:	3301      	adds	r3, #1
 80213d0:	60fb      	str	r3, [r7, #12]
 80213d2:	68fb      	ldr	r3, [r7, #12]
 80213d4:	2b09      	cmp	r3, #9
 80213d6:	d9e7      	bls.n	80213a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80213d8:	bf00      	nop
 80213da:	bf00      	nop
 80213dc:	3714      	adds	r7, #20
 80213de:	46bd      	mov	sp, r7
 80213e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213e4:	4770      	bx	lr
 80213e6:	bf00      	nop
 80213e8:	20001cd4 	.word	0x20001cd4

080213ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80213ec:	b580      	push	{r7, lr}
 80213ee:	b086      	sub	sp, #24
 80213f0:	af00      	add	r7, sp, #0
 80213f2:	60f8      	str	r0, [r7, #12]
 80213f4:	60b9      	str	r1, [r7, #8]
 80213f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80213fc:	f001 fd32 	bl	8022e64 <vPortEnterCritical>
 8021400:	697b      	ldr	r3, [r7, #20]
 8021402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021406:	b25b      	sxtb	r3, r3
 8021408:	f1b3 3fff 	cmp.w	r3, #4294967295
 802140c:	d103      	bne.n	8021416 <vQueueWaitForMessageRestricted+0x2a>
 802140e:	697b      	ldr	r3, [r7, #20]
 8021410:	2200      	movs	r2, #0
 8021412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021416:	697b      	ldr	r3, [r7, #20]
 8021418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802141c:	b25b      	sxtb	r3, r3
 802141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021422:	d103      	bne.n	802142c <vQueueWaitForMessageRestricted+0x40>
 8021424:	697b      	ldr	r3, [r7, #20]
 8021426:	2200      	movs	r2, #0
 8021428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802142c:	f001 fd4a 	bl	8022ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8021430:	697b      	ldr	r3, [r7, #20]
 8021432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021434:	2b00      	cmp	r3, #0
 8021436:	d106      	bne.n	8021446 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8021438:	697b      	ldr	r3, [r7, #20]
 802143a:	3324      	adds	r3, #36	; 0x24
 802143c:	687a      	ldr	r2, [r7, #4]
 802143e:	68b9      	ldr	r1, [r7, #8]
 8021440:	4618      	mov	r0, r3
 8021442:	f000 fc83 	bl	8021d4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8021446:	6978      	ldr	r0, [r7, #20]
 8021448:	f7ff ff26 	bl	8021298 <prvUnlockQueue>
	}
 802144c:	bf00      	nop
 802144e:	3718      	adds	r7, #24
 8021450:	46bd      	mov	sp, r7
 8021452:	bd80      	pop	{r7, pc}

08021454 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8021454:	b580      	push	{r7, lr}
 8021456:	b08e      	sub	sp, #56	; 0x38
 8021458:	af04      	add	r7, sp, #16
 802145a:	60f8      	str	r0, [r7, #12]
 802145c:	60b9      	str	r1, [r7, #8]
 802145e:	607a      	str	r2, [r7, #4]
 8021460:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8021462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021464:	2b00      	cmp	r3, #0
 8021466:	d10a      	bne.n	802147e <xTaskCreateStatic+0x2a>
	__asm volatile
 8021468:	f04f 0350 	mov.w	r3, #80	; 0x50
 802146c:	f383 8811 	msr	BASEPRI, r3
 8021470:	f3bf 8f6f 	isb	sy
 8021474:	f3bf 8f4f 	dsb	sy
 8021478:	623b      	str	r3, [r7, #32]
}
 802147a:	bf00      	nop
 802147c:	e7fe      	b.n	802147c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 802147e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021480:	2b00      	cmp	r3, #0
 8021482:	d10a      	bne.n	802149a <xTaskCreateStatic+0x46>
	__asm volatile
 8021484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021488:	f383 8811 	msr	BASEPRI, r3
 802148c:	f3bf 8f6f 	isb	sy
 8021490:	f3bf 8f4f 	dsb	sy
 8021494:	61fb      	str	r3, [r7, #28]
}
 8021496:	bf00      	nop
 8021498:	e7fe      	b.n	8021498 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 802149a:	23ac      	movs	r3, #172	; 0xac
 802149c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 802149e:	693b      	ldr	r3, [r7, #16]
 80214a0:	2bac      	cmp	r3, #172	; 0xac
 80214a2:	d00a      	beq.n	80214ba <xTaskCreateStatic+0x66>
	__asm volatile
 80214a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80214a8:	f383 8811 	msr	BASEPRI, r3
 80214ac:	f3bf 8f6f 	isb	sy
 80214b0:	f3bf 8f4f 	dsb	sy
 80214b4:	61bb      	str	r3, [r7, #24]
}
 80214b6:	bf00      	nop
 80214b8:	e7fe      	b.n	80214b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80214ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80214bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d01e      	beq.n	8021500 <xTaskCreateStatic+0xac>
 80214c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	d01b      	beq.n	8021500 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80214c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80214ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80214cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80214d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80214d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214d4:	2202      	movs	r2, #2
 80214d6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80214da:	2300      	movs	r3, #0
 80214dc:	9303      	str	r3, [sp, #12]
 80214de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214e0:	9302      	str	r3, [sp, #8]
 80214e2:	f107 0314 	add.w	r3, r7, #20
 80214e6:	9301      	str	r3, [sp, #4]
 80214e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ea:	9300      	str	r3, [sp, #0]
 80214ec:	683b      	ldr	r3, [r7, #0]
 80214ee:	687a      	ldr	r2, [r7, #4]
 80214f0:	68b9      	ldr	r1, [r7, #8]
 80214f2:	68f8      	ldr	r0, [r7, #12]
 80214f4:	f000 f850 	bl	8021598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80214f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80214fa:	f000 f8f7 	bl	80216ec <prvAddNewTaskToReadyList>
 80214fe:	e001      	b.n	8021504 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8021500:	2300      	movs	r3, #0
 8021502:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8021504:	697b      	ldr	r3, [r7, #20]
	}
 8021506:	4618      	mov	r0, r3
 8021508:	3728      	adds	r7, #40	; 0x28
 802150a:	46bd      	mov	sp, r7
 802150c:	bd80      	pop	{r7, pc}

0802150e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 802150e:	b580      	push	{r7, lr}
 8021510:	b08c      	sub	sp, #48	; 0x30
 8021512:	af04      	add	r7, sp, #16
 8021514:	60f8      	str	r0, [r7, #12]
 8021516:	60b9      	str	r1, [r7, #8]
 8021518:	603b      	str	r3, [r7, #0]
 802151a:	4613      	mov	r3, r2
 802151c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802151e:	88fb      	ldrh	r3, [r7, #6]
 8021520:	009b      	lsls	r3, r3, #2
 8021522:	4618      	mov	r0, r3
 8021524:	f001 fdc0 	bl	80230a8 <pvPortMalloc>
 8021528:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802152a:	697b      	ldr	r3, [r7, #20]
 802152c:	2b00      	cmp	r3, #0
 802152e:	d00e      	beq.n	802154e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021530:	20ac      	movs	r0, #172	; 0xac
 8021532:	f001 fdb9 	bl	80230a8 <pvPortMalloc>
 8021536:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021538:	69fb      	ldr	r3, [r7, #28]
 802153a:	2b00      	cmp	r3, #0
 802153c:	d003      	beq.n	8021546 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 802153e:	69fb      	ldr	r3, [r7, #28]
 8021540:	697a      	ldr	r2, [r7, #20]
 8021542:	631a      	str	r2, [r3, #48]	; 0x30
 8021544:	e005      	b.n	8021552 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8021546:	6978      	ldr	r0, [r7, #20]
 8021548:	f001 fdf4 	bl	8023134 <vPortFree>
 802154c:	e001      	b.n	8021552 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 802154e:	2300      	movs	r3, #0
 8021550:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8021552:	69fb      	ldr	r3, [r7, #28]
 8021554:	2b00      	cmp	r3, #0
 8021556:	d017      	beq.n	8021588 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8021558:	69fb      	ldr	r3, [r7, #28]
 802155a:	2200      	movs	r2, #0
 802155c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8021560:	88fa      	ldrh	r2, [r7, #6]
 8021562:	2300      	movs	r3, #0
 8021564:	9303      	str	r3, [sp, #12]
 8021566:	69fb      	ldr	r3, [r7, #28]
 8021568:	9302      	str	r3, [sp, #8]
 802156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802156c:	9301      	str	r3, [sp, #4]
 802156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021570:	9300      	str	r3, [sp, #0]
 8021572:	683b      	ldr	r3, [r7, #0]
 8021574:	68b9      	ldr	r1, [r7, #8]
 8021576:	68f8      	ldr	r0, [r7, #12]
 8021578:	f000 f80e 	bl	8021598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802157c:	69f8      	ldr	r0, [r7, #28]
 802157e:	f000 f8b5 	bl	80216ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8021582:	2301      	movs	r3, #1
 8021584:	61bb      	str	r3, [r7, #24]
 8021586:	e002      	b.n	802158e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8021588:	f04f 33ff 	mov.w	r3, #4294967295
 802158c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802158e:	69bb      	ldr	r3, [r7, #24]
	}
 8021590:	4618      	mov	r0, r3
 8021592:	3720      	adds	r7, #32
 8021594:	46bd      	mov	sp, r7
 8021596:	bd80      	pop	{r7, pc}

08021598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8021598:	b580      	push	{r7, lr}
 802159a:	b088      	sub	sp, #32
 802159c:	af00      	add	r7, sp, #0
 802159e:	60f8      	str	r0, [r7, #12]
 80215a0:	60b9      	str	r1, [r7, #8]
 80215a2:	607a      	str	r2, [r7, #4]
 80215a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80215a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	009b      	lsls	r3, r3, #2
 80215ae:	461a      	mov	r2, r3
 80215b0:	21a5      	movs	r1, #165	; 0xa5
 80215b2:	f00b fee1 	bl	802d378 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80215b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80215c0:	3b01      	subs	r3, #1
 80215c2:	009b      	lsls	r3, r3, #2
 80215c4:	4413      	add	r3, r2
 80215c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80215c8:	69bb      	ldr	r3, [r7, #24]
 80215ca:	f023 0307 	bic.w	r3, r3, #7
 80215ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80215d0:	69bb      	ldr	r3, [r7, #24]
 80215d2:	f003 0307 	and.w	r3, r3, #7
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d00a      	beq.n	80215f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80215da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215de:	f383 8811 	msr	BASEPRI, r3
 80215e2:	f3bf 8f6f 	isb	sy
 80215e6:	f3bf 8f4f 	dsb	sy
 80215ea:	617b      	str	r3, [r7, #20]
}
 80215ec:	bf00      	nop
 80215ee:	e7fe      	b.n	80215ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80215f0:	68bb      	ldr	r3, [r7, #8]
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d01f      	beq.n	8021636 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80215f6:	2300      	movs	r3, #0
 80215f8:	61fb      	str	r3, [r7, #28]
 80215fa:	e012      	b.n	8021622 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80215fc:	68ba      	ldr	r2, [r7, #8]
 80215fe:	69fb      	ldr	r3, [r7, #28]
 8021600:	4413      	add	r3, r2
 8021602:	7819      	ldrb	r1, [r3, #0]
 8021604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021606:	69fb      	ldr	r3, [r7, #28]
 8021608:	4413      	add	r3, r2
 802160a:	3334      	adds	r3, #52	; 0x34
 802160c:	460a      	mov	r2, r1
 802160e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8021610:	68ba      	ldr	r2, [r7, #8]
 8021612:	69fb      	ldr	r3, [r7, #28]
 8021614:	4413      	add	r3, r2
 8021616:	781b      	ldrb	r3, [r3, #0]
 8021618:	2b00      	cmp	r3, #0
 802161a:	d006      	beq.n	802162a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802161c:	69fb      	ldr	r3, [r7, #28]
 802161e:	3301      	adds	r3, #1
 8021620:	61fb      	str	r3, [r7, #28]
 8021622:	69fb      	ldr	r3, [r7, #28]
 8021624:	2b0f      	cmp	r3, #15
 8021626:	d9e9      	bls.n	80215fc <prvInitialiseNewTask+0x64>
 8021628:	e000      	b.n	802162c <prvInitialiseNewTask+0x94>
			{
				break;
 802162a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802162e:	2200      	movs	r2, #0
 8021630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021634:	e003      	b.n	802163e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8021636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021638:	2200      	movs	r2, #0
 802163a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021640:	2b37      	cmp	r3, #55	; 0x37
 8021642:	d901      	bls.n	8021648 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8021644:	2337      	movs	r3, #55	; 0x37
 8021646:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802164a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802164c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021652:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8021654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021656:	2200      	movs	r2, #0
 8021658:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802165c:	3304      	adds	r3, #4
 802165e:	4618      	mov	r0, r3
 8021660:	f7fe fdc6 	bl	80201f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8021664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021666:	3318      	adds	r3, #24
 8021668:	4618      	mov	r0, r3
 802166a:	f7fe fdc1 	bl	80201f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021672:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021676:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802167c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021682:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8021684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021686:	2200      	movs	r2, #0
 8021688:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 802168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802168c:	2200      	movs	r2, #0
 802168e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021694:	2200      	movs	r2, #0
 8021696:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 802169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802169c:	3358      	adds	r3, #88	; 0x58
 802169e:	224c      	movs	r2, #76	; 0x4c
 80216a0:	2100      	movs	r1, #0
 80216a2:	4618      	mov	r0, r3
 80216a4:	f00b fe68 	bl	802d378 <memset>
 80216a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216aa:	4a0d      	ldr	r2, [pc, #52]	; (80216e0 <prvInitialiseNewTask+0x148>)
 80216ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80216ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216b0:	4a0c      	ldr	r2, [pc, #48]	; (80216e4 <prvInitialiseNewTask+0x14c>)
 80216b2:	661a      	str	r2, [r3, #96]	; 0x60
 80216b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216b6:	4a0c      	ldr	r2, [pc, #48]	; (80216e8 <prvInitialiseNewTask+0x150>)
 80216b8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80216ba:	683a      	ldr	r2, [r7, #0]
 80216bc:	68f9      	ldr	r1, [r7, #12]
 80216be:	69b8      	ldr	r0, [r7, #24]
 80216c0:	f001 faa6 	bl	8022c10 <pxPortInitialiseStack>
 80216c4:	4602      	mov	r2, r0
 80216c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80216ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	d002      	beq.n	80216d6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80216d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80216d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80216d6:	bf00      	nop
 80216d8:	3720      	adds	r7, #32
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}
 80216de:	bf00      	nop
 80216e0:	2000d99c 	.word	0x2000d99c
 80216e4:	2000da04 	.word	0x2000da04
 80216e8:	2000da6c 	.word	0x2000da6c

080216ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80216ec:	b580      	push	{r7, lr}
 80216ee:	b082      	sub	sp, #8
 80216f0:	af00      	add	r7, sp, #0
 80216f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80216f4:	f001 fbb6 	bl	8022e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80216f8:	4b2d      	ldr	r3, [pc, #180]	; (80217b0 <prvAddNewTaskToReadyList+0xc4>)
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	3301      	adds	r3, #1
 80216fe:	4a2c      	ldr	r2, [pc, #176]	; (80217b0 <prvAddNewTaskToReadyList+0xc4>)
 8021700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021702:	4b2c      	ldr	r3, [pc, #176]	; (80217b4 <prvAddNewTaskToReadyList+0xc8>)
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	2b00      	cmp	r3, #0
 8021708:	d109      	bne.n	802171e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802170a:	4a2a      	ldr	r2, [pc, #168]	; (80217b4 <prvAddNewTaskToReadyList+0xc8>)
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021710:	4b27      	ldr	r3, [pc, #156]	; (80217b0 <prvAddNewTaskToReadyList+0xc4>)
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	2b01      	cmp	r3, #1
 8021716:	d110      	bne.n	802173a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021718:	f000 fc44 	bl	8021fa4 <prvInitialiseTaskLists>
 802171c:	e00d      	b.n	802173a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802171e:	4b26      	ldr	r3, [pc, #152]	; (80217b8 <prvAddNewTaskToReadyList+0xcc>)
 8021720:	681b      	ldr	r3, [r3, #0]
 8021722:	2b00      	cmp	r3, #0
 8021724:	d109      	bne.n	802173a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021726:	4b23      	ldr	r3, [pc, #140]	; (80217b4 <prvAddNewTaskToReadyList+0xc8>)
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802172c:	687b      	ldr	r3, [r7, #4]
 802172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021730:	429a      	cmp	r2, r3
 8021732:	d802      	bhi.n	802173a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021734:	4a1f      	ldr	r2, [pc, #124]	; (80217b4 <prvAddNewTaskToReadyList+0xc8>)
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802173a:	4b20      	ldr	r3, [pc, #128]	; (80217bc <prvAddNewTaskToReadyList+0xd0>)
 802173c:	681b      	ldr	r3, [r3, #0]
 802173e:	3301      	adds	r3, #1
 8021740:	4a1e      	ldr	r2, [pc, #120]	; (80217bc <prvAddNewTaskToReadyList+0xd0>)
 8021742:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021744:	4b1d      	ldr	r3, [pc, #116]	; (80217bc <prvAddNewTaskToReadyList+0xd0>)
 8021746:	681a      	ldr	r2, [r3, #0]
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021750:	4b1b      	ldr	r3, [pc, #108]	; (80217c0 <prvAddNewTaskToReadyList+0xd4>)
 8021752:	681b      	ldr	r3, [r3, #0]
 8021754:	429a      	cmp	r2, r3
 8021756:	d903      	bls.n	8021760 <prvAddNewTaskToReadyList+0x74>
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802175c:	4a18      	ldr	r2, [pc, #96]	; (80217c0 <prvAddNewTaskToReadyList+0xd4>)
 802175e:	6013      	str	r3, [r2, #0]
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021764:	4613      	mov	r3, r2
 8021766:	009b      	lsls	r3, r3, #2
 8021768:	4413      	add	r3, r2
 802176a:	009b      	lsls	r3, r3, #2
 802176c:	4a15      	ldr	r2, [pc, #84]	; (80217c4 <prvAddNewTaskToReadyList+0xd8>)
 802176e:	441a      	add	r2, r3
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	3304      	adds	r3, #4
 8021774:	4619      	mov	r1, r3
 8021776:	4610      	mov	r0, r2
 8021778:	f7fe fd47 	bl	802020a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802177c:	f001 fba2 	bl	8022ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021780:	4b0d      	ldr	r3, [pc, #52]	; (80217b8 <prvAddNewTaskToReadyList+0xcc>)
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	2b00      	cmp	r3, #0
 8021786:	d00e      	beq.n	80217a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021788:	4b0a      	ldr	r3, [pc, #40]	; (80217b4 <prvAddNewTaskToReadyList+0xc8>)
 802178a:	681b      	ldr	r3, [r3, #0]
 802178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802178e:	687b      	ldr	r3, [r7, #4]
 8021790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021792:	429a      	cmp	r2, r3
 8021794:	d207      	bcs.n	80217a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021796:	4b0c      	ldr	r3, [pc, #48]	; (80217c8 <prvAddNewTaskToReadyList+0xdc>)
 8021798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802179c:	601a      	str	r2, [r3, #0]
 802179e:	f3bf 8f4f 	dsb	sy
 80217a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80217a6:	bf00      	nop
 80217a8:	3708      	adds	r7, #8
 80217aa:	46bd      	mov	sp, r7
 80217ac:	bd80      	pop	{r7, pc}
 80217ae:	bf00      	nop
 80217b0:	200021f8 	.word	0x200021f8
 80217b4:	20001d24 	.word	0x20001d24
 80217b8:	20002204 	.word	0x20002204
 80217bc:	20002214 	.word	0x20002214
 80217c0:	20002200 	.word	0x20002200
 80217c4:	20001d28 	.word	0x20001d28
 80217c8:	e000ed04 	.word	0xe000ed04

080217cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80217cc:	b580      	push	{r7, lr}
 80217ce:	b084      	sub	sp, #16
 80217d0:	af00      	add	r7, sp, #0
 80217d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80217d4:	2300      	movs	r3, #0
 80217d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80217d8:	687b      	ldr	r3, [r7, #4]
 80217da:	2b00      	cmp	r3, #0
 80217dc:	d017      	beq.n	802180e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80217de:	4b13      	ldr	r3, [pc, #76]	; (802182c <vTaskDelay+0x60>)
 80217e0:	681b      	ldr	r3, [r3, #0]
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	d00a      	beq.n	80217fc <vTaskDelay+0x30>
	__asm volatile
 80217e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217ea:	f383 8811 	msr	BASEPRI, r3
 80217ee:	f3bf 8f6f 	isb	sy
 80217f2:	f3bf 8f4f 	dsb	sy
 80217f6:	60bb      	str	r3, [r7, #8]
}
 80217f8:	bf00      	nop
 80217fa:	e7fe      	b.n	80217fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80217fc:	f000 f88c 	bl	8021918 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021800:	2100      	movs	r1, #0
 8021802:	6878      	ldr	r0, [r7, #4]
 8021804:	f000 fe62 	bl	80224cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021808:	f000 f894 	bl	8021934 <xTaskResumeAll>
 802180c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802180e:	68fb      	ldr	r3, [r7, #12]
 8021810:	2b00      	cmp	r3, #0
 8021812:	d107      	bne.n	8021824 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8021814:	4b06      	ldr	r3, [pc, #24]	; (8021830 <vTaskDelay+0x64>)
 8021816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802181a:	601a      	str	r2, [r3, #0]
 802181c:	f3bf 8f4f 	dsb	sy
 8021820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021824:	bf00      	nop
 8021826:	3710      	adds	r7, #16
 8021828:	46bd      	mov	sp, r7
 802182a:	bd80      	pop	{r7, pc}
 802182c:	20002220 	.word	0x20002220
 8021830:	e000ed04 	.word	0xe000ed04

08021834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021834:	b580      	push	{r7, lr}
 8021836:	b08a      	sub	sp, #40	; 0x28
 8021838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802183a:	2300      	movs	r3, #0
 802183c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802183e:	2300      	movs	r3, #0
 8021840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021842:	463a      	mov	r2, r7
 8021844:	1d39      	adds	r1, r7, #4
 8021846:	f107 0308 	add.w	r3, r7, #8
 802184a:	4618      	mov	r0, r3
 802184c:	f7fe fc7c 	bl	8020148 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021850:	6839      	ldr	r1, [r7, #0]
 8021852:	687b      	ldr	r3, [r7, #4]
 8021854:	68ba      	ldr	r2, [r7, #8]
 8021856:	9202      	str	r2, [sp, #8]
 8021858:	9301      	str	r3, [sp, #4]
 802185a:	2300      	movs	r3, #0
 802185c:	9300      	str	r3, [sp, #0]
 802185e:	2300      	movs	r3, #0
 8021860:	460a      	mov	r2, r1
 8021862:	4925      	ldr	r1, [pc, #148]	; (80218f8 <vTaskStartScheduler+0xc4>)
 8021864:	4825      	ldr	r0, [pc, #148]	; (80218fc <vTaskStartScheduler+0xc8>)
 8021866:	f7ff fdf5 	bl	8021454 <xTaskCreateStatic>
 802186a:	4603      	mov	r3, r0
 802186c:	4a24      	ldr	r2, [pc, #144]	; (8021900 <vTaskStartScheduler+0xcc>)
 802186e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8021870:	4b23      	ldr	r3, [pc, #140]	; (8021900 <vTaskStartScheduler+0xcc>)
 8021872:	681b      	ldr	r3, [r3, #0]
 8021874:	2b00      	cmp	r3, #0
 8021876:	d002      	beq.n	802187e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8021878:	2301      	movs	r3, #1
 802187a:	617b      	str	r3, [r7, #20]
 802187c:	e001      	b.n	8021882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802187e:	2300      	movs	r3, #0
 8021880:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8021882:	697b      	ldr	r3, [r7, #20]
 8021884:	2b01      	cmp	r3, #1
 8021886:	d102      	bne.n	802188e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8021888:	f000 fe74 	bl	8022574 <xTimerCreateTimerTask>
 802188c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802188e:	697b      	ldr	r3, [r7, #20]
 8021890:	2b01      	cmp	r3, #1
 8021892:	d11d      	bne.n	80218d0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8021894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021898:	f383 8811 	msr	BASEPRI, r3
 802189c:	f3bf 8f6f 	isb	sy
 80218a0:	f3bf 8f4f 	dsb	sy
 80218a4:	613b      	str	r3, [r7, #16]
}
 80218a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80218a8:	4b16      	ldr	r3, [pc, #88]	; (8021904 <vTaskStartScheduler+0xd0>)
 80218aa:	681b      	ldr	r3, [r3, #0]
 80218ac:	3358      	adds	r3, #88	; 0x58
 80218ae:	4a16      	ldr	r2, [pc, #88]	; (8021908 <vTaskStartScheduler+0xd4>)
 80218b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80218b2:	4b16      	ldr	r3, [pc, #88]	; (802190c <vTaskStartScheduler+0xd8>)
 80218b4:	f04f 32ff 	mov.w	r2, #4294967295
 80218b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80218ba:	4b15      	ldr	r3, [pc, #84]	; (8021910 <vTaskStartScheduler+0xdc>)
 80218bc:	2201      	movs	r2, #1
 80218be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80218c0:	4b14      	ldr	r3, [pc, #80]	; (8021914 <vTaskStartScheduler+0xe0>)
 80218c2:	2200      	movs	r2, #0
 80218c4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80218c6:	f7ef fbbf 	bl	8011048 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80218ca:	f001 fa29 	bl	8022d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80218ce:	e00e      	b.n	80218ee <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80218d0:	697b      	ldr	r3, [r7, #20]
 80218d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218d6:	d10a      	bne.n	80218ee <vTaskStartScheduler+0xba>
	__asm volatile
 80218d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80218dc:	f383 8811 	msr	BASEPRI, r3
 80218e0:	f3bf 8f6f 	isb	sy
 80218e4:	f3bf 8f4f 	dsb	sy
 80218e8:	60fb      	str	r3, [r7, #12]
}
 80218ea:	bf00      	nop
 80218ec:	e7fe      	b.n	80218ec <vTaskStartScheduler+0xb8>
}
 80218ee:	bf00      	nop
 80218f0:	3718      	adds	r7, #24
 80218f2:	46bd      	mov	sp, r7
 80218f4:	bd80      	pop	{r7, pc}
 80218f6:	bf00      	nop
 80218f8:	08032f08 	.word	0x08032f08
 80218fc:	08021f75 	.word	0x08021f75
 8021900:	2000221c 	.word	0x2000221c
 8021904:	20001d24 	.word	0x20001d24
 8021908:	20000188 	.word	0x20000188
 802190c:	20002218 	.word	0x20002218
 8021910:	20002204 	.word	0x20002204
 8021914:	200021fc 	.word	0x200021fc

08021918 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8021918:	b480      	push	{r7}
 802191a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802191c:	4b04      	ldr	r3, [pc, #16]	; (8021930 <vTaskSuspendAll+0x18>)
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	3301      	adds	r3, #1
 8021922:	4a03      	ldr	r2, [pc, #12]	; (8021930 <vTaskSuspendAll+0x18>)
 8021924:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8021926:	bf00      	nop
 8021928:	46bd      	mov	sp, r7
 802192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802192e:	4770      	bx	lr
 8021930:	20002220 	.word	0x20002220

08021934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8021934:	b580      	push	{r7, lr}
 8021936:	b084      	sub	sp, #16
 8021938:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802193a:	2300      	movs	r3, #0
 802193c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802193e:	2300      	movs	r3, #0
 8021940:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8021942:	4b42      	ldr	r3, [pc, #264]	; (8021a4c <xTaskResumeAll+0x118>)
 8021944:	681b      	ldr	r3, [r3, #0]
 8021946:	2b00      	cmp	r3, #0
 8021948:	d10a      	bne.n	8021960 <xTaskResumeAll+0x2c>
	__asm volatile
 802194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802194e:	f383 8811 	msr	BASEPRI, r3
 8021952:	f3bf 8f6f 	isb	sy
 8021956:	f3bf 8f4f 	dsb	sy
 802195a:	603b      	str	r3, [r7, #0]
}
 802195c:	bf00      	nop
 802195e:	e7fe      	b.n	802195e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8021960:	f001 fa80 	bl	8022e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8021964:	4b39      	ldr	r3, [pc, #228]	; (8021a4c <xTaskResumeAll+0x118>)
 8021966:	681b      	ldr	r3, [r3, #0]
 8021968:	3b01      	subs	r3, #1
 802196a:	4a38      	ldr	r2, [pc, #224]	; (8021a4c <xTaskResumeAll+0x118>)
 802196c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802196e:	4b37      	ldr	r3, [pc, #220]	; (8021a4c <xTaskResumeAll+0x118>)
 8021970:	681b      	ldr	r3, [r3, #0]
 8021972:	2b00      	cmp	r3, #0
 8021974:	d162      	bne.n	8021a3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8021976:	4b36      	ldr	r3, [pc, #216]	; (8021a50 <xTaskResumeAll+0x11c>)
 8021978:	681b      	ldr	r3, [r3, #0]
 802197a:	2b00      	cmp	r3, #0
 802197c:	d05e      	beq.n	8021a3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802197e:	e02f      	b.n	80219e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021980:	4b34      	ldr	r3, [pc, #208]	; (8021a54 <xTaskResumeAll+0x120>)
 8021982:	68db      	ldr	r3, [r3, #12]
 8021984:	68db      	ldr	r3, [r3, #12]
 8021986:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021988:	68fb      	ldr	r3, [r7, #12]
 802198a:	3318      	adds	r3, #24
 802198c:	4618      	mov	r0, r3
 802198e:	f7fe fc99 	bl	80202c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021992:	68fb      	ldr	r3, [r7, #12]
 8021994:	3304      	adds	r3, #4
 8021996:	4618      	mov	r0, r3
 8021998:	f7fe fc94 	bl	80202c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802199c:	68fb      	ldr	r3, [r7, #12]
 802199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80219a0:	4b2d      	ldr	r3, [pc, #180]	; (8021a58 <xTaskResumeAll+0x124>)
 80219a2:	681b      	ldr	r3, [r3, #0]
 80219a4:	429a      	cmp	r2, r3
 80219a6:	d903      	bls.n	80219b0 <xTaskResumeAll+0x7c>
 80219a8:	68fb      	ldr	r3, [r7, #12]
 80219aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219ac:	4a2a      	ldr	r2, [pc, #168]	; (8021a58 <xTaskResumeAll+0x124>)
 80219ae:	6013      	str	r3, [r2, #0]
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80219b4:	4613      	mov	r3, r2
 80219b6:	009b      	lsls	r3, r3, #2
 80219b8:	4413      	add	r3, r2
 80219ba:	009b      	lsls	r3, r3, #2
 80219bc:	4a27      	ldr	r2, [pc, #156]	; (8021a5c <xTaskResumeAll+0x128>)
 80219be:	441a      	add	r2, r3
 80219c0:	68fb      	ldr	r3, [r7, #12]
 80219c2:	3304      	adds	r3, #4
 80219c4:	4619      	mov	r1, r3
 80219c6:	4610      	mov	r0, r2
 80219c8:	f7fe fc1f 	bl	802020a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80219cc:	68fb      	ldr	r3, [r7, #12]
 80219ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80219d0:	4b23      	ldr	r3, [pc, #140]	; (8021a60 <xTaskResumeAll+0x12c>)
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219d6:	429a      	cmp	r2, r3
 80219d8:	d302      	bcc.n	80219e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80219da:	4b22      	ldr	r3, [pc, #136]	; (8021a64 <xTaskResumeAll+0x130>)
 80219dc:	2201      	movs	r2, #1
 80219de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80219e0:	4b1c      	ldr	r3, [pc, #112]	; (8021a54 <xTaskResumeAll+0x120>)
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d1cb      	bne.n	8021980 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80219e8:	68fb      	ldr	r3, [r7, #12]
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	d001      	beq.n	80219f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80219ee:	f000 fbb3 	bl	8022158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80219f2:	4b1d      	ldr	r3, [pc, #116]	; (8021a68 <xTaskResumeAll+0x134>)
 80219f4:	681b      	ldr	r3, [r3, #0]
 80219f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d010      	beq.n	8021a20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80219fe:	f000 f847 	bl	8021a90 <xTaskIncrementTick>
 8021a02:	4603      	mov	r3, r0
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	d002      	beq.n	8021a0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8021a08:	4b16      	ldr	r3, [pc, #88]	; (8021a64 <xTaskResumeAll+0x130>)
 8021a0a:	2201      	movs	r2, #1
 8021a0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	3b01      	subs	r3, #1
 8021a12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d1f1      	bne.n	80219fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8021a1a:	4b13      	ldr	r3, [pc, #76]	; (8021a68 <xTaskResumeAll+0x134>)
 8021a1c:	2200      	movs	r2, #0
 8021a1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8021a20:	4b10      	ldr	r3, [pc, #64]	; (8021a64 <xTaskResumeAll+0x130>)
 8021a22:	681b      	ldr	r3, [r3, #0]
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	d009      	beq.n	8021a3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8021a28:	2301      	movs	r3, #1
 8021a2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8021a2c:	4b0f      	ldr	r3, [pc, #60]	; (8021a6c <xTaskResumeAll+0x138>)
 8021a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021a32:	601a      	str	r2, [r3, #0]
 8021a34:	f3bf 8f4f 	dsb	sy
 8021a38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021a3c:	f001 fa42 	bl	8022ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8021a40:	68bb      	ldr	r3, [r7, #8]
}
 8021a42:	4618      	mov	r0, r3
 8021a44:	3710      	adds	r7, #16
 8021a46:	46bd      	mov	sp, r7
 8021a48:	bd80      	pop	{r7, pc}
 8021a4a:	bf00      	nop
 8021a4c:	20002220 	.word	0x20002220
 8021a50:	200021f8 	.word	0x200021f8
 8021a54:	200021b8 	.word	0x200021b8
 8021a58:	20002200 	.word	0x20002200
 8021a5c:	20001d28 	.word	0x20001d28
 8021a60:	20001d24 	.word	0x20001d24
 8021a64:	2000220c 	.word	0x2000220c
 8021a68:	20002208 	.word	0x20002208
 8021a6c:	e000ed04 	.word	0xe000ed04

08021a70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8021a70:	b480      	push	{r7}
 8021a72:	b083      	sub	sp, #12
 8021a74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8021a76:	4b05      	ldr	r3, [pc, #20]	; (8021a8c <xTaskGetTickCount+0x1c>)
 8021a78:	681b      	ldr	r3, [r3, #0]
 8021a7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8021a7c:	687b      	ldr	r3, [r7, #4]
}
 8021a7e:	4618      	mov	r0, r3
 8021a80:	370c      	adds	r7, #12
 8021a82:	46bd      	mov	sp, r7
 8021a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a88:	4770      	bx	lr
 8021a8a:	bf00      	nop
 8021a8c:	200021fc 	.word	0x200021fc

08021a90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8021a90:	b580      	push	{r7, lr}
 8021a92:	b086      	sub	sp, #24
 8021a94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8021a96:	2300      	movs	r3, #0
 8021a98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021a9a:	4b4f      	ldr	r3, [pc, #316]	; (8021bd8 <xTaskIncrementTick+0x148>)
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	f040 808f 	bne.w	8021bc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8021aa4:	4b4d      	ldr	r3, [pc, #308]	; (8021bdc <xTaskIncrementTick+0x14c>)
 8021aa6:	681b      	ldr	r3, [r3, #0]
 8021aa8:	3301      	adds	r3, #1
 8021aaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8021aac:	4a4b      	ldr	r2, [pc, #300]	; (8021bdc <xTaskIncrementTick+0x14c>)
 8021aae:	693b      	ldr	r3, [r7, #16]
 8021ab0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8021ab2:	693b      	ldr	r3, [r7, #16]
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d120      	bne.n	8021afa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8021ab8:	4b49      	ldr	r3, [pc, #292]	; (8021be0 <xTaskIncrementTick+0x150>)
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	681b      	ldr	r3, [r3, #0]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d00a      	beq.n	8021ad8 <xTaskIncrementTick+0x48>
	__asm volatile
 8021ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ac6:	f383 8811 	msr	BASEPRI, r3
 8021aca:	f3bf 8f6f 	isb	sy
 8021ace:	f3bf 8f4f 	dsb	sy
 8021ad2:	603b      	str	r3, [r7, #0]
}
 8021ad4:	bf00      	nop
 8021ad6:	e7fe      	b.n	8021ad6 <xTaskIncrementTick+0x46>
 8021ad8:	4b41      	ldr	r3, [pc, #260]	; (8021be0 <xTaskIncrementTick+0x150>)
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	60fb      	str	r3, [r7, #12]
 8021ade:	4b41      	ldr	r3, [pc, #260]	; (8021be4 <xTaskIncrementTick+0x154>)
 8021ae0:	681b      	ldr	r3, [r3, #0]
 8021ae2:	4a3f      	ldr	r2, [pc, #252]	; (8021be0 <xTaskIncrementTick+0x150>)
 8021ae4:	6013      	str	r3, [r2, #0]
 8021ae6:	4a3f      	ldr	r2, [pc, #252]	; (8021be4 <xTaskIncrementTick+0x154>)
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	6013      	str	r3, [r2, #0]
 8021aec:	4b3e      	ldr	r3, [pc, #248]	; (8021be8 <xTaskIncrementTick+0x158>)
 8021aee:	681b      	ldr	r3, [r3, #0]
 8021af0:	3301      	adds	r3, #1
 8021af2:	4a3d      	ldr	r2, [pc, #244]	; (8021be8 <xTaskIncrementTick+0x158>)
 8021af4:	6013      	str	r3, [r2, #0]
 8021af6:	f000 fb2f 	bl	8022158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8021afa:	4b3c      	ldr	r3, [pc, #240]	; (8021bec <xTaskIncrementTick+0x15c>)
 8021afc:	681b      	ldr	r3, [r3, #0]
 8021afe:	693a      	ldr	r2, [r7, #16]
 8021b00:	429a      	cmp	r2, r3
 8021b02:	d349      	bcc.n	8021b98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021b04:	4b36      	ldr	r3, [pc, #216]	; (8021be0 <xTaskIncrementTick+0x150>)
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	681b      	ldr	r3, [r3, #0]
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d104      	bne.n	8021b18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021b0e:	4b37      	ldr	r3, [pc, #220]	; (8021bec <xTaskIncrementTick+0x15c>)
 8021b10:	f04f 32ff 	mov.w	r2, #4294967295
 8021b14:	601a      	str	r2, [r3, #0]
					break;
 8021b16:	e03f      	b.n	8021b98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021b18:	4b31      	ldr	r3, [pc, #196]	; (8021be0 <xTaskIncrementTick+0x150>)
 8021b1a:	681b      	ldr	r3, [r3, #0]
 8021b1c:	68db      	ldr	r3, [r3, #12]
 8021b1e:	68db      	ldr	r3, [r3, #12]
 8021b20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8021b22:	68bb      	ldr	r3, [r7, #8]
 8021b24:	685b      	ldr	r3, [r3, #4]
 8021b26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8021b28:	693a      	ldr	r2, [r7, #16]
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	429a      	cmp	r2, r3
 8021b2e:	d203      	bcs.n	8021b38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8021b30:	4a2e      	ldr	r2, [pc, #184]	; (8021bec <xTaskIncrementTick+0x15c>)
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8021b36:	e02f      	b.n	8021b98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021b38:	68bb      	ldr	r3, [r7, #8]
 8021b3a:	3304      	adds	r3, #4
 8021b3c:	4618      	mov	r0, r3
 8021b3e:	f7fe fbc1 	bl	80202c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8021b42:	68bb      	ldr	r3, [r7, #8]
 8021b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b46:	2b00      	cmp	r3, #0
 8021b48:	d004      	beq.n	8021b54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021b4a:	68bb      	ldr	r3, [r7, #8]
 8021b4c:	3318      	adds	r3, #24
 8021b4e:	4618      	mov	r0, r3
 8021b50:	f7fe fbb8 	bl	80202c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8021b54:	68bb      	ldr	r3, [r7, #8]
 8021b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b58:	4b25      	ldr	r3, [pc, #148]	; (8021bf0 <xTaskIncrementTick+0x160>)
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	429a      	cmp	r2, r3
 8021b5e:	d903      	bls.n	8021b68 <xTaskIncrementTick+0xd8>
 8021b60:	68bb      	ldr	r3, [r7, #8]
 8021b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b64:	4a22      	ldr	r2, [pc, #136]	; (8021bf0 <xTaskIncrementTick+0x160>)
 8021b66:	6013      	str	r3, [r2, #0]
 8021b68:	68bb      	ldr	r3, [r7, #8]
 8021b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b6c:	4613      	mov	r3, r2
 8021b6e:	009b      	lsls	r3, r3, #2
 8021b70:	4413      	add	r3, r2
 8021b72:	009b      	lsls	r3, r3, #2
 8021b74:	4a1f      	ldr	r2, [pc, #124]	; (8021bf4 <xTaskIncrementTick+0x164>)
 8021b76:	441a      	add	r2, r3
 8021b78:	68bb      	ldr	r3, [r7, #8]
 8021b7a:	3304      	adds	r3, #4
 8021b7c:	4619      	mov	r1, r3
 8021b7e:	4610      	mov	r0, r2
 8021b80:	f7fe fb43 	bl	802020a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021b84:	68bb      	ldr	r3, [r7, #8]
 8021b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b88:	4b1b      	ldr	r3, [pc, #108]	; (8021bf8 <xTaskIncrementTick+0x168>)
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b8e:	429a      	cmp	r2, r3
 8021b90:	d3b8      	bcc.n	8021b04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8021b92:	2301      	movs	r3, #1
 8021b94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021b96:	e7b5      	b.n	8021b04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8021b98:	4b17      	ldr	r3, [pc, #92]	; (8021bf8 <xTaskIncrementTick+0x168>)
 8021b9a:	681b      	ldr	r3, [r3, #0]
 8021b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b9e:	4915      	ldr	r1, [pc, #84]	; (8021bf4 <xTaskIncrementTick+0x164>)
 8021ba0:	4613      	mov	r3, r2
 8021ba2:	009b      	lsls	r3, r3, #2
 8021ba4:	4413      	add	r3, r2
 8021ba6:	009b      	lsls	r3, r3, #2
 8021ba8:	440b      	add	r3, r1
 8021baa:	681b      	ldr	r3, [r3, #0]
 8021bac:	2b01      	cmp	r3, #1
 8021bae:	d901      	bls.n	8021bb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8021bb0:	2301      	movs	r3, #1
 8021bb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8021bb4:	4b11      	ldr	r3, [pc, #68]	; (8021bfc <xTaskIncrementTick+0x16c>)
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	2b00      	cmp	r3, #0
 8021bba:	d007      	beq.n	8021bcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8021bbc:	2301      	movs	r3, #1
 8021bbe:	617b      	str	r3, [r7, #20]
 8021bc0:	e004      	b.n	8021bcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8021bc2:	4b0f      	ldr	r3, [pc, #60]	; (8021c00 <xTaskIncrementTick+0x170>)
 8021bc4:	681b      	ldr	r3, [r3, #0]
 8021bc6:	3301      	adds	r3, #1
 8021bc8:	4a0d      	ldr	r2, [pc, #52]	; (8021c00 <xTaskIncrementTick+0x170>)
 8021bca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8021bcc:	697b      	ldr	r3, [r7, #20]
}
 8021bce:	4618      	mov	r0, r3
 8021bd0:	3718      	adds	r7, #24
 8021bd2:	46bd      	mov	sp, r7
 8021bd4:	bd80      	pop	{r7, pc}
 8021bd6:	bf00      	nop
 8021bd8:	20002220 	.word	0x20002220
 8021bdc:	200021fc 	.word	0x200021fc
 8021be0:	200021b0 	.word	0x200021b0
 8021be4:	200021b4 	.word	0x200021b4
 8021be8:	20002210 	.word	0x20002210
 8021bec:	20002218 	.word	0x20002218
 8021bf0:	20002200 	.word	0x20002200
 8021bf4:	20001d28 	.word	0x20001d28
 8021bf8:	20001d24 	.word	0x20001d24
 8021bfc:	2000220c 	.word	0x2000220c
 8021c00:	20002208 	.word	0x20002208

08021c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8021c04:	b580      	push	{r7, lr}
 8021c06:	b084      	sub	sp, #16
 8021c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8021c0a:	4b36      	ldr	r3, [pc, #216]	; (8021ce4 <vTaskSwitchContext+0xe0>)
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d003      	beq.n	8021c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8021c12:	4b35      	ldr	r3, [pc, #212]	; (8021ce8 <vTaskSwitchContext+0xe4>)
 8021c14:	2201      	movs	r2, #1
 8021c16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8021c18:	e05f      	b.n	8021cda <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8021c1a:	4b33      	ldr	r3, [pc, #204]	; (8021ce8 <vTaskSwitchContext+0xe4>)
 8021c1c:	2200      	movs	r2, #0
 8021c1e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8021c20:	f7ef fa19 	bl	8011056 <getRunTimeCounterValue>
 8021c24:	4603      	mov	r3, r0
 8021c26:	4a31      	ldr	r2, [pc, #196]	; (8021cec <vTaskSwitchContext+0xe8>)
 8021c28:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8021c2a:	4b30      	ldr	r3, [pc, #192]	; (8021cec <vTaskSwitchContext+0xe8>)
 8021c2c:	681a      	ldr	r2, [r3, #0]
 8021c2e:	4b30      	ldr	r3, [pc, #192]	; (8021cf0 <vTaskSwitchContext+0xec>)
 8021c30:	681b      	ldr	r3, [r3, #0]
 8021c32:	429a      	cmp	r2, r3
 8021c34:	d909      	bls.n	8021c4a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8021c36:	4b2f      	ldr	r3, [pc, #188]	; (8021cf4 <vTaskSwitchContext+0xf0>)
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8021c3c:	4a2b      	ldr	r2, [pc, #172]	; (8021cec <vTaskSwitchContext+0xe8>)
 8021c3e:	6810      	ldr	r0, [r2, #0]
 8021c40:	4a2b      	ldr	r2, [pc, #172]	; (8021cf0 <vTaskSwitchContext+0xec>)
 8021c42:	6812      	ldr	r2, [r2, #0]
 8021c44:	1a82      	subs	r2, r0, r2
 8021c46:	440a      	add	r2, r1
 8021c48:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8021c4a:	4b28      	ldr	r3, [pc, #160]	; (8021cec <vTaskSwitchContext+0xe8>)
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	4a28      	ldr	r2, [pc, #160]	; (8021cf0 <vTaskSwitchContext+0xec>)
 8021c50:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021c52:	4b29      	ldr	r3, [pc, #164]	; (8021cf8 <vTaskSwitchContext+0xf4>)
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	60fb      	str	r3, [r7, #12]
 8021c58:	e010      	b.n	8021c7c <vTaskSwitchContext+0x78>
 8021c5a:	68fb      	ldr	r3, [r7, #12]
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d10a      	bne.n	8021c76 <vTaskSwitchContext+0x72>
	__asm volatile
 8021c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c64:	f383 8811 	msr	BASEPRI, r3
 8021c68:	f3bf 8f6f 	isb	sy
 8021c6c:	f3bf 8f4f 	dsb	sy
 8021c70:	607b      	str	r3, [r7, #4]
}
 8021c72:	bf00      	nop
 8021c74:	e7fe      	b.n	8021c74 <vTaskSwitchContext+0x70>
 8021c76:	68fb      	ldr	r3, [r7, #12]
 8021c78:	3b01      	subs	r3, #1
 8021c7a:	60fb      	str	r3, [r7, #12]
 8021c7c:	491f      	ldr	r1, [pc, #124]	; (8021cfc <vTaskSwitchContext+0xf8>)
 8021c7e:	68fa      	ldr	r2, [r7, #12]
 8021c80:	4613      	mov	r3, r2
 8021c82:	009b      	lsls	r3, r3, #2
 8021c84:	4413      	add	r3, r2
 8021c86:	009b      	lsls	r3, r3, #2
 8021c88:	440b      	add	r3, r1
 8021c8a:	681b      	ldr	r3, [r3, #0]
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d0e4      	beq.n	8021c5a <vTaskSwitchContext+0x56>
 8021c90:	68fa      	ldr	r2, [r7, #12]
 8021c92:	4613      	mov	r3, r2
 8021c94:	009b      	lsls	r3, r3, #2
 8021c96:	4413      	add	r3, r2
 8021c98:	009b      	lsls	r3, r3, #2
 8021c9a:	4a18      	ldr	r2, [pc, #96]	; (8021cfc <vTaskSwitchContext+0xf8>)
 8021c9c:	4413      	add	r3, r2
 8021c9e:	60bb      	str	r3, [r7, #8]
 8021ca0:	68bb      	ldr	r3, [r7, #8]
 8021ca2:	685b      	ldr	r3, [r3, #4]
 8021ca4:	685a      	ldr	r2, [r3, #4]
 8021ca6:	68bb      	ldr	r3, [r7, #8]
 8021ca8:	605a      	str	r2, [r3, #4]
 8021caa:	68bb      	ldr	r3, [r7, #8]
 8021cac:	685a      	ldr	r2, [r3, #4]
 8021cae:	68bb      	ldr	r3, [r7, #8]
 8021cb0:	3308      	adds	r3, #8
 8021cb2:	429a      	cmp	r2, r3
 8021cb4:	d104      	bne.n	8021cc0 <vTaskSwitchContext+0xbc>
 8021cb6:	68bb      	ldr	r3, [r7, #8]
 8021cb8:	685b      	ldr	r3, [r3, #4]
 8021cba:	685a      	ldr	r2, [r3, #4]
 8021cbc:	68bb      	ldr	r3, [r7, #8]
 8021cbe:	605a      	str	r2, [r3, #4]
 8021cc0:	68bb      	ldr	r3, [r7, #8]
 8021cc2:	685b      	ldr	r3, [r3, #4]
 8021cc4:	68db      	ldr	r3, [r3, #12]
 8021cc6:	4a0b      	ldr	r2, [pc, #44]	; (8021cf4 <vTaskSwitchContext+0xf0>)
 8021cc8:	6013      	str	r3, [r2, #0]
 8021cca:	4a0b      	ldr	r2, [pc, #44]	; (8021cf8 <vTaskSwitchContext+0xf4>)
 8021ccc:	68fb      	ldr	r3, [r7, #12]
 8021cce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021cd0:	4b08      	ldr	r3, [pc, #32]	; (8021cf4 <vTaskSwitchContext+0xf0>)
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	3358      	adds	r3, #88	; 0x58
 8021cd6:	4a0a      	ldr	r2, [pc, #40]	; (8021d00 <vTaskSwitchContext+0xfc>)
 8021cd8:	6013      	str	r3, [r2, #0]
}
 8021cda:	bf00      	nop
 8021cdc:	3710      	adds	r7, #16
 8021cde:	46bd      	mov	sp, r7
 8021ce0:	bd80      	pop	{r7, pc}
 8021ce2:	bf00      	nop
 8021ce4:	20002220 	.word	0x20002220
 8021ce8:	2000220c 	.word	0x2000220c
 8021cec:	20002228 	.word	0x20002228
 8021cf0:	20002224 	.word	0x20002224
 8021cf4:	20001d24 	.word	0x20001d24
 8021cf8:	20002200 	.word	0x20002200
 8021cfc:	20001d28 	.word	0x20001d28
 8021d00:	20000188 	.word	0x20000188

08021d04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8021d04:	b580      	push	{r7, lr}
 8021d06:	b084      	sub	sp, #16
 8021d08:	af00      	add	r7, sp, #0
 8021d0a:	6078      	str	r0, [r7, #4]
 8021d0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	d10a      	bne.n	8021d2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8021d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d18:	f383 8811 	msr	BASEPRI, r3
 8021d1c:	f3bf 8f6f 	isb	sy
 8021d20:	f3bf 8f4f 	dsb	sy
 8021d24:	60fb      	str	r3, [r7, #12]
}
 8021d26:	bf00      	nop
 8021d28:	e7fe      	b.n	8021d28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8021d2a:	4b07      	ldr	r3, [pc, #28]	; (8021d48 <vTaskPlaceOnEventList+0x44>)
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	3318      	adds	r3, #24
 8021d30:	4619      	mov	r1, r3
 8021d32:	6878      	ldr	r0, [r7, #4]
 8021d34:	f7fe fa8d 	bl	8020252 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8021d38:	2101      	movs	r1, #1
 8021d3a:	6838      	ldr	r0, [r7, #0]
 8021d3c:	f000 fbc6 	bl	80224cc <prvAddCurrentTaskToDelayedList>
}
 8021d40:	bf00      	nop
 8021d42:	3710      	adds	r7, #16
 8021d44:	46bd      	mov	sp, r7
 8021d46:	bd80      	pop	{r7, pc}
 8021d48:	20001d24 	.word	0x20001d24

08021d4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021d4c:	b580      	push	{r7, lr}
 8021d4e:	b086      	sub	sp, #24
 8021d50:	af00      	add	r7, sp, #0
 8021d52:	60f8      	str	r0, [r7, #12]
 8021d54:	60b9      	str	r1, [r7, #8]
 8021d56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8021d58:	68fb      	ldr	r3, [r7, #12]
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d10a      	bne.n	8021d74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8021d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d62:	f383 8811 	msr	BASEPRI, r3
 8021d66:	f3bf 8f6f 	isb	sy
 8021d6a:	f3bf 8f4f 	dsb	sy
 8021d6e:	617b      	str	r3, [r7, #20]
}
 8021d70:	bf00      	nop
 8021d72:	e7fe      	b.n	8021d72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8021d74:	4b0a      	ldr	r3, [pc, #40]	; (8021da0 <vTaskPlaceOnEventListRestricted+0x54>)
 8021d76:	681b      	ldr	r3, [r3, #0]
 8021d78:	3318      	adds	r3, #24
 8021d7a:	4619      	mov	r1, r3
 8021d7c:	68f8      	ldr	r0, [r7, #12]
 8021d7e:	f7fe fa44 	bl	802020a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	d002      	beq.n	8021d8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8021d88:	f04f 33ff 	mov.w	r3, #4294967295
 8021d8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8021d8e:	6879      	ldr	r1, [r7, #4]
 8021d90:	68b8      	ldr	r0, [r7, #8]
 8021d92:	f000 fb9b 	bl	80224cc <prvAddCurrentTaskToDelayedList>
	}
 8021d96:	bf00      	nop
 8021d98:	3718      	adds	r7, #24
 8021d9a:	46bd      	mov	sp, r7
 8021d9c:	bd80      	pop	{r7, pc}
 8021d9e:	bf00      	nop
 8021da0:	20001d24 	.word	0x20001d24

08021da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8021da4:	b580      	push	{r7, lr}
 8021da6:	b086      	sub	sp, #24
 8021da8:	af00      	add	r7, sp, #0
 8021daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	68db      	ldr	r3, [r3, #12]
 8021db0:	68db      	ldr	r3, [r3, #12]
 8021db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8021db4:	693b      	ldr	r3, [r7, #16]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d10a      	bne.n	8021dd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8021dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021dbe:	f383 8811 	msr	BASEPRI, r3
 8021dc2:	f3bf 8f6f 	isb	sy
 8021dc6:	f3bf 8f4f 	dsb	sy
 8021dca:	60fb      	str	r3, [r7, #12]
}
 8021dcc:	bf00      	nop
 8021dce:	e7fe      	b.n	8021dce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8021dd0:	693b      	ldr	r3, [r7, #16]
 8021dd2:	3318      	adds	r3, #24
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	f7fe fa75 	bl	80202c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021dda:	4b1e      	ldr	r3, [pc, #120]	; (8021e54 <xTaskRemoveFromEventList+0xb0>)
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	d11d      	bne.n	8021e1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8021de2:	693b      	ldr	r3, [r7, #16]
 8021de4:	3304      	adds	r3, #4
 8021de6:	4618      	mov	r0, r3
 8021de8:	f7fe fa6c 	bl	80202c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8021dec:	693b      	ldr	r3, [r7, #16]
 8021dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021df0:	4b19      	ldr	r3, [pc, #100]	; (8021e58 <xTaskRemoveFromEventList+0xb4>)
 8021df2:	681b      	ldr	r3, [r3, #0]
 8021df4:	429a      	cmp	r2, r3
 8021df6:	d903      	bls.n	8021e00 <xTaskRemoveFromEventList+0x5c>
 8021df8:	693b      	ldr	r3, [r7, #16]
 8021dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dfc:	4a16      	ldr	r2, [pc, #88]	; (8021e58 <xTaskRemoveFromEventList+0xb4>)
 8021dfe:	6013      	str	r3, [r2, #0]
 8021e00:	693b      	ldr	r3, [r7, #16]
 8021e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e04:	4613      	mov	r3, r2
 8021e06:	009b      	lsls	r3, r3, #2
 8021e08:	4413      	add	r3, r2
 8021e0a:	009b      	lsls	r3, r3, #2
 8021e0c:	4a13      	ldr	r2, [pc, #76]	; (8021e5c <xTaskRemoveFromEventList+0xb8>)
 8021e0e:	441a      	add	r2, r3
 8021e10:	693b      	ldr	r3, [r7, #16]
 8021e12:	3304      	adds	r3, #4
 8021e14:	4619      	mov	r1, r3
 8021e16:	4610      	mov	r0, r2
 8021e18:	f7fe f9f7 	bl	802020a <vListInsertEnd>
 8021e1c:	e005      	b.n	8021e2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8021e1e:	693b      	ldr	r3, [r7, #16]
 8021e20:	3318      	adds	r3, #24
 8021e22:	4619      	mov	r1, r3
 8021e24:	480e      	ldr	r0, [pc, #56]	; (8021e60 <xTaskRemoveFromEventList+0xbc>)
 8021e26:	f7fe f9f0 	bl	802020a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8021e2a:	693b      	ldr	r3, [r7, #16]
 8021e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e2e:	4b0d      	ldr	r3, [pc, #52]	; (8021e64 <xTaskRemoveFromEventList+0xc0>)
 8021e30:	681b      	ldr	r3, [r3, #0]
 8021e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e34:	429a      	cmp	r2, r3
 8021e36:	d905      	bls.n	8021e44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8021e38:	2301      	movs	r3, #1
 8021e3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8021e3c:	4b0a      	ldr	r3, [pc, #40]	; (8021e68 <xTaskRemoveFromEventList+0xc4>)
 8021e3e:	2201      	movs	r2, #1
 8021e40:	601a      	str	r2, [r3, #0]
 8021e42:	e001      	b.n	8021e48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8021e44:	2300      	movs	r3, #0
 8021e46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8021e48:	697b      	ldr	r3, [r7, #20]
}
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	3718      	adds	r7, #24
 8021e4e:	46bd      	mov	sp, r7
 8021e50:	bd80      	pop	{r7, pc}
 8021e52:	bf00      	nop
 8021e54:	20002220 	.word	0x20002220
 8021e58:	20002200 	.word	0x20002200
 8021e5c:	20001d28 	.word	0x20001d28
 8021e60:	200021b8 	.word	0x200021b8
 8021e64:	20001d24 	.word	0x20001d24
 8021e68:	2000220c 	.word	0x2000220c

08021e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8021e6c:	b480      	push	{r7}
 8021e6e:	b083      	sub	sp, #12
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8021e74:	4b06      	ldr	r3, [pc, #24]	; (8021e90 <vTaskInternalSetTimeOutState+0x24>)
 8021e76:	681a      	ldr	r2, [r3, #0]
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8021e7c:	4b05      	ldr	r3, [pc, #20]	; (8021e94 <vTaskInternalSetTimeOutState+0x28>)
 8021e7e:	681a      	ldr	r2, [r3, #0]
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	605a      	str	r2, [r3, #4]
}
 8021e84:	bf00      	nop
 8021e86:	370c      	adds	r7, #12
 8021e88:	46bd      	mov	sp, r7
 8021e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e8e:	4770      	bx	lr
 8021e90:	20002210 	.word	0x20002210
 8021e94:	200021fc 	.word	0x200021fc

08021e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8021e98:	b580      	push	{r7, lr}
 8021e9a:	b088      	sub	sp, #32
 8021e9c:	af00      	add	r7, sp, #0
 8021e9e:	6078      	str	r0, [r7, #4]
 8021ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d10a      	bne.n	8021ebe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8021ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021eac:	f383 8811 	msr	BASEPRI, r3
 8021eb0:	f3bf 8f6f 	isb	sy
 8021eb4:	f3bf 8f4f 	dsb	sy
 8021eb8:	613b      	str	r3, [r7, #16]
}
 8021eba:	bf00      	nop
 8021ebc:	e7fe      	b.n	8021ebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8021ebe:	683b      	ldr	r3, [r7, #0]
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	d10a      	bne.n	8021eda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8021ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ec8:	f383 8811 	msr	BASEPRI, r3
 8021ecc:	f3bf 8f6f 	isb	sy
 8021ed0:	f3bf 8f4f 	dsb	sy
 8021ed4:	60fb      	str	r3, [r7, #12]
}
 8021ed6:	bf00      	nop
 8021ed8:	e7fe      	b.n	8021ed8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8021eda:	f000 ffc3 	bl	8022e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8021ede:	4b1d      	ldr	r3, [pc, #116]	; (8021f54 <xTaskCheckForTimeOut+0xbc>)
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	685b      	ldr	r3, [r3, #4]
 8021ee8:	69ba      	ldr	r2, [r7, #24]
 8021eea:	1ad3      	subs	r3, r2, r3
 8021eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8021eee:	683b      	ldr	r3, [r7, #0]
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021ef6:	d102      	bne.n	8021efe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8021ef8:	2300      	movs	r3, #0
 8021efa:	61fb      	str	r3, [r7, #28]
 8021efc:	e023      	b.n	8021f46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	681a      	ldr	r2, [r3, #0]
 8021f02:	4b15      	ldr	r3, [pc, #84]	; (8021f58 <xTaskCheckForTimeOut+0xc0>)
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	429a      	cmp	r2, r3
 8021f08:	d007      	beq.n	8021f1a <xTaskCheckForTimeOut+0x82>
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	685b      	ldr	r3, [r3, #4]
 8021f0e:	69ba      	ldr	r2, [r7, #24]
 8021f10:	429a      	cmp	r2, r3
 8021f12:	d302      	bcc.n	8021f1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8021f14:	2301      	movs	r3, #1
 8021f16:	61fb      	str	r3, [r7, #28]
 8021f18:	e015      	b.n	8021f46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8021f1a:	683b      	ldr	r3, [r7, #0]
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	697a      	ldr	r2, [r7, #20]
 8021f20:	429a      	cmp	r2, r3
 8021f22:	d20b      	bcs.n	8021f3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8021f24:	683b      	ldr	r3, [r7, #0]
 8021f26:	681a      	ldr	r2, [r3, #0]
 8021f28:	697b      	ldr	r3, [r7, #20]
 8021f2a:	1ad2      	subs	r2, r2, r3
 8021f2c:	683b      	ldr	r3, [r7, #0]
 8021f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8021f30:	6878      	ldr	r0, [r7, #4]
 8021f32:	f7ff ff9b 	bl	8021e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8021f36:	2300      	movs	r3, #0
 8021f38:	61fb      	str	r3, [r7, #28]
 8021f3a:	e004      	b.n	8021f46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8021f3c:	683b      	ldr	r3, [r7, #0]
 8021f3e:	2200      	movs	r2, #0
 8021f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8021f42:	2301      	movs	r3, #1
 8021f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8021f46:	f000 ffbd 	bl	8022ec4 <vPortExitCritical>

	return xReturn;
 8021f4a:	69fb      	ldr	r3, [r7, #28]
}
 8021f4c:	4618      	mov	r0, r3
 8021f4e:	3720      	adds	r7, #32
 8021f50:	46bd      	mov	sp, r7
 8021f52:	bd80      	pop	{r7, pc}
 8021f54:	200021fc 	.word	0x200021fc
 8021f58:	20002210 	.word	0x20002210

08021f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8021f5c:	b480      	push	{r7}
 8021f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8021f60:	4b03      	ldr	r3, [pc, #12]	; (8021f70 <vTaskMissedYield+0x14>)
 8021f62:	2201      	movs	r2, #1
 8021f64:	601a      	str	r2, [r3, #0]
}
 8021f66:	bf00      	nop
 8021f68:	46bd      	mov	sp, r7
 8021f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f6e:	4770      	bx	lr
 8021f70:	2000220c 	.word	0x2000220c

08021f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8021f74:	b580      	push	{r7, lr}
 8021f76:	b082      	sub	sp, #8
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8021f7c:	f000 f852 	bl	8022024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8021f80:	4b06      	ldr	r3, [pc, #24]	; (8021f9c <prvIdleTask+0x28>)
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	2b01      	cmp	r3, #1
 8021f86:	d9f9      	bls.n	8021f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8021f88:	4b05      	ldr	r3, [pc, #20]	; (8021fa0 <prvIdleTask+0x2c>)
 8021f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021f8e:	601a      	str	r2, [r3, #0]
 8021f90:	f3bf 8f4f 	dsb	sy
 8021f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8021f98:	e7f0      	b.n	8021f7c <prvIdleTask+0x8>
 8021f9a:	bf00      	nop
 8021f9c:	20001d28 	.word	0x20001d28
 8021fa0:	e000ed04 	.word	0xe000ed04

08021fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8021fa4:	b580      	push	{r7, lr}
 8021fa6:	b082      	sub	sp, #8
 8021fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8021faa:	2300      	movs	r3, #0
 8021fac:	607b      	str	r3, [r7, #4]
 8021fae:	e00c      	b.n	8021fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8021fb0:	687a      	ldr	r2, [r7, #4]
 8021fb2:	4613      	mov	r3, r2
 8021fb4:	009b      	lsls	r3, r3, #2
 8021fb6:	4413      	add	r3, r2
 8021fb8:	009b      	lsls	r3, r3, #2
 8021fba:	4a12      	ldr	r2, [pc, #72]	; (8022004 <prvInitialiseTaskLists+0x60>)
 8021fbc:	4413      	add	r3, r2
 8021fbe:	4618      	mov	r0, r3
 8021fc0:	f7fe f8f6 	bl	80201b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	3301      	adds	r3, #1
 8021fc8:	607b      	str	r3, [r7, #4]
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	2b37      	cmp	r3, #55	; 0x37
 8021fce:	d9ef      	bls.n	8021fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8021fd0:	480d      	ldr	r0, [pc, #52]	; (8022008 <prvInitialiseTaskLists+0x64>)
 8021fd2:	f7fe f8ed 	bl	80201b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8021fd6:	480d      	ldr	r0, [pc, #52]	; (802200c <prvInitialiseTaskLists+0x68>)
 8021fd8:	f7fe f8ea 	bl	80201b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8021fdc:	480c      	ldr	r0, [pc, #48]	; (8022010 <prvInitialiseTaskLists+0x6c>)
 8021fde:	f7fe f8e7 	bl	80201b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8021fe2:	480c      	ldr	r0, [pc, #48]	; (8022014 <prvInitialiseTaskLists+0x70>)
 8021fe4:	f7fe f8e4 	bl	80201b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8021fe8:	480b      	ldr	r0, [pc, #44]	; (8022018 <prvInitialiseTaskLists+0x74>)
 8021fea:	f7fe f8e1 	bl	80201b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8021fee:	4b0b      	ldr	r3, [pc, #44]	; (802201c <prvInitialiseTaskLists+0x78>)
 8021ff0:	4a05      	ldr	r2, [pc, #20]	; (8022008 <prvInitialiseTaskLists+0x64>)
 8021ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8021ff4:	4b0a      	ldr	r3, [pc, #40]	; (8022020 <prvInitialiseTaskLists+0x7c>)
 8021ff6:	4a05      	ldr	r2, [pc, #20]	; (802200c <prvInitialiseTaskLists+0x68>)
 8021ff8:	601a      	str	r2, [r3, #0]
}
 8021ffa:	bf00      	nop
 8021ffc:	3708      	adds	r7, #8
 8021ffe:	46bd      	mov	sp, r7
 8022000:	bd80      	pop	{r7, pc}
 8022002:	bf00      	nop
 8022004:	20001d28 	.word	0x20001d28
 8022008:	20002188 	.word	0x20002188
 802200c:	2000219c 	.word	0x2000219c
 8022010:	200021b8 	.word	0x200021b8
 8022014:	200021cc 	.word	0x200021cc
 8022018:	200021e4 	.word	0x200021e4
 802201c:	200021b0 	.word	0x200021b0
 8022020:	200021b4 	.word	0x200021b4

08022024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8022024:	b580      	push	{r7, lr}
 8022026:	b082      	sub	sp, #8
 8022028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802202a:	e019      	b.n	8022060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802202c:	f000 ff1a 	bl	8022e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022030:	4b10      	ldr	r3, [pc, #64]	; (8022074 <prvCheckTasksWaitingTermination+0x50>)
 8022032:	68db      	ldr	r3, [r3, #12]
 8022034:	68db      	ldr	r3, [r3, #12]
 8022036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022038:	687b      	ldr	r3, [r7, #4]
 802203a:	3304      	adds	r3, #4
 802203c:	4618      	mov	r0, r3
 802203e:	f7fe f941 	bl	80202c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8022042:	4b0d      	ldr	r3, [pc, #52]	; (8022078 <prvCheckTasksWaitingTermination+0x54>)
 8022044:	681b      	ldr	r3, [r3, #0]
 8022046:	3b01      	subs	r3, #1
 8022048:	4a0b      	ldr	r2, [pc, #44]	; (8022078 <prvCheckTasksWaitingTermination+0x54>)
 802204a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802204c:	4b0b      	ldr	r3, [pc, #44]	; (802207c <prvCheckTasksWaitingTermination+0x58>)
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	3b01      	subs	r3, #1
 8022052:	4a0a      	ldr	r2, [pc, #40]	; (802207c <prvCheckTasksWaitingTermination+0x58>)
 8022054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8022056:	f000 ff35 	bl	8022ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802205a:	6878      	ldr	r0, [r7, #4]
 802205c:	f000 f848 	bl	80220f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022060:	4b06      	ldr	r3, [pc, #24]	; (802207c <prvCheckTasksWaitingTermination+0x58>)
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	2b00      	cmp	r3, #0
 8022066:	d1e1      	bne.n	802202c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8022068:	bf00      	nop
 802206a:	bf00      	nop
 802206c:	3708      	adds	r7, #8
 802206e:	46bd      	mov	sp, r7
 8022070:	bd80      	pop	{r7, pc}
 8022072:	bf00      	nop
 8022074:	200021cc 	.word	0x200021cc
 8022078:	200021f8 	.word	0x200021f8
 802207c:	200021e0 	.word	0x200021e0

08022080 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8022080:	b480      	push	{r7}
 8022082:	b085      	sub	sp, #20
 8022084:	af00      	add	r7, sp, #0
 8022086:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8022088:	2300      	movs	r3, #0
 802208a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802208c:	e005      	b.n	802209a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	3301      	adds	r3, #1
 8022092:	607b      	str	r3, [r7, #4]
			ulCount++;
 8022094:	68fb      	ldr	r3, [r7, #12]
 8022096:	3301      	adds	r3, #1
 8022098:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802209a:	687b      	ldr	r3, [r7, #4]
 802209c:	781b      	ldrb	r3, [r3, #0]
 802209e:	2ba5      	cmp	r3, #165	; 0xa5
 80220a0:	d0f5      	beq.n	802208e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80220a2:	68fb      	ldr	r3, [r7, #12]
 80220a4:	089b      	lsrs	r3, r3, #2
 80220a6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	b29b      	uxth	r3, r3
	}
 80220ac:	4618      	mov	r0, r3
 80220ae:	3714      	adds	r7, #20
 80220b0:	46bd      	mov	sp, r7
 80220b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b6:	4770      	bx	lr

080220b8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80220b8:	b580      	push	{r7, lr}
 80220ba:	b086      	sub	sp, #24
 80220bc:	af00      	add	r7, sp, #0
 80220be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d102      	bne.n	80220cc <uxTaskGetStackHighWaterMark+0x14>
 80220c6:	4b09      	ldr	r3, [pc, #36]	; (80220ec <uxTaskGetStackHighWaterMark+0x34>)
 80220c8:	681b      	ldr	r3, [r3, #0]
 80220ca:	e000      	b.n	80220ce <uxTaskGetStackHighWaterMark+0x16>
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80220d0:	697b      	ldr	r3, [r7, #20]
 80220d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80220d4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80220d6:	6938      	ldr	r0, [r7, #16]
 80220d8:	f7ff ffd2 	bl	8022080 <prvTaskCheckFreeStackSpace>
 80220dc:	4603      	mov	r3, r0
 80220de:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80220e0:	68fb      	ldr	r3, [r7, #12]
	}
 80220e2:	4618      	mov	r0, r3
 80220e4:	3718      	adds	r7, #24
 80220e6:	46bd      	mov	sp, r7
 80220e8:	bd80      	pop	{r7, pc}
 80220ea:	bf00      	nop
 80220ec:	20001d24 	.word	0x20001d24

080220f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b084      	sub	sp, #16
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	3358      	adds	r3, #88	; 0x58
 80220fc:	4618      	mov	r0, r3
 80220fe:	f00b fa3f 	bl	802d580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022108:	2b00      	cmp	r3, #0
 802210a:	d108      	bne.n	802211e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022110:	4618      	mov	r0, r3
 8022112:	f001 f80f 	bl	8023134 <vPortFree>
				vPortFree( pxTCB );
 8022116:	6878      	ldr	r0, [r7, #4]
 8022118:	f001 f80c 	bl	8023134 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802211c:	e018      	b.n	8022150 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022124:	2b01      	cmp	r3, #1
 8022126:	d103      	bne.n	8022130 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022128:	6878      	ldr	r0, [r7, #4]
 802212a:	f001 f803 	bl	8023134 <vPortFree>
	}
 802212e:	e00f      	b.n	8022150 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022136:	2b02      	cmp	r3, #2
 8022138:	d00a      	beq.n	8022150 <prvDeleteTCB+0x60>
	__asm volatile
 802213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802213e:	f383 8811 	msr	BASEPRI, r3
 8022142:	f3bf 8f6f 	isb	sy
 8022146:	f3bf 8f4f 	dsb	sy
 802214a:	60fb      	str	r3, [r7, #12]
}
 802214c:	bf00      	nop
 802214e:	e7fe      	b.n	802214e <prvDeleteTCB+0x5e>
	}
 8022150:	bf00      	nop
 8022152:	3710      	adds	r7, #16
 8022154:	46bd      	mov	sp, r7
 8022156:	bd80      	pop	{r7, pc}

08022158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8022158:	b480      	push	{r7}
 802215a:	b083      	sub	sp, #12
 802215c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802215e:	4b0c      	ldr	r3, [pc, #48]	; (8022190 <prvResetNextTaskUnblockTime+0x38>)
 8022160:	681b      	ldr	r3, [r3, #0]
 8022162:	681b      	ldr	r3, [r3, #0]
 8022164:	2b00      	cmp	r3, #0
 8022166:	d104      	bne.n	8022172 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8022168:	4b0a      	ldr	r3, [pc, #40]	; (8022194 <prvResetNextTaskUnblockTime+0x3c>)
 802216a:	f04f 32ff 	mov.w	r2, #4294967295
 802216e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8022170:	e008      	b.n	8022184 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022172:	4b07      	ldr	r3, [pc, #28]	; (8022190 <prvResetNextTaskUnblockTime+0x38>)
 8022174:	681b      	ldr	r3, [r3, #0]
 8022176:	68db      	ldr	r3, [r3, #12]
 8022178:	68db      	ldr	r3, [r3, #12]
 802217a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	685b      	ldr	r3, [r3, #4]
 8022180:	4a04      	ldr	r2, [pc, #16]	; (8022194 <prvResetNextTaskUnblockTime+0x3c>)
 8022182:	6013      	str	r3, [r2, #0]
}
 8022184:	bf00      	nop
 8022186:	370c      	adds	r7, #12
 8022188:	46bd      	mov	sp, r7
 802218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802218e:	4770      	bx	lr
 8022190:	200021b0 	.word	0x200021b0
 8022194:	20002218 	.word	0x20002218

08022198 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8022198:	b480      	push	{r7}
 802219a:	b083      	sub	sp, #12
 802219c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 802219e:	4b05      	ldr	r3, [pc, #20]	; (80221b4 <xTaskGetCurrentTaskHandle+0x1c>)
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80221a4:	687b      	ldr	r3, [r7, #4]
	}
 80221a6:	4618      	mov	r0, r3
 80221a8:	370c      	adds	r7, #12
 80221aa:	46bd      	mov	sp, r7
 80221ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221b0:	4770      	bx	lr
 80221b2:	bf00      	nop
 80221b4:	20001d24 	.word	0x20001d24

080221b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80221b8:	b480      	push	{r7}
 80221ba:	b083      	sub	sp, #12
 80221bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80221be:	4b0b      	ldr	r3, [pc, #44]	; (80221ec <xTaskGetSchedulerState+0x34>)
 80221c0:	681b      	ldr	r3, [r3, #0]
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	d102      	bne.n	80221cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80221c6:	2301      	movs	r3, #1
 80221c8:	607b      	str	r3, [r7, #4]
 80221ca:	e008      	b.n	80221de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80221cc:	4b08      	ldr	r3, [pc, #32]	; (80221f0 <xTaskGetSchedulerState+0x38>)
 80221ce:	681b      	ldr	r3, [r3, #0]
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d102      	bne.n	80221da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80221d4:	2302      	movs	r3, #2
 80221d6:	607b      	str	r3, [r7, #4]
 80221d8:	e001      	b.n	80221de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80221da:	2300      	movs	r3, #0
 80221dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80221de:	687b      	ldr	r3, [r7, #4]
	}
 80221e0:	4618      	mov	r0, r3
 80221e2:	370c      	adds	r7, #12
 80221e4:	46bd      	mov	sp, r7
 80221e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ea:	4770      	bx	lr
 80221ec:	20002204 	.word	0x20002204
 80221f0:	20002220 	.word	0x20002220

080221f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80221f4:	b580      	push	{r7, lr}
 80221f6:	b084      	sub	sp, #16
 80221f8:	af00      	add	r7, sp, #0
 80221fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8022200:	2300      	movs	r3, #0
 8022202:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	2b00      	cmp	r3, #0
 8022208:	d051      	beq.n	80222ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 802220a:	68bb      	ldr	r3, [r7, #8]
 802220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802220e:	4b2a      	ldr	r3, [pc, #168]	; (80222b8 <xTaskPriorityInherit+0xc4>)
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022214:	429a      	cmp	r2, r3
 8022216:	d241      	bcs.n	802229c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022218:	68bb      	ldr	r3, [r7, #8]
 802221a:	699b      	ldr	r3, [r3, #24]
 802221c:	2b00      	cmp	r3, #0
 802221e:	db06      	blt.n	802222e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022220:	4b25      	ldr	r3, [pc, #148]	; (80222b8 <xTaskPriorityInherit+0xc4>)
 8022222:	681b      	ldr	r3, [r3, #0]
 8022224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022226:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802222a:	68bb      	ldr	r3, [r7, #8]
 802222c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 802222e:	68bb      	ldr	r3, [r7, #8]
 8022230:	6959      	ldr	r1, [r3, #20]
 8022232:	68bb      	ldr	r3, [r7, #8]
 8022234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022236:	4613      	mov	r3, r2
 8022238:	009b      	lsls	r3, r3, #2
 802223a:	4413      	add	r3, r2
 802223c:	009b      	lsls	r3, r3, #2
 802223e:	4a1f      	ldr	r2, [pc, #124]	; (80222bc <xTaskPriorityInherit+0xc8>)
 8022240:	4413      	add	r3, r2
 8022242:	4299      	cmp	r1, r3
 8022244:	d122      	bne.n	802228c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022246:	68bb      	ldr	r3, [r7, #8]
 8022248:	3304      	adds	r3, #4
 802224a:	4618      	mov	r0, r3
 802224c:	f7fe f83a 	bl	80202c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022250:	4b19      	ldr	r3, [pc, #100]	; (80222b8 <xTaskPriorityInherit+0xc4>)
 8022252:	681b      	ldr	r3, [r3, #0]
 8022254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022256:	68bb      	ldr	r3, [r7, #8]
 8022258:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 802225a:	68bb      	ldr	r3, [r7, #8]
 802225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802225e:	4b18      	ldr	r3, [pc, #96]	; (80222c0 <xTaskPriorityInherit+0xcc>)
 8022260:	681b      	ldr	r3, [r3, #0]
 8022262:	429a      	cmp	r2, r3
 8022264:	d903      	bls.n	802226e <xTaskPriorityInherit+0x7a>
 8022266:	68bb      	ldr	r3, [r7, #8]
 8022268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802226a:	4a15      	ldr	r2, [pc, #84]	; (80222c0 <xTaskPriorityInherit+0xcc>)
 802226c:	6013      	str	r3, [r2, #0]
 802226e:	68bb      	ldr	r3, [r7, #8]
 8022270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022272:	4613      	mov	r3, r2
 8022274:	009b      	lsls	r3, r3, #2
 8022276:	4413      	add	r3, r2
 8022278:	009b      	lsls	r3, r3, #2
 802227a:	4a10      	ldr	r2, [pc, #64]	; (80222bc <xTaskPriorityInherit+0xc8>)
 802227c:	441a      	add	r2, r3
 802227e:	68bb      	ldr	r3, [r7, #8]
 8022280:	3304      	adds	r3, #4
 8022282:	4619      	mov	r1, r3
 8022284:	4610      	mov	r0, r2
 8022286:	f7fd ffc0 	bl	802020a <vListInsertEnd>
 802228a:	e004      	b.n	8022296 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 802228c:	4b0a      	ldr	r3, [pc, #40]	; (80222b8 <xTaskPriorityInherit+0xc4>)
 802228e:	681b      	ldr	r3, [r3, #0]
 8022290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022292:	68bb      	ldr	r3, [r7, #8]
 8022294:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8022296:	2301      	movs	r3, #1
 8022298:	60fb      	str	r3, [r7, #12]
 802229a:	e008      	b.n	80222ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 802229c:	68bb      	ldr	r3, [r7, #8]
 802229e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80222a0:	4b05      	ldr	r3, [pc, #20]	; (80222b8 <xTaskPriorityInherit+0xc4>)
 80222a2:	681b      	ldr	r3, [r3, #0]
 80222a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80222a6:	429a      	cmp	r2, r3
 80222a8:	d201      	bcs.n	80222ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80222aa:	2301      	movs	r3, #1
 80222ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80222ae:	68fb      	ldr	r3, [r7, #12]
	}
 80222b0:	4618      	mov	r0, r3
 80222b2:	3710      	adds	r7, #16
 80222b4:	46bd      	mov	sp, r7
 80222b6:	bd80      	pop	{r7, pc}
 80222b8:	20001d24 	.word	0x20001d24
 80222bc:	20001d28 	.word	0x20001d28
 80222c0:	20002200 	.word	0x20002200

080222c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80222c4:	b580      	push	{r7, lr}
 80222c6:	b086      	sub	sp, #24
 80222c8:	af00      	add	r7, sp, #0
 80222ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80222cc:	687b      	ldr	r3, [r7, #4]
 80222ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80222d0:	2300      	movs	r3, #0
 80222d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d056      	beq.n	8022388 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80222da:	4b2e      	ldr	r3, [pc, #184]	; (8022394 <xTaskPriorityDisinherit+0xd0>)
 80222dc:	681b      	ldr	r3, [r3, #0]
 80222de:	693a      	ldr	r2, [r7, #16]
 80222e0:	429a      	cmp	r2, r3
 80222e2:	d00a      	beq.n	80222fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80222e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80222e8:	f383 8811 	msr	BASEPRI, r3
 80222ec:	f3bf 8f6f 	isb	sy
 80222f0:	f3bf 8f4f 	dsb	sy
 80222f4:	60fb      	str	r3, [r7, #12]
}
 80222f6:	bf00      	nop
 80222f8:	e7fe      	b.n	80222f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80222fa:	693b      	ldr	r3, [r7, #16]
 80222fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d10a      	bne.n	8022318 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8022302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022306:	f383 8811 	msr	BASEPRI, r3
 802230a:	f3bf 8f6f 	isb	sy
 802230e:	f3bf 8f4f 	dsb	sy
 8022312:	60bb      	str	r3, [r7, #8]
}
 8022314:	bf00      	nop
 8022316:	e7fe      	b.n	8022316 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8022318:	693b      	ldr	r3, [r7, #16]
 802231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802231c:	1e5a      	subs	r2, r3, #1
 802231e:	693b      	ldr	r3, [r7, #16]
 8022320:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8022322:	693b      	ldr	r3, [r7, #16]
 8022324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022326:	693b      	ldr	r3, [r7, #16]
 8022328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802232a:	429a      	cmp	r2, r3
 802232c:	d02c      	beq.n	8022388 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802232e:	693b      	ldr	r3, [r7, #16]
 8022330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022332:	2b00      	cmp	r3, #0
 8022334:	d128      	bne.n	8022388 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022336:	693b      	ldr	r3, [r7, #16]
 8022338:	3304      	adds	r3, #4
 802233a:	4618      	mov	r0, r3
 802233c:	f7fd ffc2 	bl	80202c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8022340:	693b      	ldr	r3, [r7, #16]
 8022342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8022344:	693b      	ldr	r3, [r7, #16]
 8022346:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022348:	693b      	ldr	r3, [r7, #16]
 802234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802234c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022350:	693b      	ldr	r3, [r7, #16]
 8022352:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8022354:	693b      	ldr	r3, [r7, #16]
 8022356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022358:	4b0f      	ldr	r3, [pc, #60]	; (8022398 <xTaskPriorityDisinherit+0xd4>)
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	429a      	cmp	r2, r3
 802235e:	d903      	bls.n	8022368 <xTaskPriorityDisinherit+0xa4>
 8022360:	693b      	ldr	r3, [r7, #16]
 8022362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022364:	4a0c      	ldr	r2, [pc, #48]	; (8022398 <xTaskPriorityDisinherit+0xd4>)
 8022366:	6013      	str	r3, [r2, #0]
 8022368:	693b      	ldr	r3, [r7, #16]
 802236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802236c:	4613      	mov	r3, r2
 802236e:	009b      	lsls	r3, r3, #2
 8022370:	4413      	add	r3, r2
 8022372:	009b      	lsls	r3, r3, #2
 8022374:	4a09      	ldr	r2, [pc, #36]	; (802239c <xTaskPriorityDisinherit+0xd8>)
 8022376:	441a      	add	r2, r3
 8022378:	693b      	ldr	r3, [r7, #16]
 802237a:	3304      	adds	r3, #4
 802237c:	4619      	mov	r1, r3
 802237e:	4610      	mov	r0, r2
 8022380:	f7fd ff43 	bl	802020a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8022384:	2301      	movs	r3, #1
 8022386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022388:	697b      	ldr	r3, [r7, #20]
	}
 802238a:	4618      	mov	r0, r3
 802238c:	3718      	adds	r7, #24
 802238e:	46bd      	mov	sp, r7
 8022390:	bd80      	pop	{r7, pc}
 8022392:	bf00      	nop
 8022394:	20001d24 	.word	0x20001d24
 8022398:	20002200 	.word	0x20002200
 802239c:	20001d28 	.word	0x20001d28

080223a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80223a0:	b580      	push	{r7, lr}
 80223a2:	b088      	sub	sp, #32
 80223a4:	af00      	add	r7, sp, #0
 80223a6:	6078      	str	r0, [r7, #4]
 80223a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80223ae:	2301      	movs	r3, #1
 80223b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	d06a      	beq.n	802248e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80223b8:	69bb      	ldr	r3, [r7, #24]
 80223ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d10a      	bne.n	80223d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80223c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80223c4:	f383 8811 	msr	BASEPRI, r3
 80223c8:	f3bf 8f6f 	isb	sy
 80223cc:	f3bf 8f4f 	dsb	sy
 80223d0:	60fb      	str	r3, [r7, #12]
}
 80223d2:	bf00      	nop
 80223d4:	e7fe      	b.n	80223d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80223d6:	69bb      	ldr	r3, [r7, #24]
 80223d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80223da:	683a      	ldr	r2, [r7, #0]
 80223dc:	429a      	cmp	r2, r3
 80223de:	d902      	bls.n	80223e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80223e0:	683b      	ldr	r3, [r7, #0]
 80223e2:	61fb      	str	r3, [r7, #28]
 80223e4:	e002      	b.n	80223ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80223e6:	69bb      	ldr	r3, [r7, #24]
 80223e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80223ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80223ec:	69bb      	ldr	r3, [r7, #24]
 80223ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80223f0:	69fa      	ldr	r2, [r7, #28]
 80223f2:	429a      	cmp	r2, r3
 80223f4:	d04b      	beq.n	802248e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80223f6:	69bb      	ldr	r3, [r7, #24]
 80223f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80223fa:	697a      	ldr	r2, [r7, #20]
 80223fc:	429a      	cmp	r2, r3
 80223fe:	d146      	bne.n	802248e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8022400:	4b25      	ldr	r3, [pc, #148]	; (8022498 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	69ba      	ldr	r2, [r7, #24]
 8022406:	429a      	cmp	r2, r3
 8022408:	d10a      	bne.n	8022420 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 802240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802240e:	f383 8811 	msr	BASEPRI, r3
 8022412:	f3bf 8f6f 	isb	sy
 8022416:	f3bf 8f4f 	dsb	sy
 802241a:	60bb      	str	r3, [r7, #8]
}
 802241c:	bf00      	nop
 802241e:	e7fe      	b.n	802241e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8022420:	69bb      	ldr	r3, [r7, #24]
 8022422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022424:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8022426:	69bb      	ldr	r3, [r7, #24]
 8022428:	69fa      	ldr	r2, [r7, #28]
 802242a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 802242c:	69bb      	ldr	r3, [r7, #24]
 802242e:	699b      	ldr	r3, [r3, #24]
 8022430:	2b00      	cmp	r3, #0
 8022432:	db04      	blt.n	802243e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022434:	69fb      	ldr	r3, [r7, #28]
 8022436:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802243a:	69bb      	ldr	r3, [r7, #24]
 802243c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 802243e:	69bb      	ldr	r3, [r7, #24]
 8022440:	6959      	ldr	r1, [r3, #20]
 8022442:	693a      	ldr	r2, [r7, #16]
 8022444:	4613      	mov	r3, r2
 8022446:	009b      	lsls	r3, r3, #2
 8022448:	4413      	add	r3, r2
 802244a:	009b      	lsls	r3, r3, #2
 802244c:	4a13      	ldr	r2, [pc, #76]	; (802249c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 802244e:	4413      	add	r3, r2
 8022450:	4299      	cmp	r1, r3
 8022452:	d11c      	bne.n	802248e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022454:	69bb      	ldr	r3, [r7, #24]
 8022456:	3304      	adds	r3, #4
 8022458:	4618      	mov	r0, r3
 802245a:	f7fd ff33 	bl	80202c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 802245e:	69bb      	ldr	r3, [r7, #24]
 8022460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022462:	4b0f      	ldr	r3, [pc, #60]	; (80224a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	429a      	cmp	r2, r3
 8022468:	d903      	bls.n	8022472 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 802246a:	69bb      	ldr	r3, [r7, #24]
 802246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802246e:	4a0c      	ldr	r2, [pc, #48]	; (80224a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022470:	6013      	str	r3, [r2, #0]
 8022472:	69bb      	ldr	r3, [r7, #24]
 8022474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022476:	4613      	mov	r3, r2
 8022478:	009b      	lsls	r3, r3, #2
 802247a:	4413      	add	r3, r2
 802247c:	009b      	lsls	r3, r3, #2
 802247e:	4a07      	ldr	r2, [pc, #28]	; (802249c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022480:	441a      	add	r2, r3
 8022482:	69bb      	ldr	r3, [r7, #24]
 8022484:	3304      	adds	r3, #4
 8022486:	4619      	mov	r1, r3
 8022488:	4610      	mov	r0, r2
 802248a:	f7fd febe 	bl	802020a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802248e:	bf00      	nop
 8022490:	3720      	adds	r7, #32
 8022492:	46bd      	mov	sp, r7
 8022494:	bd80      	pop	{r7, pc}
 8022496:	bf00      	nop
 8022498:	20001d24 	.word	0x20001d24
 802249c:	20001d28 	.word	0x20001d28
 80224a0:	20002200 	.word	0x20002200

080224a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80224a4:	b480      	push	{r7}
 80224a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80224a8:	4b07      	ldr	r3, [pc, #28]	; (80224c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d004      	beq.n	80224ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80224b0:	4b05      	ldr	r3, [pc, #20]	; (80224c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80224b2:	681b      	ldr	r3, [r3, #0]
 80224b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80224b6:	3201      	adds	r2, #1
 80224b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80224ba:	4b03      	ldr	r3, [pc, #12]	; (80224c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80224bc:	681b      	ldr	r3, [r3, #0]
	}
 80224be:	4618      	mov	r0, r3
 80224c0:	46bd      	mov	sp, r7
 80224c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c6:	4770      	bx	lr
 80224c8:	20001d24 	.word	0x20001d24

080224cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80224cc:	b580      	push	{r7, lr}
 80224ce:	b084      	sub	sp, #16
 80224d0:	af00      	add	r7, sp, #0
 80224d2:	6078      	str	r0, [r7, #4]
 80224d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80224d6:	4b21      	ldr	r3, [pc, #132]	; (802255c <prvAddCurrentTaskToDelayedList+0x90>)
 80224d8:	681b      	ldr	r3, [r3, #0]
 80224da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80224dc:	4b20      	ldr	r3, [pc, #128]	; (8022560 <prvAddCurrentTaskToDelayedList+0x94>)
 80224de:	681b      	ldr	r3, [r3, #0]
 80224e0:	3304      	adds	r3, #4
 80224e2:	4618      	mov	r0, r3
 80224e4:	f7fd feee 	bl	80202c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80224ee:	d10a      	bne.n	8022506 <prvAddCurrentTaskToDelayedList+0x3a>
 80224f0:	683b      	ldr	r3, [r7, #0]
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	d007      	beq.n	8022506 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80224f6:	4b1a      	ldr	r3, [pc, #104]	; (8022560 <prvAddCurrentTaskToDelayedList+0x94>)
 80224f8:	681b      	ldr	r3, [r3, #0]
 80224fa:	3304      	adds	r3, #4
 80224fc:	4619      	mov	r1, r3
 80224fe:	4819      	ldr	r0, [pc, #100]	; (8022564 <prvAddCurrentTaskToDelayedList+0x98>)
 8022500:	f7fd fe83 	bl	802020a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8022504:	e026      	b.n	8022554 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8022506:	68fa      	ldr	r2, [r7, #12]
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	4413      	add	r3, r2
 802250c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802250e:	4b14      	ldr	r3, [pc, #80]	; (8022560 <prvAddCurrentTaskToDelayedList+0x94>)
 8022510:	681b      	ldr	r3, [r3, #0]
 8022512:	68ba      	ldr	r2, [r7, #8]
 8022514:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8022516:	68ba      	ldr	r2, [r7, #8]
 8022518:	68fb      	ldr	r3, [r7, #12]
 802251a:	429a      	cmp	r2, r3
 802251c:	d209      	bcs.n	8022532 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802251e:	4b12      	ldr	r3, [pc, #72]	; (8022568 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022520:	681a      	ldr	r2, [r3, #0]
 8022522:	4b0f      	ldr	r3, [pc, #60]	; (8022560 <prvAddCurrentTaskToDelayedList+0x94>)
 8022524:	681b      	ldr	r3, [r3, #0]
 8022526:	3304      	adds	r3, #4
 8022528:	4619      	mov	r1, r3
 802252a:	4610      	mov	r0, r2
 802252c:	f7fd fe91 	bl	8020252 <vListInsert>
}
 8022530:	e010      	b.n	8022554 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022532:	4b0e      	ldr	r3, [pc, #56]	; (802256c <prvAddCurrentTaskToDelayedList+0xa0>)
 8022534:	681a      	ldr	r2, [r3, #0]
 8022536:	4b0a      	ldr	r3, [pc, #40]	; (8022560 <prvAddCurrentTaskToDelayedList+0x94>)
 8022538:	681b      	ldr	r3, [r3, #0]
 802253a:	3304      	adds	r3, #4
 802253c:	4619      	mov	r1, r3
 802253e:	4610      	mov	r0, r2
 8022540:	f7fd fe87 	bl	8020252 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022544:	4b0a      	ldr	r3, [pc, #40]	; (8022570 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022546:	681b      	ldr	r3, [r3, #0]
 8022548:	68ba      	ldr	r2, [r7, #8]
 802254a:	429a      	cmp	r2, r3
 802254c:	d202      	bcs.n	8022554 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802254e:	4a08      	ldr	r2, [pc, #32]	; (8022570 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022550:	68bb      	ldr	r3, [r7, #8]
 8022552:	6013      	str	r3, [r2, #0]
}
 8022554:	bf00      	nop
 8022556:	3710      	adds	r7, #16
 8022558:	46bd      	mov	sp, r7
 802255a:	bd80      	pop	{r7, pc}
 802255c:	200021fc 	.word	0x200021fc
 8022560:	20001d24 	.word	0x20001d24
 8022564:	200021e4 	.word	0x200021e4
 8022568:	200021b4 	.word	0x200021b4
 802256c:	200021b0 	.word	0x200021b0
 8022570:	20002218 	.word	0x20002218

08022574 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b08a      	sub	sp, #40	; 0x28
 8022578:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802257a:	2300      	movs	r3, #0
 802257c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802257e:	f000 fb07 	bl	8022b90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8022582:	4b1c      	ldr	r3, [pc, #112]	; (80225f4 <xTimerCreateTimerTask+0x80>)
 8022584:	681b      	ldr	r3, [r3, #0]
 8022586:	2b00      	cmp	r3, #0
 8022588:	d021      	beq.n	80225ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802258a:	2300      	movs	r3, #0
 802258c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802258e:	2300      	movs	r3, #0
 8022590:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8022592:	1d3a      	adds	r2, r7, #4
 8022594:	f107 0108 	add.w	r1, r7, #8
 8022598:	f107 030c 	add.w	r3, r7, #12
 802259c:	4618      	mov	r0, r3
 802259e:	f7fd fded 	bl	802017c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80225a2:	6879      	ldr	r1, [r7, #4]
 80225a4:	68bb      	ldr	r3, [r7, #8]
 80225a6:	68fa      	ldr	r2, [r7, #12]
 80225a8:	9202      	str	r2, [sp, #8]
 80225aa:	9301      	str	r3, [sp, #4]
 80225ac:	2302      	movs	r3, #2
 80225ae:	9300      	str	r3, [sp, #0]
 80225b0:	2300      	movs	r3, #0
 80225b2:	460a      	mov	r2, r1
 80225b4:	4910      	ldr	r1, [pc, #64]	; (80225f8 <xTimerCreateTimerTask+0x84>)
 80225b6:	4811      	ldr	r0, [pc, #68]	; (80225fc <xTimerCreateTimerTask+0x88>)
 80225b8:	f7fe ff4c 	bl	8021454 <xTaskCreateStatic>
 80225bc:	4603      	mov	r3, r0
 80225be:	4a10      	ldr	r2, [pc, #64]	; (8022600 <xTimerCreateTimerTask+0x8c>)
 80225c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80225c2:	4b0f      	ldr	r3, [pc, #60]	; (8022600 <xTimerCreateTimerTask+0x8c>)
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d001      	beq.n	80225ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80225ca:	2301      	movs	r3, #1
 80225cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80225ce:	697b      	ldr	r3, [r7, #20]
 80225d0:	2b00      	cmp	r3, #0
 80225d2:	d10a      	bne.n	80225ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80225d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225d8:	f383 8811 	msr	BASEPRI, r3
 80225dc:	f3bf 8f6f 	isb	sy
 80225e0:	f3bf 8f4f 	dsb	sy
 80225e4:	613b      	str	r3, [r7, #16]
}
 80225e6:	bf00      	nop
 80225e8:	e7fe      	b.n	80225e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80225ea:	697b      	ldr	r3, [r7, #20]
}
 80225ec:	4618      	mov	r0, r3
 80225ee:	3718      	adds	r7, #24
 80225f0:	46bd      	mov	sp, r7
 80225f2:	bd80      	pop	{r7, pc}
 80225f4:	2000225c 	.word	0x2000225c
 80225f8:	08032f10 	.word	0x08032f10
 80225fc:	08022739 	.word	0x08022739
 8022600:	20002260 	.word	0x20002260

08022604 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8022604:	b580      	push	{r7, lr}
 8022606:	b08a      	sub	sp, #40	; 0x28
 8022608:	af00      	add	r7, sp, #0
 802260a:	60f8      	str	r0, [r7, #12]
 802260c:	60b9      	str	r1, [r7, #8]
 802260e:	607a      	str	r2, [r7, #4]
 8022610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8022612:	2300      	movs	r3, #0
 8022614:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8022616:	68fb      	ldr	r3, [r7, #12]
 8022618:	2b00      	cmp	r3, #0
 802261a:	d10a      	bne.n	8022632 <xTimerGenericCommand+0x2e>
	__asm volatile
 802261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022620:	f383 8811 	msr	BASEPRI, r3
 8022624:	f3bf 8f6f 	isb	sy
 8022628:	f3bf 8f4f 	dsb	sy
 802262c:	623b      	str	r3, [r7, #32]
}
 802262e:	bf00      	nop
 8022630:	e7fe      	b.n	8022630 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022632:	4b1a      	ldr	r3, [pc, #104]	; (802269c <xTimerGenericCommand+0x98>)
 8022634:	681b      	ldr	r3, [r3, #0]
 8022636:	2b00      	cmp	r3, #0
 8022638:	d02a      	beq.n	8022690 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 802263a:	68bb      	ldr	r3, [r7, #8]
 802263c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8022642:	68fb      	ldr	r3, [r7, #12]
 8022644:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8022646:	68bb      	ldr	r3, [r7, #8]
 8022648:	2b05      	cmp	r3, #5
 802264a:	dc18      	bgt.n	802267e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802264c:	f7ff fdb4 	bl	80221b8 <xTaskGetSchedulerState>
 8022650:	4603      	mov	r3, r0
 8022652:	2b02      	cmp	r3, #2
 8022654:	d109      	bne.n	802266a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8022656:	4b11      	ldr	r3, [pc, #68]	; (802269c <xTimerGenericCommand+0x98>)
 8022658:	6818      	ldr	r0, [r3, #0]
 802265a:	f107 0110 	add.w	r1, r7, #16
 802265e:	2300      	movs	r3, #0
 8022660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022662:	f7fe f84d 	bl	8020700 <xQueueGenericSend>
 8022666:	6278      	str	r0, [r7, #36]	; 0x24
 8022668:	e012      	b.n	8022690 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802266a:	4b0c      	ldr	r3, [pc, #48]	; (802269c <xTimerGenericCommand+0x98>)
 802266c:	6818      	ldr	r0, [r3, #0]
 802266e:	f107 0110 	add.w	r1, r7, #16
 8022672:	2300      	movs	r3, #0
 8022674:	2200      	movs	r2, #0
 8022676:	f7fe f843 	bl	8020700 <xQueueGenericSend>
 802267a:	6278      	str	r0, [r7, #36]	; 0x24
 802267c:	e008      	b.n	8022690 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802267e:	4b07      	ldr	r3, [pc, #28]	; (802269c <xTimerGenericCommand+0x98>)
 8022680:	6818      	ldr	r0, [r3, #0]
 8022682:	f107 0110 	add.w	r1, r7, #16
 8022686:	2300      	movs	r3, #0
 8022688:	683a      	ldr	r2, [r7, #0]
 802268a:	f7fe f937 	bl	80208fc <xQueueGenericSendFromISR>
 802268e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022692:	4618      	mov	r0, r3
 8022694:	3728      	adds	r7, #40	; 0x28
 8022696:	46bd      	mov	sp, r7
 8022698:	bd80      	pop	{r7, pc}
 802269a:	bf00      	nop
 802269c:	2000225c 	.word	0x2000225c

080226a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80226a0:	b580      	push	{r7, lr}
 80226a2:	b088      	sub	sp, #32
 80226a4:	af02      	add	r7, sp, #8
 80226a6:	6078      	str	r0, [r7, #4]
 80226a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80226aa:	4b22      	ldr	r3, [pc, #136]	; (8022734 <prvProcessExpiredTimer+0x94>)
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	68db      	ldr	r3, [r3, #12]
 80226b0:	68db      	ldr	r3, [r3, #12]
 80226b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80226b4:	697b      	ldr	r3, [r7, #20]
 80226b6:	3304      	adds	r3, #4
 80226b8:	4618      	mov	r0, r3
 80226ba:	f7fd fe03 	bl	80202c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80226be:	697b      	ldr	r3, [r7, #20]
 80226c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80226c4:	f003 0304 	and.w	r3, r3, #4
 80226c8:	2b00      	cmp	r3, #0
 80226ca:	d022      	beq.n	8022712 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80226cc:	697b      	ldr	r3, [r7, #20]
 80226ce:	699a      	ldr	r2, [r3, #24]
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	18d1      	adds	r1, r2, r3
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	683a      	ldr	r2, [r7, #0]
 80226d8:	6978      	ldr	r0, [r7, #20]
 80226da:	f000 f8d1 	bl	8022880 <prvInsertTimerInActiveList>
 80226de:	4603      	mov	r3, r0
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	d01f      	beq.n	8022724 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80226e4:	2300      	movs	r3, #0
 80226e6:	9300      	str	r3, [sp, #0]
 80226e8:	2300      	movs	r3, #0
 80226ea:	687a      	ldr	r2, [r7, #4]
 80226ec:	2100      	movs	r1, #0
 80226ee:	6978      	ldr	r0, [r7, #20]
 80226f0:	f7ff ff88 	bl	8022604 <xTimerGenericCommand>
 80226f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80226f6:	693b      	ldr	r3, [r7, #16]
 80226f8:	2b00      	cmp	r3, #0
 80226fa:	d113      	bne.n	8022724 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80226fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022700:	f383 8811 	msr	BASEPRI, r3
 8022704:	f3bf 8f6f 	isb	sy
 8022708:	f3bf 8f4f 	dsb	sy
 802270c:	60fb      	str	r3, [r7, #12]
}
 802270e:	bf00      	nop
 8022710:	e7fe      	b.n	8022710 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022712:	697b      	ldr	r3, [r7, #20]
 8022714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022718:	f023 0301 	bic.w	r3, r3, #1
 802271c:	b2da      	uxtb	r2, r3
 802271e:	697b      	ldr	r3, [r7, #20]
 8022720:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022724:	697b      	ldr	r3, [r7, #20]
 8022726:	6a1b      	ldr	r3, [r3, #32]
 8022728:	6978      	ldr	r0, [r7, #20]
 802272a:	4798      	blx	r3
}
 802272c:	bf00      	nop
 802272e:	3718      	adds	r7, #24
 8022730:	46bd      	mov	sp, r7
 8022732:	bd80      	pop	{r7, pc}
 8022734:	20002254 	.word	0x20002254

08022738 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022738:	b580      	push	{r7, lr}
 802273a:	b084      	sub	sp, #16
 802273c:	af00      	add	r7, sp, #0
 802273e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022740:	f107 0308 	add.w	r3, r7, #8
 8022744:	4618      	mov	r0, r3
 8022746:	f000 f857 	bl	80227f8 <prvGetNextExpireTime>
 802274a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 802274c:	68bb      	ldr	r3, [r7, #8]
 802274e:	4619      	mov	r1, r3
 8022750:	68f8      	ldr	r0, [r7, #12]
 8022752:	f000 f803 	bl	802275c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022756:	f000 f8d5 	bl	8022904 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802275a:	e7f1      	b.n	8022740 <prvTimerTask+0x8>

0802275c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 802275c:	b580      	push	{r7, lr}
 802275e:	b084      	sub	sp, #16
 8022760:	af00      	add	r7, sp, #0
 8022762:	6078      	str	r0, [r7, #4]
 8022764:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022766:	f7ff f8d7 	bl	8021918 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802276a:	f107 0308 	add.w	r3, r7, #8
 802276e:	4618      	mov	r0, r3
 8022770:	f000 f866 	bl	8022840 <prvSampleTimeNow>
 8022774:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022776:	68bb      	ldr	r3, [r7, #8]
 8022778:	2b00      	cmp	r3, #0
 802277a:	d130      	bne.n	80227de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802277c:	683b      	ldr	r3, [r7, #0]
 802277e:	2b00      	cmp	r3, #0
 8022780:	d10a      	bne.n	8022798 <prvProcessTimerOrBlockTask+0x3c>
 8022782:	687a      	ldr	r2, [r7, #4]
 8022784:	68fb      	ldr	r3, [r7, #12]
 8022786:	429a      	cmp	r2, r3
 8022788:	d806      	bhi.n	8022798 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802278a:	f7ff f8d3 	bl	8021934 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802278e:	68f9      	ldr	r1, [r7, #12]
 8022790:	6878      	ldr	r0, [r7, #4]
 8022792:	f7ff ff85 	bl	80226a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022796:	e024      	b.n	80227e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022798:	683b      	ldr	r3, [r7, #0]
 802279a:	2b00      	cmp	r3, #0
 802279c:	d008      	beq.n	80227b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802279e:	4b13      	ldr	r3, [pc, #76]	; (80227ec <prvProcessTimerOrBlockTask+0x90>)
 80227a0:	681b      	ldr	r3, [r3, #0]
 80227a2:	681b      	ldr	r3, [r3, #0]
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d101      	bne.n	80227ac <prvProcessTimerOrBlockTask+0x50>
 80227a8:	2301      	movs	r3, #1
 80227aa:	e000      	b.n	80227ae <prvProcessTimerOrBlockTask+0x52>
 80227ac:	2300      	movs	r3, #0
 80227ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80227b0:	4b0f      	ldr	r3, [pc, #60]	; (80227f0 <prvProcessTimerOrBlockTask+0x94>)
 80227b2:	6818      	ldr	r0, [r3, #0]
 80227b4:	687a      	ldr	r2, [r7, #4]
 80227b6:	68fb      	ldr	r3, [r7, #12]
 80227b8:	1ad3      	subs	r3, r2, r3
 80227ba:	683a      	ldr	r2, [r7, #0]
 80227bc:	4619      	mov	r1, r3
 80227be:	f7fe fe15 	bl	80213ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80227c2:	f7ff f8b7 	bl	8021934 <xTaskResumeAll>
 80227c6:	4603      	mov	r3, r0
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	d10a      	bne.n	80227e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80227cc:	4b09      	ldr	r3, [pc, #36]	; (80227f4 <prvProcessTimerOrBlockTask+0x98>)
 80227ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80227d2:	601a      	str	r2, [r3, #0]
 80227d4:	f3bf 8f4f 	dsb	sy
 80227d8:	f3bf 8f6f 	isb	sy
}
 80227dc:	e001      	b.n	80227e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80227de:	f7ff f8a9 	bl	8021934 <xTaskResumeAll>
}
 80227e2:	bf00      	nop
 80227e4:	3710      	adds	r7, #16
 80227e6:	46bd      	mov	sp, r7
 80227e8:	bd80      	pop	{r7, pc}
 80227ea:	bf00      	nop
 80227ec:	20002258 	.word	0x20002258
 80227f0:	2000225c 	.word	0x2000225c
 80227f4:	e000ed04 	.word	0xe000ed04

080227f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80227f8:	b480      	push	{r7}
 80227fa:	b085      	sub	sp, #20
 80227fc:	af00      	add	r7, sp, #0
 80227fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022800:	4b0e      	ldr	r3, [pc, #56]	; (802283c <prvGetNextExpireTime+0x44>)
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	2b00      	cmp	r3, #0
 8022808:	d101      	bne.n	802280e <prvGetNextExpireTime+0x16>
 802280a:	2201      	movs	r2, #1
 802280c:	e000      	b.n	8022810 <prvGetNextExpireTime+0x18>
 802280e:	2200      	movs	r2, #0
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	681b      	ldr	r3, [r3, #0]
 8022818:	2b00      	cmp	r3, #0
 802281a:	d105      	bne.n	8022828 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802281c:	4b07      	ldr	r3, [pc, #28]	; (802283c <prvGetNextExpireTime+0x44>)
 802281e:	681b      	ldr	r3, [r3, #0]
 8022820:	68db      	ldr	r3, [r3, #12]
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	60fb      	str	r3, [r7, #12]
 8022826:	e001      	b.n	802282c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022828:	2300      	movs	r3, #0
 802282a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802282c:	68fb      	ldr	r3, [r7, #12]
}
 802282e:	4618      	mov	r0, r3
 8022830:	3714      	adds	r7, #20
 8022832:	46bd      	mov	sp, r7
 8022834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022838:	4770      	bx	lr
 802283a:	bf00      	nop
 802283c:	20002254 	.word	0x20002254

08022840 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8022840:	b580      	push	{r7, lr}
 8022842:	b084      	sub	sp, #16
 8022844:	af00      	add	r7, sp, #0
 8022846:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022848:	f7ff f912 	bl	8021a70 <xTaskGetTickCount>
 802284c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802284e:	4b0b      	ldr	r3, [pc, #44]	; (802287c <prvSampleTimeNow+0x3c>)
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	68fa      	ldr	r2, [r7, #12]
 8022854:	429a      	cmp	r2, r3
 8022856:	d205      	bcs.n	8022864 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022858:	f000 f936 	bl	8022ac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	2201      	movs	r2, #1
 8022860:	601a      	str	r2, [r3, #0]
 8022862:	e002      	b.n	802286a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	2200      	movs	r2, #0
 8022868:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802286a:	4a04      	ldr	r2, [pc, #16]	; (802287c <prvSampleTimeNow+0x3c>)
 802286c:	68fb      	ldr	r3, [r7, #12]
 802286e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022870:	68fb      	ldr	r3, [r7, #12]
}
 8022872:	4618      	mov	r0, r3
 8022874:	3710      	adds	r7, #16
 8022876:	46bd      	mov	sp, r7
 8022878:	bd80      	pop	{r7, pc}
 802287a:	bf00      	nop
 802287c:	20002264 	.word	0x20002264

08022880 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022880:	b580      	push	{r7, lr}
 8022882:	b086      	sub	sp, #24
 8022884:	af00      	add	r7, sp, #0
 8022886:	60f8      	str	r0, [r7, #12]
 8022888:	60b9      	str	r1, [r7, #8]
 802288a:	607a      	str	r2, [r7, #4]
 802288c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802288e:	2300      	movs	r3, #0
 8022890:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	68ba      	ldr	r2, [r7, #8]
 8022896:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	68fa      	ldr	r2, [r7, #12]
 802289c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802289e:	68ba      	ldr	r2, [r7, #8]
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	429a      	cmp	r2, r3
 80228a4:	d812      	bhi.n	80228cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80228a6:	687a      	ldr	r2, [r7, #4]
 80228a8:	683b      	ldr	r3, [r7, #0]
 80228aa:	1ad2      	subs	r2, r2, r3
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	699b      	ldr	r3, [r3, #24]
 80228b0:	429a      	cmp	r2, r3
 80228b2:	d302      	bcc.n	80228ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80228b4:	2301      	movs	r3, #1
 80228b6:	617b      	str	r3, [r7, #20]
 80228b8:	e01b      	b.n	80228f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80228ba:	4b10      	ldr	r3, [pc, #64]	; (80228fc <prvInsertTimerInActiveList+0x7c>)
 80228bc:	681a      	ldr	r2, [r3, #0]
 80228be:	68fb      	ldr	r3, [r7, #12]
 80228c0:	3304      	adds	r3, #4
 80228c2:	4619      	mov	r1, r3
 80228c4:	4610      	mov	r0, r2
 80228c6:	f7fd fcc4 	bl	8020252 <vListInsert>
 80228ca:	e012      	b.n	80228f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80228cc:	687a      	ldr	r2, [r7, #4]
 80228ce:	683b      	ldr	r3, [r7, #0]
 80228d0:	429a      	cmp	r2, r3
 80228d2:	d206      	bcs.n	80228e2 <prvInsertTimerInActiveList+0x62>
 80228d4:	68ba      	ldr	r2, [r7, #8]
 80228d6:	683b      	ldr	r3, [r7, #0]
 80228d8:	429a      	cmp	r2, r3
 80228da:	d302      	bcc.n	80228e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80228dc:	2301      	movs	r3, #1
 80228de:	617b      	str	r3, [r7, #20]
 80228e0:	e007      	b.n	80228f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80228e2:	4b07      	ldr	r3, [pc, #28]	; (8022900 <prvInsertTimerInActiveList+0x80>)
 80228e4:	681a      	ldr	r2, [r3, #0]
 80228e6:	68fb      	ldr	r3, [r7, #12]
 80228e8:	3304      	adds	r3, #4
 80228ea:	4619      	mov	r1, r3
 80228ec:	4610      	mov	r0, r2
 80228ee:	f7fd fcb0 	bl	8020252 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80228f2:	697b      	ldr	r3, [r7, #20]
}
 80228f4:	4618      	mov	r0, r3
 80228f6:	3718      	adds	r7, #24
 80228f8:	46bd      	mov	sp, r7
 80228fa:	bd80      	pop	{r7, pc}
 80228fc:	20002258 	.word	0x20002258
 8022900:	20002254 	.word	0x20002254

08022904 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8022904:	b580      	push	{r7, lr}
 8022906:	b08e      	sub	sp, #56	; 0x38
 8022908:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802290a:	e0ca      	b.n	8022aa2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	2b00      	cmp	r3, #0
 8022910:	da18      	bge.n	8022944 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8022912:	1d3b      	adds	r3, r7, #4
 8022914:	3304      	adds	r3, #4
 8022916:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8022918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802291a:	2b00      	cmp	r3, #0
 802291c:	d10a      	bne.n	8022934 <prvProcessReceivedCommands+0x30>
	__asm volatile
 802291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022922:	f383 8811 	msr	BASEPRI, r3
 8022926:	f3bf 8f6f 	isb	sy
 802292a:	f3bf 8f4f 	dsb	sy
 802292e:	61fb      	str	r3, [r7, #28]
}
 8022930:	bf00      	nop
 8022932:	e7fe      	b.n	8022932 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8022934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802293a:	6850      	ldr	r0, [r2, #4]
 802293c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802293e:	6892      	ldr	r2, [r2, #8]
 8022940:	4611      	mov	r1, r2
 8022942:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	2b00      	cmp	r3, #0
 8022948:	f2c0 80ab 	blt.w	8022aa2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802294c:	68fb      	ldr	r3, [r7, #12]
 802294e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8022950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022952:	695b      	ldr	r3, [r3, #20]
 8022954:	2b00      	cmp	r3, #0
 8022956:	d004      	beq.n	8022962 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802295a:	3304      	adds	r3, #4
 802295c:	4618      	mov	r0, r3
 802295e:	f7fd fcb1 	bl	80202c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022962:	463b      	mov	r3, r7
 8022964:	4618      	mov	r0, r3
 8022966:	f7ff ff6b 	bl	8022840 <prvSampleTimeNow>
 802296a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	2b09      	cmp	r3, #9
 8022970:	f200 8096 	bhi.w	8022aa0 <prvProcessReceivedCommands+0x19c>
 8022974:	a201      	add	r2, pc, #4	; (adr r2, 802297c <prvProcessReceivedCommands+0x78>)
 8022976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802297a:	bf00      	nop
 802297c:	080229a5 	.word	0x080229a5
 8022980:	080229a5 	.word	0x080229a5
 8022984:	080229a5 	.word	0x080229a5
 8022988:	08022a19 	.word	0x08022a19
 802298c:	08022a2d 	.word	0x08022a2d
 8022990:	08022a77 	.word	0x08022a77
 8022994:	080229a5 	.word	0x080229a5
 8022998:	080229a5 	.word	0x080229a5
 802299c:	08022a19 	.word	0x08022a19
 80229a0:	08022a2d 	.word	0x08022a2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80229a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80229aa:	f043 0301 	orr.w	r3, r3, #1
 80229ae:	b2da      	uxtb	r2, r3
 80229b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80229b6:	68ba      	ldr	r2, [r7, #8]
 80229b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229ba:	699b      	ldr	r3, [r3, #24]
 80229bc:	18d1      	adds	r1, r2, r3
 80229be:	68bb      	ldr	r3, [r7, #8]
 80229c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80229c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80229c4:	f7ff ff5c 	bl	8022880 <prvInsertTimerInActiveList>
 80229c8:	4603      	mov	r3, r0
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d069      	beq.n	8022aa2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80229ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229d0:	6a1b      	ldr	r3, [r3, #32]
 80229d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80229d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80229d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80229dc:	f003 0304 	and.w	r3, r3, #4
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	d05e      	beq.n	8022aa2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80229e4:	68ba      	ldr	r2, [r7, #8]
 80229e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229e8:	699b      	ldr	r3, [r3, #24]
 80229ea:	441a      	add	r2, r3
 80229ec:	2300      	movs	r3, #0
 80229ee:	9300      	str	r3, [sp, #0]
 80229f0:	2300      	movs	r3, #0
 80229f2:	2100      	movs	r1, #0
 80229f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80229f6:	f7ff fe05 	bl	8022604 <xTimerGenericCommand>
 80229fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80229fc:	6a3b      	ldr	r3, [r7, #32]
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	d14f      	bne.n	8022aa2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8022a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a06:	f383 8811 	msr	BASEPRI, r3
 8022a0a:	f3bf 8f6f 	isb	sy
 8022a0e:	f3bf 8f4f 	dsb	sy
 8022a12:	61bb      	str	r3, [r7, #24]
}
 8022a14:	bf00      	nop
 8022a16:	e7fe      	b.n	8022a16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a1e:	f023 0301 	bic.w	r3, r3, #1
 8022a22:	b2da      	uxtb	r2, r3
 8022a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8022a2a:	e03a      	b.n	8022aa2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a32:	f043 0301 	orr.w	r3, r3, #1
 8022a36:	b2da      	uxtb	r2, r3
 8022a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8022a3e:	68ba      	ldr	r2, [r7, #8]
 8022a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8022a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a46:	699b      	ldr	r3, [r3, #24]
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d10a      	bne.n	8022a62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8022a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a50:	f383 8811 	msr	BASEPRI, r3
 8022a54:	f3bf 8f6f 	isb	sy
 8022a58:	f3bf 8f4f 	dsb	sy
 8022a5c:	617b      	str	r3, [r7, #20]
}
 8022a5e:	bf00      	nop
 8022a60:	e7fe      	b.n	8022a60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8022a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a64:	699a      	ldr	r2, [r3, #24]
 8022a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a68:	18d1      	adds	r1, r2, r3
 8022a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022a70:	f7ff ff06 	bl	8022880 <prvInsertTimerInActiveList>
					break;
 8022a74:	e015      	b.n	8022aa2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8022a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a7c:	f003 0302 	and.w	r3, r3, #2
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d103      	bne.n	8022a8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8022a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022a86:	f000 fb55 	bl	8023134 <vPortFree>
 8022a8a:	e00a      	b.n	8022aa2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a92:	f023 0301 	bic.w	r3, r3, #1
 8022a96:	b2da      	uxtb	r2, r3
 8022a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8022a9e:	e000      	b.n	8022aa2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8022aa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022aa2:	4b08      	ldr	r3, [pc, #32]	; (8022ac4 <prvProcessReceivedCommands+0x1c0>)
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	1d39      	adds	r1, r7, #4
 8022aa8:	2200      	movs	r2, #0
 8022aaa:	4618      	mov	r0, r3
 8022aac:	f7fd ffc2 	bl	8020a34 <xQueueReceive>
 8022ab0:	4603      	mov	r3, r0
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	f47f af2a 	bne.w	802290c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8022ab8:	bf00      	nop
 8022aba:	bf00      	nop
 8022abc:	3730      	adds	r7, #48	; 0x30
 8022abe:	46bd      	mov	sp, r7
 8022ac0:	bd80      	pop	{r7, pc}
 8022ac2:	bf00      	nop
 8022ac4:	2000225c 	.word	0x2000225c

08022ac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8022ac8:	b580      	push	{r7, lr}
 8022aca:	b088      	sub	sp, #32
 8022acc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022ace:	e048      	b.n	8022b62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022ad0:	4b2d      	ldr	r3, [pc, #180]	; (8022b88 <prvSwitchTimerLists+0xc0>)
 8022ad2:	681b      	ldr	r3, [r3, #0]
 8022ad4:	68db      	ldr	r3, [r3, #12]
 8022ad6:	681b      	ldr	r3, [r3, #0]
 8022ad8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022ada:	4b2b      	ldr	r3, [pc, #172]	; (8022b88 <prvSwitchTimerLists+0xc0>)
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	68db      	ldr	r3, [r3, #12]
 8022ae0:	68db      	ldr	r3, [r3, #12]
 8022ae2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022ae4:	68fb      	ldr	r3, [r7, #12]
 8022ae6:	3304      	adds	r3, #4
 8022ae8:	4618      	mov	r0, r3
 8022aea:	f7fd fbeb 	bl	80202c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022aee:	68fb      	ldr	r3, [r7, #12]
 8022af0:	6a1b      	ldr	r3, [r3, #32]
 8022af2:	68f8      	ldr	r0, [r7, #12]
 8022af4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022af6:	68fb      	ldr	r3, [r7, #12]
 8022af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022afc:	f003 0304 	and.w	r3, r3, #4
 8022b00:	2b00      	cmp	r3, #0
 8022b02:	d02e      	beq.n	8022b62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8022b04:	68fb      	ldr	r3, [r7, #12]
 8022b06:	699b      	ldr	r3, [r3, #24]
 8022b08:	693a      	ldr	r2, [r7, #16]
 8022b0a:	4413      	add	r3, r2
 8022b0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8022b0e:	68ba      	ldr	r2, [r7, #8]
 8022b10:	693b      	ldr	r3, [r7, #16]
 8022b12:	429a      	cmp	r2, r3
 8022b14:	d90e      	bls.n	8022b34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8022b16:	68fb      	ldr	r3, [r7, #12]
 8022b18:	68ba      	ldr	r2, [r7, #8]
 8022b1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022b1c:	68fb      	ldr	r3, [r7, #12]
 8022b1e:	68fa      	ldr	r2, [r7, #12]
 8022b20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022b22:	4b19      	ldr	r3, [pc, #100]	; (8022b88 <prvSwitchTimerLists+0xc0>)
 8022b24:	681a      	ldr	r2, [r3, #0]
 8022b26:	68fb      	ldr	r3, [r7, #12]
 8022b28:	3304      	adds	r3, #4
 8022b2a:	4619      	mov	r1, r3
 8022b2c:	4610      	mov	r0, r2
 8022b2e:	f7fd fb90 	bl	8020252 <vListInsert>
 8022b32:	e016      	b.n	8022b62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022b34:	2300      	movs	r3, #0
 8022b36:	9300      	str	r3, [sp, #0]
 8022b38:	2300      	movs	r3, #0
 8022b3a:	693a      	ldr	r2, [r7, #16]
 8022b3c:	2100      	movs	r1, #0
 8022b3e:	68f8      	ldr	r0, [r7, #12]
 8022b40:	f7ff fd60 	bl	8022604 <xTimerGenericCommand>
 8022b44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	d10a      	bne.n	8022b62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8022b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022b50:	f383 8811 	msr	BASEPRI, r3
 8022b54:	f3bf 8f6f 	isb	sy
 8022b58:	f3bf 8f4f 	dsb	sy
 8022b5c:	603b      	str	r3, [r7, #0]
}
 8022b5e:	bf00      	nop
 8022b60:	e7fe      	b.n	8022b60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022b62:	4b09      	ldr	r3, [pc, #36]	; (8022b88 <prvSwitchTimerLists+0xc0>)
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d1b1      	bne.n	8022ad0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8022b6c:	4b06      	ldr	r3, [pc, #24]	; (8022b88 <prvSwitchTimerLists+0xc0>)
 8022b6e:	681b      	ldr	r3, [r3, #0]
 8022b70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8022b72:	4b06      	ldr	r3, [pc, #24]	; (8022b8c <prvSwitchTimerLists+0xc4>)
 8022b74:	681b      	ldr	r3, [r3, #0]
 8022b76:	4a04      	ldr	r2, [pc, #16]	; (8022b88 <prvSwitchTimerLists+0xc0>)
 8022b78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8022b7a:	4a04      	ldr	r2, [pc, #16]	; (8022b8c <prvSwitchTimerLists+0xc4>)
 8022b7c:	697b      	ldr	r3, [r7, #20]
 8022b7e:	6013      	str	r3, [r2, #0]
}
 8022b80:	bf00      	nop
 8022b82:	3718      	adds	r7, #24
 8022b84:	46bd      	mov	sp, r7
 8022b86:	bd80      	pop	{r7, pc}
 8022b88:	20002254 	.word	0x20002254
 8022b8c:	20002258 	.word	0x20002258

08022b90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8022b90:	b580      	push	{r7, lr}
 8022b92:	b082      	sub	sp, #8
 8022b94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8022b96:	f000 f965 	bl	8022e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8022b9a:	4b15      	ldr	r3, [pc, #84]	; (8022bf0 <prvCheckForValidListAndQueue+0x60>)
 8022b9c:	681b      	ldr	r3, [r3, #0]
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	d120      	bne.n	8022be4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8022ba2:	4814      	ldr	r0, [pc, #80]	; (8022bf4 <prvCheckForValidListAndQueue+0x64>)
 8022ba4:	f7fd fb04 	bl	80201b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8022ba8:	4813      	ldr	r0, [pc, #76]	; (8022bf8 <prvCheckForValidListAndQueue+0x68>)
 8022baa:	f7fd fb01 	bl	80201b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8022bae:	4b13      	ldr	r3, [pc, #76]	; (8022bfc <prvCheckForValidListAndQueue+0x6c>)
 8022bb0:	4a10      	ldr	r2, [pc, #64]	; (8022bf4 <prvCheckForValidListAndQueue+0x64>)
 8022bb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8022bb4:	4b12      	ldr	r3, [pc, #72]	; (8022c00 <prvCheckForValidListAndQueue+0x70>)
 8022bb6:	4a10      	ldr	r2, [pc, #64]	; (8022bf8 <prvCheckForValidListAndQueue+0x68>)
 8022bb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8022bba:	2300      	movs	r3, #0
 8022bbc:	9300      	str	r3, [sp, #0]
 8022bbe:	4b11      	ldr	r3, [pc, #68]	; (8022c04 <prvCheckForValidListAndQueue+0x74>)
 8022bc0:	4a11      	ldr	r2, [pc, #68]	; (8022c08 <prvCheckForValidListAndQueue+0x78>)
 8022bc2:	2110      	movs	r1, #16
 8022bc4:	200a      	movs	r0, #10
 8022bc6:	f7fd fc0f 	bl	80203e8 <xQueueGenericCreateStatic>
 8022bca:	4603      	mov	r3, r0
 8022bcc:	4a08      	ldr	r2, [pc, #32]	; (8022bf0 <prvCheckForValidListAndQueue+0x60>)
 8022bce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8022bd0:	4b07      	ldr	r3, [pc, #28]	; (8022bf0 <prvCheckForValidListAndQueue+0x60>)
 8022bd2:	681b      	ldr	r3, [r3, #0]
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d005      	beq.n	8022be4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8022bd8:	4b05      	ldr	r3, [pc, #20]	; (8022bf0 <prvCheckForValidListAndQueue+0x60>)
 8022bda:	681b      	ldr	r3, [r3, #0]
 8022bdc:	490b      	ldr	r1, [pc, #44]	; (8022c0c <prvCheckForValidListAndQueue+0x7c>)
 8022bde:	4618      	mov	r0, r3
 8022be0:	f7fe fbda 	bl	8021398 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022be4:	f000 f96e 	bl	8022ec4 <vPortExitCritical>
}
 8022be8:	bf00      	nop
 8022bea:	46bd      	mov	sp, r7
 8022bec:	bd80      	pop	{r7, pc}
 8022bee:	bf00      	nop
 8022bf0:	2000225c 	.word	0x2000225c
 8022bf4:	2000222c 	.word	0x2000222c
 8022bf8:	20002240 	.word	0x20002240
 8022bfc:	20002254 	.word	0x20002254
 8022c00:	20002258 	.word	0x20002258
 8022c04:	20002308 	.word	0x20002308
 8022c08:	20002268 	.word	0x20002268
 8022c0c:	08032f18 	.word	0x08032f18

08022c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8022c10:	b480      	push	{r7}
 8022c12:	b085      	sub	sp, #20
 8022c14:	af00      	add	r7, sp, #0
 8022c16:	60f8      	str	r0, [r7, #12]
 8022c18:	60b9      	str	r1, [r7, #8]
 8022c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8022c1c:	68fb      	ldr	r3, [r7, #12]
 8022c1e:	3b04      	subs	r3, #4
 8022c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8022c22:	68fb      	ldr	r3, [r7, #12]
 8022c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8022c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	3b04      	subs	r3, #4
 8022c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8022c30:	68bb      	ldr	r3, [r7, #8]
 8022c32:	f023 0201 	bic.w	r2, r3, #1
 8022c36:	68fb      	ldr	r3, [r7, #12]
 8022c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022c3a:	68fb      	ldr	r3, [r7, #12]
 8022c3c:	3b04      	subs	r3, #4
 8022c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8022c40:	4a0c      	ldr	r2, [pc, #48]	; (8022c74 <pxPortInitialiseStack+0x64>)
 8022c42:	68fb      	ldr	r3, [r7, #12]
 8022c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8022c46:	68fb      	ldr	r3, [r7, #12]
 8022c48:	3b14      	subs	r3, #20
 8022c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8022c4c:	687a      	ldr	r2, [r7, #4]
 8022c4e:	68fb      	ldr	r3, [r7, #12]
 8022c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8022c52:	68fb      	ldr	r3, [r7, #12]
 8022c54:	3b04      	subs	r3, #4
 8022c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8022c58:	68fb      	ldr	r3, [r7, #12]
 8022c5a:	f06f 0202 	mvn.w	r2, #2
 8022c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	3b20      	subs	r3, #32
 8022c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8022c66:	68fb      	ldr	r3, [r7, #12]
}
 8022c68:	4618      	mov	r0, r3
 8022c6a:	3714      	adds	r7, #20
 8022c6c:	46bd      	mov	sp, r7
 8022c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c72:	4770      	bx	lr
 8022c74:	08022c79 	.word	0x08022c79

08022c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8022c78:	b480      	push	{r7}
 8022c7a:	b085      	sub	sp, #20
 8022c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8022c7e:	2300      	movs	r3, #0
 8022c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8022c82:	4b12      	ldr	r3, [pc, #72]	; (8022ccc <prvTaskExitError+0x54>)
 8022c84:	681b      	ldr	r3, [r3, #0]
 8022c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022c8a:	d00a      	beq.n	8022ca2 <prvTaskExitError+0x2a>
	__asm volatile
 8022c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022c90:	f383 8811 	msr	BASEPRI, r3
 8022c94:	f3bf 8f6f 	isb	sy
 8022c98:	f3bf 8f4f 	dsb	sy
 8022c9c:	60fb      	str	r3, [r7, #12]
}
 8022c9e:	bf00      	nop
 8022ca0:	e7fe      	b.n	8022ca0 <prvTaskExitError+0x28>
	__asm volatile
 8022ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ca6:	f383 8811 	msr	BASEPRI, r3
 8022caa:	f3bf 8f6f 	isb	sy
 8022cae:	f3bf 8f4f 	dsb	sy
 8022cb2:	60bb      	str	r3, [r7, #8]
}
 8022cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8022cb6:	bf00      	nop
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d0fc      	beq.n	8022cb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8022cbe:	bf00      	nop
 8022cc0:	bf00      	nop
 8022cc2:	3714      	adds	r7, #20
 8022cc4:	46bd      	mov	sp, r7
 8022cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cca:	4770      	bx	lr
 8022ccc:	20000128 	.word	0x20000128

08022cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8022cd0:	4b07      	ldr	r3, [pc, #28]	; (8022cf0 <pxCurrentTCBConst2>)
 8022cd2:	6819      	ldr	r1, [r3, #0]
 8022cd4:	6808      	ldr	r0, [r1, #0]
 8022cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cda:	f380 8809 	msr	PSP, r0
 8022cde:	f3bf 8f6f 	isb	sy
 8022ce2:	f04f 0000 	mov.w	r0, #0
 8022ce6:	f380 8811 	msr	BASEPRI, r0
 8022cea:	4770      	bx	lr
 8022cec:	f3af 8000 	nop.w

08022cf0 <pxCurrentTCBConst2>:
 8022cf0:	20001d24 	.word	0x20001d24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8022cf4:	bf00      	nop
 8022cf6:	bf00      	nop

08022cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8022cf8:	4808      	ldr	r0, [pc, #32]	; (8022d1c <prvPortStartFirstTask+0x24>)
 8022cfa:	6800      	ldr	r0, [r0, #0]
 8022cfc:	6800      	ldr	r0, [r0, #0]
 8022cfe:	f380 8808 	msr	MSP, r0
 8022d02:	f04f 0000 	mov.w	r0, #0
 8022d06:	f380 8814 	msr	CONTROL, r0
 8022d0a:	b662      	cpsie	i
 8022d0c:	b661      	cpsie	f
 8022d0e:	f3bf 8f4f 	dsb	sy
 8022d12:	f3bf 8f6f 	isb	sy
 8022d16:	df00      	svc	0
 8022d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8022d1a:	bf00      	nop
 8022d1c:	e000ed08 	.word	0xe000ed08

08022d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8022d20:	b580      	push	{r7, lr}
 8022d22:	b086      	sub	sp, #24
 8022d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8022d26:	4b46      	ldr	r3, [pc, #280]	; (8022e40 <xPortStartScheduler+0x120>)
 8022d28:	681b      	ldr	r3, [r3, #0]
 8022d2a:	4a46      	ldr	r2, [pc, #280]	; (8022e44 <xPortStartScheduler+0x124>)
 8022d2c:	4293      	cmp	r3, r2
 8022d2e:	d10a      	bne.n	8022d46 <xPortStartScheduler+0x26>
	__asm volatile
 8022d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d34:	f383 8811 	msr	BASEPRI, r3
 8022d38:	f3bf 8f6f 	isb	sy
 8022d3c:	f3bf 8f4f 	dsb	sy
 8022d40:	613b      	str	r3, [r7, #16]
}
 8022d42:	bf00      	nop
 8022d44:	e7fe      	b.n	8022d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8022d46:	4b3e      	ldr	r3, [pc, #248]	; (8022e40 <xPortStartScheduler+0x120>)
 8022d48:	681b      	ldr	r3, [r3, #0]
 8022d4a:	4a3f      	ldr	r2, [pc, #252]	; (8022e48 <xPortStartScheduler+0x128>)
 8022d4c:	4293      	cmp	r3, r2
 8022d4e:	d10a      	bne.n	8022d66 <xPortStartScheduler+0x46>
	__asm volatile
 8022d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d54:	f383 8811 	msr	BASEPRI, r3
 8022d58:	f3bf 8f6f 	isb	sy
 8022d5c:	f3bf 8f4f 	dsb	sy
 8022d60:	60fb      	str	r3, [r7, #12]
}
 8022d62:	bf00      	nop
 8022d64:	e7fe      	b.n	8022d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8022d66:	4b39      	ldr	r3, [pc, #228]	; (8022e4c <xPortStartScheduler+0x12c>)
 8022d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8022d6a:	697b      	ldr	r3, [r7, #20]
 8022d6c:	781b      	ldrb	r3, [r3, #0]
 8022d6e:	b2db      	uxtb	r3, r3
 8022d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8022d72:	697b      	ldr	r3, [r7, #20]
 8022d74:	22ff      	movs	r2, #255	; 0xff
 8022d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8022d78:	697b      	ldr	r3, [r7, #20]
 8022d7a:	781b      	ldrb	r3, [r3, #0]
 8022d7c:	b2db      	uxtb	r3, r3
 8022d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8022d80:	78fb      	ldrb	r3, [r7, #3]
 8022d82:	b2db      	uxtb	r3, r3
 8022d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8022d88:	b2da      	uxtb	r2, r3
 8022d8a:	4b31      	ldr	r3, [pc, #196]	; (8022e50 <xPortStartScheduler+0x130>)
 8022d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8022d8e:	4b31      	ldr	r3, [pc, #196]	; (8022e54 <xPortStartScheduler+0x134>)
 8022d90:	2207      	movs	r2, #7
 8022d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8022d94:	e009      	b.n	8022daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8022d96:	4b2f      	ldr	r3, [pc, #188]	; (8022e54 <xPortStartScheduler+0x134>)
 8022d98:	681b      	ldr	r3, [r3, #0]
 8022d9a:	3b01      	subs	r3, #1
 8022d9c:	4a2d      	ldr	r2, [pc, #180]	; (8022e54 <xPortStartScheduler+0x134>)
 8022d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8022da0:	78fb      	ldrb	r3, [r7, #3]
 8022da2:	b2db      	uxtb	r3, r3
 8022da4:	005b      	lsls	r3, r3, #1
 8022da6:	b2db      	uxtb	r3, r3
 8022da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8022daa:	78fb      	ldrb	r3, [r7, #3]
 8022dac:	b2db      	uxtb	r3, r3
 8022dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022db2:	2b80      	cmp	r3, #128	; 0x80
 8022db4:	d0ef      	beq.n	8022d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8022db6:	4b27      	ldr	r3, [pc, #156]	; (8022e54 <xPortStartScheduler+0x134>)
 8022db8:	681b      	ldr	r3, [r3, #0]
 8022dba:	f1c3 0307 	rsb	r3, r3, #7
 8022dbe:	2b04      	cmp	r3, #4
 8022dc0:	d00a      	beq.n	8022dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8022dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022dc6:	f383 8811 	msr	BASEPRI, r3
 8022dca:	f3bf 8f6f 	isb	sy
 8022dce:	f3bf 8f4f 	dsb	sy
 8022dd2:	60bb      	str	r3, [r7, #8]
}
 8022dd4:	bf00      	nop
 8022dd6:	e7fe      	b.n	8022dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8022dd8:	4b1e      	ldr	r3, [pc, #120]	; (8022e54 <xPortStartScheduler+0x134>)
 8022dda:	681b      	ldr	r3, [r3, #0]
 8022ddc:	021b      	lsls	r3, r3, #8
 8022dde:	4a1d      	ldr	r2, [pc, #116]	; (8022e54 <xPortStartScheduler+0x134>)
 8022de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8022de2:	4b1c      	ldr	r3, [pc, #112]	; (8022e54 <xPortStartScheduler+0x134>)
 8022de4:	681b      	ldr	r3, [r3, #0]
 8022de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8022dea:	4a1a      	ldr	r2, [pc, #104]	; (8022e54 <xPortStartScheduler+0x134>)
 8022dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8022dee:	687b      	ldr	r3, [r7, #4]
 8022df0:	b2da      	uxtb	r2, r3
 8022df2:	697b      	ldr	r3, [r7, #20]
 8022df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8022df6:	4b18      	ldr	r3, [pc, #96]	; (8022e58 <xPortStartScheduler+0x138>)
 8022df8:	681b      	ldr	r3, [r3, #0]
 8022dfa:	4a17      	ldr	r2, [pc, #92]	; (8022e58 <xPortStartScheduler+0x138>)
 8022dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8022e02:	4b15      	ldr	r3, [pc, #84]	; (8022e58 <xPortStartScheduler+0x138>)
 8022e04:	681b      	ldr	r3, [r3, #0]
 8022e06:	4a14      	ldr	r2, [pc, #80]	; (8022e58 <xPortStartScheduler+0x138>)
 8022e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8022e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8022e0e:	f000 f8dd 	bl	8022fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8022e12:	4b12      	ldr	r3, [pc, #72]	; (8022e5c <xPortStartScheduler+0x13c>)
 8022e14:	2200      	movs	r2, #0
 8022e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8022e18:	f000 f8fc 	bl	8023014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8022e1c:	4b10      	ldr	r3, [pc, #64]	; (8022e60 <xPortStartScheduler+0x140>)
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	4a0f      	ldr	r2, [pc, #60]	; (8022e60 <xPortStartScheduler+0x140>)
 8022e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8022e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8022e28:	f7ff ff66 	bl	8022cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8022e2c:	f7fe feea 	bl	8021c04 <vTaskSwitchContext>
	prvTaskExitError();
 8022e30:	f7ff ff22 	bl	8022c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8022e34:	2300      	movs	r3, #0
}
 8022e36:	4618      	mov	r0, r3
 8022e38:	3718      	adds	r7, #24
 8022e3a:	46bd      	mov	sp, r7
 8022e3c:	bd80      	pop	{r7, pc}
 8022e3e:	bf00      	nop
 8022e40:	e000ed00 	.word	0xe000ed00
 8022e44:	410fc271 	.word	0x410fc271
 8022e48:	410fc270 	.word	0x410fc270
 8022e4c:	e000e400 	.word	0xe000e400
 8022e50:	20002358 	.word	0x20002358
 8022e54:	2000235c 	.word	0x2000235c
 8022e58:	e000ed20 	.word	0xe000ed20
 8022e5c:	20000128 	.word	0x20000128
 8022e60:	e000ef34 	.word	0xe000ef34

08022e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8022e64:	b480      	push	{r7}
 8022e66:	b083      	sub	sp, #12
 8022e68:	af00      	add	r7, sp, #0
	__asm volatile
 8022e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e6e:	f383 8811 	msr	BASEPRI, r3
 8022e72:	f3bf 8f6f 	isb	sy
 8022e76:	f3bf 8f4f 	dsb	sy
 8022e7a:	607b      	str	r3, [r7, #4]
}
 8022e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8022e7e:	4b0f      	ldr	r3, [pc, #60]	; (8022ebc <vPortEnterCritical+0x58>)
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	3301      	adds	r3, #1
 8022e84:	4a0d      	ldr	r2, [pc, #52]	; (8022ebc <vPortEnterCritical+0x58>)
 8022e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8022e88:	4b0c      	ldr	r3, [pc, #48]	; (8022ebc <vPortEnterCritical+0x58>)
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	2b01      	cmp	r3, #1
 8022e8e:	d10f      	bne.n	8022eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8022e90:	4b0b      	ldr	r3, [pc, #44]	; (8022ec0 <vPortEnterCritical+0x5c>)
 8022e92:	681b      	ldr	r3, [r3, #0]
 8022e94:	b2db      	uxtb	r3, r3
 8022e96:	2b00      	cmp	r3, #0
 8022e98:	d00a      	beq.n	8022eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8022e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e9e:	f383 8811 	msr	BASEPRI, r3
 8022ea2:	f3bf 8f6f 	isb	sy
 8022ea6:	f3bf 8f4f 	dsb	sy
 8022eaa:	603b      	str	r3, [r7, #0]
}
 8022eac:	bf00      	nop
 8022eae:	e7fe      	b.n	8022eae <vPortEnterCritical+0x4a>
	}
}
 8022eb0:	bf00      	nop
 8022eb2:	370c      	adds	r7, #12
 8022eb4:	46bd      	mov	sp, r7
 8022eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eba:	4770      	bx	lr
 8022ebc:	20000128 	.word	0x20000128
 8022ec0:	e000ed04 	.word	0xe000ed04

08022ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8022ec4:	b480      	push	{r7}
 8022ec6:	b083      	sub	sp, #12
 8022ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8022eca:	4b12      	ldr	r3, [pc, #72]	; (8022f14 <vPortExitCritical+0x50>)
 8022ecc:	681b      	ldr	r3, [r3, #0]
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	d10a      	bne.n	8022ee8 <vPortExitCritical+0x24>
	__asm volatile
 8022ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ed6:	f383 8811 	msr	BASEPRI, r3
 8022eda:	f3bf 8f6f 	isb	sy
 8022ede:	f3bf 8f4f 	dsb	sy
 8022ee2:	607b      	str	r3, [r7, #4]
}
 8022ee4:	bf00      	nop
 8022ee6:	e7fe      	b.n	8022ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8022ee8:	4b0a      	ldr	r3, [pc, #40]	; (8022f14 <vPortExitCritical+0x50>)
 8022eea:	681b      	ldr	r3, [r3, #0]
 8022eec:	3b01      	subs	r3, #1
 8022eee:	4a09      	ldr	r2, [pc, #36]	; (8022f14 <vPortExitCritical+0x50>)
 8022ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8022ef2:	4b08      	ldr	r3, [pc, #32]	; (8022f14 <vPortExitCritical+0x50>)
 8022ef4:	681b      	ldr	r3, [r3, #0]
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d105      	bne.n	8022f06 <vPortExitCritical+0x42>
 8022efa:	2300      	movs	r3, #0
 8022efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8022efe:	683b      	ldr	r3, [r7, #0]
 8022f00:	f383 8811 	msr	BASEPRI, r3
}
 8022f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8022f06:	bf00      	nop
 8022f08:	370c      	adds	r7, #12
 8022f0a:	46bd      	mov	sp, r7
 8022f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f10:	4770      	bx	lr
 8022f12:	bf00      	nop
 8022f14:	20000128 	.word	0x20000128
	...

08022f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8022f20:	f3ef 8009 	mrs	r0, PSP
 8022f24:	f3bf 8f6f 	isb	sy
 8022f28:	4b15      	ldr	r3, [pc, #84]	; (8022f80 <pxCurrentTCBConst>)
 8022f2a:	681a      	ldr	r2, [r3, #0]
 8022f2c:	f01e 0f10 	tst.w	lr, #16
 8022f30:	bf08      	it	eq
 8022f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8022f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f3a:	6010      	str	r0, [r2, #0]
 8022f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8022f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8022f44:	f380 8811 	msr	BASEPRI, r0
 8022f48:	f3bf 8f4f 	dsb	sy
 8022f4c:	f3bf 8f6f 	isb	sy
 8022f50:	f7fe fe58 	bl	8021c04 <vTaskSwitchContext>
 8022f54:	f04f 0000 	mov.w	r0, #0
 8022f58:	f380 8811 	msr	BASEPRI, r0
 8022f5c:	bc09      	pop	{r0, r3}
 8022f5e:	6819      	ldr	r1, [r3, #0]
 8022f60:	6808      	ldr	r0, [r1, #0]
 8022f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f66:	f01e 0f10 	tst.w	lr, #16
 8022f6a:	bf08      	it	eq
 8022f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8022f70:	f380 8809 	msr	PSP, r0
 8022f74:	f3bf 8f6f 	isb	sy
 8022f78:	4770      	bx	lr
 8022f7a:	bf00      	nop
 8022f7c:	f3af 8000 	nop.w

08022f80 <pxCurrentTCBConst>:
 8022f80:	20001d24 	.word	0x20001d24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8022f84:	bf00      	nop
 8022f86:	bf00      	nop

08022f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8022f88:	b580      	push	{r7, lr}
 8022f8a:	b082      	sub	sp, #8
 8022f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8022f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022f92:	f383 8811 	msr	BASEPRI, r3
 8022f96:	f3bf 8f6f 	isb	sy
 8022f9a:	f3bf 8f4f 	dsb	sy
 8022f9e:	607b      	str	r3, [r7, #4]
}
 8022fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8022fa2:	f7fe fd75 	bl	8021a90 <xTaskIncrementTick>
 8022fa6:	4603      	mov	r3, r0
 8022fa8:	2b00      	cmp	r3, #0
 8022faa:	d003      	beq.n	8022fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8022fac:	4b06      	ldr	r3, [pc, #24]	; (8022fc8 <xPortSysTickHandler+0x40>)
 8022fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022fb2:	601a      	str	r2, [r3, #0]
 8022fb4:	2300      	movs	r3, #0
 8022fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8022fb8:	683b      	ldr	r3, [r7, #0]
 8022fba:	f383 8811 	msr	BASEPRI, r3
}
 8022fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8022fc0:	bf00      	nop
 8022fc2:	3708      	adds	r7, #8
 8022fc4:	46bd      	mov	sp, r7
 8022fc6:	bd80      	pop	{r7, pc}
 8022fc8:	e000ed04 	.word	0xe000ed04

08022fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8022fcc:	b480      	push	{r7}
 8022fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8022fd0:	4b0b      	ldr	r3, [pc, #44]	; (8023000 <vPortSetupTimerInterrupt+0x34>)
 8022fd2:	2200      	movs	r2, #0
 8022fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8022fd6:	4b0b      	ldr	r3, [pc, #44]	; (8023004 <vPortSetupTimerInterrupt+0x38>)
 8022fd8:	2200      	movs	r2, #0
 8022fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8022fdc:	4b0a      	ldr	r3, [pc, #40]	; (8023008 <vPortSetupTimerInterrupt+0x3c>)
 8022fde:	681b      	ldr	r3, [r3, #0]
 8022fe0:	4a0a      	ldr	r2, [pc, #40]	; (802300c <vPortSetupTimerInterrupt+0x40>)
 8022fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8022fe6:	099b      	lsrs	r3, r3, #6
 8022fe8:	4a09      	ldr	r2, [pc, #36]	; (8023010 <vPortSetupTimerInterrupt+0x44>)
 8022fea:	3b01      	subs	r3, #1
 8022fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8022fee:	4b04      	ldr	r3, [pc, #16]	; (8023000 <vPortSetupTimerInterrupt+0x34>)
 8022ff0:	2207      	movs	r2, #7
 8022ff2:	601a      	str	r2, [r3, #0]
}
 8022ff4:	bf00      	nop
 8022ff6:	46bd      	mov	sp, r7
 8022ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ffc:	4770      	bx	lr
 8022ffe:	bf00      	nop
 8023000:	e000e010 	.word	0xe000e010
 8023004:	e000e018 	.word	0xe000e018
 8023008:	20000000 	.word	0x20000000
 802300c:	10624dd3 	.word	0x10624dd3
 8023010:	e000e014 	.word	0xe000e014

08023014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8023024 <vPortEnableVFP+0x10>
 8023018:	6801      	ldr	r1, [r0, #0]
 802301a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802301e:	6001      	str	r1, [r0, #0]
 8023020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023022:	bf00      	nop
 8023024:	e000ed88 	.word	0xe000ed88

08023028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8023028:	b480      	push	{r7}
 802302a:	b085      	sub	sp, #20
 802302c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802302e:	f3ef 8305 	mrs	r3, IPSR
 8023032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8023034:	68fb      	ldr	r3, [r7, #12]
 8023036:	2b0f      	cmp	r3, #15
 8023038:	d914      	bls.n	8023064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802303a:	4a17      	ldr	r2, [pc, #92]	; (8023098 <vPortValidateInterruptPriority+0x70>)
 802303c:	68fb      	ldr	r3, [r7, #12]
 802303e:	4413      	add	r3, r2
 8023040:	781b      	ldrb	r3, [r3, #0]
 8023042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8023044:	4b15      	ldr	r3, [pc, #84]	; (802309c <vPortValidateInterruptPriority+0x74>)
 8023046:	781b      	ldrb	r3, [r3, #0]
 8023048:	7afa      	ldrb	r2, [r7, #11]
 802304a:	429a      	cmp	r2, r3
 802304c:	d20a      	bcs.n	8023064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023052:	f383 8811 	msr	BASEPRI, r3
 8023056:	f3bf 8f6f 	isb	sy
 802305a:	f3bf 8f4f 	dsb	sy
 802305e:	607b      	str	r3, [r7, #4]
}
 8023060:	bf00      	nop
 8023062:	e7fe      	b.n	8023062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8023064:	4b0e      	ldr	r3, [pc, #56]	; (80230a0 <vPortValidateInterruptPriority+0x78>)
 8023066:	681b      	ldr	r3, [r3, #0]
 8023068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802306c:	4b0d      	ldr	r3, [pc, #52]	; (80230a4 <vPortValidateInterruptPriority+0x7c>)
 802306e:	681b      	ldr	r3, [r3, #0]
 8023070:	429a      	cmp	r2, r3
 8023072:	d90a      	bls.n	802308a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8023074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023078:	f383 8811 	msr	BASEPRI, r3
 802307c:	f3bf 8f6f 	isb	sy
 8023080:	f3bf 8f4f 	dsb	sy
 8023084:	603b      	str	r3, [r7, #0]
}
 8023086:	bf00      	nop
 8023088:	e7fe      	b.n	8023088 <vPortValidateInterruptPriority+0x60>
	}
 802308a:	bf00      	nop
 802308c:	3714      	adds	r7, #20
 802308e:	46bd      	mov	sp, r7
 8023090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023094:	4770      	bx	lr
 8023096:	bf00      	nop
 8023098:	e000e3f0 	.word	0xe000e3f0
 802309c:	20002358 	.word	0x20002358
 80230a0:	e000ed0c 	.word	0xe000ed0c
 80230a4:	2000235c 	.word	0x2000235c

080230a8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80230a8:	b580      	push	{r7, lr}
 80230aa:	b084      	sub	sp, #16
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80230b0:	2300      	movs	r3, #0
 80230b2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80230b4:	687b      	ldr	r3, [r7, #4]
 80230b6:	f003 0307 	and.w	r3, r3, #7
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	d004      	beq.n	80230c8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80230be:	687b      	ldr	r3, [r7, #4]
 80230c0:	f023 0307 	bic.w	r3, r3, #7
 80230c4:	3308      	adds	r3, #8
 80230c6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80230c8:	f7fe fc26 	bl	8021918 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80230cc:	4b16      	ldr	r3, [pc, #88]	; (8023128 <pvPortMalloc+0x80>)
 80230ce:	681b      	ldr	r3, [r3, #0]
 80230d0:	2b00      	cmp	r3, #0
 80230d2:	d105      	bne.n	80230e0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80230d4:	4b15      	ldr	r3, [pc, #84]	; (802312c <pvPortMalloc+0x84>)
 80230d6:	f023 0307 	bic.w	r3, r3, #7
 80230da:	461a      	mov	r2, r3
 80230dc:	4b12      	ldr	r3, [pc, #72]	; (8023128 <pvPortMalloc+0x80>)
 80230de:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80230e0:	4b13      	ldr	r3, [pc, #76]	; (8023130 <pvPortMalloc+0x88>)
 80230e2:	681a      	ldr	r2, [r3, #0]
 80230e4:	687b      	ldr	r3, [r7, #4]
 80230e6:	4413      	add	r3, r2
 80230e8:	f24b 1227 	movw	r2, #45351	; 0xb127
 80230ec:	4293      	cmp	r3, r2
 80230ee:	d813      	bhi.n	8023118 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80230f0:	4b0f      	ldr	r3, [pc, #60]	; (8023130 <pvPortMalloc+0x88>)
 80230f2:	681a      	ldr	r2, [r3, #0]
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	441a      	add	r2, r3
 80230f8:	4b0d      	ldr	r3, [pc, #52]	; (8023130 <pvPortMalloc+0x88>)
 80230fa:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80230fc:	429a      	cmp	r2, r3
 80230fe:	d90b      	bls.n	8023118 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8023100:	4b09      	ldr	r3, [pc, #36]	; (8023128 <pvPortMalloc+0x80>)
 8023102:	681a      	ldr	r2, [r3, #0]
 8023104:	4b0a      	ldr	r3, [pc, #40]	; (8023130 <pvPortMalloc+0x88>)
 8023106:	681b      	ldr	r3, [r3, #0]
 8023108:	4413      	add	r3, r2
 802310a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 802310c:	4b08      	ldr	r3, [pc, #32]	; (8023130 <pvPortMalloc+0x88>)
 802310e:	681a      	ldr	r2, [r3, #0]
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	4413      	add	r3, r2
 8023114:	4a06      	ldr	r2, [pc, #24]	; (8023130 <pvPortMalloc+0x88>)
 8023116:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8023118:	f7fe fc0c 	bl	8021934 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 802311c:	68fb      	ldr	r3, [r7, #12]
}
 802311e:	4618      	mov	r0, r3
 8023120:	3710      	adds	r7, #16
 8023122:	46bd      	mov	sp, r7
 8023124:	bd80      	pop	{r7, pc}
 8023126:	bf00      	nop
 8023128:	2000d494 	.word	0x2000d494
 802312c:	20002368 	.word	0x20002368
 8023130:	2000d490 	.word	0x2000d490

08023134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023134:	b480      	push	{r7}
 8023136:	b085      	sub	sp, #20
 8023138:	af00      	add	r7, sp, #0
 802313a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 802313c:	687b      	ldr	r3, [r7, #4]
 802313e:	2b00      	cmp	r3, #0
 8023140:	d00a      	beq.n	8023158 <vPortFree+0x24>
	__asm volatile
 8023142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023146:	f383 8811 	msr	BASEPRI, r3
 802314a:	f3bf 8f6f 	isb	sy
 802314e:	f3bf 8f4f 	dsb	sy
 8023152:	60fb      	str	r3, [r7, #12]
}
 8023154:	bf00      	nop
 8023156:	e7fe      	b.n	8023156 <vPortFree+0x22>
}
 8023158:	bf00      	nop
 802315a:	3714      	adds	r7, #20
 802315c:	46bd      	mov	sp, r7
 802315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023162:	4770      	bx	lr

08023164 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8023164:	b480      	push	{r7}
 8023166:	b083      	sub	sp, #12
 8023168:	af00      	add	r7, sp, #0
 802316a:	6078      	str	r0, [r7, #4]
 802316c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 802316e:	683a      	ldr	r2, [r7, #0]
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	4293      	cmp	r3, r2
 8023174:	bf38      	it	cc
 8023176:	4613      	movcc	r3, r2
}
 8023178:	4618      	mov	r0, r3
 802317a:	370c      	adds	r7, #12
 802317c:	46bd      	mov	sp, r7
 802317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023182:	4770      	bx	lr

08023184 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8023184:	b480      	push	{r7}
 8023186:	b083      	sub	sp, #12
 8023188:	af00      	add	r7, sp, #0
 802318a:	6078      	str	r0, [r7, #4]
 802318c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 802318e:	683a      	ldr	r2, [r7, #0]
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	4293      	cmp	r3, r2
 8023194:	bf28      	it	cs
 8023196:	4613      	movcs	r3, r2
}
 8023198:	4618      	mov	r0, r3
 802319a:	370c      	adds	r7, #12
 802319c:	46bd      	mov	sp, r7
 802319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a2:	4770      	bx	lr

080231a4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80231a4:	b480      	push	{r7}
 80231a6:	b083      	sub	sp, #12
 80231a8:	af00      	add	r7, sp, #0
 80231aa:	6078      	str	r0, [r7, #4]
 80231ac:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	683a      	ldr	r2, [r7, #0]
 80231b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80231b6:	6839      	ldr	r1, [r7, #0]
 80231b8:	fb01 f202 	mul.w	r2, r1, r2
 80231bc:	1a9b      	subs	r3, r3, r2
 80231be:	687a      	ldr	r2, [r7, #4]
 80231c0:	1ad3      	subs	r3, r2, r3
}
 80231c2:	4618      	mov	r0, r3
 80231c4:	370c      	adds	r7, #12
 80231c6:	46bd      	mov	sp, r7
 80231c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231cc:	4770      	bx	lr

080231ce <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80231ce:	b580      	push	{r7, lr}
 80231d0:	b082      	sub	sp, #8
 80231d2:	af00      	add	r7, sp, #0
 80231d4:	6078      	str	r0, [r7, #4]
 80231d6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80231d8:	687a      	ldr	r2, [r7, #4]
 80231da:	683b      	ldr	r3, [r7, #0]
 80231dc:	4413      	add	r3, r2
 80231de:	3b01      	subs	r3, #1
 80231e0:	6839      	ldr	r1, [r7, #0]
 80231e2:	4618      	mov	r0, r3
 80231e4:	f7ff ffde 	bl	80231a4 <lfs_aligndown>
 80231e8:	4603      	mov	r3, r0
}
 80231ea:	4618      	mov	r0, r3
 80231ec:	3708      	adds	r7, #8
 80231ee:	46bd      	mov	sp, r7
 80231f0:	bd80      	pop	{r7, pc}

080231f2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80231f2:	b480      	push	{r7}
 80231f4:	b083      	sub	sp, #12
 80231f6:	af00      	add	r7, sp, #0
 80231f8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80231fa:	687b      	ldr	r3, [r7, #4]
 80231fc:	3b01      	subs	r3, #1
 80231fe:	fab3 f383 	clz	r3, r3
 8023202:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8023206:	4618      	mov	r0, r3
 8023208:	370c      	adds	r7, #12
 802320a:	46bd      	mov	sp, r7
 802320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023210:	4770      	bx	lr

08023212 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023212:	b480      	push	{r7}
 8023214:	b083      	sub	sp, #12
 8023216:	af00      	add	r7, sp, #0
 8023218:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	fa93 f3a3 	rbit	r3, r3
 8023220:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8023224:	4618      	mov	r0, r3
 8023226:	370c      	adds	r7, #12
 8023228:	46bd      	mov	sp, r7
 802322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802322e:	4770      	bx	lr

08023230 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8023230:	b580      	push	{r7, lr}
 8023232:	b082      	sub	sp, #8
 8023234:	af00      	add	r7, sp, #0
 8023236:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8023238:	6878      	ldr	r0, [r7, #4]
 802323a:	f7ed fd55 	bl	8010ce8 <__popcountsi2>
 802323e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8023240:	4618      	mov	r0, r3
 8023242:	3708      	adds	r7, #8
 8023244:	46bd      	mov	sp, r7
 8023246:	bd80      	pop	{r7, pc}

08023248 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8023248:	b480      	push	{r7}
 802324a:	b083      	sub	sp, #12
 802324c:	af00      	add	r7, sp, #0
 802324e:	6078      	str	r0, [r7, #4]
 8023250:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8023252:	687a      	ldr	r2, [r7, #4]
 8023254:	683b      	ldr	r3, [r7, #0]
 8023256:	1ad3      	subs	r3, r2, r3
}
 8023258:	4618      	mov	r0, r3
 802325a:	370c      	adds	r7, #12
 802325c:	46bd      	mov	sp, r7
 802325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023262:	4770      	bx	lr

08023264 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8023264:	b480      	push	{r7}
 8023266:	b083      	sub	sp, #12
 8023268:	af00      	add	r7, sp, #0
 802326a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 802326c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 802326e:	4618      	mov	r0, r3
 8023270:	370c      	adds	r7, #12
 8023272:	46bd      	mov	sp, r7
 8023274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023278:	4770      	bx	lr

0802327a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 802327a:	b580      	push	{r7, lr}
 802327c:	b082      	sub	sp, #8
 802327e:	af00      	add	r7, sp, #0
 8023280:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8023282:	6878      	ldr	r0, [r7, #4]
 8023284:	f7ff ffee 	bl	8023264 <lfs_fromle32>
 8023288:	4603      	mov	r3, r0
}
 802328a:	4618      	mov	r0, r3
 802328c:	3708      	adds	r7, #8
 802328e:	46bd      	mov	sp, r7
 8023290:	bd80      	pop	{r7, pc}

08023292 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8023292:	b480      	push	{r7}
 8023294:	b083      	sub	sp, #12
 8023296:	af00      	add	r7, sp, #0
 8023298:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 802329e:	4618      	mov	r0, r3
 80232a0:	370c      	adds	r7, #12
 80232a2:	46bd      	mov	sp, r7
 80232a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232a8:	4770      	bx	lr

080232aa <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80232aa:	b580      	push	{r7, lr}
 80232ac:	b082      	sub	sp, #8
 80232ae:	af00      	add	r7, sp, #0
 80232b0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80232b2:	6878      	ldr	r0, [r7, #4]
 80232b4:	f7ff ffed 	bl	8023292 <lfs_frombe32>
 80232b8:	4603      	mov	r3, r0
}
 80232ba:	4618      	mov	r0, r3
 80232bc:	3708      	adds	r7, #8
 80232be:	46bd      	mov	sp, r7
 80232c0:	bd80      	pop	{r7, pc}

080232c2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80232c2:	b580      	push	{r7, lr}
 80232c4:	b082      	sub	sp, #8
 80232c6:	af00      	add	r7, sp, #0
 80232c8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80232ca:	6878      	ldr	r0, [r7, #4]
 80232cc:	f008 feb8 	bl	802c040 <malloc>
 80232d0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80232d2:	4618      	mov	r0, r3
 80232d4:	3708      	adds	r7, #8
 80232d6:	46bd      	mov	sp, r7
 80232d8:	bd80      	pop	{r7, pc}

080232da <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80232da:	b580      	push	{r7, lr}
 80232dc:	b082      	sub	sp, #8
 80232de:	af00      	add	r7, sp, #0
 80232e0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80232e2:	6878      	ldr	r0, [r7, #4]
 80232e4:	f008 feb4 	bl	802c050 <free>
#else
    (void)p;
#endif
}
 80232e8:	bf00      	nop
 80232ea:	3708      	adds	r7, #8
 80232ec:	46bd      	mov	sp, r7
 80232ee:	bd80      	pop	{r7, pc}

080232f0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80232f0:	b480      	push	{r7}
 80232f2:	b083      	sub	sp, #12
 80232f4:	af00      	add	r7, sp, #0
 80232f6:	6078      	str	r0, [r7, #4]
 80232f8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80232fa:	683b      	ldr	r3, [r7, #0]
 80232fc:	f04f 32ff 	mov.w	r2, #4294967295
 8023300:	601a      	str	r2, [r3, #0]
}
 8023302:	bf00      	nop
 8023304:	370c      	adds	r7, #12
 8023306:	46bd      	mov	sp, r7
 8023308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802330c:	4770      	bx	lr

0802330e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 802330e:	b580      	push	{r7, lr}
 8023310:	b082      	sub	sp, #8
 8023312:	af00      	add	r7, sp, #0
 8023314:	6078      	str	r0, [r7, #4]
 8023316:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023318:	683b      	ldr	r3, [r7, #0]
 802331a:	68d8      	ldr	r0, [r3, #12]
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023322:	461a      	mov	r2, r3
 8023324:	21ff      	movs	r1, #255	; 0xff
 8023326:	f00a f827 	bl	802d378 <memset>
    pcache->block = LFS_BLOCK_NULL;
 802332a:	683b      	ldr	r3, [r7, #0]
 802332c:	f04f 32ff 	mov.w	r2, #4294967295
 8023330:	601a      	str	r2, [r3, #0]
}
 8023332:	bf00      	nop
 8023334:	3708      	adds	r7, #8
 8023336:	46bd      	mov	sp, r7
 8023338:	bd80      	pop	{r7, pc}
	...

0802333c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 802333c:	b5b0      	push	{r4, r5, r7, lr}
 802333e:	b08a      	sub	sp, #40	; 0x28
 8023340:	af02      	add	r7, sp, #8
 8023342:	60f8      	str	r0, [r7, #12]
 8023344:	60b9      	str	r1, [r7, #8]
 8023346:	607a      	str	r2, [r7, #4]
 8023348:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 802334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802334c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 802334e:	68fb      	ldr	r3, [r7, #12]
 8023350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023352:	6a1b      	ldr	r3, [r3, #32]
 8023354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023356:	429a      	cmp	r2, r3
 8023358:	d208      	bcs.n	802336c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 802335a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802335e:	441a      	add	r2, r3
 8023360:	68fb      	ldr	r3, [r7, #12]
 8023362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023364:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8023366:	429a      	cmp	r2, r3
 8023368:	f240 811b 	bls.w	80235a2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 802336c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023370:	e11c      	b.n	80235ac <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8023372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023374:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8023376:	68bb      	ldr	r3, [r7, #8]
 8023378:	2b00      	cmp	r3, #0
 802337a:	d03f      	beq.n	80233fc <lfs_bd_read+0xc0>
 802337c:	68bb      	ldr	r3, [r7, #8]
 802337e:	681b      	ldr	r3, [r3, #0]
 8023380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023382:	429a      	cmp	r2, r3
 8023384:	d13a      	bne.n	80233fc <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8023386:	68bb      	ldr	r3, [r7, #8]
 8023388:	685a      	ldr	r2, [r3, #4]
 802338a:	68bb      	ldr	r3, [r7, #8]
 802338c:	689b      	ldr	r3, [r3, #8]
 802338e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8023390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023392:	429a      	cmp	r2, r3
 8023394:	d232      	bcs.n	80233fc <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8023396:	68bb      	ldr	r3, [r7, #8]
 8023398:	685b      	ldr	r3, [r3, #4]
 802339a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802339c:	429a      	cmp	r2, r3
 802339e:	d324      	bcc.n	80233ea <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80233a0:	68bb      	ldr	r3, [r7, #8]
 80233a2:	689a      	ldr	r2, [r3, #8]
 80233a4:	68bb      	ldr	r3, [r7, #8]
 80233a6:	6859      	ldr	r1, [r3, #4]
 80233a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80233aa:	1acb      	subs	r3, r1, r3
 80233ac:	4413      	add	r3, r2
 80233ae:	4619      	mov	r1, r3
 80233b0:	69b8      	ldr	r0, [r7, #24]
 80233b2:	f7ff fee7 	bl	8023184 <lfs_min>
 80233b6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80233b8:	68bb      	ldr	r3, [r7, #8]
 80233ba:	68da      	ldr	r2, [r3, #12]
 80233bc:	68bb      	ldr	r3, [r7, #8]
 80233be:	685b      	ldr	r3, [r3, #4]
 80233c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80233c2:	1acb      	subs	r3, r1, r3
 80233c4:	4413      	add	r3, r2
 80233c6:	69ba      	ldr	r2, [r7, #24]
 80233c8:	4619      	mov	r1, r3
 80233ca:	69f8      	ldr	r0, [r7, #28]
 80233cc:	f00a f9a9 	bl	802d722 <memcpy>

                data += diff;
 80233d0:	69fa      	ldr	r2, [r7, #28]
 80233d2:	69bb      	ldr	r3, [r7, #24]
 80233d4:	4413      	add	r3, r2
 80233d6:	61fb      	str	r3, [r7, #28]
                off += diff;
 80233d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80233da:	69bb      	ldr	r3, [r7, #24]
 80233dc:	4413      	add	r3, r2
 80233de:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80233e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80233e2:	69bb      	ldr	r3, [r7, #24]
 80233e4:	1ad3      	subs	r3, r2, r3
 80233e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80233e8:	e0db      	b.n	80235a2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80233ea:	68bb      	ldr	r3, [r7, #8]
 80233ec:	685a      	ldr	r2, [r3, #4]
 80233ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80233f0:	1ad3      	subs	r3, r2, r3
 80233f2:	4619      	mov	r1, r3
 80233f4:	69b8      	ldr	r0, [r7, #24]
 80233f6:	f7ff fec5 	bl	8023184 <lfs_min>
 80233fa:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023402:	429a      	cmp	r2, r3
 8023404:	d13a      	bne.n	802347c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8023406:	687b      	ldr	r3, [r7, #4]
 8023408:	685a      	ldr	r2, [r3, #4]
 802340a:	687b      	ldr	r3, [r7, #4]
 802340c:	689b      	ldr	r3, [r3, #8]
 802340e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023412:	429a      	cmp	r2, r3
 8023414:	d232      	bcs.n	802347c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	685b      	ldr	r3, [r3, #4]
 802341a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802341c:	429a      	cmp	r2, r3
 802341e:	d324      	bcc.n	802346a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023420:	687b      	ldr	r3, [r7, #4]
 8023422:	689a      	ldr	r2, [r3, #8]
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	6859      	ldr	r1, [r3, #4]
 8023428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802342a:	1acb      	subs	r3, r1, r3
 802342c:	4413      	add	r3, r2
 802342e:	4619      	mov	r1, r3
 8023430:	69b8      	ldr	r0, [r7, #24]
 8023432:	f7ff fea7 	bl	8023184 <lfs_min>
 8023436:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	68da      	ldr	r2, [r3, #12]
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	685b      	ldr	r3, [r3, #4]
 8023440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023442:	1acb      	subs	r3, r1, r3
 8023444:	4413      	add	r3, r2
 8023446:	69ba      	ldr	r2, [r7, #24]
 8023448:	4619      	mov	r1, r3
 802344a:	69f8      	ldr	r0, [r7, #28]
 802344c:	f00a f969 	bl	802d722 <memcpy>

                data += diff;
 8023450:	69fa      	ldr	r2, [r7, #28]
 8023452:	69bb      	ldr	r3, [r7, #24]
 8023454:	4413      	add	r3, r2
 8023456:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802345a:	69bb      	ldr	r3, [r7, #24]
 802345c:	4413      	add	r3, r2
 802345e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023462:	69bb      	ldr	r3, [r7, #24]
 8023464:	1ad3      	subs	r3, r2, r3
 8023466:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023468:	e09b      	b.n	80235a2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 802346a:	687b      	ldr	r3, [r7, #4]
 802346c:	685a      	ldr	r2, [r3, #4]
 802346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023470:	1ad3      	subs	r3, r2, r3
 8023472:	4619      	mov	r1, r3
 8023474:	69b8      	ldr	r0, [r7, #24]
 8023476:	f7ff fe85 	bl	8023184 <lfs_min>
 802347a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 802347c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802347e:	683b      	ldr	r3, [r7, #0]
 8023480:	429a      	cmp	r2, r3
 8023482:	d336      	bcc.n	80234f2 <lfs_bd_read+0x1b6>
 8023484:	68fb      	ldr	r3, [r7, #12]
 8023486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023488:	695a      	ldr	r2, [r3, #20]
 802348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802348c:	fbb3 f1f2 	udiv	r1, r3, r2
 8023490:	fb01 f202 	mul.w	r2, r1, r2
 8023494:	1a9b      	subs	r3, r3, r2
 8023496:	2b00      	cmp	r3, #0
 8023498:	d12b      	bne.n	80234f2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 802349a:	68fb      	ldr	r3, [r7, #12]
 802349c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802349e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80234a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80234a2:	429a      	cmp	r2, r3
 80234a4:	d325      	bcc.n	80234f2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80234a6:	68fb      	ldr	r3, [r7, #12]
 80234a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80234aa:	695b      	ldr	r3, [r3, #20]
 80234ac:	4619      	mov	r1, r3
 80234ae:	69b8      	ldr	r0, [r7, #24]
 80234b0:	f7ff fe78 	bl	80231a4 <lfs_aligndown>
 80234b4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80234b6:	68fb      	ldr	r3, [r7, #12]
 80234b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80234ba:	685c      	ldr	r4, [r3, #4]
 80234bc:	68fb      	ldr	r3, [r7, #12]
 80234be:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80234c0:	69bb      	ldr	r3, [r7, #24]
 80234c2:	9300      	str	r3, [sp, #0]
 80234c4:	69fb      	ldr	r3, [r7, #28]
 80234c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80234c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80234ca:	47a0      	blx	r4
 80234cc:	6178      	str	r0, [r7, #20]
            if (err) {
 80234ce:	697b      	ldr	r3, [r7, #20]
 80234d0:	2b00      	cmp	r3, #0
 80234d2:	d001      	beq.n	80234d8 <lfs_bd_read+0x19c>
                return err;
 80234d4:	697b      	ldr	r3, [r7, #20]
 80234d6:	e069      	b.n	80235ac <lfs_bd_read+0x270>
            }

            data += diff;
 80234d8:	69fa      	ldr	r2, [r7, #28]
 80234da:	69bb      	ldr	r3, [r7, #24]
 80234dc:	4413      	add	r3, r2
 80234de:	61fb      	str	r3, [r7, #28]
            off += diff;
 80234e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80234e2:	69bb      	ldr	r3, [r7, #24]
 80234e4:	4413      	add	r3, r2
 80234e6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80234e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80234ea:	69bb      	ldr	r3, [r7, #24]
 80234ec:	1ad3      	subs	r3, r2, r3
 80234ee:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 80234f0:	e057      	b.n	80235a2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 80234f2:	68fb      	ldr	r3, [r7, #12]
 80234f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80234f6:	6a1b      	ldr	r3, [r3, #32]
 80234f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80234fa:	429a      	cmp	r2, r3
 80234fc:	d305      	bcc.n	802350a <lfs_bd_read+0x1ce>
 80234fe:	4b2d      	ldr	r3, [pc, #180]	; (80235b4 <lfs_bd_read+0x278>)
 8023500:	4a2d      	ldr	r2, [pc, #180]	; (80235b8 <lfs_bd_read+0x27c>)
 8023502:	216b      	movs	r1, #107	; 0x6b
 8023504:	482d      	ldr	r0, [pc, #180]	; (80235bc <lfs_bd_read+0x280>)
 8023506:	f008 fd67 	bl	802bfd8 <__assert_func>
        rcache->block = block;
 802350a:	687b      	ldr	r3, [r7, #4]
 802350c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802350e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023510:	68fb      	ldr	r3, [r7, #12]
 8023512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023514:	695b      	ldr	r3, [r3, #20]
 8023516:	4619      	mov	r1, r3
 8023518:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802351a:	f7ff fe43 	bl	80231a4 <lfs_aligndown>
 802351e:	4602      	mov	r2, r0
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023526:	683b      	ldr	r3, [r7, #0]
 8023528:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 802352a:	68fb      	ldr	r3, [r7, #12]
 802352c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802352e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023530:	4619      	mov	r1, r3
 8023532:	4610      	mov	r0, r2
 8023534:	f7ff fe4b 	bl	80231ce <lfs_alignup>
 8023538:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 802353a:	68fb      	ldr	r3, [r7, #12]
 802353c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802353e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023540:	4619      	mov	r1, r3
 8023542:	4610      	mov	r0, r2
 8023544:	f7ff fe1e 	bl	8023184 <lfs_min>
 8023548:	4602      	mov	r2, r0
                - rcache->off,
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 802354e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8023550:	68fb      	ldr	r3, [r7, #12]
 8023552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8023556:	4619      	mov	r1, r3
 8023558:	4610      	mov	r0, r2
 802355a:	f7ff fe13 	bl	8023184 <lfs_min>
 802355e:	4602      	mov	r2, r0
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023564:	68fb      	ldr	r3, [r7, #12]
 8023566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023568:	685c      	ldr	r4, [r3, #4]
 802356a:	68fb      	ldr	r3, [r7, #12]
 802356c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	6819      	ldr	r1, [r3, #0]
 8023572:	687b      	ldr	r3, [r7, #4]
 8023574:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	689b      	ldr	r3, [r3, #8]
 802357e:	9300      	str	r3, [sp, #0]
 8023580:	462b      	mov	r3, r5
 8023582:	47a0      	blx	r4
 8023584:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8023586:	693b      	ldr	r3, [r7, #16]
 8023588:	2b00      	cmp	r3, #0
 802358a:	dd05      	ble.n	8023598 <lfs_bd_read+0x25c>
 802358c:	4b0c      	ldr	r3, [pc, #48]	; (80235c0 <lfs_bd_read+0x284>)
 802358e:	4a0a      	ldr	r2, [pc, #40]	; (80235b8 <lfs_bd_read+0x27c>)
 8023590:	2176      	movs	r1, #118	; 0x76
 8023592:	480a      	ldr	r0, [pc, #40]	; (80235bc <lfs_bd_read+0x280>)
 8023594:	f008 fd20 	bl	802bfd8 <__assert_func>
        if (err) {
 8023598:	693b      	ldr	r3, [r7, #16]
 802359a:	2b00      	cmp	r3, #0
 802359c:	d001      	beq.n	80235a2 <lfs_bd_read+0x266>
            return err;
 802359e:	693b      	ldr	r3, [r7, #16]
 80235a0:	e004      	b.n	80235ac <lfs_bd_read+0x270>
    while (size > 0) {
 80235a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	f47f aee4 	bne.w	8023372 <lfs_bd_read+0x36>
        }
    }

    return 0;
 80235aa:	2300      	movs	r3, #0
}
 80235ac:	4618      	mov	r0, r3
 80235ae:	3720      	adds	r7, #32
 80235b0:	46bd      	mov	sp, r7
 80235b2:	bdb0      	pop	{r4, r5, r7, pc}
 80235b4:	08032f20 	.word	0x08032f20
 80235b8:	080341ac 	.word	0x080341ac
 80235bc:	08032f40 	.word	0x08032f40
 80235c0:	08032f74 	.word	0x08032f74

080235c4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80235c4:	b580      	push	{r7, lr}
 80235c6:	b08e      	sub	sp, #56	; 0x38
 80235c8:	af04      	add	r7, sp, #16
 80235ca:	60f8      	str	r0, [r7, #12]
 80235cc:	60b9      	str	r1, [r7, #8]
 80235ce:	607a      	str	r2, [r7, #4]
 80235d0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80235d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80235d4:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 80235d6:	2300      	movs	r3, #0
 80235d8:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80235da:	2300      	movs	r3, #0
 80235dc:	627b      	str	r3, [r7, #36]	; 0x24
 80235de:	e039      	b.n	8023654 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80235e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80235e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235e4:	1ad3      	subs	r3, r2, r3
 80235e6:	2108      	movs	r1, #8
 80235e8:	4618      	mov	r0, r3
 80235ea:	f7ff fdcb 	bl	8023184 <lfs_min>
 80235ee:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 80235f0:	683a      	ldr	r2, [r7, #0]
 80235f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235f4:	1ad1      	subs	r1, r2, r3
 80235f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80235f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235fa:	4413      	add	r3, r2
 80235fc:	69fa      	ldr	r2, [r7, #28]
 80235fe:	9203      	str	r2, [sp, #12]
 8023600:	f107 0210 	add.w	r2, r7, #16
 8023604:	9202      	str	r2, [sp, #8]
 8023606:	9301      	str	r3, [sp, #4]
 8023608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802360a:	9300      	str	r3, [sp, #0]
 802360c:	460b      	mov	r3, r1
 802360e:	687a      	ldr	r2, [r7, #4]
 8023610:	68b9      	ldr	r1, [r7, #8]
 8023612:	68f8      	ldr	r0, [r7, #12]
 8023614:	f7ff fe92 	bl	802333c <lfs_bd_read>
 8023618:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 802361a:	69bb      	ldr	r3, [r7, #24]
 802361c:	2b00      	cmp	r3, #0
 802361e:	d001      	beq.n	8023624 <lfs_bd_cmp+0x60>
            return res;
 8023620:	69bb      	ldr	r3, [r7, #24]
 8023622:	e01c      	b.n	802365e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023624:	6a3a      	ldr	r2, [r7, #32]
 8023626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023628:	18d1      	adds	r1, r2, r3
 802362a:	f107 0310 	add.w	r3, r7, #16
 802362e:	69fa      	ldr	r2, [r7, #28]
 8023630:	4618      	mov	r0, r3
 8023632:	f009 fe77 	bl	802d324 <memcmp>
 8023636:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023638:	69bb      	ldr	r3, [r7, #24]
 802363a:	2b00      	cmp	r3, #0
 802363c:	d006      	beq.n	802364c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 802363e:	69bb      	ldr	r3, [r7, #24]
 8023640:	2b00      	cmp	r3, #0
 8023642:	da01      	bge.n	8023648 <lfs_bd_cmp+0x84>
 8023644:	2301      	movs	r3, #1
 8023646:	e00a      	b.n	802365e <lfs_bd_cmp+0x9a>
 8023648:	2302      	movs	r3, #2
 802364a:	e008      	b.n	802365e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 802364c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802364e:	69fb      	ldr	r3, [r7, #28]
 8023650:	4413      	add	r3, r2
 8023652:	627b      	str	r3, [r7, #36]	; 0x24
 8023654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023658:	429a      	cmp	r2, r3
 802365a:	d3c1      	bcc.n	80235e0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 802365c:	2300      	movs	r3, #0
}
 802365e:	4618      	mov	r0, r3
 8023660:	3728      	adds	r7, #40	; 0x28
 8023662:	46bd      	mov	sp, r7
 8023664:	bd80      	pop	{r7, pc}
	...

08023668 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023668:	b5b0      	push	{r4, r5, r7, lr}
 802366a:	b08c      	sub	sp, #48	; 0x30
 802366c:	af04      	add	r7, sp, #16
 802366e:	60f8      	str	r0, [r7, #12]
 8023670:	60b9      	str	r1, [r7, #8]
 8023672:	607a      	str	r2, [r7, #4]
 8023674:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8023676:	68bb      	ldr	r3, [r7, #8]
 8023678:	681b      	ldr	r3, [r3, #0]
 802367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802367e:	d061      	beq.n	8023744 <lfs_bd_flush+0xdc>
 8023680:	68bb      	ldr	r3, [r7, #8]
 8023682:	681b      	ldr	r3, [r3, #0]
 8023684:	f113 0f02 	cmn.w	r3, #2
 8023688:	d05c      	beq.n	8023744 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 802368a:	68bb      	ldr	r3, [r7, #8]
 802368c:	681a      	ldr	r2, [r3, #0]
 802368e:	68fb      	ldr	r3, [r7, #12]
 8023690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023692:	6a1b      	ldr	r3, [r3, #32]
 8023694:	429a      	cmp	r2, r3
 8023696:	d305      	bcc.n	80236a4 <lfs_bd_flush+0x3c>
 8023698:	4b2d      	ldr	r3, [pc, #180]	; (8023750 <lfs_bd_flush+0xe8>)
 802369a:	4a2e      	ldr	r2, [pc, #184]	; (8023754 <lfs_bd_flush+0xec>)
 802369c:	219e      	movs	r1, #158	; 0x9e
 802369e:	482e      	ldr	r0, [pc, #184]	; (8023758 <lfs_bd_flush+0xf0>)
 80236a0:	f008 fc9a 	bl	802bfd8 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80236a4:	68bb      	ldr	r3, [r7, #8]
 80236a6:	689a      	ldr	r2, [r3, #8]
 80236a8:	68fb      	ldr	r3, [r7, #12]
 80236aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80236ac:	699b      	ldr	r3, [r3, #24]
 80236ae:	4619      	mov	r1, r3
 80236b0:	4610      	mov	r0, r2
 80236b2:	f7ff fd8c 	bl	80231ce <lfs_alignup>
 80236b6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80236b8:	68fb      	ldr	r3, [r7, #12]
 80236ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80236bc:	689c      	ldr	r4, [r3, #8]
 80236be:	68fb      	ldr	r3, [r7, #12]
 80236c0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80236c2:	68bb      	ldr	r3, [r7, #8]
 80236c4:	6819      	ldr	r1, [r3, #0]
 80236c6:	68bb      	ldr	r3, [r7, #8]
 80236c8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80236ca:	68bb      	ldr	r3, [r7, #8]
 80236cc:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80236ce:	69fb      	ldr	r3, [r7, #28]
 80236d0:	9300      	str	r3, [sp, #0]
 80236d2:	462b      	mov	r3, r5
 80236d4:	47a0      	blx	r4
 80236d6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 80236d8:	69bb      	ldr	r3, [r7, #24]
 80236da:	2b00      	cmp	r3, #0
 80236dc:	dd05      	ble.n	80236ea <lfs_bd_flush+0x82>
 80236de:	4b1f      	ldr	r3, [pc, #124]	; (802375c <lfs_bd_flush+0xf4>)
 80236e0:	4a1c      	ldr	r2, [pc, #112]	; (8023754 <lfs_bd_flush+0xec>)
 80236e2:	21a2      	movs	r1, #162	; 0xa2
 80236e4:	481c      	ldr	r0, [pc, #112]	; (8023758 <lfs_bd_flush+0xf0>)
 80236e6:	f008 fc77 	bl	802bfd8 <__assert_func>
        if (err) {
 80236ea:	69bb      	ldr	r3, [r7, #24]
 80236ec:	2b00      	cmp	r3, #0
 80236ee:	d001      	beq.n	80236f4 <lfs_bd_flush+0x8c>
            return err;
 80236f0:	69bb      	ldr	r3, [r7, #24]
 80236f2:	e028      	b.n	8023746 <lfs_bd_flush+0xde>
        }

        if (validate) {
 80236f4:	78fb      	ldrb	r3, [r7, #3]
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d020      	beq.n	802373c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80236fa:	6879      	ldr	r1, [r7, #4]
 80236fc:	68f8      	ldr	r0, [r7, #12]
 80236fe:	f7ff fdf7 	bl	80232f0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023702:	68bb      	ldr	r3, [r7, #8]
 8023704:	681b      	ldr	r3, [r3, #0]
 8023706:	68ba      	ldr	r2, [r7, #8]
 8023708:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 802370a:	68b9      	ldr	r1, [r7, #8]
 802370c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 802370e:	69f8      	ldr	r0, [r7, #28]
 8023710:	9003      	str	r0, [sp, #12]
 8023712:	9102      	str	r1, [sp, #8]
 8023714:	9201      	str	r2, [sp, #4]
 8023716:	9300      	str	r3, [sp, #0]
 8023718:	69fb      	ldr	r3, [r7, #28]
 802371a:	687a      	ldr	r2, [r7, #4]
 802371c:	2100      	movs	r1, #0
 802371e:	68f8      	ldr	r0, [r7, #12]
 8023720:	f7ff ff50 	bl	80235c4 <lfs_bd_cmp>
 8023724:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023726:	697b      	ldr	r3, [r7, #20]
 8023728:	2b00      	cmp	r3, #0
 802372a:	da01      	bge.n	8023730 <lfs_bd_flush+0xc8>
                return res;
 802372c:	697b      	ldr	r3, [r7, #20]
 802372e:	e00a      	b.n	8023746 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023730:	697b      	ldr	r3, [r7, #20]
 8023732:	2b00      	cmp	r3, #0
 8023734:	d002      	beq.n	802373c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023736:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802373a:	e004      	b.n	8023746 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 802373c:	68b9      	ldr	r1, [r7, #8]
 802373e:	68f8      	ldr	r0, [r7, #12]
 8023740:	f7ff fde5 	bl	802330e <lfs_cache_zero>
    }

    return 0;
 8023744:	2300      	movs	r3, #0
}
 8023746:	4618      	mov	r0, r3
 8023748:	3720      	adds	r7, #32
 802374a:	46bd      	mov	sp, r7
 802374c:	bdb0      	pop	{r4, r5, r7, pc}
 802374e:	bf00      	nop
 8023750:	08032f80 	.word	0x08032f80
 8023754:	080341b8 	.word	0x080341b8
 8023758:	08032f40 	.word	0x08032f40
 802375c:	08032f74 	.word	0x08032f74

08023760 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023760:	b580      	push	{r7, lr}
 8023762:	b086      	sub	sp, #24
 8023764:	af00      	add	r7, sp, #0
 8023766:	60f8      	str	r0, [r7, #12]
 8023768:	60b9      	str	r1, [r7, #8]
 802376a:	607a      	str	r2, [r7, #4]
 802376c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 802376e:	6879      	ldr	r1, [r7, #4]
 8023770:	68f8      	ldr	r0, [r7, #12]
 8023772:	f7ff fdbd 	bl	80232f0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023776:	78fb      	ldrb	r3, [r7, #3]
 8023778:	687a      	ldr	r2, [r7, #4]
 802377a:	68b9      	ldr	r1, [r7, #8]
 802377c:	68f8      	ldr	r0, [r7, #12]
 802377e:	f7ff ff73 	bl	8023668 <lfs_bd_flush>
 8023782:	6178      	str	r0, [r7, #20]
    if (err) {
 8023784:	697b      	ldr	r3, [r7, #20]
 8023786:	2b00      	cmp	r3, #0
 8023788:	d001      	beq.n	802378e <lfs_bd_sync+0x2e>
        return err;
 802378a:	697b      	ldr	r3, [r7, #20]
 802378c:	e011      	b.n	80237b2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 802378e:	68fb      	ldr	r3, [r7, #12]
 8023790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023792:	691b      	ldr	r3, [r3, #16]
 8023794:	68fa      	ldr	r2, [r7, #12]
 8023796:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023798:	4610      	mov	r0, r2
 802379a:	4798      	blx	r3
 802379c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 802379e:	697b      	ldr	r3, [r7, #20]
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	dd05      	ble.n	80237b0 <lfs_bd_sync+0x50>
 80237a4:	4b05      	ldr	r3, [pc, #20]	; (80237bc <lfs_bd_sync+0x5c>)
 80237a6:	4a06      	ldr	r2, [pc, #24]	; (80237c0 <lfs_bd_sync+0x60>)
 80237a8:	21c8      	movs	r1, #200	; 0xc8
 80237aa:	4806      	ldr	r0, [pc, #24]	; (80237c4 <lfs_bd_sync+0x64>)
 80237ac:	f008 fc14 	bl	802bfd8 <__assert_func>
    return err;
 80237b0:	697b      	ldr	r3, [r7, #20]
}
 80237b2:	4618      	mov	r0, r3
 80237b4:	3718      	adds	r7, #24
 80237b6:	46bd      	mov	sp, r7
 80237b8:	bd80      	pop	{r7, pc}
 80237ba:	bf00      	nop
 80237bc:	08032f74 	.word	0x08032f74
 80237c0:	080341c8 	.word	0x080341c8
 80237c4:	08032f40 	.word	0x08032f40

080237c8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80237c8:	b580      	push	{r7, lr}
 80237ca:	b088      	sub	sp, #32
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	60f8      	str	r0, [r7, #12]
 80237d0:	60b9      	str	r1, [r7, #8]
 80237d2:	607a      	str	r2, [r7, #4]
 80237d4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80237d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80237d8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 80237da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237dc:	f113 0f02 	cmn.w	r3, #2
 80237e0:	d00b      	beq.n	80237fa <lfs_bd_prog+0x32>
 80237e2:	68fb      	ldr	r3, [r7, #12]
 80237e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237e6:	6a1b      	ldr	r3, [r3, #32]
 80237e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80237ea:	429a      	cmp	r2, r3
 80237ec:	d305      	bcc.n	80237fa <lfs_bd_prog+0x32>
 80237ee:	4b47      	ldr	r3, [pc, #284]	; (802390c <lfs_bd_prog+0x144>)
 80237f0:	4a47      	ldr	r2, [pc, #284]	; (8023910 <lfs_bd_prog+0x148>)
 80237f2:	21d3      	movs	r1, #211	; 0xd3
 80237f4:	4847      	ldr	r0, [pc, #284]	; (8023914 <lfs_bd_prog+0x14c>)
 80237f6:	f008 fbef 	bl	802bfd8 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80237fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80237fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237fe:	441a      	add	r2, r3
 8023800:	68fb      	ldr	r3, [r7, #12]
 8023802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023804:	69db      	ldr	r3, [r3, #28]
 8023806:	429a      	cmp	r2, r3
 8023808:	d977      	bls.n	80238fa <lfs_bd_prog+0x132>
 802380a:	4b43      	ldr	r3, [pc, #268]	; (8023918 <lfs_bd_prog+0x150>)
 802380c:	4a40      	ldr	r2, [pc, #256]	; (8023910 <lfs_bd_prog+0x148>)
 802380e:	21d4      	movs	r1, #212	; 0xd4
 8023810:	4840      	ldr	r0, [pc, #256]	; (8023914 <lfs_bd_prog+0x14c>)
 8023812:	f008 fbe1 	bl	802bfd8 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8023816:	68bb      	ldr	r3, [r7, #8]
 8023818:	681b      	ldr	r3, [r3, #0]
 802381a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802381c:	429a      	cmp	r2, r3
 802381e:	d151      	bne.n	80238c4 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8023820:	68bb      	ldr	r3, [r7, #8]
 8023822:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8023824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023826:	429a      	cmp	r2, r3
 8023828:	d34c      	bcc.n	80238c4 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 802382a:	68bb      	ldr	r3, [r7, #8]
 802382c:	685a      	ldr	r2, [r3, #4]
 802382e:	68fb      	ldr	r3, [r7, #12]
 8023830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023834:	4413      	add	r3, r2
                off >= pcache->off &&
 8023836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023838:	429a      	cmp	r2, r3
 802383a:	d243      	bcs.n	80238c4 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 802383c:	68fb      	ldr	r3, [r7, #12]
 802383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023842:	68bb      	ldr	r3, [r7, #8]
 8023844:	6859      	ldr	r1, [r3, #4]
 8023846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023848:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 802384a:	4413      	add	r3, r2
 802384c:	4619      	mov	r1, r3
 802384e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023850:	f7ff fc98 	bl	8023184 <lfs_min>
 8023854:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8023856:	68bb      	ldr	r3, [r7, #8]
 8023858:	68da      	ldr	r2, [r3, #12]
 802385a:	68bb      	ldr	r3, [r7, #8]
 802385c:	685b      	ldr	r3, [r3, #4]
 802385e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023860:	1acb      	subs	r3, r1, r3
 8023862:	4413      	add	r3, r2
 8023864:	69ba      	ldr	r2, [r7, #24]
 8023866:	69f9      	ldr	r1, [r7, #28]
 8023868:	4618      	mov	r0, r3
 802386a:	f009 ff5a 	bl	802d722 <memcpy>

            data += diff;
 802386e:	69fa      	ldr	r2, [r7, #28]
 8023870:	69bb      	ldr	r3, [r7, #24]
 8023872:	4413      	add	r3, r2
 8023874:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023878:	69bb      	ldr	r3, [r7, #24]
 802387a:	4413      	add	r3, r2
 802387c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 802387e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023880:	69bb      	ldr	r3, [r7, #24]
 8023882:	1ad3      	subs	r3, r2, r3
 8023884:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8023886:	68bb      	ldr	r3, [r7, #8]
 8023888:	6898      	ldr	r0, [r3, #8]
 802388a:	68bb      	ldr	r3, [r7, #8]
 802388c:	685b      	ldr	r3, [r3, #4]
 802388e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023890:	1ad3      	subs	r3, r2, r3
 8023892:	4619      	mov	r1, r3
 8023894:	f7ff fc66 	bl	8023164 <lfs_max>
 8023898:	4602      	mov	r2, r0
 802389a:	68bb      	ldr	r3, [r7, #8]
 802389c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 802389e:	68bb      	ldr	r3, [r7, #8]
 80238a0:	689a      	ldr	r2, [r3, #8]
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80238a8:	429a      	cmp	r2, r3
 80238aa:	d126      	bne.n	80238fa <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80238ac:	78fb      	ldrb	r3, [r7, #3]
 80238ae:	687a      	ldr	r2, [r7, #4]
 80238b0:	68b9      	ldr	r1, [r7, #8]
 80238b2:	68f8      	ldr	r0, [r7, #12]
 80238b4:	f7ff fed8 	bl	8023668 <lfs_bd_flush>
 80238b8:	6178      	str	r0, [r7, #20]
                if (err) {
 80238ba:	697b      	ldr	r3, [r7, #20]
 80238bc:	2b00      	cmp	r3, #0
 80238be:	d01c      	beq.n	80238fa <lfs_bd_prog+0x132>
                    return err;
 80238c0:	697b      	ldr	r3, [r7, #20]
 80238c2:	e01e      	b.n	8023902 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80238c4:	68bb      	ldr	r3, [r7, #8]
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80238cc:	d005      	beq.n	80238da <lfs_bd_prog+0x112>
 80238ce:	4b13      	ldr	r3, [pc, #76]	; (802391c <lfs_bd_prog+0x154>)
 80238d0:	4a0f      	ldr	r2, [pc, #60]	; (8023910 <lfs_bd_prog+0x148>)
 80238d2:	21f1      	movs	r1, #241	; 0xf1
 80238d4:	480f      	ldr	r0, [pc, #60]	; (8023914 <lfs_bd_prog+0x14c>)
 80238d6:	f008 fb7f 	bl	802bfd8 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80238da:	68bb      	ldr	r3, [r7, #8]
 80238dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80238de:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80238e0:	68fb      	ldr	r3, [r7, #12]
 80238e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238e4:	699b      	ldr	r3, [r3, #24]
 80238e6:	4619      	mov	r1, r3
 80238e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80238ea:	f7ff fc5b 	bl	80231a4 <lfs_aligndown>
 80238ee:	4602      	mov	r2, r0
 80238f0:	68bb      	ldr	r3, [r7, #8]
 80238f2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80238f4:	68bb      	ldr	r3, [r7, #8]
 80238f6:	2200      	movs	r2, #0
 80238f8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80238fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80238fc:	2b00      	cmp	r3, #0
 80238fe:	d18a      	bne.n	8023816 <lfs_bd_prog+0x4e>
    }

    return 0;
 8023900:	2300      	movs	r3, #0
}
 8023902:	4618      	mov	r0, r3
 8023904:	3720      	adds	r7, #32
 8023906:	46bd      	mov	sp, r7
 8023908:	bd80      	pop	{r7, pc}
 802390a:	bf00      	nop
 802390c:	08032fa8 	.word	0x08032fa8
 8023910:	080341d4 	.word	0x080341d4
 8023914:	08032f40 	.word	0x08032f40
 8023918:	08032fe4 	.word	0x08032fe4
 802391c:	08033008 	.word	0x08033008

08023920 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8023920:	b580      	push	{r7, lr}
 8023922:	b084      	sub	sp, #16
 8023924:	af00      	add	r7, sp, #0
 8023926:	6078      	str	r0, [r7, #4]
 8023928:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802392e:	6a1b      	ldr	r3, [r3, #32]
 8023930:	683a      	ldr	r2, [r7, #0]
 8023932:	429a      	cmp	r2, r3
 8023934:	d305      	bcc.n	8023942 <lfs_bd_erase+0x22>
 8023936:	4b0f      	ldr	r3, [pc, #60]	; (8023974 <lfs_bd_erase+0x54>)
 8023938:	4a0f      	ldr	r2, [pc, #60]	; (8023978 <lfs_bd_erase+0x58>)
 802393a:	21ff      	movs	r1, #255	; 0xff
 802393c:	480f      	ldr	r0, [pc, #60]	; (802397c <lfs_bd_erase+0x5c>)
 802393e:	f008 fb4b 	bl	802bfd8 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023946:	68db      	ldr	r3, [r3, #12]
 8023948:	687a      	ldr	r2, [r7, #4]
 802394a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802394c:	6839      	ldr	r1, [r7, #0]
 802394e:	4610      	mov	r0, r2
 8023950:	4798      	blx	r3
 8023952:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	2b00      	cmp	r3, #0
 8023958:	dd06      	ble.n	8023968 <lfs_bd_erase+0x48>
 802395a:	4b09      	ldr	r3, [pc, #36]	; (8023980 <lfs_bd_erase+0x60>)
 802395c:	4a06      	ldr	r2, [pc, #24]	; (8023978 <lfs_bd_erase+0x58>)
 802395e:	f240 1101 	movw	r1, #257	; 0x101
 8023962:	4806      	ldr	r0, [pc, #24]	; (802397c <lfs_bd_erase+0x5c>)
 8023964:	f008 fb38 	bl	802bfd8 <__assert_func>
    return err;
 8023968:	68fb      	ldr	r3, [r7, #12]
}
 802396a:	4618      	mov	r0, r3
 802396c:	3710      	adds	r7, #16
 802396e:	46bd      	mov	sp, r7
 8023970:	bd80      	pop	{r7, pc}
 8023972:	bf00      	nop
 8023974:	08032f20 	.word	0x08032f20
 8023978:	080341e0 	.word	0x080341e0
 802397c:	08032f40 	.word	0x08032f40
 8023980:	08032f74 	.word	0x08032f74

08023984 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8023984:	b480      	push	{r7}
 8023986:	b085      	sub	sp, #20
 8023988:	af00      	add	r7, sp, #0
 802398a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	681b      	ldr	r3, [r3, #0]
 8023990:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	685a      	ldr	r2, [r3, #4]
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	3304      	adds	r3, #4
 802399e:	68fa      	ldr	r2, [r7, #12]
 80239a0:	601a      	str	r2, [r3, #0]
}
 80239a2:	bf00      	nop
 80239a4:	3714      	adds	r7, #20
 80239a6:	46bd      	mov	sp, r7
 80239a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239ac:	4770      	bx	lr

080239ae <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80239ae:	b480      	push	{r7}
 80239b0:	b083      	sub	sp, #12
 80239b2:	af00      	add	r7, sp, #0
 80239b4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	681b      	ldr	r3, [r3, #0]
 80239ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80239be:	d005      	beq.n	80239cc <lfs_pair_isnull+0x1e>
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	3304      	adds	r3, #4
 80239c4:	681b      	ldr	r3, [r3, #0]
 80239c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80239ca:	d101      	bne.n	80239d0 <lfs_pair_isnull+0x22>
 80239cc:	2301      	movs	r3, #1
 80239ce:	e000      	b.n	80239d2 <lfs_pair_isnull+0x24>
 80239d0:	2300      	movs	r3, #0
 80239d2:	f003 0301 	and.w	r3, r3, #1
 80239d6:	b2db      	uxtb	r3, r3
}
 80239d8:	4618      	mov	r0, r3
 80239da:	370c      	adds	r7, #12
 80239dc:	46bd      	mov	sp, r7
 80239de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239e2:	4770      	bx	lr

080239e4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80239e4:	b480      	push	{r7}
 80239e6:	b083      	sub	sp, #12
 80239e8:	af00      	add	r7, sp, #0
 80239ea:	6078      	str	r0, [r7, #4]
 80239ec:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	681a      	ldr	r2, [r3, #0]
 80239f2:	683b      	ldr	r3, [r7, #0]
 80239f4:	681b      	ldr	r3, [r3, #0]
 80239f6:	429a      	cmp	r2, r3
 80239f8:	d017      	beq.n	8023a2a <lfs_pair_cmp+0x46>
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	3304      	adds	r3, #4
 80239fe:	681a      	ldr	r2, [r3, #0]
 8023a00:	683b      	ldr	r3, [r7, #0]
 8023a02:	3304      	adds	r3, #4
 8023a04:	681b      	ldr	r3, [r3, #0]
 8023a06:	429a      	cmp	r2, r3
 8023a08:	d00f      	beq.n	8023a2a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023a0a:	687b      	ldr	r3, [r7, #4]
 8023a0c:	681a      	ldr	r2, [r3, #0]
 8023a0e:	683b      	ldr	r3, [r7, #0]
 8023a10:	3304      	adds	r3, #4
 8023a12:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023a14:	429a      	cmp	r2, r3
 8023a16:	d008      	beq.n	8023a2a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	3304      	adds	r3, #4
 8023a1c:	681a      	ldr	r2, [r3, #0]
 8023a1e:	683b      	ldr	r3, [r7, #0]
 8023a20:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023a22:	429a      	cmp	r2, r3
 8023a24:	d001      	beq.n	8023a2a <lfs_pair_cmp+0x46>
 8023a26:	2301      	movs	r3, #1
 8023a28:	e000      	b.n	8023a2c <lfs_pair_cmp+0x48>
 8023a2a:	2300      	movs	r3, #0
}
 8023a2c:	4618      	mov	r0, r3
 8023a2e:	370c      	adds	r7, #12
 8023a30:	46bd      	mov	sp, r7
 8023a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a36:	4770      	bx	lr

08023a38 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023a38:	b480      	push	{r7}
 8023a3a:	b083      	sub	sp, #12
 8023a3c:	af00      	add	r7, sp, #0
 8023a3e:	6078      	str	r0, [r7, #4]
 8023a40:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023a42:	687b      	ldr	r3, [r7, #4]
 8023a44:	681a      	ldr	r2, [r3, #0]
 8023a46:	683b      	ldr	r3, [r7, #0]
 8023a48:	681b      	ldr	r3, [r3, #0]
 8023a4a:	429a      	cmp	r2, r3
 8023a4c:	d107      	bne.n	8023a5e <lfs_pair_sync+0x26>
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	3304      	adds	r3, #4
 8023a52:	681a      	ldr	r2, [r3, #0]
 8023a54:	683b      	ldr	r3, [r7, #0]
 8023a56:	3304      	adds	r3, #4
 8023a58:	681b      	ldr	r3, [r3, #0]
 8023a5a:	429a      	cmp	r2, r3
 8023a5c:	d00d      	beq.n	8023a7a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	681a      	ldr	r2, [r3, #0]
 8023a62:	683b      	ldr	r3, [r7, #0]
 8023a64:	3304      	adds	r3, #4
 8023a66:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023a68:	429a      	cmp	r2, r3
 8023a6a:	d108      	bne.n	8023a7e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023a6c:	687b      	ldr	r3, [r7, #4]
 8023a6e:	3304      	adds	r3, #4
 8023a70:	681a      	ldr	r2, [r3, #0]
 8023a72:	683b      	ldr	r3, [r7, #0]
 8023a74:	681b      	ldr	r3, [r3, #0]
 8023a76:	429a      	cmp	r2, r3
 8023a78:	d101      	bne.n	8023a7e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023a7a:	2301      	movs	r3, #1
 8023a7c:	e000      	b.n	8023a80 <lfs_pair_sync+0x48>
 8023a7e:	2300      	movs	r3, #0
 8023a80:	f003 0301 	and.w	r3, r3, #1
 8023a84:	b2db      	uxtb	r3, r3
}
 8023a86:	4618      	mov	r0, r3
 8023a88:	370c      	adds	r7, #12
 8023a8a:	46bd      	mov	sp, r7
 8023a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a90:	4770      	bx	lr

08023a92 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8023a92:	b590      	push	{r4, r7, lr}
 8023a94:	b083      	sub	sp, #12
 8023a96:	af00      	add	r7, sp, #0
 8023a98:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	4618      	mov	r0, r3
 8023aa0:	f7ff fbe0 	bl	8023264 <lfs_fromle32>
 8023aa4:	4602      	mov	r2, r0
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	3304      	adds	r3, #4
 8023aae:	681a      	ldr	r2, [r3, #0]
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	1d1c      	adds	r4, r3, #4
 8023ab4:	4610      	mov	r0, r2
 8023ab6:	f7ff fbd5 	bl	8023264 <lfs_fromle32>
 8023aba:	4603      	mov	r3, r0
 8023abc:	6023      	str	r3, [r4, #0]
}
 8023abe:	bf00      	nop
 8023ac0:	370c      	adds	r7, #12
 8023ac2:	46bd      	mov	sp, r7
 8023ac4:	bd90      	pop	{r4, r7, pc}

08023ac6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8023ac6:	b590      	push	{r4, r7, lr}
 8023ac8:	b083      	sub	sp, #12
 8023aca:	af00      	add	r7, sp, #0
 8023acc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	681b      	ldr	r3, [r3, #0]
 8023ad2:	4618      	mov	r0, r3
 8023ad4:	f7ff fbd1 	bl	802327a <lfs_tole32>
 8023ad8:	4602      	mov	r2, r0
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	3304      	adds	r3, #4
 8023ae2:	681a      	ldr	r2, [r3, #0]
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	1d1c      	adds	r4, r3, #4
 8023ae8:	4610      	mov	r0, r2
 8023aea:	f7ff fbc6 	bl	802327a <lfs_tole32>
 8023aee:	4603      	mov	r3, r0
 8023af0:	6023      	str	r3, [r4, #0]
}
 8023af2:	bf00      	nop
 8023af4:	370c      	adds	r7, #12
 8023af6:	46bd      	mov	sp, r7
 8023af8:	bd90      	pop	{r4, r7, pc}

08023afa <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8023afa:	b480      	push	{r7}
 8023afc:	b083      	sub	sp, #12
 8023afe:	af00      	add	r7, sp, #0
 8023b00:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	43db      	mvns	r3, r3
 8023b06:	0fdb      	lsrs	r3, r3, #31
 8023b08:	b2db      	uxtb	r3, r3
}
 8023b0a:	4618      	mov	r0, r3
 8023b0c:	370c      	adds	r7, #12
 8023b0e:	46bd      	mov	sp, r7
 8023b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b14:	4770      	bx	lr

08023b16 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8023b16:	b480      	push	{r7}
 8023b18:	b083      	sub	sp, #12
 8023b1a:	af00      	add	r7, sp, #0
 8023b1c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	059b      	lsls	r3, r3, #22
 8023b22:	159b      	asrs	r3, r3, #22
 8023b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023b28:	bf0c      	ite	eq
 8023b2a:	2301      	moveq	r3, #1
 8023b2c:	2300      	movne	r3, #0
 8023b2e:	b2db      	uxtb	r3, r3
}
 8023b30:	4618      	mov	r0, r3
 8023b32:	370c      	adds	r7, #12
 8023b34:	46bd      	mov	sp, r7
 8023b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b3a:	4770      	bx	lr

08023b3c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8023b3c:	b480      	push	{r7}
 8023b3e:	b083      	sub	sp, #12
 8023b40:	af00      	add	r7, sp, #0
 8023b42:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	0d1b      	lsrs	r3, r3, #20
 8023b48:	b29b      	uxth	r3, r3
 8023b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8023b4e:	b29b      	uxth	r3, r3
}
 8023b50:	4618      	mov	r0, r3
 8023b52:	370c      	adds	r7, #12
 8023b54:	46bd      	mov	sp, r7
 8023b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b5a:	4770      	bx	lr

08023b5c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8023b5c:	b480      	push	{r7}
 8023b5e:	b083      	sub	sp, #12
 8023b60:	af00      	add	r7, sp, #0
 8023b62:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	0d1b      	lsrs	r3, r3, #20
 8023b68:	b29b      	uxth	r3, r3
 8023b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8023b6e:	b29b      	uxth	r3, r3
}
 8023b70:	4618      	mov	r0, r3
 8023b72:	370c      	adds	r7, #12
 8023b74:	46bd      	mov	sp, r7
 8023b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b7a:	4770      	bx	lr

08023b7c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8023b7c:	b480      	push	{r7}
 8023b7e:	b083      	sub	sp, #12
 8023b80:	af00      	add	r7, sp, #0
 8023b82:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	0d1b      	lsrs	r3, r3, #20
 8023b88:	b2db      	uxtb	r3, r3
}
 8023b8a:	4618      	mov	r0, r3
 8023b8c:	370c      	adds	r7, #12
 8023b8e:	46bd      	mov	sp, r7
 8023b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b94:	4770      	bx	lr

08023b96 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8023b96:	b580      	push	{r7, lr}
 8023b98:	b082      	sub	sp, #8
 8023b9a:	af00      	add	r7, sp, #0
 8023b9c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8023b9e:	6878      	ldr	r0, [r7, #4]
 8023ba0:	f7ff ffec 	bl	8023b7c <lfs_tag_chunk>
 8023ba4:	4603      	mov	r3, r0
 8023ba6:	b25b      	sxtb	r3, r3
}
 8023ba8:	4618      	mov	r0, r3
 8023baa:	3708      	adds	r7, #8
 8023bac:	46bd      	mov	sp, r7
 8023bae:	bd80      	pop	{r7, pc}

08023bb0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8023bb0:	b480      	push	{r7}
 8023bb2:	b083      	sub	sp, #12
 8023bb4:	af00      	add	r7, sp, #0
 8023bb6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	0a9b      	lsrs	r3, r3, #10
 8023bbc:	b29b      	uxth	r3, r3
 8023bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8023bc2:	b29b      	uxth	r3, r3
}
 8023bc4:	4618      	mov	r0, r3
 8023bc6:	370c      	adds	r7, #12
 8023bc8:	46bd      	mov	sp, r7
 8023bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bce:	4770      	bx	lr

08023bd0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8023bd0:	b480      	push	{r7}
 8023bd2:	b083      	sub	sp, #12
 8023bd4:	af00      	add	r7, sp, #0
 8023bd6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8023bd8:	687b      	ldr	r3, [r7, #4]
 8023bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8023bde:	4618      	mov	r0, r3
 8023be0:	370c      	adds	r7, #12
 8023be2:	46bd      	mov	sp, r7
 8023be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023be8:	4770      	bx	lr

08023bea <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8023bea:	b580      	push	{r7, lr}
 8023bec:	b082      	sub	sp, #8
 8023bee:	af00      	add	r7, sp, #0
 8023bf0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8023bf2:	6878      	ldr	r0, [r7, #4]
 8023bf4:	f7ff ff8f 	bl	8023b16 <lfs_tag_isdelete>
 8023bf8:	4603      	mov	r3, r0
 8023bfa:	461a      	mov	r2, r3
 8023bfc:	687b      	ldr	r3, [r7, #4]
 8023bfe:	4413      	add	r3, r2
 8023c00:	4618      	mov	r0, r3
 8023c02:	f7ff ffe5 	bl	8023bd0 <lfs_tag_size>
 8023c06:	4603      	mov	r3, r0
 8023c08:	3304      	adds	r3, #4
}
 8023c0a:	4618      	mov	r0, r3
 8023c0c:	3708      	adds	r7, #8
 8023c0e:	46bd      	mov	sp, r7
 8023c10:	bd80      	pop	{r7, pc}

08023c12 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8023c12:	b480      	push	{r7}
 8023c14:	b085      	sub	sp, #20
 8023c16:	af00      	add	r7, sp, #0
 8023c18:	6078      	str	r0, [r7, #4]
 8023c1a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8023c1c:	2300      	movs	r3, #0
 8023c1e:	60fb      	str	r3, [r7, #12]
 8023c20:	e012      	b.n	8023c48 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8023c22:	68fb      	ldr	r3, [r7, #12]
 8023c24:	009b      	lsls	r3, r3, #2
 8023c26:	687a      	ldr	r2, [r7, #4]
 8023c28:	4413      	add	r3, r2
 8023c2a:	6819      	ldr	r1, [r3, #0]
 8023c2c:	68fb      	ldr	r3, [r7, #12]
 8023c2e:	009b      	lsls	r3, r3, #2
 8023c30:	683a      	ldr	r2, [r7, #0]
 8023c32:	4413      	add	r3, r2
 8023c34:	681a      	ldr	r2, [r3, #0]
 8023c36:	68fb      	ldr	r3, [r7, #12]
 8023c38:	009b      	lsls	r3, r3, #2
 8023c3a:	6878      	ldr	r0, [r7, #4]
 8023c3c:	4403      	add	r3, r0
 8023c3e:	404a      	eors	r2, r1
 8023c40:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8023c42:	68fb      	ldr	r3, [r7, #12]
 8023c44:	3301      	adds	r3, #1
 8023c46:	60fb      	str	r3, [r7, #12]
 8023c48:	68fb      	ldr	r3, [r7, #12]
 8023c4a:	2b02      	cmp	r3, #2
 8023c4c:	dde9      	ble.n	8023c22 <lfs_gstate_xor+0x10>
    }
}
 8023c4e:	bf00      	nop
 8023c50:	bf00      	nop
 8023c52:	3714      	adds	r7, #20
 8023c54:	46bd      	mov	sp, r7
 8023c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c5a:	4770      	bx	lr

08023c5c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8023c5c:	b480      	push	{r7}
 8023c5e:	b085      	sub	sp, #20
 8023c60:	af00      	add	r7, sp, #0
 8023c62:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8023c64:	2300      	movs	r3, #0
 8023c66:	60fb      	str	r3, [r7, #12]
 8023c68:	e00b      	b.n	8023c82 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8023c6a:	68fb      	ldr	r3, [r7, #12]
 8023c6c:	009b      	lsls	r3, r3, #2
 8023c6e:	687a      	ldr	r2, [r7, #4]
 8023c70:	4413      	add	r3, r2
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	2b00      	cmp	r3, #0
 8023c76:	d001      	beq.n	8023c7c <lfs_gstate_iszero+0x20>
            return false;
 8023c78:	2300      	movs	r3, #0
 8023c7a:	e006      	b.n	8023c8a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8023c7c:	68fb      	ldr	r3, [r7, #12]
 8023c7e:	3301      	adds	r3, #1
 8023c80:	60fb      	str	r3, [r7, #12]
 8023c82:	68fb      	ldr	r3, [r7, #12]
 8023c84:	2b02      	cmp	r3, #2
 8023c86:	ddf0      	ble.n	8023c6a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8023c88:	2301      	movs	r3, #1
}
 8023c8a:	4618      	mov	r0, r3
 8023c8c:	3714      	adds	r7, #20
 8023c8e:	46bd      	mov	sp, r7
 8023c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c94:	4770      	bx	lr

08023c96 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8023c96:	b580      	push	{r7, lr}
 8023c98:	b082      	sub	sp, #8
 8023c9a:	af00      	add	r7, sp, #0
 8023c9c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8023c9e:	687b      	ldr	r3, [r7, #4]
 8023ca0:	681b      	ldr	r3, [r3, #0]
 8023ca2:	4618      	mov	r0, r3
 8023ca4:	f7ff ff94 	bl	8023bd0 <lfs_tag_size>
 8023ca8:	4603      	mov	r3, r0
 8023caa:	2b00      	cmp	r3, #0
 8023cac:	bf14      	ite	ne
 8023cae:	2301      	movne	r3, #1
 8023cb0:	2300      	moveq	r3, #0
 8023cb2:	b2db      	uxtb	r3, r3
}
 8023cb4:	4618      	mov	r0, r3
 8023cb6:	3708      	adds	r7, #8
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	bd80      	pop	{r7, pc}

08023cbc <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8023cbc:	b580      	push	{r7, lr}
 8023cbe:	b082      	sub	sp, #8
 8023cc0:	af00      	add	r7, sp, #0
 8023cc2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	681b      	ldr	r3, [r3, #0]
 8023cc8:	4618      	mov	r0, r3
 8023cca:	f7ff ff81 	bl	8023bd0 <lfs_tag_size>
 8023cce:	4603      	mov	r3, r0
 8023cd0:	b2db      	uxtb	r3, r3
}
 8023cd2:	4618      	mov	r0, r3
 8023cd4:	3708      	adds	r7, #8
 8023cd6:	46bd      	mov	sp, r7
 8023cd8:	bd80      	pop	{r7, pc}

08023cda <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8023cda:	b580      	push	{r7, lr}
 8023cdc:	b082      	sub	sp, #8
 8023cde:	af00      	add	r7, sp, #0
 8023ce0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8023ce2:	687b      	ldr	r3, [r7, #4]
 8023ce4:	681b      	ldr	r3, [r3, #0]
 8023ce6:	4618      	mov	r0, r3
 8023ce8:	f7ff ff28 	bl	8023b3c <lfs_tag_type1>
 8023cec:	4603      	mov	r3, r0
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	bf14      	ite	ne
 8023cf2:	2301      	movne	r3, #1
 8023cf4:	2300      	moveq	r3, #0
 8023cf6:	b2db      	uxtb	r3, r3
}
 8023cf8:	4618      	mov	r0, r3
 8023cfa:	3708      	adds	r7, #8
 8023cfc:	46bd      	mov	sp, r7
 8023cfe:	bd80      	pop	{r7, pc}

08023d00 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8023d00:	b580      	push	{r7, lr}
 8023d02:	b082      	sub	sp, #8
 8023d04:	af00      	add	r7, sp, #0
 8023d06:	6078      	str	r0, [r7, #4]
 8023d08:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8023d0a:	687b      	ldr	r3, [r7, #4]
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	4618      	mov	r0, r3
 8023d10:	f7ff ff14 	bl	8023b3c <lfs_tag_type1>
 8023d14:	4603      	mov	r3, r0
 8023d16:	2b00      	cmp	r3, #0
 8023d18:	d00a      	beq.n	8023d30 <lfs_gstate_hasmovehere+0x30>
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	3304      	adds	r3, #4
 8023d1e:	6839      	ldr	r1, [r7, #0]
 8023d20:	4618      	mov	r0, r3
 8023d22:	f7ff fe5f 	bl	80239e4 <lfs_pair_cmp>
 8023d26:	4603      	mov	r3, r0
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	d101      	bne.n	8023d30 <lfs_gstate_hasmovehere+0x30>
 8023d2c:	2301      	movs	r3, #1
 8023d2e:	e000      	b.n	8023d32 <lfs_gstate_hasmovehere+0x32>
 8023d30:	2300      	movs	r3, #0
 8023d32:	f003 0301 	and.w	r3, r3, #1
 8023d36:	b2db      	uxtb	r3, r3
}
 8023d38:	4618      	mov	r0, r3
 8023d3a:	3708      	adds	r7, #8
 8023d3c:	46bd      	mov	sp, r7
 8023d3e:	bd80      	pop	{r7, pc}

08023d40 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8023d40:	b580      	push	{r7, lr}
 8023d42:	b082      	sub	sp, #8
 8023d44:	af00      	add	r7, sp, #0
 8023d46:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	f7ff fa89 	bl	8023264 <lfs_fromle32>
 8023d52:	4602      	mov	r2, r0
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	685b      	ldr	r3, [r3, #4]
 8023d5c:	4618      	mov	r0, r3
 8023d5e:	f7ff fa81 	bl	8023264 <lfs_fromle32>
 8023d62:	4602      	mov	r2, r0
 8023d64:	687b      	ldr	r3, [r7, #4]
 8023d66:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8023d68:	687b      	ldr	r3, [r7, #4]
 8023d6a:	689b      	ldr	r3, [r3, #8]
 8023d6c:	4618      	mov	r0, r3
 8023d6e:	f7ff fa79 	bl	8023264 <lfs_fromle32>
 8023d72:	4602      	mov	r2, r0
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	609a      	str	r2, [r3, #8]
}
 8023d78:	bf00      	nop
 8023d7a:	3708      	adds	r7, #8
 8023d7c:	46bd      	mov	sp, r7
 8023d7e:	bd80      	pop	{r7, pc}

08023d80 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8023d80:	b580      	push	{r7, lr}
 8023d82:	b082      	sub	sp, #8
 8023d84:	af00      	add	r7, sp, #0
 8023d86:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8023d88:	687b      	ldr	r3, [r7, #4]
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	4618      	mov	r0, r3
 8023d8e:	f7ff fa74 	bl	802327a <lfs_tole32>
 8023d92:	4602      	mov	r2, r0
 8023d94:	687b      	ldr	r3, [r7, #4]
 8023d96:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8023d98:	687b      	ldr	r3, [r7, #4]
 8023d9a:	685b      	ldr	r3, [r3, #4]
 8023d9c:	4618      	mov	r0, r3
 8023d9e:	f7ff fa6c 	bl	802327a <lfs_tole32>
 8023da2:	4602      	mov	r2, r0
 8023da4:	687b      	ldr	r3, [r7, #4]
 8023da6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	689b      	ldr	r3, [r3, #8]
 8023dac:	4618      	mov	r0, r3
 8023dae:	f7ff fa64 	bl	802327a <lfs_tole32>
 8023db2:	4602      	mov	r2, r0
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	609a      	str	r2, [r3, #8]
}
 8023db8:	bf00      	nop
 8023dba:	3708      	adds	r7, #8
 8023dbc:	46bd      	mov	sp, r7
 8023dbe:	bd80      	pop	{r7, pc}

08023dc0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8023dc0:	b580      	push	{r7, lr}
 8023dc2:	b082      	sub	sp, #8
 8023dc4:	af00      	add	r7, sp, #0
 8023dc6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	681b      	ldr	r3, [r3, #0]
 8023dcc:	4618      	mov	r0, r3
 8023dce:	f7ff fa49 	bl	8023264 <lfs_fromle32>
 8023dd2:	4602      	mov	r2, r0
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	685b      	ldr	r3, [r3, #4]
 8023ddc:	4618      	mov	r0, r3
 8023dde:	f7ff fa41 	bl	8023264 <lfs_fromle32>
 8023de2:	4602      	mov	r2, r0
 8023de4:	687b      	ldr	r3, [r7, #4]
 8023de6:	605a      	str	r2, [r3, #4]
}
 8023de8:	bf00      	nop
 8023dea:	3708      	adds	r7, #8
 8023dec:	46bd      	mov	sp, r7
 8023dee:	bd80      	pop	{r7, pc}

08023df0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8023df0:	b580      	push	{r7, lr}
 8023df2:	b082      	sub	sp, #8
 8023df4:	af00      	add	r7, sp, #0
 8023df6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8023df8:	687b      	ldr	r3, [r7, #4]
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	4618      	mov	r0, r3
 8023dfe:	f7ff fa3c 	bl	802327a <lfs_tole32>
 8023e02:	4602      	mov	r2, r0
 8023e04:	687b      	ldr	r3, [r7, #4]
 8023e06:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	685b      	ldr	r3, [r3, #4]
 8023e0c:	4618      	mov	r0, r3
 8023e0e:	f7ff fa34 	bl	802327a <lfs_tole32>
 8023e12:	4602      	mov	r2, r0
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	605a      	str	r2, [r3, #4]
}
 8023e18:	bf00      	nop
 8023e1a:	3708      	adds	r7, #8
 8023e1c:	46bd      	mov	sp, r7
 8023e1e:	bd80      	pop	{r7, pc}

08023e20 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8023e20:	b580      	push	{r7, lr}
 8023e22:	b082      	sub	sp, #8
 8023e24:	af00      	add	r7, sp, #0
 8023e26:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	681b      	ldr	r3, [r3, #0]
 8023e2c:	4618      	mov	r0, r3
 8023e2e:	f7ff fa19 	bl	8023264 <lfs_fromle32>
 8023e32:	4602      	mov	r2, r0
 8023e34:	687b      	ldr	r3, [r7, #4]
 8023e36:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	685b      	ldr	r3, [r3, #4]
 8023e3c:	4618      	mov	r0, r3
 8023e3e:	f7ff fa11 	bl	8023264 <lfs_fromle32>
 8023e42:	4602      	mov	r2, r0
 8023e44:	687b      	ldr	r3, [r7, #4]
 8023e46:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8023e48:	687b      	ldr	r3, [r7, #4]
 8023e4a:	689b      	ldr	r3, [r3, #8]
 8023e4c:	4618      	mov	r0, r3
 8023e4e:	f7ff fa09 	bl	8023264 <lfs_fromle32>
 8023e52:	4602      	mov	r2, r0
 8023e54:	687b      	ldr	r3, [r7, #4]
 8023e56:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	68db      	ldr	r3, [r3, #12]
 8023e5c:	4618      	mov	r0, r3
 8023e5e:	f7ff fa01 	bl	8023264 <lfs_fromle32>
 8023e62:	4602      	mov	r2, r0
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	691b      	ldr	r3, [r3, #16]
 8023e6c:	4618      	mov	r0, r3
 8023e6e:	f7ff f9f9 	bl	8023264 <lfs_fromle32>
 8023e72:	4602      	mov	r2, r0
 8023e74:	687b      	ldr	r3, [r7, #4]
 8023e76:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8023e78:	687b      	ldr	r3, [r7, #4]
 8023e7a:	695b      	ldr	r3, [r3, #20]
 8023e7c:	4618      	mov	r0, r3
 8023e7e:	f7ff f9f1 	bl	8023264 <lfs_fromle32>
 8023e82:	4602      	mov	r2, r0
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	615a      	str	r2, [r3, #20]
}
 8023e88:	bf00      	nop
 8023e8a:	3708      	adds	r7, #8
 8023e8c:	46bd      	mov	sp, r7
 8023e8e:	bd80      	pop	{r7, pc}

08023e90 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8023e90:	b580      	push	{r7, lr}
 8023e92:	b082      	sub	sp, #8
 8023e94:	af00      	add	r7, sp, #0
 8023e96:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8023e98:	687b      	ldr	r3, [r7, #4]
 8023e9a:	681b      	ldr	r3, [r3, #0]
 8023e9c:	4618      	mov	r0, r3
 8023e9e:	f7ff f9ec 	bl	802327a <lfs_tole32>
 8023ea2:	4602      	mov	r2, r0
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8023ea8:	687b      	ldr	r3, [r7, #4]
 8023eaa:	685b      	ldr	r3, [r3, #4]
 8023eac:	4618      	mov	r0, r3
 8023eae:	f7ff f9e4 	bl	802327a <lfs_tole32>
 8023eb2:	4602      	mov	r2, r0
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	689b      	ldr	r3, [r3, #8]
 8023ebc:	4618      	mov	r0, r3
 8023ebe:	f7ff f9dc 	bl	802327a <lfs_tole32>
 8023ec2:	4602      	mov	r2, r0
 8023ec4:	687b      	ldr	r3, [r7, #4]
 8023ec6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8023ec8:	687b      	ldr	r3, [r7, #4]
 8023eca:	68db      	ldr	r3, [r3, #12]
 8023ecc:	4618      	mov	r0, r3
 8023ece:	f7ff f9d4 	bl	802327a <lfs_tole32>
 8023ed2:	4602      	mov	r2, r0
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8023ed8:	687b      	ldr	r3, [r7, #4]
 8023eda:	691b      	ldr	r3, [r3, #16]
 8023edc:	4618      	mov	r0, r3
 8023ede:	f7ff f9cc 	bl	802327a <lfs_tole32>
 8023ee2:	4602      	mov	r2, r0
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8023ee8:	687b      	ldr	r3, [r7, #4]
 8023eea:	695b      	ldr	r3, [r3, #20]
 8023eec:	4618      	mov	r0, r3
 8023eee:	f7ff f9c4 	bl	802327a <lfs_tole32>
 8023ef2:	4602      	mov	r2, r0
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	615a      	str	r2, [r3, #20]
}
 8023ef8:	bf00      	nop
 8023efa:	3708      	adds	r7, #8
 8023efc:	46bd      	mov	sp, r7
 8023efe:	bd80      	pop	{r7, pc}

08023f00 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8023f00:	b480      	push	{r7}
 8023f02:	b085      	sub	sp, #20
 8023f04:	af00      	add	r7, sp, #0
 8023f06:	6078      	str	r0, [r7, #4]
 8023f08:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8023f0a:	1d3b      	adds	r3, r7, #4
 8023f0c:	60fb      	str	r3, [r7, #12]
 8023f0e:	e009      	b.n	8023f24 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8023f10:	68fb      	ldr	r3, [r7, #12]
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	683a      	ldr	r2, [r7, #0]
 8023f16:	429a      	cmp	r2, r3
 8023f18:	d101      	bne.n	8023f1e <lfs_mlist_isopen+0x1e>
            return true;
 8023f1a:	2301      	movs	r3, #1
 8023f1c:	e007      	b.n	8023f2e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8023f1e:	68fb      	ldr	r3, [r7, #12]
 8023f20:	681b      	ldr	r3, [r3, #0]
 8023f22:	60fb      	str	r3, [r7, #12]
 8023f24:	68fb      	ldr	r3, [r7, #12]
 8023f26:	681b      	ldr	r3, [r3, #0]
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	d1f1      	bne.n	8023f10 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8023f2c:	2300      	movs	r3, #0
}
 8023f2e:	4618      	mov	r0, r3
 8023f30:	3714      	adds	r7, #20
 8023f32:	46bd      	mov	sp, r7
 8023f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f38:	4770      	bx	lr

08023f3a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8023f3a:	b480      	push	{r7}
 8023f3c:	b085      	sub	sp, #20
 8023f3e:	af00      	add	r7, sp, #0
 8023f40:	6078      	str	r0, [r7, #4]
 8023f42:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8023f44:	687b      	ldr	r3, [r7, #4]
 8023f46:	3328      	adds	r3, #40	; 0x28
 8023f48:	60fb      	str	r3, [r7, #12]
 8023f4a:	e00d      	b.n	8023f68 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8023f4c:	68fb      	ldr	r3, [r7, #12]
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	683a      	ldr	r2, [r7, #0]
 8023f52:	429a      	cmp	r2, r3
 8023f54:	d105      	bne.n	8023f62 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8023f56:	68fb      	ldr	r3, [r7, #12]
 8023f58:	681b      	ldr	r3, [r3, #0]
 8023f5a:	681a      	ldr	r2, [r3, #0]
 8023f5c:	68fb      	ldr	r3, [r7, #12]
 8023f5e:	601a      	str	r2, [r3, #0]
            break;
 8023f60:	e007      	b.n	8023f72 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8023f62:	68fb      	ldr	r3, [r7, #12]
 8023f64:	681b      	ldr	r3, [r3, #0]
 8023f66:	60fb      	str	r3, [r7, #12]
 8023f68:	68fb      	ldr	r3, [r7, #12]
 8023f6a:	681b      	ldr	r3, [r3, #0]
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d1ed      	bne.n	8023f4c <lfs_mlist_remove+0x12>
        }
    }
}
 8023f70:	bf00      	nop
 8023f72:	bf00      	nop
 8023f74:	3714      	adds	r7, #20
 8023f76:	46bd      	mov	sp, r7
 8023f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f7c:	4770      	bx	lr

08023f7e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8023f7e:	b480      	push	{r7}
 8023f80:	b083      	sub	sp, #12
 8023f82:	af00      	add	r7, sp, #0
 8023f84:	6078      	str	r0, [r7, #4]
 8023f86:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023f8c:	683b      	ldr	r3, [r7, #0]
 8023f8e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8023f90:	687b      	ldr	r3, [r7, #4]
 8023f92:	683a      	ldr	r2, [r7, #0]
 8023f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8023f96:	bf00      	nop
 8023f98:	370c      	adds	r7, #12
 8023f9a:	46bd      	mov	sp, r7
 8023f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fa0:	4770      	bx	lr

08023fa2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8023fa2:	b480      	push	{r7}
 8023fa4:	b085      	sub	sp, #20
 8023fa6:	af00      	add	r7, sp, #0
 8023fa8:	6078      	str	r0, [r7, #4]
 8023faa:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8023fac:	687b      	ldr	r3, [r7, #4]
 8023fae:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8023fb0:	68fb      	ldr	r3, [r7, #12]
 8023fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023fb4:	683a      	ldr	r2, [r7, #0]
 8023fb6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8023fb8:	68fb      	ldr	r3, [r7, #12]
 8023fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023fbc:	6a1b      	ldr	r3, [r3, #32]
 8023fbe:	4413      	add	r3, r2
 8023fc0:	68fa      	ldr	r2, [r7, #12]
 8023fc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023fc4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8023fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8023fca:	fb01 f202 	mul.w	r2, r1, r2
 8023fce:	1a9b      	subs	r3, r3, r2
 8023fd0:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8023fd2:	68fb      	ldr	r3, [r7, #12]
 8023fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023fd6:	68ba      	ldr	r2, [r7, #8]
 8023fd8:	429a      	cmp	r2, r3
 8023fda:	d212      	bcs.n	8024002 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8023fdc:	68fb      	ldr	r3, [r7, #12]
 8023fde:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8023fe0:	68bb      	ldr	r3, [r7, #8]
 8023fe2:	095b      	lsrs	r3, r3, #5
 8023fe4:	009a      	lsls	r2, r3, #2
 8023fe6:	440a      	add	r2, r1
 8023fe8:	6811      	ldr	r1, [r2, #0]
 8023fea:	68ba      	ldr	r2, [r7, #8]
 8023fec:	f002 021f 	and.w	r2, r2, #31
 8023ff0:	2001      	movs	r0, #1
 8023ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8023ff6:	68f8      	ldr	r0, [r7, #12]
 8023ff8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8023ffa:	009b      	lsls	r3, r3, #2
 8023ffc:	4403      	add	r3, r0
 8023ffe:	430a      	orrs	r2, r1
 8024000:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8024002:	2300      	movs	r3, #0
}
 8024004:	4618      	mov	r0, r3
 8024006:	3714      	adds	r7, #20
 8024008:	46bd      	mov	sp, r7
 802400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802400e:	4770      	bx	lr

08024010 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024010:	b480      	push	{r7}
 8024012:	b083      	sub	sp, #12
 8024014:	af00      	add	r7, sp, #0
 8024016:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024018:	687b      	ldr	r3, [r7, #4]
 802401a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802401c:	6a1a      	ldr	r2, [r3, #32]
 802401e:	687b      	ldr	r3, [r7, #4]
 8024020:	661a      	str	r2, [r3, #96]	; 0x60
}
 8024022:	bf00      	nop
 8024024:	370c      	adds	r7, #12
 8024026:	46bd      	mov	sp, r7
 8024028:	f85d 7b04 	ldr.w	r7, [sp], #4
 802402c:	4770      	bx	lr

0802402e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 802402e:	b580      	push	{r7, lr}
 8024030:	b082      	sub	sp, #8
 8024032:	af00      	add	r7, sp, #0
 8024034:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	2200      	movs	r2, #0
 802403a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 802403c:	687b      	ldr	r3, [r7, #4]
 802403e:	2200      	movs	r2, #0
 8024040:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8024042:	6878      	ldr	r0, [r7, #4]
 8024044:	f7ff ffe4 	bl	8024010 <lfs_alloc_ack>
}
 8024048:	bf00      	nop
 802404a:	3708      	adds	r7, #8
 802404c:	46bd      	mov	sp, r7
 802404e:	bd80      	pop	{r7, pc}

08024050 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8024050:	b580      	push	{r7, lr}
 8024052:	b086      	sub	sp, #24
 8024054:	af02      	add	r7, sp, #8
 8024056:	6078      	str	r0, [r7, #4]
 8024058:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 802405a:	e04f      	b.n	80240fc <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 802405c:	687b      	ldr	r3, [r7, #4]
 802405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024060:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024066:	1c5a      	adds	r2, r3, #1
 8024068:	687b      	ldr	r3, [r7, #4]
 802406a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 802406c:	687b      	ldr	r3, [r7, #4]
 802406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024070:	1e5a      	subs	r2, r3, #1
 8024072:	687b      	ldr	r3, [r7, #4]
 8024074:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8024076:	687b      	ldr	r3, [r7, #4]
 8024078:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 802407a:	68bb      	ldr	r3, [r7, #8]
 802407c:	095b      	lsrs	r3, r3, #5
 802407e:	009b      	lsls	r3, r3, #2
 8024080:	4413      	add	r3, r2
 8024082:	681a      	ldr	r2, [r3, #0]
 8024084:	68bb      	ldr	r3, [r7, #8]
 8024086:	f003 031f 	and.w	r3, r3, #31
 802408a:	2101      	movs	r1, #1
 802408c:	fa01 f303 	lsl.w	r3, r1, r3
 8024090:	4013      	ands	r3, r2
 8024092:	2b00      	cmp	r3, #0
 8024094:	d132      	bne.n	80240fc <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802409a:	68bb      	ldr	r3, [r7, #8]
 802409c:	4413      	add	r3, r2
 802409e:	687a      	ldr	r2, [r7, #4]
 80240a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80240a2:	6a12      	ldr	r2, [r2, #32]
 80240a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80240a8:	fb01 f202 	mul.w	r2, r1, r2
 80240ac:	1a9a      	subs	r2, r3, r2
 80240ae:	683b      	ldr	r3, [r7, #0]
 80240b0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80240b2:	e009      	b.n	80240c8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80240b8:	1c5a      	adds	r2, r3, #1
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80240c2:	1e5a      	subs	r2, r3, #1
 80240c4:	687b      	ldr	r3, [r7, #4]
 80240c6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80240cc:	687b      	ldr	r3, [r7, #4]
 80240ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80240d0:	429a      	cmp	r2, r3
 80240d2:	d011      	beq.n	80240f8 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80240d8:	687b      	ldr	r3, [r7, #4]
 80240da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80240dc:	095b      	lsrs	r3, r3, #5
 80240de:	009b      	lsls	r3, r3, #2
 80240e0:	4413      	add	r3, r2
 80240e2:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80240e8:	f003 031f 	and.w	r3, r3, #31
 80240ec:	2101      	movs	r1, #1
 80240ee:	fa01 f303 	lsl.w	r3, r1, r3
 80240f2:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d1dd      	bne.n	80240b4 <lfs_alloc+0x64>
                }

                return 0;
 80240f8:	2300      	movs	r3, #0
 80240fa:	e050      	b.n	802419e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80240fc:	687b      	ldr	r3, [r7, #4]
 80240fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024104:	429a      	cmp	r2, r3
 8024106:	d1a9      	bne.n	802405c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802410c:	2b00      	cmp	r3, #0
 802410e:	d10f      	bne.n	8024130 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024110:	687b      	ldr	r3, [r7, #4]
 8024112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024114:	687b      	ldr	r3, [r7, #4]
 8024116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024118:	4413      	add	r3, r2
 802411a:	4a23      	ldr	r2, [pc, #140]	; (80241a8 <lfs_alloc+0x158>)
 802411c:	9200      	str	r2, [sp, #0]
 802411e:	f240 2247 	movw	r2, #583	; 0x247
 8024122:	4922      	ldr	r1, [pc, #136]	; (80241ac <lfs_alloc+0x15c>)
 8024124:	4822      	ldr	r0, [pc, #136]	; (80241b0 <lfs_alloc+0x160>)
 8024126:	f008 ff91 	bl	802d04c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 802412a:	f06f 031b 	mvn.w	r3, #27
 802412e:	e036      	b.n	802419e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024130:	687b      	ldr	r3, [r7, #4]
 8024132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024138:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 802413a:	687a      	ldr	r2, [r7, #4]
 802413c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802413e:	6a12      	ldr	r2, [r2, #32]
 8024140:	fbb3 f1f2 	udiv	r1, r3, r2
 8024144:	fb01 f202 	mul.w	r2, r1, r2
 8024148:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024154:	00da      	lsls	r2, r3, #3
 8024156:	687b      	ldr	r3, [r7, #4]
 8024158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802415a:	4619      	mov	r1, r3
 802415c:	4610      	mov	r0, r2
 802415e:	f7ff f811 	bl	8023184 <lfs_min>
 8024162:	4602      	mov	r2, r0
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	2200      	movs	r2, #0
 802416c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024178:	461a      	mov	r2, r3
 802417a:	2100      	movs	r1, #0
 802417c:	f009 f8fc 	bl	802d378 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8024180:	2301      	movs	r3, #1
 8024182:	687a      	ldr	r2, [r7, #4]
 8024184:	490b      	ldr	r1, [pc, #44]	; (80241b4 <lfs_alloc+0x164>)
 8024186:	6878      	ldr	r0, [r7, #4]
 8024188:	f005 fb3e 	bl	8029808 <lfs_fs_rawtraverse>
 802418c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802418e:	68fb      	ldr	r3, [r7, #12]
 8024190:	2b00      	cmp	r3, #0
 8024192:	f43f af62 	beq.w	802405a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8024196:	6878      	ldr	r0, [r7, #4]
 8024198:	f7ff ff49 	bl	802402e <lfs_alloc_drop>
            return err;
 802419c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 802419e:	4618      	mov	r0, r3
 80241a0:	3710      	adds	r7, #16
 80241a2:	46bd      	mov	sp, r7
 80241a4:	bd80      	pop	{r7, pc}
 80241a6:	bf00      	nop
 80241a8:	08033054 	.word	0x08033054
 80241ac:	08032f40 	.word	0x08032f40
 80241b0:	0803302c 	.word	0x0803302c
 80241b4:	08023fa3 	.word	0x08023fa3

080241b8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80241b8:	b590      	push	{r4, r7, lr}
 80241ba:	b08f      	sub	sp, #60	; 0x3c
 80241bc:	af04      	add	r7, sp, #16
 80241be:	60f8      	str	r0, [r7, #12]
 80241c0:	60b9      	str	r1, [r7, #8]
 80241c2:	607a      	str	r2, [r7, #4]
 80241c4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80241c6:	68bb      	ldr	r3, [r7, #8]
 80241c8:	68db      	ldr	r3, [r3, #12]
 80241ca:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80241cc:	68bb      	ldr	r3, [r7, #8]
 80241ce:	691b      	ldr	r3, [r3, #16]
 80241d0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80241d2:	2300      	movs	r3, #0
 80241d4:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80241d6:	68fb      	ldr	r3, [r7, #12]
 80241d8:	333c      	adds	r3, #60	; 0x3c
 80241da:	68ba      	ldr	r2, [r7, #8]
 80241dc:	4611      	mov	r1, r2
 80241de:	4618      	mov	r0, r3
 80241e0:	f7ff fd8e 	bl	8023d00 <lfs_gstate_hasmovehere>
 80241e4:	4603      	mov	r3, r0
 80241e6:	2b00      	cmp	r3, #0
 80241e8:	f000 80ba 	beq.w	8024360 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 80241ec:	6878      	ldr	r0, [r7, #4]
 80241ee:	f7ff fcdf 	bl	8023bb0 <lfs_tag_id>
 80241f2:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80241f4:	2b00      	cmp	r3, #0
 80241f6:	f000 80b3 	beq.w	8024360 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 80241fa:	68fb      	ldr	r3, [r7, #12]
 80241fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80241fe:	4618      	mov	r0, r3
 8024200:	f7ff fcd6 	bl	8023bb0 <lfs_tag_id>
 8024204:	4603      	mov	r3, r0
 8024206:	461c      	mov	r4, r3
 8024208:	6838      	ldr	r0, [r7, #0]
 802420a:	f7ff fcd1 	bl	8023bb0 <lfs_tag_id>
 802420e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024210:	429c      	cmp	r4, r3
 8024212:	f200 80a5 	bhi.w	8024360 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024216:	6a3b      	ldr	r3, [r7, #32]
 8024218:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802421c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 802421e:	e09f      	b.n	8024360 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8024220:	693b      	ldr	r3, [r7, #16]
 8024222:	4618      	mov	r0, r3
 8024224:	f7ff fce1 	bl	8023bea <lfs_tag_dsize>
 8024228:	4602      	mov	r2, r0
 802422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802422c:	1a9b      	subs	r3, r3, r2
 802422e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8024230:	693b      	ldr	r3, [r7, #16]
 8024232:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8024234:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8024236:	68bb      	ldr	r3, [r7, #8]
 8024238:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 802423a:	2204      	movs	r2, #4
 802423c:	9203      	str	r2, [sp, #12]
 802423e:	f107 0210 	add.w	r2, r7, #16
 8024242:	9202      	str	r2, [sp, #8]
 8024244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024246:	9201      	str	r2, [sp, #4]
 8024248:	9300      	str	r3, [sp, #0]
 802424a:	2304      	movs	r3, #4
 802424c:	460a      	mov	r2, r1
 802424e:	2100      	movs	r1, #0
 8024250:	68f8      	ldr	r0, [r7, #12]
 8024252:	f7ff f873 	bl	802333c <lfs_bd_read>
 8024256:	61b8      	str	r0, [r7, #24]
        if (err) {
 8024258:	69bb      	ldr	r3, [r7, #24]
 802425a:	2b00      	cmp	r3, #0
 802425c:	d001      	beq.n	8024262 <lfs_dir_getslice+0xaa>
            return err;
 802425e:	69bb      	ldr	r3, [r7, #24]
 8024260:	e08a      	b.n	8024378 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8024262:	693b      	ldr	r3, [r7, #16]
 8024264:	4618      	mov	r0, r3
 8024266:	f7ff f814 	bl	8023292 <lfs_frombe32>
 802426a:	4602      	mov	r2, r0
 802426c:	69fb      	ldr	r3, [r7, #28]
 802426e:	4053      	eors	r3, r2
 8024270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024274:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8024276:	6878      	ldr	r0, [r7, #4]
 8024278:	f7ff fc9a 	bl	8023bb0 <lfs_tag_id>
 802427c:	4603      	mov	r3, r0
 802427e:	2b00      	cmp	r3, #0
 8024280:	d02b      	beq.n	80242da <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024282:	69f8      	ldr	r0, [r7, #28]
 8024284:	f7ff fc5a 	bl	8023b3c <lfs_tag_type1>
 8024288:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 802428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802428e:	d124      	bne.n	80242da <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8024290:	69f8      	ldr	r0, [r7, #28]
 8024292:	f7ff fc8d 	bl	8023bb0 <lfs_tag_id>
 8024296:	4603      	mov	r3, r0
 8024298:	461c      	mov	r4, r3
 802429a:	6a3b      	ldr	r3, [r7, #32]
 802429c:	683a      	ldr	r2, [r7, #0]
 802429e:	1ad3      	subs	r3, r2, r3
 80242a0:	4618      	mov	r0, r3
 80242a2:	f7ff fc85 	bl	8023bb0 <lfs_tag_id>
 80242a6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80242a8:	429c      	cmp	r4, r3
 80242aa:	d816      	bhi.n	80242da <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80242ac:	6a3b      	ldr	r3, [r7, #32]
 80242ae:	683a      	ldr	r2, [r7, #0]
 80242b0:	1ad2      	subs	r2, r2, r3
 80242b2:	4b33      	ldr	r3, [pc, #204]	; (8024380 <lfs_dir_getslice+0x1c8>)
 80242b4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80242b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80242ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80242be:	69fa      	ldr	r2, [r7, #28]
 80242c0:	429a      	cmp	r2, r3
 80242c2:	d102      	bne.n	80242ca <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80242c4:	f06f 0301 	mvn.w	r3, #1
 80242c8:	e056      	b.n	8024378 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80242ca:	69f8      	ldr	r0, [r7, #28]
 80242cc:	f7ff fc63 	bl	8023b96 <lfs_tag_splice>
 80242d0:	4603      	mov	r3, r0
 80242d2:	029a      	lsls	r2, r3, #10
 80242d4:	6a3b      	ldr	r3, [r7, #32]
 80242d6:	4413      	add	r3, r2
 80242d8:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80242da:	687a      	ldr	r2, [r7, #4]
 80242dc:	69fb      	ldr	r3, [r7, #28]
 80242de:	401a      	ands	r2, r3
 80242e0:	6a3b      	ldr	r3, [r7, #32]
 80242e2:	6839      	ldr	r1, [r7, #0]
 80242e4:	1ac9      	subs	r1, r1, r3
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	400b      	ands	r3, r1
 80242ea:	429a      	cmp	r2, r3
 80242ec:	d138      	bne.n	8024360 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 80242ee:	69f8      	ldr	r0, [r7, #28]
 80242f0:	f7ff fc11 	bl	8023b16 <lfs_tag_isdelete>
 80242f4:	4603      	mov	r3, r0
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d002      	beq.n	8024300 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 80242fa:	f06f 0301 	mvn.w	r3, #1
 80242fe:	e03b      	b.n	8024378 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8024300:	69f8      	ldr	r0, [r7, #28]
 8024302:	f7ff fc65 	bl	8023bd0 <lfs_tag_size>
 8024306:	4603      	mov	r3, r0
 8024308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802430a:	4618      	mov	r0, r3
 802430c:	f7fe ff3a 	bl	8023184 <lfs_min>
 8024310:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024312:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024314:	68bb      	ldr	r3, [r7, #8]
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802431a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802431c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 802431e:	3204      	adds	r2, #4
 8024320:	6979      	ldr	r1, [r7, #20]
 8024322:	9103      	str	r1, [sp, #12]
 8024324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8024326:	9102      	str	r1, [sp, #8]
 8024328:	9201      	str	r2, [sp, #4]
 802432a:	9300      	str	r3, [sp, #0]
 802432c:	697b      	ldr	r3, [r7, #20]
 802432e:	4602      	mov	r2, r0
 8024330:	2100      	movs	r1, #0
 8024332:	68f8      	ldr	r0, [r7, #12]
 8024334:	f7ff f802 	bl	802333c <lfs_bd_read>
 8024338:	61b8      	str	r0, [r7, #24]
            if (err) {
 802433a:	69bb      	ldr	r3, [r7, #24]
 802433c:	2b00      	cmp	r3, #0
 802433e:	d001      	beq.n	8024344 <lfs_dir_getslice+0x18c>
                return err;
 8024340:	69bb      	ldr	r3, [r7, #24]
 8024342:	e019      	b.n	8024378 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8024344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024346:	697b      	ldr	r3, [r7, #20]
 8024348:	18d0      	adds	r0, r2, r3
 802434a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802434c:	697b      	ldr	r3, [r7, #20]
 802434e:	1ad3      	subs	r3, r2, r3
 8024350:	461a      	mov	r2, r3
 8024352:	2100      	movs	r1, #0
 8024354:	f009 f810 	bl	802d378 <memset>

            return tag + gdiff;
 8024358:	6a3a      	ldr	r2, [r7, #32]
 802435a:	69fb      	ldr	r3, [r7, #28]
 802435c:	4413      	add	r3, r2
 802435e:	e00b      	b.n	8024378 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8024360:	693b      	ldr	r3, [r7, #16]
 8024362:	4618      	mov	r0, r3
 8024364:	f7ff fc41 	bl	8023bea <lfs_tag_dsize>
 8024368:	4603      	mov	r3, r0
 802436a:	3304      	adds	r3, #4
 802436c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802436e:	429a      	cmp	r2, r3
 8024370:	f4bf af56 	bcs.w	8024220 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8024374:	f06f 0301 	mvn.w	r3, #1
}
 8024378:	4618      	mov	r0, r3
 802437a:	372c      	adds	r7, #44	; 0x2c
 802437c:	46bd      	mov	sp, r7
 802437e:	bd90      	pop	{r4, r7, pc}
 8024380:	000ffc00 	.word	0x000ffc00

08024384 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8024384:	b580      	push	{r7, lr}
 8024386:	b088      	sub	sp, #32
 8024388:	af04      	add	r7, sp, #16
 802438a:	60f8      	str	r0, [r7, #12]
 802438c:	60b9      	str	r1, [r7, #8]
 802438e:	607a      	str	r2, [r7, #4]
 8024390:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8024392:	6838      	ldr	r0, [r7, #0]
 8024394:	f7ff fc1c 	bl	8023bd0 <lfs_tag_size>
 8024398:	4603      	mov	r3, r0
 802439a:	9302      	str	r3, [sp, #8]
 802439c:	69bb      	ldr	r3, [r7, #24]
 802439e:	9301      	str	r3, [sp, #4]
 80243a0:	2300      	movs	r3, #0
 80243a2:	9300      	str	r3, [sp, #0]
 80243a4:	683b      	ldr	r3, [r7, #0]
 80243a6:	687a      	ldr	r2, [r7, #4]
 80243a8:	68b9      	ldr	r1, [r7, #8]
 80243aa:	68f8      	ldr	r0, [r7, #12]
 80243ac:	f7ff ff04 	bl	80241b8 <lfs_dir_getslice>
 80243b0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80243b2:	4618      	mov	r0, r3
 80243b4:	3710      	adds	r7, #16
 80243b6:	46bd      	mov	sp, r7
 80243b8:	bd80      	pop	{r7, pc}

080243ba <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80243ba:	b580      	push	{r7, lr}
 80243bc:	b08c      	sub	sp, #48	; 0x30
 80243be:	af04      	add	r7, sp, #16
 80243c0:	60f8      	str	r0, [r7, #12]
 80243c2:	60b9      	str	r1, [r7, #8]
 80243c4:	607a      	str	r2, [r7, #4]
 80243c6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80243c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243ca:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80243cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80243ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80243d0:	441a      	add	r2, r3
 80243d2:	68fb      	ldr	r3, [r7, #12]
 80243d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80243d6:	69db      	ldr	r3, [r3, #28]
 80243d8:	429a      	cmp	r2, r3
 80243da:	f240 80c0 	bls.w	802455e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80243de:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80243e2:	e0c1      	b.n	8024568 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80243e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80243e6:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80243e8:	687b      	ldr	r3, [r7, #4]
 80243ea:	2b00      	cmp	r3, #0
 80243ec:	d03f      	beq.n	802446e <lfs_dir_getread+0xb4>
 80243ee:	687b      	ldr	r3, [r7, #4]
 80243f0:	681b      	ldr	r3, [r3, #0]
 80243f2:	f113 0f02 	cmn.w	r3, #2
 80243f6:	d13a      	bne.n	802446e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 80243f8:	687b      	ldr	r3, [r7, #4]
 80243fa:	685a      	ldr	r2, [r3, #4]
 80243fc:	687b      	ldr	r3, [r7, #4]
 80243fe:	689b      	ldr	r3, [r3, #8]
 8024400:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024404:	429a      	cmp	r2, r3
 8024406:	d232      	bcs.n	802446e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8024408:	687b      	ldr	r3, [r7, #4]
 802440a:	685b      	ldr	r3, [r3, #4]
 802440c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802440e:	429a      	cmp	r2, r3
 8024410:	d324      	bcc.n	802445c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024412:	687b      	ldr	r3, [r7, #4]
 8024414:	689a      	ldr	r2, [r3, #8]
 8024416:	687b      	ldr	r3, [r7, #4]
 8024418:	6859      	ldr	r1, [r3, #4]
 802441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802441c:	1acb      	subs	r3, r1, r3
 802441e:	4413      	add	r3, r2
 8024420:	4619      	mov	r1, r3
 8024422:	69b8      	ldr	r0, [r7, #24]
 8024424:	f7fe feae 	bl	8023184 <lfs_min>
 8024428:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 802442a:	687b      	ldr	r3, [r7, #4]
 802442c:	68da      	ldr	r2, [r3, #12]
 802442e:	687b      	ldr	r3, [r7, #4]
 8024430:	685b      	ldr	r3, [r3, #4]
 8024432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024434:	1acb      	subs	r3, r1, r3
 8024436:	4413      	add	r3, r2
 8024438:	69ba      	ldr	r2, [r7, #24]
 802443a:	4619      	mov	r1, r3
 802443c:	69f8      	ldr	r0, [r7, #28]
 802443e:	f009 f970 	bl	802d722 <memcpy>

                data += diff;
 8024442:	69fa      	ldr	r2, [r7, #28]
 8024444:	69bb      	ldr	r3, [r7, #24]
 8024446:	4413      	add	r3, r2
 8024448:	61fb      	str	r3, [r7, #28]
                off += diff;
 802444a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802444c:	69bb      	ldr	r3, [r7, #24]
 802444e:	4413      	add	r3, r2
 8024450:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024454:	69bb      	ldr	r3, [r7, #24]
 8024456:	1ad3      	subs	r3, r2, r3
 8024458:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 802445a:	e080      	b.n	802455e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 802445c:	687b      	ldr	r3, [r7, #4]
 802445e:	685a      	ldr	r2, [r3, #4]
 8024460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024462:	1ad3      	subs	r3, r2, r3
 8024464:	4619      	mov	r1, r3
 8024466:	69b8      	ldr	r0, [r7, #24]
 8024468:	f7fe fe8c 	bl	8023184 <lfs_min>
 802446c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 802446e:	683b      	ldr	r3, [r7, #0]
 8024470:	681b      	ldr	r3, [r3, #0]
 8024472:	f113 0f02 	cmn.w	r3, #2
 8024476:	d13a      	bne.n	80244ee <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8024478:	683b      	ldr	r3, [r7, #0]
 802447a:	685a      	ldr	r2, [r3, #4]
 802447c:	683b      	ldr	r3, [r7, #0]
 802447e:	689b      	ldr	r3, [r3, #8]
 8024480:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024484:	429a      	cmp	r2, r3
 8024486:	d232      	bcs.n	80244ee <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8024488:	683b      	ldr	r3, [r7, #0]
 802448a:	685b      	ldr	r3, [r3, #4]
 802448c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802448e:	429a      	cmp	r2, r3
 8024490:	d324      	bcc.n	80244dc <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8024492:	683b      	ldr	r3, [r7, #0]
 8024494:	689a      	ldr	r2, [r3, #8]
 8024496:	683b      	ldr	r3, [r7, #0]
 8024498:	6859      	ldr	r1, [r3, #4]
 802449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802449c:	1acb      	subs	r3, r1, r3
 802449e:	4413      	add	r3, r2
 80244a0:	4619      	mov	r1, r3
 80244a2:	69b8      	ldr	r0, [r7, #24]
 80244a4:	f7fe fe6e 	bl	8023184 <lfs_min>
 80244a8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80244aa:	683b      	ldr	r3, [r7, #0]
 80244ac:	68da      	ldr	r2, [r3, #12]
 80244ae:	683b      	ldr	r3, [r7, #0]
 80244b0:	685b      	ldr	r3, [r3, #4]
 80244b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80244b4:	1acb      	subs	r3, r1, r3
 80244b6:	4413      	add	r3, r2
 80244b8:	69ba      	ldr	r2, [r7, #24]
 80244ba:	4619      	mov	r1, r3
 80244bc:	69f8      	ldr	r0, [r7, #28]
 80244be:	f009 f930 	bl	802d722 <memcpy>

                data += diff;
 80244c2:	69fa      	ldr	r2, [r7, #28]
 80244c4:	69bb      	ldr	r3, [r7, #24]
 80244c6:	4413      	add	r3, r2
 80244c8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80244ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80244cc:	69bb      	ldr	r3, [r7, #24]
 80244ce:	4413      	add	r3, r2
 80244d0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80244d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80244d4:	69bb      	ldr	r3, [r7, #24]
 80244d6:	1ad3      	subs	r3, r2, r3
 80244d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80244da:	e040      	b.n	802455e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80244dc:	683b      	ldr	r3, [r7, #0]
 80244de:	685a      	ldr	r2, [r3, #4]
 80244e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80244e2:	1ad3      	subs	r3, r2, r3
 80244e4:	4619      	mov	r1, r3
 80244e6:	69b8      	ldr	r0, [r7, #24]
 80244e8:	f7fe fe4c 	bl	8023184 <lfs_min>
 80244ec:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 80244ee:	683b      	ldr	r3, [r7, #0]
 80244f0:	f06f 0201 	mvn.w	r2, #1
 80244f4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80244f6:	68fb      	ldr	r3, [r7, #12]
 80244f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80244fa:	695b      	ldr	r3, [r3, #20]
 80244fc:	4619      	mov	r1, r3
 80244fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024500:	f7fe fe50 	bl	80231a4 <lfs_aligndown>
 8024504:	4602      	mov	r2, r0
 8024506:	683b      	ldr	r3, [r7, #0]
 8024508:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 802450a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802450e:	441a      	add	r2, r3
 8024510:	68fb      	ldr	r3, [r7, #12]
 8024512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024514:	695b      	ldr	r3, [r3, #20]
 8024516:	4619      	mov	r1, r3
 8024518:	4610      	mov	r0, r2
 802451a:	f7fe fe58 	bl	80231ce <lfs_alignup>
 802451e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024520:	68fb      	ldr	r3, [r7, #12]
 8024522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024526:	4619      	mov	r1, r3
 8024528:	4610      	mov	r0, r2
 802452a:	f7fe fe2b 	bl	8023184 <lfs_min>
 802452e:	4602      	mov	r2, r0
 8024530:	683b      	ldr	r3, [r7, #0]
 8024532:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024534:	683b      	ldr	r3, [r7, #0]
 8024536:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024538:	683a      	ldr	r2, [r7, #0]
 802453a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 802453c:	6839      	ldr	r1, [r7, #0]
 802453e:	6889      	ldr	r1, [r1, #8]
 8024540:	9102      	str	r1, [sp, #8]
 8024542:	9201      	str	r2, [sp, #4]
 8024544:	9300      	str	r3, [sp, #0]
 8024546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802454a:	68b9      	ldr	r1, [r7, #8]
 802454c:	68f8      	ldr	r0, [r7, #12]
 802454e:	f7ff fe33 	bl	80241b8 <lfs_dir_getslice>
 8024552:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8024554:	697b      	ldr	r3, [r7, #20]
 8024556:	2b00      	cmp	r3, #0
 8024558:	da01      	bge.n	802455e <lfs_dir_getread+0x1a4>
            return err;
 802455a:	697b      	ldr	r3, [r7, #20]
 802455c:	e004      	b.n	8024568 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 802455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024560:	2b00      	cmp	r3, #0
 8024562:	f47f af3f 	bne.w	80243e4 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8024566:	2300      	movs	r3, #0
}
 8024568:	4618      	mov	r0, r3
 802456a:	3720      	adds	r7, #32
 802456c:	46bd      	mov	sp, r7
 802456e:	bd80      	pop	{r7, pc}

08024570 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8024570:	b590      	push	{r4, r7, lr}
 8024572:	b087      	sub	sp, #28
 8024574:	af00      	add	r7, sp, #0
 8024576:	60f8      	str	r0, [r7, #12]
 8024578:	60b9      	str	r1, [r7, #8]
 802457a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 802457c:	68fb      	ldr	r3, [r7, #12]
 802457e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024580:	68bb      	ldr	r3, [r7, #8]
 8024582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8024586:	2b00      	cmp	r3, #0
 8024588:	d001      	beq.n	802458e <lfs_dir_traverse_filter+0x1e>
 802458a:	4b24      	ldr	r3, [pc, #144]	; (802461c <lfs_dir_traverse_filter+0xac>)
 802458c:	e000      	b.n	8024590 <lfs_dir_traverse_filter+0x20>
 802458e:	4b24      	ldr	r3, [pc, #144]	; (8024620 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024590:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8024592:	697b      	ldr	r3, [r7, #20]
 8024594:	681a      	ldr	r2, [r3, #0]
 8024596:	68bb      	ldr	r3, [r7, #8]
 8024598:	405a      	eors	r2, r3
 802459a:	693b      	ldr	r3, [r7, #16]
 802459c:	4013      	ands	r3, r2
 802459e:	2b00      	cmp	r3, #0
 80245a0:	d014      	beq.n	80245cc <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80245a2:	697b      	ldr	r3, [r7, #20]
 80245a4:	681b      	ldr	r3, [r3, #0]
 80245a6:	4618      	mov	r0, r3
 80245a8:	f7ff fab5 	bl	8023b16 <lfs_tag_isdelete>
 80245ac:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80245ae:	2b00      	cmp	r3, #0
 80245b0:	d10c      	bne.n	80245cc <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80245b2:	68bb      	ldr	r3, [r7, #8]
 80245b4:	4a19      	ldr	r2, [pc, #100]	; (802461c <lfs_dir_traverse_filter+0xac>)
 80245b6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80245b8:	697b      	ldr	r3, [r7, #20]
 80245ba:	6819      	ldr	r1, [r3, #0]
 80245bc:	4b19      	ldr	r3, [pc, #100]	; (8024624 <lfs_dir_traverse_filter+0xb4>)
 80245be:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80245c0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80245c4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80245c8:	429a      	cmp	r2, r3
 80245ca:	d104      	bne.n	80245d6 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80245cc:	697b      	ldr	r3, [r7, #20]
 80245ce:	2200      	movs	r2, #0
 80245d0:	601a      	str	r2, [r3, #0]
        return true;
 80245d2:	2301      	movs	r3, #1
 80245d4:	e01e      	b.n	8024614 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80245d6:	68b8      	ldr	r0, [r7, #8]
 80245d8:	f7ff fab0 	bl	8023b3c <lfs_tag_type1>
 80245dc:	4603      	mov	r3, r0
 80245de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80245e2:	d116      	bne.n	8024612 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 80245e4:	68b8      	ldr	r0, [r7, #8]
 80245e6:	f7ff fae3 	bl	8023bb0 <lfs_tag_id>
 80245ea:	4603      	mov	r3, r0
 80245ec:	461c      	mov	r4, r3
 80245ee:	697b      	ldr	r3, [r7, #20]
 80245f0:	681b      	ldr	r3, [r3, #0]
 80245f2:	4618      	mov	r0, r3
 80245f4:	f7ff fadc 	bl	8023bb0 <lfs_tag_id>
 80245f8:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80245fa:	429c      	cmp	r4, r3
 80245fc:	d809      	bhi.n	8024612 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80245fe:	68b8      	ldr	r0, [r7, #8]
 8024600:	f7ff fac9 	bl	8023b96 <lfs_tag_splice>
 8024604:	4603      	mov	r3, r0
 8024606:	029a      	lsls	r2, r3, #10
 8024608:	697b      	ldr	r3, [r7, #20]
 802460a:	681b      	ldr	r3, [r3, #0]
 802460c:	441a      	add	r2, r3
 802460e:	697b      	ldr	r3, [r7, #20]
 8024610:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024612:	2300      	movs	r3, #0
}
 8024614:	4618      	mov	r0, r3
 8024616:	371c      	adds	r7, #28
 8024618:	46bd      	mov	sp, r7
 802461a:	bd90      	pop	{r4, r7, pc}
 802461c:	7ffffc00 	.word	0x7ffffc00
 8024620:	700ffc00 	.word	0x700ffc00
 8024624:	000ffc00 	.word	0x000ffc00

08024628 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024628:	b590      	push	{r4, r7, lr}
 802462a:	b0c1      	sub	sp, #260	; 0x104
 802462c:	af04      	add	r7, sp, #16
 802462e:	60f8      	str	r0, [r7, #12]
 8024630:	60b9      	str	r1, [r7, #8]
 8024632:	607a      	str	r2, [r7, #4]
 8024634:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024636:	2300      	movs	r3, #0
 8024638:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 802463c:	6838      	ldr	r0, [r7, #0]
 802463e:	f7ff fad4 	bl	8023bea <lfs_tag_dsize>
 8024642:	4602      	mov	r2, r0
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	441a      	add	r2, r3
 8024648:	68bb      	ldr	r3, [r7, #8]
 802464a:	68db      	ldr	r3, [r3, #12]
 802464c:	429a      	cmp	r2, r3
 802464e:	d237      	bcs.n	80246c0 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8024650:	6838      	ldr	r0, [r7, #0]
 8024652:	f7ff faca 	bl	8023bea <lfs_tag_dsize>
 8024656:	4602      	mov	r2, r0
 8024658:	687b      	ldr	r3, [r7, #4]
 802465a:	4413      	add	r3, r2
 802465c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 802465e:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8024660:	68bb      	ldr	r3, [r7, #8]
 8024662:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8024664:	2204      	movs	r2, #4
 8024666:	9203      	str	r2, [sp, #12]
 8024668:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802466c:	9202      	str	r2, [sp, #8]
 802466e:	687a      	ldr	r2, [r7, #4]
 8024670:	9201      	str	r2, [sp, #4]
 8024672:	9300      	str	r3, [sp, #0]
 8024674:	2304      	movs	r3, #4
 8024676:	460a      	mov	r2, r1
 8024678:	2100      	movs	r1, #0
 802467a:	68f8      	ldr	r0, [r7, #12]
 802467c:	f7fe fe5e 	bl	802333c <lfs_bd_read>
 8024680:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8024684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024688:	2b00      	cmp	r3, #0
 802468a:	d002      	beq.n	8024692 <lfs_dir_traverse+0x6a>
                    return err;
 802468c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024690:	e3a6      	b.n	8024de0 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8024692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024694:	4618      	mov	r0, r3
 8024696:	f7fe fdfc 	bl	8023292 <lfs_frombe32>
 802469a:	4602      	mov	r2, r0
 802469c:	683b      	ldr	r3, [r7, #0]
 802469e:	4053      	eors	r3, r2
 80246a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80246a4:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 80246a6:	68bb      	ldr	r3, [r7, #8]
 80246a8:	681b      	ldr	r3, [r3, #0]
 80246aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80246ac:	687b      	ldr	r3, [r7, #4]
 80246ae:	3304      	adds	r3, #4
 80246b0:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 80246b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80246b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 80246ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80246bc:	603b      	str	r3, [r7, #0]
 80246be:	e01b      	b.n	80246f8 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 80246c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	dd13      	ble.n	80246f0 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 80246c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80246cc:	681b      	ldr	r3, [r3, #0]
 80246ce:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 80246d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80246d4:	685b      	ldr	r3, [r3, #4]
 80246d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 80246da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80246de:	3308      	adds	r3, #8
 80246e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 80246e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80246e8:	3b01      	subs	r3, #1
 80246ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80246ee:	e003      	b.n	80246f8 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 80246f0:	2300      	movs	r3, #0
 80246f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 80246f6:	e2a2      	b.n	8024c3e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 80246f8:	4b7e      	ldr	r3, [pc, #504]	; (80248f4 <lfs_dir_traverse+0x2cc>)
 80246fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 80246fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8024704:	405a      	eors	r2, r3
 8024706:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 802470a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802470e:	400b      	ands	r3, r1
 8024710:	4013      	ands	r3, r2
 8024712:	2b00      	cmp	r3, #0
 8024714:	f040 8285 	bne.w	8024c22 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024718:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 802471c:	f7ff fa48 	bl	8023bb0 <lfs_tag_id>
 8024720:	4603      	mov	r3, r0
 8024722:	2b00      	cmp	r3, #0
 8024724:	f000 80f0 	beq.w	8024908 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802472c:	2b02      	cmp	r3, #2
 802472e:	d906      	bls.n	802473e <lfs_dir_traverse+0x116>
 8024730:	4b71      	ldr	r3, [pc, #452]	; (80248f8 <lfs_dir_traverse+0x2d0>)
 8024732:	4a72      	ldr	r2, [pc, #456]	; (80248fc <lfs_dir_traverse+0x2d4>)
 8024734:	f240 314e 	movw	r1, #846	; 0x34e
 8024738:	4871      	ldr	r0, [pc, #452]	; (8024900 <lfs_dir_traverse+0x2d8>)
 802473a:	f007 fc4d 	bl	802bfd8 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 802473e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024740:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024744:	4613      	mov	r3, r2
 8024746:	011b      	lsls	r3, r3, #4
 8024748:	1a9b      	subs	r3, r3, r2
 802474a:	009b      	lsls	r3, r3, #2
 802474c:	33f0      	adds	r3, #240	; 0xf0
 802474e:	443b      	add	r3, r7
 8024750:	3b98      	subs	r3, #152	; 0x98
 8024752:	68ba      	ldr	r2, [r7, #8]
 8024754:	601a      	str	r2, [r3, #0]
 8024756:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802475a:	4613      	mov	r3, r2
 802475c:	011b      	lsls	r3, r3, #4
 802475e:	1a9b      	subs	r3, r3, r2
 8024760:	009b      	lsls	r3, r3, #2
 8024762:	33f0      	adds	r3, #240	; 0xf0
 8024764:	443b      	add	r3, r7
 8024766:	3b94      	subs	r3, #148	; 0x94
 8024768:	687a      	ldr	r2, [r7, #4]
 802476a:	601a      	str	r2, [r3, #0]
 802476c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024770:	4613      	mov	r3, r2
 8024772:	011b      	lsls	r3, r3, #4
 8024774:	1a9b      	subs	r3, r3, r2
 8024776:	009b      	lsls	r3, r3, #2
 8024778:	33f0      	adds	r3, #240	; 0xf0
 802477a:	443b      	add	r3, r7
 802477c:	3b90      	subs	r3, #144	; 0x90
 802477e:	683a      	ldr	r2, [r7, #0]
 8024780:	601a      	str	r2, [r3, #0]
 8024782:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024786:	4613      	mov	r3, r2
 8024788:	011b      	lsls	r3, r3, #4
 802478a:	1a9b      	subs	r3, r3, r2
 802478c:	009b      	lsls	r3, r3, #2
 802478e:	33f0      	adds	r3, #240	; 0xf0
 8024790:	443b      	add	r3, r7
 8024792:	3b8c      	subs	r3, #140	; 0x8c
 8024794:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024798:	601a      	str	r2, [r3, #0]
 802479a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802479e:	4613      	mov	r3, r2
 80247a0:	011b      	lsls	r3, r3, #4
 80247a2:	1a9b      	subs	r3, r3, r2
 80247a4:	009b      	lsls	r3, r3, #2
 80247a6:	33f0      	adds	r3, #240	; 0xf0
 80247a8:	443b      	add	r3, r7
 80247aa:	3b88      	subs	r3, #136	; 0x88
 80247ac:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80247b0:	601a      	str	r2, [r3, #0]
 80247b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80247b6:	4613      	mov	r3, r2
 80247b8:	011b      	lsls	r3, r3, #4
 80247ba:	1a9b      	subs	r3, r3, r2
 80247bc:	009b      	lsls	r3, r3, #2
 80247be:	33f0      	adds	r3, #240	; 0xf0
 80247c0:	443b      	add	r3, r7
 80247c2:	3b84      	subs	r3, #132	; 0x84
 80247c4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80247c8:	601a      	str	r2, [r3, #0]
 80247ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80247ce:	4613      	mov	r3, r2
 80247d0:	011b      	lsls	r3, r3, #4
 80247d2:	1a9b      	subs	r3, r3, r2
 80247d4:	009b      	lsls	r3, r3, #2
 80247d6:	33f0      	adds	r3, #240	; 0xf0
 80247d8:	443b      	add	r3, r7
 80247da:	3b80      	subs	r3, #128	; 0x80
 80247dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80247e0:	601a      	str	r2, [r3, #0]
 80247e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80247e6:	4613      	mov	r3, r2
 80247e8:	011b      	lsls	r3, r3, #4
 80247ea:	1a9b      	subs	r3, r3, r2
 80247ec:	009b      	lsls	r3, r3, #2
 80247ee:	33f0      	adds	r3, #240	; 0xf0
 80247f0:	443b      	add	r3, r7
 80247f2:	3b7c      	subs	r3, #124	; 0x7c
 80247f4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80247f8:	801a      	strh	r2, [r3, #0]
 80247fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80247fe:	4613      	mov	r3, r2
 8024800:	011b      	lsls	r3, r3, #4
 8024802:	1a9b      	subs	r3, r3, r2
 8024804:	009b      	lsls	r3, r3, #2
 8024806:	33f0      	adds	r3, #240	; 0xf0
 8024808:	443b      	add	r3, r7
 802480a:	3b7a      	subs	r3, #122	; 0x7a
 802480c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024810:	801a      	strh	r2, [r3, #0]
 8024812:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024816:	4613      	mov	r3, r2
 8024818:	011b      	lsls	r3, r3, #4
 802481a:	1a9b      	subs	r3, r3, r2
 802481c:	009b      	lsls	r3, r3, #2
 802481e:	33f0      	adds	r3, #240	; 0xf0
 8024820:	443b      	add	r3, r7
 8024822:	3b78      	subs	r3, #120	; 0x78
 8024824:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024828:	801a      	strh	r2, [r3, #0]
 802482a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802482e:	4613      	mov	r3, r2
 8024830:	011b      	lsls	r3, r3, #4
 8024832:	1a9b      	subs	r3, r3, r2
 8024834:	009b      	lsls	r3, r3, #2
 8024836:	33f0      	adds	r3, #240	; 0xf0
 8024838:	443b      	add	r3, r7
 802483a:	3b74      	subs	r3, #116	; 0x74
 802483c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024840:	601a      	str	r2, [r3, #0]
 8024842:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024846:	4613      	mov	r3, r2
 8024848:	011b      	lsls	r3, r3, #4
 802484a:	1a9b      	subs	r3, r3, r2
 802484c:	009b      	lsls	r3, r3, #2
 802484e:	33f0      	adds	r3, #240	; 0xf0
 8024850:	443b      	add	r3, r7
 8024852:	3b70      	subs	r3, #112	; 0x70
 8024854:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024858:	601a      	str	r2, [r3, #0]
 802485a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802485e:	4613      	mov	r3, r2
 8024860:	011b      	lsls	r3, r3, #4
 8024862:	1a9b      	subs	r3, r3, r2
 8024864:	009b      	lsls	r3, r3, #2
 8024866:	33f0      	adds	r3, #240	; 0xf0
 8024868:	443b      	add	r3, r7
 802486a:	3b6c      	subs	r3, #108	; 0x6c
 802486c:	6019      	str	r1, [r3, #0]
 802486e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024872:	4613      	mov	r3, r2
 8024874:	011b      	lsls	r3, r3, #4
 8024876:	1a9b      	subs	r3, r3, r2
 8024878:	009b      	lsls	r3, r3, #2
 802487a:	33f0      	adds	r3, #240	; 0xf0
 802487c:	443b      	add	r3, r7
 802487e:	3b68      	subs	r3, #104	; 0x68
 8024880:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024884:	601a      	str	r2, [r3, #0]
 8024886:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802488a:	4613      	mov	r3, r2
 802488c:	011b      	lsls	r3, r3, #4
 802488e:	1a9b      	subs	r3, r3, r2
 8024890:	009b      	lsls	r3, r3, #2
 8024892:	33f0      	adds	r3, #240	; 0xf0
 8024894:	443b      	add	r3, r7
 8024896:	3b68      	subs	r3, #104	; 0x68
 8024898:	3304      	adds	r3, #4
 802489a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802489e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80248a2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80248a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80248aa:	3301      	adds	r3, #1
 80248ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80248b0:	2300      	movs	r3, #0
 80248b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80248b6:	2300      	movs	r3, #0
 80248b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80248bc:	2300      	movs	r3, #0
 80248be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80248c2:	2300      	movs	r3, #0
 80248c4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80248c8:	2300      	movs	r3, #0
 80248ca:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 80248ce:	4b0d      	ldr	r3, [pc, #52]	; (8024904 <lfs_dir_traverse+0x2dc>)
 80248d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80248d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80248d8:	1e5a      	subs	r2, r3, #1
 80248da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80248de:	4613      	mov	r3, r2
 80248e0:	011b      	lsls	r3, r3, #4
 80248e2:	1a9b      	subs	r3, r3, r2
 80248e4:	009b      	lsls	r3, r3, #2
 80248e6:	3328      	adds	r3, #40	; 0x28
 80248e8:	440b      	add	r3, r1
 80248ea:	3304      	adds	r3, #4
 80248ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 80248f0:	e19e      	b.n	8024c30 <lfs_dir_traverse+0x608>
 80248f2:	bf00      	nop
 80248f4:	7ff00000 	.word	0x7ff00000
 80248f8:	08033058 	.word	0x08033058
 80248fc:	080341f0 	.word	0x080341f0
 8024900:	08032f40 	.word	0x08032f40
 8024904:	08024571 	.word	0x08024571
            }
        }

popped:
 8024908:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 802490a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 802490e:	f7ff f94f 	bl	8023bb0 <lfs_tag_id>
 8024912:	4603      	mov	r3, r0
 8024914:	2b00      	cmp	r3, #0
 8024916:	d015      	beq.n	8024944 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802491a:	4618      	mov	r0, r3
 802491c:	f7ff f948 	bl	8023bb0 <lfs_tag_id>
 8024920:	4603      	mov	r3, r0
 8024922:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8024924:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8024928:	4293      	cmp	r3, r2
 802492a:	f200 817c 	bhi.w	8024c26 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 802492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024930:	4618      	mov	r0, r3
 8024932:	f7ff f93d 	bl	8023bb0 <lfs_tag_id>
 8024936:	4603      	mov	r3, r0
 8024938:	461a      	mov	r2, r3
 802493a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 802493e:	4293      	cmp	r3, r2
 8024940:	f240 8171 	bls.w	8024c26 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8024944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024946:	4618      	mov	r0, r3
 8024948:	f7ff f908 	bl	8023b5c <lfs_tag_type3>
 802494c:	4603      	mov	r3, r0
 802494e:	2b00      	cmp	r3, #0
 8024950:	f43f ae74 	beq.w	802463c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8024954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024956:	4618      	mov	r0, r3
 8024958:	f7ff f900 	bl	8023b5c <lfs_tag_type3>
 802495c:	4603      	mov	r3, r0
 802495e:	461a      	mov	r2, r3
 8024960:	f240 1301 	movw	r3, #257	; 0x101
 8024964:	429a      	cmp	r2, r3
 8024966:	f040 80e0 	bne.w	8024b2a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 802496a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802496e:	4ab1      	ldr	r2, [pc, #708]	; (8024c34 <lfs_dir_traverse+0x60c>)
 8024970:	4293      	cmp	r3, r2
 8024972:	f000 815a 	beq.w	8024c2a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8024976:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802497a:	4613      	mov	r3, r2
 802497c:	011b      	lsls	r3, r3, #4
 802497e:	1a9b      	subs	r3, r3, r2
 8024980:	009b      	lsls	r3, r3, #2
 8024982:	33f0      	adds	r3, #240	; 0xf0
 8024984:	443b      	add	r3, r7
 8024986:	3b98      	subs	r3, #152	; 0x98
 8024988:	4618      	mov	r0, r3
 802498a:	233c      	movs	r3, #60	; 0x3c
 802498c:	461a      	mov	r2, r3
 802498e:	2100      	movs	r1, #0
 8024990:	f008 fcf2 	bl	802d378 <memset>
 8024994:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024998:	4613      	mov	r3, r2
 802499a:	011b      	lsls	r3, r3, #4
 802499c:	1a9b      	subs	r3, r3, r2
 802499e:	009b      	lsls	r3, r3, #2
 80249a0:	33f0      	adds	r3, #240	; 0xf0
 80249a2:	443b      	add	r3, r7
 80249a4:	3b98      	subs	r3, #152	; 0x98
 80249a6:	68ba      	ldr	r2, [r7, #8]
 80249a8:	601a      	str	r2, [r3, #0]
 80249aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80249ae:	4613      	mov	r3, r2
 80249b0:	011b      	lsls	r3, r3, #4
 80249b2:	1a9b      	subs	r3, r3, r2
 80249b4:	009b      	lsls	r3, r3, #2
 80249b6:	33f0      	adds	r3, #240	; 0xf0
 80249b8:	443b      	add	r3, r7
 80249ba:	3b94      	subs	r3, #148	; 0x94
 80249bc:	687a      	ldr	r2, [r7, #4]
 80249be:	601a      	str	r2, [r3, #0]
 80249c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80249c4:	4613      	mov	r3, r2
 80249c6:	011b      	lsls	r3, r3, #4
 80249c8:	1a9b      	subs	r3, r3, r2
 80249ca:	009b      	lsls	r3, r3, #2
 80249cc:	33f0      	adds	r3, #240	; 0xf0
 80249ce:	443b      	add	r3, r7
 80249d0:	3b90      	subs	r3, #144	; 0x90
 80249d2:	683a      	ldr	r2, [r7, #0]
 80249d4:	601a      	str	r2, [r3, #0]
 80249d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80249da:	4613      	mov	r3, r2
 80249dc:	011b      	lsls	r3, r3, #4
 80249de:	1a9b      	subs	r3, r3, r2
 80249e0:	009b      	lsls	r3, r3, #2
 80249e2:	33f0      	adds	r3, #240	; 0xf0
 80249e4:	443b      	add	r3, r7
 80249e6:	3b8c      	subs	r3, #140	; 0x8c
 80249e8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80249ec:	601a      	str	r2, [r3, #0]
 80249ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80249f2:	4613      	mov	r3, r2
 80249f4:	011b      	lsls	r3, r3, #4
 80249f6:	1a9b      	subs	r3, r3, r2
 80249f8:	009b      	lsls	r3, r3, #2
 80249fa:	33f0      	adds	r3, #240	; 0xf0
 80249fc:	443b      	add	r3, r7
 80249fe:	3b88      	subs	r3, #136	; 0x88
 8024a00:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024a04:	601a      	str	r2, [r3, #0]
 8024a06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a0a:	4613      	mov	r3, r2
 8024a0c:	011b      	lsls	r3, r3, #4
 8024a0e:	1a9b      	subs	r3, r3, r2
 8024a10:	009b      	lsls	r3, r3, #2
 8024a12:	33f0      	adds	r3, #240	; 0xf0
 8024a14:	443b      	add	r3, r7
 8024a16:	3b84      	subs	r3, #132	; 0x84
 8024a18:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024a1c:	601a      	str	r2, [r3, #0]
 8024a1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a22:	4613      	mov	r3, r2
 8024a24:	011b      	lsls	r3, r3, #4
 8024a26:	1a9b      	subs	r3, r3, r2
 8024a28:	009b      	lsls	r3, r3, #2
 8024a2a:	33f0      	adds	r3, #240	; 0xf0
 8024a2c:	443b      	add	r3, r7
 8024a2e:	3b80      	subs	r3, #128	; 0x80
 8024a30:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024a34:	601a      	str	r2, [r3, #0]
 8024a36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a3a:	4613      	mov	r3, r2
 8024a3c:	011b      	lsls	r3, r3, #4
 8024a3e:	1a9b      	subs	r3, r3, r2
 8024a40:	009b      	lsls	r3, r3, #2
 8024a42:	33f0      	adds	r3, #240	; 0xf0
 8024a44:	443b      	add	r3, r7
 8024a46:	3b7c      	subs	r3, #124	; 0x7c
 8024a48:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024a4c:	801a      	strh	r2, [r3, #0]
 8024a4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a52:	4613      	mov	r3, r2
 8024a54:	011b      	lsls	r3, r3, #4
 8024a56:	1a9b      	subs	r3, r3, r2
 8024a58:	009b      	lsls	r3, r3, #2
 8024a5a:	33f0      	adds	r3, #240	; 0xf0
 8024a5c:	443b      	add	r3, r7
 8024a5e:	3b7a      	subs	r3, #122	; 0x7a
 8024a60:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024a64:	801a      	strh	r2, [r3, #0]
 8024a66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a6a:	4613      	mov	r3, r2
 8024a6c:	011b      	lsls	r3, r3, #4
 8024a6e:	1a9b      	subs	r3, r3, r2
 8024a70:	009b      	lsls	r3, r3, #2
 8024a72:	33f0      	adds	r3, #240	; 0xf0
 8024a74:	443b      	add	r3, r7
 8024a76:	3b78      	subs	r3, #120	; 0x78
 8024a78:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024a7c:	801a      	strh	r2, [r3, #0]
 8024a7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a82:	4613      	mov	r3, r2
 8024a84:	011b      	lsls	r3, r3, #4
 8024a86:	1a9b      	subs	r3, r3, r2
 8024a88:	009b      	lsls	r3, r3, #2
 8024a8a:	33f0      	adds	r3, #240	; 0xf0
 8024a8c:	443b      	add	r3, r7
 8024a8e:	3b74      	subs	r3, #116	; 0x74
 8024a90:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024a94:	601a      	str	r2, [r3, #0]
 8024a96:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a9a:	4613      	mov	r3, r2
 8024a9c:	011b      	lsls	r3, r3, #4
 8024a9e:	1a9b      	subs	r3, r3, r2
 8024aa0:	009b      	lsls	r3, r3, #2
 8024aa2:	33f0      	adds	r3, #240	; 0xf0
 8024aa4:	443b      	add	r3, r7
 8024aa6:	3b70      	subs	r3, #112	; 0x70
 8024aa8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024aac:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8024aae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024ab2:	3301      	adds	r3, #1
 8024ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8024ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024aba:	4618      	mov	r0, r3
 8024abc:	f7ff f888 	bl	8023bd0 <lfs_tag_size>
 8024ac0:	4603      	mov	r3, r0
 8024ac2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8024ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024ac8:	4618      	mov	r0, r3
 8024aca:	f7ff f871 	bl	8023bb0 <lfs_tag_id>
 8024ace:	4603      	mov	r3, r0
 8024ad0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8024ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024ad8:	60bb      	str	r3, [r7, #8]
            off = 0;
 8024ada:	2300      	movs	r3, #0
 8024adc:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8024ade:	f04f 33ff 	mov.w	r3, #4294967295
 8024ae2:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8024ae4:	2300      	movs	r3, #0
 8024ae6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8024aea:	2300      	movs	r3, #0
 8024aec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8024af0:	4b51      	ldr	r3, [pc, #324]	; (8024c38 <lfs_dir_traverse+0x610>)
 8024af2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8024af6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024afa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8024afe:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024b02:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8024b06:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024b0a:	3301      	adds	r3, #1
 8024b0c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8024b10:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8024b14:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024b18:	1ad3      	subs	r3, r2, r3
 8024b1a:	b29a      	uxth	r2, r3
 8024b1c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8024b20:	4413      	add	r3, r2
 8024b22:	b29b      	uxth	r3, r3
 8024b24:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8024b28:	e588      	b.n	802463c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8024b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024b2c:	4618      	mov	r0, r3
 8024b2e:	f7ff f815 	bl	8023b5c <lfs_tag_type3>
 8024b32:	4603      	mov	r3, r0
 8024b34:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8024b38:	d159      	bne.n	8024bee <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024b3a:	2300      	movs	r3, #0
 8024b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024b40:	e04b      	b.n	8024bda <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8024b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024b4e:	4613      	mov	r3, r2
 8024b50:	005b      	lsls	r3, r3, #1
 8024b52:	4413      	add	r3, r2
 8024b54:	009b      	lsls	r3, r3, #2
 8024b56:	461a      	mov	r2, r3
 8024b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024b5c:	4413      	add	r3, r2
 8024b5e:	781b      	ldrb	r3, [r3, #0]
 8024b60:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8024b64:	051c      	lsls	r4, r3, #20
 8024b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024b68:	4618      	mov	r0, r3
 8024b6a:	f7ff f821 	bl	8023bb0 <lfs_tag_id>
 8024b6e:	4603      	mov	r3, r0
 8024b70:	461a      	mov	r2, r3
 8024b72:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024b76:	4413      	add	r3, r2
 8024b78:	029b      	lsls	r3, r3, #10
 8024b7a:	ea44 0103 	orr.w	r1, r4, r3
 8024b7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024b82:	4613      	mov	r3, r2
 8024b84:	005b      	lsls	r3, r3, #1
 8024b86:	4413      	add	r3, r2
 8024b88:	009b      	lsls	r3, r3, #2
 8024b8a:	461a      	mov	r2, r3
 8024b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024b90:	4413      	add	r3, r2
 8024b92:	689b      	ldr	r3, [r3, #8]
 8024b94:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8024b96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024b9a:	4613      	mov	r3, r2
 8024b9c:	005b      	lsls	r3, r3, #1
 8024b9e:	4413      	add	r3, r2
 8024ba0:	009b      	lsls	r3, r3, #2
 8024ba2:	461a      	mov	r2, r3
 8024ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024ba8:	4413      	add	r3, r2
 8024baa:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024bb0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024bb4:	4798      	blx	r3
 8024bb6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8024bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024bbe:	2b00      	cmp	r3, #0
 8024bc0:	da02      	bge.n	8024bc8 <lfs_dir_traverse+0x5a0>
                    return res;
 8024bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024bc6:	e10b      	b.n	8024de0 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8024bc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	d12e      	bne.n	8024c2e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024bd4:	3301      	adds	r3, #1
 8024bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024bdc:	4618      	mov	r0, r3
 8024bde:	f7fe fff7 	bl	8023bd0 <lfs_tag_size>
 8024be2:	4602      	mov	r2, r0
 8024be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024be8:	4293      	cmp	r3, r2
 8024bea:	d3aa      	bcc.n	8024b42 <lfs_dir_traverse+0x51a>
 8024bec:	e526      	b.n	802463c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8024bee:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024bf2:	029a      	lsls	r2, r3, #10
 8024bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024bf6:	18d1      	adds	r1, r2, r3
 8024bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024bfc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024c00:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024c04:	4798      	blx	r3
 8024c06:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8024c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024c0e:	2b00      	cmp	r3, #0
 8024c10:	da02      	bge.n	8024c18 <lfs_dir_traverse+0x5f0>
                return res;
 8024c12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024c16:	e0e3      	b.n	8024de0 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8024c18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024c1c:	2b00      	cmp	r3, #0
 8024c1e:	d10d      	bne.n	8024c3c <lfs_dir_traverse+0x614>
 8024c20:	e50c      	b.n	802463c <lfs_dir_traverse+0x14>
                continue;
 8024c22:	bf00      	nop
 8024c24:	e50a      	b.n	802463c <lfs_dir_traverse+0x14>
            continue;
 8024c26:	bf00      	nop
 8024c28:	e508      	b.n	802463c <lfs_dir_traverse+0x14>
                continue;
 8024c2a:	bf00      	nop
 8024c2c:	e506      	b.n	802463c <lfs_dir_traverse+0x14>
                    break;
 8024c2e:	bf00      	nop
        {
 8024c30:	e504      	b.n	802463c <lfs_dir_traverse+0x14>
 8024c32:	bf00      	nop
 8024c34:	08024571 	.word	0x08024571
 8024c38:	600ffc00 	.word	0x600ffc00
                break;
 8024c3c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8024c3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024c42:	2b00      	cmp	r3, #0
 8024c44:	f000 80ca 	beq.w	8024ddc <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8024c48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024c4c:	1e5a      	subs	r2, r3, #1
 8024c4e:	4613      	mov	r3, r2
 8024c50:	011b      	lsls	r3, r3, #4
 8024c52:	1a9b      	subs	r3, r3, r2
 8024c54:	009b      	lsls	r3, r3, #2
 8024c56:	33f0      	adds	r3, #240	; 0xf0
 8024c58:	443b      	add	r3, r7
 8024c5a:	3b98      	subs	r3, #152	; 0x98
 8024c5c:	681b      	ldr	r3, [r3, #0]
 8024c5e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8024c60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024c64:	1e5a      	subs	r2, r3, #1
 8024c66:	4613      	mov	r3, r2
 8024c68:	011b      	lsls	r3, r3, #4
 8024c6a:	1a9b      	subs	r3, r3, r2
 8024c6c:	009b      	lsls	r3, r3, #2
 8024c6e:	33f0      	adds	r3, #240	; 0xf0
 8024c70:	443b      	add	r3, r7
 8024c72:	3b94      	subs	r3, #148	; 0x94
 8024c74:	681b      	ldr	r3, [r3, #0]
 8024c76:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8024c78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024c7c:	1e5a      	subs	r2, r3, #1
 8024c7e:	4613      	mov	r3, r2
 8024c80:	011b      	lsls	r3, r3, #4
 8024c82:	1a9b      	subs	r3, r3, r2
 8024c84:	009b      	lsls	r3, r3, #2
 8024c86:	33f0      	adds	r3, #240	; 0xf0
 8024c88:	443b      	add	r3, r7
 8024c8a:	3b90      	subs	r3, #144	; 0x90
 8024c8c:	681b      	ldr	r3, [r3, #0]
 8024c8e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8024c90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024c94:	1e5a      	subs	r2, r3, #1
 8024c96:	4613      	mov	r3, r2
 8024c98:	011b      	lsls	r3, r3, #4
 8024c9a:	1a9b      	subs	r3, r3, r2
 8024c9c:	009b      	lsls	r3, r3, #2
 8024c9e:	33f0      	adds	r3, #240	; 0xf0
 8024ca0:	443b      	add	r3, r7
 8024ca2:	3b8c      	subs	r3, #140	; 0x8c
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8024caa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024cae:	1e5a      	subs	r2, r3, #1
 8024cb0:	4613      	mov	r3, r2
 8024cb2:	011b      	lsls	r3, r3, #4
 8024cb4:	1a9b      	subs	r3, r3, r2
 8024cb6:	009b      	lsls	r3, r3, #2
 8024cb8:	33f0      	adds	r3, #240	; 0xf0
 8024cba:	443b      	add	r3, r7
 8024cbc:	3b88      	subs	r3, #136	; 0x88
 8024cbe:	681b      	ldr	r3, [r3, #0]
 8024cc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8024cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024cc8:	1e5a      	subs	r2, r3, #1
 8024cca:	4613      	mov	r3, r2
 8024ccc:	011b      	lsls	r3, r3, #4
 8024cce:	1a9b      	subs	r3, r3, r2
 8024cd0:	009b      	lsls	r3, r3, #2
 8024cd2:	33f0      	adds	r3, #240	; 0xf0
 8024cd4:	443b      	add	r3, r7
 8024cd6:	3b84      	subs	r3, #132	; 0x84
 8024cd8:	681b      	ldr	r3, [r3, #0]
 8024cda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8024cde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024ce2:	1e5a      	subs	r2, r3, #1
 8024ce4:	4613      	mov	r3, r2
 8024ce6:	011b      	lsls	r3, r3, #4
 8024ce8:	1a9b      	subs	r3, r3, r2
 8024cea:	009b      	lsls	r3, r3, #2
 8024cec:	33f0      	adds	r3, #240	; 0xf0
 8024cee:	443b      	add	r3, r7
 8024cf0:	3b80      	subs	r3, #128	; 0x80
 8024cf2:	681b      	ldr	r3, [r3, #0]
 8024cf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8024cf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024cfc:	1e5a      	subs	r2, r3, #1
 8024cfe:	4613      	mov	r3, r2
 8024d00:	011b      	lsls	r3, r3, #4
 8024d02:	1a9b      	subs	r3, r3, r2
 8024d04:	009b      	lsls	r3, r3, #2
 8024d06:	33f0      	adds	r3, #240	; 0xf0
 8024d08:	443b      	add	r3, r7
 8024d0a:	3b7c      	subs	r3, #124	; 0x7c
 8024d0c:	881b      	ldrh	r3, [r3, #0]
 8024d0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8024d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024d16:	1e5a      	subs	r2, r3, #1
 8024d18:	4613      	mov	r3, r2
 8024d1a:	011b      	lsls	r3, r3, #4
 8024d1c:	1a9b      	subs	r3, r3, r2
 8024d1e:	009b      	lsls	r3, r3, #2
 8024d20:	33f0      	adds	r3, #240	; 0xf0
 8024d22:	443b      	add	r3, r7
 8024d24:	3b7a      	subs	r3, #122	; 0x7a
 8024d26:	881b      	ldrh	r3, [r3, #0]
 8024d28:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8024d2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024d30:	1e5a      	subs	r2, r3, #1
 8024d32:	4613      	mov	r3, r2
 8024d34:	011b      	lsls	r3, r3, #4
 8024d36:	1a9b      	subs	r3, r3, r2
 8024d38:	009b      	lsls	r3, r3, #2
 8024d3a:	33f0      	adds	r3, #240	; 0xf0
 8024d3c:	443b      	add	r3, r7
 8024d3e:	3b78      	subs	r3, #120	; 0x78
 8024d40:	881b      	ldrh	r3, [r3, #0]
 8024d42:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8024d46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024d4a:	1e5a      	subs	r2, r3, #1
 8024d4c:	4613      	mov	r3, r2
 8024d4e:	011b      	lsls	r3, r3, #4
 8024d50:	1a9b      	subs	r3, r3, r2
 8024d52:	009b      	lsls	r3, r3, #2
 8024d54:	33f0      	adds	r3, #240	; 0xf0
 8024d56:	443b      	add	r3, r7
 8024d58:	3b74      	subs	r3, #116	; 0x74
 8024d5a:	681b      	ldr	r3, [r3, #0]
 8024d5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8024d60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024d64:	1e5a      	subs	r2, r3, #1
 8024d66:	4613      	mov	r3, r2
 8024d68:	011b      	lsls	r3, r3, #4
 8024d6a:	1a9b      	subs	r3, r3, r2
 8024d6c:	009b      	lsls	r3, r3, #2
 8024d6e:	33f0      	adds	r3, #240	; 0xf0
 8024d70:	443b      	add	r3, r7
 8024d72:	3b70      	subs	r3, #112	; 0x70
 8024d74:	681b      	ldr	r3, [r3, #0]
 8024d76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8024d7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024d7e:	1e5a      	subs	r2, r3, #1
 8024d80:	4613      	mov	r3, r2
 8024d82:	011b      	lsls	r3, r3, #4
 8024d84:	1a9b      	subs	r3, r3, r2
 8024d86:	009b      	lsls	r3, r3, #2
 8024d88:	33f0      	adds	r3, #240	; 0xf0
 8024d8a:	443b      	add	r3, r7
 8024d8c:	3b6c      	subs	r3, #108	; 0x6c
 8024d8e:	681b      	ldr	r3, [r3, #0]
 8024d90:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8024d92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024d96:	1e5a      	subs	r2, r3, #1
 8024d98:	4613      	mov	r3, r2
 8024d9a:	011b      	lsls	r3, r3, #4
 8024d9c:	1a9b      	subs	r3, r3, r2
 8024d9e:	009b      	lsls	r3, r3, #2
 8024da0:	33f0      	adds	r3, #240	; 0xf0
 8024da2:	443b      	add	r3, r7
 8024da4:	3b68      	subs	r3, #104	; 0x68
 8024da6:	681b      	ldr	r3, [r3, #0]
 8024da8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8024dac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024db0:	1e5a      	subs	r2, r3, #1
 8024db2:	4613      	mov	r3, r2
 8024db4:	011b      	lsls	r3, r3, #4
 8024db6:	1a9b      	subs	r3, r3, r2
 8024db8:	009b      	lsls	r3, r3, #2
 8024dba:	33f0      	adds	r3, #240	; 0xf0
 8024dbc:	443b      	add	r3, r7
 8024dbe:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8024dc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024dc6:	3204      	adds	r2, #4
 8024dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024dcc:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8024dd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024dd4:	3b01      	subs	r3, #1
 8024dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8024dda:	e596      	b.n	802490a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 8024ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8024de0:	4618      	mov	r0, r3
 8024de2:	37f4      	adds	r7, #244	; 0xf4
 8024de4:	46bd      	mov	sp, r7
 8024de6:	bd90      	pop	{r4, r7, pc}

08024de8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024de8:	b590      	push	{r4, r7, lr}
 8024dea:	b09f      	sub	sp, #124	; 0x7c
 8024dec:	af04      	add	r7, sp, #16
 8024dee:	60f8      	str	r0, [r7, #12]
 8024df0:	60b9      	str	r1, [r7, #8]
 8024df2:	607a      	str	r2, [r7, #4]
 8024df4:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8024df6:	f04f 33ff 	mov.w	r3, #4294967295
 8024dfa:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8024dfc:	687b      	ldr	r3, [r7, #4]
 8024dfe:	681a      	ldr	r2, [r3, #0]
 8024e00:	68fb      	ldr	r3, [r7, #12]
 8024e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024e04:	6a1b      	ldr	r3, [r3, #32]
 8024e06:	429a      	cmp	r2, r3
 8024e08:	d207      	bcs.n	8024e1a <lfs_dir_fetchmatch+0x32>
 8024e0a:	687b      	ldr	r3, [r7, #4]
 8024e0c:	3304      	adds	r3, #4
 8024e0e:	681a      	ldr	r2, [r3, #0]
 8024e10:	68fb      	ldr	r3, [r7, #12]
 8024e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024e14:	6a1b      	ldr	r3, [r3, #32]
 8024e16:	429a      	cmp	r2, r3
 8024e18:	d302      	bcc.n	8024e20 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8024e1a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8024e1e:	e342      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8024e20:	2300      	movs	r3, #0
 8024e22:	633b      	str	r3, [r7, #48]	; 0x30
 8024e24:	2300      	movs	r3, #0
 8024e26:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8024e28:	2300      	movs	r3, #0
 8024e2a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8024e2c:	2300      	movs	r3, #0
 8024e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024e30:	e052      	b.n	8024ed8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8024e32:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8024e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024e36:	009b      	lsls	r3, r3, #2
 8024e38:	687a      	ldr	r2, [r7, #4]
 8024e3a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8024e3c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8024e3e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8024e42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8024e44:	0092      	lsls	r2, r2, #2
 8024e46:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8024e48:	2104      	movs	r1, #4
 8024e4a:	9103      	str	r1, [sp, #12]
 8024e4c:	9202      	str	r2, [sp, #8]
 8024e4e:	2200      	movs	r2, #0
 8024e50:	9201      	str	r2, [sp, #4]
 8024e52:	9300      	str	r3, [sp, #0]
 8024e54:	2304      	movs	r3, #4
 8024e56:	4602      	mov	r2, r0
 8024e58:	2100      	movs	r1, #0
 8024e5a:	68f8      	ldr	r0, [r7, #12]
 8024e5c:	f7fe fa6e 	bl	802333c <lfs_bd_read>
 8024e60:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8024e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024e64:	009b      	lsls	r3, r3, #2
 8024e66:	3368      	adds	r3, #104	; 0x68
 8024e68:	443b      	add	r3, r7
 8024e6a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8024e6e:	4618      	mov	r0, r3
 8024e70:	f7fe f9f8 	bl	8023264 <lfs_fromle32>
 8024e74:	4602      	mov	r2, r0
 8024e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024e78:	009b      	lsls	r3, r3, #2
 8024e7a:	3368      	adds	r3, #104	; 0x68
 8024e7c:	443b      	add	r3, r7
 8024e7e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8024e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024e84:	2b00      	cmp	r3, #0
 8024e86:	d005      	beq.n	8024e94 <lfs_dir_fetchmatch+0xac>
 8024e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024e8a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8024e8e:	d001      	beq.n	8024e94 <lfs_dir_fetchmatch+0xac>
            return err;
 8024e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024e92:	e308      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8024e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024e96:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8024e9a:	d01a      	beq.n	8024ed2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8024e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024e9e:	009b      	lsls	r3, r3, #2
 8024ea0:	3368      	adds	r3, #104	; 0x68
 8024ea2:	443b      	add	r3, r7
 8024ea4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8024ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024eaa:	3301      	adds	r3, #1
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	f003 0301 	and.w	r3, r3, #1
 8024eb2:	bfb8      	it	lt
 8024eb4:	425b      	neglt	r3, r3
 8024eb6:	009b      	lsls	r3, r3, #2
 8024eb8:	3368      	adds	r3, #104	; 0x68
 8024eba:	443b      	add	r3, r7
 8024ebc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8024ec0:	4619      	mov	r1, r3
 8024ec2:	4610      	mov	r0, r2
 8024ec4:	f7fe f9c0 	bl	8023248 <lfs_scmp>
 8024ec8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8024eca:	2b00      	cmp	r3, #0
 8024ecc:	dd01      	ble.n	8024ed2 <lfs_dir_fetchmatch+0xea>
            r = i;
 8024ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024ed0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8024ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024ed4:	3301      	adds	r3, #1
 8024ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024eda:	2b01      	cmp	r3, #1
 8024edc:	dda9      	ble.n	8024e32 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8024ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024ee0:	2b00      	cmp	r3, #0
 8024ee2:	f003 0301 	and.w	r3, r3, #1
 8024ee6:	bfb8      	it	lt
 8024ee8:	425b      	neglt	r3, r3
 8024eea:	009b      	lsls	r3, r3, #2
 8024eec:	687a      	ldr	r2, [r7, #4]
 8024eee:	4413      	add	r3, r2
 8024ef0:	681a      	ldr	r2, [r3, #0]
 8024ef2:	68bb      	ldr	r3, [r7, #8]
 8024ef4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8024ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024ef8:	3301      	adds	r3, #1
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	f003 0301 	and.w	r3, r3, #1
 8024f00:	bfb8      	it	lt
 8024f02:	425b      	neglt	r3, r3
 8024f04:	009b      	lsls	r3, r3, #2
 8024f06:	687a      	ldr	r2, [r7, #4]
 8024f08:	4413      	add	r3, r2
 8024f0a:	681a      	ldr	r2, [r3, #0]
 8024f0c:	68bb      	ldr	r3, [r7, #8]
 8024f0e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8024f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024f12:	2b00      	cmp	r3, #0
 8024f14:	f003 0301 	and.w	r3, r3, #1
 8024f18:	bfb8      	it	lt
 8024f1a:	425b      	neglt	r3, r3
 8024f1c:	009b      	lsls	r3, r3, #2
 8024f1e:	3368      	adds	r3, #104	; 0x68
 8024f20:	443b      	add	r3, r7
 8024f22:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8024f26:	68bb      	ldr	r3, [r7, #8]
 8024f28:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8024f2a:	68bb      	ldr	r3, [r7, #8]
 8024f2c:	2200      	movs	r2, #0
 8024f2e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8024f30:	2300      	movs	r3, #0
 8024f32:	65bb      	str	r3, [r7, #88]	; 0x58
 8024f34:	e2a3      	b.n	802547e <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8024f36:	2300      	movs	r3, #0
 8024f38:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8024f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8024f3e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8024f40:	2300      	movs	r3, #0
 8024f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8024f46:	4a96      	ldr	r2, [pc, #600]	; (80251a0 <lfs_dir_fetchmatch+0x3b8>)
 8024f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8024f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024f50:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8024f54:	2300      	movs	r3, #0
 8024f56:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8024f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8024f5c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8024f5e:	68bb      	ldr	r3, [r7, #8]
 8024f60:	689b      	ldr	r3, [r3, #8]
 8024f62:	4618      	mov	r0, r3
 8024f64:	f7fe f989 	bl	802327a <lfs_tole32>
 8024f68:	4602      	mov	r2, r0
 8024f6a:	68bb      	ldr	r3, [r7, #8]
 8024f6c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8024f6e:	68bb      	ldr	r3, [r7, #8]
 8024f70:	3308      	adds	r3, #8
 8024f72:	2204      	movs	r2, #4
 8024f74:	4619      	mov	r1, r3
 8024f76:	f04f 30ff 	mov.w	r0, #4294967295
 8024f7a:	f005 fbc9 	bl	802a710 <lfs_crc>
 8024f7e:	4603      	mov	r3, r0
 8024f80:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8024f82:	68bb      	ldr	r3, [r7, #8]
 8024f84:	689b      	ldr	r3, [r3, #8]
 8024f86:	4618      	mov	r0, r3
 8024f88:	f7fe f96c 	bl	8023264 <lfs_fromle32>
 8024f8c:	4602      	mov	r2, r0
 8024f8e:	68bb      	ldr	r3, [r7, #8]
 8024f90:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8024f92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8024f94:	f7fe fe29 	bl	8023bea <lfs_tag_dsize>
 8024f98:	4602      	mov	r2, r0
 8024f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024f9c:	4413      	add	r3, r2
 8024f9e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8024fa0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8024fa2:	68fb      	ldr	r3, [r7, #12]
 8024fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024fa6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8024fa8:	68bb      	ldr	r3, [r7, #8]
 8024faa:	681b      	ldr	r3, [r3, #0]
 8024fac:	2204      	movs	r2, #4
 8024fae:	9203      	str	r2, [sp, #12]
 8024fb0:	f107 0220 	add.w	r2, r7, #32
 8024fb4:	9202      	str	r2, [sp, #8]
 8024fb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024fb8:	9201      	str	r2, [sp, #4]
 8024fba:	9300      	str	r3, [sp, #0]
 8024fbc:	4603      	mov	r3, r0
 8024fbe:	460a      	mov	r2, r1
 8024fc0:	2100      	movs	r1, #0
 8024fc2:	68f8      	ldr	r0, [r7, #12]
 8024fc4:	f7fe f9ba 	bl	802333c <lfs_bd_read>
 8024fc8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8024fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	d009      	beq.n	8024fe4 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8024fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024fd2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8024fd6:	d103      	bne.n	8024fe0 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8024fd8:	68bb      	ldr	r3, [r7, #8]
 8024fda:	2200      	movs	r2, #0
 8024fdc:	759a      	strb	r2, [r3, #22]
                    break;
 8024fde:	e1d6      	b.n	802538e <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8024fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024fe2:	e260      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8024fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024fe6:	f107 0120 	add.w	r1, r7, #32
 8024fea:	2204      	movs	r2, #4
 8024fec:	4618      	mov	r0, r3
 8024fee:	f005 fb8f 	bl	802a710 <lfs_crc>
 8024ff2:	4603      	mov	r3, r0
 8024ff4:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8024ff6:	6a3b      	ldr	r3, [r7, #32]
 8024ff8:	4618      	mov	r0, r3
 8024ffa:	f7fe f94a 	bl	8023292 <lfs_frombe32>
 8024ffe:	4602      	mov	r2, r0
 8025000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025002:	4053      	eors	r3, r2
 8025004:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8025006:	6a3b      	ldr	r3, [r7, #32]
 8025008:	4618      	mov	r0, r3
 802500a:	f7fe fd76 	bl	8023afa <lfs_tag_isvalid>
 802500e:	4603      	mov	r3, r0
 8025010:	f083 0301 	eor.w	r3, r3, #1
 8025014:	b2db      	uxtb	r3, r3
 8025016:	2b00      	cmp	r3, #0
 8025018:	d01b      	beq.n	8025052 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802501a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802501c:	f7fe fd8e 	bl	8023b3c <lfs_tag_type1>
 8025020:	4603      	mov	r3, r0
 8025022:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025026:	d10d      	bne.n	8025044 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8025028:	68bb      	ldr	r3, [r7, #8]
 802502a:	68db      	ldr	r3, [r3, #12]
 802502c:	68fa      	ldr	r2, [r7, #12]
 802502e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025030:	6992      	ldr	r2, [r2, #24]
 8025032:	fbb3 f1f2 	udiv	r1, r3, r2
 8025036:	fb01 f202 	mul.w	r2, r1, r2
 802503a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802503c:	2b00      	cmp	r3, #0
 802503e:	d101      	bne.n	8025044 <lfs_dir_fetchmatch+0x25c>
 8025040:	2301      	movs	r3, #1
 8025042:	e000      	b.n	8025046 <lfs_dir_fetchmatch+0x25e>
 8025044:	2300      	movs	r3, #0
 8025046:	f003 0301 	and.w	r3, r3, #1
 802504a:	b2da      	uxtb	r2, r3
 802504c:	68bb      	ldr	r3, [r7, #8]
 802504e:	759a      	strb	r2, [r3, #22]
                break;
 8025050:	e19d      	b.n	802538e <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8025052:	6a3b      	ldr	r3, [r7, #32]
 8025054:	4618      	mov	r0, r3
 8025056:	f7fe fdc8 	bl	8023bea <lfs_tag_dsize>
 802505a:	4602      	mov	r2, r0
 802505c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802505e:	441a      	add	r2, r3
 8025060:	68fb      	ldr	r3, [r7, #12]
 8025062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025064:	69db      	ldr	r3, [r3, #28]
 8025066:	429a      	cmp	r2, r3
 8025068:	d903      	bls.n	8025072 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 802506a:	68bb      	ldr	r3, [r7, #8]
 802506c:	2200      	movs	r2, #0
 802506e:	759a      	strb	r2, [r3, #22]
                break;
 8025070:	e18d      	b.n	802538e <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8025072:	6a3b      	ldr	r3, [r7, #32]
 8025074:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8025076:	6a3b      	ldr	r3, [r7, #32]
 8025078:	4618      	mov	r0, r3
 802507a:	f7fe fd5f 	bl	8023b3c <lfs_tag_type1>
 802507e:	4603      	mov	r3, r0
 8025080:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025084:	d164      	bne.n	8025150 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8025086:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025088:	68fb      	ldr	r3, [r7, #12]
 802508a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802508c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802508e:	68bb      	ldr	r3, [r7, #8]
 8025090:	681b      	ldr	r3, [r3, #0]
 8025092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025094:	3204      	adds	r2, #4
 8025096:	2104      	movs	r1, #4
 8025098:	9103      	str	r1, [sp, #12]
 802509a:	f107 011c 	add.w	r1, r7, #28
 802509e:	9102      	str	r1, [sp, #8]
 80250a0:	9201      	str	r2, [sp, #4]
 80250a2:	9300      	str	r3, [sp, #0]
 80250a4:	4623      	mov	r3, r4
 80250a6:	4602      	mov	r2, r0
 80250a8:	2100      	movs	r1, #0
 80250aa:	68f8      	ldr	r0, [r7, #12]
 80250ac:	f7fe f946 	bl	802333c <lfs_bd_read>
 80250b0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80250b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80250b4:	2b00      	cmp	r3, #0
 80250b6:	d009      	beq.n	80250cc <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80250b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80250ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80250be:	d103      	bne.n	80250c8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80250c0:	68bb      	ldr	r3, [r7, #8]
 80250c2:	2200      	movs	r2, #0
 80250c4:	759a      	strb	r2, [r3, #22]
                        break;
 80250c6:	e162      	b.n	802538e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80250c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80250ca:	e1ec      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80250cc:	69fb      	ldr	r3, [r7, #28]
 80250ce:	4618      	mov	r0, r3
 80250d0:	f7fe f8c8 	bl	8023264 <lfs_fromle32>
 80250d4:	4603      	mov	r3, r0
 80250d6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80250d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80250da:	69fb      	ldr	r3, [r7, #28]
 80250dc:	429a      	cmp	r2, r3
 80250de:	d003      	beq.n	80250e8 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80250e0:	68bb      	ldr	r3, [r7, #8]
 80250e2:	2200      	movs	r2, #0
 80250e4:	759a      	strb	r2, [r3, #22]
                    break;
 80250e6:	e152      	b.n	802538e <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80250e8:	6a3b      	ldr	r3, [r7, #32]
 80250ea:	4618      	mov	r0, r3
 80250ec:	f7fe fd46 	bl	8023b7c <lfs_tag_chunk>
 80250f0:	4603      	mov	r3, r0
 80250f2:	07db      	lsls	r3, r3, #31
 80250f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80250f6:	4053      	eors	r3, r2
 80250f8:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80250fa:	68fb      	ldr	r3, [r7, #12]
 80250fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80250fe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8025102:	2204      	movs	r2, #4
 8025104:	4618      	mov	r0, r3
 8025106:	f005 fb03 	bl	802a710 <lfs_crc>
 802510a:	4602      	mov	r2, r0
 802510c:	68fb      	ldr	r3, [r7, #12]
 802510e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025112:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8025114:	6a3b      	ldr	r3, [r7, #32]
 8025116:	4618      	mov	r0, r3
 8025118:	f7fe fd67 	bl	8023bea <lfs_tag_dsize>
 802511c:	4602      	mov	r2, r0
 802511e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025120:	441a      	add	r2, r3
 8025122:	68bb      	ldr	r3, [r7, #8]
 8025124:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8025126:	68bb      	ldr	r3, [r7, #8]
 8025128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802512a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 802512c:	68bb      	ldr	r3, [r7, #8]
 802512e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8025132:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8025134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025136:	68bb      	ldr	r3, [r7, #8]
 8025138:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 802513a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802513c:	68bb      	ldr	r3, [r7, #8]
 802513e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8025140:	68bb      	ldr	r3, [r7, #8]
 8025142:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8025146:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8025148:	f04f 33ff 	mov.w	r3, #4294967295
 802514c:	627b      	str	r3, [r7, #36]	; 0x24
 802514e:	e720      	b.n	8024f92 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025150:	2304      	movs	r3, #4
 8025152:	647b      	str	r3, [r7, #68]	; 0x44
 8025154:	e032      	b.n	80251bc <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8025156:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025158:	68fb      	ldr	r3, [r7, #12]
 802515a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802515c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802515e:	68bb      	ldr	r3, [r7, #8]
 8025160:	681b      	ldr	r3, [r3, #0]
 8025162:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8025164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025166:	440a      	add	r2, r1
 8025168:	2101      	movs	r1, #1
 802516a:	9103      	str	r1, [sp, #12]
 802516c:	f107 011b 	add.w	r1, r7, #27
 8025170:	9102      	str	r1, [sp, #8]
 8025172:	9201      	str	r2, [sp, #4]
 8025174:	9300      	str	r3, [sp, #0]
 8025176:	4623      	mov	r3, r4
 8025178:	4602      	mov	r2, r0
 802517a:	2100      	movs	r1, #0
 802517c:	68f8      	ldr	r0, [r7, #12]
 802517e:	f7fe f8dd 	bl	802333c <lfs_bd_read>
 8025182:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8025184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025186:	2b00      	cmp	r3, #0
 8025188:	d00c      	beq.n	80251a4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 802518a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802518c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025190:	d103      	bne.n	802519a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8025192:	68bb      	ldr	r3, [r7, #8]
 8025194:	2200      	movs	r2, #0
 8025196:	759a      	strb	r2, [r3, #22]
 8025198:	e018      	b.n	80251cc <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 802519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 802519c:	e183      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
 802519e:	bf00      	nop
 80251a0:	08033098 	.word	0x08033098
                }

                crc = lfs_crc(crc, &dat, 1);
 80251a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80251a6:	f107 011b 	add.w	r1, r7, #27
 80251aa:	2201      	movs	r2, #1
 80251ac:	4618      	mov	r0, r3
 80251ae:	f005 faaf 	bl	802a710 <lfs_crc>
 80251b2:	4603      	mov	r3, r0
 80251b4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80251b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80251b8:	3301      	adds	r3, #1
 80251ba:	647b      	str	r3, [r7, #68]	; 0x44
 80251bc:	6a3b      	ldr	r3, [r7, #32]
 80251be:	4618      	mov	r0, r3
 80251c0:	f7fe fd13 	bl	8023bea <lfs_tag_dsize>
 80251c4:	4602      	mov	r2, r0
 80251c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80251c8:	4293      	cmp	r3, r2
 80251ca:	d3c4      	bcc.n	8025156 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80251cc:	6a3b      	ldr	r3, [r7, #32]
 80251ce:	4618      	mov	r0, r3
 80251d0:	f7fe fcb4 	bl	8023b3c <lfs_tag_type1>
 80251d4:	4603      	mov	r3, r0
 80251d6:	2b00      	cmp	r3, #0
 80251d8:	d113      	bne.n	8025202 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80251da:	6a3b      	ldr	r3, [r7, #32]
 80251dc:	4618      	mov	r0, r3
 80251de:	f7fe fce7 	bl	8023bb0 <lfs_tag_id>
 80251e2:	4603      	mov	r3, r0
 80251e4:	461a      	mov	r2, r3
 80251e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80251ea:	4293      	cmp	r3, r2
 80251ec:	f200 8083 	bhi.w	80252f6 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 80251f0:	6a3b      	ldr	r3, [r7, #32]
 80251f2:	4618      	mov	r0, r3
 80251f4:	f7fe fcdc 	bl	8023bb0 <lfs_tag_id>
 80251f8:	4603      	mov	r3, r0
 80251fa:	3301      	adds	r3, #1
 80251fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8025200:	e079      	b.n	80252f6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8025202:	6a3b      	ldr	r3, [r7, #32]
 8025204:	4618      	mov	r0, r3
 8025206:	f7fe fc99 	bl	8023b3c <lfs_tag_type1>
 802520a:	4603      	mov	r3, r0
 802520c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025210:	d134      	bne.n	802527c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025212:	6a3b      	ldr	r3, [r7, #32]
 8025214:	4618      	mov	r0, r3
 8025216:	f7fe fcbe 	bl	8023b96 <lfs_tag_splice>
 802521a:	4603      	mov	r3, r0
 802521c:	b29a      	uxth	r2, r3
 802521e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8025222:	4413      	add	r3, r2
 8025224:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8025228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802522a:	4ba1      	ldr	r3, [pc, #644]	; (80254b0 <lfs_dir_fetchmatch+0x6c8>)
 802522c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 802522e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8025232:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8025236:	6a3a      	ldr	r2, [r7, #32]
 8025238:	4293      	cmp	r3, r2
 802523a:	d104      	bne.n	8025246 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 802523c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802523e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025242:	64bb      	str	r3, [r7, #72]	; 0x48
 8025244:	e057      	b.n	80252f6 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8025246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025248:	f1b3 3fff 	cmp.w	r3, #4294967295
 802524c:	d053      	beq.n	80252f6 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 802524e:	6a3b      	ldr	r3, [r7, #32]
 8025250:	4618      	mov	r0, r3
 8025252:	f7fe fcad 	bl	8023bb0 <lfs_tag_id>
 8025256:	4603      	mov	r3, r0
 8025258:	461c      	mov	r4, r3
 802525a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802525c:	4618      	mov	r0, r3
 802525e:	f7fe fca7 	bl	8023bb0 <lfs_tag_id>
 8025262:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8025264:	429c      	cmp	r4, r3
 8025266:	d846      	bhi.n	80252f6 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8025268:	6a3b      	ldr	r3, [r7, #32]
 802526a:	4618      	mov	r0, r3
 802526c:	f7fe fc93 	bl	8023b96 <lfs_tag_splice>
 8025270:	4603      	mov	r3, r0
 8025272:	029a      	lsls	r2, r3, #10
 8025274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025276:	4413      	add	r3, r2
 8025278:	64bb      	str	r3, [r7, #72]	; 0x48
 802527a:	e03c      	b.n	80252f6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 802527c:	6a3b      	ldr	r3, [r7, #32]
 802527e:	4618      	mov	r0, r3
 8025280:	f7fe fc5c 	bl	8023b3c <lfs_tag_type1>
 8025284:	4603      	mov	r3, r0
 8025286:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802528a:	d134      	bne.n	80252f6 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 802528c:	6a3b      	ldr	r3, [r7, #32]
 802528e:	4618      	mov	r0, r3
 8025290:	f7fe fc74 	bl	8023b7c <lfs_tag_chunk>
 8025294:	4603      	mov	r3, r0
 8025296:	f003 0301 	and.w	r3, r3, #1
 802529a:	2b00      	cmp	r3, #0
 802529c:	bf14      	ite	ne
 802529e:	2301      	movne	r3, #1
 80252a0:	2300      	moveq	r3, #0
 80252a2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80252a6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80252a8:	68fb      	ldr	r3, [r7, #12]
 80252aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80252ac:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80252ae:	68bb      	ldr	r3, [r7, #8]
 80252b0:	681b      	ldr	r3, [r3, #0]
 80252b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80252b4:	3204      	adds	r2, #4
 80252b6:	2108      	movs	r1, #8
 80252b8:	9103      	str	r1, [sp, #12]
 80252ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80252be:	9102      	str	r1, [sp, #8]
 80252c0:	9201      	str	r2, [sp, #4]
 80252c2:	9300      	str	r3, [sp, #0]
 80252c4:	4623      	mov	r3, r4
 80252c6:	4602      	mov	r2, r0
 80252c8:	2100      	movs	r1, #0
 80252ca:	68f8      	ldr	r0, [r7, #12]
 80252cc:	f7fe f836 	bl	802333c <lfs_bd_read>
 80252d0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80252d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	d009      	beq.n	80252ec <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 80252d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80252da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80252de:	d103      	bne.n	80252e8 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 80252e0:	68bb      	ldr	r3, [r7, #8]
 80252e2:	2200      	movs	r2, #0
 80252e4:	759a      	strb	r2, [r3, #22]
                        break;
 80252e6:	e052      	b.n	802538e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80252e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80252ea:	e0dc      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 80252ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80252f0:	4618      	mov	r0, r3
 80252f2:	f7fe fbce 	bl	8023a92 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80252f6:	6a3a      	ldr	r2, [r7, #32]
 80252f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80252fa:	405a      	eors	r2, r3
 80252fc:	683b      	ldr	r3, [r7, #0]
 80252fe:	4013      	ands	r3, r2
 8025300:	2b00      	cmp	r3, #0
 8025302:	f47f ae46 	bne.w	8024f92 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025306:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8025308:	68bb      	ldr	r3, [r7, #8]
 802530a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 802530c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 802530e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025310:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025312:	617b      	str	r3, [r7, #20]
 8025314:	f107 0210 	add.w	r2, r7, #16
 8025318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802531c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8025320:	4798      	blx	r3
 8025322:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8025324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025326:	2b00      	cmp	r3, #0
 8025328:	da09      	bge.n	802533e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 802532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802532c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025330:	d103      	bne.n	802533a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8025332:	68bb      	ldr	r3, [r7, #8]
 8025334:	2200      	movs	r2, #0
 8025336:	759a      	strb	r2, [r3, #22]
 8025338:	e029      	b.n	802538e <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 802533a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 802533c:	e0b3      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 802533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025340:	2b00      	cmp	r3, #0
 8025342:	d102      	bne.n	802534a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8025344:	6a3b      	ldr	r3, [r7, #32]
 8025346:	64bb      	str	r3, [r7, #72]	; 0x48
 8025348:	e623      	b.n	8024f92 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 802534a:	6a3a      	ldr	r2, [r7, #32]
 802534c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802534e:	405a      	eors	r2, r3
 8025350:	4b58      	ldr	r3, [pc, #352]	; (80254b4 <lfs_dir_fetchmatch+0x6cc>)
 8025352:	4013      	ands	r3, r2
 8025354:	2b00      	cmp	r3, #0
 8025356:	d103      	bne.n	8025360 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8025358:	f04f 33ff 	mov.w	r3, #4294967295
 802535c:	64bb      	str	r3, [r7, #72]	; 0x48
 802535e:	e618      	b.n	8024f92 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8025360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025362:	2b02      	cmp	r3, #2
 8025364:	f47f ae15 	bne.w	8024f92 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8025368:	6a3b      	ldr	r3, [r7, #32]
 802536a:	4618      	mov	r0, r3
 802536c:	f7fe fc20 	bl	8023bb0 <lfs_tag_id>
 8025370:	4603      	mov	r3, r0
 8025372:	461c      	mov	r4, r3
 8025374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025376:	4618      	mov	r0, r3
 8025378:	f7fe fc1a 	bl	8023bb0 <lfs_tag_id>
 802537c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 802537e:	429c      	cmp	r4, r3
 8025380:	f63f ae07 	bhi.w	8024f92 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8025384:	6a3b      	ldr	r3, [r7, #32]
 8025386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802538a:	64bb      	str	r3, [r7, #72]	; 0x48
 802538c:	e601      	b.n	8024f92 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 802538e:	68bb      	ldr	r3, [r7, #8]
 8025390:	68db      	ldr	r3, [r3, #12]
 8025392:	2b00      	cmp	r3, #0
 8025394:	d100      	bne.n	8025398 <lfs_dir_fetchmatch+0x5b0>
 8025396:	e05d      	b.n	8025454 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8025398:	68fb      	ldr	r3, [r7, #12]
 802539a:	333c      	adds	r3, #60	; 0x3c
 802539c:	68ba      	ldr	r2, [r7, #8]
 802539e:	4611      	mov	r1, r2
 80253a0:	4618      	mov	r0, r3
 80253a2:	f7fe fcad 	bl	8023d00 <lfs_gstate_hasmovehere>
 80253a6:	4603      	mov	r3, r0
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	d028      	beq.n	80253fe <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80253ac:	68fb      	ldr	r3, [r7, #12]
 80253ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80253b0:	4618      	mov	r0, r3
 80253b2:	f7fe fbfd 	bl	8023bb0 <lfs_tag_id>
 80253b6:	4603      	mov	r3, r0
 80253b8:	461c      	mov	r4, r3
 80253ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253bc:	4618      	mov	r0, r3
 80253be:	f7fe fbf7 	bl	8023bb0 <lfs_tag_id>
 80253c2:	4603      	mov	r3, r0
 80253c4:	429c      	cmp	r4, r3
 80253c6:	d104      	bne.n	80253d2 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 80253c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80253ce:	667b      	str	r3, [r7, #100]	; 0x64
 80253d0:	e015      	b.n	80253fe <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 80253d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80253d8:	d011      	beq.n	80253fe <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80253da:	68fb      	ldr	r3, [r7, #12]
 80253dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80253de:	4618      	mov	r0, r3
 80253e0:	f7fe fbe6 	bl	8023bb0 <lfs_tag_id>
 80253e4:	4603      	mov	r3, r0
 80253e6:	461c      	mov	r4, r3
 80253e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253ea:	4618      	mov	r0, r3
 80253ec:	f7fe fbe0 	bl	8023bb0 <lfs_tag_id>
 80253f0:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 80253f2:	429c      	cmp	r4, r3
 80253f4:	d203      	bcs.n	80253fe <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 80253f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80253fc:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 80253fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025400:	2b00      	cmp	r3, #0
 8025402:	d00f      	beq.n	8025424 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8025404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025406:	4618      	mov	r0, r3
 8025408:	f7fe fbd2 	bl	8023bb0 <lfs_tag_id>
 802540c:	4603      	mov	r3, r0
 802540e:	461a      	mov	r2, r3
 8025410:	68bb      	ldr	r3, [r7, #8]
 8025412:	8a9b      	ldrh	r3, [r3, #20]
 8025414:	4619      	mov	r1, r3
 8025416:	4610      	mov	r0, r2
 8025418:	f7fd feb4 	bl	8023184 <lfs_min>
 802541c:	4603      	mov	r3, r0
 802541e:	b29a      	uxth	r2, r3
 8025420:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025422:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8025424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025426:	4618      	mov	r0, r3
 8025428:	f7fe fb67 	bl	8023afa <lfs_tag_isvalid>
 802542c:	4603      	mov	r3, r0
 802542e:	2b00      	cmp	r3, #0
 8025430:	d001      	beq.n	8025436 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8025432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025434:	e037      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8025436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025438:	4618      	mov	r0, r3
 802543a:	f7fe fbb9 	bl	8023bb0 <lfs_tag_id>
 802543e:	4603      	mov	r3, r0
 8025440:	461a      	mov	r2, r3
 8025442:	68bb      	ldr	r3, [r7, #8]
 8025444:	8a9b      	ldrh	r3, [r3, #20]
 8025446:	429a      	cmp	r2, r3
 8025448:	d202      	bcs.n	8025450 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 802544a:	f06f 0301 	mvn.w	r3, #1
 802544e:	e02a      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8025450:	2300      	movs	r3, #0
 8025452:	e028      	b.n	80254a6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8025454:	68bb      	ldr	r3, [r7, #8]
 8025456:	4618      	mov	r0, r3
 8025458:	f7fe fa94 	bl	8023984 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 802545c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802545e:	3301      	adds	r3, #1
 8025460:	2b00      	cmp	r3, #0
 8025462:	f003 0301 	and.w	r3, r3, #1
 8025466:	bfb8      	it	lt
 8025468:	425b      	neglt	r3, r3
 802546a:	009b      	lsls	r3, r3, #2
 802546c:	3368      	adds	r3, #104	; 0x68
 802546e:	443b      	add	r3, r7
 8025470:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025474:	68bb      	ldr	r3, [r7, #8]
 8025476:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8025478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802547a:	3301      	adds	r3, #1
 802547c:	65bb      	str	r3, [r7, #88]	; 0x58
 802547e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025480:	2b01      	cmp	r3, #1
 8025482:	f77f ad58 	ble.w	8024f36 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8025486:	68bb      	ldr	r3, [r7, #8]
 8025488:	681a      	ldr	r2, [r3, #0]
 802548a:	68bb      	ldr	r3, [r7, #8]
 802548c:	685b      	ldr	r3, [r3, #4]
 802548e:	490a      	ldr	r1, [pc, #40]	; (80254b8 <lfs_dir_fetchmatch+0x6d0>)
 8025490:	9101      	str	r1, [sp, #4]
 8025492:	9300      	str	r3, [sp, #0]
 8025494:	4613      	mov	r3, r2
 8025496:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 802549a:	4908      	ldr	r1, [pc, #32]	; (80254bc <lfs_dir_fetchmatch+0x6d4>)
 802549c:	4808      	ldr	r0, [pc, #32]	; (80254c0 <lfs_dir_fetchmatch+0x6d8>)
 802549e:	f007 fdd5 	bl	802d04c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80254a2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 80254a6:	4618      	mov	r0, r3
 80254a8:	376c      	adds	r7, #108	; 0x6c
 80254aa:	46bd      	mov	sp, r7
 80254ac:	bd90      	pop	{r4, r7, pc}
 80254ae:	bf00      	nop
 80254b0:	000ffc00 	.word	0x000ffc00
 80254b4:	7ffffc00 	.word	0x7ffffc00
 80254b8:	08033054 	.word	0x08033054
 80254bc:	08032f40 	.word	0x08032f40
 80254c0:	08033060 	.word	0x08033060

080254c4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80254c4:	b580      	push	{r7, lr}
 80254c6:	b088      	sub	sp, #32
 80254c8:	af04      	add	r7, sp, #16
 80254ca:	60f8      	str	r0, [r7, #12]
 80254cc:	60b9      	str	r1, [r7, #8]
 80254ce:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80254d0:	2300      	movs	r3, #0
 80254d2:	9303      	str	r3, [sp, #12]
 80254d4:	2300      	movs	r3, #0
 80254d6:	9302      	str	r3, [sp, #8]
 80254d8:	2300      	movs	r3, #0
 80254da:	9301      	str	r3, [sp, #4]
 80254dc:	f04f 33ff 	mov.w	r3, #4294967295
 80254e0:	9300      	str	r3, [sp, #0]
 80254e2:	f04f 33ff 	mov.w	r3, #4294967295
 80254e6:	687a      	ldr	r2, [r7, #4]
 80254e8:	68b9      	ldr	r1, [r7, #8]
 80254ea:	68f8      	ldr	r0, [r7, #12]
 80254ec:	f7ff fc7c 	bl	8024de8 <lfs_dir_fetchmatch>
 80254f0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80254f2:	4618      	mov	r0, r3
 80254f4:	3710      	adds	r7, #16
 80254f6:	46bd      	mov	sp, r7
 80254f8:	bd80      	pop	{r7, pc}
	...

080254fc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80254fc:	b580      	push	{r7, lr}
 80254fe:	b08a      	sub	sp, #40	; 0x28
 8025500:	af02      	add	r7, sp, #8
 8025502:	60f8      	str	r0, [r7, #12]
 8025504:	60b9      	str	r1, [r7, #8]
 8025506:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8025508:	f107 0310 	add.w	r3, r7, #16
 802550c:	9300      	str	r3, [sp, #0]
 802550e:	4b12      	ldr	r3, [pc, #72]	; (8025558 <lfs_dir_getgstate+0x5c>)
 8025510:	4a12      	ldr	r2, [pc, #72]	; (802555c <lfs_dir_getgstate+0x60>)
 8025512:	68b9      	ldr	r1, [r7, #8]
 8025514:	68f8      	ldr	r0, [r7, #12]
 8025516:	f7fe ff35 	bl	8024384 <lfs_dir_get>
 802551a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 802551c:	69fb      	ldr	r3, [r7, #28]
 802551e:	2b00      	cmp	r3, #0
 8025520:	da05      	bge.n	802552e <lfs_dir_getgstate+0x32>
 8025522:	69fb      	ldr	r3, [r7, #28]
 8025524:	f113 0f02 	cmn.w	r3, #2
 8025528:	d001      	beq.n	802552e <lfs_dir_getgstate+0x32>
        return res;
 802552a:	69fb      	ldr	r3, [r7, #28]
 802552c:	e00f      	b.n	802554e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 802552e:	69fb      	ldr	r3, [r7, #28]
 8025530:	f113 0f02 	cmn.w	r3, #2
 8025534:	d00a      	beq.n	802554c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025536:	f107 0310 	add.w	r3, r7, #16
 802553a:	4618      	mov	r0, r3
 802553c:	f7fe fc00 	bl	8023d40 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025540:	f107 0310 	add.w	r3, r7, #16
 8025544:	4619      	mov	r1, r3
 8025546:	6878      	ldr	r0, [r7, #4]
 8025548:	f7fe fb63 	bl	8023c12 <lfs_gstate_xor>
    }

    return 0;
 802554c:	2300      	movs	r3, #0
}
 802554e:	4618      	mov	r0, r3
 8025550:	3720      	adds	r7, #32
 8025552:	46bd      	mov	sp, r7
 8025554:	bd80      	pop	{r7, pc}
 8025556:	bf00      	nop
 8025558:	7ff0000c 	.word	0x7ff0000c
 802555c:	7ff00000 	.word	0x7ff00000

08025560 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8025560:	b580      	push	{r7, lr}
 8025562:	b08a      	sub	sp, #40	; 0x28
 8025564:	af02      	add	r7, sp, #8
 8025566:	60f8      	str	r0, [r7, #12]
 8025568:	60b9      	str	r1, [r7, #8]
 802556a:	603b      	str	r3, [r7, #0]
 802556c:	4613      	mov	r3, r2
 802556e:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8025570:	88fb      	ldrh	r3, [r7, #6]
 8025572:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025576:	4293      	cmp	r3, r2
 8025578:	d10b      	bne.n	8025592 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 802557a:	683b      	ldr	r3, [r7, #0]
 802557c:	3308      	adds	r3, #8
 802557e:	4932      	ldr	r1, [pc, #200]	; (8025648 <lfs_dir_getinfo+0xe8>)
 8025580:	461a      	mov	r2, r3
 8025582:	460b      	mov	r3, r1
 8025584:	881b      	ldrh	r3, [r3, #0]
 8025586:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8025588:	683b      	ldr	r3, [r7, #0]
 802558a:	2202      	movs	r2, #2
 802558c:	701a      	strb	r2, [r3, #0]
        return 0;
 802558e:	2300      	movs	r3, #0
 8025590:	e055      	b.n	802563e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025592:	88fb      	ldrh	r3, [r7, #6]
 8025594:	029a      	lsls	r2, r3, #10
 8025596:	68fb      	ldr	r3, [r7, #12]
 8025598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802559a:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 802559c:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 802559e:	683b      	ldr	r3, [r7, #0]
 80255a0:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 80255a2:	9300      	str	r3, [sp, #0]
 80255a4:	4613      	mov	r3, r2
 80255a6:	4a29      	ldr	r2, [pc, #164]	; (802564c <lfs_dir_getinfo+0xec>)
 80255a8:	68b9      	ldr	r1, [r7, #8]
 80255aa:	68f8      	ldr	r0, [r7, #12]
 80255ac:	f7fe feea 	bl	8024384 <lfs_dir_get>
 80255b0:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 80255b2:	69fb      	ldr	r3, [r7, #28]
 80255b4:	2b00      	cmp	r3, #0
 80255b6:	da01      	bge.n	80255bc <lfs_dir_getinfo+0x5c>
        return (int)tag;
 80255b8:	69fb      	ldr	r3, [r7, #28]
 80255ba:	e040      	b.n	802563e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 80255bc:	69fb      	ldr	r3, [r7, #28]
 80255be:	4618      	mov	r0, r3
 80255c0:	f7fe facc 	bl	8023b5c <lfs_tag_type3>
 80255c4:	4603      	mov	r3, r0
 80255c6:	b2da      	uxtb	r2, r3
 80255c8:	683b      	ldr	r3, [r7, #0]
 80255ca:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80255cc:	88fb      	ldrh	r3, [r7, #6]
 80255ce:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80255d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80255d4:	f043 0308 	orr.w	r3, r3, #8
 80255d8:	f107 0214 	add.w	r2, r7, #20
 80255dc:	9200      	str	r2, [sp, #0]
 80255de:	4a1c      	ldr	r2, [pc, #112]	; (8025650 <lfs_dir_getinfo+0xf0>)
 80255e0:	68b9      	ldr	r1, [r7, #8]
 80255e2:	68f8      	ldr	r0, [r7, #12]
 80255e4:	f7fe fece 	bl	8024384 <lfs_dir_get>
 80255e8:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 80255ea:	69fb      	ldr	r3, [r7, #28]
 80255ec:	2b00      	cmp	r3, #0
 80255ee:	da01      	bge.n	80255f4 <lfs_dir_getinfo+0x94>
        return (int)tag;
 80255f0:	69fb      	ldr	r3, [r7, #28]
 80255f2:	e024      	b.n	802563e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 80255f4:	f107 0314 	add.w	r3, r7, #20
 80255f8:	4618      	mov	r0, r3
 80255fa:	f7fe fbe1 	bl	8023dc0 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80255fe:	69fb      	ldr	r3, [r7, #28]
 8025600:	4618      	mov	r0, r3
 8025602:	f7fe faab 	bl	8023b5c <lfs_tag_type3>
 8025606:	4603      	mov	r3, r0
 8025608:	461a      	mov	r2, r3
 802560a:	f240 2302 	movw	r3, #514	; 0x202
 802560e:	429a      	cmp	r2, r3
 8025610:	d103      	bne.n	802561a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025612:	69ba      	ldr	r2, [r7, #24]
 8025614:	683b      	ldr	r3, [r7, #0]
 8025616:	605a      	str	r2, [r3, #4]
 8025618:	e010      	b.n	802563c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 802561a:	69fb      	ldr	r3, [r7, #28]
 802561c:	4618      	mov	r0, r3
 802561e:	f7fe fa9d 	bl	8023b5c <lfs_tag_type3>
 8025622:	4603      	mov	r3, r0
 8025624:	461a      	mov	r2, r3
 8025626:	f240 2301 	movw	r3, #513	; 0x201
 802562a:	429a      	cmp	r2, r3
 802562c:	d106      	bne.n	802563c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 802562e:	69fb      	ldr	r3, [r7, #28]
 8025630:	4618      	mov	r0, r3
 8025632:	f7fe facd 	bl	8023bd0 <lfs_tag_size>
 8025636:	4602      	mov	r2, r0
 8025638:	683b      	ldr	r3, [r7, #0]
 802563a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 802563c:	2300      	movs	r3, #0
}
 802563e:	4618      	mov	r0, r3
 8025640:	3720      	adds	r7, #32
 8025642:	46bd      	mov	sp, r7
 8025644:	bd80      	pop	{r7, pc}
 8025646:	bf00      	nop
 8025648:	080330a0 	.word	0x080330a0
 802564c:	780ffc00 	.word	0x780ffc00
 8025650:	700ffc00 	.word	0x700ffc00

08025654 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8025654:	b590      	push	{r4, r7, lr}
 8025656:	b08f      	sub	sp, #60	; 0x3c
 8025658:	af04      	add	r7, sp, #16
 802565a:	60f8      	str	r0, [r7, #12]
 802565c:	60b9      	str	r1, [r7, #8]
 802565e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8025660:	68fb      	ldr	r3, [r7, #12]
 8025662:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8025664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025666:	681b      	ldr	r3, [r3, #0]
 8025668:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 802566a:	687b      	ldr	r3, [r7, #4]
 802566c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 802566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025670:	689c      	ldr	r4, [r3, #8]
 8025672:	68b8      	ldr	r0, [r7, #8]
 8025674:	f7fe faac 	bl	8023bd0 <lfs_tag_size>
 8025678:	4603      	mov	r3, r0
 802567a:	4619      	mov	r1, r3
 802567c:	4620      	mov	r0, r4
 802567e:	f7fd fd81 	bl	8023184 <lfs_min>
 8025682:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8025684:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8025686:	69fb      	ldr	r3, [r7, #28]
 8025688:	681b      	ldr	r3, [r3, #0]
 802568a:	69fa      	ldr	r2, [r7, #28]
 802568c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 802568e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025690:	6849      	ldr	r1, [r1, #4]
 8025692:	69b8      	ldr	r0, [r7, #24]
 8025694:	9003      	str	r0, [sp, #12]
 8025696:	9102      	str	r1, [sp, #8]
 8025698:	9201      	str	r2, [sp, #4]
 802569a:	9300      	str	r3, [sp, #0]
 802569c:	69bb      	ldr	r3, [r7, #24]
 802569e:	4622      	mov	r2, r4
 80256a0:	2100      	movs	r1, #0
 80256a2:	6a38      	ldr	r0, [r7, #32]
 80256a4:	f7fd ff8e 	bl	80235c4 <lfs_bd_cmp>
 80256a8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 80256aa:	697b      	ldr	r3, [r7, #20]
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	d001      	beq.n	80256b4 <lfs_dir_find_match+0x60>
        return res;
 80256b0:	697b      	ldr	r3, [r7, #20]
 80256b2:	e014      	b.n	80256de <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80256b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80256b6:	689c      	ldr	r4, [r3, #8]
 80256b8:	68b8      	ldr	r0, [r7, #8]
 80256ba:	f7fe fa89 	bl	8023bd0 <lfs_tag_size>
 80256be:	4603      	mov	r3, r0
 80256c0:	429c      	cmp	r4, r3
 80256c2:	d00b      	beq.n	80256dc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80256c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80256c6:	689c      	ldr	r4, [r3, #8]
 80256c8:	68b8      	ldr	r0, [r7, #8]
 80256ca:	f7fe fa81 	bl	8023bd0 <lfs_tag_size>
 80256ce:	4603      	mov	r3, r0
 80256d0:	429c      	cmp	r4, r3
 80256d2:	d201      	bcs.n	80256d8 <lfs_dir_find_match+0x84>
 80256d4:	2301      	movs	r3, #1
 80256d6:	e002      	b.n	80256de <lfs_dir_find_match+0x8a>
 80256d8:	2302      	movs	r3, #2
 80256da:	e000      	b.n	80256de <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80256dc:	2300      	movs	r3, #0
}
 80256de:	4618      	mov	r0, r3
 80256e0:	372c      	adds	r7, #44	; 0x2c
 80256e2:	46bd      	mov	sp, r7
 80256e4:	bd90      	pop	{r4, r7, pc}
	...

080256e8 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80256e8:	b590      	push	{r4, r7, lr}
 80256ea:	b093      	sub	sp, #76	; 0x4c
 80256ec:	af04      	add	r7, sp, #16
 80256ee:	60f8      	str	r0, [r7, #12]
 80256f0:	60b9      	str	r1, [r7, #8]
 80256f2:	607a      	str	r2, [r7, #4]
 80256f4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80256f6:	687b      	ldr	r3, [r7, #4]
 80256f8:	681b      	ldr	r3, [r3, #0]
 80256fa:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80256fc:	683b      	ldr	r3, [r7, #0]
 80256fe:	2b00      	cmp	r3, #0
 8025700:	d003      	beq.n	802570a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025702:	683b      	ldr	r3, [r7, #0]
 8025704:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025708:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 802570a:	4b6e      	ldr	r3, [pc, #440]	; (80258c4 <lfs_dir_find+0x1dc>)
 802570c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 802570e:	68fb      	ldr	r3, [r7, #12]
 8025710:	6a1a      	ldr	r2, [r3, #32]
 8025712:	68bb      	ldr	r3, [r7, #8]
 8025714:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025716:	68fb      	ldr	r3, [r7, #12]
 8025718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802571a:	68bb      	ldr	r3, [r7, #8]
 802571c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 802571e:	496a      	ldr	r1, [pc, #424]	; (80258c8 <lfs_dir_find+0x1e0>)
 8025720:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025722:	f007 fe96 	bl	802d452 <strspn>
 8025726:	4602      	mov	r2, r0
 8025728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802572a:	4413      	add	r3, r2
 802572c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 802572e:	4966      	ldr	r1, [pc, #408]	; (80258c8 <lfs_dir_find+0x1e0>)
 8025730:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025732:	f007 fe45 	bl	802d3c0 <strcspn>
 8025736:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802573a:	2b01      	cmp	r3, #1
 802573c:	d105      	bne.n	802574a <lfs_dir_find+0x62>
 802573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025740:	781a      	ldrb	r2, [r3, #0]
 8025742:	4b62      	ldr	r3, [pc, #392]	; (80258cc <lfs_dir_find+0x1e4>)
 8025744:	781b      	ldrb	r3, [r3, #0]
 8025746:	429a      	cmp	r2, r3
 8025748:	d00a      	beq.n	8025760 <lfs_dir_find+0x78>
 802574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802574c:	2b02      	cmp	r3, #2
 802574e:	d10c      	bne.n	802576a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025750:	2202      	movs	r2, #2
 8025752:	495f      	ldr	r1, [pc, #380]	; (80258d0 <lfs_dir_find+0x1e8>)
 8025754:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025756:	f007 fde5 	bl	802d324 <memcmp>
 802575a:	4603      	mov	r3, r0
 802575c:	2b00      	cmp	r3, #0
 802575e:	d104      	bne.n	802576a <lfs_dir_find+0x82>
            name += namelen;
 8025760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025764:	4413      	add	r3, r2
 8025766:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8025768:	e7d9      	b.n	802571e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 802576a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802576e:	4413      	add	r3, r2
 8025770:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025772:	2301      	movs	r3, #1
 8025774:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025776:	4954      	ldr	r1, [pc, #336]	; (80258c8 <lfs_dir_find+0x1e0>)
 8025778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802577a:	f007 fe6a 	bl	802d452 <strspn>
 802577e:	4602      	mov	r2, r0
 8025780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025782:	4413      	add	r3, r2
 8025784:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8025786:	4950      	ldr	r1, [pc, #320]	; (80258c8 <lfs_dir_find+0x1e0>)
 8025788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802578a:	f007 fe19 	bl	802d3c0 <strcspn>
 802578e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025790:	6a3b      	ldr	r3, [r7, #32]
 8025792:	2b00      	cmp	r3, #0
 8025794:	d01d      	beq.n	80257d2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025796:	6a3b      	ldr	r3, [r7, #32]
 8025798:	2b02      	cmp	r3, #2
 802579a:	d112      	bne.n	80257c2 <lfs_dir_find+0xda>
 802579c:	2202      	movs	r2, #2
 802579e:	494c      	ldr	r1, [pc, #304]	; (80258d0 <lfs_dir_find+0x1e8>)
 80257a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80257a2:	f007 fdbf 	bl	802d324 <memcmp>
 80257a6:	4603      	mov	r3, r0
 80257a8:	2b00      	cmp	r3, #0
 80257aa:	d10a      	bne.n	80257c2 <lfs_dir_find+0xda>
                depth -= 1;
 80257ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257ae:	3b01      	subs	r3, #1
 80257b0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80257b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257b4:	2b00      	cmp	r3, #0
 80257b6:	d107      	bne.n	80257c8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80257b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80257ba:	6a3b      	ldr	r3, [r7, #32]
 80257bc:	4413      	add	r3, r2
 80257be:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80257c0:	e7ad      	b.n	802571e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80257c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257c4:	3301      	adds	r3, #1
 80257c6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80257c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80257ca:	6a3b      	ldr	r3, [r7, #32]
 80257cc:	4413      	add	r3, r2
 80257ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80257d0:	e7d1      	b.n	8025776 <lfs_dir_find+0x8e>
                break;
 80257d2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80257d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80257d6:	781b      	ldrb	r3, [r3, #0]
 80257d8:	2b00      	cmp	r3, #0
 80257da:	d101      	bne.n	80257e0 <lfs_dir_find+0xf8>
            return tag;
 80257dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257de:	e06c      	b.n	80258ba <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80257e0:	687b      	ldr	r3, [r7, #4]
 80257e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80257e4:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80257e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257e8:	4618      	mov	r0, r3
 80257ea:	f7fe f9b7 	bl	8023b5c <lfs_tag_type3>
 80257ee:	4603      	mov	r3, r0
 80257f0:	2b02      	cmp	r3, #2
 80257f2:	d002      	beq.n	80257fa <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80257f4:	f06f 0313 	mvn.w	r3, #19
 80257f8:	e05f      	b.n	80258ba <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80257fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257fc:	4618      	mov	r0, r3
 80257fe:	f7fe f9d7 	bl	8023bb0 <lfs_tag_id>
 8025802:	4603      	mov	r3, r0
 8025804:	461a      	mov	r2, r3
 8025806:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802580a:	429a      	cmp	r2, r3
 802580c:	d01c      	beq.n	8025848 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 802580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025810:	4618      	mov	r0, r3
 8025812:	f7fe f9cd 	bl	8023bb0 <lfs_tag_id>
 8025816:	4603      	mov	r3, r0
 8025818:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 802581a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802581e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025822:	68ba      	ldr	r2, [r7, #8]
 8025824:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025826:	9200      	str	r2, [sp, #0]
 8025828:	4a2a      	ldr	r2, [pc, #168]	; (80258d4 <lfs_dir_find+0x1ec>)
 802582a:	68b9      	ldr	r1, [r7, #8]
 802582c:	68f8      	ldr	r0, [r7, #12]
 802582e:	f7fe fda9 	bl	8024384 <lfs_dir_get>
 8025832:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8025834:	69fb      	ldr	r3, [r7, #28]
 8025836:	2b00      	cmp	r3, #0
 8025838:	da01      	bge.n	802583e <lfs_dir_find+0x156>
                return res;
 802583a:	69fb      	ldr	r3, [r7, #28]
 802583c:	e03d      	b.n	80258ba <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 802583e:	68bb      	ldr	r3, [r7, #8]
 8025840:	3318      	adds	r3, #24
 8025842:	4618      	mov	r0, r3
 8025844:	f7fe f925 	bl	8023a92 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025848:	68bb      	ldr	r3, [r7, #8]
 802584a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 802584e:	212f      	movs	r1, #47	; 0x2f
 8025850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025852:	f007 fda8 	bl	802d3a6 <strchr>
 8025856:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025858:	2b00      	cmp	r3, #0
 802585a:	d101      	bne.n	8025860 <lfs_dir_find+0x178>
 802585c:	683b      	ldr	r3, [r7, #0]
 802585e:	e000      	b.n	8025862 <lfs_dir_find+0x17a>
 8025860:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8025862:	68fa      	ldr	r2, [r7, #12]
 8025864:	613a      	str	r2, [r7, #16]
 8025866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025868:	617a      	str	r2, [r7, #20]
 802586a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802586c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 802586e:	f107 0210 	add.w	r2, r7, #16
 8025872:	9203      	str	r2, [sp, #12]
 8025874:	4a18      	ldr	r2, [pc, #96]	; (80258d8 <lfs_dir_find+0x1f0>)
 8025876:	9202      	str	r2, [sp, #8]
 8025878:	9301      	str	r3, [sp, #4]
 802587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802587c:	9300      	str	r3, [sp, #0]
 802587e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8025882:	4622      	mov	r2, r4
 8025884:	68b9      	ldr	r1, [r7, #8]
 8025886:	68f8      	ldr	r0, [r7, #12]
 8025888:	f7ff faae 	bl	8024de8 <lfs_dir_fetchmatch>
 802588c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 802588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025890:	2b00      	cmp	r3, #0
 8025892:	da01      	bge.n	8025898 <lfs_dir_find+0x1b0>
                return tag;
 8025894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025896:	e010      	b.n	80258ba <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8025898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802589a:	2b00      	cmp	r3, #0
 802589c:	d004      	beq.n	80258a8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 802589e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80258a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80258a2:	4413      	add	r3, r2
 80258a4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80258a6:	e73a      	b.n	802571e <lfs_dir_find+0x36>
            if (!dir->split) {
 80258a8:	68bb      	ldr	r3, [r7, #8]
 80258aa:	7ddb      	ldrb	r3, [r3, #23]
 80258ac:	f083 0301 	eor.w	r3, r3, #1
 80258b0:	b2db      	uxtb	r3, r3
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	d0c8      	beq.n	8025848 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80258b6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80258ba:	4618      	mov	r0, r3
 80258bc:	373c      	adds	r7, #60	; 0x3c
 80258be:	46bd      	mov	sp, r7
 80258c0:	bd90      	pop	{r4, r7, pc}
 80258c2:	bf00      	nop
 80258c4:	002ffc00 	.word	0x002ffc00
 80258c8:	080330a0 	.word	0x080330a0
 80258cc:	080330a4 	.word	0x080330a4
 80258d0:	080330a8 	.word	0x080330a8
 80258d4:	700ffc00 	.word	0x700ffc00
 80258d8:	08025655 	.word	0x08025655

080258dc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80258dc:	b590      	push	{r4, r7, lr}
 80258de:	b08b      	sub	sp, #44	; 0x2c
 80258e0:	af04      	add	r7, sp, #16
 80258e2:	60f8      	str	r0, [r7, #12]
 80258e4:	60b9      	str	r1, [r7, #8]
 80258e6:	607a      	str	r2, [r7, #4]
 80258e8:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80258ea:	68fb      	ldr	r3, [r7, #12]
 80258ec:	f103 0010 	add.w	r0, r3, #16
 80258f0:	68fc      	ldr	r4, [r7, #12]
 80258f2:	68bb      	ldr	r3, [r7, #8]
 80258f4:	681b      	ldr	r3, [r3, #0]
 80258f6:	68ba      	ldr	r2, [r7, #8]
 80258f8:	6852      	ldr	r2, [r2, #4]
 80258fa:	6839      	ldr	r1, [r7, #0]
 80258fc:	9103      	str	r1, [sp, #12]
 80258fe:	6879      	ldr	r1, [r7, #4]
 8025900:	9102      	str	r1, [sp, #8]
 8025902:	9201      	str	r2, [sp, #4]
 8025904:	9300      	str	r3, [sp, #0]
 8025906:	2300      	movs	r3, #0
 8025908:	4622      	mov	r2, r4
 802590a:	4601      	mov	r1, r0
 802590c:	68f8      	ldr	r0, [r7, #12]
 802590e:	f7fd ff5b 	bl	80237c8 <lfs_bd_prog>
 8025912:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8025914:	697b      	ldr	r3, [r7, #20]
 8025916:	2b00      	cmp	r3, #0
 8025918:	d001      	beq.n	802591e <lfs_dir_commitprog+0x42>
        return err;
 802591a:	697b      	ldr	r3, [r7, #20]
 802591c:	e010      	b.n	8025940 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 802591e:	68bb      	ldr	r3, [r7, #8]
 8025920:	68db      	ldr	r3, [r3, #12]
 8025922:	683a      	ldr	r2, [r7, #0]
 8025924:	6879      	ldr	r1, [r7, #4]
 8025926:	4618      	mov	r0, r3
 8025928:	f004 fef2 	bl	802a710 <lfs_crc>
 802592c:	4602      	mov	r2, r0
 802592e:	68bb      	ldr	r3, [r7, #8]
 8025930:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8025932:	68bb      	ldr	r3, [r7, #8]
 8025934:	685a      	ldr	r2, [r3, #4]
 8025936:	683b      	ldr	r3, [r7, #0]
 8025938:	441a      	add	r2, r3
 802593a:	68bb      	ldr	r3, [r7, #8]
 802593c:	605a      	str	r2, [r3, #4]
    return 0;
 802593e:	2300      	movs	r3, #0
}
 8025940:	4618      	mov	r0, r3
 8025942:	371c      	adds	r7, #28
 8025944:	46bd      	mov	sp, r7
 8025946:	bd90      	pop	{r4, r7, pc}

08025948 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8025948:	b590      	push	{r4, r7, lr}
 802594a:	b08f      	sub	sp, #60	; 0x3c
 802594c:	af04      	add	r7, sp, #16
 802594e:	60f8      	str	r0, [r7, #12]
 8025950:	60b9      	str	r1, [r7, #8]
 8025952:	607a      	str	r2, [r7, #4]
 8025954:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8025956:	6878      	ldr	r0, [r7, #4]
 8025958:	f7fe f947 	bl	8023bea <lfs_tag_dsize>
 802595c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 802595e:	68bb      	ldr	r3, [r7, #8]
 8025960:	685a      	ldr	r2, [r3, #4]
 8025962:	6a3b      	ldr	r3, [r7, #32]
 8025964:	441a      	add	r2, r3
 8025966:	68bb      	ldr	r3, [r7, #8]
 8025968:	695b      	ldr	r3, [r3, #20]
 802596a:	429a      	cmp	r2, r3
 802596c:	d902      	bls.n	8025974 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 802596e:	f06f 031b 	mvn.w	r3, #27
 8025972:	e065      	b.n	8025a40 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8025974:	687b      	ldr	r3, [r7, #4]
 8025976:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802597a:	68bb      	ldr	r3, [r7, #8]
 802597c:	689b      	ldr	r3, [r3, #8]
 802597e:	4053      	eors	r3, r2
 8025980:	4618      	mov	r0, r3
 8025982:	f7fd fc92 	bl	80232aa <lfs_tobe32>
 8025986:	4603      	mov	r3, r0
 8025988:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 802598a:	f107 0214 	add.w	r2, r7, #20
 802598e:	2304      	movs	r3, #4
 8025990:	68b9      	ldr	r1, [r7, #8]
 8025992:	68f8      	ldr	r0, [r7, #12]
 8025994:	f7ff ffa2 	bl	80258dc <lfs_dir_commitprog>
 8025998:	61f8      	str	r0, [r7, #28]
    if (err) {
 802599a:	69fb      	ldr	r3, [r7, #28]
 802599c:	2b00      	cmp	r3, #0
 802599e:	d001      	beq.n	80259a4 <lfs_dir_commitattr+0x5c>
        return err;
 80259a0:	69fb      	ldr	r3, [r7, #28]
 80259a2:	e04d      	b.n	8025a40 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80259a4:	687b      	ldr	r3, [r7, #4]
 80259a6:	2b00      	cmp	r3, #0
 80259a8:	db0c      	blt.n	80259c4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80259aa:	6a3b      	ldr	r3, [r7, #32]
 80259ac:	3b04      	subs	r3, #4
 80259ae:	683a      	ldr	r2, [r7, #0]
 80259b0:	68b9      	ldr	r1, [r7, #8]
 80259b2:	68f8      	ldr	r0, [r7, #12]
 80259b4:	f7ff ff92 	bl	80258dc <lfs_dir_commitprog>
 80259b8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80259ba:	69fb      	ldr	r3, [r7, #28]
 80259bc:	2b00      	cmp	r3, #0
 80259be:	d039      	beq.n	8025a34 <lfs_dir_commitattr+0xec>
            return err;
 80259c0:	69fb      	ldr	r3, [r7, #28]
 80259c2:	e03d      	b.n	8025a40 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80259c4:	683b      	ldr	r3, [r7, #0]
 80259c6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80259c8:	2300      	movs	r3, #0
 80259ca:	627b      	str	r3, [r7, #36]	; 0x24
 80259cc:	e02d      	b.n	8025a2a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80259ce:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80259d0:	6a3a      	ldr	r2, [r7, #32]
 80259d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259d4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80259d6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80259d8:	69bb      	ldr	r3, [r7, #24]
 80259da:	681b      	ldr	r3, [r3, #0]
 80259dc:	69ba      	ldr	r2, [r7, #24]
 80259de:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80259e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80259e2:	440a      	add	r2, r1
 80259e4:	2101      	movs	r1, #1
 80259e6:	9103      	str	r1, [sp, #12]
 80259e8:	f107 0113 	add.w	r1, r7, #19
 80259ec:	9102      	str	r1, [sp, #8]
 80259ee:	9201      	str	r2, [sp, #4]
 80259f0:	9300      	str	r3, [sp, #0]
 80259f2:	4623      	mov	r3, r4
 80259f4:	4602      	mov	r2, r0
 80259f6:	2100      	movs	r1, #0
 80259f8:	68f8      	ldr	r0, [r7, #12]
 80259fa:	f7fd fc9f 	bl	802333c <lfs_bd_read>
 80259fe:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025a00:	69fb      	ldr	r3, [r7, #28]
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d001      	beq.n	8025a0a <lfs_dir_commitattr+0xc2>
                return err;
 8025a06:	69fb      	ldr	r3, [r7, #28]
 8025a08:	e01a      	b.n	8025a40 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8025a0a:	f107 0213 	add.w	r2, r7, #19
 8025a0e:	2301      	movs	r3, #1
 8025a10:	68b9      	ldr	r1, [r7, #8]
 8025a12:	68f8      	ldr	r0, [r7, #12]
 8025a14:	f7ff ff62 	bl	80258dc <lfs_dir_commitprog>
 8025a18:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025a1a:	69fb      	ldr	r3, [r7, #28]
 8025a1c:	2b00      	cmp	r3, #0
 8025a1e:	d001      	beq.n	8025a24 <lfs_dir_commitattr+0xdc>
                return err;
 8025a20:	69fb      	ldr	r3, [r7, #28]
 8025a22:	e00d      	b.n	8025a40 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a26:	3301      	adds	r3, #1
 8025a28:	627b      	str	r3, [r7, #36]	; 0x24
 8025a2a:	6a3b      	ldr	r3, [r7, #32]
 8025a2c:	3b04      	subs	r3, #4
 8025a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025a30:	429a      	cmp	r2, r3
 8025a32:	d3cc      	bcc.n	80259ce <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8025a34:	687b      	ldr	r3, [r7, #4]
 8025a36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025a3a:	68bb      	ldr	r3, [r7, #8]
 8025a3c:	609a      	str	r2, [r3, #8]
    return 0;
 8025a3e:	2300      	movs	r3, #0
}
 8025a40:	4618      	mov	r0, r3
 8025a42:	372c      	adds	r7, #44	; 0x2c
 8025a44:	46bd      	mov	sp, r7
 8025a46:	bd90      	pop	{r4, r7, pc}

08025a48 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8025a48:	b590      	push	{r4, r7, lr}
 8025a4a:	b097      	sub	sp, #92	; 0x5c
 8025a4c:	af04      	add	r7, sp, #16
 8025a4e:	6078      	str	r0, [r7, #4]
 8025a50:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025a52:	683b      	ldr	r3, [r7, #0]
 8025a54:	685b      	ldr	r3, [r3, #4]
 8025a56:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8025a5a:	687b      	ldr	r3, [r7, #4]
 8025a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025a5e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025a60:	4619      	mov	r1, r3
 8025a62:	4610      	mov	r0, r2
 8025a64:	f7fd fbb3 	bl	80231ce <lfs_alignup>
 8025a68:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8025a6a:	2300      	movs	r3, #0
 8025a6c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8025a6e:	2300      	movs	r3, #0
 8025a70:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8025a72:	e0a6      	b.n	8025bc2 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8025a74:	683b      	ldr	r3, [r7, #0]
 8025a76:	685b      	ldr	r3, [r3, #4]
 8025a78:	3304      	adds	r3, #4
 8025a7a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8025a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025a7e:	6a3b      	ldr	r3, [r7, #32]
 8025a80:	1ad3      	subs	r3, r2, r3
 8025a82:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8025a86:	4618      	mov	r0, r3
 8025a88:	f7fd fb7c 	bl	8023184 <lfs_min>
 8025a8c:	4602      	mov	r2, r0
 8025a8e:	6a3b      	ldr	r3, [r7, #32]
 8025a90:	4413      	add	r3, r2
 8025a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8025a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a98:	429a      	cmp	r2, r3
 8025a9a:	d206      	bcs.n	8025aaa <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8025a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a9e:	3b08      	subs	r3, #8
 8025aa0:	4619      	mov	r1, r3
 8025aa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8025aa4:	f7fd fb6e 	bl	8023184 <lfs_min>
 8025aa8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8025aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8025aae:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8025ab0:	6879      	ldr	r1, [r7, #4]
 8025ab2:	683b      	ldr	r3, [r7, #0]
 8025ab4:	681b      	ldr	r3, [r3, #0]
 8025ab6:	2204      	movs	r2, #4
 8025ab8:	9203      	str	r2, [sp, #12]
 8025aba:	f107 0214 	add.w	r2, r7, #20
 8025abe:	9202      	str	r2, [sp, #8]
 8025ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025ac2:	9201      	str	r2, [sp, #4]
 8025ac4:	9300      	str	r3, [sp, #0]
 8025ac6:	2304      	movs	r3, #4
 8025ac8:	460a      	mov	r2, r1
 8025aca:	2100      	movs	r1, #0
 8025acc:	6878      	ldr	r0, [r7, #4]
 8025ace:	f7fd fc35 	bl	802333c <lfs_bd_read>
 8025ad2:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8025ad4:	69fb      	ldr	r3, [r7, #28]
 8025ad6:	2b00      	cmp	r3, #0
 8025ad8:	d005      	beq.n	8025ae6 <lfs_dir_commitcrc+0x9e>
 8025ada:	69fb      	ldr	r3, [r7, #28]
 8025adc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025ae0:	d001      	beq.n	8025ae6 <lfs_dir_commitcrc+0x9e>
            return err;
 8025ae2:	69fb      	ldr	r3, [r7, #28]
 8025ae4:	e0e8      	b.n	8025cb8 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8025ae6:	697b      	ldr	r3, [r7, #20]
 8025ae8:	4618      	mov	r0, r3
 8025aea:	f7fd fbd2 	bl	8023292 <lfs_frombe32>
 8025aee:	4603      	mov	r3, r0
 8025af0:	43db      	mvns	r3, r3
 8025af2:	0fdb      	lsrs	r3, r3, #31
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	bf14      	ite	ne
 8025af8:	2301      	movne	r3, #1
 8025afa:	2300      	moveq	r3, #0
 8025afc:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8025afe:	7efb      	ldrb	r3, [r7, #27]
 8025b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b04:	051a      	lsls	r2, r3, #20
 8025b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8025b08:	6a3b      	ldr	r3, [r7, #32]
 8025b0a:	1acb      	subs	r3, r1, r3
 8025b0c:	4313      	orrs	r3, r2
 8025b0e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8025b12:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8025b16:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8025b18:	683b      	ldr	r3, [r7, #0]
 8025b1a:	689a      	ldr	r2, [r3, #8]
 8025b1c:	697b      	ldr	r3, [r7, #20]
 8025b1e:	4053      	eors	r3, r2
 8025b20:	4618      	mov	r0, r3
 8025b22:	f7fd fbc2 	bl	80232aa <lfs_tobe32>
 8025b26:	4603      	mov	r3, r0
 8025b28:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8025b2a:	683b      	ldr	r3, [r7, #0]
 8025b2c:	68db      	ldr	r3, [r3, #12]
 8025b2e:	f107 010c 	add.w	r1, r7, #12
 8025b32:	2204      	movs	r2, #4
 8025b34:	4618      	mov	r0, r3
 8025b36:	f004 fdeb 	bl	802a710 <lfs_crc>
 8025b3a:	4602      	mov	r2, r0
 8025b3c:	683b      	ldr	r3, [r7, #0]
 8025b3e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8025b40:	683b      	ldr	r3, [r7, #0]
 8025b42:	68db      	ldr	r3, [r3, #12]
 8025b44:	4618      	mov	r0, r3
 8025b46:	f7fd fb98 	bl	802327a <lfs_tole32>
 8025b4a:	4603      	mov	r3, r0
 8025b4c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8025b4e:	687b      	ldr	r3, [r7, #4]
 8025b50:	f103 0010 	add.w	r0, r3, #16
 8025b54:	687c      	ldr	r4, [r7, #4]
 8025b56:	683b      	ldr	r3, [r7, #0]
 8025b58:	681b      	ldr	r3, [r3, #0]
 8025b5a:	683a      	ldr	r2, [r7, #0]
 8025b5c:	6852      	ldr	r2, [r2, #4]
 8025b5e:	2108      	movs	r1, #8
 8025b60:	9103      	str	r1, [sp, #12]
 8025b62:	f107 010c 	add.w	r1, r7, #12
 8025b66:	9102      	str	r1, [sp, #8]
 8025b68:	9201      	str	r2, [sp, #4]
 8025b6a:	9300      	str	r3, [sp, #0]
 8025b6c:	2300      	movs	r3, #0
 8025b6e:	4622      	mov	r2, r4
 8025b70:	4601      	mov	r1, r0
 8025b72:	6878      	ldr	r0, [r7, #4]
 8025b74:	f7fd fe28 	bl	80237c8 <lfs_bd_prog>
 8025b78:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8025b7a:	69fb      	ldr	r3, [r7, #28]
 8025b7c:	2b00      	cmp	r3, #0
 8025b7e:	d001      	beq.n	8025b84 <lfs_dir_commitcrc+0x13c>
            return err;
 8025b80:	69fb      	ldr	r3, [r7, #28]
 8025b82:	e099      	b.n	8025cb8 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8025b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025b86:	2b00      	cmp	r3, #0
 8025b88:	d106      	bne.n	8025b98 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8025b8a:	683b      	ldr	r3, [r7, #0]
 8025b8c:	685b      	ldr	r3, [r3, #4]
 8025b8e:	3304      	adds	r3, #4
 8025b90:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8025b92:	683b      	ldr	r3, [r7, #0]
 8025b94:	68db      	ldr	r3, [r3, #12]
 8025b96:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8025b98:	697b      	ldr	r3, [r7, #20]
 8025b9a:	4618      	mov	r0, r3
 8025b9c:	f7fe f818 	bl	8023bd0 <lfs_tag_size>
 8025ba0:	4603      	mov	r3, r0
 8025ba2:	1d1a      	adds	r2, r3, #4
 8025ba4:	683b      	ldr	r3, [r7, #0]
 8025ba6:	685b      	ldr	r3, [r3, #4]
 8025ba8:	441a      	add	r2, r3
 8025baa:	683b      	ldr	r3, [r7, #0]
 8025bac:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8025bae:	7efb      	ldrb	r3, [r7, #27]
 8025bb0:	07da      	lsls	r2, r3, #31
 8025bb2:	697b      	ldr	r3, [r7, #20]
 8025bb4:	405a      	eors	r2, r3
 8025bb6:	683b      	ldr	r3, [r7, #0]
 8025bb8:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8025bba:	683b      	ldr	r3, [r7, #0]
 8025bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8025bc0:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8025bc2:	683b      	ldr	r3, [r7, #0]
 8025bc4:	685b      	ldr	r3, [r3, #4]
 8025bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025bc8:	429a      	cmp	r2, r3
 8025bca:	f63f af53 	bhi.w	8025a74 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	f103 0110 	add.w	r1, r3, #16
 8025bd4:	687a      	ldr	r2, [r7, #4]
 8025bd6:	2300      	movs	r3, #0
 8025bd8:	6878      	ldr	r0, [r7, #4]
 8025bda:	f7fd fdc1 	bl	8023760 <lfs_bd_sync>
 8025bde:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8025be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025be2:	2b00      	cmp	r3, #0
 8025be4:	d001      	beq.n	8025bea <lfs_dir_commitcrc+0x1a2>
        return err;
 8025be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025be8:	e066      	b.n	8025cb8 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8025bea:	683b      	ldr	r3, [r7, #0]
 8025bec:	691b      	ldr	r3, [r3, #16]
 8025bee:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8025bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025bf2:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8025bf4:	e05b      	b.n	8025cae <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8025bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8025bfa:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8025bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025c00:	e030      	b.n	8025c64 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8025c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025c06:	429a      	cmp	r2, r3
 8025c08:	d106      	bne.n	8025c18 <lfs_dir_commitcrc+0x1d0>
 8025c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025c0e:	429a      	cmp	r2, r3
 8025c10:	d002      	beq.n	8025c18 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8025c12:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8025c16:	e04f      	b.n	8025cb8 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8025c18:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8025c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c1e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8025c20:	1d18      	adds	r0, r3, #4
 8025c22:	683b      	ldr	r3, [r7, #0]
 8025c24:	681b      	ldr	r3, [r3, #0]
 8025c26:	2201      	movs	r2, #1
 8025c28:	9203      	str	r2, [sp, #12]
 8025c2a:	f107 020b 	add.w	r2, r7, #11
 8025c2e:	9202      	str	r2, [sp, #8]
 8025c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025c32:	9201      	str	r2, [sp, #4]
 8025c34:	9300      	str	r3, [sp, #0]
 8025c36:	4603      	mov	r3, r0
 8025c38:	460a      	mov	r2, r1
 8025c3a:	2100      	movs	r1, #0
 8025c3c:	6878      	ldr	r0, [r7, #4]
 8025c3e:	f7fd fb7d 	bl	802333c <lfs_bd_read>
 8025c42:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8025c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	d001      	beq.n	8025c4e <lfs_dir_commitcrc+0x206>
                return err;
 8025c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c4c:	e034      	b.n	8025cb8 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8025c4e:	f107 030b 	add.w	r3, r7, #11
 8025c52:	2201      	movs	r2, #1
 8025c54:	4619      	mov	r1, r3
 8025c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025c58:	f004 fd5a 	bl	802a710 <lfs_crc>
 8025c5c:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8025c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c60:	3301      	adds	r3, #1
 8025c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025c66:	3304      	adds	r3, #4
 8025c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025c6a:	429a      	cmp	r2, r3
 8025c6c:	d3c9      	bcc.n	8025c02 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8025c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c70:	2b00      	cmp	r3, #0
 8025c72:	d002      	beq.n	8025c7a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8025c74:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8025c78:	e01e      	b.n	8025cb8 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8025c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025c7e:	1ad3      	subs	r3, r2, r3
 8025c80:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8025c84:	4618      	mov	r0, r3
 8025c86:	f7fd fa7d 	bl	8023184 <lfs_min>
 8025c8a:	4602      	mov	r2, r0
 8025c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025c8e:	4413      	add	r3, r2
 8025c90:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8025c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c96:	429a      	cmp	r2, r3
 8025c98:	d206      	bcs.n	8025ca8 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8025c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c9c:	3b08      	subs	r3, #8
 8025c9e:	4619      	mov	r1, r3
 8025ca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025ca2:	f7fd fa6f 	bl	8023184 <lfs_min>
 8025ca6:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8025ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025caa:	3304      	adds	r3, #4
 8025cac:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8025cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025cb2:	429a      	cmp	r2, r3
 8025cb4:	d39f      	bcc.n	8025bf6 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8025cb6:	2300      	movs	r3, #0
}
 8025cb8:	4618      	mov	r0, r3
 8025cba:	374c      	adds	r7, #76	; 0x4c
 8025cbc:	46bd      	mov	sp, r7
 8025cbe:	bd90      	pop	{r4, r7, pc}

08025cc0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8025cc0:	b580      	push	{r7, lr}
 8025cc2:	b08a      	sub	sp, #40	; 0x28
 8025cc4:	af04      	add	r7, sp, #16
 8025cc6:	6078      	str	r0, [r7, #4]
 8025cc8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8025cca:	2300      	movs	r3, #0
 8025ccc:	617b      	str	r3, [r7, #20]
 8025cce:	e016      	b.n	8025cfe <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8025cd0:	697b      	ldr	r3, [r7, #20]
 8025cd2:	3301      	adds	r3, #1
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	f003 0301 	and.w	r3, r3, #1
 8025cda:	bfb8      	it	lt
 8025cdc:	425b      	neglt	r3, r3
 8025cde:	009b      	lsls	r3, r3, #2
 8025ce0:	683a      	ldr	r2, [r7, #0]
 8025ce2:	4413      	add	r3, r2
 8025ce4:	4619      	mov	r1, r3
 8025ce6:	6878      	ldr	r0, [r7, #4]
 8025ce8:	f7fe f9b2 	bl	8024050 <lfs_alloc>
 8025cec:	60f8      	str	r0, [r7, #12]
        if (err) {
 8025cee:	68fb      	ldr	r3, [r7, #12]
 8025cf0:	2b00      	cmp	r3, #0
 8025cf2:	d001      	beq.n	8025cf8 <lfs_dir_alloc+0x38>
            return err;
 8025cf4:	68fb      	ldr	r3, [r7, #12]
 8025cf6:	e058      	b.n	8025daa <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8025cf8:	697b      	ldr	r3, [r7, #20]
 8025cfa:	3301      	adds	r3, #1
 8025cfc:	617b      	str	r3, [r7, #20]
 8025cfe:	697b      	ldr	r3, [r7, #20]
 8025d00:	2b01      	cmp	r3, #1
 8025d02:	dde5      	ble.n	8025cd0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8025d04:	683b      	ldr	r3, [r7, #0]
 8025d06:	2200      	movs	r2, #0
 8025d08:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8025d0a:	6879      	ldr	r1, [r7, #4]
 8025d0c:	683b      	ldr	r3, [r7, #0]
 8025d0e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8025d10:	683a      	ldr	r2, [r7, #0]
 8025d12:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8025d14:	2004      	movs	r0, #4
 8025d16:	9003      	str	r0, [sp, #12]
 8025d18:	9202      	str	r2, [sp, #8]
 8025d1a:	2200      	movs	r2, #0
 8025d1c:	9201      	str	r2, [sp, #4]
 8025d1e:	9300      	str	r3, [sp, #0]
 8025d20:	2304      	movs	r3, #4
 8025d22:	460a      	mov	r2, r1
 8025d24:	2100      	movs	r1, #0
 8025d26:	6878      	ldr	r0, [r7, #4]
 8025d28:	f7fd fb08 	bl	802333c <lfs_bd_read>
 8025d2c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8025d2e:	683b      	ldr	r3, [r7, #0]
 8025d30:	689b      	ldr	r3, [r3, #8]
 8025d32:	4618      	mov	r0, r3
 8025d34:	f7fd fa96 	bl	8023264 <lfs_fromle32>
 8025d38:	4602      	mov	r2, r0
 8025d3a:	683b      	ldr	r3, [r7, #0]
 8025d3c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8025d3e:	693b      	ldr	r3, [r7, #16]
 8025d40:	2b00      	cmp	r3, #0
 8025d42:	d005      	beq.n	8025d50 <lfs_dir_alloc+0x90>
 8025d44:	693b      	ldr	r3, [r7, #16]
 8025d46:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025d4a:	d001      	beq.n	8025d50 <lfs_dir_alloc+0x90>
        return err;
 8025d4c:	693b      	ldr	r3, [r7, #16]
 8025d4e:	e02c      	b.n	8025daa <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025d56:	2b00      	cmp	r3, #0
 8025d58:	dd0e      	ble.n	8025d78 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8025d5a:	683b      	ldr	r3, [r7, #0]
 8025d5c:	689a      	ldr	r2, [r3, #8]
 8025d5e:	687b      	ldr	r3, [r7, #4]
 8025d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025d64:	3301      	adds	r3, #1
 8025d66:	f043 0301 	orr.w	r3, r3, #1
 8025d6a:	4619      	mov	r1, r3
 8025d6c:	4610      	mov	r0, r2
 8025d6e:	f7fd fa2e 	bl	80231ce <lfs_alignup>
 8025d72:	4602      	mov	r2, r0
 8025d74:	683b      	ldr	r3, [r7, #0]
 8025d76:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8025d78:	683b      	ldr	r3, [r7, #0]
 8025d7a:	2204      	movs	r2, #4
 8025d7c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8025d7e:	683b      	ldr	r3, [r7, #0]
 8025d80:	f04f 32ff 	mov.w	r2, #4294967295
 8025d84:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8025d86:	683b      	ldr	r3, [r7, #0]
 8025d88:	2200      	movs	r2, #0
 8025d8a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8025d8c:	683b      	ldr	r3, [r7, #0]
 8025d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8025d92:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8025d94:	683b      	ldr	r3, [r7, #0]
 8025d96:	f04f 32ff 	mov.w	r2, #4294967295
 8025d9a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8025d9c:	683b      	ldr	r3, [r7, #0]
 8025d9e:	2200      	movs	r2, #0
 8025da0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8025da2:	683b      	ldr	r3, [r7, #0]
 8025da4:	2200      	movs	r2, #0
 8025da6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8025da8:	2300      	movs	r3, #0
}
 8025daa:	4618      	mov	r0, r3
 8025dac:	3718      	adds	r7, #24
 8025dae:	46bd      	mov	sp, r7
 8025db0:	bd80      	pop	{r7, pc}
	...

08025db4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8025db4:	b580      	push	{r7, lr}
 8025db6:	b08a      	sub	sp, #40	; 0x28
 8025db8:	af00      	add	r7, sp, #0
 8025dba:	60f8      	str	r0, [r7, #12]
 8025dbc:	60b9      	str	r1, [r7, #8]
 8025dbe:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8025dc0:	68fb      	ldr	r3, [r7, #12]
 8025dc2:	3348      	adds	r3, #72	; 0x48
 8025dc4:	461a      	mov	r2, r3
 8025dc6:	6879      	ldr	r1, [r7, #4]
 8025dc8:	68f8      	ldr	r0, [r7, #12]
 8025dca:	f7ff fb97 	bl	80254fc <lfs_dir_getgstate>
 8025dce:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8025dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	d001      	beq.n	8025dda <lfs_dir_drop+0x26>
        return err;
 8025dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dd8:	e022      	b.n	8025e20 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 8025dda:	687b      	ldr	r3, [r7, #4]
 8025ddc:	3318      	adds	r3, #24
 8025dde:	4618      	mov	r0, r3
 8025de0:	f7fd fe71 	bl	8023ac6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8025de4:	687b      	ldr	r3, [r7, #4]
 8025de6:	7ddb      	ldrb	r3, [r3, #23]
 8025de8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8025dec:	051a      	lsls	r2, r3, #20
 8025dee:	4b0e      	ldr	r3, [pc, #56]	; (8025e28 <lfs_dir_drop+0x74>)
 8025df0:	4313      	orrs	r3, r2
 8025df2:	61fb      	str	r3, [r7, #28]
 8025df4:	687b      	ldr	r3, [r7, #4]
 8025df6:	3318      	adds	r3, #24
 8025df8:	623b      	str	r3, [r7, #32]
 8025dfa:	f107 021c 	add.w	r2, r7, #28
 8025dfe:	2301      	movs	r3, #1
 8025e00:	68b9      	ldr	r1, [r7, #8]
 8025e02:	68f8      	ldr	r0, [r7, #12]
 8025e04:	f001 f978 	bl	80270f8 <lfs_dir_commit>
 8025e08:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8025e0a:	687b      	ldr	r3, [r7, #4]
 8025e0c:	3318      	adds	r3, #24
 8025e0e:	4618      	mov	r0, r3
 8025e10:	f7fd fe3f 	bl	8023a92 <lfs_pair_fromle32>
    if (err) {
 8025e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e16:	2b00      	cmp	r3, #0
 8025e18:	d001      	beq.n	8025e1e <lfs_dir_drop+0x6a>
        return err;
 8025e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e1c:	e000      	b.n	8025e20 <lfs_dir_drop+0x6c>
    }

    return 0;
 8025e1e:	2300      	movs	r3, #0
}
 8025e20:	4618      	mov	r0, r3
 8025e22:	3728      	adds	r7, #40	; 0x28
 8025e24:	46bd      	mov	sp, r7
 8025e26:	bd80      	pop	{r7, pc}
 8025e28:	000ffc08 	.word	0x000ffc08

08025e2c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8025e2c:	b580      	push	{r7, lr}
 8025e2e:	b092      	sub	sp, #72	; 0x48
 8025e30:	af04      	add	r7, sp, #16
 8025e32:	60f8      	str	r0, [r7, #12]
 8025e34:	60b9      	str	r1, [r7, #8]
 8025e36:	607a      	str	r2, [r7, #4]
 8025e38:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8025e3a:	f107 0310 	add.w	r3, r7, #16
 8025e3e:	4619      	mov	r1, r3
 8025e40:	68f8      	ldr	r0, [r7, #12]
 8025e42:	f7ff ff3d 	bl	8025cc0 <lfs_dir_alloc>
 8025e46:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8025e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e4a:	2b00      	cmp	r3, #0
 8025e4c:	d001      	beq.n	8025e52 <lfs_dir_split+0x26>
        return err;
 8025e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e50:	e03c      	b.n	8025ecc <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8025e52:	68bb      	ldr	r3, [r7, #8]
 8025e54:	7ddb      	ldrb	r3, [r3, #23]
 8025e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8025e5a:	68bb      	ldr	r3, [r7, #8]
 8025e5c:	699b      	ldr	r3, [r3, #24]
 8025e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8025e60:	68bb      	ldr	r3, [r7, #8]
 8025e62:	69db      	ldr	r3, [r3, #28]
 8025e64:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8025e66:	f107 0110 	add.w	r1, r7, #16
 8025e6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8025e6e:	9302      	str	r3, [sp, #8]
 8025e70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025e74:	9301      	str	r3, [sp, #4]
 8025e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025e78:	9300      	str	r3, [sp, #0]
 8025e7a:	683b      	ldr	r3, [r7, #0]
 8025e7c:	687a      	ldr	r2, [r7, #4]
 8025e7e:	68f8      	ldr	r0, [r7, #12]
 8025e80:	f000 f87a 	bl	8025f78 <lfs_dir_compact>
 8025e84:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8025e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e88:	2b00      	cmp	r3, #0
 8025e8a:	da01      	bge.n	8025e90 <lfs_dir_split+0x64>
        return res;
 8025e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e8e:	e01d      	b.n	8025ecc <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8025e90:	693a      	ldr	r2, [r7, #16]
 8025e92:	68bb      	ldr	r3, [r7, #8]
 8025e94:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8025e96:	697a      	ldr	r2, [r7, #20]
 8025e98:	68bb      	ldr	r3, [r7, #8]
 8025e9a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8025e9c:	68bb      	ldr	r3, [r7, #8]
 8025e9e:	2201      	movs	r2, #1
 8025ea0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8025ea2:	68ba      	ldr	r2, [r7, #8]
 8025ea4:	68fb      	ldr	r3, [r7, #12]
 8025ea6:	3320      	adds	r3, #32
 8025ea8:	4619      	mov	r1, r3
 8025eaa:	4610      	mov	r0, r2
 8025eac:	f7fd fd9a 	bl	80239e4 <lfs_pair_cmp>
 8025eb0:	4603      	mov	r3, r0
 8025eb2:	2b00      	cmp	r3, #0
 8025eb4:	d109      	bne.n	8025eca <lfs_dir_split+0x9e>
 8025eb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025eba:	2b00      	cmp	r3, #0
 8025ebc:	d105      	bne.n	8025eca <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8025ebe:	693a      	ldr	r2, [r7, #16]
 8025ec0:	68fb      	ldr	r3, [r7, #12]
 8025ec2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8025ec4:	697a      	ldr	r2, [r7, #20]
 8025ec6:	68fb      	ldr	r3, [r7, #12]
 8025ec8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8025eca:	2300      	movs	r3, #0
}
 8025ecc:	4618      	mov	r0, r3
 8025ece:	3738      	adds	r7, #56	; 0x38
 8025ed0:	46bd      	mov	sp, r7
 8025ed2:	bd80      	pop	{r7, pc}

08025ed4 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8025ed4:	b580      	push	{r7, lr}
 8025ed6:	b086      	sub	sp, #24
 8025ed8:	af00      	add	r7, sp, #0
 8025eda:	60f8      	str	r0, [r7, #12]
 8025edc:	60b9      	str	r1, [r7, #8]
 8025ede:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8025ee0:	68fb      	ldr	r3, [r7, #12]
 8025ee2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8025ee4:	68b8      	ldr	r0, [r7, #8]
 8025ee6:	f7fd fe80 	bl	8023bea <lfs_tag_dsize>
 8025eea:	4602      	mov	r2, r0
 8025eec:	697b      	ldr	r3, [r7, #20]
 8025eee:	681b      	ldr	r3, [r3, #0]
 8025ef0:	441a      	add	r2, r3
 8025ef2:	697b      	ldr	r3, [r7, #20]
 8025ef4:	601a      	str	r2, [r3, #0]
    return 0;
 8025ef6:	2300      	movs	r3, #0
}
 8025ef8:	4618      	mov	r0, r3
 8025efa:	3718      	adds	r7, #24
 8025efc:	46bd      	mov	sp, r7
 8025efe:	bd80      	pop	{r7, pc}

08025f00 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8025f00:	b580      	push	{r7, lr}
 8025f02:	b086      	sub	sp, #24
 8025f04:	af00      	add	r7, sp, #0
 8025f06:	60f8      	str	r0, [r7, #12]
 8025f08:	60b9      	str	r1, [r7, #8]
 8025f0a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8025f0c:	68fb      	ldr	r3, [r7, #12]
 8025f0e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8025f10:	697b      	ldr	r3, [r7, #20]
 8025f12:	6818      	ldr	r0, [r3, #0]
 8025f14:	697b      	ldr	r3, [r7, #20]
 8025f16:	6859      	ldr	r1, [r3, #4]
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	68ba      	ldr	r2, [r7, #8]
 8025f1c:	f7ff fd14 	bl	8025948 <lfs_dir_commitattr>
 8025f20:	4603      	mov	r3, r0
}
 8025f22:	4618      	mov	r0, r3
 8025f24:	3718      	adds	r7, #24
 8025f26:	46bd      	mov	sp, r7
 8025f28:	bd80      	pop	{r7, pc}

08025f2a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8025f2a:	b480      	push	{r7}
 8025f2c:	b083      	sub	sp, #12
 8025f2e:	af00      	add	r7, sp, #0
 8025f30:	6078      	str	r0, [r7, #4]
 8025f32:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8025f34:	687b      	ldr	r3, [r7, #4]
 8025f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	dd11      	ble.n	8025f62 <lfs_dir_needsrelocation+0x38>
 8025f3e:	683b      	ldr	r3, [r7, #0]
 8025f40:	689b      	ldr	r3, [r3, #8]
 8025f42:	3301      	adds	r3, #1
 8025f44:	687a      	ldr	r2, [r7, #4]
 8025f46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8025f4a:	3201      	adds	r2, #1
 8025f4c:	f042 0201 	orr.w	r2, r2, #1
 8025f50:	fbb3 f1f2 	udiv	r1, r3, r2
 8025f54:	fb01 f202 	mul.w	r2, r1, r2
 8025f58:	1a9b      	subs	r3, r3, r2
 8025f5a:	2b00      	cmp	r3, #0
 8025f5c:	d101      	bne.n	8025f62 <lfs_dir_needsrelocation+0x38>
 8025f5e:	2301      	movs	r3, #1
 8025f60:	e000      	b.n	8025f64 <lfs_dir_needsrelocation+0x3a>
 8025f62:	2300      	movs	r3, #0
 8025f64:	f003 0301 	and.w	r3, r3, #1
 8025f68:	b2db      	uxtb	r3, r3
}
 8025f6a:	4618      	mov	r0, r3
 8025f6c:	370c      	adds	r7, #12
 8025f6e:	46bd      	mov	sp, r7
 8025f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f74:	4770      	bx	lr
	...

08025f78 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8025f78:	b580      	push	{r7, lr}
 8025f7a:	b0a4      	sub	sp, #144	; 0x90
 8025f7c:	af0a      	add	r7, sp, #40	; 0x28
 8025f7e:	60f8      	str	r0, [r7, #12]
 8025f80:	60b9      	str	r1, [r7, #8]
 8025f82:	607a      	str	r2, [r7, #4]
 8025f84:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8025f86:	2300      	movs	r3, #0
 8025f88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8025f8c:	68b9      	ldr	r1, [r7, #8]
 8025f8e:	68f8      	ldr	r0, [r7, #12]
 8025f90:	f7ff ffcb 	bl	8025f2a <lfs_dir_needsrelocation>
 8025f94:	4603      	mov	r3, r0
 8025f96:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8025f9a:	68bb      	ldr	r3, [r7, #8]
 8025f9c:	689b      	ldr	r3, [r3, #8]
 8025f9e:	1c5a      	adds	r2, r3, #1
 8025fa0:	68bb      	ldr	r3, [r7, #8]
 8025fa2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8025fa4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8025fa8:	2b00      	cmp	r3, #0
 8025faa:	d00e      	beq.n	8025fca <lfs_dir_compact+0x52>
 8025fac:	68bb      	ldr	r3, [r7, #8]
 8025fae:	2200      	movs	r2, #0
 8025fb0:	657a      	str	r2, [r7, #84]	; 0x54
 8025fb2:	2201      	movs	r2, #1
 8025fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8025fb6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8025fba:	4611      	mov	r1, r2
 8025fbc:	4618      	mov	r0, r3
 8025fbe:	f7fd fd11 	bl	80239e4 <lfs_pair_cmp>
 8025fc2:	4603      	mov	r3, r0
 8025fc4:	2b00      	cmp	r3, #0
 8025fc6:	f040 8155 	bne.w	8026274 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8025fca:	68bb      	ldr	r3, [r7, #8]
 8025fcc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8025fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025fd0:	2300      	movs	r3, #0
 8025fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8025fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8025fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8025fda:	f04f 33ff 	mov.w	r3, #4294967295
 8025fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8025fe0:	2300      	movs	r3, #0
 8025fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8025fe4:	68fb      	ldr	r3, [r7, #12]
 8025fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8025fea:	2b00      	cmp	r3, #0
 8025fec:	d004      	beq.n	8025ff8 <lfs_dir_compact+0x80>
 8025fee:	68fb      	ldr	r3, [r7, #12]
 8025ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025ff4:	3b08      	subs	r3, #8
 8025ff6:	e003      	b.n	8026000 <lfs_dir_compact+0x88>
 8025ff8:	68fb      	ldr	r3, [r7, #12]
 8025ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025ffc:	69db      	ldr	r3, [r3, #28]
 8025ffe:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8026000:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8026002:	68bb      	ldr	r3, [r7, #8]
 8026004:	685b      	ldr	r3, [r3, #4]
 8026006:	4619      	mov	r1, r3
 8026008:	68f8      	ldr	r0, [r7, #12]
 802600a:	f7fd fc89 	bl	8023920 <lfs_bd_erase>
 802600e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026012:	2b00      	cmp	r3, #0
 8026014:	d006      	beq.n	8026024 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8026016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026018:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802601c:	f000 812c 	beq.w	8026278 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8026020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026022:	e188      	b.n	8026336 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8026024:	68bb      	ldr	r3, [r7, #8]
 8026026:	689b      	ldr	r3, [r3, #8]
 8026028:	4618      	mov	r0, r3
 802602a:	f7fd f926 	bl	802327a <lfs_tole32>
 802602e:	4602      	mov	r2, r0
 8026030:	68bb      	ldr	r3, [r7, #8]
 8026032:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8026034:	68bb      	ldr	r3, [r7, #8]
 8026036:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 802603a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 802603e:	2304      	movs	r3, #4
 8026040:	68f8      	ldr	r0, [r7, #12]
 8026042:	f7ff fc4b 	bl	80258dc <lfs_dir_commitprog>
 8026046:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8026048:	68bb      	ldr	r3, [r7, #8]
 802604a:	689b      	ldr	r3, [r3, #8]
 802604c:	4618      	mov	r0, r3
 802604e:	f7fd f909 	bl	8023264 <lfs_fromle32>
 8026052:	4602      	mov	r2, r0
 8026054:	68bb      	ldr	r3, [r7, #8]
 8026056:	609a      	str	r2, [r3, #8]
            if (err) {
 8026058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802605a:	2b00      	cmp	r3, #0
 802605c:	d006      	beq.n	802606c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 802605e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026060:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026064:	f000 810a 	beq.w	802627c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8026068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802606a:	e164      	b.n	8026336 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 802606c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026070:	425b      	negs	r3, r3
 8026072:	b29b      	uxth	r3, r3
 8026074:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026076:	68fa      	ldr	r2, [r7, #12]
 8026078:	637a      	str	r2, [r7, #52]	; 0x34
 802607a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802607e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8026080:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026084:	9208      	str	r2, [sp, #32]
 8026086:	4aae      	ldr	r2, [pc, #696]	; (8026340 <lfs_dir_compact+0x3c8>)
 8026088:	9207      	str	r2, [sp, #28]
 802608a:	9306      	str	r3, [sp, #24]
 802608c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8026090:	9305      	str	r3, [sp, #20]
 8026092:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026096:	9304      	str	r3, [sp, #16]
 8026098:	2300      	movs	r3, #0
 802609a:	9303      	str	r3, [sp, #12]
 802609c:	4ba9      	ldr	r3, [pc, #676]	; (8026344 <lfs_dir_compact+0x3cc>)
 802609e:	9302      	str	r3, [sp, #8]
 80260a0:	683b      	ldr	r3, [r7, #0]
 80260a2:	9301      	str	r3, [sp, #4]
 80260a4:	687b      	ldr	r3, [r7, #4]
 80260a6:	9300      	str	r3, [sp, #0]
 80260a8:	f04f 33ff 	mov.w	r3, #4294967295
 80260ac:	2200      	movs	r2, #0
 80260ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80260b0:	68f8      	ldr	r0, [r7, #12]
 80260b2:	f7fe fab9 	bl	8024628 <lfs_dir_traverse>
 80260b6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80260b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80260ba:	2b00      	cmp	r3, #0
 80260bc:	d006      	beq.n	80260cc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80260be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80260c0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80260c4:	f000 80dc 	beq.w	8026280 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80260c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80260ca:	e134      	b.n	8026336 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80260cc:	68bb      	ldr	r3, [r7, #8]
 80260ce:	3318      	adds	r3, #24
 80260d0:	4618      	mov	r0, r3
 80260d2:	f7fd fc6c 	bl	80239ae <lfs_pair_isnull>
 80260d6:	4603      	mov	r3, r0
 80260d8:	f083 0301 	eor.w	r3, r3, #1
 80260dc:	b2db      	uxtb	r3, r3
 80260de:	2b00      	cmp	r3, #0
 80260e0:	d022      	beq.n	8026128 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80260e2:	68bb      	ldr	r3, [r7, #8]
 80260e4:	3318      	adds	r3, #24
 80260e6:	4618      	mov	r0, r3
 80260e8:	f7fd fced 	bl	8023ac6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80260ec:	68bb      	ldr	r3, [r7, #8]
 80260ee:	7ddb      	ldrb	r3, [r3, #23]
 80260f0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80260f4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80260f6:	4a94      	ldr	r2, [pc, #592]	; (8026348 <lfs_dir_compact+0x3d0>)
 80260f8:	431a      	orrs	r2, r3
                        dir->tail);
 80260fa:	68bb      	ldr	r3, [r7, #8]
 80260fc:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80260fe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026102:	68f8      	ldr	r0, [r7, #12]
 8026104:	f7ff fc20 	bl	8025948 <lfs_dir_commitattr>
 8026108:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 802610a:	68bb      	ldr	r3, [r7, #8]
 802610c:	3318      	adds	r3, #24
 802610e:	4618      	mov	r0, r3
 8026110:	f7fd fcbf 	bl	8023a92 <lfs_pair_fromle32>
                if (err) {
 8026114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026116:	2b00      	cmp	r3, #0
 8026118:	d006      	beq.n	8026128 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802611a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802611c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026120:	f000 80b0 	beq.w	8026284 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8026124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026126:	e106      	b.n	8026336 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8026128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802612c:	2200      	movs	r2, #0
 802612e:	601a      	str	r2, [r3, #0]
 8026130:	605a      	str	r2, [r3, #4]
 8026132:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026134:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8026138:	f083 0301 	eor.w	r3, r3, #1
 802613c:	b2db      	uxtb	r3, r3
 802613e:	2b00      	cmp	r3, #0
 8026140:	d011      	beq.n	8026166 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8026142:	68fb      	ldr	r3, [r7, #12]
 8026144:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802614c:	4611      	mov	r1, r2
 802614e:	4618      	mov	r0, r3
 8026150:	f7fd fd5f 	bl	8023c12 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8026154:	68fb      	ldr	r3, [r7, #12]
 8026156:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802615a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802615e:	4611      	mov	r1, r2
 8026160:	4618      	mov	r0, r3
 8026162:	f7fd fd56 	bl	8023c12 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8026166:	68fb      	ldr	r3, [r7, #12]
 8026168:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802616c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026170:	4611      	mov	r1, r2
 8026172:	4618      	mov	r0, r3
 8026174:	f7fd fd4d 	bl	8023c12 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802617a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802617e:	f023 0303 	bic.w	r3, r3, #3
 8026182:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026188:	461a      	mov	r2, r3
 802618a:	68b9      	ldr	r1, [r7, #8]
 802618c:	68f8      	ldr	r0, [r7, #12]
 802618e:	f7ff f9b5 	bl	80254fc <lfs_dir_getgstate>
 8026192:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026196:	2b00      	cmp	r3, #0
 8026198:	d001      	beq.n	802619e <lfs_dir_compact+0x226>
                return err;
 802619a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802619c:	e0cb      	b.n	8026336 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 802619e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80261a2:	4618      	mov	r0, r3
 80261a4:	f7fd fd5a 	bl	8023c5c <lfs_gstate_iszero>
 80261a8:	4603      	mov	r3, r0
 80261aa:	f083 0301 	eor.w	r3, r3, #1
 80261ae:	b2db      	uxtb	r3, r3
 80261b0:	2b00      	cmp	r3, #0
 80261b2:	d016      	beq.n	80261e2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80261b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80261b8:	4618      	mov	r0, r3
 80261ba:	f7fd fde1 	bl	8023d80 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80261be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80261c2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80261c6:	4a61      	ldr	r2, [pc, #388]	; (802634c <lfs_dir_compact+0x3d4>)
 80261c8:	68f8      	ldr	r0, [r7, #12]
 80261ca:	f7ff fbbd 	bl	8025948 <lfs_dir_commitattr>
 80261ce:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80261d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80261d2:	2b00      	cmp	r3, #0
 80261d4:	d005      	beq.n	80261e2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80261d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80261d8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80261dc:	d054      	beq.n	8026288 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80261de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80261e0:	e0a9      	b.n	8026336 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80261e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80261e6:	4619      	mov	r1, r3
 80261e8:	68f8      	ldr	r0, [r7, #12]
 80261ea:	f7ff fc2d 	bl	8025a48 <lfs_dir_commitcrc>
 80261ee:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80261f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80261f2:	2b00      	cmp	r3, #0
 80261f4:	d005      	beq.n	8026202 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80261f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80261f8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80261fc:	d046      	beq.n	802628c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80261fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026200:	e099      	b.n	8026336 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026204:	68fa      	ldr	r2, [r7, #12]
 8026206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026208:	6992      	ldr	r2, [r2, #24]
 802620a:	fbb3 f1f2 	udiv	r1, r3, r2
 802620e:	fb01 f202 	mul.w	r2, r1, r2
 8026212:	1a9b      	subs	r3, r3, r2
 8026214:	2b00      	cmp	r3, #0
 8026216:	d006      	beq.n	8026226 <lfs_dir_compact+0x2ae>
 8026218:	4b4d      	ldr	r3, [pc, #308]	; (8026350 <lfs_dir_compact+0x3d8>)
 802621a:	4a4e      	ldr	r2, [pc, #312]	; (8026354 <lfs_dir_compact+0x3dc>)
 802621c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8026220:	484d      	ldr	r0, [pc, #308]	; (8026358 <lfs_dir_compact+0x3e0>)
 8026222:	f005 fed9 	bl	802bfd8 <__assert_func>
            lfs_pair_swap(dir->pair);
 8026226:	68bb      	ldr	r3, [r7, #8]
 8026228:	4618      	mov	r0, r3
 802622a:	f7fd fbab 	bl	8023984 <lfs_pair_swap>
            dir->count = end - begin;
 802622e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8026232:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026236:	1ad3      	subs	r3, r2, r3
 8026238:	b29a      	uxth	r2, r3
 802623a:	68bb      	ldr	r3, [r7, #8]
 802623c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 802623e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026240:	68bb      	ldr	r3, [r7, #8]
 8026242:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8026244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026246:	68bb      	ldr	r3, [r7, #8]
 8026248:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 802624a:	68fb      	ldr	r3, [r7, #12]
 802624c:	3348      	adds	r3, #72	; 0x48
 802624e:	2200      	movs	r2, #0
 8026250:	601a      	str	r2, [r3, #0]
 8026252:	605a      	str	r2, [r3, #4]
 8026254:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026256:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802625a:	f083 0301 	eor.w	r3, r3, #1
 802625e:	b2db      	uxtb	r3, r3
 8026260:	2b00      	cmp	r3, #0
 8026262:	d065      	beq.n	8026330 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8026264:	68fb      	ldr	r3, [r7, #12]
 8026266:	68fa      	ldr	r2, [r7, #12]
 8026268:	333c      	adds	r3, #60	; 0x3c
 802626a:	3230      	adds	r2, #48	; 0x30
 802626c:	ca07      	ldmia	r2, {r0, r1, r2}
 802626e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8026272:	e05d      	b.n	8026330 <lfs_dir_compact+0x3b8>
        goto relocate;
 8026274:	bf00      	nop
 8026276:	e00a      	b.n	802628e <lfs_dir_compact+0x316>
                    goto relocate;
 8026278:	bf00      	nop
 802627a:	e008      	b.n	802628e <lfs_dir_compact+0x316>
                    goto relocate;
 802627c:	bf00      	nop
 802627e:	e006      	b.n	802628e <lfs_dir_compact+0x316>
                    goto relocate;
 8026280:	bf00      	nop
 8026282:	e004      	b.n	802628e <lfs_dir_compact+0x316>
                        goto relocate;
 8026284:	bf00      	nop
 8026286:	e002      	b.n	802628e <lfs_dir_compact+0x316>
                        goto relocate;
 8026288:	bf00      	nop
 802628a:	e000      	b.n	802628e <lfs_dir_compact+0x316>
                    goto relocate;
 802628c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 802628e:	2301      	movs	r3, #1
 8026290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8026294:	68fb      	ldr	r3, [r7, #12]
 8026296:	3310      	adds	r3, #16
 8026298:	4619      	mov	r1, r3
 802629a:	68f8      	ldr	r0, [r7, #12]
 802629c:	f7fd f828 	bl	80232f0 <lfs_cache_drop>
        if (!tired) {
 80262a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80262a4:	f083 0301 	eor.w	r3, r3, #1
 80262a8:	b2db      	uxtb	r3, r3
 80262aa:	2b00      	cmp	r3, #0
 80262ac:	d009      	beq.n	80262c2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80262ae:	68bb      	ldr	r3, [r7, #8]
 80262b0:	685b      	ldr	r3, [r3, #4]
 80262b2:	4a2a      	ldr	r2, [pc, #168]	; (802635c <lfs_dir_compact+0x3e4>)
 80262b4:	9200      	str	r2, [sp, #0]
 80262b6:	f240 725a 	movw	r2, #1882	; 0x75a
 80262ba:	4927      	ldr	r1, [pc, #156]	; (8026358 <lfs_dir_compact+0x3e0>)
 80262bc:	4828      	ldr	r0, [pc, #160]	; (8026360 <lfs_dir_compact+0x3e8>)
 80262be:	f006 fec5 	bl	802d04c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80262c2:	68bb      	ldr	r3, [r7, #8]
 80262c4:	2200      	movs	r2, #0
 80262c6:	617a      	str	r2, [r7, #20]
 80262c8:	2201      	movs	r2, #1
 80262ca:	61ba      	str	r2, [r7, #24]
 80262cc:	f107 0214 	add.w	r2, r7, #20
 80262d0:	4611      	mov	r1, r2
 80262d2:	4618      	mov	r0, r3
 80262d4:	f7fd fb86 	bl	80239e4 <lfs_pair_cmp>
 80262d8:	4603      	mov	r3, r0
 80262da:	2b00      	cmp	r3, #0
 80262dc:	d10c      	bne.n	80262f8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80262de:	68bb      	ldr	r3, [r7, #8]
 80262e0:	685b      	ldr	r3, [r3, #4]
 80262e2:	4a1e      	ldr	r2, [pc, #120]	; (802635c <lfs_dir_compact+0x3e4>)
 80262e4:	9200      	str	r2, [sp, #0]
 80262e6:	f240 725f 	movw	r2, #1887	; 0x75f
 80262ea:	491b      	ldr	r1, [pc, #108]	; (8026358 <lfs_dir_compact+0x3e0>)
 80262ec:	481d      	ldr	r0, [pc, #116]	; (8026364 <lfs_dir_compact+0x3ec>)
 80262ee:	f006 fead 	bl	802d04c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80262f2:	f06f 031b 	mvn.w	r3, #27
 80262f6:	e01e      	b.n	8026336 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80262f8:	68bb      	ldr	r3, [r7, #8]
 80262fa:	3304      	adds	r3, #4
 80262fc:	4619      	mov	r1, r3
 80262fe:	68f8      	ldr	r0, [r7, #12]
 8026300:	f7fd fea6 	bl	8024050 <lfs_alloc>
 8026304:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8026306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026308:	2b00      	cmp	r3, #0
 802630a:	d00c      	beq.n	8026326 <lfs_dir_compact+0x3ae>
 802630c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802630e:	f113 0f1c 	cmn.w	r3, #28
 8026312:	d106      	bne.n	8026322 <lfs_dir_compact+0x3aa>
 8026314:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026318:	f083 0301 	eor.w	r3, r3, #1
 802631c:	b2db      	uxtb	r3, r3
 802631e:	2b00      	cmp	r3, #0
 8026320:	d001      	beq.n	8026326 <lfs_dir_compact+0x3ae>
            return err;
 8026322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026324:	e007      	b.n	8026336 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8026326:	2300      	movs	r3, #0
 8026328:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 802632c:	bf00      	nop
    while (true) {
 802632e:	e64c      	b.n	8025fca <lfs_dir_compact+0x52>
        break;
 8026330:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8026332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8026336:	4618      	mov	r0, r3
 8026338:	3768      	adds	r7, #104	; 0x68
 802633a:	46bd      	mov	sp, r7
 802633c:	bd80      	pop	{r7, pc}
 802633e:	bf00      	nop
 8026340:	08025f01 	.word	0x08025f01
 8026344:	400ffc00 	.word	0x400ffc00
 8026348:	000ffc08 	.word	0x000ffc08
 802634c:	7ffffc0c 	.word	0x7ffffc0c
 8026350:	080330ac 	.word	0x080330ac
 8026354:	08034204 	.word	0x08034204
 8026358:	08032f40 	.word	0x08032f40
 802635c:	08033054 	.word	0x08033054
 8026360:	080330d4 	.word	0x080330d4
 8026364:	080330f8 	.word	0x080330f8

08026368 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026368:	b590      	push	{r4, r7, lr}
 802636a:	b097      	sub	sp, #92	; 0x5c
 802636c:	af0a      	add	r7, sp, #40	; 0x28
 802636e:	60f8      	str	r0, [r7, #12]
 8026370:	60b9      	str	r1, [r7, #8]
 8026372:	607a      	str	r2, [r7, #4]
 8026374:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8026376:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802637a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 802637c:	e058      	b.n	8026430 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 802637e:	2300      	movs	r3, #0
 8026380:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8026382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026384:	b29b      	uxth	r3, r3
 8026386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026388:	b292      	uxth	r2, r2
 802638a:	4252      	negs	r2, r2
 802638c:	b292      	uxth	r2, r2
 802638e:	b212      	sxth	r2, r2
 8026390:	f107 0118 	add.w	r1, r7, #24
 8026394:	9108      	str	r1, [sp, #32]
 8026396:	4979      	ldr	r1, [pc, #484]	; (802657c <lfs_dir_splittingcompact+0x214>)
 8026398:	9107      	str	r1, [sp, #28]
 802639a:	9206      	str	r2, [sp, #24]
 802639c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80263a0:	9205      	str	r2, [sp, #20]
 80263a2:	9304      	str	r3, [sp, #16]
 80263a4:	2300      	movs	r3, #0
 80263a6:	9303      	str	r3, [sp, #12]
 80263a8:	4b75      	ldr	r3, [pc, #468]	; (8026580 <lfs_dir_splittingcompact+0x218>)
 80263aa:	9302      	str	r3, [sp, #8]
 80263ac:	683b      	ldr	r3, [r7, #0]
 80263ae:	9301      	str	r3, [sp, #4]
 80263b0:	687b      	ldr	r3, [r7, #4]
 80263b2:	9300      	str	r3, [sp, #0]
 80263b4:	f04f 33ff 	mov.w	r3, #4294967295
 80263b8:	2200      	movs	r2, #0
 80263ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80263bc:	68f8      	ldr	r0, [r7, #12]
 80263be:	f7fe f933 	bl	8024628 <lfs_dir_traverse>
 80263c2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80263c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263c6:	2b00      	cmp	r3, #0
 80263c8:	d001      	beq.n	80263ce <lfs_dir_splittingcompact+0x66>
                return err;
 80263ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263cc:	e0d1      	b.n	8026572 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 80263ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80263d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80263d4:	1ad3      	subs	r3, r2, r3
 80263d6:	2bfe      	cmp	r3, #254	; 0xfe
 80263d8:	d822      	bhi.n	8026420 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80263da:	68fb      	ldr	r3, [r7, #12]
 80263dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80263de:	69db      	ldr	r3, [r3, #28]
 80263e0:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80263e4:	68fb      	ldr	r3, [r7, #12]
 80263e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80263e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80263ea:	2b00      	cmp	r3, #0
 80263ec:	d004      	beq.n	80263f8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80263f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80263f4:	085b      	lsrs	r3, r3, #1
 80263f6:	e003      	b.n	8026400 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80263f8:	68fb      	ldr	r3, [r7, #12]
 80263fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80263fc:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80263fe:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8026400:	68fa      	ldr	r2, [r7, #12]
 8026402:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026404:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026406:	4611      	mov	r1, r2
 8026408:	4618      	mov	r0, r3
 802640a:	f7fc fee0 	bl	80231ce <lfs_alignup>
 802640e:	4603      	mov	r3, r0
 8026410:	4619      	mov	r1, r3
 8026412:	4620      	mov	r0, r4
 8026414:	f7fc feb6 	bl	8023184 <lfs_min>
 8026418:	4602      	mov	r2, r0
 802641a:	69bb      	ldr	r3, [r7, #24]
 802641c:	429a      	cmp	r2, r3
 802641e:	d20e      	bcs.n	802643e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8026420:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026426:	1ad3      	subs	r3, r2, r3
 8026428:	085b      	lsrs	r3, r3, #1
 802642a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802642c:	4413      	add	r3, r2
 802642e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026430:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026436:	1ad3      	subs	r3, r2, r3
 8026438:	2b01      	cmp	r3, #1
 802643a:	d8a0      	bhi.n	802637e <lfs_dir_splittingcompact+0x16>
 802643c:	e000      	b.n	8026440 <lfs_dir_splittingcompact+0xd8>
                break;
 802643e:	bf00      	nop
        }

        if (split == begin) {
 8026440:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026446:	429a      	cmp	r2, r3
 8026448:	d02d      	beq.n	80264a6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 802644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802644c:	b29b      	uxth	r3, r3
 802644e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026452:	9202      	str	r2, [sp, #8]
 8026454:	9301      	str	r3, [sp, #4]
 8026456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026458:	9300      	str	r3, [sp, #0]
 802645a:	683b      	ldr	r3, [r7, #0]
 802645c:	687a      	ldr	r2, [r7, #4]
 802645e:	68b9      	ldr	r1, [r7, #8]
 8026460:	68f8      	ldr	r0, [r7, #12]
 8026462:	f7ff fce3 	bl	8025e2c <lfs_dir_split>
 8026466:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8026468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802646a:	2b00      	cmp	r3, #0
 802646c:	d005      	beq.n	802647a <lfs_dir_splittingcompact+0x112>
 802646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026470:	f113 0f1c 	cmn.w	r3, #28
 8026474:	d001      	beq.n	802647a <lfs_dir_splittingcompact+0x112>
            return err;
 8026476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026478:	e07b      	b.n	8026572 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 802647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802647c:	2b00      	cmp	r3, #0
 802647e:	d00e      	beq.n	802649e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8026480:	68bb      	ldr	r3, [r7, #8]
 8026482:	681a      	ldr	r2, [r3, #0]
 8026484:	68bb      	ldr	r3, [r7, #8]
 8026486:	685b      	ldr	r3, [r3, #4]
 8026488:	493e      	ldr	r1, [pc, #248]	; (8026584 <lfs_dir_splittingcompact+0x21c>)
 802648a:	9101      	str	r1, [sp, #4]
 802648c:	9300      	str	r3, [sp, #0]
 802648e:	4613      	mov	r3, r2
 8026490:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8026494:	493c      	ldr	r1, [pc, #240]	; (8026588 <lfs_dir_splittingcompact+0x220>)
 8026496:	483d      	ldr	r0, [pc, #244]	; (802658c <lfs_dir_splittingcompact+0x224>)
 8026498:	f006 fdd8 	bl	802d04c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 802649c:	e004      	b.n	80264a8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 802649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 80264a4:	e767      	b.n	8026376 <lfs_dir_splittingcompact+0xe>
            break;
 80264a6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80264a8:	68b9      	ldr	r1, [r7, #8]
 80264aa:	68f8      	ldr	r0, [r7, #12]
 80264ac:	f7ff fd3d 	bl	8025f2a <lfs_dir_needsrelocation>
 80264b0:	4603      	mov	r3, r0
 80264b2:	2b00      	cmp	r3, #0
 80264b4:	d04e      	beq.n	8026554 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80264b6:	68bb      	ldr	r3, [r7, #8]
 80264b8:	2200      	movs	r2, #0
 80264ba:	613a      	str	r2, [r7, #16]
 80264bc:	2201      	movs	r2, #1
 80264be:	617a      	str	r2, [r7, #20]
 80264c0:	f107 0210 	add.w	r2, r7, #16
 80264c4:	4611      	mov	r1, r2
 80264c6:	4618      	mov	r0, r3
 80264c8:	f7fd fa8c 	bl	80239e4 <lfs_pair_cmp>
 80264cc:	4603      	mov	r3, r0
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	d140      	bne.n	8026554 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80264d2:	68f8      	ldr	r0, [r7, #12]
 80264d4:	f003 fe4c 	bl	802a170 <lfs_fs_rawsize>
 80264d8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80264da:	6a3b      	ldr	r3, [r7, #32]
 80264dc:	2b00      	cmp	r3, #0
 80264de:	da01      	bge.n	80264e4 <lfs_dir_splittingcompact+0x17c>
            return size;
 80264e0:	6a3b      	ldr	r3, [r7, #32]
 80264e2:	e046      	b.n	8026572 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80264e4:	68fb      	ldr	r3, [r7, #12]
 80264e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80264e8:	6a1b      	ldr	r3, [r3, #32]
 80264ea:	085a      	lsrs	r2, r3, #1
 80264ec:	6a3b      	ldr	r3, [r7, #32]
 80264ee:	429a      	cmp	r2, r3
 80264f0:	d930      	bls.n	8026554 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80264f2:	68bb      	ldr	r3, [r7, #8]
 80264f4:	689b      	ldr	r3, [r3, #8]
 80264f6:	4a23      	ldr	r2, [pc, #140]	; (8026584 <lfs_dir_splittingcompact+0x21c>)
 80264f8:	9200      	str	r2, [sp, #0]
 80264fa:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80264fe:	4922      	ldr	r1, [pc, #136]	; (8026588 <lfs_dir_splittingcompact+0x220>)
 8026500:	4823      	ldr	r0, [pc, #140]	; (8026590 <lfs_dir_splittingcompact+0x228>)
 8026502:	f006 fda3 	bl	802d04c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026506:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802650a:	9302      	str	r3, [sp, #8]
 802650c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026510:	9301      	str	r3, [sp, #4]
 8026512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026514:	9300      	str	r3, [sp, #0]
 8026516:	683b      	ldr	r3, [r7, #0]
 8026518:	687a      	ldr	r2, [r7, #4]
 802651a:	68b9      	ldr	r1, [r7, #8]
 802651c:	68f8      	ldr	r0, [r7, #12]
 802651e:	f7ff fc85 	bl	8025e2c <lfs_dir_split>
 8026522:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026524:	69fb      	ldr	r3, [r7, #28]
 8026526:	2b00      	cmp	r3, #0
 8026528:	d005      	beq.n	8026536 <lfs_dir_splittingcompact+0x1ce>
 802652a:	69fb      	ldr	r3, [r7, #28]
 802652c:	f113 0f1c 	cmn.w	r3, #28
 8026530:	d001      	beq.n	8026536 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026532:	69fb      	ldr	r3, [r7, #28]
 8026534:	e01d      	b.n	8026572 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026536:	69fb      	ldr	r3, [r7, #28]
 8026538:	2b00      	cmp	r3, #0
 802653a:	d007      	beq.n	802654c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 802653c:	4b11      	ldr	r3, [pc, #68]	; (8026584 <lfs_dir_splittingcompact+0x21c>)
 802653e:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8026542:	4911      	ldr	r1, [pc, #68]	; (8026588 <lfs_dir_splittingcompact+0x220>)
 8026544:	4813      	ldr	r0, [pc, #76]	; (8026594 <lfs_dir_splittingcompact+0x22c>)
 8026546:	f006 fd81 	bl	802d04c <iprintf>
 802654a:	e003      	b.n	8026554 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 802654c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026550:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8026554:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026558:	9302      	str	r3, [sp, #8]
 802655a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802655e:	9301      	str	r3, [sp, #4]
 8026560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026562:	9300      	str	r3, [sp, #0]
 8026564:	683b      	ldr	r3, [r7, #0]
 8026566:	687a      	ldr	r2, [r7, #4]
 8026568:	68b9      	ldr	r1, [r7, #8]
 802656a:	68f8      	ldr	r0, [r7, #12]
 802656c:	f7ff fd04 	bl	8025f78 <lfs_dir_compact>
 8026570:	4603      	mov	r3, r0
}
 8026572:	4618      	mov	r0, r3
 8026574:	3734      	adds	r7, #52	; 0x34
 8026576:	46bd      	mov	sp, r7
 8026578:	bd90      	pop	{r4, r7, pc}
 802657a:	bf00      	nop
 802657c:	08025ed5 	.word	0x08025ed5
 8026580:	400ffc00 	.word	0x400ffc00
 8026584:	08033054 	.word	0x08033054
 8026588:	08032f40 	.word	0x08032f40
 802658c:	08033130 	.word	0x08033130
 8026590:	08033160 	.word	0x08033160
 8026594:	08033190 	.word	0x08033190

08026598 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8026598:	b5b0      	push	{r4, r5, r7, lr}
 802659a:	b0a6      	sub	sp, #152	; 0x98
 802659c:	af0a      	add	r7, sp, #40	; 0x28
 802659e:	60f8      	str	r0, [r7, #12]
 80265a0:	60b9      	str	r1, [r7, #8]
 80265a2:	607a      	str	r2, [r7, #4]
 80265a4:	603b      	str	r3, [r7, #0]
    int state = 0;
 80265a6:	2300      	movs	r3, #0
 80265a8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80265aa:	2300      	movs	r3, #0
 80265ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 80265b0:	2300      	movs	r3, #0
 80265b2:	667b      	str	r3, [r7, #100]	; 0x64
 80265b4:	e06d      	b.n	8026692 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80265b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80265b8:	00db      	lsls	r3, r3, #3
 80265ba:	683a      	ldr	r2, [r7, #0]
 80265bc:	4413      	add	r3, r2
 80265be:	681b      	ldr	r3, [r3, #0]
 80265c0:	4618      	mov	r0, r3
 80265c2:	f7fd facb 	bl	8023b5c <lfs_tag_type3>
 80265c6:	4603      	mov	r3, r0
 80265c8:	461a      	mov	r2, r3
 80265ca:	f240 4301 	movw	r3, #1025	; 0x401
 80265ce:	429a      	cmp	r2, r3
 80265d0:	d106      	bne.n	80265e0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80265d2:	68bb      	ldr	r3, [r7, #8]
 80265d4:	8a9b      	ldrh	r3, [r3, #20]
 80265d6:	3301      	adds	r3, #1
 80265d8:	b29a      	uxth	r2, r3
 80265da:	68bb      	ldr	r3, [r7, #8]
 80265dc:	829a      	strh	r2, [r3, #20]
 80265de:	e055      	b.n	802668c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80265e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80265e2:	00db      	lsls	r3, r3, #3
 80265e4:	683a      	ldr	r2, [r7, #0]
 80265e6:	4413      	add	r3, r2
 80265e8:	681b      	ldr	r3, [r3, #0]
 80265ea:	4618      	mov	r0, r3
 80265ec:	f7fd fab6 	bl	8023b5c <lfs_tag_type3>
 80265f0:	4603      	mov	r3, r0
 80265f2:	461a      	mov	r2, r3
 80265f4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80265f8:	429a      	cmp	r2, r3
 80265fa:	d114      	bne.n	8026626 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80265fc:	68bb      	ldr	r3, [r7, #8]
 80265fe:	8a9b      	ldrh	r3, [r3, #20]
 8026600:	2b00      	cmp	r3, #0
 8026602:	d106      	bne.n	8026612 <lfs_dir_relocatingcommit+0x7a>
 8026604:	4ba4      	ldr	r3, [pc, #656]	; (8026898 <lfs_dir_relocatingcommit+0x300>)
 8026606:	4aa5      	ldr	r2, [pc, #660]	; (802689c <lfs_dir_relocatingcommit+0x304>)
 8026608:	f240 71df 	movw	r1, #2015	; 0x7df
 802660c:	48a4      	ldr	r0, [pc, #656]	; (80268a0 <lfs_dir_relocatingcommit+0x308>)
 802660e:	f005 fce3 	bl	802bfd8 <__assert_func>
            dir->count -= 1;
 8026612:	68bb      	ldr	r3, [r7, #8]
 8026614:	8a9b      	ldrh	r3, [r3, #20]
 8026616:	3b01      	subs	r3, #1
 8026618:	b29a      	uxth	r2, r3
 802661a:	68bb      	ldr	r3, [r7, #8]
 802661c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 802661e:	2301      	movs	r3, #1
 8026620:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8026624:	e032      	b.n	802668c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026628:	00db      	lsls	r3, r3, #3
 802662a:	683a      	ldr	r2, [r7, #0]
 802662c:	4413      	add	r3, r2
 802662e:	681b      	ldr	r3, [r3, #0]
 8026630:	4618      	mov	r0, r3
 8026632:	f7fd fa83 	bl	8023b3c <lfs_tag_type1>
 8026636:	4603      	mov	r3, r0
 8026638:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802663c:	d126      	bne.n	802668c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 802663e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026640:	00db      	lsls	r3, r3, #3
 8026642:	683a      	ldr	r2, [r7, #0]
 8026644:	4413      	add	r3, r2
 8026646:	685b      	ldr	r3, [r3, #4]
 8026648:	681a      	ldr	r2, [r3, #0]
 802664a:	68bb      	ldr	r3, [r7, #8]
 802664c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 802664e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026650:	00db      	lsls	r3, r3, #3
 8026652:	683a      	ldr	r2, [r7, #0]
 8026654:	4413      	add	r3, r2
 8026656:	685b      	ldr	r3, [r3, #4]
 8026658:	685a      	ldr	r2, [r3, #4]
 802665a:	68bb      	ldr	r3, [r7, #8]
 802665c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 802665e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026660:	00db      	lsls	r3, r3, #3
 8026662:	683a      	ldr	r2, [r7, #0]
 8026664:	4413      	add	r3, r2
 8026666:	681b      	ldr	r3, [r3, #0]
 8026668:	4618      	mov	r0, r3
 802666a:	f7fd fa87 	bl	8023b7c <lfs_tag_chunk>
 802666e:	4603      	mov	r3, r0
 8026670:	f003 0301 	and.w	r3, r3, #1
 8026674:	2b00      	cmp	r3, #0
 8026676:	bf14      	ite	ne
 8026678:	2301      	movne	r3, #1
 802667a:	2300      	moveq	r3, #0
 802667c:	b2da      	uxtb	r2, r3
 802667e:	68bb      	ldr	r3, [r7, #8]
 8026680:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8026682:	68bb      	ldr	r3, [r7, #8]
 8026684:	3318      	adds	r3, #24
 8026686:	4618      	mov	r0, r3
 8026688:	f7fd fa03 	bl	8023a92 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 802668c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802668e:	3301      	adds	r3, #1
 8026690:	667b      	str	r3, [r7, #100]	; 0x64
 8026692:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8026694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026698:	429a      	cmp	r2, r3
 802669a:	db8c      	blt.n	80265b6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 802669c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80266a0:	2b00      	cmp	r3, #0
 80266a2:	d02b      	beq.n	80266fc <lfs_dir_relocatingcommit+0x164>
 80266a4:	68bb      	ldr	r3, [r7, #8]
 80266a6:	8a9b      	ldrh	r3, [r3, #20]
 80266a8:	2b00      	cmp	r3, #0
 80266aa:	d127      	bne.n	80266fc <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80266ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80266b0:	2b00      	cmp	r3, #0
 80266b2:	d106      	bne.n	80266c2 <lfs_dir_relocatingcommit+0x12a>
 80266b4:	4b7b      	ldr	r3, [pc, #492]	; (80268a4 <lfs_dir_relocatingcommit+0x30c>)
 80266b6:	4a79      	ldr	r2, [pc, #484]	; (802689c <lfs_dir_relocatingcommit+0x304>)
 80266b8:	f240 71ec 	movw	r1, #2028	; 0x7ec
 80266bc:	4878      	ldr	r0, [pc, #480]	; (80268a0 <lfs_dir_relocatingcommit+0x308>)
 80266be:	f005 fc8b 	bl	802bfd8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80266c2:	68bb      	ldr	r3, [r7, #8]
 80266c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80266c8:	4619      	mov	r1, r3
 80266ca:	68f8      	ldr	r0, [r7, #12]
 80266cc:	f003 f9c2 	bl	8029a54 <lfs_fs_pred>
 80266d0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80266d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80266d4:	2b00      	cmp	r3, #0
 80266d6:	d005      	beq.n	80266e4 <lfs_dir_relocatingcommit+0x14c>
 80266d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80266da:	f113 0f02 	cmn.w	r3, #2
 80266de:	d001      	beq.n	80266e4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80266e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80266e2:	e204      	b.n	8026aee <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80266e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80266e6:	f113 0f02 	cmn.w	r3, #2
 80266ea:	d007      	beq.n	80266fc <lfs_dir_relocatingcommit+0x164>
 80266ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80266f0:	7ddb      	ldrb	r3, [r3, #23]
 80266f2:	2b00      	cmp	r3, #0
 80266f4:	d002      	beq.n	80266fc <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80266f6:	2302      	movs	r3, #2
 80266f8:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 80266fa:	e121      	b.n	8026940 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80266fc:	68bb      	ldr	r3, [r7, #8]
 80266fe:	7d9b      	ldrb	r3, [r3, #22]
 8026700:	2b00      	cmp	r3, #0
 8026702:	f000 80fb 	beq.w	80268fc <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026706:	68bb      	ldr	r3, [r7, #8]
 8026708:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 802670a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 802670c:	68bb      	ldr	r3, [r7, #8]
 802670e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026710:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8026712:	68bb      	ldr	r3, [r7, #8]
 8026714:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026716:	63bb      	str	r3, [r7, #56]	; 0x38
 8026718:	f04f 33ff 	mov.w	r3, #4294967295
 802671c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 802671e:	68bb      	ldr	r3, [r7, #8]
 8026720:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026722:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8026724:	68fb      	ldr	r3, [r7, #12]
 8026726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802672a:	2b00      	cmp	r3, #0
 802672c:	d004      	beq.n	8026738 <lfs_dir_relocatingcommit+0x1a0>
 802672e:	68fb      	ldr	r3, [r7, #12]
 8026730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026734:	3b08      	subs	r3, #8
 8026736:	e003      	b.n	8026740 <lfs_dir_relocatingcommit+0x1a8>
 8026738:	68fb      	ldr	r3, [r7, #12]
 802673a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802673c:	69db      	ldr	r3, [r3, #28]
 802673e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026740:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026742:	68bb      	ldr	r3, [r7, #8]
 8026744:	3318      	adds	r3, #24
 8026746:	4618      	mov	r0, r3
 8026748:	f7fd f9bd 	bl	8023ac6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 802674c:	68bb      	ldr	r3, [r7, #8]
 802674e:	68da      	ldr	r2, [r3, #12]
 8026750:	68bb      	ldr	r3, [r7, #8]
 8026752:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026754:	68fb      	ldr	r3, [r7, #12]
 8026756:	62bb      	str	r3, [r7, #40]	; 0x28
 8026758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802675c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 802675e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026762:	9308      	str	r3, [sp, #32]
 8026764:	4b50      	ldr	r3, [pc, #320]	; (80268a8 <lfs_dir_relocatingcommit+0x310>)
 8026766:	9307      	str	r3, [sp, #28]
 8026768:	2300      	movs	r3, #0
 802676a:	9306      	str	r3, [sp, #24]
 802676c:	2300      	movs	r3, #0
 802676e:	9305      	str	r3, [sp, #20]
 8026770:	2300      	movs	r3, #0
 8026772:	9304      	str	r3, [sp, #16]
 8026774:	2300      	movs	r3, #0
 8026776:	9303      	str	r3, [sp, #12]
 8026778:	2300      	movs	r3, #0
 802677a:	9302      	str	r3, [sp, #8]
 802677c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026780:	9301      	str	r3, [sp, #4]
 8026782:	683b      	ldr	r3, [r7, #0]
 8026784:	9300      	str	r3, [sp, #0]
 8026786:	460b      	mov	r3, r1
 8026788:	68b9      	ldr	r1, [r7, #8]
 802678a:	68f8      	ldr	r0, [r7, #12]
 802678c:	f7fd ff4c 	bl	8024628 <lfs_dir_traverse>
 8026790:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026792:	68bb      	ldr	r3, [r7, #8]
 8026794:	3318      	adds	r3, #24
 8026796:	4618      	mov	r0, r3
 8026798:	f7fd f97b 	bl	8023a92 <lfs_pair_fromle32>
        if (err) {
 802679c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802679e:	2b00      	cmp	r3, #0
 80267a0:	d00b      	beq.n	80267ba <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80267a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80267a4:	f113 0f1c 	cmn.w	r3, #28
 80267a8:	f000 80aa 	beq.w	8026900 <lfs_dir_relocatingcommit+0x368>
 80267ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80267ae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80267b2:	f000 80a5 	beq.w	8026900 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80267b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80267b8:	e199      	b.n	8026aee <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80267ba:	f107 031c 	add.w	r3, r7, #28
 80267be:	2200      	movs	r2, #0
 80267c0:	601a      	str	r2, [r3, #0]
 80267c2:	605a      	str	r2, [r3, #4]
 80267c4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80267c6:	68fb      	ldr	r3, [r7, #12]
 80267c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80267cc:	f107 031c 	add.w	r3, r7, #28
 80267d0:	4611      	mov	r1, r2
 80267d2:	4618      	mov	r0, r3
 80267d4:	f7fd fa1d 	bl	8023c12 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80267d8:	68fb      	ldr	r3, [r7, #12]
 80267da:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80267de:	f107 031c 	add.w	r3, r7, #28
 80267e2:	4611      	mov	r1, r2
 80267e4:	4618      	mov	r0, r3
 80267e6:	f7fd fa14 	bl	8023c12 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80267ea:	68fb      	ldr	r3, [r7, #12]
 80267ec:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80267f0:	f107 031c 	add.w	r3, r7, #28
 80267f4:	4611      	mov	r1, r2
 80267f6:	4618      	mov	r0, r3
 80267f8:	f7fd fa0b 	bl	8023c12 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80267fc:	69fb      	ldr	r3, [r7, #28]
 80267fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026802:	f023 0303 	bic.w	r3, r3, #3
 8026806:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8026808:	f107 031c 	add.w	r3, r7, #28
 802680c:	4618      	mov	r0, r3
 802680e:	f7fd fa25 	bl	8023c5c <lfs_gstate_iszero>
 8026812:	4603      	mov	r3, r0
 8026814:	f083 0301 	eor.w	r3, r3, #1
 8026818:	b2db      	uxtb	r3, r3
 802681a:	2b00      	cmp	r3, #0
 802681c:	d027      	beq.n	802686e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 802681e:	f107 031c 	add.w	r3, r7, #28
 8026822:	461a      	mov	r2, r3
 8026824:	68b9      	ldr	r1, [r7, #8]
 8026826:	68f8      	ldr	r0, [r7, #12]
 8026828:	f7fe fe68 	bl	80254fc <lfs_dir_getgstate>
 802682c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 802682e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026830:	2b00      	cmp	r3, #0
 8026832:	d001      	beq.n	8026838 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8026834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026836:	e15a      	b.n	8026aee <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8026838:	f107 031c 	add.w	r3, r7, #28
 802683c:	4618      	mov	r0, r3
 802683e:	f7fd fa9f 	bl	8023d80 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8026842:	f107 031c 	add.w	r3, r7, #28
 8026846:	f107 0130 	add.w	r1, r7, #48	; 0x30
 802684a:	4a18      	ldr	r2, [pc, #96]	; (80268ac <lfs_dir_relocatingcommit+0x314>)
 802684c:	68f8      	ldr	r0, [r7, #12]
 802684e:	f7ff f87b 	bl	8025948 <lfs_dir_commitattr>
 8026852:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8026854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026856:	2b00      	cmp	r3, #0
 8026858:	d009      	beq.n	802686e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 802685a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802685c:	f113 0f1c 	cmn.w	r3, #28
 8026860:	d050      	beq.n	8026904 <lfs_dir_relocatingcommit+0x36c>
 8026862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026864:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026868:	d04c      	beq.n	8026904 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 802686a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802686c:	e13f      	b.n	8026aee <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 802686e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026872:	4619      	mov	r1, r3
 8026874:	68f8      	ldr	r0, [r7, #12]
 8026876:	f7ff f8e7 	bl	8025a48 <lfs_dir_commitcrc>
 802687a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 802687c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802687e:	2b00      	cmp	r3, #0
 8026880:	d016      	beq.n	80268b0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026884:	f113 0f1c 	cmn.w	r3, #28
 8026888:	d03e      	beq.n	8026908 <lfs_dir_relocatingcommit+0x370>
 802688a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802688c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026890:	d03a      	beq.n	8026908 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8026892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026894:	e12b      	b.n	8026aee <lfs_dir_relocatingcommit+0x556>
 8026896:	bf00      	nop
 8026898:	080331bc 	.word	0x080331bc
 802689c:	08034214 	.word	0x08034214
 80268a0:	08032f40 	.word	0x08032f40
 80268a4:	080331cc 	.word	0x080331cc
 80268a8:	08025f01 	.word	0x08025f01
 80268ac:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80268b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80268b2:	68fa      	ldr	r2, [r7, #12]
 80268b4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80268b6:	6992      	ldr	r2, [r2, #24]
 80268b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80268bc:	fb01 f202 	mul.w	r2, r1, r2
 80268c0:	1a9b      	subs	r3, r3, r2
 80268c2:	2b00      	cmp	r3, #0
 80268c4:	d006      	beq.n	80268d4 <lfs_dir_relocatingcommit+0x33c>
 80268c6:	4b8c      	ldr	r3, [pc, #560]	; (8026af8 <lfs_dir_relocatingcommit+0x560>)
 80268c8:	4a8c      	ldr	r2, [pc, #560]	; (8026afc <lfs_dir_relocatingcommit+0x564>)
 80268ca:	f640 0136 	movw	r1, #2102	; 0x836
 80268ce:	488c      	ldr	r0, [pc, #560]	; (8026b00 <lfs_dir_relocatingcommit+0x568>)
 80268d0:	f005 fb82 	bl	802bfd8 <__assert_func>
        dir->off = commit.off;
 80268d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80268d6:	68bb      	ldr	r3, [r7, #8]
 80268d8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80268da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80268dc:	68bb      	ldr	r3, [r7, #8]
 80268de:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80268e0:	68fb      	ldr	r3, [r7, #12]
 80268e2:	68fa      	ldr	r2, [r7, #12]
 80268e4:	333c      	adds	r3, #60	; 0x3c
 80268e6:	3230      	adds	r2, #48	; 0x30
 80268e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80268ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80268ee:	68fb      	ldr	r3, [r7, #12]
 80268f0:	3348      	adds	r3, #72	; 0x48
 80268f2:	2200      	movs	r2, #0
 80268f4:	601a      	str	r2, [r3, #0]
 80268f6:	605a      	str	r2, [r3, #4]
 80268f8:	609a      	str	r2, [r3, #8]
 80268fa:	e021      	b.n	8026940 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80268fc:	bf00      	nop
 80268fe:	e004      	b.n	802690a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026900:	bf00      	nop
 8026902:	e002      	b.n	802690a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8026904:	bf00      	nop
 8026906:	e000      	b.n	802690a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026908:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 802690a:	68fb      	ldr	r3, [r7, #12]
 802690c:	3310      	adds	r3, #16
 802690e:	4619      	mov	r1, r3
 8026910:	68f8      	ldr	r0, [r7, #12]
 8026912:	f7fc fced 	bl	80232f0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8026916:	68bb      	ldr	r3, [r7, #8]
 8026918:	8a9b      	ldrh	r3, [r3, #20]
 802691a:	9302      	str	r3, [sp, #8]
 802691c:	2300      	movs	r3, #0
 802691e:	9301      	str	r3, [sp, #4]
 8026920:	68bb      	ldr	r3, [r7, #8]
 8026922:	9300      	str	r3, [sp, #0]
 8026924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026928:	683a      	ldr	r2, [r7, #0]
 802692a:	68b9      	ldr	r1, [r7, #8]
 802692c:	68f8      	ldr	r0, [r7, #12]
 802692e:	f7ff fd1b 	bl	8026368 <lfs_dir_splittingcompact>
 8026932:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8026934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026936:	2b00      	cmp	r3, #0
 8026938:	da01      	bge.n	802693e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 802693a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802693c:	e0d7      	b.n	8026aee <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 802693e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	681b      	ldr	r3, [r3, #0]
 8026944:	64bb      	str	r3, [r7, #72]	; 0x48
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	3304      	adds	r3, #4
 802694a:	681b      	ldr	r3, [r3, #0]
 802694c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802694e:	68fb      	ldr	r3, [r7, #12]
 8026950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026952:	663b      	str	r3, [r7, #96]	; 0x60
 8026954:	e0c6      	b.n	8026ae4 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8026956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026958:	3308      	adds	r3, #8
 802695a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802695e:	4611      	mov	r1, r2
 8026960:	4618      	mov	r0, r3
 8026962:	f7fd f83f 	bl	80239e4 <lfs_pair_cmp>
 8026966:	4603      	mov	r3, r0
 8026968:	2b00      	cmp	r3, #0
 802696a:	f040 80b8 	bne.w	8026ade <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 802696e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026970:	68ba      	ldr	r2, [r7, #8]
 8026972:	f103 0408 	add.w	r4, r3, #8
 8026976:	4615      	mov	r5, r2
 8026978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802697a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802697c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8026984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026986:	3308      	adds	r3, #8
 8026988:	687a      	ldr	r2, [r7, #4]
 802698a:	429a      	cmp	r2, r3
 802698c:	f000 809d 	beq.w	8026aca <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8026990:	2300      	movs	r3, #0
 8026992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026994:	e07b      	b.n	8026a8e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026998:	00db      	lsls	r3, r3, #3
 802699a:	683a      	ldr	r2, [r7, #0]
 802699c:	4413      	add	r3, r2
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	4618      	mov	r0, r3
 80269a2:	f7fd f8db 	bl	8023b5c <lfs_tag_type3>
 80269a6:	4603      	mov	r3, r0
 80269a8:	461a      	mov	r2, r3
 80269aa:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80269ae:	429a      	cmp	r2, r3
 80269b0:	d115      	bne.n	80269de <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80269b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80269b4:	889c      	ldrh	r4, [r3, #4]
 80269b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80269b8:	00db      	lsls	r3, r3, #3
 80269ba:	683a      	ldr	r2, [r7, #0]
 80269bc:	4413      	add	r3, r2
 80269be:	681b      	ldr	r3, [r3, #0]
 80269c0:	4618      	mov	r0, r3
 80269c2:	f7fd f8f5 	bl	8023bb0 <lfs_tag_id>
 80269c6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80269c8:	429c      	cmp	r4, r3
 80269ca:	d108      	bne.n	80269de <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80269cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80269ce:	f04f 32ff 	mov.w	r2, #4294967295
 80269d2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80269d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80269d6:	f04f 32ff 	mov.w	r2, #4294967295
 80269da:	60da      	str	r2, [r3, #12]
 80269dc:	e054      	b.n	8026a88 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80269de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80269e0:	00db      	lsls	r3, r3, #3
 80269e2:	683a      	ldr	r2, [r7, #0]
 80269e4:	4413      	add	r3, r2
 80269e6:	681b      	ldr	r3, [r3, #0]
 80269e8:	4618      	mov	r0, r3
 80269ea:	f7fd f8b7 	bl	8023b5c <lfs_tag_type3>
 80269ee:	4603      	mov	r3, r0
 80269f0:	461a      	mov	r2, r3
 80269f2:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80269f6:	429a      	cmp	r2, r3
 80269f8:	d11c      	bne.n	8026a34 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80269fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80269fc:	889c      	ldrh	r4, [r3, #4]
 80269fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026a00:	00db      	lsls	r3, r3, #3
 8026a02:	683a      	ldr	r2, [r7, #0]
 8026a04:	4413      	add	r3, r2
 8026a06:	681b      	ldr	r3, [r3, #0]
 8026a08:	4618      	mov	r0, r3
 8026a0a:	f7fd f8d1 	bl	8023bb0 <lfs_tag_id>
 8026a0e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026a10:	429c      	cmp	r4, r3
 8026a12:	d90f      	bls.n	8026a34 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8026a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a16:	889b      	ldrh	r3, [r3, #4]
 8026a18:	3b01      	subs	r3, #1
 8026a1a:	b29a      	uxth	r2, r3
 8026a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a1e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a22:	799b      	ldrb	r3, [r3, #6]
 8026a24:	2b02      	cmp	r3, #2
 8026a26:	d12f      	bne.n	8026a88 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8026a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a2c:	1e5a      	subs	r2, r3, #1
 8026a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a30:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8026a32:	e029      	b.n	8026a88 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026a36:	00db      	lsls	r3, r3, #3
 8026a38:	683a      	ldr	r2, [r7, #0]
 8026a3a:	4413      	add	r3, r2
 8026a3c:	681b      	ldr	r3, [r3, #0]
 8026a3e:	4618      	mov	r0, r3
 8026a40:	f7fd f88c 	bl	8023b5c <lfs_tag_type3>
 8026a44:	4603      	mov	r3, r0
 8026a46:	461a      	mov	r2, r3
 8026a48:	f240 4301 	movw	r3, #1025	; 0x401
 8026a4c:	429a      	cmp	r2, r3
 8026a4e:	d11b      	bne.n	8026a88 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8026a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a52:	889c      	ldrh	r4, [r3, #4]
 8026a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026a56:	00db      	lsls	r3, r3, #3
 8026a58:	683a      	ldr	r2, [r7, #0]
 8026a5a:	4413      	add	r3, r2
 8026a5c:	681b      	ldr	r3, [r3, #0]
 8026a5e:	4618      	mov	r0, r3
 8026a60:	f7fd f8a6 	bl	8023bb0 <lfs_tag_id>
 8026a64:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026a66:	429c      	cmp	r4, r3
 8026a68:	d30e      	bcc.n	8026a88 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8026a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a6c:	889b      	ldrh	r3, [r3, #4]
 8026a6e:	3301      	adds	r3, #1
 8026a70:	b29a      	uxth	r2, r3
 8026a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a74:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a78:	799b      	ldrb	r3, [r3, #6]
 8026a7a:	2b02      	cmp	r3, #2
 8026a7c:	d104      	bne.n	8026a88 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8026a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a82:	1c5a      	adds	r2, r3, #1
 8026a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a86:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8026a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026a8a:	3301      	adds	r3, #1
 8026a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026a8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8026a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026a94:	429a      	cmp	r2, r3
 8026a96:	f6ff af7e 	blt.w	8026996 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8026a9a:	e016      	b.n	8026aca <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8026a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a9e:	889a      	ldrh	r2, [r3, #4]
 8026aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026aa2:	8b9b      	ldrh	r3, [r3, #28]
 8026aa4:	1ad3      	subs	r3, r2, r3
 8026aa6:	b29a      	uxth	r2, r3
 8026aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026aaa:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8026aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026aae:	f103 0108 	add.w	r1, r3, #8
 8026ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ab4:	3320      	adds	r3, #32
 8026ab6:	461a      	mov	r2, r3
 8026ab8:	68f8      	ldr	r0, [r7, #12]
 8026aba:	f7fe fd03 	bl	80254c4 <lfs_dir_fetch>
 8026abe:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8026ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026ac2:	2b00      	cmp	r3, #0
 8026ac4:	d001      	beq.n	8026aca <lfs_dir_relocatingcommit+0x532>
                    return err;
 8026ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026ac8:	e011      	b.n	8026aee <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8026aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026acc:	889a      	ldrh	r2, [r3, #4]
 8026ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ad0:	8b9b      	ldrh	r3, [r3, #28]
 8026ad2:	429a      	cmp	r2, r3
 8026ad4:	d303      	bcc.n	8026ade <lfs_dir_relocatingcommit+0x546>
 8026ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ad8:	7fdb      	ldrb	r3, [r3, #31]
 8026ada:	2b00      	cmp	r3, #0
 8026adc:	d1de      	bne.n	8026a9c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ae0:	681b      	ldr	r3, [r3, #0]
 8026ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8026ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ae6:	2b00      	cmp	r3, #0
 8026ae8:	f47f af35 	bne.w	8026956 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8026aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8026aee:	4618      	mov	r0, r3
 8026af0:	3770      	adds	r7, #112	; 0x70
 8026af2:	46bd      	mov	sp, r7
 8026af4:	bdb0      	pop	{r4, r5, r7, pc}
 8026af6:	bf00      	nop
 8026af8:	080330ac 	.word	0x080330ac
 8026afc:	08034214 	.word	0x08034214
 8026b00:	08032f40 	.word	0x08032f40

08026b04 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8026b04:	b5b0      	push	{r4, r5, r7, lr}
 8026b06:	b0bc      	sub	sp, #240	; 0xf0
 8026b08:	af04      	add	r7, sp, #16
 8026b0a:	60f8      	str	r0, [r7, #12]
 8026b0c:	60b9      	str	r1, [r7, #8]
 8026b0e:	607a      	str	r2, [r7, #4]
 8026b10:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026b12:	68fb      	ldr	r3, [r7, #12]
 8026b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026b1a:	e045      	b.n	8026ba8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026b20:	3308      	adds	r3, #8
 8026b22:	68ba      	ldr	r2, [r7, #8]
 8026b24:	429a      	cmp	r2, r3
 8026b26:	d03a      	beq.n	8026b9e <lfs_dir_orphaningcommit+0x9a>
 8026b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026b2c:	3308      	adds	r3, #8
 8026b2e:	68ba      	ldr	r2, [r7, #8]
 8026b30:	4611      	mov	r1, r2
 8026b32:	4618      	mov	r0, r3
 8026b34:	f7fc ff56 	bl	80239e4 <lfs_pair_cmp>
 8026b38:	4603      	mov	r3, r0
 8026b3a:	2b00      	cmp	r3, #0
 8026b3c:	d12f      	bne.n	8026b9e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026b42:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026b44:	2b01      	cmp	r3, #1
 8026b46:	d12a      	bne.n	8026b9e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026b52:	2b00      	cmp	r3, #0
 8026b54:	d023      	beq.n	8026b9e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8026b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026b5c:	68fb      	ldr	r3, [r7, #12]
 8026b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026b62:	429a      	cmp	r2, r3
 8026b64:	d91b      	bls.n	8026b9e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8026b66:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026b6a:	68f8      	ldr	r0, [r7, #12]
 8026b6c:	f001 fa26 	bl	8027fbc <lfs_file_outline>
 8026b70:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026b78:	2b00      	cmp	r3, #0
 8026b7a:	d002      	beq.n	8026b82 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8026b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026b80:	e2ad      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8026b82:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026b86:	68f8      	ldr	r0, [r7, #12]
 8026b88:	f001 fa3a 	bl	8028000 <lfs_file_flush>
 8026b8c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026b90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026b94:	2b00      	cmp	r3, #0
 8026b96:	d002      	beq.n	8026b9e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8026b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026b9c:	e29f      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026ba2:	681b      	ldr	r3, [r3, #0]
 8026ba4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026bac:	2b00      	cmp	r3, #0
 8026bae:	d1b5      	bne.n	8026b1c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8026bb0:	68bb      	ldr	r3, [r7, #8]
 8026bb2:	681b      	ldr	r3, [r3, #0]
 8026bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8026bb8:	68bb      	ldr	r3, [r7, #8]
 8026bba:	685b      	ldr	r3, [r3, #4]
 8026bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8026bc0:	68bb      	ldr	r3, [r7, #8]
 8026bc2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026bc6:	461d      	mov	r5, r3
 8026bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026bcc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8026bd4:	68ba      	ldr	r2, [r7, #8]
 8026bd6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8026bda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8026bde:	9301      	str	r3, [sp, #4]
 8026be0:	683b      	ldr	r3, [r7, #0]
 8026be2:	9300      	str	r3, [sp, #0]
 8026be4:	687b      	ldr	r3, [r7, #4]
 8026be6:	68f8      	ldr	r0, [r7, #12]
 8026be8:	f7ff fcd6 	bl	8026598 <lfs_dir_relocatingcommit>
 8026bec:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8026bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	da02      	bge.n	8026bfe <lfs_dir_orphaningcommit+0xfa>
        return state;
 8026bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026bfc:	e26f      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8026bfe:	68bb      	ldr	r3, [r7, #8]
 8026c00:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026c04:	4611      	mov	r1, r2
 8026c06:	4618      	mov	r0, r3
 8026c08:	f7fc feec 	bl	80239e4 <lfs_pair_cmp>
 8026c0c:	4603      	mov	r3, r0
 8026c0e:	2b00      	cmp	r3, #0
 8026c10:	d109      	bne.n	8026c26 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8026c12:	68bb      	ldr	r3, [r7, #8]
 8026c14:	461d      	mov	r5, r3
 8026c16:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026c1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8026c22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8026c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026c2a:	2b02      	cmp	r3, #2
 8026c2c:	d14a      	bne.n	8026cc4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8026c2e:	68fb      	ldr	r3, [r7, #12]
 8026c30:	3348      	adds	r3, #72	; 0x48
 8026c32:	461a      	mov	r2, r3
 8026c34:	68b9      	ldr	r1, [r7, #8]
 8026c36:	68f8      	ldr	r0, [r7, #12]
 8026c38:	f7fe fc60 	bl	80254fc <lfs_dir_getgstate>
 8026c3c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8026c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026c44:	2b00      	cmp	r3, #0
 8026c46:	d002      	beq.n	8026c4e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8026c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026c4c:	e247      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8026c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8026c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8026c5a:	68bb      	ldr	r3, [r7, #8]
 8026c5c:	3318      	adds	r3, #24
 8026c5e:	4618      	mov	r0, r3
 8026c60:	f7fc ff31 	bl	8023ac6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8026c64:	68bb      	ldr	r3, [r7, #8]
 8026c66:	7ddb      	ldrb	r3, [r3, #23]
 8026c68:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8026c6c:	051a      	lsls	r2, r3, #20
 8026c6e:	4bc2      	ldr	r3, [pc, #776]	; (8026f78 <lfs_dir_orphaningcommit+0x474>)
 8026c70:	4313      	orrs	r3, r2
 8026c72:	667b      	str	r3, [r7, #100]	; 0x64
 8026c74:	68bb      	ldr	r3, [r7, #8]
 8026c76:	3318      	adds	r3, #24
 8026c78:	66bb      	str	r3, [r7, #104]	; 0x68
 8026c7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026c7e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026c82:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8026c86:	2000      	movs	r0, #0
 8026c88:	9001      	str	r0, [sp, #4]
 8026c8a:	2001      	movs	r0, #1
 8026c8c:	9000      	str	r0, [sp, #0]
 8026c8e:	68f8      	ldr	r0, [r7, #12]
 8026c90:	f7ff fc82 	bl	8026598 <lfs_dir_relocatingcommit>
 8026c94:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8026c98:	68bb      	ldr	r3, [r7, #8]
 8026c9a:	3318      	adds	r3, #24
 8026c9c:	4618      	mov	r0, r3
 8026c9e:	f7fc fef8 	bl	8023a92 <lfs_pair_fromle32>
        if (state < 0) {
 8026ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026ca6:	2b00      	cmp	r3, #0
 8026ca8:	da02      	bge.n	8026cb0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8026caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026cae:	e216      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8026cb0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026cb4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8026cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026cbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8026cc4:	2300      	movs	r3, #0
 8026cc6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8026cca:	e1fc      	b.n	80270c6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8026ccc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8026cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8026cd4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8026cd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8026cdc:	4ca7      	ldr	r4, [pc, #668]	; (8026f7c <lfs_dir_orphaningcommit+0x478>)
 8026cde:	9403      	str	r4, [sp, #12]
 8026ce0:	9102      	str	r1, [sp, #8]
 8026ce2:	9201      	str	r2, [sp, #4]
 8026ce4:	9300      	str	r3, [sp, #0]
 8026ce6:	4603      	mov	r3, r0
 8026ce8:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8026cec:	49a4      	ldr	r1, [pc, #656]	; (8026f80 <lfs_dir_orphaningcommit+0x47c>)
 8026cee:	48a5      	ldr	r0, [pc, #660]	; (8026f84 <lfs_dir_orphaningcommit+0x480>)
 8026cf0:	f006 f9ac 	bl	802d04c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8026cf4:	2300      	movs	r3, #0
 8026cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8026cfa:	68fb      	ldr	r3, [r7, #12]
 8026cfc:	f103 0220 	add.w	r2, r3, #32
 8026d00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8026d04:	4611      	mov	r1, r2
 8026d06:	4618      	mov	r0, r3
 8026d08:	f7fc fe6c 	bl	80239e4 <lfs_pair_cmp>
 8026d0c:	4603      	mov	r3, r0
 8026d0e:	2b00      	cmp	r3, #0
 8026d10:	d107      	bne.n	8026d22 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8026d12:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8026d16:	68fb      	ldr	r3, [r7, #12]
 8026d18:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8026d1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8026d1e:	68fb      	ldr	r3, [r7, #12]
 8026d20:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026d22:	68fb      	ldr	r3, [r7, #12]
 8026d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8026d2a:	e037      	b.n	8026d9c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8026d2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d30:	f103 0208 	add.w	r2, r3, #8
 8026d34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8026d38:	4611      	mov	r1, r2
 8026d3a:	4618      	mov	r0, r3
 8026d3c:	f7fc fe52 	bl	80239e4 <lfs_pair_cmp>
 8026d40:	4603      	mov	r3, r0
 8026d42:	2b00      	cmp	r3, #0
 8026d44:	d109      	bne.n	8026d5a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8026d46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8026d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d4e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8026d50:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8026d54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d58:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8026d5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d5e:	799b      	ldrb	r3, [r3, #6]
 8026d60:	2b02      	cmp	r3, #2
 8026d62:	d116      	bne.n	8026d92 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8026d64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d68:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8026d6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8026d70:	4611      	mov	r1, r2
 8026d72:	4618      	mov	r0, r3
 8026d74:	f7fc fe36 	bl	80239e4 <lfs_pair_cmp>
 8026d78:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8026d7a:	2b00      	cmp	r3, #0
 8026d7c:	d109      	bne.n	8026d92 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8026d7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8026d82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d86:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8026d88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8026d8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d90:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026d92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026d96:	681b      	ldr	r3, [r3, #0]
 8026d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8026d9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	d1c3      	bne.n	8026d2c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8026da4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8026da8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8026dac:	4619      	mov	r1, r3
 8026dae:	68f8      	ldr	r0, [r7, #12]
 8026db0:	f002 fed8 	bl	8029b64 <lfs_fs_parent>
 8026db4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8026db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026dbc:	2b00      	cmp	r3, #0
 8026dbe:	da07      	bge.n	8026dd0 <lfs_dir_orphaningcommit+0x2cc>
 8026dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026dc4:	f113 0f02 	cmn.w	r3, #2
 8026dc8:	d002      	beq.n	8026dd0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8026dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026dce:	e186      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8026dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026dd4:	f113 0f02 	cmn.w	r3, #2
 8026dd8:	bf14      	ite	ne
 8026dda:	2301      	movne	r3, #1
 8026ddc:	2300      	moveq	r3, #0
 8026dde:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8026de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026de6:	f113 0f02 	cmn.w	r3, #2
 8026dea:	f000 809e 	beq.w	8026f2a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8026dee:	2101      	movs	r1, #1
 8026df0:	68f8      	ldr	r0, [r7, #12]
 8026df2:	f002 ff0f 	bl	8029c14 <lfs_fs_preporphans>
 8026df6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8026dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026dfe:	2b00      	cmp	r3, #0
 8026e00:	d002      	beq.n	8026e08 <lfs_dir_orphaningcommit+0x304>
                return err;
 8026e02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026e06:	e16a      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8026e08:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8026e0c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8026e10:	68fb      	ldr	r3, [r7, #12]
 8026e12:	3330      	adds	r3, #48	; 0x30
 8026e14:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8026e18:	4611      	mov	r1, r2
 8026e1a:	4618      	mov	r0, r3
 8026e1c:	f7fc ff70 	bl	8023d00 <lfs_gstate_hasmovehere>
 8026e20:	4603      	mov	r3, r0
 8026e22:	2b00      	cmp	r3, #0
 8026e24:	d02d      	beq.n	8026e82 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8026e26:	68fb      	ldr	r3, [r7, #12]
 8026e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026e2a:	4618      	mov	r0, r3
 8026e2c:	f7fc fec0 	bl	8023bb0 <lfs_tag_id>
 8026e30:	4603      	mov	r3, r0
 8026e32:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8026e36:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8026e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026e3a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8026e3e:	484f      	ldr	r0, [pc, #316]	; (8026f7c <lfs_dir_orphaningcommit+0x478>)
 8026e40:	9002      	str	r0, [sp, #8]
 8026e42:	9201      	str	r2, [sp, #4]
 8026e44:	9300      	str	r3, [sp, #0]
 8026e46:	460b      	mov	r3, r1
 8026e48:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8026e4c:	494c      	ldr	r1, [pc, #304]	; (8026f80 <lfs_dir_orphaningcommit+0x47c>)
 8026e4e:	484e      	ldr	r0, [pc, #312]	; (8026f88 <lfs_dir_orphaningcommit+0x484>)
 8026e50:	f006 f8fc 	bl	802d04c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8026e54:	2200      	movs	r2, #0
 8026e56:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8026e5a:	68f8      	ldr	r0, [r7, #12]
 8026e5c:	f002 ff14 	bl	8029c88 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8026e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026e64:	4618      	mov	r0, r3
 8026e66:	f7fc fea3 	bl	8023bb0 <lfs_tag_id>
 8026e6a:	4603      	mov	r3, r0
 8026e6c:	461a      	mov	r2, r3
 8026e6e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8026e72:	4293      	cmp	r3, r2
 8026e74:	d205      	bcs.n	8026e82 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8026e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026e7a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8026e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8026e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026e84:	657b      	str	r3, [r7, #84]	; 0x54
 8026e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026e88:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8026e8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8026e8e:	4618      	mov	r0, r3
 8026e90:	f7fc fe19 	bl	8023ac6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8026e94:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8026e98:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8026e9c:	4293      	cmp	r3, r2
 8026e9e:	d007      	beq.n	8026eb0 <lfs_dir_orphaningcommit+0x3ac>
 8026ea0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8026ea4:	029b      	lsls	r3, r3, #10
 8026ea6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8026eaa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8026eae:	e000      	b.n	8026eb2 <lfs_dir_orphaningcommit+0x3ae>
 8026eb0:	2300      	movs	r3, #0
 8026eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8026eb4:	2300      	movs	r3, #0
 8026eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8026eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026ebe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8026ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8026ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026ec8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8026ecc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8026ed0:	2000      	movs	r0, #0
 8026ed2:	9001      	str	r0, [sp, #4]
 8026ed4:	2002      	movs	r0, #2
 8026ed6:	9000      	str	r0, [sp, #0]
 8026ed8:	68f8      	ldr	r0, [r7, #12]
 8026eda:	f7ff fb5d 	bl	8026598 <lfs_dir_relocatingcommit>
 8026ede:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8026ee2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8026ee6:	4618      	mov	r0, r3
 8026ee8:	f7fc fdd3 	bl	8023a92 <lfs_pair_fromle32>
            if (state < 0) {
 8026eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026ef0:	2b00      	cmp	r3, #0
 8026ef2:	da02      	bge.n	8026efa <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8026ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026ef8:	e0f1      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8026efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026efe:	2b01      	cmp	r3, #1
 8026f00:	d113      	bne.n	8026f2a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8026f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8026f08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8026f0e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026f12:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8026f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026f1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026f1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8026f22:	2301      	movs	r3, #1
 8026f24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8026f28:	e0cd      	b.n	80270c6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8026f2a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8026f2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8026f32:	4619      	mov	r1, r3
 8026f34:	68f8      	ldr	r0, [r7, #12]
 8026f36:	f002 fd8d 	bl	8029a54 <lfs_fs_pred>
 8026f3a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8026f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	d007      	beq.n	8026f56 <lfs_dir_orphaningcommit+0x452>
 8026f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8026f4a:	f113 0f02 	cmn.w	r3, #2
 8026f4e:	d002      	beq.n	8026f56 <lfs_dir_orphaningcommit+0x452>
            return err;
 8026f50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8026f54:	e0c3      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8026f56:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8026f5a:	2b00      	cmp	r3, #0
 8026f5c:	d01a      	beq.n	8026f94 <lfs_dir_orphaningcommit+0x490>
 8026f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8026f62:	f113 0f02 	cmn.w	r3, #2
 8026f66:	d115      	bne.n	8026f94 <lfs_dir_orphaningcommit+0x490>
 8026f68:	4b08      	ldr	r3, [pc, #32]	; (8026f8c <lfs_dir_orphaningcommit+0x488>)
 8026f6a:	4a09      	ldr	r2, [pc, #36]	; (8026f90 <lfs_dir_orphaningcommit+0x48c>)
 8026f6c:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8026f70:	4803      	ldr	r0, [pc, #12]	; (8026f80 <lfs_dir_orphaningcommit+0x47c>)
 8026f72:	f005 f831 	bl	802bfd8 <__assert_func>
 8026f76:	bf00      	nop
 8026f78:	000ffc08 	.word	0x000ffc08
 8026f7c:	08033054 	.word	0x08033054
 8026f80:	08032f40 	.word	0x08032f40
 8026f84:	080331d4 	.word	0x080331d4
 8026f88:	08033210 	.word	0x08033210
 8026f8c:	08033254 	.word	0x08033254
 8026f90:	08034230 	.word	0x08034230

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8026f94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8026f98:	f113 0f02 	cmn.w	r3, #2
 8026f9c:	f000 8093 	beq.w	80270c6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8026fa0:	68fb      	ldr	r3, [r7, #12]
 8026fa2:	3330      	adds	r3, #48	; 0x30
 8026fa4:	4618      	mov	r0, r3
 8026fa6:	f7fc fe76 	bl	8023c96 <lfs_gstate_hasorphans>
 8026faa:	4603      	mov	r3, r0
 8026fac:	2b00      	cmp	r3, #0
 8026fae:	d011      	beq.n	8026fd4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8026fb0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8026fb4:	425b      	negs	r3, r3
 8026fb6:	b2db      	uxtb	r3, r3
 8026fb8:	b25b      	sxtb	r3, r3
 8026fba:	4619      	mov	r1, r3
 8026fbc:	68f8      	ldr	r0, [r7, #12]
 8026fbe:	f002 fe29 	bl	8029c14 <lfs_fs_preporphans>
 8026fc2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8026fc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8026fca:	2b00      	cmp	r3, #0
 8026fcc:	d002      	beq.n	8026fd4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8026fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8026fd2:	e084      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8026fd4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8026fd8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8026fdc:	68fb      	ldr	r3, [r7, #12]
 8026fde:	3330      	adds	r3, #48	; 0x30
 8026fe0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8026fe4:	4611      	mov	r1, r2
 8026fe6:	4618      	mov	r0, r3
 8026fe8:	f7fc fe8a 	bl	8023d00 <lfs_gstate_hasmovehere>
 8026fec:	4603      	mov	r3, r0
 8026fee:	2b00      	cmp	r3, #0
 8026ff0:	d01c      	beq.n	802702c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8026ff2:	68fb      	ldr	r3, [r7, #12]
 8026ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026ff6:	4618      	mov	r0, r3
 8026ff8:	f7fc fdda 	bl	8023bb0 <lfs_tag_id>
 8026ffc:	4603      	mov	r3, r0
 8026ffe:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8027002:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027006:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 802700a:	4837      	ldr	r0, [pc, #220]	; (80270e8 <lfs_dir_orphaningcommit+0x5e4>)
 802700c:	9002      	str	r0, [sp, #8]
 802700e:	9201      	str	r2, [sp, #4]
 8027010:	9300      	str	r3, [sp, #0]
 8027012:	460b      	mov	r3, r1
 8027014:	f640 1221 	movw	r2, #2337	; 0x921
 8027018:	4934      	ldr	r1, [pc, #208]	; (80270ec <lfs_dir_orphaningcommit+0x5e8>)
 802701a:	4835      	ldr	r0, [pc, #212]	; (80270f0 <lfs_dir_orphaningcommit+0x5ec>)
 802701c:	f006 f816 	bl	802d04c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027020:	2200      	movs	r2, #0
 8027022:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8027026:	68f8      	ldr	r0, [r7, #12]
 8027028:	f002 fe2e 	bl	8029c88 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 802702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802702e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8027032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8027038:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802703c:	4618      	mov	r0, r3
 802703e:	f7fc fd42 	bl	8023ac6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027042:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027046:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802704a:	4293      	cmp	r3, r2
 802704c:	d007      	beq.n	802705e <lfs_dir_orphaningcommit+0x55a>
 802704e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027052:	029b      	lsls	r3, r3, #10
 8027054:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8027058:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802705c:	e000      	b.n	8027060 <lfs_dir_orphaningcommit+0x55c>
 802705e:	2300      	movs	r3, #0
 8027060:	627b      	str	r3, [r7, #36]	; 0x24
 8027062:	2300      	movs	r3, #0
 8027064:	62bb      	str	r3, [r7, #40]	; 0x28
 8027066:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802706a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802706e:	051a      	lsls	r2, r3, #20
 8027070:	4b20      	ldr	r3, [pc, #128]	; (80270f4 <lfs_dir_orphaningcommit+0x5f0>)
 8027072:	4313      	orrs	r3, r2
 8027074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027076:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802707a:	633b      	str	r3, [r7, #48]	; 0x30
 802707c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027080:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027084:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027088:	2000      	movs	r0, #0
 802708a:	9001      	str	r0, [sp, #4]
 802708c:	2002      	movs	r0, #2
 802708e:	9000      	str	r0, [sp, #0]
 8027090:	68f8      	ldr	r0, [r7, #12]
 8027092:	f7ff fa81 	bl	8026598 <lfs_dir_relocatingcommit>
 8027096:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 802709a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802709e:	4618      	mov	r0, r3
 80270a0:	f7fc fcf7 	bl	8023a92 <lfs_pair_fromle32>
            if (state < 0) {
 80270a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80270a8:	2b00      	cmp	r3, #0
 80270aa:	da02      	bge.n	80270b2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80270ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80270b0:	e015      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80270b2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80270b6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80270ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80270bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80270be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80270c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80270c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80270ca:	2b01      	cmp	r3, #1
 80270cc:	f43f adfe 	beq.w	8026ccc <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80270d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80270d4:	2b00      	cmp	r3, #0
 80270d6:	d001      	beq.n	80270dc <lfs_dir_orphaningcommit+0x5d8>
 80270d8:	2303      	movs	r3, #3
 80270da:	e000      	b.n	80270de <lfs_dir_orphaningcommit+0x5da>
 80270dc:	2300      	movs	r3, #0
}
 80270de:	4618      	mov	r0, r3
 80270e0:	37e0      	adds	r7, #224	; 0xe0
 80270e2:	46bd      	mov	sp, r7
 80270e4:	bdb0      	pop	{r4, r5, r7, pc}
 80270e6:	bf00      	nop
 80270e8:	08033054 	.word	0x08033054
 80270ec:	08032f40 	.word	0x08032f40
 80270f0:	08033210 	.word	0x08033210
 80270f4:	000ffc08 	.word	0x000ffc08

080270f8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80270f8:	b580      	push	{r7, lr}
 80270fa:	b086      	sub	sp, #24
 80270fc:	af00      	add	r7, sp, #0
 80270fe:	60f8      	str	r0, [r7, #12]
 8027100:	60b9      	str	r1, [r7, #8]
 8027102:	607a      	str	r2, [r7, #4]
 8027104:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8027106:	683b      	ldr	r3, [r7, #0]
 8027108:	687a      	ldr	r2, [r7, #4]
 802710a:	68b9      	ldr	r1, [r7, #8]
 802710c:	68f8      	ldr	r0, [r7, #12]
 802710e:	f7ff fcf9 	bl	8026b04 <lfs_dir_orphaningcommit>
 8027112:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8027114:	697b      	ldr	r3, [r7, #20]
 8027116:	2b00      	cmp	r3, #0
 8027118:	da01      	bge.n	802711e <lfs_dir_commit+0x26>
        return orphans;
 802711a:	697b      	ldr	r3, [r7, #20]
 802711c:	e00d      	b.n	802713a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802711e:	697b      	ldr	r3, [r7, #20]
 8027120:	2b00      	cmp	r3, #0
 8027122:	d009      	beq.n	8027138 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8027124:	2100      	movs	r1, #0
 8027126:	68f8      	ldr	r0, [r7, #12]
 8027128:	f002 fe4e 	bl	8029dc8 <lfs_fs_deorphan>
 802712c:	6138      	str	r0, [r7, #16]
        if (err) {
 802712e:	693b      	ldr	r3, [r7, #16]
 8027130:	2b00      	cmp	r3, #0
 8027132:	d001      	beq.n	8027138 <lfs_dir_commit+0x40>
            return err;
 8027134:	693b      	ldr	r3, [r7, #16]
 8027136:	e000      	b.n	802713a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8027138:	2300      	movs	r3, #0
}
 802713a:	4618      	mov	r0, r3
 802713c:	3718      	adds	r7, #24
 802713e:	46bd      	mov	sp, r7
 8027140:	bd80      	pop	{r7, pc}
	...

08027144 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8027144:	b5b0      	push	{r4, r5, r7, lr}
 8027146:	b0b8      	sub	sp, #224	; 0xe0
 8027148:	af00      	add	r7, sp, #0
 802714a:	6078      	str	r0, [r7, #4]
 802714c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 802714e:	6878      	ldr	r0, [r7, #4]
 8027150:	f002 ffde 	bl	802a110 <lfs_fs_forceconsistency>
 8027154:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802715c:	2b00      	cmp	r3, #0
 802715e:	d002      	beq.n	8027166 <lfs_rawmkdir+0x22>
        return err;
 8027160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027164:	e128      	b.n	80273b8 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8027166:	687b      	ldr	r3, [r7, #4]
 8027168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802716a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 802716e:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8027172:	463a      	mov	r2, r7
 8027174:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8027178:	f103 0108 	add.w	r1, r3, #8
 802717c:	4603      	mov	r3, r0
 802717e:	6878      	ldr	r0, [r7, #4]
 8027180:	f7fe fab2 	bl	80256e8 <lfs_dir_find>
 8027184:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8027188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802718c:	f113 0f02 	cmn.w	r3, #2
 8027190:	d105      	bne.n	802719e <lfs_rawmkdir+0x5a>
 8027192:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027196:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802719a:	4293      	cmp	r3, r2
 802719c:	d109      	bne.n	80271b2 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 802719e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80271a2:	2b00      	cmp	r3, #0
 80271a4:	da02      	bge.n	80271ac <lfs_rawmkdir+0x68>
 80271a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80271aa:	e105      	b.n	80273b8 <lfs_rawmkdir+0x274>
 80271ac:	f06f 0310 	mvn.w	r3, #16
 80271b0:	e102      	b.n	80273b8 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80271b2:	683b      	ldr	r3, [r7, #0]
 80271b4:	4618      	mov	r0, r3
 80271b6:	f7e9 f873 	bl	80102a0 <strlen>
 80271ba:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 80271be:	687b      	ldr	r3, [r7, #4]
 80271c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80271c2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80271c6:	429a      	cmp	r2, r3
 80271c8:	d902      	bls.n	80271d0 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80271ca:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80271ce:	e0f3      	b.n	80273b8 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 80271d0:	6878      	ldr	r0, [r7, #4]
 80271d2:	f7fc ff1d 	bl	8024010 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80271d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80271da:	4619      	mov	r1, r3
 80271dc:	6878      	ldr	r0, [r7, #4]
 80271de:	f7fe fd6f 	bl	8025cc0 <lfs_dir_alloc>
 80271e2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80271e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80271ea:	2b00      	cmp	r3, #0
 80271ec:	d002      	beq.n	80271f4 <lfs_rawmkdir+0xb0>
        return err;
 80271ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80271f2:	e0e1      	b.n	80273b8 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 80271f4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80271f8:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80271fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80271fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027200:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8027208:	e012      	b.n	8027230 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 802720a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802720e:	f103 0218 	add.w	r2, r3, #24
 8027212:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027216:	4619      	mov	r1, r3
 8027218:	6878      	ldr	r0, [r7, #4]
 802721a:	f7fe f953 	bl	80254c4 <lfs_dir_fetch>
 802721e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027226:	2b00      	cmp	r3, #0
 8027228:	d002      	beq.n	8027230 <lfs_rawmkdir+0xec>
            return err;
 802722a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802722e:	e0c3      	b.n	80273b8 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8027230:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8027234:	2b00      	cmp	r3, #0
 8027236:	d1e8      	bne.n	802720a <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8027238:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802723c:	3318      	adds	r3, #24
 802723e:	4618      	mov	r0, r3
 8027240:	f7fc fc41 	bl	8023ac6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8027244:	4b5e      	ldr	r3, [pc, #376]	; (80273c0 <lfs_rawmkdir+0x27c>)
 8027246:	667b      	str	r3, [r7, #100]	; 0x64
 8027248:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802724c:	3318      	adds	r3, #24
 802724e:	66bb      	str	r3, [r7, #104]	; 0x68
 8027250:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8027254:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8027258:	2301      	movs	r3, #1
 802725a:	6878      	ldr	r0, [r7, #4]
 802725c:	f7ff ff4c 	bl	80270f8 <lfs_dir_commit>
 8027260:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8027264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027268:	3318      	adds	r3, #24
 802726a:	4618      	mov	r0, r3
 802726c:	f7fc fc11 	bl	8023a92 <lfs_pair_fromle32>
    if (err) {
 8027270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027274:	2b00      	cmp	r3, #0
 8027276:	d002      	beq.n	802727e <lfs_rawmkdir+0x13a>
        return err;
 8027278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802727c:	e09c      	b.n	80273b8 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 802727e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8027282:	2b00      	cmp	r3, #0
 8027284:	d04c      	beq.n	8027320 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8027286:	2101      	movs	r1, #1
 8027288:	6878      	ldr	r0, [r7, #4]
 802728a:	f002 fcc3 	bl	8029c14 <lfs_fs_preporphans>
 802728e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027296:	2b00      	cmp	r3, #0
 8027298:	d002      	beq.n	80272a0 <lfs_rawmkdir+0x15c>
            return err;
 802729a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802729e:	e08b      	b.n	80273b8 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 80272a0:	2300      	movs	r3, #0
 80272a2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 80272a6:	2300      	movs	r3, #0
 80272a8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 80272ac:	687b      	ldr	r3, [r7, #4]
 80272ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80272b2:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 80272b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80272b8:	4618      	mov	r0, r3
 80272ba:	f7fc fc04 	bl	8023ac6 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 80272be:	4b40      	ldr	r3, [pc, #256]	; (80273c0 <lfs_rawmkdir+0x27c>)
 80272c0:	617b      	str	r3, [r7, #20]
 80272c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80272c6:	61bb      	str	r3, [r7, #24]
 80272c8:	f107 0214 	add.w	r2, r7, #20
 80272cc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80272d0:	2301      	movs	r3, #1
 80272d2:	6878      	ldr	r0, [r7, #4]
 80272d4:	f7ff ff10 	bl	80270f8 <lfs_dir_commit>
 80272d8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80272dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80272e0:	4618      	mov	r0, r3
 80272e2:	f7fc fbd6 	bl	8023a92 <lfs_pair_fromle32>
        if (err) {
 80272e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80272ea:	2b00      	cmp	r3, #0
 80272ec:	d006      	beq.n	80272fc <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 80272ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80272f2:	687b      	ldr	r3, [r7, #4]
 80272f4:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 80272f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80272fa:	e05d      	b.n	80273b8 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 80272fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027300:	687b      	ldr	r3, [r7, #4]
 8027302:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8027304:	f04f 31ff 	mov.w	r1, #4294967295
 8027308:	6878      	ldr	r0, [r7, #4]
 802730a:	f002 fc83 	bl	8029c14 <lfs_fs_preporphans>
 802730e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027316:	2b00      	cmp	r3, #0
 8027318:	d002      	beq.n	8027320 <lfs_rawmkdir+0x1dc>
            return err;
 802731a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802731e:	e04b      	b.n	80273b8 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8027320:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027324:	4618      	mov	r0, r3
 8027326:	f7fc fbce 	bl	8023ac6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 802732a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 802732e:	029b      	lsls	r3, r3, #10
 8027330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027338:	63fb      	str	r3, [r7, #60]	; 0x3c
 802733a:	2300      	movs	r3, #0
 802733c:	643b      	str	r3, [r7, #64]	; 0x40
 802733e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027342:	029a      	lsls	r2, r3, #10
 8027344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027348:	4313      	orrs	r3, r2
 802734a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802734e:	647b      	str	r3, [r7, #68]	; 0x44
 8027350:	683b      	ldr	r3, [r7, #0]
 8027352:	64bb      	str	r3, [r7, #72]	; 0x48
 8027354:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027358:	029b      	lsls	r3, r3, #10
 802735a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802735e:	f043 0308 	orr.w	r3, r3, #8
 8027362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027364:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027368:	653b      	str	r3, [r7, #80]	; 0x50
 802736a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 802736e:	f083 0301 	eor.w	r3, r3, #1
 8027372:	b2db      	uxtb	r3, r3
 8027374:	2b00      	cmp	r3, #0
 8027376:	d001      	beq.n	802737c <lfs_rawmkdir+0x238>
 8027378:	4b11      	ldr	r3, [pc, #68]	; (80273c0 <lfs_rawmkdir+0x27c>)
 802737a:	e000      	b.n	802737e <lfs_rawmkdir+0x23a>
 802737c:	2300      	movs	r3, #0
 802737e:	657b      	str	r3, [r7, #84]	; 0x54
 8027380:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027384:	65bb      	str	r3, [r7, #88]	; 0x58
 8027386:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802738a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802738e:	f103 0108 	add.w	r1, r3, #8
 8027392:	2304      	movs	r3, #4
 8027394:	6878      	ldr	r0, [r7, #4]
 8027396:	f7ff feaf 	bl	80270f8 <lfs_dir_commit>
 802739a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 802739e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80273a2:	4618      	mov	r0, r3
 80273a4:	f7fc fb75 	bl	8023a92 <lfs_pair_fromle32>
    if (err) {
 80273a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	d002      	beq.n	80273b6 <lfs_rawmkdir+0x272>
        return err;
 80273b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80273b4:	e000      	b.n	80273b8 <lfs_rawmkdir+0x274>
    }

    return 0;
 80273b6:	2300      	movs	r3, #0
}
 80273b8:	4618      	mov	r0, r3
 80273ba:	37e0      	adds	r7, #224	; 0xe0
 80273bc:	46bd      	mov	sp, r7
 80273be:	bdb0      	pop	{r4, r5, r7, pc}
 80273c0:	600ffc08 	.word	0x600ffc08

080273c4 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80273c4:	b590      	push	{r4, r7, lr}
 80273c6:	b08d      	sub	sp, #52	; 0x34
 80273c8:	af02      	add	r7, sp, #8
 80273ca:	60f8      	str	r0, [r7, #12]
 80273cc:	60b9      	str	r1, [r7, #8]
 80273ce:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80273d0:	68bb      	ldr	r3, [r7, #8]
 80273d2:	f103 0108 	add.w	r1, r3, #8
 80273d6:	1d3a      	adds	r2, r7, #4
 80273d8:	2300      	movs	r3, #0
 80273da:	68f8      	ldr	r0, [r7, #12]
 80273dc:	f7fe f984 	bl	80256e8 <lfs_dir_find>
 80273e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 80273e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80273e4:	2b00      	cmp	r3, #0
 80273e6:	da01      	bge.n	80273ec <lfs_dir_rawopen+0x28>
        return tag;
 80273e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80273ea:	e05e      	b.n	80274aa <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80273ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80273ee:	4618      	mov	r0, r3
 80273f0:	f7fc fbb4 	bl	8023b5c <lfs_tag_type3>
 80273f4:	4603      	mov	r3, r0
 80273f6:	2b02      	cmp	r3, #2
 80273f8:	d002      	beq.n	8027400 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 80273fa:	f06f 0313 	mvn.w	r3, #19
 80273fe:	e054      	b.n	80274aa <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8027400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027402:	4618      	mov	r0, r3
 8027404:	f7fc fbd4 	bl	8023bb0 <lfs_tag_id>
 8027408:	4603      	mov	r3, r0
 802740a:	461a      	mov	r2, r3
 802740c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027410:	429a      	cmp	r2, r3
 8027412:	d106      	bne.n	8027422 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027414:	68fb      	ldr	r3, [r7, #12]
 8027416:	6a1b      	ldr	r3, [r3, #32]
 8027418:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 802741a:	68fb      	ldr	r3, [r7, #12]
 802741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802741e:	61bb      	str	r3, [r7, #24]
 8027420:	e01f      	b.n	8027462 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027422:	68bb      	ldr	r3, [r7, #8]
 8027424:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8027428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802742a:	4618      	mov	r0, r3
 802742c:	f7fc fbc0 	bl	8023bb0 <lfs_tag_id>
 8027430:	4603      	mov	r3, r0
 8027432:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027434:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027438:	f043 0308 	orr.w	r3, r3, #8
 802743c:	f107 0214 	add.w	r2, r7, #20
 8027440:	9200      	str	r2, [sp, #0]
 8027442:	4a1c      	ldr	r2, [pc, #112]	; (80274b4 <lfs_dir_rawopen+0xf0>)
 8027444:	4621      	mov	r1, r4
 8027446:	68f8      	ldr	r0, [r7, #12]
 8027448:	f7fc ff9c 	bl	8024384 <lfs_dir_get>
 802744c:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 802744e:	6a3b      	ldr	r3, [r7, #32]
 8027450:	2b00      	cmp	r3, #0
 8027452:	da01      	bge.n	8027458 <lfs_dir_rawopen+0x94>
            return res;
 8027454:	6a3b      	ldr	r3, [r7, #32]
 8027456:	e028      	b.n	80274aa <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8027458:	f107 0314 	add.w	r3, r7, #20
 802745c:	4618      	mov	r0, r3
 802745e:	f7fc fb18 	bl	8023a92 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8027462:	68bb      	ldr	r3, [r7, #8]
 8027464:	3308      	adds	r3, #8
 8027466:	f107 0214 	add.w	r2, r7, #20
 802746a:	4619      	mov	r1, r3
 802746c:	68f8      	ldr	r0, [r7, #12]
 802746e:	f7fe f829 	bl	80254c4 <lfs_dir_fetch>
 8027472:	61f8      	str	r0, [r7, #28]
    if (err) {
 8027474:	69fb      	ldr	r3, [r7, #28]
 8027476:	2b00      	cmp	r3, #0
 8027478:	d001      	beq.n	802747e <lfs_dir_rawopen+0xba>
        return err;
 802747a:	69fb      	ldr	r3, [r7, #28]
 802747c:	e015      	b.n	80274aa <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 802747e:	68bb      	ldr	r3, [r7, #8]
 8027480:	689a      	ldr	r2, [r3, #8]
 8027482:	68bb      	ldr	r3, [r7, #8]
 8027484:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8027486:	68bb      	ldr	r3, [r7, #8]
 8027488:	68da      	ldr	r2, [r3, #12]
 802748a:	68bb      	ldr	r3, [r7, #8]
 802748c:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 802748e:	68bb      	ldr	r3, [r7, #8]
 8027490:	2200      	movs	r2, #0
 8027492:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8027494:	68bb      	ldr	r3, [r7, #8]
 8027496:	2200      	movs	r2, #0
 8027498:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 802749a:	68bb      	ldr	r3, [r7, #8]
 802749c:	2202      	movs	r2, #2
 802749e:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 80274a0:	68b9      	ldr	r1, [r7, #8]
 80274a2:	68f8      	ldr	r0, [r7, #12]
 80274a4:	f7fc fd6b 	bl	8023f7e <lfs_mlist_append>

    return 0;
 80274a8:	2300      	movs	r3, #0
}
 80274aa:	4618      	mov	r0, r3
 80274ac:	372c      	adds	r7, #44	; 0x2c
 80274ae:	46bd      	mov	sp, r7
 80274b0:	bd90      	pop	{r4, r7, pc}
 80274b2:	bf00      	nop
 80274b4:	700ffc00 	.word	0x700ffc00

080274b8 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 80274b8:	b580      	push	{r7, lr}
 80274ba:	b082      	sub	sp, #8
 80274bc:	af00      	add	r7, sp, #0
 80274be:	6078      	str	r0, [r7, #4]
 80274c0:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80274c2:	6839      	ldr	r1, [r7, #0]
 80274c4:	6878      	ldr	r0, [r7, #4]
 80274c6:	f7fc fd38 	bl	8023f3a <lfs_mlist_remove>

    return 0;
 80274ca:	2300      	movs	r3, #0
}
 80274cc:	4618      	mov	r0, r3
 80274ce:	3708      	adds	r7, #8
 80274d0:	46bd      	mov	sp, r7
 80274d2:	bd80      	pop	{r7, pc}

080274d4 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80274d4:	b580      	push	{r7, lr}
 80274d6:	b086      	sub	sp, #24
 80274d8:	af00      	add	r7, sp, #0
 80274da:	60f8      	str	r0, [r7, #12]
 80274dc:	60b9      	str	r1, [r7, #8]
 80274de:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80274e0:	f44f 7284 	mov.w	r2, #264	; 0x108
 80274e4:	2100      	movs	r1, #0
 80274e6:	6878      	ldr	r0, [r7, #4]
 80274e8:	f005 ff46 	bl	802d378 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80274ec:	68bb      	ldr	r3, [r7, #8]
 80274ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	d110      	bne.n	8027516 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 80274f4:	687b      	ldr	r3, [r7, #4]
 80274f6:	2202      	movs	r2, #2
 80274f8:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80274fa:	687b      	ldr	r3, [r7, #4]
 80274fc:	3308      	adds	r3, #8
 80274fe:	4935      	ldr	r1, [pc, #212]	; (80275d4 <lfs_dir_rawread+0x100>)
 8027500:	461a      	mov	r2, r3
 8027502:	460b      	mov	r3, r1
 8027504:	881b      	ldrh	r3, [r3, #0]
 8027506:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8027508:	68bb      	ldr	r3, [r7, #8]
 802750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802750c:	1c5a      	adds	r2, r3, #1
 802750e:	68bb      	ldr	r3, [r7, #8]
 8027510:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027512:	2301      	movs	r3, #1
 8027514:	e05a      	b.n	80275cc <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027516:	68bb      	ldr	r3, [r7, #8]
 8027518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802751a:	2b01      	cmp	r3, #1
 802751c:	d110      	bne.n	8027540 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 802751e:	687b      	ldr	r3, [r7, #4]
 8027520:	2202      	movs	r2, #2
 8027522:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027524:	687b      	ldr	r3, [r7, #4]
 8027526:	3308      	adds	r3, #8
 8027528:	4a2b      	ldr	r2, [pc, #172]	; (80275d8 <lfs_dir_rawread+0x104>)
 802752a:	8811      	ldrh	r1, [r2, #0]
 802752c:	7892      	ldrb	r2, [r2, #2]
 802752e:	8019      	strh	r1, [r3, #0]
 8027530:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027532:	68bb      	ldr	r3, [r7, #8]
 8027534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027536:	1c5a      	adds	r2, r3, #1
 8027538:	68bb      	ldr	r3, [r7, #8]
 802753a:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 802753c:	2301      	movs	r3, #1
 802753e:	e045      	b.n	80275cc <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027540:	68bb      	ldr	r3, [r7, #8]
 8027542:	889a      	ldrh	r2, [r3, #4]
 8027544:	68bb      	ldr	r3, [r7, #8]
 8027546:	8b9b      	ldrh	r3, [r3, #28]
 8027548:	429a      	cmp	r2, r3
 802754a:	d11a      	bne.n	8027582 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 802754c:	68bb      	ldr	r3, [r7, #8]
 802754e:	7fdb      	ldrb	r3, [r3, #31]
 8027550:	f083 0301 	eor.w	r3, r3, #1
 8027554:	b2db      	uxtb	r3, r3
 8027556:	2b00      	cmp	r3, #0
 8027558:	d001      	beq.n	802755e <lfs_dir_rawread+0x8a>
                return false;
 802755a:	2300      	movs	r3, #0
 802755c:	e036      	b.n	80275cc <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 802755e:	68bb      	ldr	r3, [r7, #8]
 8027560:	f103 0108 	add.w	r1, r3, #8
 8027564:	68bb      	ldr	r3, [r7, #8]
 8027566:	3320      	adds	r3, #32
 8027568:	461a      	mov	r2, r3
 802756a:	68f8      	ldr	r0, [r7, #12]
 802756c:	f7fd ffaa 	bl	80254c4 <lfs_dir_fetch>
 8027570:	6178      	str	r0, [r7, #20]
            if (err) {
 8027572:	697b      	ldr	r3, [r7, #20]
 8027574:	2b00      	cmp	r3, #0
 8027576:	d001      	beq.n	802757c <lfs_dir_rawread+0xa8>
                return err;
 8027578:	697b      	ldr	r3, [r7, #20]
 802757a:	e027      	b.n	80275cc <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 802757c:	68bb      	ldr	r3, [r7, #8]
 802757e:	2200      	movs	r2, #0
 8027580:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8027582:	68bb      	ldr	r3, [r7, #8]
 8027584:	f103 0108 	add.w	r1, r3, #8
 8027588:	68bb      	ldr	r3, [r7, #8]
 802758a:	889a      	ldrh	r2, [r3, #4]
 802758c:	687b      	ldr	r3, [r7, #4]
 802758e:	68f8      	ldr	r0, [r7, #12]
 8027590:	f7fd ffe6 	bl	8025560 <lfs_dir_getinfo>
 8027594:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8027596:	693b      	ldr	r3, [r7, #16]
 8027598:	2b00      	cmp	r3, #0
 802759a:	d005      	beq.n	80275a8 <lfs_dir_rawread+0xd4>
 802759c:	693b      	ldr	r3, [r7, #16]
 802759e:	f113 0f02 	cmn.w	r3, #2
 80275a2:	d001      	beq.n	80275a8 <lfs_dir_rawread+0xd4>
            return err;
 80275a4:	693b      	ldr	r3, [r7, #16]
 80275a6:	e011      	b.n	80275cc <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 80275a8:	68bb      	ldr	r3, [r7, #8]
 80275aa:	889b      	ldrh	r3, [r3, #4]
 80275ac:	3301      	adds	r3, #1
 80275ae:	b29a      	uxth	r2, r3
 80275b0:	68bb      	ldr	r3, [r7, #8]
 80275b2:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 80275b4:	693b      	ldr	r3, [r7, #16]
 80275b6:	f113 0f02 	cmn.w	r3, #2
 80275ba:	d100      	bne.n	80275be <lfs_dir_rawread+0xea>
    while (true) {
 80275bc:	e7c0      	b.n	8027540 <lfs_dir_rawread+0x6c>
            break;
 80275be:	bf00      	nop
        }
    }

    dir->pos += 1;
 80275c0:	68bb      	ldr	r3, [r7, #8]
 80275c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80275c4:	1c5a      	adds	r2, r3, #1
 80275c6:	68bb      	ldr	r3, [r7, #8]
 80275c8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80275ca:	2301      	movs	r3, #1
}
 80275cc:	4618      	mov	r0, r3
 80275ce:	3718      	adds	r7, #24
 80275d0:	46bd      	mov	sp, r7
 80275d2:	bd80      	pop	{r7, pc}
 80275d4:	080330a4 	.word	0x080330a4
 80275d8:	080330a8 	.word	0x080330a8

080275dc <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80275dc:	b590      	push	{r4, r7, lr}
 80275de:	b087      	sub	sp, #28
 80275e0:	af00      	add	r7, sp, #0
 80275e2:	6078      	str	r0, [r7, #4]
 80275e4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80275e6:	683b      	ldr	r3, [r7, #0]
 80275e8:	681b      	ldr	r3, [r3, #0]
 80275ea:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80275ec:	687b      	ldr	r3, [r7, #4]
 80275ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80275f0:	69db      	ldr	r3, [r3, #28]
 80275f2:	3b08      	subs	r3, #8
 80275f4:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80275f6:	697a      	ldr	r2, [r7, #20]
 80275f8:	693b      	ldr	r3, [r7, #16]
 80275fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80275fe:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8027600:	68fb      	ldr	r3, [r7, #12]
 8027602:	2b00      	cmp	r3, #0
 8027604:	d101      	bne.n	802760a <lfs_ctz_index+0x2e>
        return 0;
 8027606:	2300      	movs	r3, #0
 8027608:	e01c      	b.n	8027644 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 802760a:	68fb      	ldr	r3, [r7, #12]
 802760c:	3b01      	subs	r3, #1
 802760e:	4618      	mov	r0, r3
 8027610:	f7fb fe0e 	bl	8023230 <lfs_popc>
 8027614:	4603      	mov	r3, r0
 8027616:	3302      	adds	r3, #2
 8027618:	009b      	lsls	r3, r3, #2
 802761a:	697a      	ldr	r2, [r7, #20]
 802761c:	1ad2      	subs	r2, r2, r3
 802761e:	693b      	ldr	r3, [r7, #16]
 8027620:	fbb2 f3f3 	udiv	r3, r2, r3
 8027624:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027626:	693b      	ldr	r3, [r7, #16]
 8027628:	68fa      	ldr	r2, [r7, #12]
 802762a:	fb02 f303 	mul.w	r3, r2, r3
 802762e:	697a      	ldr	r2, [r7, #20]
 8027630:	1ad4      	subs	r4, r2, r3
 8027632:	68f8      	ldr	r0, [r7, #12]
 8027634:	f7fb fdfc 	bl	8023230 <lfs_popc>
 8027638:	4603      	mov	r3, r0
 802763a:	009b      	lsls	r3, r3, #2
 802763c:	1ae2      	subs	r2, r4, r3
 802763e:	683b      	ldr	r3, [r7, #0]
 8027640:	601a      	str	r2, [r3, #0]
    return i;
 8027642:	68fb      	ldr	r3, [r7, #12]
}
 8027644:	4618      	mov	r0, r3
 8027646:	371c      	adds	r7, #28
 8027648:	46bd      	mov	sp, r7
 802764a:	bd90      	pop	{r4, r7, pc}

0802764c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 802764c:	b590      	push	{r4, r7, lr}
 802764e:	b08f      	sub	sp, #60	; 0x3c
 8027650:	af04      	add	r7, sp, #16
 8027652:	60f8      	str	r0, [r7, #12]
 8027654:	60b9      	str	r1, [r7, #8]
 8027656:	607a      	str	r2, [r7, #4]
 8027658:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 802765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802765c:	2b00      	cmp	r3, #0
 802765e:	d108      	bne.n	8027672 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8027660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027662:	f04f 32ff 	mov.w	r2, #4294967295
 8027666:	601a      	str	r2, [r3, #0]
        *off = 0;
 8027668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802766a:	2200      	movs	r2, #0
 802766c:	601a      	str	r2, [r3, #0]
        return 0;
 802766e:	2300      	movs	r3, #0
 8027670:	e053      	b.n	802771a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027674:	3b01      	subs	r3, #1
 8027676:	617b      	str	r3, [r7, #20]
 8027678:	f107 0314 	add.w	r3, r7, #20
 802767c:	4619      	mov	r1, r3
 802767e:	68f8      	ldr	r0, [r7, #12]
 8027680:	f7ff ffac 	bl	80275dc <lfs_ctz_index>
 8027684:	4603      	mov	r3, r0
 8027686:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8027688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802768c:	4619      	mov	r1, r3
 802768e:	68f8      	ldr	r0, [r7, #12]
 8027690:	f7ff ffa4 	bl	80275dc <lfs_ctz_index>
 8027694:	4603      	mov	r3, r0
 8027696:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8027698:	e034      	b.n	8027704 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 802769a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802769c:	6a3b      	ldr	r3, [r7, #32]
 802769e:	1ad3      	subs	r3, r2, r3
 80276a0:	3301      	adds	r3, #1
 80276a2:	4618      	mov	r0, r3
 80276a4:	f7fb fda5 	bl	80231f2 <lfs_npw2>
 80276a8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80276aa:	1e5c      	subs	r4, r3, #1
 80276ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80276ae:	f7fb fdb0 	bl	8023212 <lfs_ctz>
 80276b2:	4603      	mov	r3, r0
 80276b4:	4619      	mov	r1, r3
 80276b6:	4620      	mov	r0, r4
 80276b8:	f7fb fd64 	bl	8023184 <lfs_min>
 80276bc:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80276be:	683b      	ldr	r3, [r7, #0]
 80276c0:	69fa      	ldr	r2, [r7, #28]
 80276c2:	0092      	lsls	r2, r2, #2
 80276c4:	2104      	movs	r1, #4
 80276c6:	9103      	str	r1, [sp, #12]
 80276c8:	4639      	mov	r1, r7
 80276ca:	9102      	str	r1, [sp, #8]
 80276cc:	9201      	str	r2, [sp, #4]
 80276ce:	9300      	str	r3, [sp, #0]
 80276d0:	2304      	movs	r3, #4
 80276d2:	687a      	ldr	r2, [r7, #4]
 80276d4:	68b9      	ldr	r1, [r7, #8]
 80276d6:	68f8      	ldr	r0, [r7, #12]
 80276d8:	f7fb fe30 	bl	802333c <lfs_bd_read>
 80276dc:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80276de:	683b      	ldr	r3, [r7, #0]
 80276e0:	4618      	mov	r0, r3
 80276e2:	f7fb fdbf 	bl	8023264 <lfs_fromle32>
 80276e6:	4603      	mov	r3, r0
 80276e8:	603b      	str	r3, [r7, #0]
        if (err) {
 80276ea:	69bb      	ldr	r3, [r7, #24]
 80276ec:	2b00      	cmp	r3, #0
 80276ee:	d001      	beq.n	80276f4 <lfs_ctz_find+0xa8>
            return err;
 80276f0:	69bb      	ldr	r3, [r7, #24]
 80276f2:	e012      	b.n	802771a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80276f4:	2201      	movs	r2, #1
 80276f6:	69fb      	ldr	r3, [r7, #28]
 80276f8:	fa02 f303 	lsl.w	r3, r2, r3
 80276fc:	461a      	mov	r2, r3
 80276fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027700:	1a9b      	subs	r3, r3, r2
 8027702:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8027704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027706:	6a3b      	ldr	r3, [r7, #32]
 8027708:	429a      	cmp	r2, r3
 802770a:	d8c6      	bhi.n	802769a <lfs_ctz_find+0x4e>
    }

    *block = head;
 802770c:	683a      	ldr	r2, [r7, #0]
 802770e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027710:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027716:	601a      	str	r2, [r3, #0]
    return 0;
 8027718:	2300      	movs	r3, #0
}
 802771a:	4618      	mov	r0, r3
 802771c:	372c      	adds	r7, #44	; 0x2c
 802771e:	46bd      	mov	sp, r7
 8027720:	bd90      	pop	{r4, r7, pc}
	...

08027724 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027724:	b580      	push	{r7, lr}
 8027726:	b092      	sub	sp, #72	; 0x48
 8027728:	af04      	add	r7, sp, #16
 802772a:	60f8      	str	r0, [r7, #12]
 802772c:	60b9      	str	r1, [r7, #8]
 802772e:	607a      	str	r2, [r7, #4]
 8027730:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027732:	f107 0320 	add.w	r3, r7, #32
 8027736:	4619      	mov	r1, r3
 8027738:	68f8      	ldr	r0, [r7, #12]
 802773a:	f7fc fc89 	bl	8024050 <lfs_alloc>
 802773e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8027740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027742:	2b00      	cmp	r3, #0
 8027744:	d001      	beq.n	802774a <lfs_ctz_extend+0x26>
            return err;
 8027746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027748:	e0e9      	b.n	802791e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 802774a:	6a3b      	ldr	r3, [r7, #32]
 802774c:	4619      	mov	r1, r3
 802774e:	68f8      	ldr	r0, [r7, #12]
 8027750:	f7fc f8e6 	bl	8023920 <lfs_bd_erase>
 8027754:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8027756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027758:	2b00      	cmp	r3, #0
 802775a:	d006      	beq.n	802776a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 802775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802775e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027762:	f000 80cb 	beq.w	80278fc <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027768:	e0d9      	b.n	802791e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 802776a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802776c:	2b00      	cmp	r3, #0
 802776e:	d107      	bne.n	8027780 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027770:	6a3a      	ldr	r2, [r7, #32]
 8027772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027774:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027778:	2200      	movs	r2, #0
 802777a:	601a      	str	r2, [r3, #0]
                return 0;
 802777c:	2300      	movs	r3, #0
 802777e:	e0ce      	b.n	802791e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027782:	3b01      	subs	r3, #1
 8027784:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027786:	f107 031c 	add.w	r3, r7, #28
 802778a:	4619      	mov	r1, r3
 802778c:	68f8      	ldr	r0, [r7, #12]
 802778e:	f7ff ff25 	bl	80275dc <lfs_ctz_index>
 8027792:	4603      	mov	r3, r0
 8027794:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8027796:	69fb      	ldr	r3, [r7, #28]
 8027798:	3301      	adds	r3, #1
 802779a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 802779c:	68fb      	ldr	r3, [r7, #12]
 802779e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80277a0:	69da      	ldr	r2, [r3, #28]
 80277a2:	69fb      	ldr	r3, [r7, #28]
 80277a4:	429a      	cmp	r2, r3
 80277a6:	d044      	beq.n	8027832 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 80277a8:	2300      	movs	r3, #0
 80277aa:	637b      	str	r3, [r7, #52]	; 0x34
 80277ac:	e035      	b.n	802781a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80277ae:	69fa      	ldr	r2, [r7, #28]
 80277b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80277b2:	1ad2      	subs	r2, r2, r3
 80277b4:	2301      	movs	r3, #1
 80277b6:	9303      	str	r3, [sp, #12]
 80277b8:	f107 0317 	add.w	r3, r7, #23
 80277bc:	9302      	str	r3, [sp, #8]
 80277be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80277c0:	9301      	str	r3, [sp, #4]
 80277c2:	683b      	ldr	r3, [r7, #0]
 80277c4:	9300      	str	r3, [sp, #0]
 80277c6:	4613      	mov	r3, r2
 80277c8:	687a      	ldr	r2, [r7, #4]
 80277ca:	2100      	movs	r1, #0
 80277cc:	68f8      	ldr	r0, [r7, #12]
 80277ce:	f7fb fdb5 	bl	802333c <lfs_bd_read>
 80277d2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80277d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80277d6:	2b00      	cmp	r3, #0
 80277d8:	d001      	beq.n	80277de <lfs_ctz_extend+0xba>
                        return err;
 80277da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80277dc:	e09f      	b.n	802791e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80277de:	6a3b      	ldr	r3, [r7, #32]
 80277e0:	2201      	movs	r2, #1
 80277e2:	9203      	str	r2, [sp, #12]
 80277e4:	f107 0217 	add.w	r2, r7, #23
 80277e8:	9202      	str	r2, [sp, #8]
 80277ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80277ec:	9201      	str	r2, [sp, #4]
 80277ee:	9300      	str	r3, [sp, #0]
 80277f0:	2301      	movs	r3, #1
 80277f2:	687a      	ldr	r2, [r7, #4]
 80277f4:	68b9      	ldr	r1, [r7, #8]
 80277f6:	68f8      	ldr	r0, [r7, #12]
 80277f8:	f7fb ffe6 	bl	80237c8 <lfs_bd_prog>
 80277fc:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80277fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027800:	2b00      	cmp	r3, #0
 8027802:	d007      	beq.n	8027814 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8027804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027806:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802780a:	d101      	bne.n	8027810 <lfs_ctz_extend+0xec>
                            goto relocate;
 802780c:	bf00      	nop
                    goto relocate;
 802780e:	e075      	b.n	80278fc <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8027810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8027812:	e084      	b.n	802791e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027816:	3301      	adds	r3, #1
 8027818:	637b      	str	r3, [r7, #52]	; 0x34
 802781a:	69fb      	ldr	r3, [r7, #28]
 802781c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802781e:	429a      	cmp	r2, r3
 8027820:	d3c5      	bcc.n	80277ae <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8027822:	6a3a      	ldr	r2, [r7, #32]
 8027824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027826:	601a      	str	r2, [r3, #0]
                *off = noff;
 8027828:	69fa      	ldr	r2, [r7, #28]
 802782a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802782c:	601a      	str	r2, [r3, #0]
                return 0;
 802782e:	2300      	movs	r3, #0
 8027830:	e075      	b.n	802791e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8027832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027834:	3301      	adds	r3, #1
 8027836:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8027838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802783a:	f7fb fcea 	bl	8023212 <lfs_ctz>
 802783e:	4603      	mov	r3, r0
 8027840:	3301      	adds	r3, #1
 8027842:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8027844:	683b      	ldr	r3, [r7, #0]
 8027846:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8027848:	2300      	movs	r3, #0
 802784a:	633b      	str	r3, [r7, #48]	; 0x30
 802784c:	e049      	b.n	80278e2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 802784e:	69bb      	ldr	r3, [r7, #24]
 8027850:	4618      	mov	r0, r3
 8027852:	f7fb fd12 	bl	802327a <lfs_tole32>
 8027856:	4603      	mov	r3, r0
 8027858:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 802785a:	6a3b      	ldr	r3, [r7, #32]
 802785c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802785e:	0092      	lsls	r2, r2, #2
 8027860:	2104      	movs	r1, #4
 8027862:	9103      	str	r1, [sp, #12]
 8027864:	f107 0118 	add.w	r1, r7, #24
 8027868:	9102      	str	r1, [sp, #8]
 802786a:	9201      	str	r2, [sp, #4]
 802786c:	9300      	str	r3, [sp, #0]
 802786e:	2301      	movs	r3, #1
 8027870:	687a      	ldr	r2, [r7, #4]
 8027872:	68b9      	ldr	r1, [r7, #8]
 8027874:	68f8      	ldr	r0, [r7, #12]
 8027876:	f7fb ffa7 	bl	80237c8 <lfs_bd_prog>
 802787a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 802787c:	69bb      	ldr	r3, [r7, #24]
 802787e:	4618      	mov	r0, r3
 8027880:	f7fb fcf0 	bl	8023264 <lfs_fromle32>
 8027884:	4603      	mov	r3, r0
 8027886:	61bb      	str	r3, [r7, #24]
                if (err) {
 8027888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802788a:	2b00      	cmp	r3, #0
 802788c:	d005      	beq.n	802789a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 802788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027890:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027894:	d034      	beq.n	8027900 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8027896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027898:	e041      	b.n	802791e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 802789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802789c:	3b01      	subs	r3, #1
 802789e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80278a0:	429a      	cmp	r2, r3
 80278a2:	d01b      	beq.n	80278dc <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80278a4:	69bb      	ldr	r3, [r7, #24]
 80278a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80278a8:	0092      	lsls	r2, r2, #2
 80278aa:	2104      	movs	r1, #4
 80278ac:	9103      	str	r1, [sp, #12]
 80278ae:	f107 0118 	add.w	r1, r7, #24
 80278b2:	9102      	str	r1, [sp, #8]
 80278b4:	9201      	str	r2, [sp, #4]
 80278b6:	9300      	str	r3, [sp, #0]
 80278b8:	2304      	movs	r3, #4
 80278ba:	687a      	ldr	r2, [r7, #4]
 80278bc:	2100      	movs	r1, #0
 80278be:	68f8      	ldr	r0, [r7, #12]
 80278c0:	f7fb fd3c 	bl	802333c <lfs_bd_read>
 80278c4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80278c6:	69bb      	ldr	r3, [r7, #24]
 80278c8:	4618      	mov	r0, r3
 80278ca:	f7fb fccb 	bl	8023264 <lfs_fromle32>
 80278ce:	4603      	mov	r3, r0
 80278d0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80278d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80278d4:	2b00      	cmp	r3, #0
 80278d6:	d001      	beq.n	80278dc <lfs_ctz_extend+0x1b8>
                        return err;
 80278d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80278da:	e020      	b.n	802791e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80278dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80278de:	3301      	adds	r3, #1
 80278e0:	633b      	str	r3, [r7, #48]	; 0x30
 80278e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80278e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80278e6:	429a      	cmp	r2, r3
 80278e8:	d3b1      	bcc.n	802784e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80278ea:	6a3a      	ldr	r2, [r7, #32]
 80278ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80278ee:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80278f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80278f2:	009a      	lsls	r2, r3, #2
 80278f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80278f6:	601a      	str	r2, [r3, #0]
            return 0;
 80278f8:	2300      	movs	r3, #0
 80278fa:	e010      	b.n	802791e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80278fc:	bf00      	nop
 80278fe:	e000      	b.n	8027902 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8027900:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8027902:	6a3b      	ldr	r3, [r7, #32]
 8027904:	4a08      	ldr	r2, [pc, #32]	; (8027928 <lfs_ctz_extend+0x204>)
 8027906:	9200      	str	r2, [sp, #0]
 8027908:	f640 22da 	movw	r2, #2778	; 0xada
 802790c:	4907      	ldr	r1, [pc, #28]	; (802792c <lfs_ctz_extend+0x208>)
 802790e:	4808      	ldr	r0, [pc, #32]	; (8027930 <lfs_ctz_extend+0x20c>)
 8027910:	f005 fb9c 	bl	802d04c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8027914:	68b9      	ldr	r1, [r7, #8]
 8027916:	68f8      	ldr	r0, [r7, #12]
 8027918:	f7fb fcea 	bl	80232f0 <lfs_cache_drop>
    while (true) {
 802791c:	e709      	b.n	8027732 <lfs_ctz_extend+0xe>
    }
}
 802791e:	4618      	mov	r0, r3
 8027920:	3738      	adds	r7, #56	; 0x38
 8027922:	46bd      	mov	sp, r7
 8027924:	bd80      	pop	{r7, pc}
 8027926:	bf00      	nop
 8027928:	08033054 	.word	0x08033054
 802792c:	08032f40 	.word	0x08032f40
 8027930:	080330d4 	.word	0x080330d4

08027934 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8027934:	b580      	push	{r7, lr}
 8027936:	b090      	sub	sp, #64	; 0x40
 8027938:	af04      	add	r7, sp, #16
 802793a:	60f8      	str	r0, [r7, #12]
 802793c:	60b9      	str	r1, [r7, #8]
 802793e:	607a      	str	r2, [r7, #4]
 8027940:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027944:	2b00      	cmp	r3, #0
 8027946:	d101      	bne.n	802794c <lfs_ctz_traverse+0x18>
        return 0;
 8027948:	2300      	movs	r3, #0
 802794a:	e06b      	b.n	8027a24 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 802794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802794e:	3b01      	subs	r3, #1
 8027950:	61fb      	str	r3, [r7, #28]
 8027952:	f107 031c 	add.w	r3, r7, #28
 8027956:	4619      	mov	r1, r3
 8027958:	68f8      	ldr	r0, [r7, #12]
 802795a:	f7ff fe3f 	bl	80275dc <lfs_ctz_index>
 802795e:	4603      	mov	r3, r0
 8027960:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8027962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027964:	6839      	ldr	r1, [r7, #0]
 8027966:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027968:	4798      	blx	r3
 802796a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 802796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802796e:	2b00      	cmp	r3, #0
 8027970:	d001      	beq.n	8027976 <lfs_ctz_traverse+0x42>
            return err;
 8027972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027974:	e056      	b.n	8027a24 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8027976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027978:	2b00      	cmp	r3, #0
 802797a:	d101      	bne.n	8027980 <lfs_ctz_traverse+0x4c>
            return 0;
 802797c:	2300      	movs	r3, #0
 802797e:	e051      	b.n	8027a24 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8027980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027982:	f003 0301 	and.w	r3, r3, #1
 8027986:	f1c3 0302 	rsb	r3, r3, #2
 802798a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 802798c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 802798e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8027990:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8027992:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8027994:	9303      	str	r3, [sp, #12]
 8027996:	f107 0314 	add.w	r3, r7, #20
 802799a:	9302      	str	r3, [sp, #8]
 802799c:	2300      	movs	r3, #0
 802799e:	9301      	str	r3, [sp, #4]
 80279a0:	683b      	ldr	r3, [r7, #0]
 80279a2:	9300      	str	r3, [sp, #0]
 80279a4:	4613      	mov	r3, r2
 80279a6:	687a      	ldr	r2, [r7, #4]
 80279a8:	68b9      	ldr	r1, [r7, #8]
 80279aa:	68f8      	ldr	r0, [r7, #12]
 80279ac:	f7fb fcc6 	bl	802333c <lfs_bd_read>
 80279b0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80279b2:	697b      	ldr	r3, [r7, #20]
 80279b4:	4618      	mov	r0, r3
 80279b6:	f7fb fc55 	bl	8023264 <lfs_fromle32>
 80279ba:	4603      	mov	r3, r0
 80279bc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80279be:	69bb      	ldr	r3, [r7, #24]
 80279c0:	4618      	mov	r0, r3
 80279c2:	f7fb fc4f 	bl	8023264 <lfs_fromle32>
 80279c6:	4603      	mov	r3, r0
 80279c8:	61bb      	str	r3, [r7, #24]
        if (err) {
 80279ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80279cc:	2b00      	cmp	r3, #0
 80279ce:	d001      	beq.n	80279d4 <lfs_ctz_traverse+0xa0>
            return err;
 80279d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80279d2:	e027      	b.n	8027a24 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80279d4:	2300      	movs	r3, #0
 80279d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80279d8:	e012      	b.n	8027a00 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80279da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80279dc:	009b      	lsls	r3, r3, #2
 80279de:	3330      	adds	r3, #48	; 0x30
 80279e0:	443b      	add	r3, r7
 80279e2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80279e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80279e8:	4611      	mov	r1, r2
 80279ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80279ec:	4798      	blx	r3
 80279ee:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 80279f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80279f2:	2b00      	cmp	r3, #0
 80279f4:	d001      	beq.n	80279fa <lfs_ctz_traverse+0xc6>
                return err;
 80279f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80279f8:	e014      	b.n	8027a24 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80279fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80279fc:	3301      	adds	r3, #1
 80279fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8027a00:	6a3b      	ldr	r3, [r7, #32]
 8027a02:	3b01      	subs	r3, #1
 8027a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027a06:	429a      	cmp	r2, r3
 8027a08:	dbe7      	blt.n	80279da <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8027a0a:	6a3b      	ldr	r3, [r7, #32]
 8027a0c:	3b01      	subs	r3, #1
 8027a0e:	009b      	lsls	r3, r3, #2
 8027a10:	3330      	adds	r3, #48	; 0x30
 8027a12:	443b      	add	r3, r7
 8027a14:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8027a18:	603b      	str	r3, [r7, #0]
        index -= count;
 8027a1a:	6a3b      	ldr	r3, [r7, #32]
 8027a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027a1e:	1ad3      	subs	r3, r2, r3
 8027a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8027a22:	e79e      	b.n	8027962 <lfs_ctz_traverse+0x2e>
    }
}
 8027a24:	4618      	mov	r0, r3
 8027a26:	3730      	adds	r7, #48	; 0x30
 8027a28:	46bd      	mov	sp, r7
 8027a2a:	bd80      	pop	{r7, pc}

08027a2c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8027a2c:	b5b0      	push	{r4, r5, r7, lr}
 8027a2e:	b09a      	sub	sp, #104	; 0x68
 8027a30:	af02      	add	r7, sp, #8
 8027a32:	60f8      	str	r0, [r7, #12]
 8027a34:	60b9      	str	r1, [r7, #8]
 8027a36:	607a      	str	r2, [r7, #4]
 8027a38:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027a3a:	683b      	ldr	r3, [r7, #0]
 8027a3c:	f003 0302 	and.w	r3, r3, #2
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	d008      	beq.n	8027a56 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8027a44:	68f8      	ldr	r0, [r7, #12]
 8027a46:	f002 fb63 	bl	802a110 <lfs_fs_forceconsistency>
 8027a4a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8027a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a4e:	2b00      	cmp	r3, #0
 8027a50:	d001      	beq.n	8027a56 <lfs_file_rawopencfg+0x2a>
            return err;
 8027a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a54:	e1b0      	b.n	8027db8 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8027a56:	68bb      	ldr	r3, [r7, #8]
 8027a58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8027a5a:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8027a5c:	683a      	ldr	r2, [r7, #0]
 8027a5e:	68bb      	ldr	r3, [r7, #8]
 8027a60:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8027a62:	68bb      	ldr	r3, [r7, #8]
 8027a64:	2200      	movs	r2, #0
 8027a66:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8027a68:	68bb      	ldr	r3, [r7, #8]
 8027a6a:	2200      	movs	r2, #0
 8027a6c:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8027a6e:	68bb      	ldr	r3, [r7, #8]
 8027a70:	2200      	movs	r2, #0
 8027a72:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8027a74:	68bb      	ldr	r3, [r7, #8]
 8027a76:	f103 0108 	add.w	r1, r3, #8
 8027a7a:	68bb      	ldr	r3, [r7, #8]
 8027a7c:	3304      	adds	r3, #4
 8027a7e:	1d3a      	adds	r2, r7, #4
 8027a80:	68f8      	ldr	r0, [r7, #12]
 8027a82:	f7fd fe31 	bl	80256e8 <lfs_dir_find>
 8027a86:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8027a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027a8a:	2b00      	cmp	r3, #0
 8027a8c:	da0c      	bge.n	8027aa8 <lfs_file_rawopencfg+0x7c>
 8027a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027a90:	f113 0f02 	cmn.w	r3, #2
 8027a94:	d105      	bne.n	8027aa2 <lfs_file_rawopencfg+0x76>
 8027a96:	68bb      	ldr	r3, [r7, #8]
 8027a98:	889b      	ldrh	r3, [r3, #4]
 8027a9a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8027a9e:	4293      	cmp	r3, r2
 8027aa0:	d102      	bne.n	8027aa8 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8027aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027aa6:	e17c      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8027aa8:	68bb      	ldr	r3, [r7, #8]
 8027aaa:	2201      	movs	r2, #1
 8027aac:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8027aae:	68b9      	ldr	r1, [r7, #8]
 8027ab0:	68f8      	ldr	r0, [r7, #12]
 8027ab2:	f7fc fa64 	bl	8023f7e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8027ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027ab8:	f113 0f02 	cmn.w	r3, #2
 8027abc:	d14e      	bne.n	8027b5c <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8027abe:	683b      	ldr	r3, [r7, #0]
 8027ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027ac4:	2b00      	cmp	r3, #0
 8027ac6:	d103      	bne.n	8027ad0 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8027ac8:	f06f 0301 	mvn.w	r3, #1
 8027acc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027ace:	e168      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8027ad0:	687b      	ldr	r3, [r7, #4]
 8027ad2:	4618      	mov	r0, r3
 8027ad4:	f7e8 fbe4 	bl	80102a0 <strlen>
 8027ad8:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8027ada:	68fb      	ldr	r3, [r7, #12]
 8027adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027ae0:	429a      	cmp	r2, r3
 8027ae2:	d903      	bls.n	8027aec <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8027ae4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027aea:	e15a      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8027aec:	68bb      	ldr	r3, [r7, #8]
 8027aee:	f103 0108 	add.w	r1, r3, #8
 8027af2:	68bb      	ldr	r3, [r7, #8]
 8027af4:	889b      	ldrh	r3, [r3, #4]
 8027af6:	029b      	lsls	r3, r3, #10
 8027af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027b02:	2300      	movs	r3, #0
 8027b04:	633b      	str	r3, [r7, #48]	; 0x30
 8027b06:	68bb      	ldr	r3, [r7, #8]
 8027b08:	889b      	ldrh	r3, [r3, #4]
 8027b0a:	029a      	lsls	r2, r3, #10
 8027b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027b0e:	4313      	orrs	r3, r2
 8027b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027b14:	637b      	str	r3, [r7, #52]	; 0x34
 8027b16:	687b      	ldr	r3, [r7, #4]
 8027b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8027b1a:	68bb      	ldr	r3, [r7, #8]
 8027b1c:	889b      	ldrh	r3, [r3, #4]
 8027b1e:	029b      	lsls	r3, r3, #10
 8027b20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027b2a:	2300      	movs	r3, #0
 8027b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8027b2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8027b32:	2303      	movs	r3, #3
 8027b34:	68f8      	ldr	r0, [r7, #12]
 8027b36:	f7ff fadf 	bl	80270f8 <lfs_dir_commit>
 8027b3a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8027b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b3e:	f113 0f1c 	cmn.w	r3, #28
 8027b42:	d001      	beq.n	8027b48 <lfs_file_rawopencfg+0x11c>
 8027b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b46:	e001      	b.n	8027b4c <lfs_file_rawopencfg+0x120>
 8027b48:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8027b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	f040 8125 	bne.w	8027da0 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8027b56:	4b9a      	ldr	r3, [pc, #616]	; (8027dc0 <lfs_file_rawopencfg+0x394>)
 8027b58:	65bb      	str	r3, [r7, #88]	; 0x58
 8027b5a:	e044      	b.n	8027be6 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8027b5c:	683b      	ldr	r3, [r7, #0]
 8027b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027b62:	2b00      	cmp	r3, #0
 8027b64:	d003      	beq.n	8027b6e <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8027b66:	f06f 0310 	mvn.w	r3, #16
 8027b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027b6c:	e119      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8027b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027b70:	4618      	mov	r0, r3
 8027b72:	f7fb fff3 	bl	8023b5c <lfs_tag_type3>
 8027b76:	4603      	mov	r3, r0
 8027b78:	2b01      	cmp	r3, #1
 8027b7a:	d003      	beq.n	8027b84 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8027b7c:	f06f 0314 	mvn.w	r3, #20
 8027b80:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027b82:	e10e      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8027b84:	683b      	ldr	r3, [r7, #0]
 8027b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027b8a:	2b00      	cmp	r3, #0
 8027b8c:	d00e      	beq.n	8027bac <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8027b8e:	68bb      	ldr	r3, [r7, #8]
 8027b90:	889b      	ldrh	r3, [r3, #4]
 8027b92:	029b      	lsls	r3, r3, #10
 8027b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027b9c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8027b9e:	68bb      	ldr	r3, [r7, #8]
 8027ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ba2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027ba6:	68bb      	ldr	r3, [r7, #8]
 8027ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8027baa:	e01c      	b.n	8027be6 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027bac:	68bb      	ldr	r3, [r7, #8]
 8027bae:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027bb2:	68bb      	ldr	r3, [r7, #8]
 8027bb4:	889b      	ldrh	r3, [r3, #4]
 8027bb6:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027bb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027bbc:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027bc0:	68ba      	ldr	r2, [r7, #8]
 8027bc2:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027bc4:	9200      	str	r2, [sp, #0]
 8027bc6:	4a7f      	ldr	r2, [pc, #508]	; (8027dc4 <lfs_file_rawopencfg+0x398>)
 8027bc8:	68f8      	ldr	r0, [r7, #12]
 8027bca:	f7fc fbdb 	bl	8024384 <lfs_dir_get>
 8027bce:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8027bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027bd2:	2b00      	cmp	r3, #0
 8027bd4:	da02      	bge.n	8027bdc <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8027bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027bda:	e0e2      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8027bdc:	68bb      	ldr	r3, [r7, #8]
 8027bde:	3328      	adds	r3, #40	; 0x28
 8027be0:	4618      	mov	r0, r3
 8027be2:	f7fc f8ed 	bl	8023dc0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8027be6:	2300      	movs	r3, #0
 8027be8:	657b      	str	r3, [r7, #84]	; 0x54
 8027bea:	e063      	b.n	8027cb4 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8027bec:	68bb      	ldr	r3, [r7, #8]
 8027bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027bf0:	f003 0301 	and.w	r3, r3, #1
 8027bf4:	2b00      	cmp	r3, #0
 8027bf6:	d03c      	beq.n	8027c72 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027bf8:	68bb      	ldr	r3, [r7, #8]
 8027bfa:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8027bfe:	68bb      	ldr	r3, [r7, #8]
 8027c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027c02:	6859      	ldr	r1, [r3, #4]
 8027c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027c06:	4613      	mov	r3, r2
 8027c08:	005b      	lsls	r3, r3, #1
 8027c0a:	4413      	add	r3, r2
 8027c0c:	009b      	lsls	r3, r3, #2
 8027c0e:	440b      	add	r3, r1
 8027c10:	781b      	ldrb	r3, [r3, #0]
 8027c12:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8027c16:	051a      	lsls	r2, r3, #20
 8027c18:	68bb      	ldr	r3, [r7, #8]
 8027c1a:	889b      	ldrh	r3, [r3, #4]
 8027c1c:	029b      	lsls	r3, r3, #10
 8027c1e:	ea42 0103 	orr.w	r1, r2, r3
 8027c22:	68bb      	ldr	r3, [r7, #8]
 8027c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027c26:	6858      	ldr	r0, [r3, #4]
 8027c28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027c2a:	4613      	mov	r3, r2
 8027c2c:	005b      	lsls	r3, r3, #1
 8027c2e:	4413      	add	r3, r2
 8027c30:	009b      	lsls	r3, r3, #2
 8027c32:	4403      	add	r3, r0
 8027c34:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027c36:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8027c3a:	68bb      	ldr	r3, [r7, #8]
 8027c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027c3e:	6859      	ldr	r1, [r3, #4]
 8027c40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027c42:	4613      	mov	r3, r2
 8027c44:	005b      	lsls	r3, r3, #1
 8027c46:	4413      	add	r3, r2
 8027c48:	009b      	lsls	r3, r3, #2
 8027c4a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027c4c:	685b      	ldr	r3, [r3, #4]
 8027c4e:	9300      	str	r3, [sp, #0]
 8027c50:	4603      	mov	r3, r0
 8027c52:	4a5d      	ldr	r2, [pc, #372]	; (8027dc8 <lfs_file_rawopencfg+0x39c>)
 8027c54:	4621      	mov	r1, r4
 8027c56:	68f8      	ldr	r0, [r7, #12]
 8027c58:	f7fc fb94 	bl	8024384 <lfs_dir_get>
 8027c5c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8027c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c60:	2b00      	cmp	r3, #0
 8027c62:	da06      	bge.n	8027c72 <lfs_file_rawopencfg+0x246>
 8027c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c66:	f113 0f02 	cmn.w	r3, #2
 8027c6a:	d002      	beq.n	8027c72 <lfs_file_rawopencfg+0x246>
                err = res;
 8027c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8027c70:	e097      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027c72:	68bb      	ldr	r3, [r7, #8]
 8027c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c76:	f003 0302 	and.w	r3, r3, #2
 8027c7a:	2b00      	cmp	r3, #0
 8027c7c:	d017      	beq.n	8027cae <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8027c7e:	68bb      	ldr	r3, [r7, #8]
 8027c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027c82:	6859      	ldr	r1, [r3, #4]
 8027c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027c86:	4613      	mov	r3, r2
 8027c88:	005b      	lsls	r3, r3, #1
 8027c8a:	4413      	add	r3, r2
 8027c8c:	009b      	lsls	r3, r3, #2
 8027c8e:	440b      	add	r3, r1
 8027c90:	689a      	ldr	r2, [r3, #8]
 8027c92:	68fb      	ldr	r3, [r7, #12]
 8027c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027c96:	429a      	cmp	r2, r3
 8027c98:	d903      	bls.n	8027ca2 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8027c9a:	f06f 031b 	mvn.w	r3, #27
 8027c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8027ca0:	e07f      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8027ca2:	68bb      	ldr	r3, [r7, #8]
 8027ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ca6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027caa:	68bb      	ldr	r3, [r7, #8]
 8027cac:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8027cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027cb0:	3301      	adds	r3, #1
 8027cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8027cb4:	68bb      	ldr	r3, [r7, #8]
 8027cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027cb8:	689b      	ldr	r3, [r3, #8]
 8027cba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027cbc:	429a      	cmp	r2, r3
 8027cbe:	d395      	bcc.n	8027bec <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8027cc0:	68bb      	ldr	r3, [r7, #8]
 8027cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027cc4:	681b      	ldr	r3, [r3, #0]
 8027cc6:	2b00      	cmp	r3, #0
 8027cc8:	d005      	beq.n	8027cd6 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8027cca:	68bb      	ldr	r3, [r7, #8]
 8027ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027cce:	681a      	ldr	r2, [r3, #0]
 8027cd0:	68bb      	ldr	r3, [r7, #8]
 8027cd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8027cd4:	e010      	b.n	8027cf8 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8027cd6:	68fb      	ldr	r3, [r7, #12]
 8027cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027cdc:	4618      	mov	r0, r3
 8027cde:	f7fb faf0 	bl	80232c2 <lfs_malloc>
 8027ce2:	4602      	mov	r2, r0
 8027ce4:	68bb      	ldr	r3, [r7, #8]
 8027ce6:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8027ce8:	68bb      	ldr	r3, [r7, #8]
 8027cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027cec:	2b00      	cmp	r3, #0
 8027cee:	d103      	bne.n	8027cf8 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8027cf0:	f06f 030b 	mvn.w	r3, #11
 8027cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027cf6:	e054      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8027cf8:	68bb      	ldr	r3, [r7, #8]
 8027cfa:	3340      	adds	r3, #64	; 0x40
 8027cfc:	4619      	mov	r1, r3
 8027cfe:	68f8      	ldr	r0, [r7, #12]
 8027d00:	f7fb fb05 	bl	802330e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8027d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027d06:	4618      	mov	r0, r3
 8027d08:	f7fb ff28 	bl	8023b5c <lfs_tag_type3>
 8027d0c:	4603      	mov	r3, r0
 8027d0e:	461a      	mov	r2, r3
 8027d10:	f240 2301 	movw	r3, #513	; 0x201
 8027d14:	429a      	cmp	r2, r3
 8027d16:	d141      	bne.n	8027d9c <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8027d18:	68bb      	ldr	r3, [r7, #8]
 8027d1a:	f06f 0201 	mvn.w	r2, #1
 8027d1e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8027d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027d22:	4618      	mov	r0, r3
 8027d24:	f7fb ff54 	bl	8023bd0 <lfs_tag_size>
 8027d28:	4602      	mov	r2, r0
 8027d2a:	68bb      	ldr	r3, [r7, #8]
 8027d2c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8027d2e:	68bb      	ldr	r3, [r7, #8]
 8027d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8027d36:	68bb      	ldr	r3, [r7, #8]
 8027d38:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8027d3a:	68bb      	ldr	r3, [r7, #8]
 8027d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027d3e:	68bb      	ldr	r3, [r7, #8]
 8027d40:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8027d42:	68bb      	ldr	r3, [r7, #8]
 8027d44:	2200      	movs	r2, #0
 8027d46:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8027d48:	68fb      	ldr	r3, [r7, #12]
 8027d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027d4e:	68bb      	ldr	r3, [r7, #8]
 8027d50:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8027d52:	68bb      	ldr	r3, [r7, #8]
 8027d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027d56:	2b00      	cmp	r3, #0
 8027d58:	d020      	beq.n	8027d9c <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027d5a:	68bb      	ldr	r3, [r7, #8]
 8027d5c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8027d60:	68bb      	ldr	r3, [r7, #8]
 8027d62:	889b      	ldrh	r3, [r3, #4]
 8027d64:	029c      	lsls	r4, r3, #10
 8027d66:	68bb      	ldr	r3, [r7, #8]
 8027d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027d6a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8027d6e:	4618      	mov	r0, r3
 8027d70:	f7fb fa08 	bl	8023184 <lfs_min>
 8027d74:	4603      	mov	r3, r0
 8027d76:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027d78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8027d7c:	68bb      	ldr	r3, [r7, #8]
 8027d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027d80:	9300      	str	r3, [sp, #0]
 8027d82:	4613      	mov	r3, r2
 8027d84:	4a0f      	ldr	r2, [pc, #60]	; (8027dc4 <lfs_file_rawopencfg+0x398>)
 8027d86:	4629      	mov	r1, r5
 8027d88:	68f8      	ldr	r0, [r7, #12]
 8027d8a:	f7fc fafb 	bl	8024384 <lfs_dir_get>
 8027d8e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8027d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027d92:	2b00      	cmp	r3, #0
 8027d94:	da02      	bge.n	8027d9c <lfs_file_rawopencfg+0x370>
                err = res;
 8027d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027d98:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8027d9a:	e002      	b.n	8027da2 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8027d9c:	2300      	movs	r3, #0
 8027d9e:	e00b      	b.n	8027db8 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8027da0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8027da2:	68bb      	ldr	r3, [r7, #8]
 8027da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027da6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8027daa:	68bb      	ldr	r3, [r7, #8]
 8027dac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8027dae:	68b9      	ldr	r1, [r7, #8]
 8027db0:	68f8      	ldr	r0, [r7, #12]
 8027db2:	f000 f80b 	bl	8027dcc <lfs_file_rawclose>
    return err;
 8027db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8027db8:	4618      	mov	r0, r3
 8027dba:	3760      	adds	r7, #96	; 0x60
 8027dbc:	46bd      	mov	sp, r7
 8027dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8027dc0:	20100000 	.word	0x20100000
 8027dc4:	700ffc00 	.word	0x700ffc00
 8027dc8:	7ffffc00 	.word	0x7ffffc00

08027dcc <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8027dcc:	b580      	push	{r7, lr}
 8027dce:	b084      	sub	sp, #16
 8027dd0:	af00      	add	r7, sp, #0
 8027dd2:	6078      	str	r0, [r7, #4]
 8027dd4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8027dd6:	6839      	ldr	r1, [r7, #0]
 8027dd8:	6878      	ldr	r0, [r7, #4]
 8027dda:	f000 f9e5 	bl	80281a8 <lfs_file_rawsync>
 8027dde:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8027de0:	6839      	ldr	r1, [r7, #0]
 8027de2:	6878      	ldr	r0, [r7, #4]
 8027de4:	f7fc f8a9 	bl	8023f3a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8027de8:	683b      	ldr	r3, [r7, #0]
 8027dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027dec:	681b      	ldr	r3, [r3, #0]
 8027dee:	2b00      	cmp	r3, #0
 8027df0:	d104      	bne.n	8027dfc <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8027df2:	683b      	ldr	r3, [r7, #0]
 8027df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027df6:	4618      	mov	r0, r3
 8027df8:	f7fb fa6f 	bl	80232da <lfs_free>
    }

    return err;
 8027dfc:	68fb      	ldr	r3, [r7, #12]
}
 8027dfe:	4618      	mov	r0, r3
 8027e00:	3710      	adds	r7, #16
 8027e02:	46bd      	mov	sp, r7
 8027e04:	bd80      	pop	{r7, pc}
	...

08027e08 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8027e08:	b590      	push	{r4, r7, lr}
 8027e0a:	b08d      	sub	sp, #52	; 0x34
 8027e0c:	af06      	add	r7, sp, #24
 8027e0e:	6078      	str	r0, [r7, #4]
 8027e10:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027e12:	f107 030c 	add.w	r3, r7, #12
 8027e16:	4619      	mov	r1, r3
 8027e18:	6878      	ldr	r0, [r7, #4]
 8027e1a:	f7fc f919 	bl	8024050 <lfs_alloc>
 8027e1e:	6138      	str	r0, [r7, #16]
        if (err) {
 8027e20:	693b      	ldr	r3, [r7, #16]
 8027e22:	2b00      	cmp	r3, #0
 8027e24:	d001      	beq.n	8027e2a <lfs_file_relocate+0x22>
            return err;
 8027e26:	693b      	ldr	r3, [r7, #16]
 8027e28:	e0bb      	b.n	8027fa2 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8027e2a:	68fb      	ldr	r3, [r7, #12]
 8027e2c:	4619      	mov	r1, r3
 8027e2e:	6878      	ldr	r0, [r7, #4]
 8027e30:	f7fb fd76 	bl	8023920 <lfs_bd_erase>
 8027e34:	6138      	str	r0, [r7, #16]
        if (err) {
 8027e36:	693b      	ldr	r3, [r7, #16]
 8027e38:	2b00      	cmp	r3, #0
 8027e3a:	d006      	beq.n	8027e4a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8027e3c:	693b      	ldr	r3, [r7, #16]
 8027e3e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027e42:	f000 809b 	beq.w	8027f7c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8027e46:	693b      	ldr	r3, [r7, #16]
 8027e48:	e0ab      	b.n	8027fa2 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8027e4a:	2300      	movs	r3, #0
 8027e4c:	617b      	str	r3, [r7, #20]
 8027e4e:	e069      	b.n	8027f24 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8027e50:	683b      	ldr	r3, [r7, #0]
 8027e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d027      	beq.n	8027eac <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8027e5c:	683b      	ldr	r3, [r7, #0]
 8027e5e:	f103 0008 	add.w	r0, r3, #8
 8027e62:	683b      	ldr	r3, [r7, #0]
 8027e64:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8027e68:	683b      	ldr	r3, [r7, #0]
 8027e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8027e6c:	697b      	ldr	r3, [r7, #20]
 8027e6e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8027e70:	683b      	ldr	r3, [r7, #0]
 8027e72:	889b      	ldrh	r3, [r3, #4]
 8027e74:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8027e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e7e:	2101      	movs	r1, #1
 8027e80:	9105      	str	r1, [sp, #20]
 8027e82:	f107 010b 	add.w	r1, r7, #11
 8027e86:	9104      	str	r1, [sp, #16]
 8027e88:	6979      	ldr	r1, [r7, #20]
 8027e8a:	9103      	str	r1, [sp, #12]
 8027e8c:	9302      	str	r3, [sp, #8]
 8027e8e:	4b47      	ldr	r3, [pc, #284]	; (8027fac <lfs_file_relocate+0x1a4>)
 8027e90:	9301      	str	r3, [sp, #4]
 8027e92:	9200      	str	r2, [sp, #0]
 8027e94:	4623      	mov	r3, r4
 8027e96:	2200      	movs	r2, #0
 8027e98:	4601      	mov	r1, r0
 8027e9a:	6878      	ldr	r0, [r7, #4]
 8027e9c:	f7fc fa8d 	bl	80243ba <lfs_dir_getread>
 8027ea0:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8027ea2:	693b      	ldr	r3, [r7, #16]
 8027ea4:	2b00      	cmp	r3, #0
 8027ea6:	d01e      	beq.n	8027ee6 <lfs_file_relocate+0xde>
                    return err;
 8027ea8:	693b      	ldr	r3, [r7, #16]
 8027eaa:	e07a      	b.n	8027fa2 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8027eac:	683b      	ldr	r3, [r7, #0]
 8027eae:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8027eb2:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8027eb4:	683b      	ldr	r3, [r7, #0]
 8027eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8027eb8:	697b      	ldr	r3, [r7, #20]
 8027eba:	1ad4      	subs	r4, r2, r3
 8027ebc:	683b      	ldr	r3, [r7, #0]
 8027ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ec0:	2201      	movs	r2, #1
 8027ec2:	9203      	str	r2, [sp, #12]
 8027ec4:	f107 020b 	add.w	r2, r7, #11
 8027ec8:	9202      	str	r2, [sp, #8]
 8027eca:	697a      	ldr	r2, [r7, #20]
 8027ecc:	9201      	str	r2, [sp, #4]
 8027ece:	9300      	str	r3, [sp, #0]
 8027ed0:	4623      	mov	r3, r4
 8027ed2:	4602      	mov	r2, r0
 8027ed4:	6878      	ldr	r0, [r7, #4]
 8027ed6:	f7fb fa31 	bl	802333c <lfs_bd_read>
 8027eda:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8027edc:	693b      	ldr	r3, [r7, #16]
 8027ede:	2b00      	cmp	r3, #0
 8027ee0:	d001      	beq.n	8027ee6 <lfs_file_relocate+0xde>
                    return err;
 8027ee2:	693b      	ldr	r3, [r7, #16]
 8027ee4:	e05d      	b.n	8027fa2 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8027ee6:	687b      	ldr	r3, [r7, #4]
 8027ee8:	f103 0110 	add.w	r1, r3, #16
 8027eec:	6878      	ldr	r0, [r7, #4]
 8027eee:	68fb      	ldr	r3, [r7, #12]
 8027ef0:	2201      	movs	r2, #1
 8027ef2:	9203      	str	r2, [sp, #12]
 8027ef4:	f107 020b 	add.w	r2, r7, #11
 8027ef8:	9202      	str	r2, [sp, #8]
 8027efa:	697a      	ldr	r2, [r7, #20]
 8027efc:	9201      	str	r2, [sp, #4]
 8027efe:	9300      	str	r3, [sp, #0]
 8027f00:	2301      	movs	r3, #1
 8027f02:	4602      	mov	r2, r0
 8027f04:	6878      	ldr	r0, [r7, #4]
 8027f06:	f7fb fc5f 	bl	80237c8 <lfs_bd_prog>
 8027f0a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8027f0c:	693b      	ldr	r3, [r7, #16]
 8027f0e:	2b00      	cmp	r3, #0
 8027f10:	d005      	beq.n	8027f1e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8027f12:	693b      	ldr	r3, [r7, #16]
 8027f14:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027f18:	d032      	beq.n	8027f80 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8027f1a:	693b      	ldr	r3, [r7, #16]
 8027f1c:	e041      	b.n	8027fa2 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8027f1e:	697b      	ldr	r3, [r7, #20]
 8027f20:	3301      	adds	r3, #1
 8027f22:	617b      	str	r3, [r7, #20]
 8027f24:	683b      	ldr	r3, [r7, #0]
 8027f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027f28:	697a      	ldr	r2, [r7, #20]
 8027f2a:	429a      	cmp	r2, r3
 8027f2c:	d390      	bcc.n	8027e50 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8027f2e:	683b      	ldr	r3, [r7, #0]
 8027f30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8027f32:	687b      	ldr	r3, [r7, #4]
 8027f34:	69d9      	ldr	r1, [r3, #28]
 8027f36:	687b      	ldr	r3, [r7, #4]
 8027f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027f3c:	461a      	mov	r2, r3
 8027f3e:	f005 fbf0 	bl	802d722 <memcpy>
        file->cache.block = lfs->pcache.block;
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	691a      	ldr	r2, [r3, #16]
 8027f46:	683b      	ldr	r3, [r7, #0]
 8027f48:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8027f4a:	687b      	ldr	r3, [r7, #4]
 8027f4c:	695a      	ldr	r2, [r3, #20]
 8027f4e:	683b      	ldr	r3, [r7, #0]
 8027f50:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8027f52:	687b      	ldr	r3, [r7, #4]
 8027f54:	699a      	ldr	r2, [r3, #24]
 8027f56:	683b      	ldr	r3, [r7, #0]
 8027f58:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8027f5a:	687b      	ldr	r3, [r7, #4]
 8027f5c:	3310      	adds	r3, #16
 8027f5e:	4619      	mov	r1, r3
 8027f60:	6878      	ldr	r0, [r7, #4]
 8027f62:	f7fb f9d4 	bl	802330e <lfs_cache_zero>

        file->block = nblock;
 8027f66:	68fa      	ldr	r2, [r7, #12]
 8027f68:	683b      	ldr	r3, [r7, #0]
 8027f6a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8027f6c:	683b      	ldr	r3, [r7, #0]
 8027f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8027f74:	683b      	ldr	r3, [r7, #0]
 8027f76:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8027f78:	2300      	movs	r3, #0
 8027f7a:	e012      	b.n	8027fa2 <lfs_file_relocate+0x19a>
                goto relocate;
 8027f7c:	bf00      	nop
 8027f7e:	e000      	b.n	8027f82 <lfs_file_relocate+0x17a>
                    goto relocate;
 8027f80:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8027f82:	68fb      	ldr	r3, [r7, #12]
 8027f84:	4a0a      	ldr	r2, [pc, #40]	; (8027fb0 <lfs_file_relocate+0x1a8>)
 8027f86:	9200      	str	r2, [sp, #0]
 8027f88:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 8027f8c:	4909      	ldr	r1, [pc, #36]	; (8027fb4 <lfs_file_relocate+0x1ac>)
 8027f8e:	480a      	ldr	r0, [pc, #40]	; (8027fb8 <lfs_file_relocate+0x1b0>)
 8027f90:	f005 f85c 	bl	802d04c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8027f94:	687b      	ldr	r3, [r7, #4]
 8027f96:	3310      	adds	r3, #16
 8027f98:	4619      	mov	r1, r3
 8027f9a:	6878      	ldr	r0, [r7, #4]
 8027f9c:	f7fb f9a8 	bl	80232f0 <lfs_cache_drop>
    while (true) {
 8027fa0:	e737      	b.n	8027e12 <lfs_file_relocate+0xa>
    }
}
 8027fa2:	4618      	mov	r0, r3
 8027fa4:	371c      	adds	r7, #28
 8027fa6:	46bd      	mov	sp, r7
 8027fa8:	bd90      	pop	{r4, r7, pc}
 8027faa:	bf00      	nop
 8027fac:	fff7fc00 	.word	0xfff7fc00
 8027fb0:	08033054 	.word	0x08033054
 8027fb4:	08032f40 	.word	0x08032f40
 8027fb8:	080330d4 	.word	0x080330d4

08027fbc <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8027fbc:	b580      	push	{r7, lr}
 8027fbe:	b084      	sub	sp, #16
 8027fc0:	af00      	add	r7, sp, #0
 8027fc2:	6078      	str	r0, [r7, #4]
 8027fc4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8027fc6:	683b      	ldr	r3, [r7, #0]
 8027fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8027fca:	683b      	ldr	r3, [r7, #0]
 8027fcc:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8027fce:	6878      	ldr	r0, [r7, #4]
 8027fd0:	f7fc f81e 	bl	8024010 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8027fd4:	6839      	ldr	r1, [r7, #0]
 8027fd6:	6878      	ldr	r0, [r7, #4]
 8027fd8:	f7ff ff16 	bl	8027e08 <lfs_file_relocate>
 8027fdc:	60f8      	str	r0, [r7, #12]
    if (err) {
 8027fde:	68fb      	ldr	r3, [r7, #12]
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	d001      	beq.n	8027fe8 <lfs_file_outline+0x2c>
        return err;
 8027fe4:	68fb      	ldr	r3, [r7, #12]
 8027fe6:	e006      	b.n	8027ff6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8027fe8:	683b      	ldr	r3, [r7, #0]
 8027fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027fec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8027ff0:	683b      	ldr	r3, [r7, #0]
 8027ff2:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8027ff4:	2300      	movs	r3, #0
}
 8027ff6:	4618      	mov	r0, r3
 8027ff8:	3710      	adds	r7, #16
 8027ffa:	46bd      	mov	sp, r7
 8027ffc:	bd80      	pop	{r7, pc}
	...

08028000 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8028000:	b590      	push	{r4, r7, lr}
 8028002:	b09f      	sub	sp, #124	; 0x7c
 8028004:	af02      	add	r7, sp, #8
 8028006:	6078      	str	r0, [r7, #4]
 8028008:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 802800a:	683b      	ldr	r3, [r7, #0]
 802800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802800e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028012:	2b00      	cmp	r3, #0
 8028014:	d011      	beq.n	802803a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8028016:	683b      	ldr	r3, [r7, #0]
 8028018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802801a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802801e:	2b00      	cmp	r3, #0
 8028020:	d105      	bne.n	802802e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8028022:	683b      	ldr	r3, [r7, #0]
 8028024:	3340      	adds	r3, #64	; 0x40
 8028026:	4619      	mov	r1, r3
 8028028:	6878      	ldr	r0, [r7, #4]
 802802a:	f7fb f961 	bl	80232f0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 802802e:	683b      	ldr	r3, [r7, #0]
 8028030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028032:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8028036:	683b      	ldr	r3, [r7, #0]
 8028038:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802803a:	683b      	ldr	r3, [r7, #0]
 802803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802803e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028042:	2b00      	cmp	r3, #0
 8028044:	f000 80a4 	beq.w	8028190 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8028048:	683b      	ldr	r3, [r7, #0]
 802804a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802804c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 802804e:	683b      	ldr	r3, [r7, #0]
 8028050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028056:	2b00      	cmp	r3, #0
 8028058:	d176      	bne.n	8028148 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 802805a:	f107 030c 	add.w	r3, r7, #12
 802805e:	2254      	movs	r2, #84	; 0x54
 8028060:	2100      	movs	r1, #0
 8028062:	4618      	mov	r0, r3
 8028064:	f005 f988 	bl	802d378 <memset>
                .ctz.head = file->ctz.head,
 8028068:	683b      	ldr	r3, [r7, #0]
 802806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 802806c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 802806e:	683b      	ldr	r3, [r7, #0]
 8028070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8028072:	63bb      	str	r3, [r7, #56]	; 0x38
 8028074:	2301      	movs	r3, #1
 8028076:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8028078:	683b      	ldr	r3, [r7, #0]
 802807a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 802807c:	643b      	str	r3, [r7, #64]	; 0x40
 802807e:	687b      	ldr	r3, [r7, #4]
 8028080:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8028084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 802808a:	687b      	ldr	r3, [r7, #4]
 802808c:	4619      	mov	r1, r3
 802808e:	6878      	ldr	r0, [r7, #4]
 8028090:	f7fb f92e 	bl	80232f0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8028094:	e02b      	b.n	80280ee <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8028096:	f107 0263 	add.w	r2, r7, #99	; 0x63
 802809a:	f107 010c 	add.w	r1, r7, #12
 802809e:	2301      	movs	r3, #1
 80280a0:	6878      	ldr	r0, [r7, #4]
 80280a2:	f000 f90d 	bl	80282c0 <lfs_file_flushedread>
 80280a6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80280a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80280aa:	2b00      	cmp	r3, #0
 80280ac:	da01      	bge.n	80280b2 <lfs_file_flush+0xb2>
                    return res;
 80280ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80280b0:	e06f      	b.n	8028192 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80280b2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80280b6:	2301      	movs	r3, #1
 80280b8:	6839      	ldr	r1, [r7, #0]
 80280ba:	6878      	ldr	r0, [r7, #4]
 80280bc:	f000 fa08 	bl	80284d0 <lfs_file_flushedwrite>
 80280c0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80280c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	da01      	bge.n	80280cc <lfs_file_flush+0xcc>
                    return res;
 80280c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80280ca:	e062      	b.n	8028192 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80280cc:	687b      	ldr	r3, [r7, #4]
 80280ce:	681b      	ldr	r3, [r3, #0]
 80280d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80280d4:	d00b      	beq.n	80280ee <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80280d6:	f107 030c 	add.w	r3, r7, #12
 80280da:	3340      	adds	r3, #64	; 0x40
 80280dc:	4619      	mov	r1, r3
 80280de:	6878      	ldr	r0, [r7, #4]
 80280e0:	f7fb f906 	bl	80232f0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80280e4:	687b      	ldr	r3, [r7, #4]
 80280e6:	4619      	mov	r1, r3
 80280e8:	6878      	ldr	r0, [r7, #4]
 80280ea:	f7fb f901 	bl	80232f0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80280ee:	683b      	ldr	r3, [r7, #0]
 80280f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80280f2:	683b      	ldr	r3, [r7, #0]
 80280f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80280f6:	429a      	cmp	r2, r3
 80280f8:	d3cd      	bcc.n	8028096 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80280fa:	683b      	ldr	r3, [r7, #0]
 80280fc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8028100:	687a      	ldr	r2, [r7, #4]
 8028102:	2301      	movs	r3, #1
 8028104:	6878      	ldr	r0, [r7, #4]
 8028106:	f7fb faaf 	bl	8023668 <lfs_bd_flush>
 802810a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802810c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802810e:	2b00      	cmp	r3, #0
 8028110:	d026      	beq.n	8028160 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8028112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028114:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028118:	d001      	beq.n	802811e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 802811a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802811c:	e039      	b.n	8028192 <lfs_file_flush+0x192>
                        goto relocate;
 802811e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8028120:	683b      	ldr	r3, [r7, #0]
 8028122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028124:	4a1d      	ldr	r2, [pc, #116]	; (802819c <lfs_file_flush+0x19c>)
 8028126:	9200      	str	r2, [sp, #0]
 8028128:	f640 425f 	movw	r2, #3167	; 0xc5f
 802812c:	491c      	ldr	r1, [pc, #112]	; (80281a0 <lfs_file_flush+0x1a0>)
 802812e:	481d      	ldr	r0, [pc, #116]	; (80281a4 <lfs_file_flush+0x1a4>)
 8028130:	f004 ff8c 	bl	802d04c <iprintf>
                err = lfs_file_relocate(lfs, file);
 8028134:	6839      	ldr	r1, [r7, #0]
 8028136:	6878      	ldr	r0, [r7, #4]
 8028138:	f7ff fe66 	bl	8027e08 <lfs_file_relocate>
 802813c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802813e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028140:	2b00      	cmp	r3, #0
 8028142:	d0da      	beq.n	80280fa <lfs_file_flush+0xfa>
                    return err;
 8028144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028146:	e024      	b.n	8028192 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8028148:	683b      	ldr	r3, [r7, #0]
 802814a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802814c:	683b      	ldr	r3, [r7, #0]
 802814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028150:	4619      	mov	r1, r3
 8028152:	4610      	mov	r0, r2
 8028154:	f7fb f806 	bl	8023164 <lfs_max>
 8028158:	4602      	mov	r2, r0
 802815a:	683b      	ldr	r3, [r7, #0]
 802815c:	635a      	str	r2, [r3, #52]	; 0x34
 802815e:	e000      	b.n	8028162 <lfs_file_flush+0x162>
                break;
 8028160:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8028162:	683b      	ldr	r3, [r7, #0]
 8028164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028166:	683b      	ldr	r3, [r7, #0]
 8028168:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 802816a:	683b      	ldr	r3, [r7, #0]
 802816c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802816e:	683b      	ldr	r3, [r7, #0]
 8028170:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8028172:	683b      	ldr	r3, [r7, #0]
 8028174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802817a:	683b      	ldr	r3, [r7, #0]
 802817c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 802817e:	683b      	ldr	r3, [r7, #0]
 8028180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028186:	683b      	ldr	r3, [r7, #0]
 8028188:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 802818a:	683b      	ldr	r3, [r7, #0]
 802818c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802818e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8028190:	2300      	movs	r3, #0
}
 8028192:	4618      	mov	r0, r3
 8028194:	3774      	adds	r7, #116	; 0x74
 8028196:	46bd      	mov	sp, r7
 8028198:	bd90      	pop	{r4, r7, pc}
 802819a:	bf00      	nop
 802819c:	08033054 	.word	0x08033054
 80281a0:	08032f40 	.word	0x08032f40
 80281a4:	080330d4 	.word	0x080330d4

080281a8 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80281a8:	b580      	push	{r7, lr}
 80281aa:	b090      	sub	sp, #64	; 0x40
 80281ac:	af00      	add	r7, sp, #0
 80281ae:	6078      	str	r0, [r7, #4]
 80281b0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80281b2:	683b      	ldr	r3, [r7, #0]
 80281b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80281b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80281ba:	2b00      	cmp	r3, #0
 80281bc:	d001      	beq.n	80281c2 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80281be:	2300      	movs	r3, #0
 80281c0:	e07a      	b.n	80282b8 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80281c2:	6839      	ldr	r1, [r7, #0]
 80281c4:	6878      	ldr	r0, [r7, #4]
 80281c6:	f7ff ff1b 	bl	8028000 <lfs_file_flush>
 80281ca:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80281cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80281ce:	2b00      	cmp	r3, #0
 80281d0:	d007      	beq.n	80281e2 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80281d2:	683b      	ldr	r3, [r7, #0]
 80281d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80281d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80281da:	683b      	ldr	r3, [r7, #0]
 80281dc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80281de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80281e0:	e06a      	b.n	80282b8 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80281e2:	683b      	ldr	r3, [r7, #0]
 80281e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80281e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80281ea:	2b00      	cmp	r3, #0
 80281ec:	d063      	beq.n	80282b6 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80281ee:	683b      	ldr	r3, [r7, #0]
 80281f0:	3308      	adds	r3, #8
 80281f2:	4618      	mov	r0, r3
 80281f4:	f7fb fbdb 	bl	80239ae <lfs_pair_isnull>
 80281f8:	4603      	mov	r3, r0
 80281fa:	f083 0301 	eor.w	r3, r3, #1
 80281fe:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8028200:	2b00      	cmp	r3, #0
 8028202:	d058      	beq.n	80282b6 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8028204:	683b      	ldr	r3, [r7, #0]
 8028206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802820c:	2b00      	cmp	r3, #0
 802820e:	d009      	beq.n	8028224 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028210:	f240 2301 	movw	r3, #513	; 0x201
 8028214:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8028216:	683b      	ldr	r3, [r7, #0]
 8028218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802821a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 802821c:	683b      	ldr	r3, [r7, #0]
 802821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028220:	637b      	str	r3, [r7, #52]	; 0x34
 8028222:	e014      	b.n	802824e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8028224:	f240 2302 	movw	r3, #514	; 0x202
 8028228:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 802822a:	683a      	ldr	r2, [r7, #0]
 802822c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028230:	3228      	adds	r2, #40	; 0x28
 8028232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028236:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802823a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802823e:	4618      	mov	r0, r3
 8028240:	f7fb fdd6 	bl	8023df0 <lfs_ctz_tole32>
            buffer = &ctz;
 8028244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028248:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 802824a:	2308      	movs	r3, #8
 802824c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802824e:	683b      	ldr	r3, [r7, #0]
 8028250:	f103 0108 	add.w	r1, r3, #8
 8028254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8028256:	051a      	lsls	r2, r3, #20
 8028258:	683b      	ldr	r3, [r7, #0]
 802825a:	889b      	ldrh	r3, [r3, #4]
 802825c:	029b      	lsls	r3, r3, #10
 802825e:	431a      	orrs	r2, r3
 8028260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028262:	4313      	orrs	r3, r2
 8028264:	61bb      	str	r3, [r7, #24]
 8028266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028268:	61fb      	str	r3, [r7, #28]
 802826a:	683b      	ldr	r3, [r7, #0]
 802826c:	889b      	ldrh	r3, [r3, #4]
 802826e:	029a      	lsls	r2, r3, #10
 8028270:	683b      	ldr	r3, [r7, #0]
 8028272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028274:	689b      	ldr	r3, [r3, #8]
 8028276:	4313      	orrs	r3, r2
 8028278:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 802827c:	623b      	str	r3, [r7, #32]
 802827e:	683b      	ldr	r3, [r7, #0]
 8028280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028282:	685b      	ldr	r3, [r3, #4]
 8028284:	627b      	str	r3, [r7, #36]	; 0x24
 8028286:	f107 0218 	add.w	r2, r7, #24
 802828a:	2302      	movs	r3, #2
 802828c:	6878      	ldr	r0, [r7, #4]
 802828e:	f7fe ff33 	bl	80270f8 <lfs_dir_commit>
 8028292:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8028294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028296:	2b00      	cmp	r3, #0
 8028298:	d007      	beq.n	80282aa <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 802829a:	683b      	ldr	r3, [r7, #0]
 802829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802829e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80282a2:	683b      	ldr	r3, [r7, #0]
 80282a4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80282a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80282a8:	e006      	b.n	80282b8 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80282aa:	683b      	ldr	r3, [r7, #0]
 80282ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80282b2:	683b      	ldr	r3, [r7, #0]
 80282b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80282b6:	2300      	movs	r3, #0
}
 80282b8:	4618      	mov	r0, r3
 80282ba:	3740      	adds	r7, #64	; 0x40
 80282bc:	46bd      	mov	sp, r7
 80282be:	bd80      	pop	{r7, pc}

080282c0 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80282c0:	b5b0      	push	{r4, r5, r7, lr}
 80282c2:	b090      	sub	sp, #64	; 0x40
 80282c4:	af06      	add	r7, sp, #24
 80282c6:	60f8      	str	r0, [r7, #12]
 80282c8:	60b9      	str	r1, [r7, #8]
 80282ca:	607a      	str	r2, [r7, #4]
 80282cc:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80282ce:	687b      	ldr	r3, [r7, #4]
 80282d0:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80282d2:	683b      	ldr	r3, [r7, #0]
 80282d4:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80282d6:	68bb      	ldr	r3, [r7, #8]
 80282d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80282da:	68bb      	ldr	r3, [r7, #8]
 80282dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80282de:	429a      	cmp	r2, r3
 80282e0:	d301      	bcc.n	80282e6 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80282e2:	2300      	movs	r3, #0
 80282e4:	e0b7      	b.n	8028456 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80282e6:	68bb      	ldr	r3, [r7, #8]
 80282e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80282ea:	68bb      	ldr	r3, [r7, #8]
 80282ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80282ee:	1ad3      	subs	r3, r2, r3
 80282f0:	4619      	mov	r1, r3
 80282f2:	6838      	ldr	r0, [r7, #0]
 80282f4:	f7fa ff46 	bl	8023184 <lfs_min>
 80282f8:	6038      	str	r0, [r7, #0]
    nsize = size;
 80282fa:	683b      	ldr	r3, [r7, #0]
 80282fc:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80282fe:	e0a5      	b.n	802844c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8028300:	68bb      	ldr	r3, [r7, #8]
 8028302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028308:	2b00      	cmp	r3, #0
 802830a:	d006      	beq.n	802831a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 802830c:	68bb      	ldr	r3, [r7, #8]
 802830e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028310:	68fb      	ldr	r3, [r7, #12]
 8028312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028314:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028316:	429a      	cmp	r2, r3
 8028318:	d130      	bne.n	802837c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 802831a:	68bb      	ldr	r3, [r7, #8]
 802831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802831e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028322:	2b00      	cmp	r3, #0
 8028324:	d11c      	bne.n	8028360 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028326:	68bb      	ldr	r3, [r7, #8]
 8028328:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802832c:	68bb      	ldr	r3, [r7, #8]
 802832e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028330:	68bb      	ldr	r3, [r7, #8]
 8028332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028334:	68ba      	ldr	r2, [r7, #8]
 8028336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028338:	68b9      	ldr	r1, [r7, #8]
 802833a:	3138      	adds	r1, #56	; 0x38
 802833c:	68b8      	ldr	r0, [r7, #8]
 802833e:	303c      	adds	r0, #60	; 0x3c
 8028340:	9003      	str	r0, [sp, #12]
 8028342:	9102      	str	r1, [sp, #8]
 8028344:	9201      	str	r2, [sp, #4]
 8028346:	9300      	str	r3, [sp, #0]
 8028348:	462b      	mov	r3, r5
 802834a:	4622      	mov	r2, r4
 802834c:	2100      	movs	r1, #0
 802834e:	68f8      	ldr	r0, [r7, #12]
 8028350:	f7ff f97c 	bl	802764c <lfs_ctz_find>
 8028354:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8028356:	69fb      	ldr	r3, [r7, #28]
 8028358:	2b00      	cmp	r3, #0
 802835a:	d009      	beq.n	8028370 <lfs_file_flushedread+0xb0>
                    return err;
 802835c:	69fb      	ldr	r3, [r7, #28]
 802835e:	e07a      	b.n	8028456 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028360:	68bb      	ldr	r3, [r7, #8]
 8028362:	f06f 0201 	mvn.w	r2, #1
 8028366:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028368:	68bb      	ldr	r3, [r7, #8]
 802836a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802836c:	68bb      	ldr	r3, [r7, #8]
 802836e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8028370:	68bb      	ldr	r3, [r7, #8]
 8028372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028374:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8028378:	68bb      	ldr	r3, [r7, #8]
 802837a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 802837c:	68fb      	ldr	r3, [r7, #12]
 802837e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028380:	69da      	ldr	r2, [r3, #28]
 8028382:	68bb      	ldr	r3, [r7, #8]
 8028384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028386:	1ad3      	subs	r3, r2, r3
 8028388:	4619      	mov	r1, r3
 802838a:	6a38      	ldr	r0, [r7, #32]
 802838c:	f7fa fefa 	bl	8023184 <lfs_min>
 8028390:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8028392:	68bb      	ldr	r3, [r7, #8]
 8028394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802839a:	2b00      	cmp	r3, #0
 802839c:	d026      	beq.n	80283ec <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 802839e:	68bb      	ldr	r3, [r7, #8]
 80283a0:	f103 0408 	add.w	r4, r3, #8
 80283a4:	68bb      	ldr	r3, [r7, #8]
 80283a6:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80283aa:	68fb      	ldr	r3, [r7, #12]
 80283ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80283ae:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80283b0:	68bb      	ldr	r3, [r7, #8]
 80283b2:	889b      	ldrh	r3, [r3, #4]
 80283b4:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80283b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80283ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80283be:	68b9      	ldr	r1, [r7, #8]
 80283c0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80283c2:	69b8      	ldr	r0, [r7, #24]
 80283c4:	9005      	str	r0, [sp, #20]
 80283c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80283c8:	9004      	str	r0, [sp, #16]
 80283ca:	9103      	str	r1, [sp, #12]
 80283cc:	9302      	str	r3, [sp, #8]
 80283ce:	4b24      	ldr	r3, [pc, #144]	; (8028460 <lfs_file_flushedread+0x1a0>)
 80283d0:	9301      	str	r3, [sp, #4]
 80283d2:	9200      	str	r2, [sp, #0]
 80283d4:	462b      	mov	r3, r5
 80283d6:	2200      	movs	r2, #0
 80283d8:	4621      	mov	r1, r4
 80283da:	68f8      	ldr	r0, [r7, #12]
 80283dc:	f7fb ffed 	bl	80243ba <lfs_dir_getread>
 80283e0:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80283e2:	693b      	ldr	r3, [r7, #16]
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	d01d      	beq.n	8028424 <lfs_file_flushedread+0x164>
                return err;
 80283e8:	693b      	ldr	r3, [r7, #16]
 80283ea:	e034      	b.n	8028456 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80283ec:	68bb      	ldr	r3, [r7, #8]
 80283ee:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80283f2:	68fb      	ldr	r3, [r7, #12]
 80283f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80283f6:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80283f8:	68bb      	ldr	r3, [r7, #8]
 80283fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80283fc:	68ba      	ldr	r2, [r7, #8]
 80283fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028400:	69b9      	ldr	r1, [r7, #24]
 8028402:	9103      	str	r1, [sp, #12]
 8028404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028406:	9102      	str	r1, [sp, #8]
 8028408:	9201      	str	r2, [sp, #4]
 802840a:	9300      	str	r3, [sp, #0]
 802840c:	4623      	mov	r3, r4
 802840e:	4602      	mov	r2, r0
 8028410:	2100      	movs	r1, #0
 8028412:	68f8      	ldr	r0, [r7, #12]
 8028414:	f7fa ff92 	bl	802333c <lfs_bd_read>
 8028418:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 802841a:	697b      	ldr	r3, [r7, #20]
 802841c:	2b00      	cmp	r3, #0
 802841e:	d001      	beq.n	8028424 <lfs_file_flushedread+0x164>
                return err;
 8028420:	697b      	ldr	r3, [r7, #20]
 8028422:	e018      	b.n	8028456 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8028424:	68bb      	ldr	r3, [r7, #8]
 8028426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028428:	69bb      	ldr	r3, [r7, #24]
 802842a:	441a      	add	r2, r3
 802842c:	68bb      	ldr	r3, [r7, #8]
 802842e:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028430:	68bb      	ldr	r3, [r7, #8]
 8028432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028434:	69bb      	ldr	r3, [r7, #24]
 8028436:	441a      	add	r2, r3
 8028438:	68bb      	ldr	r3, [r7, #8]
 802843a:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 802843c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802843e:	69bb      	ldr	r3, [r7, #24]
 8028440:	4413      	add	r3, r2
 8028442:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8028444:	6a3a      	ldr	r2, [r7, #32]
 8028446:	69bb      	ldr	r3, [r7, #24]
 8028448:	1ad3      	subs	r3, r2, r3
 802844a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 802844c:	6a3b      	ldr	r3, [r7, #32]
 802844e:	2b00      	cmp	r3, #0
 8028450:	f47f af56 	bne.w	8028300 <lfs_file_flushedread+0x40>
    }

    return size;
 8028454:	683b      	ldr	r3, [r7, #0]
}
 8028456:	4618      	mov	r0, r3
 8028458:	3728      	adds	r7, #40	; 0x28
 802845a:	46bd      	mov	sp, r7
 802845c:	bdb0      	pop	{r4, r5, r7, pc}
 802845e:	bf00      	nop
 8028460:	fff7fc00 	.word	0xfff7fc00

08028464 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028464:	b580      	push	{r7, lr}
 8028466:	b086      	sub	sp, #24
 8028468:	af00      	add	r7, sp, #0
 802846a:	60f8      	str	r0, [r7, #12]
 802846c:	60b9      	str	r1, [r7, #8]
 802846e:	607a      	str	r2, [r7, #4]
 8028470:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8028472:	68bb      	ldr	r3, [r7, #8]
 8028474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028476:	f003 0301 	and.w	r3, r3, #1
 802847a:	2b00      	cmp	r3, #0
 802847c:	d106      	bne.n	802848c <lfs_file_rawread+0x28>
 802847e:	4b11      	ldr	r3, [pc, #68]	; (80284c4 <lfs_file_rawread+0x60>)
 8028480:	4a11      	ldr	r2, [pc, #68]	; (80284c8 <lfs_file_rawread+0x64>)
 8028482:	f640 41ea 	movw	r1, #3306	; 0xcea
 8028486:	4811      	ldr	r0, [pc, #68]	; (80284cc <lfs_file_rawread+0x68>)
 8028488:	f003 fda6 	bl	802bfd8 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802848c:	68bb      	ldr	r3, [r7, #8]
 802848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028494:	2b00      	cmp	r3, #0
 8028496:	d009      	beq.n	80284ac <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8028498:	68b9      	ldr	r1, [r7, #8]
 802849a:	68f8      	ldr	r0, [r7, #12]
 802849c:	f7ff fdb0 	bl	8028000 <lfs_file_flush>
 80284a0:	6178      	str	r0, [r7, #20]
        if (err) {
 80284a2:	697b      	ldr	r3, [r7, #20]
 80284a4:	2b00      	cmp	r3, #0
 80284a6:	d001      	beq.n	80284ac <lfs_file_rawread+0x48>
            return err;
 80284a8:	697b      	ldr	r3, [r7, #20]
 80284aa:	e006      	b.n	80284ba <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80284ac:	683b      	ldr	r3, [r7, #0]
 80284ae:	687a      	ldr	r2, [r7, #4]
 80284b0:	68b9      	ldr	r1, [r7, #8]
 80284b2:	68f8      	ldr	r0, [r7, #12]
 80284b4:	f7ff ff04 	bl	80282c0 <lfs_file_flushedread>
 80284b8:	4603      	mov	r3, r0
}
 80284ba:	4618      	mov	r0, r3
 80284bc:	3718      	adds	r7, #24
 80284be:	46bd      	mov	sp, r7
 80284c0:	bd80      	pop	{r7, pc}
 80284c2:	bf00      	nop
 80284c4:	0803327c 	.word	0x0803327c
 80284c8:	08034248 	.word	0x08034248
 80284cc:	08032f40 	.word	0x08032f40

080284d0 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80284d0:	b5b0      	push	{r4, r5, r7, lr}
 80284d2:	b090      	sub	sp, #64	; 0x40
 80284d4:	af04      	add	r7, sp, #16
 80284d6:	60f8      	str	r0, [r7, #12]
 80284d8:	60b9      	str	r1, [r7, #8]
 80284da:	607a      	str	r2, [r7, #4]
 80284dc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80284de:	687b      	ldr	r3, [r7, #4]
 80284e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80284e2:	683b      	ldr	r3, [r7, #0]
 80284e4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80284e6:	68bb      	ldr	r3, [r7, #8]
 80284e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80284ee:	2b00      	cmp	r3, #0
 80284f0:	f000 810c 	beq.w	802870c <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80284f4:	68bb      	ldr	r3, [r7, #8]
 80284f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80284f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80284fa:	441a      	add	r2, r3
 80284fc:	68bb      	ldr	r3, [r7, #8]
 80284fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028500:	4619      	mov	r1, r3
 8028502:	4610      	mov	r0, r2
 8028504:	f7fa fe2e 	bl	8023164 <lfs_max>
 8028508:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 802850a:	68fb      	ldr	r3, [r7, #12]
 802850c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802850e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8028510:	68fb      	ldr	r3, [r7, #12]
 8028512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028516:	2b00      	cmp	r3, #0
 8028518:	d004      	beq.n	8028524 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 802851a:	68fb      	ldr	r3, [r7, #12]
 802851c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802851e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028520:	08db      	lsrs	r3, r3, #3
 8028522:	e003      	b.n	802852c <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028524:	68fb      	ldr	r3, [r7, #12]
 8028526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028528:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 802852a:	08db      	lsrs	r3, r3, #3
 802852c:	4619      	mov	r1, r3
 802852e:	4610      	mov	r0, r2
 8028530:	f7fa fe28 	bl	8023184 <lfs_min>
 8028534:	4603      	mov	r3, r0
 8028536:	4619      	mov	r1, r3
 8028538:	f240 30fe 	movw	r0, #1022	; 0x3fe
 802853c:	f7fa fe22 	bl	8023184 <lfs_min>
 8028540:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028542:	429c      	cmp	r4, r3
 8028544:	f240 80e2 	bls.w	802870c <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028548:	68b9      	ldr	r1, [r7, #8]
 802854a:	68f8      	ldr	r0, [r7, #12]
 802854c:	f7ff fd36 	bl	8027fbc <lfs_file_outline>
 8028550:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028554:	2b00      	cmp	r3, #0
 8028556:	f000 80d9 	beq.w	802870c <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 802855a:	68bb      	ldr	r3, [r7, #8]
 802855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802855e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028562:	68bb      	ldr	r3, [r7, #8]
 8028564:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028568:	e0d5      	b.n	8028716 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 802856a:	68bb      	ldr	r3, [r7, #8]
 802856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802856e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028572:	2b00      	cmp	r3, #0
 8028574:	d006      	beq.n	8028584 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8028576:	68bb      	ldr	r3, [r7, #8]
 8028578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802857a:	68fb      	ldr	r3, [r7, #12]
 802857c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802857e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8028580:	429a      	cmp	r2, r3
 8028582:	d16b      	bne.n	802865c <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8028584:	68bb      	ldr	r3, [r7, #8]
 8028586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802858c:	2b00      	cmp	r3, #0
 802858e:	d157      	bne.n	8028640 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8028590:	68bb      	ldr	r3, [r7, #8]
 8028592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028598:	2b00      	cmp	r3, #0
 802859a:	d12d      	bne.n	80285f8 <lfs_file_flushedwrite+0x128>
 802859c:	68bb      	ldr	r3, [r7, #8]
 802859e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80285a0:	2b00      	cmp	r3, #0
 80285a2:	d029      	beq.n	80285f8 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80285a4:	68bb      	ldr	r3, [r7, #8]
 80285a6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80285aa:	68bb      	ldr	r3, [r7, #8]
 80285ac:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80285ae:	68bb      	ldr	r3, [r7, #8]
 80285b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 80285b2:	68ba      	ldr	r2, [r7, #8]
 80285b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80285b6:	3a01      	subs	r2, #1
 80285b8:	68b9      	ldr	r1, [r7, #8]
 80285ba:	3138      	adds	r1, #56	; 0x38
 80285bc:	68b8      	ldr	r0, [r7, #8]
 80285be:	303c      	adds	r0, #60	; 0x3c
 80285c0:	9003      	str	r0, [sp, #12]
 80285c2:	9102      	str	r1, [sp, #8]
 80285c4:	9201      	str	r2, [sp, #4]
 80285c6:	9300      	str	r3, [sp, #0]
 80285c8:	462b      	mov	r3, r5
 80285ca:	4622      	mov	r2, r4
 80285cc:	2100      	movs	r1, #0
 80285ce:	68f8      	ldr	r0, [r7, #12]
 80285d0:	f7ff f83c 	bl	802764c <lfs_ctz_find>
 80285d4:	6238      	str	r0, [r7, #32]
                    if (err) {
 80285d6:	6a3b      	ldr	r3, [r7, #32]
 80285d8:	2b00      	cmp	r3, #0
 80285da:	d007      	beq.n	80285ec <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 80285dc:	68bb      	ldr	r3, [r7, #8]
 80285de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285e0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80285e4:	68bb      	ldr	r3, [r7, #8]
 80285e6:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80285e8:	6a3b      	ldr	r3, [r7, #32]
 80285ea:	e094      	b.n	8028716 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80285ec:	68bb      	ldr	r3, [r7, #8]
 80285ee:	3340      	adds	r3, #64	; 0x40
 80285f0:	4619      	mov	r1, r3
 80285f2:	68f8      	ldr	r0, [r7, #12]
 80285f4:	f7fa fe8b 	bl	802330e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80285f8:	68f8      	ldr	r0, [r7, #12]
 80285fa:	f7fb fd09 	bl	8024010 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80285fe:	68bb      	ldr	r3, [r7, #8]
 8028600:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028604:	68fc      	ldr	r4, [r7, #12]
 8028606:	68bb      	ldr	r3, [r7, #8]
 8028608:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 802860a:	68bb      	ldr	r3, [r7, #8]
 802860c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802860e:	68ba      	ldr	r2, [r7, #8]
 8028610:	3238      	adds	r2, #56	; 0x38
 8028612:	68b9      	ldr	r1, [r7, #8]
 8028614:	313c      	adds	r1, #60	; 0x3c
 8028616:	9102      	str	r1, [sp, #8]
 8028618:	9201      	str	r2, [sp, #4]
 802861a:	9300      	str	r3, [sp, #0]
 802861c:	462b      	mov	r3, r5
 802861e:	4622      	mov	r2, r4
 8028620:	4601      	mov	r1, r0
 8028622:	68f8      	ldr	r0, [r7, #12]
 8028624:	f7ff f87e 	bl	8027724 <lfs_ctz_extend>
 8028628:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 802862a:	69fb      	ldr	r3, [r7, #28]
 802862c:	2b00      	cmp	r3, #0
 802862e:	d00f      	beq.n	8028650 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028630:	68bb      	ldr	r3, [r7, #8]
 8028632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028634:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028638:	68bb      	ldr	r3, [r7, #8]
 802863a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 802863c:	69fb      	ldr	r3, [r7, #28]
 802863e:	e06a      	b.n	8028716 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028640:	68bb      	ldr	r3, [r7, #8]
 8028642:	f06f 0201 	mvn.w	r2, #1
 8028646:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028648:	68bb      	ldr	r3, [r7, #8]
 802864a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802864c:	68bb      	ldr	r3, [r7, #8]
 802864e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8028650:	68bb      	ldr	r3, [r7, #8]
 8028652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028654:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028658:	68bb      	ldr	r3, [r7, #8]
 802865a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 802865c:	68fb      	ldr	r3, [r7, #12]
 802865e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028660:	69da      	ldr	r2, [r3, #28]
 8028662:	68bb      	ldr	r3, [r7, #8]
 8028664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028666:	1ad3      	subs	r3, r2, r3
 8028668:	4619      	mov	r1, r3
 802866a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802866c:	f7fa fd8a 	bl	8023184 <lfs_min>
 8028670:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8028672:	68bb      	ldr	r3, [r7, #8]
 8028674:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028678:	68fc      	ldr	r4, [r7, #12]
 802867a:	68bb      	ldr	r3, [r7, #8]
 802867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802867e:	68ba      	ldr	r2, [r7, #8]
 8028680:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028682:	69b9      	ldr	r1, [r7, #24]
 8028684:	9103      	str	r1, [sp, #12]
 8028686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028688:	9102      	str	r1, [sp, #8]
 802868a:	9201      	str	r2, [sp, #4]
 802868c:	9300      	str	r3, [sp, #0]
 802868e:	2301      	movs	r3, #1
 8028690:	4622      	mov	r2, r4
 8028692:	4601      	mov	r1, r0
 8028694:	68f8      	ldr	r0, [r7, #12]
 8028696:	f7fb f897 	bl	80237c8 <lfs_bd_prog>
 802869a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 802869c:	697b      	ldr	r3, [r7, #20]
 802869e:	2b00      	cmp	r3, #0
 80286a0:	d01c      	beq.n	80286dc <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 80286a2:	697b      	ldr	r3, [r7, #20]
 80286a4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80286a8:	d007      	beq.n	80286ba <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80286aa:	68bb      	ldr	r3, [r7, #8]
 80286ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80286b2:	68bb      	ldr	r3, [r7, #8]
 80286b4:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80286b6:	697b      	ldr	r3, [r7, #20]
 80286b8:	e02d      	b.n	8028716 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 80286ba:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80286bc:	68b9      	ldr	r1, [r7, #8]
 80286be:	68f8      	ldr	r0, [r7, #12]
 80286c0:	f7ff fba2 	bl	8027e08 <lfs_file_relocate>
 80286c4:	6178      	str	r0, [r7, #20]
            if (err) {
 80286c6:	697b      	ldr	r3, [r7, #20]
 80286c8:	2b00      	cmp	r3, #0
 80286ca:	d0d2      	beq.n	8028672 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 80286cc:	68bb      	ldr	r3, [r7, #8]
 80286ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80286d4:	68bb      	ldr	r3, [r7, #8]
 80286d6:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80286d8:	697b      	ldr	r3, [r7, #20]
 80286da:	e01c      	b.n	8028716 <lfs_file_flushedwrite+0x246>
            break;
 80286dc:	bf00      	nop
            }
        }

        file->pos += diff;
 80286de:	68bb      	ldr	r3, [r7, #8]
 80286e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80286e2:	69bb      	ldr	r3, [r7, #24]
 80286e4:	441a      	add	r2, r3
 80286e6:	68bb      	ldr	r3, [r7, #8]
 80286e8:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80286ea:	68bb      	ldr	r3, [r7, #8]
 80286ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80286ee:	69bb      	ldr	r3, [r7, #24]
 80286f0:	441a      	add	r2, r3
 80286f2:	68bb      	ldr	r3, [r7, #8]
 80286f4:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80286f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80286f8:	69bb      	ldr	r3, [r7, #24]
 80286fa:	4413      	add	r3, r2
 80286fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80286fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028700:	69bb      	ldr	r3, [r7, #24]
 8028702:	1ad3      	subs	r3, r2, r3
 8028704:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8028706:	68f8      	ldr	r0, [r7, #12]
 8028708:	f7fb fc82 	bl	8024010 <lfs_alloc_ack>
    while (nsize > 0) {
 802870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802870e:	2b00      	cmp	r3, #0
 8028710:	f47f af2b 	bne.w	802856a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028714:	683b      	ldr	r3, [r7, #0]
}
 8028716:	4618      	mov	r0, r3
 8028718:	3730      	adds	r7, #48	; 0x30
 802871a:	46bd      	mov	sp, r7
 802871c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028720 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028720:	b580      	push	{r7, lr}
 8028722:	b08a      	sub	sp, #40	; 0x28
 8028724:	af00      	add	r7, sp, #0
 8028726:	60f8      	str	r0, [r7, #12]
 8028728:	60b9      	str	r1, [r7, #8]
 802872a:	607a      	str	r2, [r7, #4]
 802872c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 802872e:	68bb      	ldr	r3, [r7, #8]
 8028730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028732:	f003 0302 	and.w	r3, r3, #2
 8028736:	2b00      	cmp	r3, #0
 8028738:	d106      	bne.n	8028748 <lfs_file_rawwrite+0x28>
 802873a:	4b38      	ldr	r3, [pc, #224]	; (802881c <lfs_file_rawwrite+0xfc>)
 802873c:	4a38      	ldr	r2, [pc, #224]	; (8028820 <lfs_file_rawwrite+0x100>)
 802873e:	f640 5155 	movw	r1, #3413	; 0xd55
 8028742:	4838      	ldr	r0, [pc, #224]	; (8028824 <lfs_file_rawwrite+0x104>)
 8028744:	f003 fc48 	bl	802bfd8 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028748:	68bb      	ldr	r3, [r7, #8]
 802874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802874c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028750:	2b00      	cmp	r3, #0
 8028752:	d009      	beq.n	8028768 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028754:	68b9      	ldr	r1, [r7, #8]
 8028756:	68f8      	ldr	r0, [r7, #12]
 8028758:	f7ff fc52 	bl	8028000 <lfs_file_flush>
 802875c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 802875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028760:	2b00      	cmp	r3, #0
 8028762:	d001      	beq.n	8028768 <lfs_file_rawwrite+0x48>
            return err;
 8028764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028766:	e055      	b.n	8028814 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028768:	68bb      	ldr	r3, [r7, #8]
 802876a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802876c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028770:	2b00      	cmp	r3, #0
 8028772:	d009      	beq.n	8028788 <lfs_file_rawwrite+0x68>
 8028774:	68bb      	ldr	r3, [r7, #8]
 8028776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028778:	68bb      	ldr	r3, [r7, #8]
 802877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802877c:	429a      	cmp	r2, r3
 802877e:	d203      	bcs.n	8028788 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028780:	68bb      	ldr	r3, [r7, #8]
 8028782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028784:	68bb      	ldr	r3, [r7, #8]
 8028786:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028788:	68bb      	ldr	r3, [r7, #8]
 802878a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802878c:	683b      	ldr	r3, [r7, #0]
 802878e:	441a      	add	r2, r3
 8028790:	68fb      	ldr	r3, [r7, #12]
 8028792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028794:	429a      	cmp	r2, r3
 8028796:	d902      	bls.n	802879e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028798:	f06f 031a 	mvn.w	r3, #26
 802879c:	e03a      	b.n	8028814 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 802879e:	68bb      	ldr	r3, [r7, #8]
 80287a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	d121      	bne.n	80287ee <lfs_file_rawwrite+0xce>
 80287aa:	68bb      	ldr	r3, [r7, #8]
 80287ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80287ae:	68bb      	ldr	r3, [r7, #8]
 80287b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80287b2:	429a      	cmp	r2, r3
 80287b4:	d91b      	bls.n	80287ee <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80287b6:	68bb      	ldr	r3, [r7, #8]
 80287b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80287ba:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80287bc:	68bb      	ldr	r3, [r7, #8]
 80287be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80287c0:	68bb      	ldr	r3, [r7, #8]
 80287c2:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 80287c4:	e00e      	b.n	80287e4 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80287c6:	2300      	movs	r3, #0
 80287c8:	75fb      	strb	r3, [r7, #23]
 80287ca:	f107 0217 	add.w	r2, r7, #23
 80287ce:	2301      	movs	r3, #1
 80287d0:	68b9      	ldr	r1, [r7, #8]
 80287d2:	68f8      	ldr	r0, [r7, #12]
 80287d4:	f7ff fe7c 	bl	80284d0 <lfs_file_flushedwrite>
 80287d8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80287da:	69fb      	ldr	r3, [r7, #28]
 80287dc:	2b00      	cmp	r3, #0
 80287de:	da01      	bge.n	80287e4 <lfs_file_rawwrite+0xc4>
                return res;
 80287e0:	69fb      	ldr	r3, [r7, #28]
 80287e2:	e017      	b.n	8028814 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 80287e4:	68bb      	ldr	r3, [r7, #8]
 80287e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80287e8:	6a3a      	ldr	r2, [r7, #32]
 80287ea:	429a      	cmp	r2, r3
 80287ec:	d8eb      	bhi.n	80287c6 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80287ee:	683b      	ldr	r3, [r7, #0]
 80287f0:	687a      	ldr	r2, [r7, #4]
 80287f2:	68b9      	ldr	r1, [r7, #8]
 80287f4:	68f8      	ldr	r0, [r7, #12]
 80287f6:	f7ff fe6b 	bl	80284d0 <lfs_file_flushedwrite>
 80287fa:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80287fc:	69bb      	ldr	r3, [r7, #24]
 80287fe:	2b00      	cmp	r3, #0
 8028800:	da01      	bge.n	8028806 <lfs_file_rawwrite+0xe6>
        return nsize;
 8028802:	69bb      	ldr	r3, [r7, #24]
 8028804:	e006      	b.n	8028814 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8028806:	68bb      	ldr	r3, [r7, #8]
 8028808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802880a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802880e:	68bb      	ldr	r3, [r7, #8]
 8028810:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8028812:	69bb      	ldr	r3, [r7, #24]
}
 8028814:	4618      	mov	r0, r3
 8028816:	3728      	adds	r7, #40	; 0x28
 8028818:	46bd      	mov	sp, r7
 802881a:	bd80      	pop	{r7, pc}
 802881c:	080332ac 	.word	0x080332ac
 8028820:	0803425c 	.word	0x0803425c
 8028824:	08032f40 	.word	0x08032f40

08028828 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8028828:	b580      	push	{r7, lr}
 802882a:	b08c      	sub	sp, #48	; 0x30
 802882c:	af00      	add	r7, sp, #0
 802882e:	60f8      	str	r0, [r7, #12]
 8028830:	60b9      	str	r1, [r7, #8]
 8028832:	607a      	str	r2, [r7, #4]
 8028834:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8028836:	68bb      	ldr	r3, [r7, #8]
 8028838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802883a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 802883c:	683b      	ldr	r3, [r7, #0]
 802883e:	2b00      	cmp	r3, #0
 8028840:	d102      	bne.n	8028848 <lfs_file_rawseek+0x20>
        npos = off;
 8028842:	687b      	ldr	r3, [r7, #4]
 8028844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028846:	e025      	b.n	8028894 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8028848:	683b      	ldr	r3, [r7, #0]
 802884a:	2b01      	cmp	r3, #1
 802884c:	d10f      	bne.n	802886e <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 802884e:	68bb      	ldr	r3, [r7, #8]
 8028850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028852:	461a      	mov	r2, r3
 8028854:	687b      	ldr	r3, [r7, #4]
 8028856:	4413      	add	r3, r2
 8028858:	2b00      	cmp	r3, #0
 802885a:	da02      	bge.n	8028862 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 802885c:	f06f 0315 	mvn.w	r3, #21
 8028860:	e067      	b.n	8028932 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8028862:	68bb      	ldr	r3, [r7, #8]
 8028864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028866:	687b      	ldr	r3, [r7, #4]
 8028868:	4413      	add	r3, r2
 802886a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802886c:	e012      	b.n	8028894 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 802886e:	683b      	ldr	r3, [r7, #0]
 8028870:	2b02      	cmp	r3, #2
 8028872:	d10f      	bne.n	8028894 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8028874:	68b9      	ldr	r1, [r7, #8]
 8028876:	68f8      	ldr	r0, [r7, #12]
 8028878:	f000 f85f 	bl	802893a <lfs_file_rawsize>
 802887c:	4602      	mov	r2, r0
 802887e:	687b      	ldr	r3, [r7, #4]
 8028880:	4413      	add	r3, r2
 8028882:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8028884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028886:	2b00      	cmp	r3, #0
 8028888:	da02      	bge.n	8028890 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 802888a:	f06f 0315 	mvn.w	r3, #21
 802888e:	e050      	b.n	8028932 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8028890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028892:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8028894:	68fb      	ldr	r3, [r7, #12]
 8028896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802889a:	429a      	cmp	r2, r3
 802889c:	d902      	bls.n	80288a4 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 802889e:	f06f 0315 	mvn.w	r3, #21
 80288a2:	e046      	b.n	8028932 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 80288a4:	68bb      	ldr	r3, [r7, #8]
 80288a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80288a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80288aa:	429a      	cmp	r2, r3
 80288ac:	d101      	bne.n	80288b2 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 80288ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80288b0:	e03f      	b.n	8028932 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80288b2:	68bb      	ldr	r3, [r7, #8]
 80288b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 80288ba:	2b00      	cmp	r3, #0
 80288bc:	d12b      	bne.n	8028916 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80288be:	68bb      	ldr	r3, [r7, #8]
 80288c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80288c2:	61bb      	str	r3, [r7, #24]
 80288c4:	f107 0318 	add.w	r3, r7, #24
 80288c8:	4619      	mov	r1, r3
 80288ca:	68f8      	ldr	r0, [r7, #12]
 80288cc:	f7fe fe86 	bl	80275dc <lfs_ctz_index>
 80288d0:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 80288d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80288d4:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80288d6:	f107 0314 	add.w	r3, r7, #20
 80288da:	4619      	mov	r1, r3
 80288dc:	68f8      	ldr	r0, [r7, #12]
 80288de:	f7fe fe7d 	bl	80275dc <lfs_ctz_index>
 80288e2:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80288e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80288e6:	6a3b      	ldr	r3, [r7, #32]
 80288e8:	429a      	cmp	r2, r3
 80288ea:	d114      	bne.n	8028916 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 80288ec:	68bb      	ldr	r3, [r7, #8]
 80288ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80288f0:	697b      	ldr	r3, [r7, #20]
 80288f2:	429a      	cmp	r2, r3
 80288f4:	d80f      	bhi.n	8028916 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 80288f6:	68bb      	ldr	r3, [r7, #8]
 80288f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80288fa:	68bb      	ldr	r3, [r7, #8]
 80288fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80288fe:	441a      	add	r2, r3
 8028900:	697b      	ldr	r3, [r7, #20]
 8028902:	429a      	cmp	r2, r3
 8028904:	d907      	bls.n	8028916 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8028906:	68bb      	ldr	r3, [r7, #8]
 8028908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802890a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 802890c:	697a      	ldr	r2, [r7, #20]
 802890e:	68bb      	ldr	r3, [r7, #8]
 8028910:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8028912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028914:	e00d      	b.n	8028932 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8028916:	68b9      	ldr	r1, [r7, #8]
 8028918:	68f8      	ldr	r0, [r7, #12]
 802891a:	f7ff fb71 	bl	8028000 <lfs_file_flush>
 802891e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8028920:	69fb      	ldr	r3, [r7, #28]
 8028922:	2b00      	cmp	r3, #0
 8028924:	d001      	beq.n	802892a <lfs_file_rawseek+0x102>
        return err;
 8028926:	69fb      	ldr	r3, [r7, #28]
 8028928:	e003      	b.n	8028932 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 802892a:	68bb      	ldr	r3, [r7, #8]
 802892c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802892e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8028930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8028932:	4618      	mov	r0, r3
 8028934:	3730      	adds	r7, #48	; 0x30
 8028936:	46bd      	mov	sp, r7
 8028938:	bd80      	pop	{r7, pc}

0802893a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 802893a:	b580      	push	{r7, lr}
 802893c:	b082      	sub	sp, #8
 802893e:	af00      	add	r7, sp, #0
 8028940:	6078      	str	r0, [r7, #4]
 8028942:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028944:	683b      	ldr	r3, [r7, #0]
 8028946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802894c:	2b00      	cmp	r3, #0
 802894e:	d009      	beq.n	8028964 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8028950:	683b      	ldr	r3, [r7, #0]
 8028952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028954:	683b      	ldr	r3, [r7, #0]
 8028956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028958:	4619      	mov	r1, r3
 802895a:	4610      	mov	r0, r2
 802895c:	f7fa fc02 	bl	8023164 <lfs_max>
 8028960:	4603      	mov	r3, r0
 8028962:	e001      	b.n	8028968 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8028964:	683b      	ldr	r3, [r7, #0]
 8028966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8028968:	4618      	mov	r0, r3
 802896a:	3708      	adds	r7, #8
 802896c:	46bd      	mov	sp, r7
 802896e:	bd80      	pop	{r7, pc}

08028970 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8028970:	b580      	push	{r7, lr}
 8028972:	b08e      	sub	sp, #56	; 0x38
 8028974:	af00      	add	r7, sp, #0
 8028976:	60f8      	str	r0, [r7, #12]
 8028978:	60b9      	str	r1, [r7, #8]
 802897a:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 802897c:	f107 0208 	add.w	r2, r7, #8
 8028980:	f107 0114 	add.w	r1, r7, #20
 8028984:	2300      	movs	r3, #0
 8028986:	68f8      	ldr	r0, [r7, #12]
 8028988:	f7fc feae 	bl	80256e8 <lfs_dir_find>
 802898c:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 802898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028990:	2b00      	cmp	r3, #0
 8028992:	da01      	bge.n	8028998 <lfs_rawstat+0x28>
        return (int)tag;
 8028994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028996:	e00c      	b.n	80289b2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8028998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802899a:	4618      	mov	r0, r3
 802899c:	f7fb f908 	bl	8023bb0 <lfs_tag_id>
 80289a0:	4603      	mov	r3, r0
 80289a2:	461a      	mov	r2, r3
 80289a4:	f107 0114 	add.w	r1, r7, #20
 80289a8:	687b      	ldr	r3, [r7, #4]
 80289aa:	68f8      	ldr	r0, [r7, #12]
 80289ac:	f7fc fdd8 	bl	8025560 <lfs_dir_getinfo>
 80289b0:	4603      	mov	r3, r0
}
 80289b2:	4618      	mov	r0, r3
 80289b4:	3738      	adds	r7, #56	; 0x38
 80289b6:	46bd      	mov	sp, r7
 80289b8:	bd80      	pop	{r7, pc}
	...

080289bc <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 80289bc:	b580      	push	{r7, lr}
 80289be:	b0a0      	sub	sp, #128	; 0x80
 80289c0:	af02      	add	r7, sp, #8
 80289c2:	6078      	str	r0, [r7, #4]
 80289c4:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80289c6:	6878      	ldr	r0, [r7, #4]
 80289c8:	f001 fba2 	bl	802a110 <lfs_fs_forceconsistency>
 80289cc:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 80289ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80289d0:	2b00      	cmp	r3, #0
 80289d2:	d001      	beq.n	80289d8 <lfs_rawremove+0x1c>
        return err;
 80289d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80289d6:	e0c4      	b.n	8028b62 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80289d8:	463a      	mov	r2, r7
 80289da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80289de:	2300      	movs	r3, #0
 80289e0:	6878      	ldr	r0, [r7, #4]
 80289e2:	f7fc fe81 	bl	80256e8 <lfs_dir_find>
 80289e6:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 80289e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80289ea:	2b00      	cmp	r3, #0
 80289ec:	db09      	blt.n	8028a02 <lfs_rawremove+0x46>
 80289ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80289f0:	4618      	mov	r0, r3
 80289f2:	f7fb f8dd 	bl	8023bb0 <lfs_tag_id>
 80289f6:	4603      	mov	r3, r0
 80289f8:	461a      	mov	r2, r3
 80289fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80289fe:	429a      	cmp	r2, r3
 8028a00:	d107      	bne.n	8028a12 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8028a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028a04:	2b00      	cmp	r3, #0
 8028a06:	da01      	bge.n	8028a0c <lfs_rawremove+0x50>
 8028a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028a0a:	e0aa      	b.n	8028b62 <lfs_rawremove+0x1a6>
 8028a0c:	f06f 0315 	mvn.w	r3, #21
 8028a10:	e0a7      	b.n	8028b62 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8028a12:	687b      	ldr	r3, [r7, #4]
 8028a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028a16:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028a1a:	4618      	mov	r0, r3
 8028a1c:	f7fb f89e 	bl	8023b5c <lfs_tag_type3>
 8028a20:	4603      	mov	r3, r0
 8028a22:	2b02      	cmp	r3, #2
 8028a24:	d14a      	bne.n	8028abc <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8028a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028a28:	4618      	mov	r0, r3
 8028a2a:	f7fb f8c1 	bl	8023bb0 <lfs_tag_id>
 8028a2e:	4603      	mov	r3, r0
 8028a30:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8028a32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028a36:	f043 0308 	orr.w	r3, r3, #8
 8028a3a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028a3e:	f107 020c 	add.w	r2, r7, #12
 8028a42:	9200      	str	r2, [sp, #0]
 8028a44:	4a49      	ldr	r2, [pc, #292]	; (8028b6c <lfs_rawremove+0x1b0>)
 8028a46:	6878      	ldr	r0, [r7, #4]
 8028a48:	f7fb fc9c 	bl	8024384 <lfs_dir_get>
 8028a4c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 8028a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028a50:	2b00      	cmp	r3, #0
 8028a52:	da01      	bge.n	8028a58 <lfs_rawremove+0x9c>
            return (int)res;
 8028a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028a56:	e084      	b.n	8028b62 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8028a58:	f107 030c 	add.w	r3, r7, #12
 8028a5c:	4618      	mov	r0, r3
 8028a5e:	f7fb f818 	bl	8023a92 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8028a62:	f107 020c 	add.w	r2, r7, #12
 8028a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028a6a:	3308      	adds	r3, #8
 8028a6c:	4619      	mov	r1, r3
 8028a6e:	6878      	ldr	r0, [r7, #4]
 8028a70:	f7fc fd28 	bl	80254c4 <lfs_dir_fetch>
 8028a74:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028a78:	2b00      	cmp	r3, #0
 8028a7a:	d001      	beq.n	8028a80 <lfs_rawremove+0xc4>
            return err;
 8028a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028a7e:	e070      	b.n	8028b62 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8028a80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8028a84:	2b00      	cmp	r3, #0
 8028a86:	d103      	bne.n	8028a90 <lfs_rawremove+0xd4>
 8028a88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8028a8c:	2b00      	cmp	r3, #0
 8028a8e:	d002      	beq.n	8028a96 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8028a90:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8028a94:	e065      	b.n	8028b62 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8028a96:	2101      	movs	r1, #1
 8028a98:	6878      	ldr	r0, [r7, #4]
 8028a9a:	f001 f8bb 	bl	8029c14 <lfs_fs_preporphans>
 8028a9e:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028aa2:	2b00      	cmp	r3, #0
 8028aa4:	d001      	beq.n	8028aaa <lfs_rawremove+0xee>
            return err;
 8028aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028aa8:	e05b      	b.n	8028b62 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8028aaa:	2300      	movs	r3, #0
 8028aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 8028ab0:	2300      	movs	r3, #0
 8028ab2:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 8028ab4:	687b      	ldr	r3, [r7, #4]
 8028ab6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028aba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8028abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028abe:	4618      	mov	r0, r3
 8028ac0:	f7fb f876 	bl	8023bb0 <lfs_tag_id>
 8028ac4:	4603      	mov	r3, r0
 8028ac6:	029b      	lsls	r3, r3, #10
 8028ac8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8028acc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028ad0:	61fb      	str	r3, [r7, #28]
 8028ad2:	2300      	movs	r3, #0
 8028ad4:	623b      	str	r3, [r7, #32]
 8028ad6:	f107 021c 	add.w	r2, r7, #28
 8028ada:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028ade:	2301      	movs	r3, #1
 8028ae0:	6878      	ldr	r0, [r7, #4]
 8028ae2:	f7fe fb09 	bl	80270f8 <lfs_dir_commit>
 8028ae6:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8028ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028aea:	2b00      	cmp	r3, #0
 8028aec:	d004      	beq.n	8028af8 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 8028aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028af0:	687b      	ldr	r3, [r7, #4]
 8028af2:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8028af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028af6:	e034      	b.n	8028b62 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8028af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028afa:	687b      	ldr	r3, [r7, #4]
 8028afc:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028b00:	4618      	mov	r0, r3
 8028b02:	f7fb f82b 	bl	8023b5c <lfs_tag_type3>
 8028b06:	4603      	mov	r3, r0
 8028b08:	2b02      	cmp	r3, #2
 8028b0a:	d129      	bne.n	8028b60 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8028b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8028b10:	6878      	ldr	r0, [r7, #4]
 8028b12:	f001 f87f 	bl	8029c14 <lfs_fs_preporphans>
 8028b16:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028b1a:	2b00      	cmp	r3, #0
 8028b1c:	d001      	beq.n	8028b22 <lfs_rawremove+0x166>
            return err;
 8028b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028b20:	e01f      	b.n	8028b62 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8028b22:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8028b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028b2a:	3308      	adds	r3, #8
 8028b2c:	4619      	mov	r1, r3
 8028b2e:	6878      	ldr	r0, [r7, #4]
 8028b30:	f000 ff90 	bl	8029a54 <lfs_fs_pred>
 8028b34:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028b38:	2b00      	cmp	r3, #0
 8028b3a:	d001      	beq.n	8028b40 <lfs_rawremove+0x184>
            return err;
 8028b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028b3e:	e010      	b.n	8028b62 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8028b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028b44:	f103 0208 	add.w	r2, r3, #8
 8028b48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8028b4c:	4619      	mov	r1, r3
 8028b4e:	6878      	ldr	r0, [r7, #4]
 8028b50:	f7fd f930 	bl	8025db4 <lfs_dir_drop>
 8028b54:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028b58:	2b00      	cmp	r3, #0
 8028b5a:	d001      	beq.n	8028b60 <lfs_rawremove+0x1a4>
            return err;
 8028b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028b5e:	e000      	b.n	8028b62 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8028b60:	2300      	movs	r3, #0
}
 8028b62:	4618      	mov	r0, r3
 8028b64:	3778      	adds	r7, #120	; 0x78
 8028b66:	46bd      	mov	sp, r7
 8028b68:	bd80      	pop	{r7, pc}
 8028b6a:	bf00      	nop
 8028b6c:	700ffc00 	.word	0x700ffc00

08028b70 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8028b70:	b590      	push	{r4, r7, lr}
 8028b72:	b0c3      	sub	sp, #268	; 0x10c
 8028b74:	af02      	add	r7, sp, #8
 8028b76:	60f8      	str	r0, [r7, #12]
 8028b78:	60b9      	str	r1, [r7, #8]
 8028b7a:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028b7c:	68f8      	ldr	r0, [r7, #12]
 8028b7e:	f001 fac7 	bl	802a110 <lfs_fs_forceconsistency>
 8028b82:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (err) {
 8028b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028b8a:	2b00      	cmp	r3, #0
 8028b8c:	d002      	beq.n	8028b94 <lfs_rawrename+0x24>
        return err;
 8028b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028b92:	e1f7      	b.n	8028f84 <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8028b94:	f107 0208 	add.w	r2, r7, #8
 8028b98:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8028b9c:	2300      	movs	r3, #0
 8028b9e:	68f8      	ldr	r0, [r7, #12]
 8028ba0:	f7fc fda2 	bl	80256e8 <lfs_dir_find>
 8028ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8028ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028bac:	2b00      	cmp	r3, #0
 8028bae:	db0a      	blt.n	8028bc6 <lfs_rawrename+0x56>
 8028bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028bb4:	4618      	mov	r0, r3
 8028bb6:	f7fa fffb 	bl	8023bb0 <lfs_tag_id>
 8028bba:	4603      	mov	r3, r0
 8028bbc:	461a      	mov	r2, r3
 8028bbe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028bc2:	429a      	cmp	r2, r3
 8028bc4:	d109      	bne.n	8028bda <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8028bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028bca:	2b00      	cmp	r3, #0
 8028bcc:	da02      	bge.n	8028bd4 <lfs_rawrename+0x64>
 8028bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028bd2:	e1d7      	b.n	8028f84 <lfs_rawrename+0x414>
 8028bd4:	f06f 0315 	mvn.w	r3, #21
 8028bd8:	e1d4      	b.n	8028f84 <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8028bda:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 8028bde:	1d3a      	adds	r2, r7, #4
 8028be0:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8028be4:	68f8      	ldr	r0, [r7, #12]
 8028be6:	f7fc fd7f 	bl	80256e8 <lfs_dir_find>
 8028bea:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8028bee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028bf2:	2b00      	cmp	r3, #0
 8028bf4:	db0a      	blt.n	8028c0c <lfs_rawrename+0x9c>
 8028bf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028bfa:	4618      	mov	r0, r3
 8028bfc:	f7fa ffd8 	bl	8023bb0 <lfs_tag_id>
 8028c00:	4603      	mov	r3, r0
 8028c02:	461a      	mov	r2, r3
 8028c04:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028c08:	429a      	cmp	r2, r3
 8028c0a:	d114      	bne.n	8028c36 <lfs_rawrename+0xc6>
 8028c0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028c10:	f113 0f02 	cmn.w	r3, #2
 8028c14:	d105      	bne.n	8028c22 <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8028c16:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028c1a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8028c1e:	4293      	cmp	r3, r2
 8028c20:	d109      	bne.n	8028c36 <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8028c22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028c26:	2b00      	cmp	r3, #0
 8028c28:	da02      	bge.n	8028c30 <lfs_rawrename+0xc0>
 8028c2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028c2e:	e1a9      	b.n	8028f84 <lfs_rawrename+0x414>
 8028c30:	f06f 0315 	mvn.w	r3, #21
 8028c34:	e1a6      	b.n	8028f84 <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8028c36:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8028c3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8028c3e:	4611      	mov	r1, r2
 8028c40:	4618      	mov	r0, r3
 8028c42:	f7fa fecf 	bl	80239e4 <lfs_pair_cmp>
 8028c46:	4603      	mov	r3, r0
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	bf0c      	ite	eq
 8028c4c:	2301      	moveq	r3, #1
 8028c4e:	2300      	movne	r3, #0
 8028c50:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8028c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028c58:	4618      	mov	r0, r3
 8028c5a:	f7fa ffa9 	bl	8023bb0 <lfs_tag_id>
 8028c5e:	4603      	mov	r3, r0
 8028c60:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028c68:	67bb      	str	r3, [r7, #120]	; 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8028c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028c6e:	f113 0f02 	cmn.w	r3, #2
 8028c72:	d11f      	bne.n	8028cb4 <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8028c74:	687b      	ldr	r3, [r7, #4]
 8028c76:	4618      	mov	r0, r3
 8028c78:	f7e7 fb12 	bl	80102a0 <strlen>
 8028c7c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        if (nlen > lfs->name_max) {
 8028c80:	68fb      	ldr	r3, [r7, #12]
 8028c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028c84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8028c88:	429a      	cmp	r2, r3
 8028c8a:	d902      	bls.n	8028c92 <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 8028c8c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8028c90:	e178      	b.n	8028f84 <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8028c92:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028c96:	2b00      	cmp	r3, #0
 8028c98:	f000 8084 	beq.w	8028da4 <lfs_rawrename+0x234>
 8028c9c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028ca0:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8028ca4:	429a      	cmp	r2, r3
 8028ca6:	d37d      	bcc.n	8028da4 <lfs_rawrename+0x234>
            newoldid += 1;
 8028ca8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8028cac:	3301      	adds	r3, #1
 8028cae:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8028cb2:	e077      	b.n	8028da4 <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8028cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028cb8:	4618      	mov	r0, r3
 8028cba:	f7fa ff4f 	bl	8023b5c <lfs_tag_type3>
 8028cbe:	4603      	mov	r3, r0
 8028cc0:	461c      	mov	r4, r3
 8028cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028cc6:	4618      	mov	r0, r3
 8028cc8:	f7fa ff48 	bl	8023b5c <lfs_tag_type3>
 8028ccc:	4603      	mov	r3, r0
 8028cce:	429c      	cmp	r4, r3
 8028cd0:	d002      	beq.n	8028cd8 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 8028cd2:	f06f 0314 	mvn.w	r3, #20
 8028cd6:	e155      	b.n	8028f84 <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 8028cd8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	d007      	beq.n	8028cf0 <lfs_rawrename+0x180>
 8028ce0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028ce4:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8028ce8:	429a      	cmp	r2, r3
 8028cea:	d101      	bne.n	8028cf0 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 8028cec:	2300      	movs	r3, #0
 8028cee:	e149      	b.n	8028f84 <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8028cf0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028cf4:	4618      	mov	r0, r3
 8028cf6:	f7fa ff31 	bl	8023b5c <lfs_tag_type3>
 8028cfa:	4603      	mov	r3, r0
 8028cfc:	2b02      	cmp	r3, #2
 8028cfe:	d151      	bne.n	8028da4 <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8028d00:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028d04:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8028d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028d0a:	f043 0308 	orr.w	r3, r3, #8
 8028d0e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8028d12:	f107 0220 	add.w	r2, r7, #32
 8028d16:	9200      	str	r2, [sp, #0]
 8028d18:	4a9d      	ldr	r2, [pc, #628]	; (8028f90 <lfs_rawrename+0x420>)
 8028d1a:	68f8      	ldr	r0, [r7, #12]
 8028d1c:	f7fb fb32 	bl	8024384 <lfs_dir_get>
 8028d20:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (res < 0) {
 8028d24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	da02      	bge.n	8028d32 <lfs_rawrename+0x1c2>
            return (int)res;
 8028d2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8028d30:	e128      	b.n	8028f84 <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 8028d32:	f107 0320 	add.w	r3, r7, #32
 8028d36:	4618      	mov	r0, r3
 8028d38:	f7fa feab 	bl	8023a92 <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 8028d3c:	f107 0220 	add.w	r2, r7, #32
 8028d40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028d44:	3308      	adds	r3, #8
 8028d46:	4619      	mov	r1, r3
 8028d48:	68f8      	ldr	r0, [r7, #12]
 8028d4a:	f7fc fbbb 	bl	80254c4 <lfs_dir_fetch>
 8028d4e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8028d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028d56:	2b00      	cmp	r3, #0
 8028d58:	d002      	beq.n	8028d60 <lfs_rawrename+0x1f0>
            return err;
 8028d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028d5e:	e111      	b.n	8028f84 <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8028d60:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8028d64:	2b00      	cmp	r3, #0
 8028d66:	d103      	bne.n	8028d70 <lfs_rawrename+0x200>
 8028d68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	d002      	beq.n	8028d76 <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 8028d70:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8028d74:	e106      	b.n	8028f84 <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8028d76:	2101      	movs	r1, #1
 8028d78:	68f8      	ldr	r0, [r7, #12]
 8028d7a:	f000 ff4b 	bl	8029c14 <lfs_fs_preporphans>
 8028d7e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8028d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028d86:	2b00      	cmp	r3, #0
 8028d88:	d002      	beq.n	8028d90 <lfs_rawrename+0x220>
            return err;
 8028d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028d8e:	e0f9      	b.n	8028f84 <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8028d90:	2300      	movs	r3, #0
 8028d92:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        prevdir.id = 0;
 8028d96:	2300      	movs	r3, #0
 8028d98:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        lfs->mlist = &prevdir;
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8028da2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (!samepair) {
 8028da4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028da8:	f083 0301 	eor.w	r3, r3, #1
 8028dac:	b2db      	uxtb	r3, r3
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d007      	beq.n	8028dc2 <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8028db2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8028db6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8028dba:	4619      	mov	r1, r3
 8028dbc:	68f8      	ldr	r0, [r7, #12]
 8028dbe:	f000 ff63 	bl	8029c88 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8028dc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028dc6:	f113 0f02 	cmn.w	r3, #2
 8028dca:	d007      	beq.n	8028ddc <lfs_rawrename+0x26c>
 8028dcc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028dd0:	029b      	lsls	r3, r3, #10
 8028dd2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8028dd6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028dda:	e000      	b.n	8028dde <lfs_rawrename+0x26e>
 8028ddc:	2300      	movs	r3, #0
 8028dde:	653b      	str	r3, [r7, #80]	; 0x50
 8028de0:	2300      	movs	r3, #0
 8028de2:	657b      	str	r3, [r7, #84]	; 0x54
 8028de4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028de8:	029b      	lsls	r3, r3, #10
 8028dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8028dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8028df4:	2300      	movs	r3, #0
 8028df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028dfc:	4618      	mov	r0, r3
 8028dfe:	f7fa fead 	bl	8023b5c <lfs_tag_type3>
 8028e02:	4603      	mov	r3, r0
 8028e04:	051a      	lsls	r2, r3, #20
 8028e06:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028e0a:	029b      	lsls	r3, r3, #10
 8028e0c:	ea42 0403 	orr.w	r4, r2, r3
 8028e10:	687b      	ldr	r3, [r7, #4]
 8028e12:	4618      	mov	r0, r3
 8028e14:	f7e7 fa44 	bl	80102a0 <strlen>
 8028e18:	4603      	mov	r3, r0
 8028e1a:	4323      	orrs	r3, r4
 8028e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8028e1e:	687b      	ldr	r3, [r7, #4]
 8028e20:	667b      	str	r3, [r7, #100]	; 0x64
 8028e22:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028e26:	029c      	lsls	r4, r3, #10
 8028e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028e2c:	4618      	mov	r0, r3
 8028e2e:	f7fa febf 	bl	8023bb0 <lfs_tag_id>
 8028e32:	4603      	mov	r3, r0
 8028e34:	4323      	orrs	r3, r4
 8028e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8028e40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8028e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8028e46:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028e4a:	2b00      	cmp	r3, #0
 8028e4c:	d007      	beq.n	8028e5e <lfs_rawrename+0x2ee>
 8028e4e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8028e52:	029b      	lsls	r3, r3, #10
 8028e54:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8028e58:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028e5c:	e000      	b.n	8028e60 <lfs_rawrename+0x2f0>
 8028e5e:	2300      	movs	r3, #0
 8028e60:	673b      	str	r3, [r7, #112]	; 0x70
 8028e62:	2300      	movs	r3, #0
 8028e64:	677b      	str	r3, [r7, #116]	; 0x74
 8028e66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8028e6a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8028e6e:	2305      	movs	r3, #5
 8028e70:	68f8      	ldr	r0, [r7, #12]
 8028e72:	f7fe f941 	bl	80270f8 <lfs_dir_commit>
 8028e76:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 8028e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028e7e:	2b00      	cmp	r3, #0
 8028e80:	d005      	beq.n	8028e8e <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 8028e82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8028e84:	68fb      	ldr	r3, [r7, #12]
 8028e86:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8028e88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028e8c:	e07a      	b.n	8028f84 <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8028e8e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028e92:	f083 0301 	eor.w	r3, r3, #1
 8028e96:	b2db      	uxtb	r3, r3
 8028e98:	2b00      	cmp	r3, #0
 8028e9a:	d02f      	beq.n	8028efc <lfs_rawrename+0x38c>
 8028e9c:	68fb      	ldr	r3, [r7, #12]
 8028e9e:	3330      	adds	r3, #48	; 0x30
 8028ea0:	4618      	mov	r0, r3
 8028ea2:	f7fa ff1a 	bl	8023cda <lfs_gstate_hasmove>
 8028ea6:	4603      	mov	r3, r0
 8028ea8:	2b00      	cmp	r3, #0
 8028eaa:	d027      	beq.n	8028efc <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8028eac:	2200      	movs	r2, #0
 8028eae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8028eb2:	68f8      	ldr	r0, [r7, #12]
 8028eb4:	f000 fee8 	bl	8029c88 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8028eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ebc:	4618      	mov	r0, r3
 8028ebe:	f7fa fe77 	bl	8023bb0 <lfs_tag_id>
 8028ec2:	4603      	mov	r3, r0
 8028ec4:	029b      	lsls	r3, r3, #10
 8028ec6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8028eca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028ece:	61bb      	str	r3, [r7, #24]
 8028ed0:	2300      	movs	r3, #0
 8028ed2:	61fb      	str	r3, [r7, #28]
 8028ed4:	f107 0218 	add.w	r2, r7, #24
 8028ed8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8028edc:	2301      	movs	r3, #1
 8028ede:	68f8      	ldr	r0, [r7, #12]
 8028ee0:	f7fe f90a 	bl	80270f8 <lfs_dir_commit>
 8028ee4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8028ee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028eec:	2b00      	cmp	r3, #0
 8028eee:	d005      	beq.n	8028efc <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 8028ef0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8028ef2:	68fb      	ldr	r3, [r7, #12]
 8028ef4:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8028ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028efa:	e043      	b.n	8028f84 <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 8028efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8028efe:	68fb      	ldr	r3, [r7, #12]
 8028f00:	629a      	str	r2, [r3, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
 8028f02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f06:	f113 0f02 	cmn.w	r3, #2
 8028f0a:	d03a      	beq.n	8028f82 <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8028f0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f10:	4618      	mov	r0, r3
 8028f12:	f7fa fe23 	bl	8023b5c <lfs_tag_type3>
 8028f16:	4603      	mov	r3, r0
 8028f18:	2b02      	cmp	r3, #2
 8028f1a:	d132      	bne.n	8028f82 <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8028f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8028f20:	68f8      	ldr	r0, [r7, #12]
 8028f22:	f000 fe77 	bl	8029c14 <lfs_fs_preporphans>
 8028f26:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8028f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f2e:	2b00      	cmp	r3, #0
 8028f30:	d002      	beq.n	8028f38 <lfs_rawrename+0x3c8>
            return err;
 8028f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f36:	e025      	b.n	8028f84 <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8028f38:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8028f3c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028f40:	3308      	adds	r3, #8
 8028f42:	4619      	mov	r1, r3
 8028f44:	68f8      	ldr	r0, [r7, #12]
 8028f46:	f000 fd85 	bl	8029a54 <lfs_fs_pred>
 8028f4a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8028f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	d002      	beq.n	8028f5c <lfs_rawrename+0x3ec>
            return err;
 8028f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f5a:	e013      	b.n	8028f84 <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8028f5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028f60:	f103 0208 	add.w	r2, r3, #8
 8028f64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8028f68:	4619      	mov	r1, r3
 8028f6a:	68f8      	ldr	r0, [r7, #12]
 8028f6c:	f7fc ff22 	bl	8025db4 <lfs_dir_drop>
 8028f70:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8028f74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f78:	2b00      	cmp	r3, #0
 8028f7a:	d002      	beq.n	8028f82 <lfs_rawrename+0x412>
            return err;
 8028f7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028f80:	e000      	b.n	8028f84 <lfs_rawrename+0x414>
        }
    }

    return 0;
 8028f82:	2300      	movs	r3, #0
}
 8028f84:	4618      	mov	r0, r3
 8028f86:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8028f8a:	46bd      	mov	sp, r7
 8028f8c:	bd90      	pop	{r4, r7, pc}
 8028f8e:	bf00      	nop
 8028f90:	700ffc00 	.word	0x700ffc00

08028f94 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8028f94:	b580      	push	{r7, lr}
 8028f96:	b08c      	sub	sp, #48	; 0x30
 8028f98:	af00      	add	r7, sp, #0
 8028f9a:	6078      	str	r0, [r7, #4]
 8028f9c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8028f9e:	687b      	ldr	r3, [r7, #4]
 8028fa0:	683a      	ldr	r2, [r7, #0]
 8028fa2:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8028fa4:	2300      	movs	r3, #0
 8028fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8028fa8:	687b      	ldr	r3, [r7, #4]
 8028faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028fac:	695b      	ldr	r3, [r3, #20]
 8028fae:	2b00      	cmp	r3, #0
 8028fb0:	d106      	bne.n	8028fc0 <lfs_init+0x2c>
 8028fb2:	4b92      	ldr	r3, [pc, #584]	; (80291fc <lfs_init+0x268>)
 8028fb4:	4a92      	ldr	r2, [pc, #584]	; (8029200 <lfs_init+0x26c>)
 8028fb6:	f640 7146 	movw	r1, #3910	; 0xf46
 8028fba:	4892      	ldr	r0, [pc, #584]	; (8029204 <lfs_init+0x270>)
 8028fbc:	f003 f80c 	bl	802bfd8 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8028fc0:	687b      	ldr	r3, [r7, #4]
 8028fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028fc4:	699b      	ldr	r3, [r3, #24]
 8028fc6:	2b00      	cmp	r3, #0
 8028fc8:	d106      	bne.n	8028fd8 <lfs_init+0x44>
 8028fca:	4b8f      	ldr	r3, [pc, #572]	; (8029208 <lfs_init+0x274>)
 8028fcc:	4a8c      	ldr	r2, [pc, #560]	; (8029200 <lfs_init+0x26c>)
 8028fce:	f640 7147 	movw	r1, #3911	; 0xf47
 8028fd2:	488c      	ldr	r0, [pc, #560]	; (8029204 <lfs_init+0x270>)
 8028fd4:	f003 f800 	bl	802bfd8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8028fd8:	687b      	ldr	r3, [r7, #4]
 8028fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028fde:	2b00      	cmp	r3, #0
 8028fe0:	d106      	bne.n	8028ff0 <lfs_init+0x5c>
 8028fe2:	4b8a      	ldr	r3, [pc, #552]	; (802920c <lfs_init+0x278>)
 8028fe4:	4a86      	ldr	r2, [pc, #536]	; (8029200 <lfs_init+0x26c>)
 8028fe6:	f640 7148 	movw	r1, #3912	; 0xf48
 8028fea:	4886      	ldr	r0, [pc, #536]	; (8029204 <lfs_init+0x270>)
 8028fec:	f002 fff4 	bl	802bfd8 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8028ff0:	687b      	ldr	r3, [r7, #4]
 8028ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ff6:	687a      	ldr	r2, [r7, #4]
 8028ff8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8028ffa:	6952      	ldr	r2, [r2, #20]
 8028ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8029000:	fb01 f202 	mul.w	r2, r1, r2
 8029004:	1a9b      	subs	r3, r3, r2
 8029006:	2b00      	cmp	r3, #0
 8029008:	d006      	beq.n	8029018 <lfs_init+0x84>
 802900a:	4b81      	ldr	r3, [pc, #516]	; (8029210 <lfs_init+0x27c>)
 802900c:	4a7c      	ldr	r2, [pc, #496]	; (8029200 <lfs_init+0x26c>)
 802900e:	f640 714c 	movw	r1, #3916	; 0xf4c
 8029012:	487c      	ldr	r0, [pc, #496]	; (8029204 <lfs_init+0x270>)
 8029014:	f002 ffe0 	bl	802bfd8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029018:	687b      	ldr	r3, [r7, #4]
 802901a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802901e:	687a      	ldr	r2, [r7, #4]
 8029020:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029022:	6992      	ldr	r2, [r2, #24]
 8029024:	fbb3 f1f2 	udiv	r1, r3, r2
 8029028:	fb01 f202 	mul.w	r2, r1, r2
 802902c:	1a9b      	subs	r3, r3, r2
 802902e:	2b00      	cmp	r3, #0
 8029030:	d006      	beq.n	8029040 <lfs_init+0xac>
 8029032:	4b78      	ldr	r3, [pc, #480]	; (8029214 <lfs_init+0x280>)
 8029034:	4a72      	ldr	r2, [pc, #456]	; (8029200 <lfs_init+0x26c>)
 8029036:	f640 714d 	movw	r1, #3917	; 0xf4d
 802903a:	4872      	ldr	r0, [pc, #456]	; (8029204 <lfs_init+0x270>)
 802903c:	f002 ffcc 	bl	802bfd8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8029040:	687b      	ldr	r3, [r7, #4]
 8029042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029044:	69db      	ldr	r3, [r3, #28]
 8029046:	687a      	ldr	r2, [r7, #4]
 8029048:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802904a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 802904c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029050:	fb01 f202 	mul.w	r2, r1, r2
 8029054:	1a9b      	subs	r3, r3, r2
 8029056:	2b00      	cmp	r3, #0
 8029058:	d006      	beq.n	8029068 <lfs_init+0xd4>
 802905a:	4b6f      	ldr	r3, [pc, #444]	; (8029218 <lfs_init+0x284>)
 802905c:	4a68      	ldr	r2, [pc, #416]	; (8029200 <lfs_init+0x26c>)
 802905e:	f640 714e 	movw	r1, #3918	; 0xf4e
 8029062:	4868      	ldr	r0, [pc, #416]	; (8029204 <lfs_init+0x270>)
 8029064:	f002 ffb8 	bl	802bfd8 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8029068:	687b      	ldr	r3, [r7, #4]
 802906a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802906c:	69db      	ldr	r3, [r3, #28]
 802906e:	3b08      	subs	r3, #8
 8029070:	f04f 32ff 	mov.w	r2, #4294967295
 8029074:	fbb2 f3f3 	udiv	r3, r2, r3
 8029078:	4618      	mov	r0, r3
 802907a:	f7fa f8ba 	bl	80231f2 <lfs_npw2>
 802907e:	4603      	mov	r3, r0
 8029080:	009a      	lsls	r2, r3, #2
 8029082:	687b      	ldr	r3, [r7, #4]
 8029084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029086:	69db      	ldr	r3, [r3, #28]
 8029088:	429a      	cmp	r2, r3
 802908a:	d906      	bls.n	802909a <lfs_init+0x106>
 802908c:	4b63      	ldr	r3, [pc, #396]	; (802921c <lfs_init+0x288>)
 802908e:	4a5c      	ldr	r2, [pc, #368]	; (8029200 <lfs_init+0x26c>)
 8029090:	f640 7151 	movw	r1, #3921	; 0xf51
 8029094:	485b      	ldr	r0, [pc, #364]	; (8029204 <lfs_init+0x270>)
 8029096:	f002 ff9f 	bl	802bfd8 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 802909a:	687b      	ldr	r3, [r7, #4]
 802909c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80290a0:	2b00      	cmp	r3, #0
 80290a2:	d106      	bne.n	80290b2 <lfs_init+0x11e>
 80290a4:	4b5e      	ldr	r3, [pc, #376]	; (8029220 <lfs_init+0x28c>)
 80290a6:	4a56      	ldr	r2, [pc, #344]	; (8029200 <lfs_init+0x26c>)
 80290a8:	f640 715a 	movw	r1, #3930	; 0xf5a
 80290ac:	4855      	ldr	r0, [pc, #340]	; (8029204 <lfs_init+0x270>)
 80290ae:	f002 ff93 	bl	802bfd8 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80290b2:	687b      	ldr	r3, [r7, #4]
 80290b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80290b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80290b8:	2b00      	cmp	r3, #0
 80290ba:	d005      	beq.n	80290c8 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80290bc:	687b      	ldr	r3, [r7, #4]
 80290be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80290c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80290c2:	687b      	ldr	r3, [r7, #4]
 80290c4:	60da      	str	r2, [r3, #12]
 80290c6:	e010      	b.n	80290ea <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80290c8:	687b      	ldr	r3, [r7, #4]
 80290ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80290cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80290ce:	4618      	mov	r0, r3
 80290d0:	f7fa f8f7 	bl	80232c2 <lfs_malloc>
 80290d4:	4602      	mov	r2, r0
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80290da:	687b      	ldr	r3, [r7, #4]
 80290dc:	68db      	ldr	r3, [r3, #12]
 80290de:	2b00      	cmp	r3, #0
 80290e0:	d103      	bne.n	80290ea <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 80290e2:	f06f 030b 	mvn.w	r3, #11
 80290e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80290e8:	e0fd      	b.n	80292e6 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 80290ea:	687b      	ldr	r3, [r7, #4]
 80290ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80290ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80290f0:	2b00      	cmp	r3, #0
 80290f2:	d005      	beq.n	8029100 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80290f4:	687b      	ldr	r3, [r7, #4]
 80290f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80290f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80290fa:	687b      	ldr	r3, [r7, #4]
 80290fc:	61da      	str	r2, [r3, #28]
 80290fe:	e010      	b.n	8029122 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029100:	687b      	ldr	r3, [r7, #4]
 8029102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029106:	4618      	mov	r0, r3
 8029108:	f7fa f8db 	bl	80232c2 <lfs_malloc>
 802910c:	4602      	mov	r2, r0
 802910e:	687b      	ldr	r3, [r7, #4]
 8029110:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	69db      	ldr	r3, [r3, #28]
 8029116:	2b00      	cmp	r3, #0
 8029118:	d103      	bne.n	8029122 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 802911a:	f06f 030b 	mvn.w	r3, #11
 802911e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029120:	e0e1      	b.n	80292e6 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8029122:	687b      	ldr	r3, [r7, #4]
 8029124:	4619      	mov	r1, r3
 8029126:	6878      	ldr	r0, [r7, #4]
 8029128:	f7fa f8f1 	bl	802330e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 802912c:	687b      	ldr	r3, [r7, #4]
 802912e:	3310      	adds	r3, #16
 8029130:	4619      	mov	r1, r3
 8029132:	6878      	ldr	r0, [r7, #4]
 8029134:	f7fa f8eb 	bl	802330e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8029138:	687b      	ldr	r3, [r7, #4]
 802913a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802913e:	2b00      	cmp	r3, #0
 8029140:	d106      	bne.n	8029150 <lfs_init+0x1bc>
 8029142:	4b38      	ldr	r3, [pc, #224]	; (8029224 <lfs_init+0x290>)
 8029144:	4a2e      	ldr	r2, [pc, #184]	; (8029200 <lfs_init+0x26c>)
 8029146:	f640 7178 	movw	r1, #3960	; 0xf78
 802914a:	482e      	ldr	r0, [pc, #184]	; (8029204 <lfs_init+0x270>)
 802914c:	f002 ff44 	bl	802bfd8 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8029150:	687b      	ldr	r3, [r7, #4]
 8029152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029156:	f003 0307 	and.w	r3, r3, #7
 802915a:	2b00      	cmp	r3, #0
 802915c:	d106      	bne.n	802916c <lfs_init+0x1d8>
 802915e:	687b      	ldr	r3, [r7, #4]
 8029160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029164:	f003 0303 	and.w	r3, r3, #3
 8029168:	2b00      	cmp	r3, #0
 802916a:	d006      	beq.n	802917a <lfs_init+0x1e6>
 802916c:	4b2e      	ldr	r3, [pc, #184]	; (8029228 <lfs_init+0x294>)
 802916e:	4a24      	ldr	r2, [pc, #144]	; (8029200 <lfs_init+0x26c>)
 8029170:	f640 7179 	movw	r1, #3961	; 0xf79
 8029174:	4823      	ldr	r0, [pc, #140]	; (8029204 <lfs_init+0x270>)
 8029176:	f002 ff2f 	bl	802bfd8 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 802917a:	687b      	ldr	r3, [r7, #4]
 802917c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029180:	2b00      	cmp	r3, #0
 8029182:	d005      	beq.n	8029190 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8029184:	687b      	ldr	r3, [r7, #4]
 8029186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802918a:	687b      	ldr	r3, [r7, #4]
 802918c:	665a      	str	r2, [r3, #100]	; 0x64
 802918e:	e010      	b.n	80291b2 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8029190:	687b      	ldr	r3, [r7, #4]
 8029192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029196:	4618      	mov	r0, r3
 8029198:	f7fa f893 	bl	80232c2 <lfs_malloc>
 802919c:	4602      	mov	r2, r0
 802919e:	687b      	ldr	r3, [r7, #4]
 80291a0:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80291a2:	687b      	ldr	r3, [r7, #4]
 80291a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80291a6:	2b00      	cmp	r3, #0
 80291a8:	d103      	bne.n	80291b2 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80291aa:	f06f 030b 	mvn.w	r3, #11
 80291ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80291b0:	e099      	b.n	80292e6 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80291b2:	687b      	ldr	r3, [r7, #4]
 80291b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80291b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80291b8:	2bff      	cmp	r3, #255	; 0xff
 80291ba:	d906      	bls.n	80291ca <lfs_init+0x236>
 80291bc:	4b1b      	ldr	r3, [pc, #108]	; (802922c <lfs_init+0x298>)
 80291be:	4a10      	ldr	r2, [pc, #64]	; (8029200 <lfs_init+0x26c>)
 80291c0:	f640 7186 	movw	r1, #3974	; 0xf86
 80291c4:	480f      	ldr	r0, [pc, #60]	; (8029204 <lfs_init+0x270>)
 80291c6:	f002 ff07 	bl	802bfd8 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80291ca:	687b      	ldr	r3, [r7, #4]
 80291cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80291ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80291d0:	687b      	ldr	r3, [r7, #4]
 80291d2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80291d4:	687b      	ldr	r3, [r7, #4]
 80291d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80291d8:	2b00      	cmp	r3, #0
 80291da:	d102      	bne.n	80291e2 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80291dc:	687b      	ldr	r3, [r7, #4]
 80291de:	22ff      	movs	r2, #255	; 0xff
 80291e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80291e2:	687b      	ldr	r3, [r7, #4]
 80291e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80291e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80291e8:	2b00      	cmp	r3, #0
 80291ea:	da23      	bge.n	8029234 <lfs_init+0x2a0>
 80291ec:	4b10      	ldr	r3, [pc, #64]	; (8029230 <lfs_init+0x29c>)
 80291ee:	4a04      	ldr	r2, [pc, #16]	; (8029200 <lfs_init+0x26c>)
 80291f0:	f640 718c 	movw	r1, #3980	; 0xf8c
 80291f4:	4803      	ldr	r0, [pc, #12]	; (8029204 <lfs_init+0x270>)
 80291f6:	f002 feef 	bl	802bfd8 <__assert_func>
 80291fa:	bf00      	nop
 80291fc:	080332dc 	.word	0x080332dc
 8029200:	08034270 	.word	0x08034270
 8029204:	08032f40 	.word	0x08032f40
 8029208:	080332f8 	.word	0x080332f8
 802920c:	08033314 	.word	0x08033314
 8029210:	08033330 	.word	0x08033330
 8029214:	08033360 	.word	0x08033360
 8029218:	08033390 	.word	0x08033390
 802921c:	080333c4 	.word	0x080333c4
 8029220:	08033410 	.word	0x08033410
 8029224:	0803342c 	.word	0x0803342c
 8029228:	0803344c 	.word	0x0803344c
 802922c:	080334a0 	.word	0x080334a0
 8029230:	080334bc 	.word	0x080334bc
    lfs->file_max = lfs->cfg->file_max;
 8029234:	687b      	ldr	r3, [r7, #4]
 8029236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 802923e:	687b      	ldr	r3, [r7, #4]
 8029240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029242:	2b00      	cmp	r3, #0
 8029244:	d103      	bne.n	802924e <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8029246:	687b      	ldr	r3, [r7, #4]
 8029248:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802924c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802924e:	687b      	ldr	r3, [r7, #4]
 8029250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029254:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029258:	4293      	cmp	r3, r2
 802925a:	d906      	bls.n	802926a <lfs_init+0x2d6>
 802925c:	4b26      	ldr	r3, [pc, #152]	; (80292f8 <lfs_init+0x364>)
 802925e:	4a27      	ldr	r2, [pc, #156]	; (80292fc <lfs_init+0x368>)
 8029260:	f640 7192 	movw	r1, #3986	; 0xf92
 8029264:	4826      	ldr	r0, [pc, #152]	; (8029300 <lfs_init+0x36c>)
 8029266:	f002 feb7 	bl	802bfd8 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 802926a:	687b      	ldr	r3, [r7, #4]
 802926c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802926e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029270:	687b      	ldr	r3, [r7, #4]
 8029272:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8029274:	687b      	ldr	r3, [r7, #4]
 8029276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029278:	2b00      	cmp	r3, #0
 802927a:	d103      	bne.n	8029284 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 802927c:	687b      	ldr	r3, [r7, #4]
 802927e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029282:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8029284:	687b      	ldr	r3, [r7, #4]
 8029286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802928a:	687b      	ldr	r3, [r7, #4]
 802928c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802928e:	69db      	ldr	r3, [r3, #28]
 8029290:	429a      	cmp	r2, r3
 8029292:	d906      	bls.n	80292a2 <lfs_init+0x30e>
 8029294:	4b1b      	ldr	r3, [pc, #108]	; (8029304 <lfs_init+0x370>)
 8029296:	4a19      	ldr	r2, [pc, #100]	; (80292fc <lfs_init+0x368>)
 8029298:	f640 7198 	movw	r1, #3992	; 0xf98
 802929c:	4818      	ldr	r0, [pc, #96]	; (8029300 <lfs_init+0x36c>)
 802929e:	f002 fe9b 	bl	802bfd8 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80292a2:	687b      	ldr	r3, [r7, #4]
 80292a4:	f04f 32ff 	mov.w	r2, #4294967295
 80292a8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80292aa:	687b      	ldr	r3, [r7, #4]
 80292ac:	f04f 32ff 	mov.w	r2, #4294967295
 80292b0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80292b2:	687b      	ldr	r3, [r7, #4]
 80292b4:	2200      	movs	r2, #0
 80292b6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80292b8:	687b      	ldr	r3, [r7, #4]
 80292ba:	2200      	movs	r2, #0
 80292bc:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80292be:	687b      	ldr	r3, [r7, #4]
 80292c0:	333c      	adds	r3, #60	; 0x3c
 80292c2:	2200      	movs	r2, #0
 80292c4:	601a      	str	r2, [r3, #0]
 80292c6:	605a      	str	r2, [r3, #4]
 80292c8:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	3330      	adds	r3, #48	; 0x30
 80292ce:	2200      	movs	r2, #0
 80292d0:	601a      	str	r2, [r3, #0]
 80292d2:	605a      	str	r2, [r3, #4]
 80292d4:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	3348      	adds	r3, #72	; 0x48
 80292da:	2200      	movs	r2, #0
 80292dc:	601a      	str	r2, [r3, #0]
 80292de:	605a      	str	r2, [r3, #4]
 80292e0:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80292e2:	2300      	movs	r3, #0
 80292e4:	e003      	b.n	80292ee <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 80292e6:	6878      	ldr	r0, [r7, #4]
 80292e8:	f000 f80e 	bl	8029308 <lfs_deinit>
    return err;
 80292ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80292ee:	4618      	mov	r0, r3
 80292f0:	3730      	adds	r7, #48	; 0x30
 80292f2:	46bd      	mov	sp, r7
 80292f4:	bd80      	pop	{r7, pc}
 80292f6:	bf00      	nop
 80292f8:	080334e0 	.word	0x080334e0
 80292fc:	08034270 	.word	0x08034270
 8029300:	08032f40 	.word	0x08032f40
 8029304:	080334fc 	.word	0x080334fc

08029308 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8029308:	b580      	push	{r7, lr}
 802930a:	b082      	sub	sp, #8
 802930c:	af00      	add	r7, sp, #0
 802930e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029310:	687b      	ldr	r3, [r7, #4]
 8029312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029316:	2b00      	cmp	r3, #0
 8029318:	d104      	bne.n	8029324 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 802931a:	687b      	ldr	r3, [r7, #4]
 802931c:	68db      	ldr	r3, [r3, #12]
 802931e:	4618      	mov	r0, r3
 8029320:	f7f9 ffdb 	bl	80232da <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8029324:	687b      	ldr	r3, [r7, #4]
 8029326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802932a:	2b00      	cmp	r3, #0
 802932c:	d104      	bne.n	8029338 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 802932e:	687b      	ldr	r3, [r7, #4]
 8029330:	69db      	ldr	r3, [r3, #28]
 8029332:	4618      	mov	r0, r3
 8029334:	f7f9 ffd1 	bl	80232da <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8029338:	687b      	ldr	r3, [r7, #4]
 802933a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802933c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802933e:	2b00      	cmp	r3, #0
 8029340:	d104      	bne.n	802934c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8029342:	687b      	ldr	r3, [r7, #4]
 8029344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029346:	4618      	mov	r0, r3
 8029348:	f7f9 ffc7 	bl	80232da <lfs_free>
    }

    return 0;
 802934c:	2300      	movs	r3, #0
}
 802934e:	4618      	mov	r0, r3
 8029350:	3708      	adds	r7, #8
 8029352:	46bd      	mov	sp, r7
 8029354:	bd80      	pop	{r7, pc}
	...

08029358 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8029358:	b580      	push	{r7, lr}
 802935a:	b0a0      	sub	sp, #128	; 0x80
 802935c:	af00      	add	r7, sp, #0
 802935e:	6078      	str	r0, [r7, #4]
 8029360:	6039      	str	r1, [r7, #0]
    int err = 0;
 8029362:	2300      	movs	r3, #0
 8029364:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8029366:	6839      	ldr	r1, [r7, #0]
 8029368:	6878      	ldr	r0, [r7, #4]
 802936a:	f7ff fe13 	bl	8028f94 <lfs_init>
 802936e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029372:	2b00      	cmp	r3, #0
 8029374:	d001      	beq.n	802937a <lfs_rawformat+0x22>
            return err;
 8029376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029378:	e082      	b.n	8029480 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 802937a:	687b      	ldr	r3, [r7, #4]
 802937c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 802937e:	687b      	ldr	r3, [r7, #4]
 8029380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029384:	461a      	mov	r2, r3
 8029386:	2100      	movs	r1, #0
 8029388:	f003 fff6 	bl	802d378 <memset>
        lfs->free.off = 0;
 802938c:	687b      	ldr	r3, [r7, #4]
 802938e:	2200      	movs	r2, #0
 8029390:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029392:	687b      	ldr	r3, [r7, #4]
 8029394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029398:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 802939a:	687b      	ldr	r3, [r7, #4]
 802939c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802939e:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80293a0:	4619      	mov	r1, r3
 80293a2:	4610      	mov	r0, r2
 80293a4:	f7f9 feee 	bl	8023184 <lfs_min>
 80293a8:	4602      	mov	r2, r0
 80293aa:	687b      	ldr	r3, [r7, #4]
 80293ac:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80293ae:	687b      	ldr	r3, [r7, #4]
 80293b0:	2200      	movs	r2, #0
 80293b2:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 80293b4:	6878      	ldr	r0, [r7, #4]
 80293b6:	f7fa fe2b 	bl	8024010 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80293ba:	f107 030c 	add.w	r3, r7, #12
 80293be:	4619      	mov	r1, r3
 80293c0:	6878      	ldr	r0, [r7, #4]
 80293c2:	f7fc fc7d 	bl	8025cc0 <lfs_dir_alloc>
 80293c6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80293c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80293ca:	2b00      	cmp	r3, #0
 80293cc:	d14f      	bne.n	802946e <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 80293ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80293d2:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80293d4:	687b      	ldr	r3, [r7, #4]
 80293d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293d8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80293da:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80293dc:	687b      	ldr	r3, [r7, #4]
 80293de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293e0:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80293e2:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80293e4:	687b      	ldr	r3, [r7, #4]
 80293e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80293e8:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80293ea:	687b      	ldr	r3, [r7, #4]
 80293ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80293ee:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80293f4:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80293f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80293fa:	4618      	mov	r0, r3
 80293fc:	f7fa fd48 	bl	8023e90 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8029400:	4b21      	ldr	r3, [pc, #132]	; (8029488 <lfs_rawformat+0x130>)
 8029402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029404:	2300      	movs	r3, #0
 8029406:	653b      	str	r3, [r7, #80]	; 0x50
 8029408:	4b20      	ldr	r3, [pc, #128]	; (802948c <lfs_rawformat+0x134>)
 802940a:	657b      	str	r3, [r7, #84]	; 0x54
 802940c:	4b20      	ldr	r3, [pc, #128]	; (8029490 <lfs_rawformat+0x138>)
 802940e:	65bb      	str	r3, [r7, #88]	; 0x58
 8029410:	4b20      	ldr	r3, [pc, #128]	; (8029494 <lfs_rawformat+0x13c>)
 8029412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029414:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029418:	663b      	str	r3, [r7, #96]	; 0x60
 802941a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802941e:	f107 010c 	add.w	r1, r7, #12
 8029422:	2303      	movs	r3, #3
 8029424:	6878      	ldr	r0, [r7, #4]
 8029426:	f7fd fe67 	bl	80270f8 <lfs_dir_commit>
 802942a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 802942c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802942e:	2b00      	cmp	r3, #0
 8029430:	d11f      	bne.n	8029472 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8029432:	2300      	movs	r3, #0
 8029434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8029438:	f107 010c 	add.w	r1, r7, #12
 802943c:	2300      	movs	r3, #0
 802943e:	2200      	movs	r2, #0
 8029440:	6878      	ldr	r0, [r7, #4]
 8029442:	f7fd fe59 	bl	80270f8 <lfs_dir_commit>
 8029446:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802944a:	2b00      	cmp	r3, #0
 802944c:	d113      	bne.n	8029476 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 802944e:	2300      	movs	r3, #0
 8029450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029452:	2301      	movs	r3, #1
 8029454:	633b      	str	r3, [r7, #48]	; 0x30
 8029456:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802945a:	f107 030c 	add.w	r3, r7, #12
 802945e:	4619      	mov	r1, r3
 8029460:	6878      	ldr	r0, [r7, #4]
 8029462:	f7fc f82f 	bl	80254c4 <lfs_dir_fetch>
 8029466:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802946a:	2b00      	cmp	r3, #0
 802946c:	e004      	b.n	8029478 <lfs_rawformat+0x120>
            goto cleanup;
 802946e:	bf00      	nop
 8029470:	e002      	b.n	8029478 <lfs_rawformat+0x120>
            goto cleanup;
 8029472:	bf00      	nop
 8029474:	e000      	b.n	8029478 <lfs_rawformat+0x120>
            goto cleanup;
 8029476:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8029478:	6878      	ldr	r0, [r7, #4]
 802947a:	f7ff ff45 	bl	8029308 <lfs_deinit>
    return err;
 802947e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8029480:	4618      	mov	r0, r3
 8029482:	3780      	adds	r7, #128	; 0x80
 8029484:	46bd      	mov	sp, r7
 8029486:	bd80      	pop	{r7, pc}
 8029488:	40100000 	.word	0x40100000
 802948c:	0ff00008 	.word	0x0ff00008
 8029490:	0803352c 	.word	0x0803352c
 8029494:	20100018 	.word	0x20100018

08029498 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8029498:	b580      	push	{r7, lr}
 802949a:	b09c      	sub	sp, #112	; 0x70
 802949c:	af04      	add	r7, sp, #16
 802949e:	6078      	str	r0, [r7, #4]
 80294a0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80294a2:	6839      	ldr	r1, [r7, #0]
 80294a4:	6878      	ldr	r0, [r7, #4]
 80294a6:	f7ff fd75 	bl	8028f94 <lfs_init>
 80294aa:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 80294ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80294ae:	2b00      	cmp	r3, #0
 80294b0:	d001      	beq.n	80294b6 <lfs_rawmount+0x1e>
        return err;
 80294b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80294b4:	e192      	b.n	80297dc <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80294b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80294ba:	2220      	movs	r2, #32
 80294bc:	2100      	movs	r1, #0
 80294be:	4618      	mov	r0, r3
 80294c0:	f003 ff5a 	bl	802d378 <memset>
 80294c4:	2301      	movs	r3, #1
 80294c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 80294c8:	2300      	movs	r3, #0
 80294ca:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 80294cc:	e10b      	b.n	80296e6 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 80294ce:	687b      	ldr	r3, [r7, #4]
 80294d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294d2:	6a1b      	ldr	r3, [r3, #32]
 80294d4:	085b      	lsrs	r3, r3, #1
 80294d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80294d8:	429a      	cmp	r2, r3
 80294da:	d303      	bcc.n	80294e4 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 80294dc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80294e0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80294e2:	e177      	b.n	80297d4 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 80294e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80294e6:	3301      	adds	r3, #1
 80294e8:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80294ea:	687b      	ldr	r3, [r7, #4]
 80294ec:	627b      	str	r3, [r7, #36]	; 0x24
 80294ee:	4b8a      	ldr	r3, [pc, #552]	; (8029718 <lfs_rawmount+0x280>)
 80294f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80294f2:	2308      	movs	r3, #8
 80294f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80294f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80294fa:	f103 0218 	add.w	r2, r3, #24
 80294fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029506:	9303      	str	r3, [sp, #12]
 8029508:	4b84      	ldr	r3, [pc, #528]	; (802971c <lfs_rawmount+0x284>)
 802950a:	9302      	str	r3, [sp, #8]
 802950c:	2300      	movs	r3, #0
 802950e:	9301      	str	r3, [sp, #4]
 8029510:	4b83      	ldr	r3, [pc, #524]	; (8029720 <lfs_rawmount+0x288>)
 8029512:	9300      	str	r3, [sp, #0]
 8029514:	4b83      	ldr	r3, [pc, #524]	; (8029724 <lfs_rawmount+0x28c>)
 8029516:	6878      	ldr	r0, [r7, #4]
 8029518:	f7fb fc66 	bl	8024de8 <lfs_dir_fetchmatch>
 802951c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 802951e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029520:	2b00      	cmp	r3, #0
 8029522:	da02      	bge.n	802952a <lfs_rawmount+0x92>
            err = tag;
 8029524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029526:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029528:	e154      	b.n	80297d4 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 802952a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802952c:	2b00      	cmp	r3, #0
 802952e:	f000 80cd 	beq.w	80296cc <lfs_rawmount+0x234>
 8029532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029534:	4618      	mov	r0, r3
 8029536:	f7fa faee 	bl	8023b16 <lfs_tag_isdelete>
 802953a:	4603      	mov	r3, r0
 802953c:	f083 0301 	eor.w	r3, r3, #1
 8029540:	b2db      	uxtb	r3, r3
 8029542:	2b00      	cmp	r3, #0
 8029544:	f000 80c2 	beq.w	80296cc <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802954a:	687b      	ldr	r3, [r7, #4]
 802954c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 802954e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029550:	687b      	ldr	r3, [r7, #4]
 8029552:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8029554:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029558:	f107 030c 	add.w	r3, r7, #12
 802955c:	9300      	str	r3, [sp, #0]
 802955e:	4b72      	ldr	r3, [pc, #456]	; (8029728 <lfs_rawmount+0x290>)
 8029560:	4a70      	ldr	r2, [pc, #448]	; (8029724 <lfs_rawmount+0x28c>)
 8029562:	6878      	ldr	r0, [r7, #4]
 8029564:	f7fa ff0e 	bl	8024384 <lfs_dir_get>
 8029568:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 802956a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802956c:	2b00      	cmp	r3, #0
 802956e:	da02      	bge.n	8029576 <lfs_rawmount+0xde>
                err = tag;
 8029570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029572:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029574:	e12e      	b.n	80297d4 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8029576:	f107 030c 	add.w	r3, r7, #12
 802957a:	4618      	mov	r0, r3
 802957c:	f7fa fc50 	bl	8023e20 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8029580:	68fb      	ldr	r3, [r7, #12]
 8029582:	0c1b      	lsrs	r3, r3, #16
 8029584:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8029588:	68fb      	ldr	r3, [r7, #12]
 802958a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 802958e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8029592:	2b02      	cmp	r3, #2
 8029594:	d103      	bne.n	802959e <lfs_rawmount+0x106>
 8029596:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 802959a:	2b00      	cmp	r3, #0
 802959c:	d011      	beq.n	80295c2 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 802959e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80295a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80295a6:	4961      	ldr	r1, [pc, #388]	; (802972c <lfs_rawmount+0x294>)
 80295a8:	9101      	str	r1, [sp, #4]
 80295aa:	9300      	str	r3, [sp, #0]
 80295ac:	4613      	mov	r3, r2
 80295ae:	f241 0233 	movw	r2, #4147	; 0x1033
 80295b2:	495f      	ldr	r1, [pc, #380]	; (8029730 <lfs_rawmount+0x298>)
 80295b4:	485f      	ldr	r0, [pc, #380]	; (8029734 <lfs_rawmount+0x29c>)
 80295b6:	f003 fd49 	bl	802d04c <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 80295ba:	f06f 0315 	mvn.w	r3, #21
 80295be:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80295c0:	e083      	b.n	80296ca <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80295c2:	69bb      	ldr	r3, [r7, #24]
 80295c4:	2b00      	cmp	r3, #0
 80295c6:	d018      	beq.n	80295fa <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 80295c8:	69ba      	ldr	r2, [r7, #24]
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80295ce:	429a      	cmp	r2, r3
 80295d0:	d910      	bls.n	80295f4 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80295d2:	69ba      	ldr	r2, [r7, #24]
 80295d4:	687b      	ldr	r3, [r7, #4]
 80295d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80295d8:	4954      	ldr	r1, [pc, #336]	; (802972c <lfs_rawmount+0x294>)
 80295da:	9101      	str	r1, [sp, #4]
 80295dc:	9300      	str	r3, [sp, #0]
 80295de:	4613      	mov	r3, r2
 80295e0:	f241 023c 	movw	r2, #4156	; 0x103c
 80295e4:	4952      	ldr	r1, [pc, #328]	; (8029730 <lfs_rawmount+0x298>)
 80295e6:	4854      	ldr	r0, [pc, #336]	; (8029738 <lfs_rawmount+0x2a0>)
 80295e8:	f003 fd30 	bl	802d04c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80295ec:	f06f 0315 	mvn.w	r3, #21
 80295f0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80295f2:	e06a      	b.n	80296ca <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 80295f4:	69ba      	ldr	r2, [r7, #24]
 80295f6:	687b      	ldr	r3, [r7, #4]
 80295f8:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 80295fa:	69fb      	ldr	r3, [r7, #28]
 80295fc:	2b00      	cmp	r3, #0
 80295fe:	d018      	beq.n	8029632 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8029600:	69fa      	ldr	r2, [r7, #28]
 8029602:	687b      	ldr	r3, [r7, #4]
 8029604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029606:	429a      	cmp	r2, r3
 8029608:	d910      	bls.n	802962c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 802960a:	69fa      	ldr	r2, [r7, #28]
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029610:	4946      	ldr	r1, [pc, #280]	; (802972c <lfs_rawmount+0x294>)
 8029612:	9101      	str	r1, [sp, #4]
 8029614:	9300      	str	r3, [sp, #0]
 8029616:	4613      	mov	r3, r2
 8029618:	f241 0247 	movw	r2, #4167	; 0x1047
 802961c:	4944      	ldr	r1, [pc, #272]	; (8029730 <lfs_rawmount+0x298>)
 802961e:	4847      	ldr	r0, [pc, #284]	; (802973c <lfs_rawmount+0x2a4>)
 8029620:	f003 fd14 	bl	802d04c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029624:	f06f 0315 	mvn.w	r3, #21
 8029628:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 802962a:	e04e      	b.n	80296ca <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 802962c:	69fa      	ldr	r2, [r7, #28]
 802962e:	687b      	ldr	r3, [r7, #4]
 8029630:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8029632:	6a3b      	ldr	r3, [r7, #32]
 8029634:	2b00      	cmp	r3, #0
 8029636:	d018      	beq.n	802966a <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029638:	6a3a      	ldr	r2, [r7, #32]
 802963a:	687b      	ldr	r3, [r7, #4]
 802963c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802963e:	429a      	cmp	r2, r3
 8029640:	d910      	bls.n	8029664 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029642:	6a3a      	ldr	r2, [r7, #32]
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029648:	4938      	ldr	r1, [pc, #224]	; (802972c <lfs_rawmount+0x294>)
 802964a:	9101      	str	r1, [sp, #4]
 802964c:	9300      	str	r3, [sp, #0]
 802964e:	4613      	mov	r3, r2
 8029650:	f241 0252 	movw	r2, #4178	; 0x1052
 8029654:	4936      	ldr	r1, [pc, #216]	; (8029730 <lfs_rawmount+0x298>)
 8029656:	483a      	ldr	r0, [pc, #232]	; (8029740 <lfs_rawmount+0x2a8>)
 8029658:	f003 fcf8 	bl	802d04c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 802965c:	f06f 0315 	mvn.w	r3, #21
 8029660:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029662:	e032      	b.n	80296ca <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8029664:	6a3a      	ldr	r2, [r7, #32]
 8029666:	687b      	ldr	r3, [r7, #4]
 8029668:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 802966a:	697a      	ldr	r2, [r7, #20]
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029670:	6a1b      	ldr	r3, [r3, #32]
 8029672:	429a      	cmp	r2, r3
 8029674:	d011      	beq.n	802969a <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8029676:	697a      	ldr	r2, [r7, #20]
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802967c:	6a1b      	ldr	r3, [r3, #32]
 802967e:	492b      	ldr	r1, [pc, #172]	; (802972c <lfs_rawmount+0x294>)
 8029680:	9101      	str	r1, [sp, #4]
 8029682:	9300      	str	r3, [sp, #0]
 8029684:	4613      	mov	r3, r2
 8029686:	f241 025c 	movw	r2, #4188	; 0x105c
 802968a:	4929      	ldr	r1, [pc, #164]	; (8029730 <lfs_rawmount+0x298>)
 802968c:	482d      	ldr	r0, [pc, #180]	; (8029744 <lfs_rawmount+0x2ac>)
 802968e:	f003 fcdd 	bl	802d04c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8029692:	f06f 0315 	mvn.w	r3, #21
 8029696:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029698:	e017      	b.n	80296ca <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 802969a:	693a      	ldr	r2, [r7, #16]
 802969c:	687b      	ldr	r3, [r7, #4]
 802969e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296a0:	69db      	ldr	r3, [r3, #28]
 80296a2:	429a      	cmp	r2, r3
 80296a4:	d012      	beq.n	80296cc <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80296a6:	693a      	ldr	r2, [r7, #16]
 80296a8:	687b      	ldr	r3, [r7, #4]
 80296aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296ac:	69db      	ldr	r3, [r3, #28]
 80296ae:	491f      	ldr	r1, [pc, #124]	; (802972c <lfs_rawmount+0x294>)
 80296b0:	9101      	str	r1, [sp, #4]
 80296b2:	9300      	str	r3, [sp, #0]
 80296b4:	4613      	mov	r3, r2
 80296b6:	f241 0263 	movw	r2, #4195	; 0x1063
 80296ba:	491d      	ldr	r1, [pc, #116]	; (8029730 <lfs_rawmount+0x298>)
 80296bc:	4822      	ldr	r0, [pc, #136]	; (8029748 <lfs_rawmount+0x2b0>)
 80296be:	f003 fcc5 	bl	802d04c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80296c2:	f06f 0315 	mvn.w	r3, #21
 80296c6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80296c8:	bf00      	nop
            goto cleanup;
 80296ca:	e083      	b.n	80297d4 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80296d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80296d6:	4619      	mov	r1, r3
 80296d8:	6878      	ldr	r0, [r7, #4]
 80296da:	f7fb ff0f 	bl	80254fc <lfs_dir_getgstate>
 80296de:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80296e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80296e2:	2b00      	cmp	r3, #0
 80296e4:	d175      	bne.n	80297d2 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 80296e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80296ea:	3318      	adds	r3, #24
 80296ec:	4618      	mov	r0, r3
 80296ee:	f7fa f95e 	bl	80239ae <lfs_pair_isnull>
 80296f2:	4603      	mov	r3, r0
 80296f4:	f083 0301 	eor.w	r3, r3, #1
 80296f8:	b2db      	uxtb	r3, r3
 80296fa:	2b00      	cmp	r3, #0
 80296fc:	f47f aee7 	bne.w	80294ce <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029700:	687b      	ldr	r3, [r7, #4]
 8029702:	3320      	adds	r3, #32
 8029704:	4618      	mov	r0, r3
 8029706:	f7fa f952 	bl	80239ae <lfs_pair_isnull>
 802970a:	4603      	mov	r3, r0
 802970c:	2b00      	cmp	r3, #0
 802970e:	d01d      	beq.n	802974c <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029710:	f06f 0315 	mvn.w	r3, #21
 8029714:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8029716:	e05d      	b.n	80297d4 <lfs_rawmount+0x33c>
 8029718:	0803352c 	.word	0x0803352c
 802971c:	08025655 	.word	0x08025655
 8029720:	0ff00008 	.word	0x0ff00008
 8029724:	7ffffc00 	.word	0x7ffffc00
 8029728:	20100018 	.word	0x20100018
 802972c:	08033054 	.word	0x08033054
 8029730:	08032f40 	.word	0x08032f40
 8029734:	08033538 	.word	0x08033538
 8029738:	08033564 	.word	0x08033564
 802973c:	08033598 	.word	0x08033598
 8029740:	080335cc 	.word	0x080335cc
 8029744:	08033600 	.word	0x08033600
 8029748:	08033634 	.word	0x08033634
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 802974c:	687b      	ldr	r3, [r7, #4]
 802974e:	3330      	adds	r3, #48	; 0x30
 8029750:	4618      	mov	r0, r3
 8029752:	f7fa fa83 	bl	8023c5c <lfs_gstate_iszero>
 8029756:	4603      	mov	r3, r0
 8029758:	f083 0301 	eor.w	r3, r3, #1
 802975c:	b2db      	uxtb	r3, r3
 802975e:	2b00      	cmp	r3, #0
 8029760:	d010      	beq.n	8029784 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029762:	687b      	ldr	r3, [r7, #4]
 8029764:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029766:	687b      	ldr	r3, [r7, #4]
 8029768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802976a:	687a      	ldr	r2, [r7, #4]
 802976c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802976e:	481d      	ldr	r0, [pc, #116]	; (80297e4 <lfs_rawmount+0x34c>)
 8029770:	9002      	str	r0, [sp, #8]
 8029772:	9201      	str	r2, [sp, #4]
 8029774:	9300      	str	r3, [sp, #0]
 8029776:	460b      	mov	r3, r1
 8029778:	f241 0279 	movw	r2, #4217	; 0x1079
 802977c:	491a      	ldr	r1, [pc, #104]	; (80297e8 <lfs_rawmount+0x350>)
 802977e:	481b      	ldr	r0, [pc, #108]	; (80297ec <lfs_rawmount+0x354>)
 8029780:	f003 fc64 	bl	802d04c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029784:	687b      	ldr	r3, [r7, #4]
 8029786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029788:	4618      	mov	r0, r3
 802978a:	f7fa f9b6 	bl	8023afa <lfs_tag_isvalid>
 802978e:	4603      	mov	r3, r0
 8029790:	f083 0301 	eor.w	r3, r3, #1
 8029794:	b2db      	uxtb	r3, r3
 8029796:	461a      	mov	r2, r3
 8029798:	687b      	ldr	r3, [r7, #4]
 802979a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802979c:	441a      	add	r2, r3
 802979e:	687b      	ldr	r3, [r7, #4]
 80297a0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 80297a2:	687b      	ldr	r3, [r7, #4]
 80297a4:	687a      	ldr	r2, [r7, #4]
 80297a6:	333c      	adds	r3, #60	; 0x3c
 80297a8:	3230      	adds	r2, #48	; 0x30
 80297aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80297ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 80297b0:	687b      	ldr	r3, [r7, #4]
 80297b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80297b4:	687a      	ldr	r2, [r7, #4]
 80297b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80297b8:	6a12      	ldr	r2, [r2, #32]
 80297ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80297be:	fb01 f202 	mul.w	r2, r1, r2
 80297c2:	1a9a      	subs	r2, r3, r2
 80297c4:	687b      	ldr	r3, [r7, #4]
 80297c6:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 80297c8:	6878      	ldr	r0, [r7, #4]
 80297ca:	f7fa fc30 	bl	802402e <lfs_alloc_drop>

    return 0;
 80297ce:	2300      	movs	r3, #0
 80297d0:	e004      	b.n	80297dc <lfs_rawmount+0x344>
            goto cleanup;
 80297d2:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80297d4:	6878      	ldr	r0, [r7, #4]
 80297d6:	f000 f80b 	bl	80297f0 <lfs_rawunmount>
    return err;
 80297da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80297dc:	4618      	mov	r0, r3
 80297de:	3760      	adds	r7, #96	; 0x60
 80297e0:	46bd      	mov	sp, r7
 80297e2:	bd80      	pop	{r7, pc}
 80297e4:	08033054 	.word	0x08033054
 80297e8:	08032f40 	.word	0x08032f40
 80297ec:	08033664 	.word	0x08033664

080297f0 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80297f0:	b580      	push	{r7, lr}
 80297f2:	b082      	sub	sp, #8
 80297f4:	af00      	add	r7, sp, #0
 80297f6:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80297f8:	6878      	ldr	r0, [r7, #4]
 80297fa:	f7ff fd85 	bl	8029308 <lfs_deinit>
 80297fe:	4603      	mov	r3, r0
}
 8029800:	4618      	mov	r0, r3
 8029802:	3708      	adds	r7, #8
 8029804:	46bd      	mov	sp, r7
 8029806:	bd80      	pop	{r7, pc}

08029808 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8029808:	b590      	push	{r4, r7, lr}
 802980a:	b09d      	sub	sp, #116	; 0x74
 802980c:	af04      	add	r7, sp, #16
 802980e:	60f8      	str	r0, [r7, #12]
 8029810:	60b9      	str	r1, [r7, #8]
 8029812:	607a      	str	r2, [r7, #4]
 8029814:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029816:	f107 0318 	add.w	r3, r7, #24
 802981a:	2220      	movs	r2, #32
 802981c:	2100      	movs	r1, #0
 802981e:	4618      	mov	r0, r3
 8029820:	f003 fdaa 	bl	802d378 <memset>
 8029824:	2301      	movs	r3, #1
 8029826:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8029828:	2300      	movs	r3, #0
 802982a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 802982c:	e0a7      	b.n	802997e <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 802982e:	68fb      	ldr	r3, [r7, #12]
 8029830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029832:	6a1b      	ldr	r3, [r3, #32]
 8029834:	085b      	lsrs	r3, r3, #1
 8029836:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029838:	429a      	cmp	r2, r3
 802983a:	d302      	bcc.n	8029842 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 802983c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029840:	e102      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8029842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029844:	3301      	adds	r3, #1
 8029846:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8029848:	2300      	movs	r3, #0
 802984a:	65bb      	str	r3, [r7, #88]	; 0x58
 802984c:	e013      	b.n	8029876 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 802984e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029850:	3306      	adds	r3, #6
 8029852:	009b      	lsls	r3, r3, #2
 8029854:	3360      	adds	r3, #96	; 0x60
 8029856:	443b      	add	r3, r7
 8029858:	f853 2c48 	ldr.w	r2, [r3, #-72]
 802985c:	68bb      	ldr	r3, [r7, #8]
 802985e:	4611      	mov	r1, r2
 8029860:	6878      	ldr	r0, [r7, #4]
 8029862:	4798      	blx	r3
 8029864:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8029866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029868:	2b00      	cmp	r3, #0
 802986a:	d001      	beq.n	8029870 <lfs_fs_rawtraverse+0x68>
                return err;
 802986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802986e:	e0eb      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8029870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029872:	3301      	adds	r3, #1
 8029874:	65bb      	str	r3, [r7, #88]	; 0x58
 8029876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029878:	2b01      	cmp	r3, #1
 802987a:	dde8      	ble.n	802984e <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 802987c:	f107 0318 	add.w	r3, r7, #24
 8029880:	f103 0218 	add.w	r2, r3, #24
 8029884:	f107 0318 	add.w	r3, r7, #24
 8029888:	4619      	mov	r1, r3
 802988a:	68f8      	ldr	r0, [r7, #12]
 802988c:	f7fb fe1a 	bl	80254c4 <lfs_dir_fetch>
 8029890:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8029892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029894:	2b00      	cmp	r3, #0
 8029896:	d001      	beq.n	802989c <lfs_fs_rawtraverse+0x94>
            return err;
 8029898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802989a:	e0d5      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 802989c:	2300      	movs	r3, #0
 802989e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80298a2:	e067      	b.n	8029974 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80298a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80298a8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80298aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80298ae:	f043 0308 	orr.w	r3, r3, #8
 80298b2:	f107 0118 	add.w	r1, r7, #24
 80298b6:	f107 0210 	add.w	r2, r7, #16
 80298ba:	9200      	str	r2, [sp, #0]
 80298bc:	4a64      	ldr	r2, [pc, #400]	; (8029a50 <lfs_fs_rawtraverse+0x248>)
 80298be:	68f8      	ldr	r0, [r7, #12]
 80298c0:	f7fa fd60 	bl	8024384 <lfs_dir_get>
 80298c4:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 80298c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80298c8:	2b00      	cmp	r3, #0
 80298ca:	da05      	bge.n	80298d8 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 80298cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80298ce:	f113 0f02 	cmn.w	r3, #2
 80298d2:	d049      	beq.n	8029968 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 80298d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80298d6:	e0b7      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 80298d8:	f107 0310 	add.w	r3, r7, #16
 80298dc:	4618      	mov	r0, r3
 80298de:	f7fa fa6f 	bl	8023dc0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80298e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80298e4:	4618      	mov	r0, r3
 80298e6:	f7fa f939 	bl	8023b5c <lfs_tag_type3>
 80298ea:	4603      	mov	r3, r0
 80298ec:	461a      	mov	r2, r3
 80298ee:	f240 2302 	movw	r3, #514	; 0x202
 80298f2:	429a      	cmp	r2, r3
 80298f4:	d113      	bne.n	802991e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80298f6:	68f9      	ldr	r1, [r7, #12]
 80298f8:	6938      	ldr	r0, [r7, #16]
 80298fa:	697b      	ldr	r3, [r7, #20]
 80298fc:	687a      	ldr	r2, [r7, #4]
 80298fe:	9202      	str	r2, [sp, #8]
 8029900:	68ba      	ldr	r2, [r7, #8]
 8029902:	9201      	str	r2, [sp, #4]
 8029904:	9300      	str	r3, [sp, #0]
 8029906:	4603      	mov	r3, r0
 8029908:	460a      	mov	r2, r1
 802990a:	2100      	movs	r1, #0
 802990c:	68f8      	ldr	r0, [r7, #12]
 802990e:	f7fe f811 	bl	8027934 <lfs_ctz_traverse>
 8029912:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8029914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029916:	2b00      	cmp	r3, #0
 8029918:	d027      	beq.n	802996a <lfs_fs_rawtraverse+0x162>
                    return err;
 802991a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802991c:	e094      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 802991e:	78fb      	ldrb	r3, [r7, #3]
 8029920:	2b00      	cmp	r3, #0
 8029922:	d022      	beq.n	802996a <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8029924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029926:	4618      	mov	r0, r3
 8029928:	f7fa f918 	bl	8023b5c <lfs_tag_type3>
 802992c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 802992e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029932:	d11a      	bne.n	802996a <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8029934:	2300      	movs	r3, #0
 8029936:	653b      	str	r3, [r7, #80]	; 0x50
 8029938:	e012      	b.n	8029960 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 802993a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802993c:	009b      	lsls	r3, r3, #2
 802993e:	f107 0210 	add.w	r2, r7, #16
 8029942:	4413      	add	r3, r2
 8029944:	681a      	ldr	r2, [r3, #0]
 8029946:	68bb      	ldr	r3, [r7, #8]
 8029948:	4611      	mov	r1, r2
 802994a:	6878      	ldr	r0, [r7, #4]
 802994c:	4798      	blx	r3
 802994e:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8029950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029952:	2b00      	cmp	r3, #0
 8029954:	d001      	beq.n	802995a <lfs_fs_rawtraverse+0x152>
                        return err;
 8029956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029958:	e076      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 802995a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802995c:	3301      	adds	r3, #1
 802995e:	653b      	str	r3, [r7, #80]	; 0x50
 8029960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029962:	2b01      	cmp	r3, #1
 8029964:	dde9      	ble.n	802993a <lfs_fs_rawtraverse+0x132>
 8029966:	e000      	b.n	802996a <lfs_fs_rawtraverse+0x162>
                    continue;
 8029968:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 802996a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 802996e:	3301      	adds	r3, #1
 8029970:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029974:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8029976:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 802997a:	429a      	cmp	r2, r3
 802997c:	d392      	bcc.n	80298a4 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 802997e:	f107 0318 	add.w	r3, r7, #24
 8029982:	3318      	adds	r3, #24
 8029984:	4618      	mov	r0, r3
 8029986:	f7fa f812 	bl	80239ae <lfs_pair_isnull>
 802998a:	4603      	mov	r3, r0
 802998c:	f083 0301 	eor.w	r3, r3, #1
 8029990:	b2db      	uxtb	r3, r3
 8029992:	2b00      	cmp	r3, #0
 8029994:	f47f af4b 	bne.w	802982e <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029998:	68fb      	ldr	r3, [r7, #12]
 802999a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802999c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802999e:	e04f      	b.n	8029a40 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 80299a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299a2:	799b      	ldrb	r3, [r3, #6]
 80299a4:	2b01      	cmp	r3, #1
 80299a6:	d147      	bne.n	8029a38 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80299a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80299ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80299b0:	2b00      	cmp	r3, #0
 80299b2:	d01d      	beq.n	80299f0 <lfs_fs_rawtraverse+0x1e8>
 80299b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80299b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80299bc:	2b00      	cmp	r3, #0
 80299be:	d117      	bne.n	80299f0 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80299c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299c2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80299c6:	68f8      	ldr	r0, [r7, #12]
 80299c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80299cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80299d0:	687a      	ldr	r2, [r7, #4]
 80299d2:	9202      	str	r2, [sp, #8]
 80299d4:	68ba      	ldr	r2, [r7, #8]
 80299d6:	9201      	str	r2, [sp, #4]
 80299d8:	9300      	str	r3, [sp, #0]
 80299da:	4623      	mov	r3, r4
 80299dc:	4602      	mov	r2, r0
 80299de:	68f8      	ldr	r0, [r7, #12]
 80299e0:	f7fd ffa8 	bl	8027934 <lfs_ctz_traverse>
 80299e4:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80299e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80299e8:	2b00      	cmp	r3, #0
 80299ea:	d001      	beq.n	80299f0 <lfs_fs_rawtraverse+0x1e8>
                return err;
 80299ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80299ee:	e02b      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80299f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80299f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80299f8:	2b00      	cmp	r3, #0
 80299fa:	d01e      	beq.n	8029a3a <lfs_fs_rawtraverse+0x232>
 80299fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029a04:	2b00      	cmp	r3, #0
 8029a06:	d118      	bne.n	8029a3a <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029a0a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029a0e:	68f8      	ldr	r0, [r7, #12]
 8029a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029a12:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8029a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029a18:	687a      	ldr	r2, [r7, #4]
 8029a1a:	9202      	str	r2, [sp, #8]
 8029a1c:	68ba      	ldr	r2, [r7, #8]
 8029a1e:	9201      	str	r2, [sp, #4]
 8029a20:	9300      	str	r3, [sp, #0]
 8029a22:	4623      	mov	r3, r4
 8029a24:	4602      	mov	r2, r0
 8029a26:	68f8      	ldr	r0, [r7, #12]
 8029a28:	f7fd ff84 	bl	8027934 <lfs_ctz_traverse>
 8029a2c:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8029a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029a30:	2b00      	cmp	r3, #0
 8029a32:	d002      	beq.n	8029a3a <lfs_fs_rawtraverse+0x232>
                return err;
 8029a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029a36:	e007      	b.n	8029a48 <lfs_fs_rawtraverse+0x240>
            continue;
 8029a38:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029a3c:	681b      	ldr	r3, [r3, #0]
 8029a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	d1ac      	bne.n	80299a0 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8029a46:	2300      	movs	r3, #0
}
 8029a48:	4618      	mov	r0, r3
 8029a4a:	3764      	adds	r7, #100	; 0x64
 8029a4c:	46bd      	mov	sp, r7
 8029a4e:	bd90      	pop	{r4, r7, pc}
 8029a50:	700ffc00 	.word	0x700ffc00

08029a54 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8029a54:	b580      	push	{r7, lr}
 8029a56:	b086      	sub	sp, #24
 8029a58:	af00      	add	r7, sp, #0
 8029a5a:	60f8      	str	r0, [r7, #12]
 8029a5c:	60b9      	str	r1, [r7, #8]
 8029a5e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8029a60:	687b      	ldr	r3, [r7, #4]
 8029a62:	2200      	movs	r2, #0
 8029a64:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8029a66:	687b      	ldr	r3, [r7, #4]
 8029a68:	2201      	movs	r2, #1
 8029a6a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029a6c:	2300      	movs	r3, #0
 8029a6e:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8029a70:	e024      	b.n	8029abc <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8029a72:	68fb      	ldr	r3, [r7, #12]
 8029a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a76:	6a1b      	ldr	r3, [r3, #32]
 8029a78:	085b      	lsrs	r3, r3, #1
 8029a7a:	697a      	ldr	r2, [r7, #20]
 8029a7c:	429a      	cmp	r2, r3
 8029a7e:	d302      	bcc.n	8029a86 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029a80:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029a84:	e027      	b.n	8029ad6 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8029a86:	697b      	ldr	r3, [r7, #20]
 8029a88:	3301      	adds	r3, #1
 8029a8a:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	3318      	adds	r3, #24
 8029a90:	68b9      	ldr	r1, [r7, #8]
 8029a92:	4618      	mov	r0, r3
 8029a94:	f7f9 ffa6 	bl	80239e4 <lfs_pair_cmp>
 8029a98:	4603      	mov	r3, r0
 8029a9a:	2b00      	cmp	r3, #0
 8029a9c:	d101      	bne.n	8029aa2 <lfs_fs_pred+0x4e>
            return 0;
 8029a9e:	2300      	movs	r3, #0
 8029aa0:	e019      	b.n	8029ad6 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8029aa2:	687b      	ldr	r3, [r7, #4]
 8029aa4:	3318      	adds	r3, #24
 8029aa6:	461a      	mov	r2, r3
 8029aa8:	6879      	ldr	r1, [r7, #4]
 8029aaa:	68f8      	ldr	r0, [r7, #12]
 8029aac:	f7fb fd0a 	bl	80254c4 <lfs_dir_fetch>
 8029ab0:	6138      	str	r0, [r7, #16]
        if (err) {
 8029ab2:	693b      	ldr	r3, [r7, #16]
 8029ab4:	2b00      	cmp	r3, #0
 8029ab6:	d001      	beq.n	8029abc <lfs_fs_pred+0x68>
            return err;
 8029ab8:	693b      	ldr	r3, [r7, #16]
 8029aba:	e00c      	b.n	8029ad6 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8029abc:	687b      	ldr	r3, [r7, #4]
 8029abe:	3318      	adds	r3, #24
 8029ac0:	4618      	mov	r0, r3
 8029ac2:	f7f9 ff74 	bl	80239ae <lfs_pair_isnull>
 8029ac6:	4603      	mov	r3, r0
 8029ac8:	f083 0301 	eor.w	r3, r3, #1
 8029acc:	b2db      	uxtb	r3, r3
 8029ace:	2b00      	cmp	r3, #0
 8029ad0:	d1cf      	bne.n	8029a72 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029ad2:	f06f 0301 	mvn.w	r3, #1
}
 8029ad6:	4618      	mov	r0, r3
 8029ad8:	3718      	adds	r7, #24
 8029ada:	46bd      	mov	sp, r7
 8029adc:	bd80      	pop	{r7, pc}

08029ade <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8029ade:	b5b0      	push	{r4, r5, r7, lr}
 8029ae0:	b08e      	sub	sp, #56	; 0x38
 8029ae2:	af04      	add	r7, sp, #16
 8029ae4:	60f8      	str	r0, [r7, #12]
 8029ae6:	60b9      	str	r1, [r7, #8]
 8029ae8:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8029aea:	68fb      	ldr	r3, [r7, #12]
 8029aec:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8029aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029af0:	681b      	ldr	r3, [r3, #0]
 8029af2:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8029af4:	687b      	ldr	r3, [r7, #4]
 8029af6:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029af8:	6a3b      	ldr	r3, [r7, #32]
 8029afa:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8029afe:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029b00:	6a3b      	ldr	r3, [r7, #32]
 8029b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029b04:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8029b06:	69fb      	ldr	r3, [r7, #28]
 8029b08:	681b      	ldr	r3, [r3, #0]
 8029b0a:	69fa      	ldr	r2, [r7, #28]
 8029b0c:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8029b0e:	2108      	movs	r1, #8
 8029b10:	9103      	str	r1, [sp, #12]
 8029b12:	f107 0110 	add.w	r1, r7, #16
 8029b16:	9102      	str	r1, [sp, #8]
 8029b18:	9201      	str	r2, [sp, #4]
 8029b1a:	9300      	str	r3, [sp, #0]
 8029b1c:	462b      	mov	r3, r5
 8029b1e:	4622      	mov	r2, r4
 8029b20:	4601      	mov	r1, r0
 8029b22:	6a38      	ldr	r0, [r7, #32]
 8029b24:	f7f9 fc0a 	bl	802333c <lfs_bd_read>
 8029b28:	61b8      	str	r0, [r7, #24]
    if (err) {
 8029b2a:	69bb      	ldr	r3, [r7, #24]
 8029b2c:	2b00      	cmp	r3, #0
 8029b2e:	d001      	beq.n	8029b34 <lfs_fs_parent_match+0x56>
        return err;
 8029b30:	69bb      	ldr	r3, [r7, #24]
 8029b32:	e012      	b.n	8029b5a <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8029b34:	f107 0310 	add.w	r3, r7, #16
 8029b38:	4618      	mov	r0, r3
 8029b3a:	f7f9 ffaa 	bl	8023a92 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8029b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b40:	1d1a      	adds	r2, r3, #4
 8029b42:	f107 0310 	add.w	r3, r7, #16
 8029b46:	4611      	mov	r1, r2
 8029b48:	4618      	mov	r0, r3
 8029b4a:	f7f9 ff4b 	bl	80239e4 <lfs_pair_cmp>
 8029b4e:	4603      	mov	r3, r0
 8029b50:	2b00      	cmp	r3, #0
 8029b52:	bf14      	ite	ne
 8029b54:	2301      	movne	r3, #1
 8029b56:	2300      	moveq	r3, #0
 8029b58:	b2db      	uxtb	r3, r3
}
 8029b5a:	4618      	mov	r0, r3
 8029b5c:	3728      	adds	r7, #40	; 0x28
 8029b5e:	46bd      	mov	sp, r7
 8029b60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08029b64 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8029b64:	b580      	push	{r7, lr}
 8029b66:	b08e      	sub	sp, #56	; 0x38
 8029b68:	af04      	add	r7, sp, #16
 8029b6a:	60f8      	str	r0, [r7, #12]
 8029b6c:	60b9      	str	r1, [r7, #8]
 8029b6e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	2200      	movs	r2, #0
 8029b74:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8029b76:	687b      	ldr	r3, [r7, #4]
 8029b78:	2201      	movs	r2, #1
 8029b7a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029b7c:	2300      	movs	r3, #0
 8029b7e:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8029b80:	e030      	b.n	8029be4 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 8029b82:	68fb      	ldr	r3, [r7, #12]
 8029b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029b86:	6a1b      	ldr	r3, [r3, #32]
 8029b88:	085b      	lsrs	r3, r3, #1
 8029b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029b8c:	429a      	cmp	r2, r3
 8029b8e:	d302      	bcc.n	8029b96 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029b90:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029b94:	e033      	b.n	8029bfe <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8029b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b98:	3301      	adds	r3, #1
 8029b9a:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029b9c:	687b      	ldr	r3, [r7, #4]
 8029b9e:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029ba2:	68fb      	ldr	r3, [r7, #12]
 8029ba4:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8029ba6:	68bb      	ldr	r3, [r7, #8]
 8029ba8:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029baa:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8029bac:	68bb      	ldr	r3, [r7, #8]
 8029bae:	3304      	adds	r3, #4
 8029bb0:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029bb2:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029bb4:	f107 0314 	add.w	r3, r7, #20
 8029bb8:	9303      	str	r3, [sp, #12]
 8029bba:	4b13      	ldr	r3, [pc, #76]	; (8029c08 <lfs_fs_parent+0xa4>)
 8029bbc:	9302      	str	r3, [sp, #8]
 8029bbe:	2300      	movs	r3, #0
 8029bc0:	9301      	str	r3, [sp, #4]
 8029bc2:	4b12      	ldr	r3, [pc, #72]	; (8029c0c <lfs_fs_parent+0xa8>)
 8029bc4:	9300      	str	r3, [sp, #0]
 8029bc6:	4b12      	ldr	r3, [pc, #72]	; (8029c10 <lfs_fs_parent+0xac>)
 8029bc8:	6879      	ldr	r1, [r7, #4]
 8029bca:	68f8      	ldr	r0, [r7, #12]
 8029bcc:	f7fb f90c 	bl	8024de8 <lfs_dir_fetchmatch>
 8029bd0:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8029bd2:	6a3b      	ldr	r3, [r7, #32]
 8029bd4:	2b00      	cmp	r3, #0
 8029bd6:	d005      	beq.n	8029be4 <lfs_fs_parent+0x80>
 8029bd8:	6a3b      	ldr	r3, [r7, #32]
 8029bda:	f113 0f02 	cmn.w	r3, #2
 8029bde:	d001      	beq.n	8029be4 <lfs_fs_parent+0x80>
            return tag;
 8029be0:	6a3b      	ldr	r3, [r7, #32]
 8029be2:	e00c      	b.n	8029bfe <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8029be4:	687b      	ldr	r3, [r7, #4]
 8029be6:	3318      	adds	r3, #24
 8029be8:	4618      	mov	r0, r3
 8029bea:	f7f9 fee0 	bl	80239ae <lfs_pair_isnull>
 8029bee:	4603      	mov	r3, r0
 8029bf0:	f083 0301 	eor.w	r3, r3, #1
 8029bf4:	b2db      	uxtb	r3, r3
 8029bf6:	2b00      	cmp	r3, #0
 8029bf8:	d1c3      	bne.n	8029b82 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029bfa:	f06f 0301 	mvn.w	r3, #1
}
 8029bfe:	4618      	mov	r0, r3
 8029c00:	3728      	adds	r7, #40	; 0x28
 8029c02:	46bd      	mov	sp, r7
 8029c04:	bd80      	pop	{r7, pc}
 8029c06:	bf00      	nop
 8029c08:	08029adf 	.word	0x08029adf
 8029c0c:	20000008 	.word	0x20000008
 8029c10:	7ff003ff 	.word	0x7ff003ff

08029c14 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8029c14:	b590      	push	{r4, r7, lr}
 8029c16:	b083      	sub	sp, #12
 8029c18:	af00      	add	r7, sp, #0
 8029c1a:	6078      	str	r0, [r7, #4]
 8029c1c:	460b      	mov	r3, r1
 8029c1e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8029c20:	687b      	ldr	r3, [r7, #4]
 8029c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029c24:	4618      	mov	r0, r3
 8029c26:	f7f9 ffd3 	bl	8023bd0 <lfs_tag_size>
 8029c2a:	4603      	mov	r3, r0
 8029c2c:	2b00      	cmp	r3, #0
 8029c2e:	d10a      	bne.n	8029c46 <lfs_fs_preporphans+0x32>
 8029c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029c34:	2b00      	cmp	r3, #0
 8029c36:	da06      	bge.n	8029c46 <lfs_fs_preporphans+0x32>
 8029c38:	4b10      	ldr	r3, [pc, #64]	; (8029c7c <lfs_fs_preporphans+0x68>)
 8029c3a:	4a11      	ldr	r2, [pc, #68]	; (8029c80 <lfs_fs_preporphans+0x6c>)
 8029c3c:	f241 114c 	movw	r1, #4428	; 0x114c
 8029c40:	4810      	ldr	r0, [pc, #64]	; (8029c84 <lfs_fs_preporphans+0x70>)
 8029c42:	f002 f9c9 	bl	802bfd8 <__assert_func>
    lfs->gstate.tag += orphans;
 8029c46:	687b      	ldr	r3, [r7, #4]
 8029c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029c4e:	441a      	add	r2, r3
 8029c50:	687b      	ldr	r3, [r7, #4]
 8029c52:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8029c54:	687b      	ldr	r3, [r7, #4]
 8029c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029c58:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8029c5c:	687b      	ldr	r3, [r7, #4]
 8029c5e:	3330      	adds	r3, #48	; 0x30
 8029c60:	4618      	mov	r0, r3
 8029c62:	f7fa f818 	bl	8023c96 <lfs_gstate_hasorphans>
 8029c66:	4603      	mov	r3, r0
 8029c68:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8029c6a:	ea44 0203 	orr.w	r2, r4, r3
 8029c6e:	687b      	ldr	r3, [r7, #4]
 8029c70:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8029c72:	2300      	movs	r3, #0
}
 8029c74:	4618      	mov	r0, r3
 8029c76:	370c      	adds	r7, #12
 8029c78:	46bd      	mov	sp, r7
 8029c7a:	bd90      	pop	{r4, r7, pc}
 8029c7c:	0803369c 	.word	0x0803369c
 8029c80:	0803427c 	.word	0x0803427c
 8029c84:	08032f40 	.word	0x08032f40

08029c88 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8029c88:	b480      	push	{r7}
 8029c8a:	b085      	sub	sp, #20
 8029c8c:	af00      	add	r7, sp, #0
 8029c8e:	60f8      	str	r0, [r7, #12]
 8029c90:	460b      	mov	r3, r1
 8029c92:	607a      	str	r2, [r7, #4]
 8029c94:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8029c96:	68fb      	ldr	r3, [r7, #12]
 8029c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029c9a:	4a17      	ldr	r2, [pc, #92]	; (8029cf8 <lfs_fs_prepmove+0x70>)
 8029c9c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8029c9e:	897b      	ldrh	r3, [r7, #10]
 8029ca0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8029ca4:	428b      	cmp	r3, r1
 8029ca6:	d006      	beq.n	8029cb6 <lfs_fs_prepmove+0x2e>
 8029ca8:	897b      	ldrh	r3, [r7, #10]
 8029caa:	029b      	lsls	r3, r3, #10
 8029cac:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029cb0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8029cb4:	e000      	b.n	8029cb8 <lfs_fs_prepmove+0x30>
 8029cb6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8029cb8:	431a      	orrs	r2, r3
 8029cba:	68fb      	ldr	r3, [r7, #12]
 8029cbc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8029cbe:	897b      	ldrh	r3, [r7, #10]
 8029cc0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8029cc4:	4293      	cmp	r3, r2
 8029cc6:	d002      	beq.n	8029cce <lfs_fs_prepmove+0x46>
 8029cc8:	687b      	ldr	r3, [r7, #4]
 8029cca:	681b      	ldr	r3, [r3, #0]
 8029ccc:	e000      	b.n	8029cd0 <lfs_fs_prepmove+0x48>
 8029cce:	2300      	movs	r3, #0
 8029cd0:	68fa      	ldr	r2, [r7, #12]
 8029cd2:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8029cd4:	897b      	ldrh	r3, [r7, #10]
 8029cd6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8029cda:	4293      	cmp	r3, r2
 8029cdc:	d003      	beq.n	8029ce6 <lfs_fs_prepmove+0x5e>
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	3304      	adds	r3, #4
 8029ce2:	681b      	ldr	r3, [r3, #0]
 8029ce4:	e000      	b.n	8029ce8 <lfs_fs_prepmove+0x60>
 8029ce6:	2300      	movs	r3, #0
 8029ce8:	68fa      	ldr	r2, [r7, #12]
 8029cea:	6393      	str	r3, [r2, #56]	; 0x38
}
 8029cec:	bf00      	nop
 8029cee:	3714      	adds	r7, #20
 8029cf0:	46bd      	mov	sp, r7
 8029cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cf6:	4770      	bx	lr
 8029cf8:	800003ff 	.word	0x800003ff

08029cfc <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8029cfc:	b5b0      	push	{r4, r5, r7, lr}
 8029cfe:	b094      	sub	sp, #80	; 0x50
 8029d00:	af04      	add	r7, sp, #16
 8029d02:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8029d04:	687b      	ldr	r3, [r7, #4]
 8029d06:	333c      	adds	r3, #60	; 0x3c
 8029d08:	4618      	mov	r0, r3
 8029d0a:	f7f9 ffe6 	bl	8023cda <lfs_gstate_hasmove>
 8029d0e:	4603      	mov	r3, r0
 8029d10:	f083 0301 	eor.w	r3, r3, #1
 8029d14:	b2db      	uxtb	r3, r3
 8029d16:	2b00      	cmp	r3, #0
 8029d18:	d001      	beq.n	8029d1e <lfs_fs_demove+0x22>
        return 0;
 8029d1a:	2300      	movs	r3, #0
 8029d1c:	e049      	b.n	8029db2 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8029d22:	687b      	ldr	r3, [r7, #4]
 8029d24:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8029d26:	687b      	ldr	r3, [r7, #4]
 8029d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029d2a:	4618      	mov	r0, r3
 8029d2c:	f7f9 ff40 	bl	8023bb0 <lfs_tag_id>
 8029d30:	4603      	mov	r3, r0
 8029d32:	461a      	mov	r2, r3
 8029d34:	4b21      	ldr	r3, [pc, #132]	; (8029dbc <lfs_fs_demove+0xc0>)
 8029d36:	9302      	str	r3, [sp, #8]
 8029d38:	9201      	str	r2, [sp, #4]
 8029d3a:	9400      	str	r4, [sp, #0]
 8029d3c:	462b      	mov	r3, r5
 8029d3e:	f241 1266 	movw	r2, #4454	; 0x1166
 8029d42:	491f      	ldr	r1, [pc, #124]	; (8029dc0 <lfs_fs_demove+0xc4>)
 8029d44:	481f      	ldr	r0, [pc, #124]	; (8029dc4 <lfs_fs_demove+0xc8>)
 8029d46:	f003 f981 	bl	802d04c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8029d50:	f107 0318 	add.w	r3, r7, #24
 8029d54:	4619      	mov	r1, r3
 8029d56:	6878      	ldr	r0, [r7, #4]
 8029d58:	f7fb fbb4 	bl	80254c4 <lfs_dir_fetch>
 8029d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8029d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029d60:	2b00      	cmp	r3, #0
 8029d62:	d001      	beq.n	8029d68 <lfs_fs_demove+0x6c>
        return err;
 8029d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029d66:	e024      	b.n	8029db2 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8029d68:	687b      	ldr	r3, [r7, #4]
 8029d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029d6c:	4618      	mov	r0, r3
 8029d6e:	f7f9 ff1f 	bl	8023bb0 <lfs_tag_id>
 8029d72:	4603      	mov	r3, r0
 8029d74:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8029d76:	2200      	movs	r2, #0
 8029d78:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8029d7c:	6878      	ldr	r0, [r7, #4]
 8029d7e:	f7ff ff83 	bl	8029c88 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8029d82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8029d84:	029b      	lsls	r3, r3, #10
 8029d86:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029d8a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8029d8e:	613b      	str	r3, [r7, #16]
 8029d90:	2300      	movs	r3, #0
 8029d92:	617b      	str	r3, [r7, #20]
 8029d94:	f107 0210 	add.w	r2, r7, #16
 8029d98:	f107 0118 	add.w	r1, r7, #24
 8029d9c:	2301      	movs	r3, #1
 8029d9e:	6878      	ldr	r0, [r7, #4]
 8029da0:	f7fd f9aa 	bl	80270f8 <lfs_dir_commit>
 8029da4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8029da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029da8:	2b00      	cmp	r3, #0
 8029daa:	d001      	beq.n	8029db0 <lfs_fs_demove+0xb4>
        return err;
 8029dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029dae:	e000      	b.n	8029db2 <lfs_fs_demove+0xb6>
    }

    return 0;
 8029db0:	2300      	movs	r3, #0
}
 8029db2:	4618      	mov	r0, r3
 8029db4:	3740      	adds	r7, #64	; 0x40
 8029db6:	46bd      	mov	sp, r7
 8029db8:	bdb0      	pop	{r4, r5, r7, pc}
 8029dba:	bf00      	nop
 8029dbc:	08033054 	.word	0x08033054
 8029dc0:	08032f40 	.word	0x08032f40
 8029dc4:	080336d0 	.word	0x080336d0

08029dc8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8029dc8:	b5b0      	push	{r4, r5, r7, lr}
 8029dca:	b0b2      	sub	sp, #200	; 0xc8
 8029dcc:	af04      	add	r7, sp, #16
 8029dce:	6078      	str	r0, [r7, #4]
 8029dd0:	460b      	mov	r3, r1
 8029dd2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8029dd4:	687b      	ldr	r3, [r7, #4]
 8029dd6:	3330      	adds	r3, #48	; 0x30
 8029dd8:	4618      	mov	r0, r3
 8029dda:	f7f9 ff5c 	bl	8023c96 <lfs_gstate_hasorphans>
 8029dde:	4603      	mov	r3, r0
 8029de0:	f083 0301 	eor.w	r3, r3, #1
 8029de4:	b2db      	uxtb	r3, r3
 8029de6:	2b00      	cmp	r3, #0
 8029de8:	d001      	beq.n	8029dee <lfs_fs_deorphan+0x26>
        return 0;
 8029dea:	2300      	movs	r3, #0
 8029dec:	e17c      	b.n	802a0e8 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8029dee:	2300      	movs	r3, #0
 8029df0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8029df4:	f107 030c 	add.w	r3, r7, #12
 8029df8:	2220      	movs	r2, #32
 8029dfa:	2100      	movs	r1, #0
 8029dfc:	4618      	mov	r0, r3
 8029dfe:	f003 fabb 	bl	802d378 <memset>
 8029e02:	2301      	movs	r3, #1
 8029e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8029e08:	2301      	movs	r3, #1
 8029e0a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8029e0c:	e148      	b.n	802a0a0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8029e0e:	f107 030c 	add.w	r3, r7, #12
 8029e12:	f103 0218 	add.w	r2, r3, #24
 8029e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8029e1a:	4619      	mov	r1, r3
 8029e1c:	6878      	ldr	r0, [r7, #4]
 8029e1e:	f7fb fb51 	bl	80254c4 <lfs_dir_fetch>
 8029e22:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 8029e26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8029e2a:	2b00      	cmp	r3, #0
 8029e2c:	d002      	beq.n	8029e34 <lfs_fs_deorphan+0x6c>
                return err;
 8029e2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8029e32:	e159      	b.n	802a0e8 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8029e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8029e38:	f083 0301 	eor.w	r3, r3, #1
 8029e3c:	b2db      	uxtb	r3, r3
 8029e3e:	2b00      	cmp	r3, #0
 8029e40:	f000 8124 	beq.w	802a08c <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8029e44:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8029e48:	f107 030c 	add.w	r3, r7, #12
 8029e4c:	3318      	adds	r3, #24
 8029e4e:	4619      	mov	r1, r3
 8029e50:	6878      	ldr	r0, [r7, #4]
 8029e52:	f7ff fe87 	bl	8029b64 <lfs_fs_parent>
 8029e56:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8029e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029e5e:	2b00      	cmp	r3, #0
 8029e60:	da07      	bge.n	8029e72 <lfs_fs_deorphan+0xaa>
 8029e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029e66:	f113 0f02 	cmn.w	r3, #2
 8029e6a:	d002      	beq.n	8029e72 <lfs_fs_deorphan+0xaa>
                    return tag;
 8029e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029e70:	e13a      	b.n	802a0e8 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8029e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029e76:	f113 0f02 	cmn.w	r3, #2
 8029e7a:	d157      	bne.n	8029f2c <lfs_fs_deorphan+0x164>
 8029e7c:	78fb      	ldrb	r3, [r7, #3]
 8029e7e:	2b00      	cmp	r3, #0
 8029e80:	d054      	beq.n	8029f2c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8029e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029e86:	499a      	ldr	r1, [pc, #616]	; (802a0f0 <lfs_fs_deorphan+0x328>)
 8029e88:	9101      	str	r1, [sp, #4]
 8029e8a:	9300      	str	r3, [sp, #0]
 8029e8c:	4613      	mov	r3, r2
 8029e8e:	f241 12a1 	movw	r2, #4513	; 0x11a1
 8029e92:	4998      	ldr	r1, [pc, #608]	; (802a0f4 <lfs_fs_deorphan+0x32c>)
 8029e94:	4898      	ldr	r0, [pc, #608]	; (802a0f8 <lfs_fs_deorphan+0x330>)
 8029e96:	f003 f8d9 	bl	802d04c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8029e9a:	687b      	ldr	r3, [r7, #4]
 8029e9c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8029ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8029ea4:	4619      	mov	r1, r3
 8029ea6:	6878      	ldr	r0, [r7, #4]
 8029ea8:	f7fb fb28 	bl	80254fc <lfs_dir_getgstate>
 8029eac:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8029eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8029eb4:	2b00      	cmp	r3, #0
 8029eb6:	d002      	beq.n	8029ebe <lfs_fs_deorphan+0xf6>
                        return err;
 8029eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8029ebc:	e114      	b.n	802a0e8 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8029ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8029ec2:	3318      	adds	r3, #24
 8029ec4:	4618      	mov	r0, r3
 8029ec6:	f7f9 fdfe 	bl	8023ac6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8029eca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8029ece:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8029ed2:	051a      	lsls	r2, r3, #20
 8029ed4:	4b89      	ldr	r3, [pc, #548]	; (802a0fc <lfs_fs_deorphan+0x334>)
 8029ed6:	4313      	orrs	r3, r2
 8029ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8029edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8029ee0:	3318      	adds	r3, #24
 8029ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8029ee6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8029eea:	f107 010c 	add.w	r1, r7, #12
 8029eee:	2301      	movs	r3, #1
 8029ef0:	6878      	ldr	r0, [r7, #4]
 8029ef2:	f7fc fe07 	bl	8026b04 <lfs_dir_orphaningcommit>
 8029ef6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8029efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8029efe:	3318      	adds	r3, #24
 8029f00:	4618      	mov	r0, r3
 8029f02:	f7f9 fdc6 	bl	8023a92 <lfs_pair_fromle32>
                    if (state < 0) {
 8029f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8029f0a:	2b00      	cmp	r3, #0
 8029f0c:	da02      	bge.n	8029f14 <lfs_fs_deorphan+0x14c>
                        return state;
 8029f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8029f12:	e0e9      	b.n	802a0e8 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8029f14:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8029f18:	3301      	adds	r3, #1
 8029f1a:	b2db      	uxtb	r3, r3
 8029f1c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8029f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8029f24:	2b03      	cmp	r3, #3
 8029f26:	f040 80af 	bne.w	802a088 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 8029f2a:	e763      	b.n	8029df4 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8029f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029f30:	f113 0f02 	cmn.w	r3, #2
 8029f34:	f000 80aa 	beq.w	802a08c <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8029f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029f3c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8029f40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8029f44:	9300      	str	r3, [sp, #0]
 8029f46:	4613      	mov	r3, r2
 8029f48:	4a6d      	ldr	r2, [pc, #436]	; (802a100 <lfs_fs_deorphan+0x338>)
 8029f4a:	6878      	ldr	r0, [r7, #4]
 8029f4c:	f7fa fa1a 	bl	8024384 <lfs_dir_get>
 8029f50:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8029f54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8029f58:	2b00      	cmp	r3, #0
 8029f5a:	da02      	bge.n	8029f62 <lfs_fs_deorphan+0x19a>
                        return state;
 8029f5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8029f60:	e0c2      	b.n	802a0e8 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 8029f62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8029f66:	4618      	mov	r0, r3
 8029f68:	f7f9 fd93 	bl	8023a92 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8029f6c:	f107 030c 	add.w	r3, r7, #12
 8029f70:	f103 0218 	add.w	r2, r3, #24
 8029f74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8029f78:	4611      	mov	r1, r2
 8029f7a:	4618      	mov	r0, r3
 8029f7c:	f7f9 fd5c 	bl	8023a38 <lfs_pair_sync>
 8029f80:	4603      	mov	r3, r0
 8029f82:	f083 0301 	eor.w	r3, r3, #1
 8029f86:	b2db      	uxtb	r3, r3
 8029f88:	2b00      	cmp	r3, #0
 8029f8a:	d07f      	beq.n	802a08c <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8029f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8029f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029f90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8029f94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029f98:	4c55      	ldr	r4, [pc, #340]	; (802a0f0 <lfs_fs_deorphan+0x328>)
 8029f9a:	9403      	str	r4, [sp, #12]
 8029f9c:	9102      	str	r1, [sp, #8]
 8029f9e:	9201      	str	r2, [sp, #4]
 8029fa0:	9300      	str	r3, [sp, #0]
 8029fa2:	4603      	mov	r3, r0
 8029fa4:	f241 12ca 	movw	r2, #4554	; 0x11ca
 8029fa8:	4952      	ldr	r1, [pc, #328]	; (802a0f4 <lfs_fs_deorphan+0x32c>)
 8029faa:	4856      	ldr	r0, [pc, #344]	; (802a104 <lfs_fs_deorphan+0x33c>)
 8029fac:	f003 f84e 	bl	802d04c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8029fb0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8029fb4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8029fb8:	687b      	ldr	r3, [r7, #4]
 8029fba:	3330      	adds	r3, #48	; 0x30
 8029fbc:	f107 020c 	add.w	r2, r7, #12
 8029fc0:	4611      	mov	r1, r2
 8029fc2:	4618      	mov	r0, r3
 8029fc4:	f7f9 fe9c 	bl	8023d00 <lfs_gstate_hasmovehere>
 8029fc8:	4603      	mov	r3, r0
 8029fca:	2b00      	cmp	r3, #0
 8029fcc:	d01c      	beq.n	802a008 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8029fce:	687b      	ldr	r3, [r7, #4]
 8029fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029fd2:	4618      	mov	r0, r3
 8029fd4:	f7f9 fdec 	bl	8023bb0 <lfs_tag_id>
 8029fd8:	4603      	mov	r3, r0
 8029fda:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8029fde:	68f9      	ldr	r1, [r7, #12]
 8029fe0:	693b      	ldr	r3, [r7, #16]
 8029fe2:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8029fe6:	4842      	ldr	r0, [pc, #264]	; (802a0f0 <lfs_fs_deorphan+0x328>)
 8029fe8:	9002      	str	r0, [sp, #8]
 8029fea:	9201      	str	r2, [sp, #4]
 8029fec:	9300      	str	r3, [sp, #0]
 8029fee:	460b      	mov	r3, r1
 8029ff0:	f241 12d5 	movw	r2, #4565	; 0x11d5
 8029ff4:	493f      	ldr	r1, [pc, #252]	; (802a0f4 <lfs_fs_deorphan+0x32c>)
 8029ff6:	4844      	ldr	r0, [pc, #272]	; (802a108 <lfs_fs_deorphan+0x340>)
 8029ff8:	f003 f828 	bl	802d04c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8029ffc:	2200      	movs	r2, #0
 8029ffe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a002:	6878      	ldr	r0, [r7, #4]
 802a004:	f7ff fe40 	bl	8029c88 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a008:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a00c:	4618      	mov	r0, r3
 802a00e:	f7f9 fd5a 	bl	8023ac6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a012:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a016:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a01a:	4293      	cmp	r3, r2
 802a01c:	d007      	beq.n	802a02e <lfs_fs_deorphan+0x266>
 802a01e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a022:	029b      	lsls	r3, r3, #10
 802a024:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a028:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a02c:	e000      	b.n	802a030 <lfs_fs_deorphan+0x268>
 802a02e:	2300      	movs	r3, #0
 802a030:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a032:	2300      	movs	r3, #0
 802a034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a038:	4b34      	ldr	r3, [pc, #208]	; (802a10c <lfs_fs_deorphan+0x344>)
 802a03a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a03e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a046:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a04a:	f107 010c 	add.w	r1, r7, #12
 802a04e:	2302      	movs	r3, #2
 802a050:	6878      	ldr	r0, [r7, #4]
 802a052:	f7fc fd57 	bl	8026b04 <lfs_dir_orphaningcommit>
 802a056:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a05a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a05e:	4618      	mov	r0, r3
 802a060:	f7f9 fd17 	bl	8023a92 <lfs_pair_fromle32>
                        if (state < 0) {
 802a064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a068:	2b00      	cmp	r3, #0
 802a06a:	da02      	bge.n	802a072 <lfs_fs_deorphan+0x2aa>
                            return state;
 802a06c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 802a070:	e03a      	b.n	802a0e8 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a072:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a076:	3301      	adds	r3, #1
 802a078:	b2db      	uxtb	r3, r3
 802a07a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a07e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a082:	2b03      	cmp	r3, #3
 802a084:	d10c      	bne.n	802a0a0 <lfs_fs_deorphan+0x2d8>
 802a086:	e6b5      	b.n	8029df4 <lfs_fs_deorphan+0x2c>
                    continue;
 802a088:	bf00      	nop
 802a08a:	e009      	b.n	802a0a0 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a08c:	f107 040c 	add.w	r4, r7, #12
 802a090:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 802a094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a098:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a09c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 802a0a0:	f107 030c 	add.w	r3, r7, #12
 802a0a4:	3318      	adds	r3, #24
 802a0a6:	4618      	mov	r0, r3
 802a0a8:	f7f9 fc81 	bl	80239ae <lfs_pair_isnull>
 802a0ac:	4603      	mov	r3, r0
 802a0ae:	f083 0301 	eor.w	r3, r3, #1
 802a0b2:	b2db      	uxtb	r3, r3
 802a0b4:	2b00      	cmp	r3, #0
 802a0b6:	f47f aeaa 	bne.w	8029e0e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a0ba:	687b      	ldr	r3, [r7, #4]
 802a0bc:	3330      	adds	r3, #48	; 0x30
 802a0be:	4618      	mov	r0, r3
 802a0c0:	f7f9 fdfc 	bl	8023cbc <lfs_gstate_getorphans>
 802a0c4:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a0c6:	461a      	mov	r2, r3
 802a0c8:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 802a0cc:	4619      	mov	r1, r3
 802a0ce:	4610      	mov	r0, r2
 802a0d0:	f7f9 f858 	bl	8023184 <lfs_min>
 802a0d4:	4603      	mov	r3, r0
 802a0d6:	b2db      	uxtb	r3, r3
 802a0d8:	425b      	negs	r3, r3
 802a0da:	b2db      	uxtb	r3, r3
 802a0dc:	b25b      	sxtb	r3, r3
 802a0de:	4619      	mov	r1, r3
 802a0e0:	6878      	ldr	r0, [r7, #4]
 802a0e2:	f7ff fd97 	bl	8029c14 <lfs_fs_preporphans>
 802a0e6:	4603      	mov	r3, r0
            found));
}
 802a0e8:	4618      	mov	r0, r3
 802a0ea:	37b8      	adds	r7, #184	; 0xb8
 802a0ec:	46bd      	mov	sp, r7
 802a0ee:	bdb0      	pop	{r4, r5, r7, pc}
 802a0f0:	08033054 	.word	0x08033054
 802a0f4:	08032f40 	.word	0x08032f40
 802a0f8:	08033704 	.word	0x08033704
 802a0fc:	000ffc08 	.word	0x000ffc08
 802a100:	7ffffc00 	.word	0x7ffffc00
 802a104:	08033734 	.word	0x08033734
 802a108:	08033778 	.word	0x08033778
 802a10c:	600ffc08 	.word	0x600ffc08

0802a110 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a110:	b580      	push	{r7, lr}
 802a112:	b084      	sub	sp, #16
 802a114:	af00      	add	r7, sp, #0
 802a116:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a118:	6878      	ldr	r0, [r7, #4]
 802a11a:	f7ff fdef 	bl	8029cfc <lfs_fs_demove>
 802a11e:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a120:	68fb      	ldr	r3, [r7, #12]
 802a122:	2b00      	cmp	r3, #0
 802a124:	d001      	beq.n	802a12a <lfs_fs_forceconsistency+0x1a>
        return err;
 802a126:	68fb      	ldr	r3, [r7, #12]
 802a128:	e00a      	b.n	802a140 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a12a:	2101      	movs	r1, #1
 802a12c:	6878      	ldr	r0, [r7, #4]
 802a12e:	f7ff fe4b 	bl	8029dc8 <lfs_fs_deorphan>
 802a132:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a134:	68fb      	ldr	r3, [r7, #12]
 802a136:	2b00      	cmp	r3, #0
 802a138:	d001      	beq.n	802a13e <lfs_fs_forceconsistency+0x2e>
        return err;
 802a13a:	68fb      	ldr	r3, [r7, #12]
 802a13c:	e000      	b.n	802a140 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a13e:	2300      	movs	r3, #0
}
 802a140:	4618      	mov	r0, r3
 802a142:	3710      	adds	r7, #16
 802a144:	46bd      	mov	sp, r7
 802a146:	bd80      	pop	{r7, pc}

0802a148 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a148:	b480      	push	{r7}
 802a14a:	b085      	sub	sp, #20
 802a14c:	af00      	add	r7, sp, #0
 802a14e:	6078      	str	r0, [r7, #4]
 802a150:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a152:	687b      	ldr	r3, [r7, #4]
 802a154:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a156:	68fb      	ldr	r3, [r7, #12]
 802a158:	681b      	ldr	r3, [r3, #0]
 802a15a:	1c5a      	adds	r2, r3, #1
 802a15c:	68fb      	ldr	r3, [r7, #12]
 802a15e:	601a      	str	r2, [r3, #0]
    return 0;
 802a160:	2300      	movs	r3, #0
}
 802a162:	4618      	mov	r0, r3
 802a164:	3714      	adds	r7, #20
 802a166:	46bd      	mov	sp, r7
 802a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a16c:	4770      	bx	lr
	...

0802a170 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a170:	b580      	push	{r7, lr}
 802a172:	b084      	sub	sp, #16
 802a174:	af00      	add	r7, sp, #0
 802a176:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a178:	2300      	movs	r3, #0
 802a17a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a17c:	f107 0208 	add.w	r2, r7, #8
 802a180:	2300      	movs	r3, #0
 802a182:	4907      	ldr	r1, [pc, #28]	; (802a1a0 <lfs_fs_rawsize+0x30>)
 802a184:	6878      	ldr	r0, [r7, #4]
 802a186:	f7ff fb3f 	bl	8029808 <lfs_fs_rawtraverse>
 802a18a:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a18c:	68fb      	ldr	r3, [r7, #12]
 802a18e:	2b00      	cmp	r3, #0
 802a190:	d001      	beq.n	802a196 <lfs_fs_rawsize+0x26>
        return err;
 802a192:	68fb      	ldr	r3, [r7, #12]
 802a194:	e000      	b.n	802a198 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a196:	68bb      	ldr	r3, [r7, #8]
}
 802a198:	4618      	mov	r0, r3
 802a19a:	3710      	adds	r7, #16
 802a19c:	46bd      	mov	sp, r7
 802a19e:	bd80      	pop	{r7, pc}
 802a1a0:	0802a149 	.word	0x0802a149

0802a1a4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a1a4:	b580      	push	{r7, lr}
 802a1a6:	b084      	sub	sp, #16
 802a1a8:	af00      	add	r7, sp, #0
 802a1aa:	6078      	str	r0, [r7, #4]
 802a1ac:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a1ae:	2300      	movs	r3, #0
 802a1b0:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a1b2:	68fb      	ldr	r3, [r7, #12]
 802a1b4:	2b00      	cmp	r3, #0
 802a1b6:	d001      	beq.n	802a1bc <lfs_format+0x18>
        return err;
 802a1b8:	68fb      	ldr	r3, [r7, #12]
 802a1ba:	e005      	b.n	802a1c8 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a1bc:	6839      	ldr	r1, [r7, #0]
 802a1be:	6878      	ldr	r0, [r7, #4]
 802a1c0:	f7ff f8ca 	bl	8029358 <lfs_rawformat>
 802a1c4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a1c6:	68fb      	ldr	r3, [r7, #12]
}
 802a1c8:	4618      	mov	r0, r3
 802a1ca:	3710      	adds	r7, #16
 802a1cc:	46bd      	mov	sp, r7
 802a1ce:	bd80      	pop	{r7, pc}

0802a1d0 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a1d0:	b580      	push	{r7, lr}
 802a1d2:	b084      	sub	sp, #16
 802a1d4:	af00      	add	r7, sp, #0
 802a1d6:	6078      	str	r0, [r7, #4]
 802a1d8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a1da:	2300      	movs	r3, #0
 802a1dc:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a1de:	68fb      	ldr	r3, [r7, #12]
 802a1e0:	2b00      	cmp	r3, #0
 802a1e2:	d001      	beq.n	802a1e8 <lfs_mount+0x18>
        return err;
 802a1e4:	68fb      	ldr	r3, [r7, #12]
 802a1e6:	e005      	b.n	802a1f4 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802a1e8:	6839      	ldr	r1, [r7, #0]
 802a1ea:	6878      	ldr	r0, [r7, #4]
 802a1ec:	f7ff f954 	bl	8029498 <lfs_rawmount>
 802a1f0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a1f2:	68fb      	ldr	r3, [r7, #12]
}
 802a1f4:	4618      	mov	r0, r3
 802a1f6:	3710      	adds	r7, #16
 802a1f8:	46bd      	mov	sp, r7
 802a1fa:	bd80      	pop	{r7, pc}

0802a1fc <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802a1fc:	b580      	push	{r7, lr}
 802a1fe:	b084      	sub	sp, #16
 802a200:	af00      	add	r7, sp, #0
 802a202:	6078      	str	r0, [r7, #4]
 802a204:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a206:	2300      	movs	r3, #0
 802a208:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a20a:	68fb      	ldr	r3, [r7, #12]
 802a20c:	2b00      	cmp	r3, #0
 802a20e:	d001      	beq.n	802a214 <lfs_remove+0x18>
        return err;
 802a210:	68fb      	ldr	r3, [r7, #12]
 802a212:	e005      	b.n	802a220 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802a214:	6839      	ldr	r1, [r7, #0]
 802a216:	6878      	ldr	r0, [r7, #4]
 802a218:	f7fe fbd0 	bl	80289bc <lfs_rawremove>
 802a21c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a21e:	68fb      	ldr	r3, [r7, #12]
}
 802a220:	4618      	mov	r0, r3
 802a222:	3710      	adds	r7, #16
 802a224:	46bd      	mov	sp, r7
 802a226:	bd80      	pop	{r7, pc}

0802a228 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802a228:	b580      	push	{r7, lr}
 802a22a:	b086      	sub	sp, #24
 802a22c:	af00      	add	r7, sp, #0
 802a22e:	60f8      	str	r0, [r7, #12]
 802a230:	60b9      	str	r1, [r7, #8]
 802a232:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a234:	2300      	movs	r3, #0
 802a236:	617b      	str	r3, [r7, #20]
    if (err) {
 802a238:	697b      	ldr	r3, [r7, #20]
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d001      	beq.n	802a242 <lfs_rename+0x1a>
        return err;
 802a23e:	697b      	ldr	r3, [r7, #20]
 802a240:	e006      	b.n	802a250 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802a242:	687a      	ldr	r2, [r7, #4]
 802a244:	68b9      	ldr	r1, [r7, #8]
 802a246:	68f8      	ldr	r0, [r7, #12]
 802a248:	f7fe fc92 	bl	8028b70 <lfs_rawrename>
 802a24c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a24e:	697b      	ldr	r3, [r7, #20]
}
 802a250:	4618      	mov	r0, r3
 802a252:	3718      	adds	r7, #24
 802a254:	46bd      	mov	sp, r7
 802a256:	bd80      	pop	{r7, pc}

0802a258 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802a258:	b580      	push	{r7, lr}
 802a25a:	b086      	sub	sp, #24
 802a25c:	af00      	add	r7, sp, #0
 802a25e:	60f8      	str	r0, [r7, #12]
 802a260:	60b9      	str	r1, [r7, #8]
 802a262:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a264:	2300      	movs	r3, #0
 802a266:	617b      	str	r3, [r7, #20]
    if (err) {
 802a268:	697b      	ldr	r3, [r7, #20]
 802a26a:	2b00      	cmp	r3, #0
 802a26c:	d001      	beq.n	802a272 <lfs_stat+0x1a>
        return err;
 802a26e:	697b      	ldr	r3, [r7, #20]
 802a270:	e006      	b.n	802a280 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802a272:	687a      	ldr	r2, [r7, #4]
 802a274:	68b9      	ldr	r1, [r7, #8]
 802a276:	68f8      	ldr	r0, [r7, #12]
 802a278:	f7fe fb7a 	bl	8028970 <lfs_rawstat>
 802a27c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a27e:	697b      	ldr	r3, [r7, #20]
}
 802a280:	4618      	mov	r0, r3
 802a282:	3718      	adds	r7, #24
 802a284:	46bd      	mov	sp, r7
 802a286:	bd80      	pop	{r7, pc}

0802a288 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802a288:	b580      	push	{r7, lr}
 802a28a:	b088      	sub	sp, #32
 802a28c:	af02      	add	r7, sp, #8
 802a28e:	60f8      	str	r0, [r7, #12]
 802a290:	60b9      	str	r1, [r7, #8]
 802a292:	607a      	str	r2, [r7, #4]
 802a294:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a296:	2300      	movs	r3, #0
 802a298:	617b      	str	r3, [r7, #20]
    if (err) {
 802a29a:	697b      	ldr	r3, [r7, #20]
 802a29c:	2b00      	cmp	r3, #0
 802a29e:	d001      	beq.n	802a2a4 <lfs_file_opencfg+0x1c>
        return err;
 802a2a0:	697b      	ldr	r3, [r7, #20]
 802a2a2:	e01c      	b.n	802a2de <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a2a4:	68fb      	ldr	r3, [r7, #12]
 802a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a2a8:	68b9      	ldr	r1, [r7, #8]
 802a2aa:	4618      	mov	r0, r3
 802a2ac:	f7f9 fe28 	bl	8023f00 <lfs_mlist_isopen>
 802a2b0:	4603      	mov	r3, r0
 802a2b2:	f083 0301 	eor.w	r3, r3, #1
 802a2b6:	b2db      	uxtb	r3, r3
 802a2b8:	2b00      	cmp	r3, #0
 802a2ba:	d106      	bne.n	802a2ca <lfs_file_opencfg+0x42>
 802a2bc:	4b0a      	ldr	r3, [pc, #40]	; (802a2e8 <lfs_file_opencfg+0x60>)
 802a2be:	4a0b      	ldr	r2, [pc, #44]	; (802a2ec <lfs_file_opencfg+0x64>)
 802a2c0:	f241 517b 	movw	r1, #5499	; 0x157b
 802a2c4:	480a      	ldr	r0, [pc, #40]	; (802a2f0 <lfs_file_opencfg+0x68>)
 802a2c6:	f001 fe87 	bl	802bfd8 <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802a2ca:	6a3b      	ldr	r3, [r7, #32]
 802a2cc:	9300      	str	r3, [sp, #0]
 802a2ce:	683b      	ldr	r3, [r7, #0]
 802a2d0:	687a      	ldr	r2, [r7, #4]
 802a2d2:	68b9      	ldr	r1, [r7, #8]
 802a2d4:	68f8      	ldr	r0, [r7, #12]
 802a2d6:	f7fd fba9 	bl	8027a2c <lfs_file_rawopencfg>
 802a2da:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a2dc:	697b      	ldr	r3, [r7, #20]
}
 802a2de:	4618      	mov	r0, r3
 802a2e0:	3718      	adds	r7, #24
 802a2e2:	46bd      	mov	sp, r7
 802a2e4:	bd80      	pop	{r7, pc}
 802a2e6:	bf00      	nop
 802a2e8:	080337c0 	.word	0x080337c0
 802a2ec:	08034290 	.word	0x08034290
 802a2f0:	08032f40 	.word	0x08032f40

0802a2f4 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802a2f4:	b580      	push	{r7, lr}
 802a2f6:	b084      	sub	sp, #16
 802a2f8:	af00      	add	r7, sp, #0
 802a2fa:	6078      	str	r0, [r7, #4]
 802a2fc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a2fe:	2300      	movs	r3, #0
 802a300:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a302:	68fb      	ldr	r3, [r7, #12]
 802a304:	2b00      	cmp	r3, #0
 802a306:	d001      	beq.n	802a30c <lfs_file_close+0x18>
        return err;
 802a308:	68fb      	ldr	r3, [r7, #12]
 802a30a:	e015      	b.n	802a338 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a30c:	687b      	ldr	r3, [r7, #4]
 802a30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a310:	6839      	ldr	r1, [r7, #0]
 802a312:	4618      	mov	r0, r3
 802a314:	f7f9 fdf4 	bl	8023f00 <lfs_mlist_isopen>
 802a318:	4603      	mov	r3, r0
 802a31a:	2b00      	cmp	r3, #0
 802a31c:	d106      	bne.n	802a32c <lfs_file_close+0x38>
 802a31e:	4b08      	ldr	r3, [pc, #32]	; (802a340 <lfs_file_close+0x4c>)
 802a320:	4a08      	ldr	r2, [pc, #32]	; (802a344 <lfs_file_close+0x50>)
 802a322:	f241 518a 	movw	r1, #5514	; 0x158a
 802a326:	4808      	ldr	r0, [pc, #32]	; (802a348 <lfs_file_close+0x54>)
 802a328:	f001 fe56 	bl	802bfd8 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802a32c:	6839      	ldr	r1, [r7, #0]
 802a32e:	6878      	ldr	r0, [r7, #4]
 802a330:	f7fd fd4c 	bl	8027dcc <lfs_file_rawclose>
 802a334:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a336:	68fb      	ldr	r3, [r7, #12]
}
 802a338:	4618      	mov	r0, r3
 802a33a:	3710      	adds	r7, #16
 802a33c:	46bd      	mov	sp, r7
 802a33e:	bd80      	pop	{r7, pc}
 802a340:	080337f8 	.word	0x080337f8
 802a344:	080342a4 	.word	0x080342a4
 802a348:	08032f40 	.word	0x08032f40

0802a34c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802a34c:	b580      	push	{r7, lr}
 802a34e:	b086      	sub	sp, #24
 802a350:	af00      	add	r7, sp, #0
 802a352:	60f8      	str	r0, [r7, #12]
 802a354:	60b9      	str	r1, [r7, #8]
 802a356:	607a      	str	r2, [r7, #4]
 802a358:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a35a:	2300      	movs	r3, #0
 802a35c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a35e:	697b      	ldr	r3, [r7, #20]
 802a360:	2b00      	cmp	r3, #0
 802a362:	d001      	beq.n	802a368 <lfs_file_read+0x1c>
        return err;
 802a364:	697b      	ldr	r3, [r7, #20]
 802a366:	e017      	b.n	802a398 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a368:	68fb      	ldr	r3, [r7, #12]
 802a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a36c:	68b9      	ldr	r1, [r7, #8]
 802a36e:	4618      	mov	r0, r3
 802a370:	f7f9 fdc6 	bl	8023f00 <lfs_mlist_isopen>
 802a374:	4603      	mov	r3, r0
 802a376:	2b00      	cmp	r3, #0
 802a378:	d106      	bne.n	802a388 <lfs_file_read+0x3c>
 802a37a:	4b09      	ldr	r3, [pc, #36]	; (802a3a0 <lfs_file_read+0x54>)
 802a37c:	4a09      	ldr	r2, [pc, #36]	; (802a3a4 <lfs_file_read+0x58>)
 802a37e:	f241 51ac 	movw	r1, #5548	; 0x15ac
 802a382:	4809      	ldr	r0, [pc, #36]	; (802a3a8 <lfs_file_read+0x5c>)
 802a384:	f001 fe28 	bl	802bfd8 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802a388:	683b      	ldr	r3, [r7, #0]
 802a38a:	687a      	ldr	r2, [r7, #4]
 802a38c:	68b9      	ldr	r1, [r7, #8]
 802a38e:	68f8      	ldr	r0, [r7, #12]
 802a390:	f7fe f868 	bl	8028464 <lfs_file_rawread>
 802a394:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a396:	693b      	ldr	r3, [r7, #16]
}
 802a398:	4618      	mov	r0, r3
 802a39a:	3718      	adds	r7, #24
 802a39c:	46bd      	mov	sp, r7
 802a39e:	bd80      	pop	{r7, pc}
 802a3a0:	080337f8 	.word	0x080337f8
 802a3a4:	080342b4 	.word	0x080342b4
 802a3a8:	08032f40 	.word	0x08032f40

0802a3ac <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802a3ac:	b580      	push	{r7, lr}
 802a3ae:	b086      	sub	sp, #24
 802a3b0:	af00      	add	r7, sp, #0
 802a3b2:	60f8      	str	r0, [r7, #12]
 802a3b4:	60b9      	str	r1, [r7, #8]
 802a3b6:	607a      	str	r2, [r7, #4]
 802a3b8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a3ba:	2300      	movs	r3, #0
 802a3bc:	617b      	str	r3, [r7, #20]
    if (err) {
 802a3be:	697b      	ldr	r3, [r7, #20]
 802a3c0:	2b00      	cmp	r3, #0
 802a3c2:	d001      	beq.n	802a3c8 <lfs_file_write+0x1c>
        return err;
 802a3c4:	697b      	ldr	r3, [r7, #20]
 802a3c6:	e017      	b.n	802a3f8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a3c8:	68fb      	ldr	r3, [r7, #12]
 802a3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a3cc:	68b9      	ldr	r1, [r7, #8]
 802a3ce:	4618      	mov	r0, r3
 802a3d0:	f7f9 fd96 	bl	8023f00 <lfs_mlist_isopen>
 802a3d4:	4603      	mov	r3, r0
 802a3d6:	2b00      	cmp	r3, #0
 802a3d8:	d106      	bne.n	802a3e8 <lfs_file_write+0x3c>
 802a3da:	4b09      	ldr	r3, [pc, #36]	; (802a400 <lfs_file_write+0x54>)
 802a3dc:	4a09      	ldr	r2, [pc, #36]	; (802a404 <lfs_file_write+0x58>)
 802a3de:	f241 51be 	movw	r1, #5566	; 0x15be
 802a3e2:	4809      	ldr	r0, [pc, #36]	; (802a408 <lfs_file_write+0x5c>)
 802a3e4:	f001 fdf8 	bl	802bfd8 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802a3e8:	683b      	ldr	r3, [r7, #0]
 802a3ea:	687a      	ldr	r2, [r7, #4]
 802a3ec:	68b9      	ldr	r1, [r7, #8]
 802a3ee:	68f8      	ldr	r0, [r7, #12]
 802a3f0:	f7fe f996 	bl	8028720 <lfs_file_rawwrite>
 802a3f4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a3f6:	693b      	ldr	r3, [r7, #16]
}
 802a3f8:	4618      	mov	r0, r3
 802a3fa:	3718      	adds	r7, #24
 802a3fc:	46bd      	mov	sp, r7
 802a3fe:	bd80      	pop	{r7, pc}
 802a400:	080337f8 	.word	0x080337f8
 802a404:	080342c4 	.word	0x080342c4
 802a408:	08032f40 	.word	0x08032f40

0802a40c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802a40c:	b580      	push	{r7, lr}
 802a40e:	b086      	sub	sp, #24
 802a410:	af00      	add	r7, sp, #0
 802a412:	60f8      	str	r0, [r7, #12]
 802a414:	60b9      	str	r1, [r7, #8]
 802a416:	607a      	str	r2, [r7, #4]
 802a418:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a41a:	2300      	movs	r3, #0
 802a41c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a41e:	697b      	ldr	r3, [r7, #20]
 802a420:	2b00      	cmp	r3, #0
 802a422:	d001      	beq.n	802a428 <lfs_file_seek+0x1c>
        return err;
 802a424:	697b      	ldr	r3, [r7, #20]
 802a426:	e017      	b.n	802a458 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a428:	68fb      	ldr	r3, [r7, #12]
 802a42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a42c:	68b9      	ldr	r1, [r7, #8]
 802a42e:	4618      	mov	r0, r3
 802a430:	f7f9 fd66 	bl	8023f00 <lfs_mlist_isopen>
 802a434:	4603      	mov	r3, r0
 802a436:	2b00      	cmp	r3, #0
 802a438:	d106      	bne.n	802a448 <lfs_file_seek+0x3c>
 802a43a:	4b09      	ldr	r3, [pc, #36]	; (802a460 <lfs_file_seek+0x54>)
 802a43c:	4a09      	ldr	r2, [pc, #36]	; (802a464 <lfs_file_seek+0x58>)
 802a43e:	f241 51d0 	movw	r1, #5584	; 0x15d0
 802a442:	4809      	ldr	r0, [pc, #36]	; (802a468 <lfs_file_seek+0x5c>)
 802a444:	f001 fdc8 	bl	802bfd8 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802a448:	683b      	ldr	r3, [r7, #0]
 802a44a:	687a      	ldr	r2, [r7, #4]
 802a44c:	68b9      	ldr	r1, [r7, #8]
 802a44e:	68f8      	ldr	r0, [r7, #12]
 802a450:	f7fe f9ea 	bl	8028828 <lfs_file_rawseek>
 802a454:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a456:	693b      	ldr	r3, [r7, #16]
}
 802a458:	4618      	mov	r0, r3
 802a45a:	3718      	adds	r7, #24
 802a45c:	46bd      	mov	sp, r7
 802a45e:	bd80      	pop	{r7, pc}
 802a460:	080337f8 	.word	0x080337f8
 802a464:	080342d4 	.word	0x080342d4
 802a468:	08032f40 	.word	0x08032f40

0802a46c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802a46c:	b580      	push	{r7, lr}
 802a46e:	b084      	sub	sp, #16
 802a470:	af00      	add	r7, sp, #0
 802a472:	6078      	str	r0, [r7, #4]
 802a474:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a476:	2300      	movs	r3, #0
 802a478:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a47a:	68fb      	ldr	r3, [r7, #12]
 802a47c:	2b00      	cmp	r3, #0
 802a47e:	d001      	beq.n	802a484 <lfs_mkdir+0x18>
        return err;
 802a480:	68fb      	ldr	r3, [r7, #12]
 802a482:	e005      	b.n	802a490 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802a484:	6839      	ldr	r1, [r7, #0]
 802a486:	6878      	ldr	r0, [r7, #4]
 802a488:	f7fc fe5c 	bl	8027144 <lfs_rawmkdir>
 802a48c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a48e:	68fb      	ldr	r3, [r7, #12]
}
 802a490:	4618      	mov	r0, r3
 802a492:	3710      	adds	r7, #16
 802a494:	46bd      	mov	sp, r7
 802a496:	bd80      	pop	{r7, pc}

0802a498 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802a498:	b580      	push	{r7, lr}
 802a49a:	b086      	sub	sp, #24
 802a49c:	af00      	add	r7, sp, #0
 802a49e:	60f8      	str	r0, [r7, #12]
 802a4a0:	60b9      	str	r1, [r7, #8]
 802a4a2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a4a4:	2300      	movs	r3, #0
 802a4a6:	617b      	str	r3, [r7, #20]
    if (err) {
 802a4a8:	697b      	ldr	r3, [r7, #20]
 802a4aa:	2b00      	cmp	r3, #0
 802a4ac:	d001      	beq.n	802a4b2 <lfs_dir_open+0x1a>
        return err;
 802a4ae:	697b      	ldr	r3, [r7, #20]
 802a4b0:	e019      	b.n	802a4e6 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802a4b2:	68fb      	ldr	r3, [r7, #12]
 802a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a4b6:	68b9      	ldr	r1, [r7, #8]
 802a4b8:	4618      	mov	r0, r3
 802a4ba:	f7f9 fd21 	bl	8023f00 <lfs_mlist_isopen>
 802a4be:	4603      	mov	r3, r0
 802a4c0:	f083 0301 	eor.w	r3, r3, #1
 802a4c4:	b2db      	uxtb	r3, r3
 802a4c6:	2b00      	cmp	r3, #0
 802a4c8:	d106      	bne.n	802a4d8 <lfs_dir_open+0x40>
 802a4ca:	4b09      	ldr	r3, [pc, #36]	; (802a4f0 <lfs_dir_open+0x58>)
 802a4cc:	4a09      	ldr	r2, [pc, #36]	; (802a4f4 <lfs_dir_open+0x5c>)
 802a4ce:	f241 612d 	movw	r1, #5677	; 0x162d
 802a4d2:	4809      	ldr	r0, [pc, #36]	; (802a4f8 <lfs_dir_open+0x60>)
 802a4d4:	f001 fd80 	bl	802bfd8 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802a4d8:	687a      	ldr	r2, [r7, #4]
 802a4da:	68b9      	ldr	r1, [r7, #8]
 802a4dc:	68f8      	ldr	r0, [r7, #12]
 802a4de:	f7fc ff71 	bl	80273c4 <lfs_dir_rawopen>
 802a4e2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a4e4:	697b      	ldr	r3, [r7, #20]
}
 802a4e6:	4618      	mov	r0, r3
 802a4e8:	3718      	adds	r7, #24
 802a4ea:	46bd      	mov	sp, r7
 802a4ec:	bd80      	pop	{r7, pc}
 802a4ee:	bf00      	nop
 802a4f0:	08033830 	.word	0x08033830
 802a4f4:	080342e4 	.word	0x080342e4
 802a4f8:	08032f40 	.word	0x08032f40

0802a4fc <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802a4fc:	b580      	push	{r7, lr}
 802a4fe:	b084      	sub	sp, #16
 802a500:	af00      	add	r7, sp, #0
 802a502:	6078      	str	r0, [r7, #4]
 802a504:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a506:	2300      	movs	r3, #0
 802a508:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a50a:	68fb      	ldr	r3, [r7, #12]
 802a50c:	2b00      	cmp	r3, #0
 802a50e:	d001      	beq.n	802a514 <lfs_dir_close+0x18>
        return err;
 802a510:	68fb      	ldr	r3, [r7, #12]
 802a512:	e005      	b.n	802a520 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802a514:	6839      	ldr	r1, [r7, #0]
 802a516:	6878      	ldr	r0, [r7, #4]
 802a518:	f7fc ffce 	bl	80274b8 <lfs_dir_rawclose>
 802a51c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a51e:	68fb      	ldr	r3, [r7, #12]
}
 802a520:	4618      	mov	r0, r3
 802a522:	3710      	adds	r7, #16
 802a524:	46bd      	mov	sp, r7
 802a526:	bd80      	pop	{r7, pc}

0802a528 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802a528:	b580      	push	{r7, lr}
 802a52a:	b086      	sub	sp, #24
 802a52c:	af00      	add	r7, sp, #0
 802a52e:	60f8      	str	r0, [r7, #12]
 802a530:	60b9      	str	r1, [r7, #8]
 802a532:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a534:	2300      	movs	r3, #0
 802a536:	617b      	str	r3, [r7, #20]
    if (err) {
 802a538:	697b      	ldr	r3, [r7, #20]
 802a53a:	2b00      	cmp	r3, #0
 802a53c:	d001      	beq.n	802a542 <lfs_dir_read+0x1a>
        return err;
 802a53e:	697b      	ldr	r3, [r7, #20]
 802a540:	e006      	b.n	802a550 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802a542:	687a      	ldr	r2, [r7, #4]
 802a544:	68b9      	ldr	r1, [r7, #8]
 802a546:	68f8      	ldr	r0, [r7, #12]
 802a548:	f7fc ffc4 	bl	80274d4 <lfs_dir_rawread>
 802a54c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a54e:	697b      	ldr	r3, [r7, #20]
}
 802a550:	4618      	mov	r0, r3
 802a552:	3718      	adds	r7, #24
 802a554:	46bd      	mov	sp, r7
 802a556:	bd80      	pop	{r7, pc}

0802a558 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802a558:	b580      	push	{r7, lr}
 802a55a:	b088      	sub	sp, #32
 802a55c:	af00      	add	r7, sp, #0
 802a55e:	60f8      	str	r0, [r7, #12]
 802a560:	60b9      	str	r1, [r7, #8]
 802a562:	607a      	str	r2, [r7, #4]
 802a564:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802a566:	f107 0310 	add.w	r3, r7, #16
 802a56a:	4618      	mov	r0, r3
 802a56c:	f7ea fb94 	bl	8014c98 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802a570:	8abb      	ldrh	r3, [r7, #20]
 802a572:	461a      	mov	r2, r3
 802a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a576:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802a578:	8afb      	ldrh	r3, [r7, #22]
 802a57a:	461a      	mov	r2, r3
 802a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a57e:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802a580:	8b3b      	ldrh	r3, [r7, #24]
 802a582:	461a      	mov	r2, r3
 802a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a586:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802a588:	8bbb      	ldrh	r3, [r7, #28]
 802a58a:	461a      	mov	r2, r3
 802a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a58e:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802a590:	887a      	ldrh	r2, [r7, #2]
 802a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a594:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 802a596:	887a      	ldrh	r2, [r7, #2]
 802a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a59a:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 802a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a59e:	68fa      	ldr	r2, [r7, #12]
 802a5a0:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802a5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5a4:	68ba      	ldr	r2, [r7, #8]
 802a5a6:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5aa:	687a      	ldr	r2, [r7, #4]
 802a5ac:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 802a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5b0:	4a11      	ldr	r2, [pc, #68]	; (802a5f8 <io_fs_init+0xa0>)
 802a5b2:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5b6:	4a11      	ldr	r2, [pc, #68]	; (802a5fc <io_fs_init+0xa4>)
 802a5b8:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5bc:	4a10      	ldr	r2, [pc, #64]	; (802a600 <io_fs_init+0xa8>)
 802a5be:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5c2:	4a10      	ldr	r2, [pc, #64]	; (802a604 <io_fs_init+0xac>)
 802a5c4:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5c8:	f242 7210 	movw	r2, #10000	; 0x2710
 802a5cc:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 802a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5d0:	22ff      	movs	r2, #255	; 0xff
 802a5d2:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 802a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a5da:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 802a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5de:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802a5e2:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 802a5e4:	8b3b      	ldrh	r3, [r7, #24]
 802a5e6:	461a      	mov	r2, r3
 802a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5ea:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 802a5ec:	2300      	movs	r3, #0
}
 802a5ee:	4618      	mov	r0, r3
 802a5f0:	3720      	adds	r7, #32
 802a5f2:	46bd      	mov	sp, r7
 802a5f4:	bd80      	pop	{r7, pc}
 802a5f6:	bf00      	nop
 802a5f8:	0802a609 	.word	0x0802a609
 802a5fc:	0802a6a5 	.word	0x0802a6a5
 802a600:	0802a65d 	.word	0x0802a65d
 802a604:	0802a6f9 	.word	0x0802a6f9

0802a608 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802a608:	b580      	push	{r7, lr}
 802a60a:	b084      	sub	sp, #16
 802a60c:	af00      	add	r7, sp, #0
 802a60e:	60f8      	str	r0, [r7, #12]
 802a610:	60b9      	str	r1, [r7, #8]
 802a612:	607a      	str	r2, [r7, #4]
 802a614:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a616:	68fb      	ldr	r3, [r7, #12]
 802a618:	6a1b      	ldr	r3, [r3, #32]
 802a61a:	68ba      	ldr	r2, [r7, #8]
 802a61c:	429a      	cmp	r2, r3
 802a61e:	d305      	bcc.n	802a62c <block_device_read+0x24>
 802a620:	4b0b      	ldr	r3, [pc, #44]	; (802a650 <block_device_read+0x48>)
 802a622:	4a0c      	ldr	r2, [pc, #48]	; (802a654 <block_device_read+0x4c>)
 802a624:	2148      	movs	r1, #72	; 0x48
 802a626:	480c      	ldr	r0, [pc, #48]	; (802a658 <block_device_read+0x50>)
 802a628:	f001 fcd6 	bl	802bfd8 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802a62c:	68fb      	ldr	r3, [r7, #12]
 802a62e:	69db      	ldr	r3, [r3, #28]
 802a630:	68ba      	ldr	r2, [r7, #8]
 802a632:	fb03 f202 	mul.w	r2, r3, r2
 802a636:	687b      	ldr	r3, [r7, #4]
 802a638:	4413      	add	r3, r2
 802a63a:	69ba      	ldr	r2, [r7, #24]
 802a63c:	b292      	uxth	r2, r2
 802a63e:	4619      	mov	r1, r3
 802a640:	6838      	ldr	r0, [r7, #0]
 802a642:	f7ea fcd1 	bl	8014fe8 <sFLASH_ReadBuffer>
	return 0;
 802a646:	2300      	movs	r3, #0
}
 802a648:	4618      	mov	r0, r3
 802a64a:	3710      	adds	r7, #16
 802a64c:	46bd      	mov	sp, r7
 802a64e:	bd80      	pop	{r7, pc}
 802a650:	08033868 	.word	0x08033868
 802a654:	080342f4 	.word	0x080342f4
 802a658:	08033880 	.word	0x08033880

0802a65c <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802a65c:	b580      	push	{r7, lr}
 802a65e:	b082      	sub	sp, #8
 802a660:	af00      	add	r7, sp, #0
 802a662:	6078      	str	r0, [r7, #4]
 802a664:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a666:	687b      	ldr	r3, [r7, #4]
 802a668:	6a1b      	ldr	r3, [r3, #32]
 802a66a:	683a      	ldr	r2, [r7, #0]
 802a66c:	429a      	cmp	r2, r3
 802a66e:	d305      	bcc.n	802a67c <block_device_erase+0x20>
 802a670:	4b09      	ldr	r3, [pc, #36]	; (802a698 <block_device_erase+0x3c>)
 802a672:	4a0a      	ldr	r2, [pc, #40]	; (802a69c <block_device_erase+0x40>)
 802a674:	2150      	movs	r1, #80	; 0x50
 802a676:	480a      	ldr	r0, [pc, #40]	; (802a6a0 <block_device_erase+0x44>)
 802a678:	f001 fcae 	bl	802bfd8 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802a67c:	687b      	ldr	r3, [r7, #4]
 802a67e:	69db      	ldr	r3, [r3, #28]
 802a680:	683a      	ldr	r2, [r7, #0]
 802a682:	fb02 f303 	mul.w	r3, r2, r3
 802a686:	4618      	mov	r0, r3
 802a688:	f7ea fbac 	bl	8014de4 <sFLASH_EraseSector>
	return 0;
 802a68c:	2300      	movs	r3, #0
}
 802a68e:	4618      	mov	r0, r3
 802a690:	3708      	adds	r7, #8
 802a692:	46bd      	mov	sp, r7
 802a694:	bd80      	pop	{r7, pc}
 802a696:	bf00      	nop
 802a698:	08033868 	.word	0x08033868
 802a69c:	08034308 	.word	0x08034308
 802a6a0:	08033880 	.word	0x08033880

0802a6a4 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802a6a4:	b580      	push	{r7, lr}
 802a6a6:	b084      	sub	sp, #16
 802a6a8:	af00      	add	r7, sp, #0
 802a6aa:	60f8      	str	r0, [r7, #12]
 802a6ac:	60b9      	str	r1, [r7, #8]
 802a6ae:	607a      	str	r2, [r7, #4]
 802a6b0:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a6b2:	68fb      	ldr	r3, [r7, #12]
 802a6b4:	6a1b      	ldr	r3, [r3, #32]
 802a6b6:	68ba      	ldr	r2, [r7, #8]
 802a6b8:	429a      	cmp	r2, r3
 802a6ba:	d305      	bcc.n	802a6c8 <block_device_prog+0x24>
 802a6bc:	4b0b      	ldr	r3, [pc, #44]	; (802a6ec <block_device_prog+0x48>)
 802a6be:	4a0c      	ldr	r2, [pc, #48]	; (802a6f0 <block_device_prog+0x4c>)
 802a6c0:	2158      	movs	r1, #88	; 0x58
 802a6c2:	480c      	ldr	r0, [pc, #48]	; (802a6f4 <block_device_prog+0x50>)
 802a6c4:	f001 fc88 	bl	802bfd8 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802a6c8:	68fb      	ldr	r3, [r7, #12]
 802a6ca:	69db      	ldr	r3, [r3, #28]
 802a6cc:	68ba      	ldr	r2, [r7, #8]
 802a6ce:	fb03 f202 	mul.w	r2, r3, r2
 802a6d2:	687b      	ldr	r3, [r7, #4]
 802a6d4:	4413      	add	r3, r2
 802a6d6:	69ba      	ldr	r2, [r7, #24]
 802a6d8:	b292      	uxth	r2, r2
 802a6da:	4619      	mov	r1, r3
 802a6dc:	6838      	ldr	r0, [r7, #0]
 802a6de:	f7ea fbda 	bl	8014e96 <sFLASH_WriteBuffer>
	return 0;
 802a6e2:	2300      	movs	r3, #0
}
 802a6e4:	4618      	mov	r0, r3
 802a6e6:	3710      	adds	r7, #16
 802a6e8:	46bd      	mov	sp, r7
 802a6ea:	bd80      	pop	{r7, pc}
 802a6ec:	08033868 	.word	0x08033868
 802a6f0:	0803431c 	.word	0x0803431c
 802a6f4:	08033880 	.word	0x08033880

0802a6f8 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802a6f8:	b480      	push	{r7}
 802a6fa:	b083      	sub	sp, #12
 802a6fc:	af00      	add	r7, sp, #0
 802a6fe:	6078      	str	r0, [r7, #4]
	return 0;
 802a700:	2300      	movs	r3, #0
}
 802a702:	4618      	mov	r0, r3
 802a704:	370c      	adds	r7, #12
 802a706:	46bd      	mov	sp, r7
 802a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a70c:	4770      	bx	lr
	...

0802a710 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802a710:	b480      	push	{r7}
 802a712:	b087      	sub	sp, #28
 802a714:	af00      	add	r7, sp, #0
 802a716:	60f8      	str	r0, [r7, #12]
 802a718:	60b9      	str	r1, [r7, #8]
 802a71a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802a71c:	68bb      	ldr	r3, [r7, #8]
 802a71e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802a720:	2300      	movs	r3, #0
 802a722:	617b      	str	r3, [r7, #20]
 802a724:	e024      	b.n	802a770 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802a726:	68fb      	ldr	r3, [r7, #12]
 802a728:	091a      	lsrs	r2, r3, #4
 802a72a:	6939      	ldr	r1, [r7, #16]
 802a72c:	697b      	ldr	r3, [r7, #20]
 802a72e:	440b      	add	r3, r1
 802a730:	781b      	ldrb	r3, [r3, #0]
 802a732:	4619      	mov	r1, r3
 802a734:	68fb      	ldr	r3, [r7, #12]
 802a736:	404b      	eors	r3, r1
 802a738:	f003 030f 	and.w	r3, r3, #15
 802a73c:	4912      	ldr	r1, [pc, #72]	; (802a788 <lfs_crc+0x78>)
 802a73e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802a742:	4053      	eors	r3, r2
 802a744:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802a746:	68fb      	ldr	r3, [r7, #12]
 802a748:	091a      	lsrs	r2, r3, #4
 802a74a:	6939      	ldr	r1, [r7, #16]
 802a74c:	697b      	ldr	r3, [r7, #20]
 802a74e:	440b      	add	r3, r1
 802a750:	781b      	ldrb	r3, [r3, #0]
 802a752:	091b      	lsrs	r3, r3, #4
 802a754:	b2db      	uxtb	r3, r3
 802a756:	4619      	mov	r1, r3
 802a758:	68fb      	ldr	r3, [r7, #12]
 802a75a:	404b      	eors	r3, r1
 802a75c:	f003 030f 	and.w	r3, r3, #15
 802a760:	4909      	ldr	r1, [pc, #36]	; (802a788 <lfs_crc+0x78>)
 802a762:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802a766:	4053      	eors	r3, r2
 802a768:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802a76a:	697b      	ldr	r3, [r7, #20]
 802a76c:	3301      	adds	r3, #1
 802a76e:	617b      	str	r3, [r7, #20]
 802a770:	697a      	ldr	r2, [r7, #20]
 802a772:	687b      	ldr	r3, [r7, #4]
 802a774:	429a      	cmp	r2, r3
 802a776:	d3d6      	bcc.n	802a726 <lfs_crc+0x16>
    }

    return crc;
 802a778:	68fb      	ldr	r3, [r7, #12]
}
 802a77a:	4618      	mov	r0, r3
 802a77c:	371c      	adds	r7, #28
 802a77e:	46bd      	mov	sp, r7
 802a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a784:	4770      	bx	lr
 802a786:	bf00      	nop
 802a788:	08034330 	.word	0x08034330

0802a78c <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802a78c:	b480      	push	{r7}
 802a78e:	b083      	sub	sp, #12
 802a790:	af00      	add	r7, sp, #0
 802a792:	6078      	str	r0, [r7, #4]
 802a794:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802a796:	687b      	ldr	r3, [r7, #4]
 802a798:	2b00      	cmp	r3, #0
 802a79a:	d002      	beq.n	802a7a2 <spi_fs_init_mutex+0x16>
 802a79c:	4a07      	ldr	r2, [pc, #28]	; (802a7bc <spi_fs_init_mutex+0x30>)
 802a79e:	687b      	ldr	r3, [r7, #4]
 802a7a0:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802a7a2:	683b      	ldr	r3, [r7, #0]
 802a7a4:	2b00      	cmp	r3, #0
 802a7a6:	d002      	beq.n	802a7ae <spi_fs_init_mutex+0x22>
 802a7a8:	4a05      	ldr	r2, [pc, #20]	; (802a7c0 <spi_fs_init_mutex+0x34>)
 802a7aa:	683b      	ldr	r3, [r7, #0]
 802a7ac:	6013      	str	r3, [r2, #0]

};
 802a7ae:	bf00      	nop
 802a7b0:	370c      	adds	r7, #12
 802a7b2:	46bd      	mov	sp, r7
 802a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7b8:	4770      	bx	lr
 802a7ba:	bf00      	nop
 802a7bc:	2000d98c 	.word	0x2000d98c
 802a7c0:	2000d990 	.word	0x2000d990

0802a7c4 <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802a7c4:	b590      	push	{r4, r7, lr}
 802a7c6:	b08b      	sub	sp, #44	; 0x2c
 802a7c8:	af02      	add	r7, sp, #8
 802a7ca:	61f8      	str	r0, [r7, #28]
 802a7cc:	61b9      	str	r1, [r7, #24]
 802a7ce:	617a      	str	r2, [r7, #20]
 802a7d0:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802a7d2:	4c14      	ldr	r4, [pc, #80]	; (802a824 <spi_fs_init+0x60>)
 802a7d4:	463b      	mov	r3, r7
 802a7d6:	4618      	mov	r0, r3
 802a7d8:	f7ea fa5e 	bl	8014c98 <sFLASH_GetInfo>
 802a7dc:	463b      	mov	r3, r7
 802a7de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a7e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802a7e4:	4b0f      	ldr	r3, [pc, #60]	; (802a824 <spi_fs_init+0x60>)
 802a7e6:	681b      	ldr	r3, [r3, #0]
 802a7e8:	2b00      	cmp	r3, #0
 802a7ea:	d102      	bne.n	802a7f2 <spi_fs_init+0x2e>
 802a7ec:	f04f 33ff 	mov.w	r3, #4294967295
 802a7f0:	e013      	b.n	802a81a <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802a7f2:	8a7b      	ldrh	r3, [r7, #18]
 802a7f4:	4a0c      	ldr	r2, [pc, #48]	; (802a828 <spi_fs_init+0x64>)
 802a7f6:	9200      	str	r2, [sp, #0]
 802a7f8:	697a      	ldr	r2, [r7, #20]
 802a7fa:	69b9      	ldr	r1, [r7, #24]
 802a7fc:	69f8      	ldr	r0, [r7, #28]
 802a7fe:	f7ff feab 	bl	802a558 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802a802:	220c      	movs	r2, #12
 802a804:	2100      	movs	r1, #0
 802a806:	4809      	ldr	r0, [pc, #36]	; (802a82c <spi_fs_init+0x68>)
 802a808:	f002 fdb6 	bl	802d378 <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802a80c:	4b07      	ldr	r3, [pc, #28]	; (802a82c <spi_fs_init+0x68>)
 802a80e:	4a08      	ldr	r2, [pc, #32]	; (802a830 <spi_fs_init+0x6c>)
 802a810:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802a812:	4b06      	ldr	r3, [pc, #24]	; (802a82c <spi_fs_init+0x68>)
 802a814:	2200      	movs	r2, #0
 802a816:	609a      	str	r2, [r3, #8]

	return 0;
 802a818:	2300      	movs	r3, #0
}
 802a81a:	4618      	mov	r0, r3
 802a81c:	3724      	adds	r7, #36	; 0x24
 802a81e:	46bd      	mov	sp, r7
 802a820:	bd90      	pop	{r4, r7, pc}
 802a822:	bf00      	nop
 802a824:	2000d8f0 	.word	0x2000d8f0
 802a828:	2000d8a4 	.word	0x2000d8a4
 802a82c:	2000d900 	.word	0x2000d900
 802a830:	2000d498 	.word	0x2000d498

0802a834 <spi_fs_mount>:

int spi_fs_mount(void){
 802a834:	b580      	push	{r7, lr}
 802a836:	b082      	sub	sp, #8
 802a838:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802a83a:	4b0d      	ldr	r3, [pc, #52]	; (802a870 <spi_fs_mount+0x3c>)
 802a83c:	681b      	ldr	r3, [r3, #0]
 802a83e:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802a840:	490c      	ldr	r1, [pc, #48]	; (802a874 <spi_fs_mount+0x40>)
 802a842:	480d      	ldr	r0, [pc, #52]	; (802a878 <spi_fs_mount+0x44>)
 802a844:	f7ff fcc4 	bl	802a1d0 <lfs_mount>
 802a848:	6078      	str	r0, [r7, #4]
	if (err) {
 802a84a:	687b      	ldr	r3, [r7, #4]
 802a84c:	2b00      	cmp	r3, #0
 802a84e:	d003      	beq.n	802a858 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802a850:	4b0a      	ldr	r3, [pc, #40]	; (802a87c <spi_fs_mount+0x48>)
 802a852:	2200      	movs	r2, #0
 802a854:	701a      	strb	r2, [r3, #0]
 802a856:	e002      	b.n	802a85e <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802a858:	4b08      	ldr	r3, [pc, #32]	; (802a87c <spi_fs_mount+0x48>)
 802a85a:	2201      	movs	r2, #1
 802a85c:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802a85e:	4b08      	ldr	r3, [pc, #32]	; (802a880 <spi_fs_mount+0x4c>)
 802a860:	681b      	ldr	r3, [r3, #0]
 802a862:	4798      	blx	r3
#endif

	return err;
 802a864:	687b      	ldr	r3, [r7, #4]
}
 802a866:	4618      	mov	r0, r3
 802a868:	3708      	adds	r7, #8
 802a86a:	46bd      	mov	sp, r7
 802a86c:	bd80      	pop	{r7, pc}
 802a86e:	bf00      	nop
 802a870:	2000d98c 	.word	0x2000d98c
 802a874:	2000d8a4 	.word	0x2000d8a4
 802a878:	2000d69c 	.word	0x2000d69c
 802a87c:	2000d698 	.word	0x2000d698
 802a880:	2000d990 	.word	0x2000d990

0802a884 <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802a884:	b580      	push	{r7, lr}
 802a886:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802a888:	4902      	ldr	r1, [pc, #8]	; (802a894 <spi_fs_format+0x10>)
 802a88a:	4803      	ldr	r0, [pc, #12]	; (802a898 <spi_fs_format+0x14>)
 802a88c:	f7ff fc8a 	bl	802a1a4 <lfs_format>
}
 802a890:	bf00      	nop
 802a892:	bd80      	pop	{r7, pc}
 802a894:	2000d8a4 	.word	0x2000d8a4
 802a898:	2000d69c 	.word	0x2000d69c

0802a89c <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802a89c:	b580      	push	{r7, lr}
 802a89e:	b088      	sub	sp, #32
 802a8a0:	af02      	add	r7, sp, #8
 802a8a2:	60f8      	str	r0, [r7, #12]
 802a8a4:	60b9      	str	r1, [r7, #8]
 802a8a6:	607a      	str	r2, [r7, #4]
 802a8a8:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802a8aa:	4b19      	ldr	r3, [pc, #100]	; (802a910 <spi_fs_read_file_offset+0x74>)
 802a8ac:	681b      	ldr	r3, [r3, #0]
 802a8ae:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802a8b0:	4b18      	ldr	r3, [pc, #96]	; (802a914 <spi_fs_read_file_offset+0x78>)
 802a8b2:	9300      	str	r3, [sp, #0]
 802a8b4:	f240 1301 	movw	r3, #257	; 0x101
 802a8b8:	68fa      	ldr	r2, [r7, #12]
 802a8ba:	4917      	ldr	r1, [pc, #92]	; (802a918 <spi_fs_read_file_offset+0x7c>)
 802a8bc:	4817      	ldr	r0, [pc, #92]	; (802a91c <spi_fs_read_file_offset+0x80>)
 802a8be:	f7ff fce3 	bl	802a288 <lfs_file_opencfg>
 802a8c2:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802a8c4:	697b      	ldr	r3, [r7, #20]
 802a8c6:	2b00      	cmp	r3, #0
 802a8c8:	db13      	blt.n	802a8f2 <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802a8ca:	687a      	ldr	r2, [r7, #4]
 802a8cc:	2300      	movs	r3, #0
 802a8ce:	4912      	ldr	r1, [pc, #72]	; (802a918 <spi_fs_read_file_offset+0x7c>)
 802a8d0:	4812      	ldr	r0, [pc, #72]	; (802a91c <spi_fs_read_file_offset+0x80>)
 802a8d2:	f7ff fd9b 	bl	802a40c <lfs_file_seek>
 802a8d6:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802a8d8:	697b      	ldr	r3, [r7, #20]
 802a8da:	2b00      	cmp	r3, #0
 802a8dc:	db0b      	blt.n	802a8f6 <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802a8de:	683b      	ldr	r3, [r7, #0]
 802a8e0:	68ba      	ldr	r2, [r7, #8]
 802a8e2:	490d      	ldr	r1, [pc, #52]	; (802a918 <spi_fs_read_file_offset+0x7c>)
 802a8e4:	480d      	ldr	r0, [pc, #52]	; (802a91c <spi_fs_read_file_offset+0x80>)
 802a8e6:	f7ff fd31 	bl	802a34c <lfs_file_read>
 802a8ea:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802a8ec:	697b      	ldr	r3, [r7, #20]
 802a8ee:	2b00      	cmp	r3, #0

	func_end:
 802a8f0:	e002      	b.n	802a8f8 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802a8f2:	bf00      	nop
 802a8f4:	e000      	b.n	802a8f8 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802a8f6:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802a8f8:	4907      	ldr	r1, [pc, #28]	; (802a918 <spi_fs_read_file_offset+0x7c>)
 802a8fa:	4808      	ldr	r0, [pc, #32]	; (802a91c <spi_fs_read_file_offset+0x80>)
 802a8fc:	f7ff fcfa 	bl	802a2f4 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802a900:	4b07      	ldr	r3, [pc, #28]	; (802a920 <spi_fs_read_file_offset+0x84>)
 802a902:	681b      	ldr	r3, [r3, #0]
 802a904:	4798      	blx	r3
#endif
	return err;
 802a906:	697b      	ldr	r3, [r7, #20]

}
 802a908:	4618      	mov	r0, r3
 802a90a:	3718      	adds	r7, #24
 802a90c:	46bd      	mov	sp, r7
 802a90e:	bd80      	pop	{r7, pc}
 802a910:	2000d98c 	.word	0x2000d98c
 802a914:	2000d900 	.word	0x2000d900
 802a918:	2000d714 	.word	0x2000d714
 802a91c:	2000d69c 	.word	0x2000d69c
 802a920:	2000d990 	.word	0x2000d990

0802a924 <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802a924:	b580      	push	{r7, lr}
 802a926:	b088      	sub	sp, #32
 802a928:	af02      	add	r7, sp, #8
 802a92a:	60f8      	str	r0, [r7, #12]
 802a92c:	60b9      	str	r1, [r7, #8]
 802a92e:	607a      	str	r2, [r7, #4]
	int err = 0;
 802a930:	2300      	movs	r3, #0
 802a932:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802a934:	4b13      	ldr	r3, [pc, #76]	; (802a984 <spi_fs_over_write_file+0x60>)
 802a936:	681b      	ldr	r3, [r3, #0]
 802a938:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802a93a:	4b13      	ldr	r3, [pc, #76]	; (802a988 <spi_fs_over_write_file+0x64>)
 802a93c:	9300      	str	r3, [sp, #0]
 802a93e:	f240 5303 	movw	r3, #1283	; 0x503
 802a942:	68fa      	ldr	r2, [r7, #12]
 802a944:	4911      	ldr	r1, [pc, #68]	; (802a98c <spi_fs_over_write_file+0x68>)
 802a946:	4812      	ldr	r0, [pc, #72]	; (802a990 <spi_fs_over_write_file+0x6c>)
 802a948:	f7ff fc9e 	bl	802a288 <lfs_file_opencfg>
 802a94c:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802a94e:	697b      	ldr	r3, [r7, #20]
 802a950:	2b00      	cmp	r3, #0
 802a952:	db09      	blt.n	802a968 <spi_fs_over_write_file+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802a954:	687b      	ldr	r3, [r7, #4]
 802a956:	68ba      	ldr	r2, [r7, #8]
 802a958:	490c      	ldr	r1, [pc, #48]	; (802a98c <spi_fs_over_write_file+0x68>)
 802a95a:	480d      	ldr	r0, [pc, #52]	; (802a990 <spi_fs_over_write_file+0x6c>)
 802a95c:	f7ff fd26 	bl	802a3ac <lfs_file_write>
 802a960:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802a962:	697b      	ldr	r3, [r7, #20]
 802a964:	2b00      	cmp	r3, #0

	func_end:
 802a966:	e000      	b.n	802a96a <spi_fs_over_write_file+0x46>
	if (err < 0) goto func_end;
 802a968:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802a96a:	4908      	ldr	r1, [pc, #32]	; (802a98c <spi_fs_over_write_file+0x68>)
 802a96c:	4808      	ldr	r0, [pc, #32]	; (802a990 <spi_fs_over_write_file+0x6c>)
 802a96e:	f7ff fcc1 	bl	802a2f4 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802a972:	4b08      	ldr	r3, [pc, #32]	; (802a994 <spi_fs_over_write_file+0x70>)
 802a974:	681b      	ldr	r3, [r3, #0]
 802a976:	4798      	blx	r3
#endif
	return err;
 802a978:	697b      	ldr	r3, [r7, #20]
}
 802a97a:	4618      	mov	r0, r3
 802a97c:	3718      	adds	r7, #24
 802a97e:	46bd      	mov	sp, r7
 802a980:	bd80      	pop	{r7, pc}
 802a982:	bf00      	nop
 802a984:	2000d98c 	.word	0x2000d98c
 802a988:	2000d900 	.word	0x2000d900
 802a98c:	2000d714 	.word	0x2000d714
 802a990:	2000d69c 	.word	0x2000d69c
 802a994:	2000d990 	.word	0x2000d990

0802a998 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802a998:	b580      	push	{r7, lr}
 802a99a:	b084      	sub	sp, #16
 802a99c:	af00      	add	r7, sp, #0
 802a99e:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802a9a0:	4b0b      	ldr	r3, [pc, #44]	; (802a9d0 <spi_fs_file_size+0x38>)
 802a9a2:	681b      	ldr	r3, [r3, #0]
 802a9a4:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802a9a6:	4a0b      	ldr	r2, [pc, #44]	; (802a9d4 <spi_fs_file_size+0x3c>)
 802a9a8:	6879      	ldr	r1, [r7, #4]
 802a9aa:	480b      	ldr	r0, [pc, #44]	; (802a9d8 <spi_fs_file_size+0x40>)
 802a9ac:	f7ff fc54 	bl	802a258 <lfs_stat>
 802a9b0:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802a9b2:	68fb      	ldr	r3, [r7, #12]
 802a9b4:	2b00      	cmp	r3, #0
 802a9b6:	d102      	bne.n	802a9be <spi_fs_file_size+0x26>
		err = file_info.size;
 802a9b8:	4b06      	ldr	r3, [pc, #24]	; (802a9d4 <spi_fs_file_size+0x3c>)
 802a9ba:	685b      	ldr	r3, [r3, #4]
 802a9bc:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802a9be:	4b07      	ldr	r3, [pc, #28]	; (802a9dc <spi_fs_file_size+0x44>)
 802a9c0:	681b      	ldr	r3, [r3, #0]
 802a9c2:	4798      	blx	r3
#endif
	return err;
 802a9c4:	68fb      	ldr	r3, [r7, #12]
}
 802a9c6:	4618      	mov	r0, r3
 802a9c8:	3710      	adds	r7, #16
 802a9ca:	46bd      	mov	sp, r7
 802a9cc:	bd80      	pop	{r7, pc}
 802a9ce:	bf00      	nop
 802a9d0:	2000d98c 	.word	0x2000d98c
 802a9d4:	2000d79c 	.word	0x2000d79c
 802a9d8:	2000d69c 	.word	0x2000d69c
 802a9dc:	2000d990 	.word	0x2000d990

0802a9e0 <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802a9e0:	b580      	push	{r7, lr}
 802a9e2:	b088      	sub	sp, #32
 802a9e4:	af02      	add	r7, sp, #8
 802a9e6:	60f8      	str	r0, [r7, #12]
 802a9e8:	60b9      	str	r1, [r7, #8]
 802a9ea:	607a      	str	r2, [r7, #4]
	int err = 0;
 802a9ec:	2300      	movs	r3, #0
 802a9ee:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802a9f0:	4b13      	ldr	r3, [pc, #76]	; (802aa40 <spi_fs_write_file_to_end+0x60>)
 802a9f2:	681b      	ldr	r3, [r3, #0]
 802a9f4:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802a9f6:	4b13      	ldr	r3, [pc, #76]	; (802aa44 <spi_fs_write_file_to_end+0x64>)
 802a9f8:	9300      	str	r3, [sp, #0]
 802a9fa:	f640 1303 	movw	r3, #2307	; 0x903
 802a9fe:	68fa      	ldr	r2, [r7, #12]
 802aa00:	4911      	ldr	r1, [pc, #68]	; (802aa48 <spi_fs_write_file_to_end+0x68>)
 802aa02:	4812      	ldr	r0, [pc, #72]	; (802aa4c <spi_fs_write_file_to_end+0x6c>)
 802aa04:	f7ff fc40 	bl	802a288 <lfs_file_opencfg>
 802aa08:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802aa0a:	697b      	ldr	r3, [r7, #20]
 802aa0c:	2b00      	cmp	r3, #0
 802aa0e:	db09      	blt.n	802aa24 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802aa10:	687b      	ldr	r3, [r7, #4]
 802aa12:	68ba      	ldr	r2, [r7, #8]
 802aa14:	490c      	ldr	r1, [pc, #48]	; (802aa48 <spi_fs_write_file_to_end+0x68>)
 802aa16:	480d      	ldr	r0, [pc, #52]	; (802aa4c <spi_fs_write_file_to_end+0x6c>)
 802aa18:	f7ff fcc8 	bl	802a3ac <lfs_file_write>
 802aa1c:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802aa1e:	697b      	ldr	r3, [r7, #20]
 802aa20:	2b00      	cmp	r3, #0

	func_end:
 802aa22:	e000      	b.n	802aa26 <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802aa24:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802aa26:	4908      	ldr	r1, [pc, #32]	; (802aa48 <spi_fs_write_file_to_end+0x68>)
 802aa28:	4808      	ldr	r0, [pc, #32]	; (802aa4c <spi_fs_write_file_to_end+0x6c>)
 802aa2a:	f7ff fc63 	bl	802a2f4 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802aa2e:	4b08      	ldr	r3, [pc, #32]	; (802aa50 <spi_fs_write_file_to_end+0x70>)
 802aa30:	681b      	ldr	r3, [r3, #0]
 802aa32:	4798      	blx	r3
#endif
	return err;
 802aa34:	697b      	ldr	r3, [r7, #20]
}
 802aa36:	4618      	mov	r0, r3
 802aa38:	3718      	adds	r7, #24
 802aa3a:	46bd      	mov	sp, r7
 802aa3c:	bd80      	pop	{r7, pc}
 802aa3e:	bf00      	nop
 802aa40:	2000d98c 	.word	0x2000d98c
 802aa44:	2000d900 	.word	0x2000d900
 802aa48:	2000d714 	.word	0x2000d714
 802aa4c:	2000d69c 	.word	0x2000d69c
 802aa50:	2000d990 	.word	0x2000d990

0802aa54 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802aa54:	b580      	push	{r7, lr}
 802aa56:	b084      	sub	sp, #16
 802aa58:	af00      	add	r7, sp, #0
 802aa5a:	6078      	str	r0, [r7, #4]
 802aa5c:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802aa5e:	2280      	movs	r2, #128	; 0x80
 802aa60:	2100      	movs	r1, #0
 802aa62:	480a      	ldr	r0, [pc, #40]	; (802aa8c <spi_fs_serch_file_in_dir+0x38>)
 802aa64:	f002 fc88 	bl	802d378 <memset>
	strcpy((char *)temp_buf, dir_path);
 802aa68:	6879      	ldr	r1, [r7, #4]
 802aa6a:	4808      	ldr	r0, [pc, #32]	; (802aa8c <spi_fs_serch_file_in_dir+0x38>)
 802aa6c:	f002 fe51 	bl	802d712 <strcpy>
	strcat((char *)temp_buf, filename);
 802aa70:	6839      	ldr	r1, [r7, #0]
 802aa72:	4806      	ldr	r0, [pc, #24]	; (802aa8c <spi_fs_serch_file_in_dir+0x38>)
 802aa74:	f002 fc88 	bl	802d388 <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802aa78:	4804      	ldr	r0, [pc, #16]	; (802aa8c <spi_fs_serch_file_in_dir+0x38>)
 802aa7a:	f7ff ff8d 	bl	802a998 <spi_fs_file_size>
 802aa7e:	60f8      	str	r0, [r7, #12]
	return err;
 802aa80:	68fb      	ldr	r3, [r7, #12]

}
 802aa82:	4618      	mov	r0, r3
 802aa84:	3710      	adds	r7, #16
 802aa86:	46bd      	mov	sp, r7
 802aa88:	bd80      	pop	{r7, pc}
 802aa8a:	bf00      	nop
 802aa8c:	2000d90c 	.word	0x2000d90c

0802aa90 <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802aa90:	b580      	push	{r7, lr}
 802aa92:	b084      	sub	sp, #16
 802aa94:	af00      	add	r7, sp, #0
 802aa96:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802aa98:	4b07      	ldr	r3, [pc, #28]	; (802aab8 <spi_fs_mkdir+0x28>)
 802aa9a:	681b      	ldr	r3, [r3, #0]
 802aa9c:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802aa9e:	6879      	ldr	r1, [r7, #4]
 802aaa0:	4806      	ldr	r0, [pc, #24]	; (802aabc <spi_fs_mkdir+0x2c>)
 802aaa2:	f7ff fce3 	bl	802a46c <lfs_mkdir>
 802aaa6:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802aaa8:	4b05      	ldr	r3, [pc, #20]	; (802aac0 <spi_fs_mkdir+0x30>)
 802aaaa:	681b      	ldr	r3, [r3, #0]
 802aaac:	4798      	blx	r3
#endif

	return err;
 802aaae:	68fb      	ldr	r3, [r7, #12]
}
 802aab0:	4618      	mov	r0, r3
 802aab2:	3710      	adds	r7, #16
 802aab4:	46bd      	mov	sp, r7
 802aab6:	bd80      	pop	{r7, pc}
 802aab8:	2000d98c 	.word	0x2000d98c
 802aabc:	2000d69c 	.word	0x2000d69c
 802aac0:	2000d990 	.word	0x2000d990

0802aac4 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802aac4:	b580      	push	{r7, lr}
 802aac6:	b084      	sub	sp, #16
 802aac8:	af00      	add	r7, sp, #0
 802aaca:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802aacc:	4b07      	ldr	r3, [pc, #28]	; (802aaec <spi_fs_remove+0x28>)
 802aace:	681b      	ldr	r3, [r3, #0]
 802aad0:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802aad2:	6879      	ldr	r1, [r7, #4]
 802aad4:	4806      	ldr	r0, [pc, #24]	; (802aaf0 <spi_fs_remove+0x2c>)
 802aad6:	f7ff fb91 	bl	802a1fc <lfs_remove>
 802aada:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802aadc:	4b05      	ldr	r3, [pc, #20]	; (802aaf4 <spi_fs_remove+0x30>)
 802aade:	681b      	ldr	r3, [r3, #0]
 802aae0:	4798      	blx	r3
#endif
	return err;
 802aae2:	68fb      	ldr	r3, [r7, #12]
}
 802aae4:	4618      	mov	r0, r3
 802aae6:	3710      	adds	r7, #16
 802aae8:	46bd      	mov	sp, r7
 802aaea:	bd80      	pop	{r7, pc}
 802aaec:	2000d98c 	.word	0x2000d98c
 802aaf0:	2000d69c 	.word	0x2000d69c
 802aaf4:	2000d990 	.word	0x2000d990

0802aaf8 <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path) {
 802aaf8:	b580      	push	{r7, lr}
 802aafa:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802aafe:	af02      	add	r7, sp, #8
 802ab00:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ab04:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ab08:	6018      	str	r0, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802ab0a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ab0e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ab12:	681a      	ldr	r2, [r3, #0]
 802ab14:	493e      	ldr	r1, [pc, #248]	; (802ac10 <remove_recursively_files_and_directories+0x118>)
 802ab16:	483f      	ldr	r0, [pc, #252]	; (802ac14 <remove_recursively_files_and_directories+0x11c>)
 802ab18:	f7ff fcbe 	bl	802a498 <lfs_dir_open>
 802ab1c:	4603      	mov	r3, r0
 802ab1e:	2b00      	cmp	r3, #0
 802ab20:	d170      	bne.n	802ac04 <remove_recursively_files_and_directories+0x10c>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802ab22:	e059      	b.n	802abd8 <remove_recursively_files_and_directories+0xe0>
            if (info.type == LFS_TYPE_DIR) {
 802ab24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ab28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802ab2c:	781b      	ldrb	r3, [r3, #0]
 802ab2e:	2b02      	cmp	r3, #2
 802ab30:	d135      	bne.n	802ab9e <remove_recursively_files_and_directories+0xa6>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802ab32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802ab36:	3308      	adds	r3, #8
 802ab38:	4937      	ldr	r1, [pc, #220]	; (802ac18 <remove_recursively_files_and_directories+0x120>)
 802ab3a:	4618      	mov	r0, r3
 802ab3c:	f7e5 fb50 	bl	80101e0 <strcmp>
 802ab40:	4603      	mov	r3, r0
 802ab42:	2b00      	cmp	r3, #0
 802ab44:	d048      	beq.n	802abd8 <remove_recursively_files_and_directories+0xe0>
 802ab46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802ab4a:	3308      	adds	r3, #8
 802ab4c:	4933      	ldr	r1, [pc, #204]	; (802ac1c <remove_recursively_files_and_directories+0x124>)
 802ab4e:	4618      	mov	r0, r3
 802ab50:	f7e5 fb46 	bl	80101e0 <strcmp>
 802ab54:	4603      	mov	r3, r0
 802ab56:	2b00      	cmp	r3, #0
 802ab58:	d100      	bne.n	802ab5c <remove_recursively_files_and_directories+0x64>
 802ab5a:	e03d      	b.n	802abd8 <remove_recursively_files_and_directories+0xe0>
                printf("Directory: %s\n", info.name);
 802ab5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802ab60:	3308      	adds	r3, #8
 802ab62:	4619      	mov	r1, r3
 802ab64:	482e      	ldr	r0, [pc, #184]	; (802ac20 <remove_recursively_files_and_directories+0x128>)
 802ab66:	f002 fa71 	bl	802d04c <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802ab6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ab6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ab72:	f107 0008 	add.w	r0, r7, #8
 802ab76:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802ab7a:	3208      	adds	r2, #8
 802ab7c:	9200      	str	r2, [sp, #0]
 802ab7e:	681b      	ldr	r3, [r3, #0]
 802ab80:	4a28      	ldr	r2, [pc, #160]	; (802ac24 <remove_recursively_files_and_directories+0x12c>)
 802ab82:	f44f 7180 	mov.w	r1, #256	; 0x100
 802ab86:	f002 fa73 	bl	802d070 <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802ab8a:	4921      	ldr	r1, [pc, #132]	; (802ac10 <remove_recursively_files_and_directories+0x118>)
 802ab8c:	4821      	ldr	r0, [pc, #132]	; (802ac14 <remove_recursively_files_and_directories+0x11c>)
 802ab8e:	f7ff fcb5 	bl	802a4fc <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path);  // Recursive call for subdirectories
 802ab92:	f107 0308 	add.w	r3, r7, #8
 802ab96:	4618      	mov	r0, r3
 802ab98:	f7ff ffae 	bl	802aaf8 <remove_recursively_files_and_directories>
 802ab9c:	e01c      	b.n	802abd8 <remove_recursively_files_and_directories+0xe0>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802ab9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802aba2:	3308      	adds	r3, #8
 802aba4:	4619      	mov	r1, r3
 802aba6:	4820      	ldr	r0, [pc, #128]	; (802ac28 <remove_recursively_files_and_directories+0x130>)
 802aba8:	f002 fa50 	bl	802d04c <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802abac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802abb0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802abb4:	f107 0008 	add.w	r0, r7, #8
 802abb8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802abbc:	3208      	adds	r2, #8
 802abbe:	9200      	str	r2, [sp, #0]
 802abc0:	681b      	ldr	r3, [r3, #0]
 802abc2:	4a18      	ldr	r2, [pc, #96]	; (802ac24 <remove_recursively_files_and_directories+0x12c>)
 802abc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 802abc8:	f002 fa52 	bl	802d070 <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802abcc:	f107 0308 	add.w	r3, r7, #8
 802abd0:	4619      	mov	r1, r3
 802abd2:	4810      	ldr	r0, [pc, #64]	; (802ac14 <remove_recursively_files_and_directories+0x11c>)
 802abd4:	f7ff fb12 	bl	802a1fc <lfs_remove>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802abd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802abdc:	461a      	mov	r2, r3
 802abde:	490c      	ldr	r1, [pc, #48]	; (802ac10 <remove_recursively_files_and_directories+0x118>)
 802abe0:	480c      	ldr	r0, [pc, #48]	; (802ac14 <remove_recursively_files_and_directories+0x11c>)
 802abe2:	f7ff fca1 	bl	802a528 <lfs_dir_read>
 802abe6:	4603      	mov	r3, r0
 802abe8:	2b00      	cmp	r3, #0
 802abea:	dc9b      	bgt.n	802ab24 <remove_recursively_files_and_directories+0x2c>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802abec:	4908      	ldr	r1, [pc, #32]	; (802ac10 <remove_recursively_files_and_directories+0x118>)
 802abee:	4809      	ldr	r0, [pc, #36]	; (802ac14 <remove_recursively_files_and_directories+0x11c>)
 802abf0:	f7ff fc84 	bl	802a4fc <lfs_dir_close>
        lfs_remove(&lfs, path);
 802abf4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802abf8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802abfc:	6819      	ldr	r1, [r3, #0]
 802abfe:	4805      	ldr	r0, [pc, #20]	; (802ac14 <remove_recursively_files_and_directories+0x11c>)
 802ac00:	f7ff fafc 	bl	802a1fc <lfs_remove>
    }

}
 802ac04:	bf00      	nop
 802ac06:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802ac0a:	46bd      	mov	sp, r7
 802ac0c:	bd80      	pop	{r7, pc}
 802ac0e:	bf00      	nop
 802ac10:	2000d768 	.word	0x2000d768
 802ac14:	2000d69c 	.word	0x2000d69c
 802ac18:	080338b8 	.word	0x080338b8
 802ac1c:	080338bc 	.word	0x080338bc
 802ac20:	080338c0 	.word	0x080338c0
 802ac24:	080338d0 	.word	0x080338d0
 802ac28:	080338d8 	.word	0x080338d8

0802ac2c <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802ac2c:	b580      	push	{r7, lr}
 802ac2e:	b082      	sub	sp, #8
 802ac30:	af00      	add	r7, sp, #0
 802ac32:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ac34:	4b07      	ldr	r3, [pc, #28]	; (802ac54 <spi_fs_remove_recurcuve_in+0x28>)
 802ac36:	681b      	ldr	r3, [r3, #0]
 802ac38:	4798      	blx	r3
#endif

	remove_recursively_files_and_directories(path);
 802ac3a:	6878      	ldr	r0, [r7, #4]
 802ac3c:	f7ff ff5c 	bl	802aaf8 <remove_recursively_files_and_directories>
	remove_recursively_files_and_directories(path);
 802ac40:	6878      	ldr	r0, [r7, #4]
 802ac42:	f7ff ff59 	bl	802aaf8 <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ac46:	4b04      	ldr	r3, [pc, #16]	; (802ac58 <spi_fs_remove_recurcuve_in+0x2c>)
 802ac48:	681b      	ldr	r3, [r3, #0]
 802ac4a:	4798      	blx	r3
#endif
}
 802ac4c:	bf00      	nop
 802ac4e:	3708      	adds	r7, #8
 802ac50:	46bd      	mov	sp, r7
 802ac52:	bd80      	pop	{r7, pc}
 802ac54:	2000d98c 	.word	0x2000d98c
 802ac58:	2000d990 	.word	0x2000d990

0802ac5c <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802ac5c:	b580      	push	{r7, lr}
 802ac5e:	b084      	sub	sp, #16
 802ac60:	af00      	add	r7, sp, #0
 802ac62:	6078      	str	r0, [r7, #4]
 802ac64:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ac66:	4b08      	ldr	r3, [pc, #32]	; (802ac88 <spi_fs_mv+0x2c>)
 802ac68:	681b      	ldr	r3, [r3, #0]
 802ac6a:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802ac6c:	683a      	ldr	r2, [r7, #0]
 802ac6e:	6879      	ldr	r1, [r7, #4]
 802ac70:	4806      	ldr	r0, [pc, #24]	; (802ac8c <spi_fs_mv+0x30>)
 802ac72:	f7ff fad9 	bl	802a228 <lfs_rename>
 802ac76:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ac78:	4b05      	ldr	r3, [pc, #20]	; (802ac90 <spi_fs_mv+0x34>)
 802ac7a:	681b      	ldr	r3, [r3, #0]
 802ac7c:	4798      	blx	r3
#endif
	return err;
 802ac7e:	68fb      	ldr	r3, [r7, #12]
}
 802ac80:	4618      	mov	r0, r3
 802ac82:	3710      	adds	r7, #16
 802ac84:	46bd      	mov	sp, r7
 802ac86:	bd80      	pop	{r7, pc}
 802ac88:	2000d98c 	.word	0x2000d98c
 802ac8c:	2000d69c 	.word	0x2000d69c
 802ac90:	2000d990 	.word	0x2000d990

0802ac94 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802ac94:	b480      	push	{r7}
 802ac96:	b08b      	sub	sp, #44	; 0x2c
 802ac98:	af00      	add	r7, sp, #0
 802ac9a:	60f8      	str	r0, [r7, #12]
 802ac9c:	60b9      	str	r1, [r7, #8]
 802ac9e:	607a      	str	r2, [r7, #4]
 802aca0:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802aca2:	2300      	movs	r3, #0
 802aca4:	61fb      	str	r3, [r7, #28]
 802aca6:	2300      	movs	r3, #0
 802aca8:	623b      	str	r3, [r7, #32]
 802acaa:	6a3b      	ldr	r3, [r7, #32]
 802acac:	627b      	str	r3, [r7, #36]	; 0x24
 802acae:	e06f      	b.n	802ad90 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802acb0:	2300      	movs	r3, #0
 802acb2:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802acb4:	e005      	b.n	802acc2 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acb8:	3301      	adds	r3, #1
 802acba:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 802acbc:	69bb      	ldr	r3, [r7, #24]
 802acbe:	3301      	adds	r3, #1
 802acc0:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802acc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802acc6:	429a      	cmp	r2, r3
 802acc8:	d205      	bcs.n	802acd6 <mbedtls_base64_decode+0x42>
 802acca:	683a      	ldr	r2, [r7, #0]
 802accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acce:	4413      	add	r3, r2
 802acd0:	781b      	ldrb	r3, [r3, #0]
 802acd2:	2b20      	cmp	r3, #32
 802acd4:	d0ef      	beq.n	802acb6 <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802acd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802acda:	429a      	cmp	r2, r3
 802acdc:	d05d      	beq.n	802ad9a <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802acde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ace2:	1ad3      	subs	r3, r2, r3
 802ace4:	2b01      	cmp	r3, #1
 802ace6:	d90c      	bls.n	802ad02 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802ace8:	683a      	ldr	r2, [r7, #0]
 802acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acec:	4413      	add	r3, r2
 802acee:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802acf0:	2b0d      	cmp	r3, #13
 802acf2:	d106      	bne.n	802ad02 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acf6:	3301      	adds	r3, #1
 802acf8:	683a      	ldr	r2, [r7, #0]
 802acfa:	4413      	add	r3, r2
 802acfc:	781b      	ldrb	r3, [r3, #0]
 802acfe:	2b0a      	cmp	r3, #10
 802ad00:	d040      	beq.n	802ad84 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802ad02:	683a      	ldr	r2, [r7, #0]
 802ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad06:	4413      	add	r3, r2
 802ad08:	781b      	ldrb	r3, [r3, #0]
 802ad0a:	2b0a      	cmp	r3, #10
 802ad0c:	d03c      	beq.n	802ad88 <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802ad0e:	69bb      	ldr	r3, [r7, #24]
 802ad10:	2b00      	cmp	r3, #0
 802ad12:	d002      	beq.n	802ad1a <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802ad14:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802ad18:	e0d0      	b.n	802aebc <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802ad1a:	683a      	ldr	r2, [r7, #0]
 802ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad1e:	4413      	add	r3, r2
 802ad20:	781b      	ldrb	r3, [r3, #0]
 802ad22:	2b3d      	cmp	r3, #61	; 0x3d
 802ad24:	d108      	bne.n	802ad38 <mbedtls_base64_decode+0xa4>
 802ad26:	69fb      	ldr	r3, [r7, #28]
 802ad28:	3301      	adds	r3, #1
 802ad2a:	61fb      	str	r3, [r7, #28]
 802ad2c:	69fb      	ldr	r3, [r7, #28]
 802ad2e:	2b02      	cmp	r3, #2
 802ad30:	d902      	bls.n	802ad38 <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802ad32:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802ad36:	e0c1      	b.n	802aebc <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802ad38:	683a      	ldr	r2, [r7, #0]
 802ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad3c:	4413      	add	r3, r2
 802ad3e:	781b      	ldrb	r3, [r3, #0]
 802ad40:	b25b      	sxtb	r3, r3
 802ad42:	2b00      	cmp	r3, #0
 802ad44:	db08      	blt.n	802ad58 <mbedtls_base64_decode+0xc4>
 802ad46:	683a      	ldr	r2, [r7, #0]
 802ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad4a:	4413      	add	r3, r2
 802ad4c:	781b      	ldrb	r3, [r3, #0]
 802ad4e:	461a      	mov	r2, r3
 802ad50:	4b5d      	ldr	r3, [pc, #372]	; (802aec8 <mbedtls_base64_decode+0x234>)
 802ad52:	5c9b      	ldrb	r3, [r3, r2]
 802ad54:	2b7f      	cmp	r3, #127	; 0x7f
 802ad56:	d102      	bne.n	802ad5e <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802ad58:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802ad5c:	e0ae      	b.n	802aebc <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802ad5e:	683a      	ldr	r2, [r7, #0]
 802ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad62:	4413      	add	r3, r2
 802ad64:	781b      	ldrb	r3, [r3, #0]
 802ad66:	461a      	mov	r2, r3
 802ad68:	4b57      	ldr	r3, [pc, #348]	; (802aec8 <mbedtls_base64_decode+0x234>)
 802ad6a:	5c9b      	ldrb	r3, [r3, r2]
 802ad6c:	2b3f      	cmp	r3, #63	; 0x3f
 802ad6e:	d805      	bhi.n	802ad7c <mbedtls_base64_decode+0xe8>
 802ad70:	69fb      	ldr	r3, [r7, #28]
 802ad72:	2b00      	cmp	r3, #0
 802ad74:	d002      	beq.n	802ad7c <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802ad76:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802ad7a:	e09f      	b.n	802aebc <mbedtls_base64_decode+0x228>

        n++;
 802ad7c:	6a3b      	ldr	r3, [r7, #32]
 802ad7e:	3301      	adds	r3, #1
 802ad80:	623b      	str	r3, [r7, #32]
 802ad82:	e002      	b.n	802ad8a <mbedtls_base64_decode+0xf6>
            continue;
 802ad84:	bf00      	nop
 802ad86:	e000      	b.n	802ad8a <mbedtls_base64_decode+0xf6>
            continue;
 802ad88:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad8c:	3301      	adds	r3, #1
 802ad8e:	627b      	str	r3, [r7, #36]	; 0x24
 802ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad94:	429a      	cmp	r2, r3
 802ad96:	d38b      	bcc.n	802acb0 <mbedtls_base64_decode+0x1c>
 802ad98:	e000      	b.n	802ad9c <mbedtls_base64_decode+0x108>
            break;
 802ad9a:	bf00      	nop
    }

    if( n == 0 )
 802ad9c:	6a3b      	ldr	r3, [r7, #32]
 802ad9e:	2b00      	cmp	r3, #0
 802ada0:	d104      	bne.n	802adac <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802ada2:	687b      	ldr	r3, [r7, #4]
 802ada4:	2200      	movs	r2, #0
 802ada6:	601a      	str	r2, [r3, #0]
        return( 0 );
 802ada8:	2300      	movs	r3, #0
 802adaa:	e087      	b.n	802aebc <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802adac:	6a3b      	ldr	r3, [r7, #32]
 802adae:	08da      	lsrs	r2, r3, #3
 802adb0:	4613      	mov	r3, r2
 802adb2:	005b      	lsls	r3, r3, #1
 802adb4:	4413      	add	r3, r2
 802adb6:	005b      	lsls	r3, r3, #1
 802adb8:	4619      	mov	r1, r3
 802adba:	6a3b      	ldr	r3, [r7, #32]
 802adbc:	f003 0207 	and.w	r2, r3, #7
 802adc0:	4613      	mov	r3, r2
 802adc2:	005b      	lsls	r3, r3, #1
 802adc4:	4413      	add	r3, r2
 802adc6:	005b      	lsls	r3, r3, #1
 802adc8:	3307      	adds	r3, #7
 802adca:	08db      	lsrs	r3, r3, #3
 802adcc:	440b      	add	r3, r1
 802adce:	623b      	str	r3, [r7, #32]
    n -= j;
 802add0:	6a3a      	ldr	r2, [r7, #32]
 802add2:	69fb      	ldr	r3, [r7, #28]
 802add4:	1ad3      	subs	r3, r2, r3
 802add6:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802add8:	68fb      	ldr	r3, [r7, #12]
 802adda:	2b00      	cmp	r3, #0
 802addc:	d003      	beq.n	802ade6 <mbedtls_base64_decode+0x152>
 802adde:	68ba      	ldr	r2, [r7, #8]
 802ade0:	6a3b      	ldr	r3, [r7, #32]
 802ade2:	429a      	cmp	r2, r3
 802ade4:	d205      	bcs.n	802adf2 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802ade6:	687b      	ldr	r3, [r7, #4]
 802ade8:	6a3a      	ldr	r2, [r7, #32]
 802adea:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802adec:	f06f 0329 	mvn.w	r3, #41	; 0x29
 802adf0:	e064      	b.n	802aebc <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802adf2:	2303      	movs	r3, #3
 802adf4:	61fb      	str	r3, [r7, #28]
 802adf6:	2300      	movs	r3, #0
 802adf8:	61bb      	str	r3, [r7, #24]
 802adfa:	2300      	movs	r3, #0
 802adfc:	623b      	str	r3, [r7, #32]
 802adfe:	68fb      	ldr	r3, [r7, #12]
 802ae00:	617b      	str	r3, [r7, #20]
 802ae02:	e051      	b.n	802aea8 <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802ae04:	683b      	ldr	r3, [r7, #0]
 802ae06:	781b      	ldrb	r3, [r3, #0]
 802ae08:	2b0d      	cmp	r3, #13
 802ae0a:	d046      	beq.n	802ae9a <mbedtls_base64_decode+0x206>
 802ae0c:	683b      	ldr	r3, [r7, #0]
 802ae0e:	781b      	ldrb	r3, [r3, #0]
 802ae10:	2b0a      	cmp	r3, #10
 802ae12:	d042      	beq.n	802ae9a <mbedtls_base64_decode+0x206>
 802ae14:	683b      	ldr	r3, [r7, #0]
 802ae16:	781b      	ldrb	r3, [r3, #0]
 802ae18:	2b20      	cmp	r3, #32
 802ae1a:	d03e      	beq.n	802ae9a <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802ae1c:	683b      	ldr	r3, [r7, #0]
 802ae1e:	781b      	ldrb	r3, [r3, #0]
 802ae20:	461a      	mov	r2, r3
 802ae22:	4b29      	ldr	r3, [pc, #164]	; (802aec8 <mbedtls_base64_decode+0x234>)
 802ae24:	5c9b      	ldrb	r3, [r3, r2]
 802ae26:	2b40      	cmp	r3, #64	; 0x40
 802ae28:	bf0c      	ite	eq
 802ae2a:	2301      	moveq	r3, #1
 802ae2c:	2300      	movne	r3, #0
 802ae2e:	b2db      	uxtb	r3, r3
 802ae30:	461a      	mov	r2, r3
 802ae32:	69fb      	ldr	r3, [r7, #28]
 802ae34:	1a9b      	subs	r3, r3, r2
 802ae36:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802ae38:	69bb      	ldr	r3, [r7, #24]
 802ae3a:	019a      	lsls	r2, r3, #6
 802ae3c:	683b      	ldr	r3, [r7, #0]
 802ae3e:	781b      	ldrb	r3, [r3, #0]
 802ae40:	4619      	mov	r1, r3
 802ae42:	4b21      	ldr	r3, [pc, #132]	; (802aec8 <mbedtls_base64_decode+0x234>)
 802ae44:	5c5b      	ldrb	r3, [r3, r1]
 802ae46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802ae4a:	4313      	orrs	r3, r2
 802ae4c:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802ae4e:	6a3b      	ldr	r3, [r7, #32]
 802ae50:	3301      	adds	r3, #1
 802ae52:	623b      	str	r3, [r7, #32]
 802ae54:	6a3b      	ldr	r3, [r7, #32]
 802ae56:	2b04      	cmp	r3, #4
 802ae58:	d120      	bne.n	802ae9c <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802ae5a:	2300      	movs	r3, #0
 802ae5c:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802ae5e:	69fb      	ldr	r3, [r7, #28]
 802ae60:	2b00      	cmp	r3, #0
 802ae62:	d006      	beq.n	802ae72 <mbedtls_base64_decode+0x1de>
 802ae64:	69bb      	ldr	r3, [r7, #24]
 802ae66:	0c19      	lsrs	r1, r3, #16
 802ae68:	697b      	ldr	r3, [r7, #20]
 802ae6a:	1c5a      	adds	r2, r3, #1
 802ae6c:	617a      	str	r2, [r7, #20]
 802ae6e:	b2ca      	uxtb	r2, r1
 802ae70:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802ae72:	69fb      	ldr	r3, [r7, #28]
 802ae74:	2b01      	cmp	r3, #1
 802ae76:	d906      	bls.n	802ae86 <mbedtls_base64_decode+0x1f2>
 802ae78:	69bb      	ldr	r3, [r7, #24]
 802ae7a:	0a19      	lsrs	r1, r3, #8
 802ae7c:	697b      	ldr	r3, [r7, #20]
 802ae7e:	1c5a      	adds	r2, r3, #1
 802ae80:	617a      	str	r2, [r7, #20]
 802ae82:	b2ca      	uxtb	r2, r1
 802ae84:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802ae86:	69fb      	ldr	r3, [r7, #28]
 802ae88:	2b02      	cmp	r3, #2
 802ae8a:	d907      	bls.n	802ae9c <mbedtls_base64_decode+0x208>
 802ae8c:	697b      	ldr	r3, [r7, #20]
 802ae8e:	1c5a      	adds	r2, r3, #1
 802ae90:	617a      	str	r2, [r7, #20]
 802ae92:	69ba      	ldr	r2, [r7, #24]
 802ae94:	b2d2      	uxtb	r2, r2
 802ae96:	701a      	strb	r2, [r3, #0]
 802ae98:	e000      	b.n	802ae9c <mbedtls_base64_decode+0x208>
            continue;
 802ae9a:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae9e:	3b01      	subs	r3, #1
 802aea0:	627b      	str	r3, [r7, #36]	; 0x24
 802aea2:	683b      	ldr	r3, [r7, #0]
 802aea4:	3301      	adds	r3, #1
 802aea6:	603b      	str	r3, [r7, #0]
 802aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802aeaa:	2b00      	cmp	r3, #0
 802aeac:	d1aa      	bne.n	802ae04 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802aeae:	697a      	ldr	r2, [r7, #20]
 802aeb0:	68fb      	ldr	r3, [r7, #12]
 802aeb2:	1ad3      	subs	r3, r2, r3
 802aeb4:	461a      	mov	r2, r3
 802aeb6:	687b      	ldr	r3, [r7, #4]
 802aeb8:	601a      	str	r2, [r3, #0]

    return( 0 );
 802aeba:	2300      	movs	r3, #0
}
 802aebc:	4618      	mov	r0, r3
 802aebe:	372c      	adds	r7, #44	; 0x2c
 802aec0:	46bd      	mov	sp, r7
 802aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aec6:	4770      	bx	lr
 802aec8:	08034370 	.word	0x08034370

0802aecc <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802aecc:	b580      	push	{r7, lr}
 802aece:	b082      	sub	sp, #8
 802aed0:	af00      	add	r7, sp, #0
 802aed2:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802aed4:	2258      	movs	r2, #88	; 0x58
 802aed6:	2100      	movs	r1, #0
 802aed8:	6878      	ldr	r0, [r7, #4]
 802aeda:	f002 fa4d 	bl	802d378 <memset>
}
 802aede:	bf00      	nop
 802aee0:	3708      	adds	r7, #8
 802aee2:	46bd      	mov	sp, r7
 802aee4:	bd80      	pop	{r7, pc}

0802aee6 <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802aee6:	b580      	push	{r7, lr}
 802aee8:	b082      	sub	sp, #8
 802aeea:	af00      	add	r7, sp, #0
 802aeec:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802aeee:	687b      	ldr	r3, [r7, #4]
 802aef0:	2b00      	cmp	r3, #0
 802aef2:	d004      	beq.n	802aefe <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802aef4:	2158      	movs	r1, #88	; 0x58
 802aef6:	6878      	ldr	r0, [r7, #4]
 802aef8:	f001 f85c 	bl	802bfb4 <mbedtls_platform_zeroize>
 802aefc:	e000      	b.n	802af00 <mbedtls_md5_free+0x1a>
        return;
 802aefe:	bf00      	nop
}
 802af00:	3708      	adds	r7, #8
 802af02:	46bd      	mov	sp, r7
 802af04:	bd80      	pop	{r7, pc}
	...

0802af08 <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802af08:	b480      	push	{r7}
 802af0a:	b083      	sub	sp, #12
 802af0c:	af00      	add	r7, sp, #0
 802af0e:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802af10:	687b      	ldr	r3, [r7, #4]
 802af12:	2200      	movs	r2, #0
 802af14:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802af16:	687b      	ldr	r3, [r7, #4]
 802af18:	2200      	movs	r2, #0
 802af1a:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802af1c:	687b      	ldr	r3, [r7, #4]
 802af1e:	4a09      	ldr	r2, [pc, #36]	; (802af44 <mbedtls_md5_starts_ret+0x3c>)
 802af20:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802af22:	687b      	ldr	r3, [r7, #4]
 802af24:	4a08      	ldr	r2, [pc, #32]	; (802af48 <mbedtls_md5_starts_ret+0x40>)
 802af26:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802af28:	687b      	ldr	r3, [r7, #4]
 802af2a:	4a08      	ldr	r2, [pc, #32]	; (802af4c <mbedtls_md5_starts_ret+0x44>)
 802af2c:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802af2e:	687b      	ldr	r3, [r7, #4]
 802af30:	4a07      	ldr	r2, [pc, #28]	; (802af50 <mbedtls_md5_starts_ret+0x48>)
 802af32:	615a      	str	r2, [r3, #20]

    return( 0 );
 802af34:	2300      	movs	r3, #0
}
 802af36:	4618      	mov	r0, r3
 802af38:	370c      	adds	r7, #12
 802af3a:	46bd      	mov	sp, r7
 802af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af40:	4770      	bx	lr
 802af42:	bf00      	nop
 802af44:	67452301 	.word	0x67452301
 802af48:	efcdab89 	.word	0xefcdab89
 802af4c:	98badcfe 	.word	0x98badcfe
 802af50:	10325476 	.word	0x10325476

0802af54 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802af54:	b480      	push	{r7}
 802af56:	b097      	sub	sp, #92	; 0x5c
 802af58:	af00      	add	r7, sp, #0
 802af5a:	6078      	str	r0, [r7, #4]
 802af5c:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802af5e:	683b      	ldr	r3, [r7, #0]
 802af60:	781b      	ldrb	r3, [r3, #0]
 802af62:	461a      	mov	r2, r3
 802af64:	683b      	ldr	r3, [r7, #0]
 802af66:	3301      	adds	r3, #1
 802af68:	781b      	ldrb	r3, [r3, #0]
 802af6a:	021b      	lsls	r3, r3, #8
 802af6c:	431a      	orrs	r2, r3
 802af6e:	683b      	ldr	r3, [r7, #0]
 802af70:	3302      	adds	r3, #2
 802af72:	781b      	ldrb	r3, [r3, #0]
 802af74:	041b      	lsls	r3, r3, #16
 802af76:	431a      	orrs	r2, r3
 802af78:	683b      	ldr	r3, [r7, #0]
 802af7a:	3303      	adds	r3, #3
 802af7c:	781b      	ldrb	r3, [r3, #0]
 802af7e:	061b      	lsls	r3, r3, #24
 802af80:	4313      	orrs	r3, r2
 802af82:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802af84:	683b      	ldr	r3, [r7, #0]
 802af86:	3304      	adds	r3, #4
 802af88:	781b      	ldrb	r3, [r3, #0]
 802af8a:	461a      	mov	r2, r3
 802af8c:	683b      	ldr	r3, [r7, #0]
 802af8e:	3305      	adds	r3, #5
 802af90:	781b      	ldrb	r3, [r3, #0]
 802af92:	021b      	lsls	r3, r3, #8
 802af94:	431a      	orrs	r2, r3
 802af96:	683b      	ldr	r3, [r7, #0]
 802af98:	3306      	adds	r3, #6
 802af9a:	781b      	ldrb	r3, [r3, #0]
 802af9c:	041b      	lsls	r3, r3, #16
 802af9e:	431a      	orrs	r2, r3
 802afa0:	683b      	ldr	r3, [r7, #0]
 802afa2:	3307      	adds	r3, #7
 802afa4:	781b      	ldrb	r3, [r3, #0]
 802afa6:	061b      	lsls	r3, r3, #24
 802afa8:	4313      	orrs	r3, r2
 802afaa:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802afac:	683b      	ldr	r3, [r7, #0]
 802afae:	3308      	adds	r3, #8
 802afb0:	781b      	ldrb	r3, [r3, #0]
 802afb2:	461a      	mov	r2, r3
 802afb4:	683b      	ldr	r3, [r7, #0]
 802afb6:	3309      	adds	r3, #9
 802afb8:	781b      	ldrb	r3, [r3, #0]
 802afba:	021b      	lsls	r3, r3, #8
 802afbc:	431a      	orrs	r2, r3
 802afbe:	683b      	ldr	r3, [r7, #0]
 802afc0:	330a      	adds	r3, #10
 802afc2:	781b      	ldrb	r3, [r3, #0]
 802afc4:	041b      	lsls	r3, r3, #16
 802afc6:	431a      	orrs	r2, r3
 802afc8:	683b      	ldr	r3, [r7, #0]
 802afca:	330b      	adds	r3, #11
 802afcc:	781b      	ldrb	r3, [r3, #0]
 802afce:	061b      	lsls	r3, r3, #24
 802afd0:	4313      	orrs	r3, r2
 802afd2:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802afd4:	683b      	ldr	r3, [r7, #0]
 802afd6:	330c      	adds	r3, #12
 802afd8:	781b      	ldrb	r3, [r3, #0]
 802afda:	461a      	mov	r2, r3
 802afdc:	683b      	ldr	r3, [r7, #0]
 802afde:	330d      	adds	r3, #13
 802afe0:	781b      	ldrb	r3, [r3, #0]
 802afe2:	021b      	lsls	r3, r3, #8
 802afe4:	431a      	orrs	r2, r3
 802afe6:	683b      	ldr	r3, [r7, #0]
 802afe8:	330e      	adds	r3, #14
 802afea:	781b      	ldrb	r3, [r3, #0]
 802afec:	041b      	lsls	r3, r3, #16
 802afee:	431a      	orrs	r2, r3
 802aff0:	683b      	ldr	r3, [r7, #0]
 802aff2:	330f      	adds	r3, #15
 802aff4:	781b      	ldrb	r3, [r3, #0]
 802aff6:	061b      	lsls	r3, r3, #24
 802aff8:	4313      	orrs	r3, r2
 802affa:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802affc:	683b      	ldr	r3, [r7, #0]
 802affe:	3310      	adds	r3, #16
 802b000:	781b      	ldrb	r3, [r3, #0]
 802b002:	461a      	mov	r2, r3
 802b004:	683b      	ldr	r3, [r7, #0]
 802b006:	3311      	adds	r3, #17
 802b008:	781b      	ldrb	r3, [r3, #0]
 802b00a:	021b      	lsls	r3, r3, #8
 802b00c:	431a      	orrs	r2, r3
 802b00e:	683b      	ldr	r3, [r7, #0]
 802b010:	3312      	adds	r3, #18
 802b012:	781b      	ldrb	r3, [r3, #0]
 802b014:	041b      	lsls	r3, r3, #16
 802b016:	431a      	orrs	r2, r3
 802b018:	683b      	ldr	r3, [r7, #0]
 802b01a:	3313      	adds	r3, #19
 802b01c:	781b      	ldrb	r3, [r3, #0]
 802b01e:	061b      	lsls	r3, r3, #24
 802b020:	4313      	orrs	r3, r2
 802b022:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b024:	683b      	ldr	r3, [r7, #0]
 802b026:	3314      	adds	r3, #20
 802b028:	781b      	ldrb	r3, [r3, #0]
 802b02a:	461a      	mov	r2, r3
 802b02c:	683b      	ldr	r3, [r7, #0]
 802b02e:	3315      	adds	r3, #21
 802b030:	781b      	ldrb	r3, [r3, #0]
 802b032:	021b      	lsls	r3, r3, #8
 802b034:	431a      	orrs	r2, r3
 802b036:	683b      	ldr	r3, [r7, #0]
 802b038:	3316      	adds	r3, #22
 802b03a:	781b      	ldrb	r3, [r3, #0]
 802b03c:	041b      	lsls	r3, r3, #16
 802b03e:	431a      	orrs	r2, r3
 802b040:	683b      	ldr	r3, [r7, #0]
 802b042:	3317      	adds	r3, #23
 802b044:	781b      	ldrb	r3, [r3, #0]
 802b046:	061b      	lsls	r3, r3, #24
 802b048:	4313      	orrs	r3, r2
 802b04a:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b04c:	683b      	ldr	r3, [r7, #0]
 802b04e:	3318      	adds	r3, #24
 802b050:	781b      	ldrb	r3, [r3, #0]
 802b052:	461a      	mov	r2, r3
 802b054:	683b      	ldr	r3, [r7, #0]
 802b056:	3319      	adds	r3, #25
 802b058:	781b      	ldrb	r3, [r3, #0]
 802b05a:	021b      	lsls	r3, r3, #8
 802b05c:	431a      	orrs	r2, r3
 802b05e:	683b      	ldr	r3, [r7, #0]
 802b060:	331a      	adds	r3, #26
 802b062:	781b      	ldrb	r3, [r3, #0]
 802b064:	041b      	lsls	r3, r3, #16
 802b066:	431a      	orrs	r2, r3
 802b068:	683b      	ldr	r3, [r7, #0]
 802b06a:	331b      	adds	r3, #27
 802b06c:	781b      	ldrb	r3, [r3, #0]
 802b06e:	061b      	lsls	r3, r3, #24
 802b070:	4313      	orrs	r3, r2
 802b072:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b074:	683b      	ldr	r3, [r7, #0]
 802b076:	331c      	adds	r3, #28
 802b078:	781b      	ldrb	r3, [r3, #0]
 802b07a:	461a      	mov	r2, r3
 802b07c:	683b      	ldr	r3, [r7, #0]
 802b07e:	331d      	adds	r3, #29
 802b080:	781b      	ldrb	r3, [r3, #0]
 802b082:	021b      	lsls	r3, r3, #8
 802b084:	431a      	orrs	r2, r3
 802b086:	683b      	ldr	r3, [r7, #0]
 802b088:	331e      	adds	r3, #30
 802b08a:	781b      	ldrb	r3, [r3, #0]
 802b08c:	041b      	lsls	r3, r3, #16
 802b08e:	431a      	orrs	r2, r3
 802b090:	683b      	ldr	r3, [r7, #0]
 802b092:	331f      	adds	r3, #31
 802b094:	781b      	ldrb	r3, [r3, #0]
 802b096:	061b      	lsls	r3, r3, #24
 802b098:	4313      	orrs	r3, r2
 802b09a:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b09c:	683b      	ldr	r3, [r7, #0]
 802b09e:	3320      	adds	r3, #32
 802b0a0:	781b      	ldrb	r3, [r3, #0]
 802b0a2:	461a      	mov	r2, r3
 802b0a4:	683b      	ldr	r3, [r7, #0]
 802b0a6:	3321      	adds	r3, #33	; 0x21
 802b0a8:	781b      	ldrb	r3, [r3, #0]
 802b0aa:	021b      	lsls	r3, r3, #8
 802b0ac:	431a      	orrs	r2, r3
 802b0ae:	683b      	ldr	r3, [r7, #0]
 802b0b0:	3322      	adds	r3, #34	; 0x22
 802b0b2:	781b      	ldrb	r3, [r3, #0]
 802b0b4:	041b      	lsls	r3, r3, #16
 802b0b6:	431a      	orrs	r2, r3
 802b0b8:	683b      	ldr	r3, [r7, #0]
 802b0ba:	3323      	adds	r3, #35	; 0x23
 802b0bc:	781b      	ldrb	r3, [r3, #0]
 802b0be:	061b      	lsls	r3, r3, #24
 802b0c0:	4313      	orrs	r3, r2
 802b0c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b0c4:	683b      	ldr	r3, [r7, #0]
 802b0c6:	3324      	adds	r3, #36	; 0x24
 802b0c8:	781b      	ldrb	r3, [r3, #0]
 802b0ca:	461a      	mov	r2, r3
 802b0cc:	683b      	ldr	r3, [r7, #0]
 802b0ce:	3325      	adds	r3, #37	; 0x25
 802b0d0:	781b      	ldrb	r3, [r3, #0]
 802b0d2:	021b      	lsls	r3, r3, #8
 802b0d4:	431a      	orrs	r2, r3
 802b0d6:	683b      	ldr	r3, [r7, #0]
 802b0d8:	3326      	adds	r3, #38	; 0x26
 802b0da:	781b      	ldrb	r3, [r3, #0]
 802b0dc:	041b      	lsls	r3, r3, #16
 802b0de:	431a      	orrs	r2, r3
 802b0e0:	683b      	ldr	r3, [r7, #0]
 802b0e2:	3327      	adds	r3, #39	; 0x27
 802b0e4:	781b      	ldrb	r3, [r3, #0]
 802b0e6:	061b      	lsls	r3, r3, #24
 802b0e8:	4313      	orrs	r3, r2
 802b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b0ec:	683b      	ldr	r3, [r7, #0]
 802b0ee:	3328      	adds	r3, #40	; 0x28
 802b0f0:	781b      	ldrb	r3, [r3, #0]
 802b0f2:	461a      	mov	r2, r3
 802b0f4:	683b      	ldr	r3, [r7, #0]
 802b0f6:	3329      	adds	r3, #41	; 0x29
 802b0f8:	781b      	ldrb	r3, [r3, #0]
 802b0fa:	021b      	lsls	r3, r3, #8
 802b0fc:	431a      	orrs	r2, r3
 802b0fe:	683b      	ldr	r3, [r7, #0]
 802b100:	332a      	adds	r3, #42	; 0x2a
 802b102:	781b      	ldrb	r3, [r3, #0]
 802b104:	041b      	lsls	r3, r3, #16
 802b106:	431a      	orrs	r2, r3
 802b108:	683b      	ldr	r3, [r7, #0]
 802b10a:	332b      	adds	r3, #43	; 0x2b
 802b10c:	781b      	ldrb	r3, [r3, #0]
 802b10e:	061b      	lsls	r3, r3, #24
 802b110:	4313      	orrs	r3, r2
 802b112:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b114:	683b      	ldr	r3, [r7, #0]
 802b116:	332c      	adds	r3, #44	; 0x2c
 802b118:	781b      	ldrb	r3, [r3, #0]
 802b11a:	461a      	mov	r2, r3
 802b11c:	683b      	ldr	r3, [r7, #0]
 802b11e:	332d      	adds	r3, #45	; 0x2d
 802b120:	781b      	ldrb	r3, [r3, #0]
 802b122:	021b      	lsls	r3, r3, #8
 802b124:	431a      	orrs	r2, r3
 802b126:	683b      	ldr	r3, [r7, #0]
 802b128:	332e      	adds	r3, #46	; 0x2e
 802b12a:	781b      	ldrb	r3, [r3, #0]
 802b12c:	041b      	lsls	r3, r3, #16
 802b12e:	431a      	orrs	r2, r3
 802b130:	683b      	ldr	r3, [r7, #0]
 802b132:	332f      	adds	r3, #47	; 0x2f
 802b134:	781b      	ldrb	r3, [r3, #0]
 802b136:	061b      	lsls	r3, r3, #24
 802b138:	4313      	orrs	r3, r2
 802b13a:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b13c:	683b      	ldr	r3, [r7, #0]
 802b13e:	3330      	adds	r3, #48	; 0x30
 802b140:	781b      	ldrb	r3, [r3, #0]
 802b142:	461a      	mov	r2, r3
 802b144:	683b      	ldr	r3, [r7, #0]
 802b146:	3331      	adds	r3, #49	; 0x31
 802b148:	781b      	ldrb	r3, [r3, #0]
 802b14a:	021b      	lsls	r3, r3, #8
 802b14c:	431a      	orrs	r2, r3
 802b14e:	683b      	ldr	r3, [r7, #0]
 802b150:	3332      	adds	r3, #50	; 0x32
 802b152:	781b      	ldrb	r3, [r3, #0]
 802b154:	041b      	lsls	r3, r3, #16
 802b156:	431a      	orrs	r2, r3
 802b158:	683b      	ldr	r3, [r7, #0]
 802b15a:	3333      	adds	r3, #51	; 0x33
 802b15c:	781b      	ldrb	r3, [r3, #0]
 802b15e:	061b      	lsls	r3, r3, #24
 802b160:	4313      	orrs	r3, r2
 802b162:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b164:	683b      	ldr	r3, [r7, #0]
 802b166:	3334      	adds	r3, #52	; 0x34
 802b168:	781b      	ldrb	r3, [r3, #0]
 802b16a:	461a      	mov	r2, r3
 802b16c:	683b      	ldr	r3, [r7, #0]
 802b16e:	3335      	adds	r3, #53	; 0x35
 802b170:	781b      	ldrb	r3, [r3, #0]
 802b172:	021b      	lsls	r3, r3, #8
 802b174:	431a      	orrs	r2, r3
 802b176:	683b      	ldr	r3, [r7, #0]
 802b178:	3336      	adds	r3, #54	; 0x36
 802b17a:	781b      	ldrb	r3, [r3, #0]
 802b17c:	041b      	lsls	r3, r3, #16
 802b17e:	431a      	orrs	r2, r3
 802b180:	683b      	ldr	r3, [r7, #0]
 802b182:	3337      	adds	r3, #55	; 0x37
 802b184:	781b      	ldrb	r3, [r3, #0]
 802b186:	061b      	lsls	r3, r3, #24
 802b188:	4313      	orrs	r3, r2
 802b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b18c:	683b      	ldr	r3, [r7, #0]
 802b18e:	3338      	adds	r3, #56	; 0x38
 802b190:	781b      	ldrb	r3, [r3, #0]
 802b192:	461a      	mov	r2, r3
 802b194:	683b      	ldr	r3, [r7, #0]
 802b196:	3339      	adds	r3, #57	; 0x39
 802b198:	781b      	ldrb	r3, [r3, #0]
 802b19a:	021b      	lsls	r3, r3, #8
 802b19c:	431a      	orrs	r2, r3
 802b19e:	683b      	ldr	r3, [r7, #0]
 802b1a0:	333a      	adds	r3, #58	; 0x3a
 802b1a2:	781b      	ldrb	r3, [r3, #0]
 802b1a4:	041b      	lsls	r3, r3, #16
 802b1a6:	431a      	orrs	r2, r3
 802b1a8:	683b      	ldr	r3, [r7, #0]
 802b1aa:	333b      	adds	r3, #59	; 0x3b
 802b1ac:	781b      	ldrb	r3, [r3, #0]
 802b1ae:	061b      	lsls	r3, r3, #24
 802b1b0:	4313      	orrs	r3, r2
 802b1b2:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b1b4:	683b      	ldr	r3, [r7, #0]
 802b1b6:	333c      	adds	r3, #60	; 0x3c
 802b1b8:	781b      	ldrb	r3, [r3, #0]
 802b1ba:	461a      	mov	r2, r3
 802b1bc:	683b      	ldr	r3, [r7, #0]
 802b1be:	333d      	adds	r3, #61	; 0x3d
 802b1c0:	781b      	ldrb	r3, [r3, #0]
 802b1c2:	021b      	lsls	r3, r3, #8
 802b1c4:	431a      	orrs	r2, r3
 802b1c6:	683b      	ldr	r3, [r7, #0]
 802b1c8:	333e      	adds	r3, #62	; 0x3e
 802b1ca:	781b      	ldrb	r3, [r3, #0]
 802b1cc:	041b      	lsls	r3, r3, #16
 802b1ce:	431a      	orrs	r2, r3
 802b1d0:	683b      	ldr	r3, [r7, #0]
 802b1d2:	333f      	adds	r3, #63	; 0x3f
 802b1d4:	781b      	ldrb	r3, [r3, #0]
 802b1d6:	061b      	lsls	r3, r3, #24
 802b1d8:	4313      	orrs	r3, r2
 802b1da:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802b1dc:	687b      	ldr	r3, [r7, #4]
 802b1de:	689b      	ldr	r3, [r3, #8]
 802b1e0:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 802b1e2:	687b      	ldr	r3, [r7, #4]
 802b1e4:	68db      	ldr	r3, [r3, #12]
 802b1e6:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 802b1e8:	687b      	ldr	r3, [r7, #4]
 802b1ea:	691b      	ldr	r3, [r3, #16]
 802b1ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 802b1ee:	687b      	ldr	r3, [r7, #4]
 802b1f0:	695b      	ldr	r3, [r3, #20]
 802b1f2:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802b1f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b1f8:	405a      	eors	r2, r3
 802b1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b1fc:	401a      	ands	r2, r3
 802b1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b200:	405a      	eors	r2, r3
 802b202:	68bb      	ldr	r3, [r7, #8]
 802b204:	441a      	add	r2, r3
 802b206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b208:	441a      	add	r2, r3
 802b20a:	4ba5      	ldr	r3, [pc, #660]	; (802b4a0 <mbedtls_internal_md5_process+0x54c>)
 802b20c:	4413      	add	r3, r2
 802b20e:	657b      	str	r3, [r7, #84]	; 0x54
 802b210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b212:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b216:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b218:	4413      	add	r3, r2
 802b21a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802b21c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b220:	405a      	eors	r2, r3
 802b222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b224:	401a      	ands	r2, r3
 802b226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b228:	405a      	eors	r2, r3
 802b22a:	68fb      	ldr	r3, [r7, #12]
 802b22c:	441a      	add	r2, r3
 802b22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b230:	441a      	add	r2, r3
 802b232:	4b9c      	ldr	r3, [pc, #624]	; (802b4a4 <mbedtls_internal_md5_process+0x550>)
 802b234:	4413      	add	r3, r2
 802b236:	64bb      	str	r3, [r7, #72]	; 0x48
 802b238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b23a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b23e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b240:	4413      	add	r3, r2
 802b242:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802b244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b248:	405a      	eors	r2, r3
 802b24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b24c:	401a      	ands	r2, r3
 802b24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b250:	405a      	eors	r2, r3
 802b252:	693b      	ldr	r3, [r7, #16]
 802b254:	441a      	add	r2, r3
 802b256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b258:	441a      	add	r2, r3
 802b25a:	4b93      	ldr	r3, [pc, #588]	; (802b4a8 <mbedtls_internal_md5_process+0x554>)
 802b25c:	4413      	add	r3, r2
 802b25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b262:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b268:	4413      	add	r3, r2
 802b26a:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802b26c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b270:	405a      	eors	r2, r3
 802b272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b274:	401a      	ands	r2, r3
 802b276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b278:	405a      	eors	r2, r3
 802b27a:	697b      	ldr	r3, [r7, #20]
 802b27c:	441a      	add	r2, r3
 802b27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b280:	441a      	add	r2, r3
 802b282:	4b8a      	ldr	r3, [pc, #552]	; (802b4ac <mbedtls_internal_md5_process+0x558>)
 802b284:	4413      	add	r3, r2
 802b286:	653b      	str	r3, [r7, #80]	; 0x50
 802b288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b28a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b28e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b290:	4413      	add	r3, r2
 802b292:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802b294:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b298:	405a      	eors	r2, r3
 802b29a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b29c:	401a      	ands	r2, r3
 802b29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b2a0:	405a      	eors	r2, r3
 802b2a2:	69bb      	ldr	r3, [r7, #24]
 802b2a4:	441a      	add	r2, r3
 802b2a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b2a8:	441a      	add	r2, r3
 802b2aa:	4b81      	ldr	r3, [pc, #516]	; (802b4b0 <mbedtls_internal_md5_process+0x55c>)
 802b2ac:	4413      	add	r3, r2
 802b2ae:	657b      	str	r3, [r7, #84]	; 0x54
 802b2b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b2b2:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b2b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b2b8:	4413      	add	r3, r2
 802b2ba:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802b2bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b2c0:	405a      	eors	r2, r3
 802b2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b2c4:	401a      	ands	r2, r3
 802b2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b2c8:	405a      	eors	r2, r3
 802b2ca:	69fb      	ldr	r3, [r7, #28]
 802b2cc:	441a      	add	r2, r3
 802b2ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b2d0:	441a      	add	r2, r3
 802b2d2:	4b78      	ldr	r3, [pc, #480]	; (802b4b4 <mbedtls_internal_md5_process+0x560>)
 802b2d4:	4413      	add	r3, r2
 802b2d6:	64bb      	str	r3, [r7, #72]	; 0x48
 802b2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b2da:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b2de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b2e0:	4413      	add	r3, r2
 802b2e2:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802b2e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b2e8:	405a      	eors	r2, r3
 802b2ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b2ec:	401a      	ands	r2, r3
 802b2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b2f0:	405a      	eors	r2, r3
 802b2f2:	6a3b      	ldr	r3, [r7, #32]
 802b2f4:	441a      	add	r2, r3
 802b2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b2f8:	441a      	add	r2, r3
 802b2fa:	4b6f      	ldr	r3, [pc, #444]	; (802b4b8 <mbedtls_internal_md5_process+0x564>)
 802b2fc:	4413      	add	r3, r2
 802b2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b302:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b308:	4413      	add	r3, r2
 802b30a:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802b30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b310:	405a      	eors	r2, r3
 802b312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b314:	401a      	ands	r2, r3
 802b316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b318:	405a      	eors	r2, r3
 802b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b31c:	441a      	add	r2, r3
 802b31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b320:	441a      	add	r2, r3
 802b322:	4b66      	ldr	r3, [pc, #408]	; (802b4bc <mbedtls_internal_md5_process+0x568>)
 802b324:	4413      	add	r3, r2
 802b326:	653b      	str	r3, [r7, #80]	; 0x50
 802b328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b32a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b32e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b330:	4413      	add	r3, r2
 802b332:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802b334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b338:	405a      	eors	r2, r3
 802b33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b33c:	401a      	ands	r2, r3
 802b33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b340:	405a      	eors	r2, r3
 802b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b344:	441a      	add	r2, r3
 802b346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b348:	441a      	add	r2, r3
 802b34a:	4b5d      	ldr	r3, [pc, #372]	; (802b4c0 <mbedtls_internal_md5_process+0x56c>)
 802b34c:	4413      	add	r3, r2
 802b34e:	657b      	str	r3, [r7, #84]	; 0x54
 802b350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b352:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b358:	4413      	add	r3, r2
 802b35a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802b35c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b360:	405a      	eors	r2, r3
 802b362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b364:	401a      	ands	r2, r3
 802b366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b368:	405a      	eors	r2, r3
 802b36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b36c:	441a      	add	r2, r3
 802b36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b370:	441a      	add	r2, r3
 802b372:	4b54      	ldr	r3, [pc, #336]	; (802b4c4 <mbedtls_internal_md5_process+0x570>)
 802b374:	4413      	add	r3, r2
 802b376:	64bb      	str	r3, [r7, #72]	; 0x48
 802b378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b37a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b37e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b380:	4413      	add	r3, r2
 802b382:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802b384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b388:	405a      	eors	r2, r3
 802b38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b38c:	401a      	ands	r2, r3
 802b38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b390:	405a      	eors	r2, r3
 802b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b394:	441a      	add	r2, r3
 802b396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b398:	4413      	add	r3, r2
 802b39a:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 802b39e:	3b4f      	subs	r3, #79	; 0x4f
 802b3a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b3a4:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b3a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b3aa:	4413      	add	r3, r2
 802b3ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802b3ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b3b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b3b2:	405a      	eors	r2, r3
 802b3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b3b6:	401a      	ands	r2, r3
 802b3b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b3ba:	405a      	eors	r2, r3
 802b3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b3be:	441a      	add	r2, r3
 802b3c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b3c2:	441a      	add	r2, r3
 802b3c4:	4b40      	ldr	r3, [pc, #256]	; (802b4c8 <mbedtls_internal_md5_process+0x574>)
 802b3c6:	4413      	add	r3, r2
 802b3c8:	653b      	str	r3, [r7, #80]	; 0x50
 802b3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b3cc:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b3d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b3d2:	4413      	add	r3, r2
 802b3d4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802b3d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b3d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b3da:	405a      	eors	r2, r3
 802b3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b3de:	401a      	ands	r2, r3
 802b3e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b3e2:	405a      	eors	r2, r3
 802b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b3e6:	441a      	add	r2, r3
 802b3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b3ea:	441a      	add	r2, r3
 802b3ec:	4b37      	ldr	r3, [pc, #220]	; (802b4cc <mbedtls_internal_md5_process+0x578>)
 802b3ee:	4413      	add	r3, r2
 802b3f0:	657b      	str	r3, [r7, #84]	; 0x54
 802b3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b3f4:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b3f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b3fa:	4413      	add	r3, r2
 802b3fc:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802b3fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b402:	405a      	eors	r2, r3
 802b404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b406:	401a      	ands	r2, r3
 802b408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b40a:	405a      	eors	r2, r3
 802b40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b40e:	441a      	add	r2, r3
 802b410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b412:	441a      	add	r2, r3
 802b414:	4b2e      	ldr	r3, [pc, #184]	; (802b4d0 <mbedtls_internal_md5_process+0x57c>)
 802b416:	4413      	add	r3, r2
 802b418:	64bb      	str	r3, [r7, #72]	; 0x48
 802b41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b41c:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b420:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b422:	4413      	add	r3, r2
 802b424:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802b426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b42a:	405a      	eors	r2, r3
 802b42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b42e:	401a      	ands	r2, r3
 802b430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b432:	405a      	eors	r2, r3
 802b434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b436:	441a      	add	r2, r3
 802b438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b43a:	441a      	add	r2, r3
 802b43c:	4b25      	ldr	r3, [pc, #148]	; (802b4d4 <mbedtls_internal_md5_process+0x580>)
 802b43e:	4413      	add	r3, r2
 802b440:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b444:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b44a:	4413      	add	r3, r2
 802b44c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802b44e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b452:	405a      	eors	r2, r3
 802b454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b456:	401a      	ands	r2, r3
 802b458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b45a:	405a      	eors	r2, r3
 802b45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b45e:	441a      	add	r2, r3
 802b460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b462:	441a      	add	r2, r3
 802b464:	4b1c      	ldr	r3, [pc, #112]	; (802b4d8 <mbedtls_internal_md5_process+0x584>)
 802b466:	4413      	add	r3, r2
 802b468:	653b      	str	r3, [r7, #80]	; 0x50
 802b46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b46c:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b470:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b472:	4413      	add	r3, r2
 802b474:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802b476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b47a:	405a      	eors	r2, r3
 802b47c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b47e:	401a      	ands	r2, r3
 802b480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b482:	405a      	eors	r2, r3
 802b484:	68fb      	ldr	r3, [r7, #12]
 802b486:	441a      	add	r2, r3
 802b488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b48a:	441a      	add	r2, r3
 802b48c:	4b13      	ldr	r3, [pc, #76]	; (802b4dc <mbedtls_internal_md5_process+0x588>)
 802b48e:	4413      	add	r3, r2
 802b490:	657b      	str	r3, [r7, #84]	; 0x54
 802b492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b494:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b49a:	4413      	add	r3, r2
 802b49c:	e020      	b.n	802b4e0 <mbedtls_internal_md5_process+0x58c>
 802b49e:	bf00      	nop
 802b4a0:	d76aa478 	.word	0xd76aa478
 802b4a4:	e8c7b756 	.word	0xe8c7b756
 802b4a8:	242070db 	.word	0x242070db
 802b4ac:	c1bdceee 	.word	0xc1bdceee
 802b4b0:	f57c0faf 	.word	0xf57c0faf
 802b4b4:	4787c62a 	.word	0x4787c62a
 802b4b8:	a8304613 	.word	0xa8304613
 802b4bc:	fd469501 	.word	0xfd469501
 802b4c0:	698098d8 	.word	0x698098d8
 802b4c4:	8b44f7af 	.word	0x8b44f7af
 802b4c8:	895cd7be 	.word	0x895cd7be
 802b4cc:	6b901122 	.word	0x6b901122
 802b4d0:	fd987193 	.word	0xfd987193
 802b4d4:	a679438e 	.word	0xa679438e
 802b4d8:	49b40821 	.word	0x49b40821
 802b4dc:	f61e2562 	.word	0xf61e2562
 802b4e0:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802b4e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b4e6:	405a      	eors	r2, r3
 802b4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b4ea:	401a      	ands	r2, r3
 802b4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b4ee:	405a      	eors	r2, r3
 802b4f0:	6a3b      	ldr	r3, [r7, #32]
 802b4f2:	441a      	add	r2, r3
 802b4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b4f6:	441a      	add	r2, r3
 802b4f8:	4ba4      	ldr	r3, [pc, #656]	; (802b78c <mbedtls_internal_md5_process+0x838>)
 802b4fa:	4413      	add	r3, r2
 802b4fc:	64bb      	str	r3, [r7, #72]	; 0x48
 802b4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b500:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b506:	4413      	add	r3, r2
 802b508:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802b50a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b50e:	405a      	eors	r2, r3
 802b510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b512:	401a      	ands	r2, r3
 802b514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b516:	405a      	eors	r2, r3
 802b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b51a:	441a      	add	r2, r3
 802b51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b51e:	441a      	add	r2, r3
 802b520:	4b9b      	ldr	r3, [pc, #620]	; (802b790 <mbedtls_internal_md5_process+0x83c>)
 802b522:	4413      	add	r3, r2
 802b524:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b528:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b52c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b52e:	4413      	add	r3, r2
 802b530:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802b532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b536:	405a      	eors	r2, r3
 802b538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b53a:	401a      	ands	r2, r3
 802b53c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b53e:	405a      	eors	r2, r3
 802b540:	68bb      	ldr	r3, [r7, #8]
 802b542:	441a      	add	r2, r3
 802b544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b546:	441a      	add	r2, r3
 802b548:	4b92      	ldr	r3, [pc, #584]	; (802b794 <mbedtls_internal_md5_process+0x840>)
 802b54a:	4413      	add	r3, r2
 802b54c:	653b      	str	r3, [r7, #80]	; 0x50
 802b54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b550:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b556:	4413      	add	r3, r2
 802b558:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802b55a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b55e:	405a      	eors	r2, r3
 802b560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b562:	401a      	ands	r2, r3
 802b564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b566:	405a      	eors	r2, r3
 802b568:	69fb      	ldr	r3, [r7, #28]
 802b56a:	441a      	add	r2, r3
 802b56c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b56e:	441a      	add	r2, r3
 802b570:	4b89      	ldr	r3, [pc, #548]	; (802b798 <mbedtls_internal_md5_process+0x844>)
 802b572:	4413      	add	r3, r2
 802b574:	657b      	str	r3, [r7, #84]	; 0x54
 802b576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b578:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b57c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b57e:	4413      	add	r3, r2
 802b580:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802b582:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b586:	405a      	eors	r2, r3
 802b588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b58a:	401a      	ands	r2, r3
 802b58c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b58e:	405a      	eors	r2, r3
 802b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b592:	441a      	add	r2, r3
 802b594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b596:	441a      	add	r2, r3
 802b598:	4b80      	ldr	r3, [pc, #512]	; (802b79c <mbedtls_internal_md5_process+0x848>)
 802b59a:	4413      	add	r3, r2
 802b59c:	64bb      	str	r3, [r7, #72]	; 0x48
 802b59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5a0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b5a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b5a6:	4413      	add	r3, r2
 802b5a8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802b5aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b5ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5ae:	405a      	eors	r2, r3
 802b5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5b2:	401a      	ands	r2, r3
 802b5b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5b6:	405a      	eors	r2, r3
 802b5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b5ba:	441a      	add	r2, r3
 802b5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5be:	441a      	add	r2, r3
 802b5c0:	4b77      	ldr	r3, [pc, #476]	; (802b7a0 <mbedtls_internal_md5_process+0x84c>)
 802b5c2:	4413      	add	r3, r2
 802b5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5c8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b5cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b5ce:	4413      	add	r3, r2
 802b5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802b5d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b5d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5d6:	405a      	eors	r2, r3
 802b5d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5da:	401a      	ands	r2, r3
 802b5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5de:	405a      	eors	r2, r3
 802b5e0:	69bb      	ldr	r3, [r7, #24]
 802b5e2:	441a      	add	r2, r3
 802b5e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5e6:	441a      	add	r2, r3
 802b5e8:	4b6e      	ldr	r3, [pc, #440]	; (802b7a4 <mbedtls_internal_md5_process+0x850>)
 802b5ea:	4413      	add	r3, r2
 802b5ec:	653b      	str	r3, [r7, #80]	; 0x50
 802b5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5f0:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b5f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b5f6:	4413      	add	r3, r2
 802b5f8:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802b5fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5fe:	405a      	eors	r2, r3
 802b600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b602:	401a      	ands	r2, r3
 802b604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b606:	405a      	eors	r2, r3
 802b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b60a:	441a      	add	r2, r3
 802b60c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b60e:	441a      	add	r2, r3
 802b610:	4b65      	ldr	r3, [pc, #404]	; (802b7a8 <mbedtls_internal_md5_process+0x854>)
 802b612:	4413      	add	r3, r2
 802b614:	657b      	str	r3, [r7, #84]	; 0x54
 802b616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b618:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b61c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b61e:	4413      	add	r3, r2
 802b620:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802b622:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b626:	405a      	eors	r2, r3
 802b628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b62a:	401a      	ands	r2, r3
 802b62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b62e:	405a      	eors	r2, r3
 802b630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b632:	441a      	add	r2, r3
 802b634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b636:	441a      	add	r2, r3
 802b638:	4b5c      	ldr	r3, [pc, #368]	; (802b7ac <mbedtls_internal_md5_process+0x858>)
 802b63a:	4413      	add	r3, r2
 802b63c:	64bb      	str	r3, [r7, #72]	; 0x48
 802b63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b640:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b646:	4413      	add	r3, r2
 802b648:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802b64a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b64e:	405a      	eors	r2, r3
 802b650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b652:	401a      	ands	r2, r3
 802b654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b656:	405a      	eors	r2, r3
 802b658:	697b      	ldr	r3, [r7, #20]
 802b65a:	441a      	add	r2, r3
 802b65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b65e:	441a      	add	r2, r3
 802b660:	4b53      	ldr	r3, [pc, #332]	; (802b7b0 <mbedtls_internal_md5_process+0x85c>)
 802b662:	4413      	add	r3, r2
 802b664:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b668:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b66c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b66e:	4413      	add	r3, r2
 802b670:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802b672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b676:	405a      	eors	r2, r3
 802b678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b67a:	401a      	ands	r2, r3
 802b67c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b67e:	405a      	eors	r2, r3
 802b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b682:	441a      	add	r2, r3
 802b684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b686:	441a      	add	r2, r3
 802b688:	4b4a      	ldr	r3, [pc, #296]	; (802b7b4 <mbedtls_internal_md5_process+0x860>)
 802b68a:	4413      	add	r3, r2
 802b68c:	653b      	str	r3, [r7, #80]	; 0x50
 802b68e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b690:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b696:	4413      	add	r3, r2
 802b698:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802b69a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b69e:	405a      	eors	r2, r3
 802b6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6a2:	401a      	ands	r2, r3
 802b6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6a6:	405a      	eors	r2, r3
 802b6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b6aa:	441a      	add	r2, r3
 802b6ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6ae:	441a      	add	r2, r3
 802b6b0:	4b41      	ldr	r3, [pc, #260]	; (802b7b8 <mbedtls_internal_md5_process+0x864>)
 802b6b2:	4413      	add	r3, r2
 802b6b4:	657b      	str	r3, [r7, #84]	; 0x54
 802b6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6b8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b6bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b6be:	4413      	add	r3, r2
 802b6c0:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802b6c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b6c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6c6:	405a      	eors	r2, r3
 802b6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6ca:	401a      	ands	r2, r3
 802b6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6ce:	405a      	eors	r2, r3
 802b6d0:	693b      	ldr	r3, [r7, #16]
 802b6d2:	441a      	add	r2, r3
 802b6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6d6:	441a      	add	r2, r3
 802b6d8:	4b38      	ldr	r3, [pc, #224]	; (802b7bc <mbedtls_internal_md5_process+0x868>)
 802b6da:	4413      	add	r3, r2
 802b6dc:	64bb      	str	r3, [r7, #72]	; 0x48
 802b6de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6e0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b6e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b6e6:	4413      	add	r3, r2
 802b6e8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802b6ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6ee:	405a      	eors	r2, r3
 802b6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6f2:	401a      	ands	r2, r3
 802b6f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6f6:	405a      	eors	r2, r3
 802b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6fa:	441a      	add	r2, r3
 802b6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6fe:	441a      	add	r2, r3
 802b700:	4b2f      	ldr	r3, [pc, #188]	; (802b7c0 <mbedtls_internal_md5_process+0x86c>)
 802b702:	4413      	add	r3, r2
 802b704:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b708:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b70c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b70e:	4413      	add	r3, r2
 802b710:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802b712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b716:	405a      	eors	r2, r3
 802b718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b71a:	401a      	ands	r2, r3
 802b71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b71e:	405a      	eors	r2, r3
 802b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b722:	441a      	add	r2, r3
 802b724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b726:	441a      	add	r2, r3
 802b728:	4b26      	ldr	r3, [pc, #152]	; (802b7c4 <mbedtls_internal_md5_process+0x870>)
 802b72a:	4413      	add	r3, r2
 802b72c:	653b      	str	r3, [r7, #80]	; 0x50
 802b72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b730:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b736:	4413      	add	r3, r2
 802b738:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802b73a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b73e:	405a      	eors	r2, r3
 802b740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b742:	405a      	eors	r2, r3
 802b744:	69fb      	ldr	r3, [r7, #28]
 802b746:	441a      	add	r2, r3
 802b748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b74a:	4413      	add	r3, r2
 802b74c:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 802b750:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 802b754:	657b      	str	r3, [r7, #84]	; 0x54
 802b756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b758:	ea4f 7333 	mov.w	r3, r3, ror #28
 802b75c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b75e:	4413      	add	r3, r2
 802b760:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802b762:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b766:	405a      	eors	r2, r3
 802b768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b76a:	405a      	eors	r2, r3
 802b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b76e:	441a      	add	r2, r3
 802b770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b772:	441a      	add	r2, r3
 802b774:	4b14      	ldr	r3, [pc, #80]	; (802b7c8 <mbedtls_internal_md5_process+0x874>)
 802b776:	4413      	add	r3, r2
 802b778:	64bb      	str	r3, [r7, #72]	; 0x48
 802b77a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b77c:	ea4f 5373 	mov.w	r3, r3, ror #21
 802b780:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b782:	4413      	add	r3, r2
 802b784:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802b786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b788:	e020      	b.n	802b7cc <mbedtls_internal_md5_process+0x878>
 802b78a:	bf00      	nop
 802b78c:	c040b340 	.word	0xc040b340
 802b790:	265e5a51 	.word	0x265e5a51
 802b794:	e9b6c7aa 	.word	0xe9b6c7aa
 802b798:	d62f105d 	.word	0xd62f105d
 802b79c:	02441453 	.word	0x02441453
 802b7a0:	d8a1e681 	.word	0xd8a1e681
 802b7a4:	e7d3fbc8 	.word	0xe7d3fbc8
 802b7a8:	21e1cde6 	.word	0x21e1cde6
 802b7ac:	c33707d6 	.word	0xc33707d6
 802b7b0:	f4d50d87 	.word	0xf4d50d87
 802b7b4:	455a14ed 	.word	0x455a14ed
 802b7b8:	a9e3e905 	.word	0xa9e3e905
 802b7bc:	fcefa3f8 	.word	0xfcefa3f8
 802b7c0:	676f02d9 	.word	0x676f02d9
 802b7c4:	8d2a4c8a 	.word	0x8d2a4c8a
 802b7c8:	8771f681 	.word	0x8771f681
 802b7cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7ce:	405a      	eors	r2, r3
 802b7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7d2:	405a      	eors	r2, r3
 802b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b7d6:	441a      	add	r2, r3
 802b7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7da:	441a      	add	r2, r3
 802b7dc:	4ba4      	ldr	r3, [pc, #656]	; (802ba70 <mbedtls_internal_md5_process+0xb1c>)
 802b7de:	4413      	add	r3, r2
 802b7e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7e4:	ea4f 4333 	mov.w	r3, r3, ror #16
 802b7e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b7ea:	4413      	add	r3, r2
 802b7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802b7ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7f2:	405a      	eors	r2, r3
 802b7f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7f6:	405a      	eors	r2, r3
 802b7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b7fa:	441a      	add	r2, r3
 802b7fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7fe:	441a      	add	r2, r3
 802b800:	4b9c      	ldr	r3, [pc, #624]	; (802ba74 <mbedtls_internal_md5_process+0xb20>)
 802b802:	4413      	add	r3, r2
 802b804:	653b      	str	r3, [r7, #80]	; 0x50
 802b806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b808:	ea4f 2373 	mov.w	r3, r3, ror #9
 802b80c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b80e:	4413      	add	r3, r2
 802b810:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802b812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b816:	405a      	eors	r2, r3
 802b818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b81a:	405a      	eors	r2, r3
 802b81c:	68fb      	ldr	r3, [r7, #12]
 802b81e:	441a      	add	r2, r3
 802b820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b822:	441a      	add	r2, r3
 802b824:	4b94      	ldr	r3, [pc, #592]	; (802ba78 <mbedtls_internal_md5_process+0xb24>)
 802b826:	4413      	add	r3, r2
 802b828:	657b      	str	r3, [r7, #84]	; 0x54
 802b82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b82c:	ea4f 7333 	mov.w	r3, r3, ror #28
 802b830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b832:	4413      	add	r3, r2
 802b834:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802b836:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b83a:	405a      	eors	r2, r3
 802b83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b83e:	405a      	eors	r2, r3
 802b840:	69bb      	ldr	r3, [r7, #24]
 802b842:	441a      	add	r2, r3
 802b844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b846:	441a      	add	r2, r3
 802b848:	4b8c      	ldr	r3, [pc, #560]	; (802ba7c <mbedtls_internal_md5_process+0xb28>)
 802b84a:	4413      	add	r3, r2
 802b84c:	64bb      	str	r3, [r7, #72]	; 0x48
 802b84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b850:	ea4f 5373 	mov.w	r3, r3, ror #21
 802b854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b856:	4413      	add	r3, r2
 802b858:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802b85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b85e:	405a      	eors	r2, r3
 802b860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b862:	405a      	eors	r2, r3
 802b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b866:	441a      	add	r2, r3
 802b868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b86a:	441a      	add	r2, r3
 802b86c:	4b84      	ldr	r3, [pc, #528]	; (802ba80 <mbedtls_internal_md5_process+0xb2c>)
 802b86e:	4413      	add	r3, r2
 802b870:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b874:	ea4f 4333 	mov.w	r3, r3, ror #16
 802b878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b87a:	4413      	add	r3, r2
 802b87c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802b87e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b882:	405a      	eors	r2, r3
 802b884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b886:	405a      	eors	r2, r3
 802b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b88a:	441a      	add	r2, r3
 802b88c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b88e:	441a      	add	r2, r3
 802b890:	4b7c      	ldr	r3, [pc, #496]	; (802ba84 <mbedtls_internal_md5_process+0xb30>)
 802b892:	4413      	add	r3, r2
 802b894:	653b      	str	r3, [r7, #80]	; 0x50
 802b896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b898:	ea4f 2373 	mov.w	r3, r3, ror #9
 802b89c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b89e:	4413      	add	r3, r2
 802b8a0:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802b8a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8a6:	405a      	eors	r2, r3
 802b8a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8aa:	405a      	eors	r2, r3
 802b8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b8ae:	441a      	add	r2, r3
 802b8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8b2:	441a      	add	r2, r3
 802b8b4:	4b74      	ldr	r3, [pc, #464]	; (802ba88 <mbedtls_internal_md5_process+0xb34>)
 802b8b6:	4413      	add	r3, r2
 802b8b8:	657b      	str	r3, [r7, #84]	; 0x54
 802b8ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8bc:	ea4f 7333 	mov.w	r3, r3, ror #28
 802b8c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b8c2:	4413      	add	r3, r2
 802b8c4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802b8c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8ca:	405a      	eors	r2, r3
 802b8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8ce:	405a      	eors	r2, r3
 802b8d0:	68bb      	ldr	r3, [r7, #8]
 802b8d2:	441a      	add	r2, r3
 802b8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8d6:	441a      	add	r2, r3
 802b8d8:	4b6c      	ldr	r3, [pc, #432]	; (802ba8c <mbedtls_internal_md5_process+0xb38>)
 802b8da:	4413      	add	r3, r2
 802b8dc:	64bb      	str	r3, [r7, #72]	; 0x48
 802b8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8e0:	ea4f 5373 	mov.w	r3, r3, ror #21
 802b8e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b8e6:	4413      	add	r3, r2
 802b8e8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802b8ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b8ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8ee:	405a      	eors	r2, r3
 802b8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8f2:	405a      	eors	r2, r3
 802b8f4:	697b      	ldr	r3, [r7, #20]
 802b8f6:	441a      	add	r2, r3
 802b8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8fa:	441a      	add	r2, r3
 802b8fc:	4b64      	ldr	r3, [pc, #400]	; (802ba90 <mbedtls_internal_md5_process+0xb3c>)
 802b8fe:	4413      	add	r3, r2
 802b900:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b904:	ea4f 4333 	mov.w	r3, r3, ror #16
 802b908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b90a:	4413      	add	r3, r2
 802b90c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802b90e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b912:	405a      	eors	r2, r3
 802b914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b916:	405a      	eors	r2, r3
 802b918:	6a3b      	ldr	r3, [r7, #32]
 802b91a:	441a      	add	r2, r3
 802b91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b91e:	441a      	add	r2, r3
 802b920:	4b5c      	ldr	r3, [pc, #368]	; (802ba94 <mbedtls_internal_md5_process+0xb40>)
 802b922:	4413      	add	r3, r2
 802b924:	653b      	str	r3, [r7, #80]	; 0x50
 802b926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b928:	ea4f 2373 	mov.w	r3, r3, ror #9
 802b92c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b92e:	4413      	add	r3, r2
 802b930:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802b932:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b936:	405a      	eors	r2, r3
 802b938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b93a:	405a      	eors	r2, r3
 802b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b93e:	441a      	add	r2, r3
 802b940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b942:	441a      	add	r2, r3
 802b944:	4b54      	ldr	r3, [pc, #336]	; (802ba98 <mbedtls_internal_md5_process+0xb44>)
 802b946:	4413      	add	r3, r2
 802b948:	657b      	str	r3, [r7, #84]	; 0x54
 802b94a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b94c:	ea4f 7333 	mov.w	r3, r3, ror #28
 802b950:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b952:	4413      	add	r3, r2
 802b954:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802b956:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b95a:	405a      	eors	r2, r3
 802b95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b95e:	405a      	eors	r2, r3
 802b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b962:	441a      	add	r2, r3
 802b964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b966:	441a      	add	r2, r3
 802b968:	4b4c      	ldr	r3, [pc, #304]	; (802ba9c <mbedtls_internal_md5_process+0xb48>)
 802b96a:	4413      	add	r3, r2
 802b96c:	64bb      	str	r3, [r7, #72]	; 0x48
 802b96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b970:	ea4f 5373 	mov.w	r3, r3, ror #21
 802b974:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b976:	4413      	add	r3, r2
 802b978:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802b97a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b97e:	405a      	eors	r2, r3
 802b980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b982:	405a      	eors	r2, r3
 802b984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b986:	441a      	add	r2, r3
 802b988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b98a:	441a      	add	r2, r3
 802b98c:	4b44      	ldr	r3, [pc, #272]	; (802baa0 <mbedtls_internal_md5_process+0xb4c>)
 802b98e:	4413      	add	r3, r2
 802b990:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b994:	ea4f 4333 	mov.w	r3, r3, ror #16
 802b998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b99a:	4413      	add	r3, r2
 802b99c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802b99e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9a2:	405a      	eors	r2, r3
 802b9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9a6:	405a      	eors	r2, r3
 802b9a8:	693b      	ldr	r3, [r7, #16]
 802b9aa:	441a      	add	r2, r3
 802b9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9ae:	441a      	add	r2, r3
 802b9b0:	4b3c      	ldr	r3, [pc, #240]	; (802baa4 <mbedtls_internal_md5_process+0xb50>)
 802b9b2:	4413      	add	r3, r2
 802b9b4:	653b      	str	r3, [r7, #80]	; 0x50
 802b9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9b8:	ea4f 2373 	mov.w	r3, r3, ror #9
 802b9bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9be:	4413      	add	r3, r2
 802b9c0:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802b9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9c4:	43da      	mvns	r2, r3
 802b9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9c8:	431a      	orrs	r2, r3
 802b9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9cc:	405a      	eors	r2, r3
 802b9ce:	68bb      	ldr	r3, [r7, #8]
 802b9d0:	441a      	add	r2, r3
 802b9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9d4:	441a      	add	r2, r3
 802b9d6:	4b34      	ldr	r3, [pc, #208]	; (802baa8 <mbedtls_internal_md5_process+0xb54>)
 802b9d8:	4413      	add	r3, r2
 802b9da:	657b      	str	r3, [r7, #84]	; 0x54
 802b9dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9de:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802b9e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9e4:	4413      	add	r3, r2
 802b9e6:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802b9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9ea:	43da      	mvns	r2, r3
 802b9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9ee:	431a      	orrs	r2, r3
 802b9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9f2:	405a      	eors	r2, r3
 802b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b9f6:	441a      	add	r2, r3
 802b9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9fa:	441a      	add	r2, r3
 802b9fc:	4b2b      	ldr	r3, [pc, #172]	; (802baac <mbedtls_internal_md5_process+0xb58>)
 802b9fe:	4413      	add	r3, r2
 802ba00:	64bb      	str	r3, [r7, #72]	; 0x48
 802ba02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba04:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802ba08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba0a:	4413      	add	r3, r2
 802ba0c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802ba0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba10:	43da      	mvns	r2, r3
 802ba12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba14:	431a      	orrs	r2, r3
 802ba16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba18:	405a      	eors	r2, r3
 802ba1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ba1c:	441a      	add	r2, r3
 802ba1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba20:	441a      	add	r2, r3
 802ba22:	4b23      	ldr	r3, [pc, #140]	; (802bab0 <mbedtls_internal_md5_process+0xb5c>)
 802ba24:	4413      	add	r3, r2
 802ba26:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ba28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba2a:	ea4f 4373 	mov.w	r3, r3, ror #17
 802ba2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba30:	4413      	add	r3, r2
 802ba32:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802ba34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba36:	43da      	mvns	r2, r3
 802ba38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba3a:	431a      	orrs	r2, r3
 802ba3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba3e:	405a      	eors	r2, r3
 802ba40:	69fb      	ldr	r3, [r7, #28]
 802ba42:	441a      	add	r2, r3
 802ba44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba46:	441a      	add	r2, r3
 802ba48:	4b1a      	ldr	r3, [pc, #104]	; (802bab4 <mbedtls_internal_md5_process+0xb60>)
 802ba4a:	4413      	add	r3, r2
 802ba4c:	653b      	str	r3, [r7, #80]	; 0x50
 802ba4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba50:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802ba54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba56:	4413      	add	r3, r2
 802ba58:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802ba5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba5c:	43da      	mvns	r2, r3
 802ba5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba60:	431a      	orrs	r2, r3
 802ba62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba64:	405a      	eors	r2, r3
 802ba66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ba68:	441a      	add	r2, r3
 802ba6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba6c:	e024      	b.n	802bab8 <mbedtls_internal_md5_process+0xb64>
 802ba6e:	bf00      	nop
 802ba70:	6d9d6122 	.word	0x6d9d6122
 802ba74:	fde5380c 	.word	0xfde5380c
 802ba78:	a4beea44 	.word	0xa4beea44
 802ba7c:	4bdecfa9 	.word	0x4bdecfa9
 802ba80:	f6bb4b60 	.word	0xf6bb4b60
 802ba84:	bebfbc70 	.word	0xbebfbc70
 802ba88:	289b7ec6 	.word	0x289b7ec6
 802ba8c:	eaa127fa 	.word	0xeaa127fa
 802ba90:	d4ef3085 	.word	0xd4ef3085
 802ba94:	04881d05 	.word	0x04881d05
 802ba98:	d9d4d039 	.word	0xd9d4d039
 802ba9c:	e6db99e5 	.word	0xe6db99e5
 802baa0:	1fa27cf8 	.word	0x1fa27cf8
 802baa4:	c4ac5665 	.word	0xc4ac5665
 802baa8:	f4292244 	.word	0xf4292244
 802baac:	432aff97 	.word	0x432aff97
 802bab0:	ab9423a7 	.word	0xab9423a7
 802bab4:	fc93a039 	.word	0xfc93a039
 802bab8:	441a      	add	r2, r3
 802baba:	4b7d      	ldr	r3, [pc, #500]	; (802bcb0 <mbedtls_internal_md5_process+0xd5c>)
 802babc:	4413      	add	r3, r2
 802babe:	657b      	str	r3, [r7, #84]	; 0x54
 802bac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bac2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bac8:	4413      	add	r3, r2
 802baca:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802bacc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bace:	43da      	mvns	r2, r3
 802bad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bad2:	431a      	orrs	r2, r3
 802bad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bad6:	405a      	eors	r2, r3
 802bad8:	697b      	ldr	r3, [r7, #20]
 802bada:	441a      	add	r2, r3
 802badc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bade:	441a      	add	r2, r3
 802bae0:	4b74      	ldr	r3, [pc, #464]	; (802bcb4 <mbedtls_internal_md5_process+0xd60>)
 802bae2:	4413      	add	r3, r2
 802bae4:	64bb      	str	r3, [r7, #72]	; 0x48
 802bae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bae8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802baec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802baee:	4413      	add	r3, r2
 802baf0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802baf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baf4:	43da      	mvns	r2, r3
 802baf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baf8:	431a      	orrs	r2, r3
 802bafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bafc:	405a      	eors	r2, r3
 802bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bb00:	441a      	add	r2, r3
 802bb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb04:	4413      	add	r3, r2
 802bb06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802bb0a:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 802bb0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb12:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bb16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb18:	4413      	add	r3, r2
 802bb1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802bb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb1e:	43da      	mvns	r2, r3
 802bb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb22:	431a      	orrs	r2, r3
 802bb24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb26:	405a      	eors	r2, r3
 802bb28:	68fb      	ldr	r3, [r7, #12]
 802bb2a:	441a      	add	r2, r3
 802bb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb2e:	441a      	add	r2, r3
 802bb30:	4b61      	ldr	r3, [pc, #388]	; (802bcb8 <mbedtls_internal_md5_process+0xd64>)
 802bb32:	4413      	add	r3, r2
 802bb34:	653b      	str	r3, [r7, #80]	; 0x50
 802bb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb38:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bb3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb3e:	4413      	add	r3, r2
 802bb40:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802bb42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb44:	43da      	mvns	r2, r3
 802bb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb48:	431a      	orrs	r2, r3
 802bb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb4c:	405a      	eors	r2, r3
 802bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bb50:	441a      	add	r2, r3
 802bb52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb54:	441a      	add	r2, r3
 802bb56:	4b59      	ldr	r3, [pc, #356]	; (802bcbc <mbedtls_internal_md5_process+0xd68>)
 802bb58:	4413      	add	r3, r2
 802bb5a:	657b      	str	r3, [r7, #84]	; 0x54
 802bb5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb5e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bb62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb64:	4413      	add	r3, r2
 802bb66:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802bb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb6a:	43da      	mvns	r2, r3
 802bb6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb6e:	431a      	orrs	r2, r3
 802bb70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb72:	405a      	eors	r2, r3
 802bb74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bb76:	441a      	add	r2, r3
 802bb78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb7a:	441a      	add	r2, r3
 802bb7c:	4b50      	ldr	r3, [pc, #320]	; (802bcc0 <mbedtls_internal_md5_process+0xd6c>)
 802bb7e:	4413      	add	r3, r2
 802bb80:	64bb      	str	r3, [r7, #72]	; 0x48
 802bb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb84:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bb88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb8a:	4413      	add	r3, r2
 802bb8c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802bb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb90:	43da      	mvns	r2, r3
 802bb92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb94:	431a      	orrs	r2, r3
 802bb96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb98:	405a      	eors	r2, r3
 802bb9a:	6a3b      	ldr	r3, [r7, #32]
 802bb9c:	441a      	add	r2, r3
 802bb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bba0:	441a      	add	r2, r3
 802bba2:	4b48      	ldr	r3, [pc, #288]	; (802bcc4 <mbedtls_internal_md5_process+0xd70>)
 802bba4:	4413      	add	r3, r2
 802bba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbaa:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bbae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbb0:	4413      	add	r3, r2
 802bbb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802bbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbb6:	43da      	mvns	r2, r3
 802bbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbba:	431a      	orrs	r2, r3
 802bbbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbbe:	405a      	eors	r2, r3
 802bbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bbc2:	441a      	add	r2, r3
 802bbc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbc6:	441a      	add	r2, r3
 802bbc8:	4b3f      	ldr	r3, [pc, #252]	; (802bcc8 <mbedtls_internal_md5_process+0xd74>)
 802bbca:	4413      	add	r3, r2
 802bbcc:	653b      	str	r3, [r7, #80]	; 0x50
 802bbce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbd0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bbd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bbd6:	4413      	add	r3, r2
 802bbd8:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802bbda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbdc:	43da      	mvns	r2, r3
 802bbde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbe0:	431a      	orrs	r2, r3
 802bbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbe4:	405a      	eors	r2, r3
 802bbe6:	69bb      	ldr	r3, [r7, #24]
 802bbe8:	441a      	add	r2, r3
 802bbea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbec:	441a      	add	r2, r3
 802bbee:	4b37      	ldr	r3, [pc, #220]	; (802bccc <mbedtls_internal_md5_process+0xd78>)
 802bbf0:	4413      	add	r3, r2
 802bbf2:	657b      	str	r3, [r7, #84]	; 0x54
 802bbf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbf6:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bbfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbfc:	4413      	add	r3, r2
 802bbfe:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802bc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc02:	43da      	mvns	r2, r3
 802bc04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc06:	431a      	orrs	r2, r3
 802bc08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc0a:	405a      	eors	r2, r3
 802bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bc0e:	441a      	add	r2, r3
 802bc10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc12:	441a      	add	r2, r3
 802bc14:	4b2e      	ldr	r3, [pc, #184]	; (802bcd0 <mbedtls_internal_md5_process+0xd7c>)
 802bc16:	4413      	add	r3, r2
 802bc18:	64bb      	str	r3, [r7, #72]	; 0x48
 802bc1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc1c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bc20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc22:	4413      	add	r3, r2
 802bc24:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802bc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc28:	43da      	mvns	r2, r3
 802bc2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc2c:	431a      	orrs	r2, r3
 802bc2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc30:	405a      	eors	r2, r3
 802bc32:	693b      	ldr	r3, [r7, #16]
 802bc34:	441a      	add	r2, r3
 802bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc38:	441a      	add	r2, r3
 802bc3a:	4b26      	ldr	r3, [pc, #152]	; (802bcd4 <mbedtls_internal_md5_process+0xd80>)
 802bc3c:	4413      	add	r3, r2
 802bc3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc42:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bc46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc48:	4413      	add	r3, r2
 802bc4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802bc4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc4e:	43da      	mvns	r2, r3
 802bc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc52:	431a      	orrs	r2, r3
 802bc54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc56:	405a      	eors	r2, r3
 802bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bc5a:	441a      	add	r2, r3
 802bc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc5e:	441a      	add	r2, r3
 802bc60:	4b1d      	ldr	r3, [pc, #116]	; (802bcd8 <mbedtls_internal_md5_process+0xd84>)
 802bc62:	4413      	add	r3, r2
 802bc64:	653b      	str	r3, [r7, #80]	; 0x50
 802bc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc68:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bc6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc6e:	4413      	add	r3, r2
 802bc70:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 802bc72:	687b      	ldr	r3, [r7, #4]
 802bc74:	689a      	ldr	r2, [r3, #8]
 802bc76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc78:	441a      	add	r2, r3
 802bc7a:	687b      	ldr	r3, [r7, #4]
 802bc7c:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802bc7e:	687b      	ldr	r3, [r7, #4]
 802bc80:	68da      	ldr	r2, [r3, #12]
 802bc82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc84:	441a      	add	r2, r3
 802bc86:	687b      	ldr	r3, [r7, #4]
 802bc88:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802bc8a:	687b      	ldr	r3, [r7, #4]
 802bc8c:	691a      	ldr	r2, [r3, #16]
 802bc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc90:	441a      	add	r2, r3
 802bc92:	687b      	ldr	r3, [r7, #4]
 802bc94:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802bc96:	687b      	ldr	r3, [r7, #4]
 802bc98:	695a      	ldr	r2, [r3, #20]
 802bc9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc9c:	441a      	add	r2, r3
 802bc9e:	687b      	ldr	r3, [r7, #4]
 802bca0:	615a      	str	r2, [r3, #20]

    return( 0 );
 802bca2:	2300      	movs	r3, #0
}
 802bca4:	4618      	mov	r0, r3
 802bca6:	375c      	adds	r7, #92	; 0x5c
 802bca8:	46bd      	mov	sp, r7
 802bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcae:	4770      	bx	lr
 802bcb0:	655b59c3 	.word	0x655b59c3
 802bcb4:	8f0ccc92 	.word	0x8f0ccc92
 802bcb8:	85845dd1 	.word	0x85845dd1
 802bcbc:	6fa87e4f 	.word	0x6fa87e4f
 802bcc0:	fe2ce6e0 	.word	0xfe2ce6e0
 802bcc4:	a3014314 	.word	0xa3014314
 802bcc8:	4e0811a1 	.word	0x4e0811a1
 802bccc:	f7537e82 	.word	0xf7537e82
 802bcd0:	bd3af235 	.word	0xbd3af235
 802bcd4:	2ad7d2bb 	.word	0x2ad7d2bb
 802bcd8:	eb86d391 	.word	0xeb86d391

0802bcdc <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802bcdc:	b580      	push	{r7, lr}
 802bcde:	b088      	sub	sp, #32
 802bce0:	af00      	add	r7, sp, #0
 802bce2:	60f8      	str	r0, [r7, #12]
 802bce4:	60b9      	str	r1, [r7, #8]
 802bce6:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802bce8:	687b      	ldr	r3, [r7, #4]
 802bcea:	2b00      	cmp	r3, #0
 802bcec:	d101      	bne.n	802bcf2 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802bcee:	2300      	movs	r3, #0
 802bcf0:	e065      	b.n	802bdbe <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802bcf2:	68fb      	ldr	r3, [r7, #12]
 802bcf4:	681b      	ldr	r3, [r3, #0]
 802bcf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802bcfa:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802bcfc:	69fb      	ldr	r3, [r7, #28]
 802bcfe:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802bd02:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802bd04:	68fb      	ldr	r3, [r7, #12]
 802bd06:	681a      	ldr	r2, [r3, #0]
 802bd08:	687b      	ldr	r3, [r7, #4]
 802bd0a:	441a      	add	r2, r3
 802bd0c:	68fb      	ldr	r3, [r7, #12]
 802bd0e:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802bd10:	68fb      	ldr	r3, [r7, #12]
 802bd12:	681a      	ldr	r2, [r3, #0]
 802bd14:	68fb      	ldr	r3, [r7, #12]
 802bd16:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802bd18:	68fb      	ldr	r3, [r7, #12]
 802bd1a:	681b      	ldr	r3, [r3, #0]
 802bd1c:	687a      	ldr	r2, [r7, #4]
 802bd1e:	429a      	cmp	r2, r3
 802bd20:	d904      	bls.n	802bd2c <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802bd22:	68fb      	ldr	r3, [r7, #12]
 802bd24:	685b      	ldr	r3, [r3, #4]
 802bd26:	1c5a      	adds	r2, r3, #1
 802bd28:	68fb      	ldr	r3, [r7, #12]
 802bd2a:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802bd2c:	69fb      	ldr	r3, [r7, #28]
 802bd2e:	2b00      	cmp	r3, #0
 802bd30:	d034      	beq.n	802bd9c <mbedtls_md5_update_ret+0xc0>
 802bd32:	687a      	ldr	r2, [r7, #4]
 802bd34:	69bb      	ldr	r3, [r7, #24]
 802bd36:	429a      	cmp	r2, r3
 802bd38:	d330      	bcc.n	802bd9c <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802bd3a:	68fb      	ldr	r3, [r7, #12]
 802bd3c:	f103 0218 	add.w	r2, r3, #24
 802bd40:	69fb      	ldr	r3, [r7, #28]
 802bd42:	4413      	add	r3, r2
 802bd44:	69ba      	ldr	r2, [r7, #24]
 802bd46:	68b9      	ldr	r1, [r7, #8]
 802bd48:	4618      	mov	r0, r3
 802bd4a:	f001 fcea 	bl	802d722 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802bd4e:	68fb      	ldr	r3, [r7, #12]
 802bd50:	3318      	adds	r3, #24
 802bd52:	4619      	mov	r1, r3
 802bd54:	68f8      	ldr	r0, [r7, #12]
 802bd56:	f7ff f8fd 	bl	802af54 <mbedtls_internal_md5_process>
 802bd5a:	6178      	str	r0, [r7, #20]
 802bd5c:	697b      	ldr	r3, [r7, #20]
 802bd5e:	2b00      	cmp	r3, #0
 802bd60:	d001      	beq.n	802bd66 <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802bd62:	697b      	ldr	r3, [r7, #20]
 802bd64:	e02b      	b.n	802bdbe <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802bd66:	68ba      	ldr	r2, [r7, #8]
 802bd68:	69bb      	ldr	r3, [r7, #24]
 802bd6a:	4413      	add	r3, r2
 802bd6c:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802bd6e:	687a      	ldr	r2, [r7, #4]
 802bd70:	69bb      	ldr	r3, [r7, #24]
 802bd72:	1ad3      	subs	r3, r2, r3
 802bd74:	607b      	str	r3, [r7, #4]
        left = 0;
 802bd76:	2300      	movs	r3, #0
 802bd78:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802bd7a:	e00f      	b.n	802bd9c <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802bd7c:	68b9      	ldr	r1, [r7, #8]
 802bd7e:	68f8      	ldr	r0, [r7, #12]
 802bd80:	f7ff f8e8 	bl	802af54 <mbedtls_internal_md5_process>
 802bd84:	6178      	str	r0, [r7, #20]
 802bd86:	697b      	ldr	r3, [r7, #20]
 802bd88:	2b00      	cmp	r3, #0
 802bd8a:	d001      	beq.n	802bd90 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802bd8c:	697b      	ldr	r3, [r7, #20]
 802bd8e:	e016      	b.n	802bdbe <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802bd90:	68bb      	ldr	r3, [r7, #8]
 802bd92:	3340      	adds	r3, #64	; 0x40
 802bd94:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802bd96:	687b      	ldr	r3, [r7, #4]
 802bd98:	3b40      	subs	r3, #64	; 0x40
 802bd9a:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802bd9c:	687b      	ldr	r3, [r7, #4]
 802bd9e:	2b3f      	cmp	r3, #63	; 0x3f
 802bda0:	d8ec      	bhi.n	802bd7c <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802bda2:	687b      	ldr	r3, [r7, #4]
 802bda4:	2b00      	cmp	r3, #0
 802bda6:	d009      	beq.n	802bdbc <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802bda8:	68fb      	ldr	r3, [r7, #12]
 802bdaa:	f103 0218 	add.w	r2, r3, #24
 802bdae:	69fb      	ldr	r3, [r7, #28]
 802bdb0:	4413      	add	r3, r2
 802bdb2:	687a      	ldr	r2, [r7, #4]
 802bdb4:	68b9      	ldr	r1, [r7, #8]
 802bdb6:	4618      	mov	r0, r3
 802bdb8:	f001 fcb3 	bl	802d722 <memcpy>
    }

    return( 0 );
 802bdbc:	2300      	movs	r3, #0
}
 802bdbe:	4618      	mov	r0, r3
 802bdc0:	3720      	adds	r7, #32
 802bdc2:	46bd      	mov	sp, r7
 802bdc4:	bd80      	pop	{r7, pc}

0802bdc6 <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802bdc6:	b580      	push	{r7, lr}
 802bdc8:	b086      	sub	sp, #24
 802bdca:	af00      	add	r7, sp, #0
 802bdcc:	6078      	str	r0, [r7, #4]
 802bdce:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802bdd0:	687b      	ldr	r3, [r7, #4]
 802bdd2:	681b      	ldr	r3, [r3, #0]
 802bdd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802bdd8:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802bdda:	697b      	ldr	r3, [r7, #20]
 802bddc:	1c5a      	adds	r2, r3, #1
 802bdde:	617a      	str	r2, [r7, #20]
 802bde0:	687a      	ldr	r2, [r7, #4]
 802bde2:	4413      	add	r3, r2
 802bde4:	2280      	movs	r2, #128	; 0x80
 802bde6:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802bde8:	697b      	ldr	r3, [r7, #20]
 802bdea:	2b38      	cmp	r3, #56	; 0x38
 802bdec:	d80c      	bhi.n	802be08 <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802bdee:	687b      	ldr	r3, [r7, #4]
 802bdf0:	f103 0218 	add.w	r2, r3, #24
 802bdf4:	697b      	ldr	r3, [r7, #20]
 802bdf6:	18d0      	adds	r0, r2, r3
 802bdf8:	697b      	ldr	r3, [r7, #20]
 802bdfa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802bdfe:	461a      	mov	r2, r3
 802be00:	2100      	movs	r1, #0
 802be02:	f001 fab9 	bl	802d378 <memset>
 802be06:	e01e      	b.n	802be46 <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802be08:	687b      	ldr	r3, [r7, #4]
 802be0a:	f103 0218 	add.w	r2, r3, #24
 802be0e:	697b      	ldr	r3, [r7, #20]
 802be10:	18d0      	adds	r0, r2, r3
 802be12:	697b      	ldr	r3, [r7, #20]
 802be14:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802be18:	461a      	mov	r2, r3
 802be1a:	2100      	movs	r1, #0
 802be1c:	f001 faac 	bl	802d378 <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802be20:	687b      	ldr	r3, [r7, #4]
 802be22:	3318      	adds	r3, #24
 802be24:	4619      	mov	r1, r3
 802be26:	6878      	ldr	r0, [r7, #4]
 802be28:	f7ff f894 	bl	802af54 <mbedtls_internal_md5_process>
 802be2c:	6138      	str	r0, [r7, #16]
 802be2e:	693b      	ldr	r3, [r7, #16]
 802be30:	2b00      	cmp	r3, #0
 802be32:	d001      	beq.n	802be38 <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802be34:	693b      	ldr	r3, [r7, #16]
 802be36:	e0b8      	b.n	802bfaa <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802be38:	687b      	ldr	r3, [r7, #4]
 802be3a:	3318      	adds	r3, #24
 802be3c:	2238      	movs	r2, #56	; 0x38
 802be3e:	2100      	movs	r1, #0
 802be40:	4618      	mov	r0, r3
 802be42:	f001 fa99 	bl	802d378 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802be46:	687b      	ldr	r3, [r7, #4]
 802be48:	681b      	ldr	r3, [r3, #0]
 802be4a:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802be4c:	687b      	ldr	r3, [r7, #4]
 802be4e:	685b      	ldr	r3, [r3, #4]
 802be50:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802be52:	4313      	orrs	r3, r2
 802be54:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802be56:	687b      	ldr	r3, [r7, #4]
 802be58:	681b      	ldr	r3, [r3, #0]
 802be5a:	00db      	lsls	r3, r3, #3
 802be5c:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802be5e:	68bb      	ldr	r3, [r7, #8]
 802be60:	b2da      	uxtb	r2, r3
 802be62:	687b      	ldr	r3, [r7, #4]
 802be64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802be68:	68bb      	ldr	r3, [r7, #8]
 802be6a:	0a1b      	lsrs	r3, r3, #8
 802be6c:	b2da      	uxtb	r2, r3
 802be6e:	687b      	ldr	r3, [r7, #4]
 802be70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 802be74:	68bb      	ldr	r3, [r7, #8]
 802be76:	0c1b      	lsrs	r3, r3, #16
 802be78:	b2da      	uxtb	r2, r3
 802be7a:	687b      	ldr	r3, [r7, #4]
 802be7c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 802be80:	68bb      	ldr	r3, [r7, #8]
 802be82:	0e1b      	lsrs	r3, r3, #24
 802be84:	b2da      	uxtb	r2, r3
 802be86:	687b      	ldr	r3, [r7, #4]
 802be88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802be8c:	68fb      	ldr	r3, [r7, #12]
 802be8e:	b2da      	uxtb	r2, r3
 802be90:	687b      	ldr	r3, [r7, #4]
 802be92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 802be96:	68fb      	ldr	r3, [r7, #12]
 802be98:	0a1b      	lsrs	r3, r3, #8
 802be9a:	b2da      	uxtb	r2, r3
 802be9c:	687b      	ldr	r3, [r7, #4]
 802be9e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 802bea2:	68fb      	ldr	r3, [r7, #12]
 802bea4:	0c1b      	lsrs	r3, r3, #16
 802bea6:	b2da      	uxtb	r2, r3
 802bea8:	687b      	ldr	r3, [r7, #4]
 802beaa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 802beae:	68fb      	ldr	r3, [r7, #12]
 802beb0:	0e1b      	lsrs	r3, r3, #24
 802beb2:	b2da      	uxtb	r2, r3
 802beb4:	687b      	ldr	r3, [r7, #4]
 802beb6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802beba:	687b      	ldr	r3, [r7, #4]
 802bebc:	3318      	adds	r3, #24
 802bebe:	4619      	mov	r1, r3
 802bec0:	6878      	ldr	r0, [r7, #4]
 802bec2:	f7ff f847 	bl	802af54 <mbedtls_internal_md5_process>
 802bec6:	6138      	str	r0, [r7, #16]
 802bec8:	693b      	ldr	r3, [r7, #16]
 802beca:	2b00      	cmp	r3, #0
 802becc:	d001      	beq.n	802bed2 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802bece:	693b      	ldr	r3, [r7, #16]
 802bed0:	e06b      	b.n	802bfaa <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802bed2:	687b      	ldr	r3, [r7, #4]
 802bed4:	689b      	ldr	r3, [r3, #8]
 802bed6:	b2da      	uxtb	r2, r3
 802bed8:	683b      	ldr	r3, [r7, #0]
 802beda:	701a      	strb	r2, [r3, #0]
 802bedc:	687b      	ldr	r3, [r7, #4]
 802bede:	689b      	ldr	r3, [r3, #8]
 802bee0:	0a1a      	lsrs	r2, r3, #8
 802bee2:	683b      	ldr	r3, [r7, #0]
 802bee4:	3301      	adds	r3, #1
 802bee6:	b2d2      	uxtb	r2, r2
 802bee8:	701a      	strb	r2, [r3, #0]
 802beea:	687b      	ldr	r3, [r7, #4]
 802beec:	689b      	ldr	r3, [r3, #8]
 802beee:	0c1a      	lsrs	r2, r3, #16
 802bef0:	683b      	ldr	r3, [r7, #0]
 802bef2:	3302      	adds	r3, #2
 802bef4:	b2d2      	uxtb	r2, r2
 802bef6:	701a      	strb	r2, [r3, #0]
 802bef8:	687b      	ldr	r3, [r7, #4]
 802befa:	689b      	ldr	r3, [r3, #8]
 802befc:	0e1a      	lsrs	r2, r3, #24
 802befe:	683b      	ldr	r3, [r7, #0]
 802bf00:	3303      	adds	r3, #3
 802bf02:	b2d2      	uxtb	r2, r2
 802bf04:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802bf06:	687b      	ldr	r3, [r7, #4]
 802bf08:	68da      	ldr	r2, [r3, #12]
 802bf0a:	683b      	ldr	r3, [r7, #0]
 802bf0c:	3304      	adds	r3, #4
 802bf0e:	b2d2      	uxtb	r2, r2
 802bf10:	701a      	strb	r2, [r3, #0]
 802bf12:	687b      	ldr	r3, [r7, #4]
 802bf14:	68db      	ldr	r3, [r3, #12]
 802bf16:	0a1a      	lsrs	r2, r3, #8
 802bf18:	683b      	ldr	r3, [r7, #0]
 802bf1a:	3305      	adds	r3, #5
 802bf1c:	b2d2      	uxtb	r2, r2
 802bf1e:	701a      	strb	r2, [r3, #0]
 802bf20:	687b      	ldr	r3, [r7, #4]
 802bf22:	68db      	ldr	r3, [r3, #12]
 802bf24:	0c1a      	lsrs	r2, r3, #16
 802bf26:	683b      	ldr	r3, [r7, #0]
 802bf28:	3306      	adds	r3, #6
 802bf2a:	b2d2      	uxtb	r2, r2
 802bf2c:	701a      	strb	r2, [r3, #0]
 802bf2e:	687b      	ldr	r3, [r7, #4]
 802bf30:	68db      	ldr	r3, [r3, #12]
 802bf32:	0e1a      	lsrs	r2, r3, #24
 802bf34:	683b      	ldr	r3, [r7, #0]
 802bf36:	3307      	adds	r3, #7
 802bf38:	b2d2      	uxtb	r2, r2
 802bf3a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802bf3c:	687b      	ldr	r3, [r7, #4]
 802bf3e:	691a      	ldr	r2, [r3, #16]
 802bf40:	683b      	ldr	r3, [r7, #0]
 802bf42:	3308      	adds	r3, #8
 802bf44:	b2d2      	uxtb	r2, r2
 802bf46:	701a      	strb	r2, [r3, #0]
 802bf48:	687b      	ldr	r3, [r7, #4]
 802bf4a:	691b      	ldr	r3, [r3, #16]
 802bf4c:	0a1a      	lsrs	r2, r3, #8
 802bf4e:	683b      	ldr	r3, [r7, #0]
 802bf50:	3309      	adds	r3, #9
 802bf52:	b2d2      	uxtb	r2, r2
 802bf54:	701a      	strb	r2, [r3, #0]
 802bf56:	687b      	ldr	r3, [r7, #4]
 802bf58:	691b      	ldr	r3, [r3, #16]
 802bf5a:	0c1a      	lsrs	r2, r3, #16
 802bf5c:	683b      	ldr	r3, [r7, #0]
 802bf5e:	330a      	adds	r3, #10
 802bf60:	b2d2      	uxtb	r2, r2
 802bf62:	701a      	strb	r2, [r3, #0]
 802bf64:	687b      	ldr	r3, [r7, #4]
 802bf66:	691b      	ldr	r3, [r3, #16]
 802bf68:	0e1a      	lsrs	r2, r3, #24
 802bf6a:	683b      	ldr	r3, [r7, #0]
 802bf6c:	330b      	adds	r3, #11
 802bf6e:	b2d2      	uxtb	r2, r2
 802bf70:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802bf72:	687b      	ldr	r3, [r7, #4]
 802bf74:	695a      	ldr	r2, [r3, #20]
 802bf76:	683b      	ldr	r3, [r7, #0]
 802bf78:	330c      	adds	r3, #12
 802bf7a:	b2d2      	uxtb	r2, r2
 802bf7c:	701a      	strb	r2, [r3, #0]
 802bf7e:	687b      	ldr	r3, [r7, #4]
 802bf80:	695b      	ldr	r3, [r3, #20]
 802bf82:	0a1a      	lsrs	r2, r3, #8
 802bf84:	683b      	ldr	r3, [r7, #0]
 802bf86:	330d      	adds	r3, #13
 802bf88:	b2d2      	uxtb	r2, r2
 802bf8a:	701a      	strb	r2, [r3, #0]
 802bf8c:	687b      	ldr	r3, [r7, #4]
 802bf8e:	695b      	ldr	r3, [r3, #20]
 802bf90:	0c1a      	lsrs	r2, r3, #16
 802bf92:	683b      	ldr	r3, [r7, #0]
 802bf94:	330e      	adds	r3, #14
 802bf96:	b2d2      	uxtb	r2, r2
 802bf98:	701a      	strb	r2, [r3, #0]
 802bf9a:	687b      	ldr	r3, [r7, #4]
 802bf9c:	695b      	ldr	r3, [r3, #20]
 802bf9e:	0e1a      	lsrs	r2, r3, #24
 802bfa0:	683b      	ldr	r3, [r7, #0]
 802bfa2:	330f      	adds	r3, #15
 802bfa4:	b2d2      	uxtb	r2, r2
 802bfa6:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802bfa8:	2300      	movs	r3, #0
}
 802bfaa:	4618      	mov	r0, r3
 802bfac:	3718      	adds	r7, #24
 802bfae:	46bd      	mov	sp, r7
 802bfb0:	bd80      	pop	{r7, pc}
	...

0802bfb4 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802bfb4:	b580      	push	{r7, lr}
 802bfb6:	b082      	sub	sp, #8
 802bfb8:	af00      	add	r7, sp, #0
 802bfba:	6078      	str	r0, [r7, #4]
 802bfbc:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802bfbe:	4b05      	ldr	r3, [pc, #20]	; (802bfd4 <mbedtls_platform_zeroize+0x20>)
 802bfc0:	681b      	ldr	r3, [r3, #0]
 802bfc2:	683a      	ldr	r2, [r7, #0]
 802bfc4:	2100      	movs	r1, #0
 802bfc6:	6878      	ldr	r0, [r7, #4]
 802bfc8:	4798      	blx	r3
}
 802bfca:	bf00      	nop
 802bfcc:	3708      	adds	r7, #8
 802bfce:	46bd      	mov	sp, r7
 802bfd0:	bd80      	pop	{r7, pc}
 802bfd2:	bf00      	nop
 802bfd4:	2000012c 	.word	0x2000012c

0802bfd8 <__assert_func>:
 802bfd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802bfda:	4614      	mov	r4, r2
 802bfdc:	461a      	mov	r2, r3
 802bfde:	4b09      	ldr	r3, [pc, #36]	; (802c004 <__assert_func+0x2c>)
 802bfe0:	681b      	ldr	r3, [r3, #0]
 802bfe2:	4605      	mov	r5, r0
 802bfe4:	68d8      	ldr	r0, [r3, #12]
 802bfe6:	b14c      	cbz	r4, 802bffc <__assert_func+0x24>
 802bfe8:	4b07      	ldr	r3, [pc, #28]	; (802c008 <__assert_func+0x30>)
 802bfea:	9100      	str	r1, [sp, #0]
 802bfec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802bff0:	4906      	ldr	r1, [pc, #24]	; (802c00c <__assert_func+0x34>)
 802bff2:	462b      	mov	r3, r5
 802bff4:	f000 fffa 	bl	802cfec <fiprintf>
 802bff8:	f001 fba8 	bl	802d74c <abort>
 802bffc:	4b04      	ldr	r3, [pc, #16]	; (802c010 <__assert_func+0x38>)
 802bffe:	461c      	mov	r4, r3
 802c000:	e7f3      	b.n	802bfea <__assert_func+0x12>
 802c002:	bf00      	nop
 802c004:	20000188 	.word	0x20000188
 802c008:	080343f0 	.word	0x080343f0
 802c00c:	080343fd 	.word	0x080343fd
 802c010:	0803442b 	.word	0x0803442b

0802c014 <_calloc_r>:
 802c014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c016:	fba1 2402 	umull	r2, r4, r1, r2
 802c01a:	b94c      	cbnz	r4, 802c030 <_calloc_r+0x1c>
 802c01c:	4611      	mov	r1, r2
 802c01e:	9201      	str	r2, [sp, #4]
 802c020:	f000 f83e 	bl	802c0a0 <_malloc_r>
 802c024:	9a01      	ldr	r2, [sp, #4]
 802c026:	4605      	mov	r5, r0
 802c028:	b930      	cbnz	r0, 802c038 <_calloc_r+0x24>
 802c02a:	4628      	mov	r0, r5
 802c02c:	b003      	add	sp, #12
 802c02e:	bd30      	pop	{r4, r5, pc}
 802c030:	220c      	movs	r2, #12
 802c032:	6002      	str	r2, [r0, #0]
 802c034:	2500      	movs	r5, #0
 802c036:	e7f8      	b.n	802c02a <_calloc_r+0x16>
 802c038:	4621      	mov	r1, r4
 802c03a:	f001 f99d 	bl	802d378 <memset>
 802c03e:	e7f4      	b.n	802c02a <_calloc_r+0x16>

0802c040 <malloc>:
 802c040:	4b02      	ldr	r3, [pc, #8]	; (802c04c <malloc+0xc>)
 802c042:	4601      	mov	r1, r0
 802c044:	6818      	ldr	r0, [r3, #0]
 802c046:	f000 b82b 	b.w	802c0a0 <_malloc_r>
 802c04a:	bf00      	nop
 802c04c:	20000188 	.word	0x20000188

0802c050 <free>:
 802c050:	4b02      	ldr	r3, [pc, #8]	; (802c05c <free+0xc>)
 802c052:	4601      	mov	r1, r0
 802c054:	6818      	ldr	r0, [r3, #0]
 802c056:	f002 b9fd 	b.w	802e454 <_free_r>
 802c05a:	bf00      	nop
 802c05c:	20000188 	.word	0x20000188

0802c060 <sbrk_aligned>:
 802c060:	b570      	push	{r4, r5, r6, lr}
 802c062:	4e0e      	ldr	r6, [pc, #56]	; (802c09c <sbrk_aligned+0x3c>)
 802c064:	460c      	mov	r4, r1
 802c066:	6831      	ldr	r1, [r6, #0]
 802c068:	4605      	mov	r5, r0
 802c06a:	b911      	cbnz	r1, 802c072 <sbrk_aligned+0x12>
 802c06c:	f001 fb02 	bl	802d674 <_sbrk_r>
 802c070:	6030      	str	r0, [r6, #0]
 802c072:	4621      	mov	r1, r4
 802c074:	4628      	mov	r0, r5
 802c076:	f001 fafd 	bl	802d674 <_sbrk_r>
 802c07a:	1c43      	adds	r3, r0, #1
 802c07c:	d00a      	beq.n	802c094 <sbrk_aligned+0x34>
 802c07e:	1cc4      	adds	r4, r0, #3
 802c080:	f024 0403 	bic.w	r4, r4, #3
 802c084:	42a0      	cmp	r0, r4
 802c086:	d007      	beq.n	802c098 <sbrk_aligned+0x38>
 802c088:	1a21      	subs	r1, r4, r0
 802c08a:	4628      	mov	r0, r5
 802c08c:	f001 faf2 	bl	802d674 <_sbrk_r>
 802c090:	3001      	adds	r0, #1
 802c092:	d101      	bne.n	802c098 <sbrk_aligned+0x38>
 802c094:	f04f 34ff 	mov.w	r4, #4294967295
 802c098:	4620      	mov	r0, r4
 802c09a:	bd70      	pop	{r4, r5, r6, pc}
 802c09c:	2000d998 	.word	0x2000d998

0802c0a0 <_malloc_r>:
 802c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c0a4:	1ccd      	adds	r5, r1, #3
 802c0a6:	f025 0503 	bic.w	r5, r5, #3
 802c0aa:	3508      	adds	r5, #8
 802c0ac:	2d0c      	cmp	r5, #12
 802c0ae:	bf38      	it	cc
 802c0b0:	250c      	movcc	r5, #12
 802c0b2:	2d00      	cmp	r5, #0
 802c0b4:	4607      	mov	r7, r0
 802c0b6:	db01      	blt.n	802c0bc <_malloc_r+0x1c>
 802c0b8:	42a9      	cmp	r1, r5
 802c0ba:	d905      	bls.n	802c0c8 <_malloc_r+0x28>
 802c0bc:	230c      	movs	r3, #12
 802c0be:	603b      	str	r3, [r7, #0]
 802c0c0:	2600      	movs	r6, #0
 802c0c2:	4630      	mov	r0, r6
 802c0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c0c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c19c <_malloc_r+0xfc>
 802c0cc:	f000 f868 	bl	802c1a0 <__malloc_lock>
 802c0d0:	f8d8 3000 	ldr.w	r3, [r8]
 802c0d4:	461c      	mov	r4, r3
 802c0d6:	bb5c      	cbnz	r4, 802c130 <_malloc_r+0x90>
 802c0d8:	4629      	mov	r1, r5
 802c0da:	4638      	mov	r0, r7
 802c0dc:	f7ff ffc0 	bl	802c060 <sbrk_aligned>
 802c0e0:	1c43      	adds	r3, r0, #1
 802c0e2:	4604      	mov	r4, r0
 802c0e4:	d155      	bne.n	802c192 <_malloc_r+0xf2>
 802c0e6:	f8d8 4000 	ldr.w	r4, [r8]
 802c0ea:	4626      	mov	r6, r4
 802c0ec:	2e00      	cmp	r6, #0
 802c0ee:	d145      	bne.n	802c17c <_malloc_r+0xdc>
 802c0f0:	2c00      	cmp	r4, #0
 802c0f2:	d048      	beq.n	802c186 <_malloc_r+0xe6>
 802c0f4:	6823      	ldr	r3, [r4, #0]
 802c0f6:	4631      	mov	r1, r6
 802c0f8:	4638      	mov	r0, r7
 802c0fa:	eb04 0903 	add.w	r9, r4, r3
 802c0fe:	f001 fab9 	bl	802d674 <_sbrk_r>
 802c102:	4581      	cmp	r9, r0
 802c104:	d13f      	bne.n	802c186 <_malloc_r+0xe6>
 802c106:	6821      	ldr	r1, [r4, #0]
 802c108:	1a6d      	subs	r5, r5, r1
 802c10a:	4629      	mov	r1, r5
 802c10c:	4638      	mov	r0, r7
 802c10e:	f7ff ffa7 	bl	802c060 <sbrk_aligned>
 802c112:	3001      	adds	r0, #1
 802c114:	d037      	beq.n	802c186 <_malloc_r+0xe6>
 802c116:	6823      	ldr	r3, [r4, #0]
 802c118:	442b      	add	r3, r5
 802c11a:	6023      	str	r3, [r4, #0]
 802c11c:	f8d8 3000 	ldr.w	r3, [r8]
 802c120:	2b00      	cmp	r3, #0
 802c122:	d038      	beq.n	802c196 <_malloc_r+0xf6>
 802c124:	685a      	ldr	r2, [r3, #4]
 802c126:	42a2      	cmp	r2, r4
 802c128:	d12b      	bne.n	802c182 <_malloc_r+0xe2>
 802c12a:	2200      	movs	r2, #0
 802c12c:	605a      	str	r2, [r3, #4]
 802c12e:	e00f      	b.n	802c150 <_malloc_r+0xb0>
 802c130:	6822      	ldr	r2, [r4, #0]
 802c132:	1b52      	subs	r2, r2, r5
 802c134:	d41f      	bmi.n	802c176 <_malloc_r+0xd6>
 802c136:	2a0b      	cmp	r2, #11
 802c138:	d917      	bls.n	802c16a <_malloc_r+0xca>
 802c13a:	1961      	adds	r1, r4, r5
 802c13c:	42a3      	cmp	r3, r4
 802c13e:	6025      	str	r5, [r4, #0]
 802c140:	bf18      	it	ne
 802c142:	6059      	strne	r1, [r3, #4]
 802c144:	6863      	ldr	r3, [r4, #4]
 802c146:	bf08      	it	eq
 802c148:	f8c8 1000 	streq.w	r1, [r8]
 802c14c:	5162      	str	r2, [r4, r5]
 802c14e:	604b      	str	r3, [r1, #4]
 802c150:	4638      	mov	r0, r7
 802c152:	f104 060b 	add.w	r6, r4, #11
 802c156:	f000 f829 	bl	802c1ac <__malloc_unlock>
 802c15a:	f026 0607 	bic.w	r6, r6, #7
 802c15e:	1d23      	adds	r3, r4, #4
 802c160:	1af2      	subs	r2, r6, r3
 802c162:	d0ae      	beq.n	802c0c2 <_malloc_r+0x22>
 802c164:	1b9b      	subs	r3, r3, r6
 802c166:	50a3      	str	r3, [r4, r2]
 802c168:	e7ab      	b.n	802c0c2 <_malloc_r+0x22>
 802c16a:	42a3      	cmp	r3, r4
 802c16c:	6862      	ldr	r2, [r4, #4]
 802c16e:	d1dd      	bne.n	802c12c <_malloc_r+0x8c>
 802c170:	f8c8 2000 	str.w	r2, [r8]
 802c174:	e7ec      	b.n	802c150 <_malloc_r+0xb0>
 802c176:	4623      	mov	r3, r4
 802c178:	6864      	ldr	r4, [r4, #4]
 802c17a:	e7ac      	b.n	802c0d6 <_malloc_r+0x36>
 802c17c:	4634      	mov	r4, r6
 802c17e:	6876      	ldr	r6, [r6, #4]
 802c180:	e7b4      	b.n	802c0ec <_malloc_r+0x4c>
 802c182:	4613      	mov	r3, r2
 802c184:	e7cc      	b.n	802c120 <_malloc_r+0x80>
 802c186:	230c      	movs	r3, #12
 802c188:	603b      	str	r3, [r7, #0]
 802c18a:	4638      	mov	r0, r7
 802c18c:	f000 f80e 	bl	802c1ac <__malloc_unlock>
 802c190:	e797      	b.n	802c0c2 <_malloc_r+0x22>
 802c192:	6025      	str	r5, [r4, #0]
 802c194:	e7dc      	b.n	802c150 <_malloc_r+0xb0>
 802c196:	605b      	str	r3, [r3, #4]
 802c198:	deff      	udf	#255	; 0xff
 802c19a:	bf00      	nop
 802c19c:	2000d994 	.word	0x2000d994

0802c1a0 <__malloc_lock>:
 802c1a0:	4801      	ldr	r0, [pc, #4]	; (802c1a8 <__malloc_lock+0x8>)
 802c1a2:	f001 bab4 	b.w	802d70e <__retarget_lock_acquire_recursive>
 802c1a6:	bf00      	nop
 802c1a8:	2000dadc 	.word	0x2000dadc

0802c1ac <__malloc_unlock>:
 802c1ac:	4801      	ldr	r0, [pc, #4]	; (802c1b4 <__malloc_unlock+0x8>)
 802c1ae:	f001 baaf 	b.w	802d710 <__retarget_lock_release_recursive>
 802c1b2:	bf00      	nop
 802c1b4:	2000dadc 	.word	0x2000dadc

0802c1b8 <__cvt>:
 802c1b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c1bc:	ec55 4b10 	vmov	r4, r5, d0
 802c1c0:	2d00      	cmp	r5, #0
 802c1c2:	460e      	mov	r6, r1
 802c1c4:	4619      	mov	r1, r3
 802c1c6:	462b      	mov	r3, r5
 802c1c8:	bfbb      	ittet	lt
 802c1ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802c1ce:	461d      	movlt	r5, r3
 802c1d0:	2300      	movge	r3, #0
 802c1d2:	232d      	movlt	r3, #45	; 0x2d
 802c1d4:	700b      	strb	r3, [r1, #0]
 802c1d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c1d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802c1dc:	4691      	mov	r9, r2
 802c1de:	f023 0820 	bic.w	r8, r3, #32
 802c1e2:	bfbc      	itt	lt
 802c1e4:	4622      	movlt	r2, r4
 802c1e6:	4614      	movlt	r4, r2
 802c1e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c1ec:	d005      	beq.n	802c1fa <__cvt+0x42>
 802c1ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802c1f2:	d100      	bne.n	802c1f6 <__cvt+0x3e>
 802c1f4:	3601      	adds	r6, #1
 802c1f6:	2102      	movs	r1, #2
 802c1f8:	e000      	b.n	802c1fc <__cvt+0x44>
 802c1fa:	2103      	movs	r1, #3
 802c1fc:	ab03      	add	r3, sp, #12
 802c1fe:	9301      	str	r3, [sp, #4]
 802c200:	ab02      	add	r3, sp, #8
 802c202:	9300      	str	r3, [sp, #0]
 802c204:	ec45 4b10 	vmov	d0, r4, r5
 802c208:	4653      	mov	r3, sl
 802c20a:	4632      	mov	r2, r6
 802c20c:	f001 fb30 	bl	802d870 <_dtoa_r>
 802c210:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802c214:	4607      	mov	r7, r0
 802c216:	d102      	bne.n	802c21e <__cvt+0x66>
 802c218:	f019 0f01 	tst.w	r9, #1
 802c21c:	d022      	beq.n	802c264 <__cvt+0xac>
 802c21e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c222:	eb07 0906 	add.w	r9, r7, r6
 802c226:	d110      	bne.n	802c24a <__cvt+0x92>
 802c228:	783b      	ldrb	r3, [r7, #0]
 802c22a:	2b30      	cmp	r3, #48	; 0x30
 802c22c:	d10a      	bne.n	802c244 <__cvt+0x8c>
 802c22e:	2200      	movs	r2, #0
 802c230:	2300      	movs	r3, #0
 802c232:	4620      	mov	r0, r4
 802c234:	4629      	mov	r1, r5
 802c236:	f7e4 fc5f 	bl	8010af8 <__aeabi_dcmpeq>
 802c23a:	b918      	cbnz	r0, 802c244 <__cvt+0x8c>
 802c23c:	f1c6 0601 	rsb	r6, r6, #1
 802c240:	f8ca 6000 	str.w	r6, [sl]
 802c244:	f8da 3000 	ldr.w	r3, [sl]
 802c248:	4499      	add	r9, r3
 802c24a:	2200      	movs	r2, #0
 802c24c:	2300      	movs	r3, #0
 802c24e:	4620      	mov	r0, r4
 802c250:	4629      	mov	r1, r5
 802c252:	f7e4 fc51 	bl	8010af8 <__aeabi_dcmpeq>
 802c256:	b108      	cbz	r0, 802c25c <__cvt+0xa4>
 802c258:	f8cd 900c 	str.w	r9, [sp, #12]
 802c25c:	2230      	movs	r2, #48	; 0x30
 802c25e:	9b03      	ldr	r3, [sp, #12]
 802c260:	454b      	cmp	r3, r9
 802c262:	d307      	bcc.n	802c274 <__cvt+0xbc>
 802c264:	9b03      	ldr	r3, [sp, #12]
 802c266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c268:	1bdb      	subs	r3, r3, r7
 802c26a:	4638      	mov	r0, r7
 802c26c:	6013      	str	r3, [r2, #0]
 802c26e:	b004      	add	sp, #16
 802c270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c274:	1c59      	adds	r1, r3, #1
 802c276:	9103      	str	r1, [sp, #12]
 802c278:	701a      	strb	r2, [r3, #0]
 802c27a:	e7f0      	b.n	802c25e <__cvt+0xa6>

0802c27c <__exponent>:
 802c27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c27e:	4603      	mov	r3, r0
 802c280:	2900      	cmp	r1, #0
 802c282:	bfb8      	it	lt
 802c284:	4249      	neglt	r1, r1
 802c286:	f803 2b02 	strb.w	r2, [r3], #2
 802c28a:	bfb4      	ite	lt
 802c28c:	222d      	movlt	r2, #45	; 0x2d
 802c28e:	222b      	movge	r2, #43	; 0x2b
 802c290:	2909      	cmp	r1, #9
 802c292:	7042      	strb	r2, [r0, #1]
 802c294:	dd2a      	ble.n	802c2ec <__exponent+0x70>
 802c296:	f10d 0207 	add.w	r2, sp, #7
 802c29a:	4617      	mov	r7, r2
 802c29c:	260a      	movs	r6, #10
 802c29e:	4694      	mov	ip, r2
 802c2a0:	fb91 f5f6 	sdiv	r5, r1, r6
 802c2a4:	fb06 1415 	mls	r4, r6, r5, r1
 802c2a8:	3430      	adds	r4, #48	; 0x30
 802c2aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802c2ae:	460c      	mov	r4, r1
 802c2b0:	2c63      	cmp	r4, #99	; 0x63
 802c2b2:	f102 32ff 	add.w	r2, r2, #4294967295
 802c2b6:	4629      	mov	r1, r5
 802c2b8:	dcf1      	bgt.n	802c29e <__exponent+0x22>
 802c2ba:	3130      	adds	r1, #48	; 0x30
 802c2bc:	f1ac 0402 	sub.w	r4, ip, #2
 802c2c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c2c4:	1c41      	adds	r1, r0, #1
 802c2c6:	4622      	mov	r2, r4
 802c2c8:	42ba      	cmp	r2, r7
 802c2ca:	d30a      	bcc.n	802c2e2 <__exponent+0x66>
 802c2cc:	f10d 0209 	add.w	r2, sp, #9
 802c2d0:	eba2 020c 	sub.w	r2, r2, ip
 802c2d4:	42bc      	cmp	r4, r7
 802c2d6:	bf88      	it	hi
 802c2d8:	2200      	movhi	r2, #0
 802c2da:	4413      	add	r3, r2
 802c2dc:	1a18      	subs	r0, r3, r0
 802c2de:	b003      	add	sp, #12
 802c2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c2e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 802c2e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 802c2ea:	e7ed      	b.n	802c2c8 <__exponent+0x4c>
 802c2ec:	2330      	movs	r3, #48	; 0x30
 802c2ee:	3130      	adds	r1, #48	; 0x30
 802c2f0:	7083      	strb	r3, [r0, #2]
 802c2f2:	70c1      	strb	r1, [r0, #3]
 802c2f4:	1d03      	adds	r3, r0, #4
 802c2f6:	e7f1      	b.n	802c2dc <__exponent+0x60>

0802c2f8 <_printf_float>:
 802c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c2fc:	ed2d 8b02 	vpush	{d8}
 802c300:	b08d      	sub	sp, #52	; 0x34
 802c302:	460c      	mov	r4, r1
 802c304:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802c308:	4616      	mov	r6, r2
 802c30a:	461f      	mov	r7, r3
 802c30c:	4605      	mov	r5, r0
 802c30e:	f001 f923 	bl	802d558 <_localeconv_r>
 802c312:	f8d0 a000 	ldr.w	sl, [r0]
 802c316:	4650      	mov	r0, sl
 802c318:	f7e3 ffc2 	bl	80102a0 <strlen>
 802c31c:	2300      	movs	r3, #0
 802c31e:	930a      	str	r3, [sp, #40]	; 0x28
 802c320:	6823      	ldr	r3, [r4, #0]
 802c322:	9305      	str	r3, [sp, #20]
 802c324:	f8d8 3000 	ldr.w	r3, [r8]
 802c328:	f894 b018 	ldrb.w	fp, [r4, #24]
 802c32c:	3307      	adds	r3, #7
 802c32e:	f023 0307 	bic.w	r3, r3, #7
 802c332:	f103 0208 	add.w	r2, r3, #8
 802c336:	f8c8 2000 	str.w	r2, [r8]
 802c33a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c33e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802c342:	9307      	str	r3, [sp, #28]
 802c344:	f8cd 8018 	str.w	r8, [sp, #24]
 802c348:	ee08 0a10 	vmov	s16, r0
 802c34c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802c350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c354:	4b9e      	ldr	r3, [pc, #632]	; (802c5d0 <_printf_float+0x2d8>)
 802c356:	f04f 32ff 	mov.w	r2, #4294967295
 802c35a:	f7e4 fbff 	bl	8010b5c <__aeabi_dcmpun>
 802c35e:	bb88      	cbnz	r0, 802c3c4 <_printf_float+0xcc>
 802c360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c364:	4b9a      	ldr	r3, [pc, #616]	; (802c5d0 <_printf_float+0x2d8>)
 802c366:	f04f 32ff 	mov.w	r2, #4294967295
 802c36a:	f7e4 fbd9 	bl	8010b20 <__aeabi_dcmple>
 802c36e:	bb48      	cbnz	r0, 802c3c4 <_printf_float+0xcc>
 802c370:	2200      	movs	r2, #0
 802c372:	2300      	movs	r3, #0
 802c374:	4640      	mov	r0, r8
 802c376:	4649      	mov	r1, r9
 802c378:	f7e4 fbc8 	bl	8010b0c <__aeabi_dcmplt>
 802c37c:	b110      	cbz	r0, 802c384 <_printf_float+0x8c>
 802c37e:	232d      	movs	r3, #45	; 0x2d
 802c380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c384:	4a93      	ldr	r2, [pc, #588]	; (802c5d4 <_printf_float+0x2dc>)
 802c386:	4b94      	ldr	r3, [pc, #592]	; (802c5d8 <_printf_float+0x2e0>)
 802c388:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802c38c:	bf94      	ite	ls
 802c38e:	4690      	movls	r8, r2
 802c390:	4698      	movhi	r8, r3
 802c392:	2303      	movs	r3, #3
 802c394:	6123      	str	r3, [r4, #16]
 802c396:	9b05      	ldr	r3, [sp, #20]
 802c398:	f023 0304 	bic.w	r3, r3, #4
 802c39c:	6023      	str	r3, [r4, #0]
 802c39e:	f04f 0900 	mov.w	r9, #0
 802c3a2:	9700      	str	r7, [sp, #0]
 802c3a4:	4633      	mov	r3, r6
 802c3a6:	aa0b      	add	r2, sp, #44	; 0x2c
 802c3a8:	4621      	mov	r1, r4
 802c3aa:	4628      	mov	r0, r5
 802c3ac:	f000 f9da 	bl	802c764 <_printf_common>
 802c3b0:	3001      	adds	r0, #1
 802c3b2:	f040 8090 	bne.w	802c4d6 <_printf_float+0x1de>
 802c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 802c3ba:	b00d      	add	sp, #52	; 0x34
 802c3bc:	ecbd 8b02 	vpop	{d8}
 802c3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c3c4:	4642      	mov	r2, r8
 802c3c6:	464b      	mov	r3, r9
 802c3c8:	4640      	mov	r0, r8
 802c3ca:	4649      	mov	r1, r9
 802c3cc:	f7e4 fbc6 	bl	8010b5c <__aeabi_dcmpun>
 802c3d0:	b140      	cbz	r0, 802c3e4 <_printf_float+0xec>
 802c3d2:	464b      	mov	r3, r9
 802c3d4:	2b00      	cmp	r3, #0
 802c3d6:	bfbc      	itt	lt
 802c3d8:	232d      	movlt	r3, #45	; 0x2d
 802c3da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802c3de:	4a7f      	ldr	r2, [pc, #508]	; (802c5dc <_printf_float+0x2e4>)
 802c3e0:	4b7f      	ldr	r3, [pc, #508]	; (802c5e0 <_printf_float+0x2e8>)
 802c3e2:	e7d1      	b.n	802c388 <_printf_float+0x90>
 802c3e4:	6863      	ldr	r3, [r4, #4]
 802c3e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802c3ea:	9206      	str	r2, [sp, #24]
 802c3ec:	1c5a      	adds	r2, r3, #1
 802c3ee:	d13f      	bne.n	802c470 <_printf_float+0x178>
 802c3f0:	2306      	movs	r3, #6
 802c3f2:	6063      	str	r3, [r4, #4]
 802c3f4:	9b05      	ldr	r3, [sp, #20]
 802c3f6:	6861      	ldr	r1, [r4, #4]
 802c3f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802c3fc:	2300      	movs	r3, #0
 802c3fe:	9303      	str	r3, [sp, #12]
 802c400:	ab0a      	add	r3, sp, #40	; 0x28
 802c402:	e9cd b301 	strd	fp, r3, [sp, #4]
 802c406:	ab09      	add	r3, sp, #36	; 0x24
 802c408:	ec49 8b10 	vmov	d0, r8, r9
 802c40c:	9300      	str	r3, [sp, #0]
 802c40e:	6022      	str	r2, [r4, #0]
 802c410:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802c414:	4628      	mov	r0, r5
 802c416:	f7ff fecf 	bl	802c1b8 <__cvt>
 802c41a:	9b06      	ldr	r3, [sp, #24]
 802c41c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c41e:	2b47      	cmp	r3, #71	; 0x47
 802c420:	4680      	mov	r8, r0
 802c422:	d108      	bne.n	802c436 <_printf_float+0x13e>
 802c424:	1cc8      	adds	r0, r1, #3
 802c426:	db02      	blt.n	802c42e <_printf_float+0x136>
 802c428:	6863      	ldr	r3, [r4, #4]
 802c42a:	4299      	cmp	r1, r3
 802c42c:	dd41      	ble.n	802c4b2 <_printf_float+0x1ba>
 802c42e:	f1ab 0302 	sub.w	r3, fp, #2
 802c432:	fa5f fb83 	uxtb.w	fp, r3
 802c436:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c43a:	d820      	bhi.n	802c47e <_printf_float+0x186>
 802c43c:	3901      	subs	r1, #1
 802c43e:	465a      	mov	r2, fp
 802c440:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802c444:	9109      	str	r1, [sp, #36]	; 0x24
 802c446:	f7ff ff19 	bl	802c27c <__exponent>
 802c44a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c44c:	1813      	adds	r3, r2, r0
 802c44e:	2a01      	cmp	r2, #1
 802c450:	4681      	mov	r9, r0
 802c452:	6123      	str	r3, [r4, #16]
 802c454:	dc02      	bgt.n	802c45c <_printf_float+0x164>
 802c456:	6822      	ldr	r2, [r4, #0]
 802c458:	07d2      	lsls	r2, r2, #31
 802c45a:	d501      	bpl.n	802c460 <_printf_float+0x168>
 802c45c:	3301      	adds	r3, #1
 802c45e:	6123      	str	r3, [r4, #16]
 802c460:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802c464:	2b00      	cmp	r3, #0
 802c466:	d09c      	beq.n	802c3a2 <_printf_float+0xaa>
 802c468:	232d      	movs	r3, #45	; 0x2d
 802c46a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c46e:	e798      	b.n	802c3a2 <_printf_float+0xaa>
 802c470:	9a06      	ldr	r2, [sp, #24]
 802c472:	2a47      	cmp	r2, #71	; 0x47
 802c474:	d1be      	bne.n	802c3f4 <_printf_float+0xfc>
 802c476:	2b00      	cmp	r3, #0
 802c478:	d1bc      	bne.n	802c3f4 <_printf_float+0xfc>
 802c47a:	2301      	movs	r3, #1
 802c47c:	e7b9      	b.n	802c3f2 <_printf_float+0xfa>
 802c47e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802c482:	d118      	bne.n	802c4b6 <_printf_float+0x1be>
 802c484:	2900      	cmp	r1, #0
 802c486:	6863      	ldr	r3, [r4, #4]
 802c488:	dd0b      	ble.n	802c4a2 <_printf_float+0x1aa>
 802c48a:	6121      	str	r1, [r4, #16]
 802c48c:	b913      	cbnz	r3, 802c494 <_printf_float+0x19c>
 802c48e:	6822      	ldr	r2, [r4, #0]
 802c490:	07d0      	lsls	r0, r2, #31
 802c492:	d502      	bpl.n	802c49a <_printf_float+0x1a2>
 802c494:	3301      	adds	r3, #1
 802c496:	440b      	add	r3, r1
 802c498:	6123      	str	r3, [r4, #16]
 802c49a:	65a1      	str	r1, [r4, #88]	; 0x58
 802c49c:	f04f 0900 	mov.w	r9, #0
 802c4a0:	e7de      	b.n	802c460 <_printf_float+0x168>
 802c4a2:	b913      	cbnz	r3, 802c4aa <_printf_float+0x1b2>
 802c4a4:	6822      	ldr	r2, [r4, #0]
 802c4a6:	07d2      	lsls	r2, r2, #31
 802c4a8:	d501      	bpl.n	802c4ae <_printf_float+0x1b6>
 802c4aa:	3302      	adds	r3, #2
 802c4ac:	e7f4      	b.n	802c498 <_printf_float+0x1a0>
 802c4ae:	2301      	movs	r3, #1
 802c4b0:	e7f2      	b.n	802c498 <_printf_float+0x1a0>
 802c4b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802c4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c4b8:	4299      	cmp	r1, r3
 802c4ba:	db05      	blt.n	802c4c8 <_printf_float+0x1d0>
 802c4bc:	6823      	ldr	r3, [r4, #0]
 802c4be:	6121      	str	r1, [r4, #16]
 802c4c0:	07d8      	lsls	r0, r3, #31
 802c4c2:	d5ea      	bpl.n	802c49a <_printf_float+0x1a2>
 802c4c4:	1c4b      	adds	r3, r1, #1
 802c4c6:	e7e7      	b.n	802c498 <_printf_float+0x1a0>
 802c4c8:	2900      	cmp	r1, #0
 802c4ca:	bfd4      	ite	le
 802c4cc:	f1c1 0202 	rsble	r2, r1, #2
 802c4d0:	2201      	movgt	r2, #1
 802c4d2:	4413      	add	r3, r2
 802c4d4:	e7e0      	b.n	802c498 <_printf_float+0x1a0>
 802c4d6:	6823      	ldr	r3, [r4, #0]
 802c4d8:	055a      	lsls	r2, r3, #21
 802c4da:	d407      	bmi.n	802c4ec <_printf_float+0x1f4>
 802c4dc:	6923      	ldr	r3, [r4, #16]
 802c4de:	4642      	mov	r2, r8
 802c4e0:	4631      	mov	r1, r6
 802c4e2:	4628      	mov	r0, r5
 802c4e4:	47b8      	blx	r7
 802c4e6:	3001      	adds	r0, #1
 802c4e8:	d12c      	bne.n	802c544 <_printf_float+0x24c>
 802c4ea:	e764      	b.n	802c3b6 <_printf_float+0xbe>
 802c4ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c4f0:	f240 80e0 	bls.w	802c6b4 <_printf_float+0x3bc>
 802c4f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802c4f8:	2200      	movs	r2, #0
 802c4fa:	2300      	movs	r3, #0
 802c4fc:	f7e4 fafc 	bl	8010af8 <__aeabi_dcmpeq>
 802c500:	2800      	cmp	r0, #0
 802c502:	d034      	beq.n	802c56e <_printf_float+0x276>
 802c504:	4a37      	ldr	r2, [pc, #220]	; (802c5e4 <_printf_float+0x2ec>)
 802c506:	2301      	movs	r3, #1
 802c508:	4631      	mov	r1, r6
 802c50a:	4628      	mov	r0, r5
 802c50c:	47b8      	blx	r7
 802c50e:	3001      	adds	r0, #1
 802c510:	f43f af51 	beq.w	802c3b6 <_printf_float+0xbe>
 802c514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c518:	429a      	cmp	r2, r3
 802c51a:	db02      	blt.n	802c522 <_printf_float+0x22a>
 802c51c:	6823      	ldr	r3, [r4, #0]
 802c51e:	07d8      	lsls	r0, r3, #31
 802c520:	d510      	bpl.n	802c544 <_printf_float+0x24c>
 802c522:	ee18 3a10 	vmov	r3, s16
 802c526:	4652      	mov	r2, sl
 802c528:	4631      	mov	r1, r6
 802c52a:	4628      	mov	r0, r5
 802c52c:	47b8      	blx	r7
 802c52e:	3001      	adds	r0, #1
 802c530:	f43f af41 	beq.w	802c3b6 <_printf_float+0xbe>
 802c534:	f04f 0800 	mov.w	r8, #0
 802c538:	f104 091a 	add.w	r9, r4, #26
 802c53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c53e:	3b01      	subs	r3, #1
 802c540:	4543      	cmp	r3, r8
 802c542:	dc09      	bgt.n	802c558 <_printf_float+0x260>
 802c544:	6823      	ldr	r3, [r4, #0]
 802c546:	079b      	lsls	r3, r3, #30
 802c548:	f100 8107 	bmi.w	802c75a <_printf_float+0x462>
 802c54c:	68e0      	ldr	r0, [r4, #12]
 802c54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c550:	4298      	cmp	r0, r3
 802c552:	bfb8      	it	lt
 802c554:	4618      	movlt	r0, r3
 802c556:	e730      	b.n	802c3ba <_printf_float+0xc2>
 802c558:	2301      	movs	r3, #1
 802c55a:	464a      	mov	r2, r9
 802c55c:	4631      	mov	r1, r6
 802c55e:	4628      	mov	r0, r5
 802c560:	47b8      	blx	r7
 802c562:	3001      	adds	r0, #1
 802c564:	f43f af27 	beq.w	802c3b6 <_printf_float+0xbe>
 802c568:	f108 0801 	add.w	r8, r8, #1
 802c56c:	e7e6      	b.n	802c53c <_printf_float+0x244>
 802c56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c570:	2b00      	cmp	r3, #0
 802c572:	dc39      	bgt.n	802c5e8 <_printf_float+0x2f0>
 802c574:	4a1b      	ldr	r2, [pc, #108]	; (802c5e4 <_printf_float+0x2ec>)
 802c576:	2301      	movs	r3, #1
 802c578:	4631      	mov	r1, r6
 802c57a:	4628      	mov	r0, r5
 802c57c:	47b8      	blx	r7
 802c57e:	3001      	adds	r0, #1
 802c580:	f43f af19 	beq.w	802c3b6 <_printf_float+0xbe>
 802c584:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802c588:	4313      	orrs	r3, r2
 802c58a:	d102      	bne.n	802c592 <_printf_float+0x29a>
 802c58c:	6823      	ldr	r3, [r4, #0]
 802c58e:	07d9      	lsls	r1, r3, #31
 802c590:	d5d8      	bpl.n	802c544 <_printf_float+0x24c>
 802c592:	ee18 3a10 	vmov	r3, s16
 802c596:	4652      	mov	r2, sl
 802c598:	4631      	mov	r1, r6
 802c59a:	4628      	mov	r0, r5
 802c59c:	47b8      	blx	r7
 802c59e:	3001      	adds	r0, #1
 802c5a0:	f43f af09 	beq.w	802c3b6 <_printf_float+0xbe>
 802c5a4:	f04f 0900 	mov.w	r9, #0
 802c5a8:	f104 0a1a 	add.w	sl, r4, #26
 802c5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c5ae:	425b      	negs	r3, r3
 802c5b0:	454b      	cmp	r3, r9
 802c5b2:	dc01      	bgt.n	802c5b8 <_printf_float+0x2c0>
 802c5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c5b6:	e792      	b.n	802c4de <_printf_float+0x1e6>
 802c5b8:	2301      	movs	r3, #1
 802c5ba:	4652      	mov	r2, sl
 802c5bc:	4631      	mov	r1, r6
 802c5be:	4628      	mov	r0, r5
 802c5c0:	47b8      	blx	r7
 802c5c2:	3001      	adds	r0, #1
 802c5c4:	f43f aef7 	beq.w	802c3b6 <_printf_float+0xbe>
 802c5c8:	f109 0901 	add.w	r9, r9, #1
 802c5cc:	e7ee      	b.n	802c5ac <_printf_float+0x2b4>
 802c5ce:	bf00      	nop
 802c5d0:	7fefffff 	.word	0x7fefffff
 802c5d4:	0803442c 	.word	0x0803442c
 802c5d8:	08034430 	.word	0x08034430
 802c5dc:	08034434 	.word	0x08034434
 802c5e0:	08034438 	.word	0x08034438
 802c5e4:	08034820 	.word	0x08034820
 802c5e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c5ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c5ec:	429a      	cmp	r2, r3
 802c5ee:	bfa8      	it	ge
 802c5f0:	461a      	movge	r2, r3
 802c5f2:	2a00      	cmp	r2, #0
 802c5f4:	4691      	mov	r9, r2
 802c5f6:	dc37      	bgt.n	802c668 <_printf_float+0x370>
 802c5f8:	f04f 0b00 	mov.w	fp, #0
 802c5fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802c600:	f104 021a 	add.w	r2, r4, #26
 802c604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c606:	9305      	str	r3, [sp, #20]
 802c608:	eba3 0309 	sub.w	r3, r3, r9
 802c60c:	455b      	cmp	r3, fp
 802c60e:	dc33      	bgt.n	802c678 <_printf_float+0x380>
 802c610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c614:	429a      	cmp	r2, r3
 802c616:	db3b      	blt.n	802c690 <_printf_float+0x398>
 802c618:	6823      	ldr	r3, [r4, #0]
 802c61a:	07da      	lsls	r2, r3, #31
 802c61c:	d438      	bmi.n	802c690 <_printf_float+0x398>
 802c61e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802c622:	eba2 0903 	sub.w	r9, r2, r3
 802c626:	9b05      	ldr	r3, [sp, #20]
 802c628:	1ad2      	subs	r2, r2, r3
 802c62a:	4591      	cmp	r9, r2
 802c62c:	bfa8      	it	ge
 802c62e:	4691      	movge	r9, r2
 802c630:	f1b9 0f00 	cmp.w	r9, #0
 802c634:	dc35      	bgt.n	802c6a2 <_printf_float+0x3aa>
 802c636:	f04f 0800 	mov.w	r8, #0
 802c63a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802c63e:	f104 0a1a 	add.w	sl, r4, #26
 802c642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c646:	1a9b      	subs	r3, r3, r2
 802c648:	eba3 0309 	sub.w	r3, r3, r9
 802c64c:	4543      	cmp	r3, r8
 802c64e:	f77f af79 	ble.w	802c544 <_printf_float+0x24c>
 802c652:	2301      	movs	r3, #1
 802c654:	4652      	mov	r2, sl
 802c656:	4631      	mov	r1, r6
 802c658:	4628      	mov	r0, r5
 802c65a:	47b8      	blx	r7
 802c65c:	3001      	adds	r0, #1
 802c65e:	f43f aeaa 	beq.w	802c3b6 <_printf_float+0xbe>
 802c662:	f108 0801 	add.w	r8, r8, #1
 802c666:	e7ec      	b.n	802c642 <_printf_float+0x34a>
 802c668:	4613      	mov	r3, r2
 802c66a:	4631      	mov	r1, r6
 802c66c:	4642      	mov	r2, r8
 802c66e:	4628      	mov	r0, r5
 802c670:	47b8      	blx	r7
 802c672:	3001      	adds	r0, #1
 802c674:	d1c0      	bne.n	802c5f8 <_printf_float+0x300>
 802c676:	e69e      	b.n	802c3b6 <_printf_float+0xbe>
 802c678:	2301      	movs	r3, #1
 802c67a:	4631      	mov	r1, r6
 802c67c:	4628      	mov	r0, r5
 802c67e:	9205      	str	r2, [sp, #20]
 802c680:	47b8      	blx	r7
 802c682:	3001      	adds	r0, #1
 802c684:	f43f ae97 	beq.w	802c3b6 <_printf_float+0xbe>
 802c688:	9a05      	ldr	r2, [sp, #20]
 802c68a:	f10b 0b01 	add.w	fp, fp, #1
 802c68e:	e7b9      	b.n	802c604 <_printf_float+0x30c>
 802c690:	ee18 3a10 	vmov	r3, s16
 802c694:	4652      	mov	r2, sl
 802c696:	4631      	mov	r1, r6
 802c698:	4628      	mov	r0, r5
 802c69a:	47b8      	blx	r7
 802c69c:	3001      	adds	r0, #1
 802c69e:	d1be      	bne.n	802c61e <_printf_float+0x326>
 802c6a0:	e689      	b.n	802c3b6 <_printf_float+0xbe>
 802c6a2:	9a05      	ldr	r2, [sp, #20]
 802c6a4:	464b      	mov	r3, r9
 802c6a6:	4442      	add	r2, r8
 802c6a8:	4631      	mov	r1, r6
 802c6aa:	4628      	mov	r0, r5
 802c6ac:	47b8      	blx	r7
 802c6ae:	3001      	adds	r0, #1
 802c6b0:	d1c1      	bne.n	802c636 <_printf_float+0x33e>
 802c6b2:	e680      	b.n	802c3b6 <_printf_float+0xbe>
 802c6b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c6b6:	2a01      	cmp	r2, #1
 802c6b8:	dc01      	bgt.n	802c6be <_printf_float+0x3c6>
 802c6ba:	07db      	lsls	r3, r3, #31
 802c6bc:	d53a      	bpl.n	802c734 <_printf_float+0x43c>
 802c6be:	2301      	movs	r3, #1
 802c6c0:	4642      	mov	r2, r8
 802c6c2:	4631      	mov	r1, r6
 802c6c4:	4628      	mov	r0, r5
 802c6c6:	47b8      	blx	r7
 802c6c8:	3001      	adds	r0, #1
 802c6ca:	f43f ae74 	beq.w	802c3b6 <_printf_float+0xbe>
 802c6ce:	ee18 3a10 	vmov	r3, s16
 802c6d2:	4652      	mov	r2, sl
 802c6d4:	4631      	mov	r1, r6
 802c6d6:	4628      	mov	r0, r5
 802c6d8:	47b8      	blx	r7
 802c6da:	3001      	adds	r0, #1
 802c6dc:	f43f ae6b 	beq.w	802c3b6 <_printf_float+0xbe>
 802c6e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802c6e4:	2200      	movs	r2, #0
 802c6e6:	2300      	movs	r3, #0
 802c6e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802c6ec:	f7e4 fa04 	bl	8010af8 <__aeabi_dcmpeq>
 802c6f0:	b9d8      	cbnz	r0, 802c72a <_printf_float+0x432>
 802c6f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 802c6f6:	f108 0201 	add.w	r2, r8, #1
 802c6fa:	4631      	mov	r1, r6
 802c6fc:	4628      	mov	r0, r5
 802c6fe:	47b8      	blx	r7
 802c700:	3001      	adds	r0, #1
 802c702:	d10e      	bne.n	802c722 <_printf_float+0x42a>
 802c704:	e657      	b.n	802c3b6 <_printf_float+0xbe>
 802c706:	2301      	movs	r3, #1
 802c708:	4652      	mov	r2, sl
 802c70a:	4631      	mov	r1, r6
 802c70c:	4628      	mov	r0, r5
 802c70e:	47b8      	blx	r7
 802c710:	3001      	adds	r0, #1
 802c712:	f43f ae50 	beq.w	802c3b6 <_printf_float+0xbe>
 802c716:	f108 0801 	add.w	r8, r8, #1
 802c71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c71c:	3b01      	subs	r3, #1
 802c71e:	4543      	cmp	r3, r8
 802c720:	dcf1      	bgt.n	802c706 <_printf_float+0x40e>
 802c722:	464b      	mov	r3, r9
 802c724:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802c728:	e6da      	b.n	802c4e0 <_printf_float+0x1e8>
 802c72a:	f04f 0800 	mov.w	r8, #0
 802c72e:	f104 0a1a 	add.w	sl, r4, #26
 802c732:	e7f2      	b.n	802c71a <_printf_float+0x422>
 802c734:	2301      	movs	r3, #1
 802c736:	4642      	mov	r2, r8
 802c738:	e7df      	b.n	802c6fa <_printf_float+0x402>
 802c73a:	2301      	movs	r3, #1
 802c73c:	464a      	mov	r2, r9
 802c73e:	4631      	mov	r1, r6
 802c740:	4628      	mov	r0, r5
 802c742:	47b8      	blx	r7
 802c744:	3001      	adds	r0, #1
 802c746:	f43f ae36 	beq.w	802c3b6 <_printf_float+0xbe>
 802c74a:	f108 0801 	add.w	r8, r8, #1
 802c74e:	68e3      	ldr	r3, [r4, #12]
 802c750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802c752:	1a5b      	subs	r3, r3, r1
 802c754:	4543      	cmp	r3, r8
 802c756:	dcf0      	bgt.n	802c73a <_printf_float+0x442>
 802c758:	e6f8      	b.n	802c54c <_printf_float+0x254>
 802c75a:	f04f 0800 	mov.w	r8, #0
 802c75e:	f104 0919 	add.w	r9, r4, #25
 802c762:	e7f4      	b.n	802c74e <_printf_float+0x456>

0802c764 <_printf_common>:
 802c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c768:	4616      	mov	r6, r2
 802c76a:	4699      	mov	r9, r3
 802c76c:	688a      	ldr	r2, [r1, #8]
 802c76e:	690b      	ldr	r3, [r1, #16]
 802c770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802c774:	4293      	cmp	r3, r2
 802c776:	bfb8      	it	lt
 802c778:	4613      	movlt	r3, r2
 802c77a:	6033      	str	r3, [r6, #0]
 802c77c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802c780:	4607      	mov	r7, r0
 802c782:	460c      	mov	r4, r1
 802c784:	b10a      	cbz	r2, 802c78a <_printf_common+0x26>
 802c786:	3301      	adds	r3, #1
 802c788:	6033      	str	r3, [r6, #0]
 802c78a:	6823      	ldr	r3, [r4, #0]
 802c78c:	0699      	lsls	r1, r3, #26
 802c78e:	bf42      	ittt	mi
 802c790:	6833      	ldrmi	r3, [r6, #0]
 802c792:	3302      	addmi	r3, #2
 802c794:	6033      	strmi	r3, [r6, #0]
 802c796:	6825      	ldr	r5, [r4, #0]
 802c798:	f015 0506 	ands.w	r5, r5, #6
 802c79c:	d106      	bne.n	802c7ac <_printf_common+0x48>
 802c79e:	f104 0a19 	add.w	sl, r4, #25
 802c7a2:	68e3      	ldr	r3, [r4, #12]
 802c7a4:	6832      	ldr	r2, [r6, #0]
 802c7a6:	1a9b      	subs	r3, r3, r2
 802c7a8:	42ab      	cmp	r3, r5
 802c7aa:	dc26      	bgt.n	802c7fa <_printf_common+0x96>
 802c7ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802c7b0:	1e13      	subs	r3, r2, #0
 802c7b2:	6822      	ldr	r2, [r4, #0]
 802c7b4:	bf18      	it	ne
 802c7b6:	2301      	movne	r3, #1
 802c7b8:	0692      	lsls	r2, r2, #26
 802c7ba:	d42b      	bmi.n	802c814 <_printf_common+0xb0>
 802c7bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802c7c0:	4649      	mov	r1, r9
 802c7c2:	4638      	mov	r0, r7
 802c7c4:	47c0      	blx	r8
 802c7c6:	3001      	adds	r0, #1
 802c7c8:	d01e      	beq.n	802c808 <_printf_common+0xa4>
 802c7ca:	6823      	ldr	r3, [r4, #0]
 802c7cc:	6922      	ldr	r2, [r4, #16]
 802c7ce:	f003 0306 	and.w	r3, r3, #6
 802c7d2:	2b04      	cmp	r3, #4
 802c7d4:	bf02      	ittt	eq
 802c7d6:	68e5      	ldreq	r5, [r4, #12]
 802c7d8:	6833      	ldreq	r3, [r6, #0]
 802c7da:	1aed      	subeq	r5, r5, r3
 802c7dc:	68a3      	ldr	r3, [r4, #8]
 802c7de:	bf0c      	ite	eq
 802c7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c7e4:	2500      	movne	r5, #0
 802c7e6:	4293      	cmp	r3, r2
 802c7e8:	bfc4      	itt	gt
 802c7ea:	1a9b      	subgt	r3, r3, r2
 802c7ec:	18ed      	addgt	r5, r5, r3
 802c7ee:	2600      	movs	r6, #0
 802c7f0:	341a      	adds	r4, #26
 802c7f2:	42b5      	cmp	r5, r6
 802c7f4:	d11a      	bne.n	802c82c <_printf_common+0xc8>
 802c7f6:	2000      	movs	r0, #0
 802c7f8:	e008      	b.n	802c80c <_printf_common+0xa8>
 802c7fa:	2301      	movs	r3, #1
 802c7fc:	4652      	mov	r2, sl
 802c7fe:	4649      	mov	r1, r9
 802c800:	4638      	mov	r0, r7
 802c802:	47c0      	blx	r8
 802c804:	3001      	adds	r0, #1
 802c806:	d103      	bne.n	802c810 <_printf_common+0xac>
 802c808:	f04f 30ff 	mov.w	r0, #4294967295
 802c80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c810:	3501      	adds	r5, #1
 802c812:	e7c6      	b.n	802c7a2 <_printf_common+0x3e>
 802c814:	18e1      	adds	r1, r4, r3
 802c816:	1c5a      	adds	r2, r3, #1
 802c818:	2030      	movs	r0, #48	; 0x30
 802c81a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802c81e:	4422      	add	r2, r4
 802c820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802c824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802c828:	3302      	adds	r3, #2
 802c82a:	e7c7      	b.n	802c7bc <_printf_common+0x58>
 802c82c:	2301      	movs	r3, #1
 802c82e:	4622      	mov	r2, r4
 802c830:	4649      	mov	r1, r9
 802c832:	4638      	mov	r0, r7
 802c834:	47c0      	blx	r8
 802c836:	3001      	adds	r0, #1
 802c838:	d0e6      	beq.n	802c808 <_printf_common+0xa4>
 802c83a:	3601      	adds	r6, #1
 802c83c:	e7d9      	b.n	802c7f2 <_printf_common+0x8e>
	...

0802c840 <_printf_i>:
 802c840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c844:	7e0f      	ldrb	r7, [r1, #24]
 802c846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c848:	2f78      	cmp	r7, #120	; 0x78
 802c84a:	4691      	mov	r9, r2
 802c84c:	4680      	mov	r8, r0
 802c84e:	460c      	mov	r4, r1
 802c850:	469a      	mov	sl, r3
 802c852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802c856:	d807      	bhi.n	802c868 <_printf_i+0x28>
 802c858:	2f62      	cmp	r7, #98	; 0x62
 802c85a:	d80a      	bhi.n	802c872 <_printf_i+0x32>
 802c85c:	2f00      	cmp	r7, #0
 802c85e:	f000 80d4 	beq.w	802ca0a <_printf_i+0x1ca>
 802c862:	2f58      	cmp	r7, #88	; 0x58
 802c864:	f000 80c0 	beq.w	802c9e8 <_printf_i+0x1a8>
 802c868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c86c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802c870:	e03a      	b.n	802c8e8 <_printf_i+0xa8>
 802c872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802c876:	2b15      	cmp	r3, #21
 802c878:	d8f6      	bhi.n	802c868 <_printf_i+0x28>
 802c87a:	a101      	add	r1, pc, #4	; (adr r1, 802c880 <_printf_i+0x40>)
 802c87c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c880:	0802c8d9 	.word	0x0802c8d9
 802c884:	0802c8ed 	.word	0x0802c8ed
 802c888:	0802c869 	.word	0x0802c869
 802c88c:	0802c869 	.word	0x0802c869
 802c890:	0802c869 	.word	0x0802c869
 802c894:	0802c869 	.word	0x0802c869
 802c898:	0802c8ed 	.word	0x0802c8ed
 802c89c:	0802c869 	.word	0x0802c869
 802c8a0:	0802c869 	.word	0x0802c869
 802c8a4:	0802c869 	.word	0x0802c869
 802c8a8:	0802c869 	.word	0x0802c869
 802c8ac:	0802c9f1 	.word	0x0802c9f1
 802c8b0:	0802c919 	.word	0x0802c919
 802c8b4:	0802c9ab 	.word	0x0802c9ab
 802c8b8:	0802c869 	.word	0x0802c869
 802c8bc:	0802c869 	.word	0x0802c869
 802c8c0:	0802ca13 	.word	0x0802ca13
 802c8c4:	0802c869 	.word	0x0802c869
 802c8c8:	0802c919 	.word	0x0802c919
 802c8cc:	0802c869 	.word	0x0802c869
 802c8d0:	0802c869 	.word	0x0802c869
 802c8d4:	0802c9b3 	.word	0x0802c9b3
 802c8d8:	682b      	ldr	r3, [r5, #0]
 802c8da:	1d1a      	adds	r2, r3, #4
 802c8dc:	681b      	ldr	r3, [r3, #0]
 802c8de:	602a      	str	r2, [r5, #0]
 802c8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c8e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802c8e8:	2301      	movs	r3, #1
 802c8ea:	e09f      	b.n	802ca2c <_printf_i+0x1ec>
 802c8ec:	6820      	ldr	r0, [r4, #0]
 802c8ee:	682b      	ldr	r3, [r5, #0]
 802c8f0:	0607      	lsls	r7, r0, #24
 802c8f2:	f103 0104 	add.w	r1, r3, #4
 802c8f6:	6029      	str	r1, [r5, #0]
 802c8f8:	d501      	bpl.n	802c8fe <_printf_i+0xbe>
 802c8fa:	681e      	ldr	r6, [r3, #0]
 802c8fc:	e003      	b.n	802c906 <_printf_i+0xc6>
 802c8fe:	0646      	lsls	r6, r0, #25
 802c900:	d5fb      	bpl.n	802c8fa <_printf_i+0xba>
 802c902:	f9b3 6000 	ldrsh.w	r6, [r3]
 802c906:	2e00      	cmp	r6, #0
 802c908:	da03      	bge.n	802c912 <_printf_i+0xd2>
 802c90a:	232d      	movs	r3, #45	; 0x2d
 802c90c:	4276      	negs	r6, r6
 802c90e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c912:	485a      	ldr	r0, [pc, #360]	; (802ca7c <_printf_i+0x23c>)
 802c914:	230a      	movs	r3, #10
 802c916:	e012      	b.n	802c93e <_printf_i+0xfe>
 802c918:	682b      	ldr	r3, [r5, #0]
 802c91a:	6820      	ldr	r0, [r4, #0]
 802c91c:	1d19      	adds	r1, r3, #4
 802c91e:	6029      	str	r1, [r5, #0]
 802c920:	0605      	lsls	r5, r0, #24
 802c922:	d501      	bpl.n	802c928 <_printf_i+0xe8>
 802c924:	681e      	ldr	r6, [r3, #0]
 802c926:	e002      	b.n	802c92e <_printf_i+0xee>
 802c928:	0641      	lsls	r1, r0, #25
 802c92a:	d5fb      	bpl.n	802c924 <_printf_i+0xe4>
 802c92c:	881e      	ldrh	r6, [r3, #0]
 802c92e:	4853      	ldr	r0, [pc, #332]	; (802ca7c <_printf_i+0x23c>)
 802c930:	2f6f      	cmp	r7, #111	; 0x6f
 802c932:	bf0c      	ite	eq
 802c934:	2308      	moveq	r3, #8
 802c936:	230a      	movne	r3, #10
 802c938:	2100      	movs	r1, #0
 802c93a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802c93e:	6865      	ldr	r5, [r4, #4]
 802c940:	60a5      	str	r5, [r4, #8]
 802c942:	2d00      	cmp	r5, #0
 802c944:	bfa2      	ittt	ge
 802c946:	6821      	ldrge	r1, [r4, #0]
 802c948:	f021 0104 	bicge.w	r1, r1, #4
 802c94c:	6021      	strge	r1, [r4, #0]
 802c94e:	b90e      	cbnz	r6, 802c954 <_printf_i+0x114>
 802c950:	2d00      	cmp	r5, #0
 802c952:	d04b      	beq.n	802c9ec <_printf_i+0x1ac>
 802c954:	4615      	mov	r5, r2
 802c956:	fbb6 f1f3 	udiv	r1, r6, r3
 802c95a:	fb03 6711 	mls	r7, r3, r1, r6
 802c95e:	5dc7      	ldrb	r7, [r0, r7]
 802c960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802c964:	4637      	mov	r7, r6
 802c966:	42bb      	cmp	r3, r7
 802c968:	460e      	mov	r6, r1
 802c96a:	d9f4      	bls.n	802c956 <_printf_i+0x116>
 802c96c:	2b08      	cmp	r3, #8
 802c96e:	d10b      	bne.n	802c988 <_printf_i+0x148>
 802c970:	6823      	ldr	r3, [r4, #0]
 802c972:	07de      	lsls	r6, r3, #31
 802c974:	d508      	bpl.n	802c988 <_printf_i+0x148>
 802c976:	6923      	ldr	r3, [r4, #16]
 802c978:	6861      	ldr	r1, [r4, #4]
 802c97a:	4299      	cmp	r1, r3
 802c97c:	bfde      	ittt	le
 802c97e:	2330      	movle	r3, #48	; 0x30
 802c980:	f805 3c01 	strble.w	r3, [r5, #-1]
 802c984:	f105 35ff 	addle.w	r5, r5, #4294967295
 802c988:	1b52      	subs	r2, r2, r5
 802c98a:	6122      	str	r2, [r4, #16]
 802c98c:	f8cd a000 	str.w	sl, [sp]
 802c990:	464b      	mov	r3, r9
 802c992:	aa03      	add	r2, sp, #12
 802c994:	4621      	mov	r1, r4
 802c996:	4640      	mov	r0, r8
 802c998:	f7ff fee4 	bl	802c764 <_printf_common>
 802c99c:	3001      	adds	r0, #1
 802c99e:	d14a      	bne.n	802ca36 <_printf_i+0x1f6>
 802c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 802c9a4:	b004      	add	sp, #16
 802c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c9aa:	6823      	ldr	r3, [r4, #0]
 802c9ac:	f043 0320 	orr.w	r3, r3, #32
 802c9b0:	6023      	str	r3, [r4, #0]
 802c9b2:	4833      	ldr	r0, [pc, #204]	; (802ca80 <_printf_i+0x240>)
 802c9b4:	2778      	movs	r7, #120	; 0x78
 802c9b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802c9ba:	6823      	ldr	r3, [r4, #0]
 802c9bc:	6829      	ldr	r1, [r5, #0]
 802c9be:	061f      	lsls	r7, r3, #24
 802c9c0:	f851 6b04 	ldr.w	r6, [r1], #4
 802c9c4:	d402      	bmi.n	802c9cc <_printf_i+0x18c>
 802c9c6:	065f      	lsls	r7, r3, #25
 802c9c8:	bf48      	it	mi
 802c9ca:	b2b6      	uxthmi	r6, r6
 802c9cc:	07df      	lsls	r7, r3, #31
 802c9ce:	bf48      	it	mi
 802c9d0:	f043 0320 	orrmi.w	r3, r3, #32
 802c9d4:	6029      	str	r1, [r5, #0]
 802c9d6:	bf48      	it	mi
 802c9d8:	6023      	strmi	r3, [r4, #0]
 802c9da:	b91e      	cbnz	r6, 802c9e4 <_printf_i+0x1a4>
 802c9dc:	6823      	ldr	r3, [r4, #0]
 802c9de:	f023 0320 	bic.w	r3, r3, #32
 802c9e2:	6023      	str	r3, [r4, #0]
 802c9e4:	2310      	movs	r3, #16
 802c9e6:	e7a7      	b.n	802c938 <_printf_i+0xf8>
 802c9e8:	4824      	ldr	r0, [pc, #144]	; (802ca7c <_printf_i+0x23c>)
 802c9ea:	e7e4      	b.n	802c9b6 <_printf_i+0x176>
 802c9ec:	4615      	mov	r5, r2
 802c9ee:	e7bd      	b.n	802c96c <_printf_i+0x12c>
 802c9f0:	682b      	ldr	r3, [r5, #0]
 802c9f2:	6826      	ldr	r6, [r4, #0]
 802c9f4:	6961      	ldr	r1, [r4, #20]
 802c9f6:	1d18      	adds	r0, r3, #4
 802c9f8:	6028      	str	r0, [r5, #0]
 802c9fa:	0635      	lsls	r5, r6, #24
 802c9fc:	681b      	ldr	r3, [r3, #0]
 802c9fe:	d501      	bpl.n	802ca04 <_printf_i+0x1c4>
 802ca00:	6019      	str	r1, [r3, #0]
 802ca02:	e002      	b.n	802ca0a <_printf_i+0x1ca>
 802ca04:	0670      	lsls	r0, r6, #25
 802ca06:	d5fb      	bpl.n	802ca00 <_printf_i+0x1c0>
 802ca08:	8019      	strh	r1, [r3, #0]
 802ca0a:	2300      	movs	r3, #0
 802ca0c:	6123      	str	r3, [r4, #16]
 802ca0e:	4615      	mov	r5, r2
 802ca10:	e7bc      	b.n	802c98c <_printf_i+0x14c>
 802ca12:	682b      	ldr	r3, [r5, #0]
 802ca14:	1d1a      	adds	r2, r3, #4
 802ca16:	602a      	str	r2, [r5, #0]
 802ca18:	681d      	ldr	r5, [r3, #0]
 802ca1a:	6862      	ldr	r2, [r4, #4]
 802ca1c:	2100      	movs	r1, #0
 802ca1e:	4628      	mov	r0, r5
 802ca20:	f7e3 fbee 	bl	8010200 <memchr>
 802ca24:	b108      	cbz	r0, 802ca2a <_printf_i+0x1ea>
 802ca26:	1b40      	subs	r0, r0, r5
 802ca28:	6060      	str	r0, [r4, #4]
 802ca2a:	6863      	ldr	r3, [r4, #4]
 802ca2c:	6123      	str	r3, [r4, #16]
 802ca2e:	2300      	movs	r3, #0
 802ca30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ca34:	e7aa      	b.n	802c98c <_printf_i+0x14c>
 802ca36:	6923      	ldr	r3, [r4, #16]
 802ca38:	462a      	mov	r2, r5
 802ca3a:	4649      	mov	r1, r9
 802ca3c:	4640      	mov	r0, r8
 802ca3e:	47d0      	blx	sl
 802ca40:	3001      	adds	r0, #1
 802ca42:	d0ad      	beq.n	802c9a0 <_printf_i+0x160>
 802ca44:	6823      	ldr	r3, [r4, #0]
 802ca46:	079b      	lsls	r3, r3, #30
 802ca48:	d413      	bmi.n	802ca72 <_printf_i+0x232>
 802ca4a:	68e0      	ldr	r0, [r4, #12]
 802ca4c:	9b03      	ldr	r3, [sp, #12]
 802ca4e:	4298      	cmp	r0, r3
 802ca50:	bfb8      	it	lt
 802ca52:	4618      	movlt	r0, r3
 802ca54:	e7a6      	b.n	802c9a4 <_printf_i+0x164>
 802ca56:	2301      	movs	r3, #1
 802ca58:	4632      	mov	r2, r6
 802ca5a:	4649      	mov	r1, r9
 802ca5c:	4640      	mov	r0, r8
 802ca5e:	47d0      	blx	sl
 802ca60:	3001      	adds	r0, #1
 802ca62:	d09d      	beq.n	802c9a0 <_printf_i+0x160>
 802ca64:	3501      	adds	r5, #1
 802ca66:	68e3      	ldr	r3, [r4, #12]
 802ca68:	9903      	ldr	r1, [sp, #12]
 802ca6a:	1a5b      	subs	r3, r3, r1
 802ca6c:	42ab      	cmp	r3, r5
 802ca6e:	dcf2      	bgt.n	802ca56 <_printf_i+0x216>
 802ca70:	e7eb      	b.n	802ca4a <_printf_i+0x20a>
 802ca72:	2500      	movs	r5, #0
 802ca74:	f104 0619 	add.w	r6, r4, #25
 802ca78:	e7f5      	b.n	802ca66 <_printf_i+0x226>
 802ca7a:	bf00      	nop
 802ca7c:	0803443c 	.word	0x0803443c
 802ca80:	0803444d 	.word	0x0803444d

0802ca84 <_scanf_float>:
 802ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca88:	b087      	sub	sp, #28
 802ca8a:	4617      	mov	r7, r2
 802ca8c:	9303      	str	r3, [sp, #12]
 802ca8e:	688b      	ldr	r3, [r1, #8]
 802ca90:	1e5a      	subs	r2, r3, #1
 802ca92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802ca96:	bf83      	ittte	hi
 802ca98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802ca9c:	195b      	addhi	r3, r3, r5
 802ca9e:	9302      	strhi	r3, [sp, #8]
 802caa0:	2300      	movls	r3, #0
 802caa2:	bf86      	itte	hi
 802caa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 802caa8:	608b      	strhi	r3, [r1, #8]
 802caaa:	9302      	strls	r3, [sp, #8]
 802caac:	680b      	ldr	r3, [r1, #0]
 802caae:	468b      	mov	fp, r1
 802cab0:	2500      	movs	r5, #0
 802cab2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802cab6:	f84b 3b1c 	str.w	r3, [fp], #28
 802caba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802cabe:	4680      	mov	r8, r0
 802cac0:	460c      	mov	r4, r1
 802cac2:	465e      	mov	r6, fp
 802cac4:	46aa      	mov	sl, r5
 802cac6:	46a9      	mov	r9, r5
 802cac8:	9501      	str	r5, [sp, #4]
 802caca:	68a2      	ldr	r2, [r4, #8]
 802cacc:	b152      	cbz	r2, 802cae4 <_scanf_float+0x60>
 802cace:	683b      	ldr	r3, [r7, #0]
 802cad0:	781b      	ldrb	r3, [r3, #0]
 802cad2:	2b4e      	cmp	r3, #78	; 0x4e
 802cad4:	d864      	bhi.n	802cba0 <_scanf_float+0x11c>
 802cad6:	2b40      	cmp	r3, #64	; 0x40
 802cad8:	d83c      	bhi.n	802cb54 <_scanf_float+0xd0>
 802cada:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802cade:	b2c8      	uxtb	r0, r1
 802cae0:	280e      	cmp	r0, #14
 802cae2:	d93a      	bls.n	802cb5a <_scanf_float+0xd6>
 802cae4:	f1b9 0f00 	cmp.w	r9, #0
 802cae8:	d003      	beq.n	802caf2 <_scanf_float+0x6e>
 802caea:	6823      	ldr	r3, [r4, #0]
 802caec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802caf0:	6023      	str	r3, [r4, #0]
 802caf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 802caf6:	f1ba 0f01 	cmp.w	sl, #1
 802cafa:	f200 8113 	bhi.w	802cd24 <_scanf_float+0x2a0>
 802cafe:	455e      	cmp	r6, fp
 802cb00:	f200 8105 	bhi.w	802cd0e <_scanf_float+0x28a>
 802cb04:	2501      	movs	r5, #1
 802cb06:	4628      	mov	r0, r5
 802cb08:	b007      	add	sp, #28
 802cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802cb12:	2a0d      	cmp	r2, #13
 802cb14:	d8e6      	bhi.n	802cae4 <_scanf_float+0x60>
 802cb16:	a101      	add	r1, pc, #4	; (adr r1, 802cb1c <_scanf_float+0x98>)
 802cb18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802cb1c:	0802cc5b 	.word	0x0802cc5b
 802cb20:	0802cae5 	.word	0x0802cae5
 802cb24:	0802cae5 	.word	0x0802cae5
 802cb28:	0802cae5 	.word	0x0802cae5
 802cb2c:	0802ccbb 	.word	0x0802ccbb
 802cb30:	0802cc93 	.word	0x0802cc93
 802cb34:	0802cae5 	.word	0x0802cae5
 802cb38:	0802cae5 	.word	0x0802cae5
 802cb3c:	0802cc69 	.word	0x0802cc69
 802cb40:	0802cae5 	.word	0x0802cae5
 802cb44:	0802cae5 	.word	0x0802cae5
 802cb48:	0802cae5 	.word	0x0802cae5
 802cb4c:	0802cae5 	.word	0x0802cae5
 802cb50:	0802cc21 	.word	0x0802cc21
 802cb54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802cb58:	e7db      	b.n	802cb12 <_scanf_float+0x8e>
 802cb5a:	290e      	cmp	r1, #14
 802cb5c:	d8c2      	bhi.n	802cae4 <_scanf_float+0x60>
 802cb5e:	a001      	add	r0, pc, #4	; (adr r0, 802cb64 <_scanf_float+0xe0>)
 802cb60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802cb64:	0802cc13 	.word	0x0802cc13
 802cb68:	0802cae5 	.word	0x0802cae5
 802cb6c:	0802cc13 	.word	0x0802cc13
 802cb70:	0802cca7 	.word	0x0802cca7
 802cb74:	0802cae5 	.word	0x0802cae5
 802cb78:	0802cbc1 	.word	0x0802cbc1
 802cb7c:	0802cbfd 	.word	0x0802cbfd
 802cb80:	0802cbfd 	.word	0x0802cbfd
 802cb84:	0802cbfd 	.word	0x0802cbfd
 802cb88:	0802cbfd 	.word	0x0802cbfd
 802cb8c:	0802cbfd 	.word	0x0802cbfd
 802cb90:	0802cbfd 	.word	0x0802cbfd
 802cb94:	0802cbfd 	.word	0x0802cbfd
 802cb98:	0802cbfd 	.word	0x0802cbfd
 802cb9c:	0802cbfd 	.word	0x0802cbfd
 802cba0:	2b6e      	cmp	r3, #110	; 0x6e
 802cba2:	d809      	bhi.n	802cbb8 <_scanf_float+0x134>
 802cba4:	2b60      	cmp	r3, #96	; 0x60
 802cba6:	d8b2      	bhi.n	802cb0e <_scanf_float+0x8a>
 802cba8:	2b54      	cmp	r3, #84	; 0x54
 802cbaa:	d077      	beq.n	802cc9c <_scanf_float+0x218>
 802cbac:	2b59      	cmp	r3, #89	; 0x59
 802cbae:	d199      	bne.n	802cae4 <_scanf_float+0x60>
 802cbb0:	2d07      	cmp	r5, #7
 802cbb2:	d197      	bne.n	802cae4 <_scanf_float+0x60>
 802cbb4:	2508      	movs	r5, #8
 802cbb6:	e029      	b.n	802cc0c <_scanf_float+0x188>
 802cbb8:	2b74      	cmp	r3, #116	; 0x74
 802cbba:	d06f      	beq.n	802cc9c <_scanf_float+0x218>
 802cbbc:	2b79      	cmp	r3, #121	; 0x79
 802cbbe:	e7f6      	b.n	802cbae <_scanf_float+0x12a>
 802cbc0:	6821      	ldr	r1, [r4, #0]
 802cbc2:	05c8      	lsls	r0, r1, #23
 802cbc4:	d51a      	bpl.n	802cbfc <_scanf_float+0x178>
 802cbc6:	9b02      	ldr	r3, [sp, #8]
 802cbc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802cbcc:	6021      	str	r1, [r4, #0]
 802cbce:	f109 0901 	add.w	r9, r9, #1
 802cbd2:	b11b      	cbz	r3, 802cbdc <_scanf_float+0x158>
 802cbd4:	3b01      	subs	r3, #1
 802cbd6:	3201      	adds	r2, #1
 802cbd8:	9302      	str	r3, [sp, #8]
 802cbda:	60a2      	str	r2, [r4, #8]
 802cbdc:	68a3      	ldr	r3, [r4, #8]
 802cbde:	3b01      	subs	r3, #1
 802cbe0:	60a3      	str	r3, [r4, #8]
 802cbe2:	6923      	ldr	r3, [r4, #16]
 802cbe4:	3301      	adds	r3, #1
 802cbe6:	6123      	str	r3, [r4, #16]
 802cbe8:	687b      	ldr	r3, [r7, #4]
 802cbea:	3b01      	subs	r3, #1
 802cbec:	2b00      	cmp	r3, #0
 802cbee:	607b      	str	r3, [r7, #4]
 802cbf0:	f340 8084 	ble.w	802ccfc <_scanf_float+0x278>
 802cbf4:	683b      	ldr	r3, [r7, #0]
 802cbf6:	3301      	adds	r3, #1
 802cbf8:	603b      	str	r3, [r7, #0]
 802cbfa:	e766      	b.n	802caca <_scanf_float+0x46>
 802cbfc:	eb1a 0f05 	cmn.w	sl, r5
 802cc00:	f47f af70 	bne.w	802cae4 <_scanf_float+0x60>
 802cc04:	6822      	ldr	r2, [r4, #0]
 802cc06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802cc0a:	6022      	str	r2, [r4, #0]
 802cc0c:	f806 3b01 	strb.w	r3, [r6], #1
 802cc10:	e7e4      	b.n	802cbdc <_scanf_float+0x158>
 802cc12:	6822      	ldr	r2, [r4, #0]
 802cc14:	0610      	lsls	r0, r2, #24
 802cc16:	f57f af65 	bpl.w	802cae4 <_scanf_float+0x60>
 802cc1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802cc1e:	e7f4      	b.n	802cc0a <_scanf_float+0x186>
 802cc20:	f1ba 0f00 	cmp.w	sl, #0
 802cc24:	d10e      	bne.n	802cc44 <_scanf_float+0x1c0>
 802cc26:	f1b9 0f00 	cmp.w	r9, #0
 802cc2a:	d10e      	bne.n	802cc4a <_scanf_float+0x1c6>
 802cc2c:	6822      	ldr	r2, [r4, #0]
 802cc2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802cc32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802cc36:	d108      	bne.n	802cc4a <_scanf_float+0x1c6>
 802cc38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802cc3c:	6022      	str	r2, [r4, #0]
 802cc3e:	f04f 0a01 	mov.w	sl, #1
 802cc42:	e7e3      	b.n	802cc0c <_scanf_float+0x188>
 802cc44:	f1ba 0f02 	cmp.w	sl, #2
 802cc48:	d055      	beq.n	802ccf6 <_scanf_float+0x272>
 802cc4a:	2d01      	cmp	r5, #1
 802cc4c:	d002      	beq.n	802cc54 <_scanf_float+0x1d0>
 802cc4e:	2d04      	cmp	r5, #4
 802cc50:	f47f af48 	bne.w	802cae4 <_scanf_float+0x60>
 802cc54:	3501      	adds	r5, #1
 802cc56:	b2ed      	uxtb	r5, r5
 802cc58:	e7d8      	b.n	802cc0c <_scanf_float+0x188>
 802cc5a:	f1ba 0f01 	cmp.w	sl, #1
 802cc5e:	f47f af41 	bne.w	802cae4 <_scanf_float+0x60>
 802cc62:	f04f 0a02 	mov.w	sl, #2
 802cc66:	e7d1      	b.n	802cc0c <_scanf_float+0x188>
 802cc68:	b97d      	cbnz	r5, 802cc8a <_scanf_float+0x206>
 802cc6a:	f1b9 0f00 	cmp.w	r9, #0
 802cc6e:	f47f af3c 	bne.w	802caea <_scanf_float+0x66>
 802cc72:	6822      	ldr	r2, [r4, #0]
 802cc74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802cc78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802cc7c:	f47f af39 	bne.w	802caf2 <_scanf_float+0x6e>
 802cc80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802cc84:	6022      	str	r2, [r4, #0]
 802cc86:	2501      	movs	r5, #1
 802cc88:	e7c0      	b.n	802cc0c <_scanf_float+0x188>
 802cc8a:	2d03      	cmp	r5, #3
 802cc8c:	d0e2      	beq.n	802cc54 <_scanf_float+0x1d0>
 802cc8e:	2d05      	cmp	r5, #5
 802cc90:	e7de      	b.n	802cc50 <_scanf_float+0x1cc>
 802cc92:	2d02      	cmp	r5, #2
 802cc94:	f47f af26 	bne.w	802cae4 <_scanf_float+0x60>
 802cc98:	2503      	movs	r5, #3
 802cc9a:	e7b7      	b.n	802cc0c <_scanf_float+0x188>
 802cc9c:	2d06      	cmp	r5, #6
 802cc9e:	f47f af21 	bne.w	802cae4 <_scanf_float+0x60>
 802cca2:	2507      	movs	r5, #7
 802cca4:	e7b2      	b.n	802cc0c <_scanf_float+0x188>
 802cca6:	6822      	ldr	r2, [r4, #0]
 802cca8:	0591      	lsls	r1, r2, #22
 802ccaa:	f57f af1b 	bpl.w	802cae4 <_scanf_float+0x60>
 802ccae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802ccb2:	6022      	str	r2, [r4, #0]
 802ccb4:	f8cd 9004 	str.w	r9, [sp, #4]
 802ccb8:	e7a8      	b.n	802cc0c <_scanf_float+0x188>
 802ccba:	6822      	ldr	r2, [r4, #0]
 802ccbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802ccc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802ccc4:	d006      	beq.n	802ccd4 <_scanf_float+0x250>
 802ccc6:	0550      	lsls	r0, r2, #21
 802ccc8:	f57f af0c 	bpl.w	802cae4 <_scanf_float+0x60>
 802cccc:	f1b9 0f00 	cmp.w	r9, #0
 802ccd0:	f43f af0f 	beq.w	802caf2 <_scanf_float+0x6e>
 802ccd4:	0591      	lsls	r1, r2, #22
 802ccd6:	bf58      	it	pl
 802ccd8:	9901      	ldrpl	r1, [sp, #4]
 802ccda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802ccde:	bf58      	it	pl
 802cce0:	eba9 0101 	subpl.w	r1, r9, r1
 802cce4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802cce8:	bf58      	it	pl
 802ccea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802ccee:	6022      	str	r2, [r4, #0]
 802ccf0:	f04f 0900 	mov.w	r9, #0
 802ccf4:	e78a      	b.n	802cc0c <_scanf_float+0x188>
 802ccf6:	f04f 0a03 	mov.w	sl, #3
 802ccfa:	e787      	b.n	802cc0c <_scanf_float+0x188>
 802ccfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802cd00:	4639      	mov	r1, r7
 802cd02:	4640      	mov	r0, r8
 802cd04:	4798      	blx	r3
 802cd06:	2800      	cmp	r0, #0
 802cd08:	f43f aedf 	beq.w	802caca <_scanf_float+0x46>
 802cd0c:	e6ea      	b.n	802cae4 <_scanf_float+0x60>
 802cd0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802cd12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802cd16:	463a      	mov	r2, r7
 802cd18:	4640      	mov	r0, r8
 802cd1a:	4798      	blx	r3
 802cd1c:	6923      	ldr	r3, [r4, #16]
 802cd1e:	3b01      	subs	r3, #1
 802cd20:	6123      	str	r3, [r4, #16]
 802cd22:	e6ec      	b.n	802cafe <_scanf_float+0x7a>
 802cd24:	1e6b      	subs	r3, r5, #1
 802cd26:	2b06      	cmp	r3, #6
 802cd28:	d825      	bhi.n	802cd76 <_scanf_float+0x2f2>
 802cd2a:	2d02      	cmp	r5, #2
 802cd2c:	d836      	bhi.n	802cd9c <_scanf_float+0x318>
 802cd2e:	455e      	cmp	r6, fp
 802cd30:	f67f aee8 	bls.w	802cb04 <_scanf_float+0x80>
 802cd34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802cd38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802cd3c:	463a      	mov	r2, r7
 802cd3e:	4640      	mov	r0, r8
 802cd40:	4798      	blx	r3
 802cd42:	6923      	ldr	r3, [r4, #16]
 802cd44:	3b01      	subs	r3, #1
 802cd46:	6123      	str	r3, [r4, #16]
 802cd48:	e7f1      	b.n	802cd2e <_scanf_float+0x2aa>
 802cd4a:	9802      	ldr	r0, [sp, #8]
 802cd4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802cd50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802cd54:	9002      	str	r0, [sp, #8]
 802cd56:	463a      	mov	r2, r7
 802cd58:	4640      	mov	r0, r8
 802cd5a:	4798      	blx	r3
 802cd5c:	6923      	ldr	r3, [r4, #16]
 802cd5e:	3b01      	subs	r3, #1
 802cd60:	6123      	str	r3, [r4, #16]
 802cd62:	f10a 3aff 	add.w	sl, sl, #4294967295
 802cd66:	fa5f fa8a 	uxtb.w	sl, sl
 802cd6a:	f1ba 0f02 	cmp.w	sl, #2
 802cd6e:	d1ec      	bne.n	802cd4a <_scanf_float+0x2c6>
 802cd70:	3d03      	subs	r5, #3
 802cd72:	b2ed      	uxtb	r5, r5
 802cd74:	1b76      	subs	r6, r6, r5
 802cd76:	6823      	ldr	r3, [r4, #0]
 802cd78:	05da      	lsls	r2, r3, #23
 802cd7a:	d52f      	bpl.n	802cddc <_scanf_float+0x358>
 802cd7c:	055b      	lsls	r3, r3, #21
 802cd7e:	d510      	bpl.n	802cda2 <_scanf_float+0x31e>
 802cd80:	455e      	cmp	r6, fp
 802cd82:	f67f aebf 	bls.w	802cb04 <_scanf_float+0x80>
 802cd86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802cd8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802cd8e:	463a      	mov	r2, r7
 802cd90:	4640      	mov	r0, r8
 802cd92:	4798      	blx	r3
 802cd94:	6923      	ldr	r3, [r4, #16]
 802cd96:	3b01      	subs	r3, #1
 802cd98:	6123      	str	r3, [r4, #16]
 802cd9a:	e7f1      	b.n	802cd80 <_scanf_float+0x2fc>
 802cd9c:	46aa      	mov	sl, r5
 802cd9e:	9602      	str	r6, [sp, #8]
 802cda0:	e7df      	b.n	802cd62 <_scanf_float+0x2de>
 802cda2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802cda6:	6923      	ldr	r3, [r4, #16]
 802cda8:	2965      	cmp	r1, #101	; 0x65
 802cdaa:	f103 33ff 	add.w	r3, r3, #4294967295
 802cdae:	f106 35ff 	add.w	r5, r6, #4294967295
 802cdb2:	6123      	str	r3, [r4, #16]
 802cdb4:	d00c      	beq.n	802cdd0 <_scanf_float+0x34c>
 802cdb6:	2945      	cmp	r1, #69	; 0x45
 802cdb8:	d00a      	beq.n	802cdd0 <_scanf_float+0x34c>
 802cdba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802cdbe:	463a      	mov	r2, r7
 802cdc0:	4640      	mov	r0, r8
 802cdc2:	4798      	blx	r3
 802cdc4:	6923      	ldr	r3, [r4, #16]
 802cdc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802cdca:	3b01      	subs	r3, #1
 802cdcc:	1eb5      	subs	r5, r6, #2
 802cdce:	6123      	str	r3, [r4, #16]
 802cdd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802cdd4:	463a      	mov	r2, r7
 802cdd6:	4640      	mov	r0, r8
 802cdd8:	4798      	blx	r3
 802cdda:	462e      	mov	r6, r5
 802cddc:	6825      	ldr	r5, [r4, #0]
 802cdde:	f015 0510 	ands.w	r5, r5, #16
 802cde2:	d158      	bne.n	802ce96 <_scanf_float+0x412>
 802cde4:	7035      	strb	r5, [r6, #0]
 802cde6:	6823      	ldr	r3, [r4, #0]
 802cde8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802cdec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802cdf0:	d11c      	bne.n	802ce2c <_scanf_float+0x3a8>
 802cdf2:	9b01      	ldr	r3, [sp, #4]
 802cdf4:	454b      	cmp	r3, r9
 802cdf6:	eba3 0209 	sub.w	r2, r3, r9
 802cdfa:	d124      	bne.n	802ce46 <_scanf_float+0x3c2>
 802cdfc:	2200      	movs	r2, #0
 802cdfe:	4659      	mov	r1, fp
 802ce00:	4640      	mov	r0, r8
 802ce02:	f002 fe2d 	bl	802fa60 <_strtod_r>
 802ce06:	9b03      	ldr	r3, [sp, #12]
 802ce08:	6821      	ldr	r1, [r4, #0]
 802ce0a:	681b      	ldr	r3, [r3, #0]
 802ce0c:	f011 0f02 	tst.w	r1, #2
 802ce10:	ec57 6b10 	vmov	r6, r7, d0
 802ce14:	f103 0204 	add.w	r2, r3, #4
 802ce18:	d020      	beq.n	802ce5c <_scanf_float+0x3d8>
 802ce1a:	9903      	ldr	r1, [sp, #12]
 802ce1c:	600a      	str	r2, [r1, #0]
 802ce1e:	681b      	ldr	r3, [r3, #0]
 802ce20:	e9c3 6700 	strd	r6, r7, [r3]
 802ce24:	68e3      	ldr	r3, [r4, #12]
 802ce26:	3301      	adds	r3, #1
 802ce28:	60e3      	str	r3, [r4, #12]
 802ce2a:	e66c      	b.n	802cb06 <_scanf_float+0x82>
 802ce2c:	9b04      	ldr	r3, [sp, #16]
 802ce2e:	2b00      	cmp	r3, #0
 802ce30:	d0e4      	beq.n	802cdfc <_scanf_float+0x378>
 802ce32:	9905      	ldr	r1, [sp, #20]
 802ce34:	230a      	movs	r3, #10
 802ce36:	462a      	mov	r2, r5
 802ce38:	3101      	adds	r1, #1
 802ce3a:	4640      	mov	r0, r8
 802ce3c:	f002 fe98 	bl	802fb70 <_strtol_r>
 802ce40:	9b04      	ldr	r3, [sp, #16]
 802ce42:	9e05      	ldr	r6, [sp, #20]
 802ce44:	1ac2      	subs	r2, r0, r3
 802ce46:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802ce4a:	429e      	cmp	r6, r3
 802ce4c:	bf28      	it	cs
 802ce4e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802ce52:	4912      	ldr	r1, [pc, #72]	; (802ce9c <_scanf_float+0x418>)
 802ce54:	4630      	mov	r0, r6
 802ce56:	f000 f93f 	bl	802d0d8 <siprintf>
 802ce5a:	e7cf      	b.n	802cdfc <_scanf_float+0x378>
 802ce5c:	f011 0f04 	tst.w	r1, #4
 802ce60:	9903      	ldr	r1, [sp, #12]
 802ce62:	600a      	str	r2, [r1, #0]
 802ce64:	d1db      	bne.n	802ce1e <_scanf_float+0x39a>
 802ce66:	f8d3 8000 	ldr.w	r8, [r3]
 802ce6a:	ee10 2a10 	vmov	r2, s0
 802ce6e:	ee10 0a10 	vmov	r0, s0
 802ce72:	463b      	mov	r3, r7
 802ce74:	4639      	mov	r1, r7
 802ce76:	f7e3 fe71 	bl	8010b5c <__aeabi_dcmpun>
 802ce7a:	b128      	cbz	r0, 802ce88 <_scanf_float+0x404>
 802ce7c:	4808      	ldr	r0, [pc, #32]	; (802cea0 <_scanf_float+0x41c>)
 802ce7e:	f000 fc5f 	bl	802d740 <nanf>
 802ce82:	ed88 0a00 	vstr	s0, [r8]
 802ce86:	e7cd      	b.n	802ce24 <_scanf_float+0x3a0>
 802ce88:	4630      	mov	r0, r6
 802ce8a:	4639      	mov	r1, r7
 802ce8c:	f7e3 fec4 	bl	8010c18 <__aeabi_d2f>
 802ce90:	f8c8 0000 	str.w	r0, [r8]
 802ce94:	e7c6      	b.n	802ce24 <_scanf_float+0x3a0>
 802ce96:	2500      	movs	r5, #0
 802ce98:	e635      	b.n	802cb06 <_scanf_float+0x82>
 802ce9a:	bf00      	nop
 802ce9c:	0803445e 	.word	0x0803445e
 802cea0:	0803442b 	.word	0x0803442b

0802cea4 <std>:
 802cea4:	2300      	movs	r3, #0
 802cea6:	b510      	push	{r4, lr}
 802cea8:	4604      	mov	r4, r0
 802ceaa:	e9c0 3300 	strd	r3, r3, [r0]
 802ceae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ceb2:	6083      	str	r3, [r0, #8]
 802ceb4:	8181      	strh	r1, [r0, #12]
 802ceb6:	6643      	str	r3, [r0, #100]	; 0x64
 802ceb8:	81c2      	strh	r2, [r0, #14]
 802ceba:	6183      	str	r3, [r0, #24]
 802cebc:	4619      	mov	r1, r3
 802cebe:	2208      	movs	r2, #8
 802cec0:	305c      	adds	r0, #92	; 0x5c
 802cec2:	f000 fa59 	bl	802d378 <memset>
 802cec6:	4b0d      	ldr	r3, [pc, #52]	; (802cefc <std+0x58>)
 802cec8:	6263      	str	r3, [r4, #36]	; 0x24
 802ceca:	4b0d      	ldr	r3, [pc, #52]	; (802cf00 <std+0x5c>)
 802cecc:	62a3      	str	r3, [r4, #40]	; 0x28
 802cece:	4b0d      	ldr	r3, [pc, #52]	; (802cf04 <std+0x60>)
 802ced0:	62e3      	str	r3, [r4, #44]	; 0x2c
 802ced2:	4b0d      	ldr	r3, [pc, #52]	; (802cf08 <std+0x64>)
 802ced4:	6323      	str	r3, [r4, #48]	; 0x30
 802ced6:	4b0d      	ldr	r3, [pc, #52]	; (802cf0c <std+0x68>)
 802ced8:	6224      	str	r4, [r4, #32]
 802ceda:	429c      	cmp	r4, r3
 802cedc:	d006      	beq.n	802ceec <std+0x48>
 802cede:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802cee2:	4294      	cmp	r4, r2
 802cee4:	d002      	beq.n	802ceec <std+0x48>
 802cee6:	33d0      	adds	r3, #208	; 0xd0
 802cee8:	429c      	cmp	r4, r3
 802ceea:	d105      	bne.n	802cef8 <std+0x54>
 802ceec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802cef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cef4:	f000 bc0a 	b.w	802d70c <__retarget_lock_init_recursive>
 802cef8:	bd10      	pop	{r4, pc}
 802cefa:	bf00      	nop
 802cefc:	0802d171 	.word	0x0802d171
 802cf00:	0802d197 	.word	0x0802d197
 802cf04:	0802d1cf 	.word	0x0802d1cf
 802cf08:	0802d1f3 	.word	0x0802d1f3
 802cf0c:	2000d99c 	.word	0x2000d99c

0802cf10 <stdio_exit_handler>:
 802cf10:	4a02      	ldr	r2, [pc, #8]	; (802cf1c <stdio_exit_handler+0xc>)
 802cf12:	4903      	ldr	r1, [pc, #12]	; (802cf20 <stdio_exit_handler+0x10>)
 802cf14:	4803      	ldr	r0, [pc, #12]	; (802cf24 <stdio_exit_handler+0x14>)
 802cf16:	f000 b87b 	b.w	802d010 <_fwalk_sglue>
 802cf1a:	bf00      	nop
 802cf1c:	20000130 	.word	0x20000130
 802cf20:	080307f9 	.word	0x080307f9
 802cf24:	2000013c 	.word	0x2000013c

0802cf28 <cleanup_stdio>:
 802cf28:	6841      	ldr	r1, [r0, #4]
 802cf2a:	4b0c      	ldr	r3, [pc, #48]	; (802cf5c <cleanup_stdio+0x34>)
 802cf2c:	4299      	cmp	r1, r3
 802cf2e:	b510      	push	{r4, lr}
 802cf30:	4604      	mov	r4, r0
 802cf32:	d001      	beq.n	802cf38 <cleanup_stdio+0x10>
 802cf34:	f003 fc60 	bl	80307f8 <_fflush_r>
 802cf38:	68a1      	ldr	r1, [r4, #8]
 802cf3a:	4b09      	ldr	r3, [pc, #36]	; (802cf60 <cleanup_stdio+0x38>)
 802cf3c:	4299      	cmp	r1, r3
 802cf3e:	d002      	beq.n	802cf46 <cleanup_stdio+0x1e>
 802cf40:	4620      	mov	r0, r4
 802cf42:	f003 fc59 	bl	80307f8 <_fflush_r>
 802cf46:	68e1      	ldr	r1, [r4, #12]
 802cf48:	4b06      	ldr	r3, [pc, #24]	; (802cf64 <cleanup_stdio+0x3c>)
 802cf4a:	4299      	cmp	r1, r3
 802cf4c:	d004      	beq.n	802cf58 <cleanup_stdio+0x30>
 802cf4e:	4620      	mov	r0, r4
 802cf50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cf54:	f003 bc50 	b.w	80307f8 <_fflush_r>
 802cf58:	bd10      	pop	{r4, pc}
 802cf5a:	bf00      	nop
 802cf5c:	2000d99c 	.word	0x2000d99c
 802cf60:	2000da04 	.word	0x2000da04
 802cf64:	2000da6c 	.word	0x2000da6c

0802cf68 <global_stdio_init.part.0>:
 802cf68:	b510      	push	{r4, lr}
 802cf6a:	4b0b      	ldr	r3, [pc, #44]	; (802cf98 <global_stdio_init.part.0+0x30>)
 802cf6c:	4c0b      	ldr	r4, [pc, #44]	; (802cf9c <global_stdio_init.part.0+0x34>)
 802cf6e:	4a0c      	ldr	r2, [pc, #48]	; (802cfa0 <global_stdio_init.part.0+0x38>)
 802cf70:	601a      	str	r2, [r3, #0]
 802cf72:	4620      	mov	r0, r4
 802cf74:	2200      	movs	r2, #0
 802cf76:	2104      	movs	r1, #4
 802cf78:	f7ff ff94 	bl	802cea4 <std>
 802cf7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802cf80:	2201      	movs	r2, #1
 802cf82:	2109      	movs	r1, #9
 802cf84:	f7ff ff8e 	bl	802cea4 <std>
 802cf88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802cf8c:	2202      	movs	r2, #2
 802cf8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cf92:	2112      	movs	r1, #18
 802cf94:	f7ff bf86 	b.w	802cea4 <std>
 802cf98:	2000dad4 	.word	0x2000dad4
 802cf9c:	2000d99c 	.word	0x2000d99c
 802cfa0:	0802cf11 	.word	0x0802cf11

0802cfa4 <__sfp_lock_acquire>:
 802cfa4:	4801      	ldr	r0, [pc, #4]	; (802cfac <__sfp_lock_acquire+0x8>)
 802cfa6:	f000 bbb2 	b.w	802d70e <__retarget_lock_acquire_recursive>
 802cfaa:	bf00      	nop
 802cfac:	2000dadd 	.word	0x2000dadd

0802cfb0 <__sfp_lock_release>:
 802cfb0:	4801      	ldr	r0, [pc, #4]	; (802cfb8 <__sfp_lock_release+0x8>)
 802cfb2:	f000 bbad 	b.w	802d710 <__retarget_lock_release_recursive>
 802cfb6:	bf00      	nop
 802cfb8:	2000dadd 	.word	0x2000dadd

0802cfbc <__sinit>:
 802cfbc:	b510      	push	{r4, lr}
 802cfbe:	4604      	mov	r4, r0
 802cfc0:	f7ff fff0 	bl	802cfa4 <__sfp_lock_acquire>
 802cfc4:	6a23      	ldr	r3, [r4, #32]
 802cfc6:	b11b      	cbz	r3, 802cfd0 <__sinit+0x14>
 802cfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cfcc:	f7ff bff0 	b.w	802cfb0 <__sfp_lock_release>
 802cfd0:	4b04      	ldr	r3, [pc, #16]	; (802cfe4 <__sinit+0x28>)
 802cfd2:	6223      	str	r3, [r4, #32]
 802cfd4:	4b04      	ldr	r3, [pc, #16]	; (802cfe8 <__sinit+0x2c>)
 802cfd6:	681b      	ldr	r3, [r3, #0]
 802cfd8:	2b00      	cmp	r3, #0
 802cfda:	d1f5      	bne.n	802cfc8 <__sinit+0xc>
 802cfdc:	f7ff ffc4 	bl	802cf68 <global_stdio_init.part.0>
 802cfe0:	e7f2      	b.n	802cfc8 <__sinit+0xc>
 802cfe2:	bf00      	nop
 802cfe4:	0802cf29 	.word	0x0802cf29
 802cfe8:	2000dad4 	.word	0x2000dad4

0802cfec <fiprintf>:
 802cfec:	b40e      	push	{r1, r2, r3}
 802cfee:	b503      	push	{r0, r1, lr}
 802cff0:	4601      	mov	r1, r0
 802cff2:	ab03      	add	r3, sp, #12
 802cff4:	4805      	ldr	r0, [pc, #20]	; (802d00c <fiprintf+0x20>)
 802cff6:	f853 2b04 	ldr.w	r2, [r3], #4
 802cffa:	6800      	ldr	r0, [r0, #0]
 802cffc:	9301      	str	r3, [sp, #4]
 802cffe:	f003 f90d 	bl	803021c <_vfiprintf_r>
 802d002:	b002      	add	sp, #8
 802d004:	f85d eb04 	ldr.w	lr, [sp], #4
 802d008:	b003      	add	sp, #12
 802d00a:	4770      	bx	lr
 802d00c:	20000188 	.word	0x20000188

0802d010 <_fwalk_sglue>:
 802d010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d014:	4607      	mov	r7, r0
 802d016:	4688      	mov	r8, r1
 802d018:	4614      	mov	r4, r2
 802d01a:	2600      	movs	r6, #0
 802d01c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d020:	f1b9 0901 	subs.w	r9, r9, #1
 802d024:	d505      	bpl.n	802d032 <_fwalk_sglue+0x22>
 802d026:	6824      	ldr	r4, [r4, #0]
 802d028:	2c00      	cmp	r4, #0
 802d02a:	d1f7      	bne.n	802d01c <_fwalk_sglue+0xc>
 802d02c:	4630      	mov	r0, r6
 802d02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d032:	89ab      	ldrh	r3, [r5, #12]
 802d034:	2b01      	cmp	r3, #1
 802d036:	d907      	bls.n	802d048 <_fwalk_sglue+0x38>
 802d038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d03c:	3301      	adds	r3, #1
 802d03e:	d003      	beq.n	802d048 <_fwalk_sglue+0x38>
 802d040:	4629      	mov	r1, r5
 802d042:	4638      	mov	r0, r7
 802d044:	47c0      	blx	r8
 802d046:	4306      	orrs	r6, r0
 802d048:	3568      	adds	r5, #104	; 0x68
 802d04a:	e7e9      	b.n	802d020 <_fwalk_sglue+0x10>

0802d04c <iprintf>:
 802d04c:	b40f      	push	{r0, r1, r2, r3}
 802d04e:	b507      	push	{r0, r1, r2, lr}
 802d050:	4906      	ldr	r1, [pc, #24]	; (802d06c <iprintf+0x20>)
 802d052:	ab04      	add	r3, sp, #16
 802d054:	6808      	ldr	r0, [r1, #0]
 802d056:	f853 2b04 	ldr.w	r2, [r3], #4
 802d05a:	6881      	ldr	r1, [r0, #8]
 802d05c:	9301      	str	r3, [sp, #4]
 802d05e:	f003 f8dd 	bl	803021c <_vfiprintf_r>
 802d062:	b003      	add	sp, #12
 802d064:	f85d eb04 	ldr.w	lr, [sp], #4
 802d068:	b004      	add	sp, #16
 802d06a:	4770      	bx	lr
 802d06c:	20000188 	.word	0x20000188

0802d070 <sniprintf>:
 802d070:	b40c      	push	{r2, r3}
 802d072:	b530      	push	{r4, r5, lr}
 802d074:	4b17      	ldr	r3, [pc, #92]	; (802d0d4 <sniprintf+0x64>)
 802d076:	1e0c      	subs	r4, r1, #0
 802d078:	681d      	ldr	r5, [r3, #0]
 802d07a:	b09d      	sub	sp, #116	; 0x74
 802d07c:	da08      	bge.n	802d090 <sniprintf+0x20>
 802d07e:	238b      	movs	r3, #139	; 0x8b
 802d080:	602b      	str	r3, [r5, #0]
 802d082:	f04f 30ff 	mov.w	r0, #4294967295
 802d086:	b01d      	add	sp, #116	; 0x74
 802d088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d08c:	b002      	add	sp, #8
 802d08e:	4770      	bx	lr
 802d090:	f44f 7302 	mov.w	r3, #520	; 0x208
 802d094:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d098:	bf14      	ite	ne
 802d09a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d09e:	4623      	moveq	r3, r4
 802d0a0:	9304      	str	r3, [sp, #16]
 802d0a2:	9307      	str	r3, [sp, #28]
 802d0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d0a8:	9002      	str	r0, [sp, #8]
 802d0aa:	9006      	str	r0, [sp, #24]
 802d0ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d0b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802d0b2:	ab21      	add	r3, sp, #132	; 0x84
 802d0b4:	a902      	add	r1, sp, #8
 802d0b6:	4628      	mov	r0, r5
 802d0b8:	9301      	str	r3, [sp, #4]
 802d0ba:	f002 fdb5 	bl	802fc28 <_svfiprintf_r>
 802d0be:	1c43      	adds	r3, r0, #1
 802d0c0:	bfbc      	itt	lt
 802d0c2:	238b      	movlt	r3, #139	; 0x8b
 802d0c4:	602b      	strlt	r3, [r5, #0]
 802d0c6:	2c00      	cmp	r4, #0
 802d0c8:	d0dd      	beq.n	802d086 <sniprintf+0x16>
 802d0ca:	9b02      	ldr	r3, [sp, #8]
 802d0cc:	2200      	movs	r2, #0
 802d0ce:	701a      	strb	r2, [r3, #0]
 802d0d0:	e7d9      	b.n	802d086 <sniprintf+0x16>
 802d0d2:	bf00      	nop
 802d0d4:	20000188 	.word	0x20000188

0802d0d8 <siprintf>:
 802d0d8:	b40e      	push	{r1, r2, r3}
 802d0da:	b500      	push	{lr}
 802d0dc:	b09c      	sub	sp, #112	; 0x70
 802d0de:	ab1d      	add	r3, sp, #116	; 0x74
 802d0e0:	9002      	str	r0, [sp, #8]
 802d0e2:	9006      	str	r0, [sp, #24]
 802d0e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d0e8:	4809      	ldr	r0, [pc, #36]	; (802d110 <siprintf+0x38>)
 802d0ea:	9107      	str	r1, [sp, #28]
 802d0ec:	9104      	str	r1, [sp, #16]
 802d0ee:	4909      	ldr	r1, [pc, #36]	; (802d114 <siprintf+0x3c>)
 802d0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 802d0f4:	9105      	str	r1, [sp, #20]
 802d0f6:	6800      	ldr	r0, [r0, #0]
 802d0f8:	9301      	str	r3, [sp, #4]
 802d0fa:	a902      	add	r1, sp, #8
 802d0fc:	f002 fd94 	bl	802fc28 <_svfiprintf_r>
 802d100:	9b02      	ldr	r3, [sp, #8]
 802d102:	2200      	movs	r2, #0
 802d104:	701a      	strb	r2, [r3, #0]
 802d106:	b01c      	add	sp, #112	; 0x70
 802d108:	f85d eb04 	ldr.w	lr, [sp], #4
 802d10c:	b003      	add	sp, #12
 802d10e:	4770      	bx	lr
 802d110:	20000188 	.word	0x20000188
 802d114:	ffff0208 	.word	0xffff0208

0802d118 <siscanf>:
 802d118:	b40e      	push	{r1, r2, r3}
 802d11a:	b510      	push	{r4, lr}
 802d11c:	b09f      	sub	sp, #124	; 0x7c
 802d11e:	ac21      	add	r4, sp, #132	; 0x84
 802d120:	f44f 7101 	mov.w	r1, #516	; 0x204
 802d124:	f854 2b04 	ldr.w	r2, [r4], #4
 802d128:	9201      	str	r2, [sp, #4]
 802d12a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802d12e:	9004      	str	r0, [sp, #16]
 802d130:	9008      	str	r0, [sp, #32]
 802d132:	f7e3 f8b5 	bl	80102a0 <strlen>
 802d136:	4b0c      	ldr	r3, [pc, #48]	; (802d168 <siscanf+0x50>)
 802d138:	9005      	str	r0, [sp, #20]
 802d13a:	9009      	str	r0, [sp, #36]	; 0x24
 802d13c:	930d      	str	r3, [sp, #52]	; 0x34
 802d13e:	480b      	ldr	r0, [pc, #44]	; (802d16c <siscanf+0x54>)
 802d140:	9a01      	ldr	r2, [sp, #4]
 802d142:	6800      	ldr	r0, [r0, #0]
 802d144:	9403      	str	r4, [sp, #12]
 802d146:	2300      	movs	r3, #0
 802d148:	9311      	str	r3, [sp, #68]	; 0x44
 802d14a:	9316      	str	r3, [sp, #88]	; 0x58
 802d14c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d150:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d154:	a904      	add	r1, sp, #16
 802d156:	4623      	mov	r3, r4
 802d158:	f002 febe 	bl	802fed8 <__ssvfiscanf_r>
 802d15c:	b01f      	add	sp, #124	; 0x7c
 802d15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d162:	b003      	add	sp, #12
 802d164:	4770      	bx	lr
 802d166:	bf00      	nop
 802d168:	0802d193 	.word	0x0802d193
 802d16c:	20000188 	.word	0x20000188

0802d170 <__sread>:
 802d170:	b510      	push	{r4, lr}
 802d172:	460c      	mov	r4, r1
 802d174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d178:	f000 fa6a 	bl	802d650 <_read_r>
 802d17c:	2800      	cmp	r0, #0
 802d17e:	bfab      	itete	ge
 802d180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d182:	89a3      	ldrhlt	r3, [r4, #12]
 802d184:	181b      	addge	r3, r3, r0
 802d186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d18a:	bfac      	ite	ge
 802d18c:	6563      	strge	r3, [r4, #84]	; 0x54
 802d18e:	81a3      	strhlt	r3, [r4, #12]
 802d190:	bd10      	pop	{r4, pc}

0802d192 <__seofread>:
 802d192:	2000      	movs	r0, #0
 802d194:	4770      	bx	lr

0802d196 <__swrite>:
 802d196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d19a:	461f      	mov	r7, r3
 802d19c:	898b      	ldrh	r3, [r1, #12]
 802d19e:	05db      	lsls	r3, r3, #23
 802d1a0:	4605      	mov	r5, r0
 802d1a2:	460c      	mov	r4, r1
 802d1a4:	4616      	mov	r6, r2
 802d1a6:	d505      	bpl.n	802d1b4 <__swrite+0x1e>
 802d1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d1ac:	2302      	movs	r3, #2
 802d1ae:	2200      	movs	r2, #0
 802d1b0:	f000 fa3c 	bl	802d62c <_lseek_r>
 802d1b4:	89a3      	ldrh	r3, [r4, #12]
 802d1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d1ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d1be:	81a3      	strh	r3, [r4, #12]
 802d1c0:	4632      	mov	r2, r6
 802d1c2:	463b      	mov	r3, r7
 802d1c4:	4628      	mov	r0, r5
 802d1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d1ca:	f000 ba63 	b.w	802d694 <_write_r>

0802d1ce <__sseek>:
 802d1ce:	b510      	push	{r4, lr}
 802d1d0:	460c      	mov	r4, r1
 802d1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d1d6:	f000 fa29 	bl	802d62c <_lseek_r>
 802d1da:	1c43      	adds	r3, r0, #1
 802d1dc:	89a3      	ldrh	r3, [r4, #12]
 802d1de:	bf15      	itete	ne
 802d1e0:	6560      	strne	r0, [r4, #84]	; 0x54
 802d1e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d1e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d1ea:	81a3      	strheq	r3, [r4, #12]
 802d1ec:	bf18      	it	ne
 802d1ee:	81a3      	strhne	r3, [r4, #12]
 802d1f0:	bd10      	pop	{r4, pc}

0802d1f2 <__sclose>:
 802d1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d1f6:	f000 b9b3 	b.w	802d560 <_close_r>

0802d1fa <__swbuf_r>:
 802d1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d1fc:	460e      	mov	r6, r1
 802d1fe:	4614      	mov	r4, r2
 802d200:	4605      	mov	r5, r0
 802d202:	b118      	cbz	r0, 802d20c <__swbuf_r+0x12>
 802d204:	6a03      	ldr	r3, [r0, #32]
 802d206:	b90b      	cbnz	r3, 802d20c <__swbuf_r+0x12>
 802d208:	f7ff fed8 	bl	802cfbc <__sinit>
 802d20c:	69a3      	ldr	r3, [r4, #24]
 802d20e:	60a3      	str	r3, [r4, #8]
 802d210:	89a3      	ldrh	r3, [r4, #12]
 802d212:	071a      	lsls	r2, r3, #28
 802d214:	d525      	bpl.n	802d262 <__swbuf_r+0x68>
 802d216:	6923      	ldr	r3, [r4, #16]
 802d218:	b31b      	cbz	r3, 802d262 <__swbuf_r+0x68>
 802d21a:	6823      	ldr	r3, [r4, #0]
 802d21c:	6922      	ldr	r2, [r4, #16]
 802d21e:	1a98      	subs	r0, r3, r2
 802d220:	6963      	ldr	r3, [r4, #20]
 802d222:	b2f6      	uxtb	r6, r6
 802d224:	4283      	cmp	r3, r0
 802d226:	4637      	mov	r7, r6
 802d228:	dc04      	bgt.n	802d234 <__swbuf_r+0x3a>
 802d22a:	4621      	mov	r1, r4
 802d22c:	4628      	mov	r0, r5
 802d22e:	f003 fae3 	bl	80307f8 <_fflush_r>
 802d232:	b9e0      	cbnz	r0, 802d26e <__swbuf_r+0x74>
 802d234:	68a3      	ldr	r3, [r4, #8]
 802d236:	3b01      	subs	r3, #1
 802d238:	60a3      	str	r3, [r4, #8]
 802d23a:	6823      	ldr	r3, [r4, #0]
 802d23c:	1c5a      	adds	r2, r3, #1
 802d23e:	6022      	str	r2, [r4, #0]
 802d240:	701e      	strb	r6, [r3, #0]
 802d242:	6962      	ldr	r2, [r4, #20]
 802d244:	1c43      	adds	r3, r0, #1
 802d246:	429a      	cmp	r2, r3
 802d248:	d004      	beq.n	802d254 <__swbuf_r+0x5a>
 802d24a:	89a3      	ldrh	r3, [r4, #12]
 802d24c:	07db      	lsls	r3, r3, #31
 802d24e:	d506      	bpl.n	802d25e <__swbuf_r+0x64>
 802d250:	2e0a      	cmp	r6, #10
 802d252:	d104      	bne.n	802d25e <__swbuf_r+0x64>
 802d254:	4621      	mov	r1, r4
 802d256:	4628      	mov	r0, r5
 802d258:	f003 face 	bl	80307f8 <_fflush_r>
 802d25c:	b938      	cbnz	r0, 802d26e <__swbuf_r+0x74>
 802d25e:	4638      	mov	r0, r7
 802d260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d262:	4621      	mov	r1, r4
 802d264:	4628      	mov	r0, r5
 802d266:	f000 f805 	bl	802d274 <__swsetup_r>
 802d26a:	2800      	cmp	r0, #0
 802d26c:	d0d5      	beq.n	802d21a <__swbuf_r+0x20>
 802d26e:	f04f 37ff 	mov.w	r7, #4294967295
 802d272:	e7f4      	b.n	802d25e <__swbuf_r+0x64>

0802d274 <__swsetup_r>:
 802d274:	b538      	push	{r3, r4, r5, lr}
 802d276:	4b2a      	ldr	r3, [pc, #168]	; (802d320 <__swsetup_r+0xac>)
 802d278:	4605      	mov	r5, r0
 802d27a:	6818      	ldr	r0, [r3, #0]
 802d27c:	460c      	mov	r4, r1
 802d27e:	b118      	cbz	r0, 802d288 <__swsetup_r+0x14>
 802d280:	6a03      	ldr	r3, [r0, #32]
 802d282:	b90b      	cbnz	r3, 802d288 <__swsetup_r+0x14>
 802d284:	f7ff fe9a 	bl	802cfbc <__sinit>
 802d288:	89a3      	ldrh	r3, [r4, #12]
 802d28a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d28e:	0718      	lsls	r0, r3, #28
 802d290:	d422      	bmi.n	802d2d8 <__swsetup_r+0x64>
 802d292:	06d9      	lsls	r1, r3, #27
 802d294:	d407      	bmi.n	802d2a6 <__swsetup_r+0x32>
 802d296:	2309      	movs	r3, #9
 802d298:	602b      	str	r3, [r5, #0]
 802d29a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d29e:	81a3      	strh	r3, [r4, #12]
 802d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 802d2a4:	e034      	b.n	802d310 <__swsetup_r+0x9c>
 802d2a6:	0758      	lsls	r0, r3, #29
 802d2a8:	d512      	bpl.n	802d2d0 <__swsetup_r+0x5c>
 802d2aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d2ac:	b141      	cbz	r1, 802d2c0 <__swsetup_r+0x4c>
 802d2ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d2b2:	4299      	cmp	r1, r3
 802d2b4:	d002      	beq.n	802d2bc <__swsetup_r+0x48>
 802d2b6:	4628      	mov	r0, r5
 802d2b8:	f001 f8cc 	bl	802e454 <_free_r>
 802d2bc:	2300      	movs	r3, #0
 802d2be:	6363      	str	r3, [r4, #52]	; 0x34
 802d2c0:	89a3      	ldrh	r3, [r4, #12]
 802d2c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d2c6:	81a3      	strh	r3, [r4, #12]
 802d2c8:	2300      	movs	r3, #0
 802d2ca:	6063      	str	r3, [r4, #4]
 802d2cc:	6923      	ldr	r3, [r4, #16]
 802d2ce:	6023      	str	r3, [r4, #0]
 802d2d0:	89a3      	ldrh	r3, [r4, #12]
 802d2d2:	f043 0308 	orr.w	r3, r3, #8
 802d2d6:	81a3      	strh	r3, [r4, #12]
 802d2d8:	6923      	ldr	r3, [r4, #16]
 802d2da:	b94b      	cbnz	r3, 802d2f0 <__swsetup_r+0x7c>
 802d2dc:	89a3      	ldrh	r3, [r4, #12]
 802d2de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d2e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d2e6:	d003      	beq.n	802d2f0 <__swsetup_r+0x7c>
 802d2e8:	4621      	mov	r1, r4
 802d2ea:	4628      	mov	r0, r5
 802d2ec:	f003 fad2 	bl	8030894 <__smakebuf_r>
 802d2f0:	89a0      	ldrh	r0, [r4, #12]
 802d2f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d2f6:	f010 0301 	ands.w	r3, r0, #1
 802d2fa:	d00a      	beq.n	802d312 <__swsetup_r+0x9e>
 802d2fc:	2300      	movs	r3, #0
 802d2fe:	60a3      	str	r3, [r4, #8]
 802d300:	6963      	ldr	r3, [r4, #20]
 802d302:	425b      	negs	r3, r3
 802d304:	61a3      	str	r3, [r4, #24]
 802d306:	6923      	ldr	r3, [r4, #16]
 802d308:	b943      	cbnz	r3, 802d31c <__swsetup_r+0xa8>
 802d30a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d30e:	d1c4      	bne.n	802d29a <__swsetup_r+0x26>
 802d310:	bd38      	pop	{r3, r4, r5, pc}
 802d312:	0781      	lsls	r1, r0, #30
 802d314:	bf58      	it	pl
 802d316:	6963      	ldrpl	r3, [r4, #20]
 802d318:	60a3      	str	r3, [r4, #8]
 802d31a:	e7f4      	b.n	802d306 <__swsetup_r+0x92>
 802d31c:	2000      	movs	r0, #0
 802d31e:	e7f7      	b.n	802d310 <__swsetup_r+0x9c>
 802d320:	20000188 	.word	0x20000188

0802d324 <memcmp>:
 802d324:	b510      	push	{r4, lr}
 802d326:	3901      	subs	r1, #1
 802d328:	4402      	add	r2, r0
 802d32a:	4290      	cmp	r0, r2
 802d32c:	d101      	bne.n	802d332 <memcmp+0xe>
 802d32e:	2000      	movs	r0, #0
 802d330:	e005      	b.n	802d33e <memcmp+0x1a>
 802d332:	7803      	ldrb	r3, [r0, #0]
 802d334:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d338:	42a3      	cmp	r3, r4
 802d33a:	d001      	beq.n	802d340 <memcmp+0x1c>
 802d33c:	1b18      	subs	r0, r3, r4
 802d33e:	bd10      	pop	{r4, pc}
 802d340:	3001      	adds	r0, #1
 802d342:	e7f2      	b.n	802d32a <memcmp+0x6>

0802d344 <memmove>:
 802d344:	4288      	cmp	r0, r1
 802d346:	b510      	push	{r4, lr}
 802d348:	eb01 0402 	add.w	r4, r1, r2
 802d34c:	d902      	bls.n	802d354 <memmove+0x10>
 802d34e:	4284      	cmp	r4, r0
 802d350:	4623      	mov	r3, r4
 802d352:	d807      	bhi.n	802d364 <memmove+0x20>
 802d354:	1e43      	subs	r3, r0, #1
 802d356:	42a1      	cmp	r1, r4
 802d358:	d008      	beq.n	802d36c <memmove+0x28>
 802d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d362:	e7f8      	b.n	802d356 <memmove+0x12>
 802d364:	4402      	add	r2, r0
 802d366:	4601      	mov	r1, r0
 802d368:	428a      	cmp	r2, r1
 802d36a:	d100      	bne.n	802d36e <memmove+0x2a>
 802d36c:	bd10      	pop	{r4, pc}
 802d36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d376:	e7f7      	b.n	802d368 <memmove+0x24>

0802d378 <memset>:
 802d378:	4402      	add	r2, r0
 802d37a:	4603      	mov	r3, r0
 802d37c:	4293      	cmp	r3, r2
 802d37e:	d100      	bne.n	802d382 <memset+0xa>
 802d380:	4770      	bx	lr
 802d382:	f803 1b01 	strb.w	r1, [r3], #1
 802d386:	e7f9      	b.n	802d37c <memset+0x4>

0802d388 <strcat>:
 802d388:	b510      	push	{r4, lr}
 802d38a:	4602      	mov	r2, r0
 802d38c:	7814      	ldrb	r4, [r2, #0]
 802d38e:	4613      	mov	r3, r2
 802d390:	3201      	adds	r2, #1
 802d392:	2c00      	cmp	r4, #0
 802d394:	d1fa      	bne.n	802d38c <strcat+0x4>
 802d396:	3b01      	subs	r3, #1
 802d398:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d39c:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d3a0:	2a00      	cmp	r2, #0
 802d3a2:	d1f9      	bne.n	802d398 <strcat+0x10>
 802d3a4:	bd10      	pop	{r4, pc}

0802d3a6 <strchr>:
 802d3a6:	b2c9      	uxtb	r1, r1
 802d3a8:	4603      	mov	r3, r0
 802d3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d3ae:	b11a      	cbz	r2, 802d3b8 <strchr+0x12>
 802d3b0:	428a      	cmp	r2, r1
 802d3b2:	d1f9      	bne.n	802d3a8 <strchr+0x2>
 802d3b4:	4618      	mov	r0, r3
 802d3b6:	4770      	bx	lr
 802d3b8:	2900      	cmp	r1, #0
 802d3ba:	bf18      	it	ne
 802d3bc:	2300      	movne	r3, #0
 802d3be:	e7f9      	b.n	802d3b4 <strchr+0xe>

0802d3c0 <strcspn>:
 802d3c0:	b570      	push	{r4, r5, r6, lr}
 802d3c2:	4603      	mov	r3, r0
 802d3c4:	461e      	mov	r6, r3
 802d3c6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d3ca:	b144      	cbz	r4, 802d3de <strcspn+0x1e>
 802d3cc:	1e4a      	subs	r2, r1, #1
 802d3ce:	e001      	b.n	802d3d4 <strcspn+0x14>
 802d3d0:	42a5      	cmp	r5, r4
 802d3d2:	d004      	beq.n	802d3de <strcspn+0x1e>
 802d3d4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d3d8:	2d00      	cmp	r5, #0
 802d3da:	d1f9      	bne.n	802d3d0 <strcspn+0x10>
 802d3dc:	e7f2      	b.n	802d3c4 <strcspn+0x4>
 802d3de:	1a30      	subs	r0, r6, r0
 802d3e0:	bd70      	pop	{r4, r5, r6, pc}

0802d3e2 <strncat>:
 802d3e2:	b530      	push	{r4, r5, lr}
 802d3e4:	4604      	mov	r4, r0
 802d3e6:	7825      	ldrb	r5, [r4, #0]
 802d3e8:	4623      	mov	r3, r4
 802d3ea:	3401      	adds	r4, #1
 802d3ec:	2d00      	cmp	r5, #0
 802d3ee:	d1fa      	bne.n	802d3e6 <strncat+0x4>
 802d3f0:	3a01      	subs	r2, #1
 802d3f2:	d304      	bcc.n	802d3fe <strncat+0x1c>
 802d3f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d3f8:	f803 4b01 	strb.w	r4, [r3], #1
 802d3fc:	b904      	cbnz	r4, 802d400 <strncat+0x1e>
 802d3fe:	bd30      	pop	{r4, r5, pc}
 802d400:	2a00      	cmp	r2, #0
 802d402:	d1f5      	bne.n	802d3f0 <strncat+0xe>
 802d404:	701a      	strb	r2, [r3, #0]
 802d406:	e7f3      	b.n	802d3f0 <strncat+0xe>

0802d408 <strncmp>:
 802d408:	b510      	push	{r4, lr}
 802d40a:	b16a      	cbz	r2, 802d428 <strncmp+0x20>
 802d40c:	3901      	subs	r1, #1
 802d40e:	1884      	adds	r4, r0, r2
 802d410:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d414:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d418:	429a      	cmp	r2, r3
 802d41a:	d103      	bne.n	802d424 <strncmp+0x1c>
 802d41c:	42a0      	cmp	r0, r4
 802d41e:	d001      	beq.n	802d424 <strncmp+0x1c>
 802d420:	2a00      	cmp	r2, #0
 802d422:	d1f5      	bne.n	802d410 <strncmp+0x8>
 802d424:	1ad0      	subs	r0, r2, r3
 802d426:	bd10      	pop	{r4, pc}
 802d428:	4610      	mov	r0, r2
 802d42a:	e7fc      	b.n	802d426 <strncmp+0x1e>

0802d42c <strncpy>:
 802d42c:	b510      	push	{r4, lr}
 802d42e:	3901      	subs	r1, #1
 802d430:	4603      	mov	r3, r0
 802d432:	b132      	cbz	r2, 802d442 <strncpy+0x16>
 802d434:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d438:	f803 4b01 	strb.w	r4, [r3], #1
 802d43c:	3a01      	subs	r2, #1
 802d43e:	2c00      	cmp	r4, #0
 802d440:	d1f7      	bne.n	802d432 <strncpy+0x6>
 802d442:	441a      	add	r2, r3
 802d444:	2100      	movs	r1, #0
 802d446:	4293      	cmp	r3, r2
 802d448:	d100      	bne.n	802d44c <strncpy+0x20>
 802d44a:	bd10      	pop	{r4, pc}
 802d44c:	f803 1b01 	strb.w	r1, [r3], #1
 802d450:	e7f9      	b.n	802d446 <strncpy+0x1a>

0802d452 <strspn>:
 802d452:	b570      	push	{r4, r5, r6, lr}
 802d454:	4603      	mov	r3, r0
 802d456:	461e      	mov	r6, r3
 802d458:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d45c:	b13c      	cbz	r4, 802d46e <strspn+0x1c>
 802d45e:	1e4a      	subs	r2, r1, #1
 802d460:	e001      	b.n	802d466 <strspn+0x14>
 802d462:	42a5      	cmp	r5, r4
 802d464:	d0f7      	beq.n	802d456 <strspn+0x4>
 802d466:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d46a:	2d00      	cmp	r5, #0
 802d46c:	d1f9      	bne.n	802d462 <strspn+0x10>
 802d46e:	1a30      	subs	r0, r6, r0
 802d470:	bd70      	pop	{r4, r5, r6, pc}
	...

0802d474 <strtok>:
 802d474:	4b16      	ldr	r3, [pc, #88]	; (802d4d0 <strtok+0x5c>)
 802d476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d478:	681e      	ldr	r6, [r3, #0]
 802d47a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 802d47c:	4605      	mov	r5, r0
 802d47e:	b9fc      	cbnz	r4, 802d4c0 <strtok+0x4c>
 802d480:	2050      	movs	r0, #80	; 0x50
 802d482:	9101      	str	r1, [sp, #4]
 802d484:	f7fe fddc 	bl	802c040 <malloc>
 802d488:	9901      	ldr	r1, [sp, #4]
 802d48a:	6470      	str	r0, [r6, #68]	; 0x44
 802d48c:	4602      	mov	r2, r0
 802d48e:	b920      	cbnz	r0, 802d49a <strtok+0x26>
 802d490:	4b10      	ldr	r3, [pc, #64]	; (802d4d4 <strtok+0x60>)
 802d492:	4811      	ldr	r0, [pc, #68]	; (802d4d8 <strtok+0x64>)
 802d494:	215b      	movs	r1, #91	; 0x5b
 802d496:	f7fe fd9f 	bl	802bfd8 <__assert_func>
 802d49a:	e9c0 4400 	strd	r4, r4, [r0]
 802d49e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802d4a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802d4a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802d4aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802d4ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802d4b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802d4b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802d4ba:	6184      	str	r4, [r0, #24]
 802d4bc:	7704      	strb	r4, [r0, #28]
 802d4be:	6244      	str	r4, [r0, #36]	; 0x24
 802d4c0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 802d4c2:	2301      	movs	r3, #1
 802d4c4:	4628      	mov	r0, r5
 802d4c6:	b002      	add	sp, #8
 802d4c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d4cc:	f000 b806 	b.w	802d4dc <__strtok_r>
 802d4d0:	20000188 	.word	0x20000188
 802d4d4:	08034463 	.word	0x08034463
 802d4d8:	0803447a 	.word	0x0803447a

0802d4dc <__strtok_r>:
 802d4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d4de:	b908      	cbnz	r0, 802d4e4 <__strtok_r+0x8>
 802d4e0:	6810      	ldr	r0, [r2, #0]
 802d4e2:	b188      	cbz	r0, 802d508 <__strtok_r+0x2c>
 802d4e4:	4604      	mov	r4, r0
 802d4e6:	4620      	mov	r0, r4
 802d4e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 802d4ec:	460f      	mov	r7, r1
 802d4ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 802d4f2:	b91e      	cbnz	r6, 802d4fc <__strtok_r+0x20>
 802d4f4:	b965      	cbnz	r5, 802d510 <__strtok_r+0x34>
 802d4f6:	6015      	str	r5, [r2, #0]
 802d4f8:	4628      	mov	r0, r5
 802d4fa:	e005      	b.n	802d508 <__strtok_r+0x2c>
 802d4fc:	42b5      	cmp	r5, r6
 802d4fe:	d1f6      	bne.n	802d4ee <__strtok_r+0x12>
 802d500:	2b00      	cmp	r3, #0
 802d502:	d1f0      	bne.n	802d4e6 <__strtok_r+0xa>
 802d504:	6014      	str	r4, [r2, #0]
 802d506:	7003      	strb	r3, [r0, #0]
 802d508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d50a:	461c      	mov	r4, r3
 802d50c:	e00c      	b.n	802d528 <__strtok_r+0x4c>
 802d50e:	b915      	cbnz	r5, 802d516 <__strtok_r+0x3a>
 802d510:	f814 3b01 	ldrb.w	r3, [r4], #1
 802d514:	460e      	mov	r6, r1
 802d516:	f816 5b01 	ldrb.w	r5, [r6], #1
 802d51a:	42ab      	cmp	r3, r5
 802d51c:	d1f7      	bne.n	802d50e <__strtok_r+0x32>
 802d51e:	2b00      	cmp	r3, #0
 802d520:	d0f3      	beq.n	802d50a <__strtok_r+0x2e>
 802d522:	2300      	movs	r3, #0
 802d524:	f804 3c01 	strb.w	r3, [r4, #-1]
 802d528:	6014      	str	r4, [r2, #0]
 802d52a:	e7ed      	b.n	802d508 <__strtok_r+0x2c>

0802d52c <strstr>:
 802d52c:	780a      	ldrb	r2, [r1, #0]
 802d52e:	b570      	push	{r4, r5, r6, lr}
 802d530:	b96a      	cbnz	r2, 802d54e <strstr+0x22>
 802d532:	bd70      	pop	{r4, r5, r6, pc}
 802d534:	429a      	cmp	r2, r3
 802d536:	d109      	bne.n	802d54c <strstr+0x20>
 802d538:	460c      	mov	r4, r1
 802d53a:	4605      	mov	r5, r0
 802d53c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d540:	2b00      	cmp	r3, #0
 802d542:	d0f6      	beq.n	802d532 <strstr+0x6>
 802d544:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802d548:	429e      	cmp	r6, r3
 802d54a:	d0f7      	beq.n	802d53c <strstr+0x10>
 802d54c:	3001      	adds	r0, #1
 802d54e:	7803      	ldrb	r3, [r0, #0]
 802d550:	2b00      	cmp	r3, #0
 802d552:	d1ef      	bne.n	802d534 <strstr+0x8>
 802d554:	4618      	mov	r0, r3
 802d556:	e7ec      	b.n	802d532 <strstr+0x6>

0802d558 <_localeconv_r>:
 802d558:	4800      	ldr	r0, [pc, #0]	; (802d55c <_localeconv_r+0x4>)
 802d55a:	4770      	bx	lr
 802d55c:	2000027c 	.word	0x2000027c

0802d560 <_close_r>:
 802d560:	b538      	push	{r3, r4, r5, lr}
 802d562:	4d06      	ldr	r5, [pc, #24]	; (802d57c <_close_r+0x1c>)
 802d564:	2300      	movs	r3, #0
 802d566:	4604      	mov	r4, r0
 802d568:	4608      	mov	r0, r1
 802d56a:	602b      	str	r3, [r5, #0]
 802d56c:	f7e5 fa9f 	bl	8012aae <_close>
 802d570:	1c43      	adds	r3, r0, #1
 802d572:	d102      	bne.n	802d57a <_close_r+0x1a>
 802d574:	682b      	ldr	r3, [r5, #0]
 802d576:	b103      	cbz	r3, 802d57a <_close_r+0x1a>
 802d578:	6023      	str	r3, [r4, #0]
 802d57a:	bd38      	pop	{r3, r4, r5, pc}
 802d57c:	2000dad8 	.word	0x2000dad8

0802d580 <_reclaim_reent>:
 802d580:	4b29      	ldr	r3, [pc, #164]	; (802d628 <_reclaim_reent+0xa8>)
 802d582:	681b      	ldr	r3, [r3, #0]
 802d584:	4283      	cmp	r3, r0
 802d586:	b570      	push	{r4, r5, r6, lr}
 802d588:	4604      	mov	r4, r0
 802d58a:	d04b      	beq.n	802d624 <_reclaim_reent+0xa4>
 802d58c:	69c3      	ldr	r3, [r0, #28]
 802d58e:	b143      	cbz	r3, 802d5a2 <_reclaim_reent+0x22>
 802d590:	68db      	ldr	r3, [r3, #12]
 802d592:	2b00      	cmp	r3, #0
 802d594:	d144      	bne.n	802d620 <_reclaim_reent+0xa0>
 802d596:	69e3      	ldr	r3, [r4, #28]
 802d598:	6819      	ldr	r1, [r3, #0]
 802d59a:	b111      	cbz	r1, 802d5a2 <_reclaim_reent+0x22>
 802d59c:	4620      	mov	r0, r4
 802d59e:	f000 ff59 	bl	802e454 <_free_r>
 802d5a2:	6961      	ldr	r1, [r4, #20]
 802d5a4:	b111      	cbz	r1, 802d5ac <_reclaim_reent+0x2c>
 802d5a6:	4620      	mov	r0, r4
 802d5a8:	f000 ff54 	bl	802e454 <_free_r>
 802d5ac:	69e1      	ldr	r1, [r4, #28]
 802d5ae:	b111      	cbz	r1, 802d5b6 <_reclaim_reent+0x36>
 802d5b0:	4620      	mov	r0, r4
 802d5b2:	f000 ff4f 	bl	802e454 <_free_r>
 802d5b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802d5b8:	b111      	cbz	r1, 802d5c0 <_reclaim_reent+0x40>
 802d5ba:	4620      	mov	r0, r4
 802d5bc:	f000 ff4a 	bl	802e454 <_free_r>
 802d5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d5c2:	b111      	cbz	r1, 802d5ca <_reclaim_reent+0x4a>
 802d5c4:	4620      	mov	r0, r4
 802d5c6:	f000 ff45 	bl	802e454 <_free_r>
 802d5ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d5cc:	b111      	cbz	r1, 802d5d4 <_reclaim_reent+0x54>
 802d5ce:	4620      	mov	r0, r4
 802d5d0:	f000 ff40 	bl	802e454 <_free_r>
 802d5d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802d5d6:	b111      	cbz	r1, 802d5de <_reclaim_reent+0x5e>
 802d5d8:	4620      	mov	r0, r4
 802d5da:	f000 ff3b 	bl	802e454 <_free_r>
 802d5de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802d5e0:	b111      	cbz	r1, 802d5e8 <_reclaim_reent+0x68>
 802d5e2:	4620      	mov	r0, r4
 802d5e4:	f000 ff36 	bl	802e454 <_free_r>
 802d5e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802d5ea:	b111      	cbz	r1, 802d5f2 <_reclaim_reent+0x72>
 802d5ec:	4620      	mov	r0, r4
 802d5ee:	f000 ff31 	bl	802e454 <_free_r>
 802d5f2:	6a23      	ldr	r3, [r4, #32]
 802d5f4:	b1b3      	cbz	r3, 802d624 <_reclaim_reent+0xa4>
 802d5f6:	4620      	mov	r0, r4
 802d5f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d5fc:	4718      	bx	r3
 802d5fe:	5949      	ldr	r1, [r1, r5]
 802d600:	b941      	cbnz	r1, 802d614 <_reclaim_reent+0x94>
 802d602:	3504      	adds	r5, #4
 802d604:	69e3      	ldr	r3, [r4, #28]
 802d606:	2d80      	cmp	r5, #128	; 0x80
 802d608:	68d9      	ldr	r1, [r3, #12]
 802d60a:	d1f8      	bne.n	802d5fe <_reclaim_reent+0x7e>
 802d60c:	4620      	mov	r0, r4
 802d60e:	f000 ff21 	bl	802e454 <_free_r>
 802d612:	e7c0      	b.n	802d596 <_reclaim_reent+0x16>
 802d614:	680e      	ldr	r6, [r1, #0]
 802d616:	4620      	mov	r0, r4
 802d618:	f000 ff1c 	bl	802e454 <_free_r>
 802d61c:	4631      	mov	r1, r6
 802d61e:	e7ef      	b.n	802d600 <_reclaim_reent+0x80>
 802d620:	2500      	movs	r5, #0
 802d622:	e7ef      	b.n	802d604 <_reclaim_reent+0x84>
 802d624:	bd70      	pop	{r4, r5, r6, pc}
 802d626:	bf00      	nop
 802d628:	20000188 	.word	0x20000188

0802d62c <_lseek_r>:
 802d62c:	b538      	push	{r3, r4, r5, lr}
 802d62e:	4d07      	ldr	r5, [pc, #28]	; (802d64c <_lseek_r+0x20>)
 802d630:	4604      	mov	r4, r0
 802d632:	4608      	mov	r0, r1
 802d634:	4611      	mov	r1, r2
 802d636:	2200      	movs	r2, #0
 802d638:	602a      	str	r2, [r5, #0]
 802d63a:	461a      	mov	r2, r3
 802d63c:	f7e5 fa5e 	bl	8012afc <_lseek>
 802d640:	1c43      	adds	r3, r0, #1
 802d642:	d102      	bne.n	802d64a <_lseek_r+0x1e>
 802d644:	682b      	ldr	r3, [r5, #0]
 802d646:	b103      	cbz	r3, 802d64a <_lseek_r+0x1e>
 802d648:	6023      	str	r3, [r4, #0]
 802d64a:	bd38      	pop	{r3, r4, r5, pc}
 802d64c:	2000dad8 	.word	0x2000dad8

0802d650 <_read_r>:
 802d650:	b538      	push	{r3, r4, r5, lr}
 802d652:	4d07      	ldr	r5, [pc, #28]	; (802d670 <_read_r+0x20>)
 802d654:	4604      	mov	r4, r0
 802d656:	4608      	mov	r0, r1
 802d658:	4611      	mov	r1, r2
 802d65a:	2200      	movs	r2, #0
 802d65c:	602a      	str	r2, [r5, #0]
 802d65e:	461a      	mov	r2, r3
 802d660:	f7e5 f9ec 	bl	8012a3c <_read>
 802d664:	1c43      	adds	r3, r0, #1
 802d666:	d102      	bne.n	802d66e <_read_r+0x1e>
 802d668:	682b      	ldr	r3, [r5, #0]
 802d66a:	b103      	cbz	r3, 802d66e <_read_r+0x1e>
 802d66c:	6023      	str	r3, [r4, #0]
 802d66e:	bd38      	pop	{r3, r4, r5, pc}
 802d670:	2000dad8 	.word	0x2000dad8

0802d674 <_sbrk_r>:
 802d674:	b538      	push	{r3, r4, r5, lr}
 802d676:	4d06      	ldr	r5, [pc, #24]	; (802d690 <_sbrk_r+0x1c>)
 802d678:	2300      	movs	r3, #0
 802d67a:	4604      	mov	r4, r0
 802d67c:	4608      	mov	r0, r1
 802d67e:	602b      	str	r3, [r5, #0]
 802d680:	f7e5 fa4a 	bl	8012b18 <_sbrk>
 802d684:	1c43      	adds	r3, r0, #1
 802d686:	d102      	bne.n	802d68e <_sbrk_r+0x1a>
 802d688:	682b      	ldr	r3, [r5, #0]
 802d68a:	b103      	cbz	r3, 802d68e <_sbrk_r+0x1a>
 802d68c:	6023      	str	r3, [r4, #0]
 802d68e:	bd38      	pop	{r3, r4, r5, pc}
 802d690:	2000dad8 	.word	0x2000dad8

0802d694 <_write_r>:
 802d694:	b538      	push	{r3, r4, r5, lr}
 802d696:	4d07      	ldr	r5, [pc, #28]	; (802d6b4 <_write_r+0x20>)
 802d698:	4604      	mov	r4, r0
 802d69a:	4608      	mov	r0, r1
 802d69c:	4611      	mov	r1, r2
 802d69e:	2200      	movs	r2, #0
 802d6a0:	602a      	str	r2, [r5, #0]
 802d6a2:	461a      	mov	r2, r3
 802d6a4:	f7e5 f9e7 	bl	8012a76 <_write>
 802d6a8:	1c43      	adds	r3, r0, #1
 802d6aa:	d102      	bne.n	802d6b2 <_write_r+0x1e>
 802d6ac:	682b      	ldr	r3, [r5, #0]
 802d6ae:	b103      	cbz	r3, 802d6b2 <_write_r+0x1e>
 802d6b0:	6023      	str	r3, [r4, #0]
 802d6b2:	bd38      	pop	{r3, r4, r5, pc}
 802d6b4:	2000dad8 	.word	0x2000dad8

0802d6b8 <__errno>:
 802d6b8:	4b01      	ldr	r3, [pc, #4]	; (802d6c0 <__errno+0x8>)
 802d6ba:	6818      	ldr	r0, [r3, #0]
 802d6bc:	4770      	bx	lr
 802d6be:	bf00      	nop
 802d6c0:	20000188 	.word	0x20000188

0802d6c4 <__libc_init_array>:
 802d6c4:	b570      	push	{r4, r5, r6, lr}
 802d6c6:	4d0d      	ldr	r5, [pc, #52]	; (802d6fc <__libc_init_array+0x38>)
 802d6c8:	4c0d      	ldr	r4, [pc, #52]	; (802d700 <__libc_init_array+0x3c>)
 802d6ca:	1b64      	subs	r4, r4, r5
 802d6cc:	10a4      	asrs	r4, r4, #2
 802d6ce:	2600      	movs	r6, #0
 802d6d0:	42a6      	cmp	r6, r4
 802d6d2:	d109      	bne.n	802d6e8 <__libc_init_array+0x24>
 802d6d4:	4d0b      	ldr	r5, [pc, #44]	; (802d704 <__libc_init_array+0x40>)
 802d6d6:	4c0c      	ldr	r4, [pc, #48]	; (802d708 <__libc_init_array+0x44>)
 802d6d8:	f003 fe1c 	bl	8031314 <_init>
 802d6dc:	1b64      	subs	r4, r4, r5
 802d6de:	10a4      	asrs	r4, r4, #2
 802d6e0:	2600      	movs	r6, #0
 802d6e2:	42a6      	cmp	r6, r4
 802d6e4:	d105      	bne.n	802d6f2 <__libc_init_array+0x2e>
 802d6e6:	bd70      	pop	{r4, r5, r6, pc}
 802d6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 802d6ec:	4798      	blx	r3
 802d6ee:	3601      	adds	r6, #1
 802d6f0:	e7ee      	b.n	802d6d0 <__libc_init_array+0xc>
 802d6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 802d6f6:	4798      	blx	r3
 802d6f8:	3601      	adds	r6, #1
 802d6fa:	e7f2      	b.n	802d6e2 <__libc_init_array+0x1e>
 802d6fc:	08034898 	.word	0x08034898
 802d700:	08034898 	.word	0x08034898
 802d704:	08034898 	.word	0x08034898
 802d708:	0803489c 	.word	0x0803489c

0802d70c <__retarget_lock_init_recursive>:
 802d70c:	4770      	bx	lr

0802d70e <__retarget_lock_acquire_recursive>:
 802d70e:	4770      	bx	lr

0802d710 <__retarget_lock_release_recursive>:
 802d710:	4770      	bx	lr

0802d712 <strcpy>:
 802d712:	4603      	mov	r3, r0
 802d714:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d718:	f803 2b01 	strb.w	r2, [r3], #1
 802d71c:	2a00      	cmp	r2, #0
 802d71e:	d1f9      	bne.n	802d714 <strcpy+0x2>
 802d720:	4770      	bx	lr

0802d722 <memcpy>:
 802d722:	440a      	add	r2, r1
 802d724:	4291      	cmp	r1, r2
 802d726:	f100 33ff 	add.w	r3, r0, #4294967295
 802d72a:	d100      	bne.n	802d72e <memcpy+0xc>
 802d72c:	4770      	bx	lr
 802d72e:	b510      	push	{r4, lr}
 802d730:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d734:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d738:	4291      	cmp	r1, r2
 802d73a:	d1f9      	bne.n	802d730 <memcpy+0xe>
 802d73c:	bd10      	pop	{r4, pc}
	...

0802d740 <nanf>:
 802d740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802d748 <nanf+0x8>
 802d744:	4770      	bx	lr
 802d746:	bf00      	nop
 802d748:	7fc00000 	.word	0x7fc00000

0802d74c <abort>:
 802d74c:	b508      	push	{r3, lr}
 802d74e:	2006      	movs	r0, #6
 802d750:	f003 f978 	bl	8030a44 <raise>
 802d754:	2001      	movs	r0, #1
 802d756:	f7e5 f967 	bl	8012a28 <_exit>

0802d75a <quorem>:
 802d75a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d75e:	6903      	ldr	r3, [r0, #16]
 802d760:	690c      	ldr	r4, [r1, #16]
 802d762:	42a3      	cmp	r3, r4
 802d764:	4607      	mov	r7, r0
 802d766:	db7e      	blt.n	802d866 <quorem+0x10c>
 802d768:	3c01      	subs	r4, #1
 802d76a:	f101 0814 	add.w	r8, r1, #20
 802d76e:	f100 0514 	add.w	r5, r0, #20
 802d772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802d776:	9301      	str	r3, [sp, #4]
 802d778:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802d77c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802d780:	3301      	adds	r3, #1
 802d782:	429a      	cmp	r2, r3
 802d784:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802d788:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802d78c:	fbb2 f6f3 	udiv	r6, r2, r3
 802d790:	d331      	bcc.n	802d7f6 <quorem+0x9c>
 802d792:	f04f 0e00 	mov.w	lr, #0
 802d796:	4640      	mov	r0, r8
 802d798:	46ac      	mov	ip, r5
 802d79a:	46f2      	mov	sl, lr
 802d79c:	f850 2b04 	ldr.w	r2, [r0], #4
 802d7a0:	b293      	uxth	r3, r2
 802d7a2:	fb06 e303 	mla	r3, r6, r3, lr
 802d7a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802d7aa:	0c1a      	lsrs	r2, r3, #16
 802d7ac:	b29b      	uxth	r3, r3
 802d7ae:	ebaa 0303 	sub.w	r3, sl, r3
 802d7b2:	f8dc a000 	ldr.w	sl, [ip]
 802d7b6:	fa13 f38a 	uxtah	r3, r3, sl
 802d7ba:	fb06 220e 	mla	r2, r6, lr, r2
 802d7be:	9300      	str	r3, [sp, #0]
 802d7c0:	9b00      	ldr	r3, [sp, #0]
 802d7c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802d7c6:	b292      	uxth	r2, r2
 802d7c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802d7cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802d7d0:	f8bd 3000 	ldrh.w	r3, [sp]
 802d7d4:	4581      	cmp	r9, r0
 802d7d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802d7da:	f84c 3b04 	str.w	r3, [ip], #4
 802d7de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802d7e2:	d2db      	bcs.n	802d79c <quorem+0x42>
 802d7e4:	f855 300b 	ldr.w	r3, [r5, fp]
 802d7e8:	b92b      	cbnz	r3, 802d7f6 <quorem+0x9c>
 802d7ea:	9b01      	ldr	r3, [sp, #4]
 802d7ec:	3b04      	subs	r3, #4
 802d7ee:	429d      	cmp	r5, r3
 802d7f0:	461a      	mov	r2, r3
 802d7f2:	d32c      	bcc.n	802d84e <quorem+0xf4>
 802d7f4:	613c      	str	r4, [r7, #16]
 802d7f6:	4638      	mov	r0, r7
 802d7f8:	f001 f93e 	bl	802ea78 <__mcmp>
 802d7fc:	2800      	cmp	r0, #0
 802d7fe:	db22      	blt.n	802d846 <quorem+0xec>
 802d800:	3601      	adds	r6, #1
 802d802:	4629      	mov	r1, r5
 802d804:	2000      	movs	r0, #0
 802d806:	f858 2b04 	ldr.w	r2, [r8], #4
 802d80a:	f8d1 c000 	ldr.w	ip, [r1]
 802d80e:	b293      	uxth	r3, r2
 802d810:	1ac3      	subs	r3, r0, r3
 802d812:	0c12      	lsrs	r2, r2, #16
 802d814:	fa13 f38c 	uxtah	r3, r3, ip
 802d818:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802d81c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802d820:	b29b      	uxth	r3, r3
 802d822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802d826:	45c1      	cmp	r9, r8
 802d828:	f841 3b04 	str.w	r3, [r1], #4
 802d82c:	ea4f 4022 	mov.w	r0, r2, asr #16
 802d830:	d2e9      	bcs.n	802d806 <quorem+0xac>
 802d832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802d836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802d83a:	b922      	cbnz	r2, 802d846 <quorem+0xec>
 802d83c:	3b04      	subs	r3, #4
 802d83e:	429d      	cmp	r5, r3
 802d840:	461a      	mov	r2, r3
 802d842:	d30a      	bcc.n	802d85a <quorem+0x100>
 802d844:	613c      	str	r4, [r7, #16]
 802d846:	4630      	mov	r0, r6
 802d848:	b003      	add	sp, #12
 802d84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d84e:	6812      	ldr	r2, [r2, #0]
 802d850:	3b04      	subs	r3, #4
 802d852:	2a00      	cmp	r2, #0
 802d854:	d1ce      	bne.n	802d7f4 <quorem+0x9a>
 802d856:	3c01      	subs	r4, #1
 802d858:	e7c9      	b.n	802d7ee <quorem+0x94>
 802d85a:	6812      	ldr	r2, [r2, #0]
 802d85c:	3b04      	subs	r3, #4
 802d85e:	2a00      	cmp	r2, #0
 802d860:	d1f0      	bne.n	802d844 <quorem+0xea>
 802d862:	3c01      	subs	r4, #1
 802d864:	e7eb      	b.n	802d83e <quorem+0xe4>
 802d866:	2000      	movs	r0, #0
 802d868:	e7ee      	b.n	802d848 <quorem+0xee>
 802d86a:	0000      	movs	r0, r0
 802d86c:	0000      	movs	r0, r0
	...

0802d870 <_dtoa_r>:
 802d870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d874:	ed2d 8b04 	vpush	{d8-d9}
 802d878:	69c5      	ldr	r5, [r0, #28]
 802d87a:	b093      	sub	sp, #76	; 0x4c
 802d87c:	ed8d 0b02 	vstr	d0, [sp, #8]
 802d880:	ec57 6b10 	vmov	r6, r7, d0
 802d884:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802d888:	9107      	str	r1, [sp, #28]
 802d88a:	4604      	mov	r4, r0
 802d88c:	920a      	str	r2, [sp, #40]	; 0x28
 802d88e:	930d      	str	r3, [sp, #52]	; 0x34
 802d890:	b975      	cbnz	r5, 802d8b0 <_dtoa_r+0x40>
 802d892:	2010      	movs	r0, #16
 802d894:	f7fe fbd4 	bl	802c040 <malloc>
 802d898:	4602      	mov	r2, r0
 802d89a:	61e0      	str	r0, [r4, #28]
 802d89c:	b920      	cbnz	r0, 802d8a8 <_dtoa_r+0x38>
 802d89e:	4bae      	ldr	r3, [pc, #696]	; (802db58 <_dtoa_r+0x2e8>)
 802d8a0:	21ef      	movs	r1, #239	; 0xef
 802d8a2:	48ae      	ldr	r0, [pc, #696]	; (802db5c <_dtoa_r+0x2ec>)
 802d8a4:	f7fe fb98 	bl	802bfd8 <__assert_func>
 802d8a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802d8ac:	6005      	str	r5, [r0, #0]
 802d8ae:	60c5      	str	r5, [r0, #12]
 802d8b0:	69e3      	ldr	r3, [r4, #28]
 802d8b2:	6819      	ldr	r1, [r3, #0]
 802d8b4:	b151      	cbz	r1, 802d8cc <_dtoa_r+0x5c>
 802d8b6:	685a      	ldr	r2, [r3, #4]
 802d8b8:	604a      	str	r2, [r1, #4]
 802d8ba:	2301      	movs	r3, #1
 802d8bc:	4093      	lsls	r3, r2
 802d8be:	608b      	str	r3, [r1, #8]
 802d8c0:	4620      	mov	r0, r4
 802d8c2:	f000 fe53 	bl	802e56c <_Bfree>
 802d8c6:	69e3      	ldr	r3, [r4, #28]
 802d8c8:	2200      	movs	r2, #0
 802d8ca:	601a      	str	r2, [r3, #0]
 802d8cc:	1e3b      	subs	r3, r7, #0
 802d8ce:	bfbb      	ittet	lt
 802d8d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802d8d4:	9303      	strlt	r3, [sp, #12]
 802d8d6:	2300      	movge	r3, #0
 802d8d8:	2201      	movlt	r2, #1
 802d8da:	bfac      	ite	ge
 802d8dc:	f8c8 3000 	strge.w	r3, [r8]
 802d8e0:	f8c8 2000 	strlt.w	r2, [r8]
 802d8e4:	4b9e      	ldr	r3, [pc, #632]	; (802db60 <_dtoa_r+0x2f0>)
 802d8e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802d8ea:	ea33 0308 	bics.w	r3, r3, r8
 802d8ee:	d11b      	bne.n	802d928 <_dtoa_r+0xb8>
 802d8f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802d8f2:	f242 730f 	movw	r3, #9999	; 0x270f
 802d8f6:	6013      	str	r3, [r2, #0]
 802d8f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802d8fc:	4333      	orrs	r3, r6
 802d8fe:	f000 8593 	beq.w	802e428 <_dtoa_r+0xbb8>
 802d902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802d904:	b963      	cbnz	r3, 802d920 <_dtoa_r+0xb0>
 802d906:	4b97      	ldr	r3, [pc, #604]	; (802db64 <_dtoa_r+0x2f4>)
 802d908:	e027      	b.n	802d95a <_dtoa_r+0xea>
 802d90a:	4b97      	ldr	r3, [pc, #604]	; (802db68 <_dtoa_r+0x2f8>)
 802d90c:	9300      	str	r3, [sp, #0]
 802d90e:	3308      	adds	r3, #8
 802d910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802d912:	6013      	str	r3, [r2, #0]
 802d914:	9800      	ldr	r0, [sp, #0]
 802d916:	b013      	add	sp, #76	; 0x4c
 802d918:	ecbd 8b04 	vpop	{d8-d9}
 802d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d920:	4b90      	ldr	r3, [pc, #576]	; (802db64 <_dtoa_r+0x2f4>)
 802d922:	9300      	str	r3, [sp, #0]
 802d924:	3303      	adds	r3, #3
 802d926:	e7f3      	b.n	802d910 <_dtoa_r+0xa0>
 802d928:	ed9d 7b02 	vldr	d7, [sp, #8]
 802d92c:	2200      	movs	r2, #0
 802d92e:	ec51 0b17 	vmov	r0, r1, d7
 802d932:	eeb0 8a47 	vmov.f32	s16, s14
 802d936:	eef0 8a67 	vmov.f32	s17, s15
 802d93a:	2300      	movs	r3, #0
 802d93c:	f7e3 f8dc 	bl	8010af8 <__aeabi_dcmpeq>
 802d940:	4681      	mov	r9, r0
 802d942:	b160      	cbz	r0, 802d95e <_dtoa_r+0xee>
 802d944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802d946:	2301      	movs	r3, #1
 802d948:	6013      	str	r3, [r2, #0]
 802d94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802d94c:	2b00      	cmp	r3, #0
 802d94e:	f000 8568 	beq.w	802e422 <_dtoa_r+0xbb2>
 802d952:	4b86      	ldr	r3, [pc, #536]	; (802db6c <_dtoa_r+0x2fc>)
 802d954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802d956:	6013      	str	r3, [r2, #0]
 802d958:	3b01      	subs	r3, #1
 802d95a:	9300      	str	r3, [sp, #0]
 802d95c:	e7da      	b.n	802d914 <_dtoa_r+0xa4>
 802d95e:	aa10      	add	r2, sp, #64	; 0x40
 802d960:	a911      	add	r1, sp, #68	; 0x44
 802d962:	4620      	mov	r0, r4
 802d964:	eeb0 0a48 	vmov.f32	s0, s16
 802d968:	eef0 0a68 	vmov.f32	s1, s17
 802d96c:	f001 f99a 	bl	802eca4 <__d2b>
 802d970:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802d974:	4682      	mov	sl, r0
 802d976:	2d00      	cmp	r5, #0
 802d978:	d07f      	beq.n	802da7a <_dtoa_r+0x20a>
 802d97a:	ee18 3a90 	vmov	r3, s17
 802d97e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802d982:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802d986:	ec51 0b18 	vmov	r0, r1, d8
 802d98a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802d98e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802d992:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802d996:	4619      	mov	r1, r3
 802d998:	2200      	movs	r2, #0
 802d99a:	4b75      	ldr	r3, [pc, #468]	; (802db70 <_dtoa_r+0x300>)
 802d99c:	f7e2 fc8c 	bl	80102b8 <__aeabi_dsub>
 802d9a0:	a367      	add	r3, pc, #412	; (adr r3, 802db40 <_dtoa_r+0x2d0>)
 802d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9a6:	f7e2 fe3f 	bl	8010628 <__aeabi_dmul>
 802d9aa:	a367      	add	r3, pc, #412	; (adr r3, 802db48 <_dtoa_r+0x2d8>)
 802d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9b0:	f7e2 fc84 	bl	80102bc <__adddf3>
 802d9b4:	4606      	mov	r6, r0
 802d9b6:	4628      	mov	r0, r5
 802d9b8:	460f      	mov	r7, r1
 802d9ba:	f7e2 fdcb 	bl	8010554 <__aeabi_i2d>
 802d9be:	a364      	add	r3, pc, #400	; (adr r3, 802db50 <_dtoa_r+0x2e0>)
 802d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9c4:	f7e2 fe30 	bl	8010628 <__aeabi_dmul>
 802d9c8:	4602      	mov	r2, r0
 802d9ca:	460b      	mov	r3, r1
 802d9cc:	4630      	mov	r0, r6
 802d9ce:	4639      	mov	r1, r7
 802d9d0:	f7e2 fc74 	bl	80102bc <__adddf3>
 802d9d4:	4606      	mov	r6, r0
 802d9d6:	460f      	mov	r7, r1
 802d9d8:	f7e3 f8d6 	bl	8010b88 <__aeabi_d2iz>
 802d9dc:	2200      	movs	r2, #0
 802d9de:	4683      	mov	fp, r0
 802d9e0:	2300      	movs	r3, #0
 802d9e2:	4630      	mov	r0, r6
 802d9e4:	4639      	mov	r1, r7
 802d9e6:	f7e3 f891 	bl	8010b0c <__aeabi_dcmplt>
 802d9ea:	b148      	cbz	r0, 802da00 <_dtoa_r+0x190>
 802d9ec:	4658      	mov	r0, fp
 802d9ee:	f7e2 fdb1 	bl	8010554 <__aeabi_i2d>
 802d9f2:	4632      	mov	r2, r6
 802d9f4:	463b      	mov	r3, r7
 802d9f6:	f7e3 f87f 	bl	8010af8 <__aeabi_dcmpeq>
 802d9fa:	b908      	cbnz	r0, 802da00 <_dtoa_r+0x190>
 802d9fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 802da00:	f1bb 0f16 	cmp.w	fp, #22
 802da04:	d857      	bhi.n	802dab6 <_dtoa_r+0x246>
 802da06:	4b5b      	ldr	r3, [pc, #364]	; (802db74 <_dtoa_r+0x304>)
 802da08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da10:	ec51 0b18 	vmov	r0, r1, d8
 802da14:	f7e3 f87a 	bl	8010b0c <__aeabi_dcmplt>
 802da18:	2800      	cmp	r0, #0
 802da1a:	d04e      	beq.n	802daba <_dtoa_r+0x24a>
 802da1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802da20:	2300      	movs	r3, #0
 802da22:	930c      	str	r3, [sp, #48]	; 0x30
 802da24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802da26:	1b5b      	subs	r3, r3, r5
 802da28:	1e5a      	subs	r2, r3, #1
 802da2a:	bf45      	ittet	mi
 802da2c:	f1c3 0301 	rsbmi	r3, r3, #1
 802da30:	9305      	strmi	r3, [sp, #20]
 802da32:	2300      	movpl	r3, #0
 802da34:	2300      	movmi	r3, #0
 802da36:	9206      	str	r2, [sp, #24]
 802da38:	bf54      	ite	pl
 802da3a:	9305      	strpl	r3, [sp, #20]
 802da3c:	9306      	strmi	r3, [sp, #24]
 802da3e:	f1bb 0f00 	cmp.w	fp, #0
 802da42:	db3c      	blt.n	802dabe <_dtoa_r+0x24e>
 802da44:	9b06      	ldr	r3, [sp, #24]
 802da46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802da4a:	445b      	add	r3, fp
 802da4c:	9306      	str	r3, [sp, #24]
 802da4e:	2300      	movs	r3, #0
 802da50:	9308      	str	r3, [sp, #32]
 802da52:	9b07      	ldr	r3, [sp, #28]
 802da54:	2b09      	cmp	r3, #9
 802da56:	d868      	bhi.n	802db2a <_dtoa_r+0x2ba>
 802da58:	2b05      	cmp	r3, #5
 802da5a:	bfc4      	itt	gt
 802da5c:	3b04      	subgt	r3, #4
 802da5e:	9307      	strgt	r3, [sp, #28]
 802da60:	9b07      	ldr	r3, [sp, #28]
 802da62:	f1a3 0302 	sub.w	r3, r3, #2
 802da66:	bfcc      	ite	gt
 802da68:	2500      	movgt	r5, #0
 802da6a:	2501      	movle	r5, #1
 802da6c:	2b03      	cmp	r3, #3
 802da6e:	f200 8085 	bhi.w	802db7c <_dtoa_r+0x30c>
 802da72:	e8df f003 	tbb	[pc, r3]
 802da76:	3b2e      	.short	0x3b2e
 802da78:	5839      	.short	0x5839
 802da7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802da7e:	441d      	add	r5, r3
 802da80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802da84:	2b20      	cmp	r3, #32
 802da86:	bfc1      	itttt	gt
 802da88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802da8c:	fa08 f803 	lslgt.w	r8, r8, r3
 802da90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802da94:	fa26 f303 	lsrgt.w	r3, r6, r3
 802da98:	bfd6      	itet	le
 802da9a:	f1c3 0320 	rsble	r3, r3, #32
 802da9e:	ea48 0003 	orrgt.w	r0, r8, r3
 802daa2:	fa06 f003 	lslle.w	r0, r6, r3
 802daa6:	f7e2 fd45 	bl	8010534 <__aeabi_ui2d>
 802daaa:	2201      	movs	r2, #1
 802daac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802dab0:	3d01      	subs	r5, #1
 802dab2:	920e      	str	r2, [sp, #56]	; 0x38
 802dab4:	e76f      	b.n	802d996 <_dtoa_r+0x126>
 802dab6:	2301      	movs	r3, #1
 802dab8:	e7b3      	b.n	802da22 <_dtoa_r+0x1b2>
 802daba:	900c      	str	r0, [sp, #48]	; 0x30
 802dabc:	e7b2      	b.n	802da24 <_dtoa_r+0x1b4>
 802dabe:	9b05      	ldr	r3, [sp, #20]
 802dac0:	eba3 030b 	sub.w	r3, r3, fp
 802dac4:	9305      	str	r3, [sp, #20]
 802dac6:	f1cb 0300 	rsb	r3, fp, #0
 802daca:	9308      	str	r3, [sp, #32]
 802dacc:	2300      	movs	r3, #0
 802dace:	930b      	str	r3, [sp, #44]	; 0x2c
 802dad0:	e7bf      	b.n	802da52 <_dtoa_r+0x1e2>
 802dad2:	2300      	movs	r3, #0
 802dad4:	9309      	str	r3, [sp, #36]	; 0x24
 802dad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802dad8:	2b00      	cmp	r3, #0
 802dada:	dc52      	bgt.n	802db82 <_dtoa_r+0x312>
 802dadc:	2301      	movs	r3, #1
 802dade:	9301      	str	r3, [sp, #4]
 802dae0:	9304      	str	r3, [sp, #16]
 802dae2:	461a      	mov	r2, r3
 802dae4:	920a      	str	r2, [sp, #40]	; 0x28
 802dae6:	e00b      	b.n	802db00 <_dtoa_r+0x290>
 802dae8:	2301      	movs	r3, #1
 802daea:	e7f3      	b.n	802dad4 <_dtoa_r+0x264>
 802daec:	2300      	movs	r3, #0
 802daee:	9309      	str	r3, [sp, #36]	; 0x24
 802daf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802daf2:	445b      	add	r3, fp
 802daf4:	9301      	str	r3, [sp, #4]
 802daf6:	3301      	adds	r3, #1
 802daf8:	2b01      	cmp	r3, #1
 802dafa:	9304      	str	r3, [sp, #16]
 802dafc:	bfb8      	it	lt
 802dafe:	2301      	movlt	r3, #1
 802db00:	69e0      	ldr	r0, [r4, #28]
 802db02:	2100      	movs	r1, #0
 802db04:	2204      	movs	r2, #4
 802db06:	f102 0614 	add.w	r6, r2, #20
 802db0a:	429e      	cmp	r6, r3
 802db0c:	d93d      	bls.n	802db8a <_dtoa_r+0x31a>
 802db0e:	6041      	str	r1, [r0, #4]
 802db10:	4620      	mov	r0, r4
 802db12:	f000 fceb 	bl	802e4ec <_Balloc>
 802db16:	9000      	str	r0, [sp, #0]
 802db18:	2800      	cmp	r0, #0
 802db1a:	d139      	bne.n	802db90 <_dtoa_r+0x320>
 802db1c:	4b16      	ldr	r3, [pc, #88]	; (802db78 <_dtoa_r+0x308>)
 802db1e:	4602      	mov	r2, r0
 802db20:	f240 11af 	movw	r1, #431	; 0x1af
 802db24:	e6bd      	b.n	802d8a2 <_dtoa_r+0x32>
 802db26:	2301      	movs	r3, #1
 802db28:	e7e1      	b.n	802daee <_dtoa_r+0x27e>
 802db2a:	2501      	movs	r5, #1
 802db2c:	2300      	movs	r3, #0
 802db2e:	9307      	str	r3, [sp, #28]
 802db30:	9509      	str	r5, [sp, #36]	; 0x24
 802db32:	f04f 33ff 	mov.w	r3, #4294967295
 802db36:	9301      	str	r3, [sp, #4]
 802db38:	9304      	str	r3, [sp, #16]
 802db3a:	2200      	movs	r2, #0
 802db3c:	2312      	movs	r3, #18
 802db3e:	e7d1      	b.n	802dae4 <_dtoa_r+0x274>
 802db40:	636f4361 	.word	0x636f4361
 802db44:	3fd287a7 	.word	0x3fd287a7
 802db48:	8b60c8b3 	.word	0x8b60c8b3
 802db4c:	3fc68a28 	.word	0x3fc68a28
 802db50:	509f79fb 	.word	0x509f79fb
 802db54:	3fd34413 	.word	0x3fd34413
 802db58:	08034463 	.word	0x08034463
 802db5c:	080344e1 	.word	0x080344e1
 802db60:	7ff00000 	.word	0x7ff00000
 802db64:	080344dd 	.word	0x080344dd
 802db68:	080344d4 	.word	0x080344d4
 802db6c:	08034821 	.word	0x08034821
 802db70:	3ff80000 	.word	0x3ff80000
 802db74:	080345d0 	.word	0x080345d0
 802db78:	08034539 	.word	0x08034539
 802db7c:	2301      	movs	r3, #1
 802db7e:	9309      	str	r3, [sp, #36]	; 0x24
 802db80:	e7d7      	b.n	802db32 <_dtoa_r+0x2c2>
 802db82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802db84:	9301      	str	r3, [sp, #4]
 802db86:	9304      	str	r3, [sp, #16]
 802db88:	e7ba      	b.n	802db00 <_dtoa_r+0x290>
 802db8a:	3101      	adds	r1, #1
 802db8c:	0052      	lsls	r2, r2, #1
 802db8e:	e7ba      	b.n	802db06 <_dtoa_r+0x296>
 802db90:	69e3      	ldr	r3, [r4, #28]
 802db92:	9a00      	ldr	r2, [sp, #0]
 802db94:	601a      	str	r2, [r3, #0]
 802db96:	9b04      	ldr	r3, [sp, #16]
 802db98:	2b0e      	cmp	r3, #14
 802db9a:	f200 80a8 	bhi.w	802dcee <_dtoa_r+0x47e>
 802db9e:	2d00      	cmp	r5, #0
 802dba0:	f000 80a5 	beq.w	802dcee <_dtoa_r+0x47e>
 802dba4:	f1bb 0f00 	cmp.w	fp, #0
 802dba8:	dd38      	ble.n	802dc1c <_dtoa_r+0x3ac>
 802dbaa:	4bc0      	ldr	r3, [pc, #768]	; (802deac <_dtoa_r+0x63c>)
 802dbac:	f00b 020f 	and.w	r2, fp, #15
 802dbb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802dbb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802dbb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 802dbbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 802dbc0:	d019      	beq.n	802dbf6 <_dtoa_r+0x386>
 802dbc2:	4bbb      	ldr	r3, [pc, #748]	; (802deb0 <_dtoa_r+0x640>)
 802dbc4:	ec51 0b18 	vmov	r0, r1, d8
 802dbc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802dbcc:	f7e2 fe56 	bl	801087c <__aeabi_ddiv>
 802dbd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dbd4:	f008 080f 	and.w	r8, r8, #15
 802dbd8:	2503      	movs	r5, #3
 802dbda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802deb0 <_dtoa_r+0x640>
 802dbde:	f1b8 0f00 	cmp.w	r8, #0
 802dbe2:	d10a      	bne.n	802dbfa <_dtoa_r+0x38a>
 802dbe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dbe8:	4632      	mov	r2, r6
 802dbea:	463b      	mov	r3, r7
 802dbec:	f7e2 fe46 	bl	801087c <__aeabi_ddiv>
 802dbf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dbf4:	e02b      	b.n	802dc4e <_dtoa_r+0x3de>
 802dbf6:	2502      	movs	r5, #2
 802dbf8:	e7ef      	b.n	802dbda <_dtoa_r+0x36a>
 802dbfa:	f018 0f01 	tst.w	r8, #1
 802dbfe:	d008      	beq.n	802dc12 <_dtoa_r+0x3a2>
 802dc00:	4630      	mov	r0, r6
 802dc02:	4639      	mov	r1, r7
 802dc04:	e9d9 2300 	ldrd	r2, r3, [r9]
 802dc08:	f7e2 fd0e 	bl	8010628 <__aeabi_dmul>
 802dc0c:	3501      	adds	r5, #1
 802dc0e:	4606      	mov	r6, r0
 802dc10:	460f      	mov	r7, r1
 802dc12:	ea4f 0868 	mov.w	r8, r8, asr #1
 802dc16:	f109 0908 	add.w	r9, r9, #8
 802dc1a:	e7e0      	b.n	802dbde <_dtoa_r+0x36e>
 802dc1c:	f000 809f 	beq.w	802dd5e <_dtoa_r+0x4ee>
 802dc20:	f1cb 0600 	rsb	r6, fp, #0
 802dc24:	4ba1      	ldr	r3, [pc, #644]	; (802deac <_dtoa_r+0x63c>)
 802dc26:	4fa2      	ldr	r7, [pc, #648]	; (802deb0 <_dtoa_r+0x640>)
 802dc28:	f006 020f 	and.w	r2, r6, #15
 802dc2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc34:	ec51 0b18 	vmov	r0, r1, d8
 802dc38:	f7e2 fcf6 	bl	8010628 <__aeabi_dmul>
 802dc3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dc40:	1136      	asrs	r6, r6, #4
 802dc42:	2300      	movs	r3, #0
 802dc44:	2502      	movs	r5, #2
 802dc46:	2e00      	cmp	r6, #0
 802dc48:	d17e      	bne.n	802dd48 <_dtoa_r+0x4d8>
 802dc4a:	2b00      	cmp	r3, #0
 802dc4c:	d1d0      	bne.n	802dbf0 <_dtoa_r+0x380>
 802dc4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802dc50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802dc54:	2b00      	cmp	r3, #0
 802dc56:	f000 8084 	beq.w	802dd62 <_dtoa_r+0x4f2>
 802dc5a:	4b96      	ldr	r3, [pc, #600]	; (802deb4 <_dtoa_r+0x644>)
 802dc5c:	2200      	movs	r2, #0
 802dc5e:	4640      	mov	r0, r8
 802dc60:	4649      	mov	r1, r9
 802dc62:	f7e2 ff53 	bl	8010b0c <__aeabi_dcmplt>
 802dc66:	2800      	cmp	r0, #0
 802dc68:	d07b      	beq.n	802dd62 <_dtoa_r+0x4f2>
 802dc6a:	9b04      	ldr	r3, [sp, #16]
 802dc6c:	2b00      	cmp	r3, #0
 802dc6e:	d078      	beq.n	802dd62 <_dtoa_r+0x4f2>
 802dc70:	9b01      	ldr	r3, [sp, #4]
 802dc72:	2b00      	cmp	r3, #0
 802dc74:	dd39      	ble.n	802dcea <_dtoa_r+0x47a>
 802dc76:	4b90      	ldr	r3, [pc, #576]	; (802deb8 <_dtoa_r+0x648>)
 802dc78:	2200      	movs	r2, #0
 802dc7a:	4640      	mov	r0, r8
 802dc7c:	4649      	mov	r1, r9
 802dc7e:	f7e2 fcd3 	bl	8010628 <__aeabi_dmul>
 802dc82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dc86:	9e01      	ldr	r6, [sp, #4]
 802dc88:	f10b 37ff 	add.w	r7, fp, #4294967295
 802dc8c:	3501      	adds	r5, #1
 802dc8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802dc92:	4628      	mov	r0, r5
 802dc94:	f7e2 fc5e 	bl	8010554 <__aeabi_i2d>
 802dc98:	4642      	mov	r2, r8
 802dc9a:	464b      	mov	r3, r9
 802dc9c:	f7e2 fcc4 	bl	8010628 <__aeabi_dmul>
 802dca0:	4b86      	ldr	r3, [pc, #536]	; (802debc <_dtoa_r+0x64c>)
 802dca2:	2200      	movs	r2, #0
 802dca4:	f7e2 fb0a 	bl	80102bc <__adddf3>
 802dca8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802dcac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dcb0:	9303      	str	r3, [sp, #12]
 802dcb2:	2e00      	cmp	r6, #0
 802dcb4:	d158      	bne.n	802dd68 <_dtoa_r+0x4f8>
 802dcb6:	4b82      	ldr	r3, [pc, #520]	; (802dec0 <_dtoa_r+0x650>)
 802dcb8:	2200      	movs	r2, #0
 802dcba:	4640      	mov	r0, r8
 802dcbc:	4649      	mov	r1, r9
 802dcbe:	f7e2 fafb 	bl	80102b8 <__aeabi_dsub>
 802dcc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802dcc6:	4680      	mov	r8, r0
 802dcc8:	4689      	mov	r9, r1
 802dcca:	f7e2 ff3d 	bl	8010b48 <__aeabi_dcmpgt>
 802dcce:	2800      	cmp	r0, #0
 802dcd0:	f040 8296 	bne.w	802e200 <_dtoa_r+0x990>
 802dcd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802dcd8:	4640      	mov	r0, r8
 802dcda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802dcde:	4649      	mov	r1, r9
 802dce0:	f7e2 ff14 	bl	8010b0c <__aeabi_dcmplt>
 802dce4:	2800      	cmp	r0, #0
 802dce6:	f040 8289 	bne.w	802e1fc <_dtoa_r+0x98c>
 802dcea:	ed8d 8b02 	vstr	d8, [sp, #8]
 802dcee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802dcf0:	2b00      	cmp	r3, #0
 802dcf2:	f2c0 814e 	blt.w	802df92 <_dtoa_r+0x722>
 802dcf6:	f1bb 0f0e 	cmp.w	fp, #14
 802dcfa:	f300 814a 	bgt.w	802df92 <_dtoa_r+0x722>
 802dcfe:	4b6b      	ldr	r3, [pc, #428]	; (802deac <_dtoa_r+0x63c>)
 802dd00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802dd04:	e9d3 8900 	ldrd	r8, r9, [r3]
 802dd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802dd0a:	2b00      	cmp	r3, #0
 802dd0c:	f280 80dc 	bge.w	802dec8 <_dtoa_r+0x658>
 802dd10:	9b04      	ldr	r3, [sp, #16]
 802dd12:	2b00      	cmp	r3, #0
 802dd14:	f300 80d8 	bgt.w	802dec8 <_dtoa_r+0x658>
 802dd18:	f040 826f 	bne.w	802e1fa <_dtoa_r+0x98a>
 802dd1c:	4b68      	ldr	r3, [pc, #416]	; (802dec0 <_dtoa_r+0x650>)
 802dd1e:	2200      	movs	r2, #0
 802dd20:	4640      	mov	r0, r8
 802dd22:	4649      	mov	r1, r9
 802dd24:	f7e2 fc80 	bl	8010628 <__aeabi_dmul>
 802dd28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802dd2c:	f7e2 ff02 	bl	8010b34 <__aeabi_dcmpge>
 802dd30:	9e04      	ldr	r6, [sp, #16]
 802dd32:	4637      	mov	r7, r6
 802dd34:	2800      	cmp	r0, #0
 802dd36:	f040 8245 	bne.w	802e1c4 <_dtoa_r+0x954>
 802dd3a:	9d00      	ldr	r5, [sp, #0]
 802dd3c:	2331      	movs	r3, #49	; 0x31
 802dd3e:	f805 3b01 	strb.w	r3, [r5], #1
 802dd42:	f10b 0b01 	add.w	fp, fp, #1
 802dd46:	e241      	b.n	802e1cc <_dtoa_r+0x95c>
 802dd48:	07f2      	lsls	r2, r6, #31
 802dd4a:	d505      	bpl.n	802dd58 <_dtoa_r+0x4e8>
 802dd4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 802dd50:	f7e2 fc6a 	bl	8010628 <__aeabi_dmul>
 802dd54:	3501      	adds	r5, #1
 802dd56:	2301      	movs	r3, #1
 802dd58:	1076      	asrs	r6, r6, #1
 802dd5a:	3708      	adds	r7, #8
 802dd5c:	e773      	b.n	802dc46 <_dtoa_r+0x3d6>
 802dd5e:	2502      	movs	r5, #2
 802dd60:	e775      	b.n	802dc4e <_dtoa_r+0x3de>
 802dd62:	9e04      	ldr	r6, [sp, #16]
 802dd64:	465f      	mov	r7, fp
 802dd66:	e792      	b.n	802dc8e <_dtoa_r+0x41e>
 802dd68:	9900      	ldr	r1, [sp, #0]
 802dd6a:	4b50      	ldr	r3, [pc, #320]	; (802deac <_dtoa_r+0x63c>)
 802dd6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 802dd70:	4431      	add	r1, r6
 802dd72:	9102      	str	r1, [sp, #8]
 802dd74:	9909      	ldr	r1, [sp, #36]	; 0x24
 802dd76:	eeb0 9a47 	vmov.f32	s18, s14
 802dd7a:	eef0 9a67 	vmov.f32	s19, s15
 802dd7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802dd82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802dd86:	2900      	cmp	r1, #0
 802dd88:	d044      	beq.n	802de14 <_dtoa_r+0x5a4>
 802dd8a:	494e      	ldr	r1, [pc, #312]	; (802dec4 <_dtoa_r+0x654>)
 802dd8c:	2000      	movs	r0, #0
 802dd8e:	f7e2 fd75 	bl	801087c <__aeabi_ddiv>
 802dd92:	ec53 2b19 	vmov	r2, r3, d9
 802dd96:	f7e2 fa8f 	bl	80102b8 <__aeabi_dsub>
 802dd9a:	9d00      	ldr	r5, [sp, #0]
 802dd9c:	ec41 0b19 	vmov	d9, r0, r1
 802dda0:	4649      	mov	r1, r9
 802dda2:	4640      	mov	r0, r8
 802dda4:	f7e2 fef0 	bl	8010b88 <__aeabi_d2iz>
 802dda8:	4606      	mov	r6, r0
 802ddaa:	f7e2 fbd3 	bl	8010554 <__aeabi_i2d>
 802ddae:	4602      	mov	r2, r0
 802ddb0:	460b      	mov	r3, r1
 802ddb2:	4640      	mov	r0, r8
 802ddb4:	4649      	mov	r1, r9
 802ddb6:	f7e2 fa7f 	bl	80102b8 <__aeabi_dsub>
 802ddba:	3630      	adds	r6, #48	; 0x30
 802ddbc:	f805 6b01 	strb.w	r6, [r5], #1
 802ddc0:	ec53 2b19 	vmov	r2, r3, d9
 802ddc4:	4680      	mov	r8, r0
 802ddc6:	4689      	mov	r9, r1
 802ddc8:	f7e2 fea0 	bl	8010b0c <__aeabi_dcmplt>
 802ddcc:	2800      	cmp	r0, #0
 802ddce:	d164      	bne.n	802de9a <_dtoa_r+0x62a>
 802ddd0:	4642      	mov	r2, r8
 802ddd2:	464b      	mov	r3, r9
 802ddd4:	4937      	ldr	r1, [pc, #220]	; (802deb4 <_dtoa_r+0x644>)
 802ddd6:	2000      	movs	r0, #0
 802ddd8:	f7e2 fa6e 	bl	80102b8 <__aeabi_dsub>
 802dddc:	ec53 2b19 	vmov	r2, r3, d9
 802dde0:	f7e2 fe94 	bl	8010b0c <__aeabi_dcmplt>
 802dde4:	2800      	cmp	r0, #0
 802dde6:	f040 80b6 	bne.w	802df56 <_dtoa_r+0x6e6>
 802ddea:	9b02      	ldr	r3, [sp, #8]
 802ddec:	429d      	cmp	r5, r3
 802ddee:	f43f af7c 	beq.w	802dcea <_dtoa_r+0x47a>
 802ddf2:	4b31      	ldr	r3, [pc, #196]	; (802deb8 <_dtoa_r+0x648>)
 802ddf4:	ec51 0b19 	vmov	r0, r1, d9
 802ddf8:	2200      	movs	r2, #0
 802ddfa:	f7e2 fc15 	bl	8010628 <__aeabi_dmul>
 802ddfe:	4b2e      	ldr	r3, [pc, #184]	; (802deb8 <_dtoa_r+0x648>)
 802de00:	ec41 0b19 	vmov	d9, r0, r1
 802de04:	2200      	movs	r2, #0
 802de06:	4640      	mov	r0, r8
 802de08:	4649      	mov	r1, r9
 802de0a:	f7e2 fc0d 	bl	8010628 <__aeabi_dmul>
 802de0e:	4680      	mov	r8, r0
 802de10:	4689      	mov	r9, r1
 802de12:	e7c5      	b.n	802dda0 <_dtoa_r+0x530>
 802de14:	ec51 0b17 	vmov	r0, r1, d7
 802de18:	f7e2 fc06 	bl	8010628 <__aeabi_dmul>
 802de1c:	9b02      	ldr	r3, [sp, #8]
 802de1e:	9d00      	ldr	r5, [sp, #0]
 802de20:	930f      	str	r3, [sp, #60]	; 0x3c
 802de22:	ec41 0b19 	vmov	d9, r0, r1
 802de26:	4649      	mov	r1, r9
 802de28:	4640      	mov	r0, r8
 802de2a:	f7e2 fead 	bl	8010b88 <__aeabi_d2iz>
 802de2e:	4606      	mov	r6, r0
 802de30:	f7e2 fb90 	bl	8010554 <__aeabi_i2d>
 802de34:	3630      	adds	r6, #48	; 0x30
 802de36:	4602      	mov	r2, r0
 802de38:	460b      	mov	r3, r1
 802de3a:	4640      	mov	r0, r8
 802de3c:	4649      	mov	r1, r9
 802de3e:	f7e2 fa3b 	bl	80102b8 <__aeabi_dsub>
 802de42:	f805 6b01 	strb.w	r6, [r5], #1
 802de46:	9b02      	ldr	r3, [sp, #8]
 802de48:	429d      	cmp	r5, r3
 802de4a:	4680      	mov	r8, r0
 802de4c:	4689      	mov	r9, r1
 802de4e:	f04f 0200 	mov.w	r2, #0
 802de52:	d124      	bne.n	802de9e <_dtoa_r+0x62e>
 802de54:	4b1b      	ldr	r3, [pc, #108]	; (802dec4 <_dtoa_r+0x654>)
 802de56:	ec51 0b19 	vmov	r0, r1, d9
 802de5a:	f7e2 fa2f 	bl	80102bc <__adddf3>
 802de5e:	4602      	mov	r2, r0
 802de60:	460b      	mov	r3, r1
 802de62:	4640      	mov	r0, r8
 802de64:	4649      	mov	r1, r9
 802de66:	f7e2 fe6f 	bl	8010b48 <__aeabi_dcmpgt>
 802de6a:	2800      	cmp	r0, #0
 802de6c:	d173      	bne.n	802df56 <_dtoa_r+0x6e6>
 802de6e:	ec53 2b19 	vmov	r2, r3, d9
 802de72:	4914      	ldr	r1, [pc, #80]	; (802dec4 <_dtoa_r+0x654>)
 802de74:	2000      	movs	r0, #0
 802de76:	f7e2 fa1f 	bl	80102b8 <__aeabi_dsub>
 802de7a:	4602      	mov	r2, r0
 802de7c:	460b      	mov	r3, r1
 802de7e:	4640      	mov	r0, r8
 802de80:	4649      	mov	r1, r9
 802de82:	f7e2 fe43 	bl	8010b0c <__aeabi_dcmplt>
 802de86:	2800      	cmp	r0, #0
 802de88:	f43f af2f 	beq.w	802dcea <_dtoa_r+0x47a>
 802de8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802de8e:	1e6b      	subs	r3, r5, #1
 802de90:	930f      	str	r3, [sp, #60]	; 0x3c
 802de92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802de96:	2b30      	cmp	r3, #48	; 0x30
 802de98:	d0f8      	beq.n	802de8c <_dtoa_r+0x61c>
 802de9a:	46bb      	mov	fp, r7
 802de9c:	e04a      	b.n	802df34 <_dtoa_r+0x6c4>
 802de9e:	4b06      	ldr	r3, [pc, #24]	; (802deb8 <_dtoa_r+0x648>)
 802dea0:	f7e2 fbc2 	bl	8010628 <__aeabi_dmul>
 802dea4:	4680      	mov	r8, r0
 802dea6:	4689      	mov	r9, r1
 802dea8:	e7bd      	b.n	802de26 <_dtoa_r+0x5b6>
 802deaa:	bf00      	nop
 802deac:	080345d0 	.word	0x080345d0
 802deb0:	080345a8 	.word	0x080345a8
 802deb4:	3ff00000 	.word	0x3ff00000
 802deb8:	40240000 	.word	0x40240000
 802debc:	401c0000 	.word	0x401c0000
 802dec0:	40140000 	.word	0x40140000
 802dec4:	3fe00000 	.word	0x3fe00000
 802dec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802decc:	9d00      	ldr	r5, [sp, #0]
 802dece:	4642      	mov	r2, r8
 802ded0:	464b      	mov	r3, r9
 802ded2:	4630      	mov	r0, r6
 802ded4:	4639      	mov	r1, r7
 802ded6:	f7e2 fcd1 	bl	801087c <__aeabi_ddiv>
 802deda:	f7e2 fe55 	bl	8010b88 <__aeabi_d2iz>
 802dede:	9001      	str	r0, [sp, #4]
 802dee0:	f7e2 fb38 	bl	8010554 <__aeabi_i2d>
 802dee4:	4642      	mov	r2, r8
 802dee6:	464b      	mov	r3, r9
 802dee8:	f7e2 fb9e 	bl	8010628 <__aeabi_dmul>
 802deec:	4602      	mov	r2, r0
 802deee:	460b      	mov	r3, r1
 802def0:	4630      	mov	r0, r6
 802def2:	4639      	mov	r1, r7
 802def4:	f7e2 f9e0 	bl	80102b8 <__aeabi_dsub>
 802def8:	9e01      	ldr	r6, [sp, #4]
 802defa:	9f04      	ldr	r7, [sp, #16]
 802defc:	3630      	adds	r6, #48	; 0x30
 802defe:	f805 6b01 	strb.w	r6, [r5], #1
 802df02:	9e00      	ldr	r6, [sp, #0]
 802df04:	1bae      	subs	r6, r5, r6
 802df06:	42b7      	cmp	r7, r6
 802df08:	4602      	mov	r2, r0
 802df0a:	460b      	mov	r3, r1
 802df0c:	d134      	bne.n	802df78 <_dtoa_r+0x708>
 802df0e:	f7e2 f9d5 	bl	80102bc <__adddf3>
 802df12:	4642      	mov	r2, r8
 802df14:	464b      	mov	r3, r9
 802df16:	4606      	mov	r6, r0
 802df18:	460f      	mov	r7, r1
 802df1a:	f7e2 fe15 	bl	8010b48 <__aeabi_dcmpgt>
 802df1e:	b9c8      	cbnz	r0, 802df54 <_dtoa_r+0x6e4>
 802df20:	4642      	mov	r2, r8
 802df22:	464b      	mov	r3, r9
 802df24:	4630      	mov	r0, r6
 802df26:	4639      	mov	r1, r7
 802df28:	f7e2 fde6 	bl	8010af8 <__aeabi_dcmpeq>
 802df2c:	b110      	cbz	r0, 802df34 <_dtoa_r+0x6c4>
 802df2e:	9b01      	ldr	r3, [sp, #4]
 802df30:	07db      	lsls	r3, r3, #31
 802df32:	d40f      	bmi.n	802df54 <_dtoa_r+0x6e4>
 802df34:	4651      	mov	r1, sl
 802df36:	4620      	mov	r0, r4
 802df38:	f000 fb18 	bl	802e56c <_Bfree>
 802df3c:	2300      	movs	r3, #0
 802df3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802df40:	702b      	strb	r3, [r5, #0]
 802df42:	f10b 0301 	add.w	r3, fp, #1
 802df46:	6013      	str	r3, [r2, #0]
 802df48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802df4a:	2b00      	cmp	r3, #0
 802df4c:	f43f ace2 	beq.w	802d914 <_dtoa_r+0xa4>
 802df50:	601d      	str	r5, [r3, #0]
 802df52:	e4df      	b.n	802d914 <_dtoa_r+0xa4>
 802df54:	465f      	mov	r7, fp
 802df56:	462b      	mov	r3, r5
 802df58:	461d      	mov	r5, r3
 802df5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802df5e:	2a39      	cmp	r2, #57	; 0x39
 802df60:	d106      	bne.n	802df70 <_dtoa_r+0x700>
 802df62:	9a00      	ldr	r2, [sp, #0]
 802df64:	429a      	cmp	r2, r3
 802df66:	d1f7      	bne.n	802df58 <_dtoa_r+0x6e8>
 802df68:	9900      	ldr	r1, [sp, #0]
 802df6a:	2230      	movs	r2, #48	; 0x30
 802df6c:	3701      	adds	r7, #1
 802df6e:	700a      	strb	r2, [r1, #0]
 802df70:	781a      	ldrb	r2, [r3, #0]
 802df72:	3201      	adds	r2, #1
 802df74:	701a      	strb	r2, [r3, #0]
 802df76:	e790      	b.n	802de9a <_dtoa_r+0x62a>
 802df78:	4ba3      	ldr	r3, [pc, #652]	; (802e208 <_dtoa_r+0x998>)
 802df7a:	2200      	movs	r2, #0
 802df7c:	f7e2 fb54 	bl	8010628 <__aeabi_dmul>
 802df80:	2200      	movs	r2, #0
 802df82:	2300      	movs	r3, #0
 802df84:	4606      	mov	r6, r0
 802df86:	460f      	mov	r7, r1
 802df88:	f7e2 fdb6 	bl	8010af8 <__aeabi_dcmpeq>
 802df8c:	2800      	cmp	r0, #0
 802df8e:	d09e      	beq.n	802dece <_dtoa_r+0x65e>
 802df90:	e7d0      	b.n	802df34 <_dtoa_r+0x6c4>
 802df92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802df94:	2a00      	cmp	r2, #0
 802df96:	f000 80ca 	beq.w	802e12e <_dtoa_r+0x8be>
 802df9a:	9a07      	ldr	r2, [sp, #28]
 802df9c:	2a01      	cmp	r2, #1
 802df9e:	f300 80ad 	bgt.w	802e0fc <_dtoa_r+0x88c>
 802dfa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802dfa4:	2a00      	cmp	r2, #0
 802dfa6:	f000 80a5 	beq.w	802e0f4 <_dtoa_r+0x884>
 802dfaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802dfae:	9e08      	ldr	r6, [sp, #32]
 802dfb0:	9d05      	ldr	r5, [sp, #20]
 802dfb2:	9a05      	ldr	r2, [sp, #20]
 802dfb4:	441a      	add	r2, r3
 802dfb6:	9205      	str	r2, [sp, #20]
 802dfb8:	9a06      	ldr	r2, [sp, #24]
 802dfba:	2101      	movs	r1, #1
 802dfbc:	441a      	add	r2, r3
 802dfbe:	4620      	mov	r0, r4
 802dfc0:	9206      	str	r2, [sp, #24]
 802dfc2:	f000 fbd3 	bl	802e76c <__i2b>
 802dfc6:	4607      	mov	r7, r0
 802dfc8:	b165      	cbz	r5, 802dfe4 <_dtoa_r+0x774>
 802dfca:	9b06      	ldr	r3, [sp, #24]
 802dfcc:	2b00      	cmp	r3, #0
 802dfce:	dd09      	ble.n	802dfe4 <_dtoa_r+0x774>
 802dfd0:	42ab      	cmp	r3, r5
 802dfd2:	9a05      	ldr	r2, [sp, #20]
 802dfd4:	bfa8      	it	ge
 802dfd6:	462b      	movge	r3, r5
 802dfd8:	1ad2      	subs	r2, r2, r3
 802dfda:	9205      	str	r2, [sp, #20]
 802dfdc:	9a06      	ldr	r2, [sp, #24]
 802dfde:	1aed      	subs	r5, r5, r3
 802dfe0:	1ad3      	subs	r3, r2, r3
 802dfe2:	9306      	str	r3, [sp, #24]
 802dfe4:	9b08      	ldr	r3, [sp, #32]
 802dfe6:	b1f3      	cbz	r3, 802e026 <_dtoa_r+0x7b6>
 802dfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dfea:	2b00      	cmp	r3, #0
 802dfec:	f000 80a3 	beq.w	802e136 <_dtoa_r+0x8c6>
 802dff0:	2e00      	cmp	r6, #0
 802dff2:	dd10      	ble.n	802e016 <_dtoa_r+0x7a6>
 802dff4:	4639      	mov	r1, r7
 802dff6:	4632      	mov	r2, r6
 802dff8:	4620      	mov	r0, r4
 802dffa:	f000 fc77 	bl	802e8ec <__pow5mult>
 802dffe:	4652      	mov	r2, sl
 802e000:	4601      	mov	r1, r0
 802e002:	4607      	mov	r7, r0
 802e004:	4620      	mov	r0, r4
 802e006:	f000 fbc7 	bl	802e798 <__multiply>
 802e00a:	4651      	mov	r1, sl
 802e00c:	4680      	mov	r8, r0
 802e00e:	4620      	mov	r0, r4
 802e010:	f000 faac 	bl	802e56c <_Bfree>
 802e014:	46c2      	mov	sl, r8
 802e016:	9b08      	ldr	r3, [sp, #32]
 802e018:	1b9a      	subs	r2, r3, r6
 802e01a:	d004      	beq.n	802e026 <_dtoa_r+0x7b6>
 802e01c:	4651      	mov	r1, sl
 802e01e:	4620      	mov	r0, r4
 802e020:	f000 fc64 	bl	802e8ec <__pow5mult>
 802e024:	4682      	mov	sl, r0
 802e026:	2101      	movs	r1, #1
 802e028:	4620      	mov	r0, r4
 802e02a:	f000 fb9f 	bl	802e76c <__i2b>
 802e02e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e030:	2b00      	cmp	r3, #0
 802e032:	4606      	mov	r6, r0
 802e034:	f340 8081 	ble.w	802e13a <_dtoa_r+0x8ca>
 802e038:	461a      	mov	r2, r3
 802e03a:	4601      	mov	r1, r0
 802e03c:	4620      	mov	r0, r4
 802e03e:	f000 fc55 	bl	802e8ec <__pow5mult>
 802e042:	9b07      	ldr	r3, [sp, #28]
 802e044:	2b01      	cmp	r3, #1
 802e046:	4606      	mov	r6, r0
 802e048:	dd7a      	ble.n	802e140 <_dtoa_r+0x8d0>
 802e04a:	f04f 0800 	mov.w	r8, #0
 802e04e:	6933      	ldr	r3, [r6, #16]
 802e050:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802e054:	6918      	ldr	r0, [r3, #16]
 802e056:	f000 fb3b 	bl	802e6d0 <__hi0bits>
 802e05a:	f1c0 0020 	rsb	r0, r0, #32
 802e05e:	9b06      	ldr	r3, [sp, #24]
 802e060:	4418      	add	r0, r3
 802e062:	f010 001f 	ands.w	r0, r0, #31
 802e066:	f000 8094 	beq.w	802e192 <_dtoa_r+0x922>
 802e06a:	f1c0 0320 	rsb	r3, r0, #32
 802e06e:	2b04      	cmp	r3, #4
 802e070:	f340 8085 	ble.w	802e17e <_dtoa_r+0x90e>
 802e074:	9b05      	ldr	r3, [sp, #20]
 802e076:	f1c0 001c 	rsb	r0, r0, #28
 802e07a:	4403      	add	r3, r0
 802e07c:	9305      	str	r3, [sp, #20]
 802e07e:	9b06      	ldr	r3, [sp, #24]
 802e080:	4403      	add	r3, r0
 802e082:	4405      	add	r5, r0
 802e084:	9306      	str	r3, [sp, #24]
 802e086:	9b05      	ldr	r3, [sp, #20]
 802e088:	2b00      	cmp	r3, #0
 802e08a:	dd05      	ble.n	802e098 <_dtoa_r+0x828>
 802e08c:	4651      	mov	r1, sl
 802e08e:	461a      	mov	r2, r3
 802e090:	4620      	mov	r0, r4
 802e092:	f000 fc85 	bl	802e9a0 <__lshift>
 802e096:	4682      	mov	sl, r0
 802e098:	9b06      	ldr	r3, [sp, #24]
 802e09a:	2b00      	cmp	r3, #0
 802e09c:	dd05      	ble.n	802e0aa <_dtoa_r+0x83a>
 802e09e:	4631      	mov	r1, r6
 802e0a0:	461a      	mov	r2, r3
 802e0a2:	4620      	mov	r0, r4
 802e0a4:	f000 fc7c 	bl	802e9a0 <__lshift>
 802e0a8:	4606      	mov	r6, r0
 802e0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e0ac:	2b00      	cmp	r3, #0
 802e0ae:	d072      	beq.n	802e196 <_dtoa_r+0x926>
 802e0b0:	4631      	mov	r1, r6
 802e0b2:	4650      	mov	r0, sl
 802e0b4:	f000 fce0 	bl	802ea78 <__mcmp>
 802e0b8:	2800      	cmp	r0, #0
 802e0ba:	da6c      	bge.n	802e196 <_dtoa_r+0x926>
 802e0bc:	2300      	movs	r3, #0
 802e0be:	4651      	mov	r1, sl
 802e0c0:	220a      	movs	r2, #10
 802e0c2:	4620      	mov	r0, r4
 802e0c4:	f000 fa74 	bl	802e5b0 <__multadd>
 802e0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e0ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e0ce:	4682      	mov	sl, r0
 802e0d0:	2b00      	cmp	r3, #0
 802e0d2:	f000 81b0 	beq.w	802e436 <_dtoa_r+0xbc6>
 802e0d6:	2300      	movs	r3, #0
 802e0d8:	4639      	mov	r1, r7
 802e0da:	220a      	movs	r2, #10
 802e0dc:	4620      	mov	r0, r4
 802e0de:	f000 fa67 	bl	802e5b0 <__multadd>
 802e0e2:	9b01      	ldr	r3, [sp, #4]
 802e0e4:	2b00      	cmp	r3, #0
 802e0e6:	4607      	mov	r7, r0
 802e0e8:	f300 8096 	bgt.w	802e218 <_dtoa_r+0x9a8>
 802e0ec:	9b07      	ldr	r3, [sp, #28]
 802e0ee:	2b02      	cmp	r3, #2
 802e0f0:	dc59      	bgt.n	802e1a6 <_dtoa_r+0x936>
 802e0f2:	e091      	b.n	802e218 <_dtoa_r+0x9a8>
 802e0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e0f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802e0fa:	e758      	b.n	802dfae <_dtoa_r+0x73e>
 802e0fc:	9b04      	ldr	r3, [sp, #16]
 802e0fe:	1e5e      	subs	r6, r3, #1
 802e100:	9b08      	ldr	r3, [sp, #32]
 802e102:	42b3      	cmp	r3, r6
 802e104:	bfbf      	itttt	lt
 802e106:	9b08      	ldrlt	r3, [sp, #32]
 802e108:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802e10a:	9608      	strlt	r6, [sp, #32]
 802e10c:	1af3      	sublt	r3, r6, r3
 802e10e:	bfb4      	ite	lt
 802e110:	18d2      	addlt	r2, r2, r3
 802e112:	1b9e      	subge	r6, r3, r6
 802e114:	9b04      	ldr	r3, [sp, #16]
 802e116:	bfbc      	itt	lt
 802e118:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802e11a:	2600      	movlt	r6, #0
 802e11c:	2b00      	cmp	r3, #0
 802e11e:	bfb7      	itett	lt
 802e120:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802e124:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802e128:	1a9d      	sublt	r5, r3, r2
 802e12a:	2300      	movlt	r3, #0
 802e12c:	e741      	b.n	802dfb2 <_dtoa_r+0x742>
 802e12e:	9e08      	ldr	r6, [sp, #32]
 802e130:	9d05      	ldr	r5, [sp, #20]
 802e132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802e134:	e748      	b.n	802dfc8 <_dtoa_r+0x758>
 802e136:	9a08      	ldr	r2, [sp, #32]
 802e138:	e770      	b.n	802e01c <_dtoa_r+0x7ac>
 802e13a:	9b07      	ldr	r3, [sp, #28]
 802e13c:	2b01      	cmp	r3, #1
 802e13e:	dc19      	bgt.n	802e174 <_dtoa_r+0x904>
 802e140:	9b02      	ldr	r3, [sp, #8]
 802e142:	b9bb      	cbnz	r3, 802e174 <_dtoa_r+0x904>
 802e144:	9b03      	ldr	r3, [sp, #12]
 802e146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e14a:	b99b      	cbnz	r3, 802e174 <_dtoa_r+0x904>
 802e14c:	9b03      	ldr	r3, [sp, #12]
 802e14e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e152:	0d1b      	lsrs	r3, r3, #20
 802e154:	051b      	lsls	r3, r3, #20
 802e156:	b183      	cbz	r3, 802e17a <_dtoa_r+0x90a>
 802e158:	9b05      	ldr	r3, [sp, #20]
 802e15a:	3301      	adds	r3, #1
 802e15c:	9305      	str	r3, [sp, #20]
 802e15e:	9b06      	ldr	r3, [sp, #24]
 802e160:	3301      	adds	r3, #1
 802e162:	9306      	str	r3, [sp, #24]
 802e164:	f04f 0801 	mov.w	r8, #1
 802e168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e16a:	2b00      	cmp	r3, #0
 802e16c:	f47f af6f 	bne.w	802e04e <_dtoa_r+0x7de>
 802e170:	2001      	movs	r0, #1
 802e172:	e774      	b.n	802e05e <_dtoa_r+0x7ee>
 802e174:	f04f 0800 	mov.w	r8, #0
 802e178:	e7f6      	b.n	802e168 <_dtoa_r+0x8f8>
 802e17a:	4698      	mov	r8, r3
 802e17c:	e7f4      	b.n	802e168 <_dtoa_r+0x8f8>
 802e17e:	d082      	beq.n	802e086 <_dtoa_r+0x816>
 802e180:	9a05      	ldr	r2, [sp, #20]
 802e182:	331c      	adds	r3, #28
 802e184:	441a      	add	r2, r3
 802e186:	9205      	str	r2, [sp, #20]
 802e188:	9a06      	ldr	r2, [sp, #24]
 802e18a:	441a      	add	r2, r3
 802e18c:	441d      	add	r5, r3
 802e18e:	9206      	str	r2, [sp, #24]
 802e190:	e779      	b.n	802e086 <_dtoa_r+0x816>
 802e192:	4603      	mov	r3, r0
 802e194:	e7f4      	b.n	802e180 <_dtoa_r+0x910>
 802e196:	9b04      	ldr	r3, [sp, #16]
 802e198:	2b00      	cmp	r3, #0
 802e19a:	dc37      	bgt.n	802e20c <_dtoa_r+0x99c>
 802e19c:	9b07      	ldr	r3, [sp, #28]
 802e19e:	2b02      	cmp	r3, #2
 802e1a0:	dd34      	ble.n	802e20c <_dtoa_r+0x99c>
 802e1a2:	9b04      	ldr	r3, [sp, #16]
 802e1a4:	9301      	str	r3, [sp, #4]
 802e1a6:	9b01      	ldr	r3, [sp, #4]
 802e1a8:	b963      	cbnz	r3, 802e1c4 <_dtoa_r+0x954>
 802e1aa:	4631      	mov	r1, r6
 802e1ac:	2205      	movs	r2, #5
 802e1ae:	4620      	mov	r0, r4
 802e1b0:	f000 f9fe 	bl	802e5b0 <__multadd>
 802e1b4:	4601      	mov	r1, r0
 802e1b6:	4606      	mov	r6, r0
 802e1b8:	4650      	mov	r0, sl
 802e1ba:	f000 fc5d 	bl	802ea78 <__mcmp>
 802e1be:	2800      	cmp	r0, #0
 802e1c0:	f73f adbb 	bgt.w	802dd3a <_dtoa_r+0x4ca>
 802e1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e1c6:	9d00      	ldr	r5, [sp, #0]
 802e1c8:	ea6f 0b03 	mvn.w	fp, r3
 802e1cc:	f04f 0800 	mov.w	r8, #0
 802e1d0:	4631      	mov	r1, r6
 802e1d2:	4620      	mov	r0, r4
 802e1d4:	f000 f9ca 	bl	802e56c <_Bfree>
 802e1d8:	2f00      	cmp	r7, #0
 802e1da:	f43f aeab 	beq.w	802df34 <_dtoa_r+0x6c4>
 802e1de:	f1b8 0f00 	cmp.w	r8, #0
 802e1e2:	d005      	beq.n	802e1f0 <_dtoa_r+0x980>
 802e1e4:	45b8      	cmp	r8, r7
 802e1e6:	d003      	beq.n	802e1f0 <_dtoa_r+0x980>
 802e1e8:	4641      	mov	r1, r8
 802e1ea:	4620      	mov	r0, r4
 802e1ec:	f000 f9be 	bl	802e56c <_Bfree>
 802e1f0:	4639      	mov	r1, r7
 802e1f2:	4620      	mov	r0, r4
 802e1f4:	f000 f9ba 	bl	802e56c <_Bfree>
 802e1f8:	e69c      	b.n	802df34 <_dtoa_r+0x6c4>
 802e1fa:	2600      	movs	r6, #0
 802e1fc:	4637      	mov	r7, r6
 802e1fe:	e7e1      	b.n	802e1c4 <_dtoa_r+0x954>
 802e200:	46bb      	mov	fp, r7
 802e202:	4637      	mov	r7, r6
 802e204:	e599      	b.n	802dd3a <_dtoa_r+0x4ca>
 802e206:	bf00      	nop
 802e208:	40240000 	.word	0x40240000
 802e20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e20e:	2b00      	cmp	r3, #0
 802e210:	f000 80c8 	beq.w	802e3a4 <_dtoa_r+0xb34>
 802e214:	9b04      	ldr	r3, [sp, #16]
 802e216:	9301      	str	r3, [sp, #4]
 802e218:	2d00      	cmp	r5, #0
 802e21a:	dd05      	ble.n	802e228 <_dtoa_r+0x9b8>
 802e21c:	4639      	mov	r1, r7
 802e21e:	462a      	mov	r2, r5
 802e220:	4620      	mov	r0, r4
 802e222:	f000 fbbd 	bl	802e9a0 <__lshift>
 802e226:	4607      	mov	r7, r0
 802e228:	f1b8 0f00 	cmp.w	r8, #0
 802e22c:	d05b      	beq.n	802e2e6 <_dtoa_r+0xa76>
 802e22e:	6879      	ldr	r1, [r7, #4]
 802e230:	4620      	mov	r0, r4
 802e232:	f000 f95b 	bl	802e4ec <_Balloc>
 802e236:	4605      	mov	r5, r0
 802e238:	b928      	cbnz	r0, 802e246 <_dtoa_r+0x9d6>
 802e23a:	4b83      	ldr	r3, [pc, #524]	; (802e448 <_dtoa_r+0xbd8>)
 802e23c:	4602      	mov	r2, r0
 802e23e:	f240 21ef 	movw	r1, #751	; 0x2ef
 802e242:	f7ff bb2e 	b.w	802d8a2 <_dtoa_r+0x32>
 802e246:	693a      	ldr	r2, [r7, #16]
 802e248:	3202      	adds	r2, #2
 802e24a:	0092      	lsls	r2, r2, #2
 802e24c:	f107 010c 	add.w	r1, r7, #12
 802e250:	300c      	adds	r0, #12
 802e252:	f7ff fa66 	bl	802d722 <memcpy>
 802e256:	2201      	movs	r2, #1
 802e258:	4629      	mov	r1, r5
 802e25a:	4620      	mov	r0, r4
 802e25c:	f000 fba0 	bl	802e9a0 <__lshift>
 802e260:	9b00      	ldr	r3, [sp, #0]
 802e262:	3301      	adds	r3, #1
 802e264:	9304      	str	r3, [sp, #16]
 802e266:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e26a:	4413      	add	r3, r2
 802e26c:	9308      	str	r3, [sp, #32]
 802e26e:	9b02      	ldr	r3, [sp, #8]
 802e270:	f003 0301 	and.w	r3, r3, #1
 802e274:	46b8      	mov	r8, r7
 802e276:	9306      	str	r3, [sp, #24]
 802e278:	4607      	mov	r7, r0
 802e27a:	9b04      	ldr	r3, [sp, #16]
 802e27c:	4631      	mov	r1, r6
 802e27e:	3b01      	subs	r3, #1
 802e280:	4650      	mov	r0, sl
 802e282:	9301      	str	r3, [sp, #4]
 802e284:	f7ff fa69 	bl	802d75a <quorem>
 802e288:	4641      	mov	r1, r8
 802e28a:	9002      	str	r0, [sp, #8]
 802e28c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e290:	4650      	mov	r0, sl
 802e292:	f000 fbf1 	bl	802ea78 <__mcmp>
 802e296:	463a      	mov	r2, r7
 802e298:	9005      	str	r0, [sp, #20]
 802e29a:	4631      	mov	r1, r6
 802e29c:	4620      	mov	r0, r4
 802e29e:	f000 fc07 	bl	802eab0 <__mdiff>
 802e2a2:	68c2      	ldr	r2, [r0, #12]
 802e2a4:	4605      	mov	r5, r0
 802e2a6:	bb02      	cbnz	r2, 802e2ea <_dtoa_r+0xa7a>
 802e2a8:	4601      	mov	r1, r0
 802e2aa:	4650      	mov	r0, sl
 802e2ac:	f000 fbe4 	bl	802ea78 <__mcmp>
 802e2b0:	4602      	mov	r2, r0
 802e2b2:	4629      	mov	r1, r5
 802e2b4:	4620      	mov	r0, r4
 802e2b6:	9209      	str	r2, [sp, #36]	; 0x24
 802e2b8:	f000 f958 	bl	802e56c <_Bfree>
 802e2bc:	9b07      	ldr	r3, [sp, #28]
 802e2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e2c0:	9d04      	ldr	r5, [sp, #16]
 802e2c2:	ea43 0102 	orr.w	r1, r3, r2
 802e2c6:	9b06      	ldr	r3, [sp, #24]
 802e2c8:	4319      	orrs	r1, r3
 802e2ca:	d110      	bne.n	802e2ee <_dtoa_r+0xa7e>
 802e2cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e2d0:	d029      	beq.n	802e326 <_dtoa_r+0xab6>
 802e2d2:	9b05      	ldr	r3, [sp, #20]
 802e2d4:	2b00      	cmp	r3, #0
 802e2d6:	dd02      	ble.n	802e2de <_dtoa_r+0xa6e>
 802e2d8:	9b02      	ldr	r3, [sp, #8]
 802e2da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802e2de:	9b01      	ldr	r3, [sp, #4]
 802e2e0:	f883 9000 	strb.w	r9, [r3]
 802e2e4:	e774      	b.n	802e1d0 <_dtoa_r+0x960>
 802e2e6:	4638      	mov	r0, r7
 802e2e8:	e7ba      	b.n	802e260 <_dtoa_r+0x9f0>
 802e2ea:	2201      	movs	r2, #1
 802e2ec:	e7e1      	b.n	802e2b2 <_dtoa_r+0xa42>
 802e2ee:	9b05      	ldr	r3, [sp, #20]
 802e2f0:	2b00      	cmp	r3, #0
 802e2f2:	db04      	blt.n	802e2fe <_dtoa_r+0xa8e>
 802e2f4:	9907      	ldr	r1, [sp, #28]
 802e2f6:	430b      	orrs	r3, r1
 802e2f8:	9906      	ldr	r1, [sp, #24]
 802e2fa:	430b      	orrs	r3, r1
 802e2fc:	d120      	bne.n	802e340 <_dtoa_r+0xad0>
 802e2fe:	2a00      	cmp	r2, #0
 802e300:	dded      	ble.n	802e2de <_dtoa_r+0xa6e>
 802e302:	4651      	mov	r1, sl
 802e304:	2201      	movs	r2, #1
 802e306:	4620      	mov	r0, r4
 802e308:	f000 fb4a 	bl	802e9a0 <__lshift>
 802e30c:	4631      	mov	r1, r6
 802e30e:	4682      	mov	sl, r0
 802e310:	f000 fbb2 	bl	802ea78 <__mcmp>
 802e314:	2800      	cmp	r0, #0
 802e316:	dc03      	bgt.n	802e320 <_dtoa_r+0xab0>
 802e318:	d1e1      	bne.n	802e2de <_dtoa_r+0xa6e>
 802e31a:	f019 0f01 	tst.w	r9, #1
 802e31e:	d0de      	beq.n	802e2de <_dtoa_r+0xa6e>
 802e320:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e324:	d1d8      	bne.n	802e2d8 <_dtoa_r+0xa68>
 802e326:	9a01      	ldr	r2, [sp, #4]
 802e328:	2339      	movs	r3, #57	; 0x39
 802e32a:	7013      	strb	r3, [r2, #0]
 802e32c:	462b      	mov	r3, r5
 802e32e:	461d      	mov	r5, r3
 802e330:	3b01      	subs	r3, #1
 802e332:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802e336:	2a39      	cmp	r2, #57	; 0x39
 802e338:	d06c      	beq.n	802e414 <_dtoa_r+0xba4>
 802e33a:	3201      	adds	r2, #1
 802e33c:	701a      	strb	r2, [r3, #0]
 802e33e:	e747      	b.n	802e1d0 <_dtoa_r+0x960>
 802e340:	2a00      	cmp	r2, #0
 802e342:	dd07      	ble.n	802e354 <_dtoa_r+0xae4>
 802e344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e348:	d0ed      	beq.n	802e326 <_dtoa_r+0xab6>
 802e34a:	9a01      	ldr	r2, [sp, #4]
 802e34c:	f109 0301 	add.w	r3, r9, #1
 802e350:	7013      	strb	r3, [r2, #0]
 802e352:	e73d      	b.n	802e1d0 <_dtoa_r+0x960>
 802e354:	9b04      	ldr	r3, [sp, #16]
 802e356:	9a08      	ldr	r2, [sp, #32]
 802e358:	f803 9c01 	strb.w	r9, [r3, #-1]
 802e35c:	4293      	cmp	r3, r2
 802e35e:	d043      	beq.n	802e3e8 <_dtoa_r+0xb78>
 802e360:	4651      	mov	r1, sl
 802e362:	2300      	movs	r3, #0
 802e364:	220a      	movs	r2, #10
 802e366:	4620      	mov	r0, r4
 802e368:	f000 f922 	bl	802e5b0 <__multadd>
 802e36c:	45b8      	cmp	r8, r7
 802e36e:	4682      	mov	sl, r0
 802e370:	f04f 0300 	mov.w	r3, #0
 802e374:	f04f 020a 	mov.w	r2, #10
 802e378:	4641      	mov	r1, r8
 802e37a:	4620      	mov	r0, r4
 802e37c:	d107      	bne.n	802e38e <_dtoa_r+0xb1e>
 802e37e:	f000 f917 	bl	802e5b0 <__multadd>
 802e382:	4680      	mov	r8, r0
 802e384:	4607      	mov	r7, r0
 802e386:	9b04      	ldr	r3, [sp, #16]
 802e388:	3301      	adds	r3, #1
 802e38a:	9304      	str	r3, [sp, #16]
 802e38c:	e775      	b.n	802e27a <_dtoa_r+0xa0a>
 802e38e:	f000 f90f 	bl	802e5b0 <__multadd>
 802e392:	4639      	mov	r1, r7
 802e394:	4680      	mov	r8, r0
 802e396:	2300      	movs	r3, #0
 802e398:	220a      	movs	r2, #10
 802e39a:	4620      	mov	r0, r4
 802e39c:	f000 f908 	bl	802e5b0 <__multadd>
 802e3a0:	4607      	mov	r7, r0
 802e3a2:	e7f0      	b.n	802e386 <_dtoa_r+0xb16>
 802e3a4:	9b04      	ldr	r3, [sp, #16]
 802e3a6:	9301      	str	r3, [sp, #4]
 802e3a8:	9d00      	ldr	r5, [sp, #0]
 802e3aa:	4631      	mov	r1, r6
 802e3ac:	4650      	mov	r0, sl
 802e3ae:	f7ff f9d4 	bl	802d75a <quorem>
 802e3b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e3b6:	9b00      	ldr	r3, [sp, #0]
 802e3b8:	f805 9b01 	strb.w	r9, [r5], #1
 802e3bc:	1aea      	subs	r2, r5, r3
 802e3be:	9b01      	ldr	r3, [sp, #4]
 802e3c0:	4293      	cmp	r3, r2
 802e3c2:	dd07      	ble.n	802e3d4 <_dtoa_r+0xb64>
 802e3c4:	4651      	mov	r1, sl
 802e3c6:	2300      	movs	r3, #0
 802e3c8:	220a      	movs	r2, #10
 802e3ca:	4620      	mov	r0, r4
 802e3cc:	f000 f8f0 	bl	802e5b0 <__multadd>
 802e3d0:	4682      	mov	sl, r0
 802e3d2:	e7ea      	b.n	802e3aa <_dtoa_r+0xb3a>
 802e3d4:	9b01      	ldr	r3, [sp, #4]
 802e3d6:	2b00      	cmp	r3, #0
 802e3d8:	bfc8      	it	gt
 802e3da:	461d      	movgt	r5, r3
 802e3dc:	9b00      	ldr	r3, [sp, #0]
 802e3de:	bfd8      	it	le
 802e3e0:	2501      	movle	r5, #1
 802e3e2:	441d      	add	r5, r3
 802e3e4:	f04f 0800 	mov.w	r8, #0
 802e3e8:	4651      	mov	r1, sl
 802e3ea:	2201      	movs	r2, #1
 802e3ec:	4620      	mov	r0, r4
 802e3ee:	f000 fad7 	bl	802e9a0 <__lshift>
 802e3f2:	4631      	mov	r1, r6
 802e3f4:	4682      	mov	sl, r0
 802e3f6:	f000 fb3f 	bl	802ea78 <__mcmp>
 802e3fa:	2800      	cmp	r0, #0
 802e3fc:	dc96      	bgt.n	802e32c <_dtoa_r+0xabc>
 802e3fe:	d102      	bne.n	802e406 <_dtoa_r+0xb96>
 802e400:	f019 0f01 	tst.w	r9, #1
 802e404:	d192      	bne.n	802e32c <_dtoa_r+0xabc>
 802e406:	462b      	mov	r3, r5
 802e408:	461d      	mov	r5, r3
 802e40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e40e:	2a30      	cmp	r2, #48	; 0x30
 802e410:	d0fa      	beq.n	802e408 <_dtoa_r+0xb98>
 802e412:	e6dd      	b.n	802e1d0 <_dtoa_r+0x960>
 802e414:	9a00      	ldr	r2, [sp, #0]
 802e416:	429a      	cmp	r2, r3
 802e418:	d189      	bne.n	802e32e <_dtoa_r+0xabe>
 802e41a:	f10b 0b01 	add.w	fp, fp, #1
 802e41e:	2331      	movs	r3, #49	; 0x31
 802e420:	e796      	b.n	802e350 <_dtoa_r+0xae0>
 802e422:	4b0a      	ldr	r3, [pc, #40]	; (802e44c <_dtoa_r+0xbdc>)
 802e424:	f7ff ba99 	b.w	802d95a <_dtoa_r+0xea>
 802e428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e42a:	2b00      	cmp	r3, #0
 802e42c:	f47f aa6d 	bne.w	802d90a <_dtoa_r+0x9a>
 802e430:	4b07      	ldr	r3, [pc, #28]	; (802e450 <_dtoa_r+0xbe0>)
 802e432:	f7ff ba92 	b.w	802d95a <_dtoa_r+0xea>
 802e436:	9b01      	ldr	r3, [sp, #4]
 802e438:	2b00      	cmp	r3, #0
 802e43a:	dcb5      	bgt.n	802e3a8 <_dtoa_r+0xb38>
 802e43c:	9b07      	ldr	r3, [sp, #28]
 802e43e:	2b02      	cmp	r3, #2
 802e440:	f73f aeb1 	bgt.w	802e1a6 <_dtoa_r+0x936>
 802e444:	e7b0      	b.n	802e3a8 <_dtoa_r+0xb38>
 802e446:	bf00      	nop
 802e448:	08034539 	.word	0x08034539
 802e44c:	08034820 	.word	0x08034820
 802e450:	080344d4 	.word	0x080344d4

0802e454 <_free_r>:
 802e454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e456:	2900      	cmp	r1, #0
 802e458:	d044      	beq.n	802e4e4 <_free_r+0x90>
 802e45a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e45e:	9001      	str	r0, [sp, #4]
 802e460:	2b00      	cmp	r3, #0
 802e462:	f1a1 0404 	sub.w	r4, r1, #4
 802e466:	bfb8      	it	lt
 802e468:	18e4      	addlt	r4, r4, r3
 802e46a:	f7fd fe99 	bl	802c1a0 <__malloc_lock>
 802e46e:	4a1e      	ldr	r2, [pc, #120]	; (802e4e8 <_free_r+0x94>)
 802e470:	9801      	ldr	r0, [sp, #4]
 802e472:	6813      	ldr	r3, [r2, #0]
 802e474:	b933      	cbnz	r3, 802e484 <_free_r+0x30>
 802e476:	6063      	str	r3, [r4, #4]
 802e478:	6014      	str	r4, [r2, #0]
 802e47a:	b003      	add	sp, #12
 802e47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e480:	f7fd be94 	b.w	802c1ac <__malloc_unlock>
 802e484:	42a3      	cmp	r3, r4
 802e486:	d908      	bls.n	802e49a <_free_r+0x46>
 802e488:	6825      	ldr	r5, [r4, #0]
 802e48a:	1961      	adds	r1, r4, r5
 802e48c:	428b      	cmp	r3, r1
 802e48e:	bf01      	itttt	eq
 802e490:	6819      	ldreq	r1, [r3, #0]
 802e492:	685b      	ldreq	r3, [r3, #4]
 802e494:	1949      	addeq	r1, r1, r5
 802e496:	6021      	streq	r1, [r4, #0]
 802e498:	e7ed      	b.n	802e476 <_free_r+0x22>
 802e49a:	461a      	mov	r2, r3
 802e49c:	685b      	ldr	r3, [r3, #4]
 802e49e:	b10b      	cbz	r3, 802e4a4 <_free_r+0x50>
 802e4a0:	42a3      	cmp	r3, r4
 802e4a2:	d9fa      	bls.n	802e49a <_free_r+0x46>
 802e4a4:	6811      	ldr	r1, [r2, #0]
 802e4a6:	1855      	adds	r5, r2, r1
 802e4a8:	42a5      	cmp	r5, r4
 802e4aa:	d10b      	bne.n	802e4c4 <_free_r+0x70>
 802e4ac:	6824      	ldr	r4, [r4, #0]
 802e4ae:	4421      	add	r1, r4
 802e4b0:	1854      	adds	r4, r2, r1
 802e4b2:	42a3      	cmp	r3, r4
 802e4b4:	6011      	str	r1, [r2, #0]
 802e4b6:	d1e0      	bne.n	802e47a <_free_r+0x26>
 802e4b8:	681c      	ldr	r4, [r3, #0]
 802e4ba:	685b      	ldr	r3, [r3, #4]
 802e4bc:	6053      	str	r3, [r2, #4]
 802e4be:	440c      	add	r4, r1
 802e4c0:	6014      	str	r4, [r2, #0]
 802e4c2:	e7da      	b.n	802e47a <_free_r+0x26>
 802e4c4:	d902      	bls.n	802e4cc <_free_r+0x78>
 802e4c6:	230c      	movs	r3, #12
 802e4c8:	6003      	str	r3, [r0, #0]
 802e4ca:	e7d6      	b.n	802e47a <_free_r+0x26>
 802e4cc:	6825      	ldr	r5, [r4, #0]
 802e4ce:	1961      	adds	r1, r4, r5
 802e4d0:	428b      	cmp	r3, r1
 802e4d2:	bf04      	itt	eq
 802e4d4:	6819      	ldreq	r1, [r3, #0]
 802e4d6:	685b      	ldreq	r3, [r3, #4]
 802e4d8:	6063      	str	r3, [r4, #4]
 802e4da:	bf04      	itt	eq
 802e4dc:	1949      	addeq	r1, r1, r5
 802e4de:	6021      	streq	r1, [r4, #0]
 802e4e0:	6054      	str	r4, [r2, #4]
 802e4e2:	e7ca      	b.n	802e47a <_free_r+0x26>
 802e4e4:	b003      	add	sp, #12
 802e4e6:	bd30      	pop	{r4, r5, pc}
 802e4e8:	2000d994 	.word	0x2000d994

0802e4ec <_Balloc>:
 802e4ec:	b570      	push	{r4, r5, r6, lr}
 802e4ee:	69c6      	ldr	r6, [r0, #28]
 802e4f0:	4604      	mov	r4, r0
 802e4f2:	460d      	mov	r5, r1
 802e4f4:	b976      	cbnz	r6, 802e514 <_Balloc+0x28>
 802e4f6:	2010      	movs	r0, #16
 802e4f8:	f7fd fda2 	bl	802c040 <malloc>
 802e4fc:	4602      	mov	r2, r0
 802e4fe:	61e0      	str	r0, [r4, #28]
 802e500:	b920      	cbnz	r0, 802e50c <_Balloc+0x20>
 802e502:	4b18      	ldr	r3, [pc, #96]	; (802e564 <_Balloc+0x78>)
 802e504:	4818      	ldr	r0, [pc, #96]	; (802e568 <_Balloc+0x7c>)
 802e506:	216b      	movs	r1, #107	; 0x6b
 802e508:	f7fd fd66 	bl	802bfd8 <__assert_func>
 802e50c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e510:	6006      	str	r6, [r0, #0]
 802e512:	60c6      	str	r6, [r0, #12]
 802e514:	69e6      	ldr	r6, [r4, #28]
 802e516:	68f3      	ldr	r3, [r6, #12]
 802e518:	b183      	cbz	r3, 802e53c <_Balloc+0x50>
 802e51a:	69e3      	ldr	r3, [r4, #28]
 802e51c:	68db      	ldr	r3, [r3, #12]
 802e51e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802e522:	b9b8      	cbnz	r0, 802e554 <_Balloc+0x68>
 802e524:	2101      	movs	r1, #1
 802e526:	fa01 f605 	lsl.w	r6, r1, r5
 802e52a:	1d72      	adds	r2, r6, #5
 802e52c:	0092      	lsls	r2, r2, #2
 802e52e:	4620      	mov	r0, r4
 802e530:	f7fd fd70 	bl	802c014 <_calloc_r>
 802e534:	b160      	cbz	r0, 802e550 <_Balloc+0x64>
 802e536:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802e53a:	e00e      	b.n	802e55a <_Balloc+0x6e>
 802e53c:	2221      	movs	r2, #33	; 0x21
 802e53e:	2104      	movs	r1, #4
 802e540:	4620      	mov	r0, r4
 802e542:	f7fd fd67 	bl	802c014 <_calloc_r>
 802e546:	69e3      	ldr	r3, [r4, #28]
 802e548:	60f0      	str	r0, [r6, #12]
 802e54a:	68db      	ldr	r3, [r3, #12]
 802e54c:	2b00      	cmp	r3, #0
 802e54e:	d1e4      	bne.n	802e51a <_Balloc+0x2e>
 802e550:	2000      	movs	r0, #0
 802e552:	bd70      	pop	{r4, r5, r6, pc}
 802e554:	6802      	ldr	r2, [r0, #0]
 802e556:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802e55a:	2300      	movs	r3, #0
 802e55c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802e560:	e7f7      	b.n	802e552 <_Balloc+0x66>
 802e562:	bf00      	nop
 802e564:	08034463 	.word	0x08034463
 802e568:	0803454a 	.word	0x0803454a

0802e56c <_Bfree>:
 802e56c:	b570      	push	{r4, r5, r6, lr}
 802e56e:	69c6      	ldr	r6, [r0, #28]
 802e570:	4605      	mov	r5, r0
 802e572:	460c      	mov	r4, r1
 802e574:	b976      	cbnz	r6, 802e594 <_Bfree+0x28>
 802e576:	2010      	movs	r0, #16
 802e578:	f7fd fd62 	bl	802c040 <malloc>
 802e57c:	4602      	mov	r2, r0
 802e57e:	61e8      	str	r0, [r5, #28]
 802e580:	b920      	cbnz	r0, 802e58c <_Bfree+0x20>
 802e582:	4b09      	ldr	r3, [pc, #36]	; (802e5a8 <_Bfree+0x3c>)
 802e584:	4809      	ldr	r0, [pc, #36]	; (802e5ac <_Bfree+0x40>)
 802e586:	218f      	movs	r1, #143	; 0x8f
 802e588:	f7fd fd26 	bl	802bfd8 <__assert_func>
 802e58c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e590:	6006      	str	r6, [r0, #0]
 802e592:	60c6      	str	r6, [r0, #12]
 802e594:	b13c      	cbz	r4, 802e5a6 <_Bfree+0x3a>
 802e596:	69eb      	ldr	r3, [r5, #28]
 802e598:	6862      	ldr	r2, [r4, #4]
 802e59a:	68db      	ldr	r3, [r3, #12]
 802e59c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802e5a0:	6021      	str	r1, [r4, #0]
 802e5a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802e5a6:	bd70      	pop	{r4, r5, r6, pc}
 802e5a8:	08034463 	.word	0x08034463
 802e5ac:	0803454a 	.word	0x0803454a

0802e5b0 <__multadd>:
 802e5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e5b4:	690d      	ldr	r5, [r1, #16]
 802e5b6:	4607      	mov	r7, r0
 802e5b8:	460c      	mov	r4, r1
 802e5ba:	461e      	mov	r6, r3
 802e5bc:	f101 0c14 	add.w	ip, r1, #20
 802e5c0:	2000      	movs	r0, #0
 802e5c2:	f8dc 3000 	ldr.w	r3, [ip]
 802e5c6:	b299      	uxth	r1, r3
 802e5c8:	fb02 6101 	mla	r1, r2, r1, r6
 802e5cc:	0c1e      	lsrs	r6, r3, #16
 802e5ce:	0c0b      	lsrs	r3, r1, #16
 802e5d0:	fb02 3306 	mla	r3, r2, r6, r3
 802e5d4:	b289      	uxth	r1, r1
 802e5d6:	3001      	adds	r0, #1
 802e5d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802e5dc:	4285      	cmp	r5, r0
 802e5de:	f84c 1b04 	str.w	r1, [ip], #4
 802e5e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802e5e6:	dcec      	bgt.n	802e5c2 <__multadd+0x12>
 802e5e8:	b30e      	cbz	r6, 802e62e <__multadd+0x7e>
 802e5ea:	68a3      	ldr	r3, [r4, #8]
 802e5ec:	42ab      	cmp	r3, r5
 802e5ee:	dc19      	bgt.n	802e624 <__multadd+0x74>
 802e5f0:	6861      	ldr	r1, [r4, #4]
 802e5f2:	4638      	mov	r0, r7
 802e5f4:	3101      	adds	r1, #1
 802e5f6:	f7ff ff79 	bl	802e4ec <_Balloc>
 802e5fa:	4680      	mov	r8, r0
 802e5fc:	b928      	cbnz	r0, 802e60a <__multadd+0x5a>
 802e5fe:	4602      	mov	r2, r0
 802e600:	4b0c      	ldr	r3, [pc, #48]	; (802e634 <__multadd+0x84>)
 802e602:	480d      	ldr	r0, [pc, #52]	; (802e638 <__multadd+0x88>)
 802e604:	21ba      	movs	r1, #186	; 0xba
 802e606:	f7fd fce7 	bl	802bfd8 <__assert_func>
 802e60a:	6922      	ldr	r2, [r4, #16]
 802e60c:	3202      	adds	r2, #2
 802e60e:	f104 010c 	add.w	r1, r4, #12
 802e612:	0092      	lsls	r2, r2, #2
 802e614:	300c      	adds	r0, #12
 802e616:	f7ff f884 	bl	802d722 <memcpy>
 802e61a:	4621      	mov	r1, r4
 802e61c:	4638      	mov	r0, r7
 802e61e:	f7ff ffa5 	bl	802e56c <_Bfree>
 802e622:	4644      	mov	r4, r8
 802e624:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802e628:	3501      	adds	r5, #1
 802e62a:	615e      	str	r6, [r3, #20]
 802e62c:	6125      	str	r5, [r4, #16]
 802e62e:	4620      	mov	r0, r4
 802e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e634:	08034539 	.word	0x08034539
 802e638:	0803454a 	.word	0x0803454a

0802e63c <__s2b>:
 802e63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e640:	460c      	mov	r4, r1
 802e642:	4615      	mov	r5, r2
 802e644:	461f      	mov	r7, r3
 802e646:	2209      	movs	r2, #9
 802e648:	3308      	adds	r3, #8
 802e64a:	4606      	mov	r6, r0
 802e64c:	fb93 f3f2 	sdiv	r3, r3, r2
 802e650:	2100      	movs	r1, #0
 802e652:	2201      	movs	r2, #1
 802e654:	429a      	cmp	r2, r3
 802e656:	db09      	blt.n	802e66c <__s2b+0x30>
 802e658:	4630      	mov	r0, r6
 802e65a:	f7ff ff47 	bl	802e4ec <_Balloc>
 802e65e:	b940      	cbnz	r0, 802e672 <__s2b+0x36>
 802e660:	4602      	mov	r2, r0
 802e662:	4b19      	ldr	r3, [pc, #100]	; (802e6c8 <__s2b+0x8c>)
 802e664:	4819      	ldr	r0, [pc, #100]	; (802e6cc <__s2b+0x90>)
 802e666:	21d3      	movs	r1, #211	; 0xd3
 802e668:	f7fd fcb6 	bl	802bfd8 <__assert_func>
 802e66c:	0052      	lsls	r2, r2, #1
 802e66e:	3101      	adds	r1, #1
 802e670:	e7f0      	b.n	802e654 <__s2b+0x18>
 802e672:	9b08      	ldr	r3, [sp, #32]
 802e674:	6143      	str	r3, [r0, #20]
 802e676:	2d09      	cmp	r5, #9
 802e678:	f04f 0301 	mov.w	r3, #1
 802e67c:	6103      	str	r3, [r0, #16]
 802e67e:	dd16      	ble.n	802e6ae <__s2b+0x72>
 802e680:	f104 0909 	add.w	r9, r4, #9
 802e684:	46c8      	mov	r8, r9
 802e686:	442c      	add	r4, r5
 802e688:	f818 3b01 	ldrb.w	r3, [r8], #1
 802e68c:	4601      	mov	r1, r0
 802e68e:	3b30      	subs	r3, #48	; 0x30
 802e690:	220a      	movs	r2, #10
 802e692:	4630      	mov	r0, r6
 802e694:	f7ff ff8c 	bl	802e5b0 <__multadd>
 802e698:	45a0      	cmp	r8, r4
 802e69a:	d1f5      	bne.n	802e688 <__s2b+0x4c>
 802e69c:	f1a5 0408 	sub.w	r4, r5, #8
 802e6a0:	444c      	add	r4, r9
 802e6a2:	1b2d      	subs	r5, r5, r4
 802e6a4:	1963      	adds	r3, r4, r5
 802e6a6:	42bb      	cmp	r3, r7
 802e6a8:	db04      	blt.n	802e6b4 <__s2b+0x78>
 802e6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e6ae:	340a      	adds	r4, #10
 802e6b0:	2509      	movs	r5, #9
 802e6b2:	e7f6      	b.n	802e6a2 <__s2b+0x66>
 802e6b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 802e6b8:	4601      	mov	r1, r0
 802e6ba:	3b30      	subs	r3, #48	; 0x30
 802e6bc:	220a      	movs	r2, #10
 802e6be:	4630      	mov	r0, r6
 802e6c0:	f7ff ff76 	bl	802e5b0 <__multadd>
 802e6c4:	e7ee      	b.n	802e6a4 <__s2b+0x68>
 802e6c6:	bf00      	nop
 802e6c8:	08034539 	.word	0x08034539
 802e6cc:	0803454a 	.word	0x0803454a

0802e6d0 <__hi0bits>:
 802e6d0:	0c03      	lsrs	r3, r0, #16
 802e6d2:	041b      	lsls	r3, r3, #16
 802e6d4:	b9d3      	cbnz	r3, 802e70c <__hi0bits+0x3c>
 802e6d6:	0400      	lsls	r0, r0, #16
 802e6d8:	2310      	movs	r3, #16
 802e6da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802e6de:	bf04      	itt	eq
 802e6e0:	0200      	lsleq	r0, r0, #8
 802e6e2:	3308      	addeq	r3, #8
 802e6e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802e6e8:	bf04      	itt	eq
 802e6ea:	0100      	lsleq	r0, r0, #4
 802e6ec:	3304      	addeq	r3, #4
 802e6ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802e6f2:	bf04      	itt	eq
 802e6f4:	0080      	lsleq	r0, r0, #2
 802e6f6:	3302      	addeq	r3, #2
 802e6f8:	2800      	cmp	r0, #0
 802e6fa:	db05      	blt.n	802e708 <__hi0bits+0x38>
 802e6fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802e700:	f103 0301 	add.w	r3, r3, #1
 802e704:	bf08      	it	eq
 802e706:	2320      	moveq	r3, #32
 802e708:	4618      	mov	r0, r3
 802e70a:	4770      	bx	lr
 802e70c:	2300      	movs	r3, #0
 802e70e:	e7e4      	b.n	802e6da <__hi0bits+0xa>

0802e710 <__lo0bits>:
 802e710:	6803      	ldr	r3, [r0, #0]
 802e712:	f013 0207 	ands.w	r2, r3, #7
 802e716:	d00c      	beq.n	802e732 <__lo0bits+0x22>
 802e718:	07d9      	lsls	r1, r3, #31
 802e71a:	d422      	bmi.n	802e762 <__lo0bits+0x52>
 802e71c:	079a      	lsls	r2, r3, #30
 802e71e:	bf49      	itett	mi
 802e720:	085b      	lsrmi	r3, r3, #1
 802e722:	089b      	lsrpl	r3, r3, #2
 802e724:	6003      	strmi	r3, [r0, #0]
 802e726:	2201      	movmi	r2, #1
 802e728:	bf5c      	itt	pl
 802e72a:	6003      	strpl	r3, [r0, #0]
 802e72c:	2202      	movpl	r2, #2
 802e72e:	4610      	mov	r0, r2
 802e730:	4770      	bx	lr
 802e732:	b299      	uxth	r1, r3
 802e734:	b909      	cbnz	r1, 802e73a <__lo0bits+0x2a>
 802e736:	0c1b      	lsrs	r3, r3, #16
 802e738:	2210      	movs	r2, #16
 802e73a:	b2d9      	uxtb	r1, r3
 802e73c:	b909      	cbnz	r1, 802e742 <__lo0bits+0x32>
 802e73e:	3208      	adds	r2, #8
 802e740:	0a1b      	lsrs	r3, r3, #8
 802e742:	0719      	lsls	r1, r3, #28
 802e744:	bf04      	itt	eq
 802e746:	091b      	lsreq	r3, r3, #4
 802e748:	3204      	addeq	r2, #4
 802e74a:	0799      	lsls	r1, r3, #30
 802e74c:	bf04      	itt	eq
 802e74e:	089b      	lsreq	r3, r3, #2
 802e750:	3202      	addeq	r2, #2
 802e752:	07d9      	lsls	r1, r3, #31
 802e754:	d403      	bmi.n	802e75e <__lo0bits+0x4e>
 802e756:	085b      	lsrs	r3, r3, #1
 802e758:	f102 0201 	add.w	r2, r2, #1
 802e75c:	d003      	beq.n	802e766 <__lo0bits+0x56>
 802e75e:	6003      	str	r3, [r0, #0]
 802e760:	e7e5      	b.n	802e72e <__lo0bits+0x1e>
 802e762:	2200      	movs	r2, #0
 802e764:	e7e3      	b.n	802e72e <__lo0bits+0x1e>
 802e766:	2220      	movs	r2, #32
 802e768:	e7e1      	b.n	802e72e <__lo0bits+0x1e>
	...

0802e76c <__i2b>:
 802e76c:	b510      	push	{r4, lr}
 802e76e:	460c      	mov	r4, r1
 802e770:	2101      	movs	r1, #1
 802e772:	f7ff febb 	bl	802e4ec <_Balloc>
 802e776:	4602      	mov	r2, r0
 802e778:	b928      	cbnz	r0, 802e786 <__i2b+0x1a>
 802e77a:	4b05      	ldr	r3, [pc, #20]	; (802e790 <__i2b+0x24>)
 802e77c:	4805      	ldr	r0, [pc, #20]	; (802e794 <__i2b+0x28>)
 802e77e:	f240 1145 	movw	r1, #325	; 0x145
 802e782:	f7fd fc29 	bl	802bfd8 <__assert_func>
 802e786:	2301      	movs	r3, #1
 802e788:	6144      	str	r4, [r0, #20]
 802e78a:	6103      	str	r3, [r0, #16]
 802e78c:	bd10      	pop	{r4, pc}
 802e78e:	bf00      	nop
 802e790:	08034539 	.word	0x08034539
 802e794:	0803454a 	.word	0x0803454a

0802e798 <__multiply>:
 802e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e79c:	4691      	mov	r9, r2
 802e79e:	690a      	ldr	r2, [r1, #16]
 802e7a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802e7a4:	429a      	cmp	r2, r3
 802e7a6:	bfb8      	it	lt
 802e7a8:	460b      	movlt	r3, r1
 802e7aa:	460c      	mov	r4, r1
 802e7ac:	bfbc      	itt	lt
 802e7ae:	464c      	movlt	r4, r9
 802e7b0:	4699      	movlt	r9, r3
 802e7b2:	6927      	ldr	r7, [r4, #16]
 802e7b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802e7b8:	68a3      	ldr	r3, [r4, #8]
 802e7ba:	6861      	ldr	r1, [r4, #4]
 802e7bc:	eb07 060a 	add.w	r6, r7, sl
 802e7c0:	42b3      	cmp	r3, r6
 802e7c2:	b085      	sub	sp, #20
 802e7c4:	bfb8      	it	lt
 802e7c6:	3101      	addlt	r1, #1
 802e7c8:	f7ff fe90 	bl	802e4ec <_Balloc>
 802e7cc:	b930      	cbnz	r0, 802e7dc <__multiply+0x44>
 802e7ce:	4602      	mov	r2, r0
 802e7d0:	4b44      	ldr	r3, [pc, #272]	; (802e8e4 <__multiply+0x14c>)
 802e7d2:	4845      	ldr	r0, [pc, #276]	; (802e8e8 <__multiply+0x150>)
 802e7d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802e7d8:	f7fd fbfe 	bl	802bfd8 <__assert_func>
 802e7dc:	f100 0514 	add.w	r5, r0, #20
 802e7e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802e7e4:	462b      	mov	r3, r5
 802e7e6:	2200      	movs	r2, #0
 802e7e8:	4543      	cmp	r3, r8
 802e7ea:	d321      	bcc.n	802e830 <__multiply+0x98>
 802e7ec:	f104 0314 	add.w	r3, r4, #20
 802e7f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802e7f4:	f109 0314 	add.w	r3, r9, #20
 802e7f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802e7fc:	9202      	str	r2, [sp, #8]
 802e7fe:	1b3a      	subs	r2, r7, r4
 802e800:	3a15      	subs	r2, #21
 802e802:	f022 0203 	bic.w	r2, r2, #3
 802e806:	3204      	adds	r2, #4
 802e808:	f104 0115 	add.w	r1, r4, #21
 802e80c:	428f      	cmp	r7, r1
 802e80e:	bf38      	it	cc
 802e810:	2204      	movcc	r2, #4
 802e812:	9201      	str	r2, [sp, #4]
 802e814:	9a02      	ldr	r2, [sp, #8]
 802e816:	9303      	str	r3, [sp, #12]
 802e818:	429a      	cmp	r2, r3
 802e81a:	d80c      	bhi.n	802e836 <__multiply+0x9e>
 802e81c:	2e00      	cmp	r6, #0
 802e81e:	dd03      	ble.n	802e828 <__multiply+0x90>
 802e820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802e824:	2b00      	cmp	r3, #0
 802e826:	d05b      	beq.n	802e8e0 <__multiply+0x148>
 802e828:	6106      	str	r6, [r0, #16]
 802e82a:	b005      	add	sp, #20
 802e82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e830:	f843 2b04 	str.w	r2, [r3], #4
 802e834:	e7d8      	b.n	802e7e8 <__multiply+0x50>
 802e836:	f8b3 a000 	ldrh.w	sl, [r3]
 802e83a:	f1ba 0f00 	cmp.w	sl, #0
 802e83e:	d024      	beq.n	802e88a <__multiply+0xf2>
 802e840:	f104 0e14 	add.w	lr, r4, #20
 802e844:	46a9      	mov	r9, r5
 802e846:	f04f 0c00 	mov.w	ip, #0
 802e84a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802e84e:	f8d9 1000 	ldr.w	r1, [r9]
 802e852:	fa1f fb82 	uxth.w	fp, r2
 802e856:	b289      	uxth	r1, r1
 802e858:	fb0a 110b 	mla	r1, sl, fp, r1
 802e85c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802e860:	f8d9 2000 	ldr.w	r2, [r9]
 802e864:	4461      	add	r1, ip
 802e866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802e86a:	fb0a c20b 	mla	r2, sl, fp, ip
 802e86e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802e872:	b289      	uxth	r1, r1
 802e874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802e878:	4577      	cmp	r7, lr
 802e87a:	f849 1b04 	str.w	r1, [r9], #4
 802e87e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802e882:	d8e2      	bhi.n	802e84a <__multiply+0xb2>
 802e884:	9a01      	ldr	r2, [sp, #4]
 802e886:	f845 c002 	str.w	ip, [r5, r2]
 802e88a:	9a03      	ldr	r2, [sp, #12]
 802e88c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802e890:	3304      	adds	r3, #4
 802e892:	f1b9 0f00 	cmp.w	r9, #0
 802e896:	d021      	beq.n	802e8dc <__multiply+0x144>
 802e898:	6829      	ldr	r1, [r5, #0]
 802e89a:	f104 0c14 	add.w	ip, r4, #20
 802e89e:	46ae      	mov	lr, r5
 802e8a0:	f04f 0a00 	mov.w	sl, #0
 802e8a4:	f8bc b000 	ldrh.w	fp, [ip]
 802e8a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802e8ac:	fb09 220b 	mla	r2, r9, fp, r2
 802e8b0:	4452      	add	r2, sl
 802e8b2:	b289      	uxth	r1, r1
 802e8b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802e8b8:	f84e 1b04 	str.w	r1, [lr], #4
 802e8bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 802e8c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802e8c4:	f8be 1000 	ldrh.w	r1, [lr]
 802e8c8:	fb09 110a 	mla	r1, r9, sl, r1
 802e8cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802e8d0:	4567      	cmp	r7, ip
 802e8d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802e8d6:	d8e5      	bhi.n	802e8a4 <__multiply+0x10c>
 802e8d8:	9a01      	ldr	r2, [sp, #4]
 802e8da:	50a9      	str	r1, [r5, r2]
 802e8dc:	3504      	adds	r5, #4
 802e8de:	e799      	b.n	802e814 <__multiply+0x7c>
 802e8e0:	3e01      	subs	r6, #1
 802e8e2:	e79b      	b.n	802e81c <__multiply+0x84>
 802e8e4:	08034539 	.word	0x08034539
 802e8e8:	0803454a 	.word	0x0803454a

0802e8ec <__pow5mult>:
 802e8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e8f0:	4615      	mov	r5, r2
 802e8f2:	f012 0203 	ands.w	r2, r2, #3
 802e8f6:	4606      	mov	r6, r0
 802e8f8:	460f      	mov	r7, r1
 802e8fa:	d007      	beq.n	802e90c <__pow5mult+0x20>
 802e8fc:	4c25      	ldr	r4, [pc, #148]	; (802e994 <__pow5mult+0xa8>)
 802e8fe:	3a01      	subs	r2, #1
 802e900:	2300      	movs	r3, #0
 802e902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802e906:	f7ff fe53 	bl	802e5b0 <__multadd>
 802e90a:	4607      	mov	r7, r0
 802e90c:	10ad      	asrs	r5, r5, #2
 802e90e:	d03d      	beq.n	802e98c <__pow5mult+0xa0>
 802e910:	69f4      	ldr	r4, [r6, #28]
 802e912:	b97c      	cbnz	r4, 802e934 <__pow5mult+0x48>
 802e914:	2010      	movs	r0, #16
 802e916:	f7fd fb93 	bl	802c040 <malloc>
 802e91a:	4602      	mov	r2, r0
 802e91c:	61f0      	str	r0, [r6, #28]
 802e91e:	b928      	cbnz	r0, 802e92c <__pow5mult+0x40>
 802e920:	4b1d      	ldr	r3, [pc, #116]	; (802e998 <__pow5mult+0xac>)
 802e922:	481e      	ldr	r0, [pc, #120]	; (802e99c <__pow5mult+0xb0>)
 802e924:	f240 11b3 	movw	r1, #435	; 0x1b3
 802e928:	f7fd fb56 	bl	802bfd8 <__assert_func>
 802e92c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802e930:	6004      	str	r4, [r0, #0]
 802e932:	60c4      	str	r4, [r0, #12]
 802e934:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802e938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802e93c:	b94c      	cbnz	r4, 802e952 <__pow5mult+0x66>
 802e93e:	f240 2171 	movw	r1, #625	; 0x271
 802e942:	4630      	mov	r0, r6
 802e944:	f7ff ff12 	bl	802e76c <__i2b>
 802e948:	2300      	movs	r3, #0
 802e94a:	f8c8 0008 	str.w	r0, [r8, #8]
 802e94e:	4604      	mov	r4, r0
 802e950:	6003      	str	r3, [r0, #0]
 802e952:	f04f 0900 	mov.w	r9, #0
 802e956:	07eb      	lsls	r3, r5, #31
 802e958:	d50a      	bpl.n	802e970 <__pow5mult+0x84>
 802e95a:	4639      	mov	r1, r7
 802e95c:	4622      	mov	r2, r4
 802e95e:	4630      	mov	r0, r6
 802e960:	f7ff ff1a 	bl	802e798 <__multiply>
 802e964:	4639      	mov	r1, r7
 802e966:	4680      	mov	r8, r0
 802e968:	4630      	mov	r0, r6
 802e96a:	f7ff fdff 	bl	802e56c <_Bfree>
 802e96e:	4647      	mov	r7, r8
 802e970:	106d      	asrs	r5, r5, #1
 802e972:	d00b      	beq.n	802e98c <__pow5mult+0xa0>
 802e974:	6820      	ldr	r0, [r4, #0]
 802e976:	b938      	cbnz	r0, 802e988 <__pow5mult+0x9c>
 802e978:	4622      	mov	r2, r4
 802e97a:	4621      	mov	r1, r4
 802e97c:	4630      	mov	r0, r6
 802e97e:	f7ff ff0b 	bl	802e798 <__multiply>
 802e982:	6020      	str	r0, [r4, #0]
 802e984:	f8c0 9000 	str.w	r9, [r0]
 802e988:	4604      	mov	r4, r0
 802e98a:	e7e4      	b.n	802e956 <__pow5mult+0x6a>
 802e98c:	4638      	mov	r0, r7
 802e98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e992:	bf00      	nop
 802e994:	08034698 	.word	0x08034698
 802e998:	08034463 	.word	0x08034463
 802e99c:	0803454a 	.word	0x0803454a

0802e9a0 <__lshift>:
 802e9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e9a4:	460c      	mov	r4, r1
 802e9a6:	6849      	ldr	r1, [r1, #4]
 802e9a8:	6923      	ldr	r3, [r4, #16]
 802e9aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802e9ae:	68a3      	ldr	r3, [r4, #8]
 802e9b0:	4607      	mov	r7, r0
 802e9b2:	4691      	mov	r9, r2
 802e9b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802e9b8:	f108 0601 	add.w	r6, r8, #1
 802e9bc:	42b3      	cmp	r3, r6
 802e9be:	db0b      	blt.n	802e9d8 <__lshift+0x38>
 802e9c0:	4638      	mov	r0, r7
 802e9c2:	f7ff fd93 	bl	802e4ec <_Balloc>
 802e9c6:	4605      	mov	r5, r0
 802e9c8:	b948      	cbnz	r0, 802e9de <__lshift+0x3e>
 802e9ca:	4602      	mov	r2, r0
 802e9cc:	4b28      	ldr	r3, [pc, #160]	; (802ea70 <__lshift+0xd0>)
 802e9ce:	4829      	ldr	r0, [pc, #164]	; (802ea74 <__lshift+0xd4>)
 802e9d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802e9d4:	f7fd fb00 	bl	802bfd8 <__assert_func>
 802e9d8:	3101      	adds	r1, #1
 802e9da:	005b      	lsls	r3, r3, #1
 802e9dc:	e7ee      	b.n	802e9bc <__lshift+0x1c>
 802e9de:	2300      	movs	r3, #0
 802e9e0:	f100 0114 	add.w	r1, r0, #20
 802e9e4:	f100 0210 	add.w	r2, r0, #16
 802e9e8:	4618      	mov	r0, r3
 802e9ea:	4553      	cmp	r3, sl
 802e9ec:	db33      	blt.n	802ea56 <__lshift+0xb6>
 802e9ee:	6920      	ldr	r0, [r4, #16]
 802e9f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802e9f4:	f104 0314 	add.w	r3, r4, #20
 802e9f8:	f019 091f 	ands.w	r9, r9, #31
 802e9fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802ea00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802ea04:	d02b      	beq.n	802ea5e <__lshift+0xbe>
 802ea06:	f1c9 0e20 	rsb	lr, r9, #32
 802ea0a:	468a      	mov	sl, r1
 802ea0c:	2200      	movs	r2, #0
 802ea0e:	6818      	ldr	r0, [r3, #0]
 802ea10:	fa00 f009 	lsl.w	r0, r0, r9
 802ea14:	4310      	orrs	r0, r2
 802ea16:	f84a 0b04 	str.w	r0, [sl], #4
 802ea1a:	f853 2b04 	ldr.w	r2, [r3], #4
 802ea1e:	459c      	cmp	ip, r3
 802ea20:	fa22 f20e 	lsr.w	r2, r2, lr
 802ea24:	d8f3      	bhi.n	802ea0e <__lshift+0x6e>
 802ea26:	ebac 0304 	sub.w	r3, ip, r4
 802ea2a:	3b15      	subs	r3, #21
 802ea2c:	f023 0303 	bic.w	r3, r3, #3
 802ea30:	3304      	adds	r3, #4
 802ea32:	f104 0015 	add.w	r0, r4, #21
 802ea36:	4584      	cmp	ip, r0
 802ea38:	bf38      	it	cc
 802ea3a:	2304      	movcc	r3, #4
 802ea3c:	50ca      	str	r2, [r1, r3]
 802ea3e:	b10a      	cbz	r2, 802ea44 <__lshift+0xa4>
 802ea40:	f108 0602 	add.w	r6, r8, #2
 802ea44:	3e01      	subs	r6, #1
 802ea46:	4638      	mov	r0, r7
 802ea48:	612e      	str	r6, [r5, #16]
 802ea4a:	4621      	mov	r1, r4
 802ea4c:	f7ff fd8e 	bl	802e56c <_Bfree>
 802ea50:	4628      	mov	r0, r5
 802ea52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea56:	f842 0f04 	str.w	r0, [r2, #4]!
 802ea5a:	3301      	adds	r3, #1
 802ea5c:	e7c5      	b.n	802e9ea <__lshift+0x4a>
 802ea5e:	3904      	subs	r1, #4
 802ea60:	f853 2b04 	ldr.w	r2, [r3], #4
 802ea64:	f841 2f04 	str.w	r2, [r1, #4]!
 802ea68:	459c      	cmp	ip, r3
 802ea6a:	d8f9      	bhi.n	802ea60 <__lshift+0xc0>
 802ea6c:	e7ea      	b.n	802ea44 <__lshift+0xa4>
 802ea6e:	bf00      	nop
 802ea70:	08034539 	.word	0x08034539
 802ea74:	0803454a 	.word	0x0803454a

0802ea78 <__mcmp>:
 802ea78:	b530      	push	{r4, r5, lr}
 802ea7a:	6902      	ldr	r2, [r0, #16]
 802ea7c:	690c      	ldr	r4, [r1, #16]
 802ea7e:	1b12      	subs	r2, r2, r4
 802ea80:	d10e      	bne.n	802eaa0 <__mcmp+0x28>
 802ea82:	f100 0314 	add.w	r3, r0, #20
 802ea86:	3114      	adds	r1, #20
 802ea88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802ea8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802ea90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802ea94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802ea98:	42a5      	cmp	r5, r4
 802ea9a:	d003      	beq.n	802eaa4 <__mcmp+0x2c>
 802ea9c:	d305      	bcc.n	802eaaa <__mcmp+0x32>
 802ea9e:	2201      	movs	r2, #1
 802eaa0:	4610      	mov	r0, r2
 802eaa2:	bd30      	pop	{r4, r5, pc}
 802eaa4:	4283      	cmp	r3, r0
 802eaa6:	d3f3      	bcc.n	802ea90 <__mcmp+0x18>
 802eaa8:	e7fa      	b.n	802eaa0 <__mcmp+0x28>
 802eaaa:	f04f 32ff 	mov.w	r2, #4294967295
 802eaae:	e7f7      	b.n	802eaa0 <__mcmp+0x28>

0802eab0 <__mdiff>:
 802eab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eab4:	460c      	mov	r4, r1
 802eab6:	4606      	mov	r6, r0
 802eab8:	4611      	mov	r1, r2
 802eaba:	4620      	mov	r0, r4
 802eabc:	4690      	mov	r8, r2
 802eabe:	f7ff ffdb 	bl	802ea78 <__mcmp>
 802eac2:	1e05      	subs	r5, r0, #0
 802eac4:	d110      	bne.n	802eae8 <__mdiff+0x38>
 802eac6:	4629      	mov	r1, r5
 802eac8:	4630      	mov	r0, r6
 802eaca:	f7ff fd0f 	bl	802e4ec <_Balloc>
 802eace:	b930      	cbnz	r0, 802eade <__mdiff+0x2e>
 802ead0:	4b3a      	ldr	r3, [pc, #232]	; (802ebbc <__mdiff+0x10c>)
 802ead2:	4602      	mov	r2, r0
 802ead4:	f240 2137 	movw	r1, #567	; 0x237
 802ead8:	4839      	ldr	r0, [pc, #228]	; (802ebc0 <__mdiff+0x110>)
 802eada:	f7fd fa7d 	bl	802bfd8 <__assert_func>
 802eade:	2301      	movs	r3, #1
 802eae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802eae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802eae8:	bfa4      	itt	ge
 802eaea:	4643      	movge	r3, r8
 802eaec:	46a0      	movge	r8, r4
 802eaee:	4630      	mov	r0, r6
 802eaf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802eaf4:	bfa6      	itte	ge
 802eaf6:	461c      	movge	r4, r3
 802eaf8:	2500      	movge	r5, #0
 802eafa:	2501      	movlt	r5, #1
 802eafc:	f7ff fcf6 	bl	802e4ec <_Balloc>
 802eb00:	b920      	cbnz	r0, 802eb0c <__mdiff+0x5c>
 802eb02:	4b2e      	ldr	r3, [pc, #184]	; (802ebbc <__mdiff+0x10c>)
 802eb04:	4602      	mov	r2, r0
 802eb06:	f240 2145 	movw	r1, #581	; 0x245
 802eb0a:	e7e5      	b.n	802ead8 <__mdiff+0x28>
 802eb0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802eb10:	6926      	ldr	r6, [r4, #16]
 802eb12:	60c5      	str	r5, [r0, #12]
 802eb14:	f104 0914 	add.w	r9, r4, #20
 802eb18:	f108 0514 	add.w	r5, r8, #20
 802eb1c:	f100 0e14 	add.w	lr, r0, #20
 802eb20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802eb24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802eb28:	f108 0210 	add.w	r2, r8, #16
 802eb2c:	46f2      	mov	sl, lr
 802eb2e:	2100      	movs	r1, #0
 802eb30:	f859 3b04 	ldr.w	r3, [r9], #4
 802eb34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802eb38:	fa11 f88b 	uxtah	r8, r1, fp
 802eb3c:	b299      	uxth	r1, r3
 802eb3e:	0c1b      	lsrs	r3, r3, #16
 802eb40:	eba8 0801 	sub.w	r8, r8, r1
 802eb44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802eb48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802eb4c:	fa1f f888 	uxth.w	r8, r8
 802eb50:	1419      	asrs	r1, r3, #16
 802eb52:	454e      	cmp	r6, r9
 802eb54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802eb58:	f84a 3b04 	str.w	r3, [sl], #4
 802eb5c:	d8e8      	bhi.n	802eb30 <__mdiff+0x80>
 802eb5e:	1b33      	subs	r3, r6, r4
 802eb60:	3b15      	subs	r3, #21
 802eb62:	f023 0303 	bic.w	r3, r3, #3
 802eb66:	3304      	adds	r3, #4
 802eb68:	3415      	adds	r4, #21
 802eb6a:	42a6      	cmp	r6, r4
 802eb6c:	bf38      	it	cc
 802eb6e:	2304      	movcc	r3, #4
 802eb70:	441d      	add	r5, r3
 802eb72:	4473      	add	r3, lr
 802eb74:	469e      	mov	lr, r3
 802eb76:	462e      	mov	r6, r5
 802eb78:	4566      	cmp	r6, ip
 802eb7a:	d30e      	bcc.n	802eb9a <__mdiff+0xea>
 802eb7c:	f10c 0203 	add.w	r2, ip, #3
 802eb80:	1b52      	subs	r2, r2, r5
 802eb82:	f022 0203 	bic.w	r2, r2, #3
 802eb86:	3d03      	subs	r5, #3
 802eb88:	45ac      	cmp	ip, r5
 802eb8a:	bf38      	it	cc
 802eb8c:	2200      	movcc	r2, #0
 802eb8e:	4413      	add	r3, r2
 802eb90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802eb94:	b17a      	cbz	r2, 802ebb6 <__mdiff+0x106>
 802eb96:	6107      	str	r7, [r0, #16]
 802eb98:	e7a4      	b.n	802eae4 <__mdiff+0x34>
 802eb9a:	f856 8b04 	ldr.w	r8, [r6], #4
 802eb9e:	fa11 f288 	uxtah	r2, r1, r8
 802eba2:	1414      	asrs	r4, r2, #16
 802eba4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802eba8:	b292      	uxth	r2, r2
 802ebaa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802ebae:	f84e 2b04 	str.w	r2, [lr], #4
 802ebb2:	1421      	asrs	r1, r4, #16
 802ebb4:	e7e0      	b.n	802eb78 <__mdiff+0xc8>
 802ebb6:	3f01      	subs	r7, #1
 802ebb8:	e7ea      	b.n	802eb90 <__mdiff+0xe0>
 802ebba:	bf00      	nop
 802ebbc:	08034539 	.word	0x08034539
 802ebc0:	0803454a 	.word	0x0803454a

0802ebc4 <__ulp>:
 802ebc4:	b082      	sub	sp, #8
 802ebc6:	ed8d 0b00 	vstr	d0, [sp]
 802ebca:	9a01      	ldr	r2, [sp, #4]
 802ebcc:	4b0f      	ldr	r3, [pc, #60]	; (802ec0c <__ulp+0x48>)
 802ebce:	4013      	ands	r3, r2
 802ebd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802ebd4:	2b00      	cmp	r3, #0
 802ebd6:	dc08      	bgt.n	802ebea <__ulp+0x26>
 802ebd8:	425b      	negs	r3, r3
 802ebda:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802ebde:	ea4f 5223 	mov.w	r2, r3, asr #20
 802ebe2:	da04      	bge.n	802ebee <__ulp+0x2a>
 802ebe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802ebe8:	4113      	asrs	r3, r2
 802ebea:	2200      	movs	r2, #0
 802ebec:	e008      	b.n	802ec00 <__ulp+0x3c>
 802ebee:	f1a2 0314 	sub.w	r3, r2, #20
 802ebf2:	2b1e      	cmp	r3, #30
 802ebf4:	bfda      	itte	le
 802ebf6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802ebfa:	40da      	lsrle	r2, r3
 802ebfc:	2201      	movgt	r2, #1
 802ebfe:	2300      	movs	r3, #0
 802ec00:	4619      	mov	r1, r3
 802ec02:	4610      	mov	r0, r2
 802ec04:	ec41 0b10 	vmov	d0, r0, r1
 802ec08:	b002      	add	sp, #8
 802ec0a:	4770      	bx	lr
 802ec0c:	7ff00000 	.word	0x7ff00000

0802ec10 <__b2d>:
 802ec10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ec14:	6906      	ldr	r6, [r0, #16]
 802ec16:	f100 0814 	add.w	r8, r0, #20
 802ec1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802ec1e:	1f37      	subs	r7, r6, #4
 802ec20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802ec24:	4610      	mov	r0, r2
 802ec26:	f7ff fd53 	bl	802e6d0 <__hi0bits>
 802ec2a:	f1c0 0320 	rsb	r3, r0, #32
 802ec2e:	280a      	cmp	r0, #10
 802ec30:	600b      	str	r3, [r1, #0]
 802ec32:	491b      	ldr	r1, [pc, #108]	; (802eca0 <__b2d+0x90>)
 802ec34:	dc15      	bgt.n	802ec62 <__b2d+0x52>
 802ec36:	f1c0 0c0b 	rsb	ip, r0, #11
 802ec3a:	fa22 f30c 	lsr.w	r3, r2, ip
 802ec3e:	45b8      	cmp	r8, r7
 802ec40:	ea43 0501 	orr.w	r5, r3, r1
 802ec44:	bf34      	ite	cc
 802ec46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802ec4a:	2300      	movcs	r3, #0
 802ec4c:	3015      	adds	r0, #21
 802ec4e:	fa02 f000 	lsl.w	r0, r2, r0
 802ec52:	fa23 f30c 	lsr.w	r3, r3, ip
 802ec56:	4303      	orrs	r3, r0
 802ec58:	461c      	mov	r4, r3
 802ec5a:	ec45 4b10 	vmov	d0, r4, r5
 802ec5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ec62:	45b8      	cmp	r8, r7
 802ec64:	bf3a      	itte	cc
 802ec66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802ec6a:	f1a6 0708 	subcc.w	r7, r6, #8
 802ec6e:	2300      	movcs	r3, #0
 802ec70:	380b      	subs	r0, #11
 802ec72:	d012      	beq.n	802ec9a <__b2d+0x8a>
 802ec74:	f1c0 0120 	rsb	r1, r0, #32
 802ec78:	fa23 f401 	lsr.w	r4, r3, r1
 802ec7c:	4082      	lsls	r2, r0
 802ec7e:	4322      	orrs	r2, r4
 802ec80:	4547      	cmp	r7, r8
 802ec82:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802ec86:	bf8c      	ite	hi
 802ec88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802ec8c:	2200      	movls	r2, #0
 802ec8e:	4083      	lsls	r3, r0
 802ec90:	40ca      	lsrs	r2, r1
 802ec92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802ec96:	4313      	orrs	r3, r2
 802ec98:	e7de      	b.n	802ec58 <__b2d+0x48>
 802ec9a:	ea42 0501 	orr.w	r5, r2, r1
 802ec9e:	e7db      	b.n	802ec58 <__b2d+0x48>
 802eca0:	3ff00000 	.word	0x3ff00000

0802eca4 <__d2b>:
 802eca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802eca8:	460f      	mov	r7, r1
 802ecaa:	2101      	movs	r1, #1
 802ecac:	ec59 8b10 	vmov	r8, r9, d0
 802ecb0:	4616      	mov	r6, r2
 802ecb2:	f7ff fc1b 	bl	802e4ec <_Balloc>
 802ecb6:	4604      	mov	r4, r0
 802ecb8:	b930      	cbnz	r0, 802ecc8 <__d2b+0x24>
 802ecba:	4602      	mov	r2, r0
 802ecbc:	4b24      	ldr	r3, [pc, #144]	; (802ed50 <__d2b+0xac>)
 802ecbe:	4825      	ldr	r0, [pc, #148]	; (802ed54 <__d2b+0xb0>)
 802ecc0:	f240 310f 	movw	r1, #783	; 0x30f
 802ecc4:	f7fd f988 	bl	802bfd8 <__assert_func>
 802ecc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802eccc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ecd0:	bb2d      	cbnz	r5, 802ed1e <__d2b+0x7a>
 802ecd2:	9301      	str	r3, [sp, #4]
 802ecd4:	f1b8 0300 	subs.w	r3, r8, #0
 802ecd8:	d026      	beq.n	802ed28 <__d2b+0x84>
 802ecda:	4668      	mov	r0, sp
 802ecdc:	9300      	str	r3, [sp, #0]
 802ecde:	f7ff fd17 	bl	802e710 <__lo0bits>
 802ece2:	e9dd 1200 	ldrd	r1, r2, [sp]
 802ece6:	b1e8      	cbz	r0, 802ed24 <__d2b+0x80>
 802ece8:	f1c0 0320 	rsb	r3, r0, #32
 802ecec:	fa02 f303 	lsl.w	r3, r2, r3
 802ecf0:	430b      	orrs	r3, r1
 802ecf2:	40c2      	lsrs	r2, r0
 802ecf4:	6163      	str	r3, [r4, #20]
 802ecf6:	9201      	str	r2, [sp, #4]
 802ecf8:	9b01      	ldr	r3, [sp, #4]
 802ecfa:	61a3      	str	r3, [r4, #24]
 802ecfc:	2b00      	cmp	r3, #0
 802ecfe:	bf14      	ite	ne
 802ed00:	2202      	movne	r2, #2
 802ed02:	2201      	moveq	r2, #1
 802ed04:	6122      	str	r2, [r4, #16]
 802ed06:	b1bd      	cbz	r5, 802ed38 <__d2b+0x94>
 802ed08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802ed0c:	4405      	add	r5, r0
 802ed0e:	603d      	str	r5, [r7, #0]
 802ed10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802ed14:	6030      	str	r0, [r6, #0]
 802ed16:	4620      	mov	r0, r4
 802ed18:	b003      	add	sp, #12
 802ed1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ed1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802ed22:	e7d6      	b.n	802ecd2 <__d2b+0x2e>
 802ed24:	6161      	str	r1, [r4, #20]
 802ed26:	e7e7      	b.n	802ecf8 <__d2b+0x54>
 802ed28:	a801      	add	r0, sp, #4
 802ed2a:	f7ff fcf1 	bl	802e710 <__lo0bits>
 802ed2e:	9b01      	ldr	r3, [sp, #4]
 802ed30:	6163      	str	r3, [r4, #20]
 802ed32:	3020      	adds	r0, #32
 802ed34:	2201      	movs	r2, #1
 802ed36:	e7e5      	b.n	802ed04 <__d2b+0x60>
 802ed38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802ed3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802ed40:	6038      	str	r0, [r7, #0]
 802ed42:	6918      	ldr	r0, [r3, #16]
 802ed44:	f7ff fcc4 	bl	802e6d0 <__hi0bits>
 802ed48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802ed4c:	e7e2      	b.n	802ed14 <__d2b+0x70>
 802ed4e:	bf00      	nop
 802ed50:	08034539 	.word	0x08034539
 802ed54:	0803454a 	.word	0x0803454a

0802ed58 <__ratio>:
 802ed58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed5c:	4688      	mov	r8, r1
 802ed5e:	4669      	mov	r1, sp
 802ed60:	4681      	mov	r9, r0
 802ed62:	f7ff ff55 	bl	802ec10 <__b2d>
 802ed66:	a901      	add	r1, sp, #4
 802ed68:	4640      	mov	r0, r8
 802ed6a:	ec55 4b10 	vmov	r4, r5, d0
 802ed6e:	f7ff ff4f 	bl	802ec10 <__b2d>
 802ed72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802ed76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802ed7a:	eba3 0c02 	sub.w	ip, r3, r2
 802ed7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 802ed82:	1a9b      	subs	r3, r3, r2
 802ed84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802ed88:	ec51 0b10 	vmov	r0, r1, d0
 802ed8c:	2b00      	cmp	r3, #0
 802ed8e:	bfd6      	itet	le
 802ed90:	460a      	movle	r2, r1
 802ed92:	462a      	movgt	r2, r5
 802ed94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802ed98:	468b      	mov	fp, r1
 802ed9a:	462f      	mov	r7, r5
 802ed9c:	bfd4      	ite	le
 802ed9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802eda2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802eda6:	4620      	mov	r0, r4
 802eda8:	ee10 2a10 	vmov	r2, s0
 802edac:	465b      	mov	r3, fp
 802edae:	4639      	mov	r1, r7
 802edb0:	f7e1 fd64 	bl	801087c <__aeabi_ddiv>
 802edb4:	ec41 0b10 	vmov	d0, r0, r1
 802edb8:	b003      	add	sp, #12
 802edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802edbe <__copybits>:
 802edbe:	3901      	subs	r1, #1
 802edc0:	b570      	push	{r4, r5, r6, lr}
 802edc2:	1149      	asrs	r1, r1, #5
 802edc4:	6914      	ldr	r4, [r2, #16]
 802edc6:	3101      	adds	r1, #1
 802edc8:	f102 0314 	add.w	r3, r2, #20
 802edcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802edd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802edd4:	1f05      	subs	r5, r0, #4
 802edd6:	42a3      	cmp	r3, r4
 802edd8:	d30c      	bcc.n	802edf4 <__copybits+0x36>
 802edda:	1aa3      	subs	r3, r4, r2
 802eddc:	3b11      	subs	r3, #17
 802edde:	f023 0303 	bic.w	r3, r3, #3
 802ede2:	3211      	adds	r2, #17
 802ede4:	42a2      	cmp	r2, r4
 802ede6:	bf88      	it	hi
 802ede8:	2300      	movhi	r3, #0
 802edea:	4418      	add	r0, r3
 802edec:	2300      	movs	r3, #0
 802edee:	4288      	cmp	r0, r1
 802edf0:	d305      	bcc.n	802edfe <__copybits+0x40>
 802edf2:	bd70      	pop	{r4, r5, r6, pc}
 802edf4:	f853 6b04 	ldr.w	r6, [r3], #4
 802edf8:	f845 6f04 	str.w	r6, [r5, #4]!
 802edfc:	e7eb      	b.n	802edd6 <__copybits+0x18>
 802edfe:	f840 3b04 	str.w	r3, [r0], #4
 802ee02:	e7f4      	b.n	802edee <__copybits+0x30>

0802ee04 <__any_on>:
 802ee04:	f100 0214 	add.w	r2, r0, #20
 802ee08:	6900      	ldr	r0, [r0, #16]
 802ee0a:	114b      	asrs	r3, r1, #5
 802ee0c:	4298      	cmp	r0, r3
 802ee0e:	b510      	push	{r4, lr}
 802ee10:	db11      	blt.n	802ee36 <__any_on+0x32>
 802ee12:	dd0a      	ble.n	802ee2a <__any_on+0x26>
 802ee14:	f011 011f 	ands.w	r1, r1, #31
 802ee18:	d007      	beq.n	802ee2a <__any_on+0x26>
 802ee1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802ee1e:	fa24 f001 	lsr.w	r0, r4, r1
 802ee22:	fa00 f101 	lsl.w	r1, r0, r1
 802ee26:	428c      	cmp	r4, r1
 802ee28:	d10b      	bne.n	802ee42 <__any_on+0x3e>
 802ee2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802ee2e:	4293      	cmp	r3, r2
 802ee30:	d803      	bhi.n	802ee3a <__any_on+0x36>
 802ee32:	2000      	movs	r0, #0
 802ee34:	bd10      	pop	{r4, pc}
 802ee36:	4603      	mov	r3, r0
 802ee38:	e7f7      	b.n	802ee2a <__any_on+0x26>
 802ee3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802ee3e:	2900      	cmp	r1, #0
 802ee40:	d0f5      	beq.n	802ee2e <__any_on+0x2a>
 802ee42:	2001      	movs	r0, #1
 802ee44:	e7f6      	b.n	802ee34 <__any_on+0x30>

0802ee46 <sulp>:
 802ee46:	b570      	push	{r4, r5, r6, lr}
 802ee48:	4604      	mov	r4, r0
 802ee4a:	460d      	mov	r5, r1
 802ee4c:	ec45 4b10 	vmov	d0, r4, r5
 802ee50:	4616      	mov	r6, r2
 802ee52:	f7ff feb7 	bl	802ebc4 <__ulp>
 802ee56:	ec51 0b10 	vmov	r0, r1, d0
 802ee5a:	b17e      	cbz	r6, 802ee7c <sulp+0x36>
 802ee5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802ee60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802ee64:	2b00      	cmp	r3, #0
 802ee66:	dd09      	ble.n	802ee7c <sulp+0x36>
 802ee68:	051b      	lsls	r3, r3, #20
 802ee6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802ee6e:	2400      	movs	r4, #0
 802ee70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802ee74:	4622      	mov	r2, r4
 802ee76:	462b      	mov	r3, r5
 802ee78:	f7e1 fbd6 	bl	8010628 <__aeabi_dmul>
 802ee7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802ee80 <_strtod_l>:
 802ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee84:	ed2d 8b02 	vpush	{d8}
 802ee88:	b09b      	sub	sp, #108	; 0x6c
 802ee8a:	4604      	mov	r4, r0
 802ee8c:	9213      	str	r2, [sp, #76]	; 0x4c
 802ee8e:	2200      	movs	r2, #0
 802ee90:	9216      	str	r2, [sp, #88]	; 0x58
 802ee92:	460d      	mov	r5, r1
 802ee94:	f04f 0800 	mov.w	r8, #0
 802ee98:	f04f 0900 	mov.w	r9, #0
 802ee9c:	460a      	mov	r2, r1
 802ee9e:	9215      	str	r2, [sp, #84]	; 0x54
 802eea0:	7811      	ldrb	r1, [r2, #0]
 802eea2:	292b      	cmp	r1, #43	; 0x2b
 802eea4:	d04c      	beq.n	802ef40 <_strtod_l+0xc0>
 802eea6:	d83a      	bhi.n	802ef1e <_strtod_l+0x9e>
 802eea8:	290d      	cmp	r1, #13
 802eeaa:	d834      	bhi.n	802ef16 <_strtod_l+0x96>
 802eeac:	2908      	cmp	r1, #8
 802eeae:	d834      	bhi.n	802ef1a <_strtod_l+0x9a>
 802eeb0:	2900      	cmp	r1, #0
 802eeb2:	d03d      	beq.n	802ef30 <_strtod_l+0xb0>
 802eeb4:	2200      	movs	r2, #0
 802eeb6:	920a      	str	r2, [sp, #40]	; 0x28
 802eeb8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802eeba:	7832      	ldrb	r2, [r6, #0]
 802eebc:	2a30      	cmp	r2, #48	; 0x30
 802eebe:	f040 80b4 	bne.w	802f02a <_strtod_l+0x1aa>
 802eec2:	7872      	ldrb	r2, [r6, #1]
 802eec4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 802eec8:	2a58      	cmp	r2, #88	; 0x58
 802eeca:	d170      	bne.n	802efae <_strtod_l+0x12e>
 802eecc:	9302      	str	r3, [sp, #8]
 802eece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802eed0:	9301      	str	r3, [sp, #4]
 802eed2:	ab16      	add	r3, sp, #88	; 0x58
 802eed4:	9300      	str	r3, [sp, #0]
 802eed6:	4a8e      	ldr	r2, [pc, #568]	; (802f110 <_strtod_l+0x290>)
 802eed8:	ab17      	add	r3, sp, #92	; 0x5c
 802eeda:	a915      	add	r1, sp, #84	; 0x54
 802eedc:	4620      	mov	r0, r4
 802eede:	f001 fe5f 	bl	8030ba0 <__gethex>
 802eee2:	f010 070f 	ands.w	r7, r0, #15
 802eee6:	4605      	mov	r5, r0
 802eee8:	d005      	beq.n	802eef6 <_strtod_l+0x76>
 802eeea:	2f06      	cmp	r7, #6
 802eeec:	d12a      	bne.n	802ef44 <_strtod_l+0xc4>
 802eeee:	3601      	adds	r6, #1
 802eef0:	2300      	movs	r3, #0
 802eef2:	9615      	str	r6, [sp, #84]	; 0x54
 802eef4:	930a      	str	r3, [sp, #40]	; 0x28
 802eef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802eef8:	2b00      	cmp	r3, #0
 802eefa:	f040 857f 	bne.w	802f9fc <_strtod_l+0xb7c>
 802eefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ef00:	b1db      	cbz	r3, 802ef3a <_strtod_l+0xba>
 802ef02:	4642      	mov	r2, r8
 802ef04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802ef08:	ec43 2b10 	vmov	d0, r2, r3
 802ef0c:	b01b      	add	sp, #108	; 0x6c
 802ef0e:	ecbd 8b02 	vpop	{d8}
 802ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ef16:	2920      	cmp	r1, #32
 802ef18:	d1cc      	bne.n	802eeb4 <_strtod_l+0x34>
 802ef1a:	3201      	adds	r2, #1
 802ef1c:	e7bf      	b.n	802ee9e <_strtod_l+0x1e>
 802ef1e:	292d      	cmp	r1, #45	; 0x2d
 802ef20:	d1c8      	bne.n	802eeb4 <_strtod_l+0x34>
 802ef22:	2101      	movs	r1, #1
 802ef24:	910a      	str	r1, [sp, #40]	; 0x28
 802ef26:	1c51      	adds	r1, r2, #1
 802ef28:	9115      	str	r1, [sp, #84]	; 0x54
 802ef2a:	7852      	ldrb	r2, [r2, #1]
 802ef2c:	2a00      	cmp	r2, #0
 802ef2e:	d1c3      	bne.n	802eeb8 <_strtod_l+0x38>
 802ef30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802ef32:	9515      	str	r5, [sp, #84]	; 0x54
 802ef34:	2b00      	cmp	r3, #0
 802ef36:	f040 855f 	bne.w	802f9f8 <_strtod_l+0xb78>
 802ef3a:	4642      	mov	r2, r8
 802ef3c:	464b      	mov	r3, r9
 802ef3e:	e7e3      	b.n	802ef08 <_strtod_l+0x88>
 802ef40:	2100      	movs	r1, #0
 802ef42:	e7ef      	b.n	802ef24 <_strtod_l+0xa4>
 802ef44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802ef46:	b13a      	cbz	r2, 802ef58 <_strtod_l+0xd8>
 802ef48:	2135      	movs	r1, #53	; 0x35
 802ef4a:	a818      	add	r0, sp, #96	; 0x60
 802ef4c:	f7ff ff37 	bl	802edbe <__copybits>
 802ef50:	9916      	ldr	r1, [sp, #88]	; 0x58
 802ef52:	4620      	mov	r0, r4
 802ef54:	f7ff fb0a 	bl	802e56c <_Bfree>
 802ef58:	3f01      	subs	r7, #1
 802ef5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802ef5c:	2f04      	cmp	r7, #4
 802ef5e:	d806      	bhi.n	802ef6e <_strtod_l+0xee>
 802ef60:	e8df f007 	tbb	[pc, r7]
 802ef64:	201d0314 	.word	0x201d0314
 802ef68:	14          	.byte	0x14
 802ef69:	00          	.byte	0x00
 802ef6a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 802ef6e:	05e9      	lsls	r1, r5, #23
 802ef70:	bf48      	it	mi
 802ef72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802ef76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802ef7a:	0d1b      	lsrs	r3, r3, #20
 802ef7c:	051b      	lsls	r3, r3, #20
 802ef7e:	2b00      	cmp	r3, #0
 802ef80:	d1b9      	bne.n	802eef6 <_strtod_l+0x76>
 802ef82:	f7fe fb99 	bl	802d6b8 <__errno>
 802ef86:	2322      	movs	r3, #34	; 0x22
 802ef88:	6003      	str	r3, [r0, #0]
 802ef8a:	e7b4      	b.n	802eef6 <_strtod_l+0x76>
 802ef8c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 802ef90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802ef94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802ef98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802ef9c:	e7e7      	b.n	802ef6e <_strtod_l+0xee>
 802ef9e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802f118 <_strtod_l+0x298>
 802efa2:	e7e4      	b.n	802ef6e <_strtod_l+0xee>
 802efa4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802efa8:	f04f 38ff 	mov.w	r8, #4294967295
 802efac:	e7df      	b.n	802ef6e <_strtod_l+0xee>
 802efae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802efb0:	1c5a      	adds	r2, r3, #1
 802efb2:	9215      	str	r2, [sp, #84]	; 0x54
 802efb4:	785b      	ldrb	r3, [r3, #1]
 802efb6:	2b30      	cmp	r3, #48	; 0x30
 802efb8:	d0f9      	beq.n	802efae <_strtod_l+0x12e>
 802efba:	2b00      	cmp	r3, #0
 802efbc:	d09b      	beq.n	802eef6 <_strtod_l+0x76>
 802efbe:	2301      	movs	r3, #1
 802efc0:	f04f 0a00 	mov.w	sl, #0
 802efc4:	9304      	str	r3, [sp, #16]
 802efc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802efc8:	930b      	str	r3, [sp, #44]	; 0x2c
 802efca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802efce:	46d3      	mov	fp, sl
 802efd0:	220a      	movs	r2, #10
 802efd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 802efd4:	7806      	ldrb	r6, [r0, #0]
 802efd6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802efda:	b2d9      	uxtb	r1, r3
 802efdc:	2909      	cmp	r1, #9
 802efde:	d926      	bls.n	802f02e <_strtod_l+0x1ae>
 802efe0:	494c      	ldr	r1, [pc, #304]	; (802f114 <_strtod_l+0x294>)
 802efe2:	2201      	movs	r2, #1
 802efe4:	f7fe fa10 	bl	802d408 <strncmp>
 802efe8:	2800      	cmp	r0, #0
 802efea:	d030      	beq.n	802f04e <_strtod_l+0x1ce>
 802efec:	2000      	movs	r0, #0
 802efee:	4632      	mov	r2, r6
 802eff0:	9005      	str	r0, [sp, #20]
 802eff2:	465e      	mov	r6, fp
 802eff4:	4603      	mov	r3, r0
 802eff6:	2a65      	cmp	r2, #101	; 0x65
 802eff8:	d001      	beq.n	802effe <_strtod_l+0x17e>
 802effa:	2a45      	cmp	r2, #69	; 0x45
 802effc:	d113      	bne.n	802f026 <_strtod_l+0x1a6>
 802effe:	b91e      	cbnz	r6, 802f008 <_strtod_l+0x188>
 802f000:	9a04      	ldr	r2, [sp, #16]
 802f002:	4302      	orrs	r2, r0
 802f004:	d094      	beq.n	802ef30 <_strtod_l+0xb0>
 802f006:	2600      	movs	r6, #0
 802f008:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802f00a:	1c6a      	adds	r2, r5, #1
 802f00c:	9215      	str	r2, [sp, #84]	; 0x54
 802f00e:	786a      	ldrb	r2, [r5, #1]
 802f010:	2a2b      	cmp	r2, #43	; 0x2b
 802f012:	d074      	beq.n	802f0fe <_strtod_l+0x27e>
 802f014:	2a2d      	cmp	r2, #45	; 0x2d
 802f016:	d078      	beq.n	802f10a <_strtod_l+0x28a>
 802f018:	f04f 0c00 	mov.w	ip, #0
 802f01c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802f020:	2909      	cmp	r1, #9
 802f022:	d97f      	bls.n	802f124 <_strtod_l+0x2a4>
 802f024:	9515      	str	r5, [sp, #84]	; 0x54
 802f026:	2700      	movs	r7, #0
 802f028:	e09e      	b.n	802f168 <_strtod_l+0x2e8>
 802f02a:	2300      	movs	r3, #0
 802f02c:	e7c8      	b.n	802efc0 <_strtod_l+0x140>
 802f02e:	f1bb 0f08 	cmp.w	fp, #8
 802f032:	bfd8      	it	le
 802f034:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802f036:	f100 0001 	add.w	r0, r0, #1
 802f03a:	bfda      	itte	le
 802f03c:	fb02 3301 	mlale	r3, r2, r1, r3
 802f040:	9309      	strle	r3, [sp, #36]	; 0x24
 802f042:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 802f046:	f10b 0b01 	add.w	fp, fp, #1
 802f04a:	9015      	str	r0, [sp, #84]	; 0x54
 802f04c:	e7c1      	b.n	802efd2 <_strtod_l+0x152>
 802f04e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f050:	1c5a      	adds	r2, r3, #1
 802f052:	9215      	str	r2, [sp, #84]	; 0x54
 802f054:	785a      	ldrb	r2, [r3, #1]
 802f056:	f1bb 0f00 	cmp.w	fp, #0
 802f05a:	d037      	beq.n	802f0cc <_strtod_l+0x24c>
 802f05c:	9005      	str	r0, [sp, #20]
 802f05e:	465e      	mov	r6, fp
 802f060:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 802f064:	2b09      	cmp	r3, #9
 802f066:	d912      	bls.n	802f08e <_strtod_l+0x20e>
 802f068:	2301      	movs	r3, #1
 802f06a:	e7c4      	b.n	802eff6 <_strtod_l+0x176>
 802f06c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f06e:	1c5a      	adds	r2, r3, #1
 802f070:	9215      	str	r2, [sp, #84]	; 0x54
 802f072:	785a      	ldrb	r2, [r3, #1]
 802f074:	3001      	adds	r0, #1
 802f076:	2a30      	cmp	r2, #48	; 0x30
 802f078:	d0f8      	beq.n	802f06c <_strtod_l+0x1ec>
 802f07a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802f07e:	2b08      	cmp	r3, #8
 802f080:	f200 84c1 	bhi.w	802fa06 <_strtod_l+0xb86>
 802f084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f086:	9005      	str	r0, [sp, #20]
 802f088:	2000      	movs	r0, #0
 802f08a:	930b      	str	r3, [sp, #44]	; 0x2c
 802f08c:	4606      	mov	r6, r0
 802f08e:	3a30      	subs	r2, #48	; 0x30
 802f090:	f100 0301 	add.w	r3, r0, #1
 802f094:	d014      	beq.n	802f0c0 <_strtod_l+0x240>
 802f096:	9905      	ldr	r1, [sp, #20]
 802f098:	4419      	add	r1, r3
 802f09a:	9105      	str	r1, [sp, #20]
 802f09c:	4633      	mov	r3, r6
 802f09e:	eb00 0c06 	add.w	ip, r0, r6
 802f0a2:	210a      	movs	r1, #10
 802f0a4:	4563      	cmp	r3, ip
 802f0a6:	d113      	bne.n	802f0d0 <_strtod_l+0x250>
 802f0a8:	1833      	adds	r3, r6, r0
 802f0aa:	2b08      	cmp	r3, #8
 802f0ac:	f106 0601 	add.w	r6, r6, #1
 802f0b0:	4406      	add	r6, r0
 802f0b2:	dc1a      	bgt.n	802f0ea <_strtod_l+0x26a>
 802f0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f0b6:	230a      	movs	r3, #10
 802f0b8:	fb03 2301 	mla	r3, r3, r1, r2
 802f0bc:	9309      	str	r3, [sp, #36]	; 0x24
 802f0be:	2300      	movs	r3, #0
 802f0c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f0c2:	1c51      	adds	r1, r2, #1
 802f0c4:	9115      	str	r1, [sp, #84]	; 0x54
 802f0c6:	7852      	ldrb	r2, [r2, #1]
 802f0c8:	4618      	mov	r0, r3
 802f0ca:	e7c9      	b.n	802f060 <_strtod_l+0x1e0>
 802f0cc:	4658      	mov	r0, fp
 802f0ce:	e7d2      	b.n	802f076 <_strtod_l+0x1f6>
 802f0d0:	2b08      	cmp	r3, #8
 802f0d2:	f103 0301 	add.w	r3, r3, #1
 802f0d6:	dc03      	bgt.n	802f0e0 <_strtod_l+0x260>
 802f0d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f0da:	434f      	muls	r7, r1
 802f0dc:	9709      	str	r7, [sp, #36]	; 0x24
 802f0de:	e7e1      	b.n	802f0a4 <_strtod_l+0x224>
 802f0e0:	2b10      	cmp	r3, #16
 802f0e2:	bfd8      	it	le
 802f0e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 802f0e8:	e7dc      	b.n	802f0a4 <_strtod_l+0x224>
 802f0ea:	2e10      	cmp	r6, #16
 802f0ec:	bfdc      	itt	le
 802f0ee:	230a      	movle	r3, #10
 802f0f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 802f0f4:	e7e3      	b.n	802f0be <_strtod_l+0x23e>
 802f0f6:	2300      	movs	r3, #0
 802f0f8:	9305      	str	r3, [sp, #20]
 802f0fa:	2301      	movs	r3, #1
 802f0fc:	e780      	b.n	802f000 <_strtod_l+0x180>
 802f0fe:	f04f 0c00 	mov.w	ip, #0
 802f102:	1caa      	adds	r2, r5, #2
 802f104:	9215      	str	r2, [sp, #84]	; 0x54
 802f106:	78aa      	ldrb	r2, [r5, #2]
 802f108:	e788      	b.n	802f01c <_strtod_l+0x19c>
 802f10a:	f04f 0c01 	mov.w	ip, #1
 802f10e:	e7f8      	b.n	802f102 <_strtod_l+0x282>
 802f110:	080346a8 	.word	0x080346a8
 802f114:	080346a4 	.word	0x080346a4
 802f118:	7ff00000 	.word	0x7ff00000
 802f11c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f11e:	1c51      	adds	r1, r2, #1
 802f120:	9115      	str	r1, [sp, #84]	; 0x54
 802f122:	7852      	ldrb	r2, [r2, #1]
 802f124:	2a30      	cmp	r2, #48	; 0x30
 802f126:	d0f9      	beq.n	802f11c <_strtod_l+0x29c>
 802f128:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 802f12c:	2908      	cmp	r1, #8
 802f12e:	f63f af7a 	bhi.w	802f026 <_strtod_l+0x1a6>
 802f132:	3a30      	subs	r2, #48	; 0x30
 802f134:	9208      	str	r2, [sp, #32]
 802f136:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f138:	920c      	str	r2, [sp, #48]	; 0x30
 802f13a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f13c:	1c57      	adds	r7, r2, #1
 802f13e:	9715      	str	r7, [sp, #84]	; 0x54
 802f140:	7852      	ldrb	r2, [r2, #1]
 802f142:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 802f146:	f1be 0f09 	cmp.w	lr, #9
 802f14a:	d938      	bls.n	802f1be <_strtod_l+0x33e>
 802f14c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802f14e:	1a7f      	subs	r7, r7, r1
 802f150:	2f08      	cmp	r7, #8
 802f152:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802f156:	dc03      	bgt.n	802f160 <_strtod_l+0x2e0>
 802f158:	9908      	ldr	r1, [sp, #32]
 802f15a:	428f      	cmp	r7, r1
 802f15c:	bfa8      	it	ge
 802f15e:	460f      	movge	r7, r1
 802f160:	f1bc 0f00 	cmp.w	ip, #0
 802f164:	d000      	beq.n	802f168 <_strtod_l+0x2e8>
 802f166:	427f      	negs	r7, r7
 802f168:	2e00      	cmp	r6, #0
 802f16a:	d14f      	bne.n	802f20c <_strtod_l+0x38c>
 802f16c:	9904      	ldr	r1, [sp, #16]
 802f16e:	4301      	orrs	r1, r0
 802f170:	f47f aec1 	bne.w	802eef6 <_strtod_l+0x76>
 802f174:	2b00      	cmp	r3, #0
 802f176:	f47f aedb 	bne.w	802ef30 <_strtod_l+0xb0>
 802f17a:	2a69      	cmp	r2, #105	; 0x69
 802f17c:	d029      	beq.n	802f1d2 <_strtod_l+0x352>
 802f17e:	dc26      	bgt.n	802f1ce <_strtod_l+0x34e>
 802f180:	2a49      	cmp	r2, #73	; 0x49
 802f182:	d026      	beq.n	802f1d2 <_strtod_l+0x352>
 802f184:	2a4e      	cmp	r2, #78	; 0x4e
 802f186:	f47f aed3 	bne.w	802ef30 <_strtod_l+0xb0>
 802f18a:	499b      	ldr	r1, [pc, #620]	; (802f3f8 <_strtod_l+0x578>)
 802f18c:	a815      	add	r0, sp, #84	; 0x54
 802f18e:	f001 ff47 	bl	8031020 <__match>
 802f192:	2800      	cmp	r0, #0
 802f194:	f43f aecc 	beq.w	802ef30 <_strtod_l+0xb0>
 802f198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f19a:	781b      	ldrb	r3, [r3, #0]
 802f19c:	2b28      	cmp	r3, #40	; 0x28
 802f19e:	d12f      	bne.n	802f200 <_strtod_l+0x380>
 802f1a0:	4996      	ldr	r1, [pc, #600]	; (802f3fc <_strtod_l+0x57c>)
 802f1a2:	aa18      	add	r2, sp, #96	; 0x60
 802f1a4:	a815      	add	r0, sp, #84	; 0x54
 802f1a6:	f001 ff4f 	bl	8031048 <__hexnan>
 802f1aa:	2805      	cmp	r0, #5
 802f1ac:	d128      	bne.n	802f200 <_strtod_l+0x380>
 802f1ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802f1b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802f1b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 802f1b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802f1bc:	e69b      	b.n	802eef6 <_strtod_l+0x76>
 802f1be:	9f08      	ldr	r7, [sp, #32]
 802f1c0:	210a      	movs	r1, #10
 802f1c2:	fb01 2107 	mla	r1, r1, r7, r2
 802f1c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802f1ca:	9208      	str	r2, [sp, #32]
 802f1cc:	e7b5      	b.n	802f13a <_strtod_l+0x2ba>
 802f1ce:	2a6e      	cmp	r2, #110	; 0x6e
 802f1d0:	e7d9      	b.n	802f186 <_strtod_l+0x306>
 802f1d2:	498b      	ldr	r1, [pc, #556]	; (802f400 <_strtod_l+0x580>)
 802f1d4:	a815      	add	r0, sp, #84	; 0x54
 802f1d6:	f001 ff23 	bl	8031020 <__match>
 802f1da:	2800      	cmp	r0, #0
 802f1dc:	f43f aea8 	beq.w	802ef30 <_strtod_l+0xb0>
 802f1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f1e2:	4988      	ldr	r1, [pc, #544]	; (802f404 <_strtod_l+0x584>)
 802f1e4:	3b01      	subs	r3, #1
 802f1e6:	a815      	add	r0, sp, #84	; 0x54
 802f1e8:	9315      	str	r3, [sp, #84]	; 0x54
 802f1ea:	f001 ff19 	bl	8031020 <__match>
 802f1ee:	b910      	cbnz	r0, 802f1f6 <_strtod_l+0x376>
 802f1f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f1f2:	3301      	adds	r3, #1
 802f1f4:	9315      	str	r3, [sp, #84]	; 0x54
 802f1f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 802f414 <_strtod_l+0x594>
 802f1fa:	f04f 0800 	mov.w	r8, #0
 802f1fe:	e67a      	b.n	802eef6 <_strtod_l+0x76>
 802f200:	4881      	ldr	r0, [pc, #516]	; (802f408 <_strtod_l+0x588>)
 802f202:	f001 fc5d 	bl	8030ac0 <nan>
 802f206:	ec59 8b10 	vmov	r8, r9, d0
 802f20a:	e674      	b.n	802eef6 <_strtod_l+0x76>
 802f20c:	9b05      	ldr	r3, [sp, #20]
 802f20e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f210:	1afb      	subs	r3, r7, r3
 802f212:	f1bb 0f00 	cmp.w	fp, #0
 802f216:	bf08      	it	eq
 802f218:	46b3      	moveq	fp, r6
 802f21a:	2e10      	cmp	r6, #16
 802f21c:	9308      	str	r3, [sp, #32]
 802f21e:	4635      	mov	r5, r6
 802f220:	bfa8      	it	ge
 802f222:	2510      	movge	r5, #16
 802f224:	f7e1 f986 	bl	8010534 <__aeabi_ui2d>
 802f228:	2e09      	cmp	r6, #9
 802f22a:	4680      	mov	r8, r0
 802f22c:	4689      	mov	r9, r1
 802f22e:	dd13      	ble.n	802f258 <_strtod_l+0x3d8>
 802f230:	4b76      	ldr	r3, [pc, #472]	; (802f40c <_strtod_l+0x58c>)
 802f232:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f236:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802f23a:	f7e1 f9f5 	bl	8010628 <__aeabi_dmul>
 802f23e:	4680      	mov	r8, r0
 802f240:	4650      	mov	r0, sl
 802f242:	4689      	mov	r9, r1
 802f244:	f7e1 f976 	bl	8010534 <__aeabi_ui2d>
 802f248:	4602      	mov	r2, r0
 802f24a:	460b      	mov	r3, r1
 802f24c:	4640      	mov	r0, r8
 802f24e:	4649      	mov	r1, r9
 802f250:	f7e1 f834 	bl	80102bc <__adddf3>
 802f254:	4680      	mov	r8, r0
 802f256:	4689      	mov	r9, r1
 802f258:	2e0f      	cmp	r6, #15
 802f25a:	dc38      	bgt.n	802f2ce <_strtod_l+0x44e>
 802f25c:	9b08      	ldr	r3, [sp, #32]
 802f25e:	2b00      	cmp	r3, #0
 802f260:	f43f ae49 	beq.w	802eef6 <_strtod_l+0x76>
 802f264:	dd24      	ble.n	802f2b0 <_strtod_l+0x430>
 802f266:	2b16      	cmp	r3, #22
 802f268:	dc0b      	bgt.n	802f282 <_strtod_l+0x402>
 802f26a:	4968      	ldr	r1, [pc, #416]	; (802f40c <_strtod_l+0x58c>)
 802f26c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f270:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f274:	4642      	mov	r2, r8
 802f276:	464b      	mov	r3, r9
 802f278:	f7e1 f9d6 	bl	8010628 <__aeabi_dmul>
 802f27c:	4680      	mov	r8, r0
 802f27e:	4689      	mov	r9, r1
 802f280:	e639      	b.n	802eef6 <_strtod_l+0x76>
 802f282:	9a08      	ldr	r2, [sp, #32]
 802f284:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 802f288:	4293      	cmp	r3, r2
 802f28a:	db20      	blt.n	802f2ce <_strtod_l+0x44e>
 802f28c:	4c5f      	ldr	r4, [pc, #380]	; (802f40c <_strtod_l+0x58c>)
 802f28e:	f1c6 060f 	rsb	r6, r6, #15
 802f292:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 802f296:	4642      	mov	r2, r8
 802f298:	464b      	mov	r3, r9
 802f29a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f29e:	f7e1 f9c3 	bl	8010628 <__aeabi_dmul>
 802f2a2:	9b08      	ldr	r3, [sp, #32]
 802f2a4:	1b9e      	subs	r6, r3, r6
 802f2a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 802f2aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f2ae:	e7e3      	b.n	802f278 <_strtod_l+0x3f8>
 802f2b0:	9b08      	ldr	r3, [sp, #32]
 802f2b2:	3316      	adds	r3, #22
 802f2b4:	db0b      	blt.n	802f2ce <_strtod_l+0x44e>
 802f2b6:	9b05      	ldr	r3, [sp, #20]
 802f2b8:	1bdf      	subs	r7, r3, r7
 802f2ba:	4b54      	ldr	r3, [pc, #336]	; (802f40c <_strtod_l+0x58c>)
 802f2bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802f2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f2c4:	4640      	mov	r0, r8
 802f2c6:	4649      	mov	r1, r9
 802f2c8:	f7e1 fad8 	bl	801087c <__aeabi_ddiv>
 802f2cc:	e7d6      	b.n	802f27c <_strtod_l+0x3fc>
 802f2ce:	9b08      	ldr	r3, [sp, #32]
 802f2d0:	1b75      	subs	r5, r6, r5
 802f2d2:	441d      	add	r5, r3
 802f2d4:	2d00      	cmp	r5, #0
 802f2d6:	dd70      	ble.n	802f3ba <_strtod_l+0x53a>
 802f2d8:	f015 030f 	ands.w	r3, r5, #15
 802f2dc:	d00a      	beq.n	802f2f4 <_strtod_l+0x474>
 802f2de:	494b      	ldr	r1, [pc, #300]	; (802f40c <_strtod_l+0x58c>)
 802f2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f2e4:	4642      	mov	r2, r8
 802f2e6:	464b      	mov	r3, r9
 802f2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f2ec:	f7e1 f99c 	bl	8010628 <__aeabi_dmul>
 802f2f0:	4680      	mov	r8, r0
 802f2f2:	4689      	mov	r9, r1
 802f2f4:	f035 050f 	bics.w	r5, r5, #15
 802f2f8:	d04d      	beq.n	802f396 <_strtod_l+0x516>
 802f2fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 802f2fe:	dd22      	ble.n	802f346 <_strtod_l+0x4c6>
 802f300:	2500      	movs	r5, #0
 802f302:	46ab      	mov	fp, r5
 802f304:	9509      	str	r5, [sp, #36]	; 0x24
 802f306:	9505      	str	r5, [sp, #20]
 802f308:	2322      	movs	r3, #34	; 0x22
 802f30a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802f414 <_strtod_l+0x594>
 802f30e:	6023      	str	r3, [r4, #0]
 802f310:	f04f 0800 	mov.w	r8, #0
 802f314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f316:	2b00      	cmp	r3, #0
 802f318:	f43f aded 	beq.w	802eef6 <_strtod_l+0x76>
 802f31c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f31e:	4620      	mov	r0, r4
 802f320:	f7ff f924 	bl	802e56c <_Bfree>
 802f324:	9905      	ldr	r1, [sp, #20]
 802f326:	4620      	mov	r0, r4
 802f328:	f7ff f920 	bl	802e56c <_Bfree>
 802f32c:	4659      	mov	r1, fp
 802f32e:	4620      	mov	r0, r4
 802f330:	f7ff f91c 	bl	802e56c <_Bfree>
 802f334:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f336:	4620      	mov	r0, r4
 802f338:	f7ff f918 	bl	802e56c <_Bfree>
 802f33c:	4629      	mov	r1, r5
 802f33e:	4620      	mov	r0, r4
 802f340:	f7ff f914 	bl	802e56c <_Bfree>
 802f344:	e5d7      	b.n	802eef6 <_strtod_l+0x76>
 802f346:	4b32      	ldr	r3, [pc, #200]	; (802f410 <_strtod_l+0x590>)
 802f348:	9304      	str	r3, [sp, #16]
 802f34a:	2300      	movs	r3, #0
 802f34c:	112d      	asrs	r5, r5, #4
 802f34e:	4640      	mov	r0, r8
 802f350:	4649      	mov	r1, r9
 802f352:	469a      	mov	sl, r3
 802f354:	2d01      	cmp	r5, #1
 802f356:	dc21      	bgt.n	802f39c <_strtod_l+0x51c>
 802f358:	b10b      	cbz	r3, 802f35e <_strtod_l+0x4de>
 802f35a:	4680      	mov	r8, r0
 802f35c:	4689      	mov	r9, r1
 802f35e:	492c      	ldr	r1, [pc, #176]	; (802f410 <_strtod_l+0x590>)
 802f360:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802f364:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802f368:	4642      	mov	r2, r8
 802f36a:	464b      	mov	r3, r9
 802f36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f370:	f7e1 f95a 	bl	8010628 <__aeabi_dmul>
 802f374:	4b27      	ldr	r3, [pc, #156]	; (802f414 <_strtod_l+0x594>)
 802f376:	460a      	mov	r2, r1
 802f378:	400b      	ands	r3, r1
 802f37a:	4927      	ldr	r1, [pc, #156]	; (802f418 <_strtod_l+0x598>)
 802f37c:	428b      	cmp	r3, r1
 802f37e:	4680      	mov	r8, r0
 802f380:	d8be      	bhi.n	802f300 <_strtod_l+0x480>
 802f382:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802f386:	428b      	cmp	r3, r1
 802f388:	bf86      	itte	hi
 802f38a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 802f41c <_strtod_l+0x59c>
 802f38e:	f04f 38ff 	movhi.w	r8, #4294967295
 802f392:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 802f396:	2300      	movs	r3, #0
 802f398:	9304      	str	r3, [sp, #16]
 802f39a:	e07b      	b.n	802f494 <_strtod_l+0x614>
 802f39c:	07ea      	lsls	r2, r5, #31
 802f39e:	d505      	bpl.n	802f3ac <_strtod_l+0x52c>
 802f3a0:	9b04      	ldr	r3, [sp, #16]
 802f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f3a6:	f7e1 f93f 	bl	8010628 <__aeabi_dmul>
 802f3aa:	2301      	movs	r3, #1
 802f3ac:	9a04      	ldr	r2, [sp, #16]
 802f3ae:	3208      	adds	r2, #8
 802f3b0:	f10a 0a01 	add.w	sl, sl, #1
 802f3b4:	106d      	asrs	r5, r5, #1
 802f3b6:	9204      	str	r2, [sp, #16]
 802f3b8:	e7cc      	b.n	802f354 <_strtod_l+0x4d4>
 802f3ba:	d0ec      	beq.n	802f396 <_strtod_l+0x516>
 802f3bc:	426d      	negs	r5, r5
 802f3be:	f015 020f 	ands.w	r2, r5, #15
 802f3c2:	d00a      	beq.n	802f3da <_strtod_l+0x55a>
 802f3c4:	4b11      	ldr	r3, [pc, #68]	; (802f40c <_strtod_l+0x58c>)
 802f3c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802f3ca:	4640      	mov	r0, r8
 802f3cc:	4649      	mov	r1, r9
 802f3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f3d2:	f7e1 fa53 	bl	801087c <__aeabi_ddiv>
 802f3d6:	4680      	mov	r8, r0
 802f3d8:	4689      	mov	r9, r1
 802f3da:	112d      	asrs	r5, r5, #4
 802f3dc:	d0db      	beq.n	802f396 <_strtod_l+0x516>
 802f3de:	2d1f      	cmp	r5, #31
 802f3e0:	dd1e      	ble.n	802f420 <_strtod_l+0x5a0>
 802f3e2:	2500      	movs	r5, #0
 802f3e4:	46ab      	mov	fp, r5
 802f3e6:	9509      	str	r5, [sp, #36]	; 0x24
 802f3e8:	9505      	str	r5, [sp, #20]
 802f3ea:	2322      	movs	r3, #34	; 0x22
 802f3ec:	f04f 0800 	mov.w	r8, #0
 802f3f0:	f04f 0900 	mov.w	r9, #0
 802f3f4:	6023      	str	r3, [r4, #0]
 802f3f6:	e78d      	b.n	802f314 <_strtod_l+0x494>
 802f3f8:	08034439 	.word	0x08034439
 802f3fc:	080346bc 	.word	0x080346bc
 802f400:	08034431 	.word	0x08034431
 802f404:	080344d7 	.word	0x080344d7
 802f408:	0803442b 	.word	0x0803442b
 802f40c:	080345d0 	.word	0x080345d0
 802f410:	080345a8 	.word	0x080345a8
 802f414:	7ff00000 	.word	0x7ff00000
 802f418:	7ca00000 	.word	0x7ca00000
 802f41c:	7fefffff 	.word	0x7fefffff
 802f420:	f015 0310 	ands.w	r3, r5, #16
 802f424:	bf18      	it	ne
 802f426:	236a      	movne	r3, #106	; 0x6a
 802f428:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802f7cc <_strtod_l+0x94c>
 802f42c:	9304      	str	r3, [sp, #16]
 802f42e:	4640      	mov	r0, r8
 802f430:	4649      	mov	r1, r9
 802f432:	2300      	movs	r3, #0
 802f434:	07ea      	lsls	r2, r5, #31
 802f436:	d504      	bpl.n	802f442 <_strtod_l+0x5c2>
 802f438:	e9da 2300 	ldrd	r2, r3, [sl]
 802f43c:	f7e1 f8f4 	bl	8010628 <__aeabi_dmul>
 802f440:	2301      	movs	r3, #1
 802f442:	106d      	asrs	r5, r5, #1
 802f444:	f10a 0a08 	add.w	sl, sl, #8
 802f448:	d1f4      	bne.n	802f434 <_strtod_l+0x5b4>
 802f44a:	b10b      	cbz	r3, 802f450 <_strtod_l+0x5d0>
 802f44c:	4680      	mov	r8, r0
 802f44e:	4689      	mov	r9, r1
 802f450:	9b04      	ldr	r3, [sp, #16]
 802f452:	b1bb      	cbz	r3, 802f484 <_strtod_l+0x604>
 802f454:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802f458:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802f45c:	2b00      	cmp	r3, #0
 802f45e:	4649      	mov	r1, r9
 802f460:	dd10      	ble.n	802f484 <_strtod_l+0x604>
 802f462:	2b1f      	cmp	r3, #31
 802f464:	f340 811e 	ble.w	802f6a4 <_strtod_l+0x824>
 802f468:	2b34      	cmp	r3, #52	; 0x34
 802f46a:	bfde      	ittt	le
 802f46c:	f04f 33ff 	movle.w	r3, #4294967295
 802f470:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802f474:	4093      	lslle	r3, r2
 802f476:	f04f 0800 	mov.w	r8, #0
 802f47a:	bfcc      	ite	gt
 802f47c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802f480:	ea03 0901 	andle.w	r9, r3, r1
 802f484:	2200      	movs	r2, #0
 802f486:	2300      	movs	r3, #0
 802f488:	4640      	mov	r0, r8
 802f48a:	4649      	mov	r1, r9
 802f48c:	f7e1 fb34 	bl	8010af8 <__aeabi_dcmpeq>
 802f490:	2800      	cmp	r0, #0
 802f492:	d1a6      	bne.n	802f3e2 <_strtod_l+0x562>
 802f494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f496:	9300      	str	r3, [sp, #0]
 802f498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802f49a:	4633      	mov	r3, r6
 802f49c:	465a      	mov	r2, fp
 802f49e:	4620      	mov	r0, r4
 802f4a0:	f7ff f8cc 	bl	802e63c <__s2b>
 802f4a4:	9009      	str	r0, [sp, #36]	; 0x24
 802f4a6:	2800      	cmp	r0, #0
 802f4a8:	f43f af2a 	beq.w	802f300 <_strtod_l+0x480>
 802f4ac:	9a08      	ldr	r2, [sp, #32]
 802f4ae:	9b05      	ldr	r3, [sp, #20]
 802f4b0:	2a00      	cmp	r2, #0
 802f4b2:	eba3 0307 	sub.w	r3, r3, r7
 802f4b6:	bfa8      	it	ge
 802f4b8:	2300      	movge	r3, #0
 802f4ba:	930c      	str	r3, [sp, #48]	; 0x30
 802f4bc:	2500      	movs	r5, #0
 802f4be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802f4c2:	9312      	str	r3, [sp, #72]	; 0x48
 802f4c4:	46ab      	mov	fp, r5
 802f4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f4c8:	4620      	mov	r0, r4
 802f4ca:	6859      	ldr	r1, [r3, #4]
 802f4cc:	f7ff f80e 	bl	802e4ec <_Balloc>
 802f4d0:	9005      	str	r0, [sp, #20]
 802f4d2:	2800      	cmp	r0, #0
 802f4d4:	f43f af18 	beq.w	802f308 <_strtod_l+0x488>
 802f4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f4da:	691a      	ldr	r2, [r3, #16]
 802f4dc:	3202      	adds	r2, #2
 802f4de:	f103 010c 	add.w	r1, r3, #12
 802f4e2:	0092      	lsls	r2, r2, #2
 802f4e4:	300c      	adds	r0, #12
 802f4e6:	f7fe f91c 	bl	802d722 <memcpy>
 802f4ea:	ec49 8b10 	vmov	d0, r8, r9
 802f4ee:	aa18      	add	r2, sp, #96	; 0x60
 802f4f0:	a917      	add	r1, sp, #92	; 0x5c
 802f4f2:	4620      	mov	r0, r4
 802f4f4:	f7ff fbd6 	bl	802eca4 <__d2b>
 802f4f8:	ec49 8b18 	vmov	d8, r8, r9
 802f4fc:	9016      	str	r0, [sp, #88]	; 0x58
 802f4fe:	2800      	cmp	r0, #0
 802f500:	f43f af02 	beq.w	802f308 <_strtod_l+0x488>
 802f504:	2101      	movs	r1, #1
 802f506:	4620      	mov	r0, r4
 802f508:	f7ff f930 	bl	802e76c <__i2b>
 802f50c:	4683      	mov	fp, r0
 802f50e:	2800      	cmp	r0, #0
 802f510:	f43f aefa 	beq.w	802f308 <_strtod_l+0x488>
 802f514:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802f516:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802f518:	2e00      	cmp	r6, #0
 802f51a:	bfab      	itete	ge
 802f51c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 802f51e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 802f520:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802f522:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 802f526:	bfac      	ite	ge
 802f528:	eb06 0a03 	addge.w	sl, r6, r3
 802f52c:	1b9f      	sublt	r7, r3, r6
 802f52e:	9b04      	ldr	r3, [sp, #16]
 802f530:	1af6      	subs	r6, r6, r3
 802f532:	4416      	add	r6, r2
 802f534:	4ba0      	ldr	r3, [pc, #640]	; (802f7b8 <_strtod_l+0x938>)
 802f536:	3e01      	subs	r6, #1
 802f538:	429e      	cmp	r6, r3
 802f53a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802f53e:	f280 80c4 	bge.w	802f6ca <_strtod_l+0x84a>
 802f542:	1b9b      	subs	r3, r3, r6
 802f544:	2b1f      	cmp	r3, #31
 802f546:	eba2 0203 	sub.w	r2, r2, r3
 802f54a:	f04f 0101 	mov.w	r1, #1
 802f54e:	f300 80b0 	bgt.w	802f6b2 <_strtod_l+0x832>
 802f552:	fa01 f303 	lsl.w	r3, r1, r3
 802f556:	930e      	str	r3, [sp, #56]	; 0x38
 802f558:	2300      	movs	r3, #0
 802f55a:	930d      	str	r3, [sp, #52]	; 0x34
 802f55c:	eb0a 0602 	add.w	r6, sl, r2
 802f560:	9b04      	ldr	r3, [sp, #16]
 802f562:	45b2      	cmp	sl, r6
 802f564:	4417      	add	r7, r2
 802f566:	441f      	add	r7, r3
 802f568:	4653      	mov	r3, sl
 802f56a:	bfa8      	it	ge
 802f56c:	4633      	movge	r3, r6
 802f56e:	42bb      	cmp	r3, r7
 802f570:	bfa8      	it	ge
 802f572:	463b      	movge	r3, r7
 802f574:	2b00      	cmp	r3, #0
 802f576:	bfc2      	ittt	gt
 802f578:	1af6      	subgt	r6, r6, r3
 802f57a:	1aff      	subgt	r7, r7, r3
 802f57c:	ebaa 0a03 	subgt.w	sl, sl, r3
 802f580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802f582:	2b00      	cmp	r3, #0
 802f584:	dd17      	ble.n	802f5b6 <_strtod_l+0x736>
 802f586:	4659      	mov	r1, fp
 802f588:	461a      	mov	r2, r3
 802f58a:	4620      	mov	r0, r4
 802f58c:	f7ff f9ae 	bl	802e8ec <__pow5mult>
 802f590:	4683      	mov	fp, r0
 802f592:	2800      	cmp	r0, #0
 802f594:	f43f aeb8 	beq.w	802f308 <_strtod_l+0x488>
 802f598:	4601      	mov	r1, r0
 802f59a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f59c:	4620      	mov	r0, r4
 802f59e:	f7ff f8fb 	bl	802e798 <__multiply>
 802f5a2:	900b      	str	r0, [sp, #44]	; 0x2c
 802f5a4:	2800      	cmp	r0, #0
 802f5a6:	f43f aeaf 	beq.w	802f308 <_strtod_l+0x488>
 802f5aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f5ac:	4620      	mov	r0, r4
 802f5ae:	f7fe ffdd 	bl	802e56c <_Bfree>
 802f5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f5b4:	9316      	str	r3, [sp, #88]	; 0x58
 802f5b6:	2e00      	cmp	r6, #0
 802f5b8:	f300 808c 	bgt.w	802f6d4 <_strtod_l+0x854>
 802f5bc:	9b08      	ldr	r3, [sp, #32]
 802f5be:	2b00      	cmp	r3, #0
 802f5c0:	dd08      	ble.n	802f5d4 <_strtod_l+0x754>
 802f5c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802f5c4:	9905      	ldr	r1, [sp, #20]
 802f5c6:	4620      	mov	r0, r4
 802f5c8:	f7ff f990 	bl	802e8ec <__pow5mult>
 802f5cc:	9005      	str	r0, [sp, #20]
 802f5ce:	2800      	cmp	r0, #0
 802f5d0:	f43f ae9a 	beq.w	802f308 <_strtod_l+0x488>
 802f5d4:	2f00      	cmp	r7, #0
 802f5d6:	dd08      	ble.n	802f5ea <_strtod_l+0x76a>
 802f5d8:	9905      	ldr	r1, [sp, #20]
 802f5da:	463a      	mov	r2, r7
 802f5dc:	4620      	mov	r0, r4
 802f5de:	f7ff f9df 	bl	802e9a0 <__lshift>
 802f5e2:	9005      	str	r0, [sp, #20]
 802f5e4:	2800      	cmp	r0, #0
 802f5e6:	f43f ae8f 	beq.w	802f308 <_strtod_l+0x488>
 802f5ea:	f1ba 0f00 	cmp.w	sl, #0
 802f5ee:	dd08      	ble.n	802f602 <_strtod_l+0x782>
 802f5f0:	4659      	mov	r1, fp
 802f5f2:	4652      	mov	r2, sl
 802f5f4:	4620      	mov	r0, r4
 802f5f6:	f7ff f9d3 	bl	802e9a0 <__lshift>
 802f5fa:	4683      	mov	fp, r0
 802f5fc:	2800      	cmp	r0, #0
 802f5fe:	f43f ae83 	beq.w	802f308 <_strtod_l+0x488>
 802f602:	9a05      	ldr	r2, [sp, #20]
 802f604:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f606:	4620      	mov	r0, r4
 802f608:	f7ff fa52 	bl	802eab0 <__mdiff>
 802f60c:	4605      	mov	r5, r0
 802f60e:	2800      	cmp	r0, #0
 802f610:	f43f ae7a 	beq.w	802f308 <_strtod_l+0x488>
 802f614:	68c3      	ldr	r3, [r0, #12]
 802f616:	930b      	str	r3, [sp, #44]	; 0x2c
 802f618:	2300      	movs	r3, #0
 802f61a:	60c3      	str	r3, [r0, #12]
 802f61c:	4659      	mov	r1, fp
 802f61e:	f7ff fa2b 	bl	802ea78 <__mcmp>
 802f622:	2800      	cmp	r0, #0
 802f624:	da60      	bge.n	802f6e8 <_strtod_l+0x868>
 802f626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f628:	ea53 0308 	orrs.w	r3, r3, r8
 802f62c:	f040 8084 	bne.w	802f738 <_strtod_l+0x8b8>
 802f630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f634:	2b00      	cmp	r3, #0
 802f636:	d17f      	bne.n	802f738 <_strtod_l+0x8b8>
 802f638:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f63c:	0d1b      	lsrs	r3, r3, #20
 802f63e:	051b      	lsls	r3, r3, #20
 802f640:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802f644:	d978      	bls.n	802f738 <_strtod_l+0x8b8>
 802f646:	696b      	ldr	r3, [r5, #20]
 802f648:	b913      	cbnz	r3, 802f650 <_strtod_l+0x7d0>
 802f64a:	692b      	ldr	r3, [r5, #16]
 802f64c:	2b01      	cmp	r3, #1
 802f64e:	dd73      	ble.n	802f738 <_strtod_l+0x8b8>
 802f650:	4629      	mov	r1, r5
 802f652:	2201      	movs	r2, #1
 802f654:	4620      	mov	r0, r4
 802f656:	f7ff f9a3 	bl	802e9a0 <__lshift>
 802f65a:	4659      	mov	r1, fp
 802f65c:	4605      	mov	r5, r0
 802f65e:	f7ff fa0b 	bl	802ea78 <__mcmp>
 802f662:	2800      	cmp	r0, #0
 802f664:	dd68      	ble.n	802f738 <_strtod_l+0x8b8>
 802f666:	9904      	ldr	r1, [sp, #16]
 802f668:	4a54      	ldr	r2, [pc, #336]	; (802f7bc <_strtod_l+0x93c>)
 802f66a:	464b      	mov	r3, r9
 802f66c:	2900      	cmp	r1, #0
 802f66e:	f000 8084 	beq.w	802f77a <_strtod_l+0x8fa>
 802f672:	ea02 0109 	and.w	r1, r2, r9
 802f676:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802f67a:	dc7e      	bgt.n	802f77a <_strtod_l+0x8fa>
 802f67c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802f680:	f77f aeb3 	ble.w	802f3ea <_strtod_l+0x56a>
 802f684:	4b4e      	ldr	r3, [pc, #312]	; (802f7c0 <_strtod_l+0x940>)
 802f686:	4640      	mov	r0, r8
 802f688:	4649      	mov	r1, r9
 802f68a:	2200      	movs	r2, #0
 802f68c:	f7e0 ffcc 	bl	8010628 <__aeabi_dmul>
 802f690:	4b4a      	ldr	r3, [pc, #296]	; (802f7bc <_strtod_l+0x93c>)
 802f692:	400b      	ands	r3, r1
 802f694:	4680      	mov	r8, r0
 802f696:	4689      	mov	r9, r1
 802f698:	2b00      	cmp	r3, #0
 802f69a:	f47f ae3f 	bne.w	802f31c <_strtod_l+0x49c>
 802f69e:	2322      	movs	r3, #34	; 0x22
 802f6a0:	6023      	str	r3, [r4, #0]
 802f6a2:	e63b      	b.n	802f31c <_strtod_l+0x49c>
 802f6a4:	f04f 32ff 	mov.w	r2, #4294967295
 802f6a8:	fa02 f303 	lsl.w	r3, r2, r3
 802f6ac:	ea03 0808 	and.w	r8, r3, r8
 802f6b0:	e6e8      	b.n	802f484 <_strtod_l+0x604>
 802f6b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802f6b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802f6ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802f6be:	36e2      	adds	r6, #226	; 0xe2
 802f6c0:	fa01 f306 	lsl.w	r3, r1, r6
 802f6c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802f6c8:	e748      	b.n	802f55c <_strtod_l+0x6dc>
 802f6ca:	2100      	movs	r1, #0
 802f6cc:	2301      	movs	r3, #1
 802f6ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 802f6d2:	e743      	b.n	802f55c <_strtod_l+0x6dc>
 802f6d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f6d6:	4632      	mov	r2, r6
 802f6d8:	4620      	mov	r0, r4
 802f6da:	f7ff f961 	bl	802e9a0 <__lshift>
 802f6de:	9016      	str	r0, [sp, #88]	; 0x58
 802f6e0:	2800      	cmp	r0, #0
 802f6e2:	f47f af6b 	bne.w	802f5bc <_strtod_l+0x73c>
 802f6e6:	e60f      	b.n	802f308 <_strtod_l+0x488>
 802f6e8:	46ca      	mov	sl, r9
 802f6ea:	d171      	bne.n	802f7d0 <_strtod_l+0x950>
 802f6ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802f6ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f6f2:	b352      	cbz	r2, 802f74a <_strtod_l+0x8ca>
 802f6f4:	4a33      	ldr	r2, [pc, #204]	; (802f7c4 <_strtod_l+0x944>)
 802f6f6:	4293      	cmp	r3, r2
 802f6f8:	d12a      	bne.n	802f750 <_strtod_l+0x8d0>
 802f6fa:	9b04      	ldr	r3, [sp, #16]
 802f6fc:	4641      	mov	r1, r8
 802f6fe:	b1fb      	cbz	r3, 802f740 <_strtod_l+0x8c0>
 802f700:	4b2e      	ldr	r3, [pc, #184]	; (802f7bc <_strtod_l+0x93c>)
 802f702:	ea09 0303 	and.w	r3, r9, r3
 802f706:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802f70a:	f04f 32ff 	mov.w	r2, #4294967295
 802f70e:	d81a      	bhi.n	802f746 <_strtod_l+0x8c6>
 802f710:	0d1b      	lsrs	r3, r3, #20
 802f712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802f716:	fa02 f303 	lsl.w	r3, r2, r3
 802f71a:	4299      	cmp	r1, r3
 802f71c:	d118      	bne.n	802f750 <_strtod_l+0x8d0>
 802f71e:	4b2a      	ldr	r3, [pc, #168]	; (802f7c8 <_strtod_l+0x948>)
 802f720:	459a      	cmp	sl, r3
 802f722:	d102      	bne.n	802f72a <_strtod_l+0x8aa>
 802f724:	3101      	adds	r1, #1
 802f726:	f43f adef 	beq.w	802f308 <_strtod_l+0x488>
 802f72a:	4b24      	ldr	r3, [pc, #144]	; (802f7bc <_strtod_l+0x93c>)
 802f72c:	ea0a 0303 	and.w	r3, sl, r3
 802f730:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802f734:	f04f 0800 	mov.w	r8, #0
 802f738:	9b04      	ldr	r3, [sp, #16]
 802f73a:	2b00      	cmp	r3, #0
 802f73c:	d1a2      	bne.n	802f684 <_strtod_l+0x804>
 802f73e:	e5ed      	b.n	802f31c <_strtod_l+0x49c>
 802f740:	f04f 33ff 	mov.w	r3, #4294967295
 802f744:	e7e9      	b.n	802f71a <_strtod_l+0x89a>
 802f746:	4613      	mov	r3, r2
 802f748:	e7e7      	b.n	802f71a <_strtod_l+0x89a>
 802f74a:	ea53 0308 	orrs.w	r3, r3, r8
 802f74e:	d08a      	beq.n	802f666 <_strtod_l+0x7e6>
 802f750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802f752:	b1e3      	cbz	r3, 802f78e <_strtod_l+0x90e>
 802f754:	ea13 0f0a 	tst.w	r3, sl
 802f758:	d0ee      	beq.n	802f738 <_strtod_l+0x8b8>
 802f75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f75c:	9a04      	ldr	r2, [sp, #16]
 802f75e:	4640      	mov	r0, r8
 802f760:	4649      	mov	r1, r9
 802f762:	b1c3      	cbz	r3, 802f796 <_strtod_l+0x916>
 802f764:	f7ff fb6f 	bl	802ee46 <sulp>
 802f768:	4602      	mov	r2, r0
 802f76a:	460b      	mov	r3, r1
 802f76c:	ec51 0b18 	vmov	r0, r1, d8
 802f770:	f7e0 fda4 	bl	80102bc <__adddf3>
 802f774:	4680      	mov	r8, r0
 802f776:	4689      	mov	r9, r1
 802f778:	e7de      	b.n	802f738 <_strtod_l+0x8b8>
 802f77a:	4013      	ands	r3, r2
 802f77c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802f780:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802f784:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802f788:	f04f 38ff 	mov.w	r8, #4294967295
 802f78c:	e7d4      	b.n	802f738 <_strtod_l+0x8b8>
 802f78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802f790:	ea13 0f08 	tst.w	r3, r8
 802f794:	e7e0      	b.n	802f758 <_strtod_l+0x8d8>
 802f796:	f7ff fb56 	bl	802ee46 <sulp>
 802f79a:	4602      	mov	r2, r0
 802f79c:	460b      	mov	r3, r1
 802f79e:	ec51 0b18 	vmov	r0, r1, d8
 802f7a2:	f7e0 fd89 	bl	80102b8 <__aeabi_dsub>
 802f7a6:	2200      	movs	r2, #0
 802f7a8:	2300      	movs	r3, #0
 802f7aa:	4680      	mov	r8, r0
 802f7ac:	4689      	mov	r9, r1
 802f7ae:	f7e1 f9a3 	bl	8010af8 <__aeabi_dcmpeq>
 802f7b2:	2800      	cmp	r0, #0
 802f7b4:	d0c0      	beq.n	802f738 <_strtod_l+0x8b8>
 802f7b6:	e618      	b.n	802f3ea <_strtod_l+0x56a>
 802f7b8:	fffffc02 	.word	0xfffffc02
 802f7bc:	7ff00000 	.word	0x7ff00000
 802f7c0:	39500000 	.word	0x39500000
 802f7c4:	000fffff 	.word	0x000fffff
 802f7c8:	7fefffff 	.word	0x7fefffff
 802f7cc:	080346d0 	.word	0x080346d0
 802f7d0:	4659      	mov	r1, fp
 802f7d2:	4628      	mov	r0, r5
 802f7d4:	f7ff fac0 	bl	802ed58 <__ratio>
 802f7d8:	ec57 6b10 	vmov	r6, r7, d0
 802f7dc:	ee10 0a10 	vmov	r0, s0
 802f7e0:	2200      	movs	r2, #0
 802f7e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802f7e6:	4639      	mov	r1, r7
 802f7e8:	f7e1 f99a 	bl	8010b20 <__aeabi_dcmple>
 802f7ec:	2800      	cmp	r0, #0
 802f7ee:	d071      	beq.n	802f8d4 <_strtod_l+0xa54>
 802f7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f7f2:	2b00      	cmp	r3, #0
 802f7f4:	d17c      	bne.n	802f8f0 <_strtod_l+0xa70>
 802f7f6:	f1b8 0f00 	cmp.w	r8, #0
 802f7fa:	d15a      	bne.n	802f8b2 <_strtod_l+0xa32>
 802f7fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f800:	2b00      	cmp	r3, #0
 802f802:	d15d      	bne.n	802f8c0 <_strtod_l+0xa40>
 802f804:	4b90      	ldr	r3, [pc, #576]	; (802fa48 <_strtod_l+0xbc8>)
 802f806:	2200      	movs	r2, #0
 802f808:	4630      	mov	r0, r6
 802f80a:	4639      	mov	r1, r7
 802f80c:	f7e1 f97e 	bl	8010b0c <__aeabi_dcmplt>
 802f810:	2800      	cmp	r0, #0
 802f812:	d15c      	bne.n	802f8ce <_strtod_l+0xa4e>
 802f814:	4630      	mov	r0, r6
 802f816:	4639      	mov	r1, r7
 802f818:	4b8c      	ldr	r3, [pc, #560]	; (802fa4c <_strtod_l+0xbcc>)
 802f81a:	2200      	movs	r2, #0
 802f81c:	f7e0 ff04 	bl	8010628 <__aeabi_dmul>
 802f820:	4606      	mov	r6, r0
 802f822:	460f      	mov	r7, r1
 802f824:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802f828:	9606      	str	r6, [sp, #24]
 802f82a:	9307      	str	r3, [sp, #28]
 802f82c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802f830:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802f834:	4b86      	ldr	r3, [pc, #536]	; (802fa50 <_strtod_l+0xbd0>)
 802f836:	ea0a 0303 	and.w	r3, sl, r3
 802f83a:	930d      	str	r3, [sp, #52]	; 0x34
 802f83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802f83e:	4b85      	ldr	r3, [pc, #532]	; (802fa54 <_strtod_l+0xbd4>)
 802f840:	429a      	cmp	r2, r3
 802f842:	f040 8090 	bne.w	802f966 <_strtod_l+0xae6>
 802f846:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 802f84a:	ec49 8b10 	vmov	d0, r8, r9
 802f84e:	f7ff f9b9 	bl	802ebc4 <__ulp>
 802f852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802f856:	ec51 0b10 	vmov	r0, r1, d0
 802f85a:	f7e0 fee5 	bl	8010628 <__aeabi_dmul>
 802f85e:	4642      	mov	r2, r8
 802f860:	464b      	mov	r3, r9
 802f862:	f7e0 fd2b 	bl	80102bc <__adddf3>
 802f866:	460b      	mov	r3, r1
 802f868:	4979      	ldr	r1, [pc, #484]	; (802fa50 <_strtod_l+0xbd0>)
 802f86a:	4a7b      	ldr	r2, [pc, #492]	; (802fa58 <_strtod_l+0xbd8>)
 802f86c:	4019      	ands	r1, r3
 802f86e:	4291      	cmp	r1, r2
 802f870:	4680      	mov	r8, r0
 802f872:	d944      	bls.n	802f8fe <_strtod_l+0xa7e>
 802f874:	ee18 2a90 	vmov	r2, s17
 802f878:	4b78      	ldr	r3, [pc, #480]	; (802fa5c <_strtod_l+0xbdc>)
 802f87a:	429a      	cmp	r2, r3
 802f87c:	d104      	bne.n	802f888 <_strtod_l+0xa08>
 802f87e:	ee18 3a10 	vmov	r3, s16
 802f882:	3301      	adds	r3, #1
 802f884:	f43f ad40 	beq.w	802f308 <_strtod_l+0x488>
 802f888:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 802fa5c <_strtod_l+0xbdc>
 802f88c:	f04f 38ff 	mov.w	r8, #4294967295
 802f890:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f892:	4620      	mov	r0, r4
 802f894:	f7fe fe6a 	bl	802e56c <_Bfree>
 802f898:	9905      	ldr	r1, [sp, #20]
 802f89a:	4620      	mov	r0, r4
 802f89c:	f7fe fe66 	bl	802e56c <_Bfree>
 802f8a0:	4659      	mov	r1, fp
 802f8a2:	4620      	mov	r0, r4
 802f8a4:	f7fe fe62 	bl	802e56c <_Bfree>
 802f8a8:	4629      	mov	r1, r5
 802f8aa:	4620      	mov	r0, r4
 802f8ac:	f7fe fe5e 	bl	802e56c <_Bfree>
 802f8b0:	e609      	b.n	802f4c6 <_strtod_l+0x646>
 802f8b2:	f1b8 0f01 	cmp.w	r8, #1
 802f8b6:	d103      	bne.n	802f8c0 <_strtod_l+0xa40>
 802f8b8:	f1b9 0f00 	cmp.w	r9, #0
 802f8bc:	f43f ad95 	beq.w	802f3ea <_strtod_l+0x56a>
 802f8c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 802fa18 <_strtod_l+0xb98>
 802f8c4:	4f60      	ldr	r7, [pc, #384]	; (802fa48 <_strtod_l+0xbc8>)
 802f8c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 802f8ca:	2600      	movs	r6, #0
 802f8cc:	e7ae      	b.n	802f82c <_strtod_l+0x9ac>
 802f8ce:	4f5f      	ldr	r7, [pc, #380]	; (802fa4c <_strtod_l+0xbcc>)
 802f8d0:	2600      	movs	r6, #0
 802f8d2:	e7a7      	b.n	802f824 <_strtod_l+0x9a4>
 802f8d4:	4b5d      	ldr	r3, [pc, #372]	; (802fa4c <_strtod_l+0xbcc>)
 802f8d6:	4630      	mov	r0, r6
 802f8d8:	4639      	mov	r1, r7
 802f8da:	2200      	movs	r2, #0
 802f8dc:	f7e0 fea4 	bl	8010628 <__aeabi_dmul>
 802f8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f8e2:	4606      	mov	r6, r0
 802f8e4:	460f      	mov	r7, r1
 802f8e6:	2b00      	cmp	r3, #0
 802f8e8:	d09c      	beq.n	802f824 <_strtod_l+0x9a4>
 802f8ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802f8ee:	e79d      	b.n	802f82c <_strtod_l+0x9ac>
 802f8f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802fa20 <_strtod_l+0xba0>
 802f8f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 802f8f8:	ec57 6b17 	vmov	r6, r7, d7
 802f8fc:	e796      	b.n	802f82c <_strtod_l+0x9ac>
 802f8fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802f902:	9b04      	ldr	r3, [sp, #16]
 802f904:	46ca      	mov	sl, r9
 802f906:	2b00      	cmp	r3, #0
 802f908:	d1c2      	bne.n	802f890 <_strtod_l+0xa10>
 802f90a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f90e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802f910:	0d1b      	lsrs	r3, r3, #20
 802f912:	051b      	lsls	r3, r3, #20
 802f914:	429a      	cmp	r2, r3
 802f916:	d1bb      	bne.n	802f890 <_strtod_l+0xa10>
 802f918:	4630      	mov	r0, r6
 802f91a:	4639      	mov	r1, r7
 802f91c:	f7e1 f9f8 	bl	8010d10 <__aeabi_d2lz>
 802f920:	f7e0 fe54 	bl	80105cc <__aeabi_l2d>
 802f924:	4602      	mov	r2, r0
 802f926:	460b      	mov	r3, r1
 802f928:	4630      	mov	r0, r6
 802f92a:	4639      	mov	r1, r7
 802f92c:	f7e0 fcc4 	bl	80102b8 <__aeabi_dsub>
 802f930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802f932:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f936:	ea43 0308 	orr.w	r3, r3, r8
 802f93a:	4313      	orrs	r3, r2
 802f93c:	4606      	mov	r6, r0
 802f93e:	460f      	mov	r7, r1
 802f940:	d054      	beq.n	802f9ec <_strtod_l+0xb6c>
 802f942:	a339      	add	r3, pc, #228	; (adr r3, 802fa28 <_strtod_l+0xba8>)
 802f944:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f948:	f7e1 f8e0 	bl	8010b0c <__aeabi_dcmplt>
 802f94c:	2800      	cmp	r0, #0
 802f94e:	f47f ace5 	bne.w	802f31c <_strtod_l+0x49c>
 802f952:	a337      	add	r3, pc, #220	; (adr r3, 802fa30 <_strtod_l+0xbb0>)
 802f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f958:	4630      	mov	r0, r6
 802f95a:	4639      	mov	r1, r7
 802f95c:	f7e1 f8f4 	bl	8010b48 <__aeabi_dcmpgt>
 802f960:	2800      	cmp	r0, #0
 802f962:	d095      	beq.n	802f890 <_strtod_l+0xa10>
 802f964:	e4da      	b.n	802f31c <_strtod_l+0x49c>
 802f966:	9b04      	ldr	r3, [sp, #16]
 802f968:	b333      	cbz	r3, 802f9b8 <_strtod_l+0xb38>
 802f96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802f96c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802f970:	d822      	bhi.n	802f9b8 <_strtod_l+0xb38>
 802f972:	a331      	add	r3, pc, #196	; (adr r3, 802fa38 <_strtod_l+0xbb8>)
 802f974:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f978:	4630      	mov	r0, r6
 802f97a:	4639      	mov	r1, r7
 802f97c:	f7e1 f8d0 	bl	8010b20 <__aeabi_dcmple>
 802f980:	b1a0      	cbz	r0, 802f9ac <_strtod_l+0xb2c>
 802f982:	4639      	mov	r1, r7
 802f984:	4630      	mov	r0, r6
 802f986:	f7e1 f927 	bl	8010bd8 <__aeabi_d2uiz>
 802f98a:	2801      	cmp	r0, #1
 802f98c:	bf38      	it	cc
 802f98e:	2001      	movcc	r0, #1
 802f990:	f7e0 fdd0 	bl	8010534 <__aeabi_ui2d>
 802f994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f996:	4606      	mov	r6, r0
 802f998:	460f      	mov	r7, r1
 802f99a:	bb23      	cbnz	r3, 802f9e6 <_strtod_l+0xb66>
 802f99c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802f9a0:	9010      	str	r0, [sp, #64]	; 0x40
 802f9a2:	9311      	str	r3, [sp, #68]	; 0x44
 802f9a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802f9a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802f9ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802f9ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802f9b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802f9b4:	1a9b      	subs	r3, r3, r2
 802f9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 802f9b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802f9bc:	eeb0 0a48 	vmov.f32	s0, s16
 802f9c0:	eef0 0a68 	vmov.f32	s1, s17
 802f9c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802f9c8:	f7ff f8fc 	bl	802ebc4 <__ulp>
 802f9cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802f9d0:	ec53 2b10 	vmov	r2, r3, d0
 802f9d4:	f7e0 fe28 	bl	8010628 <__aeabi_dmul>
 802f9d8:	ec53 2b18 	vmov	r2, r3, d8
 802f9dc:	f7e0 fc6e 	bl	80102bc <__adddf3>
 802f9e0:	4680      	mov	r8, r0
 802f9e2:	4689      	mov	r9, r1
 802f9e4:	e78d      	b.n	802f902 <_strtod_l+0xa82>
 802f9e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802f9ea:	e7db      	b.n	802f9a4 <_strtod_l+0xb24>
 802f9ec:	a314      	add	r3, pc, #80	; (adr r3, 802fa40 <_strtod_l+0xbc0>)
 802f9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f9f2:	f7e1 f88b 	bl	8010b0c <__aeabi_dcmplt>
 802f9f6:	e7b3      	b.n	802f960 <_strtod_l+0xae0>
 802f9f8:	2300      	movs	r3, #0
 802f9fa:	930a      	str	r3, [sp, #40]	; 0x28
 802f9fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802f9fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802fa00:	6013      	str	r3, [r2, #0]
 802fa02:	f7ff ba7c 	b.w	802eefe <_strtod_l+0x7e>
 802fa06:	2a65      	cmp	r2, #101	; 0x65
 802fa08:	f43f ab75 	beq.w	802f0f6 <_strtod_l+0x276>
 802fa0c:	2a45      	cmp	r2, #69	; 0x45
 802fa0e:	f43f ab72 	beq.w	802f0f6 <_strtod_l+0x276>
 802fa12:	2301      	movs	r3, #1
 802fa14:	f7ff bbaa 	b.w	802f16c <_strtod_l+0x2ec>
 802fa18:	00000000 	.word	0x00000000
 802fa1c:	bff00000 	.word	0xbff00000
 802fa20:	00000000 	.word	0x00000000
 802fa24:	3ff00000 	.word	0x3ff00000
 802fa28:	94a03595 	.word	0x94a03595
 802fa2c:	3fdfffff 	.word	0x3fdfffff
 802fa30:	35afe535 	.word	0x35afe535
 802fa34:	3fe00000 	.word	0x3fe00000
 802fa38:	ffc00000 	.word	0xffc00000
 802fa3c:	41dfffff 	.word	0x41dfffff
 802fa40:	94a03595 	.word	0x94a03595
 802fa44:	3fcfffff 	.word	0x3fcfffff
 802fa48:	3ff00000 	.word	0x3ff00000
 802fa4c:	3fe00000 	.word	0x3fe00000
 802fa50:	7ff00000 	.word	0x7ff00000
 802fa54:	7fe00000 	.word	0x7fe00000
 802fa58:	7c9fffff 	.word	0x7c9fffff
 802fa5c:	7fefffff 	.word	0x7fefffff

0802fa60 <_strtod_r>:
 802fa60:	4b01      	ldr	r3, [pc, #4]	; (802fa68 <_strtod_r+0x8>)
 802fa62:	f7ff ba0d 	b.w	802ee80 <_strtod_l>
 802fa66:	bf00      	nop
 802fa68:	2000018c 	.word	0x2000018c

0802fa6c <_strtol_l.constprop.0>:
 802fa6c:	2b01      	cmp	r3, #1
 802fa6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fa72:	d001      	beq.n	802fa78 <_strtol_l.constprop.0+0xc>
 802fa74:	2b24      	cmp	r3, #36	; 0x24
 802fa76:	d906      	bls.n	802fa86 <_strtol_l.constprop.0+0x1a>
 802fa78:	f7fd fe1e 	bl	802d6b8 <__errno>
 802fa7c:	2316      	movs	r3, #22
 802fa7e:	6003      	str	r3, [r0, #0]
 802fa80:	2000      	movs	r0, #0
 802fa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fa86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802fb6c <_strtol_l.constprop.0+0x100>
 802fa8a:	460d      	mov	r5, r1
 802fa8c:	462e      	mov	r6, r5
 802fa8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802fa92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802fa96:	f017 0708 	ands.w	r7, r7, #8
 802fa9a:	d1f7      	bne.n	802fa8c <_strtol_l.constprop.0+0x20>
 802fa9c:	2c2d      	cmp	r4, #45	; 0x2d
 802fa9e:	d132      	bne.n	802fb06 <_strtol_l.constprop.0+0x9a>
 802faa0:	782c      	ldrb	r4, [r5, #0]
 802faa2:	2701      	movs	r7, #1
 802faa4:	1cb5      	adds	r5, r6, #2
 802faa6:	2b00      	cmp	r3, #0
 802faa8:	d05b      	beq.n	802fb62 <_strtol_l.constprop.0+0xf6>
 802faaa:	2b10      	cmp	r3, #16
 802faac:	d109      	bne.n	802fac2 <_strtol_l.constprop.0+0x56>
 802faae:	2c30      	cmp	r4, #48	; 0x30
 802fab0:	d107      	bne.n	802fac2 <_strtol_l.constprop.0+0x56>
 802fab2:	782c      	ldrb	r4, [r5, #0]
 802fab4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802fab8:	2c58      	cmp	r4, #88	; 0x58
 802faba:	d14d      	bne.n	802fb58 <_strtol_l.constprop.0+0xec>
 802fabc:	786c      	ldrb	r4, [r5, #1]
 802fabe:	2310      	movs	r3, #16
 802fac0:	3502      	adds	r5, #2
 802fac2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802fac6:	f108 38ff 	add.w	r8, r8, #4294967295
 802faca:	f04f 0e00 	mov.w	lr, #0
 802face:	fbb8 f9f3 	udiv	r9, r8, r3
 802fad2:	4676      	mov	r6, lr
 802fad4:	fb03 8a19 	mls	sl, r3, r9, r8
 802fad8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802fadc:	f1bc 0f09 	cmp.w	ip, #9
 802fae0:	d816      	bhi.n	802fb10 <_strtol_l.constprop.0+0xa4>
 802fae2:	4664      	mov	r4, ip
 802fae4:	42a3      	cmp	r3, r4
 802fae6:	dd24      	ble.n	802fb32 <_strtol_l.constprop.0+0xc6>
 802fae8:	f1be 3fff 	cmp.w	lr, #4294967295
 802faec:	d008      	beq.n	802fb00 <_strtol_l.constprop.0+0x94>
 802faee:	45b1      	cmp	r9, r6
 802faf0:	d31c      	bcc.n	802fb2c <_strtol_l.constprop.0+0xc0>
 802faf2:	d101      	bne.n	802faf8 <_strtol_l.constprop.0+0x8c>
 802faf4:	45a2      	cmp	sl, r4
 802faf6:	db19      	blt.n	802fb2c <_strtol_l.constprop.0+0xc0>
 802faf8:	fb06 4603 	mla	r6, r6, r3, r4
 802fafc:	f04f 0e01 	mov.w	lr, #1
 802fb00:	f815 4b01 	ldrb.w	r4, [r5], #1
 802fb04:	e7e8      	b.n	802fad8 <_strtol_l.constprop.0+0x6c>
 802fb06:	2c2b      	cmp	r4, #43	; 0x2b
 802fb08:	bf04      	itt	eq
 802fb0a:	782c      	ldrbeq	r4, [r5, #0]
 802fb0c:	1cb5      	addeq	r5, r6, #2
 802fb0e:	e7ca      	b.n	802faa6 <_strtol_l.constprop.0+0x3a>
 802fb10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802fb14:	f1bc 0f19 	cmp.w	ip, #25
 802fb18:	d801      	bhi.n	802fb1e <_strtol_l.constprop.0+0xb2>
 802fb1a:	3c37      	subs	r4, #55	; 0x37
 802fb1c:	e7e2      	b.n	802fae4 <_strtol_l.constprop.0+0x78>
 802fb1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802fb22:	f1bc 0f19 	cmp.w	ip, #25
 802fb26:	d804      	bhi.n	802fb32 <_strtol_l.constprop.0+0xc6>
 802fb28:	3c57      	subs	r4, #87	; 0x57
 802fb2a:	e7db      	b.n	802fae4 <_strtol_l.constprop.0+0x78>
 802fb2c:	f04f 3eff 	mov.w	lr, #4294967295
 802fb30:	e7e6      	b.n	802fb00 <_strtol_l.constprop.0+0x94>
 802fb32:	f1be 3fff 	cmp.w	lr, #4294967295
 802fb36:	d105      	bne.n	802fb44 <_strtol_l.constprop.0+0xd8>
 802fb38:	2322      	movs	r3, #34	; 0x22
 802fb3a:	6003      	str	r3, [r0, #0]
 802fb3c:	4646      	mov	r6, r8
 802fb3e:	b942      	cbnz	r2, 802fb52 <_strtol_l.constprop.0+0xe6>
 802fb40:	4630      	mov	r0, r6
 802fb42:	e79e      	b.n	802fa82 <_strtol_l.constprop.0+0x16>
 802fb44:	b107      	cbz	r7, 802fb48 <_strtol_l.constprop.0+0xdc>
 802fb46:	4276      	negs	r6, r6
 802fb48:	2a00      	cmp	r2, #0
 802fb4a:	d0f9      	beq.n	802fb40 <_strtol_l.constprop.0+0xd4>
 802fb4c:	f1be 0f00 	cmp.w	lr, #0
 802fb50:	d000      	beq.n	802fb54 <_strtol_l.constprop.0+0xe8>
 802fb52:	1e69      	subs	r1, r5, #1
 802fb54:	6011      	str	r1, [r2, #0]
 802fb56:	e7f3      	b.n	802fb40 <_strtol_l.constprop.0+0xd4>
 802fb58:	2430      	movs	r4, #48	; 0x30
 802fb5a:	2b00      	cmp	r3, #0
 802fb5c:	d1b1      	bne.n	802fac2 <_strtol_l.constprop.0+0x56>
 802fb5e:	2308      	movs	r3, #8
 802fb60:	e7af      	b.n	802fac2 <_strtol_l.constprop.0+0x56>
 802fb62:	2c30      	cmp	r4, #48	; 0x30
 802fb64:	d0a5      	beq.n	802fab2 <_strtol_l.constprop.0+0x46>
 802fb66:	230a      	movs	r3, #10
 802fb68:	e7ab      	b.n	802fac2 <_strtol_l.constprop.0+0x56>
 802fb6a:	bf00      	nop
 802fb6c:	080346f9 	.word	0x080346f9

0802fb70 <_strtol_r>:
 802fb70:	f7ff bf7c 	b.w	802fa6c <_strtol_l.constprop.0>

0802fb74 <__ssputs_r>:
 802fb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fb78:	688e      	ldr	r6, [r1, #8]
 802fb7a:	461f      	mov	r7, r3
 802fb7c:	42be      	cmp	r6, r7
 802fb7e:	680b      	ldr	r3, [r1, #0]
 802fb80:	4682      	mov	sl, r0
 802fb82:	460c      	mov	r4, r1
 802fb84:	4690      	mov	r8, r2
 802fb86:	d82c      	bhi.n	802fbe2 <__ssputs_r+0x6e>
 802fb88:	898a      	ldrh	r2, [r1, #12]
 802fb8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802fb8e:	d026      	beq.n	802fbde <__ssputs_r+0x6a>
 802fb90:	6965      	ldr	r5, [r4, #20]
 802fb92:	6909      	ldr	r1, [r1, #16]
 802fb94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802fb98:	eba3 0901 	sub.w	r9, r3, r1
 802fb9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802fba0:	1c7b      	adds	r3, r7, #1
 802fba2:	444b      	add	r3, r9
 802fba4:	106d      	asrs	r5, r5, #1
 802fba6:	429d      	cmp	r5, r3
 802fba8:	bf38      	it	cc
 802fbaa:	461d      	movcc	r5, r3
 802fbac:	0553      	lsls	r3, r2, #21
 802fbae:	d527      	bpl.n	802fc00 <__ssputs_r+0x8c>
 802fbb0:	4629      	mov	r1, r5
 802fbb2:	f7fc fa75 	bl	802c0a0 <_malloc_r>
 802fbb6:	4606      	mov	r6, r0
 802fbb8:	b360      	cbz	r0, 802fc14 <__ssputs_r+0xa0>
 802fbba:	6921      	ldr	r1, [r4, #16]
 802fbbc:	464a      	mov	r2, r9
 802fbbe:	f7fd fdb0 	bl	802d722 <memcpy>
 802fbc2:	89a3      	ldrh	r3, [r4, #12]
 802fbc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802fbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802fbcc:	81a3      	strh	r3, [r4, #12]
 802fbce:	6126      	str	r6, [r4, #16]
 802fbd0:	6165      	str	r5, [r4, #20]
 802fbd2:	444e      	add	r6, r9
 802fbd4:	eba5 0509 	sub.w	r5, r5, r9
 802fbd8:	6026      	str	r6, [r4, #0]
 802fbda:	60a5      	str	r5, [r4, #8]
 802fbdc:	463e      	mov	r6, r7
 802fbde:	42be      	cmp	r6, r7
 802fbe0:	d900      	bls.n	802fbe4 <__ssputs_r+0x70>
 802fbe2:	463e      	mov	r6, r7
 802fbe4:	6820      	ldr	r0, [r4, #0]
 802fbe6:	4632      	mov	r2, r6
 802fbe8:	4641      	mov	r1, r8
 802fbea:	f7fd fbab 	bl	802d344 <memmove>
 802fbee:	68a3      	ldr	r3, [r4, #8]
 802fbf0:	1b9b      	subs	r3, r3, r6
 802fbf2:	60a3      	str	r3, [r4, #8]
 802fbf4:	6823      	ldr	r3, [r4, #0]
 802fbf6:	4433      	add	r3, r6
 802fbf8:	6023      	str	r3, [r4, #0]
 802fbfa:	2000      	movs	r0, #0
 802fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fc00:	462a      	mov	r2, r5
 802fc02:	f001 face 	bl	80311a2 <_realloc_r>
 802fc06:	4606      	mov	r6, r0
 802fc08:	2800      	cmp	r0, #0
 802fc0a:	d1e0      	bne.n	802fbce <__ssputs_r+0x5a>
 802fc0c:	6921      	ldr	r1, [r4, #16]
 802fc0e:	4650      	mov	r0, sl
 802fc10:	f7fe fc20 	bl	802e454 <_free_r>
 802fc14:	230c      	movs	r3, #12
 802fc16:	f8ca 3000 	str.w	r3, [sl]
 802fc1a:	89a3      	ldrh	r3, [r4, #12]
 802fc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802fc20:	81a3      	strh	r3, [r4, #12]
 802fc22:	f04f 30ff 	mov.w	r0, #4294967295
 802fc26:	e7e9      	b.n	802fbfc <__ssputs_r+0x88>

0802fc28 <_svfiprintf_r>:
 802fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fc2c:	4698      	mov	r8, r3
 802fc2e:	898b      	ldrh	r3, [r1, #12]
 802fc30:	061b      	lsls	r3, r3, #24
 802fc32:	b09d      	sub	sp, #116	; 0x74
 802fc34:	4607      	mov	r7, r0
 802fc36:	460d      	mov	r5, r1
 802fc38:	4614      	mov	r4, r2
 802fc3a:	d50e      	bpl.n	802fc5a <_svfiprintf_r+0x32>
 802fc3c:	690b      	ldr	r3, [r1, #16]
 802fc3e:	b963      	cbnz	r3, 802fc5a <_svfiprintf_r+0x32>
 802fc40:	2140      	movs	r1, #64	; 0x40
 802fc42:	f7fc fa2d 	bl	802c0a0 <_malloc_r>
 802fc46:	6028      	str	r0, [r5, #0]
 802fc48:	6128      	str	r0, [r5, #16]
 802fc4a:	b920      	cbnz	r0, 802fc56 <_svfiprintf_r+0x2e>
 802fc4c:	230c      	movs	r3, #12
 802fc4e:	603b      	str	r3, [r7, #0]
 802fc50:	f04f 30ff 	mov.w	r0, #4294967295
 802fc54:	e0d0      	b.n	802fdf8 <_svfiprintf_r+0x1d0>
 802fc56:	2340      	movs	r3, #64	; 0x40
 802fc58:	616b      	str	r3, [r5, #20]
 802fc5a:	2300      	movs	r3, #0
 802fc5c:	9309      	str	r3, [sp, #36]	; 0x24
 802fc5e:	2320      	movs	r3, #32
 802fc60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802fc64:	f8cd 800c 	str.w	r8, [sp, #12]
 802fc68:	2330      	movs	r3, #48	; 0x30
 802fc6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802fe10 <_svfiprintf_r+0x1e8>
 802fc6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802fc72:	f04f 0901 	mov.w	r9, #1
 802fc76:	4623      	mov	r3, r4
 802fc78:	469a      	mov	sl, r3
 802fc7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fc7e:	b10a      	cbz	r2, 802fc84 <_svfiprintf_r+0x5c>
 802fc80:	2a25      	cmp	r2, #37	; 0x25
 802fc82:	d1f9      	bne.n	802fc78 <_svfiprintf_r+0x50>
 802fc84:	ebba 0b04 	subs.w	fp, sl, r4
 802fc88:	d00b      	beq.n	802fca2 <_svfiprintf_r+0x7a>
 802fc8a:	465b      	mov	r3, fp
 802fc8c:	4622      	mov	r2, r4
 802fc8e:	4629      	mov	r1, r5
 802fc90:	4638      	mov	r0, r7
 802fc92:	f7ff ff6f 	bl	802fb74 <__ssputs_r>
 802fc96:	3001      	adds	r0, #1
 802fc98:	f000 80a9 	beq.w	802fdee <_svfiprintf_r+0x1c6>
 802fc9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802fc9e:	445a      	add	r2, fp
 802fca0:	9209      	str	r2, [sp, #36]	; 0x24
 802fca2:	f89a 3000 	ldrb.w	r3, [sl]
 802fca6:	2b00      	cmp	r3, #0
 802fca8:	f000 80a1 	beq.w	802fdee <_svfiprintf_r+0x1c6>
 802fcac:	2300      	movs	r3, #0
 802fcae:	f04f 32ff 	mov.w	r2, #4294967295
 802fcb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802fcb6:	f10a 0a01 	add.w	sl, sl, #1
 802fcba:	9304      	str	r3, [sp, #16]
 802fcbc:	9307      	str	r3, [sp, #28]
 802fcbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802fcc2:	931a      	str	r3, [sp, #104]	; 0x68
 802fcc4:	4654      	mov	r4, sl
 802fcc6:	2205      	movs	r2, #5
 802fcc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802fccc:	4850      	ldr	r0, [pc, #320]	; (802fe10 <_svfiprintf_r+0x1e8>)
 802fcce:	f7e0 fa97 	bl	8010200 <memchr>
 802fcd2:	9a04      	ldr	r2, [sp, #16]
 802fcd4:	b9d8      	cbnz	r0, 802fd0e <_svfiprintf_r+0xe6>
 802fcd6:	06d0      	lsls	r0, r2, #27
 802fcd8:	bf44      	itt	mi
 802fcda:	2320      	movmi	r3, #32
 802fcdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802fce0:	0711      	lsls	r1, r2, #28
 802fce2:	bf44      	itt	mi
 802fce4:	232b      	movmi	r3, #43	; 0x2b
 802fce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802fcea:	f89a 3000 	ldrb.w	r3, [sl]
 802fcee:	2b2a      	cmp	r3, #42	; 0x2a
 802fcf0:	d015      	beq.n	802fd1e <_svfiprintf_r+0xf6>
 802fcf2:	9a07      	ldr	r2, [sp, #28]
 802fcf4:	4654      	mov	r4, sl
 802fcf6:	2000      	movs	r0, #0
 802fcf8:	f04f 0c0a 	mov.w	ip, #10
 802fcfc:	4621      	mov	r1, r4
 802fcfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 802fd02:	3b30      	subs	r3, #48	; 0x30
 802fd04:	2b09      	cmp	r3, #9
 802fd06:	d94d      	bls.n	802fda4 <_svfiprintf_r+0x17c>
 802fd08:	b1b0      	cbz	r0, 802fd38 <_svfiprintf_r+0x110>
 802fd0a:	9207      	str	r2, [sp, #28]
 802fd0c:	e014      	b.n	802fd38 <_svfiprintf_r+0x110>
 802fd0e:	eba0 0308 	sub.w	r3, r0, r8
 802fd12:	fa09 f303 	lsl.w	r3, r9, r3
 802fd16:	4313      	orrs	r3, r2
 802fd18:	9304      	str	r3, [sp, #16]
 802fd1a:	46a2      	mov	sl, r4
 802fd1c:	e7d2      	b.n	802fcc4 <_svfiprintf_r+0x9c>
 802fd1e:	9b03      	ldr	r3, [sp, #12]
 802fd20:	1d19      	adds	r1, r3, #4
 802fd22:	681b      	ldr	r3, [r3, #0]
 802fd24:	9103      	str	r1, [sp, #12]
 802fd26:	2b00      	cmp	r3, #0
 802fd28:	bfbb      	ittet	lt
 802fd2a:	425b      	neglt	r3, r3
 802fd2c:	f042 0202 	orrlt.w	r2, r2, #2
 802fd30:	9307      	strge	r3, [sp, #28]
 802fd32:	9307      	strlt	r3, [sp, #28]
 802fd34:	bfb8      	it	lt
 802fd36:	9204      	strlt	r2, [sp, #16]
 802fd38:	7823      	ldrb	r3, [r4, #0]
 802fd3a:	2b2e      	cmp	r3, #46	; 0x2e
 802fd3c:	d10c      	bne.n	802fd58 <_svfiprintf_r+0x130>
 802fd3e:	7863      	ldrb	r3, [r4, #1]
 802fd40:	2b2a      	cmp	r3, #42	; 0x2a
 802fd42:	d134      	bne.n	802fdae <_svfiprintf_r+0x186>
 802fd44:	9b03      	ldr	r3, [sp, #12]
 802fd46:	1d1a      	adds	r2, r3, #4
 802fd48:	681b      	ldr	r3, [r3, #0]
 802fd4a:	9203      	str	r2, [sp, #12]
 802fd4c:	2b00      	cmp	r3, #0
 802fd4e:	bfb8      	it	lt
 802fd50:	f04f 33ff 	movlt.w	r3, #4294967295
 802fd54:	3402      	adds	r4, #2
 802fd56:	9305      	str	r3, [sp, #20]
 802fd58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802fe20 <_svfiprintf_r+0x1f8>
 802fd5c:	7821      	ldrb	r1, [r4, #0]
 802fd5e:	2203      	movs	r2, #3
 802fd60:	4650      	mov	r0, sl
 802fd62:	f7e0 fa4d 	bl	8010200 <memchr>
 802fd66:	b138      	cbz	r0, 802fd78 <_svfiprintf_r+0x150>
 802fd68:	9b04      	ldr	r3, [sp, #16]
 802fd6a:	eba0 000a 	sub.w	r0, r0, sl
 802fd6e:	2240      	movs	r2, #64	; 0x40
 802fd70:	4082      	lsls	r2, r0
 802fd72:	4313      	orrs	r3, r2
 802fd74:	3401      	adds	r4, #1
 802fd76:	9304      	str	r3, [sp, #16]
 802fd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 802fd7c:	4825      	ldr	r0, [pc, #148]	; (802fe14 <_svfiprintf_r+0x1ec>)
 802fd7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802fd82:	2206      	movs	r2, #6
 802fd84:	f7e0 fa3c 	bl	8010200 <memchr>
 802fd88:	2800      	cmp	r0, #0
 802fd8a:	d038      	beq.n	802fdfe <_svfiprintf_r+0x1d6>
 802fd8c:	4b22      	ldr	r3, [pc, #136]	; (802fe18 <_svfiprintf_r+0x1f0>)
 802fd8e:	bb1b      	cbnz	r3, 802fdd8 <_svfiprintf_r+0x1b0>
 802fd90:	9b03      	ldr	r3, [sp, #12]
 802fd92:	3307      	adds	r3, #7
 802fd94:	f023 0307 	bic.w	r3, r3, #7
 802fd98:	3308      	adds	r3, #8
 802fd9a:	9303      	str	r3, [sp, #12]
 802fd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fd9e:	4433      	add	r3, r6
 802fda0:	9309      	str	r3, [sp, #36]	; 0x24
 802fda2:	e768      	b.n	802fc76 <_svfiprintf_r+0x4e>
 802fda4:	fb0c 3202 	mla	r2, ip, r2, r3
 802fda8:	460c      	mov	r4, r1
 802fdaa:	2001      	movs	r0, #1
 802fdac:	e7a6      	b.n	802fcfc <_svfiprintf_r+0xd4>
 802fdae:	2300      	movs	r3, #0
 802fdb0:	3401      	adds	r4, #1
 802fdb2:	9305      	str	r3, [sp, #20]
 802fdb4:	4619      	mov	r1, r3
 802fdb6:	f04f 0c0a 	mov.w	ip, #10
 802fdba:	4620      	mov	r0, r4
 802fdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 802fdc0:	3a30      	subs	r2, #48	; 0x30
 802fdc2:	2a09      	cmp	r2, #9
 802fdc4:	d903      	bls.n	802fdce <_svfiprintf_r+0x1a6>
 802fdc6:	2b00      	cmp	r3, #0
 802fdc8:	d0c6      	beq.n	802fd58 <_svfiprintf_r+0x130>
 802fdca:	9105      	str	r1, [sp, #20]
 802fdcc:	e7c4      	b.n	802fd58 <_svfiprintf_r+0x130>
 802fdce:	fb0c 2101 	mla	r1, ip, r1, r2
 802fdd2:	4604      	mov	r4, r0
 802fdd4:	2301      	movs	r3, #1
 802fdd6:	e7f0      	b.n	802fdba <_svfiprintf_r+0x192>
 802fdd8:	ab03      	add	r3, sp, #12
 802fdda:	9300      	str	r3, [sp, #0]
 802fddc:	462a      	mov	r2, r5
 802fdde:	4b0f      	ldr	r3, [pc, #60]	; (802fe1c <_svfiprintf_r+0x1f4>)
 802fde0:	a904      	add	r1, sp, #16
 802fde2:	4638      	mov	r0, r7
 802fde4:	f7fc fa88 	bl	802c2f8 <_printf_float>
 802fde8:	1c42      	adds	r2, r0, #1
 802fdea:	4606      	mov	r6, r0
 802fdec:	d1d6      	bne.n	802fd9c <_svfiprintf_r+0x174>
 802fdee:	89ab      	ldrh	r3, [r5, #12]
 802fdf0:	065b      	lsls	r3, r3, #25
 802fdf2:	f53f af2d 	bmi.w	802fc50 <_svfiprintf_r+0x28>
 802fdf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 802fdf8:	b01d      	add	sp, #116	; 0x74
 802fdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fdfe:	ab03      	add	r3, sp, #12
 802fe00:	9300      	str	r3, [sp, #0]
 802fe02:	462a      	mov	r2, r5
 802fe04:	4b05      	ldr	r3, [pc, #20]	; (802fe1c <_svfiprintf_r+0x1f4>)
 802fe06:	a904      	add	r1, sp, #16
 802fe08:	4638      	mov	r0, r7
 802fe0a:	f7fc fd19 	bl	802c840 <_printf_i>
 802fe0e:	e7eb      	b.n	802fde8 <_svfiprintf_r+0x1c0>
 802fe10:	080347f9 	.word	0x080347f9
 802fe14:	08034803 	.word	0x08034803
 802fe18:	0802c2f9 	.word	0x0802c2f9
 802fe1c:	0802fb75 	.word	0x0802fb75
 802fe20:	080347ff 	.word	0x080347ff

0802fe24 <_sungetc_r>:
 802fe24:	b538      	push	{r3, r4, r5, lr}
 802fe26:	1c4b      	adds	r3, r1, #1
 802fe28:	4614      	mov	r4, r2
 802fe2a:	d103      	bne.n	802fe34 <_sungetc_r+0x10>
 802fe2c:	f04f 35ff 	mov.w	r5, #4294967295
 802fe30:	4628      	mov	r0, r5
 802fe32:	bd38      	pop	{r3, r4, r5, pc}
 802fe34:	8993      	ldrh	r3, [r2, #12]
 802fe36:	f023 0320 	bic.w	r3, r3, #32
 802fe3a:	8193      	strh	r3, [r2, #12]
 802fe3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802fe3e:	6852      	ldr	r2, [r2, #4]
 802fe40:	b2cd      	uxtb	r5, r1
 802fe42:	b18b      	cbz	r3, 802fe68 <_sungetc_r+0x44>
 802fe44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802fe46:	4293      	cmp	r3, r2
 802fe48:	dd08      	ble.n	802fe5c <_sungetc_r+0x38>
 802fe4a:	6823      	ldr	r3, [r4, #0]
 802fe4c:	1e5a      	subs	r2, r3, #1
 802fe4e:	6022      	str	r2, [r4, #0]
 802fe50:	f803 5c01 	strb.w	r5, [r3, #-1]
 802fe54:	6863      	ldr	r3, [r4, #4]
 802fe56:	3301      	adds	r3, #1
 802fe58:	6063      	str	r3, [r4, #4]
 802fe5a:	e7e9      	b.n	802fe30 <_sungetc_r+0xc>
 802fe5c:	4621      	mov	r1, r4
 802fe5e:	f000 fd8e 	bl	803097e <__submore>
 802fe62:	2800      	cmp	r0, #0
 802fe64:	d0f1      	beq.n	802fe4a <_sungetc_r+0x26>
 802fe66:	e7e1      	b.n	802fe2c <_sungetc_r+0x8>
 802fe68:	6921      	ldr	r1, [r4, #16]
 802fe6a:	6823      	ldr	r3, [r4, #0]
 802fe6c:	b151      	cbz	r1, 802fe84 <_sungetc_r+0x60>
 802fe6e:	4299      	cmp	r1, r3
 802fe70:	d208      	bcs.n	802fe84 <_sungetc_r+0x60>
 802fe72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802fe76:	42a9      	cmp	r1, r5
 802fe78:	d104      	bne.n	802fe84 <_sungetc_r+0x60>
 802fe7a:	3b01      	subs	r3, #1
 802fe7c:	3201      	adds	r2, #1
 802fe7e:	6023      	str	r3, [r4, #0]
 802fe80:	6062      	str	r2, [r4, #4]
 802fe82:	e7d5      	b.n	802fe30 <_sungetc_r+0xc>
 802fe84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802fe88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802fe8c:	6363      	str	r3, [r4, #52]	; 0x34
 802fe8e:	2303      	movs	r3, #3
 802fe90:	63a3      	str	r3, [r4, #56]	; 0x38
 802fe92:	4623      	mov	r3, r4
 802fe94:	f803 5f46 	strb.w	r5, [r3, #70]!
 802fe98:	6023      	str	r3, [r4, #0]
 802fe9a:	2301      	movs	r3, #1
 802fe9c:	e7dc      	b.n	802fe58 <_sungetc_r+0x34>

0802fe9e <__ssrefill_r>:
 802fe9e:	b510      	push	{r4, lr}
 802fea0:	460c      	mov	r4, r1
 802fea2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802fea4:	b169      	cbz	r1, 802fec2 <__ssrefill_r+0x24>
 802fea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802feaa:	4299      	cmp	r1, r3
 802feac:	d001      	beq.n	802feb2 <__ssrefill_r+0x14>
 802feae:	f7fe fad1 	bl	802e454 <_free_r>
 802feb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802feb4:	6063      	str	r3, [r4, #4]
 802feb6:	2000      	movs	r0, #0
 802feb8:	6360      	str	r0, [r4, #52]	; 0x34
 802feba:	b113      	cbz	r3, 802fec2 <__ssrefill_r+0x24>
 802febc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802febe:	6023      	str	r3, [r4, #0]
 802fec0:	bd10      	pop	{r4, pc}
 802fec2:	6923      	ldr	r3, [r4, #16]
 802fec4:	6023      	str	r3, [r4, #0]
 802fec6:	2300      	movs	r3, #0
 802fec8:	6063      	str	r3, [r4, #4]
 802feca:	89a3      	ldrh	r3, [r4, #12]
 802fecc:	f043 0320 	orr.w	r3, r3, #32
 802fed0:	81a3      	strh	r3, [r4, #12]
 802fed2:	f04f 30ff 	mov.w	r0, #4294967295
 802fed6:	e7f3      	b.n	802fec0 <__ssrefill_r+0x22>

0802fed8 <__ssvfiscanf_r>:
 802fed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fedc:	460c      	mov	r4, r1
 802fede:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802fee2:	2100      	movs	r1, #0
 802fee4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802fee8:	49a6      	ldr	r1, [pc, #664]	; (8030184 <__ssvfiscanf_r+0x2ac>)
 802feea:	91a0      	str	r1, [sp, #640]	; 0x280
 802feec:	f10d 0804 	add.w	r8, sp, #4
 802fef0:	49a5      	ldr	r1, [pc, #660]	; (8030188 <__ssvfiscanf_r+0x2b0>)
 802fef2:	4fa6      	ldr	r7, [pc, #664]	; (803018c <__ssvfiscanf_r+0x2b4>)
 802fef4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8030190 <__ssvfiscanf_r+0x2b8>
 802fef8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802fefc:	4606      	mov	r6, r0
 802fefe:	91a1      	str	r1, [sp, #644]	; 0x284
 802ff00:	9300      	str	r3, [sp, #0]
 802ff02:	7813      	ldrb	r3, [r2, #0]
 802ff04:	2b00      	cmp	r3, #0
 802ff06:	f000 815a 	beq.w	80301be <__ssvfiscanf_r+0x2e6>
 802ff0a:	5cf9      	ldrb	r1, [r7, r3]
 802ff0c:	f011 0108 	ands.w	r1, r1, #8
 802ff10:	f102 0501 	add.w	r5, r2, #1
 802ff14:	d019      	beq.n	802ff4a <__ssvfiscanf_r+0x72>
 802ff16:	6863      	ldr	r3, [r4, #4]
 802ff18:	2b00      	cmp	r3, #0
 802ff1a:	dd0f      	ble.n	802ff3c <__ssvfiscanf_r+0x64>
 802ff1c:	6823      	ldr	r3, [r4, #0]
 802ff1e:	781a      	ldrb	r2, [r3, #0]
 802ff20:	5cba      	ldrb	r2, [r7, r2]
 802ff22:	0712      	lsls	r2, r2, #28
 802ff24:	d401      	bmi.n	802ff2a <__ssvfiscanf_r+0x52>
 802ff26:	462a      	mov	r2, r5
 802ff28:	e7eb      	b.n	802ff02 <__ssvfiscanf_r+0x2a>
 802ff2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802ff2c:	3201      	adds	r2, #1
 802ff2e:	9245      	str	r2, [sp, #276]	; 0x114
 802ff30:	6862      	ldr	r2, [r4, #4]
 802ff32:	3301      	adds	r3, #1
 802ff34:	3a01      	subs	r2, #1
 802ff36:	6062      	str	r2, [r4, #4]
 802ff38:	6023      	str	r3, [r4, #0]
 802ff3a:	e7ec      	b.n	802ff16 <__ssvfiscanf_r+0x3e>
 802ff3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802ff3e:	4621      	mov	r1, r4
 802ff40:	4630      	mov	r0, r6
 802ff42:	4798      	blx	r3
 802ff44:	2800      	cmp	r0, #0
 802ff46:	d0e9      	beq.n	802ff1c <__ssvfiscanf_r+0x44>
 802ff48:	e7ed      	b.n	802ff26 <__ssvfiscanf_r+0x4e>
 802ff4a:	2b25      	cmp	r3, #37	; 0x25
 802ff4c:	d012      	beq.n	802ff74 <__ssvfiscanf_r+0x9c>
 802ff4e:	469a      	mov	sl, r3
 802ff50:	6863      	ldr	r3, [r4, #4]
 802ff52:	2b00      	cmp	r3, #0
 802ff54:	f340 8091 	ble.w	803007a <__ssvfiscanf_r+0x1a2>
 802ff58:	6822      	ldr	r2, [r4, #0]
 802ff5a:	7813      	ldrb	r3, [r2, #0]
 802ff5c:	4553      	cmp	r3, sl
 802ff5e:	f040 812e 	bne.w	80301be <__ssvfiscanf_r+0x2e6>
 802ff62:	6863      	ldr	r3, [r4, #4]
 802ff64:	3b01      	subs	r3, #1
 802ff66:	6063      	str	r3, [r4, #4]
 802ff68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802ff6a:	3201      	adds	r2, #1
 802ff6c:	3301      	adds	r3, #1
 802ff6e:	6022      	str	r2, [r4, #0]
 802ff70:	9345      	str	r3, [sp, #276]	; 0x114
 802ff72:	e7d8      	b.n	802ff26 <__ssvfiscanf_r+0x4e>
 802ff74:	9141      	str	r1, [sp, #260]	; 0x104
 802ff76:	9143      	str	r1, [sp, #268]	; 0x10c
 802ff78:	7853      	ldrb	r3, [r2, #1]
 802ff7a:	2b2a      	cmp	r3, #42	; 0x2a
 802ff7c:	bf02      	ittt	eq
 802ff7e:	2310      	moveq	r3, #16
 802ff80:	1c95      	addeq	r5, r2, #2
 802ff82:	9341      	streq	r3, [sp, #260]	; 0x104
 802ff84:	220a      	movs	r2, #10
 802ff86:	46aa      	mov	sl, r5
 802ff88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802ff8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802ff90:	2b09      	cmp	r3, #9
 802ff92:	d91c      	bls.n	802ffce <__ssvfiscanf_r+0xf6>
 802ff94:	487e      	ldr	r0, [pc, #504]	; (8030190 <__ssvfiscanf_r+0x2b8>)
 802ff96:	2203      	movs	r2, #3
 802ff98:	f7e0 f932 	bl	8010200 <memchr>
 802ff9c:	b138      	cbz	r0, 802ffae <__ssvfiscanf_r+0xd6>
 802ff9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802ffa0:	eba0 0009 	sub.w	r0, r0, r9
 802ffa4:	2301      	movs	r3, #1
 802ffa6:	4083      	lsls	r3, r0
 802ffa8:	4313      	orrs	r3, r2
 802ffaa:	9341      	str	r3, [sp, #260]	; 0x104
 802ffac:	4655      	mov	r5, sl
 802ffae:	f815 3b01 	ldrb.w	r3, [r5], #1
 802ffb2:	2b78      	cmp	r3, #120	; 0x78
 802ffb4:	d806      	bhi.n	802ffc4 <__ssvfiscanf_r+0xec>
 802ffb6:	2b57      	cmp	r3, #87	; 0x57
 802ffb8:	d810      	bhi.n	802ffdc <__ssvfiscanf_r+0x104>
 802ffba:	2b25      	cmp	r3, #37	; 0x25
 802ffbc:	d0c7      	beq.n	802ff4e <__ssvfiscanf_r+0x76>
 802ffbe:	d857      	bhi.n	8030070 <__ssvfiscanf_r+0x198>
 802ffc0:	2b00      	cmp	r3, #0
 802ffc2:	d065      	beq.n	8030090 <__ssvfiscanf_r+0x1b8>
 802ffc4:	2303      	movs	r3, #3
 802ffc6:	9347      	str	r3, [sp, #284]	; 0x11c
 802ffc8:	230a      	movs	r3, #10
 802ffca:	9342      	str	r3, [sp, #264]	; 0x108
 802ffcc:	e076      	b.n	80300bc <__ssvfiscanf_r+0x1e4>
 802ffce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802ffd0:	fb02 1103 	mla	r1, r2, r3, r1
 802ffd4:	3930      	subs	r1, #48	; 0x30
 802ffd6:	9143      	str	r1, [sp, #268]	; 0x10c
 802ffd8:	4655      	mov	r5, sl
 802ffda:	e7d4      	b.n	802ff86 <__ssvfiscanf_r+0xae>
 802ffdc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802ffe0:	2a20      	cmp	r2, #32
 802ffe2:	d8ef      	bhi.n	802ffc4 <__ssvfiscanf_r+0xec>
 802ffe4:	a101      	add	r1, pc, #4	; (adr r1, 802ffec <__ssvfiscanf_r+0x114>)
 802ffe6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802ffea:	bf00      	nop
 802ffec:	0803009f 	.word	0x0803009f
 802fff0:	0802ffc5 	.word	0x0802ffc5
 802fff4:	0802ffc5 	.word	0x0802ffc5
 802fff8:	080300fd 	.word	0x080300fd
 802fffc:	0802ffc5 	.word	0x0802ffc5
 8030000:	0802ffc5 	.word	0x0802ffc5
 8030004:	0802ffc5 	.word	0x0802ffc5
 8030008:	0802ffc5 	.word	0x0802ffc5
 803000c:	0802ffc5 	.word	0x0802ffc5
 8030010:	0802ffc5 	.word	0x0802ffc5
 8030014:	0802ffc5 	.word	0x0802ffc5
 8030018:	08030113 	.word	0x08030113
 803001c:	080300f9 	.word	0x080300f9
 8030020:	08030077 	.word	0x08030077
 8030024:	08030077 	.word	0x08030077
 8030028:	08030077 	.word	0x08030077
 803002c:	0802ffc5 	.word	0x0802ffc5
 8030030:	080300b5 	.word	0x080300b5
 8030034:	0802ffc5 	.word	0x0802ffc5
 8030038:	0802ffc5 	.word	0x0802ffc5
 803003c:	0802ffc5 	.word	0x0802ffc5
 8030040:	0802ffc5 	.word	0x0802ffc5
 8030044:	08030123 	.word	0x08030123
 8030048:	080300f1 	.word	0x080300f1
 803004c:	08030097 	.word	0x08030097
 8030050:	0802ffc5 	.word	0x0802ffc5
 8030054:	0802ffc5 	.word	0x0802ffc5
 8030058:	0803011f 	.word	0x0803011f
 803005c:	0802ffc5 	.word	0x0802ffc5
 8030060:	080300f9 	.word	0x080300f9
 8030064:	0802ffc5 	.word	0x0802ffc5
 8030068:	0802ffc5 	.word	0x0802ffc5
 803006c:	0803009f 	.word	0x0803009f
 8030070:	3b45      	subs	r3, #69	; 0x45
 8030072:	2b02      	cmp	r3, #2
 8030074:	d8a6      	bhi.n	802ffc4 <__ssvfiscanf_r+0xec>
 8030076:	2305      	movs	r3, #5
 8030078:	e01f      	b.n	80300ba <__ssvfiscanf_r+0x1e2>
 803007a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803007c:	4621      	mov	r1, r4
 803007e:	4630      	mov	r0, r6
 8030080:	4798      	blx	r3
 8030082:	2800      	cmp	r0, #0
 8030084:	f43f af68 	beq.w	802ff58 <__ssvfiscanf_r+0x80>
 8030088:	9844      	ldr	r0, [sp, #272]	; 0x110
 803008a:	2800      	cmp	r0, #0
 803008c:	f040 808d 	bne.w	80301aa <__ssvfiscanf_r+0x2d2>
 8030090:	f04f 30ff 	mov.w	r0, #4294967295
 8030094:	e08f      	b.n	80301b6 <__ssvfiscanf_r+0x2de>
 8030096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030098:	f042 0220 	orr.w	r2, r2, #32
 803009c:	9241      	str	r2, [sp, #260]	; 0x104
 803009e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80300a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80300a4:	9241      	str	r2, [sp, #260]	; 0x104
 80300a6:	2210      	movs	r2, #16
 80300a8:	2b6f      	cmp	r3, #111	; 0x6f
 80300aa:	9242      	str	r2, [sp, #264]	; 0x108
 80300ac:	bf34      	ite	cc
 80300ae:	2303      	movcc	r3, #3
 80300b0:	2304      	movcs	r3, #4
 80300b2:	e002      	b.n	80300ba <__ssvfiscanf_r+0x1e2>
 80300b4:	2300      	movs	r3, #0
 80300b6:	9342      	str	r3, [sp, #264]	; 0x108
 80300b8:	2303      	movs	r3, #3
 80300ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80300bc:	6863      	ldr	r3, [r4, #4]
 80300be:	2b00      	cmp	r3, #0
 80300c0:	dd3d      	ble.n	803013e <__ssvfiscanf_r+0x266>
 80300c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80300c4:	0659      	lsls	r1, r3, #25
 80300c6:	d404      	bmi.n	80300d2 <__ssvfiscanf_r+0x1fa>
 80300c8:	6823      	ldr	r3, [r4, #0]
 80300ca:	781a      	ldrb	r2, [r3, #0]
 80300cc:	5cba      	ldrb	r2, [r7, r2]
 80300ce:	0712      	lsls	r2, r2, #28
 80300d0:	d43c      	bmi.n	803014c <__ssvfiscanf_r+0x274>
 80300d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80300d4:	2b02      	cmp	r3, #2
 80300d6:	dc4b      	bgt.n	8030170 <__ssvfiscanf_r+0x298>
 80300d8:	466b      	mov	r3, sp
 80300da:	4622      	mov	r2, r4
 80300dc:	a941      	add	r1, sp, #260	; 0x104
 80300de:	4630      	mov	r0, r6
 80300e0:	f000 f9b6 	bl	8030450 <_scanf_chars>
 80300e4:	2801      	cmp	r0, #1
 80300e6:	d06a      	beq.n	80301be <__ssvfiscanf_r+0x2e6>
 80300e8:	2802      	cmp	r0, #2
 80300ea:	f47f af1c 	bne.w	802ff26 <__ssvfiscanf_r+0x4e>
 80300ee:	e7cb      	b.n	8030088 <__ssvfiscanf_r+0x1b0>
 80300f0:	2308      	movs	r3, #8
 80300f2:	9342      	str	r3, [sp, #264]	; 0x108
 80300f4:	2304      	movs	r3, #4
 80300f6:	e7e0      	b.n	80300ba <__ssvfiscanf_r+0x1e2>
 80300f8:	220a      	movs	r2, #10
 80300fa:	e7d5      	b.n	80300a8 <__ssvfiscanf_r+0x1d0>
 80300fc:	4629      	mov	r1, r5
 80300fe:	4640      	mov	r0, r8
 8030100:	f000 fc04 	bl	803090c <__sccl>
 8030104:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803010a:	9341      	str	r3, [sp, #260]	; 0x104
 803010c:	4605      	mov	r5, r0
 803010e:	2301      	movs	r3, #1
 8030110:	e7d3      	b.n	80300ba <__ssvfiscanf_r+0x1e2>
 8030112:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030118:	9341      	str	r3, [sp, #260]	; 0x104
 803011a:	2300      	movs	r3, #0
 803011c:	e7cd      	b.n	80300ba <__ssvfiscanf_r+0x1e2>
 803011e:	2302      	movs	r3, #2
 8030120:	e7cb      	b.n	80300ba <__ssvfiscanf_r+0x1e2>
 8030122:	9841      	ldr	r0, [sp, #260]	; 0x104
 8030124:	06c3      	lsls	r3, r0, #27
 8030126:	f53f aefe 	bmi.w	802ff26 <__ssvfiscanf_r+0x4e>
 803012a:	9b00      	ldr	r3, [sp, #0]
 803012c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803012e:	1d19      	adds	r1, r3, #4
 8030130:	9100      	str	r1, [sp, #0]
 8030132:	681b      	ldr	r3, [r3, #0]
 8030134:	07c0      	lsls	r0, r0, #31
 8030136:	bf4c      	ite	mi
 8030138:	801a      	strhmi	r2, [r3, #0]
 803013a:	601a      	strpl	r2, [r3, #0]
 803013c:	e6f3      	b.n	802ff26 <__ssvfiscanf_r+0x4e>
 803013e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030140:	4621      	mov	r1, r4
 8030142:	4630      	mov	r0, r6
 8030144:	4798      	blx	r3
 8030146:	2800      	cmp	r0, #0
 8030148:	d0bb      	beq.n	80300c2 <__ssvfiscanf_r+0x1ea>
 803014a:	e79d      	b.n	8030088 <__ssvfiscanf_r+0x1b0>
 803014c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803014e:	3201      	adds	r2, #1
 8030150:	9245      	str	r2, [sp, #276]	; 0x114
 8030152:	6862      	ldr	r2, [r4, #4]
 8030154:	3a01      	subs	r2, #1
 8030156:	2a00      	cmp	r2, #0
 8030158:	6062      	str	r2, [r4, #4]
 803015a:	dd02      	ble.n	8030162 <__ssvfiscanf_r+0x28a>
 803015c:	3301      	adds	r3, #1
 803015e:	6023      	str	r3, [r4, #0]
 8030160:	e7b2      	b.n	80300c8 <__ssvfiscanf_r+0x1f0>
 8030162:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030164:	4621      	mov	r1, r4
 8030166:	4630      	mov	r0, r6
 8030168:	4798      	blx	r3
 803016a:	2800      	cmp	r0, #0
 803016c:	d0ac      	beq.n	80300c8 <__ssvfiscanf_r+0x1f0>
 803016e:	e78b      	b.n	8030088 <__ssvfiscanf_r+0x1b0>
 8030170:	2b04      	cmp	r3, #4
 8030172:	dc0f      	bgt.n	8030194 <__ssvfiscanf_r+0x2bc>
 8030174:	466b      	mov	r3, sp
 8030176:	4622      	mov	r2, r4
 8030178:	a941      	add	r1, sp, #260	; 0x104
 803017a:	4630      	mov	r0, r6
 803017c:	f000 f9c2 	bl	8030504 <_scanf_i>
 8030180:	e7b0      	b.n	80300e4 <__ssvfiscanf_r+0x20c>
 8030182:	bf00      	nop
 8030184:	0802fe25 	.word	0x0802fe25
 8030188:	0802fe9f 	.word	0x0802fe9f
 803018c:	080346f9 	.word	0x080346f9
 8030190:	080347ff 	.word	0x080347ff
 8030194:	4b0b      	ldr	r3, [pc, #44]	; (80301c4 <__ssvfiscanf_r+0x2ec>)
 8030196:	2b00      	cmp	r3, #0
 8030198:	f43f aec5 	beq.w	802ff26 <__ssvfiscanf_r+0x4e>
 803019c:	466b      	mov	r3, sp
 803019e:	4622      	mov	r2, r4
 80301a0:	a941      	add	r1, sp, #260	; 0x104
 80301a2:	4630      	mov	r0, r6
 80301a4:	f7fc fc6e 	bl	802ca84 <_scanf_float>
 80301a8:	e79c      	b.n	80300e4 <__ssvfiscanf_r+0x20c>
 80301aa:	89a3      	ldrh	r3, [r4, #12]
 80301ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80301b0:	bf18      	it	ne
 80301b2:	f04f 30ff 	movne.w	r0, #4294967295
 80301b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80301ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80301be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80301c0:	e7f9      	b.n	80301b6 <__ssvfiscanf_r+0x2de>
 80301c2:	bf00      	nop
 80301c4:	0802ca85 	.word	0x0802ca85

080301c8 <__sfputc_r>:
 80301c8:	6893      	ldr	r3, [r2, #8]
 80301ca:	3b01      	subs	r3, #1
 80301cc:	2b00      	cmp	r3, #0
 80301ce:	b410      	push	{r4}
 80301d0:	6093      	str	r3, [r2, #8]
 80301d2:	da08      	bge.n	80301e6 <__sfputc_r+0x1e>
 80301d4:	6994      	ldr	r4, [r2, #24]
 80301d6:	42a3      	cmp	r3, r4
 80301d8:	db01      	blt.n	80301de <__sfputc_r+0x16>
 80301da:	290a      	cmp	r1, #10
 80301dc:	d103      	bne.n	80301e6 <__sfputc_r+0x1e>
 80301de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80301e2:	f7fd b80a 	b.w	802d1fa <__swbuf_r>
 80301e6:	6813      	ldr	r3, [r2, #0]
 80301e8:	1c58      	adds	r0, r3, #1
 80301ea:	6010      	str	r0, [r2, #0]
 80301ec:	7019      	strb	r1, [r3, #0]
 80301ee:	4608      	mov	r0, r1
 80301f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80301f4:	4770      	bx	lr

080301f6 <__sfputs_r>:
 80301f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80301f8:	4606      	mov	r6, r0
 80301fa:	460f      	mov	r7, r1
 80301fc:	4614      	mov	r4, r2
 80301fe:	18d5      	adds	r5, r2, r3
 8030200:	42ac      	cmp	r4, r5
 8030202:	d101      	bne.n	8030208 <__sfputs_r+0x12>
 8030204:	2000      	movs	r0, #0
 8030206:	e007      	b.n	8030218 <__sfputs_r+0x22>
 8030208:	f814 1b01 	ldrb.w	r1, [r4], #1
 803020c:	463a      	mov	r2, r7
 803020e:	4630      	mov	r0, r6
 8030210:	f7ff ffda 	bl	80301c8 <__sfputc_r>
 8030214:	1c43      	adds	r3, r0, #1
 8030216:	d1f3      	bne.n	8030200 <__sfputs_r+0xa>
 8030218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803021c <_vfiprintf_r>:
 803021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030220:	460d      	mov	r5, r1
 8030222:	b09d      	sub	sp, #116	; 0x74
 8030224:	4614      	mov	r4, r2
 8030226:	4698      	mov	r8, r3
 8030228:	4606      	mov	r6, r0
 803022a:	b118      	cbz	r0, 8030234 <_vfiprintf_r+0x18>
 803022c:	6a03      	ldr	r3, [r0, #32]
 803022e:	b90b      	cbnz	r3, 8030234 <_vfiprintf_r+0x18>
 8030230:	f7fc fec4 	bl	802cfbc <__sinit>
 8030234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030236:	07d9      	lsls	r1, r3, #31
 8030238:	d405      	bmi.n	8030246 <_vfiprintf_r+0x2a>
 803023a:	89ab      	ldrh	r3, [r5, #12]
 803023c:	059a      	lsls	r2, r3, #22
 803023e:	d402      	bmi.n	8030246 <_vfiprintf_r+0x2a>
 8030240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030242:	f7fd fa64 	bl	802d70e <__retarget_lock_acquire_recursive>
 8030246:	89ab      	ldrh	r3, [r5, #12]
 8030248:	071b      	lsls	r3, r3, #28
 803024a:	d501      	bpl.n	8030250 <_vfiprintf_r+0x34>
 803024c:	692b      	ldr	r3, [r5, #16]
 803024e:	b99b      	cbnz	r3, 8030278 <_vfiprintf_r+0x5c>
 8030250:	4629      	mov	r1, r5
 8030252:	4630      	mov	r0, r6
 8030254:	f7fd f80e 	bl	802d274 <__swsetup_r>
 8030258:	b170      	cbz	r0, 8030278 <_vfiprintf_r+0x5c>
 803025a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803025c:	07dc      	lsls	r4, r3, #31
 803025e:	d504      	bpl.n	803026a <_vfiprintf_r+0x4e>
 8030260:	f04f 30ff 	mov.w	r0, #4294967295
 8030264:	b01d      	add	sp, #116	; 0x74
 8030266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803026a:	89ab      	ldrh	r3, [r5, #12]
 803026c:	0598      	lsls	r0, r3, #22
 803026e:	d4f7      	bmi.n	8030260 <_vfiprintf_r+0x44>
 8030270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030272:	f7fd fa4d 	bl	802d710 <__retarget_lock_release_recursive>
 8030276:	e7f3      	b.n	8030260 <_vfiprintf_r+0x44>
 8030278:	2300      	movs	r3, #0
 803027a:	9309      	str	r3, [sp, #36]	; 0x24
 803027c:	2320      	movs	r3, #32
 803027e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030282:	f8cd 800c 	str.w	r8, [sp, #12]
 8030286:	2330      	movs	r3, #48	; 0x30
 8030288:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 803043c <_vfiprintf_r+0x220>
 803028c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030290:	f04f 0901 	mov.w	r9, #1
 8030294:	4623      	mov	r3, r4
 8030296:	469a      	mov	sl, r3
 8030298:	f813 2b01 	ldrb.w	r2, [r3], #1
 803029c:	b10a      	cbz	r2, 80302a2 <_vfiprintf_r+0x86>
 803029e:	2a25      	cmp	r2, #37	; 0x25
 80302a0:	d1f9      	bne.n	8030296 <_vfiprintf_r+0x7a>
 80302a2:	ebba 0b04 	subs.w	fp, sl, r4
 80302a6:	d00b      	beq.n	80302c0 <_vfiprintf_r+0xa4>
 80302a8:	465b      	mov	r3, fp
 80302aa:	4622      	mov	r2, r4
 80302ac:	4629      	mov	r1, r5
 80302ae:	4630      	mov	r0, r6
 80302b0:	f7ff ffa1 	bl	80301f6 <__sfputs_r>
 80302b4:	3001      	adds	r0, #1
 80302b6:	f000 80a9 	beq.w	803040c <_vfiprintf_r+0x1f0>
 80302ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80302bc:	445a      	add	r2, fp
 80302be:	9209      	str	r2, [sp, #36]	; 0x24
 80302c0:	f89a 3000 	ldrb.w	r3, [sl]
 80302c4:	2b00      	cmp	r3, #0
 80302c6:	f000 80a1 	beq.w	803040c <_vfiprintf_r+0x1f0>
 80302ca:	2300      	movs	r3, #0
 80302cc:	f04f 32ff 	mov.w	r2, #4294967295
 80302d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80302d4:	f10a 0a01 	add.w	sl, sl, #1
 80302d8:	9304      	str	r3, [sp, #16]
 80302da:	9307      	str	r3, [sp, #28]
 80302dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80302e0:	931a      	str	r3, [sp, #104]	; 0x68
 80302e2:	4654      	mov	r4, sl
 80302e4:	2205      	movs	r2, #5
 80302e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80302ea:	4854      	ldr	r0, [pc, #336]	; (803043c <_vfiprintf_r+0x220>)
 80302ec:	f7df ff88 	bl	8010200 <memchr>
 80302f0:	9a04      	ldr	r2, [sp, #16]
 80302f2:	b9d8      	cbnz	r0, 803032c <_vfiprintf_r+0x110>
 80302f4:	06d1      	lsls	r1, r2, #27
 80302f6:	bf44      	itt	mi
 80302f8:	2320      	movmi	r3, #32
 80302fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80302fe:	0713      	lsls	r3, r2, #28
 8030300:	bf44      	itt	mi
 8030302:	232b      	movmi	r3, #43	; 0x2b
 8030304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030308:	f89a 3000 	ldrb.w	r3, [sl]
 803030c:	2b2a      	cmp	r3, #42	; 0x2a
 803030e:	d015      	beq.n	803033c <_vfiprintf_r+0x120>
 8030310:	9a07      	ldr	r2, [sp, #28]
 8030312:	4654      	mov	r4, sl
 8030314:	2000      	movs	r0, #0
 8030316:	f04f 0c0a 	mov.w	ip, #10
 803031a:	4621      	mov	r1, r4
 803031c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030320:	3b30      	subs	r3, #48	; 0x30
 8030322:	2b09      	cmp	r3, #9
 8030324:	d94d      	bls.n	80303c2 <_vfiprintf_r+0x1a6>
 8030326:	b1b0      	cbz	r0, 8030356 <_vfiprintf_r+0x13a>
 8030328:	9207      	str	r2, [sp, #28]
 803032a:	e014      	b.n	8030356 <_vfiprintf_r+0x13a>
 803032c:	eba0 0308 	sub.w	r3, r0, r8
 8030330:	fa09 f303 	lsl.w	r3, r9, r3
 8030334:	4313      	orrs	r3, r2
 8030336:	9304      	str	r3, [sp, #16]
 8030338:	46a2      	mov	sl, r4
 803033a:	e7d2      	b.n	80302e2 <_vfiprintf_r+0xc6>
 803033c:	9b03      	ldr	r3, [sp, #12]
 803033e:	1d19      	adds	r1, r3, #4
 8030340:	681b      	ldr	r3, [r3, #0]
 8030342:	9103      	str	r1, [sp, #12]
 8030344:	2b00      	cmp	r3, #0
 8030346:	bfbb      	ittet	lt
 8030348:	425b      	neglt	r3, r3
 803034a:	f042 0202 	orrlt.w	r2, r2, #2
 803034e:	9307      	strge	r3, [sp, #28]
 8030350:	9307      	strlt	r3, [sp, #28]
 8030352:	bfb8      	it	lt
 8030354:	9204      	strlt	r2, [sp, #16]
 8030356:	7823      	ldrb	r3, [r4, #0]
 8030358:	2b2e      	cmp	r3, #46	; 0x2e
 803035a:	d10c      	bne.n	8030376 <_vfiprintf_r+0x15a>
 803035c:	7863      	ldrb	r3, [r4, #1]
 803035e:	2b2a      	cmp	r3, #42	; 0x2a
 8030360:	d134      	bne.n	80303cc <_vfiprintf_r+0x1b0>
 8030362:	9b03      	ldr	r3, [sp, #12]
 8030364:	1d1a      	adds	r2, r3, #4
 8030366:	681b      	ldr	r3, [r3, #0]
 8030368:	9203      	str	r2, [sp, #12]
 803036a:	2b00      	cmp	r3, #0
 803036c:	bfb8      	it	lt
 803036e:	f04f 33ff 	movlt.w	r3, #4294967295
 8030372:	3402      	adds	r4, #2
 8030374:	9305      	str	r3, [sp, #20]
 8030376:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 803044c <_vfiprintf_r+0x230>
 803037a:	7821      	ldrb	r1, [r4, #0]
 803037c:	2203      	movs	r2, #3
 803037e:	4650      	mov	r0, sl
 8030380:	f7df ff3e 	bl	8010200 <memchr>
 8030384:	b138      	cbz	r0, 8030396 <_vfiprintf_r+0x17a>
 8030386:	9b04      	ldr	r3, [sp, #16]
 8030388:	eba0 000a 	sub.w	r0, r0, sl
 803038c:	2240      	movs	r2, #64	; 0x40
 803038e:	4082      	lsls	r2, r0
 8030390:	4313      	orrs	r3, r2
 8030392:	3401      	adds	r4, #1
 8030394:	9304      	str	r3, [sp, #16]
 8030396:	f814 1b01 	ldrb.w	r1, [r4], #1
 803039a:	4829      	ldr	r0, [pc, #164]	; (8030440 <_vfiprintf_r+0x224>)
 803039c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80303a0:	2206      	movs	r2, #6
 80303a2:	f7df ff2d 	bl	8010200 <memchr>
 80303a6:	2800      	cmp	r0, #0
 80303a8:	d03f      	beq.n	803042a <_vfiprintf_r+0x20e>
 80303aa:	4b26      	ldr	r3, [pc, #152]	; (8030444 <_vfiprintf_r+0x228>)
 80303ac:	bb1b      	cbnz	r3, 80303f6 <_vfiprintf_r+0x1da>
 80303ae:	9b03      	ldr	r3, [sp, #12]
 80303b0:	3307      	adds	r3, #7
 80303b2:	f023 0307 	bic.w	r3, r3, #7
 80303b6:	3308      	adds	r3, #8
 80303b8:	9303      	str	r3, [sp, #12]
 80303ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80303bc:	443b      	add	r3, r7
 80303be:	9309      	str	r3, [sp, #36]	; 0x24
 80303c0:	e768      	b.n	8030294 <_vfiprintf_r+0x78>
 80303c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80303c6:	460c      	mov	r4, r1
 80303c8:	2001      	movs	r0, #1
 80303ca:	e7a6      	b.n	803031a <_vfiprintf_r+0xfe>
 80303cc:	2300      	movs	r3, #0
 80303ce:	3401      	adds	r4, #1
 80303d0:	9305      	str	r3, [sp, #20]
 80303d2:	4619      	mov	r1, r3
 80303d4:	f04f 0c0a 	mov.w	ip, #10
 80303d8:	4620      	mov	r0, r4
 80303da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80303de:	3a30      	subs	r2, #48	; 0x30
 80303e0:	2a09      	cmp	r2, #9
 80303e2:	d903      	bls.n	80303ec <_vfiprintf_r+0x1d0>
 80303e4:	2b00      	cmp	r3, #0
 80303e6:	d0c6      	beq.n	8030376 <_vfiprintf_r+0x15a>
 80303e8:	9105      	str	r1, [sp, #20]
 80303ea:	e7c4      	b.n	8030376 <_vfiprintf_r+0x15a>
 80303ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80303f0:	4604      	mov	r4, r0
 80303f2:	2301      	movs	r3, #1
 80303f4:	e7f0      	b.n	80303d8 <_vfiprintf_r+0x1bc>
 80303f6:	ab03      	add	r3, sp, #12
 80303f8:	9300      	str	r3, [sp, #0]
 80303fa:	462a      	mov	r2, r5
 80303fc:	4b12      	ldr	r3, [pc, #72]	; (8030448 <_vfiprintf_r+0x22c>)
 80303fe:	a904      	add	r1, sp, #16
 8030400:	4630      	mov	r0, r6
 8030402:	f7fb ff79 	bl	802c2f8 <_printf_float>
 8030406:	4607      	mov	r7, r0
 8030408:	1c78      	adds	r0, r7, #1
 803040a:	d1d6      	bne.n	80303ba <_vfiprintf_r+0x19e>
 803040c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803040e:	07d9      	lsls	r1, r3, #31
 8030410:	d405      	bmi.n	803041e <_vfiprintf_r+0x202>
 8030412:	89ab      	ldrh	r3, [r5, #12]
 8030414:	059a      	lsls	r2, r3, #22
 8030416:	d402      	bmi.n	803041e <_vfiprintf_r+0x202>
 8030418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803041a:	f7fd f979 	bl	802d710 <__retarget_lock_release_recursive>
 803041e:	89ab      	ldrh	r3, [r5, #12]
 8030420:	065b      	lsls	r3, r3, #25
 8030422:	f53f af1d 	bmi.w	8030260 <_vfiprintf_r+0x44>
 8030426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030428:	e71c      	b.n	8030264 <_vfiprintf_r+0x48>
 803042a:	ab03      	add	r3, sp, #12
 803042c:	9300      	str	r3, [sp, #0]
 803042e:	462a      	mov	r2, r5
 8030430:	4b05      	ldr	r3, [pc, #20]	; (8030448 <_vfiprintf_r+0x22c>)
 8030432:	a904      	add	r1, sp, #16
 8030434:	4630      	mov	r0, r6
 8030436:	f7fc fa03 	bl	802c840 <_printf_i>
 803043a:	e7e4      	b.n	8030406 <_vfiprintf_r+0x1ea>
 803043c:	080347f9 	.word	0x080347f9
 8030440:	08034803 	.word	0x08034803
 8030444:	0802c2f9 	.word	0x0802c2f9
 8030448:	080301f7 	.word	0x080301f7
 803044c:	080347ff 	.word	0x080347ff

08030450 <_scanf_chars>:
 8030450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030454:	4615      	mov	r5, r2
 8030456:	688a      	ldr	r2, [r1, #8]
 8030458:	4680      	mov	r8, r0
 803045a:	460c      	mov	r4, r1
 803045c:	b932      	cbnz	r2, 803046c <_scanf_chars+0x1c>
 803045e:	698a      	ldr	r2, [r1, #24]
 8030460:	2a00      	cmp	r2, #0
 8030462:	bf0c      	ite	eq
 8030464:	2201      	moveq	r2, #1
 8030466:	f04f 32ff 	movne.w	r2, #4294967295
 803046a:	608a      	str	r2, [r1, #8]
 803046c:	6822      	ldr	r2, [r4, #0]
 803046e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8030500 <_scanf_chars+0xb0>
 8030472:	06d1      	lsls	r1, r2, #27
 8030474:	bf5f      	itttt	pl
 8030476:	681a      	ldrpl	r2, [r3, #0]
 8030478:	1d11      	addpl	r1, r2, #4
 803047a:	6019      	strpl	r1, [r3, #0]
 803047c:	6816      	ldrpl	r6, [r2, #0]
 803047e:	2700      	movs	r7, #0
 8030480:	69a0      	ldr	r0, [r4, #24]
 8030482:	b188      	cbz	r0, 80304a8 <_scanf_chars+0x58>
 8030484:	2801      	cmp	r0, #1
 8030486:	d107      	bne.n	8030498 <_scanf_chars+0x48>
 8030488:	682a      	ldr	r2, [r5, #0]
 803048a:	7811      	ldrb	r1, [r2, #0]
 803048c:	6962      	ldr	r2, [r4, #20]
 803048e:	5c52      	ldrb	r2, [r2, r1]
 8030490:	b952      	cbnz	r2, 80304a8 <_scanf_chars+0x58>
 8030492:	2f00      	cmp	r7, #0
 8030494:	d031      	beq.n	80304fa <_scanf_chars+0xaa>
 8030496:	e022      	b.n	80304de <_scanf_chars+0x8e>
 8030498:	2802      	cmp	r0, #2
 803049a:	d120      	bne.n	80304de <_scanf_chars+0x8e>
 803049c:	682b      	ldr	r3, [r5, #0]
 803049e:	781b      	ldrb	r3, [r3, #0]
 80304a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80304a4:	071b      	lsls	r3, r3, #28
 80304a6:	d41a      	bmi.n	80304de <_scanf_chars+0x8e>
 80304a8:	6823      	ldr	r3, [r4, #0]
 80304aa:	06da      	lsls	r2, r3, #27
 80304ac:	bf5e      	ittt	pl
 80304ae:	682b      	ldrpl	r3, [r5, #0]
 80304b0:	781b      	ldrbpl	r3, [r3, #0]
 80304b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80304b6:	682a      	ldr	r2, [r5, #0]
 80304b8:	686b      	ldr	r3, [r5, #4]
 80304ba:	3201      	adds	r2, #1
 80304bc:	602a      	str	r2, [r5, #0]
 80304be:	68a2      	ldr	r2, [r4, #8]
 80304c0:	3b01      	subs	r3, #1
 80304c2:	3a01      	subs	r2, #1
 80304c4:	606b      	str	r3, [r5, #4]
 80304c6:	3701      	adds	r7, #1
 80304c8:	60a2      	str	r2, [r4, #8]
 80304ca:	b142      	cbz	r2, 80304de <_scanf_chars+0x8e>
 80304cc:	2b00      	cmp	r3, #0
 80304ce:	dcd7      	bgt.n	8030480 <_scanf_chars+0x30>
 80304d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80304d4:	4629      	mov	r1, r5
 80304d6:	4640      	mov	r0, r8
 80304d8:	4798      	blx	r3
 80304da:	2800      	cmp	r0, #0
 80304dc:	d0d0      	beq.n	8030480 <_scanf_chars+0x30>
 80304de:	6823      	ldr	r3, [r4, #0]
 80304e0:	f013 0310 	ands.w	r3, r3, #16
 80304e4:	d105      	bne.n	80304f2 <_scanf_chars+0xa2>
 80304e6:	68e2      	ldr	r2, [r4, #12]
 80304e8:	3201      	adds	r2, #1
 80304ea:	60e2      	str	r2, [r4, #12]
 80304ec:	69a2      	ldr	r2, [r4, #24]
 80304ee:	b102      	cbz	r2, 80304f2 <_scanf_chars+0xa2>
 80304f0:	7033      	strb	r3, [r6, #0]
 80304f2:	6923      	ldr	r3, [r4, #16]
 80304f4:	443b      	add	r3, r7
 80304f6:	6123      	str	r3, [r4, #16]
 80304f8:	2000      	movs	r0, #0
 80304fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80304fe:	bf00      	nop
 8030500:	080346f9 	.word	0x080346f9

08030504 <_scanf_i>:
 8030504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030508:	4698      	mov	r8, r3
 803050a:	4b74      	ldr	r3, [pc, #464]	; (80306dc <_scanf_i+0x1d8>)
 803050c:	460c      	mov	r4, r1
 803050e:	4682      	mov	sl, r0
 8030510:	4616      	mov	r6, r2
 8030512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030516:	b087      	sub	sp, #28
 8030518:	ab03      	add	r3, sp, #12
 803051a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 803051e:	4b70      	ldr	r3, [pc, #448]	; (80306e0 <_scanf_i+0x1dc>)
 8030520:	69a1      	ldr	r1, [r4, #24]
 8030522:	4a70      	ldr	r2, [pc, #448]	; (80306e4 <_scanf_i+0x1e0>)
 8030524:	2903      	cmp	r1, #3
 8030526:	bf18      	it	ne
 8030528:	461a      	movne	r2, r3
 803052a:	68a3      	ldr	r3, [r4, #8]
 803052c:	9201      	str	r2, [sp, #4]
 803052e:	1e5a      	subs	r2, r3, #1
 8030530:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8030534:	bf88      	it	hi
 8030536:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 803053a:	4627      	mov	r7, r4
 803053c:	bf82      	ittt	hi
 803053e:	eb03 0905 	addhi.w	r9, r3, r5
 8030542:	f240 135d 	movwhi	r3, #349	; 0x15d
 8030546:	60a3      	strhi	r3, [r4, #8]
 8030548:	f857 3b1c 	ldr.w	r3, [r7], #28
 803054c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8030550:	bf98      	it	ls
 8030552:	f04f 0900 	movls.w	r9, #0
 8030556:	6023      	str	r3, [r4, #0]
 8030558:	463d      	mov	r5, r7
 803055a:	f04f 0b00 	mov.w	fp, #0
 803055e:	6831      	ldr	r1, [r6, #0]
 8030560:	ab03      	add	r3, sp, #12
 8030562:	7809      	ldrb	r1, [r1, #0]
 8030564:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8030568:	2202      	movs	r2, #2
 803056a:	f7df fe49 	bl	8010200 <memchr>
 803056e:	b328      	cbz	r0, 80305bc <_scanf_i+0xb8>
 8030570:	f1bb 0f01 	cmp.w	fp, #1
 8030574:	d159      	bne.n	803062a <_scanf_i+0x126>
 8030576:	6862      	ldr	r2, [r4, #4]
 8030578:	b92a      	cbnz	r2, 8030586 <_scanf_i+0x82>
 803057a:	6822      	ldr	r2, [r4, #0]
 803057c:	2308      	movs	r3, #8
 803057e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030582:	6063      	str	r3, [r4, #4]
 8030584:	6022      	str	r2, [r4, #0]
 8030586:	6822      	ldr	r2, [r4, #0]
 8030588:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 803058c:	6022      	str	r2, [r4, #0]
 803058e:	68a2      	ldr	r2, [r4, #8]
 8030590:	1e51      	subs	r1, r2, #1
 8030592:	60a1      	str	r1, [r4, #8]
 8030594:	b192      	cbz	r2, 80305bc <_scanf_i+0xb8>
 8030596:	6832      	ldr	r2, [r6, #0]
 8030598:	1c51      	adds	r1, r2, #1
 803059a:	6031      	str	r1, [r6, #0]
 803059c:	7812      	ldrb	r2, [r2, #0]
 803059e:	f805 2b01 	strb.w	r2, [r5], #1
 80305a2:	6872      	ldr	r2, [r6, #4]
 80305a4:	3a01      	subs	r2, #1
 80305a6:	2a00      	cmp	r2, #0
 80305a8:	6072      	str	r2, [r6, #4]
 80305aa:	dc07      	bgt.n	80305bc <_scanf_i+0xb8>
 80305ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80305b0:	4631      	mov	r1, r6
 80305b2:	4650      	mov	r0, sl
 80305b4:	4790      	blx	r2
 80305b6:	2800      	cmp	r0, #0
 80305b8:	f040 8085 	bne.w	80306c6 <_scanf_i+0x1c2>
 80305bc:	f10b 0b01 	add.w	fp, fp, #1
 80305c0:	f1bb 0f03 	cmp.w	fp, #3
 80305c4:	d1cb      	bne.n	803055e <_scanf_i+0x5a>
 80305c6:	6863      	ldr	r3, [r4, #4]
 80305c8:	b90b      	cbnz	r3, 80305ce <_scanf_i+0xca>
 80305ca:	230a      	movs	r3, #10
 80305cc:	6063      	str	r3, [r4, #4]
 80305ce:	6863      	ldr	r3, [r4, #4]
 80305d0:	4945      	ldr	r1, [pc, #276]	; (80306e8 <_scanf_i+0x1e4>)
 80305d2:	6960      	ldr	r0, [r4, #20]
 80305d4:	1ac9      	subs	r1, r1, r3
 80305d6:	f000 f999 	bl	803090c <__sccl>
 80305da:	f04f 0b00 	mov.w	fp, #0
 80305de:	68a3      	ldr	r3, [r4, #8]
 80305e0:	6822      	ldr	r2, [r4, #0]
 80305e2:	2b00      	cmp	r3, #0
 80305e4:	d03d      	beq.n	8030662 <_scanf_i+0x15e>
 80305e6:	6831      	ldr	r1, [r6, #0]
 80305e8:	6960      	ldr	r0, [r4, #20]
 80305ea:	f891 c000 	ldrb.w	ip, [r1]
 80305ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80305f2:	2800      	cmp	r0, #0
 80305f4:	d035      	beq.n	8030662 <_scanf_i+0x15e>
 80305f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80305fa:	d124      	bne.n	8030646 <_scanf_i+0x142>
 80305fc:	0510      	lsls	r0, r2, #20
 80305fe:	d522      	bpl.n	8030646 <_scanf_i+0x142>
 8030600:	f10b 0b01 	add.w	fp, fp, #1
 8030604:	f1b9 0f00 	cmp.w	r9, #0
 8030608:	d003      	beq.n	8030612 <_scanf_i+0x10e>
 803060a:	3301      	adds	r3, #1
 803060c:	f109 39ff 	add.w	r9, r9, #4294967295
 8030610:	60a3      	str	r3, [r4, #8]
 8030612:	6873      	ldr	r3, [r6, #4]
 8030614:	3b01      	subs	r3, #1
 8030616:	2b00      	cmp	r3, #0
 8030618:	6073      	str	r3, [r6, #4]
 803061a:	dd1b      	ble.n	8030654 <_scanf_i+0x150>
 803061c:	6833      	ldr	r3, [r6, #0]
 803061e:	3301      	adds	r3, #1
 8030620:	6033      	str	r3, [r6, #0]
 8030622:	68a3      	ldr	r3, [r4, #8]
 8030624:	3b01      	subs	r3, #1
 8030626:	60a3      	str	r3, [r4, #8]
 8030628:	e7d9      	b.n	80305de <_scanf_i+0xda>
 803062a:	f1bb 0f02 	cmp.w	fp, #2
 803062e:	d1ae      	bne.n	803058e <_scanf_i+0x8a>
 8030630:	6822      	ldr	r2, [r4, #0]
 8030632:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8030636:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 803063a:	d1bf      	bne.n	80305bc <_scanf_i+0xb8>
 803063c:	2310      	movs	r3, #16
 803063e:	6063      	str	r3, [r4, #4]
 8030640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030644:	e7a2      	b.n	803058c <_scanf_i+0x88>
 8030646:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 803064a:	6022      	str	r2, [r4, #0]
 803064c:	780b      	ldrb	r3, [r1, #0]
 803064e:	f805 3b01 	strb.w	r3, [r5], #1
 8030652:	e7de      	b.n	8030612 <_scanf_i+0x10e>
 8030654:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030658:	4631      	mov	r1, r6
 803065a:	4650      	mov	r0, sl
 803065c:	4798      	blx	r3
 803065e:	2800      	cmp	r0, #0
 8030660:	d0df      	beq.n	8030622 <_scanf_i+0x11e>
 8030662:	6823      	ldr	r3, [r4, #0]
 8030664:	05d9      	lsls	r1, r3, #23
 8030666:	d50d      	bpl.n	8030684 <_scanf_i+0x180>
 8030668:	42bd      	cmp	r5, r7
 803066a:	d909      	bls.n	8030680 <_scanf_i+0x17c>
 803066c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8030670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8030674:	4632      	mov	r2, r6
 8030676:	4650      	mov	r0, sl
 8030678:	4798      	blx	r3
 803067a:	f105 39ff 	add.w	r9, r5, #4294967295
 803067e:	464d      	mov	r5, r9
 8030680:	42bd      	cmp	r5, r7
 8030682:	d028      	beq.n	80306d6 <_scanf_i+0x1d2>
 8030684:	6822      	ldr	r2, [r4, #0]
 8030686:	f012 0210 	ands.w	r2, r2, #16
 803068a:	d113      	bne.n	80306b4 <_scanf_i+0x1b0>
 803068c:	702a      	strb	r2, [r5, #0]
 803068e:	6863      	ldr	r3, [r4, #4]
 8030690:	9e01      	ldr	r6, [sp, #4]
 8030692:	4639      	mov	r1, r7
 8030694:	4650      	mov	r0, sl
 8030696:	47b0      	blx	r6
 8030698:	f8d8 3000 	ldr.w	r3, [r8]
 803069c:	6821      	ldr	r1, [r4, #0]
 803069e:	1d1a      	adds	r2, r3, #4
 80306a0:	f8c8 2000 	str.w	r2, [r8]
 80306a4:	f011 0f20 	tst.w	r1, #32
 80306a8:	681b      	ldr	r3, [r3, #0]
 80306aa:	d00f      	beq.n	80306cc <_scanf_i+0x1c8>
 80306ac:	6018      	str	r0, [r3, #0]
 80306ae:	68e3      	ldr	r3, [r4, #12]
 80306b0:	3301      	adds	r3, #1
 80306b2:	60e3      	str	r3, [r4, #12]
 80306b4:	6923      	ldr	r3, [r4, #16]
 80306b6:	1bed      	subs	r5, r5, r7
 80306b8:	445d      	add	r5, fp
 80306ba:	442b      	add	r3, r5
 80306bc:	6123      	str	r3, [r4, #16]
 80306be:	2000      	movs	r0, #0
 80306c0:	b007      	add	sp, #28
 80306c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80306c6:	f04f 0b00 	mov.w	fp, #0
 80306ca:	e7ca      	b.n	8030662 <_scanf_i+0x15e>
 80306cc:	07ca      	lsls	r2, r1, #31
 80306ce:	bf4c      	ite	mi
 80306d0:	8018      	strhmi	r0, [r3, #0]
 80306d2:	6018      	strpl	r0, [r3, #0]
 80306d4:	e7eb      	b.n	80306ae <_scanf_i+0x1aa>
 80306d6:	2001      	movs	r0, #1
 80306d8:	e7f2      	b.n	80306c0 <_scanf_i+0x1bc>
 80306da:	bf00      	nop
 80306dc:	080338e4 	.word	0x080338e4
 80306e0:	080312e5 	.word	0x080312e5
 80306e4:	0802fb71 	.word	0x0802fb71
 80306e8:	0803481a 	.word	0x0803481a

080306ec <__sflush_r>:
 80306ec:	898a      	ldrh	r2, [r1, #12]
 80306ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80306f2:	4605      	mov	r5, r0
 80306f4:	0710      	lsls	r0, r2, #28
 80306f6:	460c      	mov	r4, r1
 80306f8:	d458      	bmi.n	80307ac <__sflush_r+0xc0>
 80306fa:	684b      	ldr	r3, [r1, #4]
 80306fc:	2b00      	cmp	r3, #0
 80306fe:	dc05      	bgt.n	803070c <__sflush_r+0x20>
 8030700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030702:	2b00      	cmp	r3, #0
 8030704:	dc02      	bgt.n	803070c <__sflush_r+0x20>
 8030706:	2000      	movs	r0, #0
 8030708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803070c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803070e:	2e00      	cmp	r6, #0
 8030710:	d0f9      	beq.n	8030706 <__sflush_r+0x1a>
 8030712:	2300      	movs	r3, #0
 8030714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030718:	682f      	ldr	r7, [r5, #0]
 803071a:	6a21      	ldr	r1, [r4, #32]
 803071c:	602b      	str	r3, [r5, #0]
 803071e:	d032      	beq.n	8030786 <__sflush_r+0x9a>
 8030720:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030722:	89a3      	ldrh	r3, [r4, #12]
 8030724:	075a      	lsls	r2, r3, #29
 8030726:	d505      	bpl.n	8030734 <__sflush_r+0x48>
 8030728:	6863      	ldr	r3, [r4, #4]
 803072a:	1ac0      	subs	r0, r0, r3
 803072c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803072e:	b10b      	cbz	r3, 8030734 <__sflush_r+0x48>
 8030730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030732:	1ac0      	subs	r0, r0, r3
 8030734:	2300      	movs	r3, #0
 8030736:	4602      	mov	r2, r0
 8030738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803073a:	6a21      	ldr	r1, [r4, #32]
 803073c:	4628      	mov	r0, r5
 803073e:	47b0      	blx	r6
 8030740:	1c43      	adds	r3, r0, #1
 8030742:	89a3      	ldrh	r3, [r4, #12]
 8030744:	d106      	bne.n	8030754 <__sflush_r+0x68>
 8030746:	6829      	ldr	r1, [r5, #0]
 8030748:	291d      	cmp	r1, #29
 803074a:	d82b      	bhi.n	80307a4 <__sflush_r+0xb8>
 803074c:	4a29      	ldr	r2, [pc, #164]	; (80307f4 <__sflush_r+0x108>)
 803074e:	410a      	asrs	r2, r1
 8030750:	07d6      	lsls	r6, r2, #31
 8030752:	d427      	bmi.n	80307a4 <__sflush_r+0xb8>
 8030754:	2200      	movs	r2, #0
 8030756:	6062      	str	r2, [r4, #4]
 8030758:	04d9      	lsls	r1, r3, #19
 803075a:	6922      	ldr	r2, [r4, #16]
 803075c:	6022      	str	r2, [r4, #0]
 803075e:	d504      	bpl.n	803076a <__sflush_r+0x7e>
 8030760:	1c42      	adds	r2, r0, #1
 8030762:	d101      	bne.n	8030768 <__sflush_r+0x7c>
 8030764:	682b      	ldr	r3, [r5, #0]
 8030766:	b903      	cbnz	r3, 803076a <__sflush_r+0x7e>
 8030768:	6560      	str	r0, [r4, #84]	; 0x54
 803076a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803076c:	602f      	str	r7, [r5, #0]
 803076e:	2900      	cmp	r1, #0
 8030770:	d0c9      	beq.n	8030706 <__sflush_r+0x1a>
 8030772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030776:	4299      	cmp	r1, r3
 8030778:	d002      	beq.n	8030780 <__sflush_r+0x94>
 803077a:	4628      	mov	r0, r5
 803077c:	f7fd fe6a 	bl	802e454 <_free_r>
 8030780:	2000      	movs	r0, #0
 8030782:	6360      	str	r0, [r4, #52]	; 0x34
 8030784:	e7c0      	b.n	8030708 <__sflush_r+0x1c>
 8030786:	2301      	movs	r3, #1
 8030788:	4628      	mov	r0, r5
 803078a:	47b0      	blx	r6
 803078c:	1c41      	adds	r1, r0, #1
 803078e:	d1c8      	bne.n	8030722 <__sflush_r+0x36>
 8030790:	682b      	ldr	r3, [r5, #0]
 8030792:	2b00      	cmp	r3, #0
 8030794:	d0c5      	beq.n	8030722 <__sflush_r+0x36>
 8030796:	2b1d      	cmp	r3, #29
 8030798:	d001      	beq.n	803079e <__sflush_r+0xb2>
 803079a:	2b16      	cmp	r3, #22
 803079c:	d101      	bne.n	80307a2 <__sflush_r+0xb6>
 803079e:	602f      	str	r7, [r5, #0]
 80307a0:	e7b1      	b.n	8030706 <__sflush_r+0x1a>
 80307a2:	89a3      	ldrh	r3, [r4, #12]
 80307a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80307a8:	81a3      	strh	r3, [r4, #12]
 80307aa:	e7ad      	b.n	8030708 <__sflush_r+0x1c>
 80307ac:	690f      	ldr	r7, [r1, #16]
 80307ae:	2f00      	cmp	r7, #0
 80307b0:	d0a9      	beq.n	8030706 <__sflush_r+0x1a>
 80307b2:	0793      	lsls	r3, r2, #30
 80307b4:	680e      	ldr	r6, [r1, #0]
 80307b6:	bf08      	it	eq
 80307b8:	694b      	ldreq	r3, [r1, #20]
 80307ba:	600f      	str	r7, [r1, #0]
 80307bc:	bf18      	it	ne
 80307be:	2300      	movne	r3, #0
 80307c0:	eba6 0807 	sub.w	r8, r6, r7
 80307c4:	608b      	str	r3, [r1, #8]
 80307c6:	f1b8 0f00 	cmp.w	r8, #0
 80307ca:	dd9c      	ble.n	8030706 <__sflush_r+0x1a>
 80307cc:	6a21      	ldr	r1, [r4, #32]
 80307ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80307d0:	4643      	mov	r3, r8
 80307d2:	463a      	mov	r2, r7
 80307d4:	4628      	mov	r0, r5
 80307d6:	47b0      	blx	r6
 80307d8:	2800      	cmp	r0, #0
 80307da:	dc06      	bgt.n	80307ea <__sflush_r+0xfe>
 80307dc:	89a3      	ldrh	r3, [r4, #12]
 80307de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80307e2:	81a3      	strh	r3, [r4, #12]
 80307e4:	f04f 30ff 	mov.w	r0, #4294967295
 80307e8:	e78e      	b.n	8030708 <__sflush_r+0x1c>
 80307ea:	4407      	add	r7, r0
 80307ec:	eba8 0800 	sub.w	r8, r8, r0
 80307f0:	e7e9      	b.n	80307c6 <__sflush_r+0xda>
 80307f2:	bf00      	nop
 80307f4:	dfbffffe 	.word	0xdfbffffe

080307f8 <_fflush_r>:
 80307f8:	b538      	push	{r3, r4, r5, lr}
 80307fa:	690b      	ldr	r3, [r1, #16]
 80307fc:	4605      	mov	r5, r0
 80307fe:	460c      	mov	r4, r1
 8030800:	b913      	cbnz	r3, 8030808 <_fflush_r+0x10>
 8030802:	2500      	movs	r5, #0
 8030804:	4628      	mov	r0, r5
 8030806:	bd38      	pop	{r3, r4, r5, pc}
 8030808:	b118      	cbz	r0, 8030812 <_fflush_r+0x1a>
 803080a:	6a03      	ldr	r3, [r0, #32]
 803080c:	b90b      	cbnz	r3, 8030812 <_fflush_r+0x1a>
 803080e:	f7fc fbd5 	bl	802cfbc <__sinit>
 8030812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030816:	2b00      	cmp	r3, #0
 8030818:	d0f3      	beq.n	8030802 <_fflush_r+0xa>
 803081a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803081c:	07d0      	lsls	r0, r2, #31
 803081e:	d404      	bmi.n	803082a <_fflush_r+0x32>
 8030820:	0599      	lsls	r1, r3, #22
 8030822:	d402      	bmi.n	803082a <_fflush_r+0x32>
 8030824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030826:	f7fc ff72 	bl	802d70e <__retarget_lock_acquire_recursive>
 803082a:	4628      	mov	r0, r5
 803082c:	4621      	mov	r1, r4
 803082e:	f7ff ff5d 	bl	80306ec <__sflush_r>
 8030832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030834:	07da      	lsls	r2, r3, #31
 8030836:	4605      	mov	r5, r0
 8030838:	d4e4      	bmi.n	8030804 <_fflush_r+0xc>
 803083a:	89a3      	ldrh	r3, [r4, #12]
 803083c:	059b      	lsls	r3, r3, #22
 803083e:	d4e1      	bmi.n	8030804 <_fflush_r+0xc>
 8030840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030842:	f7fc ff65 	bl	802d710 <__retarget_lock_release_recursive>
 8030846:	e7dd      	b.n	8030804 <_fflush_r+0xc>

08030848 <__swhatbuf_r>:
 8030848:	b570      	push	{r4, r5, r6, lr}
 803084a:	460c      	mov	r4, r1
 803084c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030850:	2900      	cmp	r1, #0
 8030852:	b096      	sub	sp, #88	; 0x58
 8030854:	4615      	mov	r5, r2
 8030856:	461e      	mov	r6, r3
 8030858:	da0d      	bge.n	8030876 <__swhatbuf_r+0x2e>
 803085a:	89a3      	ldrh	r3, [r4, #12]
 803085c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030860:	f04f 0100 	mov.w	r1, #0
 8030864:	bf0c      	ite	eq
 8030866:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 803086a:	2340      	movne	r3, #64	; 0x40
 803086c:	2000      	movs	r0, #0
 803086e:	6031      	str	r1, [r6, #0]
 8030870:	602b      	str	r3, [r5, #0]
 8030872:	b016      	add	sp, #88	; 0x58
 8030874:	bd70      	pop	{r4, r5, r6, pc}
 8030876:	466a      	mov	r2, sp
 8030878:	f000 f8ec 	bl	8030a54 <_fstat_r>
 803087c:	2800      	cmp	r0, #0
 803087e:	dbec      	blt.n	803085a <__swhatbuf_r+0x12>
 8030880:	9901      	ldr	r1, [sp, #4]
 8030882:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8030886:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 803088a:	4259      	negs	r1, r3
 803088c:	4159      	adcs	r1, r3
 803088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030892:	e7eb      	b.n	803086c <__swhatbuf_r+0x24>

08030894 <__smakebuf_r>:
 8030894:	898b      	ldrh	r3, [r1, #12]
 8030896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030898:	079d      	lsls	r5, r3, #30
 803089a:	4606      	mov	r6, r0
 803089c:	460c      	mov	r4, r1
 803089e:	d507      	bpl.n	80308b0 <__smakebuf_r+0x1c>
 80308a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80308a4:	6023      	str	r3, [r4, #0]
 80308a6:	6123      	str	r3, [r4, #16]
 80308a8:	2301      	movs	r3, #1
 80308aa:	6163      	str	r3, [r4, #20]
 80308ac:	b002      	add	sp, #8
 80308ae:	bd70      	pop	{r4, r5, r6, pc}
 80308b0:	ab01      	add	r3, sp, #4
 80308b2:	466a      	mov	r2, sp
 80308b4:	f7ff ffc8 	bl	8030848 <__swhatbuf_r>
 80308b8:	9900      	ldr	r1, [sp, #0]
 80308ba:	4605      	mov	r5, r0
 80308bc:	4630      	mov	r0, r6
 80308be:	f7fb fbef 	bl	802c0a0 <_malloc_r>
 80308c2:	b948      	cbnz	r0, 80308d8 <__smakebuf_r+0x44>
 80308c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80308c8:	059a      	lsls	r2, r3, #22
 80308ca:	d4ef      	bmi.n	80308ac <__smakebuf_r+0x18>
 80308cc:	f023 0303 	bic.w	r3, r3, #3
 80308d0:	f043 0302 	orr.w	r3, r3, #2
 80308d4:	81a3      	strh	r3, [r4, #12]
 80308d6:	e7e3      	b.n	80308a0 <__smakebuf_r+0xc>
 80308d8:	89a3      	ldrh	r3, [r4, #12]
 80308da:	6020      	str	r0, [r4, #0]
 80308dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80308e0:	81a3      	strh	r3, [r4, #12]
 80308e2:	9b00      	ldr	r3, [sp, #0]
 80308e4:	6163      	str	r3, [r4, #20]
 80308e6:	9b01      	ldr	r3, [sp, #4]
 80308e8:	6120      	str	r0, [r4, #16]
 80308ea:	b15b      	cbz	r3, 8030904 <__smakebuf_r+0x70>
 80308ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80308f0:	4630      	mov	r0, r6
 80308f2:	f000 f8c1 	bl	8030a78 <_isatty_r>
 80308f6:	b128      	cbz	r0, 8030904 <__smakebuf_r+0x70>
 80308f8:	89a3      	ldrh	r3, [r4, #12]
 80308fa:	f023 0303 	bic.w	r3, r3, #3
 80308fe:	f043 0301 	orr.w	r3, r3, #1
 8030902:	81a3      	strh	r3, [r4, #12]
 8030904:	89a3      	ldrh	r3, [r4, #12]
 8030906:	431d      	orrs	r5, r3
 8030908:	81a5      	strh	r5, [r4, #12]
 803090a:	e7cf      	b.n	80308ac <__smakebuf_r+0x18>

0803090c <__sccl>:
 803090c:	b570      	push	{r4, r5, r6, lr}
 803090e:	780b      	ldrb	r3, [r1, #0]
 8030910:	4604      	mov	r4, r0
 8030912:	2b5e      	cmp	r3, #94	; 0x5e
 8030914:	bf0b      	itete	eq
 8030916:	784b      	ldrbeq	r3, [r1, #1]
 8030918:	1c4a      	addne	r2, r1, #1
 803091a:	1c8a      	addeq	r2, r1, #2
 803091c:	2100      	movne	r1, #0
 803091e:	bf08      	it	eq
 8030920:	2101      	moveq	r1, #1
 8030922:	3801      	subs	r0, #1
 8030924:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8030928:	f800 1f01 	strb.w	r1, [r0, #1]!
 803092c:	42a8      	cmp	r0, r5
 803092e:	d1fb      	bne.n	8030928 <__sccl+0x1c>
 8030930:	b90b      	cbnz	r3, 8030936 <__sccl+0x2a>
 8030932:	1e50      	subs	r0, r2, #1
 8030934:	bd70      	pop	{r4, r5, r6, pc}
 8030936:	f081 0101 	eor.w	r1, r1, #1
 803093a:	54e1      	strb	r1, [r4, r3]
 803093c:	4610      	mov	r0, r2
 803093e:	4602      	mov	r2, r0
 8030940:	f812 5b01 	ldrb.w	r5, [r2], #1
 8030944:	2d2d      	cmp	r5, #45	; 0x2d
 8030946:	d005      	beq.n	8030954 <__sccl+0x48>
 8030948:	2d5d      	cmp	r5, #93	; 0x5d
 803094a:	d016      	beq.n	803097a <__sccl+0x6e>
 803094c:	2d00      	cmp	r5, #0
 803094e:	d0f1      	beq.n	8030934 <__sccl+0x28>
 8030950:	462b      	mov	r3, r5
 8030952:	e7f2      	b.n	803093a <__sccl+0x2e>
 8030954:	7846      	ldrb	r6, [r0, #1]
 8030956:	2e5d      	cmp	r6, #93	; 0x5d
 8030958:	d0fa      	beq.n	8030950 <__sccl+0x44>
 803095a:	42b3      	cmp	r3, r6
 803095c:	dcf8      	bgt.n	8030950 <__sccl+0x44>
 803095e:	3002      	adds	r0, #2
 8030960:	461a      	mov	r2, r3
 8030962:	3201      	adds	r2, #1
 8030964:	4296      	cmp	r6, r2
 8030966:	54a1      	strb	r1, [r4, r2]
 8030968:	dcfb      	bgt.n	8030962 <__sccl+0x56>
 803096a:	1af2      	subs	r2, r6, r3
 803096c:	3a01      	subs	r2, #1
 803096e:	1c5d      	adds	r5, r3, #1
 8030970:	42b3      	cmp	r3, r6
 8030972:	bfa8      	it	ge
 8030974:	2200      	movge	r2, #0
 8030976:	18ab      	adds	r3, r5, r2
 8030978:	e7e1      	b.n	803093e <__sccl+0x32>
 803097a:	4610      	mov	r0, r2
 803097c:	e7da      	b.n	8030934 <__sccl+0x28>

0803097e <__submore>:
 803097e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030982:	460c      	mov	r4, r1
 8030984:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803098a:	4299      	cmp	r1, r3
 803098c:	d11d      	bne.n	80309ca <__submore+0x4c>
 803098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8030992:	f7fb fb85 	bl	802c0a0 <_malloc_r>
 8030996:	b918      	cbnz	r0, 80309a0 <__submore+0x22>
 8030998:	f04f 30ff 	mov.w	r0, #4294967295
 803099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80309a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80309a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80309a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80309aa:	6360      	str	r0, [r4, #52]	; 0x34
 80309ac:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80309b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80309b4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80309b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80309bc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80309c0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80309c4:	6020      	str	r0, [r4, #0]
 80309c6:	2000      	movs	r0, #0
 80309c8:	e7e8      	b.n	803099c <__submore+0x1e>
 80309ca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80309cc:	0077      	lsls	r7, r6, #1
 80309ce:	463a      	mov	r2, r7
 80309d0:	f000 fbe7 	bl	80311a2 <_realloc_r>
 80309d4:	4605      	mov	r5, r0
 80309d6:	2800      	cmp	r0, #0
 80309d8:	d0de      	beq.n	8030998 <__submore+0x1a>
 80309da:	eb00 0806 	add.w	r8, r0, r6
 80309de:	4601      	mov	r1, r0
 80309e0:	4632      	mov	r2, r6
 80309e2:	4640      	mov	r0, r8
 80309e4:	f7fc fe9d 	bl	802d722 <memcpy>
 80309e8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80309ec:	f8c4 8000 	str.w	r8, [r4]
 80309f0:	e7e9      	b.n	80309c6 <__submore+0x48>

080309f2 <_raise_r>:
 80309f2:	291f      	cmp	r1, #31
 80309f4:	b538      	push	{r3, r4, r5, lr}
 80309f6:	4604      	mov	r4, r0
 80309f8:	460d      	mov	r5, r1
 80309fa:	d904      	bls.n	8030a06 <_raise_r+0x14>
 80309fc:	2316      	movs	r3, #22
 80309fe:	6003      	str	r3, [r0, #0]
 8030a00:	f04f 30ff 	mov.w	r0, #4294967295
 8030a04:	bd38      	pop	{r3, r4, r5, pc}
 8030a06:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8030a08:	b112      	cbz	r2, 8030a10 <_raise_r+0x1e>
 8030a0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8030a0e:	b94b      	cbnz	r3, 8030a24 <_raise_r+0x32>
 8030a10:	4620      	mov	r0, r4
 8030a12:	f000 f853 	bl	8030abc <_getpid_r>
 8030a16:	462a      	mov	r2, r5
 8030a18:	4601      	mov	r1, r0
 8030a1a:	4620      	mov	r0, r4
 8030a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8030a20:	f000 b83a 	b.w	8030a98 <_kill_r>
 8030a24:	2b01      	cmp	r3, #1
 8030a26:	d00a      	beq.n	8030a3e <_raise_r+0x4c>
 8030a28:	1c59      	adds	r1, r3, #1
 8030a2a:	d103      	bne.n	8030a34 <_raise_r+0x42>
 8030a2c:	2316      	movs	r3, #22
 8030a2e:	6003      	str	r3, [r0, #0]
 8030a30:	2001      	movs	r0, #1
 8030a32:	e7e7      	b.n	8030a04 <_raise_r+0x12>
 8030a34:	2400      	movs	r4, #0
 8030a36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8030a3a:	4628      	mov	r0, r5
 8030a3c:	4798      	blx	r3
 8030a3e:	2000      	movs	r0, #0
 8030a40:	e7e0      	b.n	8030a04 <_raise_r+0x12>
	...

08030a44 <raise>:
 8030a44:	4b02      	ldr	r3, [pc, #8]	; (8030a50 <raise+0xc>)
 8030a46:	4601      	mov	r1, r0
 8030a48:	6818      	ldr	r0, [r3, #0]
 8030a4a:	f7ff bfd2 	b.w	80309f2 <_raise_r>
 8030a4e:	bf00      	nop
 8030a50:	20000188 	.word	0x20000188

08030a54 <_fstat_r>:
 8030a54:	b538      	push	{r3, r4, r5, lr}
 8030a56:	4d07      	ldr	r5, [pc, #28]	; (8030a74 <_fstat_r+0x20>)
 8030a58:	2300      	movs	r3, #0
 8030a5a:	4604      	mov	r4, r0
 8030a5c:	4608      	mov	r0, r1
 8030a5e:	4611      	mov	r1, r2
 8030a60:	602b      	str	r3, [r5, #0]
 8030a62:	f7e2 f830 	bl	8012ac6 <_fstat>
 8030a66:	1c43      	adds	r3, r0, #1
 8030a68:	d102      	bne.n	8030a70 <_fstat_r+0x1c>
 8030a6a:	682b      	ldr	r3, [r5, #0]
 8030a6c:	b103      	cbz	r3, 8030a70 <_fstat_r+0x1c>
 8030a6e:	6023      	str	r3, [r4, #0]
 8030a70:	bd38      	pop	{r3, r4, r5, pc}
 8030a72:	bf00      	nop
 8030a74:	2000dad8 	.word	0x2000dad8

08030a78 <_isatty_r>:
 8030a78:	b538      	push	{r3, r4, r5, lr}
 8030a7a:	4d06      	ldr	r5, [pc, #24]	; (8030a94 <_isatty_r+0x1c>)
 8030a7c:	2300      	movs	r3, #0
 8030a7e:	4604      	mov	r4, r0
 8030a80:	4608      	mov	r0, r1
 8030a82:	602b      	str	r3, [r5, #0]
 8030a84:	f7e2 f82f 	bl	8012ae6 <_isatty>
 8030a88:	1c43      	adds	r3, r0, #1
 8030a8a:	d102      	bne.n	8030a92 <_isatty_r+0x1a>
 8030a8c:	682b      	ldr	r3, [r5, #0]
 8030a8e:	b103      	cbz	r3, 8030a92 <_isatty_r+0x1a>
 8030a90:	6023      	str	r3, [r4, #0]
 8030a92:	bd38      	pop	{r3, r4, r5, pc}
 8030a94:	2000dad8 	.word	0x2000dad8

08030a98 <_kill_r>:
 8030a98:	b538      	push	{r3, r4, r5, lr}
 8030a9a:	4d07      	ldr	r5, [pc, #28]	; (8030ab8 <_kill_r+0x20>)
 8030a9c:	2300      	movs	r3, #0
 8030a9e:	4604      	mov	r4, r0
 8030aa0:	4608      	mov	r0, r1
 8030aa2:	4611      	mov	r1, r2
 8030aa4:	602b      	str	r3, [r5, #0]
 8030aa6:	f7e1 ffaf 	bl	8012a08 <_kill>
 8030aaa:	1c43      	adds	r3, r0, #1
 8030aac:	d102      	bne.n	8030ab4 <_kill_r+0x1c>
 8030aae:	682b      	ldr	r3, [r5, #0]
 8030ab0:	b103      	cbz	r3, 8030ab4 <_kill_r+0x1c>
 8030ab2:	6023      	str	r3, [r4, #0]
 8030ab4:	bd38      	pop	{r3, r4, r5, pc}
 8030ab6:	bf00      	nop
 8030ab8:	2000dad8 	.word	0x2000dad8

08030abc <_getpid_r>:
 8030abc:	f7e1 bf9c 	b.w	80129f8 <_getpid>

08030ac0 <nan>:
 8030ac0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8030ac8 <nan+0x8>
 8030ac4:	4770      	bx	lr
 8030ac6:	bf00      	nop
 8030ac8:	00000000 	.word	0x00000000
 8030acc:	7ff80000 	.word	0x7ff80000

08030ad0 <rshift>:
 8030ad0:	6903      	ldr	r3, [r0, #16]
 8030ad2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8030ad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8030ada:	ea4f 1261 	mov.w	r2, r1, asr #5
 8030ade:	f100 0414 	add.w	r4, r0, #20
 8030ae2:	dd45      	ble.n	8030b70 <rshift+0xa0>
 8030ae4:	f011 011f 	ands.w	r1, r1, #31
 8030ae8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8030aec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8030af0:	d10c      	bne.n	8030b0c <rshift+0x3c>
 8030af2:	f100 0710 	add.w	r7, r0, #16
 8030af6:	4629      	mov	r1, r5
 8030af8:	42b1      	cmp	r1, r6
 8030afa:	d334      	bcc.n	8030b66 <rshift+0x96>
 8030afc:	1a9b      	subs	r3, r3, r2
 8030afe:	009b      	lsls	r3, r3, #2
 8030b00:	1eea      	subs	r2, r5, #3
 8030b02:	4296      	cmp	r6, r2
 8030b04:	bf38      	it	cc
 8030b06:	2300      	movcc	r3, #0
 8030b08:	4423      	add	r3, r4
 8030b0a:	e015      	b.n	8030b38 <rshift+0x68>
 8030b0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8030b10:	f1c1 0820 	rsb	r8, r1, #32
 8030b14:	40cf      	lsrs	r7, r1
 8030b16:	f105 0e04 	add.w	lr, r5, #4
 8030b1a:	46a1      	mov	r9, r4
 8030b1c:	4576      	cmp	r6, lr
 8030b1e:	46f4      	mov	ip, lr
 8030b20:	d815      	bhi.n	8030b4e <rshift+0x7e>
 8030b22:	1a9a      	subs	r2, r3, r2
 8030b24:	0092      	lsls	r2, r2, #2
 8030b26:	3a04      	subs	r2, #4
 8030b28:	3501      	adds	r5, #1
 8030b2a:	42ae      	cmp	r6, r5
 8030b2c:	bf38      	it	cc
 8030b2e:	2200      	movcc	r2, #0
 8030b30:	18a3      	adds	r3, r4, r2
 8030b32:	50a7      	str	r7, [r4, r2]
 8030b34:	b107      	cbz	r7, 8030b38 <rshift+0x68>
 8030b36:	3304      	adds	r3, #4
 8030b38:	1b1a      	subs	r2, r3, r4
 8030b3a:	42a3      	cmp	r3, r4
 8030b3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8030b40:	bf08      	it	eq
 8030b42:	2300      	moveq	r3, #0
 8030b44:	6102      	str	r2, [r0, #16]
 8030b46:	bf08      	it	eq
 8030b48:	6143      	streq	r3, [r0, #20]
 8030b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8030b4e:	f8dc c000 	ldr.w	ip, [ip]
 8030b52:	fa0c fc08 	lsl.w	ip, ip, r8
 8030b56:	ea4c 0707 	orr.w	r7, ip, r7
 8030b5a:	f849 7b04 	str.w	r7, [r9], #4
 8030b5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8030b62:	40cf      	lsrs	r7, r1
 8030b64:	e7da      	b.n	8030b1c <rshift+0x4c>
 8030b66:	f851 cb04 	ldr.w	ip, [r1], #4
 8030b6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8030b6e:	e7c3      	b.n	8030af8 <rshift+0x28>
 8030b70:	4623      	mov	r3, r4
 8030b72:	e7e1      	b.n	8030b38 <rshift+0x68>

08030b74 <__hexdig_fun>:
 8030b74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8030b78:	2b09      	cmp	r3, #9
 8030b7a:	d802      	bhi.n	8030b82 <__hexdig_fun+0xe>
 8030b7c:	3820      	subs	r0, #32
 8030b7e:	b2c0      	uxtb	r0, r0
 8030b80:	4770      	bx	lr
 8030b82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8030b86:	2b05      	cmp	r3, #5
 8030b88:	d801      	bhi.n	8030b8e <__hexdig_fun+0x1a>
 8030b8a:	3847      	subs	r0, #71	; 0x47
 8030b8c:	e7f7      	b.n	8030b7e <__hexdig_fun+0xa>
 8030b8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8030b92:	2b05      	cmp	r3, #5
 8030b94:	d801      	bhi.n	8030b9a <__hexdig_fun+0x26>
 8030b96:	3827      	subs	r0, #39	; 0x27
 8030b98:	e7f1      	b.n	8030b7e <__hexdig_fun+0xa>
 8030b9a:	2000      	movs	r0, #0
 8030b9c:	4770      	bx	lr
	...

08030ba0 <__gethex>:
 8030ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030ba4:	4617      	mov	r7, r2
 8030ba6:	680a      	ldr	r2, [r1, #0]
 8030ba8:	b085      	sub	sp, #20
 8030baa:	f102 0b02 	add.w	fp, r2, #2
 8030bae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8030bb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8030bb6:	4681      	mov	r9, r0
 8030bb8:	468a      	mov	sl, r1
 8030bba:	9302      	str	r3, [sp, #8]
 8030bbc:	32fe      	adds	r2, #254	; 0xfe
 8030bbe:	eb02 030b 	add.w	r3, r2, fp
 8030bc2:	46d8      	mov	r8, fp
 8030bc4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8030bc8:	9301      	str	r3, [sp, #4]
 8030bca:	2830      	cmp	r0, #48	; 0x30
 8030bcc:	d0f7      	beq.n	8030bbe <__gethex+0x1e>
 8030bce:	f7ff ffd1 	bl	8030b74 <__hexdig_fun>
 8030bd2:	4604      	mov	r4, r0
 8030bd4:	2800      	cmp	r0, #0
 8030bd6:	d138      	bne.n	8030c4a <__gethex+0xaa>
 8030bd8:	49a7      	ldr	r1, [pc, #668]	; (8030e78 <__gethex+0x2d8>)
 8030bda:	2201      	movs	r2, #1
 8030bdc:	4640      	mov	r0, r8
 8030bde:	f7fc fc13 	bl	802d408 <strncmp>
 8030be2:	4606      	mov	r6, r0
 8030be4:	2800      	cmp	r0, #0
 8030be6:	d169      	bne.n	8030cbc <__gethex+0x11c>
 8030be8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8030bec:	465d      	mov	r5, fp
 8030bee:	f7ff ffc1 	bl	8030b74 <__hexdig_fun>
 8030bf2:	2800      	cmp	r0, #0
 8030bf4:	d064      	beq.n	8030cc0 <__gethex+0x120>
 8030bf6:	465a      	mov	r2, fp
 8030bf8:	7810      	ldrb	r0, [r2, #0]
 8030bfa:	2830      	cmp	r0, #48	; 0x30
 8030bfc:	4690      	mov	r8, r2
 8030bfe:	f102 0201 	add.w	r2, r2, #1
 8030c02:	d0f9      	beq.n	8030bf8 <__gethex+0x58>
 8030c04:	f7ff ffb6 	bl	8030b74 <__hexdig_fun>
 8030c08:	2301      	movs	r3, #1
 8030c0a:	fab0 f480 	clz	r4, r0
 8030c0e:	0964      	lsrs	r4, r4, #5
 8030c10:	465e      	mov	r6, fp
 8030c12:	9301      	str	r3, [sp, #4]
 8030c14:	4642      	mov	r2, r8
 8030c16:	4615      	mov	r5, r2
 8030c18:	3201      	adds	r2, #1
 8030c1a:	7828      	ldrb	r0, [r5, #0]
 8030c1c:	f7ff ffaa 	bl	8030b74 <__hexdig_fun>
 8030c20:	2800      	cmp	r0, #0
 8030c22:	d1f8      	bne.n	8030c16 <__gethex+0x76>
 8030c24:	4994      	ldr	r1, [pc, #592]	; (8030e78 <__gethex+0x2d8>)
 8030c26:	2201      	movs	r2, #1
 8030c28:	4628      	mov	r0, r5
 8030c2a:	f7fc fbed 	bl	802d408 <strncmp>
 8030c2e:	b978      	cbnz	r0, 8030c50 <__gethex+0xb0>
 8030c30:	b946      	cbnz	r6, 8030c44 <__gethex+0xa4>
 8030c32:	1c6e      	adds	r6, r5, #1
 8030c34:	4632      	mov	r2, r6
 8030c36:	4615      	mov	r5, r2
 8030c38:	3201      	adds	r2, #1
 8030c3a:	7828      	ldrb	r0, [r5, #0]
 8030c3c:	f7ff ff9a 	bl	8030b74 <__hexdig_fun>
 8030c40:	2800      	cmp	r0, #0
 8030c42:	d1f8      	bne.n	8030c36 <__gethex+0x96>
 8030c44:	1b73      	subs	r3, r6, r5
 8030c46:	009e      	lsls	r6, r3, #2
 8030c48:	e004      	b.n	8030c54 <__gethex+0xb4>
 8030c4a:	2400      	movs	r4, #0
 8030c4c:	4626      	mov	r6, r4
 8030c4e:	e7e1      	b.n	8030c14 <__gethex+0x74>
 8030c50:	2e00      	cmp	r6, #0
 8030c52:	d1f7      	bne.n	8030c44 <__gethex+0xa4>
 8030c54:	782b      	ldrb	r3, [r5, #0]
 8030c56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8030c5a:	2b50      	cmp	r3, #80	; 0x50
 8030c5c:	d13d      	bne.n	8030cda <__gethex+0x13a>
 8030c5e:	786b      	ldrb	r3, [r5, #1]
 8030c60:	2b2b      	cmp	r3, #43	; 0x2b
 8030c62:	d02f      	beq.n	8030cc4 <__gethex+0x124>
 8030c64:	2b2d      	cmp	r3, #45	; 0x2d
 8030c66:	d031      	beq.n	8030ccc <__gethex+0x12c>
 8030c68:	1c69      	adds	r1, r5, #1
 8030c6a:	f04f 0b00 	mov.w	fp, #0
 8030c6e:	7808      	ldrb	r0, [r1, #0]
 8030c70:	f7ff ff80 	bl	8030b74 <__hexdig_fun>
 8030c74:	1e42      	subs	r2, r0, #1
 8030c76:	b2d2      	uxtb	r2, r2
 8030c78:	2a18      	cmp	r2, #24
 8030c7a:	d82e      	bhi.n	8030cda <__gethex+0x13a>
 8030c7c:	f1a0 0210 	sub.w	r2, r0, #16
 8030c80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8030c84:	f7ff ff76 	bl	8030b74 <__hexdig_fun>
 8030c88:	f100 3cff 	add.w	ip, r0, #4294967295
 8030c8c:	fa5f fc8c 	uxtb.w	ip, ip
 8030c90:	f1bc 0f18 	cmp.w	ip, #24
 8030c94:	d91d      	bls.n	8030cd2 <__gethex+0x132>
 8030c96:	f1bb 0f00 	cmp.w	fp, #0
 8030c9a:	d000      	beq.n	8030c9e <__gethex+0xfe>
 8030c9c:	4252      	negs	r2, r2
 8030c9e:	4416      	add	r6, r2
 8030ca0:	f8ca 1000 	str.w	r1, [sl]
 8030ca4:	b1dc      	cbz	r4, 8030cde <__gethex+0x13e>
 8030ca6:	9b01      	ldr	r3, [sp, #4]
 8030ca8:	2b00      	cmp	r3, #0
 8030caa:	bf14      	ite	ne
 8030cac:	f04f 0800 	movne.w	r8, #0
 8030cb0:	f04f 0806 	moveq.w	r8, #6
 8030cb4:	4640      	mov	r0, r8
 8030cb6:	b005      	add	sp, #20
 8030cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030cbc:	4645      	mov	r5, r8
 8030cbe:	4626      	mov	r6, r4
 8030cc0:	2401      	movs	r4, #1
 8030cc2:	e7c7      	b.n	8030c54 <__gethex+0xb4>
 8030cc4:	f04f 0b00 	mov.w	fp, #0
 8030cc8:	1ca9      	adds	r1, r5, #2
 8030cca:	e7d0      	b.n	8030c6e <__gethex+0xce>
 8030ccc:	f04f 0b01 	mov.w	fp, #1
 8030cd0:	e7fa      	b.n	8030cc8 <__gethex+0x128>
 8030cd2:	230a      	movs	r3, #10
 8030cd4:	fb03 0002 	mla	r0, r3, r2, r0
 8030cd8:	e7d0      	b.n	8030c7c <__gethex+0xdc>
 8030cda:	4629      	mov	r1, r5
 8030cdc:	e7e0      	b.n	8030ca0 <__gethex+0x100>
 8030cde:	eba5 0308 	sub.w	r3, r5, r8
 8030ce2:	3b01      	subs	r3, #1
 8030ce4:	4621      	mov	r1, r4
 8030ce6:	2b07      	cmp	r3, #7
 8030ce8:	dc0a      	bgt.n	8030d00 <__gethex+0x160>
 8030cea:	4648      	mov	r0, r9
 8030cec:	f7fd fbfe 	bl	802e4ec <_Balloc>
 8030cf0:	4604      	mov	r4, r0
 8030cf2:	b940      	cbnz	r0, 8030d06 <__gethex+0x166>
 8030cf4:	4b61      	ldr	r3, [pc, #388]	; (8030e7c <__gethex+0x2dc>)
 8030cf6:	4602      	mov	r2, r0
 8030cf8:	21e4      	movs	r1, #228	; 0xe4
 8030cfa:	4861      	ldr	r0, [pc, #388]	; (8030e80 <__gethex+0x2e0>)
 8030cfc:	f7fb f96c 	bl	802bfd8 <__assert_func>
 8030d00:	3101      	adds	r1, #1
 8030d02:	105b      	asrs	r3, r3, #1
 8030d04:	e7ef      	b.n	8030ce6 <__gethex+0x146>
 8030d06:	f100 0a14 	add.w	sl, r0, #20
 8030d0a:	2300      	movs	r3, #0
 8030d0c:	495a      	ldr	r1, [pc, #360]	; (8030e78 <__gethex+0x2d8>)
 8030d0e:	f8cd a004 	str.w	sl, [sp, #4]
 8030d12:	469b      	mov	fp, r3
 8030d14:	45a8      	cmp	r8, r5
 8030d16:	d342      	bcc.n	8030d9e <__gethex+0x1fe>
 8030d18:	9801      	ldr	r0, [sp, #4]
 8030d1a:	f840 bb04 	str.w	fp, [r0], #4
 8030d1e:	eba0 000a 	sub.w	r0, r0, sl
 8030d22:	1080      	asrs	r0, r0, #2
 8030d24:	6120      	str	r0, [r4, #16]
 8030d26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8030d2a:	4658      	mov	r0, fp
 8030d2c:	f7fd fcd0 	bl	802e6d0 <__hi0bits>
 8030d30:	683d      	ldr	r5, [r7, #0]
 8030d32:	eba8 0000 	sub.w	r0, r8, r0
 8030d36:	42a8      	cmp	r0, r5
 8030d38:	dd59      	ble.n	8030dee <__gethex+0x24e>
 8030d3a:	eba0 0805 	sub.w	r8, r0, r5
 8030d3e:	4641      	mov	r1, r8
 8030d40:	4620      	mov	r0, r4
 8030d42:	f7fe f85f 	bl	802ee04 <__any_on>
 8030d46:	4683      	mov	fp, r0
 8030d48:	b1b8      	cbz	r0, 8030d7a <__gethex+0x1da>
 8030d4a:	f108 33ff 	add.w	r3, r8, #4294967295
 8030d4e:	1159      	asrs	r1, r3, #5
 8030d50:	f003 021f 	and.w	r2, r3, #31
 8030d54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8030d58:	f04f 0b01 	mov.w	fp, #1
 8030d5c:	fa0b f202 	lsl.w	r2, fp, r2
 8030d60:	420a      	tst	r2, r1
 8030d62:	d00a      	beq.n	8030d7a <__gethex+0x1da>
 8030d64:	455b      	cmp	r3, fp
 8030d66:	dd06      	ble.n	8030d76 <__gethex+0x1d6>
 8030d68:	f1a8 0102 	sub.w	r1, r8, #2
 8030d6c:	4620      	mov	r0, r4
 8030d6e:	f7fe f849 	bl	802ee04 <__any_on>
 8030d72:	2800      	cmp	r0, #0
 8030d74:	d138      	bne.n	8030de8 <__gethex+0x248>
 8030d76:	f04f 0b02 	mov.w	fp, #2
 8030d7a:	4641      	mov	r1, r8
 8030d7c:	4620      	mov	r0, r4
 8030d7e:	f7ff fea7 	bl	8030ad0 <rshift>
 8030d82:	4446      	add	r6, r8
 8030d84:	68bb      	ldr	r3, [r7, #8]
 8030d86:	42b3      	cmp	r3, r6
 8030d88:	da41      	bge.n	8030e0e <__gethex+0x26e>
 8030d8a:	4621      	mov	r1, r4
 8030d8c:	4648      	mov	r0, r9
 8030d8e:	f7fd fbed 	bl	802e56c <_Bfree>
 8030d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8030d94:	2300      	movs	r3, #0
 8030d96:	6013      	str	r3, [r2, #0]
 8030d98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8030d9c:	e78a      	b.n	8030cb4 <__gethex+0x114>
 8030d9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8030da2:	2a2e      	cmp	r2, #46	; 0x2e
 8030da4:	d014      	beq.n	8030dd0 <__gethex+0x230>
 8030da6:	2b20      	cmp	r3, #32
 8030da8:	d106      	bne.n	8030db8 <__gethex+0x218>
 8030daa:	9b01      	ldr	r3, [sp, #4]
 8030dac:	f843 bb04 	str.w	fp, [r3], #4
 8030db0:	f04f 0b00 	mov.w	fp, #0
 8030db4:	9301      	str	r3, [sp, #4]
 8030db6:	465b      	mov	r3, fp
 8030db8:	7828      	ldrb	r0, [r5, #0]
 8030dba:	9303      	str	r3, [sp, #12]
 8030dbc:	f7ff feda 	bl	8030b74 <__hexdig_fun>
 8030dc0:	9b03      	ldr	r3, [sp, #12]
 8030dc2:	f000 000f 	and.w	r0, r0, #15
 8030dc6:	4098      	lsls	r0, r3
 8030dc8:	ea4b 0b00 	orr.w	fp, fp, r0
 8030dcc:	3304      	adds	r3, #4
 8030dce:	e7a1      	b.n	8030d14 <__gethex+0x174>
 8030dd0:	45a8      	cmp	r8, r5
 8030dd2:	d8e8      	bhi.n	8030da6 <__gethex+0x206>
 8030dd4:	2201      	movs	r2, #1
 8030dd6:	4628      	mov	r0, r5
 8030dd8:	9303      	str	r3, [sp, #12]
 8030dda:	f7fc fb15 	bl	802d408 <strncmp>
 8030dde:	4926      	ldr	r1, [pc, #152]	; (8030e78 <__gethex+0x2d8>)
 8030de0:	9b03      	ldr	r3, [sp, #12]
 8030de2:	2800      	cmp	r0, #0
 8030de4:	d1df      	bne.n	8030da6 <__gethex+0x206>
 8030de6:	e795      	b.n	8030d14 <__gethex+0x174>
 8030de8:	f04f 0b03 	mov.w	fp, #3
 8030dec:	e7c5      	b.n	8030d7a <__gethex+0x1da>
 8030dee:	da0b      	bge.n	8030e08 <__gethex+0x268>
 8030df0:	eba5 0800 	sub.w	r8, r5, r0
 8030df4:	4621      	mov	r1, r4
 8030df6:	4642      	mov	r2, r8
 8030df8:	4648      	mov	r0, r9
 8030dfa:	f7fd fdd1 	bl	802e9a0 <__lshift>
 8030dfe:	eba6 0608 	sub.w	r6, r6, r8
 8030e02:	4604      	mov	r4, r0
 8030e04:	f100 0a14 	add.w	sl, r0, #20
 8030e08:	f04f 0b00 	mov.w	fp, #0
 8030e0c:	e7ba      	b.n	8030d84 <__gethex+0x1e4>
 8030e0e:	687b      	ldr	r3, [r7, #4]
 8030e10:	42b3      	cmp	r3, r6
 8030e12:	dd73      	ble.n	8030efc <__gethex+0x35c>
 8030e14:	1b9e      	subs	r6, r3, r6
 8030e16:	42b5      	cmp	r5, r6
 8030e18:	dc34      	bgt.n	8030e84 <__gethex+0x2e4>
 8030e1a:	68fb      	ldr	r3, [r7, #12]
 8030e1c:	2b02      	cmp	r3, #2
 8030e1e:	d023      	beq.n	8030e68 <__gethex+0x2c8>
 8030e20:	2b03      	cmp	r3, #3
 8030e22:	d025      	beq.n	8030e70 <__gethex+0x2d0>
 8030e24:	2b01      	cmp	r3, #1
 8030e26:	d115      	bne.n	8030e54 <__gethex+0x2b4>
 8030e28:	42b5      	cmp	r5, r6
 8030e2a:	d113      	bne.n	8030e54 <__gethex+0x2b4>
 8030e2c:	2d01      	cmp	r5, #1
 8030e2e:	d10b      	bne.n	8030e48 <__gethex+0x2a8>
 8030e30:	9a02      	ldr	r2, [sp, #8]
 8030e32:	687b      	ldr	r3, [r7, #4]
 8030e34:	6013      	str	r3, [r2, #0]
 8030e36:	2301      	movs	r3, #1
 8030e38:	6123      	str	r3, [r4, #16]
 8030e3a:	f8ca 3000 	str.w	r3, [sl]
 8030e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8030e40:	f04f 0862 	mov.w	r8, #98	; 0x62
 8030e44:	601c      	str	r4, [r3, #0]
 8030e46:	e735      	b.n	8030cb4 <__gethex+0x114>
 8030e48:	1e69      	subs	r1, r5, #1
 8030e4a:	4620      	mov	r0, r4
 8030e4c:	f7fd ffda 	bl	802ee04 <__any_on>
 8030e50:	2800      	cmp	r0, #0
 8030e52:	d1ed      	bne.n	8030e30 <__gethex+0x290>
 8030e54:	4621      	mov	r1, r4
 8030e56:	4648      	mov	r0, r9
 8030e58:	f7fd fb88 	bl	802e56c <_Bfree>
 8030e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8030e5e:	2300      	movs	r3, #0
 8030e60:	6013      	str	r3, [r2, #0]
 8030e62:	f04f 0850 	mov.w	r8, #80	; 0x50
 8030e66:	e725      	b.n	8030cb4 <__gethex+0x114>
 8030e68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8030e6a:	2b00      	cmp	r3, #0
 8030e6c:	d1f2      	bne.n	8030e54 <__gethex+0x2b4>
 8030e6e:	e7df      	b.n	8030e30 <__gethex+0x290>
 8030e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8030e72:	2b00      	cmp	r3, #0
 8030e74:	d1dc      	bne.n	8030e30 <__gethex+0x290>
 8030e76:	e7ed      	b.n	8030e54 <__gethex+0x2b4>
 8030e78:	080346a4 	.word	0x080346a4
 8030e7c:	08034539 	.word	0x08034539
 8030e80:	0803482d 	.word	0x0803482d
 8030e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8030e88:	f1bb 0f00 	cmp.w	fp, #0
 8030e8c:	d133      	bne.n	8030ef6 <__gethex+0x356>
 8030e8e:	f1b8 0f00 	cmp.w	r8, #0
 8030e92:	d004      	beq.n	8030e9e <__gethex+0x2fe>
 8030e94:	4641      	mov	r1, r8
 8030e96:	4620      	mov	r0, r4
 8030e98:	f7fd ffb4 	bl	802ee04 <__any_on>
 8030e9c:	4683      	mov	fp, r0
 8030e9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8030ea2:	2301      	movs	r3, #1
 8030ea4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8030ea8:	f008 081f 	and.w	r8, r8, #31
 8030eac:	fa03 f308 	lsl.w	r3, r3, r8
 8030eb0:	4213      	tst	r3, r2
 8030eb2:	4631      	mov	r1, r6
 8030eb4:	4620      	mov	r0, r4
 8030eb6:	bf18      	it	ne
 8030eb8:	f04b 0b02 	orrne.w	fp, fp, #2
 8030ebc:	1bad      	subs	r5, r5, r6
 8030ebe:	f7ff fe07 	bl	8030ad0 <rshift>
 8030ec2:	687e      	ldr	r6, [r7, #4]
 8030ec4:	f04f 0802 	mov.w	r8, #2
 8030ec8:	f1bb 0f00 	cmp.w	fp, #0
 8030ecc:	d04a      	beq.n	8030f64 <__gethex+0x3c4>
 8030ece:	68fb      	ldr	r3, [r7, #12]
 8030ed0:	2b02      	cmp	r3, #2
 8030ed2:	d016      	beq.n	8030f02 <__gethex+0x362>
 8030ed4:	2b03      	cmp	r3, #3
 8030ed6:	d018      	beq.n	8030f0a <__gethex+0x36a>
 8030ed8:	2b01      	cmp	r3, #1
 8030eda:	d109      	bne.n	8030ef0 <__gethex+0x350>
 8030edc:	f01b 0f02 	tst.w	fp, #2
 8030ee0:	d006      	beq.n	8030ef0 <__gethex+0x350>
 8030ee2:	f8da 3000 	ldr.w	r3, [sl]
 8030ee6:	ea4b 0b03 	orr.w	fp, fp, r3
 8030eea:	f01b 0f01 	tst.w	fp, #1
 8030eee:	d10f      	bne.n	8030f10 <__gethex+0x370>
 8030ef0:	f048 0810 	orr.w	r8, r8, #16
 8030ef4:	e036      	b.n	8030f64 <__gethex+0x3c4>
 8030ef6:	f04f 0b01 	mov.w	fp, #1
 8030efa:	e7d0      	b.n	8030e9e <__gethex+0x2fe>
 8030efc:	f04f 0801 	mov.w	r8, #1
 8030f00:	e7e2      	b.n	8030ec8 <__gethex+0x328>
 8030f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8030f04:	f1c3 0301 	rsb	r3, r3, #1
 8030f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8030f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8030f0c:	2b00      	cmp	r3, #0
 8030f0e:	d0ef      	beq.n	8030ef0 <__gethex+0x350>
 8030f10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8030f14:	f104 0214 	add.w	r2, r4, #20
 8030f18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8030f1c:	9301      	str	r3, [sp, #4]
 8030f1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8030f22:	2300      	movs	r3, #0
 8030f24:	4694      	mov	ip, r2
 8030f26:	f852 1b04 	ldr.w	r1, [r2], #4
 8030f2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8030f2e:	d01e      	beq.n	8030f6e <__gethex+0x3ce>
 8030f30:	3101      	adds	r1, #1
 8030f32:	f8cc 1000 	str.w	r1, [ip]
 8030f36:	f1b8 0f02 	cmp.w	r8, #2
 8030f3a:	f104 0214 	add.w	r2, r4, #20
 8030f3e:	d13d      	bne.n	8030fbc <__gethex+0x41c>
 8030f40:	683b      	ldr	r3, [r7, #0]
 8030f42:	3b01      	subs	r3, #1
 8030f44:	42ab      	cmp	r3, r5
 8030f46:	d10b      	bne.n	8030f60 <__gethex+0x3c0>
 8030f48:	1169      	asrs	r1, r5, #5
 8030f4a:	2301      	movs	r3, #1
 8030f4c:	f005 051f 	and.w	r5, r5, #31
 8030f50:	fa03 f505 	lsl.w	r5, r3, r5
 8030f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8030f58:	421d      	tst	r5, r3
 8030f5a:	bf18      	it	ne
 8030f5c:	f04f 0801 	movne.w	r8, #1
 8030f60:	f048 0820 	orr.w	r8, r8, #32
 8030f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8030f66:	601c      	str	r4, [r3, #0]
 8030f68:	9b02      	ldr	r3, [sp, #8]
 8030f6a:	601e      	str	r6, [r3, #0]
 8030f6c:	e6a2      	b.n	8030cb4 <__gethex+0x114>
 8030f6e:	4290      	cmp	r0, r2
 8030f70:	f842 3c04 	str.w	r3, [r2, #-4]
 8030f74:	d8d6      	bhi.n	8030f24 <__gethex+0x384>
 8030f76:	68a2      	ldr	r2, [r4, #8]
 8030f78:	4593      	cmp	fp, r2
 8030f7a:	db17      	blt.n	8030fac <__gethex+0x40c>
 8030f7c:	6861      	ldr	r1, [r4, #4]
 8030f7e:	4648      	mov	r0, r9
 8030f80:	3101      	adds	r1, #1
 8030f82:	f7fd fab3 	bl	802e4ec <_Balloc>
 8030f86:	4682      	mov	sl, r0
 8030f88:	b918      	cbnz	r0, 8030f92 <__gethex+0x3f2>
 8030f8a:	4b1b      	ldr	r3, [pc, #108]	; (8030ff8 <__gethex+0x458>)
 8030f8c:	4602      	mov	r2, r0
 8030f8e:	2184      	movs	r1, #132	; 0x84
 8030f90:	e6b3      	b.n	8030cfa <__gethex+0x15a>
 8030f92:	6922      	ldr	r2, [r4, #16]
 8030f94:	3202      	adds	r2, #2
 8030f96:	f104 010c 	add.w	r1, r4, #12
 8030f9a:	0092      	lsls	r2, r2, #2
 8030f9c:	300c      	adds	r0, #12
 8030f9e:	f7fc fbc0 	bl	802d722 <memcpy>
 8030fa2:	4621      	mov	r1, r4
 8030fa4:	4648      	mov	r0, r9
 8030fa6:	f7fd fae1 	bl	802e56c <_Bfree>
 8030faa:	4654      	mov	r4, sl
 8030fac:	6922      	ldr	r2, [r4, #16]
 8030fae:	1c51      	adds	r1, r2, #1
 8030fb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8030fb4:	6121      	str	r1, [r4, #16]
 8030fb6:	2101      	movs	r1, #1
 8030fb8:	6151      	str	r1, [r2, #20]
 8030fba:	e7bc      	b.n	8030f36 <__gethex+0x396>
 8030fbc:	6921      	ldr	r1, [r4, #16]
 8030fbe:	4559      	cmp	r1, fp
 8030fc0:	dd0b      	ble.n	8030fda <__gethex+0x43a>
 8030fc2:	2101      	movs	r1, #1
 8030fc4:	4620      	mov	r0, r4
 8030fc6:	f7ff fd83 	bl	8030ad0 <rshift>
 8030fca:	68bb      	ldr	r3, [r7, #8]
 8030fcc:	3601      	adds	r6, #1
 8030fce:	42b3      	cmp	r3, r6
 8030fd0:	f6ff aedb 	blt.w	8030d8a <__gethex+0x1ea>
 8030fd4:	f04f 0801 	mov.w	r8, #1
 8030fd8:	e7c2      	b.n	8030f60 <__gethex+0x3c0>
 8030fda:	f015 051f 	ands.w	r5, r5, #31
 8030fde:	d0f9      	beq.n	8030fd4 <__gethex+0x434>
 8030fe0:	9b01      	ldr	r3, [sp, #4]
 8030fe2:	441a      	add	r2, r3
 8030fe4:	f1c5 0520 	rsb	r5, r5, #32
 8030fe8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8030fec:	f7fd fb70 	bl	802e6d0 <__hi0bits>
 8030ff0:	42a8      	cmp	r0, r5
 8030ff2:	dbe6      	blt.n	8030fc2 <__gethex+0x422>
 8030ff4:	e7ee      	b.n	8030fd4 <__gethex+0x434>
 8030ff6:	bf00      	nop
 8030ff8:	08034539 	.word	0x08034539

08030ffc <L_shift>:
 8030ffc:	f1c2 0208 	rsb	r2, r2, #8
 8031000:	0092      	lsls	r2, r2, #2
 8031002:	b570      	push	{r4, r5, r6, lr}
 8031004:	f1c2 0620 	rsb	r6, r2, #32
 8031008:	6843      	ldr	r3, [r0, #4]
 803100a:	6804      	ldr	r4, [r0, #0]
 803100c:	fa03 f506 	lsl.w	r5, r3, r6
 8031010:	432c      	orrs	r4, r5
 8031012:	40d3      	lsrs	r3, r2
 8031014:	6004      	str	r4, [r0, #0]
 8031016:	f840 3f04 	str.w	r3, [r0, #4]!
 803101a:	4288      	cmp	r0, r1
 803101c:	d3f4      	bcc.n	8031008 <L_shift+0xc>
 803101e:	bd70      	pop	{r4, r5, r6, pc}

08031020 <__match>:
 8031020:	b530      	push	{r4, r5, lr}
 8031022:	6803      	ldr	r3, [r0, #0]
 8031024:	3301      	adds	r3, #1
 8031026:	f811 4b01 	ldrb.w	r4, [r1], #1
 803102a:	b914      	cbnz	r4, 8031032 <__match+0x12>
 803102c:	6003      	str	r3, [r0, #0]
 803102e:	2001      	movs	r0, #1
 8031030:	bd30      	pop	{r4, r5, pc}
 8031032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031036:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 803103a:	2d19      	cmp	r5, #25
 803103c:	bf98      	it	ls
 803103e:	3220      	addls	r2, #32
 8031040:	42a2      	cmp	r2, r4
 8031042:	d0f0      	beq.n	8031026 <__match+0x6>
 8031044:	2000      	movs	r0, #0
 8031046:	e7f3      	b.n	8031030 <__match+0x10>

08031048 <__hexnan>:
 8031048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803104c:	680b      	ldr	r3, [r1, #0]
 803104e:	6801      	ldr	r1, [r0, #0]
 8031050:	115e      	asrs	r6, r3, #5
 8031052:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8031056:	f013 031f 	ands.w	r3, r3, #31
 803105a:	b087      	sub	sp, #28
 803105c:	bf18      	it	ne
 803105e:	3604      	addne	r6, #4
 8031060:	2500      	movs	r5, #0
 8031062:	1f37      	subs	r7, r6, #4
 8031064:	4682      	mov	sl, r0
 8031066:	4690      	mov	r8, r2
 8031068:	9301      	str	r3, [sp, #4]
 803106a:	f846 5c04 	str.w	r5, [r6, #-4]
 803106e:	46b9      	mov	r9, r7
 8031070:	463c      	mov	r4, r7
 8031072:	9502      	str	r5, [sp, #8]
 8031074:	46ab      	mov	fp, r5
 8031076:	784a      	ldrb	r2, [r1, #1]
 8031078:	1c4b      	adds	r3, r1, #1
 803107a:	9303      	str	r3, [sp, #12]
 803107c:	b342      	cbz	r2, 80310d0 <__hexnan+0x88>
 803107e:	4610      	mov	r0, r2
 8031080:	9105      	str	r1, [sp, #20]
 8031082:	9204      	str	r2, [sp, #16]
 8031084:	f7ff fd76 	bl	8030b74 <__hexdig_fun>
 8031088:	2800      	cmp	r0, #0
 803108a:	d14f      	bne.n	803112c <__hexnan+0xe4>
 803108c:	9a04      	ldr	r2, [sp, #16]
 803108e:	9905      	ldr	r1, [sp, #20]
 8031090:	2a20      	cmp	r2, #32
 8031092:	d818      	bhi.n	80310c6 <__hexnan+0x7e>
 8031094:	9b02      	ldr	r3, [sp, #8]
 8031096:	459b      	cmp	fp, r3
 8031098:	dd13      	ble.n	80310c2 <__hexnan+0x7a>
 803109a:	454c      	cmp	r4, r9
 803109c:	d206      	bcs.n	80310ac <__hexnan+0x64>
 803109e:	2d07      	cmp	r5, #7
 80310a0:	dc04      	bgt.n	80310ac <__hexnan+0x64>
 80310a2:	462a      	mov	r2, r5
 80310a4:	4649      	mov	r1, r9
 80310a6:	4620      	mov	r0, r4
 80310a8:	f7ff ffa8 	bl	8030ffc <L_shift>
 80310ac:	4544      	cmp	r4, r8
 80310ae:	d950      	bls.n	8031152 <__hexnan+0x10a>
 80310b0:	2300      	movs	r3, #0
 80310b2:	f1a4 0904 	sub.w	r9, r4, #4
 80310b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80310ba:	f8cd b008 	str.w	fp, [sp, #8]
 80310be:	464c      	mov	r4, r9
 80310c0:	461d      	mov	r5, r3
 80310c2:	9903      	ldr	r1, [sp, #12]
 80310c4:	e7d7      	b.n	8031076 <__hexnan+0x2e>
 80310c6:	2a29      	cmp	r2, #41	; 0x29
 80310c8:	d155      	bne.n	8031176 <__hexnan+0x12e>
 80310ca:	3102      	adds	r1, #2
 80310cc:	f8ca 1000 	str.w	r1, [sl]
 80310d0:	f1bb 0f00 	cmp.w	fp, #0
 80310d4:	d04f      	beq.n	8031176 <__hexnan+0x12e>
 80310d6:	454c      	cmp	r4, r9
 80310d8:	d206      	bcs.n	80310e8 <__hexnan+0xa0>
 80310da:	2d07      	cmp	r5, #7
 80310dc:	dc04      	bgt.n	80310e8 <__hexnan+0xa0>
 80310de:	462a      	mov	r2, r5
 80310e0:	4649      	mov	r1, r9
 80310e2:	4620      	mov	r0, r4
 80310e4:	f7ff ff8a 	bl	8030ffc <L_shift>
 80310e8:	4544      	cmp	r4, r8
 80310ea:	d934      	bls.n	8031156 <__hexnan+0x10e>
 80310ec:	f1a8 0204 	sub.w	r2, r8, #4
 80310f0:	4623      	mov	r3, r4
 80310f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80310f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80310fa:	429f      	cmp	r7, r3
 80310fc:	d2f9      	bcs.n	80310f2 <__hexnan+0xaa>
 80310fe:	1b3b      	subs	r3, r7, r4
 8031100:	f023 0303 	bic.w	r3, r3, #3
 8031104:	3304      	adds	r3, #4
 8031106:	3e03      	subs	r6, #3
 8031108:	3401      	adds	r4, #1
 803110a:	42a6      	cmp	r6, r4
 803110c:	bf38      	it	cc
 803110e:	2304      	movcc	r3, #4
 8031110:	4443      	add	r3, r8
 8031112:	2200      	movs	r2, #0
 8031114:	f843 2b04 	str.w	r2, [r3], #4
 8031118:	429f      	cmp	r7, r3
 803111a:	d2fb      	bcs.n	8031114 <__hexnan+0xcc>
 803111c:	683b      	ldr	r3, [r7, #0]
 803111e:	b91b      	cbnz	r3, 8031128 <__hexnan+0xe0>
 8031120:	4547      	cmp	r7, r8
 8031122:	d126      	bne.n	8031172 <__hexnan+0x12a>
 8031124:	2301      	movs	r3, #1
 8031126:	603b      	str	r3, [r7, #0]
 8031128:	2005      	movs	r0, #5
 803112a:	e025      	b.n	8031178 <__hexnan+0x130>
 803112c:	3501      	adds	r5, #1
 803112e:	2d08      	cmp	r5, #8
 8031130:	f10b 0b01 	add.w	fp, fp, #1
 8031134:	dd06      	ble.n	8031144 <__hexnan+0xfc>
 8031136:	4544      	cmp	r4, r8
 8031138:	d9c3      	bls.n	80310c2 <__hexnan+0x7a>
 803113a:	2300      	movs	r3, #0
 803113c:	f844 3c04 	str.w	r3, [r4, #-4]
 8031140:	2501      	movs	r5, #1
 8031142:	3c04      	subs	r4, #4
 8031144:	6822      	ldr	r2, [r4, #0]
 8031146:	f000 000f 	and.w	r0, r0, #15
 803114a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803114e:	6020      	str	r0, [r4, #0]
 8031150:	e7b7      	b.n	80310c2 <__hexnan+0x7a>
 8031152:	2508      	movs	r5, #8
 8031154:	e7b5      	b.n	80310c2 <__hexnan+0x7a>
 8031156:	9b01      	ldr	r3, [sp, #4]
 8031158:	2b00      	cmp	r3, #0
 803115a:	d0df      	beq.n	803111c <__hexnan+0xd4>
 803115c:	f1c3 0320 	rsb	r3, r3, #32
 8031160:	f04f 32ff 	mov.w	r2, #4294967295
 8031164:	40da      	lsrs	r2, r3
 8031166:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803116a:	4013      	ands	r3, r2
 803116c:	f846 3c04 	str.w	r3, [r6, #-4]
 8031170:	e7d4      	b.n	803111c <__hexnan+0xd4>
 8031172:	3f04      	subs	r7, #4
 8031174:	e7d2      	b.n	803111c <__hexnan+0xd4>
 8031176:	2004      	movs	r0, #4
 8031178:	b007      	add	sp, #28
 803117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803117e <__ascii_mbtowc>:
 803117e:	b082      	sub	sp, #8
 8031180:	b901      	cbnz	r1, 8031184 <__ascii_mbtowc+0x6>
 8031182:	a901      	add	r1, sp, #4
 8031184:	b142      	cbz	r2, 8031198 <__ascii_mbtowc+0x1a>
 8031186:	b14b      	cbz	r3, 803119c <__ascii_mbtowc+0x1e>
 8031188:	7813      	ldrb	r3, [r2, #0]
 803118a:	600b      	str	r3, [r1, #0]
 803118c:	7812      	ldrb	r2, [r2, #0]
 803118e:	1e10      	subs	r0, r2, #0
 8031190:	bf18      	it	ne
 8031192:	2001      	movne	r0, #1
 8031194:	b002      	add	sp, #8
 8031196:	4770      	bx	lr
 8031198:	4610      	mov	r0, r2
 803119a:	e7fb      	b.n	8031194 <__ascii_mbtowc+0x16>
 803119c:	f06f 0001 	mvn.w	r0, #1
 80311a0:	e7f8      	b.n	8031194 <__ascii_mbtowc+0x16>

080311a2 <_realloc_r>:
 80311a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80311a6:	4680      	mov	r8, r0
 80311a8:	4614      	mov	r4, r2
 80311aa:	460e      	mov	r6, r1
 80311ac:	b921      	cbnz	r1, 80311b8 <_realloc_r+0x16>
 80311ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80311b2:	4611      	mov	r1, r2
 80311b4:	f7fa bf74 	b.w	802c0a0 <_malloc_r>
 80311b8:	b92a      	cbnz	r2, 80311c6 <_realloc_r+0x24>
 80311ba:	f7fd f94b 	bl	802e454 <_free_r>
 80311be:	4625      	mov	r5, r4
 80311c0:	4628      	mov	r0, r5
 80311c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80311c6:	f000 f89c 	bl	8031302 <_malloc_usable_size_r>
 80311ca:	4284      	cmp	r4, r0
 80311cc:	4607      	mov	r7, r0
 80311ce:	d802      	bhi.n	80311d6 <_realloc_r+0x34>
 80311d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80311d4:	d812      	bhi.n	80311fc <_realloc_r+0x5a>
 80311d6:	4621      	mov	r1, r4
 80311d8:	4640      	mov	r0, r8
 80311da:	f7fa ff61 	bl	802c0a0 <_malloc_r>
 80311de:	4605      	mov	r5, r0
 80311e0:	2800      	cmp	r0, #0
 80311e2:	d0ed      	beq.n	80311c0 <_realloc_r+0x1e>
 80311e4:	42bc      	cmp	r4, r7
 80311e6:	4622      	mov	r2, r4
 80311e8:	4631      	mov	r1, r6
 80311ea:	bf28      	it	cs
 80311ec:	463a      	movcs	r2, r7
 80311ee:	f7fc fa98 	bl	802d722 <memcpy>
 80311f2:	4631      	mov	r1, r6
 80311f4:	4640      	mov	r0, r8
 80311f6:	f7fd f92d 	bl	802e454 <_free_r>
 80311fa:	e7e1      	b.n	80311c0 <_realloc_r+0x1e>
 80311fc:	4635      	mov	r5, r6
 80311fe:	e7df      	b.n	80311c0 <_realloc_r+0x1e>

08031200 <_strtoul_l.constprop.0>:
 8031200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031204:	4f36      	ldr	r7, [pc, #216]	; (80312e0 <_strtoul_l.constprop.0+0xe0>)
 8031206:	4686      	mov	lr, r0
 8031208:	460d      	mov	r5, r1
 803120a:	4628      	mov	r0, r5
 803120c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031210:	5d3e      	ldrb	r6, [r7, r4]
 8031212:	f016 0608 	ands.w	r6, r6, #8
 8031216:	d1f8      	bne.n	803120a <_strtoul_l.constprop.0+0xa>
 8031218:	2c2d      	cmp	r4, #45	; 0x2d
 803121a:	d130      	bne.n	803127e <_strtoul_l.constprop.0+0x7e>
 803121c:	782c      	ldrb	r4, [r5, #0]
 803121e:	2601      	movs	r6, #1
 8031220:	1c85      	adds	r5, r0, #2
 8031222:	2b00      	cmp	r3, #0
 8031224:	d057      	beq.n	80312d6 <_strtoul_l.constprop.0+0xd6>
 8031226:	2b10      	cmp	r3, #16
 8031228:	d109      	bne.n	803123e <_strtoul_l.constprop.0+0x3e>
 803122a:	2c30      	cmp	r4, #48	; 0x30
 803122c:	d107      	bne.n	803123e <_strtoul_l.constprop.0+0x3e>
 803122e:	7828      	ldrb	r0, [r5, #0]
 8031230:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8031234:	2858      	cmp	r0, #88	; 0x58
 8031236:	d149      	bne.n	80312cc <_strtoul_l.constprop.0+0xcc>
 8031238:	786c      	ldrb	r4, [r5, #1]
 803123a:	2310      	movs	r3, #16
 803123c:	3502      	adds	r5, #2
 803123e:	f04f 38ff 	mov.w	r8, #4294967295
 8031242:	2700      	movs	r7, #0
 8031244:	fbb8 f8f3 	udiv	r8, r8, r3
 8031248:	fb03 f908 	mul.w	r9, r3, r8
 803124c:	ea6f 0909 	mvn.w	r9, r9
 8031250:	4638      	mov	r0, r7
 8031252:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8031256:	f1bc 0f09 	cmp.w	ip, #9
 803125a:	d815      	bhi.n	8031288 <_strtoul_l.constprop.0+0x88>
 803125c:	4664      	mov	r4, ip
 803125e:	42a3      	cmp	r3, r4
 8031260:	dd23      	ble.n	80312aa <_strtoul_l.constprop.0+0xaa>
 8031262:	f1b7 3fff 	cmp.w	r7, #4294967295
 8031266:	d007      	beq.n	8031278 <_strtoul_l.constprop.0+0x78>
 8031268:	4580      	cmp	r8, r0
 803126a:	d31b      	bcc.n	80312a4 <_strtoul_l.constprop.0+0xa4>
 803126c:	d101      	bne.n	8031272 <_strtoul_l.constprop.0+0x72>
 803126e:	45a1      	cmp	r9, r4
 8031270:	db18      	blt.n	80312a4 <_strtoul_l.constprop.0+0xa4>
 8031272:	fb00 4003 	mla	r0, r0, r3, r4
 8031276:	2701      	movs	r7, #1
 8031278:	f815 4b01 	ldrb.w	r4, [r5], #1
 803127c:	e7e9      	b.n	8031252 <_strtoul_l.constprop.0+0x52>
 803127e:	2c2b      	cmp	r4, #43	; 0x2b
 8031280:	bf04      	itt	eq
 8031282:	782c      	ldrbeq	r4, [r5, #0]
 8031284:	1c85      	addeq	r5, r0, #2
 8031286:	e7cc      	b.n	8031222 <_strtoul_l.constprop.0+0x22>
 8031288:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 803128c:	f1bc 0f19 	cmp.w	ip, #25
 8031290:	d801      	bhi.n	8031296 <_strtoul_l.constprop.0+0x96>
 8031292:	3c37      	subs	r4, #55	; 0x37
 8031294:	e7e3      	b.n	803125e <_strtoul_l.constprop.0+0x5e>
 8031296:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 803129a:	f1bc 0f19 	cmp.w	ip, #25
 803129e:	d804      	bhi.n	80312aa <_strtoul_l.constprop.0+0xaa>
 80312a0:	3c57      	subs	r4, #87	; 0x57
 80312a2:	e7dc      	b.n	803125e <_strtoul_l.constprop.0+0x5e>
 80312a4:	f04f 37ff 	mov.w	r7, #4294967295
 80312a8:	e7e6      	b.n	8031278 <_strtoul_l.constprop.0+0x78>
 80312aa:	1c7b      	adds	r3, r7, #1
 80312ac:	d106      	bne.n	80312bc <_strtoul_l.constprop.0+0xbc>
 80312ae:	2322      	movs	r3, #34	; 0x22
 80312b0:	f8ce 3000 	str.w	r3, [lr]
 80312b4:	4638      	mov	r0, r7
 80312b6:	b932      	cbnz	r2, 80312c6 <_strtoul_l.constprop.0+0xc6>
 80312b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80312bc:	b106      	cbz	r6, 80312c0 <_strtoul_l.constprop.0+0xc0>
 80312be:	4240      	negs	r0, r0
 80312c0:	2a00      	cmp	r2, #0
 80312c2:	d0f9      	beq.n	80312b8 <_strtoul_l.constprop.0+0xb8>
 80312c4:	b107      	cbz	r7, 80312c8 <_strtoul_l.constprop.0+0xc8>
 80312c6:	1e69      	subs	r1, r5, #1
 80312c8:	6011      	str	r1, [r2, #0]
 80312ca:	e7f5      	b.n	80312b8 <_strtoul_l.constprop.0+0xb8>
 80312cc:	2430      	movs	r4, #48	; 0x30
 80312ce:	2b00      	cmp	r3, #0
 80312d0:	d1b5      	bne.n	803123e <_strtoul_l.constprop.0+0x3e>
 80312d2:	2308      	movs	r3, #8
 80312d4:	e7b3      	b.n	803123e <_strtoul_l.constprop.0+0x3e>
 80312d6:	2c30      	cmp	r4, #48	; 0x30
 80312d8:	d0a9      	beq.n	803122e <_strtoul_l.constprop.0+0x2e>
 80312da:	230a      	movs	r3, #10
 80312dc:	e7af      	b.n	803123e <_strtoul_l.constprop.0+0x3e>
 80312de:	bf00      	nop
 80312e0:	080346f9 	.word	0x080346f9

080312e4 <_strtoul_r>:
 80312e4:	f7ff bf8c 	b.w	8031200 <_strtoul_l.constprop.0>

080312e8 <__ascii_wctomb>:
 80312e8:	b149      	cbz	r1, 80312fe <__ascii_wctomb+0x16>
 80312ea:	2aff      	cmp	r2, #255	; 0xff
 80312ec:	bf85      	ittet	hi
 80312ee:	238a      	movhi	r3, #138	; 0x8a
 80312f0:	6003      	strhi	r3, [r0, #0]
 80312f2:	700a      	strbls	r2, [r1, #0]
 80312f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80312f8:	bf98      	it	ls
 80312fa:	2001      	movls	r0, #1
 80312fc:	4770      	bx	lr
 80312fe:	4608      	mov	r0, r1
 8031300:	4770      	bx	lr

08031302 <_malloc_usable_size_r>:
 8031302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031306:	1f18      	subs	r0, r3, #4
 8031308:	2b00      	cmp	r3, #0
 803130a:	bfbc      	itt	lt
 803130c:	580b      	ldrlt	r3, [r1, r0]
 803130e:	18c0      	addlt	r0, r0, r3
 8031310:	4770      	bx	lr
	...

08031314 <_init>:
 8031314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031316:	bf00      	nop
 8031318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803131a:	bc08      	pop	{r3}
 803131c:	469e      	mov	lr, r3
 803131e:	4770      	bx	lr

08031320 <_fini>:
 8031320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031322:	bf00      	nop
 8031324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031326:	bc08      	pop	{r3}
 8031328:	469e      	mov	lr, r3
 803132a:	4770      	bx	lr
