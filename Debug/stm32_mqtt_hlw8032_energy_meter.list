
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002173c  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003720  080318e0  080318e0  000318e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035000  08035000  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  08035000  08035000  00035000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035008  08035008  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035008  08035008  00035008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803500c  0803500c  0003500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08035010  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d81c  200002f8  08035308  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000db14  08035308  0004db14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f319  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007c5a  00000000  00000000  0006f684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ad8  00000000  00000000  000772e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002284  00000000  00000000  00079db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa8a  00000000  00000000  0007c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003382d  00000000  00000000  0009bac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa40d  00000000  00000000  000cf2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cadc  00000000  00000000  00179700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001861dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	080318c4 	.word	0x080318c4

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	080318c4 	.word	0x080318c4

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	; 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9ba 	b.w	8011044 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9e08      	ldr	r6, [sp, #32]
 8010d82:	460d      	mov	r5, r1
 8010d84:	4604      	mov	r4, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14a      	bne.n	8010e22 <__udivmoddi4+0xa6>
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	4694      	mov	ip, r2
 8010d90:	d965      	bls.n	8010e5e <__udivmoddi4+0xe2>
 8010d92:	fab2 f382 	clz	r3, r2
 8010d96:	b143      	cbz	r3, 8010daa <__udivmoddi4+0x2e>
 8010d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8010d9c:	f1c3 0220 	rsb	r2, r3, #32
 8010da0:	409f      	lsls	r7, r3
 8010da2:	fa20 f202 	lsr.w	r2, r0, r2
 8010da6:	4317      	orrs	r7, r2
 8010da8:	409c      	lsls	r4, r3
 8010daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010dae:	fa1f f58c 	uxth.w	r5, ip
 8010db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8010db6:	0c22      	lsrs	r2, r4, #16
 8010db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8010dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010dc0:	fb01 f005 	mul.w	r0, r1, r5
 8010dc4:	4290      	cmp	r0, r2
 8010dc6:	d90a      	bls.n	8010dde <__udivmoddi4+0x62>
 8010dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8010dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8010dd0:	f080 811c 	bcs.w	801100c <__udivmoddi4+0x290>
 8010dd4:	4290      	cmp	r0, r2
 8010dd6:	f240 8119 	bls.w	801100c <__udivmoddi4+0x290>
 8010dda:	3902      	subs	r1, #2
 8010ddc:	4462      	add	r2, ip
 8010dde:	1a12      	subs	r2, r2, r0
 8010de0:	b2a4      	uxth	r4, r4
 8010de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8010de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8010dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010dee:	fb00 f505 	mul.w	r5, r0, r5
 8010df2:	42a5      	cmp	r5, r4
 8010df4:	d90a      	bls.n	8010e0c <__udivmoddi4+0x90>
 8010df6:	eb1c 0404 	adds.w	r4, ip, r4
 8010dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8010dfe:	f080 8107 	bcs.w	8011010 <__udivmoddi4+0x294>
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	f240 8104 	bls.w	8011010 <__udivmoddi4+0x294>
 8010e08:	4464      	add	r4, ip
 8010e0a:	3802      	subs	r0, #2
 8010e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	2100      	movs	r1, #0
 8010e14:	b11e      	cbz	r6, 8010e1e <__udivmoddi4+0xa2>
 8010e16:	40dc      	lsrs	r4, r3
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	428b      	cmp	r3, r1
 8010e24:	d908      	bls.n	8010e38 <__udivmoddi4+0xbc>
 8010e26:	2e00      	cmp	r6, #0
 8010e28:	f000 80ed 	beq.w	8011006 <__udivmoddi4+0x28a>
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8010e32:	4608      	mov	r0, r1
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	fab3 f183 	clz	r1, r3
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d149      	bne.n	8010ed4 <__udivmoddi4+0x158>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d302      	bcc.n	8010e4a <__udivmoddi4+0xce>
 8010e44:	4282      	cmp	r2, r0
 8010e46:	f200 80f8 	bhi.w	801103a <__udivmoddi4+0x2be>
 8010e4a:	1a84      	subs	r4, r0, r2
 8010e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8010e50:	2001      	movs	r0, #1
 8010e52:	4617      	mov	r7, r2
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0e2      	beq.n	8010e1e <__udivmoddi4+0xa2>
 8010e58:	e9c6 4700 	strd	r4, r7, [r6]
 8010e5c:	e7df      	b.n	8010e1e <__udivmoddi4+0xa2>
 8010e5e:	b902      	cbnz	r2, 8010e62 <__udivmoddi4+0xe6>
 8010e60:	deff      	udf	#255	; 0xff
 8010e62:	fab2 f382 	clz	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f040 8090 	bne.w	8010f8c <__udivmoddi4+0x210>
 8010e6c:	1a8a      	subs	r2, r1, r2
 8010e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e72:	fa1f fe8c 	uxth.w	lr, ip
 8010e76:	2101      	movs	r1, #1
 8010e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8010e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8010e80:	0c22      	lsrs	r2, r4, #16
 8010e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010e86:	fb0e f005 	mul.w	r0, lr, r5
 8010e8a:	4290      	cmp	r0, r2
 8010e8c:	d908      	bls.n	8010ea0 <__udivmoddi4+0x124>
 8010e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8010e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8010e96:	d202      	bcs.n	8010e9e <__udivmoddi4+0x122>
 8010e98:	4290      	cmp	r0, r2
 8010e9a:	f200 80cb 	bhi.w	8011034 <__udivmoddi4+0x2b8>
 8010e9e:	4645      	mov	r5, r8
 8010ea0:	1a12      	subs	r2, r2, r0
 8010ea2:	b2a4      	uxth	r4, r4
 8010ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8010ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8010eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8010eb4:	45a6      	cmp	lr, r4
 8010eb6:	d908      	bls.n	8010eca <__udivmoddi4+0x14e>
 8010eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8010ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8010ec0:	d202      	bcs.n	8010ec8 <__udivmoddi4+0x14c>
 8010ec2:	45a6      	cmp	lr, r4
 8010ec4:	f200 80bb 	bhi.w	801103e <__udivmoddi4+0x2c2>
 8010ec8:	4610      	mov	r0, r2
 8010eca:	eba4 040e 	sub.w	r4, r4, lr
 8010ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010ed2:	e79f      	b.n	8010e14 <__udivmoddi4+0x98>
 8010ed4:	f1c1 0720 	rsb	r7, r1, #32
 8010ed8:	408b      	lsls	r3, r1
 8010eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8010ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8010ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8010ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8010eea:	40fd      	lsrs	r5, r7
 8010eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010ef0:	4323      	orrs	r3, r4
 8010ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8010ef6:	fa1f fe8c 	uxth.w	lr, ip
 8010efa:	fb09 5518 	mls	r5, r9, r8, r5
 8010efe:	0c1c      	lsrs	r4, r3, #16
 8010f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010f04:	fb08 f50e 	mul.w	r5, r8, lr
 8010f08:	42a5      	cmp	r5, r4
 8010f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8010f12:	d90b      	bls.n	8010f2c <__udivmoddi4+0x1b0>
 8010f14:	eb1c 0404 	adds.w	r4, ip, r4
 8010f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8010f1c:	f080 8088 	bcs.w	8011030 <__udivmoddi4+0x2b4>
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	f240 8085 	bls.w	8011030 <__udivmoddi4+0x2b4>
 8010f26:	f1a8 0802 	sub.w	r8, r8, #2
 8010f2a:	4464      	add	r4, ip
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	b29d      	uxth	r5, r3
 8010f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8010f34:	fb09 4413 	mls	r4, r9, r3, r4
 8010f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8010f40:	45a6      	cmp	lr, r4
 8010f42:	d908      	bls.n	8010f56 <__udivmoddi4+0x1da>
 8010f44:	eb1c 0404 	adds.w	r4, ip, r4
 8010f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8010f4c:	d26c      	bcs.n	8011028 <__udivmoddi4+0x2ac>
 8010f4e:	45a6      	cmp	lr, r4
 8010f50:	d96a      	bls.n	8011028 <__udivmoddi4+0x2ac>
 8010f52:	3b02      	subs	r3, #2
 8010f54:	4464      	add	r4, ip
 8010f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8010f5e:	eba4 040e 	sub.w	r4, r4, lr
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	46c8      	mov	r8, r9
 8010f66:	46ae      	mov	lr, r5
 8010f68:	d356      	bcc.n	8011018 <__udivmoddi4+0x29c>
 8010f6a:	d053      	beq.n	8011014 <__udivmoddi4+0x298>
 8010f6c:	b156      	cbz	r6, 8010f84 <__udivmoddi4+0x208>
 8010f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8010f72:	eb64 040e 	sbc.w	r4, r4, lr
 8010f76:	fa04 f707 	lsl.w	r7, r4, r7
 8010f7a:	40ca      	lsrs	r2, r1
 8010f7c:	40cc      	lsrs	r4, r1
 8010f7e:	4317      	orrs	r7, r2
 8010f80:	e9c6 7400 	strd	r7, r4, [r6]
 8010f84:	4618      	mov	r0, r3
 8010f86:	2100      	movs	r1, #0
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	f1c3 0120 	rsb	r1, r3, #32
 8010f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8010f94:	fa20 f201 	lsr.w	r2, r0, r1
 8010f98:	fa25 f101 	lsr.w	r1, r5, r1
 8010f9c:	409d      	lsls	r5, r3
 8010f9e:	432a      	orrs	r2, r5
 8010fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010fa4:	fa1f fe8c 	uxth.w	lr, ip
 8010fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8010fac:	fb07 1510 	mls	r5, r7, r0, r1
 8010fb0:	0c11      	lsrs	r1, r2, #16
 8010fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8010fba:	428d      	cmp	r5, r1
 8010fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8010fc0:	d908      	bls.n	8010fd4 <__udivmoddi4+0x258>
 8010fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8010fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8010fca:	d22f      	bcs.n	801102c <__udivmoddi4+0x2b0>
 8010fcc:	428d      	cmp	r5, r1
 8010fce:	d92d      	bls.n	801102c <__udivmoddi4+0x2b0>
 8010fd0:	3802      	subs	r0, #2
 8010fd2:	4461      	add	r1, ip
 8010fd4:	1b49      	subs	r1, r1, r5
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8010fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8010fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8010fe8:	4291      	cmp	r1, r2
 8010fea:	d908      	bls.n	8010ffe <__udivmoddi4+0x282>
 8010fec:	eb1c 0202 	adds.w	r2, ip, r2
 8010ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8010ff4:	d216      	bcs.n	8011024 <__udivmoddi4+0x2a8>
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	d914      	bls.n	8011024 <__udivmoddi4+0x2a8>
 8010ffa:	3d02      	subs	r5, #2
 8010ffc:	4462      	add	r2, ip
 8010ffe:	1a52      	subs	r2, r2, r1
 8011000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8011004:	e738      	b.n	8010e78 <__udivmoddi4+0xfc>
 8011006:	4631      	mov	r1, r6
 8011008:	4630      	mov	r0, r6
 801100a:	e708      	b.n	8010e1e <__udivmoddi4+0xa2>
 801100c:	4639      	mov	r1, r7
 801100e:	e6e6      	b.n	8010dde <__udivmoddi4+0x62>
 8011010:	4610      	mov	r0, r2
 8011012:	e6fb      	b.n	8010e0c <__udivmoddi4+0x90>
 8011014:	4548      	cmp	r0, r9
 8011016:	d2a9      	bcs.n	8010f6c <__udivmoddi4+0x1f0>
 8011018:	ebb9 0802 	subs.w	r8, r9, r2
 801101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8011020:	3b01      	subs	r3, #1
 8011022:	e7a3      	b.n	8010f6c <__udivmoddi4+0x1f0>
 8011024:	4645      	mov	r5, r8
 8011026:	e7ea      	b.n	8010ffe <__udivmoddi4+0x282>
 8011028:	462b      	mov	r3, r5
 801102a:	e794      	b.n	8010f56 <__udivmoddi4+0x1da>
 801102c:	4640      	mov	r0, r8
 801102e:	e7d1      	b.n	8010fd4 <__udivmoddi4+0x258>
 8011030:	46d0      	mov	r8, sl
 8011032:	e77b      	b.n	8010f2c <__udivmoddi4+0x1b0>
 8011034:	3d02      	subs	r5, #2
 8011036:	4462      	add	r2, ip
 8011038:	e732      	b.n	8010ea0 <__udivmoddi4+0x124>
 801103a:	4608      	mov	r0, r1
 801103c:	e70a      	b.n	8010e54 <__udivmoddi4+0xd8>
 801103e:	4464      	add	r4, ip
 8011040:	3802      	subs	r0, #2
 8011042:	e742      	b.n	8010eca <__udivmoddi4+0x14e>

08011044 <__aeabi_idiv0>:
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop

08011048 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0

}
 801104c:	bf00      	nop
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8011056:	b480      	push	{r7}
 8011058:	af00      	add	r7, sp, #0
return 0;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
	...

08011068 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a0e      	ldr	r2, [pc, #56]	; (80110b4 <HAL_UARTEx_RxEventCallback+0x4c>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d116      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801107e:	887b      	ldrh	r3, [r7, #2]
 8011080:	2b18      	cmp	r3, #24
 8011082:	d113      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011084:	4b0c      	ldr	r3, [pc, #48]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f00f fafd 	bl	8020688 <osMessageQueueGetCount>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	2300      	movs	r3, #0
 801109a:	2200      	movs	r2, #0
 801109c:	4907      	ldr	r1, [pc, #28]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 801109e:	f00f fa35 	bl	802050c <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110a2:	2218      	movs	r2, #24
 80110a4:	4905      	ldr	r1, [pc, #20]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 80110a6:	4806      	ldr	r0, [pc, #24]	; (80110c0 <HAL_UARTEx_RxEventCallback+0x58>)
 80110a8:	f006 fc48 	bl	801793c <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	40004400 	.word	0x40004400
 80110b8:	20000448 	.word	0x20000448
 80110bc:	20000474 	.word	0x20000474
 80110c0:	200003d8 	.word	0x200003d8

080110c4 <EthMutexTake>:

void EthMutexTake(void){
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <EthMutexTake+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f04f 31ff 	mov.w	r1, #4294967295
 80110d0:	4618      	mov	r0, r3
 80110d2:	f00f f920 	bl	8020316 <osMutexAcquire>
}
 80110d6:	bf00      	nop
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000464 	.word	0x20000464

080110e0 <EthMutexRelease>:

void EthMutexRelease(void){
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110e4:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <EthMutexRelease+0x14>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f00f f95f 	bl	80203ac <osMutexRelease>
}
 80110ee:	bf00      	nop
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000464 	.word	0x20000464

080110f8 <LfsMutexTake>:

void LfsMutexTake(void){
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80110fc:	4b04      	ldr	r3, [pc, #16]	; (8011110 <LfsMutexTake+0x18>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f04f 31ff 	mov.w	r1, #4294967295
 8011104:	4618      	mov	r0, r3
 8011106:	f00f f906 	bl	8020316 <osMutexAcquire>
}
 801110a:	bf00      	nop
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000468 	.word	0x20000468

08011114 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011118:	4b03      	ldr	r3, [pc, #12]	; (8011128 <LfsMutexRelease+0x14>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f00f f945 	bl	80203ac <osMutexRelease>
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20000468 	.word	0x20000468

0801112c <SocketMutexTake>:

void SocketMutexTake(void){
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 8011130:	4b04      	ldr	r3, [pc, #16]	; (8011144 <SocketMutexTake+0x18>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f04f 31ff 	mov.w	r1, #4294967295
 8011138:	4618      	mov	r0, r3
 801113a:	f00f f8ec 	bl	8020316 <osMutexAcquire>
}
 801113e:	bf00      	nop
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	2000046c 	.word	0x2000046c

08011148 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 801114c:	4b03      	ldr	r3, [pc, #12]	; (801115c <SocketMutexRelease+0x14>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4618      	mov	r0, r3
 8011152:	f00f f92b 	bl	80203ac <osMutexRelease>
}
 8011156:	bf00      	nop
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	2000046c 	.word	0x2000046c

08011160 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8011160:	b580      	push	{r7, lr}
 8011162:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011164:	4b04      	ldr	r3, [pc, #16]	; (8011178 <ServiceSockMutexTake+0x18>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f04f 31ff 	mov.w	r1, #4294967295
 801116c:	4618      	mov	r0, r3
 801116e:	f00f f8d2 	bl	8020316 <osMutexAcquire>
}
 8011172:	bf00      	nop
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	20000470 	.word	0x20000470

0801117c <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8011180:	4b03      	ldr	r3, [pc, #12]	; (8011190 <ServiceSockMutexRelease+0x14>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f00f f911 	bl	80203ac <osMutexRelease>
}
 801118a:	bf00      	nop
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	20000470 	.word	0x20000470

08011194 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 8011198:	2200      	movs	r2, #0
 801119a:	2102      	movs	r1, #2
 801119c:	4802      	ldr	r0, [pc, #8]	; (80111a8 <PowerON_HLW8032+0x14>)
 801119e:	f004 fdfd 	bl	8015d9c <HAL_GPIO_WritePin>
}
 80111a2:	bf00      	nop
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	40020000 	.word	0x40020000

080111ac <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111b0:	2201      	movs	r2, #1
 80111b2:	2102      	movs	r1, #2
 80111b4:	4802      	ldr	r0, [pc, #8]	; (80111c0 <PowerOFF_HLW8032+0x14>)
 80111b6:	f004 fdf1 	bl	8015d9c <HAL_GPIO_WritePin>
}
 80111ba:	bf00      	nop
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	40020000 	.word	0x40020000

080111c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
}
 80111ca:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111cc:	4b60      	ldr	r3, [pc, #384]	; (8011350 <main+0x18c>)
 80111ce:	4a61      	ldr	r2, [pc, #388]	; (8011354 <main+0x190>)
 80111d0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111d2:	b662      	cpsie	i
}
 80111d4:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111d6:	f004 fa8b 	bl	80156f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111da:	f000 f927 	bl	801142c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111de:	485e      	ldr	r0, [pc, #376]	; (8011358 <main+0x194>)
 80111e0:	f00b fc4c 	bl	801ca7c <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111e4:	f000 fa54 	bl	8011690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111e8:	f000 fa26 	bl	8011638 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111ec:	f000 f9b8 	bl	8011560 <MX_SPI1_Init>
  MX_SPI3_Init();
 80111f0:	f000 f9ec 	bl	80115cc <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 80111f4:	f00e fe88 	bl	801ff08 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 80111f8:	f000 f984 	bl	8011504 <MX_CRC_Init>
  MX_IWDG_Init();
 80111fc:	f000 f996 	bl	801152c <MX_IWDG_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8011200:	f00e fe82 	bl	801ff08 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011204:	f00e fecc 	bl	801ffa0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011208:	4854      	ldr	r0, [pc, #336]	; (801135c <main+0x198>)
 801120a:	f00e fffe 	bl	802020a <osMutexNew>
 801120e:	4603      	mov	r3, r0
 8011210:	4a53      	ldr	r2, [pc, #332]	; (8011360 <main+0x19c>)
 8011212:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011214:	4853      	ldr	r0, [pc, #332]	; (8011364 <main+0x1a0>)
 8011216:	f00e fff8 	bl	802020a <osMutexNew>
 801121a:	4603      	mov	r3, r0
 801121c:	4a52      	ldr	r2, [pc, #328]	; (8011368 <main+0x1a4>)
 801121e:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 8011220:	4852      	ldr	r0, [pc, #328]	; (801136c <main+0x1a8>)
 8011222:	f00e fff2 	bl	802020a <osMutexNew>
 8011226:	4603      	mov	r3, r0
 8011228:	4a51      	ldr	r2, [pc, #324]	; (8011370 <main+0x1ac>)
 801122a:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 801122c:	4851      	ldr	r0, [pc, #324]	; (8011374 <main+0x1b0>)
 801122e:	f00e ffec 	bl	802020a <osMutexNew>
 8011232:	4603      	mov	r3, r0
 8011234:	4a50      	ldr	r2, [pc, #320]	; (8011378 <main+0x1b4>)
 8011236:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011238:	4a50      	ldr	r2, [pc, #320]	; (801137c <main+0x1b8>)
 801123a:	211e      	movs	r1, #30
 801123c:	2001      	movs	r0, #1
 801123e:	f00f f8f2 	bl	8020426 <osMessageQueueNew>
 8011242:	4603      	mov	r3, r0
 8011244:	4a4e      	ldr	r2, [pc, #312]	; (8011380 <main+0x1bc>)
 8011246:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011248:	4a4e      	ldr	r2, [pc, #312]	; (8011384 <main+0x1c0>)
 801124a:	2120      	movs	r1, #32
 801124c:	2001      	movs	r0, #1
 801124e:	f00f f8ea 	bl	8020426 <osMessageQueueNew>
 8011252:	4603      	mov	r3, r0
 8011254:	4a4c      	ldr	r2, [pc, #304]	; (8011388 <main+0x1c4>)
 8011256:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011258:	4a4c      	ldr	r2, [pc, #304]	; (801138c <main+0x1c8>)
 801125a:	2124      	movs	r1, #36	; 0x24
 801125c:	2001      	movs	r0, #1
 801125e:	f00f f8e2 	bl	8020426 <osMessageQueueNew>
 8011262:	4603      	mov	r3, r0
 8011264:	4a4a      	ldr	r2, [pc, #296]	; (8011390 <main+0x1cc>)
 8011266:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011268:	4a4a      	ldr	r2, [pc, #296]	; (8011394 <main+0x1d0>)
 801126a:	2108      	movs	r1, #8
 801126c:	2001      	movs	r0, #1
 801126e:	f00f f8da 	bl	8020426 <osMessageQueueNew>
 8011272:	4603      	mov	r3, r0
 8011274:	4a48      	ldr	r2, [pc, #288]	; (8011398 <main+0x1d4>)
 8011276:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011278:	4a48      	ldr	r2, [pc, #288]	; (801139c <main+0x1d8>)
 801127a:	21c6      	movs	r1, #198	; 0xc6
 801127c:	2001      	movs	r0, #1
 801127e:	f00f f8d2 	bl	8020426 <osMessageQueueNew>
 8011282:	4603      	mov	r3, r0
 8011284:	4a46      	ldr	r2, [pc, #280]	; (80113a0 <main+0x1dc>)
 8011286:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011288:	4a46      	ldr	r2, [pc, #280]	; (80113a4 <main+0x1e0>)
 801128a:	2102      	movs	r1, #2
 801128c:	2001      	movs	r0, #1
 801128e:	f00f f8ca 	bl	8020426 <osMessageQueueNew>
 8011292:	4603      	mov	r3, r0
 8011294:	4a44      	ldr	r2, [pc, #272]	; (80113a8 <main+0x1e4>)
 8011296:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 8011298:	4a44      	ldr	r2, [pc, #272]	; (80113ac <main+0x1e8>)
 801129a:	2104      	movs	r1, #4
 801129c:	2001      	movs	r0, #1
 801129e:	f00f f8c2 	bl	8020426 <osMessageQueueNew>
 80112a2:	4603      	mov	r3, r0
 80112a4:	4a42      	ldr	r2, [pc, #264]	; (80113b0 <main+0x1ec>)
 80112a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112a8:	4a42      	ldr	r2, [pc, #264]	; (80113b4 <main+0x1f0>)
 80112aa:	2100      	movs	r1, #0
 80112ac:	4842      	ldr	r0, [pc, #264]	; (80113b8 <main+0x1f4>)
 80112ae:	f00e fec1 	bl	8020034 <osThreadNew>
 80112b2:	4603      	mov	r3, r0
 80112b4:	4a41      	ldr	r2, [pc, #260]	; (80113bc <main+0x1f8>)
 80112b6:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112b8:	4a41      	ldr	r2, [pc, #260]	; (80113c0 <main+0x1fc>)
 80112ba:	2100      	movs	r1, #0
 80112bc:	4841      	ldr	r0, [pc, #260]	; (80113c4 <main+0x200>)
 80112be:	f00e feb9 	bl	8020034 <osThreadNew>
 80112c2:	4603      	mov	r3, r0
 80112c4:	4a40      	ldr	r2, [pc, #256]	; (80113c8 <main+0x204>)
 80112c6:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112c8:	4a40      	ldr	r2, [pc, #256]	; (80113cc <main+0x208>)
 80112ca:	2100      	movs	r1, #0
 80112cc:	4840      	ldr	r0, [pc, #256]	; (80113d0 <main+0x20c>)
 80112ce:	f00e feb1 	bl	8020034 <osThreadNew>
 80112d2:	4603      	mov	r3, r0
 80112d4:	4a3f      	ldr	r2, [pc, #252]	; (80113d4 <main+0x210>)
 80112d6:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112d8:	4a3f      	ldr	r2, [pc, #252]	; (80113d8 <main+0x214>)
 80112da:	2100      	movs	r1, #0
 80112dc:	483f      	ldr	r0, [pc, #252]	; (80113dc <main+0x218>)
 80112de:	f00e fea9 	bl	8020034 <osThreadNew>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4a3e      	ldr	r2, [pc, #248]	; (80113e0 <main+0x21c>)
 80112e6:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112e8:	4a3e      	ldr	r2, [pc, #248]	; (80113e4 <main+0x220>)
 80112ea:	2100      	movs	r1, #0
 80112ec:	483e      	ldr	r0, [pc, #248]	; (80113e8 <main+0x224>)
 80112ee:	f00e fea1 	bl	8020034 <osThreadNew>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4a3d      	ldr	r2, [pc, #244]	; (80113ec <main+0x228>)
 80112f6:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 80112f8:	4a3d      	ldr	r2, [pc, #244]	; (80113f0 <main+0x22c>)
 80112fa:	2100      	movs	r1, #0
 80112fc:	483d      	ldr	r0, [pc, #244]	; (80113f4 <main+0x230>)
 80112fe:	f00e fe99 	bl	8020034 <osThreadNew>
 8011302:	4603      	mov	r3, r0
 8011304:	4a3c      	ldr	r2, [pc, #240]	; (80113f8 <main+0x234>)
 8011306:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011308:	4a3c      	ldr	r2, [pc, #240]	; (80113fc <main+0x238>)
 801130a:	2100      	movs	r1, #0
 801130c:	483c      	ldr	r0, [pc, #240]	; (8011400 <main+0x23c>)
 801130e:	f00e fe91 	bl	8020034 <osThreadNew>
 8011312:	4603      	mov	r3, r0
 8011314:	4a3b      	ldr	r2, [pc, #236]	; (8011404 <main+0x240>)
 8011316:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011318:	4a3b      	ldr	r2, [pc, #236]	; (8011408 <main+0x244>)
 801131a:	2100      	movs	r1, #0
 801131c:	483b      	ldr	r0, [pc, #236]	; (801140c <main+0x248>)
 801131e:	f00e fe89 	bl	8020034 <osThreadNew>
 8011322:	4603      	mov	r3, r0
 8011324:	4a3a      	ldr	r2, [pc, #232]	; (8011410 <main+0x24c>)
 8011326:	6013      	str	r3, [r2, #0]

  /* creation of resetWatchDog */
  resetWatchDogHandle = osThreadNew(vResetWatchDog, NULL, &resetWatchDog_attributes);
 8011328:	4a3a      	ldr	r2, [pc, #232]	; (8011414 <main+0x250>)
 801132a:	2100      	movs	r1, #0
 801132c:	483a      	ldr	r0, [pc, #232]	; (8011418 <main+0x254>)
 801132e:	f00e fe81 	bl	8020034 <osThreadNew>
 8011332:	4603      	mov	r3, r0
 8011334:	4a39      	ldr	r2, [pc, #228]	; (801141c <main+0x258>)
 8011336:	6013      	str	r3, [r2, #0]

  /* creation of SendBroadcast */
  SendBroadcastHandle = osThreadNew(vSendBroadcast, NULL, &SendBroadcast_attributes);
 8011338:	4a39      	ldr	r2, [pc, #228]	; (8011420 <main+0x25c>)
 801133a:	2100      	movs	r1, #0
 801133c:	4839      	ldr	r0, [pc, #228]	; (8011424 <main+0x260>)
 801133e:	f00e fe79 	bl	8020034 <osThreadNew>
 8011342:	4603      	mov	r3, r0
 8011344:	4a38      	ldr	r2, [pc, #224]	; (8011428 <main+0x264>)
 8011346:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011348:	f00e fe4e 	bl	801ffe8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 801134c:	e7fe      	b.n	801134c <main+0x188>
 801134e:	bf00      	nop
 8011350:	e000ed00 	.word	0xe000ed00
 8011354:	08010000 	.word	0x08010000
 8011358:	0801fd0d 	.word	0x0801fd0d
 801135c:	0803422c 	.word	0x0803422c
 8011360:	20000464 	.word	0x20000464
 8011364:	0803423c 	.word	0x0803423c
 8011368:	20000468 	.word	0x20000468
 801136c:	0803424c 	.word	0x0803424c
 8011370:	2000046c 	.word	0x2000046c
 8011374:	0803425c 	.word	0x0803425c
 8011378:	20000470 	.word	0x20000470
 801137c:	08034184 	.word	0x08034184
 8011380:	20000448 	.word	0x20000448
 8011384:	0803419c 	.word	0x0803419c
 8011388:	2000044c 	.word	0x2000044c
 801138c:	080341b4 	.word	0x080341b4
 8011390:	20000450 	.word	0x20000450
 8011394:	080341cc 	.word	0x080341cc
 8011398:	20000454 	.word	0x20000454
 801139c:	080341e4 	.word	0x080341e4
 80113a0:	20000458 	.word	0x20000458
 80113a4:	080341fc 	.word	0x080341fc
 80113a8:	2000045c 	.word	0x2000045c
 80113ac:	08034214 	.word	0x08034214
 80113b0:	20000460 	.word	0x20000460
 80113b4:	0803401c 	.word	0x0803401c
 80113b8:	08011785 	.word	0x08011785
 80113bc:	20000420 	.word	0x20000420
 80113c0:	08034040 	.word	0x08034040
 80113c4:	08011795 	.word	0x08011795
 80113c8:	20000424 	.word	0x20000424
 80113cc:	08034064 	.word	0x08034064
 80113d0:	08011929 	.word	0x08011929
 80113d4:	20000428 	.word	0x20000428
 80113d8:	08034088 	.word	0x08034088
 80113dc:	08011c91 	.word	0x08011c91
 80113e0:	2000042c 	.word	0x2000042c
 80113e4:	080340ac 	.word	0x080340ac
 80113e8:	08011ccd 	.word	0x08011ccd
 80113ec:	20000430 	.word	0x20000430
 80113f0:	080340d0 	.word	0x080340d0
 80113f4:	08012249 	.word	0x08012249
 80113f8:	20000434 	.word	0x20000434
 80113fc:	080340f4 	.word	0x080340f4
 8011400:	080122f5 	.word	0x080122f5
 8011404:	20000438 	.word	0x20000438
 8011408:	08034118 	.word	0x08034118
 801140c:	08012479 	.word	0x08012479
 8011410:	2000043c 	.word	0x2000043c
 8011414:	0803413c 	.word	0x0803413c
 8011418:	08012711 	.word	0x08012711
 801141c:	20000440 	.word	0x20000440
 8011420:	08034160 	.word	0x08034160
 8011424:	0801272d 	.word	0x0801272d
 8011428:	20000444 	.word	0x20000444

0801142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b094      	sub	sp, #80	; 0x50
 8011430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011432:	f107 0320 	add.w	r3, r7, #32
 8011436:	2230      	movs	r2, #48	; 0x30
 8011438:	2100      	movs	r1, #0
 801143a:	4618      	mov	r0, r3
 801143c:	f01c fa76 	bl	802d92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011440:	f107 030c 	add.w	r3, r7, #12
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
 8011448:	605a      	str	r2, [r3, #4]
 801144a:	609a      	str	r2, [r3, #8]
 801144c:	60da      	str	r2, [r3, #12]
 801144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011450:	2300      	movs	r3, #0
 8011452:	60bb      	str	r3, [r7, #8]
 8011454:	4b29      	ldr	r3, [pc, #164]	; (80114fc <SystemClock_Config+0xd0>)
 8011456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011458:	4a28      	ldr	r2, [pc, #160]	; (80114fc <SystemClock_Config+0xd0>)
 801145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801145e:	6413      	str	r3, [r2, #64]	; 0x40
 8011460:	4b26      	ldr	r3, [pc, #152]	; (80114fc <SystemClock_Config+0xd0>)
 8011462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011468:	60bb      	str	r3, [r7, #8]
 801146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801146c:	2300      	movs	r3, #0
 801146e:	607b      	str	r3, [r7, #4]
 8011470:	4b23      	ldr	r3, [pc, #140]	; (8011500 <SystemClock_Config+0xd4>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011478:	4a21      	ldr	r2, [pc, #132]	; (8011500 <SystemClock_Config+0xd4>)
 801147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	4b1f      	ldr	r3, [pc, #124]	; (8011500 <SystemClock_Config+0xd4>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011488:	607b      	str	r3, [r7, #4]
 801148a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801148c:	2309      	movs	r3, #9
 801148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8011496:	2301      	movs	r3, #1
 8011498:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801149a:	2302      	movs	r3, #2
 801149c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801149e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80114a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80114a4:	2304      	movs	r3, #4
 80114a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80114a8:	2354      	movs	r3, #84	; 0x54
 80114aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80114ac:	2302      	movs	r3, #2
 80114ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80114b0:	2304      	movs	r3, #4
 80114b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114b4:	f107 0320 	add.w	r3, r7, #32
 80114b8:	4618      	mov	r0, r3
 80114ba:	f004 fcdb 	bl	8015e74 <HAL_RCC_OscConfig>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80114c4:	f001 f9d0 	bl	8012868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114c8:	230f      	movs	r3, #15
 80114ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114cc:	2302      	movs	r3, #2
 80114ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114d0:	2300      	movs	r3, #0
 80114d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80114d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114da:	2300      	movs	r3, #0
 80114dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80114de:	f107 030c 	add.w	r3, r7, #12
 80114e2:	2102      	movs	r1, #2
 80114e4:	4618      	mov	r0, r3
 80114e6:	f004 ff3d 	bl	8016364 <HAL_RCC_ClockConfig>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80114f0:	f001 f9ba 	bl	8012868 <Error_Handler>
  }
}
 80114f4:	bf00      	nop
 80114f6:	3750      	adds	r7, #80	; 0x50
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	40023800 	.word	0x40023800
 8011500:	40007000 	.word	0x40007000

08011504 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8011508:	4b06      	ldr	r3, [pc, #24]	; (8011524 <MX_CRC_Init+0x20>)
 801150a:	4a07      	ldr	r2, [pc, #28]	; (8011528 <MX_CRC_Init+0x24>)
 801150c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801150e:	4805      	ldr	r0, [pc, #20]	; (8011524 <MX_CRC_Init+0x20>)
 8011510:	f004 fa12 	bl	8015938 <HAL_CRC_Init>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d001      	beq.n	801151e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 801151a:	f001 f9a5 	bl	8012868 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801151e:	bf00      	nop
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	20000314 	.word	0x20000314
 8011528:	40023000 	.word	0x40023000

0801152c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011530:	4b09      	ldr	r3, [pc, #36]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011532:	4a0a      	ldr	r2, [pc, #40]	; (801155c <MX_IWDG_Init+0x30>)
 8011534:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8011536:	4b08      	ldr	r3, [pc, #32]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011538:	2206      	movs	r2, #6
 801153a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 801153c:	4b06      	ldr	r3, [pc, #24]	; (8011558 <MX_IWDG_Init+0x2c>)
 801153e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8011542:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011544:	4804      	ldr	r0, [pc, #16]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011546:	f004 fc42 	bl	8015dce <HAL_IWDG_Init>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8011550:	f001 f98a 	bl	8012868 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011554:	bf00      	nop
 8011556:	bd80      	pop	{r7, pc}
 8011558:	2000031c 	.word	0x2000031c
 801155c:	40003000 	.word	0x40003000

08011560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011564:	4b17      	ldr	r3, [pc, #92]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011566:	4a18      	ldr	r2, [pc, #96]	; (80115c8 <MX_SPI1_Init+0x68>)
 8011568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801156a:	4b16      	ldr	r3, [pc, #88]	; (80115c4 <MX_SPI1_Init+0x64>)
 801156c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011572:	4b14      	ldr	r3, [pc, #80]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011574:	2200      	movs	r2, #0
 8011576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011578:	4b12      	ldr	r3, [pc, #72]	; (80115c4 <MX_SPI1_Init+0x64>)
 801157a:	2200      	movs	r2, #0
 801157c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801157e:	4b11      	ldr	r3, [pc, #68]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011580:	2202      	movs	r2, #2
 8011582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011584:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011586:	2201      	movs	r2, #1
 8011588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801158a:	4b0e      	ldr	r3, [pc, #56]	; (80115c4 <MX_SPI1_Init+0x64>)
 801158c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011592:	4b0c      	ldr	r3, [pc, #48]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011594:	2200      	movs	r2, #0
 8011596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011598:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <MX_SPI1_Init+0x64>)
 801159a:	2200      	movs	r2, #0
 801159c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801159e:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115a4:	4b07      	ldr	r3, [pc, #28]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80115aa:	4b06      	ldr	r3, [pc, #24]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115ac:	220a      	movs	r2, #10
 80115ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80115b0:	4804      	ldr	r0, [pc, #16]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115b2:	f005 f929 	bl	8016808 <HAL_SPI_Init>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80115bc:	f001 f954 	bl	8012868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80115c0:	bf00      	nop
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20000328 	.word	0x20000328
 80115c8:	40013000 	.word	0x40013000

080115cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80115d0:	4b17      	ldr	r3, [pc, #92]	; (8011630 <MX_SPI3_Init+0x64>)
 80115d2:	4a18      	ldr	r2, [pc, #96]	; (8011634 <MX_SPI3_Init+0x68>)
 80115d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80115d6:	4b16      	ldr	r3, [pc, #88]	; (8011630 <MX_SPI3_Init+0x64>)
 80115d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80115dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80115de:	4b14      	ldr	r3, [pc, #80]	; (8011630 <MX_SPI3_Init+0x64>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80115e4:	4b12      	ldr	r3, [pc, #72]	; (8011630 <MX_SPI3_Init+0x64>)
 80115e6:	2200      	movs	r2, #0
 80115e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80115ea:	4b11      	ldr	r3, [pc, #68]	; (8011630 <MX_SPI3_Init+0x64>)
 80115ec:	2202      	movs	r2, #2
 80115ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80115f0:	4b0f      	ldr	r3, [pc, #60]	; (8011630 <MX_SPI3_Init+0x64>)
 80115f2:	2201      	movs	r2, #1
 80115f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80115f6:	4b0e      	ldr	r3, [pc, #56]	; (8011630 <MX_SPI3_Init+0x64>)
 80115f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80115fe:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <MX_SPI3_Init+0x64>)
 8011600:	2200      	movs	r2, #0
 8011602:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011604:	4b0a      	ldr	r3, [pc, #40]	; (8011630 <MX_SPI3_Init+0x64>)
 8011606:	2200      	movs	r2, #0
 8011608:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 801160a:	4b09      	ldr	r3, [pc, #36]	; (8011630 <MX_SPI3_Init+0x64>)
 801160c:	2200      	movs	r2, #0
 801160e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011610:	4b07      	ldr	r3, [pc, #28]	; (8011630 <MX_SPI3_Init+0x64>)
 8011612:	2200      	movs	r2, #0
 8011614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011616:	4b06      	ldr	r3, [pc, #24]	; (8011630 <MX_SPI3_Init+0x64>)
 8011618:	220a      	movs	r2, #10
 801161a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801161c:	4804      	ldr	r0, [pc, #16]	; (8011630 <MX_SPI3_Init+0x64>)
 801161e:	f005 f8f3 	bl	8016808 <HAL_SPI_Init>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011628:	f001 f91e 	bl	8012868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801162c:	bf00      	nop
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20000380 	.word	0x20000380
 8011634:	40003c00 	.word	0x40003c00

08011638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801163c:	4b12      	ldr	r3, [pc, #72]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801163e:	4a13      	ldr	r2, [pc, #76]	; (801168c <MX_USART2_UART_Init+0x54>)
 8011640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8011642:	4b11      	ldr	r3, [pc, #68]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011644:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8011648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 801164a:	4b0f      	ldr	r3, [pc, #60]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801164c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011650:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011652:	4b0d      	ldr	r3, [pc, #52]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011654:	2200      	movs	r2, #0
 8011656:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8011658:	4b0b      	ldr	r3, [pc, #44]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8011660:	4b09      	ldr	r3, [pc, #36]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011662:	2204      	movs	r2, #4
 8011664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011666:	4b08      	ldr	r3, [pc, #32]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011668:	2200      	movs	r2, #0
 801166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801166c:	4b06      	ldr	r3, [pc, #24]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801166e:	2200      	movs	r2, #0
 8011670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011672:	4805      	ldr	r0, [pc, #20]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011674:	f006 f912 	bl	801789c <HAL_UART_Init>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	d001      	beq.n	8011682 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 801167e:	f001 f8f3 	bl	8012868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011682:	bf00      	nop
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	200003d8 	.word	0x200003d8
 801168c:	40004400 	.word	0x40004400

08011690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011696:	f107 030c 	add.w	r3, r7, #12
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	605a      	str	r2, [r3, #4]
 80116a0:	609a      	str	r2, [r3, #8]
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116a6:	2300      	movs	r3, #0
 80116a8:	60bb      	str	r3, [r7, #8]
 80116aa:	4b33      	ldr	r3, [pc, #204]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	4a32      	ldr	r2, [pc, #200]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b4:	6313      	str	r3, [r2, #48]	; 0x30
 80116b6:	4b30      	ldr	r3, [pc, #192]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116be:	60bb      	str	r3, [r7, #8]
 80116c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116c2:	2300      	movs	r3, #0
 80116c4:	607b      	str	r3, [r7, #4]
 80116c6:	4b2c      	ldr	r3, [pc, #176]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ca:	4a2b      	ldr	r2, [pc, #172]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116cc:	f043 0301 	orr.w	r3, r3, #1
 80116d0:	6313      	str	r3, [r2, #48]	; 0x30
 80116d2:	4b29      	ldr	r3, [pc, #164]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d6:	f003 0301 	and.w	r3, r3, #1
 80116da:	607b      	str	r3, [r7, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116de:	2300      	movs	r3, #0
 80116e0:	603b      	str	r3, [r7, #0]
 80116e2:	4b25      	ldr	r3, [pc, #148]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e6:	4a24      	ldr	r2, [pc, #144]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116e8:	f043 0302 	orr.w	r3, r3, #2
 80116ec:	6313      	str	r3, [r2, #48]	; 0x30
 80116ee:	4b22      	ldr	r3, [pc, #136]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f2:	f003 0302 	and.w	r3, r3, #2
 80116f6:	603b      	str	r3, [r7, #0]
 80116f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 80116fa:	2201      	movs	r2, #1
 80116fc:	2112      	movs	r1, #18
 80116fe:	481f      	ldr	r0, [pc, #124]	; (801177c <MX_GPIO_Init+0xec>)
 8011700:	f004 fb4c 	bl	8015d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 8011704:	2200      	movs	r2, #0
 8011706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801170a:	481c      	ldr	r0, [pc, #112]	; (801177c <MX_GPIO_Init+0xec>)
 801170c:	f004 fb46 	bl	8015d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 8011710:	2200      	movs	r2, #0
 8011712:	2140      	movs	r1, #64	; 0x40
 8011714:	481a      	ldr	r0, [pc, #104]	; (8011780 <MX_GPIO_Init+0xf0>)
 8011716:	f004 fb41 	bl	8015d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 801171a:	f248 0302 	movw	r3, #32770	; 0x8002
 801171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011720:	2301      	movs	r3, #1
 8011722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011724:	2300      	movs	r3, #0
 8011726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011728:	2300      	movs	r3, #0
 801172a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801172c:	f107 030c 	add.w	r3, r7, #12
 8011730:	4619      	mov	r1, r3
 8011732:	4812      	ldr	r0, [pc, #72]	; (801177c <MX_GPIO_Init+0xec>)
 8011734:	f004 f9ae 	bl	8015a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 8011738:	2310      	movs	r3, #16
 801173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801173c:	2301      	movs	r3, #1
 801173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011740:	2300      	movs	r3, #0
 8011742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011744:	2303      	movs	r3, #3
 8011746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 8011748:	f107 030c 	add.w	r3, r7, #12
 801174c:	4619      	mov	r1, r3
 801174e:	480b      	ldr	r0, [pc, #44]	; (801177c <MX_GPIO_Init+0xec>)
 8011750:	f004 f9a0 	bl	8015a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8011754:	2340      	movs	r3, #64	; 0x40
 8011756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011758:	2301      	movs	r3, #1
 801175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801175c:	2300      	movs	r3, #0
 801175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011760:	2300      	movs	r3, #0
 8011762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8011764:	f107 030c 	add.w	r3, r7, #12
 8011768:	4619      	mov	r1, r3
 801176a:	4805      	ldr	r0, [pc, #20]	; (8011780 <MX_GPIO_Init+0xf0>)
 801176c:	f004 f992 	bl	8015a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8011770:	bf00      	nop
 8011772:	3720      	adds	r7, #32
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	40023800 	.word	0x40023800
 801177c:	40020000 	.word	0x40020000
 8011780:	40020400 	.word	0x40020400

08011784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801178c:	2001      	movs	r0, #1
 801178e:	f00e fd21 	bl	80201d4 <osDelay>
 8011792:	e7fb      	b.n	801178c <StartDefaultTask+0x8>

08011794 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b098      	sub	sp, #96	; 0x60
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	65fb      	str	r3, [r7, #92]	; 0x5c
	float				old_resistance;


	PowerSett.resistance = 0.001;
 80117a0:	4b57      	ldr	r3, [pc, #348]	; (8011900 <vSensorsTask+0x16c>)
 80117a2:	60fb      	str	r3, [r7, #12]
	PowerSett.save = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	723b      	strb	r3, [r7, #8]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 80117a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80117ac:	f00e fd12 	bl	80201d4 <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80117b0:	4b54      	ldr	r3, [pc, #336]	; (8011904 <vSensorsTask+0x170>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f107 0108 	add.w	r1, r7, #8
 80117b8:	2200      	movs	r2, #0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f00f fde6 	bl	802138c <xQueuePeek>
	old_resistance = PowerSett.resistance;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	65bb      	str	r3, [r7, #88]	; 0x58
	PowerOFF_HLW8032();
 80117c4:	f7ff fcf2 	bl	80111ac <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 80117c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117cc:	f00e fd02 	bl	80201d4 <osDelay>
	USART2->DR; //read data from register if exist
 80117d0:	4b4d      	ldr	r3, [pc, #308]	; (8011908 <vSensorsTask+0x174>)
 80117d2:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80117d4:	2218      	movs	r2, #24
 80117d6:	494d      	ldr	r1, [pc, #308]	; (801190c <vSensorsTask+0x178>)
 80117d8:	484d      	ldr	r0, [pc, #308]	; (8011910 <vSensorsTask+0x17c>)
 80117da:	f006 f8af 	bl	801793c <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 80117de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117e2:	f00e fcf7 	bl	80201d4 <osDelay>
	PowerON_HLW8032();
 80117e6:	f7ff fcd5 	bl	8011194 <PowerON_HLW8032>

	sens_task_start:


	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80117ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80117ee:	eeb0 0a67 	vmov.f32	s0, s15
 80117f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80117f6:	4847      	ldr	r0, [pc, #284]	; (8011914 <vSensorsTask+0x180>)
 80117f8:	f003 f974 	bl	8014ae4 <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 80117fc:	4b46      	ldr	r3, [pc, #280]	; (8011918 <vSensorsTask+0x184>)
 80117fe:	6818      	ldr	r0, [r3, #0]
 8011800:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011808:	2200      	movs	r2, #0
 801180a:	f00e fedf 	bl	80205cc <osMessageQueueGet>
 801180e:	4603      	mov	r3, r0
 8011810:	f113 0f02 	cmn.w	r3, #2
 8011814:	d04c      	beq.n	80118b0 <vSensorsTask+0x11c>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 8011816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801181a:	4618      	mov	r0, r3
 801181c:	f003 f9d4 	bl	8014bc8 <RecvRawString>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d155      	bne.n	80118d2 <vSensorsTask+0x13e>
			test_kWh_from_read 				= GetKWh();
 8011826:	f003 fbff 	bl	8015028 <GetKWh>
 801182a:	eef0 7a40 	vmov.f32	s15, s0
 801182e:	4b3b      	ldr	r3, [pc, #236]	; (801191c <vSensorsTask+0x188>)
 8011830:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 8011834:	f003 fbf8 	bl	8015028 <GetKWh>
 8011838:	eeb0 7a40 	vmov.f32	s14, s0
 801183c:	4b38      	ldr	r3, [pc, #224]	; (8011920 <vSensorsTask+0x18c>)
 801183e:	edd3 7a00 	vldr	s15, [r3]
 8011842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011846:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.Voltage 				= GetVoltage();
 801184a:	f003 fab5 	bl	8014db8 <GetVoltage>
 801184e:	eef0 7a40 	vmov.f32	s15, s0
 8011852:	edc7 7a04 	vstr	s15, [r7, #16]
			PowerData.ApparPower 			= GetApparentPower();
 8011856:	f003 fb5f 	bl	8014f18 <GetApparentPower>
 801185a:	eef0 7a40 	vmov.f32	s15, s0
 801185e:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.ActivePower 			= GetActivePower();
 8011862:	f003 fb1b 	bl	8014e9c <GetActivePower>
 8011866:	eef0 7a40 	vmov.f32	s15, s0
 801186a:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Current 				= GetCurrent();
 801186e:	f003 faef 	bl	8014e50 <GetCurrent>
 8011872:	eef0 7a40 	vmov.f32	s15, s0
 8011876:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.PowerFactor			= PowerFactor();
 801187a:	f003 fb75 	bl	8014f68 <PowerFactor>
 801187e:	eef0 7a40 	vmov.f32	s15, s0
 8011882:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.test_pulse_counter 	= GetTestPulse();
 8011886:	f003 fbab 	bl	8014fe0 <GetTestPulse>
 801188a:	4603      	mov	r3, r0
 801188c:	62bb      	str	r3, [r7, #40]	; 0x28
			PowerData.readed_counter 		= GetCountedPulse();
 801188e:	f003 fbb3 	bl	8014ff8 <GetCountedPulse>
 8011892:	4603      	mov	r3, r0
 8011894:	62fb      	str	r3, [r7, #44]	; 0x2c
			PowerData.PF_reg				= GetPFReg();
 8011896:	f003 fbbb 	bl	8015010 <GetPFReg>
 801189a:	4603      	mov	r3, r0
 801189c:	633b      	str	r3, [r7, #48]	; 0x30
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 801189e:	4b21      	ldr	r3, [pc, #132]	; (8011924 <vSensorsTask+0x190>)
 80118a0:	6818      	ldr	r0, [r3, #0]
 80118a2:	f107 0110 	add.w	r1, r7, #16
 80118a6:	2302      	movs	r3, #2
 80118a8:	2200      	movs	r2, #0
 80118aa:	f00f f9e9 	bl	8020c80 <xQueueGenericSend>
 80118ae:	e010      	b.n	80118d2 <vSensorsTask+0x13e>
		}
	}else{
		count++;
 80118b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118b2:	3301      	adds	r3, #1
 80118b4:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118b6:	e004      	b.n	80118c2 <vSensorsTask+0x12e>
			temp = USART2->DR;
 80118b8:	4b13      	ldr	r3, [pc, #76]	; (8011908 <vSensorsTask+0x174>)
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	657b      	str	r3, [r7, #84]	; 0x54
			osThreadYield();
 80118be:	f00e fc69 	bl	8020194 <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118c2:	2218      	movs	r2, #24
 80118c4:	4911      	ldr	r1, [pc, #68]	; (801190c <vSensorsTask+0x178>)
 80118c6:	4812      	ldr	r0, [pc, #72]	; (8011910 <vSensorsTask+0x17c>)
 80118c8:	f006 f838 	bl	801793c <HAL_UARTEx_ReceiveToIdle_IT>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d0f2      	beq.n	80118b8 <vSensorsTask+0x124>
		}
	}
	osThreadYield();
 80118d2:	f00e fc5f 	bl	8020194 <osThreadYield>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80118d6:	4b0b      	ldr	r3, [pc, #44]	; (8011904 <vSensorsTask+0x170>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f107 0108 	add.w	r1, r7, #8
 80118de:	2200      	movs	r2, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f00f fd53 	bl	802138c <xQueuePeek>
    if (PowerSett.resistance != old_resistance){
 80118e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80118ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80118ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	d081      	beq.n	80117fc <vSensorsTask+0x68>
    	old_resistance = PowerSett.resistance;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	65bb      	str	r3, [r7, #88]	; 0x58
    	goto sens_task_start;
 80118fc:	e775      	b.n	80117ea <vSensorsTask+0x56>
 80118fe:	bf00      	nop
 8011900:	3a83126f 	.word	0x3a83126f
 8011904:	20000454 	.word	0x20000454
 8011908:	40004400 	.word	0x40004400
 801190c:	20000474 	.word	0x20000474
 8011910:	200003d8 	.word	0x200003d8
 8011914:	001cafc0 	.word	0x001cafc0
 8011918:	20000448 	.word	0x20000448
 801191c:	20000498 	.word	0x20000498
 8011920:	20000494 	.word	0x20000494
 8011924:	20000450 	.word	0x20000450

08011928 <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 8011928:	b590      	push	{r4, r7, lr}
 801192a:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 801192e:	af12      	add	r7, sp, #72	; 0x48
 8011930:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011934:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011938:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 801193a:	2314      	movs	r3, #20
 801193c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8011940:	2300      	movs	r3, #0
 8011942:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	f207 4204 	addw	r2, r7, #1028	; 0x404
 801194e:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 8011950:	4cbc      	ldr	r4, [pc, #752]	; (8011c44 <vRW_Settings_Tas+0x31c>)
 8011952:	4668      	mov	r0, sp
 8011954:	f104 0310 	add.w	r3, r4, #16
 8011958:	2248      	movs	r2, #72	; 0x48
 801195a:	4619      	mov	r1, r3
 801195c:	f01c f9bb 	bl	802dcd6 <memcpy>
 8011960:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011964:	f003 fe70 	bl	8015648 <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8011968:	4bb7      	ldr	r3, [pc, #732]	; (8011c48 <vRW_Settings_Tas+0x320>)
 801196a:	4ab8      	ldr	r2, [pc, #736]	; (8011c4c <vRW_Settings_Tas+0x324>)
 801196c:	49b8      	ldr	r1, [pc, #736]	; (8011c50 <vRW_Settings_Tas+0x328>)
 801196e:	48b9      	ldr	r0, [pc, #740]	; (8011c54 <vRW_Settings_Tas+0x32c>)
 8011970:	f003 fbe4 	bl	801513c <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011974:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011978:	f507 7101 	add.w	r1, r7, #516	; 0x204
 801197c:	f507 7041 	add.w	r0, r7, #772	; 0x304
 8011980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011984:	f019 f9de 	bl	802ad44 <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8011988:	49b3      	ldr	r1, [pc, #716]	; (8011c58 <vRW_Settings_Tas+0x330>)
 801198a:	48b4      	ldr	r0, [pc, #720]	; (8011c5c <vRW_Settings_Tas+0x334>)
 801198c:	f019 f9be 	bl	802ad0c <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 8011990:	f019 fa10 	bl	802adb4 <spi_fs_mount>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	da03      	bge.n	80119a2 <vRW_Settings_Tas+0x7a>
		spi_fs_format();
 801199a:	f019 fa33 	bl	802ae04 <spi_fs_format>
		spi_fs_mount();
 801199e:	f019 fa09 	bl	802adb4 <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 80119a2:	48af      	ldr	r0, [pc, #700]	; (8011c60 <vRW_Settings_Tas+0x338>)
 80119a4:	f019 fab6 	bl	802af14 <spi_fs_file_size>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	dd0f      	ble.n	80119ce <vRW_Settings_Tas+0xa6>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 80119ae:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119b2:	2308      	movs	r3, #8
 80119b4:	2200      	movs	r2, #0
 80119b6:	48aa      	ldr	r0, [pc, #680]	; (8011c60 <vRW_Settings_Tas+0x338>)
 80119b8:	f019 fa30 	bl	802ae1c <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119bc:	4ba9      	ldr	r3, [pc, #676]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119c4:	2302      	movs	r3, #2
 80119c6:	2200      	movs	r2, #0
 80119c8:	f00f f95a 	bl	8020c80 <xQueueGenericSend>
 80119cc:	e013      	b.n	80119f6 <vRW_Settings_Tas+0xce>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 80119ce:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119d2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119d6:	4aa4      	ldr	r2, [pc, #656]	; (8011c68 <vRW_Settings_Tas+0x340>)
 80119d8:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 80119da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119de:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119e2:	2201      	movs	r2, #1
 80119e4:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119e6:	4b9f      	ldr	r3, [pc, #636]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 80119e8:	6818      	ldr	r0, [r3, #0]
 80119ea:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119ee:	2302      	movs	r3, #2
 80119f0:	2200      	movs	r2, #0
 80119f2:	f00f f945 	bl	8020c80 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 80119f6:	489d      	ldr	r0, [pc, #628]	; (8011c6c <vRW_Settings_Tas+0x344>)
 80119f8:	f019 fa8c 	bl	802af14 <spi_fs_file_size>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	dd0f      	ble.n	8011a22 <vRW_Settings_Tas+0xfa>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8011a02:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a06:	23c6      	movs	r3, #198	; 0xc6
 8011a08:	2200      	movs	r2, #0
 8011a0a:	4898      	ldr	r0, [pc, #608]	; (8011c6c <vRW_Settings_Tas+0x344>)
 8011a0c:	f019 fa06 	bl	802ae1c <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a10:	4b97      	ldr	r3, [pc, #604]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011a12:	6818      	ldr	r0, [r3, #0]
 8011a14:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a18:	2302      	movs	r3, #2
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f00f f930 	bl	8020c80 <xQueueGenericSend>
 8011a20:	e027      	b.n	8011a72 <vRW_Settings_Tas+0x14a>
	}else{
		MQTT_cred.save 			= 1;
 8011a22:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a26:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 8011a2e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a32:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a36:	2200      	movs	r2, #0
 8011a38:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 8011a3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a3e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a42:	2200      	movs	r2, #0
 8011a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		MQTT_cred.pass[0]		= '\0';
 8011a48:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a4c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a50:	2200      	movs	r2, #0
 8011a52:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		MQTT_cred.uri[0]		= '\0';
 8011a56:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a5a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a5e:	2200      	movs	r2, #0
 8011a60:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a62:	4b83      	ldr	r3, [pc, #524]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011a64:	6818      	ldr	r0, [r3, #0]
 8011a66:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f00f f907 	bl	8020c80 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 8011a72:	4880      	ldr	r0, [pc, #512]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a74:	f019 fa4e 	bl	802af14 <spi_fs_file_size>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	dd0f      	ble.n	8011a9e <vRW_Settings_Tas+0x176>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a7e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a82:	2302      	movs	r3, #2
 8011a84:	2200      	movs	r2, #0
 8011a86:	487b      	ldr	r0, [pc, #492]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a88:	f019 f9c8 	bl	802ae1c <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a8c:	4b7a      	ldr	r3, [pc, #488]	; (8011c78 <vRW_Settings_Tas+0x350>)
 8011a8e:	6818      	ldr	r0, [r3, #0]
 8011a90:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a94:	2302      	movs	r3, #2
 8011a96:	2200      	movs	r2, #0
 8011a98:	f00f f8f2 	bl	8020c80 <xQueueGenericSend>
 8011a9c:	e00b      	b.n	8011ab6 <vRW_Settings_Tas+0x18e>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011a9e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aa2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011aaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aae:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011ab6:	4871      	ldr	r0, [pc, #452]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011ab8:	f019 fa2c 	bl	802af14 <spi_fs_file_size>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	dd0b      	ble.n	8011ada <vRW_Settings_Tas+0x1b2>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011ac2:	2304      	movs	r3, #4
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	496e      	ldr	r1, [pc, #440]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011ac8:	486c      	ldr	r0, [pc, #432]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011aca:	f019 f9a7 	bl	802ae1c <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011ace:	4b6c      	ldr	r3, [pc, #432]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011ad6:	6013      	str	r3, [r2, #0]
 8011ad8:	e00d      	b.n	8011af6 <vRW_Settings_Tas+0x1ce>
	}else{
		test_kWh_from_flash = 0.0;
 8011ada:	4b69      	ldr	r3, [pc, #420]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011adc:	f04f 0200 	mov.w	r2, #0
 8011ae0:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011ae2:	f04f 0300 	mov.w	r3, #0
 8011ae6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011aea:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011aec:	2204      	movs	r2, #4
 8011aee:	4964      	ldr	r1, [pc, #400]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011af0:	4862      	ldr	r0, [pc, #392]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011af2:	f019 f9d7 	bl	802aea4 <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011af6:	4863      	ldr	r0, [pc, #396]	; (8011c84 <vRW_Settings_Tas+0x35c>)
 8011af8:	f019 fa88 	bl	802b00c <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011afc:	4862      	ldr	r0, [pc, #392]	; (8011c88 <vRW_Settings_Tas+0x360>)
 8011afe:	f019 fb67 	bl	802b1d0 <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011b02:	4861      	ldr	r0, [pc, #388]	; (8011c88 <vRW_Settings_Tas+0x360>)
 8011b04:	f019 fa82 	bl	802b00c <spi_fs_mkdir>
	/* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011b08:	4b56      	ldr	r3, [pc, #344]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b10:	2200      	movs	r2, #0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f00f fc3a 	bl	802138c <xQueuePeek>
	  if (PowerSett.save){
 8011b18:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b1c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d014      	beq.n	8011b50 <vRW_Settings_Tas+0x228>
		  PowerSett.save = 0;
 8011b26:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b2a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b2e:	2200      	movs	r2, #0
 8011b30:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011b32:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011b36:	2208      	movs	r2, #8
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4849      	ldr	r0, [pc, #292]	; (8011c60 <vRW_Settings_Tas+0x338>)
 8011b3c:	f019 f9b2 	bl	802aea4 <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011b40:	4b48      	ldr	r3, [pc, #288]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 8011b42:	6818      	ldr	r0, [r3, #0]
 8011b44:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b48:	2302      	movs	r3, #2
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f00f f898 	bl	8020c80 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011b50:	4b47      	ldr	r3, [pc, #284]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b58:	2200      	movs	r2, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f00f fc16 	bl	802138c <xQueuePeek>
	  if (MQTT_cred.save){
 8011b60:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b64:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d014      	beq.n	8011b98 <vRW_Settings_Tas+0x270>
		  MQTT_cred.save = 0;
 8011b6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b72:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b76:	2200      	movs	r2, #0
 8011b78:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b7e:	22c6      	movs	r2, #198	; 0xc6
 8011b80:	4619      	mov	r1, r3
 8011b82:	483a      	ldr	r0, [pc, #232]	; (8011c6c <vRW_Settings_Tas+0x344>)
 8011b84:	f019 f98e 	bl	802aea4 <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b88:	4b39      	ldr	r3, [pc, #228]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011b8a:	6818      	ldr	r0, [r3, #0]
 8011b8c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b90:	2302      	movs	r3, #2
 8011b92:	2200      	movs	r2, #0
 8011b94:	f00f f874 	bl	8020c80 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011b98:	4b37      	ldr	r3, [pc, #220]	; (8011c78 <vRW_Settings_Tas+0x350>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f00f fbf2 	bl	802138c <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011ba8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bac:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00c      	beq.n	8011bd0 <vRW_Settings_Tas+0x2a8>
		  mb_tcp_sett.save = 0;
 8011bb6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bba:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bc6:	2202      	movs	r2, #2
 8011bc8:	4619      	mov	r1, r3
 8011bca:	482a      	ldr	r0, [pc, #168]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011bcc:	f019 f96a 	bl	802aea4 <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011bd0:	4b2e      	ldr	r3, [pc, #184]	; (8011c8c <vRW_Settings_Tas+0x364>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f107 010c 	add.w	r1, r7, #12
 8011bd8:	2200      	movs	r2, #0
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f00f fbd6 	bl	802138c <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011be0:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8011be4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d312      	bcc.n	8011c12 <vRW_Settings_Tas+0x2ea>
 8011bec:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bf0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011bf4:	ed93 7a02 	vldr	s14, [r3, #8]
 8011bf8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8011bfc:	edd3 7a00 	vldr	s15, [r3]
 8011c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c10:	dd0d      	ble.n	8011c2e <vRW_Settings_Tas+0x306>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011c12:	f107 030c 	add.w	r3, r7, #12
 8011c16:	3308      	adds	r3, #8
 8011c18:	2204      	movs	r2, #4
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4817      	ldr	r0, [pc, #92]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011c1e:	f019 f941 	bl	802aea4 <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011c22:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011c26:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011c2a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  time_counter ++;
 8011c2e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011c32:	3301      	adds	r3, #1
 8011c34:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    osDelay(delay1s);
 8011c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c3c:	f00e faca 	bl	80201d4 <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011c40:	e762      	b.n	8011b08 <vRW_Settings_Tas+0x1e0>
 8011c42:	bf00      	nop
 8011c44:	20000328 	.word	0x20000328
 8011c48:	0801569d 	.word	0x0801569d
 8011c4c:	08015679 	.word	0x08015679
 8011c50:	080156d9 	.word	0x080156d9
 8011c54:	080156c1 	.word	0x080156c1
 8011c58:	08011115 	.word	0x08011115
 8011c5c:	080110f9 	.word	0x080110f9
 8011c60:	08031a04 	.word	0x08031a04
 8011c64:	20000454 	.word	0x20000454
 8011c68:	3a83126f 	.word	0x3a83126f
 8011c6c:	08031a14 	.word	0x08031a14
 8011c70:	20000458 	.word	0x20000458
 8011c74:	08031a24 	.word	0x08031a24
 8011c78:	2000045c 	.word	0x2000045c
 8011c7c:	08031a38 	.word	0x08031a38
 8011c80:	20000494 	.word	0x20000494
 8011c84:	08031a4c 	.word	0x08031a4c
 8011c88:	08031a54 	.word	0x08031a54
 8011c8c:	20000450 	.word	0x20000450

08011c90 <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011ca2:	f00a f9c5 	bl	801c030 <DHCP_time_handler>
	httpServer_time_handler();
 8011ca6:	f00d fda1 	bl	801f7ec <httpServer_time_handler>
	dns_service_increment_second();
 8011caa:	f00a ff4f 	bl	801cb4c <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011cae:	4b06      	ldr	r3, [pc, #24]	; (8011cc8 <vOneSecondTickTask+0x38>)
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	f107 010c 	add.w	r1, r7, #12
 8011cb6:	2302      	movs	r3, #2
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f00e ffe1 	bl	8020c80 <xQueueGenericSend>
    osDelay(delay1s);
 8011cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011cc2:	f00e fa87 	bl	80201d4 <osDelay>
	seconds++ ;
 8011cc6:	e7e9      	b.n	8011c9c <vOneSecondTickTask+0xc>
 8011cc8:	20000460 	.word	0x20000460

08011ccc <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011ccc:	b590      	push	{r4, r7, lr}
 8011cce:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af12      	add	r7, sp, #72	; 0x48
 8011cd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cda:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011cde:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011ce2:	f103 0308 	add.w	r3, r3, #8
 8011ce6:	2220      	movs	r2, #32
 8011ce8:	2100      	movs	r1, #0
 8011cea:	4618      	mov	r0, r3
 8011cec:	f01b fe1e 	bl	802d92c <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011cf0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011cf4:	f103 0308 	add.w	r3, r3, #8
 8011cf8:	2217      	movs	r2, #23
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f01b fe15 	bl	802d92c <memset>

	  NetInfo.mac[0]	= 0x40;
 8011d02:	2340      	movs	r3, #64	; 0x40
 8011d04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d08:	f102 0208 	add.w	r2, r2, #8
 8011d0c:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011d0e:	2308      	movs	r3, #8
 8011d10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d14:	f102 0209 	add.w	r2, r2, #9
 8011d18:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011d1a:	4bdc      	ldr	r3, [pc, #880]	; (801208c <vMaintEthTask+0x3c0>)
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d22:	f102 020a 	add.w	r2, r2, #10
 8011d26:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011d28:	4bd9      	ldr	r3, [pc, #868]	; (8012090 <vMaintEthTask+0x3c4>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d30:	f102 020b 	add.w	r2, r2, #11
 8011d34:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011d36:	4bd7      	ldr	r3, [pc, #860]	; (8012094 <vMaintEthTask+0x3c8>)
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d3e:	f102 020c 	add.w	r2, r2, #12
 8011d42:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011d44:	4bd4      	ldr	r3, [pc, #848]	; (8012098 <vMaintEthTask+0x3cc>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d4c:	f102 020d 	add.w	r2, r2, #13
 8011d50:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011d52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011d56:	f103 030b 	add.w	r3, r3, #11
 8011d5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d5e:	f102 0208 	add.w	r2, r2, #8
 8011d62:	6810      	ldr	r0, [r2, #0]
 8011d64:	6018      	str	r0, [r3, #0]
 8011d66:	8892      	ldrh	r2, [r2, #4]
 8011d68:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011d6a:	2302      	movs	r3, #2
 8011d6c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d70:	f102 021e 	add.w	r2, r2, #30
 8011d74:	7013      	strb	r3, [r2, #0]
 8011d76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d7a:	f103 030e 	add.w	r3, r3, #14
 8011d7e:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d80:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d84:	f102 0211 	add.w	r2, r2, #17
 8011d88:	6013      	str	r3, [r2, #0]
 8011d8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d8e:	f103 0312 	add.w	r3, r3, #18
 8011d92:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011d94:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d98:	f102 0215 	add.w	r2, r2, #21
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011da2:	f103 0316 	add.w	r3, r3, #22
 8011da6:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011da8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dac:	f102 0219 	add.w	r2, r2, #25
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011db6:	f103 031a 	add.w	r3, r3, #26
 8011dba:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011dbc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dc0:	f102 021d 	add.w	r2, r2, #29
 8011dc4:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011dc6:	4cb5      	ldr	r4, [pc, #724]	; (801209c <vMaintEthTask+0x3d0>)
 8011dc8:	4668      	mov	r0, sp
 8011dca:	f104 0310 	add.w	r3, r4, #16
 8011dce:	2248      	movs	r2, #72	; 0x48
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	f01b ff80 	bl	802dcd6 <memcpy>
 8011dd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011dda:	f00e f859 	bl	801fe90 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011dde:	49b0      	ldr	r1, [pc, #704]	; (80120a0 <vMaintEthTask+0x3d4>)
 8011de0:	48b0      	ldr	r0, [pc, #704]	; (80120a4 <vMaintEthTask+0x3d8>)
 8011de2:	f00e f801 	bl	801fde8 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011de6:	48b0      	ldr	r0, [pc, #704]	; (80120a8 <vMaintEthTask+0x3dc>)
 8011de8:	f00d ffe6 	bl	801fdb8 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011dec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011df0:	f103 0308 	add.w	r3, r3, #8
 8011df4:	4618      	mov	r0, r3
 8011df6:	f00d fee3 	bl	801fbc0 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011dfa:	49ac      	ldr	r1, [pc, #688]	; (80120ac <vMaintEthTask+0x3e0>)
 8011dfc:	48ac      	ldr	r0, [pc, #688]	; (80120b0 <vMaintEthTask+0x3e4>)
 8011dfe:	f008 f881 	bl	8019f04 <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011e02:	49ac      	ldr	r1, [pc, #688]	; (80120b4 <vMaintEthTask+0x3e8>)
 8011e04:	48ac      	ldr	r0, [pc, #688]	; (80120b8 <vMaintEthTask+0x3ec>)
 8011e06:	f008 f857 	bl	8019eb8 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011e0a:	49ac      	ldr	r1, [pc, #688]	; (80120bc <vMaintEthTask+0x3f0>)
 8011e0c:	48ac      	ldr	r0, [pc, #688]	; (80120c0 <vMaintEthTask+0x3f4>)
 8011e0e:	f008 f82d 	bl	8019e6c <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011e12:	4aac      	ldr	r2, [pc, #688]	; (80120c4 <vMaintEthTask+0x3f8>)
 8011e14:	49ac      	ldr	r1, [pc, #688]	; (80120c8 <vMaintEthTask+0x3fc>)
 8011e16:	48ac      	ldr	r0, [pc, #688]	; (80120c8 <vMaintEthTask+0x3fc>)
 8011e18:	f008 fdd8 	bl	801a9cc <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011e1c:	f107 0320 	add.w	r3, r7, #32
 8011e20:	3b18      	subs	r3, #24
 8011e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e26:	4619      	mov	r1, r3
 8011e28:	2004      	movs	r0, #4
 8011e2a:	f00a fe39 	bl	801caa0 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011e2e:	48a7      	ldr	r0, [pc, #668]	; (80120cc <vMaintEthTask+0x400>)
 8011e30:	f00a fe24 	bl	801ca7c <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011e34:	49a6      	ldr	r1, [pc, #664]	; (80120d0 <vMaintEthTask+0x404>)
 8011e36:	48a7      	ldr	r0, [pc, #668]	; (80120d4 <vMaintEthTask+0x408>)
 8011e38:	f00a fe04 	bl	801ca44 <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011e3c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e40:	f103 031e 	add.w	r3, r3, #30
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e4a:	f102 0201 	add.w	r2, r2, #1
 8011e4e:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011e56:	f102 0208 	add.w	r2, r2, #8
 8011e5a:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011e5c:	f00d ff6e 	bl	801fd3c <w5500_init>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	f040 81eb 	bne.w	801223e <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011e68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e6c:	f00f ff6e 	bl	8021d4c <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e70:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e74:	f103 0308 	add.w	r3, r3, #8
 8011e78:	2206      	movs	r2, #6
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8011e80:	f006 fdb0 	bl	80189e4 <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e88:	f103 031e 	add.w	r3, r3, #30
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	2b02      	cmp	r3, #2
 8011e90:	d106      	bne.n	8011ea0 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e92:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8011e96:	4619      	mov	r1, r3
 8011e98:	2000      	movs	r0, #0
 8011e9a:	f00a f81f 	bl	801bedc <DHCP_init>
 8011e9e:	e003      	b.n	8011ea8 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011ea0:	f00d fe9e 	bl	801fbe0 <network_init>
			set_ip_aasigned();
 8011ea4:	f00d ff3e 	bl	801fd24 <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011ea8:	f7ff f940 	bl	801112c <SocketMutexTake>
			dhcp_rutine();
 8011eac:	f00d fee8 	bl	801fc80 <dhcp_rutine>

			if (!link_status()){
 8011eb0:	f00d fefe 	bl	801fcb0 <link_status>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f040 80e0 	bne.w	801207c <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ec2:	f102 020e 	add.w	r2, r2, #14
 8011ec6:	7013      	strb	r3, [r2, #0]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ece:	f102 020f 	add.w	r2, r2, #15
 8011ed2:	7013      	strb	r3, [r2, #0]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eda:	f102 0210 	add.w	r2, r2, #16
 8011ede:	7013      	strb	r3, [r2, #0]
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ee6:	f102 0211 	add.w	r2, r2, #17
 8011eea:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ef2:	f102 0212 	add.w	r2, r2, #18
 8011ef6:	7013      	strb	r3, [r2, #0]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011efe:	f102 0213 	add.w	r2, r2, #19
 8011f02:	7013      	strb	r3, [r2, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f0a:	f102 0214 	add.w	r2, r2, #20
 8011f0e:	7013      	strb	r3, [r2, #0]
 8011f10:	2300      	movs	r3, #0
 8011f12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f16:	f102 0215 	add.w	r2, r2, #21
 8011f1a:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f22:	f102 0216 	add.w	r2, r2, #22
 8011f26:	7013      	strb	r3, [r2, #0]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f2e:	f102 0217 	add.w	r2, r2, #23
 8011f32:	7013      	strb	r3, [r2, #0]
 8011f34:	2300      	movs	r3, #0
 8011f36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f3a:	f102 0218 	add.w	r2, r2, #24
 8011f3e:	7013      	strb	r3, [r2, #0]
 8011f40:	2300      	movs	r3, #0
 8011f42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f46:	f102 0219 	add.w	r2, r2, #25
 8011f4a:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f52:	f102 021a 	add.w	r2, r2, #26
 8011f56:	7013      	strb	r3, [r2, #0]
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f5e:	f102 021b 	add.w	r2, r2, #27
 8011f62:	7013      	strb	r3, [r2, #0]
 8011f64:	2300      	movs	r3, #0
 8011f66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f6a:	f102 021c 	add.w	r2, r2, #28
 8011f6e:	7013      	strb	r3, [r2, #0]
 8011f70:	2300      	movs	r3, #0
 8011f72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f76:	f102 021d 	add.w	r2, r2, #29
 8011f7a:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f7c:	f7ff f8e4 	bl	8011148 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f80:	2300      	movs	r3, #0
 8011f82:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f86:	f102 021f 	add.w	r2, r2, #31
 8011f8a:	7013      	strb	r3, [r2, #0]
 8011f8c:	e05a      	b.n	8012044 <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f92:	f103 031f 	add.w	r3, r3, #31
 8011f96:	781a      	ldrb	r2, [r3, #0]
 8011f98:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f9c:	f103 031f 	add.w	r3, r3, #31
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fa6:	443a      	add	r2, r7
 8011fa8:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011fac:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fb0:	443b      	add	r3, r7
 8011fb2:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011fb6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fba:	f103 031f 	add.w	r3, r3, #31
 8011fbe:	781a      	ldrb	r2, [r3, #0]
 8011fc0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fc4:	f103 031f 	add.w	r3, r3, #31
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fce:	443a      	add	r2, r7
 8011fd0:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011fd4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fd8:	443b      	add	r3, r7
 8011fda:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011fde:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fe2:	f103 031f 	add.w	r3, r3, #31
 8011fe6:	781a      	ldrb	r2, [r3, #0]
 8011fe8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fec:	f103 031f 	add.w	r3, r3, #31
 8011ff0:	781b      	ldrb	r3, [r3, #0]
 8011ff2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011ff6:	443a      	add	r2, r7
 8011ff8:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8011ffc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012000:	443b      	add	r3, r7
 8012002:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8012006:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801200a:	f103 031f 	add.w	r3, r3, #31
 801200e:	781a      	ldrb	r2, [r3, #0]
 8012010:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012014:	f103 031f 	add.w	r3, r3, #31
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801201e:	443a      	add	r2, r7
 8012020:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012024:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012028:	443b      	add	r3, r7
 801202a:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 801202e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012032:	f103 031f 	add.w	r3, r3, #31
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	3301      	adds	r3, #1
 801203a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801203e:	f102 021f 	add.w	r2, r2, #31
 8012042:	7013      	strb	r3, [r2, #0]
 8012044:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012048:	f103 031f 	add.w	r3, r3, #31
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b03      	cmp	r3, #3
 8012050:	d99d      	bls.n	8011f8e <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 8012052:	2300      	movs	r3, #0
 8012054:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8012058:	f102 0208 	add.w	r2, r2, #8
 801205c:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 801205e:	4b1e      	ldr	r3, [pc, #120]	; (80120d8 <vMaintEthTask+0x40c>)
 8012060:	6818      	ldr	r0, [r3, #0]
 8012062:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012066:	f101 0108 	add.w	r1, r1, #8
 801206a:	2302      	movs	r3, #2
 801206c:	2200      	movs	r2, #0
 801206e:	f00e fe07 	bl	8020c80 <xQueueGenericSend>
				break;
 8012072:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8012074:	2001      	movs	r0, #1
 8012076:	f00e f8ad 	bl	80201d4 <osDelay>
 801207a:	e6df      	b.n	8011e3c <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 801207c:	2300      	movs	r3, #0
 801207e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012082:	f102 021f 	add.w	r2, r2, #31
 8012086:	7013      	strb	r3, [r2, #0]
 8012088:	e083      	b.n	8012192 <vMaintEthTask+0x4c6>
 801208a:	bf00      	nop
 801208c:	1fff7a10 	.word	0x1fff7a10
 8012090:	1fff7a11 	.word	0x1fff7a11
 8012094:	1fff7a12 	.word	0x1fff7a12
 8012098:	1fff7a13 	.word	0x1fff7a13
 801209c:	20000380 	.word	0x20000380
 80120a0:	0801fe49 	.word	0x0801fe49
 80120a4:	0801fe31 	.word	0x0801fe31
 80120a8:	080201d5 	.word	0x080201d5
 80120ac:	0801fec1 	.word	0x0801fec1
 80120b0:	0801fee5 	.word	0x0801fee5
 80120b4:	0801fe79 	.word	0x0801fe79
 80120b8:	0801fe61 	.word	0x0801fe61
 80120bc:	080110e1 	.word	0x080110e1
 80120c0:	080110c5 	.word	0x080110c5
 80120c4:	0801fc15 	.word	0x0801fc15
 80120c8:	0801fc2d 	.word	0x0801fc2d
 80120cc:	0801fd0d 	.word	0x0801fd0d
 80120d0:	0801117d 	.word	0x0801117d
 80120d4:	08011161 	.word	0x08011161
 80120d8:	2000044c 	.word	0x2000044c
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 80120dc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120e0:	f103 031f 	add.w	r3, r3, #31
 80120e4:	781a      	ldrb	r2, [r3, #0]
 80120e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ea:	f103 031f 	add.w	r3, r3, #31
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 80120f4:	443a      	add	r2, r7
 80120f6:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 80120fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80120fe:	443b      	add	r3, r7
 8012100:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8012104:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012108:	f103 031f 	add.w	r3, r3, #31
 801210c:	781a      	ldrb	r2, [r3, #0]
 801210e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012112:	f103 031f 	add.w	r3, r3, #31
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801211c:	443a      	add	r2, r7
 801211e:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8012122:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012126:	443b      	add	r3, r7
 8012128:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 801212c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012130:	f103 031f 	add.w	r3, r3, #31
 8012134:	781a      	ldrb	r2, [r3, #0]
 8012136:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801213a:	f103 031f 	add.w	r3, r3, #31
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012144:	443a      	add	r2, r7
 8012146:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 801214a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801214e:	443b      	add	r3, r7
 8012150:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8012154:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012158:	f103 031f 	add.w	r3, r3, #31
 801215c:	781a      	ldrb	r2, [r3, #0]
 801215e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012162:	f103 031f 	add.w	r3, r3, #31
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801216c:	443a      	add	r2, r7
 801216e:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012172:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012176:	443b      	add	r3, r7
 8012178:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 801217c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012180:	f103 031f 	add.w	r3, r3, #31
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	3301      	adds	r3, #1
 8012188:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801218c:	f102 021f 	add.w	r2, r2, #31
 8012190:	7013      	strb	r3, [r2, #0]
 8012192:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012196:	f103 031f 	add.w	r3, r3, #31
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b03      	cmp	r3, #3
 801219e:	d99d      	bls.n	80120dc <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 80121a0:	2301      	movs	r3, #1
 80121a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121a6:	f102 0208 	add.w	r2, r2, #8
 80121aa:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 80121ac:	f00d fda2 	bl	801fcf4 <link_speed>
 80121b0:	4603      	mov	r3, r0
 80121b2:	b2db      	uxtb	r3, r3
 80121b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121b8:	f102 020a 	add.w	r2, r2, #10
 80121bc:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 80121be:	f00d fd8d 	bl	801fcdc <link_duplex>
 80121c2:	4603      	mov	r3, r0
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121ca:	f102 0209 	add.w	r2, r2, #9
 80121ce:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 80121d0:	f009 ffbc 	bl	801c14c <getDHCPLeasetime>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80121da:	f102 0204 	add.w	r2, r2, #4
 80121de:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 80121e0:	f7fe ffb2 	bl	8011148 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 80121e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121e8:	f103 030e 	add.w	r3, r3, #14
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10e      	bne.n	8012210 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121f2:	4b14      	ldr	r3, [pc, #80]	; (8012244 <vMaintEthTask+0x578>)
 80121f4:	6818      	ldr	r0, [r3, #0]
 80121f6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80121fa:	f101 0108 	add.w	r1, r1, #8
 80121fe:	2302      	movs	r3, #2
 8012200:	2200      	movs	r2, #0
 8012202:	f00e fd3d 	bl	8020c80 <xQueueGenericSend>
				osDelay(delay1s);
 8012206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801220a:	f00d ffe3 	bl	80201d4 <osDelay>
				continue;
 801220e:	e015      	b.n	801223c <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 8012210:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012214:	f103 0308 	add.w	r3, r3, #8
 8012218:	3315      	adds	r3, #21
 801221a:	4618      	mov	r0, r3
 801221c:	f00a fc5a 	bl	801cad4 <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012220:	4b08      	ldr	r3, [pc, #32]	; (8012244 <vMaintEthTask+0x578>)
 8012222:	6818      	ldr	r0, [r3, #0]
 8012224:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012228:	f101 0108 	add.w	r1, r1, #8
 801222c:	2302      	movs	r3, #2
 801222e:	2200      	movs	r2, #0
 8012230:	f00e fd26 	bl	8020c80 <xQueueGenericSend>
			osDelay(delay1s);
 8012234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012238:	f00d ffcc 	bl	80201d4 <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 801223c:	e634      	b.n	8011ea8 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 801223e:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 8012240:	e5fc      	b.n	8011e3c <vMaintEthTask+0x170>
 8012242:	bf00      	nop
 8012244:	2000044c 	.word	0x2000044c

08012248 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8012250:	4b1f      	ldr	r3, [pc, #124]	; (80122d0 <vDebugMemUsage+0x88>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4618      	mov	r0, r3
 8012256:	f00d ff7f 	bl	8020158 <osThreadGetStackSpace>
 801225a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 801225c:	4b1d      	ldr	r3, [pc, #116]	; (80122d4 <vDebugMemUsage+0x8c>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4618      	mov	r0, r3
 8012262:	f00d ff79 	bl	8020158 <osThreadGetStackSpace>
 8012266:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8012268:	4b1b      	ldr	r3, [pc, #108]	; (80122d8 <vDebugMemUsage+0x90>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4618      	mov	r0, r3
 801226e:	f00d ff73 	bl	8020158 <osThreadGetStackSpace>
 8012272:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 8012274:	4b19      	ldr	r3, [pc, #100]	; (80122dc <vDebugMemUsage+0x94>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4618      	mov	r0, r3
 801227a:	f00d ff6d 	bl	8020158 <osThreadGetStackSpace>
 801227e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8012280:	4b17      	ldr	r3, [pc, #92]	; (80122e0 <vDebugMemUsage+0x98>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4618      	mov	r0, r3
 8012286:	f00d ff67 	bl	8020158 <osThreadGetStackSpace>
 801228a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 801228c:	4b15      	ldr	r3, [pc, #84]	; (80122e4 <vDebugMemUsage+0x9c>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f00d ff61 	bl	8020158 <osThreadGetStackSpace>
 8012296:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 8012298:	4b13      	ldr	r3, [pc, #76]	; (80122e8 <vDebugMemUsage+0xa0>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4618      	mov	r0, r3
 801229e:	f00d ff5b 	bl	8020158 <osThreadGetStackSpace>
 80122a2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(mqttClientTaskHandle);
 80122a4:	4b11      	ldr	r3, [pc, #68]	; (80122ec <vDebugMemUsage+0xa4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f00d ff55 	bl	8020158 <osThreadGetStackSpace>
 80122ae:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SendBroadcastHandle);
 80122b0:	4b0f      	ldr	r3, [pc, #60]	; (80122f0 <vDebugMemUsage+0xa8>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f00d ff4f 	bl	8020158 <osThreadGetStackSpace>
 80122ba:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122bc:	2000      	movs	r0, #0
 80122be:	f00d ff4b 	bl	8020158 <osThreadGetStackSpace>
 80122c2:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 80122c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122c8:	f00d ff84 	bl	80201d4 <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80122cc:	e7c0      	b.n	8012250 <vDebugMemUsage+0x8>
 80122ce:	bf00      	nop
 80122d0:	20000420 	.word	0x20000420
 80122d4:	20000424 	.word	0x20000424
 80122d8:	20000428 	.word	0x20000428
 80122dc:	2000042c 	.word	0x2000042c
 80122e0:	20000430 	.word	0x20000430
 80122e4:	20000434 	.word	0x20000434
 80122e8:	20000438 	.word	0x20000438
 80122ec:	2000043c 	.word	0x2000043c
 80122f0:	20000444 	.word	0x20000444

080122f4 <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012302:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 8012306:	4a4d      	ldr	r2, [pc, #308]	; (801243c <httpServ+0x148>)
 8012308:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801230c:	f103 0308 	add.w	r3, r3, #8
 8012310:	6812      	ldr	r2, [r2, #0]
 8012312:	4611      	mov	r1, r2
 8012314:	8019      	strh	r1, [r3, #0]
 8012316:	3302      	adds	r3, #2
 8012318:	0c12      	lsrs	r2, r2, #16
 801231a:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 801231c:	2303      	movs	r3, #3
 801231e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012322:	f102 020e 	add.w	r2, r2, #14
 8012326:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 8012328:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801232c:	f103 0308 	add.w	r3, r3, #8
 8012330:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012334:	f102 020e 	add.w	r2, r2, #14
 8012338:	7812      	ldrb	r2, [r2, #0]
 801233a:	f607 0108 	addw	r1, r7, #2056	; 0x808
 801233e:	f107 0010 	add.w	r0, r7, #16
 8012342:	3808      	subs	r0, #8
 8012344:	f00c fc7a 	bl	801ec3c <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 8012348:	483d      	ldr	r0, [pc, #244]	; (8012440 <httpServ+0x14c>)
 801234a:	f00d fbe9 	bl	801fb20 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 801234e:	483d      	ldr	r0, [pc, #244]	; (8012444 <httpServ+0x150>)
 8012350:	f00d fbfe 	bl	801fb50 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 8012354:	4b3c      	ldr	r3, [pc, #240]	; (8012448 <httpServ+0x154>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2103      	movs	r1, #3
 801235a:	4618      	mov	r0, r3
 801235c:	f000 fe0a 	bl	8012f74 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 8012360:	4b3a      	ldr	r3, [pc, #232]	; (801244c <httpServ+0x158>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2104      	movs	r1, #4
 8012366:	4618      	mov	r0, r3
 8012368:	f000 fe04 	bl	8012f74 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 801236c:	4b38      	ldr	r3, [pc, #224]	; (8012450 <httpServ+0x15c>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2100      	movs	r1, #0
 8012372:	4618      	mov	r0, r3
 8012374:	f000 fdfe 	bl	8012f74 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8012378:	4b36      	ldr	r3, [pc, #216]	; (8012454 <httpServ+0x160>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2102      	movs	r1, #2
 801237e:	4618      	mov	r0, r3
 8012380:	f000 fdf8 	bl	8012f74 <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 8012384:	4b34      	ldr	r3, [pc, #208]	; (8012458 <httpServ+0x164>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2105      	movs	r1, #5
 801238a:	4618      	mov	r0, r3
 801238c:	f000 fdf2 	bl	8012f74 <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 8012390:	4932      	ldr	r1, [pc, #200]	; (801245c <httpServ+0x168>)
 8012392:	4833      	ldr	r0, [pc, #204]	; (8012460 <httpServ+0x16c>)
 8012394:	f00d fa46 	bl	801f824 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 8012398:	4932      	ldr	r1, [pc, #200]	; (8012464 <httpServ+0x170>)
 801239a:	4833      	ldr	r0, [pc, #204]	; (8012468 <httpServ+0x174>)
 801239c:	f00d fa42 	bl	801f824 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 80123a0:	4932      	ldr	r1, [pc, #200]	; (801246c <httpServ+0x178>)
 80123a2:	4833      	ldr	r0, [pc, #204]	; (8012470 <httpServ+0x17c>)
 80123a4:	f00d fa3e 	bl	801f824 <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 80123a8:	4b32      	ldr	r3, [pc, #200]	; (8012474 <httpServ+0x180>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80123b0:	f101 010c 	add.w	r1, r1, #12
 80123b4:	2200      	movs	r2, #0
 80123b6:	4618      	mov	r0, r3
 80123b8:	f00e ffe8 	bl	802138c <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123bc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123c0:	f103 030c 	add.w	r3, r3, #12
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d02f      	beq.n	801242a <httpServ+0x136>
 80123ca:	f00d fc9f 	bl	801fd0c <assigned_ip>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d12a      	bne.n	801242a <httpServ+0x136>
		  for(i = 0 ; i < http_nsockets; i++){
 80123d4:	2300      	movs	r3, #0
 80123d6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123da:	f102 020f 	add.w	r2, r2, #15
 80123de:	7013      	strb	r3, [r2, #0]
 80123e0:	e016      	b.n	8012410 <httpServ+0x11c>
			  SocketMutexTake();
 80123e2:	f7fe fea3 	bl	801112c <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 80123e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123ea:	f103 030f 	add.w	r3, r3, #15
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f00c fc3f 	bl	801ec74 <httpServer_run>
			  SocketMutexRelease();
 80123f6:	f7fe fea7 	bl	8011148 <SocketMutexRelease>
		  for(i = 0 ; i < http_nsockets; i++){
 80123fa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123fe:	f103 030f 	add.w	r3, r3, #15
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	3301      	adds	r3, #1
 8012406:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801240a:	f102 020f 	add.w	r2, r2, #15
 801240e:	7013      	strb	r3, [r2, #0]
 8012410:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012414:	f103 030f 	add.w	r3, r3, #15
 8012418:	781a      	ldrb	r2, [r3, #0]
 801241a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801241e:	f103 030e 	add.w	r3, r3, #14
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	429a      	cmp	r2, r3
 8012426:	d3dc      	bcc.n	80123e2 <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012428:	e003      	b.n	8012432 <httpServ+0x13e>
			  //osDelay(delay0_1s);

		  }
	  }else{
		  osDelay(delay1s);
 801242a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801242e:	f00d fed1 	bl	80201d4 <osDelay>
	  }
	  osDelay(delay0_1s);
 8012432:	2064      	movs	r0, #100	; 0x64
 8012434:	f00d fece 	bl	80201d4 <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012438:	e7b6      	b.n	80123a8 <httpServ+0xb4>
 801243a:	bf00      	nop
 801243c:	08032674 	.word	0x08032674
 8012440:	08013c85 	.word	0x08013c85
 8012444:	08013d99 	.word	0x08013d99
 8012448:	20000450 	.word	0x20000450
 801244c:	20000454 	.word	0x20000454
 8012450:	20000458 	.word	0x20000458
 8012454:	2000045c 	.word	0x2000045c
 8012458:	20000460 	.word	0x20000460
 801245c:	08031a60 	.word	0x08031a60
 8012460:	08031d7c 	.word	0x08031d7c
 8012464:	08031d88 	.word	0x08031d88
 8012468:	080320bc 	.word	0x080320bc
 801246c:	080320d0 	.word	0x080320d0
 8012470:	08032668 	.word	0x08032668
 8012474:	2000044c 	.word	0x2000044c

08012478 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	f5ad 6d22 	sub.w	sp, sp, #2592	; 0xa20
 801247e:	af02      	add	r7, sp, #8
 8012480:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012484:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8012488:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 801248a:	4995      	ldr	r1, [pc, #596]	; (80126e0 <vMQTT_Task+0x268>)
 801248c:	4895      	ldr	r0, [pc, #596]	; (80126e4 <vMQTT_Task+0x26c>)
 801248e:	f001 fd53 	bl	8013f38 <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 8012492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012496:	f00d fe9d 	bl	80201d4 <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 801249a:	4b93      	ldr	r3, [pc, #588]	; (80126e8 <vMQTT_Task+0x270>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 80124a2:	2200      	movs	r2, #0
 80124a4:	4618      	mov	r0, r3
 80124a6:	f00e ff71 	bl	802138c <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 80124aa:	f897 39f8 	ldrb.w	r3, [r7, #2552]	; 0x9f8
 80124ae:	f083 0301 	eor.w	r3, r3, #1
 80124b2:	b2db      	uxtb	r3, r3
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f040 8108 	bne.w	80126ca <vMQTT_Task+0x252>
 80124ba:	f00d fc27 	bl	801fd0c <assigned_ip>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	f040 8102 	bne.w	80126ca <vMQTT_Task+0x252>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124c6:	4b89      	ldr	r3, [pc, #548]	; (80126ec <vMQTT_Task+0x274>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124ce:	2200      	movs	r2, #0
 80124d0:	4618      	mov	r0, r3
 80124d2:	f00e ff5b 	bl	802138c <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124d6:	e00b      	b.n	80124f0 <vMQTT_Task+0x78>
			osDelay(delay1s);
 80124d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124dc:	f00d fe7a 	bl	80201d4 <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124e0:	4b82      	ldr	r3, [pc, #520]	; (80126ec <vMQTT_Task+0x274>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124e8:	2200      	movs	r2, #0
 80124ea:	4618      	mov	r0, r3
 80124ec:	f00e ff4e 	bl	802138c <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124f0:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 80124f4:	f083 0301 	eor.w	r3, r3, #1
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1ec      	bne.n	80124d8 <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80124fe:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 8012502:	f083 0301 	eor.w	r3, r3, #1
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2b00      	cmp	r3, #0
 801250a:	f040 80e0 	bne.w	80126ce <vMQTT_Task+0x256>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 801250e:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8012512:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012516:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 801251a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801251e:	9301      	str	r3, [sp, #4]
 8012520:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801252a:	f001 fd21 	bl	8013f70 <mqtt_client_init>
 801252e:	4603      	mov	r3, r0
 8012530:	2b00      	cmp	r3, #0
 8012532:	f040 80ce 	bne.w	80126d2 <vMQTT_Task+0x25a>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 8012536:	f001 fe07 	bl	8014148 <mqtt_client_connect>
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	f2c0 80ca 	blt.w	80126d6 <vMQTT_Task+0x25e>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8012542:	f001 fe51 	bl	80141e8 <mqtt_client_reg_dev_on_home_assist>
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	f040 80c6 	bne.w	80126da <vMQTT_Task+0x262>

		generate_status_topik(topik_name, 0);
 801254e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012552:	2100      	movs	r1, #0
 8012554:	4618      	mov	r0, r3
 8012556:	f002 fa73 	bl	8014a40 <generate_status_topik>
		while (1){
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801255a:	4b65      	ldr	r3, [pc, #404]	; (80126f0 <vMQTT_Task+0x278>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 8012562:	2200      	movs	r2, #0
 8012564:	4618      	mov	r0, r3
 8012566:	f00e ff11 	bl	802138c <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 801256a:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 801256e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012572:	edd3 7a02 	vldr	s15, [r3, #8]
 8012576:	f107 030c 	add.w	r3, r7, #12
 801257a:	eeb0 0a67 	vmov.f32	s0, s15
 801257e:	495d      	ldr	r1, [pc, #372]	; (80126f4 <vMQTT_Task+0x27c>)
 8012580:	4618      	mov	r0, r3
 8012582:	f002 fa95 	bl	8014ab0 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012586:	f107 020c 	add.w	r2, r7, #12
 801258a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f001 ff7b 	bl	801448c <send_data_to_topik>
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	f040 8086 	bne.w	80126aa <vMQTT_Task+0x232>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 801259e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125a6:	edd3 7a00 	vldr	s15, [r3]
 80125aa:	f107 030c 	add.w	r3, r7, #12
 80125ae:	eeb0 0a67 	vmov.f32	s0, s15
 80125b2:	4951      	ldr	r1, [pc, #324]	; (80126f8 <vMQTT_Task+0x280>)
 80125b4:	4618      	mov	r0, r3
 80125b6:	f002 fa7b 	bl	8014ab0 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125ba:	f107 020c 	add.w	r2, r7, #12
 80125be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125c2:	4611      	mov	r1, r2
 80125c4:	4618      	mov	r0, r3
 80125c6:	f001 ff61 	bl	801448c <send_data_to_topik>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d16e      	bne.n	80126ae <vMQTT_Task+0x236>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 80125d0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80125dc:	f107 030c 	add.w	r3, r7, #12
 80125e0:	eeb0 0a67 	vmov.f32	s0, s15
 80125e4:	4945      	ldr	r1, [pc, #276]	; (80126fc <vMQTT_Task+0x284>)
 80125e6:	4618      	mov	r0, r3
 80125e8:	f002 fa62 	bl	8014ab0 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125ec:	f107 020c 	add.w	r2, r7, #12
 80125f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125f4:	4611      	mov	r1, r2
 80125f6:	4618      	mov	r0, r3
 80125f8:	f001 ff48 	bl	801448c <send_data_to_topik>
 80125fc:	4603      	mov	r3, r0
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d157      	bne.n	80126b2 <vMQTT_Task+0x23a>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 8012602:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801260a:	edd3 7a05 	vldr	s15, [r3, #20]
 801260e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8012700 <vMQTT_Task+0x288>
 8012612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012616:	f107 030c 	add.w	r3, r7, #12
 801261a:	eeb0 0a67 	vmov.f32	s0, s15
 801261e:	4939      	ldr	r1, [pc, #228]	; (8012704 <vMQTT_Task+0x28c>)
 8012620:	4618      	mov	r0, r3
 8012622:	f002 fa45 	bl	8014ab0 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012626:	f107 020c 	add.w	r2, r7, #12
 801262a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801262e:	4611      	mov	r1, r2
 8012630:	4618      	mov	r0, r3
 8012632:	f001 ff2b 	bl	801448c <send_data_to_topik>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d13c      	bne.n	80126b6 <vMQTT_Task+0x23e>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ActivePower);
 801263c:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012640:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012644:	edd3 7a03 	vldr	s15, [r3, #12]
 8012648:	f107 030c 	add.w	r3, r7, #12
 801264c:	eeb0 0a67 	vmov.f32	s0, s15
 8012650:	492d      	ldr	r1, [pc, #180]	; (8012708 <vMQTT_Task+0x290>)
 8012652:	4618      	mov	r0, r3
 8012654:	f002 fa2c 	bl	8014ab0 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012658:	f107 020c 	add.w	r2, r7, #12
 801265c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f001 ff12 	bl	801448c <send_data_to_topik>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d125      	bne.n	80126ba <vMQTT_Task+0x242>

			generate_key_value_JSON(topik_payload, dev_class_apparent_power, PowerData.ApparPower);
 801266e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012672:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012676:	edd3 7a04 	vldr	s15, [r3, #16]
 801267a:	f107 030c 	add.w	r3, r7, #12
 801267e:	eeb0 0a67 	vmov.f32	s0, s15
 8012682:	4922      	ldr	r1, [pc, #136]	; (801270c <vMQTT_Task+0x294>)
 8012684:	4618      	mov	r0, r3
 8012686:	f002 fa13 	bl	8014ab0 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801268a:	f107 020c 	add.w	r2, r7, #12
 801268e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012692:	4611      	mov	r1, r2
 8012694:	4618      	mov	r0, r3
 8012696:	f001 fef9 	bl	801448c <send_data_to_topik>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d10e      	bne.n	80126be <vMQTT_Task+0x246>

			osDelay(delay30s);
 80126a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80126a4:	f00d fd96 	bl	80201d4 <osDelay>
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 80126a8:	e757      	b.n	801255a <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126aa:	bf00      	nop
 80126ac:	e008      	b.n	80126c0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ae:	bf00      	nop
 80126b0:	e006      	b.n	80126c0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126b2:	bf00      	nop
 80126b4:	e004      	b.n	80126c0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126b6:	bf00      	nop
 80126b8:	e002      	b.n	80126c0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ba:	bf00      	nop
 80126bc:	e000      	b.n	80126c0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126be:	bf00      	nop
		}
		osDelay(delay1s);
 80126c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126c4:	f00d fd86 	bl	80201d4 <osDelay>
 80126c8:	e6e3      	b.n	8012492 <vMQTT_Task+0x1a>
			continue;
 80126ca:	bf00      	nop
 80126cc:	e6e1      	b.n	8012492 <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80126ce:	bf00      	nop
 80126d0:	e6df      	b.n	8012492 <vMQTT_Task+0x1a>
			continue;
 80126d2:	bf00      	nop
 80126d4:	e6dd      	b.n	8012492 <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 80126d6:	bf00      	nop
 80126d8:	e6db      	b.n	8012492 <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80126da:	bf00      	nop
		osDelay(delay1s);
 80126dc:	e6d9      	b.n	8012492 <vMQTT_Task+0x1a>
 80126de:	bf00      	nop
 80126e0:	08011149 	.word	0x08011149
 80126e4:	0801112d 	.word	0x0801112d
 80126e8:	2000044c 	.word	0x2000044c
 80126ec:	20000458 	.word	0x20000458
 80126f0:	20000450 	.word	0x20000450
 80126f4:	08032678 	.word	0x08032678
 80126f8:	08032680 	.word	0x08032680
 80126fc:	08032688 	.word	0x08032688
 8012700:	42c80000 	.word	0x42c80000
 8012704:	08032690 	.word	0x08032690
 8012708:	080326a0 	.word	0x080326a0
 801270c:	080326a8 	.word	0x080326a8

08012710 <vResetWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vResetWatchDog */
void vResetWatchDog(void *argument)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vResetWatchDog */
  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8012718:	4803      	ldr	r0, [pc, #12]	; (8012728 <vResetWatchDog+0x18>)
 801271a:	f003 fb9a 	bl	8015e52 <HAL_IWDG_Refresh>
    osDelay(delay0_5s);
 801271e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012722:	f00d fd57 	bl	80201d4 <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8012726:	e7f7      	b.n	8012718 <vResetWatchDog+0x8>
 8012728:	2000031c 	.word	0x2000031c

0801272c <vSendBroadcast>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSendBroadcast */
void vSendBroadcast(void *argument)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b0ce      	sub	sp, #312	; 0x138
 8012730:	af02      	add	r7, sp, #8
 8012732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801273a:	6018      	str	r0, [r3, #0]
	int16_t					string_len;

   /* Infinite loop */
  for(;;)
  {
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 801273c:	4b40      	ldr	r3, [pc, #256]	; (8012840 <vSendBroadcast+0x114>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8012744:	2200      	movs	r2, #0
 8012746:	4618      	mov	r0, r3
 8012748:	f00e fe20 	bl	802138c <xQueuePeek>
	if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 801274c:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012750:	f083 0301 	eor.w	r3, r3, #1
 8012754:	b2db      	uxtb	r3, r3
 8012756:	2b00      	cmp	r3, #0
 8012758:	d104      	bne.n	8012764 <vSendBroadcast+0x38>
 801275a:	f00d fad7 	bl	801fd0c <assigned_ip>
 801275e:	4603      	mov	r3, r0
 8012760:	2b01      	cmp	r3, #1
 8012762:	d004      	beq.n	801276e <vSendBroadcast+0x42>
		osDelay(delay10s);
 8012764:	f242 7010 	movw	r0, #10000	; 0x2710
 8012768:	f00d fd34 	bl	80201d4 <osDelay>
		continue;
 801276c:	e067      	b.n	801283e <vSendBroadcast+0x112>
	}

	broadcastIP[0] = EthernetInfo.ip[0] | ( ~ EthernetInfo.sn[0]);
 801276e:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8012772:	b25a      	sxtb	r2, r3
 8012774:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8012778:	b25b      	sxtb	r3, r3
 801277a:	43db      	mvns	r3, r3
 801277c:	b25b      	sxtb	r3, r3
 801277e:	4313      	orrs	r3, r2
 8012780:	b25b      	sxtb	r3, r3
 8012782:	b2db      	uxtb	r3, r3
 8012784:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	broadcastIP[1] = EthernetInfo.ip[1] | ( ~ EthernetInfo.sn[1]);
 8012788:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801278c:	b25a      	sxtb	r2, r3
 801278e:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8012792:	b25b      	sxtb	r3, r3
 8012794:	43db      	mvns	r3, r3
 8012796:	b25b      	sxtb	r3, r3
 8012798:	4313      	orrs	r3, r2
 801279a:	b25b      	sxtb	r3, r3
 801279c:	b2db      	uxtb	r3, r3
 801279e:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	broadcastIP[2] = EthernetInfo.ip[2] | ( ~ EthernetInfo.sn[2]);
 80127a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80127a6:	b25a      	sxtb	r2, r3
 80127a8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80127ac:	b25b      	sxtb	r3, r3
 80127ae:	43db      	mvns	r3, r3
 80127b0:	b25b      	sxtb	r3, r3
 80127b2:	4313      	orrs	r3, r2
 80127b4:	b25b      	sxtb	r3, r3
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	broadcastIP[3] = EthernetInfo.ip[3] | ( ~ EthernetInfo.sn[3]);
 80127bc:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80127c0:	b25a      	sxtb	r2, r3
 80127c2:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80127c6:	b25b      	sxtb	r3, r3
 80127c8:	43db      	mvns	r3, r3
 80127ca:	b25b      	sxtb	r3, r3
 80127cc:	4313      	orrs	r3, r2
 80127ce:	b25b      	sxtb	r3, r3
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

	set_broadcast_message_eth_info(&EthernetInfo);
 80127d6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80127da:	4618      	mov	r0, r3
 80127dc:	f000 fb04 	bl	8012de8 <set_broadcast_message_eth_info>
	string_len = get_broadcast_message_payload((char *)buffer, buffer_len);
 80127e0:	f107 0308 	add.w	r3, r7, #8
 80127e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80127e8:	4618      	mov	r0, r3
 80127ea:	f000 fb0d 	bl	8012e08 <get_broadcast_message_payload>
 80127ee:	4603      	mov	r3, r0
 80127f0:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	if (string_len < 0) continue ;
 80127f4:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	db1f      	blt.n	801283c <vSendBroadcast+0x110>

	SocketMutexTake();
 80127fc:	f7fe fc96 	bl	801112c <SocketMutexTake>
	ServiceSockMutexTake();
 8012800:	f7fe fcae 	bl	8011160 <ServiceSockMutexTake>
	socket(SERVICE_SOCKET, Sn_MR_UDP, 5000, 0x00);
 8012804:	2300      	movs	r3, #0
 8012806:	f241 3288 	movw	r2, #5000	; 0x1388
 801280a:	2102      	movs	r1, #2
 801280c:	2004      	movs	r0, #4
 801280e:	f006 fadf 	bl	8018dd0 <socket>
	sendto(SERVICE_SOCKET, (uint8_t *)buffer, string_len, (uint8_t *)broadcastIP, 5000);
 8012812:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 8012816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801281a:	f107 0108 	add.w	r1, r7, #8
 801281e:	f241 3088 	movw	r0, #5000	; 0x1388
 8012822:	9000      	str	r0, [sp, #0]
 8012824:	2004      	movs	r0, #4
 8012826:	f006 ffb1 	bl	801978c <sendto>

	ServiceSockMutexRelease();
 801282a:	f7fe fca7 	bl	801117c <ServiceSockMutexRelease>
	SocketMutexRelease();
 801282e:	f7fe fc8b 	bl	8011148 <SocketMutexRelease>
    osDelay(delay5s);
 8012832:	f241 3088 	movw	r0, #5000	; 0x1388
 8012836:	f00d fccd 	bl	80201d4 <osDelay>
 801283a:	e77f      	b.n	801273c <vSendBroadcast+0x10>
	if (string_len < 0) continue ;
 801283c:	bf00      	nop
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 801283e:	e77d      	b.n	801273c <vSendBroadcast+0x10>
 8012840:	2000044c 	.word	0x2000044c

08012844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4a04      	ldr	r2, [pc, #16]	; (8012864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d101      	bne.n	801285a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8012856:	f002 ff6d 	bl	8015734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801285a:	bf00      	nop
 801285c:	3708      	adds	r7, #8
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	40010000 	.word	0x40010000

08012868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012868:	b480      	push	{r7}
 801286a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 801286c:	b672      	cpsid	i
}
 801286e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012870:	e7fe      	b.n	8012870 <Error_Handler+0x8>
	...

08012874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801287a:	2300      	movs	r3, #0
 801287c:	607b      	str	r3, [r7, #4]
 801287e:	4b12      	ldr	r3, [pc, #72]	; (80128c8 <HAL_MspInit+0x54>)
 8012880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012882:	4a11      	ldr	r2, [pc, #68]	; (80128c8 <HAL_MspInit+0x54>)
 8012884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012888:	6453      	str	r3, [r2, #68]	; 0x44
 801288a:	4b0f      	ldr	r3, [pc, #60]	; (80128c8 <HAL_MspInit+0x54>)
 801288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801288e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012892:	607b      	str	r3, [r7, #4]
 8012894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012896:	2300      	movs	r3, #0
 8012898:	603b      	str	r3, [r7, #0]
 801289a:	4b0b      	ldr	r3, [pc, #44]	; (80128c8 <HAL_MspInit+0x54>)
 801289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801289e:	4a0a      	ldr	r2, [pc, #40]	; (80128c8 <HAL_MspInit+0x54>)
 80128a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128a4:	6413      	str	r3, [r2, #64]	; 0x40
 80128a6:	4b08      	ldr	r3, [pc, #32]	; (80128c8 <HAL_MspInit+0x54>)
 80128a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128ae:	603b      	str	r3, [r7, #0]
 80128b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80128b2:	2200      	movs	r2, #0
 80128b4:	210f      	movs	r1, #15
 80128b6:	f06f 0001 	mvn.w	r0, #1
 80128ba:	f003 f813 	bl	80158e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80128be:	bf00      	nop
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	40023800 	.word	0x40023800

080128cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a0b      	ldr	r2, [pc, #44]	; (8012908 <HAL_CRC_MspInit+0x3c>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d10d      	bne.n	80128fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80128de:	2300      	movs	r3, #0
 80128e0:	60fb      	str	r3, [r7, #12]
 80128e2:	4b0a      	ldr	r3, [pc, #40]	; (801290c <HAL_CRC_MspInit+0x40>)
 80128e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128e6:	4a09      	ldr	r2, [pc, #36]	; (801290c <HAL_CRC_MspInit+0x40>)
 80128e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80128ec:	6313      	str	r3, [r2, #48]	; 0x30
 80128ee:	4b07      	ldr	r3, [pc, #28]	; (801290c <HAL_CRC_MspInit+0x40>)
 80128f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80128f6:	60fb      	str	r3, [r7, #12]
 80128f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80128fa:	bf00      	nop
 80128fc:	3714      	adds	r7, #20
 80128fe:	46bd      	mov	sp, r7
 8012900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop
 8012908:	40023000 	.word	0x40023000
 801290c:	40023800 	.word	0x40023800

08012910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b08c      	sub	sp, #48	; 0x30
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012918:	f107 031c 	add.w	r3, r7, #28
 801291c:	2200      	movs	r2, #0
 801291e:	601a      	str	r2, [r3, #0]
 8012920:	605a      	str	r2, [r3, #4]
 8012922:	609a      	str	r2, [r3, #8]
 8012924:	60da      	str	r2, [r3, #12]
 8012926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4a32      	ldr	r2, [pc, #200]	; (80129f8 <HAL_SPI_MspInit+0xe8>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d12c      	bne.n	801298c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012932:	2300      	movs	r3, #0
 8012934:	61bb      	str	r3, [r7, #24]
 8012936:	4b31      	ldr	r3, [pc, #196]	; (80129fc <HAL_SPI_MspInit+0xec>)
 8012938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801293a:	4a30      	ldr	r2, [pc, #192]	; (80129fc <HAL_SPI_MspInit+0xec>)
 801293c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012940:	6453      	str	r3, [r2, #68]	; 0x44
 8012942:	4b2e      	ldr	r3, [pc, #184]	; (80129fc <HAL_SPI_MspInit+0xec>)
 8012944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801294a:	61bb      	str	r3, [r7, #24]
 801294c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801294e:	2300      	movs	r3, #0
 8012950:	617b      	str	r3, [r7, #20]
 8012952:	4b2a      	ldr	r3, [pc, #168]	; (80129fc <HAL_SPI_MspInit+0xec>)
 8012954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012956:	4a29      	ldr	r2, [pc, #164]	; (80129fc <HAL_SPI_MspInit+0xec>)
 8012958:	f043 0301 	orr.w	r3, r3, #1
 801295c:	6313      	str	r3, [r2, #48]	; 0x30
 801295e:	4b27      	ldr	r3, [pc, #156]	; (80129fc <HAL_SPI_MspInit+0xec>)
 8012960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012962:	f003 0301 	and.w	r3, r3, #1
 8012966:	617b      	str	r3, [r7, #20]
 8012968:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 801296a:	23e0      	movs	r3, #224	; 0xe0
 801296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801296e:	2302      	movs	r3, #2
 8012970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012972:	2300      	movs	r3, #0
 8012974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012976:	2303      	movs	r3, #3
 8012978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801297a:	2305      	movs	r3, #5
 801297c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801297e:	f107 031c 	add.w	r3, r7, #28
 8012982:	4619      	mov	r1, r3
 8012984:	481e      	ldr	r0, [pc, #120]	; (8012a00 <HAL_SPI_MspInit+0xf0>)
 8012986:	f003 f885 	bl	8015a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 801298a:	e030      	b.n	80129ee <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a1c      	ldr	r2, [pc, #112]	; (8012a04 <HAL_SPI_MspInit+0xf4>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d12b      	bne.n	80129ee <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8012996:	2300      	movs	r3, #0
 8012998:	613b      	str	r3, [r7, #16]
 801299a:	4b18      	ldr	r3, [pc, #96]	; (80129fc <HAL_SPI_MspInit+0xec>)
 801299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801299e:	4a17      	ldr	r2, [pc, #92]	; (80129fc <HAL_SPI_MspInit+0xec>)
 80129a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80129a4:	6413      	str	r3, [r2, #64]	; 0x40
 80129a6:	4b15      	ldr	r3, [pc, #84]	; (80129fc <HAL_SPI_MspInit+0xec>)
 80129a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129ae:	613b      	str	r3, [r7, #16]
 80129b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80129b2:	2300      	movs	r3, #0
 80129b4:	60fb      	str	r3, [r7, #12]
 80129b6:	4b11      	ldr	r3, [pc, #68]	; (80129fc <HAL_SPI_MspInit+0xec>)
 80129b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129ba:	4a10      	ldr	r2, [pc, #64]	; (80129fc <HAL_SPI_MspInit+0xec>)
 80129bc:	f043 0302 	orr.w	r3, r3, #2
 80129c0:	6313      	str	r3, [r2, #48]	; 0x30
 80129c2:	4b0e      	ldr	r3, [pc, #56]	; (80129fc <HAL_SPI_MspInit+0xec>)
 80129c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129c6:	f003 0302 	and.w	r3, r3, #2
 80129ca:	60fb      	str	r3, [r7, #12]
 80129cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80129ce:	2338      	movs	r3, #56	; 0x38
 80129d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129d2:	2302      	movs	r3, #2
 80129d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129d6:	2300      	movs	r3, #0
 80129d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129da:	2303      	movs	r3, #3
 80129dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80129de:	2306      	movs	r3, #6
 80129e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80129e2:	f107 031c 	add.w	r3, r7, #28
 80129e6:	4619      	mov	r1, r3
 80129e8:	4807      	ldr	r0, [pc, #28]	; (8012a08 <HAL_SPI_MspInit+0xf8>)
 80129ea:	f003 f853 	bl	8015a94 <HAL_GPIO_Init>
}
 80129ee:	bf00      	nop
 80129f0:	3730      	adds	r7, #48	; 0x30
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	40013000 	.word	0x40013000
 80129fc:	40023800 	.word	0x40023800
 8012a00:	40020000 	.word	0x40020000
 8012a04:	40003c00 	.word	0x40003c00
 8012a08:	40020400 	.word	0x40020400

08012a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b08a      	sub	sp, #40	; 0x28
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a14:	f107 0314 	add.w	r3, r7, #20
 8012a18:	2200      	movs	r2, #0
 8012a1a:	601a      	str	r2, [r3, #0]
 8012a1c:	605a      	str	r2, [r3, #4]
 8012a1e:	609a      	str	r2, [r3, #8]
 8012a20:	60da      	str	r2, [r3, #12]
 8012a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	4a1d      	ldr	r2, [pc, #116]	; (8012aa0 <HAL_UART_MspInit+0x94>)
 8012a2a:	4293      	cmp	r3, r2
 8012a2c:	d133      	bne.n	8012a96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8012a2e:	2300      	movs	r3, #0
 8012a30:	613b      	str	r3, [r7, #16]
 8012a32:	4b1c      	ldr	r3, [pc, #112]	; (8012aa4 <HAL_UART_MspInit+0x98>)
 8012a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a36:	4a1b      	ldr	r2, [pc, #108]	; (8012aa4 <HAL_UART_MspInit+0x98>)
 8012a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8012a3e:	4b19      	ldr	r3, [pc, #100]	; (8012aa4 <HAL_UART_MspInit+0x98>)
 8012a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a46:	613b      	str	r3, [r7, #16]
 8012a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	60fb      	str	r3, [r7, #12]
 8012a4e:	4b15      	ldr	r3, [pc, #84]	; (8012aa4 <HAL_UART_MspInit+0x98>)
 8012a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a52:	4a14      	ldr	r2, [pc, #80]	; (8012aa4 <HAL_UART_MspInit+0x98>)
 8012a54:	f043 0301 	orr.w	r3, r3, #1
 8012a58:	6313      	str	r3, [r2, #48]	; 0x30
 8012a5a:	4b12      	ldr	r3, [pc, #72]	; (8012aa4 <HAL_UART_MspInit+0x98>)
 8012a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a5e:	f003 0301 	and.w	r3, r3, #1
 8012a62:	60fb      	str	r3, [r7, #12]
 8012a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012a66:	230c      	movs	r3, #12
 8012a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a6a:	2302      	movs	r3, #2
 8012a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a72:	2303      	movs	r3, #3
 8012a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012a76:	2307      	movs	r3, #7
 8012a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a7a:	f107 0314 	add.w	r3, r7, #20
 8012a7e:	4619      	mov	r1, r3
 8012a80:	4809      	ldr	r0, [pc, #36]	; (8012aa8 <HAL_UART_MspInit+0x9c>)
 8012a82:	f003 f807 	bl	8015a94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012a86:	2200      	movs	r2, #0
 8012a88:	2105      	movs	r1, #5
 8012a8a:	2026      	movs	r0, #38	; 0x26
 8012a8c:	f002 ff2a 	bl	80158e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012a90:	2026      	movs	r0, #38	; 0x26
 8012a92:	f002 ff43 	bl	801591c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012a96:	bf00      	nop
 8012a98:	3728      	adds	r7, #40	; 0x28
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	40004400 	.word	0x40004400
 8012aa4:	40023800 	.word	0x40023800
 8012aa8:	40020000 	.word	0x40020000

08012aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b08c      	sub	sp, #48	; 0x30
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012abc:	2300      	movs	r3, #0
 8012abe:	60bb      	str	r3, [r7, #8]
 8012ac0:	4b2e      	ldr	r3, [pc, #184]	; (8012b7c <HAL_InitTick+0xd0>)
 8012ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ac4:	4a2d      	ldr	r2, [pc, #180]	; (8012b7c <HAL_InitTick+0xd0>)
 8012ac6:	f043 0301 	orr.w	r3, r3, #1
 8012aca:	6453      	str	r3, [r2, #68]	; 0x44
 8012acc:	4b2b      	ldr	r3, [pc, #172]	; (8012b7c <HAL_InitTick+0xd0>)
 8012ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ad0:	f003 0301 	and.w	r3, r3, #1
 8012ad4:	60bb      	str	r3, [r7, #8]
 8012ad6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012ad8:	f107 020c 	add.w	r2, r7, #12
 8012adc:	f107 0310 	add.w	r3, r7, #16
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f003 fe5e 	bl	80167a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012ae8:	f003 fe48 	bl	801677c <HAL_RCC_GetPCLK2Freq>
 8012aec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af0:	4a23      	ldr	r2, [pc, #140]	; (8012b80 <HAL_InitTick+0xd4>)
 8012af2:	fba2 2303 	umull	r2, r3, r2, r3
 8012af6:	0c9b      	lsrs	r3, r3, #18
 8012af8:	3b01      	subs	r3, #1
 8012afa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012afc:	4b21      	ldr	r3, [pc, #132]	; (8012b84 <HAL_InitTick+0xd8>)
 8012afe:	4a22      	ldr	r2, [pc, #136]	; (8012b88 <HAL_InitTick+0xdc>)
 8012b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012b02:	4b20      	ldr	r3, [pc, #128]	; (8012b84 <HAL_InitTick+0xd8>)
 8012b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012b08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8012b0a:	4a1e      	ldr	r2, [pc, #120]	; (8012b84 <HAL_InitTick+0xd8>)
 8012b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012b10:	4b1c      	ldr	r3, [pc, #112]	; (8012b84 <HAL_InitTick+0xd8>)
 8012b12:	2200      	movs	r2, #0
 8012b14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012b16:	4b1b      	ldr	r3, [pc, #108]	; (8012b84 <HAL_InitTick+0xd8>)
 8012b18:	2200      	movs	r2, #0
 8012b1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012b1c:	4b19      	ldr	r3, [pc, #100]	; (8012b84 <HAL_InitTick+0xd8>)
 8012b1e:	2200      	movs	r2, #0
 8012b20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8012b22:	4818      	ldr	r0, [pc, #96]	; (8012b84 <HAL_InitTick+0xd8>)
 8012b24:	f004 fc46 	bl	80173b4 <HAL_TIM_Base_Init>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8012b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d11b      	bne.n	8012b6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8012b36:	4813      	ldr	r0, [pc, #76]	; (8012b84 <HAL_InitTick+0xd8>)
 8012b38:	f004 fc96 	bl	8017468 <HAL_TIM_Base_Start_IT>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8012b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d111      	bne.n	8012b6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012b4a:	2019      	movs	r0, #25
 8012b4c:	f002 fee6 	bl	801591c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b0f      	cmp	r3, #15
 8012b54:	d808      	bhi.n	8012b68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8012b56:	2200      	movs	r2, #0
 8012b58:	6879      	ldr	r1, [r7, #4]
 8012b5a:	2019      	movs	r0, #25
 8012b5c:	f002 fec2 	bl	80158e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012b60:	4a0a      	ldr	r2, [pc, #40]	; (8012b8c <HAL_InitTick+0xe0>)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6013      	str	r3, [r2, #0]
 8012b66:	e002      	b.n	8012b6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3730      	adds	r7, #48	; 0x30
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	40023800 	.word	0x40023800
 8012b80:	431bde83 	.word	0x431bde83
 8012b84:	2000049c 	.word	0x2000049c
 8012b88:	40010000 	.word	0x40010000
 8012b8c:	200000bc 	.word	0x200000bc

08012b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012b90:	b480      	push	{r7}
 8012b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012b94:	e7fe      	b.n	8012b94 <NMI_Handler+0x4>

08012b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012b96:	b480      	push	{r7}
 8012b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012b9a:	e7fe      	b.n	8012b9a <HardFault_Handler+0x4>

08012b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012ba0:	e7fe      	b.n	8012ba0 <MemManage_Handler+0x4>

08012ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012ba2:	b480      	push	{r7}
 8012ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012ba6:	e7fe      	b.n	8012ba6 <BusFault_Handler+0x4>

08012ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012bac:	e7fe      	b.n	8012bac <UsageFault_Handler+0x4>

08012bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012bae:	b480      	push	{r7}
 8012bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012bb2:	bf00      	nop
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012bc0:	4802      	ldr	r0, [pc, #8]	; (8012bcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012bc2:	f004 fcb3 	bl	801752c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012bc6:	bf00      	nop
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	2000049c 	.word	0x2000049c

08012bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012bd4:	4802      	ldr	r0, [pc, #8]	; (8012be0 <USART2_IRQHandler+0x10>)
 8012bd6:	f004 ff0f 	bl	80179f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012bda:	bf00      	nop
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	200003d8 	.word	0x200003d8

08012be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012be4:	b480      	push	{r7}
 8012be6:	af00      	add	r7, sp, #0
  return 1;
 8012be8:	2301      	movs	r3, #1
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <_kill>:

int _kill(int pid, int sig)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012bfe:	f01b f835 	bl	802dc6c <__errno>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2216      	movs	r2, #22
 8012c06:	601a      	str	r2, [r3, #0]
  return -1;
 8012c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <_exit>:

void _exit (int status)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7ff ffe7 	bl	8012bf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012c26:	e7fe      	b.n	8012c26 <_exit+0x12>

08012c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b086      	sub	sp, #24
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c34:	2300      	movs	r3, #0
 8012c36:	617b      	str	r3, [r7, #20]
 8012c38:	e00a      	b.n	8012c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012c3a:	f3af 8000 	nop.w
 8012c3e:	4601      	mov	r1, r0
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	1c5a      	adds	r2, r3, #1
 8012c44:	60ba      	str	r2, [r7, #8]
 8012c46:	b2ca      	uxtb	r2, r1
 8012c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	697a      	ldr	r2, [r7, #20]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	dbf0      	blt.n	8012c3a <_read+0x12>
  }

  return len;
 8012c58:	687b      	ldr	r3, [r7, #4]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3718      	adds	r7, #24
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b086      	sub	sp, #24
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	60f8      	str	r0, [r7, #12]
 8012c6a:	60b9      	str	r1, [r7, #8]
 8012c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c6e:	2300      	movs	r3, #0
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	e009      	b.n	8012c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	1c5a      	adds	r2, r3, #1
 8012c78:	60ba      	str	r2, [r7, #8]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	3301      	adds	r3, #1
 8012c86:	617b      	str	r3, [r7, #20]
 8012c88:	697a      	ldr	r2, [r7, #20]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	dbf1      	blt.n	8012c74 <_write+0x12>
  }
  return len;
 8012c90:	687b      	ldr	r3, [r7, #4]
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3718      	adds	r7, #24
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <_close>:

int _close(int file)
{
 8012c9a:	b480      	push	{r7}
 8012c9c:	b083      	sub	sp, #12
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	370c      	adds	r7, #12
 8012caa:	46bd      	mov	sp, r7
 8012cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb0:	4770      	bx	lr

08012cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012cb2:	b480      	push	{r7}
 8012cb4:	b083      	sub	sp, #12
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
 8012cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <_isatty>:

int _isatty(int file)
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b083      	sub	sp, #12
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012cda:	2301      	movs	r3, #1
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr

08012ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012cf4:	2300      	movs	r3, #0
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3714      	adds	r7, #20
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr
	...

08012d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b086      	sub	sp, #24
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012d0c:	4a14      	ldr	r2, [pc, #80]	; (8012d60 <_sbrk+0x5c>)
 8012d0e:	4b15      	ldr	r3, [pc, #84]	; (8012d64 <_sbrk+0x60>)
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012d18:	4b13      	ldr	r3, [pc, #76]	; (8012d68 <_sbrk+0x64>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d102      	bne.n	8012d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012d20:	4b11      	ldr	r3, [pc, #68]	; (8012d68 <_sbrk+0x64>)
 8012d22:	4a12      	ldr	r2, [pc, #72]	; (8012d6c <_sbrk+0x68>)
 8012d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012d26:	4b10      	ldr	r3, [pc, #64]	; (8012d68 <_sbrk+0x64>)
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	693a      	ldr	r2, [r7, #16]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d207      	bcs.n	8012d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012d34:	f01a ff9a 	bl	802dc6c <__errno>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	220c      	movs	r2, #12
 8012d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d42:	e009      	b.n	8012d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012d44:	4b08      	ldr	r3, [pc, #32]	; (8012d68 <_sbrk+0x64>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012d4a:	4b07      	ldr	r3, [pc, #28]	; (8012d68 <_sbrk+0x64>)
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4413      	add	r3, r2
 8012d52:	4a05      	ldr	r2, [pc, #20]	; (8012d68 <_sbrk+0x64>)
 8012d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012d56:	68fb      	ldr	r3, [r7, #12]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3718      	adds	r7, #24
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	20010000 	.word	0x20010000
 8012d64:	00000400 	.word	0x00000400
 8012d68:	200004e4 	.word	0x200004e4
 8012d6c:	2000db18 	.word	0x2000db18

08012d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012d70:	b480      	push	{r7}
 8012d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012d74:	4b06      	ldr	r3, [pc, #24]	; (8012d90 <SystemInit+0x20>)
 8012d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d7a:	4a05      	ldr	r2, [pc, #20]	; (8012d90 <SystemInit+0x20>)
 8012d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012d84:	bf00      	nop
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr
 8012d8e:	bf00      	nop
 8012d90:	e000ed00 	.word	0xe000ed00

08012d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012d98:	f7ff ffea 	bl	8012d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012d9c:	480c      	ldr	r0, [pc, #48]	; (8012dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012d9e:	490d      	ldr	r1, [pc, #52]	; (8012dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012da0:	4a0d      	ldr	r2, [pc, #52]	; (8012dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012da4:	e002      	b.n	8012dac <LoopCopyDataInit>

08012da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012daa:	3304      	adds	r3, #4

08012dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012db0:	d3f9      	bcc.n	8012da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012db2:	4a0a      	ldr	r2, [pc, #40]	; (8012ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012db4:	4c0a      	ldr	r4, [pc, #40]	; (8012de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012db8:	e001      	b.n	8012dbe <LoopFillZerobss>

08012dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012dbc:	3204      	adds	r2, #4

08012dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012dc0:	d3fb      	bcc.n	8012dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012dc2:	f01a ff59 	bl	802dc78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012dc6:	f7fe f9fd 	bl	80111c4 <main>
  bx  lr    
 8012dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012dcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012dd4:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012dd8:	08035010 	.word	0x08035010
  ldr r2, =_sbss
 8012ddc:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012de0:	2000db14 	.word	0x2000db14

08012de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012de4:	e7fe      	b.n	8012de4 <ADC_IRQHandler>
	...

08012de8 <set_broadcast_message_eth_info>:

#define mess_template	"{\"device_name\": \"%s\", \"model_name\": \"%s\", \"mac\": \"%02X%02X%02X%02X%02X%02X\", \"ip\": \"%u.%u.%u.%u\", \"netmask\": \"%u.%u.%u.%u\", \"gw\": \"%u.%u.%u.%u\", \"dns\": \"%u.%u.%u.%u\", \"firmware\": \"%s\"}"

Ethernet_info_struct	eth_info;

void set_broadcast_message_eth_info(Ethernet_info_struct * eth){
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]

	memcpy(&eth_info, eth, sizeof(Ethernet_info_struct));
 8012df0:	2220      	movs	r2, #32
 8012df2:	6879      	ldr	r1, [r7, #4]
 8012df4:	4803      	ldr	r0, [pc, #12]	; (8012e04 <set_broadcast_message_eth_info+0x1c>)
 8012df6:	f01a ff6e 	bl	802dcd6 <memcpy>

}
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	200004e8 	.word	0x200004e8

08012e08 <get_broadcast_message_payload>:

int16_t get_broadcast_message_payload(char * buffer, uint16_t buff_len){
 8012e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e0a:	b0ad      	sub	sp, #180	; 0xb4
 8012e0c:	af18      	add	r7, sp, #96	; 0x60
 8012e0e:	6478      	str	r0, [r7, #68]	; 0x44
 8012e10:	460b      	mov	r3, r1
 8012e12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	uint16_t len;

	strcpy(buffer, "\0"); //TODO replace sprintf to snprintf
 8012e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e18:	2200      	movs	r2, #0
 8012e1a:	701a      	strb	r2, [r3, #0]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e1c:	4b3c      	ldr	r3, [pc, #240]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e1e:	78db      	ldrb	r3, [r3, #3]
 8012e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e22:	4b3b      	ldr	r3, [pc, #236]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e24:	791b      	ldrb	r3, [r3, #4]
 8012e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e28:	4b39      	ldr	r3, [pc, #228]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e2a:	795b      	ldrb	r3, [r3, #5]
 8012e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8012e2e:	4b38      	ldr	r3, [pc, #224]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e30:	799b      	ldrb	r3, [r3, #6]
 8012e32:	633b      	str	r3, [r7, #48]	; 0x30
 8012e34:	4b36      	ldr	r3, [pc, #216]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e36:	79db      	ldrb	r3, [r3, #7]
 8012e38:	62fb      	str	r3, [r7, #44]	; 0x2c
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e3a:	4b35      	ldr	r3, [pc, #212]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e3c:	7a1b      	ldrb	r3, [r3, #8]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e3e:	62bb      	str	r3, [r7, #40]	; 0x28
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e40:	4b33      	ldr	r3, [pc, #204]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e42:	7a5b      	ldrb	r3, [r3, #9]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e44:	627b      	str	r3, [r7, #36]	; 0x24
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e46:	4b32      	ldr	r3, [pc, #200]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e48:	7a9b      	ldrb	r3, [r3, #10]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e4a:	623b      	str	r3, [r7, #32]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e4c:	4b30      	ldr	r3, [pc, #192]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e4e:	7adb      	ldrb	r3, [r3, #11]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e50:	61fb      	str	r3, [r7, #28]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e52:	4b2f      	ldr	r3, [pc, #188]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e54:	7b1b      	ldrb	r3, [r3, #12]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e56:	61bb      	str	r3, [r7, #24]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e58:	4b2d      	ldr	r3, [pc, #180]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e5a:	7b5b      	ldrb	r3, [r3, #13]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e5c:	617b      	str	r3, [r7, #20]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e5e:	4b2c      	ldr	r3, [pc, #176]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e60:	7b9b      	ldrb	r3, [r3, #14]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e62:	613b      	str	r3, [r7, #16]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e64:	4b2a      	ldr	r3, [pc, #168]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e66:	7bdb      	ldrb	r3, [r3, #15]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e68:	60fb      	str	r3, [r7, #12]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e6a:	4b29      	ldr	r3, [pc, #164]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e6c:	7c1b      	ldrb	r3, [r3, #16]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e6e:	60bb      	str	r3, [r7, #8]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e70:	4b27      	ldr	r3, [pc, #156]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e72:	7c5b      	ldrb	r3, [r3, #17]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e74:	607b      	str	r3, [r7, #4]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e76:	4b26      	ldr	r3, [pc, #152]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e78:	7c9b      	ldrb	r3, [r3, #18]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e7a:	603b      	str	r3, [r7, #0]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e7c:	4b24      	ldr	r3, [pc, #144]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e7e:	7cdb      	ldrb	r3, [r3, #19]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e80:	461e      	mov	r6, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e82:	4b23      	ldr	r3, [pc, #140]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e84:	7d1b      	ldrb	r3, [r3, #20]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e86:	461d      	mov	r5, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e88:	4b21      	ldr	r3, [pc, #132]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e8a:	7d5b      	ldrb	r3, [r3, #21]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e8c:	461c      	mov	r4, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e8e:	4b20      	ldr	r3, [pc, #128]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e90:	7d9b      	ldrb	r3, [r3, #22]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e92:	4618      	mov	r0, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e94:	4b1e      	ldr	r3, [pc, #120]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e96:	7ddb      	ldrb	r3, [r3, #23]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e98:	4619      	mov	r1, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012e9a:	4b1d      	ldr	r3, [pc, #116]	; (8012f10 <get_broadcast_message_payload+0x108>)
 8012e9c:	7e1b      	ldrb	r3, [r3, #24]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	4b1c      	ldr	r3, [pc, #112]	; (8012f14 <get_broadcast_message_payload+0x10c>)
 8012ea2:	9316      	str	r3, [sp, #88]	; 0x58
 8012ea4:	9215      	str	r2, [sp, #84]	; 0x54
 8012ea6:	9114      	str	r1, [sp, #80]	; 0x50
 8012ea8:	9013      	str	r0, [sp, #76]	; 0x4c
 8012eaa:	9412      	str	r4, [sp, #72]	; 0x48
 8012eac:	9511      	str	r5, [sp, #68]	; 0x44
 8012eae:	9610      	str	r6, [sp, #64]	; 0x40
 8012eb0:	683a      	ldr	r2, [r7, #0]
 8012eb2:	920f      	str	r2, [sp, #60]	; 0x3c
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	920e      	str	r2, [sp, #56]	; 0x38
 8012eb8:	68ba      	ldr	r2, [r7, #8]
 8012eba:	920d      	str	r2, [sp, #52]	; 0x34
 8012ebc:	68fa      	ldr	r2, [r7, #12]
 8012ebe:	920c      	str	r2, [sp, #48]	; 0x30
 8012ec0:	693a      	ldr	r2, [r7, #16]
 8012ec2:	920b      	str	r2, [sp, #44]	; 0x2c
 8012ec4:	697a      	ldr	r2, [r7, #20]
 8012ec6:	920a      	str	r2, [sp, #40]	; 0x28
 8012ec8:	69ba      	ldr	r2, [r7, #24]
 8012eca:	9209      	str	r2, [sp, #36]	; 0x24
 8012ecc:	69fa      	ldr	r2, [r7, #28]
 8012ece:	9208      	str	r2, [sp, #32]
 8012ed0:	6a3a      	ldr	r2, [r7, #32]
 8012ed2:	9207      	str	r2, [sp, #28]
 8012ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ed6:	9206      	str	r2, [sp, #24]
 8012ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012eda:	9205      	str	r2, [sp, #20]
 8012edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ede:	9204      	str	r2, [sp, #16]
 8012ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ee2:	9203      	str	r2, [sp, #12]
 8012ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ee6:	9202      	str	r2, [sp, #8]
 8012ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012eea:	9201      	str	r2, [sp, #4]
 8012eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	4b09      	ldr	r3, [pc, #36]	; (8012f18 <get_broadcast_message_payload+0x110>)
 8012ef2:	4a0a      	ldr	r2, [pc, #40]	; (8012f1c <get_broadcast_message_payload+0x114>)
 8012ef4:	490a      	ldr	r1, [pc, #40]	; (8012f20 <get_broadcast_message_payload+0x118>)
 8012ef6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012ef8:	f01a fbc8 	bl	802d68c <siprintf>
 8012efc:	4603      	mov	r3, r0
 8012efe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	return len;
 8012f02:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3754      	adds	r7, #84	; 0x54
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	200004e8 	.word	0x200004e8
 8012f14:	0803278c 	.word	0x0803278c
 8012f18:	080326b8 	.word	0x080326b8
 8012f1c:	080326c8 	.word	0x080326c8
 8012f20:	080326d0 	.word	0x080326d0

08012f24 <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012f24:	b480      	push	{r7}
 8012f26:	b083      	sub	sp, #12
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012f2e:	79fb      	ldrb	r3, [r7, #7]
 8012f30:	2b2f      	cmp	r3, #47	; 0x2f
 8012f32:	d905      	bls.n	8012f40 <CharToDec+0x1c>
 8012f34:	79fb      	ldrb	r3, [r7, #7]
 8012f36:	2b39      	cmp	r3, #57	; 0x39
 8012f38:	d802      	bhi.n	8012f40 <CharToDec+0x1c>
 8012f3a:	79fb      	ldrb	r3, [r7, #7]
 8012f3c:	3b30      	subs	r3, #48	; 0x30
 8012f3e:	e012      	b.n	8012f66 <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012f40:	79fb      	ldrb	r3, [r7, #7]
 8012f42:	2b60      	cmp	r3, #96	; 0x60
 8012f44:	d905      	bls.n	8012f52 <CharToDec+0x2e>
 8012f46:	79fb      	ldrb	r3, [r7, #7]
 8012f48:	2b66      	cmp	r3, #102	; 0x66
 8012f4a:	d802      	bhi.n	8012f52 <CharToDec+0x2e>
 8012f4c:	79fb      	ldrb	r3, [r7, #7]
 8012f4e:	3b57      	subs	r3, #87	; 0x57
 8012f50:	e009      	b.n	8012f66 <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012f52:	79fb      	ldrb	r3, [r7, #7]
 8012f54:	2b40      	cmp	r3, #64	; 0x40
 8012f56:	d905      	bls.n	8012f64 <CharToDec+0x40>
 8012f58:	79fb      	ldrb	r3, [r7, #7]
 8012f5a:	2b46      	cmp	r3, #70	; 0x46
 8012f5c:	d802      	bhi.n	8012f64 <CharToDec+0x40>
 8012f5e:	79fb      	ldrb	r3, [r7, #7]
 8012f60:	3b37      	subs	r3, #55	; 0x37
 8012f62:	e000      	b.n	8012f66 <CharToDec+0x42>
    return 0;
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	370c      	adds	r7, #12
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr
	...

08012f74 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012f80:	78fb      	ldrb	r3, [r7, #3]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <http_parse_params_init+0x20>
		if (xQueue){
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d034      	beq.n	8012ff6 <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012f8c:	4a1d      	ldr	r2, [pc, #116]	; (8013004 <http_parse_params_init+0x90>)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012f92:	e030      	b.n	8012ff6 <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012f94:	78fb      	ldrb	r3, [r7, #3]
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d106      	bne.n	8012fa8 <http_parse_params_init+0x34>
		if (xQueue){
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d02a      	beq.n	8012ff6 <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012fa0:	4a19      	ldr	r2, [pc, #100]	; (8013008 <http_parse_params_init+0x94>)
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6013      	str	r3, [r2, #0]
}
 8012fa6:	e026      	b.n	8012ff6 <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012fa8:	78fb      	ldrb	r3, [r7, #3]
 8012faa:	2b02      	cmp	r3, #2
 8012fac:	d106      	bne.n	8012fbc <http_parse_params_init+0x48>
		if (xQueue){
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d020      	beq.n	8012ff6 <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8012fb4:	4a15      	ldr	r2, [pc, #84]	; (801300c <http_parse_params_init+0x98>)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6013      	str	r3, [r2, #0]
}
 8012fba:	e01c      	b.n	8012ff6 <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 8012fbc:	78fb      	ldrb	r3, [r7, #3]
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d106      	bne.n	8012fd0 <http_parse_params_init+0x5c>
		if (xQueue){
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d016      	beq.n	8012ff6 <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 8012fc8:	4a11      	ldr	r2, [pc, #68]	; (8013010 <http_parse_params_init+0x9c>)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6013      	str	r3, [r2, #0]
}
 8012fce:	e012      	b.n	8012ff6 <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8012fd0:	78fb      	ldrb	r3, [r7, #3]
 8012fd2:	2b04      	cmp	r3, #4
 8012fd4:	d106      	bne.n	8012fe4 <http_parse_params_init+0x70>
		if (xQueue){
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d00c      	beq.n	8012ff6 <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 8012fdc:	4a0d      	ldr	r2, [pc, #52]	; (8013014 <http_parse_params_init+0xa0>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6013      	str	r3, [r2, #0]
}
 8012fe2:	e008      	b.n	8012ff6 <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8012fe4:	78fb      	ldrb	r3, [r7, #3]
 8012fe6:	2b05      	cmp	r3, #5
 8012fe8:	d105      	bne.n	8012ff6 <http_parse_params_init+0x82>
		if (xQueue){
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d002      	beq.n	8012ff6 <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8012ff0:	4a09      	ldr	r2, [pc, #36]	; (8013018 <http_parse_params_init+0xa4>)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6013      	str	r3, [r2, #0]
}
 8012ff6:	bf00      	nop
 8012ff8:	370c      	adds	r7, #12
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr
 8013002:	bf00      	nop
 8013004:	20000508 	.word	0x20000508
 8013008:	2000050c 	.word	0x2000050c
 801300c:	20000510 	.word	0x20000510
 8013010:	20000514 	.word	0x20000514
 8013014:	20000518 	.word	0x20000518
 8013018:	2000051c 	.word	0x2000051c

0801301c <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 801301c:	b580      	push	{r7, lr}
 801301e:	b0cc      	sub	sp, #304	; 0x130
 8013020:	af00      	add	r7, sp, #0
 8013022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801302a:	6018      	str	r0, [r3, #0]
 801302c:	460a      	mov	r2, r1
 801302e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013032:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8013036:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8013038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801303c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	2b04      	cmp	r3, #4
 8013044:	f200 814a 	bhi.w	80132dc <param_from_http_to_Q+0x2c0>
 8013048:	a201      	add	r2, pc, #4	; (adr r2, 8013050 <param_from_http_to_Q+0x34>)
 801304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801304e:	bf00      	nop
 8013050:	08013065 	.word	0x08013065
 8013054:	080132dd 	.word	0x080132dd
 8013058:	080131f1 	.word	0x080131f1
 801305c:	080132dd 	.word	0x080132dd
 8013060:	08013277 	.word	0x08013277

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 8013064:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013068:	22c6      	movs	r2, #198	; 0xc6
 801306a:	2100      	movs	r1, #0
 801306c:	4618      	mov	r0, r3
 801306e:	f01a fc5d 	bl	802d92c <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1")){
 8013072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801307a:	499c      	ldr	r1, [pc, #624]	; (80132ec <param_from_http_to_Q+0x2d0>)
 801307c:	6818      	ldr	r0, [r3, #0]
 801307e:	f00b fc49 	bl	801e914 <get_http_param_value>
 8013082:	4603      	mov	r3, r0
 8013084:	2131      	movs	r1, #49	; 0x31
 8013086:	4618      	mov	r0, r3
 8013088:	f01a fc67 	bl	802d95a <strchr>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <param_from_http_to_Q+0x7e>
				MQTT_params.enable = 1;
 8013092:	2301      	movs	r3, #1
 8013094:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8013098:	e012      	b.n	80130c0 <param_from_http_to_Q+0xa4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0")) {
 801309a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801309e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130a2:	4992      	ldr	r1, [pc, #584]	; (80132ec <param_from_http_to_Q+0x2d0>)
 80130a4:	6818      	ldr	r0, [r3, #0]
 80130a6:	f00b fc35 	bl	801e914 <get_http_param_value>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2130      	movs	r1, #48	; 0x30
 80130ae:	4618      	mov	r0, r3
 80130b0:	f01a fc53 	bl	802d95a <strchr>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d002      	beq.n	80130c0 <param_from_http_to_Q+0xa4>
				MQTT_params.enable = 0;
 80130ba:	2300      	movs	r3, #0
 80130bc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 80130c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130c8:	4989      	ldr	r1, [pc, #548]	; (80132f0 <param_from_http_to_Q+0x2d4>)
 80130ca:	6818      	ldr	r0, [r3, #0]
 80130cc:	f00b fc22 	bl	801e914 <get_http_param_value>
 80130d0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 80130d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d106      	bne.n	80130ea <param_from_http_to_Q+0xce>
 80130dc:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80130e0:	f7fd f8de 	bl	80102a0 <strlen>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b20      	cmp	r3, #32
 80130e8:	d807      	bhi.n	80130fa <param_from_http_to_Q+0xde>
				strcpy(MQTT_params.login, buf);
 80130ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80130ee:	3384      	adds	r3, #132	; 0x84
 80130f0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80130f4:	4618      	mov	r0, r3
 80130f6:	f01a fde6 	bl	802dcc6 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 80130fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013102:	497c      	ldr	r1, [pc, #496]	; (80132f4 <param_from_http_to_Q+0x2d8>)
 8013104:	6818      	ldr	r0, [r3, #0]
 8013106:	f00b fc05 	bl	801e914 <get_http_param_value>
 801310a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 801310e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013112:	2b00      	cmp	r3, #0
 8013114:	d106      	bne.n	8013124 <param_from_http_to_Q+0x108>
 8013116:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801311a:	f7fd f8c1 	bl	80102a0 <strlen>
 801311e:	4603      	mov	r3, r0
 8013120:	2b20      	cmp	r3, #32
 8013122:	d807      	bhi.n	8013134 <param_from_http_to_Q+0x118>
				strcpy(MQTT_params.pass, buf);
 8013124:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013128:	33a5      	adds	r3, #165	; 0xa5
 801312a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801312e:	4618      	mov	r0, r3
 8013130:	f01a fdc9 	bl	802dcc6 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 8013134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801313c:	496e      	ldr	r1, [pc, #440]	; (80132f8 <param_from_http_to_Q+0x2dc>)
 801313e:	6818      	ldr	r0, [r3, #0]
 8013140:	f00b fbe8 	bl	801e914 <get_http_param_value>
 8013144:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 8013148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801314c:	2b00      	cmp	r3, #0
 801314e:	d106      	bne.n	801315e <param_from_http_to_Q+0x142>
 8013150:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013154:	f7fd f8a4 	bl	80102a0 <strlen>
 8013158:	4603      	mov	r3, r0
 801315a:	2b7f      	cmp	r3, #127	; 0x7f
 801315c:	d808      	bhi.n	8013170 <param_from_http_to_Q+0x154>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 801315e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013162:	3302      	adds	r3, #2
 8013164:	227f      	movs	r2, #127	; 0x7f
 8013166:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801316a:	4618      	mov	r0, r3
 801316c:	f01a fc38 	bl	802d9e0 <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8013170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013178:	4960      	ldr	r1, [pc, #384]	; (80132fc <param_from_http_to_Q+0x2e0>)
 801317a:	6818      	ldr	r0, [r3, #0]
 801317c:	f00b fbca 	bl	801e914 <get_http_param_value>
 8013180:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8013184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013188:	2b00      	cmp	r3, #0
 801318a:	d106      	bne.n	801319a <param_from_http_to_Q+0x17e>
 801318c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013190:	f7fd f886 	bl	80102a0 <strlen>
 8013194:	4603      	mov	r3, r0
 8013196:	2b05      	cmp	r3, #5
 8013198:	d81e      	bhi.n	80131d8 <param_from_http_to_Q+0x1bc>
				sscanf(buf, "%d", &port);
 801319a:	f107 0316 	add.w	r3, r7, #22
 801319e:	461a      	mov	r2, r3
 80131a0:	4957      	ldr	r1, [pc, #348]	; (8013300 <param_from_http_to_Q+0x2e4>)
 80131a2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80131a6:	f01a fa91 	bl	802d6cc <siscanf>
				if ((port > 0) && (port < 65535)){
 80131aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131ae:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80131b2:	881b      	ldrh	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d00f      	beq.n	80131d8 <param_from_http_to_Q+0x1bc>
 80131b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131bc:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80131c0:	881b      	ldrh	r3, [r3, #0]
 80131c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131c6:	4293      	cmp	r3, r2
 80131c8:	d006      	beq.n	80131d8 <param_from_http_to_Q+0x1bc>
					MQTT_params.port = port;
 80131ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131ce:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80131d2:	881b      	ldrh	r3, [r3, #0]
 80131d4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 80131d8:	2301      	movs	r3, #1
 80131da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 80131de:	4b49      	ldr	r3, [pc, #292]	; (8013304 <param_from_http_to_Q+0x2e8>)
 80131e0:	6818      	ldr	r0, [r3, #0]
 80131e2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80131e6:	2302      	movs	r3, #2
 80131e8:	2200      	movs	r2, #0
 80131ea:	f00d fd49 	bl	8020c80 <xQueueGenericSend>

			break;
 80131ee:	e078      	b.n	80132e2 <param_from_http_to_Q+0x2c6>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 80131f0:	f107 031c 	add.w	r3, r7, #28
 80131f4:	2202      	movs	r2, #2
 80131f6:	2100      	movs	r1, #0
 80131f8:	4618      	mov	r0, r3
 80131fa:	f01a fb97 	bl	802d92c <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 80131fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013206:	4940      	ldr	r1, [pc, #256]	; (8013308 <param_from_http_to_Q+0x2ec>)
 8013208:	6818      	ldr	r0, [r3, #0]
 801320a:	f00b fb83 	bl	801e914 <get_http_param_value>
 801320e:	4603      	mov	r3, r0
 8013210:	2131      	movs	r1, #49	; 0x31
 8013212:	4618      	mov	r0, r3
 8013214:	f01a fba1 	bl	802d95a <strchr>
 8013218:	4603      	mov	r3, r0
 801321a:	2b00      	cmp	r3, #0
 801321c:	d006      	beq.n	801322c <param_from_http_to_Q+0x210>
				ModBusTCP_parameters.enable = 1;
 801321e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013222:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013226:	2201      	movs	r2, #1
 8013228:	705a      	strb	r2, [r3, #1]
 801322a:	e015      	b.n	8013258 <param_from_http_to_Q+0x23c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 801322c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013234:	4934      	ldr	r1, [pc, #208]	; (8013308 <param_from_http_to_Q+0x2ec>)
 8013236:	6818      	ldr	r0, [r3, #0]
 8013238:	f00b fb6c 	bl	801e914 <get_http_param_value>
 801323c:	4603      	mov	r3, r0
 801323e:	2130      	movs	r1, #48	; 0x30
 8013240:	4618      	mov	r0, r3
 8013242:	f01a fb8a 	bl	802d95a <strchr>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d005      	beq.n	8013258 <param_from_http_to_Q+0x23c>
				ModBusTCP_parameters.enable = 0;
 801324c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013250:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013254:	2200      	movs	r2, #0
 8013256:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 8013258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801325c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013260:	2201      	movs	r2, #1
 8013262:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 8013264:	4b29      	ldr	r3, [pc, #164]	; (801330c <param_from_http_to_Q+0x2f0>)
 8013266:	6818      	ldr	r0, [r3, #0]
 8013268:	f107 011c 	add.w	r1, r7, #28
 801326c:	2302      	movs	r3, #2
 801326e:	2200      	movs	r2, #0
 8013270:	f00d fd06 	bl	8020c80 <xQueueGenericSend>
			break;
 8013274:	e035      	b.n	80132e2 <param_from_http_to_Q+0x2c6>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 8013276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801327a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801327e:	4924      	ldr	r1, [pc, #144]	; (8013310 <param_from_http_to_Q+0x2f4>)
 8013280:	6818      	ldr	r0, [r3, #0]
 8013282:	f00b fb47 	bl	801e914 <get_http_param_value>
 8013286:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 801328a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801328e:	2b00      	cmp	r3, #0
 8013290:	d026      	beq.n	80132e0 <param_from_http_to_Q+0x2c4>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 8013292:	4a20      	ldr	r2, [pc, #128]	; (8013314 <param_from_http_to_Q+0x2f8>)
 8013294:	4920      	ldr	r1, [pc, #128]	; (8013318 <param_from_http_to_Q+0x2fc>)
 8013296:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801329a:	f01a fa17 	bl	802d6cc <siscanf>
				if (float_temp > 0){									//validate value
 801329e:	4b1d      	ldr	r3, [pc, #116]	; (8013314 <param_from_http_to_Q+0x2f8>)
 80132a0:	edd3 7a00 	vldr	s15, [r3]
 80132a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80132a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ac:	dc00      	bgt.n	80132b0 <param_from_http_to_Q+0x294>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 80132ae:	e017      	b.n	80132e0 <param_from_http_to_Q+0x2c4>
					PowShunSett.resistance = float_temp;
 80132b0:	4b18      	ldr	r3, [pc, #96]	; (8013314 <param_from_http_to_Q+0x2f8>)
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80132bc:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 80132be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80132c6:	2201      	movs	r2, #1
 80132c8:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 80132ca:	4b14      	ldr	r3, [pc, #80]	; (801331c <param_from_http_to_Q+0x300>)
 80132cc:	6818      	ldr	r0, [r3, #0]
 80132ce:	f107 010c 	add.w	r1, r7, #12
 80132d2:	2302      	movs	r3, #2
 80132d4:	2200      	movs	r2, #0
 80132d6:	f00d fcd3 	bl	8020c80 <xQueueGenericSend>
			break;
 80132da:	e001      	b.n	80132e0 <param_from_http_to_Q+0x2c4>
		default:
			break;
 80132dc:	bf00      	nop
 80132de:	e000      	b.n	80132e2 <param_from_http_to_Q+0x2c6>
			break;
 80132e0:	bf00      	nop
	}
}
 80132e2:	bf00      	nop
 80132e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	08032794 	.word	0x08032794
 80132f0:	0803279c 	.word	0x0803279c
 80132f4:	080327a4 	.word	0x080327a4
 80132f8:	080327b0 	.word	0x080327b0
 80132fc:	080327b4 	.word	0x080327b4
 8013300:	080327bc 	.word	0x080327bc
 8013304:	20000508 	.word	0x20000508
 8013308:	080327c0 	.word	0x080327c0
 801330c:	20000510 	.word	0x20000510
 8013310:	080327c8 	.word	0x080327c8
 8013314:	20000520 	.word	0x20000520
 8013318:	080327d0 	.word	0x080327d0
 801331c:	20000518 	.word	0x20000518

08013320 <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 8013320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013324:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8013328:	af0a      	add	r7, sp, #40	; 0x28
 801332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801332e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013332:	6018      	str	r0, [r3, #0]
 8013334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013338:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801333c:	601a      	str	r2, [r3, #0]
 801333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013342:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8013346:	460a      	mov	r2, r1
 8013348:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 801334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801334e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013352:	4a73      	ldr	r2, [pc, #460]	; (8013520 <param_from_Q_to_JSON+0x200>)
 8013354:	4618      	mov	r0, r3
 8013356:	4611      	mov	r1, r2
 8013358:	2351      	movs	r3, #81	; 0x51
 801335a:	461a      	mov	r2, r3
 801335c:	f01a fcbb 	bl	802dcd6 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 8013360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013364:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8013368:	4a6e      	ldr	r2, [pc, #440]	; (8013524 <param_from_Q_to_JSON+0x204>)
 801336a:	4618      	mov	r0, r3
 801336c:	4611      	mov	r1, r2
 801336e:	2384      	movs	r3, #132	; 0x84
 8013370:	461a      	mov	r2, r3
 8013372:	f01a fcb0 	bl	802dcd6 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 8013376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801337a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801337e:	4a6a      	ldr	r2, [pc, #424]	; (8013528 <param_from_Q_to_JSON+0x208>)
 8013380:	461c      	mov	r4, r3
 8013382:	4615      	mov	r5, r2
 8013384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013388:	682b      	ldr	r3, [r5, #0]
 801338a:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 801338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013390:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	2b04      	cmp	r3, #4
 8013398:	f000 8093 	beq.w	80134c2 <param_from_Q_to_JSON+0x1a2>
 801339c:	2b04      	cmp	r3, #4
 801339e:	f300 80b8 	bgt.w	8013512 <param_from_Q_to_JSON+0x1f2>
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d002      	beq.n	80133ac <param_from_Q_to_JSON+0x8c>
 80133a6:	2b03      	cmp	r3, #3
 80133a8:	d031      	beq.n	801340e <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 80133aa:	e0b2      	b.n	8013512 <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 80133ac:	4b5f      	ldr	r3, [pc, #380]	; (801352c <param_from_Q_to_JSON+0x20c>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80133b4:	2200      	movs	r2, #0
 80133b6:	4618      	mov	r0, r3
 80133b8:	f00d ffe8 	bl	802138c <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 80133bc:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 80133c0:	461d      	mov	r5, r3
 80133c2:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 80133c6:	461e      	mov	r6, r3
 80133c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80133cc:	1c9c      	adds	r4, r3, #2
 80133ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80133d2:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80133d6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80133da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133de:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 80133e2:	9601      	str	r6, [sp, #4]
 80133e4:	9500      	str	r5, [sp, #0]
 80133e6:	4623      	mov	r3, r4
 80133e8:	6800      	ldr	r0, [r0, #0]
 80133ea:	f01a f94f 	bl	802d68c <siprintf>
			*len = strlen(buf);
 80133ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133f2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80133f6:	6818      	ldr	r0, [r3, #0]
 80133f8:	f7fc ff52 	bl	80102a0 <strlen>
 80133fc:	4603      	mov	r3, r0
 80133fe:	b29a      	uxth	r2, r3
 8013400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013404:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	801a      	strh	r2, [r3, #0]
			break;
 801340c:	e082      	b.n	8013514 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 801340e:	4b48      	ldr	r3, [pc, #288]	; (8013530 <param_from_Q_to_JSON+0x210>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8013416:	2200      	movs	r2, #0
 8013418:	4618      	mov	r0, r3
 801341a:	f00d ffb7 	bl	802138c <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 801341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013422:	4618      	mov	r0, r3
 8013424:	f7fd f8a8 	bl	8010578 <__aeabi_f2d>
 8013428:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801342c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013430:	4618      	mov	r0, r3
 8013432:	f7fd f8a1 	bl	8010578 <__aeabi_f2d>
 8013436:	4604      	mov	r4, r0
 8013438:	460d      	mov	r5, r1
 801343a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801343e:	4618      	mov	r0, r3
 8013440:	f7fd f89a 	bl	8010578 <__aeabi_f2d>
 8013444:	4680      	mov	r8, r0
 8013446:	4689      	mov	r9, r1
 8013448:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801344c:	4618      	mov	r0, r3
 801344e:	f7fd f893 	bl	8010578 <__aeabi_f2d>
 8013452:	4682      	mov	sl, r0
 8013454:	468b      	mov	fp, r1
 8013456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801345a:	4618      	mov	r0, r3
 801345c:	f7fd f88c 	bl	8010578 <__aeabi_f2d>
 8013460:	e9c7 0100 	strd	r0, r1, [r7]
 8013464:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013468:	4618      	mov	r0, r3
 801346a:	f7fd f885 	bl	8010578 <__aeabi_f2d>
 801346e:	4602      	mov	r2, r0
 8013470:	460b      	mov	r3, r1
 8013472:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8013476:	f507 7100 	add.w	r1, r7, #512	; 0x200
 801347a:	f5a1 70f2 	sub.w	r0, r1, #484	; 0x1e4
 801347e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013482:	ed97 7b00 	vldr	d7, [r7]
 8013486:	ed8d 7b06 	vstr	d7, [sp, #24]
 801348a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801348e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013492:	e9cd 4500 	strd	r4, r5, [sp]
 8013496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801349a:	4631      	mov	r1, r6
 801349c:	6800      	ldr	r0, [r0, #0]
 801349e:	f01a f8f5 	bl	802d68c <siprintf>
			*len = strlen(buf);
 80134a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134a6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80134aa:	6818      	ldr	r0, [r3, #0]
 80134ac:	f7fc fef8 	bl	80102a0 <strlen>
 80134b0:	4603      	mov	r3, r0
 80134b2:	b29a      	uxth	r2, r3
 80134b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134b8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	801a      	strh	r2, [r3, #0]
			break;
 80134c0:	e028      	b.n	8013514 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 80134c2:	4b1c      	ldr	r3, [pc, #112]	; (8013534 <param_from_Q_to_JSON+0x214>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80134ca:	2200      	movs	r2, #0
 80134cc:	4618      	mov	r0, r3
 80134ce:	f00d ff5d 	bl	802138c <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 80134d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7fd f84e 	bl	8010578 <__aeabi_f2d>
 80134dc:	4602      	mov	r2, r0
 80134de:	460b      	mov	r3, r1
 80134e0:	f107 0120 	add.w	r1, r7, #32
 80134e4:	f507 7000 	add.w	r0, r7, #512	; 0x200
 80134e8:	f5a0 70f2 	sub.w	r0, r0, #484	; 0x1e4
 80134ec:	6800      	ldr	r0, [r0, #0]
 80134ee:	f01a f8cd 	bl	802d68c <siprintf>
			*len = strlen(buf);
 80134f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134f6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80134fa:	6818      	ldr	r0, [r3, #0]
 80134fc:	f7fc fed0 	bl	80102a0 <strlen>
 8013500:	4603      	mov	r3, r0
 8013502:	b29a      	uxth	r2, r3
 8013504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013508:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	801a      	strh	r2, [r3, #0]
			break;
 8013510:	e000      	b.n	8013514 <param_from_Q_to_JSON+0x1f4>
			break;
 8013512:	bf00      	nop
	}
}
 8013514:	bf00      	nop
 8013516:	f507 7701 	add.w	r7, r7, #516	; 0x204
 801351a:	46bd      	mov	sp, r7
 801351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013520:	080327d4 	.word	0x080327d4
 8013524:	08032828 	.word	0x08032828
 8013528:	080328ac 	.word	0x080328ac
 801352c:	20000508 	.word	0x20000508
 8013530:	20000514 	.word	0x20000514
 8013534:	20000518 	.word	0x20000518

08013538 <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 8013538:	b590      	push	{r4, r7, lr}
 801353a:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 801353e:	af02      	add	r7, sp, #8
 8013540:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 8013544:	f5a4 7439 	sub.w	r4, r4, #740	; 0x2e4
 8013548:	6020      	str	r0, [r4, #0]
 801354a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 801354e:	f5a0 703a 	sub.w	r0, r0, #744	; 0x2e8
 8013552:	6001      	str	r1, [r0, #0]
 8013554:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8013558:	f5a1 713b 	sub.w	r1, r1, #748	; 0x2ec
 801355c:	600a      	str	r2, [r1, #0]
 801355e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8013562:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8013566:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 8013568:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801356c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 8013570:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013574:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013578:	49ac      	ldr	r1, [pc, #688]	; (801382c <write_to_file+0x2f4>)
 801357a:	6818      	ldr	r0, [r3, #0]
 801357c:	f00b f9ca 	bl	801e914 <get_http_param_value>
 8013580:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 8013584:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d025      	beq.n	80135d8 <write_to_file+0xa0>
		strcpy(filename, base_path);
 801358c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013590:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8013594:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013598:	6819      	ldr	r1, [r3, #0]
 801359a:	4610      	mov	r0, r2
 801359c:	f01a fb93 	bl	802dcc6 <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 80135a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80135a4:	222d      	movs	r2, #45	; 0x2d
 80135a6:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80135aa:	4618      	mov	r0, r3
 80135ac:	f01a f9f3 	bl	802d996 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 80135b0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80135b4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80135b8:	499d      	ldr	r1, [pc, #628]	; (8013830 <write_to_file+0x2f8>)
 80135ba:	6818      	ldr	r0, [r3, #0]
 80135bc:	f00b f9aa 	bl	801e914 <get_http_param_value>
 80135c0:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 80135c4:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 80135c8:	f7fc fe6a 	bl	80102a0 <strlen>
 80135cc:	4603      	mov	r3, r0
 80135ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135d2:	f080 8113 	bcs.w	80137fc <write_to_file+0x2c4>
 80135d6:	e011      	b.n	80135fc <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 80135d8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80135dc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	4a94      	ldr	r2, [pc, #592]	; (8013834 <write_to_file+0x2fc>)
 80135e4:	6810      	ldr	r0, [r2, #0]
 80135e6:	6018      	str	r0, [r3, #0]
 80135e8:	8892      	ldrh	r2, [r2, #4]
 80135ea:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80135ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80135f0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	2205      	movs	r2, #5
 80135f8:	801a      	strh	r2, [r3, #0]
		return;
 80135fa:	e111      	b.n	8013820 <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 80135fc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013600:	2b00      	cmp	r3, #0
 8013602:	f000 80e9 	beq.w	80137d8 <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 8013606:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 801360a:	f7fc fe49 	bl	80102a0 <strlen>
 801360e:	4603      	mov	r3, r0
 8013610:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 8013614:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8013618:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013622:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8013626:	f44f 7100 	mov.w	r1, #512	; 0x200
 801362a:	f017 fe0d 	bl	802b248 <mbedtls_base64_decode>
 801362e:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 8013632:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013636:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801363a:	497f      	ldr	r1, [pc, #508]	; (8013838 <write_to_file+0x300>)
 801363c:	6818      	ldr	r0, [r3, #0]
 801363e:	f00b f969 	bl	801e914 <get_http_param_value>
 8013642:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 8013646:	2300      	movs	r3, #0
 8013648:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 801364c:	e030      	b.n	80136b0 <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 801364e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013652:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8013656:	4413      	add	r3, r2
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	4618      	mov	r0, r3
 801365c:	f7ff fc62 	bl	8012f24 <CharToDec>
 8013660:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 8013664:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013668:	3301      	adds	r3, #1
 801366a:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 801366e:	4413      	add	r3, r2
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	4618      	mov	r0, r3
 8013674:	f7ff fc56 	bl	8012f24 <CharToDec>
 8013678:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 801367c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8013680:	011b      	lsls	r3, r3, #4
 8013682:	b25a      	sxtb	r2, r3
 8013684:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8013688:	b25b      	sxtb	r3, r3
 801368a:	4313      	orrs	r3, r2
 801368c:	b259      	sxtb	r1, r3
 801368e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013692:	0fda      	lsrs	r2, r3, #31
 8013694:	4413      	add	r3, r2
 8013696:	105b      	asrs	r3, r3, #1
 8013698:	461a      	mov	r2, r3
 801369a:	b2c9      	uxtb	r1, r1
 801369c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80136a0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80136a4:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 80136a6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80136aa:	3302      	adds	r3, #2
 80136ac:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80136b0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80136b4:	2b1f      	cmp	r3, #31
 80136b6:	ddca      	ble.n	801364e <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 80136b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80136bc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80136c0:	2200      	movs	r2, #0
 80136c2:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 80136c4:	f107 0310 	add.w	r3, r7, #16
 80136c8:	4618      	mov	r0, r3
 80136ca:	f017 fed9 	bl	802b480 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 80136ce:	f107 0310 	add.w	r3, r7, #16
 80136d2:	4618      	mov	r0, r3
 80136d4:	f017 fef2 	bl	802b4bc <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 80136d8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80136e2:	f107 0310 	add.w	r3, r7, #16
 80136e6:	4618      	mov	r0, r3
 80136e8:	f018 fdd2 	bl	802c290 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 80136ec:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80136f0:	f107 0310 	add.w	r3, r7, #16
 80136f4:	4611      	mov	r1, r2
 80136f6:	4618      	mov	r0, r3
 80136f8:	f018 fe3f 	bl	802c37a <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 80136fc:	f107 0310 	add.w	r3, r7, #16
 8013700:	4618      	mov	r0, r3
 8013702:	f017 feca 	bl	802b49a <mbedtls_md5_free>
		output[16] = '\0';
 8013706:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801370a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801370e:	2200      	movs	r2, #0
 8013710:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 8013712:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013716:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801371a:	2210      	movs	r2, #16
 801371c:	4618      	mov	r0, r3
 801371e:	f01a f94d 	bl	802d9bc <strncmp>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d006      	beq.n	8013736 <write_to_file+0x1fe>
			err = -1;
 8013728:	f04f 33ff 	mov.w	r3, #4294967295
 801372c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 8013730:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013734:	e074      	b.n	8013820 <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 8013736:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801373a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801373e:	493f      	ldr	r1, [pc, #252]	; (801383c <write_to_file+0x304>)
 8013740:	6818      	ldr	r0, [r3, #0]
 8013742:	f00b f8e7 	bl	801e914 <get_http_param_value>
 8013746:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 801374a:	210a      	movs	r1, #10
 801374c:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8013750:	f00b f992 	bl	801ea78 <ATOI>
 8013754:	4603      	mov	r3, r0
 8013756:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 801375a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801375e:	2b00      	cmp	r3, #0
 8013760:	d10f      	bne.n	8013782 <write_to_file+0x24a>
			part =0;
 8013762:	4b37      	ldr	r3, [pc, #220]	; (8013840 <write_to_file+0x308>)
 8013764:	2200      	movs	r2, #0
 8013766:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 8013768:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8013772:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013776:	4618      	mov	r0, r3
 8013778:	f017 fb94 	bl	802aea4 <spi_fs_over_write_file>
 801377c:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 8013780:	e01d      	b.n	80137be <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 8013782:	210a      	movs	r1, #10
 8013784:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8013788:	f00b f976 	bl	801ea78 <ATOI>
 801378c:	4603      	mov	r3, r0
 801378e:	461a      	mov	r2, r3
 8013790:	4b2b      	ldr	r3, [pc, #172]	; (8013840 <write_to_file+0x308>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	429a      	cmp	r2, r3
 8013796:	d006      	beq.n	80137a6 <write_to_file+0x26e>
				err = -1;
 8013798:	f04f 33ff 	mov.w	r3, #4294967295
 801379c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 80137a0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80137a4:	e03c      	b.n	8013820 <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 80137a6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80137b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80137b4:	4618      	mov	r0, r3
 80137b6:	f017 fbd1 	bl	802af5c <spi_fs_write_file_to_end>
 80137ba:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 80137be:	4b20      	ldr	r3, [pc, #128]	; (8013840 <write_to_file+0x308>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	3301      	adds	r3, #1
 80137c4:	4a1e      	ldr	r2, [pc, #120]	; (8013840 <write_to_file+0x308>)
 80137c6:	6013      	str	r3, [r2, #0]

		if (err < 0){
 80137c8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	da15      	bge.n	80137fc <write_to_file+0x2c4>
			err = 0;
 80137d0:	2300      	movs	r3, #0
 80137d2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80137d6:	e011      	b.n	80137fc <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 80137d8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80137dc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	4a14      	ldr	r2, [pc, #80]	; (8013834 <write_to_file+0x2fc>)
 80137e4:	6810      	ldr	r0, [r2, #0]
 80137e6:	6018      	str	r0, [r3, #0]
 80137e8:	8892      	ldrh	r2, [r2, #4]
 80137ea:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80137ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80137f0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	2205      	movs	r2, #5
 80137f8:	801a      	strh	r2, [r3, #0]
		return;
 80137fa:	e011      	b.n	8013820 <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 80137fc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013800:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	4a0f      	ldr	r2, [pc, #60]	; (8013844 <write_to_file+0x30c>)
 8013808:	8811      	ldrh	r1, [r2, #0]
 801380a:	7892      	ldrb	r2, [r2, #2]
 801380c:	8019      	strh	r1, [r3, #0]
 801380e:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 8013810:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013814:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	2202      	movs	r2, #2
 801381c:	801a      	strh	r2, [r3, #0]
}
 801381e:	e7ff      	b.n	8013820 <write_to_file+0x2e8>
 8013820:	4618      	mov	r0, r3
 8013822:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 8013826:	46bd      	mov	sp, r7
 8013828:	bd90      	pop	{r4, r7, pc}
 801382a:	bf00      	nop
 801382c:	080328c0 	.word	0x080328c0
 8013830:	080328d4 	.word	0x080328d4
 8013834:	080328cc 	.word	0x080328cc
 8013838:	080328dc 	.word	0x080328dc
 801383c:	080328e4 	.word	0x080328e4
 8013840:	20000524 	.word	0x20000524
 8013844:	080328ec 	.word	0x080328ec

08013848 <web_mkdir>:

int8_t web_mkdir(char * buf, char * base_path){
 8013848:	b580      	push	{r7, lr}
 801384a:	b092      	sub	sp, #72	; 0x48
 801384c:	af02      	add	r7, sp, #8
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]

	char * dirname;
	char tmp[MAX_CONTENT_NAME_LEN];

	dirname = get_http_param_value((char *)buf, "dirname");
 8013852:	4912      	ldr	r1, [pc, #72]	; (801389c <web_mkdir+0x54>)
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f00b f85d 	bl	801e914 <get_http_param_value>
 801385a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (dirname != 0 || (strlen(dirname) < MAX_CONTENT_NAME_LEN - 5)) //TODO add dirname validation
 801385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801385e:	2b00      	cmp	r3, #0
 8013860:	d105      	bne.n	801386e <web_mkdir+0x26>
 8013862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013864:	f7fc fd1c 	bl	80102a0 <strlen>
 8013868:	4603      	mov	r3, r0
 801386a:	2b2c      	cmp	r3, #44	; 0x2c
 801386c:	d810      	bhi.n	8013890 <web_mkdir+0x48>
		{
			snprintf(tmp, sizeof(tmp), "%s%s", base_path, dirname);
 801386e:	f107 0008 	add.w	r0, r7, #8
 8013872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	4a09      	ldr	r2, [pc, #36]	; (80138a0 <web_mkdir+0x58>)
 801387a:	2132      	movs	r1, #50	; 0x32
 801387c:	f019 fed2 	bl	802d624 <sniprintf>
			return (spi_fs_mkdir(tmp));
 8013880:	f107 0308 	add.w	r3, r7, #8
 8013884:	4618      	mov	r0, r3
 8013886:	f017 fbc1 	bl	802b00c <spi_fs_mkdir>
 801388a:	4603      	mov	r3, r0
 801388c:	b25b      	sxtb	r3, r3
 801388e:	e001      	b.n	8013894 <web_mkdir+0x4c>
		}
	return -1;
 8013890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013894:	4618      	mov	r0, r3
 8013896:	3740      	adds	r7, #64	; 0x40
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	080328f0 	.word	0x080328f0
 80138a0:	080328f8 	.word	0x080328f8

080138a4 <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 80138a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a8:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 80138ac:	af16      	add	r7, sp, #88	; 0x58
 80138ae:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80138b2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80138b6:	6018      	str	r0, [r3, #0]
 80138b8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80138bc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80138c0:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 80138c2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80138c6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80138ca:	4a5d      	ldr	r2, [pc, #372]	; (8013a40 <read_all_parameters+0x19c>)
 80138cc:	4618      	mov	r0, r3
 80138ce:	4611      	mov	r1, r2
 80138d0:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80138d4:	461a      	mov	r2, r3
 80138d6:	f01a f9fe 	bl	802dcd6 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 80138da:	4b5a      	ldr	r3, [pc, #360]	; (8013a44 <read_all_parameters+0x1a0>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80138e2:	2200      	movs	r2, #0
 80138e4:	4618      	mov	r0, r3
 80138e6:	f00d fd51 	bl	802138c <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 80138ea:	4b57      	ldr	r3, [pc, #348]	; (8013a48 <read_all_parameters+0x1a4>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f507 7111 	add.w	r1, r7, #580	; 0x244
 80138f2:	2200      	movs	r2, #0
 80138f4:	4618      	mov	r0, r3
 80138f6:	f00d fd49 	bl	802138c <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 80138fa:	4b54      	ldr	r3, [pc, #336]	; (8013a4c <read_all_parameters+0x1a8>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8013902:	2200      	movs	r2, #0
 8013904:	4618      	mov	r0, r3
 8013906:	f00d fd41 	bl	802138c <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 801390a:	4b51      	ldr	r3, [pc, #324]	; (8013a50 <read_all_parameters+0x1ac>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8013912:	2200      	movs	r2, #0
 8013914:	4618      	mov	r0, r3
 8013916:	f00d fd39 	bl	802138c <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 801391a:	4b4e      	ldr	r3, [pc, #312]	; (8013a54 <read_all_parameters+0x1b0>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 8013922:	2200      	movs	r2, #0
 8013924:	4618      	mov	r0, r3
 8013926:	f00d fd31 	bl	802138c <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 801392a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801392e:	4618      	mov	r0, r3
 8013930:	f7fc fe22 	bl	8010578 <__aeabi_f2d>
 8013934:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8013938:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801393c:	4618      	mov	r0, r3
 801393e:	f7fc fe1b 	bl	8010578 <__aeabi_f2d>
 8013942:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8013946:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801394a:	4618      	mov	r0, r3
 801394c:	f7fc fe14 	bl	8010578 <__aeabi_f2d>
 8013950:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8013954:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8013958:	4618      	mov	r0, r3
 801395a:	f7fc fe0d 	bl	8010578 <__aeabi_f2d>
 801395e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8013962:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8013966:	4618      	mov	r0, r3
 8013968:	f7fc fe06 	bl	8010578 <__aeabi_f2d>
 801396c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8013970:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013974:	4618      	mov	r0, r3
 8013976:	f7fc fdff 	bl	8010578 <__aeabi_f2d>
 801397a:	4682      	mov	sl, r0
 801397c:	468b      	mov	fp, r1
 801397e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013982:	4618      	mov	r0, r3
 8013984:	f7fc fdf8 	bl	8010578 <__aeabi_f2d>
 8013988:	4680      	mov	r8, r0
 801398a:	4689      	mov	r9, r1
 801398c:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8013990:	60fb      	str	r3, [r7, #12]
 8013992:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8013996:	60bb      	str	r3, [r7, #8]
 8013998:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 801399c:	607b      	str	r3, [r7, #4]
 801399e:	f8d7 4264 	ldr.w	r4, [r7, #612]	; 0x264
 80139a2:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80139a6:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 80139aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80139ae:	f107 0644 	add.w	r6, r7, #68	; 0x44
 80139b2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80139b6:	f5a3 750d 	sub.w	r5, r3, #564	; 0x234
 80139ba:	9214      	str	r2, [sp, #80]	; 0x50
 80139bc:	9113      	str	r1, [sp, #76]	; 0x4c
 80139be:	9012      	str	r0, [sp, #72]	; 0x48
 80139c0:	9411      	str	r4, [sp, #68]	; 0x44
 80139c2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80139c6:	3302      	adds	r3, #2
 80139c8:	9310      	str	r3, [sp, #64]	; 0x40
 80139ca:	6879      	ldr	r1, [r7, #4]
 80139cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80139ce:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80139d2:	3384      	adds	r3, #132	; 0x84
 80139d4:	930e      	str	r3, [sp, #56]	; 0x38
 80139d6:	68b9      	ldr	r1, [r7, #8]
 80139d8:	910d      	str	r1, [sp, #52]	; 0x34
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	930c      	str	r3, [sp, #48]	; 0x30
 80139de:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80139e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80139e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80139ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139ee:	ed97 7b06 	vldr	d7, [r7, #24]
 80139f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80139f6:	ed97 7b08 	vldr	d7, [r7, #32]
 80139fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139fe:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8013a02:	ed8d 7b00 	vstr	d7, [sp]
 8013a06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013a0a:	4631      	mov	r1, r6
 8013a0c:	6828      	ldr	r0, [r5, #0]
 8013a0e:	f019 fe3d 	bl	802d68c <siprintf>
	*len = strlen(buf);
 8013a12:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013a16:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013a1a:	6818      	ldr	r0, [r3, #0]
 8013a1c:	f7fc fc40 	bl	80102a0 <strlen>
 8013a20:	4603      	mov	r3, r0
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013a28:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	801a      	strh	r2, [r3, #0]

	return 0 ;
 8013a30:	2300      	movs	r3, #0
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	f507 771d 	add.w	r7, r7, #628	; 0x274
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a3e:	bf00      	nop
 8013a40:	08032900 	.word	0x08032900
 8013a44:	20000514 	.word	0x20000514
 8013a48:	20000518 	.word	0x20000518
 8013a4c:	20000508 	.word	0x20000508
 8013a50:	20000510 	.word	0x20000510
 8013a54:	2000051c 	.word	0x2000051c

08013a58 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 8013a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a5a:	b0db      	sub	sp, #364	; 0x16c
 8013a5c:	af0e      	add	r7, sp, #56	; 0x38
 8013a5e:	6378      	str	r0, [r7, #52]	; 0x34
 8013a60:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8013a64:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8013a68:	6001      	str	r1, [r0, #0]
 8013a6a:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8013a6e:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8013a72:	600a      	str	r2, [r1, #0]
 8013a74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8013a78:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8013a7c:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 8013a84:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f017 fcf9 	bl	802b480 <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 8013a8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013a92:	4618      	mov	r0, r3
 8013a94:	f017 fd12 	bl	802b4bc <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013a98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f01a f911 	bl	802dcc6 <strcpy>
	strncat(path, filename, 20);
 8013aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013aa8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013aac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013ab0:	2214      	movs	r2, #20
 8013ab2:	6819      	ldr	r1, [r3, #0]
 8013ab4:	f019 ff6f 	bl	802d996 <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013ab8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013abc:	2241      	movs	r2, #65	; 0x41
 8013abe:	2100      	movs	r1, #0
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f019 ff33 	bl	802d92c <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 8013ac6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013aca:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013ace:	2340      	movs	r3, #64	; 0x40
 8013ad0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013ad4:	f017 f9a2 	bl	802ae1c <spi_fs_read_file_offset>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 8013ade:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013ae2:	2b40      	cmp	r3, #64	; 0x40
 8013ae4:	d110      	bne.n	8013b08 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013ae6:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013aea:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013aee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013af2:	4618      	mov	r0, r3
 8013af4:	f018 fbcc 	bl	802c290 <mbedtls_md5_update_ret>
				offset += readed_len;
 8013af8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013afc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013b00:	4413      	add	r3, r2
 8013b02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013b06:	e019      	b.n	8013b3c <calculate_md5_file+0xe4>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013b08:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013b0c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013b10:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b14:	4618      	mov	r0, r3
 8013b16:	f018 fbbb 	bl	802c290 <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 8013b1a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8013b1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b22:	4611      	mov	r1, r2
 8013b24:	4618      	mov	r0, r3
 8013b26:	f018 fc28 	bl	802c37a <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 8013b2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f017 fcb3 	bl	802b49a <mbedtls_md5_free>
				md5sum[16] = '\0';
 8013b34:	2300      	movs	r3, #0
 8013b36:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				break;
 8013b3a:	e002      	b.n	8013b42 <calculate_md5_file+0xea>
			}
		}
		osThreadYield();
 8013b3c:	f00c fb2a 	bl	8020194 <osThreadYield>
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013b40:	e7ba      	b.n	8013ab8 <calculate_md5_file+0x60>
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 8013b42:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8013b46:	469c      	mov	ip, r3
 8013b48:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8013b4c:	469e      	mov	lr, r3
 8013b4e:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8013b52:	461d      	mov	r5, r3
 8013b54:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8013b58:	461e      	mov	r6, r3
 8013b5a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8013b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8013b60:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8013b64:	623b      	str	r3, [r7, #32]
 8013b66:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8013b6a:	61fb      	str	r3, [r7, #28]
 8013b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013b70:	61bb      	str	r3, [r7, #24]
 8013b72:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8013b76:	617b      	str	r3, [r7, #20]
 8013b78:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8013b7c:	613b      	str	r3, [r7, #16]
 8013b7e:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8013b82:	60fb      	str	r3, [r7, #12]
 8013b84:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8013b88:	60bb      	str	r3, [r7, #8]
 8013b8a:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8013b8e:	607b      	str	r3, [r7, #4]
 8013b90:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8013b94:	461c      	mov	r4, r3
 8013b96:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013ba6:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8013baa:	920d      	str	r2, [sp, #52]	; 0x34
 8013bac:	910c      	str	r1, [sp, #48]	; 0x30
 8013bae:	940b      	str	r4, [sp, #44]	; 0x2c
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	920a      	str	r2, [sp, #40]	; 0x28
 8013bb4:	68ba      	ldr	r2, [r7, #8]
 8013bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	9208      	str	r2, [sp, #32]
 8013bbc:	693a      	ldr	r2, [r7, #16]
 8013bbe:	9207      	str	r2, [sp, #28]
 8013bc0:	697a      	ldr	r2, [r7, #20]
 8013bc2:	9206      	str	r2, [sp, #24]
 8013bc4:	69ba      	ldr	r2, [r7, #24]
 8013bc6:	9205      	str	r2, [sp, #20]
 8013bc8:	69fa      	ldr	r2, [r7, #28]
 8013bca:	9204      	str	r2, [sp, #16]
 8013bcc:	6a3a      	ldr	r2, [r7, #32]
 8013bce:	9203      	str	r2, [sp, #12]
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd2:	9302      	str	r3, [sp, #8]
 8013bd4:	9601      	str	r6, [sp, #4]
 8013bd6:	9500      	str	r5, [sp, #0]
 8013bd8:	4673      	mov	r3, lr
 8013bda:	4662      	mov	r2, ip
 8013bdc:	4908      	ldr	r1, [pc, #32]	; (8013c00 <calculate_md5_file+0x1a8>)
 8013bde:	6800      	ldr	r0, [r0, #0]
 8013be0:	f019 fd54 	bl	802d68c <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 8013be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2220      	movs	r2, #32
 8013bf0:	801a      	strh	r2, [r3, #0]
	return 0;
 8013bf2:	2300      	movs	r3, #0
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	08032a30 	.word	0x08032a30

08013c04 <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b092      	sub	sp, #72	; 0x48
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 8013c0e:	f107 0308 	add.w	r3, r7, #8
 8013c12:	4a18      	ldr	r2, [pc, #96]	; (8013c74 <activate_firmware+0x70>)
 8013c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c16:	c303      	stmia	r3!, {r0, r1}
 8013c18:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 8013c1a:	f107 0308 	add.w	r3, r7, #8
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fc fb3e 	bl	80102a0 <strlen>
 8013c24:	4603      	mov	r3, r0
 8013c26:	461a      	mov	r2, r3
 8013c28:	f107 0308 	add.w	r3, r7, #8
 8013c2c:	4413      	add	r3, r2
 8013c2e:	4912      	ldr	r1, [pc, #72]	; (8013c78 <activate_firmware+0x74>)
 8013c30:	461a      	mov	r2, r3
 8013c32:	460b      	mov	r3, r1
 8013c34:	cb03      	ldmia	r3!, {r0, r1}
 8013c36:	6010      	str	r0, [r2, #0]
 8013c38:	6051      	str	r1, [r2, #4]
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 8013c3e:	f107 0308 	add.w	r3, r7, #8
 8013c42:	490e      	ldr	r1, [pc, #56]	; (8013c7c <activate_firmware+0x78>)
 8013c44:	4618      	mov	r0, r3
 8013c46:	f017 fae3 	bl	802b210 <spi_fs_mv>
 8013c4a:	6478      	str	r0, [r7, #68]	; 0x44

	if(err >= 0){
 8013c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	db0a      	blt.n	8013c68 <activate_firmware+0x64>
		strcpy(buf, "OK");
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	4a0a      	ldr	r2, [pc, #40]	; (8013c80 <activate_firmware+0x7c>)
 8013c56:	8811      	ldrh	r1, [r2, #0]
 8013c58:	7892      	ldrb	r2, [r2, #2]
 8013c5a:	8019      	strh	r1, [r3, #0]
 8013c5c:	709a      	strb	r2, [r3, #2]
		* len = 2;
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	2202      	movs	r2, #2
 8013c62:	801a      	strh	r2, [r3, #0]
		return 1;
 8013c64:	2301      	movs	r3, #1
 8013c66:	e000      	b.n	8013c6a <activate_firmware+0x66>
	}

 	return 0;
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3748      	adds	r7, #72	; 0x48
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	08032a74 	.word	0x08032a74
 8013c78:	08032a80 	.word	0x08032a80
 8013c7c:	08032a8c 	.word	0x08032a8c
 8013c80:	08032a9c 	.word	0x08032a9c

08013c84 <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	607a      	str	r2, [r7, #4]
 8013c90:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013c92:	2300      	movs	r3, #0
 8013c94:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 8013c9a:	4937      	ldr	r1, [pc, #220]	; (8013d78 <http_post_cgi_processor+0xf4>)
 8013c9c:	68f8      	ldr	r0, [r7, #12]
 8013c9e:	f7fc fa9f 	bl	80101e0 <strcmp>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d106      	bne.n	8013cb6 <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013ca8:	2100      	movs	r1, #0
 8013caa:	68b8      	ldr	r0, [r7, #8]
 8013cac:	f7ff f9b6 	bl	801301c <param_from_http_to_Q>
		ret = HTTP_OK;
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	75fb      	strb	r3, [r7, #23]
 8013cb4:	e05a      	b.n	8013d6c <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013cb6:	4931      	ldr	r1, [pc, #196]	; (8013d7c <http_post_cgi_processor+0xf8>)
 8013cb8:	68f8      	ldr	r0, [r7, #12]
 8013cba:	f7fc fa91 	bl	80101e0 <strcmp>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d106      	bne.n	8013cd2 <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013cc4:	2102      	movs	r1, #2
 8013cc6:	68b8      	ldr	r0, [r7, #8]
 8013cc8:	f7ff f9a8 	bl	801301c <param_from_http_to_Q>
		ret = HTTP_OK;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	75fb      	strb	r3, [r7, #23]
 8013cd0:	e04c      	b.n	8013d6c <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013cd2:	492b      	ldr	r1, [pc, #172]	; (8013d80 <http_post_cgi_processor+0xfc>)
 8013cd4:	68f8      	ldr	r0, [r7, #12]
 8013cd6:	f7fc fa83 	bl	80101e0 <strcmp>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d10e      	bne.n	8013cfe <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013ce0:	4b28      	ldr	r3, [pc, #160]	; (8013d84 <http_post_cgi_processor+0x100>)
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	6839      	ldr	r1, [r7, #0]
 8013ce6:	68b8      	ldr	r0, [r7, #8]
 8013ce8:	f7ff fc26 	bl	8013538 <write_to_file>
 8013cec:	4603      	mov	r3, r0
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	da02      	bge.n	8013cf8 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	75fb      	strb	r3, [r7, #23]
 8013cf6:	e039      	b.n	8013d6c <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	75fb      	strb	r3, [r7, #23]
 8013cfc:	e036      	b.n	8013d6c <http_post_cgi_processor+0xe8>
		}
	}else if (strcmp((const char *)uri_name, "web_mkdir.cgi") == 0){
 8013cfe:	4922      	ldr	r1, [pc, #136]	; (8013d88 <http_post_cgi_processor+0x104>)
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f7fc fa6d 	bl	80101e0 <strcmp>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d10c      	bne.n	8013d26 <http_post_cgi_processor+0xa2>
		if( web_mkdir((char *)uri, HTTP_FS_DIR) >= 0){
 8013d0c:	491d      	ldr	r1, [pc, #116]	; (8013d84 <http_post_cgi_processor+0x100>)
 8013d0e:	68b8      	ldr	r0, [r7, #8]
 8013d10:	f7ff fd9a 	bl	8013848 <web_mkdir>
 8013d14:	4603      	mov	r3, r0
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	db02      	blt.n	8013d20 <http_post_cgi_processor+0x9c>
			ret = HTTP_OK;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	75fb      	strb	r3, [r7, #23]
 8013d1e:	e025      	b.n	8013d6c <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_RESET;
 8013d20:	2302      	movs	r3, #2
 8013d22:	75fb      	strb	r3, [r7, #23]
 8013d24:	e022      	b.n	8013d6c <http_post_cgi_processor+0xe8>
		}

	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 8013d26:	4919      	ldr	r1, [pc, #100]	; (8013d8c <http_post_cgi_processor+0x108>)
 8013d28:	68f8      	ldr	r0, [r7, #12]
 8013d2a:	f7fc fa59 	bl	80101e0 <strcmp>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d106      	bne.n	8013d42 <http_post_cgi_processor+0xbe>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 8013d34:	2104      	movs	r1, #4
 8013d36:	68b8      	ldr	r0, [r7, #8]
 8013d38:	f7ff f970 	bl	801301c <param_from_http_to_Q>
		ret = HTTP_OK;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	75fb      	strb	r3, [r7, #23]
 8013d40:	e014      	b.n	8013d6c <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 8013d42:	4913      	ldr	r1, [pc, #76]	; (8013d90 <http_post_cgi_processor+0x10c>)
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	f7fc fa4b 	bl	80101e0 <strcmp>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d10d      	bne.n	8013d6c <http_post_cgi_processor+0xe8>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013d50:	4b10      	ldr	r3, [pc, #64]	; (8013d94 <http_post_cgi_processor+0x110>)
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	6839      	ldr	r1, [r7, #0]
 8013d56:	68b8      	ldr	r0, [r7, #8]
 8013d58:	f7ff fbee 	bl	8013538 <write_to_file>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	da02      	bge.n	8013d68 <http_post_cgi_processor+0xe4>
			ret = HTTP_FAILED;
 8013d62:	2300      	movs	r3, #0
 8013d64:	75fb      	strb	r3, [r7, #23]
 8013d66:	e001      	b.n	8013d6c <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013d68:	2301      	movs	r3, #1
 8013d6a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8013d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3718      	adds	r7, #24
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	08032aa0 	.word	0x08032aa0
 8013d7c:	08032ab4 	.word	0x08032ab4
 8013d80:	08032ac8 	.word	0x08032ac8
 8013d84:	08032ad8 	.word	0x08032ad8
 8013d88:	08032ae0 	.word	0x08032ae0
 8013d8c:	08032af0 	.word	0x08032af0
 8013d90:	08032b08 	.word	0x08032b08
 8013d94:	08032a74 	.word	0x08032a74

08013d98 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b086      	sub	sp, #24
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	60b9      	str	r1, [r7, #8]
 8013da2:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 8013da4:	2300      	movs	r3, #0
 8013da6:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8013da8:	494f      	ldr	r1, [pc, #316]	; (8013ee8 <http_get_cgi_processor+0x150>)
 8013daa:	68f8      	ldr	r0, [r7, #12]
 8013dac:	f7fc fa18 	bl	80101e0 <strcmp>
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d107      	bne.n	8013dc6 <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	2100      	movs	r1, #0
 8013dba:	68b8      	ldr	r0, [r7, #8]
 8013dbc:	f7ff fab0 	bl	8013320 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	75fb      	strb	r3, [r7, #23]
 8013dc4:	e08b      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013dc6:	4949      	ldr	r1, [pc, #292]	; (8013eec <http_get_cgi_processor+0x154>)
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	f7fc fa09 	bl	80101e0 <strcmp>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d10b      	bne.n	8013dec <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	4946      	ldr	r1, [pc, #280]	; (8013ef0 <http_get_cgi_processor+0x158>)
 8013dd8:	461a      	mov	r2, r3
 8013dda:	460b      	mov	r3, r1
 8013ddc:	881b      	ldrh	r3, [r3, #0]
 8013dde:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013de0:	2301      	movs	r3, #1
 8013de2:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2202      	movs	r2, #2
 8013de8:	801a      	strh	r2, [r3, #0]
 8013dea:	e078      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013dec:	4941      	ldr	r1, [pc, #260]	; (8013ef4 <http_get_cgi_processor+0x15c>)
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f7fc f9f6 	bl	80101e0 <strcmp>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d107      	bne.n	8013e0a <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	2103      	movs	r1, #3
 8013dfe:	68b8      	ldr	r0, [r7, #8]
 8013e00:	f7ff fa8e 	bl	8013320 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013e04:	2301      	movs	r3, #1
 8013e06:	75fb      	strb	r3, [r7, #23]
 8013e08:	e069      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013e0a:	493b      	ldr	r1, [pc, #236]	; (8013ef8 <http_get_cgi_processor+0x160>)
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f7fc f9e7 	bl	80101e0 <strcmp>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d107      	bne.n	8013e28 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013e18:	687a      	ldr	r2, [r7, #4]
 8013e1a:	2104      	movs	r1, #4
 8013e1c:	68b8      	ldr	r0, [r7, #8]
 8013e1e:	f7ff fa7f 	bl	8013320 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013e22:	2301      	movs	r3, #1
 8013e24:	75fb      	strb	r3, [r7, #23]
 8013e26:	e05a      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013e28:	4934      	ldr	r1, [pc, #208]	; (8013efc <http_get_cgi_processor+0x164>)
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f7fc f9d8 	bl	80101e0 <strcmp>
 8013e30:	4603      	mov	r3, r0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d106      	bne.n	8013e44 <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013e36:	6879      	ldr	r1, [r7, #4]
 8013e38:	68b8      	ldr	r0, [r7, #8]
 8013e3a:	f7ff fd33 	bl	80138a4 <read_all_parameters>
		ret = HTTP_OK;
 8013e3e:	2301      	movs	r3, #1
 8013e40:	75fb      	strb	r3, [r7, #23]
 8013e42:	e04c      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013e44:	492e      	ldr	r1, [pc, #184]	; (8013f00 <http_get_cgi_processor+0x168>)
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f7fc f9ca 	bl	80101e0 <strcmp>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d111      	bne.n	8013e76 <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	492b      	ldr	r1, [pc, #172]	; (8013f04 <http_get_cgi_processor+0x16c>)
 8013e58:	482b      	ldr	r0, [pc, #172]	; (8013f08 <http_get_cgi_processor+0x170>)
 8013e5a:	f7ff fdfd 	bl	8013a58 <calculate_md5_file>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d102      	bne.n	8013e6a <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013e64:	2301      	movs	r3, #1
 8013e66:	75fb      	strb	r3, [r7, #23]
 8013e68:	e039      	b.n	8013ede <http_get_cgi_processor+0x146>
		}else{
			* len = 0;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013e70:	2300      	movs	r3, #0
 8013e72:	75fb      	strb	r3, [r7, #23]
 8013e74:	e033      	b.n	8013ede <http_get_cgi_processor+0x146>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013e76:	4925      	ldr	r1, [pc, #148]	; (8013f0c <http_get_cgi_processor+0x174>)
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f7fc f9b1 	bl	80101e0 <strcmp>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d106      	bne.n	8013e92 <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013e84:	6879      	ldr	r1, [r7, #4]
 8013e86:	68b8      	ldr	r0, [r7, #8]
 8013e88:	f7ff febc 	bl	8013c04 <activate_firmware>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	75fb      	strb	r3, [r7, #23]
 8013e90:	e025      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "erace_web_interface.cgi") == 0){
 8013e92:	491f      	ldr	r1, [pc, #124]	; (8013f10 <http_get_cgi_processor+0x178>)
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f7fc f9a3 	bl	80101e0 <strcmp>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d105      	bne.n	8013eac <http_get_cgi_processor+0x114>
		spi_fs_remove_recurcuve_in("/web");
 8013ea0:	481c      	ldr	r0, [pc, #112]	; (8013f14 <http_get_cgi_processor+0x17c>)
 8013ea2:	f017 f995 	bl	802b1d0 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	75fb      	strb	r3, [r7, #23]
 8013eaa:	e018      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013eac:	491a      	ldr	r1, [pc, #104]	; (8013f18 <http_get_cgi_processor+0x180>)
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f7fc f996 	bl	80101e0 <strcmp>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d105      	bne.n	8013ec6 <http_get_cgi_processor+0x12e>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013eba:	4818      	ldr	r0, [pc, #96]	; (8013f1c <http_get_cgi_processor+0x184>)
 8013ebc:	f017 f8c0 	bl	802b040 <spi_fs_remove>
		ret = HTTP_OK;
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	75fb      	strb	r3, [r7, #23]
 8013ec4:	e00b      	b.n	8013ede <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013ec6:	4916      	ldr	r1, [pc, #88]	; (8013f20 <http_get_cgi_processor+0x188>)
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f7fc f989 	bl	80101e0 <strcmp>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d104      	bne.n	8013ede <http_get_cgi_processor+0x146>
		spi_fs_remove_recurcuve_in("/");
 8013ed4:	4813      	ldr	r0, [pc, #76]	; (8013f24 <http_get_cgi_processor+0x18c>)
 8013ed6:	f017 f97b 	bl	802b1d0 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013eda:	2301      	movs	r3, #1
 8013edc:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3718      	adds	r7, #24
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	08032b1c 	.word	0x08032b1c
 8013eec:	08032b30 	.word	0x08032b30
 8013ef0:	08032b3c 	.word	0x08032b3c
 8013ef4:	08032b40 	.word	0x08032b40
 8013ef8:	08032b4c 	.word	0x08032b4c
 8013efc:	08032b60 	.word	0x08032b60
 8013f00:	08032b6c 	.word	0x08032b6c
 8013f04:	08032a80 	.word	0x08032a80
 8013f08:	08032a74 	.word	0x08032a74
 8013f0c:	08032b84 	.word	0x08032b84
 8013f10:	08032b9c 	.word	0x08032b9c
 8013f14:	08032bb4 	.word	0x08032bb4
 8013f18:	08032bbc 	.word	0x08032bbc
 8013f1c:	08032bd0 	.word	0x08032bd0
 8013f20:	08032be4 	.word	0x08032be4
 8013f24:	08032bf8 	.word	0x08032bf8

08013f28 <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8013f28:	b480      	push	{r7}
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	bf00      	nop
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f34:	4770      	bx	lr
	...

08013f38 <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8013f38:	b480      	push	{r7}
 8013f3a:	b083      	sub	sp, #12
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d002      	beq.n	8013f4e <init_mqtt_call_mutex+0x16>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	4a07      	ldr	r2, [pc, #28]	; (8013f68 <init_mqtt_call_mutex+0x30>)
 8013f4c:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d002      	beq.n	8013f5a <init_mqtt_call_mutex+0x22>
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	4a05      	ldr	r2, [pc, #20]	; (8013f6c <init_mqtt_call_mutex+0x34>)
 8013f58:	6013      	str	r3, [r2, #0]
}
 8013f5a:	bf00      	nop
 8013f5c:	370c      	adds	r7, #12
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr
 8013f66:	bf00      	nop
 8013f68:	2000005c 	.word	0x2000005c
 8013f6c:	20000060 	.word	0x20000060

08013f70 <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8013f70:	b5b0      	push	{r4, r5, r7, lr}
 8013f72:	b088      	sub	sp, #32
 8013f74:	af04      	add	r7, sp, #16
 8013f76:	60f8      	str	r0, [r7, #12]
 8013f78:	60b9      	str	r1, [r7, #8]
 8013f7a:	607a      	str	r2, [r7, #4]
 8013f7c:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 8013f7e:	4a5e      	ldr	r2, [pc, #376]	; (80140f8 <mqtt_client_init+0x188>)
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8013f84:	4a5d      	ldr	r2, [pc, #372]	; (80140fc <mqtt_client_init+0x18c>)
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8013f8a:	4a5d      	ldr	r2, [pc, #372]	; (8014100 <mqtt_client_init+0x190>)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 8013f90:	4a5c      	ldr	r2, [pc, #368]	; (8014104 <mqtt_client_init+0x194>)
 8013f92:	6a3b      	ldr	r3, [r7, #32]
 8013f94:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 8013f96:	4a5c      	ldr	r2, [pc, #368]	; (8014108 <mqtt_client_init+0x198>)
 8013f98:	887b      	ldrh	r3, [r7, #2]
 8013f9a:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8013f9c:	4a5b      	ldr	r2, [pc, #364]	; (801410c <mqtt_client_init+0x19c>)
 8013f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fa0:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 8013fa2:	4b55      	ldr	r3, [pc, #340]	; (80140f8 <mqtt_client_init+0x188>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	78db      	ldrb	r3, [r3, #3]
 8013fa8:	461c      	mov	r4, r3
 8013faa:	4b53      	ldr	r3, [pc, #332]	; (80140f8 <mqtt_client_init+0x188>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	791b      	ldrb	r3, [r3, #4]
 8013fb0:	461d      	mov	r5, r3
 8013fb2:	4b51      	ldr	r3, [pc, #324]	; (80140f8 <mqtt_client_init+0x188>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	795b      	ldrb	r3, [r3, #5]
 8013fb8:	461a      	mov	r2, r3
 8013fba:	4b4f      	ldr	r3, [pc, #316]	; (80140f8 <mqtt_client_init+0x188>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	799b      	ldrb	r3, [r3, #6]
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	4b4d      	ldr	r3, [pc, #308]	; (80140f8 <mqtt_client_init+0x188>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	79db      	ldrb	r3, [r3, #7]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	4b4b      	ldr	r3, [pc, #300]	; (80140f8 <mqtt_client_init+0x188>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	7a1b      	ldrb	r3, [r3, #8]
 8013fd0:	9303      	str	r3, [sp, #12]
 8013fd2:	9002      	str	r0, [sp, #8]
 8013fd4:	9101      	str	r1, [sp, #4]
 8013fd6:	9200      	str	r2, [sp, #0]
 8013fd8:	462b      	mov	r3, r5
 8013fda:	4622      	mov	r2, r4
 8013fdc:	494c      	ldr	r1, [pc, #304]	; (8014110 <mqtt_client_init+0x1a0>)
 8013fde:	484d      	ldr	r0, [pc, #308]	; (8014114 <mqtt_client_init+0x1a4>)
 8013fe0:	f019 fb54 	bl	802d68c <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 8013fe4:	484b      	ldr	r0, [pc, #300]	; (8014114 <mqtt_client_init+0x1a4>)
 8013fe6:	f000 fa81 	bl	80144ec <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 8013fea:	4b43      	ldr	r3, [pc, #268]	; (80140f8 <mqtt_client_init+0x188>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	7a5b      	ldrb	r3, [r3, #9]
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	4b41      	ldr	r3, [pc, #260]	; (80140f8 <mqtt_client_init+0x188>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	7a9b      	ldrb	r3, [r3, #10]
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	4b3f      	ldr	r3, [pc, #252]	; (80140f8 <mqtt_client_init+0x188>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	7adb      	ldrb	r3, [r3, #11]
 8014000:	461a      	mov	r2, r3
 8014002:	4b3d      	ldr	r3, [pc, #244]	; (80140f8 <mqtt_client_init+0x188>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	7b1b      	ldrb	r3, [r3, #12]
 8014008:	9301      	str	r3, [sp, #4]
 801400a:	9200      	str	r2, [sp, #0]
 801400c:	4603      	mov	r3, r0
 801400e:	460a      	mov	r2, r1
 8014010:	4941      	ldr	r1, [pc, #260]	; (8014118 <mqtt_client_init+0x1a8>)
 8014012:	4842      	ldr	r0, [pc, #264]	; (801411c <mqtt_client_init+0x1ac>)
 8014014:	f019 fb3a 	bl	802d68c <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 8014018:	4840      	ldr	r0, [pc, #256]	; (801411c <mqtt_client_init+0x1ac>)
 801401a:	f000 fa89 	bl	8014530 <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 801401e:	4b37      	ldr	r3, [pc, #220]	; (80140fc <mqtt_client_init+0x18c>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	3302      	adds	r3, #2
 8014024:	4618      	mov	r0, r3
 8014026:	f008 fd97 	bl	801cb58 <isValidIPv4>
 801402a:	4603      	mov	r3, r0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d00c      	beq.n	801404a <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8014030:	4b32      	ldr	r3, [pc, #200]	; (80140fc <mqtt_client_init+0x18c>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	1c98      	adds	r0, r3, #2
 8014036:	4b3a      	ldr	r3, [pc, #232]	; (8014120 <mqtt_client_init+0x1b0>)
 8014038:	9301      	str	r3, [sp, #4]
 801403a:	4b3a      	ldr	r3, [pc, #232]	; (8014124 <mqtt_client_init+0x1b4>)
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	4b3a      	ldr	r3, [pc, #232]	; (8014128 <mqtt_client_init+0x1b8>)
 8014040:	4a3a      	ldr	r2, [pc, #232]	; (801412c <mqtt_client_init+0x1bc>)
 8014042:	493b      	ldr	r1, [pc, #236]	; (8014130 <mqtt_client_init+0x1c0>)
 8014044:	f019 fb42 	bl	802d6cc <siscanf>
 8014048:	e00d      	b.n	8014066 <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 801404a:	4b2c      	ldr	r3, [pc, #176]	; (80140fc <mqtt_client_init+0x18c>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	3302      	adds	r3, #2
 8014050:	4936      	ldr	r1, [pc, #216]	; (801412c <mqtt_client_init+0x1bc>)
 8014052:	4618      	mov	r0, r3
 8014054:	f008 fd50 	bl	801caf8 <dns_service_resolve_name>
 8014058:	4603      	mov	r3, r0
 801405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801405e:	d102      	bne.n	8014066 <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 8014060:	f04f 33ff 	mov.w	r3, #4294967295
 8014064:	e043      	b.n	80140ee <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 8014066:	4b33      	ldr	r3, [pc, #204]	; (8014134 <mqtt_client_init+0x1c4>)
 8014068:	2200      	movs	r2, #0
 801406a:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 801406c:	4b31      	ldr	r3, [pc, #196]	; (8014134 <mqtt_client_init+0x1c4>)
 801406e:	2203      	movs	r2, #3
 8014070:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 8014072:	4b30      	ldr	r3, [pc, #192]	; (8014134 <mqtt_client_init+0x1c4>)
 8014074:	4a27      	ldr	r2, [pc, #156]	; (8014114 <mqtt_client_init+0x1a4>)
 8014076:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8014078:	4b2e      	ldr	r3, [pc, #184]	; (8014134 <mqtt_client_init+0x1c4>)
 801407a:	f241 3288 	movw	r2, #5000	; 0x1388
 801407e:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 8014080:	4b2c      	ldr	r3, [pc, #176]	; (8014134 <mqtt_client_init+0x1c4>)
 8014082:	2201      	movs	r2, #1
 8014084:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 8014086:	4b1d      	ldr	r3, [pc, #116]	; (80140fc <mqtt_client_init+0x18c>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	3384      	adds	r3, #132	; 0x84
 801408c:	4a29      	ldr	r2, [pc, #164]	; (8014134 <mqtt_client_init+0x1c4>)
 801408e:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 8014090:	4b1a      	ldr	r3, [pc, #104]	; (80140fc <mqtt_client_init+0x18c>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	33a5      	adds	r3, #165	; 0xa5
 8014096:	4a27      	ldr	r2, [pc, #156]	; (8014134 <mqtt_client_init+0x1c4>)
 8014098:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 801409a:	4b18      	ldr	r3, [pc, #96]	; (80140fc <mqtt_client_init+0x18c>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80140a2:	4b25      	ldr	r3, [pc, #148]	; (8014138 <mqtt_client_init+0x1c8>)
 80140a4:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 80140a6:	4b25      	ldr	r3, [pc, #148]	; (801413c <mqtt_client_init+0x1cc>)
 80140a8:	2200      	movs	r2, #0
 80140aa:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 80140ac:	4b23      	ldr	r3, [pc, #140]	; (801413c <mqtt_client_init+0x1cc>)
 80140ae:	2200      	movs	r2, #0
 80140b0:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 80140b2:	4b22      	ldr	r3, [pc, #136]	; (801413c <mqtt_client_init+0x1cc>)
 80140b4:	2200      	movs	r2, #0
 80140b6:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 80140b8:	4b20      	ldr	r3, [pc, #128]	; (801413c <mqtt_client_init+0x1cc>)
 80140ba:	2200      	movs	r2, #0
 80140bc:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 80140be:	2105      	movs	r1, #5
 80140c0:	481f      	ldr	r0, [pc, #124]	; (8014140 <mqtt_client_init+0x1d0>)
 80140c2:	f009 fae3 	bl	801d68c <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 80140c6:	4b0e      	ldr	r3, [pc, #56]	; (8014100 <mqtt_client_init+0x190>)
 80140c8:	681a      	ldr	r2, [r3, #0]
 80140ca:	4b0f      	ldr	r3, [pc, #60]	; (8014108 <mqtt_client_init+0x198>)
 80140cc:	881b      	ldrh	r3, [r3, #0]
 80140ce:	4618      	mov	r0, r3
 80140d0:	4b0c      	ldr	r3, [pc, #48]	; (8014104 <mqtt_client_init+0x194>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	490d      	ldr	r1, [pc, #52]	; (801410c <mqtt_client_init+0x19c>)
 80140d6:	8809      	ldrh	r1, [r1, #0]
 80140d8:	9102      	str	r1, [sp, #8]
 80140da:	9301      	str	r3, [sp, #4]
 80140dc:	9000      	str	r0, [sp, #0]
 80140de:	4613      	mov	r3, r2
 80140e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80140e4:	4916      	ldr	r1, [pc, #88]	; (8014140 <mqtt_client_init+0x1d0>)
 80140e6:	4817      	ldr	r0, [pc, #92]	; (8014144 <mqtt_client_init+0x1d4>)
 80140e8:	f008 fe20 	bl	801cd2c <MQTTClientInit>

	return 0;
 80140ec:	2300      	movs	r3, #0
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3710      	adds	r7, #16
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bdb0      	pop	{r4, r5, r7, pc}
 80140f6:	bf00      	nop
 80140f8:	2000052c 	.word	0x2000052c
 80140fc:	20000528 	.word	0x20000528
 8014100:	20000558 	.word	0x20000558
 8014104:	20000554 	.word	0x20000554
 8014108:	20000836 	.word	0x20000836
 801410c:	20000834 	.word	0x20000834
 8014110:	08032bfc 	.word	0x08032bfc
 8014114:	20000530 	.word	0x20000530
 8014118:	08032c18 	.word	0x08032c18
 801411c:	20000540 	.word	0x20000540
 8014120:	2000083b 	.word	0x2000083b
 8014124:	2000083a 	.word	0x2000083a
 8014128:	20000839 	.word	0x20000839
 801412c:	20000838 	.word	0x20000838
 8014130:	08032c24 	.word	0x08032c24
 8014134:	20000004 	.word	0x20000004
 8014138:	2000083c 	.word	0x2000083c
 801413c:	200008ac 	.word	0x200008ac
 8014140:	20000840 	.word	0x20000840
 8014144:	20000850 	.word	0x20000850

08014148 <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 801414e:	4b1f      	ldr	r3, [pc, #124]	; (80141cc <mqtt_client_connect+0x84>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 8014154:	4b1e      	ldr	r3, [pc, #120]	; (80141d0 <mqtt_client_connect+0x88>)
 8014156:	881b      	ldrh	r3, [r3, #0]
 8014158:	461a      	mov	r2, r3
 801415a:	491e      	ldr	r1, [pc, #120]	; (80141d4 <mqtt_client_connect+0x8c>)
 801415c:	481e      	ldr	r0, [pc, #120]	; (80141d8 <mqtt_client_connect+0x90>)
 801415e:	f009 fb12 	bl	801d786 <ConnectNetwork>
 8014162:	4603      	mov	r3, r0
 8014164:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8014166:	4b1d      	ldr	r3, [pc, #116]	; (80141dc <mqtt_client_connect+0x94>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	4798      	blx	r3
	if (result != 1) {
 801416c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014170:	2b01      	cmp	r3, #1
 8014172:	d010      	beq.n	8014196 <mqtt_client_connect+0x4e>
		set_mutex();
 8014174:	4b15      	ldr	r3, [pc, #84]	; (80141cc <mqtt_client_connect+0x84>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 801417a:	4b17      	ldr	r3, [pc, #92]	; (80141d8 <mqtt_client_connect+0x90>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	b2db      	uxtb	r3, r3
 8014180:	4618      	mov	r0, r3
 8014182:	f004 ff39 	bl	8018ff8 <close>
		release_mutex();
 8014186:	4b15      	ldr	r3, [pc, #84]	; (80141dc <mqtt_client_connect+0x94>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 801418c:	88fb      	ldrh	r3, [r7, #6]
 801418e:	3b0a      	subs	r3, #10
 8014190:	b29b      	uxth	r3, r3
 8014192:	b21b      	sxth	r3, r3
 8014194:	e016      	b.n	80141c4 <mqtt_client_connect+0x7c>
	}
	set_mutex();
 8014196:	4b0d      	ldr	r3, [pc, #52]	; (80141cc <mqtt_client_connect+0x84>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 801419c:	4910      	ldr	r1, [pc, #64]	; (80141e0 <mqtt_client_connect+0x98>)
 801419e:	4811      	ldr	r0, [pc, #68]	; (80141e4 <mqtt_client_connect+0x9c>)
 80141a0:	f009 f8ca 	bl	801d338 <MQTTConnect>
 80141a4:	4603      	mov	r3, r0
 80141a6:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 80141a8:	4b0c      	ldr	r3, [pc, #48]	; (80141dc <mqtt_client_connect+0x94>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 80141ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d004      	beq.n	80141c0 <mqtt_client_connect+0x78>
 80141b6:	88fb      	ldrh	r3, [r7, #6]
 80141b8:	3b14      	subs	r3, #20
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	b21b      	sxth	r3, r3
 80141be:	e001      	b.n	80141c4 <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 80141c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3708      	adds	r7, #8
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	2000005c 	.word	0x2000005c
 80141d0:	2000083c 	.word	0x2000083c
 80141d4:	20000838 	.word	0x20000838
 80141d8:	20000840 	.word	0x20000840
 80141dc:	20000060 	.word	0x20000060
 80141e0:	20000004 	.word	0x20000004
 80141e4:	20000850 	.word	0x20000850

080141e8 <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80141ee:	2280      	movs	r2, #128	; 0x80
 80141f0:	2100      	movs	r1, #0
 80141f2:	48a0      	ldr	r0, [pc, #640]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80141f4:	f019 fb9a 	bl	802d92c <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 80141f8:	2200      	movs	r2, #0
 80141fa:	2103      	movs	r1, #3
 80141fc:	489d      	ldr	r0, [pc, #628]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80141fe:	f000 f9b7 	bl	8014570 <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 8014202:	2200      	movs	r2, #0
 8014204:	2103      	movs	r1, #3
 8014206:	489c      	ldr	r0, [pc, #624]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014208:	f000 fa64 	bl	80146d4 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 801420c:	489a      	ldr	r0, [pc, #616]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801420e:	f7fc f847 	bl	80102a0 <strlen>
 8014212:	4603      	mov	r3, r0
 8014214:	4a99      	ldr	r2, [pc, #612]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014216:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014218:	4b98      	ldr	r3, [pc, #608]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801421a:	4a97      	ldr	r2, [pc, #604]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801421c:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 801421e:	4b97      	ldr	r3, [pc, #604]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014220:	2201      	movs	r2, #1
 8014222:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014224:	4b96      	ldr	r3, [pc, #600]	; (8014480 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801422a:	4a94      	ldr	r2, [pc, #592]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801422c:	4991      	ldr	r1, [pc, #580]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801422e:	4895      	ldr	r0, [pc, #596]	; (8014484 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014230:	f009 f908 	bl	801d444 <MQTTPublish>
 8014234:	4603      	mov	r3, r0
 8014236:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014238:	4b93      	ldr	r3, [pc, #588]	; (8014488 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d002      	beq.n	801424c <mqtt_client_reg_dev_on_home_assist+0x64>
 8014246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801424a:	e10f      	b.n	801446c <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 801424c:	4b8b      	ldr	r3, [pc, #556]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801424e:	889b      	ldrh	r3, [r3, #4]
 8014250:	3301      	adds	r3, #1
 8014252:	b29a      	uxth	r2, r3
 8014254:	4b89      	ldr	r3, [pc, #548]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014256:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014258:	2280      	movs	r2, #128	; 0x80
 801425a:	2100      	movs	r1, #0
 801425c:	4885      	ldr	r0, [pc, #532]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801425e:	f019 fb65 	bl	802d92c <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 8014262:	2200      	movs	r2, #0
 8014264:	2105      	movs	r1, #5
 8014266:	4883      	ldr	r0, [pc, #524]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014268:	f000 f982 	bl	8014570 <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 801426c:	2200      	movs	r2, #0
 801426e:	2105      	movs	r1, #5
 8014270:	4881      	ldr	r0, [pc, #516]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014272:	f000 fa2f 	bl	80146d4 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014276:	4880      	ldr	r0, [pc, #512]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014278:	f7fc f812 	bl	80102a0 <strlen>
 801427c:	4603      	mov	r3, r0
 801427e:	4a7f      	ldr	r2, [pc, #508]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014280:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014282:	4b7e      	ldr	r3, [pc, #504]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014284:	4a7c      	ldr	r2, [pc, #496]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014286:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014288:	4b7c      	ldr	r3, [pc, #496]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801428a:	2201      	movs	r2, #1
 801428c:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801428e:	4b7c      	ldr	r3, [pc, #496]	; (8014480 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014294:	4a79      	ldr	r2, [pc, #484]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014296:	4977      	ldr	r1, [pc, #476]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014298:	487a      	ldr	r0, [pc, #488]	; (8014484 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 801429a:	f009 f8d3 	bl	801d444 <MQTTPublish>
 801429e:	4603      	mov	r3, r0
 80142a0:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80142a2:	4b79      	ldr	r3, [pc, #484]	; (8014488 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80142a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d002      	beq.n	80142b6 <mqtt_client_reg_dev_on_home_assist+0xce>
 80142b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142b4:	e0da      	b.n	801446c <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80142b6:	4b71      	ldr	r3, [pc, #452]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142b8:	889b      	ldrh	r3, [r3, #4]
 80142ba:	3301      	adds	r3, #1
 80142bc:	b29a      	uxth	r2, r3
 80142be:	4b6f      	ldr	r3, [pc, #444]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142c0:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80142c2:	2280      	movs	r2, #128	; 0x80
 80142c4:	2100      	movs	r1, #0
 80142c6:	486b      	ldr	r0, [pc, #428]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142c8:	f019 fb30 	bl	802d92c <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 80142cc:	2200      	movs	r2, #0
 80142ce:	2104      	movs	r1, #4
 80142d0:	4868      	ldr	r0, [pc, #416]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142d2:	f000 f94d 	bl	8014570 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 80142d6:	2200      	movs	r2, #0
 80142d8:	2104      	movs	r1, #4
 80142da:	4867      	ldr	r0, [pc, #412]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142dc:	f000 f9fa 	bl	80146d4 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80142e0:	4865      	ldr	r0, [pc, #404]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142e2:	f7fb ffdd 	bl	80102a0 <strlen>
 80142e6:	4603      	mov	r3, r0
 80142e8:	4a64      	ldr	r2, [pc, #400]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142ea:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80142ec:	4b63      	ldr	r3, [pc, #396]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142ee:	4a62      	ldr	r2, [pc, #392]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142f0:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80142f2:	4b62      	ldr	r3, [pc, #392]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142f4:	2201      	movs	r2, #1
 80142f6:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80142f8:	4b61      	ldr	r3, [pc, #388]	; (8014480 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80142fe:	4a5f      	ldr	r2, [pc, #380]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014300:	495c      	ldr	r1, [pc, #368]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014302:	4860      	ldr	r0, [pc, #384]	; (8014484 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014304:	f009 f89e 	bl	801d444 <MQTTPublish>
 8014308:	4603      	mov	r3, r0
 801430a:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801430c:	4b5e      	ldr	r3, [pc, #376]	; (8014488 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d002      	beq.n	8014320 <mqtt_client_reg_dev_on_home_assist+0x138>
 801431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801431e:	e0a5      	b.n	801446c <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014320:	4b56      	ldr	r3, [pc, #344]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014322:	889b      	ldrh	r3, [r3, #4]
 8014324:	3301      	adds	r3, #1
 8014326:	b29a      	uxth	r2, r3
 8014328:	4b54      	ldr	r3, [pc, #336]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801432a:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG APPARENT POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801432c:	2280      	movs	r2, #128	; 0x80
 801432e:	2100      	movs	r1, #0
 8014330:	4850      	ldr	r0, [pc, #320]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014332:	f019 fafb 	bl	802d92c <memset>
		get_config_topik_string(buf_topik, APPARENT_POWER_SENSOR_TOPIK, 0);
 8014336:	2200      	movs	r2, #0
 8014338:	2108      	movs	r1, #8
 801433a:	484e      	ldr	r0, [pc, #312]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801433c:	f000 f918 	bl	8014570 <get_config_topik_string>
		get_config_payload_string(buf_payload, APPARENT_POWER_SENSOR_PAYLOAD, 0);
 8014340:	2200      	movs	r2, #0
 8014342:	2108      	movs	r1, #8
 8014344:	484c      	ldr	r0, [pc, #304]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014346:	f000 f9c5 	bl	80146d4 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 801434a:	484b      	ldr	r0, [pc, #300]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801434c:	f7fb ffa8 	bl	80102a0 <strlen>
 8014350:	4603      	mov	r3, r0
 8014352:	4a4a      	ldr	r2, [pc, #296]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014354:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014356:	4b49      	ldr	r3, [pc, #292]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014358:	4a47      	ldr	r2, [pc, #284]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801435a:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 801435c:	4b47      	ldr	r3, [pc, #284]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801435e:	2201      	movs	r2, #1
 8014360:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014362:	4b47      	ldr	r3, [pc, #284]	; (8014480 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014368:	4a44      	ldr	r2, [pc, #272]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801436a:	4942      	ldr	r1, [pc, #264]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801436c:	4845      	ldr	r0, [pc, #276]	; (8014484 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 801436e:	f009 f869 	bl	801d444 <MQTTPublish>
 8014372:	4603      	mov	r3, r0
 8014374:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014376:	4b44      	ldr	r3, [pc, #272]	; (8014488 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <mqtt_client_reg_dev_on_home_assist+0x1a2>
 8014384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014388:	e070      	b.n	801446c <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 801438a:	4b3c      	ldr	r3, [pc, #240]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801438c:	889b      	ldrh	r3, [r3, #4]
 801438e:	3301      	adds	r3, #1
 8014390:	b29a      	uxth	r2, r3
 8014392:	4b3a      	ldr	r3, [pc, #232]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014394:	809a      	strh	r2, [r3, #4]


//------------------------------REG APPARENT POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014396:	2280      	movs	r2, #128	; 0x80
 8014398:	2100      	movs	r1, #0
 801439a:	4836      	ldr	r0, [pc, #216]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801439c:	f019 fac6 	bl	802d92c <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 80143a0:	2200      	movs	r2, #0
 80143a2:	2106      	movs	r1, #6
 80143a4:	4833      	ldr	r0, [pc, #204]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143a6:	f000 f8e3 	bl	8014570 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 80143aa:	2200      	movs	r2, #0
 80143ac:	2106      	movs	r1, #6
 80143ae:	4832      	ldr	r0, [pc, #200]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143b0:	f000 f990 	bl	80146d4 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80143b4:	4830      	ldr	r0, [pc, #192]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143b6:	f7fb ff73 	bl	80102a0 <strlen>
 80143ba:	4603      	mov	r3, r0
 80143bc:	4a2f      	ldr	r2, [pc, #188]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143be:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80143c0:	4b2e      	ldr	r3, [pc, #184]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143c2:	4a2d      	ldr	r2, [pc, #180]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143c4:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80143c6:	4b2d      	ldr	r3, [pc, #180]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143c8:	2201      	movs	r2, #1
 80143ca:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80143cc:	4b2c      	ldr	r3, [pc, #176]	; (8014480 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80143d2:	4a2a      	ldr	r2, [pc, #168]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143d4:	4927      	ldr	r1, [pc, #156]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143d6:	482b      	ldr	r0, [pc, #172]	; (8014484 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80143d8:	f009 f834 	bl	801d444 <MQTTPublish>
 80143dc:	4603      	mov	r3, r0
 80143de:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80143e0:	4b29      	ldr	r3, [pc, #164]	; (8014488 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80143e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d002      	beq.n	80143f4 <mqtt_client_reg_dev_on_home_assist+0x20c>
 80143ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143f2:	e03b      	b.n	801446c <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80143f4:	4b21      	ldr	r3, [pc, #132]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143f6:	889b      	ldrh	r3, [r3, #4]
 80143f8:	3301      	adds	r3, #1
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	4b1f      	ldr	r3, [pc, #124]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143fe:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014400:	2280      	movs	r2, #128	; 0x80
 8014402:	2100      	movs	r1, #0
 8014404:	481b      	ldr	r0, [pc, #108]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014406:	f019 fa91 	bl	802d92c <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 801440a:	2200      	movs	r2, #0
 801440c:	2107      	movs	r1, #7
 801440e:	4819      	ldr	r0, [pc, #100]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014410:	f000 f8ae 	bl	8014570 <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 8014414:	2200      	movs	r2, #0
 8014416:	2107      	movs	r1, #7
 8014418:	4817      	ldr	r0, [pc, #92]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801441a:	f000 f95b 	bl	80146d4 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 801441e:	4816      	ldr	r0, [pc, #88]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014420:	f7fb ff3e 	bl	80102a0 <strlen>
 8014424:	4603      	mov	r3, r0
 8014426:	4a15      	ldr	r2, [pc, #84]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014428:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 801442a:	4b14      	ldr	r3, [pc, #80]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801442c:	4a12      	ldr	r2, [pc, #72]	; (8014478 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801442e:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014430:	4b12      	ldr	r3, [pc, #72]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014432:	2201      	movs	r2, #1
 8014434:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014436:	4b12      	ldr	r3, [pc, #72]	; (8014480 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801443c:	4a0f      	ldr	r2, [pc, #60]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 801443e:	490d      	ldr	r1, [pc, #52]	; (8014474 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014440:	4810      	ldr	r0, [pc, #64]	; (8014484 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014442:	f008 ffff 	bl	801d444 <MQTTPublish>
 8014446:	4603      	mov	r3, r0
 8014448:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801444a:	4b0f      	ldr	r3, [pc, #60]	; (8014488 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d002      	beq.n	801445e <mqtt_client_reg_dev_on_home_assist+0x276>
 8014458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801445c:	e006      	b.n	801446c <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 801445e:	4b07      	ldr	r3, [pc, #28]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014460:	889b      	ldrh	r3, [r3, #4]
 8014462:	3301      	adds	r3, #1
 8014464:	b29a      	uxth	r2, r3
 8014466:	4b05      	ldr	r3, [pc, #20]	; (801447c <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014468:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 801446a:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 801446c:	4618      	mov	r0, r3
 801446e:	3708      	adds	r7, #8
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	2000055c 	.word	0x2000055c
 8014478:	200005dc 	.word	0x200005dc
 801447c:	200008ac 	.word	0x200008ac
 8014480:	2000005c 	.word	0x2000005c
 8014484:	20000850 	.word	0x20000850
 8014488:	20000060 	.word	0x20000060

0801448c <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 8014496:	6838      	ldr	r0, [r7, #0]
 8014498:	f7fb ff02 	bl	80102a0 <strlen>
 801449c:	4603      	mov	r3, r0
 801449e:	4a0f      	ldr	r2, [pc, #60]	; (80144dc <send_data_to_topik+0x50>)
 80144a0:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 80144a2:	4a0e      	ldr	r2, [pc, #56]	; (80144dc <send_data_to_topik+0x50>)
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 80144a8:	4b0c      	ldr	r3, [pc, #48]	; (80144dc <send_data_to_topik+0x50>)
 80144aa:	889b      	ldrh	r3, [r3, #4]
 80144ac:	3301      	adds	r3, #1
 80144ae:	b29a      	uxth	r2, r3
 80144b0:	4b0a      	ldr	r3, [pc, #40]	; (80144dc <send_data_to_topik+0x50>)
 80144b2:	809a      	strh	r2, [r3, #4]
	set_mutex();
 80144b4:	4b0a      	ldr	r3, [pc, #40]	; (80144e0 <send_data_to_topik+0x54>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 80144ba:	4a08      	ldr	r2, [pc, #32]	; (80144dc <send_data_to_topik+0x50>)
 80144bc:	6879      	ldr	r1, [r7, #4]
 80144be:	4809      	ldr	r0, [pc, #36]	; (80144e4 <send_data_to_topik+0x58>)
 80144c0:	f008 ffc0 	bl	801d444 <MQTTPublish>
 80144c4:	4603      	mov	r3, r0
 80144c6:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 80144c8:	4b07      	ldr	r3, [pc, #28]	; (80144e8 <send_data_to_topik+0x5c>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 80144ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	3710      	adds	r7, #16
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}
 80144da:	bf00      	nop
 80144dc:	200008ac 	.word	0x200008ac
 80144e0:	2000005c 	.word	0x2000005c
 80144e4:	20000850 	.word	0x20000850
 80144e8:	20000060 	.word	0x20000060

080144ec <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 80144f4:	2300      	movs	r3, #0
 80144f6:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7fb fed1 	bl	80102a0 <strlen>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b0d      	cmp	r3, #13
 8014502:	d902      	bls.n	801450a <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 8014504:	230e      	movs	r3, #14
 8014506:	73fb      	strb	r3, [r7, #15]
 8014508:	e004      	b.n	8014514 <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7fb fec8 	bl	80102a0 <strlen>
 8014510:	4603      	mov	r3, r0
 8014512:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 8014514:	7bfb      	ldrb	r3, [r7, #15]
 8014516:	461a      	mov	r2, r3
 8014518:	6879      	ldr	r1, [r7, #4]
 801451a:	4804      	ldr	r0, [pc, #16]	; (801452c <set_device_id+0x40>)
 801451c:	f019 fa60 	bl	802d9e0 <strncpy>
	return 0;
 8014520:	2300      	movs	r3, #0
}
 8014522:	4618      	mov	r0, r3
 8014524:	3710      	adds	r7, #16
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	200008bc 	.word	0x200008bc

08014530 <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 8014538:	4b0c      	ldr	r3, [pc, #48]	; (801456c <set_device_conf_ip+0x3c>)
 801453a:	2200      	movs	r2, #0
 801453c:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f7fb feae 	bl	80102a0 <strlen>
 8014544:	4603      	mov	r3, r0
 8014546:	2b12      	cmp	r3, #18
 8014548:	d80a      	bhi.n	8014560 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f7fb fea8 	bl	80102a0 <strlen>
 8014550:	4603      	mov	r3, r0
 8014552:	461a      	mov	r2, r3
 8014554:	6879      	ldr	r1, [r7, #4]
 8014556:	4805      	ldr	r0, [pc, #20]	; (801456c <set_device_conf_ip+0x3c>)
 8014558:	f019 fa42 	bl	802d9e0 <strncpy>
		return 0;
 801455c:	2300      	movs	r3, #0
 801455e:	e001      	b.n	8014564 <set_device_conf_ip+0x34>
	}
	return -1;
 8014560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014564:	4618      	mov	r0, r3
 8014566:	3708      	adds	r7, #8
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}
 801456c:	200008cc 	.word	0x200008cc

08014570 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af04      	add	r7, sp, #16
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	460b      	mov	r3, r1
 801457a:	70fb      	strb	r3, [r7, #3]
 801457c:	4613      	mov	r3, r2
 801457e:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 8014580:	2100      	movs	r1, #0
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f019 fb9f 	bl	802dcc6 <strcpy>
	switch (topik_type) {
 8014588:	78fb      	ldrb	r3, [r7, #3]
 801458a:	3b01      	subs	r3, #1
 801458c:	2b07      	cmp	r3, #7
 801458e:	d87b      	bhi.n	8014688 <get_config_topik_string+0x118>
 8014590:	a201      	add	r2, pc, #4	; (adr r2, 8014598 <get_config_topik_string+0x28>)
 8014592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014596:	bf00      	nop
 8014598:	080145b9 	.word	0x080145b9
 801459c:	080145d3 	.word	0x080145d3
 80145a0:	080145ed 	.word	0x080145ed
 80145a4:	08014621 	.word	0x08014621
 80145a8:	08014607 	.word	0x08014607
 80145ac:	08014655 	.word	0x08014655
 80145b0:	0801466f 	.word	0x0801466f
 80145b4:	0801463b 	.word	0x0801463b
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 80145b8:	78bb      	ldrb	r3, [r7, #2]
 80145ba:	9302      	str	r3, [sp, #8]
 80145bc:	4b36      	ldr	r3, [pc, #216]	; (8014698 <get_config_topik_string+0x128>)
 80145be:	9301      	str	r3, [sp, #4]
 80145c0:	4b36      	ldr	r3, [pc, #216]	; (801469c <get_config_topik_string+0x12c>)
 80145c2:	9300      	str	r3, [sp, #0]
 80145c4:	4b36      	ldr	r3, [pc, #216]	; (80146a0 <get_config_topik_string+0x130>)
 80145c6:	4a37      	ldr	r2, [pc, #220]	; (80146a4 <get_config_topik_string+0x134>)
 80145c8:	4937      	ldr	r1, [pc, #220]	; (80146a8 <get_config_topik_string+0x138>)
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f019 f85e 	bl	802d68c <siprintf>
			break;
 80145d0:	e05d      	b.n	801468e <get_config_topik_string+0x11e>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 80145d2:	78bb      	ldrb	r3, [r7, #2]
 80145d4:	9302      	str	r3, [sp, #8]
 80145d6:	4b35      	ldr	r3, [pc, #212]	; (80146ac <get_config_topik_string+0x13c>)
 80145d8:	9301      	str	r3, [sp, #4]
 80145da:	4b30      	ldr	r3, [pc, #192]	; (801469c <get_config_topik_string+0x12c>)
 80145dc:	9300      	str	r3, [sp, #0]
 80145de:	4b33      	ldr	r3, [pc, #204]	; (80146ac <get_config_topik_string+0x13c>)
 80145e0:	4a30      	ldr	r2, [pc, #192]	; (80146a4 <get_config_topik_string+0x134>)
 80145e2:	4931      	ldr	r1, [pc, #196]	; (80146a8 <get_config_topik_string+0x138>)
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f019 f851 	bl	802d68c <siprintf>
			break;
 80145ea:	e050      	b.n	801468e <get_config_topik_string+0x11e>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 80145ec:	4b30      	ldr	r3, [pc, #192]	; (80146b0 <get_config_topik_string+0x140>)
 80145ee:	9302      	str	r3, [sp, #8]
 80145f0:	4b2a      	ldr	r3, [pc, #168]	; (801469c <get_config_topik_string+0x12c>)
 80145f2:	9301      	str	r3, [sp, #4]
 80145f4:	4b2f      	ldr	r3, [pc, #188]	; (80146b4 <get_config_topik_string+0x144>)
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	4b2f      	ldr	r3, [pc, #188]	; (80146b8 <get_config_topik_string+0x148>)
 80145fa:	4a2a      	ldr	r2, [pc, #168]	; (80146a4 <get_config_topik_string+0x134>)
 80145fc:	492f      	ldr	r1, [pc, #188]	; (80146bc <get_config_topik_string+0x14c>)
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f019 f844 	bl	802d68c <siprintf>
			break;
 8014604:	e043      	b.n	801468e <get_config_topik_string+0x11e>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 8014606:	4b2e      	ldr	r3, [pc, #184]	; (80146c0 <get_config_topik_string+0x150>)
 8014608:	9302      	str	r3, [sp, #8]
 801460a:	4b24      	ldr	r3, [pc, #144]	; (801469c <get_config_topik_string+0x12c>)
 801460c:	9301      	str	r3, [sp, #4]
 801460e:	4b29      	ldr	r3, [pc, #164]	; (80146b4 <get_config_topik_string+0x144>)
 8014610:	9300      	str	r3, [sp, #0]
 8014612:	4b29      	ldr	r3, [pc, #164]	; (80146b8 <get_config_topik_string+0x148>)
 8014614:	4a23      	ldr	r2, [pc, #140]	; (80146a4 <get_config_topik_string+0x134>)
 8014616:	4929      	ldr	r1, [pc, #164]	; (80146bc <get_config_topik_string+0x14c>)
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f019 f837 	bl	802d68c <siprintf>
			break;
 801461e:	e036      	b.n	801468e <get_config_topik_string+0x11e>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 8014620:	4b28      	ldr	r3, [pc, #160]	; (80146c4 <get_config_topik_string+0x154>)
 8014622:	9302      	str	r3, [sp, #8]
 8014624:	4b1d      	ldr	r3, [pc, #116]	; (801469c <get_config_topik_string+0x12c>)
 8014626:	9301      	str	r3, [sp, #4]
 8014628:	4b22      	ldr	r3, [pc, #136]	; (80146b4 <get_config_topik_string+0x144>)
 801462a:	9300      	str	r3, [sp, #0]
 801462c:	4b22      	ldr	r3, [pc, #136]	; (80146b8 <get_config_topik_string+0x148>)
 801462e:	4a1d      	ldr	r2, [pc, #116]	; (80146a4 <get_config_topik_string+0x134>)
 8014630:	4922      	ldr	r1, [pc, #136]	; (80146bc <get_config_topik_string+0x14c>)
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f019 f82a 	bl	802d68c <siprintf>
			break;
 8014638:	e029      	b.n	801468e <get_config_topik_string+0x11e>
		case APPARENT_POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power);
 801463a:	4b23      	ldr	r3, [pc, #140]	; (80146c8 <get_config_topik_string+0x158>)
 801463c:	9302      	str	r3, [sp, #8]
 801463e:	4b17      	ldr	r3, [pc, #92]	; (801469c <get_config_topik_string+0x12c>)
 8014640:	9301      	str	r3, [sp, #4]
 8014642:	4b1c      	ldr	r3, [pc, #112]	; (80146b4 <get_config_topik_string+0x144>)
 8014644:	9300      	str	r3, [sp, #0]
 8014646:	4b1c      	ldr	r3, [pc, #112]	; (80146b8 <get_config_topik_string+0x148>)
 8014648:	4a16      	ldr	r2, [pc, #88]	; (80146a4 <get_config_topik_string+0x134>)
 801464a:	491c      	ldr	r1, [pc, #112]	; (80146bc <get_config_topik_string+0x14c>)
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f019 f81d 	bl	802d68c <siprintf>
			break;
 8014652:	e01c      	b.n	801468e <get_config_topik_string+0x11e>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 8014654:	4b1d      	ldr	r3, [pc, #116]	; (80146cc <get_config_topik_string+0x15c>)
 8014656:	9302      	str	r3, [sp, #8]
 8014658:	4b10      	ldr	r3, [pc, #64]	; (801469c <get_config_topik_string+0x12c>)
 801465a:	9301      	str	r3, [sp, #4]
 801465c:	4b15      	ldr	r3, [pc, #84]	; (80146b4 <get_config_topik_string+0x144>)
 801465e:	9300      	str	r3, [sp, #0]
 8014660:	4b15      	ldr	r3, [pc, #84]	; (80146b8 <get_config_topik_string+0x148>)
 8014662:	4a10      	ldr	r2, [pc, #64]	; (80146a4 <get_config_topik_string+0x134>)
 8014664:	4915      	ldr	r1, [pc, #84]	; (80146bc <get_config_topik_string+0x14c>)
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f019 f810 	bl	802d68c <siprintf>
			break;
 801466c:	e00f      	b.n	801468e <get_config_topik_string+0x11e>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 801466e:	4b18      	ldr	r3, [pc, #96]	; (80146d0 <get_config_topik_string+0x160>)
 8014670:	9302      	str	r3, [sp, #8]
 8014672:	4b0a      	ldr	r3, [pc, #40]	; (801469c <get_config_topik_string+0x12c>)
 8014674:	9301      	str	r3, [sp, #4]
 8014676:	4b0f      	ldr	r3, [pc, #60]	; (80146b4 <get_config_topik_string+0x144>)
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	4b0f      	ldr	r3, [pc, #60]	; (80146b8 <get_config_topik_string+0x148>)
 801467c:	4a09      	ldr	r2, [pc, #36]	; (80146a4 <get_config_topik_string+0x134>)
 801467e:	490f      	ldr	r1, [pc, #60]	; (80146bc <get_config_topik_string+0x14c>)
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f019 f803 	bl	802d68c <siprintf>
			break;
 8014686:	e002      	b.n	801468e <get_config_topik_string+0x11e>
		default:
			return -1;
 8014688:	f04f 33ff 	mov.w	r3, #4294967295
 801468c:	e000      	b.n	8014690 <get_config_topik_string+0x120>
			break;
	}


	return 0;
 801468e:	2300      	movs	r3, #0
}
 8014690:	4618      	mov	r0, r3
 8014692:	3708      	adds	r7, #8
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}
 8014698:	2000008c 	.word	0x2000008c
 801469c:	200008bc 	.word	0x200008bc
 80146a0:	20000074 	.word	0x20000074
 80146a4:	20000064 	.word	0x20000064
 80146a8:	08034284 	.word	0x08034284
 80146ac:	20000084 	.word	0x20000084
 80146b0:	08032c60 	.word	0x08032c60
 80146b4:	08032c68 	.word	0x08032c68
 80146b8:	08032c40 	.word	0x08032c40
 80146bc:	08032c48 	.word	0x08032c48
 80146c0:	08032c70 	.word	0x08032c70
 80146c4:	08032c78 	.word	0x08032c78
 80146c8:	08032c80 	.word	0x08032c80
 80146cc:	08032c90 	.word	0x08032c90
 80146d0:	08032ca0 	.word	0x08032ca0

080146d4 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 80146d4:	b590      	push	{r4, r7, lr}
 80146d6:	b097      	sub	sp, #92	; 0x5c
 80146d8:	af12      	add	r7, sp, #72	; 0x48
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	460b      	mov	r3, r1
 80146de:	70fb      	strb	r3, [r7, #3]
 80146e0:	4613      	mov	r3, r2
 80146e2:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 80146e4:	2300      	movs	r3, #0
 80146e6:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2200      	movs	r2, #0
 80146ec:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 80146ee:	78fb      	ldrb	r3, [r7, #3]
 80146f0:	3b01      	subs	r3, #1
 80146f2:	2b07      	cmp	r3, #7
 80146f4:	f200 8181 	bhi.w	80149fa <get_config_payload_string+0x326>
 80146f8:	a201      	add	r2, pc, #4	; (adr r2, 8014700 <get_config_payload_string+0x2c>)
 80146fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146fe:	bf00      	nop
 8014700:	08014755 	.word	0x08014755
 8014704:	08014721 	.word	0x08014721
 8014708:	08014783 	.word	0x08014783
 801470c:	0801482f 	.word	0x0801482f
 8014710:	080147d9 	.word	0x080147d9
 8014714:	080148db 	.word	0x080148db
 8014718:	080149a5 	.word	0x080149a5
 801471c:	08014885 	.word	0x08014885
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014720:	78bb      	ldrb	r3, [r7, #2]
 8014722:	78ba      	ldrb	r2, [r7, #2]
 8014724:	78b9      	ldrb	r1, [r7, #2]
 8014726:	78b8      	ldrb	r0, [r7, #2]
 8014728:	4c81      	ldr	r4, [pc, #516]	; (8014930 <get_config_payload_string+0x25c>)
 801472a:	9407      	str	r4, [sp, #28]
 801472c:	4c81      	ldr	r4, [pc, #516]	; (8014934 <get_config_payload_string+0x260>)
 801472e:	9406      	str	r4, [sp, #24]
 8014730:	4c80      	ldr	r4, [pc, #512]	; (8014934 <get_config_payload_string+0x260>)
 8014732:	9405      	str	r4, [sp, #20]
 8014734:	9004      	str	r0, [sp, #16]
 8014736:	487f      	ldr	r0, [pc, #508]	; (8014934 <get_config_payload_string+0x260>)
 8014738:	9003      	str	r0, [sp, #12]
 801473a:	9102      	str	r1, [sp, #8]
 801473c:	9201      	str	r2, [sp, #4]
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	4b7c      	ldr	r3, [pc, #496]	; (8014934 <get_config_payload_string+0x260>)
 8014742:	4a7c      	ldr	r2, [pc, #496]	; (8014934 <get_config_payload_string+0x260>)
 8014744:	497c      	ldr	r1, [pc, #496]	; (8014938 <get_config_payload_string+0x264>)
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f018 ffa0 	bl	802d68c <siprintf>
 801474c:	4603      	mov	r3, r0
 801474e:	73fb      	strb	r3, [r7, #15]
			return len;
 8014750:	7bfb      	ldrb	r3, [r7, #15]
 8014752:	e155      	b.n	8014a00 <get_config_payload_string+0x32c>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014754:	78b9      	ldrb	r1, [r7, #2]
 8014756:	78bb      	ldrb	r3, [r7, #2]
 8014758:	78ba      	ldrb	r2, [r7, #2]
 801475a:	4875      	ldr	r0, [pc, #468]	; (8014930 <get_config_payload_string+0x25c>)
 801475c:	9005      	str	r0, [sp, #20]
 801475e:	4875      	ldr	r0, [pc, #468]	; (8014934 <get_config_payload_string+0x260>)
 8014760:	9004      	str	r0, [sp, #16]
 8014762:	4874      	ldr	r0, [pc, #464]	; (8014934 <get_config_payload_string+0x260>)
 8014764:	9003      	str	r0, [sp, #12]
 8014766:	9202      	str	r2, [sp, #8]
 8014768:	4a72      	ldr	r2, [pc, #456]	; (8014934 <get_config_payload_string+0x260>)
 801476a:	9201      	str	r2, [sp, #4]
 801476c:	9300      	str	r3, [sp, #0]
 801476e:	460b      	mov	r3, r1
 8014770:	4a70      	ldr	r2, [pc, #448]	; (8014934 <get_config_payload_string+0x260>)
 8014772:	4972      	ldr	r1, [pc, #456]	; (801493c <get_config_payload_string+0x268>)
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f018 ff89 	bl	802d68c <siprintf>
 801477a:	4603      	mov	r3, r0
 801477c:	73fb      	strb	r3, [r7, #15]
			return len;
 801477e:	7bfb      	ldrb	r3, [r7, #15]
 8014780:	e13e      	b.n	8014a00 <get_config_payload_string+0x32c>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8014782:	4b6b      	ldr	r3, [pc, #428]	; (8014930 <get_config_payload_string+0x25c>)
 8014784:	9310      	str	r3, [sp, #64]	; 0x40
 8014786:	4b6e      	ldr	r3, [pc, #440]	; (8014940 <get_config_payload_string+0x26c>)
 8014788:	930f      	str	r3, [sp, #60]	; 0x3c
 801478a:	4b6e      	ldr	r3, [pc, #440]	; (8014944 <get_config_payload_string+0x270>)
 801478c:	930e      	str	r3, [sp, #56]	; 0x38
 801478e:	4b6e      	ldr	r3, [pc, #440]	; (8014948 <get_config_payload_string+0x274>)
 8014790:	930d      	str	r3, [sp, #52]	; 0x34
 8014792:	4b6e      	ldr	r3, [pc, #440]	; (801494c <get_config_payload_string+0x278>)
 8014794:	930c      	str	r3, [sp, #48]	; 0x30
 8014796:	4b6e      	ldr	r3, [pc, #440]	; (8014950 <get_config_payload_string+0x27c>)
 8014798:	930b      	str	r3, [sp, #44]	; 0x2c
 801479a:	4b66      	ldr	r3, [pc, #408]	; (8014934 <get_config_payload_string+0x260>)
 801479c:	930a      	str	r3, [sp, #40]	; 0x28
 801479e:	4b6d      	ldr	r3, [pc, #436]	; (8014954 <get_config_payload_string+0x280>)
 80147a0:	9309      	str	r3, [sp, #36]	; 0x24
 80147a2:	4b6d      	ldr	r3, [pc, #436]	; (8014958 <get_config_payload_string+0x284>)
 80147a4:	9308      	str	r3, [sp, #32]
 80147a6:	4b6d      	ldr	r3, [pc, #436]	; (801495c <get_config_payload_string+0x288>)
 80147a8:	9307      	str	r3, [sp, #28]
 80147aa:	4b62      	ldr	r3, [pc, #392]	; (8014934 <get_config_payload_string+0x260>)
 80147ac:	9306      	str	r3, [sp, #24]
 80147ae:	4b69      	ldr	r3, [pc, #420]	; (8014954 <get_config_payload_string+0x280>)
 80147b0:	9305      	str	r3, [sp, #20]
 80147b2:	4b6b      	ldr	r3, [pc, #428]	; (8014960 <get_config_payload_string+0x28c>)
 80147b4:	9304      	str	r3, [sp, #16]
 80147b6:	4b6b      	ldr	r3, [pc, #428]	; (8014964 <get_config_payload_string+0x290>)
 80147b8:	9303      	str	r3, [sp, #12]
 80147ba:	4b68      	ldr	r3, [pc, #416]	; (801495c <get_config_payload_string+0x288>)
 80147bc:	9302      	str	r3, [sp, #8]
 80147be:	4b6a      	ldr	r3, [pc, #424]	; (8014968 <get_config_payload_string+0x294>)
 80147c0:	9301      	str	r3, [sp, #4]
 80147c2:	4b5c      	ldr	r3, [pc, #368]	; (8014934 <get_config_payload_string+0x260>)
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	4b63      	ldr	r3, [pc, #396]	; (8014954 <get_config_payload_string+0x280>)
 80147c8:	4a64      	ldr	r2, [pc, #400]	; (801495c <get_config_payload_string+0x288>)
 80147ca:	4968      	ldr	r1, [pc, #416]	; (801496c <get_config_payload_string+0x298>)
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f018 ff5d 	bl	802d68c <siprintf>
 80147d2:	4603      	mov	r3, r0
 80147d4:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80147d6:	e113      	b.n	8014a00 <get_config_payload_string+0x32c>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 80147d8:	4b55      	ldr	r3, [pc, #340]	; (8014930 <get_config_payload_string+0x25c>)
 80147da:	9310      	str	r3, [sp, #64]	; 0x40
 80147dc:	4b58      	ldr	r3, [pc, #352]	; (8014940 <get_config_payload_string+0x26c>)
 80147de:	930f      	str	r3, [sp, #60]	; 0x3c
 80147e0:	4b58      	ldr	r3, [pc, #352]	; (8014944 <get_config_payload_string+0x270>)
 80147e2:	930e      	str	r3, [sp, #56]	; 0x38
 80147e4:	4b58      	ldr	r3, [pc, #352]	; (8014948 <get_config_payload_string+0x274>)
 80147e6:	930d      	str	r3, [sp, #52]	; 0x34
 80147e8:	4b58      	ldr	r3, [pc, #352]	; (801494c <get_config_payload_string+0x278>)
 80147ea:	930c      	str	r3, [sp, #48]	; 0x30
 80147ec:	4b58      	ldr	r3, [pc, #352]	; (8014950 <get_config_payload_string+0x27c>)
 80147ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80147f0:	4b50      	ldr	r3, [pc, #320]	; (8014934 <get_config_payload_string+0x260>)
 80147f2:	930a      	str	r3, [sp, #40]	; 0x28
 80147f4:	4b57      	ldr	r3, [pc, #348]	; (8014954 <get_config_payload_string+0x280>)
 80147f6:	9309      	str	r3, [sp, #36]	; 0x24
 80147f8:	4b5d      	ldr	r3, [pc, #372]	; (8014970 <get_config_payload_string+0x29c>)
 80147fa:	9308      	str	r3, [sp, #32]
 80147fc:	4b5d      	ldr	r3, [pc, #372]	; (8014974 <get_config_payload_string+0x2a0>)
 80147fe:	9307      	str	r3, [sp, #28]
 8014800:	4b4c      	ldr	r3, [pc, #304]	; (8014934 <get_config_payload_string+0x260>)
 8014802:	9306      	str	r3, [sp, #24]
 8014804:	4b53      	ldr	r3, [pc, #332]	; (8014954 <get_config_payload_string+0x280>)
 8014806:	9305      	str	r3, [sp, #20]
 8014808:	4b5b      	ldr	r3, [pc, #364]	; (8014978 <get_config_payload_string+0x2a4>)
 801480a:	9304      	str	r3, [sp, #16]
 801480c:	4b5b      	ldr	r3, [pc, #364]	; (801497c <get_config_payload_string+0x2a8>)
 801480e:	9303      	str	r3, [sp, #12]
 8014810:	4b58      	ldr	r3, [pc, #352]	; (8014974 <get_config_payload_string+0x2a0>)
 8014812:	9302      	str	r3, [sp, #8]
 8014814:	4b54      	ldr	r3, [pc, #336]	; (8014968 <get_config_payload_string+0x294>)
 8014816:	9301      	str	r3, [sp, #4]
 8014818:	4b46      	ldr	r3, [pc, #280]	; (8014934 <get_config_payload_string+0x260>)
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	4b4d      	ldr	r3, [pc, #308]	; (8014954 <get_config_payload_string+0x280>)
 801481e:	4a55      	ldr	r2, [pc, #340]	; (8014974 <get_config_payload_string+0x2a0>)
 8014820:	4952      	ldr	r1, [pc, #328]	; (801496c <get_config_payload_string+0x298>)
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f018 ff32 	bl	802d68c <siprintf>
 8014828:	4603      	mov	r3, r0
 801482a:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801482c:	e0e8      	b.n	8014a00 <get_config_payload_string+0x32c>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 801482e:	4b40      	ldr	r3, [pc, #256]	; (8014930 <get_config_payload_string+0x25c>)
 8014830:	9310      	str	r3, [sp, #64]	; 0x40
 8014832:	4b43      	ldr	r3, [pc, #268]	; (8014940 <get_config_payload_string+0x26c>)
 8014834:	930f      	str	r3, [sp, #60]	; 0x3c
 8014836:	4b43      	ldr	r3, [pc, #268]	; (8014944 <get_config_payload_string+0x270>)
 8014838:	930e      	str	r3, [sp, #56]	; 0x38
 801483a:	4b43      	ldr	r3, [pc, #268]	; (8014948 <get_config_payload_string+0x274>)
 801483c:	930d      	str	r3, [sp, #52]	; 0x34
 801483e:	4b43      	ldr	r3, [pc, #268]	; (801494c <get_config_payload_string+0x278>)
 8014840:	930c      	str	r3, [sp, #48]	; 0x30
 8014842:	4b43      	ldr	r3, [pc, #268]	; (8014950 <get_config_payload_string+0x27c>)
 8014844:	930b      	str	r3, [sp, #44]	; 0x2c
 8014846:	4b3b      	ldr	r3, [pc, #236]	; (8014934 <get_config_payload_string+0x260>)
 8014848:	930a      	str	r3, [sp, #40]	; 0x28
 801484a:	4b42      	ldr	r3, [pc, #264]	; (8014954 <get_config_payload_string+0x280>)
 801484c:	9309      	str	r3, [sp, #36]	; 0x24
 801484e:	4b4c      	ldr	r3, [pc, #304]	; (8014980 <get_config_payload_string+0x2ac>)
 8014850:	9308      	str	r3, [sp, #32]
 8014852:	4b4c      	ldr	r3, [pc, #304]	; (8014984 <get_config_payload_string+0x2b0>)
 8014854:	9307      	str	r3, [sp, #28]
 8014856:	4b37      	ldr	r3, [pc, #220]	; (8014934 <get_config_payload_string+0x260>)
 8014858:	9306      	str	r3, [sp, #24]
 801485a:	4b3e      	ldr	r3, [pc, #248]	; (8014954 <get_config_payload_string+0x280>)
 801485c:	9305      	str	r3, [sp, #20]
 801485e:	4b4a      	ldr	r3, [pc, #296]	; (8014988 <get_config_payload_string+0x2b4>)
 8014860:	9304      	str	r3, [sp, #16]
 8014862:	4b46      	ldr	r3, [pc, #280]	; (801497c <get_config_payload_string+0x2a8>)
 8014864:	9303      	str	r3, [sp, #12]
 8014866:	4b47      	ldr	r3, [pc, #284]	; (8014984 <get_config_payload_string+0x2b0>)
 8014868:	9302      	str	r3, [sp, #8]
 801486a:	4b3f      	ldr	r3, [pc, #252]	; (8014968 <get_config_payload_string+0x294>)
 801486c:	9301      	str	r3, [sp, #4]
 801486e:	4b31      	ldr	r3, [pc, #196]	; (8014934 <get_config_payload_string+0x260>)
 8014870:	9300      	str	r3, [sp, #0]
 8014872:	4b38      	ldr	r3, [pc, #224]	; (8014954 <get_config_payload_string+0x280>)
 8014874:	4a43      	ldr	r2, [pc, #268]	; (8014984 <get_config_payload_string+0x2b0>)
 8014876:	493d      	ldr	r1, [pc, #244]	; (801496c <get_config_payload_string+0x298>)
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f018 ff07 	bl	802d68c <siprintf>
 801487e:	4603      	mov	r3, r0
 8014880:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014882:	e0bd      	b.n	8014a00 <get_config_payload_string+0x32c>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014884:	4b2a      	ldr	r3, [pc, #168]	; (8014930 <get_config_payload_string+0x25c>)
 8014886:	9310      	str	r3, [sp, #64]	; 0x40
 8014888:	4b2d      	ldr	r3, [pc, #180]	; (8014940 <get_config_payload_string+0x26c>)
 801488a:	930f      	str	r3, [sp, #60]	; 0x3c
 801488c:	4b2d      	ldr	r3, [pc, #180]	; (8014944 <get_config_payload_string+0x270>)
 801488e:	930e      	str	r3, [sp, #56]	; 0x38
 8014890:	4b2d      	ldr	r3, [pc, #180]	; (8014948 <get_config_payload_string+0x274>)
 8014892:	930d      	str	r3, [sp, #52]	; 0x34
 8014894:	4b2d      	ldr	r3, [pc, #180]	; (801494c <get_config_payload_string+0x278>)
 8014896:	930c      	str	r3, [sp, #48]	; 0x30
 8014898:	4b2d      	ldr	r3, [pc, #180]	; (8014950 <get_config_payload_string+0x27c>)
 801489a:	930b      	str	r3, [sp, #44]	; 0x2c
 801489c:	4b25      	ldr	r3, [pc, #148]	; (8014934 <get_config_payload_string+0x260>)
 801489e:	930a      	str	r3, [sp, #40]	; 0x28
 80148a0:	4b2c      	ldr	r3, [pc, #176]	; (8014954 <get_config_payload_string+0x280>)
 80148a2:	9309      	str	r3, [sp, #36]	; 0x24
 80148a4:	4b39      	ldr	r3, [pc, #228]	; (801498c <get_config_payload_string+0x2b8>)
 80148a6:	9308      	str	r3, [sp, #32]
 80148a8:	4b39      	ldr	r3, [pc, #228]	; (8014990 <get_config_payload_string+0x2bc>)
 80148aa:	9307      	str	r3, [sp, #28]
 80148ac:	4b21      	ldr	r3, [pc, #132]	; (8014934 <get_config_payload_string+0x260>)
 80148ae:	9306      	str	r3, [sp, #24]
 80148b0:	4b28      	ldr	r3, [pc, #160]	; (8014954 <get_config_payload_string+0x280>)
 80148b2:	9305      	str	r3, [sp, #20]
 80148b4:	4b37      	ldr	r3, [pc, #220]	; (8014994 <get_config_payload_string+0x2c0>)
 80148b6:	9304      	str	r3, [sp, #16]
 80148b8:	4b30      	ldr	r3, [pc, #192]	; (801497c <get_config_payload_string+0x2a8>)
 80148ba:	9303      	str	r3, [sp, #12]
 80148bc:	4b34      	ldr	r3, [pc, #208]	; (8014990 <get_config_payload_string+0x2bc>)
 80148be:	9302      	str	r3, [sp, #8]
 80148c0:	4b29      	ldr	r3, [pc, #164]	; (8014968 <get_config_payload_string+0x294>)
 80148c2:	9301      	str	r3, [sp, #4]
 80148c4:	4b1b      	ldr	r3, [pc, #108]	; (8014934 <get_config_payload_string+0x260>)
 80148c6:	9300      	str	r3, [sp, #0]
 80148c8:	4b22      	ldr	r3, [pc, #136]	; (8014954 <get_config_payload_string+0x280>)
 80148ca:	4a31      	ldr	r2, [pc, #196]	; (8014990 <get_config_payload_string+0x2bc>)
 80148cc:	4927      	ldr	r1, [pc, #156]	; (801496c <get_config_payload_string+0x298>)
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f018 fedc 	bl	802d68c <siprintf>
 80148d4:	4603      	mov	r3, r0
 80148d6:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80148d8:	e092      	b.n	8014a00 <get_config_payload_string+0x32c>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80148da:	4b15      	ldr	r3, [pc, #84]	; (8014930 <get_config_payload_string+0x25c>)
 80148dc:	9310      	str	r3, [sp, #64]	; 0x40
 80148de:	4b18      	ldr	r3, [pc, #96]	; (8014940 <get_config_payload_string+0x26c>)
 80148e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80148e2:	4b18      	ldr	r3, [pc, #96]	; (8014944 <get_config_payload_string+0x270>)
 80148e4:	930e      	str	r3, [sp, #56]	; 0x38
 80148e6:	4b18      	ldr	r3, [pc, #96]	; (8014948 <get_config_payload_string+0x274>)
 80148e8:	930d      	str	r3, [sp, #52]	; 0x34
 80148ea:	4b18      	ldr	r3, [pc, #96]	; (801494c <get_config_payload_string+0x278>)
 80148ec:	930c      	str	r3, [sp, #48]	; 0x30
 80148ee:	4b18      	ldr	r3, [pc, #96]	; (8014950 <get_config_payload_string+0x27c>)
 80148f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80148f2:	4b10      	ldr	r3, [pc, #64]	; (8014934 <get_config_payload_string+0x260>)
 80148f4:	930a      	str	r3, [sp, #40]	; 0x28
 80148f6:	4b17      	ldr	r3, [pc, #92]	; (8014954 <get_config_payload_string+0x280>)
 80148f8:	9309      	str	r3, [sp, #36]	; 0x24
 80148fa:	4b27      	ldr	r3, [pc, #156]	; (8014998 <get_config_payload_string+0x2c4>)
 80148fc:	9308      	str	r3, [sp, #32]
 80148fe:	4b27      	ldr	r3, [pc, #156]	; (801499c <get_config_payload_string+0x2c8>)
 8014900:	9307      	str	r3, [sp, #28]
 8014902:	4b0c      	ldr	r3, [pc, #48]	; (8014934 <get_config_payload_string+0x260>)
 8014904:	9306      	str	r3, [sp, #24]
 8014906:	4b13      	ldr	r3, [pc, #76]	; (8014954 <get_config_payload_string+0x280>)
 8014908:	9305      	str	r3, [sp, #20]
 801490a:	4b25      	ldr	r3, [pc, #148]	; (80149a0 <get_config_payload_string+0x2cc>)
 801490c:	9304      	str	r3, [sp, #16]
 801490e:	4b1b      	ldr	r3, [pc, #108]	; (801497c <get_config_payload_string+0x2a8>)
 8014910:	9303      	str	r3, [sp, #12]
 8014912:	4b22      	ldr	r3, [pc, #136]	; (801499c <get_config_payload_string+0x2c8>)
 8014914:	9302      	str	r3, [sp, #8]
 8014916:	4b14      	ldr	r3, [pc, #80]	; (8014968 <get_config_payload_string+0x294>)
 8014918:	9301      	str	r3, [sp, #4]
 801491a:	4b06      	ldr	r3, [pc, #24]	; (8014934 <get_config_payload_string+0x260>)
 801491c:	9300      	str	r3, [sp, #0]
 801491e:	4b0d      	ldr	r3, [pc, #52]	; (8014954 <get_config_payload_string+0x280>)
 8014920:	4a1e      	ldr	r2, [pc, #120]	; (801499c <get_config_payload_string+0x2c8>)
 8014922:	4912      	ldr	r1, [pc, #72]	; (801496c <get_config_payload_string+0x298>)
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f018 feb1 	bl	802d68c <siprintf>
 801492a:	4603      	mov	r3, r0
 801492c:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801492e:	e067      	b.n	8014a00 <get_config_payload_string+0x32c>
 8014930:	200008cc 	.word	0x200008cc
 8014934:	200008bc 	.word	0x200008bc
 8014938:	080342a0 	.word	0x080342a0
 801493c:	08034460 	.word	0x08034460
 8014940:	08032ca8 	.word	0x08032ca8
 8014944:	08032cb0 	.word	0x08032cb0
 8014948:	08032cb4 	.word	0x08032cb4
 801494c:	08032cc4 	.word	0x08032cc4
 8014950:	08032cd4 	.word	0x08032cd4
 8014954:	08032c68 	.word	0x08032c68
 8014958:	08032ce4 	.word	0x08032ce4
 801495c:	08032c60 	.word	0x08032c60
 8014960:	08032ce8 	.word	0x08032ce8
 8014964:	08032cf8 	.word	0x08032cf8
 8014968:	08032d1c 	.word	0x08032d1c
 801496c:	080345f8 	.word	0x080345f8
 8014970:	08032d24 	.word	0x08032d24
 8014974:	08032c70 	.word	0x08032c70
 8014978:	08032d28 	.word	0x08032d28
 801497c:	08032d38 	.word	0x08032d38
 8014980:	08032d3c 	.word	0x08032d3c
 8014984:	08032c78 	.word	0x08032c78
 8014988:	08032d40 	.word	0x08032d40
 801498c:	08032d64 	.word	0x08032d64
 8014990:	08032c80 	.word	0x08032c80
 8014994:	08032d68 	.word	0x08032d68
 8014998:	08032d88 	.word	0x08032d88
 801499c:	08032c90 	.word	0x08032c90
 80149a0:	08032d8c 	.word	0x08032d8c
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 80149a4:	4b18      	ldr	r3, [pc, #96]	; (8014a08 <get_config_payload_string+0x334>)
 80149a6:	9310      	str	r3, [sp, #64]	; 0x40
 80149a8:	4b18      	ldr	r3, [pc, #96]	; (8014a0c <get_config_payload_string+0x338>)
 80149aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80149ac:	4b18      	ldr	r3, [pc, #96]	; (8014a10 <get_config_payload_string+0x33c>)
 80149ae:	930e      	str	r3, [sp, #56]	; 0x38
 80149b0:	4b18      	ldr	r3, [pc, #96]	; (8014a14 <get_config_payload_string+0x340>)
 80149b2:	930d      	str	r3, [sp, #52]	; 0x34
 80149b4:	4b18      	ldr	r3, [pc, #96]	; (8014a18 <get_config_payload_string+0x344>)
 80149b6:	930c      	str	r3, [sp, #48]	; 0x30
 80149b8:	4b18      	ldr	r3, [pc, #96]	; (8014a1c <get_config_payload_string+0x348>)
 80149ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80149bc:	4b18      	ldr	r3, [pc, #96]	; (8014a20 <get_config_payload_string+0x34c>)
 80149be:	930a      	str	r3, [sp, #40]	; 0x28
 80149c0:	4b18      	ldr	r3, [pc, #96]	; (8014a24 <get_config_payload_string+0x350>)
 80149c2:	9309      	str	r3, [sp, #36]	; 0x24
 80149c4:	4b18      	ldr	r3, [pc, #96]	; (8014a28 <get_config_payload_string+0x354>)
 80149c6:	9308      	str	r3, [sp, #32]
 80149c8:	4b18      	ldr	r3, [pc, #96]	; (8014a2c <get_config_payload_string+0x358>)
 80149ca:	9307      	str	r3, [sp, #28]
 80149cc:	4b14      	ldr	r3, [pc, #80]	; (8014a20 <get_config_payload_string+0x34c>)
 80149ce:	9306      	str	r3, [sp, #24]
 80149d0:	4b14      	ldr	r3, [pc, #80]	; (8014a24 <get_config_payload_string+0x350>)
 80149d2:	9305      	str	r3, [sp, #20]
 80149d4:	4b16      	ldr	r3, [pc, #88]	; (8014a30 <get_config_payload_string+0x35c>)
 80149d6:	9304      	str	r3, [sp, #16]
 80149d8:	4b16      	ldr	r3, [pc, #88]	; (8014a34 <get_config_payload_string+0x360>)
 80149da:	9303      	str	r3, [sp, #12]
 80149dc:	4b13      	ldr	r3, [pc, #76]	; (8014a2c <get_config_payload_string+0x358>)
 80149de:	9302      	str	r3, [sp, #8]
 80149e0:	4b15      	ldr	r3, [pc, #84]	; (8014a38 <get_config_payload_string+0x364>)
 80149e2:	9301      	str	r3, [sp, #4]
 80149e4:	4b0e      	ldr	r3, [pc, #56]	; (8014a20 <get_config_payload_string+0x34c>)
 80149e6:	9300      	str	r3, [sp, #0]
 80149e8:	4b0e      	ldr	r3, [pc, #56]	; (8014a24 <get_config_payload_string+0x350>)
 80149ea:	4a10      	ldr	r2, [pc, #64]	; (8014a2c <get_config_payload_string+0x358>)
 80149ec:	4913      	ldr	r1, [pc, #76]	; (8014a3c <get_config_payload_string+0x368>)
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f018 fe4c 	bl	802d68c <siprintf>
 80149f4:	4603      	mov	r3, r0
 80149f6:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80149f8:	e002      	b.n	8014a00 <get_config_payload_string+0x32c>

		default:
			return -1;
 80149fa:	f04f 33ff 	mov.w	r3, #4294967295
 80149fe:	e7ff      	b.n	8014a00 <get_config_payload_string+0x32c>
			break;
	}
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3714      	adds	r7, #20
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd90      	pop	{r4, r7, pc}
 8014a08:	200008cc 	.word	0x200008cc
 8014a0c:	08032ca8 	.word	0x08032ca8
 8014a10:	08032cb0 	.word	0x08032cb0
 8014a14:	08032cb4 	.word	0x08032cb4
 8014a18:	08032cc4 	.word	0x08032cc4
 8014a1c:	08032cd4 	.word	0x08032cd4
 8014a20:	200008bc 	.word	0x200008bc
 8014a24:	08032c68 	.word	0x08032c68
 8014a28:	08032db8 	.word	0x08032db8
 8014a2c:	08032ca0 	.word	0x08032ca0
 8014a30:	08032dbc 	.word	0x08032dbc
 8014a34:	08032d38 	.word	0x08032d38
 8014a38:	08032d1c 	.word	0x08032d1c
 8014a3c:	080345f8 	.word	0x080345f8

08014a40 <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af02      	add	r7, sp, #8
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	460b      	mov	r3, r1
 8014a4a:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 8014a52:	4b11      	ldr	r3, [pc, #68]	; (8014a98 <generate_status_topik+0x58>)
 8014a54:	9300      	str	r3, [sp, #0]
 8014a56:	4b11      	ldr	r3, [pc, #68]	; (8014a9c <generate_status_topik+0x5c>)
 8014a58:	4a11      	ldr	r2, [pc, #68]	; (8014aa0 <generate_status_topik+0x60>)
 8014a5a:	4912      	ldr	r1, [pc, #72]	; (8014aa4 <generate_status_topik+0x64>)
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f018 fe15 	bl	802d68c <siprintf>

	switch (topik_type) {
 8014a62:	78fb      	ldrb	r3, [r7, #3]
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d002      	beq.n	8014a6e <generate_status_topik+0x2e>
 8014a68:	2b02      	cmp	r3, #2
 8014a6a:	d006      	beq.n	8014a7a <generate_status_topik+0x3a>
 8014a6c:	e00b      	b.n	8014a86 <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 8014a6e:	4a0b      	ldr	r2, [pc, #44]	; (8014a9c <generate_status_topik+0x5c>)
 8014a70:	490d      	ldr	r1, [pc, #52]	; (8014aa8 <generate_status_topik+0x68>)
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f018 fe0a 	bl	802d68c <siprintf>
			break;
 8014a78:	e008      	b.n	8014a8c <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 8014a7a:	4a08      	ldr	r2, [pc, #32]	; (8014a9c <generate_status_topik+0x5c>)
 8014a7c:	490b      	ldr	r1, [pc, #44]	; (8014aac <generate_status_topik+0x6c>)
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f018 fe04 	bl	802d68c <siprintf>
			break;
 8014a84:	e002      	b.n	8014a8c <generate_status_topik+0x4c>

		default:
			return -1;
 8014a86:	f04f 33ff 	mov.w	r3, #4294967295
 8014a8a:	e000      	b.n	8014a8e <generate_status_topik+0x4e>
			break;
	}

	return 0;
 8014a8c:	2300      	movs	r3, #0
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3708      	adds	r7, #8
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	08032d1c 	.word	0x08032d1c
 8014a9c:	200008bc 	.word	0x200008bc
 8014aa0:	08032c68 	.word	0x08032c68
 8014aa4:	08032de4 	.word	0x08032de4
 8014aa8:	20000094 	.word	0x20000094
 8014aac:	200000a4 	.word	0x200000a4

08014ab0 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b086      	sub	sp, #24
 8014ab4:	af02      	add	r7, sp, #8
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f7fb fd5a 	bl	8010578 <__aeabi_f2d>
 8014ac4:	4602      	mov	r2, r0
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	e9cd 2300 	strd	r2, r3, [sp]
 8014acc:	68ba      	ldr	r2, [r7, #8]
 8014ace:	4904      	ldr	r1, [pc, #16]	; (8014ae0 <generate_key_value_JSON+0x30>)
 8014ad0:	68f8      	ldr	r0, [r7, #12]
 8014ad2:	f018 fddb 	bl	802d68c <siprintf>
}
 8014ad6:	bf00      	nop
 8014ad8:	3710      	adds	r7, #16
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	08032df0 	.word	0x08032df0

08014ae4 <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 8014ae4:	b5b0      	push	{r4, r5, r7, lr}
 8014ae6:	b084      	sub	sp, #16
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 8014af2:	68f8      	ldr	r0, [r7, #12]
 8014af4:	f7fb fd1e 	bl	8010534 <__aeabi_ui2d>
 8014af8:	4604      	mov	r4, r0
 8014afa:	460d      	mov	r5, r1
 8014afc:	68b8      	ldr	r0, [r7, #8]
 8014afe:	f7fb fd19 	bl	8010534 <__aeabi_ui2d>
 8014b02:	f04f 0200 	mov.w	r2, #0
 8014b06:	4b17      	ldr	r3, [pc, #92]	; (8014b64 <InitHLW8032+0x80>)
 8014b08:	f7fb fd8e 	bl	8010628 <__aeabi_dmul>
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	460b      	mov	r3, r1
 8014b10:	4620      	mov	r0, r4
 8014b12:	4629      	mov	r1, r5
 8014b14:	f7fb feb2 	bl	801087c <__aeabi_ddiv>
 8014b18:	4602      	mov	r2, r0
 8014b1a:	460b      	mov	r3, r1
 8014b1c:	4610      	mov	r0, r2
 8014b1e:	4619      	mov	r1, r3
 8014b20:	f7fc f87a 	bl	8010c18 <__aeabi_d2f>
 8014b24:	4603      	mov	r3, r0
 8014b26:	4a10      	ldr	r2, [pc, #64]	; (8014b68 <InitHLW8032+0x84>)
 8014b28:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f7fb fd24 	bl	8010578 <__aeabi_f2d>
 8014b30:	f04f 0200 	mov.w	r2, #0
 8014b34:	4b0b      	ldr	r3, [pc, #44]	; (8014b64 <InitHLW8032+0x80>)
 8014b36:	f7fb fd77 	bl	8010628 <__aeabi_dmul>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	f04f 0000 	mov.w	r0, #0
 8014b42:	490a      	ldr	r1, [pc, #40]	; (8014b6c <InitHLW8032+0x88>)
 8014b44:	f7fb fe9a 	bl	801087c <__aeabi_ddiv>
 8014b48:	4602      	mov	r2, r0
 8014b4a:	460b      	mov	r3, r1
 8014b4c:	4610      	mov	r0, r2
 8014b4e:	4619      	mov	r1, r3
 8014b50:	f7fc f862 	bl	8010c18 <__aeabi_d2f>
 8014b54:	4603      	mov	r3, r0
 8014b56:	4a06      	ldr	r2, [pc, #24]	; (8014b70 <InitHLW8032+0x8c>)
 8014b58:	6013      	str	r3, [r2, #0]
}
 8014b5a:	bf00      	nop
 8014b5c:	3710      	adds	r7, #16
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bdb0      	pop	{r4, r5, r7, pc}
 8014b62:	bf00      	nop
 8014b64:	408f4000 	.word	0x408f4000
 8014b68:	200000b4 	.word	0x200000b4
 8014b6c:	3ff00000 	.word	0x3ff00000
 8014b70:	200000b8 	.word	0x200000b8

08014b74 <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 8014b74:	b480      	push	{r7}
 8014b76:	b085      	sub	sp, #20
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014b80:	2302      	movs	r3, #2
 8014b82:	73fb      	strb	r3, [r7, #15]
 8014b84:	e00e      	b.n	8014ba4 <Checksum+0x30>
		tmp = string[i];
 8014b86:	7bfb      	ldrb	r3, [r7, #15]
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	4413      	add	r3, r2
 8014b8c:	781b      	ldrb	r3, [r3, #0]
 8014b8e:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8014b90:	7bfb      	ldrb	r3, [r7, #15]
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	4413      	add	r3, r2
 8014b96:	781a      	ldrb	r2, [r3, #0]
 8014b98:	7bbb      	ldrb	r3, [r7, #14]
 8014b9a:	4413      	add	r3, r2
 8014b9c:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014b9e:	7bfb      	ldrb	r3, [r7, #15]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	73fb      	strb	r3, [r7, #15]
 8014ba4:	7bfb      	ldrb	r3, [r7, #15]
 8014ba6:	2b16      	cmp	r3, #22
 8014ba8:	d9ed      	bls.n	8014b86 <Checksum+0x12>
	}
	if (byte == string[23])
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	3317      	adds	r3, #23
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	7bba      	ldrb	r2, [r7, #14]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d101      	bne.n	8014bba <Checksum+0x46>
	{
		return 1;
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	e000      	b.n	8014bbc <Checksum+0x48>
	}
	return 0;
 8014bba:	2300      	movs	r3, #0
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3714      	adds	r7, #20
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr

08014bc8 <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	215a      	movs	r1, #90	; 0x5a
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7fb fb02 	bl	80101e0 <strcmp>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d102      	bne.n	8014be8 <RecvRawString+0x20>
		return -1; //error code
 8014be2:	f04f 33ff 	mov.w	r3, #4294967295
 8014be6:	e0a9      	b.n	8014d3c <RecvRawString+0x174>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f7ff ffc3 	bl	8014b74 <Checksum>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d102      	bne.n	8014bfa <RecvRawString+0x32>
		return -2; //Checksum Error
 8014bf4:	f06f 0301 	mvn.w	r3, #1
 8014bf8:	e0a0      	b.n	8014d3c <RecvRawString+0x174>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	3302      	adds	r3, #2
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	041a      	lsls	r2, r3, #16
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	3303      	adds	r3, #3
 8014c06:	781b      	ldrb	r3, [r3, #0]
 8014c08:	021b      	lsls	r3, r3, #8
 8014c0a:	4413      	add	r3, r2
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	3204      	adds	r2, #4
 8014c10:	7812      	ldrb	r2, [r2, #0]
 8014c12:	4413      	add	r3, r2
 8014c14:	4a4b      	ldr	r2, [pc, #300]	; (8014d44 <RecvRawString+0x17c>)
 8014c16:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	3314      	adds	r3, #20
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	099b      	lsrs	r3, r3, #6
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	f003 0301 	and.w	r3, r3, #1
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d00e      	beq.n	8014c48 <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3305      	adds	r3, #5
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	041a      	lsls	r2, r3, #16
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	3306      	adds	r3, #6
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	021b      	lsls	r3, r3, #8
 8014c3a:	4413      	add	r3, r2
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	3207      	adds	r2, #7
 8014c40:	7812      	ldrb	r2, [r2, #0]
 8014c42:	4413      	add	r3, r2
 8014c44:	4a40      	ldr	r2, [pc, #256]	; (8014d48 <RecvRawString+0x180>)
 8014c46:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	3308      	adds	r3, #8
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	041a      	lsls	r2, r3, #16
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	3309      	adds	r3, #9
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	021b      	lsls	r3, r3, #8
 8014c58:	4413      	add	r3, r2
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	320a      	adds	r2, #10
 8014c5e:	7812      	ldrb	r2, [r2, #0]
 8014c60:	4413      	add	r3, r2
 8014c62:	4a3a      	ldr	r2, [pc, #232]	; (8014d4c <RecvRawString+0x184>)
 8014c64:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	3314      	adds	r3, #20
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	095b      	lsrs	r3, r3, #5
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	f003 0301 	and.w	r3, r3, #1
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00e      	beq.n	8014c96 <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	330b      	adds	r3, #11
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	041a      	lsls	r2, r3, #16
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	330c      	adds	r3, #12
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	021b      	lsls	r3, r3, #8
 8014c88:	4413      	add	r3, r2
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	320d      	adds	r2, #13
 8014c8e:	7812      	ldrb	r2, [r2, #0]
 8014c90:	4413      	add	r3, r2
 8014c92:	4a2f      	ldr	r2, [pc, #188]	; (8014d50 <RecvRawString+0x188>)
 8014c94:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	330e      	adds	r3, #14
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	041a      	lsls	r2, r3, #16
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	330f      	adds	r3, #15
 8014ca2:	781b      	ldrb	r3, [r3, #0]
 8014ca4:	021b      	lsls	r3, r3, #8
 8014ca6:	4413      	add	r3, r2
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	3210      	adds	r2, #16
 8014cac:	7812      	ldrb	r2, [r2, #0]
 8014cae:	4413      	add	r3, r2
 8014cb0:	4a28      	ldr	r2, [pc, #160]	; (8014d54 <RecvRawString+0x18c>)
 8014cb2:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	3314      	adds	r3, #20
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	091b      	lsrs	r3, r3, #4
 8014cbc:	b2db      	uxtb	r3, r3
 8014cbe:	f003 0301 	and.w	r3, r3, #1
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d00e      	beq.n	8014ce4 <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	3311      	adds	r3, #17
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	041a      	lsls	r2, r3, #16
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	3312      	adds	r3, #18
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	021b      	lsls	r3, r3, #8
 8014cd6:	4413      	add	r3, r2
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	3213      	adds	r2, #19
 8014cdc:	7812      	ldrb	r2, [r2, #0]
 8014cde:	4413      	add	r3, r2
 8014ce0:	4a1d      	ldr	r2, [pc, #116]	; (8014d58 <RecvRawString+0x190>)
 8014ce2:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	3315      	adds	r3, #21
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	021b      	lsls	r3, r3, #8
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	3316      	adds	r3, #22
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	4413      	add	r3, r2
 8014cfa:	b29a      	uxth	r2, r3
 8014cfc:	4b17      	ldr	r3, [pc, #92]	; (8014d5c <RecvRawString+0x194>)
 8014cfe:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	3314      	adds	r3, #20
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	09db      	lsrs	r3, r3, #7
 8014d08:	b2db      	uxtb	r3, r3
 8014d0a:	f003 0301 	and.w	r3, r3, #1
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d004      	beq.n	8014d1c <RecvRawString+0x154>
	{
		PFData++;
 8014d12:	4b13      	ldr	r3, [pc, #76]	; (8014d60 <RecvRawString+0x198>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	3301      	adds	r3, #1
 8014d18:	4a11      	ldr	r2, [pc, #68]	; (8014d60 <RecvRawString+0x198>)
 8014d1a:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014d1c:	4b11      	ldr	r3, [pc, #68]	; (8014d64 <RecvRawString+0x19c>)
 8014d1e:	881a      	ldrh	r2, [r3, #0]
 8014d20:	4b0e      	ldr	r3, [pc, #56]	; (8014d5c <RecvRawString+0x194>)
 8014d22:	881b      	ldrh	r3, [r3, #0]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d904      	bls.n	8014d32 <RecvRawString+0x16a>
		test_flag++;
 8014d28:	4b0f      	ldr	r3, [pc, #60]	; (8014d68 <RecvRawString+0x1a0>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	4a0e      	ldr	r2, [pc, #56]	; (8014d68 <RecvRawString+0x1a0>)
 8014d30:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8014d32:	4b0a      	ldr	r3, [pc, #40]	; (8014d5c <RecvRawString+0x194>)
 8014d34:	881a      	ldrh	r2, [r3, #0]
 8014d36:	4b0b      	ldr	r3, [pc, #44]	; (8014d64 <RecvRawString+0x19c>)
 8014d38:	801a      	strh	r2, [r3, #0]

	return 0;
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3708      	adds	r7, #8
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}
 8014d44:	200008e0 	.word	0x200008e0
 8014d48:	200008e4 	.word	0x200008e4
 8014d4c:	200008f0 	.word	0x200008f0
 8014d50:	200008f4 	.word	0x200008f4
 8014d54:	200008e8 	.word	0x200008e8
 8014d58:	200008ec 	.word	0x200008ec
 8014d5c:	200008fc 	.word	0x200008fc
 8014d60:	200008f8 	.word	0x200008f8
 8014d64:	200008fe 	.word	0x200008fe
 8014d68:	20000900 	.word	0x20000900

08014d6c <GetVolRaw>:

float GetVolRaw(void){
 8014d6c:	b480      	push	{r7}
 8014d6e:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014d70:	4b0e      	ldr	r3, [pc, #56]	; (8014dac <GetVolRaw+0x40>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d102      	bne.n	8014d7e <GetVolRaw+0x12>
		return 0;
 8014d78:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014db0 <GetVolRaw+0x44>
 8014d7c:	e00d      	b.n	8014d9a <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014d7e:	4b0d      	ldr	r3, [pc, #52]	; (8014db4 <GetVolRaw+0x48>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	ee07 3a90 	vmov	s15, r3
 8014d86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014d8a:	4b08      	ldr	r3, [pc, #32]	; (8014dac <GetVolRaw+0x40>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	ee07 3a90 	vmov	s15, r3
 8014d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d96:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014d9a:	eef0 7a66 	vmov.f32	s15, s13
 8014d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	200008e4 	.word	0x200008e4
 8014db0:	00000000 	.word	0x00000000
 8014db4:	200008e0 	.word	0x200008e0

08014db8 <GetVoltage>:

float GetVoltage(void){
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8014dbe:	f7ff ffd5 	bl	8014d6c <GetVolRaw>
 8014dc2:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 8014dc6:	4b0d      	ldr	r3, [pc, #52]	; (8014dfc <GetVoltage+0x44>)
 8014dc8:	edd3 7a00 	vldr	s15, [r3]
 8014dcc:	ed97 7a00 	vldr	s14, [r7]
 8014dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014dd4:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 8014dd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8014ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de4:	d501      	bpl.n	8014dea <GetVoltage+0x32>
 8014de6:	4b06      	ldr	r3, [pc, #24]	; (8014e00 <GetVoltage+0x48>)
 8014de8:	607b      	str	r3, [r7, #4]
	return RealVolt;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	ee07 3a90 	vmov	s15, r3
}
 8014df0:	eeb0 0a67 	vmov.f32	s0, s15
 8014df4:	3708      	adds	r7, #8
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	200000b4 	.word	0x200000b4
 8014e00:	3089705f 	.word	0x3089705f

08014e04 <GetCurrentRaw>:

float GetCurrentRaw(void){
 8014e04:	b480      	push	{r7}
 8014e06:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8014e08:	4b0e      	ldr	r3, [pc, #56]	; (8014e44 <GetCurrentRaw+0x40>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d102      	bne.n	8014e16 <GetCurrentRaw+0x12>
		return 0;
 8014e10:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014e48 <GetCurrentRaw+0x44>
 8014e14:	e00d      	b.n	8014e32 <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8014e16:	4b0d      	ldr	r3, [pc, #52]	; (8014e4c <GetCurrentRaw+0x48>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	ee07 3a90 	vmov	s15, r3
 8014e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e22:	4b08      	ldr	r3, [pc, #32]	; (8014e44 <GetCurrentRaw+0x40>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	ee07 3a90 	vmov	s15, r3
 8014e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014e32:	eef0 7a66 	vmov.f32	s15, s13
 8014e36:	eeb0 0a67 	vmov.f32	s0, s15
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	200008f4 	.word	0x200008f4
 8014e48:	00000000 	.word	0x00000000
 8014e4c:	200008f0 	.word	0x200008f0

08014e50 <GetCurrent>:

float GetCurrent(void){
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8014e56:	f7ff ffd5 	bl	8014e04 <GetCurrentRaw>
 8014e5a:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014e5e:	4b0d      	ldr	r3, [pc, #52]	; (8014e94 <GetCurrent+0x44>)
 8014e60:	edd3 7a00 	vldr	s15, [r3]
 8014e64:	ed97 7a00 	vldr	s14, [r7]
 8014e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e6c:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8014e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e7c:	d501      	bpl.n	8014e82 <GetCurrent+0x32>
 8014e7e:	4b06      	ldr	r3, [pc, #24]	; (8014e98 <GetCurrent+0x48>)
 8014e80:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	ee07 3a90 	vmov	s15, r3
}
 8014e88:	eeb0 0a67 	vmov.f32	s0, s15
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	200000b8 	.word	0x200000b8
 8014e98:	3089705f 	.word	0x3089705f

08014e9c <GetActivePower>:

float GetActivePower(void){
 8014e9c:	b480      	push	{r7}
 8014e9e:	b083      	sub	sp, #12
 8014ea0:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 8014ea2:	4b18      	ldr	r3, [pc, #96]	; (8014f04 <GetActivePower+0x68>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d102      	bne.n	8014eb0 <GetActivePower+0x14>
		return 0;
 8014eaa:	f04f 0300 	mov.w	r3, #0
 8014eae:	e01f      	b.n	8014ef0 <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014eb0:	4b15      	ldr	r3, [pc, #84]	; (8014f08 <GetActivePower+0x6c>)
 8014eb2:	681a      	ldr	r2, [r3, #0]
 8014eb4:	4b13      	ldr	r3, [pc, #76]	; (8014f04 <GetActivePower+0x68>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ebc:	ee07 3a90 	vmov	s15, r3
 8014ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014ec4:	4b11      	ldr	r3, [pc, #68]	; (8014f0c <GetActivePower+0x70>)
 8014ec6:	edd3 7a00 	vldr	s15, [r3]
 8014eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ece:	4b10      	ldr	r3, [pc, #64]	; (8014f10 <GetActivePower+0x74>)
 8014ed0:	edd3 7a00 	vldr	s15, [r3]
 8014ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ed8:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 8014edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8014ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ee8:	d501      	bpl.n	8014eee <GetActivePower+0x52>
 8014eea:	4b0a      	ldr	r3, [pc, #40]	; (8014f14 <GetActivePower+0x78>)
 8014eec:	607b      	str	r3, [r7, #4]

	return tmp;
 8014eee:	687b      	ldr	r3, [r7, #4]
}
 8014ef0:	ee07 3a90 	vmov	s15, r3
 8014ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8014ef8:	370c      	adds	r7, #12
 8014efa:	46bd      	mov	sp, r7
 8014efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f00:	4770      	bx	lr
 8014f02:	bf00      	nop
 8014f04:	200008ec 	.word	0x200008ec
 8014f08:	200008e8 	.word	0x200008e8
 8014f0c:	200000b4 	.word	0x200000b4
 8014f10:	200000b8 	.word	0x200000b8
 8014f14:	3089705f 	.word	0x3089705f

08014f18 <GetApparentPower>:

float GetApparentPower(void){
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b084      	sub	sp, #16
 8014f1c:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 8014f1e:	f7ff ff4b 	bl	8014db8 <GetVoltage>
 8014f22:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 8014f26:	f7ff ff93 	bl	8014e50 <GetCurrent>
 8014f2a:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 8014f2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8014f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8014f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f3a:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 8014f3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8014f42:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8014f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4e:	d501      	bpl.n	8014f54 <GetApparentPower+0x3c>
 8014f50:	4b04      	ldr	r3, [pc, #16]	; (8014f64 <GetApparentPower+0x4c>)
 8014f52:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	ee07 3a90 	vmov	s15, r3
}
 8014f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8014f5e:	3710      	adds	r7, #16
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	3089705f 	.word	0x3089705f

08014f68 <PowerFactor>:

float PowerFactor(void){
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 8014f6e:	f7ff ff95 	bl	8014e9c <GetActivePower>
 8014f72:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8014f76:	f7ff ffcf 	bl	8014f18 <GetApparentPower>
 8014f7a:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 0;
 8014f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014f82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f8a:	d102      	bne.n	8014f92 <PowerFactor+0x2a>
 8014f8c:	f04f 0300 	mov.w	r3, #0
 8014f90:	e01e      	b.n	8014fd0 <PowerFactor+0x68>
	if (ActivePower 	== 0) return 0;
 8014f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8014f96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f9e:	d102      	bne.n	8014fa6 <PowerFactor+0x3e>
 8014fa0:	f04f 0300 	mov.w	r3, #0
 8014fa4:	e014      	b.n	8014fd0 <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8014fa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8014faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8014fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb6:	dd02      	ble.n	8014fbe <PowerFactor+0x56>
 8014fb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014fbc:	e008      	b.n	8014fd0 <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 8014fbe:	edd7 6a03 	vldr	s13, [r7, #12]
 8014fc2:	ed97 7a02 	vldr	s14, [r7, #8]
 8014fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014fca:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 8014fce:	687b      	ldr	r3, [r7, #4]
}
 8014fd0:	ee07 3a90 	vmov	s15, r3
 8014fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
	...

08014fe0 <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 8014fe0:	b480      	push	{r7}
 8014fe2:	af00      	add	r7, sp, #0
	return test_flag;
 8014fe4:	4b03      	ldr	r3, [pc, #12]	; (8014ff4 <GetTestPulse+0x14>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	46bd      	mov	sp, r7
 8014fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff0:	4770      	bx	lr
 8014ff2:	bf00      	nop
 8014ff4:	20000900 	.word	0x20000900

08014ff8 <GetCountedPulse>:

uint32_t GetCountedPulse(){
 8014ff8:	b480      	push	{r7}
 8014ffa:	af00      	add	r7, sp, #0
	return PFData;
 8014ffc:	4b03      	ldr	r3, [pc, #12]	; (801500c <GetCountedPulse+0x14>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
}
 8015000:	4618      	mov	r0, r3
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	200008f8 	.word	0x200008f8

08015010 <GetPFReg>:

uint32_t GetPFReg(){
 8015010:	b480      	push	{r7}
 8015012:	af00      	add	r7, sp, #0
	return PF_reg;
 8015014:	4b03      	ldr	r3, [pc, #12]	; (8015024 <GetPFReg+0x14>)
 8015016:	881b      	ldrh	r3, [r3, #0]
}
 8015018:	4618      	mov	r0, r3
 801501a:	46bd      	mov	sp, r7
 801501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015020:	4770      	bx	lr
 8015022:	bf00      	nop
 8015024:	200008fc 	.word	0x200008fc

08015028 <GetKWh>:

float GetKWh(void){
 8015028:	b5b0      	push	{r4, r5, r7, lr}
 801502a:	b084      	sub	sp, #16
 801502c:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 801502e:	f7ff ff73 	bl	8014f18 <GetApparentPower>
 8015032:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 8015036:	4b38      	ldr	r3, [pc, #224]	; (8015118 <GetKWh+0xf0>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4618      	mov	r0, r3
 801503c:	f7fb fa7a 	bl	8010534 <__aeabi_ui2d>
 8015040:	4602      	mov	r2, r0
 8015042:	460b      	mov	r3, r1
 8015044:	f04f 0000 	mov.w	r0, #0
 8015048:	4934      	ldr	r1, [pc, #208]	; (801511c <GetKWh+0xf4>)
 801504a:	f7fb fc17 	bl	801087c <__aeabi_ddiv>
 801504e:	4602      	mov	r2, r0
 8015050:	460b      	mov	r3, r1
 8015052:	4614      	mov	r4, r2
 8015054:	461d      	mov	r5, r3
 8015056:	4b32      	ldr	r3, [pc, #200]	; (8015120 <GetKWh+0xf8>)
 8015058:	ed93 7a00 	vldr	s14, [r3]
 801505c:	4b31      	ldr	r3, [pc, #196]	; (8015124 <GetKWh+0xfc>)
 801505e:	edd3 7a00 	vldr	s15, [r3]
 8015062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015066:	ee17 0a90 	vmov	r0, s15
 801506a:	f7fb fa85 	bl	8010578 <__aeabi_f2d>
 801506e:	4602      	mov	r2, r0
 8015070:	460b      	mov	r3, r1
 8015072:	f04f 0000 	mov.w	r0, #0
 8015076:	4929      	ldr	r1, [pc, #164]	; (801511c <GetKWh+0xf4>)
 8015078:	f7fb fc00 	bl	801087c <__aeabi_ddiv>
 801507c:	4602      	mov	r2, r0
 801507e:	460b      	mov	r3, r1
 8015080:	4620      	mov	r0, r4
 8015082:	4629      	mov	r1, r5
 8015084:	f7fb fad0 	bl	8010628 <__aeabi_dmul>
 8015088:	4602      	mov	r2, r0
 801508a:	460b      	mov	r3, r1
 801508c:	4610      	mov	r0, r2
 801508e:	4619      	mov	r1, r3
 8015090:	a31d      	add	r3, pc, #116	; (adr r3, 8015108 <GetKWh+0xe0>)
 8015092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015096:	f7fb fac7 	bl	8010628 <__aeabi_dmul>
 801509a:	4602      	mov	r2, r0
 801509c:	460b      	mov	r3, r1
 801509e:	4610      	mov	r0, r2
 80150a0:	4619      	mov	r1, r3
 80150a2:	a31b      	add	r3, pc, #108	; (adr r3, 8015110 <GetKWh+0xe8>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	f7fb fabe 	bl	8010628 <__aeabi_dmul>
 80150ac:	4602      	mov	r2, r0
 80150ae:	460b      	mov	r3, r1
 80150b0:	4610      	mov	r0, r2
 80150b2:	4619      	mov	r1, r3
 80150b4:	f7fb fdb0 	bl	8010c18 <__aeabi_d2f>
 80150b8:	4603      	mov	r3, r0
 80150ba:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 80150bc:	f7ff ff90 	bl	8014fe0 <GetTestPulse>
 80150c0:	4603      	mov	r3, r0
 80150c2:	041c      	lsls	r4, r3, #16
 80150c4:	f7ff ffa4 	bl	8015010 <GetPFReg>
 80150c8:	4603      	mov	r3, r0
 80150ca:	4423      	add	r3, r4
 80150cc:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	ee07 3a90 	vmov	s15, r3
 80150d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80150d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80150dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80150e0:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 80150e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80150e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f0:	d501      	bpl.n	80150f6 <GetKWh+0xce>
 80150f2:	4b0d      	ldr	r3, [pc, #52]	; (8015128 <GetKWh+0x100>)
 80150f4:	60fb      	str	r3, [r7, #12]

	return kWh;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	ee07 3a90 	vmov	s15, r3
}
 80150fc:	eeb0 0a67 	vmov.f32	s0, s15
 8015100:	3710      	adds	r7, #16
 8015102:	46bd      	mov	sp, r7
 8015104:	bdb0      	pop	{r4, r5, r7, pc}
 8015106:	bf00      	nop
 8015108:	00000000 	.word	0x00000000
 801510c:	41cdcd65 	.word	0x41cdcd65
 8015110:	00000000 	.word	0x00000000
 8015114:	40ac2000 	.word	0x40ac2000
 8015118:	200008e8 	.word	0x200008e8
 801511c:	3ff00000 	.word	0x3ff00000
 8015120:	200000b4 	.word	0x200000b4
 8015124:	200000b8 	.word	0x200000b8
 8015128:	3089705f 	.word	0x3089705f

0801512c <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 801512c:	b480      	push	{r7}
 801512e:	af00      	add	r7, sp, #0
 8015130:	bf00      	nop
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr
	...

0801513c <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 801513c:	b480      	push	{r7}
 801513e:	b085      	sub	sp, #20
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	607a      	str	r2, [r7, #4]
 8015148:	603b      	str	r3, [r7, #0]

	if (chip_select){
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d003      	beq.n	8015158 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8015150:	4a0e      	ldr	r2, [pc, #56]	; (801518c <SPI_flash_reg_cb+0x50>)
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	60d3      	str	r3, [r2, #12]
 8015156:	e002      	b.n	801515e <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8015158:	4b0c      	ldr	r3, [pc, #48]	; (801518c <SPI_flash_reg_cb+0x50>)
 801515a:	4a0d      	ldr	r2, [pc, #52]	; (8015190 <SPI_flash_reg_cb+0x54>)
 801515c:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d003      	beq.n	801516c <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8015164:	4a09      	ldr	r2, [pc, #36]	; (801518c <SPI_flash_reg_cb+0x50>)
 8015166:	68bb      	ldr	r3, [r7, #8]
 8015168:	6113      	str	r3, [r2, #16]
 801516a:	e002      	b.n	8015172 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 801516c:	4b07      	ldr	r3, [pc, #28]	; (801518c <SPI_flash_reg_cb+0x50>)
 801516e:	4a08      	ldr	r2, [pc, #32]	; (8015190 <SPI_flash_reg_cb+0x54>)
 8015170:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8015172:	4a06      	ldr	r2, [pc, #24]	; (801518c <SPI_flash_reg_cb+0x50>)
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8015178:	4a04      	ldr	r2, [pc, #16]	; (801518c <SPI_flash_reg_cb+0x50>)
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	6093      	str	r3, [r2, #8]

}
 801517e:	bf00      	nop
 8015180:	3714      	adds	r7, #20
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr
 801518a:	bf00      	nop
 801518c:	20000904 	.word	0x20000904
 8015190:	0801512d 	.word	0x0801512d

08015194 <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8015194:	b580      	push	{r7, lr}
 8015196:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8015198:	f000 f89c 	bl	80152d4 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 801519c:	2066      	movs	r0, #102	; 0x66
 801519e:	f000 fa1f 	bl	80155e0 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 80151a2:	2099      	movs	r0, #153	; 0x99
 80151a4:	f000 fa1c 	bl	80155e0 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80151a8:	f000 f89e 	bl	80152e8 <sFLASH_CS_HIGH>
}
 80151ac:	bf00      	nop
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 80151b0:	b590      	push	{r4, r7, lr}
 80151b2:	b085      	sub	sp, #20
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 80151b8:	f7ff ffec 	bl	8015194 <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 80151bc:	f000 f9d2 	bl	8015564 <sFLASH_ReadID>
 80151c0:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	4a3e      	ldr	r2, [pc, #248]	; (80152c0 <sFLASH_GetInfo+0x110>)
 80151c6:	4293      	cmp	r3, r2
 80151c8:	d03f      	beq.n	801524a <sFLASH_GetInfo+0x9a>
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	4a3c      	ldr	r2, [pc, #240]	; (80152c0 <sFLASH_GetInfo+0x110>)
 80151ce:	4293      	cmp	r3, r2
 80151d0:	d867      	bhi.n	80152a2 <sFLASH_GetInfo+0xf2>
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	4a3b      	ldr	r2, [pc, #236]	; (80152c4 <sFLASH_GetInfo+0x114>)
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d021      	beq.n	801521e <sFLASH_GetInfo+0x6e>
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	4a39      	ldr	r2, [pc, #228]	; (80152c4 <sFLASH_GetInfo+0x114>)
 80151de:	4293      	cmp	r3, r2
 80151e0:	d85f      	bhi.n	80152a2 <sFLASH_GetInfo+0xf2>
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	4a38      	ldr	r2, [pc, #224]	; (80152c8 <sFLASH_GetInfo+0x118>)
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d045      	beq.n	8015276 <sFLASH_GetInfo+0xc6>
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	4a37      	ldr	r2, [pc, #220]	; (80152cc <sFLASH_GetInfo+0x11c>)
 80151ee:	4293      	cmp	r3, r2
 80151f0:	d157      	bne.n	80152a2 <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 80151f2:	4b37      	ldr	r3, [pc, #220]	; (80152d0 <sFLASH_GetInfo+0x120>)
 80151f4:	4a35      	ldr	r2, [pc, #212]	; (80152cc <sFLASH_GetInfo+0x11c>)
 80151f6:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80151f8:	4b35      	ldr	r3, [pc, #212]	; (80152d0 <sFLASH_GetInfo+0x120>)
 80151fa:	2201      	movs	r2, #1
 80151fc:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80151fe:	4b34      	ldr	r3, [pc, #208]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015200:	2201      	movs	r2, #1
 8015202:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015204:	4b32      	ldr	r3, [pc, #200]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801520a:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 801520c:	4b30      	ldr	r3, [pc, #192]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801520e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015212:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8015214:	4b2e      	ldr	r3, [pc, #184]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015216:	f44f 7200 	mov.w	r2, #512	; 0x200
 801521a:	819a      	strh	r2, [r3, #12]
			break;
 801521c:	e045      	b.n	80152aa <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 801521e:	4b2c      	ldr	r3, [pc, #176]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015220:	4a28      	ldr	r2, [pc, #160]	; (80152c4 <sFLASH_GetInfo+0x114>)
 8015222:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015224:	4b2a      	ldr	r3, [pc, #168]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015226:	2201      	movs	r2, #1
 8015228:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 801522a:	4b29      	ldr	r3, [pc, #164]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801522c:	2201      	movs	r2, #1
 801522e:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015230:	4b27      	ldr	r3, [pc, #156]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015232:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015236:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015238:	4b25      	ldr	r3, [pc, #148]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801523a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801523e:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015240:	4b23      	ldr	r3, [pc, #140]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015246:	819a      	strh	r2, [r3, #12]
			break;
 8015248:	e02f      	b.n	80152aa <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 801524a:	4b21      	ldr	r3, [pc, #132]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801524c:	4a1c      	ldr	r2, [pc, #112]	; (80152c0 <sFLASH_GetInfo+0x110>)
 801524e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015250:	4b1f      	ldr	r3, [pc, #124]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015252:	2201      	movs	r2, #1
 8015254:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015256:	4b1e      	ldr	r3, [pc, #120]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015258:	2201      	movs	r2, #1
 801525a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801525c:	4b1c      	ldr	r3, [pc, #112]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801525e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015262:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015264:	4b1a      	ldr	r3, [pc, #104]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015266:	f44f 7280 	mov.w	r2, #256	; 0x100
 801526a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 801526c:	4b18      	ldr	r3, [pc, #96]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801526e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015272:	819a      	strh	r2, [r3, #12]
			break;
 8015274:	e019      	b.n	80152aa <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8015276:	4b16      	ldr	r3, [pc, #88]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015278:	4a13      	ldr	r2, [pc, #76]	; (80152c8 <sFLASH_GetInfo+0x118>)
 801527a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801527c:	4b14      	ldr	r3, [pc, #80]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801527e:	2201      	movs	r2, #1
 8015280:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015282:	4b13      	ldr	r3, [pc, #76]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015284:	2201      	movs	r2, #1
 8015286:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015288:	4b11      	ldr	r3, [pc, #68]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801528a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801528e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015290:	4b0f      	ldr	r3, [pc, #60]	; (80152d0 <sFLASH_GetInfo+0x120>)
 8015292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015296:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015298:	4b0d      	ldr	r3, [pc, #52]	; (80152d0 <sFLASH_GetInfo+0x120>)
 801529a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801529e:	819a      	strh	r2, [r3, #12]
			break;
 80152a0:	e003      	b.n	80152aa <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 80152a2:	4b0b      	ldr	r3, [pc, #44]	; (80152d0 <sFLASH_GetInfo+0x120>)
 80152a4:	2200      	movs	r2, #0
 80152a6:	601a      	str	r2, [r3, #0]
			break;
 80152a8:	bf00      	nop
	}

	return flash_info;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	4a08      	ldr	r2, [pc, #32]	; (80152d0 <sFLASH_GetInfo+0x120>)
 80152ae:	461c      	mov	r4, r3
 80152b0:	4613      	mov	r3, r2
 80152b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80152b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	3714      	adds	r7, #20
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd90      	pop	{r4, r7, pc}
 80152c0:	00ef4017 	.word	0x00ef4017
 80152c4:	00ef4016 	.word	0x00ef4016
 80152c8:	00c22016 	.word	0x00c22016
 80152cc:	00ef4015 	.word	0x00ef4015
 80152d0:	20000918 	.word	0x20000918

080152d4 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80152d4:	b580      	push	{r7, lr}
 80152d6:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80152d8:	4b02      	ldr	r3, [pc, #8]	; (80152e4 <sFLASH_CS_LOW+0x10>)
 80152da:	68db      	ldr	r3, [r3, #12]
 80152dc:	4798      	blx	r3

}
 80152de:	bf00      	nop
 80152e0:	bd80      	pop	{r7, pc}
 80152e2:	bf00      	nop
 80152e4:	20000904 	.word	0x20000904

080152e8 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80152e8:	b580      	push	{r7, lr}
 80152ea:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 80152ec:	4b02      	ldr	r3, [pc, #8]	; (80152f8 <sFLASH_CS_HIGH+0x10>)
 80152ee:	691b      	ldr	r3, [r3, #16]
 80152f0:	4798      	blx	r3
}
 80152f2:	bf00      	nop
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	20000904 	.word	0x20000904

080152fc <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8015304:	f000 f97c 	bl	8015600 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015308:	f7ff ffe4 	bl	80152d4 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 801530c:	2020      	movs	r0, #32
 801530e:	f000 f967 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	0c1b      	lsrs	r3, r3, #16
 8015316:	b2db      	uxtb	r3, r3
 8015318:	4618      	mov	r0, r3
 801531a:	f000 f961 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	0a1b      	lsrs	r3, r3, #8
 8015322:	b2db      	uxtb	r3, r3
 8015324:	4618      	mov	r0, r3
 8015326:	f000 f95b 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	b2db      	uxtb	r3, r3
 801532e:	4618      	mov	r0, r3
 8015330:	f000 f956 	bl	80155e0 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015334:	f7ff ffd8 	bl	80152e8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015338:	f000 f96d 	bl	8015616 <sFLASH_WaitForWriteEnd>
}
 801533c:	bf00      	nop
 801533e:	3708      	adds	r7, #8
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	4613      	mov	r3, r2
 8015350:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8015352:	f000 f955 	bl	8015600 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015356:	f7ff ffbd 	bl	80152d4 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 801535a:	2002      	movs	r0, #2
 801535c:	f000 f940 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	0c1b      	lsrs	r3, r3, #16
 8015364:	b2db      	uxtb	r3, r3
 8015366:	4618      	mov	r0, r3
 8015368:	f000 f93a 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	0a1b      	lsrs	r3, r3, #8
 8015370:	b2db      	uxtb	r3, r3
 8015372:	4618      	mov	r0, r3
 8015374:	f000 f934 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	b2db      	uxtb	r3, r3
 801537c:	4618      	mov	r0, r3
 801537e:	f000 f92f 	bl	80155e0 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8015382:	e007      	b.n	8015394 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	4618      	mov	r0, r3
 801538a:	f000 f929 	bl	80155e0 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	3301      	adds	r3, #1
 8015392:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8015394:	88fb      	ldrh	r3, [r7, #6]
 8015396:	1e5a      	subs	r2, r3, #1
 8015398:	80fa      	strh	r2, [r7, #6]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d1f2      	bne.n	8015384 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801539e:	f7ff ffa3 	bl	80152e8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80153a2:	f000 f938 	bl	8015616 <sFLASH_WaitForWriteEnd>
}
 80153a6:	bf00      	nop
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b086      	sub	sp, #24
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	60f8      	str	r0, [r7, #12]
 80153b6:	60b9      	str	r1, [r7, #8]
 80153b8:	4613      	mov	r3, r2
 80153ba:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80153bc:	2300      	movs	r3, #0
 80153be:	75fb      	strb	r3, [r7, #23]
 80153c0:	2300      	movs	r3, #0
 80153c2:	75bb      	strb	r3, [r7, #22]
 80153c4:	2300      	movs	r3, #0
 80153c6:	757b      	strb	r3, [r7, #21]
 80153c8:	2300      	movs	r3, #0
 80153ca:	753b      	strb	r3, [r7, #20]
 80153cc:	2300      	movs	r3, #0
 80153ce:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 80153d4:	7d7b      	ldrb	r3, [r7, #21]
 80153d6:	425b      	negs	r3, r3
 80153d8:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80153da:	88fb      	ldrh	r3, [r7, #6]
 80153dc:	0a1b      	lsrs	r3, r3, #8
 80153de:	b29b      	uxth	r3, r3
 80153e0:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80153e2:	88fb      	ldrh	r3, [r7, #6]
 80153e4:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80153e6:	7d7b      	ldrb	r3, [r7, #21]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d124      	bne.n	8015436 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80153ec:	7dfb      	ldrb	r3, [r7, #23]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d114      	bne.n	801541c <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80153f2:	88fb      	ldrh	r3, [r7, #6]
 80153f4:	461a      	mov	r2, r3
 80153f6:	68b9      	ldr	r1, [r7, #8]
 80153f8:	68f8      	ldr	r0, [r7, #12]
 80153fa:	f7ff ffa3 	bl	8015344 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80153fe:	e07b      	b.n	80154f8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015404:	68b9      	ldr	r1, [r7, #8]
 8015406:	68f8      	ldr	r0, [r7, #12]
 8015408:	f7ff ff9c 	bl	8015344 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015412:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801541a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 801541c:	7dfb      	ldrb	r3, [r7, #23]
 801541e:	1e5a      	subs	r2, r3, #1
 8015420:	75fa      	strb	r2, [r7, #23]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d1ec      	bne.n	8015400 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015426:	7dbb      	ldrb	r3, [r7, #22]
 8015428:	b29b      	uxth	r3, r3
 801542a:	461a      	mov	r2, r3
 801542c:	68b9      	ldr	r1, [r7, #8]
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	f7ff ff88 	bl	8015344 <sFLASH_WritePage>
}
 8015434:	e060      	b.n	80154f8 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015436:	7dfb      	ldrb	r3, [r7, #23]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d125      	bne.n	8015488 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 801543c:	7dba      	ldrb	r2, [r7, #22]
 801543e:	7d3b      	ldrb	r3, [r7, #20]
 8015440:	429a      	cmp	r2, r3
 8015442:	d91a      	bls.n	801547a <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8015444:	7dba      	ldrb	r2, [r7, #22]
 8015446:	7d3b      	ldrb	r3, [r7, #20]
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 801544c:	7d3b      	ldrb	r3, [r7, #20]
 801544e:	b29b      	uxth	r3, r3
 8015450:	461a      	mov	r2, r3
 8015452:	68b9      	ldr	r1, [r7, #8]
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f7ff ff75 	bl	8015344 <sFLASH_WritePage>
        WriteAddr +=  count;
 801545a:	7d3b      	ldrb	r3, [r7, #20]
 801545c:	68ba      	ldr	r2, [r7, #8]
 801545e:	4413      	add	r3, r2
 8015460:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8015462:	7d3b      	ldrb	r3, [r7, #20]
 8015464:	68fa      	ldr	r2, [r7, #12]
 8015466:	4413      	add	r3, r2
 8015468:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 801546a:	7cfb      	ldrb	r3, [r7, #19]
 801546c:	b29b      	uxth	r3, r3
 801546e:	461a      	mov	r2, r3
 8015470:	68b9      	ldr	r1, [r7, #8]
 8015472:	68f8      	ldr	r0, [r7, #12]
 8015474:	f7ff ff66 	bl	8015344 <sFLASH_WritePage>
}
 8015478:	e03e      	b.n	80154f8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801547a:	88fb      	ldrh	r3, [r7, #6]
 801547c:	461a      	mov	r2, r3
 801547e:	68b9      	ldr	r1, [r7, #8]
 8015480:	68f8      	ldr	r0, [r7, #12]
 8015482:	f7ff ff5f 	bl	8015344 <sFLASH_WritePage>
}
 8015486:	e037      	b.n	80154f8 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8015488:	7d3b      	ldrb	r3, [r7, #20]
 801548a:	b29b      	uxth	r3, r3
 801548c:	88fa      	ldrh	r2, [r7, #6]
 801548e:	1ad3      	subs	r3, r2, r3
 8015490:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015492:	88fb      	ldrh	r3, [r7, #6]
 8015494:	0a1b      	lsrs	r3, r3, #8
 8015496:	b29b      	uxth	r3, r3
 8015498:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801549a:	88fb      	ldrh	r3, [r7, #6]
 801549c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 801549e:	7d3b      	ldrb	r3, [r7, #20]
 80154a0:	b29b      	uxth	r3, r3
 80154a2:	461a      	mov	r2, r3
 80154a4:	68b9      	ldr	r1, [r7, #8]
 80154a6:	68f8      	ldr	r0, [r7, #12]
 80154a8:	f7ff ff4c 	bl	8015344 <sFLASH_WritePage>
      WriteAddr +=  count;
 80154ac:	7d3b      	ldrb	r3, [r7, #20]
 80154ae:	68ba      	ldr	r2, [r7, #8]
 80154b0:	4413      	add	r3, r2
 80154b2:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 80154b4:	7d3b      	ldrb	r3, [r7, #20]
 80154b6:	68fa      	ldr	r2, [r7, #12]
 80154b8:	4413      	add	r3, r2
 80154ba:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80154bc:	e00d      	b.n	80154da <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80154be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80154c2:	68b9      	ldr	r1, [r7, #8]
 80154c4:	68f8      	ldr	r0, [r7, #12]
 80154c6:	f7ff ff3d 	bl	8015344 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80154d0:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80154d8:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80154da:	7dfb      	ldrb	r3, [r7, #23]
 80154dc:	1e5a      	subs	r2, r3, #1
 80154de:	75fa      	strb	r2, [r7, #23]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d1ec      	bne.n	80154be <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80154e4:	7dbb      	ldrb	r3, [r7, #22]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d006      	beq.n	80154f8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80154ea:	7dbb      	ldrb	r3, [r7, #22]
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	461a      	mov	r2, r3
 80154f0:	68b9      	ldr	r1, [r7, #8]
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f7ff ff26 	bl	8015344 <sFLASH_WritePage>
}
 80154f8:	bf00      	nop
 80154fa:	3718      	adds	r7, #24
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}

08015500 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	60f8      	str	r0, [r7, #12]
 8015508:	60b9      	str	r1, [r7, #8]
 801550a:	4613      	mov	r3, r2
 801550c:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801550e:	f7ff fee1 	bl	80152d4 <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 8015512:	2003      	movs	r0, #3
 8015514:	f000 f864 	bl	80155e0 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	0c1b      	lsrs	r3, r3, #16
 801551c:	b2db      	uxtb	r3, r3
 801551e:	4618      	mov	r0, r3
 8015520:	f000 f85e 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	0a1b      	lsrs	r3, r3, #8
 8015528:	b2db      	uxtb	r3, r3
 801552a:	4618      	mov	r0, r3
 801552c:	f000 f858 	bl	80155e0 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	b2db      	uxtb	r3, r3
 8015534:	4618      	mov	r0, r3
 8015536:	f000 f853 	bl	80155e0 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 801553a:	e008      	b.n	801554e <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 801553c:	f000 f846 	bl	80155cc <sFLASH_ReadByte>
 8015540:	4603      	mov	r3, r0
 8015542:	461a      	mov	r2, r3
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	3301      	adds	r3, #1
 801554c:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 801554e:	88fb      	ldrh	r3, [r7, #6]
 8015550:	1e5a      	subs	r2, r3, #1
 8015552:	80fa      	strh	r2, [r7, #6]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d1f1      	bne.n	801553c <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015558:	f7ff fec6 	bl	80152e8 <sFLASH_CS_HIGH>
}
 801555c:	bf00      	nop
 801555e:	3710      	adds	r7, #16
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}

08015564 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b084      	sub	sp, #16
 8015568:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 801556a:	2300      	movs	r3, #0
 801556c:	60fb      	str	r3, [r7, #12]
 801556e:	2300      	movs	r3, #0
 8015570:	60bb      	str	r3, [r7, #8]
 8015572:	2300      	movs	r3, #0
 8015574:	607b      	str	r3, [r7, #4]
 8015576:	2300      	movs	r3, #0
 8015578:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801557a:	f7ff feab 	bl	80152d4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801557e:	f7ff feb3 	bl	80152e8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015582:	f7ff fea7 	bl	80152d4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015586:	f7ff feaf 	bl	80152e8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801558a:	f7ff fea3 	bl	80152d4 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 801558e:	209f      	movs	r0, #159	; 0x9f
 8015590:	f000 f826 	bl	80155e0 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8015594:	f000 f81a 	bl	80155cc <sFLASH_ReadByte>
 8015598:	4603      	mov	r3, r0
 801559a:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 801559c:	f000 f816 	bl	80155cc <sFLASH_ReadByte>
 80155a0:	4603      	mov	r3, r0
 80155a2:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80155a4:	f000 f812 	bl	80155cc <sFLASH_ReadByte>
 80155a8:	4603      	mov	r3, r0
 80155aa:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80155ac:	f7ff fe9c 	bl	80152e8 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	041a      	lsls	r2, r3, #16
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	021b      	lsls	r3, r3, #8
 80155b8:	4313      	orrs	r3, r2
 80155ba:	683a      	ldr	r2, [r7, #0]
 80155bc:	4313      	orrs	r3, r2
 80155be:	60fb      	str	r3, [r7, #12]

  return Temp;
 80155c0:	68fb      	ldr	r3, [r7, #12]
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
	...

080155cc <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 80155d0:	4b02      	ldr	r3, [pc, #8]	; (80155dc <sFLASH_ReadByte+0x10>)
 80155d2:	685b      	ldr	r3, [r3, #4]
 80155d4:	4798      	blx	r3
 80155d6:	4603      	mov	r3, r0
}
 80155d8:	4618      	mov	r0, r3
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	20000904 	.word	0x20000904

080155e0 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	4603      	mov	r3, r0
 80155e8:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 80155ea:	4b04      	ldr	r3, [pc, #16]	; (80155fc <sFLASH_SendByte+0x1c>)
 80155ec:	689b      	ldr	r3, [r3, #8]
 80155ee:	79fa      	ldrb	r2, [r7, #7]
 80155f0:	4610      	mov	r0, r2
 80155f2:	4798      	blx	r3
}
 80155f4:	bf00      	nop
 80155f6:	3708      	adds	r7, #8
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}
 80155fc:	20000904 	.word	0x20000904

08015600 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015604:	f7ff fe66 	bl	80152d4 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015608:	2006      	movs	r0, #6
 801560a:	f7ff ffe9 	bl	80155e0 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801560e:	f7ff fe6b 	bl	80152e8 <sFLASH_CS_HIGH>
}
 8015612:	bf00      	nop
 8015614:	bd80      	pop	{r7, pc}

08015616 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b082      	sub	sp, #8
 801561a:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 801561c:	2300      	movs	r3, #0
 801561e:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015620:	f7ff fe58 	bl	80152d4 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015624:	2005      	movs	r0, #5
 8015626:	f7ff ffdb 	bl	80155e0 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 801562a:	f7ff ffcf 	bl	80155cc <sFLASH_ReadByte>
 801562e:	4603      	mov	r3, r0
 8015630:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8015632:	79fb      	ldrb	r3, [r7, #7]
 8015634:	f003 0301 	and.w	r3, r3, #1
 8015638:	2b00      	cmp	r3, #0
 801563a:	d1f6      	bne.n	801562a <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801563c:	f7ff fe54 	bl	80152e8 <sFLASH_CS_HIGH>
}
 8015640:	bf00      	nop
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}

08015648 <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 8015648:	b084      	sub	sp, #16
 801564a:	b580      	push	{r7, lr}
 801564c:	af00      	add	r7, sp, #0
 801564e:	f107 0c08 	add.w	ip, r7, #8
 8015652:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 8015656:	4b07      	ldr	r3, [pc, #28]	; (8015674 <SPI_flash_set+0x2c>)
 8015658:	4618      	mov	r0, r3
 801565a:	f107 0308 	add.w	r3, r7, #8
 801565e:	2258      	movs	r2, #88	; 0x58
 8015660:	4619      	mov	r1, r3
 8015662:	f018 fb38 	bl	802dcd6 <memcpy>
}
 8015666:	bf00      	nop
 8015668:	46bd      	mov	sp, r7
 801566a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801566e:	b004      	add	sp, #16
 8015670:	4770      	bx	lr
 8015672:	bf00      	nop
 8015674:	20000928 	.word	0x20000928

08015678 <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 801567e:	1df9      	adds	r1, r7, #7
 8015680:	f241 3388 	movw	r3, #5000	; 0x1388
 8015684:	2201      	movs	r2, #1
 8015686:	4804      	ldr	r0, [pc, #16]	; (8015698 <SPI_flash_read_byte+0x20>)
 8015688:	f001 fa8a 	bl	8016ba0 <HAL_SPI_Receive>
	return byte;
 801568c:	79fb      	ldrb	r3, [r7, #7]
}
 801568e:	4618      	mov	r0, r3
 8015690:	3708      	adds	r7, #8
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
 8015696:	bf00      	nop
 8015698:	20000928 	.word	0x20000928

0801569c <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	4603      	mov	r3, r0
 80156a4:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 80156a6:	1df9      	adds	r1, r7, #7
 80156a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80156ac:	2201      	movs	r2, #1
 80156ae:	4803      	ldr	r0, [pc, #12]	; (80156bc <SPI_flash_send_byte+0x20>)
 80156b0:	f001 f933 	bl	801691a <HAL_SPI_Transmit>

}
 80156b4:	bf00      	nop
 80156b6:	3708      	adds	r7, #8
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	20000928 	.word	0x20000928

080156c0 <SPI_flash_select>:

void SPI_flash_select(void){
 80156c0:	b580      	push	{r7, lr}
 80156c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80156c4:	2200      	movs	r2, #0
 80156c6:	2110      	movs	r1, #16
 80156c8:	4802      	ldr	r0, [pc, #8]	; (80156d4 <SPI_flash_select+0x14>)
 80156ca:	f000 fb67 	bl	8015d9c <HAL_GPIO_WritePin>
}
 80156ce:	bf00      	nop
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	40020000 	.word	0x40020000

080156d8 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 80156d8:	b580      	push	{r7, lr}
 80156da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80156dc:	2201      	movs	r2, #1
 80156de:	2110      	movs	r1, #16
 80156e0:	4802      	ldr	r0, [pc, #8]	; (80156ec <SPI_flash_deselect+0x14>)
 80156e2:	f000 fb5b 	bl	8015d9c <HAL_GPIO_WritePin>
}
 80156e6:	bf00      	nop
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	40020000 	.word	0x40020000

080156f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80156f4:	4b0e      	ldr	r3, [pc, #56]	; (8015730 <HAL_Init+0x40>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	4a0d      	ldr	r2, [pc, #52]	; (8015730 <HAL_Init+0x40>)
 80156fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80156fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015700:	4b0b      	ldr	r3, [pc, #44]	; (8015730 <HAL_Init+0x40>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	4a0a      	ldr	r2, [pc, #40]	; (8015730 <HAL_Init+0x40>)
 8015706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801570a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801570c:	4b08      	ldr	r3, [pc, #32]	; (8015730 <HAL_Init+0x40>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	4a07      	ldr	r2, [pc, #28]	; (8015730 <HAL_Init+0x40>)
 8015712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015718:	2003      	movs	r0, #3
 801571a:	f000 f8d8 	bl	80158ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801571e:	200f      	movs	r0, #15
 8015720:	f7fd f9c4 	bl	8012aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015724:	f7fd f8a6 	bl	8012874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015728:	2300      	movs	r3, #0
}
 801572a:	4618      	mov	r0, r3
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	40023c00 	.word	0x40023c00

08015734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015734:	b480      	push	{r7}
 8015736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015738:	4b06      	ldr	r3, [pc, #24]	; (8015754 <HAL_IncTick+0x20>)
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	461a      	mov	r2, r3
 801573e:	4b06      	ldr	r3, [pc, #24]	; (8015758 <HAL_IncTick+0x24>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	4413      	add	r3, r2
 8015744:	4a04      	ldr	r2, [pc, #16]	; (8015758 <HAL_IncTick+0x24>)
 8015746:	6013      	str	r3, [r2, #0]
}
 8015748:	bf00      	nop
 801574a:	46bd      	mov	sp, r7
 801574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015750:	4770      	bx	lr
 8015752:	bf00      	nop
 8015754:	200000c0 	.word	0x200000c0
 8015758:	20000980 	.word	0x20000980

0801575c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801575c:	b480      	push	{r7}
 801575e:	af00      	add	r7, sp, #0
  return uwTick;
 8015760:	4b03      	ldr	r3, [pc, #12]	; (8015770 <HAL_GetTick+0x14>)
 8015762:	681b      	ldr	r3, [r3, #0]
}
 8015764:	4618      	mov	r0, r3
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	20000980 	.word	0x20000980

08015774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015774:	b480      	push	{r7}
 8015776:	b085      	sub	sp, #20
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f003 0307 	and.w	r3, r3, #7
 8015782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015784:	4b0c      	ldr	r3, [pc, #48]	; (80157b8 <__NVIC_SetPriorityGrouping+0x44>)
 8015786:	68db      	ldr	r3, [r3, #12]
 8015788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801578a:	68ba      	ldr	r2, [r7, #8]
 801578c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015790:	4013      	ands	r3, r2
 8015792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015798:	68bb      	ldr	r3, [r7, #8]
 801579a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801579c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80157a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80157a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80157a6:	4a04      	ldr	r2, [pc, #16]	; (80157b8 <__NVIC_SetPriorityGrouping+0x44>)
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	60d3      	str	r3, [r2, #12]
}
 80157ac:	bf00      	nop
 80157ae:	3714      	adds	r7, #20
 80157b0:	46bd      	mov	sp, r7
 80157b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b6:	4770      	bx	lr
 80157b8:	e000ed00 	.word	0xe000ed00

080157bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80157bc:	b480      	push	{r7}
 80157be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80157c0:	4b04      	ldr	r3, [pc, #16]	; (80157d4 <__NVIC_GetPriorityGrouping+0x18>)
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	0a1b      	lsrs	r3, r3, #8
 80157c6:	f003 0307 	and.w	r3, r3, #7
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr
 80157d4:	e000ed00 	.word	0xe000ed00

080157d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80157d8:	b480      	push	{r7}
 80157da:	b083      	sub	sp, #12
 80157dc:	af00      	add	r7, sp, #0
 80157de:	4603      	mov	r3, r0
 80157e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80157e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	db0b      	blt.n	8015802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80157ea:	79fb      	ldrb	r3, [r7, #7]
 80157ec:	f003 021f 	and.w	r2, r3, #31
 80157f0:	4907      	ldr	r1, [pc, #28]	; (8015810 <__NVIC_EnableIRQ+0x38>)
 80157f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157f6:	095b      	lsrs	r3, r3, #5
 80157f8:	2001      	movs	r0, #1
 80157fa:	fa00 f202 	lsl.w	r2, r0, r2
 80157fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8015802:	bf00      	nop
 8015804:	370c      	adds	r7, #12
 8015806:	46bd      	mov	sp, r7
 8015808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580c:	4770      	bx	lr
 801580e:	bf00      	nop
 8015810:	e000e100 	.word	0xe000e100

08015814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	4603      	mov	r3, r0
 801581c:	6039      	str	r1, [r7, #0]
 801581e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015824:	2b00      	cmp	r3, #0
 8015826:	db0a      	blt.n	801583e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	b2da      	uxtb	r2, r3
 801582c:	490c      	ldr	r1, [pc, #48]	; (8015860 <__NVIC_SetPriority+0x4c>)
 801582e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015832:	0112      	lsls	r2, r2, #4
 8015834:	b2d2      	uxtb	r2, r2
 8015836:	440b      	add	r3, r1
 8015838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801583c:	e00a      	b.n	8015854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	b2da      	uxtb	r2, r3
 8015842:	4908      	ldr	r1, [pc, #32]	; (8015864 <__NVIC_SetPriority+0x50>)
 8015844:	79fb      	ldrb	r3, [r7, #7]
 8015846:	f003 030f 	and.w	r3, r3, #15
 801584a:	3b04      	subs	r3, #4
 801584c:	0112      	lsls	r2, r2, #4
 801584e:	b2d2      	uxtb	r2, r2
 8015850:	440b      	add	r3, r1
 8015852:	761a      	strb	r2, [r3, #24]
}
 8015854:	bf00      	nop
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr
 8015860:	e000e100 	.word	0xe000e100
 8015864:	e000ed00 	.word	0xe000ed00

08015868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015868:	b480      	push	{r7}
 801586a:	b089      	sub	sp, #36	; 0x24
 801586c:	af00      	add	r7, sp, #0
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	60b9      	str	r1, [r7, #8]
 8015872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f003 0307 	and.w	r3, r3, #7
 801587a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	f1c3 0307 	rsb	r3, r3, #7
 8015882:	2b04      	cmp	r3, #4
 8015884:	bf28      	it	cs
 8015886:	2304      	movcs	r3, #4
 8015888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	3304      	adds	r3, #4
 801588e:	2b06      	cmp	r3, #6
 8015890:	d902      	bls.n	8015898 <NVIC_EncodePriority+0x30>
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	3b03      	subs	r3, #3
 8015896:	e000      	b.n	801589a <NVIC_EncodePriority+0x32>
 8015898:	2300      	movs	r3, #0
 801589a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801589c:	f04f 32ff 	mov.w	r2, #4294967295
 80158a0:	69bb      	ldr	r3, [r7, #24]
 80158a2:	fa02 f303 	lsl.w	r3, r2, r3
 80158a6:	43da      	mvns	r2, r3
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	401a      	ands	r2, r3
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80158b0:	f04f 31ff 	mov.w	r1, #4294967295
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	fa01 f303 	lsl.w	r3, r1, r3
 80158ba:	43d9      	mvns	r1, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80158c0:	4313      	orrs	r3, r2
         );
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3724      	adds	r7, #36	; 0x24
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr

080158ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80158ce:	b580      	push	{r7, lr}
 80158d0:	b082      	sub	sp, #8
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f7ff ff4c 	bl	8015774 <__NVIC_SetPriorityGrouping>
}
 80158dc:	bf00      	nop
 80158de:	3708      	adds	r7, #8
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b086      	sub	sp, #24
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	4603      	mov	r3, r0
 80158ec:	60b9      	str	r1, [r7, #8]
 80158ee:	607a      	str	r2, [r7, #4]
 80158f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80158f2:	2300      	movs	r3, #0
 80158f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80158f6:	f7ff ff61 	bl	80157bc <__NVIC_GetPriorityGrouping>
 80158fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	68b9      	ldr	r1, [r7, #8]
 8015900:	6978      	ldr	r0, [r7, #20]
 8015902:	f7ff ffb1 	bl	8015868 <NVIC_EncodePriority>
 8015906:	4602      	mov	r2, r0
 8015908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801590c:	4611      	mov	r1, r2
 801590e:	4618      	mov	r0, r3
 8015910:	f7ff ff80 	bl	8015814 <__NVIC_SetPriority>
}
 8015914:	bf00      	nop
 8015916:	3718      	adds	r7, #24
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}

0801591c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	4603      	mov	r3, r0
 8015924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801592a:	4618      	mov	r0, r3
 801592c:	f7ff ff54 	bl	80157d8 <__NVIC_EnableIRQ>
}
 8015930:	bf00      	nop
 8015932:	3708      	adds	r7, #8
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d101      	bne.n	801594a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8015946:	2301      	movs	r3, #1
 8015948:	e00e      	b.n	8015968 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	795b      	ldrb	r3, [r3, #5]
 801594e:	b2db      	uxtb	r3, r3
 8015950:	2b00      	cmp	r3, #0
 8015952:	d105      	bne.n	8015960 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2200      	movs	r2, #0
 8015958:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f7fc ffb6 	bl	80128cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2201      	movs	r2, #1
 8015964:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8015966:	2300      	movs	r3, #0
}
 8015968:	4618      	mov	r0, r3
 801596a:	3708      	adds	r7, #8
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b084      	sub	sp, #16
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801597c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801597e:	f7ff feed 	bl	801575c <HAL_GetTick>
 8015982:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801598a:	b2db      	uxtb	r3, r3
 801598c:	2b02      	cmp	r3, #2
 801598e:	d008      	beq.n	80159a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2280      	movs	r2, #128	; 0x80
 8015994:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2200      	movs	r2, #0
 801599a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801599e:	2301      	movs	r3, #1
 80159a0:	e052      	b.n	8015a48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	681a      	ldr	r2, [r3, #0]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	f022 0216 	bic.w	r2, r2, #22
 80159b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	695a      	ldr	r2, [r3, #20]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80159c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d103      	bne.n	80159d2 <HAL_DMA_Abort+0x62>
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d007      	beq.n	80159e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	681a      	ldr	r2, [r3, #0]
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f022 0208 	bic.w	r2, r2, #8
 80159e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	681a      	ldr	r2, [r3, #0]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	f022 0201 	bic.w	r2, r2, #1
 80159f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80159f2:	e013      	b.n	8015a1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80159f4:	f7ff feb2 	bl	801575c <HAL_GetTick>
 80159f8:	4602      	mov	r2, r0
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	1ad3      	subs	r3, r2, r3
 80159fe:	2b05      	cmp	r3, #5
 8015a00:	d90c      	bls.n	8015a1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2220      	movs	r2, #32
 8015a06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2203      	movs	r2, #3
 8015a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2200      	movs	r2, #0
 8015a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8015a18:	2303      	movs	r3, #3
 8015a1a:	e015      	b.n	8015a48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	f003 0301 	and.w	r3, r3, #1
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d1e4      	bne.n	80159f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a2e:	223f      	movs	r2, #63	; 0x3f
 8015a30:	409a      	lsls	r2, r3
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	2201      	movs	r2, #1
 8015a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2200      	movs	r2, #0
 8015a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8015a46:	2300      	movs	r3, #0
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b083      	sub	sp, #12
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	2b02      	cmp	r3, #2
 8015a62:	d004      	beq.n	8015a6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2280      	movs	r2, #128	; 0x80
 8015a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	e00c      	b.n	8015a88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	2205      	movs	r2, #5
 8015a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f022 0201 	bic.w	r2, r2, #1
 8015a84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015a86:	2300      	movs	r3, #0
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	370c      	adds	r7, #12
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr

08015a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015a94:	b480      	push	{r7}
 8015a96:	b089      	sub	sp, #36	; 0x24
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015aaa:	2300      	movs	r3, #0
 8015aac:	61fb      	str	r3, [r7, #28]
 8015aae:	e159      	b.n	8015d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015ab0:	2201      	movs	r2, #1
 8015ab2:	69fb      	ldr	r3, [r7, #28]
 8015ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8015ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	697a      	ldr	r2, [r7, #20]
 8015ac0:	4013      	ands	r3, r2
 8015ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015ac4:	693a      	ldr	r2, [r7, #16]
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	f040 8148 	bne.w	8015d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	685b      	ldr	r3, [r3, #4]
 8015ad2:	f003 0303 	and.w	r3, r3, #3
 8015ad6:	2b01      	cmp	r3, #1
 8015ad8:	d005      	beq.n	8015ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015ae2:	2b02      	cmp	r3, #2
 8015ae4:	d130      	bne.n	8015b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	689b      	ldr	r3, [r3, #8]
 8015aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	005b      	lsls	r3, r3, #1
 8015af0:	2203      	movs	r2, #3
 8015af2:	fa02 f303 	lsl.w	r3, r2, r3
 8015af6:	43db      	mvns	r3, r3
 8015af8:	69ba      	ldr	r2, [r7, #24]
 8015afa:	4013      	ands	r3, r2
 8015afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	68da      	ldr	r2, [r3, #12]
 8015b02:	69fb      	ldr	r3, [r7, #28]
 8015b04:	005b      	lsls	r3, r3, #1
 8015b06:	fa02 f303 	lsl.w	r3, r2, r3
 8015b0a:	69ba      	ldr	r2, [r7, #24]
 8015b0c:	4313      	orrs	r3, r2
 8015b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	69ba      	ldr	r2, [r7, #24]
 8015b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	fa02 f303 	lsl.w	r3, r2, r3
 8015b24:	43db      	mvns	r3, r3
 8015b26:	69ba      	ldr	r2, [r7, #24]
 8015b28:	4013      	ands	r3, r2
 8015b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	091b      	lsrs	r3, r3, #4
 8015b32:	f003 0201 	and.w	r2, r3, #1
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	fa02 f303 	lsl.w	r3, r2, r3
 8015b3c:	69ba      	ldr	r2, [r7, #24]
 8015b3e:	4313      	orrs	r3, r2
 8015b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	69ba      	ldr	r2, [r7, #24]
 8015b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	f003 0303 	and.w	r3, r3, #3
 8015b50:	2b03      	cmp	r3, #3
 8015b52:	d017      	beq.n	8015b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	68db      	ldr	r3, [r3, #12]
 8015b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	005b      	lsls	r3, r3, #1
 8015b5e:	2203      	movs	r2, #3
 8015b60:	fa02 f303 	lsl.w	r3, r2, r3
 8015b64:	43db      	mvns	r3, r3
 8015b66:	69ba      	ldr	r2, [r7, #24]
 8015b68:	4013      	ands	r3, r2
 8015b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	689a      	ldr	r2, [r3, #8]
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	fa02 f303 	lsl.w	r3, r2, r3
 8015b78:	69ba      	ldr	r2, [r7, #24]
 8015b7a:	4313      	orrs	r3, r2
 8015b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	69ba      	ldr	r2, [r7, #24]
 8015b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	f003 0303 	and.w	r3, r3, #3
 8015b8c:	2b02      	cmp	r3, #2
 8015b8e:	d123      	bne.n	8015bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015b90:	69fb      	ldr	r3, [r7, #28]
 8015b92:	08da      	lsrs	r2, r3, #3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	3208      	adds	r2, #8
 8015b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015b9e:	69fb      	ldr	r3, [r7, #28]
 8015ba0:	f003 0307 	and.w	r3, r3, #7
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	220f      	movs	r2, #15
 8015ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8015bac:	43db      	mvns	r3, r3
 8015bae:	69ba      	ldr	r2, [r7, #24]
 8015bb0:	4013      	ands	r3, r2
 8015bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	691a      	ldr	r2, [r3, #16]
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	f003 0307 	and.w	r3, r3, #7
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8015bc4:	69ba      	ldr	r2, [r7, #24]
 8015bc6:	4313      	orrs	r3, r2
 8015bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015bca:	69fb      	ldr	r3, [r7, #28]
 8015bcc:	08da      	lsrs	r2, r3, #3
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	3208      	adds	r2, #8
 8015bd2:	69b9      	ldr	r1, [r7, #24]
 8015bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015bde:	69fb      	ldr	r3, [r7, #28]
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	2203      	movs	r2, #3
 8015be4:	fa02 f303 	lsl.w	r3, r2, r3
 8015be8:	43db      	mvns	r3, r3
 8015bea:	69ba      	ldr	r2, [r7, #24]
 8015bec:	4013      	ands	r3, r2
 8015bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	685b      	ldr	r3, [r3, #4]
 8015bf4:	f003 0203 	and.w	r2, r3, #3
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	005b      	lsls	r3, r3, #1
 8015bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8015c00:	69ba      	ldr	r2, [r7, #24]
 8015c02:	4313      	orrs	r3, r2
 8015c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	69ba      	ldr	r2, [r7, #24]
 8015c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f000 80a2 	beq.w	8015d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	60fb      	str	r3, [r7, #12]
 8015c1e:	4b57      	ldr	r3, [pc, #348]	; (8015d7c <HAL_GPIO_Init+0x2e8>)
 8015c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c22:	4a56      	ldr	r2, [pc, #344]	; (8015d7c <HAL_GPIO_Init+0x2e8>)
 8015c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c28:	6453      	str	r3, [r2, #68]	; 0x44
 8015c2a:	4b54      	ldr	r3, [pc, #336]	; (8015d7c <HAL_GPIO_Init+0x2e8>)
 8015c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015c32:	60fb      	str	r3, [r7, #12]
 8015c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015c36:	4a52      	ldr	r2, [pc, #328]	; (8015d80 <HAL_GPIO_Init+0x2ec>)
 8015c38:	69fb      	ldr	r3, [r7, #28]
 8015c3a:	089b      	lsrs	r3, r3, #2
 8015c3c:	3302      	adds	r3, #2
 8015c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015c44:	69fb      	ldr	r3, [r7, #28]
 8015c46:	f003 0303 	and.w	r3, r3, #3
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	220f      	movs	r2, #15
 8015c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8015c52:	43db      	mvns	r3, r3
 8015c54:	69ba      	ldr	r2, [r7, #24]
 8015c56:	4013      	ands	r3, r2
 8015c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	4a49      	ldr	r2, [pc, #292]	; (8015d84 <HAL_GPIO_Init+0x2f0>)
 8015c5e:	4293      	cmp	r3, r2
 8015c60:	d019      	beq.n	8015c96 <HAL_GPIO_Init+0x202>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	4a48      	ldr	r2, [pc, #288]	; (8015d88 <HAL_GPIO_Init+0x2f4>)
 8015c66:	4293      	cmp	r3, r2
 8015c68:	d013      	beq.n	8015c92 <HAL_GPIO_Init+0x1fe>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	4a47      	ldr	r2, [pc, #284]	; (8015d8c <HAL_GPIO_Init+0x2f8>)
 8015c6e:	4293      	cmp	r3, r2
 8015c70:	d00d      	beq.n	8015c8e <HAL_GPIO_Init+0x1fa>
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	4a46      	ldr	r2, [pc, #280]	; (8015d90 <HAL_GPIO_Init+0x2fc>)
 8015c76:	4293      	cmp	r3, r2
 8015c78:	d007      	beq.n	8015c8a <HAL_GPIO_Init+0x1f6>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	4a45      	ldr	r2, [pc, #276]	; (8015d94 <HAL_GPIO_Init+0x300>)
 8015c7e:	4293      	cmp	r3, r2
 8015c80:	d101      	bne.n	8015c86 <HAL_GPIO_Init+0x1f2>
 8015c82:	2304      	movs	r3, #4
 8015c84:	e008      	b.n	8015c98 <HAL_GPIO_Init+0x204>
 8015c86:	2307      	movs	r3, #7
 8015c88:	e006      	b.n	8015c98 <HAL_GPIO_Init+0x204>
 8015c8a:	2303      	movs	r3, #3
 8015c8c:	e004      	b.n	8015c98 <HAL_GPIO_Init+0x204>
 8015c8e:	2302      	movs	r3, #2
 8015c90:	e002      	b.n	8015c98 <HAL_GPIO_Init+0x204>
 8015c92:	2301      	movs	r3, #1
 8015c94:	e000      	b.n	8015c98 <HAL_GPIO_Init+0x204>
 8015c96:	2300      	movs	r3, #0
 8015c98:	69fa      	ldr	r2, [r7, #28]
 8015c9a:	f002 0203 	and.w	r2, r2, #3
 8015c9e:	0092      	lsls	r2, r2, #2
 8015ca0:	4093      	lsls	r3, r2
 8015ca2:	69ba      	ldr	r2, [r7, #24]
 8015ca4:	4313      	orrs	r3, r2
 8015ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015ca8:	4935      	ldr	r1, [pc, #212]	; (8015d80 <HAL_GPIO_Init+0x2ec>)
 8015caa:	69fb      	ldr	r3, [r7, #28]
 8015cac:	089b      	lsrs	r3, r3, #2
 8015cae:	3302      	adds	r3, #2
 8015cb0:	69ba      	ldr	r2, [r7, #24]
 8015cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015cb6:	4b38      	ldr	r3, [pc, #224]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015cb8:	689b      	ldr	r3, [r3, #8]
 8015cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	43db      	mvns	r3, r3
 8015cc0:	69ba      	ldr	r2, [r7, #24]
 8015cc2:	4013      	ands	r3, r2
 8015cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d003      	beq.n	8015cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015cd2:	69ba      	ldr	r2, [r7, #24]
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	4313      	orrs	r3, r2
 8015cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015cda:	4a2f      	ldr	r2, [pc, #188]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015cdc:	69bb      	ldr	r3, [r7, #24]
 8015cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015ce0:	4b2d      	ldr	r3, [pc, #180]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015ce2:	68db      	ldr	r3, [r3, #12]
 8015ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	43db      	mvns	r3, r3
 8015cea:	69ba      	ldr	r2, [r7, #24]
 8015cec:	4013      	ands	r3, r2
 8015cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d003      	beq.n	8015d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015cfc:	69ba      	ldr	r2, [r7, #24]
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	4313      	orrs	r3, r2
 8015d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015d04:	4a24      	ldr	r2, [pc, #144]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015d0a:	4b23      	ldr	r3, [pc, #140]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015d10:	693b      	ldr	r3, [r7, #16]
 8015d12:	43db      	mvns	r3, r3
 8015d14:	69ba      	ldr	r2, [r7, #24]
 8015d16:	4013      	ands	r3, r2
 8015d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d003      	beq.n	8015d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8015d26:	69ba      	ldr	r2, [r7, #24]
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	4313      	orrs	r3, r2
 8015d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015d2e:	4a1a      	ldr	r2, [pc, #104]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015d34:	4b18      	ldr	r3, [pc, #96]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	43db      	mvns	r3, r3
 8015d3e:	69ba      	ldr	r2, [r7, #24]
 8015d40:	4013      	ands	r3, r2
 8015d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d003      	beq.n	8015d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015d50:	69ba      	ldr	r2, [r7, #24]
 8015d52:	693b      	ldr	r3, [r7, #16]
 8015d54:	4313      	orrs	r3, r2
 8015d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015d58:	4a0f      	ldr	r2, [pc, #60]	; (8015d98 <HAL_GPIO_Init+0x304>)
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	3301      	adds	r3, #1
 8015d62:	61fb      	str	r3, [r7, #28]
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	2b0f      	cmp	r3, #15
 8015d68:	f67f aea2 	bls.w	8015ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015d6c:	bf00      	nop
 8015d6e:	bf00      	nop
 8015d70:	3724      	adds	r7, #36	; 0x24
 8015d72:	46bd      	mov	sp, r7
 8015d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	40023800 	.word	0x40023800
 8015d80:	40013800 	.word	0x40013800
 8015d84:	40020000 	.word	0x40020000
 8015d88:	40020400 	.word	0x40020400
 8015d8c:	40020800 	.word	0x40020800
 8015d90:	40020c00 	.word	0x40020c00
 8015d94:	40021000 	.word	0x40021000
 8015d98:	40013c00 	.word	0x40013c00

08015d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b083      	sub	sp, #12
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	460b      	mov	r3, r1
 8015da6:	807b      	strh	r3, [r7, #2]
 8015da8:	4613      	mov	r3, r2
 8015daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015dac:	787b      	ldrb	r3, [r7, #1]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d003      	beq.n	8015dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015db2:	887a      	ldrh	r2, [r7, #2]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015db8:	e003      	b.n	8015dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015dba:	887b      	ldrh	r3, [r7, #2]
 8015dbc:	041a      	lsls	r2, r3, #16
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	619a      	str	r2, [r3, #24]
}
 8015dc2:	bf00      	nop
 8015dc4:	370c      	adds	r7, #12
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dcc:	4770      	bx	lr

08015dce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015dce:	b580      	push	{r7, lr}
 8015dd0:	b084      	sub	sp, #16
 8015dd2:	af00      	add	r7, sp, #0
 8015dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d101      	bne.n	8015de0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015ddc:	2301      	movs	r3, #1
 8015dde:	e034      	b.n	8015e4a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8015de8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	f245 5255 	movw	r2, #21845	; 0x5555
 8015df2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	6852      	ldr	r2, [r2, #4]
 8015dfc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	687a      	ldr	r2, [r7, #4]
 8015e04:	6892      	ldr	r2, [r2, #8]
 8015e06:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015e08:	f7ff fca8 	bl	801575c <HAL_GetTick>
 8015e0c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015e0e:	e00f      	b.n	8015e30 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015e10:	f7ff fca4 	bl	801575c <HAL_GetTick>
 8015e14:	4602      	mov	r2, r0
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	2b31      	cmp	r3, #49	; 0x31
 8015e1c:	d908      	bls.n	8015e30 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	68db      	ldr	r3, [r3, #12]
 8015e24:	f003 0303 	and.w	r3, r3, #3
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d001      	beq.n	8015e30 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8015e2c:	2303      	movs	r3, #3
 8015e2e:	e00c      	b.n	8015e4a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	68db      	ldr	r3, [r3, #12]
 8015e36:	f003 0303 	and.w	r3, r3, #3
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d1e8      	bne.n	8015e10 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015e46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015e48:	2300      	movs	r3, #0
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3710      	adds	r7, #16
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015e52:	b480      	push	{r7}
 8015e54:	b083      	sub	sp, #12
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015e62:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015e64:	2300      	movs	r3, #0
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	370c      	adds	r7, #12
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e70:	4770      	bx	lr
	...

08015e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b086      	sub	sp, #24
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d101      	bne.n	8015e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015e82:	2301      	movs	r3, #1
 8015e84:	e267      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	f003 0301 	and.w	r3, r3, #1
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d075      	beq.n	8015f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015e92:	4b88      	ldr	r3, [pc, #544]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015e94:	689b      	ldr	r3, [r3, #8]
 8015e96:	f003 030c 	and.w	r3, r3, #12
 8015e9a:	2b04      	cmp	r3, #4
 8015e9c:	d00c      	beq.n	8015eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015e9e:	4b85      	ldr	r3, [pc, #532]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015ea0:	689b      	ldr	r3, [r3, #8]
 8015ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015ea6:	2b08      	cmp	r3, #8
 8015ea8:	d112      	bne.n	8015ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015eaa:	4b82      	ldr	r3, [pc, #520]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015eb6:	d10b      	bne.n	8015ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015eb8:	4b7e      	ldr	r3, [pc, #504]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d05b      	beq.n	8015f7c <HAL_RCC_OscConfig+0x108>
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d157      	bne.n	8015f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	e242      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	685b      	ldr	r3, [r3, #4]
 8015ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ed8:	d106      	bne.n	8015ee8 <HAL_RCC_OscConfig+0x74>
 8015eda:	4b76      	ldr	r3, [pc, #472]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	4a75      	ldr	r2, [pc, #468]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015ee4:	6013      	str	r3, [r2, #0]
 8015ee6:	e01d      	b.n	8015f24 <HAL_RCC_OscConfig+0xb0>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015ef0:	d10c      	bne.n	8015f0c <HAL_RCC_OscConfig+0x98>
 8015ef2:	4b70      	ldr	r3, [pc, #448]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a6f      	ldr	r2, [pc, #444]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015efc:	6013      	str	r3, [r2, #0]
 8015efe:	4b6d      	ldr	r3, [pc, #436]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	4a6c      	ldr	r2, [pc, #432]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015f08:	6013      	str	r3, [r2, #0]
 8015f0a:	e00b      	b.n	8015f24 <HAL_RCC_OscConfig+0xb0>
 8015f0c:	4b69      	ldr	r3, [pc, #420]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	4a68      	ldr	r2, [pc, #416]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015f16:	6013      	str	r3, [r2, #0]
 8015f18:	4b66      	ldr	r3, [pc, #408]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	4a65      	ldr	r2, [pc, #404]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	685b      	ldr	r3, [r3, #4]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d013      	beq.n	8015f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015f2c:	f7ff fc16 	bl	801575c <HAL_GetTick>
 8015f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015f32:	e008      	b.n	8015f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015f34:	f7ff fc12 	bl	801575c <HAL_GetTick>
 8015f38:	4602      	mov	r2, r0
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	1ad3      	subs	r3, r2, r3
 8015f3e:	2b64      	cmp	r3, #100	; 0x64
 8015f40:	d901      	bls.n	8015f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015f42:	2303      	movs	r3, #3
 8015f44:	e207      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015f46:	4b5b      	ldr	r3, [pc, #364]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d0f0      	beq.n	8015f34 <HAL_RCC_OscConfig+0xc0>
 8015f52:	e014      	b.n	8015f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015f54:	f7ff fc02 	bl	801575c <HAL_GetTick>
 8015f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015f5a:	e008      	b.n	8015f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015f5c:	f7ff fbfe 	bl	801575c <HAL_GetTick>
 8015f60:	4602      	mov	r2, r0
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	1ad3      	subs	r3, r2, r3
 8015f66:	2b64      	cmp	r3, #100	; 0x64
 8015f68:	d901      	bls.n	8015f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015f6a:	2303      	movs	r3, #3
 8015f6c:	e1f3      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015f6e:	4b51      	ldr	r3, [pc, #324]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d1f0      	bne.n	8015f5c <HAL_RCC_OscConfig+0xe8>
 8015f7a:	e000      	b.n	8015f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	f003 0302 	and.w	r3, r3, #2
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d063      	beq.n	8016052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015f8a:	4b4a      	ldr	r3, [pc, #296]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f8c:	689b      	ldr	r3, [r3, #8]
 8015f8e:	f003 030c 	and.w	r3, r3, #12
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d00b      	beq.n	8015fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015f96:	4b47      	ldr	r3, [pc, #284]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015f9e:	2b08      	cmp	r3, #8
 8015fa0:	d11c      	bne.n	8015fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015fa2:	4b44      	ldr	r3, [pc, #272]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d116      	bne.n	8015fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015fae:	4b41      	ldr	r3, [pc, #260]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	f003 0302 	and.w	r3, r3, #2
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d005      	beq.n	8015fc6 <HAL_RCC_OscConfig+0x152>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	2b01      	cmp	r3, #1
 8015fc0:	d001      	beq.n	8015fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	e1c7      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015fc6:	4b3b      	ldr	r3, [pc, #236]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	691b      	ldr	r3, [r3, #16]
 8015fd2:	00db      	lsls	r3, r3, #3
 8015fd4:	4937      	ldr	r1, [pc, #220]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8015fd6:	4313      	orrs	r3, r2
 8015fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015fda:	e03a      	b.n	8016052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	68db      	ldr	r3, [r3, #12]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d020      	beq.n	8016026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015fe4:	4b34      	ldr	r3, [pc, #208]	; (80160b8 <HAL_RCC_OscConfig+0x244>)
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015fea:	f7ff fbb7 	bl	801575c <HAL_GetTick>
 8015fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015ff0:	e008      	b.n	8016004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015ff2:	f7ff fbb3 	bl	801575c <HAL_GetTick>
 8015ff6:	4602      	mov	r2, r0
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	1ad3      	subs	r3, r2, r3
 8015ffc:	2b02      	cmp	r3, #2
 8015ffe:	d901      	bls.n	8016004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8016000:	2303      	movs	r3, #3
 8016002:	e1a8      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016004:	4b2b      	ldr	r3, [pc, #172]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f003 0302 	and.w	r3, r3, #2
 801600c:	2b00      	cmp	r3, #0
 801600e:	d0f0      	beq.n	8015ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016010:	4b28      	ldr	r3, [pc, #160]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	691b      	ldr	r3, [r3, #16]
 801601c:	00db      	lsls	r3, r3, #3
 801601e:	4925      	ldr	r1, [pc, #148]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8016020:	4313      	orrs	r3, r2
 8016022:	600b      	str	r3, [r1, #0]
 8016024:	e015      	b.n	8016052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016026:	4b24      	ldr	r3, [pc, #144]	; (80160b8 <HAL_RCC_OscConfig+0x244>)
 8016028:	2200      	movs	r2, #0
 801602a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801602c:	f7ff fb96 	bl	801575c <HAL_GetTick>
 8016030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016032:	e008      	b.n	8016046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016034:	f7ff fb92 	bl	801575c <HAL_GetTick>
 8016038:	4602      	mov	r2, r0
 801603a:	693b      	ldr	r3, [r7, #16]
 801603c:	1ad3      	subs	r3, r2, r3
 801603e:	2b02      	cmp	r3, #2
 8016040:	d901      	bls.n	8016046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8016042:	2303      	movs	r3, #3
 8016044:	e187      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016046:	4b1b      	ldr	r3, [pc, #108]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	f003 0302 	and.w	r3, r3, #2
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1f0      	bne.n	8016034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	f003 0308 	and.w	r3, r3, #8
 801605a:	2b00      	cmp	r3, #0
 801605c:	d036      	beq.n	80160cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	695b      	ldr	r3, [r3, #20]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d016      	beq.n	8016094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016066:	4b15      	ldr	r3, [pc, #84]	; (80160bc <HAL_RCC_OscConfig+0x248>)
 8016068:	2201      	movs	r2, #1
 801606a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801606c:	f7ff fb76 	bl	801575c <HAL_GetTick>
 8016070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016072:	e008      	b.n	8016086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016074:	f7ff fb72 	bl	801575c <HAL_GetTick>
 8016078:	4602      	mov	r2, r0
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	1ad3      	subs	r3, r2, r3
 801607e:	2b02      	cmp	r3, #2
 8016080:	d901      	bls.n	8016086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8016082:	2303      	movs	r3, #3
 8016084:	e167      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016086:	4b0b      	ldr	r3, [pc, #44]	; (80160b4 <HAL_RCC_OscConfig+0x240>)
 8016088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801608a:	f003 0302 	and.w	r3, r3, #2
 801608e:	2b00      	cmp	r3, #0
 8016090:	d0f0      	beq.n	8016074 <HAL_RCC_OscConfig+0x200>
 8016092:	e01b      	b.n	80160cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016094:	4b09      	ldr	r3, [pc, #36]	; (80160bc <HAL_RCC_OscConfig+0x248>)
 8016096:	2200      	movs	r2, #0
 8016098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801609a:	f7ff fb5f 	bl	801575c <HAL_GetTick>
 801609e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80160a0:	e00e      	b.n	80160c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80160a2:	f7ff fb5b 	bl	801575c <HAL_GetTick>
 80160a6:	4602      	mov	r2, r0
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	1ad3      	subs	r3, r2, r3
 80160ac:	2b02      	cmp	r3, #2
 80160ae:	d907      	bls.n	80160c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80160b0:	2303      	movs	r3, #3
 80160b2:	e150      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
 80160b4:	40023800 	.word	0x40023800
 80160b8:	42470000 	.word	0x42470000
 80160bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80160c0:	4b88      	ldr	r3, [pc, #544]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80160c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160c4:	f003 0302 	and.w	r3, r3, #2
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d1ea      	bne.n	80160a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	f003 0304 	and.w	r3, r3, #4
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	f000 8097 	beq.w	8016208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80160da:	2300      	movs	r3, #0
 80160dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80160de:	4b81      	ldr	r3, [pc, #516]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80160e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d10f      	bne.n	801610a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80160ea:	2300      	movs	r3, #0
 80160ec:	60bb      	str	r3, [r7, #8]
 80160ee:	4b7d      	ldr	r3, [pc, #500]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80160f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160f2:	4a7c      	ldr	r2, [pc, #496]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80160f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80160f8:	6413      	str	r3, [r2, #64]	; 0x40
 80160fa:	4b7a      	ldr	r3, [pc, #488]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80160fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016102:	60bb      	str	r3, [r7, #8]
 8016104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016106:	2301      	movs	r3, #1
 8016108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801610a:	4b77      	ldr	r3, [pc, #476]	; (80162e8 <HAL_RCC_OscConfig+0x474>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016112:	2b00      	cmp	r3, #0
 8016114:	d118      	bne.n	8016148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016116:	4b74      	ldr	r3, [pc, #464]	; (80162e8 <HAL_RCC_OscConfig+0x474>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	4a73      	ldr	r2, [pc, #460]	; (80162e8 <HAL_RCC_OscConfig+0x474>)
 801611c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016122:	f7ff fb1b 	bl	801575c <HAL_GetTick>
 8016126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016128:	e008      	b.n	801613c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801612a:	f7ff fb17 	bl	801575c <HAL_GetTick>
 801612e:	4602      	mov	r2, r0
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	1ad3      	subs	r3, r2, r3
 8016134:	2b02      	cmp	r3, #2
 8016136:	d901      	bls.n	801613c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8016138:	2303      	movs	r3, #3
 801613a:	e10c      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801613c:	4b6a      	ldr	r3, [pc, #424]	; (80162e8 <HAL_RCC_OscConfig+0x474>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016144:	2b00      	cmp	r3, #0
 8016146:	d0f0      	beq.n	801612a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	689b      	ldr	r3, [r3, #8]
 801614c:	2b01      	cmp	r3, #1
 801614e:	d106      	bne.n	801615e <HAL_RCC_OscConfig+0x2ea>
 8016150:	4b64      	ldr	r3, [pc, #400]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016154:	4a63      	ldr	r2, [pc, #396]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016156:	f043 0301 	orr.w	r3, r3, #1
 801615a:	6713      	str	r3, [r2, #112]	; 0x70
 801615c:	e01c      	b.n	8016198 <HAL_RCC_OscConfig+0x324>
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	689b      	ldr	r3, [r3, #8]
 8016162:	2b05      	cmp	r3, #5
 8016164:	d10c      	bne.n	8016180 <HAL_RCC_OscConfig+0x30c>
 8016166:	4b5f      	ldr	r3, [pc, #380]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801616a:	4a5e      	ldr	r2, [pc, #376]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 801616c:	f043 0304 	orr.w	r3, r3, #4
 8016170:	6713      	str	r3, [r2, #112]	; 0x70
 8016172:	4b5c      	ldr	r3, [pc, #368]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016176:	4a5b      	ldr	r2, [pc, #364]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016178:	f043 0301 	orr.w	r3, r3, #1
 801617c:	6713      	str	r3, [r2, #112]	; 0x70
 801617e:	e00b      	b.n	8016198 <HAL_RCC_OscConfig+0x324>
 8016180:	4b58      	ldr	r3, [pc, #352]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016184:	4a57      	ldr	r2, [pc, #348]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016186:	f023 0301 	bic.w	r3, r3, #1
 801618a:	6713      	str	r3, [r2, #112]	; 0x70
 801618c:	4b55      	ldr	r3, [pc, #340]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 801618e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016190:	4a54      	ldr	r2, [pc, #336]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016192:	f023 0304 	bic.w	r3, r3, #4
 8016196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	689b      	ldr	r3, [r3, #8]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d015      	beq.n	80161cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80161a0:	f7ff fadc 	bl	801575c <HAL_GetTick>
 80161a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80161a6:	e00a      	b.n	80161be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80161a8:	f7ff fad8 	bl	801575c <HAL_GetTick>
 80161ac:	4602      	mov	r2, r0
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	1ad3      	subs	r3, r2, r3
 80161b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80161b6:	4293      	cmp	r3, r2
 80161b8:	d901      	bls.n	80161be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80161ba:	2303      	movs	r3, #3
 80161bc:	e0cb      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80161be:	4b49      	ldr	r3, [pc, #292]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80161c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161c2:	f003 0302 	and.w	r3, r3, #2
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d0ee      	beq.n	80161a8 <HAL_RCC_OscConfig+0x334>
 80161ca:	e014      	b.n	80161f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80161cc:	f7ff fac6 	bl	801575c <HAL_GetTick>
 80161d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80161d2:	e00a      	b.n	80161ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80161d4:	f7ff fac2 	bl	801575c <HAL_GetTick>
 80161d8:	4602      	mov	r2, r0
 80161da:	693b      	ldr	r3, [r7, #16]
 80161dc:	1ad3      	subs	r3, r2, r3
 80161de:	f241 3288 	movw	r2, #5000	; 0x1388
 80161e2:	4293      	cmp	r3, r2
 80161e4:	d901      	bls.n	80161ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80161e6:	2303      	movs	r3, #3
 80161e8:	e0b5      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80161ea:	4b3e      	ldr	r3, [pc, #248]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80161ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161ee:	f003 0302 	and.w	r3, r3, #2
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d1ee      	bne.n	80161d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80161f6:	7dfb      	ldrb	r3, [r7, #23]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d105      	bne.n	8016208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80161fc:	4b39      	ldr	r3, [pc, #228]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80161fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016200:	4a38      	ldr	r2, [pc, #224]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	699b      	ldr	r3, [r3, #24]
 801620c:	2b00      	cmp	r3, #0
 801620e:	f000 80a1 	beq.w	8016354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8016212:	4b34      	ldr	r3, [pc, #208]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016214:	689b      	ldr	r3, [r3, #8]
 8016216:	f003 030c 	and.w	r3, r3, #12
 801621a:	2b08      	cmp	r3, #8
 801621c:	d05c      	beq.n	80162d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	699b      	ldr	r3, [r3, #24]
 8016222:	2b02      	cmp	r3, #2
 8016224:	d141      	bne.n	80162aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016226:	4b31      	ldr	r3, [pc, #196]	; (80162ec <HAL_RCC_OscConfig+0x478>)
 8016228:	2200      	movs	r2, #0
 801622a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801622c:	f7ff fa96 	bl	801575c <HAL_GetTick>
 8016230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016232:	e008      	b.n	8016246 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016234:	f7ff fa92 	bl	801575c <HAL_GetTick>
 8016238:	4602      	mov	r2, r0
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	1ad3      	subs	r3, r2, r3
 801623e:	2b02      	cmp	r3, #2
 8016240:	d901      	bls.n	8016246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8016242:	2303      	movs	r3, #3
 8016244:	e087      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016246:	4b27      	ldr	r3, [pc, #156]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801624e:	2b00      	cmp	r3, #0
 8016250:	d1f0      	bne.n	8016234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	69da      	ldr	r2, [r3, #28]
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	6a1b      	ldr	r3, [r3, #32]
 801625a:	431a      	orrs	r2, r3
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016260:	019b      	lsls	r3, r3, #6
 8016262:	431a      	orrs	r2, r3
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016268:	085b      	lsrs	r3, r3, #1
 801626a:	3b01      	subs	r3, #1
 801626c:	041b      	lsls	r3, r3, #16
 801626e:	431a      	orrs	r2, r3
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016274:	061b      	lsls	r3, r3, #24
 8016276:	491b      	ldr	r1, [pc, #108]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 8016278:	4313      	orrs	r3, r2
 801627a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801627c:	4b1b      	ldr	r3, [pc, #108]	; (80162ec <HAL_RCC_OscConfig+0x478>)
 801627e:	2201      	movs	r2, #1
 8016280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016282:	f7ff fa6b 	bl	801575c <HAL_GetTick>
 8016286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016288:	e008      	b.n	801629c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801628a:	f7ff fa67 	bl	801575c <HAL_GetTick>
 801628e:	4602      	mov	r2, r0
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	1ad3      	subs	r3, r2, r3
 8016294:	2b02      	cmp	r3, #2
 8016296:	d901      	bls.n	801629c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8016298:	2303      	movs	r3, #3
 801629a:	e05c      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801629c:	4b11      	ldr	r3, [pc, #68]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d0f0      	beq.n	801628a <HAL_RCC_OscConfig+0x416>
 80162a8:	e054      	b.n	8016354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80162aa:	4b10      	ldr	r3, [pc, #64]	; (80162ec <HAL_RCC_OscConfig+0x478>)
 80162ac:	2200      	movs	r2, #0
 80162ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80162b0:	f7ff fa54 	bl	801575c <HAL_GetTick>
 80162b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80162b6:	e008      	b.n	80162ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80162b8:	f7ff fa50 	bl	801575c <HAL_GetTick>
 80162bc:	4602      	mov	r2, r0
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	1ad3      	subs	r3, r2, r3
 80162c2:	2b02      	cmp	r3, #2
 80162c4:	d901      	bls.n	80162ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80162c6:	2303      	movs	r3, #3
 80162c8:	e045      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80162ca:	4b06      	ldr	r3, [pc, #24]	; (80162e4 <HAL_RCC_OscConfig+0x470>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d1f0      	bne.n	80162b8 <HAL_RCC_OscConfig+0x444>
 80162d6:	e03d      	b.n	8016354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	699b      	ldr	r3, [r3, #24]
 80162dc:	2b01      	cmp	r3, #1
 80162de:	d107      	bne.n	80162f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80162e0:	2301      	movs	r3, #1
 80162e2:	e038      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
 80162e4:	40023800 	.word	0x40023800
 80162e8:	40007000 	.word	0x40007000
 80162ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80162f0:	4b1b      	ldr	r3, [pc, #108]	; (8016360 <HAL_RCC_OscConfig+0x4ec>)
 80162f2:	685b      	ldr	r3, [r3, #4]
 80162f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	699b      	ldr	r3, [r3, #24]
 80162fa:	2b01      	cmp	r3, #1
 80162fc:	d028      	beq.n	8016350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016308:	429a      	cmp	r2, r3
 801630a:	d121      	bne.n	8016350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016316:	429a      	cmp	r2, r3
 8016318:	d11a      	bne.n	8016350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801631a:	68fa      	ldr	r2, [r7, #12]
 801631c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016320:	4013      	ands	r3, r2
 8016322:	687a      	ldr	r2, [r7, #4]
 8016324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016328:	4293      	cmp	r3, r2
 801632a:	d111      	bne.n	8016350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016336:	085b      	lsrs	r3, r3, #1
 8016338:	3b01      	subs	r3, #1
 801633a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801633c:	429a      	cmp	r2, r3
 801633e:	d107      	bne.n	8016350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801634a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801634c:	429a      	cmp	r2, r3
 801634e:	d001      	beq.n	8016354 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8016350:	2301      	movs	r3, #1
 8016352:	e000      	b.n	8016356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8016354:	2300      	movs	r3, #0
}
 8016356:	4618      	mov	r0, r3
 8016358:	3718      	adds	r7, #24
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
 801635e:	bf00      	nop
 8016360:	40023800 	.word	0x40023800

08016364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b084      	sub	sp, #16
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d101      	bne.n	8016378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016374:	2301      	movs	r3, #1
 8016376:	e0cc      	b.n	8016512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016378:	4b68      	ldr	r3, [pc, #416]	; (801651c <HAL_RCC_ClockConfig+0x1b8>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	f003 0307 	and.w	r3, r3, #7
 8016380:	683a      	ldr	r2, [r7, #0]
 8016382:	429a      	cmp	r2, r3
 8016384:	d90c      	bls.n	80163a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016386:	4b65      	ldr	r3, [pc, #404]	; (801651c <HAL_RCC_ClockConfig+0x1b8>)
 8016388:	683a      	ldr	r2, [r7, #0]
 801638a:	b2d2      	uxtb	r2, r2
 801638c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801638e:	4b63      	ldr	r3, [pc, #396]	; (801651c <HAL_RCC_ClockConfig+0x1b8>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	f003 0307 	and.w	r3, r3, #7
 8016396:	683a      	ldr	r2, [r7, #0]
 8016398:	429a      	cmp	r2, r3
 801639a:	d001      	beq.n	80163a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801639c:	2301      	movs	r3, #1
 801639e:	e0b8      	b.n	8016512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	f003 0302 	and.w	r3, r3, #2
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d020      	beq.n	80163ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	f003 0304 	and.w	r3, r3, #4
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d005      	beq.n	80163c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80163b8:	4b59      	ldr	r3, [pc, #356]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80163ba:	689b      	ldr	r3, [r3, #8]
 80163bc:	4a58      	ldr	r2, [pc, #352]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80163be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80163c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f003 0308 	and.w	r3, r3, #8
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d005      	beq.n	80163dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80163d0:	4b53      	ldr	r3, [pc, #332]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80163d2:	689b      	ldr	r3, [r3, #8]
 80163d4:	4a52      	ldr	r2, [pc, #328]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80163d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80163da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80163dc:	4b50      	ldr	r3, [pc, #320]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80163de:	689b      	ldr	r3, [r3, #8]
 80163e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	689b      	ldr	r3, [r3, #8]
 80163e8:	494d      	ldr	r1, [pc, #308]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80163ea:	4313      	orrs	r3, r2
 80163ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	f003 0301 	and.w	r3, r3, #1
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d044      	beq.n	8016484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	685b      	ldr	r3, [r3, #4]
 80163fe:	2b01      	cmp	r3, #1
 8016400:	d107      	bne.n	8016412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016402:	4b47      	ldr	r3, [pc, #284]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801640a:	2b00      	cmp	r3, #0
 801640c:	d119      	bne.n	8016442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801640e:	2301      	movs	r3, #1
 8016410:	e07f      	b.n	8016512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	2b02      	cmp	r3, #2
 8016418:	d003      	beq.n	8016422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801641e:	2b03      	cmp	r3, #3
 8016420:	d107      	bne.n	8016432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016422:	4b3f      	ldr	r3, [pc, #252]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801642a:	2b00      	cmp	r3, #0
 801642c:	d109      	bne.n	8016442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801642e:	2301      	movs	r3, #1
 8016430:	e06f      	b.n	8016512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016432:	4b3b      	ldr	r3, [pc, #236]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	f003 0302 	and.w	r3, r3, #2
 801643a:	2b00      	cmp	r3, #0
 801643c:	d101      	bne.n	8016442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801643e:	2301      	movs	r3, #1
 8016440:	e067      	b.n	8016512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016442:	4b37      	ldr	r3, [pc, #220]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 8016444:	689b      	ldr	r3, [r3, #8]
 8016446:	f023 0203 	bic.w	r2, r3, #3
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	4934      	ldr	r1, [pc, #208]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 8016450:	4313      	orrs	r3, r2
 8016452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016454:	f7ff f982 	bl	801575c <HAL_GetTick>
 8016458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801645a:	e00a      	b.n	8016472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801645c:	f7ff f97e 	bl	801575c <HAL_GetTick>
 8016460:	4602      	mov	r2, r0
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	1ad3      	subs	r3, r2, r3
 8016466:	f241 3288 	movw	r2, #5000	; 0x1388
 801646a:	4293      	cmp	r3, r2
 801646c:	d901      	bls.n	8016472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801646e:	2303      	movs	r3, #3
 8016470:	e04f      	b.n	8016512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016472:	4b2b      	ldr	r3, [pc, #172]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 8016474:	689b      	ldr	r3, [r3, #8]
 8016476:	f003 020c 	and.w	r2, r3, #12
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	009b      	lsls	r3, r3, #2
 8016480:	429a      	cmp	r2, r3
 8016482:	d1eb      	bne.n	801645c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8016484:	4b25      	ldr	r3, [pc, #148]	; (801651c <HAL_RCC_ClockConfig+0x1b8>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	f003 0307 	and.w	r3, r3, #7
 801648c:	683a      	ldr	r2, [r7, #0]
 801648e:	429a      	cmp	r2, r3
 8016490:	d20c      	bcs.n	80164ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016492:	4b22      	ldr	r3, [pc, #136]	; (801651c <HAL_RCC_ClockConfig+0x1b8>)
 8016494:	683a      	ldr	r2, [r7, #0]
 8016496:	b2d2      	uxtb	r2, r2
 8016498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801649a:	4b20      	ldr	r3, [pc, #128]	; (801651c <HAL_RCC_ClockConfig+0x1b8>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	f003 0307 	and.w	r3, r3, #7
 80164a2:	683a      	ldr	r2, [r7, #0]
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d001      	beq.n	80164ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80164a8:	2301      	movs	r3, #1
 80164aa:	e032      	b.n	8016512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	f003 0304 	and.w	r3, r3, #4
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d008      	beq.n	80164ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80164b8:	4b19      	ldr	r3, [pc, #100]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80164ba:	689b      	ldr	r3, [r3, #8]
 80164bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	68db      	ldr	r3, [r3, #12]
 80164c4:	4916      	ldr	r1, [pc, #88]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80164c6:	4313      	orrs	r3, r2
 80164c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	f003 0308 	and.w	r3, r3, #8
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d009      	beq.n	80164ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80164d6:	4b12      	ldr	r3, [pc, #72]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80164d8:	689b      	ldr	r3, [r3, #8]
 80164da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	691b      	ldr	r3, [r3, #16]
 80164e2:	00db      	lsls	r3, r3, #3
 80164e4:	490e      	ldr	r1, [pc, #56]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80164e6:	4313      	orrs	r3, r2
 80164e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80164ea:	f000 f821 	bl	8016530 <HAL_RCC_GetSysClockFreq>
 80164ee:	4602      	mov	r2, r0
 80164f0:	4b0b      	ldr	r3, [pc, #44]	; (8016520 <HAL_RCC_ClockConfig+0x1bc>)
 80164f2:	689b      	ldr	r3, [r3, #8]
 80164f4:	091b      	lsrs	r3, r3, #4
 80164f6:	f003 030f 	and.w	r3, r3, #15
 80164fa:	490a      	ldr	r1, [pc, #40]	; (8016524 <HAL_RCC_ClockConfig+0x1c0>)
 80164fc:	5ccb      	ldrb	r3, [r1, r3]
 80164fe:	fa22 f303 	lsr.w	r3, r2, r3
 8016502:	4a09      	ldr	r2, [pc, #36]	; (8016528 <HAL_RCC_ClockConfig+0x1c4>)
 8016504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8016506:	4b09      	ldr	r3, [pc, #36]	; (801652c <HAL_RCC_ClockConfig+0x1c8>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4618      	mov	r0, r3
 801650c:	f7fc face 	bl	8012aac <HAL_InitTick>

  return HAL_OK;
 8016510:	2300      	movs	r3, #0
}
 8016512:	4618      	mov	r0, r3
 8016514:	3710      	adds	r7, #16
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	40023c00 	.word	0x40023c00
 8016520:	40023800 	.word	0x40023800
 8016524:	0803426c 	.word	0x0803426c
 8016528:	20000000 	.word	0x20000000
 801652c:	200000bc 	.word	0x200000bc

08016530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016534:	b094      	sub	sp, #80	; 0x50
 8016536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8016538:	2300      	movs	r3, #0
 801653a:	647b      	str	r3, [r7, #68]	; 0x44
 801653c:	2300      	movs	r3, #0
 801653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016540:	2300      	movs	r3, #0
 8016542:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8016544:	2300      	movs	r3, #0
 8016546:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016548:	4b79      	ldr	r3, [pc, #484]	; (8016730 <HAL_RCC_GetSysClockFreq+0x200>)
 801654a:	689b      	ldr	r3, [r3, #8]
 801654c:	f003 030c 	and.w	r3, r3, #12
 8016550:	2b08      	cmp	r3, #8
 8016552:	d00d      	beq.n	8016570 <HAL_RCC_GetSysClockFreq+0x40>
 8016554:	2b08      	cmp	r3, #8
 8016556:	f200 80e1 	bhi.w	801671c <HAL_RCC_GetSysClockFreq+0x1ec>
 801655a:	2b00      	cmp	r3, #0
 801655c:	d002      	beq.n	8016564 <HAL_RCC_GetSysClockFreq+0x34>
 801655e:	2b04      	cmp	r3, #4
 8016560:	d003      	beq.n	801656a <HAL_RCC_GetSysClockFreq+0x3a>
 8016562:	e0db      	b.n	801671c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8016564:	4b73      	ldr	r3, [pc, #460]	; (8016734 <HAL_RCC_GetSysClockFreq+0x204>)
 8016566:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8016568:	e0db      	b.n	8016722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801656a:	4b73      	ldr	r3, [pc, #460]	; (8016738 <HAL_RCC_GetSysClockFreq+0x208>)
 801656c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801656e:	e0d8      	b.n	8016722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016570:	4b6f      	ldr	r3, [pc, #444]	; (8016730 <HAL_RCC_GetSysClockFreq+0x200>)
 8016572:	685b      	ldr	r3, [r3, #4]
 8016574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016578:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801657a:	4b6d      	ldr	r3, [pc, #436]	; (8016730 <HAL_RCC_GetSysClockFreq+0x200>)
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016582:	2b00      	cmp	r3, #0
 8016584:	d063      	beq.n	801664e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016586:	4b6a      	ldr	r3, [pc, #424]	; (8016730 <HAL_RCC_GetSysClockFreq+0x200>)
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	099b      	lsrs	r3, r3, #6
 801658c:	2200      	movs	r2, #0
 801658e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016590:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016598:	633b      	str	r3, [r7, #48]	; 0x30
 801659a:	2300      	movs	r3, #0
 801659c:	637b      	str	r3, [r7, #52]	; 0x34
 801659e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80165a2:	4622      	mov	r2, r4
 80165a4:	462b      	mov	r3, r5
 80165a6:	f04f 0000 	mov.w	r0, #0
 80165aa:	f04f 0100 	mov.w	r1, #0
 80165ae:	0159      	lsls	r1, r3, #5
 80165b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80165b4:	0150      	lsls	r0, r2, #5
 80165b6:	4602      	mov	r2, r0
 80165b8:	460b      	mov	r3, r1
 80165ba:	4621      	mov	r1, r4
 80165bc:	1a51      	subs	r1, r2, r1
 80165be:	6139      	str	r1, [r7, #16]
 80165c0:	4629      	mov	r1, r5
 80165c2:	eb63 0301 	sbc.w	r3, r3, r1
 80165c6:	617b      	str	r3, [r7, #20]
 80165c8:	f04f 0200 	mov.w	r2, #0
 80165cc:	f04f 0300 	mov.w	r3, #0
 80165d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80165d4:	4659      	mov	r1, fp
 80165d6:	018b      	lsls	r3, r1, #6
 80165d8:	4651      	mov	r1, sl
 80165da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80165de:	4651      	mov	r1, sl
 80165e0:	018a      	lsls	r2, r1, #6
 80165e2:	4651      	mov	r1, sl
 80165e4:	ebb2 0801 	subs.w	r8, r2, r1
 80165e8:	4659      	mov	r1, fp
 80165ea:	eb63 0901 	sbc.w	r9, r3, r1
 80165ee:	f04f 0200 	mov.w	r2, #0
 80165f2:	f04f 0300 	mov.w	r3, #0
 80165f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80165fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80165fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016602:	4690      	mov	r8, r2
 8016604:	4699      	mov	r9, r3
 8016606:	4623      	mov	r3, r4
 8016608:	eb18 0303 	adds.w	r3, r8, r3
 801660c:	60bb      	str	r3, [r7, #8]
 801660e:	462b      	mov	r3, r5
 8016610:	eb49 0303 	adc.w	r3, r9, r3
 8016614:	60fb      	str	r3, [r7, #12]
 8016616:	f04f 0200 	mov.w	r2, #0
 801661a:	f04f 0300 	mov.w	r3, #0
 801661e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016622:	4629      	mov	r1, r5
 8016624:	024b      	lsls	r3, r1, #9
 8016626:	4621      	mov	r1, r4
 8016628:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801662c:	4621      	mov	r1, r4
 801662e:	024a      	lsls	r2, r1, #9
 8016630:	4610      	mov	r0, r2
 8016632:	4619      	mov	r1, r3
 8016634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016636:	2200      	movs	r2, #0
 8016638:	62bb      	str	r3, [r7, #40]	; 0x28
 801663a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801663c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016640:	f7fa fb3a 	bl	8010cb8 <__aeabi_uldivmod>
 8016644:	4602      	mov	r2, r0
 8016646:	460b      	mov	r3, r1
 8016648:	4613      	mov	r3, r2
 801664a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801664c:	e058      	b.n	8016700 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801664e:	4b38      	ldr	r3, [pc, #224]	; (8016730 <HAL_RCC_GetSysClockFreq+0x200>)
 8016650:	685b      	ldr	r3, [r3, #4]
 8016652:	099b      	lsrs	r3, r3, #6
 8016654:	2200      	movs	r2, #0
 8016656:	4618      	mov	r0, r3
 8016658:	4611      	mov	r1, r2
 801665a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801665e:	623b      	str	r3, [r7, #32]
 8016660:	2300      	movs	r3, #0
 8016662:	627b      	str	r3, [r7, #36]	; 0x24
 8016664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8016668:	4642      	mov	r2, r8
 801666a:	464b      	mov	r3, r9
 801666c:	f04f 0000 	mov.w	r0, #0
 8016670:	f04f 0100 	mov.w	r1, #0
 8016674:	0159      	lsls	r1, r3, #5
 8016676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801667a:	0150      	lsls	r0, r2, #5
 801667c:	4602      	mov	r2, r0
 801667e:	460b      	mov	r3, r1
 8016680:	4641      	mov	r1, r8
 8016682:	ebb2 0a01 	subs.w	sl, r2, r1
 8016686:	4649      	mov	r1, r9
 8016688:	eb63 0b01 	sbc.w	fp, r3, r1
 801668c:	f04f 0200 	mov.w	r2, #0
 8016690:	f04f 0300 	mov.w	r3, #0
 8016694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8016698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801669c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80166a0:	ebb2 040a 	subs.w	r4, r2, sl
 80166a4:	eb63 050b 	sbc.w	r5, r3, fp
 80166a8:	f04f 0200 	mov.w	r2, #0
 80166ac:	f04f 0300 	mov.w	r3, #0
 80166b0:	00eb      	lsls	r3, r5, #3
 80166b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80166b6:	00e2      	lsls	r2, r4, #3
 80166b8:	4614      	mov	r4, r2
 80166ba:	461d      	mov	r5, r3
 80166bc:	4643      	mov	r3, r8
 80166be:	18e3      	adds	r3, r4, r3
 80166c0:	603b      	str	r3, [r7, #0]
 80166c2:	464b      	mov	r3, r9
 80166c4:	eb45 0303 	adc.w	r3, r5, r3
 80166c8:	607b      	str	r3, [r7, #4]
 80166ca:	f04f 0200 	mov.w	r2, #0
 80166ce:	f04f 0300 	mov.w	r3, #0
 80166d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80166d6:	4629      	mov	r1, r5
 80166d8:	028b      	lsls	r3, r1, #10
 80166da:	4621      	mov	r1, r4
 80166dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80166e0:	4621      	mov	r1, r4
 80166e2:	028a      	lsls	r2, r1, #10
 80166e4:	4610      	mov	r0, r2
 80166e6:	4619      	mov	r1, r3
 80166e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166ea:	2200      	movs	r2, #0
 80166ec:	61bb      	str	r3, [r7, #24]
 80166ee:	61fa      	str	r2, [r7, #28]
 80166f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80166f4:	f7fa fae0 	bl	8010cb8 <__aeabi_uldivmod>
 80166f8:	4602      	mov	r2, r0
 80166fa:	460b      	mov	r3, r1
 80166fc:	4613      	mov	r3, r2
 80166fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016700:	4b0b      	ldr	r3, [pc, #44]	; (8016730 <HAL_RCC_GetSysClockFreq+0x200>)
 8016702:	685b      	ldr	r3, [r3, #4]
 8016704:	0c1b      	lsrs	r3, r3, #16
 8016706:	f003 0303 	and.w	r3, r3, #3
 801670a:	3301      	adds	r3, #1
 801670c:	005b      	lsls	r3, r3, #1
 801670e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8016710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016714:	fbb2 f3f3 	udiv	r3, r2, r3
 8016718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801671a:	e002      	b.n	8016722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801671c:	4b05      	ldr	r3, [pc, #20]	; (8016734 <HAL_RCC_GetSysClockFreq+0x204>)
 801671e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8016720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8016724:	4618      	mov	r0, r3
 8016726:	3750      	adds	r7, #80	; 0x50
 8016728:	46bd      	mov	sp, r7
 801672a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801672e:	bf00      	nop
 8016730:	40023800 	.word	0x40023800
 8016734:	00f42400 	.word	0x00f42400
 8016738:	007a1200 	.word	0x007a1200

0801673c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801673c:	b480      	push	{r7}
 801673e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016740:	4b03      	ldr	r3, [pc, #12]	; (8016750 <HAL_RCC_GetHCLKFreq+0x14>)
 8016742:	681b      	ldr	r3, [r3, #0]
}
 8016744:	4618      	mov	r0, r3
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop
 8016750:	20000000 	.word	0x20000000

08016754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8016758:	f7ff fff0 	bl	801673c <HAL_RCC_GetHCLKFreq>
 801675c:	4602      	mov	r2, r0
 801675e:	4b05      	ldr	r3, [pc, #20]	; (8016774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8016760:	689b      	ldr	r3, [r3, #8]
 8016762:	0a9b      	lsrs	r3, r3, #10
 8016764:	f003 0307 	and.w	r3, r3, #7
 8016768:	4903      	ldr	r1, [pc, #12]	; (8016778 <HAL_RCC_GetPCLK1Freq+0x24>)
 801676a:	5ccb      	ldrb	r3, [r1, r3]
 801676c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016770:	4618      	mov	r0, r3
 8016772:	bd80      	pop	{r7, pc}
 8016774:	40023800 	.word	0x40023800
 8016778:	0803427c 	.word	0x0803427c

0801677c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8016780:	f7ff ffdc 	bl	801673c <HAL_RCC_GetHCLKFreq>
 8016784:	4602      	mov	r2, r0
 8016786:	4b05      	ldr	r3, [pc, #20]	; (801679c <HAL_RCC_GetPCLK2Freq+0x20>)
 8016788:	689b      	ldr	r3, [r3, #8]
 801678a:	0b5b      	lsrs	r3, r3, #13
 801678c:	f003 0307 	and.w	r3, r3, #7
 8016790:	4903      	ldr	r1, [pc, #12]	; (80167a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016792:	5ccb      	ldrb	r3, [r1, r3]
 8016794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016798:	4618      	mov	r0, r3
 801679a:	bd80      	pop	{r7, pc}
 801679c:	40023800 	.word	0x40023800
 80167a0:	0803427c 	.word	0x0803427c

080167a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	220f      	movs	r2, #15
 80167b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80167b4:	4b12      	ldr	r3, [pc, #72]	; (8016800 <HAL_RCC_GetClockConfig+0x5c>)
 80167b6:	689b      	ldr	r3, [r3, #8]
 80167b8:	f003 0203 	and.w	r2, r3, #3
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80167c0:	4b0f      	ldr	r3, [pc, #60]	; (8016800 <HAL_RCC_GetClockConfig+0x5c>)
 80167c2:	689b      	ldr	r3, [r3, #8]
 80167c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80167cc:	4b0c      	ldr	r3, [pc, #48]	; (8016800 <HAL_RCC_GetClockConfig+0x5c>)
 80167ce:	689b      	ldr	r3, [r3, #8]
 80167d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80167d8:	4b09      	ldr	r3, [pc, #36]	; (8016800 <HAL_RCC_GetClockConfig+0x5c>)
 80167da:	689b      	ldr	r3, [r3, #8]
 80167dc:	08db      	lsrs	r3, r3, #3
 80167de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80167e6:	4b07      	ldr	r3, [pc, #28]	; (8016804 <HAL_RCC_GetClockConfig+0x60>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	f003 0207 	and.w	r2, r3, #7
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	601a      	str	r2, [r3, #0]
}
 80167f2:	bf00      	nop
 80167f4:	370c      	adds	r7, #12
 80167f6:	46bd      	mov	sp, r7
 80167f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fc:	4770      	bx	lr
 80167fe:	bf00      	nop
 8016800:	40023800 	.word	0x40023800
 8016804:	40023c00 	.word	0x40023c00

08016808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d101      	bne.n	801681a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8016816:	2301      	movs	r3, #1
 8016818:	e07b      	b.n	8016912 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801681e:	2b00      	cmp	r3, #0
 8016820:	d108      	bne.n	8016834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801682a:	d009      	beq.n	8016840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2200      	movs	r2, #0
 8016830:	61da      	str	r2, [r3, #28]
 8016832:	e005      	b.n	8016840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	2200      	movs	r2, #0
 8016838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2200      	movs	r2, #0
 801683e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2200      	movs	r2, #0
 8016844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801684c:	b2db      	uxtb	r3, r3
 801684e:	2b00      	cmp	r3, #0
 8016850:	d106      	bne.n	8016860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2200      	movs	r2, #0
 8016856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801685a:	6878      	ldr	r0, [r7, #4]
 801685c:	f7fc f858 	bl	8012910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2202      	movs	r2, #2
 8016864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	681a      	ldr	r2, [r3, #0]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	689b      	ldr	r3, [r3, #8]
 8016884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8016888:	431a      	orrs	r2, r3
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	68db      	ldr	r3, [r3, #12]
 801688e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016892:	431a      	orrs	r2, r3
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	691b      	ldr	r3, [r3, #16]
 8016898:	f003 0302 	and.w	r3, r3, #2
 801689c:	431a      	orrs	r2, r3
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	695b      	ldr	r3, [r3, #20]
 80168a2:	f003 0301 	and.w	r3, r3, #1
 80168a6:	431a      	orrs	r2, r3
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	699b      	ldr	r3, [r3, #24]
 80168ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80168b0:	431a      	orrs	r2, r3
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	69db      	ldr	r3, [r3, #28]
 80168b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80168ba:	431a      	orrs	r2, r3
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6a1b      	ldr	r3, [r3, #32]
 80168c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168c4:	ea42 0103 	orr.w	r1, r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	430a      	orrs	r2, r1
 80168d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	699b      	ldr	r3, [r3, #24]
 80168dc:	0c1b      	lsrs	r3, r3, #16
 80168de:	f003 0104 	and.w	r1, r3, #4
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168e6:	f003 0210 	and.w	r2, r3, #16
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	430a      	orrs	r2, r1
 80168f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	69da      	ldr	r2, [r3, #28]
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016900:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2200      	movs	r2, #0
 8016906:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2201      	movs	r2, #1
 801690c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8016910:	2300      	movs	r3, #0
}
 8016912:	4618      	mov	r0, r3
 8016914:	3708      	adds	r7, #8
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}

0801691a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801691a:	b580      	push	{r7, lr}
 801691c:	b088      	sub	sp, #32
 801691e:	af00      	add	r7, sp, #0
 8016920:	60f8      	str	r0, [r7, #12]
 8016922:	60b9      	str	r1, [r7, #8]
 8016924:	603b      	str	r3, [r7, #0]
 8016926:	4613      	mov	r3, r2
 8016928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801692a:	2300      	movs	r3, #0
 801692c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016934:	2b01      	cmp	r3, #1
 8016936:	d101      	bne.n	801693c <HAL_SPI_Transmit+0x22>
 8016938:	2302      	movs	r3, #2
 801693a:	e12d      	b.n	8016b98 <HAL_SPI_Transmit+0x27e>
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2201      	movs	r2, #1
 8016940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016944:	f7fe ff0a 	bl	801575c <HAL_GetTick>
 8016948:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801694a:	88fb      	ldrh	r3, [r7, #6]
 801694c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016954:	b2db      	uxtb	r3, r3
 8016956:	2b01      	cmp	r3, #1
 8016958:	d002      	beq.n	8016960 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801695a:	2302      	movs	r3, #2
 801695c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801695e:	e116      	b.n	8016b8e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d002      	beq.n	801696c <HAL_SPI_Transmit+0x52>
 8016966:	88fb      	ldrh	r3, [r7, #6]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d102      	bne.n	8016972 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801696c:	2301      	movs	r3, #1
 801696e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016970:	e10d      	b.n	8016b8e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2203      	movs	r2, #3
 8016976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2200      	movs	r2, #0
 801697e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	68ba      	ldr	r2, [r7, #8]
 8016984:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	88fa      	ldrh	r2, [r7, #6]
 801698a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	88fa      	ldrh	r2, [r7, #6]
 8016990:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	2200      	movs	r2, #0
 8016996:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2200      	movs	r2, #0
 801699c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2200      	movs	r2, #0
 80169a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2200      	movs	r2, #0
 80169a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2200      	movs	r2, #0
 80169ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	689b      	ldr	r3, [r3, #8]
 80169b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80169b8:	d10f      	bne.n	80169da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	681a      	ldr	r2, [r3, #0]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80169c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	681a      	ldr	r2, [r3, #0]
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80169d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80169e4:	2b40      	cmp	r3, #64	; 0x40
 80169e6:	d007      	beq.n	80169f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	681a      	ldr	r2, [r3, #0]
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80169f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	68db      	ldr	r3, [r3, #12]
 80169fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016a00:	d14f      	bne.n	8016aa2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d002      	beq.n	8016a10 <HAL_SPI_Transmit+0xf6>
 8016a0a:	8afb      	ldrh	r3, [r7, #22]
 8016a0c:	2b01      	cmp	r3, #1
 8016a0e:	d142      	bne.n	8016a96 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a14:	881a      	ldrh	r2, [r3, #0]
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a20:	1c9a      	adds	r2, r3, #2
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	3b01      	subs	r3, #1
 8016a2e:	b29a      	uxth	r2, r3
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8016a34:	e02f      	b.n	8016a96 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	689b      	ldr	r3, [r3, #8]
 8016a3c:	f003 0302 	and.w	r3, r3, #2
 8016a40:	2b02      	cmp	r3, #2
 8016a42:	d112      	bne.n	8016a6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a48:	881a      	ldrh	r2, [r3, #0]
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a54:	1c9a      	adds	r2, r3, #2
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	3b01      	subs	r3, #1
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	86da      	strh	r2, [r3, #54]	; 0x36
 8016a68:	e015      	b.n	8016a96 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016a6a:	f7fe fe77 	bl	801575c <HAL_GetTick>
 8016a6e:	4602      	mov	r2, r0
 8016a70:	69bb      	ldr	r3, [r7, #24]
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	683a      	ldr	r2, [r7, #0]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d803      	bhi.n	8016a82 <HAL_SPI_Transmit+0x168>
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a80:	d102      	bne.n	8016a88 <HAL_SPI_Transmit+0x16e>
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d106      	bne.n	8016a96 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8016a88:	2303      	movs	r3, #3
 8016a8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2201      	movs	r2, #1
 8016a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016a94:	e07b      	b.n	8016b8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016a9a:	b29b      	uxth	r3, r3
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d1ca      	bne.n	8016a36 <HAL_SPI_Transmit+0x11c>
 8016aa0:	e050      	b.n	8016b44 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	685b      	ldr	r3, [r3, #4]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d002      	beq.n	8016ab0 <HAL_SPI_Transmit+0x196>
 8016aaa:	8afb      	ldrh	r3, [r7, #22]
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d144      	bne.n	8016b3a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	330c      	adds	r3, #12
 8016aba:	7812      	ldrb	r2, [r2, #0]
 8016abc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ac2:	1c5a      	adds	r2, r3, #1
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016acc:	b29b      	uxth	r3, r3
 8016ace:	3b01      	subs	r3, #1
 8016ad0:	b29a      	uxth	r2, r3
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8016ad6:	e030      	b.n	8016b3a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	689b      	ldr	r3, [r3, #8]
 8016ade:	f003 0302 	and.w	r3, r3, #2
 8016ae2:	2b02      	cmp	r3, #2
 8016ae4:	d113      	bne.n	8016b0e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	330c      	adds	r3, #12
 8016af0:	7812      	ldrb	r2, [r2, #0]
 8016af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016af8:	1c5a      	adds	r2, r3, #1
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b02:	b29b      	uxth	r3, r3
 8016b04:	3b01      	subs	r3, #1
 8016b06:	b29a      	uxth	r2, r3
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8016b0c:	e015      	b.n	8016b3a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016b0e:	f7fe fe25 	bl	801575c <HAL_GetTick>
 8016b12:	4602      	mov	r2, r0
 8016b14:	69bb      	ldr	r3, [r7, #24]
 8016b16:	1ad3      	subs	r3, r2, r3
 8016b18:	683a      	ldr	r2, [r7, #0]
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d803      	bhi.n	8016b26 <HAL_SPI_Transmit+0x20c>
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b24:	d102      	bne.n	8016b2c <HAL_SPI_Transmit+0x212>
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d106      	bne.n	8016b3a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8016b2c:	2303      	movs	r3, #3
 8016b2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	2201      	movs	r2, #1
 8016b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016b38:	e029      	b.n	8016b8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d1c9      	bne.n	8016ad8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016b44:	69ba      	ldr	r2, [r7, #24]
 8016b46:	6839      	ldr	r1, [r7, #0]
 8016b48:	68f8      	ldr	r0, [r7, #12]
 8016b4a:	f000 fbdf 	bl	801730c <SPI_EndRxTxTransaction>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d002      	beq.n	8016b5a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	2220      	movs	r2, #32
 8016b58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	689b      	ldr	r3, [r3, #8]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d10a      	bne.n	8016b78 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016b62:	2300      	movs	r3, #0
 8016b64:	613b      	str	r3, [r7, #16]
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	68db      	ldr	r3, [r3, #12]
 8016b6c:	613b      	str	r3, [r7, #16]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	689b      	ldr	r3, [r3, #8]
 8016b74:	613b      	str	r3, [r7, #16]
 8016b76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d002      	beq.n	8016b86 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8016b80:	2301      	movs	r3, #1
 8016b82:	77fb      	strb	r3, [r7, #31]
 8016b84:	e003      	b.n	8016b8e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	2201      	movs	r2, #1
 8016b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2200      	movs	r2, #0
 8016b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8016b98:	4618      	mov	r0, r3
 8016b9a:	3720      	adds	r7, #32
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	bd80      	pop	{r7, pc}

08016ba0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b088      	sub	sp, #32
 8016ba4:	af02      	add	r7, sp, #8
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	603b      	str	r3, [r7, #0]
 8016bac:	4613      	mov	r3, r2
 8016bae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	d002      	beq.n	8016bc6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016bc0:	2302      	movs	r3, #2
 8016bc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016bc4:	e0fb      	b.n	8016dbe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	685b      	ldr	r3, [r3, #4]
 8016bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016bce:	d112      	bne.n	8016bf6 <HAL_SPI_Receive+0x56>
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	689b      	ldr	r3, [r3, #8]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d10e      	bne.n	8016bf6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	2204      	movs	r2, #4
 8016bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016be0:	88fa      	ldrh	r2, [r7, #6]
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	4613      	mov	r3, r2
 8016be8:	68ba      	ldr	r2, [r7, #8]
 8016bea:	68b9      	ldr	r1, [r7, #8]
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	f000 f8ef 	bl	8016dd0 <HAL_SPI_TransmitReceive>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	e0e8      	b.n	8016dc8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d101      	bne.n	8016c04 <HAL_SPI_Receive+0x64>
 8016c00:	2302      	movs	r3, #2
 8016c02:	e0e1      	b.n	8016dc8 <HAL_SPI_Receive+0x228>
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	2201      	movs	r2, #1
 8016c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016c0c:	f7fe fda6 	bl	801575c <HAL_GetTick>
 8016c10:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d002      	beq.n	8016c1e <HAL_SPI_Receive+0x7e>
 8016c18:	88fb      	ldrh	r3, [r7, #6]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d102      	bne.n	8016c24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016c1e:	2301      	movs	r3, #1
 8016c20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016c22:	e0cc      	b.n	8016dbe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	2204      	movs	r2, #4
 8016c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	2200      	movs	r2, #0
 8016c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	68ba      	ldr	r2, [r7, #8]
 8016c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	88fa      	ldrh	r2, [r7, #6]
 8016c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	88fa      	ldrh	r2, [r7, #6]
 8016c42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2200      	movs	r2, #0
 8016c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	2200      	movs	r2, #0
 8016c54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	689b      	ldr	r3, [r3, #8]
 8016c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016c6a:	d10f      	bne.n	8016c8c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	681a      	ldr	r2, [r3, #0]
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016c7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	681a      	ldr	r2, [r3, #0]
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016c8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c96:	2b40      	cmp	r3, #64	; 0x40
 8016c98:	d007      	beq.n	8016caa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016ca8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	68db      	ldr	r3, [r3, #12]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d16a      	bne.n	8016d88 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016cb2:	e032      	b.n	8016d1a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	689b      	ldr	r3, [r3, #8]
 8016cba:	f003 0301 	and.w	r3, r3, #1
 8016cbe:	2b01      	cmp	r3, #1
 8016cc0:	d115      	bne.n	8016cee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	f103 020c 	add.w	r2, r3, #12
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cce:	7812      	ldrb	r2, [r2, #0]
 8016cd0:	b2d2      	uxtb	r2, r2
 8016cd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cd8:	1c5a      	adds	r2, r3, #1
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	b29a      	uxth	r2, r3
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016cec:	e015      	b.n	8016d1a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016cee:	f7fe fd35 	bl	801575c <HAL_GetTick>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	1ad3      	subs	r3, r2, r3
 8016cf8:	683a      	ldr	r2, [r7, #0]
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d803      	bhi.n	8016d06 <HAL_SPI_Receive+0x166>
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d04:	d102      	bne.n	8016d0c <HAL_SPI_Receive+0x16c>
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d106      	bne.n	8016d1a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016d0c:	2303      	movs	r3, #3
 8016d0e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	2201      	movs	r2, #1
 8016d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016d18:	e051      	b.n	8016dbe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d1c7      	bne.n	8016cb4 <HAL_SPI_Receive+0x114>
 8016d24:	e035      	b.n	8016d92 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	689b      	ldr	r3, [r3, #8]
 8016d2c:	f003 0301 	and.w	r3, r3, #1
 8016d30:	2b01      	cmp	r3, #1
 8016d32:	d113      	bne.n	8016d5c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	68da      	ldr	r2, [r3, #12]
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d3e:	b292      	uxth	r2, r2
 8016d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d46:	1c9a      	adds	r2, r3, #2
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	3b01      	subs	r3, #1
 8016d54:	b29a      	uxth	r2, r3
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016d5a:	e015      	b.n	8016d88 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016d5c:	f7fe fcfe 	bl	801575c <HAL_GetTick>
 8016d60:	4602      	mov	r2, r0
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	1ad3      	subs	r3, r2, r3
 8016d66:	683a      	ldr	r2, [r7, #0]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d803      	bhi.n	8016d74 <HAL_SPI_Receive+0x1d4>
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d72:	d102      	bne.n	8016d7a <HAL_SPI_Receive+0x1da>
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d106      	bne.n	8016d88 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8016d7a:	2303      	movs	r3, #3
 8016d7c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	2201      	movs	r2, #1
 8016d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016d86:	e01a      	b.n	8016dbe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d1c9      	bne.n	8016d26 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016d92:	693a      	ldr	r2, [r7, #16]
 8016d94:	6839      	ldr	r1, [r7, #0]
 8016d96:	68f8      	ldr	r0, [r7, #12]
 8016d98:	f000 fa52 	bl	8017240 <SPI_EndRxTransaction>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d002      	beq.n	8016da8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	2220      	movs	r2, #32
 8016da6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d002      	beq.n	8016db6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8016db0:	2301      	movs	r3, #1
 8016db2:	75fb      	strb	r3, [r7, #23]
 8016db4:	e003      	b.n	8016dbe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	2201      	movs	r2, #1
 8016dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dc8:	4618      	mov	r0, r3
 8016dca:	3718      	adds	r7, #24
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b08c      	sub	sp, #48	; 0x30
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
 8016ddc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016dde:	2301      	movs	r3, #1
 8016de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016de2:	2300      	movs	r3, #0
 8016de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016dee:	2b01      	cmp	r3, #1
 8016df0:	d101      	bne.n	8016df6 <HAL_SPI_TransmitReceive+0x26>
 8016df2:	2302      	movs	r3, #2
 8016df4:	e198      	b.n	8017128 <HAL_SPI_TransmitReceive+0x358>
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	2201      	movs	r2, #1
 8016dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016dfe:	f7fe fcad 	bl	801575c <HAL_GetTick>
 8016e02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	685b      	ldr	r3, [r3, #4]
 8016e12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016e14:	887b      	ldrh	r3, [r7, #2]
 8016e16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016e1c:	2b01      	cmp	r3, #1
 8016e1e:	d00f      	beq.n	8016e40 <HAL_SPI_TransmitReceive+0x70>
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016e26:	d107      	bne.n	8016e38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	689b      	ldr	r3, [r3, #8]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d103      	bne.n	8016e38 <HAL_SPI_TransmitReceive+0x68>
 8016e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016e34:	2b04      	cmp	r3, #4
 8016e36:	d003      	beq.n	8016e40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016e38:	2302      	movs	r3, #2
 8016e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016e3e:	e16d      	b.n	801711c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016e40:	68bb      	ldr	r3, [r7, #8]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d005      	beq.n	8016e52 <HAL_SPI_TransmitReceive+0x82>
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d002      	beq.n	8016e52 <HAL_SPI_TransmitReceive+0x82>
 8016e4c:	887b      	ldrh	r3, [r7, #2]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d103      	bne.n	8016e5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016e52:	2301      	movs	r3, #1
 8016e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016e58:	e160      	b.n	801711c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016e60:	b2db      	uxtb	r3, r3
 8016e62:	2b04      	cmp	r3, #4
 8016e64:	d003      	beq.n	8016e6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	2205      	movs	r2, #5
 8016e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	2200      	movs	r2, #0
 8016e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	687a      	ldr	r2, [r7, #4]
 8016e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	887a      	ldrh	r2, [r7, #2]
 8016e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	887a      	ldrh	r2, [r7, #2]
 8016e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	68ba      	ldr	r2, [r7, #8]
 8016e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	887a      	ldrh	r2, [r7, #2]
 8016e90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	887a      	ldrh	r2, [r7, #2]
 8016e96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016eae:	2b40      	cmp	r3, #64	; 0x40
 8016eb0:	d007      	beq.n	8016ec2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	681a      	ldr	r2, [r3, #0]
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016ec0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	68db      	ldr	r3, [r3, #12]
 8016ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016eca:	d17c      	bne.n	8016fc6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d002      	beq.n	8016eda <HAL_SPI_TransmitReceive+0x10a>
 8016ed4:	8b7b      	ldrh	r3, [r7, #26]
 8016ed6:	2b01      	cmp	r3, #1
 8016ed8:	d16a      	bne.n	8016fb0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ede:	881a      	ldrh	r2, [r3, #0]
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016eea:	1c9a      	adds	r2, r3, #2
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	3b01      	subs	r3, #1
 8016ef8:	b29a      	uxth	r2, r3
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016efe:	e057      	b.n	8016fb0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	689b      	ldr	r3, [r3, #8]
 8016f06:	f003 0302 	and.w	r3, r3, #2
 8016f0a:	2b02      	cmp	r3, #2
 8016f0c:	d11b      	bne.n	8016f46 <HAL_SPI_TransmitReceive+0x176>
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016f12:	b29b      	uxth	r3, r3
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d016      	beq.n	8016f46 <HAL_SPI_TransmitReceive+0x176>
 8016f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1a:	2b01      	cmp	r3, #1
 8016f1c:	d113      	bne.n	8016f46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f22:	881a      	ldrh	r2, [r3, #0]
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f2e:	1c9a      	adds	r2, r3, #2
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016f38:	b29b      	uxth	r3, r3
 8016f3a:	3b01      	subs	r3, #1
 8016f3c:	b29a      	uxth	r2, r3
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016f42:	2300      	movs	r3, #0
 8016f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	689b      	ldr	r3, [r3, #8]
 8016f4c:	f003 0301 	and.w	r3, r3, #1
 8016f50:	2b01      	cmp	r3, #1
 8016f52:	d119      	bne.n	8016f88 <HAL_SPI_TransmitReceive+0x1b8>
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d014      	beq.n	8016f88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	68da      	ldr	r2, [r3, #12]
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f68:	b292      	uxth	r2, r2
 8016f6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f70:	1c9a      	adds	r2, r3, #2
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	3b01      	subs	r3, #1
 8016f7e:	b29a      	uxth	r2, r3
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016f84:	2301      	movs	r3, #1
 8016f86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016f88:	f7fe fbe8 	bl	801575c <HAL_GetTick>
 8016f8c:	4602      	mov	r2, r0
 8016f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f90:	1ad3      	subs	r3, r2, r3
 8016f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f94:	429a      	cmp	r2, r3
 8016f96:	d80b      	bhi.n	8016fb0 <HAL_SPI_TransmitReceive+0x1e0>
 8016f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f9e:	d007      	beq.n	8016fb0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8016fa0:	2303      	movs	r3, #3
 8016fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	2201      	movs	r2, #1
 8016faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016fae:	e0b5      	b.n	801711c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d1a2      	bne.n	8016f00 <HAL_SPI_TransmitReceive+0x130>
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016fbe:	b29b      	uxth	r3, r3
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d19d      	bne.n	8016f00 <HAL_SPI_TransmitReceive+0x130>
 8016fc4:	e080      	b.n	80170c8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	685b      	ldr	r3, [r3, #4]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d002      	beq.n	8016fd4 <HAL_SPI_TransmitReceive+0x204>
 8016fce:	8b7b      	ldrh	r3, [r7, #26]
 8016fd0:	2b01      	cmp	r3, #1
 8016fd2:	d16f      	bne.n	80170b4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	330c      	adds	r3, #12
 8016fde:	7812      	ldrb	r2, [r2, #0]
 8016fe0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fe6:	1c5a      	adds	r2, r3, #1
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	3b01      	subs	r3, #1
 8016ff4:	b29a      	uxth	r2, r3
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016ffa:	e05b      	b.n	80170b4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	689b      	ldr	r3, [r3, #8]
 8017002:	f003 0302 	and.w	r3, r3, #2
 8017006:	2b02      	cmp	r3, #2
 8017008:	d11c      	bne.n	8017044 <HAL_SPI_TransmitReceive+0x274>
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801700e:	b29b      	uxth	r3, r3
 8017010:	2b00      	cmp	r3, #0
 8017012:	d017      	beq.n	8017044 <HAL_SPI_TransmitReceive+0x274>
 8017014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017016:	2b01      	cmp	r3, #1
 8017018:	d114      	bne.n	8017044 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	330c      	adds	r3, #12
 8017024:	7812      	ldrb	r2, [r2, #0]
 8017026:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801702c:	1c5a      	adds	r2, r3, #1
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017036:	b29b      	uxth	r3, r3
 8017038:	3b01      	subs	r3, #1
 801703a:	b29a      	uxth	r2, r3
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8017040:	2300      	movs	r3, #0
 8017042:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	689b      	ldr	r3, [r3, #8]
 801704a:	f003 0301 	and.w	r3, r3, #1
 801704e:	2b01      	cmp	r3, #1
 8017050:	d119      	bne.n	8017086 <HAL_SPI_TransmitReceive+0x2b6>
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017056:	b29b      	uxth	r3, r3
 8017058:	2b00      	cmp	r3, #0
 801705a:	d014      	beq.n	8017086 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	68da      	ldr	r2, [r3, #12]
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017066:	b2d2      	uxtb	r2, r2
 8017068:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801706e:	1c5a      	adds	r2, r3, #1
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017078:	b29b      	uxth	r3, r3
 801707a:	3b01      	subs	r3, #1
 801707c:	b29a      	uxth	r2, r3
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017082:	2301      	movs	r3, #1
 8017084:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017086:	f7fe fb69 	bl	801575c <HAL_GetTick>
 801708a:	4602      	mov	r2, r0
 801708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017092:	429a      	cmp	r2, r3
 8017094:	d803      	bhi.n	801709e <HAL_SPI_TransmitReceive+0x2ce>
 8017096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801709c:	d102      	bne.n	80170a4 <HAL_SPI_TransmitReceive+0x2d4>
 801709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d107      	bne.n	80170b4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80170a4:	2303      	movs	r3, #3
 80170a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	2201      	movs	r2, #1
 80170ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80170b2:	e033      	b.n	801711c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d19e      	bne.n	8016ffc <HAL_SPI_TransmitReceive+0x22c>
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d199      	bne.n	8016ffc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80170c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80170cc:	68f8      	ldr	r0, [r7, #12]
 80170ce:	f000 f91d 	bl	801730c <SPI_EndRxTxTransaction>
 80170d2:	4603      	mov	r3, r0
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d006      	beq.n	80170e6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80170d8:	2301      	movs	r3, #1
 80170da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	2220      	movs	r2, #32
 80170e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80170e4:	e01a      	b.n	801711c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	689b      	ldr	r3, [r3, #8]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d10a      	bne.n	8017104 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80170ee:	2300      	movs	r3, #0
 80170f0:	617b      	str	r3, [r7, #20]
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	617b      	str	r3, [r7, #20]
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	689b      	ldr	r3, [r3, #8]
 8017100:	617b      	str	r3, [r7, #20]
 8017102:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017108:	2b00      	cmp	r3, #0
 801710a:	d003      	beq.n	8017114 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 801710c:	2301      	movs	r3, #1
 801710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017112:	e003      	b.n	801711c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2201      	movs	r2, #1
 8017118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	2200      	movs	r2, #0
 8017120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8017124:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8017128:	4618      	mov	r0, r3
 801712a:	3730      	adds	r7, #48	; 0x30
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}

08017130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b088      	sub	sp, #32
 8017134:	af00      	add	r7, sp, #0
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	60b9      	str	r1, [r7, #8]
 801713a:	603b      	str	r3, [r7, #0]
 801713c:	4613      	mov	r3, r2
 801713e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8017140:	f7fe fb0c 	bl	801575c <HAL_GetTick>
 8017144:	4602      	mov	r2, r0
 8017146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017148:	1a9b      	subs	r3, r3, r2
 801714a:	683a      	ldr	r2, [r7, #0]
 801714c:	4413      	add	r3, r2
 801714e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8017150:	f7fe fb04 	bl	801575c <HAL_GetTick>
 8017154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017156:	4b39      	ldr	r3, [pc, #228]	; (801723c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	015b      	lsls	r3, r3, #5
 801715c:	0d1b      	lsrs	r3, r3, #20
 801715e:	69fa      	ldr	r2, [r7, #28]
 8017160:	fb02 f303 	mul.w	r3, r2, r3
 8017164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017166:	e054      	b.n	8017212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801716e:	d050      	beq.n	8017212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017170:	f7fe faf4 	bl	801575c <HAL_GetTick>
 8017174:	4602      	mov	r2, r0
 8017176:	69bb      	ldr	r3, [r7, #24]
 8017178:	1ad3      	subs	r3, r2, r3
 801717a:	69fa      	ldr	r2, [r7, #28]
 801717c:	429a      	cmp	r2, r3
 801717e:	d902      	bls.n	8017186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8017180:	69fb      	ldr	r3, [r7, #28]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d13d      	bne.n	8017202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	685a      	ldr	r2, [r3, #4]
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8017194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	685b      	ldr	r3, [r3, #4]
 801719a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801719e:	d111      	bne.n	80171c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	689b      	ldr	r3, [r3, #8]
 80171a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80171a8:	d004      	beq.n	80171b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	689b      	ldr	r3, [r3, #8]
 80171ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80171b2:	d107      	bne.n	80171c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	681a      	ldr	r2, [r3, #0]
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80171c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80171cc:	d10f      	bne.n	80171ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	681a      	ldr	r2, [r3, #0]
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80171dc:	601a      	str	r2, [r3, #0]
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	681a      	ldr	r2, [r3, #0]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80171ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	2201      	movs	r2, #1
 80171f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	2200      	movs	r2, #0
 80171fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80171fe:	2303      	movs	r3, #3
 8017200:	e017      	b.n	8017232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8017202:	697b      	ldr	r3, [r7, #20]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d101      	bne.n	801720c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8017208:	2300      	movs	r3, #0
 801720a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	3b01      	subs	r3, #1
 8017210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	689a      	ldr	r2, [r3, #8]
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	4013      	ands	r3, r2
 801721c:	68ba      	ldr	r2, [r7, #8]
 801721e:	429a      	cmp	r2, r3
 8017220:	bf0c      	ite	eq
 8017222:	2301      	moveq	r3, #1
 8017224:	2300      	movne	r3, #0
 8017226:	b2db      	uxtb	r3, r3
 8017228:	461a      	mov	r2, r3
 801722a:	79fb      	ldrb	r3, [r7, #7]
 801722c:	429a      	cmp	r2, r3
 801722e:	d19b      	bne.n	8017168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8017230:	2300      	movs	r3, #0
}
 8017232:	4618      	mov	r0, r3
 8017234:	3720      	adds	r7, #32
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	20000000 	.word	0x20000000

08017240 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b086      	sub	sp, #24
 8017244:	af02      	add	r7, sp, #8
 8017246:	60f8      	str	r0, [r7, #12]
 8017248:	60b9      	str	r1, [r7, #8]
 801724a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017254:	d111      	bne.n	801727a <SPI_EndRxTransaction+0x3a>
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	689b      	ldr	r3, [r3, #8]
 801725a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801725e:	d004      	beq.n	801726a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	689b      	ldr	r3, [r3, #8]
 8017264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017268:	d107      	bne.n	801727a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	681a      	ldr	r2, [r3, #0]
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017278:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	685b      	ldr	r3, [r3, #4]
 801727e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017282:	d12a      	bne.n	80172da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	689b      	ldr	r3, [r3, #8]
 8017288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801728c:	d012      	beq.n	80172b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	9300      	str	r3, [sp, #0]
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	2200      	movs	r2, #0
 8017296:	2180      	movs	r1, #128	; 0x80
 8017298:	68f8      	ldr	r0, [r7, #12]
 801729a:	f7ff ff49 	bl	8017130 <SPI_WaitFlagStateUntilTimeout>
 801729e:	4603      	mov	r3, r0
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d02d      	beq.n	8017300 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172a8:	f043 0220 	orr.w	r2, r3, #32
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80172b0:	2303      	movs	r3, #3
 80172b2:	e026      	b.n	8017302 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	9300      	str	r3, [sp, #0]
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	2200      	movs	r2, #0
 80172bc:	2101      	movs	r1, #1
 80172be:	68f8      	ldr	r0, [r7, #12]
 80172c0:	f7ff ff36 	bl	8017130 <SPI_WaitFlagStateUntilTimeout>
 80172c4:	4603      	mov	r3, r0
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d01a      	beq.n	8017300 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172ce:	f043 0220 	orr.w	r2, r3, #32
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80172d6:	2303      	movs	r3, #3
 80172d8:	e013      	b.n	8017302 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	9300      	str	r3, [sp, #0]
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	2200      	movs	r2, #0
 80172e2:	2101      	movs	r1, #1
 80172e4:	68f8      	ldr	r0, [r7, #12]
 80172e6:	f7ff ff23 	bl	8017130 <SPI_WaitFlagStateUntilTimeout>
 80172ea:	4603      	mov	r3, r0
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d007      	beq.n	8017300 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172f4:	f043 0220 	orr.w	r2, r3, #32
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80172fc:	2303      	movs	r3, #3
 80172fe:	e000      	b.n	8017302 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8017300:	2300      	movs	r3, #0
}
 8017302:	4618      	mov	r0, r3
 8017304:	3710      	adds	r7, #16
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}
	...

0801730c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b088      	sub	sp, #32
 8017310:	af02      	add	r7, sp, #8
 8017312:	60f8      	str	r0, [r7, #12]
 8017314:	60b9      	str	r1, [r7, #8]
 8017316:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	9300      	str	r3, [sp, #0]
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	2201      	movs	r2, #1
 8017320:	2102      	movs	r1, #2
 8017322:	68f8      	ldr	r0, [r7, #12]
 8017324:	f7ff ff04 	bl	8017130 <SPI_WaitFlagStateUntilTimeout>
 8017328:	4603      	mov	r3, r0
 801732a:	2b00      	cmp	r3, #0
 801732c:	d007      	beq.n	801733e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017332:	f043 0220 	orr.w	r2, r3, #32
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 801733a:	2303      	movs	r3, #3
 801733c:	e032      	b.n	80173a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801733e:	4b1b      	ldr	r3, [pc, #108]	; (80173ac <SPI_EndRxTxTransaction+0xa0>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	4a1b      	ldr	r2, [pc, #108]	; (80173b0 <SPI_EndRxTxTransaction+0xa4>)
 8017344:	fba2 2303 	umull	r2, r3, r2, r3
 8017348:	0d5b      	lsrs	r3, r3, #21
 801734a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801734e:	fb02 f303 	mul.w	r3, r2, r3
 8017352:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801735c:	d112      	bne.n	8017384 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	9300      	str	r3, [sp, #0]
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	2200      	movs	r2, #0
 8017366:	2180      	movs	r1, #128	; 0x80
 8017368:	68f8      	ldr	r0, [r7, #12]
 801736a:	f7ff fee1 	bl	8017130 <SPI_WaitFlagStateUntilTimeout>
 801736e:	4603      	mov	r3, r0
 8017370:	2b00      	cmp	r3, #0
 8017372:	d016      	beq.n	80173a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017378:	f043 0220 	orr.w	r2, r3, #32
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017380:	2303      	movs	r3, #3
 8017382:	e00f      	b.n	80173a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8017384:	697b      	ldr	r3, [r7, #20]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d00a      	beq.n	80173a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	3b01      	subs	r3, #1
 801738e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	689b      	ldr	r3, [r3, #8]
 8017396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801739a:	2b80      	cmp	r3, #128	; 0x80
 801739c:	d0f2      	beq.n	8017384 <SPI_EndRxTxTransaction+0x78>
 801739e:	e000      	b.n	80173a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80173a0:	bf00      	nop
  }

  return HAL_OK;
 80173a2:	2300      	movs	r3, #0
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3718      	adds	r7, #24
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	20000000 	.word	0x20000000
 80173b0:	165e9f81 	.word	0x165e9f81

080173b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d101      	bne.n	80173c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80173c2:	2301      	movs	r3, #1
 80173c4:	e041      	b.n	801744a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d106      	bne.n	80173e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	2200      	movs	r2, #0
 80173d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f000 f839 	bl	8017452 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	2202      	movs	r2, #2
 80173e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	681a      	ldr	r2, [r3, #0]
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	3304      	adds	r3, #4
 80173f0:	4619      	mov	r1, r3
 80173f2:	4610      	mov	r0, r2
 80173f4:	f000 f9b2 	bl	801775c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2201      	movs	r2, #1
 80173fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2201      	movs	r2, #1
 8017404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2201      	movs	r2, #1
 801740c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2201      	movs	r2, #1
 8017414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2201      	movs	r2, #1
 801741c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2201      	movs	r2, #1
 8017424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2201      	movs	r2, #1
 801742c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2201      	movs	r2, #1
 8017434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	2201      	movs	r2, #1
 801743c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2201      	movs	r2, #1
 8017444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017448:	2300      	movs	r3, #0
}
 801744a:	4618      	mov	r0, r3
 801744c:	3708      	adds	r7, #8
 801744e:	46bd      	mov	sp, r7
 8017450:	bd80      	pop	{r7, pc}

08017452 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8017452:	b480      	push	{r7}
 8017454:	b083      	sub	sp, #12
 8017456:	af00      	add	r7, sp, #0
 8017458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801745a:	bf00      	nop
 801745c:	370c      	adds	r7, #12
 801745e:	46bd      	mov	sp, r7
 8017460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017464:	4770      	bx	lr
	...

08017468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017468:	b480      	push	{r7}
 801746a:	b085      	sub	sp, #20
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017476:	b2db      	uxtb	r3, r3
 8017478:	2b01      	cmp	r3, #1
 801747a:	d001      	beq.n	8017480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801747c:	2301      	movs	r3, #1
 801747e:	e044      	b.n	801750a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2202      	movs	r2, #2
 8017484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	68da      	ldr	r2, [r3, #12]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	f042 0201 	orr.w	r2, r2, #1
 8017496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4a1e      	ldr	r2, [pc, #120]	; (8017518 <HAL_TIM_Base_Start_IT+0xb0>)
 801749e:	4293      	cmp	r3, r2
 80174a0:	d018      	beq.n	80174d4 <HAL_TIM_Base_Start_IT+0x6c>
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80174aa:	d013      	beq.n	80174d4 <HAL_TIM_Base_Start_IT+0x6c>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	4a1a      	ldr	r2, [pc, #104]	; (801751c <HAL_TIM_Base_Start_IT+0xb4>)
 80174b2:	4293      	cmp	r3, r2
 80174b4:	d00e      	beq.n	80174d4 <HAL_TIM_Base_Start_IT+0x6c>
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	4a19      	ldr	r2, [pc, #100]	; (8017520 <HAL_TIM_Base_Start_IT+0xb8>)
 80174bc:	4293      	cmp	r3, r2
 80174be:	d009      	beq.n	80174d4 <HAL_TIM_Base_Start_IT+0x6c>
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	4a17      	ldr	r2, [pc, #92]	; (8017524 <HAL_TIM_Base_Start_IT+0xbc>)
 80174c6:	4293      	cmp	r3, r2
 80174c8:	d004      	beq.n	80174d4 <HAL_TIM_Base_Start_IT+0x6c>
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	4a16      	ldr	r2, [pc, #88]	; (8017528 <HAL_TIM_Base_Start_IT+0xc0>)
 80174d0:	4293      	cmp	r3, r2
 80174d2:	d111      	bne.n	80174f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	689b      	ldr	r3, [r3, #8]
 80174da:	f003 0307 	and.w	r3, r3, #7
 80174de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	2b06      	cmp	r3, #6
 80174e4:	d010      	beq.n	8017508 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	681a      	ldr	r2, [r3, #0]
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	f042 0201 	orr.w	r2, r2, #1
 80174f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80174f6:	e007      	b.n	8017508 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	681a      	ldr	r2, [r3, #0]
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f042 0201 	orr.w	r2, r2, #1
 8017506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017508:	2300      	movs	r3, #0
}
 801750a:	4618      	mov	r0, r3
 801750c:	3714      	adds	r7, #20
 801750e:	46bd      	mov	sp, r7
 8017510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017514:	4770      	bx	lr
 8017516:	bf00      	nop
 8017518:	40010000 	.word	0x40010000
 801751c:	40000400 	.word	0x40000400
 8017520:	40000800 	.word	0x40000800
 8017524:	40000c00 	.word	0x40000c00
 8017528:	40014000 	.word	0x40014000

0801752c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b084      	sub	sp, #16
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	68db      	ldr	r3, [r3, #12]
 801753a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	691b      	ldr	r3, [r3, #16]
 8017542:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017544:	68bb      	ldr	r3, [r7, #8]
 8017546:	f003 0302 	and.w	r3, r3, #2
 801754a:	2b00      	cmp	r3, #0
 801754c:	d020      	beq.n	8017590 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	f003 0302 	and.w	r3, r3, #2
 8017554:	2b00      	cmp	r3, #0
 8017556:	d01b      	beq.n	8017590 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	f06f 0202 	mvn.w	r2, #2
 8017560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2201      	movs	r2, #1
 8017566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	699b      	ldr	r3, [r3, #24]
 801756e:	f003 0303 	and.w	r3, r3, #3
 8017572:	2b00      	cmp	r3, #0
 8017574:	d003      	beq.n	801757e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8017576:	6878      	ldr	r0, [r7, #4]
 8017578:	f000 f8d2 	bl	8017720 <HAL_TIM_IC_CaptureCallback>
 801757c:	e005      	b.n	801758a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f000 f8c4 	bl	801770c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017584:	6878      	ldr	r0, [r7, #4]
 8017586:	f000 f8d5 	bl	8017734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2200      	movs	r2, #0
 801758e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	f003 0304 	and.w	r3, r3, #4
 8017596:	2b00      	cmp	r3, #0
 8017598:	d020      	beq.n	80175dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	f003 0304 	and.w	r3, r3, #4
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d01b      	beq.n	80175dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	f06f 0204 	mvn.w	r2, #4
 80175ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	2202      	movs	r2, #2
 80175b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	699b      	ldr	r3, [r3, #24]
 80175ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d003      	beq.n	80175ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f000 f8ac 	bl	8017720 <HAL_TIM_IC_CaptureCallback>
 80175c8:	e005      	b.n	80175d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f000 f89e 	bl	801770c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80175d0:	6878      	ldr	r0, [r7, #4]
 80175d2:	f000 f8af 	bl	8017734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	2200      	movs	r2, #0
 80175da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80175dc:	68bb      	ldr	r3, [r7, #8]
 80175de:	f003 0308 	and.w	r3, r3, #8
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d020      	beq.n	8017628 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	f003 0308 	and.w	r3, r3, #8
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d01b      	beq.n	8017628 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	f06f 0208 	mvn.w	r2, #8
 80175f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	2204      	movs	r2, #4
 80175fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	69db      	ldr	r3, [r3, #28]
 8017606:	f003 0303 	and.w	r3, r3, #3
 801760a:	2b00      	cmp	r3, #0
 801760c:	d003      	beq.n	8017616 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f000 f886 	bl	8017720 <HAL_TIM_IC_CaptureCallback>
 8017614:	e005      	b.n	8017622 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	f000 f878 	bl	801770c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f000 f889 	bl	8017734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2200      	movs	r2, #0
 8017626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	f003 0310 	and.w	r3, r3, #16
 801762e:	2b00      	cmp	r3, #0
 8017630:	d020      	beq.n	8017674 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	f003 0310 	and.w	r3, r3, #16
 8017638:	2b00      	cmp	r3, #0
 801763a:	d01b      	beq.n	8017674 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	f06f 0210 	mvn.w	r2, #16
 8017644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2208      	movs	r2, #8
 801764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	69db      	ldr	r3, [r3, #28]
 8017652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017656:	2b00      	cmp	r3, #0
 8017658:	d003      	beq.n	8017662 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f000 f860 	bl	8017720 <HAL_TIM_IC_CaptureCallback>
 8017660:	e005      	b.n	801766e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017662:	6878      	ldr	r0, [r7, #4]
 8017664:	f000 f852 	bl	801770c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f000 f863 	bl	8017734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	2200      	movs	r2, #0
 8017672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	f003 0301 	and.w	r3, r3, #1
 801767a:	2b00      	cmp	r3, #0
 801767c:	d00c      	beq.n	8017698 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	f003 0301 	and.w	r3, r3, #1
 8017684:	2b00      	cmp	r3, #0
 8017686:	d007      	beq.n	8017698 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	f06f 0201 	mvn.w	r2, #1
 8017690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f7fb f8d6 	bl	8012844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d00c      	beq.n	80176bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d007      	beq.n	80176bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80176b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f000 f8e6 	bl	8017888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80176bc:	68bb      	ldr	r3, [r7, #8]
 80176be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d00c      	beq.n	80176e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d007      	beq.n	80176e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80176d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80176da:	6878      	ldr	r0, [r7, #4]
 80176dc:	f000 f834 	bl	8017748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	f003 0320 	and.w	r3, r3, #32
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d00c      	beq.n	8017704 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	f003 0320 	and.w	r3, r3, #32
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d007      	beq.n	8017704 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	f06f 0220 	mvn.w	r2, #32
 80176fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f000 f8b8 	bl	8017874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017704:	bf00      	nop
 8017706:	3710      	adds	r7, #16
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801770c:	b480      	push	{r7}
 801770e:	b083      	sub	sp, #12
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017714:	bf00      	nop
 8017716:	370c      	adds	r7, #12
 8017718:	46bd      	mov	sp, r7
 801771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771e:	4770      	bx	lr

08017720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017720:	b480      	push	{r7}
 8017722:	b083      	sub	sp, #12
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017728:	bf00      	nop
 801772a:	370c      	adds	r7, #12
 801772c:	46bd      	mov	sp, r7
 801772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017732:	4770      	bx	lr

08017734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017734:	b480      	push	{r7}
 8017736:	b083      	sub	sp, #12
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801773c:	bf00      	nop
 801773e:	370c      	adds	r7, #12
 8017740:	46bd      	mov	sp, r7
 8017742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017746:	4770      	bx	lr

08017748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017748:	b480      	push	{r7}
 801774a:	b083      	sub	sp, #12
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017750:	bf00      	nop
 8017752:	370c      	adds	r7, #12
 8017754:	46bd      	mov	sp, r7
 8017756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775a:	4770      	bx	lr

0801775c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801775c:	b480      	push	{r7}
 801775e:	b085      	sub	sp, #20
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
 8017764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	4a3a      	ldr	r2, [pc, #232]	; (8017858 <TIM_Base_SetConfig+0xfc>)
 8017770:	4293      	cmp	r3, r2
 8017772:	d00f      	beq.n	8017794 <TIM_Base_SetConfig+0x38>
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801777a:	d00b      	beq.n	8017794 <TIM_Base_SetConfig+0x38>
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	4a37      	ldr	r2, [pc, #220]	; (801785c <TIM_Base_SetConfig+0x100>)
 8017780:	4293      	cmp	r3, r2
 8017782:	d007      	beq.n	8017794 <TIM_Base_SetConfig+0x38>
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	4a36      	ldr	r2, [pc, #216]	; (8017860 <TIM_Base_SetConfig+0x104>)
 8017788:	4293      	cmp	r3, r2
 801778a:	d003      	beq.n	8017794 <TIM_Base_SetConfig+0x38>
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	4a35      	ldr	r2, [pc, #212]	; (8017864 <TIM_Base_SetConfig+0x108>)
 8017790:	4293      	cmp	r3, r2
 8017792:	d108      	bne.n	80177a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801779a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	685b      	ldr	r3, [r3, #4]
 80177a0:	68fa      	ldr	r2, [r7, #12]
 80177a2:	4313      	orrs	r3, r2
 80177a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	4a2b      	ldr	r2, [pc, #172]	; (8017858 <TIM_Base_SetConfig+0xfc>)
 80177aa:	4293      	cmp	r3, r2
 80177ac:	d01b      	beq.n	80177e6 <TIM_Base_SetConfig+0x8a>
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80177b4:	d017      	beq.n	80177e6 <TIM_Base_SetConfig+0x8a>
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	4a28      	ldr	r2, [pc, #160]	; (801785c <TIM_Base_SetConfig+0x100>)
 80177ba:	4293      	cmp	r3, r2
 80177bc:	d013      	beq.n	80177e6 <TIM_Base_SetConfig+0x8a>
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	4a27      	ldr	r2, [pc, #156]	; (8017860 <TIM_Base_SetConfig+0x104>)
 80177c2:	4293      	cmp	r3, r2
 80177c4:	d00f      	beq.n	80177e6 <TIM_Base_SetConfig+0x8a>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	4a26      	ldr	r2, [pc, #152]	; (8017864 <TIM_Base_SetConfig+0x108>)
 80177ca:	4293      	cmp	r3, r2
 80177cc:	d00b      	beq.n	80177e6 <TIM_Base_SetConfig+0x8a>
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	4a25      	ldr	r2, [pc, #148]	; (8017868 <TIM_Base_SetConfig+0x10c>)
 80177d2:	4293      	cmp	r3, r2
 80177d4:	d007      	beq.n	80177e6 <TIM_Base_SetConfig+0x8a>
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	4a24      	ldr	r2, [pc, #144]	; (801786c <TIM_Base_SetConfig+0x110>)
 80177da:	4293      	cmp	r3, r2
 80177dc:	d003      	beq.n	80177e6 <TIM_Base_SetConfig+0x8a>
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	4a23      	ldr	r2, [pc, #140]	; (8017870 <TIM_Base_SetConfig+0x114>)
 80177e2:	4293      	cmp	r3, r2
 80177e4:	d108      	bne.n	80177f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80177ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	68db      	ldr	r3, [r3, #12]
 80177f2:	68fa      	ldr	r2, [r7, #12]
 80177f4:	4313      	orrs	r3, r2
 80177f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	695b      	ldr	r3, [r3, #20]
 8017802:	4313      	orrs	r3, r2
 8017804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	68fa      	ldr	r2, [r7, #12]
 801780a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	689a      	ldr	r2, [r3, #8]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	681a      	ldr	r2, [r3, #0]
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	4a0e      	ldr	r2, [pc, #56]	; (8017858 <TIM_Base_SetConfig+0xfc>)
 8017820:	4293      	cmp	r3, r2
 8017822:	d103      	bne.n	801782c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	691a      	ldr	r2, [r3, #16]
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	2201      	movs	r2, #1
 8017830:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	691b      	ldr	r3, [r3, #16]
 8017836:	f003 0301 	and.w	r3, r3, #1
 801783a:	2b01      	cmp	r3, #1
 801783c:	d105      	bne.n	801784a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	691b      	ldr	r3, [r3, #16]
 8017842:	f023 0201 	bic.w	r2, r3, #1
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	611a      	str	r2, [r3, #16]
  }
}
 801784a:	bf00      	nop
 801784c:	3714      	adds	r7, #20
 801784e:	46bd      	mov	sp, r7
 8017850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	40010000 	.word	0x40010000
 801785c:	40000400 	.word	0x40000400
 8017860:	40000800 	.word	0x40000800
 8017864:	40000c00 	.word	0x40000c00
 8017868:	40014000 	.word	0x40014000
 801786c:	40014400 	.word	0x40014400
 8017870:	40014800 	.word	0x40014800

08017874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017874:	b480      	push	{r7}
 8017876:	b083      	sub	sp, #12
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801787c:	bf00      	nop
 801787e:	370c      	adds	r7, #12
 8017880:	46bd      	mov	sp, r7
 8017882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017886:	4770      	bx	lr

08017888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017888:	b480      	push	{r7}
 801788a:	b083      	sub	sp, #12
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017890:	bf00      	nop
 8017892:	370c      	adds	r7, #12
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr

0801789c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b082      	sub	sp, #8
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d101      	bne.n	80178ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80178aa:	2301      	movs	r3, #1
 80178ac:	e042      	b.n	8017934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d106      	bne.n	80178c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2200      	movs	r2, #0
 80178be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	f7fb f8a2 	bl	8012a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2224      	movs	r2, #36	; 0x24
 80178cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	68da      	ldr	r2, [r3, #12]
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80178de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f000 fd11 	bl	8018308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	691a      	ldr	r2, [r3, #16]
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80178f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	695a      	ldr	r2, [r3, #20]
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	68da      	ldr	r2, [r3, #12]
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8017914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	2200      	movs	r2, #0
 801791a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2220      	movs	r2, #32
 8017920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2220      	movs	r2, #32
 8017928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2200      	movs	r2, #0
 8017930:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8017932:	2300      	movs	r3, #0
}
 8017934:	4618      	mov	r0, r3
 8017936:	3708      	adds	r7, #8
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}

0801793c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b08c      	sub	sp, #48	; 0x30
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	4613      	mov	r3, r2
 8017948:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017950:	b2db      	uxtb	r3, r3
 8017952:	2b20      	cmp	r3, #32
 8017954:	d14a      	bne.n	80179ec <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d002      	beq.n	8017962 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 801795c:	88fb      	ldrh	r3, [r7, #6]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d101      	bne.n	8017966 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8017962:	2301      	movs	r3, #1
 8017964:	e043      	b.n	80179ee <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	2201      	movs	r2, #1
 801796a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	2200      	movs	r2, #0
 8017970:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8017972:	88fb      	ldrh	r3, [r7, #6]
 8017974:	461a      	mov	r2, r3
 8017976:	68b9      	ldr	r1, [r7, #8]
 8017978:	68f8      	ldr	r0, [r7, #12]
 801797a:	f000 faed 	bl	8017f58 <UART_Start_Receive_IT>
 801797e:	4603      	mov	r3, r0
 8017980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8017984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017988:	2b00      	cmp	r3, #0
 801798a:	d12c      	bne.n	80179e6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017990:	2b01      	cmp	r3, #1
 8017992:	d125      	bne.n	80179e0 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017994:	2300      	movs	r3, #0
 8017996:	613b      	str	r3, [r7, #16]
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	613b      	str	r3, [r7, #16]
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	685b      	ldr	r3, [r3, #4]
 80179a6:	613b      	str	r3, [r7, #16]
 80179a8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	330c      	adds	r3, #12
 80179b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179b2:	69bb      	ldr	r3, [r7, #24]
 80179b4:	e853 3f00 	ldrex	r3, [r3]
 80179b8:	617b      	str	r3, [r7, #20]
   return(result);
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	f043 0310 	orr.w	r3, r3, #16
 80179c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	330c      	adds	r3, #12
 80179c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179ca:	627a      	str	r2, [r7, #36]	; 0x24
 80179cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179ce:	6a39      	ldr	r1, [r7, #32]
 80179d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179d2:	e841 2300 	strex	r3, r2, [r1]
 80179d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80179d8:	69fb      	ldr	r3, [r7, #28]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d1e5      	bne.n	80179aa <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80179de:	e002      	b.n	80179e6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80179e0:	2301      	movs	r3, #1
 80179e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80179e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80179ea:	e000      	b.n	80179ee <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80179ec:	2302      	movs	r3, #2
  }
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3730      	adds	r7, #48	; 0x30
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}
	...

080179f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b0ba      	sub	sp, #232	; 0xe8
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	68db      	ldr	r3, [r3, #12]
 8017a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	695b      	ldr	r3, [r3, #20]
 8017a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017a1e:	2300      	movs	r3, #0
 8017a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8017a24:	2300      	movs	r3, #0
 8017a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8017a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017a2e:	f003 030f 	and.w	r3, r3, #15
 8017a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8017a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d10f      	bne.n	8017a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017a42:	f003 0320 	and.w	r3, r3, #32
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d009      	beq.n	8017a5e <HAL_UART_IRQHandler+0x66>
 8017a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017a4e:	f003 0320 	and.w	r3, r3, #32
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d003      	beq.n	8017a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f000 fb97 	bl	801818a <UART_Receive_IT>
      return;
 8017a5c:	e25b      	b.n	8017f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8017a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	f000 80de 	beq.w	8017c24 <HAL_UART_IRQHandler+0x22c>
 8017a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017a6c:	f003 0301 	and.w	r3, r3, #1
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d106      	bne.n	8017a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8017a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017a78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	f000 80d1 	beq.w	8017c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8017a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017a86:	f003 0301 	and.w	r3, r3, #1
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d00b      	beq.n	8017aa6 <HAL_UART_IRQHandler+0xae>
 8017a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d005      	beq.n	8017aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a9e:	f043 0201 	orr.w	r2, r3, #1
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017aaa:	f003 0304 	and.w	r3, r3, #4
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d00b      	beq.n	8017aca <HAL_UART_IRQHandler+0xd2>
 8017ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017ab6:	f003 0301 	and.w	r3, r3, #1
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d005      	beq.n	8017aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ac2:	f043 0202 	orr.w	r2, r3, #2
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017ace:	f003 0302 	and.w	r3, r3, #2
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d00b      	beq.n	8017aee <HAL_UART_IRQHandler+0xf6>
 8017ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017ada:	f003 0301 	and.w	r3, r3, #1
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d005      	beq.n	8017aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ae6:	f043 0204 	orr.w	r2, r3, #4
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017af2:	f003 0308 	and.w	r3, r3, #8
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d011      	beq.n	8017b1e <HAL_UART_IRQHandler+0x126>
 8017afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017afe:	f003 0320 	and.w	r3, r3, #32
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d105      	bne.n	8017b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8017b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017b0a:	f003 0301 	and.w	r3, r3, #1
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d005      	beq.n	8017b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b16:	f043 0208 	orr.w	r2, r3, #8
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f000 81f2 	beq.w	8017f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b2c:	f003 0320 	and.w	r3, r3, #32
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d008      	beq.n	8017b46 <HAL_UART_IRQHandler+0x14e>
 8017b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b38:	f003 0320 	and.w	r3, r3, #32
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d002      	beq.n	8017b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f000 fb22 	bl	801818a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	695b      	ldr	r3, [r3, #20]
 8017b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b50:	2b40      	cmp	r3, #64	; 0x40
 8017b52:	bf0c      	ite	eq
 8017b54:	2301      	moveq	r3, #1
 8017b56:	2300      	movne	r3, #0
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b62:	f003 0308 	and.w	r3, r3, #8
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d103      	bne.n	8017b72 <HAL_UART_IRQHandler+0x17a>
 8017b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d04f      	beq.n	8017c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017b72:	6878      	ldr	r0, [r7, #4]
 8017b74:	f000 fa2a 	bl	8017fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	695b      	ldr	r3, [r3, #20]
 8017b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b82:	2b40      	cmp	r3, #64	; 0x40
 8017b84:	d141      	bne.n	8017c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	3314      	adds	r3, #20
 8017b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017b94:	e853 3f00 	ldrex	r3, [r3]
 8017b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8017b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	3314      	adds	r3, #20
 8017bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8017bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8017bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017bc2:	e841 2300 	strex	r3, r2, [r1]
 8017bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d1d9      	bne.n	8017b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d013      	beq.n	8017c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bde:	4a7e      	ldr	r2, [pc, #504]	; (8017dd8 <HAL_UART_IRQHandler+0x3e0>)
 8017be0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7fd ff32 	bl	8015a50 <HAL_DMA_Abort_IT>
 8017bec:	4603      	mov	r3, r0
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d016      	beq.n	8017c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017bfc:	4610      	mov	r0, r2
 8017bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c00:	e00e      	b.n	8017c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017c02:	6878      	ldr	r0, [r7, #4]
 8017c04:	f000 f99e 	bl	8017f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c08:	e00a      	b.n	8017c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	f000 f99a 	bl	8017f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c10:	e006      	b.n	8017c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f000 f996 	bl	8017f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8017c1e:	e175      	b.n	8017f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c20:	bf00      	nop
    return;
 8017c22:	e173      	b.n	8017f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	f040 814f 	bne.w	8017ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c32:	f003 0310 	and.w	r3, r3, #16
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	f000 8148 	beq.w	8017ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c40:	f003 0310 	and.w	r3, r3, #16
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	f000 8141 	beq.w	8017ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	60bb      	str	r3, [r7, #8]
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	60bb      	str	r3, [r7, #8]
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	685b      	ldr	r3, [r3, #4]
 8017c5c:	60bb      	str	r3, [r7, #8]
 8017c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	695b      	ldr	r3, [r3, #20]
 8017c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c6a:	2b40      	cmp	r3, #64	; 0x40
 8017c6c:	f040 80b6 	bne.w	8017ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	685b      	ldr	r3, [r3, #4]
 8017c78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	f000 8145 	beq.w	8017f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	f080 813e 	bcs.w	8017f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ca0:	69db      	ldr	r3, [r3, #28]
 8017ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017ca6:	f000 8088 	beq.w	8017dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	330c      	adds	r3, #12
 8017cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017cb8:	e853 3f00 	ldrex	r3, [r3]
 8017cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	330c      	adds	r3, #12
 8017cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017ce6:	e841 2300 	strex	r3, r2, [r1]
 8017cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d1d9      	bne.n	8017caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	3314      	adds	r3, #20
 8017cfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d00:	e853 3f00 	ldrex	r3, [r3]
 8017d04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017d08:	f023 0301 	bic.w	r3, r3, #1
 8017d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	3314      	adds	r3, #20
 8017d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017d1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017d26:	e841 2300 	strex	r3, r2, [r1]
 8017d2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d1e1      	bne.n	8017cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	3314      	adds	r3, #20
 8017d38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017d3c:	e853 3f00 	ldrex	r3, [r3]
 8017d40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	3314      	adds	r3, #20
 8017d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017d56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017d58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017d5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017d5e:	e841 2300 	strex	r3, r2, [r1]
 8017d62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d1e3      	bne.n	8017d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2220      	movs	r2, #32
 8017d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2200      	movs	r2, #0
 8017d76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	330c      	adds	r3, #12
 8017d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d82:	e853 3f00 	ldrex	r3, [r3]
 8017d86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d8a:	f023 0310 	bic.w	r3, r3, #16
 8017d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	330c      	adds	r3, #12
 8017d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017d9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8017d9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017da0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017da2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017da4:	e841 2300 	strex	r3, r2, [r1]
 8017da8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d1e3      	bne.n	8017d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017db4:	4618      	mov	r0, r3
 8017db6:	f7fd fddb 	bl	8015970 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2202      	movs	r2, #2
 8017dbe:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017dc8:	b29b      	uxth	r3, r3
 8017dca:	1ad3      	subs	r3, r2, r3
 8017dcc:	b29b      	uxth	r3, r3
 8017dce:	4619      	mov	r1, r3
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f7f9 f949 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017dd6:	e09b      	b.n	8017f10 <HAL_UART_IRQHandler+0x518>
 8017dd8:	08018093 	.word	0x08018093
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	1ad3      	subs	r3, r2, r3
 8017de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017df0:	b29b      	uxth	r3, r3
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	f000 808e 	beq.w	8017f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f000 8089 	beq.w	8017f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	330c      	adds	r3, #12
 8017e08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e0c:	e853 3f00 	ldrex	r3, [r3]
 8017e10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	330c      	adds	r3, #12
 8017e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017e26:	647a      	str	r2, [r7, #68]	; 0x44
 8017e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e2e:	e841 2300 	strex	r3, r2, [r1]
 8017e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d1e3      	bne.n	8017e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	3314      	adds	r3, #20
 8017e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e44:	e853 3f00 	ldrex	r3, [r3]
 8017e48:	623b      	str	r3, [r7, #32]
   return(result);
 8017e4a:	6a3b      	ldr	r3, [r7, #32]
 8017e4c:	f023 0301 	bic.w	r3, r3, #1
 8017e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	3314      	adds	r3, #20
 8017e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017e5e:	633a      	str	r2, [r7, #48]	; 0x30
 8017e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e66:	e841 2300 	strex	r3, r2, [r1]
 8017e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d1e3      	bne.n	8017e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	2220      	movs	r2, #32
 8017e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	330c      	adds	r3, #12
 8017e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	e853 3f00 	ldrex	r3, [r3]
 8017e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	f023 0310 	bic.w	r3, r3, #16
 8017e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	330c      	adds	r3, #12
 8017ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017ea4:	61fa      	str	r2, [r7, #28]
 8017ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ea8:	69b9      	ldr	r1, [r7, #24]
 8017eaa:	69fa      	ldr	r2, [r7, #28]
 8017eac:	e841 2300 	strex	r3, r2, [r1]
 8017eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8017eb2:	697b      	ldr	r3, [r7, #20]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d1e3      	bne.n	8017e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	2202      	movs	r2, #2
 8017ebc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f7f9 f8cf 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017eca:	e023      	b.n	8017f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d009      	beq.n	8017eec <HAL_UART_IRQHandler+0x4f4>
 8017ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d003      	beq.n	8017eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017ee4:	6878      	ldr	r0, [r7, #4]
 8017ee6:	f000 f8e8 	bl	80180ba <UART_Transmit_IT>
    return;
 8017eea:	e014      	b.n	8017f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d00e      	beq.n	8017f16 <HAL_UART_IRQHandler+0x51e>
 8017ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d008      	beq.n	8017f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	f000 f928 	bl	801815a <UART_EndTransmit_IT>
    return;
 8017f0a:	e004      	b.n	8017f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8017f0c:	bf00      	nop
 8017f0e:	e002      	b.n	8017f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8017f10:	bf00      	nop
 8017f12:	e000      	b.n	8017f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8017f14:	bf00      	nop
  }
}
 8017f16:	37e8      	adds	r7, #232	; 0xe8
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}

08017f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017f1c:	b480      	push	{r7}
 8017f1e:	b083      	sub	sp, #12
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017f24:	bf00      	nop
 8017f26:	370c      	adds	r7, #12
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2e:	4770      	bx	lr

08017f30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017f30:	b480      	push	{r7}
 8017f32:	b083      	sub	sp, #12
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8017f38:	bf00      	nop
 8017f3a:	370c      	adds	r7, #12
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr

08017f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017f4c:	bf00      	nop
 8017f4e:	370c      	adds	r7, #12
 8017f50:	46bd      	mov	sp, r7
 8017f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f56:	4770      	bx	lr

08017f58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017f58:	b480      	push	{r7}
 8017f5a:	b085      	sub	sp, #20
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	60f8      	str	r0, [r7, #12]
 8017f60:	60b9      	str	r1, [r7, #8]
 8017f62:	4613      	mov	r3, r2
 8017f64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	68ba      	ldr	r2, [r7, #8]
 8017f6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	88fa      	ldrh	r2, [r7, #6]
 8017f70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	88fa      	ldrh	r2, [r7, #6]
 8017f76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	2222      	movs	r2, #34	; 0x22
 8017f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	691b      	ldr	r3, [r3, #16]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d007      	beq.n	8017f9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	68da      	ldr	r2, [r3, #12]
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	695a      	ldr	r2, [r3, #20]
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	f042 0201 	orr.w	r2, r2, #1
 8017fac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	68da      	ldr	r2, [r3, #12]
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	f042 0220 	orr.w	r2, r2, #32
 8017fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017fbe:	2300      	movs	r3, #0
}
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	3714      	adds	r7, #20
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fca:	4770      	bx	lr

08017fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b095      	sub	sp, #84	; 0x54
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	330c      	adds	r3, #12
 8017fda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fde:	e853 3f00 	ldrex	r3, [r3]
 8017fe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	330c      	adds	r3, #12
 8017ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017ff4:	643a      	str	r2, [r7, #64]	; 0x40
 8017ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ffc:	e841 2300 	strex	r3, r2, [r1]
 8018000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018004:	2b00      	cmp	r3, #0
 8018006:	d1e5      	bne.n	8017fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	3314      	adds	r3, #20
 801800e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018010:	6a3b      	ldr	r3, [r7, #32]
 8018012:	e853 3f00 	ldrex	r3, [r3]
 8018016:	61fb      	str	r3, [r7, #28]
   return(result);
 8018018:	69fb      	ldr	r3, [r7, #28]
 801801a:	f023 0301 	bic.w	r3, r3, #1
 801801e:	64bb      	str	r3, [r7, #72]	; 0x48
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	3314      	adds	r3, #20
 8018026:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018028:	62fa      	str	r2, [r7, #44]	; 0x2c
 801802a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801802c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801802e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018030:	e841 2300 	strex	r3, r2, [r1]
 8018034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018038:	2b00      	cmp	r3, #0
 801803a:	d1e5      	bne.n	8018008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018040:	2b01      	cmp	r3, #1
 8018042:	d119      	bne.n	8018078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	330c      	adds	r3, #12
 801804a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	e853 3f00 	ldrex	r3, [r3]
 8018052:	60bb      	str	r3, [r7, #8]
   return(result);
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	f023 0310 	bic.w	r3, r3, #16
 801805a:	647b      	str	r3, [r7, #68]	; 0x44
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	330c      	adds	r3, #12
 8018062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018064:	61ba      	str	r2, [r7, #24]
 8018066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018068:	6979      	ldr	r1, [r7, #20]
 801806a:	69ba      	ldr	r2, [r7, #24]
 801806c:	e841 2300 	strex	r3, r2, [r1]
 8018070:	613b      	str	r3, [r7, #16]
   return(result);
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d1e5      	bne.n	8018044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2220      	movs	r2, #32
 801807c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2200      	movs	r2, #0
 8018084:	631a      	str	r2, [r3, #48]	; 0x30
}
 8018086:	bf00      	nop
 8018088:	3754      	adds	r7, #84	; 0x54
 801808a:	46bd      	mov	sp, r7
 801808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018090:	4770      	bx	lr

08018092 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018092:	b580      	push	{r7, lr}
 8018094:	b084      	sub	sp, #16
 8018096:	af00      	add	r7, sp, #0
 8018098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801809e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	2200      	movs	r2, #0
 80180a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	2200      	movs	r2, #0
 80180aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80180ac:	68f8      	ldr	r0, [r7, #12]
 80180ae:	f7ff ff49 	bl	8017f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80180b2:	bf00      	nop
 80180b4:	3710      	adds	r7, #16
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}

080180ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80180ba:	b480      	push	{r7}
 80180bc:	b085      	sub	sp, #20
 80180be:	af00      	add	r7, sp, #0
 80180c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80180c8:	b2db      	uxtb	r3, r3
 80180ca:	2b21      	cmp	r3, #33	; 0x21
 80180cc:	d13e      	bne.n	801814c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	689b      	ldr	r3, [r3, #8]
 80180d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80180d6:	d114      	bne.n	8018102 <UART_Transmit_IT+0x48>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	691b      	ldr	r3, [r3, #16]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d110      	bne.n	8018102 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	6a1b      	ldr	r3, [r3, #32]
 80180e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	881b      	ldrh	r3, [r3, #0]
 80180ea:	461a      	mov	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80180f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6a1b      	ldr	r3, [r3, #32]
 80180fa:	1c9a      	adds	r2, r3, #2
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	621a      	str	r2, [r3, #32]
 8018100:	e008      	b.n	8018114 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6a1b      	ldr	r3, [r3, #32]
 8018106:	1c59      	adds	r1, r3, #1
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	6211      	str	r1, [r2, #32]
 801810c:	781a      	ldrb	r2, [r3, #0]
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018118:	b29b      	uxth	r3, r3
 801811a:	3b01      	subs	r3, #1
 801811c:	b29b      	uxth	r3, r3
 801811e:	687a      	ldr	r2, [r7, #4]
 8018120:	4619      	mov	r1, r3
 8018122:	84d1      	strh	r1, [r2, #38]	; 0x26
 8018124:	2b00      	cmp	r3, #0
 8018126:	d10f      	bne.n	8018148 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	68da      	ldr	r2, [r3, #12]
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018136:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	68da      	ldr	r2, [r3, #12]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018146:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8018148:	2300      	movs	r3, #0
 801814a:	e000      	b.n	801814e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801814c:	2302      	movs	r3, #2
  }
}
 801814e:	4618      	mov	r0, r3
 8018150:	3714      	adds	r7, #20
 8018152:	46bd      	mov	sp, r7
 8018154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018158:	4770      	bx	lr

0801815a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801815a:	b580      	push	{r7, lr}
 801815c:	b082      	sub	sp, #8
 801815e:	af00      	add	r7, sp, #0
 8018160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	68da      	ldr	r2, [r3, #12]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2220      	movs	r2, #32
 8018176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801817a:	6878      	ldr	r0, [r7, #4]
 801817c:	f7ff fece 	bl	8017f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8018180:	2300      	movs	r3, #0
}
 8018182:	4618      	mov	r0, r3
 8018184:	3708      	adds	r7, #8
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}

0801818a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801818a:	b580      	push	{r7, lr}
 801818c:	b08c      	sub	sp, #48	; 0x30
 801818e:	af00      	add	r7, sp, #0
 8018190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018198:	b2db      	uxtb	r3, r3
 801819a:	2b22      	cmp	r3, #34	; 0x22
 801819c:	f040 80ae 	bne.w	80182fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	689b      	ldr	r3, [r3, #8]
 80181a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80181a8:	d117      	bne.n	80181da <UART_Receive_IT+0x50>
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	691b      	ldr	r3, [r3, #16]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d113      	bne.n	80181da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80181b2:	2300      	movs	r3, #0
 80181b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	685b      	ldr	r3, [r3, #4]
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181c8:	b29a      	uxth	r2, r3
 80181ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181d2:	1c9a      	adds	r2, r3, #2
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	629a      	str	r2, [r3, #40]	; 0x28
 80181d8:	e026      	b.n	8018228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80181e0:	2300      	movs	r3, #0
 80181e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	689b      	ldr	r3, [r3, #8]
 80181e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80181ec:	d007      	beq.n	80181fe <UART_Receive_IT+0x74>
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	689b      	ldr	r3, [r3, #8]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d10a      	bne.n	801820c <UART_Receive_IT+0x82>
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	691b      	ldr	r3, [r3, #16]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d106      	bne.n	801820c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	b2da      	uxtb	r2, r3
 8018206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018208:	701a      	strb	r2, [r3, #0]
 801820a:	e008      	b.n	801821e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	685b      	ldr	r3, [r3, #4]
 8018212:	b2db      	uxtb	r3, r3
 8018214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018218:	b2da      	uxtb	r2, r3
 801821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801821c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018222:	1c5a      	adds	r2, r3, #1
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801822c:	b29b      	uxth	r3, r3
 801822e:	3b01      	subs	r3, #1
 8018230:	b29b      	uxth	r3, r3
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	4619      	mov	r1, r3
 8018236:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8018238:	2b00      	cmp	r3, #0
 801823a:	d15d      	bne.n	80182f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	68da      	ldr	r2, [r3, #12]
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	f022 0220 	bic.w	r2, r2, #32
 801824a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	68da      	ldr	r2, [r3, #12]
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801825a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	695a      	ldr	r2, [r3, #20]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	f022 0201 	bic.w	r2, r2, #1
 801826a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2220      	movs	r2, #32
 8018270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2200      	movs	r2, #0
 8018278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801827e:	2b01      	cmp	r3, #1
 8018280:	d135      	bne.n	80182ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2200      	movs	r2, #0
 8018286:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	330c      	adds	r3, #12
 801828e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018290:	697b      	ldr	r3, [r7, #20]
 8018292:	e853 3f00 	ldrex	r3, [r3]
 8018296:	613b      	str	r3, [r7, #16]
   return(result);
 8018298:	693b      	ldr	r3, [r7, #16]
 801829a:	f023 0310 	bic.w	r3, r3, #16
 801829e:	627b      	str	r3, [r7, #36]	; 0x24
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	330c      	adds	r3, #12
 80182a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182a8:	623a      	str	r2, [r7, #32]
 80182aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182ac:	69f9      	ldr	r1, [r7, #28]
 80182ae:	6a3a      	ldr	r2, [r7, #32]
 80182b0:	e841 2300 	strex	r3, r2, [r1]
 80182b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80182b6:	69bb      	ldr	r3, [r7, #24]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d1e5      	bne.n	8018288 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	f003 0310 	and.w	r3, r3, #16
 80182c6:	2b10      	cmp	r3, #16
 80182c8:	d10a      	bne.n	80182e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80182ca:	2300      	movs	r3, #0
 80182cc:	60fb      	str	r3, [r7, #12]
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	60fb      	str	r3, [r7, #12]
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	685b      	ldr	r3, [r3, #4]
 80182dc:	60fb      	str	r3, [r7, #12]
 80182de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80182e4:	4619      	mov	r1, r3
 80182e6:	6878      	ldr	r0, [r7, #4]
 80182e8:	f7f8 febe 	bl	8011068 <HAL_UARTEx_RxEventCallback>
 80182ec:	e002      	b.n	80182f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80182ee:	6878      	ldr	r0, [r7, #4]
 80182f0:	f7ff fe1e 	bl	8017f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80182f4:	2300      	movs	r3, #0
 80182f6:	e002      	b.n	80182fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80182f8:	2300      	movs	r3, #0
 80182fa:	e000      	b.n	80182fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80182fc:	2302      	movs	r3, #2
  }
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3730      	adds	r7, #48	; 0x30
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
	...

08018308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801830c:	b0c0      	sub	sp, #256	; 0x100
 801830e:	af00      	add	r7, sp, #0
 8018310:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	691b      	ldr	r3, [r3, #16]
 801831c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018324:	68d9      	ldr	r1, [r3, #12]
 8018326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801832a:	681a      	ldr	r2, [r3, #0]
 801832c:	ea40 0301 	orr.w	r3, r0, r1
 8018330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018336:	689a      	ldr	r2, [r3, #8]
 8018338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801833c:	691b      	ldr	r3, [r3, #16]
 801833e:	431a      	orrs	r2, r3
 8018340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018344:	695b      	ldr	r3, [r3, #20]
 8018346:	431a      	orrs	r2, r3
 8018348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801834c:	69db      	ldr	r3, [r3, #28]
 801834e:	4313      	orrs	r3, r2
 8018350:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8018354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018360:	f021 010c 	bic.w	r1, r1, #12
 8018364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018368:	681a      	ldr	r2, [r3, #0]
 801836a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801836e:	430b      	orrs	r3, r1
 8018370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	695b      	ldr	r3, [r3, #20]
 801837a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018382:	6999      	ldr	r1, [r3, #24]
 8018384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018388:	681a      	ldr	r2, [r3, #0]
 801838a:	ea40 0301 	orr.w	r3, r0, r1
 801838e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018394:	681a      	ldr	r2, [r3, #0]
 8018396:	4b8f      	ldr	r3, [pc, #572]	; (80185d4 <UART_SetConfig+0x2cc>)
 8018398:	429a      	cmp	r2, r3
 801839a:	d005      	beq.n	80183a8 <UART_SetConfig+0xa0>
 801839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	4b8d      	ldr	r3, [pc, #564]	; (80185d8 <UART_SetConfig+0x2d0>)
 80183a4:	429a      	cmp	r2, r3
 80183a6:	d104      	bne.n	80183b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80183a8:	f7fe f9e8 	bl	801677c <HAL_RCC_GetPCLK2Freq>
 80183ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80183b0:	e003      	b.n	80183ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80183b2:	f7fe f9cf 	bl	8016754 <HAL_RCC_GetPCLK1Freq>
 80183b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80183ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183be:	69db      	ldr	r3, [r3, #28]
 80183c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80183c4:	f040 810c 	bne.w	80185e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80183c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80183cc:	2200      	movs	r2, #0
 80183ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80183d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80183d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80183da:	4622      	mov	r2, r4
 80183dc:	462b      	mov	r3, r5
 80183de:	1891      	adds	r1, r2, r2
 80183e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80183e2:	415b      	adcs	r3, r3
 80183e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80183e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80183ea:	4621      	mov	r1, r4
 80183ec:	eb12 0801 	adds.w	r8, r2, r1
 80183f0:	4629      	mov	r1, r5
 80183f2:	eb43 0901 	adc.w	r9, r3, r1
 80183f6:	f04f 0200 	mov.w	r2, #0
 80183fa:	f04f 0300 	mov.w	r3, #0
 80183fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8018402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8018406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801840a:	4690      	mov	r8, r2
 801840c:	4699      	mov	r9, r3
 801840e:	4623      	mov	r3, r4
 8018410:	eb18 0303 	adds.w	r3, r8, r3
 8018414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018418:	462b      	mov	r3, r5
 801841a:	eb49 0303 	adc.w	r3, r9, r3
 801841e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018426:	685b      	ldr	r3, [r3, #4]
 8018428:	2200      	movs	r2, #0
 801842a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801842e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8018432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8018436:	460b      	mov	r3, r1
 8018438:	18db      	adds	r3, r3, r3
 801843a:	653b      	str	r3, [r7, #80]	; 0x50
 801843c:	4613      	mov	r3, r2
 801843e:	eb42 0303 	adc.w	r3, r2, r3
 8018442:	657b      	str	r3, [r7, #84]	; 0x54
 8018444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8018448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801844c:	f7f8 fc34 	bl	8010cb8 <__aeabi_uldivmod>
 8018450:	4602      	mov	r2, r0
 8018452:	460b      	mov	r3, r1
 8018454:	4b61      	ldr	r3, [pc, #388]	; (80185dc <UART_SetConfig+0x2d4>)
 8018456:	fba3 2302 	umull	r2, r3, r3, r2
 801845a:	095b      	lsrs	r3, r3, #5
 801845c:	011c      	lsls	r4, r3, #4
 801845e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018462:	2200      	movs	r2, #0
 8018464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018468:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801846c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8018470:	4642      	mov	r2, r8
 8018472:	464b      	mov	r3, r9
 8018474:	1891      	adds	r1, r2, r2
 8018476:	64b9      	str	r1, [r7, #72]	; 0x48
 8018478:	415b      	adcs	r3, r3
 801847a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801847c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018480:	4641      	mov	r1, r8
 8018482:	eb12 0a01 	adds.w	sl, r2, r1
 8018486:	4649      	mov	r1, r9
 8018488:	eb43 0b01 	adc.w	fp, r3, r1
 801848c:	f04f 0200 	mov.w	r2, #0
 8018490:	f04f 0300 	mov.w	r3, #0
 8018494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801849c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80184a0:	4692      	mov	sl, r2
 80184a2:	469b      	mov	fp, r3
 80184a4:	4643      	mov	r3, r8
 80184a6:	eb1a 0303 	adds.w	r3, sl, r3
 80184aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80184ae:	464b      	mov	r3, r9
 80184b0:	eb4b 0303 	adc.w	r3, fp, r3
 80184b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80184b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	2200      	movs	r2, #0
 80184c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80184c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80184c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80184cc:	460b      	mov	r3, r1
 80184ce:	18db      	adds	r3, r3, r3
 80184d0:	643b      	str	r3, [r7, #64]	; 0x40
 80184d2:	4613      	mov	r3, r2
 80184d4:	eb42 0303 	adc.w	r3, r2, r3
 80184d8:	647b      	str	r3, [r7, #68]	; 0x44
 80184da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80184de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80184e2:	f7f8 fbe9 	bl	8010cb8 <__aeabi_uldivmod>
 80184e6:	4602      	mov	r2, r0
 80184e8:	460b      	mov	r3, r1
 80184ea:	4611      	mov	r1, r2
 80184ec:	4b3b      	ldr	r3, [pc, #236]	; (80185dc <UART_SetConfig+0x2d4>)
 80184ee:	fba3 2301 	umull	r2, r3, r3, r1
 80184f2:	095b      	lsrs	r3, r3, #5
 80184f4:	2264      	movs	r2, #100	; 0x64
 80184f6:	fb02 f303 	mul.w	r3, r2, r3
 80184fa:	1acb      	subs	r3, r1, r3
 80184fc:	00db      	lsls	r3, r3, #3
 80184fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8018502:	4b36      	ldr	r3, [pc, #216]	; (80185dc <UART_SetConfig+0x2d4>)
 8018504:	fba3 2302 	umull	r2, r3, r3, r2
 8018508:	095b      	lsrs	r3, r3, #5
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018510:	441c      	add	r4, r3
 8018512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018516:	2200      	movs	r2, #0
 8018518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801851c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8018524:	4642      	mov	r2, r8
 8018526:	464b      	mov	r3, r9
 8018528:	1891      	adds	r1, r2, r2
 801852a:	63b9      	str	r1, [r7, #56]	; 0x38
 801852c:	415b      	adcs	r3, r3
 801852e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018534:	4641      	mov	r1, r8
 8018536:	1851      	adds	r1, r2, r1
 8018538:	6339      	str	r1, [r7, #48]	; 0x30
 801853a:	4649      	mov	r1, r9
 801853c:	414b      	adcs	r3, r1
 801853e:	637b      	str	r3, [r7, #52]	; 0x34
 8018540:	f04f 0200 	mov.w	r2, #0
 8018544:	f04f 0300 	mov.w	r3, #0
 8018548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801854c:	4659      	mov	r1, fp
 801854e:	00cb      	lsls	r3, r1, #3
 8018550:	4651      	mov	r1, sl
 8018552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018556:	4651      	mov	r1, sl
 8018558:	00ca      	lsls	r2, r1, #3
 801855a:	4610      	mov	r0, r2
 801855c:	4619      	mov	r1, r3
 801855e:	4603      	mov	r3, r0
 8018560:	4642      	mov	r2, r8
 8018562:	189b      	adds	r3, r3, r2
 8018564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018568:	464b      	mov	r3, r9
 801856a:	460a      	mov	r2, r1
 801856c:	eb42 0303 	adc.w	r3, r2, r3
 8018570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	2200      	movs	r2, #0
 801857c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018580:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8018584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8018588:	460b      	mov	r3, r1
 801858a:	18db      	adds	r3, r3, r3
 801858c:	62bb      	str	r3, [r7, #40]	; 0x28
 801858e:	4613      	mov	r3, r2
 8018590:	eb42 0303 	adc.w	r3, r2, r3
 8018594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801859a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801859e:	f7f8 fb8b 	bl	8010cb8 <__aeabi_uldivmod>
 80185a2:	4602      	mov	r2, r0
 80185a4:	460b      	mov	r3, r1
 80185a6:	4b0d      	ldr	r3, [pc, #52]	; (80185dc <UART_SetConfig+0x2d4>)
 80185a8:	fba3 1302 	umull	r1, r3, r3, r2
 80185ac:	095b      	lsrs	r3, r3, #5
 80185ae:	2164      	movs	r1, #100	; 0x64
 80185b0:	fb01 f303 	mul.w	r3, r1, r3
 80185b4:	1ad3      	subs	r3, r2, r3
 80185b6:	00db      	lsls	r3, r3, #3
 80185b8:	3332      	adds	r3, #50	; 0x32
 80185ba:	4a08      	ldr	r2, [pc, #32]	; (80185dc <UART_SetConfig+0x2d4>)
 80185bc:	fba2 2303 	umull	r2, r3, r2, r3
 80185c0:	095b      	lsrs	r3, r3, #5
 80185c2:	f003 0207 	and.w	r2, r3, #7
 80185c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	4422      	add	r2, r4
 80185ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80185d0:	e106      	b.n	80187e0 <UART_SetConfig+0x4d8>
 80185d2:	bf00      	nop
 80185d4:	40011000 	.word	0x40011000
 80185d8:	40011400 	.word	0x40011400
 80185dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80185e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80185e4:	2200      	movs	r2, #0
 80185e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80185ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80185ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80185f2:	4642      	mov	r2, r8
 80185f4:	464b      	mov	r3, r9
 80185f6:	1891      	adds	r1, r2, r2
 80185f8:	6239      	str	r1, [r7, #32]
 80185fa:	415b      	adcs	r3, r3
 80185fc:	627b      	str	r3, [r7, #36]	; 0x24
 80185fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018602:	4641      	mov	r1, r8
 8018604:	1854      	adds	r4, r2, r1
 8018606:	4649      	mov	r1, r9
 8018608:	eb43 0501 	adc.w	r5, r3, r1
 801860c:	f04f 0200 	mov.w	r2, #0
 8018610:	f04f 0300 	mov.w	r3, #0
 8018614:	00eb      	lsls	r3, r5, #3
 8018616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801861a:	00e2      	lsls	r2, r4, #3
 801861c:	4614      	mov	r4, r2
 801861e:	461d      	mov	r5, r3
 8018620:	4643      	mov	r3, r8
 8018622:	18e3      	adds	r3, r4, r3
 8018624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018628:	464b      	mov	r3, r9
 801862a:	eb45 0303 	adc.w	r3, r5, r3
 801862e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	2200      	movs	r2, #0
 801863a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801863e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018642:	f04f 0200 	mov.w	r2, #0
 8018646:	f04f 0300 	mov.w	r3, #0
 801864a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801864e:	4629      	mov	r1, r5
 8018650:	008b      	lsls	r3, r1, #2
 8018652:	4621      	mov	r1, r4
 8018654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018658:	4621      	mov	r1, r4
 801865a:	008a      	lsls	r2, r1, #2
 801865c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8018660:	f7f8 fb2a 	bl	8010cb8 <__aeabi_uldivmod>
 8018664:	4602      	mov	r2, r0
 8018666:	460b      	mov	r3, r1
 8018668:	4b60      	ldr	r3, [pc, #384]	; (80187ec <UART_SetConfig+0x4e4>)
 801866a:	fba3 2302 	umull	r2, r3, r3, r2
 801866e:	095b      	lsrs	r3, r3, #5
 8018670:	011c      	lsls	r4, r3, #4
 8018672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018676:	2200      	movs	r2, #0
 8018678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801867c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8018680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8018684:	4642      	mov	r2, r8
 8018686:	464b      	mov	r3, r9
 8018688:	1891      	adds	r1, r2, r2
 801868a:	61b9      	str	r1, [r7, #24]
 801868c:	415b      	adcs	r3, r3
 801868e:	61fb      	str	r3, [r7, #28]
 8018690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018694:	4641      	mov	r1, r8
 8018696:	1851      	adds	r1, r2, r1
 8018698:	6139      	str	r1, [r7, #16]
 801869a:	4649      	mov	r1, r9
 801869c:	414b      	adcs	r3, r1
 801869e:	617b      	str	r3, [r7, #20]
 80186a0:	f04f 0200 	mov.w	r2, #0
 80186a4:	f04f 0300 	mov.w	r3, #0
 80186a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80186ac:	4659      	mov	r1, fp
 80186ae:	00cb      	lsls	r3, r1, #3
 80186b0:	4651      	mov	r1, sl
 80186b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80186b6:	4651      	mov	r1, sl
 80186b8:	00ca      	lsls	r2, r1, #3
 80186ba:	4610      	mov	r0, r2
 80186bc:	4619      	mov	r1, r3
 80186be:	4603      	mov	r3, r0
 80186c0:	4642      	mov	r2, r8
 80186c2:	189b      	adds	r3, r3, r2
 80186c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80186c8:	464b      	mov	r3, r9
 80186ca:	460a      	mov	r2, r1
 80186cc:	eb42 0303 	adc.w	r3, r2, r3
 80186d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80186d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	2200      	movs	r2, #0
 80186dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80186de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80186e0:	f04f 0200 	mov.w	r2, #0
 80186e4:	f04f 0300 	mov.w	r3, #0
 80186e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80186ec:	4649      	mov	r1, r9
 80186ee:	008b      	lsls	r3, r1, #2
 80186f0:	4641      	mov	r1, r8
 80186f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80186f6:	4641      	mov	r1, r8
 80186f8:	008a      	lsls	r2, r1, #2
 80186fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80186fe:	f7f8 fadb 	bl	8010cb8 <__aeabi_uldivmod>
 8018702:	4602      	mov	r2, r0
 8018704:	460b      	mov	r3, r1
 8018706:	4611      	mov	r1, r2
 8018708:	4b38      	ldr	r3, [pc, #224]	; (80187ec <UART_SetConfig+0x4e4>)
 801870a:	fba3 2301 	umull	r2, r3, r3, r1
 801870e:	095b      	lsrs	r3, r3, #5
 8018710:	2264      	movs	r2, #100	; 0x64
 8018712:	fb02 f303 	mul.w	r3, r2, r3
 8018716:	1acb      	subs	r3, r1, r3
 8018718:	011b      	lsls	r3, r3, #4
 801871a:	3332      	adds	r3, #50	; 0x32
 801871c:	4a33      	ldr	r2, [pc, #204]	; (80187ec <UART_SetConfig+0x4e4>)
 801871e:	fba2 2303 	umull	r2, r3, r2, r3
 8018722:	095b      	lsrs	r3, r3, #5
 8018724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018728:	441c      	add	r4, r3
 801872a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801872e:	2200      	movs	r2, #0
 8018730:	673b      	str	r3, [r7, #112]	; 0x70
 8018732:	677a      	str	r2, [r7, #116]	; 0x74
 8018734:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8018738:	4642      	mov	r2, r8
 801873a:	464b      	mov	r3, r9
 801873c:	1891      	adds	r1, r2, r2
 801873e:	60b9      	str	r1, [r7, #8]
 8018740:	415b      	adcs	r3, r3
 8018742:	60fb      	str	r3, [r7, #12]
 8018744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018748:	4641      	mov	r1, r8
 801874a:	1851      	adds	r1, r2, r1
 801874c:	6039      	str	r1, [r7, #0]
 801874e:	4649      	mov	r1, r9
 8018750:	414b      	adcs	r3, r1
 8018752:	607b      	str	r3, [r7, #4]
 8018754:	f04f 0200 	mov.w	r2, #0
 8018758:	f04f 0300 	mov.w	r3, #0
 801875c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018760:	4659      	mov	r1, fp
 8018762:	00cb      	lsls	r3, r1, #3
 8018764:	4651      	mov	r1, sl
 8018766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801876a:	4651      	mov	r1, sl
 801876c:	00ca      	lsls	r2, r1, #3
 801876e:	4610      	mov	r0, r2
 8018770:	4619      	mov	r1, r3
 8018772:	4603      	mov	r3, r0
 8018774:	4642      	mov	r2, r8
 8018776:	189b      	adds	r3, r3, r2
 8018778:	66bb      	str	r3, [r7, #104]	; 0x68
 801877a:	464b      	mov	r3, r9
 801877c:	460a      	mov	r2, r1
 801877e:	eb42 0303 	adc.w	r3, r2, r3
 8018782:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018788:	685b      	ldr	r3, [r3, #4]
 801878a:	2200      	movs	r2, #0
 801878c:	663b      	str	r3, [r7, #96]	; 0x60
 801878e:	667a      	str	r2, [r7, #100]	; 0x64
 8018790:	f04f 0200 	mov.w	r2, #0
 8018794:	f04f 0300 	mov.w	r3, #0
 8018798:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801879c:	4649      	mov	r1, r9
 801879e:	008b      	lsls	r3, r1, #2
 80187a0:	4641      	mov	r1, r8
 80187a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80187a6:	4641      	mov	r1, r8
 80187a8:	008a      	lsls	r2, r1, #2
 80187aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80187ae:	f7f8 fa83 	bl	8010cb8 <__aeabi_uldivmod>
 80187b2:	4602      	mov	r2, r0
 80187b4:	460b      	mov	r3, r1
 80187b6:	4b0d      	ldr	r3, [pc, #52]	; (80187ec <UART_SetConfig+0x4e4>)
 80187b8:	fba3 1302 	umull	r1, r3, r3, r2
 80187bc:	095b      	lsrs	r3, r3, #5
 80187be:	2164      	movs	r1, #100	; 0x64
 80187c0:	fb01 f303 	mul.w	r3, r1, r3
 80187c4:	1ad3      	subs	r3, r2, r3
 80187c6:	011b      	lsls	r3, r3, #4
 80187c8:	3332      	adds	r3, #50	; 0x32
 80187ca:	4a08      	ldr	r2, [pc, #32]	; (80187ec <UART_SetConfig+0x4e4>)
 80187cc:	fba2 2303 	umull	r2, r3, r2, r3
 80187d0:	095b      	lsrs	r3, r3, #5
 80187d2:	f003 020f 	and.w	r2, r3, #15
 80187d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	4422      	add	r2, r4
 80187de:	609a      	str	r2, [r3, #8]
}
 80187e0:	bf00      	nop
 80187e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80187e6:	46bd      	mov	sp, r7
 80187e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80187ec:	51eb851f 	.word	0x51eb851f

080187f0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b084      	sub	sp, #16
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80187f8:	4b22      	ldr	r3, [pc, #136]	; (8018884 <WIZCHIP_READ+0x94>)
 80187fa:	68db      	ldr	r3, [r3, #12]
 80187fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80187fe:	4b21      	ldr	r3, [pc, #132]	; (8018884 <WIZCHIP_READ+0x94>)
 8018800:	695b      	ldr	r3, [r3, #20]
 8018802:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018804:	4b1f      	ldr	r3, [pc, #124]	; (8018884 <WIZCHIP_READ+0x94>)
 8018806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018808:	2b00      	cmp	r3, #0
 801880a:	d003      	beq.n	8018814 <WIZCHIP_READ+0x24>
 801880c:	4b1d      	ldr	r3, [pc, #116]	; (8018884 <WIZCHIP_READ+0x94>)
 801880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018810:	2b00      	cmp	r3, #0
 8018812:	d114      	bne.n	801883e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018814:	4b1b      	ldr	r3, [pc, #108]	; (8018884 <WIZCHIP_READ+0x94>)
 8018816:	6a1b      	ldr	r3, [r3, #32]
 8018818:	687a      	ldr	r2, [r7, #4]
 801881a:	0c12      	lsrs	r2, r2, #16
 801881c:	b2d2      	uxtb	r2, r2
 801881e:	4610      	mov	r0, r2
 8018820:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018822:	4b18      	ldr	r3, [pc, #96]	; (8018884 <WIZCHIP_READ+0x94>)
 8018824:	6a1b      	ldr	r3, [r3, #32]
 8018826:	687a      	ldr	r2, [r7, #4]
 8018828:	0a12      	lsrs	r2, r2, #8
 801882a:	b2d2      	uxtb	r2, r2
 801882c:	4610      	mov	r0, r2
 801882e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018830:	4b14      	ldr	r3, [pc, #80]	; (8018884 <WIZCHIP_READ+0x94>)
 8018832:	6a1b      	ldr	r3, [r3, #32]
 8018834:	687a      	ldr	r2, [r7, #4]
 8018836:	b2d2      	uxtb	r2, r2
 8018838:	4610      	mov	r0, r2
 801883a:	4798      	blx	r3
 801883c:	e011      	b.n	8018862 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	0c1b      	lsrs	r3, r3, #16
 8018842:	b2db      	uxtb	r3, r3
 8018844:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	0a1b      	lsrs	r3, r3, #8
 801884a:	b2db      	uxtb	r3, r3
 801884c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	b2db      	uxtb	r3, r3
 8018852:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018854:	4b0b      	ldr	r3, [pc, #44]	; (8018884 <WIZCHIP_READ+0x94>)
 8018856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018858:	f107 020c 	add.w	r2, r7, #12
 801885c:	2103      	movs	r1, #3
 801885e:	4610      	mov	r0, r2
 8018860:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8018862:	4b08      	ldr	r3, [pc, #32]	; (8018884 <WIZCHIP_READ+0x94>)
 8018864:	69db      	ldr	r3, [r3, #28]
 8018866:	4798      	blx	r3
 8018868:	4603      	mov	r3, r0
 801886a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 801886c:	4b05      	ldr	r3, [pc, #20]	; (8018884 <WIZCHIP_READ+0x94>)
 801886e:	699b      	ldr	r3, [r3, #24]
 8018870:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018872:	4b04      	ldr	r3, [pc, #16]	; (8018884 <WIZCHIP_READ+0x94>)
 8018874:	691b      	ldr	r3, [r3, #16]
 8018876:	4798      	blx	r3
   return ret;
 8018878:	7bfb      	ldrb	r3, [r7, #15]
}
 801887a:	4618      	mov	r0, r3
 801887c:	3710      	adds	r7, #16
 801887e:	46bd      	mov	sp, r7
 8018880:	bd80      	pop	{r7, pc}
 8018882:	bf00      	nop
 8018884:	200000c4 	.word	0x200000c4

08018888 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b084      	sub	sp, #16
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
 8018890:	460b      	mov	r3, r1
 8018892:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8018894:	4b22      	ldr	r3, [pc, #136]	; (8018920 <WIZCHIP_WRITE+0x98>)
 8018896:	68db      	ldr	r3, [r3, #12]
 8018898:	4798      	blx	r3
   WIZCHIP.CS._select();
 801889a:	4b21      	ldr	r3, [pc, #132]	; (8018920 <WIZCHIP_WRITE+0x98>)
 801889c:	695b      	ldr	r3, [r3, #20]
 801889e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	f043 0304 	orr.w	r3, r3, #4
 80188a6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80188a8:	4b1d      	ldr	r3, [pc, #116]	; (8018920 <WIZCHIP_WRITE+0x98>)
 80188aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d119      	bne.n	80188e4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80188b0:	4b1b      	ldr	r3, [pc, #108]	; (8018920 <WIZCHIP_WRITE+0x98>)
 80188b2:	6a1b      	ldr	r3, [r3, #32]
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	0c12      	lsrs	r2, r2, #16
 80188b8:	b2d2      	uxtb	r2, r2
 80188ba:	4610      	mov	r0, r2
 80188bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80188be:	4b18      	ldr	r3, [pc, #96]	; (8018920 <WIZCHIP_WRITE+0x98>)
 80188c0:	6a1b      	ldr	r3, [r3, #32]
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	0a12      	lsrs	r2, r2, #8
 80188c6:	b2d2      	uxtb	r2, r2
 80188c8:	4610      	mov	r0, r2
 80188ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80188cc:	4b14      	ldr	r3, [pc, #80]	; (8018920 <WIZCHIP_WRITE+0x98>)
 80188ce:	6a1b      	ldr	r3, [r3, #32]
 80188d0:	687a      	ldr	r2, [r7, #4]
 80188d2:	b2d2      	uxtb	r2, r2
 80188d4:	4610      	mov	r0, r2
 80188d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80188d8:	4b11      	ldr	r3, [pc, #68]	; (8018920 <WIZCHIP_WRITE+0x98>)
 80188da:	6a1b      	ldr	r3, [r3, #32]
 80188dc:	78fa      	ldrb	r2, [r7, #3]
 80188de:	4610      	mov	r0, r2
 80188e0:	4798      	blx	r3
 80188e2:	e013      	b.n	801890c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	0c1b      	lsrs	r3, r3, #16
 80188e8:	b2db      	uxtb	r3, r3
 80188ea:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	0a1b      	lsrs	r3, r3, #8
 80188f0:	b2db      	uxtb	r3, r3
 80188f2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	b2db      	uxtb	r3, r3
 80188f8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80188fa:	78fb      	ldrb	r3, [r7, #3]
 80188fc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80188fe:	4b08      	ldr	r3, [pc, #32]	; (8018920 <WIZCHIP_WRITE+0x98>)
 8018900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018902:	f107 020c 	add.w	r2, r7, #12
 8018906:	2104      	movs	r1, #4
 8018908:	4610      	mov	r0, r2
 801890a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 801890c:	4b04      	ldr	r3, [pc, #16]	; (8018920 <WIZCHIP_WRITE+0x98>)
 801890e:	699b      	ldr	r3, [r3, #24]
 8018910:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018912:	4b03      	ldr	r3, [pc, #12]	; (8018920 <WIZCHIP_WRITE+0x98>)
 8018914:	691b      	ldr	r3, [r3, #16]
 8018916:	4798      	blx	r3
}
 8018918:	bf00      	nop
 801891a:	3710      	adds	r7, #16
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}
 8018920:	200000c4 	.word	0x200000c4

08018924 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018924:	b590      	push	{r4, r7, lr}
 8018926:	b087      	sub	sp, #28
 8018928:	af00      	add	r7, sp, #0
 801892a:	60f8      	str	r0, [r7, #12]
 801892c:	60b9      	str	r1, [r7, #8]
 801892e:	4613      	mov	r3, r2
 8018930:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018932:	4b2b      	ldr	r3, [pc, #172]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 8018934:	68db      	ldr	r3, [r3, #12]
 8018936:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018938:	4b29      	ldr	r3, [pc, #164]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 801893a:	695b      	ldr	r3, [r3, #20]
 801893c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801893e:	4b28      	ldr	r3, [pc, #160]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 8018940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018942:	2b00      	cmp	r3, #0
 8018944:	d003      	beq.n	801894e <WIZCHIP_READ_BUF+0x2a>
 8018946:	4b26      	ldr	r3, [pc, #152]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 8018948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801894a:	2b00      	cmp	r3, #0
 801894c:	d126      	bne.n	801899c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801894e:	4b24      	ldr	r3, [pc, #144]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 8018950:	6a1b      	ldr	r3, [r3, #32]
 8018952:	68fa      	ldr	r2, [r7, #12]
 8018954:	0c12      	lsrs	r2, r2, #16
 8018956:	b2d2      	uxtb	r2, r2
 8018958:	4610      	mov	r0, r2
 801895a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801895c:	4b20      	ldr	r3, [pc, #128]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 801895e:	6a1b      	ldr	r3, [r3, #32]
 8018960:	68fa      	ldr	r2, [r7, #12]
 8018962:	0a12      	lsrs	r2, r2, #8
 8018964:	b2d2      	uxtb	r2, r2
 8018966:	4610      	mov	r0, r2
 8018968:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801896a:	4b1d      	ldr	r3, [pc, #116]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 801896c:	6a1b      	ldr	r3, [r3, #32]
 801896e:	68fa      	ldr	r2, [r7, #12]
 8018970:	b2d2      	uxtb	r2, r2
 8018972:	4610      	mov	r0, r2
 8018974:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018976:	2300      	movs	r3, #0
 8018978:	82fb      	strh	r3, [r7, #22]
 801897a:	e00a      	b.n	8018992 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 801897c:	4b18      	ldr	r3, [pc, #96]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 801897e:	69db      	ldr	r3, [r3, #28]
 8018980:	8afa      	ldrh	r2, [r7, #22]
 8018982:	68b9      	ldr	r1, [r7, #8]
 8018984:	188c      	adds	r4, r1, r2
 8018986:	4798      	blx	r3
 8018988:	4603      	mov	r3, r0
 801898a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 801898c:	8afb      	ldrh	r3, [r7, #22]
 801898e:	3301      	adds	r3, #1
 8018990:	82fb      	strh	r3, [r7, #22]
 8018992:	8afa      	ldrh	r2, [r7, #22]
 8018994:	88fb      	ldrh	r3, [r7, #6]
 8018996:	429a      	cmp	r2, r3
 8018998:	d3f0      	bcc.n	801897c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801899a:	e017      	b.n	80189cc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	0c1b      	lsrs	r3, r3, #16
 80189a0:	b2db      	uxtb	r3, r3
 80189a2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	0a1b      	lsrs	r3, r3, #8
 80189a8:	b2db      	uxtb	r3, r3
 80189aa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80189b2:	4b0b      	ldr	r3, [pc, #44]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 80189b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189b6:	f107 0210 	add.w	r2, r7, #16
 80189ba:	2103      	movs	r1, #3
 80189bc:	4610      	mov	r0, r2
 80189be:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80189c0:	4b07      	ldr	r3, [pc, #28]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 80189c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c4:	88fa      	ldrh	r2, [r7, #6]
 80189c6:	4611      	mov	r1, r2
 80189c8:	68b8      	ldr	r0, [r7, #8]
 80189ca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80189cc:	4b04      	ldr	r3, [pc, #16]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 80189ce:	699b      	ldr	r3, [r3, #24]
 80189d0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80189d2:	4b03      	ldr	r3, [pc, #12]	; (80189e0 <WIZCHIP_READ_BUF+0xbc>)
 80189d4:	691b      	ldr	r3, [r3, #16]
 80189d6:	4798      	blx	r3
}
 80189d8:	bf00      	nop
 80189da:	371c      	adds	r7, #28
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd90      	pop	{r4, r7, pc}
 80189e0:	200000c4 	.word	0x200000c4

080189e4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b086      	sub	sp, #24
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	60f8      	str	r0, [r7, #12]
 80189ec:	60b9      	str	r1, [r7, #8]
 80189ee:	4613      	mov	r3, r2
 80189f0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80189f2:	4b2b      	ldr	r3, [pc, #172]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 80189f4:	68db      	ldr	r3, [r3, #12]
 80189f6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80189f8:	4b29      	ldr	r3, [pc, #164]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 80189fa:	695b      	ldr	r3, [r3, #20]
 80189fc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	f043 0304 	orr.w	r3, r3, #4
 8018a04:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018a06:	4b26      	ldr	r3, [pc, #152]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d126      	bne.n	8018a5c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018a0e:	4b24      	ldr	r3, [pc, #144]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a10:	6a1b      	ldr	r3, [r3, #32]
 8018a12:	68fa      	ldr	r2, [r7, #12]
 8018a14:	0c12      	lsrs	r2, r2, #16
 8018a16:	b2d2      	uxtb	r2, r2
 8018a18:	4610      	mov	r0, r2
 8018a1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018a1c:	4b20      	ldr	r3, [pc, #128]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a1e:	6a1b      	ldr	r3, [r3, #32]
 8018a20:	68fa      	ldr	r2, [r7, #12]
 8018a22:	0a12      	lsrs	r2, r2, #8
 8018a24:	b2d2      	uxtb	r2, r2
 8018a26:	4610      	mov	r0, r2
 8018a28:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018a2a:	4b1d      	ldr	r3, [pc, #116]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a2c:	6a1b      	ldr	r3, [r3, #32]
 8018a2e:	68fa      	ldr	r2, [r7, #12]
 8018a30:	b2d2      	uxtb	r2, r2
 8018a32:	4610      	mov	r0, r2
 8018a34:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018a36:	2300      	movs	r3, #0
 8018a38:	82fb      	strh	r3, [r7, #22]
 8018a3a:	e00a      	b.n	8018a52 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8018a3c:	4b18      	ldr	r3, [pc, #96]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a3e:	6a1b      	ldr	r3, [r3, #32]
 8018a40:	8afa      	ldrh	r2, [r7, #22]
 8018a42:	68b9      	ldr	r1, [r7, #8]
 8018a44:	440a      	add	r2, r1
 8018a46:	7812      	ldrb	r2, [r2, #0]
 8018a48:	4610      	mov	r0, r2
 8018a4a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018a4c:	8afb      	ldrh	r3, [r7, #22]
 8018a4e:	3301      	adds	r3, #1
 8018a50:	82fb      	strh	r3, [r7, #22]
 8018a52:	8afa      	ldrh	r2, [r7, #22]
 8018a54:	88fb      	ldrh	r3, [r7, #6]
 8018a56:	429a      	cmp	r2, r3
 8018a58:	d3f0      	bcc.n	8018a3c <WIZCHIP_WRITE_BUF+0x58>
 8018a5a:	e017      	b.n	8018a8c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	0c1b      	lsrs	r3, r3, #16
 8018a60:	b2db      	uxtb	r3, r3
 8018a62:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	0a1b      	lsrs	r3, r3, #8
 8018a68:	b2db      	uxtb	r3, r3
 8018a6a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	b2db      	uxtb	r3, r3
 8018a70:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018a72:	4b0b      	ldr	r3, [pc, #44]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a76:	f107 0210 	add.w	r2, r7, #16
 8018a7a:	2103      	movs	r1, #3
 8018a7c:	4610      	mov	r0, r2
 8018a7e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8018a80:	4b07      	ldr	r3, [pc, #28]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a84:	88fa      	ldrh	r2, [r7, #6]
 8018a86:	4611      	mov	r1, r2
 8018a88:	68b8      	ldr	r0, [r7, #8]
 8018a8a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018a8c:	4b04      	ldr	r3, [pc, #16]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a8e:	699b      	ldr	r3, [r3, #24]
 8018a90:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018a92:	4b03      	ldr	r3, [pc, #12]	; (8018aa0 <WIZCHIP_WRITE_BUF+0xbc>)
 8018a94:	691b      	ldr	r3, [r3, #16]
 8018a96:	4798      	blx	r3
}
 8018a98:	bf00      	nop
 8018a9a:	3718      	adds	r7, #24
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	200000c4 	.word	0x200000c4

08018aa4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8018aa4:	b590      	push	{r4, r7, lr}
 8018aa6:	b085      	sub	sp, #20
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	4603      	mov	r3, r0
 8018aac:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018aae:	2300      	movs	r3, #0
 8018ab0:	81fb      	strh	r3, [r7, #14]
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018ab6:	79fb      	ldrb	r3, [r7, #7]
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	3301      	adds	r3, #1
 8018abc:	00db      	lsls	r3, r3, #3
 8018abe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7ff fe94 	bl	80187f0 <WIZCHIP_READ>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018acc:	89bb      	ldrh	r3, [r7, #12]
 8018ace:	021b      	lsls	r3, r3, #8
 8018ad0:	b29c      	uxth	r4, r3
 8018ad2:	79fb      	ldrb	r3, [r7, #7]
 8018ad4:	009b      	lsls	r3, r3, #2
 8018ad6:	3301      	adds	r3, #1
 8018ad8:	00db      	lsls	r3, r3, #3
 8018ada:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7ff fe86 	bl	80187f0 <WIZCHIP_READ>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	4423      	add	r3, r4
 8018aea:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018aec:	89bb      	ldrh	r3, [r7, #12]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d01a      	beq.n	8018b28 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018af2:	79fb      	ldrb	r3, [r7, #7]
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	3301      	adds	r3, #1
 8018af8:	00db      	lsls	r3, r3, #3
 8018afa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018afe:	4618      	mov	r0, r3
 8018b00:	f7ff fe76 	bl	80187f0 <WIZCHIP_READ>
 8018b04:	4603      	mov	r3, r0
 8018b06:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018b08:	89fb      	ldrh	r3, [r7, #14]
 8018b0a:	021b      	lsls	r3, r3, #8
 8018b0c:	b29c      	uxth	r4, r3
 8018b0e:	79fb      	ldrb	r3, [r7, #7]
 8018b10:	009b      	lsls	r3, r3, #2
 8018b12:	3301      	adds	r3, #1
 8018b14:	00db      	lsls	r3, r3, #3
 8018b16:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7ff fe68 	bl	80187f0 <WIZCHIP_READ>
 8018b20:	4603      	mov	r3, r0
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	4423      	add	r3, r4
 8018b26:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018b28:	89fa      	ldrh	r2, [r7, #14]
 8018b2a:	89bb      	ldrh	r3, [r7, #12]
 8018b2c:	429a      	cmp	r2, r3
 8018b2e:	d1c2      	bne.n	8018ab6 <getSn_TX_FSR+0x12>
   return val;
 8018b30:	89fb      	ldrh	r3, [r7, #14]
}
 8018b32:	4618      	mov	r0, r3
 8018b34:	3714      	adds	r7, #20
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd90      	pop	{r4, r7, pc}

08018b3a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8018b3a:	b590      	push	{r4, r7, lr}
 8018b3c:	b085      	sub	sp, #20
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	4603      	mov	r3, r0
 8018b42:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018b44:	2300      	movs	r3, #0
 8018b46:	81fb      	strh	r3, [r7, #14]
 8018b48:	2300      	movs	r3, #0
 8018b4a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018b4c:	79fb      	ldrb	r3, [r7, #7]
 8018b4e:	009b      	lsls	r3, r3, #2
 8018b50:	3301      	adds	r3, #1
 8018b52:	00db      	lsls	r3, r3, #3
 8018b54:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7ff fe49 	bl	80187f0 <WIZCHIP_READ>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018b62:	89bb      	ldrh	r3, [r7, #12]
 8018b64:	021b      	lsls	r3, r3, #8
 8018b66:	b29c      	uxth	r4, r3
 8018b68:	79fb      	ldrb	r3, [r7, #7]
 8018b6a:	009b      	lsls	r3, r3, #2
 8018b6c:	3301      	adds	r3, #1
 8018b6e:	00db      	lsls	r3, r3, #3
 8018b70:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7ff fe3b 	bl	80187f0 <WIZCHIP_READ>
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	b29b      	uxth	r3, r3
 8018b7e:	4423      	add	r3, r4
 8018b80:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018b82:	89bb      	ldrh	r3, [r7, #12]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d01a      	beq.n	8018bbe <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018b88:	79fb      	ldrb	r3, [r7, #7]
 8018b8a:	009b      	lsls	r3, r3, #2
 8018b8c:	3301      	adds	r3, #1
 8018b8e:	00db      	lsls	r3, r3, #3
 8018b90:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8018b94:	4618      	mov	r0, r3
 8018b96:	f7ff fe2b 	bl	80187f0 <WIZCHIP_READ>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018b9e:	89fb      	ldrh	r3, [r7, #14]
 8018ba0:	021b      	lsls	r3, r3, #8
 8018ba2:	b29c      	uxth	r4, r3
 8018ba4:	79fb      	ldrb	r3, [r7, #7]
 8018ba6:	009b      	lsls	r3, r3, #2
 8018ba8:	3301      	adds	r3, #1
 8018baa:	00db      	lsls	r3, r3, #3
 8018bac:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7ff fe1d 	bl	80187f0 <WIZCHIP_READ>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	b29b      	uxth	r3, r3
 8018bba:	4423      	add	r3, r4
 8018bbc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018bbe:	89fa      	ldrh	r2, [r7, #14]
 8018bc0:	89bb      	ldrh	r3, [r7, #12]
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d1c2      	bne.n	8018b4c <getSn_RX_RSR+0x12>
   return val;
 8018bc6:	89fb      	ldrh	r3, [r7, #14]
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	3714      	adds	r7, #20
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd90      	pop	{r4, r7, pc}

08018bd0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018bd0:	b590      	push	{r4, r7, lr}
 8018bd2:	b085      	sub	sp, #20
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	6039      	str	r1, [r7, #0]
 8018bda:	71fb      	strb	r3, [r7, #7]
 8018bdc:	4613      	mov	r3, r2
 8018bde:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018be0:	2300      	movs	r3, #0
 8018be2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018be4:	2300      	movs	r3, #0
 8018be6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8018be8:	88bb      	ldrh	r3, [r7, #4]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d048      	beq.n	8018c80 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8018bee:	79fb      	ldrb	r3, [r7, #7]
 8018bf0:	009b      	lsls	r3, r3, #2
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	00db      	lsls	r3, r3, #3
 8018bf6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7ff fdf8 	bl	80187f0 <WIZCHIP_READ>
 8018c00:	4603      	mov	r3, r0
 8018c02:	b29b      	uxth	r3, r3
 8018c04:	021b      	lsls	r3, r3, #8
 8018c06:	b29c      	uxth	r4, r3
 8018c08:	79fb      	ldrb	r3, [r7, #7]
 8018c0a:	009b      	lsls	r3, r3, #2
 8018c0c:	3301      	adds	r3, #1
 8018c0e:	00db      	lsls	r3, r3, #3
 8018c10:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018c14:	4618      	mov	r0, r3
 8018c16:	f7ff fdeb 	bl	80187f0 <WIZCHIP_READ>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	4423      	add	r3, r4
 8018c20:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8018c22:	89fb      	ldrh	r3, [r7, #14]
 8018c24:	021b      	lsls	r3, r3, #8
 8018c26:	79fa      	ldrb	r2, [r7, #7]
 8018c28:	0092      	lsls	r2, r2, #2
 8018c2a:	3202      	adds	r2, #2
 8018c2c:	00d2      	lsls	r2, r2, #3
 8018c2e:	4413      	add	r3, r2
 8018c30:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8018c32:	88bb      	ldrh	r3, [r7, #4]
 8018c34:	461a      	mov	r2, r3
 8018c36:	6839      	ldr	r1, [r7, #0]
 8018c38:	68b8      	ldr	r0, [r7, #8]
 8018c3a:	f7ff fed3 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8018c3e:	89fa      	ldrh	r2, [r7, #14]
 8018c40:	88bb      	ldrh	r3, [r7, #4]
 8018c42:	4413      	add	r3, r2
 8018c44:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8018c46:	79fb      	ldrb	r3, [r7, #7]
 8018c48:	009b      	lsls	r3, r3, #2
 8018c4a:	3301      	adds	r3, #1
 8018c4c:	00db      	lsls	r3, r3, #3
 8018c4e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018c52:	461a      	mov	r2, r3
 8018c54:	89fb      	ldrh	r3, [r7, #14]
 8018c56:	0a1b      	lsrs	r3, r3, #8
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	b2db      	uxtb	r3, r3
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	4610      	mov	r0, r2
 8018c60:	f7ff fe12 	bl	8018888 <WIZCHIP_WRITE>
 8018c64:	79fb      	ldrb	r3, [r7, #7]
 8018c66:	009b      	lsls	r3, r3, #2
 8018c68:	3301      	adds	r3, #1
 8018c6a:	00db      	lsls	r3, r3, #3
 8018c6c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018c70:	461a      	mov	r2, r3
 8018c72:	89fb      	ldrh	r3, [r7, #14]
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	4619      	mov	r1, r3
 8018c78:	4610      	mov	r0, r2
 8018c7a:	f7ff fe05 	bl	8018888 <WIZCHIP_WRITE>
 8018c7e:	e000      	b.n	8018c82 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8018c80:	bf00      	nop
}
 8018c82:	3714      	adds	r7, #20
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd90      	pop	{r4, r7, pc}

08018c88 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018c88:	b590      	push	{r4, r7, lr}
 8018c8a:	b085      	sub	sp, #20
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	4603      	mov	r3, r0
 8018c90:	6039      	str	r1, [r7, #0]
 8018c92:	71fb      	strb	r3, [r7, #7]
 8018c94:	4613      	mov	r3, r2
 8018c96:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8018ca0:	88bb      	ldrh	r3, [r7, #4]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d048      	beq.n	8018d38 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8018ca6:	79fb      	ldrb	r3, [r7, #7]
 8018ca8:	009b      	lsls	r3, r3, #2
 8018caa:	3301      	adds	r3, #1
 8018cac:	00db      	lsls	r3, r3, #3
 8018cae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f7ff fd9c 	bl	80187f0 <WIZCHIP_READ>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	b29b      	uxth	r3, r3
 8018cbc:	021b      	lsls	r3, r3, #8
 8018cbe:	b29c      	uxth	r4, r3
 8018cc0:	79fb      	ldrb	r3, [r7, #7]
 8018cc2:	009b      	lsls	r3, r3, #2
 8018cc4:	3301      	adds	r3, #1
 8018cc6:	00db      	lsls	r3, r3, #3
 8018cc8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7ff fd8f 	bl	80187f0 <WIZCHIP_READ>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	4423      	add	r3, r4
 8018cd8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8018cda:	89fb      	ldrh	r3, [r7, #14]
 8018cdc:	021b      	lsls	r3, r3, #8
 8018cde:	79fa      	ldrb	r2, [r7, #7]
 8018ce0:	0092      	lsls	r2, r2, #2
 8018ce2:	3203      	adds	r2, #3
 8018ce4:	00d2      	lsls	r2, r2, #3
 8018ce6:	4413      	add	r3, r2
 8018ce8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8018cea:	88bb      	ldrh	r3, [r7, #4]
 8018cec:	461a      	mov	r2, r3
 8018cee:	6839      	ldr	r1, [r7, #0]
 8018cf0:	68b8      	ldr	r0, [r7, #8]
 8018cf2:	f7ff fe17 	bl	8018924 <WIZCHIP_READ_BUF>
   ptr += len;
 8018cf6:	89fa      	ldrh	r2, [r7, #14]
 8018cf8:	88bb      	ldrh	r3, [r7, #4]
 8018cfa:	4413      	add	r3, r2
 8018cfc:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018cfe:	79fb      	ldrb	r3, [r7, #7]
 8018d00:	009b      	lsls	r3, r3, #2
 8018d02:	3301      	adds	r3, #1
 8018d04:	00db      	lsls	r3, r3, #3
 8018d06:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018d0a:	461a      	mov	r2, r3
 8018d0c:	89fb      	ldrh	r3, [r7, #14]
 8018d0e:	0a1b      	lsrs	r3, r3, #8
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	b2db      	uxtb	r3, r3
 8018d14:	4619      	mov	r1, r3
 8018d16:	4610      	mov	r0, r2
 8018d18:	f7ff fdb6 	bl	8018888 <WIZCHIP_WRITE>
 8018d1c:	79fb      	ldrb	r3, [r7, #7]
 8018d1e:	009b      	lsls	r3, r3, #2
 8018d20:	3301      	adds	r3, #1
 8018d22:	00db      	lsls	r3, r3, #3
 8018d24:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018d28:	461a      	mov	r2, r3
 8018d2a:	89fb      	ldrh	r3, [r7, #14]
 8018d2c:	b2db      	uxtb	r3, r3
 8018d2e:	4619      	mov	r1, r3
 8018d30:	4610      	mov	r0, r2
 8018d32:	f7ff fda9 	bl	8018888 <WIZCHIP_WRITE>
 8018d36:	e000      	b.n	8018d3a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8018d38:	bf00      	nop
}
 8018d3a:	3714      	adds	r7, #20
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd90      	pop	{r4, r7, pc}

08018d40 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018d40:	b590      	push	{r4, r7, lr}
 8018d42:	b085      	sub	sp, #20
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	4603      	mov	r3, r0
 8018d48:	460a      	mov	r2, r1
 8018d4a:	71fb      	strb	r3, [r7, #7]
 8018d4c:	4613      	mov	r3, r2
 8018d4e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018d50:	2300      	movs	r3, #0
 8018d52:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018d54:	79fb      	ldrb	r3, [r7, #7]
 8018d56:	009b      	lsls	r3, r3, #2
 8018d58:	3301      	adds	r3, #1
 8018d5a:	00db      	lsls	r3, r3, #3
 8018d5c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018d60:	4618      	mov	r0, r3
 8018d62:	f7ff fd45 	bl	80187f0 <WIZCHIP_READ>
 8018d66:	4603      	mov	r3, r0
 8018d68:	b29b      	uxth	r3, r3
 8018d6a:	021b      	lsls	r3, r3, #8
 8018d6c:	b29c      	uxth	r4, r3
 8018d6e:	79fb      	ldrb	r3, [r7, #7]
 8018d70:	009b      	lsls	r3, r3, #2
 8018d72:	3301      	adds	r3, #1
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f7ff fd38 	bl	80187f0 <WIZCHIP_READ>
 8018d80:	4603      	mov	r3, r0
 8018d82:	b29b      	uxth	r3, r3
 8018d84:	4423      	add	r3, r4
 8018d86:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8018d88:	89fa      	ldrh	r2, [r7, #14]
 8018d8a:	88bb      	ldrh	r3, [r7, #4]
 8018d8c:	4413      	add	r3, r2
 8018d8e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8018d90:	79fb      	ldrb	r3, [r7, #7]
 8018d92:	009b      	lsls	r3, r3, #2
 8018d94:	3301      	adds	r3, #1
 8018d96:	00db      	lsls	r3, r3, #3
 8018d98:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018d9c:	461a      	mov	r2, r3
 8018d9e:	89fb      	ldrh	r3, [r7, #14]
 8018da0:	0a1b      	lsrs	r3, r3, #8
 8018da2:	b29b      	uxth	r3, r3
 8018da4:	b2db      	uxtb	r3, r3
 8018da6:	4619      	mov	r1, r3
 8018da8:	4610      	mov	r0, r2
 8018daa:	f7ff fd6d 	bl	8018888 <WIZCHIP_WRITE>
 8018dae:	79fb      	ldrb	r3, [r7, #7]
 8018db0:	009b      	lsls	r3, r3, #2
 8018db2:	3301      	adds	r3, #1
 8018db4:	00db      	lsls	r3, r3, #3
 8018db6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018dba:	461a      	mov	r2, r3
 8018dbc:	89fb      	ldrh	r3, [r7, #14]
 8018dbe:	b2db      	uxtb	r3, r3
 8018dc0:	4619      	mov	r1, r3
 8018dc2:	4610      	mov	r0, r2
 8018dc4:	f7ff fd60 	bl	8018888 <WIZCHIP_WRITE>
}
 8018dc8:	bf00      	nop
 8018dca:	3714      	adds	r7, #20
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	bd90      	pop	{r4, r7, pc}

08018dd0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018dd0:	b590      	push	{r4, r7, lr}
 8018dd2:	b085      	sub	sp, #20
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	4604      	mov	r4, r0
 8018dd8:	4608      	mov	r0, r1
 8018dda:	4611      	mov	r1, r2
 8018ddc:	461a      	mov	r2, r3
 8018dde:	4623      	mov	r3, r4
 8018de0:	71fb      	strb	r3, [r7, #7]
 8018de2:	4603      	mov	r3, r0
 8018de4:	71bb      	strb	r3, [r7, #6]
 8018de6:	460b      	mov	r3, r1
 8018de8:	80bb      	strh	r3, [r7, #4]
 8018dea:	4613      	mov	r3, r2
 8018dec:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018dee:	79fb      	ldrb	r3, [r7, #7]
 8018df0:	2b08      	cmp	r3, #8
 8018df2:	d902      	bls.n	8018dfa <socket+0x2a>
 8018df4:	f04f 33ff 	mov.w	r3, #4294967295
 8018df8:	e0f0      	b.n	8018fdc <socket+0x20c>
	switch(protocol)
 8018dfa:	79bb      	ldrb	r3, [r7, #6]
 8018dfc:	2b01      	cmp	r3, #1
 8018dfe:	d005      	beq.n	8018e0c <socket+0x3c>
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	dd11      	ble.n	8018e28 <socket+0x58>
 8018e04:	3b02      	subs	r3, #2
 8018e06:	2b02      	cmp	r3, #2
 8018e08:	d80e      	bhi.n	8018e28 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8018e0a:	e011      	b.n	8018e30 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018e0c:	f107 030c 	add.w	r3, r7, #12
 8018e10:	2204      	movs	r2, #4
 8018e12:	4619      	mov	r1, r3
 8018e14:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8018e18:	f7ff fd84 	bl	8018924 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d105      	bne.n	8018e2e <socket+0x5e>
 8018e22:	f06f 0302 	mvn.w	r3, #2
 8018e26:	e0d9      	b.n	8018fdc <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8018e28:	f06f 0304 	mvn.w	r3, #4
 8018e2c:	e0d6      	b.n	8018fdc <socket+0x20c>
	    break;
 8018e2e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018e30:	78fb      	ldrb	r3, [r7, #3]
 8018e32:	f003 0304 	and.w	r3, r3, #4
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d002      	beq.n	8018e40 <socket+0x70>
 8018e3a:	f06f 0305 	mvn.w	r3, #5
 8018e3e:	e0cd      	b.n	8018fdc <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018e40:	78fb      	ldrb	r3, [r7, #3]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d028      	beq.n	8018e98 <socket+0xc8>
	{
   	switch(protocol)
 8018e46:	79bb      	ldrb	r3, [r7, #6]
 8018e48:	2b01      	cmp	r3, #1
 8018e4a:	d002      	beq.n	8018e52 <socket+0x82>
 8018e4c:	2b02      	cmp	r3, #2
 8018e4e:	d008      	beq.n	8018e62 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018e50:	e022      	b.n	8018e98 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018e52:	78fb      	ldrb	r3, [r7, #3]
 8018e54:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d11a      	bne.n	8018e92 <socket+0xc2>
 8018e5c:	f06f 0305 	mvn.w	r3, #5
 8018e60:	e0bc      	b.n	8018fdc <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8018e62:	78fb      	ldrb	r3, [r7, #3]
 8018e64:	f003 0320 	and.w	r3, r3, #32
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d006      	beq.n	8018e7a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8018e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	db02      	blt.n	8018e7a <socket+0xaa>
 8018e74:	f06f 0305 	mvn.w	r3, #5
 8018e78:	e0b0      	b.n	8018fdc <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8018e7a:	78fb      	ldrb	r3, [r7, #3]
 8018e7c:	f003 0310 	and.w	r3, r3, #16
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d008      	beq.n	8018e96 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8018e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	db04      	blt.n	8018e96 <socket+0xc6>
 8018e8c:	f06f 0305 	mvn.w	r3, #5
 8018e90:	e0a4      	b.n	8018fdc <socket+0x20c>
   	      break;
 8018e92:	bf00      	nop
 8018e94:	e000      	b.n	8018e98 <socket+0xc8>
   	      break;
 8018e96:	bf00      	nop
   	}
   }
	close(sn);
 8018e98:	79fb      	ldrb	r3, [r7, #7]
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f000 f8ac 	bl	8018ff8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8018ea0:	79fb      	ldrb	r3, [r7, #7]
 8018ea2:	009b      	lsls	r3, r3, #2
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	00db      	lsls	r3, r3, #3
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018eae:	f023 030f 	bic.w	r3, r3, #15
 8018eb2:	b25a      	sxtb	r2, r3
 8018eb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018eb8:	4313      	orrs	r3, r2
 8018eba:	b25b      	sxtb	r3, r3
 8018ebc:	b2db      	uxtb	r3, r3
 8018ebe:	4619      	mov	r1, r3
 8018ec0:	f7ff fce2 	bl	8018888 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8018ec4:	88bb      	ldrh	r3, [r7, #4]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d110      	bne.n	8018eec <socket+0x11c>
	{
	   port = sock_any_port++;
 8018eca:	4b46      	ldr	r3, [pc, #280]	; (8018fe4 <socket+0x214>)
 8018ecc:	881b      	ldrh	r3, [r3, #0]
 8018ece:	1c5a      	adds	r2, r3, #1
 8018ed0:	b291      	uxth	r1, r2
 8018ed2:	4a44      	ldr	r2, [pc, #272]	; (8018fe4 <socket+0x214>)
 8018ed4:	8011      	strh	r1, [r2, #0]
 8018ed6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8018ed8:	4b42      	ldr	r3, [pc, #264]	; (8018fe4 <socket+0x214>)
 8018eda:	881b      	ldrh	r3, [r3, #0]
 8018edc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018ee0:	4293      	cmp	r3, r2
 8018ee2:	d103      	bne.n	8018eec <socket+0x11c>
 8018ee4:	4b3f      	ldr	r3, [pc, #252]	; (8018fe4 <socket+0x214>)
 8018ee6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018eea:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8018eec:	79fb      	ldrb	r3, [r7, #7]
 8018eee:	009b      	lsls	r3, r3, #2
 8018ef0:	3301      	adds	r3, #1
 8018ef2:	00db      	lsls	r3, r3, #3
 8018ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018ef8:	461a      	mov	r2, r3
 8018efa:	88bb      	ldrh	r3, [r7, #4]
 8018efc:	0a1b      	lsrs	r3, r3, #8
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	4619      	mov	r1, r3
 8018f04:	4610      	mov	r0, r2
 8018f06:	f7ff fcbf 	bl	8018888 <WIZCHIP_WRITE>
 8018f0a:	79fb      	ldrb	r3, [r7, #7]
 8018f0c:	009b      	lsls	r3, r3, #2
 8018f0e:	3301      	adds	r3, #1
 8018f10:	00db      	lsls	r3, r3, #3
 8018f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8018f16:	461a      	mov	r2, r3
 8018f18:	88bb      	ldrh	r3, [r7, #4]
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4610      	mov	r0, r2
 8018f20:	f7ff fcb2 	bl	8018888 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8018f24:	79fb      	ldrb	r3, [r7, #7]
 8018f26:	009b      	lsls	r3, r3, #2
 8018f28:	3301      	adds	r3, #1
 8018f2a:	00db      	lsls	r3, r3, #3
 8018f2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018f30:	2101      	movs	r1, #1
 8018f32:	4618      	mov	r0, r3
 8018f34:	f7ff fca8 	bl	8018888 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8018f38:	bf00      	nop
 8018f3a:	79fb      	ldrb	r3, [r7, #7]
 8018f3c:	009b      	lsls	r3, r3, #2
 8018f3e:	3301      	adds	r3, #1
 8018f40:	00db      	lsls	r3, r3, #3
 8018f42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7ff fc52 	bl	80187f0 <WIZCHIP_READ>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d1f3      	bne.n	8018f3a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8018f52:	79fb      	ldrb	r3, [r7, #7]
 8018f54:	2201      	movs	r2, #1
 8018f56:	fa02 f303 	lsl.w	r3, r2, r3
 8018f5a:	b21b      	sxth	r3, r3
 8018f5c:	43db      	mvns	r3, r3
 8018f5e:	b21a      	sxth	r2, r3
 8018f60:	4b21      	ldr	r3, [pc, #132]	; (8018fe8 <socket+0x218>)
 8018f62:	881b      	ldrh	r3, [r3, #0]
 8018f64:	b21b      	sxth	r3, r3
 8018f66:	4013      	ands	r3, r2
 8018f68:	b21b      	sxth	r3, r3
 8018f6a:	b29a      	uxth	r2, r3
 8018f6c:	4b1e      	ldr	r3, [pc, #120]	; (8018fe8 <socket+0x218>)
 8018f6e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8018f70:	78fb      	ldrb	r3, [r7, #3]
 8018f72:	f003 0201 	and.w	r2, r3, #1
 8018f76:	79fb      	ldrb	r3, [r7, #7]
 8018f78:	fa02 f303 	lsl.w	r3, r2, r3
 8018f7c:	b21a      	sxth	r2, r3
 8018f7e:	4b1a      	ldr	r3, [pc, #104]	; (8018fe8 <socket+0x218>)
 8018f80:	881b      	ldrh	r3, [r3, #0]
 8018f82:	b21b      	sxth	r3, r3
 8018f84:	4313      	orrs	r3, r2
 8018f86:	b21b      	sxth	r3, r3
 8018f88:	b29a      	uxth	r2, r3
 8018f8a:	4b17      	ldr	r3, [pc, #92]	; (8018fe8 <socket+0x218>)
 8018f8c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8018f8e:	79fb      	ldrb	r3, [r7, #7]
 8018f90:	2201      	movs	r2, #1
 8018f92:	fa02 f303 	lsl.w	r3, r2, r3
 8018f96:	b21b      	sxth	r3, r3
 8018f98:	43db      	mvns	r3, r3
 8018f9a:	b21a      	sxth	r2, r3
 8018f9c:	4b13      	ldr	r3, [pc, #76]	; (8018fec <socket+0x21c>)
 8018f9e:	881b      	ldrh	r3, [r3, #0]
 8018fa0:	b21b      	sxth	r3, r3
 8018fa2:	4013      	ands	r3, r2
 8018fa4:	b21b      	sxth	r3, r3
 8018fa6:	b29a      	uxth	r2, r3
 8018fa8:	4b10      	ldr	r3, [pc, #64]	; (8018fec <socket+0x21c>)
 8018faa:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8018fac:	79fb      	ldrb	r3, [r7, #7]
 8018fae:	4a10      	ldr	r2, [pc, #64]	; (8018ff0 <socket+0x220>)
 8018fb0:	2100      	movs	r1, #0
 8018fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8018fb6:	79fb      	ldrb	r3, [r7, #7]
 8018fb8:	4a0e      	ldr	r2, [pc, #56]	; (8018ff4 <socket+0x224>)
 8018fba:	2100      	movs	r1, #0
 8018fbc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8018fbe:	bf00      	nop
 8018fc0:	79fb      	ldrb	r3, [r7, #7]
 8018fc2:	009b      	lsls	r3, r3, #2
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	00db      	lsls	r3, r3, #3
 8018fc8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7ff fc0f 	bl	80187f0 <WIZCHIP_READ>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d0f3      	beq.n	8018fc0 <socket+0x1f0>
   return (int8_t)sn;
 8018fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3714      	adds	r7, #20
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd90      	pop	{r4, r7, pc}
 8018fe4:	200000c2 	.word	0x200000c2
 8018fe8:	20000984 	.word	0x20000984
 8018fec:	20000986 	.word	0x20000986
 8018ff0:	20000988 	.word	0x20000988
 8018ff4:	20000998 	.word	0x20000998

08018ff8 <close>:

int8_t close(uint8_t sn)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b082      	sub	sp, #8
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	4603      	mov	r3, r0
 8019000:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8019002:	79fb      	ldrb	r3, [r7, #7]
 8019004:	2b08      	cmp	r3, #8
 8019006:	d902      	bls.n	801900e <close+0x16>
 8019008:	f04f 33ff 	mov.w	r3, #4294967295
 801900c:	e055      	b.n	80190ba <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 801900e:	79fb      	ldrb	r3, [r7, #7]
 8019010:	009b      	lsls	r3, r3, #2
 8019012:	3301      	adds	r3, #1
 8019014:	00db      	lsls	r3, r3, #3
 8019016:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801901a:	2110      	movs	r1, #16
 801901c:	4618      	mov	r0, r3
 801901e:	f7ff fc33 	bl	8018888 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8019022:	bf00      	nop
 8019024:	79fb      	ldrb	r3, [r7, #7]
 8019026:	009b      	lsls	r3, r3, #2
 8019028:	3301      	adds	r3, #1
 801902a:	00db      	lsls	r3, r3, #3
 801902c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019030:	4618      	mov	r0, r3
 8019032:	f7ff fbdd 	bl	80187f0 <WIZCHIP_READ>
 8019036:	4603      	mov	r3, r0
 8019038:	2b00      	cmp	r3, #0
 801903a:	d1f3      	bne.n	8019024 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 801903c:	79fb      	ldrb	r3, [r7, #7]
 801903e:	009b      	lsls	r3, r3, #2
 8019040:	3301      	adds	r3, #1
 8019042:	00db      	lsls	r3, r3, #3
 8019044:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019048:	211f      	movs	r1, #31
 801904a:	4618      	mov	r0, r3
 801904c:	f7ff fc1c 	bl	8018888 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8019050:	79fb      	ldrb	r3, [r7, #7]
 8019052:	2201      	movs	r2, #1
 8019054:	fa02 f303 	lsl.w	r3, r2, r3
 8019058:	b21b      	sxth	r3, r3
 801905a:	43db      	mvns	r3, r3
 801905c:	b21a      	sxth	r2, r3
 801905e:	4b19      	ldr	r3, [pc, #100]	; (80190c4 <close+0xcc>)
 8019060:	881b      	ldrh	r3, [r3, #0]
 8019062:	b21b      	sxth	r3, r3
 8019064:	4013      	ands	r3, r2
 8019066:	b21b      	sxth	r3, r3
 8019068:	b29a      	uxth	r2, r3
 801906a:	4b16      	ldr	r3, [pc, #88]	; (80190c4 <close+0xcc>)
 801906c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 801906e:	79fb      	ldrb	r3, [r7, #7]
 8019070:	2201      	movs	r2, #1
 8019072:	fa02 f303 	lsl.w	r3, r2, r3
 8019076:	b21b      	sxth	r3, r3
 8019078:	43db      	mvns	r3, r3
 801907a:	b21a      	sxth	r2, r3
 801907c:	4b12      	ldr	r3, [pc, #72]	; (80190c8 <close+0xd0>)
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	b21b      	sxth	r3, r3
 8019082:	4013      	ands	r3, r2
 8019084:	b21b      	sxth	r3, r3
 8019086:	b29a      	uxth	r2, r3
 8019088:	4b0f      	ldr	r3, [pc, #60]	; (80190c8 <close+0xd0>)
 801908a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 801908c:	79fb      	ldrb	r3, [r7, #7]
 801908e:	4a0f      	ldr	r2, [pc, #60]	; (80190cc <close+0xd4>)
 8019090:	2100      	movs	r1, #0
 8019092:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8019096:	79fb      	ldrb	r3, [r7, #7]
 8019098:	4a0d      	ldr	r2, [pc, #52]	; (80190d0 <close+0xd8>)
 801909a:	2100      	movs	r1, #0
 801909c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801909e:	bf00      	nop
 80190a0:	79fb      	ldrb	r3, [r7, #7]
 80190a2:	009b      	lsls	r3, r3, #2
 80190a4:	3301      	adds	r3, #1
 80190a6:	00db      	lsls	r3, r3, #3
 80190a8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7ff fb9f 	bl	80187f0 <WIZCHIP_READ>
 80190b2:	4603      	mov	r3, r0
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d1f3      	bne.n	80190a0 <close+0xa8>
	return SOCK_OK;
 80190b8:	2301      	movs	r3, #1
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	3708      	adds	r7, #8
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd80      	pop	{r7, pc}
 80190c2:	bf00      	nop
 80190c4:	20000984 	.word	0x20000984
 80190c8:	20000986 	.word	0x20000986
 80190cc:	20000988 	.word	0x20000988
 80190d0:	20000998 	.word	0x20000998

080190d4 <listen>:

int8_t listen(uint8_t sn)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b082      	sub	sp, #8
 80190d8:	af00      	add	r7, sp, #0
 80190da:	4603      	mov	r3, r0
 80190dc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80190de:	79fb      	ldrb	r3, [r7, #7]
 80190e0:	2b08      	cmp	r3, #8
 80190e2:	d902      	bls.n	80190ea <listen+0x16>
 80190e4:	f04f 33ff 	mov.w	r3, #4294967295
 80190e8:	e049      	b.n	801917e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80190ea:	79fb      	ldrb	r3, [r7, #7]
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	3301      	adds	r3, #1
 80190f0:	00db      	lsls	r3, r3, #3
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7ff fb7c 	bl	80187f0 <WIZCHIP_READ>
 80190f8:	4603      	mov	r3, r0
 80190fa:	f003 030f 	and.w	r3, r3, #15
 80190fe:	2b01      	cmp	r3, #1
 8019100:	d002      	beq.n	8019108 <listen+0x34>
 8019102:	f06f 0304 	mvn.w	r3, #4
 8019106:	e03a      	b.n	801917e <listen+0xaa>
	CHECK_SOCKINIT();
 8019108:	79fb      	ldrb	r3, [r7, #7]
 801910a:	009b      	lsls	r3, r3, #2
 801910c:	3301      	adds	r3, #1
 801910e:	00db      	lsls	r3, r3, #3
 8019110:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019114:	4618      	mov	r0, r3
 8019116:	f7ff fb6b 	bl	80187f0 <WIZCHIP_READ>
 801911a:	4603      	mov	r3, r0
 801911c:	2b13      	cmp	r3, #19
 801911e:	d002      	beq.n	8019126 <listen+0x52>
 8019120:	f06f 0302 	mvn.w	r3, #2
 8019124:	e02b      	b.n	801917e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8019126:	79fb      	ldrb	r3, [r7, #7]
 8019128:	009b      	lsls	r3, r3, #2
 801912a:	3301      	adds	r3, #1
 801912c:	00db      	lsls	r3, r3, #3
 801912e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019132:	2102      	movs	r1, #2
 8019134:	4618      	mov	r0, r3
 8019136:	f7ff fba7 	bl	8018888 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 801913a:	bf00      	nop
 801913c:	79fb      	ldrb	r3, [r7, #7]
 801913e:	009b      	lsls	r3, r3, #2
 8019140:	3301      	adds	r3, #1
 8019142:	00db      	lsls	r3, r3, #3
 8019144:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019148:	4618      	mov	r0, r3
 801914a:	f7ff fb51 	bl	80187f0 <WIZCHIP_READ>
 801914e:	4603      	mov	r3, r0
 8019150:	2b00      	cmp	r3, #0
 8019152:	d1f3      	bne.n	801913c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8019154:	e006      	b.n	8019164 <listen+0x90>
   {
         close(sn);
 8019156:	79fb      	ldrb	r3, [r7, #7]
 8019158:	4618      	mov	r0, r3
 801915a:	f7ff ff4d 	bl	8018ff8 <close>
         return SOCKERR_SOCKCLOSED;
 801915e:	f06f 0303 	mvn.w	r3, #3
 8019162:	e00c      	b.n	801917e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8019164:	79fb      	ldrb	r3, [r7, #7]
 8019166:	009b      	lsls	r3, r3, #2
 8019168:	3301      	adds	r3, #1
 801916a:	00db      	lsls	r3, r3, #3
 801916c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019170:	4618      	mov	r0, r3
 8019172:	f7ff fb3d 	bl	80187f0 <WIZCHIP_READ>
 8019176:	4603      	mov	r3, r0
 8019178:	2b14      	cmp	r3, #20
 801917a:	d1ec      	bne.n	8019156 <listen+0x82>
   }
   return SOCK_OK;
 801917c:	2301      	movs	r3, #1
}
 801917e:	4618      	mov	r0, r3
 8019180:	3708      	adds	r7, #8
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
	...

08019188 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b084      	sub	sp, #16
 801918c:	af00      	add	r7, sp, #0
 801918e:	4603      	mov	r3, r0
 8019190:	6039      	str	r1, [r7, #0]
 8019192:	71fb      	strb	r3, [r7, #7]
 8019194:	4613      	mov	r3, r2
 8019196:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8019198:	79fb      	ldrb	r3, [r7, #7]
 801919a:	2b08      	cmp	r3, #8
 801919c:	d902      	bls.n	80191a4 <connect+0x1c>
 801919e:	f04f 33ff 	mov.w	r3, #4294967295
 80191a2:	e0c6      	b.n	8019332 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80191a4:	79fb      	ldrb	r3, [r7, #7]
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	3301      	adds	r3, #1
 80191aa:	00db      	lsls	r3, r3, #3
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7ff fb1f 	bl	80187f0 <WIZCHIP_READ>
 80191b2:	4603      	mov	r3, r0
 80191b4:	f003 030f 	and.w	r3, r3, #15
 80191b8:	2b01      	cmp	r3, #1
 80191ba:	d002      	beq.n	80191c2 <connect+0x3a>
 80191bc:	f06f 0304 	mvn.w	r3, #4
 80191c0:	e0b7      	b.n	8019332 <connect+0x1aa>
   CHECK_SOCKINIT();
 80191c2:	79fb      	ldrb	r3, [r7, #7]
 80191c4:	009b      	lsls	r3, r3, #2
 80191c6:	3301      	adds	r3, #1
 80191c8:	00db      	lsls	r3, r3, #3
 80191ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80191ce:	4618      	mov	r0, r3
 80191d0:	f7ff fb0e 	bl	80187f0 <WIZCHIP_READ>
 80191d4:	4603      	mov	r3, r0
 80191d6:	2b13      	cmp	r3, #19
 80191d8:	d002      	beq.n	80191e0 <connect+0x58>
 80191da:	f06f 0302 	mvn.w	r3, #2
 80191de:	e0a8      	b.n	8019332 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	781b      	ldrb	r3, [r3, #0]
 80191e4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	021b      	lsls	r3, r3, #8
 80191ea:	683a      	ldr	r2, [r7, #0]
 80191ec:	3201      	adds	r2, #1
 80191ee:	7812      	ldrb	r2, [r2, #0]
 80191f0:	4413      	add	r3, r2
 80191f2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	021b      	lsls	r3, r3, #8
 80191f8:	683a      	ldr	r2, [r7, #0]
 80191fa:	3202      	adds	r2, #2
 80191fc:	7812      	ldrb	r2, [r2, #0]
 80191fe:	4413      	add	r3, r2
 8019200:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	021b      	lsls	r3, r3, #8
 8019206:	683a      	ldr	r2, [r7, #0]
 8019208:	3203      	adds	r2, #3
 801920a:	7812      	ldrb	r2, [r2, #0]
 801920c:	4413      	add	r3, r2
 801920e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019216:	d002      	beq.n	801921e <connect+0x96>
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d102      	bne.n	8019224 <connect+0x9c>
 801921e:	f06f 030b 	mvn.w	r3, #11
 8019222:	e086      	b.n	8019332 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8019224:	88bb      	ldrh	r3, [r7, #4]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d102      	bne.n	8019230 <connect+0xa8>
 801922a:	f06f 030a 	mvn.w	r3, #10
 801922e:	e080      	b.n	8019332 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8019230:	79fb      	ldrb	r3, [r7, #7]
 8019232:	009b      	lsls	r3, r3, #2
 8019234:	3301      	adds	r3, #1
 8019236:	00db      	lsls	r3, r3, #3
 8019238:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801923c:	2204      	movs	r2, #4
 801923e:	6839      	ldr	r1, [r7, #0]
 8019240:	4618      	mov	r0, r3
 8019242:	f7ff fbcf 	bl	80189e4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8019246:	79fb      	ldrb	r3, [r7, #7]
 8019248:	009b      	lsls	r3, r3, #2
 801924a:	3301      	adds	r3, #1
 801924c:	00db      	lsls	r3, r3, #3
 801924e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019252:	461a      	mov	r2, r3
 8019254:	88bb      	ldrh	r3, [r7, #4]
 8019256:	0a1b      	lsrs	r3, r3, #8
 8019258:	b29b      	uxth	r3, r3
 801925a:	b2db      	uxtb	r3, r3
 801925c:	4619      	mov	r1, r3
 801925e:	4610      	mov	r0, r2
 8019260:	f7ff fb12 	bl	8018888 <WIZCHIP_WRITE>
 8019264:	79fb      	ldrb	r3, [r7, #7]
 8019266:	009b      	lsls	r3, r3, #2
 8019268:	3301      	adds	r3, #1
 801926a:	00db      	lsls	r3, r3, #3
 801926c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8019270:	461a      	mov	r2, r3
 8019272:	88bb      	ldrh	r3, [r7, #4]
 8019274:	b2db      	uxtb	r3, r3
 8019276:	4619      	mov	r1, r3
 8019278:	4610      	mov	r0, r2
 801927a:	f7ff fb05 	bl	8018888 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801927e:	79fb      	ldrb	r3, [r7, #7]
 8019280:	009b      	lsls	r3, r3, #2
 8019282:	3301      	adds	r3, #1
 8019284:	00db      	lsls	r3, r3, #3
 8019286:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801928a:	2104      	movs	r1, #4
 801928c:	4618      	mov	r0, r3
 801928e:	f7ff fafb 	bl	8018888 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8019292:	bf00      	nop
 8019294:	79fb      	ldrb	r3, [r7, #7]
 8019296:	009b      	lsls	r3, r3, #2
 8019298:	3301      	adds	r3, #1
 801929a:	00db      	lsls	r3, r3, #3
 801929c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80192a0:	4618      	mov	r0, r3
 80192a2:	f7ff faa5 	bl	80187f0 <WIZCHIP_READ>
 80192a6:	4603      	mov	r3, r0
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d1f3      	bne.n	8019294 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80192ac:	4b23      	ldr	r3, [pc, #140]	; (801933c <connect+0x1b4>)
 80192ae:	881b      	ldrh	r3, [r3, #0]
 80192b0:	461a      	mov	r2, r3
 80192b2:	79fb      	ldrb	r3, [r7, #7]
 80192b4:	fa42 f303 	asr.w	r3, r2, r3
 80192b8:	f003 0301 	and.w	r3, r3, #1
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d02b      	beq.n	8019318 <connect+0x190>
 80192c0:	2300      	movs	r3, #0
 80192c2:	e036      	b.n	8019332 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80192c4:	79fb      	ldrb	r3, [r7, #7]
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	3301      	adds	r3, #1
 80192ca:	00db      	lsls	r3, r3, #3
 80192cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7ff fa8d 	bl	80187f0 <WIZCHIP_READ>
 80192d6:	4603      	mov	r3, r0
 80192d8:	f003 0308 	and.w	r3, r3, #8
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d00c      	beq.n	80192fa <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80192e0:	79fb      	ldrb	r3, [r7, #7]
 80192e2:	009b      	lsls	r3, r3, #2
 80192e4:	3301      	adds	r3, #1
 80192e6:	00db      	lsls	r3, r3, #3
 80192e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80192ec:	2108      	movs	r1, #8
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7ff faca 	bl	8018888 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80192f4:	f06f 030c 	mvn.w	r3, #12
 80192f8:	e01b      	b.n	8019332 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80192fa:	79fb      	ldrb	r3, [r7, #7]
 80192fc:	009b      	lsls	r3, r3, #2
 80192fe:	3301      	adds	r3, #1
 8019300:	00db      	lsls	r3, r3, #3
 8019302:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019306:	4618      	mov	r0, r3
 8019308:	f7ff fa72 	bl	80187f0 <WIZCHIP_READ>
 801930c:	4603      	mov	r3, r0
 801930e:	2b00      	cmp	r3, #0
 8019310:	d102      	bne.n	8019318 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8019312:	f06f 0303 	mvn.w	r3, #3
 8019316:	e00c      	b.n	8019332 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8019318:	79fb      	ldrb	r3, [r7, #7]
 801931a:	009b      	lsls	r3, r3, #2
 801931c:	3301      	adds	r3, #1
 801931e:	00db      	lsls	r3, r3, #3
 8019320:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019324:	4618      	mov	r0, r3
 8019326:	f7ff fa63 	bl	80187f0 <WIZCHIP_READ>
 801932a:	4603      	mov	r3, r0
 801932c:	2b17      	cmp	r3, #23
 801932e:	d1c9      	bne.n	80192c4 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8019330:	2301      	movs	r3, #1
}
 8019332:	4618      	mov	r0, r3
 8019334:	3710      	adds	r7, #16
 8019336:	46bd      	mov	sp, r7
 8019338:	bd80      	pop	{r7, pc}
 801933a:	bf00      	nop
 801933c:	20000984 	.word	0x20000984

08019340 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b082      	sub	sp, #8
 8019344:	af00      	add	r7, sp, #0
 8019346:	4603      	mov	r3, r0
 8019348:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 801934a:	79fb      	ldrb	r3, [r7, #7]
 801934c:	2b08      	cmp	r3, #8
 801934e:	d902      	bls.n	8019356 <disconnect+0x16>
 8019350:	f04f 33ff 	mov.w	r3, #4294967295
 8019354:	e062      	b.n	801941c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019356:	79fb      	ldrb	r3, [r7, #7]
 8019358:	009b      	lsls	r3, r3, #2
 801935a:	3301      	adds	r3, #1
 801935c:	00db      	lsls	r3, r3, #3
 801935e:	4618      	mov	r0, r3
 8019360:	f7ff fa46 	bl	80187f0 <WIZCHIP_READ>
 8019364:	4603      	mov	r3, r0
 8019366:	f003 030f 	and.w	r3, r3, #15
 801936a:	2b01      	cmp	r3, #1
 801936c:	d002      	beq.n	8019374 <disconnect+0x34>
 801936e:	f06f 0304 	mvn.w	r3, #4
 8019372:	e053      	b.n	801941c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8019374:	79fb      	ldrb	r3, [r7, #7]
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	3301      	adds	r3, #1
 801937a:	00db      	lsls	r3, r3, #3
 801937c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019380:	2108      	movs	r1, #8
 8019382:	4618      	mov	r0, r3
 8019384:	f7ff fa80 	bl	8018888 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019388:	bf00      	nop
 801938a:	79fb      	ldrb	r3, [r7, #7]
 801938c:	009b      	lsls	r3, r3, #2
 801938e:	3301      	adds	r3, #1
 8019390:	00db      	lsls	r3, r3, #3
 8019392:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019396:	4618      	mov	r0, r3
 8019398:	f7ff fa2a 	bl	80187f0 <WIZCHIP_READ>
 801939c:	4603      	mov	r3, r0
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d1f3      	bne.n	801938a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80193a2:	79fb      	ldrb	r3, [r7, #7]
 80193a4:	2201      	movs	r2, #1
 80193a6:	fa02 f303 	lsl.w	r3, r2, r3
 80193aa:	b21b      	sxth	r3, r3
 80193ac:	43db      	mvns	r3, r3
 80193ae:	b21a      	sxth	r2, r3
 80193b0:	4b1c      	ldr	r3, [pc, #112]	; (8019424 <disconnect+0xe4>)
 80193b2:	881b      	ldrh	r3, [r3, #0]
 80193b4:	b21b      	sxth	r3, r3
 80193b6:	4013      	ands	r3, r2
 80193b8:	b21b      	sxth	r3, r3
 80193ba:	b29a      	uxth	r2, r3
 80193bc:	4b19      	ldr	r3, [pc, #100]	; (8019424 <disconnect+0xe4>)
 80193be:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80193c0:	4b19      	ldr	r3, [pc, #100]	; (8019428 <disconnect+0xe8>)
 80193c2:	881b      	ldrh	r3, [r3, #0]
 80193c4:	461a      	mov	r2, r3
 80193c6:	79fb      	ldrb	r3, [r7, #7]
 80193c8:	fa42 f303 	asr.w	r3, r2, r3
 80193cc:	f003 0301 	and.w	r3, r3, #1
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d016      	beq.n	8019402 <disconnect+0xc2>
 80193d4:	2300      	movs	r3, #0
 80193d6:	e021      	b.n	801941c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80193d8:	79fb      	ldrb	r3, [r7, #7]
 80193da:	009b      	lsls	r3, r3, #2
 80193dc:	3301      	adds	r3, #1
 80193de:	00db      	lsls	r3, r3, #3
 80193e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7ff fa03 	bl	80187f0 <WIZCHIP_READ>
 80193ea:	4603      	mov	r3, r0
 80193ec:	f003 0308 	and.w	r3, r3, #8
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d006      	beq.n	8019402 <disconnect+0xc2>
	   {
	      close(sn);
 80193f4:	79fb      	ldrb	r3, [r7, #7]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7ff fdfe 	bl	8018ff8 <close>
	      return SOCKERR_TIMEOUT;
 80193fc:	f06f 030c 	mvn.w	r3, #12
 8019400:	e00c      	b.n	801941c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8019402:	79fb      	ldrb	r3, [r7, #7]
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	3301      	adds	r3, #1
 8019408:	00db      	lsls	r3, r3, #3
 801940a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801940e:	4618      	mov	r0, r3
 8019410:	f7ff f9ee 	bl	80187f0 <WIZCHIP_READ>
 8019414:	4603      	mov	r3, r0
 8019416:	2b00      	cmp	r3, #0
 8019418:	d1de      	bne.n	80193d8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 801941a:	2301      	movs	r3, #1
}
 801941c:	4618      	mov	r0, r3
 801941e:	3708      	adds	r7, #8
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}
 8019424:	20000986 	.word	0x20000986
 8019428:	20000984 	.word	0x20000984

0801942c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b084      	sub	sp, #16
 8019430:	af00      	add	r7, sp, #0
 8019432:	4603      	mov	r3, r0
 8019434:	6039      	str	r1, [r7, #0]
 8019436:	71fb      	strb	r3, [r7, #7]
 8019438:	4613      	mov	r3, r2
 801943a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 801943c:	2300      	movs	r3, #0
 801943e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8019440:	2300      	movs	r3, #0
 8019442:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8019444:	79fb      	ldrb	r3, [r7, #7]
 8019446:	2b08      	cmp	r3, #8
 8019448:	d902      	bls.n	8019450 <send+0x24>
 801944a:	f04f 33ff 	mov.w	r3, #4294967295
 801944e:	e0de      	b.n	801960e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019450:	79fb      	ldrb	r3, [r7, #7]
 8019452:	009b      	lsls	r3, r3, #2
 8019454:	3301      	adds	r3, #1
 8019456:	00db      	lsls	r3, r3, #3
 8019458:	4618      	mov	r0, r3
 801945a:	f7ff f9c9 	bl	80187f0 <WIZCHIP_READ>
 801945e:	4603      	mov	r3, r0
 8019460:	f003 030f 	and.w	r3, r3, #15
 8019464:	2b01      	cmp	r3, #1
 8019466:	d002      	beq.n	801946e <send+0x42>
 8019468:	f06f 0304 	mvn.w	r3, #4
 801946c:	e0cf      	b.n	801960e <send+0x1e2>
   CHECK_SOCKDATA();
 801946e:	88bb      	ldrh	r3, [r7, #4]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d102      	bne.n	801947a <send+0x4e>
 8019474:	f06f 030d 	mvn.w	r3, #13
 8019478:	e0c9      	b.n	801960e <send+0x1e2>
   tmp = getSn_SR(sn);
 801947a:	79fb      	ldrb	r3, [r7, #7]
 801947c:	009b      	lsls	r3, r3, #2
 801947e:	3301      	adds	r3, #1
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff f9b2 	bl	80187f0 <WIZCHIP_READ>
 801948c:	4603      	mov	r3, r0
 801948e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8019490:	7bfb      	ldrb	r3, [r7, #15]
 8019492:	2b17      	cmp	r3, #23
 8019494:	d005      	beq.n	80194a2 <send+0x76>
 8019496:	7bfb      	ldrb	r3, [r7, #15]
 8019498:	2b1c      	cmp	r3, #28
 801949a:	d002      	beq.n	80194a2 <send+0x76>
 801949c:	f06f 0306 	mvn.w	r3, #6
 80194a0:	e0b5      	b.n	801960e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80194a2:	4b5d      	ldr	r3, [pc, #372]	; (8019618 <send+0x1ec>)
 80194a4:	881b      	ldrh	r3, [r3, #0]
 80194a6:	461a      	mov	r2, r3
 80194a8:	79fb      	ldrb	r3, [r7, #7]
 80194aa:	fa42 f303 	asr.w	r3, r2, r3
 80194ae:	f003 0301 	and.w	r3, r3, #1
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d039      	beq.n	801952a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80194b6:	79fb      	ldrb	r3, [r7, #7]
 80194b8:	009b      	lsls	r3, r3, #2
 80194ba:	3301      	adds	r3, #1
 80194bc:	00db      	lsls	r3, r3, #3
 80194be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80194c2:	4618      	mov	r0, r3
 80194c4:	f7ff f994 	bl	80187f0 <WIZCHIP_READ>
 80194c8:	4603      	mov	r3, r0
 80194ca:	f003 031f 	and.w	r3, r3, #31
 80194ce:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80194d0:	7bfb      	ldrb	r3, [r7, #15]
 80194d2:	f003 0310 	and.w	r3, r3, #16
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d019      	beq.n	801950e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80194da:	79fb      	ldrb	r3, [r7, #7]
 80194dc:	009b      	lsls	r3, r3, #2
 80194de:	3301      	adds	r3, #1
 80194e0:	00db      	lsls	r3, r3, #3
 80194e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80194e6:	2110      	movs	r1, #16
 80194e8:	4618      	mov	r0, r3
 80194ea:	f7ff f9cd 	bl	8018888 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80194ee:	79fb      	ldrb	r3, [r7, #7]
 80194f0:	2201      	movs	r2, #1
 80194f2:	fa02 f303 	lsl.w	r3, r2, r3
 80194f6:	b21b      	sxth	r3, r3
 80194f8:	43db      	mvns	r3, r3
 80194fa:	b21a      	sxth	r2, r3
 80194fc:	4b46      	ldr	r3, [pc, #280]	; (8019618 <send+0x1ec>)
 80194fe:	881b      	ldrh	r3, [r3, #0]
 8019500:	b21b      	sxth	r3, r3
 8019502:	4013      	ands	r3, r2
 8019504:	b21b      	sxth	r3, r3
 8019506:	b29a      	uxth	r2, r3
 8019508:	4b43      	ldr	r3, [pc, #268]	; (8019618 <send+0x1ec>)
 801950a:	801a      	strh	r2, [r3, #0]
 801950c:	e00d      	b.n	801952a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 801950e:	7bfb      	ldrb	r3, [r7, #15]
 8019510:	f003 0308 	and.w	r3, r3, #8
 8019514:	2b00      	cmp	r3, #0
 8019516:	d006      	beq.n	8019526 <send+0xfa>
      {
         close(sn);
 8019518:	79fb      	ldrb	r3, [r7, #7]
 801951a:	4618      	mov	r0, r3
 801951c:	f7ff fd6c 	bl	8018ff8 <close>
         return SOCKERR_TIMEOUT;
 8019520:	f06f 030c 	mvn.w	r3, #12
 8019524:	e073      	b.n	801960e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8019526:	2300      	movs	r3, #0
 8019528:	e071      	b.n	801960e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 801952a:	79fb      	ldrb	r3, [r7, #7]
 801952c:	009b      	lsls	r3, r3, #2
 801952e:	3301      	adds	r3, #1
 8019530:	00db      	lsls	r3, r3, #3
 8019532:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019536:	4618      	mov	r0, r3
 8019538:	f7ff f95a 	bl	80187f0 <WIZCHIP_READ>
 801953c:	4603      	mov	r3, r0
 801953e:	b29b      	uxth	r3, r3
 8019540:	029b      	lsls	r3, r3, #10
 8019542:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8019544:	88ba      	ldrh	r2, [r7, #4]
 8019546:	89bb      	ldrh	r3, [r7, #12]
 8019548:	429a      	cmp	r2, r3
 801954a:	d901      	bls.n	8019550 <send+0x124>
 801954c:	89bb      	ldrh	r3, [r7, #12]
 801954e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8019550:	79fb      	ldrb	r3, [r7, #7]
 8019552:	4618      	mov	r0, r3
 8019554:	f7ff faa6 	bl	8018aa4 <getSn_TX_FSR>
 8019558:	4603      	mov	r3, r0
 801955a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 801955c:	79fb      	ldrb	r3, [r7, #7]
 801955e:	009b      	lsls	r3, r3, #2
 8019560:	3301      	adds	r3, #1
 8019562:	00db      	lsls	r3, r3, #3
 8019564:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019568:	4618      	mov	r0, r3
 801956a:	f7ff f941 	bl	80187f0 <WIZCHIP_READ>
 801956e:	4603      	mov	r3, r0
 8019570:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8019572:	7bfb      	ldrb	r3, [r7, #15]
 8019574:	2b17      	cmp	r3, #23
 8019576:	d009      	beq.n	801958c <send+0x160>
 8019578:	7bfb      	ldrb	r3, [r7, #15]
 801957a:	2b1c      	cmp	r3, #28
 801957c:	d006      	beq.n	801958c <send+0x160>
      {
         close(sn);
 801957e:	79fb      	ldrb	r3, [r7, #7]
 8019580:	4618      	mov	r0, r3
 8019582:	f7ff fd39 	bl	8018ff8 <close>
         return SOCKERR_SOCKSTATUS;
 8019586:	f06f 0306 	mvn.w	r3, #6
 801958a:	e040      	b.n	801960e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801958c:	4b23      	ldr	r3, [pc, #140]	; (801961c <send+0x1f0>)
 801958e:	881b      	ldrh	r3, [r3, #0]
 8019590:	461a      	mov	r2, r3
 8019592:	79fb      	ldrb	r3, [r7, #7]
 8019594:	fa42 f303 	asr.w	r3, r2, r3
 8019598:	f003 0301 	and.w	r3, r3, #1
 801959c:	2b00      	cmp	r3, #0
 801959e:	d005      	beq.n	80195ac <send+0x180>
 80195a0:	88ba      	ldrh	r2, [r7, #4]
 80195a2:	89bb      	ldrh	r3, [r7, #12]
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d901      	bls.n	80195ac <send+0x180>
 80195a8:	2300      	movs	r3, #0
 80195aa:	e030      	b.n	801960e <send+0x1e2>
      if(len <= freesize) break;
 80195ac:	88ba      	ldrh	r2, [r7, #4]
 80195ae:	89bb      	ldrh	r3, [r7, #12]
 80195b0:	429a      	cmp	r2, r3
 80195b2:	d900      	bls.n	80195b6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80195b4:	e7cc      	b.n	8019550 <send+0x124>
      if(len <= freesize) break;
 80195b6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80195b8:	88ba      	ldrh	r2, [r7, #4]
 80195ba:	79fb      	ldrb	r3, [r7, #7]
 80195bc:	6839      	ldr	r1, [r7, #0]
 80195be:	4618      	mov	r0, r3
 80195c0:	f7ff fb06 	bl	8018bd0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80195c4:	79fb      	ldrb	r3, [r7, #7]
 80195c6:	009b      	lsls	r3, r3, #2
 80195c8:	3301      	adds	r3, #1
 80195ca:	00db      	lsls	r3, r3, #3
 80195cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80195d0:	2120      	movs	r1, #32
 80195d2:	4618      	mov	r0, r3
 80195d4:	f7ff f958 	bl	8018888 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80195d8:	bf00      	nop
 80195da:	79fb      	ldrb	r3, [r7, #7]
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	3301      	adds	r3, #1
 80195e0:	00db      	lsls	r3, r3, #3
 80195e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80195e6:	4618      	mov	r0, r3
 80195e8:	f7ff f902 	bl	80187f0 <WIZCHIP_READ>
 80195ec:	4603      	mov	r3, r0
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d1f3      	bne.n	80195da <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80195f2:	79fb      	ldrb	r3, [r7, #7]
 80195f4:	2201      	movs	r2, #1
 80195f6:	fa02 f303 	lsl.w	r3, r2, r3
 80195fa:	b21a      	sxth	r2, r3
 80195fc:	4b06      	ldr	r3, [pc, #24]	; (8019618 <send+0x1ec>)
 80195fe:	881b      	ldrh	r3, [r3, #0]
 8019600:	b21b      	sxth	r3, r3
 8019602:	4313      	orrs	r3, r2
 8019604:	b21b      	sxth	r3, r3
 8019606:	b29a      	uxth	r2, r3
 8019608:	4b03      	ldr	r3, [pc, #12]	; (8019618 <send+0x1ec>)
 801960a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801960c:	88bb      	ldrh	r3, [r7, #4]
}
 801960e:	4618      	mov	r0, r3
 8019610:	3710      	adds	r7, #16
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	20000986 	.word	0x20000986
 801961c:	20000984 	.word	0x20000984

08019620 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019620:	b590      	push	{r4, r7, lr}
 8019622:	b085      	sub	sp, #20
 8019624:	af00      	add	r7, sp, #0
 8019626:	4603      	mov	r3, r0
 8019628:	6039      	str	r1, [r7, #0]
 801962a:	71fb      	strb	r3, [r7, #7]
 801962c:	4613      	mov	r3, r2
 801962e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8019630:	2300      	movs	r3, #0
 8019632:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8019634:	2300      	movs	r3, #0
 8019636:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8019638:	79fb      	ldrb	r3, [r7, #7]
 801963a:	2b08      	cmp	r3, #8
 801963c:	d902      	bls.n	8019644 <recv+0x24>
 801963e:	f04f 33ff 	mov.w	r3, #4294967295
 8019642:	e09c      	b.n	801977e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019644:	79fb      	ldrb	r3, [r7, #7]
 8019646:	009b      	lsls	r3, r3, #2
 8019648:	3301      	adds	r3, #1
 801964a:	00db      	lsls	r3, r3, #3
 801964c:	4618      	mov	r0, r3
 801964e:	f7ff f8cf 	bl	80187f0 <WIZCHIP_READ>
 8019652:	4603      	mov	r3, r0
 8019654:	f003 030f 	and.w	r3, r3, #15
 8019658:	2b01      	cmp	r3, #1
 801965a:	d002      	beq.n	8019662 <recv+0x42>
 801965c:	f06f 0304 	mvn.w	r3, #4
 8019660:	e08d      	b.n	801977e <recv+0x15e>
   CHECK_SOCKDATA();
 8019662:	88bb      	ldrh	r3, [r7, #4]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d102      	bne.n	801966e <recv+0x4e>
 8019668:	f06f 030d 	mvn.w	r3, #13
 801966c:	e087      	b.n	801977e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 801966e:	79fb      	ldrb	r3, [r7, #7]
 8019670:	009b      	lsls	r3, r3, #2
 8019672:	3301      	adds	r3, #1
 8019674:	00db      	lsls	r3, r3, #3
 8019676:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801967a:	4618      	mov	r0, r3
 801967c:	f7ff f8b8 	bl	80187f0 <WIZCHIP_READ>
 8019680:	4603      	mov	r3, r0
 8019682:	b29b      	uxth	r3, r3
 8019684:	029b      	lsls	r3, r3, #10
 8019686:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8019688:	89ba      	ldrh	r2, [r7, #12]
 801968a:	88bb      	ldrh	r3, [r7, #4]
 801968c:	429a      	cmp	r2, r3
 801968e:	d201      	bcs.n	8019694 <recv+0x74>
 8019690:	89bb      	ldrh	r3, [r7, #12]
 8019692:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8019694:	79fb      	ldrb	r3, [r7, #7]
 8019696:	4618      	mov	r0, r3
 8019698:	f7ff fa4f 	bl	8018b3a <getSn_RX_RSR>
 801969c:	4603      	mov	r3, r0
 801969e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80196a0:	79fb      	ldrb	r3, [r7, #7]
 80196a2:	009b      	lsls	r3, r3, #2
 80196a4:	3301      	adds	r3, #1
 80196a6:	00db      	lsls	r3, r3, #3
 80196a8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80196ac:	4618      	mov	r0, r3
 80196ae:	f7ff f89f 	bl	80187f0 <WIZCHIP_READ>
 80196b2:	4603      	mov	r3, r0
 80196b4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80196b6:	7bfb      	ldrb	r3, [r7, #15]
 80196b8:	2b17      	cmp	r3, #23
 80196ba:	d026      	beq.n	801970a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80196bc:	7bfb      	ldrb	r3, [r7, #15]
 80196be:	2b1c      	cmp	r3, #28
 80196c0:	d11c      	bne.n	80196fc <recv+0xdc>
            {
               if(recvsize != 0) break;
 80196c2:	89bb      	ldrh	r3, [r7, #12]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d133      	bne.n	8019730 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80196c8:	79fb      	ldrb	r3, [r7, #7]
 80196ca:	4618      	mov	r0, r3
 80196cc:	f7ff f9ea 	bl	8018aa4 <getSn_TX_FSR>
 80196d0:	4603      	mov	r3, r0
 80196d2:	461c      	mov	r4, r3
 80196d4:	79fb      	ldrb	r3, [r7, #7]
 80196d6:	009b      	lsls	r3, r3, #2
 80196d8:	3301      	adds	r3, #1
 80196da:	00db      	lsls	r3, r3, #3
 80196dc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80196e0:	4618      	mov	r0, r3
 80196e2:	f7ff f885 	bl	80187f0 <WIZCHIP_READ>
 80196e6:	4603      	mov	r3, r0
 80196e8:	029b      	lsls	r3, r3, #10
 80196ea:	429c      	cmp	r4, r3
 80196ec:	d10d      	bne.n	801970a <recv+0xea>
               {
                  close(sn);
 80196ee:	79fb      	ldrb	r3, [r7, #7]
 80196f0:	4618      	mov	r0, r3
 80196f2:	f7ff fc81 	bl	8018ff8 <close>
                  return SOCKERR_SOCKSTATUS;
 80196f6:	f06f 0306 	mvn.w	r3, #6
 80196fa:	e040      	b.n	801977e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80196fc:	79fb      	ldrb	r3, [r7, #7]
 80196fe:	4618      	mov	r0, r3
 8019700:	f7ff fc7a 	bl	8018ff8 <close>
               return SOCKERR_SOCKSTATUS;
 8019704:	f06f 0306 	mvn.w	r3, #6
 8019708:	e039      	b.n	801977e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801970a:	4b1f      	ldr	r3, [pc, #124]	; (8019788 <recv+0x168>)
 801970c:	881b      	ldrh	r3, [r3, #0]
 801970e:	461a      	mov	r2, r3
 8019710:	79fb      	ldrb	r3, [r7, #7]
 8019712:	fa42 f303 	asr.w	r3, r2, r3
 8019716:	f003 0301 	and.w	r3, r3, #1
 801971a:	2b00      	cmp	r3, #0
 801971c:	d004      	beq.n	8019728 <recv+0x108>
 801971e:	89bb      	ldrh	r3, [r7, #12]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d101      	bne.n	8019728 <recv+0x108>
 8019724:	2300      	movs	r3, #0
 8019726:	e02a      	b.n	801977e <recv+0x15e>
         if(recvsize != 0) break;
 8019728:	89bb      	ldrh	r3, [r7, #12]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d102      	bne.n	8019734 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 801972e:	e7b1      	b.n	8019694 <recv+0x74>
               if(recvsize != 0) break;
 8019730:	bf00      	nop
 8019732:	e000      	b.n	8019736 <recv+0x116>
         if(recvsize != 0) break;
 8019734:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8019736:	89ba      	ldrh	r2, [r7, #12]
 8019738:	88bb      	ldrh	r3, [r7, #4]
 801973a:	429a      	cmp	r2, r3
 801973c:	d201      	bcs.n	8019742 <recv+0x122>
 801973e:	89bb      	ldrh	r3, [r7, #12]
 8019740:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8019742:	88ba      	ldrh	r2, [r7, #4]
 8019744:	79fb      	ldrb	r3, [r7, #7]
 8019746:	6839      	ldr	r1, [r7, #0]
 8019748:	4618      	mov	r0, r3
 801974a:	f7ff fa9d 	bl	8018c88 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801974e:	79fb      	ldrb	r3, [r7, #7]
 8019750:	009b      	lsls	r3, r3, #2
 8019752:	3301      	adds	r3, #1
 8019754:	00db      	lsls	r3, r3, #3
 8019756:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801975a:	2140      	movs	r1, #64	; 0x40
 801975c:	4618      	mov	r0, r3
 801975e:	f7ff f893 	bl	8018888 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8019762:	bf00      	nop
 8019764:	79fb      	ldrb	r3, [r7, #7]
 8019766:	009b      	lsls	r3, r3, #2
 8019768:	3301      	adds	r3, #1
 801976a:	00db      	lsls	r3, r3, #3
 801976c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019770:	4618      	mov	r0, r3
 8019772:	f7ff f83d 	bl	80187f0 <WIZCHIP_READ>
 8019776:	4603      	mov	r3, r0
 8019778:	2b00      	cmp	r3, #0
 801977a:	d1f3      	bne.n	8019764 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801977c:	88bb      	ldrh	r3, [r7, #4]
}
 801977e:	4618      	mov	r0, r3
 8019780:	3714      	adds	r7, #20
 8019782:	46bd      	mov	sp, r7
 8019784:	bd90      	pop	{r4, r7, pc}
 8019786:	bf00      	nop
 8019788:	20000984 	.word	0x20000984

0801978c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b086      	sub	sp, #24
 8019790:	af00      	add	r7, sp, #0
 8019792:	60b9      	str	r1, [r7, #8]
 8019794:	607b      	str	r3, [r7, #4]
 8019796:	4603      	mov	r3, r0
 8019798:	73fb      	strb	r3, [r7, #15]
 801979a:	4613      	mov	r3, r2
 801979c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 801979e:	2300      	movs	r3, #0
 80197a0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80197a2:	2300      	movs	r3, #0
 80197a4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80197a6:	7bfb      	ldrb	r3, [r7, #15]
 80197a8:	2b08      	cmp	r3, #8
 80197aa:	d902      	bls.n	80197b2 <sendto+0x26>
 80197ac:	f04f 33ff 	mov.w	r3, #4294967295
 80197b0:	e11b      	b.n	80199ea <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80197b2:	7bfb      	ldrb	r3, [r7, #15]
 80197b4:	009b      	lsls	r3, r3, #2
 80197b6:	3301      	adds	r3, #1
 80197b8:	00db      	lsls	r3, r3, #3
 80197ba:	4618      	mov	r0, r3
 80197bc:	f7ff f818 	bl	80187f0 <WIZCHIP_READ>
 80197c0:	4603      	mov	r3, r0
 80197c2:	f003 030f 	and.w	r3, r3, #15
 80197c6:	3b02      	subs	r3, #2
 80197c8:	2b02      	cmp	r3, #2
 80197ca:	d902      	bls.n	80197d2 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80197cc:	f06f 0304 	mvn.w	r3, #4
 80197d0:	e10b      	b.n	80199ea <sendto+0x25e>
         break;
 80197d2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80197d4:	89bb      	ldrh	r3, [r7, #12]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d102      	bne.n	80197e0 <sendto+0x54>
 80197da:	f06f 030d 	mvn.w	r3, #13
 80197de:	e104      	b.n	80199ea <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	781b      	ldrb	r3, [r3, #0]
 80197e4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	021b      	lsls	r3, r3, #8
 80197ea:	687a      	ldr	r2, [r7, #4]
 80197ec:	3201      	adds	r2, #1
 80197ee:	7812      	ldrb	r2, [r2, #0]
 80197f0:	4413      	add	r3, r2
 80197f2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80197f4:	693b      	ldr	r3, [r7, #16]
 80197f6:	021b      	lsls	r3, r3, #8
 80197f8:	687a      	ldr	r2, [r7, #4]
 80197fa:	3202      	adds	r2, #2
 80197fc:	7812      	ldrb	r2, [r2, #0]
 80197fe:	4413      	add	r3, r2
 8019800:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	021b      	lsls	r3, r3, #8
 8019806:	687a      	ldr	r2, [r7, #4]
 8019808:	3203      	adds	r2, #3
 801980a:	7812      	ldrb	r2, [r2, #0]
 801980c:	4413      	add	r3, r2
 801980e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8019810:	693b      	ldr	r3, [r7, #16]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d10e      	bne.n	8019834 <sendto+0xa8>
 8019816:	7bfb      	ldrb	r3, [r7, #15]
 8019818:	009b      	lsls	r3, r3, #2
 801981a:	3301      	adds	r3, #1
 801981c:	00db      	lsls	r3, r3, #3
 801981e:	4618      	mov	r0, r3
 8019820:	f7fe ffe6 	bl	80187f0 <WIZCHIP_READ>
 8019824:	4603      	mov	r3, r0
 8019826:	f003 0304 	and.w	r3, r3, #4
 801982a:	2b04      	cmp	r3, #4
 801982c:	d002      	beq.n	8019834 <sendto+0xa8>
 801982e:	f06f 030b 	mvn.w	r3, #11
 8019832:	e0da      	b.n	80199ea <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8019834:	8c3b      	ldrh	r3, [r7, #32]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d10e      	bne.n	8019858 <sendto+0xcc>
 801983a:	7bfb      	ldrb	r3, [r7, #15]
 801983c:	009b      	lsls	r3, r3, #2
 801983e:	3301      	adds	r3, #1
 8019840:	00db      	lsls	r3, r3, #3
 8019842:	4618      	mov	r0, r3
 8019844:	f7fe ffd4 	bl	80187f0 <WIZCHIP_READ>
 8019848:	4603      	mov	r3, r0
 801984a:	f003 0304 	and.w	r3, r3, #4
 801984e:	2b04      	cmp	r3, #4
 8019850:	d002      	beq.n	8019858 <sendto+0xcc>
 8019852:	f06f 030a 	mvn.w	r3, #10
 8019856:	e0c8      	b.n	80199ea <sendto+0x25e>
   tmp = getSn_SR(sn);
 8019858:	7bfb      	ldrb	r3, [r7, #15]
 801985a:	009b      	lsls	r3, r3, #2
 801985c:	3301      	adds	r3, #1
 801985e:	00db      	lsls	r3, r3, #3
 8019860:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019864:	4618      	mov	r0, r3
 8019866:	f7fe ffc3 	bl	80187f0 <WIZCHIP_READ>
 801986a:	4603      	mov	r3, r0
 801986c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 801986e:	7dfb      	ldrb	r3, [r7, #23]
 8019870:	2b42      	cmp	r3, #66	; 0x42
 8019872:	d008      	beq.n	8019886 <sendto+0xfa>
 8019874:	7dfb      	ldrb	r3, [r7, #23]
 8019876:	2b22      	cmp	r3, #34	; 0x22
 8019878:	d005      	beq.n	8019886 <sendto+0xfa>
 801987a:	7dfb      	ldrb	r3, [r7, #23]
 801987c:	2b32      	cmp	r3, #50	; 0x32
 801987e:	d002      	beq.n	8019886 <sendto+0xfa>
 8019880:	f06f 0306 	mvn.w	r3, #6
 8019884:	e0b1      	b.n	80199ea <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8019886:	7bfb      	ldrb	r3, [r7, #15]
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	3301      	adds	r3, #1
 801988c:	00db      	lsls	r3, r3, #3
 801988e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8019892:	2204      	movs	r2, #4
 8019894:	6879      	ldr	r1, [r7, #4]
 8019896:	4618      	mov	r0, r3
 8019898:	f7ff f8a4 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 801989c:	7bfb      	ldrb	r3, [r7, #15]
 801989e:	009b      	lsls	r3, r3, #2
 80198a0:	3301      	adds	r3, #1
 80198a2:	00db      	lsls	r3, r3, #3
 80198a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80198a8:	461a      	mov	r2, r3
 80198aa:	8c3b      	ldrh	r3, [r7, #32]
 80198ac:	0a1b      	lsrs	r3, r3, #8
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	b2db      	uxtb	r3, r3
 80198b2:	4619      	mov	r1, r3
 80198b4:	4610      	mov	r0, r2
 80198b6:	f7fe ffe7 	bl	8018888 <WIZCHIP_WRITE>
 80198ba:	7bfb      	ldrb	r3, [r7, #15]
 80198bc:	009b      	lsls	r3, r3, #2
 80198be:	3301      	adds	r3, #1
 80198c0:	00db      	lsls	r3, r3, #3
 80198c2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80198c6:	461a      	mov	r2, r3
 80198c8:	8c3b      	ldrh	r3, [r7, #32]
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	4619      	mov	r1, r3
 80198ce:	4610      	mov	r0, r2
 80198d0:	f7fe ffda 	bl	8018888 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80198d4:	7bfb      	ldrb	r3, [r7, #15]
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	3301      	adds	r3, #1
 80198da:	00db      	lsls	r3, r3, #3
 80198dc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7fe ff85 	bl	80187f0 <WIZCHIP_READ>
 80198e6:	4603      	mov	r3, r0
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	029b      	lsls	r3, r3, #10
 80198ec:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80198ee:	89ba      	ldrh	r2, [r7, #12]
 80198f0:	8abb      	ldrh	r3, [r7, #20]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d901      	bls.n	80198fa <sendto+0x16e>
 80198f6:	8abb      	ldrh	r3, [r7, #20]
 80198f8:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80198fa:	7bfb      	ldrb	r3, [r7, #15]
 80198fc:	4618      	mov	r0, r3
 80198fe:	f7ff f8d1 	bl	8018aa4 <getSn_TX_FSR>
 8019902:	4603      	mov	r3, r0
 8019904:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8019906:	7bfb      	ldrb	r3, [r7, #15]
 8019908:	009b      	lsls	r3, r3, #2
 801990a:	3301      	adds	r3, #1
 801990c:	00db      	lsls	r3, r3, #3
 801990e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019912:	4618      	mov	r0, r3
 8019914:	f7fe ff6c 	bl	80187f0 <WIZCHIP_READ>
 8019918:	4603      	mov	r3, r0
 801991a:	2b00      	cmp	r3, #0
 801991c:	d102      	bne.n	8019924 <sendto+0x198>
 801991e:	f06f 0303 	mvn.w	r3, #3
 8019922:	e062      	b.n	80199ea <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8019924:	4b33      	ldr	r3, [pc, #204]	; (80199f4 <sendto+0x268>)
 8019926:	881b      	ldrh	r3, [r3, #0]
 8019928:	461a      	mov	r2, r3
 801992a:	7bfb      	ldrb	r3, [r7, #15]
 801992c:	fa42 f303 	asr.w	r3, r2, r3
 8019930:	f003 0301 	and.w	r3, r3, #1
 8019934:	2b00      	cmp	r3, #0
 8019936:	d005      	beq.n	8019944 <sendto+0x1b8>
 8019938:	89ba      	ldrh	r2, [r7, #12]
 801993a:	8abb      	ldrh	r3, [r7, #20]
 801993c:	429a      	cmp	r2, r3
 801993e:	d901      	bls.n	8019944 <sendto+0x1b8>
 8019940:	2300      	movs	r3, #0
 8019942:	e052      	b.n	80199ea <sendto+0x25e>
      if(len <= freesize) break;
 8019944:	89ba      	ldrh	r2, [r7, #12]
 8019946:	8abb      	ldrh	r3, [r7, #20]
 8019948:	429a      	cmp	r2, r3
 801994a:	d900      	bls.n	801994e <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 801994c:	e7d5      	b.n	80198fa <sendto+0x16e>
      if(len <= freesize) break;
 801994e:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8019950:	89ba      	ldrh	r2, [r7, #12]
 8019952:	7bfb      	ldrb	r3, [r7, #15]
 8019954:	68b9      	ldr	r1, [r7, #8]
 8019956:	4618      	mov	r0, r3
 8019958:	f7ff f93a 	bl	8018bd0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 801995c:	7bfb      	ldrb	r3, [r7, #15]
 801995e:	009b      	lsls	r3, r3, #2
 8019960:	3301      	adds	r3, #1
 8019962:	00db      	lsls	r3, r3, #3
 8019964:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019968:	2120      	movs	r1, #32
 801996a:	4618      	mov	r0, r3
 801996c:	f7fe ff8c 	bl	8018888 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019970:	bf00      	nop
 8019972:	7bfb      	ldrb	r3, [r7, #15]
 8019974:	009b      	lsls	r3, r3, #2
 8019976:	3301      	adds	r3, #1
 8019978:	00db      	lsls	r3, r3, #3
 801997a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801997e:	4618      	mov	r0, r3
 8019980:	f7fe ff36 	bl	80187f0 <WIZCHIP_READ>
 8019984:	4603      	mov	r3, r0
 8019986:	2b00      	cmp	r3, #0
 8019988:	d1f3      	bne.n	8019972 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 801998a:	7bfb      	ldrb	r3, [r7, #15]
 801998c:	009b      	lsls	r3, r3, #2
 801998e:	3301      	adds	r3, #1
 8019990:	00db      	lsls	r3, r3, #3
 8019992:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019996:	4618      	mov	r0, r3
 8019998:	f7fe ff2a 	bl	80187f0 <WIZCHIP_READ>
 801999c:	4603      	mov	r3, r0
 801999e:	f003 031f 	and.w	r3, r3, #31
 80199a2:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80199a4:	7dfb      	ldrb	r3, [r7, #23]
 80199a6:	f003 0310 	and.w	r3, r3, #16
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d00c      	beq.n	80199c8 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80199ae:	7bfb      	ldrb	r3, [r7, #15]
 80199b0:	009b      	lsls	r3, r3, #2
 80199b2:	3301      	adds	r3, #1
 80199b4:	00db      	lsls	r3, r3, #3
 80199b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80199ba:	2110      	movs	r1, #16
 80199bc:	4618      	mov	r0, r3
 80199be:	f7fe ff63 	bl	8018888 <WIZCHIP_WRITE>
         break;
 80199c2:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80199c4:	89bb      	ldrh	r3, [r7, #12]
 80199c6:	e010      	b.n	80199ea <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 80199c8:	7dfb      	ldrb	r3, [r7, #23]
 80199ca:	f003 0308 	and.w	r3, r3, #8
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d0db      	beq.n	801998a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80199d2:	7bfb      	ldrb	r3, [r7, #15]
 80199d4:	009b      	lsls	r3, r3, #2
 80199d6:	3301      	adds	r3, #1
 80199d8:	00db      	lsls	r3, r3, #3
 80199da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80199de:	2108      	movs	r1, #8
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7fe ff51 	bl	8018888 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80199e6:	f06f 030c 	mvn.w	r3, #12
}
 80199ea:	4618      	mov	r0, r3
 80199ec:	3718      	adds	r7, #24
 80199ee:	46bd      	mov	sp, r7
 80199f0:	bd80      	pop	{r7, pc}
 80199f2:	bf00      	nop
 80199f4:	20000984 	.word	0x20000984

080199f8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b088      	sub	sp, #32
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	60b9      	str	r1, [r7, #8]
 8019a00:	607b      	str	r3, [r7, #4]
 8019a02:	4603      	mov	r3, r0
 8019a04:	73fb      	strb	r3, [r7, #15]
 8019a06:	4613      	mov	r3, r2
 8019a08:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019a0e:	7bfb      	ldrb	r3, [r7, #15]
 8019a10:	2b08      	cmp	r3, #8
 8019a12:	d902      	bls.n	8019a1a <recvfrom+0x22>
 8019a14:	f04f 33ff 	mov.w	r3, #4294967295
 8019a18:	e1d4      	b.n	8019dc4 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8019a1a:	7bfb      	ldrb	r3, [r7, #15]
 8019a1c:	009b      	lsls	r3, r3, #2
 8019a1e:	3301      	adds	r3, #1
 8019a20:	00db      	lsls	r3, r3, #3
 8019a22:	4618      	mov	r0, r3
 8019a24:	f7fe fee4 	bl	80187f0 <WIZCHIP_READ>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	777b      	strb	r3, [r7, #29]
 8019a2c:	7f7b      	ldrb	r3, [r7, #29]
 8019a2e:	f003 030f 	and.w	r3, r3, #15
 8019a32:	3b02      	subs	r3, #2
 8019a34:	2b02      	cmp	r3, #2
 8019a36:	d902      	bls.n	8019a3e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019a38:	f06f 0304 	mvn.w	r3, #4
 8019a3c:	e1c2      	b.n	8019dc4 <recvfrom+0x3cc>
         break;
 8019a3e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019a40:	89bb      	ldrh	r3, [r7, #12]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d102      	bne.n	8019a4c <recvfrom+0x54>
 8019a46:	f06f 030d 	mvn.w	r3, #13
 8019a4a:	e1bb      	b.n	8019dc4 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8019a4c:	7bfb      	ldrb	r3, [r7, #15]
 8019a4e:	4a88      	ldr	r2, [pc, #544]	; (8019c70 <recvfrom+0x278>)
 8019a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d128      	bne.n	8019aaa <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8019a58:	7bfb      	ldrb	r3, [r7, #15]
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f7ff f86d 	bl	8018b3a <getSn_RX_RSR>
 8019a60:	4603      	mov	r3, r0
 8019a62:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8019a64:	7bfb      	ldrb	r3, [r7, #15]
 8019a66:	009b      	lsls	r3, r3, #2
 8019a68:	3301      	adds	r3, #1
 8019a6a:	00db      	lsls	r3, r3, #3
 8019a6c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7fe febd 	bl	80187f0 <WIZCHIP_READ>
 8019a76:	4603      	mov	r3, r0
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d102      	bne.n	8019a82 <recvfrom+0x8a>
 8019a7c:	f06f 0303 	mvn.w	r3, #3
 8019a80:	e1a0      	b.n	8019dc4 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8019a82:	4b7c      	ldr	r3, [pc, #496]	; (8019c74 <recvfrom+0x27c>)
 8019a84:	881b      	ldrh	r3, [r3, #0]
 8019a86:	461a      	mov	r2, r3
 8019a88:	7bfb      	ldrb	r3, [r7, #15]
 8019a8a:	fa42 f303 	asr.w	r3, r2, r3
 8019a8e:	f003 0301 	and.w	r3, r3, #1
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d004      	beq.n	8019aa0 <recvfrom+0xa8>
 8019a96:	8bfb      	ldrh	r3, [r7, #30]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d101      	bne.n	8019aa0 <recvfrom+0xa8>
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	e191      	b.n	8019dc4 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8019aa0:	8bfb      	ldrh	r3, [r7, #30]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d100      	bne.n	8019aa8 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8019aa6:	e7d7      	b.n	8019a58 <recvfrom+0x60>
         if(pack_len != 0) break;
 8019aa8:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8019aaa:	7f7b      	ldrb	r3, [r7, #29]
 8019aac:	f003 0307 	and.w	r3, r3, #7
 8019ab0:	2b04      	cmp	r3, #4
 8019ab2:	d079      	beq.n	8019ba8 <recvfrom+0x1b0>
 8019ab4:	2b04      	cmp	r3, #4
 8019ab6:	f300 8142 	bgt.w	8019d3e <recvfrom+0x346>
 8019aba:	2b02      	cmp	r3, #2
 8019abc:	d003      	beq.n	8019ac6 <recvfrom+0xce>
 8019abe:	2b03      	cmp	r3, #3
 8019ac0:	f000 80dc 	beq.w	8019c7c <recvfrom+0x284>
 8019ac4:	e13b      	b.n	8019d3e <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8019ac6:	7bfb      	ldrb	r3, [r7, #15]
 8019ac8:	4a69      	ldr	r2, [pc, #420]	; (8019c70 <recvfrom+0x278>)
 8019aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d152      	bne.n	8019b78 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8019ad2:	f107 0114 	add.w	r1, r7, #20
 8019ad6:	7bfb      	ldrb	r3, [r7, #15]
 8019ad8:	2208      	movs	r2, #8
 8019ada:	4618      	mov	r0, r3
 8019adc:	f7ff f8d4 	bl	8018c88 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019ae0:	7bfb      	ldrb	r3, [r7, #15]
 8019ae2:	009b      	lsls	r3, r3, #2
 8019ae4:	3301      	adds	r3, #1
 8019ae6:	00db      	lsls	r3, r3, #3
 8019ae8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019aec:	2140      	movs	r1, #64	; 0x40
 8019aee:	4618      	mov	r0, r3
 8019af0:	f7fe feca 	bl	8018888 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019af4:	bf00      	nop
 8019af6:	7bfb      	ldrb	r3, [r7, #15]
 8019af8:	009b      	lsls	r3, r3, #2
 8019afa:	3301      	adds	r3, #1
 8019afc:	00db      	lsls	r3, r3, #3
 8019afe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7fe fe74 	bl	80187f0 <WIZCHIP_READ>
 8019b08:	4603      	mov	r3, r0
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d1f3      	bne.n	8019af6 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019b0e:	7d3a      	ldrb	r2, [r7, #20]
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	3301      	adds	r3, #1
 8019b18:	7d7a      	ldrb	r2, [r7, #21]
 8019b1a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	3302      	adds	r3, #2
 8019b20:	7dba      	ldrb	r2, [r7, #22]
 8019b22:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	3303      	adds	r3, #3
 8019b28:	7dfa      	ldrb	r2, [r7, #23]
 8019b2a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8019b2c:	7e3b      	ldrb	r3, [r7, #24]
 8019b2e:	b29a      	uxth	r2, r3
 8019b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b32:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8019b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b36:	881b      	ldrh	r3, [r3, #0]
 8019b38:	021b      	lsls	r3, r3, #8
 8019b3a:	b29a      	uxth	r2, r3
 8019b3c:	7e7b      	ldrb	r3, [r7, #25]
 8019b3e:	b29b      	uxth	r3, r3
 8019b40:	4413      	add	r3, r2
 8019b42:	b29a      	uxth	r2, r3
 8019b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b46:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8019b48:	7eba      	ldrb	r2, [r7, #26]
 8019b4a:	7bfb      	ldrb	r3, [r7, #15]
 8019b4c:	b291      	uxth	r1, r2
 8019b4e:	4a48      	ldr	r2, [pc, #288]	; (8019c70 <recvfrom+0x278>)
 8019b50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8019b54:	7bfb      	ldrb	r3, [r7, #15]
 8019b56:	4a46      	ldr	r2, [pc, #280]	; (8019c70 <recvfrom+0x278>)
 8019b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b5c:	021b      	lsls	r3, r3, #8
 8019b5e:	b299      	uxth	r1, r3
 8019b60:	7efb      	ldrb	r3, [r7, #27]
 8019b62:	b29a      	uxth	r2, r3
 8019b64:	7bfb      	ldrb	r3, [r7, #15]
 8019b66:	440a      	add	r2, r1
 8019b68:	b291      	uxth	r1, r2
 8019b6a:	4a41      	ldr	r2, [pc, #260]	; (8019c70 <recvfrom+0x278>)
 8019b6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8019b70:	7bfb      	ldrb	r3, [r7, #15]
 8019b72:	4a41      	ldr	r2, [pc, #260]	; (8019c78 <recvfrom+0x280>)
 8019b74:	2180      	movs	r1, #128	; 0x80
 8019b76:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019b78:	7bfb      	ldrb	r3, [r7, #15]
 8019b7a:	4a3d      	ldr	r2, [pc, #244]	; (8019c70 <recvfrom+0x278>)
 8019b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b80:	89ba      	ldrh	r2, [r7, #12]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d202      	bcs.n	8019b8c <recvfrom+0x194>
 8019b86:	89bb      	ldrh	r3, [r7, #12]
 8019b88:	83fb      	strh	r3, [r7, #30]
 8019b8a:	e004      	b.n	8019b96 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8019b8c:	7bfb      	ldrb	r3, [r7, #15]
 8019b8e:	4a38      	ldr	r2, [pc, #224]	; (8019c70 <recvfrom+0x278>)
 8019b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b94:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8019b96:	8bfb      	ldrh	r3, [r7, #30]
 8019b98:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019b9a:	8bfa      	ldrh	r2, [r7, #30]
 8019b9c:	7bfb      	ldrb	r3, [r7, #15]
 8019b9e:	68b9      	ldr	r1, [r7, #8]
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7ff f871 	bl	8018c88 <wiz_recv_data>
			break;
 8019ba6:	e0d6      	b.n	8019d56 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8019ba8:	7bfb      	ldrb	r3, [r7, #15]
 8019baa:	4a31      	ldr	r2, [pc, #196]	; (8019c70 <recvfrom+0x278>)
 8019bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d146      	bne.n	8019c42 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8019bb4:	f107 0114 	add.w	r1, r7, #20
 8019bb8:	7bfb      	ldrb	r3, [r7, #15]
 8019bba:	2202      	movs	r2, #2
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f7ff f863 	bl	8018c88 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019bc2:	7bfb      	ldrb	r3, [r7, #15]
 8019bc4:	009b      	lsls	r3, r3, #2
 8019bc6:	3301      	adds	r3, #1
 8019bc8:	00db      	lsls	r3, r3, #3
 8019bca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019bce:	2140      	movs	r1, #64	; 0x40
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	f7fe fe59 	bl	8018888 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019bd6:	bf00      	nop
 8019bd8:	7bfb      	ldrb	r3, [r7, #15]
 8019bda:	009b      	lsls	r3, r3, #2
 8019bdc:	3301      	adds	r3, #1
 8019bde:	00db      	lsls	r3, r3, #3
 8019be0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019be4:	4618      	mov	r0, r3
 8019be6:	f7fe fe03 	bl	80187f0 <WIZCHIP_READ>
 8019bea:	4603      	mov	r3, r0
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d1f3      	bne.n	8019bd8 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019bf0:	7d3a      	ldrb	r2, [r7, #20]
 8019bf2:	7bfb      	ldrb	r3, [r7, #15]
 8019bf4:	b291      	uxth	r1, r2
 8019bf6:	4a1e      	ldr	r2, [pc, #120]	; (8019c70 <recvfrom+0x278>)
 8019bf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019bfc:	7bfb      	ldrb	r3, [r7, #15]
 8019bfe:	4a1c      	ldr	r2, [pc, #112]	; (8019c70 <recvfrom+0x278>)
 8019c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c04:	021b      	lsls	r3, r3, #8
 8019c06:	b29a      	uxth	r2, r3
 8019c08:	7d7b      	ldrb	r3, [r7, #21]
 8019c0a:	b29b      	uxth	r3, r3
 8019c0c:	4413      	add	r3, r2
 8019c0e:	b29a      	uxth	r2, r3
 8019c10:	7bfb      	ldrb	r3, [r7, #15]
 8019c12:	3a02      	subs	r2, #2
 8019c14:	b291      	uxth	r1, r2
 8019c16:	4a16      	ldr	r2, [pc, #88]	; (8019c70 <recvfrom+0x278>)
 8019c18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8019c1c:	7bfb      	ldrb	r3, [r7, #15]
 8019c1e:	4a14      	ldr	r2, [pc, #80]	; (8019c70 <recvfrom+0x278>)
 8019c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c24:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8019c28:	4293      	cmp	r3, r2
 8019c2a:	d906      	bls.n	8019c3a <recvfrom+0x242>
   			{
   			   close(sn);
 8019c2c:	7bfb      	ldrb	r3, [r7, #15]
 8019c2e:	4618      	mov	r0, r3
 8019c30:	f7ff f9e2 	bl	8018ff8 <close>
   			   return SOCKFATAL_PACKLEN;
 8019c34:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8019c38:	e0c4      	b.n	8019dc4 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8019c3a:	7bfb      	ldrb	r3, [r7, #15]
 8019c3c:	4a0e      	ldr	r2, [pc, #56]	; (8019c78 <recvfrom+0x280>)
 8019c3e:	2180      	movs	r1, #128	; 0x80
 8019c40:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019c42:	7bfb      	ldrb	r3, [r7, #15]
 8019c44:	4a0a      	ldr	r2, [pc, #40]	; (8019c70 <recvfrom+0x278>)
 8019c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c4a:	89ba      	ldrh	r2, [r7, #12]
 8019c4c:	429a      	cmp	r2, r3
 8019c4e:	d202      	bcs.n	8019c56 <recvfrom+0x25e>
 8019c50:	89bb      	ldrh	r3, [r7, #12]
 8019c52:	83fb      	strh	r3, [r7, #30]
 8019c54:	e004      	b.n	8019c60 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8019c56:	7bfb      	ldrb	r3, [r7, #15]
 8019c58:	4a05      	ldr	r2, [pc, #20]	; (8019c70 <recvfrom+0x278>)
 8019c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c5e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8019c60:	8bfa      	ldrh	r2, [r7, #30]
 8019c62:	7bfb      	ldrb	r3, [r7, #15]
 8019c64:	68b9      	ldr	r1, [r7, #8]
 8019c66:	4618      	mov	r0, r3
 8019c68:	f7ff f80e 	bl	8018c88 <wiz_recv_data>
		   break;
 8019c6c:	e073      	b.n	8019d56 <recvfrom+0x35e>
 8019c6e:	bf00      	nop
 8019c70:	20000988 	.word	0x20000988
 8019c74:	20000984 	.word	0x20000984
 8019c78:	20000998 	.word	0x20000998
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8019c7c:	7bfb      	ldrb	r3, [r7, #15]
 8019c7e:	4a53      	ldr	r2, [pc, #332]	; (8019dcc <recvfrom+0x3d4>)
 8019c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d144      	bne.n	8019d12 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8019c88:	f107 0114 	add.w	r1, r7, #20
 8019c8c:	7bfb      	ldrb	r3, [r7, #15]
 8019c8e:	2206      	movs	r2, #6
 8019c90:	4618      	mov	r0, r3
 8019c92:	f7fe fff9 	bl	8018c88 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019c96:	7bfb      	ldrb	r3, [r7, #15]
 8019c98:	009b      	lsls	r3, r3, #2
 8019c9a:	3301      	adds	r3, #1
 8019c9c:	00db      	lsls	r3, r3, #3
 8019c9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019ca2:	2140      	movs	r1, #64	; 0x40
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	f7fe fdef 	bl	8018888 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019caa:	bf00      	nop
 8019cac:	7bfb      	ldrb	r3, [r7, #15]
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	3301      	adds	r3, #1
 8019cb2:	00db      	lsls	r3, r3, #3
 8019cb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f7fe fd99 	bl	80187f0 <WIZCHIP_READ>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d1f3      	bne.n	8019cac <recvfrom+0x2b4>
   			addr[0] = head[0];
 8019cc4:	7d3a      	ldrb	r2, [r7, #20]
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	3301      	adds	r3, #1
 8019cce:	7d7a      	ldrb	r2, [r7, #21]
 8019cd0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	3302      	adds	r3, #2
 8019cd6:	7dba      	ldrb	r2, [r7, #22]
 8019cd8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	3303      	adds	r3, #3
 8019cde:	7dfa      	ldrb	r2, [r7, #23]
 8019ce0:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019ce2:	7e3a      	ldrb	r2, [r7, #24]
 8019ce4:	7bfb      	ldrb	r3, [r7, #15]
 8019ce6:	b291      	uxth	r1, r2
 8019ce8:	4a38      	ldr	r2, [pc, #224]	; (8019dcc <recvfrom+0x3d4>)
 8019cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019cee:	7bfb      	ldrb	r3, [r7, #15]
 8019cf0:	4a36      	ldr	r2, [pc, #216]	; (8019dcc <recvfrom+0x3d4>)
 8019cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cf6:	021b      	lsls	r3, r3, #8
 8019cf8:	b299      	uxth	r1, r3
 8019cfa:	7e7b      	ldrb	r3, [r7, #25]
 8019cfc:	b29a      	uxth	r2, r3
 8019cfe:	7bfb      	ldrb	r3, [r7, #15]
 8019d00:	440a      	add	r2, r1
 8019d02:	b291      	uxth	r1, r2
 8019d04:	4a31      	ldr	r2, [pc, #196]	; (8019dcc <recvfrom+0x3d4>)
 8019d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8019d0a:	7bfb      	ldrb	r3, [r7, #15]
 8019d0c:	4a30      	ldr	r2, [pc, #192]	; (8019dd0 <recvfrom+0x3d8>)
 8019d0e:	2180      	movs	r1, #128	; 0x80
 8019d10:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019d12:	7bfb      	ldrb	r3, [r7, #15]
 8019d14:	4a2d      	ldr	r2, [pc, #180]	; (8019dcc <recvfrom+0x3d4>)
 8019d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d1a:	89ba      	ldrh	r2, [r7, #12]
 8019d1c:	429a      	cmp	r2, r3
 8019d1e:	d202      	bcs.n	8019d26 <recvfrom+0x32e>
 8019d20:	89bb      	ldrh	r3, [r7, #12]
 8019d22:	83fb      	strh	r3, [r7, #30]
 8019d24:	e004      	b.n	8019d30 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8019d26:	7bfb      	ldrb	r3, [r7, #15]
 8019d28:	4a28      	ldr	r2, [pc, #160]	; (8019dcc <recvfrom+0x3d4>)
 8019d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d2e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019d30:	8bfa      	ldrh	r2, [r7, #30]
 8019d32:	7bfb      	ldrb	r3, [r7, #15]
 8019d34:	68b9      	ldr	r1, [r7, #8]
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7fe ffa6 	bl	8018c88 <wiz_recv_data>
			break;
 8019d3c:	e00b      	b.n	8019d56 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019d3e:	8bfa      	ldrh	r2, [r7, #30]
 8019d40:	7bfb      	ldrb	r3, [r7, #15]
 8019d42:	4611      	mov	r1, r2
 8019d44:	4618      	mov	r0, r3
 8019d46:	f7fe fffb 	bl	8018d40 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8019d4a:	7bfb      	ldrb	r3, [r7, #15]
 8019d4c:	491f      	ldr	r1, [pc, #124]	; (8019dcc <recvfrom+0x3d4>)
 8019d4e:	8bfa      	ldrh	r2, [r7, #30]
 8019d50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019d54:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8019d56:	7bfb      	ldrb	r3, [r7, #15]
 8019d58:	009b      	lsls	r3, r3, #2
 8019d5a:	3301      	adds	r3, #1
 8019d5c:	00db      	lsls	r3, r3, #3
 8019d5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019d62:	2140      	movs	r1, #64	; 0x40
 8019d64:	4618      	mov	r0, r3
 8019d66:	f7fe fd8f 	bl	8018888 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8019d6a:	bf00      	nop
 8019d6c:	7bfb      	ldrb	r3, [r7, #15]
 8019d6e:	009b      	lsls	r3, r3, #2
 8019d70:	3301      	adds	r3, #1
 8019d72:	00db      	lsls	r3, r3, #3
 8019d74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7fe fd39 	bl	80187f0 <WIZCHIP_READ>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d1f3      	bne.n	8019d6c <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8019d84:	7bfb      	ldrb	r3, [r7, #15]
 8019d86:	4a11      	ldr	r2, [pc, #68]	; (8019dcc <recvfrom+0x3d4>)
 8019d88:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8019d8c:	7bfb      	ldrb	r3, [r7, #15]
 8019d8e:	8bfa      	ldrh	r2, [r7, #30]
 8019d90:	1a8a      	subs	r2, r1, r2
 8019d92:	b291      	uxth	r1, r2
 8019d94:	4a0d      	ldr	r2, [pc, #52]	; (8019dcc <recvfrom+0x3d4>)
 8019d96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8019d9a:	7bfb      	ldrb	r3, [r7, #15]
 8019d9c:	4a0b      	ldr	r2, [pc, #44]	; (8019dcc <recvfrom+0x3d4>)
 8019d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d009      	beq.n	8019dba <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8019da6:	7bfb      	ldrb	r3, [r7, #15]
 8019da8:	4a09      	ldr	r2, [pc, #36]	; (8019dd0 <recvfrom+0x3d8>)
 8019daa:	5cd2      	ldrb	r2, [r2, r3]
 8019dac:	7bfb      	ldrb	r3, [r7, #15]
 8019dae:	f042 0201 	orr.w	r2, r2, #1
 8019db2:	b2d1      	uxtb	r1, r2
 8019db4:	4a06      	ldr	r2, [pc, #24]	; (8019dd0 <recvfrom+0x3d8>)
 8019db6:	54d1      	strb	r1, [r2, r3]
 8019db8:	e003      	b.n	8019dc2 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8019dba:	7bfb      	ldrb	r3, [r7, #15]
 8019dbc:	4a04      	ldr	r2, [pc, #16]	; (8019dd0 <recvfrom+0x3d8>)
 8019dbe:	2100      	movs	r1, #0
 8019dc0:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019dc2:	8bfb      	ldrh	r3, [r7, #30]
}
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	3720      	adds	r7, #32
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}
 8019dcc:	20000988 	.word	0x20000988
 8019dd0:	20000998 	.word	0x20000998

08019dd4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019dd4:	b480      	push	{r7}
 8019dd6:	af00      	add	r7, sp, #0
 8019dd8:	bf00      	nop
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de0:	4770      	bx	lr

08019de2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019de2:	b480      	push	{r7}
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	bf00      	nop
 8019de8:	46bd      	mov	sp, r7
 8019dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dee:	4770      	bx	lr

08019df0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019df0:	b480      	push	{r7}
 8019df2:	af00      	add	r7, sp, #0
 8019df4:	bf00      	nop
 8019df6:	46bd      	mov	sp, r7
 8019df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dfc:	4770      	bx	lr

08019dfe <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019dfe:	b480      	push	{r7}
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	bf00      	nop
 8019e04:	46bd      	mov	sp, r7
 8019e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0a:	4770      	bx	lr

08019e0c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019e0c:	b480      	push	{r7}
 8019e0e:	b083      	sub	sp, #12
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	781b      	ldrb	r3, [r3, #0]
 8019e18:	b2db      	uxtb	r3, r3
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	370c      	adds	r7, #12
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e24:	4770      	bx	lr

08019e26 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8019e26:	b480      	push	{r7}
 8019e28:	b083      	sub	sp, #12
 8019e2a:	af00      	add	r7, sp, #0
 8019e2c:	6078      	str	r0, [r7, #4]
 8019e2e:	460b      	mov	r3, r1
 8019e30:	70fb      	strb	r3, [r7, #3]
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	78fa      	ldrb	r2, [r7, #3]
 8019e36:	701a      	strb	r2, [r3, #0]
 8019e38:	bf00      	nop
 8019e3a:	370c      	adds	r7, #12
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e42:	4770      	bx	lr

08019e44 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019e44:	b480      	push	{r7}
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	2300      	movs	r3, #0
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e52:	4770      	bx	lr

08019e54 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019e54:	b480      	push	{r7}
 8019e56:	b083      	sub	sp, #12
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	71fb      	strb	r3, [r7, #7]
 8019e5e:	bf00      	nop
 8019e60:	370c      	adds	r7, #12
 8019e62:	46bd      	mov	sp, r7
 8019e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e68:	4770      	bx	lr
	...

08019e6c <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8019e6c:	b480      	push	{r7}
 8019e6e:	b083      	sub	sp, #12
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
 8019e74:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d002      	beq.n	8019e82 <reg_wizchip_cris_cbfunc+0x16>
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d106      	bne.n	8019e90 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8019e82:	4b0a      	ldr	r3, [pc, #40]	; (8019eac <reg_wizchip_cris_cbfunc+0x40>)
 8019e84:	4a0a      	ldr	r2, [pc, #40]	; (8019eb0 <reg_wizchip_cris_cbfunc+0x44>)
 8019e86:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8019e88:	4b08      	ldr	r3, [pc, #32]	; (8019eac <reg_wizchip_cris_cbfunc+0x40>)
 8019e8a:	4a0a      	ldr	r2, [pc, #40]	; (8019eb4 <reg_wizchip_cris_cbfunc+0x48>)
 8019e8c:	611a      	str	r2, [r3, #16]
 8019e8e:	e006      	b.n	8019e9e <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8019e90:	4a06      	ldr	r2, [pc, #24]	; (8019eac <reg_wizchip_cris_cbfunc+0x40>)
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8019e96:	4a05      	ldr	r2, [pc, #20]	; (8019eac <reg_wizchip_cris_cbfunc+0x40>)
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	6113      	str	r3, [r2, #16]
   }
}
 8019e9c:	bf00      	nop
 8019e9e:	bf00      	nop
 8019ea0:	370c      	adds	r7, #12
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea8:	4770      	bx	lr
 8019eaa:	bf00      	nop
 8019eac:	200000c4 	.word	0x200000c4
 8019eb0:	08019dd5 	.word	0x08019dd5
 8019eb4:	08019de3 	.word	0x08019de3

08019eb8 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8019eb8:	b480      	push	{r7}
 8019eba:	b083      	sub	sp, #12
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
 8019ec0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d002      	beq.n	8019ece <reg_wizchip_cs_cbfunc+0x16>
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d106      	bne.n	8019edc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8019ece:	4b0a      	ldr	r3, [pc, #40]	; (8019ef8 <reg_wizchip_cs_cbfunc+0x40>)
 8019ed0:	4a0a      	ldr	r2, [pc, #40]	; (8019efc <reg_wizchip_cs_cbfunc+0x44>)
 8019ed2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8019ed4:	4b08      	ldr	r3, [pc, #32]	; (8019ef8 <reg_wizchip_cs_cbfunc+0x40>)
 8019ed6:	4a0a      	ldr	r2, [pc, #40]	; (8019f00 <reg_wizchip_cs_cbfunc+0x48>)
 8019ed8:	619a      	str	r2, [r3, #24]
 8019eda:	e006      	b.n	8019eea <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8019edc:	4a06      	ldr	r2, [pc, #24]	; (8019ef8 <reg_wizchip_cs_cbfunc+0x40>)
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8019ee2:	4a05      	ldr	r2, [pc, #20]	; (8019ef8 <reg_wizchip_cs_cbfunc+0x40>)
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	6193      	str	r3, [r2, #24]
   }
}
 8019ee8:	bf00      	nop
 8019eea:	bf00      	nop
 8019eec:	370c      	adds	r7, #12
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef4:	4770      	bx	lr
 8019ef6:	bf00      	nop
 8019ef8:	200000c4 	.word	0x200000c4
 8019efc:	08019df1 	.word	0x08019df1
 8019f00:	08019dff 	.word	0x08019dff

08019f04 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8019f04:	b480      	push	{r7}
 8019f06:	b083      	sub	sp, #12
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
 8019f0c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8019f0e:	bf00      	nop
 8019f10:	4b0f      	ldr	r3, [pc, #60]	; (8019f50 <reg_wizchip_spi_cbfunc+0x4c>)
 8019f12:	881b      	ldrh	r3, [r3, #0]
 8019f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d0f9      	beq.n	8019f10 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d002      	beq.n	8019f28 <reg_wizchip_spi_cbfunc+0x24>
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d106      	bne.n	8019f36 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8019f28:	4b09      	ldr	r3, [pc, #36]	; (8019f50 <reg_wizchip_spi_cbfunc+0x4c>)
 8019f2a:	4a0a      	ldr	r2, [pc, #40]	; (8019f54 <reg_wizchip_spi_cbfunc+0x50>)
 8019f2c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8019f2e:	4b08      	ldr	r3, [pc, #32]	; (8019f50 <reg_wizchip_spi_cbfunc+0x4c>)
 8019f30:	4a09      	ldr	r2, [pc, #36]	; (8019f58 <reg_wizchip_spi_cbfunc+0x54>)
 8019f32:	621a      	str	r2, [r3, #32]
 8019f34:	e006      	b.n	8019f44 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8019f36:	4a06      	ldr	r2, [pc, #24]	; (8019f50 <reg_wizchip_spi_cbfunc+0x4c>)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8019f3c:	4a04      	ldr	r2, [pc, #16]	; (8019f50 <reg_wizchip_spi_cbfunc+0x4c>)
 8019f3e:	683b      	ldr	r3, [r7, #0]
 8019f40:	6213      	str	r3, [r2, #32]
   }
}
 8019f42:	bf00      	nop
 8019f44:	bf00      	nop
 8019f46:	370c      	adds	r7, #12
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f4e:	4770      	bx	lr
 8019f50:	200000c4 	.word	0x200000c4
 8019f54:	08019e45 	.word	0x08019e45
 8019f58:	08019e55 	.word	0x08019e55

08019f5c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8019f5c:	b590      	push	{r4, r7, lr}
 8019f5e:	b087      	sub	sp, #28
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	4603      	mov	r3, r0
 8019f64:	6039      	str	r1, [r7, #0]
 8019f66:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8019f68:	2300      	movs	r3, #0
 8019f6a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	60fb      	str	r3, [r7, #12]
 8019f70:	2300      	movs	r3, #0
 8019f72:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8019f74:	79fb      	ldrb	r3, [r7, #7]
 8019f76:	2b0f      	cmp	r3, #15
 8019f78:	f200 80c7 	bhi.w	801a10a <ctlwizchip+0x1ae>
 8019f7c:	a201      	add	r2, pc, #4	; (adr r2, 8019f84 <ctlwizchip+0x28>)
 8019f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f82:	bf00      	nop
 8019f84:	08019fc5 	.word	0x08019fc5
 8019f88:	08019fcb 	.word	0x08019fcb
 8019f8c:	08019ff7 	.word	0x08019ff7
 8019f90:	08019feb 	.word	0x08019feb
 8019f94:	0801a005 	.word	0x0801a005
 8019f98:	0801a011 	.word	0x0801a011
 8019f9c:	0801a01f 	.word	0x0801a01f
 8019fa0:	0801a045 	.word	0x0801a045
 8019fa4:	0801a06b 	.word	0x0801a06b
 8019fa8:	0801a0af 	.word	0x0801a0af
 8019fac:	0801a0b5 	.word	0x0801a0b5
 8019fb0:	0801a0bd 	.word	0x0801a0bd
 8019fb4:	0801a111 	.word	0x0801a111
 8019fb8:	0801a0c5 	.word	0x0801a0c5
 8019fbc:	0801a0d3 	.word	0x0801a0d3
 8019fc0:	0801a0ef 	.word	0x0801a0ef
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8019fc4:	f000 f8ea 	bl	801a19c <wizchip_sw_reset>
         break;
 8019fc8:	e0a3      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d004      	beq.n	8019fda <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8019fd0:	683b      	ldr	r3, [r7, #0]
 8019fd2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	3308      	adds	r3, #8
 8019fd8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	693a      	ldr	r2, [r7, #16]
 8019fde:	4611      	mov	r1, r2
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f000 f927 	bl	801a234 <wizchip_init>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	e094      	b.n	801a114 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	881b      	ldrh	r3, [r3, #0]
 8019fee:	4618      	mov	r0, r3
 8019ff0:	f000 f9ac 	bl	801a34c <wizchip_clrinterrupt>
         break;
 8019ff4:	e08d      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8019ff6:	f000 f9dd 	bl	801a3b4 <wizchip_getinterrupt>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	461a      	mov	r2, r3
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	801a      	strh	r2, [r3, #0]
         break;
 801a002:	e086      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 801a004:	683b      	ldr	r3, [r7, #0]
 801a006:	881b      	ldrh	r3, [r3, #0]
 801a008:	4618      	mov	r0, r3
 801a00a:	f000 f9f8 	bl	801a3fe <wizchip_setinterruptmask>
         break;         
 801a00e:	e080      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 801a010:	f000 fa10 	bl	801a434 <wizchip_getinterruptmask>
 801a014:	4603      	mov	r3, r0
 801a016:	461a      	mov	r2, r3
 801a018:	683b      	ldr	r3, [r7, #0]
 801a01a:	801a      	strh	r2, [r3, #0]
         break;
 801a01c:	e079      	b.n	801a112 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 801a01e:	683b      	ldr	r3, [r7, #0]
 801a020:	881b      	ldrh	r3, [r3, #0]
 801a022:	0a1b      	lsrs	r3, r3, #8
 801a024:	b29b      	uxth	r3, r3
 801a026:	b2db      	uxtb	r3, r3
 801a028:	4619      	mov	r1, r3
 801a02a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 801a02e:	f7fe fc2b 	bl	8018888 <WIZCHIP_WRITE>
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	881b      	ldrh	r3, [r3, #0]
 801a036:	b2db      	uxtb	r3, r3
 801a038:	4619      	mov	r1, r3
 801a03a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801a03e:	f7fe fc23 	bl	8018888 <WIZCHIP_WRITE>
         break;
 801a042:	e066      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 801a044:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 801a048:	f7fe fbd2 	bl	80187f0 <WIZCHIP_READ>
 801a04c:	4603      	mov	r3, r0
 801a04e:	b29b      	uxth	r3, r3
 801a050:	021b      	lsls	r3, r3, #8
 801a052:	b29c      	uxth	r4, r3
 801a054:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801a058:	f7fe fbca 	bl	80187f0 <WIZCHIP_READ>
 801a05c:	4603      	mov	r3, r0
 801a05e:	b29b      	uxth	r3, r3
 801a060:	4423      	add	r3, r4
 801a062:	b29a      	uxth	r2, r3
 801a064:	683b      	ldr	r3, [r7, #0]
 801a066:	801a      	strh	r2, [r3, #0]
         break;
 801a068:	e053      	b.n	801a112 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801a06a:	4b2c      	ldr	r3, [pc, #176]	; (801a11c <ctlwizchip+0x1c0>)
 801a06c:	789a      	ldrb	r2, [r3, #2]
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 801a072:	683b      	ldr	r3, [r7, #0]
 801a074:	3301      	adds	r3, #1
 801a076:	4a29      	ldr	r2, [pc, #164]	; (801a11c <ctlwizchip+0x1c0>)
 801a078:	78d2      	ldrb	r2, [r2, #3]
 801a07a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	3302      	adds	r3, #2
 801a080:	4a26      	ldr	r2, [pc, #152]	; (801a11c <ctlwizchip+0x1c0>)
 801a082:	7912      	ldrb	r2, [r2, #4]
 801a084:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	3303      	adds	r3, #3
 801a08a:	4a24      	ldr	r2, [pc, #144]	; (801a11c <ctlwizchip+0x1c0>)
 801a08c:	7952      	ldrb	r2, [r2, #5]
 801a08e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 801a090:	683b      	ldr	r3, [r7, #0]
 801a092:	3304      	adds	r3, #4
 801a094:	4a21      	ldr	r2, [pc, #132]	; (801a11c <ctlwizchip+0x1c0>)
 801a096:	7992      	ldrb	r2, [r2, #6]
 801a098:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	3305      	adds	r3, #5
 801a09e:	4a1f      	ldr	r2, [pc, #124]	; (801a11c <ctlwizchip+0x1c0>)
 801a0a0:	79d2      	ldrb	r2, [r2, #7]
 801a0a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 801a0a4:	683b      	ldr	r3, [r7, #0]
 801a0a6:	3306      	adds	r3, #6
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	701a      	strb	r2, [r3, #0]
         break;
 801a0ac:	e031      	b.n	801a112 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 801a0ae:	f000 fa13 	bl	801a4d8 <wizphy_reset>
         break;
 801a0b2:	e02e      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 801a0b4:	6838      	ldr	r0, [r7, #0]
 801a0b6:	f000 fa36 	bl	801a526 <wizphy_setphyconf>
         break;
 801a0ba:	e02a      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 801a0bc:	6838      	ldr	r0, [r7, #0]
 801a0be:	f000 fa75 	bl	801a5ac <wizphy_getphyconf>
         break;
 801a0c2:	e026      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	781b      	ldrb	r3, [r3, #0]
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f000 faf7 	bl	801a6bc <wizphy_setphypmode>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	e020      	b.n	801a114 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 801a0d2:	f000 f9e8 	bl	801a4a6 <wizphy_getphypmode>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a0da:	7dfb      	ldrb	r3, [r7, #23]
 801a0dc:	2bff      	cmp	r3, #255	; 0xff
 801a0de:	d102      	bne.n	801a0e6 <ctlwizchip+0x18a>
 801a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a0e4:	e016      	b.n	801a114 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 801a0e6:	683b      	ldr	r3, [r7, #0]
 801a0e8:	7dfa      	ldrb	r2, [r7, #23]
 801a0ea:	701a      	strb	r2, [r3, #0]
         break;
 801a0ec:	e011      	b.n	801a112 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 801a0ee:	f000 f9c4 	bl	801a47a <wizphy_getphylink>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a0f6:	7dfb      	ldrb	r3, [r7, #23]
 801a0f8:	2bff      	cmp	r3, #255	; 0xff
 801a0fa:	d102      	bne.n	801a102 <ctlwizchip+0x1a6>
 801a0fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a100:	e008      	b.n	801a114 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	7dfa      	ldrb	r2, [r7, #23]
 801a106:	701a      	strb	r2, [r3, #0]
         break;
 801a108:	e003      	b.n	801a112 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 801a10a:	f04f 33ff 	mov.w	r3, #4294967295
 801a10e:	e001      	b.n	801a114 <ctlwizchip+0x1b8>
         break;
 801a110:	bf00      	nop
   }
   return 0;
 801a112:	2300      	movs	r3, #0
}
 801a114:	4618      	mov	r0, r3
 801a116:	371c      	adds	r7, #28
 801a118:	46bd      	mov	sp, r7
 801a11a:	bd90      	pop	{r4, r7, pc}
 801a11c:	200000c4 	.word	0x200000c4

0801a120 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 801a120:	b580      	push	{r7, lr}
 801a122:	b082      	sub	sp, #8
 801a124:	af00      	add	r7, sp, #0
 801a126:	4603      	mov	r3, r0
 801a128:	6039      	str	r1, [r7, #0]
 801a12a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 801a12c:	79fb      	ldrb	r3, [r7, #7]
 801a12e:	2b05      	cmp	r3, #5
 801a130:	d82c      	bhi.n	801a18c <ctlnetwork+0x6c>
 801a132:	a201      	add	r2, pc, #4	; (adr r2, 801a138 <ctlnetwork+0x18>)
 801a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a138:	0801a151 	.word	0x0801a151
 801a13c:	0801a159 	.word	0x0801a159
 801a140:	0801a161 	.word	0x0801a161
 801a144:	0801a16f 	.word	0x0801a16f
 801a148:	0801a17d 	.word	0x0801a17d
 801a14c:	0801a185 	.word	0x0801a185
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 801a150:	6838      	ldr	r0, [r7, #0]
 801a152:	f000 fafd 	bl	801a750 <wizchip_setnetinfo>
         break;
 801a156:	e01c      	b.n	801a192 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 801a158:	6838      	ldr	r0, [r7, #0]
 801a15a:	f000 fb39 	bl	801a7d0 <wizchip_getnetinfo>
         break;
 801a15e:	e018      	b.n	801a192 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 801a160:	683b      	ldr	r3, [r7, #0]
 801a162:	781b      	ldrb	r3, [r3, #0]
 801a164:	4618      	mov	r0, r3
 801a166:	f000 fb73 	bl	801a850 <wizchip_setnetmode>
 801a16a:	4603      	mov	r3, r0
 801a16c:	e012      	b.n	801a194 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 801a16e:	f000 fb91 	bl	801a894 <wizchip_getnetmode>
 801a172:	4603      	mov	r3, r0
 801a174:	461a      	mov	r2, r3
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	701a      	strb	r2, [r3, #0]
         break;
 801a17a:	e00a      	b.n	801a192 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 801a17c:	6838      	ldr	r0, [r7, #0]
 801a17e:	f000 fb91 	bl	801a8a4 <wizchip_settimeout>
         break;
 801a182:	e006      	b.n	801a192 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 801a184:	6838      	ldr	r0, [r7, #0]
 801a186:	f000 fbae 	bl	801a8e6 <wizchip_gettimeout>
         break;
 801a18a:	e002      	b.n	801a192 <ctlnetwork+0x72>
      default:
         return -1;
 801a18c:	f04f 33ff 	mov.w	r3, #4294967295
 801a190:	e000      	b.n	801a194 <ctlnetwork+0x74>
   }
   return 0;
 801a192:	2300      	movs	r3, #0
}
 801a194:	4618      	mov	r0, r3
 801a196:	3708      	adds	r7, #8
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b086      	sub	sp, #24
 801a1a0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801a1a2:	1d3b      	adds	r3, r7, #4
 801a1a4:	2206      	movs	r2, #6
 801a1a6:	4619      	mov	r1, r3
 801a1a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a1ac:	f7fe fbba 	bl	8018924 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801a1b0:	f107 0314 	add.w	r3, r7, #20
 801a1b4:	2204      	movs	r2, #4
 801a1b6:	4619      	mov	r1, r3
 801a1b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a1bc:	f7fe fbb2 	bl	8018924 <WIZCHIP_READ_BUF>
 801a1c0:	f107 0310 	add.w	r3, r7, #16
 801a1c4:	2204      	movs	r2, #4
 801a1c6:	4619      	mov	r1, r3
 801a1c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a1cc:	f7fe fbaa 	bl	8018924 <WIZCHIP_READ_BUF>
 801a1d0:	f107 030c 	add.w	r3, r7, #12
 801a1d4:	2204      	movs	r2, #4
 801a1d6:	4619      	mov	r1, r3
 801a1d8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a1dc:	f7fe fba2 	bl	8018924 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801a1e0:	2180      	movs	r1, #128	; 0x80
 801a1e2:	2000      	movs	r0, #0
 801a1e4:	f7fe fb50 	bl	8018888 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a1e8:	2000      	movs	r0, #0
 801a1ea:	f7fe fb01 	bl	80187f0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801a1ee:	1d3b      	adds	r3, r7, #4
 801a1f0:	2206      	movs	r2, #6
 801a1f2:	4619      	mov	r1, r3
 801a1f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a1f8:	f7fe fbf4 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801a1fc:	f107 0314 	add.w	r3, r7, #20
 801a200:	2204      	movs	r2, #4
 801a202:	4619      	mov	r1, r3
 801a204:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a208:	f7fe fbec 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801a20c:	f107 0310 	add.w	r3, r7, #16
 801a210:	2204      	movs	r2, #4
 801a212:	4619      	mov	r1, r3
 801a214:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a218:	f7fe fbe4 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801a21c:	f107 030c 	add.w	r3, r7, #12
 801a220:	2204      	movs	r2, #4
 801a222:	4619      	mov	r1, r3
 801a224:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a228:	f7fe fbdc 	bl	80189e4 <WIZCHIP_WRITE_BUF>
}
 801a22c:	bf00      	nop
 801a22e:	3718      	adds	r7, #24
 801a230:	46bd      	mov	sp, r7
 801a232:	bd80      	pop	{r7, pc}

0801a234 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801a234:	b580      	push	{r7, lr}
 801a236:	b084      	sub	sp, #16
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
 801a23c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801a23e:	2300      	movs	r3, #0
 801a240:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801a242:	f7ff ffab 	bl	801a19c <wizchip_sw_reset>
   if(txsize)
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d03b      	beq.n	801a2c4 <wizchip_init+0x90>
   {
      tmp = 0;
 801a24c:	2300      	movs	r3, #0
 801a24e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a250:	2300      	movs	r3, #0
 801a252:	73fb      	strb	r3, [r7, #15]
 801a254:	e015      	b.n	801a282 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801a256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a25a:	687a      	ldr	r2, [r7, #4]
 801a25c:	4413      	add	r3, r2
 801a25e:	781a      	ldrb	r2, [r3, #0]
 801a260:	7bbb      	ldrb	r3, [r7, #14]
 801a262:	4413      	add	r3, r2
 801a264:	b2db      	uxtb	r3, r3
 801a266:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a26c:	2b10      	cmp	r3, #16
 801a26e:	dd02      	ble.n	801a276 <wizchip_init+0x42>
 801a270:	f04f 33ff 	mov.w	r3, #4294967295
 801a274:	e066      	b.n	801a344 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a27a:	b2db      	uxtb	r3, r3
 801a27c:	3301      	adds	r3, #1
 801a27e:	b2db      	uxtb	r3, r3
 801a280:	73fb      	strb	r3, [r7, #15]
 801a282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a286:	2b07      	cmp	r3, #7
 801a288:	dde5      	ble.n	801a256 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a28a:	2300      	movs	r3, #0
 801a28c:	73fb      	strb	r3, [r7, #15]
 801a28e:	e015      	b.n	801a2bc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801a290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a294:	009b      	lsls	r3, r3, #2
 801a296:	3301      	adds	r3, #1
 801a298:	00db      	lsls	r3, r3, #3
 801a29a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2a4:	687a      	ldr	r2, [r7, #4]
 801a2a6:	4413      	add	r3, r2
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	4619      	mov	r1, r3
 801a2ac:	f7fe faec 	bl	8018888 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2b4:	b2db      	uxtb	r3, r3
 801a2b6:	3301      	adds	r3, #1
 801a2b8:	b2db      	uxtb	r3, r3
 801a2ba:	73fb      	strb	r3, [r7, #15]
 801a2bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2c0:	2b07      	cmp	r3, #7
 801a2c2:	dde5      	ble.n	801a290 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d03b      	beq.n	801a342 <wizchip_init+0x10e>
   {
      tmp = 0;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	73fb      	strb	r3, [r7, #15]
 801a2d2:	e015      	b.n	801a300 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801a2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2d8:	683a      	ldr	r2, [r7, #0]
 801a2da:	4413      	add	r3, r2
 801a2dc:	781a      	ldrb	r2, [r3, #0]
 801a2de:	7bbb      	ldrb	r3, [r7, #14]
 801a2e0:	4413      	add	r3, r2
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a2e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a2ea:	2b10      	cmp	r3, #16
 801a2ec:	dd02      	ble.n	801a2f4 <wizchip_init+0xc0>
 801a2ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a2f2:	e027      	b.n	801a344 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a2f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2f8:	b2db      	uxtb	r3, r3
 801a2fa:	3301      	adds	r3, #1
 801a2fc:	b2db      	uxtb	r3, r3
 801a2fe:	73fb      	strb	r3, [r7, #15]
 801a300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a304:	2b07      	cmp	r3, #7
 801a306:	dde5      	ble.n	801a2d4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a308:	2300      	movs	r3, #0
 801a30a:	73fb      	strb	r3, [r7, #15]
 801a30c:	e015      	b.n	801a33a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801a30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a312:	009b      	lsls	r3, r3, #2
 801a314:	3301      	adds	r3, #1
 801a316:	00db      	lsls	r3, r3, #3
 801a318:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801a31c:	4618      	mov	r0, r3
 801a31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a322:	683a      	ldr	r2, [r7, #0]
 801a324:	4413      	add	r3, r2
 801a326:	781b      	ldrb	r3, [r3, #0]
 801a328:	4619      	mov	r1, r3
 801a32a:	f7fe faad 	bl	8018888 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a32e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a332:	b2db      	uxtb	r3, r3
 801a334:	3301      	adds	r3, #1
 801a336:	b2db      	uxtb	r3, r3
 801a338:	73fb      	strb	r3, [r7, #15]
 801a33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a33e:	2b07      	cmp	r3, #7
 801a340:	dde5      	ble.n	801a30e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801a342:	2300      	movs	r3, #0
}
 801a344:	4618      	mov	r0, r3
 801a346:	3710      	adds	r7, #16
 801a348:	46bd      	mov	sp, r7
 801a34a:	bd80      	pop	{r7, pc}

0801a34c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b084      	sub	sp, #16
 801a350:	af00      	add	r7, sp, #0
 801a352:	4603      	mov	r3, r0
 801a354:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 801a356:	88fb      	ldrh	r3, [r7, #6]
 801a358:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801a35a:	88fb      	ldrh	r3, [r7, #6]
 801a35c:	0a1b      	lsrs	r3, r3, #8
 801a35e:	b29b      	uxth	r3, r3
 801a360:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801a362:	7bfb      	ldrb	r3, [r7, #15]
 801a364:	f023 030f 	bic.w	r3, r3, #15
 801a368:	b2db      	uxtb	r3, r3
 801a36a:	4619      	mov	r1, r3
 801a36c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a370:	f7fe fa8a 	bl	8018888 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801a374:	2300      	movs	r3, #0
 801a376:	73fb      	strb	r3, [r7, #15]
 801a378:	e014      	b.n	801a3a4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801a37a:	7bba      	ldrb	r2, [r7, #14]
 801a37c:	7bfb      	ldrb	r3, [r7, #15]
 801a37e:	fa42 f303 	asr.w	r3, r2, r3
 801a382:	f003 0301 	and.w	r3, r3, #1
 801a386:	2b00      	cmp	r3, #0
 801a388:	d009      	beq.n	801a39e <wizchip_clrinterrupt+0x52>
 801a38a:	7bfb      	ldrb	r3, [r7, #15]
 801a38c:	009b      	lsls	r3, r3, #2
 801a38e:	3301      	adds	r3, #1
 801a390:	00db      	lsls	r3, r3, #3
 801a392:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a396:	211f      	movs	r1, #31
 801a398:	4618      	mov	r0, r3
 801a39a:	f7fe fa75 	bl	8018888 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801a39e:	7bfb      	ldrb	r3, [r7, #15]
 801a3a0:	3301      	adds	r3, #1
 801a3a2:	73fb      	strb	r3, [r7, #15]
 801a3a4:	7bfb      	ldrb	r3, [r7, #15]
 801a3a6:	2b07      	cmp	r3, #7
 801a3a8:	d9e7      	bls.n	801a37a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 801a3aa:	bf00      	nop
 801a3ac:	bf00      	nop
 801a3ae:	3710      	adds	r7, #16
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}

0801a3b4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b082      	sub	sp, #8
 801a3b8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 801a3be:	2300      	movs	r3, #0
 801a3c0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801a3c6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a3ca:	f7fe fa11 	bl	80187f0 <WIZCHIP_READ>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	f023 030f 	bic.w	r3, r3, #15
 801a3d4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 801a3d6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 801a3da:	f7fe fa09 	bl	80187f0 <WIZCHIP_READ>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801a3e2:	79bb      	ldrb	r3, [r7, #6]
 801a3e4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 801a3e6:	88bb      	ldrh	r3, [r7, #4]
 801a3e8:	021b      	lsls	r3, r3, #8
 801a3ea:	b29a      	uxth	r2, r3
 801a3ec:	79fb      	ldrb	r3, [r7, #7]
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	4413      	add	r3, r2
 801a3f2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a3f4:	88bb      	ldrh	r3, [r7, #4]
}
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	3708      	adds	r7, #8
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	bd80      	pop	{r7, pc}

0801a3fe <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801a3fe:	b580      	push	{r7, lr}
 801a400:	b084      	sub	sp, #16
 801a402:	af00      	add	r7, sp, #0
 801a404:	4603      	mov	r3, r0
 801a406:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 801a408:	88fb      	ldrh	r3, [r7, #6]
 801a40a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801a40c:	88fb      	ldrh	r3, [r7, #6]
 801a40e:	0a1b      	lsrs	r3, r3, #8
 801a410:	b29b      	uxth	r3, r3
 801a412:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801a414:	7bfb      	ldrb	r3, [r7, #15]
 801a416:	4619      	mov	r1, r3
 801a418:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a41c:	f7fe fa34 	bl	8018888 <WIZCHIP_WRITE>
   setSIMR(simr);
 801a420:	7bbb      	ldrb	r3, [r7, #14]
 801a422:	4619      	mov	r1, r3
 801a424:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a428:	f7fe fa2e 	bl	8018888 <WIZCHIP_WRITE>
#endif   
}
 801a42c:	bf00      	nop
 801a42e:	3710      	adds	r7, #16
 801a430:	46bd      	mov	sp, r7
 801a432:	bd80      	pop	{r7, pc}

0801a434 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801a434:	b580      	push	{r7, lr}
 801a436:	b082      	sub	sp, #8
 801a438:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801a43a:	2300      	movs	r3, #0
 801a43c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 801a43e:	2300      	movs	r3, #0
 801a440:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a442:	2300      	movs	r3, #0
 801a444:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801a446:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a44a:	f7fe f9d1 	bl	80187f0 <WIZCHIP_READ>
 801a44e:	4603      	mov	r3, r0
 801a450:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 801a452:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a456:	f7fe f9cb 	bl	80187f0 <WIZCHIP_READ>
 801a45a:	4603      	mov	r3, r0
 801a45c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801a45e:	79bb      	ldrb	r3, [r7, #6]
 801a460:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 801a462:	88bb      	ldrh	r3, [r7, #4]
 801a464:	021b      	lsls	r3, r3, #8
 801a466:	b29a      	uxth	r2, r3
 801a468:	79fb      	ldrb	r3, [r7, #7]
 801a46a:	b29b      	uxth	r3, r3
 801a46c:	4413      	add	r3, r2
 801a46e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a470:	88bb      	ldrh	r3, [r7, #4]
}
 801a472:	4618      	mov	r0, r3
 801a474:	3708      	adds	r7, #8
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}

0801a47a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801a47a:	b580      	push	{r7, lr}
 801a47c:	b082      	sub	sp, #8
 801a47e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801a480:	2300      	movs	r3, #0
 801a482:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801a484:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a488:	f7fe f9b2 	bl	80187f0 <WIZCHIP_READ>
 801a48c:	4603      	mov	r3, r0
 801a48e:	f003 0301 	and.w	r3, r3, #1
 801a492:	2b00      	cmp	r3, #0
 801a494:	d001      	beq.n	801a49a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 801a496:	2301      	movs	r3, #1
 801a498:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 801a49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a49e:	4618      	mov	r0, r3
 801a4a0:	3708      	adds	r7, #8
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bd80      	pop	{r7, pc}

0801a4a6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801a4a6:	b580      	push	{r7, lr}
 801a4a8:	b082      	sub	sp, #8
 801a4aa:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801a4b0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a4b4:	f7fe f99c 	bl	80187f0 <WIZCHIP_READ>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a4be:	2b30      	cmp	r3, #48	; 0x30
 801a4c0:	d102      	bne.n	801a4c8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 801a4c2:	2301      	movs	r3, #1
 801a4c4:	71fb      	strb	r3, [r7, #7]
 801a4c6:	e001      	b.n	801a4cc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 801a4cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3708      	adds	r7, #8
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}

0801a4d8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b082      	sub	sp, #8
 801a4dc:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801a4de:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a4e2:	f7fe f985 	bl	80187f0 <WIZCHIP_READ>
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 801a4ea:	79fb      	ldrb	r3, [r7, #7]
 801a4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a4f0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a4f2:	79fb      	ldrb	r3, [r7, #7]
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a4fa:	f7fe f9c5 	bl	8018888 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801a4fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a502:	f7fe f975 	bl	80187f0 <WIZCHIP_READ>
 801a506:	4603      	mov	r3, r0
 801a508:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 801a50a:	79fb      	ldrb	r3, [r7, #7]
 801a50c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a510:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a512:	79fb      	ldrb	r3, [r7, #7]
 801a514:	4619      	mov	r1, r3
 801a516:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a51a:	f7fe f9b5 	bl	8018888 <WIZCHIP_WRITE>
}
 801a51e:	bf00      	nop
 801a520:	3708      	adds	r7, #8
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}

0801a526 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801a526:	b580      	push	{r7, lr}
 801a528:	b084      	sub	sp, #16
 801a52a:	af00      	add	r7, sp, #0
 801a52c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a52e:	2300      	movs	r3, #0
 801a530:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	781b      	ldrb	r3, [r3, #0]
 801a536:	2b01      	cmp	r3, #1
 801a538:	d104      	bne.n	801a544 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 801a53a:	7bfb      	ldrb	r3, [r7, #15]
 801a53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a540:	73fb      	strb	r3, [r7, #15]
 801a542:	e003      	b.n	801a54c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 801a544:	7bfb      	ldrb	r3, [r7, #15]
 801a546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a54a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	785b      	ldrb	r3, [r3, #1]
 801a550:	2b01      	cmp	r3, #1
 801a552:	d104      	bne.n	801a55e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a554:	7bfb      	ldrb	r3, [r7, #15]
 801a556:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a55a:	73fb      	strb	r3, [r7, #15]
 801a55c:	e019      	b.n	801a592 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	78db      	ldrb	r3, [r3, #3]
 801a562:	2b01      	cmp	r3, #1
 801a564:	d10d      	bne.n	801a582 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	789b      	ldrb	r3, [r3, #2]
 801a56a:	2b01      	cmp	r3, #1
 801a56c:	d104      	bne.n	801a578 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 801a56e:	7bfb      	ldrb	r3, [r7, #15]
 801a570:	f043 0318 	orr.w	r3, r3, #24
 801a574:	73fb      	strb	r3, [r7, #15]
 801a576:	e00c      	b.n	801a592 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801a578:	7bfb      	ldrb	r3, [r7, #15]
 801a57a:	f043 0308 	orr.w	r3, r3, #8
 801a57e:	73fb      	strb	r3, [r7, #15]
 801a580:	e007      	b.n	801a592 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	789b      	ldrb	r3, [r3, #2]
 801a586:	2b01      	cmp	r3, #1
 801a588:	d103      	bne.n	801a592 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 801a58a:	7bfb      	ldrb	r3, [r7, #15]
 801a58c:	f043 0310 	orr.w	r3, r3, #16
 801a590:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 801a592:	7bfb      	ldrb	r3, [r7, #15]
 801a594:	4619      	mov	r1, r3
 801a596:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a59a:	f7fe f975 	bl	8018888 <WIZCHIP_WRITE>
   wizphy_reset();
 801a59e:	f7ff ff9b 	bl	801a4d8 <wizphy_reset>
}
 801a5a2:	bf00      	nop
 801a5a4:	3710      	adds	r7, #16
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bd80      	pop	{r7, pc}
	...

0801a5ac <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b084      	sub	sp, #16
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a5b8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5bc:	f7fe f918 	bl	80187f0 <WIZCHIP_READ>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a5c4:	7bfb      	ldrb	r3, [r7, #15]
 801a5c6:	119b      	asrs	r3, r3, #6
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	f003 0301 	and.w	r3, r3, #1
 801a5ce:	b2da      	uxtb	r2, r3
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a5d4:	7bfb      	ldrb	r3, [r7, #15]
 801a5d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a5da:	2b20      	cmp	r3, #32
 801a5dc:	d001      	beq.n	801a5e2 <wizphy_getphyconf+0x36>
 801a5de:	2b38      	cmp	r3, #56	; 0x38
 801a5e0:	d103      	bne.n	801a5ea <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	2201      	movs	r2, #1
 801a5e6:	705a      	strb	r2, [r3, #1]
         break;
 801a5e8:	e003      	b.n	801a5f2 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	705a      	strb	r2, [r3, #1]
         break;
 801a5f0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a5f2:	7bfb      	ldrb	r3, [r7, #15]
 801a5f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a5f8:	3b10      	subs	r3, #16
 801a5fa:	2b10      	cmp	r3, #16
 801a5fc:	bf8c      	ite	hi
 801a5fe:	2201      	movhi	r2, #1
 801a600:	2200      	movls	r2, #0
 801a602:	b2d2      	uxtb	r2, r2
 801a604:	2a00      	cmp	r2, #0
 801a606:	d10f      	bne.n	801a628 <wizphy_getphyconf+0x7c>
 801a608:	4a1b      	ldr	r2, [pc, #108]	; (801a678 <wizphy_getphyconf+0xcc>)
 801a60a:	fa22 f303 	lsr.w	r3, r2, r3
 801a60e:	f003 0301 	and.w	r3, r3, #1
 801a612:	2b00      	cmp	r3, #0
 801a614:	bf14      	ite	ne
 801a616:	2301      	movne	r3, #1
 801a618:	2300      	moveq	r3, #0
 801a61a:	b2db      	uxtb	r3, r3
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d003      	beq.n	801a628 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	2201      	movs	r2, #1
 801a624:	709a      	strb	r2, [r3, #2]
         break;
 801a626:	e003      	b.n	801a630 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	2200      	movs	r2, #0
 801a62c:	709a      	strb	r2, [r3, #2]
         break;
 801a62e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a630:	7bfb      	ldrb	r3, [r7, #15]
 801a632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a636:	3b08      	subs	r3, #8
 801a638:	2b18      	cmp	r3, #24
 801a63a:	bf8c      	ite	hi
 801a63c:	2201      	movhi	r2, #1
 801a63e:	2200      	movls	r2, #0
 801a640:	b2d2      	uxtb	r2, r2
 801a642:	2a00      	cmp	r2, #0
 801a644:	d10f      	bne.n	801a666 <wizphy_getphyconf+0xba>
 801a646:	4a0d      	ldr	r2, [pc, #52]	; (801a67c <wizphy_getphyconf+0xd0>)
 801a648:	fa22 f303 	lsr.w	r3, r2, r3
 801a64c:	f003 0301 	and.w	r3, r3, #1
 801a650:	2b00      	cmp	r3, #0
 801a652:	bf14      	ite	ne
 801a654:	2301      	movne	r3, #1
 801a656:	2300      	moveq	r3, #0
 801a658:	b2db      	uxtb	r3, r3
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d003      	beq.n	801a666 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	2201      	movs	r2, #1
 801a662:	70da      	strb	r2, [r3, #3]
         break;
 801a664:	e003      	b.n	801a66e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	2200      	movs	r2, #0
 801a66a:	70da      	strb	r2, [r3, #3]
         break;
 801a66c:	bf00      	nop
   }
}
 801a66e:	bf00      	nop
 801a670:	3710      	adds	r7, #16
 801a672:	46bd      	mov	sp, r7
 801a674:	bd80      	pop	{r7, pc}
 801a676:	bf00      	nop
 801a678:	00010101 	.word	0x00010101
 801a67c:	01010001 	.word	0x01010001

0801a680 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b084      	sub	sp, #16
 801a684:	af00      	add	r7, sp, #0
 801a686:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a688:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a68c:	f7fe f8b0 	bl	80187f0 <WIZCHIP_READ>
 801a690:	4603      	mov	r3, r0
 801a692:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a694:	7bfb      	ldrb	r3, [r7, #15]
 801a696:	109b      	asrs	r3, r3, #2
 801a698:	b2db      	uxtb	r3, r3
 801a69a:	f003 0301 	and.w	r3, r3, #1
 801a69e:	b2da      	uxtb	r2, r3
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a6a4:	7bfb      	ldrb	r3, [r7, #15]
 801a6a6:	105b      	asrs	r3, r3, #1
 801a6a8:	b2db      	uxtb	r3, r3
 801a6aa:	f003 0301 	and.w	r3, r3, #1
 801a6ae:	b2da      	uxtb	r2, r3
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	709a      	strb	r2, [r3, #2]
}
 801a6b4:	bf00      	nop
 801a6b6:	3710      	adds	r7, #16
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b084      	sub	sp, #16
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a6ca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a6ce:	f7fe f88f 	bl	80187f0 <WIZCHIP_READ>
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a6d6:	7bfb      	ldrb	r3, [r7, #15]
 801a6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d102      	bne.n	801a6e6 <wizphy_setphypmode+0x2a>
 801a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a6e4:	e030      	b.n	801a748 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a6e6:	7bfb      	ldrb	r3, [r7, #15]
 801a6e8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 801a6ec:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a6ee:	79fb      	ldrb	r3, [r7, #7]
 801a6f0:	2b01      	cmp	r3, #1
 801a6f2:	d104      	bne.n	801a6fe <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a6f4:	7bfb      	ldrb	r3, [r7, #15]
 801a6f6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801a6fa:	73fb      	strb	r3, [r7, #15]
 801a6fc:	e003      	b.n	801a706 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a6fe:	7bfb      	ldrb	r3, [r7, #15]
 801a700:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a704:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a706:	7bfb      	ldrb	r3, [r7, #15]
 801a708:	4619      	mov	r1, r3
 801a70a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a70e:	f7fe f8bb 	bl	8018888 <WIZCHIP_WRITE>
   wizphy_reset();
 801a712:	f7ff fee1 	bl	801a4d8 <wizphy_reset>
   tmp = getPHYCFGR();
 801a716:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a71a:	f7fe f869 	bl	80187f0 <WIZCHIP_READ>
 801a71e:	4603      	mov	r3, r0
 801a720:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a722:	79fb      	ldrb	r3, [r7, #7]
 801a724:	2b01      	cmp	r3, #1
 801a726:	d106      	bne.n	801a736 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a728:	7bfb      	ldrb	r3, [r7, #15]
 801a72a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d008      	beq.n	801a744 <wizphy_setphypmode+0x88>
 801a732:	2300      	movs	r3, #0
 801a734:	e008      	b.n	801a748 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a736:	7bfb      	ldrb	r3, [r7, #15]
 801a738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d001      	beq.n	801a744 <wizphy_setphypmode+0x88>
 801a740:	2300      	movs	r3, #0
 801a742:	e001      	b.n	801a748 <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a744:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3710      	adds	r7, #16
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}

0801a750 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b082      	sub	sp, #8
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	2206      	movs	r2, #6
 801a75c:	4619      	mov	r1, r3
 801a75e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a762:	f7fe f93f 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	330e      	adds	r3, #14
 801a76a:	2204      	movs	r2, #4
 801a76c:	4619      	mov	r1, r3
 801a76e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a772:	f7fe f937 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	330a      	adds	r3, #10
 801a77a:	2204      	movs	r2, #4
 801a77c:	4619      	mov	r1, r3
 801a77e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a782:	f7fe f92f 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	3306      	adds	r3, #6
 801a78a:	2204      	movs	r2, #4
 801a78c:	4619      	mov	r1, r3
 801a78e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a792:	f7fe f927 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	7c9a      	ldrb	r2, [r3, #18]
 801a79a:	4b0b      	ldr	r3, [pc, #44]	; (801a7c8 <wizchip_setnetinfo+0x78>)
 801a79c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	7cda      	ldrb	r2, [r3, #19]
 801a7a2:	4b09      	ldr	r3, [pc, #36]	; (801a7c8 <wizchip_setnetinfo+0x78>)
 801a7a4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	7d1a      	ldrb	r2, [r3, #20]
 801a7aa:	4b07      	ldr	r3, [pc, #28]	; (801a7c8 <wizchip_setnetinfo+0x78>)
 801a7ac:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	7d5a      	ldrb	r2, [r3, #21]
 801a7b2:	4b05      	ldr	r3, [pc, #20]	; (801a7c8 <wizchip_setnetinfo+0x78>)
 801a7b4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	7d9a      	ldrb	r2, [r3, #22]
 801a7ba:	4b04      	ldr	r3, [pc, #16]	; (801a7cc <wizchip_setnetinfo+0x7c>)
 801a7bc:	701a      	strb	r2, [r3, #0]
}
 801a7be:	bf00      	nop
 801a7c0:	3708      	adds	r7, #8
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	bd80      	pop	{r7, pc}
 801a7c6:	bf00      	nop
 801a7c8:	200009a0 	.word	0x200009a0
 801a7cc:	200009a4 	.word	0x200009a4

0801a7d0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b082      	sub	sp, #8
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	2206      	movs	r2, #6
 801a7dc:	4619      	mov	r1, r3
 801a7de:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a7e2:	f7fe f89f 	bl	8018924 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	330e      	adds	r3, #14
 801a7ea:	2204      	movs	r2, #4
 801a7ec:	4619      	mov	r1, r3
 801a7ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a7f2:	f7fe f897 	bl	8018924 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	330a      	adds	r3, #10
 801a7fa:	2204      	movs	r2, #4
 801a7fc:	4619      	mov	r1, r3
 801a7fe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a802:	f7fe f88f 	bl	8018924 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	3306      	adds	r3, #6
 801a80a:	2204      	movs	r2, #4
 801a80c:	4619      	mov	r1, r3
 801a80e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a812:	f7fe f887 	bl	8018924 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a816:	4b0c      	ldr	r3, [pc, #48]	; (801a848 <wizchip_getnetinfo+0x78>)
 801a818:	781a      	ldrb	r2, [r3, #0]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a81e:	4b0a      	ldr	r3, [pc, #40]	; (801a848 <wizchip_getnetinfo+0x78>)
 801a820:	785a      	ldrb	r2, [r3, #1]
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a826:	4b08      	ldr	r3, [pc, #32]	; (801a848 <wizchip_getnetinfo+0x78>)
 801a828:	789a      	ldrb	r2, [r3, #2]
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a82e:	4b06      	ldr	r3, [pc, #24]	; (801a848 <wizchip_getnetinfo+0x78>)
 801a830:	78da      	ldrb	r2, [r3, #3]
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a836:	4b05      	ldr	r3, [pc, #20]	; (801a84c <wizchip_getnetinfo+0x7c>)
 801a838:	781a      	ldrb	r2, [r3, #0]
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	759a      	strb	r2, [r3, #22]
}
 801a83e:	bf00      	nop
 801a840:	3708      	adds	r7, #8
 801a842:	46bd      	mov	sp, r7
 801a844:	bd80      	pop	{r7, pc}
 801a846:	bf00      	nop
 801a848:	200009a0 	.word	0x200009a0
 801a84c:	200009a4 	.word	0x200009a4

0801a850 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a850:	b580      	push	{r7, lr}
 801a852:	b084      	sub	sp, #16
 801a854:	af00      	add	r7, sp, #0
 801a856:	4603      	mov	r3, r0
 801a858:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a85a:	2300      	movs	r3, #0
 801a85c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a85e:	79fb      	ldrb	r3, [r7, #7]
 801a860:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801a864:	2b00      	cmp	r3, #0
 801a866:	d002      	beq.n	801a86e <wizchip_setnetmode+0x1e>
 801a868:	f04f 33ff 	mov.w	r3, #4294967295
 801a86c:	e00e      	b.n	801a88c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a86e:	2000      	movs	r0, #0
 801a870:	f7fd ffbe 	bl	80187f0 <WIZCHIP_READ>
 801a874:	4603      	mov	r3, r0
 801a876:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a878:	7bfa      	ldrb	r2, [r7, #15]
 801a87a:	79fb      	ldrb	r3, [r7, #7]
 801a87c:	4313      	orrs	r3, r2
 801a87e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a880:	7bfb      	ldrb	r3, [r7, #15]
 801a882:	4619      	mov	r1, r3
 801a884:	2000      	movs	r0, #0
 801a886:	f7fd ffff 	bl	8018888 <WIZCHIP_WRITE>
   return 0;
 801a88a:	2300      	movs	r3, #0
}
 801a88c:	4618      	mov	r0, r3
 801a88e:	3710      	adds	r7, #16
 801a890:	46bd      	mov	sp, r7
 801a892:	bd80      	pop	{r7, pc}

0801a894 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a894:	b580      	push	{r7, lr}
 801a896:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a898:	2000      	movs	r0, #0
 801a89a:	f7fd ffa9 	bl	80187f0 <WIZCHIP_READ>
 801a89e:	4603      	mov	r3, r0
}
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	bd80      	pop	{r7, pc}

0801a8a4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b082      	sub	sp, #8
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	781b      	ldrb	r3, [r3, #0]
 801a8b0:	4619      	mov	r1, r3
 801a8b2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a8b6:	f7fd ffe7 	bl	8018888 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	885b      	ldrh	r3, [r3, #2]
 801a8be:	0a1b      	lsrs	r3, r3, #8
 801a8c0:	b29b      	uxth	r3, r3
 801a8c2:	b2db      	uxtb	r3, r3
 801a8c4:	4619      	mov	r1, r3
 801a8c6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a8ca:	f7fd ffdd 	bl	8018888 <WIZCHIP_WRITE>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	885b      	ldrh	r3, [r3, #2]
 801a8d2:	b2db      	uxtb	r3, r3
 801a8d4:	4619      	mov	r1, r3
 801a8d6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a8da:	f7fd ffd5 	bl	8018888 <WIZCHIP_WRITE>
}
 801a8de:	bf00      	nop
 801a8e0:	3708      	adds	r7, #8
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}

0801a8e6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801a8e6:	b590      	push	{r4, r7, lr}
 801a8e8:	b083      	sub	sp, #12
 801a8ea:	af00      	add	r7, sp, #0
 801a8ec:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801a8ee:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a8f2:	f7fd ff7d 	bl	80187f0 <WIZCHIP_READ>
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801a8fe:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a902:	f7fd ff75 	bl	80187f0 <WIZCHIP_READ>
 801a906:	4603      	mov	r3, r0
 801a908:	b29b      	uxth	r3, r3
 801a90a:	021b      	lsls	r3, r3, #8
 801a90c:	b29c      	uxth	r4, r3
 801a90e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a912:	f7fd ff6d 	bl	80187f0 <WIZCHIP_READ>
 801a916:	4603      	mov	r3, r0
 801a918:	b29b      	uxth	r3, r3
 801a91a:	4423      	add	r3, r4
 801a91c:	b29a      	uxth	r2, r3
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	805a      	strh	r2, [r3, #2]
}
 801a922:	bf00      	nop
 801a924:	370c      	adds	r7, #12
 801a926:	46bd      	mov	sp, r7
 801a928:	bd90      	pop	{r4, r7, pc}
	...

0801a92c <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801a930:	2204      	movs	r2, #4
 801a932:	4909      	ldr	r1, [pc, #36]	; (801a958 <default_ip_assign+0x2c>)
 801a934:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a938:	f7fe f854 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801a93c:	2204      	movs	r2, #4
 801a93e:	4907      	ldr	r1, [pc, #28]	; (801a95c <default_ip_assign+0x30>)
 801a940:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a944:	f7fe f84e 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801a948:	2204      	movs	r2, #4
 801a94a:	4905      	ldr	r1, [pc, #20]	; (801a960 <default_ip_assign+0x34>)
 801a94c:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a950:	f7fe f848 	bl	80189e4 <WIZCHIP_WRITE_BUF>
}
 801a954:	bf00      	nop
 801a956:	bd80      	pop	{r7, pc}
 801a958:	200009b4 	.word	0x200009b4
 801a95c:	200009bc 	.word	0x200009bc
 801a960:	200009b8 	.word	0x200009b8

0801a964 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801a968:	2180      	movs	r1, #128	; 0x80
 801a96a:	2000      	movs	r0, #0
 801a96c:	f7fd ff8c 	bl	8018888 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a970:	2000      	movs	r0, #0
 801a972:	f7fd ff3d 	bl	80187f0 <WIZCHIP_READ>
   default_ip_assign();
 801a976:	f7ff ffd9 	bl	801a92c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801a97a:	2206      	movs	r2, #6
 801a97c:	4903      	ldr	r1, [pc, #12]	; (801a98c <default_ip_update+0x28>)
 801a97e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a982:	f7fe f82f 	bl	80189e4 <WIZCHIP_WRITE_BUF>
}
 801a986:	bf00      	nop
 801a988:	bd80      	pop	{r7, pc}
 801a98a:	bf00      	nop
 801a98c:	200009d4 	.word	0x200009d4

0801a990 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801a994:	2180      	movs	r1, #128	; 0x80
 801a996:	2000      	movs	r0, #0
 801a998:	f7fd ff76 	bl	8018888 <WIZCHIP_WRITE>
	getMR(); // for delay
 801a99c:	2000      	movs	r0, #0
 801a99e:	f7fd ff27 	bl	80187f0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801a9a2:	2206      	movs	r2, #6
 801a9a4:	4903      	ldr	r1, [pc, #12]	; (801a9b4 <default_ip_conflict+0x24>)
 801a9a6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a9aa:	f7fe f81b 	bl	80189e4 <WIZCHIP_WRITE_BUF>
}
 801a9ae:	bf00      	nop
 801a9b0:	bd80      	pop	{r7, pc}
 801a9b2:	bf00      	nop
 801a9b4:	200009d4 	.word	0x200009d4

0801a9b8 <default_delay>:

void default_delay(uint32_t time){}
 801a9b8:	b480      	push	{r7}
 801a9ba:	b083      	sub	sp, #12
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
 801a9c0:	bf00      	nop
 801a9c2:	370c      	adds	r7, #12
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ca:	4770      	bx	lr

0801a9cc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801a9cc:	b480      	push	{r7}
 801a9ce:	b085      	sub	sp, #20
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	60f8      	str	r0, [r7, #12]
 801a9d4:	60b9      	str	r1, [r7, #8]
 801a9d6:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801a9d8:	4b10      	ldr	r3, [pc, #64]	; (801aa1c <reg_dhcp_cbfunc+0x50>)
 801a9da:	4a11      	ldr	r2, [pc, #68]	; (801aa20 <reg_dhcp_cbfunc+0x54>)
 801a9dc:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801a9de:	4b11      	ldr	r3, [pc, #68]	; (801aa24 <reg_dhcp_cbfunc+0x58>)
 801a9e0:	4a11      	ldr	r2, [pc, #68]	; (801aa28 <reg_dhcp_cbfunc+0x5c>)
 801a9e2:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801a9e4:	4b11      	ldr	r3, [pc, #68]	; (801aa2c <reg_dhcp_cbfunc+0x60>)
 801a9e6:	4a12      	ldr	r2, [pc, #72]	; (801aa30 <reg_dhcp_cbfunc+0x64>)
 801a9e8:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d002      	beq.n	801a9f6 <reg_dhcp_cbfunc+0x2a>
 801a9f0:	4a0a      	ldr	r2, [pc, #40]	; (801aa1c <reg_dhcp_cbfunc+0x50>)
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801a9f6:	68bb      	ldr	r3, [r7, #8]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d002      	beq.n	801aa02 <reg_dhcp_cbfunc+0x36>
 801a9fc:	4a09      	ldr	r2, [pc, #36]	; (801aa24 <reg_dhcp_cbfunc+0x58>)
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d002      	beq.n	801aa0e <reg_dhcp_cbfunc+0x42>
 801aa08:	4a08      	ldr	r2, [pc, #32]	; (801aa2c <reg_dhcp_cbfunc+0x60>)
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	6013      	str	r3, [r2, #0]
}
 801aa0e:	bf00      	nop
 801aa10:	3714      	adds	r7, #20
 801aa12:	46bd      	mov	sp, r7
 801aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa18:	4770      	bx	lr
 801aa1a:	bf00      	nop
 801aa1c:	20000104 	.word	0x20000104
 801aa20:	0801a92d 	.word	0x0801a92d
 801aa24:	20000108 	.word	0x20000108
 801aa28:	0801a965 	.word	0x0801a965
 801aa2c:	2000010c 	.word	0x2000010c
 801aa30:	0801a991 	.word	0x0801a991

0801aa34 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b084      	sub	sp, #16
 801aa38:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801aa3a:	463b      	mov	r3, r7
 801aa3c:	2206      	movs	r2, #6
 801aa3e:	4619      	mov	r1, r3
 801aa40:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801aa44:	f7fd ff6e 	bl	8018924 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801aa48:	4b72      	ldr	r3, [pc, #456]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	2201      	movs	r2, #1
 801aa4e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801aa50:	4b70      	ldr	r3, [pc, #448]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	2201      	movs	r2, #1
 801aa56:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801aa58:	4b6e      	ldr	r3, [pc, #440]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	2206      	movs	r2, #6
 801aa5e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801aa60:	4b6c      	ldr	r3, [pc, #432]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	2200      	movs	r2, #0
 801aa66:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801aa68:	4b6a      	ldr	r3, [pc, #424]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	3304      	adds	r3, #4
 801aa6e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801aa70:	4b69      	ldr	r3, [pc, #420]	; (801ac18 <makeDHCPMSG+0x1e4>)
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	0e1b      	lsrs	r3, r3, #24
 801aa76:	b2da      	uxtb	r2, r3
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801aa7c:	4b66      	ldr	r3, [pc, #408]	; (801ac18 <makeDHCPMSG+0x1e4>)
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	0c1a      	lsrs	r2, r3, #16
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	3301      	adds	r3, #1
 801aa86:	b2d2      	uxtb	r2, r2
 801aa88:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801aa8a:	4b63      	ldr	r3, [pc, #396]	; (801ac18 <makeDHCPMSG+0x1e4>)
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	0a1a      	lsrs	r2, r3, #8
 801aa90:	68bb      	ldr	r3, [r7, #8]
 801aa92:	3302      	adds	r3, #2
 801aa94:	b2d2      	uxtb	r2, r2
 801aa96:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801aa98:	4b5f      	ldr	r3, [pc, #380]	; (801ac18 <makeDHCPMSG+0x1e4>)
 801aa9a:	681a      	ldr	r2, [r3, #0]
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	3303      	adds	r3, #3
 801aaa0:	b2d2      	uxtb	r2, r2
 801aaa2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801aaa4:	4b5b      	ldr	r3, [pc, #364]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	2200      	movs	r2, #0
 801aaaa:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801aaac:	4b59      	ldr	r3, [pc, #356]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	330a      	adds	r3, #10
 801aab2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801aab4:	68bb      	ldr	r3, [r7, #8]
 801aab6:	2280      	movs	r2, #128	; 0x80
 801aab8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	3301      	adds	r3, #1
 801aabe:	2200      	movs	r2, #0
 801aac0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801aac2:	4b54      	ldr	r3, [pc, #336]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	2200      	movs	r2, #0
 801aac8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801aaca:	4b52      	ldr	r3, [pc, #328]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	2200      	movs	r2, #0
 801aad0:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801aad2:	4b50      	ldr	r3, [pc, #320]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	2200      	movs	r2, #0
 801aad8:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801aada:	4b4e      	ldr	r3, [pc, #312]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	2200      	movs	r2, #0
 801aae0:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801aae2:	4b4c      	ldr	r3, [pc, #304]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	2200      	movs	r2, #0
 801aae8:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801aaea:	4b4a      	ldr	r3, [pc, #296]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801aaf2:	4b48      	ldr	r3, [pc, #288]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801aafa:	4b46      	ldr	r3, [pc, #280]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	2200      	movs	r2, #0
 801ab00:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801ab02:	4b44      	ldr	r3, [pc, #272]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	2200      	movs	r2, #0
 801ab08:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801ab0a:	4b42      	ldr	r3, [pc, #264]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	2200      	movs	r2, #0
 801ab10:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801ab12:	4b40      	ldr	r3, [pc, #256]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	2200      	movs	r2, #0
 801ab18:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801ab1a:	4b3e      	ldr	r3, [pc, #248]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	2200      	movs	r2, #0
 801ab20:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801ab22:	4b3c      	ldr	r3, [pc, #240]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	2200      	movs	r2, #0
 801ab28:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801ab2a:	4b3a      	ldr	r3, [pc, #232]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	2200      	movs	r2, #0
 801ab30:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801ab32:	4b38      	ldr	r3, [pc, #224]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	2200      	movs	r2, #0
 801ab38:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801ab3a:	4b36      	ldr	r3, [pc, #216]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	2200      	movs	r2, #0
 801ab40:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801ab42:	4b34      	ldr	r3, [pc, #208]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	4a35      	ldr	r2, [pc, #212]	; (801ac1c <makeDHCPMSG+0x1e8>)
 801ab48:	7812      	ldrb	r2, [r2, #0]
 801ab4a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801ab4c:	4b31      	ldr	r3, [pc, #196]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	4a32      	ldr	r2, [pc, #200]	; (801ac1c <makeDHCPMSG+0x1e8>)
 801ab52:	7852      	ldrb	r2, [r2, #1]
 801ab54:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801ab56:	4b2f      	ldr	r3, [pc, #188]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	4a30      	ldr	r2, [pc, #192]	; (801ac1c <makeDHCPMSG+0x1e8>)
 801ab5c:	7892      	ldrb	r2, [r2, #2]
 801ab5e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801ab60:	4b2c      	ldr	r3, [pc, #176]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	4a2d      	ldr	r2, [pc, #180]	; (801ac1c <makeDHCPMSG+0x1e8>)
 801ab66:	78d2      	ldrb	r2, [r2, #3]
 801ab68:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801ab6a:	4b2a      	ldr	r3, [pc, #168]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	4a2b      	ldr	r2, [pc, #172]	; (801ac1c <makeDHCPMSG+0x1e8>)
 801ab70:	7912      	ldrb	r2, [r2, #4]
 801ab72:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801ab76:	4b27      	ldr	r3, [pc, #156]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	4a28      	ldr	r2, [pc, #160]	; (801ac1c <makeDHCPMSG+0x1e8>)
 801ab7c:	7952      	ldrb	r2, [r2, #5]
 801ab7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801ab82:	2306      	movs	r3, #6
 801ab84:	73fb      	strb	r3, [r7, #15]
 801ab86:	e008      	b.n	801ab9a <makeDHCPMSG+0x166>
 801ab88:	4b22      	ldr	r3, [pc, #136]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ab8a:	681a      	ldr	r2, [r3, #0]
 801ab8c:	7bfb      	ldrb	r3, [r7, #15]
 801ab8e:	4413      	add	r3, r2
 801ab90:	2200      	movs	r2, #0
 801ab92:	771a      	strb	r2, [r3, #28]
 801ab94:	7bfb      	ldrb	r3, [r7, #15]
 801ab96:	3301      	adds	r3, #1
 801ab98:	73fb      	strb	r3, [r7, #15]
 801ab9a:	7bfb      	ldrb	r3, [r7, #15]
 801ab9c:	2b0f      	cmp	r3, #15
 801ab9e:	d9f3      	bls.n	801ab88 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801aba0:	2300      	movs	r3, #0
 801aba2:	73fb      	strb	r3, [r7, #15]
 801aba4:	e009      	b.n	801abba <makeDHCPMSG+0x186>
 801aba6:	4b1b      	ldr	r3, [pc, #108]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801aba8:	681a      	ldr	r2, [r3, #0]
 801abaa:	7bfb      	ldrb	r3, [r7, #15]
 801abac:	4413      	add	r3, r2
 801abae:	2200      	movs	r2, #0
 801abb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801abb4:	7bfb      	ldrb	r3, [r7, #15]
 801abb6:	3301      	adds	r3, #1
 801abb8:	73fb      	strb	r3, [r7, #15]
 801abba:	7bfb      	ldrb	r3, [r7, #15]
 801abbc:	2b3f      	cmp	r3, #63	; 0x3f
 801abbe:	d9f2      	bls.n	801aba6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801abc0:	2300      	movs	r3, #0
 801abc2:	73fb      	strb	r3, [r7, #15]
 801abc4:	e009      	b.n	801abda <makeDHCPMSG+0x1a6>
 801abc6:	4b13      	ldr	r3, [pc, #76]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801abc8:	681a      	ldr	r2, [r3, #0]
 801abca:	7bfb      	ldrb	r3, [r7, #15]
 801abcc:	4413      	add	r3, r2
 801abce:	2200      	movs	r2, #0
 801abd0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801abd4:	7bfb      	ldrb	r3, [r7, #15]
 801abd6:	3301      	adds	r3, #1
 801abd8:	73fb      	strb	r3, [r7, #15]
 801abda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	daf1      	bge.n	801abc6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801abe2:	4b0c      	ldr	r3, [pc, #48]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	2263      	movs	r2, #99	; 0x63
 801abe8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801abec:	4b09      	ldr	r3, [pc, #36]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	2282      	movs	r2, #130	; 0x82
 801abf2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801abf6:	4b07      	ldr	r3, [pc, #28]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	2253      	movs	r2, #83	; 0x53
 801abfc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801ac00:	4b04      	ldr	r3, [pc, #16]	; (801ac14 <makeDHCPMSG+0x1e0>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	2263      	movs	r2, #99	; 0x63
 801ac06:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 801ac0a:	bf00      	nop
 801ac0c:	3710      	adds	r7, #16
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}
 801ac12:	bf00      	nop
 801ac14:	200009d0 	.word	0x200009d0
 801ac18:	200009cc 	.word	0x200009cc
 801ac1c:	200009d4 	.word	0x200009d4

0801ac20 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801ac20:	b5b0      	push	{r4, r5, r7, lr}
 801ac22:	b084      	sub	sp, #16
 801ac24:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801ac26:	2300      	movs	r3, #0
 801ac28:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801ac2a:	f7ff ff03 	bl	801aa34 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801ac2e:	4b56      	ldr	r3, [pc, #344]	; (801ad88 <send_DHCP_DISCOVER+0x168>)
 801ac30:	2200      	movs	r2, #0
 801ac32:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801ac34:	4b54      	ldr	r3, [pc, #336]	; (801ad88 <send_DHCP_DISCOVER+0x168>)
 801ac36:	2200      	movs	r2, #0
 801ac38:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801ac3a:	4b53      	ldr	r3, [pc, #332]	; (801ad88 <send_DHCP_DISCOVER+0x168>)
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801ac40:	4b51      	ldr	r3, [pc, #324]	; (801ad88 <send_DHCP_DISCOVER+0x168>)
 801ac42:	2200      	movs	r2, #0
 801ac44:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801ac46:	4b51      	ldr	r3, [pc, #324]	; (801ad8c <send_DHCP_DISCOVER+0x16c>)
 801ac48:	2200      	movs	r2, #0
 801ac4a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801ac4c:	4b4f      	ldr	r3, [pc, #316]	; (801ad8c <send_DHCP_DISCOVER+0x16c>)
 801ac4e:	2200      	movs	r2, #0
 801ac50:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801ac52:	4b4e      	ldr	r3, [pc, #312]	; (801ad8c <send_DHCP_DISCOVER+0x16c>)
 801ac54:	2200      	movs	r2, #0
 801ac56:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801ac58:	4b4c      	ldr	r3, [pc, #304]	; (801ad8c <send_DHCP_DISCOVER+0x16c>)
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801ac5e:	2304      	movs	r3, #4
 801ac60:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801ac62:	4b4b      	ldr	r3, [pc, #300]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ac64:	681a      	ldr	r2, [r3, #0]
 801ac66:	88bb      	ldrh	r3, [r7, #4]
 801ac68:	1c59      	adds	r1, r3, #1
 801ac6a:	80b9      	strh	r1, [r7, #4]
 801ac6c:	4413      	add	r3, r2
 801ac6e:	2235      	movs	r2, #53	; 0x35
 801ac70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ac74:	4b46      	ldr	r3, [pc, #280]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ac76:	681a      	ldr	r2, [r3, #0]
 801ac78:	88bb      	ldrh	r3, [r7, #4]
 801ac7a:	1c59      	adds	r1, r3, #1
 801ac7c:	80b9      	strh	r1, [r7, #4]
 801ac7e:	4413      	add	r3, r2
 801ac80:	2201      	movs	r2, #1
 801ac82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801ac86:	4b42      	ldr	r3, [pc, #264]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ac88:	681a      	ldr	r2, [r3, #0]
 801ac8a:	88bb      	ldrh	r3, [r7, #4]
 801ac8c:	1c59      	adds	r1, r3, #1
 801ac8e:	80b9      	strh	r1, [r7, #4]
 801ac90:	4413      	add	r3, r2
 801ac92:	2201      	movs	r2, #1
 801ac94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801ac98:	4b3d      	ldr	r3, [pc, #244]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ac9a:	681a      	ldr	r2, [r3, #0]
 801ac9c:	88bb      	ldrh	r3, [r7, #4]
 801ac9e:	1c59      	adds	r1, r3, #1
 801aca0:	80b9      	strh	r1, [r7, #4]
 801aca2:	4413      	add	r3, r2
 801aca4:	223d      	movs	r2, #61	; 0x3d
 801aca6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801acaa:	4b39      	ldr	r3, [pc, #228]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801acac:	681a      	ldr	r2, [r3, #0]
 801acae:	88bb      	ldrh	r3, [r7, #4]
 801acb0:	1c59      	adds	r1, r3, #1
 801acb2:	80b9      	strh	r1, [r7, #4]
 801acb4:	4413      	add	r3, r2
 801acb6:	2207      	movs	r2, #7
 801acb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801acbc:	4b34      	ldr	r3, [pc, #208]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801acbe:	681a      	ldr	r2, [r3, #0]
 801acc0:	88bb      	ldrh	r3, [r7, #4]
 801acc2:	1c59      	adds	r1, r3, #1
 801acc4:	80b9      	strh	r1, [r7, #4]
 801acc6:	4413      	add	r3, r2
 801acc8:	2201      	movs	r2, #1
 801acca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801acce:	4b30      	ldr	r3, [pc, #192]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801acd0:	681a      	ldr	r2, [r3, #0]
 801acd2:	88bb      	ldrh	r3, [r7, #4]
 801acd4:	1c59      	adds	r1, r3, #1
 801acd6:	80b9      	strh	r1, [r7, #4]
 801acd8:	4618      	mov	r0, r3
 801acda:	4b2e      	ldr	r3, [pc, #184]	; (801ad94 <send_DHCP_DISCOVER+0x174>)
 801acdc:	7819      	ldrb	r1, [r3, #0]
 801acde:	1813      	adds	r3, r2, r0
 801ace0:	460a      	mov	r2, r1
 801ace2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801ace6:	4b2a      	ldr	r3, [pc, #168]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ace8:	681a      	ldr	r2, [r3, #0]
 801acea:	88bb      	ldrh	r3, [r7, #4]
 801acec:	1c59      	adds	r1, r3, #1
 801acee:	80b9      	strh	r1, [r7, #4]
 801acf0:	4618      	mov	r0, r3
 801acf2:	4b28      	ldr	r3, [pc, #160]	; (801ad94 <send_DHCP_DISCOVER+0x174>)
 801acf4:	7859      	ldrb	r1, [r3, #1]
 801acf6:	1813      	adds	r3, r2, r0
 801acf8:	460a      	mov	r2, r1
 801acfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801acfe:	4b24      	ldr	r3, [pc, #144]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ad00:	681a      	ldr	r2, [r3, #0]
 801ad02:	88bb      	ldrh	r3, [r7, #4]
 801ad04:	1c59      	adds	r1, r3, #1
 801ad06:	80b9      	strh	r1, [r7, #4]
 801ad08:	4618      	mov	r0, r3
 801ad0a:	4b22      	ldr	r3, [pc, #136]	; (801ad94 <send_DHCP_DISCOVER+0x174>)
 801ad0c:	7899      	ldrb	r1, [r3, #2]
 801ad0e:	1813      	adds	r3, r2, r0
 801ad10:	460a      	mov	r2, r1
 801ad12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801ad16:	4b1e      	ldr	r3, [pc, #120]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ad18:	681a      	ldr	r2, [r3, #0]
 801ad1a:	88bb      	ldrh	r3, [r7, #4]
 801ad1c:	1c59      	adds	r1, r3, #1
 801ad1e:	80b9      	strh	r1, [r7, #4]
 801ad20:	4618      	mov	r0, r3
 801ad22:	4b1c      	ldr	r3, [pc, #112]	; (801ad94 <send_DHCP_DISCOVER+0x174>)
 801ad24:	78d9      	ldrb	r1, [r3, #3]
 801ad26:	1813      	adds	r3, r2, r0
 801ad28:	460a      	mov	r2, r1
 801ad2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801ad2e:	4b18      	ldr	r3, [pc, #96]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ad30:	681a      	ldr	r2, [r3, #0]
 801ad32:	88bb      	ldrh	r3, [r7, #4]
 801ad34:	1c59      	adds	r1, r3, #1
 801ad36:	80b9      	strh	r1, [r7, #4]
 801ad38:	4618      	mov	r0, r3
 801ad3a:	4b16      	ldr	r3, [pc, #88]	; (801ad94 <send_DHCP_DISCOVER+0x174>)
 801ad3c:	7919      	ldrb	r1, [r3, #4]
 801ad3e:	1813      	adds	r3, r2, r0
 801ad40:	460a      	mov	r2, r1
 801ad42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801ad46:	4b12      	ldr	r3, [pc, #72]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ad48:	681a      	ldr	r2, [r3, #0]
 801ad4a:	88bb      	ldrh	r3, [r7, #4]
 801ad4c:	1c59      	adds	r1, r3, #1
 801ad4e:	80b9      	strh	r1, [r7, #4]
 801ad50:	4618      	mov	r0, r3
 801ad52:	4b10      	ldr	r3, [pc, #64]	; (801ad94 <send_DHCP_DISCOVER+0x174>)
 801ad54:	7959      	ldrb	r1, [r3, #5]
 801ad56:	1813      	adds	r3, r2, r0
 801ad58:	460a      	mov	r2, r1
 801ad5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801ad5e:	4b0c      	ldr	r3, [pc, #48]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ad60:	681a      	ldr	r2, [r3, #0]
 801ad62:	88bb      	ldrh	r3, [r7, #4]
 801ad64:	1c59      	adds	r1, r3, #1
 801ad66:	80b9      	strh	r1, [r7, #4]
 801ad68:	4413      	add	r3, r2
 801ad6a:	220c      	movs	r2, #12
 801ad6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801ad70:	4b07      	ldr	r3, [pc, #28]	; (801ad90 <send_DHCP_DISCOVER+0x170>)
 801ad72:	681a      	ldr	r2, [r3, #0]
 801ad74:	88bb      	ldrh	r3, [r7, #4]
 801ad76:	1c59      	adds	r1, r3, #1
 801ad78:	80b9      	strh	r1, [r7, #4]
 801ad7a:	4413      	add	r3, r2
 801ad7c:	2200      	movs	r2, #0
 801ad7e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ad82:	2300      	movs	r3, #0
 801ad84:	80fb      	strh	r3, [r7, #6]
 801ad86:	e017      	b.n	801adb8 <send_DHCP_DISCOVER+0x198>
 801ad88:	200009a8 	.word	0x200009a8
 801ad8c:	200009ac 	.word	0x200009ac
 801ad90:	200009d0 	.word	0x200009d0
 801ad94:	200009d4 	.word	0x200009d4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801ad98:	88f9      	ldrh	r1, [r7, #6]
 801ad9a:	4b80      	ldr	r3, [pc, #512]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801ad9c:	681a      	ldr	r2, [r3, #0]
 801ad9e:	88bb      	ldrh	r3, [r7, #4]
 801ada0:	1c58      	adds	r0, r3, #1
 801ada2:	80b8      	strh	r0, [r7, #4]
 801ada4:	4618      	mov	r0, r3
 801ada6:	4b7e      	ldr	r3, [pc, #504]	; (801afa0 <send_DHCP_DISCOVER+0x380>)
 801ada8:	5c59      	ldrb	r1, [r3, r1]
 801adaa:	1813      	adds	r3, r2, r0
 801adac:	460a      	mov	r2, r1
 801adae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801adb2:	88fb      	ldrh	r3, [r7, #6]
 801adb4:	3301      	adds	r3, #1
 801adb6:	80fb      	strh	r3, [r7, #6]
 801adb8:	88fb      	ldrh	r3, [r7, #6]
 801adba:	4a79      	ldr	r2, [pc, #484]	; (801afa0 <send_DHCP_DISCOVER+0x380>)
 801adbc:	5cd3      	ldrb	r3, [r2, r3]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d1ea      	bne.n	801ad98 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801adc2:	4b78      	ldr	r3, [pc, #480]	; (801afa4 <send_DHCP_DISCOVER+0x384>)
 801adc4:	78db      	ldrb	r3, [r3, #3]
 801adc6:	091b      	lsrs	r3, r3, #4
 801adc8:	b2da      	uxtb	r2, r3
 801adca:	4b74      	ldr	r3, [pc, #464]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801adcc:	681c      	ldr	r4, [r3, #0]
 801adce:	88bb      	ldrh	r3, [r7, #4]
 801add0:	1c59      	adds	r1, r3, #1
 801add2:	80b9      	strh	r1, [r7, #4]
 801add4:	461d      	mov	r5, r3
 801add6:	4610      	mov	r0, r2
 801add8:	f001 f9c4 	bl	801c164 <NibbleToHex>
 801addc:	4603      	mov	r3, r0
 801adde:	461a      	mov	r2, r3
 801ade0:	1963      	adds	r3, r4, r5
 801ade2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801ade6:	4b6f      	ldr	r3, [pc, #444]	; (801afa4 <send_DHCP_DISCOVER+0x384>)
 801ade8:	78da      	ldrb	r2, [r3, #3]
 801adea:	4b6c      	ldr	r3, [pc, #432]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801adec:	681c      	ldr	r4, [r3, #0]
 801adee:	88bb      	ldrh	r3, [r7, #4]
 801adf0:	1c59      	adds	r1, r3, #1
 801adf2:	80b9      	strh	r1, [r7, #4]
 801adf4:	461d      	mov	r5, r3
 801adf6:	4610      	mov	r0, r2
 801adf8:	f001 f9b4 	bl	801c164 <NibbleToHex>
 801adfc:	4603      	mov	r3, r0
 801adfe:	461a      	mov	r2, r3
 801ae00:	1963      	adds	r3, r4, r5
 801ae02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801ae06:	4b67      	ldr	r3, [pc, #412]	; (801afa4 <send_DHCP_DISCOVER+0x384>)
 801ae08:	791b      	ldrb	r3, [r3, #4]
 801ae0a:	091b      	lsrs	r3, r3, #4
 801ae0c:	b2da      	uxtb	r2, r3
 801ae0e:	4b63      	ldr	r3, [pc, #396]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801ae10:	681c      	ldr	r4, [r3, #0]
 801ae12:	88bb      	ldrh	r3, [r7, #4]
 801ae14:	1c59      	adds	r1, r3, #1
 801ae16:	80b9      	strh	r1, [r7, #4]
 801ae18:	461d      	mov	r5, r3
 801ae1a:	4610      	mov	r0, r2
 801ae1c:	f001 f9a2 	bl	801c164 <NibbleToHex>
 801ae20:	4603      	mov	r3, r0
 801ae22:	461a      	mov	r2, r3
 801ae24:	1963      	adds	r3, r4, r5
 801ae26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801ae2a:	4b5e      	ldr	r3, [pc, #376]	; (801afa4 <send_DHCP_DISCOVER+0x384>)
 801ae2c:	791a      	ldrb	r2, [r3, #4]
 801ae2e:	4b5b      	ldr	r3, [pc, #364]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801ae30:	681c      	ldr	r4, [r3, #0]
 801ae32:	88bb      	ldrh	r3, [r7, #4]
 801ae34:	1c59      	adds	r1, r3, #1
 801ae36:	80b9      	strh	r1, [r7, #4]
 801ae38:	461d      	mov	r5, r3
 801ae3a:	4610      	mov	r0, r2
 801ae3c:	f001 f992 	bl	801c164 <NibbleToHex>
 801ae40:	4603      	mov	r3, r0
 801ae42:	461a      	mov	r2, r3
 801ae44:	1963      	adds	r3, r4, r5
 801ae46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801ae4a:	4b56      	ldr	r3, [pc, #344]	; (801afa4 <send_DHCP_DISCOVER+0x384>)
 801ae4c:	795b      	ldrb	r3, [r3, #5]
 801ae4e:	091b      	lsrs	r3, r3, #4
 801ae50:	b2da      	uxtb	r2, r3
 801ae52:	4b52      	ldr	r3, [pc, #328]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801ae54:	681c      	ldr	r4, [r3, #0]
 801ae56:	88bb      	ldrh	r3, [r7, #4]
 801ae58:	1c59      	adds	r1, r3, #1
 801ae5a:	80b9      	strh	r1, [r7, #4]
 801ae5c:	461d      	mov	r5, r3
 801ae5e:	4610      	mov	r0, r2
 801ae60:	f001 f980 	bl	801c164 <NibbleToHex>
 801ae64:	4603      	mov	r3, r0
 801ae66:	461a      	mov	r2, r3
 801ae68:	1963      	adds	r3, r4, r5
 801ae6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801ae6e:	4b4d      	ldr	r3, [pc, #308]	; (801afa4 <send_DHCP_DISCOVER+0x384>)
 801ae70:	795a      	ldrb	r2, [r3, #5]
 801ae72:	4b4a      	ldr	r3, [pc, #296]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801ae74:	681c      	ldr	r4, [r3, #0]
 801ae76:	88bb      	ldrh	r3, [r7, #4]
 801ae78:	1c59      	adds	r1, r3, #1
 801ae7a:	80b9      	strh	r1, [r7, #4]
 801ae7c:	461d      	mov	r5, r3
 801ae7e:	4610      	mov	r0, r2
 801ae80:	f001 f970 	bl	801c164 <NibbleToHex>
 801ae84:	4603      	mov	r3, r0
 801ae86:	461a      	mov	r2, r3
 801ae88:	1963      	adds	r3, r4, r5
 801ae8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801ae8e:	88fb      	ldrh	r3, [r7, #6]
 801ae90:	b2d9      	uxtb	r1, r3
 801ae92:	4b42      	ldr	r3, [pc, #264]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801ae94:	681a      	ldr	r2, [r3, #0]
 801ae96:	88b8      	ldrh	r0, [r7, #4]
 801ae98:	88fb      	ldrh	r3, [r7, #6]
 801ae9a:	3307      	adds	r3, #7
 801ae9c:	1ac3      	subs	r3, r0, r3
 801ae9e:	3106      	adds	r1, #6
 801aea0:	b2c9      	uxtb	r1, r1
 801aea2:	4413      	add	r3, r2
 801aea4:	460a      	mov	r2, r1
 801aea6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801aeaa:	4b3c      	ldr	r3, [pc, #240]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801aeac:	681a      	ldr	r2, [r3, #0]
 801aeae:	88bb      	ldrh	r3, [r7, #4]
 801aeb0:	1c59      	adds	r1, r3, #1
 801aeb2:	80b9      	strh	r1, [r7, #4]
 801aeb4:	4413      	add	r3, r2
 801aeb6:	2237      	movs	r2, #55	; 0x37
 801aeb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801aebc:	4b37      	ldr	r3, [pc, #220]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801aebe:	681a      	ldr	r2, [r3, #0]
 801aec0:	88bb      	ldrh	r3, [r7, #4]
 801aec2:	1c59      	adds	r1, r3, #1
 801aec4:	80b9      	strh	r1, [r7, #4]
 801aec6:	4413      	add	r3, r2
 801aec8:	2206      	movs	r2, #6
 801aeca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801aece:	4b33      	ldr	r3, [pc, #204]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801aed0:	681a      	ldr	r2, [r3, #0]
 801aed2:	88bb      	ldrh	r3, [r7, #4]
 801aed4:	1c59      	adds	r1, r3, #1
 801aed6:	80b9      	strh	r1, [r7, #4]
 801aed8:	4413      	add	r3, r2
 801aeda:	2201      	movs	r2, #1
 801aedc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801aee0:	4b2e      	ldr	r3, [pc, #184]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801aee2:	681a      	ldr	r2, [r3, #0]
 801aee4:	88bb      	ldrh	r3, [r7, #4]
 801aee6:	1c59      	adds	r1, r3, #1
 801aee8:	80b9      	strh	r1, [r7, #4]
 801aeea:	4413      	add	r3, r2
 801aeec:	2203      	movs	r2, #3
 801aeee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801aef2:	4b2a      	ldr	r3, [pc, #168]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801aef4:	681a      	ldr	r2, [r3, #0]
 801aef6:	88bb      	ldrh	r3, [r7, #4]
 801aef8:	1c59      	adds	r1, r3, #1
 801aefa:	80b9      	strh	r1, [r7, #4]
 801aefc:	4413      	add	r3, r2
 801aefe:	2206      	movs	r2, #6
 801af00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801af04:	4b25      	ldr	r3, [pc, #148]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801af06:	681a      	ldr	r2, [r3, #0]
 801af08:	88bb      	ldrh	r3, [r7, #4]
 801af0a:	1c59      	adds	r1, r3, #1
 801af0c:	80b9      	strh	r1, [r7, #4]
 801af0e:	4413      	add	r3, r2
 801af10:	220f      	movs	r2, #15
 801af12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801af16:	4b21      	ldr	r3, [pc, #132]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801af18:	681a      	ldr	r2, [r3, #0]
 801af1a:	88bb      	ldrh	r3, [r7, #4]
 801af1c:	1c59      	adds	r1, r3, #1
 801af1e:	80b9      	strh	r1, [r7, #4]
 801af20:	4413      	add	r3, r2
 801af22:	223a      	movs	r2, #58	; 0x3a
 801af24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801af28:	4b1c      	ldr	r3, [pc, #112]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801af2a:	681a      	ldr	r2, [r3, #0]
 801af2c:	88bb      	ldrh	r3, [r7, #4]
 801af2e:	1c59      	adds	r1, r3, #1
 801af30:	80b9      	strh	r1, [r7, #4]
 801af32:	4413      	add	r3, r2
 801af34:	223b      	movs	r2, #59	; 0x3b
 801af36:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801af3a:	4b18      	ldr	r3, [pc, #96]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801af3c:	681a      	ldr	r2, [r3, #0]
 801af3e:	88bb      	ldrh	r3, [r7, #4]
 801af40:	1c59      	adds	r1, r3, #1
 801af42:	80b9      	strh	r1, [r7, #4]
 801af44:	4413      	add	r3, r2
 801af46:	22ff      	movs	r2, #255	; 0xff
 801af48:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801af4c:	88bb      	ldrh	r3, [r7, #4]
 801af4e:	80fb      	strh	r3, [r7, #6]
 801af50:	e009      	b.n	801af66 <send_DHCP_DISCOVER+0x346>
 801af52:	4b12      	ldr	r3, [pc, #72]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801af54:	681a      	ldr	r2, [r3, #0]
 801af56:	88fb      	ldrh	r3, [r7, #6]
 801af58:	4413      	add	r3, r2
 801af5a:	2200      	movs	r2, #0
 801af5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801af60:	88fb      	ldrh	r3, [r7, #6]
 801af62:	3301      	adds	r3, #1
 801af64:	80fb      	strh	r3, [r7, #6]
 801af66:	88fb      	ldrh	r3, [r7, #6]
 801af68:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801af6c:	d3f1      	bcc.n	801af52 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801af6e:	23ff      	movs	r3, #255	; 0xff
 801af70:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801af72:	23ff      	movs	r3, #255	; 0xff
 801af74:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801af76:	23ff      	movs	r3, #255	; 0xff
 801af78:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801af7a:	23ff      	movs	r3, #255	; 0xff
 801af7c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801af7e:	4b0a      	ldr	r3, [pc, #40]	; (801afa8 <send_DHCP_DISCOVER+0x388>)
 801af80:	7818      	ldrb	r0, [r3, #0]
 801af82:	4b06      	ldr	r3, [pc, #24]	; (801af9c <send_DHCP_DISCOVER+0x37c>)
 801af84:	6819      	ldr	r1, [r3, #0]
 801af86:	463b      	mov	r3, r7
 801af88:	2243      	movs	r2, #67	; 0x43
 801af8a:	9200      	str	r2, [sp, #0]
 801af8c:	f44f 7209 	mov.w	r2, #548	; 0x224
 801af90:	f7fe fbfc 	bl	801978c <sendto>
}
 801af94:	bf00      	nop
 801af96:	3708      	adds	r7, #8
 801af98:	46bd      	mov	sp, r7
 801af9a:	bdb0      	pop	{r4, r5, r7, pc}
 801af9c:	200009d0 	.word	0x200009d0
 801afa0:	200000f8 	.word	0x200000f8
 801afa4:	200009d4 	.word	0x200009d4
 801afa8:	200009a5 	.word	0x200009a5

0801afac <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801afac:	b5b0      	push	{r4, r5, r7, lr}
 801afae:	b086      	sub	sp, #24
 801afb0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801afb2:	2300      	movs	r3, #0
 801afb4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801afb6:	f7ff fd3d 	bl	801aa34 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801afba:	4b1b      	ldr	r3, [pc, #108]	; (801b028 <send_DHCP_REQUEST+0x7c>)
 801afbc:	f993 3000 	ldrsb.w	r3, [r3]
 801afc0:	2b03      	cmp	r3, #3
 801afc2:	d004      	beq.n	801afce <send_DHCP_REQUEST+0x22>
 801afc4:	4b18      	ldr	r3, [pc, #96]	; (801b028 <send_DHCP_REQUEST+0x7c>)
 801afc6:	f993 3000 	ldrsb.w	r3, [r3]
 801afca:	2b04      	cmp	r3, #4
 801afcc:	d134      	bne.n	801b038 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801afce:	4b17      	ldr	r3, [pc, #92]	; (801b02c <send_DHCP_REQUEST+0x80>)
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	330a      	adds	r3, #10
 801afd4:	2200      	movs	r2, #0
 801afd6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801afd8:	4b14      	ldr	r3, [pc, #80]	; (801b02c <send_DHCP_REQUEST+0x80>)
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	330a      	adds	r3, #10
 801afde:	3301      	adds	r3, #1
 801afe0:	2200      	movs	r2, #0
 801afe2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801afe4:	4b11      	ldr	r3, [pc, #68]	; (801b02c <send_DHCP_REQUEST+0x80>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	4a11      	ldr	r2, [pc, #68]	; (801b030 <send_DHCP_REQUEST+0x84>)
 801afea:	7812      	ldrb	r2, [r2, #0]
 801afec:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801afee:	4b0f      	ldr	r3, [pc, #60]	; (801b02c <send_DHCP_REQUEST+0x80>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	4a0f      	ldr	r2, [pc, #60]	; (801b030 <send_DHCP_REQUEST+0x84>)
 801aff4:	7852      	ldrb	r2, [r2, #1]
 801aff6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801aff8:	4b0c      	ldr	r3, [pc, #48]	; (801b02c <send_DHCP_REQUEST+0x80>)
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	4a0c      	ldr	r2, [pc, #48]	; (801b030 <send_DHCP_REQUEST+0x84>)
 801affe:	7892      	ldrb	r2, [r2, #2]
 801b000:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801b002:	4b0a      	ldr	r3, [pc, #40]	; (801b02c <send_DHCP_REQUEST+0x80>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	4a0a      	ldr	r2, [pc, #40]	; (801b030 <send_DHCP_REQUEST+0x84>)
 801b008:	78d2      	ldrb	r2, [r2, #3]
 801b00a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801b00c:	4b09      	ldr	r3, [pc, #36]	; (801b034 <send_DHCP_REQUEST+0x88>)
 801b00e:	781b      	ldrb	r3, [r3, #0]
 801b010:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801b012:	4b08      	ldr	r3, [pc, #32]	; (801b034 <send_DHCP_REQUEST+0x88>)
 801b014:	785b      	ldrb	r3, [r3, #1]
 801b016:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801b018:	4b06      	ldr	r3, [pc, #24]	; (801b034 <send_DHCP_REQUEST+0x88>)
 801b01a:	789b      	ldrb	r3, [r3, #2]
 801b01c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801b01e:	4b05      	ldr	r3, [pc, #20]	; (801b034 <send_DHCP_REQUEST+0x88>)
 801b020:	78db      	ldrb	r3, [r3, #3]
 801b022:	71fb      	strb	r3, [r7, #7]
 801b024:	e010      	b.n	801b048 <send_DHCP_REQUEST+0x9c>
 801b026:	bf00      	nop
 801b028:	200009c4 	.word	0x200009c4
 801b02c:	200009d0 	.word	0x200009d0
 801b030:	200009b4 	.word	0x200009b4
 801b034:	200009a8 	.word	0x200009a8
   }
   else
   {
   	ip[0] = 255;
 801b038:	23ff      	movs	r3, #255	; 0xff
 801b03a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801b03c:	23ff      	movs	r3, #255	; 0xff
 801b03e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801b040:	23ff      	movs	r3, #255	; 0xff
 801b042:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801b044:	23ff      	movs	r3, #255	; 0xff
 801b046:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b048:	2304      	movs	r3, #4
 801b04a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b04c:	4b8d      	ldr	r3, [pc, #564]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b04e:	681a      	ldr	r2, [r3, #0]
 801b050:	897b      	ldrh	r3, [r7, #10]
 801b052:	1c59      	adds	r1, r3, #1
 801b054:	8179      	strh	r1, [r7, #10]
 801b056:	4413      	add	r3, r2
 801b058:	2235      	movs	r2, #53	; 0x35
 801b05a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b05e:	4b89      	ldr	r3, [pc, #548]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b060:	681a      	ldr	r2, [r3, #0]
 801b062:	897b      	ldrh	r3, [r7, #10]
 801b064:	1c59      	adds	r1, r3, #1
 801b066:	8179      	strh	r1, [r7, #10]
 801b068:	4413      	add	r3, r2
 801b06a:	2201      	movs	r2, #1
 801b06c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801b070:	4b84      	ldr	r3, [pc, #528]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b072:	681a      	ldr	r2, [r3, #0]
 801b074:	897b      	ldrh	r3, [r7, #10]
 801b076:	1c59      	adds	r1, r3, #1
 801b078:	8179      	strh	r1, [r7, #10]
 801b07a:	4413      	add	r3, r2
 801b07c:	2203      	movs	r2, #3
 801b07e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b082:	4b80      	ldr	r3, [pc, #512]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b084:	681a      	ldr	r2, [r3, #0]
 801b086:	897b      	ldrh	r3, [r7, #10]
 801b088:	1c59      	adds	r1, r3, #1
 801b08a:	8179      	strh	r1, [r7, #10]
 801b08c:	4413      	add	r3, r2
 801b08e:	223d      	movs	r2, #61	; 0x3d
 801b090:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b094:	4b7b      	ldr	r3, [pc, #492]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b096:	681a      	ldr	r2, [r3, #0]
 801b098:	897b      	ldrh	r3, [r7, #10]
 801b09a:	1c59      	adds	r1, r3, #1
 801b09c:	8179      	strh	r1, [r7, #10]
 801b09e:	4413      	add	r3, r2
 801b0a0:	2207      	movs	r2, #7
 801b0a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b0a6:	4b77      	ldr	r3, [pc, #476]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b0a8:	681a      	ldr	r2, [r3, #0]
 801b0aa:	897b      	ldrh	r3, [r7, #10]
 801b0ac:	1c59      	adds	r1, r3, #1
 801b0ae:	8179      	strh	r1, [r7, #10]
 801b0b0:	4413      	add	r3, r2
 801b0b2:	2201      	movs	r2, #1
 801b0b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b0b8:	4b72      	ldr	r3, [pc, #456]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b0ba:	681a      	ldr	r2, [r3, #0]
 801b0bc:	897b      	ldrh	r3, [r7, #10]
 801b0be:	1c59      	adds	r1, r3, #1
 801b0c0:	8179      	strh	r1, [r7, #10]
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	4b70      	ldr	r3, [pc, #448]	; (801b288 <send_DHCP_REQUEST+0x2dc>)
 801b0c6:	7819      	ldrb	r1, [r3, #0]
 801b0c8:	1813      	adds	r3, r2, r0
 801b0ca:	460a      	mov	r2, r1
 801b0cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b0d0:	4b6c      	ldr	r3, [pc, #432]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	897b      	ldrh	r3, [r7, #10]
 801b0d6:	1c59      	adds	r1, r3, #1
 801b0d8:	8179      	strh	r1, [r7, #10]
 801b0da:	4618      	mov	r0, r3
 801b0dc:	4b6a      	ldr	r3, [pc, #424]	; (801b288 <send_DHCP_REQUEST+0x2dc>)
 801b0de:	7859      	ldrb	r1, [r3, #1]
 801b0e0:	1813      	adds	r3, r2, r0
 801b0e2:	460a      	mov	r2, r1
 801b0e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b0e8:	4b66      	ldr	r3, [pc, #408]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b0ea:	681a      	ldr	r2, [r3, #0]
 801b0ec:	897b      	ldrh	r3, [r7, #10]
 801b0ee:	1c59      	adds	r1, r3, #1
 801b0f0:	8179      	strh	r1, [r7, #10]
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	4b64      	ldr	r3, [pc, #400]	; (801b288 <send_DHCP_REQUEST+0x2dc>)
 801b0f6:	7899      	ldrb	r1, [r3, #2]
 801b0f8:	1813      	adds	r3, r2, r0
 801b0fa:	460a      	mov	r2, r1
 801b0fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b100:	4b60      	ldr	r3, [pc, #384]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b102:	681a      	ldr	r2, [r3, #0]
 801b104:	897b      	ldrh	r3, [r7, #10]
 801b106:	1c59      	adds	r1, r3, #1
 801b108:	8179      	strh	r1, [r7, #10]
 801b10a:	4618      	mov	r0, r3
 801b10c:	4b5e      	ldr	r3, [pc, #376]	; (801b288 <send_DHCP_REQUEST+0x2dc>)
 801b10e:	78d9      	ldrb	r1, [r3, #3]
 801b110:	1813      	adds	r3, r2, r0
 801b112:	460a      	mov	r2, r1
 801b114:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b118:	4b5a      	ldr	r3, [pc, #360]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b11a:	681a      	ldr	r2, [r3, #0]
 801b11c:	897b      	ldrh	r3, [r7, #10]
 801b11e:	1c59      	adds	r1, r3, #1
 801b120:	8179      	strh	r1, [r7, #10]
 801b122:	4618      	mov	r0, r3
 801b124:	4b58      	ldr	r3, [pc, #352]	; (801b288 <send_DHCP_REQUEST+0x2dc>)
 801b126:	7919      	ldrb	r1, [r3, #4]
 801b128:	1813      	adds	r3, r2, r0
 801b12a:	460a      	mov	r2, r1
 801b12c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b130:	4b54      	ldr	r3, [pc, #336]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b132:	681a      	ldr	r2, [r3, #0]
 801b134:	897b      	ldrh	r3, [r7, #10]
 801b136:	1c59      	adds	r1, r3, #1
 801b138:	8179      	strh	r1, [r7, #10]
 801b13a:	4618      	mov	r0, r3
 801b13c:	4b52      	ldr	r3, [pc, #328]	; (801b288 <send_DHCP_REQUEST+0x2dc>)
 801b13e:	7959      	ldrb	r1, [r3, #5]
 801b140:	1813      	adds	r3, r2, r0
 801b142:	460a      	mov	r2, r1
 801b144:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801b148:	79fb      	ldrb	r3, [r7, #7]
 801b14a:	2bff      	cmp	r3, #255	; 0xff
 801b14c:	f040 8084 	bne.w	801b258 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b150:	4b4c      	ldr	r3, [pc, #304]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b152:	681a      	ldr	r2, [r3, #0]
 801b154:	897b      	ldrh	r3, [r7, #10]
 801b156:	1c59      	adds	r1, r3, #1
 801b158:	8179      	strh	r1, [r7, #10]
 801b15a:	4413      	add	r3, r2
 801b15c:	2232      	movs	r2, #50	; 0x32
 801b15e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b162:	4b48      	ldr	r3, [pc, #288]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b164:	681a      	ldr	r2, [r3, #0]
 801b166:	897b      	ldrh	r3, [r7, #10]
 801b168:	1c59      	adds	r1, r3, #1
 801b16a:	8179      	strh	r1, [r7, #10]
 801b16c:	4413      	add	r3, r2
 801b16e:	2204      	movs	r2, #4
 801b170:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b174:	4b43      	ldr	r3, [pc, #268]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b176:	681a      	ldr	r2, [r3, #0]
 801b178:	897b      	ldrh	r3, [r7, #10]
 801b17a:	1c59      	adds	r1, r3, #1
 801b17c:	8179      	strh	r1, [r7, #10]
 801b17e:	4618      	mov	r0, r3
 801b180:	4b42      	ldr	r3, [pc, #264]	; (801b28c <send_DHCP_REQUEST+0x2e0>)
 801b182:	7819      	ldrb	r1, [r3, #0]
 801b184:	1813      	adds	r3, r2, r0
 801b186:	460a      	mov	r2, r1
 801b188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b18c:	4b3d      	ldr	r3, [pc, #244]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b18e:	681a      	ldr	r2, [r3, #0]
 801b190:	897b      	ldrh	r3, [r7, #10]
 801b192:	1c59      	adds	r1, r3, #1
 801b194:	8179      	strh	r1, [r7, #10]
 801b196:	4618      	mov	r0, r3
 801b198:	4b3c      	ldr	r3, [pc, #240]	; (801b28c <send_DHCP_REQUEST+0x2e0>)
 801b19a:	7859      	ldrb	r1, [r3, #1]
 801b19c:	1813      	adds	r3, r2, r0
 801b19e:	460a      	mov	r2, r1
 801b1a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b1a4:	4b37      	ldr	r3, [pc, #220]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b1a6:	681a      	ldr	r2, [r3, #0]
 801b1a8:	897b      	ldrh	r3, [r7, #10]
 801b1aa:	1c59      	adds	r1, r3, #1
 801b1ac:	8179      	strh	r1, [r7, #10]
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	4b36      	ldr	r3, [pc, #216]	; (801b28c <send_DHCP_REQUEST+0x2e0>)
 801b1b2:	7899      	ldrb	r1, [r3, #2]
 801b1b4:	1813      	adds	r3, r2, r0
 801b1b6:	460a      	mov	r2, r1
 801b1b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b1bc:	4b31      	ldr	r3, [pc, #196]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b1be:	681a      	ldr	r2, [r3, #0]
 801b1c0:	897b      	ldrh	r3, [r7, #10]
 801b1c2:	1c59      	adds	r1, r3, #1
 801b1c4:	8179      	strh	r1, [r7, #10]
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	4b30      	ldr	r3, [pc, #192]	; (801b28c <send_DHCP_REQUEST+0x2e0>)
 801b1ca:	78d9      	ldrb	r1, [r3, #3]
 801b1cc:	1813      	adds	r3, r2, r0
 801b1ce:	460a      	mov	r2, r1
 801b1d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b1d4:	4b2b      	ldr	r3, [pc, #172]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b1d6:	681a      	ldr	r2, [r3, #0]
 801b1d8:	897b      	ldrh	r3, [r7, #10]
 801b1da:	1c59      	adds	r1, r3, #1
 801b1dc:	8179      	strh	r1, [r7, #10]
 801b1de:	4413      	add	r3, r2
 801b1e0:	2236      	movs	r2, #54	; 0x36
 801b1e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b1e6:	4b27      	ldr	r3, [pc, #156]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b1e8:	681a      	ldr	r2, [r3, #0]
 801b1ea:	897b      	ldrh	r3, [r7, #10]
 801b1ec:	1c59      	adds	r1, r3, #1
 801b1ee:	8179      	strh	r1, [r7, #10]
 801b1f0:	4413      	add	r3, r2
 801b1f2:	2204      	movs	r2, #4
 801b1f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b1f8:	4b22      	ldr	r3, [pc, #136]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b1fa:	681a      	ldr	r2, [r3, #0]
 801b1fc:	897b      	ldrh	r3, [r7, #10]
 801b1fe:	1c59      	adds	r1, r3, #1
 801b200:	8179      	strh	r1, [r7, #10]
 801b202:	4618      	mov	r0, r3
 801b204:	4b22      	ldr	r3, [pc, #136]	; (801b290 <send_DHCP_REQUEST+0x2e4>)
 801b206:	7819      	ldrb	r1, [r3, #0]
 801b208:	1813      	adds	r3, r2, r0
 801b20a:	460a      	mov	r2, r1
 801b20c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b210:	4b1c      	ldr	r3, [pc, #112]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b212:	681a      	ldr	r2, [r3, #0]
 801b214:	897b      	ldrh	r3, [r7, #10]
 801b216:	1c59      	adds	r1, r3, #1
 801b218:	8179      	strh	r1, [r7, #10]
 801b21a:	4618      	mov	r0, r3
 801b21c:	4b1c      	ldr	r3, [pc, #112]	; (801b290 <send_DHCP_REQUEST+0x2e4>)
 801b21e:	7859      	ldrb	r1, [r3, #1]
 801b220:	1813      	adds	r3, r2, r0
 801b222:	460a      	mov	r2, r1
 801b224:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b228:	4b16      	ldr	r3, [pc, #88]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b22a:	681a      	ldr	r2, [r3, #0]
 801b22c:	897b      	ldrh	r3, [r7, #10]
 801b22e:	1c59      	adds	r1, r3, #1
 801b230:	8179      	strh	r1, [r7, #10]
 801b232:	4618      	mov	r0, r3
 801b234:	4b16      	ldr	r3, [pc, #88]	; (801b290 <send_DHCP_REQUEST+0x2e4>)
 801b236:	7899      	ldrb	r1, [r3, #2]
 801b238:	1813      	adds	r3, r2, r0
 801b23a:	460a      	mov	r2, r1
 801b23c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b240:	4b10      	ldr	r3, [pc, #64]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b242:	681a      	ldr	r2, [r3, #0]
 801b244:	897b      	ldrh	r3, [r7, #10]
 801b246:	1c59      	adds	r1, r3, #1
 801b248:	8179      	strh	r1, [r7, #10]
 801b24a:	4618      	mov	r0, r3
 801b24c:	4b10      	ldr	r3, [pc, #64]	; (801b290 <send_DHCP_REQUEST+0x2e4>)
 801b24e:	78d9      	ldrb	r1, [r3, #3]
 801b250:	1813      	adds	r3, r2, r0
 801b252:	460a      	mov	r2, r1
 801b254:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801b258:	4b0a      	ldr	r3, [pc, #40]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b25a:	681a      	ldr	r2, [r3, #0]
 801b25c:	897b      	ldrh	r3, [r7, #10]
 801b25e:	1c59      	adds	r1, r3, #1
 801b260:	8179      	strh	r1, [r7, #10]
 801b262:	4413      	add	r3, r2
 801b264:	220c      	movs	r2, #12
 801b266:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801b26a:	4b06      	ldr	r3, [pc, #24]	; (801b284 <send_DHCP_REQUEST+0x2d8>)
 801b26c:	681a      	ldr	r2, [r3, #0]
 801b26e:	897b      	ldrh	r3, [r7, #10]
 801b270:	1c59      	adds	r1, r3, #1
 801b272:	8179      	strh	r1, [r7, #10]
 801b274:	4413      	add	r3, r2
 801b276:	2200      	movs	r2, #0
 801b278:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b27c:	2300      	movs	r3, #0
 801b27e:	60fb      	str	r3, [r7, #12]
 801b280:	e019      	b.n	801b2b6 <send_DHCP_REQUEST+0x30a>
 801b282:	bf00      	nop
 801b284:	200009d0 	.word	0x200009d0
 801b288:	200009d4 	.word	0x200009d4
 801b28c:	200009b4 	.word	0x200009b4
 801b290:	200009a8 	.word	0x200009a8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801b294:	4b86      	ldr	r3, [pc, #536]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	897b      	ldrh	r3, [r7, #10]
 801b29a:	1c59      	adds	r1, r3, #1
 801b29c:	8179      	strh	r1, [r7, #10]
 801b29e:	4618      	mov	r0, r3
 801b2a0:	4984      	ldr	r1, [pc, #528]	; (801b4b4 <send_DHCP_REQUEST+0x508>)
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	440b      	add	r3, r1
 801b2a6:	7819      	ldrb	r1, [r3, #0]
 801b2a8:	1813      	adds	r3, r2, r0
 801b2aa:	460a      	mov	r2, r1
 801b2ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	3301      	adds	r3, #1
 801b2b4:	60fb      	str	r3, [r7, #12]
 801b2b6:	4a7f      	ldr	r2, [pc, #508]	; (801b4b4 <send_DHCP_REQUEST+0x508>)
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	4413      	add	r3, r2
 801b2bc:	781b      	ldrb	r3, [r3, #0]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d1e8      	bne.n	801b294 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801b2c2:	4b7d      	ldr	r3, [pc, #500]	; (801b4b8 <send_DHCP_REQUEST+0x50c>)
 801b2c4:	78db      	ldrb	r3, [r3, #3]
 801b2c6:	091b      	lsrs	r3, r3, #4
 801b2c8:	b2da      	uxtb	r2, r3
 801b2ca:	4b79      	ldr	r3, [pc, #484]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b2cc:	681c      	ldr	r4, [r3, #0]
 801b2ce:	897b      	ldrh	r3, [r7, #10]
 801b2d0:	1c59      	adds	r1, r3, #1
 801b2d2:	8179      	strh	r1, [r7, #10]
 801b2d4:	461d      	mov	r5, r3
 801b2d6:	4610      	mov	r0, r2
 801b2d8:	f000 ff44 	bl	801c164 <NibbleToHex>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	461a      	mov	r2, r3
 801b2e0:	1963      	adds	r3, r4, r5
 801b2e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801b2e6:	4b74      	ldr	r3, [pc, #464]	; (801b4b8 <send_DHCP_REQUEST+0x50c>)
 801b2e8:	78da      	ldrb	r2, [r3, #3]
 801b2ea:	4b71      	ldr	r3, [pc, #452]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b2ec:	681c      	ldr	r4, [r3, #0]
 801b2ee:	897b      	ldrh	r3, [r7, #10]
 801b2f0:	1c59      	adds	r1, r3, #1
 801b2f2:	8179      	strh	r1, [r7, #10]
 801b2f4:	461d      	mov	r5, r3
 801b2f6:	4610      	mov	r0, r2
 801b2f8:	f000 ff34 	bl	801c164 <NibbleToHex>
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	461a      	mov	r2, r3
 801b300:	1963      	adds	r3, r4, r5
 801b302:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801b306:	4b6c      	ldr	r3, [pc, #432]	; (801b4b8 <send_DHCP_REQUEST+0x50c>)
 801b308:	791b      	ldrb	r3, [r3, #4]
 801b30a:	091b      	lsrs	r3, r3, #4
 801b30c:	b2da      	uxtb	r2, r3
 801b30e:	4b68      	ldr	r3, [pc, #416]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b310:	681c      	ldr	r4, [r3, #0]
 801b312:	897b      	ldrh	r3, [r7, #10]
 801b314:	1c59      	adds	r1, r3, #1
 801b316:	8179      	strh	r1, [r7, #10]
 801b318:	461d      	mov	r5, r3
 801b31a:	4610      	mov	r0, r2
 801b31c:	f000 ff22 	bl	801c164 <NibbleToHex>
 801b320:	4603      	mov	r3, r0
 801b322:	461a      	mov	r2, r3
 801b324:	1963      	adds	r3, r4, r5
 801b326:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801b32a:	4b63      	ldr	r3, [pc, #396]	; (801b4b8 <send_DHCP_REQUEST+0x50c>)
 801b32c:	791a      	ldrb	r2, [r3, #4]
 801b32e:	4b60      	ldr	r3, [pc, #384]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b330:	681c      	ldr	r4, [r3, #0]
 801b332:	897b      	ldrh	r3, [r7, #10]
 801b334:	1c59      	adds	r1, r3, #1
 801b336:	8179      	strh	r1, [r7, #10]
 801b338:	461d      	mov	r5, r3
 801b33a:	4610      	mov	r0, r2
 801b33c:	f000 ff12 	bl	801c164 <NibbleToHex>
 801b340:	4603      	mov	r3, r0
 801b342:	461a      	mov	r2, r3
 801b344:	1963      	adds	r3, r4, r5
 801b346:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801b34a:	4b5b      	ldr	r3, [pc, #364]	; (801b4b8 <send_DHCP_REQUEST+0x50c>)
 801b34c:	795b      	ldrb	r3, [r3, #5]
 801b34e:	091b      	lsrs	r3, r3, #4
 801b350:	b2da      	uxtb	r2, r3
 801b352:	4b57      	ldr	r3, [pc, #348]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b354:	681c      	ldr	r4, [r3, #0]
 801b356:	897b      	ldrh	r3, [r7, #10]
 801b358:	1c59      	adds	r1, r3, #1
 801b35a:	8179      	strh	r1, [r7, #10]
 801b35c:	461d      	mov	r5, r3
 801b35e:	4610      	mov	r0, r2
 801b360:	f000 ff00 	bl	801c164 <NibbleToHex>
 801b364:	4603      	mov	r3, r0
 801b366:	461a      	mov	r2, r3
 801b368:	1963      	adds	r3, r4, r5
 801b36a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801b36e:	4b52      	ldr	r3, [pc, #328]	; (801b4b8 <send_DHCP_REQUEST+0x50c>)
 801b370:	795a      	ldrb	r2, [r3, #5]
 801b372:	4b4f      	ldr	r3, [pc, #316]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b374:	681c      	ldr	r4, [r3, #0]
 801b376:	897b      	ldrh	r3, [r7, #10]
 801b378:	1c59      	adds	r1, r3, #1
 801b37a:	8179      	strh	r1, [r7, #10]
 801b37c:	461d      	mov	r5, r3
 801b37e:	4610      	mov	r0, r2
 801b380:	f000 fef0 	bl	801c164 <NibbleToHex>
 801b384:	4603      	mov	r3, r0
 801b386:	461a      	mov	r2, r3
 801b388:	1963      	adds	r3, r4, r5
 801b38a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	b2d9      	uxtb	r1, r3
 801b392:	4b47      	ldr	r3, [pc, #284]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b394:	681a      	ldr	r2, [r3, #0]
 801b396:	8978      	ldrh	r0, [r7, #10]
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	3307      	adds	r3, #7
 801b39c:	1ac3      	subs	r3, r0, r3
 801b39e:	3106      	adds	r1, #6
 801b3a0:	b2c9      	uxtb	r1, r1
 801b3a2:	4413      	add	r3, r2
 801b3a4:	460a      	mov	r2, r1
 801b3a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801b3aa:	4b41      	ldr	r3, [pc, #260]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b3ac:	681a      	ldr	r2, [r3, #0]
 801b3ae:	897b      	ldrh	r3, [r7, #10]
 801b3b0:	1c59      	adds	r1, r3, #1
 801b3b2:	8179      	strh	r1, [r7, #10]
 801b3b4:	4413      	add	r3, r2
 801b3b6:	2237      	movs	r2, #55	; 0x37
 801b3b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801b3bc:	4b3c      	ldr	r3, [pc, #240]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b3be:	681a      	ldr	r2, [r3, #0]
 801b3c0:	897b      	ldrh	r3, [r7, #10]
 801b3c2:	1c59      	adds	r1, r3, #1
 801b3c4:	8179      	strh	r1, [r7, #10]
 801b3c6:	4413      	add	r3, r2
 801b3c8:	2208      	movs	r2, #8
 801b3ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b3ce:	4b38      	ldr	r3, [pc, #224]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b3d0:	681a      	ldr	r2, [r3, #0]
 801b3d2:	897b      	ldrh	r3, [r7, #10]
 801b3d4:	1c59      	adds	r1, r3, #1
 801b3d6:	8179      	strh	r1, [r7, #10]
 801b3d8:	4413      	add	r3, r2
 801b3da:	2201      	movs	r2, #1
 801b3dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b3e0:	4b33      	ldr	r3, [pc, #204]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b3e2:	681a      	ldr	r2, [r3, #0]
 801b3e4:	897b      	ldrh	r3, [r7, #10]
 801b3e6:	1c59      	adds	r1, r3, #1
 801b3e8:	8179      	strh	r1, [r7, #10]
 801b3ea:	4413      	add	r3, r2
 801b3ec:	2203      	movs	r2, #3
 801b3ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b3f2:	4b2f      	ldr	r3, [pc, #188]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b3f4:	681a      	ldr	r2, [r3, #0]
 801b3f6:	897b      	ldrh	r3, [r7, #10]
 801b3f8:	1c59      	adds	r1, r3, #1
 801b3fa:	8179      	strh	r1, [r7, #10]
 801b3fc:	4413      	add	r3, r2
 801b3fe:	2206      	movs	r2, #6
 801b400:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b404:	4b2a      	ldr	r3, [pc, #168]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b406:	681a      	ldr	r2, [r3, #0]
 801b408:	897b      	ldrh	r3, [r7, #10]
 801b40a:	1c59      	adds	r1, r3, #1
 801b40c:	8179      	strh	r1, [r7, #10]
 801b40e:	4413      	add	r3, r2
 801b410:	220f      	movs	r2, #15
 801b412:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b416:	4b26      	ldr	r3, [pc, #152]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b418:	681a      	ldr	r2, [r3, #0]
 801b41a:	897b      	ldrh	r3, [r7, #10]
 801b41c:	1c59      	adds	r1, r3, #1
 801b41e:	8179      	strh	r1, [r7, #10]
 801b420:	4413      	add	r3, r2
 801b422:	223a      	movs	r2, #58	; 0x3a
 801b424:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b428:	4b21      	ldr	r3, [pc, #132]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b42a:	681a      	ldr	r2, [r3, #0]
 801b42c:	897b      	ldrh	r3, [r7, #10]
 801b42e:	1c59      	adds	r1, r3, #1
 801b430:	8179      	strh	r1, [r7, #10]
 801b432:	4413      	add	r3, r2
 801b434:	223b      	movs	r2, #59	; 0x3b
 801b436:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801b43a:	4b1d      	ldr	r3, [pc, #116]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b43c:	681a      	ldr	r2, [r3, #0]
 801b43e:	897b      	ldrh	r3, [r7, #10]
 801b440:	1c59      	adds	r1, r3, #1
 801b442:	8179      	strh	r1, [r7, #10]
 801b444:	4413      	add	r3, r2
 801b446:	221f      	movs	r2, #31
 801b448:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801b44c:	4b18      	ldr	r3, [pc, #96]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b44e:	681a      	ldr	r2, [r3, #0]
 801b450:	897b      	ldrh	r3, [r7, #10]
 801b452:	1c59      	adds	r1, r3, #1
 801b454:	8179      	strh	r1, [r7, #10]
 801b456:	4413      	add	r3, r2
 801b458:	2221      	movs	r2, #33	; 0x21
 801b45a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b45e:	4b14      	ldr	r3, [pc, #80]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b460:	681a      	ldr	r2, [r3, #0]
 801b462:	897b      	ldrh	r3, [r7, #10]
 801b464:	1c59      	adds	r1, r3, #1
 801b466:	8179      	strh	r1, [r7, #10]
 801b468:	4413      	add	r3, r2
 801b46a:	22ff      	movs	r2, #255	; 0xff
 801b46c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b470:	897b      	ldrh	r3, [r7, #10]
 801b472:	60fb      	str	r3, [r7, #12]
 801b474:	e009      	b.n	801b48a <send_DHCP_REQUEST+0x4de>
 801b476:	4b0e      	ldr	r3, [pc, #56]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b478:	681a      	ldr	r2, [r3, #0]
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	4413      	add	r3, r2
 801b47e:	33ec      	adds	r3, #236	; 0xec
 801b480:	2200      	movs	r2, #0
 801b482:	701a      	strb	r2, [r3, #0]
 801b484:	68fb      	ldr	r3, [r7, #12]
 801b486:	3301      	adds	r3, #1
 801b488:	60fb      	str	r3, [r7, #12]
 801b48a:	68fb      	ldr	r3, [r7, #12]
 801b48c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b490:	dbf1      	blt.n	801b476 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b492:	4b0a      	ldr	r3, [pc, #40]	; (801b4bc <send_DHCP_REQUEST+0x510>)
 801b494:	7818      	ldrb	r0, [r3, #0]
 801b496:	4b06      	ldr	r3, [pc, #24]	; (801b4b0 <send_DHCP_REQUEST+0x504>)
 801b498:	6819      	ldr	r1, [r3, #0]
 801b49a:	1d3b      	adds	r3, r7, #4
 801b49c:	2243      	movs	r2, #67	; 0x43
 801b49e:	9200      	str	r2, [sp, #0]
 801b4a0:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b4a4:	f7fe f972 	bl	801978c <sendto>

}
 801b4a8:	bf00      	nop
 801b4aa:	3710      	adds	r7, #16
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bdb0      	pop	{r4, r5, r7, pc}
 801b4b0:	200009d0 	.word	0x200009d0
 801b4b4:	200000f8 	.word	0x200000f8
 801b4b8:	200009d4 	.word	0x200009d4
 801b4bc:	200009a5 	.word	0x200009a5

0801b4c0 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b086      	sub	sp, #24
 801b4c4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801b4ca:	f7ff fab3 	bl	801aa34 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b4ce:	2304      	movs	r3, #4
 801b4d0:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b4d2:	4b9f      	ldr	r3, [pc, #636]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	330a      	adds	r3, #10
 801b4d8:	2200      	movs	r2, #0
 801b4da:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b4dc:	4b9c      	ldr	r3, [pc, #624]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	330a      	adds	r3, #10
 801b4e2:	3301      	adds	r3, #1
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b4e8:	4b99      	ldr	r3, [pc, #612]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	897b      	ldrh	r3, [r7, #10]
 801b4ee:	1c59      	adds	r1, r3, #1
 801b4f0:	8179      	strh	r1, [r7, #10]
 801b4f2:	4413      	add	r3, r2
 801b4f4:	2235      	movs	r2, #53	; 0x35
 801b4f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b4fa:	4b95      	ldr	r3, [pc, #596]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b4fc:	681a      	ldr	r2, [r3, #0]
 801b4fe:	897b      	ldrh	r3, [r7, #10]
 801b500:	1c59      	adds	r1, r3, #1
 801b502:	8179      	strh	r1, [r7, #10]
 801b504:	4413      	add	r3, r2
 801b506:	2201      	movs	r2, #1
 801b508:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801b50c:	4b90      	ldr	r3, [pc, #576]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b50e:	681a      	ldr	r2, [r3, #0]
 801b510:	897b      	ldrh	r3, [r7, #10]
 801b512:	1c59      	adds	r1, r3, #1
 801b514:	8179      	strh	r1, [r7, #10]
 801b516:	4413      	add	r3, r2
 801b518:	2204      	movs	r2, #4
 801b51a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b51e:	4b8c      	ldr	r3, [pc, #560]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b520:	681a      	ldr	r2, [r3, #0]
 801b522:	897b      	ldrh	r3, [r7, #10]
 801b524:	1c59      	adds	r1, r3, #1
 801b526:	8179      	strh	r1, [r7, #10]
 801b528:	4413      	add	r3, r2
 801b52a:	223d      	movs	r2, #61	; 0x3d
 801b52c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b530:	4b87      	ldr	r3, [pc, #540]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b532:	681a      	ldr	r2, [r3, #0]
 801b534:	897b      	ldrh	r3, [r7, #10]
 801b536:	1c59      	adds	r1, r3, #1
 801b538:	8179      	strh	r1, [r7, #10]
 801b53a:	4413      	add	r3, r2
 801b53c:	2207      	movs	r2, #7
 801b53e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b542:	4b83      	ldr	r3, [pc, #524]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b544:	681a      	ldr	r2, [r3, #0]
 801b546:	897b      	ldrh	r3, [r7, #10]
 801b548:	1c59      	adds	r1, r3, #1
 801b54a:	8179      	strh	r1, [r7, #10]
 801b54c:	4413      	add	r3, r2
 801b54e:	2201      	movs	r2, #1
 801b550:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b554:	4b7e      	ldr	r3, [pc, #504]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b556:	681a      	ldr	r2, [r3, #0]
 801b558:	897b      	ldrh	r3, [r7, #10]
 801b55a:	1c59      	adds	r1, r3, #1
 801b55c:	8179      	strh	r1, [r7, #10]
 801b55e:	4618      	mov	r0, r3
 801b560:	4b7c      	ldr	r3, [pc, #496]	; (801b754 <send_DHCP_DECLINE+0x294>)
 801b562:	7819      	ldrb	r1, [r3, #0]
 801b564:	1813      	adds	r3, r2, r0
 801b566:	460a      	mov	r2, r1
 801b568:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b56c:	4b78      	ldr	r3, [pc, #480]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b56e:	681a      	ldr	r2, [r3, #0]
 801b570:	897b      	ldrh	r3, [r7, #10]
 801b572:	1c59      	adds	r1, r3, #1
 801b574:	8179      	strh	r1, [r7, #10]
 801b576:	4618      	mov	r0, r3
 801b578:	4b76      	ldr	r3, [pc, #472]	; (801b754 <send_DHCP_DECLINE+0x294>)
 801b57a:	7859      	ldrb	r1, [r3, #1]
 801b57c:	1813      	adds	r3, r2, r0
 801b57e:	460a      	mov	r2, r1
 801b580:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b584:	4b72      	ldr	r3, [pc, #456]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b586:	681a      	ldr	r2, [r3, #0]
 801b588:	897b      	ldrh	r3, [r7, #10]
 801b58a:	1c59      	adds	r1, r3, #1
 801b58c:	8179      	strh	r1, [r7, #10]
 801b58e:	4618      	mov	r0, r3
 801b590:	4b70      	ldr	r3, [pc, #448]	; (801b754 <send_DHCP_DECLINE+0x294>)
 801b592:	7899      	ldrb	r1, [r3, #2]
 801b594:	1813      	adds	r3, r2, r0
 801b596:	460a      	mov	r2, r1
 801b598:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b59c:	4b6c      	ldr	r3, [pc, #432]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b59e:	681a      	ldr	r2, [r3, #0]
 801b5a0:	897b      	ldrh	r3, [r7, #10]
 801b5a2:	1c59      	adds	r1, r3, #1
 801b5a4:	8179      	strh	r1, [r7, #10]
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	4b6a      	ldr	r3, [pc, #424]	; (801b754 <send_DHCP_DECLINE+0x294>)
 801b5aa:	78d9      	ldrb	r1, [r3, #3]
 801b5ac:	1813      	adds	r3, r2, r0
 801b5ae:	460a      	mov	r2, r1
 801b5b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b5b4:	4b66      	ldr	r3, [pc, #408]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b5b6:	681a      	ldr	r2, [r3, #0]
 801b5b8:	897b      	ldrh	r3, [r7, #10]
 801b5ba:	1c59      	adds	r1, r3, #1
 801b5bc:	8179      	strh	r1, [r7, #10]
 801b5be:	4618      	mov	r0, r3
 801b5c0:	4b64      	ldr	r3, [pc, #400]	; (801b754 <send_DHCP_DECLINE+0x294>)
 801b5c2:	7919      	ldrb	r1, [r3, #4]
 801b5c4:	1813      	adds	r3, r2, r0
 801b5c6:	460a      	mov	r2, r1
 801b5c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b5cc:	4b60      	ldr	r3, [pc, #384]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b5ce:	681a      	ldr	r2, [r3, #0]
 801b5d0:	897b      	ldrh	r3, [r7, #10]
 801b5d2:	1c59      	adds	r1, r3, #1
 801b5d4:	8179      	strh	r1, [r7, #10]
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	4b5e      	ldr	r3, [pc, #376]	; (801b754 <send_DHCP_DECLINE+0x294>)
 801b5da:	7959      	ldrb	r1, [r3, #5]
 801b5dc:	1813      	adds	r3, r2, r0
 801b5de:	460a      	mov	r2, r1
 801b5e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b5e4:	4b5a      	ldr	r3, [pc, #360]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b5e6:	681a      	ldr	r2, [r3, #0]
 801b5e8:	897b      	ldrh	r3, [r7, #10]
 801b5ea:	1c59      	adds	r1, r3, #1
 801b5ec:	8179      	strh	r1, [r7, #10]
 801b5ee:	4413      	add	r3, r2
 801b5f0:	2232      	movs	r2, #50	; 0x32
 801b5f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b5f6:	4b56      	ldr	r3, [pc, #344]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b5f8:	681a      	ldr	r2, [r3, #0]
 801b5fa:	897b      	ldrh	r3, [r7, #10]
 801b5fc:	1c59      	adds	r1, r3, #1
 801b5fe:	8179      	strh	r1, [r7, #10]
 801b600:	4413      	add	r3, r2
 801b602:	2204      	movs	r2, #4
 801b604:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b608:	4b51      	ldr	r3, [pc, #324]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b60a:	681a      	ldr	r2, [r3, #0]
 801b60c:	897b      	ldrh	r3, [r7, #10]
 801b60e:	1c59      	adds	r1, r3, #1
 801b610:	8179      	strh	r1, [r7, #10]
 801b612:	4618      	mov	r0, r3
 801b614:	4b50      	ldr	r3, [pc, #320]	; (801b758 <send_DHCP_DECLINE+0x298>)
 801b616:	7819      	ldrb	r1, [r3, #0]
 801b618:	1813      	adds	r3, r2, r0
 801b61a:	460a      	mov	r2, r1
 801b61c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b620:	4b4b      	ldr	r3, [pc, #300]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b622:	681a      	ldr	r2, [r3, #0]
 801b624:	897b      	ldrh	r3, [r7, #10]
 801b626:	1c59      	adds	r1, r3, #1
 801b628:	8179      	strh	r1, [r7, #10]
 801b62a:	4618      	mov	r0, r3
 801b62c:	4b4a      	ldr	r3, [pc, #296]	; (801b758 <send_DHCP_DECLINE+0x298>)
 801b62e:	7859      	ldrb	r1, [r3, #1]
 801b630:	1813      	adds	r3, r2, r0
 801b632:	460a      	mov	r2, r1
 801b634:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b638:	4b45      	ldr	r3, [pc, #276]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b63a:	681a      	ldr	r2, [r3, #0]
 801b63c:	897b      	ldrh	r3, [r7, #10]
 801b63e:	1c59      	adds	r1, r3, #1
 801b640:	8179      	strh	r1, [r7, #10]
 801b642:	4618      	mov	r0, r3
 801b644:	4b44      	ldr	r3, [pc, #272]	; (801b758 <send_DHCP_DECLINE+0x298>)
 801b646:	7899      	ldrb	r1, [r3, #2]
 801b648:	1813      	adds	r3, r2, r0
 801b64a:	460a      	mov	r2, r1
 801b64c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b650:	4b3f      	ldr	r3, [pc, #252]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b652:	681a      	ldr	r2, [r3, #0]
 801b654:	897b      	ldrh	r3, [r7, #10]
 801b656:	1c59      	adds	r1, r3, #1
 801b658:	8179      	strh	r1, [r7, #10]
 801b65a:	4618      	mov	r0, r3
 801b65c:	4b3e      	ldr	r3, [pc, #248]	; (801b758 <send_DHCP_DECLINE+0x298>)
 801b65e:	78d9      	ldrb	r1, [r3, #3]
 801b660:	1813      	adds	r3, r2, r0
 801b662:	460a      	mov	r2, r1
 801b664:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b668:	4b39      	ldr	r3, [pc, #228]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b66a:	681a      	ldr	r2, [r3, #0]
 801b66c:	897b      	ldrh	r3, [r7, #10]
 801b66e:	1c59      	adds	r1, r3, #1
 801b670:	8179      	strh	r1, [r7, #10]
 801b672:	4413      	add	r3, r2
 801b674:	2236      	movs	r2, #54	; 0x36
 801b676:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b67a:	4b35      	ldr	r3, [pc, #212]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b67c:	681a      	ldr	r2, [r3, #0]
 801b67e:	897b      	ldrh	r3, [r7, #10]
 801b680:	1c59      	adds	r1, r3, #1
 801b682:	8179      	strh	r1, [r7, #10]
 801b684:	4413      	add	r3, r2
 801b686:	2204      	movs	r2, #4
 801b688:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b68c:	4b30      	ldr	r3, [pc, #192]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b68e:	681a      	ldr	r2, [r3, #0]
 801b690:	897b      	ldrh	r3, [r7, #10]
 801b692:	1c59      	adds	r1, r3, #1
 801b694:	8179      	strh	r1, [r7, #10]
 801b696:	4618      	mov	r0, r3
 801b698:	4b30      	ldr	r3, [pc, #192]	; (801b75c <send_DHCP_DECLINE+0x29c>)
 801b69a:	7819      	ldrb	r1, [r3, #0]
 801b69c:	1813      	adds	r3, r2, r0
 801b69e:	460a      	mov	r2, r1
 801b6a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b6a4:	4b2a      	ldr	r3, [pc, #168]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b6a6:	681a      	ldr	r2, [r3, #0]
 801b6a8:	897b      	ldrh	r3, [r7, #10]
 801b6aa:	1c59      	adds	r1, r3, #1
 801b6ac:	8179      	strh	r1, [r7, #10]
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	4b2a      	ldr	r3, [pc, #168]	; (801b75c <send_DHCP_DECLINE+0x29c>)
 801b6b2:	7859      	ldrb	r1, [r3, #1]
 801b6b4:	1813      	adds	r3, r2, r0
 801b6b6:	460a      	mov	r2, r1
 801b6b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b6bc:	4b24      	ldr	r3, [pc, #144]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b6be:	681a      	ldr	r2, [r3, #0]
 801b6c0:	897b      	ldrh	r3, [r7, #10]
 801b6c2:	1c59      	adds	r1, r3, #1
 801b6c4:	8179      	strh	r1, [r7, #10]
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	4b24      	ldr	r3, [pc, #144]	; (801b75c <send_DHCP_DECLINE+0x29c>)
 801b6ca:	7899      	ldrb	r1, [r3, #2]
 801b6cc:	1813      	adds	r3, r2, r0
 801b6ce:	460a      	mov	r2, r1
 801b6d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b6d4:	4b1e      	ldr	r3, [pc, #120]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b6d6:	681a      	ldr	r2, [r3, #0]
 801b6d8:	897b      	ldrh	r3, [r7, #10]
 801b6da:	1c59      	adds	r1, r3, #1
 801b6dc:	8179      	strh	r1, [r7, #10]
 801b6de:	4618      	mov	r0, r3
 801b6e0:	4b1e      	ldr	r3, [pc, #120]	; (801b75c <send_DHCP_DECLINE+0x29c>)
 801b6e2:	78d9      	ldrb	r1, [r3, #3]
 801b6e4:	1813      	adds	r3, r2, r0
 801b6e6:	460a      	mov	r2, r1
 801b6e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b6ec:	4b18      	ldr	r3, [pc, #96]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b6ee:	681a      	ldr	r2, [r3, #0]
 801b6f0:	897b      	ldrh	r3, [r7, #10]
 801b6f2:	1c59      	adds	r1, r3, #1
 801b6f4:	8179      	strh	r1, [r7, #10]
 801b6f6:	4413      	add	r3, r2
 801b6f8:	22ff      	movs	r2, #255	; 0xff
 801b6fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b6fe:	897b      	ldrh	r3, [r7, #10]
 801b700:	60fb      	str	r3, [r7, #12]
 801b702:	e009      	b.n	801b718 <send_DHCP_DECLINE+0x258>
 801b704:	4b12      	ldr	r3, [pc, #72]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b706:	681a      	ldr	r2, [r3, #0]
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	4413      	add	r3, r2
 801b70c:	33ec      	adds	r3, #236	; 0xec
 801b70e:	2200      	movs	r2, #0
 801b710:	701a      	strb	r2, [r3, #0]
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	3301      	adds	r3, #1
 801b716:	60fb      	str	r3, [r7, #12]
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b71e:	dbf1      	blt.n	801b704 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b720:	23ff      	movs	r3, #255	; 0xff
 801b722:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b724:	23ff      	movs	r3, #255	; 0xff
 801b726:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b728:	23ff      	movs	r3, #255	; 0xff
 801b72a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b72c:	23ff      	movs	r3, #255	; 0xff
 801b72e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b730:	4b0b      	ldr	r3, [pc, #44]	; (801b760 <send_DHCP_DECLINE+0x2a0>)
 801b732:	7818      	ldrb	r0, [r3, #0]
 801b734:	4b06      	ldr	r3, [pc, #24]	; (801b750 <send_DHCP_DECLINE+0x290>)
 801b736:	6819      	ldr	r1, [r3, #0]
 801b738:	1d3b      	adds	r3, r7, #4
 801b73a:	2243      	movs	r2, #67	; 0x43
 801b73c:	9200      	str	r2, [sp, #0]
 801b73e:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b742:	f7fe f823 	bl	801978c <sendto>
}
 801b746:	bf00      	nop
 801b748:	3710      	adds	r7, #16
 801b74a:	46bd      	mov	sp, r7
 801b74c:	bd80      	pop	{r7, pc}
 801b74e:	bf00      	nop
 801b750:	200009d0 	.word	0x200009d0
 801b754:	200009d4 	.word	0x200009d4
 801b758:	200009b4 	.word	0x200009b4
 801b75c:	200009a8 	.word	0x200009a8
 801b760:	200009a5 	.word	0x200009a5

0801b764 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b764:	b590      	push	{r4, r7, lr}
 801b766:	b089      	sub	sp, #36	; 0x24
 801b768:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b76a:	2300      	movs	r3, #0
 801b76c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b76e:	4ba1      	ldr	r3, [pc, #644]	; (801b9f4 <parseDHCPMSG+0x290>)
 801b770:	781b      	ldrb	r3, [r3, #0]
 801b772:	4618      	mov	r0, r3
 801b774:	f7fd f9e1 	bl	8018b3a <getSn_RX_RSR>
 801b778:	4603      	mov	r3, r0
 801b77a:	823b      	strh	r3, [r7, #16]
 801b77c:	8a3b      	ldrh	r3, [r7, #16]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d011      	beq.n	801b7a6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b782:	4b9c      	ldr	r3, [pc, #624]	; (801b9f4 <parseDHCPMSG+0x290>)
 801b784:	7818      	ldrb	r0, [r3, #0]
 801b786:	4b9c      	ldr	r3, [pc, #624]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b788:	6819      	ldr	r1, [r3, #0]
 801b78a:	1d3c      	adds	r4, r7, #4
 801b78c:	8a3a      	ldrh	r2, [r7, #16]
 801b78e:	1cbb      	adds	r3, r7, #2
 801b790:	9300      	str	r3, [sp, #0]
 801b792:	4623      	mov	r3, r4
 801b794:	f7fe f930 	bl	80199f8 <recvfrom>
 801b798:	4603      	mov	r3, r0
 801b79a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b79c:	887b      	ldrh	r3, [r7, #2]
 801b79e:	2b43      	cmp	r3, #67	; 0x43
 801b7a0:	f040 81ed 	bne.w	801bb7e <parseDHCPMSG+0x41a>
 801b7a4:	e001      	b.n	801b7aa <parseDHCPMSG+0x46>
   else return 0;
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	e1eb      	b.n	801bb82 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b7aa:	4b93      	ldr	r3, [pc, #588]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	7f1a      	ldrb	r2, [r3, #28]
 801b7b0:	4b92      	ldr	r3, [pc, #584]	; (801b9fc <parseDHCPMSG+0x298>)
 801b7b2:	781b      	ldrb	r3, [r3, #0]
 801b7b4:	429a      	cmp	r2, r3
 801b7b6:	d124      	bne.n	801b802 <parseDHCPMSG+0x9e>
 801b7b8:	4b8f      	ldr	r3, [pc, #572]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	7f5a      	ldrb	r2, [r3, #29]
 801b7be:	4b8f      	ldr	r3, [pc, #572]	; (801b9fc <parseDHCPMSG+0x298>)
 801b7c0:	785b      	ldrb	r3, [r3, #1]
 801b7c2:	429a      	cmp	r2, r3
 801b7c4:	d11d      	bne.n	801b802 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b7c6:	4b8c      	ldr	r3, [pc, #560]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	7f9a      	ldrb	r2, [r3, #30]
 801b7cc:	4b8b      	ldr	r3, [pc, #556]	; (801b9fc <parseDHCPMSG+0x298>)
 801b7ce:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b7d0:	429a      	cmp	r2, r3
 801b7d2:	d116      	bne.n	801b802 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b7d4:	4b88      	ldr	r3, [pc, #544]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	7fda      	ldrb	r2, [r3, #31]
 801b7da:	4b88      	ldr	r3, [pc, #544]	; (801b9fc <parseDHCPMSG+0x298>)
 801b7dc:	78db      	ldrb	r3, [r3, #3]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	d10f      	bne.n	801b802 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b7e2:	4b85      	ldr	r3, [pc, #532]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b7ea:	4b84      	ldr	r3, [pc, #528]	; (801b9fc <parseDHCPMSG+0x298>)
 801b7ec:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b7ee:	429a      	cmp	r2, r3
 801b7f0:	d107      	bne.n	801b802 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b7f2:	4b81      	ldr	r3, [pc, #516]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b7fa:	4b80      	ldr	r3, [pc, #512]	; (801b9fc <parseDHCPMSG+0x298>)
 801b7fc:	795b      	ldrb	r3, [r3, #5]
 801b7fe:	429a      	cmp	r2, r3
 801b800:	d001      	beq.n	801b806 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b802:	2300      	movs	r3, #0
 801b804:	e1bd      	b.n	801bb82 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b806:	4b7e      	ldr	r3, [pc, #504]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b808:	781b      	ldrb	r3, [r3, #0]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d10b      	bne.n	801b826 <parseDHCPMSG+0xc2>
 801b80e:	4b7c      	ldr	r3, [pc, #496]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b810:	785b      	ldrb	r3, [r3, #1]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d107      	bne.n	801b826 <parseDHCPMSG+0xc2>
 801b816:	4b7a      	ldr	r3, [pc, #488]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b818:	789b      	ldrb	r3, [r3, #2]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d103      	bne.n	801b826 <parseDHCPMSG+0xc2>
 801b81e:	4b78      	ldr	r3, [pc, #480]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b820:	78db      	ldrb	r3, [r3, #3]
 801b822:	2b00      	cmp	r3, #0
 801b824:	d029      	beq.n	801b87a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b826:	793a      	ldrb	r2, [r7, #4]
 801b828:	4b75      	ldr	r3, [pc, #468]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	429a      	cmp	r2, r3
 801b82e:	d10e      	bne.n	801b84e <parseDHCPMSG+0xea>
 801b830:	797a      	ldrb	r2, [r7, #5]
 801b832:	4b73      	ldr	r3, [pc, #460]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b834:	785b      	ldrb	r3, [r3, #1]
 801b836:	429a      	cmp	r2, r3
 801b838:	d109      	bne.n	801b84e <parseDHCPMSG+0xea>
 801b83a:	79ba      	ldrb	r2, [r7, #6]
 801b83c:	4b70      	ldr	r3, [pc, #448]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b83e:	789b      	ldrb	r3, [r3, #2]
 801b840:	429a      	cmp	r2, r3
 801b842:	d104      	bne.n	801b84e <parseDHCPMSG+0xea>
 801b844:	79fa      	ldrb	r2, [r7, #7]
 801b846:	4b6e      	ldr	r3, [pc, #440]	; (801ba00 <parseDHCPMSG+0x29c>)
 801b848:	78db      	ldrb	r3, [r3, #3]
 801b84a:	429a      	cmp	r2, r3
 801b84c:	d015      	beq.n	801b87a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b84e:	793a      	ldrb	r2, [r7, #4]
 801b850:	4b6c      	ldr	r3, [pc, #432]	; (801ba04 <parseDHCPMSG+0x2a0>)
 801b852:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b854:	429a      	cmp	r2, r3
 801b856:	d10e      	bne.n	801b876 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b858:	797a      	ldrb	r2, [r7, #5]
 801b85a:	4b6a      	ldr	r3, [pc, #424]	; (801ba04 <parseDHCPMSG+0x2a0>)
 801b85c:	785b      	ldrb	r3, [r3, #1]
 801b85e:	429a      	cmp	r2, r3
 801b860:	d109      	bne.n	801b876 <parseDHCPMSG+0x112>
 801b862:	79ba      	ldrb	r2, [r7, #6]
 801b864:	4b67      	ldr	r3, [pc, #412]	; (801ba04 <parseDHCPMSG+0x2a0>)
 801b866:	789b      	ldrb	r3, [r3, #2]
 801b868:	429a      	cmp	r2, r3
 801b86a:	d104      	bne.n	801b876 <parseDHCPMSG+0x112>
 801b86c:	79fa      	ldrb	r2, [r7, #7]
 801b86e:	4b65      	ldr	r3, [pc, #404]	; (801ba04 <parseDHCPMSG+0x2a0>)
 801b870:	78db      	ldrb	r3, [r3, #3]
 801b872:	429a      	cmp	r2, r3
 801b874:	d001      	beq.n	801b87a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b876:	2300      	movs	r3, #0
 801b878:	e183      	b.n	801bb82 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b87a:	4b5f      	ldr	r3, [pc, #380]	; (801b9f8 <parseDHCPMSG+0x294>)
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b880:	697b      	ldr	r3, [r7, #20]
 801b882:	33f0      	adds	r3, #240	; 0xf0
 801b884:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b886:	8a3b      	ldrh	r3, [r7, #16]
 801b888:	3bf0      	subs	r3, #240	; 0xf0
 801b88a:	697a      	ldr	r2, [r7, #20]
 801b88c:	4413      	add	r3, r2
 801b88e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b890:	e170      	b.n	801bb74 <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b892:	697b      	ldr	r3, [r7, #20]
 801b894:	781b      	ldrb	r3, [r3, #0]
 801b896:	2b36      	cmp	r3, #54	; 0x36
 801b898:	dc76      	bgt.n	801b988 <parseDHCPMSG+0x224>
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	f2c0 815d 	blt.w	801bb5a <parseDHCPMSG+0x3f6>
 801b8a0:	2b36      	cmp	r3, #54	; 0x36
 801b8a2:	f200 815a 	bhi.w	801bb5a <parseDHCPMSG+0x3f6>
 801b8a6:	a201      	add	r2, pc, #4	; (adr r2, 801b8ac <parseDHCPMSG+0x148>)
 801b8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8ac:	0801b995 	.word	0x0801b995
 801b8b0:	0801b9b5 	.word	0x0801b9b5
 801b8b4:	0801bb5b 	.word	0x0801bb5b
 801b8b8:	0801ba0d 	.word	0x0801ba0d
 801b8bc:	0801bb5b 	.word	0x0801bb5b
 801b8c0:	0801bb5b 	.word	0x0801bb5b
 801b8c4:	0801ba59 	.word	0x0801ba59
 801b8c8:	0801bb5b 	.word	0x0801bb5b
 801b8cc:	0801bb5b 	.word	0x0801bb5b
 801b8d0:	0801bb5b 	.word	0x0801bb5b
 801b8d4:	0801bb5b 	.word	0x0801bb5b
 801b8d8:	0801bb5b 	.word	0x0801bb5b
 801b8dc:	0801bb5b 	.word	0x0801bb5b
 801b8e0:	0801bb5b 	.word	0x0801bb5b
 801b8e4:	0801bb5b 	.word	0x0801bb5b
 801b8e8:	0801bb5b 	.word	0x0801bb5b
 801b8ec:	0801bb5b 	.word	0x0801bb5b
 801b8f0:	0801bb5b 	.word	0x0801bb5b
 801b8f4:	0801bb5b 	.word	0x0801bb5b
 801b8f8:	0801bb5b 	.word	0x0801bb5b
 801b8fc:	0801bb5b 	.word	0x0801bb5b
 801b900:	0801bb5b 	.word	0x0801bb5b
 801b904:	0801bb5b 	.word	0x0801bb5b
 801b908:	0801bb5b 	.word	0x0801bb5b
 801b90c:	0801bb5b 	.word	0x0801bb5b
 801b910:	0801bb5b 	.word	0x0801bb5b
 801b914:	0801bb5b 	.word	0x0801bb5b
 801b918:	0801bb5b 	.word	0x0801bb5b
 801b91c:	0801bb5b 	.word	0x0801bb5b
 801b920:	0801bb5b 	.word	0x0801bb5b
 801b924:	0801bb5b 	.word	0x0801bb5b
 801b928:	0801bb5b 	.word	0x0801bb5b
 801b92c:	0801bb5b 	.word	0x0801bb5b
 801b930:	0801bb5b 	.word	0x0801bb5b
 801b934:	0801bb5b 	.word	0x0801bb5b
 801b938:	0801bb5b 	.word	0x0801bb5b
 801b93c:	0801bb5b 	.word	0x0801bb5b
 801b940:	0801bb5b 	.word	0x0801bb5b
 801b944:	0801bb5b 	.word	0x0801bb5b
 801b948:	0801bb5b 	.word	0x0801bb5b
 801b94c:	0801bb5b 	.word	0x0801bb5b
 801b950:	0801bb5b 	.word	0x0801bb5b
 801b954:	0801bb5b 	.word	0x0801bb5b
 801b958:	0801bb5b 	.word	0x0801bb5b
 801b95c:	0801bb5b 	.word	0x0801bb5b
 801b960:	0801bb5b 	.word	0x0801bb5b
 801b964:	0801bb5b 	.word	0x0801bb5b
 801b968:	0801bb5b 	.word	0x0801bb5b
 801b96c:	0801bb5b 	.word	0x0801bb5b
 801b970:	0801bb5b 	.word	0x0801bb5b
 801b974:	0801bb5b 	.word	0x0801bb5b
 801b978:	0801baa5 	.word	0x0801baa5
 801b97c:	0801bb5b 	.word	0x0801bb5b
 801b980:	0801b99d 	.word	0x0801b99d
 801b984:	0801bb01 	.word	0x0801bb01
 801b988:	2bff      	cmp	r3, #255	; 0xff
 801b98a:	f040 80e6 	bne.w	801bb5a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	617b      	str	r3, [r7, #20]
   				break;
 801b992:	e0ef      	b.n	801bb74 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801b994:	697b      	ldr	r3, [r7, #20]
 801b996:	3301      	adds	r3, #1
 801b998:	617b      	str	r3, [r7, #20]
   				break;
 801b99a:	e0eb      	b.n	801bb74 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	3301      	adds	r3, #1
 801b9a0:	617b      	str	r3, [r7, #20]
   				p++;
 801b9a2:	697b      	ldr	r3, [r7, #20]
 801b9a4:	3301      	adds	r3, #1
 801b9a6:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801b9a8:	697b      	ldr	r3, [r7, #20]
 801b9aa:	1c5a      	adds	r2, r3, #1
 801b9ac:	617a      	str	r2, [r7, #20]
 801b9ae:	781b      	ldrb	r3, [r3, #0]
 801b9b0:	74fb      	strb	r3, [r7, #19]
   				break;
 801b9b2:	e0df      	b.n	801bb74 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801b9b4:	697b      	ldr	r3, [r7, #20]
 801b9b6:	3301      	adds	r3, #1
 801b9b8:	617b      	str	r3, [r7, #20]
   				p++;
 801b9ba:	697b      	ldr	r3, [r7, #20]
 801b9bc:	3301      	adds	r3, #1
 801b9be:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	1c5a      	adds	r2, r3, #1
 801b9c4:	617a      	str	r2, [r7, #20]
 801b9c6:	781a      	ldrb	r2, [r3, #0]
 801b9c8:	4b0f      	ldr	r3, [pc, #60]	; (801ba08 <parseDHCPMSG+0x2a4>)
 801b9ca:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801b9cc:	697b      	ldr	r3, [r7, #20]
 801b9ce:	1c5a      	adds	r2, r3, #1
 801b9d0:	617a      	str	r2, [r7, #20]
 801b9d2:	781a      	ldrb	r2, [r3, #0]
 801b9d4:	4b0c      	ldr	r3, [pc, #48]	; (801ba08 <parseDHCPMSG+0x2a4>)
 801b9d6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801b9d8:	697b      	ldr	r3, [r7, #20]
 801b9da:	1c5a      	adds	r2, r3, #1
 801b9dc:	617a      	str	r2, [r7, #20]
 801b9de:	781a      	ldrb	r2, [r3, #0]
 801b9e0:	4b09      	ldr	r3, [pc, #36]	; (801ba08 <parseDHCPMSG+0x2a4>)
 801b9e2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801b9e4:	697b      	ldr	r3, [r7, #20]
 801b9e6:	1c5a      	adds	r2, r3, #1
 801b9e8:	617a      	str	r2, [r7, #20]
 801b9ea:	781a      	ldrb	r2, [r3, #0]
 801b9ec:	4b06      	ldr	r3, [pc, #24]	; (801ba08 <parseDHCPMSG+0x2a4>)
 801b9ee:	70da      	strb	r2, [r3, #3]
   				break;
 801b9f0:	e0c0      	b.n	801bb74 <parseDHCPMSG+0x410>
 801b9f2:	bf00      	nop
 801b9f4:	200009a5 	.word	0x200009a5
 801b9f8:	200009d0 	.word	0x200009d0
 801b9fc:	200009d4 	.word	0x200009d4
 801ba00:	200009a8 	.word	0x200009a8
 801ba04:	200009ac 	.word	0x200009ac
 801ba08:	200009bc 	.word	0x200009bc
   			case routersOnSubnet :
   				p++;
 801ba0c:	697b      	ldr	r3, [r7, #20]
 801ba0e:	3301      	adds	r3, #1
 801ba10:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801ba12:	697b      	ldr	r3, [r7, #20]
 801ba14:	1c5a      	adds	r2, r3, #1
 801ba16:	617a      	str	r2, [r7, #20]
 801ba18:	781b      	ldrb	r3, [r3, #0]
 801ba1a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801ba1c:	697b      	ldr	r3, [r7, #20]
 801ba1e:	1c5a      	adds	r2, r3, #1
 801ba20:	617a      	str	r2, [r7, #20]
 801ba22:	781a      	ldrb	r2, [r3, #0]
 801ba24:	4b59      	ldr	r3, [pc, #356]	; (801bb8c <parseDHCPMSG+0x428>)
 801ba26:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801ba28:	697b      	ldr	r3, [r7, #20]
 801ba2a:	1c5a      	adds	r2, r3, #1
 801ba2c:	617a      	str	r2, [r7, #20]
 801ba2e:	781a      	ldrb	r2, [r3, #0]
 801ba30:	4b56      	ldr	r3, [pc, #344]	; (801bb8c <parseDHCPMSG+0x428>)
 801ba32:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801ba34:	697b      	ldr	r3, [r7, #20]
 801ba36:	1c5a      	adds	r2, r3, #1
 801ba38:	617a      	str	r2, [r7, #20]
 801ba3a:	781a      	ldrb	r2, [r3, #0]
 801ba3c:	4b53      	ldr	r3, [pc, #332]	; (801bb8c <parseDHCPMSG+0x428>)
 801ba3e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801ba40:	697b      	ldr	r3, [r7, #20]
 801ba42:	1c5a      	adds	r2, r3, #1
 801ba44:	617a      	str	r2, [r7, #20]
 801ba46:	781a      	ldrb	r2, [r3, #0]
 801ba48:	4b50      	ldr	r3, [pc, #320]	; (801bb8c <parseDHCPMSG+0x428>)
 801ba4a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801ba4c:	7afb      	ldrb	r3, [r7, #11]
 801ba4e:	3b04      	subs	r3, #4
 801ba50:	697a      	ldr	r2, [r7, #20]
 801ba52:	4413      	add	r3, r2
 801ba54:	617b      	str	r3, [r7, #20]
   				break;
 801ba56:	e08d      	b.n	801bb74 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	3301      	adds	r3, #1
 801ba5c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801ba5e:	697b      	ldr	r3, [r7, #20]
 801ba60:	1c5a      	adds	r2, r3, #1
 801ba62:	617a      	str	r2, [r7, #20]
 801ba64:	781b      	ldrb	r3, [r3, #0]
 801ba66:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801ba68:	697b      	ldr	r3, [r7, #20]
 801ba6a:	1c5a      	adds	r2, r3, #1
 801ba6c:	617a      	str	r2, [r7, #20]
 801ba6e:	781a      	ldrb	r2, [r3, #0]
 801ba70:	4b47      	ldr	r3, [pc, #284]	; (801bb90 <parseDHCPMSG+0x42c>)
 801ba72:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801ba74:	697b      	ldr	r3, [r7, #20]
 801ba76:	1c5a      	adds	r2, r3, #1
 801ba78:	617a      	str	r2, [r7, #20]
 801ba7a:	781a      	ldrb	r2, [r3, #0]
 801ba7c:	4b44      	ldr	r3, [pc, #272]	; (801bb90 <parseDHCPMSG+0x42c>)
 801ba7e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801ba80:	697b      	ldr	r3, [r7, #20]
 801ba82:	1c5a      	adds	r2, r3, #1
 801ba84:	617a      	str	r2, [r7, #20]
 801ba86:	781a      	ldrb	r2, [r3, #0]
 801ba88:	4b41      	ldr	r3, [pc, #260]	; (801bb90 <parseDHCPMSG+0x42c>)
 801ba8a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801ba8c:	697b      	ldr	r3, [r7, #20]
 801ba8e:	1c5a      	adds	r2, r3, #1
 801ba90:	617a      	str	r2, [r7, #20]
 801ba92:	781a      	ldrb	r2, [r3, #0]
 801ba94:	4b3e      	ldr	r3, [pc, #248]	; (801bb90 <parseDHCPMSG+0x42c>)
 801ba96:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801ba98:	7afb      	ldrb	r3, [r7, #11]
 801ba9a:	3b04      	subs	r3, #4
 801ba9c:	697a      	ldr	r2, [r7, #20]
 801ba9e:	4413      	add	r3, r2
 801baa0:	617b      	str	r3, [r7, #20]
   				break;
 801baa2:	e067      	b.n	801bb74 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801baa4:	697b      	ldr	r3, [r7, #20]
 801baa6:	3301      	adds	r3, #1
 801baa8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801baaa:	697b      	ldr	r3, [r7, #20]
 801baac:	1c5a      	adds	r2, r3, #1
 801baae:	617a      	str	r2, [r7, #20]
 801bab0:	781b      	ldrb	r3, [r3, #0]
 801bab2:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801bab4:	697b      	ldr	r3, [r7, #20]
 801bab6:	1c5a      	adds	r2, r3, #1
 801bab8:	617a      	str	r2, [r7, #20]
 801baba:	781b      	ldrb	r3, [r3, #0]
 801babc:	461a      	mov	r2, r3
 801babe:	4b35      	ldr	r3, [pc, #212]	; (801bb94 <parseDHCPMSG+0x430>)
 801bac0:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bac2:	4b34      	ldr	r3, [pc, #208]	; (801bb94 <parseDHCPMSG+0x430>)
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	021a      	lsls	r2, r3, #8
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	1c59      	adds	r1, r3, #1
 801bacc:	6179      	str	r1, [r7, #20]
 801bace:	781b      	ldrb	r3, [r3, #0]
 801bad0:	4413      	add	r3, r2
 801bad2:	4a30      	ldr	r2, [pc, #192]	; (801bb94 <parseDHCPMSG+0x430>)
 801bad4:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bad6:	4b2f      	ldr	r3, [pc, #188]	; (801bb94 <parseDHCPMSG+0x430>)
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	021a      	lsls	r2, r3, #8
 801badc:	697b      	ldr	r3, [r7, #20]
 801bade:	1c59      	adds	r1, r3, #1
 801bae0:	6179      	str	r1, [r7, #20]
 801bae2:	781b      	ldrb	r3, [r3, #0]
 801bae4:	4413      	add	r3, r2
 801bae6:	4a2b      	ldr	r2, [pc, #172]	; (801bb94 <parseDHCPMSG+0x430>)
 801bae8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801baea:	4b2a      	ldr	r3, [pc, #168]	; (801bb94 <parseDHCPMSG+0x430>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	021a      	lsls	r2, r3, #8
 801baf0:	697b      	ldr	r3, [r7, #20]
 801baf2:	1c59      	adds	r1, r3, #1
 801baf4:	6179      	str	r1, [r7, #20]
 801baf6:	781b      	ldrb	r3, [r3, #0]
 801baf8:	4413      	add	r3, r2
 801bafa:	4a26      	ldr	r2, [pc, #152]	; (801bb94 <parseDHCPMSG+0x430>)
 801bafc:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801bafe:	e039      	b.n	801bb74 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801bb00:	697b      	ldr	r3, [r7, #20]
 801bb02:	3301      	adds	r3, #1
 801bb04:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bb06:	697b      	ldr	r3, [r7, #20]
 801bb08:	1c5a      	adds	r2, r3, #1
 801bb0a:	617a      	str	r2, [r7, #20]
 801bb0c:	781b      	ldrb	r3, [r3, #0]
 801bb0e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801bb10:	697b      	ldr	r3, [r7, #20]
 801bb12:	1c5a      	adds	r2, r3, #1
 801bb14:	617a      	str	r2, [r7, #20]
 801bb16:	781a      	ldrb	r2, [r3, #0]
 801bb18:	4b1f      	ldr	r3, [pc, #124]	; (801bb98 <parseDHCPMSG+0x434>)
 801bb1a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801bb1c:	697b      	ldr	r3, [r7, #20]
 801bb1e:	1c5a      	adds	r2, r3, #1
 801bb20:	617a      	str	r2, [r7, #20]
 801bb22:	781a      	ldrb	r2, [r3, #0]
 801bb24:	4b1c      	ldr	r3, [pc, #112]	; (801bb98 <parseDHCPMSG+0x434>)
 801bb26:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	1c5a      	adds	r2, r3, #1
 801bb2c:	617a      	str	r2, [r7, #20]
 801bb2e:	781a      	ldrb	r2, [r3, #0]
 801bb30:	4b19      	ldr	r3, [pc, #100]	; (801bb98 <parseDHCPMSG+0x434>)
 801bb32:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801bb34:	697b      	ldr	r3, [r7, #20]
 801bb36:	1c5a      	adds	r2, r3, #1
 801bb38:	617a      	str	r2, [r7, #20]
 801bb3a:	781a      	ldrb	r2, [r3, #0]
 801bb3c:	4b16      	ldr	r3, [pc, #88]	; (801bb98 <parseDHCPMSG+0x434>)
 801bb3e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801bb40:	793a      	ldrb	r2, [r7, #4]
 801bb42:	4b16      	ldr	r3, [pc, #88]	; (801bb9c <parseDHCPMSG+0x438>)
 801bb44:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801bb46:	797a      	ldrb	r2, [r7, #5]
 801bb48:	4b14      	ldr	r3, [pc, #80]	; (801bb9c <parseDHCPMSG+0x438>)
 801bb4a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801bb4c:	79ba      	ldrb	r2, [r7, #6]
 801bb4e:	4b13      	ldr	r3, [pc, #76]	; (801bb9c <parseDHCPMSG+0x438>)
 801bb50:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801bb52:	79fa      	ldrb	r2, [r7, #7]
 801bb54:	4b11      	ldr	r3, [pc, #68]	; (801bb9c <parseDHCPMSG+0x438>)
 801bb56:	70da      	strb	r2, [r3, #3]
   				break;
 801bb58:	e00c      	b.n	801bb74 <parseDHCPMSG+0x410>
   			default :
   				p++;
 801bb5a:	697b      	ldr	r3, [r7, #20]
 801bb5c:	3301      	adds	r3, #1
 801bb5e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bb60:	697b      	ldr	r3, [r7, #20]
 801bb62:	1c5a      	adds	r2, r3, #1
 801bb64:	617a      	str	r2, [r7, #20]
 801bb66:	781b      	ldrb	r3, [r3, #0]
 801bb68:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801bb6a:	7afb      	ldrb	r3, [r7, #11]
 801bb6c:	697a      	ldr	r2, [r7, #20]
 801bb6e:	4413      	add	r3, r2
 801bb70:	617b      	str	r3, [r7, #20]
   				break;
 801bb72:	bf00      	nop
		while ( p < e ) {
 801bb74:	697a      	ldr	r2, [r7, #20]
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	f4ff ae8a 	bcc.w	801b892 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801bb7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801bb82:	4618      	mov	r0, r3
 801bb84:	371c      	adds	r7, #28
 801bb86:	46bd      	mov	sp, r7
 801bb88:	bd90      	pop	{r4, r7, pc}
 801bb8a:	bf00      	nop
 801bb8c:	200009b8 	.word	0x200009b8
 801bb90:	200009c0 	.word	0x200009c0
 801bb94:	200000f0 	.word	0x200000f0
 801bb98:	200009a8 	.word	0x200009a8
 801bb9c:	200009ac 	.word	0x200009ac

0801bba0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b082      	sub	sp, #8
 801bba4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801bba6:	4b7f      	ldr	r3, [pc, #508]	; (801bda4 <DHCP_run+0x204>)
 801bba8:	f993 3000 	ldrsb.w	r3, [r3]
 801bbac:	2b06      	cmp	r3, #6
 801bbae:	d101      	bne.n	801bbb4 <DHCP_run+0x14>
 801bbb0:	2305      	movs	r3, #5
 801bbb2:	e0f3      	b.n	801bd9c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801bbb4:	4b7c      	ldr	r3, [pc, #496]	; (801bda8 <DHCP_run+0x208>)
 801bbb6:	781b      	ldrb	r3, [r3, #0]
 801bbb8:	009b      	lsls	r3, r3, #2
 801bbba:	3301      	adds	r3, #1
 801bbbc:	00db      	lsls	r3, r3, #3
 801bbbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	f7fc fe14 	bl	80187f0 <WIZCHIP_READ>
 801bbc8:	4603      	mov	r3, r0
 801bbca:	2b22      	cmp	r3, #34	; 0x22
 801bbcc:	d006      	beq.n	801bbdc <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801bbce:	4b76      	ldr	r3, [pc, #472]	; (801bda8 <DHCP_run+0x208>)
 801bbd0:	7818      	ldrb	r0, [r3, #0]
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	2244      	movs	r2, #68	; 0x44
 801bbd6:	2102      	movs	r1, #2
 801bbd8:	f7fd f8fa 	bl	8018dd0 <socket>

	ret = DHCP_RUNNING;
 801bbdc:	2301      	movs	r3, #1
 801bbde:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801bbe0:	f7ff fdc0 	bl	801b764 <parseDHCPMSG>
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801bbe8:	4b6e      	ldr	r3, [pc, #440]	; (801bda4 <DHCP_run+0x204>)
 801bbea:	f993 3000 	ldrsb.w	r3, [r3]
 801bbee:	2b04      	cmp	r3, #4
 801bbf0:	f200 80d0 	bhi.w	801bd94 <DHCP_run+0x1f4>
 801bbf4:	a201      	add	r2, pc, #4	; (adr r2, 801bbfc <DHCP_run+0x5c>)
 801bbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bbfa:	bf00      	nop
 801bbfc:	0801bc11 	.word	0x0801bc11
 801bc00:	0801bc35 	.word	0x0801bc35
 801bc04:	0801bc79 	.word	0x0801bc79
 801bc08:	0801bcc9 	.word	0x0801bcc9
 801bc0c:	0801bd23 	.word	0x0801bd23
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801bc10:	4b66      	ldr	r3, [pc, #408]	; (801bdac <DHCP_run+0x20c>)
 801bc12:	2200      	movs	r2, #0
 801bc14:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801bc16:	4b65      	ldr	r3, [pc, #404]	; (801bdac <DHCP_run+0x20c>)
 801bc18:	2200      	movs	r2, #0
 801bc1a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801bc1c:	4b63      	ldr	r3, [pc, #396]	; (801bdac <DHCP_run+0x20c>)
 801bc1e:	2200      	movs	r2, #0
 801bc20:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801bc22:	4b62      	ldr	r3, [pc, #392]	; (801bdac <DHCP_run+0x20c>)
 801bc24:	2200      	movs	r2, #0
 801bc26:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801bc28:	f7fe fffa 	bl	801ac20 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801bc2c:	4b5d      	ldr	r3, [pc, #372]	; (801bda4 <DHCP_run+0x204>)
 801bc2e:	2201      	movs	r2, #1
 801bc30:	701a      	strb	r2, [r3, #0]
   		break;
 801bc32:	e0b2      	b.n	801bd9a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801bc34:	79bb      	ldrb	r3, [r7, #6]
 801bc36:	2b02      	cmp	r3, #2
 801bc38:	d119      	bne.n	801bc6e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801bc3a:	4b5d      	ldr	r3, [pc, #372]	; (801bdb0 <DHCP_run+0x210>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	7c1a      	ldrb	r2, [r3, #16]
 801bc40:	4b5a      	ldr	r3, [pc, #360]	; (801bdac <DHCP_run+0x20c>)
 801bc42:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801bc44:	4b5a      	ldr	r3, [pc, #360]	; (801bdb0 <DHCP_run+0x210>)
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	7c5a      	ldrb	r2, [r3, #17]
 801bc4a:	4b58      	ldr	r3, [pc, #352]	; (801bdac <DHCP_run+0x20c>)
 801bc4c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801bc4e:	4b58      	ldr	r3, [pc, #352]	; (801bdb0 <DHCP_run+0x210>)
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	7c9a      	ldrb	r2, [r3, #18]
 801bc54:	4b55      	ldr	r3, [pc, #340]	; (801bdac <DHCP_run+0x20c>)
 801bc56:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801bc58:	4b55      	ldr	r3, [pc, #340]	; (801bdb0 <DHCP_run+0x210>)
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	7cda      	ldrb	r2, [r3, #19]
 801bc5e:	4b53      	ldr	r3, [pc, #332]	; (801bdac <DHCP_run+0x20c>)
 801bc60:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801bc62:	f7ff f9a3 	bl	801afac <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801bc66:	4b4f      	ldr	r3, [pc, #316]	; (801bda4 <DHCP_run+0x204>)
 801bc68:	2202      	movs	r2, #2
 801bc6a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801bc6c:	e095      	b.n	801bd9a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bc6e:	f000 f8b1 	bl	801bdd4 <check_DHCP_timeout>
 801bc72:	4603      	mov	r3, r0
 801bc74:	71fb      	strb	r3, [r7, #7]
         break;
 801bc76:	e090      	b.n	801bd9a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801bc78:	79bb      	ldrb	r3, [r7, #6]
 801bc7a:	2b05      	cmp	r3, #5
 801bc7c:	d116      	bne.n	801bcac <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801bc7e:	f000 f8e9 	bl	801be54 <check_DHCP_leasedIP>
 801bc82:	4603      	mov	r3, r0
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d008      	beq.n	801bc9a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801bc88:	4b4a      	ldr	r3, [pc, #296]	; (801bdb4 <DHCP_run+0x214>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	4798      	blx	r3
					reset_DHCP_timeout();
 801bc8e:	f000 f9b9 	bl	801c004 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801bc92:	4b44      	ldr	r3, [pc, #272]	; (801bda4 <DHCP_run+0x204>)
 801bc94:	2203      	movs	r2, #3
 801bc96:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801bc98:	e07f      	b.n	801bd9a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801bc9a:	f000 f9b3 	bl	801c004 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801bc9e:	4b46      	ldr	r3, [pc, #280]	; (801bdb8 <DHCP_run+0x218>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801bca4:	4b3f      	ldr	r3, [pc, #252]	; (801bda4 <DHCP_run+0x204>)
 801bca6:	2200      	movs	r2, #0
 801bca8:	701a      	strb	r2, [r3, #0]
		break;
 801bcaa:	e076      	b.n	801bd9a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bcac:	79bb      	ldrb	r3, [r7, #6]
 801bcae:	2b06      	cmp	r3, #6
 801bcb0:	d105      	bne.n	801bcbe <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801bcb2:	f000 f9a7 	bl	801c004 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bcb6:	4b3b      	ldr	r3, [pc, #236]	; (801bda4 <DHCP_run+0x204>)
 801bcb8:	2201      	movs	r2, #1
 801bcba:	701a      	strb	r2, [r3, #0]
		break;
 801bcbc:	e06d      	b.n	801bd9a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bcbe:	f000 f889 	bl	801bdd4 <check_DHCP_timeout>
 801bcc2:	4603      	mov	r3, r0
 801bcc4:	71fb      	strb	r3, [r7, #7]
		break;
 801bcc6:	e068      	b.n	801bd9a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801bcc8:	2304      	movs	r3, #4
 801bcca:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801bccc:	4b3b      	ldr	r3, [pc, #236]	; (801bdbc <DHCP_run+0x21c>)
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcd4:	d060      	beq.n	801bd98 <DHCP_run+0x1f8>
 801bcd6:	4b39      	ldr	r3, [pc, #228]	; (801bdbc <DHCP_run+0x21c>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	089a      	lsrs	r2, r3, #2
 801bcdc:	4b38      	ldr	r3, [pc, #224]	; (801bdc0 <DHCP_run+0x220>)
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	429a      	cmp	r2, r3
 801bce2:	d259      	bcs.n	801bd98 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801bce4:	2300      	movs	r3, #0
 801bce6:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801bce8:	4b30      	ldr	r3, [pc, #192]	; (801bdac <DHCP_run+0x20c>)
 801bcea:	781a      	ldrb	r2, [r3, #0]
 801bcec:	4b35      	ldr	r3, [pc, #212]	; (801bdc4 <DHCP_run+0x224>)
 801bcee:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801bcf0:	4b2e      	ldr	r3, [pc, #184]	; (801bdac <DHCP_run+0x20c>)
 801bcf2:	785a      	ldrb	r2, [r3, #1]
 801bcf4:	4b33      	ldr	r3, [pc, #204]	; (801bdc4 <DHCP_run+0x224>)
 801bcf6:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801bcf8:	4b2c      	ldr	r3, [pc, #176]	; (801bdac <DHCP_run+0x20c>)
 801bcfa:	789a      	ldrb	r2, [r3, #2]
 801bcfc:	4b31      	ldr	r3, [pc, #196]	; (801bdc4 <DHCP_run+0x224>)
 801bcfe:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801bd00:	4b2a      	ldr	r3, [pc, #168]	; (801bdac <DHCP_run+0x20c>)
 801bd02:	78da      	ldrb	r2, [r3, #3]
 801bd04:	4b2f      	ldr	r3, [pc, #188]	; (801bdc4 <DHCP_run+0x224>)
 801bd06:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801bd08:	4b2f      	ldr	r3, [pc, #188]	; (801bdc8 <DHCP_run+0x228>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	3301      	adds	r3, #1
 801bd0e:	4a2e      	ldr	r2, [pc, #184]	; (801bdc8 <DHCP_run+0x228>)
 801bd10:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801bd12:	f7ff f94b 	bl	801afac <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801bd16:	f000 f975 	bl	801c004 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801bd1a:	4b22      	ldr	r3, [pc, #136]	; (801bda4 <DHCP_run+0x204>)
 801bd1c:	2204      	movs	r2, #4
 801bd1e:	701a      	strb	r2, [r3, #0]
			}
		break;
 801bd20:	e03a      	b.n	801bd98 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801bd22:	2304      	movs	r3, #4
 801bd24:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801bd26:	79bb      	ldrb	r3, [r7, #6]
 801bd28:	2b05      	cmp	r3, #5
 801bd2a:	d125      	bne.n	801bd78 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801bd2c:	4b27      	ldr	r3, [pc, #156]	; (801bdcc <DHCP_run+0x22c>)
 801bd2e:	2200      	movs	r2, #0
 801bd30:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801bd32:	4b24      	ldr	r3, [pc, #144]	; (801bdc4 <DHCP_run+0x224>)
 801bd34:	781a      	ldrb	r2, [r3, #0]
 801bd36:	4b1d      	ldr	r3, [pc, #116]	; (801bdac <DHCP_run+0x20c>)
 801bd38:	781b      	ldrb	r3, [r3, #0]
 801bd3a:	429a      	cmp	r2, r3
 801bd3c:	d111      	bne.n	801bd62 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bd3e:	4b21      	ldr	r3, [pc, #132]	; (801bdc4 <DHCP_run+0x224>)
 801bd40:	785a      	ldrb	r2, [r3, #1]
 801bd42:	4b1a      	ldr	r3, [pc, #104]	; (801bdac <DHCP_run+0x20c>)
 801bd44:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801bd46:	429a      	cmp	r2, r3
 801bd48:	d10b      	bne.n	801bd62 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bd4a:	4b1e      	ldr	r3, [pc, #120]	; (801bdc4 <DHCP_run+0x224>)
 801bd4c:	789a      	ldrb	r2, [r3, #2]
 801bd4e:	4b17      	ldr	r3, [pc, #92]	; (801bdac <DHCP_run+0x20c>)
 801bd50:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bd52:	429a      	cmp	r2, r3
 801bd54:	d105      	bne.n	801bd62 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801bd56:	4b1b      	ldr	r3, [pc, #108]	; (801bdc4 <DHCP_run+0x224>)
 801bd58:	78da      	ldrb	r2, [r3, #3]
 801bd5a:	4b14      	ldr	r3, [pc, #80]	; (801bdac <DHCP_run+0x20c>)
 801bd5c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bd5e:	429a      	cmp	r2, r3
 801bd60:	d004      	beq.n	801bd6c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801bd62:	2303      	movs	r3, #3
 801bd64:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801bd66:	4b1a      	ldr	r3, [pc, #104]	; (801bdd0 <DHCP_run+0x230>)
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801bd6c:	f000 f94a 	bl	801c004 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801bd70:	4b0c      	ldr	r3, [pc, #48]	; (801bda4 <DHCP_run+0x204>)
 801bd72:	2203      	movs	r2, #3
 801bd74:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801bd76:	e010      	b.n	801bd9a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bd78:	79bb      	ldrb	r3, [r7, #6]
 801bd7a:	2b06      	cmp	r3, #6
 801bd7c:	d105      	bne.n	801bd8a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801bd7e:	f000 f941 	bl	801c004 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bd82:	4b08      	ldr	r3, [pc, #32]	; (801bda4 <DHCP_run+0x204>)
 801bd84:	2201      	movs	r2, #1
 801bd86:	701a      	strb	r2, [r3, #0]
	   	break;
 801bd88:	e007      	b.n	801bd9a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bd8a:	f000 f823 	bl	801bdd4 <check_DHCP_timeout>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	71fb      	strb	r3, [r7, #7]
	   	break;
 801bd92:	e002      	b.n	801bd9a <DHCP_run+0x1fa>
		default :
   		break;
 801bd94:	bf00      	nop
 801bd96:	e000      	b.n	801bd9a <DHCP_run+0x1fa>
		break;
 801bd98:	bf00      	nop
	}

	return ret;
 801bd9a:	79fb      	ldrb	r3, [r7, #7]
}
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	3708      	adds	r7, #8
 801bda0:	46bd      	mov	sp, r7
 801bda2:	bd80      	pop	{r7, pc}
 801bda4:	200009c4 	.word	0x200009c4
 801bda8:	200009a5 	.word	0x200009a5
 801bdac:	200009b4 	.word	0x200009b4
 801bdb0:	200009d0 	.word	0x200009d0
 801bdb4:	20000104 	.word	0x20000104
 801bdb8:	2000010c 	.word	0x2000010c
 801bdbc:	200000f0 	.word	0x200000f0
 801bdc0:	200009c8 	.word	0x200009c8
 801bdc4:	200009b0 	.word	0x200009b0
 801bdc8:	200009cc 	.word	0x200009cc
 801bdcc:	200009c5 	.word	0x200009c5
 801bdd0:	20000108 	.word	0x20000108

0801bdd4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b082      	sub	sp, #8
 801bdd8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801bdda:	2301      	movs	r3, #1
 801bddc:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
		if (dhcp_tick_next < dhcp_tick_1s) {
 801bdde:	4b19      	ldr	r3, [pc, #100]	; (801be44 <check_DHCP_timeout+0x70>)
 801bde0:	681a      	ldr	r2, [r3, #0]
 801bde2:	4b19      	ldr	r3, [pc, #100]	; (801be48 <check_DHCP_timeout+0x74>)
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	429a      	cmp	r2, r3
 801bde8:	d226      	bcs.n	801be38 <check_DHCP_timeout+0x64>

			switch ( dhcp_state ) {
 801bdea:	4b18      	ldr	r3, [pc, #96]	; (801be4c <check_DHCP_timeout+0x78>)
 801bdec:	f993 3000 	ldrsb.w	r3, [r3]
 801bdf0:	2b04      	cmp	r3, #4
 801bdf2:	d00c      	beq.n	801be0e <check_DHCP_timeout+0x3a>
 801bdf4:	2b04      	cmp	r3, #4
 801bdf6:	dc0d      	bgt.n	801be14 <check_DHCP_timeout+0x40>
 801bdf8:	2b01      	cmp	r3, #1
 801bdfa:	d002      	beq.n	801be02 <check_DHCP_timeout+0x2e>
 801bdfc:	2b02      	cmp	r3, #2
 801bdfe:	d003      	beq.n	801be08 <check_DHCP_timeout+0x34>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801be00:	e008      	b.n	801be14 <check_DHCP_timeout+0x40>
					send_DHCP_DISCOVER();
 801be02:	f7fe ff0d 	bl	801ac20 <send_DHCP_DISCOVER>
				break;
 801be06:	e006      	b.n	801be16 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801be08:	f7ff f8d0 	bl	801afac <send_DHCP_REQUEST>
				break;
 801be0c:	e003      	b.n	801be16 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801be0e:	f7ff f8cd 	bl	801afac <send_DHCP_REQUEST>
				break;
 801be12:	e000      	b.n	801be16 <check_DHCP_timeout+0x42>
				break;
 801be14:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801be16:	4b0c      	ldr	r3, [pc, #48]	; (801be48 <check_DHCP_timeout+0x74>)
 801be18:	2200      	movs	r2, #0
 801be1a:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801be1c:	4b0a      	ldr	r3, [pc, #40]	; (801be48 <check_DHCP_timeout+0x74>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	330a      	adds	r3, #10
 801be22:	4a08      	ldr	r2, [pc, #32]	; (801be44 <check_DHCP_timeout+0x70>)
 801be24:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801be26:	4b0a      	ldr	r3, [pc, #40]	; (801be50 <check_DHCP_timeout+0x7c>)
 801be28:	f993 3000 	ldrsb.w	r3, [r3]
 801be2c:	b2db      	uxtb	r3, r3
 801be2e:	3301      	adds	r3, #1
 801be30:	b2db      	uxtb	r3, r3
 801be32:	b25a      	sxtb	r2, r3
 801be34:	4b06      	ldr	r3, [pc, #24]	; (801be50 <check_DHCP_timeout+0x7c>)
 801be36:	701a      	strb	r2, [r3, #0]
			default :
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
 801be38:	79fb      	ldrb	r3, [r7, #7]
}
 801be3a:	4618      	mov	r0, r3
 801be3c:	3708      	adds	r7, #8
 801be3e:	46bd      	mov	sp, r7
 801be40:	bd80      	pop	{r7, pc}
 801be42:	bf00      	nop
 801be44:	200000f4 	.word	0x200000f4
 801be48:	200009c8 	.word	0x200009c8
 801be4c:	200009c4 	.word	0x200009c4
 801be50:	200009c5 	.word	0x200009c5

0801be54 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b084      	sub	sp, #16
 801be58:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801be5a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801be5e:	f7fc fcc7 	bl	80187f0 <WIZCHIP_READ>
 801be62:	4603      	mov	r3, r0
 801be64:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801be66:	2103      	movs	r1, #3
 801be68:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801be6c:	f7fc fd0c 	bl	8018888 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801be70:	4b15      	ldr	r3, [pc, #84]	; (801bec8 <check_DHCP_leasedIP+0x74>)
 801be72:	7818      	ldrb	r0, [r3, #0]
 801be74:	f241 3388 	movw	r3, #5000	; 0x1388
 801be78:	9300      	str	r3, [sp, #0]
 801be7a:	4b14      	ldr	r3, [pc, #80]	; (801becc <check_DHCP_leasedIP+0x78>)
 801be7c:	2211      	movs	r2, #17
 801be7e:	4914      	ldr	r1, [pc, #80]	; (801bed0 <check_DHCP_leasedIP+0x7c>)
 801be80:	f7fd fc84 	bl	801978c <sendto>
 801be84:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801be86:	79fb      	ldrb	r3, [r7, #7]
 801be88:	4619      	mov	r1, r3
 801be8a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801be8e:	f7fc fcfb 	bl	8018888 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801be92:	683b      	ldr	r3, [r7, #0]
 801be94:	f113 0f0d 	cmn.w	r3, #13
 801be98:	d101      	bne.n	801be9e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801be9a:	2301      	movs	r3, #1
 801be9c:	e010      	b.n	801bec0 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801be9e:	f7ff fb0f 	bl	801b4c0 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801bea2:	4b0c      	ldr	r3, [pc, #48]	; (801bed4 <check_DHCP_leasedIP+0x80>)
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bea8:	e003      	b.n	801beb2 <check_DHCP_leasedIP+0x5e>

			delay(200);
 801beaa:	4b0b      	ldr	r3, [pc, #44]	; (801bed8 <check_DHCP_leasedIP+0x84>)
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	20c8      	movs	r0, #200	; 0xc8
 801beb0:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801beb2:	4b08      	ldr	r3, [pc, #32]	; (801bed4 <check_DHCP_leasedIP+0x80>)
 801beb4:	681a      	ldr	r2, [r3, #0]
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	1ad3      	subs	r3, r2, r3
 801beba:	2b01      	cmp	r3, #1
 801bebc:	d9f5      	bls.n	801beaa <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801bebe:	2300      	movs	r3, #0
	}
}	
 801bec0:	4618      	mov	r0, r3
 801bec2:	3708      	adds	r7, #8
 801bec4:	46bd      	mov	sp, r7
 801bec6:	bd80      	pop	{r7, pc}
 801bec8:	200009a5 	.word	0x200009a5
 801becc:	200009b4 	.word	0x200009b4
 801bed0:	08032e00 	.word	0x08032e00
 801bed4:	200009c8 	.word	0x200009c8
 801bed8:	20000110 	.word	0x20000110

0801bedc <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801bedc:	b580      	push	{r7, lr}
 801bede:	b084      	sub	sp, #16
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	4603      	mov	r3, r0
 801bee4:	6039      	str	r1, [r7, #0]
 801bee6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801bee8:	2300      	movs	r3, #0
 801beea:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801beec:	2206      	movs	r2, #6
 801beee:	493f      	ldr	r1, [pc, #252]	; (801bfec <DHCP_init+0x110>)
 801bef0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bef4:	f7fc fd16 	bl	8018924 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801bef8:	4b3c      	ldr	r3, [pc, #240]	; (801bfec <DHCP_init+0x110>)
 801befa:	781a      	ldrb	r2, [r3, #0]
 801befc:	4b3b      	ldr	r3, [pc, #236]	; (801bfec <DHCP_init+0x110>)
 801befe:	785b      	ldrb	r3, [r3, #1]
 801bf00:	4313      	orrs	r3, r2
 801bf02:	b2da      	uxtb	r2, r3
 801bf04:	4b39      	ldr	r3, [pc, #228]	; (801bfec <DHCP_init+0x110>)
 801bf06:	789b      	ldrb	r3, [r3, #2]
 801bf08:	4313      	orrs	r3, r2
 801bf0a:	b2da      	uxtb	r2, r3
 801bf0c:	4b37      	ldr	r3, [pc, #220]	; (801bfec <DHCP_init+0x110>)
 801bf0e:	78db      	ldrb	r3, [r3, #3]
 801bf10:	4313      	orrs	r3, r2
 801bf12:	b2da      	uxtb	r2, r3
 801bf14:	4b35      	ldr	r3, [pc, #212]	; (801bfec <DHCP_init+0x110>)
 801bf16:	791b      	ldrb	r3, [r3, #4]
 801bf18:	4313      	orrs	r3, r2
 801bf1a:	b2da      	uxtb	r2, r3
 801bf1c:	4b33      	ldr	r3, [pc, #204]	; (801bfec <DHCP_init+0x110>)
 801bf1e:	795b      	ldrb	r3, [r3, #5]
 801bf20:	4313      	orrs	r3, r2
 801bf22:	b2db      	uxtb	r3, r3
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d117      	bne.n	801bf58 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801bf28:	4b30      	ldr	r3, [pc, #192]	; (801bfec <DHCP_init+0x110>)
 801bf2a:	2200      	movs	r2, #0
 801bf2c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801bf2e:	4b2f      	ldr	r3, [pc, #188]	; (801bfec <DHCP_init+0x110>)
 801bf30:	2208      	movs	r2, #8
 801bf32:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801bf34:	4b2d      	ldr	r3, [pc, #180]	; (801bfec <DHCP_init+0x110>)
 801bf36:	22dc      	movs	r2, #220	; 0xdc
 801bf38:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801bf3a:	4b2c      	ldr	r3, [pc, #176]	; (801bfec <DHCP_init+0x110>)
 801bf3c:	2200      	movs	r2, #0
 801bf3e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801bf40:	4b2a      	ldr	r3, [pc, #168]	; (801bfec <DHCP_init+0x110>)
 801bf42:	2200      	movs	r2, #0
 801bf44:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801bf46:	4b29      	ldr	r3, [pc, #164]	; (801bfec <DHCP_init+0x110>)
 801bf48:	2200      	movs	r2, #0
 801bf4a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801bf4c:	2206      	movs	r2, #6
 801bf4e:	4927      	ldr	r1, [pc, #156]	; (801bfec <DHCP_init+0x110>)
 801bf50:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bf54:	f7fc fd46 	bl	80189e4 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801bf58:	4a25      	ldr	r2, [pc, #148]	; (801bff0 <DHCP_init+0x114>)
 801bf5a:	79fb      	ldrb	r3, [r7, #7]
 801bf5c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801bf5e:	4a25      	ldr	r2, [pc, #148]	; (801bff4 <DHCP_init+0x118>)
 801bf60:	683b      	ldr	r3, [r7, #0]
 801bf62:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801bf64:	4b24      	ldr	r3, [pc, #144]	; (801bff8 <DHCP_init+0x11c>)
 801bf66:	4a25      	ldr	r2, [pc, #148]	; (801bffc <DHCP_init+0x120>)
 801bf68:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801bf6a:	4b20      	ldr	r3, [pc, #128]	; (801bfec <DHCP_init+0x110>)
 801bf6c:	78db      	ldrb	r3, [r3, #3]
 801bf6e:	461a      	mov	r2, r3
 801bf70:	4b21      	ldr	r3, [pc, #132]	; (801bff8 <DHCP_init+0x11c>)
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	4413      	add	r3, r2
 801bf76:	4a20      	ldr	r2, [pc, #128]	; (801bff8 <DHCP_init+0x11c>)
 801bf78:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801bf7a:	4b1c      	ldr	r3, [pc, #112]	; (801bfec <DHCP_init+0x110>)
 801bf7c:	791b      	ldrb	r3, [r3, #4]
 801bf7e:	461a      	mov	r2, r3
 801bf80:	4b1d      	ldr	r3, [pc, #116]	; (801bff8 <DHCP_init+0x11c>)
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	4413      	add	r3, r2
 801bf86:	4a1c      	ldr	r2, [pc, #112]	; (801bff8 <DHCP_init+0x11c>)
 801bf88:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801bf8a:	4b18      	ldr	r3, [pc, #96]	; (801bfec <DHCP_init+0x110>)
 801bf8c:	795b      	ldrb	r3, [r3, #5]
 801bf8e:	461a      	mov	r2, r3
 801bf90:	4b19      	ldr	r3, [pc, #100]	; (801bff8 <DHCP_init+0x11c>)
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	4413      	add	r3, r2
 801bf96:	4a18      	ldr	r2, [pc, #96]	; (801bff8 <DHCP_init+0x11c>)
 801bf98:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801bf9a:	4b14      	ldr	r3, [pc, #80]	; (801bfec <DHCP_init+0x110>)
 801bf9c:	78da      	ldrb	r2, [r3, #3]
 801bf9e:	4b13      	ldr	r3, [pc, #76]	; (801bfec <DHCP_init+0x110>)
 801bfa0:	791b      	ldrb	r3, [r3, #4]
 801bfa2:	4053      	eors	r3, r2
 801bfa4:	b2da      	uxtb	r2, r3
 801bfa6:	4b11      	ldr	r3, [pc, #68]	; (801bfec <DHCP_init+0x110>)
 801bfa8:	795b      	ldrb	r3, [r3, #5]
 801bfaa:	4053      	eors	r3, r2
 801bfac:	b2db      	uxtb	r3, r3
 801bfae:	461a      	mov	r2, r3
 801bfb0:	4b11      	ldr	r3, [pc, #68]	; (801bff8 <DHCP_init+0x11c>)
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	4413      	add	r3, r2
 801bfb6:	4a10      	ldr	r2, [pc, #64]	; (801bff8 <DHCP_init+0x11c>)
 801bfb8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801bfba:	f107 030c 	add.w	r3, r7, #12
 801bfbe:	2204      	movs	r2, #4
 801bfc0:	4619      	mov	r1, r3
 801bfc2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801bfc6:	f7fc fd0d 	bl	80189e4 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801bfca:	f107 030c 	add.w	r3, r7, #12
 801bfce:	2204      	movs	r2, #4
 801bfd0:	4619      	mov	r1, r3
 801bfd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bfd6:	f7fc fd05 	bl	80189e4 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801bfda:	f000 f813 	bl	801c004 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801bfde:	4b08      	ldr	r3, [pc, #32]	; (801c000 <DHCP_init+0x124>)
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	701a      	strb	r2, [r3, #0]
}
 801bfe4:	bf00      	nop
 801bfe6:	3710      	adds	r7, #16
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}
 801bfec:	200009d4 	.word	0x200009d4
 801bff0:	200009a5 	.word	0x200009a5
 801bff4:	200009d0 	.word	0x200009d0
 801bff8:	200009cc 	.word	0x200009cc
 801bffc:	12345678 	.word	0x12345678
 801c000:	200009c4 	.word	0x200009c4

0801c004 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801c004:	b480      	push	{r7}
 801c006:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801c008:	4b06      	ldr	r3, [pc, #24]	; (801c024 <reset_DHCP_timeout+0x20>)
 801c00a:	2200      	movs	r2, #0
 801c00c:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801c00e:	4b06      	ldr	r3, [pc, #24]	; (801c028 <reset_DHCP_timeout+0x24>)
 801c010:	220a      	movs	r2, #10
 801c012:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801c014:	4b05      	ldr	r3, [pc, #20]	; (801c02c <reset_DHCP_timeout+0x28>)
 801c016:	2200      	movs	r2, #0
 801c018:	701a      	strb	r2, [r3, #0]
}
 801c01a:	bf00      	nop
 801c01c:	46bd      	mov	sp, r7
 801c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c022:	4770      	bx	lr
 801c024:	200009c8 	.word	0x200009c8
 801c028:	200000f4 	.word	0x200000f4
 801c02c:	200009c5 	.word	0x200009c5

0801c030 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801c030:	b480      	push	{r7}
 801c032:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801c034:	4b04      	ldr	r3, [pc, #16]	; (801c048 <DHCP_time_handler+0x18>)
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	3301      	adds	r3, #1
 801c03a:	4a03      	ldr	r2, [pc, #12]	; (801c048 <DHCP_time_handler+0x18>)
 801c03c:	6013      	str	r3, [r2, #0]
}
 801c03e:	bf00      	nop
 801c040:	46bd      	mov	sp, r7
 801c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c046:	4770      	bx	lr
 801c048:	200009c8 	.word	0x200009c8

0801c04c <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801c04c:	b480      	push	{r7}
 801c04e:	b083      	sub	sp, #12
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801c054:	4b0c      	ldr	r3, [pc, #48]	; (801c088 <getIPfromDHCP+0x3c>)
 801c056:	781a      	ldrb	r2, [r3, #0]
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	3301      	adds	r3, #1
 801c060:	4a09      	ldr	r2, [pc, #36]	; (801c088 <getIPfromDHCP+0x3c>)
 801c062:	7852      	ldrb	r2, [r2, #1]
 801c064:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	3302      	adds	r3, #2
 801c06a:	4a07      	ldr	r2, [pc, #28]	; (801c088 <getIPfromDHCP+0x3c>)
 801c06c:	7892      	ldrb	r2, [r2, #2]
 801c06e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	3303      	adds	r3, #3
 801c074:	4a04      	ldr	r2, [pc, #16]	; (801c088 <getIPfromDHCP+0x3c>)
 801c076:	78d2      	ldrb	r2, [r2, #3]
 801c078:	701a      	strb	r2, [r3, #0]
}
 801c07a:	bf00      	nop
 801c07c:	370c      	adds	r7, #12
 801c07e:	46bd      	mov	sp, r7
 801c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c084:	4770      	bx	lr
 801c086:	bf00      	nop
 801c088:	200009b4 	.word	0x200009b4

0801c08c <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801c08c:	b480      	push	{r7}
 801c08e:	b083      	sub	sp, #12
 801c090:	af00      	add	r7, sp, #0
 801c092:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801c094:	4b0c      	ldr	r3, [pc, #48]	; (801c0c8 <getGWfromDHCP+0x3c>)
 801c096:	781a      	ldrb	r2, [r3, #0]
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	3301      	adds	r3, #1
 801c0a0:	4a09      	ldr	r2, [pc, #36]	; (801c0c8 <getGWfromDHCP+0x3c>)
 801c0a2:	7852      	ldrb	r2, [r2, #1]
 801c0a4:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	3302      	adds	r3, #2
 801c0aa:	4a07      	ldr	r2, [pc, #28]	; (801c0c8 <getGWfromDHCP+0x3c>)
 801c0ac:	7892      	ldrb	r2, [r2, #2]
 801c0ae:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	3303      	adds	r3, #3
 801c0b4:	4a04      	ldr	r2, [pc, #16]	; (801c0c8 <getGWfromDHCP+0x3c>)
 801c0b6:	78d2      	ldrb	r2, [r2, #3]
 801c0b8:	701a      	strb	r2, [r3, #0]
}
 801c0ba:	bf00      	nop
 801c0bc:	370c      	adds	r7, #12
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c4:	4770      	bx	lr
 801c0c6:	bf00      	nop
 801c0c8:	200009b8 	.word	0x200009b8

0801c0cc <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801c0cc:	b480      	push	{r7}
 801c0ce:	b083      	sub	sp, #12
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801c0d4:	4b0c      	ldr	r3, [pc, #48]	; (801c108 <getSNfromDHCP+0x3c>)
 801c0d6:	781a      	ldrb	r2, [r3, #0]
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	3301      	adds	r3, #1
 801c0e0:	4a09      	ldr	r2, [pc, #36]	; (801c108 <getSNfromDHCP+0x3c>)
 801c0e2:	7852      	ldrb	r2, [r2, #1]
 801c0e4:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	3302      	adds	r3, #2
 801c0ea:	4a07      	ldr	r2, [pc, #28]	; (801c108 <getSNfromDHCP+0x3c>)
 801c0ec:	7892      	ldrb	r2, [r2, #2]
 801c0ee:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	3303      	adds	r3, #3
 801c0f4:	4a04      	ldr	r2, [pc, #16]	; (801c108 <getSNfromDHCP+0x3c>)
 801c0f6:	78d2      	ldrb	r2, [r2, #3]
 801c0f8:	701a      	strb	r2, [r3, #0]
}
 801c0fa:	bf00      	nop
 801c0fc:	370c      	adds	r7, #12
 801c0fe:	46bd      	mov	sp, r7
 801c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c104:	4770      	bx	lr
 801c106:	bf00      	nop
 801c108:	200009bc 	.word	0x200009bc

0801c10c <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801c10c:	b480      	push	{r7}
 801c10e:	b083      	sub	sp, #12
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801c114:	4b0c      	ldr	r3, [pc, #48]	; (801c148 <getDNSfromDHCP+0x3c>)
 801c116:	781a      	ldrb	r2, [r3, #0]
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	3301      	adds	r3, #1
 801c120:	4a09      	ldr	r2, [pc, #36]	; (801c148 <getDNSfromDHCP+0x3c>)
 801c122:	7852      	ldrb	r2, [r2, #1]
 801c124:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	3302      	adds	r3, #2
 801c12a:	4a07      	ldr	r2, [pc, #28]	; (801c148 <getDNSfromDHCP+0x3c>)
 801c12c:	7892      	ldrb	r2, [r2, #2]
 801c12e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	3303      	adds	r3, #3
 801c134:	4a04      	ldr	r2, [pc, #16]	; (801c148 <getDNSfromDHCP+0x3c>)
 801c136:	78d2      	ldrb	r2, [r2, #3]
 801c138:	701a      	strb	r2, [r3, #0]
}
 801c13a:	bf00      	nop
 801c13c:	370c      	adds	r7, #12
 801c13e:	46bd      	mov	sp, r7
 801c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c144:	4770      	bx	lr
 801c146:	bf00      	nop
 801c148:	200009c0 	.word	0x200009c0

0801c14c <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801c14c:	b480      	push	{r7}
 801c14e:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801c150:	4b03      	ldr	r3, [pc, #12]	; (801c160 <getDHCPLeasetime+0x14>)
 801c152:	681b      	ldr	r3, [r3, #0]
}
 801c154:	4618      	mov	r0, r3
 801c156:	46bd      	mov	sp, r7
 801c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c15c:	4770      	bx	lr
 801c15e:	bf00      	nop
 801c160:	200000f0 	.word	0x200000f0

0801c164 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801c164:	b480      	push	{r7}
 801c166:	b083      	sub	sp, #12
 801c168:	af00      	add	r7, sp, #0
 801c16a:	4603      	mov	r3, r0
 801c16c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801c16e:	79fb      	ldrb	r3, [r7, #7]
 801c170:	f003 030f 	and.w	r3, r3, #15
 801c174:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801c176:	79fb      	ldrb	r3, [r7, #7]
 801c178:	2b09      	cmp	r3, #9
 801c17a:	d803      	bhi.n	801c184 <NibbleToHex+0x20>
    return nibble + '0';
 801c17c:	79fb      	ldrb	r3, [r7, #7]
 801c17e:	3330      	adds	r3, #48	; 0x30
 801c180:	b2db      	uxtb	r3, r3
 801c182:	e002      	b.n	801c18a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801c184:	79fb      	ldrb	r3, [r7, #7]
 801c186:	3337      	adds	r3, #55	; 0x37
 801c188:	b2db      	uxtb	r3, r3
}
 801c18a:	4618      	mov	r0, r3
 801c18c:	370c      	adds	r7, #12
 801c18e:	46bd      	mov	sp, r7
 801c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c194:	4770      	bx	lr

0801c196 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801c196:	b480      	push	{r7}
 801c198:	b085      	sub	sp, #20
 801c19a:	af00      	add	r7, sp, #0
 801c19c:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	1c5a      	adds	r2, r3, #1
 801c1a2:	607a      	str	r2, [r7, #4]
 801c1a4:	781b      	ldrb	r3, [r3, #0]
 801c1a6:	b29b      	uxth	r3, r3
 801c1a8:	021b      	lsls	r3, r3, #8
 801c1aa:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	781b      	ldrb	r3, [r3, #0]
 801c1b0:	b29a      	uxth	r2, r3
 801c1b2:	89fb      	ldrh	r3, [r7, #14]
 801c1b4:	4413      	add	r3, r2
 801c1b6:	81fb      	strh	r3, [r7, #14]
	return i;
 801c1b8:	89fb      	ldrh	r3, [r7, #14]
}
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	3714      	adds	r7, #20
 801c1be:	46bd      	mov	sp, r7
 801c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c4:	4770      	bx	lr

0801c1c6 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801c1c6:	b480      	push	{r7}
 801c1c8:	b083      	sub	sp, #12
 801c1ca:	af00      	add	r7, sp, #0
 801c1cc:	6078      	str	r0, [r7, #4]
 801c1ce:	460b      	mov	r3, r1
 801c1d0:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801c1d2:	887b      	ldrh	r3, [r7, #2]
 801c1d4:	0a1b      	lsrs	r3, r3, #8
 801c1d6:	b299      	uxth	r1, r3
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	1c5a      	adds	r2, r3, #1
 801c1dc:	607a      	str	r2, [r7, #4]
 801c1de:	b2ca      	uxtb	r2, r1
 801c1e0:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	1c5a      	adds	r2, r3, #1
 801c1e6:	607a      	str	r2, [r7, #4]
 801c1e8:	887a      	ldrh	r2, [r7, #2]
 801c1ea:	b2d2      	uxtb	r2, r2
 801c1ec:	701a      	strb	r2, [r3, #0]
	return s;
 801c1ee:	687b      	ldr	r3, [r7, #4]
}
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	370c      	adds	r7, #12
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fa:	4770      	bx	lr

0801c1fc <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801c1fc:	b480      	push	{r7}
 801c1fe:	b08b      	sub	sp, #44	; 0x2c
 801c200:	af00      	add	r7, sp, #0
 801c202:	60f8      	str	r0, [r7, #12]
 801c204:	60b9      	str	r1, [r7, #8]
 801c206:	607a      	str	r2, [r7, #4]
 801c208:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801c20a:	2300      	movs	r3, #0
 801c20c:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801c20e:	2300      	movs	r3, #0
 801c210:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801c212:	2300      	movs	r3, #0
 801c214:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801c21a:	6a3b      	ldr	r3, [r7, #32]
 801c21c:	1c5a      	adds	r2, r3, #1
 801c21e:	623a      	str	r2, [r7, #32]
 801c220:	781b      	ldrb	r3, [r3, #0]
 801c222:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 801c224:	69bb      	ldr	r3, [r7, #24]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d102      	bne.n	801c230 <parse_name+0x34>
 801c22a:	69fb      	ldr	r3, [r7, #28]
 801c22c:	3301      	adds	r3, #1
 801c22e:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801c230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c232:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c236:	2bc0      	cmp	r3, #192	; 0xc0
 801c238:	d117      	bne.n	801c26a <parse_name+0x6e>
		{
			if (!indirect)
 801c23a:	69bb      	ldr	r3, [r7, #24]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d102      	bne.n	801c246 <parse_name+0x4a>
				clen++;
 801c240:	69fb      	ldr	r3, [r7, #28]
 801c242:	3301      	adds	r3, #1
 801c244:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801c246:	2301      	movs	r3, #1
 801c248:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801c24a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c24c:	021b      	lsls	r3, r3, #8
 801c24e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801c252:	6a3a      	ldr	r2, [r7, #32]
 801c254:	7812      	ldrb	r2, [r2, #0]
 801c256:	4413      	add	r3, r2
 801c258:	461a      	mov	r2, r3
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	4413      	add	r3, r2
 801c25e:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801c260:	6a3b      	ldr	r3, [r7, #32]
 801c262:	1c5a      	adds	r2, r3, #1
 801c264:	623a      	str	r2, [r7, #32]
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801c26a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d02b      	beq.n	801c2c8 <parse_name+0xcc>
			break;

		len -= slen + 1;
 801c270:	887a      	ldrh	r2, [r7, #2]
 801c272:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c274:	1ad3      	subs	r3, r2, r3
 801c276:	b29b      	uxth	r3, r3
 801c278:	3b01      	subs	r3, #1
 801c27a:	b29b      	uxth	r3, r3
 801c27c:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801c27e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c282:	2b00      	cmp	r3, #0
 801c284:	da02      	bge.n	801c28c <parse_name+0x90>
 801c286:	f04f 33ff 	mov.w	r3, #4294967295
 801c28a:	e038      	b.n	801c2fe <parse_name+0x102>

		if (!indirect) clen += slen;
 801c28c:	69bb      	ldr	r3, [r7, #24]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d10c      	bne.n	801c2ac <parse_name+0xb0>
 801c292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c294:	69fa      	ldr	r2, [r7, #28]
 801c296:	4413      	add	r3, r2
 801c298:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801c29a:	e007      	b.n	801c2ac <parse_name+0xb0>
 801c29c:	6a3a      	ldr	r2, [r7, #32]
 801c29e:	1c53      	adds	r3, r2, #1
 801c2a0:	623b      	str	r3, [r7, #32]
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	1c59      	adds	r1, r3, #1
 801c2a6:	6079      	str	r1, [r7, #4]
 801c2a8:	7812      	ldrb	r2, [r2, #0]
 801c2aa:	701a      	strb	r2, [r3, #0]
 801c2ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c2ae:	1e5a      	subs	r2, r3, #1
 801c2b0:	84fa      	strh	r2, [r7, #38]	; 0x26
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d1f2      	bne.n	801c29c <parse_name+0xa0>
		*buf++ = '.';
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	1c5a      	adds	r2, r3, #1
 801c2ba:	607a      	str	r2, [r7, #4]
 801c2bc:	222e      	movs	r2, #46	; 0x2e
 801c2be:	701a      	strb	r2, [r3, #0]
		nseg++;
 801c2c0:	697b      	ldr	r3, [r7, #20]
 801c2c2:	3301      	adds	r3, #1
 801c2c4:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801c2c6:	e7a8      	b.n	801c21a <parse_name+0x1e>
			break;
 801c2c8:	bf00      	nop
	}

	if (nseg == 0)
 801c2ca:	697b      	ldr	r3, [r7, #20]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d10a      	bne.n	801c2e6 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	1c5a      	adds	r2, r3, #1
 801c2d4:	607a      	str	r2, [r7, #4]
 801c2d6:	222e      	movs	r2, #46	; 0x2e
 801c2d8:	701a      	strb	r2, [r3, #0]
		len--;
 801c2da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	3b01      	subs	r3, #1
 801c2e2:	b29b      	uxth	r3, r3
 801c2e4:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	1c5a      	adds	r2, r3, #1
 801c2ea:	607a      	str	r2, [r7, #4]
 801c2ec:	2200      	movs	r2, #0
 801c2ee:	701a      	strb	r2, [r3, #0]
	len--;
 801c2f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c2f4:	b29b      	uxth	r3, r3
 801c2f6:	3b01      	subs	r3, #1
 801c2f8:	b29b      	uxth	r3, r3
 801c2fa:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801c2fc:	69fb      	ldr	r3, [r7, #28]
}
 801c2fe:	4618      	mov	r0, r3
 801c300:	372c      	adds	r7, #44	; 0x2c
 801c302:	46bd      	mov	sp, r7
 801c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c308:	4770      	bx	lr

0801c30a <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801c30a:	b580      	push	{r7, lr}
 801c30c:	b0b4      	sub	sp, #208	; 0xd0
 801c30e:	af00      	add	r7, sp, #0
 801c310:	6078      	str	r0, [r7, #4]
 801c312:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c314:	f107 020c 	add.w	r2, r7, #12
 801c318:	23c0      	movs	r3, #192	; 0xc0
 801c31a:	6839      	ldr	r1, [r7, #0]
 801c31c:	6878      	ldr	r0, [r7, #4]
 801c31e:	f7ff ff6d 	bl	801c1fc <parse_name>
 801c322:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 801c326:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c32e:	d101      	bne.n	801c334 <dns_question+0x2a>
 801c330:	2300      	movs	r3, #0
 801c332:	e00b      	b.n	801c34c <dns_question+0x42>

	cp += len;
 801c334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c338:	683a      	ldr	r2, [r7, #0]
 801c33a:	4413      	add	r3, r2
 801c33c:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801c33e:	683b      	ldr	r3, [r7, #0]
 801c340:	3302      	adds	r3, #2
 801c342:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801c344:	683b      	ldr	r3, [r7, #0]
 801c346:	3302      	adds	r3, #2
 801c348:	603b      	str	r3, [r7, #0]

	return cp;
 801c34a:	683b      	ldr	r3, [r7, #0]
}
 801c34c:	4618      	mov	r0, r3
 801c34e:	37d0      	adds	r7, #208	; 0xd0
 801c350:	46bd      	mov	sp, r7
 801c352:	bd80      	pop	{r7, pc}

0801c354 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801c354:	b580      	push	{r7, lr}
 801c356:	b0b6      	sub	sp, #216	; 0xd8
 801c358:	af00      	add	r7, sp, #0
 801c35a:	60f8      	str	r0, [r7, #12]
 801c35c:	60b9      	str	r1, [r7, #8]
 801c35e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c360:	f107 0210 	add.w	r2, r7, #16
 801c364:	23c0      	movs	r3, #192	; 0xc0
 801c366:	68b9      	ldr	r1, [r7, #8]
 801c368:	68f8      	ldr	r0, [r7, #12]
 801c36a:	f7ff ff47 	bl	801c1fc <parse_name>
 801c36e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 801c372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c37a:	d101      	bne.n	801c380 <dns_answer+0x2c>
 801c37c:	2300      	movs	r3, #0
 801c37e:	e0f9      	b.n	801c574 <dns_answer+0x220>

	cp += len;
 801c380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c384:	68ba      	ldr	r2, [r7, #8]
 801c386:	4413      	add	r3, r2
 801c388:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801c38a:	68b8      	ldr	r0, [r7, #8]
 801c38c:	f7ff ff03 	bl	801c196 <get16>
 801c390:	4603      	mov	r3, r0
 801c392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 801c396:	68bb      	ldr	r3, [r7, #8]
 801c398:	3302      	adds	r3, #2
 801c39a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	3302      	adds	r3, #2
 801c3a0:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801c3a2:	68bb      	ldr	r3, [r7, #8]
 801c3a4:	3304      	adds	r3, #4
 801c3a6:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801c3a8:	68bb      	ldr	r3, [r7, #8]
 801c3aa:	3302      	adds	r3, #2
 801c3ac:	60bb      	str	r3, [r7, #8]


	switch (type)
 801c3ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c3b2:	2b10      	cmp	r3, #16
 801c3b4:	f000 80da 	beq.w	801c56c <dns_answer+0x218>
 801c3b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c3bc:	2b10      	cmp	r3, #16
 801c3be:	f300 80d7 	bgt.w	801c570 <dns_answer+0x21c>
 801c3c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c3c6:	2b0f      	cmp	r3, #15
 801c3c8:	d07d      	beq.n	801c4c6 <dns_answer+0x172>
 801c3ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c3ce:	2b0f      	cmp	r3, #15
 801c3d0:	f300 80ce 	bgt.w	801c570 <dns_answer+0x21c>
 801c3d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c3d8:	2b0c      	cmp	r3, #12
 801c3da:	dc26      	bgt.n	801c42a <dns_answer+0xd6>
 801c3dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	f340 80c5 	ble.w	801c570 <dns_answer+0x21c>
 801c3e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c3ea:	2201      	movs	r2, #1
 801c3ec:	fa02 f303 	lsl.w	r3, r2, r3
 801c3f0:	f241 32a4 	movw	r2, #5028	; 0x13a4
 801c3f4:	401a      	ands	r2, r3
 801c3f6:	2a00      	cmp	r2, #0
 801c3f8:	bf14      	ite	ne
 801c3fa:	2201      	movne	r2, #1
 801c3fc:	2200      	moveq	r2, #0
 801c3fe:	b2d2      	uxtb	r2, r2
 801c400:	2a00      	cmp	r2, #0
 801c402:	d133      	bne.n	801c46c <dns_answer+0x118>
 801c404:	f003 0240 	and.w	r2, r3, #64	; 0x40
 801c408:	2a00      	cmp	r2, #0
 801c40a:	bf14      	ite	ne
 801c40c:	2201      	movne	r2, #1
 801c40e:	2200      	moveq	r2, #0
 801c410:	b2d2      	uxtb	r2, r2
 801c412:	2a00      	cmp	r2, #0
 801c414:	d170      	bne.n	801c4f8 <dns_answer+0x1a4>
 801c416:	f003 0302 	and.w	r3, r3, #2
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	bf14      	ite	ne
 801c41e:	2301      	movne	r3, #1
 801c420:	2300      	moveq	r3, #0
 801c422:	b2db      	uxtb	r3, r3
 801c424:	2b00      	cmp	r3, #0
 801c426:	d105      	bne.n	801c434 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801c428:	e0a2      	b.n	801c570 <dns_answer+0x21c>
	switch (type)
 801c42a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c42e:	2b0d      	cmp	r3, #13
 801c430:	d032      	beq.n	801c498 <dns_answer+0x144>
		break;
 801c432:	e09d      	b.n	801c570 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	1c5a      	adds	r2, r3, #1
 801c438:	60ba      	str	r2, [r7, #8]
 801c43a:	781a      	ldrb	r2, [r3, #0]
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801c440:	68bb      	ldr	r3, [r7, #8]
 801c442:	1c5a      	adds	r2, r3, #1
 801c444:	60ba      	str	r2, [r7, #8]
 801c446:	687a      	ldr	r2, [r7, #4]
 801c448:	3201      	adds	r2, #1
 801c44a:	781b      	ldrb	r3, [r3, #0]
 801c44c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801c44e:	68bb      	ldr	r3, [r7, #8]
 801c450:	1c5a      	adds	r2, r3, #1
 801c452:	60ba      	str	r2, [r7, #8]
 801c454:	687a      	ldr	r2, [r7, #4]
 801c456:	3202      	adds	r2, #2
 801c458:	781b      	ldrb	r3, [r3, #0]
 801c45a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801c45c:	68bb      	ldr	r3, [r7, #8]
 801c45e:	1c5a      	adds	r2, r3, #1
 801c460:	60ba      	str	r2, [r7, #8]
 801c462:	687a      	ldr	r2, [r7, #4]
 801c464:	3203      	adds	r2, #3
 801c466:	781b      	ldrb	r3, [r3, #0]
 801c468:	7013      	strb	r3, [r2, #0]
		break;
 801c46a:	e082      	b.n	801c572 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c46c:	f107 0210 	add.w	r2, r7, #16
 801c470:	23c0      	movs	r3, #192	; 0xc0
 801c472:	68b9      	ldr	r1, [r7, #8]
 801c474:	68f8      	ldr	r0, [r7, #12]
 801c476:	f7ff fec1 	bl	801c1fc <parse_name>
 801c47a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c47e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c486:	d101      	bne.n	801c48c <dns_answer+0x138>
 801c488:	2300      	movs	r3, #0
 801c48a:	e073      	b.n	801c574 <dns_answer+0x220>
		cp += len;
 801c48c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c490:	68ba      	ldr	r2, [r7, #8]
 801c492:	4413      	add	r3, r2
 801c494:	60bb      	str	r3, [r7, #8]
		break;
 801c496:	e06c      	b.n	801c572 <dns_answer+0x21e>
		len = *cp++;
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	1c5a      	adds	r2, r3, #1
 801c49c:	60ba      	str	r2, [r7, #8]
 801c49e:	781b      	ldrb	r3, [r3, #0]
 801c4a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c4a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c4a8:	68ba      	ldr	r2, [r7, #8]
 801c4aa:	4413      	add	r3, r2
 801c4ac:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801c4ae:	68bb      	ldr	r3, [r7, #8]
 801c4b0:	1c5a      	adds	r2, r3, #1
 801c4b2:	60ba      	str	r2, [r7, #8]
 801c4b4:	781b      	ldrb	r3, [r3, #0]
 801c4b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c4ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c4be:	68ba      	ldr	r2, [r7, #8]
 801c4c0:	4413      	add	r3, r2
 801c4c2:	60bb      	str	r3, [r7, #8]
		break;
 801c4c4:	e055      	b.n	801c572 <dns_answer+0x21e>
		cp += 2;
 801c4c6:	68bb      	ldr	r3, [r7, #8]
 801c4c8:	3302      	adds	r3, #2
 801c4ca:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c4cc:	f107 0210 	add.w	r2, r7, #16
 801c4d0:	23c0      	movs	r3, #192	; 0xc0
 801c4d2:	68b9      	ldr	r1, [r7, #8]
 801c4d4:	68f8      	ldr	r0, [r7, #12]
 801c4d6:	f7ff fe91 	bl	801c1fc <parse_name>
 801c4da:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c4de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4e6:	d101      	bne.n	801c4ec <dns_answer+0x198>
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	e043      	b.n	801c574 <dns_answer+0x220>
		cp += len;
 801c4ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c4f0:	68ba      	ldr	r2, [r7, #8]
 801c4f2:	4413      	add	r3, r2
 801c4f4:	60bb      	str	r3, [r7, #8]
		break;
 801c4f6:	e03c      	b.n	801c572 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c4f8:	f107 0210 	add.w	r2, r7, #16
 801c4fc:	23c0      	movs	r3, #192	; 0xc0
 801c4fe:	68b9      	ldr	r1, [r7, #8]
 801c500:	68f8      	ldr	r0, [r7, #12]
 801c502:	f7ff fe7b 	bl	801c1fc <parse_name>
 801c506:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c50a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c512:	d101      	bne.n	801c518 <dns_answer+0x1c4>
 801c514:	2300      	movs	r3, #0
 801c516:	e02d      	b.n	801c574 <dns_answer+0x220>
		cp += len;
 801c518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c51c:	68ba      	ldr	r2, [r7, #8]
 801c51e:	4413      	add	r3, r2
 801c520:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c522:	f107 0210 	add.w	r2, r7, #16
 801c526:	23c0      	movs	r3, #192	; 0xc0
 801c528:	68b9      	ldr	r1, [r7, #8]
 801c52a:	68f8      	ldr	r0, [r7, #12]
 801c52c:	f7ff fe66 	bl	801c1fc <parse_name>
 801c530:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c53c:	d101      	bne.n	801c542 <dns_answer+0x1ee>
 801c53e:	2300      	movs	r3, #0
 801c540:	e018      	b.n	801c574 <dns_answer+0x220>
		cp += len;
 801c542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c546:	68ba      	ldr	r2, [r7, #8]
 801c548:	4413      	add	r3, r2
 801c54a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c54c:	68bb      	ldr	r3, [r7, #8]
 801c54e:	3304      	adds	r3, #4
 801c550:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	3304      	adds	r3, #4
 801c556:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	3304      	adds	r3, #4
 801c55c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c55e:	68bb      	ldr	r3, [r7, #8]
 801c560:	3304      	adds	r3, #4
 801c562:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c564:	68bb      	ldr	r3, [r7, #8]
 801c566:	3304      	adds	r3, #4
 801c568:	60bb      	str	r3, [r7, #8]
		break;
 801c56a:	e002      	b.n	801c572 <dns_answer+0x21e>
		break;
 801c56c:	bf00      	nop
 801c56e:	e000      	b.n	801c572 <dns_answer+0x21e>
		break;
 801c570:	bf00      	nop
	}

	return cp;
 801c572:	68bb      	ldr	r3, [r7, #8]
}
 801c574:	4618      	mov	r0, r3
 801c576:	37d8      	adds	r7, #216	; 0xd8
 801c578:	46bd      	mov	sp, r7
 801c57a:	bd80      	pop	{r7, pc}

0801c57c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c57c:	b580      	push	{r7, lr}
 801c57e:	b088      	sub	sp, #32
 801c580:	af00      	add	r7, sp, #0
 801c582:	60f8      	str	r0, [r7, #12]
 801c584:	60b9      	str	r1, [r7, #8]
 801c586:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c58c:	2212      	movs	r2, #18
 801c58e:	2100      	movs	r1, #0
 801c590:	68f8      	ldr	r0, [r7, #12]
 801c592:	f011 f9cb 	bl	802d92c <memset>

	pdhdr->id = get16(&msg[0]);
 801c596:	6978      	ldr	r0, [r7, #20]
 801c598:	f7ff fdfd 	bl	801c196 <get16>
 801c59c:	4603      	mov	r3, r0
 801c59e:	461a      	mov	r2, r3
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c5a4:	697b      	ldr	r3, [r7, #20]
 801c5a6:	3302      	adds	r3, #2
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	f7ff fdf4 	bl	801c196 <get16>
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c5b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	da02      	bge.n	801c5c0 <parseDNSMSG+0x44>
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	2201      	movs	r2, #1
 801c5be:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c5c0:	8a7b      	ldrh	r3, [r7, #18]
 801c5c2:	0adb      	lsrs	r3, r3, #11
 801c5c4:	b29b      	uxth	r3, r3
 801c5c6:	b2db      	uxtb	r3, r3
 801c5c8:	f003 030f 	and.w	r3, r3, #15
 801c5cc:	b2da      	uxtb	r2, r3
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c5d2:	8a7b      	ldrh	r3, [r7, #18]
 801c5d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d002      	beq.n	801c5e2 <parseDNSMSG+0x66>
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	2201      	movs	r2, #1
 801c5e0:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c5e2:	8a7b      	ldrh	r3, [r7, #18]
 801c5e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d002      	beq.n	801c5f2 <parseDNSMSG+0x76>
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	2201      	movs	r2, #1
 801c5f0:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c5f2:	8a7b      	ldrh	r3, [r7, #18]
 801c5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d002      	beq.n	801c602 <parseDNSMSG+0x86>
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	2201      	movs	r2, #1
 801c600:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c602:	8a7b      	ldrh	r3, [r7, #18]
 801c604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d002      	beq.n	801c612 <parseDNSMSG+0x96>
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	2201      	movs	r2, #1
 801c610:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c612:	8a7b      	ldrh	r3, [r7, #18]
 801c614:	b2db      	uxtb	r3, r3
 801c616:	f003 030f 	and.w	r3, r3, #15
 801c61a:	b2da      	uxtb	r2, r3
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c620:	697b      	ldr	r3, [r7, #20]
 801c622:	3304      	adds	r3, #4
 801c624:	4618      	mov	r0, r3
 801c626:	f7ff fdb6 	bl	801c196 <get16>
 801c62a:	4603      	mov	r3, r0
 801c62c:	461a      	mov	r2, r3
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c632:	697b      	ldr	r3, [r7, #20]
 801c634:	3306      	adds	r3, #6
 801c636:	4618      	mov	r0, r3
 801c638:	f7ff fdad 	bl	801c196 <get16>
 801c63c:	4603      	mov	r3, r0
 801c63e:	461a      	mov	r2, r3
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c644:	697b      	ldr	r3, [r7, #20]
 801c646:	3308      	adds	r3, #8
 801c648:	4618      	mov	r0, r3
 801c64a:	f7ff fda4 	bl	801c196 <get16>
 801c64e:	4603      	mov	r3, r0
 801c650:	461a      	mov	r2, r3
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c656:	697b      	ldr	r3, [r7, #20]
 801c658:	330a      	adds	r3, #10
 801c65a:	4618      	mov	r0, r3
 801c65c:	f7ff fd9b 	bl	801c196 <get16>
 801c660:	4603      	mov	r3, r0
 801c662:	461a      	mov	r2, r3
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c668:	697b      	ldr	r3, [r7, #20]
 801c66a:	330c      	adds	r3, #12
 801c66c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c66e:	2300      	movs	r3, #0
 801c670:	83fb      	strh	r3, [r7, #30]
 801c672:	e00d      	b.n	801c690 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c674:	69b9      	ldr	r1, [r7, #24]
 801c676:	6978      	ldr	r0, [r7, #20]
 801c678:	f7ff fe47 	bl	801c30a <dns_question>
 801c67c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c67e:	69bb      	ldr	r3, [r7, #24]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d102      	bne.n	801c68a <parseDNSMSG+0x10e>
 801c684:	f04f 33ff 	mov.w	r3, #4294967295
 801c688:	e03b      	b.n	801c702 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c68a:	8bfb      	ldrh	r3, [r7, #30]
 801c68c:	3301      	adds	r3, #1
 801c68e:	83fb      	strh	r3, [r7, #30]
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	895b      	ldrh	r3, [r3, #10]
 801c694:	8bfa      	ldrh	r2, [r7, #30]
 801c696:	429a      	cmp	r2, r3
 801c698:	d3ec      	bcc.n	801c674 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c69a:	2300      	movs	r3, #0
 801c69c:	83fb      	strh	r3, [r7, #30]
 801c69e:	e00e      	b.n	801c6be <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c6a0:	687a      	ldr	r2, [r7, #4]
 801c6a2:	69b9      	ldr	r1, [r7, #24]
 801c6a4:	6978      	ldr	r0, [r7, #20]
 801c6a6:	f7ff fe55 	bl	801c354 <dns_answer>
 801c6aa:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c6ac:	69bb      	ldr	r3, [r7, #24]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d102      	bne.n	801c6b8 <parseDNSMSG+0x13c>
 801c6b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6b6:	e024      	b.n	801c702 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c6b8:	8bfb      	ldrh	r3, [r7, #30]
 801c6ba:	3301      	adds	r3, #1
 801c6bc:	83fb      	strh	r3, [r7, #30]
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	899b      	ldrh	r3, [r3, #12]
 801c6c2:	8bfa      	ldrh	r2, [r7, #30]
 801c6c4:	429a      	cmp	r2, r3
 801c6c6:	d3eb      	bcc.n	801c6a0 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	83fb      	strh	r3, [r7, #30]
 801c6cc:	e002      	b.n	801c6d4 <parseDNSMSG+0x158>
 801c6ce:	8bfb      	ldrh	r3, [r7, #30]
 801c6d0:	3301      	adds	r3, #1
 801c6d2:	83fb      	strh	r3, [r7, #30]
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	89db      	ldrh	r3, [r3, #14]
 801c6d8:	8bfa      	ldrh	r2, [r7, #30]
 801c6da:	429a      	cmp	r2, r3
 801c6dc:	d3f7      	bcc.n	801c6ce <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c6de:	2300      	movs	r3, #0
 801c6e0:	83fb      	strh	r3, [r7, #30]
 801c6e2:	e002      	b.n	801c6ea <parseDNSMSG+0x16e>
 801c6e4:	8bfb      	ldrh	r3, [r7, #30]
 801c6e6:	3301      	adds	r3, #1
 801c6e8:	83fb      	strh	r3, [r7, #30]
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	8a1b      	ldrh	r3, [r3, #16]
 801c6ee:	8bfa      	ldrh	r2, [r7, #30]
 801c6f0:	429a      	cmp	r2, r3
 801c6f2:	d3f7      	bcc.n	801c6e4 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	7a1b      	ldrb	r3, [r3, #8]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d101      	bne.n	801c700 <parseDNSMSG+0x184>
 801c6fc:	2301      	movs	r3, #1
 801c6fe:	e000      	b.n	801c702 <parseDNSMSG+0x186>
	else return 0;
 801c700:	2300      	movs	r3, #0
}
 801c702:	4618      	mov	r0, r3
 801c704:	3720      	adds	r7, #32
 801c706:	46bd      	mov	sp, r7
 801c708:	bd80      	pop	{r7, pc}
	...

0801c70c <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b0b8      	sub	sp, #224	; 0xe0
 801c710:	af00      	add	r7, sp, #0
 801c712:	60b9      	str	r1, [r7, #8]
 801c714:	607a      	str	r2, [r7, #4]
 801c716:	461a      	mov	r2, r3
 801c718:	4603      	mov	r3, r0
 801c71a:	81fb      	strh	r3, [r7, #14]
 801c71c:	4613      	mov	r3, r2
 801c71e:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 801c726:	4b57      	ldr	r3, [pc, #348]	; (801c884 <dns_makequery+0x178>)
 801c728:	881b      	ldrh	r3, [r3, #0]
 801c72a:	3301      	adds	r3, #1
 801c72c:	b29a      	uxth	r2, r3
 801c72e:	4b55      	ldr	r3, [pc, #340]	; (801c884 <dns_makequery+0x178>)
 801c730:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c732:	4b54      	ldr	r3, [pc, #336]	; (801c884 <dns_makequery+0x178>)
 801c734:	881b      	ldrh	r3, [r3, #0]
 801c736:	4619      	mov	r1, r3
 801c738:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c73c:	f7ff fd43 	bl	801c1c6 <put16>
 801c740:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c744:	89fb      	ldrh	r3, [r7, #14]
 801c746:	02db      	lsls	r3, r3, #11
 801c748:	b21b      	sxth	r3, r3
 801c74a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c74e:	b21b      	sxth	r3, r3
 801c750:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 801c754:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 801c758:	4619      	mov	r1, r3
 801c75a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c75e:	f7ff fd32 	bl	801c1c6 <put16>
 801c762:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 801c766:	2101      	movs	r1, #1
 801c768:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c76c:	f7ff fd2b 	bl	801c1c6 <put16>
 801c770:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c774:	2100      	movs	r1, #0
 801c776:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c77a:	f7ff fd24 	bl	801c1c6 <put16>
 801c77e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c782:	2100      	movs	r1, #0
 801c784:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c788:	f7ff fd1d 	bl	801c1c6 <put16>
 801c78c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c790:	2100      	movs	r1, #0
 801c792:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c796:	f7ff fd16 	bl	801c1c6 <put16>
 801c79a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 801c79e:	f107 0310 	add.w	r3, r7, #16
 801c7a2:	68b9      	ldr	r1, [r7, #8]
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f011 fa8e 	bl	802dcc6 <strcpy>
	dname = sname;
 801c7aa:	f107 0310 	add.w	r3, r7, #16
 801c7ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 801c7b2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c7b6:	f7f3 fd73 	bl	80102a0 <strlen>
 801c7ba:	4603      	mov	r3, r0
 801c7bc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c7c0:	212e      	movs	r1, #46	; 0x2e
 801c7c2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c7c6:	f011 f8c8 	bl	802d95a <strchr>
 801c7ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c7ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d006      	beq.n	801c7e4 <dns_makequery+0xd8>
 801c7d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c7da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c7de:	1ad3      	subs	r3, r2, r3
 801c7e0:	81bb      	strh	r3, [r7, #12]
 801c7e2:	e002      	b.n	801c7ea <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c7e4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801c7e8:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c7ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c7ee:	1c5a      	adds	r2, r3, #1
 801c7f0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c7f4:	89ba      	ldrh	r2, [r7, #12]
 801c7f6:	b2d2      	uxtb	r2, r2
 801c7f8:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c7fa:	89bb      	ldrh	r3, [r7, #12]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d029      	beq.n	801c854 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c800:	89bb      	ldrh	r3, [r7, #12]
 801c802:	461a      	mov	r2, r3
 801c804:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c808:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c80c:	f011 f8e8 	bl	802d9e0 <strncpy>
		cp += len;
 801c810:	89bb      	ldrh	r3, [r7, #12]
 801c812:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c816:	4413      	add	r3, r2
 801c818:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801c81c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c820:	2b00      	cmp	r3, #0
 801c822:	d107      	bne.n	801c834 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c828:	1c5a      	adds	r2, r3, #1
 801c82a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c82e:	2200      	movs	r2, #0
 801c830:	701a      	strb	r2, [r3, #0]
			break;
 801c832:	e010      	b.n	801c856 <dns_makequery+0x14a>
		}
		dname += len+1;
 801c834:	89bb      	ldrh	r3, [r7, #12]
 801c836:	3301      	adds	r3, #1
 801c838:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c83c:	4413      	add	r3, r2
 801c83e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 801c842:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801c846:	89bb      	ldrh	r3, [r7, #12]
 801c848:	1ad3      	subs	r3, r2, r3
 801c84a:	b29b      	uxth	r3, r3
 801c84c:	3b01      	subs	r3, #1
 801c84e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 801c852:	e7b5      	b.n	801c7c0 <dns_makequery+0xb4>
		if (len == 0) break;
 801c854:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c856:	2101      	movs	r1, #1
 801c858:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c85c:	f7ff fcb3 	bl	801c1c6 <put16>
 801c860:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c864:	2101      	movs	r1, #1
 801c866:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c86a:	f7ff fcac 	bl	801c1c6 <put16>
 801c86e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c872:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	1ad3      	subs	r3, r2, r3
 801c87a:	b21b      	sxth	r3, r3
}
 801c87c:	4618      	mov	r0, r3
 801c87e:	37e0      	adds	r7, #224	; 0xe0
 801c880:	46bd      	mov	sp, r7
 801c882:	bd80      	pop	{r7, pc}
 801c884:	200009e2 	.word	0x200009e2

0801c888 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c888:	b480      	push	{r7}
 801c88a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c88c:	4b0f      	ldr	r3, [pc, #60]	; (801c8cc <check_DNS_timeout+0x44>)
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	2b02      	cmp	r3, #2
 801c892:	d914      	bls.n	801c8be <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c894:	4b0d      	ldr	r3, [pc, #52]	; (801c8cc <check_DNS_timeout+0x44>)
 801c896:	2200      	movs	r2, #0
 801c898:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c89a:	4b0d      	ldr	r3, [pc, #52]	; (801c8d0 <check_DNS_timeout+0x48>)
 801c89c:	781b      	ldrb	r3, [r3, #0]
 801c89e:	2b01      	cmp	r3, #1
 801c8a0:	d905      	bls.n	801c8ae <check_DNS_timeout+0x26>
			retry_count = 0;
 801c8a2:	4b0b      	ldr	r3, [pc, #44]	; (801c8d0 <check_DNS_timeout+0x48>)
 801c8a4:	2200      	movs	r2, #0
 801c8a6:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c8a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8ac:	e008      	b.n	801c8c0 <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c8ae:	4b08      	ldr	r3, [pc, #32]	; (801c8d0 <check_DNS_timeout+0x48>)
 801c8b0:	781b      	ldrb	r3, [r3, #0]
 801c8b2:	3301      	adds	r3, #1
 801c8b4:	b2da      	uxtb	r2, r3
 801c8b6:	4b06      	ldr	r3, [pc, #24]	; (801c8d0 <check_DNS_timeout+0x48>)
 801c8b8:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	e000      	b.n	801c8c0 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801c8be:	2301      	movs	r3, #1
}
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c8:	4770      	bx	lr
 801c8ca:	bf00      	nop
 801c8cc:	200009e4 	.word	0x200009e4
 801c8d0:	200009e8 	.word	0x200009e8

0801c8d4 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801c8d4:	b480      	push	{r7}
 801c8d6:	b083      	sub	sp, #12
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	4603      	mov	r3, r0
 801c8dc:	6039      	str	r1, [r7, #0]
 801c8de:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801c8e0:	4a07      	ldr	r2, [pc, #28]	; (801c900 <DNS_init+0x2c>)
 801c8e2:	79fb      	ldrb	r3, [r7, #7]
 801c8e4:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801c8e6:	4a07      	ldr	r2, [pc, #28]	; (801c904 <DNS_init+0x30>)
 801c8e8:	683b      	ldr	r3, [r7, #0]
 801c8ea:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801c8ec:	4b06      	ldr	r3, [pc, #24]	; (801c908 <DNS_init+0x34>)
 801c8ee:	f241 1222 	movw	r2, #4386	; 0x1122
 801c8f2:	801a      	strh	r2, [r3, #0]
}
 801c8f4:	bf00      	nop
 801c8f6:	370c      	adds	r7, #12
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8fe:	4770      	bx	lr
 801c900:	200009e0 	.word	0x200009e0
 801c904:	200009dc 	.word	0x200009dc
 801c908:	200009e2 	.word	0x200009e2

0801c90c <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801c90c:	b590      	push	{r4, r7, lr}
 801c90e:	b08f      	sub	sp, #60	; 0x3c
 801c910:	af02      	add	r7, sp, #8
 801c912:	60f8      	str	r0, [r7, #12]
 801c914:	60b9      	str	r1, [r7, #8]
 801c916:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801c918:	4b3b      	ldr	r3, [pc, #236]	; (801ca08 <DNS_run+0xfc>)
 801c91a:	2200      	movs	r2, #0
 801c91c:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801c91e:	4b3b      	ldr	r3, [pc, #236]	; (801ca0c <DNS_run+0x100>)
 801c920:	2200      	movs	r2, #0
 801c922:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801c924:	4b3a      	ldr	r3, [pc, #232]	; (801ca10 <DNS_run+0x104>)
 801c926:	7818      	ldrb	r0, [r3, #0]
 801c928:	2300      	movs	r3, #0
 801c92a:	2200      	movs	r2, #0
 801c92c:	2102      	movs	r1, #2
 801c92e:	f7fc fa4f 	bl	8018dd0 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801c932:	4b38      	ldr	r3, [pc, #224]	; (801ca14 <DNS_run+0x108>)
 801c934:	681a      	ldr	r2, [r3, #0]
 801c936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c93a:	68b9      	ldr	r1, [r7, #8]
 801c93c:	2000      	movs	r0, #0
 801c93e:	f7ff fee5 	bl	801c70c <dns_makequery>
 801c942:	4603      	mov	r3, r0
 801c944:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c946:	4b32      	ldr	r3, [pc, #200]	; (801ca10 <DNS_run+0x104>)
 801c948:	7818      	ldrb	r0, [r3, #0]
 801c94a:	4b32      	ldr	r3, [pc, #200]	; (801ca14 <DNS_run+0x108>)
 801c94c:	6819      	ldr	r1, [r3, #0]
 801c94e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c950:	2335      	movs	r3, #53	; 0x35
 801c952:	9300      	str	r3, [sp, #0]
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	f7fc ff19 	bl	801978c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c95a:	4b2d      	ldr	r3, [pc, #180]	; (801ca10 <DNS_run+0x104>)
 801c95c:	781b      	ldrb	r3, [r3, #0]
 801c95e:	4618      	mov	r0, r3
 801c960:	f7fc f8eb 	bl	8018b3a <getSn_RX_RSR>
 801c964:	4603      	mov	r3, r0
 801c966:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c968:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d029      	beq.n	801c9c2 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801c96e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c974:	d902      	bls.n	801c97c <DNS_run+0x70>
 801c976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c97a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801c97c:	4b24      	ldr	r3, [pc, #144]	; (801ca10 <DNS_run+0x104>)
 801c97e:	7818      	ldrb	r0, [r3, #0]
 801c980:	4b24      	ldr	r3, [pc, #144]	; (801ca14 <DNS_run+0x108>)
 801c982:	6819      	ldr	r1, [r3, #0]
 801c984:	f107 0414 	add.w	r4, r7, #20
 801c988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c98a:	f107 0312 	add.w	r3, r7, #18
 801c98e:	9300      	str	r3, [sp, #0]
 801c990:	4623      	mov	r3, r4
 801c992:	f7fd f831 	bl	80199f8 <recvfrom>
 801c996:	4603      	mov	r3, r0
 801c998:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801c99a:	4b1e      	ldr	r3, [pc, #120]	; (801ca14 <DNS_run+0x108>)
 801c99c:	6819      	ldr	r1, [r3, #0]
 801c99e:	f107 0318 	add.w	r3, r7, #24
 801c9a2:	687a      	ldr	r2, [r7, #4]
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	f7ff fde9 	bl	801c57c <parseDNSMSG>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 801c9b0:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801c9b2:	4b17      	ldr	r3, [pc, #92]	; (801ca10 <DNS_run+0x104>)
 801c9b4:	781b      	ldrb	r3, [r3, #0]
 801c9b6:	4618      	mov	r0, r3
 801c9b8:	f7fc fb1e 	bl	8018ff8 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801c9bc:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801c9c0:	e01e      	b.n	801ca00 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801c9c2:	f7ff ff61 	bl	801c888 <check_DNS_timeout>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 801c9cc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	da06      	bge.n	801c9e2 <DNS_run+0xd6>
			close(DNS_SOCKET);
 801c9d4:	4b0e      	ldr	r3, [pc, #56]	; (801ca10 <DNS_run+0x104>)
 801c9d6:	781b      	ldrb	r3, [r3, #0]
 801c9d8:	4618      	mov	r0, r3
 801c9da:	f7fc fb0d 	bl	8018ff8 <close>
			return 0; // timeout occurred
 801c9de:	2300      	movs	r3, #0
 801c9e0:	e00e      	b.n	801ca00 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801c9e2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d1b7      	bne.n	801c95a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c9ea:	4b09      	ldr	r3, [pc, #36]	; (801ca10 <DNS_run+0x104>)
 801c9ec:	7818      	ldrb	r0, [r3, #0]
 801c9ee:	4b09      	ldr	r3, [pc, #36]	; (801ca14 <DNS_run+0x108>)
 801c9f0:	6819      	ldr	r1, [r3, #0]
 801c9f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c9f4:	2335      	movs	r3, #53	; 0x35
 801c9f6:	9300      	str	r3, [sp, #0]
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	f7fc fec7 	bl	801978c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c9fe:	e7ac      	b.n	801c95a <DNS_run+0x4e>
}
 801ca00:	4618      	mov	r0, r3
 801ca02:	3734      	adds	r7, #52	; 0x34
 801ca04:	46bd      	mov	sp, r7
 801ca06:	bd90      	pop	{r4, r7, pc}
 801ca08:	200009e8 	.word	0x200009e8
 801ca0c:	200009e4 	.word	0x200009e4
 801ca10:	200009e0 	.word	0x200009e0
 801ca14:	200009dc 	.word	0x200009dc

0801ca18 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801ca18:	b480      	push	{r7}
 801ca1a:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801ca1c:	4b04      	ldr	r3, [pc, #16]	; (801ca30 <DNS_time_handler+0x18>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	3301      	adds	r3, #1
 801ca22:	4a03      	ldr	r2, [pc, #12]	; (801ca30 <DNS_time_handler+0x18>)
 801ca24:	6013      	str	r3, [r2, #0]
}
 801ca26:	bf00      	nop
 801ca28:	46bd      	mov	sp, r7
 801ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca2e:	4770      	bx	lr
 801ca30:	200009e4 	.word	0x200009e4

0801ca34 <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801ca34:	b480      	push	{r7}
 801ca36:	af00      	add	r7, sp, #0
 801ca38:	bf00      	nop
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca40:	4770      	bx	lr
	...

0801ca44 <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801ca44:	b480      	push	{r7}
 801ca46:	b083      	sub	sp, #12
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	6078      	str	r0, [r7, #4]
 801ca4c:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d002      	beq.n	801ca5a <dns_service_reg_cb_mutex+0x16>
 801ca54:	4a07      	ldr	r2, [pc, #28]	; (801ca74 <dns_service_reg_cb_mutex+0x30>)
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801ca5a:	683b      	ldr	r3, [r7, #0]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d002      	beq.n	801ca66 <dns_service_reg_cb_mutex+0x22>
 801ca60:	4a05      	ldr	r2, [pc, #20]	; (801ca78 <dns_service_reg_cb_mutex+0x34>)
 801ca62:	683b      	ldr	r3, [r7, #0]
 801ca64:	6013      	str	r3, [r2, #0]

}
 801ca66:	bf00      	nop
 801ca68:	370c      	adds	r7, #12
 801ca6a:	46bd      	mov	sp, r7
 801ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca70:	4770      	bx	lr
 801ca72:	bf00      	nop
 801ca74:	20000114 	.word	0x20000114
 801ca78:	20000118 	.word	0x20000118

0801ca7c <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801ca7c:	b480      	push	{r7}
 801ca7e:	b083      	sub	sp, #12
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d002      	beq.n	801ca90 <dns_service_reg_cb_net_ready+0x14>
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	4a03      	ldr	r2, [pc, #12]	; (801ca9c <dns_service_reg_cb_net_ready+0x20>)
 801ca8e:	6013      	str	r3, [r2, #0]

}
 801ca90:	bf00      	nop
 801ca92:	370c      	adds	r7, #12
 801ca94:	46bd      	mov	sp, r7
 801ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca9a:	4770      	bx	lr
 801ca9c:	2000011c 	.word	0x2000011c

0801caa0 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b082      	sub	sp, #8
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	4603      	mov	r3, r0
 801caa8:	6039      	str	r1, [r7, #0]
 801caaa:	71fb      	strb	r3, [r7, #7]
 801caac:	4613      	mov	r3, r2
 801caae:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801cab0:	88bb      	ldrh	r3, [r7, #4]
 801cab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cab6:	d202      	bcs.n	801cabe <dns_service_init+0x1e>
 801cab8:	f04f 33ff 	mov.w	r3, #4294967295
 801cabc:	e005      	b.n	801caca <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801cabe:	79fb      	ldrb	r3, [r7, #7]
 801cac0:	6839      	ldr	r1, [r7, #0]
 801cac2:	4618      	mov	r0, r3
 801cac4:	f7ff ff06 	bl	801c8d4 <DNS_init>
	return 0;
 801cac8:	2300      	movs	r3, #0
}
 801caca:	4618      	mov	r0, r3
 801cacc:	3708      	adds	r7, #8
 801cace:	46bd      	mov	sp, r7
 801cad0:	bd80      	pop	{r7, pc}
	...

0801cad4 <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801cad4:	b480      	push	{r7}
 801cad6:	b083      	sub	sp, #12
 801cad8:	af00      	add	r7, sp, #0
 801cada:	6078      	str	r0, [r7, #4]
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801cae2:	4b04      	ldr	r3, [pc, #16]	; (801caf4 <dns_service_set_dns_ip+0x20>)
 801cae4:	601a      	str	r2, [r3, #0]
}
 801cae6:	bf00      	nop
 801cae8:	370c      	adds	r7, #12
 801caea:	46bd      	mov	sp, r7
 801caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caf0:	4770      	bx	lr
 801caf2:	bf00      	nop
 801caf4:	200009ec 	.word	0x200009ec

0801caf8 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801caf8:	b580      	push	{r7, lr}
 801cafa:	b084      	sub	sp, #16
 801cafc:	af00      	add	r7, sp, #0
 801cafe:	6078      	str	r0, [r7, #4]
 801cb00:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801cb02:	4b0e      	ldr	r3, [pc, #56]	; (801cb3c <dns_service_resolve_name+0x44>)
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady()){
 801cb08:	4b0d      	ldr	r3, [pc, #52]	; (801cb40 <dns_service_resolve_name+0x48>)
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	4798      	blx	r3
 801cb0e:	4603      	mov	r3, r0
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d007      	beq.n	801cb24 <dns_service_resolve_name+0x2c>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801cb14:	683a      	ldr	r2, [r7, #0]
 801cb16:	6879      	ldr	r1, [r7, #4]
 801cb18:	480a      	ldr	r0, [pc, #40]	; (801cb44 <dns_service_resolve_name+0x4c>)
 801cb1a:	f7ff fef7 	bl	801c90c <DNS_run>
 801cb1e:	4603      	mov	r3, r0
 801cb20:	73fb      	strb	r3, [r7, #15]
 801cb22:	e001      	b.n	801cb28 <dns_service_resolve_name+0x30>
	}else{
		err = -1;
 801cb24:	23ff      	movs	r3, #255	; 0xff
 801cb26:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801cb28:	4b07      	ldr	r3, [pc, #28]	; (801cb48 <dns_service_resolve_name+0x50>)
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	4798      	blx	r3
#endif
	return err;
 801cb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cb32:	4618      	mov	r0, r3
 801cb34:	3710      	adds	r7, #16
 801cb36:	46bd      	mov	sp, r7
 801cb38:	bd80      	pop	{r7, pc}
 801cb3a:	bf00      	nop
 801cb3c:	20000114 	.word	0x20000114
 801cb40:	2000011c 	.word	0x2000011c
 801cb44:	200009ec 	.word	0x200009ec
 801cb48:	20000118 	.word	0x20000118

0801cb4c <dns_service_increment_second>:

void dns_service_increment_second(void){
 801cb4c:	b580      	push	{r7, lr}
 801cb4e:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801cb50:	f7ff ff62 	bl	801ca18 <DNS_time_handler>
}
 801cb54:	bf00      	nop
 801cb56:	bd80      	pop	{r7, pc}

0801cb58 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801cb58:	b580      	push	{r7, lr}
 801cb5a:	b086      	sub	sp, #24
 801cb5c:	af00      	add	r7, sp, #0
 801cb5e:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d101      	bne.n	801cb6a <isValidIPv4+0x12>
        return false;
 801cb66:	2300      	movs	r3, #0
 801cb68:	e068      	b.n	801cc3c <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801cb6a:	2300      	movs	r3, #0
 801cb6c:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801cb6e:	2300      	movs	r3, #0
 801cb70:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801cb72:	2300      	movs	r3, #0
 801cb74:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801cb76:	2300      	movs	r3, #0
 801cb78:	60bb      	str	r3, [r7, #8]
 801cb7a:	e043      	b.n	801cc04 <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801cb7c:	687a      	ldr	r2, [r7, #4]
 801cb7e:	68bb      	ldr	r3, [r7, #8]
 801cb80:	4413      	add	r3, r2
 801cb82:	781b      	ldrb	r3, [r3, #0]
 801cb84:	3b30      	subs	r3, #48	; 0x30
 801cb86:	2b09      	cmp	r3, #9
 801cb88:	d818      	bhi.n	801cbbc <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801cb8a:	697a      	ldr	r2, [r7, #20]
 801cb8c:	4613      	mov	r3, r2
 801cb8e:	009b      	lsls	r3, r3, #2
 801cb90:	4413      	add	r3, r2
 801cb92:	005b      	lsls	r3, r3, #1
 801cb94:	4619      	mov	r1, r3
 801cb96:	687a      	ldr	r2, [r7, #4]
 801cb98:	68bb      	ldr	r3, [r7, #8]
 801cb9a:	4413      	add	r3, r2
 801cb9c:	781b      	ldrb	r3, [r3, #0]
 801cb9e:	3b30      	subs	r3, #48	; 0x30
 801cba0:	440b      	add	r3, r1
 801cba2:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801cba4:	697b      	ldr	r3, [r7, #20]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	db02      	blt.n	801cbb0 <isValidIPv4+0x58>
 801cbaa:	697b      	ldr	r3, [r7, #20]
 801cbac:	2bff      	cmp	r3, #255	; 0xff
 801cbae:	dd01      	ble.n	801cbb4 <isValidIPv4+0x5c>
                return false;
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	e043      	b.n	801cc3c <isValidIPv4+0xe4>
            }

            segmentLength++;
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	3301      	adds	r3, #1
 801cbb8:	60fb      	str	r3, [r7, #12]
 801cbba:	e020      	b.n	801cbfe <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801cbbc:	687a      	ldr	r2, [r7, #4]
 801cbbe:	68bb      	ldr	r3, [r7, #8]
 801cbc0:	4413      	add	r3, r2
 801cbc2:	781b      	ldrb	r3, [r3, #0]
 801cbc4:	2b2e      	cmp	r3, #46	; 0x2e
 801cbc6:	d118      	bne.n	801cbfa <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	2b01      	cmp	r3, #1
 801cbcc:	dd09      	ble.n	801cbe2 <isValidIPv4+0x8a>
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	68ba      	ldr	r2, [r7, #8]
 801cbd2:	1ad3      	subs	r3, r2, r3
 801cbd4:	687a      	ldr	r2, [r7, #4]
 801cbd6:	4413      	add	r3, r2
 801cbd8:	781b      	ldrb	r3, [r3, #0]
 801cbda:	2b30      	cmp	r3, #48	; 0x30
 801cbdc:	d101      	bne.n	801cbe2 <isValidIPv4+0x8a>
                return false;
 801cbde:	2300      	movs	r3, #0
 801cbe0:	e02c      	b.n	801cc3c <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	617b      	str	r3, [r7, #20]
            count++;
 801cbe6:	693b      	ldr	r3, [r7, #16]
 801cbe8:	3301      	adds	r3, #1
 801cbea:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801cbec:	2300      	movs	r3, #0
 801cbee:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801cbf0:	693b      	ldr	r3, [r7, #16]
 801cbf2:	2b03      	cmp	r3, #3
 801cbf4:	dd03      	ble.n	801cbfe <isValidIPv4+0xa6>
                return false;
 801cbf6:	2300      	movs	r3, #0
 801cbf8:	e020      	b.n	801cc3c <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	e01e      	b.n	801cc3c <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801cbfe:	68bb      	ldr	r3, [r7, #8]
 801cc00:	3301      	adds	r3, #1
 801cc02:	60bb      	str	r3, [r7, #8]
 801cc04:	687a      	ldr	r2, [r7, #4]
 801cc06:	68bb      	ldr	r3, [r7, #8]
 801cc08:	4413      	add	r3, r2
 801cc0a:	781b      	ldrb	r3, [r3, #0]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d1b5      	bne.n	801cb7c <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	2b01      	cmp	r3, #1
 801cc14:	dd0c      	ble.n	801cc30 <isValidIPv4+0xd8>
 801cc16:	6878      	ldr	r0, [r7, #4]
 801cc18:	f7f3 fb42 	bl	80102a0 <strlen>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	1ad3      	subs	r3, r2, r3
 801cc22:	687a      	ldr	r2, [r7, #4]
 801cc24:	4413      	add	r3, r2
 801cc26:	781b      	ldrb	r3, [r3, #0]
 801cc28:	2b30      	cmp	r3, #48	; 0x30
 801cc2a:	d101      	bne.n	801cc30 <isValidIPv4+0xd8>
        return false;
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	e005      	b.n	801cc3c <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801cc30:	693b      	ldr	r3, [r7, #16]
 801cc32:	2b03      	cmp	r3, #3
 801cc34:	bf0c      	ite	eq
 801cc36:	2301      	moveq	r3, #1
 801cc38:	2300      	movne	r3, #0
 801cc3a:	b2db      	uxtb	r3, r3
}
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	3718      	adds	r7, #24
 801cc40:	46bd      	mov	sp, r7
 801cc42:	bd80      	pop	{r7, pc}

0801cc44 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801cc44:	b480      	push	{r7}
 801cc46:	b085      	sub	sp, #20
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	60f8      	str	r0, [r7, #12]
 801cc4c:	60b9      	str	r1, [r7, #8]
 801cc4e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	68ba      	ldr	r2, [r7, #8]
 801cc54:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	687a      	ldr	r2, [r7, #4]
 801cc5a:	601a      	str	r2, [r3, #0]
}
 801cc5c:	bf00      	nop
 801cc5e:	3714      	adds	r7, #20
 801cc60:	46bd      	mov	sp, r7
 801cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc66:	4770      	bx	lr

0801cc68 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801cc68:	b480      	push	{r7}
 801cc6a:	b083      	sub	sp, #12
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc78:	4293      	cmp	r3, r2
 801cc7a:	d003      	beq.n	801cc84 <getNextPacketId+0x1c>
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	3301      	adds	r3, #1
 801cc82:	e000      	b.n	801cc86 <getNextPacketId+0x1e>
 801cc84:	2301      	movs	r3, #1
 801cc86:	687a      	ldr	r2, [r7, #4]
 801cc88:	6013      	str	r3, [r2, #0]
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
}
 801cc8e:	4618      	mov	r0, r3
 801cc90:	370c      	adds	r7, #12
 801cc92:	46bd      	mov	sp, r7
 801cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc98:	4770      	bx	lr

0801cc9a <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801cc9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc9c:	b087      	sub	sp, #28
 801cc9e:	af00      	add	r7, sp, #0
 801cca0:	60f8      	str	r0, [r7, #12]
 801cca2:	60b9      	str	r1, [r7, #8]
 801cca4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801cca6:	f04f 33ff 	mov.w	r3, #4294967295
 801ccaa:	617b      	str	r3, [r7, #20]
        sent = 0;
 801ccac:	2300      	movs	r3, #0
 801ccae:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801ccb0:	e018      	b.n	801cce4 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ccb6:	689c      	ldr	r4, [r3, #8]
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	691a      	ldr	r2, [r3, #16]
 801ccc0:	693b      	ldr	r3, [r7, #16]
 801ccc2:	18d6      	adds	r6, r2, r3
 801ccc4:	6878      	ldr	r0, [r7, #4]
 801ccc6:	f000 fccb 	bl	801d660 <TimerLeftMS>
 801ccca:	4603      	mov	r3, r0
 801cccc:	68ba      	ldr	r2, [r7, #8]
 801ccce:	4631      	mov	r1, r6
 801ccd0:	4628      	mov	r0, r5
 801ccd2:	47a0      	blx	r4
 801ccd4:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801ccd6:	697b      	ldr	r3, [r7, #20]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	db0e      	blt.n	801ccfa <sendPacket+0x60>
            break;
        sent += rc;
 801ccdc:	693a      	ldr	r2, [r7, #16]
 801ccde:	697b      	ldr	r3, [r7, #20]
 801cce0:	4413      	add	r3, r2
 801cce2:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801cce4:	693a      	ldr	r2, [r7, #16]
 801cce6:	68bb      	ldr	r3, [r7, #8]
 801cce8:	429a      	cmp	r2, r3
 801ccea:	da07      	bge.n	801ccfc <sendPacket+0x62>
 801ccec:	6878      	ldr	r0, [r7, #4]
 801ccee:	f000 fc75 	bl	801d5dc <TimerIsExpired>
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d0dc      	beq.n	801ccb2 <sendPacket+0x18>
 801ccf8:	e000      	b.n	801ccfc <sendPacket+0x62>
            break;
 801ccfa:	bf00      	nop
    }
    if (sent == length)
 801ccfc:	693a      	ldr	r2, [r7, #16]
 801ccfe:	68bb      	ldr	r3, [r7, #8]
 801cd00:	429a      	cmp	r2, r3
 801cd02:	d10b      	bne.n	801cd1c <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	699b      	ldr	r3, [r3, #24]
 801cd0e:	4619      	mov	r1, r3
 801cd10:	4610      	mov	r0, r2
 801cd12:	f000 fc8d 	bl	801d630 <TimerCountdown>
        rc = SUCCESSS;
 801cd16:	2300      	movs	r3, #0
 801cd18:	617b      	str	r3, [r7, #20]
 801cd1a:	e002      	b.n	801cd22 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 801cd20:	617b      	str	r3, [r7, #20]
    return rc;
 801cd22:	697b      	ldr	r3, [r7, #20]
}
 801cd24:	4618      	mov	r0, r3
 801cd26:	371c      	adds	r7, #28
 801cd28:	46bd      	mov	sp, r7
 801cd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd2c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b086      	sub	sp, #24
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	60f8      	str	r0, [r7, #12]
 801cd34:	60b9      	str	r1, [r7, #8]
 801cd36:	607a      	str	r2, [r7, #4]
 801cd38:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	68ba      	ldr	r2, [r7, #8]
 801cd3e:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cd40:	2300      	movs	r3, #0
 801cd42:	617b      	str	r3, [r7, #20]
 801cd44:	e009      	b.n	801cd5a <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801cd46:	68fa      	ldr	r2, [r7, #12]
 801cd48:	697b      	ldr	r3, [r7, #20]
 801cd4a:	3304      	adds	r3, #4
 801cd4c:	00db      	lsls	r3, r3, #3
 801cd4e:	4413      	add	r3, r2
 801cd50:	2200      	movs	r2, #0
 801cd52:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cd54:	697b      	ldr	r3, [r7, #20]
 801cd56:	3301      	adds	r3, #1
 801cd58:	617b      	str	r3, [r7, #20]
 801cd5a:	697b      	ldr	r3, [r7, #20]
 801cd5c:	2b04      	cmp	r3, #4
 801cd5e:	ddf2      	ble.n	801cd46 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	687a      	ldr	r2, [r7, #4]
 801cd64:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801cd66:	68fb      	ldr	r3, [r7, #12]
 801cd68:	683a      	ldr	r2, [r7, #0]
 801cd6a:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	6a3a      	ldr	r2, [r7, #32]
 801cd70:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd76:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd7c:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	2200      	movs	r2, #0
 801cd82:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801cd84:	68fb      	ldr	r3, [r7, #12]
 801cd86:	2200      	movs	r2, #0
 801cd88:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	2201      	movs	r2, #1
 801cd94:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	3354      	adds	r3, #84	; 0x54
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	f000 fc11 	bl	801d5c2 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801cda0:	bf00      	nop
 801cda2:	3718      	adds	r7, #24
 801cda4:	46bd      	mov	sp, r7
 801cda6:	bd80      	pop	{r7, pc}

0801cda8 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801cda8:	b590      	push	{r4, r7, lr}
 801cdaa:	b08b      	sub	sp, #44	; 0x2c
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	60f8      	str	r0, [r7, #12]
 801cdb0:	60b9      	str	r1, [r7, #8]
 801cdb2:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801cdb4:	2301      	movs	r3, #1
 801cdb6:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801cdb8:	2300      	movs	r3, #0
 801cdba:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801cdbc:	2304      	movs	r3, #4
 801cdbe:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801cdc6:	f04f 33ff 	mov.w	r3, #4294967295
 801cdca:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801cdcc:	6a3b      	ldr	r3, [r7, #32]
 801cdce:	3301      	adds	r3, #1
 801cdd0:	623b      	str	r3, [r7, #32]
 801cdd2:	6a3a      	ldr	r2, [r7, #32]
 801cdd4:	69fb      	ldr	r3, [r7, #28]
 801cdd6:	429a      	cmp	r2, r3
 801cdd8:	dd03      	ble.n	801cde2 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801cdda:	f04f 33ff 	mov.w	r3, #4294967295
 801cdde:	61bb      	str	r3, [r7, #24]
            goto exit;
 801cde0:	e021      	b.n	801ce26 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801cde2:	68fb      	ldr	r3, [r7, #12]
 801cde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cde6:	685c      	ldr	r4, [r3, #4]
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cdec:	f107 0117 	add.w	r1, r7, #23
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	2201      	movs	r2, #1
 801cdf4:	47a0      	blx	r4
 801cdf6:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801cdf8:	69bb      	ldr	r3, [r7, #24]
 801cdfa:	2b01      	cmp	r3, #1
 801cdfc:	d112      	bne.n	801ce24 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801cdfe:	68bb      	ldr	r3, [r7, #8]
 801ce00:	681a      	ldr	r2, [r3, #0]
 801ce02:	7dfb      	ldrb	r3, [r7, #23]
 801ce04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ce0a:	fb01 f303 	mul.w	r3, r1, r3
 801ce0e:	441a      	add	r2, r3
 801ce10:	68bb      	ldr	r3, [r7, #8]
 801ce12:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce16:	01db      	lsls	r3, r3, #7
 801ce18:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801ce1a:	7dfb      	ldrb	r3, [r7, #23]
 801ce1c:	b25b      	sxtb	r3, r3
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	dbd1      	blt.n	801cdc6 <decodePacket+0x1e>
exit:
 801ce22:	e000      	b.n	801ce26 <decodePacket+0x7e>
            goto exit;
 801ce24:	bf00      	nop
    return len;
 801ce26:	6a3b      	ldr	r3, [r7, #32]
}
 801ce28:	4618      	mov	r0, r3
 801ce2a:	372c      	adds	r7, #44	; 0x2c
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd90      	pop	{r4, r7, pc}

0801ce30 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801ce30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce32:	b089      	sub	sp, #36	; 0x24
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	60f8      	str	r0, [r7, #12]
 801ce38:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801ce3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce3e:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801ce40:	2300      	movs	r3, #0
 801ce42:	617b      	str	r3, [r7, #20]
    int len = 0;
 801ce44:	2300      	movs	r3, #0
 801ce46:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801ce48:	2300      	movs	r3, #0
 801ce4a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce50:	685c      	ldr	r4, [r3, #4]
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	695e      	ldr	r6, [r3, #20]
 801ce5a:	68b8      	ldr	r0, [r7, #8]
 801ce5c:	f000 fc00 	bl	801d660 <TimerLeftMS>
 801ce60:	4603      	mov	r3, r0
 801ce62:	2201      	movs	r2, #1
 801ce64:	4631      	mov	r1, r6
 801ce66:	4628      	mov	r0, r5
 801ce68:	47a0      	blx	r4
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	2b01      	cmp	r3, #1
 801ce6e:	d13b      	bne.n	801cee8 <readPacket+0xb8>
        goto exit;

    len = 1;
 801ce70:	2301      	movs	r3, #1
 801ce72:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801ce74:	68b8      	ldr	r0, [r7, #8]
 801ce76:	f000 fbf3 	bl	801d660 <TimerLeftMS>
 801ce7a:	4602      	mov	r2, r0
 801ce7c:	f107 0310 	add.w	r3, r7, #16
 801ce80:	4619      	mov	r1, r3
 801ce82:	68f8      	ldr	r0, [r7, #12]
 801ce84:	f7ff ff90 	bl	801cda8 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	695b      	ldr	r3, [r3, #20]
 801ce8c:	3301      	adds	r3, #1
 801ce8e:	693a      	ldr	r2, [r7, #16]
 801ce90:	4611      	mov	r1, r2
 801ce92:	4618      	mov	r0, r3
 801ce94:	f000 ff49 	bl	801dd2a <MQTTPacket_encode>
 801ce98:	4602      	mov	r2, r0
 801ce9a:	69bb      	ldr	r3, [r7, #24]
 801ce9c:	4413      	add	r3, r2
 801ce9e:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801cea0:	693b      	ldr	r3, [r7, #16]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	dd16      	ble.n	801ced4 <readPacket+0xa4>
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ceaa:	685c      	ldr	r4, [r3, #4]
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	695a      	ldr	r2, [r3, #20]
 801ceb4:	69bb      	ldr	r3, [r7, #24]
 801ceb6:	18d6      	adds	r6, r2, r3
 801ceb8:	693b      	ldr	r3, [r7, #16]
 801ceba:	607b      	str	r3, [r7, #4]
 801cebc:	68b8      	ldr	r0, [r7, #8]
 801cebe:	f000 fbcf 	bl	801d660 <TimerLeftMS>
 801cec2:	4603      	mov	r3, r0
 801cec4:	687a      	ldr	r2, [r7, #4]
 801cec6:	4631      	mov	r1, r6
 801cec8:	4628      	mov	r0, r5
 801ceca:	47a0      	blx	r4
 801cecc:	4602      	mov	r2, r0
 801cece:	693b      	ldr	r3, [r7, #16]
 801ced0:	429a      	cmp	r2, r3
 801ced2:	d10b      	bne.n	801ceec <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	695b      	ldr	r3, [r3, #20]
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801cedc:	7d3b      	ldrb	r3, [r7, #20]
 801cede:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801cee2:	b2db      	uxtb	r3, r3
 801cee4:	61fb      	str	r3, [r7, #28]
 801cee6:	e002      	b.n	801ceee <readPacket+0xbe>
        goto exit;
 801cee8:	bf00      	nop
 801ceea:	e000      	b.n	801ceee <readPacket+0xbe>
        goto exit;
 801ceec:	bf00      	nop
exit:
    return rc;
 801ceee:	69fb      	ldr	r3, [r7, #28]
}
 801cef0:	4618      	mov	r0, r3
 801cef2:	3724      	adds	r7, #36	; 0x24
 801cef4:	46bd      	mov	sp, r7
 801cef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cef8 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801cef8:	b480      	push	{r7}
 801cefa:	b087      	sub	sp, #28
 801cefc:	af00      	add	r7, sp, #0
 801cefe:	6078      	str	r0, [r7, #4]
 801cf00:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801cf06:	683b      	ldr	r3, [r7, #0]
 801cf08:	689b      	ldr	r3, [r3, #8]
 801cf0a:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801cf0c:	683b      	ldr	r3, [r7, #0]
 801cf0e:	685b      	ldr	r3, [r3, #4]
 801cf10:	461a      	mov	r2, r3
 801cf12:	693b      	ldr	r3, [r7, #16]
 801cf14:	4413      	add	r3, r2
 801cf16:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801cf18:	e039      	b.n	801cf8e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801cf1a:	693b      	ldr	r3, [r7, #16]
 801cf1c:	781b      	ldrb	r3, [r3, #0]
 801cf1e:	2b2f      	cmp	r3, #47	; 0x2f
 801cf20:	d103      	bne.n	801cf2a <isTopicMatched+0x32>
 801cf22:	697b      	ldr	r3, [r7, #20]
 801cf24:	781b      	ldrb	r3, [r3, #0]
 801cf26:	2b2f      	cmp	r3, #47	; 0x2f
 801cf28:	d13a      	bne.n	801cfa0 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801cf2a:	697b      	ldr	r3, [r7, #20]
 801cf2c:	781b      	ldrb	r3, [r3, #0]
 801cf2e:	2b2b      	cmp	r3, #43	; 0x2b
 801cf30:	d009      	beq.n	801cf46 <isTopicMatched+0x4e>
 801cf32:	697b      	ldr	r3, [r7, #20]
 801cf34:	781b      	ldrb	r3, [r3, #0]
 801cf36:	2b23      	cmp	r3, #35	; 0x23
 801cf38:	d005      	beq.n	801cf46 <isTopicMatched+0x4e>
 801cf3a:	697b      	ldr	r3, [r7, #20]
 801cf3c:	781a      	ldrb	r2, [r3, #0]
 801cf3e:	693b      	ldr	r3, [r7, #16]
 801cf40:	781b      	ldrb	r3, [r3, #0]
 801cf42:	429a      	cmp	r2, r3
 801cf44:	d12e      	bne.n	801cfa4 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801cf46:	697b      	ldr	r3, [r7, #20]
 801cf48:	781b      	ldrb	r3, [r3, #0]
 801cf4a:	2b2b      	cmp	r3, #43	; 0x2b
 801cf4c:	d112      	bne.n	801cf74 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801cf4e:	693b      	ldr	r3, [r7, #16]
 801cf50:	3301      	adds	r3, #1
 801cf52:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801cf54:	e005      	b.n	801cf62 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801cf56:	693b      	ldr	r3, [r7, #16]
 801cf58:	3301      	adds	r3, #1
 801cf5a:	613b      	str	r3, [r7, #16]
 801cf5c:	693b      	ldr	r3, [r7, #16]
 801cf5e:	3301      	adds	r3, #1
 801cf60:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801cf62:	68fa      	ldr	r2, [r7, #12]
 801cf64:	68bb      	ldr	r3, [r7, #8]
 801cf66:	429a      	cmp	r2, r3
 801cf68:	d20b      	bcs.n	801cf82 <isTopicMatched+0x8a>
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	781b      	ldrb	r3, [r3, #0]
 801cf6e:	2b2f      	cmp	r3, #47	; 0x2f
 801cf70:	d1f1      	bne.n	801cf56 <isTopicMatched+0x5e>
 801cf72:	e006      	b.n	801cf82 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801cf74:	697b      	ldr	r3, [r7, #20]
 801cf76:	781b      	ldrb	r3, [r3, #0]
 801cf78:	2b23      	cmp	r3, #35	; 0x23
 801cf7a:	d102      	bne.n	801cf82 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801cf7c:	68bb      	ldr	r3, [r7, #8]
 801cf7e:	3b01      	subs	r3, #1
 801cf80:	613b      	str	r3, [r7, #16]
        curf++;
 801cf82:	697b      	ldr	r3, [r7, #20]
 801cf84:	3301      	adds	r3, #1
 801cf86:	617b      	str	r3, [r7, #20]
        curn++;
 801cf88:	693b      	ldr	r3, [r7, #16]
 801cf8a:	3301      	adds	r3, #1
 801cf8c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801cf8e:	697b      	ldr	r3, [r7, #20]
 801cf90:	781b      	ldrb	r3, [r3, #0]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d007      	beq.n	801cfa6 <isTopicMatched+0xae>
 801cf96:	693a      	ldr	r2, [r7, #16]
 801cf98:	68bb      	ldr	r3, [r7, #8]
 801cf9a:	429a      	cmp	r2, r3
 801cf9c:	d3bd      	bcc.n	801cf1a <isTopicMatched+0x22>
 801cf9e:	e002      	b.n	801cfa6 <isTopicMatched+0xae>
            break;
 801cfa0:	bf00      	nop
 801cfa2:	e000      	b.n	801cfa6 <isTopicMatched+0xae>
            break;
 801cfa4:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801cfa6:	693a      	ldr	r2, [r7, #16]
 801cfa8:	68bb      	ldr	r3, [r7, #8]
 801cfaa:	429a      	cmp	r2, r3
 801cfac:	d105      	bne.n	801cfba <isTopicMatched+0xc2>
 801cfae:	697b      	ldr	r3, [r7, #20]
 801cfb0:	781b      	ldrb	r3, [r3, #0]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d101      	bne.n	801cfba <isTopicMatched+0xc2>
 801cfb6:	2301      	movs	r3, #1
 801cfb8:	e000      	b.n	801cfbc <isTopicMatched+0xc4>
 801cfba:	2300      	movs	r3, #0
 801cfbc:	b2db      	uxtb	r3, r3
}
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	371c      	adds	r7, #28
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc8:	4770      	bx	lr

0801cfca <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801cfca:	b580      	push	{r7, lr}
 801cfcc:	b08a      	sub	sp, #40	; 0x28
 801cfce:	af00      	add	r7, sp, #0
 801cfd0:	60f8      	str	r0, [r7, #12]
 801cfd2:	60b9      	str	r1, [r7, #8]
 801cfd4:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801cfd6:	f04f 33ff 	mov.w	r3, #4294967295
 801cfda:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cfdc:	2300      	movs	r3, #0
 801cfde:	627b      	str	r3, [r7, #36]	; 0x24
 801cfe0:	e03f      	b.n	801d062 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801cfe2:	68fa      	ldr	r2, [r7, #12]
 801cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfe6:	3304      	adds	r3, #4
 801cfe8:	00db      	lsls	r3, r3, #3
 801cfea:	4413      	add	r3, r2
 801cfec:	685b      	ldr	r3, [r3, #4]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d034      	beq.n	801d05c <deliverMessage+0x92>
 801cff2:	68fa      	ldr	r2, [r7, #12]
 801cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cff6:	3304      	adds	r3, #4
 801cff8:	00db      	lsls	r3, r3, #3
 801cffa:	4413      	add	r3, r2
 801cffc:	685b      	ldr	r3, [r3, #4]
 801cffe:	4619      	mov	r1, r3
 801d000:	68b8      	ldr	r0, [r7, #8]
 801d002:	f001 f861 	bl	801e0c8 <MQTTPacket_equals>
 801d006:	4603      	mov	r3, r0
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d10c      	bne.n	801d026 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801d00c:	68fa      	ldr	r2, [r7, #12]
 801d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d010:	3304      	adds	r3, #4
 801d012:	00db      	lsls	r3, r3, #3
 801d014:	4413      	add	r3, r2
 801d016:	685b      	ldr	r3, [r3, #4]
 801d018:	68b9      	ldr	r1, [r7, #8]
 801d01a:	4618      	mov	r0, r3
 801d01c:	f7ff ff6c 	bl	801cef8 <isTopicMatched>
 801d020:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d022:	2b00      	cmp	r3, #0
 801d024:	d01a      	beq.n	801d05c <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801d026:	68fa      	ldr	r2, [r7, #12]
 801d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d02a:	3304      	adds	r3, #4
 801d02c:	00db      	lsls	r3, r3, #3
 801d02e:	4413      	add	r3, r2
 801d030:	689b      	ldr	r3, [r3, #8]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d012      	beq.n	801d05c <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801d036:	f107 0318 	add.w	r3, r7, #24
 801d03a:	687a      	ldr	r2, [r7, #4]
 801d03c:	68b9      	ldr	r1, [r7, #8]
 801d03e:	4618      	mov	r0, r3
 801d040:	f7ff fe00 	bl	801cc44 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801d044:	68fa      	ldr	r2, [r7, #12]
 801d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d048:	3304      	adds	r3, #4
 801d04a:	00db      	lsls	r3, r3, #3
 801d04c:	4413      	add	r3, r2
 801d04e:	689b      	ldr	r3, [r3, #8]
 801d050:	f107 0218 	add.w	r2, r7, #24
 801d054:	4610      	mov	r0, r2
 801d056:	4798      	blx	r3
                rc = SUCCESSS;
 801d058:	2300      	movs	r3, #0
 801d05a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d05e:	3301      	adds	r3, #1
 801d060:	627b      	str	r3, [r7, #36]	; 0x24
 801d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d064:	2b04      	cmp	r3, #4
 801d066:	ddbc      	ble.n	801cfe2 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801d068:	6a3b      	ldr	r3, [r7, #32]
 801d06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d06e:	d112      	bne.n	801d096 <deliverMessage+0xcc>
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d074:	2b00      	cmp	r3, #0
 801d076:	d00e      	beq.n	801d096 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801d078:	f107 0310 	add.w	r3, r7, #16
 801d07c:	687a      	ldr	r2, [r7, #4]
 801d07e:	68b9      	ldr	r1, [r7, #8]
 801d080:	4618      	mov	r0, r3
 801d082:	f7ff fddf 	bl	801cc44 <NewMessageData>
        c->defaultMessageHandler(&md);
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d08a:	f107 0210 	add.w	r2, r7, #16
 801d08e:	4610      	mov	r0, r2
 801d090:	4798      	blx	r3
        rc = SUCCESSS;
 801d092:	2300      	movs	r3, #0
 801d094:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801d096:	6a3b      	ldr	r3, [r7, #32]
}
 801d098:	4618      	mov	r0, r3
 801d09a:	3728      	adds	r7, #40	; 0x28
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bd80      	pop	{r7, pc}

0801d0a0 <keepalive>:


int keepalive(MQTTClient* c)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b086      	sub	sp, #24
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801d0a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d0ac:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	699b      	ldr	r3, [r3, #24]
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d102      	bne.n	801d0bc <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	617b      	str	r3, [r7, #20]
        goto exit;
 801d0ba:	e033      	b.n	801d124 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	3354      	adds	r3, #84	; 0x54
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f000 fa8b 	bl	801d5dc <TimerIsExpired>
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d02a      	beq.n	801d122 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	7f1b      	ldrb	r3, [r3, #28]
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d126      	bne.n	801d122 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801d0d4:	f107 0308 	add.w	r3, r7, #8
 801d0d8:	4618      	mov	r0, r3
 801d0da:	f000 fa72 	bl	801d5c2 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801d0de:	f107 0308 	add.w	r3, r7, #8
 801d0e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d0e6:	4618      	mov	r0, r3
 801d0e8:	f000 fa8e 	bl	801d608 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	691a      	ldr	r2, [r3, #16]
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	689b      	ldr	r3, [r3, #8]
 801d0f4:	4619      	mov	r1, r3
 801d0f6:	4610      	mov	r0, r2
 801d0f8:	f000 fd4b 	bl	801db92 <MQTTSerialize_pingreq>
 801d0fc:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801d0fe:	693b      	ldr	r3, [r7, #16]
 801d100:	2b00      	cmp	r3, #0
 801d102:	dd0f      	ble.n	801d124 <keepalive+0x84>
 801d104:	f107 0308 	add.w	r3, r7, #8
 801d108:	461a      	mov	r2, r3
 801d10a:	6939      	ldr	r1, [r7, #16]
 801d10c:	6878      	ldr	r0, [r7, #4]
 801d10e:	f7ff fdc4 	bl	801cc9a <sendPacket>
 801d112:	6178      	str	r0, [r7, #20]
 801d114:	697b      	ldr	r3, [r7, #20]
 801d116:	2b00      	cmp	r3, #0
 801d118:	d104      	bne.n	801d124 <keepalive+0x84>
                c->ping_outstanding = 1;
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	2201      	movs	r2, #1
 801d11e:	771a      	strb	r2, [r3, #28]
 801d120:	e000      	b.n	801d124 <keepalive+0x84>
        }
    }

exit:
 801d122:	bf00      	nop
    return rc;
 801d124:	697b      	ldr	r3, [r7, #20]
}
 801d126:	4618      	mov	r0, r3
 801d128:	3718      	adds	r7, #24
 801d12a:	46bd      	mov	sp, r7
 801d12c:	bd80      	pop	{r7, pc}
	...

0801d130 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801d130:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d132:	b095      	sub	sp, #84	; 0x54
 801d134:	af06      	add	r7, sp, #24
 801d136:	6078      	str	r0, [r7, #4]
 801d138:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801d13a:	6839      	ldr	r1, [r7, #0]
 801d13c:	6878      	ldr	r0, [r7, #4]
 801d13e:	f7ff fe77 	bl	801ce30 <readPacket>
 801d142:	4603      	mov	r3, r0
 801d144:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 801d146:	2300      	movs	r3, #0
 801d148:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 801d14a:	2300      	movs	r3, #0
 801d14c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 801d14e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d150:	3b02      	subs	r3, #2
 801d152:	2b0b      	cmp	r3, #11
 801d154:	f200 80c0 	bhi.w	801d2d8 <cycle+0x1a8>
 801d158:	a201      	add	r2, pc, #4	; (adr r2, 801d160 <cycle+0x30>)
 801d15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d15e:	bf00      	nop
 801d160:	0801d2d9 	.word	0x0801d2d9
 801d164:	0801d191 	.word	0x0801d191
 801d168:	0801d2d9 	.word	0x0801d2d9
 801d16c:	0801d259 	.word	0x0801d259
 801d170:	0801d2d9 	.word	0x0801d2d9
 801d174:	0801d2d9 	.word	0x0801d2d9
 801d178:	0801d2d9 	.word	0x0801d2d9
 801d17c:	0801d2d9 	.word	0x0801d2d9
 801d180:	0801d2d9 	.word	0x0801d2d9
 801d184:	0801d2d9 	.word	0x0801d2d9
 801d188:	0801d2d9 	.word	0x0801d2d9
 801d18c:	0801d2cb 	.word	0x0801d2cb
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801d194:	687a      	ldr	r2, [r7, #4]
 801d196:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d198:	4616      	mov	r6, r2
 801d19a:	f107 0210 	add.w	r2, r7, #16
 801d19e:	1d15      	adds	r5, r2, #4
 801d1a0:	f107 0210 	add.w	r2, r7, #16
 801d1a4:	1c54      	adds	r4, r2, #1
 801d1a6:	f107 010c 	add.w	r1, r7, #12
 801d1aa:	f107 0210 	add.w	r2, r7, #16
 801d1ae:	1c90      	adds	r0, r2, #2
 801d1b0:	9604      	str	r6, [sp, #16]
 801d1b2:	9303      	str	r3, [sp, #12]
 801d1b4:	f107 0310 	add.w	r3, r7, #16
 801d1b8:	330c      	adds	r3, #12
 801d1ba:	9302      	str	r3, [sp, #8]
 801d1bc:	f107 0310 	add.w	r3, r7, #16
 801d1c0:	3308      	adds	r3, #8
 801d1c2:	9301      	str	r3, [sp, #4]
 801d1c4:	f107 0320 	add.w	r3, r7, #32
 801d1c8:	9300      	str	r3, [sp, #0]
 801d1ca:	462b      	mov	r3, r5
 801d1cc:	4622      	mov	r2, r4
 801d1ce:	f000 fcef 	bl	801dbb0 <MQTTDeserialize_publish>
 801d1d2:	4603      	mov	r3, r0
 801d1d4:	2b01      	cmp	r3, #1
 801d1d6:	f040 8083 	bne.w	801d2e0 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	b2db      	uxtb	r3, r3
 801d1de:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801d1e0:	f107 0210 	add.w	r2, r7, #16
 801d1e4:	f107 0320 	add.w	r3, r7, #32
 801d1e8:	4619      	mov	r1, r3
 801d1ea:	6878      	ldr	r0, [r7, #4]
 801d1ec:	f7ff feed 	bl	801cfca <deliverMessage>
            if (msg.qos != QOS0)
 801d1f0:	7c3b      	ldrb	r3, [r7, #16]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d06d      	beq.n	801d2d2 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801d1f6:	7c3b      	ldrb	r3, [r7, #16]
 801d1f8:	2b01      	cmp	r3, #1
 801d1fa:	d10c      	bne.n	801d216 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	6918      	ldr	r0, [r3, #16]
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	689b      	ldr	r3, [r3, #8]
 801d204:	4619      	mov	r1, r3
 801d206:	8abb      	ldrh	r3, [r7, #20]
 801d208:	9300      	str	r3, [sp, #0]
 801d20a:	2300      	movs	r3, #0
 801d20c:	2204      	movs	r2, #4
 801d20e:	f001 f828 	bl	801e262 <MQTTSerialize_ack>
 801d212:	6378      	str	r0, [r7, #52]	; 0x34
 801d214:	e00e      	b.n	801d234 <cycle+0x104>
                else if (msg.qos == QOS2)
 801d216:	7c3b      	ldrb	r3, [r7, #16]
 801d218:	2b02      	cmp	r3, #2
 801d21a:	d10b      	bne.n	801d234 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	6918      	ldr	r0, [r3, #16]
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	689b      	ldr	r3, [r3, #8]
 801d224:	4619      	mov	r1, r3
 801d226:	8abb      	ldrh	r3, [r7, #20]
 801d228:	9300      	str	r3, [sp, #0]
 801d22a:	2300      	movs	r3, #0
 801d22c:	2205      	movs	r2, #5
 801d22e:	f001 f818 	bl	801e262 <MQTTSerialize_ack>
 801d232:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801d234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d236:	2b00      	cmp	r3, #0
 801d238:	dc03      	bgt.n	801d242 <cycle+0x112>
                    rc = FAILURE;
 801d23a:	f04f 33ff 	mov.w	r3, #4294967295
 801d23e:	633b      	str	r3, [r7, #48]	; 0x30
 801d240:	e005      	b.n	801d24e <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801d242:	683a      	ldr	r2, [r7, #0]
 801d244:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d246:	6878      	ldr	r0, [r7, #4]
 801d248:	f7ff fd27 	bl	801cc9a <sendPacket>
 801d24c:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d250:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d254:	d13d      	bne.n	801d2d2 <cycle+0x1a2>
                    goto exit; // there was a problem
 801d256:	e044      	b.n	801d2e2 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	695c      	ldr	r4, [r3, #20]
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	68db      	ldr	r3, [r3, #12]
 801d260:	f107 020a 	add.w	r2, r7, #10
 801d264:	f107 0109 	add.w	r1, r7, #9
 801d268:	f107 0008 	add.w	r0, r7, #8
 801d26c:	9300      	str	r3, [sp, #0]
 801d26e:	4623      	mov	r3, r4
 801d270:	f000 fd10 	bl	801dc94 <MQTTDeserialize_ack>
 801d274:	4603      	mov	r3, r0
 801d276:	2b01      	cmp	r3, #1
 801d278:	d003      	beq.n	801d282 <cycle+0x152>
                rc = FAILURE;
 801d27a:	f04f 33ff 	mov.w	r3, #4294967295
 801d27e:	633b      	str	r3, [r7, #48]	; 0x30
 801d280:	e01e      	b.n	801d2c0 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	6918      	ldr	r0, [r3, #16]
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	689b      	ldr	r3, [r3, #8]
 801d28a:	4619      	mov	r1, r3
 801d28c:	897b      	ldrh	r3, [r7, #10]
 801d28e:	9300      	str	r3, [sp, #0]
 801d290:	2300      	movs	r3, #0
 801d292:	2206      	movs	r2, #6
 801d294:	f000 ffe5 	bl	801e262 <MQTTSerialize_ack>
 801d298:	6378      	str	r0, [r7, #52]	; 0x34
 801d29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	dc03      	bgt.n	801d2a8 <cycle+0x178>
                rc = FAILURE;
 801d2a0:	f04f 33ff 	mov.w	r3, #4294967295
 801d2a4:	633b      	str	r3, [r7, #48]	; 0x30
 801d2a6:	e00b      	b.n	801d2c0 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801d2a8:	683a      	ldr	r2, [r7, #0]
 801d2aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d2ac:	6878      	ldr	r0, [r7, #4]
 801d2ae:	f7ff fcf4 	bl	801cc9a <sendPacket>
 801d2b2:	6338      	str	r0, [r7, #48]	; 0x30
 801d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d002      	beq.n	801d2c0 <cycle+0x190>
                rc = FAILURE; // there was a problem
 801d2ba:	f04f 33ff 	mov.w	r3, #4294967295
 801d2be:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801d2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2c6:	d106      	bne.n	801d2d6 <cycle+0x1a6>
                goto exit; // there was a problem
 801d2c8:	e00b      	b.n	801d2e2 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	2200      	movs	r2, #0
 801d2ce:	771a      	strb	r2, [r3, #28]
            break;
 801d2d0:	e002      	b.n	801d2d8 <cycle+0x1a8>
            break;
 801d2d2:	bf00      	nop
 801d2d4:	e000      	b.n	801d2d8 <cycle+0x1a8>
            break;
 801d2d6:	bf00      	nop
    }
    keepalive(c);
 801d2d8:	6878      	ldr	r0, [r7, #4]
 801d2da:	f7ff fee1 	bl	801d0a0 <keepalive>
 801d2de:	e000      	b.n	801d2e2 <cycle+0x1b2>
                goto exit;
 801d2e0:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d101      	bne.n	801d2ec <cycle+0x1bc>
        rc = packet_type;
 801d2e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d2ea:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 801d2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	373c      	adds	r7, #60	; 0x3c
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2f6:	bf00      	nop

0801d2f8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b086      	sub	sp, #24
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	60f8      	str	r0, [r7, #12]
 801d300:	60b9      	str	r1, [r7, #8]
 801d302:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d304:	f04f 33ff 	mov.w	r3, #4294967295
 801d308:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801d30a:	6878      	ldr	r0, [r7, #4]
 801d30c:	f000 f966 	bl	801d5dc <TimerIsExpired>
 801d310:	4603      	mov	r3, r0
 801d312:	2b00      	cmp	r3, #0
 801d314:	d109      	bne.n	801d32a <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801d316:	6879      	ldr	r1, [r7, #4]
 801d318:	68f8      	ldr	r0, [r7, #12]
 801d31a:	f7ff ff09 	bl	801d130 <cycle>
 801d31e:	6178      	str	r0, [r7, #20]
 801d320:	697a      	ldr	r2, [r7, #20]
 801d322:	68bb      	ldr	r3, [r7, #8]
 801d324:	429a      	cmp	r2, r3
 801d326:	d1f0      	bne.n	801d30a <waitfor+0x12>
 801d328:	e000      	b.n	801d32c <waitfor+0x34>
            break; // we timed out
 801d32a:	bf00      	nop

    return rc;
 801d32c:	697b      	ldr	r3, [r7, #20]
}
 801d32e:	4618      	mov	r0, r3
 801d330:	3718      	adds	r7, #24
 801d332:	46bd      	mov	sp, r7
 801d334:	bd80      	pop	{r7, pc}
	...

0801d338 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d338:	b580      	push	{r7, lr}
 801d33a:	b09e      	sub	sp, #120	; 0x78
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	6078      	str	r0, [r7, #4]
 801d340:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801d342:	f04f 33ff 	mov.w	r3, #4294967295
 801d346:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d348:	4a3d      	ldr	r2, [pc, #244]	; (801d440 <MQTTConnect+0x108>)
 801d34a:	f107 0310 	add.w	r3, r7, #16
 801d34e:	4611      	mov	r1, r2
 801d350:	2258      	movs	r2, #88	; 0x58
 801d352:	4618      	mov	r0, r3
 801d354:	f010 fcbf 	bl	802dcd6 <memcpy>
    int len = 0;
 801d358:	2300      	movs	r3, #0
 801d35a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	6a1b      	ldr	r3, [r3, #32]
 801d360:	2b00      	cmp	r3, #0
 801d362:	d15d      	bne.n	801d420 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801d364:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d368:	4618      	mov	r0, r3
 801d36a:	f000 f92a 	bl	801d5c2 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	685a      	ldr	r2, [r3, #4]
 801d372:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d376:	4611      	mov	r1, r2
 801d378:	4618      	mov	r0, r3
 801d37a:	f000 f945 	bl	801d608 <TimerCountdownMS>

    if (options == 0)
 801d37e:	683b      	ldr	r3, [r7, #0]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d102      	bne.n	801d38a <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801d384:	f107 0310 	add.w	r3, r7, #16
 801d388:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801d38a:	683b      	ldr	r3, [r7, #0]
 801d38c:	8b1b      	ldrh	r3, [r3, #24]
 801d38e:	461a      	mov	r2, r3
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	699b      	ldr	r3, [r3, #24]
 801d39e:	4619      	mov	r1, r3
 801d3a0:	4610      	mov	r0, r2
 801d3a2:	f000 f945 	bl	801d630 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	6918      	ldr	r0, [r3, #16]
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	689b      	ldr	r3, [r3, #8]
 801d3ae:	683a      	ldr	r2, [r7, #0]
 801d3b0:	4619      	mov	r1, r3
 801d3b2:	f000 fa75 	bl	801d8a0 <MQTTSerialize_connect>
 801d3b6:	6738      	str	r0, [r7, #112]	; 0x70
 801d3b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	dd32      	ble.n	801d424 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801d3be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d3c2:	461a      	mov	r2, r3
 801d3c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d3c6:	6878      	ldr	r0, [r7, #4]
 801d3c8:	f7ff fc67 	bl	801cc9a <sendPacket>
 801d3cc:	6778      	str	r0, [r7, #116]	; 0x74
 801d3ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d129      	bne.n	801d428 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801d3d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d3d8:	461a      	mov	r2, r3
 801d3da:	2102      	movs	r1, #2
 801d3dc:	6878      	ldr	r0, [r7, #4]
 801d3de:	f7ff ff8b 	bl	801d2f8 <waitfor>
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	2b02      	cmp	r3, #2
 801d3e6:	d117      	bne.n	801d418 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801d3e8:	23ff      	movs	r3, #255	; 0xff
 801d3ea:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	695a      	ldr	r2, [r3, #20]
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	68db      	ldr	r3, [r3, #12]
 801d3f8:	f107 010f 	add.w	r1, r7, #15
 801d3fc:	f107 000e 	add.w	r0, r7, #14
 801d400:	f000 fb3a 	bl	801da78 <MQTTDeserialize_connack>
 801d404:	4603      	mov	r3, r0
 801d406:	2b01      	cmp	r3, #1
 801d408:	d102      	bne.n	801d410 <MQTTConnect+0xd8>
            rc = connack_rc;
 801d40a:	7bfb      	ldrb	r3, [r7, #15]
 801d40c:	677b      	str	r3, [r7, #116]	; 0x74
 801d40e:	e00c      	b.n	801d42a <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801d410:	f04f 33ff 	mov.w	r3, #4294967295
 801d414:	677b      	str	r3, [r7, #116]	; 0x74
 801d416:	e008      	b.n	801d42a <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801d418:	f04f 33ff 	mov.w	r3, #4294967295
 801d41c:	677b      	str	r3, [r7, #116]	; 0x74
 801d41e:	e004      	b.n	801d42a <MQTTConnect+0xf2>
		goto exit;
 801d420:	bf00      	nop
 801d422:	e002      	b.n	801d42a <MQTTConnect+0xf2>
        goto exit;
 801d424:	bf00      	nop
 801d426:	e000      	b.n	801d42a <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801d428:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801d42a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d102      	bne.n	801d436 <MQTTConnect+0xfe>
        c->isconnected = 1;
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	2201      	movs	r2, #1
 801d434:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801d436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801d438:	4618      	mov	r0, r3
 801d43a:	3778      	adds	r7, #120	; 0x78
 801d43c:	46bd      	mov	sp, r7
 801d43e:	bd80      	pop	{r7, pc}
 801d440:	08032e14 	.word	0x08032e14

0801d444 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801d444:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d446:	b097      	sub	sp, #92	; 0x5c
 801d448:	af08      	add	r7, sp, #32
 801d44a:	60f8      	str	r0, [r7, #12]
 801d44c:	60b9      	str	r1, [r7, #8]
 801d44e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d450:	f04f 33ff 	mov.w	r3, #4294967295
 801d454:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801d456:	2300      	movs	r3, #0
 801d458:	61fb      	str	r3, [r7, #28]
 801d45a:	2300      	movs	r3, #0
 801d45c:	623b      	str	r3, [r7, #32]
 801d45e:	2300      	movs	r3, #0
 801d460:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801d462:	68bb      	ldr	r3, [r7, #8]
 801d464:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801d466:	2300      	movs	r3, #0
 801d468:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	6a1b      	ldr	r3, [r3, #32]
 801d46e:	2b00      	cmp	r3, #0
 801d470:	f000 809b 	beq.w	801d5aa <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801d474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d478:	4618      	mov	r0, r3
 801d47a:	f000 f8a2 	bl	801d5c2 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	685a      	ldr	r2, [r3, #4]
 801d482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d486:	4611      	mov	r1, r2
 801d488:	4618      	mov	r0, r3
 801d48a:	f000 f8bd 	bl	801d608 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	781b      	ldrb	r3, [r3, #0]
 801d492:	2b01      	cmp	r3, #1
 801d494:	d003      	beq.n	801d49e <MQTTPublish+0x5a>
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	781b      	ldrb	r3, [r3, #0]
 801d49a:	2b02      	cmp	r3, #2
 801d49c:	d106      	bne.n	801d4ac <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801d49e:	68f8      	ldr	r0, [r7, #12]
 801d4a0:	f7ff fbe2 	bl	801cc68 <getNextPacketId>
 801d4a4:	4603      	mov	r3, r0
 801d4a6:	b29a      	uxth	r2, r3
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	691b      	ldr	r3, [r3, #16]
 801d4b0:	603b      	str	r3, [r7, #0]
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	689b      	ldr	r3, [r3, #8]
 801d4b6:	469c      	mov	ip, r3
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	781b      	ldrb	r3, [r3, #0]
 801d4bc:	469e      	mov	lr, r3
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	785d      	ldrb	r5, [r3, #1]
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	689b      	ldr	r3, [r3, #8]
 801d4ca:	687a      	ldr	r2, [r7, #4]
 801d4cc:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d4ce:	9206      	str	r2, [sp, #24]
 801d4d0:	9305      	str	r3, [sp, #20]
 801d4d2:	ac02      	add	r4, sp, #8
 801d4d4:	f107 031c 	add.w	r3, r7, #28
 801d4d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d4dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d4e0:	9601      	str	r6, [sp, #4]
 801d4e2:	9500      	str	r5, [sp, #0]
 801d4e4:	4673      	mov	r3, lr
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	4661      	mov	r1, ip
 801d4ea:	6838      	ldr	r0, [r7, #0]
 801d4ec:	f000 fe43 	bl	801e176 <MQTTSerialize_publish>
 801d4f0:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	dd5a      	ble.n	801d5ae <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801d4f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d4fc:	461a      	mov	r2, r3
 801d4fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d500:	68f8      	ldr	r0, [r7, #12]
 801d502:	f7ff fbca 	bl	801cc9a <sendPacket>
 801d506:	6378      	str	r0, [r7, #52]	; 0x34
 801d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d151      	bne.n	801d5b2 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	781b      	ldrb	r3, [r3, #0]
 801d512:	2b01      	cmp	r3, #1
 801d514:	d122      	bne.n	801d55c <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801d516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d51a:	461a      	mov	r2, r3
 801d51c:	2104      	movs	r1, #4
 801d51e:	68f8      	ldr	r0, [r7, #12]
 801d520:	f7ff feea 	bl	801d2f8 <waitfor>
 801d524:	4603      	mov	r3, r0
 801d526:	2b04      	cmp	r3, #4
 801d528:	d114      	bne.n	801d554 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	695c      	ldr	r4, [r3, #20]
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	68db      	ldr	r3, [r3, #12]
 801d532:	f107 021a 	add.w	r2, r7, #26
 801d536:	f107 0119 	add.w	r1, r7, #25
 801d53a:	f107 0018 	add.w	r0, r7, #24
 801d53e:	9300      	str	r3, [sp, #0]
 801d540:	4623      	mov	r3, r4
 801d542:	f000 fba7 	bl	801dc94 <MQTTDeserialize_ack>
 801d546:	4603      	mov	r3, r0
 801d548:	2b01      	cmp	r3, #1
 801d54a:	d035      	beq.n	801d5b8 <MQTTPublish+0x174>
                rc = FAILURE;
 801d54c:	f04f 33ff 	mov.w	r3, #4294967295
 801d550:	637b      	str	r3, [r7, #52]	; 0x34
 801d552:	e031      	b.n	801d5b8 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d554:	f04f 33ff 	mov.w	r3, #4294967295
 801d558:	637b      	str	r3, [r7, #52]	; 0x34
 801d55a:	e02d      	b.n	801d5b8 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	781b      	ldrb	r3, [r3, #0]
 801d560:	2b02      	cmp	r3, #2
 801d562:	d128      	bne.n	801d5b6 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801d564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d568:	461a      	mov	r2, r3
 801d56a:	2107      	movs	r1, #7
 801d56c:	68f8      	ldr	r0, [r7, #12]
 801d56e:	f7ff fec3 	bl	801d2f8 <waitfor>
 801d572:	4603      	mov	r3, r0
 801d574:	2b07      	cmp	r3, #7
 801d576:	d114      	bne.n	801d5a2 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	695c      	ldr	r4, [r3, #20]
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	68db      	ldr	r3, [r3, #12]
 801d580:	f107 0216 	add.w	r2, r7, #22
 801d584:	f107 0115 	add.w	r1, r7, #21
 801d588:	f107 0014 	add.w	r0, r7, #20
 801d58c:	9300      	str	r3, [sp, #0]
 801d58e:	4623      	mov	r3, r4
 801d590:	f000 fb80 	bl	801dc94 <MQTTDeserialize_ack>
 801d594:	4603      	mov	r3, r0
 801d596:	2b01      	cmp	r3, #1
 801d598:	d00e      	beq.n	801d5b8 <MQTTPublish+0x174>
                rc = FAILURE;
 801d59a:	f04f 33ff 	mov.w	r3, #4294967295
 801d59e:	637b      	str	r3, [r7, #52]	; 0x34
 801d5a0:	e00a      	b.n	801d5b8 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d5a2:	f04f 33ff 	mov.w	r3, #4294967295
 801d5a6:	637b      	str	r3, [r7, #52]	; 0x34
 801d5a8:	e006      	b.n	801d5b8 <MQTTPublish+0x174>
		goto exit;
 801d5aa:	bf00      	nop
 801d5ac:	e004      	b.n	801d5b8 <MQTTPublish+0x174>
        goto exit;
 801d5ae:	bf00      	nop
 801d5b0:	e002      	b.n	801d5b8 <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d5b2:	bf00      	nop
 801d5b4:	e000      	b.n	801d5b8 <MQTTPublish+0x174>
    }

exit:
 801d5b6:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	373c      	adds	r7, #60	; 0x3c
 801d5be:	46bd      	mov	sp, r7
 801d5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5c2 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d5c2:	b480      	push	{r7}
 801d5c4:	b083      	sub	sp, #12
 801d5c6:	af00      	add	r7, sp, #0
 801d5c8:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	2200      	movs	r2, #0
 801d5ce:	605a      	str	r2, [r3, #4]
}
 801d5d0:	bf00      	nop
 801d5d2:	370c      	adds	r7, #12
 801d5d4:	46bd      	mov	sp, r7
 801d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5da:	4770      	bx	lr

0801d5dc <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d5dc:	b480      	push	{r7}
 801d5de:	b085      	sub	sp, #20
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	685a      	ldr	r2, [r3, #4]
 801d5e8:	4b06      	ldr	r3, [pc, #24]	; (801d604 <TimerIsExpired+0x28>)
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	1ad3      	subs	r3, r2, r3
 801d5ee:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	0fdb      	lsrs	r3, r3, #31
 801d5f4:	b2db      	uxtb	r3, r3
}
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	3714      	adds	r7, #20
 801d5fa:	46bd      	mov	sp, r7
 801d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d600:	4770      	bx	lr
 801d602:	bf00      	nop
 801d604:	200009f0 	.word	0x200009f0

0801d608 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d608:	b480      	push	{r7}
 801d60a:	b083      	sub	sp, #12
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	6078      	str	r0, [r7, #4]
 801d610:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d612:	4b06      	ldr	r3, [pc, #24]	; (801d62c <TimerCountdownMS+0x24>)
 801d614:	681a      	ldr	r2, [r3, #0]
 801d616:	683b      	ldr	r3, [r7, #0]
 801d618:	441a      	add	r2, r3
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	605a      	str	r2, [r3, #4]
}
 801d61e:	bf00      	nop
 801d620:	370c      	adds	r7, #12
 801d622:	46bd      	mov	sp, r7
 801d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d628:	4770      	bx	lr
 801d62a:	bf00      	nop
 801d62c:	200009f0 	.word	0x200009f0

0801d630 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d630:	b480      	push	{r7}
 801d632:	b083      	sub	sp, #12
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
 801d638:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d63a:	683b      	ldr	r3, [r7, #0]
 801d63c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d640:	fb03 f202 	mul.w	r2, r3, r2
 801d644:	4b05      	ldr	r3, [pc, #20]	; (801d65c <TimerCountdown+0x2c>)
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	441a      	add	r2, r3
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	605a      	str	r2, [r3, #4]
}
 801d64e:	bf00      	nop
 801d650:	370c      	adds	r7, #12
 801d652:	46bd      	mov	sp, r7
 801d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d658:	4770      	bx	lr
 801d65a:	bf00      	nop
 801d65c:	200009f0 	.word	0x200009f0

0801d660 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d660:	b480      	push	{r7}
 801d662:	b085      	sub	sp, #20
 801d664:	af00      	add	r7, sp, #0
 801d666:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	685a      	ldr	r2, [r3, #4]
 801d66c:	4b06      	ldr	r3, [pc, #24]	; (801d688 <TimerLeftMS+0x28>)
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	1ad3      	subs	r3, r2, r3
 801d672:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d67a:	4618      	mov	r0, r3
 801d67c:	3714      	adds	r7, #20
 801d67e:	46bd      	mov	sp, r7
 801d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d684:	4770      	bx	lr
 801d686:	bf00      	nop
 801d688:	200009f0 	.word	0x200009f0

0801d68c <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d68c:	b480      	push	{r7}
 801d68e:	b083      	sub	sp, #12
 801d690:	af00      	add	r7, sp, #0
 801d692:	6078      	str	r0, [r7, #4]
 801d694:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	683a      	ldr	r2, [r7, #0]
 801d69a:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	4a07      	ldr	r2, [pc, #28]	; (801d6bc <NewNetwork+0x30>)
 801d6a0:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	4a06      	ldr	r2, [pc, #24]	; (801d6c0 <NewNetwork+0x34>)
 801d6a6:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	4a06      	ldr	r2, [pc, #24]	; (801d6c4 <NewNetwork+0x38>)
 801d6ac:	60da      	str	r2, [r3, #12]
}
 801d6ae:	bf00      	nop
 801d6b0:	370c      	adds	r7, #12
 801d6b2:	46bd      	mov	sp, r7
 801d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b8:	4770      	bx	lr
 801d6ba:	bf00      	nop
 801d6bc:	0801d6c9 	.word	0x0801d6c9
 801d6c0:	0801d723 	.word	0x0801d723
 801d6c4:	0801d76b 	.word	0x0801d76b

0801d6c8 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	b084      	sub	sp, #16
 801d6cc:	af00      	add	r7, sp, #0
 801d6ce:	60f8      	str	r0, [r7, #12]
 801d6d0:	60b9      	str	r1, [r7, #8]
 801d6d2:	607a      	str	r2, [r7, #4]
 801d6d4:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	009b      	lsls	r3, r3, #2
 801d6dc:	3301      	adds	r3, #1
 801d6de:	00db      	lsls	r3, r3, #3
 801d6e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f7fb f883 	bl	80187f0 <WIZCHIP_READ>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	2b17      	cmp	r3, #23
 801d6ee:	d113      	bne.n	801d718 <w5x00_read+0x50>
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	b2db      	uxtb	r3, r3
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	f7fb fa1f 	bl	8018b3a <getSn_RX_RSR>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d00a      	beq.n	801d718 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	b2db      	uxtb	r3, r3
 801d708:	687a      	ldr	r2, [r7, #4]
 801d70a:	b292      	uxth	r2, r2
 801d70c:	68b9      	ldr	r1, [r7, #8]
 801d70e:	4618      	mov	r0, r3
 801d710:	f7fb ff86 	bl	8019620 <recv>
 801d714:	4603      	mov	r3, r0
 801d716:	e000      	b.n	801d71a <w5x00_read+0x52>

	return SOCK_ERROR;
 801d718:	2300      	movs	r3, #0
}
 801d71a:	4618      	mov	r0, r3
 801d71c:	3710      	adds	r7, #16
 801d71e:	46bd      	mov	sp, r7
 801d720:	bd80      	pop	{r7, pc}

0801d722 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d722:	b580      	push	{r7, lr}
 801d724:	b084      	sub	sp, #16
 801d726:	af00      	add	r7, sp, #0
 801d728:	60f8      	str	r0, [r7, #12]
 801d72a:	60b9      	str	r1, [r7, #8]
 801d72c:	607a      	str	r2, [r7, #4]
 801d72e:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	009b      	lsls	r3, r3, #2
 801d736:	3301      	adds	r3, #1
 801d738:	00db      	lsls	r3, r3, #3
 801d73a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d73e:	4618      	mov	r0, r3
 801d740:	f7fb f856 	bl	80187f0 <WIZCHIP_READ>
 801d744:	4603      	mov	r3, r0
 801d746:	2b17      	cmp	r3, #23
 801d748:	d10a      	bne.n	801d760 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	b2db      	uxtb	r3, r3
 801d750:	687a      	ldr	r2, [r7, #4]
 801d752:	b292      	uxth	r2, r2
 801d754:	68b9      	ldr	r1, [r7, #8]
 801d756:	4618      	mov	r0, r3
 801d758:	f7fb fe68 	bl	801942c <send>
 801d75c:	4603      	mov	r3, r0
 801d75e:	e000      	b.n	801d762 <w5x00_write+0x40>

	return SOCK_ERROR;
 801d760:	2300      	movs	r3, #0
}
 801d762:	4618      	mov	r0, r3
 801d764:	3710      	adds	r7, #16
 801d766:	46bd      	mov	sp, r7
 801d768:	bd80      	pop	{r7, pc}

0801d76a <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d76a:	b580      	push	{r7, lr}
 801d76c:	b082      	sub	sp, #8
 801d76e:	af00      	add	r7, sp, #0
 801d770:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	b2db      	uxtb	r3, r3
 801d778:	4618      	mov	r0, r3
 801d77a:	f7fb fde1 	bl	8019340 <disconnect>
}
 801d77e:	bf00      	nop
 801d780:	3708      	adds	r7, #8
 801d782:	46bd      	mov	sp, r7
 801d784:	bd80      	pop	{r7, pc}

0801d786 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d786:	b580      	push	{r7, lr}
 801d788:	b086      	sub	sp, #24
 801d78a:	af00      	add	r7, sp, #0
 801d78c:	60f8      	str	r0, [r7, #12]
 801d78e:	60b9      	str	r1, [r7, #8]
 801d790:	4613      	mov	r3, r2
 801d792:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d794:	f243 0339 	movw	r3, #12345	; 0x3039
 801d798:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	b2d8      	uxtb	r0, r3
 801d7a0:	8afa      	ldrh	r2, [r7, #22]
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	2101      	movs	r1, #1
 801d7a6:	f7fb fb13 	bl	8018dd0 <socket>
 801d7aa:	4603      	mov	r3, r0
 801d7ac:	461a      	mov	r2, r3
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	429a      	cmp	r2, r3
 801d7b4:	d001      	beq.n	801d7ba <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d7b6:	2300      	movs	r3, #0
 801d7b8:	e00d      	b.n	801d7d6 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	b2db      	uxtb	r3, r3
 801d7c0:	88fa      	ldrh	r2, [r7, #6]
 801d7c2:	68b9      	ldr	r1, [r7, #8]
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	f7fb fcdf 	bl	8019188 <connect>
 801d7ca:	4603      	mov	r3, r0
 801d7cc:	2b01      	cmp	r3, #1
 801d7ce:	d001      	beq.n	801d7d4 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	e000      	b.n	801d7d6 <ConnectNetwork+0x50>

	return SOCK_OK;
 801d7d4:	2301      	movs	r3, #1
}
 801d7d6:	4618      	mov	r0, r3
 801d7d8:	3718      	adds	r7, #24
 801d7da:	46bd      	mov	sp, r7
 801d7dc:	bd80      	pop	{r7, pc}

0801d7de <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d7de:	b590      	push	{r4, r7, lr}
 801d7e0:	b085      	sub	sp, #20
 801d7e2:	af00      	add	r7, sp, #0
 801d7e4:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	7a1b      	ldrb	r3, [r3, #8]
 801d7ee:	2b03      	cmp	r3, #3
 801d7f0:	d102      	bne.n	801d7f8 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d7f2:	230c      	movs	r3, #12
 801d7f4:	60fb      	str	r3, [r7, #12]
 801d7f6:	e005      	b.n	801d804 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	7a1b      	ldrb	r3, [r3, #8]
 801d7fc:	2b04      	cmp	r3, #4
 801d7fe:	d101      	bne.n	801d804 <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d800:	230a      	movs	r3, #10
 801d802:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	330c      	adds	r3, #12
 801d808:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d80c:	f000 fc43 	bl	801e096 <MQTTstrlen>
 801d810:	4603      	mov	r3, r0
 801d812:	3302      	adds	r3, #2
 801d814:	68fa      	ldr	r2, [r7, #12]
 801d816:	4413      	add	r3, r2
 801d818:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	7edb      	ldrb	r3, [r3, #27]
 801d81e:	2b00      	cmp	r3, #0
 801d820:	d013      	beq.n	801d84a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	3324      	adds	r3, #36	; 0x24
 801d826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d82a:	f000 fc34 	bl	801e096 <MQTTstrlen>
 801d82e:	4603      	mov	r3, r0
 801d830:	1c9c      	adds	r4, r3, #2
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	3330      	adds	r3, #48	; 0x30
 801d836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d83a:	f000 fc2c 	bl	801e096 <MQTTstrlen>
 801d83e:	4603      	mov	r3, r0
 801d840:	4423      	add	r3, r4
 801d842:	3302      	adds	r3, #2
 801d844:	68fa      	ldr	r2, [r7, #12]
 801d846:	4413      	add	r3, r2
 801d848:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d103      	bne.n	801d85a <MQTTSerialize_connectLength+0x7c>
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d856:	2b00      	cmp	r3, #0
 801d858:	d00a      	beq.n	801d870 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	3340      	adds	r3, #64	; 0x40
 801d85e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d862:	f000 fc18 	bl	801e096 <MQTTstrlen>
 801d866:	4603      	mov	r3, r0
 801d868:	3302      	adds	r3, #2
 801d86a:	68fa      	ldr	r2, [r7, #12]
 801d86c:	4413      	add	r3, r2
 801d86e:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d874:	2b00      	cmp	r3, #0
 801d876:	d103      	bne.n	801d880 <MQTTSerialize_connectLength+0xa2>
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d00a      	beq.n	801d896 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	334c      	adds	r3, #76	; 0x4c
 801d884:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d888:	f000 fc05 	bl	801e096 <MQTTstrlen>
 801d88c:	4603      	mov	r3, r0
 801d88e:	3302      	adds	r3, #2
 801d890:	68fa      	ldr	r2, [r7, #12]
 801d892:	4413      	add	r3, r2
 801d894:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801d896:	68fb      	ldr	r3, [r7, #12]
}
 801d898:	4618      	mov	r0, r3
 801d89a:	3714      	adds	r7, #20
 801d89c:	46bd      	mov	sp, r7
 801d89e:	bd90      	pop	{r4, r7, pc}

0801d8a0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801d8a0:	b580      	push	{r7, lr}
 801d8a2:	b08a      	sub	sp, #40	; 0x28
 801d8a4:	af00      	add	r7, sp, #0
 801d8a6:	60f8      	str	r0, [r7, #12]
 801d8a8:	60b9      	str	r1, [r7, #8]
 801d8aa:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	617b      	str	r3, [r7, #20]
	int len = 0;
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801d8bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d8c0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801d8c2:	6878      	ldr	r0, [r7, #4]
 801d8c4:	f7ff ff8b 	bl	801d7de <MQTTSerialize_connectLength>
 801d8c8:	6238      	str	r0, [r7, #32]
 801d8ca:	6a38      	ldr	r0, [r7, #32]
 801d8cc:	f000 fa98 	bl	801de00 <MQTTPacket_len>
 801d8d0:	4602      	mov	r2, r0
 801d8d2:	68bb      	ldr	r3, [r7, #8]
 801d8d4:	4293      	cmp	r3, r2
 801d8d6:	da03      	bge.n	801d8e0 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d8d8:	f06f 0301 	mvn.w	r3, #1
 801d8dc:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801d8de:	e0c2      	b.n	801da66 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801d8e0:	2300      	movs	r3, #0
 801d8e2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801d8e4:	7e3b      	ldrb	r3, [r7, #24]
 801d8e6:	2201      	movs	r2, #1
 801d8e8:	f362 1307 	bfi	r3, r2, #4, #4
 801d8ec:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d8ee:	7e3a      	ldrb	r2, [r7, #24]
 801d8f0:	f107 031c 	add.w	r3, r7, #28
 801d8f4:	4611      	mov	r1, r2
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	f000 fb11 	bl	801df1e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801d8fc:	69fb      	ldr	r3, [r7, #28]
 801d8fe:	6a39      	ldr	r1, [r7, #32]
 801d900:	4618      	mov	r0, r3
 801d902:	f000 fa12 	bl	801dd2a <MQTTPacket_encode>
 801d906:	4602      	mov	r2, r0
 801d908:	69fb      	ldr	r3, [r7, #28]
 801d90a:	4413      	add	r3, r2
 801d90c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	7a1b      	ldrb	r3, [r3, #8]
 801d912:	2b04      	cmp	r3, #4
 801d914:	d10c      	bne.n	801d930 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801d916:	f107 031c 	add.w	r3, r7, #28
 801d91a:	4955      	ldr	r1, [pc, #340]	; (801da70 <MQTTSerialize_connect+0x1d0>)
 801d91c:	4618      	mov	r0, r3
 801d91e:	f000 fb3c 	bl	801df9a <writeCString>
		writeChar(&ptr, (char) 4);
 801d922:	f107 031c 	add.w	r3, r7, #28
 801d926:	2104      	movs	r1, #4
 801d928:	4618      	mov	r0, r3
 801d92a:	f000 faf8 	bl	801df1e <writeChar>
 801d92e:	e00b      	b.n	801d948 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801d930:	f107 031c 	add.w	r3, r7, #28
 801d934:	494f      	ldr	r1, [pc, #316]	; (801da74 <MQTTSerialize_connect+0x1d4>)
 801d936:	4618      	mov	r0, r3
 801d938:	f000 fb2f 	bl	801df9a <writeCString>
		writeChar(&ptr, (char) 3);
 801d93c:	f107 031c 	add.w	r3, r7, #28
 801d940:	2103      	movs	r1, #3
 801d942:	4618      	mov	r0, r3
 801d944:	f000 faeb 	bl	801df1e <writeChar>
	}

	flags.all = 0;
 801d948:	2300      	movs	r3, #0
 801d94a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	7e9b      	ldrb	r3, [r3, #26]
 801d950:	f003 0301 	and.w	r3, r3, #1
 801d954:	b2da      	uxtb	r2, r3
 801d956:	7d3b      	ldrb	r3, [r7, #20]
 801d958:	f362 0341 	bfi	r3, r2, #1, #1
 801d95c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	7edb      	ldrb	r3, [r3, #27]
 801d962:	2b00      	cmp	r3, #0
 801d964:	bf14      	ite	ne
 801d966:	2301      	movne	r3, #1
 801d968:	2300      	moveq	r3, #0
 801d96a:	b2da      	uxtb	r2, r3
 801d96c:	7d3b      	ldrb	r3, [r7, #20]
 801d96e:	f362 0382 	bfi	r3, r2, #2, #1
 801d972:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801d974:	7d3b      	ldrb	r3, [r7, #20]
 801d976:	f003 0304 	and.w	r3, r3, #4
 801d97a:	b2db      	uxtb	r3, r3
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d013      	beq.n	801d9a8 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d986:	f003 0303 	and.w	r3, r3, #3
 801d98a:	b2da      	uxtb	r2, r3
 801d98c:	7d3b      	ldrb	r3, [r7, #20]
 801d98e:	f362 03c4 	bfi	r3, r2, #3, #2
 801d992:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d99a:	f003 0301 	and.w	r3, r3, #1
 801d99e:	b2da      	uxtb	r2, r3
 801d9a0:	7d3b      	ldrb	r3, [r7, #20]
 801d9a2:	f362 1345 	bfi	r3, r2, #5, #1
 801d9a6:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d103      	bne.n	801d9b8 <MQTTSerialize_connect+0x118>
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d003      	beq.n	801d9c0 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801d9b8:	7d3b      	ldrb	r3, [r7, #20]
 801d9ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d9be:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d103      	bne.n	801d9d0 <MQTTSerialize_connect+0x130>
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d003      	beq.n	801d9d8 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801d9d0:	7d3b      	ldrb	r3, [r7, #20]
 801d9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d9d6:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801d9d8:	7d3a      	ldrb	r2, [r7, #20]
 801d9da:	f107 031c 	add.w	r3, r7, #28
 801d9de:	4611      	mov	r1, r2
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f000 fa9c 	bl	801df1e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	8b1b      	ldrh	r3, [r3, #24]
 801d9ea:	461a      	mov	r2, r3
 801d9ec:	f107 031c 	add.w	r3, r7, #28
 801d9f0:	4611      	mov	r1, r2
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	f000 faa8 	bl	801df48 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	f107 001c 	add.w	r0, r7, #28
 801d9fe:	330c      	adds	r3, #12
 801da00:	cb0e      	ldmia	r3, {r1, r2, r3}
 801da02:	f000 fae9 	bl	801dfd8 <writeMQTTString>
	if (options->willFlag)
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	7edb      	ldrb	r3, [r3, #27]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d00d      	beq.n	801da2a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	f107 001c 	add.w	r0, r7, #28
 801da14:	3324      	adds	r3, #36	; 0x24
 801da16:	cb0e      	ldmia	r3, {r1, r2, r3}
 801da18:	f000 fade 	bl	801dfd8 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	f107 001c 	add.w	r0, r7, #28
 801da22:	3330      	adds	r3, #48	; 0x30
 801da24:	cb0e      	ldmia	r3, {r1, r2, r3}
 801da26:	f000 fad7 	bl	801dfd8 <writeMQTTString>
	}
	if (flags.bits.username)
 801da2a:	7d3b      	ldrb	r3, [r7, #20]
 801da2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801da30:	b2db      	uxtb	r3, r3
 801da32:	2b00      	cmp	r3, #0
 801da34:	d006      	beq.n	801da44 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	f107 001c 	add.w	r0, r7, #28
 801da3c:	3340      	adds	r3, #64	; 0x40
 801da3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801da40:	f000 faca 	bl	801dfd8 <writeMQTTString>
	if (flags.bits.password)
 801da44:	7d3b      	ldrb	r3, [r7, #20]
 801da46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801da4a:	b2db      	uxtb	r3, r3
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d006      	beq.n	801da5e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	f107 001c 	add.w	r0, r7, #28
 801da56:	334c      	adds	r3, #76	; 0x4c
 801da58:	cb0e      	ldmia	r3, {r1, r2, r3}
 801da5a:	f000 fabd 	bl	801dfd8 <writeMQTTString>

	rc = ptr - buf;
 801da5e:	69fa      	ldr	r2, [r7, #28]
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	1ad3      	subs	r3, r2, r3
 801da64:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801da68:	4618      	mov	r0, r3
 801da6a:	3728      	adds	r7, #40	; 0x28
 801da6c:	46bd      	mov	sp, r7
 801da6e:	bd80      	pop	{r7, pc}
 801da70:	08032e6c 	.word	0x08032e6c
 801da74:	08032e74 	.word	0x08032e74

0801da78 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801da78:	b580      	push	{r7, lr}
 801da7a:	b08a      	sub	sp, #40	; 0x28
 801da7c:	af00      	add	r7, sp, #0
 801da7e:	60f8      	str	r0, [r7, #12]
 801da80:	60b9      	str	r1, [r7, #8]
 801da82:	607a      	str	r2, [r7, #4]
 801da84:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801da86:	2300      	movs	r3, #0
 801da88:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801da8e:	2300      	movs	r3, #0
 801da90:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801da92:	2300      	movs	r3, #0
 801da94:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801da96:	2300      	movs	r3, #0
 801da98:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801da9a:	f107 0318 	add.w	r3, r7, #24
 801da9e:	4618      	mov	r0, r3
 801daa0:	f000 fa29 	bl	801def6 <readChar>
 801daa4:	4603      	mov	r3, r0
 801daa6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801daa8:	7f3b      	ldrb	r3, [r7, #28]
 801daaa:	f023 030f 	bic.w	r3, r3, #15
 801daae:	b2db      	uxtb	r3, r3
 801dab0:	2b20      	cmp	r3, #32
 801dab2:	d12e      	bne.n	801db12 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dab4:	69bb      	ldr	r3, [r7, #24]
 801dab6:	f107 0214 	add.w	r2, r7, #20
 801daba:	4611      	mov	r1, r2
 801dabc:	4618      	mov	r0, r3
 801dabe:	f000 f9e9 	bl	801de94 <MQTTPacket_decodeBuf>
 801dac2:	6278      	str	r0, [r7, #36]	; 0x24
 801dac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dac6:	69bb      	ldr	r3, [r7, #24]
 801dac8:	4413      	add	r3, r2
 801daca:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dacc:	69bb      	ldr	r3, [r7, #24]
 801dace:	697a      	ldr	r2, [r7, #20]
 801dad0:	4413      	add	r3, r2
 801dad2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801dad4:	69bb      	ldr	r3, [r7, #24]
 801dad6:	6a3a      	ldr	r2, [r7, #32]
 801dad8:	1ad3      	subs	r3, r2, r3
 801dada:	2b01      	cmp	r3, #1
 801dadc:	dd1b      	ble.n	801db16 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801dade:	f107 0318 	add.w	r3, r7, #24
 801dae2:	4618      	mov	r0, r3
 801dae4:	f000 fa07 	bl	801def6 <readChar>
 801dae8:	4603      	mov	r3, r0
 801daea:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801daec:	7c3b      	ldrb	r3, [r7, #16]
 801daee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801daf2:	b2db      	uxtb	r3, r3
 801daf4:	461a      	mov	r2, r3
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801dafa:	f107 0318 	add.w	r3, r7, #24
 801dafe:	4618      	mov	r0, r3
 801db00:	f000 f9f9 	bl	801def6 <readChar>
 801db04:	4603      	mov	r3, r0
 801db06:	461a      	mov	r2, r3
 801db08:	68bb      	ldr	r3, [r7, #8]
 801db0a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801db0c:	2301      	movs	r3, #1
 801db0e:	627b      	str	r3, [r7, #36]	; 0x24
 801db10:	e002      	b.n	801db18 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801db12:	bf00      	nop
 801db14:	e000      	b.n	801db18 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801db16:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801db1a:	4618      	mov	r0, r3
 801db1c:	3728      	adds	r7, #40	; 0x28
 801db1e:	46bd      	mov	sp, r7
 801db20:	bd80      	pop	{r7, pc}

0801db22 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801db22:	b580      	push	{r7, lr}
 801db24:	b088      	sub	sp, #32
 801db26:	af00      	add	r7, sp, #0
 801db28:	60f8      	str	r0, [r7, #12]
 801db2a:	60b9      	str	r1, [r7, #8]
 801db2c:	4613      	mov	r3, r2
 801db2e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801db30:	2300      	movs	r3, #0
 801db32:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801db34:	f04f 33ff 	mov.w	r3, #4294967295
 801db38:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801db3e:	68bb      	ldr	r3, [r7, #8]
 801db40:	2b01      	cmp	r3, #1
 801db42:	dc03      	bgt.n	801db4c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801db44:	f06f 0301 	mvn.w	r3, #1
 801db48:	61fb      	str	r3, [r7, #28]
		goto exit;
 801db4a:	e01d      	b.n	801db88 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801db4c:	2300      	movs	r3, #0
 801db4e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801db50:	79fb      	ldrb	r3, [r7, #7]
 801db52:	f003 030f 	and.w	r3, r3, #15
 801db56:	b2da      	uxtb	r2, r3
 801db58:	7e3b      	ldrb	r3, [r7, #24]
 801db5a:	f362 1307 	bfi	r3, r2, #4, #4
 801db5e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801db60:	7e3a      	ldrb	r2, [r7, #24]
 801db62:	f107 0314 	add.w	r3, r7, #20
 801db66:	4611      	mov	r1, r2
 801db68:	4618      	mov	r0, r3
 801db6a:	f000 f9d8 	bl	801df1e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801db6e:	697b      	ldr	r3, [r7, #20]
 801db70:	2100      	movs	r1, #0
 801db72:	4618      	mov	r0, r3
 801db74:	f000 f8d9 	bl	801dd2a <MQTTPacket_encode>
 801db78:	4602      	mov	r2, r0
 801db7a:	697b      	ldr	r3, [r7, #20]
 801db7c:	4413      	add	r3, r2
 801db7e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801db80:	697a      	ldr	r2, [r7, #20]
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	1ad3      	subs	r3, r2, r3
 801db86:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801db88:	69fb      	ldr	r3, [r7, #28]
}
 801db8a:	4618      	mov	r0, r3
 801db8c:	3720      	adds	r7, #32
 801db8e:	46bd      	mov	sp, r7
 801db90:	bd80      	pop	{r7, pc}

0801db92 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801db92:	b580      	push	{r7, lr}
 801db94:	b082      	sub	sp, #8
 801db96:	af00      	add	r7, sp, #0
 801db98:	6078      	str	r0, [r7, #4]
 801db9a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801db9c:	220c      	movs	r2, #12
 801db9e:	6839      	ldr	r1, [r7, #0]
 801dba0:	6878      	ldr	r0, [r7, #4]
 801dba2:	f7ff ffbe 	bl	801db22 <MQTTSerialize_zero>
 801dba6:	4603      	mov	r3, r0
}
 801dba8:	4618      	mov	r0, r3
 801dbaa:	3708      	adds	r7, #8
 801dbac:	46bd      	mov	sp, r7
 801dbae:	bd80      	pop	{r7, pc}

0801dbb0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801dbb0:	b580      	push	{r7, lr}
 801dbb2:	b08a      	sub	sp, #40	; 0x28
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	60f8      	str	r0, [r7, #12]
 801dbb8:	60b9      	str	r1, [r7, #8]
 801dbba:	607a      	str	r2, [r7, #4]
 801dbbc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dbbe:	2300      	movs	r3, #0
 801dbc0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dbc4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801dbc6:	2300      	movs	r3, #0
 801dbc8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801dbca:	2300      	movs	r3, #0
 801dbcc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801dbce:	2300      	movs	r3, #0
 801dbd0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801dbd2:	f107 0318 	add.w	r3, r7, #24
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	f000 f98d 	bl	801def6 <readChar>
 801dbdc:	4603      	mov	r3, r0
 801dbde:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801dbe0:	7f3b      	ldrb	r3, [r7, #28]
 801dbe2:	f023 030f 	bic.w	r3, r3, #15
 801dbe6:	b2db      	uxtb	r3, r3
 801dbe8:	2b30      	cmp	r3, #48	; 0x30
 801dbea:	d14b      	bne.n	801dc84 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801dbec:	7f3b      	ldrb	r3, [r7, #28]
 801dbee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dbf2:	b2db      	uxtb	r3, r3
 801dbf4:	461a      	mov	r2, r3
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801dbfa:	7f3b      	ldrb	r3, [r7, #28]
 801dbfc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801dc00:	b2db      	uxtb	r3, r3
 801dc02:	461a      	mov	r2, r3
 801dc04:	68bb      	ldr	r3, [r7, #8]
 801dc06:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801dc08:	7f3b      	ldrb	r3, [r7, #28]
 801dc0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dc0e:	b2db      	uxtb	r3, r3
 801dc10:	461a      	mov	r2, r3
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dc16:	69bb      	ldr	r3, [r7, #24]
 801dc18:	f107 0214 	add.w	r2, r7, #20
 801dc1c:	4611      	mov	r1, r2
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f000 f938 	bl	801de94 <MQTTPacket_decodeBuf>
 801dc24:	6278      	str	r0, [r7, #36]	; 0x24
 801dc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc28:	69bb      	ldr	r3, [r7, #24]
 801dc2a:	4413      	add	r3, r2
 801dc2c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dc2e:	69bb      	ldr	r3, [r7, #24]
 801dc30:	697a      	ldr	r2, [r7, #20]
 801dc32:	4413      	add	r3, r2
 801dc34:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801dc36:	f107 0318 	add.w	r3, r7, #24
 801dc3a:	6a3a      	ldr	r2, [r7, #32]
 801dc3c:	4619      	mov	r1, r3
 801dc3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc40:	f000 f9f8 	bl	801e034 <readMQTTLenString>
 801dc44:	4603      	mov	r3, r0
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d01e      	beq.n	801dc88 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801dc4a:	69bb      	ldr	r3, [r7, #24]
 801dc4c:	6a3a      	ldr	r2, [r7, #32]
 801dc4e:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	db19      	blt.n	801dc88 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801dc54:	68bb      	ldr	r3, [r7, #8]
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	dd08      	ble.n	801dc6e <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801dc5c:	f107 0318 	add.w	r3, r7, #24
 801dc60:	4618      	mov	r0, r3
 801dc62:	f000 f92d 	bl	801dec0 <readInt>
 801dc66:	4603      	mov	r3, r0
 801dc68:	b29a      	uxth	r2, r3
 801dc6a:	683b      	ldr	r3, [r7, #0]
 801dc6c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801dc6e:	69bb      	ldr	r3, [r7, #24]
 801dc70:	6a3a      	ldr	r2, [r7, #32]
 801dc72:	1ad2      	subs	r2, r2, r3
 801dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc76:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801dc78:	69ba      	ldr	r2, [r7, #24]
 801dc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc7c:	601a      	str	r2, [r3, #0]
	rc = 1;
 801dc7e:	2301      	movs	r3, #1
 801dc80:	627b      	str	r3, [r7, #36]	; 0x24
 801dc82:	e002      	b.n	801dc8a <MQTTDeserialize_publish+0xda>
		goto exit;
 801dc84:	bf00      	nop
 801dc86:	e000      	b.n	801dc8a <MQTTDeserialize_publish+0xda>
		goto exit;
 801dc88:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	3728      	adds	r7, #40	; 0x28
 801dc90:	46bd      	mov	sp, r7
 801dc92:	bd80      	pop	{r7, pc}

0801dc94 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801dc94:	b580      	push	{r7, lr}
 801dc96:	b08a      	sub	sp, #40	; 0x28
 801dc98:	af00      	add	r7, sp, #0
 801dc9a:	60f8      	str	r0, [r7, #12]
 801dc9c:	60b9      	str	r1, [r7, #8]
 801dc9e:	607a      	str	r2, [r7, #4]
 801dca0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dca2:	2300      	movs	r3, #0
 801dca4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dca6:	683b      	ldr	r3, [r7, #0]
 801dca8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801dcaa:	2300      	movs	r3, #0
 801dcac:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801dcae:	2300      	movs	r3, #0
 801dcb0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801dcb2:	f107 0318 	add.w	r3, r7, #24
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	f000 f91d 	bl	801def6 <readChar>
 801dcbc:	4603      	mov	r3, r0
 801dcbe:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801dcc0:	7f3b      	ldrb	r3, [r7, #28]
 801dcc2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dcc6:	b2db      	uxtb	r3, r3
 801dcc8:	461a      	mov	r2, r3
 801dcca:	68bb      	ldr	r3, [r7, #8]
 801dccc:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801dcce:	7f3b      	ldrb	r3, [r7, #28]
 801dcd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801dcd4:	b2db      	uxtb	r3, r3
 801dcd6:	461a      	mov	r2, r3
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dcdc:	69bb      	ldr	r3, [r7, #24]
 801dcde:	f107 0214 	add.w	r2, r7, #20
 801dce2:	4611      	mov	r1, r2
 801dce4:	4618      	mov	r0, r3
 801dce6:	f000 f8d5 	bl	801de94 <MQTTPacket_decodeBuf>
 801dcea:	6278      	str	r0, [r7, #36]	; 0x24
 801dcec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dcee:	69bb      	ldr	r3, [r7, #24]
 801dcf0:	4413      	add	r3, r2
 801dcf2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dcf4:	69bb      	ldr	r3, [r7, #24]
 801dcf6:	697a      	ldr	r2, [r7, #20]
 801dcf8:	4413      	add	r3, r2
 801dcfa:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801dcfc:	69bb      	ldr	r3, [r7, #24]
 801dcfe:	6a3a      	ldr	r2, [r7, #32]
 801dd00:	1ad3      	subs	r3, r2, r3
 801dd02:	2b01      	cmp	r3, #1
 801dd04:	dd0b      	ble.n	801dd1e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801dd06:	f107 0318 	add.w	r3, r7, #24
 801dd0a:	4618      	mov	r0, r3
 801dd0c:	f000 f8d8 	bl	801dec0 <readInt>
 801dd10:	4603      	mov	r3, r0
 801dd12:	b29a      	uxth	r2, r3
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801dd18:	2301      	movs	r3, #1
 801dd1a:	627b      	str	r3, [r7, #36]	; 0x24
 801dd1c:	e000      	b.n	801dd20 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801dd1e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dd22:	4618      	mov	r0, r3
 801dd24:	3728      	adds	r7, #40	; 0x28
 801dd26:	46bd      	mov	sp, r7
 801dd28:	bd80      	pop	{r7, pc}

0801dd2a <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801dd2a:	b480      	push	{r7}
 801dd2c:	b085      	sub	sp, #20
 801dd2e:	af00      	add	r7, sp, #0
 801dd30:	6078      	str	r0, [r7, #4]
 801dd32:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801dd34:	2300      	movs	r3, #0
 801dd36:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801dd38:	683b      	ldr	r3, [r7, #0]
 801dd3a:	425a      	negs	r2, r3
 801dd3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dd40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801dd44:	bf58      	it	pl
 801dd46:	4253      	negpl	r3, r2
 801dd48:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801dd4a:	683b      	ldr	r3, [r7, #0]
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	da00      	bge.n	801dd52 <MQTTPacket_encode+0x28>
 801dd50:	337f      	adds	r3, #127	; 0x7f
 801dd52:	11db      	asrs	r3, r3, #7
 801dd54:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801dd56:	683b      	ldr	r3, [r7, #0]
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	dd03      	ble.n	801dd64 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801dd5c:	7afb      	ldrb	r3, [r7, #11]
 801dd5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801dd62:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	1c5a      	adds	r2, r3, #1
 801dd68:	60fa      	str	r2, [r7, #12]
 801dd6a:	461a      	mov	r2, r3
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	4413      	add	r3, r2
 801dd70:	7afa      	ldrb	r2, [r7, #11]
 801dd72:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801dd74:	683b      	ldr	r3, [r7, #0]
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	dcde      	bgt.n	801dd38 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801dd7a:	68fb      	ldr	r3, [r7, #12]
}
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	3714      	adds	r7, #20
 801dd80:	46bd      	mov	sp, r7
 801dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd86:	4770      	bx	lr

0801dd88 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801dd88:	b580      	push	{r7, lr}
 801dd8a:	b086      	sub	sp, #24
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
 801dd90:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801dd92:	2301      	movs	r3, #1
 801dd94:	617b      	str	r3, [r7, #20]
	int len = 0;
 801dd96:	2300      	movs	r3, #0
 801dd98:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801dd9a:	683b      	ldr	r3, [r7, #0]
 801dd9c:	2200      	movs	r2, #0
 801dd9e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801dda0:	f04f 33ff 	mov.w	r3, #4294967295
 801dda4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801dda6:	693b      	ldr	r3, [r7, #16]
 801dda8:	3301      	adds	r3, #1
 801ddaa:	613b      	str	r3, [r7, #16]
 801ddac:	693b      	ldr	r3, [r7, #16]
 801ddae:	2b04      	cmp	r3, #4
 801ddb0:	dd03      	ble.n	801ddba <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801ddb2:	f04f 33ff 	mov.w	r3, #4294967295
 801ddb6:	60fb      	str	r3, [r7, #12]
			goto exit;
 801ddb8:	e01d      	b.n	801ddf6 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801ddba:	f107 020b 	add.w	r2, r7, #11
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	2101      	movs	r1, #1
 801ddc2:	4610      	mov	r0, r2
 801ddc4:	4798      	blx	r3
 801ddc6:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	2b01      	cmp	r3, #1
 801ddcc:	d112      	bne.n	801ddf4 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801ddce:	683b      	ldr	r3, [r7, #0]
 801ddd0:	681a      	ldr	r2, [r3, #0]
 801ddd2:	7afb      	ldrb	r3, [r7, #11]
 801ddd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ddd8:	6979      	ldr	r1, [r7, #20]
 801ddda:	fb01 f303 	mul.w	r3, r1, r3
 801ddde:	441a      	add	r2, r3
 801dde0:	683b      	ldr	r3, [r7, #0]
 801dde2:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801dde4:	697b      	ldr	r3, [r7, #20]
 801dde6:	01db      	lsls	r3, r3, #7
 801dde8:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801ddea:	7afb      	ldrb	r3, [r7, #11]
 801ddec:	b25b      	sxtb	r3, r3
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	dbd6      	blt.n	801dda0 <MQTTPacket_decode+0x18>
exit:
 801ddf2:	e000      	b.n	801ddf6 <MQTTPacket_decode+0x6e>
			goto exit;
 801ddf4:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801ddf6:	693b      	ldr	r3, [r7, #16]
}
 801ddf8:	4618      	mov	r0, r3
 801ddfa:	3718      	adds	r7, #24
 801ddfc:	46bd      	mov	sp, r7
 801ddfe:	bd80      	pop	{r7, pc}

0801de00 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801de00:	b480      	push	{r7}
 801de02:	b083      	sub	sp, #12
 801de04:	af00      	add	r7, sp, #0
 801de06:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	3301      	adds	r3, #1
 801de0c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	2b7f      	cmp	r3, #127	; 0x7f
 801de12:	dc03      	bgt.n	801de1c <MQTTPacket_len+0x1c>
		rem_len += 1;
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	3301      	adds	r3, #1
 801de18:	607b      	str	r3, [r7, #4]
 801de1a:	e012      	b.n	801de42 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801de22:	da03      	bge.n	801de2c <MQTTPacket_len+0x2c>
		rem_len += 2;
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	3302      	adds	r3, #2
 801de28:	607b      	str	r3, [r7, #4]
 801de2a:	e00a      	b.n	801de42 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	4a08      	ldr	r2, [pc, #32]	; (801de50 <MQTTPacket_len+0x50>)
 801de30:	4293      	cmp	r3, r2
 801de32:	dc03      	bgt.n	801de3c <MQTTPacket_len+0x3c>
		rem_len += 3;
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	3303      	adds	r3, #3
 801de38:	607b      	str	r3, [r7, #4]
 801de3a:	e002      	b.n	801de42 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	3304      	adds	r3, #4
 801de40:	607b      	str	r3, [r7, #4]
	return rem_len;
 801de42:	687b      	ldr	r3, [r7, #4]
}
 801de44:	4618      	mov	r0, r3
 801de46:	370c      	adds	r7, #12
 801de48:	46bd      	mov	sp, r7
 801de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de4e:	4770      	bx	lr
 801de50:	001ffffe 	.word	0x001ffffe

0801de54 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801de54:	b480      	push	{r7}
 801de56:	b085      	sub	sp, #20
 801de58:	af00      	add	r7, sp, #0
 801de5a:	6078      	str	r0, [r7, #4]
 801de5c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801de5e:	2300      	movs	r3, #0
 801de60:	60fb      	str	r3, [r7, #12]
 801de62:	e00a      	b.n	801de7a <bufchar+0x26>
		*c = *bufptr++;
 801de64:	4b0a      	ldr	r3, [pc, #40]	; (801de90 <bufchar+0x3c>)
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	1c5a      	adds	r2, r3, #1
 801de6a:	4909      	ldr	r1, [pc, #36]	; (801de90 <bufchar+0x3c>)
 801de6c:	600a      	str	r2, [r1, #0]
 801de6e:	781a      	ldrb	r2, [r3, #0]
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	3301      	adds	r3, #1
 801de78:	60fb      	str	r3, [r7, #12]
 801de7a:	68fa      	ldr	r2, [r7, #12]
 801de7c:	683b      	ldr	r3, [r7, #0]
 801de7e:	429a      	cmp	r2, r3
 801de80:	dbf0      	blt.n	801de64 <bufchar+0x10>
	return count;
 801de82:	683b      	ldr	r3, [r7, #0]
}
 801de84:	4618      	mov	r0, r3
 801de86:	3714      	adds	r7, #20
 801de88:	46bd      	mov	sp, r7
 801de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de8e:	4770      	bx	lr
 801de90:	200009f4 	.word	0x200009f4

0801de94 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801de94:	b580      	push	{r7, lr}
 801de96:	b082      	sub	sp, #8
 801de98:	af00      	add	r7, sp, #0
 801de9a:	6078      	str	r0, [r7, #4]
 801de9c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801de9e:	4a06      	ldr	r2, [pc, #24]	; (801deb8 <MQTTPacket_decodeBuf+0x24>)
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801dea4:	6839      	ldr	r1, [r7, #0]
 801dea6:	4805      	ldr	r0, [pc, #20]	; (801debc <MQTTPacket_decodeBuf+0x28>)
 801dea8:	f7ff ff6e 	bl	801dd88 <MQTTPacket_decode>
 801deac:	4603      	mov	r3, r0
}
 801deae:	4618      	mov	r0, r3
 801deb0:	3708      	adds	r7, #8
 801deb2:	46bd      	mov	sp, r7
 801deb4:	bd80      	pop	{r7, pc}
 801deb6:	bf00      	nop
 801deb8:	200009f4 	.word	0x200009f4
 801debc:	0801de55 	.word	0x0801de55

0801dec0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801dec0:	b480      	push	{r7}
 801dec2:	b085      	sub	sp, #20
 801dec4:	af00      	add	r7, sp, #0
 801dec6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	781b      	ldrb	r3, [r3, #0]
 801ded2:	021b      	lsls	r3, r3, #8
 801ded4:	68fa      	ldr	r2, [r7, #12]
 801ded6:	3201      	adds	r2, #1
 801ded8:	7812      	ldrb	r2, [r2, #0]
 801deda:	4413      	add	r3, r2
 801dedc:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	681b      	ldr	r3, [r3, #0]
 801dee2:	1c9a      	adds	r2, r3, #2
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	601a      	str	r2, [r3, #0]
	return len;
 801dee8:	68bb      	ldr	r3, [r7, #8]
}
 801deea:	4618      	mov	r0, r3
 801deec:	3714      	adds	r7, #20
 801deee:	46bd      	mov	sp, r7
 801def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801def4:	4770      	bx	lr

0801def6 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801def6:	b480      	push	{r7}
 801def8:	b085      	sub	sp, #20
 801defa:	af00      	add	r7, sp, #0
 801defc:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	781b      	ldrb	r3, [r3, #0]
 801df04:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	1c5a      	adds	r2, r3, #1
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	601a      	str	r2, [r3, #0]
	return c;
 801df10:	7bfb      	ldrb	r3, [r7, #15]
}
 801df12:	4618      	mov	r0, r3
 801df14:	3714      	adds	r7, #20
 801df16:	46bd      	mov	sp, r7
 801df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df1c:	4770      	bx	lr

0801df1e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801df1e:	b480      	push	{r7}
 801df20:	b083      	sub	sp, #12
 801df22:	af00      	add	r7, sp, #0
 801df24:	6078      	str	r0, [r7, #4]
 801df26:	460b      	mov	r3, r1
 801df28:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	78fa      	ldrb	r2, [r7, #3]
 801df30:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	1c5a      	adds	r2, r3, #1
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	601a      	str	r2, [r3, #0]
}
 801df3c:	bf00      	nop
 801df3e:	370c      	adds	r7, #12
 801df40:	46bd      	mov	sp, r7
 801df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df46:	4770      	bx	lr

0801df48 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801df48:	b480      	push	{r7}
 801df4a:	b083      	sub	sp, #12
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	6078      	str	r0, [r7, #4]
 801df50:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801df52:	683b      	ldr	r3, [r7, #0]
 801df54:	2b00      	cmp	r3, #0
 801df56:	da00      	bge.n	801df5a <writeInt+0x12>
 801df58:	33ff      	adds	r3, #255	; 0xff
 801df5a:	121b      	asrs	r3, r3, #8
 801df5c:	461a      	mov	r2, r3
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	b2d2      	uxtb	r2, r2
 801df64:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	1c5a      	adds	r2, r3, #1
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801df70:	683b      	ldr	r3, [r7, #0]
 801df72:	425a      	negs	r2, r3
 801df74:	b2db      	uxtb	r3, r3
 801df76:	b2d2      	uxtb	r2, r2
 801df78:	bf58      	it	pl
 801df7a:	4253      	negpl	r3, r2
 801df7c:	687a      	ldr	r2, [r7, #4]
 801df7e:	6812      	ldr	r2, [r2, #0]
 801df80:	b2db      	uxtb	r3, r3
 801df82:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	1c5a      	adds	r2, r3, #1
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	601a      	str	r2, [r3, #0]
}
 801df8e:	bf00      	nop
 801df90:	370c      	adds	r7, #12
 801df92:	46bd      	mov	sp, r7
 801df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df98:	4770      	bx	lr

0801df9a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801df9a:	b580      	push	{r7, lr}
 801df9c:	b084      	sub	sp, #16
 801df9e:	af00      	add	r7, sp, #0
 801dfa0:	6078      	str	r0, [r7, #4]
 801dfa2:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801dfa4:	6838      	ldr	r0, [r7, #0]
 801dfa6:	f7f2 f97b 	bl	80102a0 <strlen>
 801dfaa:	4603      	mov	r3, r0
 801dfac:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801dfae:	68f9      	ldr	r1, [r7, #12]
 801dfb0:	6878      	ldr	r0, [r7, #4]
 801dfb2:	f7ff ffc9 	bl	801df48 <writeInt>
	memcpy(*pptr, string, len);
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	68fa      	ldr	r2, [r7, #12]
 801dfbc:	6839      	ldr	r1, [r7, #0]
 801dfbe:	4618      	mov	r0, r3
 801dfc0:	f00f fe89 	bl	802dcd6 <memcpy>
	*pptr += len;
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	681a      	ldr	r2, [r3, #0]
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	441a      	add	r2, r3
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	601a      	str	r2, [r3, #0]
}
 801dfd0:	bf00      	nop
 801dfd2:	3710      	adds	r7, #16
 801dfd4:	46bd      	mov	sp, r7
 801dfd6:	bd80      	pop	{r7, pc}

0801dfd8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801dfd8:	b580      	push	{r7, lr}
 801dfda:	b084      	sub	sp, #16
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	60f8      	str	r0, [r7, #12]
 801dfe0:	4638      	mov	r0, r7
 801dfe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	dd12      	ble.n	801e012 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	4619      	mov	r1, r3
 801dff0:	68f8      	ldr	r0, [r7, #12]
 801dff2:	f7ff ffa9 	bl	801df48 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	68b9      	ldr	r1, [r7, #8]
 801dffc:	687a      	ldr	r2, [r7, #4]
 801dffe:	4618      	mov	r0, r3
 801e000:	f00f fe69 	bl	802dcd6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	687a      	ldr	r2, [r7, #4]
 801e00a:	441a      	add	r2, r3
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801e010:	e00c      	b.n	801e02c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801e012:	683b      	ldr	r3, [r7, #0]
 801e014:	2b00      	cmp	r3, #0
 801e016:	d005      	beq.n	801e024 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801e018:	683b      	ldr	r3, [r7, #0]
 801e01a:	4619      	mov	r1, r3
 801e01c:	68f8      	ldr	r0, [r7, #12]
 801e01e:	f7ff ffbc 	bl	801df9a <writeCString>
}
 801e022:	e003      	b.n	801e02c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801e024:	2100      	movs	r1, #0
 801e026:	68f8      	ldr	r0, [r7, #12]
 801e028:	f7ff ff8e 	bl	801df48 <writeInt>
}
 801e02c:	bf00      	nop
 801e02e:	3710      	adds	r7, #16
 801e030:	46bd      	mov	sp, r7
 801e032:	bd80      	pop	{r7, pc}

0801e034 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801e034:	b580      	push	{r7, lr}
 801e036:	b086      	sub	sp, #24
 801e038:	af00      	add	r7, sp, #0
 801e03a:	60f8      	str	r0, [r7, #12]
 801e03c:	60b9      	str	r1, [r7, #8]
 801e03e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801e040:	2300      	movs	r3, #0
 801e042:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801e044:	68bb      	ldr	r3, [r7, #8]
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	687a      	ldr	r2, [r7, #4]
 801e04a:	1ad3      	subs	r3, r2, r3
 801e04c:	2b01      	cmp	r3, #1
 801e04e:	dd1a      	ble.n	801e086 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801e050:	68b8      	ldr	r0, [r7, #8]
 801e052:	f7ff ff35 	bl	801dec0 <readInt>
 801e056:	4602      	mov	r2, r0
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801e05c:	68bb      	ldr	r3, [r7, #8]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	68fa      	ldr	r2, [r7, #12]
 801e062:	6852      	ldr	r2, [r2, #4]
 801e064:	4413      	add	r3, r2
 801e066:	687a      	ldr	r2, [r7, #4]
 801e068:	429a      	cmp	r2, r3
 801e06a:	d30c      	bcc.n	801e086 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801e06c:	68bb      	ldr	r3, [r7, #8]
 801e06e:	681a      	ldr	r2, [r3, #0]
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801e074:	68bb      	ldr	r3, [r7, #8]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	68fa      	ldr	r2, [r7, #12]
 801e07a:	6852      	ldr	r2, [r2, #4]
 801e07c:	441a      	add	r2, r3
 801e07e:	68bb      	ldr	r3, [r7, #8]
 801e080:	601a      	str	r2, [r3, #0]
			rc = 1;
 801e082:	2301      	movs	r3, #1
 801e084:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	2200      	movs	r2, #0
 801e08a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801e08c:	697b      	ldr	r3, [r7, #20]
}
 801e08e:	4618      	mov	r0, r3
 801e090:	3718      	adds	r7, #24
 801e092:	46bd      	mov	sp, r7
 801e094:	bd80      	pop	{r7, pc}

0801e096 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801e096:	b580      	push	{r7, lr}
 801e098:	b086      	sub	sp, #24
 801e09a:	af00      	add	r7, sp, #0
 801e09c:	1d3b      	adds	r3, r7, #4
 801e09e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801e0a2:	2300      	movs	r3, #0
 801e0a4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d006      	beq.n	801e0ba <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	f7f2 f8f6 	bl	80102a0 <strlen>
 801e0b4:	4603      	mov	r3, r0
 801e0b6:	617b      	str	r3, [r7, #20]
 801e0b8:	e001      	b.n	801e0be <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801e0ba:	68bb      	ldr	r3, [r7, #8]
 801e0bc:	617b      	str	r3, [r7, #20]
	return rc;
 801e0be:	697b      	ldr	r3, [r7, #20]
}
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	3718      	adds	r7, #24
 801e0c4:	46bd      	mov	sp, r7
 801e0c6:	bd80      	pop	{r7, pc}

0801e0c8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801e0c8:	b580      	push	{r7, lr}
 801e0ca:	b086      	sub	sp, #24
 801e0cc:	af00      	add	r7, sp, #0
 801e0ce:	6078      	str	r0, [r7, #4]
 801e0d0:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801e0d2:	2300      	movs	r3, #0
 801e0d4:	617b      	str	r3, [r7, #20]
		blen = 0;
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d00a      	beq.n	801e0f8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	4618      	mov	r0, r3
 801e0ee:	f7f2 f8d7 	bl	80102a0 <strlen>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	617b      	str	r3, [r7, #20]
 801e0f6:	e005      	b.n	801e104 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	689b      	ldr	r3, [r3, #8]
 801e0fc:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	685b      	ldr	r3, [r3, #4]
 801e102:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801e104:	6838      	ldr	r0, [r7, #0]
 801e106:	f7f2 f8cb 	bl	80102a0 <strlen>
 801e10a:	4603      	mov	r3, r0
 801e10c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801e10e:	697a      	ldr	r2, [r7, #20]
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	429a      	cmp	r2, r3
 801e114:	d10a      	bne.n	801e12c <MQTTPacket_equals+0x64>
 801e116:	697b      	ldr	r3, [r7, #20]
 801e118:	461a      	mov	r2, r3
 801e11a:	6839      	ldr	r1, [r7, #0]
 801e11c:	6938      	ldr	r0, [r7, #16]
 801e11e:	f00f fc4d 	bl	802d9bc <strncmp>
 801e122:	4603      	mov	r3, r0
 801e124:	2b00      	cmp	r3, #0
 801e126:	d101      	bne.n	801e12c <MQTTPacket_equals+0x64>
 801e128:	2301      	movs	r3, #1
 801e12a:	e000      	b.n	801e12e <MQTTPacket_equals+0x66>
 801e12c:	2300      	movs	r3, #0
}
 801e12e:	4618      	mov	r0, r3
 801e130:	3718      	adds	r7, #24
 801e132:	46bd      	mov	sp, r7
 801e134:	bd80      	pop	{r7, pc}

0801e136 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801e136:	b580      	push	{r7, lr}
 801e138:	b086      	sub	sp, #24
 801e13a:	af00      	add	r7, sp, #0
 801e13c:	60f8      	str	r0, [r7, #12]
 801e13e:	4638      	mov	r0, r7
 801e140:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801e144:	2300      	movs	r3, #0
 801e146:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801e148:	463b      	mov	r3, r7
 801e14a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e14e:	f7ff ffa2 	bl	801e096 <MQTTstrlen>
 801e152:	4603      	mov	r3, r0
 801e154:	1c9a      	adds	r2, r3, #2
 801e156:	6a3b      	ldr	r3, [r7, #32]
 801e158:	4413      	add	r3, r2
 801e15a:	697a      	ldr	r2, [r7, #20]
 801e15c:	4413      	add	r3, r2
 801e15e:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	2b00      	cmp	r3, #0
 801e164:	dd02      	ble.n	801e16c <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801e166:	697b      	ldr	r3, [r7, #20]
 801e168:	3302      	adds	r3, #2
 801e16a:	617b      	str	r3, [r7, #20]
	return len;
 801e16c:	697b      	ldr	r3, [r7, #20]
}
 801e16e:	4618      	mov	r0, r3
 801e170:	3718      	adds	r7, #24
 801e172:	46bd      	mov	sp, r7
 801e174:	bd80      	pop	{r7, pc}

0801e176 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801e176:	b580      	push	{r7, lr}
 801e178:	b08a      	sub	sp, #40	; 0x28
 801e17a:	af02      	add	r7, sp, #8
 801e17c:	60f8      	str	r0, [r7, #12]
 801e17e:	60b9      	str	r1, [r7, #8]
 801e180:	603b      	str	r3, [r7, #0]
 801e182:	4613      	mov	r3, r2
 801e184:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801e18a:	2300      	movs	r3, #0
 801e18c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801e18e:	2300      	movs	r3, #0
 801e190:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e192:	2300      	movs	r3, #0
 801e194:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801e196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e198:	9300      	str	r3, [sp, #0]
 801e19a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e19e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e1a0:	6838      	ldr	r0, [r7, #0]
 801e1a2:	f7ff ffc8 	bl	801e136 <MQTTSerialize_publishLength>
 801e1a6:	61b8      	str	r0, [r7, #24]
 801e1a8:	69b8      	ldr	r0, [r7, #24]
 801e1aa:	f7ff fe29 	bl	801de00 <MQTTPacket_len>
 801e1ae:	4602      	mov	r2, r0
 801e1b0:	68bb      	ldr	r3, [r7, #8]
 801e1b2:	4293      	cmp	r3, r2
 801e1b4:	da03      	bge.n	801e1be <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e1b6:	f06f 0301 	mvn.w	r3, #1
 801e1ba:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e1bc:	e04c      	b.n	801e258 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801e1be:	7c3b      	ldrb	r3, [r7, #16]
 801e1c0:	2203      	movs	r2, #3
 801e1c2:	f362 1307 	bfi	r3, r2, #4, #4
 801e1c6:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801e1c8:	79fb      	ldrb	r3, [r7, #7]
 801e1ca:	f003 0301 	and.w	r3, r3, #1
 801e1ce:	b2da      	uxtb	r2, r3
 801e1d0:	7c3b      	ldrb	r3, [r7, #16]
 801e1d2:	f362 03c3 	bfi	r3, r2, #3, #1
 801e1d6:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801e1d8:	683b      	ldr	r3, [r7, #0]
 801e1da:	f003 0303 	and.w	r3, r3, #3
 801e1de:	b2da      	uxtb	r2, r3
 801e1e0:	7c3b      	ldrb	r3, [r7, #16]
 801e1e2:	f362 0342 	bfi	r3, r2, #1, #2
 801e1e6:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801e1e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e1ec:	f003 0301 	and.w	r3, r3, #1
 801e1f0:	b2da      	uxtb	r2, r3
 801e1f2:	7c3b      	ldrb	r3, [r7, #16]
 801e1f4:	f362 0300 	bfi	r3, r2, #0, #1
 801e1f8:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801e1fa:	7c3a      	ldrb	r2, [r7, #16]
 801e1fc:	f107 0314 	add.w	r3, r7, #20
 801e200:	4611      	mov	r1, r2
 801e202:	4618      	mov	r0, r3
 801e204:	f7ff fe8b 	bl	801df1e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e208:	697b      	ldr	r3, [r7, #20]
 801e20a:	69b9      	ldr	r1, [r7, #24]
 801e20c:	4618      	mov	r0, r3
 801e20e:	f7ff fd8c 	bl	801dd2a <MQTTPacket_encode>
 801e212:	4602      	mov	r2, r0
 801e214:	697b      	ldr	r3, [r7, #20]
 801e216:	4413      	add	r3, r2
 801e218:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801e21a:	f107 0014 	add.w	r0, r7, #20
 801e21e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e222:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e224:	f7ff fed8 	bl	801dfd8 <writeMQTTString>

	if (qos > 0)
 801e228:	683b      	ldr	r3, [r7, #0]
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	dd06      	ble.n	801e23c <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801e22e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801e230:	f107 0314 	add.w	r3, r7, #20
 801e234:	4611      	mov	r1, r2
 801e236:	4618      	mov	r0, r3
 801e238:	f7ff fe86 	bl	801df48 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801e23c:	697b      	ldr	r3, [r7, #20]
 801e23e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e242:	4618      	mov	r0, r3
 801e244:	f00f fd47 	bl	802dcd6 <memcpy>
	ptr += payloadlen;
 801e248:	697a      	ldr	r2, [r7, #20]
 801e24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e24c:	4413      	add	r3, r2
 801e24e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801e250:	697a      	ldr	r2, [r7, #20]
 801e252:	68fb      	ldr	r3, [r7, #12]
 801e254:	1ad3      	subs	r3, r2, r3
 801e256:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e258:	69fb      	ldr	r3, [r7, #28]
}
 801e25a:	4618      	mov	r0, r3
 801e25c:	3720      	adds	r7, #32
 801e25e:	46bd      	mov	sp, r7
 801e260:	bd80      	pop	{r7, pc}

0801e262 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801e262:	b580      	push	{r7, lr}
 801e264:	b088      	sub	sp, #32
 801e266:	af00      	add	r7, sp, #0
 801e268:	60f8      	str	r0, [r7, #12]
 801e26a:	60b9      	str	r1, [r7, #8]
 801e26c:	4611      	mov	r1, r2
 801e26e:	461a      	mov	r2, r3
 801e270:	460b      	mov	r3, r1
 801e272:	71fb      	strb	r3, [r7, #7]
 801e274:	4613      	mov	r3, r2
 801e276:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801e278:	2300      	movs	r3, #0
 801e27a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e27c:	2300      	movs	r3, #0
 801e27e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801e284:	68bb      	ldr	r3, [r7, #8]
 801e286:	2b03      	cmp	r3, #3
 801e288:	dc03      	bgt.n	801e292 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e28a:	f06f 0301 	mvn.w	r3, #1
 801e28e:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e290:	e037      	b.n	801e302 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801e292:	79fb      	ldrb	r3, [r7, #7]
 801e294:	f003 030f 	and.w	r3, r3, #15
 801e298:	b2da      	uxtb	r2, r3
 801e29a:	7e3b      	ldrb	r3, [r7, #24]
 801e29c:	f362 1307 	bfi	r3, r2, #4, #4
 801e2a0:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801e2a2:	79bb      	ldrb	r3, [r7, #6]
 801e2a4:	f003 0301 	and.w	r3, r3, #1
 801e2a8:	b2da      	uxtb	r2, r3
 801e2aa:	7e3b      	ldrb	r3, [r7, #24]
 801e2ac:	f362 03c3 	bfi	r3, r2, #3, #1
 801e2b0:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e2b2:	79fb      	ldrb	r3, [r7, #7]
 801e2b4:	2b06      	cmp	r3, #6
 801e2b6:	bf0c      	ite	eq
 801e2b8:	2301      	moveq	r3, #1
 801e2ba:	2300      	movne	r3, #0
 801e2bc:	b2db      	uxtb	r3, r3
 801e2be:	f003 0303 	and.w	r3, r3, #3
 801e2c2:	b2da      	uxtb	r2, r3
 801e2c4:	7e3b      	ldrb	r3, [r7, #24]
 801e2c6:	f362 0342 	bfi	r3, r2, #1, #2
 801e2ca:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801e2cc:	7e3a      	ldrb	r2, [r7, #24]
 801e2ce:	f107 0314 	add.w	r3, r7, #20
 801e2d2:	4611      	mov	r1, r2
 801e2d4:	4618      	mov	r0, r3
 801e2d6:	f7ff fe22 	bl	801df1e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e2da:	697b      	ldr	r3, [r7, #20]
 801e2dc:	2102      	movs	r1, #2
 801e2de:	4618      	mov	r0, r3
 801e2e0:	f7ff fd23 	bl	801dd2a <MQTTPacket_encode>
 801e2e4:	4602      	mov	r2, r0
 801e2e6:	697b      	ldr	r3, [r7, #20]
 801e2e8:	4413      	add	r3, r2
 801e2ea:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801e2ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e2ee:	f107 0314 	add.w	r3, r7, #20
 801e2f2:	4611      	mov	r1, r2
 801e2f4:	4618      	mov	r0, r3
 801e2f6:	f7ff fe27 	bl	801df48 <writeInt>
	rc = ptr - buf;
 801e2fa:	697a      	ldr	r2, [r7, #20]
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	1ad3      	subs	r3, r2, r3
 801e300:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e302:	69fb      	ldr	r3, [r7, #28]
}
 801e304:	4618      	mov	r0, r3
 801e306:	3720      	adds	r7, #32
 801e308:	46bd      	mov	sp, r7
 801e30a:	bd80      	pop	{r7, pc}

0801e30c <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801e30c:	b590      	push	{r4, r7, lr}
 801e30e:	b085      	sub	sp, #20
 801e310:	af00      	add	r7, sp, #0
 801e312:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e314:	2300      	movs	r3, #0
 801e316:	60fb      	str	r3, [r7, #12]
 801e318:	2300      	movs	r3, #0
 801e31a:	60bb      	str	r3, [r7, #8]
 801e31c:	e02e      	b.n	801e37c <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801e31e:	68bb      	ldr	r3, [r7, #8]
 801e320:	687a      	ldr	r2, [r7, #4]
 801e322:	441a      	add	r2, r3
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	6879      	ldr	r1, [r7, #4]
 801e328:	440b      	add	r3, r1
 801e32a:	7812      	ldrb	r2, [r2, #0]
 801e32c:	701a      	strb	r2, [r3, #0]
 801e32e:	781b      	ldrb	r3, [r3, #0]
 801e330:	2b25      	cmp	r3, #37	; 0x25
 801e332:	d11d      	bne.n	801e370 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801e334:	68bb      	ldr	r3, [r7, #8]
 801e336:	3301      	adds	r3, #1
 801e338:	687a      	ldr	r2, [r7, #4]
 801e33a:	4413      	add	r3, r2
 801e33c:	781b      	ldrb	r3, [r3, #0]
 801e33e:	4618      	mov	r0, r3
 801e340:	f000 fbf1 	bl	801eb26 <C2D>
 801e344:	4603      	mov	r3, r0
 801e346:	011b      	lsls	r3, r3, #4
 801e348:	b2dc      	uxtb	r4, r3
 801e34a:	68bb      	ldr	r3, [r7, #8]
 801e34c:	3302      	adds	r3, #2
 801e34e:	687a      	ldr	r2, [r7, #4]
 801e350:	4413      	add	r3, r2
 801e352:	781b      	ldrb	r3, [r3, #0]
 801e354:	4618      	mov	r0, r3
 801e356:	f000 fbe6 	bl	801eb26 <C2D>
 801e35a:	4603      	mov	r3, r0
 801e35c:	4619      	mov	r1, r3
 801e35e:	68fb      	ldr	r3, [r7, #12]
 801e360:	687a      	ldr	r2, [r7, #4]
 801e362:	4413      	add	r3, r2
 801e364:	1862      	adds	r2, r4, r1
 801e366:	b2d2      	uxtb	r2, r2
 801e368:	701a      	strb	r2, [r3, #0]
			y+=2;
 801e36a:	68bb      	ldr	r3, [r7, #8]
 801e36c:	3302      	adds	r3, #2
 801e36e:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	3301      	adds	r3, #1
 801e374:	60fb      	str	r3, [r7, #12]
 801e376:	68bb      	ldr	r3, [r7, #8]
 801e378:	3301      	adds	r3, #1
 801e37a:	60bb      	str	r3, [r7, #8]
 801e37c:	68bb      	ldr	r3, [r7, #8]
 801e37e:	687a      	ldr	r2, [r7, #4]
 801e380:	4413      	add	r3, r2
 801e382:	781b      	ldrb	r3, [r3, #0]
 801e384:	2b00      	cmp	r3, #0
 801e386:	d1ca      	bne.n	801e31e <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	687a      	ldr	r2, [r7, #4]
 801e38c:	4413      	add	r3, r2
 801e38e:	2200      	movs	r2, #0
 801e390:	701a      	strb	r2, [r3, #0]
}
 801e392:	bf00      	nop
 801e394:	3714      	adds	r7, #20
 801e396:	46bd      	mov	sp, r7
 801e398:	bd90      	pop	{r4, r7, pc}
	...

0801e39c <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801e39c:	b580      	push	{r7, lr}
 801e39e:	b088      	sub	sp, #32
 801e3a0:	af00      	add	r7, sp, #0
 801e3a2:	60f8      	str	r0, [r7, #12]
 801e3a4:	460b      	mov	r3, r1
 801e3a6:	607a      	str	r2, [r7, #4]
 801e3a8:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801e3aa:	7afb      	ldrb	r3, [r7, #11]
 801e3ac:	2b01      	cmp	r3, #1
 801e3ae:	d102      	bne.n	801e3b6 <make_http_response_head+0x1a>
 801e3b0:	4b42      	ldr	r3, [pc, #264]	; (801e4bc <make_http_response_head+0x120>)
 801e3b2:	61fb      	str	r3, [r7, #28]
 801e3b4:	e061      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801e3b6:	7afb      	ldrb	r3, [r7, #11]
 801e3b8:	2b02      	cmp	r3, #2
 801e3ba:	d102      	bne.n	801e3c2 <make_http_response_head+0x26>
 801e3bc:	4b40      	ldr	r3, [pc, #256]	; (801e4c0 <make_http_response_head+0x124>)
 801e3be:	61fb      	str	r3, [r7, #28]
 801e3c0:	e05b      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801e3c2:	7afb      	ldrb	r3, [r7, #11]
 801e3c4:	2b03      	cmp	r3, #3
 801e3c6:	d102      	bne.n	801e3ce <make_http_response_head+0x32>
 801e3c8:	4b3e      	ldr	r3, [pc, #248]	; (801e4c4 <make_http_response_head+0x128>)
 801e3ca:	61fb      	str	r3, [r7, #28]
 801e3cc:	e055      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801e3ce:	7afb      	ldrb	r3, [r7, #11]
 801e3d0:	2b04      	cmp	r3, #4
 801e3d2:	d102      	bne.n	801e3da <make_http_response_head+0x3e>
 801e3d4:	4b3c      	ldr	r3, [pc, #240]	; (801e4c8 <make_http_response_head+0x12c>)
 801e3d6:	61fb      	str	r3, [r7, #28]
 801e3d8:	e04f      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801e3da:	7afb      	ldrb	r3, [r7, #11]
 801e3dc:	2b05      	cmp	r3, #5
 801e3de:	d102      	bne.n	801e3e6 <make_http_response_head+0x4a>
 801e3e0:	4b3a      	ldr	r3, [pc, #232]	; (801e4cc <make_http_response_head+0x130>)
 801e3e2:	61fb      	str	r3, [r7, #28]
 801e3e4:	e049      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801e3e6:	7afb      	ldrb	r3, [r7, #11]
 801e3e8:	2b09      	cmp	r3, #9
 801e3ea:	d102      	bne.n	801e3f2 <make_http_response_head+0x56>
 801e3ec:	4b38      	ldr	r3, [pc, #224]	; (801e4d0 <make_http_response_head+0x134>)
 801e3ee:	61fb      	str	r3, [r7, #28]
 801e3f0:	e043      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801e3f2:	7afb      	ldrb	r3, [r7, #11]
 801e3f4:	2b0a      	cmp	r3, #10
 801e3f6:	d102      	bne.n	801e3fe <make_http_response_head+0x62>
 801e3f8:	4b36      	ldr	r3, [pc, #216]	; (801e4d4 <make_http_response_head+0x138>)
 801e3fa:	61fb      	str	r3, [r7, #28]
 801e3fc:	e03d      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801e3fe:	7afb      	ldrb	r3, [r7, #11]
 801e400:	2b0c      	cmp	r3, #12
 801e402:	d102      	bne.n	801e40a <make_http_response_head+0x6e>
 801e404:	4b34      	ldr	r3, [pc, #208]	; (801e4d8 <make_http_response_head+0x13c>)
 801e406:	61fb      	str	r3, [r7, #28]
 801e408:	e037      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801e40a:	7afb      	ldrb	r3, [r7, #11]
 801e40c:	2b0b      	cmp	r3, #11
 801e40e:	d102      	bne.n	801e416 <make_http_response_head+0x7a>
 801e410:	4b32      	ldr	r3, [pc, #200]	; (801e4dc <make_http_response_head+0x140>)
 801e412:	61fb      	str	r3, [r7, #28]
 801e414:	e031      	b.n	801e47a <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801e416:	7afb      	ldrb	r3, [r7, #11]
 801e418:	2b08      	cmp	r3, #8
 801e41a:	d102      	bne.n	801e422 <make_http_response_head+0x86>
 801e41c:	4b30      	ldr	r3, [pc, #192]	; (801e4e0 <make_http_response_head+0x144>)
 801e41e:	61fb      	str	r3, [r7, #28]
 801e420:	e02b      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801e422:	7afb      	ldrb	r3, [r7, #11]
 801e424:	2b0d      	cmp	r3, #13
 801e426:	d102      	bne.n	801e42e <make_http_response_head+0x92>
 801e428:	4b2e      	ldr	r3, [pc, #184]	; (801e4e4 <make_http_response_head+0x148>)
 801e42a:	61fb      	str	r3, [r7, #28]
 801e42c:	e025      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801e42e:	7afb      	ldrb	r3, [r7, #11]
 801e430:	2b0e      	cmp	r3, #14
 801e432:	d102      	bne.n	801e43a <make_http_response_head+0x9e>
 801e434:	4b2c      	ldr	r3, [pc, #176]	; (801e4e8 <make_http_response_head+0x14c>)
 801e436:	61fb      	str	r3, [r7, #28]
 801e438:	e01f      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801e43a:	7afb      	ldrb	r3, [r7, #11]
 801e43c:	2b14      	cmp	r3, #20
 801e43e:	d102      	bne.n	801e446 <make_http_response_head+0xaa>
 801e440:	4b2a      	ldr	r3, [pc, #168]	; (801e4ec <make_http_response_head+0x150>)
 801e442:	61fb      	str	r3, [r7, #28]
 801e444:	e019      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801e446:	7afb      	ldrb	r3, [r7, #11]
 801e448:	2b15      	cmp	r3, #21
 801e44a:	d102      	bne.n	801e452 <make_http_response_head+0xb6>
 801e44c:	4b28      	ldr	r3, [pc, #160]	; (801e4f0 <make_http_response_head+0x154>)
 801e44e:	61fb      	str	r3, [r7, #28]
 801e450:	e013      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801e452:	7afb      	ldrb	r3, [r7, #11]
 801e454:	2b16      	cmp	r3, #22
 801e456:	d102      	bne.n	801e45e <make_http_response_head+0xc2>
 801e458:	4b26      	ldr	r3, [pc, #152]	; (801e4f4 <make_http_response_head+0x158>)
 801e45a:	61fb      	str	r3, [r7, #28]
 801e45c:	e00d      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801e45e:	7afb      	ldrb	r3, [r7, #11]
 801e460:	2b17      	cmp	r3, #23
 801e462:	d102      	bne.n	801e46a <make_http_response_head+0xce>
 801e464:	4b24      	ldr	r3, [pc, #144]	; (801e4f8 <make_http_response_head+0x15c>)
 801e466:	61fb      	str	r3, [r7, #28]
 801e468:	e007      	b.n	801e47a <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801e46a:	7afb      	ldrb	r3, [r7, #11]
 801e46c:	2b18      	cmp	r3, #24
 801e46e:	d102      	bne.n	801e476 <make_http_response_head+0xda>
 801e470:	4b22      	ldr	r3, [pc, #136]	; (801e4fc <make_http_response_head+0x160>)
 801e472:	61fb      	str	r3, [r7, #28]
 801e474:	e001      	b.n	801e47a <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801e476:	2300      	movs	r3, #0
 801e478:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801e47a:	f107 0310 	add.w	r3, r7, #16
 801e47e:	687a      	ldr	r2, [r7, #4]
 801e480:	491f      	ldr	r1, [pc, #124]	; (801e500 <make_http_response_head+0x164>)
 801e482:	4618      	mov	r0, r3
 801e484:	f00f f902 	bl	802d68c <siprintf>
	strcpy(buf, head);
 801e488:	69f9      	ldr	r1, [r7, #28]
 801e48a:	68f8      	ldr	r0, [r7, #12]
 801e48c:	f00f fc1b 	bl	802dcc6 <strcpy>
	strcat(buf, tmp);
 801e490:	f107 0310 	add.w	r3, r7, #16
 801e494:	4619      	mov	r1, r3
 801e496:	68f8      	ldr	r0, [r7, #12]
 801e498:	f00f fa50 	bl	802d93c <strcat>
	strcat(buf, "\r\n\r\n");
 801e49c:	68f8      	ldr	r0, [r7, #12]
 801e49e:	f7f1 feff 	bl	80102a0 <strlen>
 801e4a2:	4603      	mov	r3, r0
 801e4a4:	461a      	mov	r2, r3
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	4413      	add	r3, r2
 801e4aa:	4a16      	ldr	r2, [pc, #88]	; (801e504 <make_http_response_head+0x168>)
 801e4ac:	6810      	ldr	r0, [r2, #0]
 801e4ae:	6018      	str	r0, [r3, #0]
 801e4b0:	7912      	ldrb	r2, [r2, #4]
 801e4b2:	711a      	strb	r2, [r3, #4]
}
 801e4b4:	bf00      	nop
 801e4b6:	3720      	adds	r7, #32
 801e4b8:	46bd      	mov	sp, r7
 801e4ba:	bd80      	pop	{r7, pc}
 801e4bc:	08032e7c 	.word	0x08032e7c
 801e4c0:	08032ed0 	.word	0x08032ed0
 801e4c4:	08032f0c 	.word	0x08032f0c
 801e4c8:	08032f48 	.word	0x08032f48
 801e4cc:	08032f84 	.word	0x08032f84
 801e4d0:	08032fd4 	.word	0x08032fd4
 801e4d4:	08033028 	.word	0x08033028
 801e4d8:	08033064 	.word	0x08033064
 801e4dc:	080330a8 	.word	0x080330a8
 801e4e0:	080330f0 	.word	0x080330f0
 801e4e4:	0803314c 	.word	0x0803314c
 801e4e8:	08033188 	.word	0x08033188
 801e4ec:	080331c8 	.word	0x080331c8
 801e4f0:	08033218 	.word	0x08033218
 801e4f4:	08033268 	.word	0x08033268
 801e4f8:	080332b0 	.word	0x080332b0
 801e4fc:	08033300 	.word	0x08033300
 801e500:	08033340 	.word	0x08033340
 801e504:	08033344 	.word	0x08033344

0801e508 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	b084      	sub	sp, #16
 801e50c:	af00      	add	r7, sp, #0
 801e50e:	6078      	str	r0, [r7, #4]
 801e510:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801e512:	683b      	ldr	r3, [r7, #0]
 801e514:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801e516:	499f      	ldr	r1, [pc, #636]	; (801e794 <find_http_uri_type+0x28c>)
 801e518:	68f8      	ldr	r0, [r7, #12]
 801e51a:	f00f fae1 	bl	802dae0 <strstr>
 801e51e:	4603      	mov	r3, r0
 801e520:	2b00      	cmp	r3, #0
 801e522:	d106      	bne.n	801e532 <find_http_uri_type+0x2a>
 801e524:	499c      	ldr	r1, [pc, #624]	; (801e798 <find_http_uri_type+0x290>)
 801e526:	68f8      	ldr	r0, [r7, #12]
 801e528:	f00f fada 	bl	802dae0 <strstr>
 801e52c:	4603      	mov	r3, r0
 801e52e:	2b00      	cmp	r3, #0
 801e530:	d003      	beq.n	801e53a <find_http_uri_type+0x32>
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	2201      	movs	r2, #1
 801e536:	701a      	strb	r2, [r3, #0]
 801e538:	e127      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801e53a:	4998      	ldr	r1, [pc, #608]	; (801e79c <find_http_uri_type+0x294>)
 801e53c:	68f8      	ldr	r0, [r7, #12]
 801e53e:	f00f facf 	bl	802dae0 <strstr>
 801e542:	4603      	mov	r3, r0
 801e544:	2b00      	cmp	r3, #0
 801e546:	d003      	beq.n	801e550 <find_http_uri_type+0x48>
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	2202      	movs	r2, #2
 801e54c:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801e54e:	e11c      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801e550:	4993      	ldr	r1, [pc, #588]	; (801e7a0 <find_http_uri_type+0x298>)
 801e552:	68f8      	ldr	r0, [r7, #12]
 801e554:	f00f fac4 	bl	802dae0 <strstr>
 801e558:	4603      	mov	r3, r0
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	d106      	bne.n	801e56c <find_http_uri_type+0x64>
 801e55e:	4991      	ldr	r1, [pc, #580]	; (801e7a4 <find_http_uri_type+0x29c>)
 801e560:	68f8      	ldr	r0, [r7, #12]
 801e562:	f00f fabd 	bl	802dae0 <strstr>
 801e566:	4603      	mov	r3, r0
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d003      	beq.n	801e574 <find_http_uri_type+0x6c>
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	2203      	movs	r2, #3
 801e570:	701a      	strb	r2, [r3, #0]
 801e572:	e10a      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801e574:	498c      	ldr	r1, [pc, #560]	; (801e7a8 <find_http_uri_type+0x2a0>)
 801e576:	68f8      	ldr	r0, [r7, #12]
 801e578:	f00f fab2 	bl	802dae0 <strstr>
 801e57c:	4603      	mov	r3, r0
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d106      	bne.n	801e590 <find_http_uri_type+0x88>
 801e582:	498a      	ldr	r1, [pc, #552]	; (801e7ac <find_http_uri_type+0x2a4>)
 801e584:	68f8      	ldr	r0, [r7, #12]
 801e586:	f00f faab 	bl	802dae0 <strstr>
 801e58a:	4603      	mov	r3, r0
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	d003      	beq.n	801e598 <find_http_uri_type+0x90>
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	2204      	movs	r2, #4
 801e594:	701a      	strb	r2, [r3, #0]
 801e596:	e0f8      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e598:	4985      	ldr	r1, [pc, #532]	; (801e7b0 <find_http_uri_type+0x2a8>)
 801e59a:	68f8      	ldr	r0, [r7, #12]
 801e59c:	f00f faa0 	bl	802dae0 <strstr>
 801e5a0:	4603      	mov	r3, r0
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d003      	beq.n	801e5ae <find_http_uri_type+0xa6>
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	2205      	movs	r2, #5
 801e5aa:	701a      	strb	r2, [r3, #0]
}
 801e5ac:	e0ed      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e5ae:	4981      	ldr	r1, [pc, #516]	; (801e7b4 <find_http_uri_type+0x2ac>)
 801e5b0:	68f8      	ldr	r0, [r7, #12]
 801e5b2:	f00f fa95 	bl	802dae0 <strstr>
 801e5b6:	4603      	mov	r3, r0
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d106      	bne.n	801e5ca <find_http_uri_type+0xc2>
 801e5bc:	497e      	ldr	r1, [pc, #504]	; (801e7b8 <find_http_uri_type+0x2b0>)
 801e5be:	68f8      	ldr	r0, [r7, #12]
 801e5c0:	f00f fa8e 	bl	802dae0 <strstr>
 801e5c4:	4603      	mov	r3, r0
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d003      	beq.n	801e5d2 <find_http_uri_type+0xca>
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	2208      	movs	r2, #8
 801e5ce:	701a      	strb	r2, [r3, #0]
 801e5d0:	e0db      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e5d2:	497a      	ldr	r1, [pc, #488]	; (801e7bc <find_http_uri_type+0x2b4>)
 801e5d4:	68f8      	ldr	r0, [r7, #12]
 801e5d6:	f00f fa83 	bl	802dae0 <strstr>
 801e5da:	4603      	mov	r3, r0
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d106      	bne.n	801e5ee <find_http_uri_type+0xe6>
 801e5e0:	4977      	ldr	r1, [pc, #476]	; (801e7c0 <find_http_uri_type+0x2b8>)
 801e5e2:	68f8      	ldr	r0, [r7, #12]
 801e5e4:	f00f fa7c 	bl	802dae0 <strstr>
 801e5e8:	4603      	mov	r3, r0
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d003      	beq.n	801e5f6 <find_http_uri_type+0xee>
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	220c      	movs	r2, #12
 801e5f2:	701a      	strb	r2, [r3, #0]
 801e5f4:	e0c9      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e5f6:	4973      	ldr	r1, [pc, #460]	; (801e7c4 <find_http_uri_type+0x2bc>)
 801e5f8:	68f8      	ldr	r0, [r7, #12]
 801e5fa:	f00f fa71 	bl	802dae0 <strstr>
 801e5fe:	4603      	mov	r3, r0
 801e600:	2b00      	cmp	r3, #0
 801e602:	d106      	bne.n	801e612 <find_http_uri_type+0x10a>
 801e604:	4970      	ldr	r1, [pc, #448]	; (801e7c8 <find_http_uri_type+0x2c0>)
 801e606:	68f8      	ldr	r0, [r7, #12]
 801e608:	f00f fa6a 	bl	802dae0 <strstr>
 801e60c:	4603      	mov	r3, r0
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d003      	beq.n	801e61a <find_http_uri_type+0x112>
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	220b      	movs	r2, #11
 801e616:	701a      	strb	r2, [r3, #0]
 801e618:	e0b7      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e61a:	4967      	ldr	r1, [pc, #412]	; (801e7b8 <find_http_uri_type+0x2b0>)
 801e61c:	68f8      	ldr	r0, [r7, #12]
 801e61e:	f00f fa5f 	bl	802dae0 <strstr>
 801e622:	4603      	mov	r3, r0
 801e624:	2b00      	cmp	r3, #0
 801e626:	d106      	bne.n	801e636 <find_http_uri_type+0x12e>
 801e628:	4962      	ldr	r1, [pc, #392]	; (801e7b4 <find_http_uri_type+0x2ac>)
 801e62a:	68f8      	ldr	r0, [r7, #12]
 801e62c:	f00f fa58 	bl	802dae0 <strstr>
 801e630:	4603      	mov	r3, r0
 801e632:	2b00      	cmp	r3, #0
 801e634:	d003      	beq.n	801e63e <find_http_uri_type+0x136>
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	2208      	movs	r2, #8
 801e63a:	701a      	strb	r2, [r3, #0]
 801e63c:	e0a5      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e63e:	4963      	ldr	r1, [pc, #396]	; (801e7cc <find_http_uri_type+0x2c4>)
 801e640:	68f8      	ldr	r0, [r7, #12]
 801e642:	f00f fa4d 	bl	802dae0 <strstr>
 801e646:	4603      	mov	r3, r0
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d106      	bne.n	801e65a <find_http_uri_type+0x152>
 801e64c:	4960      	ldr	r1, [pc, #384]	; (801e7d0 <find_http_uri_type+0x2c8>)
 801e64e:	68f8      	ldr	r0, [r7, #12]
 801e650:	f00f fa46 	bl	802dae0 <strstr>
 801e654:	4603      	mov	r3, r0
 801e656:	2b00      	cmp	r3, #0
 801e658:	d003      	beq.n	801e662 <find_http_uri_type+0x15a>
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	2209      	movs	r2, #9
 801e65e:	701a      	strb	r2, [r3, #0]
 801e660:	e093      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e662:	495c      	ldr	r1, [pc, #368]	; (801e7d4 <find_http_uri_type+0x2cc>)
 801e664:	68f8      	ldr	r0, [r7, #12]
 801e666:	f00f fa3b 	bl	802dae0 <strstr>
 801e66a:	4603      	mov	r3, r0
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d106      	bne.n	801e67e <find_http_uri_type+0x176>
 801e670:	4959      	ldr	r1, [pc, #356]	; (801e7d8 <find_http_uri_type+0x2d0>)
 801e672:	68f8      	ldr	r0, [r7, #12]
 801e674:	f00f fa34 	bl	802dae0 <strstr>
 801e678:	4603      	mov	r3, r0
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d003      	beq.n	801e686 <find_http_uri_type+0x17e>
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	220a      	movs	r2, #10
 801e682:	701a      	strb	r2, [r3, #0]
 801e684:	e081      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e686:	4955      	ldr	r1, [pc, #340]	; (801e7dc <find_http_uri_type+0x2d4>)
 801e688:	68f8      	ldr	r0, [r7, #12]
 801e68a:	f00f fa29 	bl	802dae0 <strstr>
 801e68e:	4603      	mov	r3, r0
 801e690:	2b00      	cmp	r3, #0
 801e692:	d106      	bne.n	801e6a2 <find_http_uri_type+0x19a>
 801e694:	4952      	ldr	r1, [pc, #328]	; (801e7e0 <find_http_uri_type+0x2d8>)
 801e696:	68f8      	ldr	r0, [r7, #12]
 801e698:	f00f fa22 	bl	802dae0 <strstr>
 801e69c:	4603      	mov	r3, r0
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d003      	beq.n	801e6aa <find_http_uri_type+0x1a2>
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	220d      	movs	r2, #13
 801e6a6:	701a      	strb	r2, [r3, #0]
 801e6a8:	e06f      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e6aa:	494e      	ldr	r1, [pc, #312]	; (801e7e4 <find_http_uri_type+0x2dc>)
 801e6ac:	68f8      	ldr	r0, [r7, #12]
 801e6ae:	f00f fa17 	bl	802dae0 <strstr>
 801e6b2:	4603      	mov	r3, r0
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d106      	bne.n	801e6c6 <find_http_uri_type+0x1be>
 801e6b8:	494b      	ldr	r1, [pc, #300]	; (801e7e8 <find_http_uri_type+0x2e0>)
 801e6ba:	68f8      	ldr	r0, [r7, #12]
 801e6bc:	f00f fa10 	bl	802dae0 <strstr>
 801e6c0:	4603      	mov	r3, r0
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d003      	beq.n	801e6ce <find_http_uri_type+0x1c6>
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	220e      	movs	r2, #14
 801e6ca:	701a      	strb	r2, [r3, #0]
 801e6cc:	e05d      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e6ce:	4947      	ldr	r1, [pc, #284]	; (801e7ec <find_http_uri_type+0x2e4>)
 801e6d0:	68f8      	ldr	r0, [r7, #12]
 801e6d2:	f00f fa05 	bl	802dae0 <strstr>
 801e6d6:	4603      	mov	r3, r0
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	d106      	bne.n	801e6ea <find_http_uri_type+0x1e2>
 801e6dc:	4944      	ldr	r1, [pc, #272]	; (801e7f0 <find_http_uri_type+0x2e8>)
 801e6de:	68f8      	ldr	r0, [r7, #12]
 801e6e0:	f00f f9fe 	bl	802dae0 <strstr>
 801e6e4:	4603      	mov	r3, r0
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d003      	beq.n	801e6f2 <find_http_uri_type+0x1ea>
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	2214      	movs	r2, #20
 801e6ee:	701a      	strb	r2, [r3, #0]
 801e6f0:	e04b      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e6f2:	4940      	ldr	r1, [pc, #256]	; (801e7f4 <find_http_uri_type+0x2ec>)
 801e6f4:	68f8      	ldr	r0, [r7, #12]
 801e6f6:	f00f f9f3 	bl	802dae0 <strstr>
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d106      	bne.n	801e70e <find_http_uri_type+0x206>
 801e700:	493d      	ldr	r1, [pc, #244]	; (801e7f8 <find_http_uri_type+0x2f0>)
 801e702:	68f8      	ldr	r0, [r7, #12]
 801e704:	f00f f9ec 	bl	802dae0 <strstr>
 801e708:	4603      	mov	r3, r0
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d003      	beq.n	801e716 <find_http_uri_type+0x20e>
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	2215      	movs	r2, #21
 801e712:	701a      	strb	r2, [r3, #0]
 801e714:	e039      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e716:	4939      	ldr	r1, [pc, #228]	; (801e7fc <find_http_uri_type+0x2f4>)
 801e718:	68f8      	ldr	r0, [r7, #12]
 801e71a:	f00f f9e1 	bl	802dae0 <strstr>
 801e71e:	4603      	mov	r3, r0
 801e720:	2b00      	cmp	r3, #0
 801e722:	d106      	bne.n	801e732 <find_http_uri_type+0x22a>
 801e724:	4936      	ldr	r1, [pc, #216]	; (801e800 <find_http_uri_type+0x2f8>)
 801e726:	68f8      	ldr	r0, [r7, #12]
 801e728:	f00f f9da 	bl	802dae0 <strstr>
 801e72c:	4603      	mov	r3, r0
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d003      	beq.n	801e73a <find_http_uri_type+0x232>
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	2216      	movs	r2, #22
 801e736:	701a      	strb	r2, [r3, #0]
 801e738:	e027      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e73a:	4932      	ldr	r1, [pc, #200]	; (801e804 <find_http_uri_type+0x2fc>)
 801e73c:	68f8      	ldr	r0, [r7, #12]
 801e73e:	f00f f9cf 	bl	802dae0 <strstr>
 801e742:	4603      	mov	r3, r0
 801e744:	2b00      	cmp	r3, #0
 801e746:	d106      	bne.n	801e756 <find_http_uri_type+0x24e>
 801e748:	492f      	ldr	r1, [pc, #188]	; (801e808 <find_http_uri_type+0x300>)
 801e74a:	68f8      	ldr	r0, [r7, #12]
 801e74c:	f00f f9c8 	bl	802dae0 <strstr>
 801e750:	4603      	mov	r3, r0
 801e752:	2b00      	cmp	r3, #0
 801e754:	d003      	beq.n	801e75e <find_http_uri_type+0x256>
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	2217      	movs	r2, #23
 801e75a:	701a      	strb	r2, [r3, #0]
 801e75c:	e015      	b.n	801e78a <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e75e:	492b      	ldr	r1, [pc, #172]	; (801e80c <find_http_uri_type+0x304>)
 801e760:	68f8      	ldr	r0, [r7, #12]
 801e762:	f00f f9bd 	bl	802dae0 <strstr>
 801e766:	4603      	mov	r3, r0
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d106      	bne.n	801e77a <find_http_uri_type+0x272>
 801e76c:	4928      	ldr	r1, [pc, #160]	; (801e810 <find_http_uri_type+0x308>)
 801e76e:	68f8      	ldr	r0, [r7, #12]
 801e770:	f00f f9b6 	bl	802dae0 <strstr>
 801e774:	4603      	mov	r3, r0
 801e776:	2b00      	cmp	r3, #0
 801e778:	d003      	beq.n	801e782 <find_http_uri_type+0x27a>
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	2218      	movs	r2, #24
 801e77e:	701a      	strb	r2, [r3, #0]
 801e780:	e003      	b.n	801e78a <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	2200      	movs	r2, #0
 801e786:	701a      	strb	r2, [r3, #0]
}
 801e788:	e7ff      	b.n	801e78a <find_http_uri_type+0x282>
 801e78a:	bf00      	nop
 801e78c:	3710      	adds	r7, #16
 801e78e:	46bd      	mov	sp, r7
 801e790:	bd80      	pop	{r7, pc}
 801e792:	bf00      	nop
 801e794:	0803334c 	.word	0x0803334c
 801e798:	08033354 	.word	0x08033354
 801e79c:	0803335c 	.word	0x0803335c
 801e7a0:	08033364 	.word	0x08033364
 801e7a4:	0803336c 	.word	0x0803336c
 801e7a8:	08033374 	.word	0x08033374
 801e7ac:	0803337c 	.word	0x0803337c
 801e7b0:	08033384 	.word	0x08033384
 801e7b4:	0803338c 	.word	0x0803338c
 801e7b8:	08033394 	.word	0x08033394
 801e7bc:	0803339c 	.word	0x0803339c
 801e7c0:	080333a4 	.word	0x080333a4
 801e7c4:	080333ac 	.word	0x080333ac
 801e7c8:	080333b0 	.word	0x080333b0
 801e7cc:	080333b4 	.word	0x080333b4
 801e7d0:	080333bc 	.word	0x080333bc
 801e7d4:	080333c4 	.word	0x080333c4
 801e7d8:	080333cc 	.word	0x080333cc
 801e7dc:	080333d4 	.word	0x080333d4
 801e7e0:	080333dc 	.word	0x080333dc
 801e7e4:	080333e4 	.word	0x080333e4
 801e7e8:	080333ec 	.word	0x080333ec
 801e7ec:	080333f4 	.word	0x080333f4
 801e7f0:	080333fc 	.word	0x080333fc
 801e7f4:	08033404 	.word	0x08033404
 801e7f8:	0803340c 	.word	0x0803340c
 801e7fc:	08033414 	.word	0x08033414
 801e800:	0803341c 	.word	0x0803341c
 801e804:	08033424 	.word	0x08033424
 801e808:	0803342c 	.word	0x0803342c
 801e80c:	08033434 	.word	0x08033434
 801e810:	0803343c 	.word	0x0803343c

0801e814 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b084      	sub	sp, #16
 801e818:	af00      	add	r7, sp, #0
 801e81a:	6078      	str	r0, [r7, #4]
 801e81c:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801e81e:	4935      	ldr	r1, [pc, #212]	; (801e8f4 <parse_http_request+0xe0>)
 801e820:	6838      	ldr	r0, [r7, #0]
 801e822:	f00f f901 	bl	802da28 <strtok>
 801e826:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d103      	bne.n	801e836 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	2200      	movs	r2, #0
 801e832:	701a      	strb	r2, [r3, #0]
    return;
 801e834:	e05a      	b.n	801e8ec <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801e836:	4930      	ldr	r1, [pc, #192]	; (801e8f8 <parse_http_request+0xe4>)
 801e838:	68f8      	ldr	r0, [r7, #12]
 801e83a:	f7f1 fcd1 	bl	80101e0 <strcmp>
 801e83e:	4603      	mov	r3, r0
 801e840:	2b00      	cmp	r3, #0
 801e842:	d006      	beq.n	801e852 <parse_http_request+0x3e>
 801e844:	492d      	ldr	r1, [pc, #180]	; (801e8fc <parse_http_request+0xe8>)
 801e846:	68f8      	ldr	r0, [r7, #12]
 801e848:	f7f1 fcca 	bl	80101e0 <strcmp>
 801e84c:	4603      	mov	r3, r0
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d10a      	bne.n	801e868 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	2201      	movs	r2, #1
 801e856:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	3304      	adds	r3, #4
 801e85c:	4925      	ldr	r1, [pc, #148]	; (801e8f4 <parse_http_request+0xe0>)
 801e85e:	4618      	mov	r0, r3
 801e860:	f00f f8e2 	bl	802da28 <strtok>
 801e864:	60f8      	str	r0, [r7, #12]
 801e866:	e034      	b.n	801e8d2 <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801e868:	4925      	ldr	r1, [pc, #148]	; (801e900 <parse_http_request+0xec>)
 801e86a:	68f8      	ldr	r0, [r7, #12]
 801e86c:	f7f1 fcb8 	bl	80101e0 <strcmp>
 801e870:	4603      	mov	r3, r0
 801e872:	2b00      	cmp	r3, #0
 801e874:	d006      	beq.n	801e884 <parse_http_request+0x70>
 801e876:	4923      	ldr	r1, [pc, #140]	; (801e904 <parse_http_request+0xf0>)
 801e878:	68f8      	ldr	r0, [r7, #12]
 801e87a:	f7f1 fcb1 	bl	80101e0 <strcmp>
 801e87e:	4603      	mov	r3, r0
 801e880:	2b00      	cmp	r3, #0
 801e882:	d10a      	bne.n	801e89a <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	2202      	movs	r2, #2
 801e888:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801e88a:	68fb      	ldr	r3, [r7, #12]
 801e88c:	3305      	adds	r3, #5
 801e88e:	4919      	ldr	r1, [pc, #100]	; (801e8f4 <parse_http_request+0xe0>)
 801e890:	4618      	mov	r0, r3
 801e892:	f00f f8c9 	bl	802da28 <strtok>
 801e896:	60f8      	str	r0, [r7, #12]
 801e898:	e01b      	b.n	801e8d2 <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801e89a:	491b      	ldr	r1, [pc, #108]	; (801e908 <parse_http_request+0xf4>)
 801e89c:	68f8      	ldr	r0, [r7, #12]
 801e89e:	f7f1 fc9f 	bl	80101e0 <strcmp>
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d006      	beq.n	801e8b6 <parse_http_request+0xa2>
 801e8a8:	4918      	ldr	r1, [pc, #96]	; (801e90c <parse_http_request+0xf8>)
 801e8aa:	68f8      	ldr	r0, [r7, #12]
 801e8ac:	f7f1 fc98 	bl	80101e0 <strcmp>
 801e8b0:	4603      	mov	r3, r0
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	d10a      	bne.n	801e8cc <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	3305      	adds	r3, #5
 801e8ba:	4915      	ldr	r1, [pc, #84]	; (801e910 <parse_http_request+0xfc>)
 801e8bc:	4618      	mov	r0, r3
 801e8be:	f00f f8b3 	bl	802da28 <strtok>
 801e8c2:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	2203      	movs	r2, #3
 801e8c8:	701a      	strb	r2, [r3, #0]
 801e8ca:	e002      	b.n	801e8d2 <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	2200      	movs	r2, #0
 801e8d0:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d103      	bne.n	801e8e0 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	2200      	movs	r2, #0
 801e8dc:	701a      	strb	r2, [r3, #0]
    return;
 801e8de:	e005      	b.n	801e8ec <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	3302      	adds	r3, #2
 801e8e4:	68f9      	ldr	r1, [r7, #12]
 801e8e6:	4618      	mov	r0, r3
 801e8e8:	f00f f9ed 	bl	802dcc6 <strcpy>
}
 801e8ec:	3710      	adds	r7, #16
 801e8ee:	46bd      	mov	sp, r7
 801e8f0:	bd80      	pop	{r7, pc}
 801e8f2:	bf00      	nop
 801e8f4:	08033444 	.word	0x08033444
 801e8f8:	08033448 	.word	0x08033448
 801e8fc:	0803344c 	.word	0x0803344c
 801e900:	08033450 	.word	0x08033450
 801e904:	08033458 	.word	0x08033458
 801e908:	08033460 	.word	0x08033460
 801e90c:	08033468 	.word	0x08033468
 801e910:	08033470 	.word	0x08033470

0801e914 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801e914:	b580      	push	{r7, lr}
 801e916:	b08a      	sub	sp, #40	; 0x28
 801e918:	af00      	add	r7, sp, #0
 801e91a:	6078      	str	r0, [r7, #4]
 801e91c:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801e91e:	2300      	movs	r3, #0
 801e920:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801e922:	4b3c      	ldr	r3, [pc, #240]	; (801ea14 <get_http_param_value+0x100>)
 801e924:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801e926:	2300      	movs	r3, #0
 801e928:	837b      	strh	r3, [r7, #26]
 801e92a:	2300      	movs	r3, #0
 801e92c:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801e92e:	2300      	movs	r3, #0
 801e930:	60bb      	str	r3, [r7, #8]
 801e932:	f107 030c 	add.w	r3, r7, #12
 801e936:	2200      	movs	r2, #0
 801e938:	601a      	str	r2, [r3, #0]
 801e93a:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801e93c:	687b      	ldr	r3, [r7, #4]
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d002      	beq.n	801e948 <get_http_param_value+0x34>
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	2b00      	cmp	r3, #0
 801e946:	d101      	bne.n	801e94c <get_http_param_value+0x38>
 801e948:	2300      	movs	r3, #0
 801e94a:	e05f      	b.n	801ea0c <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801e94c:	f107 0308 	add.w	r3, r7, #8
 801e950:	4a31      	ldr	r2, [pc, #196]	; (801ea18 <get_http_param_value+0x104>)
 801e952:	4932      	ldr	r1, [pc, #200]	; (801ea1c <get_http_param_value+0x108>)
 801e954:	6878      	ldr	r0, [r7, #4]
 801e956:	f000 f8b4 	bl	801eac2 <mid>
 801e95a:	4603      	mov	r3, r0
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d001      	beq.n	801e964 <get_http_param_value+0x50>
		return 0;
 801e960:	2300      	movs	r3, #0
 801e962:	e053      	b.n	801ea0c <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801e964:	f107 0308 	add.w	r3, r7, #8
 801e968:	210a      	movs	r1, #10
 801e96a:	4618      	mov	r0, r3
 801e96c:	f000 f884 	bl	801ea78 <ATOI>
 801e970:	4603      	mov	r3, r0
 801e972:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801e974:	492a      	ldr	r1, [pc, #168]	; (801ea20 <get_http_param_value+0x10c>)
 801e976:	6878      	ldr	r0, [r7, #4]
 801e978:	f00f f8b2 	bl	802dae0 <strstr>
 801e97c:	6078      	str	r0, [r7, #4]
	uri += 4;
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	3304      	adds	r3, #4
 801e982:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801e984:	8b3b      	ldrh	r3, [r7, #24]
 801e986:	687a      	ldr	r2, [r7, #4]
 801e988:	4413      	add	r3, r2
 801e98a:	2200      	movs	r2, #0
 801e98c:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801e98e:	6839      	ldr	r1, [r7, #0]
 801e990:	6878      	ldr	r0, [r7, #4]
 801e992:	f00f f8a5 	bl	802dae0 <strstr>
 801e996:	6238      	str	r0, [r7, #32]
 801e998:	6a3b      	ldr	r3, [r7, #32]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d033      	beq.n	801ea06 <get_http_param_value+0xf2>
	{
		test = name + 1;
 801e99e:	6a3b      	ldr	r3, [r7, #32]
 801e9a0:	3301      	adds	r3, #1
 801e9a2:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801e9a4:	6838      	ldr	r0, [r7, #0]
 801e9a6:	f7f1 fc7b 	bl	80102a0 <strlen>
 801e9aa:	4603      	mov	r3, r0
 801e9ac:	3301      	adds	r3, #1
 801e9ae:	6a3a      	ldr	r2, [r7, #32]
 801e9b0:	4413      	add	r3, r2
 801e9b2:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801e9b4:	2126      	movs	r1, #38	; 0x26
 801e9b6:	6a38      	ldr	r0, [r7, #32]
 801e9b8:	f00e ffcf 	bl	802d95a <strchr>
 801e9bc:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 801e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d106      	bne.n	801e9d2 <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801e9c4:	6a38      	ldr	r0, [r7, #32]
 801e9c6:	f7f1 fc6b 	bl	80102a0 <strlen>
 801e9ca:	4602      	mov	r2, r0
 801e9cc:	6a3b      	ldr	r3, [r7, #32]
 801e9ce:	4413      	add	r3, r2
 801e9d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801e9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e9d4:	6a3b      	ldr	r3, [r7, #32]
 801e9d6:	1ad3      	subs	r3, r2, r3
 801e9d8:	837b      	strh	r3, [r7, #26]

		if(len)
 801e9da:	8b7b      	ldrh	r3, [r7, #26]
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	d00e      	beq.n	801e9fe <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801e9e0:	8b7b      	ldrh	r3, [r7, #26]
 801e9e2:	69fa      	ldr	r2, [r7, #28]
 801e9e4:	4413      	add	r3, r2
 801e9e6:	2200      	movs	r2, #0
 801e9e8:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801e9ea:	8b7b      	ldrh	r3, [r7, #26]
 801e9ec:	461a      	mov	r2, r3
 801e9ee:	6a39      	ldr	r1, [r7, #32]
 801e9f0:	69f8      	ldr	r0, [r7, #28]
 801e9f2:	f00e fff5 	bl	802d9e0 <strncpy>
			unescape_http_url((char *)ret);
 801e9f6:	69f8      	ldr	r0, [r7, #28]
 801e9f8:	f7ff fc88 	bl	801e30c <unescape_http_url>
 801e9fc:	e005      	b.n	801ea0a <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801e9fe:	69fb      	ldr	r3, [r7, #28]
 801ea00:	2200      	movs	r2, #0
 801ea02:	701a      	strb	r2, [r3, #0]
 801ea04:	e001      	b.n	801ea0a <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801ea06:	2300      	movs	r3, #0
 801ea08:	e000      	b.n	801ea0c <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801ea0a:	69fb      	ldr	r3, [r7, #28]
}
 801ea0c:	4618      	mov	r0, r3
 801ea0e:	3728      	adds	r7, #40	; 0x28
 801ea10:	46bd      	mov	sp, r7
 801ea12:	bd80      	pop	{r7, pc}
 801ea14:	200009f8 	.word	0x200009f8
 801ea18:	08033474 	.word	0x08033474
 801ea1c:	08033478 	.word	0x08033478
 801ea20:	08033344 	.word	0x08033344

0801ea24 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801ea24:	b580      	push	{r7, lr}
 801ea26:	b084      	sub	sp, #16
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	6078      	str	r0, [r7, #4]
 801ea2c:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d101      	bne.n	801ea38 <get_http_uri_name+0x14>
 801ea34:	2300      	movs	r3, #0
 801ea36:	e017      	b.n	801ea68 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801ea38:	6879      	ldr	r1, [r7, #4]
 801ea3a:	6838      	ldr	r0, [r7, #0]
 801ea3c:	f00f f943 	bl	802dcc6 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801ea40:	490b      	ldr	r1, [pc, #44]	; (801ea70 <get_http_uri_name+0x4c>)
 801ea42:	6838      	ldr	r0, [r7, #0]
 801ea44:	f00e fff0 	bl	802da28 <strtok>
 801ea48:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801ea4a:	490a      	ldr	r1, [pc, #40]	; (801ea74 <get_http_uri_name+0x50>)
 801ea4c:	68f8      	ldr	r0, [r7, #12]
 801ea4e:	f7f1 fbc7 	bl	80101e0 <strcmp>
 801ea52:	4603      	mov	r3, r0
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d002      	beq.n	801ea5e <get_http_uri_name+0x3a>
 801ea58:	68fb      	ldr	r3, [r7, #12]
 801ea5a:	3301      	adds	r3, #1
 801ea5c:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801ea5e:	68f9      	ldr	r1, [r7, #12]
 801ea60:	6838      	ldr	r0, [r7, #0]
 801ea62:	f00f f930 	bl	802dcc6 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801ea66:	2301      	movs	r3, #1
}
 801ea68:	4618      	mov	r0, r3
 801ea6a:	3710      	adds	r7, #16
 801ea6c:	46bd      	mov	sp, r7
 801ea6e:	bd80      	pop	{r7, pc}
 801ea70:	0803348c 	.word	0x0803348c
 801ea74:	08033490 	.word	0x08033490

0801ea78 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801ea78:	b590      	push	{r4, r7, lr}
 801ea7a:	b085      	sub	sp, #20
 801ea7c:	af00      	add	r7, sp, #0
 801ea7e:	6078      	str	r0, [r7, #4]
 801ea80:	460b      	mov	r3, r1
 801ea82:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801ea84:	2300      	movs	r3, #0
 801ea86:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801ea88:	e00d      	b.n	801eaa6 <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801ea8a:	78fb      	ldrb	r3, [r7, #3]
 801ea8c:	68fa      	ldr	r2, [r7, #12]
 801ea8e:	fb02 f403 	mul.w	r4, r2, r3
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	1c5a      	adds	r2, r3, #1
 801ea96:	607a      	str	r2, [r7, #4]
 801ea98:	781b      	ldrb	r3, [r3, #0]
 801ea9a:	4618      	mov	r0, r3
 801ea9c:	f000 f843 	bl	801eb26 <C2D>
 801eaa0:	4603      	mov	r3, r0
 801eaa2:	4423      	add	r3, r4
 801eaa4:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	781b      	ldrb	r3, [r3, #0]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d003      	beq.n	801eab6 <ATOI+0x3e>
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	781b      	ldrb	r3, [r3, #0]
 801eab2:	2b20      	cmp	r3, #32
 801eab4:	d1e9      	bne.n	801ea8a <ATOI+0x12>
	return num;
 801eab6:	68fb      	ldr	r3, [r7, #12]
 801eab8:	b29b      	uxth	r3, r3
}
 801eaba:	4618      	mov	r0, r3
 801eabc:	3714      	adds	r7, #20
 801eabe:	46bd      	mov	sp, r7
 801eac0:	bd90      	pop	{r4, r7, pc}

0801eac2 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801eac2:	b580      	push	{r7, lr}
 801eac4:	b088      	sub	sp, #32
 801eac6:	af00      	add	r7, sp, #0
 801eac8:	60f8      	str	r0, [r7, #12]
 801eaca:	60b9      	str	r1, [r7, #8]
 801eacc:	607a      	str	r2, [r7, #4]
 801eace:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801ead0:	68b9      	ldr	r1, [r7, #8]
 801ead2:	68f8      	ldr	r0, [r7, #12]
 801ead4:	f00f f804 	bl	802dae0 <strstr>
 801ead8:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801eada:	69fb      	ldr	r3, [r7, #28]
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d102      	bne.n	801eae6 <mid+0x24>
 801eae0:	f04f 33ff 	mov.w	r3, #4294967295
 801eae4:	e01b      	b.n	801eb1e <mid+0x5c>
	sub1+=strlen((char*)s1);
 801eae6:	68b8      	ldr	r0, [r7, #8]
 801eae8:	f7f1 fbda 	bl	80102a0 <strlen>
 801eaec:	4602      	mov	r2, r0
 801eaee:	69fb      	ldr	r3, [r7, #28]
 801eaf0:	4413      	add	r3, r2
 801eaf2:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801eaf4:	6879      	ldr	r1, [r7, #4]
 801eaf6:	69f8      	ldr	r0, [r7, #28]
 801eaf8:	f00e fff2 	bl	802dae0 <strstr>
 801eafc:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801eafe:	69ba      	ldr	r2, [r7, #24]
 801eb00:	69fb      	ldr	r3, [r7, #28]
 801eb02:	1ad3      	subs	r3, r2, r3
 801eb04:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801eb06:	8afb      	ldrh	r3, [r7, #22]
 801eb08:	461a      	mov	r2, r3
 801eb0a:	69f9      	ldr	r1, [r7, #28]
 801eb0c:	6838      	ldr	r0, [r7, #0]
 801eb0e:	f00e ff67 	bl	802d9e0 <strncpy>
	sub[n]='\0';
 801eb12:	8afb      	ldrh	r3, [r7, #22]
 801eb14:	683a      	ldr	r2, [r7, #0]
 801eb16:	4413      	add	r3, r2
 801eb18:	2200      	movs	r2, #0
 801eb1a:	701a      	strb	r2, [r3, #0]
	return 0;
 801eb1c:	2300      	movs	r3, #0
}
 801eb1e:	4618      	mov	r0, r3
 801eb20:	3720      	adds	r7, #32
 801eb22:	46bd      	mov	sp, r7
 801eb24:	bd80      	pop	{r7, pc}

0801eb26 <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801eb26:	b480      	push	{r7}
 801eb28:	b083      	sub	sp, #12
 801eb2a:	af00      	add	r7, sp, #0
 801eb2c:	4603      	mov	r3, r0
 801eb2e:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801eb30:	79fb      	ldrb	r3, [r7, #7]
 801eb32:	2b2f      	cmp	r3, #47	; 0x2f
 801eb34:	d906      	bls.n	801eb44 <C2D+0x1e>
 801eb36:	79fb      	ldrb	r3, [r7, #7]
 801eb38:	2b39      	cmp	r3, #57	; 0x39
 801eb3a:	d803      	bhi.n	801eb44 <C2D+0x1e>
		return c - '0';
 801eb3c:	79fb      	ldrb	r3, [r7, #7]
 801eb3e:	3b30      	subs	r3, #48	; 0x30
 801eb40:	b2db      	uxtb	r3, r3
 801eb42:	e014      	b.n	801eb6e <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801eb44:	79fb      	ldrb	r3, [r7, #7]
 801eb46:	2b60      	cmp	r3, #96	; 0x60
 801eb48:	d906      	bls.n	801eb58 <C2D+0x32>
 801eb4a:	79fb      	ldrb	r3, [r7, #7]
 801eb4c:	2b66      	cmp	r3, #102	; 0x66
 801eb4e:	d803      	bhi.n	801eb58 <C2D+0x32>
		return 10 + c -'a';
 801eb50:	79fb      	ldrb	r3, [r7, #7]
 801eb52:	3b57      	subs	r3, #87	; 0x57
 801eb54:	b2db      	uxtb	r3, r3
 801eb56:	e00a      	b.n	801eb6e <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801eb58:	79fb      	ldrb	r3, [r7, #7]
 801eb5a:	2b40      	cmp	r3, #64	; 0x40
 801eb5c:	d906      	bls.n	801eb6c <C2D+0x46>
 801eb5e:	79fb      	ldrb	r3, [r7, #7]
 801eb60:	2b46      	cmp	r3, #70	; 0x46
 801eb62:	d803      	bhi.n	801eb6c <C2D+0x46>
		return 10 + c -'A';
 801eb64:	79fb      	ldrb	r3, [r7, #7]
 801eb66:	3b37      	subs	r3, #55	; 0x37
 801eb68:	b2db      	uxtb	r3, r3
 801eb6a:	e000      	b.n	801eb6e <C2D+0x48>

	return (char)c;
 801eb6c:	79fb      	ldrb	r3, [r7, #7]
}
 801eb6e:	4618      	mov	r0, r3
 801eb70:	370c      	adds	r7, #12
 801eb72:	46bd      	mov	sp, r7
 801eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb78:	4770      	bx	lr

0801eb7a <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801eb7a:	b480      	push	{r7}
 801eb7c:	af00      	add	r7, sp, #0
 801eb7e:	bf00      	nop
 801eb80:	46bd      	mov	sp, r7
 801eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb86:	4770      	bx	lr

0801eb88 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801eb88:	b480      	push	{r7}
 801eb8a:	af00      	add	r7, sp, #0
 801eb8c:	bf00      	nop
 801eb8e:	46bd      	mov	sp, r7
 801eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb94:	4770      	bx	lr
	...

0801eb98 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801eb98:	b480      	push	{r7}
 801eb9a:	b085      	sub	sp, #20
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	4603      	mov	r3, r0
 801eba0:	6039      	str	r1, [r7, #0]
 801eba2:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801eba4:	2300      	movs	r3, #0
 801eba6:	73fb      	strb	r3, [r7, #15]
 801eba8:	e009      	b.n	801ebbe <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801ebaa:	7bfb      	ldrb	r3, [r7, #15]
 801ebac:	683a      	ldr	r2, [r7, #0]
 801ebae:	441a      	add	r2, r3
 801ebb0:	7bfb      	ldrb	r3, [r7, #15]
 801ebb2:	7811      	ldrb	r1, [r2, #0]
 801ebb4:	4a07      	ldr	r2, [pc, #28]	; (801ebd4 <httpServer_Sockinit+0x3c>)
 801ebb6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801ebb8:	7bfb      	ldrb	r3, [r7, #15]
 801ebba:	3301      	adds	r3, #1
 801ebbc:	73fb      	strb	r3, [r7, #15]
 801ebbe:	7bfa      	ldrb	r2, [r7, #15]
 801ebc0:	79fb      	ldrb	r3, [r7, #7]
 801ebc2:	429a      	cmp	r2, r3
 801ebc4:	d3f1      	bcc.n	801ebaa <httpServer_Sockinit+0x12>
	}
}
 801ebc6:	bf00      	nop
 801ebc8:	bf00      	nop
 801ebca:	3714      	adds	r7, #20
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebd2:	4770      	bx	lr
 801ebd4:	200011f8 	.word	0x200011f8

0801ebd8 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801ebd8:	b480      	push	{r7}
 801ebda:	b083      	sub	sp, #12
 801ebdc:	af00      	add	r7, sp, #0
 801ebde:	4603      	mov	r3, r0
 801ebe0:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801ebe2:	79fb      	ldrb	r3, [r7, #7]
 801ebe4:	4a03      	ldr	r2, [pc, #12]	; (801ebf4 <getHTTPSocketNum+0x1c>)
 801ebe6:	5cd3      	ldrb	r3, [r2, r3]
}
 801ebe8:	4618      	mov	r0, r3
 801ebea:	370c      	adds	r7, #12
 801ebec:	46bd      	mov	sp, r7
 801ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebf2:	4770      	bx	lr
 801ebf4:	200011f8 	.word	0x200011f8

0801ebf8 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801ebf8:	b480      	push	{r7}
 801ebfa:	b085      	sub	sp, #20
 801ebfc:	af00      	add	r7, sp, #0
 801ebfe:	4603      	mov	r3, r0
 801ec00:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ec02:	2300      	movs	r3, #0
 801ec04:	73fb      	strb	r3, [r7, #15]
 801ec06:	e00b      	b.n	801ec20 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801ec08:	7bfb      	ldrb	r3, [r7, #15]
 801ec0a:	4a0b      	ldr	r2, [pc, #44]	; (801ec38 <getHTTPSequenceNum+0x40>)
 801ec0c:	5cd3      	ldrb	r3, [r2, r3]
 801ec0e:	79fa      	ldrb	r2, [r7, #7]
 801ec10:	429a      	cmp	r2, r3
 801ec12:	d102      	bne.n	801ec1a <getHTTPSequenceNum+0x22>
 801ec14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ec18:	e007      	b.n	801ec2a <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ec1a:	7bfb      	ldrb	r3, [r7, #15]
 801ec1c:	3301      	adds	r3, #1
 801ec1e:	73fb      	strb	r3, [r7, #15]
 801ec20:	7bfb      	ldrb	r3, [r7, #15]
 801ec22:	2b07      	cmp	r3, #7
 801ec24:	d9f0      	bls.n	801ec08 <getHTTPSequenceNum+0x10>

	return -1;
 801ec26:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	3714      	adds	r7, #20
 801ec2e:	46bd      	mov	sp, r7
 801ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec34:	4770      	bx	lr
 801ec36:	bf00      	nop
 801ec38:	200011f8 	.word	0x200011f8

0801ec3c <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	b084      	sub	sp, #16
 801ec40:	af00      	add	r7, sp, #0
 801ec42:	60f8      	str	r0, [r7, #12]
 801ec44:	60b9      	str	r1, [r7, #8]
 801ec46:	603b      	str	r3, [r7, #0]
 801ec48:	4613      	mov	r3, r2
 801ec4a:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801ec4c:	4a07      	ldr	r2, [pc, #28]	; (801ec6c <httpServer_init+0x30>)
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801ec52:	4a07      	ldr	r2, [pc, #28]	; (801ec70 <httpServer_init+0x34>)
 801ec54:	68bb      	ldr	r3, [r7, #8]
 801ec56:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801ec58:	79fb      	ldrb	r3, [r7, #7]
 801ec5a:	6839      	ldr	r1, [r7, #0]
 801ec5c:	4618      	mov	r0, r3
 801ec5e:	f7ff ff9b 	bl	801eb98 <httpServer_Sockinit>
}
 801ec62:	bf00      	nop
 801ec64:	3710      	adds	r7, #16
 801ec66:	46bd      	mov	sp, r7
 801ec68:	bd80      	pop	{r7, pc}
 801ec6a:	bf00      	nop
 801ec6c:	200012d8 	.word	0x200012d8
 801ec70:	200012dc 	.word	0x200012dc

0801ec74 <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801ec74:	b590      	push	{r4, r7, lr}
 801ec76:	b089      	sub	sp, #36	; 0x24
 801ec78:	af02      	add	r7, sp, #8
 801ec7a:	4603      	mov	r3, r0
 801ec7c:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801ec7e:	2300      	movs	r3, #0
 801ec80:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801ec82:	4bb4      	ldr	r3, [pc, #720]	; (801ef54 <httpServer_run+0x2e0>)
 801ec84:	681b      	ldr	r3, [r3, #0]
 801ec86:	4ab4      	ldr	r2, [pc, #720]	; (801ef58 <httpServer_run+0x2e4>)
 801ec88:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801ec8a:	4bb4      	ldr	r3, [pc, #720]	; (801ef5c <httpServer_run+0x2e8>)
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	4ab4      	ldr	r2, [pc, #720]	; (801ef60 <httpServer_run+0x2ec>)
 801ec90:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801ec92:	79fb      	ldrb	r3, [r7, #7]
 801ec94:	4618      	mov	r0, r3
 801ec96:	f7ff ff9f 	bl	801ebd8 <getHTTPSocketNum>
 801ec9a:	4603      	mov	r3, r0
 801ec9c:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801ec9e:	7bfb      	ldrb	r3, [r7, #15]
 801eca0:	009b      	lsls	r3, r3, #2
 801eca2:	3301      	adds	r3, #1
 801eca4:	00db      	lsls	r3, r3, #3
 801eca6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7f9 fda0 	bl	80187f0 <WIZCHIP_READ>
 801ecb0:	4603      	mov	r3, r0
 801ecb2:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801ecb4:	7bfb      	ldrb	r3, [r7, #15]
 801ecb6:	009b      	lsls	r3, r3, #2
 801ecb8:	3301      	adds	r3, #1
 801ecba:	00db      	lsls	r3, r3, #3
 801ecbc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	f7f9 fd95 	bl	80187f0 <WIZCHIP_READ>
 801ecc6:	4603      	mov	r3, r0
 801ecc8:	2b1c      	cmp	r3, #28
 801ecca:	f200 813e 	bhi.w	801ef4a <httpServer_run+0x2d6>
 801ecce:	a201      	add	r2, pc, #4	; (adr r2, 801ecd4 <httpServer_run+0x60>)
 801ecd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ecd4:	0801ef33 	.word	0x0801ef33
 801ecd8:	0801ef4b 	.word	0x0801ef4b
 801ecdc:	0801ef4b 	.word	0x0801ef4b
 801ece0:	0801ef4b 	.word	0x0801ef4b
 801ece4:	0801ef4b 	.word	0x0801ef4b
 801ece8:	0801ef4b 	.word	0x0801ef4b
 801ecec:	0801ef4b 	.word	0x0801ef4b
 801ecf0:	0801ef4b 	.word	0x0801ef4b
 801ecf4:	0801ef4b 	.word	0x0801ef4b
 801ecf8:	0801ef4b 	.word	0x0801ef4b
 801ecfc:	0801ef4b 	.word	0x0801ef4b
 801ed00:	0801ef4b 	.word	0x0801ef4b
 801ed04:	0801ef4b 	.word	0x0801ef4b
 801ed08:	0801ef4b 	.word	0x0801ef4b
 801ed0c:	0801ef4b 	.word	0x0801ef4b
 801ed10:	0801ef4b 	.word	0x0801ef4b
 801ed14:	0801ef4b 	.word	0x0801ef4b
 801ed18:	0801ef4b 	.word	0x0801ef4b
 801ed1c:	0801ef4b 	.word	0x0801ef4b
 801ed20:	0801ef41 	.word	0x0801ef41
 801ed24:	0801ef4b 	.word	0x0801ef4b
 801ed28:	0801ef4b 	.word	0x0801ef4b
 801ed2c:	0801ef4b 	.word	0x0801ef4b
 801ed30:	0801ed49 	.word	0x0801ed49
 801ed34:	0801ef4b 	.word	0x0801ef4b
 801ed38:	0801ef4b 	.word	0x0801ef4b
 801ed3c:	0801ef4b 	.word	0x0801ef4b
 801ed40:	0801ef4b 	.word	0x0801ef4b
 801ed44:	0801ef29 	.word	0x0801ef29
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801ed48:	7bfb      	ldrb	r3, [r7, #15]
 801ed4a:	009b      	lsls	r3, r3, #2
 801ed4c:	3301      	adds	r3, #1
 801ed4e:	00db      	lsls	r3, r3, #3
 801ed50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801ed54:	4618      	mov	r0, r3
 801ed56:	f7f9 fd4b 	bl	80187f0 <WIZCHIP_READ>
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	f003 0301 	and.w	r3, r3, #1
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	d009      	beq.n	801ed78 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801ed64:	7bfb      	ldrb	r3, [r7, #15]
 801ed66:	009b      	lsls	r3, r3, #2
 801ed68:	3301      	adds	r3, #1
 801ed6a:	00db      	lsls	r3, r3, #3
 801ed6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801ed70:	2101      	movs	r1, #1
 801ed72:	4618      	mov	r0, r3
 801ed74:	f7f9 fd88 	bl	8018888 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801ed78:	79fa      	ldrb	r2, [r7, #7]
 801ed7a:	497a      	ldr	r1, [pc, #488]	; (801ef64 <httpServer_run+0x2f0>)
 801ed7c:	4613      	mov	r3, r2
 801ed7e:	011b      	lsls	r3, r3, #4
 801ed80:	4413      	add	r3, r2
 801ed82:	009b      	lsls	r3, r3, #2
 801ed84:	440b      	add	r3, r1
 801ed86:	781b      	ldrb	r3, [r3, #0]
 801ed88:	2b04      	cmp	r3, #4
 801ed8a:	f000 809b 	beq.w	801eec4 <httpServer_run+0x250>
 801ed8e:	2b04      	cmp	r3, #4
 801ed90:	f300 80c4 	bgt.w	801ef1c <httpServer_run+0x2a8>
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d002      	beq.n	801ed9e <httpServer_run+0x12a>
 801ed98:	2b03      	cmp	r3, #3
 801ed9a:	d06e      	beq.n	801ee7a <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801ed9c:	e0be      	b.n	801ef1c <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801ed9e:	7bfb      	ldrb	r3, [r7, #15]
 801eda0:	4618      	mov	r0, r3
 801eda2:	f7f9 feca 	bl	8018b3a <getSn_RX_RSR>
 801eda6:	4603      	mov	r3, r0
 801eda8:	82fb      	strh	r3, [r7, #22]
 801edaa:	8afb      	ldrh	r3, [r7, #22]
 801edac:	2b00      	cmp	r3, #0
 801edae:	f000 80b7 	beq.w	801ef20 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801edb2:	8afb      	ldrh	r3, [r7, #22]
 801edb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801edb8:	d902      	bls.n	801edc0 <httpServer_run+0x14c>
 801edba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801edbe:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801edc0:	4b65      	ldr	r3, [pc, #404]	; (801ef58 <httpServer_run+0x2e4>)
 801edc2:	6819      	ldr	r1, [r3, #0]
 801edc4:	8afa      	ldrh	r2, [r7, #22]
 801edc6:	7bfb      	ldrb	r3, [r7, #15]
 801edc8:	4618      	mov	r0, r3
 801edca:	f7fa fc29 	bl	8019620 <recv>
 801edce:	4603      	mov	r3, r0
 801edd0:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801edd2:	4b61      	ldr	r3, [pc, #388]	; (801ef58 <httpServer_run+0x2e4>)
 801edd4:	681a      	ldr	r2, [r3, #0]
 801edd6:	8afb      	ldrh	r3, [r7, #22]
 801edd8:	4413      	add	r3, r2
 801edda:	2200      	movs	r2, #0
 801eddc:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801edde:	4b60      	ldr	r3, [pc, #384]	; (801ef60 <httpServer_run+0x2ec>)
 801ede0:	681b      	ldr	r3, [r3, #0]
 801ede2:	4a5d      	ldr	r2, [pc, #372]	; (801ef58 <httpServer_run+0x2e4>)
 801ede4:	6812      	ldr	r2, [r2, #0]
 801ede6:	4611      	mov	r1, r2
 801ede8:	4618      	mov	r0, r3
 801edea:	f7ff fd13 	bl	801e814 <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801edee:	4b5c      	ldr	r3, [pc, #368]	; (801ef60 <httpServer_run+0x2ec>)
 801edf0:	681a      	ldr	r2, [r3, #0]
 801edf2:	7bfb      	ldrb	r3, [r7, #15]
 801edf4:	4611      	mov	r1, r2
 801edf6:	4618      	mov	r0, r3
 801edf8:	f000 fac4 	bl	801f384 <http_process_handler>
						gettime = get_httpServer_timecount();
 801edfc:	f000 fd04 	bl	801f808 <get_httpServer_timecount>
 801ee00:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ee02:	e006      	b.n	801ee12 <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801ee04:	f000 fd00 	bl	801f808 <get_httpServer_timecount>
 801ee08:	4602      	mov	r2, r0
 801ee0a:	693b      	ldr	r3, [r7, #16]
 801ee0c:	1ad3      	subs	r3, r2, r3
 801ee0e:	2b03      	cmp	r3, #3
 801ee10:	d813      	bhi.n	801ee3a <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ee12:	7bfb      	ldrb	r3, [r7, #15]
 801ee14:	4618      	mov	r0, r3
 801ee16:	f7f9 fe45 	bl	8018aa4 <getSn_TX_FSR>
 801ee1a:	4603      	mov	r3, r0
 801ee1c:	461c      	mov	r4, r3
 801ee1e:	7bfb      	ldrb	r3, [r7, #15]
 801ee20:	009b      	lsls	r3, r3, #2
 801ee22:	3301      	adds	r3, #1
 801ee24:	00db      	lsls	r3, r3, #3
 801ee26:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801ee2a:	4618      	mov	r0, r3
 801ee2c:	f7f9 fce0 	bl	80187f0 <WIZCHIP_READ>
 801ee30:	4603      	mov	r3, r0
 801ee32:	029b      	lsls	r3, r3, #10
 801ee34:	429c      	cmp	r4, r3
 801ee36:	d1e5      	bne.n	801ee04 <httpServer_run+0x190>
 801ee38:	e000      	b.n	801ee3c <httpServer_run+0x1c8>
								break;
 801ee3a:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801ee3c:	79fa      	ldrb	r2, [r7, #7]
 801ee3e:	4949      	ldr	r1, [pc, #292]	; (801ef64 <httpServer_run+0x2f0>)
 801ee40:	4613      	mov	r3, r2
 801ee42:	011b      	lsls	r3, r3, #4
 801ee44:	4413      	add	r3, r2
 801ee46:	009b      	lsls	r3, r3, #2
 801ee48:	440b      	add	r3, r1
 801ee4a:	3338      	adds	r3, #56	; 0x38
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d009      	beq.n	801ee66 <httpServer_run+0x1f2>
 801ee52:	79fa      	ldrb	r2, [r7, #7]
 801ee54:	4943      	ldr	r1, [pc, #268]	; (801ef64 <httpServer_run+0x2f0>)
 801ee56:	4613      	mov	r3, r2
 801ee58:	011b      	lsls	r3, r3, #4
 801ee5a:	4413      	add	r3, r2
 801ee5c:	009b      	lsls	r3, r3, #2
 801ee5e:	440b      	add	r3, r1
 801ee60:	2203      	movs	r2, #3
 801ee62:	701a      	strb	r2, [r3, #0]
					break;
 801ee64:	e05c      	b.n	801ef20 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801ee66:	79fa      	ldrb	r2, [r7, #7]
 801ee68:	493e      	ldr	r1, [pc, #248]	; (801ef64 <httpServer_run+0x2f0>)
 801ee6a:	4613      	mov	r3, r2
 801ee6c:	011b      	lsls	r3, r3, #4
 801ee6e:	4413      	add	r3, r2
 801ee70:	009b      	lsls	r3, r3, #2
 801ee72:	440b      	add	r3, r1
 801ee74:	2204      	movs	r2, #4
 801ee76:	701a      	strb	r2, [r3, #0]
					break;
 801ee78:	e052      	b.n	801ef20 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801ee7a:	79fa      	ldrb	r2, [r7, #7]
 801ee7c:	4613      	mov	r3, r2
 801ee7e:	011b      	lsls	r3, r3, #4
 801ee80:	4413      	add	r3, r2
 801ee82:	009b      	lsls	r3, r3, #2
 801ee84:	4a37      	ldr	r2, [pc, #220]	; (801ef64 <httpServer_run+0x2f0>)
 801ee86:	4413      	add	r3, r2
 801ee88:	1c59      	adds	r1, r3, #1
 801ee8a:	4b37      	ldr	r3, [pc, #220]	; (801ef68 <httpServer_run+0x2f4>)
 801ee8c:	681a      	ldr	r2, [r3, #0]
 801ee8e:	7bf8      	ldrb	r0, [r7, #15]
 801ee90:	2300      	movs	r3, #0
 801ee92:	9300      	str	r3, [sp, #0]
 801ee94:	2300      	movs	r3, #0
 801ee96:	f000 f8d5 	bl	801f044 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801ee9a:	79fa      	ldrb	r2, [r7, #7]
 801ee9c:	4931      	ldr	r1, [pc, #196]	; (801ef64 <httpServer_run+0x2f0>)
 801ee9e:	4613      	mov	r3, r2
 801eea0:	011b      	lsls	r3, r3, #4
 801eea2:	4413      	add	r3, r2
 801eea4:	009b      	lsls	r3, r3, #2
 801eea6:	440b      	add	r3, r1
 801eea8:	3338      	adds	r3, #56	; 0x38
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d139      	bne.n	801ef24 <httpServer_run+0x2b0>
 801eeb0:	79fa      	ldrb	r2, [r7, #7]
 801eeb2:	492c      	ldr	r1, [pc, #176]	; (801ef64 <httpServer_run+0x2f0>)
 801eeb4:	4613      	mov	r3, r2
 801eeb6:	011b      	lsls	r3, r3, #4
 801eeb8:	4413      	add	r3, r2
 801eeba:	009b      	lsls	r3, r3, #2
 801eebc:	440b      	add	r3, r1
 801eebe:	2204      	movs	r2, #4
 801eec0:	701a      	strb	r2, [r3, #0]
					break;
 801eec2:	e02f      	b.n	801ef24 <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801eec4:	79fa      	ldrb	r2, [r7, #7]
 801eec6:	4927      	ldr	r1, [pc, #156]	; (801ef64 <httpServer_run+0x2f0>)
 801eec8:	4613      	mov	r3, r2
 801eeca:	011b      	lsls	r3, r3, #4
 801eecc:	4413      	add	r3, r2
 801eece:	009b      	lsls	r3, r3, #2
 801eed0:	440b      	add	r3, r1
 801eed2:	3338      	adds	r3, #56	; 0x38
 801eed4:	2200      	movs	r2, #0
 801eed6:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801eed8:	79fa      	ldrb	r2, [r7, #7]
 801eeda:	4922      	ldr	r1, [pc, #136]	; (801ef64 <httpServer_run+0x2f0>)
 801eedc:	4613      	mov	r3, r2
 801eede:	011b      	lsls	r3, r3, #4
 801eee0:	4413      	add	r3, r2
 801eee2:	009b      	lsls	r3, r3, #2
 801eee4:	440b      	add	r3, r1
 801eee6:	333c      	adds	r3, #60	; 0x3c
 801eee8:	2200      	movs	r2, #0
 801eeea:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801eeec:	79fa      	ldrb	r2, [r7, #7]
 801eeee:	491d      	ldr	r1, [pc, #116]	; (801ef64 <httpServer_run+0x2f0>)
 801eef0:	4613      	mov	r3, r2
 801eef2:	011b      	lsls	r3, r3, #4
 801eef4:	4413      	add	r3, r2
 801eef6:	009b      	lsls	r3, r3, #2
 801eef8:	440b      	add	r3, r1
 801eefa:	3334      	adds	r3, #52	; 0x34
 801eefc:	2200      	movs	r2, #0
 801eefe:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801ef00:	79fa      	ldrb	r2, [r7, #7]
 801ef02:	4918      	ldr	r1, [pc, #96]	; (801ef64 <httpServer_run+0x2f0>)
 801ef04:	4613      	mov	r3, r2
 801ef06:	011b      	lsls	r3, r3, #4
 801ef08:	4413      	add	r3, r2
 801ef0a:	009b      	lsls	r3, r3, #2
 801ef0c:	440b      	add	r3, r1
 801ef0e:	2200      	movs	r2, #0
 801ef10:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801ef12:	7bfb      	ldrb	r3, [r7, #15]
 801ef14:	4618      	mov	r0, r3
 801ef16:	f000 fa13 	bl	801f340 <http_disconnect>
					break;
 801ef1a:	e004      	b.n	801ef26 <httpServer_run+0x2b2>
					break;
 801ef1c:	bf00      	nop
 801ef1e:	e015      	b.n	801ef4c <httpServer_run+0x2d8>
					break;
 801ef20:	bf00      	nop
 801ef22:	e013      	b.n	801ef4c <httpServer_run+0x2d8>
					break;
 801ef24:	bf00      	nop
			}
			break;
 801ef26:	e011      	b.n	801ef4c <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801ef28:	7bfb      	ldrb	r3, [r7, #15]
 801ef2a:	4618      	mov	r0, r3
 801ef2c:	f7fa fa08 	bl	8019340 <disconnect>
			break;
 801ef30:	e00c      	b.n	801ef4c <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801ef32:	7bf8      	ldrb	r0, [r7, #15]
 801ef34:	2300      	movs	r3, #0
 801ef36:	2250      	movs	r2, #80	; 0x50
 801ef38:	2101      	movs	r1, #1
 801ef3a:	f7f9 ff49 	bl	8018dd0 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801ef3e:	e005      	b.n	801ef4c <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801ef40:	7bfb      	ldrb	r3, [r7, #15]
 801ef42:	4618      	mov	r0, r3
 801ef44:	f7fa f8c6 	bl	80190d4 <listen>
			break;
 801ef48:	e000      	b.n	801ef4c <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801ef4a:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801ef4c:	bf00      	nop
 801ef4e:	371c      	adds	r7, #28
 801ef50:	46bd      	mov	sp, r7
 801ef52:	bd90      	pop	{r4, r7, pc}
 801ef54:	200012dc 	.word	0x200012dc
 801ef58:	20001200 	.word	0x20001200
 801ef5c:	200012d8 	.word	0x200012d8
 801ef60:	20001204 	.word	0x20001204
 801ef64:	200012e4 	.word	0x200012e4
 801ef68:	20001208 	.word	0x20001208

0801ef6c <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801ef6c:	b590      	push	{r4, r7, lr}
 801ef6e:	b083      	sub	sp, #12
 801ef70:	af00      	add	r7, sp, #0
 801ef72:	603a      	str	r2, [r7, #0]
 801ef74:	461a      	mov	r2, r3
 801ef76:	4603      	mov	r3, r0
 801ef78:	71fb      	strb	r3, [r7, #7]
 801ef7a:	460b      	mov	r3, r1
 801ef7c:	71bb      	strb	r3, [r7, #6]
 801ef7e:	4613      	mov	r3, r2
 801ef80:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801ef82:	88bb      	ldrh	r3, [r7, #4]
 801ef84:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ef88:	d029      	beq.n	801efde <send_http_response_header+0x72>
 801ef8a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ef8e:	dc3a      	bgt.n	801f006 <send_http_response_header+0x9a>
 801ef90:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ef94:	d019      	beq.n	801efca <send_http_response_header+0x5e>
 801ef96:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ef9a:	dc34      	bgt.n	801f006 <send_http_response_header+0x9a>
 801ef9c:	2bc8      	cmp	r3, #200	; 0xc8
 801ef9e:	d003      	beq.n	801efa8 <send_http_response_header+0x3c>
 801efa0:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 801efa4:	d025      	beq.n	801eff2 <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801efa6:	e02e      	b.n	801f006 <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801efa8:	79bb      	ldrb	r3, [r7, #6]
 801efaa:	2b08      	cmp	r3, #8
 801efac:	d00a      	beq.n	801efc4 <send_http_response_header+0x58>
 801efae:	79bb      	ldrb	r3, [r7, #6]
 801efb0:	2b09      	cmp	r3, #9
 801efb2:	d007      	beq.n	801efc4 <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801efb4:	4b1f      	ldr	r3, [pc, #124]	; (801f034 <send_http_response_header+0xc8>)
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	79b9      	ldrb	r1, [r7, #6]
 801efba:	683a      	ldr	r2, [r7, #0]
 801efbc:	4618      	mov	r0, r3
 801efbe:	f7ff f9ed 	bl	801e39c <make_http_response_head>
			break;
 801efc2:	e021      	b.n	801f008 <send_http_response_header+0x9c>
				http_status = 0;
 801efc4:	2300      	movs	r3, #0
 801efc6:	80bb      	strh	r3, [r7, #4]
			break;
 801efc8:	e01e      	b.n	801f008 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801efca:	4b1a      	ldr	r3, [pc, #104]	; (801f034 <send_http_response_header+0xc8>)
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	4a1a      	ldr	r2, [pc, #104]	; (801f038 <send_http_response_header+0xcc>)
 801efd0:	4618      	mov	r0, r3
 801efd2:	4611      	mov	r1, r2
 801efd4:	2376      	movs	r3, #118	; 0x76
 801efd6:	461a      	mov	r2, r3
 801efd8:	f00e fe7d 	bl	802dcd6 <memcpy>
			break;
 801efdc:	e014      	b.n	801f008 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801efde:	4b15      	ldr	r3, [pc, #84]	; (801f034 <send_http_response_header+0xc8>)
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	4a16      	ldr	r2, [pc, #88]	; (801f03c <send_http_response_header+0xd0>)
 801efe4:	4618      	mov	r0, r3
 801efe6:	4611      	mov	r1, r2
 801efe8:	2399      	movs	r3, #153	; 0x99
 801efea:	461a      	mov	r2, r3
 801efec:	f00e fe73 	bl	802dcd6 <memcpy>
			break;
 801eff0:	e00a      	b.n	801f008 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801eff2:	4b10      	ldr	r3, [pc, #64]	; (801f034 <send_http_response_header+0xc8>)
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	4a12      	ldr	r2, [pc, #72]	; (801f040 <send_http_response_header+0xd4>)
 801eff8:	4618      	mov	r0, r3
 801effa:	4611      	mov	r1, r2
 801effc:	239e      	movs	r3, #158	; 0x9e
 801effe:	461a      	mov	r2, r3
 801f000:	f00e fe69 	bl	802dcd6 <memcpy>
			break;
 801f004:	e000      	b.n	801f008 <send_http_response_header+0x9c>
			break;
 801f006:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801f008:	88bb      	ldrh	r3, [r7, #4]
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d00d      	beq.n	801f02a <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801f00e:	4b09      	ldr	r3, [pc, #36]	; (801f034 <send_http_response_header+0xc8>)
 801f010:	681c      	ldr	r4, [r3, #0]
 801f012:	4b08      	ldr	r3, [pc, #32]	; (801f034 <send_http_response_header+0xc8>)
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	4618      	mov	r0, r3
 801f018:	f7f1 f942 	bl	80102a0 <strlen>
 801f01c:	4603      	mov	r3, r0
 801f01e:	b29a      	uxth	r2, r3
 801f020:	79fb      	ldrb	r3, [r7, #7]
 801f022:	4621      	mov	r1, r4
 801f024:	4618      	mov	r0, r3
 801f026:	f7fa fa01 	bl	801942c <send>
	}
}
 801f02a:	bf00      	nop
 801f02c:	370c      	adds	r7, #12
 801f02e:	46bd      	mov	sp, r7
 801f030:	bd90      	pop	{r4, r7, pc}
 801f032:	bf00      	nop
 801f034:	20001208 	.word	0x20001208
 801f038:	08034808 	.word	0x08034808
 801f03c:	0803476c 	.word	0x0803476c
 801f040:	08034880 	.word	0x08034880

0801f044 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801f044:	b580      	push	{r7, lr}
 801f046:	b0a6      	sub	sp, #152	; 0x98
 801f048:	af00      	add	r7, sp, #0
 801f04a:	60b9      	str	r1, [r7, #8]
 801f04c:	607a      	str	r2, [r7, #4]
 801f04e:	603b      	str	r3, [r7, #0]
 801f050:	4603      	mov	r3, r0
 801f052:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801f054:	2300      	movs	r3, #0
 801f056:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801f05a:	2300      	movs	r3, #0
 801f05c:	613b      	str	r3, [r7, #16]
 801f05e:	f107 0314 	add.w	r3, r7, #20
 801f062:	227c      	movs	r2, #124	; 0x7c
 801f064:	2100      	movs	r1, #0
 801f066:	4618      	mov	r0, r3
 801f068:	f00e fc60 	bl	802d92c <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f06c:	7bfb      	ldrb	r3, [r7, #15]
 801f06e:	4618      	mov	r0, r3
 801f070:	f7ff fdc2 	bl	801ebf8 <getHTTPSequenceNum>
 801f074:	4603      	mov	r3, r0
 801f076:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 801f07a:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 801f07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f082:	f000 812e 	beq.w	801f2e2 <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801f086:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f08a:	4998      	ldr	r1, [pc, #608]	; (801f2ec <send_http_response_body+0x2a8>)
 801f08c:	4613      	mov	r3, r2
 801f08e:	011b      	lsls	r3, r3, #4
 801f090:	4413      	add	r3, r2
 801f092:	009b      	lsls	r3, r3, #2
 801f094:	440b      	add	r3, r1
 801f096:	3338      	adds	r3, #56	; 0x38
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d140      	bne.n	801f120 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801f09e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f0a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f0a6:	d336      	bcc.n	801f116 <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801f0a8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f0ac:	498f      	ldr	r1, [pc, #572]	; (801f2ec <send_http_response_body+0x2a8>)
 801f0ae:	4613      	mov	r3, r2
 801f0b0:	011b      	lsls	r3, r3, #4
 801f0b2:	4413      	add	r3, r2
 801f0b4:	009b      	lsls	r3, r3, #2
 801f0b6:	440b      	add	r3, r1
 801f0b8:	3334      	adds	r3, #52	; 0x34
 801f0ba:	683a      	ldr	r2, [r7, #0]
 801f0bc:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801f0be:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f0c2:	498a      	ldr	r1, [pc, #552]	; (801f2ec <send_http_response_body+0x2a8>)
 801f0c4:	4613      	mov	r3, r2
 801f0c6:	011b      	lsls	r3, r3, #4
 801f0c8:	4413      	add	r3, r2
 801f0ca:	009b      	lsls	r3, r3, #2
 801f0cc:	440b      	add	r3, r1
 801f0ce:	3338      	adds	r3, #56	; 0x38
 801f0d0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801f0d4:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801f0d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801f0da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801f0de:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f0e2:	4613      	mov	r3, r2
 801f0e4:	011b      	lsls	r3, r3, #4
 801f0e6:	4413      	add	r3, r2
 801f0e8:	009b      	lsls	r3, r3, #2
 801f0ea:	4a80      	ldr	r2, [pc, #512]	; (801f2ec <send_http_response_body+0x2a8>)
 801f0ec:	4413      	add	r3, r2
 801f0ee:	3301      	adds	r3, #1
 801f0f0:	2232      	movs	r2, #50	; 0x32
 801f0f2:	2100      	movs	r1, #0
 801f0f4:	4618      	mov	r0, r3
 801f0f6:	f00e fc19 	bl	802d92c <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801f0fa:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f0fe:	4613      	mov	r3, r2
 801f100:	011b      	lsls	r3, r3, #4
 801f102:	4413      	add	r3, r2
 801f104:	009b      	lsls	r3, r3, #2
 801f106:	4a79      	ldr	r2, [pc, #484]	; (801f2ec <send_http_response_body+0x2a8>)
 801f108:	4413      	add	r3, r2
 801f10a:	3301      	adds	r3, #1
 801f10c:	68b9      	ldr	r1, [r7, #8]
 801f10e:	4618      	mov	r0, r3
 801f110:	f00e fdd9 	bl	802dcc6 <strcpy>
 801f114:	e028      	b.n	801f168 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801f116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f11a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f11e:	e023      	b.n	801f168 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801f120:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f124:	4971      	ldr	r1, [pc, #452]	; (801f2ec <send_http_response_body+0x2a8>)
 801f126:	4613      	mov	r3, r2
 801f128:	011b      	lsls	r3, r3, #4
 801f12a:	4413      	add	r3, r2
 801f12c:	009b      	lsls	r3, r3, #2
 801f12e:	440b      	add	r3, r1
 801f130:	3338      	adds	r3, #56	; 0x38
 801f132:	6819      	ldr	r1, [r3, #0]
 801f134:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f138:	486c      	ldr	r0, [pc, #432]	; (801f2ec <send_http_response_body+0x2a8>)
 801f13a:	4613      	mov	r3, r2
 801f13c:	011b      	lsls	r3, r3, #4
 801f13e:	4413      	add	r3, r2
 801f140:	009b      	lsls	r3, r3, #2
 801f142:	4403      	add	r3, r0
 801f144:	333c      	adds	r3, #60	; 0x3c
 801f146:	681b      	ldr	r3, [r3, #0]
 801f148:	1acb      	subs	r3, r1, r3
 801f14a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801f14e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f156:	d304      	bcc.n	801f162 <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801f158:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801f15c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f160:	e002      	b.n	801f168 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801f162:	2301      	movs	r3, #1
 801f164:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801f168:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f16c:	495f      	ldr	r1, [pc, #380]	; (801f2ec <send_http_response_body+0x2a8>)
 801f16e:	4613      	mov	r3, r2
 801f170:	011b      	lsls	r3, r3, #4
 801f172:	4413      	add	r3, r2
 801f174:	009b      	lsls	r3, r3, #2
 801f176:	440b      	add	r3, r1
 801f178:	3340      	adds	r3, #64	; 0x40
 801f17a:	781b      	ldrb	r3, [r3, #0]
 801f17c:	2b01      	cmp	r3, #1
 801f17e:	d129      	bne.n	801f1d4 <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801f180:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f184:	4959      	ldr	r1, [pc, #356]	; (801f2ec <send_http_response_body+0x2a8>)
 801f186:	4613      	mov	r3, r2
 801f188:	011b      	lsls	r3, r3, #4
 801f18a:	4413      	add	r3, r2
 801f18c:	009b      	lsls	r3, r3, #2
 801f18e:	440b      	add	r3, r1
 801f190:	3338      	adds	r3, #56	; 0x38
 801f192:	681b      	ldr	r3, [r3, #0]
 801f194:	2b00      	cmp	r3, #0
 801f196:	d00a      	beq.n	801f1ae <send_http_response_body+0x16a>
 801f198:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f19c:	4953      	ldr	r1, [pc, #332]	; (801f2ec <send_http_response_body+0x2a8>)
 801f19e:	4613      	mov	r3, r2
 801f1a0:	011b      	lsls	r3, r3, #4
 801f1a2:	4413      	add	r3, r2
 801f1a4:	009b      	lsls	r3, r3, #2
 801f1a6:	440b      	add	r3, r1
 801f1a8:	3334      	adds	r3, #52	; 0x34
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f1ae:	683b      	ldr	r3, [r7, #0]
 801f1b0:	b298      	uxth	r0, r3
 801f1b2:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f1b6:	494d      	ldr	r1, [pc, #308]	; (801f2ec <send_http_response_body+0x2a8>)
 801f1b8:	4613      	mov	r3, r2
 801f1ba:	011b      	lsls	r3, r3, #4
 801f1bc:	4413      	add	r3, r2
 801f1be:	009b      	lsls	r3, r3, #2
 801f1c0:	440b      	add	r3, r1
 801f1c2:	333c      	adds	r3, #60	; 0x3c
 801f1c4:	681a      	ldr	r2, [r3, #0]
 801f1c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f1ca:	b29b      	uxth	r3, r3
 801f1cc:	6879      	ldr	r1, [r7, #4]
 801f1ce:	f000 fbc9 	bl	801f964 <read_userReg_webContent>
 801f1d2:	e035      	b.n	801f240 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801f1d4:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f1d8:	4944      	ldr	r1, [pc, #272]	; (801f2ec <send_http_response_body+0x2a8>)
 801f1da:	4613      	mov	r3, r2
 801f1dc:	011b      	lsls	r3, r3, #4
 801f1de:	4413      	add	r3, r2
 801f1e0:	009b      	lsls	r3, r3, #2
 801f1e2:	440b      	add	r3, r1
 801f1e4:	3340      	adds	r3, #64	; 0x40
 801f1e6:	781b      	ldrb	r3, [r3, #0]
 801f1e8:	2b04      	cmp	r3, #4
 801f1ea:	d126      	bne.n	801f23a <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801f1ec:	f107 0310 	add.w	r3, r7, #16
 801f1f0:	2280      	movs	r2, #128	; 0x80
 801f1f2:	2100      	movs	r1, #0
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	f00e fb99 	bl	802d92c <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801f1fa:	f107 0310 	add.w	r3, r7, #16
 801f1fe:	4a3c      	ldr	r2, [pc, #240]	; (801f2f0 <send_http_response_body+0x2ac>)
 801f200:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f204:	6018      	str	r0, [r3, #0]
 801f206:	3304      	adds	r3, #4
 801f208:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801f20a:	f107 0310 	add.w	r3, r7, #16
 801f20e:	68b9      	ldr	r1, [r7, #8]
 801f210:	4618      	mov	r0, r3
 801f212:	f00e fb93 	bl	802d93c <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f216:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f21a:	4934      	ldr	r1, [pc, #208]	; (801f2ec <send_http_response_body+0x2a8>)
 801f21c:	4613      	mov	r3, r2
 801f21e:	011b      	lsls	r3, r3, #4
 801f220:	4413      	add	r3, r2
 801f222:	009b      	lsls	r3, r3, #2
 801f224:	440b      	add	r3, r1
 801f226:	333c      	adds	r3, #60	; 0x3c
 801f228:	681a      	ldr	r2, [r3, #0]
 801f22a:	f107 0010 	add.w	r0, r7, #16
 801f22e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f232:	6879      	ldr	r1, [r7, #4]
 801f234:	f00b fdf2 	bl	802ae1c <spi_fs_read_file_offset>
 801f238:	e002      	b.n	801f240 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801f23a:	2300      	movs	r3, #0
 801f23c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801f240:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f244:	2b00      	cmp	r3, #0
 801f246:	d008      	beq.n	801f25a <send_http_response_body+0x216>
 801f248:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f24c:	b29a      	uxth	r2, r3
 801f24e:	7bfb      	ldrb	r3, [r7, #15]
 801f250:	6879      	ldr	r1, [r7, #4]
 801f252:	4618      	mov	r0, r3
 801f254:	f7fa f8ea 	bl	801942c <send>
 801f258:	e002      	b.n	801f260 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801f25a:	2301      	movs	r3, #1
 801f25c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 801f260:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801f264:	2b00      	cmp	r3, #0
 801f266:	d024      	beq.n	801f2b2 <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f268:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f26c:	491f      	ldr	r1, [pc, #124]	; (801f2ec <send_http_response_body+0x2a8>)
 801f26e:	4613      	mov	r3, r2
 801f270:	011b      	lsls	r3, r3, #4
 801f272:	4413      	add	r3, r2
 801f274:	009b      	lsls	r3, r3, #2
 801f276:	440b      	add	r3, r1
 801f278:	3334      	adds	r3, #52	; 0x34
 801f27a:	2200      	movs	r2, #0
 801f27c:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f27e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f282:	491a      	ldr	r1, [pc, #104]	; (801f2ec <send_http_response_body+0x2a8>)
 801f284:	4613      	mov	r3, r2
 801f286:	011b      	lsls	r3, r3, #4
 801f288:	4413      	add	r3, r2
 801f28a:	009b      	lsls	r3, r3, #2
 801f28c:	440b      	add	r3, r1
 801f28e:	3338      	adds	r3, #56	; 0x38
 801f290:	2200      	movs	r2, #0
 801f292:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f294:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f298:	4914      	ldr	r1, [pc, #80]	; (801f2ec <send_http_response_body+0x2a8>)
 801f29a:	4613      	mov	r3, r2
 801f29c:	011b      	lsls	r3, r3, #4
 801f29e:	4413      	add	r3, r2
 801f2a0:	009b      	lsls	r3, r3, #2
 801f2a2:	440b      	add	r3, r1
 801f2a4:	333c      	adds	r3, #60	; 0x3c
 801f2a6:	2200      	movs	r2, #0
 801f2a8:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f2aa:	2300      	movs	r3, #0
 801f2ac:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 801f2b0:	e018      	b.n	801f2e4 <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f2b2:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2b6:	490d      	ldr	r1, [pc, #52]	; (801f2ec <send_http_response_body+0x2a8>)
 801f2b8:	4613      	mov	r3, r2
 801f2ba:	011b      	lsls	r3, r3, #4
 801f2bc:	4413      	add	r3, r2
 801f2be:	009b      	lsls	r3, r3, #2
 801f2c0:	440b      	add	r3, r1
 801f2c2:	333c      	adds	r3, #60	; 0x3c
 801f2c4:	6819      	ldr	r1, [r3, #0]
 801f2c6:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f2ce:	4419      	add	r1, r3
 801f2d0:	4806      	ldr	r0, [pc, #24]	; (801f2ec <send_http_response_body+0x2a8>)
 801f2d2:	4613      	mov	r3, r2
 801f2d4:	011b      	lsls	r3, r3, #4
 801f2d6:	4413      	add	r3, r2
 801f2d8:	009b      	lsls	r3, r3, #2
 801f2da:	4403      	add	r3, r0
 801f2dc:	333c      	adds	r3, #60	; 0x3c
 801f2de:	6019      	str	r1, [r3, #0]
 801f2e0:	e000      	b.n	801f2e4 <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f2e2:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801f2e4:	3798      	adds	r7, #152	; 0x98
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}
 801f2ea:	bf00      	nop
 801f2ec:	200012e4 	.word	0x200012e4
 801f2f0:	08033498 	.word	0x08033498

0801f2f4 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801f2f4:	b580      	push	{r7, lr}
 801f2f6:	b088      	sub	sp, #32
 801f2f8:	af02      	add	r7, sp, #8
 801f2fa:	60b9      	str	r1, [r7, #8]
 801f2fc:	607a      	str	r2, [r7, #4]
 801f2fe:	461a      	mov	r2, r3
 801f300:	4603      	mov	r3, r0
 801f302:	73fb      	strb	r3, [r7, #15]
 801f304:	4613      	mov	r3, r2
 801f306:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801f308:	2300      	movs	r3, #0
 801f30a:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801f30c:	89ba      	ldrh	r2, [r7, #12]
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	9300      	str	r3, [sp, #0]
 801f312:	4613      	mov	r3, r2
 801f314:	4a08      	ldr	r2, [pc, #32]	; (801f338 <send_http_response_cgi+0x44>)
 801f316:	4909      	ldr	r1, [pc, #36]	; (801f33c <send_http_response_cgi+0x48>)
 801f318:	68b8      	ldr	r0, [r7, #8]
 801f31a:	f00e f9b7 	bl	802d68c <siprintf>
 801f31e:	4603      	mov	r3, r0
 801f320:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f322:	8afa      	ldrh	r2, [r7, #22]
 801f324:	7bfb      	ldrb	r3, [r7, #15]
 801f326:	68b9      	ldr	r1, [r7, #8]
 801f328:	4618      	mov	r0, r3
 801f32a:	f7fa f87f 	bl	801942c <send>
}
 801f32e:	bf00      	nop
 801f330:	3718      	adds	r7, #24
 801f332:	46bd      	mov	sp, r7
 801f334:	bd80      	pop	{r7, pc}
 801f336:	bf00      	nop
 801f338:	080334a0 	.word	0x080334a0
 801f33c:	080334fc 	.word	0x080334fc

0801f340 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801f340:	b580      	push	{r7, lr}
 801f342:	b082      	sub	sp, #8
 801f344:	af00      	add	r7, sp, #0
 801f346:	4603      	mov	r3, r0
 801f348:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801f34a:	79fb      	ldrb	r3, [r7, #7]
 801f34c:	009b      	lsls	r3, r3, #2
 801f34e:	3301      	adds	r3, #1
 801f350:	00db      	lsls	r3, r3, #3
 801f352:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f356:	2108      	movs	r1, #8
 801f358:	4618      	mov	r0, r3
 801f35a:	f7f9 fa95 	bl	8018888 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801f35e:	bf00      	nop
 801f360:	79fb      	ldrb	r3, [r7, #7]
 801f362:	009b      	lsls	r3, r3, #2
 801f364:	3301      	adds	r3, #1
 801f366:	00db      	lsls	r3, r3, #3
 801f368:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f36c:	4618      	mov	r0, r3
 801f36e:	f7f9 fa3f 	bl	80187f0 <WIZCHIP_READ>
 801f372:	4603      	mov	r3, r0
 801f374:	2b00      	cmp	r3, #0
 801f376:	d1f3      	bne.n	801f360 <http_disconnect+0x20>

	return SOCK_OK;
 801f378:	2301      	movs	r3, #1
}
 801f37a:	4618      	mov	r0, r3
 801f37c:	3708      	adds	r7, #8
 801f37e:	46bd      	mov	sp, r7
 801f380:	bd80      	pop	{r7, pc}
	...

0801f384 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801f384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f388:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801f38c:	af02      	add	r7, sp, #8
 801f38e:	4602      	mov	r2, r0
 801f390:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f394:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f398:	6019      	str	r1, [r3, #0]
 801f39a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f39e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f3a2:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 801f3aa:	2300      	movs	r3, #0
 801f3ac:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 801f3b0:	2300      	movs	r3, #0
 801f3b2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801f3b6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f3ba:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f3be:	2200      	movs	r2, #0
 801f3c0:	601a      	str	r2, [r3, #0]
 801f3c2:	3304      	adds	r3, #4
 801f3c4:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801f3c8:	2100      	movs	r1, #0
 801f3ca:	4618      	mov	r0, r3
 801f3cc:	f00e faae 	bl	802d92c <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801f3d0:	f04f 0200 	mov.w	r2, #0
 801f3d4:	f04f 0300 	mov.w	r3, #0
 801f3d8:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f3dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f3e0:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f3e4:	781b      	ldrb	r3, [r3, #0]
 801f3e6:	4618      	mov	r0, r3
 801f3e8:	f7ff fc06 	bl	801ebf8 <getHTTPSequenceNum>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 801f3f2:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 801f3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3fa:	f000 81e5 	beq.w	801f7c8 <http_process_handler+0x444>

	http_status = 0;
 801f3fe:	2300      	movs	r3, #0
 801f400:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 801f404:	4ba6      	ldr	r3, [pc, #664]	; (801f6a0 <http_process_handler+0x31c>)
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	4aa6      	ldr	r2, [pc, #664]	; (801f6a4 <http_process_handler+0x320>)
 801f40a:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801f40c:	2300      	movs	r3, #0
 801f40e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801f412:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f416:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	781b      	ldrb	r3, [r3, #0]
 801f41e:	2b03      	cmp	r3, #3
 801f420:	f000 8154 	beq.w	801f6cc <http_process_handler+0x348>
 801f424:	2b03      	cmp	r3, #3
 801f426:	f300 81be 	bgt.w	801f7a6 <http_process_handler+0x422>
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d007      	beq.n	801f43e <http_process_handler+0xba>
 801f42e:	2b00      	cmp	r3, #0
 801f430:	f2c0 81b9 	blt.w	801f7a6 <http_process_handler+0x422>
 801f434:	3b01      	subs	r3, #1
 801f436:	2b01      	cmp	r3, #1
 801f438:	f200 81b5 	bhi.w	801f7a6 <http_process_handler+0x422>
 801f43c:	e010      	b.n	801f460 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801f43e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f442:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f446:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f44a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f44e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f452:	7818      	ldrb	r0, [r3, #0]
 801f454:	4613      	mov	r3, r2
 801f456:	2200      	movs	r2, #0
 801f458:	2100      	movs	r1, #0
 801f45a:	f7ff fd87 	bl	801ef6c <send_http_response_header>
			break;
 801f45e:	e1b6      	b.n	801f7ce <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801f460:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f464:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f468:	681b      	ldr	r3, [r3, #0]
 801f46a:	3302      	adds	r3, #2
 801f46c:	f107 0208 	add.w	r2, r7, #8
 801f470:	4611      	mov	r1, r2
 801f472:	4618      	mov	r0, r3
 801f474:	f7ff fad6 	bl	801ea24 <get_http_uri_name>
			uri_name = uri_buf;
 801f478:	f107 0308 	add.w	r3, r7, #8
 801f47c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801f480:	4989      	ldr	r1, [pc, #548]	; (801f6a8 <http_process_handler+0x324>)
 801f482:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f486:	f7f0 feab 	bl	80101e0 <strcmp>
 801f48a:	4603      	mov	r3, r0
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d10b      	bne.n	801f4a8 <http_process_handler+0x124>
 801f490:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f494:	4985      	ldr	r1, [pc, #532]	; (801f6ac <http_process_handler+0x328>)
 801f496:	461a      	mov	r2, r3
 801f498:	460b      	mov	r3, r1
 801f49a:	cb03      	ldmia	r3!, {r0, r1}
 801f49c:	6010      	str	r0, [r2, #0]
 801f49e:	6051      	str	r1, [r2, #4]
 801f4a0:	8819      	ldrh	r1, [r3, #0]
 801f4a2:	789b      	ldrb	r3, [r3, #2]
 801f4a4:	8111      	strh	r1, [r2, #8]
 801f4a6:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801f4a8:	4981      	ldr	r1, [pc, #516]	; (801f6b0 <http_process_handler+0x32c>)
 801f4aa:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f4ae:	f7f0 fe97 	bl	80101e0 <strcmp>
 801f4b2:	4603      	mov	r3, r0
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d10a      	bne.n	801f4ce <http_process_handler+0x14a>
 801f4b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f4bc:	4a7d      	ldr	r2, [pc, #500]	; (801f6b4 <http_process_handler+0x330>)
 801f4be:	461c      	mov	r4, r3
 801f4c0:	4613      	mov	r3, r2
 801f4c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801f4c4:	6020      	str	r0, [r4, #0]
 801f4c6:	6061      	str	r1, [r4, #4]
 801f4c8:	60a2      	str	r2, [r4, #8]
 801f4ca:	781b      	ldrb	r3, [r3, #0]
 801f4cc:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801f4ce:	497a      	ldr	r1, [pc, #488]	; (801f6b8 <http_process_handler+0x334>)
 801f4d0:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f4d4:	f7f0 fe84 	bl	80101e0 <strcmp>
 801f4d8:	4603      	mov	r3, r0
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d10b      	bne.n	801f4f6 <http_process_handler+0x172>
 801f4de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f4e2:	4a76      	ldr	r2, [pc, #472]	; (801f6bc <http_process_handler+0x338>)
 801f4e4:	461d      	mov	r5, r3
 801f4e6:	4614      	mov	r4, r2
 801f4e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f4ea:	6028      	str	r0, [r5, #0]
 801f4ec:	6069      	str	r1, [r5, #4]
 801f4ee:	60aa      	str	r2, [r5, #8]
 801f4f0:	60eb      	str	r3, [r5, #12]
 801f4f2:	8823      	ldrh	r3, [r4, #0]
 801f4f4:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801f4f6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f4fa:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	3301      	adds	r3, #1
 801f502:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f506:	4618      	mov	r0, r3
 801f508:	f7fe fffe 	bl	801e508 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801f50c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f510:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f514:	681b      	ldr	r3, [r3, #0]
 801f516:	785b      	ldrb	r3, [r3, #1]
 801f518:	2b08      	cmp	r3, #8
 801f51a:	d131      	bne.n	801f580 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801f51c:	4b68      	ldr	r3, [pc, #416]	; (801f6c0 <http_process_handler+0x33c>)
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f524:	4619      	mov	r1, r3
 801f526:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f52a:	f000 fa59 	bl	801f9e0 <http_get_cgi_handler>
 801f52e:	4603      	mov	r3, r0
 801f530:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801f534:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d015      	beq.n	801f568 <http_process_handler+0x1e4>
 801f53c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f540:	f240 729e 	movw	r2, #1950	; 0x79e
 801f544:	4293      	cmp	r3, r2
 801f546:	d80f      	bhi.n	801f568 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801f548:	4b56      	ldr	r3, [pc, #344]	; (801f6a4 <http_process_handler+0x320>)
 801f54a:	6819      	ldr	r1, [r3, #0]
 801f54c:	4b5c      	ldr	r3, [pc, #368]	; (801f6c0 <http_process_handler+0x33c>)
 801f54e:	681a      	ldr	r2, [r3, #0]
 801f550:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f554:	b29c      	uxth	r4, r3
 801f556:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f55a:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f55e:	7818      	ldrb	r0, [r3, #0]
 801f560:	4623      	mov	r3, r4
 801f562:	f7ff fec7 	bl	801f2f4 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801f566:	e131      	b.n	801f7cc <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f568:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f56c:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f570:	7818      	ldrb	r0, [r3, #0]
 801f572:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f576:	2200      	movs	r2, #0
 801f578:	2108      	movs	r1, #8
 801f57a:	f7ff fcf7 	bl	801ef6c <send_http_response_header>
			break;
 801f57e:	e125      	b.n	801f7cc <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f580:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f584:	484f      	ldr	r0, [pc, #316]	; (801f6c4 <http_process_handler+0x340>)
 801f586:	f00b fd23 	bl	802afd0 <spi_fs_serch_file_in_dir>
 801f58a:	4603      	mov	r3, r0
 801f58c:	17da      	asrs	r2, r3, #31
 801f58e:	4698      	mov	r8, r3
 801f590:	4691      	mov	r9, r2
 801f592:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 801f596:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 801f59a:	2a01      	cmp	r2, #1
 801f59c:	f173 0300 	sbcs.w	r3, r3, #0
 801f5a0:	db12      	blt.n	801f5c8 <http_process_handler+0x244>
					file_len = err;
 801f5a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801f5a6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 801f5aa:	2301      	movs	r3, #1
 801f5ac:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f5b0:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f5b4:	4944      	ldr	r1, [pc, #272]	; (801f6c8 <http_process_handler+0x344>)
 801f5b6:	4613      	mov	r3, r2
 801f5b8:	011b      	lsls	r3, r3, #4
 801f5ba:	4413      	add	r3, r2
 801f5bc:	009b      	lsls	r3, r3, #2
 801f5be:	440b      	add	r3, r1
 801f5c0:	3340      	adds	r3, #64	; 0x40
 801f5c2:	2204      	movs	r2, #4
 801f5c4:	701a      	strb	r2, [r3, #0]
 801f5c6:	e024      	b.n	801f612 <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f5c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f5cc:	f207 210e 	addw	r1, r7, #526	; 0x20e
 801f5d0:	f107 0308 	add.w	r3, r7, #8
 801f5d4:	4618      	mov	r0, r3
 801f5d6:	f000 f989 	bl	801f8ec <find_userReg_webContent>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d012      	beq.n	801f606 <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f5e0:	2301      	movs	r3, #1
 801f5e2:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 801f5e6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 801f5ea:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f5ee:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f5f2:	4935      	ldr	r1, [pc, #212]	; (801f6c8 <http_process_handler+0x344>)
 801f5f4:	4613      	mov	r3, r2
 801f5f6:	011b      	lsls	r3, r3, #4
 801f5f8:	4413      	add	r3, r2
 801f5fa:	009b      	lsls	r3, r3, #2
 801f5fc:	440b      	add	r3, r1
 801f5fe:	3340      	adds	r3, #64	; 0x40
 801f600:	2201      	movs	r2, #1
 801f602:	701a      	strb	r2, [r3, #0]
 801f604:	e005      	b.n	801f612 <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f606:	2300      	movs	r3, #0
 801f608:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 801f60c:	2300      	movs	r3, #0
 801f60e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 801f612:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f616:	2b00      	cmp	r3, #0
 801f618:	d111      	bne.n	801f63e <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f61a:	4924      	ldr	r1, [pc, #144]	; (801f6ac <http_process_handler+0x328>)
 801f61c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f620:	f7f0 fdde 	bl	80101e0 <strcmp>
 801f624:	4603      	mov	r3, r0
 801f626:	2b00      	cmp	r3, #0
 801f628:	d104      	bne.n	801f634 <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f62a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f62e:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f632:	e007      	b.n	801f644 <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f634:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801f638:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f63c:	e002      	b.n	801f644 <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f63e:	23c8      	movs	r3, #200	; 0xc8
 801f640:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 801f644:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d011      	beq.n	801f670 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f64c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f650:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f654:	681b      	ldr	r3, [r3, #0]
 801f656:	7859      	ldrb	r1, [r3, #1]
 801f658:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801f65c:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 801f660:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f664:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f668:	7818      	ldrb	r0, [r3, #0]
 801f66a:	4623      	mov	r3, r4
 801f66c:	f7ff fc7e 	bl	801ef6c <send_http_response_header>
				if(http_status == STATUS_OK)
 801f670:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f674:	2bc8      	cmp	r3, #200	; 0xc8
 801f676:	f040 80a9 	bne.w	801f7cc <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f67a:	4b0a      	ldr	r3, [pc, #40]	; (801f6a4 <http_process_handler+0x320>)
 801f67c:	6819      	ldr	r1, [r3, #0]
 801f67e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f682:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801f686:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 801f68a:	7810      	ldrb	r0, [r2, #0]
 801f68c:	9300      	str	r3, [sp, #0]
 801f68e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f692:	460a      	mov	r2, r1
 801f694:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f698:	f7ff fcd4 	bl	801f044 <send_http_response_body>
			break;
 801f69c:	e096      	b.n	801f7cc <http_process_handler+0x448>
 801f69e:	bf00      	nop
 801f6a0:	200012dc 	.word	0x200012dc
 801f6a4:	20001208 	.word	0x20001208
 801f6a8:	08033508 	.word	0x08033508
 801f6ac:	0803350c 	.word	0x0803350c
 801f6b0:	08033518 	.word	0x08033518
 801f6b4:	0803351c 	.word	0x0803351c
 801f6b8:	0803352c 	.word	0x0803352c
 801f6bc:	08033534 	.word	0x08033534
 801f6c0:	200012d8 	.word	0x200012d8
 801f6c4:	08033498 	.word	0x08033498
 801f6c8:	200012e4 	.word	0x200012e4

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f6cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f6d0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	1c98      	adds	r0, r3, #2
 801f6d8:	f107 0308 	add.w	r3, r7, #8
 801f6dc:	4a3e      	ldr	r2, [pc, #248]	; (801f7d8 <http_process_handler+0x454>)
 801f6de:	493f      	ldr	r1, [pc, #252]	; (801f7dc <http_process_handler+0x458>)
 801f6e0:	f7ff f9ef 	bl	801eac2 <mid>
			uri_name = uri_buf;
 801f6e4:	f107 0308 	add.w	r3, r7, #8
 801f6e8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f6ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f6f0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	3301      	adds	r3, #1
 801f6f8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f6fc:	4618      	mov	r0, r3
 801f6fe:	f7fe ff03 	bl	801e508 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f702:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f706:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	785b      	ldrb	r3, [r3, #1]
 801f70e:	2b08      	cmp	r3, #8
 801f710:	d13c      	bne.n	801f78c <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f712:	4b33      	ldr	r3, [pc, #204]	; (801f7e0 <http_process_handler+0x45c>)
 801f714:	681a      	ldr	r2, [r3, #0]
 801f716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801f71a:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801f71e:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 801f722:	6809      	ldr	r1, [r1, #0]
 801f724:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f728:	f000 f988 	bl	801fa3c <http_post_cgi_handler>
 801f72c:	4603      	mov	r3, r0
 801f72e:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f732:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f736:	2b00      	cmp	r3, #0
 801f738:	d01c      	beq.n	801f774 <http_process_handler+0x3f0>
 801f73a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f73e:	f240 72be 	movw	r2, #1982	; 0x7be
 801f742:	4293      	cmp	r3, r2
 801f744:	d816      	bhi.n	801f774 <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f746:	4b27      	ldr	r3, [pc, #156]	; (801f7e4 <http_process_handler+0x460>)
 801f748:	6819      	ldr	r1, [r3, #0]
 801f74a:	4b25      	ldr	r3, [pc, #148]	; (801f7e0 <http_process_handler+0x45c>)
 801f74c:	681a      	ldr	r2, [r3, #0]
 801f74e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f752:	b29c      	uxth	r4, r3
 801f754:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f758:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f75c:	7818      	ldrb	r0, [r3, #0]
 801f75e:	4623      	mov	r3, r4
 801f760:	f7ff fdc8 	bl	801f2f4 <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f764:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f768:	2b02      	cmp	r3, #2
 801f76a:	d11b      	bne.n	801f7a4 <http_process_handler+0x420>
 801f76c:	4b1e      	ldr	r3, [pc, #120]	; (801f7e8 <http_process_handler+0x464>)
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	4798      	blx	r3
 801f772:	e017      	b.n	801f7a4 <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f774:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f778:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f77c:	7818      	ldrb	r0, [r3, #0]
 801f77e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f782:	2200      	movs	r2, #0
 801f784:	2108      	movs	r1, #8
 801f786:	f7ff fbf1 	bl	801ef6c <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f78a:	e020      	b.n	801f7ce <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f78c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f790:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f794:	7818      	ldrb	r0, [r3, #0]
 801f796:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f79a:	2200      	movs	r2, #0
 801f79c:	2100      	movs	r1, #0
 801f79e:	f7ff fbe5 	bl	801ef6c <send_http_response_header>
			break;
 801f7a2:	e014      	b.n	801f7ce <http_process_handler+0x44a>
 801f7a4:	e013      	b.n	801f7ce <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f7a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f7aa:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f7ae:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f7b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f7b6:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f7ba:	7818      	ldrb	r0, [r3, #0]
 801f7bc:	4613      	mov	r3, r2
 801f7be:	2200      	movs	r2, #0
 801f7c0:	2100      	movs	r1, #0
 801f7c2:	f7ff fbd3 	bl	801ef6c <send_http_response_header>
			break;
 801f7c6:	e002      	b.n	801f7ce <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f7c8:	bf00      	nop
 801f7ca:	e000      	b.n	801f7ce <http_process_handler+0x44a>
			break;
 801f7cc:	bf00      	nop
	}
}
 801f7ce:	f507 770a 	add.w	r7, r7, #552	; 0x228
 801f7d2:	46bd      	mov	sp, r7
 801f7d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f7d8:	08033548 	.word	0x08033548
 801f7dc:	08033508 	.word	0x08033508
 801f7e0:	20001208 	.word	0x20001208
 801f7e4:	200012d8 	.word	0x200012d8
 801f7e8:	20000120 	.word	0x20000120

0801f7ec <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f7ec:	b480      	push	{r7}
 801f7ee:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f7f0:	4b04      	ldr	r3, [pc, #16]	; (801f804 <httpServer_time_handler+0x18>)
 801f7f2:	681b      	ldr	r3, [r3, #0]
 801f7f4:	3301      	adds	r3, #1
 801f7f6:	4a03      	ldr	r2, [pc, #12]	; (801f804 <httpServer_time_handler+0x18>)
 801f7f8:	6013      	str	r3, [r2, #0]
}
 801f7fa:	bf00      	nop
 801f7fc:	46bd      	mov	sp, r7
 801f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f802:	4770      	bx	lr
 801f804:	200012e0 	.word	0x200012e0

0801f808 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801f808:	b580      	push	{r7, lr}
 801f80a:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801f80c:	4b03      	ldr	r3, [pc, #12]	; (801f81c <get_httpServer_timecount+0x14>)
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	2001      	movs	r0, #1
 801f812:	4798      	blx	r3
	return httpServer_tick_1s;
 801f814:	4b02      	ldr	r3, [pc, #8]	; (801f820 <get_httpServer_timecount+0x18>)
 801f816:	681b      	ldr	r3, [r3, #0]
}
 801f818:	4618      	mov	r0, r3
 801f81a:	bd80      	pop	{r7, pc}
 801f81c:	20000124 	.word	0x20000124
 801f820:	200012e0 	.word	0x200012e0

0801f824 <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801f824:	b580      	push	{r7, lr}
 801f826:	b084      	sub	sp, #16
 801f828:	af00      	add	r7, sp, #0
 801f82a:	6078      	str	r0, [r7, #4]
 801f82c:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	2b00      	cmp	r3, #0
 801f832:	d04e      	beq.n	801f8d2 <reg_httpServer_webContent+0xae>
 801f834:	683b      	ldr	r3, [r7, #0]
 801f836:	2b00      	cmp	r3, #0
 801f838:	d04b      	beq.n	801f8d2 <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801f83a:	4b29      	ldr	r3, [pc, #164]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f83c:	881b      	ldrh	r3, [r3, #0]
 801f83e:	2b03      	cmp	r3, #3
 801f840:	d849      	bhi.n	801f8d6 <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801f842:	6878      	ldr	r0, [r7, #4]
 801f844:	f7f0 fd2c 	bl	80102a0 <strlen>
 801f848:	4603      	mov	r3, r0
 801f84a:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801f84c:	6838      	ldr	r0, [r7, #0]
 801f84e:	f7f0 fd27 	bl	80102a0 <strlen>
 801f852:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801f854:	4b22      	ldr	r3, [pc, #136]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f856:	881b      	ldrh	r3, [r3, #0]
 801f858:	461a      	mov	r2, r3
 801f85a:	4b21      	ldr	r3, [pc, #132]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f85c:	881b      	ldrh	r3, [r3, #0]
 801f85e:	4618      	mov	r0, r3
 801f860:	2332      	movs	r3, #50	; 0x32
 801f862:	fb02 f303 	mul.w	r3, r2, r3
 801f866:	4a1f      	ldr	r2, [pc, #124]	; (801f8e4 <reg_httpServer_webContent+0xc0>)
 801f868:	441a      	add	r2, r3
 801f86a:	491f      	ldr	r1, [pc, #124]	; (801f8e8 <reg_httpServer_webContent+0xc4>)
 801f86c:	4603      	mov	r3, r0
 801f86e:	005b      	lsls	r3, r3, #1
 801f870:	4403      	add	r3, r0
 801f872:	009b      	lsls	r3, r3, #2
 801f874:	440b      	add	r3, r1
 801f876:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801f878:	4b19      	ldr	r3, [pc, #100]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f87a:	881b      	ldrh	r3, [r3, #0]
 801f87c:	4619      	mov	r1, r3
 801f87e:	4a1a      	ldr	r2, [pc, #104]	; (801f8e8 <reg_httpServer_webContent+0xc4>)
 801f880:	460b      	mov	r3, r1
 801f882:	005b      	lsls	r3, r3, #1
 801f884:	440b      	add	r3, r1
 801f886:	009b      	lsls	r3, r3, #2
 801f888:	4413      	add	r3, r2
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	6879      	ldr	r1, [r7, #4]
 801f88e:	4618      	mov	r0, r3
 801f890:	f00e fa19 	bl	802dcc6 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801f894:	4b12      	ldr	r3, [pc, #72]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f896:	881b      	ldrh	r3, [r3, #0]
 801f898:	4619      	mov	r1, r3
 801f89a:	4a13      	ldr	r2, [pc, #76]	; (801f8e8 <reg_httpServer_webContent+0xc4>)
 801f89c:	460b      	mov	r3, r1
 801f89e:	005b      	lsls	r3, r3, #1
 801f8a0:	440b      	add	r3, r1
 801f8a2:	009b      	lsls	r3, r3, #2
 801f8a4:	4413      	add	r3, r2
 801f8a6:	3304      	adds	r3, #4
 801f8a8:	68ba      	ldr	r2, [r7, #8]
 801f8aa:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801f8ac:	4b0c      	ldr	r3, [pc, #48]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f8ae:	881b      	ldrh	r3, [r3, #0]
 801f8b0:	4619      	mov	r1, r3
 801f8b2:	4a0d      	ldr	r2, [pc, #52]	; (801f8e8 <reg_httpServer_webContent+0xc4>)
 801f8b4:	460b      	mov	r3, r1
 801f8b6:	005b      	lsls	r3, r3, #1
 801f8b8:	440b      	add	r3, r1
 801f8ba:	009b      	lsls	r3, r3, #2
 801f8bc:	4413      	add	r3, r2
 801f8be:	3308      	adds	r3, #8
 801f8c0:	683a      	ldr	r2, [r7, #0]
 801f8c2:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801f8c4:	4b06      	ldr	r3, [pc, #24]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f8c6:	881b      	ldrh	r3, [r3, #0]
 801f8c8:	3301      	adds	r3, #1
 801f8ca:	b29a      	uxth	r2, r3
 801f8cc:	4b04      	ldr	r3, [pc, #16]	; (801f8e0 <reg_httpServer_webContent+0xbc>)
 801f8ce:	801a      	strh	r2, [r3, #0]
 801f8d0:	e002      	b.n	801f8d8 <reg_httpServer_webContent+0xb4>
		return;
 801f8d2:	bf00      	nop
 801f8d4:	e000      	b.n	801f8d8 <reg_httpServer_webContent+0xb4>
		return;
 801f8d6:	bf00      	nop
}
 801f8d8:	3710      	adds	r7, #16
 801f8da:	46bd      	mov	sp, r7
 801f8dc:	bd80      	pop	{r7, pc}
 801f8de:	bf00      	nop
 801f8e0:	200012d4 	.word	0x200012d4
 801f8e4:	2000120c 	.word	0x2000120c
 801f8e8:	20001504 	.word	0x20001504

0801f8ec <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801f8ec:	b580      	push	{r7, lr}
 801f8ee:	b086      	sub	sp, #24
 801f8f0:	af00      	add	r7, sp, #0
 801f8f2:	60f8      	str	r0, [r7, #12]
 801f8f4:	60b9      	str	r1, [r7, #8]
 801f8f6:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801f8fc:	2300      	movs	r3, #0
 801f8fe:	82fb      	strh	r3, [r7, #22]
 801f900:	e022      	b.n	801f948 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801f902:	8afa      	ldrh	r2, [r7, #22]
 801f904:	4915      	ldr	r1, [pc, #84]	; (801f95c <find_userReg_webContent+0x70>)
 801f906:	4613      	mov	r3, r2
 801f908:	005b      	lsls	r3, r3, #1
 801f90a:	4413      	add	r3, r2
 801f90c:	009b      	lsls	r3, r3, #2
 801f90e:	440b      	add	r3, r1
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	4619      	mov	r1, r3
 801f914:	68f8      	ldr	r0, [r7, #12]
 801f916:	f7f0 fc63 	bl	80101e0 <strcmp>
 801f91a:	4603      	mov	r3, r0
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d110      	bne.n	801f942 <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801f920:	8afa      	ldrh	r2, [r7, #22]
 801f922:	490e      	ldr	r1, [pc, #56]	; (801f95c <find_userReg_webContent+0x70>)
 801f924:	4613      	mov	r3, r2
 801f926:	005b      	lsls	r3, r3, #1
 801f928:	4413      	add	r3, r2
 801f92a:	009b      	lsls	r3, r3, #2
 801f92c:	440b      	add	r3, r1
 801f92e:	3304      	adds	r3, #4
 801f930:	681a      	ldr	r2, [r3, #0]
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801f936:	68bb      	ldr	r3, [r7, #8]
 801f938:	8afa      	ldrh	r2, [r7, #22]
 801f93a:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801f93c:	2301      	movs	r3, #1
 801f93e:	757b      	strb	r3, [r7, #21]
			break;
 801f940:	e007      	b.n	801f952 <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801f942:	8afb      	ldrh	r3, [r7, #22]
 801f944:	3301      	adds	r3, #1
 801f946:	82fb      	strh	r3, [r7, #22]
 801f948:	4b05      	ldr	r3, [pc, #20]	; (801f960 <find_userReg_webContent+0x74>)
 801f94a:	881b      	ldrh	r3, [r3, #0]
 801f94c:	8afa      	ldrh	r2, [r7, #22]
 801f94e:	429a      	cmp	r2, r3
 801f950:	d3d7      	bcc.n	801f902 <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801f952:	7d7b      	ldrb	r3, [r7, #21]
}
 801f954:	4618      	mov	r0, r3
 801f956:	3718      	adds	r7, #24
 801f958:	46bd      	mov	sp, r7
 801f95a:	bd80      	pop	{r7, pc}
 801f95c:	20001504 	.word	0x20001504
 801f960:	200012d4 	.word	0x200012d4

0801f964 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801f964:	b580      	push	{r7, lr}
 801f966:	b086      	sub	sp, #24
 801f968:	af00      	add	r7, sp, #0
 801f96a:	60b9      	str	r1, [r7, #8]
 801f96c:	607a      	str	r2, [r7, #4]
 801f96e:	461a      	mov	r2, r3
 801f970:	4603      	mov	r3, r0
 801f972:	81fb      	strh	r3, [r7, #14]
 801f974:	4613      	mov	r3, r2
 801f976:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801f978:	2300      	movs	r3, #0
 801f97a:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801f97c:	4b16      	ldr	r3, [pc, #88]	; (801f9d8 <read_userReg_webContent+0x74>)
 801f97e:	881b      	ldrh	r3, [r3, #0]
 801f980:	89fa      	ldrh	r2, [r7, #14]
 801f982:	429a      	cmp	r2, r3
 801f984:	d901      	bls.n	801f98a <read_userReg_webContent+0x26>
 801f986:	2300      	movs	r3, #0
 801f988:	e021      	b.n	801f9ce <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801f98a:	89fa      	ldrh	r2, [r7, #14]
 801f98c:	4913      	ldr	r1, [pc, #76]	; (801f9dc <read_userReg_webContent+0x78>)
 801f98e:	4613      	mov	r3, r2
 801f990:	005b      	lsls	r3, r3, #1
 801f992:	4413      	add	r3, r2
 801f994:	009b      	lsls	r3, r3, #2
 801f996:	440b      	add	r3, r1
 801f998:	3308      	adds	r3, #8
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d003      	beq.n	801f9ac <read_userReg_webContent+0x48>
 801f9a4:	697a      	ldr	r2, [r7, #20]
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	4413      	add	r3, r2
 801f9aa:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801f9ac:	89bb      	ldrh	r3, [r7, #12]
 801f9ae:	461a      	mov	r2, r3
 801f9b0:	6979      	ldr	r1, [r7, #20]
 801f9b2:	68b8      	ldr	r0, [r7, #8]
 801f9b4:	f00e f814 	bl	802d9e0 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801f9b8:	89bb      	ldrh	r3, [r7, #12]
 801f9ba:	68ba      	ldr	r2, [r7, #8]
 801f9bc:	4413      	add	r3, r2
 801f9be:	2200      	movs	r2, #0
 801f9c0:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801f9c2:	68b8      	ldr	r0, [r7, #8]
 801f9c4:	f7f0 fc6c 	bl	80102a0 <strlen>
 801f9c8:	4603      	mov	r3, r0
 801f9ca:	827b      	strh	r3, [r7, #18]
	return ret;
 801f9cc:	8a7b      	ldrh	r3, [r7, #18]
}
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	3718      	adds	r7, #24
 801f9d2:	46bd      	mov	sp, r7
 801f9d4:	bd80      	pop	{r7, pc}
 801f9d6:	bf00      	nop
 801f9d8:	200012d4 	.word	0x200012d4
 801f9dc:	20001504 	.word	0x20001504

0801f9e0 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801f9e0:	b580      	push	{r7, lr}
 801f9e2:	b086      	sub	sp, #24
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	60f8      	str	r0, [r7, #12]
 801f9e8:	60b9      	str	r1, [r7, #8]
 801f9ea:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801f9ec:	2301      	movs	r3, #1
 801f9ee:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f9f0:	2300      	movs	r3, #0
 801f9f2:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801f9f4:	4b0f      	ldr	r3, [pc, #60]	; (801fa34 <http_get_cgi_handler+0x54>)
 801f9f6:	681b      	ldr	r3, [r3, #0]
 801f9f8:	f107 0214 	add.w	r2, r7, #20
 801f9fc:	68b9      	ldr	r1, [r7, #8]
 801f9fe:	68f8      	ldr	r0, [r7, #12]
 801fa00:	4798      	blx	r3
 801fa02:	4603      	mov	r3, r0
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	d108      	bne.n	801fa1a <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fa08:	490b      	ldr	r1, [pc, #44]	; (801fa38 <http_get_cgi_handler+0x58>)
 801fa0a:	68f8      	ldr	r0, [r7, #12]
 801fa0c:	f7f0 fbe8 	bl	80101e0 <strcmp>
 801fa10:	4603      	mov	r3, r0
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d001      	beq.n	801fa1a <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801fa16:	2300      	movs	r3, #0
 801fa18:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fa1a:	7dfb      	ldrb	r3, [r7, #23]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d003      	beq.n	801fa28 <http_get_cgi_handler+0x48>
 801fa20:	8abb      	ldrh	r3, [r7, #20]
 801fa22:	461a      	mov	r2, r3
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	601a      	str	r2, [r3, #0]
	return ret;
 801fa28:	7dfb      	ldrb	r3, [r7, #23]
}
 801fa2a:	4618      	mov	r0, r3
 801fa2c:	3718      	adds	r7, #24
 801fa2e:	46bd      	mov	sp, r7
 801fa30:	bd80      	pop	{r7, pc}
 801fa32:	bf00      	nop
 801fa34:	20001538 	.word	0x20001538
 801fa38:	08033600 	.word	0x08033600

0801fa3c <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801fa3c:	b590      	push	{r4, r7, lr}
 801fa3e:	b087      	sub	sp, #28
 801fa40:	af00      	add	r7, sp, #0
 801fa42:	60f8      	str	r0, [r7, #12]
 801fa44:	60b9      	str	r1, [r7, #8]
 801fa46:	607a      	str	r2, [r7, #4]
 801fa48:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801fa4a:	2301      	movs	r3, #1
 801fa4c:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801fa4e:	2300      	movs	r3, #0
 801fa50:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801fa52:	2300      	movs	r3, #0
 801fa54:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801fa56:	4b20      	ldr	r3, [pc, #128]	; (801fad8 <http_post_cgi_handler+0x9c>)
 801fa58:	681c      	ldr	r4, [r3, #0]
 801fa5a:	68bb      	ldr	r3, [r7, #8]
 801fa5c:	1c99      	adds	r1, r3, #2
 801fa5e:	f107 0314 	add.w	r3, r7, #20
 801fa62:	687a      	ldr	r2, [r7, #4]
 801fa64:	68f8      	ldr	r0, [r7, #12]
 801fa66:	47a0      	blx	r4
 801fa68:	4603      	mov	r3, r0
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d127      	bne.n	801fabe <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fa6e:	491b      	ldr	r1, [pc, #108]	; (801fadc <http_post_cgi_handler+0xa0>)
 801fa70:	68f8      	ldr	r0, [r7, #12]
 801fa72:	f7f0 fbb5 	bl	80101e0 <strcmp>
 801fa76:	4603      	mov	r3, r0
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	d10b      	bne.n	801fa94 <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801fa7c:	2301      	movs	r3, #1
 801fa7e:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801fa80:	7dbb      	ldrb	r3, [r7, #22]
 801fa82:	461a      	mov	r2, r3
 801fa84:	4916      	ldr	r1, [pc, #88]	; (801fae0 <http_post_cgi_handler+0xa4>)
 801fa86:	6878      	ldr	r0, [r7, #4]
 801fa88:	f00d fe00 	bl	802d68c <siprintf>
 801fa8c:	4603      	mov	r3, r0
 801fa8e:	b29b      	uxth	r3, r3
 801fa90:	82bb      	strh	r3, [r7, #20]
 801fa92:	e014      	b.n	801fabe <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801fa94:	4913      	ldr	r1, [pc, #76]	; (801fae4 <http_post_cgi_handler+0xa8>)
 801fa96:	68f8      	ldr	r0, [r7, #12]
 801fa98:	f7f0 fba2 	bl	80101e0 <strcmp>
 801fa9c:	4603      	mov	r3, r0
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	d10b      	bne.n	801faba <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801faa2:	2301      	movs	r3, #1
 801faa4:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801faa6:	7dbb      	ldrb	r3, [r7, #22]
 801faa8:	461a      	mov	r2, r3
 801faaa:	490d      	ldr	r1, [pc, #52]	; (801fae0 <http_post_cgi_handler+0xa4>)
 801faac:	6878      	ldr	r0, [r7, #4]
 801faae:	f00d fded 	bl	802d68c <siprintf>
 801fab2:	4603      	mov	r3, r0
 801fab4:	b29b      	uxth	r3, r3
 801fab6:	82bb      	strh	r3, [r7, #20]
 801fab8:	e001      	b.n	801fabe <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801faba:	2300      	movs	r3, #0
 801fabc:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fabe:	7dfb      	ldrb	r3, [r7, #23]
 801fac0:	2b00      	cmp	r3, #0
 801fac2:	d003      	beq.n	801facc <http_post_cgi_handler+0x90>
 801fac4:	8abb      	ldrh	r3, [r7, #20]
 801fac6:	461a      	mov	r2, r3
 801fac8:	683b      	ldr	r3, [r7, #0]
 801faca:	601a      	str	r2, [r3, #0]
	return ret;
 801facc:	7dfb      	ldrb	r3, [r7, #23]
}
 801face:	4618      	mov	r0, r3
 801fad0:	371c      	adds	r7, #28
 801fad2:	46bd      	mov	sp, r7
 801fad4:	bd90      	pop	{r4, r7, pc}
 801fad6:	bf00      	nop
 801fad8:	20001534 	.word	0x20001534
 801fadc:	08033600 	.word	0x08033600
 801fae0:	0803360c 	.word	0x0803360c
 801fae4:	08033610 	.word	0x08033610

0801fae8 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801fae8:	b480      	push	{r7}
 801faea:	b085      	sub	sp, #20
 801faec:	af00      	add	r7, sp, #0
 801faee:	60f8      	str	r0, [r7, #12]
 801faf0:	60b9      	str	r1, [r7, #8]
 801faf2:	607a      	str	r2, [r7, #4]

	;
}
 801faf4:	bf00      	nop
 801faf6:	4618      	mov	r0, r3
 801faf8:	3714      	adds	r7, #20
 801fafa:	46bd      	mov	sp, r7
 801fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb00:	4770      	bx	lr

0801fb02 <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801fb02:	b480      	push	{r7}
 801fb04:	b085      	sub	sp, #20
 801fb06:	af00      	add	r7, sp, #0
 801fb08:	60f8      	str	r0, [r7, #12]
 801fb0a:	60b9      	str	r1, [r7, #8]
 801fb0c:	607a      	str	r2, [r7, #4]
 801fb0e:	603b      	str	r3, [r7, #0]
	;
}
 801fb10:	bf00      	nop
 801fb12:	4618      	mov	r0, r3
 801fb14:	3714      	adds	r7, #20
 801fb16:	46bd      	mov	sp, r7
 801fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb1c:	4770      	bx	lr
	...

0801fb20 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801fb20:	b480      	push	{r7}
 801fb22:	b083      	sub	sp, #12
 801fb24:	af00      	add	r7, sp, #0
 801fb26:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801fb28:	4b07      	ldr	r3, [pc, #28]	; (801fb48 <reg_external_post_cgi_processor+0x28>)
 801fb2a:	4a08      	ldr	r2, [pc, #32]	; (801fb4c <reg_external_post_cgi_processor+0x2c>)
 801fb2c:	601a      	str	r2, [r3, #0]
	if (function) {
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	d002      	beq.n	801fb3a <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801fb34:	4a04      	ldr	r2, [pc, #16]	; (801fb48 <reg_external_post_cgi_processor+0x28>)
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	6013      	str	r3, [r2, #0]
	}

}
 801fb3a:	bf00      	nop
 801fb3c:	370c      	adds	r7, #12
 801fb3e:	46bd      	mov	sp, r7
 801fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb44:	4770      	bx	lr
 801fb46:	bf00      	nop
 801fb48:	20001534 	.word	0x20001534
 801fb4c:	0801fb03 	.word	0x0801fb03

0801fb50 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801fb50:	b480      	push	{r7}
 801fb52:	b083      	sub	sp, #12
 801fb54:	af00      	add	r7, sp, #0
 801fb56:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801fb58:	4b07      	ldr	r3, [pc, #28]	; (801fb78 <reg_external_get_cgi_processor+0x28>)
 801fb5a:	4a08      	ldr	r2, [pc, #32]	; (801fb7c <reg_external_get_cgi_processor+0x2c>)
 801fb5c:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d002      	beq.n	801fb6a <reg_external_get_cgi_processor+0x1a>
 801fb64:	4a04      	ldr	r2, [pc, #16]	; (801fb78 <reg_external_get_cgi_processor+0x28>)
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	6013      	str	r3, [r2, #0]

}
 801fb6a:	bf00      	nop
 801fb6c:	370c      	adds	r7, #12
 801fb6e:	46bd      	mov	sp, r7
 801fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb74:	4770      	bx	lr
 801fb76:	bf00      	nop
 801fb78:	20001538 	.word	0x20001538
 801fb7c:	0801fae9 	.word	0x0801fae9

0801fb80 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801fb80:	b480      	push	{r7}
 801fb82:	af00      	add	r7, sp, #0
 801fb84:	bf00      	nop
 801fb86:	46bd      	mov	sp, r7
 801fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb8c:	4770      	bx	lr

0801fb8e <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801fb8e:	b480      	push	{r7}
 801fb90:	b083      	sub	sp, #12
 801fb92:	af00      	add	r7, sp, #0
 801fb94:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	f242 7210 	movw	r2, #10000	; 0x2710
 801fb9c:	fb02 f303 	mul.w	r3, r2, r3
 801fba0:	607b      	str	r3, [r7, #4]

	while (sec){
 801fba2:	e002      	b.n	801fbaa <proto_delay_func+0x1c>
		sec--;
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	3b01      	subs	r3, #1
 801fba8:	607b      	str	r3, [r7, #4]
	while (sec){
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	d1f9      	bne.n	801fba4 <proto_delay_func+0x16>
	}

}
 801fbb0:	bf00      	nop
 801fbb2:	bf00      	nop
 801fbb4:	370c      	adds	r7, #12
 801fbb6:	46bd      	mov	sp, r7
 801fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbbc:	4770      	bx	lr
	...

0801fbc0 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801fbc0:	b480      	push	{r7}
 801fbc2:	b083      	sub	sp, #12
 801fbc4:	af00      	add	r7, sp, #0
 801fbc6:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801fbc8:	4a04      	ldr	r2, [pc, #16]	; (801fbdc <w5500_lib_init+0x1c>)
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	6013      	str	r3, [r2, #0]
}
 801fbce:	bf00      	nop
 801fbd0:	370c      	adds	r7, #12
 801fbd2:	46bd      	mov	sp, r7
 801fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbd8:	4770      	bx	lr
 801fbda:	bf00      	nop
 801fbdc:	20001540 	.word	0x20001540

0801fbe0 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801fbe0:	b580      	push	{r7, lr}
 801fbe2:	b082      	sub	sp, #8
 801fbe4:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801fbe6:	2303      	movs	r3, #3
 801fbe8:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801fbea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801fbee:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801fbf0:	4b07      	ldr	r3, [pc, #28]	; (801fc10 <network_init+0x30>)
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	4619      	mov	r1, r3
 801fbf6:	2000      	movs	r0, #0
 801fbf8:	f7fa fa92 	bl	801a120 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801fbfc:	1d3b      	adds	r3, r7, #4
 801fbfe:	4619      	mov	r1, r3
 801fc00:	2004      	movs	r0, #4
 801fc02:	f7fa fa8d 	bl	801a120 <ctlnetwork>
}
 801fc06:	bf00      	nop
 801fc08:	3708      	adds	r7, #8
 801fc0a:	46bd      	mov	sp, r7
 801fc0c:	bd80      	pop	{r7, pc}
 801fc0e:	bf00      	nop
 801fc10:	20001540 	.word	0x20001540

0801fc14 <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801fc14:	b480      	push	{r7}
 801fc16:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801fc18:	4b03      	ldr	r3, [pc, #12]	; (801fc28 <Callback_IPConflict+0x14>)
 801fc1a:	2200      	movs	r2, #0
 801fc1c:	701a      	strb	r2, [r3, #0]
}
 801fc1e:	bf00      	nop
 801fc20:	46bd      	mov	sp, r7
 801fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc26:	4770      	bx	lr
 801fc28:	2000153c 	.word	0x2000153c

0801fc2c <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801fc2c:	b580      	push	{r7, lr}
 801fc2e:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801fc30:	4b11      	ldr	r3, [pc, #68]	; (801fc78 <Callback_IPAssigned+0x4c>)
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	3306      	adds	r3, #6
 801fc36:	4618      	mov	r0, r3
 801fc38:	f7fc fa08 	bl	801c04c <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801fc3c:	4b0e      	ldr	r3, [pc, #56]	; (801fc78 <Callback_IPAssigned+0x4c>)
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	330e      	adds	r3, #14
 801fc42:	4618      	mov	r0, r3
 801fc44:	f7fc fa22 	bl	801c08c <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801fc48:	4b0b      	ldr	r3, [pc, #44]	; (801fc78 <Callback_IPAssigned+0x4c>)
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	330a      	adds	r3, #10
 801fc4e:	4618      	mov	r0, r3
 801fc50:	f7fc fa3c 	bl	801c0cc <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801fc54:	4b08      	ldr	r3, [pc, #32]	; (801fc78 <Callback_IPAssigned+0x4c>)
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	3312      	adds	r3, #18
 801fc5a:	4618      	mov	r0, r3
 801fc5c:	f7fc fa56 	bl	801c10c <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801fc60:	4b05      	ldr	r3, [pc, #20]	; (801fc78 <Callback_IPAssigned+0x4c>)
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	2202      	movs	r2, #2
 801fc66:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801fc68:	f7ff ffba 	bl	801fbe0 <network_init>

   ip_dhcp_assigned = true;
 801fc6c:	4b03      	ldr	r3, [pc, #12]	; (801fc7c <Callback_IPAssigned+0x50>)
 801fc6e:	2201      	movs	r2, #1
 801fc70:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801fc72:	bf00      	nop
 801fc74:	bd80      	pop	{r7, pc}
 801fc76:	bf00      	nop
 801fc78:	20001540 	.word	0x20001540
 801fc7c:	2000153c 	.word	0x2000153c

0801fc80 <dhcp_rutine>:

void dhcp_rutine(void){
 801fc80:	b580      	push	{r7, lr}
 801fc82:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801fc84:	f7fb ff8c 	bl	801bba0 <DHCP_run>
 801fc88:	4603      	mov	r3, r0
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d004      	beq.n	801fc98 <dhcp_rutine+0x18>
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	db09      	blt.n	801fca6 <dhcp_rutine+0x26>
 801fc92:	3b02      	subs	r3, #2
 801fc94:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801fc96:	e006      	b.n	801fca6 <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801fc98:	4b04      	ldr	r3, [pc, #16]	; (801fcac <dhcp_rutine+0x2c>)
 801fc9a:	781b      	ldrb	r3, [r3, #0]
 801fc9c:	3301      	adds	r3, #1
 801fc9e:	b2da      	uxtb	r2, r3
 801fca0:	4b02      	ldr	r3, [pc, #8]	; (801fcac <dhcp_rutine+0x2c>)
 801fca2:	701a      	strb	r2, [r3, #0]
				break;
 801fca4:	e000      	b.n	801fca8 <dhcp_rutine+0x28>
				break;
 801fca6:	bf00      	nop
			}
}
 801fca8:	bf00      	nop
 801fcaa:	bd80      	pop	{r7, pc}
 801fcac:	20001544 	.word	0x20001544

0801fcb0 <link_status>:

int link_status(void){
 801fcb0:	b580      	push	{r7, lr}
 801fcb2:	b082      	sub	sp, #8
 801fcb4:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801fcb6:	1dfb      	adds	r3, r7, #7
 801fcb8:	4619      	mov	r1, r3
 801fcba:	200f      	movs	r0, #15
 801fcbc:	f7fa f94e 	bl	8019f5c <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801fcc0:	79fb      	ldrb	r3, [r7, #7]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d102      	bne.n	801fccc <link_status+0x1c>
 801fcc6:	4b04      	ldr	r3, [pc, #16]	; (801fcd8 <link_status+0x28>)
 801fcc8:	2200      	movs	r2, #0
 801fcca:	701a      	strb	r2, [r3, #0]
	return temp;
 801fccc:	79fb      	ldrb	r3, [r7, #7]
}
 801fcce:	4618      	mov	r0, r3
 801fcd0:	3708      	adds	r7, #8
 801fcd2:	46bd      	mov	sp, r7
 801fcd4:	bd80      	pop	{r7, pc}
 801fcd6:	bf00      	nop
 801fcd8:	2000153c 	.word	0x2000153c

0801fcdc <link_duplex>:

int link_duplex(void){
 801fcdc:	b580      	push	{r7, lr}
 801fcde:	b082      	sub	sp, #8
 801fce0:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fce2:	1d3b      	adds	r3, r7, #4
 801fce4:	4618      	mov	r0, r3
 801fce6:	f7fa fccb 	bl	801a680 <wizphy_getphystat>
	return phy_status.duplex;
 801fcea:	79fb      	ldrb	r3, [r7, #7]
}
 801fcec:	4618      	mov	r0, r3
 801fcee:	3708      	adds	r7, #8
 801fcf0:	46bd      	mov	sp, r7
 801fcf2:	bd80      	pop	{r7, pc}

0801fcf4 <link_speed>:

int link_speed(void){
 801fcf4:	b580      	push	{r7, lr}
 801fcf6:	b082      	sub	sp, #8
 801fcf8:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fcfa:	1d3b      	adds	r3, r7, #4
 801fcfc:	4618      	mov	r0, r3
 801fcfe:	f7fa fcbf 	bl	801a680 <wizphy_getphystat>
	return phy_status.speed;
 801fd02:	79bb      	ldrb	r3, [r7, #6]
}
 801fd04:	4618      	mov	r0, r3
 801fd06:	3708      	adds	r7, #8
 801fd08:	46bd      	mov	sp, r7
 801fd0a:	bd80      	pop	{r7, pc}

0801fd0c <assigned_ip>:

int assigned_ip(void){
 801fd0c:	b480      	push	{r7}
 801fd0e:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801fd10:	4b03      	ldr	r3, [pc, #12]	; (801fd20 <assigned_ip+0x14>)
 801fd12:	781b      	ldrb	r3, [r3, #0]
}
 801fd14:	4618      	mov	r0, r3
 801fd16:	46bd      	mov	sp, r7
 801fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd1c:	4770      	bx	lr
 801fd1e:	bf00      	nop
 801fd20:	2000153c 	.word	0x2000153c

0801fd24 <set_ip_aasigned>:

void set_ip_aasigned(void){
 801fd24:	b480      	push	{r7}
 801fd26:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801fd28:	4b03      	ldr	r3, [pc, #12]	; (801fd38 <set_ip_aasigned+0x14>)
 801fd2a:	2201      	movs	r2, #1
 801fd2c:	701a      	strb	r2, [r3, #0]
}
 801fd2e:	bf00      	nop
 801fd30:	46bd      	mov	sp, r7
 801fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd36:	4770      	bx	lr
 801fd38:	2000153c 	.word	0x2000153c

0801fd3c <w5500_init>:

int w5500_init(void)
{
 801fd3c:	b590      	push	{r4, r7, lr}
 801fd3e:	b085      	sub	sp, #20
 801fd40:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801fd42:	4b18      	ldr	r3, [pc, #96]	; (801fda4 <w5500_init+0x68>)
 801fd44:	463c      	mov	r4, r7
 801fd46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fd48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801fd4c:	4b16      	ldr	r3, [pc, #88]	; (801fda8 <w5500_init+0x6c>)
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	4798      	blx	r3
  delay_ms(delay0_5s);
 801fd52:	4b16      	ldr	r3, [pc, #88]	; (801fdac <w5500_init+0x70>)
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801fd5a:	4798      	blx	r3
  ResetOFF();
 801fd5c:	4b14      	ldr	r3, [pc, #80]	; (801fdb0 <w5500_init+0x74>)
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	4798      	blx	r3
  delay_ms(delay3s);
 801fd62:	4b12      	ldr	r3, [pc, #72]	; (801fdac <w5500_init+0x70>)
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801fd6a:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801fd6c:	463b      	mov	r3, r7
 801fd6e:	4619      	mov	r1, r3
 801fd70:	2001      	movs	r0, #1
 801fd72:	f7fa f8f3 	bl	8019f5c <ctlwizchip>
 801fd76:	4603      	mov	r3, r0
 801fd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fd7c:	d102      	bne.n	801fd84 <w5500_init+0x48>
  {
	  return -1;
 801fd7e:	f04f 33ff 	mov.w	r3, #4294967295
 801fd82:	e00b      	b.n	801fd9c <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801fd84:	f7ff ff94 	bl	801fcb0 <link_status>
 801fd88:	4603      	mov	r3, r0
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	d102      	bne.n	801fd94 <w5500_init+0x58>
	   return -1;
 801fd8e:	f04f 33ff 	mov.w	r3, #4294967295
 801fd92:	e003      	b.n	801fd9c <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801fd94:	4b07      	ldr	r3, [pc, #28]	; (801fdb4 <w5500_init+0x78>)
 801fd96:	2200      	movs	r2, #0
 801fd98:	701a      	strb	r2, [r3, #0]
  return 0;
 801fd9a:	2300      	movs	r3, #0
}
 801fd9c:	4618      	mov	r0, r3
 801fd9e:	3714      	adds	r7, #20
 801fda0:	46bd      	mov	sp, r7
 801fda2:	bd90      	pop	{r4, r7, pc}
 801fda4:	08033624 	.word	0x08033624
 801fda8:	2000154c 	.word	0x2000154c
 801fdac:	20001548 	.word	0x20001548
 801fdb0:	20001550 	.word	0x20001550
 801fdb4:	2000153c 	.word	0x2000153c

0801fdb8 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801fdb8:	b480      	push	{r7}
 801fdba:	b083      	sub	sp, #12
 801fdbc:	af00      	add	r7, sp, #0
 801fdbe:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801fdc0:	4b07      	ldr	r3, [pc, #28]	; (801fde0 <w5500_delay_cb+0x28>)
 801fdc2:	4a08      	ldr	r2, [pc, #32]	; (801fde4 <w5500_delay_cb+0x2c>)
 801fdc4:	601a      	str	r2, [r3, #0]

	if (function){
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	d002      	beq.n	801fdd2 <w5500_delay_cb+0x1a>
		delay_ms = function;
 801fdcc:	4a04      	ldr	r2, [pc, #16]	; (801fde0 <w5500_delay_cb+0x28>)
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	6013      	str	r3, [r2, #0]
	}
}
 801fdd2:	bf00      	nop
 801fdd4:	370c      	adds	r7, #12
 801fdd6:	46bd      	mov	sp, r7
 801fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fddc:	4770      	bx	lr
 801fdde:	bf00      	nop
 801fde0:	20001548 	.word	0x20001548
 801fde4:	0801fb8f 	.word	0x0801fb8f

0801fde8 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801fde8:	b480      	push	{r7}
 801fdea:	b083      	sub	sp, #12
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	6078      	str	r0, [r7, #4]
 801fdf0:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801fdf2:	4b0c      	ldr	r3, [pc, #48]	; (801fe24 <w5500_reset_cb+0x3c>)
 801fdf4:	4a0c      	ldr	r2, [pc, #48]	; (801fe28 <w5500_reset_cb+0x40>)
 801fdf6:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801fdf8:	4b0c      	ldr	r3, [pc, #48]	; (801fe2c <w5500_reset_cb+0x44>)
 801fdfa:	4a0b      	ldr	r2, [pc, #44]	; (801fe28 <w5500_reset_cb+0x40>)
 801fdfc:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 801fdfe:	687b      	ldr	r3, [r7, #4]
 801fe00:	2b00      	cmp	r3, #0
 801fe02:	d002      	beq.n	801fe0a <w5500_reset_cb+0x22>
 801fe04:	4a07      	ldr	r2, [pc, #28]	; (801fe24 <w5500_reset_cb+0x3c>)
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 801fe0a:	683b      	ldr	r3, [r7, #0]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d002      	beq.n	801fe16 <w5500_reset_cb+0x2e>
 801fe10:	4a06      	ldr	r2, [pc, #24]	; (801fe2c <w5500_reset_cb+0x44>)
 801fe12:	683b      	ldr	r3, [r7, #0]
 801fe14:	6013      	str	r3, [r2, #0]
}
 801fe16:	bf00      	nop
 801fe18:	370c      	adds	r7, #12
 801fe1a:	46bd      	mov	sp, r7
 801fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe20:	4770      	bx	lr
 801fe22:	bf00      	nop
 801fe24:	2000154c 	.word	0x2000154c
 801fe28:	0801fb81 	.word	0x0801fb81
 801fe2c:	20001550 	.word	0x20001550

0801fe30 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 801fe30:	b580      	push	{r7, lr}
 801fe32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 801fe34:	2200      	movs	r2, #0
 801fe36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fe3a:	4802      	ldr	r0, [pc, #8]	; (801fe44 <Eth_reset_on+0x14>)
 801fe3c:	f7f5 ffae 	bl	8015d9c <HAL_GPIO_WritePin>
}
 801fe40:	bf00      	nop
 801fe42:	bd80      	pop	{r7, pc}
 801fe44:	40020000 	.word	0x40020000

0801fe48 <Eth_reset_off>:

void Eth_reset_off(void){
 801fe48:	b580      	push	{r7, lr}
 801fe4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 801fe4c:	2201      	movs	r2, #1
 801fe4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fe52:	4802      	ldr	r0, [pc, #8]	; (801fe5c <Eth_reset_off+0x14>)
 801fe54:	f7f5 ffa2 	bl	8015d9c <HAL_GPIO_WritePin>
}
 801fe58:	bf00      	nop
 801fe5a:	bd80      	pop	{r7, pc}
 801fe5c:	40020000 	.word	0x40020000

0801fe60 <Eth_spi_select>:

void Eth_spi_select(void){
 801fe60:	b580      	push	{r7, lr}
 801fe62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 801fe64:	2200      	movs	r2, #0
 801fe66:	2140      	movs	r1, #64	; 0x40
 801fe68:	4802      	ldr	r0, [pc, #8]	; (801fe74 <Eth_spi_select+0x14>)
 801fe6a:	f7f5 ff97 	bl	8015d9c <HAL_GPIO_WritePin>
}
 801fe6e:	bf00      	nop
 801fe70:	bd80      	pop	{r7, pc}
 801fe72:	bf00      	nop
 801fe74:	40020400 	.word	0x40020400

0801fe78 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 801fe78:	b580      	push	{r7, lr}
 801fe7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 801fe7c:	2201      	movs	r2, #1
 801fe7e:	2140      	movs	r1, #64	; 0x40
 801fe80:	4802      	ldr	r0, [pc, #8]	; (801fe8c <Eth_spi_deselect+0x14>)
 801fe82:	f7f5 ff8b 	bl	8015d9c <HAL_GPIO_WritePin>
}
 801fe86:	bf00      	nop
 801fe88:	bd80      	pop	{r7, pc}
 801fe8a:	bf00      	nop
 801fe8c:	40020400 	.word	0x40020400

0801fe90 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 801fe90:	b084      	sub	sp, #16
 801fe92:	b580      	push	{r7, lr}
 801fe94:	af00      	add	r7, sp, #0
 801fe96:	f107 0c08 	add.w	ip, r7, #8
 801fe9a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 801fe9e:	4b07      	ldr	r3, [pc, #28]	; (801febc <Reg_eth_spi+0x2c>)
 801fea0:	4618      	mov	r0, r3
 801fea2:	f107 0308 	add.w	r3, r7, #8
 801fea6:	2258      	movs	r2, #88	; 0x58
 801fea8:	4619      	mov	r1, r3
 801feaa:	f00d ff14 	bl	802dcd6 <memcpy>
}
 801feae:	bf00      	nop
 801feb0:	46bd      	mov	sp, r7
 801feb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801feb6:	b004      	add	sp, #16
 801feb8:	4770      	bx	lr
 801feba:	bf00      	nop
 801febc:	20001554 	.word	0x20001554

0801fec0 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 801fec0:	b580      	push	{r7, lr}
 801fec2:	b082      	sub	sp, #8
 801fec4:	af00      	add	r7, sp, #0
 801fec6:	4603      	mov	r3, r0
 801fec8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 801feca:	1df9      	adds	r1, r7, #7
 801fecc:	f241 3388 	movw	r3, #5000	; 0x1388
 801fed0:	2201      	movs	r2, #1
 801fed2:	4803      	ldr	r0, [pc, #12]	; (801fee0 <Eth_spi_send_byte+0x20>)
 801fed4:	f7f6 fd21 	bl	801691a <HAL_SPI_Transmit>
}
 801fed8:	bf00      	nop
 801feda:	3708      	adds	r7, #8
 801fedc:	46bd      	mov	sp, r7
 801fede:	bd80      	pop	{r7, pc}
 801fee0:	20001554 	.word	0x20001554

0801fee4 <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 801fee4:	b580      	push	{r7, lr}
 801fee6:	b082      	sub	sp, #8
 801fee8:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 801feea:	1df9      	adds	r1, r7, #7
 801feec:	f241 3388 	movw	r3, #5000	; 0x1388
 801fef0:	2201      	movs	r2, #1
 801fef2:	4804      	ldr	r0, [pc, #16]	; (801ff04 <Eth_spi_resv_byte+0x20>)
 801fef4:	f7f6 fe54 	bl	8016ba0 <HAL_SPI_Receive>
	return byte;
 801fef8:	79fb      	ldrb	r3, [r7, #7]
}
 801fefa:	4618      	mov	r0, r3
 801fefc:	3708      	adds	r7, #8
 801fefe:	46bd      	mov	sp, r7
 801ff00:	bd80      	pop	{r7, pc}
 801ff02:	bf00      	nop
 801ff04:	20001554 	.word	0x20001554

0801ff08 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 801ff08:	b480      	push	{r7}
 801ff0a:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 801ff0c:	bf00      	nop
 801ff0e:	46bd      	mov	sp, r7
 801ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff14:	4770      	bx	lr
	...

0801ff18 <__NVIC_SetPriority>:
{
 801ff18:	b480      	push	{r7}
 801ff1a:	b083      	sub	sp, #12
 801ff1c:	af00      	add	r7, sp, #0
 801ff1e:	4603      	mov	r3, r0
 801ff20:	6039      	str	r1, [r7, #0]
 801ff22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ff24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	db0a      	blt.n	801ff42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ff2c:	683b      	ldr	r3, [r7, #0]
 801ff2e:	b2da      	uxtb	r2, r3
 801ff30:	490c      	ldr	r1, [pc, #48]	; (801ff64 <__NVIC_SetPriority+0x4c>)
 801ff32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ff36:	0112      	lsls	r2, r2, #4
 801ff38:	b2d2      	uxtb	r2, r2
 801ff3a:	440b      	add	r3, r1
 801ff3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801ff40:	e00a      	b.n	801ff58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ff42:	683b      	ldr	r3, [r7, #0]
 801ff44:	b2da      	uxtb	r2, r3
 801ff46:	4908      	ldr	r1, [pc, #32]	; (801ff68 <__NVIC_SetPriority+0x50>)
 801ff48:	79fb      	ldrb	r3, [r7, #7]
 801ff4a:	f003 030f 	and.w	r3, r3, #15
 801ff4e:	3b04      	subs	r3, #4
 801ff50:	0112      	lsls	r2, r2, #4
 801ff52:	b2d2      	uxtb	r2, r2
 801ff54:	440b      	add	r3, r1
 801ff56:	761a      	strb	r2, [r3, #24]
}
 801ff58:	bf00      	nop
 801ff5a:	370c      	adds	r7, #12
 801ff5c:	46bd      	mov	sp, r7
 801ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff62:	4770      	bx	lr
 801ff64:	e000e100 	.word	0xe000e100
 801ff68:	e000ed00 	.word	0xe000ed00

0801ff6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801ff6c:	b580      	push	{r7, lr}
 801ff6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801ff70:	4b05      	ldr	r3, [pc, #20]	; (801ff88 <SysTick_Handler+0x1c>)
 801ff72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801ff74:	f002 fbe0 	bl	8022738 <xTaskGetSchedulerState>
 801ff78:	4603      	mov	r3, r0
 801ff7a:	2b01      	cmp	r3, #1
 801ff7c:	d001      	beq.n	801ff82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801ff7e:	f003 fac3 	bl	8023508 <xPortSysTickHandler>
  }
}
 801ff82:	bf00      	nop
 801ff84:	bd80      	pop	{r7, pc}
 801ff86:	bf00      	nop
 801ff88:	e000e010 	.word	0xe000e010

0801ff8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801ff8c:	b580      	push	{r7, lr}
 801ff8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801ff90:	2100      	movs	r1, #0
 801ff92:	f06f 0004 	mvn.w	r0, #4
 801ff96:	f7ff ffbf 	bl	801ff18 <__NVIC_SetPriority>
#endif
}
 801ff9a:	bf00      	nop
 801ff9c:	bd80      	pop	{r7, pc}
	...

0801ffa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801ffa0:	b480      	push	{r7}
 801ffa2:	b083      	sub	sp, #12
 801ffa4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ffa6:	f3ef 8305 	mrs	r3, IPSR
 801ffaa:	603b      	str	r3, [r7, #0]
  return(result);
 801ffac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ffae:	2b00      	cmp	r3, #0
 801ffb0:	d003      	beq.n	801ffba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801ffb2:	f06f 0305 	mvn.w	r3, #5
 801ffb6:	607b      	str	r3, [r7, #4]
 801ffb8:	e00c      	b.n	801ffd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801ffba:	4b0a      	ldr	r3, [pc, #40]	; (801ffe4 <osKernelInitialize+0x44>)
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d105      	bne.n	801ffce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801ffc2:	4b08      	ldr	r3, [pc, #32]	; (801ffe4 <osKernelInitialize+0x44>)
 801ffc4:	2201      	movs	r2, #1
 801ffc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801ffc8:	2300      	movs	r3, #0
 801ffca:	607b      	str	r3, [r7, #4]
 801ffcc:	e002      	b.n	801ffd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801ffce:	f04f 33ff 	mov.w	r3, #4294967295
 801ffd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801ffd4:	687b      	ldr	r3, [r7, #4]
}
 801ffd6:	4618      	mov	r0, r3
 801ffd8:	370c      	adds	r7, #12
 801ffda:	46bd      	mov	sp, r7
 801ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffe0:	4770      	bx	lr
 801ffe2:	bf00      	nop
 801ffe4:	200015ac 	.word	0x200015ac

0801ffe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801ffe8:	b580      	push	{r7, lr}
 801ffea:	b082      	sub	sp, #8
 801ffec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ffee:	f3ef 8305 	mrs	r3, IPSR
 801fff2:	603b      	str	r3, [r7, #0]
  return(result);
 801fff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d003      	beq.n	8020002 <osKernelStart+0x1a>
    stat = osErrorISR;
 801fffa:	f06f 0305 	mvn.w	r3, #5
 801fffe:	607b      	str	r3, [r7, #4]
 8020000:	e010      	b.n	8020024 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8020002:	4b0b      	ldr	r3, [pc, #44]	; (8020030 <osKernelStart+0x48>)
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	2b01      	cmp	r3, #1
 8020008:	d109      	bne.n	802001e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 802000a:	f7ff ffbf 	bl	801ff8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 802000e:	4b08      	ldr	r3, [pc, #32]	; (8020030 <osKernelStart+0x48>)
 8020010:	2202      	movs	r2, #2
 8020012:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8020014:	f001 fece 	bl	8021db4 <vTaskStartScheduler>
      stat = osOK;
 8020018:	2300      	movs	r3, #0
 802001a:	607b      	str	r3, [r7, #4]
 802001c:	e002      	b.n	8020024 <osKernelStart+0x3c>
    } else {
      stat = osError;
 802001e:	f04f 33ff 	mov.w	r3, #4294967295
 8020022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8020024:	687b      	ldr	r3, [r7, #4]
}
 8020026:	4618      	mov	r0, r3
 8020028:	3708      	adds	r7, #8
 802002a:	46bd      	mov	sp, r7
 802002c:	bd80      	pop	{r7, pc}
 802002e:	bf00      	nop
 8020030:	200015ac 	.word	0x200015ac

08020034 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8020034:	b580      	push	{r7, lr}
 8020036:	b08e      	sub	sp, #56	; 0x38
 8020038:	af04      	add	r7, sp, #16
 802003a:	60f8      	str	r0, [r7, #12]
 802003c:	60b9      	str	r1, [r7, #8]
 802003e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8020040:	2300      	movs	r3, #0
 8020042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020044:	f3ef 8305 	mrs	r3, IPSR
 8020048:	617b      	str	r3, [r7, #20]
  return(result);
 802004a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 802004c:	2b00      	cmp	r3, #0
 802004e:	d17e      	bne.n	802014e <osThreadNew+0x11a>
 8020050:	68fb      	ldr	r3, [r7, #12]
 8020052:	2b00      	cmp	r3, #0
 8020054:	d07b      	beq.n	802014e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8020056:	2380      	movs	r3, #128	; 0x80
 8020058:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 802005a:	2318      	movs	r3, #24
 802005c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 802005e:	2300      	movs	r3, #0
 8020060:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8020062:	f04f 33ff 	mov.w	r3, #4294967295
 8020066:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	2b00      	cmp	r3, #0
 802006c:	d045      	beq.n	80200fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d002      	beq.n	802007c <osThreadNew+0x48>
        name = attr->name;
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	681b      	ldr	r3, [r3, #0]
 802007a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	699b      	ldr	r3, [r3, #24]
 8020080:	2b00      	cmp	r3, #0
 8020082:	d002      	beq.n	802008a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	699b      	ldr	r3, [r3, #24]
 8020088:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 802008a:	69fb      	ldr	r3, [r7, #28]
 802008c:	2b00      	cmp	r3, #0
 802008e:	d008      	beq.n	80200a2 <osThreadNew+0x6e>
 8020090:	69fb      	ldr	r3, [r7, #28]
 8020092:	2b38      	cmp	r3, #56	; 0x38
 8020094:	d805      	bhi.n	80200a2 <osThreadNew+0x6e>
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	685b      	ldr	r3, [r3, #4]
 802009a:	f003 0301 	and.w	r3, r3, #1
 802009e:	2b00      	cmp	r3, #0
 80200a0:	d001      	beq.n	80200a6 <osThreadNew+0x72>
        return (NULL);
 80200a2:	2300      	movs	r3, #0
 80200a4:	e054      	b.n	8020150 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	695b      	ldr	r3, [r3, #20]
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	d003      	beq.n	80200b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	695b      	ldr	r3, [r3, #20]
 80200b2:	089b      	lsrs	r3, r3, #2
 80200b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	689b      	ldr	r3, [r3, #8]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	d00e      	beq.n	80200dc <osThreadNew+0xa8>
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	68db      	ldr	r3, [r3, #12]
 80200c2:	2bab      	cmp	r3, #171	; 0xab
 80200c4:	d90a      	bls.n	80200dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d006      	beq.n	80200dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	695b      	ldr	r3, [r3, #20]
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d002      	beq.n	80200dc <osThreadNew+0xa8>
        mem = 1;
 80200d6:	2301      	movs	r3, #1
 80200d8:	61bb      	str	r3, [r7, #24]
 80200da:	e010      	b.n	80200fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	689b      	ldr	r3, [r3, #8]
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	d10c      	bne.n	80200fe <osThreadNew+0xca>
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	68db      	ldr	r3, [r3, #12]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d108      	bne.n	80200fe <osThreadNew+0xca>
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	691b      	ldr	r3, [r3, #16]
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d104      	bne.n	80200fe <osThreadNew+0xca>
          mem = 0;
 80200f4:	2300      	movs	r3, #0
 80200f6:	61bb      	str	r3, [r7, #24]
 80200f8:	e001      	b.n	80200fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80200fa:	2300      	movs	r3, #0
 80200fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80200fe:	69bb      	ldr	r3, [r7, #24]
 8020100:	2b01      	cmp	r3, #1
 8020102:	d110      	bne.n	8020126 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8020108:	687a      	ldr	r2, [r7, #4]
 802010a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802010c:	9202      	str	r2, [sp, #8]
 802010e:	9301      	str	r3, [sp, #4]
 8020110:	69fb      	ldr	r3, [r7, #28]
 8020112:	9300      	str	r3, [sp, #0]
 8020114:	68bb      	ldr	r3, [r7, #8]
 8020116:	6a3a      	ldr	r2, [r7, #32]
 8020118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802011a:	68f8      	ldr	r0, [r7, #12]
 802011c:	f001 fc5a 	bl	80219d4 <xTaskCreateStatic>
 8020120:	4603      	mov	r3, r0
 8020122:	613b      	str	r3, [r7, #16]
 8020124:	e013      	b.n	802014e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8020126:	69bb      	ldr	r3, [r7, #24]
 8020128:	2b00      	cmp	r3, #0
 802012a:	d110      	bne.n	802014e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 802012c:	6a3b      	ldr	r3, [r7, #32]
 802012e:	b29a      	uxth	r2, r3
 8020130:	f107 0310 	add.w	r3, r7, #16
 8020134:	9301      	str	r3, [sp, #4]
 8020136:	69fb      	ldr	r3, [r7, #28]
 8020138:	9300      	str	r3, [sp, #0]
 802013a:	68bb      	ldr	r3, [r7, #8]
 802013c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802013e:	68f8      	ldr	r0, [r7, #12]
 8020140:	f001 fca5 	bl	8021a8e <xTaskCreate>
 8020144:	4603      	mov	r3, r0
 8020146:	2b01      	cmp	r3, #1
 8020148:	d001      	beq.n	802014e <osThreadNew+0x11a>
            hTask = NULL;
 802014a:	2300      	movs	r3, #0
 802014c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 802014e:	693b      	ldr	r3, [r7, #16]
}
 8020150:	4618      	mov	r0, r3
 8020152:	3728      	adds	r7, #40	; 0x28
 8020154:	46bd      	mov	sp, r7
 8020156:	bd80      	pop	{r7, pc}

08020158 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8020158:	b580      	push	{r7, lr}
 802015a:	b086      	sub	sp, #24
 802015c:	af00      	add	r7, sp, #0
 802015e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020164:	f3ef 8305 	mrs	r3, IPSR
 8020168:	60fb      	str	r3, [r7, #12]
  return(result);
 802016a:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 802016c:	2b00      	cmp	r3, #0
 802016e:	d102      	bne.n	8020176 <osThreadGetStackSpace+0x1e>
 8020170:	693b      	ldr	r3, [r7, #16]
 8020172:	2b00      	cmp	r3, #0
 8020174:	d102      	bne.n	802017c <osThreadGetStackSpace+0x24>
    sz = 0U;
 8020176:	2300      	movs	r3, #0
 8020178:	617b      	str	r3, [r7, #20]
 802017a:	e005      	b.n	8020188 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 802017c:	6938      	ldr	r0, [r7, #16]
 802017e:	f002 fa5b 	bl	8022638 <uxTaskGetStackHighWaterMark>
 8020182:	4603      	mov	r3, r0
 8020184:	009b      	lsls	r3, r3, #2
 8020186:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 8020188:	697b      	ldr	r3, [r7, #20]
}
 802018a:	4618      	mov	r0, r3
 802018c:	3718      	adds	r7, #24
 802018e:	46bd      	mov	sp, r7
 8020190:	bd80      	pop	{r7, pc}
	...

08020194 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8020194:	b480      	push	{r7}
 8020196:	b083      	sub	sp, #12
 8020198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802019a:	f3ef 8305 	mrs	r3, IPSR
 802019e:	603b      	str	r3, [r7, #0]
  return(result);
 80201a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d003      	beq.n	80201ae <osThreadYield+0x1a>
    stat = osErrorISR;
 80201a6:	f06f 0305 	mvn.w	r3, #5
 80201aa:	607b      	str	r3, [r7, #4]
 80201ac:	e009      	b.n	80201c2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80201ae:	2300      	movs	r3, #0
 80201b0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80201b2:	4b07      	ldr	r3, [pc, #28]	; (80201d0 <osThreadYield+0x3c>)
 80201b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80201b8:	601a      	str	r2, [r3, #0]
 80201ba:	f3bf 8f4f 	dsb	sy
 80201be:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80201c2:	687b      	ldr	r3, [r7, #4]
}
 80201c4:	4618      	mov	r0, r3
 80201c6:	370c      	adds	r7, #12
 80201c8:	46bd      	mov	sp, r7
 80201ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ce:	4770      	bx	lr
 80201d0:	e000ed04 	.word	0xe000ed04

080201d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80201d4:	b580      	push	{r7, lr}
 80201d6:	b084      	sub	sp, #16
 80201d8:	af00      	add	r7, sp, #0
 80201da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80201dc:	f3ef 8305 	mrs	r3, IPSR
 80201e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80201e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d003      	beq.n	80201f0 <osDelay+0x1c>
    stat = osErrorISR;
 80201e8:	f06f 0305 	mvn.w	r3, #5
 80201ec:	60fb      	str	r3, [r7, #12]
 80201ee:	e007      	b.n	8020200 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80201f0:	2300      	movs	r3, #0
 80201f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	d002      	beq.n	8020200 <osDelay+0x2c>
      vTaskDelay(ticks);
 80201fa:	6878      	ldr	r0, [r7, #4]
 80201fc:	f001 fda6 	bl	8021d4c <vTaskDelay>
    }
  }

  return (stat);
 8020200:	68fb      	ldr	r3, [r7, #12]
}
 8020202:	4618      	mov	r0, r3
 8020204:	3710      	adds	r7, #16
 8020206:	46bd      	mov	sp, r7
 8020208:	bd80      	pop	{r7, pc}

0802020a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 802020a:	b580      	push	{r7, lr}
 802020c:	b088      	sub	sp, #32
 802020e:	af00      	add	r7, sp, #0
 8020210:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8020212:	2300      	movs	r3, #0
 8020214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020216:	f3ef 8305 	mrs	r3, IPSR
 802021a:	60bb      	str	r3, [r7, #8]
  return(result);
 802021c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 802021e:	2b00      	cmp	r3, #0
 8020220:	d174      	bne.n	802030c <osMutexNew+0x102>
    if (attr != NULL) {
 8020222:	687b      	ldr	r3, [r7, #4]
 8020224:	2b00      	cmp	r3, #0
 8020226:	d003      	beq.n	8020230 <osMutexNew+0x26>
      type = attr->attr_bits;
 8020228:	687b      	ldr	r3, [r7, #4]
 802022a:	685b      	ldr	r3, [r3, #4]
 802022c:	61bb      	str	r3, [r7, #24]
 802022e:	e001      	b.n	8020234 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8020230:	2300      	movs	r3, #0
 8020232:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8020234:	69bb      	ldr	r3, [r7, #24]
 8020236:	f003 0301 	and.w	r3, r3, #1
 802023a:	2b00      	cmp	r3, #0
 802023c:	d002      	beq.n	8020244 <osMutexNew+0x3a>
      rmtx = 1U;
 802023e:	2301      	movs	r3, #1
 8020240:	617b      	str	r3, [r7, #20]
 8020242:	e001      	b.n	8020248 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8020244:	2300      	movs	r3, #0
 8020246:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8020248:	69bb      	ldr	r3, [r7, #24]
 802024a:	f003 0308 	and.w	r3, r3, #8
 802024e:	2b00      	cmp	r3, #0
 8020250:	d15c      	bne.n	802030c <osMutexNew+0x102>
      mem = -1;
 8020252:	f04f 33ff 	mov.w	r3, #4294967295
 8020256:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	2b00      	cmp	r3, #0
 802025c:	d015      	beq.n	802028a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	689b      	ldr	r3, [r3, #8]
 8020262:	2b00      	cmp	r3, #0
 8020264:	d006      	beq.n	8020274 <osMutexNew+0x6a>
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	68db      	ldr	r3, [r3, #12]
 802026a:	2b4f      	cmp	r3, #79	; 0x4f
 802026c:	d902      	bls.n	8020274 <osMutexNew+0x6a>
          mem = 1;
 802026e:	2301      	movs	r3, #1
 8020270:	613b      	str	r3, [r7, #16]
 8020272:	e00c      	b.n	802028e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	689b      	ldr	r3, [r3, #8]
 8020278:	2b00      	cmp	r3, #0
 802027a:	d108      	bne.n	802028e <osMutexNew+0x84>
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	68db      	ldr	r3, [r3, #12]
 8020280:	2b00      	cmp	r3, #0
 8020282:	d104      	bne.n	802028e <osMutexNew+0x84>
            mem = 0;
 8020284:	2300      	movs	r3, #0
 8020286:	613b      	str	r3, [r7, #16]
 8020288:	e001      	b.n	802028e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 802028a:	2300      	movs	r3, #0
 802028c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 802028e:	693b      	ldr	r3, [r7, #16]
 8020290:	2b01      	cmp	r3, #1
 8020292:	d112      	bne.n	80202ba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8020294:	697b      	ldr	r3, [r7, #20]
 8020296:	2b00      	cmp	r3, #0
 8020298:	d007      	beq.n	80202aa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	689b      	ldr	r3, [r3, #8]
 802029e:	4619      	mov	r1, r3
 80202a0:	2004      	movs	r0, #4
 80202a2:	f000 fc68 	bl	8020b76 <xQueueCreateMutexStatic>
 80202a6:	61f8      	str	r0, [r7, #28]
 80202a8:	e016      	b.n	80202d8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	689b      	ldr	r3, [r3, #8]
 80202ae:	4619      	mov	r1, r3
 80202b0:	2001      	movs	r0, #1
 80202b2:	f000 fc60 	bl	8020b76 <xQueueCreateMutexStatic>
 80202b6:	61f8      	str	r0, [r7, #28]
 80202b8:	e00e      	b.n	80202d8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80202ba:	693b      	ldr	r3, [r7, #16]
 80202bc:	2b00      	cmp	r3, #0
 80202be:	d10b      	bne.n	80202d8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80202c0:	697b      	ldr	r3, [r7, #20]
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d004      	beq.n	80202d0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80202c6:	2004      	movs	r0, #4
 80202c8:	f000 fc3d 	bl	8020b46 <xQueueCreateMutex>
 80202cc:	61f8      	str	r0, [r7, #28]
 80202ce:	e003      	b.n	80202d8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80202d0:	2001      	movs	r0, #1
 80202d2:	f000 fc38 	bl	8020b46 <xQueueCreateMutex>
 80202d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80202d8:	69fb      	ldr	r3, [r7, #28]
 80202da:	2b00      	cmp	r3, #0
 80202dc:	d00c      	beq.n	80202f8 <osMutexNew+0xee>
        if (attr != NULL) {
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	d003      	beq.n	80202ec <osMutexNew+0xe2>
          name = attr->name;
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	681b      	ldr	r3, [r3, #0]
 80202e8:	60fb      	str	r3, [r7, #12]
 80202ea:	e001      	b.n	80202f0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80202ec:	2300      	movs	r3, #0
 80202ee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80202f0:	68f9      	ldr	r1, [r7, #12]
 80202f2:	69f8      	ldr	r0, [r7, #28]
 80202f4:	f001 fb10 	bl	8021918 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80202f8:	69fb      	ldr	r3, [r7, #28]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d006      	beq.n	802030c <osMutexNew+0x102>
 80202fe:	697b      	ldr	r3, [r7, #20]
 8020300:	2b00      	cmp	r3, #0
 8020302:	d003      	beq.n	802030c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8020304:	69fb      	ldr	r3, [r7, #28]
 8020306:	f043 0301 	orr.w	r3, r3, #1
 802030a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 802030c:	69fb      	ldr	r3, [r7, #28]
}
 802030e:	4618      	mov	r0, r3
 8020310:	3720      	adds	r7, #32
 8020312:	46bd      	mov	sp, r7
 8020314:	bd80      	pop	{r7, pc}

08020316 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8020316:	b580      	push	{r7, lr}
 8020318:	b086      	sub	sp, #24
 802031a:	af00      	add	r7, sp, #0
 802031c:	6078      	str	r0, [r7, #4]
 802031e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	f023 0301 	bic.w	r3, r3, #1
 8020326:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020328:	687b      	ldr	r3, [r7, #4]
 802032a:	f003 0301 	and.w	r3, r3, #1
 802032e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8020330:	2300      	movs	r3, #0
 8020332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020334:	f3ef 8305 	mrs	r3, IPSR
 8020338:	60bb      	str	r3, [r7, #8]
  return(result);
 802033a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 802033c:	2b00      	cmp	r3, #0
 802033e:	d003      	beq.n	8020348 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8020340:	f06f 0305 	mvn.w	r3, #5
 8020344:	617b      	str	r3, [r7, #20]
 8020346:	e02c      	b.n	80203a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8020348:	693b      	ldr	r3, [r7, #16]
 802034a:	2b00      	cmp	r3, #0
 802034c:	d103      	bne.n	8020356 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 802034e:	f06f 0303 	mvn.w	r3, #3
 8020352:	617b      	str	r3, [r7, #20]
 8020354:	e025      	b.n	80203a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8020356:	68fb      	ldr	r3, [r7, #12]
 8020358:	2b00      	cmp	r3, #0
 802035a:	d011      	beq.n	8020380 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 802035c:	6839      	ldr	r1, [r7, #0]
 802035e:	6938      	ldr	r0, [r7, #16]
 8020360:	f000 fc58 	bl	8020c14 <xQueueTakeMutexRecursive>
 8020364:	4603      	mov	r3, r0
 8020366:	2b01      	cmp	r3, #1
 8020368:	d01b      	beq.n	80203a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 802036a:	683b      	ldr	r3, [r7, #0]
 802036c:	2b00      	cmp	r3, #0
 802036e:	d003      	beq.n	8020378 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8020370:	f06f 0301 	mvn.w	r3, #1
 8020374:	617b      	str	r3, [r7, #20]
 8020376:	e014      	b.n	80203a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020378:	f06f 0302 	mvn.w	r3, #2
 802037c:	617b      	str	r3, [r7, #20]
 802037e:	e010      	b.n	80203a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8020380:	6839      	ldr	r1, [r7, #0]
 8020382:	6938      	ldr	r0, [r7, #16]
 8020384:	f000 fef6 	bl	8021174 <xQueueSemaphoreTake>
 8020388:	4603      	mov	r3, r0
 802038a:	2b01      	cmp	r3, #1
 802038c:	d009      	beq.n	80203a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 802038e:	683b      	ldr	r3, [r7, #0]
 8020390:	2b00      	cmp	r3, #0
 8020392:	d003      	beq.n	802039c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8020394:	f06f 0301 	mvn.w	r3, #1
 8020398:	617b      	str	r3, [r7, #20]
 802039a:	e002      	b.n	80203a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 802039c:	f06f 0302 	mvn.w	r3, #2
 80203a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80203a2:	697b      	ldr	r3, [r7, #20]
}
 80203a4:	4618      	mov	r0, r3
 80203a6:	3718      	adds	r7, #24
 80203a8:	46bd      	mov	sp, r7
 80203aa:	bd80      	pop	{r7, pc}

080203ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80203ac:	b580      	push	{r7, lr}
 80203ae:	b086      	sub	sp, #24
 80203b0:	af00      	add	r7, sp, #0
 80203b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	f023 0301 	bic.w	r3, r3, #1
 80203ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	f003 0301 	and.w	r3, r3, #1
 80203c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80203c4:	2300      	movs	r3, #0
 80203c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80203c8:	f3ef 8305 	mrs	r3, IPSR
 80203cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80203ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d003      	beq.n	80203dc <osMutexRelease+0x30>
    stat = osErrorISR;
 80203d4:	f06f 0305 	mvn.w	r3, #5
 80203d8:	617b      	str	r3, [r7, #20]
 80203da:	e01f      	b.n	802041c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80203dc:	693b      	ldr	r3, [r7, #16]
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d103      	bne.n	80203ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80203e2:	f06f 0303 	mvn.w	r3, #3
 80203e6:	617b      	str	r3, [r7, #20]
 80203e8:	e018      	b.n	802041c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80203ea:	68fb      	ldr	r3, [r7, #12]
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	d009      	beq.n	8020404 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80203f0:	6938      	ldr	r0, [r7, #16]
 80203f2:	f000 fbdb 	bl	8020bac <xQueueGiveMutexRecursive>
 80203f6:	4603      	mov	r3, r0
 80203f8:	2b01      	cmp	r3, #1
 80203fa:	d00f      	beq.n	802041c <osMutexRelease+0x70>
        stat = osErrorResource;
 80203fc:	f06f 0302 	mvn.w	r3, #2
 8020400:	617b      	str	r3, [r7, #20]
 8020402:	e00b      	b.n	802041c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8020404:	2300      	movs	r3, #0
 8020406:	2200      	movs	r2, #0
 8020408:	2100      	movs	r1, #0
 802040a:	6938      	ldr	r0, [r7, #16]
 802040c:	f000 fc38 	bl	8020c80 <xQueueGenericSend>
 8020410:	4603      	mov	r3, r0
 8020412:	2b01      	cmp	r3, #1
 8020414:	d002      	beq.n	802041c <osMutexRelease+0x70>
        stat = osErrorResource;
 8020416:	f06f 0302 	mvn.w	r3, #2
 802041a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 802041c:	697b      	ldr	r3, [r7, #20]
}
 802041e:	4618      	mov	r0, r3
 8020420:	3718      	adds	r7, #24
 8020422:	46bd      	mov	sp, r7
 8020424:	bd80      	pop	{r7, pc}

08020426 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8020426:	b580      	push	{r7, lr}
 8020428:	b08a      	sub	sp, #40	; 0x28
 802042a:	af02      	add	r7, sp, #8
 802042c:	60f8      	str	r0, [r7, #12]
 802042e:	60b9      	str	r1, [r7, #8]
 8020430:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8020432:	2300      	movs	r3, #0
 8020434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020436:	f3ef 8305 	mrs	r3, IPSR
 802043a:	613b      	str	r3, [r7, #16]
  return(result);
 802043c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 802043e:	2b00      	cmp	r3, #0
 8020440:	d15f      	bne.n	8020502 <osMessageQueueNew+0xdc>
 8020442:	68fb      	ldr	r3, [r7, #12]
 8020444:	2b00      	cmp	r3, #0
 8020446:	d05c      	beq.n	8020502 <osMessageQueueNew+0xdc>
 8020448:	68bb      	ldr	r3, [r7, #8]
 802044a:	2b00      	cmp	r3, #0
 802044c:	d059      	beq.n	8020502 <osMessageQueueNew+0xdc>
    mem = -1;
 802044e:	f04f 33ff 	mov.w	r3, #4294967295
 8020452:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8020454:	687b      	ldr	r3, [r7, #4]
 8020456:	2b00      	cmp	r3, #0
 8020458:	d029      	beq.n	80204ae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	689b      	ldr	r3, [r3, #8]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d012      	beq.n	8020488 <osMessageQueueNew+0x62>
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	68db      	ldr	r3, [r3, #12]
 8020466:	2b4f      	cmp	r3, #79	; 0x4f
 8020468:	d90e      	bls.n	8020488 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 802046e:	2b00      	cmp	r3, #0
 8020470:	d00a      	beq.n	8020488 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8020472:	687b      	ldr	r3, [r7, #4]
 8020474:	695a      	ldr	r2, [r3, #20]
 8020476:	68fb      	ldr	r3, [r7, #12]
 8020478:	68b9      	ldr	r1, [r7, #8]
 802047a:	fb01 f303 	mul.w	r3, r1, r3
 802047e:	429a      	cmp	r2, r3
 8020480:	d302      	bcc.n	8020488 <osMessageQueueNew+0x62>
        mem = 1;
 8020482:	2301      	movs	r3, #1
 8020484:	61bb      	str	r3, [r7, #24]
 8020486:	e014      	b.n	80204b2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	689b      	ldr	r3, [r3, #8]
 802048c:	2b00      	cmp	r3, #0
 802048e:	d110      	bne.n	80204b2 <osMessageQueueNew+0x8c>
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	68db      	ldr	r3, [r3, #12]
 8020494:	2b00      	cmp	r3, #0
 8020496:	d10c      	bne.n	80204b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 802049c:	2b00      	cmp	r3, #0
 802049e:	d108      	bne.n	80204b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	695b      	ldr	r3, [r3, #20]
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	d104      	bne.n	80204b2 <osMessageQueueNew+0x8c>
          mem = 0;
 80204a8:	2300      	movs	r3, #0
 80204aa:	61bb      	str	r3, [r7, #24]
 80204ac:	e001      	b.n	80204b2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80204ae:	2300      	movs	r3, #0
 80204b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80204b2:	69bb      	ldr	r3, [r7, #24]
 80204b4:	2b01      	cmp	r3, #1
 80204b6:	d10b      	bne.n	80204d0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	691a      	ldr	r2, [r3, #16]
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	689b      	ldr	r3, [r3, #8]
 80204c0:	2100      	movs	r1, #0
 80204c2:	9100      	str	r1, [sp, #0]
 80204c4:	68b9      	ldr	r1, [r7, #8]
 80204c6:	68f8      	ldr	r0, [r7, #12]
 80204c8:	f000 fa4e 	bl	8020968 <xQueueGenericCreateStatic>
 80204cc:	61f8      	str	r0, [r7, #28]
 80204ce:	e008      	b.n	80204e2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80204d0:	69bb      	ldr	r3, [r7, #24]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d105      	bne.n	80204e2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80204d6:	2200      	movs	r2, #0
 80204d8:	68b9      	ldr	r1, [r7, #8]
 80204da:	68f8      	ldr	r0, [r7, #12]
 80204dc:	f000 fabc 	bl	8020a58 <xQueueGenericCreate>
 80204e0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80204e2:	69fb      	ldr	r3, [r7, #28]
 80204e4:	2b00      	cmp	r3, #0
 80204e6:	d00c      	beq.n	8020502 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	2b00      	cmp	r3, #0
 80204ec:	d003      	beq.n	80204f6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	617b      	str	r3, [r7, #20]
 80204f4:	e001      	b.n	80204fa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80204f6:	2300      	movs	r3, #0
 80204f8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80204fa:	6979      	ldr	r1, [r7, #20]
 80204fc:	69f8      	ldr	r0, [r7, #28]
 80204fe:	f001 fa0b 	bl	8021918 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8020502:	69fb      	ldr	r3, [r7, #28]
}
 8020504:	4618      	mov	r0, r3
 8020506:	3720      	adds	r7, #32
 8020508:	46bd      	mov	sp, r7
 802050a:	bd80      	pop	{r7, pc}

0802050c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 802050c:	b580      	push	{r7, lr}
 802050e:	b088      	sub	sp, #32
 8020510:	af00      	add	r7, sp, #0
 8020512:	60f8      	str	r0, [r7, #12]
 8020514:	60b9      	str	r1, [r7, #8]
 8020516:	603b      	str	r3, [r7, #0]
 8020518:	4613      	mov	r3, r2
 802051a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 802051c:	68fb      	ldr	r3, [r7, #12]
 802051e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020520:	2300      	movs	r3, #0
 8020522:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020524:	f3ef 8305 	mrs	r3, IPSR
 8020528:	617b      	str	r3, [r7, #20]
  return(result);
 802052a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 802052c:	2b00      	cmp	r3, #0
 802052e:	d028      	beq.n	8020582 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020530:	69bb      	ldr	r3, [r7, #24]
 8020532:	2b00      	cmp	r3, #0
 8020534:	d005      	beq.n	8020542 <osMessageQueuePut+0x36>
 8020536:	68bb      	ldr	r3, [r7, #8]
 8020538:	2b00      	cmp	r3, #0
 802053a:	d002      	beq.n	8020542 <osMessageQueuePut+0x36>
 802053c:	683b      	ldr	r3, [r7, #0]
 802053e:	2b00      	cmp	r3, #0
 8020540:	d003      	beq.n	802054a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8020542:	f06f 0303 	mvn.w	r3, #3
 8020546:	61fb      	str	r3, [r7, #28]
 8020548:	e038      	b.n	80205bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 802054a:	2300      	movs	r3, #0
 802054c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 802054e:	f107 0210 	add.w	r2, r7, #16
 8020552:	2300      	movs	r3, #0
 8020554:	68b9      	ldr	r1, [r7, #8]
 8020556:	69b8      	ldr	r0, [r7, #24]
 8020558:	f000 fc90 	bl	8020e7c <xQueueGenericSendFromISR>
 802055c:	4603      	mov	r3, r0
 802055e:	2b01      	cmp	r3, #1
 8020560:	d003      	beq.n	802056a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8020562:	f06f 0302 	mvn.w	r3, #2
 8020566:	61fb      	str	r3, [r7, #28]
 8020568:	e028      	b.n	80205bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 802056a:	693b      	ldr	r3, [r7, #16]
 802056c:	2b00      	cmp	r3, #0
 802056e:	d025      	beq.n	80205bc <osMessageQueuePut+0xb0>
 8020570:	4b15      	ldr	r3, [pc, #84]	; (80205c8 <osMessageQueuePut+0xbc>)
 8020572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020576:	601a      	str	r2, [r3, #0]
 8020578:	f3bf 8f4f 	dsb	sy
 802057c:	f3bf 8f6f 	isb	sy
 8020580:	e01c      	b.n	80205bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8020582:	69bb      	ldr	r3, [r7, #24]
 8020584:	2b00      	cmp	r3, #0
 8020586:	d002      	beq.n	802058e <osMessageQueuePut+0x82>
 8020588:	68bb      	ldr	r3, [r7, #8]
 802058a:	2b00      	cmp	r3, #0
 802058c:	d103      	bne.n	8020596 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 802058e:	f06f 0303 	mvn.w	r3, #3
 8020592:	61fb      	str	r3, [r7, #28]
 8020594:	e012      	b.n	80205bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8020596:	2300      	movs	r3, #0
 8020598:	683a      	ldr	r2, [r7, #0]
 802059a:	68b9      	ldr	r1, [r7, #8]
 802059c:	69b8      	ldr	r0, [r7, #24]
 802059e:	f000 fb6f 	bl	8020c80 <xQueueGenericSend>
 80205a2:	4603      	mov	r3, r0
 80205a4:	2b01      	cmp	r3, #1
 80205a6:	d009      	beq.n	80205bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80205a8:	683b      	ldr	r3, [r7, #0]
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d003      	beq.n	80205b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80205ae:	f06f 0301 	mvn.w	r3, #1
 80205b2:	61fb      	str	r3, [r7, #28]
 80205b4:	e002      	b.n	80205bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80205b6:	f06f 0302 	mvn.w	r3, #2
 80205ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80205bc:	69fb      	ldr	r3, [r7, #28]
}
 80205be:	4618      	mov	r0, r3
 80205c0:	3720      	adds	r7, #32
 80205c2:	46bd      	mov	sp, r7
 80205c4:	bd80      	pop	{r7, pc}
 80205c6:	bf00      	nop
 80205c8:	e000ed04 	.word	0xe000ed04

080205cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80205cc:	b580      	push	{r7, lr}
 80205ce:	b088      	sub	sp, #32
 80205d0:	af00      	add	r7, sp, #0
 80205d2:	60f8      	str	r0, [r7, #12]
 80205d4:	60b9      	str	r1, [r7, #8]
 80205d6:	607a      	str	r2, [r7, #4]
 80205d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80205da:	68fb      	ldr	r3, [r7, #12]
 80205dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80205de:	2300      	movs	r3, #0
 80205e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80205e2:	f3ef 8305 	mrs	r3, IPSR
 80205e6:	617b      	str	r3, [r7, #20]
  return(result);
 80205e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d028      	beq.n	8020640 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80205ee:	69bb      	ldr	r3, [r7, #24]
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d005      	beq.n	8020600 <osMessageQueueGet+0x34>
 80205f4:	68bb      	ldr	r3, [r7, #8]
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	d002      	beq.n	8020600 <osMessageQueueGet+0x34>
 80205fa:	683b      	ldr	r3, [r7, #0]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d003      	beq.n	8020608 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8020600:	f06f 0303 	mvn.w	r3, #3
 8020604:	61fb      	str	r3, [r7, #28]
 8020606:	e037      	b.n	8020678 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8020608:	2300      	movs	r3, #0
 802060a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 802060c:	f107 0310 	add.w	r3, r7, #16
 8020610:	461a      	mov	r2, r3
 8020612:	68b9      	ldr	r1, [r7, #8]
 8020614:	69b8      	ldr	r0, [r7, #24]
 8020616:	f000 ff9b 	bl	8021550 <xQueueReceiveFromISR>
 802061a:	4603      	mov	r3, r0
 802061c:	2b01      	cmp	r3, #1
 802061e:	d003      	beq.n	8020628 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8020620:	f06f 0302 	mvn.w	r3, #2
 8020624:	61fb      	str	r3, [r7, #28]
 8020626:	e027      	b.n	8020678 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8020628:	693b      	ldr	r3, [r7, #16]
 802062a:	2b00      	cmp	r3, #0
 802062c:	d024      	beq.n	8020678 <osMessageQueueGet+0xac>
 802062e:	4b15      	ldr	r3, [pc, #84]	; (8020684 <osMessageQueueGet+0xb8>)
 8020630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020634:	601a      	str	r2, [r3, #0]
 8020636:	f3bf 8f4f 	dsb	sy
 802063a:	f3bf 8f6f 	isb	sy
 802063e:	e01b      	b.n	8020678 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8020640:	69bb      	ldr	r3, [r7, #24]
 8020642:	2b00      	cmp	r3, #0
 8020644:	d002      	beq.n	802064c <osMessageQueueGet+0x80>
 8020646:	68bb      	ldr	r3, [r7, #8]
 8020648:	2b00      	cmp	r3, #0
 802064a:	d103      	bne.n	8020654 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 802064c:	f06f 0303 	mvn.w	r3, #3
 8020650:	61fb      	str	r3, [r7, #28]
 8020652:	e011      	b.n	8020678 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8020654:	683a      	ldr	r2, [r7, #0]
 8020656:	68b9      	ldr	r1, [r7, #8]
 8020658:	69b8      	ldr	r0, [r7, #24]
 802065a:	f000 fcab 	bl	8020fb4 <xQueueReceive>
 802065e:	4603      	mov	r3, r0
 8020660:	2b01      	cmp	r3, #1
 8020662:	d009      	beq.n	8020678 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8020664:	683b      	ldr	r3, [r7, #0]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d003      	beq.n	8020672 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 802066a:	f06f 0301 	mvn.w	r3, #1
 802066e:	61fb      	str	r3, [r7, #28]
 8020670:	e002      	b.n	8020678 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8020672:	f06f 0302 	mvn.w	r3, #2
 8020676:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020678:	69fb      	ldr	r3, [r7, #28]
}
 802067a:	4618      	mov	r0, r3
 802067c:	3720      	adds	r7, #32
 802067e:	46bd      	mov	sp, r7
 8020680:	bd80      	pop	{r7, pc}
 8020682:	bf00      	nop
 8020684:	e000ed04 	.word	0xe000ed04

08020688 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8020688:	b580      	push	{r7, lr}
 802068a:	b086      	sub	sp, #24
 802068c:	af00      	add	r7, sp, #0
 802068e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8020694:	693b      	ldr	r3, [r7, #16]
 8020696:	2b00      	cmp	r3, #0
 8020698:	d102      	bne.n	80206a0 <osMessageQueueGetCount+0x18>
    count = 0U;
 802069a:	2300      	movs	r3, #0
 802069c:	617b      	str	r3, [r7, #20]
 802069e:	e00e      	b.n	80206be <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80206a0:	f3ef 8305 	mrs	r3, IPSR
 80206a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80206a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d004      	beq.n	80206b6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80206ac:	6938      	ldr	r0, [r7, #16]
 80206ae:	f000 ffed 	bl	802168c <uxQueueMessagesWaitingFromISR>
 80206b2:	6178      	str	r0, [r7, #20]
 80206b4:	e003      	b.n	80206be <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80206b6:	6938      	ldr	r0, [r7, #16]
 80206b8:	f000 ffca 	bl	8021650 <uxQueueMessagesWaiting>
 80206bc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80206be:	697b      	ldr	r3, [r7, #20]
}
 80206c0:	4618      	mov	r0, r3
 80206c2:	3718      	adds	r7, #24
 80206c4:	46bd      	mov	sp, r7
 80206c6:	bd80      	pop	{r7, pc}

080206c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80206c8:	b480      	push	{r7}
 80206ca:	b085      	sub	sp, #20
 80206cc:	af00      	add	r7, sp, #0
 80206ce:	60f8      	str	r0, [r7, #12]
 80206d0:	60b9      	str	r1, [r7, #8]
 80206d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	4a07      	ldr	r2, [pc, #28]	; (80206f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80206d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80206da:	68bb      	ldr	r3, [r7, #8]
 80206dc:	4a06      	ldr	r2, [pc, #24]	; (80206f8 <vApplicationGetIdleTaskMemory+0x30>)
 80206de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	2280      	movs	r2, #128	; 0x80
 80206e4:	601a      	str	r2, [r3, #0]
}
 80206e6:	bf00      	nop
 80206e8:	3714      	adds	r7, #20
 80206ea:	46bd      	mov	sp, r7
 80206ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206f0:	4770      	bx	lr
 80206f2:	bf00      	nop
 80206f4:	200015b0 	.word	0x200015b0
 80206f8:	2000165c 	.word	0x2000165c

080206fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80206fc:	b480      	push	{r7}
 80206fe:	b085      	sub	sp, #20
 8020700:	af00      	add	r7, sp, #0
 8020702:	60f8      	str	r0, [r7, #12]
 8020704:	60b9      	str	r1, [r7, #8]
 8020706:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8020708:	68fb      	ldr	r3, [r7, #12]
 802070a:	4a07      	ldr	r2, [pc, #28]	; (8020728 <vApplicationGetTimerTaskMemory+0x2c>)
 802070c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 802070e:	68bb      	ldr	r3, [r7, #8]
 8020710:	4a06      	ldr	r2, [pc, #24]	; (802072c <vApplicationGetTimerTaskMemory+0x30>)
 8020712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	f44f 7280 	mov.w	r2, #256	; 0x100
 802071a:	601a      	str	r2, [r3, #0]
}
 802071c:	bf00      	nop
 802071e:	3714      	adds	r7, #20
 8020720:	46bd      	mov	sp, r7
 8020722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020726:	4770      	bx	lr
 8020728:	2000185c 	.word	0x2000185c
 802072c:	20001908 	.word	0x20001908

08020730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8020730:	b480      	push	{r7}
 8020732:	b083      	sub	sp, #12
 8020734:	af00      	add	r7, sp, #0
 8020736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	f103 0208 	add.w	r2, r3, #8
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	f04f 32ff 	mov.w	r2, #4294967295
 8020748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	f103 0208 	add.w	r2, r3, #8
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8020754:	687b      	ldr	r3, [r7, #4]
 8020756:	f103 0208 	add.w	r2, r3, #8
 802075a:	687b      	ldr	r3, [r7, #4]
 802075c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802075e:	687b      	ldr	r3, [r7, #4]
 8020760:	2200      	movs	r2, #0
 8020762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8020764:	bf00      	nop
 8020766:	370c      	adds	r7, #12
 8020768:	46bd      	mov	sp, r7
 802076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802076e:	4770      	bx	lr

08020770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8020770:	b480      	push	{r7}
 8020772:	b083      	sub	sp, #12
 8020774:	af00      	add	r7, sp, #0
 8020776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	2200      	movs	r2, #0
 802077c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802077e:	bf00      	nop
 8020780:	370c      	adds	r7, #12
 8020782:	46bd      	mov	sp, r7
 8020784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020788:	4770      	bx	lr

0802078a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802078a:	b480      	push	{r7}
 802078c:	b085      	sub	sp, #20
 802078e:	af00      	add	r7, sp, #0
 8020790:	6078      	str	r0, [r7, #4]
 8020792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	685b      	ldr	r3, [r3, #4]
 8020798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802079a:	683b      	ldr	r3, [r7, #0]
 802079c:	68fa      	ldr	r2, [r7, #12]
 802079e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80207a0:	68fb      	ldr	r3, [r7, #12]
 80207a2:	689a      	ldr	r2, [r3, #8]
 80207a4:	683b      	ldr	r3, [r7, #0]
 80207a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80207a8:	68fb      	ldr	r3, [r7, #12]
 80207aa:	689b      	ldr	r3, [r3, #8]
 80207ac:	683a      	ldr	r2, [r7, #0]
 80207ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80207b0:	68fb      	ldr	r3, [r7, #12]
 80207b2:	683a      	ldr	r2, [r7, #0]
 80207b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80207b6:	683b      	ldr	r3, [r7, #0]
 80207b8:	687a      	ldr	r2, [r7, #4]
 80207ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80207bc:	687b      	ldr	r3, [r7, #4]
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	1c5a      	adds	r2, r3, #1
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	601a      	str	r2, [r3, #0]
}
 80207c6:	bf00      	nop
 80207c8:	3714      	adds	r7, #20
 80207ca:	46bd      	mov	sp, r7
 80207cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d0:	4770      	bx	lr

080207d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80207d2:	b480      	push	{r7}
 80207d4:	b085      	sub	sp, #20
 80207d6:	af00      	add	r7, sp, #0
 80207d8:	6078      	str	r0, [r7, #4]
 80207da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80207dc:	683b      	ldr	r3, [r7, #0]
 80207de:	681b      	ldr	r3, [r3, #0]
 80207e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80207e2:	68bb      	ldr	r3, [r7, #8]
 80207e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80207e8:	d103      	bne.n	80207f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	691b      	ldr	r3, [r3, #16]
 80207ee:	60fb      	str	r3, [r7, #12]
 80207f0:	e00c      	b.n	802080c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80207f2:	687b      	ldr	r3, [r7, #4]
 80207f4:	3308      	adds	r3, #8
 80207f6:	60fb      	str	r3, [r7, #12]
 80207f8:	e002      	b.n	8020800 <vListInsert+0x2e>
 80207fa:	68fb      	ldr	r3, [r7, #12]
 80207fc:	685b      	ldr	r3, [r3, #4]
 80207fe:	60fb      	str	r3, [r7, #12]
 8020800:	68fb      	ldr	r3, [r7, #12]
 8020802:	685b      	ldr	r3, [r3, #4]
 8020804:	681b      	ldr	r3, [r3, #0]
 8020806:	68ba      	ldr	r2, [r7, #8]
 8020808:	429a      	cmp	r2, r3
 802080a:	d2f6      	bcs.n	80207fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 802080c:	68fb      	ldr	r3, [r7, #12]
 802080e:	685a      	ldr	r2, [r3, #4]
 8020810:	683b      	ldr	r3, [r7, #0]
 8020812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8020814:	683b      	ldr	r3, [r7, #0]
 8020816:	685b      	ldr	r3, [r3, #4]
 8020818:	683a      	ldr	r2, [r7, #0]
 802081a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 802081c:	683b      	ldr	r3, [r7, #0]
 802081e:	68fa      	ldr	r2, [r7, #12]
 8020820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8020822:	68fb      	ldr	r3, [r7, #12]
 8020824:	683a      	ldr	r2, [r7, #0]
 8020826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8020828:	683b      	ldr	r3, [r7, #0]
 802082a:	687a      	ldr	r2, [r7, #4]
 802082c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	1c5a      	adds	r2, r3, #1
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	601a      	str	r2, [r3, #0]
}
 8020838:	bf00      	nop
 802083a:	3714      	adds	r7, #20
 802083c:	46bd      	mov	sp, r7
 802083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020842:	4770      	bx	lr

08020844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8020844:	b480      	push	{r7}
 8020846:	b085      	sub	sp, #20
 8020848:	af00      	add	r7, sp, #0
 802084a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	691b      	ldr	r3, [r3, #16]
 8020850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8020852:	687b      	ldr	r3, [r7, #4]
 8020854:	685b      	ldr	r3, [r3, #4]
 8020856:	687a      	ldr	r2, [r7, #4]
 8020858:	6892      	ldr	r2, [r2, #8]
 802085a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	689b      	ldr	r3, [r3, #8]
 8020860:	687a      	ldr	r2, [r7, #4]
 8020862:	6852      	ldr	r2, [r2, #4]
 8020864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8020866:	68fb      	ldr	r3, [r7, #12]
 8020868:	685b      	ldr	r3, [r3, #4]
 802086a:	687a      	ldr	r2, [r7, #4]
 802086c:	429a      	cmp	r2, r3
 802086e:	d103      	bne.n	8020878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	689a      	ldr	r2, [r3, #8]
 8020874:	68fb      	ldr	r3, [r7, #12]
 8020876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	2200      	movs	r2, #0
 802087c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 802087e:	68fb      	ldr	r3, [r7, #12]
 8020880:	681b      	ldr	r3, [r3, #0]
 8020882:	1e5a      	subs	r2, r3, #1
 8020884:	68fb      	ldr	r3, [r7, #12]
 8020886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	681b      	ldr	r3, [r3, #0]
}
 802088c:	4618      	mov	r0, r3
 802088e:	3714      	adds	r7, #20
 8020890:	46bd      	mov	sp, r7
 8020892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020896:	4770      	bx	lr

08020898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020898:	b580      	push	{r7, lr}
 802089a:	b084      	sub	sp, #16
 802089c:	af00      	add	r7, sp, #0
 802089e:	6078      	str	r0, [r7, #4]
 80208a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80208a6:	68fb      	ldr	r3, [r7, #12]
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d10a      	bne.n	80208c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80208ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80208b0:	f383 8811 	msr	BASEPRI, r3
 80208b4:	f3bf 8f6f 	isb	sy
 80208b8:	f3bf 8f4f 	dsb	sy
 80208bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80208be:	bf00      	nop
 80208c0:	e7fe      	b.n	80208c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80208c2:	f002 fd8f 	bl	80233e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	681a      	ldr	r2, [r3, #0]
 80208ca:	68fb      	ldr	r3, [r7, #12]
 80208cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80208ce:	68f9      	ldr	r1, [r7, #12]
 80208d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80208d2:	fb01 f303 	mul.w	r3, r1, r3
 80208d6:	441a      	add	r2, r3
 80208d8:	68fb      	ldr	r3, [r7, #12]
 80208da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80208dc:	68fb      	ldr	r3, [r7, #12]
 80208de:	2200      	movs	r2, #0
 80208e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80208e2:	68fb      	ldr	r3, [r7, #12]
 80208e4:	681a      	ldr	r2, [r3, #0]
 80208e6:	68fb      	ldr	r3, [r7, #12]
 80208e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80208ea:	68fb      	ldr	r3, [r7, #12]
 80208ec:	681a      	ldr	r2, [r3, #0]
 80208ee:	68fb      	ldr	r3, [r7, #12]
 80208f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80208f2:	3b01      	subs	r3, #1
 80208f4:	68f9      	ldr	r1, [r7, #12]
 80208f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80208f8:	fb01 f303 	mul.w	r3, r1, r3
 80208fc:	441a      	add	r2, r3
 80208fe:	68fb      	ldr	r3, [r7, #12]
 8020900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8020902:	68fb      	ldr	r3, [r7, #12]
 8020904:	22ff      	movs	r2, #255	; 0xff
 8020906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 802090a:	68fb      	ldr	r3, [r7, #12]
 802090c:	22ff      	movs	r2, #255	; 0xff
 802090e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8020912:	683b      	ldr	r3, [r7, #0]
 8020914:	2b00      	cmp	r3, #0
 8020916:	d114      	bne.n	8020942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	691b      	ldr	r3, [r3, #16]
 802091c:	2b00      	cmp	r3, #0
 802091e:	d01a      	beq.n	8020956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020920:	68fb      	ldr	r3, [r7, #12]
 8020922:	3310      	adds	r3, #16
 8020924:	4618      	mov	r0, r3
 8020926:	f001 fcfd 	bl	8022324 <xTaskRemoveFromEventList>
 802092a:	4603      	mov	r3, r0
 802092c:	2b00      	cmp	r3, #0
 802092e:	d012      	beq.n	8020956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8020930:	4b0c      	ldr	r3, [pc, #48]	; (8020964 <xQueueGenericReset+0xcc>)
 8020932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020936:	601a      	str	r2, [r3, #0]
 8020938:	f3bf 8f4f 	dsb	sy
 802093c:	f3bf 8f6f 	isb	sy
 8020940:	e009      	b.n	8020956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8020942:	68fb      	ldr	r3, [r7, #12]
 8020944:	3310      	adds	r3, #16
 8020946:	4618      	mov	r0, r3
 8020948:	f7ff fef2 	bl	8020730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	3324      	adds	r3, #36	; 0x24
 8020950:	4618      	mov	r0, r3
 8020952:	f7ff feed 	bl	8020730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8020956:	f002 fd75 	bl	8023444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 802095a:	2301      	movs	r3, #1
}
 802095c:	4618      	mov	r0, r3
 802095e:	3710      	adds	r7, #16
 8020960:	46bd      	mov	sp, r7
 8020962:	bd80      	pop	{r7, pc}
 8020964:	e000ed04 	.word	0xe000ed04

08020968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8020968:	b580      	push	{r7, lr}
 802096a:	b08e      	sub	sp, #56	; 0x38
 802096c:	af02      	add	r7, sp, #8
 802096e:	60f8      	str	r0, [r7, #12]
 8020970:	60b9      	str	r1, [r7, #8]
 8020972:	607a      	str	r2, [r7, #4]
 8020974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020976:	68fb      	ldr	r3, [r7, #12]
 8020978:	2b00      	cmp	r3, #0
 802097a:	d10a      	bne.n	8020992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 802097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020980:	f383 8811 	msr	BASEPRI, r3
 8020984:	f3bf 8f6f 	isb	sy
 8020988:	f3bf 8f4f 	dsb	sy
 802098c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802098e:	bf00      	nop
 8020990:	e7fe      	b.n	8020990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8020992:	683b      	ldr	r3, [r7, #0]
 8020994:	2b00      	cmp	r3, #0
 8020996:	d10a      	bne.n	80209ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8020998:	f04f 0350 	mov.w	r3, #80	; 0x50
 802099c:	f383 8811 	msr	BASEPRI, r3
 80209a0:	f3bf 8f6f 	isb	sy
 80209a4:	f3bf 8f4f 	dsb	sy
 80209a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80209aa:	bf00      	nop
 80209ac:	e7fe      	b.n	80209ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	d002      	beq.n	80209ba <xQueueGenericCreateStatic+0x52>
 80209b4:	68bb      	ldr	r3, [r7, #8]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d001      	beq.n	80209be <xQueueGenericCreateStatic+0x56>
 80209ba:	2301      	movs	r3, #1
 80209bc:	e000      	b.n	80209c0 <xQueueGenericCreateStatic+0x58>
 80209be:	2300      	movs	r3, #0
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d10a      	bne.n	80209da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80209c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80209c8:	f383 8811 	msr	BASEPRI, r3
 80209cc:	f3bf 8f6f 	isb	sy
 80209d0:	f3bf 8f4f 	dsb	sy
 80209d4:	623b      	str	r3, [r7, #32]
}
 80209d6:	bf00      	nop
 80209d8:	e7fe      	b.n	80209d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d102      	bne.n	80209e6 <xQueueGenericCreateStatic+0x7e>
 80209e0:	68bb      	ldr	r3, [r7, #8]
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d101      	bne.n	80209ea <xQueueGenericCreateStatic+0x82>
 80209e6:	2301      	movs	r3, #1
 80209e8:	e000      	b.n	80209ec <xQueueGenericCreateStatic+0x84>
 80209ea:	2300      	movs	r3, #0
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	d10a      	bne.n	8020a06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80209f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80209f4:	f383 8811 	msr	BASEPRI, r3
 80209f8:	f3bf 8f6f 	isb	sy
 80209fc:	f3bf 8f4f 	dsb	sy
 8020a00:	61fb      	str	r3, [r7, #28]
}
 8020a02:	bf00      	nop
 8020a04:	e7fe      	b.n	8020a04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8020a06:	2350      	movs	r3, #80	; 0x50
 8020a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8020a0a:	697b      	ldr	r3, [r7, #20]
 8020a0c:	2b50      	cmp	r3, #80	; 0x50
 8020a0e:	d00a      	beq.n	8020a26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8020a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a14:	f383 8811 	msr	BASEPRI, r3
 8020a18:	f3bf 8f6f 	isb	sy
 8020a1c:	f3bf 8f4f 	dsb	sy
 8020a20:	61bb      	str	r3, [r7, #24]
}
 8020a22:	bf00      	nop
 8020a24:	e7fe      	b.n	8020a24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8020a26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020a28:	683b      	ldr	r3, [r7, #0]
 8020a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8020a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d00d      	beq.n	8020a4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8020a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a34:	2201      	movs	r2, #1
 8020a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020a3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8020a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a40:	9300      	str	r3, [sp, #0]
 8020a42:	4613      	mov	r3, r2
 8020a44:	687a      	ldr	r2, [r7, #4]
 8020a46:	68b9      	ldr	r1, [r7, #8]
 8020a48:	68f8      	ldr	r0, [r7, #12]
 8020a4a:	f000 f83f 	bl	8020acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8020a50:	4618      	mov	r0, r3
 8020a52:	3730      	adds	r7, #48	; 0x30
 8020a54:	46bd      	mov	sp, r7
 8020a56:	bd80      	pop	{r7, pc}

08020a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	b08a      	sub	sp, #40	; 0x28
 8020a5c:	af02      	add	r7, sp, #8
 8020a5e:	60f8      	str	r0, [r7, #12]
 8020a60:	60b9      	str	r1, [r7, #8]
 8020a62:	4613      	mov	r3, r2
 8020a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020a66:	68fb      	ldr	r3, [r7, #12]
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	d10a      	bne.n	8020a82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8020a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a70:	f383 8811 	msr	BASEPRI, r3
 8020a74:	f3bf 8f6f 	isb	sy
 8020a78:	f3bf 8f4f 	dsb	sy
 8020a7c:	613b      	str	r3, [r7, #16]
}
 8020a7e:	bf00      	nop
 8020a80:	e7fe      	b.n	8020a80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020a82:	68fb      	ldr	r3, [r7, #12]
 8020a84:	68ba      	ldr	r2, [r7, #8]
 8020a86:	fb02 f303 	mul.w	r3, r2, r3
 8020a8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8020a8c:	69fb      	ldr	r3, [r7, #28]
 8020a8e:	3350      	adds	r3, #80	; 0x50
 8020a90:	4618      	mov	r0, r3
 8020a92:	f002 fdc9 	bl	8023628 <pvPortMalloc>
 8020a96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020a98:	69bb      	ldr	r3, [r7, #24]
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d011      	beq.n	8020ac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8020a9e:	69bb      	ldr	r3, [r7, #24]
 8020aa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020aa2:	697b      	ldr	r3, [r7, #20]
 8020aa4:	3350      	adds	r3, #80	; 0x50
 8020aa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020aa8:	69bb      	ldr	r3, [r7, #24]
 8020aaa:	2200      	movs	r2, #0
 8020aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020ab0:	79fa      	ldrb	r2, [r7, #7]
 8020ab2:	69bb      	ldr	r3, [r7, #24]
 8020ab4:	9300      	str	r3, [sp, #0]
 8020ab6:	4613      	mov	r3, r2
 8020ab8:	697a      	ldr	r2, [r7, #20]
 8020aba:	68b9      	ldr	r1, [r7, #8]
 8020abc:	68f8      	ldr	r0, [r7, #12]
 8020abe:	f000 f805 	bl	8020acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8020ac4:	4618      	mov	r0, r3
 8020ac6:	3720      	adds	r7, #32
 8020ac8:	46bd      	mov	sp, r7
 8020aca:	bd80      	pop	{r7, pc}

08020acc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8020acc:	b580      	push	{r7, lr}
 8020ace:	b084      	sub	sp, #16
 8020ad0:	af00      	add	r7, sp, #0
 8020ad2:	60f8      	str	r0, [r7, #12]
 8020ad4:	60b9      	str	r1, [r7, #8]
 8020ad6:	607a      	str	r2, [r7, #4]
 8020ad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8020ada:	68bb      	ldr	r3, [r7, #8]
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d103      	bne.n	8020ae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8020ae0:	69bb      	ldr	r3, [r7, #24]
 8020ae2:	69ba      	ldr	r2, [r7, #24]
 8020ae4:	601a      	str	r2, [r3, #0]
 8020ae6:	e002      	b.n	8020aee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020ae8:	69bb      	ldr	r3, [r7, #24]
 8020aea:	687a      	ldr	r2, [r7, #4]
 8020aec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8020aee:	69bb      	ldr	r3, [r7, #24]
 8020af0:	68fa      	ldr	r2, [r7, #12]
 8020af2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8020af4:	69bb      	ldr	r3, [r7, #24]
 8020af6:	68ba      	ldr	r2, [r7, #8]
 8020af8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8020afa:	2101      	movs	r1, #1
 8020afc:	69b8      	ldr	r0, [r7, #24]
 8020afe:	f7ff fecb 	bl	8020898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8020b02:	69bb      	ldr	r3, [r7, #24]
 8020b04:	78fa      	ldrb	r2, [r7, #3]
 8020b06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8020b0a:	bf00      	nop
 8020b0c:	3710      	adds	r7, #16
 8020b0e:	46bd      	mov	sp, r7
 8020b10:	bd80      	pop	{r7, pc}

08020b12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8020b12:	b580      	push	{r7, lr}
 8020b14:	b082      	sub	sp, #8
 8020b16:	af00      	add	r7, sp, #0
 8020b18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d00e      	beq.n	8020b3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	2200      	movs	r2, #0
 8020b24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	2200      	movs	r2, #0
 8020b2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	2200      	movs	r2, #0
 8020b30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8020b32:	2300      	movs	r3, #0
 8020b34:	2200      	movs	r2, #0
 8020b36:	2100      	movs	r1, #0
 8020b38:	6878      	ldr	r0, [r7, #4]
 8020b3a:	f000 f8a1 	bl	8020c80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8020b3e:	bf00      	nop
 8020b40:	3708      	adds	r7, #8
 8020b42:	46bd      	mov	sp, r7
 8020b44:	bd80      	pop	{r7, pc}

08020b46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8020b46:	b580      	push	{r7, lr}
 8020b48:	b086      	sub	sp, #24
 8020b4a:	af00      	add	r7, sp, #0
 8020b4c:	4603      	mov	r3, r0
 8020b4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020b50:	2301      	movs	r3, #1
 8020b52:	617b      	str	r3, [r7, #20]
 8020b54:	2300      	movs	r3, #0
 8020b56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8020b58:	79fb      	ldrb	r3, [r7, #7]
 8020b5a:	461a      	mov	r2, r3
 8020b5c:	6939      	ldr	r1, [r7, #16]
 8020b5e:	6978      	ldr	r0, [r7, #20]
 8020b60:	f7ff ff7a 	bl	8020a58 <xQueueGenericCreate>
 8020b64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020b66:	68f8      	ldr	r0, [r7, #12]
 8020b68:	f7ff ffd3 	bl	8020b12 <prvInitialiseMutex>

		return xNewQueue;
 8020b6c:	68fb      	ldr	r3, [r7, #12]
	}
 8020b6e:	4618      	mov	r0, r3
 8020b70:	3718      	adds	r7, #24
 8020b72:	46bd      	mov	sp, r7
 8020b74:	bd80      	pop	{r7, pc}

08020b76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8020b76:	b580      	push	{r7, lr}
 8020b78:	b088      	sub	sp, #32
 8020b7a:	af02      	add	r7, sp, #8
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	6039      	str	r1, [r7, #0]
 8020b80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020b82:	2301      	movs	r3, #1
 8020b84:	617b      	str	r3, [r7, #20]
 8020b86:	2300      	movs	r3, #0
 8020b88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8020b8a:	79fb      	ldrb	r3, [r7, #7]
 8020b8c:	9300      	str	r3, [sp, #0]
 8020b8e:	683b      	ldr	r3, [r7, #0]
 8020b90:	2200      	movs	r2, #0
 8020b92:	6939      	ldr	r1, [r7, #16]
 8020b94:	6978      	ldr	r0, [r7, #20]
 8020b96:	f7ff fee7 	bl	8020968 <xQueueGenericCreateStatic>
 8020b9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020b9c:	68f8      	ldr	r0, [r7, #12]
 8020b9e:	f7ff ffb8 	bl	8020b12 <prvInitialiseMutex>

		return xNewQueue;
 8020ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8020ba4:	4618      	mov	r0, r3
 8020ba6:	3718      	adds	r7, #24
 8020ba8:	46bd      	mov	sp, r7
 8020baa:	bd80      	pop	{r7, pc}

08020bac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8020bac:	b590      	push	{r4, r7, lr}
 8020bae:	b087      	sub	sp, #28
 8020bb0:	af00      	add	r7, sp, #0
 8020bb2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020bb8:	693b      	ldr	r3, [r7, #16]
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	d10a      	bne.n	8020bd4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8020bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020bc2:	f383 8811 	msr	BASEPRI, r3
 8020bc6:	f3bf 8f6f 	isb	sy
 8020bca:	f3bf 8f4f 	dsb	sy
 8020bce:	60fb      	str	r3, [r7, #12]
}
 8020bd0:	bf00      	nop
 8020bd2:	e7fe      	b.n	8020bd2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020bd4:	693b      	ldr	r3, [r7, #16]
 8020bd6:	689c      	ldr	r4, [r3, #8]
 8020bd8:	f001 fd9e 	bl	8022718 <xTaskGetCurrentTaskHandle>
 8020bdc:	4603      	mov	r3, r0
 8020bde:	429c      	cmp	r4, r3
 8020be0:	d111      	bne.n	8020c06 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8020be2:	693b      	ldr	r3, [r7, #16]
 8020be4:	68db      	ldr	r3, [r3, #12]
 8020be6:	1e5a      	subs	r2, r3, #1
 8020be8:	693b      	ldr	r3, [r7, #16]
 8020bea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8020bec:	693b      	ldr	r3, [r7, #16]
 8020bee:	68db      	ldr	r3, [r3, #12]
 8020bf0:	2b00      	cmp	r3, #0
 8020bf2:	d105      	bne.n	8020c00 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8020bf4:	2300      	movs	r3, #0
 8020bf6:	2200      	movs	r2, #0
 8020bf8:	2100      	movs	r1, #0
 8020bfa:	6938      	ldr	r0, [r7, #16]
 8020bfc:	f000 f840 	bl	8020c80 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020c00:	2301      	movs	r3, #1
 8020c02:	617b      	str	r3, [r7, #20]
 8020c04:	e001      	b.n	8020c0a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8020c06:	2300      	movs	r3, #0
 8020c08:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8020c0a:	697b      	ldr	r3, [r7, #20]
	}
 8020c0c:	4618      	mov	r0, r3
 8020c0e:	371c      	adds	r7, #28
 8020c10:	46bd      	mov	sp, r7
 8020c12:	bd90      	pop	{r4, r7, pc}

08020c14 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8020c14:	b590      	push	{r4, r7, lr}
 8020c16:	b087      	sub	sp, #28
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
 8020c1c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020c22:	693b      	ldr	r3, [r7, #16]
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d10a      	bne.n	8020c3e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8020c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c2c:	f383 8811 	msr	BASEPRI, r3
 8020c30:	f3bf 8f6f 	isb	sy
 8020c34:	f3bf 8f4f 	dsb	sy
 8020c38:	60fb      	str	r3, [r7, #12]
}
 8020c3a:	bf00      	nop
 8020c3c:	e7fe      	b.n	8020c3c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020c3e:	693b      	ldr	r3, [r7, #16]
 8020c40:	689c      	ldr	r4, [r3, #8]
 8020c42:	f001 fd69 	bl	8022718 <xTaskGetCurrentTaskHandle>
 8020c46:	4603      	mov	r3, r0
 8020c48:	429c      	cmp	r4, r3
 8020c4a:	d107      	bne.n	8020c5c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020c4c:	693b      	ldr	r3, [r7, #16]
 8020c4e:	68db      	ldr	r3, [r3, #12]
 8020c50:	1c5a      	adds	r2, r3, #1
 8020c52:	693b      	ldr	r3, [r7, #16]
 8020c54:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8020c56:	2301      	movs	r3, #1
 8020c58:	617b      	str	r3, [r7, #20]
 8020c5a:	e00c      	b.n	8020c76 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020c5c:	6839      	ldr	r1, [r7, #0]
 8020c5e:	6938      	ldr	r0, [r7, #16]
 8020c60:	f000 fa88 	bl	8021174 <xQueueSemaphoreTake>
 8020c64:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8020c66:	697b      	ldr	r3, [r7, #20]
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	d004      	beq.n	8020c76 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020c6c:	693b      	ldr	r3, [r7, #16]
 8020c6e:	68db      	ldr	r3, [r3, #12]
 8020c70:	1c5a      	adds	r2, r3, #1
 8020c72:	693b      	ldr	r3, [r7, #16]
 8020c74:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8020c76:	697b      	ldr	r3, [r7, #20]
	}
 8020c78:	4618      	mov	r0, r3
 8020c7a:	371c      	adds	r7, #28
 8020c7c:	46bd      	mov	sp, r7
 8020c7e:	bd90      	pop	{r4, r7, pc}

08020c80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020c80:	b580      	push	{r7, lr}
 8020c82:	b08e      	sub	sp, #56	; 0x38
 8020c84:	af00      	add	r7, sp, #0
 8020c86:	60f8      	str	r0, [r7, #12]
 8020c88:	60b9      	str	r1, [r7, #8]
 8020c8a:	607a      	str	r2, [r7, #4]
 8020c8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020c8e:	2300      	movs	r3, #0
 8020c90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020c92:	68fb      	ldr	r3, [r7, #12]
 8020c94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d10a      	bne.n	8020cb2 <xQueueGenericSend+0x32>
	__asm volatile
 8020c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ca0:	f383 8811 	msr	BASEPRI, r3
 8020ca4:	f3bf 8f6f 	isb	sy
 8020ca8:	f3bf 8f4f 	dsb	sy
 8020cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020cae:	bf00      	nop
 8020cb0:	e7fe      	b.n	8020cb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020cb2:	68bb      	ldr	r3, [r7, #8]
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d103      	bne.n	8020cc0 <xQueueGenericSend+0x40>
 8020cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d101      	bne.n	8020cc4 <xQueueGenericSend+0x44>
 8020cc0:	2301      	movs	r3, #1
 8020cc2:	e000      	b.n	8020cc6 <xQueueGenericSend+0x46>
 8020cc4:	2300      	movs	r3, #0
 8020cc6:	2b00      	cmp	r3, #0
 8020cc8:	d10a      	bne.n	8020ce0 <xQueueGenericSend+0x60>
	__asm volatile
 8020cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cce:	f383 8811 	msr	BASEPRI, r3
 8020cd2:	f3bf 8f6f 	isb	sy
 8020cd6:	f3bf 8f4f 	dsb	sy
 8020cda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020cdc:	bf00      	nop
 8020cde:	e7fe      	b.n	8020cde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020ce0:	683b      	ldr	r3, [r7, #0]
 8020ce2:	2b02      	cmp	r3, #2
 8020ce4:	d103      	bne.n	8020cee <xQueueGenericSend+0x6e>
 8020ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020cea:	2b01      	cmp	r3, #1
 8020cec:	d101      	bne.n	8020cf2 <xQueueGenericSend+0x72>
 8020cee:	2301      	movs	r3, #1
 8020cf0:	e000      	b.n	8020cf4 <xQueueGenericSend+0x74>
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	d10a      	bne.n	8020d0e <xQueueGenericSend+0x8e>
	__asm volatile
 8020cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cfc:	f383 8811 	msr	BASEPRI, r3
 8020d00:	f3bf 8f6f 	isb	sy
 8020d04:	f3bf 8f4f 	dsb	sy
 8020d08:	623b      	str	r3, [r7, #32]
}
 8020d0a:	bf00      	nop
 8020d0c:	e7fe      	b.n	8020d0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020d0e:	f001 fd13 	bl	8022738 <xTaskGetSchedulerState>
 8020d12:	4603      	mov	r3, r0
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d102      	bne.n	8020d1e <xQueueGenericSend+0x9e>
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	d101      	bne.n	8020d22 <xQueueGenericSend+0xa2>
 8020d1e:	2301      	movs	r3, #1
 8020d20:	e000      	b.n	8020d24 <xQueueGenericSend+0xa4>
 8020d22:	2300      	movs	r3, #0
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d10a      	bne.n	8020d3e <xQueueGenericSend+0xbe>
	__asm volatile
 8020d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d2c:	f383 8811 	msr	BASEPRI, r3
 8020d30:	f3bf 8f6f 	isb	sy
 8020d34:	f3bf 8f4f 	dsb	sy
 8020d38:	61fb      	str	r3, [r7, #28]
}
 8020d3a:	bf00      	nop
 8020d3c:	e7fe      	b.n	8020d3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020d3e:	f002 fb51 	bl	80233e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020d4a:	429a      	cmp	r2, r3
 8020d4c:	d302      	bcc.n	8020d54 <xQueueGenericSend+0xd4>
 8020d4e:	683b      	ldr	r3, [r7, #0]
 8020d50:	2b02      	cmp	r3, #2
 8020d52:	d129      	bne.n	8020da8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020d54:	683a      	ldr	r2, [r7, #0]
 8020d56:	68b9      	ldr	r1, [r7, #8]
 8020d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020d5a:	f000 fccd 	bl	80216f8 <prvCopyDataToQueue>
 8020d5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d010      	beq.n	8020d8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d6a:	3324      	adds	r3, #36	; 0x24
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f001 fad9 	bl	8022324 <xTaskRemoveFromEventList>
 8020d72:	4603      	mov	r3, r0
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	d013      	beq.n	8020da0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020d78:	4b3f      	ldr	r3, [pc, #252]	; (8020e78 <xQueueGenericSend+0x1f8>)
 8020d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020d7e:	601a      	str	r2, [r3, #0]
 8020d80:	f3bf 8f4f 	dsb	sy
 8020d84:	f3bf 8f6f 	isb	sy
 8020d88:	e00a      	b.n	8020da0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d007      	beq.n	8020da0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020d90:	4b39      	ldr	r3, [pc, #228]	; (8020e78 <xQueueGenericSend+0x1f8>)
 8020d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020d96:	601a      	str	r2, [r3, #0]
 8020d98:	f3bf 8f4f 	dsb	sy
 8020d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020da0:	f002 fb50 	bl	8023444 <vPortExitCritical>
				return pdPASS;
 8020da4:	2301      	movs	r3, #1
 8020da6:	e063      	b.n	8020e70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d103      	bne.n	8020db6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020dae:	f002 fb49 	bl	8023444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020db2:	2300      	movs	r3, #0
 8020db4:	e05c      	b.n	8020e70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d106      	bne.n	8020dca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020dbc:	f107 0314 	add.w	r3, r7, #20
 8020dc0:	4618      	mov	r0, r3
 8020dc2:	f001 fb13 	bl	80223ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020dc6:	2301      	movs	r3, #1
 8020dc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020dca:	f002 fb3b 	bl	8023444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020dce:	f001 f863 	bl	8021e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020dd2:	f002 fb07 	bl	80233e4 <vPortEnterCritical>
 8020dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020ddc:	b25b      	sxtb	r3, r3
 8020dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020de2:	d103      	bne.n	8020dec <xQueueGenericSend+0x16c>
 8020de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020de6:	2200      	movs	r2, #0
 8020de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020df2:	b25b      	sxtb	r3, r3
 8020df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020df8:	d103      	bne.n	8020e02 <xQueueGenericSend+0x182>
 8020dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020dfc:	2200      	movs	r2, #0
 8020dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020e02:	f002 fb1f 	bl	8023444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020e06:	1d3a      	adds	r2, r7, #4
 8020e08:	f107 0314 	add.w	r3, r7, #20
 8020e0c:	4611      	mov	r1, r2
 8020e0e:	4618      	mov	r0, r3
 8020e10:	f001 fb02 	bl	8022418 <xTaskCheckForTimeOut>
 8020e14:	4603      	mov	r3, r0
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d124      	bne.n	8020e64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8020e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020e1c:	f000 fd64 	bl	80218e8 <prvIsQueueFull>
 8020e20:	4603      	mov	r3, r0
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d018      	beq.n	8020e58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8020e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e28:	3310      	adds	r3, #16
 8020e2a:	687a      	ldr	r2, [r7, #4]
 8020e2c:	4611      	mov	r1, r2
 8020e2e:	4618      	mov	r0, r3
 8020e30:	f001 fa28 	bl	8022284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8020e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020e36:	f000 fcef 	bl	8021818 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020e3a:	f001 f83b 	bl	8021eb4 <xTaskResumeAll>
 8020e3e:	4603      	mov	r3, r0
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	f47f af7c 	bne.w	8020d3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8020e46:	4b0c      	ldr	r3, [pc, #48]	; (8020e78 <xQueueGenericSend+0x1f8>)
 8020e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020e4c:	601a      	str	r2, [r3, #0]
 8020e4e:	f3bf 8f4f 	dsb	sy
 8020e52:	f3bf 8f6f 	isb	sy
 8020e56:	e772      	b.n	8020d3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8020e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020e5a:	f000 fcdd 	bl	8021818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020e5e:	f001 f829 	bl	8021eb4 <xTaskResumeAll>
 8020e62:	e76c      	b.n	8020d3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8020e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020e66:	f000 fcd7 	bl	8021818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020e6a:	f001 f823 	bl	8021eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8020e6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8020e70:	4618      	mov	r0, r3
 8020e72:	3738      	adds	r7, #56	; 0x38
 8020e74:	46bd      	mov	sp, r7
 8020e76:	bd80      	pop	{r7, pc}
 8020e78:	e000ed04 	.word	0xe000ed04

08020e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8020e7c:	b580      	push	{r7, lr}
 8020e7e:	b090      	sub	sp, #64	; 0x40
 8020e80:	af00      	add	r7, sp, #0
 8020e82:	60f8      	str	r0, [r7, #12]
 8020e84:	60b9      	str	r1, [r7, #8]
 8020e86:	607a      	str	r2, [r7, #4]
 8020e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8020e8a:	68fb      	ldr	r3, [r7, #12]
 8020e8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8020e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d10a      	bne.n	8020eaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8020e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e98:	f383 8811 	msr	BASEPRI, r3
 8020e9c:	f3bf 8f6f 	isb	sy
 8020ea0:	f3bf 8f4f 	dsb	sy
 8020ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020ea6:	bf00      	nop
 8020ea8:	e7fe      	b.n	8020ea8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020eaa:	68bb      	ldr	r3, [r7, #8]
 8020eac:	2b00      	cmp	r3, #0
 8020eae:	d103      	bne.n	8020eb8 <xQueueGenericSendFromISR+0x3c>
 8020eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d101      	bne.n	8020ebc <xQueueGenericSendFromISR+0x40>
 8020eb8:	2301      	movs	r3, #1
 8020eba:	e000      	b.n	8020ebe <xQueueGenericSendFromISR+0x42>
 8020ebc:	2300      	movs	r3, #0
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d10a      	bne.n	8020ed8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8020ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ec6:	f383 8811 	msr	BASEPRI, r3
 8020eca:	f3bf 8f6f 	isb	sy
 8020ece:	f3bf 8f4f 	dsb	sy
 8020ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020ed4:	bf00      	nop
 8020ed6:	e7fe      	b.n	8020ed6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020ed8:	683b      	ldr	r3, [r7, #0]
 8020eda:	2b02      	cmp	r3, #2
 8020edc:	d103      	bne.n	8020ee6 <xQueueGenericSendFromISR+0x6a>
 8020ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020ee2:	2b01      	cmp	r3, #1
 8020ee4:	d101      	bne.n	8020eea <xQueueGenericSendFromISR+0x6e>
 8020ee6:	2301      	movs	r3, #1
 8020ee8:	e000      	b.n	8020eec <xQueueGenericSendFromISR+0x70>
 8020eea:	2300      	movs	r3, #0
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d10a      	bne.n	8020f06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8020ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ef4:	f383 8811 	msr	BASEPRI, r3
 8020ef8:	f3bf 8f6f 	isb	sy
 8020efc:	f3bf 8f4f 	dsb	sy
 8020f00:	623b      	str	r3, [r7, #32]
}
 8020f02:	bf00      	nop
 8020f04:	e7fe      	b.n	8020f04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020f06:	f002 fb4f 	bl	80235a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8020f0a:	f3ef 8211 	mrs	r2, BASEPRI
 8020f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f12:	f383 8811 	msr	BASEPRI, r3
 8020f16:	f3bf 8f6f 	isb	sy
 8020f1a:	f3bf 8f4f 	dsb	sy
 8020f1e:	61fa      	str	r2, [r7, #28]
 8020f20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8020f22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8020f24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020f2e:	429a      	cmp	r2, r3
 8020f30:	d302      	bcc.n	8020f38 <xQueueGenericSendFromISR+0xbc>
 8020f32:	683b      	ldr	r3, [r7, #0]
 8020f34:	2b02      	cmp	r3, #2
 8020f36:	d12f      	bne.n	8020f98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8020f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020f48:	683a      	ldr	r2, [r7, #0]
 8020f4a:	68b9      	ldr	r1, [r7, #8]
 8020f4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020f4e:	f000 fbd3 	bl	80216f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8020f52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8020f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f5a:	d112      	bne.n	8020f82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d016      	beq.n	8020f92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f66:	3324      	adds	r3, #36	; 0x24
 8020f68:	4618      	mov	r0, r3
 8020f6a:	f001 f9db 	bl	8022324 <xTaskRemoveFromEventList>
 8020f6e:	4603      	mov	r3, r0
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d00e      	beq.n	8020f92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	d00b      	beq.n	8020f92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	2201      	movs	r2, #1
 8020f7e:	601a      	str	r2, [r3, #0]
 8020f80:	e007      	b.n	8020f92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020f86:	3301      	adds	r3, #1
 8020f88:	b2db      	uxtb	r3, r3
 8020f8a:	b25a      	sxtb	r2, r3
 8020f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020f92:	2301      	movs	r3, #1
 8020f94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8020f96:	e001      	b.n	8020f9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8020f98:	2300      	movs	r3, #0
 8020f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020f9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8020fa0:	697b      	ldr	r3, [r7, #20]
 8020fa2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8020fa6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8020faa:	4618      	mov	r0, r3
 8020fac:	3740      	adds	r7, #64	; 0x40
 8020fae:	46bd      	mov	sp, r7
 8020fb0:	bd80      	pop	{r7, pc}
	...

08020fb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020fb4:	b580      	push	{r7, lr}
 8020fb6:	b08c      	sub	sp, #48	; 0x30
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	60f8      	str	r0, [r7, #12]
 8020fbc:	60b9      	str	r1, [r7, #8]
 8020fbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020fc0:	2300      	movs	r3, #0
 8020fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020fc4:	68fb      	ldr	r3, [r7, #12]
 8020fc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d10a      	bne.n	8020fe4 <xQueueReceive+0x30>
	__asm volatile
 8020fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020fd2:	f383 8811 	msr	BASEPRI, r3
 8020fd6:	f3bf 8f6f 	isb	sy
 8020fda:	f3bf 8f4f 	dsb	sy
 8020fde:	623b      	str	r3, [r7, #32]
}
 8020fe0:	bf00      	nop
 8020fe2:	e7fe      	b.n	8020fe2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020fe4:	68bb      	ldr	r3, [r7, #8]
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	d103      	bne.n	8020ff2 <xQueueReceive+0x3e>
 8020fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	d101      	bne.n	8020ff6 <xQueueReceive+0x42>
 8020ff2:	2301      	movs	r3, #1
 8020ff4:	e000      	b.n	8020ff8 <xQueueReceive+0x44>
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d10a      	bne.n	8021012 <xQueueReceive+0x5e>
	__asm volatile
 8020ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021000:	f383 8811 	msr	BASEPRI, r3
 8021004:	f3bf 8f6f 	isb	sy
 8021008:	f3bf 8f4f 	dsb	sy
 802100c:	61fb      	str	r3, [r7, #28]
}
 802100e:	bf00      	nop
 8021010:	e7fe      	b.n	8021010 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021012:	f001 fb91 	bl	8022738 <xTaskGetSchedulerState>
 8021016:	4603      	mov	r3, r0
 8021018:	2b00      	cmp	r3, #0
 802101a:	d102      	bne.n	8021022 <xQueueReceive+0x6e>
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d101      	bne.n	8021026 <xQueueReceive+0x72>
 8021022:	2301      	movs	r3, #1
 8021024:	e000      	b.n	8021028 <xQueueReceive+0x74>
 8021026:	2300      	movs	r3, #0
 8021028:	2b00      	cmp	r3, #0
 802102a:	d10a      	bne.n	8021042 <xQueueReceive+0x8e>
	__asm volatile
 802102c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021030:	f383 8811 	msr	BASEPRI, r3
 8021034:	f3bf 8f6f 	isb	sy
 8021038:	f3bf 8f4f 	dsb	sy
 802103c:	61bb      	str	r3, [r7, #24]
}
 802103e:	bf00      	nop
 8021040:	e7fe      	b.n	8021040 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021042:	f002 f9cf 	bl	80233e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802104a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802104e:	2b00      	cmp	r3, #0
 8021050:	d01f      	beq.n	8021092 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021052:	68b9      	ldr	r1, [r7, #8]
 8021054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021056:	f000 fbb9 	bl	80217cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802105c:	1e5a      	subs	r2, r3, #1
 802105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021060:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021064:	691b      	ldr	r3, [r3, #16]
 8021066:	2b00      	cmp	r3, #0
 8021068:	d00f      	beq.n	802108a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802106c:	3310      	adds	r3, #16
 802106e:	4618      	mov	r0, r3
 8021070:	f001 f958 	bl	8022324 <xTaskRemoveFromEventList>
 8021074:	4603      	mov	r3, r0
 8021076:	2b00      	cmp	r3, #0
 8021078:	d007      	beq.n	802108a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802107a:	4b3d      	ldr	r3, [pc, #244]	; (8021170 <xQueueReceive+0x1bc>)
 802107c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021080:	601a      	str	r2, [r3, #0]
 8021082:	f3bf 8f4f 	dsb	sy
 8021086:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802108a:	f002 f9db 	bl	8023444 <vPortExitCritical>
				return pdPASS;
 802108e:	2301      	movs	r3, #1
 8021090:	e069      	b.n	8021166 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	2b00      	cmp	r3, #0
 8021096:	d103      	bne.n	80210a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8021098:	f002 f9d4 	bl	8023444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802109c:	2300      	movs	r3, #0
 802109e:	e062      	b.n	8021166 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80210a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210a2:	2b00      	cmp	r3, #0
 80210a4:	d106      	bne.n	80210b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80210a6:	f107 0310 	add.w	r3, r7, #16
 80210aa:	4618      	mov	r0, r3
 80210ac:	f001 f99e 	bl	80223ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80210b0:	2301      	movs	r3, #1
 80210b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80210b4:	f002 f9c6 	bl	8023444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80210b8:	f000 feee 	bl	8021e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80210bc:	f002 f992 	bl	80233e4 <vPortEnterCritical>
 80210c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80210c6:	b25b      	sxtb	r3, r3
 80210c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80210cc:	d103      	bne.n	80210d6 <xQueueReceive+0x122>
 80210ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210d0:	2200      	movs	r2, #0
 80210d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80210d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80210dc:	b25b      	sxtb	r3, r3
 80210de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80210e2:	d103      	bne.n	80210ec <xQueueReceive+0x138>
 80210e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210e6:	2200      	movs	r2, #0
 80210e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80210ec:	f002 f9aa 	bl	8023444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80210f0:	1d3a      	adds	r2, r7, #4
 80210f2:	f107 0310 	add.w	r3, r7, #16
 80210f6:	4611      	mov	r1, r2
 80210f8:	4618      	mov	r0, r3
 80210fa:	f001 f98d 	bl	8022418 <xTaskCheckForTimeOut>
 80210fe:	4603      	mov	r3, r0
 8021100:	2b00      	cmp	r3, #0
 8021102:	d123      	bne.n	802114c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021106:	f000 fbd9 	bl	80218bc <prvIsQueueEmpty>
 802110a:	4603      	mov	r3, r0
 802110c:	2b00      	cmp	r3, #0
 802110e:	d017      	beq.n	8021140 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021112:	3324      	adds	r3, #36	; 0x24
 8021114:	687a      	ldr	r2, [r7, #4]
 8021116:	4611      	mov	r1, r2
 8021118:	4618      	mov	r0, r3
 802111a:	f001 f8b3 	bl	8022284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802111e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021120:	f000 fb7a 	bl	8021818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021124:	f000 fec6 	bl	8021eb4 <xTaskResumeAll>
 8021128:	4603      	mov	r3, r0
 802112a:	2b00      	cmp	r3, #0
 802112c:	d189      	bne.n	8021042 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 802112e:	4b10      	ldr	r3, [pc, #64]	; (8021170 <xQueueReceive+0x1bc>)
 8021130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021134:	601a      	str	r2, [r3, #0]
 8021136:	f3bf 8f4f 	dsb	sy
 802113a:	f3bf 8f6f 	isb	sy
 802113e:	e780      	b.n	8021042 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8021140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021142:	f000 fb69 	bl	8021818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021146:	f000 feb5 	bl	8021eb4 <xTaskResumeAll>
 802114a:	e77a      	b.n	8021042 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802114c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802114e:	f000 fb63 	bl	8021818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021152:	f000 feaf 	bl	8021eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021158:	f000 fbb0 	bl	80218bc <prvIsQueueEmpty>
 802115c:	4603      	mov	r3, r0
 802115e:	2b00      	cmp	r3, #0
 8021160:	f43f af6f 	beq.w	8021042 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8021164:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8021166:	4618      	mov	r0, r3
 8021168:	3730      	adds	r7, #48	; 0x30
 802116a:	46bd      	mov	sp, r7
 802116c:	bd80      	pop	{r7, pc}
 802116e:	bf00      	nop
 8021170:	e000ed04 	.word	0xe000ed04

08021174 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8021174:	b580      	push	{r7, lr}
 8021176:	b08e      	sub	sp, #56	; 0x38
 8021178:	af00      	add	r7, sp, #0
 802117a:	6078      	str	r0, [r7, #4]
 802117c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 802117e:	2300      	movs	r3, #0
 8021180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8021186:	2300      	movs	r3, #0
 8021188:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802118c:	2b00      	cmp	r3, #0
 802118e:	d10a      	bne.n	80211a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8021190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021194:	f383 8811 	msr	BASEPRI, r3
 8021198:	f3bf 8f6f 	isb	sy
 802119c:	f3bf 8f4f 	dsb	sy
 80211a0:	623b      	str	r3, [r7, #32]
}
 80211a2:	bf00      	nop
 80211a4:	e7fe      	b.n	80211a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80211a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d00a      	beq.n	80211c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80211ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211b2:	f383 8811 	msr	BASEPRI, r3
 80211b6:	f3bf 8f6f 	isb	sy
 80211ba:	f3bf 8f4f 	dsb	sy
 80211be:	61fb      	str	r3, [r7, #28]
}
 80211c0:	bf00      	nop
 80211c2:	e7fe      	b.n	80211c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80211c4:	f001 fab8 	bl	8022738 <xTaskGetSchedulerState>
 80211c8:	4603      	mov	r3, r0
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d102      	bne.n	80211d4 <xQueueSemaphoreTake+0x60>
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d101      	bne.n	80211d8 <xQueueSemaphoreTake+0x64>
 80211d4:	2301      	movs	r3, #1
 80211d6:	e000      	b.n	80211da <xQueueSemaphoreTake+0x66>
 80211d8:	2300      	movs	r3, #0
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d10a      	bne.n	80211f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80211de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211e2:	f383 8811 	msr	BASEPRI, r3
 80211e6:	f3bf 8f6f 	isb	sy
 80211ea:	f3bf 8f4f 	dsb	sy
 80211ee:	61bb      	str	r3, [r7, #24]
}
 80211f0:	bf00      	nop
 80211f2:	e7fe      	b.n	80211f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80211f4:	f002 f8f6 	bl	80233e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80211f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80211fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021200:	2b00      	cmp	r3, #0
 8021202:	d024      	beq.n	802124e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8021204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021206:	1e5a      	subs	r2, r3, #1
 8021208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802120a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	2b00      	cmp	r3, #0
 8021212:	d104      	bne.n	802121e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8021214:	f001 fc06 	bl	8022a24 <pvTaskIncrementMutexHeldCount>
 8021218:	4602      	mov	r2, r0
 802121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802121c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021220:	691b      	ldr	r3, [r3, #16]
 8021222:	2b00      	cmp	r3, #0
 8021224:	d00f      	beq.n	8021246 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021228:	3310      	adds	r3, #16
 802122a:	4618      	mov	r0, r3
 802122c:	f001 f87a 	bl	8022324 <xTaskRemoveFromEventList>
 8021230:	4603      	mov	r3, r0
 8021232:	2b00      	cmp	r3, #0
 8021234:	d007      	beq.n	8021246 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8021236:	4b54      	ldr	r3, [pc, #336]	; (8021388 <xQueueSemaphoreTake+0x214>)
 8021238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802123c:	601a      	str	r2, [r3, #0]
 802123e:	f3bf 8f4f 	dsb	sy
 8021242:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8021246:	f002 f8fd 	bl	8023444 <vPortExitCritical>
				return pdPASS;
 802124a:	2301      	movs	r3, #1
 802124c:	e097      	b.n	802137e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802124e:	683b      	ldr	r3, [r7, #0]
 8021250:	2b00      	cmp	r3, #0
 8021252:	d111      	bne.n	8021278 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8021254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021256:	2b00      	cmp	r3, #0
 8021258:	d00a      	beq.n	8021270 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 802125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802125e:	f383 8811 	msr	BASEPRI, r3
 8021262:	f3bf 8f6f 	isb	sy
 8021266:	f3bf 8f4f 	dsb	sy
 802126a:	617b      	str	r3, [r7, #20]
}
 802126c:	bf00      	nop
 802126e:	e7fe      	b.n	802126e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8021270:	f002 f8e8 	bl	8023444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021274:	2300      	movs	r3, #0
 8021276:	e082      	b.n	802137e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802127a:	2b00      	cmp	r3, #0
 802127c:	d106      	bne.n	802128c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802127e:	f107 030c 	add.w	r3, r7, #12
 8021282:	4618      	mov	r0, r3
 8021284:	f001 f8b2 	bl	80223ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021288:	2301      	movs	r3, #1
 802128a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802128c:	f002 f8da 	bl	8023444 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021290:	f000 fe02 	bl	8021e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021294:	f002 f8a6 	bl	80233e4 <vPortEnterCritical>
 8021298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802129a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802129e:	b25b      	sxtb	r3, r3
 80212a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212a4:	d103      	bne.n	80212ae <xQueueSemaphoreTake+0x13a>
 80212a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212a8:	2200      	movs	r2, #0
 80212aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80212ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80212b4:	b25b      	sxtb	r3, r3
 80212b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212ba:	d103      	bne.n	80212c4 <xQueueSemaphoreTake+0x150>
 80212bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212be:	2200      	movs	r2, #0
 80212c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80212c4:	f002 f8be 	bl	8023444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80212c8:	463a      	mov	r2, r7
 80212ca:	f107 030c 	add.w	r3, r7, #12
 80212ce:	4611      	mov	r1, r2
 80212d0:	4618      	mov	r0, r3
 80212d2:	f001 f8a1 	bl	8022418 <xTaskCheckForTimeOut>
 80212d6:	4603      	mov	r3, r0
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d132      	bne.n	8021342 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80212dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80212de:	f000 faed 	bl	80218bc <prvIsQueueEmpty>
 80212e2:	4603      	mov	r3, r0
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d026      	beq.n	8021336 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80212e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d109      	bne.n	8021304 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80212f0:	f002 f878 	bl	80233e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80212f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212f6:	689b      	ldr	r3, [r3, #8]
 80212f8:	4618      	mov	r0, r3
 80212fa:	f001 fa3b 	bl	8022774 <xTaskPriorityInherit>
 80212fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8021300:	f002 f8a0 	bl	8023444 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021306:	3324      	adds	r3, #36	; 0x24
 8021308:	683a      	ldr	r2, [r7, #0]
 802130a:	4611      	mov	r1, r2
 802130c:	4618      	mov	r0, r3
 802130e:	f000 ffb9 	bl	8022284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021314:	f000 fa80 	bl	8021818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021318:	f000 fdcc 	bl	8021eb4 <xTaskResumeAll>
 802131c:	4603      	mov	r3, r0
 802131e:	2b00      	cmp	r3, #0
 8021320:	f47f af68 	bne.w	80211f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8021324:	4b18      	ldr	r3, [pc, #96]	; (8021388 <xQueueSemaphoreTake+0x214>)
 8021326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802132a:	601a      	str	r2, [r3, #0]
 802132c:	f3bf 8f4f 	dsb	sy
 8021330:	f3bf 8f6f 	isb	sy
 8021334:	e75e      	b.n	80211f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8021336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021338:	f000 fa6e 	bl	8021818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802133c:	f000 fdba 	bl	8021eb4 <xTaskResumeAll>
 8021340:	e758      	b.n	80211f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8021342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021344:	f000 fa68 	bl	8021818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021348:	f000 fdb4 	bl	8021eb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802134c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802134e:	f000 fab5 	bl	80218bc <prvIsQueueEmpty>
 8021352:	4603      	mov	r3, r0
 8021354:	2b00      	cmp	r3, #0
 8021356:	f43f af4d 	beq.w	80211f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 802135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802135c:	2b00      	cmp	r3, #0
 802135e:	d00d      	beq.n	802137c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8021360:	f002 f840 	bl	80233e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8021364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021366:	f000 f9af 	bl	80216c8 <prvGetDisinheritPriorityAfterTimeout>
 802136a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 802136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802136e:	689b      	ldr	r3, [r3, #8]
 8021370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021372:	4618      	mov	r0, r3
 8021374:	f001 fad4 	bl	8022920 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8021378:	f002 f864 	bl	8023444 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802137c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802137e:	4618      	mov	r0, r3
 8021380:	3738      	adds	r7, #56	; 0x38
 8021382:	46bd      	mov	sp, r7
 8021384:	bd80      	pop	{r7, pc}
 8021386:	bf00      	nop
 8021388:	e000ed04 	.word	0xe000ed04

0802138c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802138c:	b580      	push	{r7, lr}
 802138e:	b08e      	sub	sp, #56	; 0x38
 8021390:	af00      	add	r7, sp, #0
 8021392:	60f8      	str	r0, [r7, #12]
 8021394:	60b9      	str	r1, [r7, #8]
 8021396:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021398:	2300      	movs	r3, #0
 802139a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 802139c:	68fb      	ldr	r3, [r7, #12]
 802139e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80213a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d10a      	bne.n	80213bc <xQueuePeek+0x30>
	__asm volatile
 80213a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80213aa:	f383 8811 	msr	BASEPRI, r3
 80213ae:	f3bf 8f6f 	isb	sy
 80213b2:	f3bf 8f4f 	dsb	sy
 80213b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80213b8:	bf00      	nop
 80213ba:	e7fe      	b.n	80213ba <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80213bc:	68bb      	ldr	r3, [r7, #8]
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d103      	bne.n	80213ca <xQueuePeek+0x3e>
 80213c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d101      	bne.n	80213ce <xQueuePeek+0x42>
 80213ca:	2301      	movs	r3, #1
 80213cc:	e000      	b.n	80213d0 <xQueuePeek+0x44>
 80213ce:	2300      	movs	r3, #0
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d10a      	bne.n	80213ea <xQueuePeek+0x5e>
	__asm volatile
 80213d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80213d8:	f383 8811 	msr	BASEPRI, r3
 80213dc:	f3bf 8f6f 	isb	sy
 80213e0:	f3bf 8f4f 	dsb	sy
 80213e4:	623b      	str	r3, [r7, #32]
}
 80213e6:	bf00      	nop
 80213e8:	e7fe      	b.n	80213e8 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80213ea:	f001 f9a5 	bl	8022738 <xTaskGetSchedulerState>
 80213ee:	4603      	mov	r3, r0
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d102      	bne.n	80213fa <xQueuePeek+0x6e>
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d101      	bne.n	80213fe <xQueuePeek+0x72>
 80213fa:	2301      	movs	r3, #1
 80213fc:	e000      	b.n	8021400 <xQueuePeek+0x74>
 80213fe:	2300      	movs	r3, #0
 8021400:	2b00      	cmp	r3, #0
 8021402:	d10a      	bne.n	802141a <xQueuePeek+0x8e>
	__asm volatile
 8021404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021408:	f383 8811 	msr	BASEPRI, r3
 802140c:	f3bf 8f6f 	isb	sy
 8021410:	f3bf 8f4f 	dsb	sy
 8021414:	61fb      	str	r3, [r7, #28]
}
 8021416:	bf00      	nop
 8021418:	e7fe      	b.n	8021418 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802141a:	f001 ffe3 	bl	80233e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021422:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021426:	2b00      	cmp	r3, #0
 8021428:	d021      	beq.n	802146e <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 802142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802142c:	68db      	ldr	r3, [r3, #12]
 802142e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021430:	68b9      	ldr	r1, [r7, #8]
 8021432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021434:	f000 f9ca 	bl	80217cc <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8021438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802143a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802143c:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021442:	2b00      	cmp	r3, #0
 8021444:	d00f      	beq.n	8021466 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021448:	3324      	adds	r3, #36	; 0x24
 802144a:	4618      	mov	r0, r3
 802144c:	f000 ff6a 	bl	8022324 <xTaskRemoveFromEventList>
 8021450:	4603      	mov	r3, r0
 8021452:	2b00      	cmp	r3, #0
 8021454:	d007      	beq.n	8021466 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8021456:	4b3d      	ldr	r3, [pc, #244]	; (802154c <xQueuePeek+0x1c0>)
 8021458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802145c:	601a      	str	r2, [r3, #0]
 802145e:	f3bf 8f4f 	dsb	sy
 8021462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8021466:	f001 ffed 	bl	8023444 <vPortExitCritical>
				return pdPASS;
 802146a:	2301      	movs	r3, #1
 802146c:	e069      	b.n	8021542 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	2b00      	cmp	r3, #0
 8021472:	d103      	bne.n	802147c <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8021474:	f001 ffe6 	bl	8023444 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021478:	2300      	movs	r3, #0
 802147a:	e062      	b.n	8021542 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 802147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802147e:	2b00      	cmp	r3, #0
 8021480:	d106      	bne.n	8021490 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8021482:	f107 0314 	add.w	r3, r7, #20
 8021486:	4618      	mov	r0, r3
 8021488:	f000 ffb0 	bl	80223ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802148c:	2301      	movs	r3, #1
 802148e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021490:	f001 ffd8 	bl	8023444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021494:	f000 fd00 	bl	8021e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021498:	f001 ffa4 	bl	80233e4 <vPortEnterCritical>
 802149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802149e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80214a2:	b25b      	sxtb	r3, r3
 80214a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80214a8:	d103      	bne.n	80214b2 <xQueuePeek+0x126>
 80214aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ac:	2200      	movs	r2, #0
 80214ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80214b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80214b8:	b25b      	sxtb	r3, r3
 80214ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80214be:	d103      	bne.n	80214c8 <xQueuePeek+0x13c>
 80214c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214c2:	2200      	movs	r2, #0
 80214c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80214c8:	f001 ffbc 	bl	8023444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80214cc:	1d3a      	adds	r2, r7, #4
 80214ce:	f107 0314 	add.w	r3, r7, #20
 80214d2:	4611      	mov	r1, r2
 80214d4:	4618      	mov	r0, r3
 80214d6:	f000 ff9f 	bl	8022418 <xTaskCheckForTimeOut>
 80214da:	4603      	mov	r3, r0
 80214dc:	2b00      	cmp	r3, #0
 80214de:	d123      	bne.n	8021528 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80214e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80214e2:	f000 f9eb 	bl	80218bc <prvIsQueueEmpty>
 80214e6:	4603      	mov	r3, r0
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d017      	beq.n	802151c <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80214ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ee:	3324      	adds	r3, #36	; 0x24
 80214f0:	687a      	ldr	r2, [r7, #4]
 80214f2:	4611      	mov	r1, r2
 80214f4:	4618      	mov	r0, r3
 80214f6:	f000 fec5 	bl	8022284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80214fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80214fc:	f000 f98c 	bl	8021818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021500:	f000 fcd8 	bl	8021eb4 <xTaskResumeAll>
 8021504:	4603      	mov	r3, r0
 8021506:	2b00      	cmp	r3, #0
 8021508:	d187      	bne.n	802141a <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 802150a:	4b10      	ldr	r3, [pc, #64]	; (802154c <xQueuePeek+0x1c0>)
 802150c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021510:	601a      	str	r2, [r3, #0]
 8021512:	f3bf 8f4f 	dsb	sy
 8021516:	f3bf 8f6f 	isb	sy
 802151a:	e77e      	b.n	802141a <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 802151c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802151e:	f000 f97b 	bl	8021818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021522:	f000 fcc7 	bl	8021eb4 <xTaskResumeAll>
 8021526:	e778      	b.n	802141a <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8021528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802152a:	f000 f975 	bl	8021818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802152e:	f000 fcc1 	bl	8021eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021534:	f000 f9c2 	bl	80218bc <prvIsQueueEmpty>
 8021538:	4603      	mov	r3, r0
 802153a:	2b00      	cmp	r3, #0
 802153c:	f43f af6d 	beq.w	802141a <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8021540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8021542:	4618      	mov	r0, r3
 8021544:	3738      	adds	r7, #56	; 0x38
 8021546:	46bd      	mov	sp, r7
 8021548:	bd80      	pop	{r7, pc}
 802154a:	bf00      	nop
 802154c:	e000ed04 	.word	0xe000ed04

08021550 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8021550:	b580      	push	{r7, lr}
 8021552:	b08e      	sub	sp, #56	; 0x38
 8021554:	af00      	add	r7, sp, #0
 8021556:	60f8      	str	r0, [r7, #12]
 8021558:	60b9      	str	r1, [r7, #8]
 802155a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802155c:	68fb      	ldr	r3, [r7, #12]
 802155e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8021560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021562:	2b00      	cmp	r3, #0
 8021564:	d10a      	bne.n	802157c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8021566:	f04f 0350 	mov.w	r3, #80	; 0x50
 802156a:	f383 8811 	msr	BASEPRI, r3
 802156e:	f3bf 8f6f 	isb	sy
 8021572:	f3bf 8f4f 	dsb	sy
 8021576:	623b      	str	r3, [r7, #32]
}
 8021578:	bf00      	nop
 802157a:	e7fe      	b.n	802157a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802157c:	68bb      	ldr	r3, [r7, #8]
 802157e:	2b00      	cmp	r3, #0
 8021580:	d103      	bne.n	802158a <xQueueReceiveFromISR+0x3a>
 8021582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021586:	2b00      	cmp	r3, #0
 8021588:	d101      	bne.n	802158e <xQueueReceiveFromISR+0x3e>
 802158a:	2301      	movs	r3, #1
 802158c:	e000      	b.n	8021590 <xQueueReceiveFromISR+0x40>
 802158e:	2300      	movs	r3, #0
 8021590:	2b00      	cmp	r3, #0
 8021592:	d10a      	bne.n	80215aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8021594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021598:	f383 8811 	msr	BASEPRI, r3
 802159c:	f3bf 8f6f 	isb	sy
 80215a0:	f3bf 8f4f 	dsb	sy
 80215a4:	61fb      	str	r3, [r7, #28]
}
 80215a6:	bf00      	nop
 80215a8:	e7fe      	b.n	80215a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80215aa:	f001 fffd 	bl	80235a8 <vPortValidateInterruptPriority>
	__asm volatile
 80215ae:	f3ef 8211 	mrs	r2, BASEPRI
 80215b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215b6:	f383 8811 	msr	BASEPRI, r3
 80215ba:	f3bf 8f6f 	isb	sy
 80215be:	f3bf 8f4f 	dsb	sy
 80215c2:	61ba      	str	r2, [r7, #24]
 80215c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80215c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80215c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80215ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80215ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80215d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d02f      	beq.n	8021636 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80215d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80215dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80215e0:	68b9      	ldr	r1, [r7, #8]
 80215e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80215e4:	f000 f8f2 	bl	80217cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80215e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215ea:	1e5a      	subs	r2, r3, #1
 80215ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80215f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80215f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80215f8:	d112      	bne.n	8021620 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80215fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215fc:	691b      	ldr	r3, [r3, #16]
 80215fe:	2b00      	cmp	r3, #0
 8021600:	d016      	beq.n	8021630 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021604:	3310      	adds	r3, #16
 8021606:	4618      	mov	r0, r3
 8021608:	f000 fe8c 	bl	8022324 <xTaskRemoveFromEventList>
 802160c:	4603      	mov	r3, r0
 802160e:	2b00      	cmp	r3, #0
 8021610:	d00e      	beq.n	8021630 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	2b00      	cmp	r3, #0
 8021616:	d00b      	beq.n	8021630 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	2201      	movs	r2, #1
 802161c:	601a      	str	r2, [r3, #0]
 802161e:	e007      	b.n	8021630 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8021620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021624:	3301      	adds	r3, #1
 8021626:	b2db      	uxtb	r3, r3
 8021628:	b25a      	sxtb	r2, r3
 802162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802162c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8021630:	2301      	movs	r3, #1
 8021632:	637b      	str	r3, [r7, #52]	; 0x34
 8021634:	e001      	b.n	802163a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8021636:	2300      	movs	r3, #0
 8021638:	637b      	str	r3, [r7, #52]	; 0x34
 802163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802163c:	613b      	str	r3, [r7, #16]
	__asm volatile
 802163e:	693b      	ldr	r3, [r7, #16]
 8021640:	f383 8811 	msr	BASEPRI, r3
}
 8021644:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8021646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021648:	4618      	mov	r0, r3
 802164a:	3738      	adds	r7, #56	; 0x38
 802164c:	46bd      	mov	sp, r7
 802164e:	bd80      	pop	{r7, pc}

08021650 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8021650:	b580      	push	{r7, lr}
 8021652:	b084      	sub	sp, #16
 8021654:	af00      	add	r7, sp, #0
 8021656:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	2b00      	cmp	r3, #0
 802165c:	d10a      	bne.n	8021674 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 802165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021662:	f383 8811 	msr	BASEPRI, r3
 8021666:	f3bf 8f6f 	isb	sy
 802166a:	f3bf 8f4f 	dsb	sy
 802166e:	60bb      	str	r3, [r7, #8]
}
 8021670:	bf00      	nop
 8021672:	e7fe      	b.n	8021672 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8021674:	f001 feb6 	bl	80233e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8021678:	687b      	ldr	r3, [r7, #4]
 802167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802167c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 802167e:	f001 fee1 	bl	8023444 <vPortExitCritical>

	return uxReturn;
 8021682:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8021684:	4618      	mov	r0, r3
 8021686:	3710      	adds	r7, #16
 8021688:	46bd      	mov	sp, r7
 802168a:	bd80      	pop	{r7, pc}

0802168c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 802168c:	b480      	push	{r7}
 802168e:	b087      	sub	sp, #28
 8021690:	af00      	add	r7, sp, #0
 8021692:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8021698:	697b      	ldr	r3, [r7, #20]
 802169a:	2b00      	cmp	r3, #0
 802169c:	d10a      	bne.n	80216b4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 802169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80216a2:	f383 8811 	msr	BASEPRI, r3
 80216a6:	f3bf 8f6f 	isb	sy
 80216aa:	f3bf 8f4f 	dsb	sy
 80216ae:	60fb      	str	r3, [r7, #12]
}
 80216b0:	bf00      	nop
 80216b2:	e7fe      	b.n	80216b2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80216b4:	697b      	ldr	r3, [r7, #20]
 80216b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216b8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80216ba:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80216bc:	4618      	mov	r0, r3
 80216be:	371c      	adds	r7, #28
 80216c0:	46bd      	mov	sp, r7
 80216c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216c6:	4770      	bx	lr

080216c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80216c8:	b480      	push	{r7}
 80216ca:	b085      	sub	sp, #20
 80216cc:	af00      	add	r7, sp, #0
 80216ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d006      	beq.n	80216e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80216e2:	60fb      	str	r3, [r7, #12]
 80216e4:	e001      	b.n	80216ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80216e6:	2300      	movs	r3, #0
 80216e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80216ea:	68fb      	ldr	r3, [r7, #12]
	}
 80216ec:	4618      	mov	r0, r3
 80216ee:	3714      	adds	r7, #20
 80216f0:	46bd      	mov	sp, r7
 80216f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216f6:	4770      	bx	lr

080216f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80216f8:	b580      	push	{r7, lr}
 80216fa:	b086      	sub	sp, #24
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	60f8      	str	r0, [r7, #12]
 8021700:	60b9      	str	r1, [r7, #8]
 8021702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8021704:	2300      	movs	r3, #0
 8021706:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021708:	68fb      	ldr	r3, [r7, #12]
 802170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802170c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802170e:	68fb      	ldr	r3, [r7, #12]
 8021710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021712:	2b00      	cmp	r3, #0
 8021714:	d10d      	bne.n	8021732 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021716:	68fb      	ldr	r3, [r7, #12]
 8021718:	681b      	ldr	r3, [r3, #0]
 802171a:	2b00      	cmp	r3, #0
 802171c:	d14d      	bne.n	80217ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	689b      	ldr	r3, [r3, #8]
 8021722:	4618      	mov	r0, r3
 8021724:	f001 f88e 	bl	8022844 <xTaskPriorityDisinherit>
 8021728:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 802172a:	68fb      	ldr	r3, [r7, #12]
 802172c:	2200      	movs	r2, #0
 802172e:	609a      	str	r2, [r3, #8]
 8021730:	e043      	b.n	80217ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	2b00      	cmp	r3, #0
 8021736:	d119      	bne.n	802176c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021738:	68fb      	ldr	r3, [r7, #12]
 802173a:	6858      	ldr	r0, [r3, #4]
 802173c:	68fb      	ldr	r3, [r7, #12]
 802173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021740:	461a      	mov	r2, r3
 8021742:	68b9      	ldr	r1, [r7, #8]
 8021744:	f00c fac7 	bl	802dcd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	685a      	ldr	r2, [r3, #4]
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021750:	441a      	add	r2, r3
 8021752:	68fb      	ldr	r3, [r7, #12]
 8021754:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021756:	68fb      	ldr	r3, [r7, #12]
 8021758:	685a      	ldr	r2, [r3, #4]
 802175a:	68fb      	ldr	r3, [r7, #12]
 802175c:	689b      	ldr	r3, [r3, #8]
 802175e:	429a      	cmp	r2, r3
 8021760:	d32b      	bcc.n	80217ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8021762:	68fb      	ldr	r3, [r7, #12]
 8021764:	681a      	ldr	r2, [r3, #0]
 8021766:	68fb      	ldr	r3, [r7, #12]
 8021768:	605a      	str	r2, [r3, #4]
 802176a:	e026      	b.n	80217ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 802176c:	68fb      	ldr	r3, [r7, #12]
 802176e:	68d8      	ldr	r0, [r3, #12]
 8021770:	68fb      	ldr	r3, [r7, #12]
 8021772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021774:	461a      	mov	r2, r3
 8021776:	68b9      	ldr	r1, [r7, #8]
 8021778:	f00c faad 	bl	802dcd6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802177c:	68fb      	ldr	r3, [r7, #12]
 802177e:	68da      	ldr	r2, [r3, #12]
 8021780:	68fb      	ldr	r3, [r7, #12]
 8021782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021784:	425b      	negs	r3, r3
 8021786:	441a      	add	r2, r3
 8021788:	68fb      	ldr	r3, [r7, #12]
 802178a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	68da      	ldr	r2, [r3, #12]
 8021790:	68fb      	ldr	r3, [r7, #12]
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	429a      	cmp	r2, r3
 8021796:	d207      	bcs.n	80217a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021798:	68fb      	ldr	r3, [r7, #12]
 802179a:	689a      	ldr	r2, [r3, #8]
 802179c:	68fb      	ldr	r3, [r7, #12]
 802179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80217a0:	425b      	negs	r3, r3
 80217a2:	441a      	add	r2, r3
 80217a4:	68fb      	ldr	r3, [r7, #12]
 80217a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80217a8:	687b      	ldr	r3, [r7, #4]
 80217aa:	2b02      	cmp	r3, #2
 80217ac:	d105      	bne.n	80217ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80217ae:	693b      	ldr	r3, [r7, #16]
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	d002      	beq.n	80217ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80217b4:	693b      	ldr	r3, [r7, #16]
 80217b6:	3b01      	subs	r3, #1
 80217b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80217ba:	693b      	ldr	r3, [r7, #16]
 80217bc:	1c5a      	adds	r2, r3, #1
 80217be:	68fb      	ldr	r3, [r7, #12]
 80217c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80217c2:	697b      	ldr	r3, [r7, #20]
}
 80217c4:	4618      	mov	r0, r3
 80217c6:	3718      	adds	r7, #24
 80217c8:	46bd      	mov	sp, r7
 80217ca:	bd80      	pop	{r7, pc}

080217cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80217cc:	b580      	push	{r7, lr}
 80217ce:	b082      	sub	sp, #8
 80217d0:	af00      	add	r7, sp, #0
 80217d2:	6078      	str	r0, [r7, #4]
 80217d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80217da:	2b00      	cmp	r3, #0
 80217dc:	d018      	beq.n	8021810 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	68da      	ldr	r2, [r3, #12]
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80217e6:	441a      	add	r2, r3
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	68da      	ldr	r2, [r3, #12]
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	689b      	ldr	r3, [r3, #8]
 80217f4:	429a      	cmp	r2, r3
 80217f6:	d303      	bcc.n	8021800 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80217f8:	687b      	ldr	r3, [r7, #4]
 80217fa:	681a      	ldr	r2, [r3, #0]
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	68d9      	ldr	r1, [r3, #12]
 8021804:	687b      	ldr	r3, [r7, #4]
 8021806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021808:	461a      	mov	r2, r3
 802180a:	6838      	ldr	r0, [r7, #0]
 802180c:	f00c fa63 	bl	802dcd6 <memcpy>
	}
}
 8021810:	bf00      	nop
 8021812:	3708      	adds	r7, #8
 8021814:	46bd      	mov	sp, r7
 8021816:	bd80      	pop	{r7, pc}

08021818 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8021818:	b580      	push	{r7, lr}
 802181a:	b084      	sub	sp, #16
 802181c:	af00      	add	r7, sp, #0
 802181e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8021820:	f001 fde0 	bl	80233e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802182a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802182c:	e011      	b.n	8021852 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021832:	2b00      	cmp	r3, #0
 8021834:	d012      	beq.n	802185c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	3324      	adds	r3, #36	; 0x24
 802183a:	4618      	mov	r0, r3
 802183c:	f000 fd72 	bl	8022324 <xTaskRemoveFromEventList>
 8021840:	4603      	mov	r3, r0
 8021842:	2b00      	cmp	r3, #0
 8021844:	d001      	beq.n	802184a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8021846:	f000 fe49 	bl	80224dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 802184a:	7bfb      	ldrb	r3, [r7, #15]
 802184c:	3b01      	subs	r3, #1
 802184e:	b2db      	uxtb	r3, r3
 8021850:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8021852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021856:	2b00      	cmp	r3, #0
 8021858:	dce9      	bgt.n	802182e <prvUnlockQueue+0x16>
 802185a:	e000      	b.n	802185e <prvUnlockQueue+0x46>
					break;
 802185c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	22ff      	movs	r2, #255	; 0xff
 8021862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8021866:	f001 fded 	bl	8023444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802186a:	f001 fdbb 	bl	80233e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802186e:	687b      	ldr	r3, [r7, #4]
 8021870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021874:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021876:	e011      	b.n	802189c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	691b      	ldr	r3, [r3, #16]
 802187c:	2b00      	cmp	r3, #0
 802187e:	d012      	beq.n	80218a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	3310      	adds	r3, #16
 8021884:	4618      	mov	r0, r3
 8021886:	f000 fd4d 	bl	8022324 <xTaskRemoveFromEventList>
 802188a:	4603      	mov	r3, r0
 802188c:	2b00      	cmp	r3, #0
 802188e:	d001      	beq.n	8021894 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8021890:	f000 fe24 	bl	80224dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8021894:	7bbb      	ldrb	r3, [r7, #14]
 8021896:	3b01      	subs	r3, #1
 8021898:	b2db      	uxtb	r3, r3
 802189a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802189c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	dce9      	bgt.n	8021878 <prvUnlockQueue+0x60>
 80218a4:	e000      	b.n	80218a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80218a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	22ff      	movs	r2, #255	; 0xff
 80218ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80218b0:	f001 fdc8 	bl	8023444 <vPortExitCritical>
}
 80218b4:	bf00      	nop
 80218b6:	3710      	adds	r7, #16
 80218b8:	46bd      	mov	sp, r7
 80218ba:	bd80      	pop	{r7, pc}

080218bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80218bc:	b580      	push	{r7, lr}
 80218be:	b084      	sub	sp, #16
 80218c0:	af00      	add	r7, sp, #0
 80218c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80218c4:	f001 fd8e 	bl	80233e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80218c8:	687b      	ldr	r3, [r7, #4]
 80218ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d102      	bne.n	80218d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80218d0:	2301      	movs	r3, #1
 80218d2:	60fb      	str	r3, [r7, #12]
 80218d4:	e001      	b.n	80218da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80218d6:	2300      	movs	r3, #0
 80218d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80218da:	f001 fdb3 	bl	8023444 <vPortExitCritical>

	return xReturn;
 80218de:	68fb      	ldr	r3, [r7, #12]
}
 80218e0:	4618      	mov	r0, r3
 80218e2:	3710      	adds	r7, #16
 80218e4:	46bd      	mov	sp, r7
 80218e6:	bd80      	pop	{r7, pc}

080218e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80218e8:	b580      	push	{r7, lr}
 80218ea:	b084      	sub	sp, #16
 80218ec:	af00      	add	r7, sp, #0
 80218ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80218f0:	f001 fd78 	bl	80233e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80218f4:	687b      	ldr	r3, [r7, #4]
 80218f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80218fc:	429a      	cmp	r2, r3
 80218fe:	d102      	bne.n	8021906 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8021900:	2301      	movs	r3, #1
 8021902:	60fb      	str	r3, [r7, #12]
 8021904:	e001      	b.n	802190a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8021906:	2300      	movs	r3, #0
 8021908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802190a:	f001 fd9b 	bl	8023444 <vPortExitCritical>

	return xReturn;
 802190e:	68fb      	ldr	r3, [r7, #12]
}
 8021910:	4618      	mov	r0, r3
 8021912:	3710      	adds	r7, #16
 8021914:	46bd      	mov	sp, r7
 8021916:	bd80      	pop	{r7, pc}

08021918 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8021918:	b480      	push	{r7}
 802191a:	b085      	sub	sp, #20
 802191c:	af00      	add	r7, sp, #0
 802191e:	6078      	str	r0, [r7, #4]
 8021920:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021922:	2300      	movs	r3, #0
 8021924:	60fb      	str	r3, [r7, #12]
 8021926:	e014      	b.n	8021952 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8021928:	4a0f      	ldr	r2, [pc, #60]	; (8021968 <vQueueAddToRegistry+0x50>)
 802192a:	68fb      	ldr	r3, [r7, #12]
 802192c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021930:	2b00      	cmp	r3, #0
 8021932:	d10b      	bne.n	802194c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8021934:	490c      	ldr	r1, [pc, #48]	; (8021968 <vQueueAddToRegistry+0x50>)
 8021936:	68fb      	ldr	r3, [r7, #12]
 8021938:	683a      	ldr	r2, [r7, #0]
 802193a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802193e:	4a0a      	ldr	r2, [pc, #40]	; (8021968 <vQueueAddToRegistry+0x50>)
 8021940:	68fb      	ldr	r3, [r7, #12]
 8021942:	00db      	lsls	r3, r3, #3
 8021944:	4413      	add	r3, r2
 8021946:	687a      	ldr	r2, [r7, #4]
 8021948:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 802194a:	e006      	b.n	802195a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802194c:	68fb      	ldr	r3, [r7, #12]
 802194e:	3301      	adds	r3, #1
 8021950:	60fb      	str	r3, [r7, #12]
 8021952:	68fb      	ldr	r3, [r7, #12]
 8021954:	2b09      	cmp	r3, #9
 8021956:	d9e7      	bls.n	8021928 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8021958:	bf00      	nop
 802195a:	bf00      	nop
 802195c:	3714      	adds	r7, #20
 802195e:	46bd      	mov	sp, r7
 8021960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021964:	4770      	bx	lr
 8021966:	bf00      	nop
 8021968:	20001d08 	.word	0x20001d08

0802196c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802196c:	b580      	push	{r7, lr}
 802196e:	b086      	sub	sp, #24
 8021970:	af00      	add	r7, sp, #0
 8021972:	60f8      	str	r0, [r7, #12]
 8021974:	60b9      	str	r1, [r7, #8]
 8021976:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8021978:	68fb      	ldr	r3, [r7, #12]
 802197a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 802197c:	f001 fd32 	bl	80233e4 <vPortEnterCritical>
 8021980:	697b      	ldr	r3, [r7, #20]
 8021982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021986:	b25b      	sxtb	r3, r3
 8021988:	f1b3 3fff 	cmp.w	r3, #4294967295
 802198c:	d103      	bne.n	8021996 <vQueueWaitForMessageRestricted+0x2a>
 802198e:	697b      	ldr	r3, [r7, #20]
 8021990:	2200      	movs	r2, #0
 8021992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021996:	697b      	ldr	r3, [r7, #20]
 8021998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802199c:	b25b      	sxtb	r3, r3
 802199e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80219a2:	d103      	bne.n	80219ac <vQueueWaitForMessageRestricted+0x40>
 80219a4:	697b      	ldr	r3, [r7, #20]
 80219a6:	2200      	movs	r2, #0
 80219a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80219ac:	f001 fd4a 	bl	8023444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80219b0:	697b      	ldr	r3, [r7, #20]
 80219b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d106      	bne.n	80219c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80219b8:	697b      	ldr	r3, [r7, #20]
 80219ba:	3324      	adds	r3, #36	; 0x24
 80219bc:	687a      	ldr	r2, [r7, #4]
 80219be:	68b9      	ldr	r1, [r7, #8]
 80219c0:	4618      	mov	r0, r3
 80219c2:	f000 fc83 	bl	80222cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80219c6:	6978      	ldr	r0, [r7, #20]
 80219c8:	f7ff ff26 	bl	8021818 <prvUnlockQueue>
	}
 80219cc:	bf00      	nop
 80219ce:	3718      	adds	r7, #24
 80219d0:	46bd      	mov	sp, r7
 80219d2:	bd80      	pop	{r7, pc}

080219d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80219d4:	b580      	push	{r7, lr}
 80219d6:	b08e      	sub	sp, #56	; 0x38
 80219d8:	af04      	add	r7, sp, #16
 80219da:	60f8      	str	r0, [r7, #12]
 80219dc:	60b9      	str	r1, [r7, #8]
 80219de:	607a      	str	r2, [r7, #4]
 80219e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80219e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d10a      	bne.n	80219fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80219e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219ec:	f383 8811 	msr	BASEPRI, r3
 80219f0:	f3bf 8f6f 	isb	sy
 80219f4:	f3bf 8f4f 	dsb	sy
 80219f8:	623b      	str	r3, [r7, #32]
}
 80219fa:	bf00      	nop
 80219fc:	e7fe      	b.n	80219fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80219fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	d10a      	bne.n	8021a1a <xTaskCreateStatic+0x46>
	__asm volatile
 8021a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021a08:	f383 8811 	msr	BASEPRI, r3
 8021a0c:	f3bf 8f6f 	isb	sy
 8021a10:	f3bf 8f4f 	dsb	sy
 8021a14:	61fb      	str	r3, [r7, #28]
}
 8021a16:	bf00      	nop
 8021a18:	e7fe      	b.n	8021a18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8021a1a:	23ac      	movs	r3, #172	; 0xac
 8021a1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8021a1e:	693b      	ldr	r3, [r7, #16]
 8021a20:	2bac      	cmp	r3, #172	; 0xac
 8021a22:	d00a      	beq.n	8021a3a <xTaskCreateStatic+0x66>
	__asm volatile
 8021a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021a28:	f383 8811 	msr	BASEPRI, r3
 8021a2c:	f3bf 8f6f 	isb	sy
 8021a30:	f3bf 8f4f 	dsb	sy
 8021a34:	61bb      	str	r3, [r7, #24]
}
 8021a36:	bf00      	nop
 8021a38:	e7fe      	b.n	8021a38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8021a3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8021a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d01e      	beq.n	8021a80 <xTaskCreateStatic+0xac>
 8021a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d01b      	beq.n	8021a80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8021a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021a4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8021a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021a50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8021a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a54:	2202      	movs	r2, #2
 8021a56:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8021a5a:	2300      	movs	r3, #0
 8021a5c:	9303      	str	r3, [sp, #12]
 8021a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a60:	9302      	str	r3, [sp, #8]
 8021a62:	f107 0314 	add.w	r3, r7, #20
 8021a66:	9301      	str	r3, [sp, #4]
 8021a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a6a:	9300      	str	r3, [sp, #0]
 8021a6c:	683b      	ldr	r3, [r7, #0]
 8021a6e:	687a      	ldr	r2, [r7, #4]
 8021a70:	68b9      	ldr	r1, [r7, #8]
 8021a72:	68f8      	ldr	r0, [r7, #12]
 8021a74:	f000 f850 	bl	8021b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021a7a:	f000 f8f7 	bl	8021c6c <prvAddNewTaskToReadyList>
 8021a7e:	e001      	b.n	8021a84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8021a80:	2300      	movs	r3, #0
 8021a82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8021a84:	697b      	ldr	r3, [r7, #20]
	}
 8021a86:	4618      	mov	r0, r3
 8021a88:	3728      	adds	r7, #40	; 0x28
 8021a8a:	46bd      	mov	sp, r7
 8021a8c:	bd80      	pop	{r7, pc}

08021a8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8021a8e:	b580      	push	{r7, lr}
 8021a90:	b08c      	sub	sp, #48	; 0x30
 8021a92:	af04      	add	r7, sp, #16
 8021a94:	60f8      	str	r0, [r7, #12]
 8021a96:	60b9      	str	r1, [r7, #8]
 8021a98:	603b      	str	r3, [r7, #0]
 8021a9a:	4613      	mov	r3, r2
 8021a9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8021a9e:	88fb      	ldrh	r3, [r7, #6]
 8021aa0:	009b      	lsls	r3, r3, #2
 8021aa2:	4618      	mov	r0, r3
 8021aa4:	f001 fdc0 	bl	8023628 <pvPortMalloc>
 8021aa8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8021aaa:	697b      	ldr	r3, [r7, #20]
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d00e      	beq.n	8021ace <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021ab0:	20ac      	movs	r0, #172	; 0xac
 8021ab2:	f001 fdb9 	bl	8023628 <pvPortMalloc>
 8021ab6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021ab8:	69fb      	ldr	r3, [r7, #28]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d003      	beq.n	8021ac6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8021abe:	69fb      	ldr	r3, [r7, #28]
 8021ac0:	697a      	ldr	r2, [r7, #20]
 8021ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8021ac4:	e005      	b.n	8021ad2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8021ac6:	6978      	ldr	r0, [r7, #20]
 8021ac8:	f001 fdf4 	bl	80236b4 <vPortFree>
 8021acc:	e001      	b.n	8021ad2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8021ace:	2300      	movs	r3, #0
 8021ad0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8021ad2:	69fb      	ldr	r3, [r7, #28]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d017      	beq.n	8021b08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8021ad8:	69fb      	ldr	r3, [r7, #28]
 8021ada:	2200      	movs	r2, #0
 8021adc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8021ae0:	88fa      	ldrh	r2, [r7, #6]
 8021ae2:	2300      	movs	r3, #0
 8021ae4:	9303      	str	r3, [sp, #12]
 8021ae6:	69fb      	ldr	r3, [r7, #28]
 8021ae8:	9302      	str	r3, [sp, #8]
 8021aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aec:	9301      	str	r3, [sp, #4]
 8021aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021af0:	9300      	str	r3, [sp, #0]
 8021af2:	683b      	ldr	r3, [r7, #0]
 8021af4:	68b9      	ldr	r1, [r7, #8]
 8021af6:	68f8      	ldr	r0, [r7, #12]
 8021af8:	f000 f80e 	bl	8021b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021afc:	69f8      	ldr	r0, [r7, #28]
 8021afe:	f000 f8b5 	bl	8021c6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8021b02:	2301      	movs	r3, #1
 8021b04:	61bb      	str	r3, [r7, #24]
 8021b06:	e002      	b.n	8021b0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8021b08:	f04f 33ff 	mov.w	r3, #4294967295
 8021b0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8021b0e:	69bb      	ldr	r3, [r7, #24]
	}
 8021b10:	4618      	mov	r0, r3
 8021b12:	3720      	adds	r7, #32
 8021b14:	46bd      	mov	sp, r7
 8021b16:	bd80      	pop	{r7, pc}

08021b18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8021b18:	b580      	push	{r7, lr}
 8021b1a:	b088      	sub	sp, #32
 8021b1c:	af00      	add	r7, sp, #0
 8021b1e:	60f8      	str	r0, [r7, #12]
 8021b20:	60b9      	str	r1, [r7, #8]
 8021b22:	607a      	str	r2, [r7, #4]
 8021b24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8021b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	009b      	lsls	r3, r3, #2
 8021b2e:	461a      	mov	r2, r3
 8021b30:	21a5      	movs	r1, #165	; 0xa5
 8021b32:	f00b fefb 	bl	802d92c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8021b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021b40:	3b01      	subs	r3, #1
 8021b42:	009b      	lsls	r3, r3, #2
 8021b44:	4413      	add	r3, r2
 8021b46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8021b48:	69bb      	ldr	r3, [r7, #24]
 8021b4a:	f023 0307 	bic.w	r3, r3, #7
 8021b4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8021b50:	69bb      	ldr	r3, [r7, #24]
 8021b52:	f003 0307 	and.w	r3, r3, #7
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d00a      	beq.n	8021b70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8021b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b5e:	f383 8811 	msr	BASEPRI, r3
 8021b62:	f3bf 8f6f 	isb	sy
 8021b66:	f3bf 8f4f 	dsb	sy
 8021b6a:	617b      	str	r3, [r7, #20]
}
 8021b6c:	bf00      	nop
 8021b6e:	e7fe      	b.n	8021b6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8021b70:	68bb      	ldr	r3, [r7, #8]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d01f      	beq.n	8021bb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021b76:	2300      	movs	r3, #0
 8021b78:	61fb      	str	r3, [r7, #28]
 8021b7a:	e012      	b.n	8021ba2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8021b7c:	68ba      	ldr	r2, [r7, #8]
 8021b7e:	69fb      	ldr	r3, [r7, #28]
 8021b80:	4413      	add	r3, r2
 8021b82:	7819      	ldrb	r1, [r3, #0]
 8021b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021b86:	69fb      	ldr	r3, [r7, #28]
 8021b88:	4413      	add	r3, r2
 8021b8a:	3334      	adds	r3, #52	; 0x34
 8021b8c:	460a      	mov	r2, r1
 8021b8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8021b90:	68ba      	ldr	r2, [r7, #8]
 8021b92:	69fb      	ldr	r3, [r7, #28]
 8021b94:	4413      	add	r3, r2
 8021b96:	781b      	ldrb	r3, [r3, #0]
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d006      	beq.n	8021baa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021b9c:	69fb      	ldr	r3, [r7, #28]
 8021b9e:	3301      	adds	r3, #1
 8021ba0:	61fb      	str	r3, [r7, #28]
 8021ba2:	69fb      	ldr	r3, [r7, #28]
 8021ba4:	2b0f      	cmp	r3, #15
 8021ba6:	d9e9      	bls.n	8021b7c <prvInitialiseNewTask+0x64>
 8021ba8:	e000      	b.n	8021bac <prvInitialiseNewTask+0x94>
			{
				break;
 8021baa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8021bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bae:	2200      	movs	r2, #0
 8021bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021bb4:	e003      	b.n	8021bbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8021bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bb8:	2200      	movs	r2, #0
 8021bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8021bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bc0:	2b37      	cmp	r3, #55	; 0x37
 8021bc2:	d901      	bls.n	8021bc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8021bc4:	2337      	movs	r3, #55	; 0x37
 8021bc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021bcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8021bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021bd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8021bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bd6:	2200      	movs	r2, #0
 8021bd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8021bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bdc:	3304      	adds	r3, #4
 8021bde:	4618      	mov	r0, r3
 8021be0:	f7fe fdc6 	bl	8020770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8021be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021be6:	3318      	adds	r3, #24
 8021be8:	4618      	mov	r0, r3
 8021bea:	f7fe fdc1 	bl	8020770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8021bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021bf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8021bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021c02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8021c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c06:	2200      	movs	r2, #0
 8021c08:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8021c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c14:	2200      	movs	r2, #0
 8021c16:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8021c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c1c:	3358      	adds	r3, #88	; 0x58
 8021c1e:	224c      	movs	r2, #76	; 0x4c
 8021c20:	2100      	movs	r1, #0
 8021c22:	4618      	mov	r0, r3
 8021c24:	f00b fe82 	bl	802d92c <memset>
 8021c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c2a:	4a0d      	ldr	r2, [pc, #52]	; (8021c60 <prvInitialiseNewTask+0x148>)
 8021c2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8021c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c30:	4a0c      	ldr	r2, [pc, #48]	; (8021c64 <prvInitialiseNewTask+0x14c>)
 8021c32:	661a      	str	r2, [r3, #96]	; 0x60
 8021c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c36:	4a0c      	ldr	r2, [pc, #48]	; (8021c68 <prvInitialiseNewTask+0x150>)
 8021c38:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8021c3a:	683a      	ldr	r2, [r7, #0]
 8021c3c:	68f9      	ldr	r1, [r7, #12]
 8021c3e:	69b8      	ldr	r0, [r7, #24]
 8021c40:	f001 faa6 	bl	8023190 <pxPortInitialiseStack>
 8021c44:	4602      	mov	r2, r0
 8021c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8021c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	d002      	beq.n	8021c56 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8021c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021c56:	bf00      	nop
 8021c58:	3720      	adds	r7, #32
 8021c5a:	46bd      	mov	sp, r7
 8021c5c:	bd80      	pop	{r7, pc}
 8021c5e:	bf00      	nop
 8021c60:	2000d9d0 	.word	0x2000d9d0
 8021c64:	2000da38 	.word	0x2000da38
 8021c68:	2000daa0 	.word	0x2000daa0

08021c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8021c6c:	b580      	push	{r7, lr}
 8021c6e:	b082      	sub	sp, #8
 8021c70:	af00      	add	r7, sp, #0
 8021c72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021c74:	f001 fbb6 	bl	80233e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021c78:	4b2d      	ldr	r3, [pc, #180]	; (8021d30 <prvAddNewTaskToReadyList+0xc4>)
 8021c7a:	681b      	ldr	r3, [r3, #0]
 8021c7c:	3301      	adds	r3, #1
 8021c7e:	4a2c      	ldr	r2, [pc, #176]	; (8021d30 <prvAddNewTaskToReadyList+0xc4>)
 8021c80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021c82:	4b2c      	ldr	r3, [pc, #176]	; (8021d34 <prvAddNewTaskToReadyList+0xc8>)
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d109      	bne.n	8021c9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8021c8a:	4a2a      	ldr	r2, [pc, #168]	; (8021d34 <prvAddNewTaskToReadyList+0xc8>)
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021c90:	4b27      	ldr	r3, [pc, #156]	; (8021d30 <prvAddNewTaskToReadyList+0xc4>)
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	2b01      	cmp	r3, #1
 8021c96:	d110      	bne.n	8021cba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021c98:	f000 fc44 	bl	8022524 <prvInitialiseTaskLists>
 8021c9c:	e00d      	b.n	8021cba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8021c9e:	4b26      	ldr	r3, [pc, #152]	; (8021d38 <prvAddNewTaskToReadyList+0xcc>)
 8021ca0:	681b      	ldr	r3, [r3, #0]
 8021ca2:	2b00      	cmp	r3, #0
 8021ca4:	d109      	bne.n	8021cba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021ca6:	4b23      	ldr	r3, [pc, #140]	; (8021d34 <prvAddNewTaskToReadyList+0xc8>)
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021cac:	687b      	ldr	r3, [r7, #4]
 8021cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cb0:	429a      	cmp	r2, r3
 8021cb2:	d802      	bhi.n	8021cba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021cb4:	4a1f      	ldr	r2, [pc, #124]	; (8021d34 <prvAddNewTaskToReadyList+0xc8>)
 8021cb6:	687b      	ldr	r3, [r7, #4]
 8021cb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8021cba:	4b20      	ldr	r3, [pc, #128]	; (8021d3c <prvAddNewTaskToReadyList+0xd0>)
 8021cbc:	681b      	ldr	r3, [r3, #0]
 8021cbe:	3301      	adds	r3, #1
 8021cc0:	4a1e      	ldr	r2, [pc, #120]	; (8021d3c <prvAddNewTaskToReadyList+0xd0>)
 8021cc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021cc4:	4b1d      	ldr	r3, [pc, #116]	; (8021d3c <prvAddNewTaskToReadyList+0xd0>)
 8021cc6:	681a      	ldr	r2, [r3, #0]
 8021cc8:	687b      	ldr	r3, [r7, #4]
 8021cca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021cd0:	4b1b      	ldr	r3, [pc, #108]	; (8021d40 <prvAddNewTaskToReadyList+0xd4>)
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	429a      	cmp	r2, r3
 8021cd6:	d903      	bls.n	8021ce0 <prvAddNewTaskToReadyList+0x74>
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cdc:	4a18      	ldr	r2, [pc, #96]	; (8021d40 <prvAddNewTaskToReadyList+0xd4>)
 8021cde:	6013      	str	r3, [r2, #0]
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ce4:	4613      	mov	r3, r2
 8021ce6:	009b      	lsls	r3, r3, #2
 8021ce8:	4413      	add	r3, r2
 8021cea:	009b      	lsls	r3, r3, #2
 8021cec:	4a15      	ldr	r2, [pc, #84]	; (8021d44 <prvAddNewTaskToReadyList+0xd8>)
 8021cee:	441a      	add	r2, r3
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	3304      	adds	r3, #4
 8021cf4:	4619      	mov	r1, r3
 8021cf6:	4610      	mov	r0, r2
 8021cf8:	f7fe fd47 	bl	802078a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8021cfc:	f001 fba2 	bl	8023444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021d00:	4b0d      	ldr	r3, [pc, #52]	; (8021d38 <prvAddNewTaskToReadyList+0xcc>)
 8021d02:	681b      	ldr	r3, [r3, #0]
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d00e      	beq.n	8021d26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021d08:	4b0a      	ldr	r3, [pc, #40]	; (8021d34 <prvAddNewTaskToReadyList+0xc8>)
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d12:	429a      	cmp	r2, r3
 8021d14:	d207      	bcs.n	8021d26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021d16:	4b0c      	ldr	r3, [pc, #48]	; (8021d48 <prvAddNewTaskToReadyList+0xdc>)
 8021d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021d1c:	601a      	str	r2, [r3, #0]
 8021d1e:	f3bf 8f4f 	dsb	sy
 8021d22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021d26:	bf00      	nop
 8021d28:	3708      	adds	r7, #8
 8021d2a:	46bd      	mov	sp, r7
 8021d2c:	bd80      	pop	{r7, pc}
 8021d2e:	bf00      	nop
 8021d30:	2000222c 	.word	0x2000222c
 8021d34:	20001d58 	.word	0x20001d58
 8021d38:	20002238 	.word	0x20002238
 8021d3c:	20002248 	.word	0x20002248
 8021d40:	20002234 	.word	0x20002234
 8021d44:	20001d5c 	.word	0x20001d5c
 8021d48:	e000ed04 	.word	0xe000ed04

08021d4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8021d4c:	b580      	push	{r7, lr}
 8021d4e:	b084      	sub	sp, #16
 8021d50:	af00      	add	r7, sp, #0
 8021d52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021d54:	2300      	movs	r3, #0
 8021d56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d017      	beq.n	8021d8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8021d5e:	4b13      	ldr	r3, [pc, #76]	; (8021dac <vTaskDelay+0x60>)
 8021d60:	681b      	ldr	r3, [r3, #0]
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	d00a      	beq.n	8021d7c <vTaskDelay+0x30>
	__asm volatile
 8021d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d6a:	f383 8811 	msr	BASEPRI, r3
 8021d6e:	f3bf 8f6f 	isb	sy
 8021d72:	f3bf 8f4f 	dsb	sy
 8021d76:	60bb      	str	r3, [r7, #8]
}
 8021d78:	bf00      	nop
 8021d7a:	e7fe      	b.n	8021d7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8021d7c:	f000 f88c 	bl	8021e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021d80:	2100      	movs	r1, #0
 8021d82:	6878      	ldr	r0, [r7, #4]
 8021d84:	f000 fe62 	bl	8022a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021d88:	f000 f894 	bl	8021eb4 <xTaskResumeAll>
 8021d8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8021d8e:	68fb      	ldr	r3, [r7, #12]
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d107      	bne.n	8021da4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8021d94:	4b06      	ldr	r3, [pc, #24]	; (8021db0 <vTaskDelay+0x64>)
 8021d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021d9a:	601a      	str	r2, [r3, #0]
 8021d9c:	f3bf 8f4f 	dsb	sy
 8021da0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021da4:	bf00      	nop
 8021da6:	3710      	adds	r7, #16
 8021da8:	46bd      	mov	sp, r7
 8021daa:	bd80      	pop	{r7, pc}
 8021dac:	20002254 	.word	0x20002254
 8021db0:	e000ed04 	.word	0xe000ed04

08021db4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b08a      	sub	sp, #40	; 0x28
 8021db8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8021dba:	2300      	movs	r3, #0
 8021dbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8021dbe:	2300      	movs	r3, #0
 8021dc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021dc2:	463a      	mov	r2, r7
 8021dc4:	1d39      	adds	r1, r7, #4
 8021dc6:	f107 0308 	add.w	r3, r7, #8
 8021dca:	4618      	mov	r0, r3
 8021dcc:	f7fe fc7c 	bl	80206c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021dd0:	6839      	ldr	r1, [r7, #0]
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	68ba      	ldr	r2, [r7, #8]
 8021dd6:	9202      	str	r2, [sp, #8]
 8021dd8:	9301      	str	r3, [sp, #4]
 8021dda:	2300      	movs	r3, #0
 8021ddc:	9300      	str	r3, [sp, #0]
 8021dde:	2300      	movs	r3, #0
 8021de0:	460a      	mov	r2, r1
 8021de2:	4925      	ldr	r1, [pc, #148]	; (8021e78 <vTaskStartScheduler+0xc4>)
 8021de4:	4825      	ldr	r0, [pc, #148]	; (8021e7c <vTaskStartScheduler+0xc8>)
 8021de6:	f7ff fdf5 	bl	80219d4 <xTaskCreateStatic>
 8021dea:	4603      	mov	r3, r0
 8021dec:	4a24      	ldr	r2, [pc, #144]	; (8021e80 <vTaskStartScheduler+0xcc>)
 8021dee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8021df0:	4b23      	ldr	r3, [pc, #140]	; (8021e80 <vTaskStartScheduler+0xcc>)
 8021df2:	681b      	ldr	r3, [r3, #0]
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	d002      	beq.n	8021dfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8021df8:	2301      	movs	r3, #1
 8021dfa:	617b      	str	r3, [r7, #20]
 8021dfc:	e001      	b.n	8021e02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8021dfe:	2300      	movs	r3, #0
 8021e00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8021e02:	697b      	ldr	r3, [r7, #20]
 8021e04:	2b01      	cmp	r3, #1
 8021e06:	d102      	bne.n	8021e0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8021e08:	f000 fe74 	bl	8022af4 <xTimerCreateTimerTask>
 8021e0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8021e0e:	697b      	ldr	r3, [r7, #20]
 8021e10:	2b01      	cmp	r3, #1
 8021e12:	d11d      	bne.n	8021e50 <vTaskStartScheduler+0x9c>
	__asm volatile
 8021e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021e18:	f383 8811 	msr	BASEPRI, r3
 8021e1c:	f3bf 8f6f 	isb	sy
 8021e20:	f3bf 8f4f 	dsb	sy
 8021e24:	613b      	str	r3, [r7, #16]
}
 8021e26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021e28:	4b16      	ldr	r3, [pc, #88]	; (8021e84 <vTaskStartScheduler+0xd0>)
 8021e2a:	681b      	ldr	r3, [r3, #0]
 8021e2c:	3358      	adds	r3, #88	; 0x58
 8021e2e:	4a16      	ldr	r2, [pc, #88]	; (8021e88 <vTaskStartScheduler+0xd4>)
 8021e30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8021e32:	4b16      	ldr	r3, [pc, #88]	; (8021e8c <vTaskStartScheduler+0xd8>)
 8021e34:	f04f 32ff 	mov.w	r2, #4294967295
 8021e38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8021e3a:	4b15      	ldr	r3, [pc, #84]	; (8021e90 <vTaskStartScheduler+0xdc>)
 8021e3c:	2201      	movs	r2, #1
 8021e3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8021e40:	4b14      	ldr	r3, [pc, #80]	; (8021e94 <vTaskStartScheduler+0xe0>)
 8021e42:	2200      	movs	r2, #0
 8021e44:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8021e46:	f7ef f8ff 	bl	8011048 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8021e4a:	f001 fa29 	bl	80232a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8021e4e:	e00e      	b.n	8021e6e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8021e50:	697b      	ldr	r3, [r7, #20]
 8021e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e56:	d10a      	bne.n	8021e6e <vTaskStartScheduler+0xba>
	__asm volatile
 8021e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021e5c:	f383 8811 	msr	BASEPRI, r3
 8021e60:	f3bf 8f6f 	isb	sy
 8021e64:	f3bf 8f4f 	dsb	sy
 8021e68:	60fb      	str	r3, [r7, #12]
}
 8021e6a:	bf00      	nop
 8021e6c:	e7fe      	b.n	8021e6c <vTaskStartScheduler+0xb8>
}
 8021e6e:	bf00      	nop
 8021e70:	3718      	adds	r7, #24
 8021e72:	46bd      	mov	sp, r7
 8021e74:	bd80      	pop	{r7, pc}
 8021e76:	bf00      	nop
 8021e78:	08033634 	.word	0x08033634
 8021e7c:	080224f5 	.word	0x080224f5
 8021e80:	20002250 	.word	0x20002250
 8021e84:	20001d58 	.word	0x20001d58
 8021e88:	20000188 	.word	0x20000188
 8021e8c:	2000224c 	.word	0x2000224c
 8021e90:	20002238 	.word	0x20002238
 8021e94:	20002230 	.word	0x20002230

08021e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8021e98:	b480      	push	{r7}
 8021e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8021e9c:	4b04      	ldr	r3, [pc, #16]	; (8021eb0 <vTaskSuspendAll+0x18>)
 8021e9e:	681b      	ldr	r3, [r3, #0]
 8021ea0:	3301      	adds	r3, #1
 8021ea2:	4a03      	ldr	r2, [pc, #12]	; (8021eb0 <vTaskSuspendAll+0x18>)
 8021ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8021ea6:	bf00      	nop
 8021ea8:	46bd      	mov	sp, r7
 8021eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eae:	4770      	bx	lr
 8021eb0:	20002254 	.word	0x20002254

08021eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8021eb4:	b580      	push	{r7, lr}
 8021eb6:	b084      	sub	sp, #16
 8021eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8021eba:	2300      	movs	r3, #0
 8021ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8021ebe:	2300      	movs	r3, #0
 8021ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8021ec2:	4b42      	ldr	r3, [pc, #264]	; (8021fcc <xTaskResumeAll+0x118>)
 8021ec4:	681b      	ldr	r3, [r3, #0]
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	d10a      	bne.n	8021ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8021eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ece:	f383 8811 	msr	BASEPRI, r3
 8021ed2:	f3bf 8f6f 	isb	sy
 8021ed6:	f3bf 8f4f 	dsb	sy
 8021eda:	603b      	str	r3, [r7, #0]
}
 8021edc:	bf00      	nop
 8021ede:	e7fe      	b.n	8021ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8021ee0:	f001 fa80 	bl	80233e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8021ee4:	4b39      	ldr	r3, [pc, #228]	; (8021fcc <xTaskResumeAll+0x118>)
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	3b01      	subs	r3, #1
 8021eea:	4a38      	ldr	r2, [pc, #224]	; (8021fcc <xTaskResumeAll+0x118>)
 8021eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021eee:	4b37      	ldr	r3, [pc, #220]	; (8021fcc <xTaskResumeAll+0x118>)
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d162      	bne.n	8021fbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8021ef6:	4b36      	ldr	r3, [pc, #216]	; (8021fd0 <xTaskResumeAll+0x11c>)
 8021ef8:	681b      	ldr	r3, [r3, #0]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d05e      	beq.n	8021fbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021efe:	e02f      	b.n	8021f60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021f00:	4b34      	ldr	r3, [pc, #208]	; (8021fd4 <xTaskResumeAll+0x120>)
 8021f02:	68db      	ldr	r3, [r3, #12]
 8021f04:	68db      	ldr	r3, [r3, #12]
 8021f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	3318      	adds	r3, #24
 8021f0c:	4618      	mov	r0, r3
 8021f0e:	f7fe fc99 	bl	8020844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021f12:	68fb      	ldr	r3, [r7, #12]
 8021f14:	3304      	adds	r3, #4
 8021f16:	4618      	mov	r0, r3
 8021f18:	f7fe fc94 	bl	8020844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8021f1c:	68fb      	ldr	r3, [r7, #12]
 8021f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f20:	4b2d      	ldr	r3, [pc, #180]	; (8021fd8 <xTaskResumeAll+0x124>)
 8021f22:	681b      	ldr	r3, [r3, #0]
 8021f24:	429a      	cmp	r2, r3
 8021f26:	d903      	bls.n	8021f30 <xTaskResumeAll+0x7c>
 8021f28:	68fb      	ldr	r3, [r7, #12]
 8021f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f2c:	4a2a      	ldr	r2, [pc, #168]	; (8021fd8 <xTaskResumeAll+0x124>)
 8021f2e:	6013      	str	r3, [r2, #0]
 8021f30:	68fb      	ldr	r3, [r7, #12]
 8021f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f34:	4613      	mov	r3, r2
 8021f36:	009b      	lsls	r3, r3, #2
 8021f38:	4413      	add	r3, r2
 8021f3a:	009b      	lsls	r3, r3, #2
 8021f3c:	4a27      	ldr	r2, [pc, #156]	; (8021fdc <xTaskResumeAll+0x128>)
 8021f3e:	441a      	add	r2, r3
 8021f40:	68fb      	ldr	r3, [r7, #12]
 8021f42:	3304      	adds	r3, #4
 8021f44:	4619      	mov	r1, r3
 8021f46:	4610      	mov	r0, r2
 8021f48:	f7fe fc1f 	bl	802078a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021f4c:	68fb      	ldr	r3, [r7, #12]
 8021f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f50:	4b23      	ldr	r3, [pc, #140]	; (8021fe0 <xTaskResumeAll+0x12c>)
 8021f52:	681b      	ldr	r3, [r3, #0]
 8021f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f56:	429a      	cmp	r2, r3
 8021f58:	d302      	bcc.n	8021f60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8021f5a:	4b22      	ldr	r3, [pc, #136]	; (8021fe4 <xTaskResumeAll+0x130>)
 8021f5c:	2201      	movs	r2, #1
 8021f5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021f60:	4b1c      	ldr	r3, [pc, #112]	; (8021fd4 <xTaskResumeAll+0x120>)
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d1cb      	bne.n	8021f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8021f68:	68fb      	ldr	r3, [r7, #12]
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	d001      	beq.n	8021f72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8021f6e:	f000 fbb3 	bl	80226d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8021f72:	4b1d      	ldr	r3, [pc, #116]	; (8021fe8 <xTaskResumeAll+0x134>)
 8021f74:	681b      	ldr	r3, [r3, #0]
 8021f76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d010      	beq.n	8021fa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8021f7e:	f000 f847 	bl	8022010 <xTaskIncrementTick>
 8021f82:	4603      	mov	r3, r0
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d002      	beq.n	8021f8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8021f88:	4b16      	ldr	r3, [pc, #88]	; (8021fe4 <xTaskResumeAll+0x130>)
 8021f8a:	2201      	movs	r2, #1
 8021f8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	3b01      	subs	r3, #1
 8021f92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	2b00      	cmp	r3, #0
 8021f98:	d1f1      	bne.n	8021f7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8021f9a:	4b13      	ldr	r3, [pc, #76]	; (8021fe8 <xTaskResumeAll+0x134>)
 8021f9c:	2200      	movs	r2, #0
 8021f9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8021fa0:	4b10      	ldr	r3, [pc, #64]	; (8021fe4 <xTaskResumeAll+0x130>)
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d009      	beq.n	8021fbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8021fa8:	2301      	movs	r3, #1
 8021faa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8021fac:	4b0f      	ldr	r3, [pc, #60]	; (8021fec <xTaskResumeAll+0x138>)
 8021fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021fb2:	601a      	str	r2, [r3, #0]
 8021fb4:	f3bf 8f4f 	dsb	sy
 8021fb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021fbc:	f001 fa42 	bl	8023444 <vPortExitCritical>

	return xAlreadyYielded;
 8021fc0:	68bb      	ldr	r3, [r7, #8]
}
 8021fc2:	4618      	mov	r0, r3
 8021fc4:	3710      	adds	r7, #16
 8021fc6:	46bd      	mov	sp, r7
 8021fc8:	bd80      	pop	{r7, pc}
 8021fca:	bf00      	nop
 8021fcc:	20002254 	.word	0x20002254
 8021fd0:	2000222c 	.word	0x2000222c
 8021fd4:	200021ec 	.word	0x200021ec
 8021fd8:	20002234 	.word	0x20002234
 8021fdc:	20001d5c 	.word	0x20001d5c
 8021fe0:	20001d58 	.word	0x20001d58
 8021fe4:	20002240 	.word	0x20002240
 8021fe8:	2000223c 	.word	0x2000223c
 8021fec:	e000ed04 	.word	0xe000ed04

08021ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8021ff0:	b480      	push	{r7}
 8021ff2:	b083      	sub	sp, #12
 8021ff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8021ff6:	4b05      	ldr	r3, [pc, #20]	; (802200c <xTaskGetTickCount+0x1c>)
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8021ffc:	687b      	ldr	r3, [r7, #4]
}
 8021ffe:	4618      	mov	r0, r3
 8022000:	370c      	adds	r7, #12
 8022002:	46bd      	mov	sp, r7
 8022004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022008:	4770      	bx	lr
 802200a:	bf00      	nop
 802200c:	20002230 	.word	0x20002230

08022010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8022010:	b580      	push	{r7, lr}
 8022012:	b086      	sub	sp, #24
 8022014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8022016:	2300      	movs	r3, #0
 8022018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802201a:	4b4f      	ldr	r3, [pc, #316]	; (8022158 <xTaskIncrementTick+0x148>)
 802201c:	681b      	ldr	r3, [r3, #0]
 802201e:	2b00      	cmp	r3, #0
 8022020:	f040 808f 	bne.w	8022142 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8022024:	4b4d      	ldr	r3, [pc, #308]	; (802215c <xTaskIncrementTick+0x14c>)
 8022026:	681b      	ldr	r3, [r3, #0]
 8022028:	3301      	adds	r3, #1
 802202a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802202c:	4a4b      	ldr	r2, [pc, #300]	; (802215c <xTaskIncrementTick+0x14c>)
 802202e:	693b      	ldr	r3, [r7, #16]
 8022030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8022032:	693b      	ldr	r3, [r7, #16]
 8022034:	2b00      	cmp	r3, #0
 8022036:	d120      	bne.n	802207a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8022038:	4b49      	ldr	r3, [pc, #292]	; (8022160 <xTaskIncrementTick+0x150>)
 802203a:	681b      	ldr	r3, [r3, #0]
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	2b00      	cmp	r3, #0
 8022040:	d00a      	beq.n	8022058 <xTaskIncrementTick+0x48>
	__asm volatile
 8022042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022046:	f383 8811 	msr	BASEPRI, r3
 802204a:	f3bf 8f6f 	isb	sy
 802204e:	f3bf 8f4f 	dsb	sy
 8022052:	603b      	str	r3, [r7, #0]
}
 8022054:	bf00      	nop
 8022056:	e7fe      	b.n	8022056 <xTaskIncrementTick+0x46>
 8022058:	4b41      	ldr	r3, [pc, #260]	; (8022160 <xTaskIncrementTick+0x150>)
 802205a:	681b      	ldr	r3, [r3, #0]
 802205c:	60fb      	str	r3, [r7, #12]
 802205e:	4b41      	ldr	r3, [pc, #260]	; (8022164 <xTaskIncrementTick+0x154>)
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	4a3f      	ldr	r2, [pc, #252]	; (8022160 <xTaskIncrementTick+0x150>)
 8022064:	6013      	str	r3, [r2, #0]
 8022066:	4a3f      	ldr	r2, [pc, #252]	; (8022164 <xTaskIncrementTick+0x154>)
 8022068:	68fb      	ldr	r3, [r7, #12]
 802206a:	6013      	str	r3, [r2, #0]
 802206c:	4b3e      	ldr	r3, [pc, #248]	; (8022168 <xTaskIncrementTick+0x158>)
 802206e:	681b      	ldr	r3, [r3, #0]
 8022070:	3301      	adds	r3, #1
 8022072:	4a3d      	ldr	r2, [pc, #244]	; (8022168 <xTaskIncrementTick+0x158>)
 8022074:	6013      	str	r3, [r2, #0]
 8022076:	f000 fb2f 	bl	80226d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802207a:	4b3c      	ldr	r3, [pc, #240]	; (802216c <xTaskIncrementTick+0x15c>)
 802207c:	681b      	ldr	r3, [r3, #0]
 802207e:	693a      	ldr	r2, [r7, #16]
 8022080:	429a      	cmp	r2, r3
 8022082:	d349      	bcc.n	8022118 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022084:	4b36      	ldr	r3, [pc, #216]	; (8022160 <xTaskIncrementTick+0x150>)
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	681b      	ldr	r3, [r3, #0]
 802208a:	2b00      	cmp	r3, #0
 802208c:	d104      	bne.n	8022098 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802208e:	4b37      	ldr	r3, [pc, #220]	; (802216c <xTaskIncrementTick+0x15c>)
 8022090:	f04f 32ff 	mov.w	r2, #4294967295
 8022094:	601a      	str	r2, [r3, #0]
					break;
 8022096:	e03f      	b.n	8022118 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022098:	4b31      	ldr	r3, [pc, #196]	; (8022160 <xTaskIncrementTick+0x150>)
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	68db      	ldr	r3, [r3, #12]
 802209e:	68db      	ldr	r3, [r3, #12]
 80220a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80220a2:	68bb      	ldr	r3, [r7, #8]
 80220a4:	685b      	ldr	r3, [r3, #4]
 80220a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80220a8:	693a      	ldr	r2, [r7, #16]
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	429a      	cmp	r2, r3
 80220ae:	d203      	bcs.n	80220b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80220b0:	4a2e      	ldr	r2, [pc, #184]	; (802216c <xTaskIncrementTick+0x15c>)
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80220b6:	e02f      	b.n	8022118 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80220b8:	68bb      	ldr	r3, [r7, #8]
 80220ba:	3304      	adds	r3, #4
 80220bc:	4618      	mov	r0, r3
 80220be:	f7fe fbc1 	bl	8020844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80220c2:	68bb      	ldr	r3, [r7, #8]
 80220c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220c6:	2b00      	cmp	r3, #0
 80220c8:	d004      	beq.n	80220d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80220ca:	68bb      	ldr	r3, [r7, #8]
 80220cc:	3318      	adds	r3, #24
 80220ce:	4618      	mov	r0, r3
 80220d0:	f7fe fbb8 	bl	8020844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80220d4:	68bb      	ldr	r3, [r7, #8]
 80220d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80220d8:	4b25      	ldr	r3, [pc, #148]	; (8022170 <xTaskIncrementTick+0x160>)
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	429a      	cmp	r2, r3
 80220de:	d903      	bls.n	80220e8 <xTaskIncrementTick+0xd8>
 80220e0:	68bb      	ldr	r3, [r7, #8]
 80220e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220e4:	4a22      	ldr	r2, [pc, #136]	; (8022170 <xTaskIncrementTick+0x160>)
 80220e6:	6013      	str	r3, [r2, #0]
 80220e8:	68bb      	ldr	r3, [r7, #8]
 80220ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80220ec:	4613      	mov	r3, r2
 80220ee:	009b      	lsls	r3, r3, #2
 80220f0:	4413      	add	r3, r2
 80220f2:	009b      	lsls	r3, r3, #2
 80220f4:	4a1f      	ldr	r2, [pc, #124]	; (8022174 <xTaskIncrementTick+0x164>)
 80220f6:	441a      	add	r2, r3
 80220f8:	68bb      	ldr	r3, [r7, #8]
 80220fa:	3304      	adds	r3, #4
 80220fc:	4619      	mov	r1, r3
 80220fe:	4610      	mov	r0, r2
 8022100:	f7fe fb43 	bl	802078a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022104:	68bb      	ldr	r3, [r7, #8]
 8022106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022108:	4b1b      	ldr	r3, [pc, #108]	; (8022178 <xTaskIncrementTick+0x168>)
 802210a:	681b      	ldr	r3, [r3, #0]
 802210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802210e:	429a      	cmp	r2, r3
 8022110:	d3b8      	bcc.n	8022084 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8022112:	2301      	movs	r3, #1
 8022114:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022116:	e7b5      	b.n	8022084 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8022118:	4b17      	ldr	r3, [pc, #92]	; (8022178 <xTaskIncrementTick+0x168>)
 802211a:	681b      	ldr	r3, [r3, #0]
 802211c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802211e:	4915      	ldr	r1, [pc, #84]	; (8022174 <xTaskIncrementTick+0x164>)
 8022120:	4613      	mov	r3, r2
 8022122:	009b      	lsls	r3, r3, #2
 8022124:	4413      	add	r3, r2
 8022126:	009b      	lsls	r3, r3, #2
 8022128:	440b      	add	r3, r1
 802212a:	681b      	ldr	r3, [r3, #0]
 802212c:	2b01      	cmp	r3, #1
 802212e:	d901      	bls.n	8022134 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8022130:	2301      	movs	r3, #1
 8022132:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8022134:	4b11      	ldr	r3, [pc, #68]	; (802217c <xTaskIncrementTick+0x16c>)
 8022136:	681b      	ldr	r3, [r3, #0]
 8022138:	2b00      	cmp	r3, #0
 802213a:	d007      	beq.n	802214c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 802213c:	2301      	movs	r3, #1
 802213e:	617b      	str	r3, [r7, #20]
 8022140:	e004      	b.n	802214c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8022142:	4b0f      	ldr	r3, [pc, #60]	; (8022180 <xTaskIncrementTick+0x170>)
 8022144:	681b      	ldr	r3, [r3, #0]
 8022146:	3301      	adds	r3, #1
 8022148:	4a0d      	ldr	r2, [pc, #52]	; (8022180 <xTaskIncrementTick+0x170>)
 802214a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 802214c:	697b      	ldr	r3, [r7, #20]
}
 802214e:	4618      	mov	r0, r3
 8022150:	3718      	adds	r7, #24
 8022152:	46bd      	mov	sp, r7
 8022154:	bd80      	pop	{r7, pc}
 8022156:	bf00      	nop
 8022158:	20002254 	.word	0x20002254
 802215c:	20002230 	.word	0x20002230
 8022160:	200021e4 	.word	0x200021e4
 8022164:	200021e8 	.word	0x200021e8
 8022168:	20002244 	.word	0x20002244
 802216c:	2000224c 	.word	0x2000224c
 8022170:	20002234 	.word	0x20002234
 8022174:	20001d5c 	.word	0x20001d5c
 8022178:	20001d58 	.word	0x20001d58
 802217c:	20002240 	.word	0x20002240
 8022180:	2000223c 	.word	0x2000223c

08022184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8022184:	b580      	push	{r7, lr}
 8022186:	b084      	sub	sp, #16
 8022188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802218a:	4b36      	ldr	r3, [pc, #216]	; (8022264 <vTaskSwitchContext+0xe0>)
 802218c:	681b      	ldr	r3, [r3, #0]
 802218e:	2b00      	cmp	r3, #0
 8022190:	d003      	beq.n	802219a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8022192:	4b35      	ldr	r3, [pc, #212]	; (8022268 <vTaskSwitchContext+0xe4>)
 8022194:	2201      	movs	r2, #1
 8022196:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8022198:	e05f      	b.n	802225a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 802219a:	4b33      	ldr	r3, [pc, #204]	; (8022268 <vTaskSwitchContext+0xe4>)
 802219c:	2200      	movs	r2, #0
 802219e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80221a0:	f7ee ff59 	bl	8011056 <getRunTimeCounterValue>
 80221a4:	4603      	mov	r3, r0
 80221a6:	4a31      	ldr	r2, [pc, #196]	; (802226c <vTaskSwitchContext+0xe8>)
 80221a8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80221aa:	4b30      	ldr	r3, [pc, #192]	; (802226c <vTaskSwitchContext+0xe8>)
 80221ac:	681a      	ldr	r2, [r3, #0]
 80221ae:	4b30      	ldr	r3, [pc, #192]	; (8022270 <vTaskSwitchContext+0xec>)
 80221b0:	681b      	ldr	r3, [r3, #0]
 80221b2:	429a      	cmp	r2, r3
 80221b4:	d909      	bls.n	80221ca <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80221b6:	4b2f      	ldr	r3, [pc, #188]	; (8022274 <vTaskSwitchContext+0xf0>)
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80221bc:	4a2b      	ldr	r2, [pc, #172]	; (802226c <vTaskSwitchContext+0xe8>)
 80221be:	6810      	ldr	r0, [r2, #0]
 80221c0:	4a2b      	ldr	r2, [pc, #172]	; (8022270 <vTaskSwitchContext+0xec>)
 80221c2:	6812      	ldr	r2, [r2, #0]
 80221c4:	1a82      	subs	r2, r0, r2
 80221c6:	440a      	add	r2, r1
 80221c8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80221ca:	4b28      	ldr	r3, [pc, #160]	; (802226c <vTaskSwitchContext+0xe8>)
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	4a28      	ldr	r2, [pc, #160]	; (8022270 <vTaskSwitchContext+0xec>)
 80221d0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80221d2:	4b29      	ldr	r3, [pc, #164]	; (8022278 <vTaskSwitchContext+0xf4>)
 80221d4:	681b      	ldr	r3, [r3, #0]
 80221d6:	60fb      	str	r3, [r7, #12]
 80221d8:	e010      	b.n	80221fc <vTaskSwitchContext+0x78>
 80221da:	68fb      	ldr	r3, [r7, #12]
 80221dc:	2b00      	cmp	r3, #0
 80221de:	d10a      	bne.n	80221f6 <vTaskSwitchContext+0x72>
	__asm volatile
 80221e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221e4:	f383 8811 	msr	BASEPRI, r3
 80221e8:	f3bf 8f6f 	isb	sy
 80221ec:	f3bf 8f4f 	dsb	sy
 80221f0:	607b      	str	r3, [r7, #4]
}
 80221f2:	bf00      	nop
 80221f4:	e7fe      	b.n	80221f4 <vTaskSwitchContext+0x70>
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	3b01      	subs	r3, #1
 80221fa:	60fb      	str	r3, [r7, #12]
 80221fc:	491f      	ldr	r1, [pc, #124]	; (802227c <vTaskSwitchContext+0xf8>)
 80221fe:	68fa      	ldr	r2, [r7, #12]
 8022200:	4613      	mov	r3, r2
 8022202:	009b      	lsls	r3, r3, #2
 8022204:	4413      	add	r3, r2
 8022206:	009b      	lsls	r3, r3, #2
 8022208:	440b      	add	r3, r1
 802220a:	681b      	ldr	r3, [r3, #0]
 802220c:	2b00      	cmp	r3, #0
 802220e:	d0e4      	beq.n	80221da <vTaskSwitchContext+0x56>
 8022210:	68fa      	ldr	r2, [r7, #12]
 8022212:	4613      	mov	r3, r2
 8022214:	009b      	lsls	r3, r3, #2
 8022216:	4413      	add	r3, r2
 8022218:	009b      	lsls	r3, r3, #2
 802221a:	4a18      	ldr	r2, [pc, #96]	; (802227c <vTaskSwitchContext+0xf8>)
 802221c:	4413      	add	r3, r2
 802221e:	60bb      	str	r3, [r7, #8]
 8022220:	68bb      	ldr	r3, [r7, #8]
 8022222:	685b      	ldr	r3, [r3, #4]
 8022224:	685a      	ldr	r2, [r3, #4]
 8022226:	68bb      	ldr	r3, [r7, #8]
 8022228:	605a      	str	r2, [r3, #4]
 802222a:	68bb      	ldr	r3, [r7, #8]
 802222c:	685a      	ldr	r2, [r3, #4]
 802222e:	68bb      	ldr	r3, [r7, #8]
 8022230:	3308      	adds	r3, #8
 8022232:	429a      	cmp	r2, r3
 8022234:	d104      	bne.n	8022240 <vTaskSwitchContext+0xbc>
 8022236:	68bb      	ldr	r3, [r7, #8]
 8022238:	685b      	ldr	r3, [r3, #4]
 802223a:	685a      	ldr	r2, [r3, #4]
 802223c:	68bb      	ldr	r3, [r7, #8]
 802223e:	605a      	str	r2, [r3, #4]
 8022240:	68bb      	ldr	r3, [r7, #8]
 8022242:	685b      	ldr	r3, [r3, #4]
 8022244:	68db      	ldr	r3, [r3, #12]
 8022246:	4a0b      	ldr	r2, [pc, #44]	; (8022274 <vTaskSwitchContext+0xf0>)
 8022248:	6013      	str	r3, [r2, #0]
 802224a:	4a0b      	ldr	r2, [pc, #44]	; (8022278 <vTaskSwitchContext+0xf4>)
 802224c:	68fb      	ldr	r3, [r7, #12]
 802224e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8022250:	4b08      	ldr	r3, [pc, #32]	; (8022274 <vTaskSwitchContext+0xf0>)
 8022252:	681b      	ldr	r3, [r3, #0]
 8022254:	3358      	adds	r3, #88	; 0x58
 8022256:	4a0a      	ldr	r2, [pc, #40]	; (8022280 <vTaskSwitchContext+0xfc>)
 8022258:	6013      	str	r3, [r2, #0]
}
 802225a:	bf00      	nop
 802225c:	3710      	adds	r7, #16
 802225e:	46bd      	mov	sp, r7
 8022260:	bd80      	pop	{r7, pc}
 8022262:	bf00      	nop
 8022264:	20002254 	.word	0x20002254
 8022268:	20002240 	.word	0x20002240
 802226c:	2000225c 	.word	0x2000225c
 8022270:	20002258 	.word	0x20002258
 8022274:	20001d58 	.word	0x20001d58
 8022278:	20002234 	.word	0x20002234
 802227c:	20001d5c 	.word	0x20001d5c
 8022280:	20000188 	.word	0x20000188

08022284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8022284:	b580      	push	{r7, lr}
 8022286:	b084      	sub	sp, #16
 8022288:	af00      	add	r7, sp, #0
 802228a:	6078      	str	r0, [r7, #4]
 802228c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	2b00      	cmp	r3, #0
 8022292:	d10a      	bne.n	80222aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8022294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022298:	f383 8811 	msr	BASEPRI, r3
 802229c:	f3bf 8f6f 	isb	sy
 80222a0:	f3bf 8f4f 	dsb	sy
 80222a4:	60fb      	str	r3, [r7, #12]
}
 80222a6:	bf00      	nop
 80222a8:	e7fe      	b.n	80222a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80222aa:	4b07      	ldr	r3, [pc, #28]	; (80222c8 <vTaskPlaceOnEventList+0x44>)
 80222ac:	681b      	ldr	r3, [r3, #0]
 80222ae:	3318      	adds	r3, #24
 80222b0:	4619      	mov	r1, r3
 80222b2:	6878      	ldr	r0, [r7, #4]
 80222b4:	f7fe fa8d 	bl	80207d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80222b8:	2101      	movs	r1, #1
 80222ba:	6838      	ldr	r0, [r7, #0]
 80222bc:	f000 fbc6 	bl	8022a4c <prvAddCurrentTaskToDelayedList>
}
 80222c0:	bf00      	nop
 80222c2:	3710      	adds	r7, #16
 80222c4:	46bd      	mov	sp, r7
 80222c6:	bd80      	pop	{r7, pc}
 80222c8:	20001d58 	.word	0x20001d58

080222cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80222cc:	b580      	push	{r7, lr}
 80222ce:	b086      	sub	sp, #24
 80222d0:	af00      	add	r7, sp, #0
 80222d2:	60f8      	str	r0, [r7, #12]
 80222d4:	60b9      	str	r1, [r7, #8]
 80222d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80222d8:	68fb      	ldr	r3, [r7, #12]
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d10a      	bne.n	80222f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80222de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80222e2:	f383 8811 	msr	BASEPRI, r3
 80222e6:	f3bf 8f6f 	isb	sy
 80222ea:	f3bf 8f4f 	dsb	sy
 80222ee:	617b      	str	r3, [r7, #20]
}
 80222f0:	bf00      	nop
 80222f2:	e7fe      	b.n	80222f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80222f4:	4b0a      	ldr	r3, [pc, #40]	; (8022320 <vTaskPlaceOnEventListRestricted+0x54>)
 80222f6:	681b      	ldr	r3, [r3, #0]
 80222f8:	3318      	adds	r3, #24
 80222fa:	4619      	mov	r1, r3
 80222fc:	68f8      	ldr	r0, [r7, #12]
 80222fe:	f7fe fa44 	bl	802078a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	2b00      	cmp	r3, #0
 8022306:	d002      	beq.n	802230e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8022308:	f04f 33ff 	mov.w	r3, #4294967295
 802230c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802230e:	6879      	ldr	r1, [r7, #4]
 8022310:	68b8      	ldr	r0, [r7, #8]
 8022312:	f000 fb9b 	bl	8022a4c <prvAddCurrentTaskToDelayedList>
	}
 8022316:	bf00      	nop
 8022318:	3718      	adds	r7, #24
 802231a:	46bd      	mov	sp, r7
 802231c:	bd80      	pop	{r7, pc}
 802231e:	bf00      	nop
 8022320:	20001d58 	.word	0x20001d58

08022324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8022324:	b580      	push	{r7, lr}
 8022326:	b086      	sub	sp, #24
 8022328:	af00      	add	r7, sp, #0
 802232a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	68db      	ldr	r3, [r3, #12]
 8022330:	68db      	ldr	r3, [r3, #12]
 8022332:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8022334:	693b      	ldr	r3, [r7, #16]
 8022336:	2b00      	cmp	r3, #0
 8022338:	d10a      	bne.n	8022350 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 802233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802233e:	f383 8811 	msr	BASEPRI, r3
 8022342:	f3bf 8f6f 	isb	sy
 8022346:	f3bf 8f4f 	dsb	sy
 802234a:	60fb      	str	r3, [r7, #12]
}
 802234c:	bf00      	nop
 802234e:	e7fe      	b.n	802234e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8022350:	693b      	ldr	r3, [r7, #16]
 8022352:	3318      	adds	r3, #24
 8022354:	4618      	mov	r0, r3
 8022356:	f7fe fa75 	bl	8020844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802235a:	4b1e      	ldr	r3, [pc, #120]	; (80223d4 <xTaskRemoveFromEventList+0xb0>)
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	2b00      	cmp	r3, #0
 8022360:	d11d      	bne.n	802239e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8022362:	693b      	ldr	r3, [r7, #16]
 8022364:	3304      	adds	r3, #4
 8022366:	4618      	mov	r0, r3
 8022368:	f7fe fa6c 	bl	8020844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802236c:	693b      	ldr	r3, [r7, #16]
 802236e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022370:	4b19      	ldr	r3, [pc, #100]	; (80223d8 <xTaskRemoveFromEventList+0xb4>)
 8022372:	681b      	ldr	r3, [r3, #0]
 8022374:	429a      	cmp	r2, r3
 8022376:	d903      	bls.n	8022380 <xTaskRemoveFromEventList+0x5c>
 8022378:	693b      	ldr	r3, [r7, #16]
 802237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802237c:	4a16      	ldr	r2, [pc, #88]	; (80223d8 <xTaskRemoveFromEventList+0xb4>)
 802237e:	6013      	str	r3, [r2, #0]
 8022380:	693b      	ldr	r3, [r7, #16]
 8022382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022384:	4613      	mov	r3, r2
 8022386:	009b      	lsls	r3, r3, #2
 8022388:	4413      	add	r3, r2
 802238a:	009b      	lsls	r3, r3, #2
 802238c:	4a13      	ldr	r2, [pc, #76]	; (80223dc <xTaskRemoveFromEventList+0xb8>)
 802238e:	441a      	add	r2, r3
 8022390:	693b      	ldr	r3, [r7, #16]
 8022392:	3304      	adds	r3, #4
 8022394:	4619      	mov	r1, r3
 8022396:	4610      	mov	r0, r2
 8022398:	f7fe f9f7 	bl	802078a <vListInsertEnd>
 802239c:	e005      	b.n	80223aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802239e:	693b      	ldr	r3, [r7, #16]
 80223a0:	3318      	adds	r3, #24
 80223a2:	4619      	mov	r1, r3
 80223a4:	480e      	ldr	r0, [pc, #56]	; (80223e0 <xTaskRemoveFromEventList+0xbc>)
 80223a6:	f7fe f9f0 	bl	802078a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80223aa:	693b      	ldr	r3, [r7, #16]
 80223ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80223ae:	4b0d      	ldr	r3, [pc, #52]	; (80223e4 <xTaskRemoveFromEventList+0xc0>)
 80223b0:	681b      	ldr	r3, [r3, #0]
 80223b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80223b4:	429a      	cmp	r2, r3
 80223b6:	d905      	bls.n	80223c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80223b8:	2301      	movs	r3, #1
 80223ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80223bc:	4b0a      	ldr	r3, [pc, #40]	; (80223e8 <xTaskRemoveFromEventList+0xc4>)
 80223be:	2201      	movs	r2, #1
 80223c0:	601a      	str	r2, [r3, #0]
 80223c2:	e001      	b.n	80223c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80223c4:	2300      	movs	r3, #0
 80223c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80223c8:	697b      	ldr	r3, [r7, #20]
}
 80223ca:	4618      	mov	r0, r3
 80223cc:	3718      	adds	r7, #24
 80223ce:	46bd      	mov	sp, r7
 80223d0:	bd80      	pop	{r7, pc}
 80223d2:	bf00      	nop
 80223d4:	20002254 	.word	0x20002254
 80223d8:	20002234 	.word	0x20002234
 80223dc:	20001d5c 	.word	0x20001d5c
 80223e0:	200021ec 	.word	0x200021ec
 80223e4:	20001d58 	.word	0x20001d58
 80223e8:	20002240 	.word	0x20002240

080223ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80223ec:	b480      	push	{r7}
 80223ee:	b083      	sub	sp, #12
 80223f0:	af00      	add	r7, sp, #0
 80223f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80223f4:	4b06      	ldr	r3, [pc, #24]	; (8022410 <vTaskInternalSetTimeOutState+0x24>)
 80223f6:	681a      	ldr	r2, [r3, #0]
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80223fc:	4b05      	ldr	r3, [pc, #20]	; (8022414 <vTaskInternalSetTimeOutState+0x28>)
 80223fe:	681a      	ldr	r2, [r3, #0]
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	605a      	str	r2, [r3, #4]
}
 8022404:	bf00      	nop
 8022406:	370c      	adds	r7, #12
 8022408:	46bd      	mov	sp, r7
 802240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802240e:	4770      	bx	lr
 8022410:	20002244 	.word	0x20002244
 8022414:	20002230 	.word	0x20002230

08022418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8022418:	b580      	push	{r7, lr}
 802241a:	b088      	sub	sp, #32
 802241c:	af00      	add	r7, sp, #0
 802241e:	6078      	str	r0, [r7, #4]
 8022420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	2b00      	cmp	r3, #0
 8022426:	d10a      	bne.n	802243e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8022428:	f04f 0350 	mov.w	r3, #80	; 0x50
 802242c:	f383 8811 	msr	BASEPRI, r3
 8022430:	f3bf 8f6f 	isb	sy
 8022434:	f3bf 8f4f 	dsb	sy
 8022438:	613b      	str	r3, [r7, #16]
}
 802243a:	bf00      	nop
 802243c:	e7fe      	b.n	802243c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802243e:	683b      	ldr	r3, [r7, #0]
 8022440:	2b00      	cmp	r3, #0
 8022442:	d10a      	bne.n	802245a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8022444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022448:	f383 8811 	msr	BASEPRI, r3
 802244c:	f3bf 8f6f 	isb	sy
 8022450:	f3bf 8f4f 	dsb	sy
 8022454:	60fb      	str	r3, [r7, #12]
}
 8022456:	bf00      	nop
 8022458:	e7fe      	b.n	8022458 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802245a:	f000 ffc3 	bl	80233e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802245e:	4b1d      	ldr	r3, [pc, #116]	; (80224d4 <xTaskCheckForTimeOut+0xbc>)
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	685b      	ldr	r3, [r3, #4]
 8022468:	69ba      	ldr	r2, [r7, #24]
 802246a:	1ad3      	subs	r3, r2, r3
 802246c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802246e:	683b      	ldr	r3, [r7, #0]
 8022470:	681b      	ldr	r3, [r3, #0]
 8022472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022476:	d102      	bne.n	802247e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8022478:	2300      	movs	r3, #0
 802247a:	61fb      	str	r3, [r7, #28]
 802247c:	e023      	b.n	80224c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	681a      	ldr	r2, [r3, #0]
 8022482:	4b15      	ldr	r3, [pc, #84]	; (80224d8 <xTaskCheckForTimeOut+0xc0>)
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	429a      	cmp	r2, r3
 8022488:	d007      	beq.n	802249a <xTaskCheckForTimeOut+0x82>
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	685b      	ldr	r3, [r3, #4]
 802248e:	69ba      	ldr	r2, [r7, #24]
 8022490:	429a      	cmp	r2, r3
 8022492:	d302      	bcc.n	802249a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8022494:	2301      	movs	r3, #1
 8022496:	61fb      	str	r3, [r7, #28]
 8022498:	e015      	b.n	80224c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802249a:	683b      	ldr	r3, [r7, #0]
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	697a      	ldr	r2, [r7, #20]
 80224a0:	429a      	cmp	r2, r3
 80224a2:	d20b      	bcs.n	80224bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80224a4:	683b      	ldr	r3, [r7, #0]
 80224a6:	681a      	ldr	r2, [r3, #0]
 80224a8:	697b      	ldr	r3, [r7, #20]
 80224aa:	1ad2      	subs	r2, r2, r3
 80224ac:	683b      	ldr	r3, [r7, #0]
 80224ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80224b0:	6878      	ldr	r0, [r7, #4]
 80224b2:	f7ff ff9b 	bl	80223ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80224b6:	2300      	movs	r3, #0
 80224b8:	61fb      	str	r3, [r7, #28]
 80224ba:	e004      	b.n	80224c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80224bc:	683b      	ldr	r3, [r7, #0]
 80224be:	2200      	movs	r2, #0
 80224c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80224c2:	2301      	movs	r3, #1
 80224c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80224c6:	f000 ffbd 	bl	8023444 <vPortExitCritical>

	return xReturn;
 80224ca:	69fb      	ldr	r3, [r7, #28]
}
 80224cc:	4618      	mov	r0, r3
 80224ce:	3720      	adds	r7, #32
 80224d0:	46bd      	mov	sp, r7
 80224d2:	bd80      	pop	{r7, pc}
 80224d4:	20002230 	.word	0x20002230
 80224d8:	20002244 	.word	0x20002244

080224dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80224dc:	b480      	push	{r7}
 80224de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80224e0:	4b03      	ldr	r3, [pc, #12]	; (80224f0 <vTaskMissedYield+0x14>)
 80224e2:	2201      	movs	r2, #1
 80224e4:	601a      	str	r2, [r3, #0]
}
 80224e6:	bf00      	nop
 80224e8:	46bd      	mov	sp, r7
 80224ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224ee:	4770      	bx	lr
 80224f0:	20002240 	.word	0x20002240

080224f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80224f4:	b580      	push	{r7, lr}
 80224f6:	b082      	sub	sp, #8
 80224f8:	af00      	add	r7, sp, #0
 80224fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80224fc:	f000 f852 	bl	80225a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8022500:	4b06      	ldr	r3, [pc, #24]	; (802251c <prvIdleTask+0x28>)
 8022502:	681b      	ldr	r3, [r3, #0]
 8022504:	2b01      	cmp	r3, #1
 8022506:	d9f9      	bls.n	80224fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8022508:	4b05      	ldr	r3, [pc, #20]	; (8022520 <prvIdleTask+0x2c>)
 802250a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802250e:	601a      	str	r2, [r3, #0]
 8022510:	f3bf 8f4f 	dsb	sy
 8022514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8022518:	e7f0      	b.n	80224fc <prvIdleTask+0x8>
 802251a:	bf00      	nop
 802251c:	20001d5c 	.word	0x20001d5c
 8022520:	e000ed04 	.word	0xe000ed04

08022524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8022524:	b580      	push	{r7, lr}
 8022526:	b082      	sub	sp, #8
 8022528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802252a:	2300      	movs	r3, #0
 802252c:	607b      	str	r3, [r7, #4]
 802252e:	e00c      	b.n	802254a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8022530:	687a      	ldr	r2, [r7, #4]
 8022532:	4613      	mov	r3, r2
 8022534:	009b      	lsls	r3, r3, #2
 8022536:	4413      	add	r3, r2
 8022538:	009b      	lsls	r3, r3, #2
 802253a:	4a12      	ldr	r2, [pc, #72]	; (8022584 <prvInitialiseTaskLists+0x60>)
 802253c:	4413      	add	r3, r2
 802253e:	4618      	mov	r0, r3
 8022540:	f7fe f8f6 	bl	8020730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	3301      	adds	r3, #1
 8022548:	607b      	str	r3, [r7, #4]
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	2b37      	cmp	r3, #55	; 0x37
 802254e:	d9ef      	bls.n	8022530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8022550:	480d      	ldr	r0, [pc, #52]	; (8022588 <prvInitialiseTaskLists+0x64>)
 8022552:	f7fe f8ed 	bl	8020730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8022556:	480d      	ldr	r0, [pc, #52]	; (802258c <prvInitialiseTaskLists+0x68>)
 8022558:	f7fe f8ea 	bl	8020730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802255c:	480c      	ldr	r0, [pc, #48]	; (8022590 <prvInitialiseTaskLists+0x6c>)
 802255e:	f7fe f8e7 	bl	8020730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8022562:	480c      	ldr	r0, [pc, #48]	; (8022594 <prvInitialiseTaskLists+0x70>)
 8022564:	f7fe f8e4 	bl	8020730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8022568:	480b      	ldr	r0, [pc, #44]	; (8022598 <prvInitialiseTaskLists+0x74>)
 802256a:	f7fe f8e1 	bl	8020730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802256e:	4b0b      	ldr	r3, [pc, #44]	; (802259c <prvInitialiseTaskLists+0x78>)
 8022570:	4a05      	ldr	r2, [pc, #20]	; (8022588 <prvInitialiseTaskLists+0x64>)
 8022572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8022574:	4b0a      	ldr	r3, [pc, #40]	; (80225a0 <prvInitialiseTaskLists+0x7c>)
 8022576:	4a05      	ldr	r2, [pc, #20]	; (802258c <prvInitialiseTaskLists+0x68>)
 8022578:	601a      	str	r2, [r3, #0]
}
 802257a:	bf00      	nop
 802257c:	3708      	adds	r7, #8
 802257e:	46bd      	mov	sp, r7
 8022580:	bd80      	pop	{r7, pc}
 8022582:	bf00      	nop
 8022584:	20001d5c 	.word	0x20001d5c
 8022588:	200021bc 	.word	0x200021bc
 802258c:	200021d0 	.word	0x200021d0
 8022590:	200021ec 	.word	0x200021ec
 8022594:	20002200 	.word	0x20002200
 8022598:	20002218 	.word	0x20002218
 802259c:	200021e4 	.word	0x200021e4
 80225a0:	200021e8 	.word	0x200021e8

080225a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80225a4:	b580      	push	{r7, lr}
 80225a6:	b082      	sub	sp, #8
 80225a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80225aa:	e019      	b.n	80225e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80225ac:	f000 ff1a 	bl	80233e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80225b0:	4b10      	ldr	r3, [pc, #64]	; (80225f4 <prvCheckTasksWaitingTermination+0x50>)
 80225b2:	68db      	ldr	r3, [r3, #12]
 80225b4:	68db      	ldr	r3, [r3, #12]
 80225b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	3304      	adds	r3, #4
 80225bc:	4618      	mov	r0, r3
 80225be:	f7fe f941 	bl	8020844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80225c2:	4b0d      	ldr	r3, [pc, #52]	; (80225f8 <prvCheckTasksWaitingTermination+0x54>)
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	3b01      	subs	r3, #1
 80225c8:	4a0b      	ldr	r2, [pc, #44]	; (80225f8 <prvCheckTasksWaitingTermination+0x54>)
 80225ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80225cc:	4b0b      	ldr	r3, [pc, #44]	; (80225fc <prvCheckTasksWaitingTermination+0x58>)
 80225ce:	681b      	ldr	r3, [r3, #0]
 80225d0:	3b01      	subs	r3, #1
 80225d2:	4a0a      	ldr	r2, [pc, #40]	; (80225fc <prvCheckTasksWaitingTermination+0x58>)
 80225d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80225d6:	f000 ff35 	bl	8023444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80225da:	6878      	ldr	r0, [r7, #4]
 80225dc:	f000 f848 	bl	8022670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80225e0:	4b06      	ldr	r3, [pc, #24]	; (80225fc <prvCheckTasksWaitingTermination+0x58>)
 80225e2:	681b      	ldr	r3, [r3, #0]
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d1e1      	bne.n	80225ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80225e8:	bf00      	nop
 80225ea:	bf00      	nop
 80225ec:	3708      	adds	r7, #8
 80225ee:	46bd      	mov	sp, r7
 80225f0:	bd80      	pop	{r7, pc}
 80225f2:	bf00      	nop
 80225f4:	20002200 	.word	0x20002200
 80225f8:	2000222c 	.word	0x2000222c
 80225fc:	20002214 	.word	0x20002214

08022600 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8022600:	b480      	push	{r7}
 8022602:	b085      	sub	sp, #20
 8022604:	af00      	add	r7, sp, #0
 8022606:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8022608:	2300      	movs	r3, #0
 802260a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802260c:	e005      	b.n	802261a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802260e:	687b      	ldr	r3, [r7, #4]
 8022610:	3301      	adds	r3, #1
 8022612:	607b      	str	r3, [r7, #4]
			ulCount++;
 8022614:	68fb      	ldr	r3, [r7, #12]
 8022616:	3301      	adds	r3, #1
 8022618:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	781b      	ldrb	r3, [r3, #0]
 802261e:	2ba5      	cmp	r3, #165	; 0xa5
 8022620:	d0f5      	beq.n	802260e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8022622:	68fb      	ldr	r3, [r7, #12]
 8022624:	089b      	lsrs	r3, r3, #2
 8022626:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8022628:	68fb      	ldr	r3, [r7, #12]
 802262a:	b29b      	uxth	r3, r3
	}
 802262c:	4618      	mov	r0, r3
 802262e:	3714      	adds	r7, #20
 8022630:	46bd      	mov	sp, r7
 8022632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022636:	4770      	bx	lr

08022638 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8022638:	b580      	push	{r7, lr}
 802263a:	b086      	sub	sp, #24
 802263c:	af00      	add	r7, sp, #0
 802263e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	2b00      	cmp	r3, #0
 8022644:	d102      	bne.n	802264c <uxTaskGetStackHighWaterMark+0x14>
 8022646:	4b09      	ldr	r3, [pc, #36]	; (802266c <uxTaskGetStackHighWaterMark+0x34>)
 8022648:	681b      	ldr	r3, [r3, #0]
 802264a:	e000      	b.n	802264e <uxTaskGetStackHighWaterMark+0x16>
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8022650:	697b      	ldr	r3, [r7, #20]
 8022652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022654:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8022656:	6938      	ldr	r0, [r7, #16]
 8022658:	f7ff ffd2 	bl	8022600 <prvTaskCheckFreeStackSpace>
 802265c:	4603      	mov	r3, r0
 802265e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8022660:	68fb      	ldr	r3, [r7, #12]
	}
 8022662:	4618      	mov	r0, r3
 8022664:	3718      	adds	r7, #24
 8022666:	46bd      	mov	sp, r7
 8022668:	bd80      	pop	{r7, pc}
 802266a:	bf00      	nop
 802266c:	20001d58 	.word	0x20001d58

08022670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8022670:	b580      	push	{r7, lr}
 8022672:	b084      	sub	sp, #16
 8022674:	af00      	add	r7, sp, #0
 8022676:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	3358      	adds	r3, #88	; 0x58
 802267c:	4618      	mov	r0, r3
 802267e:	f00b fa59 	bl	802db34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022688:	2b00      	cmp	r3, #0
 802268a:	d108      	bne.n	802269e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022690:	4618      	mov	r0, r3
 8022692:	f001 f80f 	bl	80236b4 <vPortFree>
				vPortFree( pxTCB );
 8022696:	6878      	ldr	r0, [r7, #4]
 8022698:	f001 f80c 	bl	80236b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802269c:	e018      	b.n	80226d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80226a4:	2b01      	cmp	r3, #1
 80226a6:	d103      	bne.n	80226b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80226a8:	6878      	ldr	r0, [r7, #4]
 80226aa:	f001 f803 	bl	80236b4 <vPortFree>
	}
 80226ae:	e00f      	b.n	80226d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80226b6:	2b02      	cmp	r3, #2
 80226b8:	d00a      	beq.n	80226d0 <prvDeleteTCB+0x60>
	__asm volatile
 80226ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80226be:	f383 8811 	msr	BASEPRI, r3
 80226c2:	f3bf 8f6f 	isb	sy
 80226c6:	f3bf 8f4f 	dsb	sy
 80226ca:	60fb      	str	r3, [r7, #12]
}
 80226cc:	bf00      	nop
 80226ce:	e7fe      	b.n	80226ce <prvDeleteTCB+0x5e>
	}
 80226d0:	bf00      	nop
 80226d2:	3710      	adds	r7, #16
 80226d4:	46bd      	mov	sp, r7
 80226d6:	bd80      	pop	{r7, pc}

080226d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80226d8:	b480      	push	{r7}
 80226da:	b083      	sub	sp, #12
 80226dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80226de:	4b0c      	ldr	r3, [pc, #48]	; (8022710 <prvResetNextTaskUnblockTime+0x38>)
 80226e0:	681b      	ldr	r3, [r3, #0]
 80226e2:	681b      	ldr	r3, [r3, #0]
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d104      	bne.n	80226f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80226e8:	4b0a      	ldr	r3, [pc, #40]	; (8022714 <prvResetNextTaskUnblockTime+0x3c>)
 80226ea:	f04f 32ff 	mov.w	r2, #4294967295
 80226ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80226f0:	e008      	b.n	8022704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80226f2:	4b07      	ldr	r3, [pc, #28]	; (8022710 <prvResetNextTaskUnblockTime+0x38>)
 80226f4:	681b      	ldr	r3, [r3, #0]
 80226f6:	68db      	ldr	r3, [r3, #12]
 80226f8:	68db      	ldr	r3, [r3, #12]
 80226fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	685b      	ldr	r3, [r3, #4]
 8022700:	4a04      	ldr	r2, [pc, #16]	; (8022714 <prvResetNextTaskUnblockTime+0x3c>)
 8022702:	6013      	str	r3, [r2, #0]
}
 8022704:	bf00      	nop
 8022706:	370c      	adds	r7, #12
 8022708:	46bd      	mov	sp, r7
 802270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802270e:	4770      	bx	lr
 8022710:	200021e4 	.word	0x200021e4
 8022714:	2000224c 	.word	0x2000224c

08022718 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8022718:	b480      	push	{r7}
 802271a:	b083      	sub	sp, #12
 802271c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 802271e:	4b05      	ldr	r3, [pc, #20]	; (8022734 <xTaskGetCurrentTaskHandle+0x1c>)
 8022720:	681b      	ldr	r3, [r3, #0]
 8022722:	607b      	str	r3, [r7, #4]

		return xReturn;
 8022724:	687b      	ldr	r3, [r7, #4]
	}
 8022726:	4618      	mov	r0, r3
 8022728:	370c      	adds	r7, #12
 802272a:	46bd      	mov	sp, r7
 802272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022730:	4770      	bx	lr
 8022732:	bf00      	nop
 8022734:	20001d58 	.word	0x20001d58

08022738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8022738:	b480      	push	{r7}
 802273a:	b083      	sub	sp, #12
 802273c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802273e:	4b0b      	ldr	r3, [pc, #44]	; (802276c <xTaskGetSchedulerState+0x34>)
 8022740:	681b      	ldr	r3, [r3, #0]
 8022742:	2b00      	cmp	r3, #0
 8022744:	d102      	bne.n	802274c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8022746:	2301      	movs	r3, #1
 8022748:	607b      	str	r3, [r7, #4]
 802274a:	e008      	b.n	802275e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802274c:	4b08      	ldr	r3, [pc, #32]	; (8022770 <xTaskGetSchedulerState+0x38>)
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	2b00      	cmp	r3, #0
 8022752:	d102      	bne.n	802275a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8022754:	2302      	movs	r3, #2
 8022756:	607b      	str	r3, [r7, #4]
 8022758:	e001      	b.n	802275e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802275a:	2300      	movs	r3, #0
 802275c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802275e:	687b      	ldr	r3, [r7, #4]
	}
 8022760:	4618      	mov	r0, r3
 8022762:	370c      	adds	r7, #12
 8022764:	46bd      	mov	sp, r7
 8022766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802276a:	4770      	bx	lr
 802276c:	20002238 	.word	0x20002238
 8022770:	20002254 	.word	0x20002254

08022774 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8022774:	b580      	push	{r7, lr}
 8022776:	b084      	sub	sp, #16
 8022778:	af00      	add	r7, sp, #0
 802277a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8022780:	2300      	movs	r3, #0
 8022782:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8022784:	687b      	ldr	r3, [r7, #4]
 8022786:	2b00      	cmp	r3, #0
 8022788:	d051      	beq.n	802282e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 802278a:	68bb      	ldr	r3, [r7, #8]
 802278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802278e:	4b2a      	ldr	r3, [pc, #168]	; (8022838 <xTaskPriorityInherit+0xc4>)
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022794:	429a      	cmp	r2, r3
 8022796:	d241      	bcs.n	802281c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022798:	68bb      	ldr	r3, [r7, #8]
 802279a:	699b      	ldr	r3, [r3, #24]
 802279c:	2b00      	cmp	r3, #0
 802279e:	db06      	blt.n	80227ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80227a0:	4b25      	ldr	r3, [pc, #148]	; (8022838 <xTaskPriorityInherit+0xc4>)
 80227a2:	681b      	ldr	r3, [r3, #0]
 80227a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80227aa:	68bb      	ldr	r3, [r7, #8]
 80227ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80227ae:	68bb      	ldr	r3, [r7, #8]
 80227b0:	6959      	ldr	r1, [r3, #20]
 80227b2:	68bb      	ldr	r3, [r7, #8]
 80227b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227b6:	4613      	mov	r3, r2
 80227b8:	009b      	lsls	r3, r3, #2
 80227ba:	4413      	add	r3, r2
 80227bc:	009b      	lsls	r3, r3, #2
 80227be:	4a1f      	ldr	r2, [pc, #124]	; (802283c <xTaskPriorityInherit+0xc8>)
 80227c0:	4413      	add	r3, r2
 80227c2:	4299      	cmp	r1, r3
 80227c4:	d122      	bne.n	802280c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80227c6:	68bb      	ldr	r3, [r7, #8]
 80227c8:	3304      	adds	r3, #4
 80227ca:	4618      	mov	r0, r3
 80227cc:	f7fe f83a 	bl	8020844 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80227d0:	4b19      	ldr	r3, [pc, #100]	; (8022838 <xTaskPriorityInherit+0xc4>)
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227d6:	68bb      	ldr	r3, [r7, #8]
 80227d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80227da:	68bb      	ldr	r3, [r7, #8]
 80227dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227de:	4b18      	ldr	r3, [pc, #96]	; (8022840 <xTaskPriorityInherit+0xcc>)
 80227e0:	681b      	ldr	r3, [r3, #0]
 80227e2:	429a      	cmp	r2, r3
 80227e4:	d903      	bls.n	80227ee <xTaskPriorityInherit+0x7a>
 80227e6:	68bb      	ldr	r3, [r7, #8]
 80227e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227ea:	4a15      	ldr	r2, [pc, #84]	; (8022840 <xTaskPriorityInherit+0xcc>)
 80227ec:	6013      	str	r3, [r2, #0]
 80227ee:	68bb      	ldr	r3, [r7, #8]
 80227f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227f2:	4613      	mov	r3, r2
 80227f4:	009b      	lsls	r3, r3, #2
 80227f6:	4413      	add	r3, r2
 80227f8:	009b      	lsls	r3, r3, #2
 80227fa:	4a10      	ldr	r2, [pc, #64]	; (802283c <xTaskPriorityInherit+0xc8>)
 80227fc:	441a      	add	r2, r3
 80227fe:	68bb      	ldr	r3, [r7, #8]
 8022800:	3304      	adds	r3, #4
 8022802:	4619      	mov	r1, r3
 8022804:	4610      	mov	r0, r2
 8022806:	f7fd ffc0 	bl	802078a <vListInsertEnd>
 802280a:	e004      	b.n	8022816 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 802280c:	4b0a      	ldr	r3, [pc, #40]	; (8022838 <xTaskPriorityInherit+0xc4>)
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022812:	68bb      	ldr	r3, [r7, #8]
 8022814:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8022816:	2301      	movs	r3, #1
 8022818:	60fb      	str	r3, [r7, #12]
 802281a:	e008      	b.n	802282e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 802281c:	68bb      	ldr	r3, [r7, #8]
 802281e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8022820:	4b05      	ldr	r3, [pc, #20]	; (8022838 <xTaskPriorityInherit+0xc4>)
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022826:	429a      	cmp	r2, r3
 8022828:	d201      	bcs.n	802282e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 802282a:	2301      	movs	r3, #1
 802282c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802282e:	68fb      	ldr	r3, [r7, #12]
	}
 8022830:	4618      	mov	r0, r3
 8022832:	3710      	adds	r7, #16
 8022834:	46bd      	mov	sp, r7
 8022836:	bd80      	pop	{r7, pc}
 8022838:	20001d58 	.word	0x20001d58
 802283c:	20001d5c 	.word	0x20001d5c
 8022840:	20002234 	.word	0x20002234

08022844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8022844:	b580      	push	{r7, lr}
 8022846:	b086      	sub	sp, #24
 8022848:	af00      	add	r7, sp, #0
 802284a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8022850:	2300      	movs	r3, #0
 8022852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8022854:	687b      	ldr	r3, [r7, #4]
 8022856:	2b00      	cmp	r3, #0
 8022858:	d056      	beq.n	8022908 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802285a:	4b2e      	ldr	r3, [pc, #184]	; (8022914 <xTaskPriorityDisinherit+0xd0>)
 802285c:	681b      	ldr	r3, [r3, #0]
 802285e:	693a      	ldr	r2, [r7, #16]
 8022860:	429a      	cmp	r2, r3
 8022862:	d00a      	beq.n	802287a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8022864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022868:	f383 8811 	msr	BASEPRI, r3
 802286c:	f3bf 8f6f 	isb	sy
 8022870:	f3bf 8f4f 	dsb	sy
 8022874:	60fb      	str	r3, [r7, #12]
}
 8022876:	bf00      	nop
 8022878:	e7fe      	b.n	8022878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802287a:	693b      	ldr	r3, [r7, #16]
 802287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802287e:	2b00      	cmp	r3, #0
 8022880:	d10a      	bne.n	8022898 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8022882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022886:	f383 8811 	msr	BASEPRI, r3
 802288a:	f3bf 8f6f 	isb	sy
 802288e:	f3bf 8f4f 	dsb	sy
 8022892:	60bb      	str	r3, [r7, #8]
}
 8022894:	bf00      	nop
 8022896:	e7fe      	b.n	8022896 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8022898:	693b      	ldr	r3, [r7, #16]
 802289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802289c:	1e5a      	subs	r2, r3, #1
 802289e:	693b      	ldr	r3, [r7, #16]
 80228a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80228a2:	693b      	ldr	r3, [r7, #16]
 80228a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80228a6:	693b      	ldr	r3, [r7, #16]
 80228a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80228aa:	429a      	cmp	r2, r3
 80228ac:	d02c      	beq.n	8022908 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80228ae:	693b      	ldr	r3, [r7, #16]
 80228b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d128      	bne.n	8022908 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80228b6:	693b      	ldr	r3, [r7, #16]
 80228b8:	3304      	adds	r3, #4
 80228ba:	4618      	mov	r0, r3
 80228bc:	f7fd ffc2 	bl	8020844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80228c0:	693b      	ldr	r3, [r7, #16]
 80228c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80228c4:	693b      	ldr	r3, [r7, #16]
 80228c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80228c8:	693b      	ldr	r3, [r7, #16]
 80228ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80228d0:	693b      	ldr	r3, [r7, #16]
 80228d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80228d4:	693b      	ldr	r3, [r7, #16]
 80228d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80228d8:	4b0f      	ldr	r3, [pc, #60]	; (8022918 <xTaskPriorityDisinherit+0xd4>)
 80228da:	681b      	ldr	r3, [r3, #0]
 80228dc:	429a      	cmp	r2, r3
 80228de:	d903      	bls.n	80228e8 <xTaskPriorityDisinherit+0xa4>
 80228e0:	693b      	ldr	r3, [r7, #16]
 80228e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228e4:	4a0c      	ldr	r2, [pc, #48]	; (8022918 <xTaskPriorityDisinherit+0xd4>)
 80228e6:	6013      	str	r3, [r2, #0]
 80228e8:	693b      	ldr	r3, [r7, #16]
 80228ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80228ec:	4613      	mov	r3, r2
 80228ee:	009b      	lsls	r3, r3, #2
 80228f0:	4413      	add	r3, r2
 80228f2:	009b      	lsls	r3, r3, #2
 80228f4:	4a09      	ldr	r2, [pc, #36]	; (802291c <xTaskPriorityDisinherit+0xd8>)
 80228f6:	441a      	add	r2, r3
 80228f8:	693b      	ldr	r3, [r7, #16]
 80228fa:	3304      	adds	r3, #4
 80228fc:	4619      	mov	r1, r3
 80228fe:	4610      	mov	r0, r2
 8022900:	f7fd ff43 	bl	802078a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8022904:	2301      	movs	r3, #1
 8022906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022908:	697b      	ldr	r3, [r7, #20]
	}
 802290a:	4618      	mov	r0, r3
 802290c:	3718      	adds	r7, #24
 802290e:	46bd      	mov	sp, r7
 8022910:	bd80      	pop	{r7, pc}
 8022912:	bf00      	nop
 8022914:	20001d58 	.word	0x20001d58
 8022918:	20002234 	.word	0x20002234
 802291c:	20001d5c 	.word	0x20001d5c

08022920 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8022920:	b580      	push	{r7, lr}
 8022922:	b088      	sub	sp, #32
 8022924:	af00      	add	r7, sp, #0
 8022926:	6078      	str	r0, [r7, #4]
 8022928:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 802292e:	2301      	movs	r3, #1
 8022930:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	2b00      	cmp	r3, #0
 8022936:	d06a      	beq.n	8022a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8022938:	69bb      	ldr	r3, [r7, #24]
 802293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802293c:	2b00      	cmp	r3, #0
 802293e:	d10a      	bne.n	8022956 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8022940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022944:	f383 8811 	msr	BASEPRI, r3
 8022948:	f3bf 8f6f 	isb	sy
 802294c:	f3bf 8f4f 	dsb	sy
 8022950:	60fb      	str	r3, [r7, #12]
}
 8022952:	bf00      	nop
 8022954:	e7fe      	b.n	8022954 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8022956:	69bb      	ldr	r3, [r7, #24]
 8022958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802295a:	683a      	ldr	r2, [r7, #0]
 802295c:	429a      	cmp	r2, r3
 802295e:	d902      	bls.n	8022966 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8022960:	683b      	ldr	r3, [r7, #0]
 8022962:	61fb      	str	r3, [r7, #28]
 8022964:	e002      	b.n	802296c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8022966:	69bb      	ldr	r3, [r7, #24]
 8022968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802296a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 802296c:	69bb      	ldr	r3, [r7, #24]
 802296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022970:	69fa      	ldr	r2, [r7, #28]
 8022972:	429a      	cmp	r2, r3
 8022974:	d04b      	beq.n	8022a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8022976:	69bb      	ldr	r3, [r7, #24]
 8022978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802297a:	697a      	ldr	r2, [r7, #20]
 802297c:	429a      	cmp	r2, r3
 802297e:	d146      	bne.n	8022a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8022980:	4b25      	ldr	r3, [pc, #148]	; (8022a18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	69ba      	ldr	r2, [r7, #24]
 8022986:	429a      	cmp	r2, r3
 8022988:	d10a      	bne.n	80229a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 802298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802298e:	f383 8811 	msr	BASEPRI, r3
 8022992:	f3bf 8f6f 	isb	sy
 8022996:	f3bf 8f4f 	dsb	sy
 802299a:	60bb      	str	r3, [r7, #8]
}
 802299c:	bf00      	nop
 802299e:	e7fe      	b.n	802299e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80229a0:	69bb      	ldr	r3, [r7, #24]
 80229a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80229a6:	69bb      	ldr	r3, [r7, #24]
 80229a8:	69fa      	ldr	r2, [r7, #28]
 80229aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80229ac:	69bb      	ldr	r3, [r7, #24]
 80229ae:	699b      	ldr	r3, [r3, #24]
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	db04      	blt.n	80229be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80229b4:	69fb      	ldr	r3, [r7, #28]
 80229b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80229ba:	69bb      	ldr	r3, [r7, #24]
 80229bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80229be:	69bb      	ldr	r3, [r7, #24]
 80229c0:	6959      	ldr	r1, [r3, #20]
 80229c2:	693a      	ldr	r2, [r7, #16]
 80229c4:	4613      	mov	r3, r2
 80229c6:	009b      	lsls	r3, r3, #2
 80229c8:	4413      	add	r3, r2
 80229ca:	009b      	lsls	r3, r3, #2
 80229cc:	4a13      	ldr	r2, [pc, #76]	; (8022a1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80229ce:	4413      	add	r3, r2
 80229d0:	4299      	cmp	r1, r3
 80229d2:	d11c      	bne.n	8022a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80229d4:	69bb      	ldr	r3, [r7, #24]
 80229d6:	3304      	adds	r3, #4
 80229d8:	4618      	mov	r0, r3
 80229da:	f7fd ff33 	bl	8020844 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80229de:	69bb      	ldr	r3, [r7, #24]
 80229e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229e2:	4b0f      	ldr	r3, [pc, #60]	; (8022a20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	429a      	cmp	r2, r3
 80229e8:	d903      	bls.n	80229f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80229ea:	69bb      	ldr	r3, [r7, #24]
 80229ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229ee:	4a0c      	ldr	r2, [pc, #48]	; (8022a20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80229f0:	6013      	str	r3, [r2, #0]
 80229f2:	69bb      	ldr	r3, [r7, #24]
 80229f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229f6:	4613      	mov	r3, r2
 80229f8:	009b      	lsls	r3, r3, #2
 80229fa:	4413      	add	r3, r2
 80229fc:	009b      	lsls	r3, r3, #2
 80229fe:	4a07      	ldr	r2, [pc, #28]	; (8022a1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022a00:	441a      	add	r2, r3
 8022a02:	69bb      	ldr	r3, [r7, #24]
 8022a04:	3304      	adds	r3, #4
 8022a06:	4619      	mov	r1, r3
 8022a08:	4610      	mov	r0, r2
 8022a0a:	f7fd febe 	bl	802078a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022a0e:	bf00      	nop
 8022a10:	3720      	adds	r7, #32
 8022a12:	46bd      	mov	sp, r7
 8022a14:	bd80      	pop	{r7, pc}
 8022a16:	bf00      	nop
 8022a18:	20001d58 	.word	0x20001d58
 8022a1c:	20001d5c 	.word	0x20001d5c
 8022a20:	20002234 	.word	0x20002234

08022a24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8022a24:	b480      	push	{r7}
 8022a26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8022a28:	4b07      	ldr	r3, [pc, #28]	; (8022a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	2b00      	cmp	r3, #0
 8022a2e:	d004      	beq.n	8022a3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8022a30:	4b05      	ldr	r3, [pc, #20]	; (8022a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8022a36:	3201      	adds	r2, #1
 8022a38:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8022a3a:	4b03      	ldr	r3, [pc, #12]	; (8022a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8022a3c:	681b      	ldr	r3, [r3, #0]
	}
 8022a3e:	4618      	mov	r0, r3
 8022a40:	46bd      	mov	sp, r7
 8022a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a46:	4770      	bx	lr
 8022a48:	20001d58 	.word	0x20001d58

08022a4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022a4c:	b580      	push	{r7, lr}
 8022a4e:	b084      	sub	sp, #16
 8022a50:	af00      	add	r7, sp, #0
 8022a52:	6078      	str	r0, [r7, #4]
 8022a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8022a56:	4b21      	ldr	r3, [pc, #132]	; (8022adc <prvAddCurrentTaskToDelayedList+0x90>)
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022a5c:	4b20      	ldr	r3, [pc, #128]	; (8022ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	3304      	adds	r3, #4
 8022a62:	4618      	mov	r0, r3
 8022a64:	f7fd feee 	bl	8020844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022a6e:	d10a      	bne.n	8022a86 <prvAddCurrentTaskToDelayedList+0x3a>
 8022a70:	683b      	ldr	r3, [r7, #0]
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	d007      	beq.n	8022a86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022a76:	4b1a      	ldr	r3, [pc, #104]	; (8022ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	3304      	adds	r3, #4
 8022a7c:	4619      	mov	r1, r3
 8022a7e:	4819      	ldr	r0, [pc, #100]	; (8022ae4 <prvAddCurrentTaskToDelayedList+0x98>)
 8022a80:	f7fd fe83 	bl	802078a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8022a84:	e026      	b.n	8022ad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8022a86:	68fa      	ldr	r2, [r7, #12]
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	4413      	add	r3, r2
 8022a8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022a8e:	4b14      	ldr	r3, [pc, #80]	; (8022ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	68ba      	ldr	r2, [r7, #8]
 8022a94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8022a96:	68ba      	ldr	r2, [r7, #8]
 8022a98:	68fb      	ldr	r3, [r7, #12]
 8022a9a:	429a      	cmp	r2, r3
 8022a9c:	d209      	bcs.n	8022ab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022a9e:	4b12      	ldr	r3, [pc, #72]	; (8022ae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022aa0:	681a      	ldr	r2, [r3, #0]
 8022aa2:	4b0f      	ldr	r3, [pc, #60]	; (8022ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	3304      	adds	r3, #4
 8022aa8:	4619      	mov	r1, r3
 8022aaa:	4610      	mov	r0, r2
 8022aac:	f7fd fe91 	bl	80207d2 <vListInsert>
}
 8022ab0:	e010      	b.n	8022ad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022ab2:	4b0e      	ldr	r3, [pc, #56]	; (8022aec <prvAddCurrentTaskToDelayedList+0xa0>)
 8022ab4:	681a      	ldr	r2, [r3, #0]
 8022ab6:	4b0a      	ldr	r3, [pc, #40]	; (8022ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	3304      	adds	r3, #4
 8022abc:	4619      	mov	r1, r3
 8022abe:	4610      	mov	r0, r2
 8022ac0:	f7fd fe87 	bl	80207d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022ac4:	4b0a      	ldr	r3, [pc, #40]	; (8022af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022ac6:	681b      	ldr	r3, [r3, #0]
 8022ac8:	68ba      	ldr	r2, [r7, #8]
 8022aca:	429a      	cmp	r2, r3
 8022acc:	d202      	bcs.n	8022ad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8022ace:	4a08      	ldr	r2, [pc, #32]	; (8022af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022ad0:	68bb      	ldr	r3, [r7, #8]
 8022ad2:	6013      	str	r3, [r2, #0]
}
 8022ad4:	bf00      	nop
 8022ad6:	3710      	adds	r7, #16
 8022ad8:	46bd      	mov	sp, r7
 8022ada:	bd80      	pop	{r7, pc}
 8022adc:	20002230 	.word	0x20002230
 8022ae0:	20001d58 	.word	0x20001d58
 8022ae4:	20002218 	.word	0x20002218
 8022ae8:	200021e8 	.word	0x200021e8
 8022aec:	200021e4 	.word	0x200021e4
 8022af0:	2000224c 	.word	0x2000224c

08022af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8022af4:	b580      	push	{r7, lr}
 8022af6:	b08a      	sub	sp, #40	; 0x28
 8022af8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022afa:	2300      	movs	r3, #0
 8022afc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8022afe:	f000 fb07 	bl	8023110 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8022b02:	4b1c      	ldr	r3, [pc, #112]	; (8022b74 <xTimerCreateTimerTask+0x80>)
 8022b04:	681b      	ldr	r3, [r3, #0]
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d021      	beq.n	8022b4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8022b0a:	2300      	movs	r3, #0
 8022b0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8022b0e:	2300      	movs	r3, #0
 8022b10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8022b12:	1d3a      	adds	r2, r7, #4
 8022b14:	f107 0108 	add.w	r1, r7, #8
 8022b18:	f107 030c 	add.w	r3, r7, #12
 8022b1c:	4618      	mov	r0, r3
 8022b1e:	f7fd fded 	bl	80206fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8022b22:	6879      	ldr	r1, [r7, #4]
 8022b24:	68bb      	ldr	r3, [r7, #8]
 8022b26:	68fa      	ldr	r2, [r7, #12]
 8022b28:	9202      	str	r2, [sp, #8]
 8022b2a:	9301      	str	r3, [sp, #4]
 8022b2c:	2302      	movs	r3, #2
 8022b2e:	9300      	str	r3, [sp, #0]
 8022b30:	2300      	movs	r3, #0
 8022b32:	460a      	mov	r2, r1
 8022b34:	4910      	ldr	r1, [pc, #64]	; (8022b78 <xTimerCreateTimerTask+0x84>)
 8022b36:	4811      	ldr	r0, [pc, #68]	; (8022b7c <xTimerCreateTimerTask+0x88>)
 8022b38:	f7fe ff4c 	bl	80219d4 <xTaskCreateStatic>
 8022b3c:	4603      	mov	r3, r0
 8022b3e:	4a10      	ldr	r2, [pc, #64]	; (8022b80 <xTimerCreateTimerTask+0x8c>)
 8022b40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8022b42:	4b0f      	ldr	r3, [pc, #60]	; (8022b80 <xTimerCreateTimerTask+0x8c>)
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d001      	beq.n	8022b4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8022b4a:	2301      	movs	r3, #1
 8022b4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8022b4e:	697b      	ldr	r3, [r7, #20]
 8022b50:	2b00      	cmp	r3, #0
 8022b52:	d10a      	bne.n	8022b6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8022b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022b58:	f383 8811 	msr	BASEPRI, r3
 8022b5c:	f3bf 8f6f 	isb	sy
 8022b60:	f3bf 8f4f 	dsb	sy
 8022b64:	613b      	str	r3, [r7, #16]
}
 8022b66:	bf00      	nop
 8022b68:	e7fe      	b.n	8022b68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8022b6a:	697b      	ldr	r3, [r7, #20]
}
 8022b6c:	4618      	mov	r0, r3
 8022b6e:	3718      	adds	r7, #24
 8022b70:	46bd      	mov	sp, r7
 8022b72:	bd80      	pop	{r7, pc}
 8022b74:	20002290 	.word	0x20002290
 8022b78:	0803363c 	.word	0x0803363c
 8022b7c:	08022cb9 	.word	0x08022cb9
 8022b80:	20002294 	.word	0x20002294

08022b84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8022b84:	b580      	push	{r7, lr}
 8022b86:	b08a      	sub	sp, #40	; 0x28
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	60f8      	str	r0, [r7, #12]
 8022b8c:	60b9      	str	r1, [r7, #8]
 8022b8e:	607a      	str	r2, [r7, #4]
 8022b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8022b92:	2300      	movs	r3, #0
 8022b94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8022b96:	68fb      	ldr	r3, [r7, #12]
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	d10a      	bne.n	8022bb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8022b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ba0:	f383 8811 	msr	BASEPRI, r3
 8022ba4:	f3bf 8f6f 	isb	sy
 8022ba8:	f3bf 8f4f 	dsb	sy
 8022bac:	623b      	str	r3, [r7, #32]
}
 8022bae:	bf00      	nop
 8022bb0:	e7fe      	b.n	8022bb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022bb2:	4b1a      	ldr	r3, [pc, #104]	; (8022c1c <xTimerGenericCommand+0x98>)
 8022bb4:	681b      	ldr	r3, [r3, #0]
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d02a      	beq.n	8022c10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022bba:	68bb      	ldr	r3, [r7, #8]
 8022bbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8022bc2:	68fb      	ldr	r3, [r7, #12]
 8022bc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8022bc6:	68bb      	ldr	r3, [r7, #8]
 8022bc8:	2b05      	cmp	r3, #5
 8022bca:	dc18      	bgt.n	8022bfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022bcc:	f7ff fdb4 	bl	8022738 <xTaskGetSchedulerState>
 8022bd0:	4603      	mov	r3, r0
 8022bd2:	2b02      	cmp	r3, #2
 8022bd4:	d109      	bne.n	8022bea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8022bd6:	4b11      	ldr	r3, [pc, #68]	; (8022c1c <xTimerGenericCommand+0x98>)
 8022bd8:	6818      	ldr	r0, [r3, #0]
 8022bda:	f107 0110 	add.w	r1, r7, #16
 8022bde:	2300      	movs	r3, #0
 8022be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022be2:	f7fe f84d 	bl	8020c80 <xQueueGenericSend>
 8022be6:	6278      	str	r0, [r7, #36]	; 0x24
 8022be8:	e012      	b.n	8022c10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022bea:	4b0c      	ldr	r3, [pc, #48]	; (8022c1c <xTimerGenericCommand+0x98>)
 8022bec:	6818      	ldr	r0, [r3, #0]
 8022bee:	f107 0110 	add.w	r1, r7, #16
 8022bf2:	2300      	movs	r3, #0
 8022bf4:	2200      	movs	r2, #0
 8022bf6:	f7fe f843 	bl	8020c80 <xQueueGenericSend>
 8022bfa:	6278      	str	r0, [r7, #36]	; 0x24
 8022bfc:	e008      	b.n	8022c10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022bfe:	4b07      	ldr	r3, [pc, #28]	; (8022c1c <xTimerGenericCommand+0x98>)
 8022c00:	6818      	ldr	r0, [r3, #0]
 8022c02:	f107 0110 	add.w	r1, r7, #16
 8022c06:	2300      	movs	r3, #0
 8022c08:	683a      	ldr	r2, [r7, #0]
 8022c0a:	f7fe f937 	bl	8020e7c <xQueueGenericSendFromISR>
 8022c0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022c12:	4618      	mov	r0, r3
 8022c14:	3728      	adds	r7, #40	; 0x28
 8022c16:	46bd      	mov	sp, r7
 8022c18:	bd80      	pop	{r7, pc}
 8022c1a:	bf00      	nop
 8022c1c:	20002290 	.word	0x20002290

08022c20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8022c20:	b580      	push	{r7, lr}
 8022c22:	b088      	sub	sp, #32
 8022c24:	af02      	add	r7, sp, #8
 8022c26:	6078      	str	r0, [r7, #4]
 8022c28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022c2a:	4b22      	ldr	r3, [pc, #136]	; (8022cb4 <prvProcessExpiredTimer+0x94>)
 8022c2c:	681b      	ldr	r3, [r3, #0]
 8022c2e:	68db      	ldr	r3, [r3, #12]
 8022c30:	68db      	ldr	r3, [r3, #12]
 8022c32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022c34:	697b      	ldr	r3, [r7, #20]
 8022c36:	3304      	adds	r3, #4
 8022c38:	4618      	mov	r0, r3
 8022c3a:	f7fd fe03 	bl	8020844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022c3e:	697b      	ldr	r3, [r7, #20]
 8022c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022c44:	f003 0304 	and.w	r3, r3, #4
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	d022      	beq.n	8022c92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8022c4c:	697b      	ldr	r3, [r7, #20]
 8022c4e:	699a      	ldr	r2, [r3, #24]
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	18d1      	adds	r1, r2, r3
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	683a      	ldr	r2, [r7, #0]
 8022c58:	6978      	ldr	r0, [r7, #20]
 8022c5a:	f000 f8d1 	bl	8022e00 <prvInsertTimerInActiveList>
 8022c5e:	4603      	mov	r3, r0
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d01f      	beq.n	8022ca4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022c64:	2300      	movs	r3, #0
 8022c66:	9300      	str	r3, [sp, #0]
 8022c68:	2300      	movs	r3, #0
 8022c6a:	687a      	ldr	r2, [r7, #4]
 8022c6c:	2100      	movs	r1, #0
 8022c6e:	6978      	ldr	r0, [r7, #20]
 8022c70:	f7ff ff88 	bl	8022b84 <xTimerGenericCommand>
 8022c74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8022c76:	693b      	ldr	r3, [r7, #16]
 8022c78:	2b00      	cmp	r3, #0
 8022c7a:	d113      	bne.n	8022ca4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8022c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022c80:	f383 8811 	msr	BASEPRI, r3
 8022c84:	f3bf 8f6f 	isb	sy
 8022c88:	f3bf 8f4f 	dsb	sy
 8022c8c:	60fb      	str	r3, [r7, #12]
}
 8022c8e:	bf00      	nop
 8022c90:	e7fe      	b.n	8022c90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022c92:	697b      	ldr	r3, [r7, #20]
 8022c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022c98:	f023 0301 	bic.w	r3, r3, #1
 8022c9c:	b2da      	uxtb	r2, r3
 8022c9e:	697b      	ldr	r3, [r7, #20]
 8022ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022ca4:	697b      	ldr	r3, [r7, #20]
 8022ca6:	6a1b      	ldr	r3, [r3, #32]
 8022ca8:	6978      	ldr	r0, [r7, #20]
 8022caa:	4798      	blx	r3
}
 8022cac:	bf00      	nop
 8022cae:	3718      	adds	r7, #24
 8022cb0:	46bd      	mov	sp, r7
 8022cb2:	bd80      	pop	{r7, pc}
 8022cb4:	20002288 	.word	0x20002288

08022cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022cb8:	b580      	push	{r7, lr}
 8022cba:	b084      	sub	sp, #16
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022cc0:	f107 0308 	add.w	r3, r7, #8
 8022cc4:	4618      	mov	r0, r3
 8022cc6:	f000 f857 	bl	8022d78 <prvGetNextExpireTime>
 8022cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022ccc:	68bb      	ldr	r3, [r7, #8]
 8022cce:	4619      	mov	r1, r3
 8022cd0:	68f8      	ldr	r0, [r7, #12]
 8022cd2:	f000 f803 	bl	8022cdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022cd6:	f000 f8d5 	bl	8022e84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022cda:	e7f1      	b.n	8022cc0 <prvTimerTask+0x8>

08022cdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022cdc:	b580      	push	{r7, lr}
 8022cde:	b084      	sub	sp, #16
 8022ce0:	af00      	add	r7, sp, #0
 8022ce2:	6078      	str	r0, [r7, #4]
 8022ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022ce6:	f7ff f8d7 	bl	8021e98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022cea:	f107 0308 	add.w	r3, r7, #8
 8022cee:	4618      	mov	r0, r3
 8022cf0:	f000 f866 	bl	8022dc0 <prvSampleTimeNow>
 8022cf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022cf6:	68bb      	ldr	r3, [r7, #8]
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d130      	bne.n	8022d5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022cfc:	683b      	ldr	r3, [r7, #0]
 8022cfe:	2b00      	cmp	r3, #0
 8022d00:	d10a      	bne.n	8022d18 <prvProcessTimerOrBlockTask+0x3c>
 8022d02:	687a      	ldr	r2, [r7, #4]
 8022d04:	68fb      	ldr	r3, [r7, #12]
 8022d06:	429a      	cmp	r2, r3
 8022d08:	d806      	bhi.n	8022d18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022d0a:	f7ff f8d3 	bl	8021eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8022d0e:	68f9      	ldr	r1, [r7, #12]
 8022d10:	6878      	ldr	r0, [r7, #4]
 8022d12:	f7ff ff85 	bl	8022c20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022d16:	e024      	b.n	8022d62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022d18:	683b      	ldr	r3, [r7, #0]
 8022d1a:	2b00      	cmp	r3, #0
 8022d1c:	d008      	beq.n	8022d30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8022d1e:	4b13      	ldr	r3, [pc, #76]	; (8022d6c <prvProcessTimerOrBlockTask+0x90>)
 8022d20:	681b      	ldr	r3, [r3, #0]
 8022d22:	681b      	ldr	r3, [r3, #0]
 8022d24:	2b00      	cmp	r3, #0
 8022d26:	d101      	bne.n	8022d2c <prvProcessTimerOrBlockTask+0x50>
 8022d28:	2301      	movs	r3, #1
 8022d2a:	e000      	b.n	8022d2e <prvProcessTimerOrBlockTask+0x52>
 8022d2c:	2300      	movs	r3, #0
 8022d2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022d30:	4b0f      	ldr	r3, [pc, #60]	; (8022d70 <prvProcessTimerOrBlockTask+0x94>)
 8022d32:	6818      	ldr	r0, [r3, #0]
 8022d34:	687a      	ldr	r2, [r7, #4]
 8022d36:	68fb      	ldr	r3, [r7, #12]
 8022d38:	1ad3      	subs	r3, r2, r3
 8022d3a:	683a      	ldr	r2, [r7, #0]
 8022d3c:	4619      	mov	r1, r3
 8022d3e:	f7fe fe15 	bl	802196c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022d42:	f7ff f8b7 	bl	8021eb4 <xTaskResumeAll>
 8022d46:	4603      	mov	r3, r0
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	d10a      	bne.n	8022d62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022d4c:	4b09      	ldr	r3, [pc, #36]	; (8022d74 <prvProcessTimerOrBlockTask+0x98>)
 8022d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022d52:	601a      	str	r2, [r3, #0]
 8022d54:	f3bf 8f4f 	dsb	sy
 8022d58:	f3bf 8f6f 	isb	sy
}
 8022d5c:	e001      	b.n	8022d62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8022d5e:	f7ff f8a9 	bl	8021eb4 <xTaskResumeAll>
}
 8022d62:	bf00      	nop
 8022d64:	3710      	adds	r7, #16
 8022d66:	46bd      	mov	sp, r7
 8022d68:	bd80      	pop	{r7, pc}
 8022d6a:	bf00      	nop
 8022d6c:	2000228c 	.word	0x2000228c
 8022d70:	20002290 	.word	0x20002290
 8022d74:	e000ed04 	.word	0xe000ed04

08022d78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022d78:	b480      	push	{r7}
 8022d7a:	b085      	sub	sp, #20
 8022d7c:	af00      	add	r7, sp, #0
 8022d7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022d80:	4b0e      	ldr	r3, [pc, #56]	; (8022dbc <prvGetNextExpireTime+0x44>)
 8022d82:	681b      	ldr	r3, [r3, #0]
 8022d84:	681b      	ldr	r3, [r3, #0]
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	d101      	bne.n	8022d8e <prvGetNextExpireTime+0x16>
 8022d8a:	2201      	movs	r2, #1
 8022d8c:	e000      	b.n	8022d90 <prvGetNextExpireTime+0x18>
 8022d8e:	2200      	movs	r2, #0
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	681b      	ldr	r3, [r3, #0]
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	d105      	bne.n	8022da8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022d9c:	4b07      	ldr	r3, [pc, #28]	; (8022dbc <prvGetNextExpireTime+0x44>)
 8022d9e:	681b      	ldr	r3, [r3, #0]
 8022da0:	68db      	ldr	r3, [r3, #12]
 8022da2:	681b      	ldr	r3, [r3, #0]
 8022da4:	60fb      	str	r3, [r7, #12]
 8022da6:	e001      	b.n	8022dac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022da8:	2300      	movs	r3, #0
 8022daa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8022dac:	68fb      	ldr	r3, [r7, #12]
}
 8022dae:	4618      	mov	r0, r3
 8022db0:	3714      	adds	r7, #20
 8022db2:	46bd      	mov	sp, r7
 8022db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022db8:	4770      	bx	lr
 8022dba:	bf00      	nop
 8022dbc:	20002288 	.word	0x20002288

08022dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8022dc0:	b580      	push	{r7, lr}
 8022dc2:	b084      	sub	sp, #16
 8022dc4:	af00      	add	r7, sp, #0
 8022dc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022dc8:	f7ff f912 	bl	8021ff0 <xTaskGetTickCount>
 8022dcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8022dce:	4b0b      	ldr	r3, [pc, #44]	; (8022dfc <prvSampleTimeNow+0x3c>)
 8022dd0:	681b      	ldr	r3, [r3, #0]
 8022dd2:	68fa      	ldr	r2, [r7, #12]
 8022dd4:	429a      	cmp	r2, r3
 8022dd6:	d205      	bcs.n	8022de4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022dd8:	f000 f936 	bl	8023048 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022ddc:	687b      	ldr	r3, [r7, #4]
 8022dde:	2201      	movs	r2, #1
 8022de0:	601a      	str	r2, [r3, #0]
 8022de2:	e002      	b.n	8022dea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	2200      	movs	r2, #0
 8022de8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022dea:	4a04      	ldr	r2, [pc, #16]	; (8022dfc <prvSampleTimeNow+0x3c>)
 8022dec:	68fb      	ldr	r3, [r7, #12]
 8022dee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022df0:	68fb      	ldr	r3, [r7, #12]
}
 8022df2:	4618      	mov	r0, r3
 8022df4:	3710      	adds	r7, #16
 8022df6:	46bd      	mov	sp, r7
 8022df8:	bd80      	pop	{r7, pc}
 8022dfa:	bf00      	nop
 8022dfc:	20002298 	.word	0x20002298

08022e00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022e00:	b580      	push	{r7, lr}
 8022e02:	b086      	sub	sp, #24
 8022e04:	af00      	add	r7, sp, #0
 8022e06:	60f8      	str	r0, [r7, #12]
 8022e08:	60b9      	str	r1, [r7, #8]
 8022e0a:	607a      	str	r2, [r7, #4]
 8022e0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8022e0e:	2300      	movs	r3, #0
 8022e10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022e12:	68fb      	ldr	r3, [r7, #12]
 8022e14:	68ba      	ldr	r2, [r7, #8]
 8022e16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022e18:	68fb      	ldr	r3, [r7, #12]
 8022e1a:	68fa      	ldr	r2, [r7, #12]
 8022e1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8022e1e:	68ba      	ldr	r2, [r7, #8]
 8022e20:	687b      	ldr	r3, [r7, #4]
 8022e22:	429a      	cmp	r2, r3
 8022e24:	d812      	bhi.n	8022e4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022e26:	687a      	ldr	r2, [r7, #4]
 8022e28:	683b      	ldr	r3, [r7, #0]
 8022e2a:	1ad2      	subs	r2, r2, r3
 8022e2c:	68fb      	ldr	r3, [r7, #12]
 8022e2e:	699b      	ldr	r3, [r3, #24]
 8022e30:	429a      	cmp	r2, r3
 8022e32:	d302      	bcc.n	8022e3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022e34:	2301      	movs	r3, #1
 8022e36:	617b      	str	r3, [r7, #20]
 8022e38:	e01b      	b.n	8022e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8022e3a:	4b10      	ldr	r3, [pc, #64]	; (8022e7c <prvInsertTimerInActiveList+0x7c>)
 8022e3c:	681a      	ldr	r2, [r3, #0]
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	3304      	adds	r3, #4
 8022e42:	4619      	mov	r1, r3
 8022e44:	4610      	mov	r0, r2
 8022e46:	f7fd fcc4 	bl	80207d2 <vListInsert>
 8022e4a:	e012      	b.n	8022e72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8022e4c:	687a      	ldr	r2, [r7, #4]
 8022e4e:	683b      	ldr	r3, [r7, #0]
 8022e50:	429a      	cmp	r2, r3
 8022e52:	d206      	bcs.n	8022e62 <prvInsertTimerInActiveList+0x62>
 8022e54:	68ba      	ldr	r2, [r7, #8]
 8022e56:	683b      	ldr	r3, [r7, #0]
 8022e58:	429a      	cmp	r2, r3
 8022e5a:	d302      	bcc.n	8022e62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8022e5c:	2301      	movs	r3, #1
 8022e5e:	617b      	str	r3, [r7, #20]
 8022e60:	e007      	b.n	8022e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022e62:	4b07      	ldr	r3, [pc, #28]	; (8022e80 <prvInsertTimerInActiveList+0x80>)
 8022e64:	681a      	ldr	r2, [r3, #0]
 8022e66:	68fb      	ldr	r3, [r7, #12]
 8022e68:	3304      	adds	r3, #4
 8022e6a:	4619      	mov	r1, r3
 8022e6c:	4610      	mov	r0, r2
 8022e6e:	f7fd fcb0 	bl	80207d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8022e72:	697b      	ldr	r3, [r7, #20]
}
 8022e74:	4618      	mov	r0, r3
 8022e76:	3718      	adds	r7, #24
 8022e78:	46bd      	mov	sp, r7
 8022e7a:	bd80      	pop	{r7, pc}
 8022e7c:	2000228c 	.word	0x2000228c
 8022e80:	20002288 	.word	0x20002288

08022e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8022e84:	b580      	push	{r7, lr}
 8022e86:	b08e      	sub	sp, #56	; 0x38
 8022e88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022e8a:	e0ca      	b.n	8023022 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8022e8c:	687b      	ldr	r3, [r7, #4]
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	da18      	bge.n	8022ec4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8022e92:	1d3b      	adds	r3, r7, #4
 8022e94:	3304      	adds	r3, #4
 8022e96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8022e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d10a      	bne.n	8022eb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8022e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ea2:	f383 8811 	msr	BASEPRI, r3
 8022ea6:	f3bf 8f6f 	isb	sy
 8022eaa:	f3bf 8f4f 	dsb	sy
 8022eae:	61fb      	str	r3, [r7, #28]
}
 8022eb0:	bf00      	nop
 8022eb2:	e7fe      	b.n	8022eb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8022eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022eb6:	681b      	ldr	r3, [r3, #0]
 8022eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022eba:	6850      	ldr	r0, [r2, #4]
 8022ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022ebe:	6892      	ldr	r2, [r2, #8]
 8022ec0:	4611      	mov	r1, r2
 8022ec2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8022ec4:	687b      	ldr	r3, [r7, #4]
 8022ec6:	2b00      	cmp	r3, #0
 8022ec8:	f2c0 80ab 	blt.w	8023022 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8022ecc:	68fb      	ldr	r3, [r7, #12]
 8022ece:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8022ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ed2:	695b      	ldr	r3, [r3, #20]
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	d004      	beq.n	8022ee2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022eda:	3304      	adds	r3, #4
 8022edc:	4618      	mov	r0, r3
 8022ede:	f7fd fcb1 	bl	8020844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022ee2:	463b      	mov	r3, r7
 8022ee4:	4618      	mov	r0, r3
 8022ee6:	f7ff ff6b 	bl	8022dc0 <prvSampleTimeNow>
 8022eea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	2b09      	cmp	r3, #9
 8022ef0:	f200 8096 	bhi.w	8023020 <prvProcessReceivedCommands+0x19c>
 8022ef4:	a201      	add	r2, pc, #4	; (adr r2, 8022efc <prvProcessReceivedCommands+0x78>)
 8022ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022efa:	bf00      	nop
 8022efc:	08022f25 	.word	0x08022f25
 8022f00:	08022f25 	.word	0x08022f25
 8022f04:	08022f25 	.word	0x08022f25
 8022f08:	08022f99 	.word	0x08022f99
 8022f0c:	08022fad 	.word	0x08022fad
 8022f10:	08022ff7 	.word	0x08022ff7
 8022f14:	08022f25 	.word	0x08022f25
 8022f18:	08022f25 	.word	0x08022f25
 8022f1c:	08022f99 	.word	0x08022f99
 8022f20:	08022fad 	.word	0x08022fad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022f2a:	f043 0301 	orr.w	r3, r3, #1
 8022f2e:	b2da      	uxtb	r2, r3
 8022f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8022f36:	68ba      	ldr	r2, [r7, #8]
 8022f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f3a:	699b      	ldr	r3, [r3, #24]
 8022f3c:	18d1      	adds	r1, r2, r3
 8022f3e:	68bb      	ldr	r3, [r7, #8]
 8022f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022f44:	f7ff ff5c 	bl	8022e00 <prvInsertTimerInActiveList>
 8022f48:	4603      	mov	r3, r0
 8022f4a:	2b00      	cmp	r3, #0
 8022f4c:	d069      	beq.n	8023022 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f50:	6a1b      	ldr	r3, [r3, #32]
 8022f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022f54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022f5c:	f003 0304 	and.w	r3, r3, #4
 8022f60:	2b00      	cmp	r3, #0
 8022f62:	d05e      	beq.n	8023022 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8022f64:	68ba      	ldr	r2, [r7, #8]
 8022f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f68:	699b      	ldr	r3, [r3, #24]
 8022f6a:	441a      	add	r2, r3
 8022f6c:	2300      	movs	r3, #0
 8022f6e:	9300      	str	r3, [sp, #0]
 8022f70:	2300      	movs	r3, #0
 8022f72:	2100      	movs	r1, #0
 8022f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022f76:	f7ff fe05 	bl	8022b84 <xTimerGenericCommand>
 8022f7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8022f7c:	6a3b      	ldr	r3, [r7, #32]
 8022f7e:	2b00      	cmp	r3, #0
 8022f80:	d14f      	bne.n	8023022 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8022f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022f86:	f383 8811 	msr	BASEPRI, r3
 8022f8a:	f3bf 8f6f 	isb	sy
 8022f8e:	f3bf 8f4f 	dsb	sy
 8022f92:	61bb      	str	r3, [r7, #24]
}
 8022f94:	bf00      	nop
 8022f96:	e7fe      	b.n	8022f96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022f9e:	f023 0301 	bic.w	r3, r3, #1
 8022fa2:	b2da      	uxtb	r2, r3
 8022fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8022faa:	e03a      	b.n	8023022 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022fb2:	f043 0301 	orr.w	r3, r3, #1
 8022fb6:	b2da      	uxtb	r2, r3
 8022fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8022fbe:	68ba      	ldr	r2, [r7, #8]
 8022fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8022fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fc6:	699b      	ldr	r3, [r3, #24]
 8022fc8:	2b00      	cmp	r3, #0
 8022fca:	d10a      	bne.n	8022fe2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8022fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022fd0:	f383 8811 	msr	BASEPRI, r3
 8022fd4:	f3bf 8f6f 	isb	sy
 8022fd8:	f3bf 8f4f 	dsb	sy
 8022fdc:	617b      	str	r3, [r7, #20]
}
 8022fde:	bf00      	nop
 8022fe0:	e7fe      	b.n	8022fe0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8022fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fe4:	699a      	ldr	r2, [r3, #24]
 8022fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fe8:	18d1      	adds	r1, r2, r3
 8022fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022ff0:	f7ff ff06 	bl	8022e00 <prvInsertTimerInActiveList>
					break;
 8022ff4:	e015      	b.n	8023022 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8022ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022ffc:	f003 0302 	and.w	r3, r3, #2
 8023000:	2b00      	cmp	r3, #0
 8023002:	d103      	bne.n	802300c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8023004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023006:	f000 fb55 	bl	80236b4 <vPortFree>
 802300a:	e00a      	b.n	8023022 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802300e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023012:	f023 0301 	bic.w	r3, r3, #1
 8023016:	b2da      	uxtb	r2, r3
 8023018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802301a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802301e:	e000      	b.n	8023022 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8023020:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8023022:	4b08      	ldr	r3, [pc, #32]	; (8023044 <prvProcessReceivedCommands+0x1c0>)
 8023024:	681b      	ldr	r3, [r3, #0]
 8023026:	1d39      	adds	r1, r7, #4
 8023028:	2200      	movs	r2, #0
 802302a:	4618      	mov	r0, r3
 802302c:	f7fd ffc2 	bl	8020fb4 <xQueueReceive>
 8023030:	4603      	mov	r3, r0
 8023032:	2b00      	cmp	r3, #0
 8023034:	f47f af2a 	bne.w	8022e8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8023038:	bf00      	nop
 802303a:	bf00      	nop
 802303c:	3730      	adds	r7, #48	; 0x30
 802303e:	46bd      	mov	sp, r7
 8023040:	bd80      	pop	{r7, pc}
 8023042:	bf00      	nop
 8023044:	20002290 	.word	0x20002290

08023048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8023048:	b580      	push	{r7, lr}
 802304a:	b088      	sub	sp, #32
 802304c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802304e:	e048      	b.n	80230e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8023050:	4b2d      	ldr	r3, [pc, #180]	; (8023108 <prvSwitchTimerLists+0xc0>)
 8023052:	681b      	ldr	r3, [r3, #0]
 8023054:	68db      	ldr	r3, [r3, #12]
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802305a:	4b2b      	ldr	r3, [pc, #172]	; (8023108 <prvSwitchTimerLists+0xc0>)
 802305c:	681b      	ldr	r3, [r3, #0]
 802305e:	68db      	ldr	r3, [r3, #12]
 8023060:	68db      	ldr	r3, [r3, #12]
 8023062:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023064:	68fb      	ldr	r3, [r7, #12]
 8023066:	3304      	adds	r3, #4
 8023068:	4618      	mov	r0, r3
 802306a:	f7fd fbeb 	bl	8020844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802306e:	68fb      	ldr	r3, [r7, #12]
 8023070:	6a1b      	ldr	r3, [r3, #32]
 8023072:	68f8      	ldr	r0, [r7, #12]
 8023074:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8023076:	68fb      	ldr	r3, [r7, #12]
 8023078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802307c:	f003 0304 	and.w	r3, r3, #4
 8023080:	2b00      	cmp	r3, #0
 8023082:	d02e      	beq.n	80230e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8023084:	68fb      	ldr	r3, [r7, #12]
 8023086:	699b      	ldr	r3, [r3, #24]
 8023088:	693a      	ldr	r2, [r7, #16]
 802308a:	4413      	add	r3, r2
 802308c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802308e:	68ba      	ldr	r2, [r7, #8]
 8023090:	693b      	ldr	r3, [r7, #16]
 8023092:	429a      	cmp	r2, r3
 8023094:	d90e      	bls.n	80230b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8023096:	68fb      	ldr	r3, [r7, #12]
 8023098:	68ba      	ldr	r2, [r7, #8]
 802309a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802309c:	68fb      	ldr	r3, [r7, #12]
 802309e:	68fa      	ldr	r2, [r7, #12]
 80230a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80230a2:	4b19      	ldr	r3, [pc, #100]	; (8023108 <prvSwitchTimerLists+0xc0>)
 80230a4:	681a      	ldr	r2, [r3, #0]
 80230a6:	68fb      	ldr	r3, [r7, #12]
 80230a8:	3304      	adds	r3, #4
 80230aa:	4619      	mov	r1, r3
 80230ac:	4610      	mov	r0, r2
 80230ae:	f7fd fb90 	bl	80207d2 <vListInsert>
 80230b2:	e016      	b.n	80230e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80230b4:	2300      	movs	r3, #0
 80230b6:	9300      	str	r3, [sp, #0]
 80230b8:	2300      	movs	r3, #0
 80230ba:	693a      	ldr	r2, [r7, #16]
 80230bc:	2100      	movs	r1, #0
 80230be:	68f8      	ldr	r0, [r7, #12]
 80230c0:	f7ff fd60 	bl	8022b84 <xTimerGenericCommand>
 80230c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80230c6:	687b      	ldr	r3, [r7, #4]
 80230c8:	2b00      	cmp	r3, #0
 80230ca:	d10a      	bne.n	80230e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80230cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80230d0:	f383 8811 	msr	BASEPRI, r3
 80230d4:	f3bf 8f6f 	isb	sy
 80230d8:	f3bf 8f4f 	dsb	sy
 80230dc:	603b      	str	r3, [r7, #0]
}
 80230de:	bf00      	nop
 80230e0:	e7fe      	b.n	80230e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80230e2:	4b09      	ldr	r3, [pc, #36]	; (8023108 <prvSwitchTimerLists+0xc0>)
 80230e4:	681b      	ldr	r3, [r3, #0]
 80230e6:	681b      	ldr	r3, [r3, #0]
 80230e8:	2b00      	cmp	r3, #0
 80230ea:	d1b1      	bne.n	8023050 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80230ec:	4b06      	ldr	r3, [pc, #24]	; (8023108 <prvSwitchTimerLists+0xc0>)
 80230ee:	681b      	ldr	r3, [r3, #0]
 80230f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80230f2:	4b06      	ldr	r3, [pc, #24]	; (802310c <prvSwitchTimerLists+0xc4>)
 80230f4:	681b      	ldr	r3, [r3, #0]
 80230f6:	4a04      	ldr	r2, [pc, #16]	; (8023108 <prvSwitchTimerLists+0xc0>)
 80230f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80230fa:	4a04      	ldr	r2, [pc, #16]	; (802310c <prvSwitchTimerLists+0xc4>)
 80230fc:	697b      	ldr	r3, [r7, #20]
 80230fe:	6013      	str	r3, [r2, #0]
}
 8023100:	bf00      	nop
 8023102:	3718      	adds	r7, #24
 8023104:	46bd      	mov	sp, r7
 8023106:	bd80      	pop	{r7, pc}
 8023108:	20002288 	.word	0x20002288
 802310c:	2000228c 	.word	0x2000228c

08023110 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8023110:	b580      	push	{r7, lr}
 8023112:	b082      	sub	sp, #8
 8023114:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8023116:	f000 f965 	bl	80233e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802311a:	4b15      	ldr	r3, [pc, #84]	; (8023170 <prvCheckForValidListAndQueue+0x60>)
 802311c:	681b      	ldr	r3, [r3, #0]
 802311e:	2b00      	cmp	r3, #0
 8023120:	d120      	bne.n	8023164 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8023122:	4814      	ldr	r0, [pc, #80]	; (8023174 <prvCheckForValidListAndQueue+0x64>)
 8023124:	f7fd fb04 	bl	8020730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8023128:	4813      	ldr	r0, [pc, #76]	; (8023178 <prvCheckForValidListAndQueue+0x68>)
 802312a:	f7fd fb01 	bl	8020730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802312e:	4b13      	ldr	r3, [pc, #76]	; (802317c <prvCheckForValidListAndQueue+0x6c>)
 8023130:	4a10      	ldr	r2, [pc, #64]	; (8023174 <prvCheckForValidListAndQueue+0x64>)
 8023132:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8023134:	4b12      	ldr	r3, [pc, #72]	; (8023180 <prvCheckForValidListAndQueue+0x70>)
 8023136:	4a10      	ldr	r2, [pc, #64]	; (8023178 <prvCheckForValidListAndQueue+0x68>)
 8023138:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802313a:	2300      	movs	r3, #0
 802313c:	9300      	str	r3, [sp, #0]
 802313e:	4b11      	ldr	r3, [pc, #68]	; (8023184 <prvCheckForValidListAndQueue+0x74>)
 8023140:	4a11      	ldr	r2, [pc, #68]	; (8023188 <prvCheckForValidListAndQueue+0x78>)
 8023142:	2110      	movs	r1, #16
 8023144:	200a      	movs	r0, #10
 8023146:	f7fd fc0f 	bl	8020968 <xQueueGenericCreateStatic>
 802314a:	4603      	mov	r3, r0
 802314c:	4a08      	ldr	r2, [pc, #32]	; (8023170 <prvCheckForValidListAndQueue+0x60>)
 802314e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8023150:	4b07      	ldr	r3, [pc, #28]	; (8023170 <prvCheckForValidListAndQueue+0x60>)
 8023152:	681b      	ldr	r3, [r3, #0]
 8023154:	2b00      	cmp	r3, #0
 8023156:	d005      	beq.n	8023164 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8023158:	4b05      	ldr	r3, [pc, #20]	; (8023170 <prvCheckForValidListAndQueue+0x60>)
 802315a:	681b      	ldr	r3, [r3, #0]
 802315c:	490b      	ldr	r1, [pc, #44]	; (802318c <prvCheckForValidListAndQueue+0x7c>)
 802315e:	4618      	mov	r0, r3
 8023160:	f7fe fbda 	bl	8021918 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8023164:	f000 f96e 	bl	8023444 <vPortExitCritical>
}
 8023168:	bf00      	nop
 802316a:	46bd      	mov	sp, r7
 802316c:	bd80      	pop	{r7, pc}
 802316e:	bf00      	nop
 8023170:	20002290 	.word	0x20002290
 8023174:	20002260 	.word	0x20002260
 8023178:	20002274 	.word	0x20002274
 802317c:	20002288 	.word	0x20002288
 8023180:	2000228c 	.word	0x2000228c
 8023184:	2000233c 	.word	0x2000233c
 8023188:	2000229c 	.word	0x2000229c
 802318c:	08033644 	.word	0x08033644

08023190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8023190:	b480      	push	{r7}
 8023192:	b085      	sub	sp, #20
 8023194:	af00      	add	r7, sp, #0
 8023196:	60f8      	str	r0, [r7, #12]
 8023198:	60b9      	str	r1, [r7, #8]
 802319a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802319c:	68fb      	ldr	r3, [r7, #12]
 802319e:	3b04      	subs	r3, #4
 80231a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80231a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80231aa:	68fb      	ldr	r3, [r7, #12]
 80231ac:	3b04      	subs	r3, #4
 80231ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80231b0:	68bb      	ldr	r3, [r7, #8]
 80231b2:	f023 0201 	bic.w	r2, r3, #1
 80231b6:	68fb      	ldr	r3, [r7, #12]
 80231b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80231ba:	68fb      	ldr	r3, [r7, #12]
 80231bc:	3b04      	subs	r3, #4
 80231be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80231c0:	4a0c      	ldr	r2, [pc, #48]	; (80231f4 <pxPortInitialiseStack+0x64>)
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80231c6:	68fb      	ldr	r3, [r7, #12]
 80231c8:	3b14      	subs	r3, #20
 80231ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80231cc:	687a      	ldr	r2, [r7, #4]
 80231ce:	68fb      	ldr	r3, [r7, #12]
 80231d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80231d2:	68fb      	ldr	r3, [r7, #12]
 80231d4:	3b04      	subs	r3, #4
 80231d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80231d8:	68fb      	ldr	r3, [r7, #12]
 80231da:	f06f 0202 	mvn.w	r2, #2
 80231de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80231e0:	68fb      	ldr	r3, [r7, #12]
 80231e2:	3b20      	subs	r3, #32
 80231e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80231e6:	68fb      	ldr	r3, [r7, #12]
}
 80231e8:	4618      	mov	r0, r3
 80231ea:	3714      	adds	r7, #20
 80231ec:	46bd      	mov	sp, r7
 80231ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231f2:	4770      	bx	lr
 80231f4:	080231f9 	.word	0x080231f9

080231f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80231f8:	b480      	push	{r7}
 80231fa:	b085      	sub	sp, #20
 80231fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80231fe:	2300      	movs	r3, #0
 8023200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8023202:	4b12      	ldr	r3, [pc, #72]	; (802324c <prvTaskExitError+0x54>)
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	f1b3 3fff 	cmp.w	r3, #4294967295
 802320a:	d00a      	beq.n	8023222 <prvTaskExitError+0x2a>
	__asm volatile
 802320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023210:	f383 8811 	msr	BASEPRI, r3
 8023214:	f3bf 8f6f 	isb	sy
 8023218:	f3bf 8f4f 	dsb	sy
 802321c:	60fb      	str	r3, [r7, #12]
}
 802321e:	bf00      	nop
 8023220:	e7fe      	b.n	8023220 <prvTaskExitError+0x28>
	__asm volatile
 8023222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023226:	f383 8811 	msr	BASEPRI, r3
 802322a:	f3bf 8f6f 	isb	sy
 802322e:	f3bf 8f4f 	dsb	sy
 8023232:	60bb      	str	r3, [r7, #8]
}
 8023234:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8023236:	bf00      	nop
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	2b00      	cmp	r3, #0
 802323c:	d0fc      	beq.n	8023238 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802323e:	bf00      	nop
 8023240:	bf00      	nop
 8023242:	3714      	adds	r7, #20
 8023244:	46bd      	mov	sp, r7
 8023246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802324a:	4770      	bx	lr
 802324c:	20000128 	.word	0x20000128

08023250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8023250:	4b07      	ldr	r3, [pc, #28]	; (8023270 <pxCurrentTCBConst2>)
 8023252:	6819      	ldr	r1, [r3, #0]
 8023254:	6808      	ldr	r0, [r1, #0]
 8023256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802325a:	f380 8809 	msr	PSP, r0
 802325e:	f3bf 8f6f 	isb	sy
 8023262:	f04f 0000 	mov.w	r0, #0
 8023266:	f380 8811 	msr	BASEPRI, r0
 802326a:	4770      	bx	lr
 802326c:	f3af 8000 	nop.w

08023270 <pxCurrentTCBConst2>:
 8023270:	20001d58 	.word	0x20001d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8023274:	bf00      	nop
 8023276:	bf00      	nop

08023278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8023278:	4808      	ldr	r0, [pc, #32]	; (802329c <prvPortStartFirstTask+0x24>)
 802327a:	6800      	ldr	r0, [r0, #0]
 802327c:	6800      	ldr	r0, [r0, #0]
 802327e:	f380 8808 	msr	MSP, r0
 8023282:	f04f 0000 	mov.w	r0, #0
 8023286:	f380 8814 	msr	CONTROL, r0
 802328a:	b662      	cpsie	i
 802328c:	b661      	cpsie	f
 802328e:	f3bf 8f4f 	dsb	sy
 8023292:	f3bf 8f6f 	isb	sy
 8023296:	df00      	svc	0
 8023298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802329a:	bf00      	nop
 802329c:	e000ed08 	.word	0xe000ed08

080232a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80232a0:	b580      	push	{r7, lr}
 80232a2:	b086      	sub	sp, #24
 80232a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80232a6:	4b46      	ldr	r3, [pc, #280]	; (80233c0 <xPortStartScheduler+0x120>)
 80232a8:	681b      	ldr	r3, [r3, #0]
 80232aa:	4a46      	ldr	r2, [pc, #280]	; (80233c4 <xPortStartScheduler+0x124>)
 80232ac:	4293      	cmp	r3, r2
 80232ae:	d10a      	bne.n	80232c6 <xPortStartScheduler+0x26>
	__asm volatile
 80232b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80232b4:	f383 8811 	msr	BASEPRI, r3
 80232b8:	f3bf 8f6f 	isb	sy
 80232bc:	f3bf 8f4f 	dsb	sy
 80232c0:	613b      	str	r3, [r7, #16]
}
 80232c2:	bf00      	nop
 80232c4:	e7fe      	b.n	80232c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80232c6:	4b3e      	ldr	r3, [pc, #248]	; (80233c0 <xPortStartScheduler+0x120>)
 80232c8:	681b      	ldr	r3, [r3, #0]
 80232ca:	4a3f      	ldr	r2, [pc, #252]	; (80233c8 <xPortStartScheduler+0x128>)
 80232cc:	4293      	cmp	r3, r2
 80232ce:	d10a      	bne.n	80232e6 <xPortStartScheduler+0x46>
	__asm volatile
 80232d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80232d4:	f383 8811 	msr	BASEPRI, r3
 80232d8:	f3bf 8f6f 	isb	sy
 80232dc:	f3bf 8f4f 	dsb	sy
 80232e0:	60fb      	str	r3, [r7, #12]
}
 80232e2:	bf00      	nop
 80232e4:	e7fe      	b.n	80232e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80232e6:	4b39      	ldr	r3, [pc, #228]	; (80233cc <xPortStartScheduler+0x12c>)
 80232e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80232ea:	697b      	ldr	r3, [r7, #20]
 80232ec:	781b      	ldrb	r3, [r3, #0]
 80232ee:	b2db      	uxtb	r3, r3
 80232f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80232f2:	697b      	ldr	r3, [r7, #20]
 80232f4:	22ff      	movs	r2, #255	; 0xff
 80232f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80232f8:	697b      	ldr	r3, [r7, #20]
 80232fa:	781b      	ldrb	r3, [r3, #0]
 80232fc:	b2db      	uxtb	r3, r3
 80232fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8023300:	78fb      	ldrb	r3, [r7, #3]
 8023302:	b2db      	uxtb	r3, r3
 8023304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8023308:	b2da      	uxtb	r2, r3
 802330a:	4b31      	ldr	r3, [pc, #196]	; (80233d0 <xPortStartScheduler+0x130>)
 802330c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802330e:	4b31      	ldr	r3, [pc, #196]	; (80233d4 <xPortStartScheduler+0x134>)
 8023310:	2207      	movs	r2, #7
 8023312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8023314:	e009      	b.n	802332a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8023316:	4b2f      	ldr	r3, [pc, #188]	; (80233d4 <xPortStartScheduler+0x134>)
 8023318:	681b      	ldr	r3, [r3, #0]
 802331a:	3b01      	subs	r3, #1
 802331c:	4a2d      	ldr	r2, [pc, #180]	; (80233d4 <xPortStartScheduler+0x134>)
 802331e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8023320:	78fb      	ldrb	r3, [r7, #3]
 8023322:	b2db      	uxtb	r3, r3
 8023324:	005b      	lsls	r3, r3, #1
 8023326:	b2db      	uxtb	r3, r3
 8023328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802332a:	78fb      	ldrb	r3, [r7, #3]
 802332c:	b2db      	uxtb	r3, r3
 802332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023332:	2b80      	cmp	r3, #128	; 0x80
 8023334:	d0ef      	beq.n	8023316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8023336:	4b27      	ldr	r3, [pc, #156]	; (80233d4 <xPortStartScheduler+0x134>)
 8023338:	681b      	ldr	r3, [r3, #0]
 802333a:	f1c3 0307 	rsb	r3, r3, #7
 802333e:	2b04      	cmp	r3, #4
 8023340:	d00a      	beq.n	8023358 <xPortStartScheduler+0xb8>
	__asm volatile
 8023342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023346:	f383 8811 	msr	BASEPRI, r3
 802334a:	f3bf 8f6f 	isb	sy
 802334e:	f3bf 8f4f 	dsb	sy
 8023352:	60bb      	str	r3, [r7, #8]
}
 8023354:	bf00      	nop
 8023356:	e7fe      	b.n	8023356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8023358:	4b1e      	ldr	r3, [pc, #120]	; (80233d4 <xPortStartScheduler+0x134>)
 802335a:	681b      	ldr	r3, [r3, #0]
 802335c:	021b      	lsls	r3, r3, #8
 802335e:	4a1d      	ldr	r2, [pc, #116]	; (80233d4 <xPortStartScheduler+0x134>)
 8023360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8023362:	4b1c      	ldr	r3, [pc, #112]	; (80233d4 <xPortStartScheduler+0x134>)
 8023364:	681b      	ldr	r3, [r3, #0]
 8023366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802336a:	4a1a      	ldr	r2, [pc, #104]	; (80233d4 <xPortStartScheduler+0x134>)
 802336c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	b2da      	uxtb	r2, r3
 8023372:	697b      	ldr	r3, [r7, #20]
 8023374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8023376:	4b18      	ldr	r3, [pc, #96]	; (80233d8 <xPortStartScheduler+0x138>)
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	4a17      	ldr	r2, [pc, #92]	; (80233d8 <xPortStartScheduler+0x138>)
 802337c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8023382:	4b15      	ldr	r3, [pc, #84]	; (80233d8 <xPortStartScheduler+0x138>)
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	4a14      	ldr	r2, [pc, #80]	; (80233d8 <xPortStartScheduler+0x138>)
 8023388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802338c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802338e:	f000 f8dd 	bl	802354c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8023392:	4b12      	ldr	r3, [pc, #72]	; (80233dc <xPortStartScheduler+0x13c>)
 8023394:	2200      	movs	r2, #0
 8023396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8023398:	f000 f8fc 	bl	8023594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802339c:	4b10      	ldr	r3, [pc, #64]	; (80233e0 <xPortStartScheduler+0x140>)
 802339e:	681b      	ldr	r3, [r3, #0]
 80233a0:	4a0f      	ldr	r2, [pc, #60]	; (80233e0 <xPortStartScheduler+0x140>)
 80233a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80233a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80233a8:	f7ff ff66 	bl	8023278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80233ac:	f7fe feea 	bl	8022184 <vTaskSwitchContext>
	prvTaskExitError();
 80233b0:	f7ff ff22 	bl	80231f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80233b4:	2300      	movs	r3, #0
}
 80233b6:	4618      	mov	r0, r3
 80233b8:	3718      	adds	r7, #24
 80233ba:	46bd      	mov	sp, r7
 80233bc:	bd80      	pop	{r7, pc}
 80233be:	bf00      	nop
 80233c0:	e000ed00 	.word	0xe000ed00
 80233c4:	410fc271 	.word	0x410fc271
 80233c8:	410fc270 	.word	0x410fc270
 80233cc:	e000e400 	.word	0xe000e400
 80233d0:	2000238c 	.word	0x2000238c
 80233d4:	20002390 	.word	0x20002390
 80233d8:	e000ed20 	.word	0xe000ed20
 80233dc:	20000128 	.word	0x20000128
 80233e0:	e000ef34 	.word	0xe000ef34

080233e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80233e4:	b480      	push	{r7}
 80233e6:	b083      	sub	sp, #12
 80233e8:	af00      	add	r7, sp, #0
	__asm volatile
 80233ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80233ee:	f383 8811 	msr	BASEPRI, r3
 80233f2:	f3bf 8f6f 	isb	sy
 80233f6:	f3bf 8f4f 	dsb	sy
 80233fa:	607b      	str	r3, [r7, #4]
}
 80233fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80233fe:	4b0f      	ldr	r3, [pc, #60]	; (802343c <vPortEnterCritical+0x58>)
 8023400:	681b      	ldr	r3, [r3, #0]
 8023402:	3301      	adds	r3, #1
 8023404:	4a0d      	ldr	r2, [pc, #52]	; (802343c <vPortEnterCritical+0x58>)
 8023406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8023408:	4b0c      	ldr	r3, [pc, #48]	; (802343c <vPortEnterCritical+0x58>)
 802340a:	681b      	ldr	r3, [r3, #0]
 802340c:	2b01      	cmp	r3, #1
 802340e:	d10f      	bne.n	8023430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8023410:	4b0b      	ldr	r3, [pc, #44]	; (8023440 <vPortEnterCritical+0x5c>)
 8023412:	681b      	ldr	r3, [r3, #0]
 8023414:	b2db      	uxtb	r3, r3
 8023416:	2b00      	cmp	r3, #0
 8023418:	d00a      	beq.n	8023430 <vPortEnterCritical+0x4c>
	__asm volatile
 802341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802341e:	f383 8811 	msr	BASEPRI, r3
 8023422:	f3bf 8f6f 	isb	sy
 8023426:	f3bf 8f4f 	dsb	sy
 802342a:	603b      	str	r3, [r7, #0]
}
 802342c:	bf00      	nop
 802342e:	e7fe      	b.n	802342e <vPortEnterCritical+0x4a>
	}
}
 8023430:	bf00      	nop
 8023432:	370c      	adds	r7, #12
 8023434:	46bd      	mov	sp, r7
 8023436:	f85d 7b04 	ldr.w	r7, [sp], #4
 802343a:	4770      	bx	lr
 802343c:	20000128 	.word	0x20000128
 8023440:	e000ed04 	.word	0xe000ed04

08023444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8023444:	b480      	push	{r7}
 8023446:	b083      	sub	sp, #12
 8023448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802344a:	4b12      	ldr	r3, [pc, #72]	; (8023494 <vPortExitCritical+0x50>)
 802344c:	681b      	ldr	r3, [r3, #0]
 802344e:	2b00      	cmp	r3, #0
 8023450:	d10a      	bne.n	8023468 <vPortExitCritical+0x24>
	__asm volatile
 8023452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023456:	f383 8811 	msr	BASEPRI, r3
 802345a:	f3bf 8f6f 	isb	sy
 802345e:	f3bf 8f4f 	dsb	sy
 8023462:	607b      	str	r3, [r7, #4]
}
 8023464:	bf00      	nop
 8023466:	e7fe      	b.n	8023466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8023468:	4b0a      	ldr	r3, [pc, #40]	; (8023494 <vPortExitCritical+0x50>)
 802346a:	681b      	ldr	r3, [r3, #0]
 802346c:	3b01      	subs	r3, #1
 802346e:	4a09      	ldr	r2, [pc, #36]	; (8023494 <vPortExitCritical+0x50>)
 8023470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8023472:	4b08      	ldr	r3, [pc, #32]	; (8023494 <vPortExitCritical+0x50>)
 8023474:	681b      	ldr	r3, [r3, #0]
 8023476:	2b00      	cmp	r3, #0
 8023478:	d105      	bne.n	8023486 <vPortExitCritical+0x42>
 802347a:	2300      	movs	r3, #0
 802347c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802347e:	683b      	ldr	r3, [r7, #0]
 8023480:	f383 8811 	msr	BASEPRI, r3
}
 8023484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8023486:	bf00      	nop
 8023488:	370c      	adds	r7, #12
 802348a:	46bd      	mov	sp, r7
 802348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023490:	4770      	bx	lr
 8023492:	bf00      	nop
 8023494:	20000128 	.word	0x20000128
	...

080234a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80234a0:	f3ef 8009 	mrs	r0, PSP
 80234a4:	f3bf 8f6f 	isb	sy
 80234a8:	4b15      	ldr	r3, [pc, #84]	; (8023500 <pxCurrentTCBConst>)
 80234aa:	681a      	ldr	r2, [r3, #0]
 80234ac:	f01e 0f10 	tst.w	lr, #16
 80234b0:	bf08      	it	eq
 80234b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80234b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234ba:	6010      	str	r0, [r2, #0]
 80234bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80234c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80234c4:	f380 8811 	msr	BASEPRI, r0
 80234c8:	f3bf 8f4f 	dsb	sy
 80234cc:	f3bf 8f6f 	isb	sy
 80234d0:	f7fe fe58 	bl	8022184 <vTaskSwitchContext>
 80234d4:	f04f 0000 	mov.w	r0, #0
 80234d8:	f380 8811 	msr	BASEPRI, r0
 80234dc:	bc09      	pop	{r0, r3}
 80234de:	6819      	ldr	r1, [r3, #0]
 80234e0:	6808      	ldr	r0, [r1, #0]
 80234e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234e6:	f01e 0f10 	tst.w	lr, #16
 80234ea:	bf08      	it	eq
 80234ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80234f0:	f380 8809 	msr	PSP, r0
 80234f4:	f3bf 8f6f 	isb	sy
 80234f8:	4770      	bx	lr
 80234fa:	bf00      	nop
 80234fc:	f3af 8000 	nop.w

08023500 <pxCurrentTCBConst>:
 8023500:	20001d58 	.word	0x20001d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8023504:	bf00      	nop
 8023506:	bf00      	nop

08023508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8023508:	b580      	push	{r7, lr}
 802350a:	b082      	sub	sp, #8
 802350c:	af00      	add	r7, sp, #0
	__asm volatile
 802350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023512:	f383 8811 	msr	BASEPRI, r3
 8023516:	f3bf 8f6f 	isb	sy
 802351a:	f3bf 8f4f 	dsb	sy
 802351e:	607b      	str	r3, [r7, #4]
}
 8023520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8023522:	f7fe fd75 	bl	8022010 <xTaskIncrementTick>
 8023526:	4603      	mov	r3, r0
 8023528:	2b00      	cmp	r3, #0
 802352a:	d003      	beq.n	8023534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802352c:	4b06      	ldr	r3, [pc, #24]	; (8023548 <xPortSysTickHandler+0x40>)
 802352e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023532:	601a      	str	r2, [r3, #0]
 8023534:	2300      	movs	r3, #0
 8023536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8023538:	683b      	ldr	r3, [r7, #0]
 802353a:	f383 8811 	msr	BASEPRI, r3
}
 802353e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8023540:	bf00      	nop
 8023542:	3708      	adds	r7, #8
 8023544:	46bd      	mov	sp, r7
 8023546:	bd80      	pop	{r7, pc}
 8023548:	e000ed04 	.word	0xe000ed04

0802354c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802354c:	b480      	push	{r7}
 802354e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8023550:	4b0b      	ldr	r3, [pc, #44]	; (8023580 <vPortSetupTimerInterrupt+0x34>)
 8023552:	2200      	movs	r2, #0
 8023554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8023556:	4b0b      	ldr	r3, [pc, #44]	; (8023584 <vPortSetupTimerInterrupt+0x38>)
 8023558:	2200      	movs	r2, #0
 802355a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802355c:	4b0a      	ldr	r3, [pc, #40]	; (8023588 <vPortSetupTimerInterrupt+0x3c>)
 802355e:	681b      	ldr	r3, [r3, #0]
 8023560:	4a0a      	ldr	r2, [pc, #40]	; (802358c <vPortSetupTimerInterrupt+0x40>)
 8023562:	fba2 2303 	umull	r2, r3, r2, r3
 8023566:	099b      	lsrs	r3, r3, #6
 8023568:	4a09      	ldr	r2, [pc, #36]	; (8023590 <vPortSetupTimerInterrupt+0x44>)
 802356a:	3b01      	subs	r3, #1
 802356c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802356e:	4b04      	ldr	r3, [pc, #16]	; (8023580 <vPortSetupTimerInterrupt+0x34>)
 8023570:	2207      	movs	r2, #7
 8023572:	601a      	str	r2, [r3, #0]
}
 8023574:	bf00      	nop
 8023576:	46bd      	mov	sp, r7
 8023578:	f85d 7b04 	ldr.w	r7, [sp], #4
 802357c:	4770      	bx	lr
 802357e:	bf00      	nop
 8023580:	e000e010 	.word	0xe000e010
 8023584:	e000e018 	.word	0xe000e018
 8023588:	20000000 	.word	0x20000000
 802358c:	10624dd3 	.word	0x10624dd3
 8023590:	e000e014 	.word	0xe000e014

08023594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80235a4 <vPortEnableVFP+0x10>
 8023598:	6801      	ldr	r1, [r0, #0]
 802359a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802359e:	6001      	str	r1, [r0, #0]
 80235a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80235a2:	bf00      	nop
 80235a4:	e000ed88 	.word	0xe000ed88

080235a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80235a8:	b480      	push	{r7}
 80235aa:	b085      	sub	sp, #20
 80235ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80235ae:	f3ef 8305 	mrs	r3, IPSR
 80235b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	2b0f      	cmp	r3, #15
 80235b8:	d914      	bls.n	80235e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80235ba:	4a17      	ldr	r2, [pc, #92]	; (8023618 <vPortValidateInterruptPriority+0x70>)
 80235bc:	68fb      	ldr	r3, [r7, #12]
 80235be:	4413      	add	r3, r2
 80235c0:	781b      	ldrb	r3, [r3, #0]
 80235c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80235c4:	4b15      	ldr	r3, [pc, #84]	; (802361c <vPortValidateInterruptPriority+0x74>)
 80235c6:	781b      	ldrb	r3, [r3, #0]
 80235c8:	7afa      	ldrb	r2, [r7, #11]
 80235ca:	429a      	cmp	r2, r3
 80235cc:	d20a      	bcs.n	80235e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80235ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80235d2:	f383 8811 	msr	BASEPRI, r3
 80235d6:	f3bf 8f6f 	isb	sy
 80235da:	f3bf 8f4f 	dsb	sy
 80235de:	607b      	str	r3, [r7, #4]
}
 80235e0:	bf00      	nop
 80235e2:	e7fe      	b.n	80235e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80235e4:	4b0e      	ldr	r3, [pc, #56]	; (8023620 <vPortValidateInterruptPriority+0x78>)
 80235e6:	681b      	ldr	r3, [r3, #0]
 80235e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80235ec:	4b0d      	ldr	r3, [pc, #52]	; (8023624 <vPortValidateInterruptPriority+0x7c>)
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	429a      	cmp	r2, r3
 80235f2:	d90a      	bls.n	802360a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80235f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80235f8:	f383 8811 	msr	BASEPRI, r3
 80235fc:	f3bf 8f6f 	isb	sy
 8023600:	f3bf 8f4f 	dsb	sy
 8023604:	603b      	str	r3, [r7, #0]
}
 8023606:	bf00      	nop
 8023608:	e7fe      	b.n	8023608 <vPortValidateInterruptPriority+0x60>
	}
 802360a:	bf00      	nop
 802360c:	3714      	adds	r7, #20
 802360e:	46bd      	mov	sp, r7
 8023610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023614:	4770      	bx	lr
 8023616:	bf00      	nop
 8023618:	e000e3f0 	.word	0xe000e3f0
 802361c:	2000238c 	.word	0x2000238c
 8023620:	e000ed0c 	.word	0xe000ed0c
 8023624:	20002390 	.word	0x20002390

08023628 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8023628:	b580      	push	{r7, lr}
 802362a:	b084      	sub	sp, #16
 802362c:	af00      	add	r7, sp, #0
 802362e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8023630:	2300      	movs	r3, #0
 8023632:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	f003 0307 	and.w	r3, r3, #7
 802363a:	2b00      	cmp	r3, #0
 802363c:	d004      	beq.n	8023648 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802363e:	687b      	ldr	r3, [r7, #4]
 8023640:	f023 0307 	bic.w	r3, r3, #7
 8023644:	3308      	adds	r3, #8
 8023646:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8023648:	f7fe fc26 	bl	8021e98 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 802364c:	4b16      	ldr	r3, [pc, #88]	; (80236a8 <pvPortMalloc+0x80>)
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	2b00      	cmp	r3, #0
 8023652:	d105      	bne.n	8023660 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8023654:	4b15      	ldr	r3, [pc, #84]	; (80236ac <pvPortMalloc+0x84>)
 8023656:	f023 0307 	bic.w	r3, r3, #7
 802365a:	461a      	mov	r2, r3
 802365c:	4b12      	ldr	r3, [pc, #72]	; (80236a8 <pvPortMalloc+0x80>)
 802365e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8023660:	4b13      	ldr	r3, [pc, #76]	; (80236b0 <pvPortMalloc+0x88>)
 8023662:	681a      	ldr	r2, [r3, #0]
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	4413      	add	r3, r2
 8023668:	f24b 1227 	movw	r2, #45351	; 0xb127
 802366c:	4293      	cmp	r3, r2
 802366e:	d813      	bhi.n	8023698 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8023670:	4b0f      	ldr	r3, [pc, #60]	; (80236b0 <pvPortMalloc+0x88>)
 8023672:	681a      	ldr	r2, [r3, #0]
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	441a      	add	r2, r3
 8023678:	4b0d      	ldr	r3, [pc, #52]	; (80236b0 <pvPortMalloc+0x88>)
 802367a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 802367c:	429a      	cmp	r2, r3
 802367e:	d90b      	bls.n	8023698 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8023680:	4b09      	ldr	r3, [pc, #36]	; (80236a8 <pvPortMalloc+0x80>)
 8023682:	681a      	ldr	r2, [r3, #0]
 8023684:	4b0a      	ldr	r3, [pc, #40]	; (80236b0 <pvPortMalloc+0x88>)
 8023686:	681b      	ldr	r3, [r3, #0]
 8023688:	4413      	add	r3, r2
 802368a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 802368c:	4b08      	ldr	r3, [pc, #32]	; (80236b0 <pvPortMalloc+0x88>)
 802368e:	681a      	ldr	r2, [r3, #0]
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	4413      	add	r3, r2
 8023694:	4a06      	ldr	r2, [pc, #24]	; (80236b0 <pvPortMalloc+0x88>)
 8023696:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8023698:	f7fe fc0c 	bl	8021eb4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 802369c:	68fb      	ldr	r3, [r7, #12]
}
 802369e:	4618      	mov	r0, r3
 80236a0:	3710      	adds	r7, #16
 80236a2:	46bd      	mov	sp, r7
 80236a4:	bd80      	pop	{r7, pc}
 80236a6:	bf00      	nop
 80236a8:	2000d4c8 	.word	0x2000d4c8
 80236ac:	2000239c 	.word	0x2000239c
 80236b0:	2000d4c4 	.word	0x2000d4c4

080236b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80236b4:	b480      	push	{r7}
 80236b6:	b085      	sub	sp, #20
 80236b8:	af00      	add	r7, sp, #0
 80236ba:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d00a      	beq.n	80236d8 <vPortFree+0x24>
	__asm volatile
 80236c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80236c6:	f383 8811 	msr	BASEPRI, r3
 80236ca:	f3bf 8f6f 	isb	sy
 80236ce:	f3bf 8f4f 	dsb	sy
 80236d2:	60fb      	str	r3, [r7, #12]
}
 80236d4:	bf00      	nop
 80236d6:	e7fe      	b.n	80236d6 <vPortFree+0x22>
}
 80236d8:	bf00      	nop
 80236da:	3714      	adds	r7, #20
 80236dc:	46bd      	mov	sp, r7
 80236de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236e2:	4770      	bx	lr

080236e4 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80236e4:	b480      	push	{r7}
 80236e6:	b083      	sub	sp, #12
 80236e8:	af00      	add	r7, sp, #0
 80236ea:	6078      	str	r0, [r7, #4]
 80236ec:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80236ee:	683a      	ldr	r2, [r7, #0]
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	4293      	cmp	r3, r2
 80236f4:	bf38      	it	cc
 80236f6:	4613      	movcc	r3, r2
}
 80236f8:	4618      	mov	r0, r3
 80236fa:	370c      	adds	r7, #12
 80236fc:	46bd      	mov	sp, r7
 80236fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023702:	4770      	bx	lr

08023704 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8023704:	b480      	push	{r7}
 8023706:	b083      	sub	sp, #12
 8023708:	af00      	add	r7, sp, #0
 802370a:	6078      	str	r0, [r7, #4]
 802370c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 802370e:	683a      	ldr	r2, [r7, #0]
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	4293      	cmp	r3, r2
 8023714:	bf28      	it	cs
 8023716:	4613      	movcs	r3, r2
}
 8023718:	4618      	mov	r0, r3
 802371a:	370c      	adds	r7, #12
 802371c:	46bd      	mov	sp, r7
 802371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023722:	4770      	bx	lr

08023724 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8023724:	b480      	push	{r7}
 8023726:	b083      	sub	sp, #12
 8023728:	af00      	add	r7, sp, #0
 802372a:	6078      	str	r0, [r7, #4]
 802372c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	683a      	ldr	r2, [r7, #0]
 8023732:	fbb3 f2f2 	udiv	r2, r3, r2
 8023736:	6839      	ldr	r1, [r7, #0]
 8023738:	fb01 f202 	mul.w	r2, r1, r2
 802373c:	1a9b      	subs	r3, r3, r2
 802373e:	687a      	ldr	r2, [r7, #4]
 8023740:	1ad3      	subs	r3, r2, r3
}
 8023742:	4618      	mov	r0, r3
 8023744:	370c      	adds	r7, #12
 8023746:	46bd      	mov	sp, r7
 8023748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802374c:	4770      	bx	lr

0802374e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 802374e:	b580      	push	{r7, lr}
 8023750:	b082      	sub	sp, #8
 8023752:	af00      	add	r7, sp, #0
 8023754:	6078      	str	r0, [r7, #4]
 8023756:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8023758:	687a      	ldr	r2, [r7, #4]
 802375a:	683b      	ldr	r3, [r7, #0]
 802375c:	4413      	add	r3, r2
 802375e:	3b01      	subs	r3, #1
 8023760:	6839      	ldr	r1, [r7, #0]
 8023762:	4618      	mov	r0, r3
 8023764:	f7ff ffde 	bl	8023724 <lfs_aligndown>
 8023768:	4603      	mov	r3, r0
}
 802376a:	4618      	mov	r0, r3
 802376c:	3708      	adds	r7, #8
 802376e:	46bd      	mov	sp, r7
 8023770:	bd80      	pop	{r7, pc}

08023772 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8023772:	b480      	push	{r7}
 8023774:	b083      	sub	sp, #12
 8023776:	af00      	add	r7, sp, #0
 8023778:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	3b01      	subs	r3, #1
 802377e:	fab3 f383 	clz	r3, r3
 8023782:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8023786:	4618      	mov	r0, r3
 8023788:	370c      	adds	r7, #12
 802378a:	46bd      	mov	sp, r7
 802378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023790:	4770      	bx	lr

08023792 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023792:	b480      	push	{r7}
 8023794:	b083      	sub	sp, #12
 8023796:	af00      	add	r7, sp, #0
 8023798:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	fa93 f3a3 	rbit	r3, r3
 80237a0:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80237a4:	4618      	mov	r0, r3
 80237a6:	370c      	adds	r7, #12
 80237a8:	46bd      	mov	sp, r7
 80237aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237ae:	4770      	bx	lr

080237b0 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80237b0:	b580      	push	{r7, lr}
 80237b2:	b082      	sub	sp, #8
 80237b4:	af00      	add	r7, sp, #0
 80237b6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80237b8:	6878      	ldr	r0, [r7, #4]
 80237ba:	f7ed fa95 	bl	8010ce8 <__popcountsi2>
 80237be:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80237c0:	4618      	mov	r0, r3
 80237c2:	3708      	adds	r7, #8
 80237c4:	46bd      	mov	sp, r7
 80237c6:	bd80      	pop	{r7, pc}

080237c8 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80237c8:	b480      	push	{r7}
 80237ca:	b083      	sub	sp, #12
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	6078      	str	r0, [r7, #4]
 80237d0:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80237d2:	687a      	ldr	r2, [r7, #4]
 80237d4:	683b      	ldr	r3, [r7, #0]
 80237d6:	1ad3      	subs	r3, r2, r3
}
 80237d8:	4618      	mov	r0, r3
 80237da:	370c      	adds	r7, #12
 80237dc:	46bd      	mov	sp, r7
 80237de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237e2:	4770      	bx	lr

080237e4 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80237e4:	b480      	push	{r7}
 80237e6:	b083      	sub	sp, #12
 80237e8:	af00      	add	r7, sp, #0
 80237ea:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80237ec:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80237ee:	4618      	mov	r0, r3
 80237f0:	370c      	adds	r7, #12
 80237f2:	46bd      	mov	sp, r7
 80237f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237f8:	4770      	bx	lr

080237fa <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80237fa:	b580      	push	{r7, lr}
 80237fc:	b082      	sub	sp, #8
 80237fe:	af00      	add	r7, sp, #0
 8023800:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8023802:	6878      	ldr	r0, [r7, #4]
 8023804:	f7ff ffee 	bl	80237e4 <lfs_fromle32>
 8023808:	4603      	mov	r3, r0
}
 802380a:	4618      	mov	r0, r3
 802380c:	3708      	adds	r7, #8
 802380e:	46bd      	mov	sp, r7
 8023810:	bd80      	pop	{r7, pc}

08023812 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8023812:	b480      	push	{r7}
 8023814:	b083      	sub	sp, #12
 8023816:	af00      	add	r7, sp, #0
 8023818:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 802381a:	687b      	ldr	r3, [r7, #4]
 802381c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 802381e:	4618      	mov	r0, r3
 8023820:	370c      	adds	r7, #12
 8023822:	46bd      	mov	sp, r7
 8023824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023828:	4770      	bx	lr

0802382a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 802382a:	b580      	push	{r7, lr}
 802382c:	b082      	sub	sp, #8
 802382e:	af00      	add	r7, sp, #0
 8023830:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8023832:	6878      	ldr	r0, [r7, #4]
 8023834:	f7ff ffed 	bl	8023812 <lfs_frombe32>
 8023838:	4603      	mov	r3, r0
}
 802383a:	4618      	mov	r0, r3
 802383c:	3708      	adds	r7, #8
 802383e:	46bd      	mov	sp, r7
 8023840:	bd80      	pop	{r7, pc}

08023842 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8023842:	b580      	push	{r7, lr}
 8023844:	b082      	sub	sp, #8
 8023846:	af00      	add	r7, sp, #0
 8023848:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 802384a:	6878      	ldr	r0, [r7, #4]
 802384c:	f008 fed2 	bl	802c5f4 <malloc>
 8023850:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8023852:	4618      	mov	r0, r3
 8023854:	3708      	adds	r7, #8
 8023856:	46bd      	mov	sp, r7
 8023858:	bd80      	pop	{r7, pc}

0802385a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 802385a:	b580      	push	{r7, lr}
 802385c:	b082      	sub	sp, #8
 802385e:	af00      	add	r7, sp, #0
 8023860:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8023862:	6878      	ldr	r0, [r7, #4]
 8023864:	f008 fece 	bl	802c604 <free>
#else
    (void)p;
#endif
}
 8023868:	bf00      	nop
 802386a:	3708      	adds	r7, #8
 802386c:	46bd      	mov	sp, r7
 802386e:	bd80      	pop	{r7, pc}

08023870 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8023870:	b480      	push	{r7}
 8023872:	b083      	sub	sp, #12
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]
 8023878:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 802387a:	683b      	ldr	r3, [r7, #0]
 802387c:	f04f 32ff 	mov.w	r2, #4294967295
 8023880:	601a      	str	r2, [r3, #0]
}
 8023882:	bf00      	nop
 8023884:	370c      	adds	r7, #12
 8023886:	46bd      	mov	sp, r7
 8023888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802388c:	4770      	bx	lr

0802388e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 802388e:	b580      	push	{r7, lr}
 8023890:	b082      	sub	sp, #8
 8023892:	af00      	add	r7, sp, #0
 8023894:	6078      	str	r0, [r7, #4]
 8023896:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023898:	683b      	ldr	r3, [r7, #0]
 802389a:	68d8      	ldr	r0, [r3, #12]
 802389c:	687b      	ldr	r3, [r7, #4]
 802389e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80238a2:	461a      	mov	r2, r3
 80238a4:	21ff      	movs	r1, #255	; 0xff
 80238a6:	f00a f841 	bl	802d92c <memset>
    pcache->block = LFS_BLOCK_NULL;
 80238aa:	683b      	ldr	r3, [r7, #0]
 80238ac:	f04f 32ff 	mov.w	r2, #4294967295
 80238b0:	601a      	str	r2, [r3, #0]
}
 80238b2:	bf00      	nop
 80238b4:	3708      	adds	r7, #8
 80238b6:	46bd      	mov	sp, r7
 80238b8:	bd80      	pop	{r7, pc}
	...

080238bc <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80238bc:	b5b0      	push	{r4, r5, r7, lr}
 80238be:	b08a      	sub	sp, #40	; 0x28
 80238c0:	af02      	add	r7, sp, #8
 80238c2:	60f8      	str	r0, [r7, #12]
 80238c4:	60b9      	str	r1, [r7, #8]
 80238c6:	607a      	str	r2, [r7, #4]
 80238c8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80238ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238cc:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 80238ce:	68fb      	ldr	r3, [r7, #12]
 80238d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238d2:	6a1b      	ldr	r3, [r3, #32]
 80238d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80238d6:	429a      	cmp	r2, r3
 80238d8:	d208      	bcs.n	80238ec <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 80238da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80238dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80238de:	441a      	add	r2, r3
 80238e0:	68fb      	ldr	r3, [r7, #12]
 80238e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238e4:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 80238e6:	429a      	cmp	r2, r3
 80238e8:	f240 811b 	bls.w	8023b22 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 80238ec:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80238f0:	e11c      	b.n	8023b2c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80238f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80238f4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80238f6:	68bb      	ldr	r3, [r7, #8]
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	d03f      	beq.n	802397c <lfs_bd_read+0xc0>
 80238fc:	68bb      	ldr	r3, [r7, #8]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023902:	429a      	cmp	r2, r3
 8023904:	d13a      	bne.n	802397c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8023906:	68bb      	ldr	r3, [r7, #8]
 8023908:	685a      	ldr	r2, [r3, #4]
 802390a:	68bb      	ldr	r3, [r7, #8]
 802390c:	689b      	ldr	r3, [r3, #8]
 802390e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8023910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023912:	429a      	cmp	r2, r3
 8023914:	d232      	bcs.n	802397c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8023916:	68bb      	ldr	r3, [r7, #8]
 8023918:	685b      	ldr	r3, [r3, #4]
 802391a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802391c:	429a      	cmp	r2, r3
 802391e:	d324      	bcc.n	802396a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8023920:	68bb      	ldr	r3, [r7, #8]
 8023922:	689a      	ldr	r2, [r3, #8]
 8023924:	68bb      	ldr	r3, [r7, #8]
 8023926:	6859      	ldr	r1, [r3, #4]
 8023928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802392a:	1acb      	subs	r3, r1, r3
 802392c:	4413      	add	r3, r2
 802392e:	4619      	mov	r1, r3
 8023930:	69b8      	ldr	r0, [r7, #24]
 8023932:	f7ff fee7 	bl	8023704 <lfs_min>
 8023936:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8023938:	68bb      	ldr	r3, [r7, #8]
 802393a:	68da      	ldr	r2, [r3, #12]
 802393c:	68bb      	ldr	r3, [r7, #8]
 802393e:	685b      	ldr	r3, [r3, #4]
 8023940:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023942:	1acb      	subs	r3, r1, r3
 8023944:	4413      	add	r3, r2
 8023946:	69ba      	ldr	r2, [r7, #24]
 8023948:	4619      	mov	r1, r3
 802394a:	69f8      	ldr	r0, [r7, #28]
 802394c:	f00a f9c3 	bl	802dcd6 <memcpy>

                data += diff;
 8023950:	69fa      	ldr	r2, [r7, #28]
 8023952:	69bb      	ldr	r3, [r7, #24]
 8023954:	4413      	add	r3, r2
 8023956:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802395a:	69bb      	ldr	r3, [r7, #24]
 802395c:	4413      	add	r3, r2
 802395e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023962:	69bb      	ldr	r3, [r7, #24]
 8023964:	1ad3      	subs	r3, r2, r3
 8023966:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023968:	e0db      	b.n	8023b22 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 802396a:	68bb      	ldr	r3, [r7, #8]
 802396c:	685a      	ldr	r2, [r3, #4]
 802396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023970:	1ad3      	subs	r3, r2, r3
 8023972:	4619      	mov	r1, r3
 8023974:	69b8      	ldr	r0, [r7, #24]
 8023976:	f7ff fec5 	bl	8023704 <lfs_min>
 802397a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	681b      	ldr	r3, [r3, #0]
 8023980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023982:	429a      	cmp	r2, r3
 8023984:	d13a      	bne.n	80239fc <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	685a      	ldr	r2, [r3, #4]
 802398a:	687b      	ldr	r3, [r7, #4]
 802398c:	689b      	ldr	r3, [r3, #8]
 802398e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023992:	429a      	cmp	r2, r3
 8023994:	d232      	bcs.n	80239fc <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	685b      	ldr	r3, [r3, #4]
 802399a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802399c:	429a      	cmp	r2, r3
 802399e:	d324      	bcc.n	80239ea <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	689a      	ldr	r2, [r3, #8]
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	6859      	ldr	r1, [r3, #4]
 80239a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80239aa:	1acb      	subs	r3, r1, r3
 80239ac:	4413      	add	r3, r2
 80239ae:	4619      	mov	r1, r3
 80239b0:	69b8      	ldr	r0, [r7, #24]
 80239b2:	f7ff fea7 	bl	8023704 <lfs_min>
 80239b6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	68da      	ldr	r2, [r3, #12]
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	685b      	ldr	r3, [r3, #4]
 80239c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80239c2:	1acb      	subs	r3, r1, r3
 80239c4:	4413      	add	r3, r2
 80239c6:	69ba      	ldr	r2, [r7, #24]
 80239c8:	4619      	mov	r1, r3
 80239ca:	69f8      	ldr	r0, [r7, #28]
 80239cc:	f00a f983 	bl	802dcd6 <memcpy>

                data += diff;
 80239d0:	69fa      	ldr	r2, [r7, #28]
 80239d2:	69bb      	ldr	r3, [r7, #24]
 80239d4:	4413      	add	r3, r2
 80239d6:	61fb      	str	r3, [r7, #28]
                off += diff;
 80239d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80239da:	69bb      	ldr	r3, [r7, #24]
 80239dc:	4413      	add	r3, r2
 80239de:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80239e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80239e2:	69bb      	ldr	r3, [r7, #24]
 80239e4:	1ad3      	subs	r3, r2, r3
 80239e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80239e8:	e09b      	b.n	8023b22 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	685a      	ldr	r2, [r3, #4]
 80239ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80239f0:	1ad3      	subs	r3, r2, r3
 80239f2:	4619      	mov	r1, r3
 80239f4:	69b8      	ldr	r0, [r7, #24]
 80239f6:	f7ff fe85 	bl	8023704 <lfs_min>
 80239fa:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80239fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80239fe:	683b      	ldr	r3, [r7, #0]
 8023a00:	429a      	cmp	r2, r3
 8023a02:	d336      	bcc.n	8023a72 <lfs_bd_read+0x1b6>
 8023a04:	68fb      	ldr	r3, [r7, #12]
 8023a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a08:	695a      	ldr	r2, [r3, #20]
 8023a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8023a10:	fb01 f202 	mul.w	r2, r1, r2
 8023a14:	1a9b      	subs	r3, r3, r2
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d12b      	bne.n	8023a72 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8023a1a:	68fb      	ldr	r3, [r7, #12]
 8023a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a1e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023a22:	429a      	cmp	r2, r3
 8023a24:	d325      	bcc.n	8023a72 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8023a26:	68fb      	ldr	r3, [r7, #12]
 8023a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a2a:	695b      	ldr	r3, [r3, #20]
 8023a2c:	4619      	mov	r1, r3
 8023a2e:	69b8      	ldr	r0, [r7, #24]
 8023a30:	f7ff fe78 	bl	8023724 <lfs_aligndown>
 8023a34:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8023a36:	68fb      	ldr	r3, [r7, #12]
 8023a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a3a:	685c      	ldr	r4, [r3, #4]
 8023a3c:	68fb      	ldr	r3, [r7, #12]
 8023a3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023a40:	69bb      	ldr	r3, [r7, #24]
 8023a42:	9300      	str	r3, [sp, #0]
 8023a44:	69fb      	ldr	r3, [r7, #28]
 8023a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023a4a:	47a0      	blx	r4
 8023a4c:	6178      	str	r0, [r7, #20]
            if (err) {
 8023a4e:	697b      	ldr	r3, [r7, #20]
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d001      	beq.n	8023a58 <lfs_bd_read+0x19c>
                return err;
 8023a54:	697b      	ldr	r3, [r7, #20]
 8023a56:	e069      	b.n	8023b2c <lfs_bd_read+0x270>
            }

            data += diff;
 8023a58:	69fa      	ldr	r2, [r7, #28]
 8023a5a:	69bb      	ldr	r3, [r7, #24]
 8023a5c:	4413      	add	r3, r2
 8023a5e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023a62:	69bb      	ldr	r3, [r7, #24]
 8023a64:	4413      	add	r3, r2
 8023a66:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8023a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023a6a:	69bb      	ldr	r3, [r7, #24]
 8023a6c:	1ad3      	subs	r3, r2, r3
 8023a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8023a70:	e057      	b.n	8023b22 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8023a72:	68fb      	ldr	r3, [r7, #12]
 8023a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a76:	6a1b      	ldr	r3, [r3, #32]
 8023a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023a7a:	429a      	cmp	r2, r3
 8023a7c:	d305      	bcc.n	8023a8a <lfs_bd_read+0x1ce>
 8023a7e:	4b2d      	ldr	r3, [pc, #180]	; (8023b34 <lfs_bd_read+0x278>)
 8023a80:	4a2d      	ldr	r2, [pc, #180]	; (8023b38 <lfs_bd_read+0x27c>)
 8023a82:	216b      	movs	r1, #107	; 0x6b
 8023a84:	482d      	ldr	r0, [pc, #180]	; (8023b3c <lfs_bd_read+0x280>)
 8023a86:	f008 fd81 	bl	802c58c <__assert_func>
        rcache->block = block;
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023a8e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023a90:	68fb      	ldr	r3, [r7, #12]
 8023a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a94:	695b      	ldr	r3, [r3, #20]
 8023a96:	4619      	mov	r1, r3
 8023a98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023a9a:	f7ff fe43 	bl	8023724 <lfs_aligndown>
 8023a9e:	4602      	mov	r2, r0
 8023aa0:	687b      	ldr	r3, [r7, #4]
 8023aa2:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023aa6:	683b      	ldr	r3, [r7, #0]
 8023aa8:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8023aaa:	68fb      	ldr	r3, [r7, #12]
 8023aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023aae:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023ab0:	4619      	mov	r1, r3
 8023ab2:	4610      	mov	r0, r2
 8023ab4:	f7ff fe4b 	bl	802374e <lfs_alignup>
 8023ab8:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8023aba:	68fb      	ldr	r3, [r7, #12]
 8023abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023abe:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023ac0:	4619      	mov	r1, r3
 8023ac2:	4610      	mov	r0, r2
 8023ac4:	f7ff fe1e 	bl	8023704 <lfs_min>
 8023ac8:	4602      	mov	r2, r0
                - rcache->off,
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8023ace:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8023ad0:	68fb      	ldr	r3, [r7, #12]
 8023ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8023ad6:	4619      	mov	r1, r3
 8023ad8:	4610      	mov	r0, r2
 8023ada:	f7ff fe13 	bl	8023704 <lfs_min>
 8023ade:	4602      	mov	r2, r0
 8023ae0:	687b      	ldr	r3, [r7, #4]
 8023ae2:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023ae4:	68fb      	ldr	r3, [r7, #12]
 8023ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ae8:	685c      	ldr	r4, [r3, #4]
 8023aea:	68fb      	ldr	r3, [r7, #12]
 8023aec:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	6819      	ldr	r1, [r3, #0]
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023afa:	687b      	ldr	r3, [r7, #4]
 8023afc:	689b      	ldr	r3, [r3, #8]
 8023afe:	9300      	str	r3, [sp, #0]
 8023b00:	462b      	mov	r3, r5
 8023b02:	47a0      	blx	r4
 8023b04:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8023b06:	693b      	ldr	r3, [r7, #16]
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	dd05      	ble.n	8023b18 <lfs_bd_read+0x25c>
 8023b0c:	4b0c      	ldr	r3, [pc, #48]	; (8023b40 <lfs_bd_read+0x284>)
 8023b0e:	4a0a      	ldr	r2, [pc, #40]	; (8023b38 <lfs_bd_read+0x27c>)
 8023b10:	2176      	movs	r1, #118	; 0x76
 8023b12:	480a      	ldr	r0, [pc, #40]	; (8023b3c <lfs_bd_read+0x280>)
 8023b14:	f008 fd3a 	bl	802c58c <__assert_func>
        if (err) {
 8023b18:	693b      	ldr	r3, [r7, #16]
 8023b1a:	2b00      	cmp	r3, #0
 8023b1c:	d001      	beq.n	8023b22 <lfs_bd_read+0x266>
            return err;
 8023b1e:	693b      	ldr	r3, [r7, #16]
 8023b20:	e004      	b.n	8023b2c <lfs_bd_read+0x270>
    while (size > 0) {
 8023b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	f47f aee4 	bne.w	80238f2 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8023b2a:	2300      	movs	r3, #0
}
 8023b2c:	4618      	mov	r0, r3
 8023b2e:	3720      	adds	r7, #32
 8023b30:	46bd      	mov	sp, r7
 8023b32:	bdb0      	pop	{r4, r5, r7, pc}
 8023b34:	0803364c 	.word	0x0803364c
 8023b38:	08034920 	.word	0x08034920
 8023b3c:	0803366c 	.word	0x0803366c
 8023b40:	080336a0 	.word	0x080336a0

08023b44 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023b44:	b580      	push	{r7, lr}
 8023b46:	b08e      	sub	sp, #56	; 0x38
 8023b48:	af04      	add	r7, sp, #16
 8023b4a:	60f8      	str	r0, [r7, #12]
 8023b4c:	60b9      	str	r1, [r7, #8]
 8023b4e:	607a      	str	r2, [r7, #4]
 8023b50:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8023b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b54:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8023b56:	2300      	movs	r3, #0
 8023b58:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8023b5a:	2300      	movs	r3, #0
 8023b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8023b5e:	e039      	b.n	8023bd4 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8023b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b64:	1ad3      	subs	r3, r2, r3
 8023b66:	2108      	movs	r1, #8
 8023b68:	4618      	mov	r0, r3
 8023b6a:	f7ff fdcb 	bl	8023704 <lfs_min>
 8023b6e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8023b70:	683a      	ldr	r2, [r7, #0]
 8023b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b74:	1ad1      	subs	r1, r2, r3
 8023b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b7a:	4413      	add	r3, r2
 8023b7c:	69fa      	ldr	r2, [r7, #28]
 8023b7e:	9203      	str	r2, [sp, #12]
 8023b80:	f107 0210 	add.w	r2, r7, #16
 8023b84:	9202      	str	r2, [sp, #8]
 8023b86:	9301      	str	r3, [sp, #4]
 8023b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b8a:	9300      	str	r3, [sp, #0]
 8023b8c:	460b      	mov	r3, r1
 8023b8e:	687a      	ldr	r2, [r7, #4]
 8023b90:	68b9      	ldr	r1, [r7, #8]
 8023b92:	68f8      	ldr	r0, [r7, #12]
 8023b94:	f7ff fe92 	bl	80238bc <lfs_bd_read>
 8023b98:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8023b9a:	69bb      	ldr	r3, [r7, #24]
 8023b9c:	2b00      	cmp	r3, #0
 8023b9e:	d001      	beq.n	8023ba4 <lfs_bd_cmp+0x60>
            return res;
 8023ba0:	69bb      	ldr	r3, [r7, #24]
 8023ba2:	e01c      	b.n	8023bde <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023ba4:	6a3a      	ldr	r2, [r7, #32]
 8023ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ba8:	18d1      	adds	r1, r2, r3
 8023baa:	f107 0310 	add.w	r3, r7, #16
 8023bae:	69fa      	ldr	r2, [r7, #28]
 8023bb0:	4618      	mov	r0, r3
 8023bb2:	f009 fe91 	bl	802d8d8 <memcmp>
 8023bb6:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023bb8:	69bb      	ldr	r3, [r7, #24]
 8023bba:	2b00      	cmp	r3, #0
 8023bbc:	d006      	beq.n	8023bcc <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8023bbe:	69bb      	ldr	r3, [r7, #24]
 8023bc0:	2b00      	cmp	r3, #0
 8023bc2:	da01      	bge.n	8023bc8 <lfs_bd_cmp+0x84>
 8023bc4:	2301      	movs	r3, #1
 8023bc6:	e00a      	b.n	8023bde <lfs_bd_cmp+0x9a>
 8023bc8:	2302      	movs	r3, #2
 8023bca:	e008      	b.n	8023bde <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8023bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023bce:	69fb      	ldr	r3, [r7, #28]
 8023bd0:	4413      	add	r3, r2
 8023bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8023bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023bd8:	429a      	cmp	r2, r3
 8023bda:	d3c1      	bcc.n	8023b60 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8023bdc:	2300      	movs	r3, #0
}
 8023bde:	4618      	mov	r0, r3
 8023be0:	3728      	adds	r7, #40	; 0x28
 8023be2:	46bd      	mov	sp, r7
 8023be4:	bd80      	pop	{r7, pc}
	...

08023be8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023be8:	b5b0      	push	{r4, r5, r7, lr}
 8023bea:	b08c      	sub	sp, #48	; 0x30
 8023bec:	af04      	add	r7, sp, #16
 8023bee:	60f8      	str	r0, [r7, #12]
 8023bf0:	60b9      	str	r1, [r7, #8]
 8023bf2:	607a      	str	r2, [r7, #4]
 8023bf4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8023bf6:	68bb      	ldr	r3, [r7, #8]
 8023bf8:	681b      	ldr	r3, [r3, #0]
 8023bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023bfe:	d061      	beq.n	8023cc4 <lfs_bd_flush+0xdc>
 8023c00:	68bb      	ldr	r3, [r7, #8]
 8023c02:	681b      	ldr	r3, [r3, #0]
 8023c04:	f113 0f02 	cmn.w	r3, #2
 8023c08:	d05c      	beq.n	8023cc4 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8023c0a:	68bb      	ldr	r3, [r7, #8]
 8023c0c:	681a      	ldr	r2, [r3, #0]
 8023c0e:	68fb      	ldr	r3, [r7, #12]
 8023c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c12:	6a1b      	ldr	r3, [r3, #32]
 8023c14:	429a      	cmp	r2, r3
 8023c16:	d305      	bcc.n	8023c24 <lfs_bd_flush+0x3c>
 8023c18:	4b2d      	ldr	r3, [pc, #180]	; (8023cd0 <lfs_bd_flush+0xe8>)
 8023c1a:	4a2e      	ldr	r2, [pc, #184]	; (8023cd4 <lfs_bd_flush+0xec>)
 8023c1c:	219e      	movs	r1, #158	; 0x9e
 8023c1e:	482e      	ldr	r0, [pc, #184]	; (8023cd8 <lfs_bd_flush+0xf0>)
 8023c20:	f008 fcb4 	bl	802c58c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8023c24:	68bb      	ldr	r3, [r7, #8]
 8023c26:	689a      	ldr	r2, [r3, #8]
 8023c28:	68fb      	ldr	r3, [r7, #12]
 8023c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c2c:	699b      	ldr	r3, [r3, #24]
 8023c2e:	4619      	mov	r1, r3
 8023c30:	4610      	mov	r0, r2
 8023c32:	f7ff fd8c 	bl	802374e <lfs_alignup>
 8023c36:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023c38:	68fb      	ldr	r3, [r7, #12]
 8023c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c3c:	689c      	ldr	r4, [r3, #8]
 8023c3e:	68fb      	ldr	r3, [r7, #12]
 8023c40:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023c42:	68bb      	ldr	r3, [r7, #8]
 8023c44:	6819      	ldr	r1, [r3, #0]
 8023c46:	68bb      	ldr	r3, [r7, #8]
 8023c48:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8023c4a:	68bb      	ldr	r3, [r7, #8]
 8023c4c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023c4e:	69fb      	ldr	r3, [r7, #28]
 8023c50:	9300      	str	r3, [sp, #0]
 8023c52:	462b      	mov	r3, r5
 8023c54:	47a0      	blx	r4
 8023c56:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8023c58:	69bb      	ldr	r3, [r7, #24]
 8023c5a:	2b00      	cmp	r3, #0
 8023c5c:	dd05      	ble.n	8023c6a <lfs_bd_flush+0x82>
 8023c5e:	4b1f      	ldr	r3, [pc, #124]	; (8023cdc <lfs_bd_flush+0xf4>)
 8023c60:	4a1c      	ldr	r2, [pc, #112]	; (8023cd4 <lfs_bd_flush+0xec>)
 8023c62:	21a2      	movs	r1, #162	; 0xa2
 8023c64:	481c      	ldr	r0, [pc, #112]	; (8023cd8 <lfs_bd_flush+0xf0>)
 8023c66:	f008 fc91 	bl	802c58c <__assert_func>
        if (err) {
 8023c6a:	69bb      	ldr	r3, [r7, #24]
 8023c6c:	2b00      	cmp	r3, #0
 8023c6e:	d001      	beq.n	8023c74 <lfs_bd_flush+0x8c>
            return err;
 8023c70:	69bb      	ldr	r3, [r7, #24]
 8023c72:	e028      	b.n	8023cc6 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8023c74:	78fb      	ldrb	r3, [r7, #3]
 8023c76:	2b00      	cmp	r3, #0
 8023c78:	d020      	beq.n	8023cbc <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8023c7a:	6879      	ldr	r1, [r7, #4]
 8023c7c:	68f8      	ldr	r0, [r7, #12]
 8023c7e:	f7ff fdf7 	bl	8023870 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023c82:	68bb      	ldr	r3, [r7, #8]
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	68ba      	ldr	r2, [r7, #8]
 8023c88:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8023c8a:	68b9      	ldr	r1, [r7, #8]
 8023c8c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8023c8e:	69f8      	ldr	r0, [r7, #28]
 8023c90:	9003      	str	r0, [sp, #12]
 8023c92:	9102      	str	r1, [sp, #8]
 8023c94:	9201      	str	r2, [sp, #4]
 8023c96:	9300      	str	r3, [sp, #0]
 8023c98:	69fb      	ldr	r3, [r7, #28]
 8023c9a:	687a      	ldr	r2, [r7, #4]
 8023c9c:	2100      	movs	r1, #0
 8023c9e:	68f8      	ldr	r0, [r7, #12]
 8023ca0:	f7ff ff50 	bl	8023b44 <lfs_bd_cmp>
 8023ca4:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023ca6:	697b      	ldr	r3, [r7, #20]
 8023ca8:	2b00      	cmp	r3, #0
 8023caa:	da01      	bge.n	8023cb0 <lfs_bd_flush+0xc8>
                return res;
 8023cac:	697b      	ldr	r3, [r7, #20]
 8023cae:	e00a      	b.n	8023cc6 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023cb0:	697b      	ldr	r3, [r7, #20]
 8023cb2:	2b00      	cmp	r3, #0
 8023cb4:	d002      	beq.n	8023cbc <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023cb6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023cba:	e004      	b.n	8023cc6 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8023cbc:	68b9      	ldr	r1, [r7, #8]
 8023cbe:	68f8      	ldr	r0, [r7, #12]
 8023cc0:	f7ff fde5 	bl	802388e <lfs_cache_zero>
    }

    return 0;
 8023cc4:	2300      	movs	r3, #0
}
 8023cc6:	4618      	mov	r0, r3
 8023cc8:	3720      	adds	r7, #32
 8023cca:	46bd      	mov	sp, r7
 8023ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8023cce:	bf00      	nop
 8023cd0:	080336ac 	.word	0x080336ac
 8023cd4:	0803492c 	.word	0x0803492c
 8023cd8:	0803366c 	.word	0x0803366c
 8023cdc:	080336a0 	.word	0x080336a0

08023ce0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023ce0:	b580      	push	{r7, lr}
 8023ce2:	b086      	sub	sp, #24
 8023ce4:	af00      	add	r7, sp, #0
 8023ce6:	60f8      	str	r0, [r7, #12]
 8023ce8:	60b9      	str	r1, [r7, #8]
 8023cea:	607a      	str	r2, [r7, #4]
 8023cec:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8023cee:	6879      	ldr	r1, [r7, #4]
 8023cf0:	68f8      	ldr	r0, [r7, #12]
 8023cf2:	f7ff fdbd 	bl	8023870 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023cf6:	78fb      	ldrb	r3, [r7, #3]
 8023cf8:	687a      	ldr	r2, [r7, #4]
 8023cfa:	68b9      	ldr	r1, [r7, #8]
 8023cfc:	68f8      	ldr	r0, [r7, #12]
 8023cfe:	f7ff ff73 	bl	8023be8 <lfs_bd_flush>
 8023d02:	6178      	str	r0, [r7, #20]
    if (err) {
 8023d04:	697b      	ldr	r3, [r7, #20]
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	d001      	beq.n	8023d0e <lfs_bd_sync+0x2e>
        return err;
 8023d0a:	697b      	ldr	r3, [r7, #20]
 8023d0c:	e011      	b.n	8023d32 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8023d0e:	68fb      	ldr	r3, [r7, #12]
 8023d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023d12:	691b      	ldr	r3, [r3, #16]
 8023d14:	68fa      	ldr	r2, [r7, #12]
 8023d16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023d18:	4610      	mov	r0, r2
 8023d1a:	4798      	blx	r3
 8023d1c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8023d1e:	697b      	ldr	r3, [r7, #20]
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	dd05      	ble.n	8023d30 <lfs_bd_sync+0x50>
 8023d24:	4b05      	ldr	r3, [pc, #20]	; (8023d3c <lfs_bd_sync+0x5c>)
 8023d26:	4a06      	ldr	r2, [pc, #24]	; (8023d40 <lfs_bd_sync+0x60>)
 8023d28:	21c8      	movs	r1, #200	; 0xc8
 8023d2a:	4806      	ldr	r0, [pc, #24]	; (8023d44 <lfs_bd_sync+0x64>)
 8023d2c:	f008 fc2e 	bl	802c58c <__assert_func>
    return err;
 8023d30:	697b      	ldr	r3, [r7, #20]
}
 8023d32:	4618      	mov	r0, r3
 8023d34:	3718      	adds	r7, #24
 8023d36:	46bd      	mov	sp, r7
 8023d38:	bd80      	pop	{r7, pc}
 8023d3a:	bf00      	nop
 8023d3c:	080336a0 	.word	0x080336a0
 8023d40:	0803493c 	.word	0x0803493c
 8023d44:	0803366c 	.word	0x0803366c

08023d48 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023d48:	b580      	push	{r7, lr}
 8023d4a:	b088      	sub	sp, #32
 8023d4c:	af00      	add	r7, sp, #0
 8023d4e:	60f8      	str	r0, [r7, #12]
 8023d50:	60b9      	str	r1, [r7, #8]
 8023d52:	607a      	str	r2, [r7, #4]
 8023d54:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8023d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d58:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8023d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d5c:	f113 0f02 	cmn.w	r3, #2
 8023d60:	d00b      	beq.n	8023d7a <lfs_bd_prog+0x32>
 8023d62:	68fb      	ldr	r3, [r7, #12]
 8023d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023d66:	6a1b      	ldr	r3, [r3, #32]
 8023d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023d6a:	429a      	cmp	r2, r3
 8023d6c:	d305      	bcc.n	8023d7a <lfs_bd_prog+0x32>
 8023d6e:	4b47      	ldr	r3, [pc, #284]	; (8023e8c <lfs_bd_prog+0x144>)
 8023d70:	4a47      	ldr	r2, [pc, #284]	; (8023e90 <lfs_bd_prog+0x148>)
 8023d72:	21d3      	movs	r1, #211	; 0xd3
 8023d74:	4847      	ldr	r0, [pc, #284]	; (8023e94 <lfs_bd_prog+0x14c>)
 8023d76:	f008 fc09 	bl	802c58c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8023d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d7e:	441a      	add	r2, r3
 8023d80:	68fb      	ldr	r3, [r7, #12]
 8023d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023d84:	69db      	ldr	r3, [r3, #28]
 8023d86:	429a      	cmp	r2, r3
 8023d88:	d977      	bls.n	8023e7a <lfs_bd_prog+0x132>
 8023d8a:	4b43      	ldr	r3, [pc, #268]	; (8023e98 <lfs_bd_prog+0x150>)
 8023d8c:	4a40      	ldr	r2, [pc, #256]	; (8023e90 <lfs_bd_prog+0x148>)
 8023d8e:	21d4      	movs	r1, #212	; 0xd4
 8023d90:	4840      	ldr	r0, [pc, #256]	; (8023e94 <lfs_bd_prog+0x14c>)
 8023d92:	f008 fbfb 	bl	802c58c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8023d96:	68bb      	ldr	r3, [r7, #8]
 8023d98:	681b      	ldr	r3, [r3, #0]
 8023d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023d9c:	429a      	cmp	r2, r3
 8023d9e:	d151      	bne.n	8023e44 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8023da0:	68bb      	ldr	r3, [r7, #8]
 8023da2:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8023da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023da6:	429a      	cmp	r2, r3
 8023da8:	d34c      	bcc.n	8023e44 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8023daa:	68bb      	ldr	r3, [r7, #8]
 8023dac:	685a      	ldr	r2, [r3, #4]
 8023dae:	68fb      	ldr	r3, [r7, #12]
 8023db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023db4:	4413      	add	r3, r2
                off >= pcache->off &&
 8023db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023db8:	429a      	cmp	r2, r3
 8023dba:	d243      	bcs.n	8023e44 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8023dbc:	68fb      	ldr	r3, [r7, #12]
 8023dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023dc2:	68bb      	ldr	r3, [r7, #8]
 8023dc4:	6859      	ldr	r1, [r3, #4]
 8023dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023dc8:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8023dca:	4413      	add	r3, r2
 8023dcc:	4619      	mov	r1, r3
 8023dce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023dd0:	f7ff fc98 	bl	8023704 <lfs_min>
 8023dd4:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8023dd6:	68bb      	ldr	r3, [r7, #8]
 8023dd8:	68da      	ldr	r2, [r3, #12]
 8023dda:	68bb      	ldr	r3, [r7, #8]
 8023ddc:	685b      	ldr	r3, [r3, #4]
 8023dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023de0:	1acb      	subs	r3, r1, r3
 8023de2:	4413      	add	r3, r2
 8023de4:	69ba      	ldr	r2, [r7, #24]
 8023de6:	69f9      	ldr	r1, [r7, #28]
 8023de8:	4618      	mov	r0, r3
 8023dea:	f009 ff74 	bl	802dcd6 <memcpy>

            data += diff;
 8023dee:	69fa      	ldr	r2, [r7, #28]
 8023df0:	69bb      	ldr	r3, [r7, #24]
 8023df2:	4413      	add	r3, r2
 8023df4:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023df8:	69bb      	ldr	r3, [r7, #24]
 8023dfa:	4413      	add	r3, r2
 8023dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8023dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023e00:	69bb      	ldr	r3, [r7, #24]
 8023e02:	1ad3      	subs	r3, r2, r3
 8023e04:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8023e06:	68bb      	ldr	r3, [r7, #8]
 8023e08:	6898      	ldr	r0, [r3, #8]
 8023e0a:	68bb      	ldr	r3, [r7, #8]
 8023e0c:	685b      	ldr	r3, [r3, #4]
 8023e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023e10:	1ad3      	subs	r3, r2, r3
 8023e12:	4619      	mov	r1, r3
 8023e14:	f7ff fc66 	bl	80236e4 <lfs_max>
 8023e18:	4602      	mov	r2, r0
 8023e1a:	68bb      	ldr	r3, [r7, #8]
 8023e1c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8023e1e:	68bb      	ldr	r3, [r7, #8]
 8023e20:	689a      	ldr	r2, [r3, #8]
 8023e22:	68fb      	ldr	r3, [r7, #12]
 8023e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023e28:	429a      	cmp	r2, r3
 8023e2a:	d126      	bne.n	8023e7a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023e2c:	78fb      	ldrb	r3, [r7, #3]
 8023e2e:	687a      	ldr	r2, [r7, #4]
 8023e30:	68b9      	ldr	r1, [r7, #8]
 8023e32:	68f8      	ldr	r0, [r7, #12]
 8023e34:	f7ff fed8 	bl	8023be8 <lfs_bd_flush>
 8023e38:	6178      	str	r0, [r7, #20]
                if (err) {
 8023e3a:	697b      	ldr	r3, [r7, #20]
 8023e3c:	2b00      	cmp	r3, #0
 8023e3e:	d01c      	beq.n	8023e7a <lfs_bd_prog+0x132>
                    return err;
 8023e40:	697b      	ldr	r3, [r7, #20]
 8023e42:	e01e      	b.n	8023e82 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8023e44:	68bb      	ldr	r3, [r7, #8]
 8023e46:	681b      	ldr	r3, [r3, #0]
 8023e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023e4c:	d005      	beq.n	8023e5a <lfs_bd_prog+0x112>
 8023e4e:	4b13      	ldr	r3, [pc, #76]	; (8023e9c <lfs_bd_prog+0x154>)
 8023e50:	4a0f      	ldr	r2, [pc, #60]	; (8023e90 <lfs_bd_prog+0x148>)
 8023e52:	21f1      	movs	r1, #241	; 0xf1
 8023e54:	480f      	ldr	r0, [pc, #60]	; (8023e94 <lfs_bd_prog+0x14c>)
 8023e56:	f008 fb99 	bl	802c58c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8023e5a:	68bb      	ldr	r3, [r7, #8]
 8023e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023e5e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8023e60:	68fb      	ldr	r3, [r7, #12]
 8023e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023e64:	699b      	ldr	r3, [r3, #24]
 8023e66:	4619      	mov	r1, r3
 8023e68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8023e6a:	f7ff fc5b 	bl	8023724 <lfs_aligndown>
 8023e6e:	4602      	mov	r2, r0
 8023e70:	68bb      	ldr	r3, [r7, #8]
 8023e72:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8023e74:	68bb      	ldr	r3, [r7, #8]
 8023e76:	2200      	movs	r2, #0
 8023e78:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8023e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e7c:	2b00      	cmp	r3, #0
 8023e7e:	d18a      	bne.n	8023d96 <lfs_bd_prog+0x4e>
    }

    return 0;
 8023e80:	2300      	movs	r3, #0
}
 8023e82:	4618      	mov	r0, r3
 8023e84:	3720      	adds	r7, #32
 8023e86:	46bd      	mov	sp, r7
 8023e88:	bd80      	pop	{r7, pc}
 8023e8a:	bf00      	nop
 8023e8c:	080336d4 	.word	0x080336d4
 8023e90:	08034948 	.word	0x08034948
 8023e94:	0803366c 	.word	0x0803366c
 8023e98:	08033710 	.word	0x08033710
 8023e9c:	08033734 	.word	0x08033734

08023ea0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8023ea0:	b580      	push	{r7, lr}
 8023ea2:	b084      	sub	sp, #16
 8023ea4:	af00      	add	r7, sp, #0
 8023ea6:	6078      	str	r0, [r7, #4]
 8023ea8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8023eaa:	687b      	ldr	r3, [r7, #4]
 8023eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023eae:	6a1b      	ldr	r3, [r3, #32]
 8023eb0:	683a      	ldr	r2, [r7, #0]
 8023eb2:	429a      	cmp	r2, r3
 8023eb4:	d305      	bcc.n	8023ec2 <lfs_bd_erase+0x22>
 8023eb6:	4b0f      	ldr	r3, [pc, #60]	; (8023ef4 <lfs_bd_erase+0x54>)
 8023eb8:	4a0f      	ldr	r2, [pc, #60]	; (8023ef8 <lfs_bd_erase+0x58>)
 8023eba:	21ff      	movs	r1, #255	; 0xff
 8023ebc:	480f      	ldr	r0, [pc, #60]	; (8023efc <lfs_bd_erase+0x5c>)
 8023ebe:	f008 fb65 	bl	802c58c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ec6:	68db      	ldr	r3, [r3, #12]
 8023ec8:	687a      	ldr	r2, [r7, #4]
 8023eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023ecc:	6839      	ldr	r1, [r7, #0]
 8023ece:	4610      	mov	r0, r2
 8023ed0:	4798      	blx	r3
 8023ed2:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8023ed4:	68fb      	ldr	r3, [r7, #12]
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	dd06      	ble.n	8023ee8 <lfs_bd_erase+0x48>
 8023eda:	4b09      	ldr	r3, [pc, #36]	; (8023f00 <lfs_bd_erase+0x60>)
 8023edc:	4a06      	ldr	r2, [pc, #24]	; (8023ef8 <lfs_bd_erase+0x58>)
 8023ede:	f240 1101 	movw	r1, #257	; 0x101
 8023ee2:	4806      	ldr	r0, [pc, #24]	; (8023efc <lfs_bd_erase+0x5c>)
 8023ee4:	f008 fb52 	bl	802c58c <__assert_func>
    return err;
 8023ee8:	68fb      	ldr	r3, [r7, #12]
}
 8023eea:	4618      	mov	r0, r3
 8023eec:	3710      	adds	r7, #16
 8023eee:	46bd      	mov	sp, r7
 8023ef0:	bd80      	pop	{r7, pc}
 8023ef2:	bf00      	nop
 8023ef4:	0803364c 	.word	0x0803364c
 8023ef8:	08034954 	.word	0x08034954
 8023efc:	0803366c 	.word	0x0803366c
 8023f00:	080336a0 	.word	0x080336a0

08023f04 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8023f04:	b480      	push	{r7}
 8023f06:	b085      	sub	sp, #20
 8023f08:	af00      	add	r7, sp, #0
 8023f0a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8023f0c:	687b      	ldr	r3, [r7, #4]
 8023f0e:	681b      	ldr	r3, [r3, #0]
 8023f10:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8023f12:	687b      	ldr	r3, [r7, #4]
 8023f14:	685a      	ldr	r2, [r3, #4]
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8023f1a:	687b      	ldr	r3, [r7, #4]
 8023f1c:	3304      	adds	r3, #4
 8023f1e:	68fa      	ldr	r2, [r7, #12]
 8023f20:	601a      	str	r2, [r3, #0]
}
 8023f22:	bf00      	nop
 8023f24:	3714      	adds	r7, #20
 8023f26:	46bd      	mov	sp, r7
 8023f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f2c:	4770      	bx	lr

08023f2e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8023f2e:	b480      	push	{r7}
 8023f30:	b083      	sub	sp, #12
 8023f32:	af00      	add	r7, sp, #0
 8023f34:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8023f36:	687b      	ldr	r3, [r7, #4]
 8023f38:	681b      	ldr	r3, [r3, #0]
 8023f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f3e:	d005      	beq.n	8023f4c <lfs_pair_isnull+0x1e>
 8023f40:	687b      	ldr	r3, [r7, #4]
 8023f42:	3304      	adds	r3, #4
 8023f44:	681b      	ldr	r3, [r3, #0]
 8023f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f4a:	d101      	bne.n	8023f50 <lfs_pair_isnull+0x22>
 8023f4c:	2301      	movs	r3, #1
 8023f4e:	e000      	b.n	8023f52 <lfs_pair_isnull+0x24>
 8023f50:	2300      	movs	r3, #0
 8023f52:	f003 0301 	and.w	r3, r3, #1
 8023f56:	b2db      	uxtb	r3, r3
}
 8023f58:	4618      	mov	r0, r3
 8023f5a:	370c      	adds	r7, #12
 8023f5c:	46bd      	mov	sp, r7
 8023f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f62:	4770      	bx	lr

08023f64 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023f64:	b480      	push	{r7}
 8023f66:	b083      	sub	sp, #12
 8023f68:	af00      	add	r7, sp, #0
 8023f6a:	6078      	str	r0, [r7, #4]
 8023f6c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023f6e:	687b      	ldr	r3, [r7, #4]
 8023f70:	681a      	ldr	r2, [r3, #0]
 8023f72:	683b      	ldr	r3, [r7, #0]
 8023f74:	681b      	ldr	r3, [r3, #0]
 8023f76:	429a      	cmp	r2, r3
 8023f78:	d017      	beq.n	8023faa <lfs_pair_cmp+0x46>
 8023f7a:	687b      	ldr	r3, [r7, #4]
 8023f7c:	3304      	adds	r3, #4
 8023f7e:	681a      	ldr	r2, [r3, #0]
 8023f80:	683b      	ldr	r3, [r7, #0]
 8023f82:	3304      	adds	r3, #4
 8023f84:	681b      	ldr	r3, [r3, #0]
 8023f86:	429a      	cmp	r2, r3
 8023f88:	d00f      	beq.n	8023faa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023f8a:	687b      	ldr	r3, [r7, #4]
 8023f8c:	681a      	ldr	r2, [r3, #0]
 8023f8e:	683b      	ldr	r3, [r7, #0]
 8023f90:	3304      	adds	r3, #4
 8023f92:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023f94:	429a      	cmp	r2, r3
 8023f96:	d008      	beq.n	8023faa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	3304      	adds	r3, #4
 8023f9c:	681a      	ldr	r2, [r3, #0]
 8023f9e:	683b      	ldr	r3, [r7, #0]
 8023fa0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023fa2:	429a      	cmp	r2, r3
 8023fa4:	d001      	beq.n	8023faa <lfs_pair_cmp+0x46>
 8023fa6:	2301      	movs	r3, #1
 8023fa8:	e000      	b.n	8023fac <lfs_pair_cmp+0x48>
 8023faa:	2300      	movs	r3, #0
}
 8023fac:	4618      	mov	r0, r3
 8023fae:	370c      	adds	r7, #12
 8023fb0:	46bd      	mov	sp, r7
 8023fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fb6:	4770      	bx	lr

08023fb8 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023fb8:	b480      	push	{r7}
 8023fba:	b083      	sub	sp, #12
 8023fbc:	af00      	add	r7, sp, #0
 8023fbe:	6078      	str	r0, [r7, #4]
 8023fc0:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	681a      	ldr	r2, [r3, #0]
 8023fc6:	683b      	ldr	r3, [r7, #0]
 8023fc8:	681b      	ldr	r3, [r3, #0]
 8023fca:	429a      	cmp	r2, r3
 8023fcc:	d107      	bne.n	8023fde <lfs_pair_sync+0x26>
 8023fce:	687b      	ldr	r3, [r7, #4]
 8023fd0:	3304      	adds	r3, #4
 8023fd2:	681a      	ldr	r2, [r3, #0]
 8023fd4:	683b      	ldr	r3, [r7, #0]
 8023fd6:	3304      	adds	r3, #4
 8023fd8:	681b      	ldr	r3, [r3, #0]
 8023fda:	429a      	cmp	r2, r3
 8023fdc:	d00d      	beq.n	8023ffa <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023fde:	687b      	ldr	r3, [r7, #4]
 8023fe0:	681a      	ldr	r2, [r3, #0]
 8023fe2:	683b      	ldr	r3, [r7, #0]
 8023fe4:	3304      	adds	r3, #4
 8023fe6:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023fe8:	429a      	cmp	r2, r3
 8023fea:	d108      	bne.n	8023ffe <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	3304      	adds	r3, #4
 8023ff0:	681a      	ldr	r2, [r3, #0]
 8023ff2:	683b      	ldr	r3, [r7, #0]
 8023ff4:	681b      	ldr	r3, [r3, #0]
 8023ff6:	429a      	cmp	r2, r3
 8023ff8:	d101      	bne.n	8023ffe <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023ffa:	2301      	movs	r3, #1
 8023ffc:	e000      	b.n	8024000 <lfs_pair_sync+0x48>
 8023ffe:	2300      	movs	r3, #0
 8024000:	f003 0301 	and.w	r3, r3, #1
 8024004:	b2db      	uxtb	r3, r3
}
 8024006:	4618      	mov	r0, r3
 8024008:	370c      	adds	r7, #12
 802400a:	46bd      	mov	sp, r7
 802400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024010:	4770      	bx	lr

08024012 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8024012:	b590      	push	{r4, r7, lr}
 8024014:	b083      	sub	sp, #12
 8024016:	af00      	add	r7, sp, #0
 8024018:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 802401a:	687b      	ldr	r3, [r7, #4]
 802401c:	681b      	ldr	r3, [r3, #0]
 802401e:	4618      	mov	r0, r3
 8024020:	f7ff fbe0 	bl	80237e4 <lfs_fromle32>
 8024024:	4602      	mov	r2, r0
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	3304      	adds	r3, #4
 802402e:	681a      	ldr	r2, [r3, #0]
 8024030:	687b      	ldr	r3, [r7, #4]
 8024032:	1d1c      	adds	r4, r3, #4
 8024034:	4610      	mov	r0, r2
 8024036:	f7ff fbd5 	bl	80237e4 <lfs_fromle32>
 802403a:	4603      	mov	r3, r0
 802403c:	6023      	str	r3, [r4, #0]
}
 802403e:	bf00      	nop
 8024040:	370c      	adds	r7, #12
 8024042:	46bd      	mov	sp, r7
 8024044:	bd90      	pop	{r4, r7, pc}

08024046 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8024046:	b590      	push	{r4, r7, lr}
 8024048:	b083      	sub	sp, #12
 802404a:	af00      	add	r7, sp, #0
 802404c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 802404e:	687b      	ldr	r3, [r7, #4]
 8024050:	681b      	ldr	r3, [r3, #0]
 8024052:	4618      	mov	r0, r3
 8024054:	f7ff fbd1 	bl	80237fa <lfs_tole32>
 8024058:	4602      	mov	r2, r0
 802405a:	687b      	ldr	r3, [r7, #4]
 802405c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 802405e:	687b      	ldr	r3, [r7, #4]
 8024060:	3304      	adds	r3, #4
 8024062:	681a      	ldr	r2, [r3, #0]
 8024064:	687b      	ldr	r3, [r7, #4]
 8024066:	1d1c      	adds	r4, r3, #4
 8024068:	4610      	mov	r0, r2
 802406a:	f7ff fbc6 	bl	80237fa <lfs_tole32>
 802406e:	4603      	mov	r3, r0
 8024070:	6023      	str	r3, [r4, #0]
}
 8024072:	bf00      	nop
 8024074:	370c      	adds	r7, #12
 8024076:	46bd      	mov	sp, r7
 8024078:	bd90      	pop	{r4, r7, pc}

0802407a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 802407a:	b480      	push	{r7}
 802407c:	b083      	sub	sp, #12
 802407e:	af00      	add	r7, sp, #0
 8024080:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	43db      	mvns	r3, r3
 8024086:	0fdb      	lsrs	r3, r3, #31
 8024088:	b2db      	uxtb	r3, r3
}
 802408a:	4618      	mov	r0, r3
 802408c:	370c      	adds	r7, #12
 802408e:	46bd      	mov	sp, r7
 8024090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024094:	4770      	bx	lr

08024096 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8024096:	b480      	push	{r7}
 8024098:	b083      	sub	sp, #12
 802409a:	af00      	add	r7, sp, #0
 802409c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 802409e:	687b      	ldr	r3, [r7, #4]
 80240a0:	059b      	lsls	r3, r3, #22
 80240a2:	159b      	asrs	r3, r3, #22
 80240a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80240a8:	bf0c      	ite	eq
 80240aa:	2301      	moveq	r3, #1
 80240ac:	2300      	movne	r3, #0
 80240ae:	b2db      	uxtb	r3, r3
}
 80240b0:	4618      	mov	r0, r3
 80240b2:	370c      	adds	r7, #12
 80240b4:	46bd      	mov	sp, r7
 80240b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240ba:	4770      	bx	lr

080240bc <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80240bc:	b480      	push	{r7}
 80240be:	b083      	sub	sp, #12
 80240c0:	af00      	add	r7, sp, #0
 80240c2:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80240c4:	687b      	ldr	r3, [r7, #4]
 80240c6:	0d1b      	lsrs	r3, r3, #20
 80240c8:	b29b      	uxth	r3, r3
 80240ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80240ce:	b29b      	uxth	r3, r3
}
 80240d0:	4618      	mov	r0, r3
 80240d2:	370c      	adds	r7, #12
 80240d4:	46bd      	mov	sp, r7
 80240d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240da:	4770      	bx	lr

080240dc <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80240dc:	b480      	push	{r7}
 80240de:	b083      	sub	sp, #12
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	0d1b      	lsrs	r3, r3, #20
 80240e8:	b29b      	uxth	r3, r3
 80240ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80240ee:	b29b      	uxth	r3, r3
}
 80240f0:	4618      	mov	r0, r3
 80240f2:	370c      	adds	r7, #12
 80240f4:	46bd      	mov	sp, r7
 80240f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240fa:	4770      	bx	lr

080240fc <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80240fc:	b480      	push	{r7}
 80240fe:	b083      	sub	sp, #12
 8024100:	af00      	add	r7, sp, #0
 8024102:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	0d1b      	lsrs	r3, r3, #20
 8024108:	b2db      	uxtb	r3, r3
}
 802410a:	4618      	mov	r0, r3
 802410c:	370c      	adds	r7, #12
 802410e:	46bd      	mov	sp, r7
 8024110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024114:	4770      	bx	lr

08024116 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8024116:	b580      	push	{r7, lr}
 8024118:	b082      	sub	sp, #8
 802411a:	af00      	add	r7, sp, #0
 802411c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 802411e:	6878      	ldr	r0, [r7, #4]
 8024120:	f7ff ffec 	bl	80240fc <lfs_tag_chunk>
 8024124:	4603      	mov	r3, r0
 8024126:	b25b      	sxtb	r3, r3
}
 8024128:	4618      	mov	r0, r3
 802412a:	3708      	adds	r7, #8
 802412c:	46bd      	mov	sp, r7
 802412e:	bd80      	pop	{r7, pc}

08024130 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8024130:	b480      	push	{r7}
 8024132:	b083      	sub	sp, #12
 8024134:	af00      	add	r7, sp, #0
 8024136:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	0a9b      	lsrs	r3, r3, #10
 802413c:	b29b      	uxth	r3, r3
 802413e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8024142:	b29b      	uxth	r3, r3
}
 8024144:	4618      	mov	r0, r3
 8024146:	370c      	adds	r7, #12
 8024148:	46bd      	mov	sp, r7
 802414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802414e:	4770      	bx	lr

08024150 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8024150:	b480      	push	{r7}
 8024152:	b083      	sub	sp, #12
 8024154:	af00      	add	r7, sp, #0
 8024156:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 802415e:	4618      	mov	r0, r3
 8024160:	370c      	adds	r7, #12
 8024162:	46bd      	mov	sp, r7
 8024164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024168:	4770      	bx	lr

0802416a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 802416a:	b580      	push	{r7, lr}
 802416c:	b082      	sub	sp, #8
 802416e:	af00      	add	r7, sp, #0
 8024170:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8024172:	6878      	ldr	r0, [r7, #4]
 8024174:	f7ff ff8f 	bl	8024096 <lfs_tag_isdelete>
 8024178:	4603      	mov	r3, r0
 802417a:	461a      	mov	r2, r3
 802417c:	687b      	ldr	r3, [r7, #4]
 802417e:	4413      	add	r3, r2
 8024180:	4618      	mov	r0, r3
 8024182:	f7ff ffe5 	bl	8024150 <lfs_tag_size>
 8024186:	4603      	mov	r3, r0
 8024188:	3304      	adds	r3, #4
}
 802418a:	4618      	mov	r0, r3
 802418c:	3708      	adds	r7, #8
 802418e:	46bd      	mov	sp, r7
 8024190:	bd80      	pop	{r7, pc}

08024192 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8024192:	b480      	push	{r7}
 8024194:	b085      	sub	sp, #20
 8024196:	af00      	add	r7, sp, #0
 8024198:	6078      	str	r0, [r7, #4]
 802419a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 802419c:	2300      	movs	r3, #0
 802419e:	60fb      	str	r3, [r7, #12]
 80241a0:	e012      	b.n	80241c8 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80241a2:	68fb      	ldr	r3, [r7, #12]
 80241a4:	009b      	lsls	r3, r3, #2
 80241a6:	687a      	ldr	r2, [r7, #4]
 80241a8:	4413      	add	r3, r2
 80241aa:	6819      	ldr	r1, [r3, #0]
 80241ac:	68fb      	ldr	r3, [r7, #12]
 80241ae:	009b      	lsls	r3, r3, #2
 80241b0:	683a      	ldr	r2, [r7, #0]
 80241b2:	4413      	add	r3, r2
 80241b4:	681a      	ldr	r2, [r3, #0]
 80241b6:	68fb      	ldr	r3, [r7, #12]
 80241b8:	009b      	lsls	r3, r3, #2
 80241ba:	6878      	ldr	r0, [r7, #4]
 80241bc:	4403      	add	r3, r0
 80241be:	404a      	eors	r2, r1
 80241c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80241c2:	68fb      	ldr	r3, [r7, #12]
 80241c4:	3301      	adds	r3, #1
 80241c6:	60fb      	str	r3, [r7, #12]
 80241c8:	68fb      	ldr	r3, [r7, #12]
 80241ca:	2b02      	cmp	r3, #2
 80241cc:	dde9      	ble.n	80241a2 <lfs_gstate_xor+0x10>
    }
}
 80241ce:	bf00      	nop
 80241d0:	bf00      	nop
 80241d2:	3714      	adds	r7, #20
 80241d4:	46bd      	mov	sp, r7
 80241d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241da:	4770      	bx	lr

080241dc <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80241dc:	b480      	push	{r7}
 80241de:	b085      	sub	sp, #20
 80241e0:	af00      	add	r7, sp, #0
 80241e2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80241e4:	2300      	movs	r3, #0
 80241e6:	60fb      	str	r3, [r7, #12]
 80241e8:	e00b      	b.n	8024202 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80241ea:	68fb      	ldr	r3, [r7, #12]
 80241ec:	009b      	lsls	r3, r3, #2
 80241ee:	687a      	ldr	r2, [r7, #4]
 80241f0:	4413      	add	r3, r2
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	2b00      	cmp	r3, #0
 80241f6:	d001      	beq.n	80241fc <lfs_gstate_iszero+0x20>
            return false;
 80241f8:	2300      	movs	r3, #0
 80241fa:	e006      	b.n	802420a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80241fc:	68fb      	ldr	r3, [r7, #12]
 80241fe:	3301      	adds	r3, #1
 8024200:	60fb      	str	r3, [r7, #12]
 8024202:	68fb      	ldr	r3, [r7, #12]
 8024204:	2b02      	cmp	r3, #2
 8024206:	ddf0      	ble.n	80241ea <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8024208:	2301      	movs	r3, #1
}
 802420a:	4618      	mov	r0, r3
 802420c:	3714      	adds	r7, #20
 802420e:	46bd      	mov	sp, r7
 8024210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024214:	4770      	bx	lr

08024216 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8024216:	b580      	push	{r7, lr}
 8024218:	b082      	sub	sp, #8
 802421a:	af00      	add	r7, sp, #0
 802421c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	681b      	ldr	r3, [r3, #0]
 8024222:	4618      	mov	r0, r3
 8024224:	f7ff ff94 	bl	8024150 <lfs_tag_size>
 8024228:	4603      	mov	r3, r0
 802422a:	2b00      	cmp	r3, #0
 802422c:	bf14      	ite	ne
 802422e:	2301      	movne	r3, #1
 8024230:	2300      	moveq	r3, #0
 8024232:	b2db      	uxtb	r3, r3
}
 8024234:	4618      	mov	r0, r3
 8024236:	3708      	adds	r7, #8
 8024238:	46bd      	mov	sp, r7
 802423a:	bd80      	pop	{r7, pc}

0802423c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 802423c:	b580      	push	{r7, lr}
 802423e:	b082      	sub	sp, #8
 8024240:	af00      	add	r7, sp, #0
 8024242:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	681b      	ldr	r3, [r3, #0]
 8024248:	4618      	mov	r0, r3
 802424a:	f7ff ff81 	bl	8024150 <lfs_tag_size>
 802424e:	4603      	mov	r3, r0
 8024250:	b2db      	uxtb	r3, r3
}
 8024252:	4618      	mov	r0, r3
 8024254:	3708      	adds	r7, #8
 8024256:	46bd      	mov	sp, r7
 8024258:	bd80      	pop	{r7, pc}

0802425a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 802425a:	b580      	push	{r7, lr}
 802425c:	b082      	sub	sp, #8
 802425e:	af00      	add	r7, sp, #0
 8024260:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	681b      	ldr	r3, [r3, #0]
 8024266:	4618      	mov	r0, r3
 8024268:	f7ff ff28 	bl	80240bc <lfs_tag_type1>
 802426c:	4603      	mov	r3, r0
 802426e:	2b00      	cmp	r3, #0
 8024270:	bf14      	ite	ne
 8024272:	2301      	movne	r3, #1
 8024274:	2300      	moveq	r3, #0
 8024276:	b2db      	uxtb	r3, r3
}
 8024278:	4618      	mov	r0, r3
 802427a:	3708      	adds	r7, #8
 802427c:	46bd      	mov	sp, r7
 802427e:	bd80      	pop	{r7, pc}

08024280 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8024280:	b580      	push	{r7, lr}
 8024282:	b082      	sub	sp, #8
 8024284:	af00      	add	r7, sp, #0
 8024286:	6078      	str	r0, [r7, #4]
 8024288:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	681b      	ldr	r3, [r3, #0]
 802428e:	4618      	mov	r0, r3
 8024290:	f7ff ff14 	bl	80240bc <lfs_tag_type1>
 8024294:	4603      	mov	r3, r0
 8024296:	2b00      	cmp	r3, #0
 8024298:	d00a      	beq.n	80242b0 <lfs_gstate_hasmovehere+0x30>
 802429a:	687b      	ldr	r3, [r7, #4]
 802429c:	3304      	adds	r3, #4
 802429e:	6839      	ldr	r1, [r7, #0]
 80242a0:	4618      	mov	r0, r3
 80242a2:	f7ff fe5f 	bl	8023f64 <lfs_pair_cmp>
 80242a6:	4603      	mov	r3, r0
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d101      	bne.n	80242b0 <lfs_gstate_hasmovehere+0x30>
 80242ac:	2301      	movs	r3, #1
 80242ae:	e000      	b.n	80242b2 <lfs_gstate_hasmovehere+0x32>
 80242b0:	2300      	movs	r3, #0
 80242b2:	f003 0301 	and.w	r3, r3, #1
 80242b6:	b2db      	uxtb	r3, r3
}
 80242b8:	4618      	mov	r0, r3
 80242ba:	3708      	adds	r7, #8
 80242bc:	46bd      	mov	sp, r7
 80242be:	bd80      	pop	{r7, pc}

080242c0 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80242c0:	b580      	push	{r7, lr}
 80242c2:	b082      	sub	sp, #8
 80242c4:	af00      	add	r7, sp, #0
 80242c6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80242c8:	687b      	ldr	r3, [r7, #4]
 80242ca:	681b      	ldr	r3, [r3, #0]
 80242cc:	4618      	mov	r0, r3
 80242ce:	f7ff fa89 	bl	80237e4 <lfs_fromle32>
 80242d2:	4602      	mov	r2, r0
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	685b      	ldr	r3, [r3, #4]
 80242dc:	4618      	mov	r0, r3
 80242de:	f7ff fa81 	bl	80237e4 <lfs_fromle32>
 80242e2:	4602      	mov	r2, r0
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80242e8:	687b      	ldr	r3, [r7, #4]
 80242ea:	689b      	ldr	r3, [r3, #8]
 80242ec:	4618      	mov	r0, r3
 80242ee:	f7ff fa79 	bl	80237e4 <lfs_fromle32>
 80242f2:	4602      	mov	r2, r0
 80242f4:	687b      	ldr	r3, [r7, #4]
 80242f6:	609a      	str	r2, [r3, #8]
}
 80242f8:	bf00      	nop
 80242fa:	3708      	adds	r7, #8
 80242fc:	46bd      	mov	sp, r7
 80242fe:	bd80      	pop	{r7, pc}

08024300 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8024300:	b580      	push	{r7, lr}
 8024302:	b082      	sub	sp, #8
 8024304:	af00      	add	r7, sp, #0
 8024306:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	681b      	ldr	r3, [r3, #0]
 802430c:	4618      	mov	r0, r3
 802430e:	f7ff fa74 	bl	80237fa <lfs_tole32>
 8024312:	4602      	mov	r2, r0
 8024314:	687b      	ldr	r3, [r7, #4]
 8024316:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	685b      	ldr	r3, [r3, #4]
 802431c:	4618      	mov	r0, r3
 802431e:	f7ff fa6c 	bl	80237fa <lfs_tole32>
 8024322:	4602      	mov	r2, r0
 8024324:	687b      	ldr	r3, [r7, #4]
 8024326:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8024328:	687b      	ldr	r3, [r7, #4]
 802432a:	689b      	ldr	r3, [r3, #8]
 802432c:	4618      	mov	r0, r3
 802432e:	f7ff fa64 	bl	80237fa <lfs_tole32>
 8024332:	4602      	mov	r2, r0
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	609a      	str	r2, [r3, #8]
}
 8024338:	bf00      	nop
 802433a:	3708      	adds	r7, #8
 802433c:	46bd      	mov	sp, r7
 802433e:	bd80      	pop	{r7, pc}

08024340 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8024340:	b580      	push	{r7, lr}
 8024342:	b082      	sub	sp, #8
 8024344:	af00      	add	r7, sp, #0
 8024346:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8024348:	687b      	ldr	r3, [r7, #4]
 802434a:	681b      	ldr	r3, [r3, #0]
 802434c:	4618      	mov	r0, r3
 802434e:	f7ff fa49 	bl	80237e4 <lfs_fromle32>
 8024352:	4602      	mov	r2, r0
 8024354:	687b      	ldr	r3, [r7, #4]
 8024356:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8024358:	687b      	ldr	r3, [r7, #4]
 802435a:	685b      	ldr	r3, [r3, #4]
 802435c:	4618      	mov	r0, r3
 802435e:	f7ff fa41 	bl	80237e4 <lfs_fromle32>
 8024362:	4602      	mov	r2, r0
 8024364:	687b      	ldr	r3, [r7, #4]
 8024366:	605a      	str	r2, [r3, #4]
}
 8024368:	bf00      	nop
 802436a:	3708      	adds	r7, #8
 802436c:	46bd      	mov	sp, r7
 802436e:	bd80      	pop	{r7, pc}

08024370 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8024370:	b580      	push	{r7, lr}
 8024372:	b082      	sub	sp, #8
 8024374:	af00      	add	r7, sp, #0
 8024376:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8024378:	687b      	ldr	r3, [r7, #4]
 802437a:	681b      	ldr	r3, [r3, #0]
 802437c:	4618      	mov	r0, r3
 802437e:	f7ff fa3c 	bl	80237fa <lfs_tole32>
 8024382:	4602      	mov	r2, r0
 8024384:	687b      	ldr	r3, [r7, #4]
 8024386:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8024388:	687b      	ldr	r3, [r7, #4]
 802438a:	685b      	ldr	r3, [r3, #4]
 802438c:	4618      	mov	r0, r3
 802438e:	f7ff fa34 	bl	80237fa <lfs_tole32>
 8024392:	4602      	mov	r2, r0
 8024394:	687b      	ldr	r3, [r7, #4]
 8024396:	605a      	str	r2, [r3, #4]
}
 8024398:	bf00      	nop
 802439a:	3708      	adds	r7, #8
 802439c:	46bd      	mov	sp, r7
 802439e:	bd80      	pop	{r7, pc}

080243a0 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80243a0:	b580      	push	{r7, lr}
 80243a2:	b082      	sub	sp, #8
 80243a4:	af00      	add	r7, sp, #0
 80243a6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80243a8:	687b      	ldr	r3, [r7, #4]
 80243aa:	681b      	ldr	r3, [r3, #0]
 80243ac:	4618      	mov	r0, r3
 80243ae:	f7ff fa19 	bl	80237e4 <lfs_fromle32>
 80243b2:	4602      	mov	r2, r0
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80243b8:	687b      	ldr	r3, [r7, #4]
 80243ba:	685b      	ldr	r3, [r3, #4]
 80243bc:	4618      	mov	r0, r3
 80243be:	f7ff fa11 	bl	80237e4 <lfs_fromle32>
 80243c2:	4602      	mov	r2, r0
 80243c4:	687b      	ldr	r3, [r7, #4]
 80243c6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	689b      	ldr	r3, [r3, #8]
 80243cc:	4618      	mov	r0, r3
 80243ce:	f7ff fa09 	bl	80237e4 <lfs_fromle32>
 80243d2:	4602      	mov	r2, r0
 80243d4:	687b      	ldr	r3, [r7, #4]
 80243d6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80243d8:	687b      	ldr	r3, [r7, #4]
 80243da:	68db      	ldr	r3, [r3, #12]
 80243dc:	4618      	mov	r0, r3
 80243de:	f7ff fa01 	bl	80237e4 <lfs_fromle32>
 80243e2:	4602      	mov	r2, r0
 80243e4:	687b      	ldr	r3, [r7, #4]
 80243e6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80243e8:	687b      	ldr	r3, [r7, #4]
 80243ea:	691b      	ldr	r3, [r3, #16]
 80243ec:	4618      	mov	r0, r3
 80243ee:	f7ff f9f9 	bl	80237e4 <lfs_fromle32>
 80243f2:	4602      	mov	r2, r0
 80243f4:	687b      	ldr	r3, [r7, #4]
 80243f6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80243f8:	687b      	ldr	r3, [r7, #4]
 80243fa:	695b      	ldr	r3, [r3, #20]
 80243fc:	4618      	mov	r0, r3
 80243fe:	f7ff f9f1 	bl	80237e4 <lfs_fromle32>
 8024402:	4602      	mov	r2, r0
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	615a      	str	r2, [r3, #20]
}
 8024408:	bf00      	nop
 802440a:	3708      	adds	r7, #8
 802440c:	46bd      	mov	sp, r7
 802440e:	bd80      	pop	{r7, pc}

08024410 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8024410:	b580      	push	{r7, lr}
 8024412:	b082      	sub	sp, #8
 8024414:	af00      	add	r7, sp, #0
 8024416:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	681b      	ldr	r3, [r3, #0]
 802441c:	4618      	mov	r0, r3
 802441e:	f7ff f9ec 	bl	80237fa <lfs_tole32>
 8024422:	4602      	mov	r2, r0
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	685b      	ldr	r3, [r3, #4]
 802442c:	4618      	mov	r0, r3
 802442e:	f7ff f9e4 	bl	80237fa <lfs_tole32>
 8024432:	4602      	mov	r2, r0
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8024438:	687b      	ldr	r3, [r7, #4]
 802443a:	689b      	ldr	r3, [r3, #8]
 802443c:	4618      	mov	r0, r3
 802443e:	f7ff f9dc 	bl	80237fa <lfs_tole32>
 8024442:	4602      	mov	r2, r0
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8024448:	687b      	ldr	r3, [r7, #4]
 802444a:	68db      	ldr	r3, [r3, #12]
 802444c:	4618      	mov	r0, r3
 802444e:	f7ff f9d4 	bl	80237fa <lfs_tole32>
 8024452:	4602      	mov	r2, r0
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	691b      	ldr	r3, [r3, #16]
 802445c:	4618      	mov	r0, r3
 802445e:	f7ff f9cc 	bl	80237fa <lfs_tole32>
 8024462:	4602      	mov	r2, r0
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	695b      	ldr	r3, [r3, #20]
 802446c:	4618      	mov	r0, r3
 802446e:	f7ff f9c4 	bl	80237fa <lfs_tole32>
 8024472:	4602      	mov	r2, r0
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	615a      	str	r2, [r3, #20]
}
 8024478:	bf00      	nop
 802447a:	3708      	adds	r7, #8
 802447c:	46bd      	mov	sp, r7
 802447e:	bd80      	pop	{r7, pc}

08024480 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8024480:	b480      	push	{r7}
 8024482:	b085      	sub	sp, #20
 8024484:	af00      	add	r7, sp, #0
 8024486:	6078      	str	r0, [r7, #4]
 8024488:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802448a:	1d3b      	adds	r3, r7, #4
 802448c:	60fb      	str	r3, [r7, #12]
 802448e:	e009      	b.n	80244a4 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8024490:	68fb      	ldr	r3, [r7, #12]
 8024492:	681b      	ldr	r3, [r3, #0]
 8024494:	683a      	ldr	r2, [r7, #0]
 8024496:	429a      	cmp	r2, r3
 8024498:	d101      	bne.n	802449e <lfs_mlist_isopen+0x1e>
            return true;
 802449a:	2301      	movs	r3, #1
 802449c:	e007      	b.n	80244ae <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802449e:	68fb      	ldr	r3, [r7, #12]
 80244a0:	681b      	ldr	r3, [r3, #0]
 80244a2:	60fb      	str	r3, [r7, #12]
 80244a4:	68fb      	ldr	r3, [r7, #12]
 80244a6:	681b      	ldr	r3, [r3, #0]
 80244a8:	2b00      	cmp	r3, #0
 80244aa:	d1f1      	bne.n	8024490 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80244ac:	2300      	movs	r3, #0
}
 80244ae:	4618      	mov	r0, r3
 80244b0:	3714      	adds	r7, #20
 80244b2:	46bd      	mov	sp, r7
 80244b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244b8:	4770      	bx	lr

080244ba <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80244ba:	b480      	push	{r7}
 80244bc:	b085      	sub	sp, #20
 80244be:	af00      	add	r7, sp, #0
 80244c0:	6078      	str	r0, [r7, #4]
 80244c2:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	3328      	adds	r3, #40	; 0x28
 80244c8:	60fb      	str	r3, [r7, #12]
 80244ca:	e00d      	b.n	80244e8 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80244cc:	68fb      	ldr	r3, [r7, #12]
 80244ce:	681b      	ldr	r3, [r3, #0]
 80244d0:	683a      	ldr	r2, [r7, #0]
 80244d2:	429a      	cmp	r2, r3
 80244d4:	d105      	bne.n	80244e2 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80244d6:	68fb      	ldr	r3, [r7, #12]
 80244d8:	681b      	ldr	r3, [r3, #0]
 80244da:	681a      	ldr	r2, [r3, #0]
 80244dc:	68fb      	ldr	r3, [r7, #12]
 80244de:	601a      	str	r2, [r3, #0]
            break;
 80244e0:	e007      	b.n	80244f2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80244e2:	68fb      	ldr	r3, [r7, #12]
 80244e4:	681b      	ldr	r3, [r3, #0]
 80244e6:	60fb      	str	r3, [r7, #12]
 80244e8:	68fb      	ldr	r3, [r7, #12]
 80244ea:	681b      	ldr	r3, [r3, #0]
 80244ec:	2b00      	cmp	r3, #0
 80244ee:	d1ed      	bne.n	80244cc <lfs_mlist_remove+0x12>
        }
    }
}
 80244f0:	bf00      	nop
 80244f2:	bf00      	nop
 80244f4:	3714      	adds	r7, #20
 80244f6:	46bd      	mov	sp, r7
 80244f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244fc:	4770      	bx	lr

080244fe <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80244fe:	b480      	push	{r7}
 8024500:	b083      	sub	sp, #12
 8024502:	af00      	add	r7, sp, #0
 8024504:	6078      	str	r0, [r7, #4]
 8024506:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8024508:	687b      	ldr	r3, [r7, #4]
 802450a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802450c:	683b      	ldr	r3, [r7, #0]
 802450e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8024510:	687b      	ldr	r3, [r7, #4]
 8024512:	683a      	ldr	r2, [r7, #0]
 8024514:	629a      	str	r2, [r3, #40]	; 0x28
}
 8024516:	bf00      	nop
 8024518:	370c      	adds	r7, #12
 802451a:	46bd      	mov	sp, r7
 802451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024520:	4770      	bx	lr

08024522 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8024522:	b480      	push	{r7}
 8024524:	b085      	sub	sp, #20
 8024526:	af00      	add	r7, sp, #0
 8024528:	6078      	str	r0, [r7, #4]
 802452a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 802452c:	687b      	ldr	r3, [r7, #4]
 802452e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8024530:	68fb      	ldr	r3, [r7, #12]
 8024532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024534:	683a      	ldr	r2, [r7, #0]
 8024536:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8024538:	68fb      	ldr	r3, [r7, #12]
 802453a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802453c:	6a1b      	ldr	r3, [r3, #32]
 802453e:	4413      	add	r3, r2
 8024540:	68fa      	ldr	r2, [r7, #12]
 8024542:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8024544:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8024546:	fbb3 f1f2 	udiv	r1, r3, r2
 802454a:	fb01 f202 	mul.w	r2, r1, r2
 802454e:	1a9b      	subs	r3, r3, r2
 8024550:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8024552:	68fb      	ldr	r3, [r7, #12]
 8024554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024556:	68ba      	ldr	r2, [r7, #8]
 8024558:	429a      	cmp	r2, r3
 802455a:	d212      	bcs.n	8024582 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 802455c:	68fb      	ldr	r3, [r7, #12]
 802455e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8024560:	68bb      	ldr	r3, [r7, #8]
 8024562:	095b      	lsrs	r3, r3, #5
 8024564:	009a      	lsls	r2, r3, #2
 8024566:	440a      	add	r2, r1
 8024568:	6811      	ldr	r1, [r2, #0]
 802456a:	68ba      	ldr	r2, [r7, #8]
 802456c:	f002 021f 	and.w	r2, r2, #31
 8024570:	2001      	movs	r0, #1
 8024572:	fa00 f202 	lsl.w	r2, r0, r2
 8024576:	68f8      	ldr	r0, [r7, #12]
 8024578:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802457a:	009b      	lsls	r3, r3, #2
 802457c:	4403      	add	r3, r0
 802457e:	430a      	orrs	r2, r1
 8024580:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8024582:	2300      	movs	r3, #0
}
 8024584:	4618      	mov	r0, r3
 8024586:	3714      	adds	r7, #20
 8024588:	46bd      	mov	sp, r7
 802458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802458e:	4770      	bx	lr

08024590 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024590:	b480      	push	{r7}
 8024592:	b083      	sub	sp, #12
 8024594:	af00      	add	r7, sp, #0
 8024596:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802459c:	6a1a      	ldr	r2, [r3, #32]
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80245a2:	bf00      	nop
 80245a4:	370c      	adds	r7, #12
 80245a6:	46bd      	mov	sp, r7
 80245a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245ac:	4770      	bx	lr

080245ae <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80245ae:	b580      	push	{r7, lr}
 80245b0:	b082      	sub	sp, #8
 80245b2:	af00      	add	r7, sp, #0
 80245b4:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80245b6:	687b      	ldr	r3, [r7, #4]
 80245b8:	2200      	movs	r2, #0
 80245ba:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	2200      	movs	r2, #0
 80245c0:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80245c2:	6878      	ldr	r0, [r7, #4]
 80245c4:	f7ff ffe4 	bl	8024590 <lfs_alloc_ack>
}
 80245c8:	bf00      	nop
 80245ca:	3708      	adds	r7, #8
 80245cc:	46bd      	mov	sp, r7
 80245ce:	bd80      	pop	{r7, pc}

080245d0 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80245d0:	b580      	push	{r7, lr}
 80245d2:	b086      	sub	sp, #24
 80245d4:	af02      	add	r7, sp, #8
 80245d6:	6078      	str	r0, [r7, #4]
 80245d8:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80245da:	e04f      	b.n	802467c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80245e0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80245e2:	687b      	ldr	r3, [r7, #4]
 80245e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80245e6:	1c5a      	adds	r2, r3, #1
 80245e8:	687b      	ldr	r3, [r7, #4]
 80245ea:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80245ec:	687b      	ldr	r3, [r7, #4]
 80245ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80245f0:	1e5a      	subs	r2, r3, #1
 80245f2:	687b      	ldr	r3, [r7, #4]
 80245f4:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80245f6:	687b      	ldr	r3, [r7, #4]
 80245f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80245fa:	68bb      	ldr	r3, [r7, #8]
 80245fc:	095b      	lsrs	r3, r3, #5
 80245fe:	009b      	lsls	r3, r3, #2
 8024600:	4413      	add	r3, r2
 8024602:	681a      	ldr	r2, [r3, #0]
 8024604:	68bb      	ldr	r3, [r7, #8]
 8024606:	f003 031f 	and.w	r3, r3, #31
 802460a:	2101      	movs	r1, #1
 802460c:	fa01 f303 	lsl.w	r3, r1, r3
 8024610:	4013      	ands	r3, r2
 8024612:	2b00      	cmp	r3, #0
 8024614:	d132      	bne.n	802467c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8024616:	687b      	ldr	r3, [r7, #4]
 8024618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802461a:	68bb      	ldr	r3, [r7, #8]
 802461c:	4413      	add	r3, r2
 802461e:	687a      	ldr	r2, [r7, #4]
 8024620:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8024622:	6a12      	ldr	r2, [r2, #32]
 8024624:	fbb3 f1f2 	udiv	r1, r3, r2
 8024628:	fb01 f202 	mul.w	r2, r1, r2
 802462c:	1a9a      	subs	r2, r3, r2
 802462e:	683b      	ldr	r3, [r7, #0]
 8024630:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8024632:	e009      	b.n	8024648 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024638:	1c5a      	adds	r2, r3, #1
 802463a:	687b      	ldr	r3, [r7, #4]
 802463c:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 802463e:	687b      	ldr	r3, [r7, #4]
 8024640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024642:	1e5a      	subs	r2, r3, #1
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8024648:	687b      	ldr	r3, [r7, #4]
 802464a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802464c:	687b      	ldr	r3, [r7, #4]
 802464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024650:	429a      	cmp	r2, r3
 8024652:	d011      	beq.n	8024678 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8024654:	687b      	ldr	r3, [r7, #4]
 8024656:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8024658:	687b      	ldr	r3, [r7, #4]
 802465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802465c:	095b      	lsrs	r3, r3, #5
 802465e:	009b      	lsls	r3, r3, #2
 8024660:	4413      	add	r3, r2
 8024662:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024668:	f003 031f 	and.w	r3, r3, #31
 802466c:	2101      	movs	r1, #1
 802466e:	fa01 f303 	lsl.w	r3, r1, r3
 8024672:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8024674:	2b00      	cmp	r3, #0
 8024676:	d1dd      	bne.n	8024634 <lfs_alloc+0x64>
                }

                return 0;
 8024678:	2300      	movs	r3, #0
 802467a:	e050      	b.n	802471e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 802467c:	687b      	ldr	r3, [r7, #4]
 802467e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024680:	687b      	ldr	r3, [r7, #4]
 8024682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024684:	429a      	cmp	r2, r3
 8024686:	d1a9      	bne.n	80245dc <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8024688:	687b      	ldr	r3, [r7, #4]
 802468a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802468c:	2b00      	cmp	r3, #0
 802468e:	d10f      	bne.n	80246b0 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024694:	687b      	ldr	r3, [r7, #4]
 8024696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024698:	4413      	add	r3, r2
 802469a:	4a23      	ldr	r2, [pc, #140]	; (8024728 <lfs_alloc+0x158>)
 802469c:	9200      	str	r2, [sp, #0]
 802469e:	f240 2247 	movw	r2, #583	; 0x247
 80246a2:	4922      	ldr	r1, [pc, #136]	; (802472c <lfs_alloc+0x15c>)
 80246a4:	4822      	ldr	r0, [pc, #136]	; (8024730 <lfs_alloc+0x160>)
 80246a6:	f008 ffab 	bl	802d600 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80246aa:	f06f 031b 	mvn.w	r3, #27
 80246ae:	e036      	b.n	802471e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80246b4:	687b      	ldr	r3, [r7, #4]
 80246b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80246b8:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 80246ba:	687a      	ldr	r2, [r7, #4]
 80246bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80246be:	6a12      	ldr	r2, [r2, #32]
 80246c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80246c4:	fb01 f202 	mul.w	r2, r1, r2
 80246c8:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 80246ca:	687b      	ldr	r3, [r7, #4]
 80246cc:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80246d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80246d4:	00da      	lsls	r2, r3, #3
 80246d6:	687b      	ldr	r3, [r7, #4]
 80246d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80246da:	4619      	mov	r1, r3
 80246dc:	4610      	mov	r0, r2
 80246de:	f7ff f811 	bl	8023704 <lfs_min>
 80246e2:	4602      	mov	r2, r0
 80246e4:	687b      	ldr	r3, [r7, #4]
 80246e6:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	2200      	movs	r2, #0
 80246ec:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80246ee:	687b      	ldr	r3, [r7, #4]
 80246f0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80246f2:	687b      	ldr	r3, [r7, #4]
 80246f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80246f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80246f8:	461a      	mov	r2, r3
 80246fa:	2100      	movs	r1, #0
 80246fc:	f009 f916 	bl	802d92c <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8024700:	2301      	movs	r3, #1
 8024702:	687a      	ldr	r2, [r7, #4]
 8024704:	490b      	ldr	r1, [pc, #44]	; (8024734 <lfs_alloc+0x164>)
 8024706:	6878      	ldr	r0, [r7, #4]
 8024708:	f005 fb3e 	bl	8029d88 <lfs_fs_rawtraverse>
 802470c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802470e:	68fb      	ldr	r3, [r7, #12]
 8024710:	2b00      	cmp	r3, #0
 8024712:	f43f af62 	beq.w	80245da <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8024716:	6878      	ldr	r0, [r7, #4]
 8024718:	f7ff ff49 	bl	80245ae <lfs_alloc_drop>
            return err;
 802471c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 802471e:	4618      	mov	r0, r3
 8024720:	3710      	adds	r7, #16
 8024722:	46bd      	mov	sp, r7
 8024724:	bd80      	pop	{r7, pc}
 8024726:	bf00      	nop
 8024728:	08033780 	.word	0x08033780
 802472c:	0803366c 	.word	0x0803366c
 8024730:	08033758 	.word	0x08033758
 8024734:	08024523 	.word	0x08024523

08024738 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8024738:	b590      	push	{r4, r7, lr}
 802473a:	b08f      	sub	sp, #60	; 0x3c
 802473c:	af04      	add	r7, sp, #16
 802473e:	60f8      	str	r0, [r7, #12]
 8024740:	60b9      	str	r1, [r7, #8]
 8024742:	607a      	str	r2, [r7, #4]
 8024744:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8024746:	68bb      	ldr	r3, [r7, #8]
 8024748:	68db      	ldr	r3, [r3, #12]
 802474a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 802474c:	68bb      	ldr	r3, [r7, #8]
 802474e:	691b      	ldr	r3, [r3, #16]
 8024750:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8024752:	2300      	movs	r3, #0
 8024754:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024756:	68fb      	ldr	r3, [r7, #12]
 8024758:	333c      	adds	r3, #60	; 0x3c
 802475a:	68ba      	ldr	r2, [r7, #8]
 802475c:	4611      	mov	r1, r2
 802475e:	4618      	mov	r0, r3
 8024760:	f7ff fd8e 	bl	8024280 <lfs_gstate_hasmovehere>
 8024764:	4603      	mov	r3, r0
 8024766:	2b00      	cmp	r3, #0
 8024768:	f000 80ba 	beq.w	80248e0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 802476c:	6878      	ldr	r0, [r7, #4]
 802476e:	f7ff fcdf 	bl	8024130 <lfs_tag_id>
 8024772:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024774:	2b00      	cmp	r3, #0
 8024776:	f000 80b3 	beq.w	80248e0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 802477a:	68fb      	ldr	r3, [r7, #12]
 802477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802477e:	4618      	mov	r0, r3
 8024780:	f7ff fcd6 	bl	8024130 <lfs_tag_id>
 8024784:	4603      	mov	r3, r0
 8024786:	461c      	mov	r4, r3
 8024788:	6838      	ldr	r0, [r7, #0]
 802478a:	f7ff fcd1 	bl	8024130 <lfs_tag_id>
 802478e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024790:	429c      	cmp	r4, r3
 8024792:	f200 80a5 	bhi.w	80248e0 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024796:	6a3b      	ldr	r3, [r7, #32]
 8024798:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802479c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 802479e:	e09f      	b.n	80248e0 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 80247a0:	693b      	ldr	r3, [r7, #16]
 80247a2:	4618      	mov	r0, r3
 80247a4:	f7ff fce1 	bl	802416a <lfs_tag_dsize>
 80247a8:	4602      	mov	r2, r0
 80247aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247ac:	1a9b      	subs	r3, r3, r2
 80247ae:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80247b0:	693b      	ldr	r3, [r7, #16]
 80247b2:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80247b4:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 80247b6:	68bb      	ldr	r3, [r7, #8]
 80247b8:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 80247ba:	2204      	movs	r2, #4
 80247bc:	9203      	str	r2, [sp, #12]
 80247be:	f107 0210 	add.w	r2, r7, #16
 80247c2:	9202      	str	r2, [sp, #8]
 80247c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80247c6:	9201      	str	r2, [sp, #4]
 80247c8:	9300      	str	r3, [sp, #0]
 80247ca:	2304      	movs	r3, #4
 80247cc:	460a      	mov	r2, r1
 80247ce:	2100      	movs	r1, #0
 80247d0:	68f8      	ldr	r0, [r7, #12]
 80247d2:	f7ff f873 	bl	80238bc <lfs_bd_read>
 80247d6:	61b8      	str	r0, [r7, #24]
        if (err) {
 80247d8:	69bb      	ldr	r3, [r7, #24]
 80247da:	2b00      	cmp	r3, #0
 80247dc:	d001      	beq.n	80247e2 <lfs_dir_getslice+0xaa>
            return err;
 80247de:	69bb      	ldr	r3, [r7, #24]
 80247e0:	e08a      	b.n	80248f8 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80247e2:	693b      	ldr	r3, [r7, #16]
 80247e4:	4618      	mov	r0, r3
 80247e6:	f7ff f814 	bl	8023812 <lfs_frombe32>
 80247ea:	4602      	mov	r2, r0
 80247ec:	69fb      	ldr	r3, [r7, #28]
 80247ee:	4053      	eors	r3, r2
 80247f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80247f4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80247f6:	6878      	ldr	r0, [r7, #4]
 80247f8:	f7ff fc9a 	bl	8024130 <lfs_tag_id>
 80247fc:	4603      	mov	r3, r0
 80247fe:	2b00      	cmp	r3, #0
 8024800:	d02b      	beq.n	802485a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024802:	69f8      	ldr	r0, [r7, #28]
 8024804:	f7ff fc5a 	bl	80240bc <lfs_tag_type1>
 8024808:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 802480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802480e:	d124      	bne.n	802485a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8024810:	69f8      	ldr	r0, [r7, #28]
 8024812:	f7ff fc8d 	bl	8024130 <lfs_tag_id>
 8024816:	4603      	mov	r3, r0
 8024818:	461c      	mov	r4, r3
 802481a:	6a3b      	ldr	r3, [r7, #32]
 802481c:	683a      	ldr	r2, [r7, #0]
 802481e:	1ad3      	subs	r3, r2, r3
 8024820:	4618      	mov	r0, r3
 8024822:	f7ff fc85 	bl	8024130 <lfs_tag_id>
 8024826:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024828:	429c      	cmp	r4, r3
 802482a:	d816      	bhi.n	802485a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 802482c:	6a3b      	ldr	r3, [r7, #32]
 802482e:	683a      	ldr	r2, [r7, #0]
 8024830:	1ad2      	subs	r2, r2, r3
 8024832:	4b33      	ldr	r3, [pc, #204]	; (8024900 <lfs_dir_getslice+0x1c8>)
 8024834:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8024836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802483a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802483e:	69fa      	ldr	r2, [r7, #28]
 8024840:	429a      	cmp	r2, r3
 8024842:	d102      	bne.n	802484a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8024844:	f06f 0301 	mvn.w	r3, #1
 8024848:	e056      	b.n	80248f8 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 802484a:	69f8      	ldr	r0, [r7, #28]
 802484c:	f7ff fc63 	bl	8024116 <lfs_tag_splice>
 8024850:	4603      	mov	r3, r0
 8024852:	029a      	lsls	r2, r3, #10
 8024854:	6a3b      	ldr	r3, [r7, #32]
 8024856:	4413      	add	r3, r2
 8024858:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 802485a:	687a      	ldr	r2, [r7, #4]
 802485c:	69fb      	ldr	r3, [r7, #28]
 802485e:	401a      	ands	r2, r3
 8024860:	6a3b      	ldr	r3, [r7, #32]
 8024862:	6839      	ldr	r1, [r7, #0]
 8024864:	1ac9      	subs	r1, r1, r3
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	400b      	ands	r3, r1
 802486a:	429a      	cmp	r2, r3
 802486c:	d138      	bne.n	80248e0 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 802486e:	69f8      	ldr	r0, [r7, #28]
 8024870:	f7ff fc11 	bl	8024096 <lfs_tag_isdelete>
 8024874:	4603      	mov	r3, r0
 8024876:	2b00      	cmp	r3, #0
 8024878:	d002      	beq.n	8024880 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 802487a:	f06f 0301 	mvn.w	r3, #1
 802487e:	e03b      	b.n	80248f8 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8024880:	69f8      	ldr	r0, [r7, #28]
 8024882:	f7ff fc65 	bl	8024150 <lfs_tag_size>
 8024886:	4603      	mov	r3, r0
 8024888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802488a:	4618      	mov	r0, r3
 802488c:	f7fe ff3a 	bl	8023704 <lfs_min>
 8024890:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024892:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024894:	68bb      	ldr	r3, [r7, #8]
 8024896:	681b      	ldr	r3, [r3, #0]
 8024898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802489a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802489c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 802489e:	3204      	adds	r2, #4
 80248a0:	6979      	ldr	r1, [r7, #20]
 80248a2:	9103      	str	r1, [sp, #12]
 80248a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80248a6:	9102      	str	r1, [sp, #8]
 80248a8:	9201      	str	r2, [sp, #4]
 80248aa:	9300      	str	r3, [sp, #0]
 80248ac:	697b      	ldr	r3, [r7, #20]
 80248ae:	4602      	mov	r2, r0
 80248b0:	2100      	movs	r1, #0
 80248b2:	68f8      	ldr	r0, [r7, #12]
 80248b4:	f7ff f802 	bl	80238bc <lfs_bd_read>
 80248b8:	61b8      	str	r0, [r7, #24]
            if (err) {
 80248ba:	69bb      	ldr	r3, [r7, #24]
 80248bc:	2b00      	cmp	r3, #0
 80248be:	d001      	beq.n	80248c4 <lfs_dir_getslice+0x18c>
                return err;
 80248c0:	69bb      	ldr	r3, [r7, #24]
 80248c2:	e019      	b.n	80248f8 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80248c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80248c6:	697b      	ldr	r3, [r7, #20]
 80248c8:	18d0      	adds	r0, r2, r3
 80248ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80248cc:	697b      	ldr	r3, [r7, #20]
 80248ce:	1ad3      	subs	r3, r2, r3
 80248d0:	461a      	mov	r2, r3
 80248d2:	2100      	movs	r1, #0
 80248d4:	f009 f82a 	bl	802d92c <memset>

            return tag + gdiff;
 80248d8:	6a3a      	ldr	r2, [r7, #32]
 80248da:	69fb      	ldr	r3, [r7, #28]
 80248dc:	4413      	add	r3, r2
 80248de:	e00b      	b.n	80248f8 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80248e0:	693b      	ldr	r3, [r7, #16]
 80248e2:	4618      	mov	r0, r3
 80248e4:	f7ff fc41 	bl	802416a <lfs_tag_dsize>
 80248e8:	4603      	mov	r3, r0
 80248ea:	3304      	adds	r3, #4
 80248ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80248ee:	429a      	cmp	r2, r3
 80248f0:	f4bf af56 	bcs.w	80247a0 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 80248f4:	f06f 0301 	mvn.w	r3, #1
}
 80248f8:	4618      	mov	r0, r3
 80248fa:	372c      	adds	r7, #44	; 0x2c
 80248fc:	46bd      	mov	sp, r7
 80248fe:	bd90      	pop	{r4, r7, pc}
 8024900:	000ffc00 	.word	0x000ffc00

08024904 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8024904:	b580      	push	{r7, lr}
 8024906:	b088      	sub	sp, #32
 8024908:	af04      	add	r7, sp, #16
 802490a:	60f8      	str	r0, [r7, #12]
 802490c:	60b9      	str	r1, [r7, #8]
 802490e:	607a      	str	r2, [r7, #4]
 8024910:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8024912:	6838      	ldr	r0, [r7, #0]
 8024914:	f7ff fc1c 	bl	8024150 <lfs_tag_size>
 8024918:	4603      	mov	r3, r0
 802491a:	9302      	str	r3, [sp, #8]
 802491c:	69bb      	ldr	r3, [r7, #24]
 802491e:	9301      	str	r3, [sp, #4]
 8024920:	2300      	movs	r3, #0
 8024922:	9300      	str	r3, [sp, #0]
 8024924:	683b      	ldr	r3, [r7, #0]
 8024926:	687a      	ldr	r2, [r7, #4]
 8024928:	68b9      	ldr	r1, [r7, #8]
 802492a:	68f8      	ldr	r0, [r7, #12]
 802492c:	f7ff ff04 	bl	8024738 <lfs_dir_getslice>
 8024930:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8024932:	4618      	mov	r0, r3
 8024934:	3710      	adds	r7, #16
 8024936:	46bd      	mov	sp, r7
 8024938:	bd80      	pop	{r7, pc}

0802493a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 802493a:	b580      	push	{r7, lr}
 802493c:	b08c      	sub	sp, #48	; 0x30
 802493e:	af04      	add	r7, sp, #16
 8024940:	60f8      	str	r0, [r7, #12]
 8024942:	60b9      	str	r1, [r7, #8]
 8024944:	607a      	str	r2, [r7, #4]
 8024946:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8024948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802494a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 802494c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024950:	441a      	add	r2, r3
 8024952:	68fb      	ldr	r3, [r7, #12]
 8024954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024956:	69db      	ldr	r3, [r3, #28]
 8024958:	429a      	cmp	r2, r3
 802495a:	f240 80c0 	bls.w	8024ade <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 802495e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8024962:	e0c1      	b.n	8024ae8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8024964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024966:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	2b00      	cmp	r3, #0
 802496c:	d03f      	beq.n	80249ee <lfs_dir_getread+0xb4>
 802496e:	687b      	ldr	r3, [r7, #4]
 8024970:	681b      	ldr	r3, [r3, #0]
 8024972:	f113 0f02 	cmn.w	r3, #2
 8024976:	d13a      	bne.n	80249ee <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8024978:	687b      	ldr	r3, [r7, #4]
 802497a:	685a      	ldr	r2, [r3, #4]
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	689b      	ldr	r3, [r3, #8]
 8024980:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024984:	429a      	cmp	r2, r3
 8024986:	d232      	bcs.n	80249ee <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8024988:	687b      	ldr	r3, [r7, #4]
 802498a:	685b      	ldr	r3, [r3, #4]
 802498c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802498e:	429a      	cmp	r2, r3
 8024990:	d324      	bcc.n	80249dc <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024992:	687b      	ldr	r3, [r7, #4]
 8024994:	689a      	ldr	r2, [r3, #8]
 8024996:	687b      	ldr	r3, [r7, #4]
 8024998:	6859      	ldr	r1, [r3, #4]
 802499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802499c:	1acb      	subs	r3, r1, r3
 802499e:	4413      	add	r3, r2
 80249a0:	4619      	mov	r1, r3
 80249a2:	69b8      	ldr	r0, [r7, #24]
 80249a4:	f7fe feae 	bl	8023704 <lfs_min>
 80249a8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	68da      	ldr	r2, [r3, #12]
 80249ae:	687b      	ldr	r3, [r7, #4]
 80249b0:	685b      	ldr	r3, [r3, #4]
 80249b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80249b4:	1acb      	subs	r3, r1, r3
 80249b6:	4413      	add	r3, r2
 80249b8:	69ba      	ldr	r2, [r7, #24]
 80249ba:	4619      	mov	r1, r3
 80249bc:	69f8      	ldr	r0, [r7, #28]
 80249be:	f009 f98a 	bl	802dcd6 <memcpy>

                data += diff;
 80249c2:	69fa      	ldr	r2, [r7, #28]
 80249c4:	69bb      	ldr	r3, [r7, #24]
 80249c6:	4413      	add	r3, r2
 80249c8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80249ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80249cc:	69bb      	ldr	r3, [r7, #24]
 80249ce:	4413      	add	r3, r2
 80249d0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80249d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80249d4:	69bb      	ldr	r3, [r7, #24]
 80249d6:	1ad3      	subs	r3, r2, r3
 80249d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80249da:	e080      	b.n	8024ade <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80249dc:	687b      	ldr	r3, [r7, #4]
 80249de:	685a      	ldr	r2, [r3, #4]
 80249e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249e2:	1ad3      	subs	r3, r2, r3
 80249e4:	4619      	mov	r1, r3
 80249e6:	69b8      	ldr	r0, [r7, #24]
 80249e8:	f7fe fe8c 	bl	8023704 <lfs_min>
 80249ec:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80249ee:	683b      	ldr	r3, [r7, #0]
 80249f0:	681b      	ldr	r3, [r3, #0]
 80249f2:	f113 0f02 	cmn.w	r3, #2
 80249f6:	d13a      	bne.n	8024a6e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80249f8:	683b      	ldr	r3, [r7, #0]
 80249fa:	685a      	ldr	r2, [r3, #4]
 80249fc:	683b      	ldr	r3, [r7, #0]
 80249fe:	689b      	ldr	r3, [r3, #8]
 8024a00:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024a04:	429a      	cmp	r2, r3
 8024a06:	d232      	bcs.n	8024a6e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8024a08:	683b      	ldr	r3, [r7, #0]
 8024a0a:	685b      	ldr	r3, [r3, #4]
 8024a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024a0e:	429a      	cmp	r2, r3
 8024a10:	d324      	bcc.n	8024a5c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8024a12:	683b      	ldr	r3, [r7, #0]
 8024a14:	689a      	ldr	r2, [r3, #8]
 8024a16:	683b      	ldr	r3, [r7, #0]
 8024a18:	6859      	ldr	r1, [r3, #4]
 8024a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024a1c:	1acb      	subs	r3, r1, r3
 8024a1e:	4413      	add	r3, r2
 8024a20:	4619      	mov	r1, r3
 8024a22:	69b8      	ldr	r0, [r7, #24]
 8024a24:	f7fe fe6e 	bl	8023704 <lfs_min>
 8024a28:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8024a2a:	683b      	ldr	r3, [r7, #0]
 8024a2c:	68da      	ldr	r2, [r3, #12]
 8024a2e:	683b      	ldr	r3, [r7, #0]
 8024a30:	685b      	ldr	r3, [r3, #4]
 8024a32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024a34:	1acb      	subs	r3, r1, r3
 8024a36:	4413      	add	r3, r2
 8024a38:	69ba      	ldr	r2, [r7, #24]
 8024a3a:	4619      	mov	r1, r3
 8024a3c:	69f8      	ldr	r0, [r7, #28]
 8024a3e:	f009 f94a 	bl	802dcd6 <memcpy>

                data += diff;
 8024a42:	69fa      	ldr	r2, [r7, #28]
 8024a44:	69bb      	ldr	r3, [r7, #24]
 8024a46:	4413      	add	r3, r2
 8024a48:	61fb      	str	r3, [r7, #28]
                off += diff;
 8024a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024a4c:	69bb      	ldr	r3, [r7, #24]
 8024a4e:	4413      	add	r3, r2
 8024a50:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024a54:	69bb      	ldr	r3, [r7, #24]
 8024a56:	1ad3      	subs	r3, r2, r3
 8024a58:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8024a5a:	e040      	b.n	8024ade <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8024a5c:	683b      	ldr	r3, [r7, #0]
 8024a5e:	685a      	ldr	r2, [r3, #4]
 8024a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024a62:	1ad3      	subs	r3, r2, r3
 8024a64:	4619      	mov	r1, r3
 8024a66:	69b8      	ldr	r0, [r7, #24]
 8024a68:	f7fe fe4c 	bl	8023704 <lfs_min>
 8024a6c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8024a6e:	683b      	ldr	r3, [r7, #0]
 8024a70:	f06f 0201 	mvn.w	r2, #1
 8024a74:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8024a76:	68fb      	ldr	r3, [r7, #12]
 8024a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024a7a:	695b      	ldr	r3, [r3, #20]
 8024a7c:	4619      	mov	r1, r3
 8024a7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024a80:	f7fe fe50 	bl	8023724 <lfs_aligndown>
 8024a84:	4602      	mov	r2, r0
 8024a86:	683b      	ldr	r3, [r7, #0]
 8024a88:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a8e:	441a      	add	r2, r3
 8024a90:	68fb      	ldr	r3, [r7, #12]
 8024a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024a94:	695b      	ldr	r3, [r3, #20]
 8024a96:	4619      	mov	r1, r3
 8024a98:	4610      	mov	r0, r2
 8024a9a:	f7fe fe58 	bl	802374e <lfs_alignup>
 8024a9e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024aa0:	68fb      	ldr	r3, [r7, #12]
 8024aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024aa6:	4619      	mov	r1, r3
 8024aa8:	4610      	mov	r0, r2
 8024aaa:	f7fe fe2b 	bl	8023704 <lfs_min>
 8024aae:	4602      	mov	r2, r0
 8024ab0:	683b      	ldr	r3, [r7, #0]
 8024ab2:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024ab4:	683b      	ldr	r3, [r7, #0]
 8024ab6:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024ab8:	683a      	ldr	r2, [r7, #0]
 8024aba:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024abc:	6839      	ldr	r1, [r7, #0]
 8024abe:	6889      	ldr	r1, [r1, #8]
 8024ac0:	9102      	str	r1, [sp, #8]
 8024ac2:	9201      	str	r2, [sp, #4]
 8024ac4:	9300      	str	r3, [sp, #0]
 8024ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024aca:	68b9      	ldr	r1, [r7, #8]
 8024acc:	68f8      	ldr	r0, [r7, #12]
 8024ace:	f7ff fe33 	bl	8024738 <lfs_dir_getslice>
 8024ad2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8024ad4:	697b      	ldr	r3, [r7, #20]
 8024ad6:	2b00      	cmp	r3, #0
 8024ad8:	da01      	bge.n	8024ade <lfs_dir_getread+0x1a4>
            return err;
 8024ada:	697b      	ldr	r3, [r7, #20]
 8024adc:	e004      	b.n	8024ae8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8024ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	f47f af3f 	bne.w	8024964 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8024ae6:	2300      	movs	r3, #0
}
 8024ae8:	4618      	mov	r0, r3
 8024aea:	3720      	adds	r7, #32
 8024aec:	46bd      	mov	sp, r7
 8024aee:	bd80      	pop	{r7, pc}

08024af0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8024af0:	b590      	push	{r4, r7, lr}
 8024af2:	b087      	sub	sp, #28
 8024af4:	af00      	add	r7, sp, #0
 8024af6:	60f8      	str	r0, [r7, #12]
 8024af8:	60b9      	str	r1, [r7, #8]
 8024afa:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8024afc:	68fb      	ldr	r3, [r7, #12]
 8024afe:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024b00:	68bb      	ldr	r3, [r7, #8]
 8024b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8024b06:	2b00      	cmp	r3, #0
 8024b08:	d001      	beq.n	8024b0e <lfs_dir_traverse_filter+0x1e>
 8024b0a:	4b24      	ldr	r3, [pc, #144]	; (8024b9c <lfs_dir_traverse_filter+0xac>)
 8024b0c:	e000      	b.n	8024b10 <lfs_dir_traverse_filter+0x20>
 8024b0e:	4b24      	ldr	r3, [pc, #144]	; (8024ba0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024b10:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8024b12:	697b      	ldr	r3, [r7, #20]
 8024b14:	681a      	ldr	r2, [r3, #0]
 8024b16:	68bb      	ldr	r3, [r7, #8]
 8024b18:	405a      	eors	r2, r3
 8024b1a:	693b      	ldr	r3, [r7, #16]
 8024b1c:	4013      	ands	r3, r2
 8024b1e:	2b00      	cmp	r3, #0
 8024b20:	d014      	beq.n	8024b4c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8024b22:	697b      	ldr	r3, [r7, #20]
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	4618      	mov	r0, r3
 8024b28:	f7ff fab5 	bl	8024096 <lfs_tag_isdelete>
 8024b2c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8024b2e:	2b00      	cmp	r3, #0
 8024b30:	d10c      	bne.n	8024b4c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8024b32:	68bb      	ldr	r3, [r7, #8]
 8024b34:	4a19      	ldr	r2, [pc, #100]	; (8024b9c <lfs_dir_traverse_filter+0xac>)
 8024b36:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8024b38:	697b      	ldr	r3, [r7, #20]
 8024b3a:	6819      	ldr	r1, [r3, #0]
 8024b3c:	4b19      	ldr	r3, [pc, #100]	; (8024ba4 <lfs_dir_traverse_filter+0xb4>)
 8024b3e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8024b40:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8024b44:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8024b48:	429a      	cmp	r2, r3
 8024b4a:	d104      	bne.n	8024b56 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8024b4c:	697b      	ldr	r3, [r7, #20]
 8024b4e:	2200      	movs	r2, #0
 8024b50:	601a      	str	r2, [r3, #0]
        return true;
 8024b52:	2301      	movs	r3, #1
 8024b54:	e01e      	b.n	8024b94 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024b56:	68b8      	ldr	r0, [r7, #8]
 8024b58:	f7ff fab0 	bl	80240bc <lfs_tag_type1>
 8024b5c:	4603      	mov	r3, r0
 8024b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024b62:	d116      	bne.n	8024b92 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8024b64:	68b8      	ldr	r0, [r7, #8]
 8024b66:	f7ff fae3 	bl	8024130 <lfs_tag_id>
 8024b6a:	4603      	mov	r3, r0
 8024b6c:	461c      	mov	r4, r3
 8024b6e:	697b      	ldr	r3, [r7, #20]
 8024b70:	681b      	ldr	r3, [r3, #0]
 8024b72:	4618      	mov	r0, r3
 8024b74:	f7ff fadc 	bl	8024130 <lfs_tag_id>
 8024b78:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024b7a:	429c      	cmp	r4, r3
 8024b7c:	d809      	bhi.n	8024b92 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8024b7e:	68b8      	ldr	r0, [r7, #8]
 8024b80:	f7ff fac9 	bl	8024116 <lfs_tag_splice>
 8024b84:	4603      	mov	r3, r0
 8024b86:	029a      	lsls	r2, r3, #10
 8024b88:	697b      	ldr	r3, [r7, #20]
 8024b8a:	681b      	ldr	r3, [r3, #0]
 8024b8c:	441a      	add	r2, r3
 8024b8e:	697b      	ldr	r3, [r7, #20]
 8024b90:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024b92:	2300      	movs	r3, #0
}
 8024b94:	4618      	mov	r0, r3
 8024b96:	371c      	adds	r7, #28
 8024b98:	46bd      	mov	sp, r7
 8024b9a:	bd90      	pop	{r4, r7, pc}
 8024b9c:	7ffffc00 	.word	0x7ffffc00
 8024ba0:	700ffc00 	.word	0x700ffc00
 8024ba4:	000ffc00 	.word	0x000ffc00

08024ba8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024ba8:	b590      	push	{r4, r7, lr}
 8024baa:	b0c1      	sub	sp, #260	; 0x104
 8024bac:	af04      	add	r7, sp, #16
 8024bae:	60f8      	str	r0, [r7, #12]
 8024bb0:	60b9      	str	r1, [r7, #8]
 8024bb2:	607a      	str	r2, [r7, #4]
 8024bb4:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024bb6:	2300      	movs	r3, #0
 8024bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8024bbc:	6838      	ldr	r0, [r7, #0]
 8024bbe:	f7ff fad4 	bl	802416a <lfs_tag_dsize>
 8024bc2:	4602      	mov	r2, r0
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	441a      	add	r2, r3
 8024bc8:	68bb      	ldr	r3, [r7, #8]
 8024bca:	68db      	ldr	r3, [r3, #12]
 8024bcc:	429a      	cmp	r2, r3
 8024bce:	d237      	bcs.n	8024c40 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8024bd0:	6838      	ldr	r0, [r7, #0]
 8024bd2:	f7ff faca 	bl	802416a <lfs_tag_dsize>
 8024bd6:	4602      	mov	r2, r0
 8024bd8:	687b      	ldr	r3, [r7, #4]
 8024bda:	4413      	add	r3, r2
 8024bdc:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8024bde:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8024be0:	68bb      	ldr	r3, [r7, #8]
 8024be2:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8024be4:	2204      	movs	r2, #4
 8024be6:	9203      	str	r2, [sp, #12]
 8024be8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8024bec:	9202      	str	r2, [sp, #8]
 8024bee:	687a      	ldr	r2, [r7, #4]
 8024bf0:	9201      	str	r2, [sp, #4]
 8024bf2:	9300      	str	r3, [sp, #0]
 8024bf4:	2304      	movs	r3, #4
 8024bf6:	460a      	mov	r2, r1
 8024bf8:	2100      	movs	r1, #0
 8024bfa:	68f8      	ldr	r0, [r7, #12]
 8024bfc:	f7fe fe5e 	bl	80238bc <lfs_bd_read>
 8024c00:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8024c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024c08:	2b00      	cmp	r3, #0
 8024c0a:	d002      	beq.n	8024c12 <lfs_dir_traverse+0x6a>
                    return err;
 8024c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024c10:	e3a6      	b.n	8025360 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8024c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c14:	4618      	mov	r0, r3
 8024c16:	f7fe fdfc 	bl	8023812 <lfs_frombe32>
 8024c1a:	4602      	mov	r2, r0
 8024c1c:	683b      	ldr	r3, [r7, #0]
 8024c1e:	4053      	eors	r3, r2
 8024c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024c24:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8024c26:	68bb      	ldr	r3, [r7, #8]
 8024c28:	681b      	ldr	r3, [r3, #0]
 8024c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	3304      	adds	r3, #4
 8024c30:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8024c32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8024c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c3c:	603b      	str	r3, [r7, #0]
 8024c3e:	e01b      	b.n	8024c78 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8024c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	dd13      	ble.n	8024c70 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8024c48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024c4c:	681b      	ldr	r3, [r3, #0]
 8024c4e:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8024c50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024c54:	685b      	ldr	r3, [r3, #4]
 8024c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8024c5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024c5e:	3308      	adds	r3, #8
 8024c60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8024c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024c68:	3b01      	subs	r3, #1
 8024c6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8024c6e:	e003      	b.n	8024c78 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8024c70:	2300      	movs	r3, #0
 8024c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8024c76:	e2a2      	b.n	80251be <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8024c78:	4b7e      	ldr	r3, [pc, #504]	; (8024e74 <lfs_dir_traverse+0x2cc>)
 8024c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8024c7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8024c84:	405a      	eors	r2, r3
 8024c86:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8024c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8024c8e:	400b      	ands	r3, r1
 8024c90:	4013      	ands	r3, r2
 8024c92:	2b00      	cmp	r3, #0
 8024c94:	f040 8285 	bne.w	80251a2 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024c98:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024c9c:	f7ff fa48 	bl	8024130 <lfs_tag_id>
 8024ca0:	4603      	mov	r3, r0
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	f000 80f0 	beq.w	8024e88 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024ca8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024cac:	2b02      	cmp	r3, #2
 8024cae:	d906      	bls.n	8024cbe <lfs_dir_traverse+0x116>
 8024cb0:	4b71      	ldr	r3, [pc, #452]	; (8024e78 <lfs_dir_traverse+0x2d0>)
 8024cb2:	4a72      	ldr	r2, [pc, #456]	; (8024e7c <lfs_dir_traverse+0x2d4>)
 8024cb4:	f240 314e 	movw	r1, #846	; 0x34e
 8024cb8:	4871      	ldr	r0, [pc, #452]	; (8024e80 <lfs_dir_traverse+0x2d8>)
 8024cba:	f007 fc67 	bl	802c58c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8024cbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024cc0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cc4:	4613      	mov	r3, r2
 8024cc6:	011b      	lsls	r3, r3, #4
 8024cc8:	1a9b      	subs	r3, r3, r2
 8024cca:	009b      	lsls	r3, r3, #2
 8024ccc:	33f0      	adds	r3, #240	; 0xf0
 8024cce:	443b      	add	r3, r7
 8024cd0:	3b98      	subs	r3, #152	; 0x98
 8024cd2:	68ba      	ldr	r2, [r7, #8]
 8024cd4:	601a      	str	r2, [r3, #0]
 8024cd6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cda:	4613      	mov	r3, r2
 8024cdc:	011b      	lsls	r3, r3, #4
 8024cde:	1a9b      	subs	r3, r3, r2
 8024ce0:	009b      	lsls	r3, r3, #2
 8024ce2:	33f0      	adds	r3, #240	; 0xf0
 8024ce4:	443b      	add	r3, r7
 8024ce6:	3b94      	subs	r3, #148	; 0x94
 8024ce8:	687a      	ldr	r2, [r7, #4]
 8024cea:	601a      	str	r2, [r3, #0]
 8024cec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cf0:	4613      	mov	r3, r2
 8024cf2:	011b      	lsls	r3, r3, #4
 8024cf4:	1a9b      	subs	r3, r3, r2
 8024cf6:	009b      	lsls	r3, r3, #2
 8024cf8:	33f0      	adds	r3, #240	; 0xf0
 8024cfa:	443b      	add	r3, r7
 8024cfc:	3b90      	subs	r3, #144	; 0x90
 8024cfe:	683a      	ldr	r2, [r7, #0]
 8024d00:	601a      	str	r2, [r3, #0]
 8024d02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d06:	4613      	mov	r3, r2
 8024d08:	011b      	lsls	r3, r3, #4
 8024d0a:	1a9b      	subs	r3, r3, r2
 8024d0c:	009b      	lsls	r3, r3, #2
 8024d0e:	33f0      	adds	r3, #240	; 0xf0
 8024d10:	443b      	add	r3, r7
 8024d12:	3b8c      	subs	r3, #140	; 0x8c
 8024d14:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024d18:	601a      	str	r2, [r3, #0]
 8024d1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d1e:	4613      	mov	r3, r2
 8024d20:	011b      	lsls	r3, r3, #4
 8024d22:	1a9b      	subs	r3, r3, r2
 8024d24:	009b      	lsls	r3, r3, #2
 8024d26:	33f0      	adds	r3, #240	; 0xf0
 8024d28:	443b      	add	r3, r7
 8024d2a:	3b88      	subs	r3, #136	; 0x88
 8024d2c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024d30:	601a      	str	r2, [r3, #0]
 8024d32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d36:	4613      	mov	r3, r2
 8024d38:	011b      	lsls	r3, r3, #4
 8024d3a:	1a9b      	subs	r3, r3, r2
 8024d3c:	009b      	lsls	r3, r3, #2
 8024d3e:	33f0      	adds	r3, #240	; 0xf0
 8024d40:	443b      	add	r3, r7
 8024d42:	3b84      	subs	r3, #132	; 0x84
 8024d44:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024d48:	601a      	str	r2, [r3, #0]
 8024d4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d4e:	4613      	mov	r3, r2
 8024d50:	011b      	lsls	r3, r3, #4
 8024d52:	1a9b      	subs	r3, r3, r2
 8024d54:	009b      	lsls	r3, r3, #2
 8024d56:	33f0      	adds	r3, #240	; 0xf0
 8024d58:	443b      	add	r3, r7
 8024d5a:	3b80      	subs	r3, #128	; 0x80
 8024d5c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024d60:	601a      	str	r2, [r3, #0]
 8024d62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d66:	4613      	mov	r3, r2
 8024d68:	011b      	lsls	r3, r3, #4
 8024d6a:	1a9b      	subs	r3, r3, r2
 8024d6c:	009b      	lsls	r3, r3, #2
 8024d6e:	33f0      	adds	r3, #240	; 0xf0
 8024d70:	443b      	add	r3, r7
 8024d72:	3b7c      	subs	r3, #124	; 0x7c
 8024d74:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024d78:	801a      	strh	r2, [r3, #0]
 8024d7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d7e:	4613      	mov	r3, r2
 8024d80:	011b      	lsls	r3, r3, #4
 8024d82:	1a9b      	subs	r3, r3, r2
 8024d84:	009b      	lsls	r3, r3, #2
 8024d86:	33f0      	adds	r3, #240	; 0xf0
 8024d88:	443b      	add	r3, r7
 8024d8a:	3b7a      	subs	r3, #122	; 0x7a
 8024d8c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024d90:	801a      	strh	r2, [r3, #0]
 8024d92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d96:	4613      	mov	r3, r2
 8024d98:	011b      	lsls	r3, r3, #4
 8024d9a:	1a9b      	subs	r3, r3, r2
 8024d9c:	009b      	lsls	r3, r3, #2
 8024d9e:	33f0      	adds	r3, #240	; 0xf0
 8024da0:	443b      	add	r3, r7
 8024da2:	3b78      	subs	r3, #120	; 0x78
 8024da4:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024da8:	801a      	strh	r2, [r3, #0]
 8024daa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dae:	4613      	mov	r3, r2
 8024db0:	011b      	lsls	r3, r3, #4
 8024db2:	1a9b      	subs	r3, r3, r2
 8024db4:	009b      	lsls	r3, r3, #2
 8024db6:	33f0      	adds	r3, #240	; 0xf0
 8024db8:	443b      	add	r3, r7
 8024dba:	3b74      	subs	r3, #116	; 0x74
 8024dbc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024dc0:	601a      	str	r2, [r3, #0]
 8024dc2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dc6:	4613      	mov	r3, r2
 8024dc8:	011b      	lsls	r3, r3, #4
 8024dca:	1a9b      	subs	r3, r3, r2
 8024dcc:	009b      	lsls	r3, r3, #2
 8024dce:	33f0      	adds	r3, #240	; 0xf0
 8024dd0:	443b      	add	r3, r7
 8024dd2:	3b70      	subs	r3, #112	; 0x70
 8024dd4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024dd8:	601a      	str	r2, [r3, #0]
 8024dda:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dde:	4613      	mov	r3, r2
 8024de0:	011b      	lsls	r3, r3, #4
 8024de2:	1a9b      	subs	r3, r3, r2
 8024de4:	009b      	lsls	r3, r3, #2
 8024de6:	33f0      	adds	r3, #240	; 0xf0
 8024de8:	443b      	add	r3, r7
 8024dea:	3b6c      	subs	r3, #108	; 0x6c
 8024dec:	6019      	str	r1, [r3, #0]
 8024dee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024df2:	4613      	mov	r3, r2
 8024df4:	011b      	lsls	r3, r3, #4
 8024df6:	1a9b      	subs	r3, r3, r2
 8024df8:	009b      	lsls	r3, r3, #2
 8024dfa:	33f0      	adds	r3, #240	; 0xf0
 8024dfc:	443b      	add	r3, r7
 8024dfe:	3b68      	subs	r3, #104	; 0x68
 8024e00:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024e04:	601a      	str	r2, [r3, #0]
 8024e06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e0a:	4613      	mov	r3, r2
 8024e0c:	011b      	lsls	r3, r3, #4
 8024e0e:	1a9b      	subs	r3, r3, r2
 8024e10:	009b      	lsls	r3, r3, #2
 8024e12:	33f0      	adds	r3, #240	; 0xf0
 8024e14:	443b      	add	r3, r7
 8024e16:	3b68      	subs	r3, #104	; 0x68
 8024e18:	3304      	adds	r3, #4
 8024e1a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8024e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024e22:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8024e26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024e2a:	3301      	adds	r3, #1
 8024e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8024e30:	2300      	movs	r3, #0
 8024e32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8024e36:	2300      	movs	r3, #0
 8024e38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8024e3c:	2300      	movs	r3, #0
 8024e3e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8024e42:	2300      	movs	r3, #0
 8024e44:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8024e48:	2300      	movs	r3, #0
 8024e4a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8024e4e:	4b0d      	ldr	r3, [pc, #52]	; (8024e84 <lfs_dir_traverse+0x2dc>)
 8024e50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8024e54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024e58:	1e5a      	subs	r2, r3, #1
 8024e5a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8024e5e:	4613      	mov	r3, r2
 8024e60:	011b      	lsls	r3, r3, #4
 8024e62:	1a9b      	subs	r3, r3, r2
 8024e64:	009b      	lsls	r3, r3, #2
 8024e66:	3328      	adds	r3, #40	; 0x28
 8024e68:	440b      	add	r3, r1
 8024e6a:	3304      	adds	r3, #4
 8024e6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8024e70:	e19e      	b.n	80251b0 <lfs_dir_traverse+0x608>
 8024e72:	bf00      	nop
 8024e74:	7ff00000 	.word	0x7ff00000
 8024e78:	08033784 	.word	0x08033784
 8024e7c:	08034964 	.word	0x08034964
 8024e80:	0803366c 	.word	0x0803366c
 8024e84:	08024af1 	.word	0x08024af1
            }
        }

popped:
 8024e88:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8024e8a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024e8e:	f7ff f94f 	bl	8024130 <lfs_tag_id>
 8024e92:	4603      	mov	r3, r0
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	d015      	beq.n	8024ec4 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e9a:	4618      	mov	r0, r3
 8024e9c:	f7ff f948 	bl	8024130 <lfs_tag_id>
 8024ea0:	4603      	mov	r3, r0
 8024ea2:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8024ea4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8024ea8:	4293      	cmp	r3, r2
 8024eaa:	f200 817c 	bhi.w	80251a6 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024eb0:	4618      	mov	r0, r3
 8024eb2:	f7ff f93d 	bl	8024130 <lfs_tag_id>
 8024eb6:	4603      	mov	r3, r0
 8024eb8:	461a      	mov	r2, r3
 8024eba:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8024ebe:	4293      	cmp	r3, r2
 8024ec0:	f240 8171 	bls.w	80251a6 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8024ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024ec6:	4618      	mov	r0, r3
 8024ec8:	f7ff f908 	bl	80240dc <lfs_tag_type3>
 8024ecc:	4603      	mov	r3, r0
 8024ece:	2b00      	cmp	r3, #0
 8024ed0:	f43f ae74 	beq.w	8024bbc <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8024ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024ed6:	4618      	mov	r0, r3
 8024ed8:	f7ff f900 	bl	80240dc <lfs_tag_type3>
 8024edc:	4603      	mov	r3, r0
 8024ede:	461a      	mov	r2, r3
 8024ee0:	f240 1301 	movw	r3, #257	; 0x101
 8024ee4:	429a      	cmp	r2, r3
 8024ee6:	f040 80e0 	bne.w	80250aa <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8024eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024eee:	4ab1      	ldr	r2, [pc, #708]	; (80251b4 <lfs_dir_traverse+0x60c>)
 8024ef0:	4293      	cmp	r3, r2
 8024ef2:	f000 815a 	beq.w	80251aa <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8024ef6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024efa:	4613      	mov	r3, r2
 8024efc:	011b      	lsls	r3, r3, #4
 8024efe:	1a9b      	subs	r3, r3, r2
 8024f00:	009b      	lsls	r3, r3, #2
 8024f02:	33f0      	adds	r3, #240	; 0xf0
 8024f04:	443b      	add	r3, r7
 8024f06:	3b98      	subs	r3, #152	; 0x98
 8024f08:	4618      	mov	r0, r3
 8024f0a:	233c      	movs	r3, #60	; 0x3c
 8024f0c:	461a      	mov	r2, r3
 8024f0e:	2100      	movs	r1, #0
 8024f10:	f008 fd0c 	bl	802d92c <memset>
 8024f14:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f18:	4613      	mov	r3, r2
 8024f1a:	011b      	lsls	r3, r3, #4
 8024f1c:	1a9b      	subs	r3, r3, r2
 8024f1e:	009b      	lsls	r3, r3, #2
 8024f20:	33f0      	adds	r3, #240	; 0xf0
 8024f22:	443b      	add	r3, r7
 8024f24:	3b98      	subs	r3, #152	; 0x98
 8024f26:	68ba      	ldr	r2, [r7, #8]
 8024f28:	601a      	str	r2, [r3, #0]
 8024f2a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f2e:	4613      	mov	r3, r2
 8024f30:	011b      	lsls	r3, r3, #4
 8024f32:	1a9b      	subs	r3, r3, r2
 8024f34:	009b      	lsls	r3, r3, #2
 8024f36:	33f0      	adds	r3, #240	; 0xf0
 8024f38:	443b      	add	r3, r7
 8024f3a:	3b94      	subs	r3, #148	; 0x94
 8024f3c:	687a      	ldr	r2, [r7, #4]
 8024f3e:	601a      	str	r2, [r3, #0]
 8024f40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f44:	4613      	mov	r3, r2
 8024f46:	011b      	lsls	r3, r3, #4
 8024f48:	1a9b      	subs	r3, r3, r2
 8024f4a:	009b      	lsls	r3, r3, #2
 8024f4c:	33f0      	adds	r3, #240	; 0xf0
 8024f4e:	443b      	add	r3, r7
 8024f50:	3b90      	subs	r3, #144	; 0x90
 8024f52:	683a      	ldr	r2, [r7, #0]
 8024f54:	601a      	str	r2, [r3, #0]
 8024f56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f5a:	4613      	mov	r3, r2
 8024f5c:	011b      	lsls	r3, r3, #4
 8024f5e:	1a9b      	subs	r3, r3, r2
 8024f60:	009b      	lsls	r3, r3, #2
 8024f62:	33f0      	adds	r3, #240	; 0xf0
 8024f64:	443b      	add	r3, r7
 8024f66:	3b8c      	subs	r3, #140	; 0x8c
 8024f68:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024f6c:	601a      	str	r2, [r3, #0]
 8024f6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f72:	4613      	mov	r3, r2
 8024f74:	011b      	lsls	r3, r3, #4
 8024f76:	1a9b      	subs	r3, r3, r2
 8024f78:	009b      	lsls	r3, r3, #2
 8024f7a:	33f0      	adds	r3, #240	; 0xf0
 8024f7c:	443b      	add	r3, r7
 8024f7e:	3b88      	subs	r3, #136	; 0x88
 8024f80:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024f84:	601a      	str	r2, [r3, #0]
 8024f86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f8a:	4613      	mov	r3, r2
 8024f8c:	011b      	lsls	r3, r3, #4
 8024f8e:	1a9b      	subs	r3, r3, r2
 8024f90:	009b      	lsls	r3, r3, #2
 8024f92:	33f0      	adds	r3, #240	; 0xf0
 8024f94:	443b      	add	r3, r7
 8024f96:	3b84      	subs	r3, #132	; 0x84
 8024f98:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024f9c:	601a      	str	r2, [r3, #0]
 8024f9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024fa2:	4613      	mov	r3, r2
 8024fa4:	011b      	lsls	r3, r3, #4
 8024fa6:	1a9b      	subs	r3, r3, r2
 8024fa8:	009b      	lsls	r3, r3, #2
 8024faa:	33f0      	adds	r3, #240	; 0xf0
 8024fac:	443b      	add	r3, r7
 8024fae:	3b80      	subs	r3, #128	; 0x80
 8024fb0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024fb4:	601a      	str	r2, [r3, #0]
 8024fb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024fba:	4613      	mov	r3, r2
 8024fbc:	011b      	lsls	r3, r3, #4
 8024fbe:	1a9b      	subs	r3, r3, r2
 8024fc0:	009b      	lsls	r3, r3, #2
 8024fc2:	33f0      	adds	r3, #240	; 0xf0
 8024fc4:	443b      	add	r3, r7
 8024fc6:	3b7c      	subs	r3, #124	; 0x7c
 8024fc8:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024fcc:	801a      	strh	r2, [r3, #0]
 8024fce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024fd2:	4613      	mov	r3, r2
 8024fd4:	011b      	lsls	r3, r3, #4
 8024fd6:	1a9b      	subs	r3, r3, r2
 8024fd8:	009b      	lsls	r3, r3, #2
 8024fda:	33f0      	adds	r3, #240	; 0xf0
 8024fdc:	443b      	add	r3, r7
 8024fde:	3b7a      	subs	r3, #122	; 0x7a
 8024fe0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024fe4:	801a      	strh	r2, [r3, #0]
 8024fe6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024fea:	4613      	mov	r3, r2
 8024fec:	011b      	lsls	r3, r3, #4
 8024fee:	1a9b      	subs	r3, r3, r2
 8024ff0:	009b      	lsls	r3, r3, #2
 8024ff2:	33f0      	adds	r3, #240	; 0xf0
 8024ff4:	443b      	add	r3, r7
 8024ff6:	3b78      	subs	r3, #120	; 0x78
 8024ff8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024ffc:	801a      	strh	r2, [r3, #0]
 8024ffe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025002:	4613      	mov	r3, r2
 8025004:	011b      	lsls	r3, r3, #4
 8025006:	1a9b      	subs	r3, r3, r2
 8025008:	009b      	lsls	r3, r3, #2
 802500a:	33f0      	adds	r3, #240	; 0xf0
 802500c:	443b      	add	r3, r7
 802500e:	3b74      	subs	r3, #116	; 0x74
 8025010:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8025014:	601a      	str	r2, [r3, #0]
 8025016:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802501a:	4613      	mov	r3, r2
 802501c:	011b      	lsls	r3, r3, #4
 802501e:	1a9b      	subs	r3, r3, r2
 8025020:	009b      	lsls	r3, r3, #2
 8025022:	33f0      	adds	r3, #240	; 0xf0
 8025024:	443b      	add	r3, r7
 8025026:	3b70      	subs	r3, #112	; 0x70
 8025028:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 802502c:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 802502e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025032:	3301      	adds	r3, #1
 8025034:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8025038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802503a:	4618      	mov	r0, r3
 802503c:	f7ff f888 	bl	8024150 <lfs_tag_size>
 8025040:	4603      	mov	r3, r0
 8025042:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8025046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025048:	4618      	mov	r0, r3
 802504a:	f7ff f871 	bl	8024130 <lfs_tag_id>
 802504e:	4603      	mov	r3, r0
 8025050:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8025054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8025058:	60bb      	str	r3, [r7, #8]
            off = 0;
 802505a:	2300      	movs	r3, #0
 802505c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 802505e:	f04f 33ff 	mov.w	r3, #4294967295
 8025062:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8025064:	2300      	movs	r3, #0
 8025066:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 802506a:	2300      	movs	r3, #0
 802506c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8025070:	4b51      	ldr	r3, [pc, #324]	; (80251b8 <lfs_dir_traverse+0x610>)
 8025072:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8025076:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802507a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 802507e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8025082:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8025086:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 802508a:	3301      	adds	r3, #1
 802508c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8025090:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8025094:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8025098:	1ad3      	subs	r3, r2, r3
 802509a:	b29a      	uxth	r2, r3
 802509c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80250a0:	4413      	add	r3, r2
 80250a2:	b29b      	uxth	r3, r3
 80250a4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 80250a8:	e588      	b.n	8024bbc <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80250aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80250ac:	4618      	mov	r0, r3
 80250ae:	f7ff f815 	bl	80240dc <lfs_tag_type3>
 80250b2:	4603      	mov	r3, r0
 80250b4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80250b8:	d159      	bne.n	802516e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80250ba:	2300      	movs	r3, #0
 80250bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80250c0:	e04b      	b.n	802515a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 80250c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80250c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80250ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80250ce:	4613      	mov	r3, r2
 80250d0:	005b      	lsls	r3, r3, #1
 80250d2:	4413      	add	r3, r2
 80250d4:	009b      	lsls	r3, r3, #2
 80250d6:	461a      	mov	r2, r3
 80250d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80250dc:	4413      	add	r3, r2
 80250de:	781b      	ldrb	r3, [r3, #0]
 80250e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80250e4:	051c      	lsls	r4, r3, #20
 80250e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80250e8:	4618      	mov	r0, r3
 80250ea:	f7ff f821 	bl	8024130 <lfs_tag_id>
 80250ee:	4603      	mov	r3, r0
 80250f0:	461a      	mov	r2, r3
 80250f2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80250f6:	4413      	add	r3, r2
 80250f8:	029b      	lsls	r3, r3, #10
 80250fa:	ea44 0103 	orr.w	r1, r4, r3
 80250fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8025102:	4613      	mov	r3, r2
 8025104:	005b      	lsls	r3, r3, #1
 8025106:	4413      	add	r3, r2
 8025108:	009b      	lsls	r3, r3, #2
 802510a:	461a      	mov	r2, r3
 802510c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8025110:	4413      	add	r3, r2
 8025112:	689b      	ldr	r3, [r3, #8]
 8025114:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8025116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 802511a:	4613      	mov	r3, r2
 802511c:	005b      	lsls	r3, r3, #1
 802511e:	4413      	add	r3, r2
 8025120:	009b      	lsls	r3, r3, #2
 8025122:	461a      	mov	r2, r3
 8025124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8025128:	4413      	add	r3, r2
 802512a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 802512c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8025130:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8025134:	4798      	blx	r3
 8025136:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 802513a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802513e:	2b00      	cmp	r3, #0
 8025140:	da02      	bge.n	8025148 <lfs_dir_traverse+0x5a0>
                    return res;
 8025142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8025146:	e10b      	b.n	8025360 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8025148:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802514c:	2b00      	cmp	r3, #0
 802514e:	d12e      	bne.n	80251ae <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8025150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8025154:	3301      	adds	r3, #1
 8025156:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802515a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802515c:	4618      	mov	r0, r3
 802515e:	f7fe fff7 	bl	8024150 <lfs_tag_size>
 8025162:	4602      	mov	r2, r0
 8025164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8025168:	4293      	cmp	r3, r2
 802516a:	d3aa      	bcc.n	80250c2 <lfs_dir_traverse+0x51a>
 802516c:	e526      	b.n	8024bbc <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 802516e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8025172:	029a      	lsls	r2, r3, #10
 8025174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025176:	18d1      	adds	r1, r2, r3
 8025178:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802517c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8025180:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8025184:	4798      	blx	r3
 8025186:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 802518a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802518e:	2b00      	cmp	r3, #0
 8025190:	da02      	bge.n	8025198 <lfs_dir_traverse+0x5f0>
                return res;
 8025192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8025196:	e0e3      	b.n	8025360 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8025198:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802519c:	2b00      	cmp	r3, #0
 802519e:	d10d      	bne.n	80251bc <lfs_dir_traverse+0x614>
 80251a0:	e50c      	b.n	8024bbc <lfs_dir_traverse+0x14>
                continue;
 80251a2:	bf00      	nop
 80251a4:	e50a      	b.n	8024bbc <lfs_dir_traverse+0x14>
            continue;
 80251a6:	bf00      	nop
 80251a8:	e508      	b.n	8024bbc <lfs_dir_traverse+0x14>
                continue;
 80251aa:	bf00      	nop
 80251ac:	e506      	b.n	8024bbc <lfs_dir_traverse+0x14>
                    break;
 80251ae:	bf00      	nop
        {
 80251b0:	e504      	b.n	8024bbc <lfs_dir_traverse+0x14>
 80251b2:	bf00      	nop
 80251b4:	08024af1 	.word	0x08024af1
 80251b8:	600ffc00 	.word	0x600ffc00
                break;
 80251bc:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80251be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251c2:	2b00      	cmp	r3, #0
 80251c4:	f000 80ca 	beq.w	802535c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80251c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251cc:	1e5a      	subs	r2, r3, #1
 80251ce:	4613      	mov	r3, r2
 80251d0:	011b      	lsls	r3, r3, #4
 80251d2:	1a9b      	subs	r3, r3, r2
 80251d4:	009b      	lsls	r3, r3, #2
 80251d6:	33f0      	adds	r3, #240	; 0xf0
 80251d8:	443b      	add	r3, r7
 80251da:	3b98      	subs	r3, #152	; 0x98
 80251dc:	681b      	ldr	r3, [r3, #0]
 80251de:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80251e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251e4:	1e5a      	subs	r2, r3, #1
 80251e6:	4613      	mov	r3, r2
 80251e8:	011b      	lsls	r3, r3, #4
 80251ea:	1a9b      	subs	r3, r3, r2
 80251ec:	009b      	lsls	r3, r3, #2
 80251ee:	33f0      	adds	r3, #240	; 0xf0
 80251f0:	443b      	add	r3, r7
 80251f2:	3b94      	subs	r3, #148	; 0x94
 80251f4:	681b      	ldr	r3, [r3, #0]
 80251f6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80251f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251fc:	1e5a      	subs	r2, r3, #1
 80251fe:	4613      	mov	r3, r2
 8025200:	011b      	lsls	r3, r3, #4
 8025202:	1a9b      	subs	r3, r3, r2
 8025204:	009b      	lsls	r3, r3, #2
 8025206:	33f0      	adds	r3, #240	; 0xf0
 8025208:	443b      	add	r3, r7
 802520a:	3b90      	subs	r3, #144	; 0x90
 802520c:	681b      	ldr	r3, [r3, #0]
 802520e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8025210:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025214:	1e5a      	subs	r2, r3, #1
 8025216:	4613      	mov	r3, r2
 8025218:	011b      	lsls	r3, r3, #4
 802521a:	1a9b      	subs	r3, r3, r2
 802521c:	009b      	lsls	r3, r3, #2
 802521e:	33f0      	adds	r3, #240	; 0xf0
 8025220:	443b      	add	r3, r7
 8025222:	3b8c      	subs	r3, #140	; 0x8c
 8025224:	681b      	ldr	r3, [r3, #0]
 8025226:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 802522a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802522e:	1e5a      	subs	r2, r3, #1
 8025230:	4613      	mov	r3, r2
 8025232:	011b      	lsls	r3, r3, #4
 8025234:	1a9b      	subs	r3, r3, r2
 8025236:	009b      	lsls	r3, r3, #2
 8025238:	33f0      	adds	r3, #240	; 0xf0
 802523a:	443b      	add	r3, r7
 802523c:	3b88      	subs	r3, #136	; 0x88
 802523e:	681b      	ldr	r3, [r3, #0]
 8025240:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8025244:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025248:	1e5a      	subs	r2, r3, #1
 802524a:	4613      	mov	r3, r2
 802524c:	011b      	lsls	r3, r3, #4
 802524e:	1a9b      	subs	r3, r3, r2
 8025250:	009b      	lsls	r3, r3, #2
 8025252:	33f0      	adds	r3, #240	; 0xf0
 8025254:	443b      	add	r3, r7
 8025256:	3b84      	subs	r3, #132	; 0x84
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 802525e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025262:	1e5a      	subs	r2, r3, #1
 8025264:	4613      	mov	r3, r2
 8025266:	011b      	lsls	r3, r3, #4
 8025268:	1a9b      	subs	r3, r3, r2
 802526a:	009b      	lsls	r3, r3, #2
 802526c:	33f0      	adds	r3, #240	; 0xf0
 802526e:	443b      	add	r3, r7
 8025270:	3b80      	subs	r3, #128	; 0x80
 8025272:	681b      	ldr	r3, [r3, #0]
 8025274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8025278:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802527c:	1e5a      	subs	r2, r3, #1
 802527e:	4613      	mov	r3, r2
 8025280:	011b      	lsls	r3, r3, #4
 8025282:	1a9b      	subs	r3, r3, r2
 8025284:	009b      	lsls	r3, r3, #2
 8025286:	33f0      	adds	r3, #240	; 0xf0
 8025288:	443b      	add	r3, r7
 802528a:	3b7c      	subs	r3, #124	; 0x7c
 802528c:	881b      	ldrh	r3, [r3, #0]
 802528e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8025292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025296:	1e5a      	subs	r2, r3, #1
 8025298:	4613      	mov	r3, r2
 802529a:	011b      	lsls	r3, r3, #4
 802529c:	1a9b      	subs	r3, r3, r2
 802529e:	009b      	lsls	r3, r3, #2
 80252a0:	33f0      	adds	r3, #240	; 0xf0
 80252a2:	443b      	add	r3, r7
 80252a4:	3b7a      	subs	r3, #122	; 0x7a
 80252a6:	881b      	ldrh	r3, [r3, #0]
 80252a8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80252ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80252b0:	1e5a      	subs	r2, r3, #1
 80252b2:	4613      	mov	r3, r2
 80252b4:	011b      	lsls	r3, r3, #4
 80252b6:	1a9b      	subs	r3, r3, r2
 80252b8:	009b      	lsls	r3, r3, #2
 80252ba:	33f0      	adds	r3, #240	; 0xf0
 80252bc:	443b      	add	r3, r7
 80252be:	3b78      	subs	r3, #120	; 0x78
 80252c0:	881b      	ldrh	r3, [r3, #0]
 80252c2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80252c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80252ca:	1e5a      	subs	r2, r3, #1
 80252cc:	4613      	mov	r3, r2
 80252ce:	011b      	lsls	r3, r3, #4
 80252d0:	1a9b      	subs	r3, r3, r2
 80252d2:	009b      	lsls	r3, r3, #2
 80252d4:	33f0      	adds	r3, #240	; 0xf0
 80252d6:	443b      	add	r3, r7
 80252d8:	3b74      	subs	r3, #116	; 0x74
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80252e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80252e4:	1e5a      	subs	r2, r3, #1
 80252e6:	4613      	mov	r3, r2
 80252e8:	011b      	lsls	r3, r3, #4
 80252ea:	1a9b      	subs	r3, r3, r2
 80252ec:	009b      	lsls	r3, r3, #2
 80252ee:	33f0      	adds	r3, #240	; 0xf0
 80252f0:	443b      	add	r3, r7
 80252f2:	3b70      	subs	r3, #112	; 0x70
 80252f4:	681b      	ldr	r3, [r3, #0]
 80252f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80252fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80252fe:	1e5a      	subs	r2, r3, #1
 8025300:	4613      	mov	r3, r2
 8025302:	011b      	lsls	r3, r3, #4
 8025304:	1a9b      	subs	r3, r3, r2
 8025306:	009b      	lsls	r3, r3, #2
 8025308:	33f0      	adds	r3, #240	; 0xf0
 802530a:	443b      	add	r3, r7
 802530c:	3b6c      	subs	r3, #108	; 0x6c
 802530e:	681b      	ldr	r3, [r3, #0]
 8025310:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8025312:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025316:	1e5a      	subs	r2, r3, #1
 8025318:	4613      	mov	r3, r2
 802531a:	011b      	lsls	r3, r3, #4
 802531c:	1a9b      	subs	r3, r3, r2
 802531e:	009b      	lsls	r3, r3, #2
 8025320:	33f0      	adds	r3, #240	; 0xf0
 8025322:	443b      	add	r3, r7
 8025324:	3b68      	subs	r3, #104	; 0x68
 8025326:	681b      	ldr	r3, [r3, #0]
 8025328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 802532c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025330:	1e5a      	subs	r2, r3, #1
 8025332:	4613      	mov	r3, r2
 8025334:	011b      	lsls	r3, r3, #4
 8025336:	1a9b      	subs	r3, r3, r2
 8025338:	009b      	lsls	r3, r3, #2
 802533a:	33f0      	adds	r3, #240	; 0xf0
 802533c:	443b      	add	r3, r7
 802533e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8025342:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8025346:	3204      	adds	r2, #4
 8025348:	e892 0003 	ldmia.w	r2, {r0, r1}
 802534c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8025350:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025354:	3b01      	subs	r3, #1
 8025356:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 802535a:	e596      	b.n	8024e8a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 802535c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8025360:	4618      	mov	r0, r3
 8025362:	37f4      	adds	r7, #244	; 0xf4
 8025364:	46bd      	mov	sp, r7
 8025366:	bd90      	pop	{r4, r7, pc}

08025368 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8025368:	b590      	push	{r4, r7, lr}
 802536a:	b09f      	sub	sp, #124	; 0x7c
 802536c:	af04      	add	r7, sp, #16
 802536e:	60f8      	str	r0, [r7, #12]
 8025370:	60b9      	str	r1, [r7, #8]
 8025372:	607a      	str	r2, [r7, #4]
 8025374:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8025376:	f04f 33ff 	mov.w	r3, #4294967295
 802537a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 802537c:	687b      	ldr	r3, [r7, #4]
 802537e:	681a      	ldr	r2, [r3, #0]
 8025380:	68fb      	ldr	r3, [r7, #12]
 8025382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025384:	6a1b      	ldr	r3, [r3, #32]
 8025386:	429a      	cmp	r2, r3
 8025388:	d207      	bcs.n	802539a <lfs_dir_fetchmatch+0x32>
 802538a:	687b      	ldr	r3, [r7, #4]
 802538c:	3304      	adds	r3, #4
 802538e:	681a      	ldr	r2, [r3, #0]
 8025390:	68fb      	ldr	r3, [r7, #12]
 8025392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025394:	6a1b      	ldr	r3, [r3, #32]
 8025396:	429a      	cmp	r2, r3
 8025398:	d302      	bcc.n	80253a0 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 802539a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802539e:	e342      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80253a0:	2300      	movs	r3, #0
 80253a2:	633b      	str	r3, [r7, #48]	; 0x30
 80253a4:	2300      	movs	r3, #0
 80253a6:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 80253a8:	2300      	movs	r3, #0
 80253aa:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80253ac:	2300      	movs	r3, #0
 80253ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80253b0:	e052      	b.n	8025458 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 80253b2:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80253b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80253b6:	009b      	lsls	r3, r3, #2
 80253b8:	687a      	ldr	r2, [r7, #4]
 80253ba:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80253bc:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80253be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80253c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80253c4:	0092      	lsls	r2, r2, #2
 80253c6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80253c8:	2104      	movs	r1, #4
 80253ca:	9103      	str	r1, [sp, #12]
 80253cc:	9202      	str	r2, [sp, #8]
 80253ce:	2200      	movs	r2, #0
 80253d0:	9201      	str	r2, [sp, #4]
 80253d2:	9300      	str	r3, [sp, #0]
 80253d4:	2304      	movs	r3, #4
 80253d6:	4602      	mov	r2, r0
 80253d8:	2100      	movs	r1, #0
 80253da:	68f8      	ldr	r0, [r7, #12]
 80253dc:	f7fe fa6e 	bl	80238bc <lfs_bd_read>
 80253e0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80253e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80253e4:	009b      	lsls	r3, r3, #2
 80253e6:	3368      	adds	r3, #104	; 0x68
 80253e8:	443b      	add	r3, r7
 80253ea:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80253ee:	4618      	mov	r0, r3
 80253f0:	f7fe f9f8 	bl	80237e4 <lfs_fromle32>
 80253f4:	4602      	mov	r2, r0
 80253f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80253f8:	009b      	lsls	r3, r3, #2
 80253fa:	3368      	adds	r3, #104	; 0x68
 80253fc:	443b      	add	r3, r7
 80253fe:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8025402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025404:	2b00      	cmp	r3, #0
 8025406:	d005      	beq.n	8025414 <lfs_dir_fetchmatch+0xac>
 8025408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802540a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802540e:	d001      	beq.n	8025414 <lfs_dir_fetchmatch+0xac>
            return err;
 8025410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025412:	e308      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8025414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025416:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802541a:	d01a      	beq.n	8025452 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 802541c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802541e:	009b      	lsls	r3, r3, #2
 8025420:	3368      	adds	r3, #104	; 0x68
 8025422:	443b      	add	r3, r7
 8025424:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802542a:	3301      	adds	r3, #1
 802542c:	2b00      	cmp	r3, #0
 802542e:	f003 0301 	and.w	r3, r3, #1
 8025432:	bfb8      	it	lt
 8025434:	425b      	neglt	r3, r3
 8025436:	009b      	lsls	r3, r3, #2
 8025438:	3368      	adds	r3, #104	; 0x68
 802543a:	443b      	add	r3, r7
 802543c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8025440:	4619      	mov	r1, r3
 8025442:	4610      	mov	r0, r2
 8025444:	f7fe f9c0 	bl	80237c8 <lfs_scmp>
 8025448:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 802544a:	2b00      	cmp	r3, #0
 802544c:	dd01      	ble.n	8025452 <lfs_dir_fetchmatch+0xea>
            r = i;
 802544e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025450:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8025452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025454:	3301      	adds	r3, #1
 8025456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802545a:	2b01      	cmp	r3, #1
 802545c:	dda9      	ble.n	80253b2 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 802545e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025460:	2b00      	cmp	r3, #0
 8025462:	f003 0301 	and.w	r3, r3, #1
 8025466:	bfb8      	it	lt
 8025468:	425b      	neglt	r3, r3
 802546a:	009b      	lsls	r3, r3, #2
 802546c:	687a      	ldr	r2, [r7, #4]
 802546e:	4413      	add	r3, r2
 8025470:	681a      	ldr	r2, [r3, #0]
 8025472:	68bb      	ldr	r3, [r7, #8]
 8025474:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8025476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025478:	3301      	adds	r3, #1
 802547a:	2b00      	cmp	r3, #0
 802547c:	f003 0301 	and.w	r3, r3, #1
 8025480:	bfb8      	it	lt
 8025482:	425b      	neglt	r3, r3
 8025484:	009b      	lsls	r3, r3, #2
 8025486:	687a      	ldr	r2, [r7, #4]
 8025488:	4413      	add	r3, r2
 802548a:	681a      	ldr	r2, [r3, #0]
 802548c:	68bb      	ldr	r3, [r7, #8]
 802548e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8025490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025492:	2b00      	cmp	r3, #0
 8025494:	f003 0301 	and.w	r3, r3, #1
 8025498:	bfb8      	it	lt
 802549a:	425b      	neglt	r3, r3
 802549c:	009b      	lsls	r3, r3, #2
 802549e:	3368      	adds	r3, #104	; 0x68
 80254a0:	443b      	add	r3, r7
 80254a2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80254a6:	68bb      	ldr	r3, [r7, #8]
 80254a8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80254aa:	68bb      	ldr	r3, [r7, #8]
 80254ac:	2200      	movs	r2, #0
 80254ae:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80254b0:	2300      	movs	r3, #0
 80254b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80254b4:	e2a3      	b.n	80259fe <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 80254b6:	2300      	movs	r3, #0
 80254b8:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 80254ba:	f04f 33ff 	mov.w	r3, #4294967295
 80254be:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 80254c0:	2300      	movs	r3, #0
 80254c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80254c6:	4a96      	ldr	r2, [pc, #600]	; (8025720 <lfs_dir_fetchmatch+0x3b8>)
 80254c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80254cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80254d0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80254d4:	2300      	movs	r3, #0
 80254d6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 80254da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80254dc:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 80254de:	68bb      	ldr	r3, [r7, #8]
 80254e0:	689b      	ldr	r3, [r3, #8]
 80254e2:	4618      	mov	r0, r3
 80254e4:	f7fe f989 	bl	80237fa <lfs_tole32>
 80254e8:	4602      	mov	r2, r0
 80254ea:	68bb      	ldr	r3, [r7, #8]
 80254ec:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80254ee:	68bb      	ldr	r3, [r7, #8]
 80254f0:	3308      	adds	r3, #8
 80254f2:	2204      	movs	r2, #4
 80254f4:	4619      	mov	r1, r3
 80254f6:	f04f 30ff 	mov.w	r0, #4294967295
 80254fa:	f005 fbc9 	bl	802ac90 <lfs_crc>
 80254fe:	4603      	mov	r3, r0
 8025500:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8025502:	68bb      	ldr	r3, [r7, #8]
 8025504:	689b      	ldr	r3, [r3, #8]
 8025506:	4618      	mov	r0, r3
 8025508:	f7fe f96c 	bl	80237e4 <lfs_fromle32>
 802550c:	4602      	mov	r2, r0
 802550e:	68bb      	ldr	r3, [r7, #8]
 8025510:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8025512:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8025514:	f7fe fe29 	bl	802416a <lfs_tag_dsize>
 8025518:	4602      	mov	r2, r0
 802551a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802551c:	4413      	add	r3, r2
 802551e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8025520:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8025522:	68fb      	ldr	r3, [r7, #12]
 8025524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025526:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8025528:	68bb      	ldr	r3, [r7, #8]
 802552a:	681b      	ldr	r3, [r3, #0]
 802552c:	2204      	movs	r2, #4
 802552e:	9203      	str	r2, [sp, #12]
 8025530:	f107 0220 	add.w	r2, r7, #32
 8025534:	9202      	str	r2, [sp, #8]
 8025536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025538:	9201      	str	r2, [sp, #4]
 802553a:	9300      	str	r3, [sp, #0]
 802553c:	4603      	mov	r3, r0
 802553e:	460a      	mov	r2, r1
 8025540:	2100      	movs	r1, #0
 8025542:	68f8      	ldr	r0, [r7, #12]
 8025544:	f7fe f9ba 	bl	80238bc <lfs_bd_read>
 8025548:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 802554a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802554c:	2b00      	cmp	r3, #0
 802554e:	d009      	beq.n	8025564 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8025550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025552:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025556:	d103      	bne.n	8025560 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8025558:	68bb      	ldr	r3, [r7, #8]
 802555a:	2200      	movs	r2, #0
 802555c:	759a      	strb	r2, [r3, #22]
                    break;
 802555e:	e1d6      	b.n	802590e <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8025560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025562:	e260      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8025564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025566:	f107 0120 	add.w	r1, r7, #32
 802556a:	2204      	movs	r2, #4
 802556c:	4618      	mov	r0, r3
 802556e:	f005 fb8f 	bl	802ac90 <lfs_crc>
 8025572:	4603      	mov	r3, r0
 8025574:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8025576:	6a3b      	ldr	r3, [r7, #32]
 8025578:	4618      	mov	r0, r3
 802557a:	f7fe f94a 	bl	8023812 <lfs_frombe32>
 802557e:	4602      	mov	r2, r0
 8025580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025582:	4053      	eors	r3, r2
 8025584:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8025586:	6a3b      	ldr	r3, [r7, #32]
 8025588:	4618      	mov	r0, r3
 802558a:	f7fe fd76 	bl	802407a <lfs_tag_isvalid>
 802558e:	4603      	mov	r3, r0
 8025590:	f083 0301 	eor.w	r3, r3, #1
 8025594:	b2db      	uxtb	r3, r3
 8025596:	2b00      	cmp	r3, #0
 8025598:	d01b      	beq.n	80255d2 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802559a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802559c:	f7fe fd8e 	bl	80240bc <lfs_tag_type1>
 80255a0:	4603      	mov	r3, r0
 80255a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80255a6:	d10d      	bne.n	80255c4 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 80255a8:	68bb      	ldr	r3, [r7, #8]
 80255aa:	68db      	ldr	r3, [r3, #12]
 80255ac:	68fa      	ldr	r2, [r7, #12]
 80255ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80255b0:	6992      	ldr	r2, [r2, #24]
 80255b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80255b6:	fb01 f202 	mul.w	r2, r1, r2
 80255ba:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80255bc:	2b00      	cmp	r3, #0
 80255be:	d101      	bne.n	80255c4 <lfs_dir_fetchmatch+0x25c>
 80255c0:	2301      	movs	r3, #1
 80255c2:	e000      	b.n	80255c6 <lfs_dir_fetchmatch+0x25e>
 80255c4:	2300      	movs	r3, #0
 80255c6:	f003 0301 	and.w	r3, r3, #1
 80255ca:	b2da      	uxtb	r2, r3
 80255cc:	68bb      	ldr	r3, [r7, #8]
 80255ce:	759a      	strb	r2, [r3, #22]
                break;
 80255d0:	e19d      	b.n	802590e <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80255d2:	6a3b      	ldr	r3, [r7, #32]
 80255d4:	4618      	mov	r0, r3
 80255d6:	f7fe fdc8 	bl	802416a <lfs_tag_dsize>
 80255da:	4602      	mov	r2, r0
 80255dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80255de:	441a      	add	r2, r3
 80255e0:	68fb      	ldr	r3, [r7, #12]
 80255e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80255e4:	69db      	ldr	r3, [r3, #28]
 80255e6:	429a      	cmp	r2, r3
 80255e8:	d903      	bls.n	80255f2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 80255ea:	68bb      	ldr	r3, [r7, #8]
 80255ec:	2200      	movs	r2, #0
 80255ee:	759a      	strb	r2, [r3, #22]
                break;
 80255f0:	e18d      	b.n	802590e <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 80255f2:	6a3b      	ldr	r3, [r7, #32]
 80255f4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80255f6:	6a3b      	ldr	r3, [r7, #32]
 80255f8:	4618      	mov	r0, r3
 80255fa:	f7fe fd5f 	bl	80240bc <lfs_tag_type1>
 80255fe:	4603      	mov	r3, r0
 8025600:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025604:	d164      	bne.n	80256d0 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8025606:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025608:	68fb      	ldr	r3, [r7, #12]
 802560a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802560c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802560e:	68bb      	ldr	r3, [r7, #8]
 8025610:	681b      	ldr	r3, [r3, #0]
 8025612:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025614:	3204      	adds	r2, #4
 8025616:	2104      	movs	r1, #4
 8025618:	9103      	str	r1, [sp, #12]
 802561a:	f107 011c 	add.w	r1, r7, #28
 802561e:	9102      	str	r1, [sp, #8]
 8025620:	9201      	str	r2, [sp, #4]
 8025622:	9300      	str	r3, [sp, #0]
 8025624:	4623      	mov	r3, r4
 8025626:	4602      	mov	r2, r0
 8025628:	2100      	movs	r1, #0
 802562a:	68f8      	ldr	r0, [r7, #12]
 802562c:	f7fe f946 	bl	80238bc <lfs_bd_read>
 8025630:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8025632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025634:	2b00      	cmp	r3, #0
 8025636:	d009      	beq.n	802564c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 8025638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802563a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802563e:	d103      	bne.n	8025648 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8025640:	68bb      	ldr	r3, [r7, #8]
 8025642:	2200      	movs	r2, #0
 8025644:	759a      	strb	r2, [r3, #22]
                        break;
 8025646:	e162      	b.n	802590e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 802564a:	e1ec      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 802564c:	69fb      	ldr	r3, [r7, #28]
 802564e:	4618      	mov	r0, r3
 8025650:	f7fe f8c8 	bl	80237e4 <lfs_fromle32>
 8025654:	4603      	mov	r3, r0
 8025656:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8025658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802565a:	69fb      	ldr	r3, [r7, #28]
 802565c:	429a      	cmp	r2, r3
 802565e:	d003      	beq.n	8025668 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8025660:	68bb      	ldr	r3, [r7, #8]
 8025662:	2200      	movs	r2, #0
 8025664:	759a      	strb	r2, [r3, #22]
                    break;
 8025666:	e152      	b.n	802590e <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8025668:	6a3b      	ldr	r3, [r7, #32]
 802566a:	4618      	mov	r0, r3
 802566c:	f7fe fd46 	bl	80240fc <lfs_tag_chunk>
 8025670:	4603      	mov	r3, r0
 8025672:	07db      	lsls	r3, r3, #31
 8025674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025676:	4053      	eors	r3, r2
 8025678:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 802567a:	68fb      	ldr	r3, [r7, #12]
 802567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802567e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8025682:	2204      	movs	r2, #4
 8025684:	4618      	mov	r0, r3
 8025686:	f005 fb03 	bl	802ac90 <lfs_crc>
 802568a:	4602      	mov	r2, r0
 802568c:	68fb      	ldr	r3, [r7, #12]
 802568e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025692:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8025694:	6a3b      	ldr	r3, [r7, #32]
 8025696:	4618      	mov	r0, r3
 8025698:	f7fe fd67 	bl	802416a <lfs_tag_dsize>
 802569c:	4602      	mov	r2, r0
 802569e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80256a0:	441a      	add	r2, r3
 80256a2:	68bb      	ldr	r3, [r7, #8]
 80256a4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80256a6:	68bb      	ldr	r3, [r7, #8]
 80256a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80256aa:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80256ac:	68bb      	ldr	r3, [r7, #8]
 80256ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80256b2:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80256b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80256b6:	68bb      	ldr	r3, [r7, #8]
 80256b8:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80256ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80256bc:	68bb      	ldr	r3, [r7, #8]
 80256be:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80256c0:	68bb      	ldr	r3, [r7, #8]
 80256c2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80256c6:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 80256c8:	f04f 33ff 	mov.w	r3, #4294967295
 80256cc:	627b      	str	r3, [r7, #36]	; 0x24
 80256ce:	e720      	b.n	8025512 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80256d0:	2304      	movs	r3, #4
 80256d2:	647b      	str	r3, [r7, #68]	; 0x44
 80256d4:	e032      	b.n	802573c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 80256d6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80256d8:	68fb      	ldr	r3, [r7, #12]
 80256da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80256dc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80256de:	68bb      	ldr	r3, [r7, #8]
 80256e0:	681b      	ldr	r3, [r3, #0]
 80256e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80256e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80256e6:	440a      	add	r2, r1
 80256e8:	2101      	movs	r1, #1
 80256ea:	9103      	str	r1, [sp, #12]
 80256ec:	f107 011b 	add.w	r1, r7, #27
 80256f0:	9102      	str	r1, [sp, #8]
 80256f2:	9201      	str	r2, [sp, #4]
 80256f4:	9300      	str	r3, [sp, #0]
 80256f6:	4623      	mov	r3, r4
 80256f8:	4602      	mov	r2, r0
 80256fa:	2100      	movs	r1, #0
 80256fc:	68f8      	ldr	r0, [r7, #12]
 80256fe:	f7fe f8dd 	bl	80238bc <lfs_bd_read>
 8025702:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8025704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025706:	2b00      	cmp	r3, #0
 8025708:	d00c      	beq.n	8025724 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 802570a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802570c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025710:	d103      	bne.n	802571a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8025712:	68bb      	ldr	r3, [r7, #8]
 8025714:	2200      	movs	r2, #0
 8025716:	759a      	strb	r2, [r3, #22]
 8025718:	e018      	b.n	802574c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 802571a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 802571c:	e183      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
 802571e:	bf00      	nop
 8025720:	080337c4 	.word	0x080337c4
                }

                crc = lfs_crc(crc, &dat, 1);
 8025724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025726:	f107 011b 	add.w	r1, r7, #27
 802572a:	2201      	movs	r2, #1
 802572c:	4618      	mov	r0, r3
 802572e:	f005 faaf 	bl	802ac90 <lfs_crc>
 8025732:	4603      	mov	r3, r0
 8025734:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025738:	3301      	adds	r3, #1
 802573a:	647b      	str	r3, [r7, #68]	; 0x44
 802573c:	6a3b      	ldr	r3, [r7, #32]
 802573e:	4618      	mov	r0, r3
 8025740:	f7fe fd13 	bl	802416a <lfs_tag_dsize>
 8025744:	4602      	mov	r2, r0
 8025746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025748:	4293      	cmp	r3, r2
 802574a:	d3c4      	bcc.n	80256d6 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 802574c:	6a3b      	ldr	r3, [r7, #32]
 802574e:	4618      	mov	r0, r3
 8025750:	f7fe fcb4 	bl	80240bc <lfs_tag_type1>
 8025754:	4603      	mov	r3, r0
 8025756:	2b00      	cmp	r3, #0
 8025758:	d113      	bne.n	8025782 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 802575a:	6a3b      	ldr	r3, [r7, #32]
 802575c:	4618      	mov	r0, r3
 802575e:	f7fe fce7 	bl	8024130 <lfs_tag_id>
 8025762:	4603      	mov	r3, r0
 8025764:	461a      	mov	r2, r3
 8025766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802576a:	4293      	cmp	r3, r2
 802576c:	f200 8083 	bhi.w	8025876 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8025770:	6a3b      	ldr	r3, [r7, #32]
 8025772:	4618      	mov	r0, r3
 8025774:	f7fe fcdc 	bl	8024130 <lfs_tag_id>
 8025778:	4603      	mov	r3, r0
 802577a:	3301      	adds	r3, #1
 802577c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8025780:	e079      	b.n	8025876 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8025782:	6a3b      	ldr	r3, [r7, #32]
 8025784:	4618      	mov	r0, r3
 8025786:	f7fe fc99 	bl	80240bc <lfs_tag_type1>
 802578a:	4603      	mov	r3, r0
 802578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025790:	d134      	bne.n	80257fc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025792:	6a3b      	ldr	r3, [r7, #32]
 8025794:	4618      	mov	r0, r3
 8025796:	f7fe fcbe 	bl	8024116 <lfs_tag_splice>
 802579a:	4603      	mov	r3, r0
 802579c:	b29a      	uxth	r2, r3
 802579e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80257a2:	4413      	add	r3, r2
 80257a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80257a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80257aa:	4ba1      	ldr	r3, [pc, #644]	; (8025a30 <lfs_dir_fetchmatch+0x6c8>)
 80257ac:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80257ae:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80257b2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80257b6:	6a3a      	ldr	r2, [r7, #32]
 80257b8:	4293      	cmp	r3, r2
 80257ba:	d104      	bne.n	80257c6 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 80257bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80257be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80257c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80257c4:	e057      	b.n	8025876 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 80257c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80257c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80257cc:	d053      	beq.n	8025876 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80257ce:	6a3b      	ldr	r3, [r7, #32]
 80257d0:	4618      	mov	r0, r3
 80257d2:	f7fe fcad 	bl	8024130 <lfs_tag_id>
 80257d6:	4603      	mov	r3, r0
 80257d8:	461c      	mov	r4, r3
 80257da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80257dc:	4618      	mov	r0, r3
 80257de:	f7fe fca7 	bl	8024130 <lfs_tag_id>
 80257e2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80257e4:	429c      	cmp	r4, r3
 80257e6:	d846      	bhi.n	8025876 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80257e8:	6a3b      	ldr	r3, [r7, #32]
 80257ea:	4618      	mov	r0, r3
 80257ec:	f7fe fc93 	bl	8024116 <lfs_tag_splice>
 80257f0:	4603      	mov	r3, r0
 80257f2:	029a      	lsls	r2, r3, #10
 80257f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80257f6:	4413      	add	r3, r2
 80257f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80257fa:	e03c      	b.n	8025876 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80257fc:	6a3b      	ldr	r3, [r7, #32]
 80257fe:	4618      	mov	r0, r3
 8025800:	f7fe fc5c 	bl	80240bc <lfs_tag_type1>
 8025804:	4603      	mov	r3, r0
 8025806:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802580a:	d134      	bne.n	8025876 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 802580c:	6a3b      	ldr	r3, [r7, #32]
 802580e:	4618      	mov	r0, r3
 8025810:	f7fe fc74 	bl	80240fc <lfs_tag_chunk>
 8025814:	4603      	mov	r3, r0
 8025816:	f003 0301 	and.w	r3, r3, #1
 802581a:	2b00      	cmp	r3, #0
 802581c:	bf14      	ite	ne
 802581e:	2301      	movne	r3, #1
 8025820:	2300      	moveq	r3, #0
 8025822:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8025826:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025828:	68fb      	ldr	r3, [r7, #12]
 802582a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802582c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802582e:	68bb      	ldr	r3, [r7, #8]
 8025830:	681b      	ldr	r3, [r3, #0]
 8025832:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025834:	3204      	adds	r2, #4
 8025836:	2108      	movs	r1, #8
 8025838:	9103      	str	r1, [sp, #12]
 802583a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802583e:	9102      	str	r1, [sp, #8]
 8025840:	9201      	str	r2, [sp, #4]
 8025842:	9300      	str	r3, [sp, #0]
 8025844:	4623      	mov	r3, r4
 8025846:	4602      	mov	r2, r0
 8025848:	2100      	movs	r1, #0
 802584a:	68f8      	ldr	r0, [r7, #12]
 802584c:	f7fe f836 	bl	80238bc <lfs_bd_read>
 8025850:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8025852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025854:	2b00      	cmp	r3, #0
 8025856:	d009      	beq.n	802586c <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8025858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802585a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802585e:	d103      	bne.n	8025868 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8025860:	68bb      	ldr	r3, [r7, #8]
 8025862:	2200      	movs	r2, #0
 8025864:	759a      	strb	r2, [r3, #22]
                        break;
 8025866:	e052      	b.n	802590e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802586a:	e0dc      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 802586c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025870:	4618      	mov	r0, r3
 8025872:	f7fe fbce 	bl	8024012 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8025876:	6a3a      	ldr	r2, [r7, #32]
 8025878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802587a:	405a      	eors	r2, r3
 802587c:	683b      	ldr	r3, [r7, #0]
 802587e:	4013      	ands	r3, r2
 8025880:	2b00      	cmp	r3, #0
 8025882:	f47f ae46 	bne.w	8025512 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025886:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8025888:	68bb      	ldr	r3, [r7, #8]
 802588a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 802588c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 802588e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025890:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025892:	617b      	str	r3, [r7, #20]
 8025894:	f107 0210 	add.w	r2, r7, #16
 8025898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802589c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80258a0:	4798      	blx	r3
 80258a2:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 80258a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80258a6:	2b00      	cmp	r3, #0
 80258a8:	da09      	bge.n	80258be <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 80258aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80258ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80258b0:	d103      	bne.n	80258ba <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 80258b2:	68bb      	ldr	r3, [r7, #8]
 80258b4:	2200      	movs	r2, #0
 80258b6:	759a      	strb	r2, [r3, #22]
 80258b8:	e029      	b.n	802590e <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 80258ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 80258bc:	e0b3      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 80258be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80258c0:	2b00      	cmp	r3, #0
 80258c2:	d102      	bne.n	80258ca <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 80258c4:	6a3b      	ldr	r3, [r7, #32]
 80258c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80258c8:	e623      	b.n	8025512 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80258ca:	6a3a      	ldr	r2, [r7, #32]
 80258cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80258ce:	405a      	eors	r2, r3
 80258d0:	4b58      	ldr	r3, [pc, #352]	; (8025a34 <lfs_dir_fetchmatch+0x6cc>)
 80258d2:	4013      	ands	r3, r2
 80258d4:	2b00      	cmp	r3, #0
 80258d6:	d103      	bne.n	80258e0 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80258d8:	f04f 33ff 	mov.w	r3, #4294967295
 80258dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80258de:	e618      	b.n	8025512 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 80258e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80258e2:	2b02      	cmp	r3, #2
 80258e4:	f47f ae15 	bne.w	8025512 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80258e8:	6a3b      	ldr	r3, [r7, #32]
 80258ea:	4618      	mov	r0, r3
 80258ec:	f7fe fc20 	bl	8024130 <lfs_tag_id>
 80258f0:	4603      	mov	r3, r0
 80258f2:	461c      	mov	r4, r3
 80258f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80258f6:	4618      	mov	r0, r3
 80258f8:	f7fe fc1a 	bl	8024130 <lfs_tag_id>
 80258fc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 80258fe:	429c      	cmp	r4, r3
 8025900:	f63f ae07 	bhi.w	8025512 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8025904:	6a3b      	ldr	r3, [r7, #32]
 8025906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802590a:	64bb      	str	r3, [r7, #72]	; 0x48
 802590c:	e601      	b.n	8025512 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 802590e:	68bb      	ldr	r3, [r7, #8]
 8025910:	68db      	ldr	r3, [r3, #12]
 8025912:	2b00      	cmp	r3, #0
 8025914:	d100      	bne.n	8025918 <lfs_dir_fetchmatch+0x5b0>
 8025916:	e05d      	b.n	80259d4 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8025918:	68fb      	ldr	r3, [r7, #12]
 802591a:	333c      	adds	r3, #60	; 0x3c
 802591c:	68ba      	ldr	r2, [r7, #8]
 802591e:	4611      	mov	r1, r2
 8025920:	4618      	mov	r0, r3
 8025922:	f7fe fcad 	bl	8024280 <lfs_gstate_hasmovehere>
 8025926:	4603      	mov	r3, r0
 8025928:	2b00      	cmp	r3, #0
 802592a:	d028      	beq.n	802597e <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 802592c:	68fb      	ldr	r3, [r7, #12]
 802592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025930:	4618      	mov	r0, r3
 8025932:	f7fe fbfd 	bl	8024130 <lfs_tag_id>
 8025936:	4603      	mov	r3, r0
 8025938:	461c      	mov	r4, r3
 802593a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802593c:	4618      	mov	r0, r3
 802593e:	f7fe fbf7 	bl	8024130 <lfs_tag_id>
 8025942:	4603      	mov	r3, r0
 8025944:	429c      	cmp	r4, r3
 8025946:	d104      	bne.n	8025952 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8025948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802594a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802594e:	667b      	str	r3, [r7, #100]	; 0x64
 8025950:	e015      	b.n	802597e <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8025952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025958:	d011      	beq.n	802597e <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 802595a:	68fb      	ldr	r3, [r7, #12]
 802595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802595e:	4618      	mov	r0, r3
 8025960:	f7fe fbe6 	bl	8024130 <lfs_tag_id>
 8025964:	4603      	mov	r3, r0
 8025966:	461c      	mov	r4, r3
 8025968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802596a:	4618      	mov	r0, r3
 802596c:	f7fe fbe0 	bl	8024130 <lfs_tag_id>
 8025970:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8025972:	429c      	cmp	r4, r3
 8025974:	d203      	bcs.n	802597e <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8025976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025978:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802597c:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 802597e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025980:	2b00      	cmp	r3, #0
 8025982:	d00f      	beq.n	80259a4 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8025984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025986:	4618      	mov	r0, r3
 8025988:	f7fe fbd2 	bl	8024130 <lfs_tag_id>
 802598c:	4603      	mov	r3, r0
 802598e:	461a      	mov	r2, r3
 8025990:	68bb      	ldr	r3, [r7, #8]
 8025992:	8a9b      	ldrh	r3, [r3, #20]
 8025994:	4619      	mov	r1, r3
 8025996:	4610      	mov	r0, r2
 8025998:	f7fd feb4 	bl	8023704 <lfs_min>
 802599c:	4603      	mov	r3, r0
 802599e:	b29a      	uxth	r2, r3
 80259a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80259a2:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80259a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80259a6:	4618      	mov	r0, r3
 80259a8:	f7fe fb67 	bl	802407a <lfs_tag_isvalid>
 80259ac:	4603      	mov	r3, r0
 80259ae:	2b00      	cmp	r3, #0
 80259b0:	d001      	beq.n	80259b6 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 80259b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80259b4:	e037      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80259b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80259b8:	4618      	mov	r0, r3
 80259ba:	f7fe fbb9 	bl	8024130 <lfs_tag_id>
 80259be:	4603      	mov	r3, r0
 80259c0:	461a      	mov	r2, r3
 80259c2:	68bb      	ldr	r3, [r7, #8]
 80259c4:	8a9b      	ldrh	r3, [r3, #20]
 80259c6:	429a      	cmp	r2, r3
 80259c8:	d202      	bcs.n	80259d0 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 80259ca:	f06f 0301 	mvn.w	r3, #1
 80259ce:	e02a      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 80259d0:	2300      	movs	r3, #0
 80259d2:	e028      	b.n	8025a26 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80259d4:	68bb      	ldr	r3, [r7, #8]
 80259d6:	4618      	mov	r0, r3
 80259d8:	f7fe fa94 	bl	8023f04 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 80259dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80259de:	3301      	adds	r3, #1
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	f003 0301 	and.w	r3, r3, #1
 80259e6:	bfb8      	it	lt
 80259e8:	425b      	neglt	r3, r3
 80259ea:	009b      	lsls	r3, r3, #2
 80259ec:	3368      	adds	r3, #104	; 0x68
 80259ee:	443b      	add	r3, r7
 80259f0:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80259f4:	68bb      	ldr	r3, [r7, #8]
 80259f6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80259f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80259fa:	3301      	adds	r3, #1
 80259fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80259fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025a00:	2b01      	cmp	r3, #1
 8025a02:	f77f ad58 	ble.w	80254b6 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8025a06:	68bb      	ldr	r3, [r7, #8]
 8025a08:	681a      	ldr	r2, [r3, #0]
 8025a0a:	68bb      	ldr	r3, [r7, #8]
 8025a0c:	685b      	ldr	r3, [r3, #4]
 8025a0e:	490a      	ldr	r1, [pc, #40]	; (8025a38 <lfs_dir_fetchmatch+0x6d0>)
 8025a10:	9101      	str	r1, [sp, #4]
 8025a12:	9300      	str	r3, [sp, #0]
 8025a14:	4613      	mov	r3, r2
 8025a16:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8025a1a:	4908      	ldr	r1, [pc, #32]	; (8025a3c <lfs_dir_fetchmatch+0x6d4>)
 8025a1c:	4808      	ldr	r0, [pc, #32]	; (8025a40 <lfs_dir_fetchmatch+0x6d8>)
 8025a1e:	f007 fdef 	bl	802d600 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8025a22:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8025a26:	4618      	mov	r0, r3
 8025a28:	376c      	adds	r7, #108	; 0x6c
 8025a2a:	46bd      	mov	sp, r7
 8025a2c:	bd90      	pop	{r4, r7, pc}
 8025a2e:	bf00      	nop
 8025a30:	000ffc00 	.word	0x000ffc00
 8025a34:	7ffffc00 	.word	0x7ffffc00
 8025a38:	08033780 	.word	0x08033780
 8025a3c:	0803366c 	.word	0x0803366c
 8025a40:	0803378c 	.word	0x0803378c

08025a44 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8025a44:	b580      	push	{r7, lr}
 8025a46:	b088      	sub	sp, #32
 8025a48:	af04      	add	r7, sp, #16
 8025a4a:	60f8      	str	r0, [r7, #12]
 8025a4c:	60b9      	str	r1, [r7, #8]
 8025a4e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8025a50:	2300      	movs	r3, #0
 8025a52:	9303      	str	r3, [sp, #12]
 8025a54:	2300      	movs	r3, #0
 8025a56:	9302      	str	r3, [sp, #8]
 8025a58:	2300      	movs	r3, #0
 8025a5a:	9301      	str	r3, [sp, #4]
 8025a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8025a60:	9300      	str	r3, [sp, #0]
 8025a62:	f04f 33ff 	mov.w	r3, #4294967295
 8025a66:	687a      	ldr	r2, [r7, #4]
 8025a68:	68b9      	ldr	r1, [r7, #8]
 8025a6a:	68f8      	ldr	r0, [r7, #12]
 8025a6c:	f7ff fc7c 	bl	8025368 <lfs_dir_fetchmatch>
 8025a70:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8025a72:	4618      	mov	r0, r3
 8025a74:	3710      	adds	r7, #16
 8025a76:	46bd      	mov	sp, r7
 8025a78:	bd80      	pop	{r7, pc}
	...

08025a7c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8025a7c:	b580      	push	{r7, lr}
 8025a7e:	b08a      	sub	sp, #40	; 0x28
 8025a80:	af02      	add	r7, sp, #8
 8025a82:	60f8      	str	r0, [r7, #12]
 8025a84:	60b9      	str	r1, [r7, #8]
 8025a86:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8025a88:	f107 0310 	add.w	r3, r7, #16
 8025a8c:	9300      	str	r3, [sp, #0]
 8025a8e:	4b12      	ldr	r3, [pc, #72]	; (8025ad8 <lfs_dir_getgstate+0x5c>)
 8025a90:	4a12      	ldr	r2, [pc, #72]	; (8025adc <lfs_dir_getgstate+0x60>)
 8025a92:	68b9      	ldr	r1, [r7, #8]
 8025a94:	68f8      	ldr	r0, [r7, #12]
 8025a96:	f7fe ff35 	bl	8024904 <lfs_dir_get>
 8025a9a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8025a9c:	69fb      	ldr	r3, [r7, #28]
 8025a9e:	2b00      	cmp	r3, #0
 8025aa0:	da05      	bge.n	8025aae <lfs_dir_getgstate+0x32>
 8025aa2:	69fb      	ldr	r3, [r7, #28]
 8025aa4:	f113 0f02 	cmn.w	r3, #2
 8025aa8:	d001      	beq.n	8025aae <lfs_dir_getgstate+0x32>
        return res;
 8025aaa:	69fb      	ldr	r3, [r7, #28]
 8025aac:	e00f      	b.n	8025ace <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8025aae:	69fb      	ldr	r3, [r7, #28]
 8025ab0:	f113 0f02 	cmn.w	r3, #2
 8025ab4:	d00a      	beq.n	8025acc <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025ab6:	f107 0310 	add.w	r3, r7, #16
 8025aba:	4618      	mov	r0, r3
 8025abc:	f7fe fc00 	bl	80242c0 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025ac0:	f107 0310 	add.w	r3, r7, #16
 8025ac4:	4619      	mov	r1, r3
 8025ac6:	6878      	ldr	r0, [r7, #4]
 8025ac8:	f7fe fb63 	bl	8024192 <lfs_gstate_xor>
    }

    return 0;
 8025acc:	2300      	movs	r3, #0
}
 8025ace:	4618      	mov	r0, r3
 8025ad0:	3720      	adds	r7, #32
 8025ad2:	46bd      	mov	sp, r7
 8025ad4:	bd80      	pop	{r7, pc}
 8025ad6:	bf00      	nop
 8025ad8:	7ff0000c 	.word	0x7ff0000c
 8025adc:	7ff00000 	.word	0x7ff00000

08025ae0 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8025ae0:	b580      	push	{r7, lr}
 8025ae2:	b08a      	sub	sp, #40	; 0x28
 8025ae4:	af02      	add	r7, sp, #8
 8025ae6:	60f8      	str	r0, [r7, #12]
 8025ae8:	60b9      	str	r1, [r7, #8]
 8025aea:	603b      	str	r3, [r7, #0]
 8025aec:	4613      	mov	r3, r2
 8025aee:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8025af0:	88fb      	ldrh	r3, [r7, #6]
 8025af2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025af6:	4293      	cmp	r3, r2
 8025af8:	d10b      	bne.n	8025b12 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8025afa:	683b      	ldr	r3, [r7, #0]
 8025afc:	3308      	adds	r3, #8
 8025afe:	4932      	ldr	r1, [pc, #200]	; (8025bc8 <lfs_dir_getinfo+0xe8>)
 8025b00:	461a      	mov	r2, r3
 8025b02:	460b      	mov	r3, r1
 8025b04:	881b      	ldrh	r3, [r3, #0]
 8025b06:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8025b08:	683b      	ldr	r3, [r7, #0]
 8025b0a:	2202      	movs	r2, #2
 8025b0c:	701a      	strb	r2, [r3, #0]
        return 0;
 8025b0e:	2300      	movs	r3, #0
 8025b10:	e055      	b.n	8025bbe <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025b12:	88fb      	ldrh	r3, [r7, #6]
 8025b14:	029a      	lsls	r2, r3, #10
 8025b16:	68fb      	ldr	r3, [r7, #12]
 8025b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025b1a:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025b1c:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025b1e:	683b      	ldr	r3, [r7, #0]
 8025b20:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025b22:	9300      	str	r3, [sp, #0]
 8025b24:	4613      	mov	r3, r2
 8025b26:	4a29      	ldr	r2, [pc, #164]	; (8025bcc <lfs_dir_getinfo+0xec>)
 8025b28:	68b9      	ldr	r1, [r7, #8]
 8025b2a:	68f8      	ldr	r0, [r7, #12]
 8025b2c:	f7fe feea 	bl	8024904 <lfs_dir_get>
 8025b30:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025b32:	69fb      	ldr	r3, [r7, #28]
 8025b34:	2b00      	cmp	r3, #0
 8025b36:	da01      	bge.n	8025b3c <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8025b38:	69fb      	ldr	r3, [r7, #28]
 8025b3a:	e040      	b.n	8025bbe <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8025b3c:	69fb      	ldr	r3, [r7, #28]
 8025b3e:	4618      	mov	r0, r3
 8025b40:	f7fe facc 	bl	80240dc <lfs_tag_type3>
 8025b44:	4603      	mov	r3, r0
 8025b46:	b2da      	uxtb	r2, r3
 8025b48:	683b      	ldr	r3, [r7, #0]
 8025b4a:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8025b4c:	88fb      	ldrh	r3, [r7, #6]
 8025b4e:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025b54:	f043 0308 	orr.w	r3, r3, #8
 8025b58:	f107 0214 	add.w	r2, r7, #20
 8025b5c:	9200      	str	r2, [sp, #0]
 8025b5e:	4a1c      	ldr	r2, [pc, #112]	; (8025bd0 <lfs_dir_getinfo+0xf0>)
 8025b60:	68b9      	ldr	r1, [r7, #8]
 8025b62:	68f8      	ldr	r0, [r7, #12]
 8025b64:	f7fe fece 	bl	8024904 <lfs_dir_get>
 8025b68:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025b6a:	69fb      	ldr	r3, [r7, #28]
 8025b6c:	2b00      	cmp	r3, #0
 8025b6e:	da01      	bge.n	8025b74 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8025b70:	69fb      	ldr	r3, [r7, #28]
 8025b72:	e024      	b.n	8025bbe <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8025b74:	f107 0314 	add.w	r3, r7, #20
 8025b78:	4618      	mov	r0, r3
 8025b7a:	f7fe fbe1 	bl	8024340 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8025b7e:	69fb      	ldr	r3, [r7, #28]
 8025b80:	4618      	mov	r0, r3
 8025b82:	f7fe faab 	bl	80240dc <lfs_tag_type3>
 8025b86:	4603      	mov	r3, r0
 8025b88:	461a      	mov	r2, r3
 8025b8a:	f240 2302 	movw	r3, #514	; 0x202
 8025b8e:	429a      	cmp	r2, r3
 8025b90:	d103      	bne.n	8025b9a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025b92:	69ba      	ldr	r2, [r7, #24]
 8025b94:	683b      	ldr	r3, [r7, #0]
 8025b96:	605a      	str	r2, [r3, #4]
 8025b98:	e010      	b.n	8025bbc <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8025b9a:	69fb      	ldr	r3, [r7, #28]
 8025b9c:	4618      	mov	r0, r3
 8025b9e:	f7fe fa9d 	bl	80240dc <lfs_tag_type3>
 8025ba2:	4603      	mov	r3, r0
 8025ba4:	461a      	mov	r2, r3
 8025ba6:	f240 2301 	movw	r3, #513	; 0x201
 8025baa:	429a      	cmp	r2, r3
 8025bac:	d106      	bne.n	8025bbc <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8025bae:	69fb      	ldr	r3, [r7, #28]
 8025bb0:	4618      	mov	r0, r3
 8025bb2:	f7fe facd 	bl	8024150 <lfs_tag_size>
 8025bb6:	4602      	mov	r2, r0
 8025bb8:	683b      	ldr	r3, [r7, #0]
 8025bba:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8025bbc:	2300      	movs	r3, #0
}
 8025bbe:	4618      	mov	r0, r3
 8025bc0:	3720      	adds	r7, #32
 8025bc2:	46bd      	mov	sp, r7
 8025bc4:	bd80      	pop	{r7, pc}
 8025bc6:	bf00      	nop
 8025bc8:	080337cc 	.word	0x080337cc
 8025bcc:	780ffc00 	.word	0x780ffc00
 8025bd0:	700ffc00 	.word	0x700ffc00

08025bd4 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8025bd4:	b590      	push	{r4, r7, lr}
 8025bd6:	b08f      	sub	sp, #60	; 0x3c
 8025bd8:	af04      	add	r7, sp, #16
 8025bda:	60f8      	str	r0, [r7, #12]
 8025bdc:	60b9      	str	r1, [r7, #8]
 8025bde:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8025be0:	68fb      	ldr	r3, [r7, #12]
 8025be2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8025be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025be6:	681b      	ldr	r3, [r3, #0]
 8025be8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8025bea:	687b      	ldr	r3, [r7, #4]
 8025bec:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8025bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bf0:	689c      	ldr	r4, [r3, #8]
 8025bf2:	68b8      	ldr	r0, [r7, #8]
 8025bf4:	f7fe faac 	bl	8024150 <lfs_tag_size>
 8025bf8:	4603      	mov	r3, r0
 8025bfa:	4619      	mov	r1, r3
 8025bfc:	4620      	mov	r0, r4
 8025bfe:	f7fd fd81 	bl	8023704 <lfs_min>
 8025c02:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8025c04:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8025c06:	69fb      	ldr	r3, [r7, #28]
 8025c08:	681b      	ldr	r3, [r3, #0]
 8025c0a:	69fa      	ldr	r2, [r7, #28]
 8025c0c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8025c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025c10:	6849      	ldr	r1, [r1, #4]
 8025c12:	69b8      	ldr	r0, [r7, #24]
 8025c14:	9003      	str	r0, [sp, #12]
 8025c16:	9102      	str	r1, [sp, #8]
 8025c18:	9201      	str	r2, [sp, #4]
 8025c1a:	9300      	str	r3, [sp, #0]
 8025c1c:	69bb      	ldr	r3, [r7, #24]
 8025c1e:	4622      	mov	r2, r4
 8025c20:	2100      	movs	r1, #0
 8025c22:	6a38      	ldr	r0, [r7, #32]
 8025c24:	f7fd ff8e 	bl	8023b44 <lfs_bd_cmp>
 8025c28:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8025c2a:	697b      	ldr	r3, [r7, #20]
 8025c2c:	2b00      	cmp	r3, #0
 8025c2e:	d001      	beq.n	8025c34 <lfs_dir_find_match+0x60>
        return res;
 8025c30:	697b      	ldr	r3, [r7, #20]
 8025c32:	e014      	b.n	8025c5e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8025c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c36:	689c      	ldr	r4, [r3, #8]
 8025c38:	68b8      	ldr	r0, [r7, #8]
 8025c3a:	f7fe fa89 	bl	8024150 <lfs_tag_size>
 8025c3e:	4603      	mov	r3, r0
 8025c40:	429c      	cmp	r4, r3
 8025c42:	d00b      	beq.n	8025c5c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8025c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c46:	689c      	ldr	r4, [r3, #8]
 8025c48:	68b8      	ldr	r0, [r7, #8]
 8025c4a:	f7fe fa81 	bl	8024150 <lfs_tag_size>
 8025c4e:	4603      	mov	r3, r0
 8025c50:	429c      	cmp	r4, r3
 8025c52:	d201      	bcs.n	8025c58 <lfs_dir_find_match+0x84>
 8025c54:	2301      	movs	r3, #1
 8025c56:	e002      	b.n	8025c5e <lfs_dir_find_match+0x8a>
 8025c58:	2302      	movs	r3, #2
 8025c5a:	e000      	b.n	8025c5e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8025c5c:	2300      	movs	r3, #0
}
 8025c5e:	4618      	mov	r0, r3
 8025c60:	372c      	adds	r7, #44	; 0x2c
 8025c62:	46bd      	mov	sp, r7
 8025c64:	bd90      	pop	{r4, r7, pc}
	...

08025c68 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8025c68:	b590      	push	{r4, r7, lr}
 8025c6a:	b093      	sub	sp, #76	; 0x4c
 8025c6c:	af04      	add	r7, sp, #16
 8025c6e:	60f8      	str	r0, [r7, #12]
 8025c70:	60b9      	str	r1, [r7, #8]
 8025c72:	607a      	str	r2, [r7, #4]
 8025c74:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8025c76:	687b      	ldr	r3, [r7, #4]
 8025c78:	681b      	ldr	r3, [r3, #0]
 8025c7a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8025c7c:	683b      	ldr	r3, [r7, #0]
 8025c7e:	2b00      	cmp	r3, #0
 8025c80:	d003      	beq.n	8025c8a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025c82:	683b      	ldr	r3, [r7, #0]
 8025c84:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025c88:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8025c8a:	4b6e      	ldr	r3, [pc, #440]	; (8025e44 <lfs_dir_find+0x1dc>)
 8025c8c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8025c8e:	68fb      	ldr	r3, [r7, #12]
 8025c90:	6a1a      	ldr	r2, [r3, #32]
 8025c92:	68bb      	ldr	r3, [r7, #8]
 8025c94:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025c96:	68fb      	ldr	r3, [r7, #12]
 8025c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025c9a:	68bb      	ldr	r3, [r7, #8]
 8025c9c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8025c9e:	496a      	ldr	r1, [pc, #424]	; (8025e48 <lfs_dir_find+0x1e0>)
 8025ca0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025ca2:	f007 feb0 	bl	802da06 <strspn>
 8025ca6:	4602      	mov	r2, r0
 8025ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025caa:	4413      	add	r3, r2
 8025cac:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8025cae:	4966      	ldr	r1, [pc, #408]	; (8025e48 <lfs_dir_find+0x1e0>)
 8025cb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025cb2:	f007 fe5f 	bl	802d974 <strcspn>
 8025cb6:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cba:	2b01      	cmp	r3, #1
 8025cbc:	d105      	bne.n	8025cca <lfs_dir_find+0x62>
 8025cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025cc0:	781a      	ldrb	r2, [r3, #0]
 8025cc2:	4b62      	ldr	r3, [pc, #392]	; (8025e4c <lfs_dir_find+0x1e4>)
 8025cc4:	781b      	ldrb	r3, [r3, #0]
 8025cc6:	429a      	cmp	r2, r3
 8025cc8:	d00a      	beq.n	8025ce0 <lfs_dir_find+0x78>
 8025cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ccc:	2b02      	cmp	r3, #2
 8025cce:	d10c      	bne.n	8025cea <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025cd0:	2202      	movs	r2, #2
 8025cd2:	495f      	ldr	r1, [pc, #380]	; (8025e50 <lfs_dir_find+0x1e8>)
 8025cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025cd6:	f007 fdff 	bl	802d8d8 <memcmp>
 8025cda:	4603      	mov	r3, r0
 8025cdc:	2b00      	cmp	r3, #0
 8025cde:	d104      	bne.n	8025cea <lfs_dir_find+0x82>
            name += namelen;
 8025ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ce4:	4413      	add	r3, r2
 8025ce6:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8025ce8:	e7d9      	b.n	8025c9e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8025cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cee:	4413      	add	r3, r2
 8025cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025cf2:	2301      	movs	r3, #1
 8025cf4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025cf6:	4954      	ldr	r1, [pc, #336]	; (8025e48 <lfs_dir_find+0x1e0>)
 8025cf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025cfa:	f007 fe84 	bl	802da06 <strspn>
 8025cfe:	4602      	mov	r2, r0
 8025d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d02:	4413      	add	r3, r2
 8025d04:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8025d06:	4950      	ldr	r1, [pc, #320]	; (8025e48 <lfs_dir_find+0x1e0>)
 8025d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025d0a:	f007 fe33 	bl	802d974 <strcspn>
 8025d0e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025d10:	6a3b      	ldr	r3, [r7, #32]
 8025d12:	2b00      	cmp	r3, #0
 8025d14:	d01d      	beq.n	8025d52 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025d16:	6a3b      	ldr	r3, [r7, #32]
 8025d18:	2b02      	cmp	r3, #2
 8025d1a:	d112      	bne.n	8025d42 <lfs_dir_find+0xda>
 8025d1c:	2202      	movs	r2, #2
 8025d1e:	494c      	ldr	r1, [pc, #304]	; (8025e50 <lfs_dir_find+0x1e8>)
 8025d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025d22:	f007 fdd9 	bl	802d8d8 <memcmp>
 8025d26:	4603      	mov	r3, r0
 8025d28:	2b00      	cmp	r3, #0
 8025d2a:	d10a      	bne.n	8025d42 <lfs_dir_find+0xda>
                depth -= 1;
 8025d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d2e:	3b01      	subs	r3, #1
 8025d30:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8025d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	d107      	bne.n	8025d48 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8025d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025d3a:	6a3b      	ldr	r3, [r7, #32]
 8025d3c:	4413      	add	r3, r2
 8025d3e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8025d40:	e7ad      	b.n	8025c9e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8025d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d44:	3301      	adds	r3, #1
 8025d46:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8025d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025d4a:	6a3b      	ldr	r3, [r7, #32]
 8025d4c:	4413      	add	r3, r2
 8025d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8025d50:	e7d1      	b.n	8025cf6 <lfs_dir_find+0x8e>
                break;
 8025d52:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8025d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025d56:	781b      	ldrb	r3, [r3, #0]
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	d101      	bne.n	8025d60 <lfs_dir_find+0xf8>
            return tag;
 8025d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d5e:	e06c      	b.n	8025e3a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8025d60:	687b      	ldr	r3, [r7, #4]
 8025d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025d64:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8025d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d68:	4618      	mov	r0, r3
 8025d6a:	f7fe f9b7 	bl	80240dc <lfs_tag_type3>
 8025d6e:	4603      	mov	r3, r0
 8025d70:	2b02      	cmp	r3, #2
 8025d72:	d002      	beq.n	8025d7a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8025d74:	f06f 0313 	mvn.w	r3, #19
 8025d78:	e05f      	b.n	8025e3a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8025d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d7c:	4618      	mov	r0, r3
 8025d7e:	f7fe f9d7 	bl	8024130 <lfs_tag_id>
 8025d82:	4603      	mov	r3, r0
 8025d84:	461a      	mov	r2, r3
 8025d86:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8025d8a:	429a      	cmp	r2, r3
 8025d8c:	d01c      	beq.n	8025dc8 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d90:	4618      	mov	r0, r3
 8025d92:	f7fe f9cd 	bl	8024130 <lfs_tag_id>
 8025d96:	4603      	mov	r3, r0
 8025d98:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025d9e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025da2:	68ba      	ldr	r2, [r7, #8]
 8025da4:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025da6:	9200      	str	r2, [sp, #0]
 8025da8:	4a2a      	ldr	r2, [pc, #168]	; (8025e54 <lfs_dir_find+0x1ec>)
 8025daa:	68b9      	ldr	r1, [r7, #8]
 8025dac:	68f8      	ldr	r0, [r7, #12]
 8025dae:	f7fe fda9 	bl	8024904 <lfs_dir_get>
 8025db2:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8025db4:	69fb      	ldr	r3, [r7, #28]
 8025db6:	2b00      	cmp	r3, #0
 8025db8:	da01      	bge.n	8025dbe <lfs_dir_find+0x156>
                return res;
 8025dba:	69fb      	ldr	r3, [r7, #28]
 8025dbc:	e03d      	b.n	8025e3a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8025dbe:	68bb      	ldr	r3, [r7, #8]
 8025dc0:	3318      	adds	r3, #24
 8025dc2:	4618      	mov	r0, r3
 8025dc4:	f7fe f925 	bl	8024012 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025dc8:	68bb      	ldr	r3, [r7, #8]
 8025dca:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8025dce:	212f      	movs	r1, #47	; 0x2f
 8025dd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025dd2:	f007 fdc2 	bl	802d95a <strchr>
 8025dd6:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025dd8:	2b00      	cmp	r3, #0
 8025dda:	d101      	bne.n	8025de0 <lfs_dir_find+0x178>
 8025ddc:	683b      	ldr	r3, [r7, #0]
 8025dde:	e000      	b.n	8025de2 <lfs_dir_find+0x17a>
 8025de0:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8025de2:	68fa      	ldr	r2, [r7, #12]
 8025de4:	613a      	str	r2, [r7, #16]
 8025de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025de8:	617a      	str	r2, [r7, #20]
 8025dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025dec:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025dee:	f107 0210 	add.w	r2, r7, #16
 8025df2:	9203      	str	r2, [sp, #12]
 8025df4:	4a18      	ldr	r2, [pc, #96]	; (8025e58 <lfs_dir_find+0x1f0>)
 8025df6:	9202      	str	r2, [sp, #8]
 8025df8:	9301      	str	r3, [sp, #4]
 8025dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dfc:	9300      	str	r3, [sp, #0]
 8025dfe:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8025e02:	4622      	mov	r2, r4
 8025e04:	68b9      	ldr	r1, [r7, #8]
 8025e06:	68f8      	ldr	r0, [r7, #12]
 8025e08:	f7ff faae 	bl	8025368 <lfs_dir_fetchmatch>
 8025e0c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8025e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e10:	2b00      	cmp	r3, #0
 8025e12:	da01      	bge.n	8025e18 <lfs_dir_find+0x1b0>
                return tag;
 8025e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e16:	e010      	b.n	8025e3a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8025e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e1a:	2b00      	cmp	r3, #0
 8025e1c:	d004      	beq.n	8025e28 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8025e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e22:	4413      	add	r3, r2
 8025e24:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8025e26:	e73a      	b.n	8025c9e <lfs_dir_find+0x36>
            if (!dir->split) {
 8025e28:	68bb      	ldr	r3, [r7, #8]
 8025e2a:	7ddb      	ldrb	r3, [r3, #23]
 8025e2c:	f083 0301 	eor.w	r3, r3, #1
 8025e30:	b2db      	uxtb	r3, r3
 8025e32:	2b00      	cmp	r3, #0
 8025e34:	d0c8      	beq.n	8025dc8 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8025e36:	f06f 0301 	mvn.w	r3, #1
    }
}
 8025e3a:	4618      	mov	r0, r3
 8025e3c:	373c      	adds	r7, #60	; 0x3c
 8025e3e:	46bd      	mov	sp, r7
 8025e40:	bd90      	pop	{r4, r7, pc}
 8025e42:	bf00      	nop
 8025e44:	002ffc00 	.word	0x002ffc00
 8025e48:	080337cc 	.word	0x080337cc
 8025e4c:	080337d0 	.word	0x080337d0
 8025e50:	080337d4 	.word	0x080337d4
 8025e54:	700ffc00 	.word	0x700ffc00
 8025e58:	08025bd5 	.word	0x08025bd5

08025e5c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8025e5c:	b590      	push	{r4, r7, lr}
 8025e5e:	b08b      	sub	sp, #44	; 0x2c
 8025e60:	af04      	add	r7, sp, #16
 8025e62:	60f8      	str	r0, [r7, #12]
 8025e64:	60b9      	str	r1, [r7, #8]
 8025e66:	607a      	str	r2, [r7, #4]
 8025e68:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8025e6a:	68fb      	ldr	r3, [r7, #12]
 8025e6c:	f103 0010 	add.w	r0, r3, #16
 8025e70:	68fc      	ldr	r4, [r7, #12]
 8025e72:	68bb      	ldr	r3, [r7, #8]
 8025e74:	681b      	ldr	r3, [r3, #0]
 8025e76:	68ba      	ldr	r2, [r7, #8]
 8025e78:	6852      	ldr	r2, [r2, #4]
 8025e7a:	6839      	ldr	r1, [r7, #0]
 8025e7c:	9103      	str	r1, [sp, #12]
 8025e7e:	6879      	ldr	r1, [r7, #4]
 8025e80:	9102      	str	r1, [sp, #8]
 8025e82:	9201      	str	r2, [sp, #4]
 8025e84:	9300      	str	r3, [sp, #0]
 8025e86:	2300      	movs	r3, #0
 8025e88:	4622      	mov	r2, r4
 8025e8a:	4601      	mov	r1, r0
 8025e8c:	68f8      	ldr	r0, [r7, #12]
 8025e8e:	f7fd ff5b 	bl	8023d48 <lfs_bd_prog>
 8025e92:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8025e94:	697b      	ldr	r3, [r7, #20]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	d001      	beq.n	8025e9e <lfs_dir_commitprog+0x42>
        return err;
 8025e9a:	697b      	ldr	r3, [r7, #20]
 8025e9c:	e010      	b.n	8025ec0 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8025e9e:	68bb      	ldr	r3, [r7, #8]
 8025ea0:	68db      	ldr	r3, [r3, #12]
 8025ea2:	683a      	ldr	r2, [r7, #0]
 8025ea4:	6879      	ldr	r1, [r7, #4]
 8025ea6:	4618      	mov	r0, r3
 8025ea8:	f004 fef2 	bl	802ac90 <lfs_crc>
 8025eac:	4602      	mov	r2, r0
 8025eae:	68bb      	ldr	r3, [r7, #8]
 8025eb0:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8025eb2:	68bb      	ldr	r3, [r7, #8]
 8025eb4:	685a      	ldr	r2, [r3, #4]
 8025eb6:	683b      	ldr	r3, [r7, #0]
 8025eb8:	441a      	add	r2, r3
 8025eba:	68bb      	ldr	r3, [r7, #8]
 8025ebc:	605a      	str	r2, [r3, #4]
    return 0;
 8025ebe:	2300      	movs	r3, #0
}
 8025ec0:	4618      	mov	r0, r3
 8025ec2:	371c      	adds	r7, #28
 8025ec4:	46bd      	mov	sp, r7
 8025ec6:	bd90      	pop	{r4, r7, pc}

08025ec8 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8025ec8:	b590      	push	{r4, r7, lr}
 8025eca:	b08f      	sub	sp, #60	; 0x3c
 8025ecc:	af04      	add	r7, sp, #16
 8025ece:	60f8      	str	r0, [r7, #12]
 8025ed0:	60b9      	str	r1, [r7, #8]
 8025ed2:	607a      	str	r2, [r7, #4]
 8025ed4:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8025ed6:	6878      	ldr	r0, [r7, #4]
 8025ed8:	f7fe f947 	bl	802416a <lfs_tag_dsize>
 8025edc:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8025ede:	68bb      	ldr	r3, [r7, #8]
 8025ee0:	685a      	ldr	r2, [r3, #4]
 8025ee2:	6a3b      	ldr	r3, [r7, #32]
 8025ee4:	441a      	add	r2, r3
 8025ee6:	68bb      	ldr	r3, [r7, #8]
 8025ee8:	695b      	ldr	r3, [r3, #20]
 8025eea:	429a      	cmp	r2, r3
 8025eec:	d902      	bls.n	8025ef4 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8025eee:	f06f 031b 	mvn.w	r3, #27
 8025ef2:	e065      	b.n	8025fc0 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8025ef4:	687b      	ldr	r3, [r7, #4]
 8025ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025efa:	68bb      	ldr	r3, [r7, #8]
 8025efc:	689b      	ldr	r3, [r3, #8]
 8025efe:	4053      	eors	r3, r2
 8025f00:	4618      	mov	r0, r3
 8025f02:	f7fd fc92 	bl	802382a <lfs_tobe32>
 8025f06:	4603      	mov	r3, r0
 8025f08:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8025f0a:	f107 0214 	add.w	r2, r7, #20
 8025f0e:	2304      	movs	r3, #4
 8025f10:	68b9      	ldr	r1, [r7, #8]
 8025f12:	68f8      	ldr	r0, [r7, #12]
 8025f14:	f7ff ffa2 	bl	8025e5c <lfs_dir_commitprog>
 8025f18:	61f8      	str	r0, [r7, #28]
    if (err) {
 8025f1a:	69fb      	ldr	r3, [r7, #28]
 8025f1c:	2b00      	cmp	r3, #0
 8025f1e:	d001      	beq.n	8025f24 <lfs_dir_commitattr+0x5c>
        return err;
 8025f20:	69fb      	ldr	r3, [r7, #28]
 8025f22:	e04d      	b.n	8025fc0 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	2b00      	cmp	r3, #0
 8025f28:	db0c      	blt.n	8025f44 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8025f2a:	6a3b      	ldr	r3, [r7, #32]
 8025f2c:	3b04      	subs	r3, #4
 8025f2e:	683a      	ldr	r2, [r7, #0]
 8025f30:	68b9      	ldr	r1, [r7, #8]
 8025f32:	68f8      	ldr	r0, [r7, #12]
 8025f34:	f7ff ff92 	bl	8025e5c <lfs_dir_commitprog>
 8025f38:	61f8      	str	r0, [r7, #28]
        if (err) {
 8025f3a:	69fb      	ldr	r3, [r7, #28]
 8025f3c:	2b00      	cmp	r3, #0
 8025f3e:	d039      	beq.n	8025fb4 <lfs_dir_commitattr+0xec>
            return err;
 8025f40:	69fb      	ldr	r3, [r7, #28]
 8025f42:	e03d      	b.n	8025fc0 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8025f44:	683b      	ldr	r3, [r7, #0]
 8025f46:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025f48:	2300      	movs	r3, #0
 8025f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8025f4c:	e02d      	b.n	8025faa <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8025f4e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8025f50:	6a3a      	ldr	r2, [r7, #32]
 8025f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f54:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8025f56:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8025f58:	69bb      	ldr	r3, [r7, #24]
 8025f5a:	681b      	ldr	r3, [r3, #0]
 8025f5c:	69ba      	ldr	r2, [r7, #24]
 8025f5e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8025f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025f62:	440a      	add	r2, r1
 8025f64:	2101      	movs	r1, #1
 8025f66:	9103      	str	r1, [sp, #12]
 8025f68:	f107 0113 	add.w	r1, r7, #19
 8025f6c:	9102      	str	r1, [sp, #8]
 8025f6e:	9201      	str	r2, [sp, #4]
 8025f70:	9300      	str	r3, [sp, #0]
 8025f72:	4623      	mov	r3, r4
 8025f74:	4602      	mov	r2, r0
 8025f76:	2100      	movs	r1, #0
 8025f78:	68f8      	ldr	r0, [r7, #12]
 8025f7a:	f7fd fc9f 	bl	80238bc <lfs_bd_read>
 8025f7e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025f80:	69fb      	ldr	r3, [r7, #28]
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	d001      	beq.n	8025f8a <lfs_dir_commitattr+0xc2>
                return err;
 8025f86:	69fb      	ldr	r3, [r7, #28]
 8025f88:	e01a      	b.n	8025fc0 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8025f8a:	f107 0213 	add.w	r2, r7, #19
 8025f8e:	2301      	movs	r3, #1
 8025f90:	68b9      	ldr	r1, [r7, #8]
 8025f92:	68f8      	ldr	r0, [r7, #12]
 8025f94:	f7ff ff62 	bl	8025e5c <lfs_dir_commitprog>
 8025f98:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025f9a:	69fb      	ldr	r3, [r7, #28]
 8025f9c:	2b00      	cmp	r3, #0
 8025f9e:	d001      	beq.n	8025fa4 <lfs_dir_commitattr+0xdc>
                return err;
 8025fa0:	69fb      	ldr	r3, [r7, #28]
 8025fa2:	e00d      	b.n	8025fc0 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fa6:	3301      	adds	r3, #1
 8025fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8025faa:	6a3b      	ldr	r3, [r7, #32]
 8025fac:	3b04      	subs	r3, #4
 8025fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025fb0:	429a      	cmp	r2, r3
 8025fb2:	d3cc      	bcc.n	8025f4e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8025fb4:	687b      	ldr	r3, [r7, #4]
 8025fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025fba:	68bb      	ldr	r3, [r7, #8]
 8025fbc:	609a      	str	r2, [r3, #8]
    return 0;
 8025fbe:	2300      	movs	r3, #0
}
 8025fc0:	4618      	mov	r0, r3
 8025fc2:	372c      	adds	r7, #44	; 0x2c
 8025fc4:	46bd      	mov	sp, r7
 8025fc6:	bd90      	pop	{r4, r7, pc}

08025fc8 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8025fc8:	b590      	push	{r4, r7, lr}
 8025fca:	b097      	sub	sp, #92	; 0x5c
 8025fcc:	af04      	add	r7, sp, #16
 8025fce:	6078      	str	r0, [r7, #4]
 8025fd0:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025fd2:	683b      	ldr	r3, [r7, #0]
 8025fd4:	685b      	ldr	r3, [r3, #4]
 8025fd6:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8025fda:	687b      	ldr	r3, [r7, #4]
 8025fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025fde:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025fe0:	4619      	mov	r1, r3
 8025fe2:	4610      	mov	r0, r2
 8025fe4:	f7fd fbb3 	bl	802374e <lfs_alignup>
 8025fe8:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8025fea:	2300      	movs	r3, #0
 8025fec:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8025fee:	2300      	movs	r3, #0
 8025ff0:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8025ff2:	e0a6      	b.n	8026142 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8025ff4:	683b      	ldr	r3, [r7, #0]
 8025ff6:	685b      	ldr	r3, [r3, #4]
 8025ff8:	3304      	adds	r3, #4
 8025ffa:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8025ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025ffe:	6a3b      	ldr	r3, [r7, #32]
 8026000:	1ad3      	subs	r3, r2, r3
 8026002:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8026006:	4618      	mov	r0, r3
 8026008:	f7fd fb7c 	bl	8023704 <lfs_min>
 802600c:	4602      	mov	r2, r0
 802600e:	6a3b      	ldr	r3, [r7, #32]
 8026010:	4413      	add	r3, r2
 8026012:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8026014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026018:	429a      	cmp	r2, r3
 802601a:	d206      	bcs.n	802602a <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 802601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802601e:	3b08      	subs	r3, #8
 8026020:	4619      	mov	r1, r3
 8026022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8026024:	f7fd fb6e 	bl	8023704 <lfs_min>
 8026028:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 802602a:	f04f 33ff 	mov.w	r3, #4294967295
 802602e:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8026030:	6879      	ldr	r1, [r7, #4]
 8026032:	683b      	ldr	r3, [r7, #0]
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	2204      	movs	r2, #4
 8026038:	9203      	str	r2, [sp, #12]
 802603a:	f107 0214 	add.w	r2, r7, #20
 802603e:	9202      	str	r2, [sp, #8]
 8026040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026042:	9201      	str	r2, [sp, #4]
 8026044:	9300      	str	r3, [sp, #0]
 8026046:	2304      	movs	r3, #4
 8026048:	460a      	mov	r2, r1
 802604a:	2100      	movs	r1, #0
 802604c:	6878      	ldr	r0, [r7, #4]
 802604e:	f7fd fc35 	bl	80238bc <lfs_bd_read>
 8026052:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8026054:	69fb      	ldr	r3, [r7, #28]
 8026056:	2b00      	cmp	r3, #0
 8026058:	d005      	beq.n	8026066 <lfs_dir_commitcrc+0x9e>
 802605a:	69fb      	ldr	r3, [r7, #28]
 802605c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026060:	d001      	beq.n	8026066 <lfs_dir_commitcrc+0x9e>
            return err;
 8026062:	69fb      	ldr	r3, [r7, #28]
 8026064:	e0e8      	b.n	8026238 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8026066:	697b      	ldr	r3, [r7, #20]
 8026068:	4618      	mov	r0, r3
 802606a:	f7fd fbd2 	bl	8023812 <lfs_frombe32>
 802606e:	4603      	mov	r3, r0
 8026070:	43db      	mvns	r3, r3
 8026072:	0fdb      	lsrs	r3, r3, #31
 8026074:	2b00      	cmp	r3, #0
 8026076:	bf14      	ite	ne
 8026078:	2301      	movne	r3, #1
 802607a:	2300      	moveq	r3, #0
 802607c:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 802607e:	7efb      	ldrb	r3, [r7, #27]
 8026080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026084:	051a      	lsls	r2, r3, #20
 8026086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8026088:	6a3b      	ldr	r3, [r7, #32]
 802608a:	1acb      	subs	r3, r1, r3
 802608c:	4313      	orrs	r3, r2
 802608e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8026092:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8026096:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8026098:	683b      	ldr	r3, [r7, #0]
 802609a:	689a      	ldr	r2, [r3, #8]
 802609c:	697b      	ldr	r3, [r7, #20]
 802609e:	4053      	eors	r3, r2
 80260a0:	4618      	mov	r0, r3
 80260a2:	f7fd fbc2 	bl	802382a <lfs_tobe32>
 80260a6:	4603      	mov	r3, r0
 80260a8:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 80260aa:	683b      	ldr	r3, [r7, #0]
 80260ac:	68db      	ldr	r3, [r3, #12]
 80260ae:	f107 010c 	add.w	r1, r7, #12
 80260b2:	2204      	movs	r2, #4
 80260b4:	4618      	mov	r0, r3
 80260b6:	f004 fdeb 	bl	802ac90 <lfs_crc>
 80260ba:	4602      	mov	r2, r0
 80260bc:	683b      	ldr	r3, [r7, #0]
 80260be:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 80260c0:	683b      	ldr	r3, [r7, #0]
 80260c2:	68db      	ldr	r3, [r3, #12]
 80260c4:	4618      	mov	r0, r3
 80260c6:	f7fd fb98 	bl	80237fa <lfs_tole32>
 80260ca:	4603      	mov	r3, r0
 80260cc:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 80260ce:	687b      	ldr	r3, [r7, #4]
 80260d0:	f103 0010 	add.w	r0, r3, #16
 80260d4:	687c      	ldr	r4, [r7, #4]
 80260d6:	683b      	ldr	r3, [r7, #0]
 80260d8:	681b      	ldr	r3, [r3, #0]
 80260da:	683a      	ldr	r2, [r7, #0]
 80260dc:	6852      	ldr	r2, [r2, #4]
 80260de:	2108      	movs	r1, #8
 80260e0:	9103      	str	r1, [sp, #12]
 80260e2:	f107 010c 	add.w	r1, r7, #12
 80260e6:	9102      	str	r1, [sp, #8]
 80260e8:	9201      	str	r2, [sp, #4]
 80260ea:	9300      	str	r3, [sp, #0]
 80260ec:	2300      	movs	r3, #0
 80260ee:	4622      	mov	r2, r4
 80260f0:	4601      	mov	r1, r0
 80260f2:	6878      	ldr	r0, [r7, #4]
 80260f4:	f7fd fe28 	bl	8023d48 <lfs_bd_prog>
 80260f8:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80260fa:	69fb      	ldr	r3, [r7, #28]
 80260fc:	2b00      	cmp	r3, #0
 80260fe:	d001      	beq.n	8026104 <lfs_dir_commitcrc+0x13c>
            return err;
 8026100:	69fb      	ldr	r3, [r7, #28]
 8026102:	e099      	b.n	8026238 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8026104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026106:	2b00      	cmp	r3, #0
 8026108:	d106      	bne.n	8026118 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 802610a:	683b      	ldr	r3, [r7, #0]
 802610c:	685b      	ldr	r3, [r3, #4]
 802610e:	3304      	adds	r3, #4
 8026110:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8026112:	683b      	ldr	r3, [r7, #0]
 8026114:	68db      	ldr	r3, [r3, #12]
 8026116:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8026118:	697b      	ldr	r3, [r7, #20]
 802611a:	4618      	mov	r0, r3
 802611c:	f7fe f818 	bl	8024150 <lfs_tag_size>
 8026120:	4603      	mov	r3, r0
 8026122:	1d1a      	adds	r2, r3, #4
 8026124:	683b      	ldr	r3, [r7, #0]
 8026126:	685b      	ldr	r3, [r3, #4]
 8026128:	441a      	add	r2, r3
 802612a:	683b      	ldr	r3, [r7, #0]
 802612c:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 802612e:	7efb      	ldrb	r3, [r7, #27]
 8026130:	07da      	lsls	r2, r3, #31
 8026132:	697b      	ldr	r3, [r7, #20]
 8026134:	405a      	eors	r2, r3
 8026136:	683b      	ldr	r3, [r7, #0]
 8026138:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 802613a:	683b      	ldr	r3, [r7, #0]
 802613c:	f04f 32ff 	mov.w	r2, #4294967295
 8026140:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8026142:	683b      	ldr	r3, [r7, #0]
 8026144:	685b      	ldr	r3, [r3, #4]
 8026146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026148:	429a      	cmp	r2, r3
 802614a:	f63f af53 	bhi.w	8025ff4 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	f103 0110 	add.w	r1, r3, #16
 8026154:	687a      	ldr	r2, [r7, #4]
 8026156:	2300      	movs	r3, #0
 8026158:	6878      	ldr	r0, [r7, #4]
 802615a:	f7fd fdc1 	bl	8023ce0 <lfs_bd_sync>
 802615e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8026160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026162:	2b00      	cmp	r3, #0
 8026164:	d001      	beq.n	802616a <lfs_dir_commitcrc+0x1a2>
        return err;
 8026166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026168:	e066      	b.n	8026238 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 802616a:	683b      	ldr	r3, [r7, #0]
 802616c:	691b      	ldr	r3, [r3, #16]
 802616e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8026170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026172:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8026174:	e05b      	b.n	802622e <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8026176:	f04f 33ff 	mov.w	r3, #4294967295
 802617a:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 802617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802617e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026180:	e030      	b.n	80261e4 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8026182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026186:	429a      	cmp	r2, r3
 8026188:	d106      	bne.n	8026198 <lfs_dir_commitcrc+0x1d0>
 802618a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802618c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802618e:	429a      	cmp	r2, r3
 8026190:	d002      	beq.n	8026198 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8026192:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8026196:	e04f      	b.n	8026238 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8026198:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 802619a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802619e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80261a0:	1d18      	adds	r0, r3, #4
 80261a2:	683b      	ldr	r3, [r7, #0]
 80261a4:	681b      	ldr	r3, [r3, #0]
 80261a6:	2201      	movs	r2, #1
 80261a8:	9203      	str	r2, [sp, #12]
 80261aa:	f107 020b 	add.w	r2, r7, #11
 80261ae:	9202      	str	r2, [sp, #8]
 80261b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80261b2:	9201      	str	r2, [sp, #4]
 80261b4:	9300      	str	r3, [sp, #0]
 80261b6:	4603      	mov	r3, r0
 80261b8:	460a      	mov	r2, r1
 80261ba:	2100      	movs	r1, #0
 80261bc:	6878      	ldr	r0, [r7, #4]
 80261be:	f7fd fb7d 	bl	80238bc <lfs_bd_read>
 80261c2:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 80261c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80261c6:	2b00      	cmp	r3, #0
 80261c8:	d001      	beq.n	80261ce <lfs_dir_commitcrc+0x206>
                return err;
 80261ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80261cc:	e034      	b.n	8026238 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 80261ce:	f107 030b 	add.w	r3, r7, #11
 80261d2:	2201      	movs	r2, #1
 80261d4:	4619      	mov	r1, r3
 80261d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80261d8:	f004 fd5a 	bl	802ac90 <lfs_crc>
 80261dc:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80261de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80261e0:	3301      	adds	r3, #1
 80261e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80261e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80261e6:	3304      	adds	r3, #4
 80261e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80261ea:	429a      	cmp	r2, r3
 80261ec:	d3c9      	bcc.n	8026182 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80261ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261f0:	2b00      	cmp	r3, #0
 80261f2:	d002      	beq.n	80261fa <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80261f4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80261f8:	e01e      	b.n	8026238 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80261fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80261fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80261fe:	1ad3      	subs	r3, r2, r3
 8026200:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8026204:	4618      	mov	r0, r3
 8026206:	f7fd fa7d 	bl	8023704 <lfs_min>
 802620a:	4602      	mov	r2, r0
 802620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802620e:	4413      	add	r3, r2
 8026210:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8026212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026216:	429a      	cmp	r2, r3
 8026218:	d206      	bcs.n	8026228 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 802621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802621c:	3b08      	subs	r3, #8
 802621e:	4619      	mov	r1, r3
 8026220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8026222:	f7fd fa6f 	bl	8023704 <lfs_min>
 8026226:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8026228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802622a:	3304      	adds	r3, #4
 802622c:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 802622e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026232:	429a      	cmp	r2, r3
 8026234:	d39f      	bcc.n	8026176 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8026236:	2300      	movs	r3, #0
}
 8026238:	4618      	mov	r0, r3
 802623a:	374c      	adds	r7, #76	; 0x4c
 802623c:	46bd      	mov	sp, r7
 802623e:	bd90      	pop	{r4, r7, pc}

08026240 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8026240:	b580      	push	{r7, lr}
 8026242:	b08a      	sub	sp, #40	; 0x28
 8026244:	af04      	add	r7, sp, #16
 8026246:	6078      	str	r0, [r7, #4]
 8026248:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 802624a:	2300      	movs	r3, #0
 802624c:	617b      	str	r3, [r7, #20]
 802624e:	e016      	b.n	802627e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8026250:	697b      	ldr	r3, [r7, #20]
 8026252:	3301      	adds	r3, #1
 8026254:	2b00      	cmp	r3, #0
 8026256:	f003 0301 	and.w	r3, r3, #1
 802625a:	bfb8      	it	lt
 802625c:	425b      	neglt	r3, r3
 802625e:	009b      	lsls	r3, r3, #2
 8026260:	683a      	ldr	r2, [r7, #0]
 8026262:	4413      	add	r3, r2
 8026264:	4619      	mov	r1, r3
 8026266:	6878      	ldr	r0, [r7, #4]
 8026268:	f7fe f9b2 	bl	80245d0 <lfs_alloc>
 802626c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802626e:	68fb      	ldr	r3, [r7, #12]
 8026270:	2b00      	cmp	r3, #0
 8026272:	d001      	beq.n	8026278 <lfs_dir_alloc+0x38>
            return err;
 8026274:	68fb      	ldr	r3, [r7, #12]
 8026276:	e058      	b.n	802632a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8026278:	697b      	ldr	r3, [r7, #20]
 802627a:	3301      	adds	r3, #1
 802627c:	617b      	str	r3, [r7, #20]
 802627e:	697b      	ldr	r3, [r7, #20]
 8026280:	2b01      	cmp	r3, #1
 8026282:	dde5      	ble.n	8026250 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8026284:	683b      	ldr	r3, [r7, #0]
 8026286:	2200      	movs	r2, #0
 8026288:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 802628a:	6879      	ldr	r1, [r7, #4]
 802628c:	683b      	ldr	r3, [r7, #0]
 802628e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8026290:	683a      	ldr	r2, [r7, #0]
 8026292:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8026294:	2004      	movs	r0, #4
 8026296:	9003      	str	r0, [sp, #12]
 8026298:	9202      	str	r2, [sp, #8]
 802629a:	2200      	movs	r2, #0
 802629c:	9201      	str	r2, [sp, #4]
 802629e:	9300      	str	r3, [sp, #0]
 80262a0:	2304      	movs	r3, #4
 80262a2:	460a      	mov	r2, r1
 80262a4:	2100      	movs	r1, #0
 80262a6:	6878      	ldr	r0, [r7, #4]
 80262a8:	f7fd fb08 	bl	80238bc <lfs_bd_read>
 80262ac:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80262ae:	683b      	ldr	r3, [r7, #0]
 80262b0:	689b      	ldr	r3, [r3, #8]
 80262b2:	4618      	mov	r0, r3
 80262b4:	f7fd fa96 	bl	80237e4 <lfs_fromle32>
 80262b8:	4602      	mov	r2, r0
 80262ba:	683b      	ldr	r3, [r7, #0]
 80262bc:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80262be:	693b      	ldr	r3, [r7, #16]
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	d005      	beq.n	80262d0 <lfs_dir_alloc+0x90>
 80262c4:	693b      	ldr	r3, [r7, #16]
 80262c6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80262ca:	d001      	beq.n	80262d0 <lfs_dir_alloc+0x90>
        return err;
 80262cc:	693b      	ldr	r3, [r7, #16]
 80262ce:	e02c      	b.n	802632a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80262d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262d6:	2b00      	cmp	r3, #0
 80262d8:	dd0e      	ble.n	80262f8 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80262da:	683b      	ldr	r3, [r7, #0]
 80262dc:	689a      	ldr	r2, [r3, #8]
 80262de:	687b      	ldr	r3, [r7, #4]
 80262e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80262e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262e4:	3301      	adds	r3, #1
 80262e6:	f043 0301 	orr.w	r3, r3, #1
 80262ea:	4619      	mov	r1, r3
 80262ec:	4610      	mov	r0, r2
 80262ee:	f7fd fa2e 	bl	802374e <lfs_alignup>
 80262f2:	4602      	mov	r2, r0
 80262f4:	683b      	ldr	r3, [r7, #0]
 80262f6:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80262f8:	683b      	ldr	r3, [r7, #0]
 80262fa:	2204      	movs	r2, #4
 80262fc:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80262fe:	683b      	ldr	r3, [r7, #0]
 8026300:	f04f 32ff 	mov.w	r2, #4294967295
 8026304:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8026306:	683b      	ldr	r3, [r7, #0]
 8026308:	2200      	movs	r2, #0
 802630a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 802630c:	683b      	ldr	r3, [r7, #0]
 802630e:	f04f 32ff 	mov.w	r2, #4294967295
 8026312:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8026314:	683b      	ldr	r3, [r7, #0]
 8026316:	f04f 32ff 	mov.w	r2, #4294967295
 802631a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 802631c:	683b      	ldr	r3, [r7, #0]
 802631e:	2200      	movs	r2, #0
 8026320:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8026322:	683b      	ldr	r3, [r7, #0]
 8026324:	2200      	movs	r2, #0
 8026326:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8026328:	2300      	movs	r3, #0
}
 802632a:	4618      	mov	r0, r3
 802632c:	3718      	adds	r7, #24
 802632e:	46bd      	mov	sp, r7
 8026330:	bd80      	pop	{r7, pc}
	...

08026334 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8026334:	b580      	push	{r7, lr}
 8026336:	b08a      	sub	sp, #40	; 0x28
 8026338:	af00      	add	r7, sp, #0
 802633a:	60f8      	str	r0, [r7, #12]
 802633c:	60b9      	str	r1, [r7, #8]
 802633e:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8026340:	68fb      	ldr	r3, [r7, #12]
 8026342:	3348      	adds	r3, #72	; 0x48
 8026344:	461a      	mov	r2, r3
 8026346:	6879      	ldr	r1, [r7, #4]
 8026348:	68f8      	ldr	r0, [r7, #12]
 802634a:	f7ff fb97 	bl	8025a7c <lfs_dir_getgstate>
 802634e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8026350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026352:	2b00      	cmp	r3, #0
 8026354:	d001      	beq.n	802635a <lfs_dir_drop+0x26>
        return err;
 8026356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026358:	e022      	b.n	80263a0 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 802635a:	687b      	ldr	r3, [r7, #4]
 802635c:	3318      	adds	r3, #24
 802635e:	4618      	mov	r0, r3
 8026360:	f7fd fe71 	bl	8024046 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8026364:	687b      	ldr	r3, [r7, #4]
 8026366:	7ddb      	ldrb	r3, [r3, #23]
 8026368:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802636c:	051a      	lsls	r2, r3, #20
 802636e:	4b0e      	ldr	r3, [pc, #56]	; (80263a8 <lfs_dir_drop+0x74>)
 8026370:	4313      	orrs	r3, r2
 8026372:	61fb      	str	r3, [r7, #28]
 8026374:	687b      	ldr	r3, [r7, #4]
 8026376:	3318      	adds	r3, #24
 8026378:	623b      	str	r3, [r7, #32]
 802637a:	f107 021c 	add.w	r2, r7, #28
 802637e:	2301      	movs	r3, #1
 8026380:	68b9      	ldr	r1, [r7, #8]
 8026382:	68f8      	ldr	r0, [r7, #12]
 8026384:	f001 f978 	bl	8027678 <lfs_dir_commit>
 8026388:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 802638a:	687b      	ldr	r3, [r7, #4]
 802638c:	3318      	adds	r3, #24
 802638e:	4618      	mov	r0, r3
 8026390:	f7fd fe3f 	bl	8024012 <lfs_pair_fromle32>
    if (err) {
 8026394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026396:	2b00      	cmp	r3, #0
 8026398:	d001      	beq.n	802639e <lfs_dir_drop+0x6a>
        return err;
 802639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802639c:	e000      	b.n	80263a0 <lfs_dir_drop+0x6c>
    }

    return 0;
 802639e:	2300      	movs	r3, #0
}
 80263a0:	4618      	mov	r0, r3
 80263a2:	3728      	adds	r7, #40	; 0x28
 80263a4:	46bd      	mov	sp, r7
 80263a6:	bd80      	pop	{r7, pc}
 80263a8:	000ffc08 	.word	0x000ffc08

080263ac <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80263ac:	b580      	push	{r7, lr}
 80263ae:	b092      	sub	sp, #72	; 0x48
 80263b0:	af04      	add	r7, sp, #16
 80263b2:	60f8      	str	r0, [r7, #12]
 80263b4:	60b9      	str	r1, [r7, #8]
 80263b6:	607a      	str	r2, [r7, #4]
 80263b8:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80263ba:	f107 0310 	add.w	r3, r7, #16
 80263be:	4619      	mov	r1, r3
 80263c0:	68f8      	ldr	r0, [r7, #12]
 80263c2:	f7ff ff3d 	bl	8026240 <lfs_dir_alloc>
 80263c6:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80263c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80263ca:	2b00      	cmp	r3, #0
 80263cc:	d001      	beq.n	80263d2 <lfs_dir_split+0x26>
        return err;
 80263ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80263d0:	e03c      	b.n	802644c <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80263d2:	68bb      	ldr	r3, [r7, #8]
 80263d4:	7ddb      	ldrb	r3, [r3, #23]
 80263d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80263da:	68bb      	ldr	r3, [r7, #8]
 80263dc:	699b      	ldr	r3, [r3, #24]
 80263de:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80263e0:	68bb      	ldr	r3, [r7, #8]
 80263e2:	69db      	ldr	r3, [r3, #28]
 80263e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80263e6:	f107 0110 	add.w	r1, r7, #16
 80263ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80263ee:	9302      	str	r3, [sp, #8]
 80263f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80263f4:	9301      	str	r3, [sp, #4]
 80263f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80263f8:	9300      	str	r3, [sp, #0]
 80263fa:	683b      	ldr	r3, [r7, #0]
 80263fc:	687a      	ldr	r2, [r7, #4]
 80263fe:	68f8      	ldr	r0, [r7, #12]
 8026400:	f000 f87a 	bl	80264f8 <lfs_dir_compact>
 8026404:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8026406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026408:	2b00      	cmp	r3, #0
 802640a:	da01      	bge.n	8026410 <lfs_dir_split+0x64>
        return res;
 802640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802640e:	e01d      	b.n	802644c <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8026410:	693a      	ldr	r2, [r7, #16]
 8026412:	68bb      	ldr	r3, [r7, #8]
 8026414:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8026416:	697a      	ldr	r2, [r7, #20]
 8026418:	68bb      	ldr	r3, [r7, #8]
 802641a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 802641c:	68bb      	ldr	r3, [r7, #8]
 802641e:	2201      	movs	r2, #1
 8026420:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8026422:	68ba      	ldr	r2, [r7, #8]
 8026424:	68fb      	ldr	r3, [r7, #12]
 8026426:	3320      	adds	r3, #32
 8026428:	4619      	mov	r1, r3
 802642a:	4610      	mov	r0, r2
 802642c:	f7fd fd9a 	bl	8023f64 <lfs_pair_cmp>
 8026430:	4603      	mov	r3, r0
 8026432:	2b00      	cmp	r3, #0
 8026434:	d109      	bne.n	802644a <lfs_dir_split+0x9e>
 8026436:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802643a:	2b00      	cmp	r3, #0
 802643c:	d105      	bne.n	802644a <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 802643e:	693a      	ldr	r2, [r7, #16]
 8026440:	68fb      	ldr	r3, [r7, #12]
 8026442:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8026444:	697a      	ldr	r2, [r7, #20]
 8026446:	68fb      	ldr	r3, [r7, #12]
 8026448:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 802644a:	2300      	movs	r3, #0
}
 802644c:	4618      	mov	r0, r3
 802644e:	3738      	adds	r7, #56	; 0x38
 8026450:	46bd      	mov	sp, r7
 8026452:	bd80      	pop	{r7, pc}

08026454 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8026454:	b580      	push	{r7, lr}
 8026456:	b086      	sub	sp, #24
 8026458:	af00      	add	r7, sp, #0
 802645a:	60f8      	str	r0, [r7, #12]
 802645c:	60b9      	str	r1, [r7, #8]
 802645e:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8026460:	68fb      	ldr	r3, [r7, #12]
 8026462:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8026464:	68b8      	ldr	r0, [r7, #8]
 8026466:	f7fd fe80 	bl	802416a <lfs_tag_dsize>
 802646a:	4602      	mov	r2, r0
 802646c:	697b      	ldr	r3, [r7, #20]
 802646e:	681b      	ldr	r3, [r3, #0]
 8026470:	441a      	add	r2, r3
 8026472:	697b      	ldr	r3, [r7, #20]
 8026474:	601a      	str	r2, [r3, #0]
    return 0;
 8026476:	2300      	movs	r3, #0
}
 8026478:	4618      	mov	r0, r3
 802647a:	3718      	adds	r7, #24
 802647c:	46bd      	mov	sp, r7
 802647e:	bd80      	pop	{r7, pc}

08026480 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8026480:	b580      	push	{r7, lr}
 8026482:	b086      	sub	sp, #24
 8026484:	af00      	add	r7, sp, #0
 8026486:	60f8      	str	r0, [r7, #12]
 8026488:	60b9      	str	r1, [r7, #8]
 802648a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 802648c:	68fb      	ldr	r3, [r7, #12]
 802648e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8026490:	697b      	ldr	r3, [r7, #20]
 8026492:	6818      	ldr	r0, [r3, #0]
 8026494:	697b      	ldr	r3, [r7, #20]
 8026496:	6859      	ldr	r1, [r3, #4]
 8026498:	687b      	ldr	r3, [r7, #4]
 802649a:	68ba      	ldr	r2, [r7, #8]
 802649c:	f7ff fd14 	bl	8025ec8 <lfs_dir_commitattr>
 80264a0:	4603      	mov	r3, r0
}
 80264a2:	4618      	mov	r0, r3
 80264a4:	3718      	adds	r7, #24
 80264a6:	46bd      	mov	sp, r7
 80264a8:	bd80      	pop	{r7, pc}

080264aa <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80264aa:	b480      	push	{r7}
 80264ac:	b083      	sub	sp, #12
 80264ae:	af00      	add	r7, sp, #0
 80264b0:	6078      	str	r0, [r7, #4]
 80264b2:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80264b4:	687b      	ldr	r3, [r7, #4]
 80264b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80264b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80264ba:	2b00      	cmp	r3, #0
 80264bc:	dd11      	ble.n	80264e2 <lfs_dir_needsrelocation+0x38>
 80264be:	683b      	ldr	r3, [r7, #0]
 80264c0:	689b      	ldr	r3, [r3, #8]
 80264c2:	3301      	adds	r3, #1
 80264c4:	687a      	ldr	r2, [r7, #4]
 80264c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80264c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80264ca:	3201      	adds	r2, #1
 80264cc:	f042 0201 	orr.w	r2, r2, #1
 80264d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80264d4:	fb01 f202 	mul.w	r2, r1, r2
 80264d8:	1a9b      	subs	r3, r3, r2
 80264da:	2b00      	cmp	r3, #0
 80264dc:	d101      	bne.n	80264e2 <lfs_dir_needsrelocation+0x38>
 80264de:	2301      	movs	r3, #1
 80264e0:	e000      	b.n	80264e4 <lfs_dir_needsrelocation+0x3a>
 80264e2:	2300      	movs	r3, #0
 80264e4:	f003 0301 	and.w	r3, r3, #1
 80264e8:	b2db      	uxtb	r3, r3
}
 80264ea:	4618      	mov	r0, r3
 80264ec:	370c      	adds	r7, #12
 80264ee:	46bd      	mov	sp, r7
 80264f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264f4:	4770      	bx	lr
	...

080264f8 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80264f8:	b580      	push	{r7, lr}
 80264fa:	b0a4      	sub	sp, #144	; 0x90
 80264fc:	af0a      	add	r7, sp, #40	; 0x28
 80264fe:	60f8      	str	r0, [r7, #12]
 8026500:	60b9      	str	r1, [r7, #8]
 8026502:	607a      	str	r2, [r7, #4]
 8026504:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8026506:	2300      	movs	r3, #0
 8026508:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 802650c:	68b9      	ldr	r1, [r7, #8]
 802650e:	68f8      	ldr	r0, [r7, #12]
 8026510:	f7ff ffcb 	bl	80264aa <lfs_dir_needsrelocation>
 8026514:	4603      	mov	r3, r0
 8026516:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 802651a:	68bb      	ldr	r3, [r7, #8]
 802651c:	689b      	ldr	r3, [r3, #8]
 802651e:	1c5a      	adds	r2, r3, #1
 8026520:	68bb      	ldr	r3, [r7, #8]
 8026522:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8026524:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026528:	2b00      	cmp	r3, #0
 802652a:	d00e      	beq.n	802654a <lfs_dir_compact+0x52>
 802652c:	68bb      	ldr	r3, [r7, #8]
 802652e:	2200      	movs	r2, #0
 8026530:	657a      	str	r2, [r7, #84]	; 0x54
 8026532:	2201      	movs	r2, #1
 8026534:	65ba      	str	r2, [r7, #88]	; 0x58
 8026536:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802653a:	4611      	mov	r1, r2
 802653c:	4618      	mov	r0, r3
 802653e:	f7fd fd11 	bl	8023f64 <lfs_pair_cmp>
 8026542:	4603      	mov	r3, r0
 8026544:	2b00      	cmp	r3, #0
 8026546:	f040 8155 	bne.w	80267f4 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 802654a:	68bb      	ldr	r3, [r7, #8]
 802654c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 802654e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026550:	2300      	movs	r3, #0
 8026552:	643b      	str	r3, [r7, #64]	; 0x40
 8026554:	f04f 33ff 	mov.w	r3, #4294967295
 8026558:	647b      	str	r3, [r7, #68]	; 0x44
 802655a:	f04f 33ff 	mov.w	r3, #4294967295
 802655e:	64bb      	str	r3, [r7, #72]	; 0x48
 8026560:	2300      	movs	r3, #0
 8026562:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8026564:	68fb      	ldr	r3, [r7, #12]
 8026566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802656a:	2b00      	cmp	r3, #0
 802656c:	d004      	beq.n	8026578 <lfs_dir_compact+0x80>
 802656e:	68fb      	ldr	r3, [r7, #12]
 8026570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026574:	3b08      	subs	r3, #8
 8026576:	e003      	b.n	8026580 <lfs_dir_compact+0x88>
 8026578:	68fb      	ldr	r3, [r7, #12]
 802657a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802657c:	69db      	ldr	r3, [r3, #28]
 802657e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8026580:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8026582:	68bb      	ldr	r3, [r7, #8]
 8026584:	685b      	ldr	r3, [r3, #4]
 8026586:	4619      	mov	r1, r3
 8026588:	68f8      	ldr	r0, [r7, #12]
 802658a:	f7fd fc89 	bl	8023ea0 <lfs_bd_erase>
 802658e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026592:	2b00      	cmp	r3, #0
 8026594:	d006      	beq.n	80265a4 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8026596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026598:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802659c:	f000 812c 	beq.w	80267f8 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80265a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265a2:	e188      	b.n	80268b6 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80265a4:	68bb      	ldr	r3, [r7, #8]
 80265a6:	689b      	ldr	r3, [r3, #8]
 80265a8:	4618      	mov	r0, r3
 80265aa:	f7fd f926 	bl	80237fa <lfs_tole32>
 80265ae:	4602      	mov	r2, r0
 80265b0:	68bb      	ldr	r3, [r7, #8]
 80265b2:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80265b4:	68bb      	ldr	r3, [r7, #8]
 80265b6:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80265ba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80265be:	2304      	movs	r3, #4
 80265c0:	68f8      	ldr	r0, [r7, #12]
 80265c2:	f7ff fc4b 	bl	8025e5c <lfs_dir_commitprog>
 80265c6:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80265c8:	68bb      	ldr	r3, [r7, #8]
 80265ca:	689b      	ldr	r3, [r3, #8]
 80265cc:	4618      	mov	r0, r3
 80265ce:	f7fd f909 	bl	80237e4 <lfs_fromle32>
 80265d2:	4602      	mov	r2, r0
 80265d4:	68bb      	ldr	r3, [r7, #8]
 80265d6:	609a      	str	r2, [r3, #8]
            if (err) {
 80265d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265da:	2b00      	cmp	r3, #0
 80265dc:	d006      	beq.n	80265ec <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80265de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265e0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80265e4:	f000 810a 	beq.w	80267fc <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80265e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80265ea:	e164      	b.n	80268b6 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80265ec:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80265f0:	425b      	negs	r3, r3
 80265f2:	b29b      	uxth	r3, r3
 80265f4:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80265f6:	68fa      	ldr	r2, [r7, #12]
 80265f8:	637a      	str	r2, [r7, #52]	; 0x34
 80265fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80265fe:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8026600:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026604:	9208      	str	r2, [sp, #32]
 8026606:	4aae      	ldr	r2, [pc, #696]	; (80268c0 <lfs_dir_compact+0x3c8>)
 8026608:	9207      	str	r2, [sp, #28]
 802660a:	9306      	str	r3, [sp, #24]
 802660c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8026610:	9305      	str	r3, [sp, #20]
 8026612:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026616:	9304      	str	r3, [sp, #16]
 8026618:	2300      	movs	r3, #0
 802661a:	9303      	str	r3, [sp, #12]
 802661c:	4ba9      	ldr	r3, [pc, #676]	; (80268c4 <lfs_dir_compact+0x3cc>)
 802661e:	9302      	str	r3, [sp, #8]
 8026620:	683b      	ldr	r3, [r7, #0]
 8026622:	9301      	str	r3, [sp, #4]
 8026624:	687b      	ldr	r3, [r7, #4]
 8026626:	9300      	str	r3, [sp, #0]
 8026628:	f04f 33ff 	mov.w	r3, #4294967295
 802662c:	2200      	movs	r2, #0
 802662e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8026630:	68f8      	ldr	r0, [r7, #12]
 8026632:	f7fe fab9 	bl	8024ba8 <lfs_dir_traverse>
 8026636:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8026638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802663a:	2b00      	cmp	r3, #0
 802663c:	d006      	beq.n	802664c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 802663e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026640:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026644:	f000 80dc 	beq.w	8026800 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8026648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802664a:	e134      	b.n	80268b6 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 802664c:	68bb      	ldr	r3, [r7, #8]
 802664e:	3318      	adds	r3, #24
 8026650:	4618      	mov	r0, r3
 8026652:	f7fd fc6c 	bl	8023f2e <lfs_pair_isnull>
 8026656:	4603      	mov	r3, r0
 8026658:	f083 0301 	eor.w	r3, r3, #1
 802665c:	b2db      	uxtb	r3, r3
 802665e:	2b00      	cmp	r3, #0
 8026660:	d022      	beq.n	80266a8 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8026662:	68bb      	ldr	r3, [r7, #8]
 8026664:	3318      	adds	r3, #24
 8026666:	4618      	mov	r0, r3
 8026668:	f7fd fced 	bl	8024046 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 802666c:	68bb      	ldr	r3, [r7, #8]
 802666e:	7ddb      	ldrb	r3, [r3, #23]
 8026670:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8026674:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8026676:	4a94      	ldr	r2, [pc, #592]	; (80268c8 <lfs_dir_compact+0x3d0>)
 8026678:	431a      	orrs	r2, r3
                        dir->tail);
 802667a:	68bb      	ldr	r3, [r7, #8]
 802667c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 802667e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026682:	68f8      	ldr	r0, [r7, #12]
 8026684:	f7ff fc20 	bl	8025ec8 <lfs_dir_commitattr>
 8026688:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 802668a:	68bb      	ldr	r3, [r7, #8]
 802668c:	3318      	adds	r3, #24
 802668e:	4618      	mov	r0, r3
 8026690:	f7fd fcbf 	bl	8024012 <lfs_pair_fromle32>
                if (err) {
 8026694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026696:	2b00      	cmp	r3, #0
 8026698:	d006      	beq.n	80266a8 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802669a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802669c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80266a0:	f000 80b0 	beq.w	8026804 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80266a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80266a6:	e106      	b.n	80268b6 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80266a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80266ac:	2200      	movs	r2, #0
 80266ae:	601a      	str	r2, [r3, #0]
 80266b0:	605a      	str	r2, [r3, #4]
 80266b2:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80266b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80266b8:	f083 0301 	eor.w	r3, r3, #1
 80266bc:	b2db      	uxtb	r3, r3
 80266be:	2b00      	cmp	r3, #0
 80266c0:	d011      	beq.n	80266e6 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80266c2:	68fb      	ldr	r3, [r7, #12]
 80266c4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80266c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80266cc:	4611      	mov	r1, r2
 80266ce:	4618      	mov	r0, r3
 80266d0:	f7fd fd5f 	bl	8024192 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80266d4:	68fb      	ldr	r3, [r7, #12]
 80266d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80266da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80266de:	4611      	mov	r1, r2
 80266e0:	4618      	mov	r0, r3
 80266e2:	f7fd fd56 	bl	8024192 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80266e6:	68fb      	ldr	r3, [r7, #12]
 80266e8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80266ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80266f0:	4611      	mov	r1, r2
 80266f2:	4618      	mov	r0, r3
 80266f4:	f7fd fd4d 	bl	8024192 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80266f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80266fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80266fe:	f023 0303 	bic.w	r3, r3, #3
 8026702:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026708:	461a      	mov	r2, r3
 802670a:	68b9      	ldr	r1, [r7, #8]
 802670c:	68f8      	ldr	r0, [r7, #12]
 802670e:	f7ff f9b5 	bl	8025a7c <lfs_dir_getgstate>
 8026712:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026716:	2b00      	cmp	r3, #0
 8026718:	d001      	beq.n	802671e <lfs_dir_compact+0x226>
                return err;
 802671a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802671c:	e0cb      	b.n	80268b6 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 802671e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026722:	4618      	mov	r0, r3
 8026724:	f7fd fd5a 	bl	80241dc <lfs_gstate_iszero>
 8026728:	4603      	mov	r3, r0
 802672a:	f083 0301 	eor.w	r3, r3, #1
 802672e:	b2db      	uxtb	r3, r3
 8026730:	2b00      	cmp	r3, #0
 8026732:	d016      	beq.n	8026762 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8026734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026738:	4618      	mov	r0, r3
 802673a:	f7fd fde1 	bl	8024300 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 802673e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026742:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026746:	4a61      	ldr	r2, [pc, #388]	; (80268cc <lfs_dir_compact+0x3d4>)
 8026748:	68f8      	ldr	r0, [r7, #12]
 802674a:	f7ff fbbd 	bl	8025ec8 <lfs_dir_commitattr>
 802674e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8026750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026752:	2b00      	cmp	r3, #0
 8026754:	d005      	beq.n	8026762 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8026756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026758:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802675c:	d054      	beq.n	8026808 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 802675e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026760:	e0a9      	b.n	80268b6 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8026762:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8026766:	4619      	mov	r1, r3
 8026768:	68f8      	ldr	r0, [r7, #12]
 802676a:	f7ff fc2d 	bl	8025fc8 <lfs_dir_commitcrc>
 802676e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026772:	2b00      	cmp	r3, #0
 8026774:	d005      	beq.n	8026782 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8026776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026778:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802677c:	d046      	beq.n	802680c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 802677e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026780:	e099      	b.n	80268b6 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026784:	68fa      	ldr	r2, [r7, #12]
 8026786:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026788:	6992      	ldr	r2, [r2, #24]
 802678a:	fbb3 f1f2 	udiv	r1, r3, r2
 802678e:	fb01 f202 	mul.w	r2, r1, r2
 8026792:	1a9b      	subs	r3, r3, r2
 8026794:	2b00      	cmp	r3, #0
 8026796:	d006      	beq.n	80267a6 <lfs_dir_compact+0x2ae>
 8026798:	4b4d      	ldr	r3, [pc, #308]	; (80268d0 <lfs_dir_compact+0x3d8>)
 802679a:	4a4e      	ldr	r2, [pc, #312]	; (80268d4 <lfs_dir_compact+0x3dc>)
 802679c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 80267a0:	484d      	ldr	r0, [pc, #308]	; (80268d8 <lfs_dir_compact+0x3e0>)
 80267a2:	f005 fef3 	bl	802c58c <__assert_func>
            lfs_pair_swap(dir->pair);
 80267a6:	68bb      	ldr	r3, [r7, #8]
 80267a8:	4618      	mov	r0, r3
 80267aa:	f7fd fbab 	bl	8023f04 <lfs_pair_swap>
            dir->count = end - begin;
 80267ae:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80267b2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80267b6:	1ad3      	subs	r3, r2, r3
 80267b8:	b29a      	uxth	r2, r3
 80267ba:	68bb      	ldr	r3, [r7, #8]
 80267bc:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80267be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80267c0:	68bb      	ldr	r3, [r7, #8]
 80267c2:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80267c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80267c6:	68bb      	ldr	r3, [r7, #8]
 80267c8:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	3348      	adds	r3, #72	; 0x48
 80267ce:	2200      	movs	r2, #0
 80267d0:	601a      	str	r2, [r3, #0]
 80267d2:	605a      	str	r2, [r3, #4]
 80267d4:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80267d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80267da:	f083 0301 	eor.w	r3, r3, #1
 80267de:	b2db      	uxtb	r3, r3
 80267e0:	2b00      	cmp	r3, #0
 80267e2:	d065      	beq.n	80268b0 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80267e4:	68fb      	ldr	r3, [r7, #12]
 80267e6:	68fa      	ldr	r2, [r7, #12]
 80267e8:	333c      	adds	r3, #60	; 0x3c
 80267ea:	3230      	adds	r2, #48	; 0x30
 80267ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80267ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80267f2:	e05d      	b.n	80268b0 <lfs_dir_compact+0x3b8>
        goto relocate;
 80267f4:	bf00      	nop
 80267f6:	e00a      	b.n	802680e <lfs_dir_compact+0x316>
                    goto relocate;
 80267f8:	bf00      	nop
 80267fa:	e008      	b.n	802680e <lfs_dir_compact+0x316>
                    goto relocate;
 80267fc:	bf00      	nop
 80267fe:	e006      	b.n	802680e <lfs_dir_compact+0x316>
                    goto relocate;
 8026800:	bf00      	nop
 8026802:	e004      	b.n	802680e <lfs_dir_compact+0x316>
                        goto relocate;
 8026804:	bf00      	nop
 8026806:	e002      	b.n	802680e <lfs_dir_compact+0x316>
                        goto relocate;
 8026808:	bf00      	nop
 802680a:	e000      	b.n	802680e <lfs_dir_compact+0x316>
                    goto relocate;
 802680c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 802680e:	2301      	movs	r3, #1
 8026810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8026814:	68fb      	ldr	r3, [r7, #12]
 8026816:	3310      	adds	r3, #16
 8026818:	4619      	mov	r1, r3
 802681a:	68f8      	ldr	r0, [r7, #12]
 802681c:	f7fd f828 	bl	8023870 <lfs_cache_drop>
        if (!tired) {
 8026820:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026824:	f083 0301 	eor.w	r3, r3, #1
 8026828:	b2db      	uxtb	r3, r3
 802682a:	2b00      	cmp	r3, #0
 802682c:	d009      	beq.n	8026842 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 802682e:	68bb      	ldr	r3, [r7, #8]
 8026830:	685b      	ldr	r3, [r3, #4]
 8026832:	4a2a      	ldr	r2, [pc, #168]	; (80268dc <lfs_dir_compact+0x3e4>)
 8026834:	9200      	str	r2, [sp, #0]
 8026836:	f240 725a 	movw	r2, #1882	; 0x75a
 802683a:	4927      	ldr	r1, [pc, #156]	; (80268d8 <lfs_dir_compact+0x3e0>)
 802683c:	4828      	ldr	r0, [pc, #160]	; (80268e0 <lfs_dir_compact+0x3e8>)
 802683e:	f006 fedf 	bl	802d600 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026842:	68bb      	ldr	r3, [r7, #8]
 8026844:	2200      	movs	r2, #0
 8026846:	617a      	str	r2, [r7, #20]
 8026848:	2201      	movs	r2, #1
 802684a:	61ba      	str	r2, [r7, #24]
 802684c:	f107 0214 	add.w	r2, r7, #20
 8026850:	4611      	mov	r1, r2
 8026852:	4618      	mov	r0, r3
 8026854:	f7fd fb86 	bl	8023f64 <lfs_pair_cmp>
 8026858:	4603      	mov	r3, r0
 802685a:	2b00      	cmp	r3, #0
 802685c:	d10c      	bne.n	8026878 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 802685e:	68bb      	ldr	r3, [r7, #8]
 8026860:	685b      	ldr	r3, [r3, #4]
 8026862:	4a1e      	ldr	r2, [pc, #120]	; (80268dc <lfs_dir_compact+0x3e4>)
 8026864:	9200      	str	r2, [sp, #0]
 8026866:	f240 725f 	movw	r2, #1887	; 0x75f
 802686a:	491b      	ldr	r1, [pc, #108]	; (80268d8 <lfs_dir_compact+0x3e0>)
 802686c:	481d      	ldr	r0, [pc, #116]	; (80268e4 <lfs_dir_compact+0x3ec>)
 802686e:	f006 fec7 	bl	802d600 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8026872:	f06f 031b 	mvn.w	r3, #27
 8026876:	e01e      	b.n	80268b6 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8026878:	68bb      	ldr	r3, [r7, #8]
 802687a:	3304      	adds	r3, #4
 802687c:	4619      	mov	r1, r3
 802687e:	68f8      	ldr	r0, [r7, #12]
 8026880:	f7fd fea6 	bl	80245d0 <lfs_alloc>
 8026884:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8026886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026888:	2b00      	cmp	r3, #0
 802688a:	d00c      	beq.n	80268a6 <lfs_dir_compact+0x3ae>
 802688c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802688e:	f113 0f1c 	cmn.w	r3, #28
 8026892:	d106      	bne.n	80268a2 <lfs_dir_compact+0x3aa>
 8026894:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026898:	f083 0301 	eor.w	r3, r3, #1
 802689c:	b2db      	uxtb	r3, r3
 802689e:	2b00      	cmp	r3, #0
 80268a0:	d001      	beq.n	80268a6 <lfs_dir_compact+0x3ae>
            return err;
 80268a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80268a4:	e007      	b.n	80268b6 <lfs_dir_compact+0x3be>
        }

        tired = false;
 80268a6:	2300      	movs	r3, #0
 80268a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 80268ac:	bf00      	nop
    while (true) {
 80268ae:	e64c      	b.n	802654a <lfs_dir_compact+0x52>
        break;
 80268b0:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80268b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80268b6:	4618      	mov	r0, r3
 80268b8:	3768      	adds	r7, #104	; 0x68
 80268ba:	46bd      	mov	sp, r7
 80268bc:	bd80      	pop	{r7, pc}
 80268be:	bf00      	nop
 80268c0:	08026481 	.word	0x08026481
 80268c4:	400ffc00 	.word	0x400ffc00
 80268c8:	000ffc08 	.word	0x000ffc08
 80268cc:	7ffffc0c 	.word	0x7ffffc0c
 80268d0:	080337d8 	.word	0x080337d8
 80268d4:	08034978 	.word	0x08034978
 80268d8:	0803366c 	.word	0x0803366c
 80268dc:	08033780 	.word	0x08033780
 80268e0:	08033800 	.word	0x08033800
 80268e4:	08033824 	.word	0x08033824

080268e8 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80268e8:	b590      	push	{r4, r7, lr}
 80268ea:	b097      	sub	sp, #92	; 0x5c
 80268ec:	af0a      	add	r7, sp, #40	; 0x28
 80268ee:	60f8      	str	r0, [r7, #12]
 80268f0:	60b9      	str	r1, [r7, #8]
 80268f2:	607a      	str	r2, [r7, #4]
 80268f4:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80268f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80268fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80268fc:	e058      	b.n	80269b0 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80268fe:	2300      	movs	r3, #0
 8026900:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8026902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026904:	b29b      	uxth	r3, r3
 8026906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026908:	b292      	uxth	r2, r2
 802690a:	4252      	negs	r2, r2
 802690c:	b292      	uxth	r2, r2
 802690e:	b212      	sxth	r2, r2
 8026910:	f107 0118 	add.w	r1, r7, #24
 8026914:	9108      	str	r1, [sp, #32]
 8026916:	4979      	ldr	r1, [pc, #484]	; (8026afc <lfs_dir_splittingcompact+0x214>)
 8026918:	9107      	str	r1, [sp, #28]
 802691a:	9206      	str	r2, [sp, #24]
 802691c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026920:	9205      	str	r2, [sp, #20]
 8026922:	9304      	str	r3, [sp, #16]
 8026924:	2300      	movs	r3, #0
 8026926:	9303      	str	r3, [sp, #12]
 8026928:	4b75      	ldr	r3, [pc, #468]	; (8026b00 <lfs_dir_splittingcompact+0x218>)
 802692a:	9302      	str	r3, [sp, #8]
 802692c:	683b      	ldr	r3, [r7, #0]
 802692e:	9301      	str	r3, [sp, #4]
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	9300      	str	r3, [sp, #0]
 8026934:	f04f 33ff 	mov.w	r3, #4294967295
 8026938:	2200      	movs	r2, #0
 802693a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802693c:	68f8      	ldr	r0, [r7, #12]
 802693e:	f7fe f933 	bl	8024ba8 <lfs_dir_traverse>
 8026942:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8026944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026946:	2b00      	cmp	r3, #0
 8026948:	d001      	beq.n	802694e <lfs_dir_splittingcompact+0x66>
                return err;
 802694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802694c:	e0d1      	b.n	8026af2 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 802694e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026954:	1ad3      	subs	r3, r2, r3
 8026956:	2bfe      	cmp	r3, #254	; 0xfe
 8026958:	d822      	bhi.n	80269a0 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802695a:	68fb      	ldr	r3, [r7, #12]
 802695c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802695e:	69db      	ldr	r3, [r3, #28]
 8026960:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8026964:	68fb      	ldr	r3, [r7, #12]
 8026966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802696a:	2b00      	cmp	r3, #0
 802696c:	d004      	beq.n	8026978 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 802696e:	68fb      	ldr	r3, [r7, #12]
 8026970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026974:	085b      	lsrs	r3, r3, #1
 8026976:	e003      	b.n	8026980 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8026978:	68fb      	ldr	r3, [r7, #12]
 802697a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802697c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802697e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8026980:	68fa      	ldr	r2, [r7, #12]
 8026982:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026984:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026986:	4611      	mov	r1, r2
 8026988:	4618      	mov	r0, r3
 802698a:	f7fc fee0 	bl	802374e <lfs_alignup>
 802698e:	4603      	mov	r3, r0
 8026990:	4619      	mov	r1, r3
 8026992:	4620      	mov	r0, r4
 8026994:	f7fc feb6 	bl	8023704 <lfs_min>
 8026998:	4602      	mov	r2, r0
 802699a:	69bb      	ldr	r3, [r7, #24]
 802699c:	429a      	cmp	r2, r3
 802699e:	d20e      	bcs.n	80269be <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80269a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80269a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80269a6:	1ad3      	subs	r3, r2, r3
 80269a8:	085b      	lsrs	r3, r3, #1
 80269aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80269ac:	4413      	add	r3, r2
 80269ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80269b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80269b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80269b6:	1ad3      	subs	r3, r2, r3
 80269b8:	2b01      	cmp	r3, #1
 80269ba:	d8a0      	bhi.n	80268fe <lfs_dir_splittingcompact+0x16>
 80269bc:	e000      	b.n	80269c0 <lfs_dir_splittingcompact+0xd8>
                break;
 80269be:	bf00      	nop
        }

        if (split == begin) {
 80269c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80269c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80269c6:	429a      	cmp	r2, r3
 80269c8:	d02d      	beq.n	8026a26 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80269ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80269cc:	b29b      	uxth	r3, r3
 80269ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80269d2:	9202      	str	r2, [sp, #8]
 80269d4:	9301      	str	r3, [sp, #4]
 80269d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80269d8:	9300      	str	r3, [sp, #0]
 80269da:	683b      	ldr	r3, [r7, #0]
 80269dc:	687a      	ldr	r2, [r7, #4]
 80269de:	68b9      	ldr	r1, [r7, #8]
 80269e0:	68f8      	ldr	r0, [r7, #12]
 80269e2:	f7ff fce3 	bl	80263ac <lfs_dir_split>
 80269e6:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80269e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	d005      	beq.n	80269fa <lfs_dir_splittingcompact+0x112>
 80269ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80269f0:	f113 0f1c 	cmn.w	r3, #28
 80269f4:	d001      	beq.n	80269fa <lfs_dir_splittingcompact+0x112>
            return err;
 80269f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80269f8:	e07b      	b.n	8026af2 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 80269fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80269fc:	2b00      	cmp	r3, #0
 80269fe:	d00e      	beq.n	8026a1e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8026a00:	68bb      	ldr	r3, [r7, #8]
 8026a02:	681a      	ldr	r2, [r3, #0]
 8026a04:	68bb      	ldr	r3, [r7, #8]
 8026a06:	685b      	ldr	r3, [r3, #4]
 8026a08:	493e      	ldr	r1, [pc, #248]	; (8026b04 <lfs_dir_splittingcompact+0x21c>)
 8026a0a:	9101      	str	r1, [sp, #4]
 8026a0c:	9300      	str	r3, [sp, #0]
 8026a0e:	4613      	mov	r3, r2
 8026a10:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8026a14:	493c      	ldr	r1, [pc, #240]	; (8026b08 <lfs_dir_splittingcompact+0x220>)
 8026a16:	483d      	ldr	r0, [pc, #244]	; (8026b0c <lfs_dir_splittingcompact+0x224>)
 8026a18:	f006 fdf2 	bl	802d600 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8026a1c:	e004      	b.n	8026a28 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8026a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026a20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8026a24:	e767      	b.n	80268f6 <lfs_dir_splittingcompact+0xe>
            break;
 8026a26:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8026a28:	68b9      	ldr	r1, [r7, #8]
 8026a2a:	68f8      	ldr	r0, [r7, #12]
 8026a2c:	f7ff fd3d 	bl	80264aa <lfs_dir_needsrelocation>
 8026a30:	4603      	mov	r3, r0
 8026a32:	2b00      	cmp	r3, #0
 8026a34:	d04e      	beq.n	8026ad4 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026a36:	68bb      	ldr	r3, [r7, #8]
 8026a38:	2200      	movs	r2, #0
 8026a3a:	613a      	str	r2, [r7, #16]
 8026a3c:	2201      	movs	r2, #1
 8026a3e:	617a      	str	r2, [r7, #20]
 8026a40:	f107 0210 	add.w	r2, r7, #16
 8026a44:	4611      	mov	r1, r2
 8026a46:	4618      	mov	r0, r3
 8026a48:	f7fd fa8c 	bl	8023f64 <lfs_pair_cmp>
 8026a4c:	4603      	mov	r3, r0
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	d140      	bne.n	8026ad4 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8026a52:	68f8      	ldr	r0, [r7, #12]
 8026a54:	f003 fe4c 	bl	802a6f0 <lfs_fs_rawsize>
 8026a58:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8026a5a:	6a3b      	ldr	r3, [r7, #32]
 8026a5c:	2b00      	cmp	r3, #0
 8026a5e:	da01      	bge.n	8026a64 <lfs_dir_splittingcompact+0x17c>
            return size;
 8026a60:	6a3b      	ldr	r3, [r7, #32]
 8026a62:	e046      	b.n	8026af2 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8026a64:	68fb      	ldr	r3, [r7, #12]
 8026a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026a68:	6a1b      	ldr	r3, [r3, #32]
 8026a6a:	085a      	lsrs	r2, r3, #1
 8026a6c:	6a3b      	ldr	r3, [r7, #32]
 8026a6e:	429a      	cmp	r2, r3
 8026a70:	d930      	bls.n	8026ad4 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8026a72:	68bb      	ldr	r3, [r7, #8]
 8026a74:	689b      	ldr	r3, [r3, #8]
 8026a76:	4a23      	ldr	r2, [pc, #140]	; (8026b04 <lfs_dir_splittingcompact+0x21c>)
 8026a78:	9200      	str	r2, [sp, #0]
 8026a7a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8026a7e:	4922      	ldr	r1, [pc, #136]	; (8026b08 <lfs_dir_splittingcompact+0x220>)
 8026a80:	4823      	ldr	r0, [pc, #140]	; (8026b10 <lfs_dir_splittingcompact+0x228>)
 8026a82:	f006 fdbd 	bl	802d600 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026a86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026a8a:	9302      	str	r3, [sp, #8]
 8026a8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026a90:	9301      	str	r3, [sp, #4]
 8026a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026a94:	9300      	str	r3, [sp, #0]
 8026a96:	683b      	ldr	r3, [r7, #0]
 8026a98:	687a      	ldr	r2, [r7, #4]
 8026a9a:	68b9      	ldr	r1, [r7, #8]
 8026a9c:	68f8      	ldr	r0, [r7, #12]
 8026a9e:	f7ff fc85 	bl	80263ac <lfs_dir_split>
 8026aa2:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026aa4:	69fb      	ldr	r3, [r7, #28]
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	d005      	beq.n	8026ab6 <lfs_dir_splittingcompact+0x1ce>
 8026aaa:	69fb      	ldr	r3, [r7, #28]
 8026aac:	f113 0f1c 	cmn.w	r3, #28
 8026ab0:	d001      	beq.n	8026ab6 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026ab2:	69fb      	ldr	r3, [r7, #28]
 8026ab4:	e01d      	b.n	8026af2 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026ab6:	69fb      	ldr	r3, [r7, #28]
 8026ab8:	2b00      	cmp	r3, #0
 8026aba:	d007      	beq.n	8026acc <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8026abc:	4b11      	ldr	r3, [pc, #68]	; (8026b04 <lfs_dir_splittingcompact+0x21c>)
 8026abe:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8026ac2:	4911      	ldr	r1, [pc, #68]	; (8026b08 <lfs_dir_splittingcompact+0x220>)
 8026ac4:	4813      	ldr	r0, [pc, #76]	; (8026b14 <lfs_dir_splittingcompact+0x22c>)
 8026ac6:	f006 fd9b 	bl	802d600 <iprintf>
 8026aca:	e003      	b.n	8026ad4 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8026acc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026ad0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8026ad4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026ad8:	9302      	str	r3, [sp, #8]
 8026ada:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026ade:	9301      	str	r3, [sp, #4]
 8026ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026ae2:	9300      	str	r3, [sp, #0]
 8026ae4:	683b      	ldr	r3, [r7, #0]
 8026ae6:	687a      	ldr	r2, [r7, #4]
 8026ae8:	68b9      	ldr	r1, [r7, #8]
 8026aea:	68f8      	ldr	r0, [r7, #12]
 8026aec:	f7ff fd04 	bl	80264f8 <lfs_dir_compact>
 8026af0:	4603      	mov	r3, r0
}
 8026af2:	4618      	mov	r0, r3
 8026af4:	3734      	adds	r7, #52	; 0x34
 8026af6:	46bd      	mov	sp, r7
 8026af8:	bd90      	pop	{r4, r7, pc}
 8026afa:	bf00      	nop
 8026afc:	08026455 	.word	0x08026455
 8026b00:	400ffc00 	.word	0x400ffc00
 8026b04:	08033780 	.word	0x08033780
 8026b08:	0803366c 	.word	0x0803366c
 8026b0c:	0803385c 	.word	0x0803385c
 8026b10:	0803388c 	.word	0x0803388c
 8026b14:	080338bc 	.word	0x080338bc

08026b18 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8026b18:	b5b0      	push	{r4, r5, r7, lr}
 8026b1a:	b0a6      	sub	sp, #152	; 0x98
 8026b1c:	af0a      	add	r7, sp, #40	; 0x28
 8026b1e:	60f8      	str	r0, [r7, #12]
 8026b20:	60b9      	str	r1, [r7, #8]
 8026b22:	607a      	str	r2, [r7, #4]
 8026b24:	603b      	str	r3, [r7, #0]
    int state = 0;
 8026b26:	2300      	movs	r3, #0
 8026b28:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8026b2a:	2300      	movs	r3, #0
 8026b2c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8026b30:	2300      	movs	r3, #0
 8026b32:	667b      	str	r3, [r7, #100]	; 0x64
 8026b34:	e06d      	b.n	8026c12 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8026b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026b38:	00db      	lsls	r3, r3, #3
 8026b3a:	683a      	ldr	r2, [r7, #0]
 8026b3c:	4413      	add	r3, r2
 8026b3e:	681b      	ldr	r3, [r3, #0]
 8026b40:	4618      	mov	r0, r3
 8026b42:	f7fd facb 	bl	80240dc <lfs_tag_type3>
 8026b46:	4603      	mov	r3, r0
 8026b48:	461a      	mov	r2, r3
 8026b4a:	f240 4301 	movw	r3, #1025	; 0x401
 8026b4e:	429a      	cmp	r2, r3
 8026b50:	d106      	bne.n	8026b60 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8026b52:	68bb      	ldr	r3, [r7, #8]
 8026b54:	8a9b      	ldrh	r3, [r3, #20]
 8026b56:	3301      	adds	r3, #1
 8026b58:	b29a      	uxth	r2, r3
 8026b5a:	68bb      	ldr	r3, [r7, #8]
 8026b5c:	829a      	strh	r2, [r3, #20]
 8026b5e:	e055      	b.n	8026c0c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8026b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026b62:	00db      	lsls	r3, r3, #3
 8026b64:	683a      	ldr	r2, [r7, #0]
 8026b66:	4413      	add	r3, r2
 8026b68:	681b      	ldr	r3, [r3, #0]
 8026b6a:	4618      	mov	r0, r3
 8026b6c:	f7fd fab6 	bl	80240dc <lfs_tag_type3>
 8026b70:	4603      	mov	r3, r0
 8026b72:	461a      	mov	r2, r3
 8026b74:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026b78:	429a      	cmp	r2, r3
 8026b7a:	d114      	bne.n	8026ba6 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8026b7c:	68bb      	ldr	r3, [r7, #8]
 8026b7e:	8a9b      	ldrh	r3, [r3, #20]
 8026b80:	2b00      	cmp	r3, #0
 8026b82:	d106      	bne.n	8026b92 <lfs_dir_relocatingcommit+0x7a>
 8026b84:	4ba4      	ldr	r3, [pc, #656]	; (8026e18 <lfs_dir_relocatingcommit+0x300>)
 8026b86:	4aa5      	ldr	r2, [pc, #660]	; (8026e1c <lfs_dir_relocatingcommit+0x304>)
 8026b88:	f240 71df 	movw	r1, #2015	; 0x7df
 8026b8c:	48a4      	ldr	r0, [pc, #656]	; (8026e20 <lfs_dir_relocatingcommit+0x308>)
 8026b8e:	f005 fcfd 	bl	802c58c <__assert_func>
            dir->count -= 1;
 8026b92:	68bb      	ldr	r3, [r7, #8]
 8026b94:	8a9b      	ldrh	r3, [r3, #20]
 8026b96:	3b01      	subs	r3, #1
 8026b98:	b29a      	uxth	r2, r3
 8026b9a:	68bb      	ldr	r3, [r7, #8]
 8026b9c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8026b9e:	2301      	movs	r3, #1
 8026ba0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8026ba4:	e032      	b.n	8026c0c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026ba8:	00db      	lsls	r3, r3, #3
 8026baa:	683a      	ldr	r2, [r7, #0]
 8026bac:	4413      	add	r3, r2
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	4618      	mov	r0, r3
 8026bb2:	f7fd fa83 	bl	80240bc <lfs_tag_type1>
 8026bb6:	4603      	mov	r3, r0
 8026bb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8026bbc:	d126      	bne.n	8026c0c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8026bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026bc0:	00db      	lsls	r3, r3, #3
 8026bc2:	683a      	ldr	r2, [r7, #0]
 8026bc4:	4413      	add	r3, r2
 8026bc6:	685b      	ldr	r3, [r3, #4]
 8026bc8:	681a      	ldr	r2, [r3, #0]
 8026bca:	68bb      	ldr	r3, [r7, #8]
 8026bcc:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8026bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026bd0:	00db      	lsls	r3, r3, #3
 8026bd2:	683a      	ldr	r2, [r7, #0]
 8026bd4:	4413      	add	r3, r2
 8026bd6:	685b      	ldr	r3, [r3, #4]
 8026bd8:	685a      	ldr	r2, [r3, #4]
 8026bda:	68bb      	ldr	r3, [r7, #8]
 8026bdc:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8026bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026be0:	00db      	lsls	r3, r3, #3
 8026be2:	683a      	ldr	r2, [r7, #0]
 8026be4:	4413      	add	r3, r2
 8026be6:	681b      	ldr	r3, [r3, #0]
 8026be8:	4618      	mov	r0, r3
 8026bea:	f7fd fa87 	bl	80240fc <lfs_tag_chunk>
 8026bee:	4603      	mov	r3, r0
 8026bf0:	f003 0301 	and.w	r3, r3, #1
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	bf14      	ite	ne
 8026bf8:	2301      	movne	r3, #1
 8026bfa:	2300      	moveq	r3, #0
 8026bfc:	b2da      	uxtb	r2, r3
 8026bfe:	68bb      	ldr	r3, [r7, #8]
 8026c00:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8026c02:	68bb      	ldr	r3, [r7, #8]
 8026c04:	3318      	adds	r3, #24
 8026c06:	4618      	mov	r0, r3
 8026c08:	f7fd fa03 	bl	8024012 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8026c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026c0e:	3301      	adds	r3, #1
 8026c10:	667b      	str	r3, [r7, #100]	; 0x64
 8026c12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8026c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026c18:	429a      	cmp	r2, r3
 8026c1a:	db8c      	blt.n	8026b36 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8026c1c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8026c20:	2b00      	cmp	r3, #0
 8026c22:	d02b      	beq.n	8026c7c <lfs_dir_relocatingcommit+0x164>
 8026c24:	68bb      	ldr	r3, [r7, #8]
 8026c26:	8a9b      	ldrh	r3, [r3, #20]
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	d127      	bne.n	8026c7c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8026c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026c30:	2b00      	cmp	r3, #0
 8026c32:	d106      	bne.n	8026c42 <lfs_dir_relocatingcommit+0x12a>
 8026c34:	4b7b      	ldr	r3, [pc, #492]	; (8026e24 <lfs_dir_relocatingcommit+0x30c>)
 8026c36:	4a79      	ldr	r2, [pc, #484]	; (8026e1c <lfs_dir_relocatingcommit+0x304>)
 8026c38:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8026c3c:	4878      	ldr	r0, [pc, #480]	; (8026e20 <lfs_dir_relocatingcommit+0x308>)
 8026c3e:	f005 fca5 	bl	802c58c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8026c42:	68bb      	ldr	r3, [r7, #8]
 8026c44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026c48:	4619      	mov	r1, r3
 8026c4a:	68f8      	ldr	r0, [r7, #12]
 8026c4c:	f003 f9c2 	bl	8029fd4 <lfs_fs_pred>
 8026c50:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8026c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026c54:	2b00      	cmp	r3, #0
 8026c56:	d005      	beq.n	8026c64 <lfs_dir_relocatingcommit+0x14c>
 8026c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026c5a:	f113 0f02 	cmn.w	r3, #2
 8026c5e:	d001      	beq.n	8026c64 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8026c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026c62:	e204      	b.n	802706e <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8026c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026c66:	f113 0f02 	cmn.w	r3, #2
 8026c6a:	d007      	beq.n	8026c7c <lfs_dir_relocatingcommit+0x164>
 8026c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026c70:	7ddb      	ldrb	r3, [r3, #23]
 8026c72:	2b00      	cmp	r3, #0
 8026c74:	d002      	beq.n	8026c7c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8026c76:	2302      	movs	r3, #2
 8026c78:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8026c7a:	e121      	b.n	8026ec0 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8026c7c:	68bb      	ldr	r3, [r7, #8]
 8026c7e:	7d9b      	ldrb	r3, [r3, #22]
 8026c80:	2b00      	cmp	r3, #0
 8026c82:	f000 80fb 	beq.w	8026e7c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026c86:	68bb      	ldr	r3, [r7, #8]
 8026c88:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8026c8a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8026c8c:	68bb      	ldr	r3, [r7, #8]
 8026c8e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026c90:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8026c92:	68bb      	ldr	r3, [r7, #8]
 8026c94:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8026c98:	f04f 33ff 	mov.w	r3, #4294967295
 8026c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8026c9e:	68bb      	ldr	r3, [r7, #8]
 8026ca0:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026ca2:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8026ca4:	68fb      	ldr	r3, [r7, #12]
 8026ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026caa:	2b00      	cmp	r3, #0
 8026cac:	d004      	beq.n	8026cb8 <lfs_dir_relocatingcommit+0x1a0>
 8026cae:	68fb      	ldr	r3, [r7, #12]
 8026cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026cb4:	3b08      	subs	r3, #8
 8026cb6:	e003      	b.n	8026cc0 <lfs_dir_relocatingcommit+0x1a8>
 8026cb8:	68fb      	ldr	r3, [r7, #12]
 8026cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026cbc:	69db      	ldr	r3, [r3, #28]
 8026cbe:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026cc0:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026cc2:	68bb      	ldr	r3, [r7, #8]
 8026cc4:	3318      	adds	r3, #24
 8026cc6:	4618      	mov	r0, r3
 8026cc8:	f7fd f9bd 	bl	8024046 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8026ccc:	68bb      	ldr	r3, [r7, #8]
 8026cce:	68da      	ldr	r2, [r3, #12]
 8026cd0:	68bb      	ldr	r3, [r7, #8]
 8026cd2:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026cd4:	68fb      	ldr	r3, [r7, #12]
 8026cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8026cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8026cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026ce2:	9308      	str	r3, [sp, #32]
 8026ce4:	4b50      	ldr	r3, [pc, #320]	; (8026e28 <lfs_dir_relocatingcommit+0x310>)
 8026ce6:	9307      	str	r3, [sp, #28]
 8026ce8:	2300      	movs	r3, #0
 8026cea:	9306      	str	r3, [sp, #24]
 8026cec:	2300      	movs	r3, #0
 8026cee:	9305      	str	r3, [sp, #20]
 8026cf0:	2300      	movs	r3, #0
 8026cf2:	9304      	str	r3, [sp, #16]
 8026cf4:	2300      	movs	r3, #0
 8026cf6:	9303      	str	r3, [sp, #12]
 8026cf8:	2300      	movs	r3, #0
 8026cfa:	9302      	str	r3, [sp, #8]
 8026cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026d00:	9301      	str	r3, [sp, #4]
 8026d02:	683b      	ldr	r3, [r7, #0]
 8026d04:	9300      	str	r3, [sp, #0]
 8026d06:	460b      	mov	r3, r1
 8026d08:	68b9      	ldr	r1, [r7, #8]
 8026d0a:	68f8      	ldr	r0, [r7, #12]
 8026d0c:	f7fd ff4c 	bl	8024ba8 <lfs_dir_traverse>
 8026d10:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026d12:	68bb      	ldr	r3, [r7, #8]
 8026d14:	3318      	adds	r3, #24
 8026d16:	4618      	mov	r0, r3
 8026d18:	f7fd f97b 	bl	8024012 <lfs_pair_fromle32>
        if (err) {
 8026d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	d00b      	beq.n	8026d3a <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026d24:	f113 0f1c 	cmn.w	r3, #28
 8026d28:	f000 80aa 	beq.w	8026e80 <lfs_dir_relocatingcommit+0x368>
 8026d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026d2e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026d32:	f000 80a5 	beq.w	8026e80 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8026d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026d38:	e199      	b.n	802706e <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8026d3a:	f107 031c 	add.w	r3, r7, #28
 8026d3e:	2200      	movs	r2, #0
 8026d40:	601a      	str	r2, [r3, #0]
 8026d42:	605a      	str	r2, [r3, #4]
 8026d44:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026d46:	68fb      	ldr	r3, [r7, #12]
 8026d48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8026d4c:	f107 031c 	add.w	r3, r7, #28
 8026d50:	4611      	mov	r1, r2
 8026d52:	4618      	mov	r0, r3
 8026d54:	f7fd fa1d 	bl	8024192 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026d58:	68fb      	ldr	r3, [r7, #12]
 8026d5a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026d5e:	f107 031c 	add.w	r3, r7, #28
 8026d62:	4611      	mov	r1, r2
 8026d64:	4618      	mov	r0, r3
 8026d66:	f7fd fa14 	bl	8024192 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8026d6a:	68fb      	ldr	r3, [r7, #12]
 8026d6c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8026d70:	f107 031c 	add.w	r3, r7, #28
 8026d74:	4611      	mov	r1, r2
 8026d76:	4618      	mov	r0, r3
 8026d78:	f7fd fa0b 	bl	8024192 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026d7c:	69fb      	ldr	r3, [r7, #28]
 8026d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026d82:	f023 0303 	bic.w	r3, r3, #3
 8026d86:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8026d88:	f107 031c 	add.w	r3, r7, #28
 8026d8c:	4618      	mov	r0, r3
 8026d8e:	f7fd fa25 	bl	80241dc <lfs_gstate_iszero>
 8026d92:	4603      	mov	r3, r0
 8026d94:	f083 0301 	eor.w	r3, r3, #1
 8026d98:	b2db      	uxtb	r3, r3
 8026d9a:	2b00      	cmp	r3, #0
 8026d9c:	d027      	beq.n	8026dee <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026d9e:	f107 031c 	add.w	r3, r7, #28
 8026da2:	461a      	mov	r2, r3
 8026da4:	68b9      	ldr	r1, [r7, #8]
 8026da6:	68f8      	ldr	r0, [r7, #12]
 8026da8:	f7fe fe68 	bl	8025a7c <lfs_dir_getgstate>
 8026dac:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8026dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026db0:	2b00      	cmp	r3, #0
 8026db2:	d001      	beq.n	8026db8 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8026db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026db6:	e15a      	b.n	802706e <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8026db8:	f107 031c 	add.w	r3, r7, #28
 8026dbc:	4618      	mov	r0, r3
 8026dbe:	f7fd fa9f 	bl	8024300 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8026dc2:	f107 031c 	add.w	r3, r7, #28
 8026dc6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8026dca:	4a18      	ldr	r2, [pc, #96]	; (8026e2c <lfs_dir_relocatingcommit+0x314>)
 8026dcc:	68f8      	ldr	r0, [r7, #12]
 8026dce:	f7ff f87b 	bl	8025ec8 <lfs_dir_commitattr>
 8026dd2:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8026dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026dd6:	2b00      	cmp	r3, #0
 8026dd8:	d009      	beq.n	8026dee <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ddc:	f113 0f1c 	cmn.w	r3, #28
 8026de0:	d050      	beq.n	8026e84 <lfs_dir_relocatingcommit+0x36c>
 8026de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026de4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026de8:	d04c      	beq.n	8026e84 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8026dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026dec:	e13f      	b.n	802706e <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8026dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026df2:	4619      	mov	r1, r3
 8026df4:	68f8      	ldr	r0, [r7, #12]
 8026df6:	f7ff f8e7 	bl	8025fc8 <lfs_dir_commitcrc>
 8026dfa:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8026dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026dfe:	2b00      	cmp	r3, #0
 8026e00:	d016      	beq.n	8026e30 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026e04:	f113 0f1c 	cmn.w	r3, #28
 8026e08:	d03e      	beq.n	8026e88 <lfs_dir_relocatingcommit+0x370>
 8026e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026e0c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026e10:	d03a      	beq.n	8026e88 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8026e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026e14:	e12b      	b.n	802706e <lfs_dir_relocatingcommit+0x556>
 8026e16:	bf00      	nop
 8026e18:	080338e8 	.word	0x080338e8
 8026e1c:	08034988 	.word	0x08034988
 8026e20:	0803366c 	.word	0x0803366c
 8026e24:	080338f8 	.word	0x080338f8
 8026e28:	08026481 	.word	0x08026481
 8026e2c:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026e32:	68fa      	ldr	r2, [r7, #12]
 8026e34:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026e36:	6992      	ldr	r2, [r2, #24]
 8026e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8026e3c:	fb01 f202 	mul.w	r2, r1, r2
 8026e40:	1a9b      	subs	r3, r3, r2
 8026e42:	2b00      	cmp	r3, #0
 8026e44:	d006      	beq.n	8026e54 <lfs_dir_relocatingcommit+0x33c>
 8026e46:	4b8c      	ldr	r3, [pc, #560]	; (8027078 <lfs_dir_relocatingcommit+0x560>)
 8026e48:	4a8c      	ldr	r2, [pc, #560]	; (802707c <lfs_dir_relocatingcommit+0x564>)
 8026e4a:	f640 0136 	movw	r1, #2102	; 0x836
 8026e4e:	488c      	ldr	r0, [pc, #560]	; (8027080 <lfs_dir_relocatingcommit+0x568>)
 8026e50:	f005 fb9c 	bl	802c58c <__assert_func>
        dir->off = commit.off;
 8026e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026e56:	68bb      	ldr	r3, [r7, #8]
 8026e58:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8026e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026e5c:	68bb      	ldr	r3, [r7, #8]
 8026e5e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8026e60:	68fb      	ldr	r3, [r7, #12]
 8026e62:	68fa      	ldr	r2, [r7, #12]
 8026e64:	333c      	adds	r3, #60	; 0x3c
 8026e66:	3230      	adds	r2, #48	; 0x30
 8026e68:	ca07      	ldmia	r2, {r0, r1, r2}
 8026e6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8026e6e:	68fb      	ldr	r3, [r7, #12]
 8026e70:	3348      	adds	r3, #72	; 0x48
 8026e72:	2200      	movs	r2, #0
 8026e74:	601a      	str	r2, [r3, #0]
 8026e76:	605a      	str	r2, [r3, #4]
 8026e78:	609a      	str	r2, [r3, #8]
 8026e7a:	e021      	b.n	8026ec0 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8026e7c:	bf00      	nop
 8026e7e:	e004      	b.n	8026e8a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026e80:	bf00      	nop
 8026e82:	e002      	b.n	8026e8a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8026e84:	bf00      	nop
 8026e86:	e000      	b.n	8026e8a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026e88:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8026e8a:	68fb      	ldr	r3, [r7, #12]
 8026e8c:	3310      	adds	r3, #16
 8026e8e:	4619      	mov	r1, r3
 8026e90:	68f8      	ldr	r0, [r7, #12]
 8026e92:	f7fc fced 	bl	8023870 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8026e96:	68bb      	ldr	r3, [r7, #8]
 8026e98:	8a9b      	ldrh	r3, [r3, #20]
 8026e9a:	9302      	str	r3, [sp, #8]
 8026e9c:	2300      	movs	r3, #0
 8026e9e:	9301      	str	r3, [sp, #4]
 8026ea0:	68bb      	ldr	r3, [r7, #8]
 8026ea2:	9300      	str	r3, [sp, #0]
 8026ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026ea8:	683a      	ldr	r2, [r7, #0]
 8026eaa:	68b9      	ldr	r1, [r7, #8]
 8026eac:	68f8      	ldr	r0, [r7, #12]
 8026eae:	f7ff fd1b 	bl	80268e8 <lfs_dir_splittingcompact>
 8026eb2:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8026eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026eb6:	2b00      	cmp	r3, #0
 8026eb8:	da01      	bge.n	8026ebe <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8026eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026ebc:	e0d7      	b.n	802706e <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8026ebe:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	681b      	ldr	r3, [r3, #0]
 8026ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8026ec6:	687b      	ldr	r3, [r7, #4]
 8026ec8:	3304      	adds	r3, #4
 8026eca:	681b      	ldr	r3, [r3, #0]
 8026ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026ece:	68fb      	ldr	r3, [r7, #12]
 8026ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8026ed4:	e0c6      	b.n	8027064 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8026ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ed8:	3308      	adds	r3, #8
 8026eda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8026ede:	4611      	mov	r1, r2
 8026ee0:	4618      	mov	r0, r3
 8026ee2:	f7fd f83f 	bl	8023f64 <lfs_pair_cmp>
 8026ee6:	4603      	mov	r3, r0
 8026ee8:	2b00      	cmp	r3, #0
 8026eea:	f040 80b8 	bne.w	802705e <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 8026eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ef0:	68ba      	ldr	r2, [r7, #8]
 8026ef2:	f103 0408 	add.w	r4, r3, #8
 8026ef6:	4615      	mov	r5, r2
 8026ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026efc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8026f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026f06:	3308      	adds	r3, #8
 8026f08:	687a      	ldr	r2, [r7, #4]
 8026f0a:	429a      	cmp	r2, r3
 8026f0c:	f000 809d 	beq.w	802704a <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8026f10:	2300      	movs	r3, #0
 8026f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026f14:	e07b      	b.n	802700e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026f18:	00db      	lsls	r3, r3, #3
 8026f1a:	683a      	ldr	r2, [r7, #0]
 8026f1c:	4413      	add	r3, r2
 8026f1e:	681b      	ldr	r3, [r3, #0]
 8026f20:	4618      	mov	r0, r3
 8026f22:	f7fd f8db 	bl	80240dc <lfs_tag_type3>
 8026f26:	4603      	mov	r3, r0
 8026f28:	461a      	mov	r2, r3
 8026f2a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026f2e:	429a      	cmp	r2, r3
 8026f30:	d115      	bne.n	8026f5e <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8026f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026f34:	889c      	ldrh	r4, [r3, #4]
 8026f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026f38:	00db      	lsls	r3, r3, #3
 8026f3a:	683a      	ldr	r2, [r7, #0]
 8026f3c:	4413      	add	r3, r2
 8026f3e:	681b      	ldr	r3, [r3, #0]
 8026f40:	4618      	mov	r0, r3
 8026f42:	f7fd f8f5 	bl	8024130 <lfs_tag_id>
 8026f46:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026f48:	429c      	cmp	r4, r3
 8026f4a:	d108      	bne.n	8026f5e <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8026f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8026f52:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8026f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026f56:	f04f 32ff 	mov.w	r2, #4294967295
 8026f5a:	60da      	str	r2, [r3, #12]
 8026f5c:	e054      	b.n	8027008 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026f60:	00db      	lsls	r3, r3, #3
 8026f62:	683a      	ldr	r2, [r7, #0]
 8026f64:	4413      	add	r3, r2
 8026f66:	681b      	ldr	r3, [r3, #0]
 8026f68:	4618      	mov	r0, r3
 8026f6a:	f7fd f8b7 	bl	80240dc <lfs_tag_type3>
 8026f6e:	4603      	mov	r3, r0
 8026f70:	461a      	mov	r2, r3
 8026f72:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026f76:	429a      	cmp	r2, r3
 8026f78:	d11c      	bne.n	8026fb4 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8026f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026f7c:	889c      	ldrh	r4, [r3, #4]
 8026f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026f80:	00db      	lsls	r3, r3, #3
 8026f82:	683a      	ldr	r2, [r7, #0]
 8026f84:	4413      	add	r3, r2
 8026f86:	681b      	ldr	r3, [r3, #0]
 8026f88:	4618      	mov	r0, r3
 8026f8a:	f7fd f8d1 	bl	8024130 <lfs_tag_id>
 8026f8e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026f90:	429c      	cmp	r4, r3
 8026f92:	d90f      	bls.n	8026fb4 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8026f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026f96:	889b      	ldrh	r3, [r3, #4]
 8026f98:	3b01      	subs	r3, #1
 8026f9a:	b29a      	uxth	r2, r3
 8026f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026f9e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026fa2:	799b      	ldrb	r3, [r3, #6]
 8026fa4:	2b02      	cmp	r3, #2
 8026fa6:	d12f      	bne.n	8027008 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8026fa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026fac:	1e5a      	subs	r2, r3, #1
 8026fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026fb0:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8026fb2:	e029      	b.n	8027008 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026fb6:	00db      	lsls	r3, r3, #3
 8026fb8:	683a      	ldr	r2, [r7, #0]
 8026fba:	4413      	add	r3, r2
 8026fbc:	681b      	ldr	r3, [r3, #0]
 8026fbe:	4618      	mov	r0, r3
 8026fc0:	f7fd f88c 	bl	80240dc <lfs_tag_type3>
 8026fc4:	4603      	mov	r3, r0
 8026fc6:	461a      	mov	r2, r3
 8026fc8:	f240 4301 	movw	r3, #1025	; 0x401
 8026fcc:	429a      	cmp	r2, r3
 8026fce:	d11b      	bne.n	8027008 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8026fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026fd2:	889c      	ldrh	r4, [r3, #4]
 8026fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026fd6:	00db      	lsls	r3, r3, #3
 8026fd8:	683a      	ldr	r2, [r7, #0]
 8026fda:	4413      	add	r3, r2
 8026fdc:	681b      	ldr	r3, [r3, #0]
 8026fde:	4618      	mov	r0, r3
 8026fe0:	f7fd f8a6 	bl	8024130 <lfs_tag_id>
 8026fe4:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026fe6:	429c      	cmp	r4, r3
 8026fe8:	d30e      	bcc.n	8027008 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8026fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026fec:	889b      	ldrh	r3, [r3, #4]
 8026fee:	3301      	adds	r3, #1
 8026ff0:	b29a      	uxth	r2, r3
 8026ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ff4:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ff8:	799b      	ldrb	r3, [r3, #6]
 8026ffa:	2b02      	cmp	r3, #2
 8026ffc:	d104      	bne.n	8027008 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8026ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027002:	1c5a      	adds	r2, r3, #1
 8027004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027006:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8027008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802700a:	3301      	adds	r3, #1
 802700c:	65fb      	str	r3, [r7, #92]	; 0x5c
 802700e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8027010:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8027014:	429a      	cmp	r2, r3
 8027016:	f6ff af7e 	blt.w	8026f16 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 802701a:	e016      	b.n	802704a <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 802701c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802701e:	889a      	ldrh	r2, [r3, #4]
 8027020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027022:	8b9b      	ldrh	r3, [r3, #28]
 8027024:	1ad3      	subs	r3, r2, r3
 8027026:	b29a      	uxth	r2, r3
 8027028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802702a:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 802702c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802702e:	f103 0108 	add.w	r1, r3, #8
 8027032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027034:	3320      	adds	r3, #32
 8027036:	461a      	mov	r2, r3
 8027038:	68f8      	ldr	r0, [r7, #12]
 802703a:	f7fe fd03 	bl	8025a44 <lfs_dir_fetch>
 802703e:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8027040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027042:	2b00      	cmp	r3, #0
 8027044:	d001      	beq.n	802704a <lfs_dir_relocatingcommit+0x532>
                    return err;
 8027046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027048:	e011      	b.n	802706e <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 802704a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802704c:	889a      	ldrh	r2, [r3, #4]
 802704e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027050:	8b9b      	ldrh	r3, [r3, #28]
 8027052:	429a      	cmp	r2, r3
 8027054:	d303      	bcc.n	802705e <lfs_dir_relocatingcommit+0x546>
 8027056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027058:	7fdb      	ldrb	r3, [r3, #31]
 802705a:	2b00      	cmp	r3, #0
 802705c:	d1de      	bne.n	802701c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802705e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027060:	681b      	ldr	r3, [r3, #0]
 8027062:	663b      	str	r3, [r7, #96]	; 0x60
 8027064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027066:	2b00      	cmp	r3, #0
 8027068:	f47f af35 	bne.w	8026ed6 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 802706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 802706e:	4618      	mov	r0, r3
 8027070:	3770      	adds	r7, #112	; 0x70
 8027072:	46bd      	mov	sp, r7
 8027074:	bdb0      	pop	{r4, r5, r7, pc}
 8027076:	bf00      	nop
 8027078:	080337d8 	.word	0x080337d8
 802707c:	08034988 	.word	0x08034988
 8027080:	0803366c 	.word	0x0803366c

08027084 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027084:	b5b0      	push	{r4, r5, r7, lr}
 8027086:	b0bc      	sub	sp, #240	; 0xf0
 8027088:	af04      	add	r7, sp, #16
 802708a:	60f8      	str	r0, [r7, #12]
 802708c:	60b9      	str	r1, [r7, #8]
 802708e:	607a      	str	r2, [r7, #4]
 8027090:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8027092:	68fb      	ldr	r3, [r7, #12]
 8027094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802709a:	e045      	b.n	8027128 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 802709c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80270a0:	3308      	adds	r3, #8
 80270a2:	68ba      	ldr	r2, [r7, #8]
 80270a4:	429a      	cmp	r2, r3
 80270a6:	d03a      	beq.n	802711e <lfs_dir_orphaningcommit+0x9a>
 80270a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80270ac:	3308      	adds	r3, #8
 80270ae:	68ba      	ldr	r2, [r7, #8]
 80270b0:	4611      	mov	r1, r2
 80270b2:	4618      	mov	r0, r3
 80270b4:	f7fc ff56 	bl	8023f64 <lfs_pair_cmp>
 80270b8:	4603      	mov	r3, r0
 80270ba:	2b00      	cmp	r3, #0
 80270bc:	d12f      	bne.n	802711e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80270be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80270c2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80270c4:	2b01      	cmp	r3, #1
 80270c6:	d12a      	bne.n	802711e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80270c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80270cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80270ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80270d2:	2b00      	cmp	r3, #0
 80270d4:	d023      	beq.n	802711e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80270d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80270da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80270dc:	68fb      	ldr	r3, [r7, #12]
 80270de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80270e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80270e2:	429a      	cmp	r2, r3
 80270e4:	d91b      	bls.n	802711e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80270e6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80270ea:	68f8      	ldr	r0, [r7, #12]
 80270ec:	f001 fa26 	bl	802853c <lfs_file_outline>
 80270f0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80270f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80270f8:	2b00      	cmp	r3, #0
 80270fa:	d002      	beq.n	8027102 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80270fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8027100:	e2ad      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8027102:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8027106:	68f8      	ldr	r0, [r7, #12]
 8027108:	f001 fa3a 	bl	8028580 <lfs_file_flush>
 802710c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8027110:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8027114:	2b00      	cmp	r3, #0
 8027116:	d002      	beq.n	802711e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8027118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 802711c:	e29f      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802711e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027122:	681b      	ldr	r3, [r3, #0]
 8027124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8027128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802712c:	2b00      	cmp	r3, #0
 802712e:	d1b5      	bne.n	802709c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8027130:	68bb      	ldr	r3, [r7, #8]
 8027132:	681b      	ldr	r3, [r3, #0]
 8027134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8027138:	68bb      	ldr	r3, [r7, #8]
 802713a:	685b      	ldr	r3, [r3, #4]
 802713c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8027140:	68bb      	ldr	r3, [r7, #8]
 8027142:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027146:	461d      	mov	r5, r3
 8027148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802714a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802714c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8027154:	68ba      	ldr	r2, [r7, #8]
 8027156:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 802715a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802715e:	9301      	str	r3, [sp, #4]
 8027160:	683b      	ldr	r3, [r7, #0]
 8027162:	9300      	str	r3, [sp, #0]
 8027164:	687b      	ldr	r3, [r7, #4]
 8027166:	68f8      	ldr	r0, [r7, #12]
 8027168:	f7ff fcd6 	bl	8026b18 <lfs_dir_relocatingcommit>
 802716c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8027170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027174:	2b00      	cmp	r3, #0
 8027176:	da02      	bge.n	802717e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8027178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802717c:	e26f      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 802717e:	68bb      	ldr	r3, [r7, #8]
 8027180:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027184:	4611      	mov	r1, r2
 8027186:	4618      	mov	r0, r3
 8027188:	f7fc feec 	bl	8023f64 <lfs_pair_cmp>
 802718c:	4603      	mov	r3, r0
 802718e:	2b00      	cmp	r3, #0
 8027190:	d109      	bne.n	80271a6 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8027192:	68bb      	ldr	r3, [r7, #8]
 8027194:	461d      	mov	r5, r3
 8027196:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 802719a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802719c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802719e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80271a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80271a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80271aa:	2b02      	cmp	r3, #2
 80271ac:	d14a      	bne.n	8027244 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80271ae:	68fb      	ldr	r3, [r7, #12]
 80271b0:	3348      	adds	r3, #72	; 0x48
 80271b2:	461a      	mov	r2, r3
 80271b4:	68b9      	ldr	r1, [r7, #8]
 80271b6:	68f8      	ldr	r0, [r7, #12]
 80271b8:	f7fe fc60 	bl	8025a7c <lfs_dir_getgstate>
 80271bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80271c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80271c4:	2b00      	cmp	r3, #0
 80271c6:	d002      	beq.n	80271ce <lfs_dir_orphaningcommit+0x14a>
            return err;
 80271c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80271cc:	e247      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80271ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80271d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80271d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80271d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80271da:	68bb      	ldr	r3, [r7, #8]
 80271dc:	3318      	adds	r3, #24
 80271de:	4618      	mov	r0, r3
 80271e0:	f7fc ff31 	bl	8024046 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80271e4:	68bb      	ldr	r3, [r7, #8]
 80271e6:	7ddb      	ldrb	r3, [r3, #23]
 80271e8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80271ec:	051a      	lsls	r2, r3, #20
 80271ee:	4bc2      	ldr	r3, [pc, #776]	; (80274f8 <lfs_dir_orphaningcommit+0x474>)
 80271f0:	4313      	orrs	r3, r2
 80271f2:	667b      	str	r3, [r7, #100]	; 0x64
 80271f4:	68bb      	ldr	r3, [r7, #8]
 80271f6:	3318      	adds	r3, #24
 80271f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80271fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80271fe:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027202:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027206:	2000      	movs	r0, #0
 8027208:	9001      	str	r0, [sp, #4]
 802720a:	2001      	movs	r0, #1
 802720c:	9000      	str	r0, [sp, #0]
 802720e:	68f8      	ldr	r0, [r7, #12]
 8027210:	f7ff fc82 	bl	8026b18 <lfs_dir_relocatingcommit>
 8027214:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8027218:	68bb      	ldr	r3, [r7, #8]
 802721a:	3318      	adds	r3, #24
 802721c:	4618      	mov	r0, r3
 802721e:	f7fc fef8 	bl	8024012 <lfs_pair_fromle32>
        if (state < 0) {
 8027222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027226:	2b00      	cmp	r3, #0
 8027228:	da02      	bge.n	8027230 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 802722a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802722e:	e216      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8027230:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027234:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802723a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802723c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8027244:	2300      	movs	r3, #0
 8027246:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 802724a:	e1fc      	b.n	8027646 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 802724c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8027250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8027254:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027258:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802725c:	4ca7      	ldr	r4, [pc, #668]	; (80274fc <lfs_dir_orphaningcommit+0x478>)
 802725e:	9403      	str	r4, [sp, #12]
 8027260:	9102      	str	r1, [sp, #8]
 8027262:	9201      	str	r2, [sp, #4]
 8027264:	9300      	str	r3, [sp, #0]
 8027266:	4603      	mov	r3, r0
 8027268:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 802726c:	49a4      	ldr	r1, [pc, #656]	; (8027500 <lfs_dir_orphaningcommit+0x47c>)
 802726e:	48a5      	ldr	r0, [pc, #660]	; (8027504 <lfs_dir_orphaningcommit+0x480>)
 8027270:	f006 f9c6 	bl	802d600 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8027274:	2300      	movs	r3, #0
 8027276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 802727a:	68fb      	ldr	r3, [r7, #12]
 802727c:	f103 0220 	add.w	r2, r3, #32
 8027280:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027284:	4611      	mov	r1, r2
 8027286:	4618      	mov	r0, r3
 8027288:	f7fc fe6c 	bl	8023f64 <lfs_pair_cmp>
 802728c:	4603      	mov	r3, r0
 802728e:	2b00      	cmp	r3, #0
 8027290:	d107      	bne.n	80272a2 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8027292:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027296:	68fb      	ldr	r3, [r7, #12]
 8027298:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 802729a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802729e:	68fb      	ldr	r3, [r7, #12]
 80272a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80272a2:	68fb      	ldr	r3, [r7, #12]
 80272a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80272a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80272aa:	e037      	b.n	802731c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80272ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80272b0:	f103 0208 	add.w	r2, r3, #8
 80272b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80272b8:	4611      	mov	r1, r2
 80272ba:	4618      	mov	r0, r3
 80272bc:	f7fc fe52 	bl	8023f64 <lfs_pair_cmp>
 80272c0:	4603      	mov	r3, r0
 80272c2:	2b00      	cmp	r3, #0
 80272c4:	d109      	bne.n	80272da <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80272c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80272ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80272ce:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80272d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80272d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80272d8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80272da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80272de:	799b      	ldrb	r3, [r3, #6]
 80272e0:	2b02      	cmp	r3, #2
 80272e2:	d116      	bne.n	8027312 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80272e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80272e8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80272ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80272f0:	4611      	mov	r1, r2
 80272f2:	4618      	mov	r0, r3
 80272f4:	f7fc fe36 	bl	8023f64 <lfs_pair_cmp>
 80272f8:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	d109      	bne.n	8027312 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80272fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027302:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027306:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8027308:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802730c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027310:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027312:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027316:	681b      	ldr	r3, [r3, #0]
 8027318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802731c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027320:	2b00      	cmp	r3, #0
 8027322:	d1c3      	bne.n	80272ac <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8027324:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027328:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802732c:	4619      	mov	r1, r3
 802732e:	68f8      	ldr	r0, [r7, #12]
 8027330:	f002 fed8 	bl	802a0e4 <lfs_fs_parent>
 8027334:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8027338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802733c:	2b00      	cmp	r3, #0
 802733e:	da07      	bge.n	8027350 <lfs_dir_orphaningcommit+0x2cc>
 8027340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027344:	f113 0f02 	cmn.w	r3, #2
 8027348:	d002      	beq.n	8027350 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 802734a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802734e:	e186      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8027350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027354:	f113 0f02 	cmn.w	r3, #2
 8027358:	bf14      	ite	ne
 802735a:	2301      	movne	r3, #1
 802735c:	2300      	moveq	r3, #0
 802735e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8027362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027366:	f113 0f02 	cmn.w	r3, #2
 802736a:	f000 809e 	beq.w	80274aa <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 802736e:	2101      	movs	r1, #1
 8027370:	68f8      	ldr	r0, [r7, #12]
 8027372:	f002 ff0f 	bl	802a194 <lfs_fs_preporphans>
 8027376:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 802737a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802737e:	2b00      	cmp	r3, #0
 8027380:	d002      	beq.n	8027388 <lfs_dir_orphaningcommit+0x304>
                return err;
 8027382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8027386:	e16a      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027388:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802738c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8027390:	68fb      	ldr	r3, [r7, #12]
 8027392:	3330      	adds	r3, #48	; 0x30
 8027394:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027398:	4611      	mov	r1, r2
 802739a:	4618      	mov	r0, r3
 802739c:	f7fc ff70 	bl	8024280 <lfs_gstate_hasmovehere>
 80273a0:	4603      	mov	r3, r0
 80273a2:	2b00      	cmp	r3, #0
 80273a4:	d02d      	beq.n	8027402 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80273a6:	68fb      	ldr	r3, [r7, #12]
 80273a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80273aa:	4618      	mov	r0, r3
 80273ac:	f7fc fec0 	bl	8024130 <lfs_tag_id>
 80273b0:	4603      	mov	r3, r0
 80273b2:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80273b6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80273b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80273ba:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80273be:	484f      	ldr	r0, [pc, #316]	; (80274fc <lfs_dir_orphaningcommit+0x478>)
 80273c0:	9002      	str	r0, [sp, #8]
 80273c2:	9201      	str	r2, [sp, #4]
 80273c4:	9300      	str	r3, [sp, #0]
 80273c6:	460b      	mov	r3, r1
 80273c8:	f640 02ed 	movw	r2, #2285	; 0x8ed
 80273cc:	494c      	ldr	r1, [pc, #304]	; (8027500 <lfs_dir_orphaningcommit+0x47c>)
 80273ce:	484e      	ldr	r0, [pc, #312]	; (8027508 <lfs_dir_orphaningcommit+0x484>)
 80273d0:	f006 f916 	bl	802d600 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80273d4:	2200      	movs	r2, #0
 80273d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80273da:	68f8      	ldr	r0, [r7, #12]
 80273dc:	f002 ff14 	bl	802a208 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80273e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80273e4:	4618      	mov	r0, r3
 80273e6:	f7fc fea3 	bl	8024130 <lfs_tag_id>
 80273ea:	4603      	mov	r3, r0
 80273ec:	461a      	mov	r2, r3
 80273ee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80273f2:	4293      	cmp	r3, r2
 80273f4:	d205      	bcs.n	8027402 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80273f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80273fa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80273fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8027402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027404:	657b      	str	r3, [r7, #84]	; 0x54
 8027406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027408:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 802740a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802740e:	4618      	mov	r0, r3
 8027410:	f7fc fe19 	bl	8024046 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8027414:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027418:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802741c:	4293      	cmp	r3, r2
 802741e:	d007      	beq.n	8027430 <lfs_dir_orphaningcommit+0x3ac>
 8027420:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027424:	029b      	lsls	r3, r3, #10
 8027426:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802742a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802742e:	e000      	b.n	8027432 <lfs_dir_orphaningcommit+0x3ae>
 8027430:	2300      	movs	r3, #0
 8027432:	647b      	str	r3, [r7, #68]	; 0x44
 8027434:	2300      	movs	r3, #0
 8027436:	64bb      	str	r3, [r7, #72]	; 0x48
 8027438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802743c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802743e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027442:	653b      	str	r3, [r7, #80]	; 0x50
 8027444:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027448:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802744c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027450:	2000      	movs	r0, #0
 8027452:	9001      	str	r0, [sp, #4]
 8027454:	2002      	movs	r0, #2
 8027456:	9000      	str	r0, [sp, #0]
 8027458:	68f8      	ldr	r0, [r7, #12]
 802745a:	f7ff fb5d 	bl	8026b18 <lfs_dir_relocatingcommit>
 802745e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8027462:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027466:	4618      	mov	r0, r3
 8027468:	f7fc fdd3 	bl	8024012 <lfs_pair_fromle32>
            if (state < 0) {
 802746c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027470:	2b00      	cmp	r3, #0
 8027472:	da02      	bge.n	802747a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8027474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027478:	e0f1      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 802747a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802747e:	2b01      	cmp	r3, #1
 8027480:	d113      	bne.n	80274aa <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8027482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8027488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802748a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 802748e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027492:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802749a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802749e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80274a2:	2301      	movs	r3, #1
 80274a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80274a8:	e0cd      	b.n	8027646 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80274aa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80274ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80274b2:	4619      	mov	r1, r3
 80274b4:	68f8      	ldr	r0, [r7, #12]
 80274b6:	f002 fd8d 	bl	8029fd4 <lfs_fs_pred>
 80274ba:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80274be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80274c2:	2b00      	cmp	r3, #0
 80274c4:	d007      	beq.n	80274d6 <lfs_dir_orphaningcommit+0x452>
 80274c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80274ca:	f113 0f02 	cmn.w	r3, #2
 80274ce:	d002      	beq.n	80274d6 <lfs_dir_orphaningcommit+0x452>
            return err;
 80274d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80274d4:	e0c3      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80274d6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80274da:	2b00      	cmp	r3, #0
 80274dc:	d01a      	beq.n	8027514 <lfs_dir_orphaningcommit+0x490>
 80274de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80274e2:	f113 0f02 	cmn.w	r3, #2
 80274e6:	d115      	bne.n	8027514 <lfs_dir_orphaningcommit+0x490>
 80274e8:	4b08      	ldr	r3, [pc, #32]	; (802750c <lfs_dir_orphaningcommit+0x488>)
 80274ea:	4a09      	ldr	r2, [pc, #36]	; (8027510 <lfs_dir_orphaningcommit+0x48c>)
 80274ec:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80274f0:	4803      	ldr	r0, [pc, #12]	; (8027500 <lfs_dir_orphaningcommit+0x47c>)
 80274f2:	f005 f84b 	bl	802c58c <__assert_func>
 80274f6:	bf00      	nop
 80274f8:	000ffc08 	.word	0x000ffc08
 80274fc:	08033780 	.word	0x08033780
 8027500:	0803366c 	.word	0x0803366c
 8027504:	08033900 	.word	0x08033900
 8027508:	0803393c 	.word	0x0803393c
 802750c:	08033980 	.word	0x08033980
 8027510:	080349a4 	.word	0x080349a4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8027514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027518:	f113 0f02 	cmn.w	r3, #2
 802751c:	f000 8093 	beq.w	8027646 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8027520:	68fb      	ldr	r3, [r7, #12]
 8027522:	3330      	adds	r3, #48	; 0x30
 8027524:	4618      	mov	r0, r3
 8027526:	f7fc fe76 	bl	8024216 <lfs_gstate_hasorphans>
 802752a:	4603      	mov	r3, r0
 802752c:	2b00      	cmp	r3, #0
 802752e:	d011      	beq.n	8027554 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8027530:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8027534:	425b      	negs	r3, r3
 8027536:	b2db      	uxtb	r3, r3
 8027538:	b25b      	sxtb	r3, r3
 802753a:	4619      	mov	r1, r3
 802753c:	68f8      	ldr	r0, [r7, #12]
 802753e:	f002 fe29 	bl	802a194 <lfs_fs_preporphans>
 8027542:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8027546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802754a:	2b00      	cmp	r3, #0
 802754c:	d002      	beq.n	8027554 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 802754e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027552:	e084      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027554:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027558:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802755c:	68fb      	ldr	r3, [r7, #12]
 802755e:	3330      	adds	r3, #48	; 0x30
 8027560:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027564:	4611      	mov	r1, r2
 8027566:	4618      	mov	r0, r3
 8027568:	f7fc fe8a 	bl	8024280 <lfs_gstate_hasmovehere>
 802756c:	4603      	mov	r3, r0
 802756e:	2b00      	cmp	r3, #0
 8027570:	d01c      	beq.n	80275ac <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027572:	68fb      	ldr	r3, [r7, #12]
 8027574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027576:	4618      	mov	r0, r3
 8027578:	f7fc fdda 	bl	8024130 <lfs_tag_id>
 802757c:	4603      	mov	r3, r0
 802757e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8027582:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027586:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 802758a:	4837      	ldr	r0, [pc, #220]	; (8027668 <lfs_dir_orphaningcommit+0x5e4>)
 802758c:	9002      	str	r0, [sp, #8]
 802758e:	9201      	str	r2, [sp, #4]
 8027590:	9300      	str	r3, [sp, #0]
 8027592:	460b      	mov	r3, r1
 8027594:	f640 1221 	movw	r2, #2337	; 0x921
 8027598:	4934      	ldr	r1, [pc, #208]	; (802766c <lfs_dir_orphaningcommit+0x5e8>)
 802759a:	4835      	ldr	r0, [pc, #212]	; (8027670 <lfs_dir_orphaningcommit+0x5ec>)
 802759c:	f006 f830 	bl	802d600 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80275a0:	2200      	movs	r2, #0
 80275a2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80275a6:	68f8      	ldr	r0, [r7, #12]
 80275a8:	f002 fe2e 	bl	802a208 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80275ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80275ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 80275b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80275b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80275b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275bc:	4618      	mov	r0, r3
 80275be:	f7fc fd42 	bl	8024046 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80275c2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80275c6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80275ca:	4293      	cmp	r3, r2
 80275cc:	d007      	beq.n	80275de <lfs_dir_orphaningcommit+0x55a>
 80275ce:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80275d2:	029b      	lsls	r3, r3, #10
 80275d4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80275d8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80275dc:	e000      	b.n	80275e0 <lfs_dir_orphaningcommit+0x55c>
 80275de:	2300      	movs	r3, #0
 80275e0:	627b      	str	r3, [r7, #36]	; 0x24
 80275e2:	2300      	movs	r3, #0
 80275e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80275e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80275ea:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80275ee:	051a      	lsls	r2, r3, #20
 80275f0:	4b20      	ldr	r3, [pc, #128]	; (8027674 <lfs_dir_orphaningcommit+0x5f0>)
 80275f2:	4313      	orrs	r3, r2
 80275f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80275f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275fa:	633b      	str	r3, [r7, #48]	; 0x30
 80275fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027600:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027604:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027608:	2000      	movs	r0, #0
 802760a:	9001      	str	r0, [sp, #4]
 802760c:	2002      	movs	r0, #2
 802760e:	9000      	str	r0, [sp, #0]
 8027610:	68f8      	ldr	r0, [r7, #12]
 8027612:	f7ff fa81 	bl	8026b18 <lfs_dir_relocatingcommit>
 8027616:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 802761a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802761e:	4618      	mov	r0, r3
 8027620:	f7fc fcf7 	bl	8024012 <lfs_pair_fromle32>
            if (state < 0) {
 8027624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027628:	2b00      	cmp	r3, #0
 802762a:	da02      	bge.n	8027632 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 802762c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027630:	e015      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8027632:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027636:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 802763a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802763c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802763e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8027646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802764a:	2b01      	cmp	r3, #1
 802764c:	f43f adfe 	beq.w	802724c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8027650:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8027654:	2b00      	cmp	r3, #0
 8027656:	d001      	beq.n	802765c <lfs_dir_orphaningcommit+0x5d8>
 8027658:	2303      	movs	r3, #3
 802765a:	e000      	b.n	802765e <lfs_dir_orphaningcommit+0x5da>
 802765c:	2300      	movs	r3, #0
}
 802765e:	4618      	mov	r0, r3
 8027660:	37e0      	adds	r7, #224	; 0xe0
 8027662:	46bd      	mov	sp, r7
 8027664:	bdb0      	pop	{r4, r5, r7, pc}
 8027666:	bf00      	nop
 8027668:	08033780 	.word	0x08033780
 802766c:	0803366c 	.word	0x0803366c
 8027670:	0803393c 	.word	0x0803393c
 8027674:	000ffc08 	.word	0x000ffc08

08027678 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027678:	b580      	push	{r7, lr}
 802767a:	b086      	sub	sp, #24
 802767c:	af00      	add	r7, sp, #0
 802767e:	60f8      	str	r0, [r7, #12]
 8027680:	60b9      	str	r1, [r7, #8]
 8027682:	607a      	str	r2, [r7, #4]
 8027684:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8027686:	683b      	ldr	r3, [r7, #0]
 8027688:	687a      	ldr	r2, [r7, #4]
 802768a:	68b9      	ldr	r1, [r7, #8]
 802768c:	68f8      	ldr	r0, [r7, #12]
 802768e:	f7ff fcf9 	bl	8027084 <lfs_dir_orphaningcommit>
 8027692:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8027694:	697b      	ldr	r3, [r7, #20]
 8027696:	2b00      	cmp	r3, #0
 8027698:	da01      	bge.n	802769e <lfs_dir_commit+0x26>
        return orphans;
 802769a:	697b      	ldr	r3, [r7, #20]
 802769c:	e00d      	b.n	80276ba <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802769e:	697b      	ldr	r3, [r7, #20]
 80276a0:	2b00      	cmp	r3, #0
 80276a2:	d009      	beq.n	80276b8 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80276a4:	2100      	movs	r1, #0
 80276a6:	68f8      	ldr	r0, [r7, #12]
 80276a8:	f002 fe4e 	bl	802a348 <lfs_fs_deorphan>
 80276ac:	6138      	str	r0, [r7, #16]
        if (err) {
 80276ae:	693b      	ldr	r3, [r7, #16]
 80276b0:	2b00      	cmp	r3, #0
 80276b2:	d001      	beq.n	80276b8 <lfs_dir_commit+0x40>
            return err;
 80276b4:	693b      	ldr	r3, [r7, #16]
 80276b6:	e000      	b.n	80276ba <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80276b8:	2300      	movs	r3, #0
}
 80276ba:	4618      	mov	r0, r3
 80276bc:	3718      	adds	r7, #24
 80276be:	46bd      	mov	sp, r7
 80276c0:	bd80      	pop	{r7, pc}
	...

080276c4 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 80276c4:	b5b0      	push	{r4, r5, r7, lr}
 80276c6:	b0b8      	sub	sp, #224	; 0xe0
 80276c8:	af00      	add	r7, sp, #0
 80276ca:	6078      	str	r0, [r7, #4]
 80276cc:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80276ce:	6878      	ldr	r0, [r7, #4]
 80276d0:	f002 ffde 	bl	802a690 <lfs_fs_forceconsistency>
 80276d4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80276d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80276dc:	2b00      	cmp	r3, #0
 80276de:	d002      	beq.n	80276e6 <lfs_rawmkdir+0x22>
        return err;
 80276e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80276e4:	e128      	b.n	8027938 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 80276e6:	687b      	ldr	r3, [r7, #4]
 80276e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80276ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 80276ee:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 80276f2:	463a      	mov	r2, r7
 80276f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80276f8:	f103 0108 	add.w	r1, r3, #8
 80276fc:	4603      	mov	r3, r0
 80276fe:	6878      	ldr	r0, [r7, #4]
 8027700:	f7fe fab2 	bl	8025c68 <lfs_dir_find>
 8027704:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8027708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802770c:	f113 0f02 	cmn.w	r3, #2
 8027710:	d105      	bne.n	802771e <lfs_rawmkdir+0x5a>
 8027712:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027716:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802771a:	4293      	cmp	r3, r2
 802771c:	d109      	bne.n	8027732 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 802771e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027722:	2b00      	cmp	r3, #0
 8027724:	da02      	bge.n	802772c <lfs_rawmkdir+0x68>
 8027726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802772a:	e105      	b.n	8027938 <lfs_rawmkdir+0x274>
 802772c:	f06f 0310 	mvn.w	r3, #16
 8027730:	e102      	b.n	8027938 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8027732:	683b      	ldr	r3, [r7, #0]
 8027734:	4618      	mov	r0, r3
 8027736:	f7e8 fdb3 	bl	80102a0 <strlen>
 802773a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 802773e:	687b      	ldr	r3, [r7, #4]
 8027740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027742:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8027746:	429a      	cmp	r2, r3
 8027748:	d902      	bls.n	8027750 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 802774a:	f06f 0323 	mvn.w	r3, #35	; 0x23
 802774e:	e0f3      	b.n	8027938 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 8027750:	6878      	ldr	r0, [r7, #4]
 8027752:	f7fc ff1d 	bl	8024590 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8027756:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802775a:	4619      	mov	r1, r3
 802775c:	6878      	ldr	r0, [r7, #4]
 802775e:	f7fe fd6f 	bl	8026240 <lfs_dir_alloc>
 8027762:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802776a:	2b00      	cmp	r3, #0
 802776c:	d002      	beq.n	8027774 <lfs_rawmkdir+0xb0>
        return err;
 802776e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027772:	e0e1      	b.n	8027938 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8027774:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8027778:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 802777c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802777e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027780:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8027788:	e012      	b.n	80277b0 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 802778a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802778e:	f103 0218 	add.w	r2, r3, #24
 8027792:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027796:	4619      	mov	r1, r3
 8027798:	6878      	ldr	r0, [r7, #4]
 802779a:	f7fe f953 	bl	8025a44 <lfs_dir_fetch>
 802779e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80277a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	d002      	beq.n	80277b0 <lfs_rawmkdir+0xec>
            return err;
 80277aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80277ae:	e0c3      	b.n	8027938 <lfs_rawmkdir+0x274>
    while (pred.split) {
 80277b0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80277b4:	2b00      	cmp	r3, #0
 80277b6:	d1e8      	bne.n	802778a <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 80277b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80277bc:	3318      	adds	r3, #24
 80277be:	4618      	mov	r0, r3
 80277c0:	f7fc fc41 	bl	8024046 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 80277c4:	4b5e      	ldr	r3, [pc, #376]	; (8027940 <lfs_rawmkdir+0x27c>)
 80277c6:	667b      	str	r3, [r7, #100]	; 0x64
 80277c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80277cc:	3318      	adds	r3, #24
 80277ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80277d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80277d4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80277d8:	2301      	movs	r3, #1
 80277da:	6878      	ldr	r0, [r7, #4]
 80277dc:	f7ff ff4c 	bl	8027678 <lfs_dir_commit>
 80277e0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 80277e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80277e8:	3318      	adds	r3, #24
 80277ea:	4618      	mov	r0, r3
 80277ec:	f7fc fc11 	bl	8024012 <lfs_pair_fromle32>
    if (err) {
 80277f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80277f4:	2b00      	cmp	r3, #0
 80277f6:	d002      	beq.n	80277fe <lfs_rawmkdir+0x13a>
        return err;
 80277f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80277fc:	e09c      	b.n	8027938 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 80277fe:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8027802:	2b00      	cmp	r3, #0
 8027804:	d04c      	beq.n	80278a0 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8027806:	2101      	movs	r1, #1
 8027808:	6878      	ldr	r0, [r7, #4]
 802780a:	f002 fcc3 	bl	802a194 <lfs_fs_preporphans>
 802780e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027816:	2b00      	cmp	r3, #0
 8027818:	d002      	beq.n	8027820 <lfs_rawmkdir+0x15c>
            return err;
 802781a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802781e:	e08b      	b.n	8027938 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8027820:	2300      	movs	r3, #0
 8027822:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 8027826:	2300      	movs	r3, #0
 8027828:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 802782c:	687b      	ldr	r3, [r7, #4]
 802782e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8027832:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8027834:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027838:	4618      	mov	r0, r3
 802783a:	f7fc fc04 	bl	8024046 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 802783e:	4b40      	ldr	r3, [pc, #256]	; (8027940 <lfs_rawmkdir+0x27c>)
 8027840:	617b      	str	r3, [r7, #20]
 8027842:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027846:	61bb      	str	r3, [r7, #24]
 8027848:	f107 0214 	add.w	r2, r7, #20
 802784c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027850:	2301      	movs	r3, #1
 8027852:	6878      	ldr	r0, [r7, #4]
 8027854:	f7ff ff10 	bl	8027678 <lfs_dir_commit>
 8027858:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 802785c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027860:	4618      	mov	r0, r3
 8027862:	f7fc fbd6 	bl	8024012 <lfs_pair_fromle32>
        if (err) {
 8027866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802786a:	2b00      	cmp	r3, #0
 802786c:	d006      	beq.n	802787c <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 802786e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027872:	687b      	ldr	r3, [r7, #4]
 8027874:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8027876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802787a:	e05d      	b.n	8027938 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 802787c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027880:	687b      	ldr	r3, [r7, #4]
 8027882:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8027884:	f04f 31ff 	mov.w	r1, #4294967295
 8027888:	6878      	ldr	r0, [r7, #4]
 802788a:	f002 fc83 	bl	802a194 <lfs_fs_preporphans>
 802788e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027896:	2b00      	cmp	r3, #0
 8027898:	d002      	beq.n	80278a0 <lfs_rawmkdir+0x1dc>
            return err;
 802789a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802789e:	e04b      	b.n	8027938 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 80278a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80278a4:	4618      	mov	r0, r3
 80278a6:	f7fc fbce 	bl	8024046 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 80278aa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80278ae:	029b      	lsls	r3, r3, #10
 80278b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80278b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80278b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80278ba:	2300      	movs	r3, #0
 80278bc:	643b      	str	r3, [r7, #64]	; 0x40
 80278be:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80278c2:	029a      	lsls	r2, r3, #10
 80278c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80278c8:	4313      	orrs	r3, r2
 80278ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80278ce:	647b      	str	r3, [r7, #68]	; 0x44
 80278d0:	683b      	ldr	r3, [r7, #0]
 80278d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80278d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80278d8:	029b      	lsls	r3, r3, #10
 80278da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80278de:	f043 0308 	orr.w	r3, r3, #8
 80278e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80278e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80278e8:	653b      	str	r3, [r7, #80]	; 0x50
 80278ea:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80278ee:	f083 0301 	eor.w	r3, r3, #1
 80278f2:	b2db      	uxtb	r3, r3
 80278f4:	2b00      	cmp	r3, #0
 80278f6:	d001      	beq.n	80278fc <lfs_rawmkdir+0x238>
 80278f8:	4b11      	ldr	r3, [pc, #68]	; (8027940 <lfs_rawmkdir+0x27c>)
 80278fa:	e000      	b.n	80278fe <lfs_rawmkdir+0x23a>
 80278fc:	2300      	movs	r3, #0
 80278fe:	657b      	str	r3, [r7, #84]	; 0x54
 8027900:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027904:	65bb      	str	r3, [r7, #88]	; 0x58
 8027906:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802790a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802790e:	f103 0108 	add.w	r1, r3, #8
 8027912:	2304      	movs	r3, #4
 8027914:	6878      	ldr	r0, [r7, #4]
 8027916:	f7ff feaf 	bl	8027678 <lfs_dir_commit>
 802791a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 802791e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027922:	4618      	mov	r0, r3
 8027924:	f7fc fb75 	bl	8024012 <lfs_pair_fromle32>
    if (err) {
 8027928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802792c:	2b00      	cmp	r3, #0
 802792e:	d002      	beq.n	8027936 <lfs_rawmkdir+0x272>
        return err;
 8027930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027934:	e000      	b.n	8027938 <lfs_rawmkdir+0x274>
    }

    return 0;
 8027936:	2300      	movs	r3, #0
}
 8027938:	4618      	mov	r0, r3
 802793a:	37e0      	adds	r7, #224	; 0xe0
 802793c:	46bd      	mov	sp, r7
 802793e:	bdb0      	pop	{r4, r5, r7, pc}
 8027940:	600ffc08 	.word	0x600ffc08

08027944 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8027944:	b590      	push	{r4, r7, lr}
 8027946:	b08d      	sub	sp, #52	; 0x34
 8027948:	af02      	add	r7, sp, #8
 802794a:	60f8      	str	r0, [r7, #12]
 802794c:	60b9      	str	r1, [r7, #8]
 802794e:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8027950:	68bb      	ldr	r3, [r7, #8]
 8027952:	f103 0108 	add.w	r1, r3, #8
 8027956:	1d3a      	adds	r2, r7, #4
 8027958:	2300      	movs	r3, #0
 802795a:	68f8      	ldr	r0, [r7, #12]
 802795c:	f7fe f984 	bl	8025c68 <lfs_dir_find>
 8027960:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8027962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027964:	2b00      	cmp	r3, #0
 8027966:	da01      	bge.n	802796c <lfs_dir_rawopen+0x28>
        return tag;
 8027968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802796a:	e05e      	b.n	8027a2a <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 802796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802796e:	4618      	mov	r0, r3
 8027970:	f7fc fbb4 	bl	80240dc <lfs_tag_type3>
 8027974:	4603      	mov	r3, r0
 8027976:	2b02      	cmp	r3, #2
 8027978:	d002      	beq.n	8027980 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 802797a:	f06f 0313 	mvn.w	r3, #19
 802797e:	e054      	b.n	8027a2a <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8027980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027982:	4618      	mov	r0, r3
 8027984:	f7fc fbd4 	bl	8024130 <lfs_tag_id>
 8027988:	4603      	mov	r3, r0
 802798a:	461a      	mov	r2, r3
 802798c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027990:	429a      	cmp	r2, r3
 8027992:	d106      	bne.n	80279a2 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027994:	68fb      	ldr	r3, [r7, #12]
 8027996:	6a1b      	ldr	r3, [r3, #32]
 8027998:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 802799a:	68fb      	ldr	r3, [r7, #12]
 802799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802799e:	61bb      	str	r3, [r7, #24]
 80279a0:	e01f      	b.n	80279e2 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80279a2:	68bb      	ldr	r3, [r7, #8]
 80279a4:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 80279a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80279aa:	4618      	mov	r0, r3
 80279ac:	f7fc fbc0 	bl	8024130 <lfs_tag_id>
 80279b0:	4603      	mov	r3, r0
 80279b2:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80279b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80279b8:	f043 0308 	orr.w	r3, r3, #8
 80279bc:	f107 0214 	add.w	r2, r7, #20
 80279c0:	9200      	str	r2, [sp, #0]
 80279c2:	4a1c      	ldr	r2, [pc, #112]	; (8027a34 <lfs_dir_rawopen+0xf0>)
 80279c4:	4621      	mov	r1, r4
 80279c6:	68f8      	ldr	r0, [r7, #12]
 80279c8:	f7fc ff9c 	bl	8024904 <lfs_dir_get>
 80279cc:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 80279ce:	6a3b      	ldr	r3, [r7, #32]
 80279d0:	2b00      	cmp	r3, #0
 80279d2:	da01      	bge.n	80279d8 <lfs_dir_rawopen+0x94>
            return res;
 80279d4:	6a3b      	ldr	r3, [r7, #32]
 80279d6:	e028      	b.n	8027a2a <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 80279d8:	f107 0314 	add.w	r3, r7, #20
 80279dc:	4618      	mov	r0, r3
 80279de:	f7fc fb18 	bl	8024012 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 80279e2:	68bb      	ldr	r3, [r7, #8]
 80279e4:	3308      	adds	r3, #8
 80279e6:	f107 0214 	add.w	r2, r7, #20
 80279ea:	4619      	mov	r1, r3
 80279ec:	68f8      	ldr	r0, [r7, #12]
 80279ee:	f7fe f829 	bl	8025a44 <lfs_dir_fetch>
 80279f2:	61f8      	str	r0, [r7, #28]
    if (err) {
 80279f4:	69fb      	ldr	r3, [r7, #28]
 80279f6:	2b00      	cmp	r3, #0
 80279f8:	d001      	beq.n	80279fe <lfs_dir_rawopen+0xba>
        return err;
 80279fa:	69fb      	ldr	r3, [r7, #28]
 80279fc:	e015      	b.n	8027a2a <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 80279fe:	68bb      	ldr	r3, [r7, #8]
 8027a00:	689a      	ldr	r2, [r3, #8]
 8027a02:	68bb      	ldr	r3, [r7, #8]
 8027a04:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8027a06:	68bb      	ldr	r3, [r7, #8]
 8027a08:	68da      	ldr	r2, [r3, #12]
 8027a0a:	68bb      	ldr	r3, [r7, #8]
 8027a0c:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8027a0e:	68bb      	ldr	r3, [r7, #8]
 8027a10:	2200      	movs	r2, #0
 8027a12:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8027a14:	68bb      	ldr	r3, [r7, #8]
 8027a16:	2200      	movs	r2, #0
 8027a18:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8027a1a:	68bb      	ldr	r3, [r7, #8]
 8027a1c:	2202      	movs	r2, #2
 8027a1e:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8027a20:	68b9      	ldr	r1, [r7, #8]
 8027a22:	68f8      	ldr	r0, [r7, #12]
 8027a24:	f7fc fd6b 	bl	80244fe <lfs_mlist_append>

    return 0;
 8027a28:	2300      	movs	r3, #0
}
 8027a2a:	4618      	mov	r0, r3
 8027a2c:	372c      	adds	r7, #44	; 0x2c
 8027a2e:	46bd      	mov	sp, r7
 8027a30:	bd90      	pop	{r4, r7, pc}
 8027a32:	bf00      	nop
 8027a34:	700ffc00 	.word	0x700ffc00

08027a38 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8027a38:	b580      	push	{r7, lr}
 8027a3a:	b082      	sub	sp, #8
 8027a3c:	af00      	add	r7, sp, #0
 8027a3e:	6078      	str	r0, [r7, #4]
 8027a40:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8027a42:	6839      	ldr	r1, [r7, #0]
 8027a44:	6878      	ldr	r0, [r7, #4]
 8027a46:	f7fc fd38 	bl	80244ba <lfs_mlist_remove>

    return 0;
 8027a4a:	2300      	movs	r3, #0
}
 8027a4c:	4618      	mov	r0, r3
 8027a4e:	3708      	adds	r7, #8
 8027a50:	46bd      	mov	sp, r7
 8027a52:	bd80      	pop	{r7, pc}

08027a54 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8027a54:	b580      	push	{r7, lr}
 8027a56:	b086      	sub	sp, #24
 8027a58:	af00      	add	r7, sp, #0
 8027a5a:	60f8      	str	r0, [r7, #12]
 8027a5c:	60b9      	str	r1, [r7, #8]
 8027a5e:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8027a60:	f44f 7284 	mov.w	r2, #264	; 0x108
 8027a64:	2100      	movs	r1, #0
 8027a66:	6878      	ldr	r0, [r7, #4]
 8027a68:	f005 ff60 	bl	802d92c <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8027a6c:	68bb      	ldr	r3, [r7, #8]
 8027a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027a70:	2b00      	cmp	r3, #0
 8027a72:	d110      	bne.n	8027a96 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8027a74:	687b      	ldr	r3, [r7, #4]
 8027a76:	2202      	movs	r2, #2
 8027a78:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8027a7a:	687b      	ldr	r3, [r7, #4]
 8027a7c:	3308      	adds	r3, #8
 8027a7e:	4935      	ldr	r1, [pc, #212]	; (8027b54 <lfs_dir_rawread+0x100>)
 8027a80:	461a      	mov	r2, r3
 8027a82:	460b      	mov	r3, r1
 8027a84:	881b      	ldrh	r3, [r3, #0]
 8027a86:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8027a88:	68bb      	ldr	r3, [r7, #8]
 8027a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027a8c:	1c5a      	adds	r2, r3, #1
 8027a8e:	68bb      	ldr	r3, [r7, #8]
 8027a90:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027a92:	2301      	movs	r3, #1
 8027a94:	e05a      	b.n	8027b4c <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027a96:	68bb      	ldr	r3, [r7, #8]
 8027a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027a9a:	2b01      	cmp	r3, #1
 8027a9c:	d110      	bne.n	8027ac0 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8027a9e:	687b      	ldr	r3, [r7, #4]
 8027aa0:	2202      	movs	r2, #2
 8027aa2:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027aa4:	687b      	ldr	r3, [r7, #4]
 8027aa6:	3308      	adds	r3, #8
 8027aa8:	4a2b      	ldr	r2, [pc, #172]	; (8027b58 <lfs_dir_rawread+0x104>)
 8027aaa:	8811      	ldrh	r1, [r2, #0]
 8027aac:	7892      	ldrb	r2, [r2, #2]
 8027aae:	8019      	strh	r1, [r3, #0]
 8027ab0:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027ab2:	68bb      	ldr	r3, [r7, #8]
 8027ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027ab6:	1c5a      	adds	r2, r3, #1
 8027ab8:	68bb      	ldr	r3, [r7, #8]
 8027aba:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027abc:	2301      	movs	r3, #1
 8027abe:	e045      	b.n	8027b4c <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027ac0:	68bb      	ldr	r3, [r7, #8]
 8027ac2:	889a      	ldrh	r2, [r3, #4]
 8027ac4:	68bb      	ldr	r3, [r7, #8]
 8027ac6:	8b9b      	ldrh	r3, [r3, #28]
 8027ac8:	429a      	cmp	r2, r3
 8027aca:	d11a      	bne.n	8027b02 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8027acc:	68bb      	ldr	r3, [r7, #8]
 8027ace:	7fdb      	ldrb	r3, [r3, #31]
 8027ad0:	f083 0301 	eor.w	r3, r3, #1
 8027ad4:	b2db      	uxtb	r3, r3
 8027ad6:	2b00      	cmp	r3, #0
 8027ad8:	d001      	beq.n	8027ade <lfs_dir_rawread+0x8a>
                return false;
 8027ada:	2300      	movs	r3, #0
 8027adc:	e036      	b.n	8027b4c <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8027ade:	68bb      	ldr	r3, [r7, #8]
 8027ae0:	f103 0108 	add.w	r1, r3, #8
 8027ae4:	68bb      	ldr	r3, [r7, #8]
 8027ae6:	3320      	adds	r3, #32
 8027ae8:	461a      	mov	r2, r3
 8027aea:	68f8      	ldr	r0, [r7, #12]
 8027aec:	f7fd ffaa 	bl	8025a44 <lfs_dir_fetch>
 8027af0:	6178      	str	r0, [r7, #20]
            if (err) {
 8027af2:	697b      	ldr	r3, [r7, #20]
 8027af4:	2b00      	cmp	r3, #0
 8027af6:	d001      	beq.n	8027afc <lfs_dir_rawread+0xa8>
                return err;
 8027af8:	697b      	ldr	r3, [r7, #20]
 8027afa:	e027      	b.n	8027b4c <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8027afc:	68bb      	ldr	r3, [r7, #8]
 8027afe:	2200      	movs	r2, #0
 8027b00:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8027b02:	68bb      	ldr	r3, [r7, #8]
 8027b04:	f103 0108 	add.w	r1, r3, #8
 8027b08:	68bb      	ldr	r3, [r7, #8]
 8027b0a:	889a      	ldrh	r2, [r3, #4]
 8027b0c:	687b      	ldr	r3, [r7, #4]
 8027b0e:	68f8      	ldr	r0, [r7, #12]
 8027b10:	f7fd ffe6 	bl	8025ae0 <lfs_dir_getinfo>
 8027b14:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8027b16:	693b      	ldr	r3, [r7, #16]
 8027b18:	2b00      	cmp	r3, #0
 8027b1a:	d005      	beq.n	8027b28 <lfs_dir_rawread+0xd4>
 8027b1c:	693b      	ldr	r3, [r7, #16]
 8027b1e:	f113 0f02 	cmn.w	r3, #2
 8027b22:	d001      	beq.n	8027b28 <lfs_dir_rawread+0xd4>
            return err;
 8027b24:	693b      	ldr	r3, [r7, #16]
 8027b26:	e011      	b.n	8027b4c <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8027b28:	68bb      	ldr	r3, [r7, #8]
 8027b2a:	889b      	ldrh	r3, [r3, #4]
 8027b2c:	3301      	adds	r3, #1
 8027b2e:	b29a      	uxth	r2, r3
 8027b30:	68bb      	ldr	r3, [r7, #8]
 8027b32:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8027b34:	693b      	ldr	r3, [r7, #16]
 8027b36:	f113 0f02 	cmn.w	r3, #2
 8027b3a:	d100      	bne.n	8027b3e <lfs_dir_rawread+0xea>
    while (true) {
 8027b3c:	e7c0      	b.n	8027ac0 <lfs_dir_rawread+0x6c>
            break;
 8027b3e:	bf00      	nop
        }
    }

    dir->pos += 1;
 8027b40:	68bb      	ldr	r3, [r7, #8]
 8027b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027b44:	1c5a      	adds	r2, r3, #1
 8027b46:	68bb      	ldr	r3, [r7, #8]
 8027b48:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8027b4a:	2301      	movs	r3, #1
}
 8027b4c:	4618      	mov	r0, r3
 8027b4e:	3718      	adds	r7, #24
 8027b50:	46bd      	mov	sp, r7
 8027b52:	bd80      	pop	{r7, pc}
 8027b54:	080337d0 	.word	0x080337d0
 8027b58:	080337d4 	.word	0x080337d4

08027b5c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8027b5c:	b590      	push	{r4, r7, lr}
 8027b5e:	b087      	sub	sp, #28
 8027b60:	af00      	add	r7, sp, #0
 8027b62:	6078      	str	r0, [r7, #4]
 8027b64:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8027b66:	683b      	ldr	r3, [r7, #0]
 8027b68:	681b      	ldr	r3, [r3, #0]
 8027b6a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8027b6c:	687b      	ldr	r3, [r7, #4]
 8027b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027b70:	69db      	ldr	r3, [r3, #28]
 8027b72:	3b08      	subs	r3, #8
 8027b74:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8027b76:	697a      	ldr	r2, [r7, #20]
 8027b78:	693b      	ldr	r3, [r7, #16]
 8027b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8027b7e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8027b80:	68fb      	ldr	r3, [r7, #12]
 8027b82:	2b00      	cmp	r3, #0
 8027b84:	d101      	bne.n	8027b8a <lfs_ctz_index+0x2e>
        return 0;
 8027b86:	2300      	movs	r3, #0
 8027b88:	e01c      	b.n	8027bc4 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8027b8a:	68fb      	ldr	r3, [r7, #12]
 8027b8c:	3b01      	subs	r3, #1
 8027b8e:	4618      	mov	r0, r3
 8027b90:	f7fb fe0e 	bl	80237b0 <lfs_popc>
 8027b94:	4603      	mov	r3, r0
 8027b96:	3302      	adds	r3, #2
 8027b98:	009b      	lsls	r3, r3, #2
 8027b9a:	697a      	ldr	r2, [r7, #20]
 8027b9c:	1ad2      	subs	r2, r2, r3
 8027b9e:	693b      	ldr	r3, [r7, #16]
 8027ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8027ba4:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027ba6:	693b      	ldr	r3, [r7, #16]
 8027ba8:	68fa      	ldr	r2, [r7, #12]
 8027baa:	fb02 f303 	mul.w	r3, r2, r3
 8027bae:	697a      	ldr	r2, [r7, #20]
 8027bb0:	1ad4      	subs	r4, r2, r3
 8027bb2:	68f8      	ldr	r0, [r7, #12]
 8027bb4:	f7fb fdfc 	bl	80237b0 <lfs_popc>
 8027bb8:	4603      	mov	r3, r0
 8027bba:	009b      	lsls	r3, r3, #2
 8027bbc:	1ae2      	subs	r2, r4, r3
 8027bbe:	683b      	ldr	r3, [r7, #0]
 8027bc0:	601a      	str	r2, [r3, #0]
    return i;
 8027bc2:	68fb      	ldr	r3, [r7, #12]
}
 8027bc4:	4618      	mov	r0, r3
 8027bc6:	371c      	adds	r7, #28
 8027bc8:	46bd      	mov	sp, r7
 8027bca:	bd90      	pop	{r4, r7, pc}

08027bcc <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8027bcc:	b590      	push	{r4, r7, lr}
 8027bce:	b08f      	sub	sp, #60	; 0x3c
 8027bd0:	af04      	add	r7, sp, #16
 8027bd2:	60f8      	str	r0, [r7, #12]
 8027bd4:	60b9      	str	r1, [r7, #8]
 8027bd6:	607a      	str	r2, [r7, #4]
 8027bd8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027bdc:	2b00      	cmp	r3, #0
 8027bde:	d108      	bne.n	8027bf2 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8027be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027be2:	f04f 32ff 	mov.w	r2, #4294967295
 8027be6:	601a      	str	r2, [r3, #0]
        *off = 0;
 8027be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027bea:	2200      	movs	r2, #0
 8027bec:	601a      	str	r2, [r3, #0]
        return 0;
 8027bee:	2300      	movs	r3, #0
 8027bf0:	e053      	b.n	8027c9a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027bf4:	3b01      	subs	r3, #1
 8027bf6:	617b      	str	r3, [r7, #20]
 8027bf8:	f107 0314 	add.w	r3, r7, #20
 8027bfc:	4619      	mov	r1, r3
 8027bfe:	68f8      	ldr	r0, [r7, #12]
 8027c00:	f7ff ffac 	bl	8027b5c <lfs_ctz_index>
 8027c04:	4603      	mov	r3, r0
 8027c06:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8027c08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8027c0c:	4619      	mov	r1, r3
 8027c0e:	68f8      	ldr	r0, [r7, #12]
 8027c10:	f7ff ffa4 	bl	8027b5c <lfs_ctz_index>
 8027c14:	4603      	mov	r3, r0
 8027c16:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8027c18:	e034      	b.n	8027c84 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8027c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027c1c:	6a3b      	ldr	r3, [r7, #32]
 8027c1e:	1ad3      	subs	r3, r2, r3
 8027c20:	3301      	adds	r3, #1
 8027c22:	4618      	mov	r0, r3
 8027c24:	f7fb fda5 	bl	8023772 <lfs_npw2>
 8027c28:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8027c2a:	1e5c      	subs	r4, r3, #1
 8027c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027c2e:	f7fb fdb0 	bl	8023792 <lfs_ctz>
 8027c32:	4603      	mov	r3, r0
 8027c34:	4619      	mov	r1, r3
 8027c36:	4620      	mov	r0, r4
 8027c38:	f7fb fd64 	bl	8023704 <lfs_min>
 8027c3c:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8027c3e:	683b      	ldr	r3, [r7, #0]
 8027c40:	69fa      	ldr	r2, [r7, #28]
 8027c42:	0092      	lsls	r2, r2, #2
 8027c44:	2104      	movs	r1, #4
 8027c46:	9103      	str	r1, [sp, #12]
 8027c48:	4639      	mov	r1, r7
 8027c4a:	9102      	str	r1, [sp, #8]
 8027c4c:	9201      	str	r2, [sp, #4]
 8027c4e:	9300      	str	r3, [sp, #0]
 8027c50:	2304      	movs	r3, #4
 8027c52:	687a      	ldr	r2, [r7, #4]
 8027c54:	68b9      	ldr	r1, [r7, #8]
 8027c56:	68f8      	ldr	r0, [r7, #12]
 8027c58:	f7fb fe30 	bl	80238bc <lfs_bd_read>
 8027c5c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8027c5e:	683b      	ldr	r3, [r7, #0]
 8027c60:	4618      	mov	r0, r3
 8027c62:	f7fb fdbf 	bl	80237e4 <lfs_fromle32>
 8027c66:	4603      	mov	r3, r0
 8027c68:	603b      	str	r3, [r7, #0]
        if (err) {
 8027c6a:	69bb      	ldr	r3, [r7, #24]
 8027c6c:	2b00      	cmp	r3, #0
 8027c6e:	d001      	beq.n	8027c74 <lfs_ctz_find+0xa8>
            return err;
 8027c70:	69bb      	ldr	r3, [r7, #24]
 8027c72:	e012      	b.n	8027c9a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8027c74:	2201      	movs	r2, #1
 8027c76:	69fb      	ldr	r3, [r7, #28]
 8027c78:	fa02 f303 	lsl.w	r3, r2, r3
 8027c7c:	461a      	mov	r2, r3
 8027c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c80:	1a9b      	subs	r3, r3, r2
 8027c82:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8027c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027c86:	6a3b      	ldr	r3, [r7, #32]
 8027c88:	429a      	cmp	r2, r3
 8027c8a:	d8c6      	bhi.n	8027c1a <lfs_ctz_find+0x4e>
    }

    *block = head;
 8027c8c:	683a      	ldr	r2, [r7, #0]
 8027c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027c90:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c96:	601a      	str	r2, [r3, #0]
    return 0;
 8027c98:	2300      	movs	r3, #0
}
 8027c9a:	4618      	mov	r0, r3
 8027c9c:	372c      	adds	r7, #44	; 0x2c
 8027c9e:	46bd      	mov	sp, r7
 8027ca0:	bd90      	pop	{r4, r7, pc}
	...

08027ca4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027ca4:	b580      	push	{r7, lr}
 8027ca6:	b092      	sub	sp, #72	; 0x48
 8027ca8:	af04      	add	r7, sp, #16
 8027caa:	60f8      	str	r0, [r7, #12]
 8027cac:	60b9      	str	r1, [r7, #8]
 8027cae:	607a      	str	r2, [r7, #4]
 8027cb0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027cb2:	f107 0320 	add.w	r3, r7, #32
 8027cb6:	4619      	mov	r1, r3
 8027cb8:	68f8      	ldr	r0, [r7, #12]
 8027cba:	f7fc fc89 	bl	80245d0 <lfs_alloc>
 8027cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8027cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cc2:	2b00      	cmp	r3, #0
 8027cc4:	d001      	beq.n	8027cca <lfs_ctz_extend+0x26>
            return err;
 8027cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cc8:	e0e9      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8027cca:	6a3b      	ldr	r3, [r7, #32]
 8027ccc:	4619      	mov	r1, r3
 8027cce:	68f8      	ldr	r0, [r7, #12]
 8027cd0:	f7fc f8e6 	bl	8023ea0 <lfs_bd_erase>
 8027cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8027cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cd8:	2b00      	cmp	r3, #0
 8027cda:	d006      	beq.n	8027cea <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8027cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cde:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027ce2:	f000 80cb 	beq.w	8027e7c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ce8:	e0d9      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8027cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027cec:	2b00      	cmp	r3, #0
 8027cee:	d107      	bne.n	8027d00 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027cf0:	6a3a      	ldr	r2, [r7, #32]
 8027cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027cf4:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027cf8:	2200      	movs	r2, #0
 8027cfa:	601a      	str	r2, [r3, #0]
                return 0;
 8027cfc:	2300      	movs	r3, #0
 8027cfe:	e0ce      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027d02:	3b01      	subs	r3, #1
 8027d04:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027d06:	f107 031c 	add.w	r3, r7, #28
 8027d0a:	4619      	mov	r1, r3
 8027d0c:	68f8      	ldr	r0, [r7, #12]
 8027d0e:	f7ff ff25 	bl	8027b5c <lfs_ctz_index>
 8027d12:	4603      	mov	r3, r0
 8027d14:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8027d16:	69fb      	ldr	r3, [r7, #28]
 8027d18:	3301      	adds	r3, #1
 8027d1a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8027d1c:	68fb      	ldr	r3, [r7, #12]
 8027d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027d20:	69da      	ldr	r2, [r3, #28]
 8027d22:	69fb      	ldr	r3, [r7, #28]
 8027d24:	429a      	cmp	r2, r3
 8027d26:	d044      	beq.n	8027db2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027d28:	2300      	movs	r3, #0
 8027d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8027d2c:	e035      	b.n	8027d9a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8027d2e:	69fa      	ldr	r2, [r7, #28]
 8027d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027d32:	1ad2      	subs	r2, r2, r3
 8027d34:	2301      	movs	r3, #1
 8027d36:	9303      	str	r3, [sp, #12]
 8027d38:	f107 0317 	add.w	r3, r7, #23
 8027d3c:	9302      	str	r3, [sp, #8]
 8027d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027d40:	9301      	str	r3, [sp, #4]
 8027d42:	683b      	ldr	r3, [r7, #0]
 8027d44:	9300      	str	r3, [sp, #0]
 8027d46:	4613      	mov	r3, r2
 8027d48:	687a      	ldr	r2, [r7, #4]
 8027d4a:	2100      	movs	r1, #0
 8027d4c:	68f8      	ldr	r0, [r7, #12]
 8027d4e:	f7fb fdb5 	bl	80238bc <lfs_bd_read>
 8027d52:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8027d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027d56:	2b00      	cmp	r3, #0
 8027d58:	d001      	beq.n	8027d5e <lfs_ctz_extend+0xba>
                        return err;
 8027d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027d5c:	e09f      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8027d5e:	6a3b      	ldr	r3, [r7, #32]
 8027d60:	2201      	movs	r2, #1
 8027d62:	9203      	str	r2, [sp, #12]
 8027d64:	f107 0217 	add.w	r2, r7, #23
 8027d68:	9202      	str	r2, [sp, #8]
 8027d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027d6c:	9201      	str	r2, [sp, #4]
 8027d6e:	9300      	str	r3, [sp, #0]
 8027d70:	2301      	movs	r3, #1
 8027d72:	687a      	ldr	r2, [r7, #4]
 8027d74:	68b9      	ldr	r1, [r7, #8]
 8027d76:	68f8      	ldr	r0, [r7, #12]
 8027d78:	f7fb ffe6 	bl	8023d48 <lfs_bd_prog>
 8027d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8027d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027d80:	2b00      	cmp	r3, #0
 8027d82:	d007      	beq.n	8027d94 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8027d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027d86:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027d8a:	d101      	bne.n	8027d90 <lfs_ctz_extend+0xec>
                            goto relocate;
 8027d8c:	bf00      	nop
                    goto relocate;
 8027d8e:	e075      	b.n	8027e7c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8027d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8027d92:	e084      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027d96:	3301      	adds	r3, #1
 8027d98:	637b      	str	r3, [r7, #52]	; 0x34
 8027d9a:	69fb      	ldr	r3, [r7, #28]
 8027d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027d9e:	429a      	cmp	r2, r3
 8027da0:	d3c5      	bcc.n	8027d2e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8027da2:	6a3a      	ldr	r2, [r7, #32]
 8027da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027da6:	601a      	str	r2, [r3, #0]
                *off = noff;
 8027da8:	69fa      	ldr	r2, [r7, #28]
 8027daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027dac:	601a      	str	r2, [r3, #0]
                return 0;
 8027dae:	2300      	movs	r3, #0
 8027db0:	e075      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8027db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027db4:	3301      	adds	r3, #1
 8027db6:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8027db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027dba:	f7fb fcea 	bl	8023792 <lfs_ctz>
 8027dbe:	4603      	mov	r3, r0
 8027dc0:	3301      	adds	r3, #1
 8027dc2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8027dc4:	683b      	ldr	r3, [r7, #0]
 8027dc6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8027dc8:	2300      	movs	r3, #0
 8027dca:	633b      	str	r3, [r7, #48]	; 0x30
 8027dcc:	e049      	b.n	8027e62 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8027dce:	69bb      	ldr	r3, [r7, #24]
 8027dd0:	4618      	mov	r0, r3
 8027dd2:	f7fb fd12 	bl	80237fa <lfs_tole32>
 8027dd6:	4603      	mov	r3, r0
 8027dd8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8027dda:	6a3b      	ldr	r3, [r7, #32]
 8027ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027dde:	0092      	lsls	r2, r2, #2
 8027de0:	2104      	movs	r1, #4
 8027de2:	9103      	str	r1, [sp, #12]
 8027de4:	f107 0118 	add.w	r1, r7, #24
 8027de8:	9102      	str	r1, [sp, #8]
 8027dea:	9201      	str	r2, [sp, #4]
 8027dec:	9300      	str	r3, [sp, #0]
 8027dee:	2301      	movs	r3, #1
 8027df0:	687a      	ldr	r2, [r7, #4]
 8027df2:	68b9      	ldr	r1, [r7, #8]
 8027df4:	68f8      	ldr	r0, [r7, #12]
 8027df6:	f7fb ffa7 	bl	8023d48 <lfs_bd_prog>
 8027dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8027dfc:	69bb      	ldr	r3, [r7, #24]
 8027dfe:	4618      	mov	r0, r3
 8027e00:	f7fb fcf0 	bl	80237e4 <lfs_fromle32>
 8027e04:	4603      	mov	r3, r0
 8027e06:	61bb      	str	r3, [r7, #24]
                if (err) {
 8027e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e0a:	2b00      	cmp	r3, #0
 8027e0c:	d005      	beq.n	8027e1a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8027e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e10:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027e14:	d034      	beq.n	8027e80 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8027e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e18:	e041      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8027e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e1c:	3b01      	subs	r3, #1
 8027e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027e20:	429a      	cmp	r2, r3
 8027e22:	d01b      	beq.n	8027e5c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8027e24:	69bb      	ldr	r3, [r7, #24]
 8027e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027e28:	0092      	lsls	r2, r2, #2
 8027e2a:	2104      	movs	r1, #4
 8027e2c:	9103      	str	r1, [sp, #12]
 8027e2e:	f107 0118 	add.w	r1, r7, #24
 8027e32:	9102      	str	r1, [sp, #8]
 8027e34:	9201      	str	r2, [sp, #4]
 8027e36:	9300      	str	r3, [sp, #0]
 8027e38:	2304      	movs	r3, #4
 8027e3a:	687a      	ldr	r2, [r7, #4]
 8027e3c:	2100      	movs	r1, #0
 8027e3e:	68f8      	ldr	r0, [r7, #12]
 8027e40:	f7fb fd3c 	bl	80238bc <lfs_bd_read>
 8027e44:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8027e46:	69bb      	ldr	r3, [r7, #24]
 8027e48:	4618      	mov	r0, r3
 8027e4a:	f7fb fccb 	bl	80237e4 <lfs_fromle32>
 8027e4e:	4603      	mov	r3, r0
 8027e50:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8027e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e54:	2b00      	cmp	r3, #0
 8027e56:	d001      	beq.n	8027e5c <lfs_ctz_extend+0x1b8>
                        return err;
 8027e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e5a:	e020      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8027e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e5e:	3301      	adds	r3, #1
 8027e60:	633b      	str	r3, [r7, #48]	; 0x30
 8027e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e66:	429a      	cmp	r2, r3
 8027e68:	d3b1      	bcc.n	8027dce <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8027e6a:	6a3a      	ldr	r2, [r7, #32]
 8027e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027e6e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8027e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e72:	009a      	lsls	r2, r3, #2
 8027e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027e76:	601a      	str	r2, [r3, #0]
            return 0;
 8027e78:	2300      	movs	r3, #0
 8027e7a:	e010      	b.n	8027e9e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8027e7c:	bf00      	nop
 8027e7e:	e000      	b.n	8027e82 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8027e80:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8027e82:	6a3b      	ldr	r3, [r7, #32]
 8027e84:	4a08      	ldr	r2, [pc, #32]	; (8027ea8 <lfs_ctz_extend+0x204>)
 8027e86:	9200      	str	r2, [sp, #0]
 8027e88:	f640 22da 	movw	r2, #2778	; 0xada
 8027e8c:	4907      	ldr	r1, [pc, #28]	; (8027eac <lfs_ctz_extend+0x208>)
 8027e8e:	4808      	ldr	r0, [pc, #32]	; (8027eb0 <lfs_ctz_extend+0x20c>)
 8027e90:	f005 fbb6 	bl	802d600 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8027e94:	68b9      	ldr	r1, [r7, #8]
 8027e96:	68f8      	ldr	r0, [r7, #12]
 8027e98:	f7fb fcea 	bl	8023870 <lfs_cache_drop>
    while (true) {
 8027e9c:	e709      	b.n	8027cb2 <lfs_ctz_extend+0xe>
    }
}
 8027e9e:	4618      	mov	r0, r3
 8027ea0:	3738      	adds	r7, #56	; 0x38
 8027ea2:	46bd      	mov	sp, r7
 8027ea4:	bd80      	pop	{r7, pc}
 8027ea6:	bf00      	nop
 8027ea8:	08033780 	.word	0x08033780
 8027eac:	0803366c 	.word	0x0803366c
 8027eb0:	08033800 	.word	0x08033800

08027eb4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8027eb4:	b580      	push	{r7, lr}
 8027eb6:	b090      	sub	sp, #64	; 0x40
 8027eb8:	af04      	add	r7, sp, #16
 8027eba:	60f8      	str	r0, [r7, #12]
 8027ebc:	60b9      	str	r1, [r7, #8]
 8027ebe:	607a      	str	r2, [r7, #4]
 8027ec0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027ec4:	2b00      	cmp	r3, #0
 8027ec6:	d101      	bne.n	8027ecc <lfs_ctz_traverse+0x18>
        return 0;
 8027ec8:	2300      	movs	r3, #0
 8027eca:	e06b      	b.n	8027fa4 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027ece:	3b01      	subs	r3, #1
 8027ed0:	61fb      	str	r3, [r7, #28]
 8027ed2:	f107 031c 	add.w	r3, r7, #28
 8027ed6:	4619      	mov	r1, r3
 8027ed8:	68f8      	ldr	r0, [r7, #12]
 8027eda:	f7ff fe3f 	bl	8027b5c <lfs_ctz_index>
 8027ede:	4603      	mov	r3, r0
 8027ee0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8027ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027ee4:	6839      	ldr	r1, [r7, #0]
 8027ee6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027ee8:	4798      	blx	r3
 8027eea:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8027eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027eee:	2b00      	cmp	r3, #0
 8027ef0:	d001      	beq.n	8027ef6 <lfs_ctz_traverse+0x42>
            return err;
 8027ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ef4:	e056      	b.n	8027fa4 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8027ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ef8:	2b00      	cmp	r3, #0
 8027efa:	d101      	bne.n	8027f00 <lfs_ctz_traverse+0x4c>
            return 0;
 8027efc:	2300      	movs	r3, #0
 8027efe:	e051      	b.n	8027fa4 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8027f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f02:	f003 0301 	and.w	r3, r3, #1
 8027f06:	f1c3 0302 	rsb	r3, r3, #2
 8027f0a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8027f0c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8027f0e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8027f10:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8027f12:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8027f14:	9303      	str	r3, [sp, #12]
 8027f16:	f107 0314 	add.w	r3, r7, #20
 8027f1a:	9302      	str	r3, [sp, #8]
 8027f1c:	2300      	movs	r3, #0
 8027f1e:	9301      	str	r3, [sp, #4]
 8027f20:	683b      	ldr	r3, [r7, #0]
 8027f22:	9300      	str	r3, [sp, #0]
 8027f24:	4613      	mov	r3, r2
 8027f26:	687a      	ldr	r2, [r7, #4]
 8027f28:	68b9      	ldr	r1, [r7, #8]
 8027f2a:	68f8      	ldr	r0, [r7, #12]
 8027f2c:	f7fb fcc6 	bl	80238bc <lfs_bd_read>
 8027f30:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8027f32:	697b      	ldr	r3, [r7, #20]
 8027f34:	4618      	mov	r0, r3
 8027f36:	f7fb fc55 	bl	80237e4 <lfs_fromle32>
 8027f3a:	4603      	mov	r3, r0
 8027f3c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8027f3e:	69bb      	ldr	r3, [r7, #24]
 8027f40:	4618      	mov	r0, r3
 8027f42:	f7fb fc4f 	bl	80237e4 <lfs_fromle32>
 8027f46:	4603      	mov	r3, r0
 8027f48:	61bb      	str	r3, [r7, #24]
        if (err) {
 8027f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f4c:	2b00      	cmp	r3, #0
 8027f4e:	d001      	beq.n	8027f54 <lfs_ctz_traverse+0xa0>
            return err;
 8027f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f52:	e027      	b.n	8027fa4 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8027f54:	2300      	movs	r3, #0
 8027f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8027f58:	e012      	b.n	8027f80 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8027f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f5c:	009b      	lsls	r3, r3, #2
 8027f5e:	3330      	adds	r3, #48	; 0x30
 8027f60:	443b      	add	r3, r7
 8027f62:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8027f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027f68:	4611      	mov	r1, r2
 8027f6a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027f6c:	4798      	blx	r3
 8027f6e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8027f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d001      	beq.n	8027f7a <lfs_ctz_traverse+0xc6>
                return err;
 8027f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f78:	e014      	b.n	8027fa4 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8027f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f7c:	3301      	adds	r3, #1
 8027f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8027f80:	6a3b      	ldr	r3, [r7, #32]
 8027f82:	3b01      	subs	r3, #1
 8027f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027f86:	429a      	cmp	r2, r3
 8027f88:	dbe7      	blt.n	8027f5a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8027f8a:	6a3b      	ldr	r3, [r7, #32]
 8027f8c:	3b01      	subs	r3, #1
 8027f8e:	009b      	lsls	r3, r3, #2
 8027f90:	3330      	adds	r3, #48	; 0x30
 8027f92:	443b      	add	r3, r7
 8027f94:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8027f98:	603b      	str	r3, [r7, #0]
        index -= count;
 8027f9a:	6a3b      	ldr	r3, [r7, #32]
 8027f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027f9e:	1ad3      	subs	r3, r2, r3
 8027fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8027fa2:	e79e      	b.n	8027ee2 <lfs_ctz_traverse+0x2e>
    }
}
 8027fa4:	4618      	mov	r0, r3
 8027fa6:	3730      	adds	r7, #48	; 0x30
 8027fa8:	46bd      	mov	sp, r7
 8027faa:	bd80      	pop	{r7, pc}

08027fac <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8027fac:	b5b0      	push	{r4, r5, r7, lr}
 8027fae:	b09a      	sub	sp, #104	; 0x68
 8027fb0:	af02      	add	r7, sp, #8
 8027fb2:	60f8      	str	r0, [r7, #12]
 8027fb4:	60b9      	str	r1, [r7, #8]
 8027fb6:	607a      	str	r2, [r7, #4]
 8027fb8:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027fba:	683b      	ldr	r3, [r7, #0]
 8027fbc:	f003 0302 	and.w	r3, r3, #2
 8027fc0:	2b00      	cmp	r3, #0
 8027fc2:	d008      	beq.n	8027fd6 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8027fc4:	68f8      	ldr	r0, [r7, #12]
 8027fc6:	f002 fb63 	bl	802a690 <lfs_fs_forceconsistency>
 8027fca:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8027fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027fce:	2b00      	cmp	r3, #0
 8027fd0:	d001      	beq.n	8027fd6 <lfs_file_rawopencfg+0x2a>
            return err;
 8027fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027fd4:	e1b0      	b.n	8028338 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8027fd6:	68bb      	ldr	r3, [r7, #8]
 8027fd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8027fda:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8027fdc:	683a      	ldr	r2, [r7, #0]
 8027fde:	68bb      	ldr	r3, [r7, #8]
 8027fe0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8027fe2:	68bb      	ldr	r3, [r7, #8]
 8027fe4:	2200      	movs	r2, #0
 8027fe6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8027fe8:	68bb      	ldr	r3, [r7, #8]
 8027fea:	2200      	movs	r2, #0
 8027fec:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8027fee:	68bb      	ldr	r3, [r7, #8]
 8027ff0:	2200      	movs	r2, #0
 8027ff2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8027ff4:	68bb      	ldr	r3, [r7, #8]
 8027ff6:	f103 0108 	add.w	r1, r3, #8
 8027ffa:	68bb      	ldr	r3, [r7, #8]
 8027ffc:	3304      	adds	r3, #4
 8027ffe:	1d3a      	adds	r2, r7, #4
 8028000:	68f8      	ldr	r0, [r7, #12]
 8028002:	f7fd fe31 	bl	8025c68 <lfs_dir_find>
 8028006:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8028008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802800a:	2b00      	cmp	r3, #0
 802800c:	da0c      	bge.n	8028028 <lfs_file_rawopencfg+0x7c>
 802800e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028010:	f113 0f02 	cmn.w	r3, #2
 8028014:	d105      	bne.n	8028022 <lfs_file_rawopencfg+0x76>
 8028016:	68bb      	ldr	r3, [r7, #8]
 8028018:	889b      	ldrh	r3, [r3, #4]
 802801a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802801e:	4293      	cmp	r3, r2
 8028020:	d102      	bne.n	8028028 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8028022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028024:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8028026:	e17c      	b.n	8028322 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8028028:	68bb      	ldr	r3, [r7, #8]
 802802a:	2201      	movs	r2, #1
 802802c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 802802e:	68b9      	ldr	r1, [r7, #8]
 8028030:	68f8      	ldr	r0, [r7, #12]
 8028032:	f7fc fa64 	bl	80244fe <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8028036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028038:	f113 0f02 	cmn.w	r3, #2
 802803c:	d14e      	bne.n	80280dc <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 802803e:	683b      	ldr	r3, [r7, #0]
 8028040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028044:	2b00      	cmp	r3, #0
 8028046:	d103      	bne.n	8028050 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8028048:	f06f 0301 	mvn.w	r3, #1
 802804c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 802804e:	e168      	b.n	8028322 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8028050:	687b      	ldr	r3, [r7, #4]
 8028052:	4618      	mov	r0, r3
 8028054:	f7e8 f924 	bl	80102a0 <strlen>
 8028058:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 802805a:	68fb      	ldr	r3, [r7, #12]
 802805c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802805e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028060:	429a      	cmp	r2, r3
 8028062:	d903      	bls.n	802806c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8028064:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8028068:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 802806a:	e15a      	b.n	8028322 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802806c:	68bb      	ldr	r3, [r7, #8]
 802806e:	f103 0108 	add.w	r1, r3, #8
 8028072:	68bb      	ldr	r3, [r7, #8]
 8028074:	889b      	ldrh	r3, [r3, #4]
 8028076:	029b      	lsls	r3, r3, #10
 8028078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802807c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028082:	2300      	movs	r3, #0
 8028084:	633b      	str	r3, [r7, #48]	; 0x30
 8028086:	68bb      	ldr	r3, [r7, #8]
 8028088:	889b      	ldrh	r3, [r3, #4]
 802808a:	029a      	lsls	r2, r3, #10
 802808c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802808e:	4313      	orrs	r3, r2
 8028090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028094:	637b      	str	r3, [r7, #52]	; 0x34
 8028096:	687b      	ldr	r3, [r7, #4]
 8028098:	63bb      	str	r3, [r7, #56]	; 0x38
 802809a:	68bb      	ldr	r3, [r7, #8]
 802809c:	889b      	ldrh	r3, [r3, #4]
 802809e:	029b      	lsls	r3, r3, #10
 80280a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80280a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80280a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80280aa:	2300      	movs	r3, #0
 80280ac:	643b      	str	r3, [r7, #64]	; 0x40
 80280ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80280b2:	2303      	movs	r3, #3
 80280b4:	68f8      	ldr	r0, [r7, #12]
 80280b6:	f7ff fadf 	bl	8027678 <lfs_dir_commit>
 80280ba:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80280bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80280be:	f113 0f1c 	cmn.w	r3, #28
 80280c2:	d001      	beq.n	80280c8 <lfs_file_rawopencfg+0x11c>
 80280c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80280c6:	e001      	b.n	80280cc <lfs_file_rawopencfg+0x120>
 80280c8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80280cc:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80280ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80280d0:	2b00      	cmp	r3, #0
 80280d2:	f040 8125 	bne.w	8028320 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80280d6:	4b9a      	ldr	r3, [pc, #616]	; (8028340 <lfs_file_rawopencfg+0x394>)
 80280d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80280da:	e044      	b.n	8028166 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80280dc:	683b      	ldr	r3, [r7, #0]
 80280de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	d003      	beq.n	80280ee <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80280e6:	f06f 0310 	mvn.w	r3, #16
 80280ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80280ec:	e119      	b.n	8028322 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80280ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80280f0:	4618      	mov	r0, r3
 80280f2:	f7fb fff3 	bl	80240dc <lfs_tag_type3>
 80280f6:	4603      	mov	r3, r0
 80280f8:	2b01      	cmp	r3, #1
 80280fa:	d003      	beq.n	8028104 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80280fc:	f06f 0314 	mvn.w	r3, #20
 8028100:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8028102:	e10e      	b.n	8028322 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8028104:	683b      	ldr	r3, [r7, #0]
 8028106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802810a:	2b00      	cmp	r3, #0
 802810c:	d00e      	beq.n	802812c <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 802810e:	68bb      	ldr	r3, [r7, #8]
 8028110:	889b      	ldrh	r3, [r3, #4]
 8028112:	029b      	lsls	r3, r3, #10
 8028114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802811c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 802811e:	68bb      	ldr	r3, [r7, #8]
 8028120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028122:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028126:	68bb      	ldr	r3, [r7, #8]
 8028128:	631a      	str	r2, [r3, #48]	; 0x30
 802812a:	e01c      	b.n	8028166 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 802812c:	68bb      	ldr	r3, [r7, #8]
 802812e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8028132:	68bb      	ldr	r3, [r7, #8]
 8028134:	889b      	ldrh	r3, [r3, #4]
 8028136:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8028138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802813c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8028140:	68ba      	ldr	r2, [r7, #8]
 8028142:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8028144:	9200      	str	r2, [sp, #0]
 8028146:	4a7f      	ldr	r2, [pc, #508]	; (8028344 <lfs_file_rawopencfg+0x398>)
 8028148:	68f8      	ldr	r0, [r7, #12]
 802814a:	f7fc fbdb 	bl	8024904 <lfs_dir_get>
 802814e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8028150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028152:	2b00      	cmp	r3, #0
 8028154:	da02      	bge.n	802815c <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8028156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028158:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 802815a:	e0e2      	b.n	8028322 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 802815c:	68bb      	ldr	r3, [r7, #8]
 802815e:	3328      	adds	r3, #40	; 0x28
 8028160:	4618      	mov	r0, r3
 8028162:	f7fc f8ed 	bl	8024340 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8028166:	2300      	movs	r3, #0
 8028168:	657b      	str	r3, [r7, #84]	; 0x54
 802816a:	e063      	b.n	8028234 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 802816c:	68bb      	ldr	r3, [r7, #8]
 802816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028170:	f003 0301 	and.w	r3, r3, #1
 8028174:	2b00      	cmp	r3, #0
 8028176:	d03c      	beq.n	80281f2 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028178:	68bb      	ldr	r3, [r7, #8]
 802817a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 802817e:	68bb      	ldr	r3, [r7, #8]
 8028180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028182:	6859      	ldr	r1, [r3, #4]
 8028184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028186:	4613      	mov	r3, r2
 8028188:	005b      	lsls	r3, r3, #1
 802818a:	4413      	add	r3, r2
 802818c:	009b      	lsls	r3, r3, #2
 802818e:	440b      	add	r3, r1
 8028190:	781b      	ldrb	r3, [r3, #0]
 8028192:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8028196:	051a      	lsls	r2, r3, #20
 8028198:	68bb      	ldr	r3, [r7, #8]
 802819a:	889b      	ldrh	r3, [r3, #4]
 802819c:	029b      	lsls	r3, r3, #10
 802819e:	ea42 0103 	orr.w	r1, r2, r3
 80281a2:	68bb      	ldr	r3, [r7, #8]
 80281a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80281a6:	6858      	ldr	r0, [r3, #4]
 80281a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80281aa:	4613      	mov	r3, r2
 80281ac:	005b      	lsls	r3, r3, #1
 80281ae:	4413      	add	r3, r2
 80281b0:	009b      	lsls	r3, r3, #2
 80281b2:	4403      	add	r3, r0
 80281b4:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80281b6:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80281ba:	68bb      	ldr	r3, [r7, #8]
 80281bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80281be:	6859      	ldr	r1, [r3, #4]
 80281c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80281c2:	4613      	mov	r3, r2
 80281c4:	005b      	lsls	r3, r3, #1
 80281c6:	4413      	add	r3, r2
 80281c8:	009b      	lsls	r3, r3, #2
 80281ca:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80281cc:	685b      	ldr	r3, [r3, #4]
 80281ce:	9300      	str	r3, [sp, #0]
 80281d0:	4603      	mov	r3, r0
 80281d2:	4a5d      	ldr	r2, [pc, #372]	; (8028348 <lfs_file_rawopencfg+0x39c>)
 80281d4:	4621      	mov	r1, r4
 80281d6:	68f8      	ldr	r0, [r7, #12]
 80281d8:	f7fc fb94 	bl	8024904 <lfs_dir_get>
 80281dc:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80281de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281e0:	2b00      	cmp	r3, #0
 80281e2:	da06      	bge.n	80281f2 <lfs_file_rawopencfg+0x246>
 80281e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281e6:	f113 0f02 	cmn.w	r3, #2
 80281ea:	d002      	beq.n	80281f2 <lfs_file_rawopencfg+0x246>
                err = res;
 80281ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80281f0:	e097      	b.n	8028322 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80281f2:	68bb      	ldr	r3, [r7, #8]
 80281f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80281f6:	f003 0302 	and.w	r3, r3, #2
 80281fa:	2b00      	cmp	r3, #0
 80281fc:	d017      	beq.n	802822e <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80281fe:	68bb      	ldr	r3, [r7, #8]
 8028200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028202:	6859      	ldr	r1, [r3, #4]
 8028204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028206:	4613      	mov	r3, r2
 8028208:	005b      	lsls	r3, r3, #1
 802820a:	4413      	add	r3, r2
 802820c:	009b      	lsls	r3, r3, #2
 802820e:	440b      	add	r3, r1
 8028210:	689a      	ldr	r2, [r3, #8]
 8028212:	68fb      	ldr	r3, [r7, #12]
 8028214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028216:	429a      	cmp	r2, r3
 8028218:	d903      	bls.n	8028222 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 802821a:	f06f 031b 	mvn.w	r3, #27
 802821e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8028220:	e07f      	b.n	8028322 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8028222:	68bb      	ldr	r3, [r7, #8]
 8028224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802822a:	68bb      	ldr	r3, [r7, #8]
 802822c:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 802822e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028230:	3301      	adds	r3, #1
 8028232:	657b      	str	r3, [r7, #84]	; 0x54
 8028234:	68bb      	ldr	r3, [r7, #8]
 8028236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028238:	689b      	ldr	r3, [r3, #8]
 802823a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802823c:	429a      	cmp	r2, r3
 802823e:	d395      	bcc.n	802816c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8028240:	68bb      	ldr	r3, [r7, #8]
 8028242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028244:	681b      	ldr	r3, [r3, #0]
 8028246:	2b00      	cmp	r3, #0
 8028248:	d005      	beq.n	8028256 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 802824a:	68bb      	ldr	r3, [r7, #8]
 802824c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802824e:	681a      	ldr	r2, [r3, #0]
 8028250:	68bb      	ldr	r3, [r7, #8]
 8028252:	64da      	str	r2, [r3, #76]	; 0x4c
 8028254:	e010      	b.n	8028278 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8028256:	68fb      	ldr	r3, [r7, #12]
 8028258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802825c:	4618      	mov	r0, r3
 802825e:	f7fb faf0 	bl	8023842 <lfs_malloc>
 8028262:	4602      	mov	r2, r0
 8028264:	68bb      	ldr	r3, [r7, #8]
 8028266:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8028268:	68bb      	ldr	r3, [r7, #8]
 802826a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802826c:	2b00      	cmp	r3, #0
 802826e:	d103      	bne.n	8028278 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8028270:	f06f 030b 	mvn.w	r3, #11
 8028274:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8028276:	e054      	b.n	8028322 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8028278:	68bb      	ldr	r3, [r7, #8]
 802827a:	3340      	adds	r3, #64	; 0x40
 802827c:	4619      	mov	r1, r3
 802827e:	68f8      	ldr	r0, [r7, #12]
 8028280:	f7fb fb05 	bl	802388e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8028284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028286:	4618      	mov	r0, r3
 8028288:	f7fb ff28 	bl	80240dc <lfs_tag_type3>
 802828c:	4603      	mov	r3, r0
 802828e:	461a      	mov	r2, r3
 8028290:	f240 2301 	movw	r3, #513	; 0x201
 8028294:	429a      	cmp	r2, r3
 8028296:	d141      	bne.n	802831c <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8028298:	68bb      	ldr	r3, [r7, #8]
 802829a:	f06f 0201 	mvn.w	r2, #1
 802829e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80282a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80282a2:	4618      	mov	r0, r3
 80282a4:	f7fb ff54 	bl	8024150 <lfs_tag_size>
 80282a8:	4602      	mov	r2, r0
 80282aa:	68bb      	ldr	r3, [r7, #8]
 80282ac:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80282ae:	68bb      	ldr	r3, [r7, #8]
 80282b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80282b6:	68bb      	ldr	r3, [r7, #8]
 80282b8:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80282ba:	68bb      	ldr	r3, [r7, #8]
 80282bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80282be:	68bb      	ldr	r3, [r7, #8]
 80282c0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80282c2:	68bb      	ldr	r3, [r7, #8]
 80282c4:	2200      	movs	r2, #0
 80282c6:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80282c8:	68fb      	ldr	r3, [r7, #12]
 80282ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80282cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80282ce:	68bb      	ldr	r3, [r7, #8]
 80282d0:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80282d2:	68bb      	ldr	r3, [r7, #8]
 80282d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80282d6:	2b00      	cmp	r3, #0
 80282d8:	d020      	beq.n	802831c <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80282da:	68bb      	ldr	r3, [r7, #8]
 80282dc:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80282e0:	68bb      	ldr	r3, [r7, #8]
 80282e2:	889b      	ldrh	r3, [r3, #4]
 80282e4:	029c      	lsls	r4, r3, #10
 80282e6:	68bb      	ldr	r3, [r7, #8]
 80282e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80282ea:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80282ee:	4618      	mov	r0, r3
 80282f0:	f7fb fa08 	bl	8023704 <lfs_min>
 80282f4:	4603      	mov	r3, r0
 80282f6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80282f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80282fc:	68bb      	ldr	r3, [r7, #8]
 80282fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028300:	9300      	str	r3, [sp, #0]
 8028302:	4613      	mov	r3, r2
 8028304:	4a0f      	ldr	r2, [pc, #60]	; (8028344 <lfs_file_rawopencfg+0x398>)
 8028306:	4629      	mov	r1, r5
 8028308:	68f8      	ldr	r0, [r7, #12]
 802830a:	f7fc fafb 	bl	8024904 <lfs_dir_get>
 802830e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8028310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028312:	2b00      	cmp	r3, #0
 8028314:	da02      	bge.n	802831c <lfs_file_rawopencfg+0x370>
                err = res;
 8028316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028318:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 802831a:	e002      	b.n	8028322 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 802831c:	2300      	movs	r3, #0
 802831e:	e00b      	b.n	8028338 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8028320:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8028322:	68bb      	ldr	r3, [r7, #8]
 8028324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028326:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802832a:	68bb      	ldr	r3, [r7, #8]
 802832c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 802832e:	68b9      	ldr	r1, [r7, #8]
 8028330:	68f8      	ldr	r0, [r7, #12]
 8028332:	f000 f80b 	bl	802834c <lfs_file_rawclose>
    return err;
 8028336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8028338:	4618      	mov	r0, r3
 802833a:	3760      	adds	r7, #96	; 0x60
 802833c:	46bd      	mov	sp, r7
 802833e:	bdb0      	pop	{r4, r5, r7, pc}
 8028340:	20100000 	.word	0x20100000
 8028344:	700ffc00 	.word	0x700ffc00
 8028348:	7ffffc00 	.word	0x7ffffc00

0802834c <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 802834c:	b580      	push	{r7, lr}
 802834e:	b084      	sub	sp, #16
 8028350:	af00      	add	r7, sp, #0
 8028352:	6078      	str	r0, [r7, #4]
 8028354:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8028356:	6839      	ldr	r1, [r7, #0]
 8028358:	6878      	ldr	r0, [r7, #4]
 802835a:	f000 f9e5 	bl	8028728 <lfs_file_rawsync>
 802835e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8028360:	6839      	ldr	r1, [r7, #0]
 8028362:	6878      	ldr	r0, [r7, #4]
 8028364:	f7fc f8a9 	bl	80244ba <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8028368:	683b      	ldr	r3, [r7, #0]
 802836a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802836c:	681b      	ldr	r3, [r3, #0]
 802836e:	2b00      	cmp	r3, #0
 8028370:	d104      	bne.n	802837c <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8028372:	683b      	ldr	r3, [r7, #0]
 8028374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028376:	4618      	mov	r0, r3
 8028378:	f7fb fa6f 	bl	802385a <lfs_free>
    }

    return err;
 802837c:	68fb      	ldr	r3, [r7, #12]
}
 802837e:	4618      	mov	r0, r3
 8028380:	3710      	adds	r7, #16
 8028382:	46bd      	mov	sp, r7
 8028384:	bd80      	pop	{r7, pc}
	...

08028388 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8028388:	b590      	push	{r4, r7, lr}
 802838a:	b08d      	sub	sp, #52	; 0x34
 802838c:	af06      	add	r7, sp, #24
 802838e:	6078      	str	r0, [r7, #4]
 8028390:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8028392:	f107 030c 	add.w	r3, r7, #12
 8028396:	4619      	mov	r1, r3
 8028398:	6878      	ldr	r0, [r7, #4]
 802839a:	f7fc f919 	bl	80245d0 <lfs_alloc>
 802839e:	6138      	str	r0, [r7, #16]
        if (err) {
 80283a0:	693b      	ldr	r3, [r7, #16]
 80283a2:	2b00      	cmp	r3, #0
 80283a4:	d001      	beq.n	80283aa <lfs_file_relocate+0x22>
            return err;
 80283a6:	693b      	ldr	r3, [r7, #16]
 80283a8:	e0bb      	b.n	8028522 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80283aa:	68fb      	ldr	r3, [r7, #12]
 80283ac:	4619      	mov	r1, r3
 80283ae:	6878      	ldr	r0, [r7, #4]
 80283b0:	f7fb fd76 	bl	8023ea0 <lfs_bd_erase>
 80283b4:	6138      	str	r0, [r7, #16]
        if (err) {
 80283b6:	693b      	ldr	r3, [r7, #16]
 80283b8:	2b00      	cmp	r3, #0
 80283ba:	d006      	beq.n	80283ca <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80283bc:	693b      	ldr	r3, [r7, #16]
 80283be:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80283c2:	f000 809b 	beq.w	80284fc <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80283c6:	693b      	ldr	r3, [r7, #16]
 80283c8:	e0ab      	b.n	8028522 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80283ca:	2300      	movs	r3, #0
 80283cc:	617b      	str	r3, [r7, #20]
 80283ce:	e069      	b.n	80284a4 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80283d0:	683b      	ldr	r3, [r7, #0]
 80283d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80283d8:	2b00      	cmp	r3, #0
 80283da:	d027      	beq.n	802842c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80283dc:	683b      	ldr	r3, [r7, #0]
 80283de:	f103 0008 	add.w	r0, r3, #8
 80283e2:	683b      	ldr	r3, [r7, #0]
 80283e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80283e8:	683b      	ldr	r3, [r7, #0]
 80283ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80283ec:	697b      	ldr	r3, [r7, #20]
 80283ee:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80283f0:	683b      	ldr	r3, [r7, #0]
 80283f2:	889b      	ldrh	r3, [r3, #4]
 80283f4:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80283f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80283fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80283fe:	2101      	movs	r1, #1
 8028400:	9105      	str	r1, [sp, #20]
 8028402:	f107 010b 	add.w	r1, r7, #11
 8028406:	9104      	str	r1, [sp, #16]
 8028408:	6979      	ldr	r1, [r7, #20]
 802840a:	9103      	str	r1, [sp, #12]
 802840c:	9302      	str	r3, [sp, #8]
 802840e:	4b47      	ldr	r3, [pc, #284]	; (802852c <lfs_file_relocate+0x1a4>)
 8028410:	9301      	str	r3, [sp, #4]
 8028412:	9200      	str	r2, [sp, #0]
 8028414:	4623      	mov	r3, r4
 8028416:	2200      	movs	r2, #0
 8028418:	4601      	mov	r1, r0
 802841a:	6878      	ldr	r0, [r7, #4]
 802841c:	f7fc fa8d 	bl	802493a <lfs_dir_getread>
 8028420:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8028422:	693b      	ldr	r3, [r7, #16]
 8028424:	2b00      	cmp	r3, #0
 8028426:	d01e      	beq.n	8028466 <lfs_file_relocate+0xde>
                    return err;
 8028428:	693b      	ldr	r3, [r7, #16]
 802842a:	e07a      	b.n	8028522 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 802842c:	683b      	ldr	r3, [r7, #0]
 802842e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8028432:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8028434:	683b      	ldr	r3, [r7, #0]
 8028436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8028438:	697b      	ldr	r3, [r7, #20]
 802843a:	1ad4      	subs	r4, r2, r3
 802843c:	683b      	ldr	r3, [r7, #0]
 802843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028440:	2201      	movs	r2, #1
 8028442:	9203      	str	r2, [sp, #12]
 8028444:	f107 020b 	add.w	r2, r7, #11
 8028448:	9202      	str	r2, [sp, #8]
 802844a:	697a      	ldr	r2, [r7, #20]
 802844c:	9201      	str	r2, [sp, #4]
 802844e:	9300      	str	r3, [sp, #0]
 8028450:	4623      	mov	r3, r4
 8028452:	4602      	mov	r2, r0
 8028454:	6878      	ldr	r0, [r7, #4]
 8028456:	f7fb fa31 	bl	80238bc <lfs_bd_read>
 802845a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 802845c:	693b      	ldr	r3, [r7, #16]
 802845e:	2b00      	cmp	r3, #0
 8028460:	d001      	beq.n	8028466 <lfs_file_relocate+0xde>
                    return err;
 8028462:	693b      	ldr	r3, [r7, #16]
 8028464:	e05d      	b.n	8028522 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8028466:	687b      	ldr	r3, [r7, #4]
 8028468:	f103 0110 	add.w	r1, r3, #16
 802846c:	6878      	ldr	r0, [r7, #4]
 802846e:	68fb      	ldr	r3, [r7, #12]
 8028470:	2201      	movs	r2, #1
 8028472:	9203      	str	r2, [sp, #12]
 8028474:	f107 020b 	add.w	r2, r7, #11
 8028478:	9202      	str	r2, [sp, #8]
 802847a:	697a      	ldr	r2, [r7, #20]
 802847c:	9201      	str	r2, [sp, #4]
 802847e:	9300      	str	r3, [sp, #0]
 8028480:	2301      	movs	r3, #1
 8028482:	4602      	mov	r2, r0
 8028484:	6878      	ldr	r0, [r7, #4]
 8028486:	f7fb fc5f 	bl	8023d48 <lfs_bd_prog>
 802848a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 802848c:	693b      	ldr	r3, [r7, #16]
 802848e:	2b00      	cmp	r3, #0
 8028490:	d005      	beq.n	802849e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8028492:	693b      	ldr	r3, [r7, #16]
 8028494:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028498:	d032      	beq.n	8028500 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 802849a:	693b      	ldr	r3, [r7, #16]
 802849c:	e041      	b.n	8028522 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 802849e:	697b      	ldr	r3, [r7, #20]
 80284a0:	3301      	adds	r3, #1
 80284a2:	617b      	str	r3, [r7, #20]
 80284a4:	683b      	ldr	r3, [r7, #0]
 80284a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80284a8:	697a      	ldr	r2, [r7, #20]
 80284aa:	429a      	cmp	r2, r3
 80284ac:	d390      	bcc.n	80283d0 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80284ae:	683b      	ldr	r3, [r7, #0]
 80284b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80284b2:	687b      	ldr	r3, [r7, #4]
 80284b4:	69d9      	ldr	r1, [r3, #28]
 80284b6:	687b      	ldr	r3, [r7, #4]
 80284b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80284ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80284bc:	461a      	mov	r2, r3
 80284be:	f005 fc0a 	bl	802dcd6 <memcpy>
        file->cache.block = lfs->pcache.block;
 80284c2:	687b      	ldr	r3, [r7, #4]
 80284c4:	691a      	ldr	r2, [r3, #16]
 80284c6:	683b      	ldr	r3, [r7, #0]
 80284c8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80284ca:	687b      	ldr	r3, [r7, #4]
 80284cc:	695a      	ldr	r2, [r3, #20]
 80284ce:	683b      	ldr	r3, [r7, #0]
 80284d0:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80284d2:	687b      	ldr	r3, [r7, #4]
 80284d4:	699a      	ldr	r2, [r3, #24]
 80284d6:	683b      	ldr	r3, [r7, #0]
 80284d8:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80284da:	687b      	ldr	r3, [r7, #4]
 80284dc:	3310      	adds	r3, #16
 80284de:	4619      	mov	r1, r3
 80284e0:	6878      	ldr	r0, [r7, #4]
 80284e2:	f7fb f9d4 	bl	802388e <lfs_cache_zero>

        file->block = nblock;
 80284e6:	68fa      	ldr	r2, [r7, #12]
 80284e8:	683b      	ldr	r3, [r7, #0]
 80284ea:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80284ec:	683b      	ldr	r3, [r7, #0]
 80284ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80284f4:	683b      	ldr	r3, [r7, #0]
 80284f6:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80284f8:	2300      	movs	r3, #0
 80284fa:	e012      	b.n	8028522 <lfs_file_relocate+0x19a>
                goto relocate;
 80284fc:	bf00      	nop
 80284fe:	e000      	b.n	8028502 <lfs_file_relocate+0x17a>
                    goto relocate;
 8028500:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8028502:	68fb      	ldr	r3, [r7, #12]
 8028504:	4a0a      	ldr	r2, [pc, #40]	; (8028530 <lfs_file_relocate+0x1a8>)
 8028506:	9200      	str	r2, [sp, #0]
 8028508:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 802850c:	4909      	ldr	r1, [pc, #36]	; (8028534 <lfs_file_relocate+0x1ac>)
 802850e:	480a      	ldr	r0, [pc, #40]	; (8028538 <lfs_file_relocate+0x1b0>)
 8028510:	f005 f876 	bl	802d600 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8028514:	687b      	ldr	r3, [r7, #4]
 8028516:	3310      	adds	r3, #16
 8028518:	4619      	mov	r1, r3
 802851a:	6878      	ldr	r0, [r7, #4]
 802851c:	f7fb f9a8 	bl	8023870 <lfs_cache_drop>
    while (true) {
 8028520:	e737      	b.n	8028392 <lfs_file_relocate+0xa>
    }
}
 8028522:	4618      	mov	r0, r3
 8028524:	371c      	adds	r7, #28
 8028526:	46bd      	mov	sp, r7
 8028528:	bd90      	pop	{r4, r7, pc}
 802852a:	bf00      	nop
 802852c:	fff7fc00 	.word	0xfff7fc00
 8028530:	08033780 	.word	0x08033780
 8028534:	0803366c 	.word	0x0803366c
 8028538:	08033800 	.word	0x08033800

0802853c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 802853c:	b580      	push	{r7, lr}
 802853e:	b084      	sub	sp, #16
 8028540:	af00      	add	r7, sp, #0
 8028542:	6078      	str	r0, [r7, #4]
 8028544:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8028546:	683b      	ldr	r3, [r7, #0]
 8028548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802854a:	683b      	ldr	r3, [r7, #0]
 802854c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 802854e:	6878      	ldr	r0, [r7, #4]
 8028550:	f7fc f81e 	bl	8024590 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8028554:	6839      	ldr	r1, [r7, #0]
 8028556:	6878      	ldr	r0, [r7, #4]
 8028558:	f7ff ff16 	bl	8028388 <lfs_file_relocate>
 802855c:	60f8      	str	r0, [r7, #12]
    if (err) {
 802855e:	68fb      	ldr	r3, [r7, #12]
 8028560:	2b00      	cmp	r3, #0
 8028562:	d001      	beq.n	8028568 <lfs_file_outline+0x2c>
        return err;
 8028564:	68fb      	ldr	r3, [r7, #12]
 8028566:	e006      	b.n	8028576 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8028568:	683b      	ldr	r3, [r7, #0]
 802856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802856c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8028570:	683b      	ldr	r3, [r7, #0]
 8028572:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8028574:	2300      	movs	r3, #0
}
 8028576:	4618      	mov	r0, r3
 8028578:	3710      	adds	r7, #16
 802857a:	46bd      	mov	sp, r7
 802857c:	bd80      	pop	{r7, pc}
	...

08028580 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8028580:	b590      	push	{r4, r7, lr}
 8028582:	b09f      	sub	sp, #124	; 0x7c
 8028584:	af02      	add	r7, sp, #8
 8028586:	6078      	str	r0, [r7, #4]
 8028588:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 802858a:	683b      	ldr	r3, [r7, #0]
 802858c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802858e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028592:	2b00      	cmp	r3, #0
 8028594:	d011      	beq.n	80285ba <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8028596:	683b      	ldr	r3, [r7, #0]
 8028598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802859a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802859e:	2b00      	cmp	r3, #0
 80285a0:	d105      	bne.n	80285ae <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80285a2:	683b      	ldr	r3, [r7, #0]
 80285a4:	3340      	adds	r3, #64	; 0x40
 80285a6:	4619      	mov	r1, r3
 80285a8:	6878      	ldr	r0, [r7, #4]
 80285aa:	f7fb f961 	bl	8023870 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80285ae:	683b      	ldr	r3, [r7, #0]
 80285b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80285b6:	683b      	ldr	r3, [r7, #0]
 80285b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80285ba:	683b      	ldr	r3, [r7, #0]
 80285bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80285c2:	2b00      	cmp	r3, #0
 80285c4:	f000 80a4 	beq.w	8028710 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80285c8:	683b      	ldr	r3, [r7, #0]
 80285ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80285cc:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80285ce:	683b      	ldr	r3, [r7, #0]
 80285d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80285d6:	2b00      	cmp	r3, #0
 80285d8:	d176      	bne.n	80286c8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80285da:	f107 030c 	add.w	r3, r7, #12
 80285de:	2254      	movs	r2, #84	; 0x54
 80285e0:	2100      	movs	r1, #0
 80285e2:	4618      	mov	r0, r3
 80285e4:	f005 f9a2 	bl	802d92c <memset>
                .ctz.head = file->ctz.head,
 80285e8:	683b      	ldr	r3, [r7, #0]
 80285ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80285ec:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80285ee:	683b      	ldr	r3, [r7, #0]
 80285f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80285f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80285f4:	2301      	movs	r3, #1
 80285f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80285f8:	683b      	ldr	r3, [r7, #0]
 80285fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80285fc:	643b      	str	r3, [r7, #64]	; 0x40
 80285fe:	687b      	ldr	r3, [r7, #4]
 8028600:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8028604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 802860a:	687b      	ldr	r3, [r7, #4]
 802860c:	4619      	mov	r1, r3
 802860e:	6878      	ldr	r0, [r7, #4]
 8028610:	f7fb f92e 	bl	8023870 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8028614:	e02b      	b.n	802866e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8028616:	f107 0263 	add.w	r2, r7, #99	; 0x63
 802861a:	f107 010c 	add.w	r1, r7, #12
 802861e:	2301      	movs	r3, #1
 8028620:	6878      	ldr	r0, [r7, #4]
 8028622:	f000 f90d 	bl	8028840 <lfs_file_flushedread>
 8028626:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8028628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802862a:	2b00      	cmp	r3, #0
 802862c:	da01      	bge.n	8028632 <lfs_file_flush+0xb2>
                    return res;
 802862e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8028630:	e06f      	b.n	8028712 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8028632:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8028636:	2301      	movs	r3, #1
 8028638:	6839      	ldr	r1, [r7, #0]
 802863a:	6878      	ldr	r0, [r7, #4]
 802863c:	f000 fa08 	bl	8028a50 <lfs_file_flushedwrite>
 8028640:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8028642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8028644:	2b00      	cmp	r3, #0
 8028646:	da01      	bge.n	802864c <lfs_file_flush+0xcc>
                    return res;
 8028648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802864a:	e062      	b.n	8028712 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	681b      	ldr	r3, [r3, #0]
 8028650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028654:	d00b      	beq.n	802866e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8028656:	f107 030c 	add.w	r3, r7, #12
 802865a:	3340      	adds	r3, #64	; 0x40
 802865c:	4619      	mov	r1, r3
 802865e:	6878      	ldr	r0, [r7, #4]
 8028660:	f7fb f906 	bl	8023870 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8028664:	687b      	ldr	r3, [r7, #4]
 8028666:	4619      	mov	r1, r3
 8028668:	6878      	ldr	r0, [r7, #4]
 802866a:	f7fb f901 	bl	8023870 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 802866e:	683b      	ldr	r3, [r7, #0]
 8028670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028672:	683b      	ldr	r3, [r7, #0]
 8028674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028676:	429a      	cmp	r2, r3
 8028678:	d3cd      	bcc.n	8028616 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 802867a:	683b      	ldr	r3, [r7, #0]
 802867c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8028680:	687a      	ldr	r2, [r7, #4]
 8028682:	2301      	movs	r3, #1
 8028684:	6878      	ldr	r0, [r7, #4]
 8028686:	f7fb faaf 	bl	8023be8 <lfs_bd_flush>
 802868a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802868c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802868e:	2b00      	cmp	r3, #0
 8028690:	d026      	beq.n	80286e0 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8028692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028694:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028698:	d001      	beq.n	802869e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 802869a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802869c:	e039      	b.n	8028712 <lfs_file_flush+0x192>
                        goto relocate;
 802869e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80286a0:	683b      	ldr	r3, [r7, #0]
 80286a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80286a4:	4a1d      	ldr	r2, [pc, #116]	; (802871c <lfs_file_flush+0x19c>)
 80286a6:	9200      	str	r2, [sp, #0]
 80286a8:	f640 425f 	movw	r2, #3167	; 0xc5f
 80286ac:	491c      	ldr	r1, [pc, #112]	; (8028720 <lfs_file_flush+0x1a0>)
 80286ae:	481d      	ldr	r0, [pc, #116]	; (8028724 <lfs_file_flush+0x1a4>)
 80286b0:	f004 ffa6 	bl	802d600 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80286b4:	6839      	ldr	r1, [r7, #0]
 80286b6:	6878      	ldr	r0, [r7, #4]
 80286b8:	f7ff fe66 	bl	8028388 <lfs_file_relocate>
 80286bc:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80286be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	d0da      	beq.n	802867a <lfs_file_flush+0xfa>
                    return err;
 80286c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80286c6:	e024      	b.n	8028712 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80286c8:	683b      	ldr	r3, [r7, #0]
 80286ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80286cc:	683b      	ldr	r3, [r7, #0]
 80286ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80286d0:	4619      	mov	r1, r3
 80286d2:	4610      	mov	r0, r2
 80286d4:	f7fb f806 	bl	80236e4 <lfs_max>
 80286d8:	4602      	mov	r2, r0
 80286da:	683b      	ldr	r3, [r7, #0]
 80286dc:	635a      	str	r2, [r3, #52]	; 0x34
 80286de:	e000      	b.n	80286e2 <lfs_file_flush+0x162>
                break;
 80286e0:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80286e2:	683b      	ldr	r3, [r7, #0]
 80286e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80286e6:	683b      	ldr	r3, [r7, #0]
 80286e8:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80286ea:	683b      	ldr	r3, [r7, #0]
 80286ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80286ee:	683b      	ldr	r3, [r7, #0]
 80286f0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80286f2:	683b      	ldr	r3, [r7, #0]
 80286f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80286fa:	683b      	ldr	r3, [r7, #0]
 80286fc:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80286fe:	683b      	ldr	r3, [r7, #0]
 8028700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028706:	683b      	ldr	r3, [r7, #0]
 8028708:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 802870a:	683b      	ldr	r3, [r7, #0]
 802870c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802870e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8028710:	2300      	movs	r3, #0
}
 8028712:	4618      	mov	r0, r3
 8028714:	3774      	adds	r7, #116	; 0x74
 8028716:	46bd      	mov	sp, r7
 8028718:	bd90      	pop	{r4, r7, pc}
 802871a:	bf00      	nop
 802871c:	08033780 	.word	0x08033780
 8028720:	0803366c 	.word	0x0803366c
 8028724:	08033800 	.word	0x08033800

08028728 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8028728:	b580      	push	{r7, lr}
 802872a:	b090      	sub	sp, #64	; 0x40
 802872c:	af00      	add	r7, sp, #0
 802872e:	6078      	str	r0, [r7, #4]
 8028730:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8028732:	683b      	ldr	r3, [r7, #0]
 8028734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802873a:	2b00      	cmp	r3, #0
 802873c:	d001      	beq.n	8028742 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 802873e:	2300      	movs	r3, #0
 8028740:	e07a      	b.n	8028838 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8028742:	6839      	ldr	r1, [r7, #0]
 8028744:	6878      	ldr	r0, [r7, #4]
 8028746:	f7ff ff1b 	bl	8028580 <lfs_file_flush>
 802874a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 802874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802874e:	2b00      	cmp	r3, #0
 8028750:	d007      	beq.n	8028762 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8028752:	683b      	ldr	r3, [r7, #0]
 8028754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028756:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802875a:	683b      	ldr	r3, [r7, #0]
 802875c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 802875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028760:	e06a      	b.n	8028838 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8028762:	683b      	ldr	r3, [r7, #0]
 8028764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802876a:	2b00      	cmp	r3, #0
 802876c:	d063      	beq.n	8028836 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 802876e:	683b      	ldr	r3, [r7, #0]
 8028770:	3308      	adds	r3, #8
 8028772:	4618      	mov	r0, r3
 8028774:	f7fb fbdb 	bl	8023f2e <lfs_pair_isnull>
 8028778:	4603      	mov	r3, r0
 802877a:	f083 0301 	eor.w	r3, r3, #1
 802877e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8028780:	2b00      	cmp	r3, #0
 8028782:	d058      	beq.n	8028836 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8028784:	683b      	ldr	r3, [r7, #0]
 8028786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802878c:	2b00      	cmp	r3, #0
 802878e:	d009      	beq.n	80287a4 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028790:	f240 2301 	movw	r3, #513	; 0x201
 8028794:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8028796:	683b      	ldr	r3, [r7, #0]
 8028798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802879a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 802879c:	683b      	ldr	r3, [r7, #0]
 802879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80287a0:	637b      	str	r3, [r7, #52]	; 0x34
 80287a2:	e014      	b.n	80287ce <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80287a4:	f240 2302 	movw	r3, #514	; 0x202
 80287a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80287aa:	683a      	ldr	r2, [r7, #0]
 80287ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80287b0:	3228      	adds	r2, #40	; 0x28
 80287b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80287b6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80287ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80287be:	4618      	mov	r0, r3
 80287c0:	f7fb fdd6 	bl	8024370 <lfs_ctz_tole32>
            buffer = &ctz;
 80287c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80287c8:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80287ca:	2308      	movs	r3, #8
 80287cc:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80287ce:	683b      	ldr	r3, [r7, #0]
 80287d0:	f103 0108 	add.w	r1, r3, #8
 80287d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80287d6:	051a      	lsls	r2, r3, #20
 80287d8:	683b      	ldr	r3, [r7, #0]
 80287da:	889b      	ldrh	r3, [r3, #4]
 80287dc:	029b      	lsls	r3, r3, #10
 80287de:	431a      	orrs	r2, r3
 80287e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287e2:	4313      	orrs	r3, r2
 80287e4:	61bb      	str	r3, [r7, #24]
 80287e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80287e8:	61fb      	str	r3, [r7, #28]
 80287ea:	683b      	ldr	r3, [r7, #0]
 80287ec:	889b      	ldrh	r3, [r3, #4]
 80287ee:	029a      	lsls	r2, r3, #10
 80287f0:	683b      	ldr	r3, [r7, #0]
 80287f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80287f4:	689b      	ldr	r3, [r3, #8]
 80287f6:	4313      	orrs	r3, r2
 80287f8:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80287fc:	623b      	str	r3, [r7, #32]
 80287fe:	683b      	ldr	r3, [r7, #0]
 8028800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028802:	685b      	ldr	r3, [r3, #4]
 8028804:	627b      	str	r3, [r7, #36]	; 0x24
 8028806:	f107 0218 	add.w	r2, r7, #24
 802880a:	2302      	movs	r3, #2
 802880c:	6878      	ldr	r0, [r7, #4]
 802880e:	f7fe ff33 	bl	8027678 <lfs_dir_commit>
 8028812:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8028814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028816:	2b00      	cmp	r3, #0
 8028818:	d007      	beq.n	802882a <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 802881a:	683b      	ldr	r3, [r7, #0]
 802881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802881e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028822:	683b      	ldr	r3, [r7, #0]
 8028824:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028828:	e006      	b.n	8028838 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 802882a:	683b      	ldr	r3, [r7, #0]
 802882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802882e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8028832:	683b      	ldr	r3, [r7, #0]
 8028834:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8028836:	2300      	movs	r3, #0
}
 8028838:	4618      	mov	r0, r3
 802883a:	3740      	adds	r7, #64	; 0x40
 802883c:	46bd      	mov	sp, r7
 802883e:	bd80      	pop	{r7, pc}

08028840 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028840:	b5b0      	push	{r4, r5, r7, lr}
 8028842:	b090      	sub	sp, #64	; 0x40
 8028844:	af06      	add	r7, sp, #24
 8028846:	60f8      	str	r0, [r7, #12]
 8028848:	60b9      	str	r1, [r7, #8]
 802884a:	607a      	str	r2, [r7, #4]
 802884c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 802884e:	687b      	ldr	r3, [r7, #4]
 8028850:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8028852:	683b      	ldr	r3, [r7, #0]
 8028854:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8028856:	68bb      	ldr	r3, [r7, #8]
 8028858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802885a:	68bb      	ldr	r3, [r7, #8]
 802885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802885e:	429a      	cmp	r2, r3
 8028860:	d301      	bcc.n	8028866 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8028862:	2300      	movs	r3, #0
 8028864:	e0b7      	b.n	80289d6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8028866:	68bb      	ldr	r3, [r7, #8]
 8028868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802886a:	68bb      	ldr	r3, [r7, #8]
 802886c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802886e:	1ad3      	subs	r3, r2, r3
 8028870:	4619      	mov	r1, r3
 8028872:	6838      	ldr	r0, [r7, #0]
 8028874:	f7fa ff46 	bl	8023704 <lfs_min>
 8028878:	6038      	str	r0, [r7, #0]
    nsize = size;
 802887a:	683b      	ldr	r3, [r7, #0]
 802887c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 802887e:	e0a5      	b.n	80289cc <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8028880:	68bb      	ldr	r3, [r7, #8]
 8028882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028888:	2b00      	cmp	r3, #0
 802888a:	d006      	beq.n	802889a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 802888c:	68bb      	ldr	r3, [r7, #8]
 802888e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028890:	68fb      	ldr	r3, [r7, #12]
 8028892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028894:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028896:	429a      	cmp	r2, r3
 8028898:	d130      	bne.n	80288fc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 802889a:	68bb      	ldr	r3, [r7, #8]
 802889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802889e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80288a2:	2b00      	cmp	r3, #0
 80288a4:	d11c      	bne.n	80288e0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80288a6:	68bb      	ldr	r3, [r7, #8]
 80288a8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80288ac:	68bb      	ldr	r3, [r7, #8]
 80288ae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80288b0:	68bb      	ldr	r3, [r7, #8]
 80288b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80288b4:	68ba      	ldr	r2, [r7, #8]
 80288b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80288b8:	68b9      	ldr	r1, [r7, #8]
 80288ba:	3138      	adds	r1, #56	; 0x38
 80288bc:	68b8      	ldr	r0, [r7, #8]
 80288be:	303c      	adds	r0, #60	; 0x3c
 80288c0:	9003      	str	r0, [sp, #12]
 80288c2:	9102      	str	r1, [sp, #8]
 80288c4:	9201      	str	r2, [sp, #4]
 80288c6:	9300      	str	r3, [sp, #0]
 80288c8:	462b      	mov	r3, r5
 80288ca:	4622      	mov	r2, r4
 80288cc:	2100      	movs	r1, #0
 80288ce:	68f8      	ldr	r0, [r7, #12]
 80288d0:	f7ff f97c 	bl	8027bcc <lfs_ctz_find>
 80288d4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80288d6:	69fb      	ldr	r3, [r7, #28]
 80288d8:	2b00      	cmp	r3, #0
 80288da:	d009      	beq.n	80288f0 <lfs_file_flushedread+0xb0>
                    return err;
 80288dc:	69fb      	ldr	r3, [r7, #28]
 80288de:	e07a      	b.n	80289d6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80288e0:	68bb      	ldr	r3, [r7, #8]
 80288e2:	f06f 0201 	mvn.w	r2, #1
 80288e6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80288e8:	68bb      	ldr	r3, [r7, #8]
 80288ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80288ec:	68bb      	ldr	r3, [r7, #8]
 80288ee:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80288f0:	68bb      	ldr	r3, [r7, #8]
 80288f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80288f8:	68bb      	ldr	r3, [r7, #8]
 80288fa:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80288fc:	68fb      	ldr	r3, [r7, #12]
 80288fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028900:	69da      	ldr	r2, [r3, #28]
 8028902:	68bb      	ldr	r3, [r7, #8]
 8028904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028906:	1ad3      	subs	r3, r2, r3
 8028908:	4619      	mov	r1, r3
 802890a:	6a38      	ldr	r0, [r7, #32]
 802890c:	f7fa fefa 	bl	8023704 <lfs_min>
 8028910:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8028912:	68bb      	ldr	r3, [r7, #8]
 8028914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802891a:	2b00      	cmp	r3, #0
 802891c:	d026      	beq.n	802896c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 802891e:	68bb      	ldr	r3, [r7, #8]
 8028920:	f103 0408 	add.w	r4, r3, #8
 8028924:	68bb      	ldr	r3, [r7, #8]
 8028926:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 802892a:	68fb      	ldr	r3, [r7, #12]
 802892c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802892e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028930:	68bb      	ldr	r3, [r7, #8]
 8028932:	889b      	ldrh	r3, [r3, #4]
 8028934:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8028936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802893a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802893e:	68b9      	ldr	r1, [r7, #8]
 8028940:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8028942:	69b8      	ldr	r0, [r7, #24]
 8028944:	9005      	str	r0, [sp, #20]
 8028946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8028948:	9004      	str	r0, [sp, #16]
 802894a:	9103      	str	r1, [sp, #12]
 802894c:	9302      	str	r3, [sp, #8]
 802894e:	4b24      	ldr	r3, [pc, #144]	; (80289e0 <lfs_file_flushedread+0x1a0>)
 8028950:	9301      	str	r3, [sp, #4]
 8028952:	9200      	str	r2, [sp, #0]
 8028954:	462b      	mov	r3, r5
 8028956:	2200      	movs	r2, #0
 8028958:	4621      	mov	r1, r4
 802895a:	68f8      	ldr	r0, [r7, #12]
 802895c:	f7fb ffed 	bl	802493a <lfs_dir_getread>
 8028960:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8028962:	693b      	ldr	r3, [r7, #16]
 8028964:	2b00      	cmp	r3, #0
 8028966:	d01d      	beq.n	80289a4 <lfs_file_flushedread+0x164>
                return err;
 8028968:	693b      	ldr	r3, [r7, #16]
 802896a:	e034      	b.n	80289d6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 802896c:	68bb      	ldr	r3, [r7, #8]
 802896e:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028972:	68fb      	ldr	r3, [r7, #12]
 8028974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028976:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8028978:	68bb      	ldr	r3, [r7, #8]
 802897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802897c:	68ba      	ldr	r2, [r7, #8]
 802897e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028980:	69b9      	ldr	r1, [r7, #24]
 8028982:	9103      	str	r1, [sp, #12]
 8028984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028986:	9102      	str	r1, [sp, #8]
 8028988:	9201      	str	r2, [sp, #4]
 802898a:	9300      	str	r3, [sp, #0]
 802898c:	4623      	mov	r3, r4
 802898e:	4602      	mov	r2, r0
 8028990:	2100      	movs	r1, #0
 8028992:	68f8      	ldr	r0, [r7, #12]
 8028994:	f7fa ff92 	bl	80238bc <lfs_bd_read>
 8028998:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 802899a:	697b      	ldr	r3, [r7, #20]
 802899c:	2b00      	cmp	r3, #0
 802899e:	d001      	beq.n	80289a4 <lfs_file_flushedread+0x164>
                return err;
 80289a0:	697b      	ldr	r3, [r7, #20]
 80289a2:	e018      	b.n	80289d6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80289a4:	68bb      	ldr	r3, [r7, #8]
 80289a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80289a8:	69bb      	ldr	r3, [r7, #24]
 80289aa:	441a      	add	r2, r3
 80289ac:	68bb      	ldr	r3, [r7, #8]
 80289ae:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80289b0:	68bb      	ldr	r3, [r7, #8]
 80289b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80289b4:	69bb      	ldr	r3, [r7, #24]
 80289b6:	441a      	add	r2, r3
 80289b8:	68bb      	ldr	r3, [r7, #8]
 80289ba:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80289bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80289be:	69bb      	ldr	r3, [r7, #24]
 80289c0:	4413      	add	r3, r2
 80289c2:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80289c4:	6a3a      	ldr	r2, [r7, #32]
 80289c6:	69bb      	ldr	r3, [r7, #24]
 80289c8:	1ad3      	subs	r3, r2, r3
 80289ca:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80289cc:	6a3b      	ldr	r3, [r7, #32]
 80289ce:	2b00      	cmp	r3, #0
 80289d0:	f47f af56 	bne.w	8028880 <lfs_file_flushedread+0x40>
    }

    return size;
 80289d4:	683b      	ldr	r3, [r7, #0]
}
 80289d6:	4618      	mov	r0, r3
 80289d8:	3728      	adds	r7, #40	; 0x28
 80289da:	46bd      	mov	sp, r7
 80289dc:	bdb0      	pop	{r4, r5, r7, pc}
 80289de:	bf00      	nop
 80289e0:	fff7fc00 	.word	0xfff7fc00

080289e4 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80289e4:	b580      	push	{r7, lr}
 80289e6:	b086      	sub	sp, #24
 80289e8:	af00      	add	r7, sp, #0
 80289ea:	60f8      	str	r0, [r7, #12]
 80289ec:	60b9      	str	r1, [r7, #8]
 80289ee:	607a      	str	r2, [r7, #4]
 80289f0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80289f2:	68bb      	ldr	r3, [r7, #8]
 80289f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289f6:	f003 0301 	and.w	r3, r3, #1
 80289fa:	2b00      	cmp	r3, #0
 80289fc:	d106      	bne.n	8028a0c <lfs_file_rawread+0x28>
 80289fe:	4b11      	ldr	r3, [pc, #68]	; (8028a44 <lfs_file_rawread+0x60>)
 8028a00:	4a11      	ldr	r2, [pc, #68]	; (8028a48 <lfs_file_rawread+0x64>)
 8028a02:	f640 41ea 	movw	r1, #3306	; 0xcea
 8028a06:	4811      	ldr	r0, [pc, #68]	; (8028a4c <lfs_file_rawread+0x68>)
 8028a08:	f003 fdc0 	bl	802c58c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028a0c:	68bb      	ldr	r3, [r7, #8]
 8028a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028a14:	2b00      	cmp	r3, #0
 8028a16:	d009      	beq.n	8028a2c <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8028a18:	68b9      	ldr	r1, [r7, #8]
 8028a1a:	68f8      	ldr	r0, [r7, #12]
 8028a1c:	f7ff fdb0 	bl	8028580 <lfs_file_flush>
 8028a20:	6178      	str	r0, [r7, #20]
        if (err) {
 8028a22:	697b      	ldr	r3, [r7, #20]
 8028a24:	2b00      	cmp	r3, #0
 8028a26:	d001      	beq.n	8028a2c <lfs_file_rawread+0x48>
            return err;
 8028a28:	697b      	ldr	r3, [r7, #20]
 8028a2a:	e006      	b.n	8028a3a <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8028a2c:	683b      	ldr	r3, [r7, #0]
 8028a2e:	687a      	ldr	r2, [r7, #4]
 8028a30:	68b9      	ldr	r1, [r7, #8]
 8028a32:	68f8      	ldr	r0, [r7, #12]
 8028a34:	f7ff ff04 	bl	8028840 <lfs_file_flushedread>
 8028a38:	4603      	mov	r3, r0
}
 8028a3a:	4618      	mov	r0, r3
 8028a3c:	3718      	adds	r7, #24
 8028a3e:	46bd      	mov	sp, r7
 8028a40:	bd80      	pop	{r7, pc}
 8028a42:	bf00      	nop
 8028a44:	080339a8 	.word	0x080339a8
 8028a48:	080349bc 	.word	0x080349bc
 8028a4c:	0803366c 	.word	0x0803366c

08028a50 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028a50:	b5b0      	push	{r4, r5, r7, lr}
 8028a52:	b090      	sub	sp, #64	; 0x40
 8028a54:	af04      	add	r7, sp, #16
 8028a56:	60f8      	str	r0, [r7, #12]
 8028a58:	60b9      	str	r1, [r7, #8]
 8028a5a:	607a      	str	r2, [r7, #4]
 8028a5c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8028a5e:	687b      	ldr	r3, [r7, #4]
 8028a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8028a62:	683b      	ldr	r3, [r7, #0]
 8028a64:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8028a66:	68bb      	ldr	r3, [r7, #8]
 8028a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028a6e:	2b00      	cmp	r3, #0
 8028a70:	f000 810c 	beq.w	8028c8c <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8028a74:	68bb      	ldr	r3, [r7, #8]
 8028a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a7a:	441a      	add	r2, r3
 8028a7c:	68bb      	ldr	r3, [r7, #8]
 8028a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028a80:	4619      	mov	r1, r3
 8028a82:	4610      	mov	r0, r2
 8028a84:	f7fa fe2e 	bl	80236e4 <lfs_max>
 8028a88:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8028a8a:	68fb      	ldr	r3, [r7, #12]
 8028a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8028a90:	68fb      	ldr	r3, [r7, #12]
 8028a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028a96:	2b00      	cmp	r3, #0
 8028a98:	d004      	beq.n	8028aa4 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028a9a:	68fb      	ldr	r3, [r7, #12]
 8028a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028aa0:	08db      	lsrs	r3, r3, #3
 8028aa2:	e003      	b.n	8028aac <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028aa4:	68fb      	ldr	r3, [r7, #12]
 8028aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028aa8:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8028aaa:	08db      	lsrs	r3, r3, #3
 8028aac:	4619      	mov	r1, r3
 8028aae:	4610      	mov	r0, r2
 8028ab0:	f7fa fe28 	bl	8023704 <lfs_min>
 8028ab4:	4603      	mov	r3, r0
 8028ab6:	4619      	mov	r1, r3
 8028ab8:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8028abc:	f7fa fe22 	bl	8023704 <lfs_min>
 8028ac0:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028ac2:	429c      	cmp	r4, r3
 8028ac4:	f240 80e2 	bls.w	8028c8c <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028ac8:	68b9      	ldr	r1, [r7, #8]
 8028aca:	68f8      	ldr	r0, [r7, #12]
 8028acc:	f7ff fd36 	bl	802853c <lfs_file_outline>
 8028ad0:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ad4:	2b00      	cmp	r3, #0
 8028ad6:	f000 80d9 	beq.w	8028c8c <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8028ada:	68bb      	ldr	r3, [r7, #8]
 8028adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ade:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028ae2:	68bb      	ldr	r3, [r7, #8]
 8028ae4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ae8:	e0d5      	b.n	8028c96 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8028aea:	68bb      	ldr	r3, [r7, #8]
 8028aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028af2:	2b00      	cmp	r3, #0
 8028af4:	d006      	beq.n	8028b04 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8028af6:	68bb      	ldr	r3, [r7, #8]
 8028af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028afe:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8028b00:	429a      	cmp	r2, r3
 8028b02:	d16b      	bne.n	8028bdc <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8028b04:	68bb      	ldr	r3, [r7, #8]
 8028b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028b0c:	2b00      	cmp	r3, #0
 8028b0e:	d157      	bne.n	8028bc0 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8028b10:	68bb      	ldr	r3, [r7, #8]
 8028b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028b18:	2b00      	cmp	r3, #0
 8028b1a:	d12d      	bne.n	8028b78 <lfs_file_flushedwrite+0x128>
 8028b1c:	68bb      	ldr	r3, [r7, #8]
 8028b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b20:	2b00      	cmp	r3, #0
 8028b22:	d029      	beq.n	8028b78 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028b24:	68bb      	ldr	r3, [r7, #8]
 8028b26:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8028b2a:	68bb      	ldr	r3, [r7, #8]
 8028b2c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028b2e:	68bb      	ldr	r3, [r7, #8]
 8028b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8028b32:	68ba      	ldr	r2, [r7, #8]
 8028b34:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028b36:	3a01      	subs	r2, #1
 8028b38:	68b9      	ldr	r1, [r7, #8]
 8028b3a:	3138      	adds	r1, #56	; 0x38
 8028b3c:	68b8      	ldr	r0, [r7, #8]
 8028b3e:	303c      	adds	r0, #60	; 0x3c
 8028b40:	9003      	str	r0, [sp, #12]
 8028b42:	9102      	str	r1, [sp, #8]
 8028b44:	9201      	str	r2, [sp, #4]
 8028b46:	9300      	str	r3, [sp, #0]
 8028b48:	462b      	mov	r3, r5
 8028b4a:	4622      	mov	r2, r4
 8028b4c:	2100      	movs	r1, #0
 8028b4e:	68f8      	ldr	r0, [r7, #12]
 8028b50:	f7ff f83c 	bl	8027bcc <lfs_ctz_find>
 8028b54:	6238      	str	r0, [r7, #32]
                    if (err) {
 8028b56:	6a3b      	ldr	r3, [r7, #32]
 8028b58:	2b00      	cmp	r3, #0
 8028b5a:	d007      	beq.n	8028b6c <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8028b5c:	68bb      	ldr	r3, [r7, #8]
 8028b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b60:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028b64:	68bb      	ldr	r3, [r7, #8]
 8028b66:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8028b68:	6a3b      	ldr	r3, [r7, #32]
 8028b6a:	e094      	b.n	8028c96 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8028b6c:	68bb      	ldr	r3, [r7, #8]
 8028b6e:	3340      	adds	r3, #64	; 0x40
 8028b70:	4619      	mov	r1, r3
 8028b72:	68f8      	ldr	r0, [r7, #12]
 8028b74:	f7fa fe8b 	bl	802388e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8028b78:	68f8      	ldr	r0, [r7, #12]
 8028b7a:	f7fb fd09 	bl	8024590 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8028b7e:	68bb      	ldr	r3, [r7, #8]
 8028b80:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028b84:	68fc      	ldr	r4, [r7, #12]
 8028b86:	68bb      	ldr	r3, [r7, #8]
 8028b88:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8028b8a:	68bb      	ldr	r3, [r7, #8]
 8028b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b8e:	68ba      	ldr	r2, [r7, #8]
 8028b90:	3238      	adds	r2, #56	; 0x38
 8028b92:	68b9      	ldr	r1, [r7, #8]
 8028b94:	313c      	adds	r1, #60	; 0x3c
 8028b96:	9102      	str	r1, [sp, #8]
 8028b98:	9201      	str	r2, [sp, #4]
 8028b9a:	9300      	str	r3, [sp, #0]
 8028b9c:	462b      	mov	r3, r5
 8028b9e:	4622      	mov	r2, r4
 8028ba0:	4601      	mov	r1, r0
 8028ba2:	68f8      	ldr	r0, [r7, #12]
 8028ba4:	f7ff f87e 	bl	8027ca4 <lfs_ctz_extend>
 8028ba8:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8028baa:	69fb      	ldr	r3, [r7, #28]
 8028bac:	2b00      	cmp	r3, #0
 8028bae:	d00f      	beq.n	8028bd0 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028bb0:	68bb      	ldr	r3, [r7, #8]
 8028bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bb4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028bb8:	68bb      	ldr	r3, [r7, #8]
 8028bba:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8028bbc:	69fb      	ldr	r3, [r7, #28]
 8028bbe:	e06a      	b.n	8028c96 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028bc0:	68bb      	ldr	r3, [r7, #8]
 8028bc2:	f06f 0201 	mvn.w	r2, #1
 8028bc6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028bc8:	68bb      	ldr	r3, [r7, #8]
 8028bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028bcc:	68bb      	ldr	r3, [r7, #8]
 8028bce:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8028bd0:	68bb      	ldr	r3, [r7, #8]
 8028bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028bd8:	68bb      	ldr	r3, [r7, #8]
 8028bda:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028bdc:	68fb      	ldr	r3, [r7, #12]
 8028bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028be0:	69da      	ldr	r2, [r3, #28]
 8028be2:	68bb      	ldr	r3, [r7, #8]
 8028be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028be6:	1ad3      	subs	r3, r2, r3
 8028be8:	4619      	mov	r1, r3
 8028bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028bec:	f7fa fd8a 	bl	8023704 <lfs_min>
 8028bf0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8028bf2:	68bb      	ldr	r3, [r7, #8]
 8028bf4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028bf8:	68fc      	ldr	r4, [r7, #12]
 8028bfa:	68bb      	ldr	r3, [r7, #8]
 8028bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028bfe:	68ba      	ldr	r2, [r7, #8]
 8028c00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028c02:	69b9      	ldr	r1, [r7, #24]
 8028c04:	9103      	str	r1, [sp, #12]
 8028c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028c08:	9102      	str	r1, [sp, #8]
 8028c0a:	9201      	str	r2, [sp, #4]
 8028c0c:	9300      	str	r3, [sp, #0]
 8028c0e:	2301      	movs	r3, #1
 8028c10:	4622      	mov	r2, r4
 8028c12:	4601      	mov	r1, r0
 8028c14:	68f8      	ldr	r0, [r7, #12]
 8028c16:	f7fb f897 	bl	8023d48 <lfs_bd_prog>
 8028c1a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028c1c:	697b      	ldr	r3, [r7, #20]
 8028c1e:	2b00      	cmp	r3, #0
 8028c20:	d01c      	beq.n	8028c5c <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8028c22:	697b      	ldr	r3, [r7, #20]
 8028c24:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028c28:	d007      	beq.n	8028c3a <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8028c2a:	68bb      	ldr	r3, [r7, #8]
 8028c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028c32:	68bb      	ldr	r3, [r7, #8]
 8028c34:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028c36:	697b      	ldr	r3, [r7, #20]
 8028c38:	e02d      	b.n	8028c96 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8028c3a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8028c3c:	68b9      	ldr	r1, [r7, #8]
 8028c3e:	68f8      	ldr	r0, [r7, #12]
 8028c40:	f7ff fba2 	bl	8028388 <lfs_file_relocate>
 8028c44:	6178      	str	r0, [r7, #20]
            if (err) {
 8028c46:	697b      	ldr	r3, [r7, #20]
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	d0d2      	beq.n	8028bf2 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8028c4c:	68bb      	ldr	r3, [r7, #8]
 8028c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c50:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028c54:	68bb      	ldr	r3, [r7, #8]
 8028c56:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028c58:	697b      	ldr	r3, [r7, #20]
 8028c5a:	e01c      	b.n	8028c96 <lfs_file_flushedwrite+0x246>
            break;
 8028c5c:	bf00      	nop
            }
        }

        file->pos += diff;
 8028c5e:	68bb      	ldr	r3, [r7, #8]
 8028c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028c62:	69bb      	ldr	r3, [r7, #24]
 8028c64:	441a      	add	r2, r3
 8028c66:	68bb      	ldr	r3, [r7, #8]
 8028c68:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028c6a:	68bb      	ldr	r3, [r7, #8]
 8028c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028c6e:	69bb      	ldr	r3, [r7, #24]
 8028c70:	441a      	add	r2, r3
 8028c72:	68bb      	ldr	r3, [r7, #8]
 8028c74:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028c78:	69bb      	ldr	r3, [r7, #24]
 8028c7a:	4413      	add	r3, r2
 8028c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8028c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028c80:	69bb      	ldr	r3, [r7, #24]
 8028c82:	1ad3      	subs	r3, r2, r3
 8028c84:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8028c86:	68f8      	ldr	r0, [r7, #12]
 8028c88:	f7fb fc82 	bl	8024590 <lfs_alloc_ack>
    while (nsize > 0) {
 8028c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028c8e:	2b00      	cmp	r3, #0
 8028c90:	f47f af2b 	bne.w	8028aea <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028c94:	683b      	ldr	r3, [r7, #0]
}
 8028c96:	4618      	mov	r0, r3
 8028c98:	3730      	adds	r7, #48	; 0x30
 8028c9a:	46bd      	mov	sp, r7
 8028c9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028ca0 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028ca0:	b580      	push	{r7, lr}
 8028ca2:	b08a      	sub	sp, #40	; 0x28
 8028ca4:	af00      	add	r7, sp, #0
 8028ca6:	60f8      	str	r0, [r7, #12]
 8028ca8:	60b9      	str	r1, [r7, #8]
 8028caa:	607a      	str	r2, [r7, #4]
 8028cac:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8028cae:	68bb      	ldr	r3, [r7, #8]
 8028cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028cb2:	f003 0302 	and.w	r3, r3, #2
 8028cb6:	2b00      	cmp	r3, #0
 8028cb8:	d106      	bne.n	8028cc8 <lfs_file_rawwrite+0x28>
 8028cba:	4b38      	ldr	r3, [pc, #224]	; (8028d9c <lfs_file_rawwrite+0xfc>)
 8028cbc:	4a38      	ldr	r2, [pc, #224]	; (8028da0 <lfs_file_rawwrite+0x100>)
 8028cbe:	f640 5155 	movw	r1, #3413	; 0xd55
 8028cc2:	4838      	ldr	r0, [pc, #224]	; (8028da4 <lfs_file_rawwrite+0x104>)
 8028cc4:	f003 fc62 	bl	802c58c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028cc8:	68bb      	ldr	r3, [r7, #8]
 8028cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028cd0:	2b00      	cmp	r3, #0
 8028cd2:	d009      	beq.n	8028ce8 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028cd4:	68b9      	ldr	r1, [r7, #8]
 8028cd6:	68f8      	ldr	r0, [r7, #12]
 8028cd8:	f7ff fc52 	bl	8028580 <lfs_file_flush>
 8028cdc:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	d001      	beq.n	8028ce8 <lfs_file_rawwrite+0x48>
            return err;
 8028ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ce6:	e055      	b.n	8028d94 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028ce8:	68bb      	ldr	r3, [r7, #8]
 8028cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028cf0:	2b00      	cmp	r3, #0
 8028cf2:	d009      	beq.n	8028d08 <lfs_file_rawwrite+0x68>
 8028cf4:	68bb      	ldr	r3, [r7, #8]
 8028cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028cf8:	68bb      	ldr	r3, [r7, #8]
 8028cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028cfc:	429a      	cmp	r2, r3
 8028cfe:	d203      	bcs.n	8028d08 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028d00:	68bb      	ldr	r3, [r7, #8]
 8028d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028d04:	68bb      	ldr	r3, [r7, #8]
 8028d06:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028d08:	68bb      	ldr	r3, [r7, #8]
 8028d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028d0c:	683b      	ldr	r3, [r7, #0]
 8028d0e:	441a      	add	r2, r3
 8028d10:	68fb      	ldr	r3, [r7, #12]
 8028d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028d14:	429a      	cmp	r2, r3
 8028d16:	d902      	bls.n	8028d1e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028d18:	f06f 031a 	mvn.w	r3, #26
 8028d1c:	e03a      	b.n	8028d94 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8028d1e:	68bb      	ldr	r3, [r7, #8]
 8028d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028d26:	2b00      	cmp	r3, #0
 8028d28:	d121      	bne.n	8028d6e <lfs_file_rawwrite+0xce>
 8028d2a:	68bb      	ldr	r3, [r7, #8]
 8028d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028d2e:	68bb      	ldr	r3, [r7, #8]
 8028d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028d32:	429a      	cmp	r2, r3
 8028d34:	d91b      	bls.n	8028d6e <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8028d36:	68bb      	ldr	r3, [r7, #8]
 8028d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028d3a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8028d3c:	68bb      	ldr	r3, [r7, #8]
 8028d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028d40:	68bb      	ldr	r3, [r7, #8]
 8028d42:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8028d44:	e00e      	b.n	8028d64 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8028d46:	2300      	movs	r3, #0
 8028d48:	75fb      	strb	r3, [r7, #23]
 8028d4a:	f107 0217 	add.w	r2, r7, #23
 8028d4e:	2301      	movs	r3, #1
 8028d50:	68b9      	ldr	r1, [r7, #8]
 8028d52:	68f8      	ldr	r0, [r7, #12]
 8028d54:	f7ff fe7c 	bl	8028a50 <lfs_file_flushedwrite>
 8028d58:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8028d5a:	69fb      	ldr	r3, [r7, #28]
 8028d5c:	2b00      	cmp	r3, #0
 8028d5e:	da01      	bge.n	8028d64 <lfs_file_rawwrite+0xc4>
                return res;
 8028d60:	69fb      	ldr	r3, [r7, #28]
 8028d62:	e017      	b.n	8028d94 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8028d64:	68bb      	ldr	r3, [r7, #8]
 8028d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028d68:	6a3a      	ldr	r2, [r7, #32]
 8028d6a:	429a      	cmp	r2, r3
 8028d6c:	d8eb      	bhi.n	8028d46 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8028d6e:	683b      	ldr	r3, [r7, #0]
 8028d70:	687a      	ldr	r2, [r7, #4]
 8028d72:	68b9      	ldr	r1, [r7, #8]
 8028d74:	68f8      	ldr	r0, [r7, #12]
 8028d76:	f7ff fe6b 	bl	8028a50 <lfs_file_flushedwrite>
 8028d7a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8028d7c:	69bb      	ldr	r3, [r7, #24]
 8028d7e:	2b00      	cmp	r3, #0
 8028d80:	da01      	bge.n	8028d86 <lfs_file_rawwrite+0xe6>
        return nsize;
 8028d82:	69bb      	ldr	r3, [r7, #24]
 8028d84:	e006      	b.n	8028d94 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8028d86:	68bb      	ldr	r3, [r7, #8]
 8028d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8028d8e:	68bb      	ldr	r3, [r7, #8]
 8028d90:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8028d92:	69bb      	ldr	r3, [r7, #24]
}
 8028d94:	4618      	mov	r0, r3
 8028d96:	3728      	adds	r7, #40	; 0x28
 8028d98:	46bd      	mov	sp, r7
 8028d9a:	bd80      	pop	{r7, pc}
 8028d9c:	080339d8 	.word	0x080339d8
 8028da0:	080349d0 	.word	0x080349d0
 8028da4:	0803366c 	.word	0x0803366c

08028da8 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8028da8:	b580      	push	{r7, lr}
 8028daa:	b08c      	sub	sp, #48	; 0x30
 8028dac:	af00      	add	r7, sp, #0
 8028dae:	60f8      	str	r0, [r7, #12]
 8028db0:	60b9      	str	r1, [r7, #8]
 8028db2:	607a      	str	r2, [r7, #4]
 8028db4:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8028db6:	68bb      	ldr	r3, [r7, #8]
 8028db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8028dbc:	683b      	ldr	r3, [r7, #0]
 8028dbe:	2b00      	cmp	r3, #0
 8028dc0:	d102      	bne.n	8028dc8 <lfs_file_rawseek+0x20>
        npos = off;
 8028dc2:	687b      	ldr	r3, [r7, #4]
 8028dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028dc6:	e025      	b.n	8028e14 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8028dc8:	683b      	ldr	r3, [r7, #0]
 8028dca:	2b01      	cmp	r3, #1
 8028dcc:	d10f      	bne.n	8028dee <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8028dce:	68bb      	ldr	r3, [r7, #8]
 8028dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028dd2:	461a      	mov	r2, r3
 8028dd4:	687b      	ldr	r3, [r7, #4]
 8028dd6:	4413      	add	r3, r2
 8028dd8:	2b00      	cmp	r3, #0
 8028dda:	da02      	bge.n	8028de2 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8028ddc:	f06f 0315 	mvn.w	r3, #21
 8028de0:	e067      	b.n	8028eb2 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8028de2:	68bb      	ldr	r3, [r7, #8]
 8028de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028de6:	687b      	ldr	r3, [r7, #4]
 8028de8:	4413      	add	r3, r2
 8028dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028dec:	e012      	b.n	8028e14 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8028dee:	683b      	ldr	r3, [r7, #0]
 8028df0:	2b02      	cmp	r3, #2
 8028df2:	d10f      	bne.n	8028e14 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8028df4:	68b9      	ldr	r1, [r7, #8]
 8028df6:	68f8      	ldr	r0, [r7, #12]
 8028df8:	f000 f85f 	bl	8028eba <lfs_file_rawsize>
 8028dfc:	4602      	mov	r2, r0
 8028dfe:	687b      	ldr	r3, [r7, #4]
 8028e00:	4413      	add	r3, r2
 8028e02:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8028e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028e06:	2b00      	cmp	r3, #0
 8028e08:	da02      	bge.n	8028e10 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8028e0a:	f06f 0315 	mvn.w	r3, #21
 8028e0e:	e050      	b.n	8028eb2 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8028e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028e1a:	429a      	cmp	r2, r3
 8028e1c:	d902      	bls.n	8028e24 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8028e1e:	f06f 0315 	mvn.w	r3, #21
 8028e22:	e046      	b.n	8028eb2 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8028e24:	68bb      	ldr	r3, [r7, #8]
 8028e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028e2a:	429a      	cmp	r2, r3
 8028e2c:	d101      	bne.n	8028e32 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8028e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028e30:	e03f      	b.n	8028eb2 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8028e32:	68bb      	ldr	r3, [r7, #8]
 8028e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8028e3a:	2b00      	cmp	r3, #0
 8028e3c:	d12b      	bne.n	8028e96 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8028e3e:	68bb      	ldr	r3, [r7, #8]
 8028e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028e42:	61bb      	str	r3, [r7, #24]
 8028e44:	f107 0318 	add.w	r3, r7, #24
 8028e48:	4619      	mov	r1, r3
 8028e4a:	68f8      	ldr	r0, [r7, #12]
 8028e4c:	f7fe fe86 	bl	8027b5c <lfs_ctz_index>
 8028e50:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8028e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028e54:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8028e56:	f107 0314 	add.w	r3, r7, #20
 8028e5a:	4619      	mov	r1, r3
 8028e5c:	68f8      	ldr	r0, [r7, #12]
 8028e5e:	f7fe fe7d 	bl	8027b5c <lfs_ctz_index>
 8028e62:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8028e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e66:	6a3b      	ldr	r3, [r7, #32]
 8028e68:	429a      	cmp	r2, r3
 8028e6a:	d114      	bne.n	8028e96 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8028e6c:	68bb      	ldr	r3, [r7, #8]
 8028e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028e70:	697b      	ldr	r3, [r7, #20]
 8028e72:	429a      	cmp	r2, r3
 8028e74:	d80f      	bhi.n	8028e96 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8028e76:	68bb      	ldr	r3, [r7, #8]
 8028e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028e7a:	68bb      	ldr	r3, [r7, #8]
 8028e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028e7e:	441a      	add	r2, r3
 8028e80:	697b      	ldr	r3, [r7, #20]
 8028e82:	429a      	cmp	r2, r3
 8028e84:	d907      	bls.n	8028e96 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8028e86:	68bb      	ldr	r3, [r7, #8]
 8028e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028e8a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8028e8c:	697a      	ldr	r2, [r7, #20]
 8028e8e:	68bb      	ldr	r3, [r7, #8]
 8028e90:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8028e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028e94:	e00d      	b.n	8028eb2 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8028e96:	68b9      	ldr	r1, [r7, #8]
 8028e98:	68f8      	ldr	r0, [r7, #12]
 8028e9a:	f7ff fb71 	bl	8028580 <lfs_file_flush>
 8028e9e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8028ea0:	69fb      	ldr	r3, [r7, #28]
 8028ea2:	2b00      	cmp	r3, #0
 8028ea4:	d001      	beq.n	8028eaa <lfs_file_rawseek+0x102>
        return err;
 8028ea6:	69fb      	ldr	r3, [r7, #28]
 8028ea8:	e003      	b.n	8028eb2 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8028eaa:	68bb      	ldr	r3, [r7, #8]
 8028eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028eae:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8028eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8028eb2:	4618      	mov	r0, r3
 8028eb4:	3730      	adds	r7, #48	; 0x30
 8028eb6:	46bd      	mov	sp, r7
 8028eb8:	bd80      	pop	{r7, pc}

08028eba <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8028eba:	b580      	push	{r7, lr}
 8028ebc:	b082      	sub	sp, #8
 8028ebe:	af00      	add	r7, sp, #0
 8028ec0:	6078      	str	r0, [r7, #4]
 8028ec2:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028ec4:	683b      	ldr	r3, [r7, #0]
 8028ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028ecc:	2b00      	cmp	r3, #0
 8028ece:	d009      	beq.n	8028ee4 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8028ed0:	683b      	ldr	r3, [r7, #0]
 8028ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028ed4:	683b      	ldr	r3, [r7, #0]
 8028ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ed8:	4619      	mov	r1, r3
 8028eda:	4610      	mov	r0, r2
 8028edc:	f7fa fc02 	bl	80236e4 <lfs_max>
 8028ee0:	4603      	mov	r3, r0
 8028ee2:	e001      	b.n	8028ee8 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8028ee4:	683b      	ldr	r3, [r7, #0]
 8028ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8028ee8:	4618      	mov	r0, r3
 8028eea:	3708      	adds	r7, #8
 8028eec:	46bd      	mov	sp, r7
 8028eee:	bd80      	pop	{r7, pc}

08028ef0 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8028ef0:	b580      	push	{r7, lr}
 8028ef2:	b08e      	sub	sp, #56	; 0x38
 8028ef4:	af00      	add	r7, sp, #0
 8028ef6:	60f8      	str	r0, [r7, #12]
 8028ef8:	60b9      	str	r1, [r7, #8]
 8028efa:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028efc:	f107 0208 	add.w	r2, r7, #8
 8028f00:	f107 0114 	add.w	r1, r7, #20
 8028f04:	2300      	movs	r3, #0
 8028f06:	68f8      	ldr	r0, [r7, #12]
 8028f08:	f7fc feae 	bl	8025c68 <lfs_dir_find>
 8028f0c:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8028f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028f10:	2b00      	cmp	r3, #0
 8028f12:	da01      	bge.n	8028f18 <lfs_rawstat+0x28>
        return (int)tag;
 8028f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028f16:	e00c      	b.n	8028f32 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8028f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028f1a:	4618      	mov	r0, r3
 8028f1c:	f7fb f908 	bl	8024130 <lfs_tag_id>
 8028f20:	4603      	mov	r3, r0
 8028f22:	461a      	mov	r2, r3
 8028f24:	f107 0114 	add.w	r1, r7, #20
 8028f28:	687b      	ldr	r3, [r7, #4]
 8028f2a:	68f8      	ldr	r0, [r7, #12]
 8028f2c:	f7fc fdd8 	bl	8025ae0 <lfs_dir_getinfo>
 8028f30:	4603      	mov	r3, r0
}
 8028f32:	4618      	mov	r0, r3
 8028f34:	3738      	adds	r7, #56	; 0x38
 8028f36:	46bd      	mov	sp, r7
 8028f38:	bd80      	pop	{r7, pc}
	...

08028f3c <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8028f3c:	b580      	push	{r7, lr}
 8028f3e:	b0a0      	sub	sp, #128	; 0x80
 8028f40:	af02      	add	r7, sp, #8
 8028f42:	6078      	str	r0, [r7, #4]
 8028f44:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028f46:	6878      	ldr	r0, [r7, #4]
 8028f48:	f001 fba2 	bl	802a690 <lfs_fs_forceconsistency>
 8028f4c:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 8028f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f50:	2b00      	cmp	r3, #0
 8028f52:	d001      	beq.n	8028f58 <lfs_rawremove+0x1c>
        return err;
 8028f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028f56:	e0c4      	b.n	80290e2 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028f58:	463a      	mov	r2, r7
 8028f5a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028f5e:	2300      	movs	r3, #0
 8028f60:	6878      	ldr	r0, [r7, #4]
 8028f62:	f7fc fe81 	bl	8025c68 <lfs_dir_find>
 8028f66:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8028f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028f6a:	2b00      	cmp	r3, #0
 8028f6c:	db09      	blt.n	8028f82 <lfs_rawremove+0x46>
 8028f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028f70:	4618      	mov	r0, r3
 8028f72:	f7fb f8dd 	bl	8024130 <lfs_tag_id>
 8028f76:	4603      	mov	r3, r0
 8028f78:	461a      	mov	r2, r3
 8028f7a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028f7e:	429a      	cmp	r2, r3
 8028f80:	d107      	bne.n	8028f92 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8028f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028f84:	2b00      	cmp	r3, #0
 8028f86:	da01      	bge.n	8028f8c <lfs_rawremove+0x50>
 8028f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028f8a:	e0aa      	b.n	80290e2 <lfs_rawremove+0x1a6>
 8028f8c:	f06f 0315 	mvn.w	r3, #21
 8028f90:	e0a7      	b.n	80290e2 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8028f92:	687b      	ldr	r3, [r7, #4]
 8028f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028f96:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028f9a:	4618      	mov	r0, r3
 8028f9c:	f7fb f89e 	bl	80240dc <lfs_tag_type3>
 8028fa0:	4603      	mov	r3, r0
 8028fa2:	2b02      	cmp	r3, #2
 8028fa4:	d14a      	bne.n	802903c <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8028fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028fa8:	4618      	mov	r0, r3
 8028faa:	f7fb f8c1 	bl	8024130 <lfs_tag_id>
 8028fae:	4603      	mov	r3, r0
 8028fb0:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8028fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028fb6:	f043 0308 	orr.w	r3, r3, #8
 8028fba:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028fbe:	f107 020c 	add.w	r2, r7, #12
 8028fc2:	9200      	str	r2, [sp, #0]
 8028fc4:	4a49      	ldr	r2, [pc, #292]	; (80290ec <lfs_rawremove+0x1b0>)
 8028fc6:	6878      	ldr	r0, [r7, #4]
 8028fc8:	f7fb fc9c 	bl	8024904 <lfs_dir_get>
 8028fcc:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 8028fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028fd0:	2b00      	cmp	r3, #0
 8028fd2:	da01      	bge.n	8028fd8 <lfs_rawremove+0x9c>
            return (int)res;
 8028fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028fd6:	e084      	b.n	80290e2 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8028fd8:	f107 030c 	add.w	r3, r7, #12
 8028fdc:	4618      	mov	r0, r3
 8028fde:	f7fb f818 	bl	8024012 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8028fe2:	f107 020c 	add.w	r2, r7, #12
 8028fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028fea:	3308      	adds	r3, #8
 8028fec:	4619      	mov	r1, r3
 8028fee:	6878      	ldr	r0, [r7, #4]
 8028ff0:	f7fc fd28 	bl	8025a44 <lfs_dir_fetch>
 8028ff4:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028ff8:	2b00      	cmp	r3, #0
 8028ffa:	d001      	beq.n	8029000 <lfs_rawremove+0xc4>
            return err;
 8028ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028ffe:	e070      	b.n	80290e2 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8029000:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8029004:	2b00      	cmp	r3, #0
 8029006:	d103      	bne.n	8029010 <lfs_rawremove+0xd4>
 8029008:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802900c:	2b00      	cmp	r3, #0
 802900e:	d002      	beq.n	8029016 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8029010:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8029014:	e065      	b.n	80290e2 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8029016:	2101      	movs	r1, #1
 8029018:	6878      	ldr	r0, [r7, #4]
 802901a:	f001 f8bb 	bl	802a194 <lfs_fs_preporphans>
 802901e:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029022:	2b00      	cmp	r3, #0
 8029024:	d001      	beq.n	802902a <lfs_rawremove+0xee>
            return err;
 8029026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029028:	e05b      	b.n	80290e2 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 802902a:	2300      	movs	r3, #0
 802902c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 8029030:	2300      	movs	r3, #0
 8029032:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 8029034:	687b      	ldr	r3, [r7, #4]
 8029036:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802903a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 802903c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802903e:	4618      	mov	r0, r3
 8029040:	f7fb f876 	bl	8024130 <lfs_tag_id>
 8029044:	4603      	mov	r3, r0
 8029046:	029b      	lsls	r3, r3, #10
 8029048:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802904c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8029050:	61fb      	str	r3, [r7, #28]
 8029052:	2300      	movs	r3, #0
 8029054:	623b      	str	r3, [r7, #32]
 8029056:	f107 021c 	add.w	r2, r7, #28
 802905a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802905e:	2301      	movs	r3, #1
 8029060:	6878      	ldr	r0, [r7, #4]
 8029062:	f7fe fb09 	bl	8027678 <lfs_dir_commit>
 8029066:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8029068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802906a:	2b00      	cmp	r3, #0
 802906c:	d004      	beq.n	8029078 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 802906e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029070:	687b      	ldr	r3, [r7, #4]
 8029072:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8029074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029076:	e034      	b.n	80290e2 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8029078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802907a:	687b      	ldr	r3, [r7, #4]
 802907c:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 802907e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029080:	4618      	mov	r0, r3
 8029082:	f7fb f82b 	bl	80240dc <lfs_tag_type3>
 8029086:	4603      	mov	r3, r0
 8029088:	2b02      	cmp	r3, #2
 802908a:	d129      	bne.n	80290e0 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802908c:	f04f 31ff 	mov.w	r1, #4294967295
 8029090:	6878      	ldr	r0, [r7, #4]
 8029092:	f001 f87f 	bl	802a194 <lfs_fs_preporphans>
 8029096:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802909a:	2b00      	cmp	r3, #0
 802909c:	d001      	beq.n	80290a2 <lfs_rawremove+0x166>
            return err;
 802909e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290a0:	e01f      	b.n	80290e2 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 80290a2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80290a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80290aa:	3308      	adds	r3, #8
 80290ac:	4619      	mov	r1, r3
 80290ae:	6878      	ldr	r0, [r7, #4]
 80290b0:	f000 ff90 	bl	8029fd4 <lfs_fs_pred>
 80290b4:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80290b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290b8:	2b00      	cmp	r3, #0
 80290ba:	d001      	beq.n	80290c0 <lfs_rawremove+0x184>
            return err;
 80290bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290be:	e010      	b.n	80290e2 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 80290c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80290c4:	f103 0208 	add.w	r2, r3, #8
 80290c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80290cc:	4619      	mov	r1, r3
 80290ce:	6878      	ldr	r0, [r7, #4]
 80290d0:	f7fd f930 	bl	8026334 <lfs_dir_drop>
 80290d4:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80290d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290d8:	2b00      	cmp	r3, #0
 80290da:	d001      	beq.n	80290e0 <lfs_rawremove+0x1a4>
            return err;
 80290dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290de:	e000      	b.n	80290e2 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 80290e0:	2300      	movs	r3, #0
}
 80290e2:	4618      	mov	r0, r3
 80290e4:	3778      	adds	r7, #120	; 0x78
 80290e6:	46bd      	mov	sp, r7
 80290e8:	bd80      	pop	{r7, pc}
 80290ea:	bf00      	nop
 80290ec:	700ffc00 	.word	0x700ffc00

080290f0 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 80290f0:	b590      	push	{r4, r7, lr}
 80290f2:	b0c3      	sub	sp, #268	; 0x10c
 80290f4:	af02      	add	r7, sp, #8
 80290f6:	60f8      	str	r0, [r7, #12]
 80290f8:	60b9      	str	r1, [r7, #8]
 80290fa:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80290fc:	68f8      	ldr	r0, [r7, #12]
 80290fe:	f001 fac7 	bl	802a690 <lfs_fs_forceconsistency>
 8029102:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (err) {
 8029106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802910a:	2b00      	cmp	r3, #0
 802910c:	d002      	beq.n	8029114 <lfs_rawrename+0x24>
        return err;
 802910e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029112:	e1f7      	b.n	8029504 <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8029114:	f107 0208 	add.w	r2, r7, #8
 8029118:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 802911c:	2300      	movs	r3, #0
 802911e:	68f8      	ldr	r0, [r7, #12]
 8029120:	f7fc fda2 	bl	8025c68 <lfs_dir_find>
 8029124:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8029128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802912c:	2b00      	cmp	r3, #0
 802912e:	db0a      	blt.n	8029146 <lfs_rawrename+0x56>
 8029130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029134:	4618      	mov	r0, r3
 8029136:	f7fa fffb 	bl	8024130 <lfs_tag_id>
 802913a:	4603      	mov	r3, r0
 802913c:	461a      	mov	r2, r3
 802913e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8029142:	429a      	cmp	r2, r3
 8029144:	d109      	bne.n	802915a <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8029146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802914a:	2b00      	cmp	r3, #0
 802914c:	da02      	bge.n	8029154 <lfs_rawrename+0x64>
 802914e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029152:	e1d7      	b.n	8029504 <lfs_rawrename+0x414>
 8029154:	f06f 0315 	mvn.w	r3, #21
 8029158:	e1d4      	b.n	8029504 <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 802915a:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 802915e:	1d3a      	adds	r2, r7, #4
 8029160:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029164:	68f8      	ldr	r0, [r7, #12]
 8029166:	f7fc fd7f 	bl	8025c68 <lfs_dir_find>
 802916a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 802916e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029172:	2b00      	cmp	r3, #0
 8029174:	db0a      	blt.n	802918c <lfs_rawrename+0x9c>
 8029176:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802917a:	4618      	mov	r0, r3
 802917c:	f7fa ffd8 	bl	8024130 <lfs_tag_id>
 8029180:	4603      	mov	r3, r0
 8029182:	461a      	mov	r2, r3
 8029184:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8029188:	429a      	cmp	r2, r3
 802918a:	d114      	bne.n	80291b6 <lfs_rawrename+0xc6>
 802918c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029190:	f113 0f02 	cmn.w	r3, #2
 8029194:	d105      	bne.n	80291a2 <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8029196:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802919a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802919e:	4293      	cmp	r3, r2
 80291a0:	d109      	bne.n	80291b6 <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 80291a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80291a6:	2b00      	cmp	r3, #0
 80291a8:	da02      	bge.n	80291b0 <lfs_rawrename+0xc0>
 80291aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80291ae:	e1a9      	b.n	8029504 <lfs_rawrename+0x414>
 80291b0:	f06f 0315 	mvn.w	r3, #21
 80291b4:	e1a6      	b.n	8029504 <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 80291b6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80291ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80291be:	4611      	mov	r1, r2
 80291c0:	4618      	mov	r0, r3
 80291c2:	f7fa fecf 	bl	8023f64 <lfs_pair_cmp>
 80291c6:	4603      	mov	r3, r0
 80291c8:	2b00      	cmp	r3, #0
 80291ca:	bf0c      	ite	eq
 80291cc:	2301      	moveq	r3, #1
 80291ce:	2300      	movne	r3, #0
 80291d0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 80291d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80291d8:	4618      	mov	r0, r3
 80291da:	f7fa ffa9 	bl	8024130 <lfs_tag_id>
 80291de:	4603      	mov	r3, r0
 80291e0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 80291e4:	68fb      	ldr	r3, [r7, #12]
 80291e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80291e8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (prevtag == LFS_ERR_NOENT) {
 80291ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80291ee:	f113 0f02 	cmn.w	r3, #2
 80291f2:	d11f      	bne.n	8029234 <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	4618      	mov	r0, r3
 80291f8:	f7e7 f852 	bl	80102a0 <strlen>
 80291fc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        if (nlen > lfs->name_max) {
 8029200:	68fb      	ldr	r3, [r7, #12]
 8029202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029204:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8029208:	429a      	cmp	r2, r3
 802920a:	d902      	bls.n	8029212 <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 802920c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8029210:	e178      	b.n	8029504 <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8029212:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029216:	2b00      	cmp	r3, #0
 8029218:	f000 8084 	beq.w	8029324 <lfs_rawrename+0x234>
 802921c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029220:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8029224:	429a      	cmp	r2, r3
 8029226:	d37d      	bcc.n	8029324 <lfs_rawrename+0x234>
            newoldid += 1;
 8029228:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 802922c:	3301      	adds	r3, #1
 802922e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8029232:	e077      	b.n	8029324 <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8029234:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029238:	4618      	mov	r0, r3
 802923a:	f7fa ff4f 	bl	80240dc <lfs_tag_type3>
 802923e:	4603      	mov	r3, r0
 8029240:	461c      	mov	r4, r3
 8029242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029246:	4618      	mov	r0, r3
 8029248:	f7fa ff48 	bl	80240dc <lfs_tag_type3>
 802924c:	4603      	mov	r3, r0
 802924e:	429c      	cmp	r4, r3
 8029250:	d002      	beq.n	8029258 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 8029252:	f06f 0314 	mvn.w	r3, #20
 8029256:	e155      	b.n	8029504 <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 8029258:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802925c:	2b00      	cmp	r3, #0
 802925e:	d007      	beq.n	8029270 <lfs_rawrename+0x180>
 8029260:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029264:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8029268:	429a      	cmp	r2, r3
 802926a:	d101      	bne.n	8029270 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 802926c:	2300      	movs	r3, #0
 802926e:	e149      	b.n	8029504 <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8029270:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029274:	4618      	mov	r0, r3
 8029276:	f7fa ff31 	bl	80240dc <lfs_tag_type3>
 802927a:	4603      	mov	r3, r0
 802927c:	2b02      	cmp	r3, #2
 802927e:	d151      	bne.n	8029324 <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8029280:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029284:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8029286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802928a:	f043 0308 	orr.w	r3, r3, #8
 802928e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029292:	f107 0220 	add.w	r2, r7, #32
 8029296:	9200      	str	r2, [sp, #0]
 8029298:	4a9d      	ldr	r2, [pc, #628]	; (8029510 <lfs_rawrename+0x420>)
 802929a:	68f8      	ldr	r0, [r7, #12]
 802929c:	f7fb fb32 	bl	8024904 <lfs_dir_get>
 80292a0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (res < 0) {
 80292a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80292a8:	2b00      	cmp	r3, #0
 80292aa:	da02      	bge.n	80292b2 <lfs_rawrename+0x1c2>
            return (int)res;
 80292ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80292b0:	e128      	b.n	8029504 <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 80292b2:	f107 0320 	add.w	r3, r7, #32
 80292b6:	4618      	mov	r0, r3
 80292b8:	f7fa feab 	bl	8024012 <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 80292bc:	f107 0220 	add.w	r2, r7, #32
 80292c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80292c4:	3308      	adds	r3, #8
 80292c6:	4619      	mov	r1, r3
 80292c8:	68f8      	ldr	r0, [r7, #12]
 80292ca:	f7fc fbbb 	bl	8025a44 <lfs_dir_fetch>
 80292ce:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80292d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292d6:	2b00      	cmp	r3, #0
 80292d8:	d002      	beq.n	80292e0 <lfs_rawrename+0x1f0>
            return err;
 80292da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292de:	e111      	b.n	8029504 <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 80292e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80292e4:	2b00      	cmp	r3, #0
 80292e6:	d103      	bne.n	80292f0 <lfs_rawrename+0x200>
 80292e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80292ec:	2b00      	cmp	r3, #0
 80292ee:	d002      	beq.n	80292f6 <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 80292f0:	f06f 0326 	mvn.w	r3, #38	; 0x26
 80292f4:	e106      	b.n	8029504 <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80292f6:	2101      	movs	r1, #1
 80292f8:	68f8      	ldr	r0, [r7, #12]
 80292fa:	f000 ff4b 	bl	802a194 <lfs_fs_preporphans>
 80292fe:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029306:	2b00      	cmp	r3, #0
 8029308:	d002      	beq.n	8029310 <lfs_rawrename+0x220>
            return err;
 802930a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802930e:	e0f9      	b.n	8029504 <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8029310:	2300      	movs	r3, #0
 8029312:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        prevdir.id = 0;
 8029316:	2300      	movs	r3, #0
 8029318:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        lfs->mlist = &prevdir;
 802931c:	68fb      	ldr	r3, [r7, #12]
 802931e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8029322:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (!samepair) {
 8029324:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029328:	f083 0301 	eor.w	r3, r3, #1
 802932c:	b2db      	uxtb	r3, r3
 802932e:	2b00      	cmp	r3, #0
 8029330:	d007      	beq.n	8029342 <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8029332:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8029336:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 802933a:	4619      	mov	r1, r3
 802933c:	68f8      	ldr	r0, [r7, #12]
 802933e:	f000 ff63 	bl	802a208 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8029342:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029346:	f113 0f02 	cmn.w	r3, #2
 802934a:	d007      	beq.n	802935c <lfs_rawrename+0x26c>
 802934c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029350:	029b      	lsls	r3, r3, #10
 8029352:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029356:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802935a:	e000      	b.n	802935e <lfs_rawrename+0x26e>
 802935c:	2300      	movs	r3, #0
 802935e:	653b      	str	r3, [r7, #80]	; 0x50
 8029360:	2300      	movs	r3, #0
 8029362:	657b      	str	r3, [r7, #84]	; 0x54
 8029364:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029368:	029b      	lsls	r3, r3, #10
 802936a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802936e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029372:	65bb      	str	r3, [r7, #88]	; 0x58
 8029374:	2300      	movs	r3, #0
 8029376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802937c:	4618      	mov	r0, r3
 802937e:	f7fa fead 	bl	80240dc <lfs_tag_type3>
 8029382:	4603      	mov	r3, r0
 8029384:	051a      	lsls	r2, r3, #20
 8029386:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802938a:	029b      	lsls	r3, r3, #10
 802938c:	ea42 0403 	orr.w	r4, r2, r3
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	4618      	mov	r0, r3
 8029394:	f7e6 ff84 	bl	80102a0 <strlen>
 8029398:	4603      	mov	r3, r0
 802939a:	4323      	orrs	r3, r4
 802939c:	663b      	str	r3, [r7, #96]	; 0x60
 802939e:	687b      	ldr	r3, [r7, #4]
 80293a0:	667b      	str	r3, [r7, #100]	; 0x64
 80293a2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80293a6:	029c      	lsls	r4, r3, #10
 80293a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80293ac:	4618      	mov	r0, r3
 80293ae:	f7fa febf 	bl	8024130 <lfs_tag_id>
 80293b2:	4603      	mov	r3, r0
 80293b4:	4323      	orrs	r3, r4
 80293b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80293ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80293be:	66bb      	str	r3, [r7, #104]	; 0x68
 80293c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80293c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80293c6:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80293ca:	2b00      	cmp	r3, #0
 80293cc:	d007      	beq.n	80293de <lfs_rawrename+0x2ee>
 80293ce:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80293d2:	029b      	lsls	r3, r3, #10
 80293d4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80293d8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80293dc:	e000      	b.n	80293e0 <lfs_rawrename+0x2f0>
 80293de:	2300      	movs	r3, #0
 80293e0:	673b      	str	r3, [r7, #112]	; 0x70
 80293e2:	2300      	movs	r3, #0
 80293e4:	677b      	str	r3, [r7, #116]	; 0x74
 80293e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80293ea:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80293ee:	2305      	movs	r3, #5
 80293f0:	68f8      	ldr	r0, [r7, #12]
 80293f2:	f7fe f941 	bl	8027678 <lfs_dir_commit>
 80293f6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 80293fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80293fe:	2b00      	cmp	r3, #0
 8029400:	d005      	beq.n	802940e <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 8029402:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029404:	68fb      	ldr	r3, [r7, #12]
 8029406:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8029408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802940c:	e07a      	b.n	8029504 <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 802940e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029412:	f083 0301 	eor.w	r3, r3, #1
 8029416:	b2db      	uxtb	r3, r3
 8029418:	2b00      	cmp	r3, #0
 802941a:	d02f      	beq.n	802947c <lfs_rawrename+0x38c>
 802941c:	68fb      	ldr	r3, [r7, #12]
 802941e:	3330      	adds	r3, #48	; 0x30
 8029420:	4618      	mov	r0, r3
 8029422:	f7fa ff1a 	bl	802425a <lfs_gstate_hasmove>
 8029426:	4603      	mov	r3, r0
 8029428:	2b00      	cmp	r3, #0
 802942a:	d027      	beq.n	802947c <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802942c:	2200      	movs	r2, #0
 802942e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8029432:	68f8      	ldr	r0, [r7, #12]
 8029434:	f000 fee8 	bl	802a208 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8029438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802943c:	4618      	mov	r0, r3
 802943e:	f7fa fe77 	bl	8024130 <lfs_tag_id>
 8029442:	4603      	mov	r3, r0
 8029444:	029b      	lsls	r3, r3, #10
 8029446:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802944a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802944e:	61bb      	str	r3, [r7, #24]
 8029450:	2300      	movs	r3, #0
 8029452:	61fb      	str	r3, [r7, #28]
 8029454:	f107 0218 	add.w	r2, r7, #24
 8029458:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 802945c:	2301      	movs	r3, #1
 802945e:	68f8      	ldr	r0, [r7, #12]
 8029460:	f7fe f90a 	bl	8027678 <lfs_dir_commit>
 8029464:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8029468:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802946c:	2b00      	cmp	r3, #0
 802946e:	d005      	beq.n	802947c <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 8029470:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029472:	68fb      	ldr	r3, [r7, #12]
 8029474:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8029476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802947a:	e043      	b.n	8029504 <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 802947c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802947e:	68fb      	ldr	r3, [r7, #12]
 8029480:	629a      	str	r2, [r3, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
 8029482:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029486:	f113 0f02 	cmn.w	r3, #2
 802948a:	d03a      	beq.n	8029502 <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 802948c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029490:	4618      	mov	r0, r3
 8029492:	f7fa fe23 	bl	80240dc <lfs_tag_type3>
 8029496:	4603      	mov	r3, r0
 8029498:	2b02      	cmp	r3, #2
 802949a:	d132      	bne.n	8029502 <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802949c:	f04f 31ff 	mov.w	r1, #4294967295
 80294a0:	68f8      	ldr	r0, [r7, #12]
 80294a2:	f000 fe77 	bl	802a194 <lfs_fs_preporphans>
 80294a6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80294aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80294ae:	2b00      	cmp	r3, #0
 80294b0:	d002      	beq.n	80294b8 <lfs_rawrename+0x3c8>
            return err;
 80294b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80294b6:	e025      	b.n	8029504 <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 80294b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80294bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80294c0:	3308      	adds	r3, #8
 80294c2:	4619      	mov	r1, r3
 80294c4:	68f8      	ldr	r0, [r7, #12]
 80294c6:	f000 fd85 	bl	8029fd4 <lfs_fs_pred>
 80294ca:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80294ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80294d2:	2b00      	cmp	r3, #0
 80294d4:	d002      	beq.n	80294dc <lfs_rawrename+0x3ec>
            return err;
 80294d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80294da:	e013      	b.n	8029504 <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 80294dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80294e0:	f103 0208 	add.w	r2, r3, #8
 80294e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80294e8:	4619      	mov	r1, r3
 80294ea:	68f8      	ldr	r0, [r7, #12]
 80294ec:	f7fc ff22 	bl	8026334 <lfs_dir_drop>
 80294f0:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80294f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80294f8:	2b00      	cmp	r3, #0
 80294fa:	d002      	beq.n	8029502 <lfs_rawrename+0x412>
            return err;
 80294fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029500:	e000      	b.n	8029504 <lfs_rawrename+0x414>
        }
    }

    return 0;
 8029502:	2300      	movs	r3, #0
}
 8029504:	4618      	mov	r0, r3
 8029506:	f507 7782 	add.w	r7, r7, #260	; 0x104
 802950a:	46bd      	mov	sp, r7
 802950c:	bd90      	pop	{r4, r7, pc}
 802950e:	bf00      	nop
 8029510:	700ffc00 	.word	0x700ffc00

08029514 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8029514:	b580      	push	{r7, lr}
 8029516:	b08c      	sub	sp, #48	; 0x30
 8029518:	af00      	add	r7, sp, #0
 802951a:	6078      	str	r0, [r7, #4]
 802951c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 802951e:	687b      	ldr	r3, [r7, #4]
 8029520:	683a      	ldr	r2, [r7, #0]
 8029522:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8029524:	2300      	movs	r3, #0
 8029526:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8029528:	687b      	ldr	r3, [r7, #4]
 802952a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802952c:	695b      	ldr	r3, [r3, #20]
 802952e:	2b00      	cmp	r3, #0
 8029530:	d106      	bne.n	8029540 <lfs_init+0x2c>
 8029532:	4b92      	ldr	r3, [pc, #584]	; (802977c <lfs_init+0x268>)
 8029534:	4a92      	ldr	r2, [pc, #584]	; (8029780 <lfs_init+0x26c>)
 8029536:	f640 7146 	movw	r1, #3910	; 0xf46
 802953a:	4892      	ldr	r0, [pc, #584]	; (8029784 <lfs_init+0x270>)
 802953c:	f003 f826 	bl	802c58c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029544:	699b      	ldr	r3, [r3, #24]
 8029546:	2b00      	cmp	r3, #0
 8029548:	d106      	bne.n	8029558 <lfs_init+0x44>
 802954a:	4b8f      	ldr	r3, [pc, #572]	; (8029788 <lfs_init+0x274>)
 802954c:	4a8c      	ldr	r2, [pc, #560]	; (8029780 <lfs_init+0x26c>)
 802954e:	f640 7147 	movw	r1, #3911	; 0xf47
 8029552:	488c      	ldr	r0, [pc, #560]	; (8029784 <lfs_init+0x270>)
 8029554:	f003 f81a 	bl	802c58c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802955c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802955e:	2b00      	cmp	r3, #0
 8029560:	d106      	bne.n	8029570 <lfs_init+0x5c>
 8029562:	4b8a      	ldr	r3, [pc, #552]	; (802978c <lfs_init+0x278>)
 8029564:	4a86      	ldr	r2, [pc, #536]	; (8029780 <lfs_init+0x26c>)
 8029566:	f640 7148 	movw	r1, #3912	; 0xf48
 802956a:	4886      	ldr	r0, [pc, #536]	; (8029784 <lfs_init+0x270>)
 802956c:	f003 f80e 	bl	802c58c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8029570:	687b      	ldr	r3, [r7, #4]
 8029572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029576:	687a      	ldr	r2, [r7, #4]
 8029578:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802957a:	6952      	ldr	r2, [r2, #20]
 802957c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029580:	fb01 f202 	mul.w	r2, r1, r2
 8029584:	1a9b      	subs	r3, r3, r2
 8029586:	2b00      	cmp	r3, #0
 8029588:	d006      	beq.n	8029598 <lfs_init+0x84>
 802958a:	4b81      	ldr	r3, [pc, #516]	; (8029790 <lfs_init+0x27c>)
 802958c:	4a7c      	ldr	r2, [pc, #496]	; (8029780 <lfs_init+0x26c>)
 802958e:	f640 714c 	movw	r1, #3916	; 0xf4c
 8029592:	487c      	ldr	r0, [pc, #496]	; (8029784 <lfs_init+0x270>)
 8029594:	f002 fffa 	bl	802c58c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029598:	687b      	ldr	r3, [r7, #4]
 802959a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802959c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802959e:	687a      	ldr	r2, [r7, #4]
 80295a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80295a2:	6992      	ldr	r2, [r2, #24]
 80295a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80295a8:	fb01 f202 	mul.w	r2, r1, r2
 80295ac:	1a9b      	subs	r3, r3, r2
 80295ae:	2b00      	cmp	r3, #0
 80295b0:	d006      	beq.n	80295c0 <lfs_init+0xac>
 80295b2:	4b78      	ldr	r3, [pc, #480]	; (8029794 <lfs_init+0x280>)
 80295b4:	4a72      	ldr	r2, [pc, #456]	; (8029780 <lfs_init+0x26c>)
 80295b6:	f640 714d 	movw	r1, #3917	; 0xf4d
 80295ba:	4872      	ldr	r0, [pc, #456]	; (8029784 <lfs_init+0x270>)
 80295bc:	f002 ffe6 	bl	802c58c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80295c0:	687b      	ldr	r3, [r7, #4]
 80295c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295c4:	69db      	ldr	r3, [r3, #28]
 80295c6:	687a      	ldr	r2, [r7, #4]
 80295c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80295ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80295cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80295d0:	fb01 f202 	mul.w	r2, r1, r2
 80295d4:	1a9b      	subs	r3, r3, r2
 80295d6:	2b00      	cmp	r3, #0
 80295d8:	d006      	beq.n	80295e8 <lfs_init+0xd4>
 80295da:	4b6f      	ldr	r3, [pc, #444]	; (8029798 <lfs_init+0x284>)
 80295dc:	4a68      	ldr	r2, [pc, #416]	; (8029780 <lfs_init+0x26c>)
 80295de:	f640 714e 	movw	r1, #3918	; 0xf4e
 80295e2:	4868      	ldr	r0, [pc, #416]	; (8029784 <lfs_init+0x270>)
 80295e4:	f002 ffd2 	bl	802c58c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80295e8:	687b      	ldr	r3, [r7, #4]
 80295ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295ec:	69db      	ldr	r3, [r3, #28]
 80295ee:	3b08      	subs	r3, #8
 80295f0:	f04f 32ff 	mov.w	r2, #4294967295
 80295f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80295f8:	4618      	mov	r0, r3
 80295fa:	f7fa f8ba 	bl	8023772 <lfs_npw2>
 80295fe:	4603      	mov	r3, r0
 8029600:	009a      	lsls	r2, r3, #2
 8029602:	687b      	ldr	r3, [r7, #4]
 8029604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029606:	69db      	ldr	r3, [r3, #28]
 8029608:	429a      	cmp	r2, r3
 802960a:	d906      	bls.n	802961a <lfs_init+0x106>
 802960c:	4b63      	ldr	r3, [pc, #396]	; (802979c <lfs_init+0x288>)
 802960e:	4a5c      	ldr	r2, [pc, #368]	; (8029780 <lfs_init+0x26c>)
 8029610:	f640 7151 	movw	r1, #3921	; 0xf51
 8029614:	485b      	ldr	r0, [pc, #364]	; (8029784 <lfs_init+0x270>)
 8029616:	f002 ffb9 	bl	802c58c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 802961a:	687b      	ldr	r3, [r7, #4]
 802961c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029620:	2b00      	cmp	r3, #0
 8029622:	d106      	bne.n	8029632 <lfs_init+0x11e>
 8029624:	4b5e      	ldr	r3, [pc, #376]	; (80297a0 <lfs_init+0x28c>)
 8029626:	4a56      	ldr	r2, [pc, #344]	; (8029780 <lfs_init+0x26c>)
 8029628:	f640 715a 	movw	r1, #3930	; 0xf5a
 802962c:	4855      	ldr	r0, [pc, #340]	; (8029784 <lfs_init+0x270>)
 802962e:	f002 ffad 	bl	802c58c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8029632:	687b      	ldr	r3, [r7, #4]
 8029634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029638:	2b00      	cmp	r3, #0
 802963a:	d005      	beq.n	8029648 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 802963c:	687b      	ldr	r3, [r7, #4]
 802963e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	60da      	str	r2, [r3, #12]
 8029646:	e010      	b.n	802966a <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029648:	687b      	ldr	r3, [r7, #4]
 802964a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802964c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802964e:	4618      	mov	r0, r3
 8029650:	f7fa f8f7 	bl	8023842 <lfs_malloc>
 8029654:	4602      	mov	r2, r0
 8029656:	687b      	ldr	r3, [r7, #4]
 8029658:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 802965a:	687b      	ldr	r3, [r7, #4]
 802965c:	68db      	ldr	r3, [r3, #12]
 802965e:	2b00      	cmp	r3, #0
 8029660:	d103      	bne.n	802966a <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8029662:	f06f 030b 	mvn.w	r3, #11
 8029666:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029668:	e0fd      	b.n	8029866 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 802966a:	687b      	ldr	r3, [r7, #4]
 802966c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802966e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029670:	2b00      	cmp	r3, #0
 8029672:	d005      	beq.n	8029680 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802967a:	687b      	ldr	r3, [r7, #4]
 802967c:	61da      	str	r2, [r3, #28]
 802967e:	e010      	b.n	80296a2 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029680:	687b      	ldr	r3, [r7, #4]
 8029682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029686:	4618      	mov	r0, r3
 8029688:	f7fa f8db 	bl	8023842 <lfs_malloc>
 802968c:	4602      	mov	r2, r0
 802968e:	687b      	ldr	r3, [r7, #4]
 8029690:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8029692:	687b      	ldr	r3, [r7, #4]
 8029694:	69db      	ldr	r3, [r3, #28]
 8029696:	2b00      	cmp	r3, #0
 8029698:	d103      	bne.n	80296a2 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 802969a:	f06f 030b 	mvn.w	r3, #11
 802969e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80296a0:	e0e1      	b.n	8029866 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80296a2:	687b      	ldr	r3, [r7, #4]
 80296a4:	4619      	mov	r1, r3
 80296a6:	6878      	ldr	r0, [r7, #4]
 80296a8:	f7fa f8f1 	bl	802388e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80296ac:	687b      	ldr	r3, [r7, #4]
 80296ae:	3310      	adds	r3, #16
 80296b0:	4619      	mov	r1, r3
 80296b2:	6878      	ldr	r0, [r7, #4]
 80296b4:	f7fa f8eb 	bl	802388e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80296b8:	687b      	ldr	r3, [r7, #4]
 80296ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296be:	2b00      	cmp	r3, #0
 80296c0:	d106      	bne.n	80296d0 <lfs_init+0x1bc>
 80296c2:	4b38      	ldr	r3, [pc, #224]	; (80297a4 <lfs_init+0x290>)
 80296c4:	4a2e      	ldr	r2, [pc, #184]	; (8029780 <lfs_init+0x26c>)
 80296c6:	f640 7178 	movw	r1, #3960	; 0xf78
 80296ca:	482e      	ldr	r0, [pc, #184]	; (8029784 <lfs_init+0x270>)
 80296cc:	f002 ff5e 	bl	802c58c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80296d0:	687b      	ldr	r3, [r7, #4]
 80296d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296d6:	f003 0307 	and.w	r3, r3, #7
 80296da:	2b00      	cmp	r3, #0
 80296dc:	d106      	bne.n	80296ec <lfs_init+0x1d8>
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296e4:	f003 0303 	and.w	r3, r3, #3
 80296e8:	2b00      	cmp	r3, #0
 80296ea:	d006      	beq.n	80296fa <lfs_init+0x1e6>
 80296ec:	4b2e      	ldr	r3, [pc, #184]	; (80297a8 <lfs_init+0x294>)
 80296ee:	4a24      	ldr	r2, [pc, #144]	; (8029780 <lfs_init+0x26c>)
 80296f0:	f640 7179 	movw	r1, #3961	; 0xf79
 80296f4:	4823      	ldr	r0, [pc, #140]	; (8029784 <lfs_init+0x270>)
 80296f6:	f002 ff49 	bl	802c58c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80296fa:	687b      	ldr	r3, [r7, #4]
 80296fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029700:	2b00      	cmp	r3, #0
 8029702:	d005      	beq.n	8029710 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8029704:	687b      	ldr	r3, [r7, #4]
 8029706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	665a      	str	r2, [r3, #100]	; 0x64
 802970e:	e010      	b.n	8029732 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029716:	4618      	mov	r0, r3
 8029718:	f7fa f893 	bl	8023842 <lfs_malloc>
 802971c:	4602      	mov	r2, r0
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8029722:	687b      	ldr	r3, [r7, #4]
 8029724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029726:	2b00      	cmp	r3, #0
 8029728:	d103      	bne.n	8029732 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 802972a:	f06f 030b 	mvn.w	r3, #11
 802972e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029730:	e099      	b.n	8029866 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8029732:	687b      	ldr	r3, [r7, #4]
 8029734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029738:	2bff      	cmp	r3, #255	; 0xff
 802973a:	d906      	bls.n	802974a <lfs_init+0x236>
 802973c:	4b1b      	ldr	r3, [pc, #108]	; (80297ac <lfs_init+0x298>)
 802973e:	4a10      	ldr	r2, [pc, #64]	; (8029780 <lfs_init+0x26c>)
 8029740:	f640 7186 	movw	r1, #3974	; 0xf86
 8029744:	480f      	ldr	r0, [pc, #60]	; (8029784 <lfs_init+0x270>)
 8029746:	f002 ff21 	bl	802c58c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 802974a:	687b      	ldr	r3, [r7, #4]
 802974c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802974e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8029750:	687b      	ldr	r3, [r7, #4]
 8029752:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8029754:	687b      	ldr	r3, [r7, #4]
 8029756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029758:	2b00      	cmp	r3, #0
 802975a:	d102      	bne.n	8029762 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 802975c:	687b      	ldr	r3, [r7, #4]
 802975e:	22ff      	movs	r2, #255	; 0xff
 8029760:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8029762:	687b      	ldr	r3, [r7, #4]
 8029764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029768:	2b00      	cmp	r3, #0
 802976a:	da23      	bge.n	80297b4 <lfs_init+0x2a0>
 802976c:	4b10      	ldr	r3, [pc, #64]	; (80297b0 <lfs_init+0x29c>)
 802976e:	4a04      	ldr	r2, [pc, #16]	; (8029780 <lfs_init+0x26c>)
 8029770:	f640 718c 	movw	r1, #3980	; 0xf8c
 8029774:	4803      	ldr	r0, [pc, #12]	; (8029784 <lfs_init+0x270>)
 8029776:	f002 ff09 	bl	802c58c <__assert_func>
 802977a:	bf00      	nop
 802977c:	08033a08 	.word	0x08033a08
 8029780:	080349e4 	.word	0x080349e4
 8029784:	0803366c 	.word	0x0803366c
 8029788:	08033a24 	.word	0x08033a24
 802978c:	08033a40 	.word	0x08033a40
 8029790:	08033a5c 	.word	0x08033a5c
 8029794:	08033a8c 	.word	0x08033a8c
 8029798:	08033abc 	.word	0x08033abc
 802979c:	08033af0 	.word	0x08033af0
 80297a0:	08033b3c 	.word	0x08033b3c
 80297a4:	08033b58 	.word	0x08033b58
 80297a8:	08033b78 	.word	0x08033b78
 80297ac:	08033bcc 	.word	0x08033bcc
 80297b0:	08033be8 	.word	0x08033be8
    lfs->file_max = lfs->cfg->file_max;
 80297b4:	687b      	ldr	r3, [r7, #4]
 80297b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80297ba:	687b      	ldr	r3, [r7, #4]
 80297bc:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 80297be:	687b      	ldr	r3, [r7, #4]
 80297c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80297c2:	2b00      	cmp	r3, #0
 80297c4:	d103      	bne.n	80297ce <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 80297c6:	687b      	ldr	r3, [r7, #4]
 80297c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80297cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80297d4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80297d8:	4293      	cmp	r3, r2
 80297da:	d906      	bls.n	80297ea <lfs_init+0x2d6>
 80297dc:	4b26      	ldr	r3, [pc, #152]	; (8029878 <lfs_init+0x364>)
 80297de:	4a27      	ldr	r2, [pc, #156]	; (802987c <lfs_init+0x368>)
 80297e0:	f640 7192 	movw	r1, #3986	; 0xf92
 80297e4:	4826      	ldr	r0, [pc, #152]	; (8029880 <lfs_init+0x36c>)
 80297e6:	f002 fed1 	bl	802c58c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80297f0:	687b      	ldr	r3, [r7, #4]
 80297f2:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80297f4:	687b      	ldr	r3, [r7, #4]
 80297f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80297f8:	2b00      	cmp	r3, #0
 80297fa:	d103      	bne.n	8029804 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029802:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8029804:	687b      	ldr	r3, [r7, #4]
 8029806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802980a:	687b      	ldr	r3, [r7, #4]
 802980c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802980e:	69db      	ldr	r3, [r3, #28]
 8029810:	429a      	cmp	r2, r3
 8029812:	d906      	bls.n	8029822 <lfs_init+0x30e>
 8029814:	4b1b      	ldr	r3, [pc, #108]	; (8029884 <lfs_init+0x370>)
 8029816:	4a19      	ldr	r2, [pc, #100]	; (802987c <lfs_init+0x368>)
 8029818:	f640 7198 	movw	r1, #3992	; 0xf98
 802981c:	4818      	ldr	r0, [pc, #96]	; (8029880 <lfs_init+0x36c>)
 802981e:	f002 feb5 	bl	802c58c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8029822:	687b      	ldr	r3, [r7, #4]
 8029824:	f04f 32ff 	mov.w	r2, #4294967295
 8029828:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 802982a:	687b      	ldr	r3, [r7, #4]
 802982c:	f04f 32ff 	mov.w	r2, #4294967295
 8029830:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8029832:	687b      	ldr	r3, [r7, #4]
 8029834:	2200      	movs	r2, #0
 8029836:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8029838:	687b      	ldr	r3, [r7, #4]
 802983a:	2200      	movs	r2, #0
 802983c:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 802983e:	687b      	ldr	r3, [r7, #4]
 8029840:	333c      	adds	r3, #60	; 0x3c
 8029842:	2200      	movs	r2, #0
 8029844:	601a      	str	r2, [r3, #0]
 8029846:	605a      	str	r2, [r3, #4]
 8029848:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 802984a:	687b      	ldr	r3, [r7, #4]
 802984c:	3330      	adds	r3, #48	; 0x30
 802984e:	2200      	movs	r2, #0
 8029850:	601a      	str	r2, [r3, #0]
 8029852:	605a      	str	r2, [r3, #4]
 8029854:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8029856:	687b      	ldr	r3, [r7, #4]
 8029858:	3348      	adds	r3, #72	; 0x48
 802985a:	2200      	movs	r2, #0
 802985c:	601a      	str	r2, [r3, #0]
 802985e:	605a      	str	r2, [r3, #4]
 8029860:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8029862:	2300      	movs	r3, #0
 8029864:	e003      	b.n	802986e <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8029866:	6878      	ldr	r0, [r7, #4]
 8029868:	f000 f80e 	bl	8029888 <lfs_deinit>
    return err;
 802986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802986e:	4618      	mov	r0, r3
 8029870:	3730      	adds	r7, #48	; 0x30
 8029872:	46bd      	mov	sp, r7
 8029874:	bd80      	pop	{r7, pc}
 8029876:	bf00      	nop
 8029878:	08033c0c 	.word	0x08033c0c
 802987c:	080349e4 	.word	0x080349e4
 8029880:	0803366c 	.word	0x0803366c
 8029884:	08033c28 	.word	0x08033c28

08029888 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8029888:	b580      	push	{r7, lr}
 802988a:	b082      	sub	sp, #8
 802988c:	af00      	add	r7, sp, #0
 802988e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029890:	687b      	ldr	r3, [r7, #4]
 8029892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029896:	2b00      	cmp	r3, #0
 8029898:	d104      	bne.n	80298a4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 802989a:	687b      	ldr	r3, [r7, #4]
 802989c:	68db      	ldr	r3, [r3, #12]
 802989e:	4618      	mov	r0, r3
 80298a0:	f7f9 ffdb 	bl	802385a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80298a4:	687b      	ldr	r3, [r7, #4]
 80298a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80298aa:	2b00      	cmp	r3, #0
 80298ac:	d104      	bne.n	80298b8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80298ae:	687b      	ldr	r3, [r7, #4]
 80298b0:	69db      	ldr	r3, [r3, #28]
 80298b2:	4618      	mov	r0, r3
 80298b4:	f7f9 ffd1 	bl	802385a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80298b8:	687b      	ldr	r3, [r7, #4]
 80298ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80298be:	2b00      	cmp	r3, #0
 80298c0:	d104      	bne.n	80298cc <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 80298c2:	687b      	ldr	r3, [r7, #4]
 80298c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80298c6:	4618      	mov	r0, r3
 80298c8:	f7f9 ffc7 	bl	802385a <lfs_free>
    }

    return 0;
 80298cc:	2300      	movs	r3, #0
}
 80298ce:	4618      	mov	r0, r3
 80298d0:	3708      	adds	r7, #8
 80298d2:	46bd      	mov	sp, r7
 80298d4:	bd80      	pop	{r7, pc}
	...

080298d8 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 80298d8:	b580      	push	{r7, lr}
 80298da:	b0a0      	sub	sp, #128	; 0x80
 80298dc:	af00      	add	r7, sp, #0
 80298de:	6078      	str	r0, [r7, #4]
 80298e0:	6039      	str	r1, [r7, #0]
    int err = 0;
 80298e2:	2300      	movs	r3, #0
 80298e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80298e6:	6839      	ldr	r1, [r7, #0]
 80298e8:	6878      	ldr	r0, [r7, #4]
 80298ea:	f7ff fe13 	bl	8029514 <lfs_init>
 80298ee:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80298f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80298f2:	2b00      	cmp	r3, #0
 80298f4:	d001      	beq.n	80298fa <lfs_rawformat+0x22>
            return err;
 80298f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80298f8:	e082      	b.n	8029a00 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80298fa:	687b      	ldr	r3, [r7, #4]
 80298fc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80298fe:	687b      	ldr	r3, [r7, #4]
 8029900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029904:	461a      	mov	r2, r3
 8029906:	2100      	movs	r1, #0
 8029908:	f004 f810 	bl	802d92c <memset>
        lfs->free.off = 0;
 802990c:	687b      	ldr	r3, [r7, #4]
 802990e:	2200      	movs	r2, #0
 8029910:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029912:	687b      	ldr	r3, [r7, #4]
 8029914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029918:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 802991a:	687b      	ldr	r3, [r7, #4]
 802991c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802991e:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029920:	4619      	mov	r1, r3
 8029922:	4610      	mov	r0, r2
 8029924:	f7f9 feee 	bl	8023704 <lfs_min>
 8029928:	4602      	mov	r2, r0
 802992a:	687b      	ldr	r3, [r7, #4]
 802992c:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 802992e:	687b      	ldr	r3, [r7, #4]
 8029930:	2200      	movs	r2, #0
 8029932:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8029934:	6878      	ldr	r0, [r7, #4]
 8029936:	f7fa fe2b 	bl	8024590 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 802993a:	f107 030c 	add.w	r3, r7, #12
 802993e:	4619      	mov	r1, r3
 8029940:	6878      	ldr	r0, [r7, #4]
 8029942:	f7fc fc7d 	bl	8026240 <lfs_dir_alloc>
 8029946:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029948:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802994a:	2b00      	cmp	r3, #0
 802994c:	d14f      	bne.n	80299ee <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 802994e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8029952:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8029954:	687b      	ldr	r3, [r7, #4]
 8029956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029958:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 802995a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 802995c:	687b      	ldr	r3, [r7, #4]
 802995e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029960:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8029962:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8029964:	687b      	ldr	r3, [r7, #4]
 8029966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8029968:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 802996a:	687b      	ldr	r3, [r7, #4]
 802996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 802996e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8029970:	687b      	ldr	r3, [r7, #4]
 8029972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8029974:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8029976:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802997a:	4618      	mov	r0, r3
 802997c:	f7fa fd48 	bl	8024410 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8029980:	4b21      	ldr	r3, [pc, #132]	; (8029a08 <lfs_rawformat+0x130>)
 8029982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029984:	2300      	movs	r3, #0
 8029986:	653b      	str	r3, [r7, #80]	; 0x50
 8029988:	4b20      	ldr	r3, [pc, #128]	; (8029a0c <lfs_rawformat+0x134>)
 802998a:	657b      	str	r3, [r7, #84]	; 0x54
 802998c:	4b20      	ldr	r3, [pc, #128]	; (8029a10 <lfs_rawformat+0x138>)
 802998e:	65bb      	str	r3, [r7, #88]	; 0x58
 8029990:	4b20      	ldr	r3, [pc, #128]	; (8029a14 <lfs_rawformat+0x13c>)
 8029992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029998:	663b      	str	r3, [r7, #96]	; 0x60
 802999a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802999e:	f107 010c 	add.w	r1, r7, #12
 80299a2:	2303      	movs	r3, #3
 80299a4:	6878      	ldr	r0, [r7, #4]
 80299a6:	f7fd fe67 	bl	8027678 <lfs_dir_commit>
 80299aa:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80299ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80299ae:	2b00      	cmp	r3, #0
 80299b0:	d11f      	bne.n	80299f2 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80299b2:	2300      	movs	r3, #0
 80299b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80299b8:	f107 010c 	add.w	r1, r7, #12
 80299bc:	2300      	movs	r3, #0
 80299be:	2200      	movs	r2, #0
 80299c0:	6878      	ldr	r0, [r7, #4]
 80299c2:	f7fd fe59 	bl	8027678 <lfs_dir_commit>
 80299c6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80299c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80299ca:	2b00      	cmp	r3, #0
 80299cc:	d113      	bne.n	80299f6 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80299ce:	2300      	movs	r3, #0
 80299d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80299d2:	2301      	movs	r3, #1
 80299d4:	633b      	str	r3, [r7, #48]	; 0x30
 80299d6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80299da:	f107 030c 	add.w	r3, r7, #12
 80299de:	4619      	mov	r1, r3
 80299e0:	6878      	ldr	r0, [r7, #4]
 80299e2:	f7fc f82f 	bl	8025a44 <lfs_dir_fetch>
 80299e6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80299e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80299ea:	2b00      	cmp	r3, #0
 80299ec:	e004      	b.n	80299f8 <lfs_rawformat+0x120>
            goto cleanup;
 80299ee:	bf00      	nop
 80299f0:	e002      	b.n	80299f8 <lfs_rawformat+0x120>
            goto cleanup;
 80299f2:	bf00      	nop
 80299f4:	e000      	b.n	80299f8 <lfs_rawformat+0x120>
            goto cleanup;
 80299f6:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80299f8:	6878      	ldr	r0, [r7, #4]
 80299fa:	f7ff ff45 	bl	8029888 <lfs_deinit>
    return err;
 80299fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8029a00:	4618      	mov	r0, r3
 8029a02:	3780      	adds	r7, #128	; 0x80
 8029a04:	46bd      	mov	sp, r7
 8029a06:	bd80      	pop	{r7, pc}
 8029a08:	40100000 	.word	0x40100000
 8029a0c:	0ff00008 	.word	0x0ff00008
 8029a10:	08033c58 	.word	0x08033c58
 8029a14:	20100018 	.word	0x20100018

08029a18 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8029a18:	b580      	push	{r7, lr}
 8029a1a:	b09c      	sub	sp, #112	; 0x70
 8029a1c:	af04      	add	r7, sp, #16
 8029a1e:	6078      	str	r0, [r7, #4]
 8029a20:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8029a22:	6839      	ldr	r1, [r7, #0]
 8029a24:	6878      	ldr	r0, [r7, #4]
 8029a26:	f7ff fd75 	bl	8029514 <lfs_init>
 8029a2a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8029a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029a2e:	2b00      	cmp	r3, #0
 8029a30:	d001      	beq.n	8029a36 <lfs_rawmount+0x1e>
        return err;
 8029a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029a34:	e192      	b.n	8029d5c <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a3a:	2220      	movs	r2, #32
 8029a3c:	2100      	movs	r1, #0
 8029a3e:	4618      	mov	r0, r3
 8029a40:	f003 ff74 	bl	802d92c <memset>
 8029a44:	2301      	movs	r3, #1
 8029a46:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8029a48:	2300      	movs	r3, #0
 8029a4a:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8029a4c:	e10b      	b.n	8029c66 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8029a4e:	687b      	ldr	r3, [r7, #4]
 8029a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a52:	6a1b      	ldr	r3, [r3, #32]
 8029a54:	085b      	lsrs	r3, r3, #1
 8029a56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029a58:	429a      	cmp	r2, r3
 8029a5a:	d303      	bcc.n	8029a64 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8029a5c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029a60:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029a62:	e177      	b.n	8029d54 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8029a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029a66:	3301      	adds	r3, #1
 8029a68:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8029a6a:	687b      	ldr	r3, [r7, #4]
 8029a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8029a6e:	4b8a      	ldr	r3, [pc, #552]	; (8029c98 <lfs_rawmount+0x280>)
 8029a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8029a72:	2308      	movs	r3, #8
 8029a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8029a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a7a:	f103 0218 	add.w	r2, r3, #24
 8029a7e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029a86:	9303      	str	r3, [sp, #12]
 8029a88:	4b84      	ldr	r3, [pc, #528]	; (8029c9c <lfs_rawmount+0x284>)
 8029a8a:	9302      	str	r3, [sp, #8]
 8029a8c:	2300      	movs	r3, #0
 8029a8e:	9301      	str	r3, [sp, #4]
 8029a90:	4b83      	ldr	r3, [pc, #524]	; (8029ca0 <lfs_rawmount+0x288>)
 8029a92:	9300      	str	r3, [sp, #0]
 8029a94:	4b83      	ldr	r3, [pc, #524]	; (8029ca4 <lfs_rawmount+0x28c>)
 8029a96:	6878      	ldr	r0, [r7, #4]
 8029a98:	f7fb fc66 	bl	8025368 <lfs_dir_fetchmatch>
 8029a9c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8029a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029aa0:	2b00      	cmp	r3, #0
 8029aa2:	da02      	bge.n	8029aaa <lfs_rawmount+0x92>
            err = tag;
 8029aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029aa8:	e154      	b.n	8029d54 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8029aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029aac:	2b00      	cmp	r3, #0
 8029aae:	f000 80cd 	beq.w	8029c4c <lfs_rawmount+0x234>
 8029ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029ab4:	4618      	mov	r0, r3
 8029ab6:	f7fa faee 	bl	8024096 <lfs_tag_isdelete>
 8029aba:	4603      	mov	r3, r0
 8029abc:	f083 0301 	eor.w	r3, r3, #1
 8029ac0:	b2db      	uxtb	r3, r3
 8029ac2:	2b00      	cmp	r3, #0
 8029ac4:	f000 80c2 	beq.w	8029c4c <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029aca:	687b      	ldr	r3, [r7, #4]
 8029acc:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8029ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029ad0:	687b      	ldr	r3, [r7, #4]
 8029ad2:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8029ad4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029ad8:	f107 030c 	add.w	r3, r7, #12
 8029adc:	9300      	str	r3, [sp, #0]
 8029ade:	4b72      	ldr	r3, [pc, #456]	; (8029ca8 <lfs_rawmount+0x290>)
 8029ae0:	4a70      	ldr	r2, [pc, #448]	; (8029ca4 <lfs_rawmount+0x28c>)
 8029ae2:	6878      	ldr	r0, [r7, #4]
 8029ae4:	f7fa ff0e 	bl	8024904 <lfs_dir_get>
 8029ae8:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8029aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029aec:	2b00      	cmp	r3, #0
 8029aee:	da02      	bge.n	8029af6 <lfs_rawmount+0xde>
                err = tag;
 8029af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029af2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029af4:	e12e      	b.n	8029d54 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8029af6:	f107 030c 	add.w	r3, r7, #12
 8029afa:	4618      	mov	r0, r3
 8029afc:	f7fa fc50 	bl	80243a0 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8029b00:	68fb      	ldr	r3, [r7, #12]
 8029b02:	0c1b      	lsrs	r3, r3, #16
 8029b04:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8029b08:	68fb      	ldr	r3, [r7, #12]
 8029b0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8029b0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8029b12:	2b02      	cmp	r3, #2
 8029b14:	d103      	bne.n	8029b1e <lfs_rawmount+0x106>
 8029b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8029b1a:	2b00      	cmp	r3, #0
 8029b1c:	d011      	beq.n	8029b42 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8029b1e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8029b22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8029b26:	4961      	ldr	r1, [pc, #388]	; (8029cac <lfs_rawmount+0x294>)
 8029b28:	9101      	str	r1, [sp, #4]
 8029b2a:	9300      	str	r3, [sp, #0]
 8029b2c:	4613      	mov	r3, r2
 8029b2e:	f241 0233 	movw	r2, #4147	; 0x1033
 8029b32:	495f      	ldr	r1, [pc, #380]	; (8029cb0 <lfs_rawmount+0x298>)
 8029b34:	485f      	ldr	r0, [pc, #380]	; (8029cb4 <lfs_rawmount+0x29c>)
 8029b36:	f003 fd63 	bl	802d600 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8029b3a:	f06f 0315 	mvn.w	r3, #21
 8029b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029b40:	e083      	b.n	8029c4a <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8029b42:	69bb      	ldr	r3, [r7, #24]
 8029b44:	2b00      	cmp	r3, #0
 8029b46:	d018      	beq.n	8029b7a <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8029b48:	69ba      	ldr	r2, [r7, #24]
 8029b4a:	687b      	ldr	r3, [r7, #4]
 8029b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029b4e:	429a      	cmp	r2, r3
 8029b50:	d910      	bls.n	8029b74 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8029b52:	69ba      	ldr	r2, [r7, #24]
 8029b54:	687b      	ldr	r3, [r7, #4]
 8029b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029b58:	4954      	ldr	r1, [pc, #336]	; (8029cac <lfs_rawmount+0x294>)
 8029b5a:	9101      	str	r1, [sp, #4]
 8029b5c:	9300      	str	r3, [sp, #0]
 8029b5e:	4613      	mov	r3, r2
 8029b60:	f241 023c 	movw	r2, #4156	; 0x103c
 8029b64:	4952      	ldr	r1, [pc, #328]	; (8029cb0 <lfs_rawmount+0x298>)
 8029b66:	4854      	ldr	r0, [pc, #336]	; (8029cb8 <lfs_rawmount+0x2a0>)
 8029b68:	f003 fd4a 	bl	802d600 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8029b6c:	f06f 0315 	mvn.w	r3, #21
 8029b70:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029b72:	e06a      	b.n	8029c4a <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8029b74:	69ba      	ldr	r2, [r7, #24]
 8029b76:	687b      	ldr	r3, [r7, #4]
 8029b78:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8029b7a:	69fb      	ldr	r3, [r7, #28]
 8029b7c:	2b00      	cmp	r3, #0
 8029b7e:	d018      	beq.n	8029bb2 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8029b80:	69fa      	ldr	r2, [r7, #28]
 8029b82:	687b      	ldr	r3, [r7, #4]
 8029b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029b86:	429a      	cmp	r2, r3
 8029b88:	d910      	bls.n	8029bac <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8029b8a:	69fa      	ldr	r2, [r7, #28]
 8029b8c:	687b      	ldr	r3, [r7, #4]
 8029b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029b90:	4946      	ldr	r1, [pc, #280]	; (8029cac <lfs_rawmount+0x294>)
 8029b92:	9101      	str	r1, [sp, #4]
 8029b94:	9300      	str	r3, [sp, #0]
 8029b96:	4613      	mov	r3, r2
 8029b98:	f241 0247 	movw	r2, #4167	; 0x1047
 8029b9c:	4944      	ldr	r1, [pc, #272]	; (8029cb0 <lfs_rawmount+0x298>)
 8029b9e:	4847      	ldr	r0, [pc, #284]	; (8029cbc <lfs_rawmount+0x2a4>)
 8029ba0:	f003 fd2e 	bl	802d600 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029ba4:	f06f 0315 	mvn.w	r3, #21
 8029ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029baa:	e04e      	b.n	8029c4a <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8029bac:	69fa      	ldr	r2, [r7, #28]
 8029bae:	687b      	ldr	r3, [r7, #4]
 8029bb0:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8029bb2:	6a3b      	ldr	r3, [r7, #32]
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	d018      	beq.n	8029bea <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029bb8:	6a3a      	ldr	r2, [r7, #32]
 8029bba:	687b      	ldr	r3, [r7, #4]
 8029bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029bbe:	429a      	cmp	r2, r3
 8029bc0:	d910      	bls.n	8029be4 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029bc2:	6a3a      	ldr	r2, [r7, #32]
 8029bc4:	687b      	ldr	r3, [r7, #4]
 8029bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029bc8:	4938      	ldr	r1, [pc, #224]	; (8029cac <lfs_rawmount+0x294>)
 8029bca:	9101      	str	r1, [sp, #4]
 8029bcc:	9300      	str	r3, [sp, #0]
 8029bce:	4613      	mov	r3, r2
 8029bd0:	f241 0252 	movw	r2, #4178	; 0x1052
 8029bd4:	4936      	ldr	r1, [pc, #216]	; (8029cb0 <lfs_rawmount+0x298>)
 8029bd6:	483a      	ldr	r0, [pc, #232]	; (8029cc0 <lfs_rawmount+0x2a8>)
 8029bd8:	f003 fd12 	bl	802d600 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8029bdc:	f06f 0315 	mvn.w	r3, #21
 8029be0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029be2:	e032      	b.n	8029c4a <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8029be4:	6a3a      	ldr	r2, [r7, #32]
 8029be6:	687b      	ldr	r3, [r7, #4]
 8029be8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8029bea:	697a      	ldr	r2, [r7, #20]
 8029bec:	687b      	ldr	r3, [r7, #4]
 8029bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029bf0:	6a1b      	ldr	r3, [r3, #32]
 8029bf2:	429a      	cmp	r2, r3
 8029bf4:	d011      	beq.n	8029c1a <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8029bf6:	697a      	ldr	r2, [r7, #20]
 8029bf8:	687b      	ldr	r3, [r7, #4]
 8029bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029bfc:	6a1b      	ldr	r3, [r3, #32]
 8029bfe:	492b      	ldr	r1, [pc, #172]	; (8029cac <lfs_rawmount+0x294>)
 8029c00:	9101      	str	r1, [sp, #4]
 8029c02:	9300      	str	r3, [sp, #0]
 8029c04:	4613      	mov	r3, r2
 8029c06:	f241 025c 	movw	r2, #4188	; 0x105c
 8029c0a:	4929      	ldr	r1, [pc, #164]	; (8029cb0 <lfs_rawmount+0x298>)
 8029c0c:	482d      	ldr	r0, [pc, #180]	; (8029cc4 <lfs_rawmount+0x2ac>)
 8029c0e:	f003 fcf7 	bl	802d600 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8029c12:	f06f 0315 	mvn.w	r3, #21
 8029c16:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029c18:	e017      	b.n	8029c4a <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8029c1a:	693a      	ldr	r2, [r7, #16]
 8029c1c:	687b      	ldr	r3, [r7, #4]
 8029c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029c20:	69db      	ldr	r3, [r3, #28]
 8029c22:	429a      	cmp	r2, r3
 8029c24:	d012      	beq.n	8029c4c <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8029c26:	693a      	ldr	r2, [r7, #16]
 8029c28:	687b      	ldr	r3, [r7, #4]
 8029c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029c2c:	69db      	ldr	r3, [r3, #28]
 8029c2e:	491f      	ldr	r1, [pc, #124]	; (8029cac <lfs_rawmount+0x294>)
 8029c30:	9101      	str	r1, [sp, #4]
 8029c32:	9300      	str	r3, [sp, #0]
 8029c34:	4613      	mov	r3, r2
 8029c36:	f241 0263 	movw	r2, #4195	; 0x1063
 8029c3a:	491d      	ldr	r1, [pc, #116]	; (8029cb0 <lfs_rawmount+0x298>)
 8029c3c:	4822      	ldr	r0, [pc, #136]	; (8029cc8 <lfs_rawmount+0x2b0>)
 8029c3e:	f003 fcdf 	bl	802d600 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8029c42:	f06f 0315 	mvn.w	r3, #21
 8029c46:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029c48:	bf00      	nop
            goto cleanup;
 8029c4a:	e083      	b.n	8029d54 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8029c4c:	687b      	ldr	r3, [r7, #4]
 8029c4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8029c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029c56:	4619      	mov	r1, r3
 8029c58:	6878      	ldr	r0, [r7, #4]
 8029c5a:	f7fb ff0f 	bl	8025a7c <lfs_dir_getgstate>
 8029c5e:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8029c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029c62:	2b00      	cmp	r3, #0
 8029c64:	d175      	bne.n	8029d52 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8029c66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029c6a:	3318      	adds	r3, #24
 8029c6c:	4618      	mov	r0, r3
 8029c6e:	f7fa f95e 	bl	8023f2e <lfs_pair_isnull>
 8029c72:	4603      	mov	r3, r0
 8029c74:	f083 0301 	eor.w	r3, r3, #1
 8029c78:	b2db      	uxtb	r3, r3
 8029c7a:	2b00      	cmp	r3, #0
 8029c7c:	f47f aee7 	bne.w	8029a4e <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029c80:	687b      	ldr	r3, [r7, #4]
 8029c82:	3320      	adds	r3, #32
 8029c84:	4618      	mov	r0, r3
 8029c86:	f7fa f952 	bl	8023f2e <lfs_pair_isnull>
 8029c8a:	4603      	mov	r3, r0
 8029c8c:	2b00      	cmp	r3, #0
 8029c8e:	d01d      	beq.n	8029ccc <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029c90:	f06f 0315 	mvn.w	r3, #21
 8029c94:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8029c96:	e05d      	b.n	8029d54 <lfs_rawmount+0x33c>
 8029c98:	08033c58 	.word	0x08033c58
 8029c9c:	08025bd5 	.word	0x08025bd5
 8029ca0:	0ff00008 	.word	0x0ff00008
 8029ca4:	7ffffc00 	.word	0x7ffffc00
 8029ca8:	20100018 	.word	0x20100018
 8029cac:	08033780 	.word	0x08033780
 8029cb0:	0803366c 	.word	0x0803366c
 8029cb4:	08033c64 	.word	0x08033c64
 8029cb8:	08033c90 	.word	0x08033c90
 8029cbc:	08033cc4 	.word	0x08033cc4
 8029cc0:	08033cf8 	.word	0x08033cf8
 8029cc4:	08033d2c 	.word	0x08033d2c
 8029cc8:	08033d60 	.word	0x08033d60
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8029ccc:	687b      	ldr	r3, [r7, #4]
 8029cce:	3330      	adds	r3, #48	; 0x30
 8029cd0:	4618      	mov	r0, r3
 8029cd2:	f7fa fa83 	bl	80241dc <lfs_gstate_iszero>
 8029cd6:	4603      	mov	r3, r0
 8029cd8:	f083 0301 	eor.w	r3, r3, #1
 8029cdc:	b2db      	uxtb	r3, r3
 8029cde:	2b00      	cmp	r3, #0
 8029ce0:	d010      	beq.n	8029d04 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029ce2:	687b      	ldr	r3, [r7, #4]
 8029ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029ce6:	687b      	ldr	r3, [r7, #4]
 8029ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029cea:	687a      	ldr	r2, [r7, #4]
 8029cec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029cee:	481d      	ldr	r0, [pc, #116]	; (8029d64 <lfs_rawmount+0x34c>)
 8029cf0:	9002      	str	r0, [sp, #8]
 8029cf2:	9201      	str	r2, [sp, #4]
 8029cf4:	9300      	str	r3, [sp, #0]
 8029cf6:	460b      	mov	r3, r1
 8029cf8:	f241 0279 	movw	r2, #4217	; 0x1079
 8029cfc:	491a      	ldr	r1, [pc, #104]	; (8029d68 <lfs_rawmount+0x350>)
 8029cfe:	481b      	ldr	r0, [pc, #108]	; (8029d6c <lfs_rawmount+0x354>)
 8029d00:	f003 fc7e 	bl	802d600 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029d04:	687b      	ldr	r3, [r7, #4]
 8029d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d08:	4618      	mov	r0, r3
 8029d0a:	f7fa f9b6 	bl	802407a <lfs_tag_isvalid>
 8029d0e:	4603      	mov	r3, r0
 8029d10:	f083 0301 	eor.w	r3, r3, #1
 8029d14:	b2db      	uxtb	r3, r3
 8029d16:	461a      	mov	r2, r3
 8029d18:	687b      	ldr	r3, [r7, #4]
 8029d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d1c:	441a      	add	r2, r3
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8029d22:	687b      	ldr	r3, [r7, #4]
 8029d24:	687a      	ldr	r2, [r7, #4]
 8029d26:	333c      	adds	r3, #60	; 0x3c
 8029d28:	3230      	adds	r2, #48	; 0x30
 8029d2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8029d2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8029d30:	687b      	ldr	r3, [r7, #4]
 8029d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d34:	687a      	ldr	r2, [r7, #4]
 8029d36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029d38:	6a12      	ldr	r2, [r2, #32]
 8029d3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8029d3e:	fb01 f202 	mul.w	r2, r1, r2
 8029d42:	1a9a      	subs	r2, r3, r2
 8029d44:	687b      	ldr	r3, [r7, #4]
 8029d46:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8029d48:	6878      	ldr	r0, [r7, #4]
 8029d4a:	f7fa fc30 	bl	80245ae <lfs_alloc_drop>

    return 0;
 8029d4e:	2300      	movs	r3, #0
 8029d50:	e004      	b.n	8029d5c <lfs_rawmount+0x344>
            goto cleanup;
 8029d52:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8029d54:	6878      	ldr	r0, [r7, #4]
 8029d56:	f000 f80b 	bl	8029d70 <lfs_rawunmount>
    return err;
 8029d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8029d5c:	4618      	mov	r0, r3
 8029d5e:	3760      	adds	r7, #96	; 0x60
 8029d60:	46bd      	mov	sp, r7
 8029d62:	bd80      	pop	{r7, pc}
 8029d64:	08033780 	.word	0x08033780
 8029d68:	0803366c 	.word	0x0803366c
 8029d6c:	08033d90 	.word	0x08033d90

08029d70 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8029d70:	b580      	push	{r7, lr}
 8029d72:	b082      	sub	sp, #8
 8029d74:	af00      	add	r7, sp, #0
 8029d76:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8029d78:	6878      	ldr	r0, [r7, #4]
 8029d7a:	f7ff fd85 	bl	8029888 <lfs_deinit>
 8029d7e:	4603      	mov	r3, r0
}
 8029d80:	4618      	mov	r0, r3
 8029d82:	3708      	adds	r7, #8
 8029d84:	46bd      	mov	sp, r7
 8029d86:	bd80      	pop	{r7, pc}

08029d88 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8029d88:	b590      	push	{r4, r7, lr}
 8029d8a:	b09d      	sub	sp, #116	; 0x74
 8029d8c:	af04      	add	r7, sp, #16
 8029d8e:	60f8      	str	r0, [r7, #12]
 8029d90:	60b9      	str	r1, [r7, #8]
 8029d92:	607a      	str	r2, [r7, #4]
 8029d94:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029d96:	f107 0318 	add.w	r3, r7, #24
 8029d9a:	2220      	movs	r2, #32
 8029d9c:	2100      	movs	r1, #0
 8029d9e:	4618      	mov	r0, r3
 8029da0:	f003 fdc4 	bl	802d92c <memset>
 8029da4:	2301      	movs	r3, #1
 8029da6:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8029da8:	2300      	movs	r3, #0
 8029daa:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8029dac:	e0a7      	b.n	8029efe <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8029dae:	68fb      	ldr	r3, [r7, #12]
 8029db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029db2:	6a1b      	ldr	r3, [r3, #32]
 8029db4:	085b      	lsrs	r3, r3, #1
 8029db6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029db8:	429a      	cmp	r2, r3
 8029dba:	d302      	bcc.n	8029dc2 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029dbc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029dc0:	e102      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8029dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029dc4:	3301      	adds	r3, #1
 8029dc6:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8029dc8:	2300      	movs	r3, #0
 8029dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8029dcc:	e013      	b.n	8029df6 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8029dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029dd0:	3306      	adds	r3, #6
 8029dd2:	009b      	lsls	r3, r3, #2
 8029dd4:	3360      	adds	r3, #96	; 0x60
 8029dd6:	443b      	add	r3, r7
 8029dd8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8029ddc:	68bb      	ldr	r3, [r7, #8]
 8029dde:	4611      	mov	r1, r2
 8029de0:	6878      	ldr	r0, [r7, #4]
 8029de2:	4798      	blx	r3
 8029de4:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8029de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029de8:	2b00      	cmp	r3, #0
 8029dea:	d001      	beq.n	8029df0 <lfs_fs_rawtraverse+0x68>
                return err;
 8029dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029dee:	e0eb      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8029df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029df2:	3301      	adds	r3, #1
 8029df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8029df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029df8:	2b01      	cmp	r3, #1
 8029dfa:	dde8      	ble.n	8029dce <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8029dfc:	f107 0318 	add.w	r3, r7, #24
 8029e00:	f103 0218 	add.w	r2, r3, #24
 8029e04:	f107 0318 	add.w	r3, r7, #24
 8029e08:	4619      	mov	r1, r3
 8029e0a:	68f8      	ldr	r0, [r7, #12]
 8029e0c:	f7fb fe1a 	bl	8025a44 <lfs_dir_fetch>
 8029e10:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8029e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029e14:	2b00      	cmp	r3, #0
 8029e16:	d001      	beq.n	8029e1c <lfs_fs_rawtraverse+0x94>
            return err;
 8029e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029e1a:	e0d5      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8029e1c:	2300      	movs	r3, #0
 8029e1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029e22:	e067      	b.n	8029ef4 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8029e24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029e28:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8029e2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029e2e:	f043 0308 	orr.w	r3, r3, #8
 8029e32:	f107 0118 	add.w	r1, r7, #24
 8029e36:	f107 0210 	add.w	r2, r7, #16
 8029e3a:	9200      	str	r2, [sp, #0]
 8029e3c:	4a64      	ldr	r2, [pc, #400]	; (8029fd0 <lfs_fs_rawtraverse+0x248>)
 8029e3e:	68f8      	ldr	r0, [r7, #12]
 8029e40:	f7fa fd60 	bl	8024904 <lfs_dir_get>
 8029e44:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8029e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029e48:	2b00      	cmp	r3, #0
 8029e4a:	da05      	bge.n	8029e58 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8029e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029e4e:	f113 0f02 	cmn.w	r3, #2
 8029e52:	d049      	beq.n	8029ee8 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8029e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029e56:	e0b7      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8029e58:	f107 0310 	add.w	r3, r7, #16
 8029e5c:	4618      	mov	r0, r3
 8029e5e:	f7fa fa6f 	bl	8024340 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8029e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029e64:	4618      	mov	r0, r3
 8029e66:	f7fa f939 	bl	80240dc <lfs_tag_type3>
 8029e6a:	4603      	mov	r3, r0
 8029e6c:	461a      	mov	r2, r3
 8029e6e:	f240 2302 	movw	r3, #514	; 0x202
 8029e72:	429a      	cmp	r2, r3
 8029e74:	d113      	bne.n	8029e9e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8029e76:	68f9      	ldr	r1, [r7, #12]
 8029e78:	6938      	ldr	r0, [r7, #16]
 8029e7a:	697b      	ldr	r3, [r7, #20]
 8029e7c:	687a      	ldr	r2, [r7, #4]
 8029e7e:	9202      	str	r2, [sp, #8]
 8029e80:	68ba      	ldr	r2, [r7, #8]
 8029e82:	9201      	str	r2, [sp, #4]
 8029e84:	9300      	str	r3, [sp, #0]
 8029e86:	4603      	mov	r3, r0
 8029e88:	460a      	mov	r2, r1
 8029e8a:	2100      	movs	r1, #0
 8029e8c:	68f8      	ldr	r0, [r7, #12]
 8029e8e:	f7fe f811 	bl	8027eb4 <lfs_ctz_traverse>
 8029e92:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8029e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	d027      	beq.n	8029eea <lfs_fs_rawtraverse+0x162>
                    return err;
 8029e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029e9c:	e094      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8029e9e:	78fb      	ldrb	r3, [r7, #3]
 8029ea0:	2b00      	cmp	r3, #0
 8029ea2:	d022      	beq.n	8029eea <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8029ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029ea6:	4618      	mov	r0, r3
 8029ea8:	f7fa f918 	bl	80240dc <lfs_tag_type3>
 8029eac:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8029eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029eb2:	d11a      	bne.n	8029eea <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8029eb4:	2300      	movs	r3, #0
 8029eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8029eb8:	e012      	b.n	8029ee0 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8029eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029ebc:	009b      	lsls	r3, r3, #2
 8029ebe:	f107 0210 	add.w	r2, r7, #16
 8029ec2:	4413      	add	r3, r2
 8029ec4:	681a      	ldr	r2, [r3, #0]
 8029ec6:	68bb      	ldr	r3, [r7, #8]
 8029ec8:	4611      	mov	r1, r2
 8029eca:	6878      	ldr	r0, [r7, #4]
 8029ecc:	4798      	blx	r3
 8029ece:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8029ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029ed2:	2b00      	cmp	r3, #0
 8029ed4:	d001      	beq.n	8029eda <lfs_fs_rawtraverse+0x152>
                        return err;
 8029ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029ed8:	e076      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8029eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029edc:	3301      	adds	r3, #1
 8029ede:	653b      	str	r3, [r7, #80]	; 0x50
 8029ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029ee2:	2b01      	cmp	r3, #1
 8029ee4:	dde9      	ble.n	8029eba <lfs_fs_rawtraverse+0x132>
 8029ee6:	e000      	b.n	8029eea <lfs_fs_rawtraverse+0x162>
                    continue;
 8029ee8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8029eea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029eee:	3301      	adds	r3, #1
 8029ef0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8029ef6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8029efa:	429a      	cmp	r2, r3
 8029efc:	d392      	bcc.n	8029e24 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8029efe:	f107 0318 	add.w	r3, r7, #24
 8029f02:	3318      	adds	r3, #24
 8029f04:	4618      	mov	r0, r3
 8029f06:	f7fa f812 	bl	8023f2e <lfs_pair_isnull>
 8029f0a:	4603      	mov	r3, r0
 8029f0c:	f083 0301 	eor.w	r3, r3, #1
 8029f10:	b2db      	uxtb	r3, r3
 8029f12:	2b00      	cmp	r3, #0
 8029f14:	f47f af4b 	bne.w	8029dae <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029f18:	68fb      	ldr	r3, [r7, #12]
 8029f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029f1e:	e04f      	b.n	8029fc0 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8029f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f22:	799b      	ldrb	r3, [r3, #6]
 8029f24:	2b01      	cmp	r3, #1
 8029f26:	d147      	bne.n	8029fb8 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8029f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029f30:	2b00      	cmp	r3, #0
 8029f32:	d01d      	beq.n	8029f70 <lfs_fs_rawtraverse+0x1e8>
 8029f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029f3c:	2b00      	cmp	r3, #0
 8029f3e:	d117      	bne.n	8029f70 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f42:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029f46:	68f8      	ldr	r0, [r7, #12]
 8029f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f4a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8029f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029f50:	687a      	ldr	r2, [r7, #4]
 8029f52:	9202      	str	r2, [sp, #8]
 8029f54:	68ba      	ldr	r2, [r7, #8]
 8029f56:	9201      	str	r2, [sp, #4]
 8029f58:	9300      	str	r3, [sp, #0]
 8029f5a:	4623      	mov	r3, r4
 8029f5c:	4602      	mov	r2, r0
 8029f5e:	68f8      	ldr	r0, [r7, #12]
 8029f60:	f7fd ffa8 	bl	8027eb4 <lfs_ctz_traverse>
 8029f64:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8029f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029f68:	2b00      	cmp	r3, #0
 8029f6a:	d001      	beq.n	8029f70 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8029f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029f6e:	e02b      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8029f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029f78:	2b00      	cmp	r3, #0
 8029f7a:	d01e      	beq.n	8029fba <lfs_fs_rawtraverse+0x232>
 8029f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029f84:	2b00      	cmp	r3, #0
 8029f86:	d118      	bne.n	8029fba <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f8a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029f8e:	68f8      	ldr	r0, [r7, #12]
 8029f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f92:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8029f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029f98:	687a      	ldr	r2, [r7, #4]
 8029f9a:	9202      	str	r2, [sp, #8]
 8029f9c:	68ba      	ldr	r2, [r7, #8]
 8029f9e:	9201      	str	r2, [sp, #4]
 8029fa0:	9300      	str	r3, [sp, #0]
 8029fa2:	4623      	mov	r3, r4
 8029fa4:	4602      	mov	r2, r0
 8029fa6:	68f8      	ldr	r0, [r7, #12]
 8029fa8:	f7fd ff84 	bl	8027eb4 <lfs_ctz_traverse>
 8029fac:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8029fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029fb0:	2b00      	cmp	r3, #0
 8029fb2:	d002      	beq.n	8029fba <lfs_fs_rawtraverse+0x232>
                return err;
 8029fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029fb6:	e007      	b.n	8029fc8 <lfs_fs_rawtraverse+0x240>
            continue;
 8029fb8:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029fbc:	681b      	ldr	r3, [r3, #0]
 8029fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029fc2:	2b00      	cmp	r3, #0
 8029fc4:	d1ac      	bne.n	8029f20 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8029fc6:	2300      	movs	r3, #0
}
 8029fc8:	4618      	mov	r0, r3
 8029fca:	3764      	adds	r7, #100	; 0x64
 8029fcc:	46bd      	mov	sp, r7
 8029fce:	bd90      	pop	{r4, r7, pc}
 8029fd0:	700ffc00 	.word	0x700ffc00

08029fd4 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8029fd4:	b580      	push	{r7, lr}
 8029fd6:	b086      	sub	sp, #24
 8029fd8:	af00      	add	r7, sp, #0
 8029fda:	60f8      	str	r0, [r7, #12]
 8029fdc:	60b9      	str	r1, [r7, #8]
 8029fde:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8029fe0:	687b      	ldr	r3, [r7, #4]
 8029fe2:	2200      	movs	r2, #0
 8029fe4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	2201      	movs	r2, #1
 8029fea:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029fec:	2300      	movs	r3, #0
 8029fee:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8029ff0:	e024      	b.n	802a03c <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8029ff2:	68fb      	ldr	r3, [r7, #12]
 8029ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ff6:	6a1b      	ldr	r3, [r3, #32]
 8029ff8:	085b      	lsrs	r3, r3, #1
 8029ffa:	697a      	ldr	r2, [r7, #20]
 8029ffc:	429a      	cmp	r2, r3
 8029ffe:	d302      	bcc.n	802a006 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a000:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802a004:	e027      	b.n	802a056 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 802a006:	697b      	ldr	r3, [r7, #20]
 802a008:	3301      	adds	r3, #1
 802a00a:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 802a00c:	687b      	ldr	r3, [r7, #4]
 802a00e:	3318      	adds	r3, #24
 802a010:	68b9      	ldr	r1, [r7, #8]
 802a012:	4618      	mov	r0, r3
 802a014:	f7f9 ffa6 	bl	8023f64 <lfs_pair_cmp>
 802a018:	4603      	mov	r3, r0
 802a01a:	2b00      	cmp	r3, #0
 802a01c:	d101      	bne.n	802a022 <lfs_fs_pred+0x4e>
            return 0;
 802a01e:	2300      	movs	r3, #0
 802a020:	e019      	b.n	802a056 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 802a022:	687b      	ldr	r3, [r7, #4]
 802a024:	3318      	adds	r3, #24
 802a026:	461a      	mov	r2, r3
 802a028:	6879      	ldr	r1, [r7, #4]
 802a02a:	68f8      	ldr	r0, [r7, #12]
 802a02c:	f7fb fd0a 	bl	8025a44 <lfs_dir_fetch>
 802a030:	6138      	str	r0, [r7, #16]
        if (err) {
 802a032:	693b      	ldr	r3, [r7, #16]
 802a034:	2b00      	cmp	r3, #0
 802a036:	d001      	beq.n	802a03c <lfs_fs_pred+0x68>
            return err;
 802a038:	693b      	ldr	r3, [r7, #16]
 802a03a:	e00c      	b.n	802a056 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 802a03c:	687b      	ldr	r3, [r7, #4]
 802a03e:	3318      	adds	r3, #24
 802a040:	4618      	mov	r0, r3
 802a042:	f7f9 ff74 	bl	8023f2e <lfs_pair_isnull>
 802a046:	4603      	mov	r3, r0
 802a048:	f083 0301 	eor.w	r3, r3, #1
 802a04c:	b2db      	uxtb	r3, r3
 802a04e:	2b00      	cmp	r3, #0
 802a050:	d1cf      	bne.n	8029ff2 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a052:	f06f 0301 	mvn.w	r3, #1
}
 802a056:	4618      	mov	r0, r3
 802a058:	3718      	adds	r7, #24
 802a05a:	46bd      	mov	sp, r7
 802a05c:	bd80      	pop	{r7, pc}

0802a05e <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 802a05e:	b5b0      	push	{r4, r5, r7, lr}
 802a060:	b08e      	sub	sp, #56	; 0x38
 802a062:	af04      	add	r7, sp, #16
 802a064:	60f8      	str	r0, [r7, #12]
 802a066:	60b9      	str	r1, [r7, #8]
 802a068:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 802a06a:	68fb      	ldr	r3, [r7, #12]
 802a06c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 802a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a070:	681b      	ldr	r3, [r3, #0]
 802a072:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 802a074:	687b      	ldr	r3, [r7, #4]
 802a076:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a078:	6a3b      	ldr	r3, [r7, #32]
 802a07a:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 802a07e:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a080:	6a3b      	ldr	r3, [r7, #32]
 802a082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a084:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 802a086:	69fb      	ldr	r3, [r7, #28]
 802a088:	681b      	ldr	r3, [r3, #0]
 802a08a:	69fa      	ldr	r2, [r7, #28]
 802a08c:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 802a08e:	2108      	movs	r1, #8
 802a090:	9103      	str	r1, [sp, #12]
 802a092:	f107 0110 	add.w	r1, r7, #16
 802a096:	9102      	str	r1, [sp, #8]
 802a098:	9201      	str	r2, [sp, #4]
 802a09a:	9300      	str	r3, [sp, #0]
 802a09c:	462b      	mov	r3, r5
 802a09e:	4622      	mov	r2, r4
 802a0a0:	4601      	mov	r1, r0
 802a0a2:	6a38      	ldr	r0, [r7, #32]
 802a0a4:	f7f9 fc0a 	bl	80238bc <lfs_bd_read>
 802a0a8:	61b8      	str	r0, [r7, #24]
    if (err) {
 802a0aa:	69bb      	ldr	r3, [r7, #24]
 802a0ac:	2b00      	cmp	r3, #0
 802a0ae:	d001      	beq.n	802a0b4 <lfs_fs_parent_match+0x56>
        return err;
 802a0b0:	69bb      	ldr	r3, [r7, #24]
 802a0b2:	e012      	b.n	802a0da <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 802a0b4:	f107 0310 	add.w	r3, r7, #16
 802a0b8:	4618      	mov	r0, r3
 802a0ba:	f7f9 ffaa 	bl	8024012 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 802a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0c0:	1d1a      	adds	r2, r3, #4
 802a0c2:	f107 0310 	add.w	r3, r7, #16
 802a0c6:	4611      	mov	r1, r2
 802a0c8:	4618      	mov	r0, r3
 802a0ca:	f7f9 ff4b 	bl	8023f64 <lfs_pair_cmp>
 802a0ce:	4603      	mov	r3, r0
 802a0d0:	2b00      	cmp	r3, #0
 802a0d2:	bf14      	ite	ne
 802a0d4:	2301      	movne	r3, #1
 802a0d6:	2300      	moveq	r3, #0
 802a0d8:	b2db      	uxtb	r3, r3
}
 802a0da:	4618      	mov	r0, r3
 802a0dc:	3728      	adds	r7, #40	; 0x28
 802a0de:	46bd      	mov	sp, r7
 802a0e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802a0e4 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 802a0e4:	b580      	push	{r7, lr}
 802a0e6:	b08e      	sub	sp, #56	; 0x38
 802a0e8:	af04      	add	r7, sp, #16
 802a0ea:	60f8      	str	r0, [r7, #12]
 802a0ec:	60b9      	str	r1, [r7, #8]
 802a0ee:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 802a0f0:	687b      	ldr	r3, [r7, #4]
 802a0f2:	2200      	movs	r2, #0
 802a0f4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 802a0f6:	687b      	ldr	r3, [r7, #4]
 802a0f8:	2201      	movs	r2, #1
 802a0fa:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 802a0fc:	2300      	movs	r3, #0
 802a0fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 802a100:	e030      	b.n	802a164 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 802a102:	68fb      	ldr	r3, [r7, #12]
 802a104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a106:	6a1b      	ldr	r3, [r3, #32]
 802a108:	085b      	lsrs	r3, r3, #1
 802a10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a10c:	429a      	cmp	r2, r3
 802a10e:	d302      	bcc.n	802a116 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a110:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802a114:	e033      	b.n	802a17e <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 802a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a118:	3301      	adds	r3, #1
 802a11a:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a122:	68fb      	ldr	r3, [r7, #12]
 802a124:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 802a126:	68bb      	ldr	r3, [r7, #8]
 802a128:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a12a:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 802a12c:	68bb      	ldr	r3, [r7, #8]
 802a12e:	3304      	adds	r3, #4
 802a130:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a132:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a134:	f107 0314 	add.w	r3, r7, #20
 802a138:	9303      	str	r3, [sp, #12]
 802a13a:	4b13      	ldr	r3, [pc, #76]	; (802a188 <lfs_fs_parent+0xa4>)
 802a13c:	9302      	str	r3, [sp, #8]
 802a13e:	2300      	movs	r3, #0
 802a140:	9301      	str	r3, [sp, #4]
 802a142:	4b12      	ldr	r3, [pc, #72]	; (802a18c <lfs_fs_parent+0xa8>)
 802a144:	9300      	str	r3, [sp, #0]
 802a146:	4b12      	ldr	r3, [pc, #72]	; (802a190 <lfs_fs_parent+0xac>)
 802a148:	6879      	ldr	r1, [r7, #4]
 802a14a:	68f8      	ldr	r0, [r7, #12]
 802a14c:	f7fb f90c 	bl	8025368 <lfs_dir_fetchmatch>
 802a150:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 802a152:	6a3b      	ldr	r3, [r7, #32]
 802a154:	2b00      	cmp	r3, #0
 802a156:	d005      	beq.n	802a164 <lfs_fs_parent+0x80>
 802a158:	6a3b      	ldr	r3, [r7, #32]
 802a15a:	f113 0f02 	cmn.w	r3, #2
 802a15e:	d001      	beq.n	802a164 <lfs_fs_parent+0x80>
            return tag;
 802a160:	6a3b      	ldr	r3, [r7, #32]
 802a162:	e00c      	b.n	802a17e <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 802a164:	687b      	ldr	r3, [r7, #4]
 802a166:	3318      	adds	r3, #24
 802a168:	4618      	mov	r0, r3
 802a16a:	f7f9 fee0 	bl	8023f2e <lfs_pair_isnull>
 802a16e:	4603      	mov	r3, r0
 802a170:	f083 0301 	eor.w	r3, r3, #1
 802a174:	b2db      	uxtb	r3, r3
 802a176:	2b00      	cmp	r3, #0
 802a178:	d1c3      	bne.n	802a102 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a17a:	f06f 0301 	mvn.w	r3, #1
}
 802a17e:	4618      	mov	r0, r3
 802a180:	3728      	adds	r7, #40	; 0x28
 802a182:	46bd      	mov	sp, r7
 802a184:	bd80      	pop	{r7, pc}
 802a186:	bf00      	nop
 802a188:	0802a05f 	.word	0x0802a05f
 802a18c:	20000008 	.word	0x20000008
 802a190:	7ff003ff 	.word	0x7ff003ff

0802a194 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 802a194:	b590      	push	{r4, r7, lr}
 802a196:	b083      	sub	sp, #12
 802a198:	af00      	add	r7, sp, #0
 802a19a:	6078      	str	r0, [r7, #4]
 802a19c:	460b      	mov	r3, r1
 802a19e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 802a1a0:	687b      	ldr	r3, [r7, #4]
 802a1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a1a4:	4618      	mov	r0, r3
 802a1a6:	f7f9 ffd3 	bl	8024150 <lfs_tag_size>
 802a1aa:	4603      	mov	r3, r0
 802a1ac:	2b00      	cmp	r3, #0
 802a1ae:	d10a      	bne.n	802a1c6 <lfs_fs_preporphans+0x32>
 802a1b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a1b4:	2b00      	cmp	r3, #0
 802a1b6:	da06      	bge.n	802a1c6 <lfs_fs_preporphans+0x32>
 802a1b8:	4b10      	ldr	r3, [pc, #64]	; (802a1fc <lfs_fs_preporphans+0x68>)
 802a1ba:	4a11      	ldr	r2, [pc, #68]	; (802a200 <lfs_fs_preporphans+0x6c>)
 802a1bc:	f241 114c 	movw	r1, #4428	; 0x114c
 802a1c0:	4810      	ldr	r0, [pc, #64]	; (802a204 <lfs_fs_preporphans+0x70>)
 802a1c2:	f002 f9e3 	bl	802c58c <__assert_func>
    lfs->gstate.tag += orphans;
 802a1c6:	687b      	ldr	r3, [r7, #4]
 802a1c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802a1ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a1ce:	441a      	add	r2, r3
 802a1d0:	687b      	ldr	r3, [r7, #4]
 802a1d2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a1d4:	687b      	ldr	r3, [r7, #4]
 802a1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a1d8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 802a1dc:	687b      	ldr	r3, [r7, #4]
 802a1de:	3330      	adds	r3, #48	; 0x30
 802a1e0:	4618      	mov	r0, r3
 802a1e2:	f7fa f818 	bl	8024216 <lfs_gstate_hasorphans>
 802a1e6:	4603      	mov	r3, r0
 802a1e8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a1ea:	ea44 0203 	orr.w	r2, r4, r3
 802a1ee:	687b      	ldr	r3, [r7, #4]
 802a1f0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 802a1f2:	2300      	movs	r3, #0
}
 802a1f4:	4618      	mov	r0, r3
 802a1f6:	370c      	adds	r7, #12
 802a1f8:	46bd      	mov	sp, r7
 802a1fa:	bd90      	pop	{r4, r7, pc}
 802a1fc:	08033dc8 	.word	0x08033dc8
 802a200:	080349f0 	.word	0x080349f0
 802a204:	0803366c 	.word	0x0803366c

0802a208 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 802a208:	b480      	push	{r7}
 802a20a:	b085      	sub	sp, #20
 802a20c:	af00      	add	r7, sp, #0
 802a20e:	60f8      	str	r0, [r7, #12]
 802a210:	460b      	mov	r3, r1
 802a212:	607a      	str	r2, [r7, #4]
 802a214:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a216:	68fb      	ldr	r3, [r7, #12]
 802a218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a21a:	4a17      	ldr	r2, [pc, #92]	; (802a278 <lfs_fs_prepmove+0x70>)
 802a21c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 802a21e:	897b      	ldrh	r3, [r7, #10]
 802a220:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a224:	428b      	cmp	r3, r1
 802a226:	d006      	beq.n	802a236 <lfs_fs_prepmove+0x2e>
 802a228:	897b      	ldrh	r3, [r7, #10]
 802a22a:	029b      	lsls	r3, r3, #10
 802a22c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a230:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a234:	e000      	b.n	802a238 <lfs_fs_prepmove+0x30>
 802a236:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a238:	431a      	orrs	r2, r3
 802a23a:	68fb      	ldr	r3, [r7, #12]
 802a23c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 802a23e:	897b      	ldrh	r3, [r7, #10]
 802a240:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a244:	4293      	cmp	r3, r2
 802a246:	d002      	beq.n	802a24e <lfs_fs_prepmove+0x46>
 802a248:	687b      	ldr	r3, [r7, #4]
 802a24a:	681b      	ldr	r3, [r3, #0]
 802a24c:	e000      	b.n	802a250 <lfs_fs_prepmove+0x48>
 802a24e:	2300      	movs	r3, #0
 802a250:	68fa      	ldr	r2, [r7, #12]
 802a252:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 802a254:	897b      	ldrh	r3, [r7, #10]
 802a256:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a25a:	4293      	cmp	r3, r2
 802a25c:	d003      	beq.n	802a266 <lfs_fs_prepmove+0x5e>
 802a25e:	687b      	ldr	r3, [r7, #4]
 802a260:	3304      	adds	r3, #4
 802a262:	681b      	ldr	r3, [r3, #0]
 802a264:	e000      	b.n	802a268 <lfs_fs_prepmove+0x60>
 802a266:	2300      	movs	r3, #0
 802a268:	68fa      	ldr	r2, [r7, #12]
 802a26a:	6393      	str	r3, [r2, #56]	; 0x38
}
 802a26c:	bf00      	nop
 802a26e:	3714      	adds	r7, #20
 802a270:	46bd      	mov	sp, r7
 802a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a276:	4770      	bx	lr
 802a278:	800003ff 	.word	0x800003ff

0802a27c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 802a27c:	b5b0      	push	{r4, r5, r7, lr}
 802a27e:	b094      	sub	sp, #80	; 0x50
 802a280:	af04      	add	r7, sp, #16
 802a282:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 802a284:	687b      	ldr	r3, [r7, #4]
 802a286:	333c      	adds	r3, #60	; 0x3c
 802a288:	4618      	mov	r0, r3
 802a28a:	f7f9 ffe6 	bl	802425a <lfs_gstate_hasmove>
 802a28e:	4603      	mov	r3, r0
 802a290:	f083 0301 	eor.w	r3, r3, #1
 802a294:	b2db      	uxtb	r3, r3
 802a296:	2b00      	cmp	r3, #0
 802a298:	d001      	beq.n	802a29e <lfs_fs_demove+0x22>
        return 0;
 802a29a:	2300      	movs	r3, #0
 802a29c:	e049      	b.n	802a332 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802a29e:	687b      	ldr	r3, [r7, #4]
 802a2a0:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 802a2a2:	687b      	ldr	r3, [r7, #4]
 802a2a4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 802a2a6:	687b      	ldr	r3, [r7, #4]
 802a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a2aa:	4618      	mov	r0, r3
 802a2ac:	f7f9 ff40 	bl	8024130 <lfs_tag_id>
 802a2b0:	4603      	mov	r3, r0
 802a2b2:	461a      	mov	r2, r3
 802a2b4:	4b21      	ldr	r3, [pc, #132]	; (802a33c <lfs_fs_demove+0xc0>)
 802a2b6:	9302      	str	r3, [sp, #8]
 802a2b8:	9201      	str	r2, [sp, #4]
 802a2ba:	9400      	str	r4, [sp, #0]
 802a2bc:	462b      	mov	r3, r5
 802a2be:	f241 1266 	movw	r2, #4454	; 0x1166
 802a2c2:	491f      	ldr	r1, [pc, #124]	; (802a340 <lfs_fs_demove+0xc4>)
 802a2c4:	481f      	ldr	r0, [pc, #124]	; (802a344 <lfs_fs_demove+0xc8>)
 802a2c6:	f003 f99b 	bl	802d600 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802a2ca:	687b      	ldr	r3, [r7, #4]
 802a2cc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 802a2d0:	f107 0318 	add.w	r3, r7, #24
 802a2d4:	4619      	mov	r1, r3
 802a2d6:	6878      	ldr	r0, [r7, #4]
 802a2d8:	f7fb fbb4 	bl	8025a44 <lfs_dir_fetch>
 802a2dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 802a2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a2e0:	2b00      	cmp	r3, #0
 802a2e2:	d001      	beq.n	802a2e8 <lfs_fs_demove+0x6c>
        return err;
 802a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a2e6:	e024      	b.n	802a332 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 802a2e8:	687b      	ldr	r3, [r7, #4]
 802a2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a2ec:	4618      	mov	r0, r3
 802a2ee:	f7f9 ff1f 	bl	8024130 <lfs_tag_id>
 802a2f2:	4603      	mov	r3, r0
 802a2f4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a2f6:	2200      	movs	r2, #0
 802a2f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a2fc:	6878      	ldr	r0, [r7, #4]
 802a2fe:	f7ff ff83 	bl	802a208 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 802a302:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802a304:	029b      	lsls	r3, r3, #10
 802a306:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a30a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a30e:	613b      	str	r3, [r7, #16]
 802a310:	2300      	movs	r3, #0
 802a312:	617b      	str	r3, [r7, #20]
 802a314:	f107 0210 	add.w	r2, r7, #16
 802a318:	f107 0118 	add.w	r1, r7, #24
 802a31c:	2301      	movs	r3, #1
 802a31e:	6878      	ldr	r0, [r7, #4]
 802a320:	f7fd f9aa 	bl	8027678 <lfs_dir_commit>
 802a324:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 802a326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a328:	2b00      	cmp	r3, #0
 802a32a:	d001      	beq.n	802a330 <lfs_fs_demove+0xb4>
        return err;
 802a32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a32e:	e000      	b.n	802a332 <lfs_fs_demove+0xb6>
    }

    return 0;
 802a330:	2300      	movs	r3, #0
}
 802a332:	4618      	mov	r0, r3
 802a334:	3740      	adds	r7, #64	; 0x40
 802a336:	46bd      	mov	sp, r7
 802a338:	bdb0      	pop	{r4, r5, r7, pc}
 802a33a:	bf00      	nop
 802a33c:	08033780 	.word	0x08033780
 802a340:	0803366c 	.word	0x0803366c
 802a344:	08033dfc 	.word	0x08033dfc

0802a348 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 802a348:	b5b0      	push	{r4, r5, r7, lr}
 802a34a:	b0b2      	sub	sp, #200	; 0xc8
 802a34c:	af04      	add	r7, sp, #16
 802a34e:	6078      	str	r0, [r7, #4]
 802a350:	460b      	mov	r3, r1
 802a352:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	3330      	adds	r3, #48	; 0x30
 802a358:	4618      	mov	r0, r3
 802a35a:	f7f9 ff5c 	bl	8024216 <lfs_gstate_hasorphans>
 802a35e:	4603      	mov	r3, r0
 802a360:	f083 0301 	eor.w	r3, r3, #1
 802a364:	b2db      	uxtb	r3, r3
 802a366:	2b00      	cmp	r3, #0
 802a368:	d001      	beq.n	802a36e <lfs_fs_deorphan+0x26>
        return 0;
 802a36a:	2300      	movs	r3, #0
 802a36c:	e17c      	b.n	802a668 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 802a36e:	2300      	movs	r3, #0
 802a370:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802a374:	f107 030c 	add.w	r3, r7, #12
 802a378:	2220      	movs	r2, #32
 802a37a:	2100      	movs	r1, #0
 802a37c:	4618      	mov	r0, r3
 802a37e:	f003 fad5 	bl	802d92c <memset>
 802a382:	2301      	movs	r3, #1
 802a384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802a388:	2301      	movs	r3, #1
 802a38a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802a38c:	e148      	b.n	802a620 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802a38e:	f107 030c 	add.w	r3, r7, #12
 802a392:	f103 0218 	add.w	r2, r3, #24
 802a396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a39a:	4619      	mov	r1, r3
 802a39c:	6878      	ldr	r0, [r7, #4]
 802a39e:	f7fb fb51 	bl	8025a44 <lfs_dir_fetch>
 802a3a2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 802a3a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a3aa:	2b00      	cmp	r3, #0
 802a3ac:	d002      	beq.n	802a3b4 <lfs_fs_deorphan+0x6c>
                return err;
 802a3ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a3b2:	e159      	b.n	802a668 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 802a3b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802a3b8:	f083 0301 	eor.w	r3, r3, #1
 802a3bc:	b2db      	uxtb	r3, r3
 802a3be:	2b00      	cmp	r3, #0
 802a3c0:	f000 8124 	beq.w	802a60c <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 802a3c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802a3c8:	f107 030c 	add.w	r3, r7, #12
 802a3cc:	3318      	adds	r3, #24
 802a3ce:	4619      	mov	r1, r3
 802a3d0:	6878      	ldr	r0, [r7, #4]
 802a3d2:	f7ff fe87 	bl	802a0e4 <lfs_fs_parent>
 802a3d6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 802a3da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3de:	2b00      	cmp	r3, #0
 802a3e0:	da07      	bge.n	802a3f2 <lfs_fs_deorphan+0xaa>
 802a3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3e6:	f113 0f02 	cmn.w	r3, #2
 802a3ea:	d002      	beq.n	802a3f2 <lfs_fs_deorphan+0xaa>
                    return tag;
 802a3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3f0:	e13a      	b.n	802a668 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 802a3f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3f6:	f113 0f02 	cmn.w	r3, #2
 802a3fa:	d157      	bne.n	802a4ac <lfs_fs_deorphan+0x164>
 802a3fc:	78fb      	ldrb	r3, [r7, #3]
 802a3fe:	2b00      	cmp	r3, #0
 802a400:	d054      	beq.n	802a4ac <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 802a402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a406:	499a      	ldr	r1, [pc, #616]	; (802a670 <lfs_fs_deorphan+0x328>)
 802a408:	9101      	str	r1, [sp, #4]
 802a40a:	9300      	str	r3, [sp, #0]
 802a40c:	4613      	mov	r3, r2
 802a40e:	f241 12a1 	movw	r2, #4513	; 0x11a1
 802a412:	4998      	ldr	r1, [pc, #608]	; (802a674 <lfs_fs_deorphan+0x32c>)
 802a414:	4898      	ldr	r0, [pc, #608]	; (802a678 <lfs_fs_deorphan+0x330>)
 802a416:	f003 f8f3 	bl	802d600 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 802a41a:	687b      	ldr	r3, [r7, #4]
 802a41c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802a420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a424:	4619      	mov	r1, r3
 802a426:	6878      	ldr	r0, [r7, #4]
 802a428:	f7fb fb28 	bl	8025a7c <lfs_dir_getgstate>
 802a42c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 802a430:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a434:	2b00      	cmp	r3, #0
 802a436:	d002      	beq.n	802a43e <lfs_fs_deorphan+0xf6>
                        return err;
 802a438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a43c:	e114      	b.n	802a668 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 802a43e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a442:	3318      	adds	r3, #24
 802a444:	4618      	mov	r0, r3
 802a446:	f7f9 fdfe 	bl	8024046 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a44a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a44e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802a452:	051a      	lsls	r2, r3, #20
 802a454:	4b89      	ldr	r3, [pc, #548]	; (802a67c <lfs_fs_deorphan+0x334>)
 802a456:	4313      	orrs	r3, r2
 802a458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a45c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a460:	3318      	adds	r3, #24
 802a462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a466:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 802a46a:	f107 010c 	add.w	r1, r7, #12
 802a46e:	2301      	movs	r3, #1
 802a470:	6878      	ldr	r0, [r7, #4]
 802a472:	f7fc fe07 	bl	8027084 <lfs_dir_orphaningcommit>
 802a476:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 802a47a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a47e:	3318      	adds	r3, #24
 802a480:	4618      	mov	r0, r3
 802a482:	f7f9 fdc6 	bl	8024012 <lfs_pair_fromle32>
                    if (state < 0) {
 802a486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a48a:	2b00      	cmp	r3, #0
 802a48c:	da02      	bge.n	802a494 <lfs_fs_deorphan+0x14c>
                        return state;
 802a48e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 802a492:	e0e9      	b.n	802a668 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 802a494:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a498:	3301      	adds	r3, #1
 802a49a:	b2db      	uxtb	r3, r3
 802a49c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 802a4a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a4a4:	2b03      	cmp	r3, #3
 802a4a6:	f040 80af 	bne.w	802a608 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 802a4aa:	e763      	b.n	802a374 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 802a4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a4b0:	f113 0f02 	cmn.w	r3, #2
 802a4b4:	f000 80aa 	beq.w	802a60c <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802a4b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802a4bc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802a4c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a4c4:	9300      	str	r3, [sp, #0]
 802a4c6:	4613      	mov	r3, r2
 802a4c8:	4a6d      	ldr	r2, [pc, #436]	; (802a680 <lfs_fs_deorphan+0x338>)
 802a4ca:	6878      	ldr	r0, [r7, #4]
 802a4cc:	f7fa fa1a 	bl	8024904 <lfs_dir_get>
 802a4d0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 802a4d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a4d8:	2b00      	cmp	r3, #0
 802a4da:	da02      	bge.n	802a4e2 <lfs_fs_deorphan+0x19a>
                        return state;
 802a4dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a4e0:	e0c2      	b.n	802a668 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 802a4e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a4e6:	4618      	mov	r0, r3
 802a4e8:	f7f9 fd93 	bl	8024012 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 802a4ec:	f107 030c 	add.w	r3, r7, #12
 802a4f0:	f103 0218 	add.w	r2, r3, #24
 802a4f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a4f8:	4611      	mov	r1, r2
 802a4fa:	4618      	mov	r0, r3
 802a4fc:	f7f9 fd5c 	bl	8023fb8 <lfs_pair_sync>
 802a500:	4603      	mov	r3, r0
 802a502:	f083 0301 	eor.w	r3, r3, #1
 802a506:	b2db      	uxtb	r3, r3
 802a508:	2b00      	cmp	r3, #0
 802a50a:	d07f      	beq.n	802a60c <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 802a50c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a510:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802a514:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802a518:	4c55      	ldr	r4, [pc, #340]	; (802a670 <lfs_fs_deorphan+0x328>)
 802a51a:	9403      	str	r4, [sp, #12]
 802a51c:	9102      	str	r1, [sp, #8]
 802a51e:	9201      	str	r2, [sp, #4]
 802a520:	9300      	str	r3, [sp, #0]
 802a522:	4603      	mov	r3, r0
 802a524:	f241 12ca 	movw	r2, #4554	; 0x11ca
 802a528:	4952      	ldr	r1, [pc, #328]	; (802a674 <lfs_fs_deorphan+0x32c>)
 802a52a:	4856      	ldr	r0, [pc, #344]	; (802a684 <lfs_fs_deorphan+0x33c>)
 802a52c:	f003 f868 	bl	802d600 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802a530:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802a534:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802a538:	687b      	ldr	r3, [r7, #4]
 802a53a:	3330      	adds	r3, #48	; 0x30
 802a53c:	f107 020c 	add.w	r2, r7, #12
 802a540:	4611      	mov	r1, r2
 802a542:	4618      	mov	r0, r3
 802a544:	f7f9 fe9c 	bl	8024280 <lfs_gstate_hasmovehere>
 802a548:	4603      	mov	r3, r0
 802a54a:	2b00      	cmp	r3, #0
 802a54c:	d01c      	beq.n	802a588 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802a54e:	687b      	ldr	r3, [r7, #4]
 802a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a552:	4618      	mov	r0, r3
 802a554:	f7f9 fdec 	bl	8024130 <lfs_tag_id>
 802a558:	4603      	mov	r3, r0
 802a55a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 802a55e:	68f9      	ldr	r1, [r7, #12]
 802a560:	693b      	ldr	r3, [r7, #16]
 802a562:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802a566:	4842      	ldr	r0, [pc, #264]	; (802a670 <lfs_fs_deorphan+0x328>)
 802a568:	9002      	str	r0, [sp, #8]
 802a56a:	9201      	str	r2, [sp, #4]
 802a56c:	9300      	str	r3, [sp, #0]
 802a56e:	460b      	mov	r3, r1
 802a570:	f241 12d5 	movw	r2, #4565	; 0x11d5
 802a574:	493f      	ldr	r1, [pc, #252]	; (802a674 <lfs_fs_deorphan+0x32c>)
 802a576:	4844      	ldr	r0, [pc, #272]	; (802a688 <lfs_fs_deorphan+0x340>)
 802a578:	f003 f842 	bl	802d600 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a57c:	2200      	movs	r2, #0
 802a57e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a582:	6878      	ldr	r0, [r7, #4]
 802a584:	f7ff fe40 	bl	802a208 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a588:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a58c:	4618      	mov	r0, r3
 802a58e:	f7f9 fd5a 	bl	8024046 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a592:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a596:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a59a:	4293      	cmp	r3, r2
 802a59c:	d007      	beq.n	802a5ae <lfs_fs_deorphan+0x266>
 802a59e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a5a2:	029b      	lsls	r3, r3, #10
 802a5a4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a5a8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a5ac:	e000      	b.n	802a5b0 <lfs_fs_deorphan+0x268>
 802a5ae:	2300      	movs	r3, #0
 802a5b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a5b2:	2300      	movs	r3, #0
 802a5b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a5b8:	4b34      	ldr	r3, [pc, #208]	; (802a68c <lfs_fs_deorphan+0x344>)
 802a5ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a5be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a5c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a5c6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a5ca:	f107 010c 	add.w	r1, r7, #12
 802a5ce:	2302      	movs	r3, #2
 802a5d0:	6878      	ldr	r0, [r7, #4]
 802a5d2:	f7fc fd57 	bl	8027084 <lfs_dir_orphaningcommit>
 802a5d6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a5da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a5de:	4618      	mov	r0, r3
 802a5e0:	f7f9 fd17 	bl	8024012 <lfs_pair_fromle32>
                        if (state < 0) {
 802a5e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a5e8:	2b00      	cmp	r3, #0
 802a5ea:	da02      	bge.n	802a5f2 <lfs_fs_deorphan+0x2aa>
                            return state;
 802a5ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 802a5f0:	e03a      	b.n	802a668 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a5f2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a5f6:	3301      	adds	r3, #1
 802a5f8:	b2db      	uxtb	r3, r3
 802a5fa:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a5fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a602:	2b03      	cmp	r3, #3
 802a604:	d10c      	bne.n	802a620 <lfs_fs_deorphan+0x2d8>
 802a606:	e6b5      	b.n	802a374 <lfs_fs_deorphan+0x2c>
                    continue;
 802a608:	bf00      	nop
 802a60a:	e009      	b.n	802a620 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a60c:	f107 040c 	add.w	r4, r7, #12
 802a610:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 802a614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a618:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a61c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 802a620:	f107 030c 	add.w	r3, r7, #12
 802a624:	3318      	adds	r3, #24
 802a626:	4618      	mov	r0, r3
 802a628:	f7f9 fc81 	bl	8023f2e <lfs_pair_isnull>
 802a62c:	4603      	mov	r3, r0
 802a62e:	f083 0301 	eor.w	r3, r3, #1
 802a632:	b2db      	uxtb	r3, r3
 802a634:	2b00      	cmp	r3, #0
 802a636:	f47f aeaa 	bne.w	802a38e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a63a:	687b      	ldr	r3, [r7, #4]
 802a63c:	3330      	adds	r3, #48	; 0x30
 802a63e:	4618      	mov	r0, r3
 802a640:	f7f9 fdfc 	bl	802423c <lfs_gstate_getorphans>
 802a644:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a646:	461a      	mov	r2, r3
 802a648:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 802a64c:	4619      	mov	r1, r3
 802a64e:	4610      	mov	r0, r2
 802a650:	f7f9 f858 	bl	8023704 <lfs_min>
 802a654:	4603      	mov	r3, r0
 802a656:	b2db      	uxtb	r3, r3
 802a658:	425b      	negs	r3, r3
 802a65a:	b2db      	uxtb	r3, r3
 802a65c:	b25b      	sxtb	r3, r3
 802a65e:	4619      	mov	r1, r3
 802a660:	6878      	ldr	r0, [r7, #4]
 802a662:	f7ff fd97 	bl	802a194 <lfs_fs_preporphans>
 802a666:	4603      	mov	r3, r0
            found));
}
 802a668:	4618      	mov	r0, r3
 802a66a:	37b8      	adds	r7, #184	; 0xb8
 802a66c:	46bd      	mov	sp, r7
 802a66e:	bdb0      	pop	{r4, r5, r7, pc}
 802a670:	08033780 	.word	0x08033780
 802a674:	0803366c 	.word	0x0803366c
 802a678:	08033e30 	.word	0x08033e30
 802a67c:	000ffc08 	.word	0x000ffc08
 802a680:	7ffffc00 	.word	0x7ffffc00
 802a684:	08033e60 	.word	0x08033e60
 802a688:	08033ea4 	.word	0x08033ea4
 802a68c:	600ffc08 	.word	0x600ffc08

0802a690 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a690:	b580      	push	{r7, lr}
 802a692:	b084      	sub	sp, #16
 802a694:	af00      	add	r7, sp, #0
 802a696:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a698:	6878      	ldr	r0, [r7, #4]
 802a69a:	f7ff fdef 	bl	802a27c <lfs_fs_demove>
 802a69e:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a6a0:	68fb      	ldr	r3, [r7, #12]
 802a6a2:	2b00      	cmp	r3, #0
 802a6a4:	d001      	beq.n	802a6aa <lfs_fs_forceconsistency+0x1a>
        return err;
 802a6a6:	68fb      	ldr	r3, [r7, #12]
 802a6a8:	e00a      	b.n	802a6c0 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a6aa:	2101      	movs	r1, #1
 802a6ac:	6878      	ldr	r0, [r7, #4]
 802a6ae:	f7ff fe4b 	bl	802a348 <lfs_fs_deorphan>
 802a6b2:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a6b4:	68fb      	ldr	r3, [r7, #12]
 802a6b6:	2b00      	cmp	r3, #0
 802a6b8:	d001      	beq.n	802a6be <lfs_fs_forceconsistency+0x2e>
        return err;
 802a6ba:	68fb      	ldr	r3, [r7, #12]
 802a6bc:	e000      	b.n	802a6c0 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a6be:	2300      	movs	r3, #0
}
 802a6c0:	4618      	mov	r0, r3
 802a6c2:	3710      	adds	r7, #16
 802a6c4:	46bd      	mov	sp, r7
 802a6c6:	bd80      	pop	{r7, pc}

0802a6c8 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a6c8:	b480      	push	{r7}
 802a6ca:	b085      	sub	sp, #20
 802a6cc:	af00      	add	r7, sp, #0
 802a6ce:	6078      	str	r0, [r7, #4]
 802a6d0:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a6d2:	687b      	ldr	r3, [r7, #4]
 802a6d4:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a6d6:	68fb      	ldr	r3, [r7, #12]
 802a6d8:	681b      	ldr	r3, [r3, #0]
 802a6da:	1c5a      	adds	r2, r3, #1
 802a6dc:	68fb      	ldr	r3, [r7, #12]
 802a6de:	601a      	str	r2, [r3, #0]
    return 0;
 802a6e0:	2300      	movs	r3, #0
}
 802a6e2:	4618      	mov	r0, r3
 802a6e4:	3714      	adds	r7, #20
 802a6e6:	46bd      	mov	sp, r7
 802a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6ec:	4770      	bx	lr
	...

0802a6f0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a6f0:	b580      	push	{r7, lr}
 802a6f2:	b084      	sub	sp, #16
 802a6f4:	af00      	add	r7, sp, #0
 802a6f6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a6f8:	2300      	movs	r3, #0
 802a6fa:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a6fc:	f107 0208 	add.w	r2, r7, #8
 802a700:	2300      	movs	r3, #0
 802a702:	4907      	ldr	r1, [pc, #28]	; (802a720 <lfs_fs_rawsize+0x30>)
 802a704:	6878      	ldr	r0, [r7, #4]
 802a706:	f7ff fb3f 	bl	8029d88 <lfs_fs_rawtraverse>
 802a70a:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a70c:	68fb      	ldr	r3, [r7, #12]
 802a70e:	2b00      	cmp	r3, #0
 802a710:	d001      	beq.n	802a716 <lfs_fs_rawsize+0x26>
        return err;
 802a712:	68fb      	ldr	r3, [r7, #12]
 802a714:	e000      	b.n	802a718 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a716:	68bb      	ldr	r3, [r7, #8]
}
 802a718:	4618      	mov	r0, r3
 802a71a:	3710      	adds	r7, #16
 802a71c:	46bd      	mov	sp, r7
 802a71e:	bd80      	pop	{r7, pc}
 802a720:	0802a6c9 	.word	0x0802a6c9

0802a724 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a724:	b580      	push	{r7, lr}
 802a726:	b084      	sub	sp, #16
 802a728:	af00      	add	r7, sp, #0
 802a72a:	6078      	str	r0, [r7, #4]
 802a72c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a72e:	2300      	movs	r3, #0
 802a730:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a732:	68fb      	ldr	r3, [r7, #12]
 802a734:	2b00      	cmp	r3, #0
 802a736:	d001      	beq.n	802a73c <lfs_format+0x18>
        return err;
 802a738:	68fb      	ldr	r3, [r7, #12]
 802a73a:	e005      	b.n	802a748 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a73c:	6839      	ldr	r1, [r7, #0]
 802a73e:	6878      	ldr	r0, [r7, #4]
 802a740:	f7ff f8ca 	bl	80298d8 <lfs_rawformat>
 802a744:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a746:	68fb      	ldr	r3, [r7, #12]
}
 802a748:	4618      	mov	r0, r3
 802a74a:	3710      	adds	r7, #16
 802a74c:	46bd      	mov	sp, r7
 802a74e:	bd80      	pop	{r7, pc}

0802a750 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a750:	b580      	push	{r7, lr}
 802a752:	b084      	sub	sp, #16
 802a754:	af00      	add	r7, sp, #0
 802a756:	6078      	str	r0, [r7, #4]
 802a758:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a75a:	2300      	movs	r3, #0
 802a75c:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a75e:	68fb      	ldr	r3, [r7, #12]
 802a760:	2b00      	cmp	r3, #0
 802a762:	d001      	beq.n	802a768 <lfs_mount+0x18>
        return err;
 802a764:	68fb      	ldr	r3, [r7, #12]
 802a766:	e005      	b.n	802a774 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802a768:	6839      	ldr	r1, [r7, #0]
 802a76a:	6878      	ldr	r0, [r7, #4]
 802a76c:	f7ff f954 	bl	8029a18 <lfs_rawmount>
 802a770:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a772:	68fb      	ldr	r3, [r7, #12]
}
 802a774:	4618      	mov	r0, r3
 802a776:	3710      	adds	r7, #16
 802a778:	46bd      	mov	sp, r7
 802a77a:	bd80      	pop	{r7, pc}

0802a77c <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802a77c:	b580      	push	{r7, lr}
 802a77e:	b084      	sub	sp, #16
 802a780:	af00      	add	r7, sp, #0
 802a782:	6078      	str	r0, [r7, #4]
 802a784:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a786:	2300      	movs	r3, #0
 802a788:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a78a:	68fb      	ldr	r3, [r7, #12]
 802a78c:	2b00      	cmp	r3, #0
 802a78e:	d001      	beq.n	802a794 <lfs_remove+0x18>
        return err;
 802a790:	68fb      	ldr	r3, [r7, #12]
 802a792:	e005      	b.n	802a7a0 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802a794:	6839      	ldr	r1, [r7, #0]
 802a796:	6878      	ldr	r0, [r7, #4]
 802a798:	f7fe fbd0 	bl	8028f3c <lfs_rawremove>
 802a79c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a79e:	68fb      	ldr	r3, [r7, #12]
}
 802a7a0:	4618      	mov	r0, r3
 802a7a2:	3710      	adds	r7, #16
 802a7a4:	46bd      	mov	sp, r7
 802a7a6:	bd80      	pop	{r7, pc}

0802a7a8 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802a7a8:	b580      	push	{r7, lr}
 802a7aa:	b086      	sub	sp, #24
 802a7ac:	af00      	add	r7, sp, #0
 802a7ae:	60f8      	str	r0, [r7, #12]
 802a7b0:	60b9      	str	r1, [r7, #8]
 802a7b2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a7b4:	2300      	movs	r3, #0
 802a7b6:	617b      	str	r3, [r7, #20]
    if (err) {
 802a7b8:	697b      	ldr	r3, [r7, #20]
 802a7ba:	2b00      	cmp	r3, #0
 802a7bc:	d001      	beq.n	802a7c2 <lfs_rename+0x1a>
        return err;
 802a7be:	697b      	ldr	r3, [r7, #20]
 802a7c0:	e006      	b.n	802a7d0 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802a7c2:	687a      	ldr	r2, [r7, #4]
 802a7c4:	68b9      	ldr	r1, [r7, #8]
 802a7c6:	68f8      	ldr	r0, [r7, #12]
 802a7c8:	f7fe fc92 	bl	80290f0 <lfs_rawrename>
 802a7cc:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a7ce:	697b      	ldr	r3, [r7, #20]
}
 802a7d0:	4618      	mov	r0, r3
 802a7d2:	3718      	adds	r7, #24
 802a7d4:	46bd      	mov	sp, r7
 802a7d6:	bd80      	pop	{r7, pc}

0802a7d8 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802a7d8:	b580      	push	{r7, lr}
 802a7da:	b086      	sub	sp, #24
 802a7dc:	af00      	add	r7, sp, #0
 802a7de:	60f8      	str	r0, [r7, #12]
 802a7e0:	60b9      	str	r1, [r7, #8]
 802a7e2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a7e4:	2300      	movs	r3, #0
 802a7e6:	617b      	str	r3, [r7, #20]
    if (err) {
 802a7e8:	697b      	ldr	r3, [r7, #20]
 802a7ea:	2b00      	cmp	r3, #0
 802a7ec:	d001      	beq.n	802a7f2 <lfs_stat+0x1a>
        return err;
 802a7ee:	697b      	ldr	r3, [r7, #20]
 802a7f0:	e006      	b.n	802a800 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802a7f2:	687a      	ldr	r2, [r7, #4]
 802a7f4:	68b9      	ldr	r1, [r7, #8]
 802a7f6:	68f8      	ldr	r0, [r7, #12]
 802a7f8:	f7fe fb7a 	bl	8028ef0 <lfs_rawstat>
 802a7fc:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a7fe:	697b      	ldr	r3, [r7, #20]
}
 802a800:	4618      	mov	r0, r3
 802a802:	3718      	adds	r7, #24
 802a804:	46bd      	mov	sp, r7
 802a806:	bd80      	pop	{r7, pc}

0802a808 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802a808:	b580      	push	{r7, lr}
 802a80a:	b088      	sub	sp, #32
 802a80c:	af02      	add	r7, sp, #8
 802a80e:	60f8      	str	r0, [r7, #12]
 802a810:	60b9      	str	r1, [r7, #8]
 802a812:	607a      	str	r2, [r7, #4]
 802a814:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a816:	2300      	movs	r3, #0
 802a818:	617b      	str	r3, [r7, #20]
    if (err) {
 802a81a:	697b      	ldr	r3, [r7, #20]
 802a81c:	2b00      	cmp	r3, #0
 802a81e:	d001      	beq.n	802a824 <lfs_file_opencfg+0x1c>
        return err;
 802a820:	697b      	ldr	r3, [r7, #20]
 802a822:	e01c      	b.n	802a85e <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a824:	68fb      	ldr	r3, [r7, #12]
 802a826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a828:	68b9      	ldr	r1, [r7, #8]
 802a82a:	4618      	mov	r0, r3
 802a82c:	f7f9 fe28 	bl	8024480 <lfs_mlist_isopen>
 802a830:	4603      	mov	r3, r0
 802a832:	f083 0301 	eor.w	r3, r3, #1
 802a836:	b2db      	uxtb	r3, r3
 802a838:	2b00      	cmp	r3, #0
 802a83a:	d106      	bne.n	802a84a <lfs_file_opencfg+0x42>
 802a83c:	4b0a      	ldr	r3, [pc, #40]	; (802a868 <lfs_file_opencfg+0x60>)
 802a83e:	4a0b      	ldr	r2, [pc, #44]	; (802a86c <lfs_file_opencfg+0x64>)
 802a840:	f241 517b 	movw	r1, #5499	; 0x157b
 802a844:	480a      	ldr	r0, [pc, #40]	; (802a870 <lfs_file_opencfg+0x68>)
 802a846:	f001 fea1 	bl	802c58c <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802a84a:	6a3b      	ldr	r3, [r7, #32]
 802a84c:	9300      	str	r3, [sp, #0]
 802a84e:	683b      	ldr	r3, [r7, #0]
 802a850:	687a      	ldr	r2, [r7, #4]
 802a852:	68b9      	ldr	r1, [r7, #8]
 802a854:	68f8      	ldr	r0, [r7, #12]
 802a856:	f7fd fba9 	bl	8027fac <lfs_file_rawopencfg>
 802a85a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a85c:	697b      	ldr	r3, [r7, #20]
}
 802a85e:	4618      	mov	r0, r3
 802a860:	3718      	adds	r7, #24
 802a862:	46bd      	mov	sp, r7
 802a864:	bd80      	pop	{r7, pc}
 802a866:	bf00      	nop
 802a868:	08033eec 	.word	0x08033eec
 802a86c:	08034a04 	.word	0x08034a04
 802a870:	0803366c 	.word	0x0803366c

0802a874 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802a874:	b580      	push	{r7, lr}
 802a876:	b084      	sub	sp, #16
 802a878:	af00      	add	r7, sp, #0
 802a87a:	6078      	str	r0, [r7, #4]
 802a87c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a87e:	2300      	movs	r3, #0
 802a880:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a882:	68fb      	ldr	r3, [r7, #12]
 802a884:	2b00      	cmp	r3, #0
 802a886:	d001      	beq.n	802a88c <lfs_file_close+0x18>
        return err;
 802a888:	68fb      	ldr	r3, [r7, #12]
 802a88a:	e015      	b.n	802a8b8 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a88c:	687b      	ldr	r3, [r7, #4]
 802a88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a890:	6839      	ldr	r1, [r7, #0]
 802a892:	4618      	mov	r0, r3
 802a894:	f7f9 fdf4 	bl	8024480 <lfs_mlist_isopen>
 802a898:	4603      	mov	r3, r0
 802a89a:	2b00      	cmp	r3, #0
 802a89c:	d106      	bne.n	802a8ac <lfs_file_close+0x38>
 802a89e:	4b08      	ldr	r3, [pc, #32]	; (802a8c0 <lfs_file_close+0x4c>)
 802a8a0:	4a08      	ldr	r2, [pc, #32]	; (802a8c4 <lfs_file_close+0x50>)
 802a8a2:	f241 518a 	movw	r1, #5514	; 0x158a
 802a8a6:	4808      	ldr	r0, [pc, #32]	; (802a8c8 <lfs_file_close+0x54>)
 802a8a8:	f001 fe70 	bl	802c58c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802a8ac:	6839      	ldr	r1, [r7, #0]
 802a8ae:	6878      	ldr	r0, [r7, #4]
 802a8b0:	f7fd fd4c 	bl	802834c <lfs_file_rawclose>
 802a8b4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a8b6:	68fb      	ldr	r3, [r7, #12]
}
 802a8b8:	4618      	mov	r0, r3
 802a8ba:	3710      	adds	r7, #16
 802a8bc:	46bd      	mov	sp, r7
 802a8be:	bd80      	pop	{r7, pc}
 802a8c0:	08033f24 	.word	0x08033f24
 802a8c4:	08034a18 	.word	0x08034a18
 802a8c8:	0803366c 	.word	0x0803366c

0802a8cc <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802a8cc:	b580      	push	{r7, lr}
 802a8ce:	b086      	sub	sp, #24
 802a8d0:	af00      	add	r7, sp, #0
 802a8d2:	60f8      	str	r0, [r7, #12]
 802a8d4:	60b9      	str	r1, [r7, #8]
 802a8d6:	607a      	str	r2, [r7, #4]
 802a8d8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a8da:	2300      	movs	r3, #0
 802a8dc:	617b      	str	r3, [r7, #20]
    if (err) {
 802a8de:	697b      	ldr	r3, [r7, #20]
 802a8e0:	2b00      	cmp	r3, #0
 802a8e2:	d001      	beq.n	802a8e8 <lfs_file_read+0x1c>
        return err;
 802a8e4:	697b      	ldr	r3, [r7, #20]
 802a8e6:	e017      	b.n	802a918 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a8e8:	68fb      	ldr	r3, [r7, #12]
 802a8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a8ec:	68b9      	ldr	r1, [r7, #8]
 802a8ee:	4618      	mov	r0, r3
 802a8f0:	f7f9 fdc6 	bl	8024480 <lfs_mlist_isopen>
 802a8f4:	4603      	mov	r3, r0
 802a8f6:	2b00      	cmp	r3, #0
 802a8f8:	d106      	bne.n	802a908 <lfs_file_read+0x3c>
 802a8fa:	4b09      	ldr	r3, [pc, #36]	; (802a920 <lfs_file_read+0x54>)
 802a8fc:	4a09      	ldr	r2, [pc, #36]	; (802a924 <lfs_file_read+0x58>)
 802a8fe:	f241 51ac 	movw	r1, #5548	; 0x15ac
 802a902:	4809      	ldr	r0, [pc, #36]	; (802a928 <lfs_file_read+0x5c>)
 802a904:	f001 fe42 	bl	802c58c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802a908:	683b      	ldr	r3, [r7, #0]
 802a90a:	687a      	ldr	r2, [r7, #4]
 802a90c:	68b9      	ldr	r1, [r7, #8]
 802a90e:	68f8      	ldr	r0, [r7, #12]
 802a910:	f7fe f868 	bl	80289e4 <lfs_file_rawread>
 802a914:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a916:	693b      	ldr	r3, [r7, #16]
}
 802a918:	4618      	mov	r0, r3
 802a91a:	3718      	adds	r7, #24
 802a91c:	46bd      	mov	sp, r7
 802a91e:	bd80      	pop	{r7, pc}
 802a920:	08033f24 	.word	0x08033f24
 802a924:	08034a28 	.word	0x08034a28
 802a928:	0803366c 	.word	0x0803366c

0802a92c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802a92c:	b580      	push	{r7, lr}
 802a92e:	b086      	sub	sp, #24
 802a930:	af00      	add	r7, sp, #0
 802a932:	60f8      	str	r0, [r7, #12]
 802a934:	60b9      	str	r1, [r7, #8]
 802a936:	607a      	str	r2, [r7, #4]
 802a938:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a93a:	2300      	movs	r3, #0
 802a93c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a93e:	697b      	ldr	r3, [r7, #20]
 802a940:	2b00      	cmp	r3, #0
 802a942:	d001      	beq.n	802a948 <lfs_file_write+0x1c>
        return err;
 802a944:	697b      	ldr	r3, [r7, #20]
 802a946:	e017      	b.n	802a978 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a948:	68fb      	ldr	r3, [r7, #12]
 802a94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a94c:	68b9      	ldr	r1, [r7, #8]
 802a94e:	4618      	mov	r0, r3
 802a950:	f7f9 fd96 	bl	8024480 <lfs_mlist_isopen>
 802a954:	4603      	mov	r3, r0
 802a956:	2b00      	cmp	r3, #0
 802a958:	d106      	bne.n	802a968 <lfs_file_write+0x3c>
 802a95a:	4b09      	ldr	r3, [pc, #36]	; (802a980 <lfs_file_write+0x54>)
 802a95c:	4a09      	ldr	r2, [pc, #36]	; (802a984 <lfs_file_write+0x58>)
 802a95e:	f241 51be 	movw	r1, #5566	; 0x15be
 802a962:	4809      	ldr	r0, [pc, #36]	; (802a988 <lfs_file_write+0x5c>)
 802a964:	f001 fe12 	bl	802c58c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802a968:	683b      	ldr	r3, [r7, #0]
 802a96a:	687a      	ldr	r2, [r7, #4]
 802a96c:	68b9      	ldr	r1, [r7, #8]
 802a96e:	68f8      	ldr	r0, [r7, #12]
 802a970:	f7fe f996 	bl	8028ca0 <lfs_file_rawwrite>
 802a974:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a976:	693b      	ldr	r3, [r7, #16]
}
 802a978:	4618      	mov	r0, r3
 802a97a:	3718      	adds	r7, #24
 802a97c:	46bd      	mov	sp, r7
 802a97e:	bd80      	pop	{r7, pc}
 802a980:	08033f24 	.word	0x08033f24
 802a984:	08034a38 	.word	0x08034a38
 802a988:	0803366c 	.word	0x0803366c

0802a98c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802a98c:	b580      	push	{r7, lr}
 802a98e:	b086      	sub	sp, #24
 802a990:	af00      	add	r7, sp, #0
 802a992:	60f8      	str	r0, [r7, #12]
 802a994:	60b9      	str	r1, [r7, #8]
 802a996:	607a      	str	r2, [r7, #4]
 802a998:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a99a:	2300      	movs	r3, #0
 802a99c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a99e:	697b      	ldr	r3, [r7, #20]
 802a9a0:	2b00      	cmp	r3, #0
 802a9a2:	d001      	beq.n	802a9a8 <lfs_file_seek+0x1c>
        return err;
 802a9a4:	697b      	ldr	r3, [r7, #20]
 802a9a6:	e017      	b.n	802a9d8 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a9a8:	68fb      	ldr	r3, [r7, #12]
 802a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a9ac:	68b9      	ldr	r1, [r7, #8]
 802a9ae:	4618      	mov	r0, r3
 802a9b0:	f7f9 fd66 	bl	8024480 <lfs_mlist_isopen>
 802a9b4:	4603      	mov	r3, r0
 802a9b6:	2b00      	cmp	r3, #0
 802a9b8:	d106      	bne.n	802a9c8 <lfs_file_seek+0x3c>
 802a9ba:	4b09      	ldr	r3, [pc, #36]	; (802a9e0 <lfs_file_seek+0x54>)
 802a9bc:	4a09      	ldr	r2, [pc, #36]	; (802a9e4 <lfs_file_seek+0x58>)
 802a9be:	f241 51d0 	movw	r1, #5584	; 0x15d0
 802a9c2:	4809      	ldr	r0, [pc, #36]	; (802a9e8 <lfs_file_seek+0x5c>)
 802a9c4:	f001 fde2 	bl	802c58c <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802a9c8:	683b      	ldr	r3, [r7, #0]
 802a9ca:	687a      	ldr	r2, [r7, #4]
 802a9cc:	68b9      	ldr	r1, [r7, #8]
 802a9ce:	68f8      	ldr	r0, [r7, #12]
 802a9d0:	f7fe f9ea 	bl	8028da8 <lfs_file_rawseek>
 802a9d4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a9d6:	693b      	ldr	r3, [r7, #16]
}
 802a9d8:	4618      	mov	r0, r3
 802a9da:	3718      	adds	r7, #24
 802a9dc:	46bd      	mov	sp, r7
 802a9de:	bd80      	pop	{r7, pc}
 802a9e0:	08033f24 	.word	0x08033f24
 802a9e4:	08034a48 	.word	0x08034a48
 802a9e8:	0803366c 	.word	0x0803366c

0802a9ec <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802a9ec:	b580      	push	{r7, lr}
 802a9ee:	b084      	sub	sp, #16
 802a9f0:	af00      	add	r7, sp, #0
 802a9f2:	6078      	str	r0, [r7, #4]
 802a9f4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a9f6:	2300      	movs	r3, #0
 802a9f8:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a9fa:	68fb      	ldr	r3, [r7, #12]
 802a9fc:	2b00      	cmp	r3, #0
 802a9fe:	d001      	beq.n	802aa04 <lfs_mkdir+0x18>
        return err;
 802aa00:	68fb      	ldr	r3, [r7, #12]
 802aa02:	e005      	b.n	802aa10 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802aa04:	6839      	ldr	r1, [r7, #0]
 802aa06:	6878      	ldr	r0, [r7, #4]
 802aa08:	f7fc fe5c 	bl	80276c4 <lfs_rawmkdir>
 802aa0c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa0e:	68fb      	ldr	r3, [r7, #12]
}
 802aa10:	4618      	mov	r0, r3
 802aa12:	3710      	adds	r7, #16
 802aa14:	46bd      	mov	sp, r7
 802aa16:	bd80      	pop	{r7, pc}

0802aa18 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802aa18:	b580      	push	{r7, lr}
 802aa1a:	b086      	sub	sp, #24
 802aa1c:	af00      	add	r7, sp, #0
 802aa1e:	60f8      	str	r0, [r7, #12]
 802aa20:	60b9      	str	r1, [r7, #8]
 802aa22:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802aa24:	2300      	movs	r3, #0
 802aa26:	617b      	str	r3, [r7, #20]
    if (err) {
 802aa28:	697b      	ldr	r3, [r7, #20]
 802aa2a:	2b00      	cmp	r3, #0
 802aa2c:	d001      	beq.n	802aa32 <lfs_dir_open+0x1a>
        return err;
 802aa2e:	697b      	ldr	r3, [r7, #20]
 802aa30:	e019      	b.n	802aa66 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802aa32:	68fb      	ldr	r3, [r7, #12]
 802aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802aa36:	68b9      	ldr	r1, [r7, #8]
 802aa38:	4618      	mov	r0, r3
 802aa3a:	f7f9 fd21 	bl	8024480 <lfs_mlist_isopen>
 802aa3e:	4603      	mov	r3, r0
 802aa40:	f083 0301 	eor.w	r3, r3, #1
 802aa44:	b2db      	uxtb	r3, r3
 802aa46:	2b00      	cmp	r3, #0
 802aa48:	d106      	bne.n	802aa58 <lfs_dir_open+0x40>
 802aa4a:	4b09      	ldr	r3, [pc, #36]	; (802aa70 <lfs_dir_open+0x58>)
 802aa4c:	4a09      	ldr	r2, [pc, #36]	; (802aa74 <lfs_dir_open+0x5c>)
 802aa4e:	f241 612d 	movw	r1, #5677	; 0x162d
 802aa52:	4809      	ldr	r0, [pc, #36]	; (802aa78 <lfs_dir_open+0x60>)
 802aa54:	f001 fd9a 	bl	802c58c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802aa58:	687a      	ldr	r2, [r7, #4]
 802aa5a:	68b9      	ldr	r1, [r7, #8]
 802aa5c:	68f8      	ldr	r0, [r7, #12]
 802aa5e:	f7fc ff71 	bl	8027944 <lfs_dir_rawopen>
 802aa62:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa64:	697b      	ldr	r3, [r7, #20]
}
 802aa66:	4618      	mov	r0, r3
 802aa68:	3718      	adds	r7, #24
 802aa6a:	46bd      	mov	sp, r7
 802aa6c:	bd80      	pop	{r7, pc}
 802aa6e:	bf00      	nop
 802aa70:	08033f5c 	.word	0x08033f5c
 802aa74:	08034a58 	.word	0x08034a58
 802aa78:	0803366c 	.word	0x0803366c

0802aa7c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802aa7c:	b580      	push	{r7, lr}
 802aa7e:	b084      	sub	sp, #16
 802aa80:	af00      	add	r7, sp, #0
 802aa82:	6078      	str	r0, [r7, #4]
 802aa84:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aa86:	2300      	movs	r3, #0
 802aa88:	60fb      	str	r3, [r7, #12]
    if (err) {
 802aa8a:	68fb      	ldr	r3, [r7, #12]
 802aa8c:	2b00      	cmp	r3, #0
 802aa8e:	d001      	beq.n	802aa94 <lfs_dir_close+0x18>
        return err;
 802aa90:	68fb      	ldr	r3, [r7, #12]
 802aa92:	e005      	b.n	802aaa0 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802aa94:	6839      	ldr	r1, [r7, #0]
 802aa96:	6878      	ldr	r0, [r7, #4]
 802aa98:	f7fc ffce 	bl	8027a38 <lfs_dir_rawclose>
 802aa9c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa9e:	68fb      	ldr	r3, [r7, #12]
}
 802aaa0:	4618      	mov	r0, r3
 802aaa2:	3710      	adds	r7, #16
 802aaa4:	46bd      	mov	sp, r7
 802aaa6:	bd80      	pop	{r7, pc}

0802aaa8 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802aaa8:	b580      	push	{r7, lr}
 802aaaa:	b086      	sub	sp, #24
 802aaac:	af00      	add	r7, sp, #0
 802aaae:	60f8      	str	r0, [r7, #12]
 802aab0:	60b9      	str	r1, [r7, #8]
 802aab2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802aab4:	2300      	movs	r3, #0
 802aab6:	617b      	str	r3, [r7, #20]
    if (err) {
 802aab8:	697b      	ldr	r3, [r7, #20]
 802aaba:	2b00      	cmp	r3, #0
 802aabc:	d001      	beq.n	802aac2 <lfs_dir_read+0x1a>
        return err;
 802aabe:	697b      	ldr	r3, [r7, #20]
 802aac0:	e006      	b.n	802aad0 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802aac2:	687a      	ldr	r2, [r7, #4]
 802aac4:	68b9      	ldr	r1, [r7, #8]
 802aac6:	68f8      	ldr	r0, [r7, #12]
 802aac8:	f7fc ffc4 	bl	8027a54 <lfs_dir_rawread>
 802aacc:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aace:	697b      	ldr	r3, [r7, #20]
}
 802aad0:	4618      	mov	r0, r3
 802aad2:	3718      	adds	r7, #24
 802aad4:	46bd      	mov	sp, r7
 802aad6:	bd80      	pop	{r7, pc}

0802aad8 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802aad8:	b580      	push	{r7, lr}
 802aada:	b088      	sub	sp, #32
 802aadc:	af00      	add	r7, sp, #0
 802aade:	60f8      	str	r0, [r7, #12]
 802aae0:	60b9      	str	r1, [r7, #8]
 802aae2:	607a      	str	r2, [r7, #4]
 802aae4:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802aae6:	f107 0310 	add.w	r3, r7, #16
 802aaea:	4618      	mov	r0, r3
 802aaec:	f7ea fb60 	bl	80151b0 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802aaf0:	8abb      	ldrh	r3, [r7, #20]
 802aaf2:	461a      	mov	r2, r3
 802aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aaf6:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802aaf8:	8afb      	ldrh	r3, [r7, #22]
 802aafa:	461a      	mov	r2, r3
 802aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aafe:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802ab00:	8b3b      	ldrh	r3, [r7, #24]
 802ab02:	461a      	mov	r2, r3
 802ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab06:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802ab08:	8bbb      	ldrh	r3, [r7, #28]
 802ab0a:	461a      	mov	r2, r3
 802ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab0e:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802ab10:	887a      	ldrh	r2, [r7, #2]
 802ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab14:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 802ab16:	887a      	ldrh	r2, [r7, #2]
 802ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab1a:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 802ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab1e:	68fa      	ldr	r2, [r7, #12]
 802ab20:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab24:	68ba      	ldr	r2, [r7, #8]
 802ab26:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab2a:	687a      	ldr	r2, [r7, #4]
 802ab2c:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 802ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab30:	4a11      	ldr	r2, [pc, #68]	; (802ab78 <io_fs_init+0xa0>)
 802ab32:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab36:	4a11      	ldr	r2, [pc, #68]	; (802ab7c <io_fs_init+0xa4>)
 802ab38:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab3c:	4a10      	ldr	r2, [pc, #64]	; (802ab80 <io_fs_init+0xa8>)
 802ab3e:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab42:	4a10      	ldr	r2, [pc, #64]	; (802ab84 <io_fs_init+0xac>)
 802ab44:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802ab46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab48:	f242 7210 	movw	r2, #10000	; 0x2710
 802ab4c:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 802ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab50:	22ff      	movs	r2, #255	; 0xff
 802ab52:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 802ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802ab5a:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 802ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab5e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802ab62:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 802ab64:	8b3b      	ldrh	r3, [r7, #24]
 802ab66:	461a      	mov	r2, r3
 802ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab6a:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 802ab6c:	2300      	movs	r3, #0
}
 802ab6e:	4618      	mov	r0, r3
 802ab70:	3720      	adds	r7, #32
 802ab72:	46bd      	mov	sp, r7
 802ab74:	bd80      	pop	{r7, pc}
 802ab76:	bf00      	nop
 802ab78:	0802ab89 	.word	0x0802ab89
 802ab7c:	0802ac25 	.word	0x0802ac25
 802ab80:	0802abdd 	.word	0x0802abdd
 802ab84:	0802ac79 	.word	0x0802ac79

0802ab88 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802ab88:	b580      	push	{r7, lr}
 802ab8a:	b084      	sub	sp, #16
 802ab8c:	af00      	add	r7, sp, #0
 802ab8e:	60f8      	str	r0, [r7, #12]
 802ab90:	60b9      	str	r1, [r7, #8]
 802ab92:	607a      	str	r2, [r7, #4]
 802ab94:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ab96:	68fb      	ldr	r3, [r7, #12]
 802ab98:	6a1b      	ldr	r3, [r3, #32]
 802ab9a:	68ba      	ldr	r2, [r7, #8]
 802ab9c:	429a      	cmp	r2, r3
 802ab9e:	d305      	bcc.n	802abac <block_device_read+0x24>
 802aba0:	4b0b      	ldr	r3, [pc, #44]	; (802abd0 <block_device_read+0x48>)
 802aba2:	4a0c      	ldr	r2, [pc, #48]	; (802abd4 <block_device_read+0x4c>)
 802aba4:	2148      	movs	r1, #72	; 0x48
 802aba6:	480c      	ldr	r0, [pc, #48]	; (802abd8 <block_device_read+0x50>)
 802aba8:	f001 fcf0 	bl	802c58c <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802abac:	68fb      	ldr	r3, [r7, #12]
 802abae:	69db      	ldr	r3, [r3, #28]
 802abb0:	68ba      	ldr	r2, [r7, #8]
 802abb2:	fb03 f202 	mul.w	r2, r3, r2
 802abb6:	687b      	ldr	r3, [r7, #4]
 802abb8:	4413      	add	r3, r2
 802abba:	69ba      	ldr	r2, [r7, #24]
 802abbc:	b292      	uxth	r2, r2
 802abbe:	4619      	mov	r1, r3
 802abc0:	6838      	ldr	r0, [r7, #0]
 802abc2:	f7ea fc9d 	bl	8015500 <sFLASH_ReadBuffer>
	return 0;
 802abc6:	2300      	movs	r3, #0
}
 802abc8:	4618      	mov	r0, r3
 802abca:	3710      	adds	r7, #16
 802abcc:	46bd      	mov	sp, r7
 802abce:	bd80      	pop	{r7, pc}
 802abd0:	08033f94 	.word	0x08033f94
 802abd4:	08034a68 	.word	0x08034a68
 802abd8:	08033fac 	.word	0x08033fac

0802abdc <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802abdc:	b580      	push	{r7, lr}
 802abde:	b082      	sub	sp, #8
 802abe0:	af00      	add	r7, sp, #0
 802abe2:	6078      	str	r0, [r7, #4]
 802abe4:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802abe6:	687b      	ldr	r3, [r7, #4]
 802abe8:	6a1b      	ldr	r3, [r3, #32]
 802abea:	683a      	ldr	r2, [r7, #0]
 802abec:	429a      	cmp	r2, r3
 802abee:	d305      	bcc.n	802abfc <block_device_erase+0x20>
 802abf0:	4b09      	ldr	r3, [pc, #36]	; (802ac18 <block_device_erase+0x3c>)
 802abf2:	4a0a      	ldr	r2, [pc, #40]	; (802ac1c <block_device_erase+0x40>)
 802abf4:	2150      	movs	r1, #80	; 0x50
 802abf6:	480a      	ldr	r0, [pc, #40]	; (802ac20 <block_device_erase+0x44>)
 802abf8:	f001 fcc8 	bl	802c58c <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802abfc:	687b      	ldr	r3, [r7, #4]
 802abfe:	69db      	ldr	r3, [r3, #28]
 802ac00:	683a      	ldr	r2, [r7, #0]
 802ac02:	fb02 f303 	mul.w	r3, r2, r3
 802ac06:	4618      	mov	r0, r3
 802ac08:	f7ea fb78 	bl	80152fc <sFLASH_EraseSector>
	return 0;
 802ac0c:	2300      	movs	r3, #0
}
 802ac0e:	4618      	mov	r0, r3
 802ac10:	3708      	adds	r7, #8
 802ac12:	46bd      	mov	sp, r7
 802ac14:	bd80      	pop	{r7, pc}
 802ac16:	bf00      	nop
 802ac18:	08033f94 	.word	0x08033f94
 802ac1c:	08034a7c 	.word	0x08034a7c
 802ac20:	08033fac 	.word	0x08033fac

0802ac24 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802ac24:	b580      	push	{r7, lr}
 802ac26:	b084      	sub	sp, #16
 802ac28:	af00      	add	r7, sp, #0
 802ac2a:	60f8      	str	r0, [r7, #12]
 802ac2c:	60b9      	str	r1, [r7, #8]
 802ac2e:	607a      	str	r2, [r7, #4]
 802ac30:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ac32:	68fb      	ldr	r3, [r7, #12]
 802ac34:	6a1b      	ldr	r3, [r3, #32]
 802ac36:	68ba      	ldr	r2, [r7, #8]
 802ac38:	429a      	cmp	r2, r3
 802ac3a:	d305      	bcc.n	802ac48 <block_device_prog+0x24>
 802ac3c:	4b0b      	ldr	r3, [pc, #44]	; (802ac6c <block_device_prog+0x48>)
 802ac3e:	4a0c      	ldr	r2, [pc, #48]	; (802ac70 <block_device_prog+0x4c>)
 802ac40:	2158      	movs	r1, #88	; 0x58
 802ac42:	480c      	ldr	r0, [pc, #48]	; (802ac74 <block_device_prog+0x50>)
 802ac44:	f001 fca2 	bl	802c58c <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802ac48:	68fb      	ldr	r3, [r7, #12]
 802ac4a:	69db      	ldr	r3, [r3, #28]
 802ac4c:	68ba      	ldr	r2, [r7, #8]
 802ac4e:	fb03 f202 	mul.w	r2, r3, r2
 802ac52:	687b      	ldr	r3, [r7, #4]
 802ac54:	4413      	add	r3, r2
 802ac56:	69ba      	ldr	r2, [r7, #24]
 802ac58:	b292      	uxth	r2, r2
 802ac5a:	4619      	mov	r1, r3
 802ac5c:	6838      	ldr	r0, [r7, #0]
 802ac5e:	f7ea fba6 	bl	80153ae <sFLASH_WriteBuffer>
	return 0;
 802ac62:	2300      	movs	r3, #0
}
 802ac64:	4618      	mov	r0, r3
 802ac66:	3710      	adds	r7, #16
 802ac68:	46bd      	mov	sp, r7
 802ac6a:	bd80      	pop	{r7, pc}
 802ac6c:	08033f94 	.word	0x08033f94
 802ac70:	08034a90 	.word	0x08034a90
 802ac74:	08033fac 	.word	0x08033fac

0802ac78 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802ac78:	b480      	push	{r7}
 802ac7a:	b083      	sub	sp, #12
 802ac7c:	af00      	add	r7, sp, #0
 802ac7e:	6078      	str	r0, [r7, #4]
	return 0;
 802ac80:	2300      	movs	r3, #0
}
 802ac82:	4618      	mov	r0, r3
 802ac84:	370c      	adds	r7, #12
 802ac86:	46bd      	mov	sp, r7
 802ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac8c:	4770      	bx	lr
	...

0802ac90 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802ac90:	b480      	push	{r7}
 802ac92:	b087      	sub	sp, #28
 802ac94:	af00      	add	r7, sp, #0
 802ac96:	60f8      	str	r0, [r7, #12]
 802ac98:	60b9      	str	r1, [r7, #8]
 802ac9a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802ac9c:	68bb      	ldr	r3, [r7, #8]
 802ac9e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802aca0:	2300      	movs	r3, #0
 802aca2:	617b      	str	r3, [r7, #20]
 802aca4:	e024      	b.n	802acf0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802aca6:	68fb      	ldr	r3, [r7, #12]
 802aca8:	091a      	lsrs	r2, r3, #4
 802acaa:	6939      	ldr	r1, [r7, #16]
 802acac:	697b      	ldr	r3, [r7, #20]
 802acae:	440b      	add	r3, r1
 802acb0:	781b      	ldrb	r3, [r3, #0]
 802acb2:	4619      	mov	r1, r3
 802acb4:	68fb      	ldr	r3, [r7, #12]
 802acb6:	404b      	eors	r3, r1
 802acb8:	f003 030f 	and.w	r3, r3, #15
 802acbc:	4912      	ldr	r1, [pc, #72]	; (802ad08 <lfs_crc+0x78>)
 802acbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802acc2:	4053      	eors	r3, r2
 802acc4:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802acc6:	68fb      	ldr	r3, [r7, #12]
 802acc8:	091a      	lsrs	r2, r3, #4
 802acca:	6939      	ldr	r1, [r7, #16]
 802accc:	697b      	ldr	r3, [r7, #20]
 802acce:	440b      	add	r3, r1
 802acd0:	781b      	ldrb	r3, [r3, #0]
 802acd2:	091b      	lsrs	r3, r3, #4
 802acd4:	b2db      	uxtb	r3, r3
 802acd6:	4619      	mov	r1, r3
 802acd8:	68fb      	ldr	r3, [r7, #12]
 802acda:	404b      	eors	r3, r1
 802acdc:	f003 030f 	and.w	r3, r3, #15
 802ace0:	4909      	ldr	r1, [pc, #36]	; (802ad08 <lfs_crc+0x78>)
 802ace2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ace6:	4053      	eors	r3, r2
 802ace8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802acea:	697b      	ldr	r3, [r7, #20]
 802acec:	3301      	adds	r3, #1
 802acee:	617b      	str	r3, [r7, #20]
 802acf0:	697a      	ldr	r2, [r7, #20]
 802acf2:	687b      	ldr	r3, [r7, #4]
 802acf4:	429a      	cmp	r2, r3
 802acf6:	d3d6      	bcc.n	802aca6 <lfs_crc+0x16>
    }

    return crc;
 802acf8:	68fb      	ldr	r3, [r7, #12]
}
 802acfa:	4618      	mov	r0, r3
 802acfc:	371c      	adds	r7, #28
 802acfe:	46bd      	mov	sp, r7
 802ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad04:	4770      	bx	lr
 802ad06:	bf00      	nop
 802ad08:	08034aa4 	.word	0x08034aa4

0802ad0c <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802ad0c:	b480      	push	{r7}
 802ad0e:	b083      	sub	sp, #12
 802ad10:	af00      	add	r7, sp, #0
 802ad12:	6078      	str	r0, [r7, #4]
 802ad14:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802ad16:	687b      	ldr	r3, [r7, #4]
 802ad18:	2b00      	cmp	r3, #0
 802ad1a:	d002      	beq.n	802ad22 <spi_fs_init_mutex+0x16>
 802ad1c:	4a07      	ldr	r2, [pc, #28]	; (802ad3c <spi_fs_init_mutex+0x30>)
 802ad1e:	687b      	ldr	r3, [r7, #4]
 802ad20:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802ad22:	683b      	ldr	r3, [r7, #0]
 802ad24:	2b00      	cmp	r3, #0
 802ad26:	d002      	beq.n	802ad2e <spi_fs_init_mutex+0x22>
 802ad28:	4a05      	ldr	r2, [pc, #20]	; (802ad40 <spi_fs_init_mutex+0x34>)
 802ad2a:	683b      	ldr	r3, [r7, #0]
 802ad2c:	6013      	str	r3, [r2, #0]

};
 802ad2e:	bf00      	nop
 802ad30:	370c      	adds	r7, #12
 802ad32:	46bd      	mov	sp, r7
 802ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad38:	4770      	bx	lr
 802ad3a:	bf00      	nop
 802ad3c:	2000d9c0 	.word	0x2000d9c0
 802ad40:	2000d9c4 	.word	0x2000d9c4

0802ad44 <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802ad44:	b590      	push	{r4, r7, lr}
 802ad46:	b08b      	sub	sp, #44	; 0x2c
 802ad48:	af02      	add	r7, sp, #8
 802ad4a:	61f8      	str	r0, [r7, #28]
 802ad4c:	61b9      	str	r1, [r7, #24]
 802ad4e:	617a      	str	r2, [r7, #20]
 802ad50:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802ad52:	4c14      	ldr	r4, [pc, #80]	; (802ada4 <spi_fs_init+0x60>)
 802ad54:	463b      	mov	r3, r7
 802ad56:	4618      	mov	r0, r3
 802ad58:	f7ea fa2a 	bl	80151b0 <sFLASH_GetInfo>
 802ad5c:	463b      	mov	r3, r7
 802ad5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ad60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802ad64:	4b0f      	ldr	r3, [pc, #60]	; (802ada4 <spi_fs_init+0x60>)
 802ad66:	681b      	ldr	r3, [r3, #0]
 802ad68:	2b00      	cmp	r3, #0
 802ad6a:	d102      	bne.n	802ad72 <spi_fs_init+0x2e>
 802ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 802ad70:	e013      	b.n	802ad9a <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802ad72:	8a7b      	ldrh	r3, [r7, #18]
 802ad74:	4a0c      	ldr	r2, [pc, #48]	; (802ada8 <spi_fs_init+0x64>)
 802ad76:	9200      	str	r2, [sp, #0]
 802ad78:	697a      	ldr	r2, [r7, #20]
 802ad7a:	69b9      	ldr	r1, [r7, #24]
 802ad7c:	69f8      	ldr	r0, [r7, #28]
 802ad7e:	f7ff feab 	bl	802aad8 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802ad82:	220c      	movs	r2, #12
 802ad84:	2100      	movs	r1, #0
 802ad86:	4809      	ldr	r0, [pc, #36]	; (802adac <spi_fs_init+0x68>)
 802ad88:	f002 fdd0 	bl	802d92c <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802ad8c:	4b07      	ldr	r3, [pc, #28]	; (802adac <spi_fs_init+0x68>)
 802ad8e:	4a08      	ldr	r2, [pc, #32]	; (802adb0 <spi_fs_init+0x6c>)
 802ad90:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802ad92:	4b06      	ldr	r3, [pc, #24]	; (802adac <spi_fs_init+0x68>)
 802ad94:	2200      	movs	r2, #0
 802ad96:	609a      	str	r2, [r3, #8]

	return 0;
 802ad98:	2300      	movs	r3, #0
}
 802ad9a:	4618      	mov	r0, r3
 802ad9c:	3724      	adds	r7, #36	; 0x24
 802ad9e:	46bd      	mov	sp, r7
 802ada0:	bd90      	pop	{r4, r7, pc}
 802ada2:	bf00      	nop
 802ada4:	2000d924 	.word	0x2000d924
 802ada8:	2000d8d8 	.word	0x2000d8d8
 802adac:	2000d934 	.word	0x2000d934
 802adb0:	2000d4cc 	.word	0x2000d4cc

0802adb4 <spi_fs_mount>:

int spi_fs_mount(void){
 802adb4:	b580      	push	{r7, lr}
 802adb6:	b082      	sub	sp, #8
 802adb8:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802adba:	4b0d      	ldr	r3, [pc, #52]	; (802adf0 <spi_fs_mount+0x3c>)
 802adbc:	681b      	ldr	r3, [r3, #0]
 802adbe:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802adc0:	490c      	ldr	r1, [pc, #48]	; (802adf4 <spi_fs_mount+0x40>)
 802adc2:	480d      	ldr	r0, [pc, #52]	; (802adf8 <spi_fs_mount+0x44>)
 802adc4:	f7ff fcc4 	bl	802a750 <lfs_mount>
 802adc8:	6078      	str	r0, [r7, #4]
	if (err) {
 802adca:	687b      	ldr	r3, [r7, #4]
 802adcc:	2b00      	cmp	r3, #0
 802adce:	d003      	beq.n	802add8 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802add0:	4b0a      	ldr	r3, [pc, #40]	; (802adfc <spi_fs_mount+0x48>)
 802add2:	2200      	movs	r2, #0
 802add4:	701a      	strb	r2, [r3, #0]
 802add6:	e002      	b.n	802adde <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802add8:	4b08      	ldr	r3, [pc, #32]	; (802adfc <spi_fs_mount+0x48>)
 802adda:	2201      	movs	r2, #1
 802addc:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802adde:	4b08      	ldr	r3, [pc, #32]	; (802ae00 <spi_fs_mount+0x4c>)
 802ade0:	681b      	ldr	r3, [r3, #0]
 802ade2:	4798      	blx	r3
#endif

	return err;
 802ade4:	687b      	ldr	r3, [r7, #4]
}
 802ade6:	4618      	mov	r0, r3
 802ade8:	3708      	adds	r7, #8
 802adea:	46bd      	mov	sp, r7
 802adec:	bd80      	pop	{r7, pc}
 802adee:	bf00      	nop
 802adf0:	2000d9c0 	.word	0x2000d9c0
 802adf4:	2000d8d8 	.word	0x2000d8d8
 802adf8:	2000d6d0 	.word	0x2000d6d0
 802adfc:	2000d6cc 	.word	0x2000d6cc
 802ae00:	2000d9c4 	.word	0x2000d9c4

0802ae04 <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802ae04:	b580      	push	{r7, lr}
 802ae06:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802ae08:	4902      	ldr	r1, [pc, #8]	; (802ae14 <spi_fs_format+0x10>)
 802ae0a:	4803      	ldr	r0, [pc, #12]	; (802ae18 <spi_fs_format+0x14>)
 802ae0c:	f7ff fc8a 	bl	802a724 <lfs_format>
}
 802ae10:	bf00      	nop
 802ae12:	bd80      	pop	{r7, pc}
 802ae14:	2000d8d8 	.word	0x2000d8d8
 802ae18:	2000d6d0 	.word	0x2000d6d0

0802ae1c <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802ae1c:	b580      	push	{r7, lr}
 802ae1e:	b088      	sub	sp, #32
 802ae20:	af02      	add	r7, sp, #8
 802ae22:	60f8      	str	r0, [r7, #12]
 802ae24:	60b9      	str	r1, [r7, #8]
 802ae26:	607a      	str	r2, [r7, #4]
 802ae28:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ae2a:	4b19      	ldr	r3, [pc, #100]	; (802ae90 <spi_fs_read_file_offset+0x74>)
 802ae2c:	681b      	ldr	r3, [r3, #0]
 802ae2e:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802ae30:	4b18      	ldr	r3, [pc, #96]	; (802ae94 <spi_fs_read_file_offset+0x78>)
 802ae32:	9300      	str	r3, [sp, #0]
 802ae34:	f240 1301 	movw	r3, #257	; 0x101
 802ae38:	68fa      	ldr	r2, [r7, #12]
 802ae3a:	4917      	ldr	r1, [pc, #92]	; (802ae98 <spi_fs_read_file_offset+0x7c>)
 802ae3c:	4817      	ldr	r0, [pc, #92]	; (802ae9c <spi_fs_read_file_offset+0x80>)
 802ae3e:	f7ff fce3 	bl	802a808 <lfs_file_opencfg>
 802ae42:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ae44:	697b      	ldr	r3, [r7, #20]
 802ae46:	2b00      	cmp	r3, #0
 802ae48:	db13      	blt.n	802ae72 <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802ae4a:	687a      	ldr	r2, [r7, #4]
 802ae4c:	2300      	movs	r3, #0
 802ae4e:	4912      	ldr	r1, [pc, #72]	; (802ae98 <spi_fs_read_file_offset+0x7c>)
 802ae50:	4812      	ldr	r0, [pc, #72]	; (802ae9c <spi_fs_read_file_offset+0x80>)
 802ae52:	f7ff fd9b 	bl	802a98c <lfs_file_seek>
 802ae56:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ae58:	697b      	ldr	r3, [r7, #20]
 802ae5a:	2b00      	cmp	r3, #0
 802ae5c:	db0b      	blt.n	802ae76 <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802ae5e:	683b      	ldr	r3, [r7, #0]
 802ae60:	68ba      	ldr	r2, [r7, #8]
 802ae62:	490d      	ldr	r1, [pc, #52]	; (802ae98 <spi_fs_read_file_offset+0x7c>)
 802ae64:	480d      	ldr	r0, [pc, #52]	; (802ae9c <spi_fs_read_file_offset+0x80>)
 802ae66:	f7ff fd31 	bl	802a8cc <lfs_file_read>
 802ae6a:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ae6c:	697b      	ldr	r3, [r7, #20]
 802ae6e:	2b00      	cmp	r3, #0

	func_end:
 802ae70:	e002      	b.n	802ae78 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ae72:	bf00      	nop
 802ae74:	e000      	b.n	802ae78 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ae76:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802ae78:	4907      	ldr	r1, [pc, #28]	; (802ae98 <spi_fs_read_file_offset+0x7c>)
 802ae7a:	4808      	ldr	r0, [pc, #32]	; (802ae9c <spi_fs_read_file_offset+0x80>)
 802ae7c:	f7ff fcfa 	bl	802a874 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ae80:	4b07      	ldr	r3, [pc, #28]	; (802aea0 <spi_fs_read_file_offset+0x84>)
 802ae82:	681b      	ldr	r3, [r3, #0]
 802ae84:	4798      	blx	r3
#endif
	return err;
 802ae86:	697b      	ldr	r3, [r7, #20]

}
 802ae88:	4618      	mov	r0, r3
 802ae8a:	3718      	adds	r7, #24
 802ae8c:	46bd      	mov	sp, r7
 802ae8e:	bd80      	pop	{r7, pc}
 802ae90:	2000d9c0 	.word	0x2000d9c0
 802ae94:	2000d934 	.word	0x2000d934
 802ae98:	2000d748 	.word	0x2000d748
 802ae9c:	2000d6d0 	.word	0x2000d6d0
 802aea0:	2000d9c4 	.word	0x2000d9c4

0802aea4 <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802aea4:	b580      	push	{r7, lr}
 802aea6:	b088      	sub	sp, #32
 802aea8:	af02      	add	r7, sp, #8
 802aeaa:	60f8      	str	r0, [r7, #12]
 802aeac:	60b9      	str	r1, [r7, #8]
 802aeae:	607a      	str	r2, [r7, #4]
	int err = 0;
 802aeb0:	2300      	movs	r3, #0
 802aeb2:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802aeb4:	4b12      	ldr	r3, [pc, #72]	; (802af00 <spi_fs_over_write_file+0x5c>)
 802aeb6:	681b      	ldr	r3, [r3, #0]
 802aeb8:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802aeba:	4b12      	ldr	r3, [pc, #72]	; (802af04 <spi_fs_over_write_file+0x60>)
 802aebc:	9300      	str	r3, [sp, #0]
 802aebe:	f240 5303 	movw	r3, #1283	; 0x503
 802aec2:	68fa      	ldr	r2, [r7, #12]
 802aec4:	4910      	ldr	r1, [pc, #64]	; (802af08 <spi_fs_over_write_file+0x64>)
 802aec6:	4811      	ldr	r0, [pc, #68]	; (802af0c <spi_fs_over_write_file+0x68>)
 802aec8:	f7ff fc9e 	bl	802a808 <lfs_file_opencfg>
 802aecc:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802aece:	697b      	ldr	r3, [r7, #20]
 802aed0:	2b00      	cmp	r3, #0
 802aed2:	db0b      	blt.n	802aeec <spi_fs_over_write_file+0x48>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802aed4:	687b      	ldr	r3, [r7, #4]
 802aed6:	68ba      	ldr	r2, [r7, #8]
 802aed8:	490b      	ldr	r1, [pc, #44]	; (802af08 <spi_fs_over_write_file+0x64>)
 802aeda:	480c      	ldr	r0, [pc, #48]	; (802af0c <spi_fs_over_write_file+0x68>)
 802aedc:	f7ff fd26 	bl	802a92c <lfs_file_write>
 802aee0:	6178      	str	r0, [r7, #20]

	lfs_file_close(&lfs, &file);
 802aee2:	4909      	ldr	r1, [pc, #36]	; (802af08 <spi_fs_over_write_file+0x64>)
 802aee4:	4809      	ldr	r0, [pc, #36]	; (802af0c <spi_fs_over_write_file+0x68>)
 802aee6:	f7ff fcc5 	bl	802a874 <lfs_file_close>
 802aeea:	e000      	b.n	802aeee <spi_fs_over_write_file+0x4a>
	if (err < 0) goto func_end;
 802aeec:	bf00      	nop
	func_end:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802aeee:	4b08      	ldr	r3, [pc, #32]	; (802af10 <spi_fs_over_write_file+0x6c>)
 802aef0:	681b      	ldr	r3, [r3, #0]
 802aef2:	4798      	blx	r3
#endif
	return err;
 802aef4:	697b      	ldr	r3, [r7, #20]
}
 802aef6:	4618      	mov	r0, r3
 802aef8:	3718      	adds	r7, #24
 802aefa:	46bd      	mov	sp, r7
 802aefc:	bd80      	pop	{r7, pc}
 802aefe:	bf00      	nop
 802af00:	2000d9c0 	.word	0x2000d9c0
 802af04:	2000d934 	.word	0x2000d934
 802af08:	2000d748 	.word	0x2000d748
 802af0c:	2000d6d0 	.word	0x2000d6d0
 802af10:	2000d9c4 	.word	0x2000d9c4

0802af14 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802af14:	b580      	push	{r7, lr}
 802af16:	b084      	sub	sp, #16
 802af18:	af00      	add	r7, sp, #0
 802af1a:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802af1c:	4b0b      	ldr	r3, [pc, #44]	; (802af4c <spi_fs_file_size+0x38>)
 802af1e:	681b      	ldr	r3, [r3, #0]
 802af20:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802af22:	4a0b      	ldr	r2, [pc, #44]	; (802af50 <spi_fs_file_size+0x3c>)
 802af24:	6879      	ldr	r1, [r7, #4]
 802af26:	480b      	ldr	r0, [pc, #44]	; (802af54 <spi_fs_file_size+0x40>)
 802af28:	f7ff fc56 	bl	802a7d8 <lfs_stat>
 802af2c:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802af2e:	68fb      	ldr	r3, [r7, #12]
 802af30:	2b00      	cmp	r3, #0
 802af32:	d102      	bne.n	802af3a <spi_fs_file_size+0x26>
		err = file_info.size;
 802af34:	4b06      	ldr	r3, [pc, #24]	; (802af50 <spi_fs_file_size+0x3c>)
 802af36:	685b      	ldr	r3, [r3, #4]
 802af38:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802af3a:	4b07      	ldr	r3, [pc, #28]	; (802af58 <spi_fs_file_size+0x44>)
 802af3c:	681b      	ldr	r3, [r3, #0]
 802af3e:	4798      	blx	r3
#endif
	return err;
 802af40:	68fb      	ldr	r3, [r7, #12]
}
 802af42:	4618      	mov	r0, r3
 802af44:	3710      	adds	r7, #16
 802af46:	46bd      	mov	sp, r7
 802af48:	bd80      	pop	{r7, pc}
 802af4a:	bf00      	nop
 802af4c:	2000d9c0 	.word	0x2000d9c0
 802af50:	2000d7d0 	.word	0x2000d7d0
 802af54:	2000d6d0 	.word	0x2000d6d0
 802af58:	2000d9c4 	.word	0x2000d9c4

0802af5c <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802af5c:	b580      	push	{r7, lr}
 802af5e:	b088      	sub	sp, #32
 802af60:	af02      	add	r7, sp, #8
 802af62:	60f8      	str	r0, [r7, #12]
 802af64:	60b9      	str	r1, [r7, #8]
 802af66:	607a      	str	r2, [r7, #4]
	int err = 0;
 802af68:	2300      	movs	r3, #0
 802af6a:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802af6c:	4b13      	ldr	r3, [pc, #76]	; (802afbc <spi_fs_write_file_to_end+0x60>)
 802af6e:	681b      	ldr	r3, [r3, #0]
 802af70:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802af72:	4b13      	ldr	r3, [pc, #76]	; (802afc0 <spi_fs_write_file_to_end+0x64>)
 802af74:	9300      	str	r3, [sp, #0]
 802af76:	f640 1303 	movw	r3, #2307	; 0x903
 802af7a:	68fa      	ldr	r2, [r7, #12]
 802af7c:	4911      	ldr	r1, [pc, #68]	; (802afc4 <spi_fs_write_file_to_end+0x68>)
 802af7e:	4812      	ldr	r0, [pc, #72]	; (802afc8 <spi_fs_write_file_to_end+0x6c>)
 802af80:	f7ff fc42 	bl	802a808 <lfs_file_opencfg>
 802af84:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802af86:	697b      	ldr	r3, [r7, #20]
 802af88:	2b00      	cmp	r3, #0
 802af8a:	db09      	blt.n	802afa0 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802af8c:	687b      	ldr	r3, [r7, #4]
 802af8e:	68ba      	ldr	r2, [r7, #8]
 802af90:	490c      	ldr	r1, [pc, #48]	; (802afc4 <spi_fs_write_file_to_end+0x68>)
 802af92:	480d      	ldr	r0, [pc, #52]	; (802afc8 <spi_fs_write_file_to_end+0x6c>)
 802af94:	f7ff fcca 	bl	802a92c <lfs_file_write>
 802af98:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802af9a:	697b      	ldr	r3, [r7, #20]
 802af9c:	2b00      	cmp	r3, #0

	func_end:
 802af9e:	e000      	b.n	802afa2 <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802afa0:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802afa2:	4908      	ldr	r1, [pc, #32]	; (802afc4 <spi_fs_write_file_to_end+0x68>)
 802afa4:	4808      	ldr	r0, [pc, #32]	; (802afc8 <spi_fs_write_file_to_end+0x6c>)
 802afa6:	f7ff fc65 	bl	802a874 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802afaa:	4b08      	ldr	r3, [pc, #32]	; (802afcc <spi_fs_write_file_to_end+0x70>)
 802afac:	681b      	ldr	r3, [r3, #0]
 802afae:	4798      	blx	r3
#endif
	return err;
 802afb0:	697b      	ldr	r3, [r7, #20]
}
 802afb2:	4618      	mov	r0, r3
 802afb4:	3718      	adds	r7, #24
 802afb6:	46bd      	mov	sp, r7
 802afb8:	bd80      	pop	{r7, pc}
 802afba:	bf00      	nop
 802afbc:	2000d9c0 	.word	0x2000d9c0
 802afc0:	2000d934 	.word	0x2000d934
 802afc4:	2000d748 	.word	0x2000d748
 802afc8:	2000d6d0 	.word	0x2000d6d0
 802afcc:	2000d9c4 	.word	0x2000d9c4

0802afd0 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802afd0:	b580      	push	{r7, lr}
 802afd2:	b084      	sub	sp, #16
 802afd4:	af00      	add	r7, sp, #0
 802afd6:	6078      	str	r0, [r7, #4]
 802afd8:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802afda:	2280      	movs	r2, #128	; 0x80
 802afdc:	2100      	movs	r1, #0
 802afde:	480a      	ldr	r0, [pc, #40]	; (802b008 <spi_fs_serch_file_in_dir+0x38>)
 802afe0:	f002 fca4 	bl	802d92c <memset>
	strcpy((char *)temp_buf, dir_path);
 802afe4:	6879      	ldr	r1, [r7, #4]
 802afe6:	4808      	ldr	r0, [pc, #32]	; (802b008 <spi_fs_serch_file_in_dir+0x38>)
 802afe8:	f002 fe6d 	bl	802dcc6 <strcpy>
	strcat((char *)temp_buf, filename);
 802afec:	6839      	ldr	r1, [r7, #0]
 802afee:	4806      	ldr	r0, [pc, #24]	; (802b008 <spi_fs_serch_file_in_dir+0x38>)
 802aff0:	f002 fca4 	bl	802d93c <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802aff4:	4804      	ldr	r0, [pc, #16]	; (802b008 <spi_fs_serch_file_in_dir+0x38>)
 802aff6:	f7ff ff8d 	bl	802af14 <spi_fs_file_size>
 802affa:	60f8      	str	r0, [r7, #12]
	return err;
 802affc:	68fb      	ldr	r3, [r7, #12]

}
 802affe:	4618      	mov	r0, r3
 802b000:	3710      	adds	r7, #16
 802b002:	46bd      	mov	sp, r7
 802b004:	bd80      	pop	{r7, pc}
 802b006:	bf00      	nop
 802b008:	2000d940 	.word	0x2000d940

0802b00c <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802b00c:	b580      	push	{r7, lr}
 802b00e:	b084      	sub	sp, #16
 802b010:	af00      	add	r7, sp, #0
 802b012:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b014:	4b07      	ldr	r3, [pc, #28]	; (802b034 <spi_fs_mkdir+0x28>)
 802b016:	681b      	ldr	r3, [r3, #0]
 802b018:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802b01a:	6879      	ldr	r1, [r7, #4]
 802b01c:	4806      	ldr	r0, [pc, #24]	; (802b038 <spi_fs_mkdir+0x2c>)
 802b01e:	f7ff fce5 	bl	802a9ec <lfs_mkdir>
 802b022:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b024:	4b05      	ldr	r3, [pc, #20]	; (802b03c <spi_fs_mkdir+0x30>)
 802b026:	681b      	ldr	r3, [r3, #0]
 802b028:	4798      	blx	r3
#endif

	return err;
 802b02a:	68fb      	ldr	r3, [r7, #12]
}
 802b02c:	4618      	mov	r0, r3
 802b02e:	3710      	adds	r7, #16
 802b030:	46bd      	mov	sp, r7
 802b032:	bd80      	pop	{r7, pc}
 802b034:	2000d9c0 	.word	0x2000d9c0
 802b038:	2000d6d0 	.word	0x2000d6d0
 802b03c:	2000d9c4 	.word	0x2000d9c4

0802b040 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802b040:	b580      	push	{r7, lr}
 802b042:	b084      	sub	sp, #16
 802b044:	af00      	add	r7, sp, #0
 802b046:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b048:	4b07      	ldr	r3, [pc, #28]	; (802b068 <spi_fs_remove+0x28>)
 802b04a:	681b      	ldr	r3, [r3, #0]
 802b04c:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802b04e:	6879      	ldr	r1, [r7, #4]
 802b050:	4806      	ldr	r0, [pc, #24]	; (802b06c <spi_fs_remove+0x2c>)
 802b052:	f7ff fb93 	bl	802a77c <lfs_remove>
 802b056:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b058:	4b05      	ldr	r3, [pc, #20]	; (802b070 <spi_fs_remove+0x30>)
 802b05a:	681b      	ldr	r3, [r3, #0]
 802b05c:	4798      	blx	r3
#endif
	return err;
 802b05e:	68fb      	ldr	r3, [r7, #12]
}
 802b060:	4618      	mov	r0, r3
 802b062:	3710      	adds	r7, #16
 802b064:	46bd      	mov	sp, r7
 802b066:	bd80      	pop	{r7, pc}
 802b068:	2000d9c0 	.word	0x2000d9c0
 802b06c:	2000d6d0 	.word	0x2000d6d0
 802b070:	2000d9c4 	.word	0x2000d9c4

0802b074 <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path, uint8_t deep) {
 802b074:	b580      	push	{r7, lr}
 802b076:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802b07a:	af02      	add	r7, sp, #8
 802b07c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b080:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b084:	6018      	str	r0, [r3, #0]
 802b086:	460a      	mov	r2, r1
 802b088:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b08c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b090:	701a      	strb	r2, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802b092:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b096:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b09a:	681a      	ldr	r2, [r3, #0]
 802b09c:	4945      	ldr	r1, [pc, #276]	; (802b1b4 <remove_recursively_files_and_directories+0x140>)
 802b09e:	4846      	ldr	r0, [pc, #280]	; (802b1b8 <remove_recursively_files_and_directories+0x144>)
 802b0a0:	f7ff fcba 	bl	802aa18 <lfs_dir_open>
 802b0a4:	4603      	mov	r3, r0
 802b0a6:	2b00      	cmp	r3, #0
 802b0a8:	d17f      	bne.n	802b1aa <remove_recursively_files_and_directories+0x136>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b0aa:	e061      	b.n	802b170 <remove_recursively_files_and_directories+0xfc>
            if (info.type == LFS_TYPE_DIR) {
 802b0ac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b0b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802b0b4:	781b      	ldrb	r3, [r3, #0]
 802b0b6:	2b02      	cmp	r3, #2
 802b0b8:	d13d      	bne.n	802b136 <remove_recursively_files_and_directories+0xc2>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802b0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b0be:	3308      	adds	r3, #8
 802b0c0:	493e      	ldr	r1, [pc, #248]	; (802b1bc <remove_recursively_files_and_directories+0x148>)
 802b0c2:	4618      	mov	r0, r3
 802b0c4:	f7e5 f88c 	bl	80101e0 <strcmp>
 802b0c8:	4603      	mov	r3, r0
 802b0ca:	2b00      	cmp	r3, #0
 802b0cc:	d050      	beq.n	802b170 <remove_recursively_files_and_directories+0xfc>
 802b0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b0d2:	3308      	adds	r3, #8
 802b0d4:	493a      	ldr	r1, [pc, #232]	; (802b1c0 <remove_recursively_files_and_directories+0x14c>)
 802b0d6:	4618      	mov	r0, r3
 802b0d8:	f7e5 f882 	bl	80101e0 <strcmp>
 802b0dc:	4603      	mov	r3, r0
 802b0de:	2b00      	cmp	r3, #0
 802b0e0:	d100      	bne.n	802b0e4 <remove_recursively_files_and_directories+0x70>
 802b0e2:	e045      	b.n	802b170 <remove_recursively_files_and_directories+0xfc>
                printf("Directory: %s\n", info.name);
 802b0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b0e8:	3308      	adds	r3, #8
 802b0ea:	4619      	mov	r1, r3
 802b0ec:	4835      	ldr	r0, [pc, #212]	; (802b1c4 <remove_recursively_files_and_directories+0x150>)
 802b0ee:	f002 fa87 	bl	802d600 <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802b0f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b0f6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b0fa:	f107 0008 	add.w	r0, r7, #8
 802b0fe:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802b102:	3208      	adds	r2, #8
 802b104:	9200      	str	r2, [sp, #0]
 802b106:	681b      	ldr	r3, [r3, #0]
 802b108:	4a2f      	ldr	r2, [pc, #188]	; (802b1c8 <remove_recursively_files_and_directories+0x154>)
 802b10a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b10e:	f002 fa89 	bl	802d624 <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802b112:	4928      	ldr	r1, [pc, #160]	; (802b1b4 <remove_recursively_files_and_directories+0x140>)
 802b114:	4828      	ldr	r0, [pc, #160]	; (802b1b8 <remove_recursively_files_and_directories+0x144>)
 802b116:	f7ff fcb1 	bl	802aa7c <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path, deep + 1);  // Recursive call for subdirectories
 802b11a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b11e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b122:	781b      	ldrb	r3, [r3, #0]
 802b124:	3301      	adds	r3, #1
 802b126:	b2da      	uxtb	r2, r3
 802b128:	f107 0308 	add.w	r3, r7, #8
 802b12c:	4611      	mov	r1, r2
 802b12e:	4618      	mov	r0, r3
 802b130:	f7ff ffa0 	bl	802b074 <remove_recursively_files_and_directories>
 802b134:	e01c      	b.n	802b170 <remove_recursively_files_and_directories+0xfc>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b13a:	3308      	adds	r3, #8
 802b13c:	4619      	mov	r1, r3
 802b13e:	4823      	ldr	r0, [pc, #140]	; (802b1cc <remove_recursively_files_and_directories+0x158>)
 802b140:	f002 fa5e 	bl	802d600 <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802b144:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b148:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b14c:	f107 0008 	add.w	r0, r7, #8
 802b150:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802b154:	3208      	adds	r2, #8
 802b156:	9200      	str	r2, [sp, #0]
 802b158:	681b      	ldr	r3, [r3, #0]
 802b15a:	4a1b      	ldr	r2, [pc, #108]	; (802b1c8 <remove_recursively_files_and_directories+0x154>)
 802b15c:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b160:	f002 fa60 	bl	802d624 <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802b164:	f107 0308 	add.w	r3, r7, #8
 802b168:	4619      	mov	r1, r3
 802b16a:	4813      	ldr	r0, [pc, #76]	; (802b1b8 <remove_recursively_files_and_directories+0x144>)
 802b16c:	f7ff fb06 	bl	802a77c <lfs_remove>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b174:	461a      	mov	r2, r3
 802b176:	490f      	ldr	r1, [pc, #60]	; (802b1b4 <remove_recursively_files_and_directories+0x140>)
 802b178:	480f      	ldr	r0, [pc, #60]	; (802b1b8 <remove_recursively_files_and_directories+0x144>)
 802b17a:	f7ff fc95 	bl	802aaa8 <lfs_dir_read>
 802b17e:	4603      	mov	r3, r0
 802b180:	2b00      	cmp	r3, #0
 802b182:	dc93      	bgt.n	802b0ac <remove_recursively_files_and_directories+0x38>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802b184:	490b      	ldr	r1, [pc, #44]	; (802b1b4 <remove_recursively_files_and_directories+0x140>)
 802b186:	480c      	ldr	r0, [pc, #48]	; (802b1b8 <remove_recursively_files_and_directories+0x144>)
 802b188:	f7ff fc78 	bl	802aa7c <lfs_dir_close>
        if (deep >= 1){
 802b18c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b190:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b194:	781b      	ldrb	r3, [r3, #0]
 802b196:	2b00      	cmp	r3, #0
 802b198:	d007      	beq.n	802b1aa <remove_recursively_files_and_directories+0x136>
        	lfs_remove(&lfs, path);
 802b19a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b19e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b1a2:	6819      	ldr	r1, [r3, #0]
 802b1a4:	4804      	ldr	r0, [pc, #16]	; (802b1b8 <remove_recursively_files_and_directories+0x144>)
 802b1a6:	f7ff fae9 	bl	802a77c <lfs_remove>
        }

    }
}
 802b1aa:	bf00      	nop
 802b1ac:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802b1b0:	46bd      	mov	sp, r7
 802b1b2:	bd80      	pop	{r7, pc}
 802b1b4:	2000d79c 	.word	0x2000d79c
 802b1b8:	2000d6d0 	.word	0x2000d6d0
 802b1bc:	08033fe4 	.word	0x08033fe4
 802b1c0:	08033fe8 	.word	0x08033fe8
 802b1c4:	08033fec 	.word	0x08033fec
 802b1c8:	08033ffc 	.word	0x08033ffc
 802b1cc:	08034004 	.word	0x08034004

0802b1d0 <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802b1d0:	b580      	push	{r7, lr}
 802b1d2:	b084      	sub	sp, #16
 802b1d4:	af00      	add	r7, sp, #0
 802b1d6:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b1d8:	4b0b      	ldr	r3, [pc, #44]	; (802b208 <spi_fs_remove_recurcuve_in+0x38>)
 802b1da:	681b      	ldr	r3, [r3, #0]
 802b1dc:	4798      	blx	r3
#endif
	uint8_t deep = 0;
 802b1de:	2300      	movs	r3, #0
 802b1e0:	73fb      	strb	r3, [r7, #15]

	remove_recursively_files_and_directories(path, deep);
 802b1e2:	7bfb      	ldrb	r3, [r7, #15]
 802b1e4:	4619      	mov	r1, r3
 802b1e6:	6878      	ldr	r0, [r7, #4]
 802b1e8:	f7ff ff44 	bl	802b074 <remove_recursively_files_and_directories>
	deep = 0;
 802b1ec:	2300      	movs	r3, #0
 802b1ee:	73fb      	strb	r3, [r7, #15]
	remove_recursively_files_and_directories(path, deep);
 802b1f0:	7bfb      	ldrb	r3, [r7, #15]
 802b1f2:	4619      	mov	r1, r3
 802b1f4:	6878      	ldr	r0, [r7, #4]
 802b1f6:	f7ff ff3d 	bl	802b074 <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b1fa:	4b04      	ldr	r3, [pc, #16]	; (802b20c <spi_fs_remove_recurcuve_in+0x3c>)
 802b1fc:	681b      	ldr	r3, [r3, #0]
 802b1fe:	4798      	blx	r3
#endif
}
 802b200:	bf00      	nop
 802b202:	3710      	adds	r7, #16
 802b204:	46bd      	mov	sp, r7
 802b206:	bd80      	pop	{r7, pc}
 802b208:	2000d9c0 	.word	0x2000d9c0
 802b20c:	2000d9c4 	.word	0x2000d9c4

0802b210 <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802b210:	b580      	push	{r7, lr}
 802b212:	b084      	sub	sp, #16
 802b214:	af00      	add	r7, sp, #0
 802b216:	6078      	str	r0, [r7, #4]
 802b218:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b21a:	4b08      	ldr	r3, [pc, #32]	; (802b23c <spi_fs_mv+0x2c>)
 802b21c:	681b      	ldr	r3, [r3, #0]
 802b21e:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802b220:	683a      	ldr	r2, [r7, #0]
 802b222:	6879      	ldr	r1, [r7, #4]
 802b224:	4806      	ldr	r0, [pc, #24]	; (802b240 <spi_fs_mv+0x30>)
 802b226:	f7ff fabf 	bl	802a7a8 <lfs_rename>
 802b22a:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b22c:	4b05      	ldr	r3, [pc, #20]	; (802b244 <spi_fs_mv+0x34>)
 802b22e:	681b      	ldr	r3, [r3, #0]
 802b230:	4798      	blx	r3
#endif
	return err;
 802b232:	68fb      	ldr	r3, [r7, #12]
}
 802b234:	4618      	mov	r0, r3
 802b236:	3710      	adds	r7, #16
 802b238:	46bd      	mov	sp, r7
 802b23a:	bd80      	pop	{r7, pc}
 802b23c:	2000d9c0 	.word	0x2000d9c0
 802b240:	2000d6d0 	.word	0x2000d6d0
 802b244:	2000d9c4 	.word	0x2000d9c4

0802b248 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802b248:	b480      	push	{r7}
 802b24a:	b08b      	sub	sp, #44	; 0x2c
 802b24c:	af00      	add	r7, sp, #0
 802b24e:	60f8      	str	r0, [r7, #12]
 802b250:	60b9      	str	r1, [r7, #8]
 802b252:	607a      	str	r2, [r7, #4]
 802b254:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802b256:	2300      	movs	r3, #0
 802b258:	61fb      	str	r3, [r7, #28]
 802b25a:	2300      	movs	r3, #0
 802b25c:	623b      	str	r3, [r7, #32]
 802b25e:	6a3b      	ldr	r3, [r7, #32]
 802b260:	627b      	str	r3, [r7, #36]	; 0x24
 802b262:	e06f      	b.n	802b344 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802b264:	2300      	movs	r3, #0
 802b266:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b268:	e005      	b.n	802b276 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b26c:	3301      	adds	r3, #1
 802b26e:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 802b270:	69bb      	ldr	r3, [r7, #24]
 802b272:	3301      	adds	r3, #1
 802b274:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b27a:	429a      	cmp	r2, r3
 802b27c:	d205      	bcs.n	802b28a <mbedtls_base64_decode+0x42>
 802b27e:	683a      	ldr	r2, [r7, #0]
 802b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b282:	4413      	add	r3, r2
 802b284:	781b      	ldrb	r3, [r3, #0]
 802b286:	2b20      	cmp	r3, #32
 802b288:	d0ef      	beq.n	802b26a <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802b28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b28e:	429a      	cmp	r2, r3
 802b290:	d05d      	beq.n	802b34e <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802b292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b296:	1ad3      	subs	r3, r2, r3
 802b298:	2b01      	cmp	r3, #1
 802b29a:	d90c      	bls.n	802b2b6 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b29c:	683a      	ldr	r2, [r7, #0]
 802b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2a0:	4413      	add	r3, r2
 802b2a2:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802b2a4:	2b0d      	cmp	r3, #13
 802b2a6:	d106      	bne.n	802b2b6 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2aa:	3301      	adds	r3, #1
 802b2ac:	683a      	ldr	r2, [r7, #0]
 802b2ae:	4413      	add	r3, r2
 802b2b0:	781b      	ldrb	r3, [r3, #0]
 802b2b2:	2b0a      	cmp	r3, #10
 802b2b4:	d040      	beq.n	802b338 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802b2b6:	683a      	ldr	r2, [r7, #0]
 802b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2ba:	4413      	add	r3, r2
 802b2bc:	781b      	ldrb	r3, [r3, #0]
 802b2be:	2b0a      	cmp	r3, #10
 802b2c0:	d03c      	beq.n	802b33c <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802b2c2:	69bb      	ldr	r3, [r7, #24]
 802b2c4:	2b00      	cmp	r3, #0
 802b2c6:	d002      	beq.n	802b2ce <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b2c8:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b2cc:	e0d0      	b.n	802b470 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802b2ce:	683a      	ldr	r2, [r7, #0]
 802b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2d2:	4413      	add	r3, r2
 802b2d4:	781b      	ldrb	r3, [r3, #0]
 802b2d6:	2b3d      	cmp	r3, #61	; 0x3d
 802b2d8:	d108      	bne.n	802b2ec <mbedtls_base64_decode+0xa4>
 802b2da:	69fb      	ldr	r3, [r7, #28]
 802b2dc:	3301      	adds	r3, #1
 802b2de:	61fb      	str	r3, [r7, #28]
 802b2e0:	69fb      	ldr	r3, [r7, #28]
 802b2e2:	2b02      	cmp	r3, #2
 802b2e4:	d902      	bls.n	802b2ec <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b2e6:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b2ea:	e0c1      	b.n	802b470 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802b2ec:	683a      	ldr	r2, [r7, #0]
 802b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2f0:	4413      	add	r3, r2
 802b2f2:	781b      	ldrb	r3, [r3, #0]
 802b2f4:	b25b      	sxtb	r3, r3
 802b2f6:	2b00      	cmp	r3, #0
 802b2f8:	db08      	blt.n	802b30c <mbedtls_base64_decode+0xc4>
 802b2fa:	683a      	ldr	r2, [r7, #0]
 802b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2fe:	4413      	add	r3, r2
 802b300:	781b      	ldrb	r3, [r3, #0]
 802b302:	461a      	mov	r2, r3
 802b304:	4b5d      	ldr	r3, [pc, #372]	; (802b47c <mbedtls_base64_decode+0x234>)
 802b306:	5c9b      	ldrb	r3, [r3, r2]
 802b308:	2b7f      	cmp	r3, #127	; 0x7f
 802b30a:	d102      	bne.n	802b312 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b30c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b310:	e0ae      	b.n	802b470 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802b312:	683a      	ldr	r2, [r7, #0]
 802b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b316:	4413      	add	r3, r2
 802b318:	781b      	ldrb	r3, [r3, #0]
 802b31a:	461a      	mov	r2, r3
 802b31c:	4b57      	ldr	r3, [pc, #348]	; (802b47c <mbedtls_base64_decode+0x234>)
 802b31e:	5c9b      	ldrb	r3, [r3, r2]
 802b320:	2b3f      	cmp	r3, #63	; 0x3f
 802b322:	d805      	bhi.n	802b330 <mbedtls_base64_decode+0xe8>
 802b324:	69fb      	ldr	r3, [r7, #28]
 802b326:	2b00      	cmp	r3, #0
 802b328:	d002      	beq.n	802b330 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b32a:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b32e:	e09f      	b.n	802b470 <mbedtls_base64_decode+0x228>

        n++;
 802b330:	6a3b      	ldr	r3, [r7, #32]
 802b332:	3301      	adds	r3, #1
 802b334:	623b      	str	r3, [r7, #32]
 802b336:	e002      	b.n	802b33e <mbedtls_base64_decode+0xf6>
            continue;
 802b338:	bf00      	nop
 802b33a:	e000      	b.n	802b33e <mbedtls_base64_decode+0xf6>
            continue;
 802b33c:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b340:	3301      	adds	r3, #1
 802b342:	627b      	str	r3, [r7, #36]	; 0x24
 802b344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b348:	429a      	cmp	r2, r3
 802b34a:	d38b      	bcc.n	802b264 <mbedtls_base64_decode+0x1c>
 802b34c:	e000      	b.n	802b350 <mbedtls_base64_decode+0x108>
            break;
 802b34e:	bf00      	nop
    }

    if( n == 0 )
 802b350:	6a3b      	ldr	r3, [r7, #32]
 802b352:	2b00      	cmp	r3, #0
 802b354:	d104      	bne.n	802b360 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802b356:	687b      	ldr	r3, [r7, #4]
 802b358:	2200      	movs	r2, #0
 802b35a:	601a      	str	r2, [r3, #0]
        return( 0 );
 802b35c:	2300      	movs	r3, #0
 802b35e:	e087      	b.n	802b470 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802b360:	6a3b      	ldr	r3, [r7, #32]
 802b362:	08da      	lsrs	r2, r3, #3
 802b364:	4613      	mov	r3, r2
 802b366:	005b      	lsls	r3, r3, #1
 802b368:	4413      	add	r3, r2
 802b36a:	005b      	lsls	r3, r3, #1
 802b36c:	4619      	mov	r1, r3
 802b36e:	6a3b      	ldr	r3, [r7, #32]
 802b370:	f003 0207 	and.w	r2, r3, #7
 802b374:	4613      	mov	r3, r2
 802b376:	005b      	lsls	r3, r3, #1
 802b378:	4413      	add	r3, r2
 802b37a:	005b      	lsls	r3, r3, #1
 802b37c:	3307      	adds	r3, #7
 802b37e:	08db      	lsrs	r3, r3, #3
 802b380:	440b      	add	r3, r1
 802b382:	623b      	str	r3, [r7, #32]
    n -= j;
 802b384:	6a3a      	ldr	r2, [r7, #32]
 802b386:	69fb      	ldr	r3, [r7, #28]
 802b388:	1ad3      	subs	r3, r2, r3
 802b38a:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802b38c:	68fb      	ldr	r3, [r7, #12]
 802b38e:	2b00      	cmp	r3, #0
 802b390:	d003      	beq.n	802b39a <mbedtls_base64_decode+0x152>
 802b392:	68ba      	ldr	r2, [r7, #8]
 802b394:	6a3b      	ldr	r3, [r7, #32]
 802b396:	429a      	cmp	r2, r3
 802b398:	d205      	bcs.n	802b3a6 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802b39a:	687b      	ldr	r3, [r7, #4]
 802b39c:	6a3a      	ldr	r2, [r7, #32]
 802b39e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802b3a0:	f06f 0329 	mvn.w	r3, #41	; 0x29
 802b3a4:	e064      	b.n	802b470 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b3a6:	2303      	movs	r3, #3
 802b3a8:	61fb      	str	r3, [r7, #28]
 802b3aa:	2300      	movs	r3, #0
 802b3ac:	61bb      	str	r3, [r7, #24]
 802b3ae:	2300      	movs	r3, #0
 802b3b0:	623b      	str	r3, [r7, #32]
 802b3b2:	68fb      	ldr	r3, [r7, #12]
 802b3b4:	617b      	str	r3, [r7, #20]
 802b3b6:	e051      	b.n	802b45c <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802b3b8:	683b      	ldr	r3, [r7, #0]
 802b3ba:	781b      	ldrb	r3, [r3, #0]
 802b3bc:	2b0d      	cmp	r3, #13
 802b3be:	d046      	beq.n	802b44e <mbedtls_base64_decode+0x206>
 802b3c0:	683b      	ldr	r3, [r7, #0]
 802b3c2:	781b      	ldrb	r3, [r3, #0]
 802b3c4:	2b0a      	cmp	r3, #10
 802b3c6:	d042      	beq.n	802b44e <mbedtls_base64_decode+0x206>
 802b3c8:	683b      	ldr	r3, [r7, #0]
 802b3ca:	781b      	ldrb	r3, [r3, #0]
 802b3cc:	2b20      	cmp	r3, #32
 802b3ce:	d03e      	beq.n	802b44e <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802b3d0:	683b      	ldr	r3, [r7, #0]
 802b3d2:	781b      	ldrb	r3, [r3, #0]
 802b3d4:	461a      	mov	r2, r3
 802b3d6:	4b29      	ldr	r3, [pc, #164]	; (802b47c <mbedtls_base64_decode+0x234>)
 802b3d8:	5c9b      	ldrb	r3, [r3, r2]
 802b3da:	2b40      	cmp	r3, #64	; 0x40
 802b3dc:	bf0c      	ite	eq
 802b3de:	2301      	moveq	r3, #1
 802b3e0:	2300      	movne	r3, #0
 802b3e2:	b2db      	uxtb	r3, r3
 802b3e4:	461a      	mov	r2, r3
 802b3e6:	69fb      	ldr	r3, [r7, #28]
 802b3e8:	1a9b      	subs	r3, r3, r2
 802b3ea:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802b3ec:	69bb      	ldr	r3, [r7, #24]
 802b3ee:	019a      	lsls	r2, r3, #6
 802b3f0:	683b      	ldr	r3, [r7, #0]
 802b3f2:	781b      	ldrb	r3, [r3, #0]
 802b3f4:	4619      	mov	r1, r3
 802b3f6:	4b21      	ldr	r3, [pc, #132]	; (802b47c <mbedtls_base64_decode+0x234>)
 802b3f8:	5c5b      	ldrb	r3, [r3, r1]
 802b3fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b3fe:	4313      	orrs	r3, r2
 802b400:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802b402:	6a3b      	ldr	r3, [r7, #32]
 802b404:	3301      	adds	r3, #1
 802b406:	623b      	str	r3, [r7, #32]
 802b408:	6a3b      	ldr	r3, [r7, #32]
 802b40a:	2b04      	cmp	r3, #4
 802b40c:	d120      	bne.n	802b450 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802b40e:	2300      	movs	r3, #0
 802b410:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802b412:	69fb      	ldr	r3, [r7, #28]
 802b414:	2b00      	cmp	r3, #0
 802b416:	d006      	beq.n	802b426 <mbedtls_base64_decode+0x1de>
 802b418:	69bb      	ldr	r3, [r7, #24]
 802b41a:	0c19      	lsrs	r1, r3, #16
 802b41c:	697b      	ldr	r3, [r7, #20]
 802b41e:	1c5a      	adds	r2, r3, #1
 802b420:	617a      	str	r2, [r7, #20]
 802b422:	b2ca      	uxtb	r2, r1
 802b424:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802b426:	69fb      	ldr	r3, [r7, #28]
 802b428:	2b01      	cmp	r3, #1
 802b42a:	d906      	bls.n	802b43a <mbedtls_base64_decode+0x1f2>
 802b42c:	69bb      	ldr	r3, [r7, #24]
 802b42e:	0a19      	lsrs	r1, r3, #8
 802b430:	697b      	ldr	r3, [r7, #20]
 802b432:	1c5a      	adds	r2, r3, #1
 802b434:	617a      	str	r2, [r7, #20]
 802b436:	b2ca      	uxtb	r2, r1
 802b438:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802b43a:	69fb      	ldr	r3, [r7, #28]
 802b43c:	2b02      	cmp	r3, #2
 802b43e:	d907      	bls.n	802b450 <mbedtls_base64_decode+0x208>
 802b440:	697b      	ldr	r3, [r7, #20]
 802b442:	1c5a      	adds	r2, r3, #1
 802b444:	617a      	str	r2, [r7, #20]
 802b446:	69ba      	ldr	r2, [r7, #24]
 802b448:	b2d2      	uxtb	r2, r2
 802b44a:	701a      	strb	r2, [r3, #0]
 802b44c:	e000      	b.n	802b450 <mbedtls_base64_decode+0x208>
            continue;
 802b44e:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b452:	3b01      	subs	r3, #1
 802b454:	627b      	str	r3, [r7, #36]	; 0x24
 802b456:	683b      	ldr	r3, [r7, #0]
 802b458:	3301      	adds	r3, #1
 802b45a:	603b      	str	r3, [r7, #0]
 802b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b45e:	2b00      	cmp	r3, #0
 802b460:	d1aa      	bne.n	802b3b8 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802b462:	697a      	ldr	r2, [r7, #20]
 802b464:	68fb      	ldr	r3, [r7, #12]
 802b466:	1ad3      	subs	r3, r2, r3
 802b468:	461a      	mov	r2, r3
 802b46a:	687b      	ldr	r3, [r7, #4]
 802b46c:	601a      	str	r2, [r3, #0]

    return( 0 );
 802b46e:	2300      	movs	r3, #0
}
 802b470:	4618      	mov	r0, r3
 802b472:	372c      	adds	r7, #44	; 0x2c
 802b474:	46bd      	mov	sp, r7
 802b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b47a:	4770      	bx	lr
 802b47c:	08034ae4 	.word	0x08034ae4

0802b480 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802b480:	b580      	push	{r7, lr}
 802b482:	b082      	sub	sp, #8
 802b484:	af00      	add	r7, sp, #0
 802b486:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802b488:	2258      	movs	r2, #88	; 0x58
 802b48a:	2100      	movs	r1, #0
 802b48c:	6878      	ldr	r0, [r7, #4]
 802b48e:	f002 fa4d 	bl	802d92c <memset>
}
 802b492:	bf00      	nop
 802b494:	3708      	adds	r7, #8
 802b496:	46bd      	mov	sp, r7
 802b498:	bd80      	pop	{r7, pc}

0802b49a <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802b49a:	b580      	push	{r7, lr}
 802b49c:	b082      	sub	sp, #8
 802b49e:	af00      	add	r7, sp, #0
 802b4a0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802b4a2:	687b      	ldr	r3, [r7, #4]
 802b4a4:	2b00      	cmp	r3, #0
 802b4a6:	d004      	beq.n	802b4b2 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802b4a8:	2158      	movs	r1, #88	; 0x58
 802b4aa:	6878      	ldr	r0, [r7, #4]
 802b4ac:	f001 f85c 	bl	802c568 <mbedtls_platform_zeroize>
 802b4b0:	e000      	b.n	802b4b4 <mbedtls_md5_free+0x1a>
        return;
 802b4b2:	bf00      	nop
}
 802b4b4:	3708      	adds	r7, #8
 802b4b6:	46bd      	mov	sp, r7
 802b4b8:	bd80      	pop	{r7, pc}
	...

0802b4bc <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802b4bc:	b480      	push	{r7}
 802b4be:	b083      	sub	sp, #12
 802b4c0:	af00      	add	r7, sp, #0
 802b4c2:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802b4c4:	687b      	ldr	r3, [r7, #4]
 802b4c6:	2200      	movs	r2, #0
 802b4c8:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802b4ca:	687b      	ldr	r3, [r7, #4]
 802b4cc:	2200      	movs	r2, #0
 802b4ce:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802b4d0:	687b      	ldr	r3, [r7, #4]
 802b4d2:	4a09      	ldr	r2, [pc, #36]	; (802b4f8 <mbedtls_md5_starts_ret+0x3c>)
 802b4d4:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802b4d6:	687b      	ldr	r3, [r7, #4]
 802b4d8:	4a08      	ldr	r2, [pc, #32]	; (802b4fc <mbedtls_md5_starts_ret+0x40>)
 802b4da:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802b4dc:	687b      	ldr	r3, [r7, #4]
 802b4de:	4a08      	ldr	r2, [pc, #32]	; (802b500 <mbedtls_md5_starts_ret+0x44>)
 802b4e0:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802b4e2:	687b      	ldr	r3, [r7, #4]
 802b4e4:	4a07      	ldr	r2, [pc, #28]	; (802b504 <mbedtls_md5_starts_ret+0x48>)
 802b4e6:	615a      	str	r2, [r3, #20]

    return( 0 );
 802b4e8:	2300      	movs	r3, #0
}
 802b4ea:	4618      	mov	r0, r3
 802b4ec:	370c      	adds	r7, #12
 802b4ee:	46bd      	mov	sp, r7
 802b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4f4:	4770      	bx	lr
 802b4f6:	bf00      	nop
 802b4f8:	67452301 	.word	0x67452301
 802b4fc:	efcdab89 	.word	0xefcdab89
 802b500:	98badcfe 	.word	0x98badcfe
 802b504:	10325476 	.word	0x10325476

0802b508 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802b508:	b480      	push	{r7}
 802b50a:	b097      	sub	sp, #92	; 0x5c
 802b50c:	af00      	add	r7, sp, #0
 802b50e:	6078      	str	r0, [r7, #4]
 802b510:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802b512:	683b      	ldr	r3, [r7, #0]
 802b514:	781b      	ldrb	r3, [r3, #0]
 802b516:	461a      	mov	r2, r3
 802b518:	683b      	ldr	r3, [r7, #0]
 802b51a:	3301      	adds	r3, #1
 802b51c:	781b      	ldrb	r3, [r3, #0]
 802b51e:	021b      	lsls	r3, r3, #8
 802b520:	431a      	orrs	r2, r3
 802b522:	683b      	ldr	r3, [r7, #0]
 802b524:	3302      	adds	r3, #2
 802b526:	781b      	ldrb	r3, [r3, #0]
 802b528:	041b      	lsls	r3, r3, #16
 802b52a:	431a      	orrs	r2, r3
 802b52c:	683b      	ldr	r3, [r7, #0]
 802b52e:	3303      	adds	r3, #3
 802b530:	781b      	ldrb	r3, [r3, #0]
 802b532:	061b      	lsls	r3, r3, #24
 802b534:	4313      	orrs	r3, r2
 802b536:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802b538:	683b      	ldr	r3, [r7, #0]
 802b53a:	3304      	adds	r3, #4
 802b53c:	781b      	ldrb	r3, [r3, #0]
 802b53e:	461a      	mov	r2, r3
 802b540:	683b      	ldr	r3, [r7, #0]
 802b542:	3305      	adds	r3, #5
 802b544:	781b      	ldrb	r3, [r3, #0]
 802b546:	021b      	lsls	r3, r3, #8
 802b548:	431a      	orrs	r2, r3
 802b54a:	683b      	ldr	r3, [r7, #0]
 802b54c:	3306      	adds	r3, #6
 802b54e:	781b      	ldrb	r3, [r3, #0]
 802b550:	041b      	lsls	r3, r3, #16
 802b552:	431a      	orrs	r2, r3
 802b554:	683b      	ldr	r3, [r7, #0]
 802b556:	3307      	adds	r3, #7
 802b558:	781b      	ldrb	r3, [r3, #0]
 802b55a:	061b      	lsls	r3, r3, #24
 802b55c:	4313      	orrs	r3, r2
 802b55e:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802b560:	683b      	ldr	r3, [r7, #0]
 802b562:	3308      	adds	r3, #8
 802b564:	781b      	ldrb	r3, [r3, #0]
 802b566:	461a      	mov	r2, r3
 802b568:	683b      	ldr	r3, [r7, #0]
 802b56a:	3309      	adds	r3, #9
 802b56c:	781b      	ldrb	r3, [r3, #0]
 802b56e:	021b      	lsls	r3, r3, #8
 802b570:	431a      	orrs	r2, r3
 802b572:	683b      	ldr	r3, [r7, #0]
 802b574:	330a      	adds	r3, #10
 802b576:	781b      	ldrb	r3, [r3, #0]
 802b578:	041b      	lsls	r3, r3, #16
 802b57a:	431a      	orrs	r2, r3
 802b57c:	683b      	ldr	r3, [r7, #0]
 802b57e:	330b      	adds	r3, #11
 802b580:	781b      	ldrb	r3, [r3, #0]
 802b582:	061b      	lsls	r3, r3, #24
 802b584:	4313      	orrs	r3, r2
 802b586:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802b588:	683b      	ldr	r3, [r7, #0]
 802b58a:	330c      	adds	r3, #12
 802b58c:	781b      	ldrb	r3, [r3, #0]
 802b58e:	461a      	mov	r2, r3
 802b590:	683b      	ldr	r3, [r7, #0]
 802b592:	330d      	adds	r3, #13
 802b594:	781b      	ldrb	r3, [r3, #0]
 802b596:	021b      	lsls	r3, r3, #8
 802b598:	431a      	orrs	r2, r3
 802b59a:	683b      	ldr	r3, [r7, #0]
 802b59c:	330e      	adds	r3, #14
 802b59e:	781b      	ldrb	r3, [r3, #0]
 802b5a0:	041b      	lsls	r3, r3, #16
 802b5a2:	431a      	orrs	r2, r3
 802b5a4:	683b      	ldr	r3, [r7, #0]
 802b5a6:	330f      	adds	r3, #15
 802b5a8:	781b      	ldrb	r3, [r3, #0]
 802b5aa:	061b      	lsls	r3, r3, #24
 802b5ac:	4313      	orrs	r3, r2
 802b5ae:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802b5b0:	683b      	ldr	r3, [r7, #0]
 802b5b2:	3310      	adds	r3, #16
 802b5b4:	781b      	ldrb	r3, [r3, #0]
 802b5b6:	461a      	mov	r2, r3
 802b5b8:	683b      	ldr	r3, [r7, #0]
 802b5ba:	3311      	adds	r3, #17
 802b5bc:	781b      	ldrb	r3, [r3, #0]
 802b5be:	021b      	lsls	r3, r3, #8
 802b5c0:	431a      	orrs	r2, r3
 802b5c2:	683b      	ldr	r3, [r7, #0]
 802b5c4:	3312      	adds	r3, #18
 802b5c6:	781b      	ldrb	r3, [r3, #0]
 802b5c8:	041b      	lsls	r3, r3, #16
 802b5ca:	431a      	orrs	r2, r3
 802b5cc:	683b      	ldr	r3, [r7, #0]
 802b5ce:	3313      	adds	r3, #19
 802b5d0:	781b      	ldrb	r3, [r3, #0]
 802b5d2:	061b      	lsls	r3, r3, #24
 802b5d4:	4313      	orrs	r3, r2
 802b5d6:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b5d8:	683b      	ldr	r3, [r7, #0]
 802b5da:	3314      	adds	r3, #20
 802b5dc:	781b      	ldrb	r3, [r3, #0]
 802b5de:	461a      	mov	r2, r3
 802b5e0:	683b      	ldr	r3, [r7, #0]
 802b5e2:	3315      	adds	r3, #21
 802b5e4:	781b      	ldrb	r3, [r3, #0]
 802b5e6:	021b      	lsls	r3, r3, #8
 802b5e8:	431a      	orrs	r2, r3
 802b5ea:	683b      	ldr	r3, [r7, #0]
 802b5ec:	3316      	adds	r3, #22
 802b5ee:	781b      	ldrb	r3, [r3, #0]
 802b5f0:	041b      	lsls	r3, r3, #16
 802b5f2:	431a      	orrs	r2, r3
 802b5f4:	683b      	ldr	r3, [r7, #0]
 802b5f6:	3317      	adds	r3, #23
 802b5f8:	781b      	ldrb	r3, [r3, #0]
 802b5fa:	061b      	lsls	r3, r3, #24
 802b5fc:	4313      	orrs	r3, r2
 802b5fe:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b600:	683b      	ldr	r3, [r7, #0]
 802b602:	3318      	adds	r3, #24
 802b604:	781b      	ldrb	r3, [r3, #0]
 802b606:	461a      	mov	r2, r3
 802b608:	683b      	ldr	r3, [r7, #0]
 802b60a:	3319      	adds	r3, #25
 802b60c:	781b      	ldrb	r3, [r3, #0]
 802b60e:	021b      	lsls	r3, r3, #8
 802b610:	431a      	orrs	r2, r3
 802b612:	683b      	ldr	r3, [r7, #0]
 802b614:	331a      	adds	r3, #26
 802b616:	781b      	ldrb	r3, [r3, #0]
 802b618:	041b      	lsls	r3, r3, #16
 802b61a:	431a      	orrs	r2, r3
 802b61c:	683b      	ldr	r3, [r7, #0]
 802b61e:	331b      	adds	r3, #27
 802b620:	781b      	ldrb	r3, [r3, #0]
 802b622:	061b      	lsls	r3, r3, #24
 802b624:	4313      	orrs	r3, r2
 802b626:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b628:	683b      	ldr	r3, [r7, #0]
 802b62a:	331c      	adds	r3, #28
 802b62c:	781b      	ldrb	r3, [r3, #0]
 802b62e:	461a      	mov	r2, r3
 802b630:	683b      	ldr	r3, [r7, #0]
 802b632:	331d      	adds	r3, #29
 802b634:	781b      	ldrb	r3, [r3, #0]
 802b636:	021b      	lsls	r3, r3, #8
 802b638:	431a      	orrs	r2, r3
 802b63a:	683b      	ldr	r3, [r7, #0]
 802b63c:	331e      	adds	r3, #30
 802b63e:	781b      	ldrb	r3, [r3, #0]
 802b640:	041b      	lsls	r3, r3, #16
 802b642:	431a      	orrs	r2, r3
 802b644:	683b      	ldr	r3, [r7, #0]
 802b646:	331f      	adds	r3, #31
 802b648:	781b      	ldrb	r3, [r3, #0]
 802b64a:	061b      	lsls	r3, r3, #24
 802b64c:	4313      	orrs	r3, r2
 802b64e:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b650:	683b      	ldr	r3, [r7, #0]
 802b652:	3320      	adds	r3, #32
 802b654:	781b      	ldrb	r3, [r3, #0]
 802b656:	461a      	mov	r2, r3
 802b658:	683b      	ldr	r3, [r7, #0]
 802b65a:	3321      	adds	r3, #33	; 0x21
 802b65c:	781b      	ldrb	r3, [r3, #0]
 802b65e:	021b      	lsls	r3, r3, #8
 802b660:	431a      	orrs	r2, r3
 802b662:	683b      	ldr	r3, [r7, #0]
 802b664:	3322      	adds	r3, #34	; 0x22
 802b666:	781b      	ldrb	r3, [r3, #0]
 802b668:	041b      	lsls	r3, r3, #16
 802b66a:	431a      	orrs	r2, r3
 802b66c:	683b      	ldr	r3, [r7, #0]
 802b66e:	3323      	adds	r3, #35	; 0x23
 802b670:	781b      	ldrb	r3, [r3, #0]
 802b672:	061b      	lsls	r3, r3, #24
 802b674:	4313      	orrs	r3, r2
 802b676:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b678:	683b      	ldr	r3, [r7, #0]
 802b67a:	3324      	adds	r3, #36	; 0x24
 802b67c:	781b      	ldrb	r3, [r3, #0]
 802b67e:	461a      	mov	r2, r3
 802b680:	683b      	ldr	r3, [r7, #0]
 802b682:	3325      	adds	r3, #37	; 0x25
 802b684:	781b      	ldrb	r3, [r3, #0]
 802b686:	021b      	lsls	r3, r3, #8
 802b688:	431a      	orrs	r2, r3
 802b68a:	683b      	ldr	r3, [r7, #0]
 802b68c:	3326      	adds	r3, #38	; 0x26
 802b68e:	781b      	ldrb	r3, [r3, #0]
 802b690:	041b      	lsls	r3, r3, #16
 802b692:	431a      	orrs	r2, r3
 802b694:	683b      	ldr	r3, [r7, #0]
 802b696:	3327      	adds	r3, #39	; 0x27
 802b698:	781b      	ldrb	r3, [r3, #0]
 802b69a:	061b      	lsls	r3, r3, #24
 802b69c:	4313      	orrs	r3, r2
 802b69e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b6a0:	683b      	ldr	r3, [r7, #0]
 802b6a2:	3328      	adds	r3, #40	; 0x28
 802b6a4:	781b      	ldrb	r3, [r3, #0]
 802b6a6:	461a      	mov	r2, r3
 802b6a8:	683b      	ldr	r3, [r7, #0]
 802b6aa:	3329      	adds	r3, #41	; 0x29
 802b6ac:	781b      	ldrb	r3, [r3, #0]
 802b6ae:	021b      	lsls	r3, r3, #8
 802b6b0:	431a      	orrs	r2, r3
 802b6b2:	683b      	ldr	r3, [r7, #0]
 802b6b4:	332a      	adds	r3, #42	; 0x2a
 802b6b6:	781b      	ldrb	r3, [r3, #0]
 802b6b8:	041b      	lsls	r3, r3, #16
 802b6ba:	431a      	orrs	r2, r3
 802b6bc:	683b      	ldr	r3, [r7, #0]
 802b6be:	332b      	adds	r3, #43	; 0x2b
 802b6c0:	781b      	ldrb	r3, [r3, #0]
 802b6c2:	061b      	lsls	r3, r3, #24
 802b6c4:	4313      	orrs	r3, r2
 802b6c6:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b6c8:	683b      	ldr	r3, [r7, #0]
 802b6ca:	332c      	adds	r3, #44	; 0x2c
 802b6cc:	781b      	ldrb	r3, [r3, #0]
 802b6ce:	461a      	mov	r2, r3
 802b6d0:	683b      	ldr	r3, [r7, #0]
 802b6d2:	332d      	adds	r3, #45	; 0x2d
 802b6d4:	781b      	ldrb	r3, [r3, #0]
 802b6d6:	021b      	lsls	r3, r3, #8
 802b6d8:	431a      	orrs	r2, r3
 802b6da:	683b      	ldr	r3, [r7, #0]
 802b6dc:	332e      	adds	r3, #46	; 0x2e
 802b6de:	781b      	ldrb	r3, [r3, #0]
 802b6e0:	041b      	lsls	r3, r3, #16
 802b6e2:	431a      	orrs	r2, r3
 802b6e4:	683b      	ldr	r3, [r7, #0]
 802b6e6:	332f      	adds	r3, #47	; 0x2f
 802b6e8:	781b      	ldrb	r3, [r3, #0]
 802b6ea:	061b      	lsls	r3, r3, #24
 802b6ec:	4313      	orrs	r3, r2
 802b6ee:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b6f0:	683b      	ldr	r3, [r7, #0]
 802b6f2:	3330      	adds	r3, #48	; 0x30
 802b6f4:	781b      	ldrb	r3, [r3, #0]
 802b6f6:	461a      	mov	r2, r3
 802b6f8:	683b      	ldr	r3, [r7, #0]
 802b6fa:	3331      	adds	r3, #49	; 0x31
 802b6fc:	781b      	ldrb	r3, [r3, #0]
 802b6fe:	021b      	lsls	r3, r3, #8
 802b700:	431a      	orrs	r2, r3
 802b702:	683b      	ldr	r3, [r7, #0]
 802b704:	3332      	adds	r3, #50	; 0x32
 802b706:	781b      	ldrb	r3, [r3, #0]
 802b708:	041b      	lsls	r3, r3, #16
 802b70a:	431a      	orrs	r2, r3
 802b70c:	683b      	ldr	r3, [r7, #0]
 802b70e:	3333      	adds	r3, #51	; 0x33
 802b710:	781b      	ldrb	r3, [r3, #0]
 802b712:	061b      	lsls	r3, r3, #24
 802b714:	4313      	orrs	r3, r2
 802b716:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b718:	683b      	ldr	r3, [r7, #0]
 802b71a:	3334      	adds	r3, #52	; 0x34
 802b71c:	781b      	ldrb	r3, [r3, #0]
 802b71e:	461a      	mov	r2, r3
 802b720:	683b      	ldr	r3, [r7, #0]
 802b722:	3335      	adds	r3, #53	; 0x35
 802b724:	781b      	ldrb	r3, [r3, #0]
 802b726:	021b      	lsls	r3, r3, #8
 802b728:	431a      	orrs	r2, r3
 802b72a:	683b      	ldr	r3, [r7, #0]
 802b72c:	3336      	adds	r3, #54	; 0x36
 802b72e:	781b      	ldrb	r3, [r3, #0]
 802b730:	041b      	lsls	r3, r3, #16
 802b732:	431a      	orrs	r2, r3
 802b734:	683b      	ldr	r3, [r7, #0]
 802b736:	3337      	adds	r3, #55	; 0x37
 802b738:	781b      	ldrb	r3, [r3, #0]
 802b73a:	061b      	lsls	r3, r3, #24
 802b73c:	4313      	orrs	r3, r2
 802b73e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b740:	683b      	ldr	r3, [r7, #0]
 802b742:	3338      	adds	r3, #56	; 0x38
 802b744:	781b      	ldrb	r3, [r3, #0]
 802b746:	461a      	mov	r2, r3
 802b748:	683b      	ldr	r3, [r7, #0]
 802b74a:	3339      	adds	r3, #57	; 0x39
 802b74c:	781b      	ldrb	r3, [r3, #0]
 802b74e:	021b      	lsls	r3, r3, #8
 802b750:	431a      	orrs	r2, r3
 802b752:	683b      	ldr	r3, [r7, #0]
 802b754:	333a      	adds	r3, #58	; 0x3a
 802b756:	781b      	ldrb	r3, [r3, #0]
 802b758:	041b      	lsls	r3, r3, #16
 802b75a:	431a      	orrs	r2, r3
 802b75c:	683b      	ldr	r3, [r7, #0]
 802b75e:	333b      	adds	r3, #59	; 0x3b
 802b760:	781b      	ldrb	r3, [r3, #0]
 802b762:	061b      	lsls	r3, r3, #24
 802b764:	4313      	orrs	r3, r2
 802b766:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b768:	683b      	ldr	r3, [r7, #0]
 802b76a:	333c      	adds	r3, #60	; 0x3c
 802b76c:	781b      	ldrb	r3, [r3, #0]
 802b76e:	461a      	mov	r2, r3
 802b770:	683b      	ldr	r3, [r7, #0]
 802b772:	333d      	adds	r3, #61	; 0x3d
 802b774:	781b      	ldrb	r3, [r3, #0]
 802b776:	021b      	lsls	r3, r3, #8
 802b778:	431a      	orrs	r2, r3
 802b77a:	683b      	ldr	r3, [r7, #0]
 802b77c:	333e      	adds	r3, #62	; 0x3e
 802b77e:	781b      	ldrb	r3, [r3, #0]
 802b780:	041b      	lsls	r3, r3, #16
 802b782:	431a      	orrs	r2, r3
 802b784:	683b      	ldr	r3, [r7, #0]
 802b786:	333f      	adds	r3, #63	; 0x3f
 802b788:	781b      	ldrb	r3, [r3, #0]
 802b78a:	061b      	lsls	r3, r3, #24
 802b78c:	4313      	orrs	r3, r2
 802b78e:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802b790:	687b      	ldr	r3, [r7, #4]
 802b792:	689b      	ldr	r3, [r3, #8]
 802b794:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 802b796:	687b      	ldr	r3, [r7, #4]
 802b798:	68db      	ldr	r3, [r3, #12]
 802b79a:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 802b79c:	687b      	ldr	r3, [r7, #4]
 802b79e:	691b      	ldr	r3, [r3, #16]
 802b7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 802b7a2:	687b      	ldr	r3, [r7, #4]
 802b7a4:	695b      	ldr	r3, [r3, #20]
 802b7a6:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802b7a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7ac:	405a      	eors	r2, r3
 802b7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7b0:	401a      	ands	r2, r3
 802b7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7b4:	405a      	eors	r2, r3
 802b7b6:	68bb      	ldr	r3, [r7, #8]
 802b7b8:	441a      	add	r2, r3
 802b7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7bc:	441a      	add	r2, r3
 802b7be:	4ba5      	ldr	r3, [pc, #660]	; (802ba54 <mbedtls_internal_md5_process+0x54c>)
 802b7c0:	4413      	add	r3, r2
 802b7c2:	657b      	str	r3, [r7, #84]	; 0x54
 802b7c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7c6:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b7ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b7cc:	4413      	add	r3, r2
 802b7ce:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802b7d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7d4:	405a      	eors	r2, r3
 802b7d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7d8:	401a      	ands	r2, r3
 802b7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7dc:	405a      	eors	r2, r3
 802b7de:	68fb      	ldr	r3, [r7, #12]
 802b7e0:	441a      	add	r2, r3
 802b7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7e4:	441a      	add	r2, r3
 802b7e6:	4b9c      	ldr	r3, [pc, #624]	; (802ba58 <mbedtls_internal_md5_process+0x550>)
 802b7e8:	4413      	add	r3, r2
 802b7ea:	64bb      	str	r3, [r7, #72]	; 0x48
 802b7ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7ee:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b7f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b7f4:	4413      	add	r3, r2
 802b7f6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802b7f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7fc:	405a      	eors	r2, r3
 802b7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b800:	401a      	ands	r2, r3
 802b802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b804:	405a      	eors	r2, r3
 802b806:	693b      	ldr	r3, [r7, #16]
 802b808:	441a      	add	r2, r3
 802b80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b80c:	441a      	add	r2, r3
 802b80e:	4b93      	ldr	r3, [pc, #588]	; (802ba5c <mbedtls_internal_md5_process+0x554>)
 802b810:	4413      	add	r3, r2
 802b812:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b816:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b81a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b81c:	4413      	add	r3, r2
 802b81e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802b820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b824:	405a      	eors	r2, r3
 802b826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b828:	401a      	ands	r2, r3
 802b82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b82c:	405a      	eors	r2, r3
 802b82e:	697b      	ldr	r3, [r7, #20]
 802b830:	441a      	add	r2, r3
 802b832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b834:	441a      	add	r2, r3
 802b836:	4b8a      	ldr	r3, [pc, #552]	; (802ba60 <mbedtls_internal_md5_process+0x558>)
 802b838:	4413      	add	r3, r2
 802b83a:	653b      	str	r3, [r7, #80]	; 0x50
 802b83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b83e:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b844:	4413      	add	r3, r2
 802b846:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802b848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b84c:	405a      	eors	r2, r3
 802b84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b850:	401a      	ands	r2, r3
 802b852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b854:	405a      	eors	r2, r3
 802b856:	69bb      	ldr	r3, [r7, #24]
 802b858:	441a      	add	r2, r3
 802b85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b85c:	441a      	add	r2, r3
 802b85e:	4b81      	ldr	r3, [pc, #516]	; (802ba64 <mbedtls_internal_md5_process+0x55c>)
 802b860:	4413      	add	r3, r2
 802b862:	657b      	str	r3, [r7, #84]	; 0x54
 802b864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b866:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b86a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b86c:	4413      	add	r3, r2
 802b86e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802b870:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b874:	405a      	eors	r2, r3
 802b876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b878:	401a      	ands	r2, r3
 802b87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b87c:	405a      	eors	r2, r3
 802b87e:	69fb      	ldr	r3, [r7, #28]
 802b880:	441a      	add	r2, r3
 802b882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b884:	441a      	add	r2, r3
 802b886:	4b78      	ldr	r3, [pc, #480]	; (802ba68 <mbedtls_internal_md5_process+0x560>)
 802b888:	4413      	add	r3, r2
 802b88a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b88e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b894:	4413      	add	r3, r2
 802b896:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802b898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b89a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b89c:	405a      	eors	r2, r3
 802b89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8a0:	401a      	ands	r2, r3
 802b8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8a4:	405a      	eors	r2, r3
 802b8a6:	6a3b      	ldr	r3, [r7, #32]
 802b8a8:	441a      	add	r2, r3
 802b8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8ac:	441a      	add	r2, r3
 802b8ae:	4b6f      	ldr	r3, [pc, #444]	; (802ba6c <mbedtls_internal_md5_process+0x564>)
 802b8b0:	4413      	add	r3, r2
 802b8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8b6:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b8ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b8bc:	4413      	add	r3, r2
 802b8be:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802b8c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8c4:	405a      	eors	r2, r3
 802b8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8c8:	401a      	ands	r2, r3
 802b8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8cc:	405a      	eors	r2, r3
 802b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b8d0:	441a      	add	r2, r3
 802b8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8d4:	441a      	add	r2, r3
 802b8d6:	4b66      	ldr	r3, [pc, #408]	; (802ba70 <mbedtls_internal_md5_process+0x568>)
 802b8d8:	4413      	add	r3, r2
 802b8da:	653b      	str	r3, [r7, #80]	; 0x50
 802b8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8de:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b8e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b8e4:	4413      	add	r3, r2
 802b8e6:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802b8e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8ec:	405a      	eors	r2, r3
 802b8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8f0:	401a      	ands	r2, r3
 802b8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8f4:	405a      	eors	r2, r3
 802b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b8f8:	441a      	add	r2, r3
 802b8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8fc:	441a      	add	r2, r3
 802b8fe:	4b5d      	ldr	r3, [pc, #372]	; (802ba74 <mbedtls_internal_md5_process+0x56c>)
 802b900:	4413      	add	r3, r2
 802b902:	657b      	str	r3, [r7, #84]	; 0x54
 802b904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b906:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b90a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b90c:	4413      	add	r3, r2
 802b90e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802b910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b914:	405a      	eors	r2, r3
 802b916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b918:	401a      	ands	r2, r3
 802b91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b91c:	405a      	eors	r2, r3
 802b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b920:	441a      	add	r2, r3
 802b922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b924:	441a      	add	r2, r3
 802b926:	4b54      	ldr	r3, [pc, #336]	; (802ba78 <mbedtls_internal_md5_process+0x570>)
 802b928:	4413      	add	r3, r2
 802b92a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b92e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b934:	4413      	add	r3, r2
 802b936:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802b938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b93c:	405a      	eors	r2, r3
 802b93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b940:	401a      	ands	r2, r3
 802b942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b944:	405a      	eors	r2, r3
 802b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b948:	441a      	add	r2, r3
 802b94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b94c:	4413      	add	r3, r2
 802b94e:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 802b952:	3b4f      	subs	r3, #79	; 0x4f
 802b954:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b958:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b95c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b95e:	4413      	add	r3, r2
 802b960:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802b962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b966:	405a      	eors	r2, r3
 802b968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b96a:	401a      	ands	r2, r3
 802b96c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b96e:	405a      	eors	r2, r3
 802b970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b972:	441a      	add	r2, r3
 802b974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b976:	441a      	add	r2, r3
 802b978:	4b40      	ldr	r3, [pc, #256]	; (802ba7c <mbedtls_internal_md5_process+0x574>)
 802b97a:	4413      	add	r3, r2
 802b97c:	653b      	str	r3, [r7, #80]	; 0x50
 802b97e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b980:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b986:	4413      	add	r3, r2
 802b988:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802b98a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b98e:	405a      	eors	r2, r3
 802b990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b992:	401a      	ands	r2, r3
 802b994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b996:	405a      	eors	r2, r3
 802b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b99a:	441a      	add	r2, r3
 802b99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b99e:	441a      	add	r2, r3
 802b9a0:	4b37      	ldr	r3, [pc, #220]	; (802ba80 <mbedtls_internal_md5_process+0x578>)
 802b9a2:	4413      	add	r3, r2
 802b9a4:	657b      	str	r3, [r7, #84]	; 0x54
 802b9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9a8:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b9ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9ae:	4413      	add	r3, r2
 802b9b0:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802b9b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9b6:	405a      	eors	r2, r3
 802b9b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9ba:	401a      	ands	r2, r3
 802b9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9be:	405a      	eors	r2, r3
 802b9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b9c2:	441a      	add	r2, r3
 802b9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9c6:	441a      	add	r2, r3
 802b9c8:	4b2e      	ldr	r3, [pc, #184]	; (802ba84 <mbedtls_internal_md5_process+0x57c>)
 802b9ca:	4413      	add	r3, r2
 802b9cc:	64bb      	str	r3, [r7, #72]	; 0x48
 802b9ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9d0:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b9d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9d6:	4413      	add	r3, r2
 802b9d8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802b9da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9de:	405a      	eors	r2, r3
 802b9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9e2:	401a      	ands	r2, r3
 802b9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9e6:	405a      	eors	r2, r3
 802b9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b9ea:	441a      	add	r2, r3
 802b9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9ee:	441a      	add	r2, r3
 802b9f0:	4b25      	ldr	r3, [pc, #148]	; (802ba88 <mbedtls_internal_md5_process+0x580>)
 802b9f2:	4413      	add	r3, r2
 802b9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9f8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b9fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9fe:	4413      	add	r3, r2
 802ba00:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802ba02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba06:	405a      	eors	r2, r3
 802ba08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba0a:	401a      	ands	r2, r3
 802ba0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba0e:	405a      	eors	r2, r3
 802ba10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ba12:	441a      	add	r2, r3
 802ba14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba16:	441a      	add	r2, r3
 802ba18:	4b1c      	ldr	r3, [pc, #112]	; (802ba8c <mbedtls_internal_md5_process+0x584>)
 802ba1a:	4413      	add	r3, r2
 802ba1c:	653b      	str	r3, [r7, #80]	; 0x50
 802ba1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba20:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802ba24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba26:	4413      	add	r3, r2
 802ba28:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802ba2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba2e:	405a      	eors	r2, r3
 802ba30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba32:	401a      	ands	r2, r3
 802ba34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba36:	405a      	eors	r2, r3
 802ba38:	68fb      	ldr	r3, [r7, #12]
 802ba3a:	441a      	add	r2, r3
 802ba3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba3e:	441a      	add	r2, r3
 802ba40:	4b13      	ldr	r3, [pc, #76]	; (802ba90 <mbedtls_internal_md5_process+0x588>)
 802ba42:	4413      	add	r3, r2
 802ba44:	657b      	str	r3, [r7, #84]	; 0x54
 802ba46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba48:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802ba4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba4e:	4413      	add	r3, r2
 802ba50:	e020      	b.n	802ba94 <mbedtls_internal_md5_process+0x58c>
 802ba52:	bf00      	nop
 802ba54:	d76aa478 	.word	0xd76aa478
 802ba58:	e8c7b756 	.word	0xe8c7b756
 802ba5c:	242070db 	.word	0x242070db
 802ba60:	c1bdceee 	.word	0xc1bdceee
 802ba64:	f57c0faf 	.word	0xf57c0faf
 802ba68:	4787c62a 	.word	0x4787c62a
 802ba6c:	a8304613 	.word	0xa8304613
 802ba70:	fd469501 	.word	0xfd469501
 802ba74:	698098d8 	.word	0x698098d8
 802ba78:	8b44f7af 	.word	0x8b44f7af
 802ba7c:	895cd7be 	.word	0x895cd7be
 802ba80:	6b901122 	.word	0x6b901122
 802ba84:	fd987193 	.word	0xfd987193
 802ba88:	a679438e 	.word	0xa679438e
 802ba8c:	49b40821 	.word	0x49b40821
 802ba90:	f61e2562 	.word	0xf61e2562
 802ba94:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802ba96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba9a:	405a      	eors	r2, r3
 802ba9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba9e:	401a      	ands	r2, r3
 802baa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baa2:	405a      	eors	r2, r3
 802baa4:	6a3b      	ldr	r3, [r7, #32]
 802baa6:	441a      	add	r2, r3
 802baa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baaa:	441a      	add	r2, r3
 802baac:	4ba4      	ldr	r3, [pc, #656]	; (802bd40 <mbedtls_internal_md5_process+0x838>)
 802baae:	4413      	add	r3, r2
 802bab0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bab4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802baba:	4413      	add	r3, r2
 802babc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802babe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bac2:	405a      	eors	r2, r3
 802bac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bac6:	401a      	ands	r2, r3
 802bac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802baca:	405a      	eors	r2, r3
 802bacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bace:	441a      	add	r2, r3
 802bad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bad2:	441a      	add	r2, r3
 802bad4:	4b9b      	ldr	r3, [pc, #620]	; (802bd44 <mbedtls_internal_md5_process+0x83c>)
 802bad6:	4413      	add	r3, r2
 802bad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802badc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bae2:	4413      	add	r3, r2
 802bae4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802bae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baea:	405a      	eors	r2, r3
 802baec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802baee:	401a      	ands	r2, r3
 802baf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baf2:	405a      	eors	r2, r3
 802baf4:	68bb      	ldr	r3, [r7, #8]
 802baf6:	441a      	add	r2, r3
 802baf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bafa:	441a      	add	r2, r3
 802bafc:	4b92      	ldr	r3, [pc, #584]	; (802bd48 <mbedtls_internal_md5_process+0x840>)
 802bafe:	4413      	add	r3, r2
 802bb00:	653b      	str	r3, [r7, #80]	; 0x50
 802bb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb04:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bb08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb0a:	4413      	add	r3, r2
 802bb0c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802bb0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb12:	405a      	eors	r2, r3
 802bb14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb16:	401a      	ands	r2, r3
 802bb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb1a:	405a      	eors	r2, r3
 802bb1c:	69fb      	ldr	r3, [r7, #28]
 802bb1e:	441a      	add	r2, r3
 802bb20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb22:	441a      	add	r2, r3
 802bb24:	4b89      	ldr	r3, [pc, #548]	; (802bd4c <mbedtls_internal_md5_process+0x844>)
 802bb26:	4413      	add	r3, r2
 802bb28:	657b      	str	r3, [r7, #84]	; 0x54
 802bb2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb2c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bb30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb32:	4413      	add	r3, r2
 802bb34:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802bb36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb3a:	405a      	eors	r2, r3
 802bb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb3e:	401a      	ands	r2, r3
 802bb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb42:	405a      	eors	r2, r3
 802bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bb46:	441a      	add	r2, r3
 802bb48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb4a:	441a      	add	r2, r3
 802bb4c:	4b80      	ldr	r3, [pc, #512]	; (802bd50 <mbedtls_internal_md5_process+0x848>)
 802bb4e:	4413      	add	r3, r2
 802bb50:	64bb      	str	r3, [r7, #72]	; 0x48
 802bb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb54:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bb58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb5a:	4413      	add	r3, r2
 802bb5c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802bb5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb62:	405a      	eors	r2, r3
 802bb64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb66:	401a      	ands	r2, r3
 802bb68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb6a:	405a      	eors	r2, r3
 802bb6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bb6e:	441a      	add	r2, r3
 802bb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb72:	441a      	add	r2, r3
 802bb74:	4b77      	ldr	r3, [pc, #476]	; (802bd54 <mbedtls_internal_md5_process+0x84c>)
 802bb76:	4413      	add	r3, r2
 802bb78:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb7c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bb80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb82:	4413      	add	r3, r2
 802bb84:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802bb86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb8a:	405a      	eors	r2, r3
 802bb8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb8e:	401a      	ands	r2, r3
 802bb90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb92:	405a      	eors	r2, r3
 802bb94:	69bb      	ldr	r3, [r7, #24]
 802bb96:	441a      	add	r2, r3
 802bb98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb9a:	441a      	add	r2, r3
 802bb9c:	4b6e      	ldr	r3, [pc, #440]	; (802bd58 <mbedtls_internal_md5_process+0x850>)
 802bb9e:	4413      	add	r3, r2
 802bba0:	653b      	str	r3, [r7, #80]	; 0x50
 802bba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bba4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bbaa:	4413      	add	r3, r2
 802bbac:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802bbae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbb2:	405a      	eors	r2, r3
 802bbb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbb6:	401a      	ands	r2, r3
 802bbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbba:	405a      	eors	r2, r3
 802bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bbbe:	441a      	add	r2, r3
 802bbc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbc2:	441a      	add	r2, r3
 802bbc4:	4b65      	ldr	r3, [pc, #404]	; (802bd5c <mbedtls_internal_md5_process+0x854>)
 802bbc6:	4413      	add	r3, r2
 802bbc8:	657b      	str	r3, [r7, #84]	; 0x54
 802bbca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbcc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bbd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbd2:	4413      	add	r3, r2
 802bbd4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802bbd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bbd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbda:	405a      	eors	r2, r3
 802bbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbde:	401a      	ands	r2, r3
 802bbe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbe2:	405a      	eors	r2, r3
 802bbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bbe6:	441a      	add	r2, r3
 802bbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbea:	441a      	add	r2, r3
 802bbec:	4b5c      	ldr	r3, [pc, #368]	; (802bd60 <mbedtls_internal_md5_process+0x858>)
 802bbee:	4413      	add	r3, r2
 802bbf0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bbf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbf4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bbf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bbfa:	4413      	add	r3, r2
 802bbfc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802bbfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc02:	405a      	eors	r2, r3
 802bc04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc06:	401a      	ands	r2, r3
 802bc08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc0a:	405a      	eors	r2, r3
 802bc0c:	697b      	ldr	r3, [r7, #20]
 802bc0e:	441a      	add	r2, r3
 802bc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc12:	441a      	add	r2, r3
 802bc14:	4b53      	ldr	r3, [pc, #332]	; (802bd64 <mbedtls_internal_md5_process+0x85c>)
 802bc16:	4413      	add	r3, r2
 802bc18:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc1c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bc20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc22:	4413      	add	r3, r2
 802bc24:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802bc26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc2a:	405a      	eors	r2, r3
 802bc2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc2e:	401a      	ands	r2, r3
 802bc30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc32:	405a      	eors	r2, r3
 802bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bc36:	441a      	add	r2, r3
 802bc38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc3a:	441a      	add	r2, r3
 802bc3c:	4b4a      	ldr	r3, [pc, #296]	; (802bd68 <mbedtls_internal_md5_process+0x860>)
 802bc3e:	4413      	add	r3, r2
 802bc40:	653b      	str	r3, [r7, #80]	; 0x50
 802bc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc44:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bc48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc4a:	4413      	add	r3, r2
 802bc4c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802bc4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc52:	405a      	eors	r2, r3
 802bc54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc56:	401a      	ands	r2, r3
 802bc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc5a:	405a      	eors	r2, r3
 802bc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bc5e:	441a      	add	r2, r3
 802bc60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc62:	441a      	add	r2, r3
 802bc64:	4b41      	ldr	r3, [pc, #260]	; (802bd6c <mbedtls_internal_md5_process+0x864>)
 802bc66:	4413      	add	r3, r2
 802bc68:	657b      	str	r3, [r7, #84]	; 0x54
 802bc6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc6c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bc70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc72:	4413      	add	r3, r2
 802bc74:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802bc76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc7a:	405a      	eors	r2, r3
 802bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc7e:	401a      	ands	r2, r3
 802bc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc82:	405a      	eors	r2, r3
 802bc84:	693b      	ldr	r3, [r7, #16]
 802bc86:	441a      	add	r2, r3
 802bc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc8a:	441a      	add	r2, r3
 802bc8c:	4b38      	ldr	r3, [pc, #224]	; (802bd70 <mbedtls_internal_md5_process+0x868>)
 802bc8e:	4413      	add	r3, r2
 802bc90:	64bb      	str	r3, [r7, #72]	; 0x48
 802bc92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc94:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bc98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc9a:	4413      	add	r3, r2
 802bc9c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802bc9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bca2:	405a      	eors	r2, r3
 802bca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bca6:	401a      	ands	r2, r3
 802bca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcaa:	405a      	eors	r2, r3
 802bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bcae:	441a      	add	r2, r3
 802bcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcb2:	441a      	add	r2, r3
 802bcb4:	4b2f      	ldr	r3, [pc, #188]	; (802bd74 <mbedtls_internal_md5_process+0x86c>)
 802bcb6:	4413      	add	r3, r2
 802bcb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcbc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bcc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bcc2:	4413      	add	r3, r2
 802bcc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802bcc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcca:	405a      	eors	r2, r3
 802bccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcce:	401a      	ands	r2, r3
 802bcd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcd2:	405a      	eors	r2, r3
 802bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bcd6:	441a      	add	r2, r3
 802bcd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcda:	441a      	add	r2, r3
 802bcdc:	4b26      	ldr	r3, [pc, #152]	; (802bd78 <mbedtls_internal_md5_process+0x870>)
 802bcde:	4413      	add	r3, r2
 802bce0:	653b      	str	r3, [r7, #80]	; 0x50
 802bce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bce4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bcea:	4413      	add	r3, r2
 802bcec:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802bcee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bcf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcf2:	405a      	eors	r2, r3
 802bcf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcf6:	405a      	eors	r2, r3
 802bcf8:	69fb      	ldr	r3, [r7, #28]
 802bcfa:	441a      	add	r2, r3
 802bcfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcfe:	4413      	add	r3, r2
 802bd00:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 802bd04:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 802bd08:	657b      	str	r3, [r7, #84]	; 0x54
 802bd0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd0c:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bd10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd12:	4413      	add	r3, r2
 802bd14:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802bd16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd1a:	405a      	eors	r2, r3
 802bd1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd1e:	405a      	eors	r2, r3
 802bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bd22:	441a      	add	r2, r3
 802bd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd26:	441a      	add	r2, r3
 802bd28:	4b14      	ldr	r3, [pc, #80]	; (802bd7c <mbedtls_internal_md5_process+0x874>)
 802bd2a:	4413      	add	r3, r2
 802bd2c:	64bb      	str	r3, [r7, #72]	; 0x48
 802bd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd30:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bd34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd36:	4413      	add	r3, r2
 802bd38:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802bd3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd3c:	e020      	b.n	802bd80 <mbedtls_internal_md5_process+0x878>
 802bd3e:	bf00      	nop
 802bd40:	c040b340 	.word	0xc040b340
 802bd44:	265e5a51 	.word	0x265e5a51
 802bd48:	e9b6c7aa 	.word	0xe9b6c7aa
 802bd4c:	d62f105d 	.word	0xd62f105d
 802bd50:	02441453 	.word	0x02441453
 802bd54:	d8a1e681 	.word	0xd8a1e681
 802bd58:	e7d3fbc8 	.word	0xe7d3fbc8
 802bd5c:	21e1cde6 	.word	0x21e1cde6
 802bd60:	c33707d6 	.word	0xc33707d6
 802bd64:	f4d50d87 	.word	0xf4d50d87
 802bd68:	455a14ed 	.word	0x455a14ed
 802bd6c:	a9e3e905 	.word	0xa9e3e905
 802bd70:	fcefa3f8 	.word	0xfcefa3f8
 802bd74:	676f02d9 	.word	0x676f02d9
 802bd78:	8d2a4c8a 	.word	0x8d2a4c8a
 802bd7c:	8771f681 	.word	0x8771f681
 802bd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd82:	405a      	eors	r2, r3
 802bd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd86:	405a      	eors	r2, r3
 802bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bd8a:	441a      	add	r2, r3
 802bd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd8e:	441a      	add	r2, r3
 802bd90:	4ba4      	ldr	r3, [pc, #656]	; (802c024 <mbedtls_internal_md5_process+0xb1c>)
 802bd92:	4413      	add	r3, r2
 802bd94:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd98:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bd9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd9e:	4413      	add	r3, r2
 802bda0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802bda2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bda6:	405a      	eors	r2, r3
 802bda8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdaa:	405a      	eors	r2, r3
 802bdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bdae:	441a      	add	r2, r3
 802bdb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdb2:	441a      	add	r2, r3
 802bdb4:	4b9c      	ldr	r3, [pc, #624]	; (802c028 <mbedtls_internal_md5_process+0xb20>)
 802bdb6:	4413      	add	r3, r2
 802bdb8:	653b      	str	r3, [r7, #80]	; 0x50
 802bdba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdbc:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bdc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bdc2:	4413      	add	r3, r2
 802bdc4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802bdc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bdc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdca:	405a      	eors	r2, r3
 802bdcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdce:	405a      	eors	r2, r3
 802bdd0:	68fb      	ldr	r3, [r7, #12]
 802bdd2:	441a      	add	r2, r3
 802bdd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdd6:	441a      	add	r2, r3
 802bdd8:	4b94      	ldr	r3, [pc, #592]	; (802c02c <mbedtls_internal_md5_process+0xb24>)
 802bdda:	4413      	add	r3, r2
 802bddc:	657b      	str	r3, [r7, #84]	; 0x54
 802bdde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bde0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bde4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bde6:	4413      	add	r3, r2
 802bde8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802bdea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bdec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdee:	405a      	eors	r2, r3
 802bdf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdf2:	405a      	eors	r2, r3
 802bdf4:	69bb      	ldr	r3, [r7, #24]
 802bdf6:	441a      	add	r2, r3
 802bdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdfa:	441a      	add	r2, r3
 802bdfc:	4b8c      	ldr	r3, [pc, #560]	; (802c030 <mbedtls_internal_md5_process+0xb28>)
 802bdfe:	4413      	add	r3, r2
 802be00:	64bb      	str	r3, [r7, #72]	; 0x48
 802be02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be04:	ea4f 5373 	mov.w	r3, r3, ror #21
 802be08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be0a:	4413      	add	r3, r2
 802be0c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802be0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be12:	405a      	eors	r2, r3
 802be14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be16:	405a      	eors	r2, r3
 802be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be1a:	441a      	add	r2, r3
 802be1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be1e:	441a      	add	r2, r3
 802be20:	4b84      	ldr	r3, [pc, #528]	; (802c034 <mbedtls_internal_md5_process+0xb2c>)
 802be22:	4413      	add	r3, r2
 802be24:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be28:	ea4f 4333 	mov.w	r3, r3, ror #16
 802be2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be2e:	4413      	add	r3, r2
 802be30:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802be32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be36:	405a      	eors	r2, r3
 802be38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be3a:	405a      	eors	r2, r3
 802be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802be3e:	441a      	add	r2, r3
 802be40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be42:	441a      	add	r2, r3
 802be44:	4b7c      	ldr	r3, [pc, #496]	; (802c038 <mbedtls_internal_md5_process+0xb30>)
 802be46:	4413      	add	r3, r2
 802be48:	653b      	str	r3, [r7, #80]	; 0x50
 802be4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be4c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802be50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be52:	4413      	add	r3, r2
 802be54:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802be56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be5a:	405a      	eors	r2, r3
 802be5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be5e:	405a      	eors	r2, r3
 802be60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802be62:	441a      	add	r2, r3
 802be64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be66:	441a      	add	r2, r3
 802be68:	4b74      	ldr	r3, [pc, #464]	; (802c03c <mbedtls_internal_md5_process+0xb34>)
 802be6a:	4413      	add	r3, r2
 802be6c:	657b      	str	r3, [r7, #84]	; 0x54
 802be6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be70:	ea4f 7333 	mov.w	r3, r3, ror #28
 802be74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be76:	4413      	add	r3, r2
 802be78:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802be7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be7e:	405a      	eors	r2, r3
 802be80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be82:	405a      	eors	r2, r3
 802be84:	68bb      	ldr	r3, [r7, #8]
 802be86:	441a      	add	r2, r3
 802be88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be8a:	441a      	add	r2, r3
 802be8c:	4b6c      	ldr	r3, [pc, #432]	; (802c040 <mbedtls_internal_md5_process+0xb38>)
 802be8e:	4413      	add	r3, r2
 802be90:	64bb      	str	r3, [r7, #72]	; 0x48
 802be92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be94:	ea4f 5373 	mov.w	r3, r3, ror #21
 802be98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be9a:	4413      	add	r3, r2
 802be9c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802be9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bea2:	405a      	eors	r2, r3
 802bea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bea6:	405a      	eors	r2, r3
 802bea8:	697b      	ldr	r3, [r7, #20]
 802beaa:	441a      	add	r2, r3
 802beac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802beae:	441a      	add	r2, r3
 802beb0:	4b64      	ldr	r3, [pc, #400]	; (802c044 <mbedtls_internal_md5_process+0xb3c>)
 802beb2:	4413      	add	r3, r2
 802beb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802beb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802beb8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bebe:	4413      	add	r3, r2
 802bec0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802bec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bec6:	405a      	eors	r2, r3
 802bec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802beca:	405a      	eors	r2, r3
 802becc:	6a3b      	ldr	r3, [r7, #32]
 802bece:	441a      	add	r2, r3
 802bed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bed2:	441a      	add	r2, r3
 802bed4:	4b5c      	ldr	r3, [pc, #368]	; (802c048 <mbedtls_internal_md5_process+0xb40>)
 802bed6:	4413      	add	r3, r2
 802bed8:	653b      	str	r3, [r7, #80]	; 0x50
 802beda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bedc:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bee2:	4413      	add	r3, r2
 802bee4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802bee6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802beea:	405a      	eors	r2, r3
 802beec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802beee:	405a      	eors	r2, r3
 802bef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bef2:	441a      	add	r2, r3
 802bef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bef6:	441a      	add	r2, r3
 802bef8:	4b54      	ldr	r3, [pc, #336]	; (802c04c <mbedtls_internal_md5_process+0xb44>)
 802befa:	4413      	add	r3, r2
 802befc:	657b      	str	r3, [r7, #84]	; 0x54
 802befe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf00:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bf04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf06:	4413      	add	r3, r2
 802bf08:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802bf0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bf0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf0e:	405a      	eors	r2, r3
 802bf10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf12:	405a      	eors	r2, r3
 802bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bf16:	441a      	add	r2, r3
 802bf18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf1a:	441a      	add	r2, r3
 802bf1c:	4b4c      	ldr	r3, [pc, #304]	; (802c050 <mbedtls_internal_md5_process+0xb48>)
 802bf1e:	4413      	add	r3, r2
 802bf20:	64bb      	str	r3, [r7, #72]	; 0x48
 802bf22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf24:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bf28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bf2a:	4413      	add	r3, r2
 802bf2c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802bf2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf32:	405a      	eors	r2, r3
 802bf34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf36:	405a      	eors	r2, r3
 802bf38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bf3a:	441a      	add	r2, r3
 802bf3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf3e:	441a      	add	r2, r3
 802bf40:	4b44      	ldr	r3, [pc, #272]	; (802c054 <mbedtls_internal_md5_process+0xb4c>)
 802bf42:	4413      	add	r3, r2
 802bf44:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bf46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf48:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bf4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf4e:	4413      	add	r3, r2
 802bf50:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802bf52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf56:	405a      	eors	r2, r3
 802bf58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf5a:	405a      	eors	r2, r3
 802bf5c:	693b      	ldr	r3, [r7, #16]
 802bf5e:	441a      	add	r2, r3
 802bf60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf62:	441a      	add	r2, r3
 802bf64:	4b3c      	ldr	r3, [pc, #240]	; (802c058 <mbedtls_internal_md5_process+0xb50>)
 802bf66:	4413      	add	r3, r2
 802bf68:	653b      	str	r3, [r7, #80]	; 0x50
 802bf6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf6c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bf70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf72:	4413      	add	r3, r2
 802bf74:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802bf76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf78:	43da      	mvns	r2, r3
 802bf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf7c:	431a      	orrs	r2, r3
 802bf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf80:	405a      	eors	r2, r3
 802bf82:	68bb      	ldr	r3, [r7, #8]
 802bf84:	441a      	add	r2, r3
 802bf86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf88:	441a      	add	r2, r3
 802bf8a:	4b34      	ldr	r3, [pc, #208]	; (802c05c <mbedtls_internal_md5_process+0xb54>)
 802bf8c:	4413      	add	r3, r2
 802bf8e:	657b      	str	r3, [r7, #84]	; 0x54
 802bf90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf92:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bf96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf98:	4413      	add	r3, r2
 802bf9a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802bf9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf9e:	43da      	mvns	r2, r3
 802bfa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfa2:	431a      	orrs	r2, r3
 802bfa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfa6:	405a      	eors	r2, r3
 802bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bfaa:	441a      	add	r2, r3
 802bfac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfae:	441a      	add	r2, r3
 802bfb0:	4b2b      	ldr	r3, [pc, #172]	; (802c060 <mbedtls_internal_md5_process+0xb58>)
 802bfb2:	4413      	add	r3, r2
 802bfb4:	64bb      	str	r3, [r7, #72]	; 0x48
 802bfb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfb8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bfbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bfbe:	4413      	add	r3, r2
 802bfc0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802bfc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfc4:	43da      	mvns	r2, r3
 802bfc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfc8:	431a      	orrs	r2, r3
 802bfca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfcc:	405a      	eors	r2, r3
 802bfce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bfd0:	441a      	add	r2, r3
 802bfd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfd4:	441a      	add	r2, r3
 802bfd6:	4b23      	ldr	r3, [pc, #140]	; (802c064 <mbedtls_internal_md5_process+0xb5c>)
 802bfd8:	4413      	add	r3, r2
 802bfda:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bfdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfde:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bfe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bfe4:	4413      	add	r3, r2
 802bfe6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802bfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfea:	43da      	mvns	r2, r3
 802bfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfee:	431a      	orrs	r2, r3
 802bff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bff2:	405a      	eors	r2, r3
 802bff4:	69fb      	ldr	r3, [r7, #28]
 802bff6:	441a      	add	r2, r3
 802bff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bffa:	441a      	add	r2, r3
 802bffc:	4b1a      	ldr	r3, [pc, #104]	; (802c068 <mbedtls_internal_md5_process+0xb60>)
 802bffe:	4413      	add	r3, r2
 802c000:	653b      	str	r3, [r7, #80]	; 0x50
 802c002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c004:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c00a:	4413      	add	r3, r2
 802c00c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802c00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c010:	43da      	mvns	r2, r3
 802c012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c014:	431a      	orrs	r2, r3
 802c016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c018:	405a      	eors	r2, r3
 802c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c01c:	441a      	add	r2, r3
 802c01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c020:	e024      	b.n	802c06c <mbedtls_internal_md5_process+0xb64>
 802c022:	bf00      	nop
 802c024:	6d9d6122 	.word	0x6d9d6122
 802c028:	fde5380c 	.word	0xfde5380c
 802c02c:	a4beea44 	.word	0xa4beea44
 802c030:	4bdecfa9 	.word	0x4bdecfa9
 802c034:	f6bb4b60 	.word	0xf6bb4b60
 802c038:	bebfbc70 	.word	0xbebfbc70
 802c03c:	289b7ec6 	.word	0x289b7ec6
 802c040:	eaa127fa 	.word	0xeaa127fa
 802c044:	d4ef3085 	.word	0xd4ef3085
 802c048:	04881d05 	.word	0x04881d05
 802c04c:	d9d4d039 	.word	0xd9d4d039
 802c050:	e6db99e5 	.word	0xe6db99e5
 802c054:	1fa27cf8 	.word	0x1fa27cf8
 802c058:	c4ac5665 	.word	0xc4ac5665
 802c05c:	f4292244 	.word	0xf4292244
 802c060:	432aff97 	.word	0x432aff97
 802c064:	ab9423a7 	.word	0xab9423a7
 802c068:	fc93a039 	.word	0xfc93a039
 802c06c:	441a      	add	r2, r3
 802c06e:	4b7d      	ldr	r3, [pc, #500]	; (802c264 <mbedtls_internal_md5_process+0xd5c>)
 802c070:	4413      	add	r3, r2
 802c072:	657b      	str	r3, [r7, #84]	; 0x54
 802c074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c076:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c07a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c07c:	4413      	add	r3, r2
 802c07e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c082:	43da      	mvns	r2, r3
 802c084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c086:	431a      	orrs	r2, r3
 802c088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c08a:	405a      	eors	r2, r3
 802c08c:	697b      	ldr	r3, [r7, #20]
 802c08e:	441a      	add	r2, r3
 802c090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c092:	441a      	add	r2, r3
 802c094:	4b74      	ldr	r3, [pc, #464]	; (802c268 <mbedtls_internal_md5_process+0xd60>)
 802c096:	4413      	add	r3, r2
 802c098:	64bb      	str	r3, [r7, #72]	; 0x48
 802c09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c09c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c0a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c0a2:	4413      	add	r3, r2
 802c0a4:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802c0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0a8:	43da      	mvns	r2, r3
 802c0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0ac:	431a      	orrs	r2, r3
 802c0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c0b0:	405a      	eors	r2, r3
 802c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c0b4:	441a      	add	r2, r3
 802c0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0b8:	4413      	add	r3, r2
 802c0ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802c0be:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 802c0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0c6:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c0ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c0cc:	4413      	add	r3, r2
 802c0ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802c0d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c0d2:	43da      	mvns	r2, r3
 802c0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0d6:	431a      	orrs	r2, r3
 802c0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0da:	405a      	eors	r2, r3
 802c0dc:	68fb      	ldr	r3, [r7, #12]
 802c0de:	441a      	add	r2, r3
 802c0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0e2:	441a      	add	r2, r3
 802c0e4:	4b61      	ldr	r3, [pc, #388]	; (802c26c <mbedtls_internal_md5_process+0xd64>)
 802c0e6:	4413      	add	r3, r2
 802c0e8:	653b      	str	r3, [r7, #80]	; 0x50
 802c0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c0f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c0f2:	4413      	add	r3, r2
 802c0f4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802c0f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0f8:	43da      	mvns	r2, r3
 802c0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0fc:	431a      	orrs	r2, r3
 802c0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c100:	405a      	eors	r2, r3
 802c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c104:	441a      	add	r2, r3
 802c106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c108:	441a      	add	r2, r3
 802c10a:	4b59      	ldr	r3, [pc, #356]	; (802c270 <mbedtls_internal_md5_process+0xd68>)
 802c10c:	4413      	add	r3, r2
 802c10e:	657b      	str	r3, [r7, #84]	; 0x54
 802c110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c112:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c116:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c118:	4413      	add	r3, r2
 802c11a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802c11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c11e:	43da      	mvns	r2, r3
 802c120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c122:	431a      	orrs	r2, r3
 802c124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c126:	405a      	eors	r2, r3
 802c128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c12a:	441a      	add	r2, r3
 802c12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c12e:	441a      	add	r2, r3
 802c130:	4b50      	ldr	r3, [pc, #320]	; (802c274 <mbedtls_internal_md5_process+0xd6c>)
 802c132:	4413      	add	r3, r2
 802c134:	64bb      	str	r3, [r7, #72]	; 0x48
 802c136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c138:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c13c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c13e:	4413      	add	r3, r2
 802c140:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802c142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c144:	43da      	mvns	r2, r3
 802c146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c148:	431a      	orrs	r2, r3
 802c14a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c14c:	405a      	eors	r2, r3
 802c14e:	6a3b      	ldr	r3, [r7, #32]
 802c150:	441a      	add	r2, r3
 802c152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c154:	441a      	add	r2, r3
 802c156:	4b48      	ldr	r3, [pc, #288]	; (802c278 <mbedtls_internal_md5_process+0xd70>)
 802c158:	4413      	add	r3, r2
 802c15a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c15e:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c164:	4413      	add	r3, r2
 802c166:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802c168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c16a:	43da      	mvns	r2, r3
 802c16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c16e:	431a      	orrs	r2, r3
 802c170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c172:	405a      	eors	r2, r3
 802c174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c176:	441a      	add	r2, r3
 802c178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c17a:	441a      	add	r2, r3
 802c17c:	4b3f      	ldr	r3, [pc, #252]	; (802c27c <mbedtls_internal_md5_process+0xd74>)
 802c17e:	4413      	add	r3, r2
 802c180:	653b      	str	r3, [r7, #80]	; 0x50
 802c182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c184:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c18a:	4413      	add	r3, r2
 802c18c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802c18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c190:	43da      	mvns	r2, r3
 802c192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c194:	431a      	orrs	r2, r3
 802c196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c198:	405a      	eors	r2, r3
 802c19a:	69bb      	ldr	r3, [r7, #24]
 802c19c:	441a      	add	r2, r3
 802c19e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1a0:	441a      	add	r2, r3
 802c1a2:	4b37      	ldr	r3, [pc, #220]	; (802c280 <mbedtls_internal_md5_process+0xd78>)
 802c1a4:	4413      	add	r3, r2
 802c1a6:	657b      	str	r3, [r7, #84]	; 0x54
 802c1a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1aa:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c1ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c1b0:	4413      	add	r3, r2
 802c1b2:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802c1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1b6:	43da      	mvns	r2, r3
 802c1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1ba:	431a      	orrs	r2, r3
 802c1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c1be:	405a      	eors	r2, r3
 802c1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c1c2:	441a      	add	r2, r3
 802c1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c1c6:	441a      	add	r2, r3
 802c1c8:	4b2e      	ldr	r3, [pc, #184]	; (802c284 <mbedtls_internal_md5_process+0xd7c>)
 802c1ca:	4413      	add	r3, r2
 802c1cc:	64bb      	str	r3, [r7, #72]	; 0x48
 802c1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c1d0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c1d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c1d6:	4413      	add	r3, r2
 802c1d8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802c1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c1dc:	43da      	mvns	r2, r3
 802c1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c1e0:	431a      	orrs	r2, r3
 802c1e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1e4:	405a      	eors	r2, r3
 802c1e6:	693b      	ldr	r3, [r7, #16]
 802c1e8:	441a      	add	r2, r3
 802c1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1ec:	441a      	add	r2, r3
 802c1ee:	4b26      	ldr	r3, [pc, #152]	; (802c288 <mbedtls_internal_md5_process+0xd80>)
 802c1f0:	4413      	add	r3, r2
 802c1f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1f6:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c1fc:	4413      	add	r3, r2
 802c1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802c200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c202:	43da      	mvns	r2, r3
 802c204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c206:	431a      	orrs	r2, r3
 802c208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c20a:	405a      	eors	r2, r3
 802c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c20e:	441a      	add	r2, r3
 802c210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c212:	441a      	add	r2, r3
 802c214:	4b1d      	ldr	r3, [pc, #116]	; (802c28c <mbedtls_internal_md5_process+0xd84>)
 802c216:	4413      	add	r3, r2
 802c218:	653b      	str	r3, [r7, #80]	; 0x50
 802c21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c21c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c222:	4413      	add	r3, r2
 802c224:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 802c226:	687b      	ldr	r3, [r7, #4]
 802c228:	689a      	ldr	r2, [r3, #8]
 802c22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c22c:	441a      	add	r2, r3
 802c22e:	687b      	ldr	r3, [r7, #4]
 802c230:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802c232:	687b      	ldr	r3, [r7, #4]
 802c234:	68da      	ldr	r2, [r3, #12]
 802c236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c238:	441a      	add	r2, r3
 802c23a:	687b      	ldr	r3, [r7, #4]
 802c23c:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802c23e:	687b      	ldr	r3, [r7, #4]
 802c240:	691a      	ldr	r2, [r3, #16]
 802c242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c244:	441a      	add	r2, r3
 802c246:	687b      	ldr	r3, [r7, #4]
 802c248:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802c24a:	687b      	ldr	r3, [r7, #4]
 802c24c:	695a      	ldr	r2, [r3, #20]
 802c24e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c250:	441a      	add	r2, r3
 802c252:	687b      	ldr	r3, [r7, #4]
 802c254:	615a      	str	r2, [r3, #20]

    return( 0 );
 802c256:	2300      	movs	r3, #0
}
 802c258:	4618      	mov	r0, r3
 802c25a:	375c      	adds	r7, #92	; 0x5c
 802c25c:	46bd      	mov	sp, r7
 802c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c262:	4770      	bx	lr
 802c264:	655b59c3 	.word	0x655b59c3
 802c268:	8f0ccc92 	.word	0x8f0ccc92
 802c26c:	85845dd1 	.word	0x85845dd1
 802c270:	6fa87e4f 	.word	0x6fa87e4f
 802c274:	fe2ce6e0 	.word	0xfe2ce6e0
 802c278:	a3014314 	.word	0xa3014314
 802c27c:	4e0811a1 	.word	0x4e0811a1
 802c280:	f7537e82 	.word	0xf7537e82
 802c284:	bd3af235 	.word	0xbd3af235
 802c288:	2ad7d2bb 	.word	0x2ad7d2bb
 802c28c:	eb86d391 	.word	0xeb86d391

0802c290 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802c290:	b580      	push	{r7, lr}
 802c292:	b088      	sub	sp, #32
 802c294:	af00      	add	r7, sp, #0
 802c296:	60f8      	str	r0, [r7, #12]
 802c298:	60b9      	str	r1, [r7, #8]
 802c29a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802c29c:	687b      	ldr	r3, [r7, #4]
 802c29e:	2b00      	cmp	r3, #0
 802c2a0:	d101      	bne.n	802c2a6 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802c2a2:	2300      	movs	r3, #0
 802c2a4:	e065      	b.n	802c372 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802c2a6:	68fb      	ldr	r3, [r7, #12]
 802c2a8:	681b      	ldr	r3, [r3, #0]
 802c2aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c2ae:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802c2b0:	69fb      	ldr	r3, [r7, #28]
 802c2b2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c2b6:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802c2b8:	68fb      	ldr	r3, [r7, #12]
 802c2ba:	681a      	ldr	r2, [r3, #0]
 802c2bc:	687b      	ldr	r3, [r7, #4]
 802c2be:	441a      	add	r2, r3
 802c2c0:	68fb      	ldr	r3, [r7, #12]
 802c2c2:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802c2c4:	68fb      	ldr	r3, [r7, #12]
 802c2c6:	681a      	ldr	r2, [r3, #0]
 802c2c8:	68fb      	ldr	r3, [r7, #12]
 802c2ca:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802c2cc:	68fb      	ldr	r3, [r7, #12]
 802c2ce:	681b      	ldr	r3, [r3, #0]
 802c2d0:	687a      	ldr	r2, [r7, #4]
 802c2d2:	429a      	cmp	r2, r3
 802c2d4:	d904      	bls.n	802c2e0 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802c2d6:	68fb      	ldr	r3, [r7, #12]
 802c2d8:	685b      	ldr	r3, [r3, #4]
 802c2da:	1c5a      	adds	r2, r3, #1
 802c2dc:	68fb      	ldr	r3, [r7, #12]
 802c2de:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802c2e0:	69fb      	ldr	r3, [r7, #28]
 802c2e2:	2b00      	cmp	r3, #0
 802c2e4:	d034      	beq.n	802c350 <mbedtls_md5_update_ret+0xc0>
 802c2e6:	687a      	ldr	r2, [r7, #4]
 802c2e8:	69bb      	ldr	r3, [r7, #24]
 802c2ea:	429a      	cmp	r2, r3
 802c2ec:	d330      	bcc.n	802c350 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802c2ee:	68fb      	ldr	r3, [r7, #12]
 802c2f0:	f103 0218 	add.w	r2, r3, #24
 802c2f4:	69fb      	ldr	r3, [r7, #28]
 802c2f6:	4413      	add	r3, r2
 802c2f8:	69ba      	ldr	r2, [r7, #24]
 802c2fa:	68b9      	ldr	r1, [r7, #8]
 802c2fc:	4618      	mov	r0, r3
 802c2fe:	f001 fcea 	bl	802dcd6 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c302:	68fb      	ldr	r3, [r7, #12]
 802c304:	3318      	adds	r3, #24
 802c306:	4619      	mov	r1, r3
 802c308:	68f8      	ldr	r0, [r7, #12]
 802c30a:	f7ff f8fd 	bl	802b508 <mbedtls_internal_md5_process>
 802c30e:	6178      	str	r0, [r7, #20]
 802c310:	697b      	ldr	r3, [r7, #20]
 802c312:	2b00      	cmp	r3, #0
 802c314:	d001      	beq.n	802c31a <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802c316:	697b      	ldr	r3, [r7, #20]
 802c318:	e02b      	b.n	802c372 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802c31a:	68ba      	ldr	r2, [r7, #8]
 802c31c:	69bb      	ldr	r3, [r7, #24]
 802c31e:	4413      	add	r3, r2
 802c320:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802c322:	687a      	ldr	r2, [r7, #4]
 802c324:	69bb      	ldr	r3, [r7, #24]
 802c326:	1ad3      	subs	r3, r2, r3
 802c328:	607b      	str	r3, [r7, #4]
        left = 0;
 802c32a:	2300      	movs	r3, #0
 802c32c:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802c32e:	e00f      	b.n	802c350 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802c330:	68b9      	ldr	r1, [r7, #8]
 802c332:	68f8      	ldr	r0, [r7, #12]
 802c334:	f7ff f8e8 	bl	802b508 <mbedtls_internal_md5_process>
 802c338:	6178      	str	r0, [r7, #20]
 802c33a:	697b      	ldr	r3, [r7, #20]
 802c33c:	2b00      	cmp	r3, #0
 802c33e:	d001      	beq.n	802c344 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802c340:	697b      	ldr	r3, [r7, #20]
 802c342:	e016      	b.n	802c372 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802c344:	68bb      	ldr	r3, [r7, #8]
 802c346:	3340      	adds	r3, #64	; 0x40
 802c348:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802c34a:	687b      	ldr	r3, [r7, #4]
 802c34c:	3b40      	subs	r3, #64	; 0x40
 802c34e:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802c350:	687b      	ldr	r3, [r7, #4]
 802c352:	2b3f      	cmp	r3, #63	; 0x3f
 802c354:	d8ec      	bhi.n	802c330 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802c356:	687b      	ldr	r3, [r7, #4]
 802c358:	2b00      	cmp	r3, #0
 802c35a:	d009      	beq.n	802c370 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802c35c:	68fb      	ldr	r3, [r7, #12]
 802c35e:	f103 0218 	add.w	r2, r3, #24
 802c362:	69fb      	ldr	r3, [r7, #28]
 802c364:	4413      	add	r3, r2
 802c366:	687a      	ldr	r2, [r7, #4]
 802c368:	68b9      	ldr	r1, [r7, #8]
 802c36a:	4618      	mov	r0, r3
 802c36c:	f001 fcb3 	bl	802dcd6 <memcpy>
    }

    return( 0 );
 802c370:	2300      	movs	r3, #0
}
 802c372:	4618      	mov	r0, r3
 802c374:	3720      	adds	r7, #32
 802c376:	46bd      	mov	sp, r7
 802c378:	bd80      	pop	{r7, pc}

0802c37a <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802c37a:	b580      	push	{r7, lr}
 802c37c:	b086      	sub	sp, #24
 802c37e:	af00      	add	r7, sp, #0
 802c380:	6078      	str	r0, [r7, #4]
 802c382:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802c384:	687b      	ldr	r3, [r7, #4]
 802c386:	681b      	ldr	r3, [r3, #0]
 802c388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c38c:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802c38e:	697b      	ldr	r3, [r7, #20]
 802c390:	1c5a      	adds	r2, r3, #1
 802c392:	617a      	str	r2, [r7, #20]
 802c394:	687a      	ldr	r2, [r7, #4]
 802c396:	4413      	add	r3, r2
 802c398:	2280      	movs	r2, #128	; 0x80
 802c39a:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802c39c:	697b      	ldr	r3, [r7, #20]
 802c39e:	2b38      	cmp	r3, #56	; 0x38
 802c3a0:	d80c      	bhi.n	802c3bc <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802c3a2:	687b      	ldr	r3, [r7, #4]
 802c3a4:	f103 0218 	add.w	r2, r3, #24
 802c3a8:	697b      	ldr	r3, [r7, #20]
 802c3aa:	18d0      	adds	r0, r2, r3
 802c3ac:	697b      	ldr	r3, [r7, #20]
 802c3ae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802c3b2:	461a      	mov	r2, r3
 802c3b4:	2100      	movs	r1, #0
 802c3b6:	f001 fab9 	bl	802d92c <memset>
 802c3ba:	e01e      	b.n	802c3fa <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802c3bc:	687b      	ldr	r3, [r7, #4]
 802c3be:	f103 0218 	add.w	r2, r3, #24
 802c3c2:	697b      	ldr	r3, [r7, #20]
 802c3c4:	18d0      	adds	r0, r2, r3
 802c3c6:	697b      	ldr	r3, [r7, #20]
 802c3c8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c3cc:	461a      	mov	r2, r3
 802c3ce:	2100      	movs	r1, #0
 802c3d0:	f001 faac 	bl	802d92c <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c3d4:	687b      	ldr	r3, [r7, #4]
 802c3d6:	3318      	adds	r3, #24
 802c3d8:	4619      	mov	r1, r3
 802c3da:	6878      	ldr	r0, [r7, #4]
 802c3dc:	f7ff f894 	bl	802b508 <mbedtls_internal_md5_process>
 802c3e0:	6138      	str	r0, [r7, #16]
 802c3e2:	693b      	ldr	r3, [r7, #16]
 802c3e4:	2b00      	cmp	r3, #0
 802c3e6:	d001      	beq.n	802c3ec <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802c3e8:	693b      	ldr	r3, [r7, #16]
 802c3ea:	e0b8      	b.n	802c55e <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802c3ec:	687b      	ldr	r3, [r7, #4]
 802c3ee:	3318      	adds	r3, #24
 802c3f0:	2238      	movs	r2, #56	; 0x38
 802c3f2:	2100      	movs	r1, #0
 802c3f4:	4618      	mov	r0, r3
 802c3f6:	f001 fa99 	bl	802d92c <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802c3fa:	687b      	ldr	r3, [r7, #4]
 802c3fc:	681b      	ldr	r3, [r3, #0]
 802c3fe:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802c400:	687b      	ldr	r3, [r7, #4]
 802c402:	685b      	ldr	r3, [r3, #4]
 802c404:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802c406:	4313      	orrs	r3, r2
 802c408:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802c40a:	687b      	ldr	r3, [r7, #4]
 802c40c:	681b      	ldr	r3, [r3, #0]
 802c40e:	00db      	lsls	r3, r3, #3
 802c410:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802c412:	68bb      	ldr	r3, [r7, #8]
 802c414:	b2da      	uxtb	r2, r3
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802c41c:	68bb      	ldr	r3, [r7, #8]
 802c41e:	0a1b      	lsrs	r3, r3, #8
 802c420:	b2da      	uxtb	r2, r3
 802c422:	687b      	ldr	r3, [r7, #4]
 802c424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 802c428:	68bb      	ldr	r3, [r7, #8]
 802c42a:	0c1b      	lsrs	r3, r3, #16
 802c42c:	b2da      	uxtb	r2, r3
 802c42e:	687b      	ldr	r3, [r7, #4]
 802c430:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 802c434:	68bb      	ldr	r3, [r7, #8]
 802c436:	0e1b      	lsrs	r3, r3, #24
 802c438:	b2da      	uxtb	r2, r3
 802c43a:	687b      	ldr	r3, [r7, #4]
 802c43c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802c440:	68fb      	ldr	r3, [r7, #12]
 802c442:	b2da      	uxtb	r2, r3
 802c444:	687b      	ldr	r3, [r7, #4]
 802c446:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 802c44a:	68fb      	ldr	r3, [r7, #12]
 802c44c:	0a1b      	lsrs	r3, r3, #8
 802c44e:	b2da      	uxtb	r2, r3
 802c450:	687b      	ldr	r3, [r7, #4]
 802c452:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 802c456:	68fb      	ldr	r3, [r7, #12]
 802c458:	0c1b      	lsrs	r3, r3, #16
 802c45a:	b2da      	uxtb	r2, r3
 802c45c:	687b      	ldr	r3, [r7, #4]
 802c45e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 802c462:	68fb      	ldr	r3, [r7, #12]
 802c464:	0e1b      	lsrs	r3, r3, #24
 802c466:	b2da      	uxtb	r2, r3
 802c468:	687b      	ldr	r3, [r7, #4]
 802c46a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c46e:	687b      	ldr	r3, [r7, #4]
 802c470:	3318      	adds	r3, #24
 802c472:	4619      	mov	r1, r3
 802c474:	6878      	ldr	r0, [r7, #4]
 802c476:	f7ff f847 	bl	802b508 <mbedtls_internal_md5_process>
 802c47a:	6138      	str	r0, [r7, #16]
 802c47c:	693b      	ldr	r3, [r7, #16]
 802c47e:	2b00      	cmp	r3, #0
 802c480:	d001      	beq.n	802c486 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802c482:	693b      	ldr	r3, [r7, #16]
 802c484:	e06b      	b.n	802c55e <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802c486:	687b      	ldr	r3, [r7, #4]
 802c488:	689b      	ldr	r3, [r3, #8]
 802c48a:	b2da      	uxtb	r2, r3
 802c48c:	683b      	ldr	r3, [r7, #0]
 802c48e:	701a      	strb	r2, [r3, #0]
 802c490:	687b      	ldr	r3, [r7, #4]
 802c492:	689b      	ldr	r3, [r3, #8]
 802c494:	0a1a      	lsrs	r2, r3, #8
 802c496:	683b      	ldr	r3, [r7, #0]
 802c498:	3301      	adds	r3, #1
 802c49a:	b2d2      	uxtb	r2, r2
 802c49c:	701a      	strb	r2, [r3, #0]
 802c49e:	687b      	ldr	r3, [r7, #4]
 802c4a0:	689b      	ldr	r3, [r3, #8]
 802c4a2:	0c1a      	lsrs	r2, r3, #16
 802c4a4:	683b      	ldr	r3, [r7, #0]
 802c4a6:	3302      	adds	r3, #2
 802c4a8:	b2d2      	uxtb	r2, r2
 802c4aa:	701a      	strb	r2, [r3, #0]
 802c4ac:	687b      	ldr	r3, [r7, #4]
 802c4ae:	689b      	ldr	r3, [r3, #8]
 802c4b0:	0e1a      	lsrs	r2, r3, #24
 802c4b2:	683b      	ldr	r3, [r7, #0]
 802c4b4:	3303      	adds	r3, #3
 802c4b6:	b2d2      	uxtb	r2, r2
 802c4b8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802c4ba:	687b      	ldr	r3, [r7, #4]
 802c4bc:	68da      	ldr	r2, [r3, #12]
 802c4be:	683b      	ldr	r3, [r7, #0]
 802c4c0:	3304      	adds	r3, #4
 802c4c2:	b2d2      	uxtb	r2, r2
 802c4c4:	701a      	strb	r2, [r3, #0]
 802c4c6:	687b      	ldr	r3, [r7, #4]
 802c4c8:	68db      	ldr	r3, [r3, #12]
 802c4ca:	0a1a      	lsrs	r2, r3, #8
 802c4cc:	683b      	ldr	r3, [r7, #0]
 802c4ce:	3305      	adds	r3, #5
 802c4d0:	b2d2      	uxtb	r2, r2
 802c4d2:	701a      	strb	r2, [r3, #0]
 802c4d4:	687b      	ldr	r3, [r7, #4]
 802c4d6:	68db      	ldr	r3, [r3, #12]
 802c4d8:	0c1a      	lsrs	r2, r3, #16
 802c4da:	683b      	ldr	r3, [r7, #0]
 802c4dc:	3306      	adds	r3, #6
 802c4de:	b2d2      	uxtb	r2, r2
 802c4e0:	701a      	strb	r2, [r3, #0]
 802c4e2:	687b      	ldr	r3, [r7, #4]
 802c4e4:	68db      	ldr	r3, [r3, #12]
 802c4e6:	0e1a      	lsrs	r2, r3, #24
 802c4e8:	683b      	ldr	r3, [r7, #0]
 802c4ea:	3307      	adds	r3, #7
 802c4ec:	b2d2      	uxtb	r2, r2
 802c4ee:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802c4f0:	687b      	ldr	r3, [r7, #4]
 802c4f2:	691a      	ldr	r2, [r3, #16]
 802c4f4:	683b      	ldr	r3, [r7, #0]
 802c4f6:	3308      	adds	r3, #8
 802c4f8:	b2d2      	uxtb	r2, r2
 802c4fa:	701a      	strb	r2, [r3, #0]
 802c4fc:	687b      	ldr	r3, [r7, #4]
 802c4fe:	691b      	ldr	r3, [r3, #16]
 802c500:	0a1a      	lsrs	r2, r3, #8
 802c502:	683b      	ldr	r3, [r7, #0]
 802c504:	3309      	adds	r3, #9
 802c506:	b2d2      	uxtb	r2, r2
 802c508:	701a      	strb	r2, [r3, #0]
 802c50a:	687b      	ldr	r3, [r7, #4]
 802c50c:	691b      	ldr	r3, [r3, #16]
 802c50e:	0c1a      	lsrs	r2, r3, #16
 802c510:	683b      	ldr	r3, [r7, #0]
 802c512:	330a      	adds	r3, #10
 802c514:	b2d2      	uxtb	r2, r2
 802c516:	701a      	strb	r2, [r3, #0]
 802c518:	687b      	ldr	r3, [r7, #4]
 802c51a:	691b      	ldr	r3, [r3, #16]
 802c51c:	0e1a      	lsrs	r2, r3, #24
 802c51e:	683b      	ldr	r3, [r7, #0]
 802c520:	330b      	adds	r3, #11
 802c522:	b2d2      	uxtb	r2, r2
 802c524:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802c526:	687b      	ldr	r3, [r7, #4]
 802c528:	695a      	ldr	r2, [r3, #20]
 802c52a:	683b      	ldr	r3, [r7, #0]
 802c52c:	330c      	adds	r3, #12
 802c52e:	b2d2      	uxtb	r2, r2
 802c530:	701a      	strb	r2, [r3, #0]
 802c532:	687b      	ldr	r3, [r7, #4]
 802c534:	695b      	ldr	r3, [r3, #20]
 802c536:	0a1a      	lsrs	r2, r3, #8
 802c538:	683b      	ldr	r3, [r7, #0]
 802c53a:	330d      	adds	r3, #13
 802c53c:	b2d2      	uxtb	r2, r2
 802c53e:	701a      	strb	r2, [r3, #0]
 802c540:	687b      	ldr	r3, [r7, #4]
 802c542:	695b      	ldr	r3, [r3, #20]
 802c544:	0c1a      	lsrs	r2, r3, #16
 802c546:	683b      	ldr	r3, [r7, #0]
 802c548:	330e      	adds	r3, #14
 802c54a:	b2d2      	uxtb	r2, r2
 802c54c:	701a      	strb	r2, [r3, #0]
 802c54e:	687b      	ldr	r3, [r7, #4]
 802c550:	695b      	ldr	r3, [r3, #20]
 802c552:	0e1a      	lsrs	r2, r3, #24
 802c554:	683b      	ldr	r3, [r7, #0]
 802c556:	330f      	adds	r3, #15
 802c558:	b2d2      	uxtb	r2, r2
 802c55a:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802c55c:	2300      	movs	r3, #0
}
 802c55e:	4618      	mov	r0, r3
 802c560:	3718      	adds	r7, #24
 802c562:	46bd      	mov	sp, r7
 802c564:	bd80      	pop	{r7, pc}
	...

0802c568 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802c568:	b580      	push	{r7, lr}
 802c56a:	b082      	sub	sp, #8
 802c56c:	af00      	add	r7, sp, #0
 802c56e:	6078      	str	r0, [r7, #4]
 802c570:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802c572:	4b05      	ldr	r3, [pc, #20]	; (802c588 <mbedtls_platform_zeroize+0x20>)
 802c574:	681b      	ldr	r3, [r3, #0]
 802c576:	683a      	ldr	r2, [r7, #0]
 802c578:	2100      	movs	r1, #0
 802c57a:	6878      	ldr	r0, [r7, #4]
 802c57c:	4798      	blx	r3
}
 802c57e:	bf00      	nop
 802c580:	3708      	adds	r7, #8
 802c582:	46bd      	mov	sp, r7
 802c584:	bd80      	pop	{r7, pc}
 802c586:	bf00      	nop
 802c588:	2000012c 	.word	0x2000012c

0802c58c <__assert_func>:
 802c58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c58e:	4614      	mov	r4, r2
 802c590:	461a      	mov	r2, r3
 802c592:	4b09      	ldr	r3, [pc, #36]	; (802c5b8 <__assert_func+0x2c>)
 802c594:	681b      	ldr	r3, [r3, #0]
 802c596:	4605      	mov	r5, r0
 802c598:	68d8      	ldr	r0, [r3, #12]
 802c59a:	b14c      	cbz	r4, 802c5b0 <__assert_func+0x24>
 802c59c:	4b07      	ldr	r3, [pc, #28]	; (802c5bc <__assert_func+0x30>)
 802c59e:	9100      	str	r1, [sp, #0]
 802c5a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c5a4:	4906      	ldr	r1, [pc, #24]	; (802c5c0 <__assert_func+0x34>)
 802c5a6:	462b      	mov	r3, r5
 802c5a8:	f000 fffa 	bl	802d5a0 <fiprintf>
 802c5ac:	f001 fba8 	bl	802dd00 <abort>
 802c5b0:	4b04      	ldr	r3, [pc, #16]	; (802c5c4 <__assert_func+0x38>)
 802c5b2:	461c      	mov	r4, r3
 802c5b4:	e7f3      	b.n	802c59e <__assert_func+0x12>
 802c5b6:	bf00      	nop
 802c5b8:	20000188 	.word	0x20000188
 802c5bc:	08034b64 	.word	0x08034b64
 802c5c0:	08034b71 	.word	0x08034b71
 802c5c4:	08034b9f 	.word	0x08034b9f

0802c5c8 <_calloc_r>:
 802c5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c5ca:	fba1 2402 	umull	r2, r4, r1, r2
 802c5ce:	b94c      	cbnz	r4, 802c5e4 <_calloc_r+0x1c>
 802c5d0:	4611      	mov	r1, r2
 802c5d2:	9201      	str	r2, [sp, #4]
 802c5d4:	f000 f83e 	bl	802c654 <_malloc_r>
 802c5d8:	9a01      	ldr	r2, [sp, #4]
 802c5da:	4605      	mov	r5, r0
 802c5dc:	b930      	cbnz	r0, 802c5ec <_calloc_r+0x24>
 802c5de:	4628      	mov	r0, r5
 802c5e0:	b003      	add	sp, #12
 802c5e2:	bd30      	pop	{r4, r5, pc}
 802c5e4:	220c      	movs	r2, #12
 802c5e6:	6002      	str	r2, [r0, #0]
 802c5e8:	2500      	movs	r5, #0
 802c5ea:	e7f8      	b.n	802c5de <_calloc_r+0x16>
 802c5ec:	4621      	mov	r1, r4
 802c5ee:	f001 f99d 	bl	802d92c <memset>
 802c5f2:	e7f4      	b.n	802c5de <_calloc_r+0x16>

0802c5f4 <malloc>:
 802c5f4:	4b02      	ldr	r3, [pc, #8]	; (802c600 <malloc+0xc>)
 802c5f6:	4601      	mov	r1, r0
 802c5f8:	6818      	ldr	r0, [r3, #0]
 802c5fa:	f000 b82b 	b.w	802c654 <_malloc_r>
 802c5fe:	bf00      	nop
 802c600:	20000188 	.word	0x20000188

0802c604 <free>:
 802c604:	4b02      	ldr	r3, [pc, #8]	; (802c610 <free+0xc>)
 802c606:	4601      	mov	r1, r0
 802c608:	6818      	ldr	r0, [r3, #0]
 802c60a:	f002 b9fb 	b.w	802ea04 <_free_r>
 802c60e:	bf00      	nop
 802c610:	20000188 	.word	0x20000188

0802c614 <sbrk_aligned>:
 802c614:	b570      	push	{r4, r5, r6, lr}
 802c616:	4e0e      	ldr	r6, [pc, #56]	; (802c650 <sbrk_aligned+0x3c>)
 802c618:	460c      	mov	r4, r1
 802c61a:	6831      	ldr	r1, [r6, #0]
 802c61c:	4605      	mov	r5, r0
 802c61e:	b911      	cbnz	r1, 802c626 <sbrk_aligned+0x12>
 802c620:	f001 fb02 	bl	802dc28 <_sbrk_r>
 802c624:	6030      	str	r0, [r6, #0]
 802c626:	4621      	mov	r1, r4
 802c628:	4628      	mov	r0, r5
 802c62a:	f001 fafd 	bl	802dc28 <_sbrk_r>
 802c62e:	1c43      	adds	r3, r0, #1
 802c630:	d00a      	beq.n	802c648 <sbrk_aligned+0x34>
 802c632:	1cc4      	adds	r4, r0, #3
 802c634:	f024 0403 	bic.w	r4, r4, #3
 802c638:	42a0      	cmp	r0, r4
 802c63a:	d007      	beq.n	802c64c <sbrk_aligned+0x38>
 802c63c:	1a21      	subs	r1, r4, r0
 802c63e:	4628      	mov	r0, r5
 802c640:	f001 faf2 	bl	802dc28 <_sbrk_r>
 802c644:	3001      	adds	r0, #1
 802c646:	d101      	bne.n	802c64c <sbrk_aligned+0x38>
 802c648:	f04f 34ff 	mov.w	r4, #4294967295
 802c64c:	4620      	mov	r0, r4
 802c64e:	bd70      	pop	{r4, r5, r6, pc}
 802c650:	2000d9cc 	.word	0x2000d9cc

0802c654 <_malloc_r>:
 802c654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c658:	1ccd      	adds	r5, r1, #3
 802c65a:	f025 0503 	bic.w	r5, r5, #3
 802c65e:	3508      	adds	r5, #8
 802c660:	2d0c      	cmp	r5, #12
 802c662:	bf38      	it	cc
 802c664:	250c      	movcc	r5, #12
 802c666:	2d00      	cmp	r5, #0
 802c668:	4607      	mov	r7, r0
 802c66a:	db01      	blt.n	802c670 <_malloc_r+0x1c>
 802c66c:	42a9      	cmp	r1, r5
 802c66e:	d905      	bls.n	802c67c <_malloc_r+0x28>
 802c670:	230c      	movs	r3, #12
 802c672:	603b      	str	r3, [r7, #0]
 802c674:	2600      	movs	r6, #0
 802c676:	4630      	mov	r0, r6
 802c678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c67c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c750 <_malloc_r+0xfc>
 802c680:	f000 f868 	bl	802c754 <__malloc_lock>
 802c684:	f8d8 3000 	ldr.w	r3, [r8]
 802c688:	461c      	mov	r4, r3
 802c68a:	bb5c      	cbnz	r4, 802c6e4 <_malloc_r+0x90>
 802c68c:	4629      	mov	r1, r5
 802c68e:	4638      	mov	r0, r7
 802c690:	f7ff ffc0 	bl	802c614 <sbrk_aligned>
 802c694:	1c43      	adds	r3, r0, #1
 802c696:	4604      	mov	r4, r0
 802c698:	d155      	bne.n	802c746 <_malloc_r+0xf2>
 802c69a:	f8d8 4000 	ldr.w	r4, [r8]
 802c69e:	4626      	mov	r6, r4
 802c6a0:	2e00      	cmp	r6, #0
 802c6a2:	d145      	bne.n	802c730 <_malloc_r+0xdc>
 802c6a4:	2c00      	cmp	r4, #0
 802c6a6:	d048      	beq.n	802c73a <_malloc_r+0xe6>
 802c6a8:	6823      	ldr	r3, [r4, #0]
 802c6aa:	4631      	mov	r1, r6
 802c6ac:	4638      	mov	r0, r7
 802c6ae:	eb04 0903 	add.w	r9, r4, r3
 802c6b2:	f001 fab9 	bl	802dc28 <_sbrk_r>
 802c6b6:	4581      	cmp	r9, r0
 802c6b8:	d13f      	bne.n	802c73a <_malloc_r+0xe6>
 802c6ba:	6821      	ldr	r1, [r4, #0]
 802c6bc:	1a6d      	subs	r5, r5, r1
 802c6be:	4629      	mov	r1, r5
 802c6c0:	4638      	mov	r0, r7
 802c6c2:	f7ff ffa7 	bl	802c614 <sbrk_aligned>
 802c6c6:	3001      	adds	r0, #1
 802c6c8:	d037      	beq.n	802c73a <_malloc_r+0xe6>
 802c6ca:	6823      	ldr	r3, [r4, #0]
 802c6cc:	442b      	add	r3, r5
 802c6ce:	6023      	str	r3, [r4, #0]
 802c6d0:	f8d8 3000 	ldr.w	r3, [r8]
 802c6d4:	2b00      	cmp	r3, #0
 802c6d6:	d038      	beq.n	802c74a <_malloc_r+0xf6>
 802c6d8:	685a      	ldr	r2, [r3, #4]
 802c6da:	42a2      	cmp	r2, r4
 802c6dc:	d12b      	bne.n	802c736 <_malloc_r+0xe2>
 802c6de:	2200      	movs	r2, #0
 802c6e0:	605a      	str	r2, [r3, #4]
 802c6e2:	e00f      	b.n	802c704 <_malloc_r+0xb0>
 802c6e4:	6822      	ldr	r2, [r4, #0]
 802c6e6:	1b52      	subs	r2, r2, r5
 802c6e8:	d41f      	bmi.n	802c72a <_malloc_r+0xd6>
 802c6ea:	2a0b      	cmp	r2, #11
 802c6ec:	d917      	bls.n	802c71e <_malloc_r+0xca>
 802c6ee:	1961      	adds	r1, r4, r5
 802c6f0:	42a3      	cmp	r3, r4
 802c6f2:	6025      	str	r5, [r4, #0]
 802c6f4:	bf18      	it	ne
 802c6f6:	6059      	strne	r1, [r3, #4]
 802c6f8:	6863      	ldr	r3, [r4, #4]
 802c6fa:	bf08      	it	eq
 802c6fc:	f8c8 1000 	streq.w	r1, [r8]
 802c700:	5162      	str	r2, [r4, r5]
 802c702:	604b      	str	r3, [r1, #4]
 802c704:	4638      	mov	r0, r7
 802c706:	f104 060b 	add.w	r6, r4, #11
 802c70a:	f000 f829 	bl	802c760 <__malloc_unlock>
 802c70e:	f026 0607 	bic.w	r6, r6, #7
 802c712:	1d23      	adds	r3, r4, #4
 802c714:	1af2      	subs	r2, r6, r3
 802c716:	d0ae      	beq.n	802c676 <_malloc_r+0x22>
 802c718:	1b9b      	subs	r3, r3, r6
 802c71a:	50a3      	str	r3, [r4, r2]
 802c71c:	e7ab      	b.n	802c676 <_malloc_r+0x22>
 802c71e:	42a3      	cmp	r3, r4
 802c720:	6862      	ldr	r2, [r4, #4]
 802c722:	d1dd      	bne.n	802c6e0 <_malloc_r+0x8c>
 802c724:	f8c8 2000 	str.w	r2, [r8]
 802c728:	e7ec      	b.n	802c704 <_malloc_r+0xb0>
 802c72a:	4623      	mov	r3, r4
 802c72c:	6864      	ldr	r4, [r4, #4]
 802c72e:	e7ac      	b.n	802c68a <_malloc_r+0x36>
 802c730:	4634      	mov	r4, r6
 802c732:	6876      	ldr	r6, [r6, #4]
 802c734:	e7b4      	b.n	802c6a0 <_malloc_r+0x4c>
 802c736:	4613      	mov	r3, r2
 802c738:	e7cc      	b.n	802c6d4 <_malloc_r+0x80>
 802c73a:	230c      	movs	r3, #12
 802c73c:	603b      	str	r3, [r7, #0]
 802c73e:	4638      	mov	r0, r7
 802c740:	f000 f80e 	bl	802c760 <__malloc_unlock>
 802c744:	e797      	b.n	802c676 <_malloc_r+0x22>
 802c746:	6025      	str	r5, [r4, #0]
 802c748:	e7dc      	b.n	802c704 <_malloc_r+0xb0>
 802c74a:	605b      	str	r3, [r3, #4]
 802c74c:	deff      	udf	#255	; 0xff
 802c74e:	bf00      	nop
 802c750:	2000d9c8 	.word	0x2000d9c8

0802c754 <__malloc_lock>:
 802c754:	4801      	ldr	r0, [pc, #4]	; (802c75c <__malloc_lock+0x8>)
 802c756:	f001 bab4 	b.w	802dcc2 <__retarget_lock_acquire_recursive>
 802c75a:	bf00      	nop
 802c75c:	2000db10 	.word	0x2000db10

0802c760 <__malloc_unlock>:
 802c760:	4801      	ldr	r0, [pc, #4]	; (802c768 <__malloc_unlock+0x8>)
 802c762:	f001 baaf 	b.w	802dcc4 <__retarget_lock_release_recursive>
 802c766:	bf00      	nop
 802c768:	2000db10 	.word	0x2000db10

0802c76c <__cvt>:
 802c76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c770:	ec55 4b10 	vmov	r4, r5, d0
 802c774:	2d00      	cmp	r5, #0
 802c776:	460e      	mov	r6, r1
 802c778:	4619      	mov	r1, r3
 802c77a:	462b      	mov	r3, r5
 802c77c:	bfbb      	ittet	lt
 802c77e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802c782:	461d      	movlt	r5, r3
 802c784:	2300      	movge	r3, #0
 802c786:	232d      	movlt	r3, #45	; 0x2d
 802c788:	700b      	strb	r3, [r1, #0]
 802c78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c78c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802c790:	4691      	mov	r9, r2
 802c792:	f023 0820 	bic.w	r8, r3, #32
 802c796:	bfbc      	itt	lt
 802c798:	4622      	movlt	r2, r4
 802c79a:	4614      	movlt	r4, r2
 802c79c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c7a0:	d005      	beq.n	802c7ae <__cvt+0x42>
 802c7a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802c7a6:	d100      	bne.n	802c7aa <__cvt+0x3e>
 802c7a8:	3601      	adds	r6, #1
 802c7aa:	2102      	movs	r1, #2
 802c7ac:	e000      	b.n	802c7b0 <__cvt+0x44>
 802c7ae:	2103      	movs	r1, #3
 802c7b0:	ab03      	add	r3, sp, #12
 802c7b2:	9301      	str	r3, [sp, #4]
 802c7b4:	ab02      	add	r3, sp, #8
 802c7b6:	9300      	str	r3, [sp, #0]
 802c7b8:	ec45 4b10 	vmov	d0, r4, r5
 802c7bc:	4653      	mov	r3, sl
 802c7be:	4632      	mov	r2, r6
 802c7c0:	f001 fb2e 	bl	802de20 <_dtoa_r>
 802c7c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802c7c8:	4607      	mov	r7, r0
 802c7ca:	d102      	bne.n	802c7d2 <__cvt+0x66>
 802c7cc:	f019 0f01 	tst.w	r9, #1
 802c7d0:	d022      	beq.n	802c818 <__cvt+0xac>
 802c7d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c7d6:	eb07 0906 	add.w	r9, r7, r6
 802c7da:	d110      	bne.n	802c7fe <__cvt+0x92>
 802c7dc:	783b      	ldrb	r3, [r7, #0]
 802c7de:	2b30      	cmp	r3, #48	; 0x30
 802c7e0:	d10a      	bne.n	802c7f8 <__cvt+0x8c>
 802c7e2:	2200      	movs	r2, #0
 802c7e4:	2300      	movs	r3, #0
 802c7e6:	4620      	mov	r0, r4
 802c7e8:	4629      	mov	r1, r5
 802c7ea:	f7e4 f985 	bl	8010af8 <__aeabi_dcmpeq>
 802c7ee:	b918      	cbnz	r0, 802c7f8 <__cvt+0x8c>
 802c7f0:	f1c6 0601 	rsb	r6, r6, #1
 802c7f4:	f8ca 6000 	str.w	r6, [sl]
 802c7f8:	f8da 3000 	ldr.w	r3, [sl]
 802c7fc:	4499      	add	r9, r3
 802c7fe:	2200      	movs	r2, #0
 802c800:	2300      	movs	r3, #0
 802c802:	4620      	mov	r0, r4
 802c804:	4629      	mov	r1, r5
 802c806:	f7e4 f977 	bl	8010af8 <__aeabi_dcmpeq>
 802c80a:	b108      	cbz	r0, 802c810 <__cvt+0xa4>
 802c80c:	f8cd 900c 	str.w	r9, [sp, #12]
 802c810:	2230      	movs	r2, #48	; 0x30
 802c812:	9b03      	ldr	r3, [sp, #12]
 802c814:	454b      	cmp	r3, r9
 802c816:	d307      	bcc.n	802c828 <__cvt+0xbc>
 802c818:	9b03      	ldr	r3, [sp, #12]
 802c81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c81c:	1bdb      	subs	r3, r3, r7
 802c81e:	4638      	mov	r0, r7
 802c820:	6013      	str	r3, [r2, #0]
 802c822:	b004      	add	sp, #16
 802c824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c828:	1c59      	adds	r1, r3, #1
 802c82a:	9103      	str	r1, [sp, #12]
 802c82c:	701a      	strb	r2, [r3, #0]
 802c82e:	e7f0      	b.n	802c812 <__cvt+0xa6>

0802c830 <__exponent>:
 802c830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c832:	4603      	mov	r3, r0
 802c834:	2900      	cmp	r1, #0
 802c836:	bfb8      	it	lt
 802c838:	4249      	neglt	r1, r1
 802c83a:	f803 2b02 	strb.w	r2, [r3], #2
 802c83e:	bfb4      	ite	lt
 802c840:	222d      	movlt	r2, #45	; 0x2d
 802c842:	222b      	movge	r2, #43	; 0x2b
 802c844:	2909      	cmp	r1, #9
 802c846:	7042      	strb	r2, [r0, #1]
 802c848:	dd2a      	ble.n	802c8a0 <__exponent+0x70>
 802c84a:	f10d 0207 	add.w	r2, sp, #7
 802c84e:	4617      	mov	r7, r2
 802c850:	260a      	movs	r6, #10
 802c852:	4694      	mov	ip, r2
 802c854:	fb91 f5f6 	sdiv	r5, r1, r6
 802c858:	fb06 1415 	mls	r4, r6, r5, r1
 802c85c:	3430      	adds	r4, #48	; 0x30
 802c85e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802c862:	460c      	mov	r4, r1
 802c864:	2c63      	cmp	r4, #99	; 0x63
 802c866:	f102 32ff 	add.w	r2, r2, #4294967295
 802c86a:	4629      	mov	r1, r5
 802c86c:	dcf1      	bgt.n	802c852 <__exponent+0x22>
 802c86e:	3130      	adds	r1, #48	; 0x30
 802c870:	f1ac 0402 	sub.w	r4, ip, #2
 802c874:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c878:	1c41      	adds	r1, r0, #1
 802c87a:	4622      	mov	r2, r4
 802c87c:	42ba      	cmp	r2, r7
 802c87e:	d30a      	bcc.n	802c896 <__exponent+0x66>
 802c880:	f10d 0209 	add.w	r2, sp, #9
 802c884:	eba2 020c 	sub.w	r2, r2, ip
 802c888:	42bc      	cmp	r4, r7
 802c88a:	bf88      	it	hi
 802c88c:	2200      	movhi	r2, #0
 802c88e:	4413      	add	r3, r2
 802c890:	1a18      	subs	r0, r3, r0
 802c892:	b003      	add	sp, #12
 802c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c896:	f812 5b01 	ldrb.w	r5, [r2], #1
 802c89a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802c89e:	e7ed      	b.n	802c87c <__exponent+0x4c>
 802c8a0:	2330      	movs	r3, #48	; 0x30
 802c8a2:	3130      	adds	r1, #48	; 0x30
 802c8a4:	7083      	strb	r3, [r0, #2]
 802c8a6:	70c1      	strb	r1, [r0, #3]
 802c8a8:	1d03      	adds	r3, r0, #4
 802c8aa:	e7f1      	b.n	802c890 <__exponent+0x60>

0802c8ac <_printf_float>:
 802c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c8b0:	ed2d 8b02 	vpush	{d8}
 802c8b4:	b08d      	sub	sp, #52	; 0x34
 802c8b6:	460c      	mov	r4, r1
 802c8b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802c8bc:	4616      	mov	r6, r2
 802c8be:	461f      	mov	r7, r3
 802c8c0:	4605      	mov	r5, r0
 802c8c2:	f001 f923 	bl	802db0c <_localeconv_r>
 802c8c6:	f8d0 a000 	ldr.w	sl, [r0]
 802c8ca:	4650      	mov	r0, sl
 802c8cc:	f7e3 fce8 	bl	80102a0 <strlen>
 802c8d0:	2300      	movs	r3, #0
 802c8d2:	930a      	str	r3, [sp, #40]	; 0x28
 802c8d4:	6823      	ldr	r3, [r4, #0]
 802c8d6:	9305      	str	r3, [sp, #20]
 802c8d8:	f8d8 3000 	ldr.w	r3, [r8]
 802c8dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 802c8e0:	3307      	adds	r3, #7
 802c8e2:	f023 0307 	bic.w	r3, r3, #7
 802c8e6:	f103 0208 	add.w	r2, r3, #8
 802c8ea:	f8c8 2000 	str.w	r2, [r8]
 802c8ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c8f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802c8f6:	9307      	str	r3, [sp, #28]
 802c8f8:	f8cd 8018 	str.w	r8, [sp, #24]
 802c8fc:	ee08 0a10 	vmov	s16, r0
 802c900:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802c904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c908:	4b9e      	ldr	r3, [pc, #632]	; (802cb84 <_printf_float+0x2d8>)
 802c90a:	f04f 32ff 	mov.w	r2, #4294967295
 802c90e:	f7e4 f925 	bl	8010b5c <__aeabi_dcmpun>
 802c912:	bb88      	cbnz	r0, 802c978 <_printf_float+0xcc>
 802c914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c918:	4b9a      	ldr	r3, [pc, #616]	; (802cb84 <_printf_float+0x2d8>)
 802c91a:	f04f 32ff 	mov.w	r2, #4294967295
 802c91e:	f7e4 f8ff 	bl	8010b20 <__aeabi_dcmple>
 802c922:	bb48      	cbnz	r0, 802c978 <_printf_float+0xcc>
 802c924:	2200      	movs	r2, #0
 802c926:	2300      	movs	r3, #0
 802c928:	4640      	mov	r0, r8
 802c92a:	4649      	mov	r1, r9
 802c92c:	f7e4 f8ee 	bl	8010b0c <__aeabi_dcmplt>
 802c930:	b110      	cbz	r0, 802c938 <_printf_float+0x8c>
 802c932:	232d      	movs	r3, #45	; 0x2d
 802c934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c938:	4a93      	ldr	r2, [pc, #588]	; (802cb88 <_printf_float+0x2dc>)
 802c93a:	4b94      	ldr	r3, [pc, #592]	; (802cb8c <_printf_float+0x2e0>)
 802c93c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802c940:	bf94      	ite	ls
 802c942:	4690      	movls	r8, r2
 802c944:	4698      	movhi	r8, r3
 802c946:	2303      	movs	r3, #3
 802c948:	6123      	str	r3, [r4, #16]
 802c94a:	9b05      	ldr	r3, [sp, #20]
 802c94c:	f023 0304 	bic.w	r3, r3, #4
 802c950:	6023      	str	r3, [r4, #0]
 802c952:	f04f 0900 	mov.w	r9, #0
 802c956:	9700      	str	r7, [sp, #0]
 802c958:	4633      	mov	r3, r6
 802c95a:	aa0b      	add	r2, sp, #44	; 0x2c
 802c95c:	4621      	mov	r1, r4
 802c95e:	4628      	mov	r0, r5
 802c960:	f000 f9da 	bl	802cd18 <_printf_common>
 802c964:	3001      	adds	r0, #1
 802c966:	f040 8090 	bne.w	802ca8a <_printf_float+0x1de>
 802c96a:	f04f 30ff 	mov.w	r0, #4294967295
 802c96e:	b00d      	add	sp, #52	; 0x34
 802c970:	ecbd 8b02 	vpop	{d8}
 802c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c978:	4642      	mov	r2, r8
 802c97a:	464b      	mov	r3, r9
 802c97c:	4640      	mov	r0, r8
 802c97e:	4649      	mov	r1, r9
 802c980:	f7e4 f8ec 	bl	8010b5c <__aeabi_dcmpun>
 802c984:	b140      	cbz	r0, 802c998 <_printf_float+0xec>
 802c986:	464b      	mov	r3, r9
 802c988:	2b00      	cmp	r3, #0
 802c98a:	bfbc      	itt	lt
 802c98c:	232d      	movlt	r3, #45	; 0x2d
 802c98e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802c992:	4a7f      	ldr	r2, [pc, #508]	; (802cb90 <_printf_float+0x2e4>)
 802c994:	4b7f      	ldr	r3, [pc, #508]	; (802cb94 <_printf_float+0x2e8>)
 802c996:	e7d1      	b.n	802c93c <_printf_float+0x90>
 802c998:	6863      	ldr	r3, [r4, #4]
 802c99a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802c99e:	9206      	str	r2, [sp, #24]
 802c9a0:	1c5a      	adds	r2, r3, #1
 802c9a2:	d13f      	bne.n	802ca24 <_printf_float+0x178>
 802c9a4:	2306      	movs	r3, #6
 802c9a6:	6063      	str	r3, [r4, #4]
 802c9a8:	9b05      	ldr	r3, [sp, #20]
 802c9aa:	6861      	ldr	r1, [r4, #4]
 802c9ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802c9b0:	2300      	movs	r3, #0
 802c9b2:	9303      	str	r3, [sp, #12]
 802c9b4:	ab0a      	add	r3, sp, #40	; 0x28
 802c9b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 802c9ba:	ab09      	add	r3, sp, #36	; 0x24
 802c9bc:	ec49 8b10 	vmov	d0, r8, r9
 802c9c0:	9300      	str	r3, [sp, #0]
 802c9c2:	6022      	str	r2, [r4, #0]
 802c9c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802c9c8:	4628      	mov	r0, r5
 802c9ca:	f7ff fecf 	bl	802c76c <__cvt>
 802c9ce:	9b06      	ldr	r3, [sp, #24]
 802c9d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c9d2:	2b47      	cmp	r3, #71	; 0x47
 802c9d4:	4680      	mov	r8, r0
 802c9d6:	d108      	bne.n	802c9ea <_printf_float+0x13e>
 802c9d8:	1cc8      	adds	r0, r1, #3
 802c9da:	db02      	blt.n	802c9e2 <_printf_float+0x136>
 802c9dc:	6863      	ldr	r3, [r4, #4]
 802c9de:	4299      	cmp	r1, r3
 802c9e0:	dd41      	ble.n	802ca66 <_printf_float+0x1ba>
 802c9e2:	f1ab 0302 	sub.w	r3, fp, #2
 802c9e6:	fa5f fb83 	uxtb.w	fp, r3
 802c9ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c9ee:	d820      	bhi.n	802ca32 <_printf_float+0x186>
 802c9f0:	3901      	subs	r1, #1
 802c9f2:	465a      	mov	r2, fp
 802c9f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802c9f8:	9109      	str	r1, [sp, #36]	; 0x24
 802c9fa:	f7ff ff19 	bl	802c830 <__exponent>
 802c9fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ca00:	1813      	adds	r3, r2, r0
 802ca02:	2a01      	cmp	r2, #1
 802ca04:	4681      	mov	r9, r0
 802ca06:	6123      	str	r3, [r4, #16]
 802ca08:	dc02      	bgt.n	802ca10 <_printf_float+0x164>
 802ca0a:	6822      	ldr	r2, [r4, #0]
 802ca0c:	07d2      	lsls	r2, r2, #31
 802ca0e:	d501      	bpl.n	802ca14 <_printf_float+0x168>
 802ca10:	3301      	adds	r3, #1
 802ca12:	6123      	str	r3, [r4, #16]
 802ca14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802ca18:	2b00      	cmp	r3, #0
 802ca1a:	d09c      	beq.n	802c956 <_printf_float+0xaa>
 802ca1c:	232d      	movs	r3, #45	; 0x2d
 802ca1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ca22:	e798      	b.n	802c956 <_printf_float+0xaa>
 802ca24:	9a06      	ldr	r2, [sp, #24]
 802ca26:	2a47      	cmp	r2, #71	; 0x47
 802ca28:	d1be      	bne.n	802c9a8 <_printf_float+0xfc>
 802ca2a:	2b00      	cmp	r3, #0
 802ca2c:	d1bc      	bne.n	802c9a8 <_printf_float+0xfc>
 802ca2e:	2301      	movs	r3, #1
 802ca30:	e7b9      	b.n	802c9a6 <_printf_float+0xfa>
 802ca32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802ca36:	d118      	bne.n	802ca6a <_printf_float+0x1be>
 802ca38:	2900      	cmp	r1, #0
 802ca3a:	6863      	ldr	r3, [r4, #4]
 802ca3c:	dd0b      	ble.n	802ca56 <_printf_float+0x1aa>
 802ca3e:	6121      	str	r1, [r4, #16]
 802ca40:	b913      	cbnz	r3, 802ca48 <_printf_float+0x19c>
 802ca42:	6822      	ldr	r2, [r4, #0]
 802ca44:	07d0      	lsls	r0, r2, #31
 802ca46:	d502      	bpl.n	802ca4e <_printf_float+0x1a2>
 802ca48:	3301      	adds	r3, #1
 802ca4a:	440b      	add	r3, r1
 802ca4c:	6123      	str	r3, [r4, #16]
 802ca4e:	65a1      	str	r1, [r4, #88]	; 0x58
 802ca50:	f04f 0900 	mov.w	r9, #0
 802ca54:	e7de      	b.n	802ca14 <_printf_float+0x168>
 802ca56:	b913      	cbnz	r3, 802ca5e <_printf_float+0x1b2>
 802ca58:	6822      	ldr	r2, [r4, #0]
 802ca5a:	07d2      	lsls	r2, r2, #31
 802ca5c:	d501      	bpl.n	802ca62 <_printf_float+0x1b6>
 802ca5e:	3302      	adds	r3, #2
 802ca60:	e7f4      	b.n	802ca4c <_printf_float+0x1a0>
 802ca62:	2301      	movs	r3, #1
 802ca64:	e7f2      	b.n	802ca4c <_printf_float+0x1a0>
 802ca66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802ca6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ca6c:	4299      	cmp	r1, r3
 802ca6e:	db05      	blt.n	802ca7c <_printf_float+0x1d0>
 802ca70:	6823      	ldr	r3, [r4, #0]
 802ca72:	6121      	str	r1, [r4, #16]
 802ca74:	07d8      	lsls	r0, r3, #31
 802ca76:	d5ea      	bpl.n	802ca4e <_printf_float+0x1a2>
 802ca78:	1c4b      	adds	r3, r1, #1
 802ca7a:	e7e7      	b.n	802ca4c <_printf_float+0x1a0>
 802ca7c:	2900      	cmp	r1, #0
 802ca7e:	bfd4      	ite	le
 802ca80:	f1c1 0202 	rsble	r2, r1, #2
 802ca84:	2201      	movgt	r2, #1
 802ca86:	4413      	add	r3, r2
 802ca88:	e7e0      	b.n	802ca4c <_printf_float+0x1a0>
 802ca8a:	6823      	ldr	r3, [r4, #0]
 802ca8c:	055a      	lsls	r2, r3, #21
 802ca8e:	d407      	bmi.n	802caa0 <_printf_float+0x1f4>
 802ca90:	6923      	ldr	r3, [r4, #16]
 802ca92:	4642      	mov	r2, r8
 802ca94:	4631      	mov	r1, r6
 802ca96:	4628      	mov	r0, r5
 802ca98:	47b8      	blx	r7
 802ca9a:	3001      	adds	r0, #1
 802ca9c:	d12c      	bne.n	802caf8 <_printf_float+0x24c>
 802ca9e:	e764      	b.n	802c96a <_printf_float+0xbe>
 802caa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802caa4:	f240 80e0 	bls.w	802cc68 <_printf_float+0x3bc>
 802caa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802caac:	2200      	movs	r2, #0
 802caae:	2300      	movs	r3, #0
 802cab0:	f7e4 f822 	bl	8010af8 <__aeabi_dcmpeq>
 802cab4:	2800      	cmp	r0, #0
 802cab6:	d034      	beq.n	802cb22 <_printf_float+0x276>
 802cab8:	4a37      	ldr	r2, [pc, #220]	; (802cb98 <_printf_float+0x2ec>)
 802caba:	2301      	movs	r3, #1
 802cabc:	4631      	mov	r1, r6
 802cabe:	4628      	mov	r0, r5
 802cac0:	47b8      	blx	r7
 802cac2:	3001      	adds	r0, #1
 802cac4:	f43f af51 	beq.w	802c96a <_printf_float+0xbe>
 802cac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cacc:	429a      	cmp	r2, r3
 802cace:	db02      	blt.n	802cad6 <_printf_float+0x22a>
 802cad0:	6823      	ldr	r3, [r4, #0]
 802cad2:	07d8      	lsls	r0, r3, #31
 802cad4:	d510      	bpl.n	802caf8 <_printf_float+0x24c>
 802cad6:	ee18 3a10 	vmov	r3, s16
 802cada:	4652      	mov	r2, sl
 802cadc:	4631      	mov	r1, r6
 802cade:	4628      	mov	r0, r5
 802cae0:	47b8      	blx	r7
 802cae2:	3001      	adds	r0, #1
 802cae4:	f43f af41 	beq.w	802c96a <_printf_float+0xbe>
 802cae8:	f04f 0800 	mov.w	r8, #0
 802caec:	f104 091a 	add.w	r9, r4, #26
 802caf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802caf2:	3b01      	subs	r3, #1
 802caf4:	4543      	cmp	r3, r8
 802caf6:	dc09      	bgt.n	802cb0c <_printf_float+0x260>
 802caf8:	6823      	ldr	r3, [r4, #0]
 802cafa:	079b      	lsls	r3, r3, #30
 802cafc:	f100 8107 	bmi.w	802cd0e <_printf_float+0x462>
 802cb00:	68e0      	ldr	r0, [r4, #12]
 802cb02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802cb04:	4298      	cmp	r0, r3
 802cb06:	bfb8      	it	lt
 802cb08:	4618      	movlt	r0, r3
 802cb0a:	e730      	b.n	802c96e <_printf_float+0xc2>
 802cb0c:	2301      	movs	r3, #1
 802cb0e:	464a      	mov	r2, r9
 802cb10:	4631      	mov	r1, r6
 802cb12:	4628      	mov	r0, r5
 802cb14:	47b8      	blx	r7
 802cb16:	3001      	adds	r0, #1
 802cb18:	f43f af27 	beq.w	802c96a <_printf_float+0xbe>
 802cb1c:	f108 0801 	add.w	r8, r8, #1
 802cb20:	e7e6      	b.n	802caf0 <_printf_float+0x244>
 802cb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cb24:	2b00      	cmp	r3, #0
 802cb26:	dc39      	bgt.n	802cb9c <_printf_float+0x2f0>
 802cb28:	4a1b      	ldr	r2, [pc, #108]	; (802cb98 <_printf_float+0x2ec>)
 802cb2a:	2301      	movs	r3, #1
 802cb2c:	4631      	mov	r1, r6
 802cb2e:	4628      	mov	r0, r5
 802cb30:	47b8      	blx	r7
 802cb32:	3001      	adds	r0, #1
 802cb34:	f43f af19 	beq.w	802c96a <_printf_float+0xbe>
 802cb38:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802cb3c:	4313      	orrs	r3, r2
 802cb3e:	d102      	bne.n	802cb46 <_printf_float+0x29a>
 802cb40:	6823      	ldr	r3, [r4, #0]
 802cb42:	07d9      	lsls	r1, r3, #31
 802cb44:	d5d8      	bpl.n	802caf8 <_printf_float+0x24c>
 802cb46:	ee18 3a10 	vmov	r3, s16
 802cb4a:	4652      	mov	r2, sl
 802cb4c:	4631      	mov	r1, r6
 802cb4e:	4628      	mov	r0, r5
 802cb50:	47b8      	blx	r7
 802cb52:	3001      	adds	r0, #1
 802cb54:	f43f af09 	beq.w	802c96a <_printf_float+0xbe>
 802cb58:	f04f 0900 	mov.w	r9, #0
 802cb5c:	f104 0a1a 	add.w	sl, r4, #26
 802cb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cb62:	425b      	negs	r3, r3
 802cb64:	454b      	cmp	r3, r9
 802cb66:	dc01      	bgt.n	802cb6c <_printf_float+0x2c0>
 802cb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cb6a:	e792      	b.n	802ca92 <_printf_float+0x1e6>
 802cb6c:	2301      	movs	r3, #1
 802cb6e:	4652      	mov	r2, sl
 802cb70:	4631      	mov	r1, r6
 802cb72:	4628      	mov	r0, r5
 802cb74:	47b8      	blx	r7
 802cb76:	3001      	adds	r0, #1
 802cb78:	f43f aef7 	beq.w	802c96a <_printf_float+0xbe>
 802cb7c:	f109 0901 	add.w	r9, r9, #1
 802cb80:	e7ee      	b.n	802cb60 <_printf_float+0x2b4>
 802cb82:	bf00      	nop
 802cb84:	7fefffff 	.word	0x7fefffff
 802cb88:	08034ba0 	.word	0x08034ba0
 802cb8c:	08034ba4 	.word	0x08034ba4
 802cb90:	08034ba8 	.word	0x08034ba8
 802cb94:	08034bac 	.word	0x08034bac
 802cb98:	08034f90 	.word	0x08034f90
 802cb9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cb9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802cba0:	429a      	cmp	r2, r3
 802cba2:	bfa8      	it	ge
 802cba4:	461a      	movge	r2, r3
 802cba6:	2a00      	cmp	r2, #0
 802cba8:	4691      	mov	r9, r2
 802cbaa:	dc37      	bgt.n	802cc1c <_printf_float+0x370>
 802cbac:	f04f 0b00 	mov.w	fp, #0
 802cbb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802cbb4:	f104 021a 	add.w	r2, r4, #26
 802cbb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802cbba:	9305      	str	r3, [sp, #20]
 802cbbc:	eba3 0309 	sub.w	r3, r3, r9
 802cbc0:	455b      	cmp	r3, fp
 802cbc2:	dc33      	bgt.n	802cc2c <_printf_float+0x380>
 802cbc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cbc8:	429a      	cmp	r2, r3
 802cbca:	db3b      	blt.n	802cc44 <_printf_float+0x398>
 802cbcc:	6823      	ldr	r3, [r4, #0]
 802cbce:	07da      	lsls	r2, r3, #31
 802cbd0:	d438      	bmi.n	802cc44 <_printf_float+0x398>
 802cbd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802cbd6:	eba2 0903 	sub.w	r9, r2, r3
 802cbda:	9b05      	ldr	r3, [sp, #20]
 802cbdc:	1ad2      	subs	r2, r2, r3
 802cbde:	4591      	cmp	r9, r2
 802cbe0:	bfa8      	it	ge
 802cbe2:	4691      	movge	r9, r2
 802cbe4:	f1b9 0f00 	cmp.w	r9, #0
 802cbe8:	dc35      	bgt.n	802cc56 <_printf_float+0x3aa>
 802cbea:	f04f 0800 	mov.w	r8, #0
 802cbee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802cbf2:	f104 0a1a 	add.w	sl, r4, #26
 802cbf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cbfa:	1a9b      	subs	r3, r3, r2
 802cbfc:	eba3 0309 	sub.w	r3, r3, r9
 802cc00:	4543      	cmp	r3, r8
 802cc02:	f77f af79 	ble.w	802caf8 <_printf_float+0x24c>
 802cc06:	2301      	movs	r3, #1
 802cc08:	4652      	mov	r2, sl
 802cc0a:	4631      	mov	r1, r6
 802cc0c:	4628      	mov	r0, r5
 802cc0e:	47b8      	blx	r7
 802cc10:	3001      	adds	r0, #1
 802cc12:	f43f aeaa 	beq.w	802c96a <_printf_float+0xbe>
 802cc16:	f108 0801 	add.w	r8, r8, #1
 802cc1a:	e7ec      	b.n	802cbf6 <_printf_float+0x34a>
 802cc1c:	4613      	mov	r3, r2
 802cc1e:	4631      	mov	r1, r6
 802cc20:	4642      	mov	r2, r8
 802cc22:	4628      	mov	r0, r5
 802cc24:	47b8      	blx	r7
 802cc26:	3001      	adds	r0, #1
 802cc28:	d1c0      	bne.n	802cbac <_printf_float+0x300>
 802cc2a:	e69e      	b.n	802c96a <_printf_float+0xbe>
 802cc2c:	2301      	movs	r3, #1
 802cc2e:	4631      	mov	r1, r6
 802cc30:	4628      	mov	r0, r5
 802cc32:	9205      	str	r2, [sp, #20]
 802cc34:	47b8      	blx	r7
 802cc36:	3001      	adds	r0, #1
 802cc38:	f43f ae97 	beq.w	802c96a <_printf_float+0xbe>
 802cc3c:	9a05      	ldr	r2, [sp, #20]
 802cc3e:	f10b 0b01 	add.w	fp, fp, #1
 802cc42:	e7b9      	b.n	802cbb8 <_printf_float+0x30c>
 802cc44:	ee18 3a10 	vmov	r3, s16
 802cc48:	4652      	mov	r2, sl
 802cc4a:	4631      	mov	r1, r6
 802cc4c:	4628      	mov	r0, r5
 802cc4e:	47b8      	blx	r7
 802cc50:	3001      	adds	r0, #1
 802cc52:	d1be      	bne.n	802cbd2 <_printf_float+0x326>
 802cc54:	e689      	b.n	802c96a <_printf_float+0xbe>
 802cc56:	9a05      	ldr	r2, [sp, #20]
 802cc58:	464b      	mov	r3, r9
 802cc5a:	4442      	add	r2, r8
 802cc5c:	4631      	mov	r1, r6
 802cc5e:	4628      	mov	r0, r5
 802cc60:	47b8      	blx	r7
 802cc62:	3001      	adds	r0, #1
 802cc64:	d1c1      	bne.n	802cbea <_printf_float+0x33e>
 802cc66:	e680      	b.n	802c96a <_printf_float+0xbe>
 802cc68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cc6a:	2a01      	cmp	r2, #1
 802cc6c:	dc01      	bgt.n	802cc72 <_printf_float+0x3c6>
 802cc6e:	07db      	lsls	r3, r3, #31
 802cc70:	d53a      	bpl.n	802cce8 <_printf_float+0x43c>
 802cc72:	2301      	movs	r3, #1
 802cc74:	4642      	mov	r2, r8
 802cc76:	4631      	mov	r1, r6
 802cc78:	4628      	mov	r0, r5
 802cc7a:	47b8      	blx	r7
 802cc7c:	3001      	adds	r0, #1
 802cc7e:	f43f ae74 	beq.w	802c96a <_printf_float+0xbe>
 802cc82:	ee18 3a10 	vmov	r3, s16
 802cc86:	4652      	mov	r2, sl
 802cc88:	4631      	mov	r1, r6
 802cc8a:	4628      	mov	r0, r5
 802cc8c:	47b8      	blx	r7
 802cc8e:	3001      	adds	r0, #1
 802cc90:	f43f ae6b 	beq.w	802c96a <_printf_float+0xbe>
 802cc94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802cc98:	2200      	movs	r2, #0
 802cc9a:	2300      	movs	r3, #0
 802cc9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802cca0:	f7e3 ff2a 	bl	8010af8 <__aeabi_dcmpeq>
 802cca4:	b9d8      	cbnz	r0, 802ccde <_printf_float+0x432>
 802cca6:	f10a 33ff 	add.w	r3, sl, #4294967295
 802ccaa:	f108 0201 	add.w	r2, r8, #1
 802ccae:	4631      	mov	r1, r6
 802ccb0:	4628      	mov	r0, r5
 802ccb2:	47b8      	blx	r7
 802ccb4:	3001      	adds	r0, #1
 802ccb6:	d10e      	bne.n	802ccd6 <_printf_float+0x42a>
 802ccb8:	e657      	b.n	802c96a <_printf_float+0xbe>
 802ccba:	2301      	movs	r3, #1
 802ccbc:	4652      	mov	r2, sl
 802ccbe:	4631      	mov	r1, r6
 802ccc0:	4628      	mov	r0, r5
 802ccc2:	47b8      	blx	r7
 802ccc4:	3001      	adds	r0, #1
 802ccc6:	f43f ae50 	beq.w	802c96a <_printf_float+0xbe>
 802ccca:	f108 0801 	add.w	r8, r8, #1
 802ccce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ccd0:	3b01      	subs	r3, #1
 802ccd2:	4543      	cmp	r3, r8
 802ccd4:	dcf1      	bgt.n	802ccba <_printf_float+0x40e>
 802ccd6:	464b      	mov	r3, r9
 802ccd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802ccdc:	e6da      	b.n	802ca94 <_printf_float+0x1e8>
 802ccde:	f04f 0800 	mov.w	r8, #0
 802cce2:	f104 0a1a 	add.w	sl, r4, #26
 802cce6:	e7f2      	b.n	802ccce <_printf_float+0x422>
 802cce8:	2301      	movs	r3, #1
 802ccea:	4642      	mov	r2, r8
 802ccec:	e7df      	b.n	802ccae <_printf_float+0x402>
 802ccee:	2301      	movs	r3, #1
 802ccf0:	464a      	mov	r2, r9
 802ccf2:	4631      	mov	r1, r6
 802ccf4:	4628      	mov	r0, r5
 802ccf6:	47b8      	blx	r7
 802ccf8:	3001      	adds	r0, #1
 802ccfa:	f43f ae36 	beq.w	802c96a <_printf_float+0xbe>
 802ccfe:	f108 0801 	add.w	r8, r8, #1
 802cd02:	68e3      	ldr	r3, [r4, #12]
 802cd04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802cd06:	1a5b      	subs	r3, r3, r1
 802cd08:	4543      	cmp	r3, r8
 802cd0a:	dcf0      	bgt.n	802ccee <_printf_float+0x442>
 802cd0c:	e6f8      	b.n	802cb00 <_printf_float+0x254>
 802cd0e:	f04f 0800 	mov.w	r8, #0
 802cd12:	f104 0919 	add.w	r9, r4, #25
 802cd16:	e7f4      	b.n	802cd02 <_printf_float+0x456>

0802cd18 <_printf_common>:
 802cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cd1c:	4616      	mov	r6, r2
 802cd1e:	4699      	mov	r9, r3
 802cd20:	688a      	ldr	r2, [r1, #8]
 802cd22:	690b      	ldr	r3, [r1, #16]
 802cd24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802cd28:	4293      	cmp	r3, r2
 802cd2a:	bfb8      	it	lt
 802cd2c:	4613      	movlt	r3, r2
 802cd2e:	6033      	str	r3, [r6, #0]
 802cd30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802cd34:	4607      	mov	r7, r0
 802cd36:	460c      	mov	r4, r1
 802cd38:	b10a      	cbz	r2, 802cd3e <_printf_common+0x26>
 802cd3a:	3301      	adds	r3, #1
 802cd3c:	6033      	str	r3, [r6, #0]
 802cd3e:	6823      	ldr	r3, [r4, #0]
 802cd40:	0699      	lsls	r1, r3, #26
 802cd42:	bf42      	ittt	mi
 802cd44:	6833      	ldrmi	r3, [r6, #0]
 802cd46:	3302      	addmi	r3, #2
 802cd48:	6033      	strmi	r3, [r6, #0]
 802cd4a:	6825      	ldr	r5, [r4, #0]
 802cd4c:	f015 0506 	ands.w	r5, r5, #6
 802cd50:	d106      	bne.n	802cd60 <_printf_common+0x48>
 802cd52:	f104 0a19 	add.w	sl, r4, #25
 802cd56:	68e3      	ldr	r3, [r4, #12]
 802cd58:	6832      	ldr	r2, [r6, #0]
 802cd5a:	1a9b      	subs	r3, r3, r2
 802cd5c:	42ab      	cmp	r3, r5
 802cd5e:	dc26      	bgt.n	802cdae <_printf_common+0x96>
 802cd60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cd64:	1e13      	subs	r3, r2, #0
 802cd66:	6822      	ldr	r2, [r4, #0]
 802cd68:	bf18      	it	ne
 802cd6a:	2301      	movne	r3, #1
 802cd6c:	0692      	lsls	r2, r2, #26
 802cd6e:	d42b      	bmi.n	802cdc8 <_printf_common+0xb0>
 802cd70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cd74:	4649      	mov	r1, r9
 802cd76:	4638      	mov	r0, r7
 802cd78:	47c0      	blx	r8
 802cd7a:	3001      	adds	r0, #1
 802cd7c:	d01e      	beq.n	802cdbc <_printf_common+0xa4>
 802cd7e:	6823      	ldr	r3, [r4, #0]
 802cd80:	6922      	ldr	r2, [r4, #16]
 802cd82:	f003 0306 	and.w	r3, r3, #6
 802cd86:	2b04      	cmp	r3, #4
 802cd88:	bf02      	ittt	eq
 802cd8a:	68e5      	ldreq	r5, [r4, #12]
 802cd8c:	6833      	ldreq	r3, [r6, #0]
 802cd8e:	1aed      	subeq	r5, r5, r3
 802cd90:	68a3      	ldr	r3, [r4, #8]
 802cd92:	bf0c      	ite	eq
 802cd94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cd98:	2500      	movne	r5, #0
 802cd9a:	4293      	cmp	r3, r2
 802cd9c:	bfc4      	itt	gt
 802cd9e:	1a9b      	subgt	r3, r3, r2
 802cda0:	18ed      	addgt	r5, r5, r3
 802cda2:	2600      	movs	r6, #0
 802cda4:	341a      	adds	r4, #26
 802cda6:	42b5      	cmp	r5, r6
 802cda8:	d11a      	bne.n	802cde0 <_printf_common+0xc8>
 802cdaa:	2000      	movs	r0, #0
 802cdac:	e008      	b.n	802cdc0 <_printf_common+0xa8>
 802cdae:	2301      	movs	r3, #1
 802cdb0:	4652      	mov	r2, sl
 802cdb2:	4649      	mov	r1, r9
 802cdb4:	4638      	mov	r0, r7
 802cdb6:	47c0      	blx	r8
 802cdb8:	3001      	adds	r0, #1
 802cdba:	d103      	bne.n	802cdc4 <_printf_common+0xac>
 802cdbc:	f04f 30ff 	mov.w	r0, #4294967295
 802cdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cdc4:	3501      	adds	r5, #1
 802cdc6:	e7c6      	b.n	802cd56 <_printf_common+0x3e>
 802cdc8:	18e1      	adds	r1, r4, r3
 802cdca:	1c5a      	adds	r2, r3, #1
 802cdcc:	2030      	movs	r0, #48	; 0x30
 802cdce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cdd2:	4422      	add	r2, r4
 802cdd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cdd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cddc:	3302      	adds	r3, #2
 802cdde:	e7c7      	b.n	802cd70 <_printf_common+0x58>
 802cde0:	2301      	movs	r3, #1
 802cde2:	4622      	mov	r2, r4
 802cde4:	4649      	mov	r1, r9
 802cde6:	4638      	mov	r0, r7
 802cde8:	47c0      	blx	r8
 802cdea:	3001      	adds	r0, #1
 802cdec:	d0e6      	beq.n	802cdbc <_printf_common+0xa4>
 802cdee:	3601      	adds	r6, #1
 802cdf0:	e7d9      	b.n	802cda6 <_printf_common+0x8e>
	...

0802cdf4 <_printf_i>:
 802cdf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cdf8:	7e0f      	ldrb	r7, [r1, #24]
 802cdfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802cdfc:	2f78      	cmp	r7, #120	; 0x78
 802cdfe:	4691      	mov	r9, r2
 802ce00:	4680      	mov	r8, r0
 802ce02:	460c      	mov	r4, r1
 802ce04:	469a      	mov	sl, r3
 802ce06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802ce0a:	d807      	bhi.n	802ce1c <_printf_i+0x28>
 802ce0c:	2f62      	cmp	r7, #98	; 0x62
 802ce0e:	d80a      	bhi.n	802ce26 <_printf_i+0x32>
 802ce10:	2f00      	cmp	r7, #0
 802ce12:	f000 80d4 	beq.w	802cfbe <_printf_i+0x1ca>
 802ce16:	2f58      	cmp	r7, #88	; 0x58
 802ce18:	f000 80c0 	beq.w	802cf9c <_printf_i+0x1a8>
 802ce1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ce20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ce24:	e03a      	b.n	802ce9c <_printf_i+0xa8>
 802ce26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ce2a:	2b15      	cmp	r3, #21
 802ce2c:	d8f6      	bhi.n	802ce1c <_printf_i+0x28>
 802ce2e:	a101      	add	r1, pc, #4	; (adr r1, 802ce34 <_printf_i+0x40>)
 802ce30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ce34:	0802ce8d 	.word	0x0802ce8d
 802ce38:	0802cea1 	.word	0x0802cea1
 802ce3c:	0802ce1d 	.word	0x0802ce1d
 802ce40:	0802ce1d 	.word	0x0802ce1d
 802ce44:	0802ce1d 	.word	0x0802ce1d
 802ce48:	0802ce1d 	.word	0x0802ce1d
 802ce4c:	0802cea1 	.word	0x0802cea1
 802ce50:	0802ce1d 	.word	0x0802ce1d
 802ce54:	0802ce1d 	.word	0x0802ce1d
 802ce58:	0802ce1d 	.word	0x0802ce1d
 802ce5c:	0802ce1d 	.word	0x0802ce1d
 802ce60:	0802cfa5 	.word	0x0802cfa5
 802ce64:	0802cecd 	.word	0x0802cecd
 802ce68:	0802cf5f 	.word	0x0802cf5f
 802ce6c:	0802ce1d 	.word	0x0802ce1d
 802ce70:	0802ce1d 	.word	0x0802ce1d
 802ce74:	0802cfc7 	.word	0x0802cfc7
 802ce78:	0802ce1d 	.word	0x0802ce1d
 802ce7c:	0802cecd 	.word	0x0802cecd
 802ce80:	0802ce1d 	.word	0x0802ce1d
 802ce84:	0802ce1d 	.word	0x0802ce1d
 802ce88:	0802cf67 	.word	0x0802cf67
 802ce8c:	682b      	ldr	r3, [r5, #0]
 802ce8e:	1d1a      	adds	r2, r3, #4
 802ce90:	681b      	ldr	r3, [r3, #0]
 802ce92:	602a      	str	r2, [r5, #0]
 802ce94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ce98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ce9c:	2301      	movs	r3, #1
 802ce9e:	e09f      	b.n	802cfe0 <_printf_i+0x1ec>
 802cea0:	6820      	ldr	r0, [r4, #0]
 802cea2:	682b      	ldr	r3, [r5, #0]
 802cea4:	0607      	lsls	r7, r0, #24
 802cea6:	f103 0104 	add.w	r1, r3, #4
 802ceaa:	6029      	str	r1, [r5, #0]
 802ceac:	d501      	bpl.n	802ceb2 <_printf_i+0xbe>
 802ceae:	681e      	ldr	r6, [r3, #0]
 802ceb0:	e003      	b.n	802ceba <_printf_i+0xc6>
 802ceb2:	0646      	lsls	r6, r0, #25
 802ceb4:	d5fb      	bpl.n	802ceae <_printf_i+0xba>
 802ceb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 802ceba:	2e00      	cmp	r6, #0
 802cebc:	da03      	bge.n	802cec6 <_printf_i+0xd2>
 802cebe:	232d      	movs	r3, #45	; 0x2d
 802cec0:	4276      	negs	r6, r6
 802cec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cec6:	485a      	ldr	r0, [pc, #360]	; (802d030 <_printf_i+0x23c>)
 802cec8:	230a      	movs	r3, #10
 802ceca:	e012      	b.n	802cef2 <_printf_i+0xfe>
 802cecc:	682b      	ldr	r3, [r5, #0]
 802cece:	6820      	ldr	r0, [r4, #0]
 802ced0:	1d19      	adds	r1, r3, #4
 802ced2:	6029      	str	r1, [r5, #0]
 802ced4:	0605      	lsls	r5, r0, #24
 802ced6:	d501      	bpl.n	802cedc <_printf_i+0xe8>
 802ced8:	681e      	ldr	r6, [r3, #0]
 802ceda:	e002      	b.n	802cee2 <_printf_i+0xee>
 802cedc:	0641      	lsls	r1, r0, #25
 802cede:	d5fb      	bpl.n	802ced8 <_printf_i+0xe4>
 802cee0:	881e      	ldrh	r6, [r3, #0]
 802cee2:	4853      	ldr	r0, [pc, #332]	; (802d030 <_printf_i+0x23c>)
 802cee4:	2f6f      	cmp	r7, #111	; 0x6f
 802cee6:	bf0c      	ite	eq
 802cee8:	2308      	moveq	r3, #8
 802ceea:	230a      	movne	r3, #10
 802ceec:	2100      	movs	r1, #0
 802ceee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802cef2:	6865      	ldr	r5, [r4, #4]
 802cef4:	60a5      	str	r5, [r4, #8]
 802cef6:	2d00      	cmp	r5, #0
 802cef8:	bfa2      	ittt	ge
 802cefa:	6821      	ldrge	r1, [r4, #0]
 802cefc:	f021 0104 	bicge.w	r1, r1, #4
 802cf00:	6021      	strge	r1, [r4, #0]
 802cf02:	b90e      	cbnz	r6, 802cf08 <_printf_i+0x114>
 802cf04:	2d00      	cmp	r5, #0
 802cf06:	d04b      	beq.n	802cfa0 <_printf_i+0x1ac>
 802cf08:	4615      	mov	r5, r2
 802cf0a:	fbb6 f1f3 	udiv	r1, r6, r3
 802cf0e:	fb03 6711 	mls	r7, r3, r1, r6
 802cf12:	5dc7      	ldrb	r7, [r0, r7]
 802cf14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802cf18:	4637      	mov	r7, r6
 802cf1a:	42bb      	cmp	r3, r7
 802cf1c:	460e      	mov	r6, r1
 802cf1e:	d9f4      	bls.n	802cf0a <_printf_i+0x116>
 802cf20:	2b08      	cmp	r3, #8
 802cf22:	d10b      	bne.n	802cf3c <_printf_i+0x148>
 802cf24:	6823      	ldr	r3, [r4, #0]
 802cf26:	07de      	lsls	r6, r3, #31
 802cf28:	d508      	bpl.n	802cf3c <_printf_i+0x148>
 802cf2a:	6923      	ldr	r3, [r4, #16]
 802cf2c:	6861      	ldr	r1, [r4, #4]
 802cf2e:	4299      	cmp	r1, r3
 802cf30:	bfde      	ittt	le
 802cf32:	2330      	movle	r3, #48	; 0x30
 802cf34:	f805 3c01 	strble.w	r3, [r5, #-1]
 802cf38:	f105 35ff 	addle.w	r5, r5, #4294967295
 802cf3c:	1b52      	subs	r2, r2, r5
 802cf3e:	6122      	str	r2, [r4, #16]
 802cf40:	f8cd a000 	str.w	sl, [sp]
 802cf44:	464b      	mov	r3, r9
 802cf46:	aa03      	add	r2, sp, #12
 802cf48:	4621      	mov	r1, r4
 802cf4a:	4640      	mov	r0, r8
 802cf4c:	f7ff fee4 	bl	802cd18 <_printf_common>
 802cf50:	3001      	adds	r0, #1
 802cf52:	d14a      	bne.n	802cfea <_printf_i+0x1f6>
 802cf54:	f04f 30ff 	mov.w	r0, #4294967295
 802cf58:	b004      	add	sp, #16
 802cf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cf5e:	6823      	ldr	r3, [r4, #0]
 802cf60:	f043 0320 	orr.w	r3, r3, #32
 802cf64:	6023      	str	r3, [r4, #0]
 802cf66:	4833      	ldr	r0, [pc, #204]	; (802d034 <_printf_i+0x240>)
 802cf68:	2778      	movs	r7, #120	; 0x78
 802cf6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802cf6e:	6823      	ldr	r3, [r4, #0]
 802cf70:	6829      	ldr	r1, [r5, #0]
 802cf72:	061f      	lsls	r7, r3, #24
 802cf74:	f851 6b04 	ldr.w	r6, [r1], #4
 802cf78:	d402      	bmi.n	802cf80 <_printf_i+0x18c>
 802cf7a:	065f      	lsls	r7, r3, #25
 802cf7c:	bf48      	it	mi
 802cf7e:	b2b6      	uxthmi	r6, r6
 802cf80:	07df      	lsls	r7, r3, #31
 802cf82:	bf48      	it	mi
 802cf84:	f043 0320 	orrmi.w	r3, r3, #32
 802cf88:	6029      	str	r1, [r5, #0]
 802cf8a:	bf48      	it	mi
 802cf8c:	6023      	strmi	r3, [r4, #0]
 802cf8e:	b91e      	cbnz	r6, 802cf98 <_printf_i+0x1a4>
 802cf90:	6823      	ldr	r3, [r4, #0]
 802cf92:	f023 0320 	bic.w	r3, r3, #32
 802cf96:	6023      	str	r3, [r4, #0]
 802cf98:	2310      	movs	r3, #16
 802cf9a:	e7a7      	b.n	802ceec <_printf_i+0xf8>
 802cf9c:	4824      	ldr	r0, [pc, #144]	; (802d030 <_printf_i+0x23c>)
 802cf9e:	e7e4      	b.n	802cf6a <_printf_i+0x176>
 802cfa0:	4615      	mov	r5, r2
 802cfa2:	e7bd      	b.n	802cf20 <_printf_i+0x12c>
 802cfa4:	682b      	ldr	r3, [r5, #0]
 802cfa6:	6826      	ldr	r6, [r4, #0]
 802cfa8:	6961      	ldr	r1, [r4, #20]
 802cfaa:	1d18      	adds	r0, r3, #4
 802cfac:	6028      	str	r0, [r5, #0]
 802cfae:	0635      	lsls	r5, r6, #24
 802cfb0:	681b      	ldr	r3, [r3, #0]
 802cfb2:	d501      	bpl.n	802cfb8 <_printf_i+0x1c4>
 802cfb4:	6019      	str	r1, [r3, #0]
 802cfb6:	e002      	b.n	802cfbe <_printf_i+0x1ca>
 802cfb8:	0670      	lsls	r0, r6, #25
 802cfba:	d5fb      	bpl.n	802cfb4 <_printf_i+0x1c0>
 802cfbc:	8019      	strh	r1, [r3, #0]
 802cfbe:	2300      	movs	r3, #0
 802cfc0:	6123      	str	r3, [r4, #16]
 802cfc2:	4615      	mov	r5, r2
 802cfc4:	e7bc      	b.n	802cf40 <_printf_i+0x14c>
 802cfc6:	682b      	ldr	r3, [r5, #0]
 802cfc8:	1d1a      	adds	r2, r3, #4
 802cfca:	602a      	str	r2, [r5, #0]
 802cfcc:	681d      	ldr	r5, [r3, #0]
 802cfce:	6862      	ldr	r2, [r4, #4]
 802cfd0:	2100      	movs	r1, #0
 802cfd2:	4628      	mov	r0, r5
 802cfd4:	f7e3 f914 	bl	8010200 <memchr>
 802cfd8:	b108      	cbz	r0, 802cfde <_printf_i+0x1ea>
 802cfda:	1b40      	subs	r0, r0, r5
 802cfdc:	6060      	str	r0, [r4, #4]
 802cfde:	6863      	ldr	r3, [r4, #4]
 802cfe0:	6123      	str	r3, [r4, #16]
 802cfe2:	2300      	movs	r3, #0
 802cfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cfe8:	e7aa      	b.n	802cf40 <_printf_i+0x14c>
 802cfea:	6923      	ldr	r3, [r4, #16]
 802cfec:	462a      	mov	r2, r5
 802cfee:	4649      	mov	r1, r9
 802cff0:	4640      	mov	r0, r8
 802cff2:	47d0      	blx	sl
 802cff4:	3001      	adds	r0, #1
 802cff6:	d0ad      	beq.n	802cf54 <_printf_i+0x160>
 802cff8:	6823      	ldr	r3, [r4, #0]
 802cffa:	079b      	lsls	r3, r3, #30
 802cffc:	d413      	bmi.n	802d026 <_printf_i+0x232>
 802cffe:	68e0      	ldr	r0, [r4, #12]
 802d000:	9b03      	ldr	r3, [sp, #12]
 802d002:	4298      	cmp	r0, r3
 802d004:	bfb8      	it	lt
 802d006:	4618      	movlt	r0, r3
 802d008:	e7a6      	b.n	802cf58 <_printf_i+0x164>
 802d00a:	2301      	movs	r3, #1
 802d00c:	4632      	mov	r2, r6
 802d00e:	4649      	mov	r1, r9
 802d010:	4640      	mov	r0, r8
 802d012:	47d0      	blx	sl
 802d014:	3001      	adds	r0, #1
 802d016:	d09d      	beq.n	802cf54 <_printf_i+0x160>
 802d018:	3501      	adds	r5, #1
 802d01a:	68e3      	ldr	r3, [r4, #12]
 802d01c:	9903      	ldr	r1, [sp, #12]
 802d01e:	1a5b      	subs	r3, r3, r1
 802d020:	42ab      	cmp	r3, r5
 802d022:	dcf2      	bgt.n	802d00a <_printf_i+0x216>
 802d024:	e7eb      	b.n	802cffe <_printf_i+0x20a>
 802d026:	2500      	movs	r5, #0
 802d028:	f104 0619 	add.w	r6, r4, #25
 802d02c:	e7f5      	b.n	802d01a <_printf_i+0x226>
 802d02e:	bf00      	nop
 802d030:	08034bb0 	.word	0x08034bb0
 802d034:	08034bc1 	.word	0x08034bc1

0802d038 <_scanf_float>:
 802d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d03c:	b087      	sub	sp, #28
 802d03e:	4617      	mov	r7, r2
 802d040:	9303      	str	r3, [sp, #12]
 802d042:	688b      	ldr	r3, [r1, #8]
 802d044:	1e5a      	subs	r2, r3, #1
 802d046:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802d04a:	bf83      	ittte	hi
 802d04c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802d050:	195b      	addhi	r3, r3, r5
 802d052:	9302      	strhi	r3, [sp, #8]
 802d054:	2300      	movls	r3, #0
 802d056:	bf86      	itte	hi
 802d058:	f240 135d 	movwhi	r3, #349	; 0x15d
 802d05c:	608b      	strhi	r3, [r1, #8]
 802d05e:	9302      	strls	r3, [sp, #8]
 802d060:	680b      	ldr	r3, [r1, #0]
 802d062:	468b      	mov	fp, r1
 802d064:	2500      	movs	r5, #0
 802d066:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802d06a:	f84b 3b1c 	str.w	r3, [fp], #28
 802d06e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802d072:	4680      	mov	r8, r0
 802d074:	460c      	mov	r4, r1
 802d076:	465e      	mov	r6, fp
 802d078:	46aa      	mov	sl, r5
 802d07a:	46a9      	mov	r9, r5
 802d07c:	9501      	str	r5, [sp, #4]
 802d07e:	68a2      	ldr	r2, [r4, #8]
 802d080:	b152      	cbz	r2, 802d098 <_scanf_float+0x60>
 802d082:	683b      	ldr	r3, [r7, #0]
 802d084:	781b      	ldrb	r3, [r3, #0]
 802d086:	2b4e      	cmp	r3, #78	; 0x4e
 802d088:	d864      	bhi.n	802d154 <_scanf_float+0x11c>
 802d08a:	2b40      	cmp	r3, #64	; 0x40
 802d08c:	d83c      	bhi.n	802d108 <_scanf_float+0xd0>
 802d08e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802d092:	b2c8      	uxtb	r0, r1
 802d094:	280e      	cmp	r0, #14
 802d096:	d93a      	bls.n	802d10e <_scanf_float+0xd6>
 802d098:	f1b9 0f00 	cmp.w	r9, #0
 802d09c:	d003      	beq.n	802d0a6 <_scanf_float+0x6e>
 802d09e:	6823      	ldr	r3, [r4, #0]
 802d0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802d0a4:	6023      	str	r3, [r4, #0]
 802d0a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d0aa:	f1ba 0f01 	cmp.w	sl, #1
 802d0ae:	f200 8113 	bhi.w	802d2d8 <_scanf_float+0x2a0>
 802d0b2:	455e      	cmp	r6, fp
 802d0b4:	f200 8105 	bhi.w	802d2c2 <_scanf_float+0x28a>
 802d0b8:	2501      	movs	r5, #1
 802d0ba:	4628      	mov	r0, r5
 802d0bc:	b007      	add	sp, #28
 802d0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802d0c6:	2a0d      	cmp	r2, #13
 802d0c8:	d8e6      	bhi.n	802d098 <_scanf_float+0x60>
 802d0ca:	a101      	add	r1, pc, #4	; (adr r1, 802d0d0 <_scanf_float+0x98>)
 802d0cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802d0d0:	0802d20f 	.word	0x0802d20f
 802d0d4:	0802d099 	.word	0x0802d099
 802d0d8:	0802d099 	.word	0x0802d099
 802d0dc:	0802d099 	.word	0x0802d099
 802d0e0:	0802d26f 	.word	0x0802d26f
 802d0e4:	0802d247 	.word	0x0802d247
 802d0e8:	0802d099 	.word	0x0802d099
 802d0ec:	0802d099 	.word	0x0802d099
 802d0f0:	0802d21d 	.word	0x0802d21d
 802d0f4:	0802d099 	.word	0x0802d099
 802d0f8:	0802d099 	.word	0x0802d099
 802d0fc:	0802d099 	.word	0x0802d099
 802d100:	0802d099 	.word	0x0802d099
 802d104:	0802d1d5 	.word	0x0802d1d5
 802d108:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802d10c:	e7db      	b.n	802d0c6 <_scanf_float+0x8e>
 802d10e:	290e      	cmp	r1, #14
 802d110:	d8c2      	bhi.n	802d098 <_scanf_float+0x60>
 802d112:	a001      	add	r0, pc, #4	; (adr r0, 802d118 <_scanf_float+0xe0>)
 802d114:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802d118:	0802d1c7 	.word	0x0802d1c7
 802d11c:	0802d099 	.word	0x0802d099
 802d120:	0802d1c7 	.word	0x0802d1c7
 802d124:	0802d25b 	.word	0x0802d25b
 802d128:	0802d099 	.word	0x0802d099
 802d12c:	0802d175 	.word	0x0802d175
 802d130:	0802d1b1 	.word	0x0802d1b1
 802d134:	0802d1b1 	.word	0x0802d1b1
 802d138:	0802d1b1 	.word	0x0802d1b1
 802d13c:	0802d1b1 	.word	0x0802d1b1
 802d140:	0802d1b1 	.word	0x0802d1b1
 802d144:	0802d1b1 	.word	0x0802d1b1
 802d148:	0802d1b1 	.word	0x0802d1b1
 802d14c:	0802d1b1 	.word	0x0802d1b1
 802d150:	0802d1b1 	.word	0x0802d1b1
 802d154:	2b6e      	cmp	r3, #110	; 0x6e
 802d156:	d809      	bhi.n	802d16c <_scanf_float+0x134>
 802d158:	2b60      	cmp	r3, #96	; 0x60
 802d15a:	d8b2      	bhi.n	802d0c2 <_scanf_float+0x8a>
 802d15c:	2b54      	cmp	r3, #84	; 0x54
 802d15e:	d077      	beq.n	802d250 <_scanf_float+0x218>
 802d160:	2b59      	cmp	r3, #89	; 0x59
 802d162:	d199      	bne.n	802d098 <_scanf_float+0x60>
 802d164:	2d07      	cmp	r5, #7
 802d166:	d197      	bne.n	802d098 <_scanf_float+0x60>
 802d168:	2508      	movs	r5, #8
 802d16a:	e029      	b.n	802d1c0 <_scanf_float+0x188>
 802d16c:	2b74      	cmp	r3, #116	; 0x74
 802d16e:	d06f      	beq.n	802d250 <_scanf_float+0x218>
 802d170:	2b79      	cmp	r3, #121	; 0x79
 802d172:	e7f6      	b.n	802d162 <_scanf_float+0x12a>
 802d174:	6821      	ldr	r1, [r4, #0]
 802d176:	05c8      	lsls	r0, r1, #23
 802d178:	d51a      	bpl.n	802d1b0 <_scanf_float+0x178>
 802d17a:	9b02      	ldr	r3, [sp, #8]
 802d17c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802d180:	6021      	str	r1, [r4, #0]
 802d182:	f109 0901 	add.w	r9, r9, #1
 802d186:	b11b      	cbz	r3, 802d190 <_scanf_float+0x158>
 802d188:	3b01      	subs	r3, #1
 802d18a:	3201      	adds	r2, #1
 802d18c:	9302      	str	r3, [sp, #8]
 802d18e:	60a2      	str	r2, [r4, #8]
 802d190:	68a3      	ldr	r3, [r4, #8]
 802d192:	3b01      	subs	r3, #1
 802d194:	60a3      	str	r3, [r4, #8]
 802d196:	6923      	ldr	r3, [r4, #16]
 802d198:	3301      	adds	r3, #1
 802d19a:	6123      	str	r3, [r4, #16]
 802d19c:	687b      	ldr	r3, [r7, #4]
 802d19e:	3b01      	subs	r3, #1
 802d1a0:	2b00      	cmp	r3, #0
 802d1a2:	607b      	str	r3, [r7, #4]
 802d1a4:	f340 8084 	ble.w	802d2b0 <_scanf_float+0x278>
 802d1a8:	683b      	ldr	r3, [r7, #0]
 802d1aa:	3301      	adds	r3, #1
 802d1ac:	603b      	str	r3, [r7, #0]
 802d1ae:	e766      	b.n	802d07e <_scanf_float+0x46>
 802d1b0:	eb1a 0f05 	cmn.w	sl, r5
 802d1b4:	f47f af70 	bne.w	802d098 <_scanf_float+0x60>
 802d1b8:	6822      	ldr	r2, [r4, #0]
 802d1ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802d1be:	6022      	str	r2, [r4, #0]
 802d1c0:	f806 3b01 	strb.w	r3, [r6], #1
 802d1c4:	e7e4      	b.n	802d190 <_scanf_float+0x158>
 802d1c6:	6822      	ldr	r2, [r4, #0]
 802d1c8:	0610      	lsls	r0, r2, #24
 802d1ca:	f57f af65 	bpl.w	802d098 <_scanf_float+0x60>
 802d1ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d1d2:	e7f4      	b.n	802d1be <_scanf_float+0x186>
 802d1d4:	f1ba 0f00 	cmp.w	sl, #0
 802d1d8:	d10e      	bne.n	802d1f8 <_scanf_float+0x1c0>
 802d1da:	f1b9 0f00 	cmp.w	r9, #0
 802d1de:	d10e      	bne.n	802d1fe <_scanf_float+0x1c6>
 802d1e0:	6822      	ldr	r2, [r4, #0]
 802d1e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d1e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d1ea:	d108      	bne.n	802d1fe <_scanf_float+0x1c6>
 802d1ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d1f0:	6022      	str	r2, [r4, #0]
 802d1f2:	f04f 0a01 	mov.w	sl, #1
 802d1f6:	e7e3      	b.n	802d1c0 <_scanf_float+0x188>
 802d1f8:	f1ba 0f02 	cmp.w	sl, #2
 802d1fc:	d055      	beq.n	802d2aa <_scanf_float+0x272>
 802d1fe:	2d01      	cmp	r5, #1
 802d200:	d002      	beq.n	802d208 <_scanf_float+0x1d0>
 802d202:	2d04      	cmp	r5, #4
 802d204:	f47f af48 	bne.w	802d098 <_scanf_float+0x60>
 802d208:	3501      	adds	r5, #1
 802d20a:	b2ed      	uxtb	r5, r5
 802d20c:	e7d8      	b.n	802d1c0 <_scanf_float+0x188>
 802d20e:	f1ba 0f01 	cmp.w	sl, #1
 802d212:	f47f af41 	bne.w	802d098 <_scanf_float+0x60>
 802d216:	f04f 0a02 	mov.w	sl, #2
 802d21a:	e7d1      	b.n	802d1c0 <_scanf_float+0x188>
 802d21c:	b97d      	cbnz	r5, 802d23e <_scanf_float+0x206>
 802d21e:	f1b9 0f00 	cmp.w	r9, #0
 802d222:	f47f af3c 	bne.w	802d09e <_scanf_float+0x66>
 802d226:	6822      	ldr	r2, [r4, #0]
 802d228:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d22c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d230:	f47f af39 	bne.w	802d0a6 <_scanf_float+0x6e>
 802d234:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d238:	6022      	str	r2, [r4, #0]
 802d23a:	2501      	movs	r5, #1
 802d23c:	e7c0      	b.n	802d1c0 <_scanf_float+0x188>
 802d23e:	2d03      	cmp	r5, #3
 802d240:	d0e2      	beq.n	802d208 <_scanf_float+0x1d0>
 802d242:	2d05      	cmp	r5, #5
 802d244:	e7de      	b.n	802d204 <_scanf_float+0x1cc>
 802d246:	2d02      	cmp	r5, #2
 802d248:	f47f af26 	bne.w	802d098 <_scanf_float+0x60>
 802d24c:	2503      	movs	r5, #3
 802d24e:	e7b7      	b.n	802d1c0 <_scanf_float+0x188>
 802d250:	2d06      	cmp	r5, #6
 802d252:	f47f af21 	bne.w	802d098 <_scanf_float+0x60>
 802d256:	2507      	movs	r5, #7
 802d258:	e7b2      	b.n	802d1c0 <_scanf_float+0x188>
 802d25a:	6822      	ldr	r2, [r4, #0]
 802d25c:	0591      	lsls	r1, r2, #22
 802d25e:	f57f af1b 	bpl.w	802d098 <_scanf_float+0x60>
 802d262:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802d266:	6022      	str	r2, [r4, #0]
 802d268:	f8cd 9004 	str.w	r9, [sp, #4]
 802d26c:	e7a8      	b.n	802d1c0 <_scanf_float+0x188>
 802d26e:	6822      	ldr	r2, [r4, #0]
 802d270:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802d274:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802d278:	d006      	beq.n	802d288 <_scanf_float+0x250>
 802d27a:	0550      	lsls	r0, r2, #21
 802d27c:	f57f af0c 	bpl.w	802d098 <_scanf_float+0x60>
 802d280:	f1b9 0f00 	cmp.w	r9, #0
 802d284:	f43f af0f 	beq.w	802d0a6 <_scanf_float+0x6e>
 802d288:	0591      	lsls	r1, r2, #22
 802d28a:	bf58      	it	pl
 802d28c:	9901      	ldrpl	r1, [sp, #4]
 802d28e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d292:	bf58      	it	pl
 802d294:	eba9 0101 	subpl.w	r1, r9, r1
 802d298:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802d29c:	bf58      	it	pl
 802d29e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802d2a2:	6022      	str	r2, [r4, #0]
 802d2a4:	f04f 0900 	mov.w	r9, #0
 802d2a8:	e78a      	b.n	802d1c0 <_scanf_float+0x188>
 802d2aa:	f04f 0a03 	mov.w	sl, #3
 802d2ae:	e787      	b.n	802d1c0 <_scanf_float+0x188>
 802d2b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d2b4:	4639      	mov	r1, r7
 802d2b6:	4640      	mov	r0, r8
 802d2b8:	4798      	blx	r3
 802d2ba:	2800      	cmp	r0, #0
 802d2bc:	f43f aedf 	beq.w	802d07e <_scanf_float+0x46>
 802d2c0:	e6ea      	b.n	802d098 <_scanf_float+0x60>
 802d2c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d2c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d2ca:	463a      	mov	r2, r7
 802d2cc:	4640      	mov	r0, r8
 802d2ce:	4798      	blx	r3
 802d2d0:	6923      	ldr	r3, [r4, #16]
 802d2d2:	3b01      	subs	r3, #1
 802d2d4:	6123      	str	r3, [r4, #16]
 802d2d6:	e6ec      	b.n	802d0b2 <_scanf_float+0x7a>
 802d2d8:	1e6b      	subs	r3, r5, #1
 802d2da:	2b06      	cmp	r3, #6
 802d2dc:	d825      	bhi.n	802d32a <_scanf_float+0x2f2>
 802d2de:	2d02      	cmp	r5, #2
 802d2e0:	d836      	bhi.n	802d350 <_scanf_float+0x318>
 802d2e2:	455e      	cmp	r6, fp
 802d2e4:	f67f aee8 	bls.w	802d0b8 <_scanf_float+0x80>
 802d2e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d2ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d2f0:	463a      	mov	r2, r7
 802d2f2:	4640      	mov	r0, r8
 802d2f4:	4798      	blx	r3
 802d2f6:	6923      	ldr	r3, [r4, #16]
 802d2f8:	3b01      	subs	r3, #1
 802d2fa:	6123      	str	r3, [r4, #16]
 802d2fc:	e7f1      	b.n	802d2e2 <_scanf_float+0x2aa>
 802d2fe:	9802      	ldr	r0, [sp, #8]
 802d300:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d304:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802d308:	9002      	str	r0, [sp, #8]
 802d30a:	463a      	mov	r2, r7
 802d30c:	4640      	mov	r0, r8
 802d30e:	4798      	blx	r3
 802d310:	6923      	ldr	r3, [r4, #16]
 802d312:	3b01      	subs	r3, #1
 802d314:	6123      	str	r3, [r4, #16]
 802d316:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d31a:	fa5f fa8a 	uxtb.w	sl, sl
 802d31e:	f1ba 0f02 	cmp.w	sl, #2
 802d322:	d1ec      	bne.n	802d2fe <_scanf_float+0x2c6>
 802d324:	3d03      	subs	r5, #3
 802d326:	b2ed      	uxtb	r5, r5
 802d328:	1b76      	subs	r6, r6, r5
 802d32a:	6823      	ldr	r3, [r4, #0]
 802d32c:	05da      	lsls	r2, r3, #23
 802d32e:	d52f      	bpl.n	802d390 <_scanf_float+0x358>
 802d330:	055b      	lsls	r3, r3, #21
 802d332:	d510      	bpl.n	802d356 <_scanf_float+0x31e>
 802d334:	455e      	cmp	r6, fp
 802d336:	f67f aebf 	bls.w	802d0b8 <_scanf_float+0x80>
 802d33a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d33e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d342:	463a      	mov	r2, r7
 802d344:	4640      	mov	r0, r8
 802d346:	4798      	blx	r3
 802d348:	6923      	ldr	r3, [r4, #16]
 802d34a:	3b01      	subs	r3, #1
 802d34c:	6123      	str	r3, [r4, #16]
 802d34e:	e7f1      	b.n	802d334 <_scanf_float+0x2fc>
 802d350:	46aa      	mov	sl, r5
 802d352:	9602      	str	r6, [sp, #8]
 802d354:	e7df      	b.n	802d316 <_scanf_float+0x2de>
 802d356:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802d35a:	6923      	ldr	r3, [r4, #16]
 802d35c:	2965      	cmp	r1, #101	; 0x65
 802d35e:	f103 33ff 	add.w	r3, r3, #4294967295
 802d362:	f106 35ff 	add.w	r5, r6, #4294967295
 802d366:	6123      	str	r3, [r4, #16]
 802d368:	d00c      	beq.n	802d384 <_scanf_float+0x34c>
 802d36a:	2945      	cmp	r1, #69	; 0x45
 802d36c:	d00a      	beq.n	802d384 <_scanf_float+0x34c>
 802d36e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d372:	463a      	mov	r2, r7
 802d374:	4640      	mov	r0, r8
 802d376:	4798      	blx	r3
 802d378:	6923      	ldr	r3, [r4, #16]
 802d37a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802d37e:	3b01      	subs	r3, #1
 802d380:	1eb5      	subs	r5, r6, #2
 802d382:	6123      	str	r3, [r4, #16]
 802d384:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d388:	463a      	mov	r2, r7
 802d38a:	4640      	mov	r0, r8
 802d38c:	4798      	blx	r3
 802d38e:	462e      	mov	r6, r5
 802d390:	6825      	ldr	r5, [r4, #0]
 802d392:	f015 0510 	ands.w	r5, r5, #16
 802d396:	d158      	bne.n	802d44a <_scanf_float+0x412>
 802d398:	7035      	strb	r5, [r6, #0]
 802d39a:	6823      	ldr	r3, [r4, #0]
 802d39c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d3a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d3a4:	d11c      	bne.n	802d3e0 <_scanf_float+0x3a8>
 802d3a6:	9b01      	ldr	r3, [sp, #4]
 802d3a8:	454b      	cmp	r3, r9
 802d3aa:	eba3 0209 	sub.w	r2, r3, r9
 802d3ae:	d124      	bne.n	802d3fa <_scanf_float+0x3c2>
 802d3b0:	2200      	movs	r2, #0
 802d3b2:	4659      	mov	r1, fp
 802d3b4:	4640      	mov	r0, r8
 802d3b6:	f002 fe2b 	bl	8030010 <_strtod_r>
 802d3ba:	9b03      	ldr	r3, [sp, #12]
 802d3bc:	6821      	ldr	r1, [r4, #0]
 802d3be:	681b      	ldr	r3, [r3, #0]
 802d3c0:	f011 0f02 	tst.w	r1, #2
 802d3c4:	ec57 6b10 	vmov	r6, r7, d0
 802d3c8:	f103 0204 	add.w	r2, r3, #4
 802d3cc:	d020      	beq.n	802d410 <_scanf_float+0x3d8>
 802d3ce:	9903      	ldr	r1, [sp, #12]
 802d3d0:	600a      	str	r2, [r1, #0]
 802d3d2:	681b      	ldr	r3, [r3, #0]
 802d3d4:	e9c3 6700 	strd	r6, r7, [r3]
 802d3d8:	68e3      	ldr	r3, [r4, #12]
 802d3da:	3301      	adds	r3, #1
 802d3dc:	60e3      	str	r3, [r4, #12]
 802d3de:	e66c      	b.n	802d0ba <_scanf_float+0x82>
 802d3e0:	9b04      	ldr	r3, [sp, #16]
 802d3e2:	2b00      	cmp	r3, #0
 802d3e4:	d0e4      	beq.n	802d3b0 <_scanf_float+0x378>
 802d3e6:	9905      	ldr	r1, [sp, #20]
 802d3e8:	230a      	movs	r3, #10
 802d3ea:	462a      	mov	r2, r5
 802d3ec:	3101      	adds	r1, #1
 802d3ee:	4640      	mov	r0, r8
 802d3f0:	f002 fe96 	bl	8030120 <_strtol_r>
 802d3f4:	9b04      	ldr	r3, [sp, #16]
 802d3f6:	9e05      	ldr	r6, [sp, #20]
 802d3f8:	1ac2      	subs	r2, r0, r3
 802d3fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802d3fe:	429e      	cmp	r6, r3
 802d400:	bf28      	it	cs
 802d402:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802d406:	4912      	ldr	r1, [pc, #72]	; (802d450 <_scanf_float+0x418>)
 802d408:	4630      	mov	r0, r6
 802d40a:	f000 f93f 	bl	802d68c <siprintf>
 802d40e:	e7cf      	b.n	802d3b0 <_scanf_float+0x378>
 802d410:	f011 0f04 	tst.w	r1, #4
 802d414:	9903      	ldr	r1, [sp, #12]
 802d416:	600a      	str	r2, [r1, #0]
 802d418:	d1db      	bne.n	802d3d2 <_scanf_float+0x39a>
 802d41a:	f8d3 8000 	ldr.w	r8, [r3]
 802d41e:	ee10 2a10 	vmov	r2, s0
 802d422:	ee10 0a10 	vmov	r0, s0
 802d426:	463b      	mov	r3, r7
 802d428:	4639      	mov	r1, r7
 802d42a:	f7e3 fb97 	bl	8010b5c <__aeabi_dcmpun>
 802d42e:	b128      	cbz	r0, 802d43c <_scanf_float+0x404>
 802d430:	4808      	ldr	r0, [pc, #32]	; (802d454 <_scanf_float+0x41c>)
 802d432:	f000 fc5f 	bl	802dcf4 <nanf>
 802d436:	ed88 0a00 	vstr	s0, [r8]
 802d43a:	e7cd      	b.n	802d3d8 <_scanf_float+0x3a0>
 802d43c:	4630      	mov	r0, r6
 802d43e:	4639      	mov	r1, r7
 802d440:	f7e3 fbea 	bl	8010c18 <__aeabi_d2f>
 802d444:	f8c8 0000 	str.w	r0, [r8]
 802d448:	e7c6      	b.n	802d3d8 <_scanf_float+0x3a0>
 802d44a:	2500      	movs	r5, #0
 802d44c:	e635      	b.n	802d0ba <_scanf_float+0x82>
 802d44e:	bf00      	nop
 802d450:	08034bd2 	.word	0x08034bd2
 802d454:	08034b9f 	.word	0x08034b9f

0802d458 <std>:
 802d458:	2300      	movs	r3, #0
 802d45a:	b510      	push	{r4, lr}
 802d45c:	4604      	mov	r4, r0
 802d45e:	e9c0 3300 	strd	r3, r3, [r0]
 802d462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d466:	6083      	str	r3, [r0, #8]
 802d468:	8181      	strh	r1, [r0, #12]
 802d46a:	6643      	str	r3, [r0, #100]	; 0x64
 802d46c:	81c2      	strh	r2, [r0, #14]
 802d46e:	6183      	str	r3, [r0, #24]
 802d470:	4619      	mov	r1, r3
 802d472:	2208      	movs	r2, #8
 802d474:	305c      	adds	r0, #92	; 0x5c
 802d476:	f000 fa59 	bl	802d92c <memset>
 802d47a:	4b0d      	ldr	r3, [pc, #52]	; (802d4b0 <std+0x58>)
 802d47c:	6263      	str	r3, [r4, #36]	; 0x24
 802d47e:	4b0d      	ldr	r3, [pc, #52]	; (802d4b4 <std+0x5c>)
 802d480:	62a3      	str	r3, [r4, #40]	; 0x28
 802d482:	4b0d      	ldr	r3, [pc, #52]	; (802d4b8 <std+0x60>)
 802d484:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d486:	4b0d      	ldr	r3, [pc, #52]	; (802d4bc <std+0x64>)
 802d488:	6323      	str	r3, [r4, #48]	; 0x30
 802d48a:	4b0d      	ldr	r3, [pc, #52]	; (802d4c0 <std+0x68>)
 802d48c:	6224      	str	r4, [r4, #32]
 802d48e:	429c      	cmp	r4, r3
 802d490:	d006      	beq.n	802d4a0 <std+0x48>
 802d492:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802d496:	4294      	cmp	r4, r2
 802d498:	d002      	beq.n	802d4a0 <std+0x48>
 802d49a:	33d0      	adds	r3, #208	; 0xd0
 802d49c:	429c      	cmp	r4, r3
 802d49e:	d105      	bne.n	802d4ac <std+0x54>
 802d4a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d4a8:	f000 bc0a 	b.w	802dcc0 <__retarget_lock_init_recursive>
 802d4ac:	bd10      	pop	{r4, pc}
 802d4ae:	bf00      	nop
 802d4b0:	0802d725 	.word	0x0802d725
 802d4b4:	0802d74b 	.word	0x0802d74b
 802d4b8:	0802d783 	.word	0x0802d783
 802d4bc:	0802d7a7 	.word	0x0802d7a7
 802d4c0:	2000d9d0 	.word	0x2000d9d0

0802d4c4 <stdio_exit_handler>:
 802d4c4:	4a02      	ldr	r2, [pc, #8]	; (802d4d0 <stdio_exit_handler+0xc>)
 802d4c6:	4903      	ldr	r1, [pc, #12]	; (802d4d4 <stdio_exit_handler+0x10>)
 802d4c8:	4803      	ldr	r0, [pc, #12]	; (802d4d8 <stdio_exit_handler+0x14>)
 802d4ca:	f000 b87b 	b.w	802d5c4 <_fwalk_sglue>
 802d4ce:	bf00      	nop
 802d4d0:	20000130 	.word	0x20000130
 802d4d4:	08030da9 	.word	0x08030da9
 802d4d8:	2000013c 	.word	0x2000013c

0802d4dc <cleanup_stdio>:
 802d4dc:	6841      	ldr	r1, [r0, #4]
 802d4de:	4b0c      	ldr	r3, [pc, #48]	; (802d510 <cleanup_stdio+0x34>)
 802d4e0:	4299      	cmp	r1, r3
 802d4e2:	b510      	push	{r4, lr}
 802d4e4:	4604      	mov	r4, r0
 802d4e6:	d001      	beq.n	802d4ec <cleanup_stdio+0x10>
 802d4e8:	f003 fc5e 	bl	8030da8 <_fflush_r>
 802d4ec:	68a1      	ldr	r1, [r4, #8]
 802d4ee:	4b09      	ldr	r3, [pc, #36]	; (802d514 <cleanup_stdio+0x38>)
 802d4f0:	4299      	cmp	r1, r3
 802d4f2:	d002      	beq.n	802d4fa <cleanup_stdio+0x1e>
 802d4f4:	4620      	mov	r0, r4
 802d4f6:	f003 fc57 	bl	8030da8 <_fflush_r>
 802d4fa:	68e1      	ldr	r1, [r4, #12]
 802d4fc:	4b06      	ldr	r3, [pc, #24]	; (802d518 <cleanup_stdio+0x3c>)
 802d4fe:	4299      	cmp	r1, r3
 802d500:	d004      	beq.n	802d50c <cleanup_stdio+0x30>
 802d502:	4620      	mov	r0, r4
 802d504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d508:	f003 bc4e 	b.w	8030da8 <_fflush_r>
 802d50c:	bd10      	pop	{r4, pc}
 802d50e:	bf00      	nop
 802d510:	2000d9d0 	.word	0x2000d9d0
 802d514:	2000da38 	.word	0x2000da38
 802d518:	2000daa0 	.word	0x2000daa0

0802d51c <global_stdio_init.part.0>:
 802d51c:	b510      	push	{r4, lr}
 802d51e:	4b0b      	ldr	r3, [pc, #44]	; (802d54c <global_stdio_init.part.0+0x30>)
 802d520:	4c0b      	ldr	r4, [pc, #44]	; (802d550 <global_stdio_init.part.0+0x34>)
 802d522:	4a0c      	ldr	r2, [pc, #48]	; (802d554 <global_stdio_init.part.0+0x38>)
 802d524:	601a      	str	r2, [r3, #0]
 802d526:	4620      	mov	r0, r4
 802d528:	2200      	movs	r2, #0
 802d52a:	2104      	movs	r1, #4
 802d52c:	f7ff ff94 	bl	802d458 <std>
 802d530:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802d534:	2201      	movs	r2, #1
 802d536:	2109      	movs	r1, #9
 802d538:	f7ff ff8e 	bl	802d458 <std>
 802d53c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802d540:	2202      	movs	r2, #2
 802d542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d546:	2112      	movs	r1, #18
 802d548:	f7ff bf86 	b.w	802d458 <std>
 802d54c:	2000db08 	.word	0x2000db08
 802d550:	2000d9d0 	.word	0x2000d9d0
 802d554:	0802d4c5 	.word	0x0802d4c5

0802d558 <__sfp_lock_acquire>:
 802d558:	4801      	ldr	r0, [pc, #4]	; (802d560 <__sfp_lock_acquire+0x8>)
 802d55a:	f000 bbb2 	b.w	802dcc2 <__retarget_lock_acquire_recursive>
 802d55e:	bf00      	nop
 802d560:	2000db11 	.word	0x2000db11

0802d564 <__sfp_lock_release>:
 802d564:	4801      	ldr	r0, [pc, #4]	; (802d56c <__sfp_lock_release+0x8>)
 802d566:	f000 bbad 	b.w	802dcc4 <__retarget_lock_release_recursive>
 802d56a:	bf00      	nop
 802d56c:	2000db11 	.word	0x2000db11

0802d570 <__sinit>:
 802d570:	b510      	push	{r4, lr}
 802d572:	4604      	mov	r4, r0
 802d574:	f7ff fff0 	bl	802d558 <__sfp_lock_acquire>
 802d578:	6a23      	ldr	r3, [r4, #32]
 802d57a:	b11b      	cbz	r3, 802d584 <__sinit+0x14>
 802d57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d580:	f7ff bff0 	b.w	802d564 <__sfp_lock_release>
 802d584:	4b04      	ldr	r3, [pc, #16]	; (802d598 <__sinit+0x28>)
 802d586:	6223      	str	r3, [r4, #32]
 802d588:	4b04      	ldr	r3, [pc, #16]	; (802d59c <__sinit+0x2c>)
 802d58a:	681b      	ldr	r3, [r3, #0]
 802d58c:	2b00      	cmp	r3, #0
 802d58e:	d1f5      	bne.n	802d57c <__sinit+0xc>
 802d590:	f7ff ffc4 	bl	802d51c <global_stdio_init.part.0>
 802d594:	e7f2      	b.n	802d57c <__sinit+0xc>
 802d596:	bf00      	nop
 802d598:	0802d4dd 	.word	0x0802d4dd
 802d59c:	2000db08 	.word	0x2000db08

0802d5a0 <fiprintf>:
 802d5a0:	b40e      	push	{r1, r2, r3}
 802d5a2:	b503      	push	{r0, r1, lr}
 802d5a4:	4601      	mov	r1, r0
 802d5a6:	ab03      	add	r3, sp, #12
 802d5a8:	4805      	ldr	r0, [pc, #20]	; (802d5c0 <fiprintf+0x20>)
 802d5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 802d5ae:	6800      	ldr	r0, [r0, #0]
 802d5b0:	9301      	str	r3, [sp, #4]
 802d5b2:	f003 f90b 	bl	80307cc <_vfiprintf_r>
 802d5b6:	b002      	add	sp, #8
 802d5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 802d5bc:	b003      	add	sp, #12
 802d5be:	4770      	bx	lr
 802d5c0:	20000188 	.word	0x20000188

0802d5c4 <_fwalk_sglue>:
 802d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d5c8:	4607      	mov	r7, r0
 802d5ca:	4688      	mov	r8, r1
 802d5cc:	4614      	mov	r4, r2
 802d5ce:	2600      	movs	r6, #0
 802d5d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d5d4:	f1b9 0901 	subs.w	r9, r9, #1
 802d5d8:	d505      	bpl.n	802d5e6 <_fwalk_sglue+0x22>
 802d5da:	6824      	ldr	r4, [r4, #0]
 802d5dc:	2c00      	cmp	r4, #0
 802d5de:	d1f7      	bne.n	802d5d0 <_fwalk_sglue+0xc>
 802d5e0:	4630      	mov	r0, r6
 802d5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d5e6:	89ab      	ldrh	r3, [r5, #12]
 802d5e8:	2b01      	cmp	r3, #1
 802d5ea:	d907      	bls.n	802d5fc <_fwalk_sglue+0x38>
 802d5ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d5f0:	3301      	adds	r3, #1
 802d5f2:	d003      	beq.n	802d5fc <_fwalk_sglue+0x38>
 802d5f4:	4629      	mov	r1, r5
 802d5f6:	4638      	mov	r0, r7
 802d5f8:	47c0      	blx	r8
 802d5fa:	4306      	orrs	r6, r0
 802d5fc:	3568      	adds	r5, #104	; 0x68
 802d5fe:	e7e9      	b.n	802d5d4 <_fwalk_sglue+0x10>

0802d600 <iprintf>:
 802d600:	b40f      	push	{r0, r1, r2, r3}
 802d602:	b507      	push	{r0, r1, r2, lr}
 802d604:	4906      	ldr	r1, [pc, #24]	; (802d620 <iprintf+0x20>)
 802d606:	ab04      	add	r3, sp, #16
 802d608:	6808      	ldr	r0, [r1, #0]
 802d60a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d60e:	6881      	ldr	r1, [r0, #8]
 802d610:	9301      	str	r3, [sp, #4]
 802d612:	f003 f8db 	bl	80307cc <_vfiprintf_r>
 802d616:	b003      	add	sp, #12
 802d618:	f85d eb04 	ldr.w	lr, [sp], #4
 802d61c:	b004      	add	sp, #16
 802d61e:	4770      	bx	lr
 802d620:	20000188 	.word	0x20000188

0802d624 <sniprintf>:
 802d624:	b40c      	push	{r2, r3}
 802d626:	b530      	push	{r4, r5, lr}
 802d628:	4b17      	ldr	r3, [pc, #92]	; (802d688 <sniprintf+0x64>)
 802d62a:	1e0c      	subs	r4, r1, #0
 802d62c:	681d      	ldr	r5, [r3, #0]
 802d62e:	b09d      	sub	sp, #116	; 0x74
 802d630:	da08      	bge.n	802d644 <sniprintf+0x20>
 802d632:	238b      	movs	r3, #139	; 0x8b
 802d634:	602b      	str	r3, [r5, #0]
 802d636:	f04f 30ff 	mov.w	r0, #4294967295
 802d63a:	b01d      	add	sp, #116	; 0x74
 802d63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d640:	b002      	add	sp, #8
 802d642:	4770      	bx	lr
 802d644:	f44f 7302 	mov.w	r3, #520	; 0x208
 802d648:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d64c:	bf14      	ite	ne
 802d64e:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d652:	4623      	moveq	r3, r4
 802d654:	9304      	str	r3, [sp, #16]
 802d656:	9307      	str	r3, [sp, #28]
 802d658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d65c:	9002      	str	r0, [sp, #8]
 802d65e:	9006      	str	r0, [sp, #24]
 802d660:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802d666:	ab21      	add	r3, sp, #132	; 0x84
 802d668:	a902      	add	r1, sp, #8
 802d66a:	4628      	mov	r0, r5
 802d66c:	9301      	str	r3, [sp, #4]
 802d66e:	f002 fdb3 	bl	80301d8 <_svfiprintf_r>
 802d672:	1c43      	adds	r3, r0, #1
 802d674:	bfbc      	itt	lt
 802d676:	238b      	movlt	r3, #139	; 0x8b
 802d678:	602b      	strlt	r3, [r5, #0]
 802d67a:	2c00      	cmp	r4, #0
 802d67c:	d0dd      	beq.n	802d63a <sniprintf+0x16>
 802d67e:	9b02      	ldr	r3, [sp, #8]
 802d680:	2200      	movs	r2, #0
 802d682:	701a      	strb	r2, [r3, #0]
 802d684:	e7d9      	b.n	802d63a <sniprintf+0x16>
 802d686:	bf00      	nop
 802d688:	20000188 	.word	0x20000188

0802d68c <siprintf>:
 802d68c:	b40e      	push	{r1, r2, r3}
 802d68e:	b500      	push	{lr}
 802d690:	b09c      	sub	sp, #112	; 0x70
 802d692:	ab1d      	add	r3, sp, #116	; 0x74
 802d694:	9002      	str	r0, [sp, #8]
 802d696:	9006      	str	r0, [sp, #24]
 802d698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d69c:	4809      	ldr	r0, [pc, #36]	; (802d6c4 <siprintf+0x38>)
 802d69e:	9107      	str	r1, [sp, #28]
 802d6a0:	9104      	str	r1, [sp, #16]
 802d6a2:	4909      	ldr	r1, [pc, #36]	; (802d6c8 <siprintf+0x3c>)
 802d6a4:	f853 2b04 	ldr.w	r2, [r3], #4
 802d6a8:	9105      	str	r1, [sp, #20]
 802d6aa:	6800      	ldr	r0, [r0, #0]
 802d6ac:	9301      	str	r3, [sp, #4]
 802d6ae:	a902      	add	r1, sp, #8
 802d6b0:	f002 fd92 	bl	80301d8 <_svfiprintf_r>
 802d6b4:	9b02      	ldr	r3, [sp, #8]
 802d6b6:	2200      	movs	r2, #0
 802d6b8:	701a      	strb	r2, [r3, #0]
 802d6ba:	b01c      	add	sp, #112	; 0x70
 802d6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 802d6c0:	b003      	add	sp, #12
 802d6c2:	4770      	bx	lr
 802d6c4:	20000188 	.word	0x20000188
 802d6c8:	ffff0208 	.word	0xffff0208

0802d6cc <siscanf>:
 802d6cc:	b40e      	push	{r1, r2, r3}
 802d6ce:	b510      	push	{r4, lr}
 802d6d0:	b09f      	sub	sp, #124	; 0x7c
 802d6d2:	ac21      	add	r4, sp, #132	; 0x84
 802d6d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 802d6d8:	f854 2b04 	ldr.w	r2, [r4], #4
 802d6dc:	9201      	str	r2, [sp, #4]
 802d6de:	f8ad 101c 	strh.w	r1, [sp, #28]
 802d6e2:	9004      	str	r0, [sp, #16]
 802d6e4:	9008      	str	r0, [sp, #32]
 802d6e6:	f7e2 fddb 	bl	80102a0 <strlen>
 802d6ea:	4b0c      	ldr	r3, [pc, #48]	; (802d71c <siscanf+0x50>)
 802d6ec:	9005      	str	r0, [sp, #20]
 802d6ee:	9009      	str	r0, [sp, #36]	; 0x24
 802d6f0:	930d      	str	r3, [sp, #52]	; 0x34
 802d6f2:	480b      	ldr	r0, [pc, #44]	; (802d720 <siscanf+0x54>)
 802d6f4:	9a01      	ldr	r2, [sp, #4]
 802d6f6:	6800      	ldr	r0, [r0, #0]
 802d6f8:	9403      	str	r4, [sp, #12]
 802d6fa:	2300      	movs	r3, #0
 802d6fc:	9311      	str	r3, [sp, #68]	; 0x44
 802d6fe:	9316      	str	r3, [sp, #88]	; 0x58
 802d700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d704:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d708:	a904      	add	r1, sp, #16
 802d70a:	4623      	mov	r3, r4
 802d70c:	f002 febc 	bl	8030488 <__ssvfiscanf_r>
 802d710:	b01f      	add	sp, #124	; 0x7c
 802d712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d716:	b003      	add	sp, #12
 802d718:	4770      	bx	lr
 802d71a:	bf00      	nop
 802d71c:	0802d747 	.word	0x0802d747
 802d720:	20000188 	.word	0x20000188

0802d724 <__sread>:
 802d724:	b510      	push	{r4, lr}
 802d726:	460c      	mov	r4, r1
 802d728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d72c:	f000 fa6a 	bl	802dc04 <_read_r>
 802d730:	2800      	cmp	r0, #0
 802d732:	bfab      	itete	ge
 802d734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d736:	89a3      	ldrhlt	r3, [r4, #12]
 802d738:	181b      	addge	r3, r3, r0
 802d73a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d73e:	bfac      	ite	ge
 802d740:	6563      	strge	r3, [r4, #84]	; 0x54
 802d742:	81a3      	strhlt	r3, [r4, #12]
 802d744:	bd10      	pop	{r4, pc}

0802d746 <__seofread>:
 802d746:	2000      	movs	r0, #0
 802d748:	4770      	bx	lr

0802d74a <__swrite>:
 802d74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d74e:	461f      	mov	r7, r3
 802d750:	898b      	ldrh	r3, [r1, #12]
 802d752:	05db      	lsls	r3, r3, #23
 802d754:	4605      	mov	r5, r0
 802d756:	460c      	mov	r4, r1
 802d758:	4616      	mov	r6, r2
 802d75a:	d505      	bpl.n	802d768 <__swrite+0x1e>
 802d75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d760:	2302      	movs	r3, #2
 802d762:	2200      	movs	r2, #0
 802d764:	f000 fa3c 	bl	802dbe0 <_lseek_r>
 802d768:	89a3      	ldrh	r3, [r4, #12]
 802d76a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d76e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d772:	81a3      	strh	r3, [r4, #12]
 802d774:	4632      	mov	r2, r6
 802d776:	463b      	mov	r3, r7
 802d778:	4628      	mov	r0, r5
 802d77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d77e:	f000 ba63 	b.w	802dc48 <_write_r>

0802d782 <__sseek>:
 802d782:	b510      	push	{r4, lr}
 802d784:	460c      	mov	r4, r1
 802d786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d78a:	f000 fa29 	bl	802dbe0 <_lseek_r>
 802d78e:	1c43      	adds	r3, r0, #1
 802d790:	89a3      	ldrh	r3, [r4, #12]
 802d792:	bf15      	itete	ne
 802d794:	6560      	strne	r0, [r4, #84]	; 0x54
 802d796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d79a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d79e:	81a3      	strheq	r3, [r4, #12]
 802d7a0:	bf18      	it	ne
 802d7a2:	81a3      	strhne	r3, [r4, #12]
 802d7a4:	bd10      	pop	{r4, pc}

0802d7a6 <__sclose>:
 802d7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d7aa:	f000 b9b3 	b.w	802db14 <_close_r>

0802d7ae <__swbuf_r>:
 802d7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d7b0:	460e      	mov	r6, r1
 802d7b2:	4614      	mov	r4, r2
 802d7b4:	4605      	mov	r5, r0
 802d7b6:	b118      	cbz	r0, 802d7c0 <__swbuf_r+0x12>
 802d7b8:	6a03      	ldr	r3, [r0, #32]
 802d7ba:	b90b      	cbnz	r3, 802d7c0 <__swbuf_r+0x12>
 802d7bc:	f7ff fed8 	bl	802d570 <__sinit>
 802d7c0:	69a3      	ldr	r3, [r4, #24]
 802d7c2:	60a3      	str	r3, [r4, #8]
 802d7c4:	89a3      	ldrh	r3, [r4, #12]
 802d7c6:	071a      	lsls	r2, r3, #28
 802d7c8:	d525      	bpl.n	802d816 <__swbuf_r+0x68>
 802d7ca:	6923      	ldr	r3, [r4, #16]
 802d7cc:	b31b      	cbz	r3, 802d816 <__swbuf_r+0x68>
 802d7ce:	6823      	ldr	r3, [r4, #0]
 802d7d0:	6922      	ldr	r2, [r4, #16]
 802d7d2:	1a98      	subs	r0, r3, r2
 802d7d4:	6963      	ldr	r3, [r4, #20]
 802d7d6:	b2f6      	uxtb	r6, r6
 802d7d8:	4283      	cmp	r3, r0
 802d7da:	4637      	mov	r7, r6
 802d7dc:	dc04      	bgt.n	802d7e8 <__swbuf_r+0x3a>
 802d7de:	4621      	mov	r1, r4
 802d7e0:	4628      	mov	r0, r5
 802d7e2:	f003 fae1 	bl	8030da8 <_fflush_r>
 802d7e6:	b9e0      	cbnz	r0, 802d822 <__swbuf_r+0x74>
 802d7e8:	68a3      	ldr	r3, [r4, #8]
 802d7ea:	3b01      	subs	r3, #1
 802d7ec:	60a3      	str	r3, [r4, #8]
 802d7ee:	6823      	ldr	r3, [r4, #0]
 802d7f0:	1c5a      	adds	r2, r3, #1
 802d7f2:	6022      	str	r2, [r4, #0]
 802d7f4:	701e      	strb	r6, [r3, #0]
 802d7f6:	6962      	ldr	r2, [r4, #20]
 802d7f8:	1c43      	adds	r3, r0, #1
 802d7fa:	429a      	cmp	r2, r3
 802d7fc:	d004      	beq.n	802d808 <__swbuf_r+0x5a>
 802d7fe:	89a3      	ldrh	r3, [r4, #12]
 802d800:	07db      	lsls	r3, r3, #31
 802d802:	d506      	bpl.n	802d812 <__swbuf_r+0x64>
 802d804:	2e0a      	cmp	r6, #10
 802d806:	d104      	bne.n	802d812 <__swbuf_r+0x64>
 802d808:	4621      	mov	r1, r4
 802d80a:	4628      	mov	r0, r5
 802d80c:	f003 facc 	bl	8030da8 <_fflush_r>
 802d810:	b938      	cbnz	r0, 802d822 <__swbuf_r+0x74>
 802d812:	4638      	mov	r0, r7
 802d814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d816:	4621      	mov	r1, r4
 802d818:	4628      	mov	r0, r5
 802d81a:	f000 f805 	bl	802d828 <__swsetup_r>
 802d81e:	2800      	cmp	r0, #0
 802d820:	d0d5      	beq.n	802d7ce <__swbuf_r+0x20>
 802d822:	f04f 37ff 	mov.w	r7, #4294967295
 802d826:	e7f4      	b.n	802d812 <__swbuf_r+0x64>

0802d828 <__swsetup_r>:
 802d828:	b538      	push	{r3, r4, r5, lr}
 802d82a:	4b2a      	ldr	r3, [pc, #168]	; (802d8d4 <__swsetup_r+0xac>)
 802d82c:	4605      	mov	r5, r0
 802d82e:	6818      	ldr	r0, [r3, #0]
 802d830:	460c      	mov	r4, r1
 802d832:	b118      	cbz	r0, 802d83c <__swsetup_r+0x14>
 802d834:	6a03      	ldr	r3, [r0, #32]
 802d836:	b90b      	cbnz	r3, 802d83c <__swsetup_r+0x14>
 802d838:	f7ff fe9a 	bl	802d570 <__sinit>
 802d83c:	89a3      	ldrh	r3, [r4, #12]
 802d83e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d842:	0718      	lsls	r0, r3, #28
 802d844:	d422      	bmi.n	802d88c <__swsetup_r+0x64>
 802d846:	06d9      	lsls	r1, r3, #27
 802d848:	d407      	bmi.n	802d85a <__swsetup_r+0x32>
 802d84a:	2309      	movs	r3, #9
 802d84c:	602b      	str	r3, [r5, #0]
 802d84e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d852:	81a3      	strh	r3, [r4, #12]
 802d854:	f04f 30ff 	mov.w	r0, #4294967295
 802d858:	e034      	b.n	802d8c4 <__swsetup_r+0x9c>
 802d85a:	0758      	lsls	r0, r3, #29
 802d85c:	d512      	bpl.n	802d884 <__swsetup_r+0x5c>
 802d85e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d860:	b141      	cbz	r1, 802d874 <__swsetup_r+0x4c>
 802d862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d866:	4299      	cmp	r1, r3
 802d868:	d002      	beq.n	802d870 <__swsetup_r+0x48>
 802d86a:	4628      	mov	r0, r5
 802d86c:	f001 f8ca 	bl	802ea04 <_free_r>
 802d870:	2300      	movs	r3, #0
 802d872:	6363      	str	r3, [r4, #52]	; 0x34
 802d874:	89a3      	ldrh	r3, [r4, #12]
 802d876:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d87a:	81a3      	strh	r3, [r4, #12]
 802d87c:	2300      	movs	r3, #0
 802d87e:	6063      	str	r3, [r4, #4]
 802d880:	6923      	ldr	r3, [r4, #16]
 802d882:	6023      	str	r3, [r4, #0]
 802d884:	89a3      	ldrh	r3, [r4, #12]
 802d886:	f043 0308 	orr.w	r3, r3, #8
 802d88a:	81a3      	strh	r3, [r4, #12]
 802d88c:	6923      	ldr	r3, [r4, #16]
 802d88e:	b94b      	cbnz	r3, 802d8a4 <__swsetup_r+0x7c>
 802d890:	89a3      	ldrh	r3, [r4, #12]
 802d892:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d89a:	d003      	beq.n	802d8a4 <__swsetup_r+0x7c>
 802d89c:	4621      	mov	r1, r4
 802d89e:	4628      	mov	r0, r5
 802d8a0:	f003 fad0 	bl	8030e44 <__smakebuf_r>
 802d8a4:	89a0      	ldrh	r0, [r4, #12]
 802d8a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d8aa:	f010 0301 	ands.w	r3, r0, #1
 802d8ae:	d00a      	beq.n	802d8c6 <__swsetup_r+0x9e>
 802d8b0:	2300      	movs	r3, #0
 802d8b2:	60a3      	str	r3, [r4, #8]
 802d8b4:	6963      	ldr	r3, [r4, #20]
 802d8b6:	425b      	negs	r3, r3
 802d8b8:	61a3      	str	r3, [r4, #24]
 802d8ba:	6923      	ldr	r3, [r4, #16]
 802d8bc:	b943      	cbnz	r3, 802d8d0 <__swsetup_r+0xa8>
 802d8be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d8c2:	d1c4      	bne.n	802d84e <__swsetup_r+0x26>
 802d8c4:	bd38      	pop	{r3, r4, r5, pc}
 802d8c6:	0781      	lsls	r1, r0, #30
 802d8c8:	bf58      	it	pl
 802d8ca:	6963      	ldrpl	r3, [r4, #20]
 802d8cc:	60a3      	str	r3, [r4, #8]
 802d8ce:	e7f4      	b.n	802d8ba <__swsetup_r+0x92>
 802d8d0:	2000      	movs	r0, #0
 802d8d2:	e7f7      	b.n	802d8c4 <__swsetup_r+0x9c>
 802d8d4:	20000188 	.word	0x20000188

0802d8d8 <memcmp>:
 802d8d8:	b510      	push	{r4, lr}
 802d8da:	3901      	subs	r1, #1
 802d8dc:	4402      	add	r2, r0
 802d8de:	4290      	cmp	r0, r2
 802d8e0:	d101      	bne.n	802d8e6 <memcmp+0xe>
 802d8e2:	2000      	movs	r0, #0
 802d8e4:	e005      	b.n	802d8f2 <memcmp+0x1a>
 802d8e6:	7803      	ldrb	r3, [r0, #0]
 802d8e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d8ec:	42a3      	cmp	r3, r4
 802d8ee:	d001      	beq.n	802d8f4 <memcmp+0x1c>
 802d8f0:	1b18      	subs	r0, r3, r4
 802d8f2:	bd10      	pop	{r4, pc}
 802d8f4:	3001      	adds	r0, #1
 802d8f6:	e7f2      	b.n	802d8de <memcmp+0x6>

0802d8f8 <memmove>:
 802d8f8:	4288      	cmp	r0, r1
 802d8fa:	b510      	push	{r4, lr}
 802d8fc:	eb01 0402 	add.w	r4, r1, r2
 802d900:	d902      	bls.n	802d908 <memmove+0x10>
 802d902:	4284      	cmp	r4, r0
 802d904:	4623      	mov	r3, r4
 802d906:	d807      	bhi.n	802d918 <memmove+0x20>
 802d908:	1e43      	subs	r3, r0, #1
 802d90a:	42a1      	cmp	r1, r4
 802d90c:	d008      	beq.n	802d920 <memmove+0x28>
 802d90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d912:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d916:	e7f8      	b.n	802d90a <memmove+0x12>
 802d918:	4402      	add	r2, r0
 802d91a:	4601      	mov	r1, r0
 802d91c:	428a      	cmp	r2, r1
 802d91e:	d100      	bne.n	802d922 <memmove+0x2a>
 802d920:	bd10      	pop	{r4, pc}
 802d922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d92a:	e7f7      	b.n	802d91c <memmove+0x24>

0802d92c <memset>:
 802d92c:	4402      	add	r2, r0
 802d92e:	4603      	mov	r3, r0
 802d930:	4293      	cmp	r3, r2
 802d932:	d100      	bne.n	802d936 <memset+0xa>
 802d934:	4770      	bx	lr
 802d936:	f803 1b01 	strb.w	r1, [r3], #1
 802d93a:	e7f9      	b.n	802d930 <memset+0x4>

0802d93c <strcat>:
 802d93c:	b510      	push	{r4, lr}
 802d93e:	4602      	mov	r2, r0
 802d940:	7814      	ldrb	r4, [r2, #0]
 802d942:	4613      	mov	r3, r2
 802d944:	3201      	adds	r2, #1
 802d946:	2c00      	cmp	r4, #0
 802d948:	d1fa      	bne.n	802d940 <strcat+0x4>
 802d94a:	3b01      	subs	r3, #1
 802d94c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d950:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d954:	2a00      	cmp	r2, #0
 802d956:	d1f9      	bne.n	802d94c <strcat+0x10>
 802d958:	bd10      	pop	{r4, pc}

0802d95a <strchr>:
 802d95a:	b2c9      	uxtb	r1, r1
 802d95c:	4603      	mov	r3, r0
 802d95e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d962:	b11a      	cbz	r2, 802d96c <strchr+0x12>
 802d964:	428a      	cmp	r2, r1
 802d966:	d1f9      	bne.n	802d95c <strchr+0x2>
 802d968:	4618      	mov	r0, r3
 802d96a:	4770      	bx	lr
 802d96c:	2900      	cmp	r1, #0
 802d96e:	bf18      	it	ne
 802d970:	2300      	movne	r3, #0
 802d972:	e7f9      	b.n	802d968 <strchr+0xe>

0802d974 <strcspn>:
 802d974:	b570      	push	{r4, r5, r6, lr}
 802d976:	4603      	mov	r3, r0
 802d978:	461e      	mov	r6, r3
 802d97a:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d97e:	b144      	cbz	r4, 802d992 <strcspn+0x1e>
 802d980:	1e4a      	subs	r2, r1, #1
 802d982:	e001      	b.n	802d988 <strcspn+0x14>
 802d984:	42a5      	cmp	r5, r4
 802d986:	d004      	beq.n	802d992 <strcspn+0x1e>
 802d988:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d98c:	2d00      	cmp	r5, #0
 802d98e:	d1f9      	bne.n	802d984 <strcspn+0x10>
 802d990:	e7f2      	b.n	802d978 <strcspn+0x4>
 802d992:	1a30      	subs	r0, r6, r0
 802d994:	bd70      	pop	{r4, r5, r6, pc}

0802d996 <strncat>:
 802d996:	b530      	push	{r4, r5, lr}
 802d998:	4604      	mov	r4, r0
 802d99a:	7825      	ldrb	r5, [r4, #0]
 802d99c:	4623      	mov	r3, r4
 802d99e:	3401      	adds	r4, #1
 802d9a0:	2d00      	cmp	r5, #0
 802d9a2:	d1fa      	bne.n	802d99a <strncat+0x4>
 802d9a4:	3a01      	subs	r2, #1
 802d9a6:	d304      	bcc.n	802d9b2 <strncat+0x1c>
 802d9a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d9ac:	f803 4b01 	strb.w	r4, [r3], #1
 802d9b0:	b904      	cbnz	r4, 802d9b4 <strncat+0x1e>
 802d9b2:	bd30      	pop	{r4, r5, pc}
 802d9b4:	2a00      	cmp	r2, #0
 802d9b6:	d1f5      	bne.n	802d9a4 <strncat+0xe>
 802d9b8:	701a      	strb	r2, [r3, #0]
 802d9ba:	e7f3      	b.n	802d9a4 <strncat+0xe>

0802d9bc <strncmp>:
 802d9bc:	b510      	push	{r4, lr}
 802d9be:	b16a      	cbz	r2, 802d9dc <strncmp+0x20>
 802d9c0:	3901      	subs	r1, #1
 802d9c2:	1884      	adds	r4, r0, r2
 802d9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d9c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d9cc:	429a      	cmp	r2, r3
 802d9ce:	d103      	bne.n	802d9d8 <strncmp+0x1c>
 802d9d0:	42a0      	cmp	r0, r4
 802d9d2:	d001      	beq.n	802d9d8 <strncmp+0x1c>
 802d9d4:	2a00      	cmp	r2, #0
 802d9d6:	d1f5      	bne.n	802d9c4 <strncmp+0x8>
 802d9d8:	1ad0      	subs	r0, r2, r3
 802d9da:	bd10      	pop	{r4, pc}
 802d9dc:	4610      	mov	r0, r2
 802d9de:	e7fc      	b.n	802d9da <strncmp+0x1e>

0802d9e0 <strncpy>:
 802d9e0:	b510      	push	{r4, lr}
 802d9e2:	3901      	subs	r1, #1
 802d9e4:	4603      	mov	r3, r0
 802d9e6:	b132      	cbz	r2, 802d9f6 <strncpy+0x16>
 802d9e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d9ec:	f803 4b01 	strb.w	r4, [r3], #1
 802d9f0:	3a01      	subs	r2, #1
 802d9f2:	2c00      	cmp	r4, #0
 802d9f4:	d1f7      	bne.n	802d9e6 <strncpy+0x6>
 802d9f6:	441a      	add	r2, r3
 802d9f8:	2100      	movs	r1, #0
 802d9fa:	4293      	cmp	r3, r2
 802d9fc:	d100      	bne.n	802da00 <strncpy+0x20>
 802d9fe:	bd10      	pop	{r4, pc}
 802da00:	f803 1b01 	strb.w	r1, [r3], #1
 802da04:	e7f9      	b.n	802d9fa <strncpy+0x1a>

0802da06 <strspn>:
 802da06:	b570      	push	{r4, r5, r6, lr}
 802da08:	4603      	mov	r3, r0
 802da0a:	461e      	mov	r6, r3
 802da0c:	f813 4b01 	ldrb.w	r4, [r3], #1
 802da10:	b13c      	cbz	r4, 802da22 <strspn+0x1c>
 802da12:	1e4a      	subs	r2, r1, #1
 802da14:	e001      	b.n	802da1a <strspn+0x14>
 802da16:	42a5      	cmp	r5, r4
 802da18:	d0f7      	beq.n	802da0a <strspn+0x4>
 802da1a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802da1e:	2d00      	cmp	r5, #0
 802da20:	d1f9      	bne.n	802da16 <strspn+0x10>
 802da22:	1a30      	subs	r0, r6, r0
 802da24:	bd70      	pop	{r4, r5, r6, pc}
	...

0802da28 <strtok>:
 802da28:	4b16      	ldr	r3, [pc, #88]	; (802da84 <strtok+0x5c>)
 802da2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802da2c:	681e      	ldr	r6, [r3, #0]
 802da2e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 802da30:	4605      	mov	r5, r0
 802da32:	b9fc      	cbnz	r4, 802da74 <strtok+0x4c>
 802da34:	2050      	movs	r0, #80	; 0x50
 802da36:	9101      	str	r1, [sp, #4]
 802da38:	f7fe fddc 	bl	802c5f4 <malloc>
 802da3c:	9901      	ldr	r1, [sp, #4]
 802da3e:	6470      	str	r0, [r6, #68]	; 0x44
 802da40:	4602      	mov	r2, r0
 802da42:	b920      	cbnz	r0, 802da4e <strtok+0x26>
 802da44:	4b10      	ldr	r3, [pc, #64]	; (802da88 <strtok+0x60>)
 802da46:	4811      	ldr	r0, [pc, #68]	; (802da8c <strtok+0x64>)
 802da48:	215b      	movs	r1, #91	; 0x5b
 802da4a:	f7fe fd9f 	bl	802c58c <__assert_func>
 802da4e:	e9c0 4400 	strd	r4, r4, [r0]
 802da52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802da56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802da5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802da5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802da62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802da66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802da6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802da6e:	6184      	str	r4, [r0, #24]
 802da70:	7704      	strb	r4, [r0, #28]
 802da72:	6244      	str	r4, [r0, #36]	; 0x24
 802da74:	6c72      	ldr	r2, [r6, #68]	; 0x44
 802da76:	2301      	movs	r3, #1
 802da78:	4628      	mov	r0, r5
 802da7a:	b002      	add	sp, #8
 802da7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802da80:	f000 b806 	b.w	802da90 <__strtok_r>
 802da84:	20000188 	.word	0x20000188
 802da88:	08034bd7 	.word	0x08034bd7
 802da8c:	08034bee 	.word	0x08034bee

0802da90 <__strtok_r>:
 802da90:	b5f0      	push	{r4, r5, r6, r7, lr}
 802da92:	b908      	cbnz	r0, 802da98 <__strtok_r+0x8>
 802da94:	6810      	ldr	r0, [r2, #0]
 802da96:	b188      	cbz	r0, 802dabc <__strtok_r+0x2c>
 802da98:	4604      	mov	r4, r0
 802da9a:	4620      	mov	r0, r4
 802da9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 802daa0:	460f      	mov	r7, r1
 802daa2:	f817 6b01 	ldrb.w	r6, [r7], #1
 802daa6:	b91e      	cbnz	r6, 802dab0 <__strtok_r+0x20>
 802daa8:	b965      	cbnz	r5, 802dac4 <__strtok_r+0x34>
 802daaa:	6015      	str	r5, [r2, #0]
 802daac:	4628      	mov	r0, r5
 802daae:	e005      	b.n	802dabc <__strtok_r+0x2c>
 802dab0:	42b5      	cmp	r5, r6
 802dab2:	d1f6      	bne.n	802daa2 <__strtok_r+0x12>
 802dab4:	2b00      	cmp	r3, #0
 802dab6:	d1f0      	bne.n	802da9a <__strtok_r+0xa>
 802dab8:	6014      	str	r4, [r2, #0]
 802daba:	7003      	strb	r3, [r0, #0]
 802dabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dabe:	461c      	mov	r4, r3
 802dac0:	e00c      	b.n	802dadc <__strtok_r+0x4c>
 802dac2:	b915      	cbnz	r5, 802daca <__strtok_r+0x3a>
 802dac4:	f814 3b01 	ldrb.w	r3, [r4], #1
 802dac8:	460e      	mov	r6, r1
 802daca:	f816 5b01 	ldrb.w	r5, [r6], #1
 802dace:	42ab      	cmp	r3, r5
 802dad0:	d1f7      	bne.n	802dac2 <__strtok_r+0x32>
 802dad2:	2b00      	cmp	r3, #0
 802dad4:	d0f3      	beq.n	802dabe <__strtok_r+0x2e>
 802dad6:	2300      	movs	r3, #0
 802dad8:	f804 3c01 	strb.w	r3, [r4, #-1]
 802dadc:	6014      	str	r4, [r2, #0]
 802dade:	e7ed      	b.n	802dabc <__strtok_r+0x2c>

0802dae0 <strstr>:
 802dae0:	780a      	ldrb	r2, [r1, #0]
 802dae2:	b570      	push	{r4, r5, r6, lr}
 802dae4:	b96a      	cbnz	r2, 802db02 <strstr+0x22>
 802dae6:	bd70      	pop	{r4, r5, r6, pc}
 802dae8:	429a      	cmp	r2, r3
 802daea:	d109      	bne.n	802db00 <strstr+0x20>
 802daec:	460c      	mov	r4, r1
 802daee:	4605      	mov	r5, r0
 802daf0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802daf4:	2b00      	cmp	r3, #0
 802daf6:	d0f6      	beq.n	802dae6 <strstr+0x6>
 802daf8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802dafc:	429e      	cmp	r6, r3
 802dafe:	d0f7      	beq.n	802daf0 <strstr+0x10>
 802db00:	3001      	adds	r0, #1
 802db02:	7803      	ldrb	r3, [r0, #0]
 802db04:	2b00      	cmp	r3, #0
 802db06:	d1ef      	bne.n	802dae8 <strstr+0x8>
 802db08:	4618      	mov	r0, r3
 802db0a:	e7ec      	b.n	802dae6 <strstr+0x6>

0802db0c <_localeconv_r>:
 802db0c:	4800      	ldr	r0, [pc, #0]	; (802db10 <_localeconv_r+0x4>)
 802db0e:	4770      	bx	lr
 802db10:	2000027c 	.word	0x2000027c

0802db14 <_close_r>:
 802db14:	b538      	push	{r3, r4, r5, lr}
 802db16:	4d06      	ldr	r5, [pc, #24]	; (802db30 <_close_r+0x1c>)
 802db18:	2300      	movs	r3, #0
 802db1a:	4604      	mov	r4, r0
 802db1c:	4608      	mov	r0, r1
 802db1e:	602b      	str	r3, [r5, #0]
 802db20:	f7e5 f8bb 	bl	8012c9a <_close>
 802db24:	1c43      	adds	r3, r0, #1
 802db26:	d102      	bne.n	802db2e <_close_r+0x1a>
 802db28:	682b      	ldr	r3, [r5, #0]
 802db2a:	b103      	cbz	r3, 802db2e <_close_r+0x1a>
 802db2c:	6023      	str	r3, [r4, #0]
 802db2e:	bd38      	pop	{r3, r4, r5, pc}
 802db30:	2000db0c 	.word	0x2000db0c

0802db34 <_reclaim_reent>:
 802db34:	4b29      	ldr	r3, [pc, #164]	; (802dbdc <_reclaim_reent+0xa8>)
 802db36:	681b      	ldr	r3, [r3, #0]
 802db38:	4283      	cmp	r3, r0
 802db3a:	b570      	push	{r4, r5, r6, lr}
 802db3c:	4604      	mov	r4, r0
 802db3e:	d04b      	beq.n	802dbd8 <_reclaim_reent+0xa4>
 802db40:	69c3      	ldr	r3, [r0, #28]
 802db42:	b143      	cbz	r3, 802db56 <_reclaim_reent+0x22>
 802db44:	68db      	ldr	r3, [r3, #12]
 802db46:	2b00      	cmp	r3, #0
 802db48:	d144      	bne.n	802dbd4 <_reclaim_reent+0xa0>
 802db4a:	69e3      	ldr	r3, [r4, #28]
 802db4c:	6819      	ldr	r1, [r3, #0]
 802db4e:	b111      	cbz	r1, 802db56 <_reclaim_reent+0x22>
 802db50:	4620      	mov	r0, r4
 802db52:	f000 ff57 	bl	802ea04 <_free_r>
 802db56:	6961      	ldr	r1, [r4, #20]
 802db58:	b111      	cbz	r1, 802db60 <_reclaim_reent+0x2c>
 802db5a:	4620      	mov	r0, r4
 802db5c:	f000 ff52 	bl	802ea04 <_free_r>
 802db60:	69e1      	ldr	r1, [r4, #28]
 802db62:	b111      	cbz	r1, 802db6a <_reclaim_reent+0x36>
 802db64:	4620      	mov	r0, r4
 802db66:	f000 ff4d 	bl	802ea04 <_free_r>
 802db6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802db6c:	b111      	cbz	r1, 802db74 <_reclaim_reent+0x40>
 802db6e:	4620      	mov	r0, r4
 802db70:	f000 ff48 	bl	802ea04 <_free_r>
 802db74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802db76:	b111      	cbz	r1, 802db7e <_reclaim_reent+0x4a>
 802db78:	4620      	mov	r0, r4
 802db7a:	f000 ff43 	bl	802ea04 <_free_r>
 802db7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802db80:	b111      	cbz	r1, 802db88 <_reclaim_reent+0x54>
 802db82:	4620      	mov	r0, r4
 802db84:	f000 ff3e 	bl	802ea04 <_free_r>
 802db88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802db8a:	b111      	cbz	r1, 802db92 <_reclaim_reent+0x5e>
 802db8c:	4620      	mov	r0, r4
 802db8e:	f000 ff39 	bl	802ea04 <_free_r>
 802db92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802db94:	b111      	cbz	r1, 802db9c <_reclaim_reent+0x68>
 802db96:	4620      	mov	r0, r4
 802db98:	f000 ff34 	bl	802ea04 <_free_r>
 802db9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802db9e:	b111      	cbz	r1, 802dba6 <_reclaim_reent+0x72>
 802dba0:	4620      	mov	r0, r4
 802dba2:	f000 ff2f 	bl	802ea04 <_free_r>
 802dba6:	6a23      	ldr	r3, [r4, #32]
 802dba8:	b1b3      	cbz	r3, 802dbd8 <_reclaim_reent+0xa4>
 802dbaa:	4620      	mov	r0, r4
 802dbac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dbb0:	4718      	bx	r3
 802dbb2:	5949      	ldr	r1, [r1, r5]
 802dbb4:	b941      	cbnz	r1, 802dbc8 <_reclaim_reent+0x94>
 802dbb6:	3504      	adds	r5, #4
 802dbb8:	69e3      	ldr	r3, [r4, #28]
 802dbba:	2d80      	cmp	r5, #128	; 0x80
 802dbbc:	68d9      	ldr	r1, [r3, #12]
 802dbbe:	d1f8      	bne.n	802dbb2 <_reclaim_reent+0x7e>
 802dbc0:	4620      	mov	r0, r4
 802dbc2:	f000 ff1f 	bl	802ea04 <_free_r>
 802dbc6:	e7c0      	b.n	802db4a <_reclaim_reent+0x16>
 802dbc8:	680e      	ldr	r6, [r1, #0]
 802dbca:	4620      	mov	r0, r4
 802dbcc:	f000 ff1a 	bl	802ea04 <_free_r>
 802dbd0:	4631      	mov	r1, r6
 802dbd2:	e7ef      	b.n	802dbb4 <_reclaim_reent+0x80>
 802dbd4:	2500      	movs	r5, #0
 802dbd6:	e7ef      	b.n	802dbb8 <_reclaim_reent+0x84>
 802dbd8:	bd70      	pop	{r4, r5, r6, pc}
 802dbda:	bf00      	nop
 802dbdc:	20000188 	.word	0x20000188

0802dbe0 <_lseek_r>:
 802dbe0:	b538      	push	{r3, r4, r5, lr}
 802dbe2:	4d07      	ldr	r5, [pc, #28]	; (802dc00 <_lseek_r+0x20>)
 802dbe4:	4604      	mov	r4, r0
 802dbe6:	4608      	mov	r0, r1
 802dbe8:	4611      	mov	r1, r2
 802dbea:	2200      	movs	r2, #0
 802dbec:	602a      	str	r2, [r5, #0]
 802dbee:	461a      	mov	r2, r3
 802dbf0:	f7e5 f87a 	bl	8012ce8 <_lseek>
 802dbf4:	1c43      	adds	r3, r0, #1
 802dbf6:	d102      	bne.n	802dbfe <_lseek_r+0x1e>
 802dbf8:	682b      	ldr	r3, [r5, #0]
 802dbfa:	b103      	cbz	r3, 802dbfe <_lseek_r+0x1e>
 802dbfc:	6023      	str	r3, [r4, #0]
 802dbfe:	bd38      	pop	{r3, r4, r5, pc}
 802dc00:	2000db0c 	.word	0x2000db0c

0802dc04 <_read_r>:
 802dc04:	b538      	push	{r3, r4, r5, lr}
 802dc06:	4d07      	ldr	r5, [pc, #28]	; (802dc24 <_read_r+0x20>)
 802dc08:	4604      	mov	r4, r0
 802dc0a:	4608      	mov	r0, r1
 802dc0c:	4611      	mov	r1, r2
 802dc0e:	2200      	movs	r2, #0
 802dc10:	602a      	str	r2, [r5, #0]
 802dc12:	461a      	mov	r2, r3
 802dc14:	f7e5 f808 	bl	8012c28 <_read>
 802dc18:	1c43      	adds	r3, r0, #1
 802dc1a:	d102      	bne.n	802dc22 <_read_r+0x1e>
 802dc1c:	682b      	ldr	r3, [r5, #0]
 802dc1e:	b103      	cbz	r3, 802dc22 <_read_r+0x1e>
 802dc20:	6023      	str	r3, [r4, #0]
 802dc22:	bd38      	pop	{r3, r4, r5, pc}
 802dc24:	2000db0c 	.word	0x2000db0c

0802dc28 <_sbrk_r>:
 802dc28:	b538      	push	{r3, r4, r5, lr}
 802dc2a:	4d06      	ldr	r5, [pc, #24]	; (802dc44 <_sbrk_r+0x1c>)
 802dc2c:	2300      	movs	r3, #0
 802dc2e:	4604      	mov	r4, r0
 802dc30:	4608      	mov	r0, r1
 802dc32:	602b      	str	r3, [r5, #0]
 802dc34:	f7e5 f866 	bl	8012d04 <_sbrk>
 802dc38:	1c43      	adds	r3, r0, #1
 802dc3a:	d102      	bne.n	802dc42 <_sbrk_r+0x1a>
 802dc3c:	682b      	ldr	r3, [r5, #0]
 802dc3e:	b103      	cbz	r3, 802dc42 <_sbrk_r+0x1a>
 802dc40:	6023      	str	r3, [r4, #0]
 802dc42:	bd38      	pop	{r3, r4, r5, pc}
 802dc44:	2000db0c 	.word	0x2000db0c

0802dc48 <_write_r>:
 802dc48:	b538      	push	{r3, r4, r5, lr}
 802dc4a:	4d07      	ldr	r5, [pc, #28]	; (802dc68 <_write_r+0x20>)
 802dc4c:	4604      	mov	r4, r0
 802dc4e:	4608      	mov	r0, r1
 802dc50:	4611      	mov	r1, r2
 802dc52:	2200      	movs	r2, #0
 802dc54:	602a      	str	r2, [r5, #0]
 802dc56:	461a      	mov	r2, r3
 802dc58:	f7e5 f803 	bl	8012c62 <_write>
 802dc5c:	1c43      	adds	r3, r0, #1
 802dc5e:	d102      	bne.n	802dc66 <_write_r+0x1e>
 802dc60:	682b      	ldr	r3, [r5, #0]
 802dc62:	b103      	cbz	r3, 802dc66 <_write_r+0x1e>
 802dc64:	6023      	str	r3, [r4, #0]
 802dc66:	bd38      	pop	{r3, r4, r5, pc}
 802dc68:	2000db0c 	.word	0x2000db0c

0802dc6c <__errno>:
 802dc6c:	4b01      	ldr	r3, [pc, #4]	; (802dc74 <__errno+0x8>)
 802dc6e:	6818      	ldr	r0, [r3, #0]
 802dc70:	4770      	bx	lr
 802dc72:	bf00      	nop
 802dc74:	20000188 	.word	0x20000188

0802dc78 <__libc_init_array>:
 802dc78:	b570      	push	{r4, r5, r6, lr}
 802dc7a:	4d0d      	ldr	r5, [pc, #52]	; (802dcb0 <__libc_init_array+0x38>)
 802dc7c:	4c0d      	ldr	r4, [pc, #52]	; (802dcb4 <__libc_init_array+0x3c>)
 802dc7e:	1b64      	subs	r4, r4, r5
 802dc80:	10a4      	asrs	r4, r4, #2
 802dc82:	2600      	movs	r6, #0
 802dc84:	42a6      	cmp	r6, r4
 802dc86:	d109      	bne.n	802dc9c <__libc_init_array+0x24>
 802dc88:	4d0b      	ldr	r5, [pc, #44]	; (802dcb8 <__libc_init_array+0x40>)
 802dc8a:	4c0c      	ldr	r4, [pc, #48]	; (802dcbc <__libc_init_array+0x44>)
 802dc8c:	f003 fe1a 	bl	80318c4 <_init>
 802dc90:	1b64      	subs	r4, r4, r5
 802dc92:	10a4      	asrs	r4, r4, #2
 802dc94:	2600      	movs	r6, #0
 802dc96:	42a6      	cmp	r6, r4
 802dc98:	d105      	bne.n	802dca6 <__libc_init_array+0x2e>
 802dc9a:	bd70      	pop	{r4, r5, r6, pc}
 802dc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 802dca0:	4798      	blx	r3
 802dca2:	3601      	adds	r6, #1
 802dca4:	e7ee      	b.n	802dc84 <__libc_init_array+0xc>
 802dca6:	f855 3b04 	ldr.w	r3, [r5], #4
 802dcaa:	4798      	blx	r3
 802dcac:	3601      	adds	r6, #1
 802dcae:	e7f2      	b.n	802dc96 <__libc_init_array+0x1e>
 802dcb0:	08035008 	.word	0x08035008
 802dcb4:	08035008 	.word	0x08035008
 802dcb8:	08035008 	.word	0x08035008
 802dcbc:	0803500c 	.word	0x0803500c

0802dcc0 <__retarget_lock_init_recursive>:
 802dcc0:	4770      	bx	lr

0802dcc2 <__retarget_lock_acquire_recursive>:
 802dcc2:	4770      	bx	lr

0802dcc4 <__retarget_lock_release_recursive>:
 802dcc4:	4770      	bx	lr

0802dcc6 <strcpy>:
 802dcc6:	4603      	mov	r3, r0
 802dcc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 802dccc:	f803 2b01 	strb.w	r2, [r3], #1
 802dcd0:	2a00      	cmp	r2, #0
 802dcd2:	d1f9      	bne.n	802dcc8 <strcpy+0x2>
 802dcd4:	4770      	bx	lr

0802dcd6 <memcpy>:
 802dcd6:	440a      	add	r2, r1
 802dcd8:	4291      	cmp	r1, r2
 802dcda:	f100 33ff 	add.w	r3, r0, #4294967295
 802dcde:	d100      	bne.n	802dce2 <memcpy+0xc>
 802dce0:	4770      	bx	lr
 802dce2:	b510      	push	{r4, lr}
 802dce4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802dce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802dcec:	4291      	cmp	r1, r2
 802dcee:	d1f9      	bne.n	802dce4 <memcpy+0xe>
 802dcf0:	bd10      	pop	{r4, pc}
	...

0802dcf4 <nanf>:
 802dcf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802dcfc <nanf+0x8>
 802dcf8:	4770      	bx	lr
 802dcfa:	bf00      	nop
 802dcfc:	7fc00000 	.word	0x7fc00000

0802dd00 <abort>:
 802dd00:	b508      	push	{r3, lr}
 802dd02:	2006      	movs	r0, #6
 802dd04:	f003 f976 	bl	8030ff4 <raise>
 802dd08:	2001      	movs	r0, #1
 802dd0a:	f7e4 ff83 	bl	8012c14 <_exit>

0802dd0e <quorem>:
 802dd0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dd12:	6903      	ldr	r3, [r0, #16]
 802dd14:	690c      	ldr	r4, [r1, #16]
 802dd16:	42a3      	cmp	r3, r4
 802dd18:	4607      	mov	r7, r0
 802dd1a:	db7e      	blt.n	802de1a <quorem+0x10c>
 802dd1c:	3c01      	subs	r4, #1
 802dd1e:	f101 0814 	add.w	r8, r1, #20
 802dd22:	f100 0514 	add.w	r5, r0, #20
 802dd26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802dd2a:	9301      	str	r3, [sp, #4]
 802dd2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802dd30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802dd34:	3301      	adds	r3, #1
 802dd36:	429a      	cmp	r2, r3
 802dd38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802dd3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802dd40:	fbb2 f6f3 	udiv	r6, r2, r3
 802dd44:	d331      	bcc.n	802ddaa <quorem+0x9c>
 802dd46:	f04f 0e00 	mov.w	lr, #0
 802dd4a:	4640      	mov	r0, r8
 802dd4c:	46ac      	mov	ip, r5
 802dd4e:	46f2      	mov	sl, lr
 802dd50:	f850 2b04 	ldr.w	r2, [r0], #4
 802dd54:	b293      	uxth	r3, r2
 802dd56:	fb06 e303 	mla	r3, r6, r3, lr
 802dd5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802dd5e:	0c1a      	lsrs	r2, r3, #16
 802dd60:	b29b      	uxth	r3, r3
 802dd62:	ebaa 0303 	sub.w	r3, sl, r3
 802dd66:	f8dc a000 	ldr.w	sl, [ip]
 802dd6a:	fa13 f38a 	uxtah	r3, r3, sl
 802dd6e:	fb06 220e 	mla	r2, r6, lr, r2
 802dd72:	9300      	str	r3, [sp, #0]
 802dd74:	9b00      	ldr	r3, [sp, #0]
 802dd76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802dd7a:	b292      	uxth	r2, r2
 802dd7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802dd80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802dd84:	f8bd 3000 	ldrh.w	r3, [sp]
 802dd88:	4581      	cmp	r9, r0
 802dd8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802dd8e:	f84c 3b04 	str.w	r3, [ip], #4
 802dd92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802dd96:	d2db      	bcs.n	802dd50 <quorem+0x42>
 802dd98:	f855 300b 	ldr.w	r3, [r5, fp]
 802dd9c:	b92b      	cbnz	r3, 802ddaa <quorem+0x9c>
 802dd9e:	9b01      	ldr	r3, [sp, #4]
 802dda0:	3b04      	subs	r3, #4
 802dda2:	429d      	cmp	r5, r3
 802dda4:	461a      	mov	r2, r3
 802dda6:	d32c      	bcc.n	802de02 <quorem+0xf4>
 802dda8:	613c      	str	r4, [r7, #16]
 802ddaa:	4638      	mov	r0, r7
 802ddac:	f001 f93c 	bl	802f028 <__mcmp>
 802ddb0:	2800      	cmp	r0, #0
 802ddb2:	db22      	blt.n	802ddfa <quorem+0xec>
 802ddb4:	3601      	adds	r6, #1
 802ddb6:	4629      	mov	r1, r5
 802ddb8:	2000      	movs	r0, #0
 802ddba:	f858 2b04 	ldr.w	r2, [r8], #4
 802ddbe:	f8d1 c000 	ldr.w	ip, [r1]
 802ddc2:	b293      	uxth	r3, r2
 802ddc4:	1ac3      	subs	r3, r0, r3
 802ddc6:	0c12      	lsrs	r2, r2, #16
 802ddc8:	fa13 f38c 	uxtah	r3, r3, ip
 802ddcc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802ddd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802ddd4:	b29b      	uxth	r3, r3
 802ddd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802ddda:	45c1      	cmp	r9, r8
 802dddc:	f841 3b04 	str.w	r3, [r1], #4
 802dde0:	ea4f 4022 	mov.w	r0, r2, asr #16
 802dde4:	d2e9      	bcs.n	802ddba <quorem+0xac>
 802dde6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802ddea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802ddee:	b922      	cbnz	r2, 802ddfa <quorem+0xec>
 802ddf0:	3b04      	subs	r3, #4
 802ddf2:	429d      	cmp	r5, r3
 802ddf4:	461a      	mov	r2, r3
 802ddf6:	d30a      	bcc.n	802de0e <quorem+0x100>
 802ddf8:	613c      	str	r4, [r7, #16]
 802ddfa:	4630      	mov	r0, r6
 802ddfc:	b003      	add	sp, #12
 802ddfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802de02:	6812      	ldr	r2, [r2, #0]
 802de04:	3b04      	subs	r3, #4
 802de06:	2a00      	cmp	r2, #0
 802de08:	d1ce      	bne.n	802dda8 <quorem+0x9a>
 802de0a:	3c01      	subs	r4, #1
 802de0c:	e7c9      	b.n	802dda2 <quorem+0x94>
 802de0e:	6812      	ldr	r2, [r2, #0]
 802de10:	3b04      	subs	r3, #4
 802de12:	2a00      	cmp	r2, #0
 802de14:	d1f0      	bne.n	802ddf8 <quorem+0xea>
 802de16:	3c01      	subs	r4, #1
 802de18:	e7eb      	b.n	802ddf2 <quorem+0xe4>
 802de1a:	2000      	movs	r0, #0
 802de1c:	e7ee      	b.n	802ddfc <quorem+0xee>
	...

0802de20 <_dtoa_r>:
 802de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802de24:	ed2d 8b04 	vpush	{d8-d9}
 802de28:	69c5      	ldr	r5, [r0, #28]
 802de2a:	b093      	sub	sp, #76	; 0x4c
 802de2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 802de30:	ec57 6b10 	vmov	r6, r7, d0
 802de34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802de38:	9107      	str	r1, [sp, #28]
 802de3a:	4604      	mov	r4, r0
 802de3c:	920a      	str	r2, [sp, #40]	; 0x28
 802de3e:	930d      	str	r3, [sp, #52]	; 0x34
 802de40:	b975      	cbnz	r5, 802de60 <_dtoa_r+0x40>
 802de42:	2010      	movs	r0, #16
 802de44:	f7fe fbd6 	bl	802c5f4 <malloc>
 802de48:	4602      	mov	r2, r0
 802de4a:	61e0      	str	r0, [r4, #28]
 802de4c:	b920      	cbnz	r0, 802de58 <_dtoa_r+0x38>
 802de4e:	4bae      	ldr	r3, [pc, #696]	; (802e108 <_dtoa_r+0x2e8>)
 802de50:	21ef      	movs	r1, #239	; 0xef
 802de52:	48ae      	ldr	r0, [pc, #696]	; (802e10c <_dtoa_r+0x2ec>)
 802de54:	f7fe fb9a 	bl	802c58c <__assert_func>
 802de58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802de5c:	6005      	str	r5, [r0, #0]
 802de5e:	60c5      	str	r5, [r0, #12]
 802de60:	69e3      	ldr	r3, [r4, #28]
 802de62:	6819      	ldr	r1, [r3, #0]
 802de64:	b151      	cbz	r1, 802de7c <_dtoa_r+0x5c>
 802de66:	685a      	ldr	r2, [r3, #4]
 802de68:	604a      	str	r2, [r1, #4]
 802de6a:	2301      	movs	r3, #1
 802de6c:	4093      	lsls	r3, r2
 802de6e:	608b      	str	r3, [r1, #8]
 802de70:	4620      	mov	r0, r4
 802de72:	f000 fe53 	bl	802eb1c <_Bfree>
 802de76:	69e3      	ldr	r3, [r4, #28]
 802de78:	2200      	movs	r2, #0
 802de7a:	601a      	str	r2, [r3, #0]
 802de7c:	1e3b      	subs	r3, r7, #0
 802de7e:	bfbb      	ittet	lt
 802de80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802de84:	9303      	strlt	r3, [sp, #12]
 802de86:	2300      	movge	r3, #0
 802de88:	2201      	movlt	r2, #1
 802de8a:	bfac      	ite	ge
 802de8c:	f8c8 3000 	strge.w	r3, [r8]
 802de90:	f8c8 2000 	strlt.w	r2, [r8]
 802de94:	4b9e      	ldr	r3, [pc, #632]	; (802e110 <_dtoa_r+0x2f0>)
 802de96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802de9a:	ea33 0308 	bics.w	r3, r3, r8
 802de9e:	d11b      	bne.n	802ded8 <_dtoa_r+0xb8>
 802dea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802dea2:	f242 730f 	movw	r3, #9999	; 0x270f
 802dea6:	6013      	str	r3, [r2, #0]
 802dea8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802deac:	4333      	orrs	r3, r6
 802deae:	f000 8593 	beq.w	802e9d8 <_dtoa_r+0xbb8>
 802deb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802deb4:	b963      	cbnz	r3, 802ded0 <_dtoa_r+0xb0>
 802deb6:	4b97      	ldr	r3, [pc, #604]	; (802e114 <_dtoa_r+0x2f4>)
 802deb8:	e027      	b.n	802df0a <_dtoa_r+0xea>
 802deba:	4b97      	ldr	r3, [pc, #604]	; (802e118 <_dtoa_r+0x2f8>)
 802debc:	9300      	str	r3, [sp, #0]
 802debe:	3308      	adds	r3, #8
 802dec0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802dec2:	6013      	str	r3, [r2, #0]
 802dec4:	9800      	ldr	r0, [sp, #0]
 802dec6:	b013      	add	sp, #76	; 0x4c
 802dec8:	ecbd 8b04 	vpop	{d8-d9}
 802decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ded0:	4b90      	ldr	r3, [pc, #576]	; (802e114 <_dtoa_r+0x2f4>)
 802ded2:	9300      	str	r3, [sp, #0]
 802ded4:	3303      	adds	r3, #3
 802ded6:	e7f3      	b.n	802dec0 <_dtoa_r+0xa0>
 802ded8:	ed9d 7b02 	vldr	d7, [sp, #8]
 802dedc:	2200      	movs	r2, #0
 802dede:	ec51 0b17 	vmov	r0, r1, d7
 802dee2:	eeb0 8a47 	vmov.f32	s16, s14
 802dee6:	eef0 8a67 	vmov.f32	s17, s15
 802deea:	2300      	movs	r3, #0
 802deec:	f7e2 fe04 	bl	8010af8 <__aeabi_dcmpeq>
 802def0:	4681      	mov	r9, r0
 802def2:	b160      	cbz	r0, 802df0e <_dtoa_r+0xee>
 802def4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802def6:	2301      	movs	r3, #1
 802def8:	6013      	str	r3, [r2, #0]
 802defa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802defc:	2b00      	cmp	r3, #0
 802defe:	f000 8568 	beq.w	802e9d2 <_dtoa_r+0xbb2>
 802df02:	4b86      	ldr	r3, [pc, #536]	; (802e11c <_dtoa_r+0x2fc>)
 802df04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802df06:	6013      	str	r3, [r2, #0]
 802df08:	3b01      	subs	r3, #1
 802df0a:	9300      	str	r3, [sp, #0]
 802df0c:	e7da      	b.n	802dec4 <_dtoa_r+0xa4>
 802df0e:	aa10      	add	r2, sp, #64	; 0x40
 802df10:	a911      	add	r1, sp, #68	; 0x44
 802df12:	4620      	mov	r0, r4
 802df14:	eeb0 0a48 	vmov.f32	s0, s16
 802df18:	eef0 0a68 	vmov.f32	s1, s17
 802df1c:	f001 f99a 	bl	802f254 <__d2b>
 802df20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802df24:	4682      	mov	sl, r0
 802df26:	2d00      	cmp	r5, #0
 802df28:	d07f      	beq.n	802e02a <_dtoa_r+0x20a>
 802df2a:	ee18 3a90 	vmov	r3, s17
 802df2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802df32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802df36:	ec51 0b18 	vmov	r0, r1, d8
 802df3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802df3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802df42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802df46:	4619      	mov	r1, r3
 802df48:	2200      	movs	r2, #0
 802df4a:	4b75      	ldr	r3, [pc, #468]	; (802e120 <_dtoa_r+0x300>)
 802df4c:	f7e2 f9b4 	bl	80102b8 <__aeabi_dsub>
 802df50:	a367      	add	r3, pc, #412	; (adr r3, 802e0f0 <_dtoa_r+0x2d0>)
 802df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df56:	f7e2 fb67 	bl	8010628 <__aeabi_dmul>
 802df5a:	a367      	add	r3, pc, #412	; (adr r3, 802e0f8 <_dtoa_r+0x2d8>)
 802df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df60:	f7e2 f9ac 	bl	80102bc <__adddf3>
 802df64:	4606      	mov	r6, r0
 802df66:	4628      	mov	r0, r5
 802df68:	460f      	mov	r7, r1
 802df6a:	f7e2 faf3 	bl	8010554 <__aeabi_i2d>
 802df6e:	a364      	add	r3, pc, #400	; (adr r3, 802e100 <_dtoa_r+0x2e0>)
 802df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df74:	f7e2 fb58 	bl	8010628 <__aeabi_dmul>
 802df78:	4602      	mov	r2, r0
 802df7a:	460b      	mov	r3, r1
 802df7c:	4630      	mov	r0, r6
 802df7e:	4639      	mov	r1, r7
 802df80:	f7e2 f99c 	bl	80102bc <__adddf3>
 802df84:	4606      	mov	r6, r0
 802df86:	460f      	mov	r7, r1
 802df88:	f7e2 fdfe 	bl	8010b88 <__aeabi_d2iz>
 802df8c:	2200      	movs	r2, #0
 802df8e:	4683      	mov	fp, r0
 802df90:	2300      	movs	r3, #0
 802df92:	4630      	mov	r0, r6
 802df94:	4639      	mov	r1, r7
 802df96:	f7e2 fdb9 	bl	8010b0c <__aeabi_dcmplt>
 802df9a:	b148      	cbz	r0, 802dfb0 <_dtoa_r+0x190>
 802df9c:	4658      	mov	r0, fp
 802df9e:	f7e2 fad9 	bl	8010554 <__aeabi_i2d>
 802dfa2:	4632      	mov	r2, r6
 802dfa4:	463b      	mov	r3, r7
 802dfa6:	f7e2 fda7 	bl	8010af8 <__aeabi_dcmpeq>
 802dfaa:	b908      	cbnz	r0, 802dfb0 <_dtoa_r+0x190>
 802dfac:	f10b 3bff 	add.w	fp, fp, #4294967295
 802dfb0:	f1bb 0f16 	cmp.w	fp, #22
 802dfb4:	d857      	bhi.n	802e066 <_dtoa_r+0x246>
 802dfb6:	4b5b      	ldr	r3, [pc, #364]	; (802e124 <_dtoa_r+0x304>)
 802dfb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfc0:	ec51 0b18 	vmov	r0, r1, d8
 802dfc4:	f7e2 fda2 	bl	8010b0c <__aeabi_dcmplt>
 802dfc8:	2800      	cmp	r0, #0
 802dfca:	d04e      	beq.n	802e06a <_dtoa_r+0x24a>
 802dfcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 802dfd0:	2300      	movs	r3, #0
 802dfd2:	930c      	str	r3, [sp, #48]	; 0x30
 802dfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802dfd6:	1b5b      	subs	r3, r3, r5
 802dfd8:	1e5a      	subs	r2, r3, #1
 802dfda:	bf45      	ittet	mi
 802dfdc:	f1c3 0301 	rsbmi	r3, r3, #1
 802dfe0:	9305      	strmi	r3, [sp, #20]
 802dfe2:	2300      	movpl	r3, #0
 802dfe4:	2300      	movmi	r3, #0
 802dfe6:	9206      	str	r2, [sp, #24]
 802dfe8:	bf54      	ite	pl
 802dfea:	9305      	strpl	r3, [sp, #20]
 802dfec:	9306      	strmi	r3, [sp, #24]
 802dfee:	f1bb 0f00 	cmp.w	fp, #0
 802dff2:	db3c      	blt.n	802e06e <_dtoa_r+0x24e>
 802dff4:	9b06      	ldr	r3, [sp, #24]
 802dff6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802dffa:	445b      	add	r3, fp
 802dffc:	9306      	str	r3, [sp, #24]
 802dffe:	2300      	movs	r3, #0
 802e000:	9308      	str	r3, [sp, #32]
 802e002:	9b07      	ldr	r3, [sp, #28]
 802e004:	2b09      	cmp	r3, #9
 802e006:	d868      	bhi.n	802e0da <_dtoa_r+0x2ba>
 802e008:	2b05      	cmp	r3, #5
 802e00a:	bfc4      	itt	gt
 802e00c:	3b04      	subgt	r3, #4
 802e00e:	9307      	strgt	r3, [sp, #28]
 802e010:	9b07      	ldr	r3, [sp, #28]
 802e012:	f1a3 0302 	sub.w	r3, r3, #2
 802e016:	bfcc      	ite	gt
 802e018:	2500      	movgt	r5, #0
 802e01a:	2501      	movle	r5, #1
 802e01c:	2b03      	cmp	r3, #3
 802e01e:	f200 8085 	bhi.w	802e12c <_dtoa_r+0x30c>
 802e022:	e8df f003 	tbb	[pc, r3]
 802e026:	3b2e      	.short	0x3b2e
 802e028:	5839      	.short	0x5839
 802e02a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802e02e:	441d      	add	r5, r3
 802e030:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802e034:	2b20      	cmp	r3, #32
 802e036:	bfc1      	itttt	gt
 802e038:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802e03c:	fa08 f803 	lslgt.w	r8, r8, r3
 802e040:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802e044:	fa26 f303 	lsrgt.w	r3, r6, r3
 802e048:	bfd6      	itet	le
 802e04a:	f1c3 0320 	rsble	r3, r3, #32
 802e04e:	ea48 0003 	orrgt.w	r0, r8, r3
 802e052:	fa06 f003 	lslle.w	r0, r6, r3
 802e056:	f7e2 fa6d 	bl	8010534 <__aeabi_ui2d>
 802e05a:	2201      	movs	r2, #1
 802e05c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802e060:	3d01      	subs	r5, #1
 802e062:	920e      	str	r2, [sp, #56]	; 0x38
 802e064:	e76f      	b.n	802df46 <_dtoa_r+0x126>
 802e066:	2301      	movs	r3, #1
 802e068:	e7b3      	b.n	802dfd2 <_dtoa_r+0x1b2>
 802e06a:	900c      	str	r0, [sp, #48]	; 0x30
 802e06c:	e7b2      	b.n	802dfd4 <_dtoa_r+0x1b4>
 802e06e:	9b05      	ldr	r3, [sp, #20]
 802e070:	eba3 030b 	sub.w	r3, r3, fp
 802e074:	9305      	str	r3, [sp, #20]
 802e076:	f1cb 0300 	rsb	r3, fp, #0
 802e07a:	9308      	str	r3, [sp, #32]
 802e07c:	2300      	movs	r3, #0
 802e07e:	930b      	str	r3, [sp, #44]	; 0x2c
 802e080:	e7bf      	b.n	802e002 <_dtoa_r+0x1e2>
 802e082:	2300      	movs	r3, #0
 802e084:	9309      	str	r3, [sp, #36]	; 0x24
 802e086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e088:	2b00      	cmp	r3, #0
 802e08a:	dc52      	bgt.n	802e132 <_dtoa_r+0x312>
 802e08c:	2301      	movs	r3, #1
 802e08e:	9301      	str	r3, [sp, #4]
 802e090:	9304      	str	r3, [sp, #16]
 802e092:	461a      	mov	r2, r3
 802e094:	920a      	str	r2, [sp, #40]	; 0x28
 802e096:	e00b      	b.n	802e0b0 <_dtoa_r+0x290>
 802e098:	2301      	movs	r3, #1
 802e09a:	e7f3      	b.n	802e084 <_dtoa_r+0x264>
 802e09c:	2300      	movs	r3, #0
 802e09e:	9309      	str	r3, [sp, #36]	; 0x24
 802e0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e0a2:	445b      	add	r3, fp
 802e0a4:	9301      	str	r3, [sp, #4]
 802e0a6:	3301      	adds	r3, #1
 802e0a8:	2b01      	cmp	r3, #1
 802e0aa:	9304      	str	r3, [sp, #16]
 802e0ac:	bfb8      	it	lt
 802e0ae:	2301      	movlt	r3, #1
 802e0b0:	69e0      	ldr	r0, [r4, #28]
 802e0b2:	2100      	movs	r1, #0
 802e0b4:	2204      	movs	r2, #4
 802e0b6:	f102 0614 	add.w	r6, r2, #20
 802e0ba:	429e      	cmp	r6, r3
 802e0bc:	d93d      	bls.n	802e13a <_dtoa_r+0x31a>
 802e0be:	6041      	str	r1, [r0, #4]
 802e0c0:	4620      	mov	r0, r4
 802e0c2:	f000 fceb 	bl	802ea9c <_Balloc>
 802e0c6:	9000      	str	r0, [sp, #0]
 802e0c8:	2800      	cmp	r0, #0
 802e0ca:	d139      	bne.n	802e140 <_dtoa_r+0x320>
 802e0cc:	4b16      	ldr	r3, [pc, #88]	; (802e128 <_dtoa_r+0x308>)
 802e0ce:	4602      	mov	r2, r0
 802e0d0:	f240 11af 	movw	r1, #431	; 0x1af
 802e0d4:	e6bd      	b.n	802de52 <_dtoa_r+0x32>
 802e0d6:	2301      	movs	r3, #1
 802e0d8:	e7e1      	b.n	802e09e <_dtoa_r+0x27e>
 802e0da:	2501      	movs	r5, #1
 802e0dc:	2300      	movs	r3, #0
 802e0de:	9307      	str	r3, [sp, #28]
 802e0e0:	9509      	str	r5, [sp, #36]	; 0x24
 802e0e2:	f04f 33ff 	mov.w	r3, #4294967295
 802e0e6:	9301      	str	r3, [sp, #4]
 802e0e8:	9304      	str	r3, [sp, #16]
 802e0ea:	2200      	movs	r2, #0
 802e0ec:	2312      	movs	r3, #18
 802e0ee:	e7d1      	b.n	802e094 <_dtoa_r+0x274>
 802e0f0:	636f4361 	.word	0x636f4361
 802e0f4:	3fd287a7 	.word	0x3fd287a7
 802e0f8:	8b60c8b3 	.word	0x8b60c8b3
 802e0fc:	3fc68a28 	.word	0x3fc68a28
 802e100:	509f79fb 	.word	0x509f79fb
 802e104:	3fd34413 	.word	0x3fd34413
 802e108:	08034bd7 	.word	0x08034bd7
 802e10c:	08034c55 	.word	0x08034c55
 802e110:	7ff00000 	.word	0x7ff00000
 802e114:	08034c51 	.word	0x08034c51
 802e118:	08034c48 	.word	0x08034c48
 802e11c:	08034f91 	.word	0x08034f91
 802e120:	3ff80000 	.word	0x3ff80000
 802e124:	08034d40 	.word	0x08034d40
 802e128:	08034cad 	.word	0x08034cad
 802e12c:	2301      	movs	r3, #1
 802e12e:	9309      	str	r3, [sp, #36]	; 0x24
 802e130:	e7d7      	b.n	802e0e2 <_dtoa_r+0x2c2>
 802e132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e134:	9301      	str	r3, [sp, #4]
 802e136:	9304      	str	r3, [sp, #16]
 802e138:	e7ba      	b.n	802e0b0 <_dtoa_r+0x290>
 802e13a:	3101      	adds	r1, #1
 802e13c:	0052      	lsls	r2, r2, #1
 802e13e:	e7ba      	b.n	802e0b6 <_dtoa_r+0x296>
 802e140:	69e3      	ldr	r3, [r4, #28]
 802e142:	9a00      	ldr	r2, [sp, #0]
 802e144:	601a      	str	r2, [r3, #0]
 802e146:	9b04      	ldr	r3, [sp, #16]
 802e148:	2b0e      	cmp	r3, #14
 802e14a:	f200 80a8 	bhi.w	802e29e <_dtoa_r+0x47e>
 802e14e:	2d00      	cmp	r5, #0
 802e150:	f000 80a5 	beq.w	802e29e <_dtoa_r+0x47e>
 802e154:	f1bb 0f00 	cmp.w	fp, #0
 802e158:	dd38      	ble.n	802e1cc <_dtoa_r+0x3ac>
 802e15a:	4bc0      	ldr	r3, [pc, #768]	; (802e45c <_dtoa_r+0x63c>)
 802e15c:	f00b 020f 	and.w	r2, fp, #15
 802e160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e164:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802e168:	e9d3 6700 	ldrd	r6, r7, [r3]
 802e16c:	ea4f 182b 	mov.w	r8, fp, asr #4
 802e170:	d019      	beq.n	802e1a6 <_dtoa_r+0x386>
 802e172:	4bbb      	ldr	r3, [pc, #748]	; (802e460 <_dtoa_r+0x640>)
 802e174:	ec51 0b18 	vmov	r0, r1, d8
 802e178:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e17c:	f7e2 fb7e 	bl	801087c <__aeabi_ddiv>
 802e180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e184:	f008 080f 	and.w	r8, r8, #15
 802e188:	2503      	movs	r5, #3
 802e18a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802e460 <_dtoa_r+0x640>
 802e18e:	f1b8 0f00 	cmp.w	r8, #0
 802e192:	d10a      	bne.n	802e1aa <_dtoa_r+0x38a>
 802e194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e198:	4632      	mov	r2, r6
 802e19a:	463b      	mov	r3, r7
 802e19c:	f7e2 fb6e 	bl	801087c <__aeabi_ddiv>
 802e1a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e1a4:	e02b      	b.n	802e1fe <_dtoa_r+0x3de>
 802e1a6:	2502      	movs	r5, #2
 802e1a8:	e7ef      	b.n	802e18a <_dtoa_r+0x36a>
 802e1aa:	f018 0f01 	tst.w	r8, #1
 802e1ae:	d008      	beq.n	802e1c2 <_dtoa_r+0x3a2>
 802e1b0:	4630      	mov	r0, r6
 802e1b2:	4639      	mov	r1, r7
 802e1b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 802e1b8:	f7e2 fa36 	bl	8010628 <__aeabi_dmul>
 802e1bc:	3501      	adds	r5, #1
 802e1be:	4606      	mov	r6, r0
 802e1c0:	460f      	mov	r7, r1
 802e1c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 802e1c6:	f109 0908 	add.w	r9, r9, #8
 802e1ca:	e7e0      	b.n	802e18e <_dtoa_r+0x36e>
 802e1cc:	f000 809f 	beq.w	802e30e <_dtoa_r+0x4ee>
 802e1d0:	f1cb 0600 	rsb	r6, fp, #0
 802e1d4:	4ba1      	ldr	r3, [pc, #644]	; (802e45c <_dtoa_r+0x63c>)
 802e1d6:	4fa2      	ldr	r7, [pc, #648]	; (802e460 <_dtoa_r+0x640>)
 802e1d8:	f006 020f 	and.w	r2, r6, #15
 802e1dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1e4:	ec51 0b18 	vmov	r0, r1, d8
 802e1e8:	f7e2 fa1e 	bl	8010628 <__aeabi_dmul>
 802e1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e1f0:	1136      	asrs	r6, r6, #4
 802e1f2:	2300      	movs	r3, #0
 802e1f4:	2502      	movs	r5, #2
 802e1f6:	2e00      	cmp	r6, #0
 802e1f8:	d17e      	bne.n	802e2f8 <_dtoa_r+0x4d8>
 802e1fa:	2b00      	cmp	r3, #0
 802e1fc:	d1d0      	bne.n	802e1a0 <_dtoa_r+0x380>
 802e1fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e200:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e204:	2b00      	cmp	r3, #0
 802e206:	f000 8084 	beq.w	802e312 <_dtoa_r+0x4f2>
 802e20a:	4b96      	ldr	r3, [pc, #600]	; (802e464 <_dtoa_r+0x644>)
 802e20c:	2200      	movs	r2, #0
 802e20e:	4640      	mov	r0, r8
 802e210:	4649      	mov	r1, r9
 802e212:	f7e2 fc7b 	bl	8010b0c <__aeabi_dcmplt>
 802e216:	2800      	cmp	r0, #0
 802e218:	d07b      	beq.n	802e312 <_dtoa_r+0x4f2>
 802e21a:	9b04      	ldr	r3, [sp, #16]
 802e21c:	2b00      	cmp	r3, #0
 802e21e:	d078      	beq.n	802e312 <_dtoa_r+0x4f2>
 802e220:	9b01      	ldr	r3, [sp, #4]
 802e222:	2b00      	cmp	r3, #0
 802e224:	dd39      	ble.n	802e29a <_dtoa_r+0x47a>
 802e226:	4b90      	ldr	r3, [pc, #576]	; (802e468 <_dtoa_r+0x648>)
 802e228:	2200      	movs	r2, #0
 802e22a:	4640      	mov	r0, r8
 802e22c:	4649      	mov	r1, r9
 802e22e:	f7e2 f9fb 	bl	8010628 <__aeabi_dmul>
 802e232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e236:	9e01      	ldr	r6, [sp, #4]
 802e238:	f10b 37ff 	add.w	r7, fp, #4294967295
 802e23c:	3501      	adds	r5, #1
 802e23e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e242:	4628      	mov	r0, r5
 802e244:	f7e2 f986 	bl	8010554 <__aeabi_i2d>
 802e248:	4642      	mov	r2, r8
 802e24a:	464b      	mov	r3, r9
 802e24c:	f7e2 f9ec 	bl	8010628 <__aeabi_dmul>
 802e250:	4b86      	ldr	r3, [pc, #536]	; (802e46c <_dtoa_r+0x64c>)
 802e252:	2200      	movs	r2, #0
 802e254:	f7e2 f832 	bl	80102bc <__adddf3>
 802e258:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802e25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e260:	9303      	str	r3, [sp, #12]
 802e262:	2e00      	cmp	r6, #0
 802e264:	d158      	bne.n	802e318 <_dtoa_r+0x4f8>
 802e266:	4b82      	ldr	r3, [pc, #520]	; (802e470 <_dtoa_r+0x650>)
 802e268:	2200      	movs	r2, #0
 802e26a:	4640      	mov	r0, r8
 802e26c:	4649      	mov	r1, r9
 802e26e:	f7e2 f823 	bl	80102b8 <__aeabi_dsub>
 802e272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e276:	4680      	mov	r8, r0
 802e278:	4689      	mov	r9, r1
 802e27a:	f7e2 fc65 	bl	8010b48 <__aeabi_dcmpgt>
 802e27e:	2800      	cmp	r0, #0
 802e280:	f040 8296 	bne.w	802e7b0 <_dtoa_r+0x990>
 802e284:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802e288:	4640      	mov	r0, r8
 802e28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802e28e:	4649      	mov	r1, r9
 802e290:	f7e2 fc3c 	bl	8010b0c <__aeabi_dcmplt>
 802e294:	2800      	cmp	r0, #0
 802e296:	f040 8289 	bne.w	802e7ac <_dtoa_r+0x98c>
 802e29a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802e29e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802e2a0:	2b00      	cmp	r3, #0
 802e2a2:	f2c0 814e 	blt.w	802e542 <_dtoa_r+0x722>
 802e2a6:	f1bb 0f0e 	cmp.w	fp, #14
 802e2aa:	f300 814a 	bgt.w	802e542 <_dtoa_r+0x722>
 802e2ae:	4b6b      	ldr	r3, [pc, #428]	; (802e45c <_dtoa_r+0x63c>)
 802e2b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e2b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 802e2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e2ba:	2b00      	cmp	r3, #0
 802e2bc:	f280 80dc 	bge.w	802e478 <_dtoa_r+0x658>
 802e2c0:	9b04      	ldr	r3, [sp, #16]
 802e2c2:	2b00      	cmp	r3, #0
 802e2c4:	f300 80d8 	bgt.w	802e478 <_dtoa_r+0x658>
 802e2c8:	f040 826f 	bne.w	802e7aa <_dtoa_r+0x98a>
 802e2cc:	4b68      	ldr	r3, [pc, #416]	; (802e470 <_dtoa_r+0x650>)
 802e2ce:	2200      	movs	r2, #0
 802e2d0:	4640      	mov	r0, r8
 802e2d2:	4649      	mov	r1, r9
 802e2d4:	f7e2 f9a8 	bl	8010628 <__aeabi_dmul>
 802e2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e2dc:	f7e2 fc2a 	bl	8010b34 <__aeabi_dcmpge>
 802e2e0:	9e04      	ldr	r6, [sp, #16]
 802e2e2:	4637      	mov	r7, r6
 802e2e4:	2800      	cmp	r0, #0
 802e2e6:	f040 8245 	bne.w	802e774 <_dtoa_r+0x954>
 802e2ea:	9d00      	ldr	r5, [sp, #0]
 802e2ec:	2331      	movs	r3, #49	; 0x31
 802e2ee:	f805 3b01 	strb.w	r3, [r5], #1
 802e2f2:	f10b 0b01 	add.w	fp, fp, #1
 802e2f6:	e241      	b.n	802e77c <_dtoa_r+0x95c>
 802e2f8:	07f2      	lsls	r2, r6, #31
 802e2fa:	d505      	bpl.n	802e308 <_dtoa_r+0x4e8>
 802e2fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 802e300:	f7e2 f992 	bl	8010628 <__aeabi_dmul>
 802e304:	3501      	adds	r5, #1
 802e306:	2301      	movs	r3, #1
 802e308:	1076      	asrs	r6, r6, #1
 802e30a:	3708      	adds	r7, #8
 802e30c:	e773      	b.n	802e1f6 <_dtoa_r+0x3d6>
 802e30e:	2502      	movs	r5, #2
 802e310:	e775      	b.n	802e1fe <_dtoa_r+0x3de>
 802e312:	9e04      	ldr	r6, [sp, #16]
 802e314:	465f      	mov	r7, fp
 802e316:	e792      	b.n	802e23e <_dtoa_r+0x41e>
 802e318:	9900      	ldr	r1, [sp, #0]
 802e31a:	4b50      	ldr	r3, [pc, #320]	; (802e45c <_dtoa_r+0x63c>)
 802e31c:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e320:	4431      	add	r1, r6
 802e322:	9102      	str	r1, [sp, #8]
 802e324:	9909      	ldr	r1, [sp, #36]	; 0x24
 802e326:	eeb0 9a47 	vmov.f32	s18, s14
 802e32a:	eef0 9a67 	vmov.f32	s19, s15
 802e32e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802e332:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e336:	2900      	cmp	r1, #0
 802e338:	d044      	beq.n	802e3c4 <_dtoa_r+0x5a4>
 802e33a:	494e      	ldr	r1, [pc, #312]	; (802e474 <_dtoa_r+0x654>)
 802e33c:	2000      	movs	r0, #0
 802e33e:	f7e2 fa9d 	bl	801087c <__aeabi_ddiv>
 802e342:	ec53 2b19 	vmov	r2, r3, d9
 802e346:	f7e1 ffb7 	bl	80102b8 <__aeabi_dsub>
 802e34a:	9d00      	ldr	r5, [sp, #0]
 802e34c:	ec41 0b19 	vmov	d9, r0, r1
 802e350:	4649      	mov	r1, r9
 802e352:	4640      	mov	r0, r8
 802e354:	f7e2 fc18 	bl	8010b88 <__aeabi_d2iz>
 802e358:	4606      	mov	r6, r0
 802e35a:	f7e2 f8fb 	bl	8010554 <__aeabi_i2d>
 802e35e:	4602      	mov	r2, r0
 802e360:	460b      	mov	r3, r1
 802e362:	4640      	mov	r0, r8
 802e364:	4649      	mov	r1, r9
 802e366:	f7e1 ffa7 	bl	80102b8 <__aeabi_dsub>
 802e36a:	3630      	adds	r6, #48	; 0x30
 802e36c:	f805 6b01 	strb.w	r6, [r5], #1
 802e370:	ec53 2b19 	vmov	r2, r3, d9
 802e374:	4680      	mov	r8, r0
 802e376:	4689      	mov	r9, r1
 802e378:	f7e2 fbc8 	bl	8010b0c <__aeabi_dcmplt>
 802e37c:	2800      	cmp	r0, #0
 802e37e:	d164      	bne.n	802e44a <_dtoa_r+0x62a>
 802e380:	4642      	mov	r2, r8
 802e382:	464b      	mov	r3, r9
 802e384:	4937      	ldr	r1, [pc, #220]	; (802e464 <_dtoa_r+0x644>)
 802e386:	2000      	movs	r0, #0
 802e388:	f7e1 ff96 	bl	80102b8 <__aeabi_dsub>
 802e38c:	ec53 2b19 	vmov	r2, r3, d9
 802e390:	f7e2 fbbc 	bl	8010b0c <__aeabi_dcmplt>
 802e394:	2800      	cmp	r0, #0
 802e396:	f040 80b6 	bne.w	802e506 <_dtoa_r+0x6e6>
 802e39a:	9b02      	ldr	r3, [sp, #8]
 802e39c:	429d      	cmp	r5, r3
 802e39e:	f43f af7c 	beq.w	802e29a <_dtoa_r+0x47a>
 802e3a2:	4b31      	ldr	r3, [pc, #196]	; (802e468 <_dtoa_r+0x648>)
 802e3a4:	ec51 0b19 	vmov	r0, r1, d9
 802e3a8:	2200      	movs	r2, #0
 802e3aa:	f7e2 f93d 	bl	8010628 <__aeabi_dmul>
 802e3ae:	4b2e      	ldr	r3, [pc, #184]	; (802e468 <_dtoa_r+0x648>)
 802e3b0:	ec41 0b19 	vmov	d9, r0, r1
 802e3b4:	2200      	movs	r2, #0
 802e3b6:	4640      	mov	r0, r8
 802e3b8:	4649      	mov	r1, r9
 802e3ba:	f7e2 f935 	bl	8010628 <__aeabi_dmul>
 802e3be:	4680      	mov	r8, r0
 802e3c0:	4689      	mov	r9, r1
 802e3c2:	e7c5      	b.n	802e350 <_dtoa_r+0x530>
 802e3c4:	ec51 0b17 	vmov	r0, r1, d7
 802e3c8:	f7e2 f92e 	bl	8010628 <__aeabi_dmul>
 802e3cc:	9b02      	ldr	r3, [sp, #8]
 802e3ce:	9d00      	ldr	r5, [sp, #0]
 802e3d0:	930f      	str	r3, [sp, #60]	; 0x3c
 802e3d2:	ec41 0b19 	vmov	d9, r0, r1
 802e3d6:	4649      	mov	r1, r9
 802e3d8:	4640      	mov	r0, r8
 802e3da:	f7e2 fbd5 	bl	8010b88 <__aeabi_d2iz>
 802e3de:	4606      	mov	r6, r0
 802e3e0:	f7e2 f8b8 	bl	8010554 <__aeabi_i2d>
 802e3e4:	3630      	adds	r6, #48	; 0x30
 802e3e6:	4602      	mov	r2, r0
 802e3e8:	460b      	mov	r3, r1
 802e3ea:	4640      	mov	r0, r8
 802e3ec:	4649      	mov	r1, r9
 802e3ee:	f7e1 ff63 	bl	80102b8 <__aeabi_dsub>
 802e3f2:	f805 6b01 	strb.w	r6, [r5], #1
 802e3f6:	9b02      	ldr	r3, [sp, #8]
 802e3f8:	429d      	cmp	r5, r3
 802e3fa:	4680      	mov	r8, r0
 802e3fc:	4689      	mov	r9, r1
 802e3fe:	f04f 0200 	mov.w	r2, #0
 802e402:	d124      	bne.n	802e44e <_dtoa_r+0x62e>
 802e404:	4b1b      	ldr	r3, [pc, #108]	; (802e474 <_dtoa_r+0x654>)
 802e406:	ec51 0b19 	vmov	r0, r1, d9
 802e40a:	f7e1 ff57 	bl	80102bc <__adddf3>
 802e40e:	4602      	mov	r2, r0
 802e410:	460b      	mov	r3, r1
 802e412:	4640      	mov	r0, r8
 802e414:	4649      	mov	r1, r9
 802e416:	f7e2 fb97 	bl	8010b48 <__aeabi_dcmpgt>
 802e41a:	2800      	cmp	r0, #0
 802e41c:	d173      	bne.n	802e506 <_dtoa_r+0x6e6>
 802e41e:	ec53 2b19 	vmov	r2, r3, d9
 802e422:	4914      	ldr	r1, [pc, #80]	; (802e474 <_dtoa_r+0x654>)
 802e424:	2000      	movs	r0, #0
 802e426:	f7e1 ff47 	bl	80102b8 <__aeabi_dsub>
 802e42a:	4602      	mov	r2, r0
 802e42c:	460b      	mov	r3, r1
 802e42e:	4640      	mov	r0, r8
 802e430:	4649      	mov	r1, r9
 802e432:	f7e2 fb6b 	bl	8010b0c <__aeabi_dcmplt>
 802e436:	2800      	cmp	r0, #0
 802e438:	f43f af2f 	beq.w	802e29a <_dtoa_r+0x47a>
 802e43c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802e43e:	1e6b      	subs	r3, r5, #1
 802e440:	930f      	str	r3, [sp, #60]	; 0x3c
 802e442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802e446:	2b30      	cmp	r3, #48	; 0x30
 802e448:	d0f8      	beq.n	802e43c <_dtoa_r+0x61c>
 802e44a:	46bb      	mov	fp, r7
 802e44c:	e04a      	b.n	802e4e4 <_dtoa_r+0x6c4>
 802e44e:	4b06      	ldr	r3, [pc, #24]	; (802e468 <_dtoa_r+0x648>)
 802e450:	f7e2 f8ea 	bl	8010628 <__aeabi_dmul>
 802e454:	4680      	mov	r8, r0
 802e456:	4689      	mov	r9, r1
 802e458:	e7bd      	b.n	802e3d6 <_dtoa_r+0x5b6>
 802e45a:	bf00      	nop
 802e45c:	08034d40 	.word	0x08034d40
 802e460:	08034d18 	.word	0x08034d18
 802e464:	3ff00000 	.word	0x3ff00000
 802e468:	40240000 	.word	0x40240000
 802e46c:	401c0000 	.word	0x401c0000
 802e470:	40140000 	.word	0x40140000
 802e474:	3fe00000 	.word	0x3fe00000
 802e478:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802e47c:	9d00      	ldr	r5, [sp, #0]
 802e47e:	4642      	mov	r2, r8
 802e480:	464b      	mov	r3, r9
 802e482:	4630      	mov	r0, r6
 802e484:	4639      	mov	r1, r7
 802e486:	f7e2 f9f9 	bl	801087c <__aeabi_ddiv>
 802e48a:	f7e2 fb7d 	bl	8010b88 <__aeabi_d2iz>
 802e48e:	9001      	str	r0, [sp, #4]
 802e490:	f7e2 f860 	bl	8010554 <__aeabi_i2d>
 802e494:	4642      	mov	r2, r8
 802e496:	464b      	mov	r3, r9
 802e498:	f7e2 f8c6 	bl	8010628 <__aeabi_dmul>
 802e49c:	4602      	mov	r2, r0
 802e49e:	460b      	mov	r3, r1
 802e4a0:	4630      	mov	r0, r6
 802e4a2:	4639      	mov	r1, r7
 802e4a4:	f7e1 ff08 	bl	80102b8 <__aeabi_dsub>
 802e4a8:	9e01      	ldr	r6, [sp, #4]
 802e4aa:	9f04      	ldr	r7, [sp, #16]
 802e4ac:	3630      	adds	r6, #48	; 0x30
 802e4ae:	f805 6b01 	strb.w	r6, [r5], #1
 802e4b2:	9e00      	ldr	r6, [sp, #0]
 802e4b4:	1bae      	subs	r6, r5, r6
 802e4b6:	42b7      	cmp	r7, r6
 802e4b8:	4602      	mov	r2, r0
 802e4ba:	460b      	mov	r3, r1
 802e4bc:	d134      	bne.n	802e528 <_dtoa_r+0x708>
 802e4be:	f7e1 fefd 	bl	80102bc <__adddf3>
 802e4c2:	4642      	mov	r2, r8
 802e4c4:	464b      	mov	r3, r9
 802e4c6:	4606      	mov	r6, r0
 802e4c8:	460f      	mov	r7, r1
 802e4ca:	f7e2 fb3d 	bl	8010b48 <__aeabi_dcmpgt>
 802e4ce:	b9c8      	cbnz	r0, 802e504 <_dtoa_r+0x6e4>
 802e4d0:	4642      	mov	r2, r8
 802e4d2:	464b      	mov	r3, r9
 802e4d4:	4630      	mov	r0, r6
 802e4d6:	4639      	mov	r1, r7
 802e4d8:	f7e2 fb0e 	bl	8010af8 <__aeabi_dcmpeq>
 802e4dc:	b110      	cbz	r0, 802e4e4 <_dtoa_r+0x6c4>
 802e4de:	9b01      	ldr	r3, [sp, #4]
 802e4e0:	07db      	lsls	r3, r3, #31
 802e4e2:	d40f      	bmi.n	802e504 <_dtoa_r+0x6e4>
 802e4e4:	4651      	mov	r1, sl
 802e4e6:	4620      	mov	r0, r4
 802e4e8:	f000 fb18 	bl	802eb1c <_Bfree>
 802e4ec:	2300      	movs	r3, #0
 802e4ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e4f0:	702b      	strb	r3, [r5, #0]
 802e4f2:	f10b 0301 	add.w	r3, fp, #1
 802e4f6:	6013      	str	r3, [r2, #0]
 802e4f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e4fa:	2b00      	cmp	r3, #0
 802e4fc:	f43f ace2 	beq.w	802dec4 <_dtoa_r+0xa4>
 802e500:	601d      	str	r5, [r3, #0]
 802e502:	e4df      	b.n	802dec4 <_dtoa_r+0xa4>
 802e504:	465f      	mov	r7, fp
 802e506:	462b      	mov	r3, r5
 802e508:	461d      	mov	r5, r3
 802e50a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e50e:	2a39      	cmp	r2, #57	; 0x39
 802e510:	d106      	bne.n	802e520 <_dtoa_r+0x700>
 802e512:	9a00      	ldr	r2, [sp, #0]
 802e514:	429a      	cmp	r2, r3
 802e516:	d1f7      	bne.n	802e508 <_dtoa_r+0x6e8>
 802e518:	9900      	ldr	r1, [sp, #0]
 802e51a:	2230      	movs	r2, #48	; 0x30
 802e51c:	3701      	adds	r7, #1
 802e51e:	700a      	strb	r2, [r1, #0]
 802e520:	781a      	ldrb	r2, [r3, #0]
 802e522:	3201      	adds	r2, #1
 802e524:	701a      	strb	r2, [r3, #0]
 802e526:	e790      	b.n	802e44a <_dtoa_r+0x62a>
 802e528:	4ba3      	ldr	r3, [pc, #652]	; (802e7b8 <_dtoa_r+0x998>)
 802e52a:	2200      	movs	r2, #0
 802e52c:	f7e2 f87c 	bl	8010628 <__aeabi_dmul>
 802e530:	2200      	movs	r2, #0
 802e532:	2300      	movs	r3, #0
 802e534:	4606      	mov	r6, r0
 802e536:	460f      	mov	r7, r1
 802e538:	f7e2 fade 	bl	8010af8 <__aeabi_dcmpeq>
 802e53c:	2800      	cmp	r0, #0
 802e53e:	d09e      	beq.n	802e47e <_dtoa_r+0x65e>
 802e540:	e7d0      	b.n	802e4e4 <_dtoa_r+0x6c4>
 802e542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e544:	2a00      	cmp	r2, #0
 802e546:	f000 80ca 	beq.w	802e6de <_dtoa_r+0x8be>
 802e54a:	9a07      	ldr	r2, [sp, #28]
 802e54c:	2a01      	cmp	r2, #1
 802e54e:	f300 80ad 	bgt.w	802e6ac <_dtoa_r+0x88c>
 802e552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802e554:	2a00      	cmp	r2, #0
 802e556:	f000 80a5 	beq.w	802e6a4 <_dtoa_r+0x884>
 802e55a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802e55e:	9e08      	ldr	r6, [sp, #32]
 802e560:	9d05      	ldr	r5, [sp, #20]
 802e562:	9a05      	ldr	r2, [sp, #20]
 802e564:	441a      	add	r2, r3
 802e566:	9205      	str	r2, [sp, #20]
 802e568:	9a06      	ldr	r2, [sp, #24]
 802e56a:	2101      	movs	r1, #1
 802e56c:	441a      	add	r2, r3
 802e56e:	4620      	mov	r0, r4
 802e570:	9206      	str	r2, [sp, #24]
 802e572:	f000 fbd3 	bl	802ed1c <__i2b>
 802e576:	4607      	mov	r7, r0
 802e578:	b165      	cbz	r5, 802e594 <_dtoa_r+0x774>
 802e57a:	9b06      	ldr	r3, [sp, #24]
 802e57c:	2b00      	cmp	r3, #0
 802e57e:	dd09      	ble.n	802e594 <_dtoa_r+0x774>
 802e580:	42ab      	cmp	r3, r5
 802e582:	9a05      	ldr	r2, [sp, #20]
 802e584:	bfa8      	it	ge
 802e586:	462b      	movge	r3, r5
 802e588:	1ad2      	subs	r2, r2, r3
 802e58a:	9205      	str	r2, [sp, #20]
 802e58c:	9a06      	ldr	r2, [sp, #24]
 802e58e:	1aed      	subs	r5, r5, r3
 802e590:	1ad3      	subs	r3, r2, r3
 802e592:	9306      	str	r3, [sp, #24]
 802e594:	9b08      	ldr	r3, [sp, #32]
 802e596:	b1f3      	cbz	r3, 802e5d6 <_dtoa_r+0x7b6>
 802e598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e59a:	2b00      	cmp	r3, #0
 802e59c:	f000 80a3 	beq.w	802e6e6 <_dtoa_r+0x8c6>
 802e5a0:	2e00      	cmp	r6, #0
 802e5a2:	dd10      	ble.n	802e5c6 <_dtoa_r+0x7a6>
 802e5a4:	4639      	mov	r1, r7
 802e5a6:	4632      	mov	r2, r6
 802e5a8:	4620      	mov	r0, r4
 802e5aa:	f000 fc77 	bl	802ee9c <__pow5mult>
 802e5ae:	4652      	mov	r2, sl
 802e5b0:	4601      	mov	r1, r0
 802e5b2:	4607      	mov	r7, r0
 802e5b4:	4620      	mov	r0, r4
 802e5b6:	f000 fbc7 	bl	802ed48 <__multiply>
 802e5ba:	4651      	mov	r1, sl
 802e5bc:	4680      	mov	r8, r0
 802e5be:	4620      	mov	r0, r4
 802e5c0:	f000 faac 	bl	802eb1c <_Bfree>
 802e5c4:	46c2      	mov	sl, r8
 802e5c6:	9b08      	ldr	r3, [sp, #32]
 802e5c8:	1b9a      	subs	r2, r3, r6
 802e5ca:	d004      	beq.n	802e5d6 <_dtoa_r+0x7b6>
 802e5cc:	4651      	mov	r1, sl
 802e5ce:	4620      	mov	r0, r4
 802e5d0:	f000 fc64 	bl	802ee9c <__pow5mult>
 802e5d4:	4682      	mov	sl, r0
 802e5d6:	2101      	movs	r1, #1
 802e5d8:	4620      	mov	r0, r4
 802e5da:	f000 fb9f 	bl	802ed1c <__i2b>
 802e5de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e5e0:	2b00      	cmp	r3, #0
 802e5e2:	4606      	mov	r6, r0
 802e5e4:	f340 8081 	ble.w	802e6ea <_dtoa_r+0x8ca>
 802e5e8:	461a      	mov	r2, r3
 802e5ea:	4601      	mov	r1, r0
 802e5ec:	4620      	mov	r0, r4
 802e5ee:	f000 fc55 	bl	802ee9c <__pow5mult>
 802e5f2:	9b07      	ldr	r3, [sp, #28]
 802e5f4:	2b01      	cmp	r3, #1
 802e5f6:	4606      	mov	r6, r0
 802e5f8:	dd7a      	ble.n	802e6f0 <_dtoa_r+0x8d0>
 802e5fa:	f04f 0800 	mov.w	r8, #0
 802e5fe:	6933      	ldr	r3, [r6, #16]
 802e600:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802e604:	6918      	ldr	r0, [r3, #16]
 802e606:	f000 fb3b 	bl	802ec80 <__hi0bits>
 802e60a:	f1c0 0020 	rsb	r0, r0, #32
 802e60e:	9b06      	ldr	r3, [sp, #24]
 802e610:	4418      	add	r0, r3
 802e612:	f010 001f 	ands.w	r0, r0, #31
 802e616:	f000 8094 	beq.w	802e742 <_dtoa_r+0x922>
 802e61a:	f1c0 0320 	rsb	r3, r0, #32
 802e61e:	2b04      	cmp	r3, #4
 802e620:	f340 8085 	ble.w	802e72e <_dtoa_r+0x90e>
 802e624:	9b05      	ldr	r3, [sp, #20]
 802e626:	f1c0 001c 	rsb	r0, r0, #28
 802e62a:	4403      	add	r3, r0
 802e62c:	9305      	str	r3, [sp, #20]
 802e62e:	9b06      	ldr	r3, [sp, #24]
 802e630:	4403      	add	r3, r0
 802e632:	4405      	add	r5, r0
 802e634:	9306      	str	r3, [sp, #24]
 802e636:	9b05      	ldr	r3, [sp, #20]
 802e638:	2b00      	cmp	r3, #0
 802e63a:	dd05      	ble.n	802e648 <_dtoa_r+0x828>
 802e63c:	4651      	mov	r1, sl
 802e63e:	461a      	mov	r2, r3
 802e640:	4620      	mov	r0, r4
 802e642:	f000 fc85 	bl	802ef50 <__lshift>
 802e646:	4682      	mov	sl, r0
 802e648:	9b06      	ldr	r3, [sp, #24]
 802e64a:	2b00      	cmp	r3, #0
 802e64c:	dd05      	ble.n	802e65a <_dtoa_r+0x83a>
 802e64e:	4631      	mov	r1, r6
 802e650:	461a      	mov	r2, r3
 802e652:	4620      	mov	r0, r4
 802e654:	f000 fc7c 	bl	802ef50 <__lshift>
 802e658:	4606      	mov	r6, r0
 802e65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e65c:	2b00      	cmp	r3, #0
 802e65e:	d072      	beq.n	802e746 <_dtoa_r+0x926>
 802e660:	4631      	mov	r1, r6
 802e662:	4650      	mov	r0, sl
 802e664:	f000 fce0 	bl	802f028 <__mcmp>
 802e668:	2800      	cmp	r0, #0
 802e66a:	da6c      	bge.n	802e746 <_dtoa_r+0x926>
 802e66c:	2300      	movs	r3, #0
 802e66e:	4651      	mov	r1, sl
 802e670:	220a      	movs	r2, #10
 802e672:	4620      	mov	r0, r4
 802e674:	f000 fa74 	bl	802eb60 <__multadd>
 802e678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e67a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e67e:	4682      	mov	sl, r0
 802e680:	2b00      	cmp	r3, #0
 802e682:	f000 81b0 	beq.w	802e9e6 <_dtoa_r+0xbc6>
 802e686:	2300      	movs	r3, #0
 802e688:	4639      	mov	r1, r7
 802e68a:	220a      	movs	r2, #10
 802e68c:	4620      	mov	r0, r4
 802e68e:	f000 fa67 	bl	802eb60 <__multadd>
 802e692:	9b01      	ldr	r3, [sp, #4]
 802e694:	2b00      	cmp	r3, #0
 802e696:	4607      	mov	r7, r0
 802e698:	f300 8096 	bgt.w	802e7c8 <_dtoa_r+0x9a8>
 802e69c:	9b07      	ldr	r3, [sp, #28]
 802e69e:	2b02      	cmp	r3, #2
 802e6a0:	dc59      	bgt.n	802e756 <_dtoa_r+0x936>
 802e6a2:	e091      	b.n	802e7c8 <_dtoa_r+0x9a8>
 802e6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e6a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802e6aa:	e758      	b.n	802e55e <_dtoa_r+0x73e>
 802e6ac:	9b04      	ldr	r3, [sp, #16]
 802e6ae:	1e5e      	subs	r6, r3, #1
 802e6b0:	9b08      	ldr	r3, [sp, #32]
 802e6b2:	42b3      	cmp	r3, r6
 802e6b4:	bfbf      	itttt	lt
 802e6b6:	9b08      	ldrlt	r3, [sp, #32]
 802e6b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802e6ba:	9608      	strlt	r6, [sp, #32]
 802e6bc:	1af3      	sublt	r3, r6, r3
 802e6be:	bfb4      	ite	lt
 802e6c0:	18d2      	addlt	r2, r2, r3
 802e6c2:	1b9e      	subge	r6, r3, r6
 802e6c4:	9b04      	ldr	r3, [sp, #16]
 802e6c6:	bfbc      	itt	lt
 802e6c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802e6ca:	2600      	movlt	r6, #0
 802e6cc:	2b00      	cmp	r3, #0
 802e6ce:	bfb7      	itett	lt
 802e6d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802e6d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802e6d8:	1a9d      	sublt	r5, r3, r2
 802e6da:	2300      	movlt	r3, #0
 802e6dc:	e741      	b.n	802e562 <_dtoa_r+0x742>
 802e6de:	9e08      	ldr	r6, [sp, #32]
 802e6e0:	9d05      	ldr	r5, [sp, #20]
 802e6e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802e6e4:	e748      	b.n	802e578 <_dtoa_r+0x758>
 802e6e6:	9a08      	ldr	r2, [sp, #32]
 802e6e8:	e770      	b.n	802e5cc <_dtoa_r+0x7ac>
 802e6ea:	9b07      	ldr	r3, [sp, #28]
 802e6ec:	2b01      	cmp	r3, #1
 802e6ee:	dc19      	bgt.n	802e724 <_dtoa_r+0x904>
 802e6f0:	9b02      	ldr	r3, [sp, #8]
 802e6f2:	b9bb      	cbnz	r3, 802e724 <_dtoa_r+0x904>
 802e6f4:	9b03      	ldr	r3, [sp, #12]
 802e6f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e6fa:	b99b      	cbnz	r3, 802e724 <_dtoa_r+0x904>
 802e6fc:	9b03      	ldr	r3, [sp, #12]
 802e6fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e702:	0d1b      	lsrs	r3, r3, #20
 802e704:	051b      	lsls	r3, r3, #20
 802e706:	b183      	cbz	r3, 802e72a <_dtoa_r+0x90a>
 802e708:	9b05      	ldr	r3, [sp, #20]
 802e70a:	3301      	adds	r3, #1
 802e70c:	9305      	str	r3, [sp, #20]
 802e70e:	9b06      	ldr	r3, [sp, #24]
 802e710:	3301      	adds	r3, #1
 802e712:	9306      	str	r3, [sp, #24]
 802e714:	f04f 0801 	mov.w	r8, #1
 802e718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e71a:	2b00      	cmp	r3, #0
 802e71c:	f47f af6f 	bne.w	802e5fe <_dtoa_r+0x7de>
 802e720:	2001      	movs	r0, #1
 802e722:	e774      	b.n	802e60e <_dtoa_r+0x7ee>
 802e724:	f04f 0800 	mov.w	r8, #0
 802e728:	e7f6      	b.n	802e718 <_dtoa_r+0x8f8>
 802e72a:	4698      	mov	r8, r3
 802e72c:	e7f4      	b.n	802e718 <_dtoa_r+0x8f8>
 802e72e:	d082      	beq.n	802e636 <_dtoa_r+0x816>
 802e730:	9a05      	ldr	r2, [sp, #20]
 802e732:	331c      	adds	r3, #28
 802e734:	441a      	add	r2, r3
 802e736:	9205      	str	r2, [sp, #20]
 802e738:	9a06      	ldr	r2, [sp, #24]
 802e73a:	441a      	add	r2, r3
 802e73c:	441d      	add	r5, r3
 802e73e:	9206      	str	r2, [sp, #24]
 802e740:	e779      	b.n	802e636 <_dtoa_r+0x816>
 802e742:	4603      	mov	r3, r0
 802e744:	e7f4      	b.n	802e730 <_dtoa_r+0x910>
 802e746:	9b04      	ldr	r3, [sp, #16]
 802e748:	2b00      	cmp	r3, #0
 802e74a:	dc37      	bgt.n	802e7bc <_dtoa_r+0x99c>
 802e74c:	9b07      	ldr	r3, [sp, #28]
 802e74e:	2b02      	cmp	r3, #2
 802e750:	dd34      	ble.n	802e7bc <_dtoa_r+0x99c>
 802e752:	9b04      	ldr	r3, [sp, #16]
 802e754:	9301      	str	r3, [sp, #4]
 802e756:	9b01      	ldr	r3, [sp, #4]
 802e758:	b963      	cbnz	r3, 802e774 <_dtoa_r+0x954>
 802e75a:	4631      	mov	r1, r6
 802e75c:	2205      	movs	r2, #5
 802e75e:	4620      	mov	r0, r4
 802e760:	f000 f9fe 	bl	802eb60 <__multadd>
 802e764:	4601      	mov	r1, r0
 802e766:	4606      	mov	r6, r0
 802e768:	4650      	mov	r0, sl
 802e76a:	f000 fc5d 	bl	802f028 <__mcmp>
 802e76e:	2800      	cmp	r0, #0
 802e770:	f73f adbb 	bgt.w	802e2ea <_dtoa_r+0x4ca>
 802e774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e776:	9d00      	ldr	r5, [sp, #0]
 802e778:	ea6f 0b03 	mvn.w	fp, r3
 802e77c:	f04f 0800 	mov.w	r8, #0
 802e780:	4631      	mov	r1, r6
 802e782:	4620      	mov	r0, r4
 802e784:	f000 f9ca 	bl	802eb1c <_Bfree>
 802e788:	2f00      	cmp	r7, #0
 802e78a:	f43f aeab 	beq.w	802e4e4 <_dtoa_r+0x6c4>
 802e78e:	f1b8 0f00 	cmp.w	r8, #0
 802e792:	d005      	beq.n	802e7a0 <_dtoa_r+0x980>
 802e794:	45b8      	cmp	r8, r7
 802e796:	d003      	beq.n	802e7a0 <_dtoa_r+0x980>
 802e798:	4641      	mov	r1, r8
 802e79a:	4620      	mov	r0, r4
 802e79c:	f000 f9be 	bl	802eb1c <_Bfree>
 802e7a0:	4639      	mov	r1, r7
 802e7a2:	4620      	mov	r0, r4
 802e7a4:	f000 f9ba 	bl	802eb1c <_Bfree>
 802e7a8:	e69c      	b.n	802e4e4 <_dtoa_r+0x6c4>
 802e7aa:	2600      	movs	r6, #0
 802e7ac:	4637      	mov	r7, r6
 802e7ae:	e7e1      	b.n	802e774 <_dtoa_r+0x954>
 802e7b0:	46bb      	mov	fp, r7
 802e7b2:	4637      	mov	r7, r6
 802e7b4:	e599      	b.n	802e2ea <_dtoa_r+0x4ca>
 802e7b6:	bf00      	nop
 802e7b8:	40240000 	.word	0x40240000
 802e7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e7be:	2b00      	cmp	r3, #0
 802e7c0:	f000 80c8 	beq.w	802e954 <_dtoa_r+0xb34>
 802e7c4:	9b04      	ldr	r3, [sp, #16]
 802e7c6:	9301      	str	r3, [sp, #4]
 802e7c8:	2d00      	cmp	r5, #0
 802e7ca:	dd05      	ble.n	802e7d8 <_dtoa_r+0x9b8>
 802e7cc:	4639      	mov	r1, r7
 802e7ce:	462a      	mov	r2, r5
 802e7d0:	4620      	mov	r0, r4
 802e7d2:	f000 fbbd 	bl	802ef50 <__lshift>
 802e7d6:	4607      	mov	r7, r0
 802e7d8:	f1b8 0f00 	cmp.w	r8, #0
 802e7dc:	d05b      	beq.n	802e896 <_dtoa_r+0xa76>
 802e7de:	6879      	ldr	r1, [r7, #4]
 802e7e0:	4620      	mov	r0, r4
 802e7e2:	f000 f95b 	bl	802ea9c <_Balloc>
 802e7e6:	4605      	mov	r5, r0
 802e7e8:	b928      	cbnz	r0, 802e7f6 <_dtoa_r+0x9d6>
 802e7ea:	4b83      	ldr	r3, [pc, #524]	; (802e9f8 <_dtoa_r+0xbd8>)
 802e7ec:	4602      	mov	r2, r0
 802e7ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 802e7f2:	f7ff bb2e 	b.w	802de52 <_dtoa_r+0x32>
 802e7f6:	693a      	ldr	r2, [r7, #16]
 802e7f8:	3202      	adds	r2, #2
 802e7fa:	0092      	lsls	r2, r2, #2
 802e7fc:	f107 010c 	add.w	r1, r7, #12
 802e800:	300c      	adds	r0, #12
 802e802:	f7ff fa68 	bl	802dcd6 <memcpy>
 802e806:	2201      	movs	r2, #1
 802e808:	4629      	mov	r1, r5
 802e80a:	4620      	mov	r0, r4
 802e80c:	f000 fba0 	bl	802ef50 <__lshift>
 802e810:	9b00      	ldr	r3, [sp, #0]
 802e812:	3301      	adds	r3, #1
 802e814:	9304      	str	r3, [sp, #16]
 802e816:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e81a:	4413      	add	r3, r2
 802e81c:	9308      	str	r3, [sp, #32]
 802e81e:	9b02      	ldr	r3, [sp, #8]
 802e820:	f003 0301 	and.w	r3, r3, #1
 802e824:	46b8      	mov	r8, r7
 802e826:	9306      	str	r3, [sp, #24]
 802e828:	4607      	mov	r7, r0
 802e82a:	9b04      	ldr	r3, [sp, #16]
 802e82c:	4631      	mov	r1, r6
 802e82e:	3b01      	subs	r3, #1
 802e830:	4650      	mov	r0, sl
 802e832:	9301      	str	r3, [sp, #4]
 802e834:	f7ff fa6b 	bl	802dd0e <quorem>
 802e838:	4641      	mov	r1, r8
 802e83a:	9002      	str	r0, [sp, #8]
 802e83c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e840:	4650      	mov	r0, sl
 802e842:	f000 fbf1 	bl	802f028 <__mcmp>
 802e846:	463a      	mov	r2, r7
 802e848:	9005      	str	r0, [sp, #20]
 802e84a:	4631      	mov	r1, r6
 802e84c:	4620      	mov	r0, r4
 802e84e:	f000 fc07 	bl	802f060 <__mdiff>
 802e852:	68c2      	ldr	r2, [r0, #12]
 802e854:	4605      	mov	r5, r0
 802e856:	bb02      	cbnz	r2, 802e89a <_dtoa_r+0xa7a>
 802e858:	4601      	mov	r1, r0
 802e85a:	4650      	mov	r0, sl
 802e85c:	f000 fbe4 	bl	802f028 <__mcmp>
 802e860:	4602      	mov	r2, r0
 802e862:	4629      	mov	r1, r5
 802e864:	4620      	mov	r0, r4
 802e866:	9209      	str	r2, [sp, #36]	; 0x24
 802e868:	f000 f958 	bl	802eb1c <_Bfree>
 802e86c:	9b07      	ldr	r3, [sp, #28]
 802e86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e870:	9d04      	ldr	r5, [sp, #16]
 802e872:	ea43 0102 	orr.w	r1, r3, r2
 802e876:	9b06      	ldr	r3, [sp, #24]
 802e878:	4319      	orrs	r1, r3
 802e87a:	d110      	bne.n	802e89e <_dtoa_r+0xa7e>
 802e87c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e880:	d029      	beq.n	802e8d6 <_dtoa_r+0xab6>
 802e882:	9b05      	ldr	r3, [sp, #20]
 802e884:	2b00      	cmp	r3, #0
 802e886:	dd02      	ble.n	802e88e <_dtoa_r+0xa6e>
 802e888:	9b02      	ldr	r3, [sp, #8]
 802e88a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802e88e:	9b01      	ldr	r3, [sp, #4]
 802e890:	f883 9000 	strb.w	r9, [r3]
 802e894:	e774      	b.n	802e780 <_dtoa_r+0x960>
 802e896:	4638      	mov	r0, r7
 802e898:	e7ba      	b.n	802e810 <_dtoa_r+0x9f0>
 802e89a:	2201      	movs	r2, #1
 802e89c:	e7e1      	b.n	802e862 <_dtoa_r+0xa42>
 802e89e:	9b05      	ldr	r3, [sp, #20]
 802e8a0:	2b00      	cmp	r3, #0
 802e8a2:	db04      	blt.n	802e8ae <_dtoa_r+0xa8e>
 802e8a4:	9907      	ldr	r1, [sp, #28]
 802e8a6:	430b      	orrs	r3, r1
 802e8a8:	9906      	ldr	r1, [sp, #24]
 802e8aa:	430b      	orrs	r3, r1
 802e8ac:	d120      	bne.n	802e8f0 <_dtoa_r+0xad0>
 802e8ae:	2a00      	cmp	r2, #0
 802e8b0:	dded      	ble.n	802e88e <_dtoa_r+0xa6e>
 802e8b2:	4651      	mov	r1, sl
 802e8b4:	2201      	movs	r2, #1
 802e8b6:	4620      	mov	r0, r4
 802e8b8:	f000 fb4a 	bl	802ef50 <__lshift>
 802e8bc:	4631      	mov	r1, r6
 802e8be:	4682      	mov	sl, r0
 802e8c0:	f000 fbb2 	bl	802f028 <__mcmp>
 802e8c4:	2800      	cmp	r0, #0
 802e8c6:	dc03      	bgt.n	802e8d0 <_dtoa_r+0xab0>
 802e8c8:	d1e1      	bne.n	802e88e <_dtoa_r+0xa6e>
 802e8ca:	f019 0f01 	tst.w	r9, #1
 802e8ce:	d0de      	beq.n	802e88e <_dtoa_r+0xa6e>
 802e8d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e8d4:	d1d8      	bne.n	802e888 <_dtoa_r+0xa68>
 802e8d6:	9a01      	ldr	r2, [sp, #4]
 802e8d8:	2339      	movs	r3, #57	; 0x39
 802e8da:	7013      	strb	r3, [r2, #0]
 802e8dc:	462b      	mov	r3, r5
 802e8de:	461d      	mov	r5, r3
 802e8e0:	3b01      	subs	r3, #1
 802e8e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802e8e6:	2a39      	cmp	r2, #57	; 0x39
 802e8e8:	d06c      	beq.n	802e9c4 <_dtoa_r+0xba4>
 802e8ea:	3201      	adds	r2, #1
 802e8ec:	701a      	strb	r2, [r3, #0]
 802e8ee:	e747      	b.n	802e780 <_dtoa_r+0x960>
 802e8f0:	2a00      	cmp	r2, #0
 802e8f2:	dd07      	ble.n	802e904 <_dtoa_r+0xae4>
 802e8f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e8f8:	d0ed      	beq.n	802e8d6 <_dtoa_r+0xab6>
 802e8fa:	9a01      	ldr	r2, [sp, #4]
 802e8fc:	f109 0301 	add.w	r3, r9, #1
 802e900:	7013      	strb	r3, [r2, #0]
 802e902:	e73d      	b.n	802e780 <_dtoa_r+0x960>
 802e904:	9b04      	ldr	r3, [sp, #16]
 802e906:	9a08      	ldr	r2, [sp, #32]
 802e908:	f803 9c01 	strb.w	r9, [r3, #-1]
 802e90c:	4293      	cmp	r3, r2
 802e90e:	d043      	beq.n	802e998 <_dtoa_r+0xb78>
 802e910:	4651      	mov	r1, sl
 802e912:	2300      	movs	r3, #0
 802e914:	220a      	movs	r2, #10
 802e916:	4620      	mov	r0, r4
 802e918:	f000 f922 	bl	802eb60 <__multadd>
 802e91c:	45b8      	cmp	r8, r7
 802e91e:	4682      	mov	sl, r0
 802e920:	f04f 0300 	mov.w	r3, #0
 802e924:	f04f 020a 	mov.w	r2, #10
 802e928:	4641      	mov	r1, r8
 802e92a:	4620      	mov	r0, r4
 802e92c:	d107      	bne.n	802e93e <_dtoa_r+0xb1e>
 802e92e:	f000 f917 	bl	802eb60 <__multadd>
 802e932:	4680      	mov	r8, r0
 802e934:	4607      	mov	r7, r0
 802e936:	9b04      	ldr	r3, [sp, #16]
 802e938:	3301      	adds	r3, #1
 802e93a:	9304      	str	r3, [sp, #16]
 802e93c:	e775      	b.n	802e82a <_dtoa_r+0xa0a>
 802e93e:	f000 f90f 	bl	802eb60 <__multadd>
 802e942:	4639      	mov	r1, r7
 802e944:	4680      	mov	r8, r0
 802e946:	2300      	movs	r3, #0
 802e948:	220a      	movs	r2, #10
 802e94a:	4620      	mov	r0, r4
 802e94c:	f000 f908 	bl	802eb60 <__multadd>
 802e950:	4607      	mov	r7, r0
 802e952:	e7f0      	b.n	802e936 <_dtoa_r+0xb16>
 802e954:	9b04      	ldr	r3, [sp, #16]
 802e956:	9301      	str	r3, [sp, #4]
 802e958:	9d00      	ldr	r5, [sp, #0]
 802e95a:	4631      	mov	r1, r6
 802e95c:	4650      	mov	r0, sl
 802e95e:	f7ff f9d6 	bl	802dd0e <quorem>
 802e962:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e966:	9b00      	ldr	r3, [sp, #0]
 802e968:	f805 9b01 	strb.w	r9, [r5], #1
 802e96c:	1aea      	subs	r2, r5, r3
 802e96e:	9b01      	ldr	r3, [sp, #4]
 802e970:	4293      	cmp	r3, r2
 802e972:	dd07      	ble.n	802e984 <_dtoa_r+0xb64>
 802e974:	4651      	mov	r1, sl
 802e976:	2300      	movs	r3, #0
 802e978:	220a      	movs	r2, #10
 802e97a:	4620      	mov	r0, r4
 802e97c:	f000 f8f0 	bl	802eb60 <__multadd>
 802e980:	4682      	mov	sl, r0
 802e982:	e7ea      	b.n	802e95a <_dtoa_r+0xb3a>
 802e984:	9b01      	ldr	r3, [sp, #4]
 802e986:	2b00      	cmp	r3, #0
 802e988:	bfc8      	it	gt
 802e98a:	461d      	movgt	r5, r3
 802e98c:	9b00      	ldr	r3, [sp, #0]
 802e98e:	bfd8      	it	le
 802e990:	2501      	movle	r5, #1
 802e992:	441d      	add	r5, r3
 802e994:	f04f 0800 	mov.w	r8, #0
 802e998:	4651      	mov	r1, sl
 802e99a:	2201      	movs	r2, #1
 802e99c:	4620      	mov	r0, r4
 802e99e:	f000 fad7 	bl	802ef50 <__lshift>
 802e9a2:	4631      	mov	r1, r6
 802e9a4:	4682      	mov	sl, r0
 802e9a6:	f000 fb3f 	bl	802f028 <__mcmp>
 802e9aa:	2800      	cmp	r0, #0
 802e9ac:	dc96      	bgt.n	802e8dc <_dtoa_r+0xabc>
 802e9ae:	d102      	bne.n	802e9b6 <_dtoa_r+0xb96>
 802e9b0:	f019 0f01 	tst.w	r9, #1
 802e9b4:	d192      	bne.n	802e8dc <_dtoa_r+0xabc>
 802e9b6:	462b      	mov	r3, r5
 802e9b8:	461d      	mov	r5, r3
 802e9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e9be:	2a30      	cmp	r2, #48	; 0x30
 802e9c0:	d0fa      	beq.n	802e9b8 <_dtoa_r+0xb98>
 802e9c2:	e6dd      	b.n	802e780 <_dtoa_r+0x960>
 802e9c4:	9a00      	ldr	r2, [sp, #0]
 802e9c6:	429a      	cmp	r2, r3
 802e9c8:	d189      	bne.n	802e8de <_dtoa_r+0xabe>
 802e9ca:	f10b 0b01 	add.w	fp, fp, #1
 802e9ce:	2331      	movs	r3, #49	; 0x31
 802e9d0:	e796      	b.n	802e900 <_dtoa_r+0xae0>
 802e9d2:	4b0a      	ldr	r3, [pc, #40]	; (802e9fc <_dtoa_r+0xbdc>)
 802e9d4:	f7ff ba99 	b.w	802df0a <_dtoa_r+0xea>
 802e9d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e9da:	2b00      	cmp	r3, #0
 802e9dc:	f47f aa6d 	bne.w	802deba <_dtoa_r+0x9a>
 802e9e0:	4b07      	ldr	r3, [pc, #28]	; (802ea00 <_dtoa_r+0xbe0>)
 802e9e2:	f7ff ba92 	b.w	802df0a <_dtoa_r+0xea>
 802e9e6:	9b01      	ldr	r3, [sp, #4]
 802e9e8:	2b00      	cmp	r3, #0
 802e9ea:	dcb5      	bgt.n	802e958 <_dtoa_r+0xb38>
 802e9ec:	9b07      	ldr	r3, [sp, #28]
 802e9ee:	2b02      	cmp	r3, #2
 802e9f0:	f73f aeb1 	bgt.w	802e756 <_dtoa_r+0x936>
 802e9f4:	e7b0      	b.n	802e958 <_dtoa_r+0xb38>
 802e9f6:	bf00      	nop
 802e9f8:	08034cad 	.word	0x08034cad
 802e9fc:	08034f90 	.word	0x08034f90
 802ea00:	08034c48 	.word	0x08034c48

0802ea04 <_free_r>:
 802ea04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ea06:	2900      	cmp	r1, #0
 802ea08:	d044      	beq.n	802ea94 <_free_r+0x90>
 802ea0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ea0e:	9001      	str	r0, [sp, #4]
 802ea10:	2b00      	cmp	r3, #0
 802ea12:	f1a1 0404 	sub.w	r4, r1, #4
 802ea16:	bfb8      	it	lt
 802ea18:	18e4      	addlt	r4, r4, r3
 802ea1a:	f7fd fe9b 	bl	802c754 <__malloc_lock>
 802ea1e:	4a1e      	ldr	r2, [pc, #120]	; (802ea98 <_free_r+0x94>)
 802ea20:	9801      	ldr	r0, [sp, #4]
 802ea22:	6813      	ldr	r3, [r2, #0]
 802ea24:	b933      	cbnz	r3, 802ea34 <_free_r+0x30>
 802ea26:	6063      	str	r3, [r4, #4]
 802ea28:	6014      	str	r4, [r2, #0]
 802ea2a:	b003      	add	sp, #12
 802ea2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ea30:	f7fd be96 	b.w	802c760 <__malloc_unlock>
 802ea34:	42a3      	cmp	r3, r4
 802ea36:	d908      	bls.n	802ea4a <_free_r+0x46>
 802ea38:	6825      	ldr	r5, [r4, #0]
 802ea3a:	1961      	adds	r1, r4, r5
 802ea3c:	428b      	cmp	r3, r1
 802ea3e:	bf01      	itttt	eq
 802ea40:	6819      	ldreq	r1, [r3, #0]
 802ea42:	685b      	ldreq	r3, [r3, #4]
 802ea44:	1949      	addeq	r1, r1, r5
 802ea46:	6021      	streq	r1, [r4, #0]
 802ea48:	e7ed      	b.n	802ea26 <_free_r+0x22>
 802ea4a:	461a      	mov	r2, r3
 802ea4c:	685b      	ldr	r3, [r3, #4]
 802ea4e:	b10b      	cbz	r3, 802ea54 <_free_r+0x50>
 802ea50:	42a3      	cmp	r3, r4
 802ea52:	d9fa      	bls.n	802ea4a <_free_r+0x46>
 802ea54:	6811      	ldr	r1, [r2, #0]
 802ea56:	1855      	adds	r5, r2, r1
 802ea58:	42a5      	cmp	r5, r4
 802ea5a:	d10b      	bne.n	802ea74 <_free_r+0x70>
 802ea5c:	6824      	ldr	r4, [r4, #0]
 802ea5e:	4421      	add	r1, r4
 802ea60:	1854      	adds	r4, r2, r1
 802ea62:	42a3      	cmp	r3, r4
 802ea64:	6011      	str	r1, [r2, #0]
 802ea66:	d1e0      	bne.n	802ea2a <_free_r+0x26>
 802ea68:	681c      	ldr	r4, [r3, #0]
 802ea6a:	685b      	ldr	r3, [r3, #4]
 802ea6c:	6053      	str	r3, [r2, #4]
 802ea6e:	440c      	add	r4, r1
 802ea70:	6014      	str	r4, [r2, #0]
 802ea72:	e7da      	b.n	802ea2a <_free_r+0x26>
 802ea74:	d902      	bls.n	802ea7c <_free_r+0x78>
 802ea76:	230c      	movs	r3, #12
 802ea78:	6003      	str	r3, [r0, #0]
 802ea7a:	e7d6      	b.n	802ea2a <_free_r+0x26>
 802ea7c:	6825      	ldr	r5, [r4, #0]
 802ea7e:	1961      	adds	r1, r4, r5
 802ea80:	428b      	cmp	r3, r1
 802ea82:	bf04      	itt	eq
 802ea84:	6819      	ldreq	r1, [r3, #0]
 802ea86:	685b      	ldreq	r3, [r3, #4]
 802ea88:	6063      	str	r3, [r4, #4]
 802ea8a:	bf04      	itt	eq
 802ea8c:	1949      	addeq	r1, r1, r5
 802ea8e:	6021      	streq	r1, [r4, #0]
 802ea90:	6054      	str	r4, [r2, #4]
 802ea92:	e7ca      	b.n	802ea2a <_free_r+0x26>
 802ea94:	b003      	add	sp, #12
 802ea96:	bd30      	pop	{r4, r5, pc}
 802ea98:	2000d9c8 	.word	0x2000d9c8

0802ea9c <_Balloc>:
 802ea9c:	b570      	push	{r4, r5, r6, lr}
 802ea9e:	69c6      	ldr	r6, [r0, #28]
 802eaa0:	4604      	mov	r4, r0
 802eaa2:	460d      	mov	r5, r1
 802eaa4:	b976      	cbnz	r6, 802eac4 <_Balloc+0x28>
 802eaa6:	2010      	movs	r0, #16
 802eaa8:	f7fd fda4 	bl	802c5f4 <malloc>
 802eaac:	4602      	mov	r2, r0
 802eaae:	61e0      	str	r0, [r4, #28]
 802eab0:	b920      	cbnz	r0, 802eabc <_Balloc+0x20>
 802eab2:	4b18      	ldr	r3, [pc, #96]	; (802eb14 <_Balloc+0x78>)
 802eab4:	4818      	ldr	r0, [pc, #96]	; (802eb18 <_Balloc+0x7c>)
 802eab6:	216b      	movs	r1, #107	; 0x6b
 802eab8:	f7fd fd68 	bl	802c58c <__assert_func>
 802eabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802eac0:	6006      	str	r6, [r0, #0]
 802eac2:	60c6      	str	r6, [r0, #12]
 802eac4:	69e6      	ldr	r6, [r4, #28]
 802eac6:	68f3      	ldr	r3, [r6, #12]
 802eac8:	b183      	cbz	r3, 802eaec <_Balloc+0x50>
 802eaca:	69e3      	ldr	r3, [r4, #28]
 802eacc:	68db      	ldr	r3, [r3, #12]
 802eace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802ead2:	b9b8      	cbnz	r0, 802eb04 <_Balloc+0x68>
 802ead4:	2101      	movs	r1, #1
 802ead6:	fa01 f605 	lsl.w	r6, r1, r5
 802eada:	1d72      	adds	r2, r6, #5
 802eadc:	0092      	lsls	r2, r2, #2
 802eade:	4620      	mov	r0, r4
 802eae0:	f7fd fd72 	bl	802c5c8 <_calloc_r>
 802eae4:	b160      	cbz	r0, 802eb00 <_Balloc+0x64>
 802eae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802eaea:	e00e      	b.n	802eb0a <_Balloc+0x6e>
 802eaec:	2221      	movs	r2, #33	; 0x21
 802eaee:	2104      	movs	r1, #4
 802eaf0:	4620      	mov	r0, r4
 802eaf2:	f7fd fd69 	bl	802c5c8 <_calloc_r>
 802eaf6:	69e3      	ldr	r3, [r4, #28]
 802eaf8:	60f0      	str	r0, [r6, #12]
 802eafa:	68db      	ldr	r3, [r3, #12]
 802eafc:	2b00      	cmp	r3, #0
 802eafe:	d1e4      	bne.n	802eaca <_Balloc+0x2e>
 802eb00:	2000      	movs	r0, #0
 802eb02:	bd70      	pop	{r4, r5, r6, pc}
 802eb04:	6802      	ldr	r2, [r0, #0]
 802eb06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802eb0a:	2300      	movs	r3, #0
 802eb0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802eb10:	e7f7      	b.n	802eb02 <_Balloc+0x66>
 802eb12:	bf00      	nop
 802eb14:	08034bd7 	.word	0x08034bd7
 802eb18:	08034cbe 	.word	0x08034cbe

0802eb1c <_Bfree>:
 802eb1c:	b570      	push	{r4, r5, r6, lr}
 802eb1e:	69c6      	ldr	r6, [r0, #28]
 802eb20:	4605      	mov	r5, r0
 802eb22:	460c      	mov	r4, r1
 802eb24:	b976      	cbnz	r6, 802eb44 <_Bfree+0x28>
 802eb26:	2010      	movs	r0, #16
 802eb28:	f7fd fd64 	bl	802c5f4 <malloc>
 802eb2c:	4602      	mov	r2, r0
 802eb2e:	61e8      	str	r0, [r5, #28]
 802eb30:	b920      	cbnz	r0, 802eb3c <_Bfree+0x20>
 802eb32:	4b09      	ldr	r3, [pc, #36]	; (802eb58 <_Bfree+0x3c>)
 802eb34:	4809      	ldr	r0, [pc, #36]	; (802eb5c <_Bfree+0x40>)
 802eb36:	218f      	movs	r1, #143	; 0x8f
 802eb38:	f7fd fd28 	bl	802c58c <__assert_func>
 802eb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802eb40:	6006      	str	r6, [r0, #0]
 802eb42:	60c6      	str	r6, [r0, #12]
 802eb44:	b13c      	cbz	r4, 802eb56 <_Bfree+0x3a>
 802eb46:	69eb      	ldr	r3, [r5, #28]
 802eb48:	6862      	ldr	r2, [r4, #4]
 802eb4a:	68db      	ldr	r3, [r3, #12]
 802eb4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802eb50:	6021      	str	r1, [r4, #0]
 802eb52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802eb56:	bd70      	pop	{r4, r5, r6, pc}
 802eb58:	08034bd7 	.word	0x08034bd7
 802eb5c:	08034cbe 	.word	0x08034cbe

0802eb60 <__multadd>:
 802eb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802eb64:	690d      	ldr	r5, [r1, #16]
 802eb66:	4607      	mov	r7, r0
 802eb68:	460c      	mov	r4, r1
 802eb6a:	461e      	mov	r6, r3
 802eb6c:	f101 0c14 	add.w	ip, r1, #20
 802eb70:	2000      	movs	r0, #0
 802eb72:	f8dc 3000 	ldr.w	r3, [ip]
 802eb76:	b299      	uxth	r1, r3
 802eb78:	fb02 6101 	mla	r1, r2, r1, r6
 802eb7c:	0c1e      	lsrs	r6, r3, #16
 802eb7e:	0c0b      	lsrs	r3, r1, #16
 802eb80:	fb02 3306 	mla	r3, r2, r6, r3
 802eb84:	b289      	uxth	r1, r1
 802eb86:	3001      	adds	r0, #1
 802eb88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802eb8c:	4285      	cmp	r5, r0
 802eb8e:	f84c 1b04 	str.w	r1, [ip], #4
 802eb92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802eb96:	dcec      	bgt.n	802eb72 <__multadd+0x12>
 802eb98:	b30e      	cbz	r6, 802ebde <__multadd+0x7e>
 802eb9a:	68a3      	ldr	r3, [r4, #8]
 802eb9c:	42ab      	cmp	r3, r5
 802eb9e:	dc19      	bgt.n	802ebd4 <__multadd+0x74>
 802eba0:	6861      	ldr	r1, [r4, #4]
 802eba2:	4638      	mov	r0, r7
 802eba4:	3101      	adds	r1, #1
 802eba6:	f7ff ff79 	bl	802ea9c <_Balloc>
 802ebaa:	4680      	mov	r8, r0
 802ebac:	b928      	cbnz	r0, 802ebba <__multadd+0x5a>
 802ebae:	4602      	mov	r2, r0
 802ebb0:	4b0c      	ldr	r3, [pc, #48]	; (802ebe4 <__multadd+0x84>)
 802ebb2:	480d      	ldr	r0, [pc, #52]	; (802ebe8 <__multadd+0x88>)
 802ebb4:	21ba      	movs	r1, #186	; 0xba
 802ebb6:	f7fd fce9 	bl	802c58c <__assert_func>
 802ebba:	6922      	ldr	r2, [r4, #16]
 802ebbc:	3202      	adds	r2, #2
 802ebbe:	f104 010c 	add.w	r1, r4, #12
 802ebc2:	0092      	lsls	r2, r2, #2
 802ebc4:	300c      	adds	r0, #12
 802ebc6:	f7ff f886 	bl	802dcd6 <memcpy>
 802ebca:	4621      	mov	r1, r4
 802ebcc:	4638      	mov	r0, r7
 802ebce:	f7ff ffa5 	bl	802eb1c <_Bfree>
 802ebd2:	4644      	mov	r4, r8
 802ebd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802ebd8:	3501      	adds	r5, #1
 802ebda:	615e      	str	r6, [r3, #20]
 802ebdc:	6125      	str	r5, [r4, #16]
 802ebde:	4620      	mov	r0, r4
 802ebe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ebe4:	08034cad 	.word	0x08034cad
 802ebe8:	08034cbe 	.word	0x08034cbe

0802ebec <__s2b>:
 802ebec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ebf0:	460c      	mov	r4, r1
 802ebf2:	4615      	mov	r5, r2
 802ebf4:	461f      	mov	r7, r3
 802ebf6:	2209      	movs	r2, #9
 802ebf8:	3308      	adds	r3, #8
 802ebfa:	4606      	mov	r6, r0
 802ebfc:	fb93 f3f2 	sdiv	r3, r3, r2
 802ec00:	2100      	movs	r1, #0
 802ec02:	2201      	movs	r2, #1
 802ec04:	429a      	cmp	r2, r3
 802ec06:	db09      	blt.n	802ec1c <__s2b+0x30>
 802ec08:	4630      	mov	r0, r6
 802ec0a:	f7ff ff47 	bl	802ea9c <_Balloc>
 802ec0e:	b940      	cbnz	r0, 802ec22 <__s2b+0x36>
 802ec10:	4602      	mov	r2, r0
 802ec12:	4b19      	ldr	r3, [pc, #100]	; (802ec78 <__s2b+0x8c>)
 802ec14:	4819      	ldr	r0, [pc, #100]	; (802ec7c <__s2b+0x90>)
 802ec16:	21d3      	movs	r1, #211	; 0xd3
 802ec18:	f7fd fcb8 	bl	802c58c <__assert_func>
 802ec1c:	0052      	lsls	r2, r2, #1
 802ec1e:	3101      	adds	r1, #1
 802ec20:	e7f0      	b.n	802ec04 <__s2b+0x18>
 802ec22:	9b08      	ldr	r3, [sp, #32]
 802ec24:	6143      	str	r3, [r0, #20]
 802ec26:	2d09      	cmp	r5, #9
 802ec28:	f04f 0301 	mov.w	r3, #1
 802ec2c:	6103      	str	r3, [r0, #16]
 802ec2e:	dd16      	ble.n	802ec5e <__s2b+0x72>
 802ec30:	f104 0909 	add.w	r9, r4, #9
 802ec34:	46c8      	mov	r8, r9
 802ec36:	442c      	add	r4, r5
 802ec38:	f818 3b01 	ldrb.w	r3, [r8], #1
 802ec3c:	4601      	mov	r1, r0
 802ec3e:	3b30      	subs	r3, #48	; 0x30
 802ec40:	220a      	movs	r2, #10
 802ec42:	4630      	mov	r0, r6
 802ec44:	f7ff ff8c 	bl	802eb60 <__multadd>
 802ec48:	45a0      	cmp	r8, r4
 802ec4a:	d1f5      	bne.n	802ec38 <__s2b+0x4c>
 802ec4c:	f1a5 0408 	sub.w	r4, r5, #8
 802ec50:	444c      	add	r4, r9
 802ec52:	1b2d      	subs	r5, r5, r4
 802ec54:	1963      	adds	r3, r4, r5
 802ec56:	42bb      	cmp	r3, r7
 802ec58:	db04      	blt.n	802ec64 <__s2b+0x78>
 802ec5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ec5e:	340a      	adds	r4, #10
 802ec60:	2509      	movs	r5, #9
 802ec62:	e7f6      	b.n	802ec52 <__s2b+0x66>
 802ec64:	f814 3b01 	ldrb.w	r3, [r4], #1
 802ec68:	4601      	mov	r1, r0
 802ec6a:	3b30      	subs	r3, #48	; 0x30
 802ec6c:	220a      	movs	r2, #10
 802ec6e:	4630      	mov	r0, r6
 802ec70:	f7ff ff76 	bl	802eb60 <__multadd>
 802ec74:	e7ee      	b.n	802ec54 <__s2b+0x68>
 802ec76:	bf00      	nop
 802ec78:	08034cad 	.word	0x08034cad
 802ec7c:	08034cbe 	.word	0x08034cbe

0802ec80 <__hi0bits>:
 802ec80:	0c03      	lsrs	r3, r0, #16
 802ec82:	041b      	lsls	r3, r3, #16
 802ec84:	b9d3      	cbnz	r3, 802ecbc <__hi0bits+0x3c>
 802ec86:	0400      	lsls	r0, r0, #16
 802ec88:	2310      	movs	r3, #16
 802ec8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802ec8e:	bf04      	itt	eq
 802ec90:	0200      	lsleq	r0, r0, #8
 802ec92:	3308      	addeq	r3, #8
 802ec94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802ec98:	bf04      	itt	eq
 802ec9a:	0100      	lsleq	r0, r0, #4
 802ec9c:	3304      	addeq	r3, #4
 802ec9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802eca2:	bf04      	itt	eq
 802eca4:	0080      	lsleq	r0, r0, #2
 802eca6:	3302      	addeq	r3, #2
 802eca8:	2800      	cmp	r0, #0
 802ecaa:	db05      	blt.n	802ecb8 <__hi0bits+0x38>
 802ecac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802ecb0:	f103 0301 	add.w	r3, r3, #1
 802ecb4:	bf08      	it	eq
 802ecb6:	2320      	moveq	r3, #32
 802ecb8:	4618      	mov	r0, r3
 802ecba:	4770      	bx	lr
 802ecbc:	2300      	movs	r3, #0
 802ecbe:	e7e4      	b.n	802ec8a <__hi0bits+0xa>

0802ecc0 <__lo0bits>:
 802ecc0:	6803      	ldr	r3, [r0, #0]
 802ecc2:	f013 0207 	ands.w	r2, r3, #7
 802ecc6:	d00c      	beq.n	802ece2 <__lo0bits+0x22>
 802ecc8:	07d9      	lsls	r1, r3, #31
 802ecca:	d422      	bmi.n	802ed12 <__lo0bits+0x52>
 802eccc:	079a      	lsls	r2, r3, #30
 802ecce:	bf49      	itett	mi
 802ecd0:	085b      	lsrmi	r3, r3, #1
 802ecd2:	089b      	lsrpl	r3, r3, #2
 802ecd4:	6003      	strmi	r3, [r0, #0]
 802ecd6:	2201      	movmi	r2, #1
 802ecd8:	bf5c      	itt	pl
 802ecda:	6003      	strpl	r3, [r0, #0]
 802ecdc:	2202      	movpl	r2, #2
 802ecde:	4610      	mov	r0, r2
 802ece0:	4770      	bx	lr
 802ece2:	b299      	uxth	r1, r3
 802ece4:	b909      	cbnz	r1, 802ecea <__lo0bits+0x2a>
 802ece6:	0c1b      	lsrs	r3, r3, #16
 802ece8:	2210      	movs	r2, #16
 802ecea:	b2d9      	uxtb	r1, r3
 802ecec:	b909      	cbnz	r1, 802ecf2 <__lo0bits+0x32>
 802ecee:	3208      	adds	r2, #8
 802ecf0:	0a1b      	lsrs	r3, r3, #8
 802ecf2:	0719      	lsls	r1, r3, #28
 802ecf4:	bf04      	itt	eq
 802ecf6:	091b      	lsreq	r3, r3, #4
 802ecf8:	3204      	addeq	r2, #4
 802ecfa:	0799      	lsls	r1, r3, #30
 802ecfc:	bf04      	itt	eq
 802ecfe:	089b      	lsreq	r3, r3, #2
 802ed00:	3202      	addeq	r2, #2
 802ed02:	07d9      	lsls	r1, r3, #31
 802ed04:	d403      	bmi.n	802ed0e <__lo0bits+0x4e>
 802ed06:	085b      	lsrs	r3, r3, #1
 802ed08:	f102 0201 	add.w	r2, r2, #1
 802ed0c:	d003      	beq.n	802ed16 <__lo0bits+0x56>
 802ed0e:	6003      	str	r3, [r0, #0]
 802ed10:	e7e5      	b.n	802ecde <__lo0bits+0x1e>
 802ed12:	2200      	movs	r2, #0
 802ed14:	e7e3      	b.n	802ecde <__lo0bits+0x1e>
 802ed16:	2220      	movs	r2, #32
 802ed18:	e7e1      	b.n	802ecde <__lo0bits+0x1e>
	...

0802ed1c <__i2b>:
 802ed1c:	b510      	push	{r4, lr}
 802ed1e:	460c      	mov	r4, r1
 802ed20:	2101      	movs	r1, #1
 802ed22:	f7ff febb 	bl	802ea9c <_Balloc>
 802ed26:	4602      	mov	r2, r0
 802ed28:	b928      	cbnz	r0, 802ed36 <__i2b+0x1a>
 802ed2a:	4b05      	ldr	r3, [pc, #20]	; (802ed40 <__i2b+0x24>)
 802ed2c:	4805      	ldr	r0, [pc, #20]	; (802ed44 <__i2b+0x28>)
 802ed2e:	f240 1145 	movw	r1, #325	; 0x145
 802ed32:	f7fd fc2b 	bl	802c58c <__assert_func>
 802ed36:	2301      	movs	r3, #1
 802ed38:	6144      	str	r4, [r0, #20]
 802ed3a:	6103      	str	r3, [r0, #16]
 802ed3c:	bd10      	pop	{r4, pc}
 802ed3e:	bf00      	nop
 802ed40:	08034cad 	.word	0x08034cad
 802ed44:	08034cbe 	.word	0x08034cbe

0802ed48 <__multiply>:
 802ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed4c:	4691      	mov	r9, r2
 802ed4e:	690a      	ldr	r2, [r1, #16]
 802ed50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802ed54:	429a      	cmp	r2, r3
 802ed56:	bfb8      	it	lt
 802ed58:	460b      	movlt	r3, r1
 802ed5a:	460c      	mov	r4, r1
 802ed5c:	bfbc      	itt	lt
 802ed5e:	464c      	movlt	r4, r9
 802ed60:	4699      	movlt	r9, r3
 802ed62:	6927      	ldr	r7, [r4, #16]
 802ed64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802ed68:	68a3      	ldr	r3, [r4, #8]
 802ed6a:	6861      	ldr	r1, [r4, #4]
 802ed6c:	eb07 060a 	add.w	r6, r7, sl
 802ed70:	42b3      	cmp	r3, r6
 802ed72:	b085      	sub	sp, #20
 802ed74:	bfb8      	it	lt
 802ed76:	3101      	addlt	r1, #1
 802ed78:	f7ff fe90 	bl	802ea9c <_Balloc>
 802ed7c:	b930      	cbnz	r0, 802ed8c <__multiply+0x44>
 802ed7e:	4602      	mov	r2, r0
 802ed80:	4b44      	ldr	r3, [pc, #272]	; (802ee94 <__multiply+0x14c>)
 802ed82:	4845      	ldr	r0, [pc, #276]	; (802ee98 <__multiply+0x150>)
 802ed84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802ed88:	f7fd fc00 	bl	802c58c <__assert_func>
 802ed8c:	f100 0514 	add.w	r5, r0, #20
 802ed90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802ed94:	462b      	mov	r3, r5
 802ed96:	2200      	movs	r2, #0
 802ed98:	4543      	cmp	r3, r8
 802ed9a:	d321      	bcc.n	802ede0 <__multiply+0x98>
 802ed9c:	f104 0314 	add.w	r3, r4, #20
 802eda0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802eda4:	f109 0314 	add.w	r3, r9, #20
 802eda8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802edac:	9202      	str	r2, [sp, #8]
 802edae:	1b3a      	subs	r2, r7, r4
 802edb0:	3a15      	subs	r2, #21
 802edb2:	f022 0203 	bic.w	r2, r2, #3
 802edb6:	3204      	adds	r2, #4
 802edb8:	f104 0115 	add.w	r1, r4, #21
 802edbc:	428f      	cmp	r7, r1
 802edbe:	bf38      	it	cc
 802edc0:	2204      	movcc	r2, #4
 802edc2:	9201      	str	r2, [sp, #4]
 802edc4:	9a02      	ldr	r2, [sp, #8]
 802edc6:	9303      	str	r3, [sp, #12]
 802edc8:	429a      	cmp	r2, r3
 802edca:	d80c      	bhi.n	802ede6 <__multiply+0x9e>
 802edcc:	2e00      	cmp	r6, #0
 802edce:	dd03      	ble.n	802edd8 <__multiply+0x90>
 802edd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802edd4:	2b00      	cmp	r3, #0
 802edd6:	d05b      	beq.n	802ee90 <__multiply+0x148>
 802edd8:	6106      	str	r6, [r0, #16]
 802edda:	b005      	add	sp, #20
 802eddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ede0:	f843 2b04 	str.w	r2, [r3], #4
 802ede4:	e7d8      	b.n	802ed98 <__multiply+0x50>
 802ede6:	f8b3 a000 	ldrh.w	sl, [r3]
 802edea:	f1ba 0f00 	cmp.w	sl, #0
 802edee:	d024      	beq.n	802ee3a <__multiply+0xf2>
 802edf0:	f104 0e14 	add.w	lr, r4, #20
 802edf4:	46a9      	mov	r9, r5
 802edf6:	f04f 0c00 	mov.w	ip, #0
 802edfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 802edfe:	f8d9 1000 	ldr.w	r1, [r9]
 802ee02:	fa1f fb82 	uxth.w	fp, r2
 802ee06:	b289      	uxth	r1, r1
 802ee08:	fb0a 110b 	mla	r1, sl, fp, r1
 802ee0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802ee10:	f8d9 2000 	ldr.w	r2, [r9]
 802ee14:	4461      	add	r1, ip
 802ee16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ee1a:	fb0a c20b 	mla	r2, sl, fp, ip
 802ee1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802ee22:	b289      	uxth	r1, r1
 802ee24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ee28:	4577      	cmp	r7, lr
 802ee2a:	f849 1b04 	str.w	r1, [r9], #4
 802ee2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ee32:	d8e2      	bhi.n	802edfa <__multiply+0xb2>
 802ee34:	9a01      	ldr	r2, [sp, #4]
 802ee36:	f845 c002 	str.w	ip, [r5, r2]
 802ee3a:	9a03      	ldr	r2, [sp, #12]
 802ee3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802ee40:	3304      	adds	r3, #4
 802ee42:	f1b9 0f00 	cmp.w	r9, #0
 802ee46:	d021      	beq.n	802ee8c <__multiply+0x144>
 802ee48:	6829      	ldr	r1, [r5, #0]
 802ee4a:	f104 0c14 	add.w	ip, r4, #20
 802ee4e:	46ae      	mov	lr, r5
 802ee50:	f04f 0a00 	mov.w	sl, #0
 802ee54:	f8bc b000 	ldrh.w	fp, [ip]
 802ee58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802ee5c:	fb09 220b 	mla	r2, r9, fp, r2
 802ee60:	4452      	add	r2, sl
 802ee62:	b289      	uxth	r1, r1
 802ee64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ee68:	f84e 1b04 	str.w	r1, [lr], #4
 802ee6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 802ee70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ee74:	f8be 1000 	ldrh.w	r1, [lr]
 802ee78:	fb09 110a 	mla	r1, r9, sl, r1
 802ee7c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802ee80:	4567      	cmp	r7, ip
 802ee82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ee86:	d8e5      	bhi.n	802ee54 <__multiply+0x10c>
 802ee88:	9a01      	ldr	r2, [sp, #4]
 802ee8a:	50a9      	str	r1, [r5, r2]
 802ee8c:	3504      	adds	r5, #4
 802ee8e:	e799      	b.n	802edc4 <__multiply+0x7c>
 802ee90:	3e01      	subs	r6, #1
 802ee92:	e79b      	b.n	802edcc <__multiply+0x84>
 802ee94:	08034cad 	.word	0x08034cad
 802ee98:	08034cbe 	.word	0x08034cbe

0802ee9c <__pow5mult>:
 802ee9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802eea0:	4615      	mov	r5, r2
 802eea2:	f012 0203 	ands.w	r2, r2, #3
 802eea6:	4606      	mov	r6, r0
 802eea8:	460f      	mov	r7, r1
 802eeaa:	d007      	beq.n	802eebc <__pow5mult+0x20>
 802eeac:	4c25      	ldr	r4, [pc, #148]	; (802ef44 <__pow5mult+0xa8>)
 802eeae:	3a01      	subs	r2, #1
 802eeb0:	2300      	movs	r3, #0
 802eeb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802eeb6:	f7ff fe53 	bl	802eb60 <__multadd>
 802eeba:	4607      	mov	r7, r0
 802eebc:	10ad      	asrs	r5, r5, #2
 802eebe:	d03d      	beq.n	802ef3c <__pow5mult+0xa0>
 802eec0:	69f4      	ldr	r4, [r6, #28]
 802eec2:	b97c      	cbnz	r4, 802eee4 <__pow5mult+0x48>
 802eec4:	2010      	movs	r0, #16
 802eec6:	f7fd fb95 	bl	802c5f4 <malloc>
 802eeca:	4602      	mov	r2, r0
 802eecc:	61f0      	str	r0, [r6, #28]
 802eece:	b928      	cbnz	r0, 802eedc <__pow5mult+0x40>
 802eed0:	4b1d      	ldr	r3, [pc, #116]	; (802ef48 <__pow5mult+0xac>)
 802eed2:	481e      	ldr	r0, [pc, #120]	; (802ef4c <__pow5mult+0xb0>)
 802eed4:	f240 11b3 	movw	r1, #435	; 0x1b3
 802eed8:	f7fd fb58 	bl	802c58c <__assert_func>
 802eedc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802eee0:	6004      	str	r4, [r0, #0]
 802eee2:	60c4      	str	r4, [r0, #12]
 802eee4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802eee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802eeec:	b94c      	cbnz	r4, 802ef02 <__pow5mult+0x66>
 802eeee:	f240 2171 	movw	r1, #625	; 0x271
 802eef2:	4630      	mov	r0, r6
 802eef4:	f7ff ff12 	bl	802ed1c <__i2b>
 802eef8:	2300      	movs	r3, #0
 802eefa:	f8c8 0008 	str.w	r0, [r8, #8]
 802eefe:	4604      	mov	r4, r0
 802ef00:	6003      	str	r3, [r0, #0]
 802ef02:	f04f 0900 	mov.w	r9, #0
 802ef06:	07eb      	lsls	r3, r5, #31
 802ef08:	d50a      	bpl.n	802ef20 <__pow5mult+0x84>
 802ef0a:	4639      	mov	r1, r7
 802ef0c:	4622      	mov	r2, r4
 802ef0e:	4630      	mov	r0, r6
 802ef10:	f7ff ff1a 	bl	802ed48 <__multiply>
 802ef14:	4639      	mov	r1, r7
 802ef16:	4680      	mov	r8, r0
 802ef18:	4630      	mov	r0, r6
 802ef1a:	f7ff fdff 	bl	802eb1c <_Bfree>
 802ef1e:	4647      	mov	r7, r8
 802ef20:	106d      	asrs	r5, r5, #1
 802ef22:	d00b      	beq.n	802ef3c <__pow5mult+0xa0>
 802ef24:	6820      	ldr	r0, [r4, #0]
 802ef26:	b938      	cbnz	r0, 802ef38 <__pow5mult+0x9c>
 802ef28:	4622      	mov	r2, r4
 802ef2a:	4621      	mov	r1, r4
 802ef2c:	4630      	mov	r0, r6
 802ef2e:	f7ff ff0b 	bl	802ed48 <__multiply>
 802ef32:	6020      	str	r0, [r4, #0]
 802ef34:	f8c0 9000 	str.w	r9, [r0]
 802ef38:	4604      	mov	r4, r0
 802ef3a:	e7e4      	b.n	802ef06 <__pow5mult+0x6a>
 802ef3c:	4638      	mov	r0, r7
 802ef3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ef42:	bf00      	nop
 802ef44:	08034e08 	.word	0x08034e08
 802ef48:	08034bd7 	.word	0x08034bd7
 802ef4c:	08034cbe 	.word	0x08034cbe

0802ef50 <__lshift>:
 802ef50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ef54:	460c      	mov	r4, r1
 802ef56:	6849      	ldr	r1, [r1, #4]
 802ef58:	6923      	ldr	r3, [r4, #16]
 802ef5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802ef5e:	68a3      	ldr	r3, [r4, #8]
 802ef60:	4607      	mov	r7, r0
 802ef62:	4691      	mov	r9, r2
 802ef64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802ef68:	f108 0601 	add.w	r6, r8, #1
 802ef6c:	42b3      	cmp	r3, r6
 802ef6e:	db0b      	blt.n	802ef88 <__lshift+0x38>
 802ef70:	4638      	mov	r0, r7
 802ef72:	f7ff fd93 	bl	802ea9c <_Balloc>
 802ef76:	4605      	mov	r5, r0
 802ef78:	b948      	cbnz	r0, 802ef8e <__lshift+0x3e>
 802ef7a:	4602      	mov	r2, r0
 802ef7c:	4b28      	ldr	r3, [pc, #160]	; (802f020 <__lshift+0xd0>)
 802ef7e:	4829      	ldr	r0, [pc, #164]	; (802f024 <__lshift+0xd4>)
 802ef80:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802ef84:	f7fd fb02 	bl	802c58c <__assert_func>
 802ef88:	3101      	adds	r1, #1
 802ef8a:	005b      	lsls	r3, r3, #1
 802ef8c:	e7ee      	b.n	802ef6c <__lshift+0x1c>
 802ef8e:	2300      	movs	r3, #0
 802ef90:	f100 0114 	add.w	r1, r0, #20
 802ef94:	f100 0210 	add.w	r2, r0, #16
 802ef98:	4618      	mov	r0, r3
 802ef9a:	4553      	cmp	r3, sl
 802ef9c:	db33      	blt.n	802f006 <__lshift+0xb6>
 802ef9e:	6920      	ldr	r0, [r4, #16]
 802efa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802efa4:	f104 0314 	add.w	r3, r4, #20
 802efa8:	f019 091f 	ands.w	r9, r9, #31
 802efac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802efb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802efb4:	d02b      	beq.n	802f00e <__lshift+0xbe>
 802efb6:	f1c9 0e20 	rsb	lr, r9, #32
 802efba:	468a      	mov	sl, r1
 802efbc:	2200      	movs	r2, #0
 802efbe:	6818      	ldr	r0, [r3, #0]
 802efc0:	fa00 f009 	lsl.w	r0, r0, r9
 802efc4:	4310      	orrs	r0, r2
 802efc6:	f84a 0b04 	str.w	r0, [sl], #4
 802efca:	f853 2b04 	ldr.w	r2, [r3], #4
 802efce:	459c      	cmp	ip, r3
 802efd0:	fa22 f20e 	lsr.w	r2, r2, lr
 802efd4:	d8f3      	bhi.n	802efbe <__lshift+0x6e>
 802efd6:	ebac 0304 	sub.w	r3, ip, r4
 802efda:	3b15      	subs	r3, #21
 802efdc:	f023 0303 	bic.w	r3, r3, #3
 802efe0:	3304      	adds	r3, #4
 802efe2:	f104 0015 	add.w	r0, r4, #21
 802efe6:	4584      	cmp	ip, r0
 802efe8:	bf38      	it	cc
 802efea:	2304      	movcc	r3, #4
 802efec:	50ca      	str	r2, [r1, r3]
 802efee:	b10a      	cbz	r2, 802eff4 <__lshift+0xa4>
 802eff0:	f108 0602 	add.w	r6, r8, #2
 802eff4:	3e01      	subs	r6, #1
 802eff6:	4638      	mov	r0, r7
 802eff8:	612e      	str	r6, [r5, #16]
 802effa:	4621      	mov	r1, r4
 802effc:	f7ff fd8e 	bl	802eb1c <_Bfree>
 802f000:	4628      	mov	r0, r5
 802f002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f006:	f842 0f04 	str.w	r0, [r2, #4]!
 802f00a:	3301      	adds	r3, #1
 802f00c:	e7c5      	b.n	802ef9a <__lshift+0x4a>
 802f00e:	3904      	subs	r1, #4
 802f010:	f853 2b04 	ldr.w	r2, [r3], #4
 802f014:	f841 2f04 	str.w	r2, [r1, #4]!
 802f018:	459c      	cmp	ip, r3
 802f01a:	d8f9      	bhi.n	802f010 <__lshift+0xc0>
 802f01c:	e7ea      	b.n	802eff4 <__lshift+0xa4>
 802f01e:	bf00      	nop
 802f020:	08034cad 	.word	0x08034cad
 802f024:	08034cbe 	.word	0x08034cbe

0802f028 <__mcmp>:
 802f028:	b530      	push	{r4, r5, lr}
 802f02a:	6902      	ldr	r2, [r0, #16]
 802f02c:	690c      	ldr	r4, [r1, #16]
 802f02e:	1b12      	subs	r2, r2, r4
 802f030:	d10e      	bne.n	802f050 <__mcmp+0x28>
 802f032:	f100 0314 	add.w	r3, r0, #20
 802f036:	3114      	adds	r1, #20
 802f038:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802f03c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802f040:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802f044:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802f048:	42a5      	cmp	r5, r4
 802f04a:	d003      	beq.n	802f054 <__mcmp+0x2c>
 802f04c:	d305      	bcc.n	802f05a <__mcmp+0x32>
 802f04e:	2201      	movs	r2, #1
 802f050:	4610      	mov	r0, r2
 802f052:	bd30      	pop	{r4, r5, pc}
 802f054:	4283      	cmp	r3, r0
 802f056:	d3f3      	bcc.n	802f040 <__mcmp+0x18>
 802f058:	e7fa      	b.n	802f050 <__mcmp+0x28>
 802f05a:	f04f 32ff 	mov.w	r2, #4294967295
 802f05e:	e7f7      	b.n	802f050 <__mcmp+0x28>

0802f060 <__mdiff>:
 802f060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f064:	460c      	mov	r4, r1
 802f066:	4606      	mov	r6, r0
 802f068:	4611      	mov	r1, r2
 802f06a:	4620      	mov	r0, r4
 802f06c:	4690      	mov	r8, r2
 802f06e:	f7ff ffdb 	bl	802f028 <__mcmp>
 802f072:	1e05      	subs	r5, r0, #0
 802f074:	d110      	bne.n	802f098 <__mdiff+0x38>
 802f076:	4629      	mov	r1, r5
 802f078:	4630      	mov	r0, r6
 802f07a:	f7ff fd0f 	bl	802ea9c <_Balloc>
 802f07e:	b930      	cbnz	r0, 802f08e <__mdiff+0x2e>
 802f080:	4b3a      	ldr	r3, [pc, #232]	; (802f16c <__mdiff+0x10c>)
 802f082:	4602      	mov	r2, r0
 802f084:	f240 2137 	movw	r1, #567	; 0x237
 802f088:	4839      	ldr	r0, [pc, #228]	; (802f170 <__mdiff+0x110>)
 802f08a:	f7fd fa7f 	bl	802c58c <__assert_func>
 802f08e:	2301      	movs	r3, #1
 802f090:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802f094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f098:	bfa4      	itt	ge
 802f09a:	4643      	movge	r3, r8
 802f09c:	46a0      	movge	r8, r4
 802f09e:	4630      	mov	r0, r6
 802f0a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802f0a4:	bfa6      	itte	ge
 802f0a6:	461c      	movge	r4, r3
 802f0a8:	2500      	movge	r5, #0
 802f0aa:	2501      	movlt	r5, #1
 802f0ac:	f7ff fcf6 	bl	802ea9c <_Balloc>
 802f0b0:	b920      	cbnz	r0, 802f0bc <__mdiff+0x5c>
 802f0b2:	4b2e      	ldr	r3, [pc, #184]	; (802f16c <__mdiff+0x10c>)
 802f0b4:	4602      	mov	r2, r0
 802f0b6:	f240 2145 	movw	r1, #581	; 0x245
 802f0ba:	e7e5      	b.n	802f088 <__mdiff+0x28>
 802f0bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802f0c0:	6926      	ldr	r6, [r4, #16]
 802f0c2:	60c5      	str	r5, [r0, #12]
 802f0c4:	f104 0914 	add.w	r9, r4, #20
 802f0c8:	f108 0514 	add.w	r5, r8, #20
 802f0cc:	f100 0e14 	add.w	lr, r0, #20
 802f0d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802f0d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802f0d8:	f108 0210 	add.w	r2, r8, #16
 802f0dc:	46f2      	mov	sl, lr
 802f0de:	2100      	movs	r1, #0
 802f0e0:	f859 3b04 	ldr.w	r3, [r9], #4
 802f0e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802f0e8:	fa11 f88b 	uxtah	r8, r1, fp
 802f0ec:	b299      	uxth	r1, r3
 802f0ee:	0c1b      	lsrs	r3, r3, #16
 802f0f0:	eba8 0801 	sub.w	r8, r8, r1
 802f0f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802f0f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802f0fc:	fa1f f888 	uxth.w	r8, r8
 802f100:	1419      	asrs	r1, r3, #16
 802f102:	454e      	cmp	r6, r9
 802f104:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802f108:	f84a 3b04 	str.w	r3, [sl], #4
 802f10c:	d8e8      	bhi.n	802f0e0 <__mdiff+0x80>
 802f10e:	1b33      	subs	r3, r6, r4
 802f110:	3b15      	subs	r3, #21
 802f112:	f023 0303 	bic.w	r3, r3, #3
 802f116:	3304      	adds	r3, #4
 802f118:	3415      	adds	r4, #21
 802f11a:	42a6      	cmp	r6, r4
 802f11c:	bf38      	it	cc
 802f11e:	2304      	movcc	r3, #4
 802f120:	441d      	add	r5, r3
 802f122:	4473      	add	r3, lr
 802f124:	469e      	mov	lr, r3
 802f126:	462e      	mov	r6, r5
 802f128:	4566      	cmp	r6, ip
 802f12a:	d30e      	bcc.n	802f14a <__mdiff+0xea>
 802f12c:	f10c 0203 	add.w	r2, ip, #3
 802f130:	1b52      	subs	r2, r2, r5
 802f132:	f022 0203 	bic.w	r2, r2, #3
 802f136:	3d03      	subs	r5, #3
 802f138:	45ac      	cmp	ip, r5
 802f13a:	bf38      	it	cc
 802f13c:	2200      	movcc	r2, #0
 802f13e:	4413      	add	r3, r2
 802f140:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802f144:	b17a      	cbz	r2, 802f166 <__mdiff+0x106>
 802f146:	6107      	str	r7, [r0, #16]
 802f148:	e7a4      	b.n	802f094 <__mdiff+0x34>
 802f14a:	f856 8b04 	ldr.w	r8, [r6], #4
 802f14e:	fa11 f288 	uxtah	r2, r1, r8
 802f152:	1414      	asrs	r4, r2, #16
 802f154:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802f158:	b292      	uxth	r2, r2
 802f15a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802f15e:	f84e 2b04 	str.w	r2, [lr], #4
 802f162:	1421      	asrs	r1, r4, #16
 802f164:	e7e0      	b.n	802f128 <__mdiff+0xc8>
 802f166:	3f01      	subs	r7, #1
 802f168:	e7ea      	b.n	802f140 <__mdiff+0xe0>
 802f16a:	bf00      	nop
 802f16c:	08034cad 	.word	0x08034cad
 802f170:	08034cbe 	.word	0x08034cbe

0802f174 <__ulp>:
 802f174:	b082      	sub	sp, #8
 802f176:	ed8d 0b00 	vstr	d0, [sp]
 802f17a:	9a01      	ldr	r2, [sp, #4]
 802f17c:	4b0f      	ldr	r3, [pc, #60]	; (802f1bc <__ulp+0x48>)
 802f17e:	4013      	ands	r3, r2
 802f180:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802f184:	2b00      	cmp	r3, #0
 802f186:	dc08      	bgt.n	802f19a <__ulp+0x26>
 802f188:	425b      	negs	r3, r3
 802f18a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802f18e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802f192:	da04      	bge.n	802f19e <__ulp+0x2a>
 802f194:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802f198:	4113      	asrs	r3, r2
 802f19a:	2200      	movs	r2, #0
 802f19c:	e008      	b.n	802f1b0 <__ulp+0x3c>
 802f19e:	f1a2 0314 	sub.w	r3, r2, #20
 802f1a2:	2b1e      	cmp	r3, #30
 802f1a4:	bfda      	itte	le
 802f1a6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802f1aa:	40da      	lsrle	r2, r3
 802f1ac:	2201      	movgt	r2, #1
 802f1ae:	2300      	movs	r3, #0
 802f1b0:	4619      	mov	r1, r3
 802f1b2:	4610      	mov	r0, r2
 802f1b4:	ec41 0b10 	vmov	d0, r0, r1
 802f1b8:	b002      	add	sp, #8
 802f1ba:	4770      	bx	lr
 802f1bc:	7ff00000 	.word	0x7ff00000

0802f1c0 <__b2d>:
 802f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f1c4:	6906      	ldr	r6, [r0, #16]
 802f1c6:	f100 0814 	add.w	r8, r0, #20
 802f1ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802f1ce:	1f37      	subs	r7, r6, #4
 802f1d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802f1d4:	4610      	mov	r0, r2
 802f1d6:	f7ff fd53 	bl	802ec80 <__hi0bits>
 802f1da:	f1c0 0320 	rsb	r3, r0, #32
 802f1de:	280a      	cmp	r0, #10
 802f1e0:	600b      	str	r3, [r1, #0]
 802f1e2:	491b      	ldr	r1, [pc, #108]	; (802f250 <__b2d+0x90>)
 802f1e4:	dc15      	bgt.n	802f212 <__b2d+0x52>
 802f1e6:	f1c0 0c0b 	rsb	ip, r0, #11
 802f1ea:	fa22 f30c 	lsr.w	r3, r2, ip
 802f1ee:	45b8      	cmp	r8, r7
 802f1f0:	ea43 0501 	orr.w	r5, r3, r1
 802f1f4:	bf34      	ite	cc
 802f1f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f1fa:	2300      	movcs	r3, #0
 802f1fc:	3015      	adds	r0, #21
 802f1fe:	fa02 f000 	lsl.w	r0, r2, r0
 802f202:	fa23 f30c 	lsr.w	r3, r3, ip
 802f206:	4303      	orrs	r3, r0
 802f208:	461c      	mov	r4, r3
 802f20a:	ec45 4b10 	vmov	d0, r4, r5
 802f20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f212:	45b8      	cmp	r8, r7
 802f214:	bf3a      	itte	cc
 802f216:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f21a:	f1a6 0708 	subcc.w	r7, r6, #8
 802f21e:	2300      	movcs	r3, #0
 802f220:	380b      	subs	r0, #11
 802f222:	d012      	beq.n	802f24a <__b2d+0x8a>
 802f224:	f1c0 0120 	rsb	r1, r0, #32
 802f228:	fa23 f401 	lsr.w	r4, r3, r1
 802f22c:	4082      	lsls	r2, r0
 802f22e:	4322      	orrs	r2, r4
 802f230:	4547      	cmp	r7, r8
 802f232:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802f236:	bf8c      	ite	hi
 802f238:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802f23c:	2200      	movls	r2, #0
 802f23e:	4083      	lsls	r3, r0
 802f240:	40ca      	lsrs	r2, r1
 802f242:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802f246:	4313      	orrs	r3, r2
 802f248:	e7de      	b.n	802f208 <__b2d+0x48>
 802f24a:	ea42 0501 	orr.w	r5, r2, r1
 802f24e:	e7db      	b.n	802f208 <__b2d+0x48>
 802f250:	3ff00000 	.word	0x3ff00000

0802f254 <__d2b>:
 802f254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f258:	460f      	mov	r7, r1
 802f25a:	2101      	movs	r1, #1
 802f25c:	ec59 8b10 	vmov	r8, r9, d0
 802f260:	4616      	mov	r6, r2
 802f262:	f7ff fc1b 	bl	802ea9c <_Balloc>
 802f266:	4604      	mov	r4, r0
 802f268:	b930      	cbnz	r0, 802f278 <__d2b+0x24>
 802f26a:	4602      	mov	r2, r0
 802f26c:	4b24      	ldr	r3, [pc, #144]	; (802f300 <__d2b+0xac>)
 802f26e:	4825      	ldr	r0, [pc, #148]	; (802f304 <__d2b+0xb0>)
 802f270:	f240 310f 	movw	r1, #783	; 0x30f
 802f274:	f7fd f98a 	bl	802c58c <__assert_func>
 802f278:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802f27c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f280:	bb2d      	cbnz	r5, 802f2ce <__d2b+0x7a>
 802f282:	9301      	str	r3, [sp, #4]
 802f284:	f1b8 0300 	subs.w	r3, r8, #0
 802f288:	d026      	beq.n	802f2d8 <__d2b+0x84>
 802f28a:	4668      	mov	r0, sp
 802f28c:	9300      	str	r3, [sp, #0]
 802f28e:	f7ff fd17 	bl	802ecc0 <__lo0bits>
 802f292:	e9dd 1200 	ldrd	r1, r2, [sp]
 802f296:	b1e8      	cbz	r0, 802f2d4 <__d2b+0x80>
 802f298:	f1c0 0320 	rsb	r3, r0, #32
 802f29c:	fa02 f303 	lsl.w	r3, r2, r3
 802f2a0:	430b      	orrs	r3, r1
 802f2a2:	40c2      	lsrs	r2, r0
 802f2a4:	6163      	str	r3, [r4, #20]
 802f2a6:	9201      	str	r2, [sp, #4]
 802f2a8:	9b01      	ldr	r3, [sp, #4]
 802f2aa:	61a3      	str	r3, [r4, #24]
 802f2ac:	2b00      	cmp	r3, #0
 802f2ae:	bf14      	ite	ne
 802f2b0:	2202      	movne	r2, #2
 802f2b2:	2201      	moveq	r2, #1
 802f2b4:	6122      	str	r2, [r4, #16]
 802f2b6:	b1bd      	cbz	r5, 802f2e8 <__d2b+0x94>
 802f2b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802f2bc:	4405      	add	r5, r0
 802f2be:	603d      	str	r5, [r7, #0]
 802f2c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802f2c4:	6030      	str	r0, [r6, #0]
 802f2c6:	4620      	mov	r0, r4
 802f2c8:	b003      	add	sp, #12
 802f2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802f2ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802f2d2:	e7d6      	b.n	802f282 <__d2b+0x2e>
 802f2d4:	6161      	str	r1, [r4, #20]
 802f2d6:	e7e7      	b.n	802f2a8 <__d2b+0x54>
 802f2d8:	a801      	add	r0, sp, #4
 802f2da:	f7ff fcf1 	bl	802ecc0 <__lo0bits>
 802f2de:	9b01      	ldr	r3, [sp, #4]
 802f2e0:	6163      	str	r3, [r4, #20]
 802f2e2:	3020      	adds	r0, #32
 802f2e4:	2201      	movs	r2, #1
 802f2e6:	e7e5      	b.n	802f2b4 <__d2b+0x60>
 802f2e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802f2ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802f2f0:	6038      	str	r0, [r7, #0]
 802f2f2:	6918      	ldr	r0, [r3, #16]
 802f2f4:	f7ff fcc4 	bl	802ec80 <__hi0bits>
 802f2f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802f2fc:	e7e2      	b.n	802f2c4 <__d2b+0x70>
 802f2fe:	bf00      	nop
 802f300:	08034cad 	.word	0x08034cad
 802f304:	08034cbe 	.word	0x08034cbe

0802f308 <__ratio>:
 802f308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f30c:	4688      	mov	r8, r1
 802f30e:	4669      	mov	r1, sp
 802f310:	4681      	mov	r9, r0
 802f312:	f7ff ff55 	bl	802f1c0 <__b2d>
 802f316:	a901      	add	r1, sp, #4
 802f318:	4640      	mov	r0, r8
 802f31a:	ec55 4b10 	vmov	r4, r5, d0
 802f31e:	f7ff ff4f 	bl	802f1c0 <__b2d>
 802f322:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f326:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802f32a:	eba3 0c02 	sub.w	ip, r3, r2
 802f32e:	e9dd 3200 	ldrd	r3, r2, [sp]
 802f332:	1a9b      	subs	r3, r3, r2
 802f334:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802f338:	ec51 0b10 	vmov	r0, r1, d0
 802f33c:	2b00      	cmp	r3, #0
 802f33e:	bfd6      	itet	le
 802f340:	460a      	movle	r2, r1
 802f342:	462a      	movgt	r2, r5
 802f344:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802f348:	468b      	mov	fp, r1
 802f34a:	462f      	mov	r7, r5
 802f34c:	bfd4      	ite	le
 802f34e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802f352:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802f356:	4620      	mov	r0, r4
 802f358:	ee10 2a10 	vmov	r2, s0
 802f35c:	465b      	mov	r3, fp
 802f35e:	4639      	mov	r1, r7
 802f360:	f7e1 fa8c 	bl	801087c <__aeabi_ddiv>
 802f364:	ec41 0b10 	vmov	d0, r0, r1
 802f368:	b003      	add	sp, #12
 802f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802f36e <__copybits>:
 802f36e:	3901      	subs	r1, #1
 802f370:	b570      	push	{r4, r5, r6, lr}
 802f372:	1149      	asrs	r1, r1, #5
 802f374:	6914      	ldr	r4, [r2, #16]
 802f376:	3101      	adds	r1, #1
 802f378:	f102 0314 	add.w	r3, r2, #20
 802f37c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802f380:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802f384:	1f05      	subs	r5, r0, #4
 802f386:	42a3      	cmp	r3, r4
 802f388:	d30c      	bcc.n	802f3a4 <__copybits+0x36>
 802f38a:	1aa3      	subs	r3, r4, r2
 802f38c:	3b11      	subs	r3, #17
 802f38e:	f023 0303 	bic.w	r3, r3, #3
 802f392:	3211      	adds	r2, #17
 802f394:	42a2      	cmp	r2, r4
 802f396:	bf88      	it	hi
 802f398:	2300      	movhi	r3, #0
 802f39a:	4418      	add	r0, r3
 802f39c:	2300      	movs	r3, #0
 802f39e:	4288      	cmp	r0, r1
 802f3a0:	d305      	bcc.n	802f3ae <__copybits+0x40>
 802f3a2:	bd70      	pop	{r4, r5, r6, pc}
 802f3a4:	f853 6b04 	ldr.w	r6, [r3], #4
 802f3a8:	f845 6f04 	str.w	r6, [r5, #4]!
 802f3ac:	e7eb      	b.n	802f386 <__copybits+0x18>
 802f3ae:	f840 3b04 	str.w	r3, [r0], #4
 802f3b2:	e7f4      	b.n	802f39e <__copybits+0x30>

0802f3b4 <__any_on>:
 802f3b4:	f100 0214 	add.w	r2, r0, #20
 802f3b8:	6900      	ldr	r0, [r0, #16]
 802f3ba:	114b      	asrs	r3, r1, #5
 802f3bc:	4298      	cmp	r0, r3
 802f3be:	b510      	push	{r4, lr}
 802f3c0:	db11      	blt.n	802f3e6 <__any_on+0x32>
 802f3c2:	dd0a      	ble.n	802f3da <__any_on+0x26>
 802f3c4:	f011 011f 	ands.w	r1, r1, #31
 802f3c8:	d007      	beq.n	802f3da <__any_on+0x26>
 802f3ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f3ce:	fa24 f001 	lsr.w	r0, r4, r1
 802f3d2:	fa00 f101 	lsl.w	r1, r0, r1
 802f3d6:	428c      	cmp	r4, r1
 802f3d8:	d10b      	bne.n	802f3f2 <__any_on+0x3e>
 802f3da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f3de:	4293      	cmp	r3, r2
 802f3e0:	d803      	bhi.n	802f3ea <__any_on+0x36>
 802f3e2:	2000      	movs	r0, #0
 802f3e4:	bd10      	pop	{r4, pc}
 802f3e6:	4603      	mov	r3, r0
 802f3e8:	e7f7      	b.n	802f3da <__any_on+0x26>
 802f3ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f3ee:	2900      	cmp	r1, #0
 802f3f0:	d0f5      	beq.n	802f3de <__any_on+0x2a>
 802f3f2:	2001      	movs	r0, #1
 802f3f4:	e7f6      	b.n	802f3e4 <__any_on+0x30>

0802f3f6 <sulp>:
 802f3f6:	b570      	push	{r4, r5, r6, lr}
 802f3f8:	4604      	mov	r4, r0
 802f3fa:	460d      	mov	r5, r1
 802f3fc:	ec45 4b10 	vmov	d0, r4, r5
 802f400:	4616      	mov	r6, r2
 802f402:	f7ff feb7 	bl	802f174 <__ulp>
 802f406:	ec51 0b10 	vmov	r0, r1, d0
 802f40a:	b17e      	cbz	r6, 802f42c <sulp+0x36>
 802f40c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802f410:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802f414:	2b00      	cmp	r3, #0
 802f416:	dd09      	ble.n	802f42c <sulp+0x36>
 802f418:	051b      	lsls	r3, r3, #20
 802f41a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802f41e:	2400      	movs	r4, #0
 802f420:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802f424:	4622      	mov	r2, r4
 802f426:	462b      	mov	r3, r5
 802f428:	f7e1 f8fe 	bl	8010628 <__aeabi_dmul>
 802f42c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802f430 <_strtod_l>:
 802f430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f434:	ed2d 8b02 	vpush	{d8}
 802f438:	b09b      	sub	sp, #108	; 0x6c
 802f43a:	4604      	mov	r4, r0
 802f43c:	9213      	str	r2, [sp, #76]	; 0x4c
 802f43e:	2200      	movs	r2, #0
 802f440:	9216      	str	r2, [sp, #88]	; 0x58
 802f442:	460d      	mov	r5, r1
 802f444:	f04f 0800 	mov.w	r8, #0
 802f448:	f04f 0900 	mov.w	r9, #0
 802f44c:	460a      	mov	r2, r1
 802f44e:	9215      	str	r2, [sp, #84]	; 0x54
 802f450:	7811      	ldrb	r1, [r2, #0]
 802f452:	292b      	cmp	r1, #43	; 0x2b
 802f454:	d04c      	beq.n	802f4f0 <_strtod_l+0xc0>
 802f456:	d83a      	bhi.n	802f4ce <_strtod_l+0x9e>
 802f458:	290d      	cmp	r1, #13
 802f45a:	d834      	bhi.n	802f4c6 <_strtod_l+0x96>
 802f45c:	2908      	cmp	r1, #8
 802f45e:	d834      	bhi.n	802f4ca <_strtod_l+0x9a>
 802f460:	2900      	cmp	r1, #0
 802f462:	d03d      	beq.n	802f4e0 <_strtod_l+0xb0>
 802f464:	2200      	movs	r2, #0
 802f466:	920a      	str	r2, [sp, #40]	; 0x28
 802f468:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802f46a:	7832      	ldrb	r2, [r6, #0]
 802f46c:	2a30      	cmp	r2, #48	; 0x30
 802f46e:	f040 80b4 	bne.w	802f5da <_strtod_l+0x1aa>
 802f472:	7872      	ldrb	r2, [r6, #1]
 802f474:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 802f478:	2a58      	cmp	r2, #88	; 0x58
 802f47a:	d170      	bne.n	802f55e <_strtod_l+0x12e>
 802f47c:	9302      	str	r3, [sp, #8]
 802f47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f480:	9301      	str	r3, [sp, #4]
 802f482:	ab16      	add	r3, sp, #88	; 0x58
 802f484:	9300      	str	r3, [sp, #0]
 802f486:	4a8e      	ldr	r2, [pc, #568]	; (802f6c0 <_strtod_l+0x290>)
 802f488:	ab17      	add	r3, sp, #92	; 0x5c
 802f48a:	a915      	add	r1, sp, #84	; 0x54
 802f48c:	4620      	mov	r0, r4
 802f48e:	f001 fe5f 	bl	8031150 <__gethex>
 802f492:	f010 070f 	ands.w	r7, r0, #15
 802f496:	4605      	mov	r5, r0
 802f498:	d005      	beq.n	802f4a6 <_strtod_l+0x76>
 802f49a:	2f06      	cmp	r7, #6
 802f49c:	d12a      	bne.n	802f4f4 <_strtod_l+0xc4>
 802f49e:	3601      	adds	r6, #1
 802f4a0:	2300      	movs	r3, #0
 802f4a2:	9615      	str	r6, [sp, #84]	; 0x54
 802f4a4:	930a      	str	r3, [sp, #40]	; 0x28
 802f4a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f4a8:	2b00      	cmp	r3, #0
 802f4aa:	f040 857f 	bne.w	802ffac <_strtod_l+0xb7c>
 802f4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f4b0:	b1db      	cbz	r3, 802f4ea <_strtod_l+0xba>
 802f4b2:	4642      	mov	r2, r8
 802f4b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802f4b8:	ec43 2b10 	vmov	d0, r2, r3
 802f4bc:	b01b      	add	sp, #108	; 0x6c
 802f4be:	ecbd 8b02 	vpop	{d8}
 802f4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f4c6:	2920      	cmp	r1, #32
 802f4c8:	d1cc      	bne.n	802f464 <_strtod_l+0x34>
 802f4ca:	3201      	adds	r2, #1
 802f4cc:	e7bf      	b.n	802f44e <_strtod_l+0x1e>
 802f4ce:	292d      	cmp	r1, #45	; 0x2d
 802f4d0:	d1c8      	bne.n	802f464 <_strtod_l+0x34>
 802f4d2:	2101      	movs	r1, #1
 802f4d4:	910a      	str	r1, [sp, #40]	; 0x28
 802f4d6:	1c51      	adds	r1, r2, #1
 802f4d8:	9115      	str	r1, [sp, #84]	; 0x54
 802f4da:	7852      	ldrb	r2, [r2, #1]
 802f4dc:	2a00      	cmp	r2, #0
 802f4de:	d1c3      	bne.n	802f468 <_strtod_l+0x38>
 802f4e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f4e2:	9515      	str	r5, [sp, #84]	; 0x54
 802f4e4:	2b00      	cmp	r3, #0
 802f4e6:	f040 855f 	bne.w	802ffa8 <_strtod_l+0xb78>
 802f4ea:	4642      	mov	r2, r8
 802f4ec:	464b      	mov	r3, r9
 802f4ee:	e7e3      	b.n	802f4b8 <_strtod_l+0x88>
 802f4f0:	2100      	movs	r1, #0
 802f4f2:	e7ef      	b.n	802f4d4 <_strtod_l+0xa4>
 802f4f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f4f6:	b13a      	cbz	r2, 802f508 <_strtod_l+0xd8>
 802f4f8:	2135      	movs	r1, #53	; 0x35
 802f4fa:	a818      	add	r0, sp, #96	; 0x60
 802f4fc:	f7ff ff37 	bl	802f36e <__copybits>
 802f500:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f502:	4620      	mov	r0, r4
 802f504:	f7ff fb0a 	bl	802eb1c <_Bfree>
 802f508:	3f01      	subs	r7, #1
 802f50a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802f50c:	2f04      	cmp	r7, #4
 802f50e:	d806      	bhi.n	802f51e <_strtod_l+0xee>
 802f510:	e8df f007 	tbb	[pc, r7]
 802f514:	201d0314 	.word	0x201d0314
 802f518:	14          	.byte	0x14
 802f519:	00          	.byte	0x00
 802f51a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 802f51e:	05e9      	lsls	r1, r5, #23
 802f520:	bf48      	it	mi
 802f522:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802f526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f52a:	0d1b      	lsrs	r3, r3, #20
 802f52c:	051b      	lsls	r3, r3, #20
 802f52e:	2b00      	cmp	r3, #0
 802f530:	d1b9      	bne.n	802f4a6 <_strtod_l+0x76>
 802f532:	f7fe fb9b 	bl	802dc6c <__errno>
 802f536:	2322      	movs	r3, #34	; 0x22
 802f538:	6003      	str	r3, [r0, #0]
 802f53a:	e7b4      	b.n	802f4a6 <_strtod_l+0x76>
 802f53c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 802f540:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802f544:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802f548:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802f54c:	e7e7      	b.n	802f51e <_strtod_l+0xee>
 802f54e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802f6c8 <_strtod_l+0x298>
 802f552:	e7e4      	b.n	802f51e <_strtod_l+0xee>
 802f554:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802f558:	f04f 38ff 	mov.w	r8, #4294967295
 802f55c:	e7df      	b.n	802f51e <_strtod_l+0xee>
 802f55e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f560:	1c5a      	adds	r2, r3, #1
 802f562:	9215      	str	r2, [sp, #84]	; 0x54
 802f564:	785b      	ldrb	r3, [r3, #1]
 802f566:	2b30      	cmp	r3, #48	; 0x30
 802f568:	d0f9      	beq.n	802f55e <_strtod_l+0x12e>
 802f56a:	2b00      	cmp	r3, #0
 802f56c:	d09b      	beq.n	802f4a6 <_strtod_l+0x76>
 802f56e:	2301      	movs	r3, #1
 802f570:	f04f 0a00 	mov.w	sl, #0
 802f574:	9304      	str	r3, [sp, #16]
 802f576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f578:	930b      	str	r3, [sp, #44]	; 0x2c
 802f57a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802f57e:	46d3      	mov	fp, sl
 802f580:	220a      	movs	r2, #10
 802f582:	9815      	ldr	r0, [sp, #84]	; 0x54
 802f584:	7806      	ldrb	r6, [r0, #0]
 802f586:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802f58a:	b2d9      	uxtb	r1, r3
 802f58c:	2909      	cmp	r1, #9
 802f58e:	d926      	bls.n	802f5de <_strtod_l+0x1ae>
 802f590:	494c      	ldr	r1, [pc, #304]	; (802f6c4 <_strtod_l+0x294>)
 802f592:	2201      	movs	r2, #1
 802f594:	f7fe fa12 	bl	802d9bc <strncmp>
 802f598:	2800      	cmp	r0, #0
 802f59a:	d030      	beq.n	802f5fe <_strtod_l+0x1ce>
 802f59c:	2000      	movs	r0, #0
 802f59e:	4632      	mov	r2, r6
 802f5a0:	9005      	str	r0, [sp, #20]
 802f5a2:	465e      	mov	r6, fp
 802f5a4:	4603      	mov	r3, r0
 802f5a6:	2a65      	cmp	r2, #101	; 0x65
 802f5a8:	d001      	beq.n	802f5ae <_strtod_l+0x17e>
 802f5aa:	2a45      	cmp	r2, #69	; 0x45
 802f5ac:	d113      	bne.n	802f5d6 <_strtod_l+0x1a6>
 802f5ae:	b91e      	cbnz	r6, 802f5b8 <_strtod_l+0x188>
 802f5b0:	9a04      	ldr	r2, [sp, #16]
 802f5b2:	4302      	orrs	r2, r0
 802f5b4:	d094      	beq.n	802f4e0 <_strtod_l+0xb0>
 802f5b6:	2600      	movs	r6, #0
 802f5b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802f5ba:	1c6a      	adds	r2, r5, #1
 802f5bc:	9215      	str	r2, [sp, #84]	; 0x54
 802f5be:	786a      	ldrb	r2, [r5, #1]
 802f5c0:	2a2b      	cmp	r2, #43	; 0x2b
 802f5c2:	d074      	beq.n	802f6ae <_strtod_l+0x27e>
 802f5c4:	2a2d      	cmp	r2, #45	; 0x2d
 802f5c6:	d078      	beq.n	802f6ba <_strtod_l+0x28a>
 802f5c8:	f04f 0c00 	mov.w	ip, #0
 802f5cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802f5d0:	2909      	cmp	r1, #9
 802f5d2:	d97f      	bls.n	802f6d4 <_strtod_l+0x2a4>
 802f5d4:	9515      	str	r5, [sp, #84]	; 0x54
 802f5d6:	2700      	movs	r7, #0
 802f5d8:	e09e      	b.n	802f718 <_strtod_l+0x2e8>
 802f5da:	2300      	movs	r3, #0
 802f5dc:	e7c8      	b.n	802f570 <_strtod_l+0x140>
 802f5de:	f1bb 0f08 	cmp.w	fp, #8
 802f5e2:	bfd8      	it	le
 802f5e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802f5e6:	f100 0001 	add.w	r0, r0, #1
 802f5ea:	bfda      	itte	le
 802f5ec:	fb02 3301 	mlale	r3, r2, r1, r3
 802f5f0:	9309      	strle	r3, [sp, #36]	; 0x24
 802f5f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 802f5f6:	f10b 0b01 	add.w	fp, fp, #1
 802f5fa:	9015      	str	r0, [sp, #84]	; 0x54
 802f5fc:	e7c1      	b.n	802f582 <_strtod_l+0x152>
 802f5fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f600:	1c5a      	adds	r2, r3, #1
 802f602:	9215      	str	r2, [sp, #84]	; 0x54
 802f604:	785a      	ldrb	r2, [r3, #1]
 802f606:	f1bb 0f00 	cmp.w	fp, #0
 802f60a:	d037      	beq.n	802f67c <_strtod_l+0x24c>
 802f60c:	9005      	str	r0, [sp, #20]
 802f60e:	465e      	mov	r6, fp
 802f610:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 802f614:	2b09      	cmp	r3, #9
 802f616:	d912      	bls.n	802f63e <_strtod_l+0x20e>
 802f618:	2301      	movs	r3, #1
 802f61a:	e7c4      	b.n	802f5a6 <_strtod_l+0x176>
 802f61c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f61e:	1c5a      	adds	r2, r3, #1
 802f620:	9215      	str	r2, [sp, #84]	; 0x54
 802f622:	785a      	ldrb	r2, [r3, #1]
 802f624:	3001      	adds	r0, #1
 802f626:	2a30      	cmp	r2, #48	; 0x30
 802f628:	d0f8      	beq.n	802f61c <_strtod_l+0x1ec>
 802f62a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802f62e:	2b08      	cmp	r3, #8
 802f630:	f200 84c1 	bhi.w	802ffb6 <_strtod_l+0xb86>
 802f634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f636:	9005      	str	r0, [sp, #20]
 802f638:	2000      	movs	r0, #0
 802f63a:	930b      	str	r3, [sp, #44]	; 0x2c
 802f63c:	4606      	mov	r6, r0
 802f63e:	3a30      	subs	r2, #48	; 0x30
 802f640:	f100 0301 	add.w	r3, r0, #1
 802f644:	d014      	beq.n	802f670 <_strtod_l+0x240>
 802f646:	9905      	ldr	r1, [sp, #20]
 802f648:	4419      	add	r1, r3
 802f64a:	9105      	str	r1, [sp, #20]
 802f64c:	4633      	mov	r3, r6
 802f64e:	eb00 0c06 	add.w	ip, r0, r6
 802f652:	210a      	movs	r1, #10
 802f654:	4563      	cmp	r3, ip
 802f656:	d113      	bne.n	802f680 <_strtod_l+0x250>
 802f658:	1833      	adds	r3, r6, r0
 802f65a:	2b08      	cmp	r3, #8
 802f65c:	f106 0601 	add.w	r6, r6, #1
 802f660:	4406      	add	r6, r0
 802f662:	dc1a      	bgt.n	802f69a <_strtod_l+0x26a>
 802f664:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f666:	230a      	movs	r3, #10
 802f668:	fb03 2301 	mla	r3, r3, r1, r2
 802f66c:	9309      	str	r3, [sp, #36]	; 0x24
 802f66e:	2300      	movs	r3, #0
 802f670:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f672:	1c51      	adds	r1, r2, #1
 802f674:	9115      	str	r1, [sp, #84]	; 0x54
 802f676:	7852      	ldrb	r2, [r2, #1]
 802f678:	4618      	mov	r0, r3
 802f67a:	e7c9      	b.n	802f610 <_strtod_l+0x1e0>
 802f67c:	4658      	mov	r0, fp
 802f67e:	e7d2      	b.n	802f626 <_strtod_l+0x1f6>
 802f680:	2b08      	cmp	r3, #8
 802f682:	f103 0301 	add.w	r3, r3, #1
 802f686:	dc03      	bgt.n	802f690 <_strtod_l+0x260>
 802f688:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f68a:	434f      	muls	r7, r1
 802f68c:	9709      	str	r7, [sp, #36]	; 0x24
 802f68e:	e7e1      	b.n	802f654 <_strtod_l+0x224>
 802f690:	2b10      	cmp	r3, #16
 802f692:	bfd8      	it	le
 802f694:	fb01 fa0a 	mulle.w	sl, r1, sl
 802f698:	e7dc      	b.n	802f654 <_strtod_l+0x224>
 802f69a:	2e10      	cmp	r6, #16
 802f69c:	bfdc      	itt	le
 802f69e:	230a      	movle	r3, #10
 802f6a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 802f6a4:	e7e3      	b.n	802f66e <_strtod_l+0x23e>
 802f6a6:	2300      	movs	r3, #0
 802f6a8:	9305      	str	r3, [sp, #20]
 802f6aa:	2301      	movs	r3, #1
 802f6ac:	e780      	b.n	802f5b0 <_strtod_l+0x180>
 802f6ae:	f04f 0c00 	mov.w	ip, #0
 802f6b2:	1caa      	adds	r2, r5, #2
 802f6b4:	9215      	str	r2, [sp, #84]	; 0x54
 802f6b6:	78aa      	ldrb	r2, [r5, #2]
 802f6b8:	e788      	b.n	802f5cc <_strtod_l+0x19c>
 802f6ba:	f04f 0c01 	mov.w	ip, #1
 802f6be:	e7f8      	b.n	802f6b2 <_strtod_l+0x282>
 802f6c0:	08034e18 	.word	0x08034e18
 802f6c4:	08034e14 	.word	0x08034e14
 802f6c8:	7ff00000 	.word	0x7ff00000
 802f6cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f6ce:	1c51      	adds	r1, r2, #1
 802f6d0:	9115      	str	r1, [sp, #84]	; 0x54
 802f6d2:	7852      	ldrb	r2, [r2, #1]
 802f6d4:	2a30      	cmp	r2, #48	; 0x30
 802f6d6:	d0f9      	beq.n	802f6cc <_strtod_l+0x29c>
 802f6d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 802f6dc:	2908      	cmp	r1, #8
 802f6de:	f63f af7a 	bhi.w	802f5d6 <_strtod_l+0x1a6>
 802f6e2:	3a30      	subs	r2, #48	; 0x30
 802f6e4:	9208      	str	r2, [sp, #32]
 802f6e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f6e8:	920c      	str	r2, [sp, #48]	; 0x30
 802f6ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f6ec:	1c57      	adds	r7, r2, #1
 802f6ee:	9715      	str	r7, [sp, #84]	; 0x54
 802f6f0:	7852      	ldrb	r2, [r2, #1]
 802f6f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 802f6f6:	f1be 0f09 	cmp.w	lr, #9
 802f6fa:	d938      	bls.n	802f76e <_strtod_l+0x33e>
 802f6fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 802f6fe:	1a7f      	subs	r7, r7, r1
 802f700:	2f08      	cmp	r7, #8
 802f702:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802f706:	dc03      	bgt.n	802f710 <_strtod_l+0x2e0>
 802f708:	9908      	ldr	r1, [sp, #32]
 802f70a:	428f      	cmp	r7, r1
 802f70c:	bfa8      	it	ge
 802f70e:	460f      	movge	r7, r1
 802f710:	f1bc 0f00 	cmp.w	ip, #0
 802f714:	d000      	beq.n	802f718 <_strtod_l+0x2e8>
 802f716:	427f      	negs	r7, r7
 802f718:	2e00      	cmp	r6, #0
 802f71a:	d14f      	bne.n	802f7bc <_strtod_l+0x38c>
 802f71c:	9904      	ldr	r1, [sp, #16]
 802f71e:	4301      	orrs	r1, r0
 802f720:	f47f aec1 	bne.w	802f4a6 <_strtod_l+0x76>
 802f724:	2b00      	cmp	r3, #0
 802f726:	f47f aedb 	bne.w	802f4e0 <_strtod_l+0xb0>
 802f72a:	2a69      	cmp	r2, #105	; 0x69
 802f72c:	d029      	beq.n	802f782 <_strtod_l+0x352>
 802f72e:	dc26      	bgt.n	802f77e <_strtod_l+0x34e>
 802f730:	2a49      	cmp	r2, #73	; 0x49
 802f732:	d026      	beq.n	802f782 <_strtod_l+0x352>
 802f734:	2a4e      	cmp	r2, #78	; 0x4e
 802f736:	f47f aed3 	bne.w	802f4e0 <_strtod_l+0xb0>
 802f73a:	499b      	ldr	r1, [pc, #620]	; (802f9a8 <_strtod_l+0x578>)
 802f73c:	a815      	add	r0, sp, #84	; 0x54
 802f73e:	f001 ff47 	bl	80315d0 <__match>
 802f742:	2800      	cmp	r0, #0
 802f744:	f43f aecc 	beq.w	802f4e0 <_strtod_l+0xb0>
 802f748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f74a:	781b      	ldrb	r3, [r3, #0]
 802f74c:	2b28      	cmp	r3, #40	; 0x28
 802f74e:	d12f      	bne.n	802f7b0 <_strtod_l+0x380>
 802f750:	4996      	ldr	r1, [pc, #600]	; (802f9ac <_strtod_l+0x57c>)
 802f752:	aa18      	add	r2, sp, #96	; 0x60
 802f754:	a815      	add	r0, sp, #84	; 0x54
 802f756:	f001 ff4f 	bl	80315f8 <__hexnan>
 802f75a:	2805      	cmp	r0, #5
 802f75c:	d128      	bne.n	802f7b0 <_strtod_l+0x380>
 802f75e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802f760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802f764:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 802f768:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802f76c:	e69b      	b.n	802f4a6 <_strtod_l+0x76>
 802f76e:	9f08      	ldr	r7, [sp, #32]
 802f770:	210a      	movs	r1, #10
 802f772:	fb01 2107 	mla	r1, r1, r7, r2
 802f776:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802f77a:	9208      	str	r2, [sp, #32]
 802f77c:	e7b5      	b.n	802f6ea <_strtod_l+0x2ba>
 802f77e:	2a6e      	cmp	r2, #110	; 0x6e
 802f780:	e7d9      	b.n	802f736 <_strtod_l+0x306>
 802f782:	498b      	ldr	r1, [pc, #556]	; (802f9b0 <_strtod_l+0x580>)
 802f784:	a815      	add	r0, sp, #84	; 0x54
 802f786:	f001 ff23 	bl	80315d0 <__match>
 802f78a:	2800      	cmp	r0, #0
 802f78c:	f43f aea8 	beq.w	802f4e0 <_strtod_l+0xb0>
 802f790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f792:	4988      	ldr	r1, [pc, #544]	; (802f9b4 <_strtod_l+0x584>)
 802f794:	3b01      	subs	r3, #1
 802f796:	a815      	add	r0, sp, #84	; 0x54
 802f798:	9315      	str	r3, [sp, #84]	; 0x54
 802f79a:	f001 ff19 	bl	80315d0 <__match>
 802f79e:	b910      	cbnz	r0, 802f7a6 <_strtod_l+0x376>
 802f7a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f7a2:	3301      	adds	r3, #1
 802f7a4:	9315      	str	r3, [sp, #84]	; 0x54
 802f7a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 802f9c4 <_strtod_l+0x594>
 802f7aa:	f04f 0800 	mov.w	r8, #0
 802f7ae:	e67a      	b.n	802f4a6 <_strtod_l+0x76>
 802f7b0:	4881      	ldr	r0, [pc, #516]	; (802f9b8 <_strtod_l+0x588>)
 802f7b2:	f001 fc5d 	bl	8031070 <nan>
 802f7b6:	ec59 8b10 	vmov	r8, r9, d0
 802f7ba:	e674      	b.n	802f4a6 <_strtod_l+0x76>
 802f7bc:	9b05      	ldr	r3, [sp, #20]
 802f7be:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f7c0:	1afb      	subs	r3, r7, r3
 802f7c2:	f1bb 0f00 	cmp.w	fp, #0
 802f7c6:	bf08      	it	eq
 802f7c8:	46b3      	moveq	fp, r6
 802f7ca:	2e10      	cmp	r6, #16
 802f7cc:	9308      	str	r3, [sp, #32]
 802f7ce:	4635      	mov	r5, r6
 802f7d0:	bfa8      	it	ge
 802f7d2:	2510      	movge	r5, #16
 802f7d4:	f7e0 feae 	bl	8010534 <__aeabi_ui2d>
 802f7d8:	2e09      	cmp	r6, #9
 802f7da:	4680      	mov	r8, r0
 802f7dc:	4689      	mov	r9, r1
 802f7de:	dd13      	ble.n	802f808 <_strtod_l+0x3d8>
 802f7e0:	4b76      	ldr	r3, [pc, #472]	; (802f9bc <_strtod_l+0x58c>)
 802f7e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f7e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802f7ea:	f7e0 ff1d 	bl	8010628 <__aeabi_dmul>
 802f7ee:	4680      	mov	r8, r0
 802f7f0:	4650      	mov	r0, sl
 802f7f2:	4689      	mov	r9, r1
 802f7f4:	f7e0 fe9e 	bl	8010534 <__aeabi_ui2d>
 802f7f8:	4602      	mov	r2, r0
 802f7fa:	460b      	mov	r3, r1
 802f7fc:	4640      	mov	r0, r8
 802f7fe:	4649      	mov	r1, r9
 802f800:	f7e0 fd5c 	bl	80102bc <__adddf3>
 802f804:	4680      	mov	r8, r0
 802f806:	4689      	mov	r9, r1
 802f808:	2e0f      	cmp	r6, #15
 802f80a:	dc38      	bgt.n	802f87e <_strtod_l+0x44e>
 802f80c:	9b08      	ldr	r3, [sp, #32]
 802f80e:	2b00      	cmp	r3, #0
 802f810:	f43f ae49 	beq.w	802f4a6 <_strtod_l+0x76>
 802f814:	dd24      	ble.n	802f860 <_strtod_l+0x430>
 802f816:	2b16      	cmp	r3, #22
 802f818:	dc0b      	bgt.n	802f832 <_strtod_l+0x402>
 802f81a:	4968      	ldr	r1, [pc, #416]	; (802f9bc <_strtod_l+0x58c>)
 802f81c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f820:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f824:	4642      	mov	r2, r8
 802f826:	464b      	mov	r3, r9
 802f828:	f7e0 fefe 	bl	8010628 <__aeabi_dmul>
 802f82c:	4680      	mov	r8, r0
 802f82e:	4689      	mov	r9, r1
 802f830:	e639      	b.n	802f4a6 <_strtod_l+0x76>
 802f832:	9a08      	ldr	r2, [sp, #32]
 802f834:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 802f838:	4293      	cmp	r3, r2
 802f83a:	db20      	blt.n	802f87e <_strtod_l+0x44e>
 802f83c:	4c5f      	ldr	r4, [pc, #380]	; (802f9bc <_strtod_l+0x58c>)
 802f83e:	f1c6 060f 	rsb	r6, r6, #15
 802f842:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 802f846:	4642      	mov	r2, r8
 802f848:	464b      	mov	r3, r9
 802f84a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f84e:	f7e0 feeb 	bl	8010628 <__aeabi_dmul>
 802f852:	9b08      	ldr	r3, [sp, #32]
 802f854:	1b9e      	subs	r6, r3, r6
 802f856:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 802f85a:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f85e:	e7e3      	b.n	802f828 <_strtod_l+0x3f8>
 802f860:	9b08      	ldr	r3, [sp, #32]
 802f862:	3316      	adds	r3, #22
 802f864:	db0b      	blt.n	802f87e <_strtod_l+0x44e>
 802f866:	9b05      	ldr	r3, [sp, #20]
 802f868:	1bdf      	subs	r7, r3, r7
 802f86a:	4b54      	ldr	r3, [pc, #336]	; (802f9bc <_strtod_l+0x58c>)
 802f86c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802f870:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f874:	4640      	mov	r0, r8
 802f876:	4649      	mov	r1, r9
 802f878:	f7e1 f800 	bl	801087c <__aeabi_ddiv>
 802f87c:	e7d6      	b.n	802f82c <_strtod_l+0x3fc>
 802f87e:	9b08      	ldr	r3, [sp, #32]
 802f880:	1b75      	subs	r5, r6, r5
 802f882:	441d      	add	r5, r3
 802f884:	2d00      	cmp	r5, #0
 802f886:	dd70      	ble.n	802f96a <_strtod_l+0x53a>
 802f888:	f015 030f 	ands.w	r3, r5, #15
 802f88c:	d00a      	beq.n	802f8a4 <_strtod_l+0x474>
 802f88e:	494b      	ldr	r1, [pc, #300]	; (802f9bc <_strtod_l+0x58c>)
 802f890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f894:	4642      	mov	r2, r8
 802f896:	464b      	mov	r3, r9
 802f898:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f89c:	f7e0 fec4 	bl	8010628 <__aeabi_dmul>
 802f8a0:	4680      	mov	r8, r0
 802f8a2:	4689      	mov	r9, r1
 802f8a4:	f035 050f 	bics.w	r5, r5, #15
 802f8a8:	d04d      	beq.n	802f946 <_strtod_l+0x516>
 802f8aa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 802f8ae:	dd22      	ble.n	802f8f6 <_strtod_l+0x4c6>
 802f8b0:	2500      	movs	r5, #0
 802f8b2:	46ab      	mov	fp, r5
 802f8b4:	9509      	str	r5, [sp, #36]	; 0x24
 802f8b6:	9505      	str	r5, [sp, #20]
 802f8b8:	2322      	movs	r3, #34	; 0x22
 802f8ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802f9c4 <_strtod_l+0x594>
 802f8be:	6023      	str	r3, [r4, #0]
 802f8c0:	f04f 0800 	mov.w	r8, #0
 802f8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f8c6:	2b00      	cmp	r3, #0
 802f8c8:	f43f aded 	beq.w	802f4a6 <_strtod_l+0x76>
 802f8cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f8ce:	4620      	mov	r0, r4
 802f8d0:	f7ff f924 	bl	802eb1c <_Bfree>
 802f8d4:	9905      	ldr	r1, [sp, #20]
 802f8d6:	4620      	mov	r0, r4
 802f8d8:	f7ff f920 	bl	802eb1c <_Bfree>
 802f8dc:	4659      	mov	r1, fp
 802f8de:	4620      	mov	r0, r4
 802f8e0:	f7ff f91c 	bl	802eb1c <_Bfree>
 802f8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f8e6:	4620      	mov	r0, r4
 802f8e8:	f7ff f918 	bl	802eb1c <_Bfree>
 802f8ec:	4629      	mov	r1, r5
 802f8ee:	4620      	mov	r0, r4
 802f8f0:	f7ff f914 	bl	802eb1c <_Bfree>
 802f8f4:	e5d7      	b.n	802f4a6 <_strtod_l+0x76>
 802f8f6:	4b32      	ldr	r3, [pc, #200]	; (802f9c0 <_strtod_l+0x590>)
 802f8f8:	9304      	str	r3, [sp, #16]
 802f8fa:	2300      	movs	r3, #0
 802f8fc:	112d      	asrs	r5, r5, #4
 802f8fe:	4640      	mov	r0, r8
 802f900:	4649      	mov	r1, r9
 802f902:	469a      	mov	sl, r3
 802f904:	2d01      	cmp	r5, #1
 802f906:	dc21      	bgt.n	802f94c <_strtod_l+0x51c>
 802f908:	b10b      	cbz	r3, 802f90e <_strtod_l+0x4de>
 802f90a:	4680      	mov	r8, r0
 802f90c:	4689      	mov	r9, r1
 802f90e:	492c      	ldr	r1, [pc, #176]	; (802f9c0 <_strtod_l+0x590>)
 802f910:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802f914:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802f918:	4642      	mov	r2, r8
 802f91a:	464b      	mov	r3, r9
 802f91c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f920:	f7e0 fe82 	bl	8010628 <__aeabi_dmul>
 802f924:	4b27      	ldr	r3, [pc, #156]	; (802f9c4 <_strtod_l+0x594>)
 802f926:	460a      	mov	r2, r1
 802f928:	400b      	ands	r3, r1
 802f92a:	4927      	ldr	r1, [pc, #156]	; (802f9c8 <_strtod_l+0x598>)
 802f92c:	428b      	cmp	r3, r1
 802f92e:	4680      	mov	r8, r0
 802f930:	d8be      	bhi.n	802f8b0 <_strtod_l+0x480>
 802f932:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802f936:	428b      	cmp	r3, r1
 802f938:	bf86      	itte	hi
 802f93a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 802f9cc <_strtod_l+0x59c>
 802f93e:	f04f 38ff 	movhi.w	r8, #4294967295
 802f942:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 802f946:	2300      	movs	r3, #0
 802f948:	9304      	str	r3, [sp, #16]
 802f94a:	e07b      	b.n	802fa44 <_strtod_l+0x614>
 802f94c:	07ea      	lsls	r2, r5, #31
 802f94e:	d505      	bpl.n	802f95c <_strtod_l+0x52c>
 802f950:	9b04      	ldr	r3, [sp, #16]
 802f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f956:	f7e0 fe67 	bl	8010628 <__aeabi_dmul>
 802f95a:	2301      	movs	r3, #1
 802f95c:	9a04      	ldr	r2, [sp, #16]
 802f95e:	3208      	adds	r2, #8
 802f960:	f10a 0a01 	add.w	sl, sl, #1
 802f964:	106d      	asrs	r5, r5, #1
 802f966:	9204      	str	r2, [sp, #16]
 802f968:	e7cc      	b.n	802f904 <_strtod_l+0x4d4>
 802f96a:	d0ec      	beq.n	802f946 <_strtod_l+0x516>
 802f96c:	426d      	negs	r5, r5
 802f96e:	f015 020f 	ands.w	r2, r5, #15
 802f972:	d00a      	beq.n	802f98a <_strtod_l+0x55a>
 802f974:	4b11      	ldr	r3, [pc, #68]	; (802f9bc <_strtod_l+0x58c>)
 802f976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802f97a:	4640      	mov	r0, r8
 802f97c:	4649      	mov	r1, r9
 802f97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f982:	f7e0 ff7b 	bl	801087c <__aeabi_ddiv>
 802f986:	4680      	mov	r8, r0
 802f988:	4689      	mov	r9, r1
 802f98a:	112d      	asrs	r5, r5, #4
 802f98c:	d0db      	beq.n	802f946 <_strtod_l+0x516>
 802f98e:	2d1f      	cmp	r5, #31
 802f990:	dd1e      	ble.n	802f9d0 <_strtod_l+0x5a0>
 802f992:	2500      	movs	r5, #0
 802f994:	46ab      	mov	fp, r5
 802f996:	9509      	str	r5, [sp, #36]	; 0x24
 802f998:	9505      	str	r5, [sp, #20]
 802f99a:	2322      	movs	r3, #34	; 0x22
 802f99c:	f04f 0800 	mov.w	r8, #0
 802f9a0:	f04f 0900 	mov.w	r9, #0
 802f9a4:	6023      	str	r3, [r4, #0]
 802f9a6:	e78d      	b.n	802f8c4 <_strtod_l+0x494>
 802f9a8:	08034bad 	.word	0x08034bad
 802f9ac:	08034e2c 	.word	0x08034e2c
 802f9b0:	08034ba5 	.word	0x08034ba5
 802f9b4:	08034c4b 	.word	0x08034c4b
 802f9b8:	08034b9f 	.word	0x08034b9f
 802f9bc:	08034d40 	.word	0x08034d40
 802f9c0:	08034d18 	.word	0x08034d18
 802f9c4:	7ff00000 	.word	0x7ff00000
 802f9c8:	7ca00000 	.word	0x7ca00000
 802f9cc:	7fefffff 	.word	0x7fefffff
 802f9d0:	f015 0310 	ands.w	r3, r5, #16
 802f9d4:	bf18      	it	ne
 802f9d6:	236a      	movne	r3, #106	; 0x6a
 802f9d8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802fd7c <_strtod_l+0x94c>
 802f9dc:	9304      	str	r3, [sp, #16]
 802f9de:	4640      	mov	r0, r8
 802f9e0:	4649      	mov	r1, r9
 802f9e2:	2300      	movs	r3, #0
 802f9e4:	07ea      	lsls	r2, r5, #31
 802f9e6:	d504      	bpl.n	802f9f2 <_strtod_l+0x5c2>
 802f9e8:	e9da 2300 	ldrd	r2, r3, [sl]
 802f9ec:	f7e0 fe1c 	bl	8010628 <__aeabi_dmul>
 802f9f0:	2301      	movs	r3, #1
 802f9f2:	106d      	asrs	r5, r5, #1
 802f9f4:	f10a 0a08 	add.w	sl, sl, #8
 802f9f8:	d1f4      	bne.n	802f9e4 <_strtod_l+0x5b4>
 802f9fa:	b10b      	cbz	r3, 802fa00 <_strtod_l+0x5d0>
 802f9fc:	4680      	mov	r8, r0
 802f9fe:	4689      	mov	r9, r1
 802fa00:	9b04      	ldr	r3, [sp, #16]
 802fa02:	b1bb      	cbz	r3, 802fa34 <_strtod_l+0x604>
 802fa04:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802fa08:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802fa0c:	2b00      	cmp	r3, #0
 802fa0e:	4649      	mov	r1, r9
 802fa10:	dd10      	ble.n	802fa34 <_strtod_l+0x604>
 802fa12:	2b1f      	cmp	r3, #31
 802fa14:	f340 811e 	ble.w	802fc54 <_strtod_l+0x824>
 802fa18:	2b34      	cmp	r3, #52	; 0x34
 802fa1a:	bfde      	ittt	le
 802fa1c:	f04f 33ff 	movle.w	r3, #4294967295
 802fa20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802fa24:	4093      	lslle	r3, r2
 802fa26:	f04f 0800 	mov.w	r8, #0
 802fa2a:	bfcc      	ite	gt
 802fa2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802fa30:	ea03 0901 	andle.w	r9, r3, r1
 802fa34:	2200      	movs	r2, #0
 802fa36:	2300      	movs	r3, #0
 802fa38:	4640      	mov	r0, r8
 802fa3a:	4649      	mov	r1, r9
 802fa3c:	f7e1 f85c 	bl	8010af8 <__aeabi_dcmpeq>
 802fa40:	2800      	cmp	r0, #0
 802fa42:	d1a6      	bne.n	802f992 <_strtod_l+0x562>
 802fa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fa46:	9300      	str	r3, [sp, #0]
 802fa48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802fa4a:	4633      	mov	r3, r6
 802fa4c:	465a      	mov	r2, fp
 802fa4e:	4620      	mov	r0, r4
 802fa50:	f7ff f8cc 	bl	802ebec <__s2b>
 802fa54:	9009      	str	r0, [sp, #36]	; 0x24
 802fa56:	2800      	cmp	r0, #0
 802fa58:	f43f af2a 	beq.w	802f8b0 <_strtod_l+0x480>
 802fa5c:	9a08      	ldr	r2, [sp, #32]
 802fa5e:	9b05      	ldr	r3, [sp, #20]
 802fa60:	2a00      	cmp	r2, #0
 802fa62:	eba3 0307 	sub.w	r3, r3, r7
 802fa66:	bfa8      	it	ge
 802fa68:	2300      	movge	r3, #0
 802fa6a:	930c      	str	r3, [sp, #48]	; 0x30
 802fa6c:	2500      	movs	r5, #0
 802fa6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802fa72:	9312      	str	r3, [sp, #72]	; 0x48
 802fa74:	46ab      	mov	fp, r5
 802fa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fa78:	4620      	mov	r0, r4
 802fa7a:	6859      	ldr	r1, [r3, #4]
 802fa7c:	f7ff f80e 	bl	802ea9c <_Balloc>
 802fa80:	9005      	str	r0, [sp, #20]
 802fa82:	2800      	cmp	r0, #0
 802fa84:	f43f af18 	beq.w	802f8b8 <_strtod_l+0x488>
 802fa88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fa8a:	691a      	ldr	r2, [r3, #16]
 802fa8c:	3202      	adds	r2, #2
 802fa8e:	f103 010c 	add.w	r1, r3, #12
 802fa92:	0092      	lsls	r2, r2, #2
 802fa94:	300c      	adds	r0, #12
 802fa96:	f7fe f91e 	bl	802dcd6 <memcpy>
 802fa9a:	ec49 8b10 	vmov	d0, r8, r9
 802fa9e:	aa18      	add	r2, sp, #96	; 0x60
 802faa0:	a917      	add	r1, sp, #92	; 0x5c
 802faa2:	4620      	mov	r0, r4
 802faa4:	f7ff fbd6 	bl	802f254 <__d2b>
 802faa8:	ec49 8b18 	vmov	d8, r8, r9
 802faac:	9016      	str	r0, [sp, #88]	; 0x58
 802faae:	2800      	cmp	r0, #0
 802fab0:	f43f af02 	beq.w	802f8b8 <_strtod_l+0x488>
 802fab4:	2101      	movs	r1, #1
 802fab6:	4620      	mov	r0, r4
 802fab8:	f7ff f930 	bl	802ed1c <__i2b>
 802fabc:	4683      	mov	fp, r0
 802fabe:	2800      	cmp	r0, #0
 802fac0:	f43f aefa 	beq.w	802f8b8 <_strtod_l+0x488>
 802fac4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802fac6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802fac8:	2e00      	cmp	r6, #0
 802faca:	bfab      	itete	ge
 802facc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 802face:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 802fad0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802fad2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 802fad6:	bfac      	ite	ge
 802fad8:	eb06 0a03 	addge.w	sl, r6, r3
 802fadc:	1b9f      	sublt	r7, r3, r6
 802fade:	9b04      	ldr	r3, [sp, #16]
 802fae0:	1af6      	subs	r6, r6, r3
 802fae2:	4416      	add	r6, r2
 802fae4:	4ba0      	ldr	r3, [pc, #640]	; (802fd68 <_strtod_l+0x938>)
 802fae6:	3e01      	subs	r6, #1
 802fae8:	429e      	cmp	r6, r3
 802faea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802faee:	f280 80c4 	bge.w	802fc7a <_strtod_l+0x84a>
 802faf2:	1b9b      	subs	r3, r3, r6
 802faf4:	2b1f      	cmp	r3, #31
 802faf6:	eba2 0203 	sub.w	r2, r2, r3
 802fafa:	f04f 0101 	mov.w	r1, #1
 802fafe:	f300 80b0 	bgt.w	802fc62 <_strtod_l+0x832>
 802fb02:	fa01 f303 	lsl.w	r3, r1, r3
 802fb06:	930e      	str	r3, [sp, #56]	; 0x38
 802fb08:	2300      	movs	r3, #0
 802fb0a:	930d      	str	r3, [sp, #52]	; 0x34
 802fb0c:	eb0a 0602 	add.w	r6, sl, r2
 802fb10:	9b04      	ldr	r3, [sp, #16]
 802fb12:	45b2      	cmp	sl, r6
 802fb14:	4417      	add	r7, r2
 802fb16:	441f      	add	r7, r3
 802fb18:	4653      	mov	r3, sl
 802fb1a:	bfa8      	it	ge
 802fb1c:	4633      	movge	r3, r6
 802fb1e:	42bb      	cmp	r3, r7
 802fb20:	bfa8      	it	ge
 802fb22:	463b      	movge	r3, r7
 802fb24:	2b00      	cmp	r3, #0
 802fb26:	bfc2      	ittt	gt
 802fb28:	1af6      	subgt	r6, r6, r3
 802fb2a:	1aff      	subgt	r7, r7, r3
 802fb2c:	ebaa 0a03 	subgt.w	sl, sl, r3
 802fb30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802fb32:	2b00      	cmp	r3, #0
 802fb34:	dd17      	ble.n	802fb66 <_strtod_l+0x736>
 802fb36:	4659      	mov	r1, fp
 802fb38:	461a      	mov	r2, r3
 802fb3a:	4620      	mov	r0, r4
 802fb3c:	f7ff f9ae 	bl	802ee9c <__pow5mult>
 802fb40:	4683      	mov	fp, r0
 802fb42:	2800      	cmp	r0, #0
 802fb44:	f43f aeb8 	beq.w	802f8b8 <_strtod_l+0x488>
 802fb48:	4601      	mov	r1, r0
 802fb4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802fb4c:	4620      	mov	r0, r4
 802fb4e:	f7ff f8fb 	bl	802ed48 <__multiply>
 802fb52:	900b      	str	r0, [sp, #44]	; 0x2c
 802fb54:	2800      	cmp	r0, #0
 802fb56:	f43f aeaf 	beq.w	802f8b8 <_strtod_l+0x488>
 802fb5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fb5c:	4620      	mov	r0, r4
 802fb5e:	f7fe ffdd 	bl	802eb1c <_Bfree>
 802fb62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fb64:	9316      	str	r3, [sp, #88]	; 0x58
 802fb66:	2e00      	cmp	r6, #0
 802fb68:	f300 808c 	bgt.w	802fc84 <_strtod_l+0x854>
 802fb6c:	9b08      	ldr	r3, [sp, #32]
 802fb6e:	2b00      	cmp	r3, #0
 802fb70:	dd08      	ble.n	802fb84 <_strtod_l+0x754>
 802fb72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802fb74:	9905      	ldr	r1, [sp, #20]
 802fb76:	4620      	mov	r0, r4
 802fb78:	f7ff f990 	bl	802ee9c <__pow5mult>
 802fb7c:	9005      	str	r0, [sp, #20]
 802fb7e:	2800      	cmp	r0, #0
 802fb80:	f43f ae9a 	beq.w	802f8b8 <_strtod_l+0x488>
 802fb84:	2f00      	cmp	r7, #0
 802fb86:	dd08      	ble.n	802fb9a <_strtod_l+0x76a>
 802fb88:	9905      	ldr	r1, [sp, #20]
 802fb8a:	463a      	mov	r2, r7
 802fb8c:	4620      	mov	r0, r4
 802fb8e:	f7ff f9df 	bl	802ef50 <__lshift>
 802fb92:	9005      	str	r0, [sp, #20]
 802fb94:	2800      	cmp	r0, #0
 802fb96:	f43f ae8f 	beq.w	802f8b8 <_strtod_l+0x488>
 802fb9a:	f1ba 0f00 	cmp.w	sl, #0
 802fb9e:	dd08      	ble.n	802fbb2 <_strtod_l+0x782>
 802fba0:	4659      	mov	r1, fp
 802fba2:	4652      	mov	r2, sl
 802fba4:	4620      	mov	r0, r4
 802fba6:	f7ff f9d3 	bl	802ef50 <__lshift>
 802fbaa:	4683      	mov	fp, r0
 802fbac:	2800      	cmp	r0, #0
 802fbae:	f43f ae83 	beq.w	802f8b8 <_strtod_l+0x488>
 802fbb2:	9a05      	ldr	r2, [sp, #20]
 802fbb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fbb6:	4620      	mov	r0, r4
 802fbb8:	f7ff fa52 	bl	802f060 <__mdiff>
 802fbbc:	4605      	mov	r5, r0
 802fbbe:	2800      	cmp	r0, #0
 802fbc0:	f43f ae7a 	beq.w	802f8b8 <_strtod_l+0x488>
 802fbc4:	68c3      	ldr	r3, [r0, #12]
 802fbc6:	930b      	str	r3, [sp, #44]	; 0x2c
 802fbc8:	2300      	movs	r3, #0
 802fbca:	60c3      	str	r3, [r0, #12]
 802fbcc:	4659      	mov	r1, fp
 802fbce:	f7ff fa2b 	bl	802f028 <__mcmp>
 802fbd2:	2800      	cmp	r0, #0
 802fbd4:	da60      	bge.n	802fc98 <_strtod_l+0x868>
 802fbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fbd8:	ea53 0308 	orrs.w	r3, r3, r8
 802fbdc:	f040 8084 	bne.w	802fce8 <_strtod_l+0x8b8>
 802fbe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fbe4:	2b00      	cmp	r3, #0
 802fbe6:	d17f      	bne.n	802fce8 <_strtod_l+0x8b8>
 802fbe8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802fbec:	0d1b      	lsrs	r3, r3, #20
 802fbee:	051b      	lsls	r3, r3, #20
 802fbf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802fbf4:	d978      	bls.n	802fce8 <_strtod_l+0x8b8>
 802fbf6:	696b      	ldr	r3, [r5, #20]
 802fbf8:	b913      	cbnz	r3, 802fc00 <_strtod_l+0x7d0>
 802fbfa:	692b      	ldr	r3, [r5, #16]
 802fbfc:	2b01      	cmp	r3, #1
 802fbfe:	dd73      	ble.n	802fce8 <_strtod_l+0x8b8>
 802fc00:	4629      	mov	r1, r5
 802fc02:	2201      	movs	r2, #1
 802fc04:	4620      	mov	r0, r4
 802fc06:	f7ff f9a3 	bl	802ef50 <__lshift>
 802fc0a:	4659      	mov	r1, fp
 802fc0c:	4605      	mov	r5, r0
 802fc0e:	f7ff fa0b 	bl	802f028 <__mcmp>
 802fc12:	2800      	cmp	r0, #0
 802fc14:	dd68      	ble.n	802fce8 <_strtod_l+0x8b8>
 802fc16:	9904      	ldr	r1, [sp, #16]
 802fc18:	4a54      	ldr	r2, [pc, #336]	; (802fd6c <_strtod_l+0x93c>)
 802fc1a:	464b      	mov	r3, r9
 802fc1c:	2900      	cmp	r1, #0
 802fc1e:	f000 8084 	beq.w	802fd2a <_strtod_l+0x8fa>
 802fc22:	ea02 0109 	and.w	r1, r2, r9
 802fc26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802fc2a:	dc7e      	bgt.n	802fd2a <_strtod_l+0x8fa>
 802fc2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802fc30:	f77f aeb3 	ble.w	802f99a <_strtod_l+0x56a>
 802fc34:	4b4e      	ldr	r3, [pc, #312]	; (802fd70 <_strtod_l+0x940>)
 802fc36:	4640      	mov	r0, r8
 802fc38:	4649      	mov	r1, r9
 802fc3a:	2200      	movs	r2, #0
 802fc3c:	f7e0 fcf4 	bl	8010628 <__aeabi_dmul>
 802fc40:	4b4a      	ldr	r3, [pc, #296]	; (802fd6c <_strtod_l+0x93c>)
 802fc42:	400b      	ands	r3, r1
 802fc44:	4680      	mov	r8, r0
 802fc46:	4689      	mov	r9, r1
 802fc48:	2b00      	cmp	r3, #0
 802fc4a:	f47f ae3f 	bne.w	802f8cc <_strtod_l+0x49c>
 802fc4e:	2322      	movs	r3, #34	; 0x22
 802fc50:	6023      	str	r3, [r4, #0]
 802fc52:	e63b      	b.n	802f8cc <_strtod_l+0x49c>
 802fc54:	f04f 32ff 	mov.w	r2, #4294967295
 802fc58:	fa02 f303 	lsl.w	r3, r2, r3
 802fc5c:	ea03 0808 	and.w	r8, r3, r8
 802fc60:	e6e8      	b.n	802fa34 <_strtod_l+0x604>
 802fc62:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802fc66:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802fc6a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802fc6e:	36e2      	adds	r6, #226	; 0xe2
 802fc70:	fa01 f306 	lsl.w	r3, r1, r6
 802fc74:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802fc78:	e748      	b.n	802fb0c <_strtod_l+0x6dc>
 802fc7a:	2100      	movs	r1, #0
 802fc7c:	2301      	movs	r3, #1
 802fc7e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 802fc82:	e743      	b.n	802fb0c <_strtod_l+0x6dc>
 802fc84:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fc86:	4632      	mov	r2, r6
 802fc88:	4620      	mov	r0, r4
 802fc8a:	f7ff f961 	bl	802ef50 <__lshift>
 802fc8e:	9016      	str	r0, [sp, #88]	; 0x58
 802fc90:	2800      	cmp	r0, #0
 802fc92:	f47f af6b 	bne.w	802fb6c <_strtod_l+0x73c>
 802fc96:	e60f      	b.n	802f8b8 <_strtod_l+0x488>
 802fc98:	46ca      	mov	sl, r9
 802fc9a:	d171      	bne.n	802fd80 <_strtod_l+0x950>
 802fc9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fc9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fca2:	b352      	cbz	r2, 802fcfa <_strtod_l+0x8ca>
 802fca4:	4a33      	ldr	r2, [pc, #204]	; (802fd74 <_strtod_l+0x944>)
 802fca6:	4293      	cmp	r3, r2
 802fca8:	d12a      	bne.n	802fd00 <_strtod_l+0x8d0>
 802fcaa:	9b04      	ldr	r3, [sp, #16]
 802fcac:	4641      	mov	r1, r8
 802fcae:	b1fb      	cbz	r3, 802fcf0 <_strtod_l+0x8c0>
 802fcb0:	4b2e      	ldr	r3, [pc, #184]	; (802fd6c <_strtod_l+0x93c>)
 802fcb2:	ea09 0303 	and.w	r3, r9, r3
 802fcb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fcba:	f04f 32ff 	mov.w	r2, #4294967295
 802fcbe:	d81a      	bhi.n	802fcf6 <_strtod_l+0x8c6>
 802fcc0:	0d1b      	lsrs	r3, r3, #20
 802fcc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802fcc6:	fa02 f303 	lsl.w	r3, r2, r3
 802fcca:	4299      	cmp	r1, r3
 802fccc:	d118      	bne.n	802fd00 <_strtod_l+0x8d0>
 802fcce:	4b2a      	ldr	r3, [pc, #168]	; (802fd78 <_strtod_l+0x948>)
 802fcd0:	459a      	cmp	sl, r3
 802fcd2:	d102      	bne.n	802fcda <_strtod_l+0x8aa>
 802fcd4:	3101      	adds	r1, #1
 802fcd6:	f43f adef 	beq.w	802f8b8 <_strtod_l+0x488>
 802fcda:	4b24      	ldr	r3, [pc, #144]	; (802fd6c <_strtod_l+0x93c>)
 802fcdc:	ea0a 0303 	and.w	r3, sl, r3
 802fce0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802fce4:	f04f 0800 	mov.w	r8, #0
 802fce8:	9b04      	ldr	r3, [sp, #16]
 802fcea:	2b00      	cmp	r3, #0
 802fcec:	d1a2      	bne.n	802fc34 <_strtod_l+0x804>
 802fcee:	e5ed      	b.n	802f8cc <_strtod_l+0x49c>
 802fcf0:	f04f 33ff 	mov.w	r3, #4294967295
 802fcf4:	e7e9      	b.n	802fcca <_strtod_l+0x89a>
 802fcf6:	4613      	mov	r3, r2
 802fcf8:	e7e7      	b.n	802fcca <_strtod_l+0x89a>
 802fcfa:	ea53 0308 	orrs.w	r3, r3, r8
 802fcfe:	d08a      	beq.n	802fc16 <_strtod_l+0x7e6>
 802fd00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fd02:	b1e3      	cbz	r3, 802fd3e <_strtod_l+0x90e>
 802fd04:	ea13 0f0a 	tst.w	r3, sl
 802fd08:	d0ee      	beq.n	802fce8 <_strtod_l+0x8b8>
 802fd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fd0c:	9a04      	ldr	r2, [sp, #16]
 802fd0e:	4640      	mov	r0, r8
 802fd10:	4649      	mov	r1, r9
 802fd12:	b1c3      	cbz	r3, 802fd46 <_strtod_l+0x916>
 802fd14:	f7ff fb6f 	bl	802f3f6 <sulp>
 802fd18:	4602      	mov	r2, r0
 802fd1a:	460b      	mov	r3, r1
 802fd1c:	ec51 0b18 	vmov	r0, r1, d8
 802fd20:	f7e0 facc 	bl	80102bc <__adddf3>
 802fd24:	4680      	mov	r8, r0
 802fd26:	4689      	mov	r9, r1
 802fd28:	e7de      	b.n	802fce8 <_strtod_l+0x8b8>
 802fd2a:	4013      	ands	r3, r2
 802fd2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802fd30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802fd34:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802fd38:	f04f 38ff 	mov.w	r8, #4294967295
 802fd3c:	e7d4      	b.n	802fce8 <_strtod_l+0x8b8>
 802fd3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802fd40:	ea13 0f08 	tst.w	r3, r8
 802fd44:	e7e0      	b.n	802fd08 <_strtod_l+0x8d8>
 802fd46:	f7ff fb56 	bl	802f3f6 <sulp>
 802fd4a:	4602      	mov	r2, r0
 802fd4c:	460b      	mov	r3, r1
 802fd4e:	ec51 0b18 	vmov	r0, r1, d8
 802fd52:	f7e0 fab1 	bl	80102b8 <__aeabi_dsub>
 802fd56:	2200      	movs	r2, #0
 802fd58:	2300      	movs	r3, #0
 802fd5a:	4680      	mov	r8, r0
 802fd5c:	4689      	mov	r9, r1
 802fd5e:	f7e0 fecb 	bl	8010af8 <__aeabi_dcmpeq>
 802fd62:	2800      	cmp	r0, #0
 802fd64:	d0c0      	beq.n	802fce8 <_strtod_l+0x8b8>
 802fd66:	e618      	b.n	802f99a <_strtod_l+0x56a>
 802fd68:	fffffc02 	.word	0xfffffc02
 802fd6c:	7ff00000 	.word	0x7ff00000
 802fd70:	39500000 	.word	0x39500000
 802fd74:	000fffff 	.word	0x000fffff
 802fd78:	7fefffff 	.word	0x7fefffff
 802fd7c:	08034e40 	.word	0x08034e40
 802fd80:	4659      	mov	r1, fp
 802fd82:	4628      	mov	r0, r5
 802fd84:	f7ff fac0 	bl	802f308 <__ratio>
 802fd88:	ec57 6b10 	vmov	r6, r7, d0
 802fd8c:	ee10 0a10 	vmov	r0, s0
 802fd90:	2200      	movs	r2, #0
 802fd92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802fd96:	4639      	mov	r1, r7
 802fd98:	f7e0 fec2 	bl	8010b20 <__aeabi_dcmple>
 802fd9c:	2800      	cmp	r0, #0
 802fd9e:	d071      	beq.n	802fe84 <_strtod_l+0xa54>
 802fda0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fda2:	2b00      	cmp	r3, #0
 802fda4:	d17c      	bne.n	802fea0 <_strtod_l+0xa70>
 802fda6:	f1b8 0f00 	cmp.w	r8, #0
 802fdaa:	d15a      	bne.n	802fe62 <_strtod_l+0xa32>
 802fdac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fdb0:	2b00      	cmp	r3, #0
 802fdb2:	d15d      	bne.n	802fe70 <_strtod_l+0xa40>
 802fdb4:	4b90      	ldr	r3, [pc, #576]	; (802fff8 <_strtod_l+0xbc8>)
 802fdb6:	2200      	movs	r2, #0
 802fdb8:	4630      	mov	r0, r6
 802fdba:	4639      	mov	r1, r7
 802fdbc:	f7e0 fea6 	bl	8010b0c <__aeabi_dcmplt>
 802fdc0:	2800      	cmp	r0, #0
 802fdc2:	d15c      	bne.n	802fe7e <_strtod_l+0xa4e>
 802fdc4:	4630      	mov	r0, r6
 802fdc6:	4639      	mov	r1, r7
 802fdc8:	4b8c      	ldr	r3, [pc, #560]	; (802fffc <_strtod_l+0xbcc>)
 802fdca:	2200      	movs	r2, #0
 802fdcc:	f7e0 fc2c 	bl	8010628 <__aeabi_dmul>
 802fdd0:	4606      	mov	r6, r0
 802fdd2:	460f      	mov	r7, r1
 802fdd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802fdd8:	9606      	str	r6, [sp, #24]
 802fdda:	9307      	str	r3, [sp, #28]
 802fddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fde0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802fde4:	4b86      	ldr	r3, [pc, #536]	; (8030000 <_strtod_l+0xbd0>)
 802fde6:	ea0a 0303 	and.w	r3, sl, r3
 802fdea:	930d      	str	r3, [sp, #52]	; 0x34
 802fdec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fdee:	4b85      	ldr	r3, [pc, #532]	; (8030004 <_strtod_l+0xbd4>)
 802fdf0:	429a      	cmp	r2, r3
 802fdf2:	f040 8090 	bne.w	802ff16 <_strtod_l+0xae6>
 802fdf6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 802fdfa:	ec49 8b10 	vmov	d0, r8, r9
 802fdfe:	f7ff f9b9 	bl	802f174 <__ulp>
 802fe02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fe06:	ec51 0b10 	vmov	r0, r1, d0
 802fe0a:	f7e0 fc0d 	bl	8010628 <__aeabi_dmul>
 802fe0e:	4642      	mov	r2, r8
 802fe10:	464b      	mov	r3, r9
 802fe12:	f7e0 fa53 	bl	80102bc <__adddf3>
 802fe16:	460b      	mov	r3, r1
 802fe18:	4979      	ldr	r1, [pc, #484]	; (8030000 <_strtod_l+0xbd0>)
 802fe1a:	4a7b      	ldr	r2, [pc, #492]	; (8030008 <_strtod_l+0xbd8>)
 802fe1c:	4019      	ands	r1, r3
 802fe1e:	4291      	cmp	r1, r2
 802fe20:	4680      	mov	r8, r0
 802fe22:	d944      	bls.n	802feae <_strtod_l+0xa7e>
 802fe24:	ee18 2a90 	vmov	r2, s17
 802fe28:	4b78      	ldr	r3, [pc, #480]	; (803000c <_strtod_l+0xbdc>)
 802fe2a:	429a      	cmp	r2, r3
 802fe2c:	d104      	bne.n	802fe38 <_strtod_l+0xa08>
 802fe2e:	ee18 3a10 	vmov	r3, s16
 802fe32:	3301      	adds	r3, #1
 802fe34:	f43f ad40 	beq.w	802f8b8 <_strtod_l+0x488>
 802fe38:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 803000c <_strtod_l+0xbdc>
 802fe3c:	f04f 38ff 	mov.w	r8, #4294967295
 802fe40:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fe42:	4620      	mov	r0, r4
 802fe44:	f7fe fe6a 	bl	802eb1c <_Bfree>
 802fe48:	9905      	ldr	r1, [sp, #20]
 802fe4a:	4620      	mov	r0, r4
 802fe4c:	f7fe fe66 	bl	802eb1c <_Bfree>
 802fe50:	4659      	mov	r1, fp
 802fe52:	4620      	mov	r0, r4
 802fe54:	f7fe fe62 	bl	802eb1c <_Bfree>
 802fe58:	4629      	mov	r1, r5
 802fe5a:	4620      	mov	r0, r4
 802fe5c:	f7fe fe5e 	bl	802eb1c <_Bfree>
 802fe60:	e609      	b.n	802fa76 <_strtod_l+0x646>
 802fe62:	f1b8 0f01 	cmp.w	r8, #1
 802fe66:	d103      	bne.n	802fe70 <_strtod_l+0xa40>
 802fe68:	f1b9 0f00 	cmp.w	r9, #0
 802fe6c:	f43f ad95 	beq.w	802f99a <_strtod_l+0x56a>
 802fe70:	ed9f 7b55 	vldr	d7, [pc, #340]	; 802ffc8 <_strtod_l+0xb98>
 802fe74:	4f60      	ldr	r7, [pc, #384]	; (802fff8 <_strtod_l+0xbc8>)
 802fe76:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fe7a:	2600      	movs	r6, #0
 802fe7c:	e7ae      	b.n	802fddc <_strtod_l+0x9ac>
 802fe7e:	4f5f      	ldr	r7, [pc, #380]	; (802fffc <_strtod_l+0xbcc>)
 802fe80:	2600      	movs	r6, #0
 802fe82:	e7a7      	b.n	802fdd4 <_strtod_l+0x9a4>
 802fe84:	4b5d      	ldr	r3, [pc, #372]	; (802fffc <_strtod_l+0xbcc>)
 802fe86:	4630      	mov	r0, r6
 802fe88:	4639      	mov	r1, r7
 802fe8a:	2200      	movs	r2, #0
 802fe8c:	f7e0 fbcc 	bl	8010628 <__aeabi_dmul>
 802fe90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fe92:	4606      	mov	r6, r0
 802fe94:	460f      	mov	r7, r1
 802fe96:	2b00      	cmp	r3, #0
 802fe98:	d09c      	beq.n	802fdd4 <_strtod_l+0x9a4>
 802fe9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802fe9e:	e79d      	b.n	802fddc <_strtod_l+0x9ac>
 802fea0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802ffd0 <_strtod_l+0xba0>
 802fea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fea8:	ec57 6b17 	vmov	r6, r7, d7
 802feac:	e796      	b.n	802fddc <_strtod_l+0x9ac>
 802feae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802feb2:	9b04      	ldr	r3, [sp, #16]
 802feb4:	46ca      	mov	sl, r9
 802feb6:	2b00      	cmp	r3, #0
 802feb8:	d1c2      	bne.n	802fe40 <_strtod_l+0xa10>
 802feba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802febe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fec0:	0d1b      	lsrs	r3, r3, #20
 802fec2:	051b      	lsls	r3, r3, #20
 802fec4:	429a      	cmp	r2, r3
 802fec6:	d1bb      	bne.n	802fe40 <_strtod_l+0xa10>
 802fec8:	4630      	mov	r0, r6
 802feca:	4639      	mov	r1, r7
 802fecc:	f7e0 ff20 	bl	8010d10 <__aeabi_d2lz>
 802fed0:	f7e0 fb7c 	bl	80105cc <__aeabi_l2d>
 802fed4:	4602      	mov	r2, r0
 802fed6:	460b      	mov	r3, r1
 802fed8:	4630      	mov	r0, r6
 802feda:	4639      	mov	r1, r7
 802fedc:	f7e0 f9ec 	bl	80102b8 <__aeabi_dsub>
 802fee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fee2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fee6:	ea43 0308 	orr.w	r3, r3, r8
 802feea:	4313      	orrs	r3, r2
 802feec:	4606      	mov	r6, r0
 802feee:	460f      	mov	r7, r1
 802fef0:	d054      	beq.n	802ff9c <_strtod_l+0xb6c>
 802fef2:	a339      	add	r3, pc, #228	; (adr r3, 802ffd8 <_strtod_l+0xba8>)
 802fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fef8:	f7e0 fe08 	bl	8010b0c <__aeabi_dcmplt>
 802fefc:	2800      	cmp	r0, #0
 802fefe:	f47f ace5 	bne.w	802f8cc <_strtod_l+0x49c>
 802ff02:	a337      	add	r3, pc, #220	; (adr r3, 802ffe0 <_strtod_l+0xbb0>)
 802ff04:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff08:	4630      	mov	r0, r6
 802ff0a:	4639      	mov	r1, r7
 802ff0c:	f7e0 fe1c 	bl	8010b48 <__aeabi_dcmpgt>
 802ff10:	2800      	cmp	r0, #0
 802ff12:	d095      	beq.n	802fe40 <_strtod_l+0xa10>
 802ff14:	e4da      	b.n	802f8cc <_strtod_l+0x49c>
 802ff16:	9b04      	ldr	r3, [sp, #16]
 802ff18:	b333      	cbz	r3, 802ff68 <_strtod_l+0xb38>
 802ff1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ff1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802ff20:	d822      	bhi.n	802ff68 <_strtod_l+0xb38>
 802ff22:	a331      	add	r3, pc, #196	; (adr r3, 802ffe8 <_strtod_l+0xbb8>)
 802ff24:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff28:	4630      	mov	r0, r6
 802ff2a:	4639      	mov	r1, r7
 802ff2c:	f7e0 fdf8 	bl	8010b20 <__aeabi_dcmple>
 802ff30:	b1a0      	cbz	r0, 802ff5c <_strtod_l+0xb2c>
 802ff32:	4639      	mov	r1, r7
 802ff34:	4630      	mov	r0, r6
 802ff36:	f7e0 fe4f 	bl	8010bd8 <__aeabi_d2uiz>
 802ff3a:	2801      	cmp	r0, #1
 802ff3c:	bf38      	it	cc
 802ff3e:	2001      	movcc	r0, #1
 802ff40:	f7e0 faf8 	bl	8010534 <__aeabi_ui2d>
 802ff44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ff46:	4606      	mov	r6, r0
 802ff48:	460f      	mov	r7, r1
 802ff4a:	bb23      	cbnz	r3, 802ff96 <_strtod_l+0xb66>
 802ff4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802ff50:	9010      	str	r0, [sp, #64]	; 0x40
 802ff52:	9311      	str	r3, [sp, #68]	; 0x44
 802ff54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802ff58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802ff5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ff5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802ff60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802ff64:	1a9b      	subs	r3, r3, r2
 802ff66:	930f      	str	r3, [sp, #60]	; 0x3c
 802ff68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802ff6c:	eeb0 0a48 	vmov.f32	s0, s16
 802ff70:	eef0 0a68 	vmov.f32	s1, s17
 802ff74:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802ff78:	f7ff f8fc 	bl	802f174 <__ulp>
 802ff7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802ff80:	ec53 2b10 	vmov	r2, r3, d0
 802ff84:	f7e0 fb50 	bl	8010628 <__aeabi_dmul>
 802ff88:	ec53 2b18 	vmov	r2, r3, d8
 802ff8c:	f7e0 f996 	bl	80102bc <__adddf3>
 802ff90:	4680      	mov	r8, r0
 802ff92:	4689      	mov	r9, r1
 802ff94:	e78d      	b.n	802feb2 <_strtod_l+0xa82>
 802ff96:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802ff9a:	e7db      	b.n	802ff54 <_strtod_l+0xb24>
 802ff9c:	a314      	add	r3, pc, #80	; (adr r3, 802fff0 <_strtod_l+0xbc0>)
 802ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffa2:	f7e0 fdb3 	bl	8010b0c <__aeabi_dcmplt>
 802ffa6:	e7b3      	b.n	802ff10 <_strtod_l+0xae0>
 802ffa8:	2300      	movs	r3, #0
 802ffaa:	930a      	str	r3, [sp, #40]	; 0x28
 802ffac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802ffae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802ffb0:	6013      	str	r3, [r2, #0]
 802ffb2:	f7ff ba7c 	b.w	802f4ae <_strtod_l+0x7e>
 802ffb6:	2a65      	cmp	r2, #101	; 0x65
 802ffb8:	f43f ab75 	beq.w	802f6a6 <_strtod_l+0x276>
 802ffbc:	2a45      	cmp	r2, #69	; 0x45
 802ffbe:	f43f ab72 	beq.w	802f6a6 <_strtod_l+0x276>
 802ffc2:	2301      	movs	r3, #1
 802ffc4:	f7ff bbaa 	b.w	802f71c <_strtod_l+0x2ec>
 802ffc8:	00000000 	.word	0x00000000
 802ffcc:	bff00000 	.word	0xbff00000
 802ffd0:	00000000 	.word	0x00000000
 802ffd4:	3ff00000 	.word	0x3ff00000
 802ffd8:	94a03595 	.word	0x94a03595
 802ffdc:	3fdfffff 	.word	0x3fdfffff
 802ffe0:	35afe535 	.word	0x35afe535
 802ffe4:	3fe00000 	.word	0x3fe00000
 802ffe8:	ffc00000 	.word	0xffc00000
 802ffec:	41dfffff 	.word	0x41dfffff
 802fff0:	94a03595 	.word	0x94a03595
 802fff4:	3fcfffff 	.word	0x3fcfffff
 802fff8:	3ff00000 	.word	0x3ff00000
 802fffc:	3fe00000 	.word	0x3fe00000
 8030000:	7ff00000 	.word	0x7ff00000
 8030004:	7fe00000 	.word	0x7fe00000
 8030008:	7c9fffff 	.word	0x7c9fffff
 803000c:	7fefffff 	.word	0x7fefffff

08030010 <_strtod_r>:
 8030010:	4b01      	ldr	r3, [pc, #4]	; (8030018 <_strtod_r+0x8>)
 8030012:	f7ff ba0d 	b.w	802f430 <_strtod_l>
 8030016:	bf00      	nop
 8030018:	2000018c 	.word	0x2000018c

0803001c <_strtol_l.constprop.0>:
 803001c:	2b01      	cmp	r3, #1
 803001e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030022:	d001      	beq.n	8030028 <_strtol_l.constprop.0+0xc>
 8030024:	2b24      	cmp	r3, #36	; 0x24
 8030026:	d906      	bls.n	8030036 <_strtol_l.constprop.0+0x1a>
 8030028:	f7fd fe20 	bl	802dc6c <__errno>
 803002c:	2316      	movs	r3, #22
 803002e:	6003      	str	r3, [r0, #0]
 8030030:	2000      	movs	r0, #0
 8030032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030036:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 803011c <_strtol_l.constprop.0+0x100>
 803003a:	460d      	mov	r5, r1
 803003c:	462e      	mov	r6, r5
 803003e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8030042:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8030046:	f017 0708 	ands.w	r7, r7, #8
 803004a:	d1f7      	bne.n	803003c <_strtol_l.constprop.0+0x20>
 803004c:	2c2d      	cmp	r4, #45	; 0x2d
 803004e:	d132      	bne.n	80300b6 <_strtol_l.constprop.0+0x9a>
 8030050:	782c      	ldrb	r4, [r5, #0]
 8030052:	2701      	movs	r7, #1
 8030054:	1cb5      	adds	r5, r6, #2
 8030056:	2b00      	cmp	r3, #0
 8030058:	d05b      	beq.n	8030112 <_strtol_l.constprop.0+0xf6>
 803005a:	2b10      	cmp	r3, #16
 803005c:	d109      	bne.n	8030072 <_strtol_l.constprop.0+0x56>
 803005e:	2c30      	cmp	r4, #48	; 0x30
 8030060:	d107      	bne.n	8030072 <_strtol_l.constprop.0+0x56>
 8030062:	782c      	ldrb	r4, [r5, #0]
 8030064:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8030068:	2c58      	cmp	r4, #88	; 0x58
 803006a:	d14d      	bne.n	8030108 <_strtol_l.constprop.0+0xec>
 803006c:	786c      	ldrb	r4, [r5, #1]
 803006e:	2310      	movs	r3, #16
 8030070:	3502      	adds	r5, #2
 8030072:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8030076:	f108 38ff 	add.w	r8, r8, #4294967295
 803007a:	f04f 0e00 	mov.w	lr, #0
 803007e:	fbb8 f9f3 	udiv	r9, r8, r3
 8030082:	4676      	mov	r6, lr
 8030084:	fb03 8a19 	mls	sl, r3, r9, r8
 8030088:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 803008c:	f1bc 0f09 	cmp.w	ip, #9
 8030090:	d816      	bhi.n	80300c0 <_strtol_l.constprop.0+0xa4>
 8030092:	4664      	mov	r4, ip
 8030094:	42a3      	cmp	r3, r4
 8030096:	dd24      	ble.n	80300e2 <_strtol_l.constprop.0+0xc6>
 8030098:	f1be 3fff 	cmp.w	lr, #4294967295
 803009c:	d008      	beq.n	80300b0 <_strtol_l.constprop.0+0x94>
 803009e:	45b1      	cmp	r9, r6
 80300a0:	d31c      	bcc.n	80300dc <_strtol_l.constprop.0+0xc0>
 80300a2:	d101      	bne.n	80300a8 <_strtol_l.constprop.0+0x8c>
 80300a4:	45a2      	cmp	sl, r4
 80300a6:	db19      	blt.n	80300dc <_strtol_l.constprop.0+0xc0>
 80300a8:	fb06 4603 	mla	r6, r6, r3, r4
 80300ac:	f04f 0e01 	mov.w	lr, #1
 80300b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80300b4:	e7e8      	b.n	8030088 <_strtol_l.constprop.0+0x6c>
 80300b6:	2c2b      	cmp	r4, #43	; 0x2b
 80300b8:	bf04      	itt	eq
 80300ba:	782c      	ldrbeq	r4, [r5, #0]
 80300bc:	1cb5      	addeq	r5, r6, #2
 80300be:	e7ca      	b.n	8030056 <_strtol_l.constprop.0+0x3a>
 80300c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80300c4:	f1bc 0f19 	cmp.w	ip, #25
 80300c8:	d801      	bhi.n	80300ce <_strtol_l.constprop.0+0xb2>
 80300ca:	3c37      	subs	r4, #55	; 0x37
 80300cc:	e7e2      	b.n	8030094 <_strtol_l.constprop.0+0x78>
 80300ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80300d2:	f1bc 0f19 	cmp.w	ip, #25
 80300d6:	d804      	bhi.n	80300e2 <_strtol_l.constprop.0+0xc6>
 80300d8:	3c57      	subs	r4, #87	; 0x57
 80300da:	e7db      	b.n	8030094 <_strtol_l.constprop.0+0x78>
 80300dc:	f04f 3eff 	mov.w	lr, #4294967295
 80300e0:	e7e6      	b.n	80300b0 <_strtol_l.constprop.0+0x94>
 80300e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80300e6:	d105      	bne.n	80300f4 <_strtol_l.constprop.0+0xd8>
 80300e8:	2322      	movs	r3, #34	; 0x22
 80300ea:	6003      	str	r3, [r0, #0]
 80300ec:	4646      	mov	r6, r8
 80300ee:	b942      	cbnz	r2, 8030102 <_strtol_l.constprop.0+0xe6>
 80300f0:	4630      	mov	r0, r6
 80300f2:	e79e      	b.n	8030032 <_strtol_l.constprop.0+0x16>
 80300f4:	b107      	cbz	r7, 80300f8 <_strtol_l.constprop.0+0xdc>
 80300f6:	4276      	negs	r6, r6
 80300f8:	2a00      	cmp	r2, #0
 80300fa:	d0f9      	beq.n	80300f0 <_strtol_l.constprop.0+0xd4>
 80300fc:	f1be 0f00 	cmp.w	lr, #0
 8030100:	d000      	beq.n	8030104 <_strtol_l.constprop.0+0xe8>
 8030102:	1e69      	subs	r1, r5, #1
 8030104:	6011      	str	r1, [r2, #0]
 8030106:	e7f3      	b.n	80300f0 <_strtol_l.constprop.0+0xd4>
 8030108:	2430      	movs	r4, #48	; 0x30
 803010a:	2b00      	cmp	r3, #0
 803010c:	d1b1      	bne.n	8030072 <_strtol_l.constprop.0+0x56>
 803010e:	2308      	movs	r3, #8
 8030110:	e7af      	b.n	8030072 <_strtol_l.constprop.0+0x56>
 8030112:	2c30      	cmp	r4, #48	; 0x30
 8030114:	d0a5      	beq.n	8030062 <_strtol_l.constprop.0+0x46>
 8030116:	230a      	movs	r3, #10
 8030118:	e7ab      	b.n	8030072 <_strtol_l.constprop.0+0x56>
 803011a:	bf00      	nop
 803011c:	08034e69 	.word	0x08034e69

08030120 <_strtol_r>:
 8030120:	f7ff bf7c 	b.w	803001c <_strtol_l.constprop.0>

08030124 <__ssputs_r>:
 8030124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030128:	688e      	ldr	r6, [r1, #8]
 803012a:	461f      	mov	r7, r3
 803012c:	42be      	cmp	r6, r7
 803012e:	680b      	ldr	r3, [r1, #0]
 8030130:	4682      	mov	sl, r0
 8030132:	460c      	mov	r4, r1
 8030134:	4690      	mov	r8, r2
 8030136:	d82c      	bhi.n	8030192 <__ssputs_r+0x6e>
 8030138:	898a      	ldrh	r2, [r1, #12]
 803013a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 803013e:	d026      	beq.n	803018e <__ssputs_r+0x6a>
 8030140:	6965      	ldr	r5, [r4, #20]
 8030142:	6909      	ldr	r1, [r1, #16]
 8030144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8030148:	eba3 0901 	sub.w	r9, r3, r1
 803014c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8030150:	1c7b      	adds	r3, r7, #1
 8030152:	444b      	add	r3, r9
 8030154:	106d      	asrs	r5, r5, #1
 8030156:	429d      	cmp	r5, r3
 8030158:	bf38      	it	cc
 803015a:	461d      	movcc	r5, r3
 803015c:	0553      	lsls	r3, r2, #21
 803015e:	d527      	bpl.n	80301b0 <__ssputs_r+0x8c>
 8030160:	4629      	mov	r1, r5
 8030162:	f7fc fa77 	bl	802c654 <_malloc_r>
 8030166:	4606      	mov	r6, r0
 8030168:	b360      	cbz	r0, 80301c4 <__ssputs_r+0xa0>
 803016a:	6921      	ldr	r1, [r4, #16]
 803016c:	464a      	mov	r2, r9
 803016e:	f7fd fdb2 	bl	802dcd6 <memcpy>
 8030172:	89a3      	ldrh	r3, [r4, #12]
 8030174:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8030178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803017c:	81a3      	strh	r3, [r4, #12]
 803017e:	6126      	str	r6, [r4, #16]
 8030180:	6165      	str	r5, [r4, #20]
 8030182:	444e      	add	r6, r9
 8030184:	eba5 0509 	sub.w	r5, r5, r9
 8030188:	6026      	str	r6, [r4, #0]
 803018a:	60a5      	str	r5, [r4, #8]
 803018c:	463e      	mov	r6, r7
 803018e:	42be      	cmp	r6, r7
 8030190:	d900      	bls.n	8030194 <__ssputs_r+0x70>
 8030192:	463e      	mov	r6, r7
 8030194:	6820      	ldr	r0, [r4, #0]
 8030196:	4632      	mov	r2, r6
 8030198:	4641      	mov	r1, r8
 803019a:	f7fd fbad 	bl	802d8f8 <memmove>
 803019e:	68a3      	ldr	r3, [r4, #8]
 80301a0:	1b9b      	subs	r3, r3, r6
 80301a2:	60a3      	str	r3, [r4, #8]
 80301a4:	6823      	ldr	r3, [r4, #0]
 80301a6:	4433      	add	r3, r6
 80301a8:	6023      	str	r3, [r4, #0]
 80301aa:	2000      	movs	r0, #0
 80301ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80301b0:	462a      	mov	r2, r5
 80301b2:	f001 face 	bl	8031752 <_realloc_r>
 80301b6:	4606      	mov	r6, r0
 80301b8:	2800      	cmp	r0, #0
 80301ba:	d1e0      	bne.n	803017e <__ssputs_r+0x5a>
 80301bc:	6921      	ldr	r1, [r4, #16]
 80301be:	4650      	mov	r0, sl
 80301c0:	f7fe fc20 	bl	802ea04 <_free_r>
 80301c4:	230c      	movs	r3, #12
 80301c6:	f8ca 3000 	str.w	r3, [sl]
 80301ca:	89a3      	ldrh	r3, [r4, #12]
 80301cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80301d0:	81a3      	strh	r3, [r4, #12]
 80301d2:	f04f 30ff 	mov.w	r0, #4294967295
 80301d6:	e7e9      	b.n	80301ac <__ssputs_r+0x88>

080301d8 <_svfiprintf_r>:
 80301d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80301dc:	4698      	mov	r8, r3
 80301de:	898b      	ldrh	r3, [r1, #12]
 80301e0:	061b      	lsls	r3, r3, #24
 80301e2:	b09d      	sub	sp, #116	; 0x74
 80301e4:	4607      	mov	r7, r0
 80301e6:	460d      	mov	r5, r1
 80301e8:	4614      	mov	r4, r2
 80301ea:	d50e      	bpl.n	803020a <_svfiprintf_r+0x32>
 80301ec:	690b      	ldr	r3, [r1, #16]
 80301ee:	b963      	cbnz	r3, 803020a <_svfiprintf_r+0x32>
 80301f0:	2140      	movs	r1, #64	; 0x40
 80301f2:	f7fc fa2f 	bl	802c654 <_malloc_r>
 80301f6:	6028      	str	r0, [r5, #0]
 80301f8:	6128      	str	r0, [r5, #16]
 80301fa:	b920      	cbnz	r0, 8030206 <_svfiprintf_r+0x2e>
 80301fc:	230c      	movs	r3, #12
 80301fe:	603b      	str	r3, [r7, #0]
 8030200:	f04f 30ff 	mov.w	r0, #4294967295
 8030204:	e0d0      	b.n	80303a8 <_svfiprintf_r+0x1d0>
 8030206:	2340      	movs	r3, #64	; 0x40
 8030208:	616b      	str	r3, [r5, #20]
 803020a:	2300      	movs	r3, #0
 803020c:	9309      	str	r3, [sp, #36]	; 0x24
 803020e:	2320      	movs	r3, #32
 8030210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030214:	f8cd 800c 	str.w	r8, [sp, #12]
 8030218:	2330      	movs	r3, #48	; 0x30
 803021a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80303c0 <_svfiprintf_r+0x1e8>
 803021e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030222:	f04f 0901 	mov.w	r9, #1
 8030226:	4623      	mov	r3, r4
 8030228:	469a      	mov	sl, r3
 803022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803022e:	b10a      	cbz	r2, 8030234 <_svfiprintf_r+0x5c>
 8030230:	2a25      	cmp	r2, #37	; 0x25
 8030232:	d1f9      	bne.n	8030228 <_svfiprintf_r+0x50>
 8030234:	ebba 0b04 	subs.w	fp, sl, r4
 8030238:	d00b      	beq.n	8030252 <_svfiprintf_r+0x7a>
 803023a:	465b      	mov	r3, fp
 803023c:	4622      	mov	r2, r4
 803023e:	4629      	mov	r1, r5
 8030240:	4638      	mov	r0, r7
 8030242:	f7ff ff6f 	bl	8030124 <__ssputs_r>
 8030246:	3001      	adds	r0, #1
 8030248:	f000 80a9 	beq.w	803039e <_svfiprintf_r+0x1c6>
 803024c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803024e:	445a      	add	r2, fp
 8030250:	9209      	str	r2, [sp, #36]	; 0x24
 8030252:	f89a 3000 	ldrb.w	r3, [sl]
 8030256:	2b00      	cmp	r3, #0
 8030258:	f000 80a1 	beq.w	803039e <_svfiprintf_r+0x1c6>
 803025c:	2300      	movs	r3, #0
 803025e:	f04f 32ff 	mov.w	r2, #4294967295
 8030262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030266:	f10a 0a01 	add.w	sl, sl, #1
 803026a:	9304      	str	r3, [sp, #16]
 803026c:	9307      	str	r3, [sp, #28]
 803026e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030272:	931a      	str	r3, [sp, #104]	; 0x68
 8030274:	4654      	mov	r4, sl
 8030276:	2205      	movs	r2, #5
 8030278:	f814 1b01 	ldrb.w	r1, [r4], #1
 803027c:	4850      	ldr	r0, [pc, #320]	; (80303c0 <_svfiprintf_r+0x1e8>)
 803027e:	f7df ffbf 	bl	8010200 <memchr>
 8030282:	9a04      	ldr	r2, [sp, #16]
 8030284:	b9d8      	cbnz	r0, 80302be <_svfiprintf_r+0xe6>
 8030286:	06d0      	lsls	r0, r2, #27
 8030288:	bf44      	itt	mi
 803028a:	2320      	movmi	r3, #32
 803028c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030290:	0711      	lsls	r1, r2, #28
 8030292:	bf44      	itt	mi
 8030294:	232b      	movmi	r3, #43	; 0x2b
 8030296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803029a:	f89a 3000 	ldrb.w	r3, [sl]
 803029e:	2b2a      	cmp	r3, #42	; 0x2a
 80302a0:	d015      	beq.n	80302ce <_svfiprintf_r+0xf6>
 80302a2:	9a07      	ldr	r2, [sp, #28]
 80302a4:	4654      	mov	r4, sl
 80302a6:	2000      	movs	r0, #0
 80302a8:	f04f 0c0a 	mov.w	ip, #10
 80302ac:	4621      	mov	r1, r4
 80302ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80302b2:	3b30      	subs	r3, #48	; 0x30
 80302b4:	2b09      	cmp	r3, #9
 80302b6:	d94d      	bls.n	8030354 <_svfiprintf_r+0x17c>
 80302b8:	b1b0      	cbz	r0, 80302e8 <_svfiprintf_r+0x110>
 80302ba:	9207      	str	r2, [sp, #28]
 80302bc:	e014      	b.n	80302e8 <_svfiprintf_r+0x110>
 80302be:	eba0 0308 	sub.w	r3, r0, r8
 80302c2:	fa09 f303 	lsl.w	r3, r9, r3
 80302c6:	4313      	orrs	r3, r2
 80302c8:	9304      	str	r3, [sp, #16]
 80302ca:	46a2      	mov	sl, r4
 80302cc:	e7d2      	b.n	8030274 <_svfiprintf_r+0x9c>
 80302ce:	9b03      	ldr	r3, [sp, #12]
 80302d0:	1d19      	adds	r1, r3, #4
 80302d2:	681b      	ldr	r3, [r3, #0]
 80302d4:	9103      	str	r1, [sp, #12]
 80302d6:	2b00      	cmp	r3, #0
 80302d8:	bfbb      	ittet	lt
 80302da:	425b      	neglt	r3, r3
 80302dc:	f042 0202 	orrlt.w	r2, r2, #2
 80302e0:	9307      	strge	r3, [sp, #28]
 80302e2:	9307      	strlt	r3, [sp, #28]
 80302e4:	bfb8      	it	lt
 80302e6:	9204      	strlt	r2, [sp, #16]
 80302e8:	7823      	ldrb	r3, [r4, #0]
 80302ea:	2b2e      	cmp	r3, #46	; 0x2e
 80302ec:	d10c      	bne.n	8030308 <_svfiprintf_r+0x130>
 80302ee:	7863      	ldrb	r3, [r4, #1]
 80302f0:	2b2a      	cmp	r3, #42	; 0x2a
 80302f2:	d134      	bne.n	803035e <_svfiprintf_r+0x186>
 80302f4:	9b03      	ldr	r3, [sp, #12]
 80302f6:	1d1a      	adds	r2, r3, #4
 80302f8:	681b      	ldr	r3, [r3, #0]
 80302fa:	9203      	str	r2, [sp, #12]
 80302fc:	2b00      	cmp	r3, #0
 80302fe:	bfb8      	it	lt
 8030300:	f04f 33ff 	movlt.w	r3, #4294967295
 8030304:	3402      	adds	r4, #2
 8030306:	9305      	str	r3, [sp, #20]
 8030308:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80303d0 <_svfiprintf_r+0x1f8>
 803030c:	7821      	ldrb	r1, [r4, #0]
 803030e:	2203      	movs	r2, #3
 8030310:	4650      	mov	r0, sl
 8030312:	f7df ff75 	bl	8010200 <memchr>
 8030316:	b138      	cbz	r0, 8030328 <_svfiprintf_r+0x150>
 8030318:	9b04      	ldr	r3, [sp, #16]
 803031a:	eba0 000a 	sub.w	r0, r0, sl
 803031e:	2240      	movs	r2, #64	; 0x40
 8030320:	4082      	lsls	r2, r0
 8030322:	4313      	orrs	r3, r2
 8030324:	3401      	adds	r4, #1
 8030326:	9304      	str	r3, [sp, #16]
 8030328:	f814 1b01 	ldrb.w	r1, [r4], #1
 803032c:	4825      	ldr	r0, [pc, #148]	; (80303c4 <_svfiprintf_r+0x1ec>)
 803032e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030332:	2206      	movs	r2, #6
 8030334:	f7df ff64 	bl	8010200 <memchr>
 8030338:	2800      	cmp	r0, #0
 803033a:	d038      	beq.n	80303ae <_svfiprintf_r+0x1d6>
 803033c:	4b22      	ldr	r3, [pc, #136]	; (80303c8 <_svfiprintf_r+0x1f0>)
 803033e:	bb1b      	cbnz	r3, 8030388 <_svfiprintf_r+0x1b0>
 8030340:	9b03      	ldr	r3, [sp, #12]
 8030342:	3307      	adds	r3, #7
 8030344:	f023 0307 	bic.w	r3, r3, #7
 8030348:	3308      	adds	r3, #8
 803034a:	9303      	str	r3, [sp, #12]
 803034c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803034e:	4433      	add	r3, r6
 8030350:	9309      	str	r3, [sp, #36]	; 0x24
 8030352:	e768      	b.n	8030226 <_svfiprintf_r+0x4e>
 8030354:	fb0c 3202 	mla	r2, ip, r2, r3
 8030358:	460c      	mov	r4, r1
 803035a:	2001      	movs	r0, #1
 803035c:	e7a6      	b.n	80302ac <_svfiprintf_r+0xd4>
 803035e:	2300      	movs	r3, #0
 8030360:	3401      	adds	r4, #1
 8030362:	9305      	str	r3, [sp, #20]
 8030364:	4619      	mov	r1, r3
 8030366:	f04f 0c0a 	mov.w	ip, #10
 803036a:	4620      	mov	r0, r4
 803036c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030370:	3a30      	subs	r2, #48	; 0x30
 8030372:	2a09      	cmp	r2, #9
 8030374:	d903      	bls.n	803037e <_svfiprintf_r+0x1a6>
 8030376:	2b00      	cmp	r3, #0
 8030378:	d0c6      	beq.n	8030308 <_svfiprintf_r+0x130>
 803037a:	9105      	str	r1, [sp, #20]
 803037c:	e7c4      	b.n	8030308 <_svfiprintf_r+0x130>
 803037e:	fb0c 2101 	mla	r1, ip, r1, r2
 8030382:	4604      	mov	r4, r0
 8030384:	2301      	movs	r3, #1
 8030386:	e7f0      	b.n	803036a <_svfiprintf_r+0x192>
 8030388:	ab03      	add	r3, sp, #12
 803038a:	9300      	str	r3, [sp, #0]
 803038c:	462a      	mov	r2, r5
 803038e:	4b0f      	ldr	r3, [pc, #60]	; (80303cc <_svfiprintf_r+0x1f4>)
 8030390:	a904      	add	r1, sp, #16
 8030392:	4638      	mov	r0, r7
 8030394:	f7fc fa8a 	bl	802c8ac <_printf_float>
 8030398:	1c42      	adds	r2, r0, #1
 803039a:	4606      	mov	r6, r0
 803039c:	d1d6      	bne.n	803034c <_svfiprintf_r+0x174>
 803039e:	89ab      	ldrh	r3, [r5, #12]
 80303a0:	065b      	lsls	r3, r3, #25
 80303a2:	f53f af2d 	bmi.w	8030200 <_svfiprintf_r+0x28>
 80303a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80303a8:	b01d      	add	sp, #116	; 0x74
 80303aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80303ae:	ab03      	add	r3, sp, #12
 80303b0:	9300      	str	r3, [sp, #0]
 80303b2:	462a      	mov	r2, r5
 80303b4:	4b05      	ldr	r3, [pc, #20]	; (80303cc <_svfiprintf_r+0x1f4>)
 80303b6:	a904      	add	r1, sp, #16
 80303b8:	4638      	mov	r0, r7
 80303ba:	f7fc fd1b 	bl	802cdf4 <_printf_i>
 80303be:	e7eb      	b.n	8030398 <_svfiprintf_r+0x1c0>
 80303c0:	08034f69 	.word	0x08034f69
 80303c4:	08034f73 	.word	0x08034f73
 80303c8:	0802c8ad 	.word	0x0802c8ad
 80303cc:	08030125 	.word	0x08030125
 80303d0:	08034f6f 	.word	0x08034f6f

080303d4 <_sungetc_r>:
 80303d4:	b538      	push	{r3, r4, r5, lr}
 80303d6:	1c4b      	adds	r3, r1, #1
 80303d8:	4614      	mov	r4, r2
 80303da:	d103      	bne.n	80303e4 <_sungetc_r+0x10>
 80303dc:	f04f 35ff 	mov.w	r5, #4294967295
 80303e0:	4628      	mov	r0, r5
 80303e2:	bd38      	pop	{r3, r4, r5, pc}
 80303e4:	8993      	ldrh	r3, [r2, #12]
 80303e6:	f023 0320 	bic.w	r3, r3, #32
 80303ea:	8193      	strh	r3, [r2, #12]
 80303ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80303ee:	6852      	ldr	r2, [r2, #4]
 80303f0:	b2cd      	uxtb	r5, r1
 80303f2:	b18b      	cbz	r3, 8030418 <_sungetc_r+0x44>
 80303f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80303f6:	4293      	cmp	r3, r2
 80303f8:	dd08      	ble.n	803040c <_sungetc_r+0x38>
 80303fa:	6823      	ldr	r3, [r4, #0]
 80303fc:	1e5a      	subs	r2, r3, #1
 80303fe:	6022      	str	r2, [r4, #0]
 8030400:	f803 5c01 	strb.w	r5, [r3, #-1]
 8030404:	6863      	ldr	r3, [r4, #4]
 8030406:	3301      	adds	r3, #1
 8030408:	6063      	str	r3, [r4, #4]
 803040a:	e7e9      	b.n	80303e0 <_sungetc_r+0xc>
 803040c:	4621      	mov	r1, r4
 803040e:	f000 fd8e 	bl	8030f2e <__submore>
 8030412:	2800      	cmp	r0, #0
 8030414:	d0f1      	beq.n	80303fa <_sungetc_r+0x26>
 8030416:	e7e1      	b.n	80303dc <_sungetc_r+0x8>
 8030418:	6921      	ldr	r1, [r4, #16]
 803041a:	6823      	ldr	r3, [r4, #0]
 803041c:	b151      	cbz	r1, 8030434 <_sungetc_r+0x60>
 803041e:	4299      	cmp	r1, r3
 8030420:	d208      	bcs.n	8030434 <_sungetc_r+0x60>
 8030422:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8030426:	42a9      	cmp	r1, r5
 8030428:	d104      	bne.n	8030434 <_sungetc_r+0x60>
 803042a:	3b01      	subs	r3, #1
 803042c:	3201      	adds	r2, #1
 803042e:	6023      	str	r3, [r4, #0]
 8030430:	6062      	str	r2, [r4, #4]
 8030432:	e7d5      	b.n	80303e0 <_sungetc_r+0xc>
 8030434:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8030438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803043c:	6363      	str	r3, [r4, #52]	; 0x34
 803043e:	2303      	movs	r3, #3
 8030440:	63a3      	str	r3, [r4, #56]	; 0x38
 8030442:	4623      	mov	r3, r4
 8030444:	f803 5f46 	strb.w	r5, [r3, #70]!
 8030448:	6023      	str	r3, [r4, #0]
 803044a:	2301      	movs	r3, #1
 803044c:	e7dc      	b.n	8030408 <_sungetc_r+0x34>

0803044e <__ssrefill_r>:
 803044e:	b510      	push	{r4, lr}
 8030450:	460c      	mov	r4, r1
 8030452:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030454:	b169      	cbz	r1, 8030472 <__ssrefill_r+0x24>
 8030456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803045a:	4299      	cmp	r1, r3
 803045c:	d001      	beq.n	8030462 <__ssrefill_r+0x14>
 803045e:	f7fe fad1 	bl	802ea04 <_free_r>
 8030462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030464:	6063      	str	r3, [r4, #4]
 8030466:	2000      	movs	r0, #0
 8030468:	6360      	str	r0, [r4, #52]	; 0x34
 803046a:	b113      	cbz	r3, 8030472 <__ssrefill_r+0x24>
 803046c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 803046e:	6023      	str	r3, [r4, #0]
 8030470:	bd10      	pop	{r4, pc}
 8030472:	6923      	ldr	r3, [r4, #16]
 8030474:	6023      	str	r3, [r4, #0]
 8030476:	2300      	movs	r3, #0
 8030478:	6063      	str	r3, [r4, #4]
 803047a:	89a3      	ldrh	r3, [r4, #12]
 803047c:	f043 0320 	orr.w	r3, r3, #32
 8030480:	81a3      	strh	r3, [r4, #12]
 8030482:	f04f 30ff 	mov.w	r0, #4294967295
 8030486:	e7f3      	b.n	8030470 <__ssrefill_r+0x22>

08030488 <__ssvfiscanf_r>:
 8030488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803048c:	460c      	mov	r4, r1
 803048e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8030492:	2100      	movs	r1, #0
 8030494:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8030498:	49a6      	ldr	r1, [pc, #664]	; (8030734 <__ssvfiscanf_r+0x2ac>)
 803049a:	91a0      	str	r1, [sp, #640]	; 0x280
 803049c:	f10d 0804 	add.w	r8, sp, #4
 80304a0:	49a5      	ldr	r1, [pc, #660]	; (8030738 <__ssvfiscanf_r+0x2b0>)
 80304a2:	4fa6      	ldr	r7, [pc, #664]	; (803073c <__ssvfiscanf_r+0x2b4>)
 80304a4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8030740 <__ssvfiscanf_r+0x2b8>
 80304a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80304ac:	4606      	mov	r6, r0
 80304ae:	91a1      	str	r1, [sp, #644]	; 0x284
 80304b0:	9300      	str	r3, [sp, #0]
 80304b2:	7813      	ldrb	r3, [r2, #0]
 80304b4:	2b00      	cmp	r3, #0
 80304b6:	f000 815a 	beq.w	803076e <__ssvfiscanf_r+0x2e6>
 80304ba:	5cf9      	ldrb	r1, [r7, r3]
 80304bc:	f011 0108 	ands.w	r1, r1, #8
 80304c0:	f102 0501 	add.w	r5, r2, #1
 80304c4:	d019      	beq.n	80304fa <__ssvfiscanf_r+0x72>
 80304c6:	6863      	ldr	r3, [r4, #4]
 80304c8:	2b00      	cmp	r3, #0
 80304ca:	dd0f      	ble.n	80304ec <__ssvfiscanf_r+0x64>
 80304cc:	6823      	ldr	r3, [r4, #0]
 80304ce:	781a      	ldrb	r2, [r3, #0]
 80304d0:	5cba      	ldrb	r2, [r7, r2]
 80304d2:	0712      	lsls	r2, r2, #28
 80304d4:	d401      	bmi.n	80304da <__ssvfiscanf_r+0x52>
 80304d6:	462a      	mov	r2, r5
 80304d8:	e7eb      	b.n	80304b2 <__ssvfiscanf_r+0x2a>
 80304da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80304dc:	3201      	adds	r2, #1
 80304de:	9245      	str	r2, [sp, #276]	; 0x114
 80304e0:	6862      	ldr	r2, [r4, #4]
 80304e2:	3301      	adds	r3, #1
 80304e4:	3a01      	subs	r2, #1
 80304e6:	6062      	str	r2, [r4, #4]
 80304e8:	6023      	str	r3, [r4, #0]
 80304ea:	e7ec      	b.n	80304c6 <__ssvfiscanf_r+0x3e>
 80304ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80304ee:	4621      	mov	r1, r4
 80304f0:	4630      	mov	r0, r6
 80304f2:	4798      	blx	r3
 80304f4:	2800      	cmp	r0, #0
 80304f6:	d0e9      	beq.n	80304cc <__ssvfiscanf_r+0x44>
 80304f8:	e7ed      	b.n	80304d6 <__ssvfiscanf_r+0x4e>
 80304fa:	2b25      	cmp	r3, #37	; 0x25
 80304fc:	d012      	beq.n	8030524 <__ssvfiscanf_r+0x9c>
 80304fe:	469a      	mov	sl, r3
 8030500:	6863      	ldr	r3, [r4, #4]
 8030502:	2b00      	cmp	r3, #0
 8030504:	f340 8091 	ble.w	803062a <__ssvfiscanf_r+0x1a2>
 8030508:	6822      	ldr	r2, [r4, #0]
 803050a:	7813      	ldrb	r3, [r2, #0]
 803050c:	4553      	cmp	r3, sl
 803050e:	f040 812e 	bne.w	803076e <__ssvfiscanf_r+0x2e6>
 8030512:	6863      	ldr	r3, [r4, #4]
 8030514:	3b01      	subs	r3, #1
 8030516:	6063      	str	r3, [r4, #4]
 8030518:	9b45      	ldr	r3, [sp, #276]	; 0x114
 803051a:	3201      	adds	r2, #1
 803051c:	3301      	adds	r3, #1
 803051e:	6022      	str	r2, [r4, #0]
 8030520:	9345      	str	r3, [sp, #276]	; 0x114
 8030522:	e7d8      	b.n	80304d6 <__ssvfiscanf_r+0x4e>
 8030524:	9141      	str	r1, [sp, #260]	; 0x104
 8030526:	9143      	str	r1, [sp, #268]	; 0x10c
 8030528:	7853      	ldrb	r3, [r2, #1]
 803052a:	2b2a      	cmp	r3, #42	; 0x2a
 803052c:	bf02      	ittt	eq
 803052e:	2310      	moveq	r3, #16
 8030530:	1c95      	addeq	r5, r2, #2
 8030532:	9341      	streq	r3, [sp, #260]	; 0x104
 8030534:	220a      	movs	r2, #10
 8030536:	46aa      	mov	sl, r5
 8030538:	f81a 1b01 	ldrb.w	r1, [sl], #1
 803053c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8030540:	2b09      	cmp	r3, #9
 8030542:	d91c      	bls.n	803057e <__ssvfiscanf_r+0xf6>
 8030544:	487e      	ldr	r0, [pc, #504]	; (8030740 <__ssvfiscanf_r+0x2b8>)
 8030546:	2203      	movs	r2, #3
 8030548:	f7df fe5a 	bl	8010200 <memchr>
 803054c:	b138      	cbz	r0, 803055e <__ssvfiscanf_r+0xd6>
 803054e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030550:	eba0 0009 	sub.w	r0, r0, r9
 8030554:	2301      	movs	r3, #1
 8030556:	4083      	lsls	r3, r0
 8030558:	4313      	orrs	r3, r2
 803055a:	9341      	str	r3, [sp, #260]	; 0x104
 803055c:	4655      	mov	r5, sl
 803055e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8030562:	2b78      	cmp	r3, #120	; 0x78
 8030564:	d806      	bhi.n	8030574 <__ssvfiscanf_r+0xec>
 8030566:	2b57      	cmp	r3, #87	; 0x57
 8030568:	d810      	bhi.n	803058c <__ssvfiscanf_r+0x104>
 803056a:	2b25      	cmp	r3, #37	; 0x25
 803056c:	d0c7      	beq.n	80304fe <__ssvfiscanf_r+0x76>
 803056e:	d857      	bhi.n	8030620 <__ssvfiscanf_r+0x198>
 8030570:	2b00      	cmp	r3, #0
 8030572:	d065      	beq.n	8030640 <__ssvfiscanf_r+0x1b8>
 8030574:	2303      	movs	r3, #3
 8030576:	9347      	str	r3, [sp, #284]	; 0x11c
 8030578:	230a      	movs	r3, #10
 803057a:	9342      	str	r3, [sp, #264]	; 0x108
 803057c:	e076      	b.n	803066c <__ssvfiscanf_r+0x1e4>
 803057e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8030580:	fb02 1103 	mla	r1, r2, r3, r1
 8030584:	3930      	subs	r1, #48	; 0x30
 8030586:	9143      	str	r1, [sp, #268]	; 0x10c
 8030588:	4655      	mov	r5, sl
 803058a:	e7d4      	b.n	8030536 <__ssvfiscanf_r+0xae>
 803058c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8030590:	2a20      	cmp	r2, #32
 8030592:	d8ef      	bhi.n	8030574 <__ssvfiscanf_r+0xec>
 8030594:	a101      	add	r1, pc, #4	; (adr r1, 803059c <__ssvfiscanf_r+0x114>)
 8030596:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803059a:	bf00      	nop
 803059c:	0803064f 	.word	0x0803064f
 80305a0:	08030575 	.word	0x08030575
 80305a4:	08030575 	.word	0x08030575
 80305a8:	080306ad 	.word	0x080306ad
 80305ac:	08030575 	.word	0x08030575
 80305b0:	08030575 	.word	0x08030575
 80305b4:	08030575 	.word	0x08030575
 80305b8:	08030575 	.word	0x08030575
 80305bc:	08030575 	.word	0x08030575
 80305c0:	08030575 	.word	0x08030575
 80305c4:	08030575 	.word	0x08030575
 80305c8:	080306c3 	.word	0x080306c3
 80305cc:	080306a9 	.word	0x080306a9
 80305d0:	08030627 	.word	0x08030627
 80305d4:	08030627 	.word	0x08030627
 80305d8:	08030627 	.word	0x08030627
 80305dc:	08030575 	.word	0x08030575
 80305e0:	08030665 	.word	0x08030665
 80305e4:	08030575 	.word	0x08030575
 80305e8:	08030575 	.word	0x08030575
 80305ec:	08030575 	.word	0x08030575
 80305f0:	08030575 	.word	0x08030575
 80305f4:	080306d3 	.word	0x080306d3
 80305f8:	080306a1 	.word	0x080306a1
 80305fc:	08030647 	.word	0x08030647
 8030600:	08030575 	.word	0x08030575
 8030604:	08030575 	.word	0x08030575
 8030608:	080306cf 	.word	0x080306cf
 803060c:	08030575 	.word	0x08030575
 8030610:	080306a9 	.word	0x080306a9
 8030614:	08030575 	.word	0x08030575
 8030618:	08030575 	.word	0x08030575
 803061c:	0803064f 	.word	0x0803064f
 8030620:	3b45      	subs	r3, #69	; 0x45
 8030622:	2b02      	cmp	r3, #2
 8030624:	d8a6      	bhi.n	8030574 <__ssvfiscanf_r+0xec>
 8030626:	2305      	movs	r3, #5
 8030628:	e01f      	b.n	803066a <__ssvfiscanf_r+0x1e2>
 803062a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803062c:	4621      	mov	r1, r4
 803062e:	4630      	mov	r0, r6
 8030630:	4798      	blx	r3
 8030632:	2800      	cmp	r0, #0
 8030634:	f43f af68 	beq.w	8030508 <__ssvfiscanf_r+0x80>
 8030638:	9844      	ldr	r0, [sp, #272]	; 0x110
 803063a:	2800      	cmp	r0, #0
 803063c:	f040 808d 	bne.w	803075a <__ssvfiscanf_r+0x2d2>
 8030640:	f04f 30ff 	mov.w	r0, #4294967295
 8030644:	e08f      	b.n	8030766 <__ssvfiscanf_r+0x2de>
 8030646:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030648:	f042 0220 	orr.w	r2, r2, #32
 803064c:	9241      	str	r2, [sp, #260]	; 0x104
 803064e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030654:	9241      	str	r2, [sp, #260]	; 0x104
 8030656:	2210      	movs	r2, #16
 8030658:	2b6f      	cmp	r3, #111	; 0x6f
 803065a:	9242      	str	r2, [sp, #264]	; 0x108
 803065c:	bf34      	ite	cc
 803065e:	2303      	movcc	r3, #3
 8030660:	2304      	movcs	r3, #4
 8030662:	e002      	b.n	803066a <__ssvfiscanf_r+0x1e2>
 8030664:	2300      	movs	r3, #0
 8030666:	9342      	str	r3, [sp, #264]	; 0x108
 8030668:	2303      	movs	r3, #3
 803066a:	9347      	str	r3, [sp, #284]	; 0x11c
 803066c:	6863      	ldr	r3, [r4, #4]
 803066e:	2b00      	cmp	r3, #0
 8030670:	dd3d      	ble.n	80306ee <__ssvfiscanf_r+0x266>
 8030672:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030674:	0659      	lsls	r1, r3, #25
 8030676:	d404      	bmi.n	8030682 <__ssvfiscanf_r+0x1fa>
 8030678:	6823      	ldr	r3, [r4, #0]
 803067a:	781a      	ldrb	r2, [r3, #0]
 803067c:	5cba      	ldrb	r2, [r7, r2]
 803067e:	0712      	lsls	r2, r2, #28
 8030680:	d43c      	bmi.n	80306fc <__ssvfiscanf_r+0x274>
 8030682:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8030684:	2b02      	cmp	r3, #2
 8030686:	dc4b      	bgt.n	8030720 <__ssvfiscanf_r+0x298>
 8030688:	466b      	mov	r3, sp
 803068a:	4622      	mov	r2, r4
 803068c:	a941      	add	r1, sp, #260	; 0x104
 803068e:	4630      	mov	r0, r6
 8030690:	f000 f9b6 	bl	8030a00 <_scanf_chars>
 8030694:	2801      	cmp	r0, #1
 8030696:	d06a      	beq.n	803076e <__ssvfiscanf_r+0x2e6>
 8030698:	2802      	cmp	r0, #2
 803069a:	f47f af1c 	bne.w	80304d6 <__ssvfiscanf_r+0x4e>
 803069e:	e7cb      	b.n	8030638 <__ssvfiscanf_r+0x1b0>
 80306a0:	2308      	movs	r3, #8
 80306a2:	9342      	str	r3, [sp, #264]	; 0x108
 80306a4:	2304      	movs	r3, #4
 80306a6:	e7e0      	b.n	803066a <__ssvfiscanf_r+0x1e2>
 80306a8:	220a      	movs	r2, #10
 80306aa:	e7d5      	b.n	8030658 <__ssvfiscanf_r+0x1d0>
 80306ac:	4629      	mov	r1, r5
 80306ae:	4640      	mov	r0, r8
 80306b0:	f000 fc04 	bl	8030ebc <__sccl>
 80306b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80306b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80306ba:	9341      	str	r3, [sp, #260]	; 0x104
 80306bc:	4605      	mov	r5, r0
 80306be:	2301      	movs	r3, #1
 80306c0:	e7d3      	b.n	803066a <__ssvfiscanf_r+0x1e2>
 80306c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80306c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80306c8:	9341      	str	r3, [sp, #260]	; 0x104
 80306ca:	2300      	movs	r3, #0
 80306cc:	e7cd      	b.n	803066a <__ssvfiscanf_r+0x1e2>
 80306ce:	2302      	movs	r3, #2
 80306d0:	e7cb      	b.n	803066a <__ssvfiscanf_r+0x1e2>
 80306d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80306d4:	06c3      	lsls	r3, r0, #27
 80306d6:	f53f aefe 	bmi.w	80304d6 <__ssvfiscanf_r+0x4e>
 80306da:	9b00      	ldr	r3, [sp, #0]
 80306dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80306de:	1d19      	adds	r1, r3, #4
 80306e0:	9100      	str	r1, [sp, #0]
 80306e2:	681b      	ldr	r3, [r3, #0]
 80306e4:	07c0      	lsls	r0, r0, #31
 80306e6:	bf4c      	ite	mi
 80306e8:	801a      	strhmi	r2, [r3, #0]
 80306ea:	601a      	strpl	r2, [r3, #0]
 80306ec:	e6f3      	b.n	80304d6 <__ssvfiscanf_r+0x4e>
 80306ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80306f0:	4621      	mov	r1, r4
 80306f2:	4630      	mov	r0, r6
 80306f4:	4798      	blx	r3
 80306f6:	2800      	cmp	r0, #0
 80306f8:	d0bb      	beq.n	8030672 <__ssvfiscanf_r+0x1ea>
 80306fa:	e79d      	b.n	8030638 <__ssvfiscanf_r+0x1b0>
 80306fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80306fe:	3201      	adds	r2, #1
 8030700:	9245      	str	r2, [sp, #276]	; 0x114
 8030702:	6862      	ldr	r2, [r4, #4]
 8030704:	3a01      	subs	r2, #1
 8030706:	2a00      	cmp	r2, #0
 8030708:	6062      	str	r2, [r4, #4]
 803070a:	dd02      	ble.n	8030712 <__ssvfiscanf_r+0x28a>
 803070c:	3301      	adds	r3, #1
 803070e:	6023      	str	r3, [r4, #0]
 8030710:	e7b2      	b.n	8030678 <__ssvfiscanf_r+0x1f0>
 8030712:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030714:	4621      	mov	r1, r4
 8030716:	4630      	mov	r0, r6
 8030718:	4798      	blx	r3
 803071a:	2800      	cmp	r0, #0
 803071c:	d0ac      	beq.n	8030678 <__ssvfiscanf_r+0x1f0>
 803071e:	e78b      	b.n	8030638 <__ssvfiscanf_r+0x1b0>
 8030720:	2b04      	cmp	r3, #4
 8030722:	dc0f      	bgt.n	8030744 <__ssvfiscanf_r+0x2bc>
 8030724:	466b      	mov	r3, sp
 8030726:	4622      	mov	r2, r4
 8030728:	a941      	add	r1, sp, #260	; 0x104
 803072a:	4630      	mov	r0, r6
 803072c:	f000 f9c2 	bl	8030ab4 <_scanf_i>
 8030730:	e7b0      	b.n	8030694 <__ssvfiscanf_r+0x20c>
 8030732:	bf00      	nop
 8030734:	080303d5 	.word	0x080303d5
 8030738:	0803044f 	.word	0x0803044f
 803073c:	08034e69 	.word	0x08034e69
 8030740:	08034f6f 	.word	0x08034f6f
 8030744:	4b0b      	ldr	r3, [pc, #44]	; (8030774 <__ssvfiscanf_r+0x2ec>)
 8030746:	2b00      	cmp	r3, #0
 8030748:	f43f aec5 	beq.w	80304d6 <__ssvfiscanf_r+0x4e>
 803074c:	466b      	mov	r3, sp
 803074e:	4622      	mov	r2, r4
 8030750:	a941      	add	r1, sp, #260	; 0x104
 8030752:	4630      	mov	r0, r6
 8030754:	f7fc fc70 	bl	802d038 <_scanf_float>
 8030758:	e79c      	b.n	8030694 <__ssvfiscanf_r+0x20c>
 803075a:	89a3      	ldrh	r3, [r4, #12]
 803075c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8030760:	bf18      	it	ne
 8030762:	f04f 30ff 	movne.w	r0, #4294967295
 8030766:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 803076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803076e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8030770:	e7f9      	b.n	8030766 <__ssvfiscanf_r+0x2de>
 8030772:	bf00      	nop
 8030774:	0802d039 	.word	0x0802d039

08030778 <__sfputc_r>:
 8030778:	6893      	ldr	r3, [r2, #8]
 803077a:	3b01      	subs	r3, #1
 803077c:	2b00      	cmp	r3, #0
 803077e:	b410      	push	{r4}
 8030780:	6093      	str	r3, [r2, #8]
 8030782:	da08      	bge.n	8030796 <__sfputc_r+0x1e>
 8030784:	6994      	ldr	r4, [r2, #24]
 8030786:	42a3      	cmp	r3, r4
 8030788:	db01      	blt.n	803078e <__sfputc_r+0x16>
 803078a:	290a      	cmp	r1, #10
 803078c:	d103      	bne.n	8030796 <__sfputc_r+0x1e>
 803078e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030792:	f7fd b80c 	b.w	802d7ae <__swbuf_r>
 8030796:	6813      	ldr	r3, [r2, #0]
 8030798:	1c58      	adds	r0, r3, #1
 803079a:	6010      	str	r0, [r2, #0]
 803079c:	7019      	strb	r1, [r3, #0]
 803079e:	4608      	mov	r0, r1
 80307a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80307a4:	4770      	bx	lr

080307a6 <__sfputs_r>:
 80307a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80307a8:	4606      	mov	r6, r0
 80307aa:	460f      	mov	r7, r1
 80307ac:	4614      	mov	r4, r2
 80307ae:	18d5      	adds	r5, r2, r3
 80307b0:	42ac      	cmp	r4, r5
 80307b2:	d101      	bne.n	80307b8 <__sfputs_r+0x12>
 80307b4:	2000      	movs	r0, #0
 80307b6:	e007      	b.n	80307c8 <__sfputs_r+0x22>
 80307b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80307bc:	463a      	mov	r2, r7
 80307be:	4630      	mov	r0, r6
 80307c0:	f7ff ffda 	bl	8030778 <__sfputc_r>
 80307c4:	1c43      	adds	r3, r0, #1
 80307c6:	d1f3      	bne.n	80307b0 <__sfputs_r+0xa>
 80307c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080307cc <_vfiprintf_r>:
 80307cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80307d0:	460d      	mov	r5, r1
 80307d2:	b09d      	sub	sp, #116	; 0x74
 80307d4:	4614      	mov	r4, r2
 80307d6:	4698      	mov	r8, r3
 80307d8:	4606      	mov	r6, r0
 80307da:	b118      	cbz	r0, 80307e4 <_vfiprintf_r+0x18>
 80307dc:	6a03      	ldr	r3, [r0, #32]
 80307de:	b90b      	cbnz	r3, 80307e4 <_vfiprintf_r+0x18>
 80307e0:	f7fc fec6 	bl	802d570 <__sinit>
 80307e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80307e6:	07d9      	lsls	r1, r3, #31
 80307e8:	d405      	bmi.n	80307f6 <_vfiprintf_r+0x2a>
 80307ea:	89ab      	ldrh	r3, [r5, #12]
 80307ec:	059a      	lsls	r2, r3, #22
 80307ee:	d402      	bmi.n	80307f6 <_vfiprintf_r+0x2a>
 80307f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80307f2:	f7fd fa66 	bl	802dcc2 <__retarget_lock_acquire_recursive>
 80307f6:	89ab      	ldrh	r3, [r5, #12]
 80307f8:	071b      	lsls	r3, r3, #28
 80307fa:	d501      	bpl.n	8030800 <_vfiprintf_r+0x34>
 80307fc:	692b      	ldr	r3, [r5, #16]
 80307fe:	b99b      	cbnz	r3, 8030828 <_vfiprintf_r+0x5c>
 8030800:	4629      	mov	r1, r5
 8030802:	4630      	mov	r0, r6
 8030804:	f7fd f810 	bl	802d828 <__swsetup_r>
 8030808:	b170      	cbz	r0, 8030828 <_vfiprintf_r+0x5c>
 803080a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803080c:	07dc      	lsls	r4, r3, #31
 803080e:	d504      	bpl.n	803081a <_vfiprintf_r+0x4e>
 8030810:	f04f 30ff 	mov.w	r0, #4294967295
 8030814:	b01d      	add	sp, #116	; 0x74
 8030816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803081a:	89ab      	ldrh	r3, [r5, #12]
 803081c:	0598      	lsls	r0, r3, #22
 803081e:	d4f7      	bmi.n	8030810 <_vfiprintf_r+0x44>
 8030820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030822:	f7fd fa4f 	bl	802dcc4 <__retarget_lock_release_recursive>
 8030826:	e7f3      	b.n	8030810 <_vfiprintf_r+0x44>
 8030828:	2300      	movs	r3, #0
 803082a:	9309      	str	r3, [sp, #36]	; 0x24
 803082c:	2320      	movs	r3, #32
 803082e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030832:	f8cd 800c 	str.w	r8, [sp, #12]
 8030836:	2330      	movs	r3, #48	; 0x30
 8030838:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80309ec <_vfiprintf_r+0x220>
 803083c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030840:	f04f 0901 	mov.w	r9, #1
 8030844:	4623      	mov	r3, r4
 8030846:	469a      	mov	sl, r3
 8030848:	f813 2b01 	ldrb.w	r2, [r3], #1
 803084c:	b10a      	cbz	r2, 8030852 <_vfiprintf_r+0x86>
 803084e:	2a25      	cmp	r2, #37	; 0x25
 8030850:	d1f9      	bne.n	8030846 <_vfiprintf_r+0x7a>
 8030852:	ebba 0b04 	subs.w	fp, sl, r4
 8030856:	d00b      	beq.n	8030870 <_vfiprintf_r+0xa4>
 8030858:	465b      	mov	r3, fp
 803085a:	4622      	mov	r2, r4
 803085c:	4629      	mov	r1, r5
 803085e:	4630      	mov	r0, r6
 8030860:	f7ff ffa1 	bl	80307a6 <__sfputs_r>
 8030864:	3001      	adds	r0, #1
 8030866:	f000 80a9 	beq.w	80309bc <_vfiprintf_r+0x1f0>
 803086a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803086c:	445a      	add	r2, fp
 803086e:	9209      	str	r2, [sp, #36]	; 0x24
 8030870:	f89a 3000 	ldrb.w	r3, [sl]
 8030874:	2b00      	cmp	r3, #0
 8030876:	f000 80a1 	beq.w	80309bc <_vfiprintf_r+0x1f0>
 803087a:	2300      	movs	r3, #0
 803087c:	f04f 32ff 	mov.w	r2, #4294967295
 8030880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030884:	f10a 0a01 	add.w	sl, sl, #1
 8030888:	9304      	str	r3, [sp, #16]
 803088a:	9307      	str	r3, [sp, #28]
 803088c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030890:	931a      	str	r3, [sp, #104]	; 0x68
 8030892:	4654      	mov	r4, sl
 8030894:	2205      	movs	r2, #5
 8030896:	f814 1b01 	ldrb.w	r1, [r4], #1
 803089a:	4854      	ldr	r0, [pc, #336]	; (80309ec <_vfiprintf_r+0x220>)
 803089c:	f7df fcb0 	bl	8010200 <memchr>
 80308a0:	9a04      	ldr	r2, [sp, #16]
 80308a2:	b9d8      	cbnz	r0, 80308dc <_vfiprintf_r+0x110>
 80308a4:	06d1      	lsls	r1, r2, #27
 80308a6:	bf44      	itt	mi
 80308a8:	2320      	movmi	r3, #32
 80308aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80308ae:	0713      	lsls	r3, r2, #28
 80308b0:	bf44      	itt	mi
 80308b2:	232b      	movmi	r3, #43	; 0x2b
 80308b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80308b8:	f89a 3000 	ldrb.w	r3, [sl]
 80308bc:	2b2a      	cmp	r3, #42	; 0x2a
 80308be:	d015      	beq.n	80308ec <_vfiprintf_r+0x120>
 80308c0:	9a07      	ldr	r2, [sp, #28]
 80308c2:	4654      	mov	r4, sl
 80308c4:	2000      	movs	r0, #0
 80308c6:	f04f 0c0a 	mov.w	ip, #10
 80308ca:	4621      	mov	r1, r4
 80308cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80308d0:	3b30      	subs	r3, #48	; 0x30
 80308d2:	2b09      	cmp	r3, #9
 80308d4:	d94d      	bls.n	8030972 <_vfiprintf_r+0x1a6>
 80308d6:	b1b0      	cbz	r0, 8030906 <_vfiprintf_r+0x13a>
 80308d8:	9207      	str	r2, [sp, #28]
 80308da:	e014      	b.n	8030906 <_vfiprintf_r+0x13a>
 80308dc:	eba0 0308 	sub.w	r3, r0, r8
 80308e0:	fa09 f303 	lsl.w	r3, r9, r3
 80308e4:	4313      	orrs	r3, r2
 80308e6:	9304      	str	r3, [sp, #16]
 80308e8:	46a2      	mov	sl, r4
 80308ea:	e7d2      	b.n	8030892 <_vfiprintf_r+0xc6>
 80308ec:	9b03      	ldr	r3, [sp, #12]
 80308ee:	1d19      	adds	r1, r3, #4
 80308f0:	681b      	ldr	r3, [r3, #0]
 80308f2:	9103      	str	r1, [sp, #12]
 80308f4:	2b00      	cmp	r3, #0
 80308f6:	bfbb      	ittet	lt
 80308f8:	425b      	neglt	r3, r3
 80308fa:	f042 0202 	orrlt.w	r2, r2, #2
 80308fe:	9307      	strge	r3, [sp, #28]
 8030900:	9307      	strlt	r3, [sp, #28]
 8030902:	bfb8      	it	lt
 8030904:	9204      	strlt	r2, [sp, #16]
 8030906:	7823      	ldrb	r3, [r4, #0]
 8030908:	2b2e      	cmp	r3, #46	; 0x2e
 803090a:	d10c      	bne.n	8030926 <_vfiprintf_r+0x15a>
 803090c:	7863      	ldrb	r3, [r4, #1]
 803090e:	2b2a      	cmp	r3, #42	; 0x2a
 8030910:	d134      	bne.n	803097c <_vfiprintf_r+0x1b0>
 8030912:	9b03      	ldr	r3, [sp, #12]
 8030914:	1d1a      	adds	r2, r3, #4
 8030916:	681b      	ldr	r3, [r3, #0]
 8030918:	9203      	str	r2, [sp, #12]
 803091a:	2b00      	cmp	r3, #0
 803091c:	bfb8      	it	lt
 803091e:	f04f 33ff 	movlt.w	r3, #4294967295
 8030922:	3402      	adds	r4, #2
 8030924:	9305      	str	r3, [sp, #20]
 8030926:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80309fc <_vfiprintf_r+0x230>
 803092a:	7821      	ldrb	r1, [r4, #0]
 803092c:	2203      	movs	r2, #3
 803092e:	4650      	mov	r0, sl
 8030930:	f7df fc66 	bl	8010200 <memchr>
 8030934:	b138      	cbz	r0, 8030946 <_vfiprintf_r+0x17a>
 8030936:	9b04      	ldr	r3, [sp, #16]
 8030938:	eba0 000a 	sub.w	r0, r0, sl
 803093c:	2240      	movs	r2, #64	; 0x40
 803093e:	4082      	lsls	r2, r0
 8030940:	4313      	orrs	r3, r2
 8030942:	3401      	adds	r4, #1
 8030944:	9304      	str	r3, [sp, #16]
 8030946:	f814 1b01 	ldrb.w	r1, [r4], #1
 803094a:	4829      	ldr	r0, [pc, #164]	; (80309f0 <_vfiprintf_r+0x224>)
 803094c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030950:	2206      	movs	r2, #6
 8030952:	f7df fc55 	bl	8010200 <memchr>
 8030956:	2800      	cmp	r0, #0
 8030958:	d03f      	beq.n	80309da <_vfiprintf_r+0x20e>
 803095a:	4b26      	ldr	r3, [pc, #152]	; (80309f4 <_vfiprintf_r+0x228>)
 803095c:	bb1b      	cbnz	r3, 80309a6 <_vfiprintf_r+0x1da>
 803095e:	9b03      	ldr	r3, [sp, #12]
 8030960:	3307      	adds	r3, #7
 8030962:	f023 0307 	bic.w	r3, r3, #7
 8030966:	3308      	adds	r3, #8
 8030968:	9303      	str	r3, [sp, #12]
 803096a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803096c:	443b      	add	r3, r7
 803096e:	9309      	str	r3, [sp, #36]	; 0x24
 8030970:	e768      	b.n	8030844 <_vfiprintf_r+0x78>
 8030972:	fb0c 3202 	mla	r2, ip, r2, r3
 8030976:	460c      	mov	r4, r1
 8030978:	2001      	movs	r0, #1
 803097a:	e7a6      	b.n	80308ca <_vfiprintf_r+0xfe>
 803097c:	2300      	movs	r3, #0
 803097e:	3401      	adds	r4, #1
 8030980:	9305      	str	r3, [sp, #20]
 8030982:	4619      	mov	r1, r3
 8030984:	f04f 0c0a 	mov.w	ip, #10
 8030988:	4620      	mov	r0, r4
 803098a:	f810 2b01 	ldrb.w	r2, [r0], #1
 803098e:	3a30      	subs	r2, #48	; 0x30
 8030990:	2a09      	cmp	r2, #9
 8030992:	d903      	bls.n	803099c <_vfiprintf_r+0x1d0>
 8030994:	2b00      	cmp	r3, #0
 8030996:	d0c6      	beq.n	8030926 <_vfiprintf_r+0x15a>
 8030998:	9105      	str	r1, [sp, #20]
 803099a:	e7c4      	b.n	8030926 <_vfiprintf_r+0x15a>
 803099c:	fb0c 2101 	mla	r1, ip, r1, r2
 80309a0:	4604      	mov	r4, r0
 80309a2:	2301      	movs	r3, #1
 80309a4:	e7f0      	b.n	8030988 <_vfiprintf_r+0x1bc>
 80309a6:	ab03      	add	r3, sp, #12
 80309a8:	9300      	str	r3, [sp, #0]
 80309aa:	462a      	mov	r2, r5
 80309ac:	4b12      	ldr	r3, [pc, #72]	; (80309f8 <_vfiprintf_r+0x22c>)
 80309ae:	a904      	add	r1, sp, #16
 80309b0:	4630      	mov	r0, r6
 80309b2:	f7fb ff7b 	bl	802c8ac <_printf_float>
 80309b6:	4607      	mov	r7, r0
 80309b8:	1c78      	adds	r0, r7, #1
 80309ba:	d1d6      	bne.n	803096a <_vfiprintf_r+0x19e>
 80309bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80309be:	07d9      	lsls	r1, r3, #31
 80309c0:	d405      	bmi.n	80309ce <_vfiprintf_r+0x202>
 80309c2:	89ab      	ldrh	r3, [r5, #12]
 80309c4:	059a      	lsls	r2, r3, #22
 80309c6:	d402      	bmi.n	80309ce <_vfiprintf_r+0x202>
 80309c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80309ca:	f7fd f97b 	bl	802dcc4 <__retarget_lock_release_recursive>
 80309ce:	89ab      	ldrh	r3, [r5, #12]
 80309d0:	065b      	lsls	r3, r3, #25
 80309d2:	f53f af1d 	bmi.w	8030810 <_vfiprintf_r+0x44>
 80309d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80309d8:	e71c      	b.n	8030814 <_vfiprintf_r+0x48>
 80309da:	ab03      	add	r3, sp, #12
 80309dc:	9300      	str	r3, [sp, #0]
 80309de:	462a      	mov	r2, r5
 80309e0:	4b05      	ldr	r3, [pc, #20]	; (80309f8 <_vfiprintf_r+0x22c>)
 80309e2:	a904      	add	r1, sp, #16
 80309e4:	4630      	mov	r0, r6
 80309e6:	f7fc fa05 	bl	802cdf4 <_printf_i>
 80309ea:	e7e4      	b.n	80309b6 <_vfiprintf_r+0x1ea>
 80309ec:	08034f69 	.word	0x08034f69
 80309f0:	08034f73 	.word	0x08034f73
 80309f4:	0802c8ad 	.word	0x0802c8ad
 80309f8:	080307a7 	.word	0x080307a7
 80309fc:	08034f6f 	.word	0x08034f6f

08030a00 <_scanf_chars>:
 8030a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030a04:	4615      	mov	r5, r2
 8030a06:	688a      	ldr	r2, [r1, #8]
 8030a08:	4680      	mov	r8, r0
 8030a0a:	460c      	mov	r4, r1
 8030a0c:	b932      	cbnz	r2, 8030a1c <_scanf_chars+0x1c>
 8030a0e:	698a      	ldr	r2, [r1, #24]
 8030a10:	2a00      	cmp	r2, #0
 8030a12:	bf0c      	ite	eq
 8030a14:	2201      	moveq	r2, #1
 8030a16:	f04f 32ff 	movne.w	r2, #4294967295
 8030a1a:	608a      	str	r2, [r1, #8]
 8030a1c:	6822      	ldr	r2, [r4, #0]
 8030a1e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8030ab0 <_scanf_chars+0xb0>
 8030a22:	06d1      	lsls	r1, r2, #27
 8030a24:	bf5f      	itttt	pl
 8030a26:	681a      	ldrpl	r2, [r3, #0]
 8030a28:	1d11      	addpl	r1, r2, #4
 8030a2a:	6019      	strpl	r1, [r3, #0]
 8030a2c:	6816      	ldrpl	r6, [r2, #0]
 8030a2e:	2700      	movs	r7, #0
 8030a30:	69a0      	ldr	r0, [r4, #24]
 8030a32:	b188      	cbz	r0, 8030a58 <_scanf_chars+0x58>
 8030a34:	2801      	cmp	r0, #1
 8030a36:	d107      	bne.n	8030a48 <_scanf_chars+0x48>
 8030a38:	682a      	ldr	r2, [r5, #0]
 8030a3a:	7811      	ldrb	r1, [r2, #0]
 8030a3c:	6962      	ldr	r2, [r4, #20]
 8030a3e:	5c52      	ldrb	r2, [r2, r1]
 8030a40:	b952      	cbnz	r2, 8030a58 <_scanf_chars+0x58>
 8030a42:	2f00      	cmp	r7, #0
 8030a44:	d031      	beq.n	8030aaa <_scanf_chars+0xaa>
 8030a46:	e022      	b.n	8030a8e <_scanf_chars+0x8e>
 8030a48:	2802      	cmp	r0, #2
 8030a4a:	d120      	bne.n	8030a8e <_scanf_chars+0x8e>
 8030a4c:	682b      	ldr	r3, [r5, #0]
 8030a4e:	781b      	ldrb	r3, [r3, #0]
 8030a50:	f819 3003 	ldrb.w	r3, [r9, r3]
 8030a54:	071b      	lsls	r3, r3, #28
 8030a56:	d41a      	bmi.n	8030a8e <_scanf_chars+0x8e>
 8030a58:	6823      	ldr	r3, [r4, #0]
 8030a5a:	06da      	lsls	r2, r3, #27
 8030a5c:	bf5e      	ittt	pl
 8030a5e:	682b      	ldrpl	r3, [r5, #0]
 8030a60:	781b      	ldrbpl	r3, [r3, #0]
 8030a62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8030a66:	682a      	ldr	r2, [r5, #0]
 8030a68:	686b      	ldr	r3, [r5, #4]
 8030a6a:	3201      	adds	r2, #1
 8030a6c:	602a      	str	r2, [r5, #0]
 8030a6e:	68a2      	ldr	r2, [r4, #8]
 8030a70:	3b01      	subs	r3, #1
 8030a72:	3a01      	subs	r2, #1
 8030a74:	606b      	str	r3, [r5, #4]
 8030a76:	3701      	adds	r7, #1
 8030a78:	60a2      	str	r2, [r4, #8]
 8030a7a:	b142      	cbz	r2, 8030a8e <_scanf_chars+0x8e>
 8030a7c:	2b00      	cmp	r3, #0
 8030a7e:	dcd7      	bgt.n	8030a30 <_scanf_chars+0x30>
 8030a80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030a84:	4629      	mov	r1, r5
 8030a86:	4640      	mov	r0, r8
 8030a88:	4798      	blx	r3
 8030a8a:	2800      	cmp	r0, #0
 8030a8c:	d0d0      	beq.n	8030a30 <_scanf_chars+0x30>
 8030a8e:	6823      	ldr	r3, [r4, #0]
 8030a90:	f013 0310 	ands.w	r3, r3, #16
 8030a94:	d105      	bne.n	8030aa2 <_scanf_chars+0xa2>
 8030a96:	68e2      	ldr	r2, [r4, #12]
 8030a98:	3201      	adds	r2, #1
 8030a9a:	60e2      	str	r2, [r4, #12]
 8030a9c:	69a2      	ldr	r2, [r4, #24]
 8030a9e:	b102      	cbz	r2, 8030aa2 <_scanf_chars+0xa2>
 8030aa0:	7033      	strb	r3, [r6, #0]
 8030aa2:	6923      	ldr	r3, [r4, #16]
 8030aa4:	443b      	add	r3, r7
 8030aa6:	6123      	str	r3, [r4, #16]
 8030aa8:	2000      	movs	r0, #0
 8030aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030aae:	bf00      	nop
 8030ab0:	08034e69 	.word	0x08034e69

08030ab4 <_scanf_i>:
 8030ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030ab8:	4698      	mov	r8, r3
 8030aba:	4b74      	ldr	r3, [pc, #464]	; (8030c8c <_scanf_i+0x1d8>)
 8030abc:	460c      	mov	r4, r1
 8030abe:	4682      	mov	sl, r0
 8030ac0:	4616      	mov	r6, r2
 8030ac2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030ac6:	b087      	sub	sp, #28
 8030ac8:	ab03      	add	r3, sp, #12
 8030aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8030ace:	4b70      	ldr	r3, [pc, #448]	; (8030c90 <_scanf_i+0x1dc>)
 8030ad0:	69a1      	ldr	r1, [r4, #24]
 8030ad2:	4a70      	ldr	r2, [pc, #448]	; (8030c94 <_scanf_i+0x1e0>)
 8030ad4:	2903      	cmp	r1, #3
 8030ad6:	bf18      	it	ne
 8030ad8:	461a      	movne	r2, r3
 8030ada:	68a3      	ldr	r3, [r4, #8]
 8030adc:	9201      	str	r2, [sp, #4]
 8030ade:	1e5a      	subs	r2, r3, #1
 8030ae0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8030ae4:	bf88      	it	hi
 8030ae6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8030aea:	4627      	mov	r7, r4
 8030aec:	bf82      	ittt	hi
 8030aee:	eb03 0905 	addhi.w	r9, r3, r5
 8030af2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8030af6:	60a3      	strhi	r3, [r4, #8]
 8030af8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8030afc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8030b00:	bf98      	it	ls
 8030b02:	f04f 0900 	movls.w	r9, #0
 8030b06:	6023      	str	r3, [r4, #0]
 8030b08:	463d      	mov	r5, r7
 8030b0a:	f04f 0b00 	mov.w	fp, #0
 8030b0e:	6831      	ldr	r1, [r6, #0]
 8030b10:	ab03      	add	r3, sp, #12
 8030b12:	7809      	ldrb	r1, [r1, #0]
 8030b14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8030b18:	2202      	movs	r2, #2
 8030b1a:	f7df fb71 	bl	8010200 <memchr>
 8030b1e:	b328      	cbz	r0, 8030b6c <_scanf_i+0xb8>
 8030b20:	f1bb 0f01 	cmp.w	fp, #1
 8030b24:	d159      	bne.n	8030bda <_scanf_i+0x126>
 8030b26:	6862      	ldr	r2, [r4, #4]
 8030b28:	b92a      	cbnz	r2, 8030b36 <_scanf_i+0x82>
 8030b2a:	6822      	ldr	r2, [r4, #0]
 8030b2c:	2308      	movs	r3, #8
 8030b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030b32:	6063      	str	r3, [r4, #4]
 8030b34:	6022      	str	r2, [r4, #0]
 8030b36:	6822      	ldr	r2, [r4, #0]
 8030b38:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8030b3c:	6022      	str	r2, [r4, #0]
 8030b3e:	68a2      	ldr	r2, [r4, #8]
 8030b40:	1e51      	subs	r1, r2, #1
 8030b42:	60a1      	str	r1, [r4, #8]
 8030b44:	b192      	cbz	r2, 8030b6c <_scanf_i+0xb8>
 8030b46:	6832      	ldr	r2, [r6, #0]
 8030b48:	1c51      	adds	r1, r2, #1
 8030b4a:	6031      	str	r1, [r6, #0]
 8030b4c:	7812      	ldrb	r2, [r2, #0]
 8030b4e:	f805 2b01 	strb.w	r2, [r5], #1
 8030b52:	6872      	ldr	r2, [r6, #4]
 8030b54:	3a01      	subs	r2, #1
 8030b56:	2a00      	cmp	r2, #0
 8030b58:	6072      	str	r2, [r6, #4]
 8030b5a:	dc07      	bgt.n	8030b6c <_scanf_i+0xb8>
 8030b5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8030b60:	4631      	mov	r1, r6
 8030b62:	4650      	mov	r0, sl
 8030b64:	4790      	blx	r2
 8030b66:	2800      	cmp	r0, #0
 8030b68:	f040 8085 	bne.w	8030c76 <_scanf_i+0x1c2>
 8030b6c:	f10b 0b01 	add.w	fp, fp, #1
 8030b70:	f1bb 0f03 	cmp.w	fp, #3
 8030b74:	d1cb      	bne.n	8030b0e <_scanf_i+0x5a>
 8030b76:	6863      	ldr	r3, [r4, #4]
 8030b78:	b90b      	cbnz	r3, 8030b7e <_scanf_i+0xca>
 8030b7a:	230a      	movs	r3, #10
 8030b7c:	6063      	str	r3, [r4, #4]
 8030b7e:	6863      	ldr	r3, [r4, #4]
 8030b80:	4945      	ldr	r1, [pc, #276]	; (8030c98 <_scanf_i+0x1e4>)
 8030b82:	6960      	ldr	r0, [r4, #20]
 8030b84:	1ac9      	subs	r1, r1, r3
 8030b86:	f000 f999 	bl	8030ebc <__sccl>
 8030b8a:	f04f 0b00 	mov.w	fp, #0
 8030b8e:	68a3      	ldr	r3, [r4, #8]
 8030b90:	6822      	ldr	r2, [r4, #0]
 8030b92:	2b00      	cmp	r3, #0
 8030b94:	d03d      	beq.n	8030c12 <_scanf_i+0x15e>
 8030b96:	6831      	ldr	r1, [r6, #0]
 8030b98:	6960      	ldr	r0, [r4, #20]
 8030b9a:	f891 c000 	ldrb.w	ip, [r1]
 8030b9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8030ba2:	2800      	cmp	r0, #0
 8030ba4:	d035      	beq.n	8030c12 <_scanf_i+0x15e>
 8030ba6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8030baa:	d124      	bne.n	8030bf6 <_scanf_i+0x142>
 8030bac:	0510      	lsls	r0, r2, #20
 8030bae:	d522      	bpl.n	8030bf6 <_scanf_i+0x142>
 8030bb0:	f10b 0b01 	add.w	fp, fp, #1
 8030bb4:	f1b9 0f00 	cmp.w	r9, #0
 8030bb8:	d003      	beq.n	8030bc2 <_scanf_i+0x10e>
 8030bba:	3301      	adds	r3, #1
 8030bbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8030bc0:	60a3      	str	r3, [r4, #8]
 8030bc2:	6873      	ldr	r3, [r6, #4]
 8030bc4:	3b01      	subs	r3, #1
 8030bc6:	2b00      	cmp	r3, #0
 8030bc8:	6073      	str	r3, [r6, #4]
 8030bca:	dd1b      	ble.n	8030c04 <_scanf_i+0x150>
 8030bcc:	6833      	ldr	r3, [r6, #0]
 8030bce:	3301      	adds	r3, #1
 8030bd0:	6033      	str	r3, [r6, #0]
 8030bd2:	68a3      	ldr	r3, [r4, #8]
 8030bd4:	3b01      	subs	r3, #1
 8030bd6:	60a3      	str	r3, [r4, #8]
 8030bd8:	e7d9      	b.n	8030b8e <_scanf_i+0xda>
 8030bda:	f1bb 0f02 	cmp.w	fp, #2
 8030bde:	d1ae      	bne.n	8030b3e <_scanf_i+0x8a>
 8030be0:	6822      	ldr	r2, [r4, #0]
 8030be2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8030be6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8030bea:	d1bf      	bne.n	8030b6c <_scanf_i+0xb8>
 8030bec:	2310      	movs	r3, #16
 8030bee:	6063      	str	r3, [r4, #4]
 8030bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030bf4:	e7a2      	b.n	8030b3c <_scanf_i+0x88>
 8030bf6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8030bfa:	6022      	str	r2, [r4, #0]
 8030bfc:	780b      	ldrb	r3, [r1, #0]
 8030bfe:	f805 3b01 	strb.w	r3, [r5], #1
 8030c02:	e7de      	b.n	8030bc2 <_scanf_i+0x10e>
 8030c04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030c08:	4631      	mov	r1, r6
 8030c0a:	4650      	mov	r0, sl
 8030c0c:	4798      	blx	r3
 8030c0e:	2800      	cmp	r0, #0
 8030c10:	d0df      	beq.n	8030bd2 <_scanf_i+0x11e>
 8030c12:	6823      	ldr	r3, [r4, #0]
 8030c14:	05d9      	lsls	r1, r3, #23
 8030c16:	d50d      	bpl.n	8030c34 <_scanf_i+0x180>
 8030c18:	42bd      	cmp	r5, r7
 8030c1a:	d909      	bls.n	8030c30 <_scanf_i+0x17c>
 8030c1c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8030c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8030c24:	4632      	mov	r2, r6
 8030c26:	4650      	mov	r0, sl
 8030c28:	4798      	blx	r3
 8030c2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8030c2e:	464d      	mov	r5, r9
 8030c30:	42bd      	cmp	r5, r7
 8030c32:	d028      	beq.n	8030c86 <_scanf_i+0x1d2>
 8030c34:	6822      	ldr	r2, [r4, #0]
 8030c36:	f012 0210 	ands.w	r2, r2, #16
 8030c3a:	d113      	bne.n	8030c64 <_scanf_i+0x1b0>
 8030c3c:	702a      	strb	r2, [r5, #0]
 8030c3e:	6863      	ldr	r3, [r4, #4]
 8030c40:	9e01      	ldr	r6, [sp, #4]
 8030c42:	4639      	mov	r1, r7
 8030c44:	4650      	mov	r0, sl
 8030c46:	47b0      	blx	r6
 8030c48:	f8d8 3000 	ldr.w	r3, [r8]
 8030c4c:	6821      	ldr	r1, [r4, #0]
 8030c4e:	1d1a      	adds	r2, r3, #4
 8030c50:	f8c8 2000 	str.w	r2, [r8]
 8030c54:	f011 0f20 	tst.w	r1, #32
 8030c58:	681b      	ldr	r3, [r3, #0]
 8030c5a:	d00f      	beq.n	8030c7c <_scanf_i+0x1c8>
 8030c5c:	6018      	str	r0, [r3, #0]
 8030c5e:	68e3      	ldr	r3, [r4, #12]
 8030c60:	3301      	adds	r3, #1
 8030c62:	60e3      	str	r3, [r4, #12]
 8030c64:	6923      	ldr	r3, [r4, #16]
 8030c66:	1bed      	subs	r5, r5, r7
 8030c68:	445d      	add	r5, fp
 8030c6a:	442b      	add	r3, r5
 8030c6c:	6123      	str	r3, [r4, #16]
 8030c6e:	2000      	movs	r0, #0
 8030c70:	b007      	add	sp, #28
 8030c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030c76:	f04f 0b00 	mov.w	fp, #0
 8030c7a:	e7ca      	b.n	8030c12 <_scanf_i+0x15e>
 8030c7c:	07ca      	lsls	r2, r1, #31
 8030c7e:	bf4c      	ite	mi
 8030c80:	8018      	strhmi	r0, [r3, #0]
 8030c82:	6018      	strpl	r0, [r3, #0]
 8030c84:	e7eb      	b.n	8030c5e <_scanf_i+0x1aa>
 8030c86:	2001      	movs	r0, #1
 8030c88:	e7f2      	b.n	8030c70 <_scanf_i+0x1bc>
 8030c8a:	bf00      	nop
 8030c8c:	08034010 	.word	0x08034010
 8030c90:	08031895 	.word	0x08031895
 8030c94:	08030121 	.word	0x08030121
 8030c98:	08034f8a 	.word	0x08034f8a

08030c9c <__sflush_r>:
 8030c9c:	898a      	ldrh	r2, [r1, #12]
 8030c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030ca2:	4605      	mov	r5, r0
 8030ca4:	0710      	lsls	r0, r2, #28
 8030ca6:	460c      	mov	r4, r1
 8030ca8:	d458      	bmi.n	8030d5c <__sflush_r+0xc0>
 8030caa:	684b      	ldr	r3, [r1, #4]
 8030cac:	2b00      	cmp	r3, #0
 8030cae:	dc05      	bgt.n	8030cbc <__sflush_r+0x20>
 8030cb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030cb2:	2b00      	cmp	r3, #0
 8030cb4:	dc02      	bgt.n	8030cbc <__sflush_r+0x20>
 8030cb6:	2000      	movs	r0, #0
 8030cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030cbe:	2e00      	cmp	r6, #0
 8030cc0:	d0f9      	beq.n	8030cb6 <__sflush_r+0x1a>
 8030cc2:	2300      	movs	r3, #0
 8030cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030cc8:	682f      	ldr	r7, [r5, #0]
 8030cca:	6a21      	ldr	r1, [r4, #32]
 8030ccc:	602b      	str	r3, [r5, #0]
 8030cce:	d032      	beq.n	8030d36 <__sflush_r+0x9a>
 8030cd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030cd2:	89a3      	ldrh	r3, [r4, #12]
 8030cd4:	075a      	lsls	r2, r3, #29
 8030cd6:	d505      	bpl.n	8030ce4 <__sflush_r+0x48>
 8030cd8:	6863      	ldr	r3, [r4, #4]
 8030cda:	1ac0      	subs	r0, r0, r3
 8030cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030cde:	b10b      	cbz	r3, 8030ce4 <__sflush_r+0x48>
 8030ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030ce2:	1ac0      	subs	r0, r0, r3
 8030ce4:	2300      	movs	r3, #0
 8030ce6:	4602      	mov	r2, r0
 8030ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030cea:	6a21      	ldr	r1, [r4, #32]
 8030cec:	4628      	mov	r0, r5
 8030cee:	47b0      	blx	r6
 8030cf0:	1c43      	adds	r3, r0, #1
 8030cf2:	89a3      	ldrh	r3, [r4, #12]
 8030cf4:	d106      	bne.n	8030d04 <__sflush_r+0x68>
 8030cf6:	6829      	ldr	r1, [r5, #0]
 8030cf8:	291d      	cmp	r1, #29
 8030cfa:	d82b      	bhi.n	8030d54 <__sflush_r+0xb8>
 8030cfc:	4a29      	ldr	r2, [pc, #164]	; (8030da4 <__sflush_r+0x108>)
 8030cfe:	410a      	asrs	r2, r1
 8030d00:	07d6      	lsls	r6, r2, #31
 8030d02:	d427      	bmi.n	8030d54 <__sflush_r+0xb8>
 8030d04:	2200      	movs	r2, #0
 8030d06:	6062      	str	r2, [r4, #4]
 8030d08:	04d9      	lsls	r1, r3, #19
 8030d0a:	6922      	ldr	r2, [r4, #16]
 8030d0c:	6022      	str	r2, [r4, #0]
 8030d0e:	d504      	bpl.n	8030d1a <__sflush_r+0x7e>
 8030d10:	1c42      	adds	r2, r0, #1
 8030d12:	d101      	bne.n	8030d18 <__sflush_r+0x7c>
 8030d14:	682b      	ldr	r3, [r5, #0]
 8030d16:	b903      	cbnz	r3, 8030d1a <__sflush_r+0x7e>
 8030d18:	6560      	str	r0, [r4, #84]	; 0x54
 8030d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030d1c:	602f      	str	r7, [r5, #0]
 8030d1e:	2900      	cmp	r1, #0
 8030d20:	d0c9      	beq.n	8030cb6 <__sflush_r+0x1a>
 8030d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030d26:	4299      	cmp	r1, r3
 8030d28:	d002      	beq.n	8030d30 <__sflush_r+0x94>
 8030d2a:	4628      	mov	r0, r5
 8030d2c:	f7fd fe6a 	bl	802ea04 <_free_r>
 8030d30:	2000      	movs	r0, #0
 8030d32:	6360      	str	r0, [r4, #52]	; 0x34
 8030d34:	e7c0      	b.n	8030cb8 <__sflush_r+0x1c>
 8030d36:	2301      	movs	r3, #1
 8030d38:	4628      	mov	r0, r5
 8030d3a:	47b0      	blx	r6
 8030d3c:	1c41      	adds	r1, r0, #1
 8030d3e:	d1c8      	bne.n	8030cd2 <__sflush_r+0x36>
 8030d40:	682b      	ldr	r3, [r5, #0]
 8030d42:	2b00      	cmp	r3, #0
 8030d44:	d0c5      	beq.n	8030cd2 <__sflush_r+0x36>
 8030d46:	2b1d      	cmp	r3, #29
 8030d48:	d001      	beq.n	8030d4e <__sflush_r+0xb2>
 8030d4a:	2b16      	cmp	r3, #22
 8030d4c:	d101      	bne.n	8030d52 <__sflush_r+0xb6>
 8030d4e:	602f      	str	r7, [r5, #0]
 8030d50:	e7b1      	b.n	8030cb6 <__sflush_r+0x1a>
 8030d52:	89a3      	ldrh	r3, [r4, #12]
 8030d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030d58:	81a3      	strh	r3, [r4, #12]
 8030d5a:	e7ad      	b.n	8030cb8 <__sflush_r+0x1c>
 8030d5c:	690f      	ldr	r7, [r1, #16]
 8030d5e:	2f00      	cmp	r7, #0
 8030d60:	d0a9      	beq.n	8030cb6 <__sflush_r+0x1a>
 8030d62:	0793      	lsls	r3, r2, #30
 8030d64:	680e      	ldr	r6, [r1, #0]
 8030d66:	bf08      	it	eq
 8030d68:	694b      	ldreq	r3, [r1, #20]
 8030d6a:	600f      	str	r7, [r1, #0]
 8030d6c:	bf18      	it	ne
 8030d6e:	2300      	movne	r3, #0
 8030d70:	eba6 0807 	sub.w	r8, r6, r7
 8030d74:	608b      	str	r3, [r1, #8]
 8030d76:	f1b8 0f00 	cmp.w	r8, #0
 8030d7a:	dd9c      	ble.n	8030cb6 <__sflush_r+0x1a>
 8030d7c:	6a21      	ldr	r1, [r4, #32]
 8030d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030d80:	4643      	mov	r3, r8
 8030d82:	463a      	mov	r2, r7
 8030d84:	4628      	mov	r0, r5
 8030d86:	47b0      	blx	r6
 8030d88:	2800      	cmp	r0, #0
 8030d8a:	dc06      	bgt.n	8030d9a <__sflush_r+0xfe>
 8030d8c:	89a3      	ldrh	r3, [r4, #12]
 8030d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030d92:	81a3      	strh	r3, [r4, #12]
 8030d94:	f04f 30ff 	mov.w	r0, #4294967295
 8030d98:	e78e      	b.n	8030cb8 <__sflush_r+0x1c>
 8030d9a:	4407      	add	r7, r0
 8030d9c:	eba8 0800 	sub.w	r8, r8, r0
 8030da0:	e7e9      	b.n	8030d76 <__sflush_r+0xda>
 8030da2:	bf00      	nop
 8030da4:	dfbffffe 	.word	0xdfbffffe

08030da8 <_fflush_r>:
 8030da8:	b538      	push	{r3, r4, r5, lr}
 8030daa:	690b      	ldr	r3, [r1, #16]
 8030dac:	4605      	mov	r5, r0
 8030dae:	460c      	mov	r4, r1
 8030db0:	b913      	cbnz	r3, 8030db8 <_fflush_r+0x10>
 8030db2:	2500      	movs	r5, #0
 8030db4:	4628      	mov	r0, r5
 8030db6:	bd38      	pop	{r3, r4, r5, pc}
 8030db8:	b118      	cbz	r0, 8030dc2 <_fflush_r+0x1a>
 8030dba:	6a03      	ldr	r3, [r0, #32]
 8030dbc:	b90b      	cbnz	r3, 8030dc2 <_fflush_r+0x1a>
 8030dbe:	f7fc fbd7 	bl	802d570 <__sinit>
 8030dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030dc6:	2b00      	cmp	r3, #0
 8030dc8:	d0f3      	beq.n	8030db2 <_fflush_r+0xa>
 8030dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030dcc:	07d0      	lsls	r0, r2, #31
 8030dce:	d404      	bmi.n	8030dda <_fflush_r+0x32>
 8030dd0:	0599      	lsls	r1, r3, #22
 8030dd2:	d402      	bmi.n	8030dda <_fflush_r+0x32>
 8030dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030dd6:	f7fc ff74 	bl	802dcc2 <__retarget_lock_acquire_recursive>
 8030dda:	4628      	mov	r0, r5
 8030ddc:	4621      	mov	r1, r4
 8030dde:	f7ff ff5d 	bl	8030c9c <__sflush_r>
 8030de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030de4:	07da      	lsls	r2, r3, #31
 8030de6:	4605      	mov	r5, r0
 8030de8:	d4e4      	bmi.n	8030db4 <_fflush_r+0xc>
 8030dea:	89a3      	ldrh	r3, [r4, #12]
 8030dec:	059b      	lsls	r3, r3, #22
 8030dee:	d4e1      	bmi.n	8030db4 <_fflush_r+0xc>
 8030df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030df2:	f7fc ff67 	bl	802dcc4 <__retarget_lock_release_recursive>
 8030df6:	e7dd      	b.n	8030db4 <_fflush_r+0xc>

08030df8 <__swhatbuf_r>:
 8030df8:	b570      	push	{r4, r5, r6, lr}
 8030dfa:	460c      	mov	r4, r1
 8030dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030e00:	2900      	cmp	r1, #0
 8030e02:	b096      	sub	sp, #88	; 0x58
 8030e04:	4615      	mov	r5, r2
 8030e06:	461e      	mov	r6, r3
 8030e08:	da0d      	bge.n	8030e26 <__swhatbuf_r+0x2e>
 8030e0a:	89a3      	ldrh	r3, [r4, #12]
 8030e0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030e10:	f04f 0100 	mov.w	r1, #0
 8030e14:	bf0c      	ite	eq
 8030e16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8030e1a:	2340      	movne	r3, #64	; 0x40
 8030e1c:	2000      	movs	r0, #0
 8030e1e:	6031      	str	r1, [r6, #0]
 8030e20:	602b      	str	r3, [r5, #0]
 8030e22:	b016      	add	sp, #88	; 0x58
 8030e24:	bd70      	pop	{r4, r5, r6, pc}
 8030e26:	466a      	mov	r2, sp
 8030e28:	f000 f8ec 	bl	8031004 <_fstat_r>
 8030e2c:	2800      	cmp	r0, #0
 8030e2e:	dbec      	blt.n	8030e0a <__swhatbuf_r+0x12>
 8030e30:	9901      	ldr	r1, [sp, #4]
 8030e32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8030e36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8030e3a:	4259      	negs	r1, r3
 8030e3c:	4159      	adcs	r1, r3
 8030e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030e42:	e7eb      	b.n	8030e1c <__swhatbuf_r+0x24>

08030e44 <__smakebuf_r>:
 8030e44:	898b      	ldrh	r3, [r1, #12]
 8030e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030e48:	079d      	lsls	r5, r3, #30
 8030e4a:	4606      	mov	r6, r0
 8030e4c:	460c      	mov	r4, r1
 8030e4e:	d507      	bpl.n	8030e60 <__smakebuf_r+0x1c>
 8030e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8030e54:	6023      	str	r3, [r4, #0]
 8030e56:	6123      	str	r3, [r4, #16]
 8030e58:	2301      	movs	r3, #1
 8030e5a:	6163      	str	r3, [r4, #20]
 8030e5c:	b002      	add	sp, #8
 8030e5e:	bd70      	pop	{r4, r5, r6, pc}
 8030e60:	ab01      	add	r3, sp, #4
 8030e62:	466a      	mov	r2, sp
 8030e64:	f7ff ffc8 	bl	8030df8 <__swhatbuf_r>
 8030e68:	9900      	ldr	r1, [sp, #0]
 8030e6a:	4605      	mov	r5, r0
 8030e6c:	4630      	mov	r0, r6
 8030e6e:	f7fb fbf1 	bl	802c654 <_malloc_r>
 8030e72:	b948      	cbnz	r0, 8030e88 <__smakebuf_r+0x44>
 8030e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030e78:	059a      	lsls	r2, r3, #22
 8030e7a:	d4ef      	bmi.n	8030e5c <__smakebuf_r+0x18>
 8030e7c:	f023 0303 	bic.w	r3, r3, #3
 8030e80:	f043 0302 	orr.w	r3, r3, #2
 8030e84:	81a3      	strh	r3, [r4, #12]
 8030e86:	e7e3      	b.n	8030e50 <__smakebuf_r+0xc>
 8030e88:	89a3      	ldrh	r3, [r4, #12]
 8030e8a:	6020      	str	r0, [r4, #0]
 8030e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030e90:	81a3      	strh	r3, [r4, #12]
 8030e92:	9b00      	ldr	r3, [sp, #0]
 8030e94:	6163      	str	r3, [r4, #20]
 8030e96:	9b01      	ldr	r3, [sp, #4]
 8030e98:	6120      	str	r0, [r4, #16]
 8030e9a:	b15b      	cbz	r3, 8030eb4 <__smakebuf_r+0x70>
 8030e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030ea0:	4630      	mov	r0, r6
 8030ea2:	f000 f8c1 	bl	8031028 <_isatty_r>
 8030ea6:	b128      	cbz	r0, 8030eb4 <__smakebuf_r+0x70>
 8030ea8:	89a3      	ldrh	r3, [r4, #12]
 8030eaa:	f023 0303 	bic.w	r3, r3, #3
 8030eae:	f043 0301 	orr.w	r3, r3, #1
 8030eb2:	81a3      	strh	r3, [r4, #12]
 8030eb4:	89a3      	ldrh	r3, [r4, #12]
 8030eb6:	431d      	orrs	r5, r3
 8030eb8:	81a5      	strh	r5, [r4, #12]
 8030eba:	e7cf      	b.n	8030e5c <__smakebuf_r+0x18>

08030ebc <__sccl>:
 8030ebc:	b570      	push	{r4, r5, r6, lr}
 8030ebe:	780b      	ldrb	r3, [r1, #0]
 8030ec0:	4604      	mov	r4, r0
 8030ec2:	2b5e      	cmp	r3, #94	; 0x5e
 8030ec4:	bf0b      	itete	eq
 8030ec6:	784b      	ldrbeq	r3, [r1, #1]
 8030ec8:	1c4a      	addne	r2, r1, #1
 8030eca:	1c8a      	addeq	r2, r1, #2
 8030ecc:	2100      	movne	r1, #0
 8030ece:	bf08      	it	eq
 8030ed0:	2101      	moveq	r1, #1
 8030ed2:	3801      	subs	r0, #1
 8030ed4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8030ed8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8030edc:	42a8      	cmp	r0, r5
 8030ede:	d1fb      	bne.n	8030ed8 <__sccl+0x1c>
 8030ee0:	b90b      	cbnz	r3, 8030ee6 <__sccl+0x2a>
 8030ee2:	1e50      	subs	r0, r2, #1
 8030ee4:	bd70      	pop	{r4, r5, r6, pc}
 8030ee6:	f081 0101 	eor.w	r1, r1, #1
 8030eea:	54e1      	strb	r1, [r4, r3]
 8030eec:	4610      	mov	r0, r2
 8030eee:	4602      	mov	r2, r0
 8030ef0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8030ef4:	2d2d      	cmp	r5, #45	; 0x2d
 8030ef6:	d005      	beq.n	8030f04 <__sccl+0x48>
 8030ef8:	2d5d      	cmp	r5, #93	; 0x5d
 8030efa:	d016      	beq.n	8030f2a <__sccl+0x6e>
 8030efc:	2d00      	cmp	r5, #0
 8030efe:	d0f1      	beq.n	8030ee4 <__sccl+0x28>
 8030f00:	462b      	mov	r3, r5
 8030f02:	e7f2      	b.n	8030eea <__sccl+0x2e>
 8030f04:	7846      	ldrb	r6, [r0, #1]
 8030f06:	2e5d      	cmp	r6, #93	; 0x5d
 8030f08:	d0fa      	beq.n	8030f00 <__sccl+0x44>
 8030f0a:	42b3      	cmp	r3, r6
 8030f0c:	dcf8      	bgt.n	8030f00 <__sccl+0x44>
 8030f0e:	3002      	adds	r0, #2
 8030f10:	461a      	mov	r2, r3
 8030f12:	3201      	adds	r2, #1
 8030f14:	4296      	cmp	r6, r2
 8030f16:	54a1      	strb	r1, [r4, r2]
 8030f18:	dcfb      	bgt.n	8030f12 <__sccl+0x56>
 8030f1a:	1af2      	subs	r2, r6, r3
 8030f1c:	3a01      	subs	r2, #1
 8030f1e:	1c5d      	adds	r5, r3, #1
 8030f20:	42b3      	cmp	r3, r6
 8030f22:	bfa8      	it	ge
 8030f24:	2200      	movge	r2, #0
 8030f26:	18ab      	adds	r3, r5, r2
 8030f28:	e7e1      	b.n	8030eee <__sccl+0x32>
 8030f2a:	4610      	mov	r0, r2
 8030f2c:	e7da      	b.n	8030ee4 <__sccl+0x28>

08030f2e <__submore>:
 8030f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030f32:	460c      	mov	r4, r1
 8030f34:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030f3a:	4299      	cmp	r1, r3
 8030f3c:	d11d      	bne.n	8030f7a <__submore+0x4c>
 8030f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8030f42:	f7fb fb87 	bl	802c654 <_malloc_r>
 8030f46:	b918      	cbnz	r0, 8030f50 <__submore+0x22>
 8030f48:	f04f 30ff 	mov.w	r0, #4294967295
 8030f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030f54:	63a3      	str	r3, [r4, #56]	; 0x38
 8030f56:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8030f5a:	6360      	str	r0, [r4, #52]	; 0x34
 8030f5c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8030f60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8030f64:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8030f68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8030f6c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8030f70:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8030f74:	6020      	str	r0, [r4, #0]
 8030f76:	2000      	movs	r0, #0
 8030f78:	e7e8      	b.n	8030f4c <__submore+0x1e>
 8030f7a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8030f7c:	0077      	lsls	r7, r6, #1
 8030f7e:	463a      	mov	r2, r7
 8030f80:	f000 fbe7 	bl	8031752 <_realloc_r>
 8030f84:	4605      	mov	r5, r0
 8030f86:	2800      	cmp	r0, #0
 8030f88:	d0de      	beq.n	8030f48 <__submore+0x1a>
 8030f8a:	eb00 0806 	add.w	r8, r0, r6
 8030f8e:	4601      	mov	r1, r0
 8030f90:	4632      	mov	r2, r6
 8030f92:	4640      	mov	r0, r8
 8030f94:	f7fc fe9f 	bl	802dcd6 <memcpy>
 8030f98:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8030f9c:	f8c4 8000 	str.w	r8, [r4]
 8030fa0:	e7e9      	b.n	8030f76 <__submore+0x48>

08030fa2 <_raise_r>:
 8030fa2:	291f      	cmp	r1, #31
 8030fa4:	b538      	push	{r3, r4, r5, lr}
 8030fa6:	4604      	mov	r4, r0
 8030fa8:	460d      	mov	r5, r1
 8030faa:	d904      	bls.n	8030fb6 <_raise_r+0x14>
 8030fac:	2316      	movs	r3, #22
 8030fae:	6003      	str	r3, [r0, #0]
 8030fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8030fb4:	bd38      	pop	{r3, r4, r5, pc}
 8030fb6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8030fb8:	b112      	cbz	r2, 8030fc0 <_raise_r+0x1e>
 8030fba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8030fbe:	b94b      	cbnz	r3, 8030fd4 <_raise_r+0x32>
 8030fc0:	4620      	mov	r0, r4
 8030fc2:	f000 f853 	bl	803106c <_getpid_r>
 8030fc6:	462a      	mov	r2, r5
 8030fc8:	4601      	mov	r1, r0
 8030fca:	4620      	mov	r0, r4
 8030fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8030fd0:	f000 b83a 	b.w	8031048 <_kill_r>
 8030fd4:	2b01      	cmp	r3, #1
 8030fd6:	d00a      	beq.n	8030fee <_raise_r+0x4c>
 8030fd8:	1c59      	adds	r1, r3, #1
 8030fda:	d103      	bne.n	8030fe4 <_raise_r+0x42>
 8030fdc:	2316      	movs	r3, #22
 8030fde:	6003      	str	r3, [r0, #0]
 8030fe0:	2001      	movs	r0, #1
 8030fe2:	e7e7      	b.n	8030fb4 <_raise_r+0x12>
 8030fe4:	2400      	movs	r4, #0
 8030fe6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8030fea:	4628      	mov	r0, r5
 8030fec:	4798      	blx	r3
 8030fee:	2000      	movs	r0, #0
 8030ff0:	e7e0      	b.n	8030fb4 <_raise_r+0x12>
	...

08030ff4 <raise>:
 8030ff4:	4b02      	ldr	r3, [pc, #8]	; (8031000 <raise+0xc>)
 8030ff6:	4601      	mov	r1, r0
 8030ff8:	6818      	ldr	r0, [r3, #0]
 8030ffa:	f7ff bfd2 	b.w	8030fa2 <_raise_r>
 8030ffe:	bf00      	nop
 8031000:	20000188 	.word	0x20000188

08031004 <_fstat_r>:
 8031004:	b538      	push	{r3, r4, r5, lr}
 8031006:	4d07      	ldr	r5, [pc, #28]	; (8031024 <_fstat_r+0x20>)
 8031008:	2300      	movs	r3, #0
 803100a:	4604      	mov	r4, r0
 803100c:	4608      	mov	r0, r1
 803100e:	4611      	mov	r1, r2
 8031010:	602b      	str	r3, [r5, #0]
 8031012:	f7e1 fe4e 	bl	8012cb2 <_fstat>
 8031016:	1c43      	adds	r3, r0, #1
 8031018:	d102      	bne.n	8031020 <_fstat_r+0x1c>
 803101a:	682b      	ldr	r3, [r5, #0]
 803101c:	b103      	cbz	r3, 8031020 <_fstat_r+0x1c>
 803101e:	6023      	str	r3, [r4, #0]
 8031020:	bd38      	pop	{r3, r4, r5, pc}
 8031022:	bf00      	nop
 8031024:	2000db0c 	.word	0x2000db0c

08031028 <_isatty_r>:
 8031028:	b538      	push	{r3, r4, r5, lr}
 803102a:	4d06      	ldr	r5, [pc, #24]	; (8031044 <_isatty_r+0x1c>)
 803102c:	2300      	movs	r3, #0
 803102e:	4604      	mov	r4, r0
 8031030:	4608      	mov	r0, r1
 8031032:	602b      	str	r3, [r5, #0]
 8031034:	f7e1 fe4d 	bl	8012cd2 <_isatty>
 8031038:	1c43      	adds	r3, r0, #1
 803103a:	d102      	bne.n	8031042 <_isatty_r+0x1a>
 803103c:	682b      	ldr	r3, [r5, #0]
 803103e:	b103      	cbz	r3, 8031042 <_isatty_r+0x1a>
 8031040:	6023      	str	r3, [r4, #0]
 8031042:	bd38      	pop	{r3, r4, r5, pc}
 8031044:	2000db0c 	.word	0x2000db0c

08031048 <_kill_r>:
 8031048:	b538      	push	{r3, r4, r5, lr}
 803104a:	4d07      	ldr	r5, [pc, #28]	; (8031068 <_kill_r+0x20>)
 803104c:	2300      	movs	r3, #0
 803104e:	4604      	mov	r4, r0
 8031050:	4608      	mov	r0, r1
 8031052:	4611      	mov	r1, r2
 8031054:	602b      	str	r3, [r5, #0]
 8031056:	f7e1 fdcd 	bl	8012bf4 <_kill>
 803105a:	1c43      	adds	r3, r0, #1
 803105c:	d102      	bne.n	8031064 <_kill_r+0x1c>
 803105e:	682b      	ldr	r3, [r5, #0]
 8031060:	b103      	cbz	r3, 8031064 <_kill_r+0x1c>
 8031062:	6023      	str	r3, [r4, #0]
 8031064:	bd38      	pop	{r3, r4, r5, pc}
 8031066:	bf00      	nop
 8031068:	2000db0c 	.word	0x2000db0c

0803106c <_getpid_r>:
 803106c:	f7e1 bdba 	b.w	8012be4 <_getpid>

08031070 <nan>:
 8031070:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8031078 <nan+0x8>
 8031074:	4770      	bx	lr
 8031076:	bf00      	nop
 8031078:	00000000 	.word	0x00000000
 803107c:	7ff80000 	.word	0x7ff80000

08031080 <rshift>:
 8031080:	6903      	ldr	r3, [r0, #16]
 8031082:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8031086:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803108a:	ea4f 1261 	mov.w	r2, r1, asr #5
 803108e:	f100 0414 	add.w	r4, r0, #20
 8031092:	dd45      	ble.n	8031120 <rshift+0xa0>
 8031094:	f011 011f 	ands.w	r1, r1, #31
 8031098:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803109c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80310a0:	d10c      	bne.n	80310bc <rshift+0x3c>
 80310a2:	f100 0710 	add.w	r7, r0, #16
 80310a6:	4629      	mov	r1, r5
 80310a8:	42b1      	cmp	r1, r6
 80310aa:	d334      	bcc.n	8031116 <rshift+0x96>
 80310ac:	1a9b      	subs	r3, r3, r2
 80310ae:	009b      	lsls	r3, r3, #2
 80310b0:	1eea      	subs	r2, r5, #3
 80310b2:	4296      	cmp	r6, r2
 80310b4:	bf38      	it	cc
 80310b6:	2300      	movcc	r3, #0
 80310b8:	4423      	add	r3, r4
 80310ba:	e015      	b.n	80310e8 <rshift+0x68>
 80310bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80310c0:	f1c1 0820 	rsb	r8, r1, #32
 80310c4:	40cf      	lsrs	r7, r1
 80310c6:	f105 0e04 	add.w	lr, r5, #4
 80310ca:	46a1      	mov	r9, r4
 80310cc:	4576      	cmp	r6, lr
 80310ce:	46f4      	mov	ip, lr
 80310d0:	d815      	bhi.n	80310fe <rshift+0x7e>
 80310d2:	1a9a      	subs	r2, r3, r2
 80310d4:	0092      	lsls	r2, r2, #2
 80310d6:	3a04      	subs	r2, #4
 80310d8:	3501      	adds	r5, #1
 80310da:	42ae      	cmp	r6, r5
 80310dc:	bf38      	it	cc
 80310de:	2200      	movcc	r2, #0
 80310e0:	18a3      	adds	r3, r4, r2
 80310e2:	50a7      	str	r7, [r4, r2]
 80310e4:	b107      	cbz	r7, 80310e8 <rshift+0x68>
 80310e6:	3304      	adds	r3, #4
 80310e8:	1b1a      	subs	r2, r3, r4
 80310ea:	42a3      	cmp	r3, r4
 80310ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80310f0:	bf08      	it	eq
 80310f2:	2300      	moveq	r3, #0
 80310f4:	6102      	str	r2, [r0, #16]
 80310f6:	bf08      	it	eq
 80310f8:	6143      	streq	r3, [r0, #20]
 80310fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80310fe:	f8dc c000 	ldr.w	ip, [ip]
 8031102:	fa0c fc08 	lsl.w	ip, ip, r8
 8031106:	ea4c 0707 	orr.w	r7, ip, r7
 803110a:	f849 7b04 	str.w	r7, [r9], #4
 803110e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8031112:	40cf      	lsrs	r7, r1
 8031114:	e7da      	b.n	80310cc <rshift+0x4c>
 8031116:	f851 cb04 	ldr.w	ip, [r1], #4
 803111a:	f847 cf04 	str.w	ip, [r7, #4]!
 803111e:	e7c3      	b.n	80310a8 <rshift+0x28>
 8031120:	4623      	mov	r3, r4
 8031122:	e7e1      	b.n	80310e8 <rshift+0x68>

08031124 <__hexdig_fun>:
 8031124:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8031128:	2b09      	cmp	r3, #9
 803112a:	d802      	bhi.n	8031132 <__hexdig_fun+0xe>
 803112c:	3820      	subs	r0, #32
 803112e:	b2c0      	uxtb	r0, r0
 8031130:	4770      	bx	lr
 8031132:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8031136:	2b05      	cmp	r3, #5
 8031138:	d801      	bhi.n	803113e <__hexdig_fun+0x1a>
 803113a:	3847      	subs	r0, #71	; 0x47
 803113c:	e7f7      	b.n	803112e <__hexdig_fun+0xa>
 803113e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8031142:	2b05      	cmp	r3, #5
 8031144:	d801      	bhi.n	803114a <__hexdig_fun+0x26>
 8031146:	3827      	subs	r0, #39	; 0x27
 8031148:	e7f1      	b.n	803112e <__hexdig_fun+0xa>
 803114a:	2000      	movs	r0, #0
 803114c:	4770      	bx	lr
	...

08031150 <__gethex>:
 8031150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031154:	4617      	mov	r7, r2
 8031156:	680a      	ldr	r2, [r1, #0]
 8031158:	b085      	sub	sp, #20
 803115a:	f102 0b02 	add.w	fp, r2, #2
 803115e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8031162:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8031166:	4681      	mov	r9, r0
 8031168:	468a      	mov	sl, r1
 803116a:	9302      	str	r3, [sp, #8]
 803116c:	32fe      	adds	r2, #254	; 0xfe
 803116e:	eb02 030b 	add.w	r3, r2, fp
 8031172:	46d8      	mov	r8, fp
 8031174:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8031178:	9301      	str	r3, [sp, #4]
 803117a:	2830      	cmp	r0, #48	; 0x30
 803117c:	d0f7      	beq.n	803116e <__gethex+0x1e>
 803117e:	f7ff ffd1 	bl	8031124 <__hexdig_fun>
 8031182:	4604      	mov	r4, r0
 8031184:	2800      	cmp	r0, #0
 8031186:	d138      	bne.n	80311fa <__gethex+0xaa>
 8031188:	49a7      	ldr	r1, [pc, #668]	; (8031428 <__gethex+0x2d8>)
 803118a:	2201      	movs	r2, #1
 803118c:	4640      	mov	r0, r8
 803118e:	f7fc fc15 	bl	802d9bc <strncmp>
 8031192:	4606      	mov	r6, r0
 8031194:	2800      	cmp	r0, #0
 8031196:	d169      	bne.n	803126c <__gethex+0x11c>
 8031198:	f898 0001 	ldrb.w	r0, [r8, #1]
 803119c:	465d      	mov	r5, fp
 803119e:	f7ff ffc1 	bl	8031124 <__hexdig_fun>
 80311a2:	2800      	cmp	r0, #0
 80311a4:	d064      	beq.n	8031270 <__gethex+0x120>
 80311a6:	465a      	mov	r2, fp
 80311a8:	7810      	ldrb	r0, [r2, #0]
 80311aa:	2830      	cmp	r0, #48	; 0x30
 80311ac:	4690      	mov	r8, r2
 80311ae:	f102 0201 	add.w	r2, r2, #1
 80311b2:	d0f9      	beq.n	80311a8 <__gethex+0x58>
 80311b4:	f7ff ffb6 	bl	8031124 <__hexdig_fun>
 80311b8:	2301      	movs	r3, #1
 80311ba:	fab0 f480 	clz	r4, r0
 80311be:	0964      	lsrs	r4, r4, #5
 80311c0:	465e      	mov	r6, fp
 80311c2:	9301      	str	r3, [sp, #4]
 80311c4:	4642      	mov	r2, r8
 80311c6:	4615      	mov	r5, r2
 80311c8:	3201      	adds	r2, #1
 80311ca:	7828      	ldrb	r0, [r5, #0]
 80311cc:	f7ff ffaa 	bl	8031124 <__hexdig_fun>
 80311d0:	2800      	cmp	r0, #0
 80311d2:	d1f8      	bne.n	80311c6 <__gethex+0x76>
 80311d4:	4994      	ldr	r1, [pc, #592]	; (8031428 <__gethex+0x2d8>)
 80311d6:	2201      	movs	r2, #1
 80311d8:	4628      	mov	r0, r5
 80311da:	f7fc fbef 	bl	802d9bc <strncmp>
 80311de:	b978      	cbnz	r0, 8031200 <__gethex+0xb0>
 80311e0:	b946      	cbnz	r6, 80311f4 <__gethex+0xa4>
 80311e2:	1c6e      	adds	r6, r5, #1
 80311e4:	4632      	mov	r2, r6
 80311e6:	4615      	mov	r5, r2
 80311e8:	3201      	adds	r2, #1
 80311ea:	7828      	ldrb	r0, [r5, #0]
 80311ec:	f7ff ff9a 	bl	8031124 <__hexdig_fun>
 80311f0:	2800      	cmp	r0, #0
 80311f2:	d1f8      	bne.n	80311e6 <__gethex+0x96>
 80311f4:	1b73      	subs	r3, r6, r5
 80311f6:	009e      	lsls	r6, r3, #2
 80311f8:	e004      	b.n	8031204 <__gethex+0xb4>
 80311fa:	2400      	movs	r4, #0
 80311fc:	4626      	mov	r6, r4
 80311fe:	e7e1      	b.n	80311c4 <__gethex+0x74>
 8031200:	2e00      	cmp	r6, #0
 8031202:	d1f7      	bne.n	80311f4 <__gethex+0xa4>
 8031204:	782b      	ldrb	r3, [r5, #0]
 8031206:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 803120a:	2b50      	cmp	r3, #80	; 0x50
 803120c:	d13d      	bne.n	803128a <__gethex+0x13a>
 803120e:	786b      	ldrb	r3, [r5, #1]
 8031210:	2b2b      	cmp	r3, #43	; 0x2b
 8031212:	d02f      	beq.n	8031274 <__gethex+0x124>
 8031214:	2b2d      	cmp	r3, #45	; 0x2d
 8031216:	d031      	beq.n	803127c <__gethex+0x12c>
 8031218:	1c69      	adds	r1, r5, #1
 803121a:	f04f 0b00 	mov.w	fp, #0
 803121e:	7808      	ldrb	r0, [r1, #0]
 8031220:	f7ff ff80 	bl	8031124 <__hexdig_fun>
 8031224:	1e42      	subs	r2, r0, #1
 8031226:	b2d2      	uxtb	r2, r2
 8031228:	2a18      	cmp	r2, #24
 803122a:	d82e      	bhi.n	803128a <__gethex+0x13a>
 803122c:	f1a0 0210 	sub.w	r2, r0, #16
 8031230:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8031234:	f7ff ff76 	bl	8031124 <__hexdig_fun>
 8031238:	f100 3cff 	add.w	ip, r0, #4294967295
 803123c:	fa5f fc8c 	uxtb.w	ip, ip
 8031240:	f1bc 0f18 	cmp.w	ip, #24
 8031244:	d91d      	bls.n	8031282 <__gethex+0x132>
 8031246:	f1bb 0f00 	cmp.w	fp, #0
 803124a:	d000      	beq.n	803124e <__gethex+0xfe>
 803124c:	4252      	negs	r2, r2
 803124e:	4416      	add	r6, r2
 8031250:	f8ca 1000 	str.w	r1, [sl]
 8031254:	b1dc      	cbz	r4, 803128e <__gethex+0x13e>
 8031256:	9b01      	ldr	r3, [sp, #4]
 8031258:	2b00      	cmp	r3, #0
 803125a:	bf14      	ite	ne
 803125c:	f04f 0800 	movne.w	r8, #0
 8031260:	f04f 0806 	moveq.w	r8, #6
 8031264:	4640      	mov	r0, r8
 8031266:	b005      	add	sp, #20
 8031268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803126c:	4645      	mov	r5, r8
 803126e:	4626      	mov	r6, r4
 8031270:	2401      	movs	r4, #1
 8031272:	e7c7      	b.n	8031204 <__gethex+0xb4>
 8031274:	f04f 0b00 	mov.w	fp, #0
 8031278:	1ca9      	adds	r1, r5, #2
 803127a:	e7d0      	b.n	803121e <__gethex+0xce>
 803127c:	f04f 0b01 	mov.w	fp, #1
 8031280:	e7fa      	b.n	8031278 <__gethex+0x128>
 8031282:	230a      	movs	r3, #10
 8031284:	fb03 0002 	mla	r0, r3, r2, r0
 8031288:	e7d0      	b.n	803122c <__gethex+0xdc>
 803128a:	4629      	mov	r1, r5
 803128c:	e7e0      	b.n	8031250 <__gethex+0x100>
 803128e:	eba5 0308 	sub.w	r3, r5, r8
 8031292:	3b01      	subs	r3, #1
 8031294:	4621      	mov	r1, r4
 8031296:	2b07      	cmp	r3, #7
 8031298:	dc0a      	bgt.n	80312b0 <__gethex+0x160>
 803129a:	4648      	mov	r0, r9
 803129c:	f7fd fbfe 	bl	802ea9c <_Balloc>
 80312a0:	4604      	mov	r4, r0
 80312a2:	b940      	cbnz	r0, 80312b6 <__gethex+0x166>
 80312a4:	4b61      	ldr	r3, [pc, #388]	; (803142c <__gethex+0x2dc>)
 80312a6:	4602      	mov	r2, r0
 80312a8:	21e4      	movs	r1, #228	; 0xe4
 80312aa:	4861      	ldr	r0, [pc, #388]	; (8031430 <__gethex+0x2e0>)
 80312ac:	f7fb f96e 	bl	802c58c <__assert_func>
 80312b0:	3101      	adds	r1, #1
 80312b2:	105b      	asrs	r3, r3, #1
 80312b4:	e7ef      	b.n	8031296 <__gethex+0x146>
 80312b6:	f100 0a14 	add.w	sl, r0, #20
 80312ba:	2300      	movs	r3, #0
 80312bc:	495a      	ldr	r1, [pc, #360]	; (8031428 <__gethex+0x2d8>)
 80312be:	f8cd a004 	str.w	sl, [sp, #4]
 80312c2:	469b      	mov	fp, r3
 80312c4:	45a8      	cmp	r8, r5
 80312c6:	d342      	bcc.n	803134e <__gethex+0x1fe>
 80312c8:	9801      	ldr	r0, [sp, #4]
 80312ca:	f840 bb04 	str.w	fp, [r0], #4
 80312ce:	eba0 000a 	sub.w	r0, r0, sl
 80312d2:	1080      	asrs	r0, r0, #2
 80312d4:	6120      	str	r0, [r4, #16]
 80312d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80312da:	4658      	mov	r0, fp
 80312dc:	f7fd fcd0 	bl	802ec80 <__hi0bits>
 80312e0:	683d      	ldr	r5, [r7, #0]
 80312e2:	eba8 0000 	sub.w	r0, r8, r0
 80312e6:	42a8      	cmp	r0, r5
 80312e8:	dd59      	ble.n	803139e <__gethex+0x24e>
 80312ea:	eba0 0805 	sub.w	r8, r0, r5
 80312ee:	4641      	mov	r1, r8
 80312f0:	4620      	mov	r0, r4
 80312f2:	f7fe f85f 	bl	802f3b4 <__any_on>
 80312f6:	4683      	mov	fp, r0
 80312f8:	b1b8      	cbz	r0, 803132a <__gethex+0x1da>
 80312fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80312fe:	1159      	asrs	r1, r3, #5
 8031300:	f003 021f 	and.w	r2, r3, #31
 8031304:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8031308:	f04f 0b01 	mov.w	fp, #1
 803130c:	fa0b f202 	lsl.w	r2, fp, r2
 8031310:	420a      	tst	r2, r1
 8031312:	d00a      	beq.n	803132a <__gethex+0x1da>
 8031314:	455b      	cmp	r3, fp
 8031316:	dd06      	ble.n	8031326 <__gethex+0x1d6>
 8031318:	f1a8 0102 	sub.w	r1, r8, #2
 803131c:	4620      	mov	r0, r4
 803131e:	f7fe f849 	bl	802f3b4 <__any_on>
 8031322:	2800      	cmp	r0, #0
 8031324:	d138      	bne.n	8031398 <__gethex+0x248>
 8031326:	f04f 0b02 	mov.w	fp, #2
 803132a:	4641      	mov	r1, r8
 803132c:	4620      	mov	r0, r4
 803132e:	f7ff fea7 	bl	8031080 <rshift>
 8031332:	4446      	add	r6, r8
 8031334:	68bb      	ldr	r3, [r7, #8]
 8031336:	42b3      	cmp	r3, r6
 8031338:	da41      	bge.n	80313be <__gethex+0x26e>
 803133a:	4621      	mov	r1, r4
 803133c:	4648      	mov	r0, r9
 803133e:	f7fd fbed 	bl	802eb1c <_Bfree>
 8031342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8031344:	2300      	movs	r3, #0
 8031346:	6013      	str	r3, [r2, #0]
 8031348:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 803134c:	e78a      	b.n	8031264 <__gethex+0x114>
 803134e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8031352:	2a2e      	cmp	r2, #46	; 0x2e
 8031354:	d014      	beq.n	8031380 <__gethex+0x230>
 8031356:	2b20      	cmp	r3, #32
 8031358:	d106      	bne.n	8031368 <__gethex+0x218>
 803135a:	9b01      	ldr	r3, [sp, #4]
 803135c:	f843 bb04 	str.w	fp, [r3], #4
 8031360:	f04f 0b00 	mov.w	fp, #0
 8031364:	9301      	str	r3, [sp, #4]
 8031366:	465b      	mov	r3, fp
 8031368:	7828      	ldrb	r0, [r5, #0]
 803136a:	9303      	str	r3, [sp, #12]
 803136c:	f7ff feda 	bl	8031124 <__hexdig_fun>
 8031370:	9b03      	ldr	r3, [sp, #12]
 8031372:	f000 000f 	and.w	r0, r0, #15
 8031376:	4098      	lsls	r0, r3
 8031378:	ea4b 0b00 	orr.w	fp, fp, r0
 803137c:	3304      	adds	r3, #4
 803137e:	e7a1      	b.n	80312c4 <__gethex+0x174>
 8031380:	45a8      	cmp	r8, r5
 8031382:	d8e8      	bhi.n	8031356 <__gethex+0x206>
 8031384:	2201      	movs	r2, #1
 8031386:	4628      	mov	r0, r5
 8031388:	9303      	str	r3, [sp, #12]
 803138a:	f7fc fb17 	bl	802d9bc <strncmp>
 803138e:	4926      	ldr	r1, [pc, #152]	; (8031428 <__gethex+0x2d8>)
 8031390:	9b03      	ldr	r3, [sp, #12]
 8031392:	2800      	cmp	r0, #0
 8031394:	d1df      	bne.n	8031356 <__gethex+0x206>
 8031396:	e795      	b.n	80312c4 <__gethex+0x174>
 8031398:	f04f 0b03 	mov.w	fp, #3
 803139c:	e7c5      	b.n	803132a <__gethex+0x1da>
 803139e:	da0b      	bge.n	80313b8 <__gethex+0x268>
 80313a0:	eba5 0800 	sub.w	r8, r5, r0
 80313a4:	4621      	mov	r1, r4
 80313a6:	4642      	mov	r2, r8
 80313a8:	4648      	mov	r0, r9
 80313aa:	f7fd fdd1 	bl	802ef50 <__lshift>
 80313ae:	eba6 0608 	sub.w	r6, r6, r8
 80313b2:	4604      	mov	r4, r0
 80313b4:	f100 0a14 	add.w	sl, r0, #20
 80313b8:	f04f 0b00 	mov.w	fp, #0
 80313bc:	e7ba      	b.n	8031334 <__gethex+0x1e4>
 80313be:	687b      	ldr	r3, [r7, #4]
 80313c0:	42b3      	cmp	r3, r6
 80313c2:	dd73      	ble.n	80314ac <__gethex+0x35c>
 80313c4:	1b9e      	subs	r6, r3, r6
 80313c6:	42b5      	cmp	r5, r6
 80313c8:	dc34      	bgt.n	8031434 <__gethex+0x2e4>
 80313ca:	68fb      	ldr	r3, [r7, #12]
 80313cc:	2b02      	cmp	r3, #2
 80313ce:	d023      	beq.n	8031418 <__gethex+0x2c8>
 80313d0:	2b03      	cmp	r3, #3
 80313d2:	d025      	beq.n	8031420 <__gethex+0x2d0>
 80313d4:	2b01      	cmp	r3, #1
 80313d6:	d115      	bne.n	8031404 <__gethex+0x2b4>
 80313d8:	42b5      	cmp	r5, r6
 80313da:	d113      	bne.n	8031404 <__gethex+0x2b4>
 80313dc:	2d01      	cmp	r5, #1
 80313de:	d10b      	bne.n	80313f8 <__gethex+0x2a8>
 80313e0:	9a02      	ldr	r2, [sp, #8]
 80313e2:	687b      	ldr	r3, [r7, #4]
 80313e4:	6013      	str	r3, [r2, #0]
 80313e6:	2301      	movs	r3, #1
 80313e8:	6123      	str	r3, [r4, #16]
 80313ea:	f8ca 3000 	str.w	r3, [sl]
 80313ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80313f0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80313f4:	601c      	str	r4, [r3, #0]
 80313f6:	e735      	b.n	8031264 <__gethex+0x114>
 80313f8:	1e69      	subs	r1, r5, #1
 80313fa:	4620      	mov	r0, r4
 80313fc:	f7fd ffda 	bl	802f3b4 <__any_on>
 8031400:	2800      	cmp	r0, #0
 8031402:	d1ed      	bne.n	80313e0 <__gethex+0x290>
 8031404:	4621      	mov	r1, r4
 8031406:	4648      	mov	r0, r9
 8031408:	f7fd fb88 	bl	802eb1c <_Bfree>
 803140c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 803140e:	2300      	movs	r3, #0
 8031410:	6013      	str	r3, [r2, #0]
 8031412:	f04f 0850 	mov.w	r8, #80	; 0x50
 8031416:	e725      	b.n	8031264 <__gethex+0x114>
 8031418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803141a:	2b00      	cmp	r3, #0
 803141c:	d1f2      	bne.n	8031404 <__gethex+0x2b4>
 803141e:	e7df      	b.n	80313e0 <__gethex+0x290>
 8031420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8031422:	2b00      	cmp	r3, #0
 8031424:	d1dc      	bne.n	80313e0 <__gethex+0x290>
 8031426:	e7ed      	b.n	8031404 <__gethex+0x2b4>
 8031428:	08034e14 	.word	0x08034e14
 803142c:	08034cad 	.word	0x08034cad
 8031430:	08034f9d 	.word	0x08034f9d
 8031434:	f106 38ff 	add.w	r8, r6, #4294967295
 8031438:	f1bb 0f00 	cmp.w	fp, #0
 803143c:	d133      	bne.n	80314a6 <__gethex+0x356>
 803143e:	f1b8 0f00 	cmp.w	r8, #0
 8031442:	d004      	beq.n	803144e <__gethex+0x2fe>
 8031444:	4641      	mov	r1, r8
 8031446:	4620      	mov	r0, r4
 8031448:	f7fd ffb4 	bl	802f3b4 <__any_on>
 803144c:	4683      	mov	fp, r0
 803144e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8031452:	2301      	movs	r3, #1
 8031454:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8031458:	f008 081f 	and.w	r8, r8, #31
 803145c:	fa03 f308 	lsl.w	r3, r3, r8
 8031460:	4213      	tst	r3, r2
 8031462:	4631      	mov	r1, r6
 8031464:	4620      	mov	r0, r4
 8031466:	bf18      	it	ne
 8031468:	f04b 0b02 	orrne.w	fp, fp, #2
 803146c:	1bad      	subs	r5, r5, r6
 803146e:	f7ff fe07 	bl	8031080 <rshift>
 8031472:	687e      	ldr	r6, [r7, #4]
 8031474:	f04f 0802 	mov.w	r8, #2
 8031478:	f1bb 0f00 	cmp.w	fp, #0
 803147c:	d04a      	beq.n	8031514 <__gethex+0x3c4>
 803147e:	68fb      	ldr	r3, [r7, #12]
 8031480:	2b02      	cmp	r3, #2
 8031482:	d016      	beq.n	80314b2 <__gethex+0x362>
 8031484:	2b03      	cmp	r3, #3
 8031486:	d018      	beq.n	80314ba <__gethex+0x36a>
 8031488:	2b01      	cmp	r3, #1
 803148a:	d109      	bne.n	80314a0 <__gethex+0x350>
 803148c:	f01b 0f02 	tst.w	fp, #2
 8031490:	d006      	beq.n	80314a0 <__gethex+0x350>
 8031492:	f8da 3000 	ldr.w	r3, [sl]
 8031496:	ea4b 0b03 	orr.w	fp, fp, r3
 803149a:	f01b 0f01 	tst.w	fp, #1
 803149e:	d10f      	bne.n	80314c0 <__gethex+0x370>
 80314a0:	f048 0810 	orr.w	r8, r8, #16
 80314a4:	e036      	b.n	8031514 <__gethex+0x3c4>
 80314a6:	f04f 0b01 	mov.w	fp, #1
 80314aa:	e7d0      	b.n	803144e <__gethex+0x2fe>
 80314ac:	f04f 0801 	mov.w	r8, #1
 80314b0:	e7e2      	b.n	8031478 <__gethex+0x328>
 80314b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80314b4:	f1c3 0301 	rsb	r3, r3, #1
 80314b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80314ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80314bc:	2b00      	cmp	r3, #0
 80314be:	d0ef      	beq.n	80314a0 <__gethex+0x350>
 80314c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80314c4:	f104 0214 	add.w	r2, r4, #20
 80314c8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80314cc:	9301      	str	r3, [sp, #4]
 80314ce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80314d2:	2300      	movs	r3, #0
 80314d4:	4694      	mov	ip, r2
 80314d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80314da:	f1b1 3fff 	cmp.w	r1, #4294967295
 80314de:	d01e      	beq.n	803151e <__gethex+0x3ce>
 80314e0:	3101      	adds	r1, #1
 80314e2:	f8cc 1000 	str.w	r1, [ip]
 80314e6:	f1b8 0f02 	cmp.w	r8, #2
 80314ea:	f104 0214 	add.w	r2, r4, #20
 80314ee:	d13d      	bne.n	803156c <__gethex+0x41c>
 80314f0:	683b      	ldr	r3, [r7, #0]
 80314f2:	3b01      	subs	r3, #1
 80314f4:	42ab      	cmp	r3, r5
 80314f6:	d10b      	bne.n	8031510 <__gethex+0x3c0>
 80314f8:	1169      	asrs	r1, r5, #5
 80314fa:	2301      	movs	r3, #1
 80314fc:	f005 051f 	and.w	r5, r5, #31
 8031500:	fa03 f505 	lsl.w	r5, r3, r5
 8031504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8031508:	421d      	tst	r5, r3
 803150a:	bf18      	it	ne
 803150c:	f04f 0801 	movne.w	r8, #1
 8031510:	f048 0820 	orr.w	r8, r8, #32
 8031514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8031516:	601c      	str	r4, [r3, #0]
 8031518:	9b02      	ldr	r3, [sp, #8]
 803151a:	601e      	str	r6, [r3, #0]
 803151c:	e6a2      	b.n	8031264 <__gethex+0x114>
 803151e:	4290      	cmp	r0, r2
 8031520:	f842 3c04 	str.w	r3, [r2, #-4]
 8031524:	d8d6      	bhi.n	80314d4 <__gethex+0x384>
 8031526:	68a2      	ldr	r2, [r4, #8]
 8031528:	4593      	cmp	fp, r2
 803152a:	db17      	blt.n	803155c <__gethex+0x40c>
 803152c:	6861      	ldr	r1, [r4, #4]
 803152e:	4648      	mov	r0, r9
 8031530:	3101      	adds	r1, #1
 8031532:	f7fd fab3 	bl	802ea9c <_Balloc>
 8031536:	4682      	mov	sl, r0
 8031538:	b918      	cbnz	r0, 8031542 <__gethex+0x3f2>
 803153a:	4b1b      	ldr	r3, [pc, #108]	; (80315a8 <__gethex+0x458>)
 803153c:	4602      	mov	r2, r0
 803153e:	2184      	movs	r1, #132	; 0x84
 8031540:	e6b3      	b.n	80312aa <__gethex+0x15a>
 8031542:	6922      	ldr	r2, [r4, #16]
 8031544:	3202      	adds	r2, #2
 8031546:	f104 010c 	add.w	r1, r4, #12
 803154a:	0092      	lsls	r2, r2, #2
 803154c:	300c      	adds	r0, #12
 803154e:	f7fc fbc2 	bl	802dcd6 <memcpy>
 8031552:	4621      	mov	r1, r4
 8031554:	4648      	mov	r0, r9
 8031556:	f7fd fae1 	bl	802eb1c <_Bfree>
 803155a:	4654      	mov	r4, sl
 803155c:	6922      	ldr	r2, [r4, #16]
 803155e:	1c51      	adds	r1, r2, #1
 8031560:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8031564:	6121      	str	r1, [r4, #16]
 8031566:	2101      	movs	r1, #1
 8031568:	6151      	str	r1, [r2, #20]
 803156a:	e7bc      	b.n	80314e6 <__gethex+0x396>
 803156c:	6921      	ldr	r1, [r4, #16]
 803156e:	4559      	cmp	r1, fp
 8031570:	dd0b      	ble.n	803158a <__gethex+0x43a>
 8031572:	2101      	movs	r1, #1
 8031574:	4620      	mov	r0, r4
 8031576:	f7ff fd83 	bl	8031080 <rshift>
 803157a:	68bb      	ldr	r3, [r7, #8]
 803157c:	3601      	adds	r6, #1
 803157e:	42b3      	cmp	r3, r6
 8031580:	f6ff aedb 	blt.w	803133a <__gethex+0x1ea>
 8031584:	f04f 0801 	mov.w	r8, #1
 8031588:	e7c2      	b.n	8031510 <__gethex+0x3c0>
 803158a:	f015 051f 	ands.w	r5, r5, #31
 803158e:	d0f9      	beq.n	8031584 <__gethex+0x434>
 8031590:	9b01      	ldr	r3, [sp, #4]
 8031592:	441a      	add	r2, r3
 8031594:	f1c5 0520 	rsb	r5, r5, #32
 8031598:	f852 0c04 	ldr.w	r0, [r2, #-4]
 803159c:	f7fd fb70 	bl	802ec80 <__hi0bits>
 80315a0:	42a8      	cmp	r0, r5
 80315a2:	dbe6      	blt.n	8031572 <__gethex+0x422>
 80315a4:	e7ee      	b.n	8031584 <__gethex+0x434>
 80315a6:	bf00      	nop
 80315a8:	08034cad 	.word	0x08034cad

080315ac <L_shift>:
 80315ac:	f1c2 0208 	rsb	r2, r2, #8
 80315b0:	0092      	lsls	r2, r2, #2
 80315b2:	b570      	push	{r4, r5, r6, lr}
 80315b4:	f1c2 0620 	rsb	r6, r2, #32
 80315b8:	6843      	ldr	r3, [r0, #4]
 80315ba:	6804      	ldr	r4, [r0, #0]
 80315bc:	fa03 f506 	lsl.w	r5, r3, r6
 80315c0:	432c      	orrs	r4, r5
 80315c2:	40d3      	lsrs	r3, r2
 80315c4:	6004      	str	r4, [r0, #0]
 80315c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80315ca:	4288      	cmp	r0, r1
 80315cc:	d3f4      	bcc.n	80315b8 <L_shift+0xc>
 80315ce:	bd70      	pop	{r4, r5, r6, pc}

080315d0 <__match>:
 80315d0:	b530      	push	{r4, r5, lr}
 80315d2:	6803      	ldr	r3, [r0, #0]
 80315d4:	3301      	adds	r3, #1
 80315d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80315da:	b914      	cbnz	r4, 80315e2 <__match+0x12>
 80315dc:	6003      	str	r3, [r0, #0]
 80315de:	2001      	movs	r0, #1
 80315e0:	bd30      	pop	{r4, r5, pc}
 80315e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80315e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80315ea:	2d19      	cmp	r5, #25
 80315ec:	bf98      	it	ls
 80315ee:	3220      	addls	r2, #32
 80315f0:	42a2      	cmp	r2, r4
 80315f2:	d0f0      	beq.n	80315d6 <__match+0x6>
 80315f4:	2000      	movs	r0, #0
 80315f6:	e7f3      	b.n	80315e0 <__match+0x10>

080315f8 <__hexnan>:
 80315f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80315fc:	680b      	ldr	r3, [r1, #0]
 80315fe:	6801      	ldr	r1, [r0, #0]
 8031600:	115e      	asrs	r6, r3, #5
 8031602:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8031606:	f013 031f 	ands.w	r3, r3, #31
 803160a:	b087      	sub	sp, #28
 803160c:	bf18      	it	ne
 803160e:	3604      	addne	r6, #4
 8031610:	2500      	movs	r5, #0
 8031612:	1f37      	subs	r7, r6, #4
 8031614:	4682      	mov	sl, r0
 8031616:	4690      	mov	r8, r2
 8031618:	9301      	str	r3, [sp, #4]
 803161a:	f846 5c04 	str.w	r5, [r6, #-4]
 803161e:	46b9      	mov	r9, r7
 8031620:	463c      	mov	r4, r7
 8031622:	9502      	str	r5, [sp, #8]
 8031624:	46ab      	mov	fp, r5
 8031626:	784a      	ldrb	r2, [r1, #1]
 8031628:	1c4b      	adds	r3, r1, #1
 803162a:	9303      	str	r3, [sp, #12]
 803162c:	b342      	cbz	r2, 8031680 <__hexnan+0x88>
 803162e:	4610      	mov	r0, r2
 8031630:	9105      	str	r1, [sp, #20]
 8031632:	9204      	str	r2, [sp, #16]
 8031634:	f7ff fd76 	bl	8031124 <__hexdig_fun>
 8031638:	2800      	cmp	r0, #0
 803163a:	d14f      	bne.n	80316dc <__hexnan+0xe4>
 803163c:	9a04      	ldr	r2, [sp, #16]
 803163e:	9905      	ldr	r1, [sp, #20]
 8031640:	2a20      	cmp	r2, #32
 8031642:	d818      	bhi.n	8031676 <__hexnan+0x7e>
 8031644:	9b02      	ldr	r3, [sp, #8]
 8031646:	459b      	cmp	fp, r3
 8031648:	dd13      	ble.n	8031672 <__hexnan+0x7a>
 803164a:	454c      	cmp	r4, r9
 803164c:	d206      	bcs.n	803165c <__hexnan+0x64>
 803164e:	2d07      	cmp	r5, #7
 8031650:	dc04      	bgt.n	803165c <__hexnan+0x64>
 8031652:	462a      	mov	r2, r5
 8031654:	4649      	mov	r1, r9
 8031656:	4620      	mov	r0, r4
 8031658:	f7ff ffa8 	bl	80315ac <L_shift>
 803165c:	4544      	cmp	r4, r8
 803165e:	d950      	bls.n	8031702 <__hexnan+0x10a>
 8031660:	2300      	movs	r3, #0
 8031662:	f1a4 0904 	sub.w	r9, r4, #4
 8031666:	f844 3c04 	str.w	r3, [r4, #-4]
 803166a:	f8cd b008 	str.w	fp, [sp, #8]
 803166e:	464c      	mov	r4, r9
 8031670:	461d      	mov	r5, r3
 8031672:	9903      	ldr	r1, [sp, #12]
 8031674:	e7d7      	b.n	8031626 <__hexnan+0x2e>
 8031676:	2a29      	cmp	r2, #41	; 0x29
 8031678:	d155      	bne.n	8031726 <__hexnan+0x12e>
 803167a:	3102      	adds	r1, #2
 803167c:	f8ca 1000 	str.w	r1, [sl]
 8031680:	f1bb 0f00 	cmp.w	fp, #0
 8031684:	d04f      	beq.n	8031726 <__hexnan+0x12e>
 8031686:	454c      	cmp	r4, r9
 8031688:	d206      	bcs.n	8031698 <__hexnan+0xa0>
 803168a:	2d07      	cmp	r5, #7
 803168c:	dc04      	bgt.n	8031698 <__hexnan+0xa0>
 803168e:	462a      	mov	r2, r5
 8031690:	4649      	mov	r1, r9
 8031692:	4620      	mov	r0, r4
 8031694:	f7ff ff8a 	bl	80315ac <L_shift>
 8031698:	4544      	cmp	r4, r8
 803169a:	d934      	bls.n	8031706 <__hexnan+0x10e>
 803169c:	f1a8 0204 	sub.w	r2, r8, #4
 80316a0:	4623      	mov	r3, r4
 80316a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80316a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80316aa:	429f      	cmp	r7, r3
 80316ac:	d2f9      	bcs.n	80316a2 <__hexnan+0xaa>
 80316ae:	1b3b      	subs	r3, r7, r4
 80316b0:	f023 0303 	bic.w	r3, r3, #3
 80316b4:	3304      	adds	r3, #4
 80316b6:	3e03      	subs	r6, #3
 80316b8:	3401      	adds	r4, #1
 80316ba:	42a6      	cmp	r6, r4
 80316bc:	bf38      	it	cc
 80316be:	2304      	movcc	r3, #4
 80316c0:	4443      	add	r3, r8
 80316c2:	2200      	movs	r2, #0
 80316c4:	f843 2b04 	str.w	r2, [r3], #4
 80316c8:	429f      	cmp	r7, r3
 80316ca:	d2fb      	bcs.n	80316c4 <__hexnan+0xcc>
 80316cc:	683b      	ldr	r3, [r7, #0]
 80316ce:	b91b      	cbnz	r3, 80316d8 <__hexnan+0xe0>
 80316d0:	4547      	cmp	r7, r8
 80316d2:	d126      	bne.n	8031722 <__hexnan+0x12a>
 80316d4:	2301      	movs	r3, #1
 80316d6:	603b      	str	r3, [r7, #0]
 80316d8:	2005      	movs	r0, #5
 80316da:	e025      	b.n	8031728 <__hexnan+0x130>
 80316dc:	3501      	adds	r5, #1
 80316de:	2d08      	cmp	r5, #8
 80316e0:	f10b 0b01 	add.w	fp, fp, #1
 80316e4:	dd06      	ble.n	80316f4 <__hexnan+0xfc>
 80316e6:	4544      	cmp	r4, r8
 80316e8:	d9c3      	bls.n	8031672 <__hexnan+0x7a>
 80316ea:	2300      	movs	r3, #0
 80316ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80316f0:	2501      	movs	r5, #1
 80316f2:	3c04      	subs	r4, #4
 80316f4:	6822      	ldr	r2, [r4, #0]
 80316f6:	f000 000f 	and.w	r0, r0, #15
 80316fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80316fe:	6020      	str	r0, [r4, #0]
 8031700:	e7b7      	b.n	8031672 <__hexnan+0x7a>
 8031702:	2508      	movs	r5, #8
 8031704:	e7b5      	b.n	8031672 <__hexnan+0x7a>
 8031706:	9b01      	ldr	r3, [sp, #4]
 8031708:	2b00      	cmp	r3, #0
 803170a:	d0df      	beq.n	80316cc <__hexnan+0xd4>
 803170c:	f1c3 0320 	rsb	r3, r3, #32
 8031710:	f04f 32ff 	mov.w	r2, #4294967295
 8031714:	40da      	lsrs	r2, r3
 8031716:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803171a:	4013      	ands	r3, r2
 803171c:	f846 3c04 	str.w	r3, [r6, #-4]
 8031720:	e7d4      	b.n	80316cc <__hexnan+0xd4>
 8031722:	3f04      	subs	r7, #4
 8031724:	e7d2      	b.n	80316cc <__hexnan+0xd4>
 8031726:	2004      	movs	r0, #4
 8031728:	b007      	add	sp, #28
 803172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803172e <__ascii_mbtowc>:
 803172e:	b082      	sub	sp, #8
 8031730:	b901      	cbnz	r1, 8031734 <__ascii_mbtowc+0x6>
 8031732:	a901      	add	r1, sp, #4
 8031734:	b142      	cbz	r2, 8031748 <__ascii_mbtowc+0x1a>
 8031736:	b14b      	cbz	r3, 803174c <__ascii_mbtowc+0x1e>
 8031738:	7813      	ldrb	r3, [r2, #0]
 803173a:	600b      	str	r3, [r1, #0]
 803173c:	7812      	ldrb	r2, [r2, #0]
 803173e:	1e10      	subs	r0, r2, #0
 8031740:	bf18      	it	ne
 8031742:	2001      	movne	r0, #1
 8031744:	b002      	add	sp, #8
 8031746:	4770      	bx	lr
 8031748:	4610      	mov	r0, r2
 803174a:	e7fb      	b.n	8031744 <__ascii_mbtowc+0x16>
 803174c:	f06f 0001 	mvn.w	r0, #1
 8031750:	e7f8      	b.n	8031744 <__ascii_mbtowc+0x16>

08031752 <_realloc_r>:
 8031752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031756:	4680      	mov	r8, r0
 8031758:	4614      	mov	r4, r2
 803175a:	460e      	mov	r6, r1
 803175c:	b921      	cbnz	r1, 8031768 <_realloc_r+0x16>
 803175e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031762:	4611      	mov	r1, r2
 8031764:	f7fa bf76 	b.w	802c654 <_malloc_r>
 8031768:	b92a      	cbnz	r2, 8031776 <_realloc_r+0x24>
 803176a:	f7fd f94b 	bl	802ea04 <_free_r>
 803176e:	4625      	mov	r5, r4
 8031770:	4628      	mov	r0, r5
 8031772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031776:	f000 f89c 	bl	80318b2 <_malloc_usable_size_r>
 803177a:	4284      	cmp	r4, r0
 803177c:	4607      	mov	r7, r0
 803177e:	d802      	bhi.n	8031786 <_realloc_r+0x34>
 8031780:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8031784:	d812      	bhi.n	80317ac <_realloc_r+0x5a>
 8031786:	4621      	mov	r1, r4
 8031788:	4640      	mov	r0, r8
 803178a:	f7fa ff63 	bl	802c654 <_malloc_r>
 803178e:	4605      	mov	r5, r0
 8031790:	2800      	cmp	r0, #0
 8031792:	d0ed      	beq.n	8031770 <_realloc_r+0x1e>
 8031794:	42bc      	cmp	r4, r7
 8031796:	4622      	mov	r2, r4
 8031798:	4631      	mov	r1, r6
 803179a:	bf28      	it	cs
 803179c:	463a      	movcs	r2, r7
 803179e:	f7fc fa9a 	bl	802dcd6 <memcpy>
 80317a2:	4631      	mov	r1, r6
 80317a4:	4640      	mov	r0, r8
 80317a6:	f7fd f92d 	bl	802ea04 <_free_r>
 80317aa:	e7e1      	b.n	8031770 <_realloc_r+0x1e>
 80317ac:	4635      	mov	r5, r6
 80317ae:	e7df      	b.n	8031770 <_realloc_r+0x1e>

080317b0 <_strtoul_l.constprop.0>:
 80317b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80317b4:	4f36      	ldr	r7, [pc, #216]	; (8031890 <_strtoul_l.constprop.0+0xe0>)
 80317b6:	4686      	mov	lr, r0
 80317b8:	460d      	mov	r5, r1
 80317ba:	4628      	mov	r0, r5
 80317bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80317c0:	5d3e      	ldrb	r6, [r7, r4]
 80317c2:	f016 0608 	ands.w	r6, r6, #8
 80317c6:	d1f8      	bne.n	80317ba <_strtoul_l.constprop.0+0xa>
 80317c8:	2c2d      	cmp	r4, #45	; 0x2d
 80317ca:	d130      	bne.n	803182e <_strtoul_l.constprop.0+0x7e>
 80317cc:	782c      	ldrb	r4, [r5, #0]
 80317ce:	2601      	movs	r6, #1
 80317d0:	1c85      	adds	r5, r0, #2
 80317d2:	2b00      	cmp	r3, #0
 80317d4:	d057      	beq.n	8031886 <_strtoul_l.constprop.0+0xd6>
 80317d6:	2b10      	cmp	r3, #16
 80317d8:	d109      	bne.n	80317ee <_strtoul_l.constprop.0+0x3e>
 80317da:	2c30      	cmp	r4, #48	; 0x30
 80317dc:	d107      	bne.n	80317ee <_strtoul_l.constprop.0+0x3e>
 80317de:	7828      	ldrb	r0, [r5, #0]
 80317e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80317e4:	2858      	cmp	r0, #88	; 0x58
 80317e6:	d149      	bne.n	803187c <_strtoul_l.constprop.0+0xcc>
 80317e8:	786c      	ldrb	r4, [r5, #1]
 80317ea:	2310      	movs	r3, #16
 80317ec:	3502      	adds	r5, #2
 80317ee:	f04f 38ff 	mov.w	r8, #4294967295
 80317f2:	2700      	movs	r7, #0
 80317f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80317f8:	fb03 f908 	mul.w	r9, r3, r8
 80317fc:	ea6f 0909 	mvn.w	r9, r9
 8031800:	4638      	mov	r0, r7
 8031802:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8031806:	f1bc 0f09 	cmp.w	ip, #9
 803180a:	d815      	bhi.n	8031838 <_strtoul_l.constprop.0+0x88>
 803180c:	4664      	mov	r4, ip
 803180e:	42a3      	cmp	r3, r4
 8031810:	dd23      	ble.n	803185a <_strtoul_l.constprop.0+0xaa>
 8031812:	f1b7 3fff 	cmp.w	r7, #4294967295
 8031816:	d007      	beq.n	8031828 <_strtoul_l.constprop.0+0x78>
 8031818:	4580      	cmp	r8, r0
 803181a:	d31b      	bcc.n	8031854 <_strtoul_l.constprop.0+0xa4>
 803181c:	d101      	bne.n	8031822 <_strtoul_l.constprop.0+0x72>
 803181e:	45a1      	cmp	r9, r4
 8031820:	db18      	blt.n	8031854 <_strtoul_l.constprop.0+0xa4>
 8031822:	fb00 4003 	mla	r0, r0, r3, r4
 8031826:	2701      	movs	r7, #1
 8031828:	f815 4b01 	ldrb.w	r4, [r5], #1
 803182c:	e7e9      	b.n	8031802 <_strtoul_l.constprop.0+0x52>
 803182e:	2c2b      	cmp	r4, #43	; 0x2b
 8031830:	bf04      	itt	eq
 8031832:	782c      	ldrbeq	r4, [r5, #0]
 8031834:	1c85      	addeq	r5, r0, #2
 8031836:	e7cc      	b.n	80317d2 <_strtoul_l.constprop.0+0x22>
 8031838:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 803183c:	f1bc 0f19 	cmp.w	ip, #25
 8031840:	d801      	bhi.n	8031846 <_strtoul_l.constprop.0+0x96>
 8031842:	3c37      	subs	r4, #55	; 0x37
 8031844:	e7e3      	b.n	803180e <_strtoul_l.constprop.0+0x5e>
 8031846:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 803184a:	f1bc 0f19 	cmp.w	ip, #25
 803184e:	d804      	bhi.n	803185a <_strtoul_l.constprop.0+0xaa>
 8031850:	3c57      	subs	r4, #87	; 0x57
 8031852:	e7dc      	b.n	803180e <_strtoul_l.constprop.0+0x5e>
 8031854:	f04f 37ff 	mov.w	r7, #4294967295
 8031858:	e7e6      	b.n	8031828 <_strtoul_l.constprop.0+0x78>
 803185a:	1c7b      	adds	r3, r7, #1
 803185c:	d106      	bne.n	803186c <_strtoul_l.constprop.0+0xbc>
 803185e:	2322      	movs	r3, #34	; 0x22
 8031860:	f8ce 3000 	str.w	r3, [lr]
 8031864:	4638      	mov	r0, r7
 8031866:	b932      	cbnz	r2, 8031876 <_strtoul_l.constprop.0+0xc6>
 8031868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803186c:	b106      	cbz	r6, 8031870 <_strtoul_l.constprop.0+0xc0>
 803186e:	4240      	negs	r0, r0
 8031870:	2a00      	cmp	r2, #0
 8031872:	d0f9      	beq.n	8031868 <_strtoul_l.constprop.0+0xb8>
 8031874:	b107      	cbz	r7, 8031878 <_strtoul_l.constprop.0+0xc8>
 8031876:	1e69      	subs	r1, r5, #1
 8031878:	6011      	str	r1, [r2, #0]
 803187a:	e7f5      	b.n	8031868 <_strtoul_l.constprop.0+0xb8>
 803187c:	2430      	movs	r4, #48	; 0x30
 803187e:	2b00      	cmp	r3, #0
 8031880:	d1b5      	bne.n	80317ee <_strtoul_l.constprop.0+0x3e>
 8031882:	2308      	movs	r3, #8
 8031884:	e7b3      	b.n	80317ee <_strtoul_l.constprop.0+0x3e>
 8031886:	2c30      	cmp	r4, #48	; 0x30
 8031888:	d0a9      	beq.n	80317de <_strtoul_l.constprop.0+0x2e>
 803188a:	230a      	movs	r3, #10
 803188c:	e7af      	b.n	80317ee <_strtoul_l.constprop.0+0x3e>
 803188e:	bf00      	nop
 8031890:	08034e69 	.word	0x08034e69

08031894 <_strtoul_r>:
 8031894:	f7ff bf8c 	b.w	80317b0 <_strtoul_l.constprop.0>

08031898 <__ascii_wctomb>:
 8031898:	b149      	cbz	r1, 80318ae <__ascii_wctomb+0x16>
 803189a:	2aff      	cmp	r2, #255	; 0xff
 803189c:	bf85      	ittet	hi
 803189e:	238a      	movhi	r3, #138	; 0x8a
 80318a0:	6003      	strhi	r3, [r0, #0]
 80318a2:	700a      	strbls	r2, [r1, #0]
 80318a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80318a8:	bf98      	it	ls
 80318aa:	2001      	movls	r0, #1
 80318ac:	4770      	bx	lr
 80318ae:	4608      	mov	r0, r1
 80318b0:	4770      	bx	lr

080318b2 <_malloc_usable_size_r>:
 80318b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80318b6:	1f18      	subs	r0, r3, #4
 80318b8:	2b00      	cmp	r3, #0
 80318ba:	bfbc      	itt	lt
 80318bc:	580b      	ldrlt	r3, [r1, r0]
 80318be:	18c0      	addlt	r0, r0, r3
 80318c0:	4770      	bx	lr
	...

080318c4 <_init>:
 80318c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80318c6:	bf00      	nop
 80318c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80318ca:	bc08      	pop	{r3}
 80318cc:	469e      	mov	lr, r3
 80318ce:	4770      	bx	lr

080318d0 <_fini>:
 80318d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80318d2:	bf00      	nop
 80318d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80318d6:	bc08      	pop	{r3}
 80318d8:	469e      	mov	lr, r3
 80318da:	4770      	bx	lr
